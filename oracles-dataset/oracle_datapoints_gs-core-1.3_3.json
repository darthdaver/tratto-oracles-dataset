[
    {
        "id": 2886,
        "oracle": ";",
        "oracleType": "PRE",
        "projectName": "gs-core-1.3",
        "packageName": "org.graphstream.ui.layout.springbox.implementations",
        "className": "LinLogNodeParticle",
        "javadocTag": "@param z The depth.",
        "methodJavadoc": "    /**\n\t * New node at a given position.\n\t * \n\t * @param box\n\t *            The spring box.\n\t * @param id\n\t *            The node identifier.\n\t * @param x\n\t *            The abscissa.\n\t * @param y\n\t *            The ordinate.\n\t * @param z\n\t *            The depth.\n\t */",
        "methodSourceCode": "public LinLogNodeParticle(LinLog box, String id, double x, double y, double z){\n    super(box, id, x, y, z);\n}",
        "classJavadoc": "/**\n     * New node.\n     *\n     * The node is placed at random in the space of the simulation.\n     *\n     * @param box\n     *            The spring box.\n     * @param id\n     *            The node identifier.\n     */",
        "classSourceCode": "/*\n * Copyright 2006 - 2015\n *     Stefan Balev     <stefan.balev@graphstream-project.org>\n *     Julien Baudry    <julien.baudry@graphstream-project.org>\n *     Antoine Dutot    <antoine.dutot@graphstream-project.org>\n *     Yoann Pign\u00e9      <yoann.pigne@graphstream-project.org>\n *     Guilhelm Savin   <guilhelm.savin@graphstream-project.org>\n * \n * This file is part of GraphStream <http://graphstream-project.org>.\n * \n * GraphStream is a library whose purpose is to handle static or dynamic\n * graph, create them from scratch, file or any source and display them.\n * \n * This program is free software distributed under the terms of two licenses, the\n * CeCILL-C license that fits European law, and the GNU Lesser General Public\n * License. You can  use, modify and/ or redistribute the software under the terms\n * of the CeCILL-C license as circulated by CEA, CNRS and INRIA at the following\n * URL <http://www.cecill.info> or under the terms of the GNU LGPL as published by\n * the Free Software Foundation, either version 3 of the License, or (at your\n * option) any later version.\n * \n * This program is distributed in the hope that it will be useful, but WITHOUT ANY\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A\n * PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more details.\n * \n * You should have received a copy of the GNU Lesser General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n * \n * The fact that you are presently reading this means that you have had\n * knowledge of the CeCILL-C and LGPL licenses and that you accept their terms.\n */\npackage org.graphstream.ui.layout.springbox.implementations;\n\nimport java.util.Iterator;\n\nimport org.graphstream.ui.geom.Vector3;\nimport org.graphstream.ui.layout.springbox.EdgeSpring;\nimport org.graphstream.ui.layout.springbox.Energies;\nimport org.graphstream.ui.layout.springbox.GraphCellData;\nimport org.graphstream.ui.layout.springbox.NodeParticle;\nimport org.miv.pherd.Particle;\nimport org.miv.pherd.ParticleBox;\nimport org.miv.pherd.ntree.Cell;\n\npublic class LinLogNodeParticle extends NodeParticle {\n\t/**\n\t * New node.\n\t * \n\t * The node is placed at random in the space of the simulation.\n\t * \n\t * @param box\n\t *            The spring box.\n\t * @param id\n\t *            The node identifier.\n\t */\n\tpublic LinLogNodeParticle(LinLog box, String id) {\n\t\tthis(box, id, (box.getRandom().nextDouble() * 2 * box.k) - box.k, (box\n\t\t\t\t.getRandom().nextDouble() * 2 * box.k) - box.k,\n\t\t\t\tbox.is3D() ? (box.getRandom().nextDouble() * 2 * box.k) - box.k\n\t\t\t\t\t\t: 0);\n\n\t\tthis.box = box;\n\t}\n\t\n\t/**\n\t * New node at a given position.\n\t * \n\t * @param box\n\t *            The spring box.\n\t * @param id\n\t *            The node identifier.\n\t * @param x\n\t *            The abscissa.\n\t * @param y\n\t *            The ordinate.\n\t * @param z\n\t *            The depth.\n\t */\n\tpublic LinLogNodeParticle(LinLog box, String id, double x, double y,\n\t\t\tdouble z) {\n\t\tsuper(box, id, x, y, z);\n\t}\n\n\t@Override\n\tprotected void repulsionN2(Vector3 delta) {\n\t\tLinLog box = (LinLog) this.box;\n\t\tboolean is3D = box.is3D();\n\t\tParticleBox nodes = box.getSpatialIndex();\n\t\tEnergies energies = box.getEnergies();\n\t\tIterator<Object> i = nodes.getParticleIdIterator();\n\t\tint deg = neighbours.size();\n\n\t\twhile (i.hasNext()) {\n\t\t\tLinLogNodeParticle node = (LinLogNodeParticle) nodes\n\t\t\t\t\t.getParticle(i.next());\n\n\t\t\tif (node != this) {\n\t\t\t\tdelta.set(node.pos.x - pos.x, node.pos.y - pos.y,\n\t\t\t\t\t\tis3D ? node.pos.z - pos.z : 0);\n\n//\t\t\t\tdouble len = delta.normalize();\n\t\t\t\tdouble len = delta.length();\n\n\t\t\t\tif(len > 0) {\n\t\t\t\t\tdouble degFactor = box.edgeBased ? deg * node.neighbours.size() : 1;\n\t\t\t\t\tdouble factor = 1;\n\t\t\t\t\tdouble r = box.r;\n\n\t\t\t\t\tfactor = -degFactor * (Math.pow(len, r-2)) * node.weight * weight * box.rFactor;\n\n\t\t\t\t\tif(factor < -box.maxR) { factor = -box.maxR; }\n\t\t\t\t\t\n\t\t\t\t\tenergies.accumulateEnergy(factor); // TODO check this\n\t\t\t\t\tdelta.scalarMult(factor);\n\t\t\t\t\tdisp.add(delta);\n\t\t\t\t\trepE += factor;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\t@Override\n\tprotected void repulsionNLogN(Vector3 delta) {\n\t\t// Explore the n-tree from the root cell and consider the contents\n\t\t// of one cell only if it does intersect an area around the current\n\t\t// node. Else take its (weighted) barycenter into account.\n\n\t\trecurseRepulsion(box.getSpatialIndex().getNTree().getRootCell(), delta);\n\t}\n\n\tprotected void recurseRepulsion(Cell cell, Vector3 delta) {\n\t\tLinLog box = (LinLog) this.box;\n\t\tboolean is3D = box.is3D();\n\t\tEnergies energies = box.getEnergies();\n\t\tint deg = neighbours.size();\n\n\t\tif (intersection(cell)) {\n\t\t\tif (cell.isLeaf()) {\n\t\t\t\tIterator<? extends Particle> i = cell.getParticles();\n\n\t\t\t\twhile (i.hasNext()) {\n\t\t\t\t\tLinLogNodeParticle node = (LinLogNodeParticle) i.next();\n\n\t\t\t\t\tif (node != this) {\n\t\t\t\t\t\tdelta.set(node.pos.x - pos.x, node.pos.y - pos.y, is3D ? node.pos.z\n\t\t\t\t\t\t\t\t- pos.z : 0);\n\n\t\t\t\t\t\t//double len = delta.normalize();\n\t\t\t\t\t\tdouble len = delta.length();\n\n\t\t\t\t\t\tif (len > 0) {\n\t\t\t\t\t\t\tdouble degFactor = box.edgeBased ? deg * node.neighbours.size() : 1;\n\t\t\t\t\t\t\tdouble factor = 1;\n\t\t\t\t\t\t\tdouble r = box.r;\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tfactor = -degFactor * (Math.pow(len, r-2)) * node.weight * weight * box.rFactor;\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tif(factor < -box.maxR) { factor = -box.maxR; }\n\n\t\t\t\t\t\t\tenergies.accumulateEnergy(factor);\t// TODO check this\n\t\t\t\t\t\t\tdelta.scalarMult(factor);\n\t\t\t\t\t\t\tdisp.add(delta);\n\t\t\t\t\t\t\trepE += factor;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tint div = cell.getSpace().getDivisions();\n\n\t\t\t\tfor (int i = 0; i < div; i++)\n\t\t\t\t\trecurseRepulsion(cell.getSub(i), delta);\n\t\t\t}\n\t\t} else {\n\t\t\tif (cell != this.cell) {\n\t\t\t\tGraphCellData bary = (GraphCellData) cell.getData();\n\t\t\t\tdouble dist = bary.distanceFrom(pos);\n\t\t\t\tdouble size = cell.getSpace().getSize();\n\n\t\t\t\tif ((!cell.isLeaf())\n\t\t\t\t\t\t&& ((size / dist) > box.getBarnesHutTheta())) {\n\t\t\t\t\tint div = cell.getSpace().getDivisions();\n\n\t\t\t\t\tfor (int i = 0; i < div; i++)\n\t\t\t\t\t\trecurseRepulsion(cell.getSub(i), delta);\n\t\t\t\t} else {\n\t\t\t\t\tif (bary.weight != 0) {\n\t\t\t\t\t\tdelta.set(bary.center.x - pos.x, bary.center.y - pos.y,\n\t\t\t\t\t\t\t\tis3D ? bary.center.z - pos.z : 0);\n\n\t\t\t\t\t\t//double len = delta.normalize();\n\t\t\t\t\t\tdouble len = delta.length();\n\n\t\t\t\t\t\tif (len > 0) {\n\t\t\t\t\t\t\tdouble degFactor = box.edgeBased ? deg * bary.degree : 1;\n\t\t\t\t\t\t\tdouble factor = 1;\n\t\t\t\t\t\t\tdouble r = box.r;\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tfactor = -degFactor * (Math.pow(len, r-2)) * bary.weight * weight * box.rFactor;\n\n\t\t\t\t\t\t\tif(factor < -box.maxR) { factor = -box.maxR; }\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tenergies.accumulateEnergy(factor);\t// TODO check this\n\t\t\t\t\t\t\tdelta.scalarMult(factor);\n\t\t\t\t\t\t\tdisp.add(delta);\n\t\t\t\t\t\t\trepE += factor;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t@Override\n\tprotected void attraction(Vector3 delta) {\n\t\tLinLog box = (LinLog) this.box;\n\t\tboolean is3D = box.is3D();\n\t\tEnergies energies = box.getEnergies();\n\n\t\tfor (EdgeSpring edge : neighbours) {\n\t\t\tif (!edge.ignored) {\n\t\t\t\tLinLogNodeParticle other = (LinLogNodeParticle) edge.getOpposite(this);\n\n\t\t\t\tdelta.set(other.pos.x - pos.x, other.pos.y - pos.y, is3D ? other.pos.z - pos.z : 0);\n\n//\t\t\t\tdouble len = delta.normalize();\n\t\t\t\tdouble len = delta.length();\n\n\t\t\t\tif(len > 0) {\n\t\t\t\t\tdouble factor = 1;\n\t\t\t\t\tdouble a = box.a;\n\n\t\t\t\t\tfactor = (Math.pow(len, a-2)) * edge.weight * box.aFactor;\n\n\t\t\t\t\tenergies.accumulateEnergy(factor);\n\t\t\t\t\tdelta.scalarMult(factor);\n\t\t\t\t\tdisp.add(delta);\n\t\t\t\t\tattE += factor;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\t@Override\n\tprotected void gravity(Vector3 delta) {\n\t}\n\t\n\tprotected boolean intersection(Cell cell) {\n\t\tLinLog box = (LinLog) this.box;\n\n\t\tdouble k = box.k;\n\t\tdouble vz = box.getViewZone();\n\n\t\tdouble x1 = cell.getSpace().getLoAnchor().x;\n\t\tdouble y1 = cell.getSpace().getLoAnchor().y;\n\t\tdouble z1 = cell.getSpace().getLoAnchor().z;\n\n\t\tdouble x2 = cell.getSpace().getHiAnchor().x;\n\t\tdouble y2 = cell.getSpace().getHiAnchor().y;\n\t\tdouble z2 = cell.getSpace().getHiAnchor().z;\n\n\t\tdouble X1 = pos.x - (k * vz);\n\t\tdouble Y1 = pos.y - (k * vz);\n\t\tdouble Z1 = pos.z - (k * vz);\n\t\tdouble X2 = pos.x + (k * vz);\n\t\tdouble Y2 = pos.y + (k * vz);\n\t\tdouble Z2 = pos.z + (k * vz);\n\n\t\tif (X2 < x1 || X1 > x2)\n\t\t\treturn false;\n\n\t\tif (Y2 < y1 || Y1 > y2)\n\t\t\treturn false;\n\n\t\tif (Z2 < z1 || Z1 > z2)\n\t\t\treturn false;\n\n\t\treturn true;\n\t}\n}",
        "tokensGeneralGrammar": [
            "null",
            "true",
            "false",
            ",",
            ".",
            ":",
            ";",
            "?",
            "(",
            ")",
            "jdVar",
            "stream",
            "Arrays",
            "allMatch",
            "noneMatch",
            "anyMatch",
            "~",
            ">>",
            "<<",
            ">>>",
            "|",
            "&",
            "^",
            "+",
            "-",
            "/",
            "*",
            "%",
            "&&",
            "||",
            ">=",
            "<=",
            ">",
            "<",
            "==",
            "!=",
            "instanceof",
            "class",
            "methodResultID",
            "this"
        ],
        "tokensGeneralValuesGlobalDictionary": [
            [
                "0",
                "int"
            ],
            [
                "1",
                "int"
            ],
            [
                "-1",
                "int"
            ],
            [
                "0.0",
                "double"
            ],
            [
                "1.0",
                "double"
            ],
            [
                "-1.0",
                "double"
            ],
            [
                "\"\"",
                "String"
            ],
            [
                "\" \"",
                "String"
            ]
        ],
        "tokensProjectClasses": [
            [
                "DefaultCamera",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "GradientFactory",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "GraphMetrics",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "Graphics2DOutput",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "ImageCache",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "StrokeFactory",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "FontCache",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "FontSlot",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "DefaultView",
                "org.graphstream.ui.swingViewer"
            ],
            [
                "SpriteRenderer",
                "org.graphstream.ui.swingViewer.basicRenderer"
            ],
            [
                "ElementRenderer",
                "org.graphstream.ui.swingViewer.basicRenderer"
            ],
            [
                "NodeRenderer",
                "org.graphstream.ui.swingViewer.basicRenderer"
            ],
            [
                "Arrow",
                "org.graphstream.ui.swingViewer.basicRenderer.shapes"
            ],
            [
                "Shape",
                "org.graphstream.ui.swingViewer.basicRenderer.shapes"
            ],
            [
                "EdgeRenderer",
                "org.graphstream.ui.swingViewer.basicRenderer"
            ],
            [
                "SwingBasicGraphRenderer",
                "org.graphstream.ui.swingViewer.basicRenderer"
            ],
            [
                "GraphRendererBase",
                "org.graphstream.ui.swingViewer"
            ],
            [
                "GraphRenderer",
                "org.graphstream.ui.swingViewer"
            ],
            [
                "LayerRenderer",
                "org.graphstream.ui.swingViewer"
            ],
            [
                "ViewPanel",
                "org.graphstream.ui.swingViewer"
            ],
            [
                "Layouts",
                "org.graphstream.ui.layout"
            ],
            [
                "Layout",
                "org.graphstream.ui.layout"
            ],
            [
                "LayoutRunner",
                "org.graphstream.ui.layout"
            ],
            [
                "NodeParticle",
                "org.graphstream.ui.layout.springbox"
            ],
            [
                "GraphCellData",
                "org.graphstream.ui.layout.springbox"
            ],
            [
                "EdgeSpring",
                "org.graphstream.ui.layout.springbox"
            ],
            [
                "Energies",
                "org.graphstream.ui.layout.springbox"
            ],
            [
                "BarnesHutLayout",
                "org.graphstream.ui.layout.springbox"
            ],
            [
                "LinLog",
                "org.graphstream.ui.layout.springbox.implementations"
            ],
            [
                "LinLogNodeParticle",
                "org.graphstream.ui.layout.springbox.implementations"
            ],
            [
                "SpringBoxNodeParticle",
                "org.graphstream.ui.layout.springbox.implementations"
            ],
            [
                "SpringBox",
                "org.graphstream.ui.layout.springbox.implementations"
            ],
            [
                "Point2",
                "org.graphstream.ui.geom"
            ],
            [
                "Vector2",
                "org.graphstream.ui.geom"
            ],
            [
                "Vector3",
                "org.graphstream.ui.geom"
            ],
            [
                "Point3",
                "org.graphstream.ui.geom"
            ],
            [
                "ViewerListener",
                "org.graphstream.ui.view"
            ],
            [
                "MouseManager",
                "org.graphstream.ui.view.util"
            ],
            [
                "ShortcutManager",
                "org.graphstream.ui.view.util"
            ],
            [
                "DefaultShortcutManager",
                "org.graphstream.ui.view.util"
            ],
            [
                "FpsCounter",
                "org.graphstream.ui.view.util"
            ],
            [
                "CubicCurve",
                "org.graphstream.ui.view.util"
            ],
            [
                "DefaultMouseManager",
                "org.graphstream.ui.view.util"
            ],
            [
                "Selection",
                "org.graphstream.ui.view"
            ],
            [
                "ViewerPipe",
                "org.graphstream.ui.view"
            ],
            [
                "Viewer",
                "org.graphstream.ui.view"
            ],
            [
                "View",
                "org.graphstream.ui.view"
            ],
            [
                "Camera",
                "org.graphstream.ui.view"
            ],
            [
                "Sprite",
                "org.graphstream.ui.spriteManager"
            ],
            [
                "InvalidSpriteIDException",
                "org.graphstream.ui.spriteManager"
            ],
            [
                "SpriteManager",
                "org.graphstream.ui.spriteManager"
            ],
            [
                "SpriteFactory",
                "org.graphstream.ui.spriteManager"
            ],
            [
                "StyleGroupListener",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "Colors",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "Values",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "StyleSheetListener",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "StyleSheetParserTokenManager",
                "org.graphstream.ui.graphicGraph.stylesheet.parser"
            ],
            [
                "StyleSheetParserConstants",
                "org.graphstream.ui.graphicGraph.stylesheet.parser"
            ],
            [
                "StyleSheetParser",
                "org.graphstream.ui.graphicGraph.stylesheet.parser"
            ],
            [
                "Style",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "StyleSheet",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "StyleConstants",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "Selector",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "Value",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "Rule",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "GraphicNode",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "StyleGroup",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphPosLengthUtils",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphicEdge",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphicElementChangeListener",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphicGraph",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "StyleGroupSet",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphicSprite",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphicElement",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "VerboseSink",
                "org.graphstream.util"
            ],
            [
                "GraphListeners",
                "org.graphstream.util"
            ],
            [
                "Environment",
                "org.graphstream.util"
            ],
            [
                "GraphDiff",
                "org.graphstream.util"
            ],
            [
                "Filters",
                "org.graphstream.util"
            ],
            [
                "FilteredEdgeIterator",
                "org.graphstream.util"
            ],
            [
                "Parser",
                "org.graphstream.util.parser"
            ],
            [
                "ParserFactory",
                "org.graphstream.util.parser"
            ],
            [
                "TokenMgrError",
                "org.graphstream.util.parser"
            ],
            [
                "ParseException",
                "org.graphstream.util.parser"
            ],
            [
                "SimpleCharStream",
                "org.graphstream.util.parser"
            ],
            [
                "Token",
                "org.graphstream.util.parser"
            ],
            [
                "ISODateIO",
                "org.graphstream.util.time"
            ],
            [
                "ISODateComponent",
                "org.graphstream.util.time"
            ],
            [
                "FilteredNodeIterator",
                "org.graphstream.util"
            ],
            [
                "FixedArrayList",
                "org.graphstream.util.set"
            ],
            [
                "StepCounter",
                "org.graphstream.util"
            ],
            [
                "GraphSpells",
                "org.graphstream.util.cumulative"
            ],
            [
                "CumulativeAttributes",
                "org.graphstream.util.cumulative"
            ],
            [
                "CumulativeSpells",
                "org.graphstream.util.cumulative"
            ],
            [
                "Filter",
                "org.graphstream.util"
            ],
            [
                "PipeAdapter",
                "org.graphstream.stream"
            ],
            [
                "GraphParseException",
                "org.graphstream.stream"
            ],
            [
                "ElementSink",
                "org.graphstream.stream"
            ],
            [
                "URLSource",
                "org.graphstream.stream.net"
            ],
            [
                "HTTPSource",
                "org.graphstream.stream.net"
            ],
            [
                "SourceAdapter",
                "org.graphstream.stream"
            ],
            [
                "AttributeSink",
                "org.graphstream.stream"
            ],
            [
                "GMLParserConstants",
                "org.graphstream.stream.file.gml"
            ],
            [
                "GMLParserTokenManager",
                "org.graphstream.stream.file.gml"
            ],
            [
                "GMLContext",
                "org.graphstream.stream.file.gml"
            ],
            [
                "Graphics",
                "org.graphstream.stream.file.gml"
            ],
            [
                "KeyValues",
                "org.graphstream.stream.file.gml"
            ],
            [
                "GMLParser",
                "org.graphstream.stream.file.gml"
            ],
            [
                "FileSinkGraphML",
                "org.graphstream.stream.file"
            ],
            [
                "TLPParserConstants",
                "org.graphstream.stream.file.tlp"
            ],
            [
                "TLPParser",
                "org.graphstream.stream.file.tlp"
            ],
            [
                "TLPParserTokenManager",
                "org.graphstream.stream.file.tlp"
            ],
            [
                "FileSinkFactory",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceEdge",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkBase",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkTikZ",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceGEXF",
                "org.graphstream.stream.file"
            ],
            [
                "DOTParser",
                "org.graphstream.stream.file.dot"
            ],
            [
                "DOTParserConstants",
                "org.graphstream.stream.file.dot"
            ],
            [
                "DOTParserTokenManager",
                "org.graphstream.stream.file.dot"
            ],
            [
                "FileSink",
                "org.graphstream.stream.file"
            ],
            [
                "PajekContext",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "Graphics",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "NodeGraphics",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "EdgeGraphics",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "EdgeMatrix",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "PajekParserTokenManager",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "PajekParserConstants",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "FileSourceXML",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkBaseFiltered",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkDOT",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceParser",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkDGSFiltered",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceDOT",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceDGS1And2",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceGraphML",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceFactory",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkImages",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkDynamicGML",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkSVG",
                "org.graphstream.stream.file"
            ],
            [
                "GEXFSpell",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "SmartXMLWriter",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFElement",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFEdges",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFAttValues",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFEdge",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFSpells",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFAttValue",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFNodes",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFNode",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFMeta",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFAttributes",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXF",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFGraph",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFAttribute",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "OldFileSourceDGS",
                "org.graphstream.stream.file.dgs"
            ],
            [
                "DGSParser",
                "org.graphstream.stream.file.dgs"
            ],
            [
                "FileSourceBase",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkGML",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceDGS",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkDGSUtility",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceTLP",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkSVG2",
                "org.graphstream.stream.file"
            ],
            [
                "FileSource",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceNCol",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourcePajek",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceGPX",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceLGL",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkGEXF2",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceGML",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkGEXF",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkDGS",
                "org.graphstream.stream.file"
            ],
            [
                "ProxyPipe",
                "org.graphstream.stream"
            ],
            [
                "Sink",
                "org.graphstream.stream"
            ],
            [
                "Timeline",
                "org.graphstream.stream"
            ],
            [
                "Pipe",
                "org.graphstream.stream"
            ],
            [
                "SinkAdapter",
                "org.graphstream.stream"
            ],
            [
                "Replayable",
                "org.graphstream.stream"
            ],
            [
                "Source",
                "org.graphstream.stream"
            ],
            [
                "AnnotatedSink",
                "org.graphstream.stream"
            ],
            [
                "GraphReplay",
                "org.graphstream.stream"
            ],
            [
                "AttributePipe",
                "org.graphstream.stream"
            ],
            [
                "SinkTime",
                "org.graphstream.stream.sync"
            ],
            [
                "SourceTime",
                "org.graphstream.stream.sync"
            ],
            [
                "PipeBase",
                "org.graphstream.stream"
            ],
            [
                "ThreadProxyPipe",
                "org.graphstream.stream.thread"
            ],
            [
                "ThreadProxyPipeOld",
                "org.graphstream.stream.thread"
            ],
            [
                "RMISource",
                "org.graphstream.stream.rmi"
            ],
            [
                "RMIAdapterOut",
                "org.graphstream.stream.rmi"
            ],
            [
                "RMISink",
                "org.graphstream.stream.rmi"
            ],
            [
                "RMIAdapterIn",
                "org.graphstream.stream.rmi"
            ],
            [
                "SourceBase",
                "org.graphstream.stream"
            ],
            [
                "NetStreamDecoder",
                "org.graphstream.stream.netstream"
            ],
            [
                "NetStreamReceiver",
                "org.graphstream.stream.netstream"
            ],
            [
                "NetStreamConstants",
                "org.graphstream.stream.netstream"
            ],
            [
                "NetStreamSender",
                "org.graphstream.stream.netstream"
            ],
            [
                "DefaultNetStreamDecoder",
                "org.graphstream.stream.netstream"
            ],
            [
                "Base64",
                "org.graphstream.stream.netstream.packing"
            ],
            [
                "NetStreamUnpacker",
                "org.graphstream.stream.netstream.packing"
            ],
            [
                "Base64Packer",
                "org.graphstream.stream.netstream.packing"
            ],
            [
                "Base64Unpacker",
                "org.graphstream.stream.netstream.packing"
            ],
            [
                "NetStreamPacker",
                "org.graphstream.stream.netstream.packing"
            ],
            [
                "AttributePredicate",
                "org.graphstream.stream"
            ],
            [
                "Element",
                "org.graphstream.graph"
            ],
            [
                "Node",
                "org.graphstream.graph"
            ],
            [
                "BreadthFirstIterator",
                "org.graphstream.graph"
            ],
            [
                "Graph",
                "org.graphstream.graph"
            ],
            [
                "EdgeRejectedException",
                "org.graphstream.graph"
            ],
            [
                "CompoundAttribute",
                "org.graphstream.graph"
            ],
            [
                "Structure",
                "org.graphstream.graph"
            ],
            [
                "DepthFirstIterator",
                "org.graphstream.graph"
            ],
            [
                "NullAttributeException",
                "org.graphstream.graph"
            ],
            [
                "IdAlreadyInUseException",
                "org.graphstream.graph"
            ],
            [
                "EdgeFactory",
                "org.graphstream.graph"
            ],
            [
                "ElementNotFoundException",
                "org.graphstream.graph"
            ],
            [
                "OneAttributeElement",
                "org.graphstream.graph.implementations"
            ],
            [
                "AdjacencyListNode",
                "org.graphstream.graph.implementations"
            ],
            [
                "SingleNode",
                "org.graphstream.graph.implementations"
            ],
            [
                "AbstractElement",
                "org.graphstream.graph.implementations"
            ],
            [
                "AdjacencyListGraph",
                "org.graphstream.graph.implementations"
            ],
            [
                "AbstractNode",
                "org.graphstream.graph.implementations"
            ],
            [
                "DefaultGraph",
                "org.graphstream.graph.implementations"
            ],
            [
                "MultiGraph",
                "org.graphstream.graph.implementations"
            ],
            [
                "Graphs",
                "org.graphstream.graph.implementations"
            ],
            [
                "SingleGraph",
                "org.graphstream.graph.implementations"
            ],
            [
                "MultiNode",
                "org.graphstream.graph.implementations"
            ],
            [
                "AbstractGraph",
                "org.graphstream.graph.implementations"
            ],
            [
                "AbstractEdge",
                "org.graphstream.graph.implementations"
            ],
            [
                "GraphFactory",
                "org.graphstream.graph"
            ],
            [
                "NodeFactory",
                "org.graphstream.graph"
            ],
            [
                "Edge",
                "org.graphstream.graph"
            ],
            [
                "Path",
                "org.graphstream.graph"
            ]
        ],
        "tokensProjectClassesNonPrivateStaticNonVoidMethods": [
            [
                "gradientInArea",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "/**\n * Generate a gradient in the given pixel area following the given style.\n * This produces a gradient only if the style fill-mode is compatible.\n *\n * @param x0\n *            The left corner of the area.\n * @param y0\n *            The bottom corner of the area.\n * @param width\n *            The area width.\n * @param height\n *            The area height.\n * @param style\n *            The style.\n * @return A gradient paint or null if the style does not specify a\n *         gradient.\n */\npublic static Paint gradientInArea(int x0, int y0, int width, int height, Style style) {\n    switch(style.getFillMode()) {\n        case GRADIENT_VERTICAL:\n            return linearGradientFromStyle(x0, y0, x0, y0 + height, style);\n        case GRADIENT_HORIZONTAL:\n            return linearGradientFromStyle(x0, y0, x0 + width, y0, style);\n        case GRADIENT_DIAGONAL1:\n            return linearGradientFromStyle(x0, y0, x0 + width, y0 + height, style);\n        case GRADIENT_DIAGONAL2:\n            return linearGradientFromStyle(x0 + width, y0, x0, y0 + height, style);\n        case GRADIENT_RADIAL:\n            return radialGradientFromStyle(x0 + (width / 2), y0 + (height / 2), width > height ? width / 2 : height / 2, style);\n        default:\n            return null;\n    }\n}"
            ],
            [
                "linearGradientFromStyle",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "/**\n * Generate a linear gradient between two given points corresponding to the\n * given style.\n *\n * @param x0\n *            The start point abscissa.\n * @param y0\n *            The start point ordinate.\n * @param x1\n *            The end point abscissa.\n * @param y1\n *            The end point ordinate.\n * @param style\n *            The style.\n * @return A paint for the gradient or null if the style specifies no\n *         gradient (the fill mode is not a linear gradient or there is only\n *         one fill colour).\n */\npublic static Paint linearGradientFromStyle(float x0, float y0, float x1, float y1, Style style) {\n    Paint paint = null;\n    if (style.getFillColorCount() > 1) {\n        switch(style.getFillMode()) {\n            case GRADIENT_DIAGONAL1:\n            case GRADIENT_DIAGONAL2:\n            case GRADIENT_HORIZONTAL:\n            case GRADIENT_VERTICAL:\n                if (version16)\n                    paint = new LinearGradientPaint(x0, y0, x1, y1, createFractions(style), createColors(style));\n                else\n                    paint = new GradientPaint(x0, y0, style.getFillColor(0), x1, y1, style.getFillColor(1));\n                break;\n            default:\n                break;\n        }\n    }\n    return paint;\n}"
            ],
            [
                "radialGradientFromStyle",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static Paint radialGradientFromStyle(float cx, float cy, float radius, Style style) {\n    return radialGradientFromStyle(cx, cy, radius, cx, cy, style);\n}"
            ],
            [
                "radialGradientFromStyle",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "/**\n * Generate a radial gradient between whose center is at (cx,cy) with the\n * given radius. The focus (fx,fy) is the start position of the gradient in\n * the circle.\n *\n * @param cx\n *            The center point abscissa.\n * @param cy\n *            The center point ordinate.\n * @param fx\n *            The start point abscissa.\n * @param fy\n *            The start point ordinate.\n * @param radius\n *            The gradient radius.\n * @param style\n *            The style.\n * @return A paint for the gradient or null if the style specifies no\n *         gradient (the fill mode is not a radial gradient or there is only\n *         one fill colour).\n */\npublic static Paint radialGradientFromStyle(float cx, float cy, float radius, float fx, float fy, Style style) {\n    Paint paint = null;\n    if (version16) {\n        if (style.getFillColorCount() > 1 && style.getFillMode() == FillMode.GRADIENT_RADIAL) {\n            float[] fractions = createFractions(style);\n            Color[] colors = createColors(style);\n            paint = new RadialGradientPaint(cx, cy, radius, fx, fy, fractions, colors, MultipleGradientPaint.CycleMethod.REFLECT);\n        }\n    }\n    return paint;\n}"
            ],
            [
                "createFractions",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "protected static float[] createFractions(Style style) {\n    int n = style.getFillColorCount();\n    if (n < predefFractions.length)\n        return predefFractions[n];\n    float[] fractions = new float[n];\n    float div = 1f / (n - 1);\n    for (int i = 1; i < (n - 1); i++) fractions[i] = div * i;\n    fractions[0] = 0f;\n    fractions[n - 1] = 1f;\n    return fractions;\n}"
            ],
            [
                "createColors",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "protected static Color[] createColors(Style style) {\n    int n = style.getFillColorCount();\n    Color[] colors = new Color[n];\n    for (int i = 0; i < n; i++) colors[i] = style.getFillColor(i);\n    return colors;\n}"
            ],
            [
                "defaultImageCache",
                "org.graphstream.ui.swingViewer.util",
                "ImageCache",
                "/**\n * Default singleton image cache instance that can be shared. This method\n * and singleton must be used only in the Swing thread.\n *\n * @return The default singleton image cache instance.\n */\npublic static ImageCache defaultImageCache() {\n    if (defaultImageCache == null)\n        defaultImageCache = new ImageCache();\n    return defaultImageCache;\n}"
            ],
            [
                "generateStroke",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "/**\n * Generate a stroke of the appropriate width and style according to the\n * given style and metrics.\n *\n * @param style\n *            The style to use.\n * @param metrics\n *            The metrics to use.\n * @return The stroke or null if the style specifies a \"none\" stroke mode.\n */\npublic static Stroke generateStroke(Style style, GraphMetrics metrics) {\n    if (style.getStrokeWidth().value == 0)\n        return null;\n    switch(style.getStrokeMode()) {\n        case PLAIN:\n            return generatePlainStroke(style, metrics);\n        case DOTS:\n            return generateDotsStroke(style, metrics);\n        case DASHES:\n            return generateDashesStroke(style, metrics);\n        default:\n        case NONE:\n            return null;\n    }\n}"
            ],
            [
                "generatePlainStroke",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "protected static Stroke generatePlainStroke(Style style, GraphMetrics metrics) {\n    float width = (float) metrics.lengthToGu(style.getStrokeWidth());\n    /*\n\t\t * if( width == 1f ) return plainLine1px; // XXX Not a good optimisation\n\t\t * else if( width == 2f ) return plainLine2px; // We draw the whole\n\t\t * graph in GU else if( width == 3f ) return plainLine3px; // In graph\n\t\t * units the width is never exactly 1,2, 5 ... else if( width == 5f )\n\t\t * return plainLine5px; else if( width == 10f ) return plainLine10px;\n\t\t * else\n\t\t */\n    {\n        return new BasicStroke(width);\n    }\n}"
            ],
            [
                "generateDotsStroke",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "protected static Stroke generateDotsStroke(Style style, GraphMetrics metrics) {\n    float width = (float) metrics.lengthToGu(style.getStrokeWidth());\n    /*\n\t\t * if( width == 1f ) return dotsLine1px; else if( width == 2f ) return\n\t\t * dotsLine2px; else if( width == 3f ) return dotsLine3px; else if(\n\t\t * width == 5f ) return dotsLine5px; else if( width == 10f ) return\n\t\t * dotsLine10px; else\n\t\t */\n    {\n        dots[0] = (float) metrics.lengthToGu(1f, Units.PX);\n        dots[1] = dots[0];\n        return new BasicStroke(width, BasicStroke.CAP_BUTT, BasicStroke.JOIN_MITER, 1f, dots, 0);\n    }\n}"
            ],
            [
                "generateDashesStroke",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "protected static Stroke generateDashesStroke(Style style, GraphMetrics metrics) {\n    float width = (float) metrics.lengthToGu(style.getStrokeWidth());\n    /*\n\t\t * if( width == 1f ) return dashesLine1px; else if( width == 2f ) return\n\t\t * dashesLine2px; else if( width == 3f ) return dashesLine3px; else if(\n\t\t * width == 5f ) return dashesLine5px; else if( width == 10f ) return\n\t\t * dashesLine10px; else\n\t\t */\n    {\n        dashes[0] = (float) metrics.lengthToGu(3f, Units.PX);\n        dashes[1] = dashes[0];\n        return new BasicStroke(width, BasicStroke.CAP_BUTT, BasicStroke.JOIN_MITER, 1f, dashes, 0);\n    }\n}"
            ],
            [
                "defaultFontCache",
                "org.graphstream.ui.swingViewer.util",
                "FontCache",
                "/**\n * Default singleton instance for shared font cache. This method and cache\n * can only be used in the Swing thread.\n *\n * @return The default singleton font cache instance.\n */\npublic static FontCache defaultFontCache() {\n    if (defaultFontCache == null)\n        defaultFontCache = new FontCache();\n    return defaultFontCache;\n}"
            ],
            [
                "newLayoutAlgorithm",
                "org.graphstream.ui.layout",
                "Layouts",
                "/**\n * Creates a layout according to the \"org.graphstream.ui.layout\" system property.\n *\n * @return The new layout or the default GraphStream \"Spring-Box\" layout if\n *         the \"gs.ui.layout\" system property is either not set or contains\n *         a class that cannot be found.\n */\npublic static Layout newLayoutAlgorithm() {\n    String layoutClassName;\n    try {\n        layoutClassName = System.getProperty(\"gs.ui.layout\");\n        if (layoutClassName != null) {\n            logger.log(Level.WARNING, \"\\\"gs.ui.layout\\\" is deprecated, use \\\"org.graphstream.ui.layout\\\" instead.\");\n        } else {\n            layoutClassName = System.getProperty(\"org.graphstream.ui.layout\");\n        }\n    } catch (AccessControlException e) {\n        layoutClassName = null;\n    }\n    if (layoutClassName != null) {\n        try {\n            Class<?> c = Class.forName(layoutClassName);\n            Object object = c.newInstance();\n            if (object instanceof Layout) {\n                return (Layout) object;\n            } else {\n                logger.warning(String.format(\"class '%s' is not a 'GraphRenderer'%n\", object));\n            }\n        } catch (Exception e) {\n            logger.log(Level.WARNING, \"Cannot create layout.\", e);\n        }\n    }\n    return new org.graphstream.ui.layout.springbox.implementations.SpringBox(false);\n}"
            ],
            [
                "eval",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * Evaluate a cubic B\u00e9zier curve according to control points `x0`, `x1`,\n * `x2` and `x3` and return the position at parametric position `t` of the\n * curve.\n *\n * @return The coordinate at parametric position `t` on the curve.\n */\npublic static double eval(double x0, double x1, double x2, double x3, double t) {\n    double tt = (1f - t);\n    return x0 * (tt * tt * tt) + 3f * x1 * t * (tt * tt) + 3f * x2 * (t * t) * tt + x3 * (t * t * t);\n}"
            ],
            [
                "eval",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * Evaluate a cubic B\u00e9zier curve according to control points `p0`, `p1`,\n * `p2` and `p3` and return the position at parametric position `t` of the\n * curve.\n *\n * @return The point at parametric position `t` on the curve.\n */\npublic static Point2 eval(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t) {\n    return new Point2(eval(p0.x, p1.x, p2.x, p3.x, t), eval(p0.y, p1.y, p2.y, p3.y, t));\n}"
            ],
            [
                "eval",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * Evaluate a cubic B\u00e9zier curve according to control points `p0`, `p1`,\n * `p2` and `p3` and return the position at parametric position `t` of the\n * curve.\n *\n * @return The point at parametric position `t` on the curve.\n */\npublic static Point2D.Double eval(Point2D.Double p0, Point2D.Double p1, Point2D.Double p2, Point2D.Double p3, double t) {\n    return new Point2D.Double(eval(p0.x, p1.x, p2.x, p3.x, t), eval(p0.y, p1.y, p2.y, p3.y, t));\n}"
            ],
            [
                "eval",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * Evaluate a cubic B\u00e9zier curve according to control points `p0`, `p1`,\n * `p2` and `p3` and store the position at parametric position `t` of the\n * curve in `result`.\n *\n * @return the given reference to `result`.\n */\npublic static Point2 eval(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t, Point2 result) {\n    result.set(eval(p0.x, p1.x, p2.x, p3.x, t), eval(p0.y, p1.y, p2.y, p3.y, t));\n    return result;\n}"
            ],
            [
                "derivative",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * Derivative of a cubic B\u00e9zier curve according to control points `x0`,\n * `x1`, `x2` and `x3` at parametric position `t` of the curve.\n *\n * @return The derivative at parametric position `t` on the curve.\n */\npublic static double derivative(double x0, double x1, double x2, double x3, double t) {\n    return 3 * (x3 - 3 * x2 + 3 * x1 - x0) * t * t + 2 * (3 * x2 - 6 * x1 + 3 * x0) * t + (3 * x1 - 3 * x0);\n}"
            ],
            [
                "derivative",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * Derivative point of a cubic B\u00e9zier curve according to control points\n * `x0`, `x1`, `x2` and `x3` at parametric position `t` of the curve.\n *\n * @return The derivative point at parametric position `t` on the curve.\n */\npublic static Point2 derivative(Point2 p0, Point2 p1, Point2 p2, Point3 p3, double t) {\n    return new Point2(derivative(p0.x, p1.x, p2.x, p3.x, t), derivative(p0.y, p1.y, p2.y, p3.y, t));\n}"
            ],
            [
                "derivative",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * Store in `result` the derivative point of a cubic B\u00e9zier curve according\n * to control points `x0`, `x1`, `x2` and `x3` at parametric position `t` of\n * the curve.\n *\n * @return the given reference to `result`.\n */\npublic static Point2 derivative(Point2 p0, Point2 p1, Point2 p2, Point3 p3, double t, Point2 result) {\n    result.set(derivative(p0.x, p1.x, p2.x, p3.x, t), derivative(p0.y, p1.y, p2.y, p3.y, t));\n    return result;\n}"
            ],
            [
                "perpendicular",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * The perpendicular vector to the curve defined by control points `p0`,\n * `p1`, `p2` and `p3` at parametric position `t`.\n *\n * @return A vector perpendicular to the curve at position `t`.\n */\npublic static Vector2 perpendicular(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t) {\n    return new Vector2(derivative(p0.y, p1.y, p2.y, p3.y, t), -derivative(p0.x, p1.x, p2.x, p3.x, t));\n}"
            ],
            [
                "perpendicular",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * Store in `result` the perpendicular vector to the curve defined by\n * control points `p0`, `p1`, `p2` and `p3` at parametric position `t`.\n *\n * @return the given reference to `result`.\n */\npublic static Vector2 perpendicular(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t, Vector2 result) {\n    result.set(derivative(p0.y, p1.y, p2.y, p3.y, t), -derivative(p0.x, p1.x, p2.x, p3.x, t));\n    return result;\n}"
            ],
            [
                "perpendicular",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * The perpendicular vector to the curve defined by control points `p0`,\n * `p1`, `p2` and `p3` at parametric position `t`.\n *\n * @return A vector perpendicular to the curve at position `t`.\n */\npublic static Point2D.Double perpendicular(Point2D.Double p0, Point2D.Double p1, Point2D.Double p2, Point2D.Double p3, double t) {\n    return new Point2D.Double(derivative(p0.y, p1.y, p2.y, p3.y, t), -derivative(p0.x, p1.x, p2.x, p3.x, t));\n}"
            ],
            [
                "newGraphRenderer",
                "org.graphstream.ui.view",
                "Viewer",
                "// Access\n/**\n * Create a new instance of the default graph renderer. The default graph\n * renderer class is given by the \"org.graphstream.ui.renderer\" system\n * property. If the class indicated by this property is not usable (not in\n * the class path, not of the correct type, etc.) or if the property is not\n * present a SwingBasicGraphRenderer is returned.\n */\npublic static GraphRenderer newGraphRenderer() {\n    String rendererClassName;\n    try {\n        rendererClassName = System.getProperty(\"gs.ui.renderer\");\n        if (rendererClassName != null) {\n            logger.warning(\"\\\"gs.ui.renderer\\\" is deprecated, use \\\"org.graphstream.ui.renderer\\\" instead.\");\n        } else {\n            rendererClassName = System.getProperty(\"org.graphstream.ui.renderer\");\n        }\n    } catch (AccessControlException e) {\n        rendererClassName = null;\n    }\n    if (rendererClassName == null)\n        return new SwingBasicGraphRenderer();\n    try {\n        Class<?> c = Class.forName(rendererClassName);\n        Object object = c.newInstance();\n        if (object instanceof GraphRenderer) {\n            return (GraphRenderer) object;\n        } else {\n            logger.warning(String.format(\"Class '%s' is not a 'GraphRenderer'.\", object));\n        }\n    } catch (Exception e) {\n        logger.log(Level.WARNING, \"Cannot create graph renderer.\", e);\n    }\n    return new SwingBasicGraphRenderer();\n}"
            ],
            [
                "getPositionValue",
                "org.graphstream.ui.spriteManager",
                "SpriteManager",
                "// Utility\nprotected static Values getPositionValue(Object value) {\n    if (value instanceof Object[]) {\n        Object[] values = (Object[]) value;\n        if (values.length == 4) {\n            if (values[0] instanceof Number && values[1] instanceof Number && values[2] instanceof Number && values[3] instanceof Style.Units) {\n                return new Values((Style.Units) values[3], ((Number) values[0]).floatValue(), ((Number) values[1]).floatValue(), ((Number) values[2]).floatValue());\n            } else {\n                logger.warning(\"Cannot parse values[4] for sprite position.\");\n            }\n        } else if (values.length == 3) {\n            if (values[0] instanceof Number && values[1] instanceof Number && values[2] instanceof Number) {\n                return new Values(Units.GU, ((Number) values[0]).floatValue(), ((Number) values[1]).floatValue(), ((Number) values[2]).floatValue());\n            } else {\n                logger.warning(\"Cannot parse values[3] for sprite position.\");\n            }\n        } else if (values.length == 1) {\n            if (values[0] instanceof Number) {\n                return new Values(Units.GU, ((Number) values[0]).floatValue());\n            } else {\n                logger.warning(String.format(\"Sprite position percent is not a number.\"));\n            }\n        } else {\n            logger.warning(String.format(\"Cannot transform value '%s' (length=%d) into a position.\", Arrays.toString(values), values.length));\n        }\n    } else if (value instanceof Number) {\n        return new Values(Units.GU, ((Number) value).floatValue());\n    } else if (value instanceof Value) {\n        return new Values((Value) value);\n    } else if (value instanceof Values) {\n        return new Values((Values) value);\n    } else {\n        System.err.printf(\"GraphicGraph : cannot place sprite with posiiton '%s' (instance of %s)%n\", value, value.getClass().getName());\n    }\n    return null;\n}"
            ],
            [
                "convertColor",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Try to convert the given string value to a colour. It understands the 600\n * colour names of the X11 RGB data base. It also understands colours given\n * in the \"#FFFFFF\" format and the hexadecimal \"0xFFFFFF\" format. Finally,\n * it understands colours given as a \"rgb(1,10,100)\", CSS-like format. If\n * the input value is null, the result is null.\n *\n * @param anyValue\n *            The value to convert.\n * @return the converted colour or null if the conversion failed.\n */\npublic static Color convertColor(Object anyValue) {\n    if (anyValue == null)\n        return null;\n    if (anyValue instanceof Color)\n        return (Color) anyValue;\n    if (anyValue instanceof String) {\n        Color c = null;\n        String value = (String) anyValue;\n        if (value.startsWith(\"#\")) {\n            Matcher m = sharpColor1.matcher(value);\n            if (m.matches()) {\n                if (value.length() == 7) {\n                    try {\n                        c = Color.decode(value);\n                        return c;\n                    } catch (NumberFormatException e) {\n                        c = null;\n                    }\n                } else if (value.length() == 9) {\n                    int r = Integer.parseInt(m.group(1), 16);\n                    int g = Integer.parseInt(m.group(2), 16);\n                    int b = Integer.parseInt(m.group(3), 16);\n                    int a = Integer.parseInt(m.group(4), 16);\n                    return new Color(r, g, b, a);\n                }\n            }\n            m = sharpColor2.matcher(value);\n            if (m.matches()) {\n                if (value.length() >= 4) {\n                    int r = Integer.parseInt(m.group(1), 16) * 16;\n                    int g = Integer.parseInt(m.group(2), 16) * 16;\n                    int b = Integer.parseInt(m.group(3), 16) * 16;\n                    int a = 255;\n                    if (value.length() == 5)\n                        a = Integer.parseInt(m.group(4), 16) * 16;\n                    return new Color(r, g, b, a);\n                }\n            }\n        } else if (value.startsWith(\"rgb\")) {\n            Matcher m = cssColorA.matcher(value);\n            if (m.matches()) {\n                int r = Integer.parseInt(m.group(1));\n                int g = Integer.parseInt(m.group(2));\n                int b = Integer.parseInt(m.group(3));\n                int a = Integer.parseInt(m.group(4));\n                return new Color(r, g, b, a);\n            }\n            m = cssColor.matcher(value);\n            if (m.matches()) {\n                int r = Integer.parseInt(m.group(1));\n                int g = Integer.parseInt(m.group(2));\n                int b = Integer.parseInt(m.group(3));\n                return new Color(r, g, b);\n            }\n        } else if (value.startsWith(\"0x\") || value.startsWith(\"0X\")) {\n            Matcher m = hexaColor.matcher(value);\n            if (m.matches()) {\n                if (value.length() == 8) {\n                    try {\n                        return Color.decode(value);\n                    } catch (NumberFormatException e) {\n                        c = null;\n                    }\n                } else if (value.length() == 10) {\n                    String r = m.group(1);\n                    String g = m.group(2);\n                    String b = m.group(3);\n                    String a = m.group(4);\n                    return new Color(Integer.parseInt(r, 16), Integer.parseInt(g, 16), Integer.parseInt(b, 16), Integer.parseInt(a, 16));\n                }\n            }\n        } else if (value.startsWith(\"java.awt.Color[\")) {\n            Matcher m = awtColor.matcher(value);\n            if (m.matches()) {\n                int r = Integer.parseInt(m.group(1));\n                int g = Integer.parseInt(m.group(2));\n                int b = Integer.parseInt(m.group(3));\n                return new Color(r, g, b);\n            }\n        }\n        return colorMap.get(value.toLowerCase());\n    }\n    // TODO throw an exception instead ??\n    return null;\n}"
            ],
            [
                "convertLabel",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Check if the given value is an instance of CharSequence (String is) and\n * return it as a string. Else return null. If the input value is null, the\n * return value is null. If the value returned is larger than 128\n * characters, this method cuts it to 128 characters. TODO: allow to set the\n * max length of these strings.\n *\n * @param value\n *            The value to convert.\n * @return The corresponding string, or null.\n */\npublic static String convertLabel(Object value) {\n    String label = null;\n    if (value != null) {\n        if (value instanceof CharSequence)\n            label = ((CharSequence) value).toString();\n        else\n            label = value.toString();\n        if (label.length() > 128)\n            label = String.format(\"%s...\", label.substring(0, 128));\n    }\n    return label;\n}"
            ],
            [
                "convertWidth",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Try to convert an arbitrary value to a float. If it is a descendant of\n * Number, the float value is returned. If it is a string, a conversion is\n * tried to change it into a number and if successful, this number is\n * returned as a float. Else, the -1 value is returned as no width can be\n * negative to indicate the conversion failed. If the input is null, the\n * return value is -1.\n *\n * @param value\n *            The input to convert.\n * @return The value or -1 if the conversion failed. TODO should be named\n *         convertNumber\n */\npublic static float convertWidth(Object value) {\n    if (value instanceof CharSequence) {\n        try {\n            float val = Float.parseFloat(((CharSequence) value).toString());\n            return val;\n        } catch (NumberFormatException e) {\n            return -1;\n        }\n    } else if (value instanceof Number) {\n        return ((Number) value).floatValue();\n    }\n    return -1;\n}"
            ],
            [
                "convertValue",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Convert an object to a value with units. The object can be a number, in\n * which case the value returned contains this number in pixel units. The\n * object can be a string. In this case the strings understood by this\n * method are of the form (spaces, number, spaces, unit, spaces). For\n * example \"3px\", \"45gu\", \"5.5%\", \" 25.3  gu \", \"4\", \"   28.1  \".\n *\n * @param value\n *            A Number or a CharSequence.\n * @return A value.\n */\npublic static Value convertValue(Object value) {\n    if (value instanceof CharSequence) {\n        CharSequence string = (CharSequence) value;\n        //\t\t\tif (string == null)\n        //\t\t\t\tthrow new RuntimeException(\"null size string ...\");\n        if (string.length() < 0)\n            throw new RuntimeException(\"empty size string ...\");\n        Matcher m = numberUnit.matcher(string);\n        if (m.matches())\n            return new Value(convertUnit(m.group(2)), Float.parseFloat(m.group(1)));\n        m = number.matcher(string);\n        if (m.matches())\n            return new Value(Units.PX, Float.parseFloat(m.group(1)));\n        throw new RuntimeException(String.format(\"string is not convertible to a value (%s)\", string));\n    } else if (value instanceof Number) {\n        return new Value(Units.PX, ((Number) value).floatValue());\n    }\n    if (value == null)\n        throw new RuntimeException(\"cannot convert null value\");\n    throw new RuntimeException(String.format(\"value is of class %s%n\", value.getClass().getName()));\n}"
            ],
            [
                "convertUnit",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Convert \"gu\", \"px\" and \"%\" to Units.GU, Units.PX, Units.PERCENTS.\n */\nprotected static Units convertUnit(String unit) {\n    if (unit.equals(\"gu\"))\n        return Units.GU;\n    else if (unit.equals(\"px\"))\n        return Units.PX;\n    else if (unit.equals(\"%\"))\n        return Units.PERCENTS;\n    return Units.PX;\n}"
            ],
            [
                "nodePosition",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "/**\n * Retrieve a node position from its attributes (\"x\", \"y\", \"z\", or \"xy\", or\n * \"xyz\").\n *\n * @param id\n *            The node identifier.\n * @return A newly allocated array of three floats containing the (x,y,z)\n *         position of the node, or null if the node is not part of the\n *         graph.\n */\npublic static double[] nodePosition(Graph graph, String id) {\n    Node node = graph.getNode(id);\n    if (node != null)\n        return nodePosition(node);\n    return null;\n}"
            ],
            [
                "nodePointPosition",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "/**\n * Retrieve a node position from its attributes (\"x\", \"y\", \"z\", or \"xy\", or\n * \"xyz\").\n *\n * @param id\n *            The node identifier.\n * @return A newly allocated point containing the (x,y,z)\n *         position of the node, or null if the node is not part of the\n *         graph.\n */\npublic static Point3 nodePointPosition(Graph graph, String id) {\n    Node node = graph.getNode(id);\n    if (node != null)\n        return nodePointPosition(node);\n    return null;\n}"
            ],
            [
                "nodePosition",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "/**\n * Like {@link #nodePosition(Graph,String)} but use an existing node as\n * argument.\n *\n * @param node\n *            The node to consider.\n * @return A newly allocated array of three floats containing the (x,y,z)\n *         position of the node.\n */\npublic static double[] nodePosition(Node node) {\n    double[] xyz = new double[3];\n    nodePosition(node, xyz);\n    return xyz;\n}"
            ],
            [
                "nodePointPosition",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "/**\n * Like {@link #nodePointPosition(Graph,String)} but use an existing node as\n * argument.\n *\n * @param node\n *            The node to consider.\n * @return A newly allocated point containing the (x,y,z)\n *         position of the node.\n */\npublic static Point3 nodePointPosition(Node node) {\n    Point3 pos = new Point3();\n    nodePosition(node, pos);\n    return pos;\n}"
            ],
            [
                "edgeLength",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "/**\n * Compute the edge length of the given edge according to its two nodes\n * positions.\n *\n * @param id\n *            The identifier of the edge.\n * @return The edge length or -1 if the nodes of the edge have no positions.\n * @throws RuntimeException\n *             If the edge cannot be found.\n */\npublic static double edgeLength(Graph graph, String id) {\n    Edge edge = graph.getEdge(id);\n    if (edge != null)\n        return edgeLength(edge);\n    throw new RuntimeException(\"edge '\" + id + \"' cannot be found\");\n}"
            ],
            [
                "edgeLength",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "/**\n * Like {@link #edgeLength(Graph,String)} but use an existing edge as\n * argument.\n *\n * @param edge\n * @return The edge length or -1 if the nodes of the edge have no positions.\n */\npublic static double edgeLength(Edge edge) {\n    double[] xyz0 = nodePosition(edge.getNode0());\n    double[] xyz1 = nodePosition(edge.getNode1());\n    if (xyz0 == null || xyz1 == null)\n        return -1;\n    xyz0[0] = xyz1[0] - xyz0[0];\n    xyz0[1] = xyz1[1] - xyz0[1];\n    xyz0[2] = xyz1[2] - xyz0[2];\n    return Math.sqrt(xyz0[0] * xyz0[0] + xyz0[1] * xyz0[1] + xyz0[2] * xyz0[2]);\n}"
            ],
            [
                "getGlobalEnvironment",
                "org.graphstream.util",
                "Environment",
                "// --------- Static methods -----------\n/**\n * Access to the global shared environment for the whole JVM. This method\n * allows to access a shared environment, that can be read and written from\n * anywhere.\n * @return A singleton instance of the global environment.\n */\npublic static Environment getGlobalEnvironment() {\n    if (GLOBAL_ENV == null)\n        GLOBAL_ENV = new Environment();\n    return GLOBAL_ENV;\n}"
            ],
            [
                "falseFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> falseFilter() {\n    return new Filter<T>() {\n\n        public boolean isAvailable(T e) {\n            return false;\n        }\n    };\n}"
            ],
            [
                "trueFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> trueFilter() {\n    return new Filter<T>() {\n\n        public boolean isAvailable(T e) {\n            return true;\n        }\n    };\n}"
            ],
            [
                "byAttributeFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> byAttributeFilter(String key, Object expectedValue) {\n    return new ByAttributeFilter<T>(key, expectedValue);\n}"
            ],
            [
                "separateNodeAndEdgeFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element, U extends Element> Filter<Element> separateNodeAndEdgeFilter(Filter<T> nodeFilter, Filter<U> edgeFilter) {\n    return new SeparateNodeEdgeFilter<T, U>(nodeFilter, edgeFilter);\n}"
            ],
            [
                "byExtremitiesFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element, U extends Element> Filter<T> byExtremitiesFilter(Filter<U> f) {\n    return new ExtremitiesFilter<T, U>(f);\n}"
            ],
            [
                "byIdFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> byIdFilter(String idPattern) {\n    return new ByIdFilter<T>(idPattern);\n}"
            ],
            [
                "isContained",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> isContained(final Collection<? extends T> set) {\n    return new Filter<T>() {\n\n        public boolean isAvailable(T e) {\n            return set.contains(e);\n        }\n    };\n}"
            ],
            [
                "isIdContained",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> isIdContained(final Collection<String> set) {\n    return new Filter<T>() {\n\n        public boolean isAvailable(T e) {\n            return set.contains(e.getId());\n        }\n    };\n}"
            ],
            [
                "and",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> and(Filter<T> f1, Filter<T> f2) {\n    return new AndFilter<T>(f1, f2);\n}"
            ],
            [
                "or",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> or(Filter<T> f1, Filter<T> f2) {\n    return new OrFilter<T>(f1, f2);\n}"
            ],
            [
                "xor",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> xor(Filter<T> f1, Filter<T> f2) {\n    return new XorFilter<T>(f1, f2);\n}"
            ],
            [
                "not",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> not(Filter<T> f) {\n    return new NotFilter<T>(f);\n}"
            ],
            [
                "addEscapes",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "/**\n * Replaces unprintable characters by their escaped (or unicode escaped)\n * equivalents in the given string\n */\nprotected static final String addEscapes(String str) {\n    StringBuffer retval = new StringBuffer();\n    char ch;\n    for (int i = 0; i < str.length(); i++) {\n        switch(str.charAt(i)) {\n            case 0:\n                continue;\n            case '\\b':\n                retval.append(\"\\\\b\");\n                continue;\n            case '\\t':\n                retval.append(\"\\\\t\");\n                continue;\n            case '\\n':\n                retval.append(\"\\\\n\");\n                continue;\n            case '\\f':\n                retval.append(\"\\\\f\");\n                continue;\n            case '\\r':\n                retval.append(\"\\\\r\");\n                continue;\n            case '\\\"':\n                retval.append(\"\\\\\\\"\");\n                continue;\n            case '\\'':\n                retval.append(\"\\\\\\'\");\n                continue;\n            case '\\\\':\n                retval.append(\"\\\\\\\\\");\n                continue;\n            default:\n                if ((ch = str.charAt(i)) < 0x20 || ch > 0x7e) {\n                    String s = \"0000\" + Integer.toString(ch, 16);\n                    retval.append(\"\\\\u\" + s.substring(s.length() - 4, s.length()));\n                } else {\n                    retval.append(ch);\n                }\n                continue;\n        }\n    }\n    return retval.toString();\n}"
            ],
            [
                "LexicalError",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "/**\n * Returns a detailed message for the Error when it is thrown by the token\n * manager to indicate a lexical error. Parameters : EOFSeen : indicates if\n * EOF caused the lexical error curLexState : lexical state in which this\n * error occurred errorLine : line number when the error occurred\n * errorColumn : column number when the error occurred errorAfter : prefix\n * that was seen before this error occurred curchar : the offending\n * character Note: You can customize the lexical error message by modifying\n * this method.\n */\nprotected static String LexicalError(boolean EOFSeen, int lexState, int errorLine, int errorColumn, String errorAfter, char curChar) {\n    return (\"Lexical error at line \" + errorLine + \", column \" + errorColumn + \".  Encountered: \" + (EOFSeen ? \"<EOF> \" : (\"\\\"\" + addEscapes(String.valueOf(curChar)) + \"\\\"\") + \" (\" + (int) curChar + \"), \") + \"after : \\\"\" + addEscapes(errorAfter) + \"\\\"\");\n}"
            ],
            [
                "add_escapes",
                "org.graphstream.util.parser",
                "ParseException",
                "/**\n * Used to convert raw characters to their escaped version when these raw\n * version cannot be used as part of an ASCII string literal.\n */\nstatic String add_escapes(String str) {\n    StringBuffer retval = new StringBuffer();\n    char ch;\n    for (int i = 0; i < str.length(); i++) {\n        switch(str.charAt(i)) {\n            case 0:\n                continue;\n            case '\\b':\n                retval.append(\"\\\\b\");\n                continue;\n            case '\\t':\n                retval.append(\"\\\\t\");\n                continue;\n            case '\\n':\n                retval.append(\"\\\\n\");\n                continue;\n            case '\\f':\n                retval.append(\"\\\\f\");\n                continue;\n            case '\\r':\n                retval.append(\"\\\\r\");\n                continue;\n            case '\\\"':\n                retval.append(\"\\\\\\\"\");\n                continue;\n            case '\\'':\n                retval.append(\"\\\\\\'\");\n                continue;\n            case '\\\\':\n                retval.append(\"\\\\\\\\\");\n                continue;\n            default:\n                if ((ch = str.charAt(i)) < 0x20 || ch > 0x7e) {\n                    String s = \"0000\" + Integer.toString(ch, 16);\n                    retval.append(\"\\\\u\" + s.substring(s.length() - 4, s.length()));\n                } else {\n                    retval.append(ch);\n                }\n                continue;\n        }\n    }\n    return retval.toString();\n}"
            ],
            [
                "newToken",
                "org.graphstream.util.parser",
                "Token",
                "/**\n * Returns a new Token object, by default. However, if you want, you can\n * create and return subclass objects based on the value of ofKind. Simply\n * add the cases to the switch for all those special cases. For example, if\n * you have a subclass of Token called IDToken that you want to create if\n * ofKind is ID, simply add something like :\n *\n * case MyParserConstants.ID : return new IDToken(ofKind, image);\n *\n * to the following switch statement. Then you can cast matchedToken\n * variable to the appropriate type and use sit in your lexical actions.\n */\npublic static Token newToken(int ofKind, String image) {\n    switch(ofKind) {\n        default:\n            return new Token(ofKind, image);\n    }\n}"
            ],
            [
                "newToken",
                "org.graphstream.util.parser",
                "Token",
                "public static Token newToken(int ofKind) {\n    return newToken(ofKind, null);\n}"
            ],
            [
                "countStepInFile",
                "org.graphstream.util",
                "StepCounter",
                "/**\n * Count step contains in a file.\n *\n * @param path\n *            path to the file\n * @return count of step event in the file\n * @throws IOException\n * @see org.graphstream.stream.file.FileSourceFactory\n */\npublic static int countStepInFile(String path) throws IOException {\n    StepCounter counter = new StepCounter();\n    FileSource source = FileSourceFactory.sourceFor(path);\n    source.addElementSink(counter);\n    source.readAll(path);\n    return counter.getStepCount();\n}"
            ],
            [
                "GET",
                "org.graphstream.stream.net",
                "HTTPSource",
                "@SuppressWarnings(\"unchecked\")\nprotected static HashMap<String, Object> GET(HttpExchange ex) {\n    HashMap<String, Object> get = new HashMap<String, Object>();\n    String[] args = ex.getRequestURI().getRawQuery().split(\"[&]\");\n    for (String arg : args) {\n        String[] kv = arg.split(\"[=]\");\n        String k, v;\n        k = null;\n        v = null;\n        try {\n            if (kv.length > 0)\n                k = URLDecoder.decode(kv[0], System.getProperty(\"file.encoding\"));\n            if (kv.length > 1)\n                v = URLDecoder.decode(kv[1], System.getProperty(\"file.encoding\"));\n            if (get.containsKey(k)) {\n                Object o = get.get(k);\n                if (o instanceof LinkedList<?>)\n                    ((LinkedList<Object>) o).add(v);\n                else {\n                    LinkedList<Object> l = new LinkedList<Object>();\n                    l.add(o);\n                    l.add(v);\n                    get.put(k, l);\n                }\n            } else {\n                get.put(k, v);\n            }\n        } catch (UnsupportedEncodingException e) {\n            e.printStackTrace();\n        }\n    }\n    return get;\n}"
            ],
            [
                "sinkFor",
                "org.graphstream.stream.file",
                "FileSinkFactory",
                "/**\n * Looks at the file name given and its extension and propose a file output\n * for the format that match this extension.\n *\n * @param filename\n *            The file name where the graph will be written.\n * @return A file sink or null.\n */\npublic static FileSink sinkFor(String filename) {\n    if (filename.indexOf('.') > 0) {\n        String ext = filename.substring(filename.lastIndexOf('.') + 1);\n        ext = ext.toLowerCase();\n        if (ext2sink.containsKey(ext)) {\n            Class<? extends FileSink> fsink = ext2sink.get(ext);\n            try {\n                return fsink.newInstance();\n            } catch (InstantiationException e) {\n                e.printStackTrace();\n            } catch (IllegalAccessException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n    return null;\n}"
            ],
            [
                "formatId",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "protected static String formatId(String id) {\n    return \"node\" + id.replaceAll(\"\\\\W\", \"_\");\n}"
            ],
            [
                "getInt",
                "org.graphstream.stream.file.pajek",
                "PajekContext",
                "protected static int getInt(Token nb) throws ParseException {\n    try {\n        return Integer.parseInt(nb.image);\n    } catch (Exception e) {\n        throw new ParseException(String.format(\"%d:%d: %s not an integer\", nb.beginLine, nb.beginColumn, nb.image));\n    }\n}"
            ],
            [
                "getReal",
                "org.graphstream.stream.file.pajek",
                "PajekContext",
                "protected static double getReal(Token nb) throws ParseException {\n    try {\n        return Double.parseDouble(nb.image);\n    } catch (Exception e) {\n        throw new ParseException(String.format(\"%d:%d: %s not a real\", nb.beginLine, nb.beginColumn, nb.image));\n    }\n}"
            ],
            [
                "toColorValue",
                "org.graphstream.stream.file.pajek",
                "PajekContext",
                "public static String toColorValue(Token R, Token G, Token B) throws ParseException {\n    double r = getReal(R);\n    double g = getReal(G);\n    double b = getReal(B);\n    return String.format(\"rgb(%d, %d, %d)\", (int) (r * 255), (int) (g * 255), (int) (b * 255));\n}"
            ],
            [
                "sourceFor",
                "org.graphstream.stream.file",
                "FileSourceFactory",
                "/**\n * Create a file input for the given file name.\n *\n * <p>\n * This method first tests if the file is a regular file and is readable. If\n * so, it opens it and reads the magic cookie to test the known file formats\n * that can be inferred from their header. If it works, it returns a file\n * input for the format. Else it looks at the file name extension, and\n * returns a file input for the extension. Finally if all fail, it throws a\n * NotFoundException.\n * </p>\n *\n * <p>\n * Notice that this method only creates the file input and does not connect\n * it to a graph.\n * </p>\n *\n * @param fileName\n *            Name of the graph file.\n * @return A graph reader suitable for the fileName graph format.\n * @throws IOException\n *             If the file is not readable or accessible.\n */\npublic static FileSource sourceFor(String fileName) throws IOException {\n    File file = new File(fileName);\n    if (!file.isFile())\n        throw new IOException(\"not a regular file '\" + fileName + \"'\");\n    if (!file.canRead())\n        throw new IOException(\"not a readable file '\" + fileName + \"'\");\n    // Try to read the beginning of the file.\n    RandomAccessFile in = new RandomAccessFile(fileName, \"r\");\n    byte[] b = new byte[10];\n    int n = in.read(b, 0, 10);\n    // System.err.printf( \"[\" );\n    // for( int i=0; i<n; ++i )\n    // {\n    // System.err.printf( \"%c\", (char)b[i] );\n    // }\n    // System.err.printf( \"]%n\" );\n    in.close();\n    // Surely match a DGS file, as DGS files are well done and have a\n    // signature.\n    if (n >= 3 && b[0] == 'D' && b[1] == 'G' && b[2] == 'S') {\n        if (n >= 6 && b[3] == '0' && b[4] == '0') {\n            if (b[5] == '1' || b[5] == '2') {\n                return new FileSourceDGS1And2();\n            } else if (b[5] == '3' || b[5] == '4') {\n                return new FileSourceDGS();\n            }\n        }\n    }\n    // Maybe match a GML file as most GML files begin by the line \"graph [\",\n    // but not sure, you may create a GML file that starts by a comment, an\n    // empty line, with any kind of spaces, etc.\n    if (n >= 7 && b[0] == 'g' && b[1] == 'r' && b[2] == 'a' && b[3] == 'p' && b[4] == 'h' && b[5] == ' ' && b[6] == '[') {\n        return new org.graphstream.stream.file.FileSourceGML();\n    }\n    if (n >= 4 && b[0] == '(' && b[1] == 't' && b[2] == 'l' && b[3] == 'p')\n        return new FileSourceTLP();\n    // The web reader.\n    String flc = fileName.toLowerCase();\n    // If we did not found anything, we try with the filename extension ...\n    if (flc.endsWith(\".dgs\")) {\n        return new FileSourceDGS();\n    }\n    if (flc.endsWith(\".gml\") || flc.endsWith(\".dgml\")) {\n        return new org.graphstream.stream.file.FileSourceGML();\n    }\n    if (flc.endsWith(\".net\")) {\n        return new FileSourcePajek();\n    }\n    if (flc.endsWith(\".chaco\") || flc.endsWith(\".graph\")) {\n        // return new GraphReaderChaco();\n    }\n    if (flc.endsWith(\".dot\")) {\n        return new org.graphstream.stream.file.FileSourceDOT();\n    }\n    if (flc.endsWith(\".edge\")) {\n        return new FileSourceEdge();\n    }\n    if (flc.endsWith(\".lgl\")) {\n        return new FileSourceLGL();\n    }\n    if (flc.endsWith(\".ncol\")) {\n        return new FileSourceNCol();\n    }\n    if (flc.endsWith(\".tlp\")) {\n        return new FileSourceTLP();\n    }\n    if (flc.endsWith(\".xml\")) {\n        String root = getXMLRootElement(fileName);\n        if (root.equalsIgnoreCase(\"gexf\"))\n            return new FileSourceGEXF();\n        return new FileSourceGraphML();\n    }\n    if (flc.endsWith(\".gexf\")) {\n        return new FileSourceGEXF();\n    }\n    return null;\n}"
            ],
            [
                "getXMLRootElement",
                "org.graphstream.stream.file",
                "FileSourceFactory",
                "public static String getXMLRootElement(String fileName) throws IOException {\n    FileReader stream = new FileReader(fileName);\n    XMLEventReader reader;\n    XMLEvent e;\n    String root;\n    try {\n        reader = XMLInputFactory.newInstance().createXMLEventReader(stream);\n        do {\n            e = reader.nextEvent();\n        } while (!e.isStartElement() && !e.isEndDocument());\n        if (e.isEndDocument())\n            throw new IOException(\"document ended before catching root element\");\n        root = e.asStartElement().getName().getLocalPart();\n        reader.close();\n        stream.close();\n        return root;\n    } catch (XMLStreamException ex) {\n        throw new IOException(ex);\n    } catch (FactoryConfigurationError ex) {\n        throw new IOException(ex);\n    }\n}"
            ],
            [
                "formatStringForQuoting",
                "org.graphstream.stream.file",
                "FileSinkDGSUtility",
                "protected static String formatStringForQuoting(String str) {\n    return str.replaceAll(\"(^|[^\\\\\\\\])\\\"\", \"$1\\\\\\\\\\\"\");\n}"
            ],
            [
                "attributeString",
                "org.graphstream.stream.file",
                "FileSinkDGSUtility",
                "protected static String attributeString(String key, Object value, boolean remove) {\n    if (key == null || key.length() == 0)\n        return null;\n    if (remove) {\n        return String.format(\" -\\\"%s\\\"\", key);\n    } else {\n        if (value != null && value.getClass().isArray())\n            return String.format(\" \\\"%s\\\":%s\", key, arrayString(value));\n        else\n            return String.format(\" \\\"%s\\\":%s\", key, valueString(value));\n    }\n}"
            ],
            [
                "arrayString",
                "org.graphstream.stream.file",
                "FileSinkDGSUtility",
                "protected static String arrayString(Object value) {\n    if (value != null && value.getClass().isArray()) {\n        StringBuilder sb = new StringBuilder();\n        sb.append(\"{\");\n        if (Array.getLength(value) == 0)\n            sb.append(\"\\\"\\\"\");\n        else\n            sb.append(arrayString(Array.get(value, 0)));\n        for (int i = 1; i < Array.getLength(value); ++i) sb.append(String.format(\",%s\", arrayString(Array.get(value, i))));\n        sb.append(\"}\");\n        return sb.toString();\n    } else {\n        return valueString(value);\n    }\n}"
            ],
            [
                "valueString",
                "org.graphstream.stream.file",
                "FileSinkDGSUtility",
                "protected static String valueString(Object value) {\n    if (value == null)\n        return \"\\\"\\\"\";\n    if (value instanceof CharSequence) {\n        if (value instanceof String)\n            return String.format(\"\\\"%s\\\"\", formatStringForQuoting((String) value));\n        else\n            return String.format(\"\\\"%s\\\"\", (CharSequence) value);\n    } else if (value instanceof Number) {\n        Number nval = (Number) value;\n        if (value instanceof Integer || value instanceof Short || value instanceof Byte || value instanceof Long)\n            return String.format(Locale.US, \"%d\", nval.longValue());\n        else\n            return String.format(Locale.US, \"%f\", nval.doubleValue());\n    } else if (value instanceof Boolean) {\n        return String.format(Locale.US, \"%b\", ((Boolean) value));\n    } else if (value instanceof Character) {\n        return String.format(\"\\\"%c\\\"\", ((Character) value).charValue());\n    } else if (value instanceof Object[]) {\n        Object[] array = (Object[]) value;\n        int n = array.length;\n        StringBuffer sb = new StringBuffer();\n        if (array.length > 0)\n            sb.append(valueString(array[0]));\n        for (int i = 1; i < n; i++) {\n            sb.append(\",\");\n            sb.append(valueString(array[i]));\n        }\n        return sb.toString();\n    } else if (value instanceof HashMap<?, ?> || value instanceof CompoundAttribute) {\n        HashMap<?, ?> hash;\n        if (value instanceof CompoundAttribute)\n            hash = ((CompoundAttribute) value).toHashMap();\n        else\n            hash = (HashMap<?, ?>) value;\n        return hashToString(hash);\n    } else if (value instanceof Color) {\n        Color c = (Color) value;\n        return String.format(\"#%02X%02X%02X%02X\", c.getRed(), c.getGreen(), c.getBlue(), c.getAlpha());\n    } else {\n        return String.format(\"\\\"%s\\\"\", value.toString());\n    }\n}"
            ],
            [
                "hashToString",
                "org.graphstream.stream.file",
                "FileSinkDGSUtility",
                "protected static String hashToString(HashMap<?, ?> hash) {\n    StringBuilder sb = new StringBuilder();\n    sb.append(\"[ \");\n    for (Object key : hash.keySet()) {\n        sb.append(attributeString(key.toString(), hash.get(key), false));\n        sb.append(\",\");\n    }\n    sb.append(']');\n    return sb.toString();\n}"
            ],
            [
                "encodeObject",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Serializes an object and returns the Base64-encoded\n * version of that serialized object.\n *\n * <p>As of v 2.3, if the object\n * cannot be serialized or there is another error,\n * the method will throw an java.io.IOException. <b>This is new to v2.3!</b>\n * In earlier versions, it just returned a null value, but\n * in retrospect that's a pretty poor way to handle it.</p>\n *\n * The object is not GZip-compressed before being encoded.\n *\n * @param serializableObject The object to encode\n * @return The Base64-encoded object\n * @throws java.io.IOException if there is an error\n * @throws NullPointerException if serializedObject is null\n * @since 1.4\n */\npublic static String encodeObject(java.io.Serializable serializableObject) throws java.io.IOException {\n    return encodeObject(serializableObject, NO_OPTIONS);\n}"
            ],
            [
                "encodeObject",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end encodeObject\n/**\n * Serializes an object and returns the Base64-encoded\n * version of that serialized object.\n *\n * <p>As of v 2.3, if the object\n * cannot be serialized or there is another error,\n * the method will throw an java.io.IOException. <b>This is new to v2.3!</b>\n * In earlier versions, it just returned a null value, but\n * in retrospect that's a pretty poor way to handle it.</p>\n *\n * The object is not GZip-compressed before being encoded.\n * <p>\n * Example options:<pre>\n *   GZIP: gzip-compresses object before encoding it.\n *   DO_BREAK_LINES: break lines at 76 characters\n * </pre>\n * <p>\n * Example: <code>encodeObject( myObj, Base64.GZIP )</code> or\n * <p>\n * Example: <code>encodeObject( myObj, Base64.GZIP | Base64.DO_BREAK_LINES )</code>\n *\n * @param serializableObject The object to encode\n * @param options Specified options\n * @return The Base64-encoded object\n * @see Base64#GZIP\n * @see Base64#DO_BREAK_LINES\n * @throws java.io.IOException if there is an error\n * @since 2.0\n */\npublic static String encodeObject(java.io.Serializable serializableObject, int options) throws java.io.IOException {\n    if (serializableObject == null) {\n        throw new NullPointerException(\"Cannot serialize a null object.\");\n    }\n    // end if: null\n    // Streams\n    java.io.ByteArrayOutputStream baos = null;\n    java.io.OutputStream b64os = null;\n    java.util.zip.GZIPOutputStream gzos = null;\n    java.io.ObjectOutputStream oos = null;\n    try {\n        // ObjectOutputStream -> (GZIP) -> Base64 -> ByteArrayOutputStream\n        baos = new java.io.ByteArrayOutputStream();\n        b64os = new Base64.OutputStream(baos, ENCODE | options);\n        if ((options & GZIP) != 0) {\n            // Gzip\n            gzos = new java.util.zip.GZIPOutputStream(b64os);\n            oos = new java.io.ObjectOutputStream(gzos);\n        } else {\n            // Not gzipped\n            oos = new java.io.ObjectOutputStream(b64os);\n        }\n        oos.writeObject(serializableObject);\n    }// end try\n     catch (java.io.IOException e) {\n        // Catch it and then throw it immediately so that\n        // the finally{} block is called for cleanup.\n        throw e;\n    } finally // end catch\n    {\n        try {\n            oos.close();\n        } catch (Exception e) {\n        }\n        try {\n            gzos.close();\n        } catch (Exception e) {\n        }\n        try {\n            b64os.close();\n        } catch (Exception e) {\n        }\n        try {\n            baos.close();\n        } catch (Exception e) {\n        }\n    }\n    // end finally\n    // Return value according to relevant encoding.\n    try {\n        return new String(baos.toByteArray(), PREFERRED_ENCODING);\n    }// end try\n     catch (java.io.UnsupportedEncodingException uue) {\n        // Fall back to some Java default\n        return new String(baos.toByteArray());\n    }\n    // end catch\n}"
            ],
            [
                "encodeBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end encode\n/**\n * Encodes a byte array into Base64 notation.\n * Does not GZip-compress data.\n *\n * @param source The data to convert\n * @return The data in Base64-encoded form\n * @throws NullPointerException if source array is null\n * @since 1.4\n */\npublic static String encodeBytes(byte[] source) {\n    // Since we're not going to have the GZIP encoding turned on,\n    // we're not going to have an java.io.IOException thrown, so\n    // we should not force the user to have to catch it.\n    String encoded = null;\n    try {\n        encoded = encodeBytes(source, 0, source.length, NO_OPTIONS);\n    } catch (java.io.IOException ex) {\n        assert false : ex.getMessage();\n    }\n    // end catch\n    assert encoded != null;\n    return encoded;\n}"
            ],
            [
                "encodeBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end encodeBytes\n/**\n * Encodes a byte array into Base64 notation.\n * <p>\n * Example options:<pre>\n *   GZIP: gzip-compresses object before encoding it.\n *   DO_BREAK_LINES: break lines at 76 characters\n *     <i>Note: Technically, this makes your encoding non-compliant.</i>\n * </pre>\n * <p>\n * Example: <code>encodeBytes( myData, Base64.GZIP )</code> or\n * <p>\n * Example: <code>encodeBytes( myData, Base64.GZIP | Base64.DO_BREAK_LINES )</code>\n *\n * <p>As of v 2.3, if there is an error with the GZIP stream,\n * the method will throw an java.io.IOException. <b>This is new to v2.3!</b>\n * In earlier versions, it just returned a null value, but\n * in retrospect that's a pretty poor way to handle it.</p>\n *\n * @param source The data to convert\n * @param options Specified options\n * @return The Base64-encoded data as a String\n * @see Base64#GZIP\n * @see Base64#DO_BREAK_LINES\n * @throws java.io.IOException if there is an error\n * @throws NullPointerException if source array is null\n * @since 2.0\n */\npublic static String encodeBytes(byte[] source, int options) throws java.io.IOException {\n    return encodeBytes(source, 0, source.length, options);\n}"
            ],
            [
                "encodeBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end encodeBytes\n/**\n * Encodes a byte array into Base64 notation.\n * Does not GZip-compress data.\n *\n * <p>As of v 2.3, if there is an error,\n * the method will throw an java.io.IOException. <b>This is new to v2.3!</b>\n * In earlier versions, it just returned a null value, but\n * in retrospect that's a pretty poor way to handle it.</p>\n *\n * @param source The data to convert\n * @param off Offset in array where conversion should begin\n * @param len Length of data to convert\n * @return The Base64-encoded data as a String\n * @throws NullPointerException if source array is null\n * @throws IllegalArgumentException if source array, offset, or length are invalid\n * @since 1.4\n */\npublic static String encodeBytes(byte[] source, int off, int len) {\n    // Since we're not going to have the GZIP encoding turned on,\n    // we're not going to have an java.io.IOException thrown, so\n    // we should not force the user to have to catch it.\n    String encoded = null;\n    try {\n        encoded = encodeBytes(source, off, len, NO_OPTIONS);\n    } catch (java.io.IOException ex) {\n        assert false : ex.getMessage();\n    }\n    // end catch\n    assert encoded != null;\n    return encoded;\n}"
            ],
            [
                "encodeBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end encodeBytes\n/**\n * Encodes a byte array into Base64 notation.\n * <p>\n * Example options:<pre>\n *   GZIP: gzip-compresses object before encoding it.\n *   DO_BREAK_LINES: break lines at 76 characters\n *     <i>Note: Technically, this makes your encoding non-compliant.</i>\n * </pre>\n * <p>\n * Example: <code>encodeBytes( myData, Base64.GZIP )</code> or\n * <p>\n * Example: <code>encodeBytes( myData, Base64.GZIP | Base64.DO_BREAK_LINES )</code>\n *\n * <p>As of v 2.3, if there is an error with the GZIP stream,\n * the method will throw an java.io.IOException. <b>This is new to v2.3!</b>\n * In earlier versions, it just returned a null value, but\n * in retrospect that's a pretty poor way to handle it.</p>\n *\n * @param source The data to convert\n * @param off Offset in array where conversion should begin\n * @param len Length of data to convert\n * @param options Specified options\n * @return The Base64-encoded data as a String\n * @see Base64#GZIP\n * @see Base64#DO_BREAK_LINES\n * @throws java.io.IOException if there is an error\n * @throws NullPointerException if source array is null\n * @throws IllegalArgumentException if source array, offset, or length are invalid\n * @since 2.0\n */\npublic static String encodeBytes(byte[] source, int off, int len, int options) throws java.io.IOException {\n    byte[] encoded = encodeBytesToBytes(source, off, len, options);\n    // Return value according to relevant encoding.\n    try {\n        return new String(encoded, PREFERRED_ENCODING);\n    }// end try\n     catch (java.io.UnsupportedEncodingException uue) {\n        return new String(encoded);\n    }\n    // end catch\n}"
            ],
            [
                "encodeBytesToBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end encodeBytes\n/**\n * Similar to {@link #encodeBytes(byte[])} but returns\n * a byte array instead of instantiating a String. This is more efficient\n * if you're working with I/O streams and have large data sets to encode.\n *\n * @param source The data to convert\n * @return The Base64-encoded data as a byte[] (of ASCII characters)\n * @throws NullPointerException if source array is null\n * @since 2.3.1\n */\npublic static byte[] encodeBytesToBytes(byte[] source) {\n    byte[] encoded = null;\n    try {\n        encoded = encodeBytesToBytes(source, 0, source.length, Base64.NO_OPTIONS);\n    } catch (java.io.IOException ex) {\n        assert false : \"IOExceptions only come from GZipping, which is turned off: \" + ex.getMessage();\n    }\n    return encoded;\n}"
            ],
            [
                "encodeBytesToBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Similar to {@link #encodeBytes(byte[], int, int, int)} but returns\n * a byte array instead of instantiating a String. This is more efficient\n * if you're working with I/O streams and have large data sets to encode.\n *\n * @param source The data to convert\n * @param off Offset in array where conversion should begin\n * @param len Length of data to convert\n * @param options Specified options\n * @return The Base64-encoded data as a String\n * @see Base64#GZIP\n * @see Base64#DO_BREAK_LINES\n * @throws java.io.IOException if there is an error\n * @throws NullPointerException if source array is null\n * @throws IllegalArgumentException if source array, offset, or length are invalid\n * @since 2.3.1\n */\npublic static byte[] encodeBytesToBytes(byte[] source, int off, int len, int options) throws java.io.IOException {\n    if (source == null) {\n        throw new NullPointerException(\"Cannot serialize a null array.\");\n    }\n    // end if: null\n    if (off < 0) {\n        throw new IllegalArgumentException(\"Cannot have negative offset: \" + off);\n    }\n    // end if: off < 0\n    if (len < 0) {\n        throw new IllegalArgumentException(\"Cannot have length offset: \" + len);\n    }\n    // end if: len < 0\n    if (off + len > source.length) {\n        throw new IllegalArgumentException(String.format(\"Cannot have offset of %d and length of %d with array of length %d\", off, len, source.length));\n    }\n    // end if: off < 0\n    // Compress?\n    if ((options & GZIP) != 0) {\n        java.io.ByteArrayOutputStream baos = null;\n        java.util.zip.GZIPOutputStream gzos = null;\n        Base64.OutputStream b64os = null;\n        try {\n            // GZip -> Base64 -> ByteArray\n            baos = new java.io.ByteArrayOutputStream();\n            b64os = new Base64.OutputStream(baos, ENCODE | options);\n            gzos = new java.util.zip.GZIPOutputStream(b64os);\n            gzos.write(source, off, len);\n            gzos.close();\n        }// end try\n         catch (java.io.IOException e) {\n            // Catch it and then throw it immediately so that\n            // the finally{} block is called for cleanup.\n            throw e;\n        } finally // end catch\n        {\n            try {\n                gzos.close();\n            } catch (Exception e) {\n            }\n            try {\n                b64os.close();\n            } catch (Exception e) {\n            }\n            try {\n                baos.close();\n            } catch (Exception e) {\n            }\n        }\n        // end finally\n        return baos.toByteArray();\n    } else // end if: compress\n    // Else, don't compress. Better not to use streams at all then.\n    {\n        boolean breakLines = (options & DO_BREAK_LINES) != 0;\n        //int    len43   = len * 4 / 3;\n        //byte[] outBuff = new byte[   ( len43 )                      // Main 4:3\n        //                           + ( (len % 3) > 0 ? 4 : 0 )      // Account for padding\n        //                           + (breakLines ? ( len43 / MAX_LINE_LENGTH ) : 0) ]; // New lines\n        // Try to determine more precisely how big the array needs to be.\n        // If we get it right, we don't have to do an array copy, and\n        // we save a bunch of memory.\n        // Bytes needed for actual encoding\n        int encLen = (len / 3) * 4 + (len % 3 > 0 ? 4 : 0);\n        if (breakLines) {\n            // Plus extra newline characters\n            encLen += encLen / MAX_LINE_LENGTH;\n        }\n        byte[] outBuff = new byte[encLen];\n        int d = 0;\n        int e = 0;\n        int len2 = len - 2;\n        int lineLength = 0;\n        for (; d < len2; d += 3, e += 4) {\n            encode3to4(source, d + off, 3, outBuff, e, options);\n            lineLength += 4;\n            if (breakLines && lineLength >= MAX_LINE_LENGTH) {\n                outBuff[e + 4] = NEW_LINE;\n                e++;\n                lineLength = 0;\n            }\n            // end if: end of line\n        }\n        // en dfor: each piece of array\n        if (d < len) {\n            encode3to4(source, d + off, len - d, outBuff, e, options);\n            e += 4;\n        }\n        // end if: some padding needed\n        // Only resize array if we didn't guess it right.\n        if (e <= outBuff.length - 1) {\n            // If breaking lines and the last byte falls right at\n            // the line length (76 bytes per line), there will be\n            // one extra byte, and the array will need to be resized.\n            // Not too bad of an estimate on array size, I'd say.\n            byte[] finalOut = new byte[e];\n            System.arraycopy(outBuff, 0, finalOut, 0, e);\n            //System.err.println(\"Having to resize array from \" + outBuff.length + \" to \" + e );\n            return finalOut;\n        } else {\n            //System.err.println(\"No need to resize array.\");\n            return outBuff;\n        }\n    }\n    // end else: don't compress\n}"
            ],
            [
                "decode",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end decodeToBytes\n/**\n * Low-level access to decoding ASCII characters in\n * the form of a byte array. <strong>Ignores GUNZIP option, if\n * it's set.</strong> This is not generally a recommended method,\n * although it is used internally as part of the decoding process.\n * Special case: if len = 0, an empty array is returned. Still,\n * if you need more speed and reduced memory footprint (and aren't\n * gzipping), consider this method.\n *\n * @param source The Base64 encoded data\n * @return decoded data\n * @since 2.3.1\n */\npublic static byte[] decode(byte[] source) throws java.io.IOException {\n    byte[] decoded = null;\n    //        try {\n    decoded = decode(source, 0, source.length, Base64.NO_OPTIONS);\n    //        } catch( java.io.IOException ex ) {\n    //            assert false : \"IOExceptions only come from GZipping, which is turned off: \" + ex.getMessage();\n    //        }\n    return decoded;\n}"
            ],
            [
                "decode",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Low-level access to decoding ASCII characters in\n * the form of a byte array. <strong>Ignores GUNZIP option, if\n * it's set.</strong> This is not generally a recommended method,\n * although it is used internally as part of the decoding process.\n * Special case: if len = 0, an empty array is returned. Still,\n * if you need more speed and reduced memory footprint (and aren't\n * gzipping), consider this method.\n *\n * @param source The Base64 encoded data\n * @param off    The offset of where to begin decoding\n * @param len    The length of characters to decode\n * @param options Can specify options such as alphabet type to use\n * @return decoded data\n * @throws java.io.IOException If bogus characters exist in source data\n * @since 1.3\n */\npublic static byte[] decode(byte[] source, int off, int len, int options) throws java.io.IOException {\n    // Lots of error checking and exception throwing\n    if (source == null) {\n        throw new NullPointerException(\"Cannot decode null source array.\");\n    }\n    // end if\n    if (off < 0 || off + len > source.length) {\n        throw new IllegalArgumentException(String.format(\"Source array with length %d cannot have offset of %d and process %d bytes.\", source.length, off, len));\n    }\n    // end if\n    if (len == 0) {\n        return new byte[0];\n    } else if (len < 4) {\n        throw new IllegalArgumentException(\"Base64-encoded string must have at least four characters, but length specified was \" + len);\n    }\n    // end if\n    byte[] DECODABET = getDecodabet(options);\n    // Estimate on array size\n    int len34 = len * 3 / 4;\n    // Upper limit on size of output\n    byte[] outBuff = new byte[len34];\n    // Keep track of where we're writing\n    int outBuffPosn = 0;\n    // Four byte buffer from source, eliminating white space\n    byte[] b4 = new byte[4];\n    // Keep track of four byte input buffer\n    int b4Posn = 0;\n    // Source array counter\n    int i = 0;\n    // Special value from DECODABET\n    byte sbiDecode = 0;\n    for (i = off; i < off + len; i++) {\n        // Loop through source\n        sbiDecode = DECODABET[source[i] & 0xFF];\n        // White space, Equals sign, or legit Base64 character\n        // Note the values such as -5 and -9 in the\n        // DECODABETs at the top of the file.\n        if (sbiDecode >= WHITE_SPACE_ENC) {\n            if (sbiDecode >= EQUALS_SIGN_ENC) {\n                // Save non-whitespace\n                b4[b4Posn++] = source[i];\n                if (b4Posn > 3) {\n                    // Time to decode?\n                    outBuffPosn += decode4to3(b4, 0, outBuff, outBuffPosn, options);\n                    b4Posn = 0;\n                    // If that was the equals sign, break out of 'for' loop\n                    if (source[i] == EQUALS_SIGN) {\n                        break;\n                    }\n                    // end if: equals sign\n                }\n                // end if: quartet built\n            }\n            // end if: equals sign or better\n        } else // end if: white space, equals sign or better\n        {\n            // There's a bad input character in the Base64 stream.\n            throw new java.io.IOException(String.format(\"Bad Base64 input character decimal %d in array position %d\", ((int) source[i]) & 0xFF, i));\n        }\n        // end else:\n    }\n    // each input character\n    byte[] out = new byte[outBuffPosn];\n    System.arraycopy(outBuff, 0, out, 0, outBuffPosn);\n    return out;\n}"
            ],
            [
                "decode",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end decode\n/**\n * Decodes data from Base64 notation, automatically\n * detecting gzip-compressed data and decompressing it.\n *\n * @param s the string to decode\n * @return the decoded data\n * @throws java.io.IOException If there is a problem\n * @since 1.4\n */\npublic static byte[] decode(String s) throws java.io.IOException {\n    return decode(s, NO_OPTIONS);\n}"
            ],
            [
                "decode",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Decodes data from Base64 notation, automatically\n * detecting gzip-compressed data and decompressing it.\n *\n * @param s the string to decode\n * @param options encode options such as URL_SAFE\n * @return the decoded data\n * @throws java.io.IOException if there is an error\n * @throws NullPointerException if <tt>s</tt> is null\n * @since 1.4\n */\npublic static byte[] decode(String s, int options) throws java.io.IOException {\n    if (s == null) {\n        throw new NullPointerException(\"Input string was null.\");\n    }\n    // end if\n    byte[] bytes;\n    try {\n        bytes = s.getBytes(PREFERRED_ENCODING);\n    }// end try\n     catch (java.io.UnsupportedEncodingException uee) {\n        bytes = s.getBytes();\n    }\n    // end catch\n    //</change>\n    // Decode\n    bytes = decode(bytes, 0, bytes.length, options);\n    // Check to see if it's gzip-compressed\n    // GZIP Magic Two-Byte Number: 0x8b1f (35615)\n    boolean dontGunzip = (options & DONT_GUNZIP) != 0;\n    if ((bytes != null) && (bytes.length >= 4) && (!dontGunzip)) {\n        int head = ((int) bytes[0] & 0xff) | ((bytes[1] << 8) & 0xff00);\n        if (java.util.zip.GZIPInputStream.GZIP_MAGIC == head) {\n            java.io.ByteArrayInputStream bais = null;\n            java.util.zip.GZIPInputStream gzis = null;\n            java.io.ByteArrayOutputStream baos = null;\n            byte[] buffer = new byte[2048];\n            int length = 0;\n            try {\n                baos = new java.io.ByteArrayOutputStream();\n                bais = new java.io.ByteArrayInputStream(bytes);\n                gzis = new java.util.zip.GZIPInputStream(bais);\n                while ((length = gzis.read(buffer)) >= 0) {\n                    baos.write(buffer, 0, length);\n                }\n                // end while: reading input\n                // No error? Get new bytes.\n                bytes = baos.toByteArray();\n            }// end try\n             catch (java.io.IOException e) {\n                e.printStackTrace();\n                // Just return originally-decoded bytes\n            } finally // end catch\n            {\n                try {\n                    baos.close();\n                } catch (Exception e) {\n                }\n                try {\n                    gzis.close();\n                } catch (Exception e) {\n                }\n                try {\n                    bais.close();\n                } catch (Exception e) {\n                }\n            }\n            // end finally\n        }\n        // end if: gzipped\n    }\n    // end if: bytes.length >= 2\n    return bytes;\n}"
            ],
            [
                "decodeToObject",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end decode\n/**\n * Attempts to decode Base64 data and deserialize a Java\n * Object within. Returns <tt>null</tt> if there was an error.\n *\n * @param encodedObject The Base64 data to decode\n * @return The decoded and deserialized object\n * @throws NullPointerException if encodedObject is null\n * @throws java.io.IOException if there is a general error\n * @throws ClassNotFoundException if the decoded object is of a\n *         class that cannot be found by the JVM\n * @since 1.5\n */\npublic static Object decodeToObject(String encodedObject) throws java.io.IOException, java.lang.ClassNotFoundException {\n    return decodeToObject(encodedObject, NO_OPTIONS, null);\n}"
            ],
            [
                "decodeToObject",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Attempts to decode Base64 data and deserialize a Java\n * Object within. Returns <tt>null</tt> if there was an error.\n * If <tt>loader</tt> is not null, it will be the class loader\n * used when deserializing.\n *\n * @param encodedObject The Base64 data to decode\n * @param options Various parameters related to decoding\n * @param loader Optional class loader to use in deserializing classes.\n * @return The decoded and deserialized object\n * @throws NullPointerException if encodedObject is null\n * @throws java.io.IOException if there is a general error\n * @throws ClassNotFoundException if the decoded object is of a\n *         class that cannot be found by the JVM\n * @since 2.3.4\n */\npublic static Object decodeToObject(String encodedObject, int options, final ClassLoader loader) throws java.io.IOException, java.lang.ClassNotFoundException {\n    // Decode and gunzip if necessary\n    byte[] objBytes = decode(encodedObject, options);\n    java.io.ByteArrayInputStream bais = null;\n    java.io.ObjectInputStream ois = null;\n    Object obj = null;\n    try {\n        bais = new java.io.ByteArrayInputStream(objBytes);\n        // If no custom class loader is provided, use Java's builtin OIS.\n        if (loader == null) {\n            ois = new java.io.ObjectInputStream(bais);\n        } else // end if: no loader provided\n        // Else make a customized object input stream that uses\n        // the provided class loader.\n        {\n            ois = new java.io.ObjectInputStream(bais) {\n\n                @Override\n                public Class<?> resolveClass(java.io.ObjectStreamClass streamClass) throws java.io.IOException, ClassNotFoundException {\n                    Class<?> c = Class.forName(streamClass.getName(), false, loader);\n                    if (c == null) {\n                        return super.resolveClass(streamClass);\n                    } else {\n                        // Class loader knows of this class.\n                        return c;\n                    }\n                    // end else: not null\n                }\n            };\n            // end ois\n        }\n        // end else: no custom class loader\n        obj = ois.readObject();\n    }// end try\n     catch (java.io.IOException e) {\n        // Catch and throw in order to execute finally{}\n        throw e;\n    }// end catch\n     catch (java.lang.ClassNotFoundException e) {\n        // Catch and throw in order to execute finally{}\n        throw e;\n    } finally // end catch\n    {\n        try {\n            bais.close();\n        } catch (Exception e) {\n        }\n        try {\n            ois.close();\n        } catch (Exception e) {\n        }\n    }\n    // end finally\n    return obj;\n}"
            ],
            [
                "decodeFromFile",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end decodeToFile\n/**\n * Convenience method for reading a base64-encoded\n * file and decoding it.\n *\n * <p>As of v 2.3, if there is a error,\n * the method will throw an java.io.IOException. <b>This is new to v2.3!</b>\n * In earlier versions, it just returned false, but\n * in retrospect that's a pretty poor way to handle it.</p>\n *\n * @param filename Filename for reading encoded data\n * @return decoded byte array\n * @throws java.io.IOException if there is an error\n * @since 2.1\n */\npublic static byte[] decodeFromFile(String filename) throws java.io.IOException {\n    byte[] decodedData = null;\n    Base64.InputStream bis = null;\n    try {\n        // Set up some useful variables\n        java.io.File file = new java.io.File(filename);\n        byte[] buffer = null;\n        int length = 0;\n        int numBytes = 0;\n        // Check for size of file\n        if (file.length() > Integer.MAX_VALUE) {\n            throw new java.io.IOException(\"File is too big for this convenience method (\" + file.length() + \" bytes).\");\n        }\n        // end if: file too big for int index\n        buffer = new byte[(int) file.length()];\n        // Open a stream\n        bis = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(file)), Base64.DECODE);\n        // Read until done\n        while ((numBytes = bis.read(buffer, length, 4096)) >= 0) {\n            length += numBytes;\n        }\n        // end while\n        // Save in a variable to return\n        decodedData = new byte[length];\n        System.arraycopy(buffer, 0, decodedData, 0, length);\n    }// end try\n     catch (java.io.IOException e) {\n        // Catch and release to execute finally{}\n        throw e;\n    } finally // end catch: java.io.IOException\n    {\n        try {\n            bis.close();\n        } catch (Exception e) {\n        }\n    }\n    // end finally\n    return decodedData;\n}"
            ],
            [
                "encodeFromFile",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end decodeFromFile\n/**\n * Convenience method for reading a binary file\n * and base64-encoding it.\n *\n * <p>As of v 2.3, if there is a error,\n * the method will throw an java.io.IOException. <b>This is new to v2.3!</b>\n * In earlier versions, it just returned false, but\n * in retrospect that's a pretty poor way to handle it.</p>\n *\n * @param filename Filename for reading binary data\n * @return base64-encoded string\n * @throws java.io.IOException if there is an error\n * @since 2.1\n */\npublic static String encodeFromFile(String filename) throws java.io.IOException {\n    String encodedData = null;\n    Base64.InputStream bis = null;\n    try {\n        // Set up some useful variables\n        java.io.File file = new java.io.File(filename);\n        // Need max() for math on small files (v2.2.1); Need +1 for a few corner cases (v2.3.5)\n        byte[] buffer = new byte[Math.max((int) (file.length() * 1.4 + 1), 40)];\n        int length = 0;\n        int numBytes = 0;\n        // Open a stream\n        bis = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(file)), Base64.ENCODE);\n        // Read until done\n        while ((numBytes = bis.read(buffer, length, 4096)) >= 0) {\n            length += numBytes;\n        }\n        // end while\n        // Save in a variable to return\n        encodedData = new String(buffer, 0, length, Base64.PREFERRED_ENCODING);\n    }// end try\n     catch (java.io.IOException e) {\n        // Catch and release to execute finally{}\n        throw e;\n    } finally // end catch: java.io.IOException\n    {\n        try {\n            bis.close();\n        } catch (Exception e) {\n        }\n    }\n    // end finally\n    return encodedData;\n}"
            ],
            [
                "unmutableGraph",
                "org.graphstream.graph.implementations",
                "Graphs",
                "public static Graph unmutableGraph(Graph g) {\n    return null;\n}"
            ],
            [
                "synchronizedGraph",
                "org.graphstream.graph.implementations",
                "Graphs",
                "/**\n * Synchronizes a graph. The returned graph can be accessed and modified by\n * several threads. You lose genericity in methods returning edge or node\n * because each element (graph, nodes and edges) is wrapped into a\n * synchronized wrapper which breaks original elements class.\n *\n * @param g\n *            the graph to synchronize\n * @return a synchronized wrapper for g\n */\npublic static Graph synchronizedGraph(Graph g) {\n    return new SynchronizedGraph(g);\n}"
            ],
            [
                "merge",
                "org.graphstream.graph.implementations",
                "Graphs",
                "/**\n * Merge several graphs in one. A new graph is created, that will contain\n * the result. The method will try to create a graph of the same class that\n * the first graph to merge (it needs to have a constructor with a String).\n * Else, a MultiGraph is used.\n *\n * @param graphs\n *            graphs to merge\n * @return merge result\n */\npublic static Graph merge(Graph... graphs) {\n    if (graphs == null)\n        return new DefaultGraph(\"void-merge\");\n    String id = \"merge\";\n    for (Graph g : graphs) id += \"-\" + g.getId();\n    Graph result;\n    try {\n        Class<? extends Graph> cls = graphs[0].getClass();\n        result = cls.getConstructor(String.class).newInstance(id);\n    } catch (Exception e) {\n        logger.warning(String.format(\"Cannot create a graph of %s.\", graphs[0].getClass().getName()));\n        result = new MultiGraph(id);\n    }\n    mergeIn(result, graphs);\n    return result;\n}"
            ],
            [
                "clone",
                "org.graphstream.graph.implementations",
                "Graphs",
                "/**\n * Clone a given graph with same node/edge structure and same attributes.\n *\n * @param g\n *            the graph to clone\n * @return a copy of g\n */\npublic static Graph clone(Graph g) {\n    Graph copy;\n    try {\n        Class<? extends Graph> cls = g.getClass();\n        copy = cls.getConstructor(String.class).newInstance(g.getId());\n    } catch (Exception e) {\n        logger.warning(String.format(\"Cannot create a graph of %s.\", g.getClass().getName()));\n        copy = new AdjacencyListGraph(g.getId());\n    }\n    copyAttributes(g, copy);\n    for (int i = 0; i < g.getNodeCount(); i++) {\n        Node source = g.getNode(i);\n        Node target = copy.addNode(source.getId());\n        copyAttributes(source, target);\n    }\n    for (int i = 0; i < g.getEdgeCount(); i++) {\n        Edge source = g.getEdge(i);\n        Edge target = copy.addEdge(source.getId(), source.getSourceNode().getId(), source.getTargetNode().getId(), source.isDirected());\n        copyAttributes(source, target);\n    }\n    return copy;\n}"
            ]
        ],
        "tokensProjectClassesNonPrivateStaticAttributes": [
            [
                "version16",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static boolean version16 = false;"
            ],
            [
                "predefFractions",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[][] predefFractions = new float[11][];"
            ],
            [
                "predefFractions2",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions2 = { 0f, 1f };"
            ],
            [
                "predefFractions3",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions3 = { 0f, 0.5f, 1f };"
            ],
            [
                "predefFractions4",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions4 = { 0f, 0.33f, 0.66f, 1f };"
            ],
            [
                "predefFractions5",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions5 = { 0f, 0.25f, 0.5f, 0.75f, 1f };"
            ],
            [
                "predefFractions6",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions6 = { 0f, 0.2f, 0.4f, 0.6f, 0.8f, 1f };"
            ],
            [
                "predefFractions7",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions7 = { 0f, 0.1666f, 0.3333f, 0.4999f, 0.6666f, 0.8333f, 1f };"
            ],
            [
                "predefFractions8",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions8 = { 0f, 0.1428f, 0.2856f, 0.4284f, 0.5712f, 0.7140f, 0.8568f, 1f };"
            ],
            [
                "predefFractions9",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions9 = { 0f, 0.125f, 0.25f, 0.375f, 0.5f, 0.625f, .75f, 0.875f, 1f };"
            ],
            [
                "predefFractions10",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions10 = { 0f, 0.1111f, 0.2222f, 0.3333f, 0.4444f, 0.5555f, 0.6666f, 0.7777f, 0.8888f, 1f };"
            ],
            [
                "defaultImageCache",
                "org.graphstream.ui.swingViewer.util",
                "ImageCache",
                "/**\n * The default singleton image cache instance.\n */\nprotected static ImageCache defaultImageCache;"
            ],
            [
                "dots",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "protected static float[] dots = { 1f, 1f };"
            ],
            [
                "dashes",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "protected static float[] dashes = { 3f, 3f };"
            ],
            [
                "defaultFontCache",
                "org.graphstream.ui.swingViewer.util",
                "FontCache",
                "/**\n * The default font cache.\n */\npublic static FontCache defaultFontCache;"
            ],
            [
                "NULL_POINT2",
                "org.graphstream.ui.geom",
                "Point2",
                "// Attributes -- Shared\n/**\n * Specific point at (0,0).\n */\npublic static final Point2 NULL_POINT2 = new Point2(0, 0);"
            ],
            [
                "NULL_POINT3",
                "org.graphstream.ui.geom",
                "Point3",
                "// Attributes -- Shared\n/**\n * Specific point at (0,0,0).\n */\npublic static final Point3 NULL_POINT3 = new Point3(0, 0, 0);"
            ],
            [
                "DEFAULT_VIEW_ID",
                "org.graphstream.ui.view",
                "Viewer",
                "// Attributes\n/**\n * Name of the default view.\n */\npublic static String DEFAULT_VIEW_ID = \"defaultView\";"
            ],
            [
                "jjbitVec0",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };"
            ],
            [
                "jjnextStates",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "static final int[] jjnextStates = { 48, 49, 52, 54, 55, 65, 69, 2, 4, 6, 10, 16, 23, 33, 50, 52, 54, 55, 57, 58, 60, 61, 66, 68, 70, 71 };"
            ],
            [
                "jjstrLiteralImages",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "/**\n * Token literal values.\n */\npublic static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, \"\\56\", \"\\173\", \"\\175\", \"\\50\", \"\\51\", \"\\43\", \"\\72\", \"\\73\", \"\\54\", \"\\162\\147\\142\\141\", \"\\162\\147\\142\", null, null, null, \"\\165\\162\\154\", \"\\147\\162\\141\\160\\150\", \"\\145\\144\\147\\145\", \"\\156\\157\\144\\145\", \"\\163\\160\\162\\151\\164\\145\", \"\\146\\151\\154\\154\\55\\155\\157\\144\\145\", \"\\146\\151\\154\\154\\55\\143\\157\\154\\157\\162\", \"\\146\\151\\154\\154\\55\\151\\155\\141\\147\\145\", \"\\163\\164\\162\\157\\153\\145\\55\\155\\157\\144\\145\", \"\\163\\164\\162\\157\\153\\145\\55\\143\\157\\154\\157\\162\", \"\\163\\164\\162\\157\\153\\145\\55\\167\\151\\144\\164\\150\", \"\\163\\150\\141\\144\\157\\167\\55\\155\\157\\144\\145\", \"\\163\\150\\141\\144\\157\\167\\55\\143\\157\\154\\157\\162\", \"\\163\\150\\141\\144\\157\\167\\55\\167\\151\\144\\164\\150\", \"\\163\\150\\141\\144\\157\\167\\55\\157\\146\\146\\163\\145\\164\", \"\\164\\145\\170\\164\\55\\155\\157\\144\\145\", \"\\164\\145\\170\\164\\55\\143\\157\\154\\157\\162\", \"\\164\\145\\170\\164\\55\\163\\164\\171\\154\\145\", \"\\164\\145\\170\\164\\55\\146\\157\\156\\164\", \"\\164\\145\\170\\164\\55\\163\\151\\172\\145\", \"\\164\\145\\170\\164\\55\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\\55\\155\\157\\144\\145\", \"\\164\\145\\170\\164\\55\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\", \"\\164\\145\\170\\164\\55\\142\\141\\143\\153\\147\\162\\157\\165\\156\\144\\55\\155\\157\\144\\145\", \"\\164\\145\\170\\164\\55\\142\\141\\143\\153\\147\\162\\157\\165\\156\\144\\55\\143\\157\\154\\157\\162\", \"\\164\\145\\170\\164\\55\\157\\146\\146\\163\\145\\164\", \"\\164\\145\\170\\164\\55\\160\\141\\144\\144\\151\\156\\147\", \"\\151\\143\\157\\156\\55\\155\\157\\144\\145\", \"\\151\\143\\157\\156\", \"\\160\\141\\144\\144\\151\\156\\147\", \"\\172\\55\\151\\156\\144\\145\\170\", \"\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\\55\\155\\157\\144\\145\", \"\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\", \"\\163\\150\\141\\160\\145\", \"\\163\\151\\172\\145\", \"\\163\\151\\172\\145\\55\\155\\157\\144\\145\", \"\\163\\150\\141\\160\\145\\55\\160\\157\\151\\156\\164\\163\", \"\\164\\145\\170\\164\\55\\141\\154\\151\\147\\156\\155\\145\\156\\164\", \"\\152\\143\\157\\155\\160\\157\\156\\145\\156\\164\", \"\\141\\162\\162\\157\\167\\55\\151\\155\\141\\147\\145\", \"\\141\\162\\162\\157\\167\\55\\163\\151\\172\\145\", \"\\141\\162\\162\\157\\167\\55\\163\\150\\141\\160\\145\", \"\\163\\160\\162\\151\\164\\145\\55\\157\\162\\151\\145\\156\\164\\141\\164\\151\\157\\156\", \"\\143\\141\\156\\166\\141\\163\\55\\143\\157\\154\\157\\162\", \"\\160\\154\\141\\151\\156\", \"\\144\\171\\156\\55\\160\\154\\141\\151\\156\", \"\\144\\171\\156\\55\\163\\151\\172\\145\", \"\\144\\171\\156\\55\\151\\143\\157\\156\", \"\\144\\141\\163\\150\\145\\163\", \"\\144\\157\\164\\163\", \"\\144\\157\\165\\142\\154\\145\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\144\\151\\141\\147\\157\\156\\141\\154\\61\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\144\\151\\141\\147\\157\\156\\141\\154\\62\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\150\\157\\162\\151\\172\\157\\156\\164\\141\\154\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\162\\141\\144\\151\\141\\154\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\166\\145\\162\\164\\151\\143\\141\\154\", \"\\150\\151\\144\\144\\145\\156\", \"\\151\\155\\141\\147\\145\\55\\164\\151\\154\\145\\144\", \"\\151\\155\\141\\147\\145\\55\\163\\143\\141\\154\\145\\144\", \"\\151\\155\\141\\147\\145\\55\\163\\143\\141\\154\\145\\144\\55\\162\\141\\164\\151\\157\\55\\155\\141\\170\", \"\\151\\155\\141\\147\\145\\55\\163\\143\\141\\154\\145\\144\\55\\162\\141\\164\\151\\157\\55\\155\\151\\156\", \"\\156\\157\\156\\145\", \"\\156\\157\\162\\155\\141\\154\", \"\\164\\162\\165\\156\\143\\141\\164\\145\\144\", \"\\172\\157\\157\\155\\55\\162\\141\\156\\147\\145\", \"\\141\\164\\55\\172\\157\\157\\155\", \"\\165\\156\\144\\145\\162\\55\\172\\157\\157\\155\", \"\\157\\166\\145\\162\\55\\172\\157\\157\\155\", \"\\172\\157\\157\\155\\163\", \"\\146\\151\\164\", \"\\142\\157\\154\\144\", \"\\142\\157\\154\\144\\55\\151\\164\\141\\154\\151\\143\", \"\\151\\164\\141\\154\\151\\143\", \"\\141\\154\\157\\156\\147\", \"\\141\\164\\55\\154\\145\\146\\164\", \"\\141\\164\\55\\162\\151\\147\\150\\164\", \"\\143\\145\\156\\164\\145\\162\", \"\\154\\145\\146\\164\", \"\\162\\151\\147\\150\\164\", \"\\165\\156\\144\\145\\162\", \"\\141\\142\\157\\166\\145\", \"\\152\\165\\163\\164\\151\\146\\171\", \"\\143\\151\\162\\143\\154\\145\", \"\\164\\162\\151\\141\\156\\147\\154\\145\", \"\\146\\162\\145\\145\\160\\154\\141\\156\\145\", \"\\164\\145\\170\\164\\55\\142\\157\\170\", \"\\164\\145\\170\\164\\55\\162\\157\\165\\156\\144\\145\\144\\55\\142\\157\\170\", \"\\164\\145\\170\\164\\55\\143\\151\\162\\143\\154\\145\", \"\\164\\145\\170\\164\\55\\144\\151\\141\\155\\157\\156\\144\", \"\\164\\145\\170\\164\\55\\160\\141\\162\\141\\147\\162\\141\\160\\150\", \"\\142\\157\\170\", \"\\162\\157\\165\\156\\144\\145\\144\\55\\142\\157\\170\", \"\\143\\162\\157\\163\\163\", \"\\144\\151\\141\\155\\157\\156\\144\", \"\\160\\157\\154\\171\\147\\157\\156\", \"\\142\\165\\164\\164\\157\\156\", \"\\164\\145\\170\\164\\55\\146\\151\\145\\154\\144\", \"\\160\\141\\156\\145\\154\", \"\\154\\151\\156\\145\", \"\\160\\157\\154\\171\\154\\151\\156\\145\", \"\\160\\157\\154\\171\\154\\151\\156\\145\\55\\163\\143\\141\\154\\145\\144\", \"\\141\\156\\147\\154\\145\", \"\\143\\165\\142\\151\\143\\55\\143\\165\\162\\166\\145\", \"\\142\\154\\157\\142\", \"\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\114\\55\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\150\\157\\162\\151\\172\\157\\156\\164\\141\\154\\55\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\166\\145\\162\\164\\151\\143\\141\\154\\55\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\141\\162\\162\\157\\167\", \"\\146\\154\\157\\167\", \"\\160\\151\\145\\55\\143\\150\\141\\162\\164\", \"\\151\\155\\141\\147\\145\", \"\\151\\155\\141\\147\\145\\163\", \"\\146\\162\\157\\155\", \"\\156\\157\\144\\145\\60\", \"\\164\\157\", \"\\156\\157\\144\\145\\61\", \"\\160\\162\\157\\152\\145\\143\\164\\151\\157\\156\", \"\\143\\154\\151\\143\\153\\145\\144\", \"\\163\\145\\154\\145\\143\\164\\145\\144\", null, null };"
            ],
            [
                "lexStateNames",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "/**\n * Lexer state names.\n */\npublic static final String[] lexStateNames = { \"DEFAULT\" };"
            ],
            [
                "jjtoToken",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "static final long[] jjtoToken = { 0xfffffffffffffe01L, 0xffffffffffffffffL, 0xffffL };"
            ],
            [
                "jjtoSkip",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "static final long[] jjtoSkip = { 0x1eL, 0x0L, 0x0L };"
            ],
            [
                "colorMap",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "// Static\n/**\n * A set of colour names mapped to real AWT Colour objects.\n */\nprotected static HashMap<String, Color> colorMap;"
            ],
            [
                "sharpColor1",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Pattern to ensure a \"#FFFFFF\" colour is recognised.\n */\nprotected static Pattern sharpColor1, sharpColor2;"
            ],
            [
                "sharpColor2",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Pattern to ensure a \"#FFFFFF\" colour is recognised.\n */\nprotected static Pattern sharpColor1, sharpColor2;"
            ],
            [
                "cssColor",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Pattern to ensure a CSS style \"rgb(1,2,3)\" colour is recognised.\n */\nprotected static Pattern cssColor;"
            ],
            [
                "cssColorA",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Pattern to ensure a CSS style \"rgba(1,2,3,4)\" colour is recognised.\n */\nprotected static Pattern cssColorA;"
            ],
            [
                "awtColor",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Pattern to ensure that java.awt.Color.toString() strings are recognised\n * as colour.\n */\nprotected static Pattern awtColor;"
            ],
            [
                "hexaColor",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Pattern to ensure an hexadecimal number is a recognised colour.\n */\nprotected static Pattern hexaColor;"
            ],
            [
                "numberUnit",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Pattern to ensure a string is a Value in various units.\n */\nprotected static Pattern numberUnit, number;"
            ],
            [
                "number",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Pattern to ensure a string is a Value in various units.\n */\nprotected static Pattern numberUnit, number;"
            ],
            [
                "acceptedAttribute",
                "org.graphstream.ui.graphicGraph",
                "GraphicElement",
                "// Overriding of standard attribute changing to filter them.\nprotected static Pattern acceptedAttribute;"
            ],
            [
                "DEFAULT_AN_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_AN_FORMAT = \"%prefix%[%sourceId%:%timeId%] add node \\\"%nodeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_CNA_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CNA_FORMAT = \"%prefix%[%sourceId%:%timeId%] set node \\\"%nodeId%\\\" +\\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CNC_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CNC_FORMAT = \"%prefix%[%sourceId%:%timeId%] set node \\\"%nodeId%\\\" \\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CNR_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CNR_FORMAT = \"%prefix%[%sourceId%:%timeId%] set node \\\"%nodeId%\\\" -\\\"%attributeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_DN_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_DN_FORMAT = \"%prefix%[%sourceId%:%timeId%] remove node \\\"%nodeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_AE_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_AE_FORMAT = \"%prefix%[%sourceId%:%timeId%] add edge \\\"%edgeId%\\\" : \\\"%source%\\\" -- \\\"%target%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_CEA_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CEA_FORMAT = \"%prefix%[%sourceId%:%timeId%] set edge \\\"%edgeId%\\\" +\\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CEC_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CEC_FORMAT = \"%prefix%[%sourceId%:%timeId%] set edge \\\"%edgeId%\\\" \\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CER_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CER_FORMAT = \"%prefix%[%sourceId%:%timeId%] set edge \\\"%edgeId%\\\" -\\\"%attributeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_DE_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_DE_FORMAT = \"%prefix%[%sourceId%:%timeId%] remove edge \\\"%edgeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_CGA_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CGA_FORMAT = \"%prefix%[%sourceId%:%timeId%] set +\\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CGC_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CGC_FORMAT = \"%prefix%[%sourceId%:%timeId%] set \\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CGR_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CGR_FORMAT = \"%prefix%[%sourceId%:%timeId%] set -\\\"%attributeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_CL_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CL_FORMAT = \"%prefix%[%sourceId%:%timeId%] clear%suffix%\";"
            ],
            [
                "DEFAULT_ST_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_ST_FORMAT = \"%prefix%[%sourceId%:%timeId%] step %step% begins%suffix%\";"
            ],
            [
                "GLOBAL_ENV",
                "org.graphstream.util",
                "Environment",
                "// --------- Static attributes ---------\n/**\n * Global environment for the whole JVM. This global environment is\n * available <b>and editable</b> from everywhere. It is create as soon as\n * the {@link #getGlobalEnvironment()} static method is called if this field\n * was not yet initialized by any other mean.\n * @see #getGlobalEnvironment()\n */\npublic static Environment GLOBAL_ENV;"
            ],
            [
                "LEXICAL_ERROR",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "/*\n\t * Ordinals for various reasons why an Error of this type can be thrown.\n\t */\n/**\n * Lexical error occurred.\n */\npublic static final int LEXICAL_ERROR = 0;"
            ],
            [
                "STATIC_LEXER_ERROR",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "/**\n * An attempt was made to create a second instance of a static token\n * manager.\n */\npublic static final int STATIC_LEXER_ERROR = 1;"
            ],
            [
                "INVALID_LEXICAL_STATE",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "/**\n * Tried to change to an invalid lexical state.\n */\npublic static final int INVALID_LEXICAL_STATE = 2;"
            ],
            [
                "LOOP_DETECTED",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "/**\n * Detected (and bailed out of) an infinite loop in the token manager.\n */\npublic static final int LOOP_DETECTED = 3;"
            ],
            [
                "staticFlag",
                "org.graphstream.util.parser",
                "SimpleCharStream",
                "/**\n * Whether parser is static.\n */\npublic static final boolean staticFlag = false;"
            ],
            [
                "ABBREVIATED_WEEKDAY_NAME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent ABBREVIATED_WEEKDAY_NAME = new NotImplementedComponent(\"%a\", \"\\\\w+[.]\");"
            ],
            [
                "FULL_WEEKDAY_NAME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent FULL_WEEKDAY_NAME = new NotImplementedComponent(\"%A\", \"\\\\w+\");"
            ],
            [
                "ABBREVIATED_MONTH_NAME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent ABBREVIATED_MONTH_NAME = new NotImplementedComponent(\"%b\", \"\\\\w+[.]\");"
            ],
            [
                "FULL_MONTH_NAME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent FULL_MONTH_NAME = new NotImplementedComponent(\"%B\", \"\\\\w+\");"
            ],
            [
                "LOCALE_DATE_AND_TIME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent LOCALE_DATE_AND_TIME = new NotImplementedComponent(\"%c\", null);"
            ],
            [
                "CENTURY",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent CENTURY = new NotImplementedComponent(\"%C\", \"\\\\d\\\\d\");"
            ],
            [
                "DAY_OF_MONTH_2_DIGITS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DAY_OF_MONTH_2_DIGITS = new FieldComponent(\"%d\", \"[012]\\\\d|3[01]\", Calendar.DAY_OF_MONTH, \"%02d\");"
            ],
            [
                "DATE",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DATE = new AliasComponent(\"%D\", \"%m/%d/%y\");"
            ],
            [
                "DAY_OF_MONTH",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DAY_OF_MONTH = new FieldComponent(\"%e\", \"\\\\d|[12]\\\\d|3[01]\", Calendar.DAY_OF_MONTH, \"%2d\");"
            ],
            [
                "DATE_ISO8601",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DATE_ISO8601 = new AliasComponent(\"%F\", \"%Y-%m-%d\");"
            ],
            [
                "WEEK_BASED_YEAR_2_DIGITS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent WEEK_BASED_YEAR_2_DIGITS = new FieldComponent(\"%g\", \"\\\\d\\\\d\", Calendar.YEAR, \"%02d\");"
            ],
            [
                "WEEK_BASED_YEAR_4_DIGITS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent WEEK_BASED_YEAR_4_DIGITS = new FieldComponent(\"%G\", \"\\\\d{4}\", Calendar.YEAR, \"%04d\");"
            ],
            [
                "ABBREVIATED_MONTH_NAME_ALIAS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent ABBREVIATED_MONTH_NAME_ALIAS = new AliasComponent(\"%h\", \"%b\");"
            ],
            [
                "HOUR_OF_DAY",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent HOUR_OF_DAY = new FieldComponent(\"%H\", \"[01]\\\\d|2[0123]\", Calendar.HOUR_OF_DAY, \"%02d\");"
            ],
            [
                "HOUR",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent HOUR = new FieldComponent(\"%I\", \"0\\\\d|1[012]\", Calendar.HOUR, \"%02d\");"
            ],
            [
                "DAY_OF_YEAR",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DAY_OF_YEAR = new FieldComponent(\"%j\", \"[012]\\\\d\\\\d|3[0-5]\\\\d|36[0-6]\", Calendar.DAY_OF_YEAR, \"%03d\");"
            ],
            [
                "MILLISECOND",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent MILLISECOND = new FieldComponent(\"%k\", \"\\\\d{3}\", Calendar.MILLISECOND, \"%03d\");"
            ],
            [
                "EPOCH",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent EPOCH = new EpochComponent();"
            ],
            [
                "MONTH",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent MONTH = new FieldComponent(\"%m\", \"0[1-9]|1[012]\", Calendar.MONTH, -1, \"%02d\");"
            ],
            [
                "MINUTE",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent MINUTE = new FieldComponent(\"%M\", \"[0-5]\\\\d\", Calendar.MINUTE, \"%02d\");"
            ],
            [
                "NEW_LINE",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent NEW_LINE = new AliasComponent(\"%n\", \"\\n\");"
            ],
            [
                "AM_PM",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent AM_PM = new AMPMComponent();"
            ],
            [
                "LOCALE_CLOCK_TIME_12_HOUR",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent LOCALE_CLOCK_TIME_12_HOUR = new NotImplementedComponent(\"%r\", \"\");"
            ],
            [
                "HOUR_AND_MINUTE",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent HOUR_AND_MINUTE = new AliasComponent(\"%R\", \"%H:%M\");"
            ],
            [
                "SECOND",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent SECOND = new FieldComponent(\"%S\", \"[0-5]\\\\d|60\", Calendar.SECOND, \"%02d\");"
            ],
            [
                "TABULATION",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent TABULATION = new AliasComponent(\"%t\", \"\\t\");"
            ],
            [
                "TIME_ISO8601",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent TIME_ISO8601 = new AliasComponent(\"%T\", \"%H:%M:%S\");"
            ],
            [
                "DAY_OF_WEEK_1_7",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DAY_OF_WEEK_1_7 = new FieldComponent(\"%u\", \"[1-7]\", Calendar.DAY_OF_WEEK, -1, \"%1d\");"
            ],
            [
                "WEEK_OF_YEAR_FROM_SUNDAY",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent WEEK_OF_YEAR_FROM_SUNDAY = new FieldComponent(\"%U\", \"[0-4]\\\\d|5[0123]\", Calendar.WEEK_OF_YEAR, 1, \"%2d\");"
            ],
            [
                "WEEK_NUMBER_ISO8601",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent WEEK_NUMBER_ISO8601 = new NotImplementedComponent(\"%V\", \"0[1-9]|[2-4]\\\\d|5[0123]\");"
            ],
            [
                "DAY_OF_WEEK_0_6",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DAY_OF_WEEK_0_6 = new FieldComponent(\"%w\", \"[0-6]\", Calendar.DAY_OF_WEEK, \"%01d\");"
            ],
            [
                "WEEK_OF_YEAR_FROM_MONDAY",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent WEEK_OF_YEAR_FROM_MONDAY = new FieldComponent(\"%W\", \"[0-4]\\\\d|5[0123]\", Calendar.WEEK_OF_YEAR, \"%02d\");"
            ],
            [
                "LOCALE_DATE_REPRESENTATION",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent LOCALE_DATE_REPRESENTATION = new NotImplementedComponent(\"%x\", \"\");"
            ],
            [
                "LOCALE_TIME_REPRESENTATION",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent LOCALE_TIME_REPRESENTATION = new NotImplementedComponent(\"%X\", \"\");"
            ],
            [
                "YEAR_2_DIGITS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent YEAR_2_DIGITS = new FieldComponent(\"%y\", \"\\\\d\\\\d\", Calendar.YEAR, \"%02d\");"
            ],
            [
                "YEAR_4_DIGITS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent YEAR_4_DIGITS = new FieldComponent(\"%Y\", \"\\\\d{4}\", Calendar.YEAR, \"%04d\");"
            ],
            [
                "UTC_OFFSET",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent UTC_OFFSET = new UTCOffsetComponent();"
            ],
            [
                "LOCALE_TIME_ZONE_NAME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent LOCALE_TIME_ZONE_NAME = new NotImplementedComponent(\"%Z\", \"\\\\w*\");"
            ],
            [
                "PERCENT",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent PERCENT = new AliasComponent(\"%%\", \"%\");"
            ],
            [
                "jjbitVec0",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };"
            ],
            [
                "jjnextStates",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "static final int[] jjnextStates = { 5, 6, 8, 9, 13, 14 };"
            ],
            [
                "jjstrLiteralImages",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "/**\n * Token literal values.\n */\npublic static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, \"\\133\", \"\\135\", null, null, null, null, null, null };"
            ],
            [
                "lexStateNames",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "/**\n * Lexer state names.\n */\npublic static final String[] lexStateNames = { \"DEFAULT\" };"
            ],
            [
                "jjtoToken",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "static final long[] jjtoToken = { 0xff01L };"
            ],
            [
                "jjtoSkip",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "static final long[] jjtoSkip = { 0x1eL };"
            ],
            [
                "jjbitVec0",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };"
            ],
            [
                "jjnextStates",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "static final int[] jjnextStates = { 54, 11, 12, 15, 17, 18, 1, 2, 5, 47, 52, 8, 9, 20, 21 };"
            ],
            [
                "jjstrLiteralImages",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "/**\n * Token literal values.\n */\npublic static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, null, \"\\50\", \"\\51\", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null };"
            ],
            [
                "lexStateNames",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "/**\n * Lexer state names.\n */\npublic static final String[] lexStateNames = { \"DEFAULT\" };"
            ],
            [
                "jjtoToken",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "static final long[] jjtoToken = { 0xffffc01L };"
            ],
            [
                "jjtoSkip",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "static final long[] jjtoSkip = { 0x7eL };"
            ],
            [
                "XYZ_ATTR",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "/**\n * Node attribute storing coordinates.\n */\npublic static final String XYZ_ATTR = \"xyz\";"
            ],
            [
                "WIDTH_ATTR",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "/**\n * Graph attribute storing width of the TikZ picture.\n */\npublic static final String WIDTH_ATTR = \"ui.tikz.width\";"
            ],
            [
                "HEIGHT_ATTR",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "/**\n * Graph attribute storing height of the TikZ picture.\n */\npublic static final String HEIGHT_ATTR = \"ui.tikz.height\";"
            ],
            [
                "DEFAULT_WIDTH",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "public static final double DEFAULT_WIDTH = 10;"
            ],
            [
                "DEFAULT_HEIGHT",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "public static final double DEFAULT_HEIGHT = 10;"
            ],
            [
                "DISPLAY_MIN_SIZE_IN_MM",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "/**\n * Define the default minimum size of nodes when using a dynamic size. This\n * size is in millimeter.\n */\npublic static final double DISPLAY_MIN_SIZE_IN_MM = 2;"
            ],
            [
                "DISPLAY_MAX_SIZE_IN_MM",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "/**\n * Define the default maximum size of nodes when using a dynamic size. This\n * size is in millimeter.\n */\npublic static final double DISPLAY_MAX_SIZE_IN_MM = 10;"
            ],
            [
                "jjbitVec0",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };"
            ],
            [
                "jjnextStates",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "static final int[] jjnextStates = { 21, 27, 8, 10, 11, 18, 19, 22, 23, 26, 1, 2, 13, 14 };"
            ],
            [
                "jjstrLiteralImages",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "/**\n * Token literal values.\n */\npublic static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, null, \"\\133\", \"\\135\", \"\\173\", \"\\175\", \"\\72\", \"\\54\", \"\\75\", null, null, null, null, null, null, null, null, null, null, \"\\73\", null, null, null, null, null, null, null, null, null, \"\\137\" };"
            ],
            [
                "lexStateNames",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "/**\n * Lexer state names.\n */\npublic static final String[] lexStateNames = { \"DEFAULT\" };"
            ],
            [
                "jjtoToken",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "static final long[] jjtoToken = { 0x3ffffffc01L };"
            ],
            [
                "jjtoSkip",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "static final long[] jjtoSkip = { 0x7eL };"
            ],
            [
                "jjbitVec0",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };"
            ],
            [
                "jjnextStates",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "static final int[] jjnextStates = { 21, 22, 23, 17, 19, 2, 3, 5, 6, 8, 9 };"
            ],
            [
                "jjstrLiteralImages",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "/**\n * Token literal values.\n */\npublic static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null };"
            ],
            [
                "lexStateNames",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "/**\n * Lexer state names.\n */\npublic static final String[] lexStateNames = { \"DEFAULT\" };"
            ],
            [
                "jjtoToken",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "static final long[] jjtoToken = { 0x3fffffffffffc9L };"
            ],
            [
                "jjtoSkip",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "static final long[] jjtoSkip = { 0x6L };"
            ],
            [
                "XMLNS",
                "org.graphstream.stream.file.gexf",
                "GEXF",
                "public static final String XMLNS = \"http://www.gexf.net/1.2draft\";"
            ],
            [
                "XMLNS_XSI",
                "org.graphstream.stream.file.gexf",
                "GEXF",
                "public static final String XMLNS_XSI = \"http://www.w3.org/2001/XMLSchema-instance\";"
            ],
            [
                "XMLNS_SL",
                "org.graphstream.stream.file.gexf",
                "GEXF",
                "public static final String XMLNS_SL = \"http://www.gexf.net/1.2draft http://www.gexf.net/1.2draft/gexf.xsd\";"
            ],
            [
                "XMLNS_VIZ",
                "org.graphstream.stream.file.gexf",
                "GEXF",
                "public static final String XMLNS_VIZ = \"http://www.gexf.net/1.2draft/viz\";"
            ],
            [
                "VERSION",
                "org.graphstream.stream.file.gexf",
                "GEXF",
                "public static final String VERSION = \"1.2\";"
            ],
            [
                "BUFFER_SIZE",
                "org.graphstream.stream.file.dgs",
                "DGSParser",
                "protected static final int BUFFER_SIZE = 4096;"
            ],
            [
                "ARRAY_OPEN",
                "org.graphstream.stream.file.dgs",
                "DGSParser",
                "public static final int ARRAY_OPEN = '{';"
            ],
            [
                "ARRAY_CLOSE",
                "org.graphstream.stream.file.dgs",
                "DGSParser",
                "public static final int ARRAY_CLOSE = '}';"
            ],
            [
                "MAP_OPEN",
                "org.graphstream.stream.file.dgs",
                "DGSParser",
                "public static final int MAP_OPEN = '[';"
            ],
            [
                "MAP_CLOSE",
                "org.graphstream.stream.file.dgs",
                "DGSParser",
                "public static final int MAP_CLOSE = ']';"
            ],
            [
                "gradientId",
                "org.graphstream.stream.file",
                "FileSinkSVG2",
                "static int gradientId = 0;"
            ],
            [
                "gradientId",
                "org.graphstream.stream.file",
                "SVGStyle",
                "static int gradientId = 0;"
            ],
            [
                "TIME_PREFIX",
                "org.graphstream.stream",
                "Timeline",
                "public static final String TIME_PREFIX = \"time\";"
            ],
            [
                "SYNC_DISABLE_KEY",
                "org.graphstream.stream.sync",
                "SinkTime",
                "/**\n * Key used to disable synchro. Just run : java -DSYNC_DISABLE_KEY ...\n */\npublic static final String SYNC_DISABLE_KEY = \"org.graphstream.stream.sync.disable\";"
            ],
            [
                "disableSync",
                "org.graphstream.stream.sync",
                "SinkTime",
                "/**\n * Flag used to disable sync.\n */\nprotected static final boolean disableSync;"
            ],
            [
                "LIGHT_YELLOW",
                "org.graphstream.stream.netstream",
                "NetStreamReceiver",
                "protected static final String LIGHT_YELLOW = \"\u001b[33;1m\";"
            ],
            [
                "RESET",
                "org.graphstream.stream.netstream",
                "NetStreamReceiver",
                "protected static final String RESET = \"\u001b[0m\";"
            ],
            [
                "BUFFER_INITIAL_SIZE",
                "org.graphstream.stream.netstream",
                "NetStreamReceiver",
                "// Attributes\n// 65535, 4096\nprotected static final int BUFFER_INITIAL_SIZE = 8192;"
            ],
            [
                "BUFFER_INITIAL_SIZE",
                "org.graphstream.stream.netstream",
                "IncomingBuffer",
                "// Attributes\n// 65535, 4096\nprotected static final int BUFFER_INITIAL_SIZE = 8192;"
            ],
            [
                "EVENT_GETVERSION",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by an 32-bit signed integer for this protocol version. Certainly\n * useless.\n */\npublic static int EVENT_GETVERSION = 0x00;"
            ],
            [
                "EVENT_START",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Not used.\n */\npublic static int EVENT_START = 0x01;"
            ],
            [
                "EVENT_END",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Constant indicating that the client has disconnected.\n */\npublic static int EVENT_END = 0x02;"
            ],
            [
                "EVENT_ADD_NODE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "//\n// ----------------------------------\n// GraphStream's graph events\n// ----------------------------------\n//\n/**\n * Followed by a node id (TYPE_STRING format)\n */\npublic static int EVENT_ADD_NODE = 0x10;"
            ],
            [
                "EVENT_DEL_NODE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by a node id (TYPE_STRING format)\n */\npublic static int EVENT_DEL_NODE = 0x11;"
            ],
            [
                "EVENT_ADD_EDGE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - an edge id (TYPE_STRING format), - an source node id\n * (TYPE_STRING format), - a target node id (TYPE_STRING format - a boolean\n * indicating if directed (TYPE_BOOLEAN format)\n */\npublic static int EVENT_ADD_EDGE = 0x12;"
            ],
            [
                "EVENT_DEL_EDGE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by an edge id (TYPE_STRING format)\n */\npublic static int EVENT_DEL_EDGE = 0x13;"
            ],
            [
                "EVENT_STEP",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by double (TYPE_DOUBLE format)\n */\npublic static int EVENT_STEP = 0x14;"
            ],
            [
                "EVENT_CLEARED",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n */\npublic static int EVENT_CLEARED = 0x15;"
            ],
            [
                "EVENT_ADD_GRAPH_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - an attribute id (TYPE_STRING format) - the attribute TYPE -\n * the attribute value\n */\npublic static int EVENT_ADD_GRAPH_ATTR = 0x16;"
            ],
            [
                "EVENT_CHG_GRAPH_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - an attribute id (TYPE_STRING format) - the attribute TYPE -\n * the attribute old value - the attribute new value\n */\npublic static int EVENT_CHG_GRAPH_ATTR = 0x17;"
            ],
            [
                "EVENT_DEL_GRAPH_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - the attribute id (TYPE_STRING format)\n */\npublic static int EVENT_DEL_GRAPH_ATTR = 0x18;"
            ],
            [
                "EVENT_ADD_NODE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - an attribute id (TYPE_STRING format) - the attribute TYPE -\n * the attribute value\n */\npublic static int EVENT_ADD_NODE_ATTR = 0x19;"
            ],
            [
                "EVENT_CHG_NODE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - an attribute id (TYPE_STRING format) - the attribute TYPE -\n * the attribute old value - the attribute new value\n */\npublic static int EVENT_CHG_NODE_ATTR = 0x1a;"
            ],
            [
                "EVENT_DEL_NODE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - the node id (TYPE_STRING format) - the attribute id\n * (TYPE_STRING format)\n */\npublic static int EVENT_DEL_NODE_ATTR = 0x1b;"
            ],
            [
                "EVENT_ADD_EDGE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - an attribute id (TYPE_STRING format) - the attribute TYPE -\n * the attribute value\n */\npublic static int EVENT_ADD_EDGE_ATTR = 0x1c;"
            ],
            [
                "EVENT_CHG_EDGE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - an attribute id (TYPE_STRING format) - the attribute TYPE -\n * the attribute old value - the attribute new value\n */\npublic static int EVENT_CHG_EDGE_ATTR = 0x1d;"
            ],
            [
                "EVENT_DEL_EDGE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - the edge id (TYPE_STRING format) - the attribute id\n * (TYPE_STRING format)\n */\npublic static int EVENT_DEL_EDGE_ATTR = 0x1e;"
            ],
            [
                "TYPE_UNKNOWN",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "// Values types\npublic static int TYPE_UNKNOWN = 0x00;"
            ],
            [
                "TYPE_BOOLEAN",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by a byte who's value is 0 or 1\n */\npublic static int TYPE_BOOLEAN = 0x50;"
            ],
            [
                "TYPE_BOOLEAN_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * An array of booleans. Followed by first, a 16-bits integer for the number\n * of booleans and then, a list of bytes who's value is 0 or 1\n */\npublic static int TYPE_BOOLEAN_ARRAY = 0x51;"
            ],
            [
                "TYPE_BYTE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by a signed byte [-127,127]\n */\npublic static int TYPE_BYTE = 0x52;"
            ],
            [
                "TYPE_BYTE_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * An array of bytes. Followed by first, a 16-bits integer for the number of\n * integers and then, a list of signed bytes.\n */\npublic static int TYPE_BYTE_ARRAY = 0x53;"
            ],
            [
                "TYPE_SHORT",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by an 16-bit signed integer (a short)\n */\npublic static int TYPE_SHORT = 0x54;"
            ],
            [
                "TYPE_SHORT_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * An array of shorts. Followed by first, a 16-bits integer for the number\n * of integers and then, a list of 16-bit signed shorts\n */\npublic static int TYPE_SHORT_ARRAY = 0x55;"
            ],
            [
                "TYPE_INT",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by an 32-bit signed integer\n */\npublic static int TYPE_INT = 0x56;"
            ],
            [
                "TYPE_INT_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * An array of integers. Followed by first, a 16-bits integer for the number\n * of integers and then, a list of 32-bit signed integers\n */\npublic static int TYPE_INT_ARRAY = 0x57;"
            ],
            [
                "TYPE_LONG",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by an 64-bit signed integer\n */\npublic static int TYPE_LONG = 0x58;"
            ],
            [
                "TYPE_LONG_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * An array of longs. Followed by first, a 16-bits integer for the number of\n * longs and then, a list of 62-bit signed integers\n */\npublic static int TYPE_LONG_ARRAY = 0x59;"
            ],
            [
                "TYPE_FLOAT",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by a single precision 32-bits floating point number\n */\npublic static int TYPE_FLOAT = 0x5a;"
            ],
            [
                "TYPE_FLOAT_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Array of double. Followed by first, a 16-bits integer for the number of\n * floats and then, a list of 32-bit floats\n */\npublic static int TYPE_FLOAT_ARRAY = 0x5b;"
            ],
            [
                "TYPE_DOUBLE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by a double precision 64-bits floating point number\n */\npublic static int TYPE_DOUBLE = 0x5c;"
            ],
            [
                "TYPE_DOUBLE_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Array of double. Followed by first, a 16-bits integer for the number of\n * doubles and then, a list of 64-bit doubles\n */\npublic static int TYPE_DOUBLE_ARRAY = 0x5d;"
            ],
            [
                "TYPE_STRING",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Array of characters. Followed by first, a 16-bits integer for the size in\n * bytes (not in number of characters) of the string, then by the unicode\n * string\n */\npublic static int TYPE_STRING = 0x5e;"
            ],
            [
                "TYPE_RAW",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Raw data, good for serialization. Followed by first, a 16-bits integer\n * indicating the length in bytes of the dataset, and then the data itself.\n */\npublic static int TYPE_RAW = 0x5f;"
            ],
            [
                "TYPE_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * An type-unspecified array. Followed by first, a 16-bits integer\n * indicating the number of elements, and then, the elements themselves. The\n * elements themselves have to give their type.\n */\npublic static byte TYPE_ARRAY = 0x60;"
            ],
            [
                "TYPE_NULL",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_NULL = 0x61;"
            ],
            [
                "COMMAND",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n *  Constant that indicates that this message is a COMMAND, not and EVENT.\n *\n *  For now it is followed by a string that has to be parssed at the application level.\n *\n *  THIS IS EXPERIMENTAL AND MAY (WILL) CHANGE !\n */\npublic static int COMMAND = 0x70;"
            ],
            [
                "NO_OPTIONS",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/* ********  P U B L I C   F I E L D S  ******** */\n/**\n * No options specified. Value is zero.\n */\npublic final static int NO_OPTIONS = 0;"
            ],
            [
                "ENCODE",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Specify encoding in first bit. Value is one.\n */\npublic final static int ENCODE = 1;"
            ],
            [
                "DECODE",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Specify decoding in first bit. Value is zero.\n */\npublic final static int DECODE = 0;"
            ],
            [
                "GZIP",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Specify that data should be gzip-compressed in second bit. Value is two.\n */\npublic final static int GZIP = 2;"
            ],
            [
                "DONT_GUNZIP",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Specify that gzipped data should <em>not</em> be automatically gunzipped.\n */\npublic final static int DONT_GUNZIP = 4;"
            ],
            [
                "DO_BREAK_LINES",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Do break lines when encoding. Value is 8.\n */\npublic final static int DO_BREAK_LINES = 8;"
            ],
            [
                "URL_SAFE",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Encode using Base64-like encoding that is URL- and Filename-safe as described\n * in Section 4 of RFC3548:\n * <a href=\"http://www.faqs.org/rfcs/rfc3548.html\">http://www.faqs.org/rfcs/rfc3548.html</a>.\n * It is important to note that data encoded this way is <em>not</em> officially valid Base64,\n * or at the very least should not be called Base64 without also specifying that is\n * was encoded using the URL- and Filename-safe dialect.\n */\npublic final static int URL_SAFE = 16;"
            ],
            [
                "ORDERED",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Encode using the special \"ordered\" dialect of Base64 described here:\n * <a href=\"http://www.faqs.org/qa/rfcc-1940.html\">http://www.faqs.org/qa/rfcc-1940.html</a>.\n */\npublic final static int ORDERED = 32;"
            ],
            [
                "INITIAL_EDGE_CAPACITY",
                "org.graphstream.graph.implementations",
                "AdjacencyListNode",
                "protected static final int INITIAL_EDGE_CAPACITY;"
            ],
            [
                "GROWTH_FACTOR",
                "org.graphstream.graph.implementations",
                "AdjacencyListNode",
                "protected static final double GROWTH_FACTOR = 1.1;"
            ],
            [
                "I_EDGE",
                "org.graphstream.graph.implementations",
                "AdjacencyListNode",
                "protected static final char I_EDGE = 0;"
            ],
            [
                "IO_EDGE",
                "org.graphstream.graph.implementations",
                "AdjacencyListNode",
                "protected static final char IO_EDGE = 1;"
            ],
            [
                "O_EDGE",
                "org.graphstream.graph.implementations",
                "AdjacencyListNode",
                "protected static final char O_EDGE = 2;"
            ],
            [
                "GROW_FACTOR",
                "org.graphstream.graph.implementations",
                "AdjacencyListGraph",
                "public static final double GROW_FACTOR = 1.1;"
            ],
            [
                "DEFAULT_NODE_CAPACITY",
                "org.graphstream.graph.implementations",
                "AdjacencyListGraph",
                "public static final int DEFAULT_NODE_CAPACITY = 128;"
            ],
            [
                "DEFAULT_EDGE_CAPACITY",
                "org.graphstream.graph.implementations",
                "AdjacencyListGraph",
                "public static final int DEFAULT_EDGE_CAPACITY = 1024;"
            ]
        ],
        "tokensMethodJavadocValues": [],
        "tokensMethodArguments": [
            [
                "box",
                "org.graphstream.ui.layout.springbox.implementations",
                "LinLog"
            ],
            [
                "id",
                "java.lang",
                "String"
            ],
            [
                "x",
                "",
                "double"
            ],
            [
                "y",
                "",
                "double"
            ],
            [
                "z",
                "",
                "double"
            ]
        ],
        "tokensMethodVariablesNonPrivateNonStaticNonVoidMethods": [
            [
                "intersection",
                "org.graphstream.ui.layout.springbox.implementations",
                "LinLogNodeParticle",
                "protected boolean intersection(Cell cell) {\n    LinLog box = (LinLog) this.box;\n    double k = box.k;\n    double vz = box.getViewZone();\n    double x1 = cell.getSpace().getLoAnchor().x;\n    double y1 = cell.getSpace().getLoAnchor().y;\n    double z1 = cell.getSpace().getLoAnchor().z;\n    double x2 = cell.getSpace().getHiAnchor().x;\n    double y2 = cell.getSpace().getHiAnchor().y;\n    double z2 = cell.getSpace().getHiAnchor().z;\n    double X1 = pos.x - (k * vz);\n    double Y1 = pos.y - (k * vz);\n    double Z1 = pos.z - (k * vz);\n    double X2 = pos.x + (k * vz);\n    double Y2 = pos.y + (k * vz);\n    double Z2 = pos.z + (k * vz);\n    if (X2 < x1 || X1 > x2)\n        return false;\n    if (Y2 < y1 || Y1 > y2)\n        return false;\n    if (Z2 < z1 || Z1 > z2)\n        return false;\n    return true;\n}"
            ],
            [
                "toString",
                "java.lang",
                "Object",
                "public String toString()"
            ],
            [
                "equals",
                "java.lang",
                "Object",
                "public boolean equals(Object arg0)"
            ],
            [
                "closeTo",
                "org.miv.pherd",
                "Particle",
                "public boolean closeTo(Particle arg0, double arg1)"
            ],
            [
                "getEdges",
                "org.graphstream.ui.layout.springbox",
                "NodeParticle",
                "public Collection<EdgeSpring> getEdges()"
            ],
            [
                "getClass",
                "java.lang",
                "Object",
                "public final native Class<? extends Object> getClass()"
            ],
            [
                "getCell",
                "org.miv.pherd",
                "Particle",
                "public Cell getCell()"
            ],
            [
                "getAttribute",
                "org.miv.pherd",
                "Particle",
                "public Object getAttribute(String arg0)"
            ],
            [
                "getAttributeKeyIterator",
                "org.miv.pherd",
                "Particle",
                "public Iterator<String> getAttributeKeyIterator()"
            ],
            [
                "getWeight",
                "org.miv.pherd",
                "Particle",
                "public double getWeight()"
            ],
            [
                "clone",
                "java.lang",
                "Object",
                "protected native Object clone() throws CloneNotSupportedException"
            ],
            [
                "hashCode",
                "java.lang",
                "Object",
                "public native int hashCode()"
            ],
            [
                "closeTo",
                "org.miv.pherd",
                "Particle",
                "public boolean closeTo(Particle arg0)"
            ],
            [
                "getPosition",
                "org.miv.pherd",
                "Particle",
                "public Point3 getPosition()"
            ],
            [
                "getId",
                "org.miv.pherd",
                "Particle",
                "public Object getId()"
            ],
            [
                "newNodeParticle",
                "org.graphstream.ui.layout.springbox.implementations",
                "LinLog",
                "public NodeParticle newNodeParticle(String arg0)"
            ],
            [
                "getLayoutAlgorithmName",
                "org.graphstream.ui.layout.springbox.implementations",
                "LinLog",
                "public String getLayoutAlgorithmName()"
            ],
            [
                "getQuality",
                "org.graphstream.ui.layout.springbox",
                "BarnesHutLayout",
                "public double getQuality()"
            ],
            [
                "getLowPoint",
                "org.graphstream.ui.layout.springbox",
                "BarnesHutLayout",
                "public Point3 getLowPoint()"
            ],
            [
                "newNodeParticle",
                "org.graphstream.ui.layout.springbox",
                "BarnesHutLayout",
                "public abstract NodeParticle newNodeParticle(String arg0)"
            ],
            [
                "getSpatialIndex",
                "org.graphstream.ui.layout.springbox",
                "BarnesHutLayout",
                "public ParticleBox getSpatialIndex()"
            ],
            [
                "getNodeMovedCount",
                "org.graphstream.ui.layout.springbox",
                "BarnesHutLayout",
                "public int getNodeMovedCount()"
            ],
            [
                "randomXInsideBounds",
                "org.graphstream.ui.layout.springbox",
                "BarnesHutLayout",
                "public double randomXInsideBounds()"
            ],
            [
                "getGravityFactor",
                "org.graphstream.ui.layout.springbox",
                "BarnesHutLayout",
                "public double getGravityFactor()"
            ],
            [
                "getSteps",
                "org.graphstream.ui.layout.springbox",
                "BarnesHutLayout",
                "public int getSteps()"
            ],
            [
                "getForce",
                "org.graphstream.ui.layout.springbox",
                "BarnesHutLayout",
                "public double getForce()"
            ],
            [
                "addNode",
                "org.graphstream.ui.layout.springbox",
                "BarnesHutLayout",
                "protected NodeParticle addNode(String arg0, String arg1)"
            ],
            [
                "getStabilizationLimit",
                "org.graphstream.ui.layout.springbox",
                "BarnesHutLayout",
                "public double getStabilizationLimit()"
            ],
            [
                "is3D",
                "org.graphstream.ui.layout.springbox",
                "BarnesHutLayout",
                "public boolean is3D()"
            ],
            [
                "getEnergies",
                "org.graphstream.ui.layout.springbox",
                "BarnesHutLayout",
                "public Energies getEnergies()"
            ],
            [
                "randomZInsideBounds",
                "org.graphstream.ui.layout.springbox",
                "BarnesHutLayout",
                "public double randomZInsideBounds()"
            ],
            [
                "getCenterPoint",
                "org.graphstream.ui.layout.springbox",
                "BarnesHutLayout",
                "public Point3 getCenterPoint()"
            ],
            [
                "getRandom",
                "org.graphstream.ui.layout.springbox",
                "BarnesHutLayout",
                "public Random getRandom()"
            ],
            [
                "getBarnesHutTheta",
                "org.graphstream.ui.layout.springbox",
                "BarnesHutLayout",
                "public double getBarnesHutTheta()"
            ],
            [
                "getLayoutAlgorithmName",
                "org.graphstream.ui.layout.springbox",
                "BarnesHutLayout",
                "public abstract String getLayoutAlgorithmName()"
            ],
            [
                "randomYInsideBounds",
                "org.graphstream.ui.layout.springbox",
                "BarnesHutLayout",
                "public double randomYInsideBounds()"
            ],
            [
                "getHiPoint",
                "org.graphstream.ui.layout.springbox",
                "BarnesHutLayout",
                "public Point3 getHiPoint()"
            ],
            [
                "getLastStepTime",
                "org.graphstream.ui.layout.springbox",
                "BarnesHutLayout",
                "public long getLastStepTime()"
            ],
            [
                "getStabilization",
                "org.graphstream.ui.layout.springbox",
                "BarnesHutLayout",
                "public double getStabilization()"
            ],
            [
                "getViewZone",
                "org.graphstream.ui.layout.springbox",
                "BarnesHutLayout",
                "public double getViewZone()"
            ],
            [
                "elementSinks",
                "org.graphstream.stream",
                "SourceBase",
                "public Iterable<ElementSink> elementSinks()"
            ],
            [
                "attributeSinks",
                "org.graphstream.stream",
                "SourceBase",
                "public Iterable<AttributeSink> attributeSinks()"
            ],
            [
                "getQuality",
                "org.graphstream.ui.layout",
                "Layout",
                "public abstract double getQuality()"
            ],
            [
                "getStabilization",
                "org.graphstream.ui.layout",
                "Layout",
                "public abstract double getStabilization()"
            ],
            [
                "getForce",
                "org.graphstream.ui.layout",
                "Layout",
                "public abstract double getForce()"
            ],
            [
                "getLayoutAlgorithmName",
                "org.graphstream.ui.layout",
                "Layout",
                "public abstract String getLayoutAlgorithmName()"
            ],
            [
                "getStabilizationLimit",
                "org.graphstream.ui.layout",
                "Layout",
                "public abstract double getStabilizationLimit()"
            ],
            [
                "getLastStepTime",
                "org.graphstream.ui.layout",
                "Layout",
                "public abstract long getLastStepTime()"
            ],
            [
                "getNodeMovedCount",
                "org.graphstream.ui.layout",
                "Layout",
                "public abstract int getNodeMovedCount()"
            ],
            [
                "getLowPoint",
                "org.graphstream.ui.layout",
                "Layout",
                "public abstract Point3 getLowPoint()"
            ],
            [
                "getSteps",
                "org.graphstream.ui.layout",
                "Layout",
                "public abstract int getSteps()"
            ],
            [
                "getHiPoint",
                "org.graphstream.ui.layout",
                "Layout",
                "public abstract Point3 getHiPoint()"
            ],
            [
                "length",
                "java.lang",
                "String",
                "public int length()"
            ],
            [
                "codePoints",
                "java.lang",
                "String",
                "public IntStream codePoints()"
            ],
            [
                "intern",
                "java.lang",
                "String",
                "public native String intern()"
            ],
            [
                "regionMatches",
                "java.lang",
                "String",
                "public boolean regionMatches(int arg0, String arg1, int arg2, int arg3)"
            ],
            [
                "toString",
                "java.lang",
                "String",
                "public String toString()"
            ],
            [
                "codePointCount",
                "java.lang",
                "String",
                "public int codePointCount(int arg0, int arg1)"
            ],
            [
                "regionMatches",
                "java.lang",
                "String",
                "public boolean regionMatches(boolean arg0, int arg1, String arg2, int arg3, int arg4)"
            ],
            [
                "substring",
                "java.lang",
                "String",
                "public String substring(int arg0, int arg1)"
            ],
            [
                "codePointAt",
                "java.lang",
                "String",
                "public int codePointAt(int arg0)"
            ],
            [
                "getBytes",
                "java.lang",
                "String",
                "public byte[] getBytes()"
            ],
            [
                "offsetByCodePoints",
                "java.lang",
                "String",
                "public int offsetByCodePoints(int arg0, int arg1)"
            ],
            [
                "subSequence",
                "java.lang",
                "String",
                "public CharSequence subSequence(int arg0, int arg1)"
            ],
            [
                "concat",
                "java.lang",
                "String",
                "public String concat(String arg0)"
            ],
            [
                "getBytes",
                "java.lang",
                "String",
                "public byte[] getBytes(String arg0) throws UnsupportedEncodingException"
            ],
            [
                "stripLeading",
                "java.lang",
                "String",
                "public String stripLeading()"
            ],
            [
                "indexOf",
                "java.lang",
                "String",
                "public int indexOf(int arg0, int arg1)"
            ],
            [
                "coder",
                "java.lang",
                "String",
                "byte coder()"
            ],
            [
                "startsWith",
                "java.lang",
                "String",
                "public boolean startsWith(String arg0, int arg1)"
            ],
            [
                "replace",
                "java.lang",
                "String",
                "public String replace(char arg0, char arg1)"
            ],
            [
                "replaceFirst",
                "java.lang",
                "String",
                "public String replaceFirst(String arg0, String arg1)"
            ],
            [
                "value",
                "java.lang",
                "String",
                "byte[] value()"
            ],
            [
                "compareTo",
                "java.lang",
                "String",
                "public int compareTo(String arg0)"
            ],
            [
                "indexOf",
                "java.lang",
                "String",
                "public int indexOf(int arg0)"
            ],
            [
                "repeat",
                "java.lang",
                "String",
                "public String repeat(int arg0)"
            ],
            [
                "toLowerCase",
                "java.lang",
                "String",
                "public String toLowerCase(Locale arg0)"
            ],
            [
                "equalsIgnoreCase",
                "java.lang",
                "String",
                "public boolean equalsIgnoreCase(String arg0)"
            ],
            [
                "lastIndexOf",
                "java.lang",
                "String",
                "public int lastIndexOf(String arg0)"
            ],
            [
                "toLowerCase",
                "java.lang",
                "String",
                "public String toLowerCase()"
            ],
            [
                "lastIndexOf",
                "java.lang",
                "String",
                "public int lastIndexOf(int arg0)"
            ],
            [
                "toCharArray",
                "java.lang",
                "String",
                "public char[] toCharArray()"
            ],
            [
                "isLatin1",
                "java.lang",
                "String",
                "boolean isLatin1()"
            ],
            [
                "replace",
                "java.lang",
                "String",
                "public String replace(CharSequence arg0, CharSequence arg1)"
            ],
            [
                "equals",
                "java.lang",
                "String",
                "public boolean equals(Object arg0)"
            ],
            [
                "resolveConstantDesc",
                "java.lang",
                "String",
                "public String resolveConstantDesc(MethodHandles.Lookup arg0)"
            ],
            [
                "replaceAll",
                "java.lang",
                "String",
                "public String replaceAll(String arg0, String arg1)"
            ],
            [
                "matches",
                "java.lang",
                "String",
                "public boolean matches(String arg0)"
            ],
            [
                "contentEquals",
                "java.lang",
                "String",
                "public boolean contentEquals(StringBuffer arg0)"
            ],
            [
                "describeConstable",
                "java.lang",
                "String",
                "public Optional<String> describeConstable()"
            ],
            [
                "substring",
                "java.lang",
                "String",
                "public String substring(int arg0)"
            ],
            [
                "toUpperCase",
                "java.lang",
                "String",
                "public String toUpperCase(Locale arg0)"
            ],
            [
                "strip",
                "java.lang",
                "String",
                "public String strip()"
            ],
            [
                "lastIndexOf",
                "java.lang",
                "String",
                "public int lastIndexOf(String arg0, int arg1)"
            ],
            [
                "isEmpty",
                "java.lang",
                "String",
                "public boolean isEmpty()"
            ],
            [
                "contentEquals",
                "java.lang",
                "String",
                "public boolean contentEquals(CharSequence arg0)"
            ],
            [
                "chars",
                "java.lang",
                "String",
                "public IntStream chars()"
            ],
            [
                "toUpperCase",
                "java.lang",
                "String",
                "public String toUpperCase()"
            ],
            [
                "indexOf",
                "java.lang",
                "String",
                "public int indexOf(String arg0)"
            ],
            [
                "endsWith",
                "java.lang",
                "String",
                "public boolean endsWith(String arg0)"
            ],
            [
                "startsWith",
                "java.lang",
                "String",
                "public boolean startsWith(String arg0)"
            ],
            [
                "isBlank",
                "java.lang",
                "String",
                "public boolean isBlank()"
            ],
            [
                "split",
                "java.lang",
                "String",
                "public String[] split(String arg0)"
            ],
            [
                "contains",
                "java.lang",
                "String",
                "public boolean contains(CharSequence arg0)"
            ],
            [
                "indent",
                "java.lang",
                "String",
                "public String indent(int arg0)"
            ],
            [
                "translateEscapes",
                "java.lang",
                "String",
                "public String translateEscapes()"
            ],
            [
                "getBytes",
                "java.lang",
                "String",
                "public byte[] getBytes(Charset arg0)"
            ],
            [
                "split",
                "java.lang",
                "String",
                "public String[] split(String arg0, int arg1)"
            ],
            [
                "hashCode",
                "java.lang",
                "String",
                "public int hashCode()"
            ],
            [
                "lines",
                "java.lang",
                "String",
                "public Stream<String> lines()"
            ],
            [
                "codePointBefore",
                "java.lang",
                "String",
                "public int codePointBefore(int arg0)"
            ],
            [
                "indexOf",
                "java.lang",
                "String",
                "public int indexOf(String arg0, int arg1)"
            ],
            [
                "charAt",
                "java.lang",
                "String",
                "public char charAt(int arg0)"
            ],
            [
                "formatted",
                "java.lang",
                "String",
                "public String formatted(Object[] arg0)"
            ],
            [
                "transform",
                "java.lang",
                "String",
                "public <R> R transform(Function<? super String, ? extends R> arg0)"
            ],
            [
                "trim",
                "java.lang",
                "String",
                "public String trim()"
            ],
            [
                "stripIndent",
                "java.lang",
                "String",
                "public String stripIndent()"
            ],
            [
                "compareToIgnoreCase",
                "java.lang",
                "String",
                "public int compareToIgnoreCase(String arg0)"
            ],
            [
                "stripTrailing",
                "java.lang",
                "String",
                "public String stripTrailing()"
            ],
            [
                "lastIndexOf",
                "java.lang",
                "String",
                "public int lastIndexOf(int arg0, int arg1)"
            ],
            [
                "compareTo",
                "java.lang",
                "Comparable",
                "public abstract int compareTo(T arg0)"
            ],
            [
                "codePoints",
                "java.lang",
                "CharSequence",
                "public default IntStream codePoints()"
            ],
            [
                "charAt",
                "java.lang",
                "CharSequence",
                "public abstract char charAt(int arg0)"
            ],
            [
                "isEmpty",
                "java.lang",
                "CharSequence",
                "public default boolean isEmpty()"
            ],
            [
                "subSequence",
                "java.lang",
                "CharSequence",
                "public abstract CharSequence subSequence(int arg0, int arg1)"
            ],
            [
                "length",
                "java.lang",
                "CharSequence",
                "public abstract int length()"
            ],
            [
                "chars",
                "java.lang",
                "CharSequence",
                "public default IntStream chars()"
            ],
            [
                "toString",
                "java.lang",
                "CharSequence",
                "public abstract String toString()"
            ],
            [
                "describeConstable",
                "java.lang.constant",
                "Constable",
                "public abstract Optional<? extends ConstantDesc> describeConstable()"
            ],
            [
                "resolveConstantDesc",
                "java.lang.constant",
                "ConstantDesc",
                "public abstract Object resolveConstantDesc(MethodHandles.Lookup arg0) throws ReflectiveOperationException"
            ]
        ],
        "tokensMethodVariablesNonPrivateNonStaticAttributes": [
            [
                "neighbours",
                "org.graphstream.ui.layout.springbox",
                "NodeParticle",
                "public ArrayList<EdgeSpring> neighbours;"
            ],
            [
                "frozen",
                "org.graphstream.ui.layout.springbox",
                "NodeParticle",
                "public boolean frozen;"
            ],
            [
                "disp",
                "org.graphstream.ui.layout.springbox",
                "NodeParticle",
                "public Vector3 disp;"
            ],
            [
                "len",
                "org.graphstream.ui.layout.springbox",
                "NodeParticle",
                "public double len;"
            ],
            [
                "attE",
                "org.graphstream.ui.layout.springbox",
                "NodeParticle",
                "public double attE;"
            ],
            [
                "repE",
                "org.graphstream.ui.layout.springbox",
                "NodeParticle",
                "public double repE;"
            ],
            [
                "out",
                "org.graphstream.ui.layout.springbox",
                "NodeParticle",
                "public PrintStream out;"
            ],
            [
                "box",
                "org.graphstream.ui.layout.springbox",
                "NodeParticle",
                "protected BarnesHutLayout box;"
            ],
            [
                "id",
                "org.miv.pherd",
                "Particle",
                "protected Object id;"
            ],
            [
                "pos",
                "org.miv.pherd",
                "Particle",
                "protected Point3 pos;"
            ],
            [
                "nextPos",
                "org.miv.pherd",
                "Particle",
                "protected Point3 nextPos;"
            ],
            [
                "weight",
                "org.miv.pherd",
                "Particle",
                "protected double weight;"
            ],
            [
                "cell",
                "org.miv.pherd",
                "Particle",
                "protected Cell cell;"
            ],
            [
                "box",
                "org.miv.pherd",
                "Particle",
                "protected ParticleBox box;"
            ],
            [
                "attributes",
                "org.miv.pherd",
                "Particle",
                "protected HashMap<String, Object> attributes;"
            ],
            [
                "moved",
                "org.miv.pherd",
                "Particle",
                "protected boolean moved;"
            ],
            [
                "k",
                "org.graphstream.ui.layout.springbox.implementations",
                "LinLog",
                "protected double k;"
            ],
            [
                "aFactor",
                "org.graphstream.ui.layout.springbox.implementations",
                "LinLog",
                "protected double aFactor;"
            ],
            [
                "rFactor",
                "org.graphstream.ui.layout.springbox.implementations",
                "LinLog",
                "protected double rFactor;"
            ],
            [
                "edgeBased",
                "org.graphstream.ui.layout.springbox.implementations",
                "LinLog",
                "protected boolean edgeBased;"
            ],
            [
                "maxR",
                "org.graphstream.ui.layout.springbox.implementations",
                "LinLog",
                "protected double maxR;"
            ],
            [
                "a",
                "org.graphstream.ui.layout.springbox.implementations",
                "LinLog",
                "protected double a;"
            ],
            [
                "r",
                "org.graphstream.ui.layout.springbox.implementations",
                "LinLog",
                "protected double r;"
            ],
            [
                "nodes",
                "org.graphstream.ui.layout.springbox",
                "BarnesHutLayout",
                "protected ParticleBox nodes;"
            ],
            [
                "edges",
                "org.graphstream.ui.layout.springbox",
                "BarnesHutLayout",
                "protected HashMap<String, EdgeSpring> edges;"
            ],
            [
                "lastElementCount",
                "org.graphstream.ui.layout.springbox",
                "BarnesHutLayout",
                "protected int lastElementCount;"
            ],
            [
                "random",
                "org.graphstream.ui.layout.springbox",
                "BarnesHutLayout",
                "protected Random random;"
            ],
            [
                "lo",
                "org.graphstream.ui.layout.springbox",
                "BarnesHutLayout",
                "protected Point3 lo;"
            ],
            [
                "hi",
                "org.graphstream.ui.layout.springbox",
                "BarnesHutLayout",
                "protected Point3 hi;"
            ],
            [
                "center",
                "org.graphstream.ui.layout.springbox",
                "BarnesHutLayout",
                "protected Point3 center;"
            ],
            [
                "statsOut",
                "org.graphstream.ui.layout.springbox",
                "BarnesHutLayout",
                "protected PrintStream statsOut;"
            ],
            [
                "energies",
                "org.graphstream.ui.layout.springbox",
                "BarnesHutLayout",
                "protected Energies energies;"
            ],
            [
                "force",
                "org.graphstream.ui.layout.springbox",
                "BarnesHutLayout",
                "protected double force;"
            ],
            [
                "viewZone",
                "org.graphstream.ui.layout.springbox",
                "BarnesHutLayout",
                "protected double viewZone;"
            ],
            [
                "theta",
                "org.graphstream.ui.layout.springbox",
                "BarnesHutLayout",
                "protected double theta;"
            ],
            [
                "quality",
                "org.graphstream.ui.layout.springbox",
                "BarnesHutLayout",
                "protected double quality;"
            ],
            [
                "nodesPerCell",
                "org.graphstream.ui.layout.springbox",
                "BarnesHutLayout",
                "protected int nodesPerCell;"
            ],
            [
                "area",
                "org.graphstream.ui.layout.springbox",
                "BarnesHutLayout",
                "protected double area;"
            ],
            [
                "stabilizationLimit",
                "org.graphstream.ui.layout.springbox",
                "BarnesHutLayout",
                "protected double stabilizationLimit;"
            ],
            [
                "time",
                "org.graphstream.ui.layout.springbox",
                "BarnesHutLayout",
                "protected int time;"
            ],
            [
                "lastStepTime",
                "org.graphstream.ui.layout.springbox",
                "BarnesHutLayout",
                "protected long lastStepTime;"
            ],
            [
                "maxMoveLength",
                "org.graphstream.ui.layout.springbox",
                "BarnesHutLayout",
                "protected double maxMoveLength;"
            ],
            [
                "avgLength",
                "org.graphstream.ui.layout.springbox",
                "BarnesHutLayout",
                "protected double avgLength;"
            ],
            [
                "nodeMoveCount",
                "org.graphstream.ui.layout.springbox",
                "BarnesHutLayout",
                "protected int nodeMoveCount;"
            ],
            [
                "is3D",
                "org.graphstream.ui.layout.springbox",
                "BarnesHutLayout",
                "protected boolean is3D;"
            ],
            [
                "gravity",
                "org.graphstream.ui.layout.springbox",
                "BarnesHutLayout",
                "protected double gravity;"
            ],
            [
                "sendNodeInfos",
                "org.graphstream.ui.layout.springbox",
                "BarnesHutLayout",
                "protected boolean sendNodeInfos;"
            ],
            [
                "outputStats",
                "org.graphstream.ui.layout.springbox",
                "BarnesHutLayout",
                "protected boolean outputStats;"
            ],
            [
                "outputNodeStats",
                "org.graphstream.ui.layout.springbox",
                "BarnesHutLayout",
                "protected boolean outputNodeStats;"
            ],
            [
                "sendMoveEventsEvery",
                "org.graphstream.ui.layout.springbox",
                "BarnesHutLayout",
                "protected int sendMoveEventsEvery;"
            ],
            [
                "sinkTime",
                "org.graphstream.ui.layout.springbox",
                "BarnesHutLayout",
                "protected SinkTime sinkTime;"
            ],
            [
                "attrSinks",
                "org.graphstream.stream",
                "SourceBase",
                "protected ArrayList<AttributeSink> attrSinks;"
            ],
            [
                "eltsSinks",
                "org.graphstream.stream",
                "SourceBase",
                "protected ArrayList<ElementSink> eltsSinks;"
            ],
            [
                "eventQueue",
                "org.graphstream.stream",
                "SourceBase",
                "protected LinkedList<SourceBase.GraphEvent> eventQueue;"
            ],
            [
                "eventProcessing",
                "org.graphstream.stream",
                "SourceBase",
                "protected boolean eventProcessing;"
            ],
            [
                "sourceId",
                "org.graphstream.stream",
                "SourceBase",
                "protected String sourceId;"
            ],
            [
                "sourceTime",
                "org.graphstream.stream",
                "SourceBase",
                "protected SourceTime sourceTime;"
            ]
        ],
        "tokensOracleVariablesNonPrivateNonStaticNonVoidMethods": [],
        "tokensOracleVariablesNonPrivateNonStaticAttributes": []
    },
    {
        "id": 2903,
        "oracle": ";",
        "oracleType": "PRE",
        "projectName": "gs-core-1.3",
        "packageName": "org.graphstream.ui.view.util",
        "className": "ShortcutManager",
        "javadocTag": "@param view The view to control.",
        "methodJavadoc": "    /**\n\t * Make the manager active on the given graph and view.\n\t * @param graph\n\t *            The graph to control.\n\t * @param view\n\t *            The view to control.\n\t */",
        "methodSourceCode": "void init(GraphicGraph graph, View view);",
        "classJavadoc": "/**\n * Utility to centralise the shortcuts and actions for all view instances.\n */",
        "classSourceCode": "/*\n * Copyright 2006 - 2015\n *     Stefan Balev     <stefan.balev@graphstream-project.org>\n *     Julien Baudry    <julien.baudry@graphstream-project.org>\n *     Antoine Dutot    <antoine.dutot@graphstream-project.org>\n *     Yoann Pign\u00e9      <yoann.pigne@graphstream-project.org>\n *     Guilhelm Savin   <guilhelm.savin@graphstream-project.org>\n * \n * This file is part of GraphStream <http://graphstream-project.org>.\n * \n * GraphStream is a library whose purpose is to handle static or dynamic\n * graph, create them from scratch, file or any source and display them.\n * \n * This program is free software distributed under the terms of two licenses, the\n * CeCILL-C license that fits European law, and the GNU Lesser General Public\n * License. You can  use, modify and/ or redistribute the software under the terms\n * of the CeCILL-C license as circulated by CEA, CNRS and INRIA at the following\n * URL <http://www.cecill.info> or under the terms of the GNU LGPL as published by\n * the Free Software Foundation, either version 3 of the License, or (at your\n * option) any later version.\n * \n * This program is distributed in the hope that it will be useful, but WITHOUT ANY\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A\n * PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more details.\n * \n * You should have received a copy of the GNU Lesser General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n * \n * The fact that you are presently reading this means that you have had\n * knowledge of the CeCILL-C and LGPL licenses and that you accept their terms.\n */\npackage org.graphstream.ui.view.util;\n\nimport org.graphstream.ui.graphicGraph.GraphicGraph;\nimport org.graphstream.ui.view.View;\n\nimport java.awt.event.KeyListener;\n\n/**\n * Utility to centralise the shortcuts and actions for all view instances.\n */\npublic interface ShortcutManager extends KeyListener {\n\t/**\n\t * Make the manager active on the given graph and view.\n\t * @param graph\n\t *            The graph to control.\n\t * @param view\n\t *            The view to control.\n\t */\n\tvoid init(GraphicGraph graph, View view);\n\t\n\t/**\n\t * Release the links between this manager and the view and the graph.\n\t */\n\tvoid release();\n}",
        "tokensGeneralGrammar": [
            "null",
            "true",
            "false",
            ",",
            ".",
            ":",
            ";",
            "?",
            "(",
            ")",
            "jdVar",
            "stream",
            "Arrays",
            "allMatch",
            "noneMatch",
            "anyMatch",
            "~",
            ">>",
            "<<",
            ">>>",
            "|",
            "&",
            "^",
            "+",
            "-",
            "/",
            "*",
            "%",
            "&&",
            "||",
            ">=",
            "<=",
            ">",
            "<",
            "==",
            "!=",
            "instanceof",
            "class",
            "methodResultID",
            "this"
        ],
        "tokensGeneralValuesGlobalDictionary": [
            [
                "0",
                "int"
            ],
            [
                "1",
                "int"
            ],
            [
                "-1",
                "int"
            ],
            [
                "0.0",
                "double"
            ],
            [
                "1.0",
                "double"
            ],
            [
                "-1.0",
                "double"
            ],
            [
                "\"\"",
                "String"
            ],
            [
                "\" \"",
                "String"
            ]
        ],
        "tokensProjectClasses": [
            [
                "DefaultCamera",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "GradientFactory",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "GraphMetrics",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "Graphics2DOutput",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "ImageCache",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "StrokeFactory",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "FontCache",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "FontSlot",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "DefaultView",
                "org.graphstream.ui.swingViewer"
            ],
            [
                "SpriteRenderer",
                "org.graphstream.ui.swingViewer.basicRenderer"
            ],
            [
                "ElementRenderer",
                "org.graphstream.ui.swingViewer.basicRenderer"
            ],
            [
                "NodeRenderer",
                "org.graphstream.ui.swingViewer.basicRenderer"
            ],
            [
                "Arrow",
                "org.graphstream.ui.swingViewer.basicRenderer.shapes"
            ],
            [
                "Shape",
                "org.graphstream.ui.swingViewer.basicRenderer.shapes"
            ],
            [
                "EdgeRenderer",
                "org.graphstream.ui.swingViewer.basicRenderer"
            ],
            [
                "SwingBasicGraphRenderer",
                "org.graphstream.ui.swingViewer.basicRenderer"
            ],
            [
                "GraphRendererBase",
                "org.graphstream.ui.swingViewer"
            ],
            [
                "GraphRenderer",
                "org.graphstream.ui.swingViewer"
            ],
            [
                "LayerRenderer",
                "org.graphstream.ui.swingViewer"
            ],
            [
                "ViewPanel",
                "org.graphstream.ui.swingViewer"
            ],
            [
                "Layouts",
                "org.graphstream.ui.layout"
            ],
            [
                "Layout",
                "org.graphstream.ui.layout"
            ],
            [
                "LayoutRunner",
                "org.graphstream.ui.layout"
            ],
            [
                "NodeParticle",
                "org.graphstream.ui.layout.springbox"
            ],
            [
                "GraphCellData",
                "org.graphstream.ui.layout.springbox"
            ],
            [
                "EdgeSpring",
                "org.graphstream.ui.layout.springbox"
            ],
            [
                "Energies",
                "org.graphstream.ui.layout.springbox"
            ],
            [
                "BarnesHutLayout",
                "org.graphstream.ui.layout.springbox"
            ],
            [
                "LinLog",
                "org.graphstream.ui.layout.springbox.implementations"
            ],
            [
                "LinLogNodeParticle",
                "org.graphstream.ui.layout.springbox.implementations"
            ],
            [
                "SpringBoxNodeParticle",
                "org.graphstream.ui.layout.springbox.implementations"
            ],
            [
                "SpringBox",
                "org.graphstream.ui.layout.springbox.implementations"
            ],
            [
                "Point2",
                "org.graphstream.ui.geom"
            ],
            [
                "Vector2",
                "org.graphstream.ui.geom"
            ],
            [
                "Vector3",
                "org.graphstream.ui.geom"
            ],
            [
                "Point3",
                "org.graphstream.ui.geom"
            ],
            [
                "ViewerListener",
                "org.graphstream.ui.view"
            ],
            [
                "MouseManager",
                "org.graphstream.ui.view.util"
            ],
            [
                "ShortcutManager",
                "org.graphstream.ui.view.util"
            ],
            [
                "DefaultShortcutManager",
                "org.graphstream.ui.view.util"
            ],
            [
                "FpsCounter",
                "org.graphstream.ui.view.util"
            ],
            [
                "CubicCurve",
                "org.graphstream.ui.view.util"
            ],
            [
                "DefaultMouseManager",
                "org.graphstream.ui.view.util"
            ],
            [
                "Selection",
                "org.graphstream.ui.view"
            ],
            [
                "ViewerPipe",
                "org.graphstream.ui.view"
            ],
            [
                "Viewer",
                "org.graphstream.ui.view"
            ],
            [
                "View",
                "org.graphstream.ui.view"
            ],
            [
                "Camera",
                "org.graphstream.ui.view"
            ],
            [
                "Sprite",
                "org.graphstream.ui.spriteManager"
            ],
            [
                "InvalidSpriteIDException",
                "org.graphstream.ui.spriteManager"
            ],
            [
                "SpriteManager",
                "org.graphstream.ui.spriteManager"
            ],
            [
                "SpriteFactory",
                "org.graphstream.ui.spriteManager"
            ],
            [
                "StyleGroupListener",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "Colors",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "Values",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "StyleSheetListener",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "StyleSheetParserTokenManager",
                "org.graphstream.ui.graphicGraph.stylesheet.parser"
            ],
            [
                "StyleSheetParserConstants",
                "org.graphstream.ui.graphicGraph.stylesheet.parser"
            ],
            [
                "StyleSheetParser",
                "org.graphstream.ui.graphicGraph.stylesheet.parser"
            ],
            [
                "Style",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "StyleSheet",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "StyleConstants",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "Selector",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "Value",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "Rule",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "GraphicNode",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "StyleGroup",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphPosLengthUtils",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphicEdge",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphicElementChangeListener",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphicGraph",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "StyleGroupSet",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphicSprite",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphicElement",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "VerboseSink",
                "org.graphstream.util"
            ],
            [
                "GraphListeners",
                "org.graphstream.util"
            ],
            [
                "Environment",
                "org.graphstream.util"
            ],
            [
                "GraphDiff",
                "org.graphstream.util"
            ],
            [
                "Filters",
                "org.graphstream.util"
            ],
            [
                "FilteredEdgeIterator",
                "org.graphstream.util"
            ],
            [
                "Parser",
                "org.graphstream.util.parser"
            ],
            [
                "ParserFactory",
                "org.graphstream.util.parser"
            ],
            [
                "TokenMgrError",
                "org.graphstream.util.parser"
            ],
            [
                "ParseException",
                "org.graphstream.util.parser"
            ],
            [
                "SimpleCharStream",
                "org.graphstream.util.parser"
            ],
            [
                "Token",
                "org.graphstream.util.parser"
            ],
            [
                "ISODateIO",
                "org.graphstream.util.time"
            ],
            [
                "ISODateComponent",
                "org.graphstream.util.time"
            ],
            [
                "FilteredNodeIterator",
                "org.graphstream.util"
            ],
            [
                "FixedArrayList",
                "org.graphstream.util.set"
            ],
            [
                "StepCounter",
                "org.graphstream.util"
            ],
            [
                "GraphSpells",
                "org.graphstream.util.cumulative"
            ],
            [
                "CumulativeAttributes",
                "org.graphstream.util.cumulative"
            ],
            [
                "CumulativeSpells",
                "org.graphstream.util.cumulative"
            ],
            [
                "Filter",
                "org.graphstream.util"
            ],
            [
                "PipeAdapter",
                "org.graphstream.stream"
            ],
            [
                "GraphParseException",
                "org.graphstream.stream"
            ],
            [
                "ElementSink",
                "org.graphstream.stream"
            ],
            [
                "URLSource",
                "org.graphstream.stream.net"
            ],
            [
                "HTTPSource",
                "org.graphstream.stream.net"
            ],
            [
                "SourceAdapter",
                "org.graphstream.stream"
            ],
            [
                "AttributeSink",
                "org.graphstream.stream"
            ],
            [
                "GMLParserConstants",
                "org.graphstream.stream.file.gml"
            ],
            [
                "GMLParserTokenManager",
                "org.graphstream.stream.file.gml"
            ],
            [
                "GMLContext",
                "org.graphstream.stream.file.gml"
            ],
            [
                "Graphics",
                "org.graphstream.stream.file.gml"
            ],
            [
                "KeyValues",
                "org.graphstream.stream.file.gml"
            ],
            [
                "GMLParser",
                "org.graphstream.stream.file.gml"
            ],
            [
                "FileSinkGraphML",
                "org.graphstream.stream.file"
            ],
            [
                "TLPParserConstants",
                "org.graphstream.stream.file.tlp"
            ],
            [
                "TLPParser",
                "org.graphstream.stream.file.tlp"
            ],
            [
                "TLPParserTokenManager",
                "org.graphstream.stream.file.tlp"
            ],
            [
                "FileSinkFactory",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceEdge",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkBase",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkTikZ",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceGEXF",
                "org.graphstream.stream.file"
            ],
            [
                "DOTParser",
                "org.graphstream.stream.file.dot"
            ],
            [
                "DOTParserConstants",
                "org.graphstream.stream.file.dot"
            ],
            [
                "DOTParserTokenManager",
                "org.graphstream.stream.file.dot"
            ],
            [
                "FileSink",
                "org.graphstream.stream.file"
            ],
            [
                "PajekContext",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "Graphics",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "NodeGraphics",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "EdgeGraphics",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "EdgeMatrix",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "PajekParserTokenManager",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "PajekParserConstants",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "FileSourceXML",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkBaseFiltered",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkDOT",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceParser",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkDGSFiltered",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceDOT",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceDGS1And2",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceGraphML",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceFactory",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkImages",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkDynamicGML",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkSVG",
                "org.graphstream.stream.file"
            ],
            [
                "GEXFSpell",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "SmartXMLWriter",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFElement",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFEdges",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFAttValues",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFEdge",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFSpells",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFAttValue",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFNodes",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFNode",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFMeta",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFAttributes",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXF",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFGraph",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFAttribute",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "OldFileSourceDGS",
                "org.graphstream.stream.file.dgs"
            ],
            [
                "DGSParser",
                "org.graphstream.stream.file.dgs"
            ],
            [
                "FileSourceBase",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkGML",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceDGS",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkDGSUtility",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceTLP",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkSVG2",
                "org.graphstream.stream.file"
            ],
            [
                "FileSource",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceNCol",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourcePajek",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceGPX",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceLGL",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkGEXF2",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceGML",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkGEXF",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkDGS",
                "org.graphstream.stream.file"
            ],
            [
                "ProxyPipe",
                "org.graphstream.stream"
            ],
            [
                "Sink",
                "org.graphstream.stream"
            ],
            [
                "Timeline",
                "org.graphstream.stream"
            ],
            [
                "Pipe",
                "org.graphstream.stream"
            ],
            [
                "SinkAdapter",
                "org.graphstream.stream"
            ],
            [
                "Replayable",
                "org.graphstream.stream"
            ],
            [
                "Source",
                "org.graphstream.stream"
            ],
            [
                "AnnotatedSink",
                "org.graphstream.stream"
            ],
            [
                "GraphReplay",
                "org.graphstream.stream"
            ],
            [
                "AttributePipe",
                "org.graphstream.stream"
            ],
            [
                "SinkTime",
                "org.graphstream.stream.sync"
            ],
            [
                "SourceTime",
                "org.graphstream.stream.sync"
            ],
            [
                "PipeBase",
                "org.graphstream.stream"
            ],
            [
                "ThreadProxyPipe",
                "org.graphstream.stream.thread"
            ],
            [
                "ThreadProxyPipeOld",
                "org.graphstream.stream.thread"
            ],
            [
                "RMISource",
                "org.graphstream.stream.rmi"
            ],
            [
                "RMIAdapterOut",
                "org.graphstream.stream.rmi"
            ],
            [
                "RMISink",
                "org.graphstream.stream.rmi"
            ],
            [
                "RMIAdapterIn",
                "org.graphstream.stream.rmi"
            ],
            [
                "SourceBase",
                "org.graphstream.stream"
            ],
            [
                "NetStreamDecoder",
                "org.graphstream.stream.netstream"
            ],
            [
                "NetStreamReceiver",
                "org.graphstream.stream.netstream"
            ],
            [
                "NetStreamConstants",
                "org.graphstream.stream.netstream"
            ],
            [
                "NetStreamSender",
                "org.graphstream.stream.netstream"
            ],
            [
                "DefaultNetStreamDecoder",
                "org.graphstream.stream.netstream"
            ],
            [
                "Base64",
                "org.graphstream.stream.netstream.packing"
            ],
            [
                "NetStreamUnpacker",
                "org.graphstream.stream.netstream.packing"
            ],
            [
                "Base64Packer",
                "org.graphstream.stream.netstream.packing"
            ],
            [
                "Base64Unpacker",
                "org.graphstream.stream.netstream.packing"
            ],
            [
                "NetStreamPacker",
                "org.graphstream.stream.netstream.packing"
            ],
            [
                "AttributePredicate",
                "org.graphstream.stream"
            ],
            [
                "Element",
                "org.graphstream.graph"
            ],
            [
                "Node",
                "org.graphstream.graph"
            ],
            [
                "BreadthFirstIterator",
                "org.graphstream.graph"
            ],
            [
                "Graph",
                "org.graphstream.graph"
            ],
            [
                "EdgeRejectedException",
                "org.graphstream.graph"
            ],
            [
                "CompoundAttribute",
                "org.graphstream.graph"
            ],
            [
                "Structure",
                "org.graphstream.graph"
            ],
            [
                "DepthFirstIterator",
                "org.graphstream.graph"
            ],
            [
                "NullAttributeException",
                "org.graphstream.graph"
            ],
            [
                "IdAlreadyInUseException",
                "org.graphstream.graph"
            ],
            [
                "EdgeFactory",
                "org.graphstream.graph"
            ],
            [
                "ElementNotFoundException",
                "org.graphstream.graph"
            ],
            [
                "OneAttributeElement",
                "org.graphstream.graph.implementations"
            ],
            [
                "AdjacencyListNode",
                "org.graphstream.graph.implementations"
            ],
            [
                "SingleNode",
                "org.graphstream.graph.implementations"
            ],
            [
                "AbstractElement",
                "org.graphstream.graph.implementations"
            ],
            [
                "AdjacencyListGraph",
                "org.graphstream.graph.implementations"
            ],
            [
                "AbstractNode",
                "org.graphstream.graph.implementations"
            ],
            [
                "DefaultGraph",
                "org.graphstream.graph.implementations"
            ],
            [
                "MultiGraph",
                "org.graphstream.graph.implementations"
            ],
            [
                "Graphs",
                "org.graphstream.graph.implementations"
            ],
            [
                "SingleGraph",
                "org.graphstream.graph.implementations"
            ],
            [
                "MultiNode",
                "org.graphstream.graph.implementations"
            ],
            [
                "AbstractGraph",
                "org.graphstream.graph.implementations"
            ],
            [
                "AbstractEdge",
                "org.graphstream.graph.implementations"
            ],
            [
                "GraphFactory",
                "org.graphstream.graph"
            ],
            [
                "NodeFactory",
                "org.graphstream.graph"
            ],
            [
                "Edge",
                "org.graphstream.graph"
            ],
            [
                "Path",
                "org.graphstream.graph"
            ]
        ],
        "tokensProjectClassesNonPrivateStaticNonVoidMethods": [
            [
                "gradientInArea",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "/**\n * Generate a gradient in the given pixel area following the given style.\n * This produces a gradient only if the style fill-mode is compatible.\n *\n * @param x0\n *            The left corner of the area.\n * @param y0\n *            The bottom corner of the area.\n * @param width\n *            The area width.\n * @param height\n *            The area height.\n * @param style\n *            The style.\n * @return A gradient paint or null if the style does not specify a\n *         gradient.\n */\npublic static Paint gradientInArea(int x0, int y0, int width, int height, Style style) {\n    switch(style.getFillMode()) {\n        case GRADIENT_VERTICAL:\n            return linearGradientFromStyle(x0, y0, x0, y0 + height, style);\n        case GRADIENT_HORIZONTAL:\n            return linearGradientFromStyle(x0, y0, x0 + width, y0, style);\n        case GRADIENT_DIAGONAL1:\n            return linearGradientFromStyle(x0, y0, x0 + width, y0 + height, style);\n        case GRADIENT_DIAGONAL2:\n            return linearGradientFromStyle(x0 + width, y0, x0, y0 + height, style);\n        case GRADIENT_RADIAL:\n            return radialGradientFromStyle(x0 + (width / 2), y0 + (height / 2), width > height ? width / 2 : height / 2, style);\n        default:\n            return null;\n    }\n}"
            ],
            [
                "linearGradientFromStyle",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "/**\n * Generate a linear gradient between two given points corresponding to the\n * given style.\n *\n * @param x0\n *            The start point abscissa.\n * @param y0\n *            The start point ordinate.\n * @param x1\n *            The end point abscissa.\n * @param y1\n *            The end point ordinate.\n * @param style\n *            The style.\n * @return A paint for the gradient or null if the style specifies no\n *         gradient (the fill mode is not a linear gradient or there is only\n *         one fill colour).\n */\npublic static Paint linearGradientFromStyle(float x0, float y0, float x1, float y1, Style style) {\n    Paint paint = null;\n    if (style.getFillColorCount() > 1) {\n        switch(style.getFillMode()) {\n            case GRADIENT_DIAGONAL1:\n            case GRADIENT_DIAGONAL2:\n            case GRADIENT_HORIZONTAL:\n            case GRADIENT_VERTICAL:\n                if (version16)\n                    paint = new LinearGradientPaint(x0, y0, x1, y1, createFractions(style), createColors(style));\n                else\n                    paint = new GradientPaint(x0, y0, style.getFillColor(0), x1, y1, style.getFillColor(1));\n                break;\n            default:\n                break;\n        }\n    }\n    return paint;\n}"
            ],
            [
                "radialGradientFromStyle",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static Paint radialGradientFromStyle(float cx, float cy, float radius, Style style) {\n    return radialGradientFromStyle(cx, cy, radius, cx, cy, style);\n}"
            ],
            [
                "radialGradientFromStyle",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "/**\n * Generate a radial gradient between whose center is at (cx,cy) with the\n * given radius. The focus (fx,fy) is the start position of the gradient in\n * the circle.\n *\n * @param cx\n *            The center point abscissa.\n * @param cy\n *            The center point ordinate.\n * @param fx\n *            The start point abscissa.\n * @param fy\n *            The start point ordinate.\n * @param radius\n *            The gradient radius.\n * @param style\n *            The style.\n * @return A paint for the gradient or null if the style specifies no\n *         gradient (the fill mode is not a radial gradient or there is only\n *         one fill colour).\n */\npublic static Paint radialGradientFromStyle(float cx, float cy, float radius, float fx, float fy, Style style) {\n    Paint paint = null;\n    if (version16) {\n        if (style.getFillColorCount() > 1 && style.getFillMode() == FillMode.GRADIENT_RADIAL) {\n            float[] fractions = createFractions(style);\n            Color[] colors = createColors(style);\n            paint = new RadialGradientPaint(cx, cy, radius, fx, fy, fractions, colors, MultipleGradientPaint.CycleMethod.REFLECT);\n        }\n    }\n    return paint;\n}"
            ],
            [
                "createFractions",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "protected static float[] createFractions(Style style) {\n    int n = style.getFillColorCount();\n    if (n < predefFractions.length)\n        return predefFractions[n];\n    float[] fractions = new float[n];\n    float div = 1f / (n - 1);\n    for (int i = 1; i < (n - 1); i++) fractions[i] = div * i;\n    fractions[0] = 0f;\n    fractions[n - 1] = 1f;\n    return fractions;\n}"
            ],
            [
                "createColors",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "protected static Color[] createColors(Style style) {\n    int n = style.getFillColorCount();\n    Color[] colors = new Color[n];\n    for (int i = 0; i < n; i++) colors[i] = style.getFillColor(i);\n    return colors;\n}"
            ],
            [
                "defaultImageCache",
                "org.graphstream.ui.swingViewer.util",
                "ImageCache",
                "/**\n * Default singleton image cache instance that can be shared. This method\n * and singleton must be used only in the Swing thread.\n *\n * @return The default singleton image cache instance.\n */\npublic static ImageCache defaultImageCache() {\n    if (defaultImageCache == null)\n        defaultImageCache = new ImageCache();\n    return defaultImageCache;\n}"
            ],
            [
                "generateStroke",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "/**\n * Generate a stroke of the appropriate width and style according to the\n * given style and metrics.\n *\n * @param style\n *            The style to use.\n * @param metrics\n *            The metrics to use.\n * @return The stroke or null if the style specifies a \"none\" stroke mode.\n */\npublic static Stroke generateStroke(Style style, GraphMetrics metrics) {\n    if (style.getStrokeWidth().value == 0)\n        return null;\n    switch(style.getStrokeMode()) {\n        case PLAIN:\n            return generatePlainStroke(style, metrics);\n        case DOTS:\n            return generateDotsStroke(style, metrics);\n        case DASHES:\n            return generateDashesStroke(style, metrics);\n        default:\n        case NONE:\n            return null;\n    }\n}"
            ],
            [
                "generatePlainStroke",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "protected static Stroke generatePlainStroke(Style style, GraphMetrics metrics) {\n    float width = (float) metrics.lengthToGu(style.getStrokeWidth());\n    /*\n\t\t * if( width == 1f ) return plainLine1px; // XXX Not a good optimisation\n\t\t * else if( width == 2f ) return plainLine2px; // We draw the whole\n\t\t * graph in GU else if( width == 3f ) return plainLine3px; // In graph\n\t\t * units the width is never exactly 1,2, 5 ... else if( width == 5f )\n\t\t * return plainLine5px; else if( width == 10f ) return plainLine10px;\n\t\t * else\n\t\t */\n    {\n        return new BasicStroke(width);\n    }\n}"
            ],
            [
                "generateDotsStroke",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "protected static Stroke generateDotsStroke(Style style, GraphMetrics metrics) {\n    float width = (float) metrics.lengthToGu(style.getStrokeWidth());\n    /*\n\t\t * if( width == 1f ) return dotsLine1px; else if( width == 2f ) return\n\t\t * dotsLine2px; else if( width == 3f ) return dotsLine3px; else if(\n\t\t * width == 5f ) return dotsLine5px; else if( width == 10f ) return\n\t\t * dotsLine10px; else\n\t\t */\n    {\n        dots[0] = (float) metrics.lengthToGu(1f, Units.PX);\n        dots[1] = dots[0];\n        return new BasicStroke(width, BasicStroke.CAP_BUTT, BasicStroke.JOIN_MITER, 1f, dots, 0);\n    }\n}"
            ],
            [
                "generateDashesStroke",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "protected static Stroke generateDashesStroke(Style style, GraphMetrics metrics) {\n    float width = (float) metrics.lengthToGu(style.getStrokeWidth());\n    /*\n\t\t * if( width == 1f ) return dashesLine1px; else if( width == 2f ) return\n\t\t * dashesLine2px; else if( width == 3f ) return dashesLine3px; else if(\n\t\t * width == 5f ) return dashesLine5px; else if( width == 10f ) return\n\t\t * dashesLine10px; else\n\t\t */\n    {\n        dashes[0] = (float) metrics.lengthToGu(3f, Units.PX);\n        dashes[1] = dashes[0];\n        return new BasicStroke(width, BasicStroke.CAP_BUTT, BasicStroke.JOIN_MITER, 1f, dashes, 0);\n    }\n}"
            ],
            [
                "defaultFontCache",
                "org.graphstream.ui.swingViewer.util",
                "FontCache",
                "/**\n * Default singleton instance for shared font cache. This method and cache\n * can only be used in the Swing thread.\n *\n * @return The default singleton font cache instance.\n */\npublic static FontCache defaultFontCache() {\n    if (defaultFontCache == null)\n        defaultFontCache = new FontCache();\n    return defaultFontCache;\n}"
            ],
            [
                "newLayoutAlgorithm",
                "org.graphstream.ui.layout",
                "Layouts",
                "/**\n * Creates a layout according to the \"org.graphstream.ui.layout\" system property.\n *\n * @return The new layout or the default GraphStream \"Spring-Box\" layout if\n *         the \"gs.ui.layout\" system property is either not set or contains\n *         a class that cannot be found.\n */\npublic static Layout newLayoutAlgorithm() {\n    String layoutClassName;\n    try {\n        layoutClassName = System.getProperty(\"gs.ui.layout\");\n        if (layoutClassName != null) {\n            logger.log(Level.WARNING, \"\\\"gs.ui.layout\\\" is deprecated, use \\\"org.graphstream.ui.layout\\\" instead.\");\n        } else {\n            layoutClassName = System.getProperty(\"org.graphstream.ui.layout\");\n        }\n    } catch (AccessControlException e) {\n        layoutClassName = null;\n    }\n    if (layoutClassName != null) {\n        try {\n            Class<?> c = Class.forName(layoutClassName);\n            Object object = c.newInstance();\n            if (object instanceof Layout) {\n                return (Layout) object;\n            } else {\n                logger.warning(String.format(\"class '%s' is not a 'GraphRenderer'%n\", object));\n            }\n        } catch (Exception e) {\n            logger.log(Level.WARNING, \"Cannot create layout.\", e);\n        }\n    }\n    return new org.graphstream.ui.layout.springbox.implementations.SpringBox(false);\n}"
            ],
            [
                "eval",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * Evaluate a cubic B\u00e9zier curve according to control points `x0`, `x1`,\n * `x2` and `x3` and return the position at parametric position `t` of the\n * curve.\n *\n * @return The coordinate at parametric position `t` on the curve.\n */\npublic static double eval(double x0, double x1, double x2, double x3, double t) {\n    double tt = (1f - t);\n    return x0 * (tt * tt * tt) + 3f * x1 * t * (tt * tt) + 3f * x2 * (t * t) * tt + x3 * (t * t * t);\n}"
            ],
            [
                "eval",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * Evaluate a cubic B\u00e9zier curve according to control points `p0`, `p1`,\n * `p2` and `p3` and return the position at parametric position `t` of the\n * curve.\n *\n * @return The point at parametric position `t` on the curve.\n */\npublic static Point2 eval(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t) {\n    return new Point2(eval(p0.x, p1.x, p2.x, p3.x, t), eval(p0.y, p1.y, p2.y, p3.y, t));\n}"
            ],
            [
                "eval",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * Evaluate a cubic B\u00e9zier curve according to control points `p0`, `p1`,\n * `p2` and `p3` and return the position at parametric position `t` of the\n * curve.\n *\n * @return The point at parametric position `t` on the curve.\n */\npublic static Point2D.Double eval(Point2D.Double p0, Point2D.Double p1, Point2D.Double p2, Point2D.Double p3, double t) {\n    return new Point2D.Double(eval(p0.x, p1.x, p2.x, p3.x, t), eval(p0.y, p1.y, p2.y, p3.y, t));\n}"
            ],
            [
                "eval",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * Evaluate a cubic B\u00e9zier curve according to control points `p0`, `p1`,\n * `p2` and `p3` and store the position at parametric position `t` of the\n * curve in `result`.\n *\n * @return the given reference to `result`.\n */\npublic static Point2 eval(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t, Point2 result) {\n    result.set(eval(p0.x, p1.x, p2.x, p3.x, t), eval(p0.y, p1.y, p2.y, p3.y, t));\n    return result;\n}"
            ],
            [
                "derivative",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * Derivative of a cubic B\u00e9zier curve according to control points `x0`,\n * `x1`, `x2` and `x3` at parametric position `t` of the curve.\n *\n * @return The derivative at parametric position `t` on the curve.\n */\npublic static double derivative(double x0, double x1, double x2, double x3, double t) {\n    return 3 * (x3 - 3 * x2 + 3 * x1 - x0) * t * t + 2 * (3 * x2 - 6 * x1 + 3 * x0) * t + (3 * x1 - 3 * x0);\n}"
            ],
            [
                "derivative",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * Derivative point of a cubic B\u00e9zier curve according to control points\n * `x0`, `x1`, `x2` and `x3` at parametric position `t` of the curve.\n *\n * @return The derivative point at parametric position `t` on the curve.\n */\npublic static Point2 derivative(Point2 p0, Point2 p1, Point2 p2, Point3 p3, double t) {\n    return new Point2(derivative(p0.x, p1.x, p2.x, p3.x, t), derivative(p0.y, p1.y, p2.y, p3.y, t));\n}"
            ],
            [
                "derivative",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * Store in `result` the derivative point of a cubic B\u00e9zier curve according\n * to control points `x0`, `x1`, `x2` and `x3` at parametric position `t` of\n * the curve.\n *\n * @return the given reference to `result`.\n */\npublic static Point2 derivative(Point2 p0, Point2 p1, Point2 p2, Point3 p3, double t, Point2 result) {\n    result.set(derivative(p0.x, p1.x, p2.x, p3.x, t), derivative(p0.y, p1.y, p2.y, p3.y, t));\n    return result;\n}"
            ],
            [
                "perpendicular",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * The perpendicular vector to the curve defined by control points `p0`,\n * `p1`, `p2` and `p3` at parametric position `t`.\n *\n * @return A vector perpendicular to the curve at position `t`.\n */\npublic static Vector2 perpendicular(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t) {\n    return new Vector2(derivative(p0.y, p1.y, p2.y, p3.y, t), -derivative(p0.x, p1.x, p2.x, p3.x, t));\n}"
            ],
            [
                "perpendicular",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * Store in `result` the perpendicular vector to the curve defined by\n * control points `p0`, `p1`, `p2` and `p3` at parametric position `t`.\n *\n * @return the given reference to `result`.\n */\npublic static Vector2 perpendicular(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t, Vector2 result) {\n    result.set(derivative(p0.y, p1.y, p2.y, p3.y, t), -derivative(p0.x, p1.x, p2.x, p3.x, t));\n    return result;\n}"
            ],
            [
                "perpendicular",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * The perpendicular vector to the curve defined by control points `p0`,\n * `p1`, `p2` and `p3` at parametric position `t`.\n *\n * @return A vector perpendicular to the curve at position `t`.\n */\npublic static Point2D.Double perpendicular(Point2D.Double p0, Point2D.Double p1, Point2D.Double p2, Point2D.Double p3, double t) {\n    return new Point2D.Double(derivative(p0.y, p1.y, p2.y, p3.y, t), -derivative(p0.x, p1.x, p2.x, p3.x, t));\n}"
            ],
            [
                "newGraphRenderer",
                "org.graphstream.ui.view",
                "Viewer",
                "// Access\n/**\n * Create a new instance of the default graph renderer. The default graph\n * renderer class is given by the \"org.graphstream.ui.renderer\" system\n * property. If the class indicated by this property is not usable (not in\n * the class path, not of the correct type, etc.) or if the property is not\n * present a SwingBasicGraphRenderer is returned.\n */\npublic static GraphRenderer newGraphRenderer() {\n    String rendererClassName;\n    try {\n        rendererClassName = System.getProperty(\"gs.ui.renderer\");\n        if (rendererClassName != null) {\n            logger.warning(\"\\\"gs.ui.renderer\\\" is deprecated, use \\\"org.graphstream.ui.renderer\\\" instead.\");\n        } else {\n            rendererClassName = System.getProperty(\"org.graphstream.ui.renderer\");\n        }\n    } catch (AccessControlException e) {\n        rendererClassName = null;\n    }\n    if (rendererClassName == null)\n        return new SwingBasicGraphRenderer();\n    try {\n        Class<?> c = Class.forName(rendererClassName);\n        Object object = c.newInstance();\n        if (object instanceof GraphRenderer) {\n            return (GraphRenderer) object;\n        } else {\n            logger.warning(String.format(\"Class '%s' is not a 'GraphRenderer'.\", object));\n        }\n    } catch (Exception e) {\n        logger.log(Level.WARNING, \"Cannot create graph renderer.\", e);\n    }\n    return new SwingBasicGraphRenderer();\n}"
            ],
            [
                "getPositionValue",
                "org.graphstream.ui.spriteManager",
                "SpriteManager",
                "// Utility\nprotected static Values getPositionValue(Object value) {\n    if (value instanceof Object[]) {\n        Object[] values = (Object[]) value;\n        if (values.length == 4) {\n            if (values[0] instanceof Number && values[1] instanceof Number && values[2] instanceof Number && values[3] instanceof Style.Units) {\n                return new Values((Style.Units) values[3], ((Number) values[0]).floatValue(), ((Number) values[1]).floatValue(), ((Number) values[2]).floatValue());\n            } else {\n                logger.warning(\"Cannot parse values[4] for sprite position.\");\n            }\n        } else if (values.length == 3) {\n            if (values[0] instanceof Number && values[1] instanceof Number && values[2] instanceof Number) {\n                return new Values(Units.GU, ((Number) values[0]).floatValue(), ((Number) values[1]).floatValue(), ((Number) values[2]).floatValue());\n            } else {\n                logger.warning(\"Cannot parse values[3] for sprite position.\");\n            }\n        } else if (values.length == 1) {\n            if (values[0] instanceof Number) {\n                return new Values(Units.GU, ((Number) values[0]).floatValue());\n            } else {\n                logger.warning(String.format(\"Sprite position percent is not a number.\"));\n            }\n        } else {\n            logger.warning(String.format(\"Cannot transform value '%s' (length=%d) into a position.\", Arrays.toString(values), values.length));\n        }\n    } else if (value instanceof Number) {\n        return new Values(Units.GU, ((Number) value).floatValue());\n    } else if (value instanceof Value) {\n        return new Values((Value) value);\n    } else if (value instanceof Values) {\n        return new Values((Values) value);\n    } else {\n        System.err.printf(\"GraphicGraph : cannot place sprite with posiiton '%s' (instance of %s)%n\", value, value.getClass().getName());\n    }\n    return null;\n}"
            ],
            [
                "convertColor",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Try to convert the given string value to a colour. It understands the 600\n * colour names of the X11 RGB data base. It also understands colours given\n * in the \"#FFFFFF\" format and the hexadecimal \"0xFFFFFF\" format. Finally,\n * it understands colours given as a \"rgb(1,10,100)\", CSS-like format. If\n * the input value is null, the result is null.\n *\n * @param anyValue\n *            The value to convert.\n * @return the converted colour or null if the conversion failed.\n */\npublic static Color convertColor(Object anyValue) {\n    if (anyValue == null)\n        return null;\n    if (anyValue instanceof Color)\n        return (Color) anyValue;\n    if (anyValue instanceof String) {\n        Color c = null;\n        String value = (String) anyValue;\n        if (value.startsWith(\"#\")) {\n            Matcher m = sharpColor1.matcher(value);\n            if (m.matches()) {\n                if (value.length() == 7) {\n                    try {\n                        c = Color.decode(value);\n                        return c;\n                    } catch (NumberFormatException e) {\n                        c = null;\n                    }\n                } else if (value.length() == 9) {\n                    int r = Integer.parseInt(m.group(1), 16);\n                    int g = Integer.parseInt(m.group(2), 16);\n                    int b = Integer.parseInt(m.group(3), 16);\n                    int a = Integer.parseInt(m.group(4), 16);\n                    return new Color(r, g, b, a);\n                }\n            }\n            m = sharpColor2.matcher(value);\n            if (m.matches()) {\n                if (value.length() >= 4) {\n                    int r = Integer.parseInt(m.group(1), 16) * 16;\n                    int g = Integer.parseInt(m.group(2), 16) * 16;\n                    int b = Integer.parseInt(m.group(3), 16) * 16;\n                    int a = 255;\n                    if (value.length() == 5)\n                        a = Integer.parseInt(m.group(4), 16) * 16;\n                    return new Color(r, g, b, a);\n                }\n            }\n        } else if (value.startsWith(\"rgb\")) {\n            Matcher m = cssColorA.matcher(value);\n            if (m.matches()) {\n                int r = Integer.parseInt(m.group(1));\n                int g = Integer.parseInt(m.group(2));\n                int b = Integer.parseInt(m.group(3));\n                int a = Integer.parseInt(m.group(4));\n                return new Color(r, g, b, a);\n            }\n            m = cssColor.matcher(value);\n            if (m.matches()) {\n                int r = Integer.parseInt(m.group(1));\n                int g = Integer.parseInt(m.group(2));\n                int b = Integer.parseInt(m.group(3));\n                return new Color(r, g, b);\n            }\n        } else if (value.startsWith(\"0x\") || value.startsWith(\"0X\")) {\n            Matcher m = hexaColor.matcher(value);\n            if (m.matches()) {\n                if (value.length() == 8) {\n                    try {\n                        return Color.decode(value);\n                    } catch (NumberFormatException e) {\n                        c = null;\n                    }\n                } else if (value.length() == 10) {\n                    String r = m.group(1);\n                    String g = m.group(2);\n                    String b = m.group(3);\n                    String a = m.group(4);\n                    return new Color(Integer.parseInt(r, 16), Integer.parseInt(g, 16), Integer.parseInt(b, 16), Integer.parseInt(a, 16));\n                }\n            }\n        } else if (value.startsWith(\"java.awt.Color[\")) {\n            Matcher m = awtColor.matcher(value);\n            if (m.matches()) {\n                int r = Integer.parseInt(m.group(1));\n                int g = Integer.parseInt(m.group(2));\n                int b = Integer.parseInt(m.group(3));\n                return new Color(r, g, b);\n            }\n        }\n        return colorMap.get(value.toLowerCase());\n    }\n    // TODO throw an exception instead ??\n    return null;\n}"
            ],
            [
                "convertLabel",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Check if the given value is an instance of CharSequence (String is) and\n * return it as a string. Else return null. If the input value is null, the\n * return value is null. If the value returned is larger than 128\n * characters, this method cuts it to 128 characters. TODO: allow to set the\n * max length of these strings.\n *\n * @param value\n *            The value to convert.\n * @return The corresponding string, or null.\n */\npublic static String convertLabel(Object value) {\n    String label = null;\n    if (value != null) {\n        if (value instanceof CharSequence)\n            label = ((CharSequence) value).toString();\n        else\n            label = value.toString();\n        if (label.length() > 128)\n            label = String.format(\"%s...\", label.substring(0, 128));\n    }\n    return label;\n}"
            ],
            [
                "convertWidth",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Try to convert an arbitrary value to a float. If it is a descendant of\n * Number, the float value is returned. If it is a string, a conversion is\n * tried to change it into a number and if successful, this number is\n * returned as a float. Else, the -1 value is returned as no width can be\n * negative to indicate the conversion failed. If the input is null, the\n * return value is -1.\n *\n * @param value\n *            The input to convert.\n * @return The value or -1 if the conversion failed. TODO should be named\n *         convertNumber\n */\npublic static float convertWidth(Object value) {\n    if (value instanceof CharSequence) {\n        try {\n            float val = Float.parseFloat(((CharSequence) value).toString());\n            return val;\n        } catch (NumberFormatException e) {\n            return -1;\n        }\n    } else if (value instanceof Number) {\n        return ((Number) value).floatValue();\n    }\n    return -1;\n}"
            ],
            [
                "convertValue",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Convert an object to a value with units. The object can be a number, in\n * which case the value returned contains this number in pixel units. The\n * object can be a string. In this case the strings understood by this\n * method are of the form (spaces, number, spaces, unit, spaces). For\n * example \"3px\", \"45gu\", \"5.5%\", \" 25.3  gu \", \"4\", \"   28.1  \".\n *\n * @param value\n *            A Number or a CharSequence.\n * @return A value.\n */\npublic static Value convertValue(Object value) {\n    if (value instanceof CharSequence) {\n        CharSequence string = (CharSequence) value;\n        //\t\t\tif (string == null)\n        //\t\t\t\tthrow new RuntimeException(\"null size string ...\");\n        if (string.length() < 0)\n            throw new RuntimeException(\"empty size string ...\");\n        Matcher m = numberUnit.matcher(string);\n        if (m.matches())\n            return new Value(convertUnit(m.group(2)), Float.parseFloat(m.group(1)));\n        m = number.matcher(string);\n        if (m.matches())\n            return new Value(Units.PX, Float.parseFloat(m.group(1)));\n        throw new RuntimeException(String.format(\"string is not convertible to a value (%s)\", string));\n    } else if (value instanceof Number) {\n        return new Value(Units.PX, ((Number) value).floatValue());\n    }\n    if (value == null)\n        throw new RuntimeException(\"cannot convert null value\");\n    throw new RuntimeException(String.format(\"value is of class %s%n\", value.getClass().getName()));\n}"
            ],
            [
                "convertUnit",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Convert \"gu\", \"px\" and \"%\" to Units.GU, Units.PX, Units.PERCENTS.\n */\nprotected static Units convertUnit(String unit) {\n    if (unit.equals(\"gu\"))\n        return Units.GU;\n    else if (unit.equals(\"px\"))\n        return Units.PX;\n    else if (unit.equals(\"%\"))\n        return Units.PERCENTS;\n    return Units.PX;\n}"
            ],
            [
                "nodePosition",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "/**\n * Retrieve a node position from its attributes (\"x\", \"y\", \"z\", or \"xy\", or\n * \"xyz\").\n *\n * @param id\n *            The node identifier.\n * @return A newly allocated array of three floats containing the (x,y,z)\n *         position of the node, or null if the node is not part of the\n *         graph.\n */\npublic static double[] nodePosition(Graph graph, String id) {\n    Node node = graph.getNode(id);\n    if (node != null)\n        return nodePosition(node);\n    return null;\n}"
            ],
            [
                "nodePointPosition",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "/**\n * Retrieve a node position from its attributes (\"x\", \"y\", \"z\", or \"xy\", or\n * \"xyz\").\n *\n * @param id\n *            The node identifier.\n * @return A newly allocated point containing the (x,y,z)\n *         position of the node, or null if the node is not part of the\n *         graph.\n */\npublic static Point3 nodePointPosition(Graph graph, String id) {\n    Node node = graph.getNode(id);\n    if (node != null)\n        return nodePointPosition(node);\n    return null;\n}"
            ],
            [
                "nodePosition",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "/**\n * Like {@link #nodePosition(Graph,String)} but use an existing node as\n * argument.\n *\n * @param node\n *            The node to consider.\n * @return A newly allocated array of three floats containing the (x,y,z)\n *         position of the node.\n */\npublic static double[] nodePosition(Node node) {\n    double[] xyz = new double[3];\n    nodePosition(node, xyz);\n    return xyz;\n}"
            ],
            [
                "nodePointPosition",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "/**\n * Like {@link #nodePointPosition(Graph,String)} but use an existing node as\n * argument.\n *\n * @param node\n *            The node to consider.\n * @return A newly allocated point containing the (x,y,z)\n *         position of the node.\n */\npublic static Point3 nodePointPosition(Node node) {\n    Point3 pos = new Point3();\n    nodePosition(node, pos);\n    return pos;\n}"
            ],
            [
                "edgeLength",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "/**\n * Compute the edge length of the given edge according to its two nodes\n * positions.\n *\n * @param id\n *            The identifier of the edge.\n * @return The edge length or -1 if the nodes of the edge have no positions.\n * @throws RuntimeException\n *             If the edge cannot be found.\n */\npublic static double edgeLength(Graph graph, String id) {\n    Edge edge = graph.getEdge(id);\n    if (edge != null)\n        return edgeLength(edge);\n    throw new RuntimeException(\"edge '\" + id + \"' cannot be found\");\n}"
            ],
            [
                "edgeLength",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "/**\n * Like {@link #edgeLength(Graph,String)} but use an existing edge as\n * argument.\n *\n * @param edge\n * @return The edge length or -1 if the nodes of the edge have no positions.\n */\npublic static double edgeLength(Edge edge) {\n    double[] xyz0 = nodePosition(edge.getNode0());\n    double[] xyz1 = nodePosition(edge.getNode1());\n    if (xyz0 == null || xyz1 == null)\n        return -1;\n    xyz0[0] = xyz1[0] - xyz0[0];\n    xyz0[1] = xyz1[1] - xyz0[1];\n    xyz0[2] = xyz1[2] - xyz0[2];\n    return Math.sqrt(xyz0[0] * xyz0[0] + xyz0[1] * xyz0[1] + xyz0[2] * xyz0[2]);\n}"
            ],
            [
                "getGlobalEnvironment",
                "org.graphstream.util",
                "Environment",
                "// --------- Static methods -----------\n/**\n * Access to the global shared environment for the whole JVM. This method\n * allows to access a shared environment, that can be read and written from\n * anywhere.\n * @return A singleton instance of the global environment.\n */\npublic static Environment getGlobalEnvironment() {\n    if (GLOBAL_ENV == null)\n        GLOBAL_ENV = new Environment();\n    return GLOBAL_ENV;\n}"
            ],
            [
                "falseFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> falseFilter() {\n    return new Filter<T>() {\n\n        public boolean isAvailable(T e) {\n            return false;\n        }\n    };\n}"
            ],
            [
                "trueFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> trueFilter() {\n    return new Filter<T>() {\n\n        public boolean isAvailable(T e) {\n            return true;\n        }\n    };\n}"
            ],
            [
                "byAttributeFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> byAttributeFilter(String key, Object expectedValue) {\n    return new ByAttributeFilter<T>(key, expectedValue);\n}"
            ],
            [
                "separateNodeAndEdgeFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element, U extends Element> Filter<Element> separateNodeAndEdgeFilter(Filter<T> nodeFilter, Filter<U> edgeFilter) {\n    return new SeparateNodeEdgeFilter<T, U>(nodeFilter, edgeFilter);\n}"
            ],
            [
                "byExtremitiesFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element, U extends Element> Filter<T> byExtremitiesFilter(Filter<U> f) {\n    return new ExtremitiesFilter<T, U>(f);\n}"
            ],
            [
                "byIdFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> byIdFilter(String idPattern) {\n    return new ByIdFilter<T>(idPattern);\n}"
            ],
            [
                "isContained",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> isContained(final Collection<? extends T> set) {\n    return new Filter<T>() {\n\n        public boolean isAvailable(T e) {\n            return set.contains(e);\n        }\n    };\n}"
            ],
            [
                "isIdContained",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> isIdContained(final Collection<String> set) {\n    return new Filter<T>() {\n\n        public boolean isAvailable(T e) {\n            return set.contains(e.getId());\n        }\n    };\n}"
            ],
            [
                "and",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> and(Filter<T> f1, Filter<T> f2) {\n    return new AndFilter<T>(f1, f2);\n}"
            ],
            [
                "or",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> or(Filter<T> f1, Filter<T> f2) {\n    return new OrFilter<T>(f1, f2);\n}"
            ],
            [
                "xor",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> xor(Filter<T> f1, Filter<T> f2) {\n    return new XorFilter<T>(f1, f2);\n}"
            ],
            [
                "not",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> not(Filter<T> f) {\n    return new NotFilter<T>(f);\n}"
            ],
            [
                "addEscapes",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "/**\n * Replaces unprintable characters by their escaped (or unicode escaped)\n * equivalents in the given string\n */\nprotected static final String addEscapes(String str) {\n    StringBuffer retval = new StringBuffer();\n    char ch;\n    for (int i = 0; i < str.length(); i++) {\n        switch(str.charAt(i)) {\n            case 0:\n                continue;\n            case '\\b':\n                retval.append(\"\\\\b\");\n                continue;\n            case '\\t':\n                retval.append(\"\\\\t\");\n                continue;\n            case '\\n':\n                retval.append(\"\\\\n\");\n                continue;\n            case '\\f':\n                retval.append(\"\\\\f\");\n                continue;\n            case '\\r':\n                retval.append(\"\\\\r\");\n                continue;\n            case '\\\"':\n                retval.append(\"\\\\\\\"\");\n                continue;\n            case '\\'':\n                retval.append(\"\\\\\\'\");\n                continue;\n            case '\\\\':\n                retval.append(\"\\\\\\\\\");\n                continue;\n            default:\n                if ((ch = str.charAt(i)) < 0x20 || ch > 0x7e) {\n                    String s = \"0000\" + Integer.toString(ch, 16);\n                    retval.append(\"\\\\u\" + s.substring(s.length() - 4, s.length()));\n                } else {\n                    retval.append(ch);\n                }\n                continue;\n        }\n    }\n    return retval.toString();\n}"
            ],
            [
                "LexicalError",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "/**\n * Returns a detailed message for the Error when it is thrown by the token\n * manager to indicate a lexical error. Parameters : EOFSeen : indicates if\n * EOF caused the lexical error curLexState : lexical state in which this\n * error occurred errorLine : line number when the error occurred\n * errorColumn : column number when the error occurred errorAfter : prefix\n * that was seen before this error occurred curchar : the offending\n * character Note: You can customize the lexical error message by modifying\n * this method.\n */\nprotected static String LexicalError(boolean EOFSeen, int lexState, int errorLine, int errorColumn, String errorAfter, char curChar) {\n    return (\"Lexical error at line \" + errorLine + \", column \" + errorColumn + \".  Encountered: \" + (EOFSeen ? \"<EOF> \" : (\"\\\"\" + addEscapes(String.valueOf(curChar)) + \"\\\"\") + \" (\" + (int) curChar + \"), \") + \"after : \\\"\" + addEscapes(errorAfter) + \"\\\"\");\n}"
            ],
            [
                "add_escapes",
                "org.graphstream.util.parser",
                "ParseException",
                "/**\n * Used to convert raw characters to their escaped version when these raw\n * version cannot be used as part of an ASCII string literal.\n */\nstatic String add_escapes(String str) {\n    StringBuffer retval = new StringBuffer();\n    char ch;\n    for (int i = 0; i < str.length(); i++) {\n        switch(str.charAt(i)) {\n            case 0:\n                continue;\n            case '\\b':\n                retval.append(\"\\\\b\");\n                continue;\n            case '\\t':\n                retval.append(\"\\\\t\");\n                continue;\n            case '\\n':\n                retval.append(\"\\\\n\");\n                continue;\n            case '\\f':\n                retval.append(\"\\\\f\");\n                continue;\n            case '\\r':\n                retval.append(\"\\\\r\");\n                continue;\n            case '\\\"':\n                retval.append(\"\\\\\\\"\");\n                continue;\n            case '\\'':\n                retval.append(\"\\\\\\'\");\n                continue;\n            case '\\\\':\n                retval.append(\"\\\\\\\\\");\n                continue;\n            default:\n                if ((ch = str.charAt(i)) < 0x20 || ch > 0x7e) {\n                    String s = \"0000\" + Integer.toString(ch, 16);\n                    retval.append(\"\\\\u\" + s.substring(s.length() - 4, s.length()));\n                } else {\n                    retval.append(ch);\n                }\n                continue;\n        }\n    }\n    return retval.toString();\n}"
            ],
            [
                "newToken",
                "org.graphstream.util.parser",
                "Token",
                "/**\n * Returns a new Token object, by default. However, if you want, you can\n * create and return subclass objects based on the value of ofKind. Simply\n * add the cases to the switch for all those special cases. For example, if\n * you have a subclass of Token called IDToken that you want to create if\n * ofKind is ID, simply add something like :\n *\n * case MyParserConstants.ID : return new IDToken(ofKind, image);\n *\n * to the following switch statement. Then you can cast matchedToken\n * variable to the appropriate type and use sit in your lexical actions.\n */\npublic static Token newToken(int ofKind, String image) {\n    switch(ofKind) {\n        default:\n            return new Token(ofKind, image);\n    }\n}"
            ],
            [
                "newToken",
                "org.graphstream.util.parser",
                "Token",
                "public static Token newToken(int ofKind) {\n    return newToken(ofKind, null);\n}"
            ],
            [
                "countStepInFile",
                "org.graphstream.util",
                "StepCounter",
                "/**\n * Count step contains in a file.\n *\n * @param path\n *            path to the file\n * @return count of step event in the file\n * @throws IOException\n * @see org.graphstream.stream.file.FileSourceFactory\n */\npublic static int countStepInFile(String path) throws IOException {\n    StepCounter counter = new StepCounter();\n    FileSource source = FileSourceFactory.sourceFor(path);\n    source.addElementSink(counter);\n    source.readAll(path);\n    return counter.getStepCount();\n}"
            ],
            [
                "GET",
                "org.graphstream.stream.net",
                "HTTPSource",
                "@SuppressWarnings(\"unchecked\")\nprotected static HashMap<String, Object> GET(HttpExchange ex) {\n    HashMap<String, Object> get = new HashMap<String, Object>();\n    String[] args = ex.getRequestURI().getRawQuery().split(\"[&]\");\n    for (String arg : args) {\n        String[] kv = arg.split(\"[=]\");\n        String k, v;\n        k = null;\n        v = null;\n        try {\n            if (kv.length > 0)\n                k = URLDecoder.decode(kv[0], System.getProperty(\"file.encoding\"));\n            if (kv.length > 1)\n                v = URLDecoder.decode(kv[1], System.getProperty(\"file.encoding\"));\n            if (get.containsKey(k)) {\n                Object o = get.get(k);\n                if (o instanceof LinkedList<?>)\n                    ((LinkedList<Object>) o).add(v);\n                else {\n                    LinkedList<Object> l = new LinkedList<Object>();\n                    l.add(o);\n                    l.add(v);\n                    get.put(k, l);\n                }\n            } else {\n                get.put(k, v);\n            }\n        } catch (UnsupportedEncodingException e) {\n            e.printStackTrace();\n        }\n    }\n    return get;\n}"
            ],
            [
                "sinkFor",
                "org.graphstream.stream.file",
                "FileSinkFactory",
                "/**\n * Looks at the file name given and its extension and propose a file output\n * for the format that match this extension.\n *\n * @param filename\n *            The file name where the graph will be written.\n * @return A file sink or null.\n */\npublic static FileSink sinkFor(String filename) {\n    if (filename.indexOf('.') > 0) {\n        String ext = filename.substring(filename.lastIndexOf('.') + 1);\n        ext = ext.toLowerCase();\n        if (ext2sink.containsKey(ext)) {\n            Class<? extends FileSink> fsink = ext2sink.get(ext);\n            try {\n                return fsink.newInstance();\n            } catch (InstantiationException e) {\n                e.printStackTrace();\n            } catch (IllegalAccessException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n    return null;\n}"
            ],
            [
                "formatId",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "protected static String formatId(String id) {\n    return \"node\" + id.replaceAll(\"\\\\W\", \"_\");\n}"
            ],
            [
                "getInt",
                "org.graphstream.stream.file.pajek",
                "PajekContext",
                "protected static int getInt(Token nb) throws ParseException {\n    try {\n        return Integer.parseInt(nb.image);\n    } catch (Exception e) {\n        throw new ParseException(String.format(\"%d:%d: %s not an integer\", nb.beginLine, nb.beginColumn, nb.image));\n    }\n}"
            ],
            [
                "getReal",
                "org.graphstream.stream.file.pajek",
                "PajekContext",
                "protected static double getReal(Token nb) throws ParseException {\n    try {\n        return Double.parseDouble(nb.image);\n    } catch (Exception e) {\n        throw new ParseException(String.format(\"%d:%d: %s not a real\", nb.beginLine, nb.beginColumn, nb.image));\n    }\n}"
            ],
            [
                "toColorValue",
                "org.graphstream.stream.file.pajek",
                "PajekContext",
                "public static String toColorValue(Token R, Token G, Token B) throws ParseException {\n    double r = getReal(R);\n    double g = getReal(G);\n    double b = getReal(B);\n    return String.format(\"rgb(%d, %d, %d)\", (int) (r * 255), (int) (g * 255), (int) (b * 255));\n}"
            ],
            [
                "sourceFor",
                "org.graphstream.stream.file",
                "FileSourceFactory",
                "/**\n * Create a file input for the given file name.\n *\n * <p>\n * This method first tests if the file is a regular file and is readable. If\n * so, it opens it and reads the magic cookie to test the known file formats\n * that can be inferred from their header. If it works, it returns a file\n * input for the format. Else it looks at the file name extension, and\n * returns a file input for the extension. Finally if all fail, it throws a\n * NotFoundException.\n * </p>\n *\n * <p>\n * Notice that this method only creates the file input and does not connect\n * it to a graph.\n * </p>\n *\n * @param fileName\n *            Name of the graph file.\n * @return A graph reader suitable for the fileName graph format.\n * @throws IOException\n *             If the file is not readable or accessible.\n */\npublic static FileSource sourceFor(String fileName) throws IOException {\n    File file = new File(fileName);\n    if (!file.isFile())\n        throw new IOException(\"not a regular file '\" + fileName + \"'\");\n    if (!file.canRead())\n        throw new IOException(\"not a readable file '\" + fileName + \"'\");\n    // Try to read the beginning of the file.\n    RandomAccessFile in = new RandomAccessFile(fileName, \"r\");\n    byte[] b = new byte[10];\n    int n = in.read(b, 0, 10);\n    // System.err.printf( \"[\" );\n    // for( int i=0; i<n; ++i )\n    // {\n    // System.err.printf( \"%c\", (char)b[i] );\n    // }\n    // System.err.printf( \"]%n\" );\n    in.close();\n    // Surely match a DGS file, as DGS files are well done and have a\n    // signature.\n    if (n >= 3 && b[0] == 'D' && b[1] == 'G' && b[2] == 'S') {\n        if (n >= 6 && b[3] == '0' && b[4] == '0') {\n            if (b[5] == '1' || b[5] == '2') {\n                return new FileSourceDGS1And2();\n            } else if (b[5] == '3' || b[5] == '4') {\n                return new FileSourceDGS();\n            }\n        }\n    }\n    // Maybe match a GML file as most GML files begin by the line \"graph [\",\n    // but not sure, you may create a GML file that starts by a comment, an\n    // empty line, with any kind of spaces, etc.\n    if (n >= 7 && b[0] == 'g' && b[1] == 'r' && b[2] == 'a' && b[3] == 'p' && b[4] == 'h' && b[5] == ' ' && b[6] == '[') {\n        return new org.graphstream.stream.file.FileSourceGML();\n    }\n    if (n >= 4 && b[0] == '(' && b[1] == 't' && b[2] == 'l' && b[3] == 'p')\n        return new FileSourceTLP();\n    // The web reader.\n    String flc = fileName.toLowerCase();\n    // If we did not found anything, we try with the filename extension ...\n    if (flc.endsWith(\".dgs\")) {\n        return new FileSourceDGS();\n    }\n    if (flc.endsWith(\".gml\") || flc.endsWith(\".dgml\")) {\n        return new org.graphstream.stream.file.FileSourceGML();\n    }\n    if (flc.endsWith(\".net\")) {\n        return new FileSourcePajek();\n    }\n    if (flc.endsWith(\".chaco\") || flc.endsWith(\".graph\")) {\n        // return new GraphReaderChaco();\n    }\n    if (flc.endsWith(\".dot\")) {\n        return new org.graphstream.stream.file.FileSourceDOT();\n    }\n    if (flc.endsWith(\".edge\")) {\n        return new FileSourceEdge();\n    }\n    if (flc.endsWith(\".lgl\")) {\n        return new FileSourceLGL();\n    }\n    if (flc.endsWith(\".ncol\")) {\n        return new FileSourceNCol();\n    }\n    if (flc.endsWith(\".tlp\")) {\n        return new FileSourceTLP();\n    }\n    if (flc.endsWith(\".xml\")) {\n        String root = getXMLRootElement(fileName);\n        if (root.equalsIgnoreCase(\"gexf\"))\n            return new FileSourceGEXF();\n        return new FileSourceGraphML();\n    }\n    if (flc.endsWith(\".gexf\")) {\n        return new FileSourceGEXF();\n    }\n    return null;\n}"
            ],
            [
                "getXMLRootElement",
                "org.graphstream.stream.file",
                "FileSourceFactory",
                "public static String getXMLRootElement(String fileName) throws IOException {\n    FileReader stream = new FileReader(fileName);\n    XMLEventReader reader;\n    XMLEvent e;\n    String root;\n    try {\n        reader = XMLInputFactory.newInstance().createXMLEventReader(stream);\n        do {\n            e = reader.nextEvent();\n        } while (!e.isStartElement() && !e.isEndDocument());\n        if (e.isEndDocument())\n            throw new IOException(\"document ended before catching root element\");\n        root = e.asStartElement().getName().getLocalPart();\n        reader.close();\n        stream.close();\n        return root;\n    } catch (XMLStreamException ex) {\n        throw new IOException(ex);\n    } catch (FactoryConfigurationError ex) {\n        throw new IOException(ex);\n    }\n}"
            ],
            [
                "formatStringForQuoting",
                "org.graphstream.stream.file",
                "FileSinkDGSUtility",
                "protected static String formatStringForQuoting(String str) {\n    return str.replaceAll(\"(^|[^\\\\\\\\])\\\"\", \"$1\\\\\\\\\\\"\");\n}"
            ],
            [
                "attributeString",
                "org.graphstream.stream.file",
                "FileSinkDGSUtility",
                "protected static String attributeString(String key, Object value, boolean remove) {\n    if (key == null || key.length() == 0)\n        return null;\n    if (remove) {\n        return String.format(\" -\\\"%s\\\"\", key);\n    } else {\n        if (value != null && value.getClass().isArray())\n            return String.format(\" \\\"%s\\\":%s\", key, arrayString(value));\n        else\n            return String.format(\" \\\"%s\\\":%s\", key, valueString(value));\n    }\n}"
            ],
            [
                "arrayString",
                "org.graphstream.stream.file",
                "FileSinkDGSUtility",
                "protected static String arrayString(Object value) {\n    if (value != null && value.getClass().isArray()) {\n        StringBuilder sb = new StringBuilder();\n        sb.append(\"{\");\n        if (Array.getLength(value) == 0)\n            sb.append(\"\\\"\\\"\");\n        else\n            sb.append(arrayString(Array.get(value, 0)));\n        for (int i = 1; i < Array.getLength(value); ++i) sb.append(String.format(\",%s\", arrayString(Array.get(value, i))));\n        sb.append(\"}\");\n        return sb.toString();\n    } else {\n        return valueString(value);\n    }\n}"
            ],
            [
                "valueString",
                "org.graphstream.stream.file",
                "FileSinkDGSUtility",
                "protected static String valueString(Object value) {\n    if (value == null)\n        return \"\\\"\\\"\";\n    if (value instanceof CharSequence) {\n        if (value instanceof String)\n            return String.format(\"\\\"%s\\\"\", formatStringForQuoting((String) value));\n        else\n            return String.format(\"\\\"%s\\\"\", (CharSequence) value);\n    } else if (value instanceof Number) {\n        Number nval = (Number) value;\n        if (value instanceof Integer || value instanceof Short || value instanceof Byte || value instanceof Long)\n            return String.format(Locale.US, \"%d\", nval.longValue());\n        else\n            return String.format(Locale.US, \"%f\", nval.doubleValue());\n    } else if (value instanceof Boolean) {\n        return String.format(Locale.US, \"%b\", ((Boolean) value));\n    } else if (value instanceof Character) {\n        return String.format(\"\\\"%c\\\"\", ((Character) value).charValue());\n    } else if (value instanceof Object[]) {\n        Object[] array = (Object[]) value;\n        int n = array.length;\n        StringBuffer sb = new StringBuffer();\n        if (array.length > 0)\n            sb.append(valueString(array[0]));\n        for (int i = 1; i < n; i++) {\n            sb.append(\",\");\n            sb.append(valueString(array[i]));\n        }\n        return sb.toString();\n    } else if (value instanceof HashMap<?, ?> || value instanceof CompoundAttribute) {\n        HashMap<?, ?> hash;\n        if (value instanceof CompoundAttribute)\n            hash = ((CompoundAttribute) value).toHashMap();\n        else\n            hash = (HashMap<?, ?>) value;\n        return hashToString(hash);\n    } else if (value instanceof Color) {\n        Color c = (Color) value;\n        return String.format(\"#%02X%02X%02X%02X\", c.getRed(), c.getGreen(), c.getBlue(), c.getAlpha());\n    } else {\n        return String.format(\"\\\"%s\\\"\", value.toString());\n    }\n}"
            ],
            [
                "hashToString",
                "org.graphstream.stream.file",
                "FileSinkDGSUtility",
                "protected static String hashToString(HashMap<?, ?> hash) {\n    StringBuilder sb = new StringBuilder();\n    sb.append(\"[ \");\n    for (Object key : hash.keySet()) {\n        sb.append(attributeString(key.toString(), hash.get(key), false));\n        sb.append(\",\");\n    }\n    sb.append(']');\n    return sb.toString();\n}"
            ],
            [
                "encodeObject",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Serializes an object and returns the Base64-encoded\n * version of that serialized object.\n *\n * <p>As of v 2.3, if the object\n * cannot be serialized or there is another error,\n * the method will throw an java.io.IOException. <b>This is new to v2.3!</b>\n * In earlier versions, it just returned a null value, but\n * in retrospect that's a pretty poor way to handle it.</p>\n *\n * The object is not GZip-compressed before being encoded.\n *\n * @param serializableObject The object to encode\n * @return The Base64-encoded object\n * @throws java.io.IOException if there is an error\n * @throws NullPointerException if serializedObject is null\n * @since 1.4\n */\npublic static String encodeObject(java.io.Serializable serializableObject) throws java.io.IOException {\n    return encodeObject(serializableObject, NO_OPTIONS);\n}"
            ],
            [
                "encodeObject",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end encodeObject\n/**\n * Serializes an object and returns the Base64-encoded\n * version of that serialized object.\n *\n * <p>As of v 2.3, if the object\n * cannot be serialized or there is another error,\n * the method will throw an java.io.IOException. <b>This is new to v2.3!</b>\n * In earlier versions, it just returned a null value, but\n * in retrospect that's a pretty poor way to handle it.</p>\n *\n * The object is not GZip-compressed before being encoded.\n * <p>\n * Example options:<pre>\n *   GZIP: gzip-compresses object before encoding it.\n *   DO_BREAK_LINES: break lines at 76 characters\n * </pre>\n * <p>\n * Example: <code>encodeObject( myObj, Base64.GZIP )</code> or\n * <p>\n * Example: <code>encodeObject( myObj, Base64.GZIP | Base64.DO_BREAK_LINES )</code>\n *\n * @param serializableObject The object to encode\n * @param options Specified options\n * @return The Base64-encoded object\n * @see Base64#GZIP\n * @see Base64#DO_BREAK_LINES\n * @throws java.io.IOException if there is an error\n * @since 2.0\n */\npublic static String encodeObject(java.io.Serializable serializableObject, int options) throws java.io.IOException {\n    if (serializableObject == null) {\n        throw new NullPointerException(\"Cannot serialize a null object.\");\n    }\n    // end if: null\n    // Streams\n    java.io.ByteArrayOutputStream baos = null;\n    java.io.OutputStream b64os = null;\n    java.util.zip.GZIPOutputStream gzos = null;\n    java.io.ObjectOutputStream oos = null;\n    try {\n        // ObjectOutputStream -> (GZIP) -> Base64 -> ByteArrayOutputStream\n        baos = new java.io.ByteArrayOutputStream();\n        b64os = new Base64.OutputStream(baos, ENCODE | options);\n        if ((options & GZIP) != 0) {\n            // Gzip\n            gzos = new java.util.zip.GZIPOutputStream(b64os);\n            oos = new java.io.ObjectOutputStream(gzos);\n        } else {\n            // Not gzipped\n            oos = new java.io.ObjectOutputStream(b64os);\n        }\n        oos.writeObject(serializableObject);\n    }// end try\n     catch (java.io.IOException e) {\n        // Catch it and then throw it immediately so that\n        // the finally{} block is called for cleanup.\n        throw e;\n    } finally // end catch\n    {\n        try {\n            oos.close();\n        } catch (Exception e) {\n        }\n        try {\n            gzos.close();\n        } catch (Exception e) {\n        }\n        try {\n            b64os.close();\n        } catch (Exception e) {\n        }\n        try {\n            baos.close();\n        } catch (Exception e) {\n        }\n    }\n    // end finally\n    // Return value according to relevant encoding.\n    try {\n        return new String(baos.toByteArray(), PREFERRED_ENCODING);\n    }// end try\n     catch (java.io.UnsupportedEncodingException uue) {\n        // Fall back to some Java default\n        return new String(baos.toByteArray());\n    }\n    // end catch\n}"
            ],
            [
                "encodeBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end encode\n/**\n * Encodes a byte array into Base64 notation.\n * Does not GZip-compress data.\n *\n * @param source The data to convert\n * @return The data in Base64-encoded form\n * @throws NullPointerException if source array is null\n * @since 1.4\n */\npublic static String encodeBytes(byte[] source) {\n    // Since we're not going to have the GZIP encoding turned on,\n    // we're not going to have an java.io.IOException thrown, so\n    // we should not force the user to have to catch it.\n    String encoded = null;\n    try {\n        encoded = encodeBytes(source, 0, source.length, NO_OPTIONS);\n    } catch (java.io.IOException ex) {\n        assert false : ex.getMessage();\n    }\n    // end catch\n    assert encoded != null;\n    return encoded;\n}"
            ],
            [
                "encodeBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end encodeBytes\n/**\n * Encodes a byte array into Base64 notation.\n * <p>\n * Example options:<pre>\n *   GZIP: gzip-compresses object before encoding it.\n *   DO_BREAK_LINES: break lines at 76 characters\n *     <i>Note: Technically, this makes your encoding non-compliant.</i>\n * </pre>\n * <p>\n * Example: <code>encodeBytes( myData, Base64.GZIP )</code> or\n * <p>\n * Example: <code>encodeBytes( myData, Base64.GZIP | Base64.DO_BREAK_LINES )</code>\n *\n * <p>As of v 2.3, if there is an error with the GZIP stream,\n * the method will throw an java.io.IOException. <b>This is new to v2.3!</b>\n * In earlier versions, it just returned a null value, but\n * in retrospect that's a pretty poor way to handle it.</p>\n *\n * @param source The data to convert\n * @param options Specified options\n * @return The Base64-encoded data as a String\n * @see Base64#GZIP\n * @see Base64#DO_BREAK_LINES\n * @throws java.io.IOException if there is an error\n * @throws NullPointerException if source array is null\n * @since 2.0\n */\npublic static String encodeBytes(byte[] source, int options) throws java.io.IOException {\n    return encodeBytes(source, 0, source.length, options);\n}"
            ],
            [
                "encodeBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end encodeBytes\n/**\n * Encodes a byte array into Base64 notation.\n * Does not GZip-compress data.\n *\n * <p>As of v 2.3, if there is an error,\n * the method will throw an java.io.IOException. <b>This is new to v2.3!</b>\n * In earlier versions, it just returned a null value, but\n * in retrospect that's a pretty poor way to handle it.</p>\n *\n * @param source The data to convert\n * @param off Offset in array where conversion should begin\n * @param len Length of data to convert\n * @return The Base64-encoded data as a String\n * @throws NullPointerException if source array is null\n * @throws IllegalArgumentException if source array, offset, or length are invalid\n * @since 1.4\n */\npublic static String encodeBytes(byte[] source, int off, int len) {\n    // Since we're not going to have the GZIP encoding turned on,\n    // we're not going to have an java.io.IOException thrown, so\n    // we should not force the user to have to catch it.\n    String encoded = null;\n    try {\n        encoded = encodeBytes(source, off, len, NO_OPTIONS);\n    } catch (java.io.IOException ex) {\n        assert false : ex.getMessage();\n    }\n    // end catch\n    assert encoded != null;\n    return encoded;\n}"
            ],
            [
                "encodeBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end encodeBytes\n/**\n * Encodes a byte array into Base64 notation.\n * <p>\n * Example options:<pre>\n *   GZIP: gzip-compresses object before encoding it.\n *   DO_BREAK_LINES: break lines at 76 characters\n *     <i>Note: Technically, this makes your encoding non-compliant.</i>\n * </pre>\n * <p>\n * Example: <code>encodeBytes( myData, Base64.GZIP )</code> or\n * <p>\n * Example: <code>encodeBytes( myData, Base64.GZIP | Base64.DO_BREAK_LINES )</code>\n *\n * <p>As of v 2.3, if there is an error with the GZIP stream,\n * the method will throw an java.io.IOException. <b>This is new to v2.3!</b>\n * In earlier versions, it just returned a null value, but\n * in retrospect that's a pretty poor way to handle it.</p>\n *\n * @param source The data to convert\n * @param off Offset in array where conversion should begin\n * @param len Length of data to convert\n * @param options Specified options\n * @return The Base64-encoded data as a String\n * @see Base64#GZIP\n * @see Base64#DO_BREAK_LINES\n * @throws java.io.IOException if there is an error\n * @throws NullPointerException if source array is null\n * @throws IllegalArgumentException if source array, offset, or length are invalid\n * @since 2.0\n */\npublic static String encodeBytes(byte[] source, int off, int len, int options) throws java.io.IOException {\n    byte[] encoded = encodeBytesToBytes(source, off, len, options);\n    // Return value according to relevant encoding.\n    try {\n        return new String(encoded, PREFERRED_ENCODING);\n    }// end try\n     catch (java.io.UnsupportedEncodingException uue) {\n        return new String(encoded);\n    }\n    // end catch\n}"
            ],
            [
                "encodeBytesToBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end encodeBytes\n/**\n * Similar to {@link #encodeBytes(byte[])} but returns\n * a byte array instead of instantiating a String. This is more efficient\n * if you're working with I/O streams and have large data sets to encode.\n *\n * @param source The data to convert\n * @return The Base64-encoded data as a byte[] (of ASCII characters)\n * @throws NullPointerException if source array is null\n * @since 2.3.1\n */\npublic static byte[] encodeBytesToBytes(byte[] source) {\n    byte[] encoded = null;\n    try {\n        encoded = encodeBytesToBytes(source, 0, source.length, Base64.NO_OPTIONS);\n    } catch (java.io.IOException ex) {\n        assert false : \"IOExceptions only come from GZipping, which is turned off: \" + ex.getMessage();\n    }\n    return encoded;\n}"
            ],
            [
                "encodeBytesToBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Similar to {@link #encodeBytes(byte[], int, int, int)} but returns\n * a byte array instead of instantiating a String. This is more efficient\n * if you're working with I/O streams and have large data sets to encode.\n *\n * @param source The data to convert\n * @param off Offset in array where conversion should begin\n * @param len Length of data to convert\n * @param options Specified options\n * @return The Base64-encoded data as a String\n * @see Base64#GZIP\n * @see Base64#DO_BREAK_LINES\n * @throws java.io.IOException if there is an error\n * @throws NullPointerException if source array is null\n * @throws IllegalArgumentException if source array, offset, or length are invalid\n * @since 2.3.1\n */\npublic static byte[] encodeBytesToBytes(byte[] source, int off, int len, int options) throws java.io.IOException {\n    if (source == null) {\n        throw new NullPointerException(\"Cannot serialize a null array.\");\n    }\n    // end if: null\n    if (off < 0) {\n        throw new IllegalArgumentException(\"Cannot have negative offset: \" + off);\n    }\n    // end if: off < 0\n    if (len < 0) {\n        throw new IllegalArgumentException(\"Cannot have length offset: \" + len);\n    }\n    // end if: len < 0\n    if (off + len > source.length) {\n        throw new IllegalArgumentException(String.format(\"Cannot have offset of %d and length of %d with array of length %d\", off, len, source.length));\n    }\n    // end if: off < 0\n    // Compress?\n    if ((options & GZIP) != 0) {\n        java.io.ByteArrayOutputStream baos = null;\n        java.util.zip.GZIPOutputStream gzos = null;\n        Base64.OutputStream b64os = null;\n        try {\n            // GZip -> Base64 -> ByteArray\n            baos = new java.io.ByteArrayOutputStream();\n            b64os = new Base64.OutputStream(baos, ENCODE | options);\n            gzos = new java.util.zip.GZIPOutputStream(b64os);\n            gzos.write(source, off, len);\n            gzos.close();\n        }// end try\n         catch (java.io.IOException e) {\n            // Catch it and then throw it immediately so that\n            // the finally{} block is called for cleanup.\n            throw e;\n        } finally // end catch\n        {\n            try {\n                gzos.close();\n            } catch (Exception e) {\n            }\n            try {\n                b64os.close();\n            } catch (Exception e) {\n            }\n            try {\n                baos.close();\n            } catch (Exception e) {\n            }\n        }\n        // end finally\n        return baos.toByteArray();\n    } else // end if: compress\n    // Else, don't compress. Better not to use streams at all then.\n    {\n        boolean breakLines = (options & DO_BREAK_LINES) != 0;\n        //int    len43   = len * 4 / 3;\n        //byte[] outBuff = new byte[   ( len43 )                      // Main 4:3\n        //                           + ( (len % 3) > 0 ? 4 : 0 )      // Account for padding\n        //                           + (breakLines ? ( len43 / MAX_LINE_LENGTH ) : 0) ]; // New lines\n        // Try to determine more precisely how big the array needs to be.\n        // If we get it right, we don't have to do an array copy, and\n        // we save a bunch of memory.\n        // Bytes needed for actual encoding\n        int encLen = (len / 3) * 4 + (len % 3 > 0 ? 4 : 0);\n        if (breakLines) {\n            // Plus extra newline characters\n            encLen += encLen / MAX_LINE_LENGTH;\n        }\n        byte[] outBuff = new byte[encLen];\n        int d = 0;\n        int e = 0;\n        int len2 = len - 2;\n        int lineLength = 0;\n        for (; d < len2; d += 3, e += 4) {\n            encode3to4(source, d + off, 3, outBuff, e, options);\n            lineLength += 4;\n            if (breakLines && lineLength >= MAX_LINE_LENGTH) {\n                outBuff[e + 4] = NEW_LINE;\n                e++;\n                lineLength = 0;\n            }\n            // end if: end of line\n        }\n        // en dfor: each piece of array\n        if (d < len) {\n            encode3to4(source, d + off, len - d, outBuff, e, options);\n            e += 4;\n        }\n        // end if: some padding needed\n        // Only resize array if we didn't guess it right.\n        if (e <= outBuff.length - 1) {\n            // If breaking lines and the last byte falls right at\n            // the line length (76 bytes per line), there will be\n            // one extra byte, and the array will need to be resized.\n            // Not too bad of an estimate on array size, I'd say.\n            byte[] finalOut = new byte[e];\n            System.arraycopy(outBuff, 0, finalOut, 0, e);\n            //System.err.println(\"Having to resize array from \" + outBuff.length + \" to \" + e );\n            return finalOut;\n        } else {\n            //System.err.println(\"No need to resize array.\");\n            return outBuff;\n        }\n    }\n    // end else: don't compress\n}"
            ],
            [
                "decode",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end decodeToBytes\n/**\n * Low-level access to decoding ASCII characters in\n * the form of a byte array. <strong>Ignores GUNZIP option, if\n * it's set.</strong> This is not generally a recommended method,\n * although it is used internally as part of the decoding process.\n * Special case: if len = 0, an empty array is returned. Still,\n * if you need more speed and reduced memory footprint (and aren't\n * gzipping), consider this method.\n *\n * @param source The Base64 encoded data\n * @return decoded data\n * @since 2.3.1\n */\npublic static byte[] decode(byte[] source) throws java.io.IOException {\n    byte[] decoded = null;\n    //        try {\n    decoded = decode(source, 0, source.length, Base64.NO_OPTIONS);\n    //        } catch( java.io.IOException ex ) {\n    //            assert false : \"IOExceptions only come from GZipping, which is turned off: \" + ex.getMessage();\n    //        }\n    return decoded;\n}"
            ],
            [
                "decode",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Low-level access to decoding ASCII characters in\n * the form of a byte array. <strong>Ignores GUNZIP option, if\n * it's set.</strong> This is not generally a recommended method,\n * although it is used internally as part of the decoding process.\n * Special case: if len = 0, an empty array is returned. Still,\n * if you need more speed and reduced memory footprint (and aren't\n * gzipping), consider this method.\n *\n * @param source The Base64 encoded data\n * @param off    The offset of where to begin decoding\n * @param len    The length of characters to decode\n * @param options Can specify options such as alphabet type to use\n * @return decoded data\n * @throws java.io.IOException If bogus characters exist in source data\n * @since 1.3\n */\npublic static byte[] decode(byte[] source, int off, int len, int options) throws java.io.IOException {\n    // Lots of error checking and exception throwing\n    if (source == null) {\n        throw new NullPointerException(\"Cannot decode null source array.\");\n    }\n    // end if\n    if (off < 0 || off + len > source.length) {\n        throw new IllegalArgumentException(String.format(\"Source array with length %d cannot have offset of %d and process %d bytes.\", source.length, off, len));\n    }\n    // end if\n    if (len == 0) {\n        return new byte[0];\n    } else if (len < 4) {\n        throw new IllegalArgumentException(\"Base64-encoded string must have at least four characters, but length specified was \" + len);\n    }\n    // end if\n    byte[] DECODABET = getDecodabet(options);\n    // Estimate on array size\n    int len34 = len * 3 / 4;\n    // Upper limit on size of output\n    byte[] outBuff = new byte[len34];\n    // Keep track of where we're writing\n    int outBuffPosn = 0;\n    // Four byte buffer from source, eliminating white space\n    byte[] b4 = new byte[4];\n    // Keep track of four byte input buffer\n    int b4Posn = 0;\n    // Source array counter\n    int i = 0;\n    // Special value from DECODABET\n    byte sbiDecode = 0;\n    for (i = off; i < off + len; i++) {\n        // Loop through source\n        sbiDecode = DECODABET[source[i] & 0xFF];\n        // White space, Equals sign, or legit Base64 character\n        // Note the values such as -5 and -9 in the\n        // DECODABETs at the top of the file.\n        if (sbiDecode >= WHITE_SPACE_ENC) {\n            if (sbiDecode >= EQUALS_SIGN_ENC) {\n                // Save non-whitespace\n                b4[b4Posn++] = source[i];\n                if (b4Posn > 3) {\n                    // Time to decode?\n                    outBuffPosn += decode4to3(b4, 0, outBuff, outBuffPosn, options);\n                    b4Posn = 0;\n                    // If that was the equals sign, break out of 'for' loop\n                    if (source[i] == EQUALS_SIGN) {\n                        break;\n                    }\n                    // end if: equals sign\n                }\n                // end if: quartet built\n            }\n            // end if: equals sign or better\n        } else // end if: white space, equals sign or better\n        {\n            // There's a bad input character in the Base64 stream.\n            throw new java.io.IOException(String.format(\"Bad Base64 input character decimal %d in array position %d\", ((int) source[i]) & 0xFF, i));\n        }\n        // end else:\n    }\n    // each input character\n    byte[] out = new byte[outBuffPosn];\n    System.arraycopy(outBuff, 0, out, 0, outBuffPosn);\n    return out;\n}"
            ],
            [
                "decode",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end decode\n/**\n * Decodes data from Base64 notation, automatically\n * detecting gzip-compressed data and decompressing it.\n *\n * @param s the string to decode\n * @return the decoded data\n * @throws java.io.IOException If there is a problem\n * @since 1.4\n */\npublic static byte[] decode(String s) throws java.io.IOException {\n    return decode(s, NO_OPTIONS);\n}"
            ],
            [
                "decode",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Decodes data from Base64 notation, automatically\n * detecting gzip-compressed data and decompressing it.\n *\n * @param s the string to decode\n * @param options encode options such as URL_SAFE\n * @return the decoded data\n * @throws java.io.IOException if there is an error\n * @throws NullPointerException if <tt>s</tt> is null\n * @since 1.4\n */\npublic static byte[] decode(String s, int options) throws java.io.IOException {\n    if (s == null) {\n        throw new NullPointerException(\"Input string was null.\");\n    }\n    // end if\n    byte[] bytes;\n    try {\n        bytes = s.getBytes(PREFERRED_ENCODING);\n    }// end try\n     catch (java.io.UnsupportedEncodingException uee) {\n        bytes = s.getBytes();\n    }\n    // end catch\n    //</change>\n    // Decode\n    bytes = decode(bytes, 0, bytes.length, options);\n    // Check to see if it's gzip-compressed\n    // GZIP Magic Two-Byte Number: 0x8b1f (35615)\n    boolean dontGunzip = (options & DONT_GUNZIP) != 0;\n    if ((bytes != null) && (bytes.length >= 4) && (!dontGunzip)) {\n        int head = ((int) bytes[0] & 0xff) | ((bytes[1] << 8) & 0xff00);\n        if (java.util.zip.GZIPInputStream.GZIP_MAGIC == head) {\n            java.io.ByteArrayInputStream bais = null;\n            java.util.zip.GZIPInputStream gzis = null;\n            java.io.ByteArrayOutputStream baos = null;\n            byte[] buffer = new byte[2048];\n            int length = 0;\n            try {\n                baos = new java.io.ByteArrayOutputStream();\n                bais = new java.io.ByteArrayInputStream(bytes);\n                gzis = new java.util.zip.GZIPInputStream(bais);\n                while ((length = gzis.read(buffer)) >= 0) {\n                    baos.write(buffer, 0, length);\n                }\n                // end while: reading input\n                // No error? Get new bytes.\n                bytes = baos.toByteArray();\n            }// end try\n             catch (java.io.IOException e) {\n                e.printStackTrace();\n                // Just return originally-decoded bytes\n            } finally // end catch\n            {\n                try {\n                    baos.close();\n                } catch (Exception e) {\n                }\n                try {\n                    gzis.close();\n                } catch (Exception e) {\n                }\n                try {\n                    bais.close();\n                } catch (Exception e) {\n                }\n            }\n            // end finally\n        }\n        // end if: gzipped\n    }\n    // end if: bytes.length >= 2\n    return bytes;\n}"
            ],
            [
                "decodeToObject",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end decode\n/**\n * Attempts to decode Base64 data and deserialize a Java\n * Object within. Returns <tt>null</tt> if there was an error.\n *\n * @param encodedObject The Base64 data to decode\n * @return The decoded and deserialized object\n * @throws NullPointerException if encodedObject is null\n * @throws java.io.IOException if there is a general error\n * @throws ClassNotFoundException if the decoded object is of a\n *         class that cannot be found by the JVM\n * @since 1.5\n */\npublic static Object decodeToObject(String encodedObject) throws java.io.IOException, java.lang.ClassNotFoundException {\n    return decodeToObject(encodedObject, NO_OPTIONS, null);\n}"
            ],
            [
                "decodeToObject",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Attempts to decode Base64 data and deserialize a Java\n * Object within. Returns <tt>null</tt> if there was an error.\n * If <tt>loader</tt> is not null, it will be the class loader\n * used when deserializing.\n *\n * @param encodedObject The Base64 data to decode\n * @param options Various parameters related to decoding\n * @param loader Optional class loader to use in deserializing classes.\n * @return The decoded and deserialized object\n * @throws NullPointerException if encodedObject is null\n * @throws java.io.IOException if there is a general error\n * @throws ClassNotFoundException if the decoded object is of a\n *         class that cannot be found by the JVM\n * @since 2.3.4\n */\npublic static Object decodeToObject(String encodedObject, int options, final ClassLoader loader) throws java.io.IOException, java.lang.ClassNotFoundException {\n    // Decode and gunzip if necessary\n    byte[] objBytes = decode(encodedObject, options);\n    java.io.ByteArrayInputStream bais = null;\n    java.io.ObjectInputStream ois = null;\n    Object obj = null;\n    try {\n        bais = new java.io.ByteArrayInputStream(objBytes);\n        // If no custom class loader is provided, use Java's builtin OIS.\n        if (loader == null) {\n            ois = new java.io.ObjectInputStream(bais);\n        } else // end if: no loader provided\n        // Else make a customized object input stream that uses\n        // the provided class loader.\n        {\n            ois = new java.io.ObjectInputStream(bais) {\n\n                @Override\n                public Class<?> resolveClass(java.io.ObjectStreamClass streamClass) throws java.io.IOException, ClassNotFoundException {\n                    Class<?> c = Class.forName(streamClass.getName(), false, loader);\n                    if (c == null) {\n                        return super.resolveClass(streamClass);\n                    } else {\n                        // Class loader knows of this class.\n                        return c;\n                    }\n                    // end else: not null\n                }\n            };\n            // end ois\n        }\n        // end else: no custom class loader\n        obj = ois.readObject();\n    }// end try\n     catch (java.io.IOException e) {\n        // Catch and throw in order to execute finally{}\n        throw e;\n    }// end catch\n     catch (java.lang.ClassNotFoundException e) {\n        // Catch and throw in order to execute finally{}\n        throw e;\n    } finally // end catch\n    {\n        try {\n            bais.close();\n        } catch (Exception e) {\n        }\n        try {\n            ois.close();\n        } catch (Exception e) {\n        }\n    }\n    // end finally\n    return obj;\n}"
            ],
            [
                "decodeFromFile",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end decodeToFile\n/**\n * Convenience method for reading a base64-encoded\n * file and decoding it.\n *\n * <p>As of v 2.3, if there is a error,\n * the method will throw an java.io.IOException. <b>This is new to v2.3!</b>\n * In earlier versions, it just returned false, but\n * in retrospect that's a pretty poor way to handle it.</p>\n *\n * @param filename Filename for reading encoded data\n * @return decoded byte array\n * @throws java.io.IOException if there is an error\n * @since 2.1\n */\npublic static byte[] decodeFromFile(String filename) throws java.io.IOException {\n    byte[] decodedData = null;\n    Base64.InputStream bis = null;\n    try {\n        // Set up some useful variables\n        java.io.File file = new java.io.File(filename);\n        byte[] buffer = null;\n        int length = 0;\n        int numBytes = 0;\n        // Check for size of file\n        if (file.length() > Integer.MAX_VALUE) {\n            throw new java.io.IOException(\"File is too big for this convenience method (\" + file.length() + \" bytes).\");\n        }\n        // end if: file too big for int index\n        buffer = new byte[(int) file.length()];\n        // Open a stream\n        bis = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(file)), Base64.DECODE);\n        // Read until done\n        while ((numBytes = bis.read(buffer, length, 4096)) >= 0) {\n            length += numBytes;\n        }\n        // end while\n        // Save in a variable to return\n        decodedData = new byte[length];\n        System.arraycopy(buffer, 0, decodedData, 0, length);\n    }// end try\n     catch (java.io.IOException e) {\n        // Catch and release to execute finally{}\n        throw e;\n    } finally // end catch: java.io.IOException\n    {\n        try {\n            bis.close();\n        } catch (Exception e) {\n        }\n    }\n    // end finally\n    return decodedData;\n}"
            ],
            [
                "encodeFromFile",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end decodeFromFile\n/**\n * Convenience method for reading a binary file\n * and base64-encoding it.\n *\n * <p>As of v 2.3, if there is a error,\n * the method will throw an java.io.IOException. <b>This is new to v2.3!</b>\n * In earlier versions, it just returned false, but\n * in retrospect that's a pretty poor way to handle it.</p>\n *\n * @param filename Filename for reading binary data\n * @return base64-encoded string\n * @throws java.io.IOException if there is an error\n * @since 2.1\n */\npublic static String encodeFromFile(String filename) throws java.io.IOException {\n    String encodedData = null;\n    Base64.InputStream bis = null;\n    try {\n        // Set up some useful variables\n        java.io.File file = new java.io.File(filename);\n        // Need max() for math on small files (v2.2.1); Need +1 for a few corner cases (v2.3.5)\n        byte[] buffer = new byte[Math.max((int) (file.length() * 1.4 + 1), 40)];\n        int length = 0;\n        int numBytes = 0;\n        // Open a stream\n        bis = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(file)), Base64.ENCODE);\n        // Read until done\n        while ((numBytes = bis.read(buffer, length, 4096)) >= 0) {\n            length += numBytes;\n        }\n        // end while\n        // Save in a variable to return\n        encodedData = new String(buffer, 0, length, Base64.PREFERRED_ENCODING);\n    }// end try\n     catch (java.io.IOException e) {\n        // Catch and release to execute finally{}\n        throw e;\n    } finally // end catch: java.io.IOException\n    {\n        try {\n            bis.close();\n        } catch (Exception e) {\n        }\n    }\n    // end finally\n    return encodedData;\n}"
            ],
            [
                "unmutableGraph",
                "org.graphstream.graph.implementations",
                "Graphs",
                "public static Graph unmutableGraph(Graph g) {\n    return null;\n}"
            ],
            [
                "synchronizedGraph",
                "org.graphstream.graph.implementations",
                "Graphs",
                "/**\n * Synchronizes a graph. The returned graph can be accessed and modified by\n * several threads. You lose genericity in methods returning edge or node\n * because each element (graph, nodes and edges) is wrapped into a\n * synchronized wrapper which breaks original elements class.\n *\n * @param g\n *            the graph to synchronize\n * @return a synchronized wrapper for g\n */\npublic static Graph synchronizedGraph(Graph g) {\n    return new SynchronizedGraph(g);\n}"
            ],
            [
                "merge",
                "org.graphstream.graph.implementations",
                "Graphs",
                "/**\n * Merge several graphs in one. A new graph is created, that will contain\n * the result. The method will try to create a graph of the same class that\n * the first graph to merge (it needs to have a constructor with a String).\n * Else, a MultiGraph is used.\n *\n * @param graphs\n *            graphs to merge\n * @return merge result\n */\npublic static Graph merge(Graph... graphs) {\n    if (graphs == null)\n        return new DefaultGraph(\"void-merge\");\n    String id = \"merge\";\n    for (Graph g : graphs) id += \"-\" + g.getId();\n    Graph result;\n    try {\n        Class<? extends Graph> cls = graphs[0].getClass();\n        result = cls.getConstructor(String.class).newInstance(id);\n    } catch (Exception e) {\n        logger.warning(String.format(\"Cannot create a graph of %s.\", graphs[0].getClass().getName()));\n        result = new MultiGraph(id);\n    }\n    mergeIn(result, graphs);\n    return result;\n}"
            ],
            [
                "clone",
                "org.graphstream.graph.implementations",
                "Graphs",
                "/**\n * Clone a given graph with same node/edge structure and same attributes.\n *\n * @param g\n *            the graph to clone\n * @return a copy of g\n */\npublic static Graph clone(Graph g) {\n    Graph copy;\n    try {\n        Class<? extends Graph> cls = g.getClass();\n        copy = cls.getConstructor(String.class).newInstance(g.getId());\n    } catch (Exception e) {\n        logger.warning(String.format(\"Cannot create a graph of %s.\", g.getClass().getName()));\n        copy = new AdjacencyListGraph(g.getId());\n    }\n    copyAttributes(g, copy);\n    for (int i = 0; i < g.getNodeCount(); i++) {\n        Node source = g.getNode(i);\n        Node target = copy.addNode(source.getId());\n        copyAttributes(source, target);\n    }\n    for (int i = 0; i < g.getEdgeCount(); i++) {\n        Edge source = g.getEdge(i);\n        Edge target = copy.addEdge(source.getId(), source.getSourceNode().getId(), source.getTargetNode().getId(), source.isDirected());\n        copyAttributes(source, target);\n    }\n    return copy;\n}"
            ]
        ],
        "tokensProjectClassesNonPrivateStaticAttributes": [
            [
                "version16",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static boolean version16 = false;"
            ],
            [
                "predefFractions",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[][] predefFractions = new float[11][];"
            ],
            [
                "predefFractions2",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions2 = { 0f, 1f };"
            ],
            [
                "predefFractions3",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions3 = { 0f, 0.5f, 1f };"
            ],
            [
                "predefFractions4",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions4 = { 0f, 0.33f, 0.66f, 1f };"
            ],
            [
                "predefFractions5",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions5 = { 0f, 0.25f, 0.5f, 0.75f, 1f };"
            ],
            [
                "predefFractions6",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions6 = { 0f, 0.2f, 0.4f, 0.6f, 0.8f, 1f };"
            ],
            [
                "predefFractions7",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions7 = { 0f, 0.1666f, 0.3333f, 0.4999f, 0.6666f, 0.8333f, 1f };"
            ],
            [
                "predefFractions8",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions8 = { 0f, 0.1428f, 0.2856f, 0.4284f, 0.5712f, 0.7140f, 0.8568f, 1f };"
            ],
            [
                "predefFractions9",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions9 = { 0f, 0.125f, 0.25f, 0.375f, 0.5f, 0.625f, .75f, 0.875f, 1f };"
            ],
            [
                "predefFractions10",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions10 = { 0f, 0.1111f, 0.2222f, 0.3333f, 0.4444f, 0.5555f, 0.6666f, 0.7777f, 0.8888f, 1f };"
            ],
            [
                "defaultImageCache",
                "org.graphstream.ui.swingViewer.util",
                "ImageCache",
                "/**\n * The default singleton image cache instance.\n */\nprotected static ImageCache defaultImageCache;"
            ],
            [
                "dots",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "protected static float[] dots = { 1f, 1f };"
            ],
            [
                "dashes",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "protected static float[] dashes = { 3f, 3f };"
            ],
            [
                "defaultFontCache",
                "org.graphstream.ui.swingViewer.util",
                "FontCache",
                "/**\n * The default font cache.\n */\npublic static FontCache defaultFontCache;"
            ],
            [
                "NULL_POINT2",
                "org.graphstream.ui.geom",
                "Point2",
                "// Attributes -- Shared\n/**\n * Specific point at (0,0).\n */\npublic static final Point2 NULL_POINT2 = new Point2(0, 0);"
            ],
            [
                "NULL_POINT3",
                "org.graphstream.ui.geom",
                "Point3",
                "// Attributes -- Shared\n/**\n * Specific point at (0,0,0).\n */\npublic static final Point3 NULL_POINT3 = new Point3(0, 0, 0);"
            ],
            [
                "DEFAULT_VIEW_ID",
                "org.graphstream.ui.view",
                "Viewer",
                "// Attributes\n/**\n * Name of the default view.\n */\npublic static String DEFAULT_VIEW_ID = \"defaultView\";"
            ],
            [
                "jjbitVec0",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };"
            ],
            [
                "jjnextStates",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "static final int[] jjnextStates = { 48, 49, 52, 54, 55, 65, 69, 2, 4, 6, 10, 16, 23, 33, 50, 52, 54, 55, 57, 58, 60, 61, 66, 68, 70, 71 };"
            ],
            [
                "jjstrLiteralImages",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "/**\n * Token literal values.\n */\npublic static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, \"\\56\", \"\\173\", \"\\175\", \"\\50\", \"\\51\", \"\\43\", \"\\72\", \"\\73\", \"\\54\", \"\\162\\147\\142\\141\", \"\\162\\147\\142\", null, null, null, \"\\165\\162\\154\", \"\\147\\162\\141\\160\\150\", \"\\145\\144\\147\\145\", \"\\156\\157\\144\\145\", \"\\163\\160\\162\\151\\164\\145\", \"\\146\\151\\154\\154\\55\\155\\157\\144\\145\", \"\\146\\151\\154\\154\\55\\143\\157\\154\\157\\162\", \"\\146\\151\\154\\154\\55\\151\\155\\141\\147\\145\", \"\\163\\164\\162\\157\\153\\145\\55\\155\\157\\144\\145\", \"\\163\\164\\162\\157\\153\\145\\55\\143\\157\\154\\157\\162\", \"\\163\\164\\162\\157\\153\\145\\55\\167\\151\\144\\164\\150\", \"\\163\\150\\141\\144\\157\\167\\55\\155\\157\\144\\145\", \"\\163\\150\\141\\144\\157\\167\\55\\143\\157\\154\\157\\162\", \"\\163\\150\\141\\144\\157\\167\\55\\167\\151\\144\\164\\150\", \"\\163\\150\\141\\144\\157\\167\\55\\157\\146\\146\\163\\145\\164\", \"\\164\\145\\170\\164\\55\\155\\157\\144\\145\", \"\\164\\145\\170\\164\\55\\143\\157\\154\\157\\162\", \"\\164\\145\\170\\164\\55\\163\\164\\171\\154\\145\", \"\\164\\145\\170\\164\\55\\146\\157\\156\\164\", \"\\164\\145\\170\\164\\55\\163\\151\\172\\145\", \"\\164\\145\\170\\164\\55\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\\55\\155\\157\\144\\145\", \"\\164\\145\\170\\164\\55\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\", \"\\164\\145\\170\\164\\55\\142\\141\\143\\153\\147\\162\\157\\165\\156\\144\\55\\155\\157\\144\\145\", \"\\164\\145\\170\\164\\55\\142\\141\\143\\153\\147\\162\\157\\165\\156\\144\\55\\143\\157\\154\\157\\162\", \"\\164\\145\\170\\164\\55\\157\\146\\146\\163\\145\\164\", \"\\164\\145\\170\\164\\55\\160\\141\\144\\144\\151\\156\\147\", \"\\151\\143\\157\\156\\55\\155\\157\\144\\145\", \"\\151\\143\\157\\156\", \"\\160\\141\\144\\144\\151\\156\\147\", \"\\172\\55\\151\\156\\144\\145\\170\", \"\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\\55\\155\\157\\144\\145\", \"\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\", \"\\163\\150\\141\\160\\145\", \"\\163\\151\\172\\145\", \"\\163\\151\\172\\145\\55\\155\\157\\144\\145\", \"\\163\\150\\141\\160\\145\\55\\160\\157\\151\\156\\164\\163\", \"\\164\\145\\170\\164\\55\\141\\154\\151\\147\\156\\155\\145\\156\\164\", \"\\152\\143\\157\\155\\160\\157\\156\\145\\156\\164\", \"\\141\\162\\162\\157\\167\\55\\151\\155\\141\\147\\145\", \"\\141\\162\\162\\157\\167\\55\\163\\151\\172\\145\", \"\\141\\162\\162\\157\\167\\55\\163\\150\\141\\160\\145\", \"\\163\\160\\162\\151\\164\\145\\55\\157\\162\\151\\145\\156\\164\\141\\164\\151\\157\\156\", \"\\143\\141\\156\\166\\141\\163\\55\\143\\157\\154\\157\\162\", \"\\160\\154\\141\\151\\156\", \"\\144\\171\\156\\55\\160\\154\\141\\151\\156\", \"\\144\\171\\156\\55\\163\\151\\172\\145\", \"\\144\\171\\156\\55\\151\\143\\157\\156\", \"\\144\\141\\163\\150\\145\\163\", \"\\144\\157\\164\\163\", \"\\144\\157\\165\\142\\154\\145\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\144\\151\\141\\147\\157\\156\\141\\154\\61\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\144\\151\\141\\147\\157\\156\\141\\154\\62\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\150\\157\\162\\151\\172\\157\\156\\164\\141\\154\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\162\\141\\144\\151\\141\\154\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\166\\145\\162\\164\\151\\143\\141\\154\", \"\\150\\151\\144\\144\\145\\156\", \"\\151\\155\\141\\147\\145\\55\\164\\151\\154\\145\\144\", \"\\151\\155\\141\\147\\145\\55\\163\\143\\141\\154\\145\\144\", \"\\151\\155\\141\\147\\145\\55\\163\\143\\141\\154\\145\\144\\55\\162\\141\\164\\151\\157\\55\\155\\141\\170\", \"\\151\\155\\141\\147\\145\\55\\163\\143\\141\\154\\145\\144\\55\\162\\141\\164\\151\\157\\55\\155\\151\\156\", \"\\156\\157\\156\\145\", \"\\156\\157\\162\\155\\141\\154\", \"\\164\\162\\165\\156\\143\\141\\164\\145\\144\", \"\\172\\157\\157\\155\\55\\162\\141\\156\\147\\145\", \"\\141\\164\\55\\172\\157\\157\\155\", \"\\165\\156\\144\\145\\162\\55\\172\\157\\157\\155\", \"\\157\\166\\145\\162\\55\\172\\157\\157\\155\", \"\\172\\157\\157\\155\\163\", \"\\146\\151\\164\", \"\\142\\157\\154\\144\", \"\\142\\157\\154\\144\\55\\151\\164\\141\\154\\151\\143\", \"\\151\\164\\141\\154\\151\\143\", \"\\141\\154\\157\\156\\147\", \"\\141\\164\\55\\154\\145\\146\\164\", \"\\141\\164\\55\\162\\151\\147\\150\\164\", \"\\143\\145\\156\\164\\145\\162\", \"\\154\\145\\146\\164\", \"\\162\\151\\147\\150\\164\", \"\\165\\156\\144\\145\\162\", \"\\141\\142\\157\\166\\145\", \"\\152\\165\\163\\164\\151\\146\\171\", \"\\143\\151\\162\\143\\154\\145\", \"\\164\\162\\151\\141\\156\\147\\154\\145\", \"\\146\\162\\145\\145\\160\\154\\141\\156\\145\", \"\\164\\145\\170\\164\\55\\142\\157\\170\", \"\\164\\145\\170\\164\\55\\162\\157\\165\\156\\144\\145\\144\\55\\142\\157\\170\", \"\\164\\145\\170\\164\\55\\143\\151\\162\\143\\154\\145\", \"\\164\\145\\170\\164\\55\\144\\151\\141\\155\\157\\156\\144\", \"\\164\\145\\170\\164\\55\\160\\141\\162\\141\\147\\162\\141\\160\\150\", \"\\142\\157\\170\", \"\\162\\157\\165\\156\\144\\145\\144\\55\\142\\157\\170\", \"\\143\\162\\157\\163\\163\", \"\\144\\151\\141\\155\\157\\156\\144\", \"\\160\\157\\154\\171\\147\\157\\156\", \"\\142\\165\\164\\164\\157\\156\", \"\\164\\145\\170\\164\\55\\146\\151\\145\\154\\144\", \"\\160\\141\\156\\145\\154\", \"\\154\\151\\156\\145\", \"\\160\\157\\154\\171\\154\\151\\156\\145\", \"\\160\\157\\154\\171\\154\\151\\156\\145\\55\\163\\143\\141\\154\\145\\144\", \"\\141\\156\\147\\154\\145\", \"\\143\\165\\142\\151\\143\\55\\143\\165\\162\\166\\145\", \"\\142\\154\\157\\142\", \"\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\114\\55\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\150\\157\\162\\151\\172\\157\\156\\164\\141\\154\\55\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\166\\145\\162\\164\\151\\143\\141\\154\\55\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\141\\162\\162\\157\\167\", \"\\146\\154\\157\\167\", \"\\160\\151\\145\\55\\143\\150\\141\\162\\164\", \"\\151\\155\\141\\147\\145\", \"\\151\\155\\141\\147\\145\\163\", \"\\146\\162\\157\\155\", \"\\156\\157\\144\\145\\60\", \"\\164\\157\", \"\\156\\157\\144\\145\\61\", \"\\160\\162\\157\\152\\145\\143\\164\\151\\157\\156\", \"\\143\\154\\151\\143\\153\\145\\144\", \"\\163\\145\\154\\145\\143\\164\\145\\144\", null, null };"
            ],
            [
                "lexStateNames",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "/**\n * Lexer state names.\n */\npublic static final String[] lexStateNames = { \"DEFAULT\" };"
            ],
            [
                "jjtoToken",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "static final long[] jjtoToken = { 0xfffffffffffffe01L, 0xffffffffffffffffL, 0xffffL };"
            ],
            [
                "jjtoSkip",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "static final long[] jjtoSkip = { 0x1eL, 0x0L, 0x0L };"
            ],
            [
                "colorMap",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "// Static\n/**\n * A set of colour names mapped to real AWT Colour objects.\n */\nprotected static HashMap<String, Color> colorMap;"
            ],
            [
                "sharpColor1",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Pattern to ensure a \"#FFFFFF\" colour is recognised.\n */\nprotected static Pattern sharpColor1, sharpColor2;"
            ],
            [
                "sharpColor2",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Pattern to ensure a \"#FFFFFF\" colour is recognised.\n */\nprotected static Pattern sharpColor1, sharpColor2;"
            ],
            [
                "cssColor",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Pattern to ensure a CSS style \"rgb(1,2,3)\" colour is recognised.\n */\nprotected static Pattern cssColor;"
            ],
            [
                "cssColorA",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Pattern to ensure a CSS style \"rgba(1,2,3,4)\" colour is recognised.\n */\nprotected static Pattern cssColorA;"
            ],
            [
                "awtColor",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Pattern to ensure that java.awt.Color.toString() strings are recognised\n * as colour.\n */\nprotected static Pattern awtColor;"
            ],
            [
                "hexaColor",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Pattern to ensure an hexadecimal number is a recognised colour.\n */\nprotected static Pattern hexaColor;"
            ],
            [
                "numberUnit",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Pattern to ensure a string is a Value in various units.\n */\nprotected static Pattern numberUnit, number;"
            ],
            [
                "number",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Pattern to ensure a string is a Value in various units.\n */\nprotected static Pattern numberUnit, number;"
            ],
            [
                "acceptedAttribute",
                "org.graphstream.ui.graphicGraph",
                "GraphicElement",
                "// Overriding of standard attribute changing to filter them.\nprotected static Pattern acceptedAttribute;"
            ],
            [
                "DEFAULT_AN_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_AN_FORMAT = \"%prefix%[%sourceId%:%timeId%] add node \\\"%nodeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_CNA_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CNA_FORMAT = \"%prefix%[%sourceId%:%timeId%] set node \\\"%nodeId%\\\" +\\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CNC_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CNC_FORMAT = \"%prefix%[%sourceId%:%timeId%] set node \\\"%nodeId%\\\" \\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CNR_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CNR_FORMAT = \"%prefix%[%sourceId%:%timeId%] set node \\\"%nodeId%\\\" -\\\"%attributeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_DN_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_DN_FORMAT = \"%prefix%[%sourceId%:%timeId%] remove node \\\"%nodeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_AE_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_AE_FORMAT = \"%prefix%[%sourceId%:%timeId%] add edge \\\"%edgeId%\\\" : \\\"%source%\\\" -- \\\"%target%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_CEA_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CEA_FORMAT = \"%prefix%[%sourceId%:%timeId%] set edge \\\"%edgeId%\\\" +\\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CEC_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CEC_FORMAT = \"%prefix%[%sourceId%:%timeId%] set edge \\\"%edgeId%\\\" \\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CER_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CER_FORMAT = \"%prefix%[%sourceId%:%timeId%] set edge \\\"%edgeId%\\\" -\\\"%attributeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_DE_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_DE_FORMAT = \"%prefix%[%sourceId%:%timeId%] remove edge \\\"%edgeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_CGA_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CGA_FORMAT = \"%prefix%[%sourceId%:%timeId%] set +\\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CGC_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CGC_FORMAT = \"%prefix%[%sourceId%:%timeId%] set \\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CGR_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CGR_FORMAT = \"%prefix%[%sourceId%:%timeId%] set -\\\"%attributeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_CL_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CL_FORMAT = \"%prefix%[%sourceId%:%timeId%] clear%suffix%\";"
            ],
            [
                "DEFAULT_ST_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_ST_FORMAT = \"%prefix%[%sourceId%:%timeId%] step %step% begins%suffix%\";"
            ],
            [
                "GLOBAL_ENV",
                "org.graphstream.util",
                "Environment",
                "// --------- Static attributes ---------\n/**\n * Global environment for the whole JVM. This global environment is\n * available <b>and editable</b> from everywhere. It is create as soon as\n * the {@link #getGlobalEnvironment()} static method is called if this field\n * was not yet initialized by any other mean.\n * @see #getGlobalEnvironment()\n */\npublic static Environment GLOBAL_ENV;"
            ],
            [
                "LEXICAL_ERROR",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "/*\n\t * Ordinals for various reasons why an Error of this type can be thrown.\n\t */\n/**\n * Lexical error occurred.\n */\npublic static final int LEXICAL_ERROR = 0;"
            ],
            [
                "STATIC_LEXER_ERROR",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "/**\n * An attempt was made to create a second instance of a static token\n * manager.\n */\npublic static final int STATIC_LEXER_ERROR = 1;"
            ],
            [
                "INVALID_LEXICAL_STATE",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "/**\n * Tried to change to an invalid lexical state.\n */\npublic static final int INVALID_LEXICAL_STATE = 2;"
            ],
            [
                "LOOP_DETECTED",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "/**\n * Detected (and bailed out of) an infinite loop in the token manager.\n */\npublic static final int LOOP_DETECTED = 3;"
            ],
            [
                "staticFlag",
                "org.graphstream.util.parser",
                "SimpleCharStream",
                "/**\n * Whether parser is static.\n */\npublic static final boolean staticFlag = false;"
            ],
            [
                "ABBREVIATED_WEEKDAY_NAME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent ABBREVIATED_WEEKDAY_NAME = new NotImplementedComponent(\"%a\", \"\\\\w+[.]\");"
            ],
            [
                "FULL_WEEKDAY_NAME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent FULL_WEEKDAY_NAME = new NotImplementedComponent(\"%A\", \"\\\\w+\");"
            ],
            [
                "ABBREVIATED_MONTH_NAME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent ABBREVIATED_MONTH_NAME = new NotImplementedComponent(\"%b\", \"\\\\w+[.]\");"
            ],
            [
                "FULL_MONTH_NAME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent FULL_MONTH_NAME = new NotImplementedComponent(\"%B\", \"\\\\w+\");"
            ],
            [
                "LOCALE_DATE_AND_TIME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent LOCALE_DATE_AND_TIME = new NotImplementedComponent(\"%c\", null);"
            ],
            [
                "CENTURY",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent CENTURY = new NotImplementedComponent(\"%C\", \"\\\\d\\\\d\");"
            ],
            [
                "DAY_OF_MONTH_2_DIGITS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DAY_OF_MONTH_2_DIGITS = new FieldComponent(\"%d\", \"[012]\\\\d|3[01]\", Calendar.DAY_OF_MONTH, \"%02d\");"
            ],
            [
                "DATE",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DATE = new AliasComponent(\"%D\", \"%m/%d/%y\");"
            ],
            [
                "DAY_OF_MONTH",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DAY_OF_MONTH = new FieldComponent(\"%e\", \"\\\\d|[12]\\\\d|3[01]\", Calendar.DAY_OF_MONTH, \"%2d\");"
            ],
            [
                "DATE_ISO8601",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DATE_ISO8601 = new AliasComponent(\"%F\", \"%Y-%m-%d\");"
            ],
            [
                "WEEK_BASED_YEAR_2_DIGITS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent WEEK_BASED_YEAR_2_DIGITS = new FieldComponent(\"%g\", \"\\\\d\\\\d\", Calendar.YEAR, \"%02d\");"
            ],
            [
                "WEEK_BASED_YEAR_4_DIGITS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent WEEK_BASED_YEAR_4_DIGITS = new FieldComponent(\"%G\", \"\\\\d{4}\", Calendar.YEAR, \"%04d\");"
            ],
            [
                "ABBREVIATED_MONTH_NAME_ALIAS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent ABBREVIATED_MONTH_NAME_ALIAS = new AliasComponent(\"%h\", \"%b\");"
            ],
            [
                "HOUR_OF_DAY",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent HOUR_OF_DAY = new FieldComponent(\"%H\", \"[01]\\\\d|2[0123]\", Calendar.HOUR_OF_DAY, \"%02d\");"
            ],
            [
                "HOUR",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent HOUR = new FieldComponent(\"%I\", \"0\\\\d|1[012]\", Calendar.HOUR, \"%02d\");"
            ],
            [
                "DAY_OF_YEAR",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DAY_OF_YEAR = new FieldComponent(\"%j\", \"[012]\\\\d\\\\d|3[0-5]\\\\d|36[0-6]\", Calendar.DAY_OF_YEAR, \"%03d\");"
            ],
            [
                "MILLISECOND",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent MILLISECOND = new FieldComponent(\"%k\", \"\\\\d{3}\", Calendar.MILLISECOND, \"%03d\");"
            ],
            [
                "EPOCH",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent EPOCH = new EpochComponent();"
            ],
            [
                "MONTH",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent MONTH = new FieldComponent(\"%m\", \"0[1-9]|1[012]\", Calendar.MONTH, -1, \"%02d\");"
            ],
            [
                "MINUTE",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent MINUTE = new FieldComponent(\"%M\", \"[0-5]\\\\d\", Calendar.MINUTE, \"%02d\");"
            ],
            [
                "NEW_LINE",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent NEW_LINE = new AliasComponent(\"%n\", \"\\n\");"
            ],
            [
                "AM_PM",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent AM_PM = new AMPMComponent();"
            ],
            [
                "LOCALE_CLOCK_TIME_12_HOUR",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent LOCALE_CLOCK_TIME_12_HOUR = new NotImplementedComponent(\"%r\", \"\");"
            ],
            [
                "HOUR_AND_MINUTE",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent HOUR_AND_MINUTE = new AliasComponent(\"%R\", \"%H:%M\");"
            ],
            [
                "SECOND",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent SECOND = new FieldComponent(\"%S\", \"[0-5]\\\\d|60\", Calendar.SECOND, \"%02d\");"
            ],
            [
                "TABULATION",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent TABULATION = new AliasComponent(\"%t\", \"\\t\");"
            ],
            [
                "TIME_ISO8601",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent TIME_ISO8601 = new AliasComponent(\"%T\", \"%H:%M:%S\");"
            ],
            [
                "DAY_OF_WEEK_1_7",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DAY_OF_WEEK_1_7 = new FieldComponent(\"%u\", \"[1-7]\", Calendar.DAY_OF_WEEK, -1, \"%1d\");"
            ],
            [
                "WEEK_OF_YEAR_FROM_SUNDAY",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent WEEK_OF_YEAR_FROM_SUNDAY = new FieldComponent(\"%U\", \"[0-4]\\\\d|5[0123]\", Calendar.WEEK_OF_YEAR, 1, \"%2d\");"
            ],
            [
                "WEEK_NUMBER_ISO8601",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent WEEK_NUMBER_ISO8601 = new NotImplementedComponent(\"%V\", \"0[1-9]|[2-4]\\\\d|5[0123]\");"
            ],
            [
                "DAY_OF_WEEK_0_6",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DAY_OF_WEEK_0_6 = new FieldComponent(\"%w\", \"[0-6]\", Calendar.DAY_OF_WEEK, \"%01d\");"
            ],
            [
                "WEEK_OF_YEAR_FROM_MONDAY",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent WEEK_OF_YEAR_FROM_MONDAY = new FieldComponent(\"%W\", \"[0-4]\\\\d|5[0123]\", Calendar.WEEK_OF_YEAR, \"%02d\");"
            ],
            [
                "LOCALE_DATE_REPRESENTATION",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent LOCALE_DATE_REPRESENTATION = new NotImplementedComponent(\"%x\", \"\");"
            ],
            [
                "LOCALE_TIME_REPRESENTATION",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent LOCALE_TIME_REPRESENTATION = new NotImplementedComponent(\"%X\", \"\");"
            ],
            [
                "YEAR_2_DIGITS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent YEAR_2_DIGITS = new FieldComponent(\"%y\", \"\\\\d\\\\d\", Calendar.YEAR, \"%02d\");"
            ],
            [
                "YEAR_4_DIGITS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent YEAR_4_DIGITS = new FieldComponent(\"%Y\", \"\\\\d{4}\", Calendar.YEAR, \"%04d\");"
            ],
            [
                "UTC_OFFSET",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent UTC_OFFSET = new UTCOffsetComponent();"
            ],
            [
                "LOCALE_TIME_ZONE_NAME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent LOCALE_TIME_ZONE_NAME = new NotImplementedComponent(\"%Z\", \"\\\\w*\");"
            ],
            [
                "PERCENT",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent PERCENT = new AliasComponent(\"%%\", \"%\");"
            ],
            [
                "jjbitVec0",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };"
            ],
            [
                "jjnextStates",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "static final int[] jjnextStates = { 5, 6, 8, 9, 13, 14 };"
            ],
            [
                "jjstrLiteralImages",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "/**\n * Token literal values.\n */\npublic static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, \"\\133\", \"\\135\", null, null, null, null, null, null };"
            ],
            [
                "lexStateNames",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "/**\n * Lexer state names.\n */\npublic static final String[] lexStateNames = { \"DEFAULT\" };"
            ],
            [
                "jjtoToken",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "static final long[] jjtoToken = { 0xff01L };"
            ],
            [
                "jjtoSkip",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "static final long[] jjtoSkip = { 0x1eL };"
            ],
            [
                "jjbitVec0",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };"
            ],
            [
                "jjnextStates",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "static final int[] jjnextStates = { 54, 11, 12, 15, 17, 18, 1, 2, 5, 47, 52, 8, 9, 20, 21 };"
            ],
            [
                "jjstrLiteralImages",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "/**\n * Token literal values.\n */\npublic static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, null, \"\\50\", \"\\51\", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null };"
            ],
            [
                "lexStateNames",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "/**\n * Lexer state names.\n */\npublic static final String[] lexStateNames = { \"DEFAULT\" };"
            ],
            [
                "jjtoToken",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "static final long[] jjtoToken = { 0xffffc01L };"
            ],
            [
                "jjtoSkip",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "static final long[] jjtoSkip = { 0x7eL };"
            ],
            [
                "XYZ_ATTR",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "/**\n * Node attribute storing coordinates.\n */\npublic static final String XYZ_ATTR = \"xyz\";"
            ],
            [
                "WIDTH_ATTR",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "/**\n * Graph attribute storing width of the TikZ picture.\n */\npublic static final String WIDTH_ATTR = \"ui.tikz.width\";"
            ],
            [
                "HEIGHT_ATTR",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "/**\n * Graph attribute storing height of the TikZ picture.\n */\npublic static final String HEIGHT_ATTR = \"ui.tikz.height\";"
            ],
            [
                "DEFAULT_WIDTH",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "public static final double DEFAULT_WIDTH = 10;"
            ],
            [
                "DEFAULT_HEIGHT",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "public static final double DEFAULT_HEIGHT = 10;"
            ],
            [
                "DISPLAY_MIN_SIZE_IN_MM",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "/**\n * Define the default minimum size of nodes when using a dynamic size. This\n * size is in millimeter.\n */\npublic static final double DISPLAY_MIN_SIZE_IN_MM = 2;"
            ],
            [
                "DISPLAY_MAX_SIZE_IN_MM",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "/**\n * Define the default maximum size of nodes when using a dynamic size. This\n * size is in millimeter.\n */\npublic static final double DISPLAY_MAX_SIZE_IN_MM = 10;"
            ],
            [
                "jjbitVec0",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };"
            ],
            [
                "jjnextStates",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "static final int[] jjnextStates = { 21, 27, 8, 10, 11, 18, 19, 22, 23, 26, 1, 2, 13, 14 };"
            ],
            [
                "jjstrLiteralImages",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "/**\n * Token literal values.\n */\npublic static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, null, \"\\133\", \"\\135\", \"\\173\", \"\\175\", \"\\72\", \"\\54\", \"\\75\", null, null, null, null, null, null, null, null, null, null, \"\\73\", null, null, null, null, null, null, null, null, null, \"\\137\" };"
            ],
            [
                "lexStateNames",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "/**\n * Lexer state names.\n */\npublic static final String[] lexStateNames = { \"DEFAULT\" };"
            ],
            [
                "jjtoToken",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "static final long[] jjtoToken = { 0x3ffffffc01L };"
            ],
            [
                "jjtoSkip",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "static final long[] jjtoSkip = { 0x7eL };"
            ],
            [
                "jjbitVec0",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };"
            ],
            [
                "jjnextStates",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "static final int[] jjnextStates = { 21, 22, 23, 17, 19, 2, 3, 5, 6, 8, 9 };"
            ],
            [
                "jjstrLiteralImages",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "/**\n * Token literal values.\n */\npublic static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null };"
            ],
            [
                "lexStateNames",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "/**\n * Lexer state names.\n */\npublic static final String[] lexStateNames = { \"DEFAULT\" };"
            ],
            [
                "jjtoToken",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "static final long[] jjtoToken = { 0x3fffffffffffc9L };"
            ],
            [
                "jjtoSkip",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "static final long[] jjtoSkip = { 0x6L };"
            ],
            [
                "XMLNS",
                "org.graphstream.stream.file.gexf",
                "GEXF",
                "public static final String XMLNS = \"http://www.gexf.net/1.2draft\";"
            ],
            [
                "XMLNS_XSI",
                "org.graphstream.stream.file.gexf",
                "GEXF",
                "public static final String XMLNS_XSI = \"http://www.w3.org/2001/XMLSchema-instance\";"
            ],
            [
                "XMLNS_SL",
                "org.graphstream.stream.file.gexf",
                "GEXF",
                "public static final String XMLNS_SL = \"http://www.gexf.net/1.2draft http://www.gexf.net/1.2draft/gexf.xsd\";"
            ],
            [
                "XMLNS_VIZ",
                "org.graphstream.stream.file.gexf",
                "GEXF",
                "public static final String XMLNS_VIZ = \"http://www.gexf.net/1.2draft/viz\";"
            ],
            [
                "VERSION",
                "org.graphstream.stream.file.gexf",
                "GEXF",
                "public static final String VERSION = \"1.2\";"
            ],
            [
                "BUFFER_SIZE",
                "org.graphstream.stream.file.dgs",
                "DGSParser",
                "protected static final int BUFFER_SIZE = 4096;"
            ],
            [
                "ARRAY_OPEN",
                "org.graphstream.stream.file.dgs",
                "DGSParser",
                "public static final int ARRAY_OPEN = '{';"
            ],
            [
                "ARRAY_CLOSE",
                "org.graphstream.stream.file.dgs",
                "DGSParser",
                "public static final int ARRAY_CLOSE = '}';"
            ],
            [
                "MAP_OPEN",
                "org.graphstream.stream.file.dgs",
                "DGSParser",
                "public static final int MAP_OPEN = '[';"
            ],
            [
                "MAP_CLOSE",
                "org.graphstream.stream.file.dgs",
                "DGSParser",
                "public static final int MAP_CLOSE = ']';"
            ],
            [
                "gradientId",
                "org.graphstream.stream.file",
                "FileSinkSVG2",
                "static int gradientId = 0;"
            ],
            [
                "gradientId",
                "org.graphstream.stream.file",
                "SVGStyle",
                "static int gradientId = 0;"
            ],
            [
                "TIME_PREFIX",
                "org.graphstream.stream",
                "Timeline",
                "public static final String TIME_PREFIX = \"time\";"
            ],
            [
                "SYNC_DISABLE_KEY",
                "org.graphstream.stream.sync",
                "SinkTime",
                "/**\n * Key used to disable synchro. Just run : java -DSYNC_DISABLE_KEY ...\n */\npublic static final String SYNC_DISABLE_KEY = \"org.graphstream.stream.sync.disable\";"
            ],
            [
                "disableSync",
                "org.graphstream.stream.sync",
                "SinkTime",
                "/**\n * Flag used to disable sync.\n */\nprotected static final boolean disableSync;"
            ],
            [
                "LIGHT_YELLOW",
                "org.graphstream.stream.netstream",
                "NetStreamReceiver",
                "protected static final String LIGHT_YELLOW = \"\u001b[33;1m\";"
            ],
            [
                "RESET",
                "org.graphstream.stream.netstream",
                "NetStreamReceiver",
                "protected static final String RESET = \"\u001b[0m\";"
            ],
            [
                "BUFFER_INITIAL_SIZE",
                "org.graphstream.stream.netstream",
                "NetStreamReceiver",
                "// Attributes\n// 65535, 4096\nprotected static final int BUFFER_INITIAL_SIZE = 8192;"
            ],
            [
                "BUFFER_INITIAL_SIZE",
                "org.graphstream.stream.netstream",
                "IncomingBuffer",
                "// Attributes\n// 65535, 4096\nprotected static final int BUFFER_INITIAL_SIZE = 8192;"
            ],
            [
                "EVENT_GETVERSION",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by an 32-bit signed integer for this protocol version. Certainly\n * useless.\n */\npublic static int EVENT_GETVERSION = 0x00;"
            ],
            [
                "EVENT_START",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Not used.\n */\npublic static int EVENT_START = 0x01;"
            ],
            [
                "EVENT_END",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Constant indicating that the client has disconnected.\n */\npublic static int EVENT_END = 0x02;"
            ],
            [
                "EVENT_ADD_NODE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "//\n// ----------------------------------\n// GraphStream's graph events\n// ----------------------------------\n//\n/**\n * Followed by a node id (TYPE_STRING format)\n */\npublic static int EVENT_ADD_NODE = 0x10;"
            ],
            [
                "EVENT_DEL_NODE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by a node id (TYPE_STRING format)\n */\npublic static int EVENT_DEL_NODE = 0x11;"
            ],
            [
                "EVENT_ADD_EDGE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - an edge id (TYPE_STRING format), - an source node id\n * (TYPE_STRING format), - a target node id (TYPE_STRING format - a boolean\n * indicating if directed (TYPE_BOOLEAN format)\n */\npublic static int EVENT_ADD_EDGE = 0x12;"
            ],
            [
                "EVENT_DEL_EDGE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by an edge id (TYPE_STRING format)\n */\npublic static int EVENT_DEL_EDGE = 0x13;"
            ],
            [
                "EVENT_STEP",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by double (TYPE_DOUBLE format)\n */\npublic static int EVENT_STEP = 0x14;"
            ],
            [
                "EVENT_CLEARED",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n */\npublic static int EVENT_CLEARED = 0x15;"
            ],
            [
                "EVENT_ADD_GRAPH_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - an attribute id (TYPE_STRING format) - the attribute TYPE -\n * the attribute value\n */\npublic static int EVENT_ADD_GRAPH_ATTR = 0x16;"
            ],
            [
                "EVENT_CHG_GRAPH_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - an attribute id (TYPE_STRING format) - the attribute TYPE -\n * the attribute old value - the attribute new value\n */\npublic static int EVENT_CHG_GRAPH_ATTR = 0x17;"
            ],
            [
                "EVENT_DEL_GRAPH_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - the attribute id (TYPE_STRING format)\n */\npublic static int EVENT_DEL_GRAPH_ATTR = 0x18;"
            ],
            [
                "EVENT_ADD_NODE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - an attribute id (TYPE_STRING format) - the attribute TYPE -\n * the attribute value\n */\npublic static int EVENT_ADD_NODE_ATTR = 0x19;"
            ],
            [
                "EVENT_CHG_NODE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - an attribute id (TYPE_STRING format) - the attribute TYPE -\n * the attribute old value - the attribute new value\n */\npublic static int EVENT_CHG_NODE_ATTR = 0x1a;"
            ],
            [
                "EVENT_DEL_NODE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - the node id (TYPE_STRING format) - the attribute id\n * (TYPE_STRING format)\n */\npublic static int EVENT_DEL_NODE_ATTR = 0x1b;"
            ],
            [
                "EVENT_ADD_EDGE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - an attribute id (TYPE_STRING format) - the attribute TYPE -\n * the attribute value\n */\npublic static int EVENT_ADD_EDGE_ATTR = 0x1c;"
            ],
            [
                "EVENT_CHG_EDGE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - an attribute id (TYPE_STRING format) - the attribute TYPE -\n * the attribute old value - the attribute new value\n */\npublic static int EVENT_CHG_EDGE_ATTR = 0x1d;"
            ],
            [
                "EVENT_DEL_EDGE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - the edge id (TYPE_STRING format) - the attribute id\n * (TYPE_STRING format)\n */\npublic static int EVENT_DEL_EDGE_ATTR = 0x1e;"
            ],
            [
                "TYPE_UNKNOWN",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "// Values types\npublic static int TYPE_UNKNOWN = 0x00;"
            ],
            [
                "TYPE_BOOLEAN",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by a byte who's value is 0 or 1\n */\npublic static int TYPE_BOOLEAN = 0x50;"
            ],
            [
                "TYPE_BOOLEAN_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * An array of booleans. Followed by first, a 16-bits integer for the number\n * of booleans and then, a list of bytes who's value is 0 or 1\n */\npublic static int TYPE_BOOLEAN_ARRAY = 0x51;"
            ],
            [
                "TYPE_BYTE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by a signed byte [-127,127]\n */\npublic static int TYPE_BYTE = 0x52;"
            ],
            [
                "TYPE_BYTE_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * An array of bytes. Followed by first, a 16-bits integer for the number of\n * integers and then, a list of signed bytes.\n */\npublic static int TYPE_BYTE_ARRAY = 0x53;"
            ],
            [
                "TYPE_SHORT",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by an 16-bit signed integer (a short)\n */\npublic static int TYPE_SHORT = 0x54;"
            ],
            [
                "TYPE_SHORT_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * An array of shorts. Followed by first, a 16-bits integer for the number\n * of integers and then, a list of 16-bit signed shorts\n */\npublic static int TYPE_SHORT_ARRAY = 0x55;"
            ],
            [
                "TYPE_INT",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by an 32-bit signed integer\n */\npublic static int TYPE_INT = 0x56;"
            ],
            [
                "TYPE_INT_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * An array of integers. Followed by first, a 16-bits integer for the number\n * of integers and then, a list of 32-bit signed integers\n */\npublic static int TYPE_INT_ARRAY = 0x57;"
            ],
            [
                "TYPE_LONG",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by an 64-bit signed integer\n */\npublic static int TYPE_LONG = 0x58;"
            ],
            [
                "TYPE_LONG_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * An array of longs. Followed by first, a 16-bits integer for the number of\n * longs and then, a list of 62-bit signed integers\n */\npublic static int TYPE_LONG_ARRAY = 0x59;"
            ],
            [
                "TYPE_FLOAT",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by a single precision 32-bits floating point number\n */\npublic static int TYPE_FLOAT = 0x5a;"
            ],
            [
                "TYPE_FLOAT_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Array of double. Followed by first, a 16-bits integer for the number of\n * floats and then, a list of 32-bit floats\n */\npublic static int TYPE_FLOAT_ARRAY = 0x5b;"
            ],
            [
                "TYPE_DOUBLE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by a double precision 64-bits floating point number\n */\npublic static int TYPE_DOUBLE = 0x5c;"
            ],
            [
                "TYPE_DOUBLE_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Array of double. Followed by first, a 16-bits integer for the number of\n * doubles and then, a list of 64-bit doubles\n */\npublic static int TYPE_DOUBLE_ARRAY = 0x5d;"
            ],
            [
                "TYPE_STRING",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Array of characters. Followed by first, a 16-bits integer for the size in\n * bytes (not in number of characters) of the string, then by the unicode\n * string\n */\npublic static int TYPE_STRING = 0x5e;"
            ],
            [
                "TYPE_RAW",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Raw data, good for serialization. Followed by first, a 16-bits integer\n * indicating the length in bytes of the dataset, and then the data itself.\n */\npublic static int TYPE_RAW = 0x5f;"
            ],
            [
                "TYPE_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * An type-unspecified array. Followed by first, a 16-bits integer\n * indicating the number of elements, and then, the elements themselves. The\n * elements themselves have to give their type.\n */\npublic static byte TYPE_ARRAY = 0x60;"
            ],
            [
                "TYPE_NULL",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_NULL = 0x61;"
            ],
            [
                "COMMAND",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n *  Constant that indicates that this message is a COMMAND, not and EVENT.\n *\n *  For now it is followed by a string that has to be parssed at the application level.\n *\n *  THIS IS EXPERIMENTAL AND MAY (WILL) CHANGE !\n */\npublic static int COMMAND = 0x70;"
            ],
            [
                "NO_OPTIONS",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/* ********  P U B L I C   F I E L D S  ******** */\n/**\n * No options specified. Value is zero.\n */\npublic final static int NO_OPTIONS = 0;"
            ],
            [
                "ENCODE",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Specify encoding in first bit. Value is one.\n */\npublic final static int ENCODE = 1;"
            ],
            [
                "DECODE",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Specify decoding in first bit. Value is zero.\n */\npublic final static int DECODE = 0;"
            ],
            [
                "GZIP",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Specify that data should be gzip-compressed in second bit. Value is two.\n */\npublic final static int GZIP = 2;"
            ],
            [
                "DONT_GUNZIP",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Specify that gzipped data should <em>not</em> be automatically gunzipped.\n */\npublic final static int DONT_GUNZIP = 4;"
            ],
            [
                "DO_BREAK_LINES",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Do break lines when encoding. Value is 8.\n */\npublic final static int DO_BREAK_LINES = 8;"
            ],
            [
                "URL_SAFE",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Encode using Base64-like encoding that is URL- and Filename-safe as described\n * in Section 4 of RFC3548:\n * <a href=\"http://www.faqs.org/rfcs/rfc3548.html\">http://www.faqs.org/rfcs/rfc3548.html</a>.\n * It is important to note that data encoded this way is <em>not</em> officially valid Base64,\n * or at the very least should not be called Base64 without also specifying that is\n * was encoded using the URL- and Filename-safe dialect.\n */\npublic final static int URL_SAFE = 16;"
            ],
            [
                "ORDERED",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Encode using the special \"ordered\" dialect of Base64 described here:\n * <a href=\"http://www.faqs.org/qa/rfcc-1940.html\">http://www.faqs.org/qa/rfcc-1940.html</a>.\n */\npublic final static int ORDERED = 32;"
            ],
            [
                "INITIAL_EDGE_CAPACITY",
                "org.graphstream.graph.implementations",
                "AdjacencyListNode",
                "protected static final int INITIAL_EDGE_CAPACITY;"
            ],
            [
                "GROWTH_FACTOR",
                "org.graphstream.graph.implementations",
                "AdjacencyListNode",
                "protected static final double GROWTH_FACTOR = 1.1;"
            ],
            [
                "I_EDGE",
                "org.graphstream.graph.implementations",
                "AdjacencyListNode",
                "protected static final char I_EDGE = 0;"
            ],
            [
                "IO_EDGE",
                "org.graphstream.graph.implementations",
                "AdjacencyListNode",
                "protected static final char IO_EDGE = 1;"
            ],
            [
                "O_EDGE",
                "org.graphstream.graph.implementations",
                "AdjacencyListNode",
                "protected static final char O_EDGE = 2;"
            ],
            [
                "GROW_FACTOR",
                "org.graphstream.graph.implementations",
                "AdjacencyListGraph",
                "public static final double GROW_FACTOR = 1.1;"
            ],
            [
                "DEFAULT_NODE_CAPACITY",
                "org.graphstream.graph.implementations",
                "AdjacencyListGraph",
                "public static final int DEFAULT_NODE_CAPACITY = 128;"
            ],
            [
                "DEFAULT_EDGE_CAPACITY",
                "org.graphstream.graph.implementations",
                "AdjacencyListGraph",
                "public static final int DEFAULT_EDGE_CAPACITY = 1024;"
            ]
        ],
        "tokensMethodJavadocValues": [],
        "tokensMethodArguments": [
            [
                "graph",
                "org.graphstream.ui.graphicGraph",
                "GraphicGraph"
            ],
            [
                "view",
                "org.graphstream.ui.view",
                "View"
            ]
        ],
        "tokensMethodVariablesNonPrivateNonStaticNonVoidMethods": [
            [
                "getSpriteIterator",
                "org.graphstream.ui.graphicGraph",
                "GraphicGraph",
                "public Iterator<? extends GraphicSprite> getSpriteIterator()"
            ],
            [
                "addEdge",
                "org.graphstream.ui.graphicGraph",
                "GraphicGraph",
                "public <T> T addEdge(String arg0, String arg1, String arg2, boolean arg3) throws IdAlreadyInUseException, ElementNotFoundException"
            ],
            [
                "removeSprite_",
                "org.graphstream.ui.graphicGraph",
                "GraphicGraph",
                "protected GraphicSprite removeSprite_(String arg0)"
            ],
            [
                "removeEdge",
                "org.graphstream.ui.graphicGraph",
                "GraphicGraph",
                "public <T> T removeEdge(int arg0)"
            ],
            [
                "getSprite",
                "org.graphstream.ui.graphicGraph",
                "GraphicGraph",
                "public GraphicSprite getSprite(String arg0)"
            ],
            [
                "addSprite_",
                "org.graphstream.ui.graphicGraph",
                "GraphicGraph",
                "protected GraphicSprite addSprite_(String arg0)"
            ],
            [
                "addEdge",
                "org.graphstream.ui.graphicGraph",
                "GraphicGraph",
                "public <T> T addEdge(String arg0, int arg1, int arg2, boolean arg3)"
            ],
            [
                "graphChangedFlag",
                "org.graphstream.ui.graphicGraph",
                "GraphicGraph",
                "public boolean graphChangedFlag()"
            ],
            [
                "addEdge",
                "org.graphstream.ui.graphicGraph",
                "GraphicGraph",
                "public <T> T addEdge(String arg0, Node arg1, Node arg2)"
            ],
            [
                "elementSinks",
                "org.graphstream.ui.graphicGraph",
                "GraphicGraph",
                "public Iterable<ElementSink> elementSinks()"
            ],
            [
                "removeNode",
                "org.graphstream.ui.graphicGraph",
                "GraphicGraph",
                "public <T> T removeNode(Node arg0)"
            ],
            [
                "getSpriteCount",
                "org.graphstream.ui.graphicGraph",
                "GraphicGraph",
                "public int getSpriteCount()"
            ],
            [
                "getNode",
                "org.graphstream.ui.graphicGraph",
                "GraphicGraph",
                "public <T> T getNode(int arg0) throws IndexOutOfBoundsException"
            ],
            [
                "getNodeCount",
                "org.graphstream.ui.graphicGraph",
                "GraphicGraph",
                "public int getNodeCount()"
            ],
            [
                "getStyle",
                "org.graphstream.ui.graphicGraph",
                "GraphicGraph",
                "public StyleGroup getStyle()"
            ],
            [
                "edgeFactory",
                "org.graphstream.ui.graphicGraph",
                "GraphicGraph",
                "public EdgeFactory<? extends Edge> edgeFactory()"
            ],
            [
                "removeEdge",
                "org.graphstream.ui.graphicGraph",
                "GraphicGraph",
                "public <T> T removeEdge(Edge arg0)"
            ],
            [
                "getEachNode",
                "org.graphstream.ui.graphicGraph",
                "GraphicGraph",
                "public Iterable<? extends Node> getEachNode()"
            ],
            [
                "feedbackXYZ",
                "org.graphstream.ui.graphicGraph",
                "GraphicGraph",
                "public boolean feedbackXYZ()"
            ],
            [
                "getNode",
                "org.graphstream.ui.graphicGraph",
                "GraphicGraph",
                "public <T> T getNode(String arg0)"
            ],
            [
                "removeNode",
                "org.graphstream.ui.graphicGraph",
                "GraphicGraph",
                "public <T> T removeNode(String arg0) throws ElementNotFoundException"
            ],
            [
                "removeNode",
                "org.graphstream.ui.graphicGraph",
                "GraphicGraph",
                "public <T> T removeNode(int arg0)"
            ],
            [
                "getEdge",
                "org.graphstream.ui.graphicGraph",
                "GraphicGraph",
                "public <T> T getEdge(String arg0)"
            ],
            [
                "addEdge",
                "org.graphstream.ui.graphicGraph",
                "GraphicGraph",
                "public <T> T addEdge(String arg0, Node arg1, Node arg2, boolean arg3)"
            ],
            [
                "getStyleSheet",
                "org.graphstream.ui.graphicGraph",
                "GraphicGraph",
                "public StyleSheet getStyleSheet()"
            ],
            [
                "addEdge",
                "org.graphstream.ui.graphicGraph",
                "GraphicGraph",
                "public <T> T addEdge(String arg0, String arg1, String arg2) throws IdAlreadyInUseException, ElementNotFoundException"
            ],
            [
                "isStrict",
                "org.graphstream.ui.graphicGraph",
                "GraphicGraph",
                "public boolean isStrict()"
            ],
            [
                "isAutoCreationEnabled",
                "org.graphstream.ui.graphicGraph",
                "GraphicGraph",
                "public boolean isAutoCreationEnabled()"
            ],
            [
                "addEdge",
                "org.graphstream.ui.graphicGraph",
                "GraphicGraph",
                "public <T> T addEdge(String arg0, int arg1, int arg2)"
            ],
            [
                "nodeFactory",
                "org.graphstream.ui.graphicGraph",
                "GraphicGraph",
                "public NodeFactory<? extends Node> nodeFactory()"
            ],
            [
                "getEdge",
                "org.graphstream.ui.graphicGraph",
                "GraphicGraph",
                "public <T> T getEdge(int arg0) throws IndexOutOfBoundsException"
            ],
            [
                "getNodeSet",
                "org.graphstream.ui.graphicGraph",
                "GraphicGraph",
                "public <T> Collection<T> getNodeSet()"
            ],
            [
                "getStep",
                "org.graphstream.ui.graphicGraph",
                "GraphicGraph",
                "public double getStep()"
            ],
            [
                "removeEdge",
                "org.graphstream.ui.graphicGraph",
                "GraphicGraph",
                "public <T> T removeEdge(int arg0, int arg1)"
            ],
            [
                "toString",
                "org.graphstream.ui.graphicGraph",
                "GraphicGraph",
                "public String toString()"
            ],
            [
                "display",
                "org.graphstream.ui.graphicGraph",
                "GraphicGraph",
                "public Viewer display(boolean arg0)"
            ],
            [
                "removeEdge",
                "org.graphstream.ui.graphicGraph",
                "GraphicGraph",
                "public <T> T removeEdge(String arg0) throws ElementNotFoundException"
            ],
            [
                "getNodeIterator",
                "org.graphstream.ui.graphicGraph",
                "GraphicGraph",
                "public <T> Iterator<T> getNodeIterator()"
            ],
            [
                "addSprite",
                "org.graphstream.ui.graphicGraph",
                "GraphicGraph",
                "public GraphicSprite addSprite(String arg0)"
            ],
            [
                "getMinPos",
                "org.graphstream.ui.graphicGraph",
                "GraphicGraph",
                "public Point3 getMinPos()"
            ],
            [
                "display",
                "org.graphstream.ui.graphicGraph",
                "GraphicGraph",
                "public Viewer display()"
            ],
            [
                "getEachEdge",
                "org.graphstream.ui.graphicGraph",
                "GraphicGraph",
                "public Iterable<? extends Edge> getEachEdge()"
            ],
            [
                "getEdgeCount",
                "org.graphstream.ui.graphicGraph",
                "GraphicGraph",
                "public int getEdgeCount()"
            ],
            [
                "removeEdge",
                "org.graphstream.ui.graphicGraph",
                "GraphicGraph",
                "public <T> T removeEdge(Node arg0, Node arg1)"
            ],
            [
                "removeEdge",
                "org.graphstream.ui.graphicGraph",
                "GraphicGraph",
                "public <T> T removeEdge(String arg0, String arg1) throws ElementNotFoundException"
            ],
            [
                "nullAttributesAreErrors",
                "org.graphstream.ui.graphicGraph",
                "GraphicGraph",
                "public boolean nullAttributesAreErrors()"
            ],
            [
                "getStyleGroups",
                "org.graphstream.ui.graphicGraph",
                "GraphicGraph",
                "public StyleGroupSet getStyleGroups()"
            ],
            [
                "spriteSet",
                "org.graphstream.ui.graphicGraph",
                "GraphicGraph",
                "public Iterable<? extends GraphicSprite> spriteSet()"
            ],
            [
                "getEdgeIterator",
                "org.graphstream.ui.graphicGraph",
                "GraphicGraph",
                "public <T> Iterator<T> getEdgeIterator()"
            ],
            [
                "iterator",
                "org.graphstream.ui.graphicGraph",
                "GraphicGraph",
                "public Iterator<Node> iterator()"
            ],
            [
                "attributeSinks",
                "org.graphstream.ui.graphicGraph",
                "GraphicGraph",
                "public Iterable<AttributeSink> attributeSinks()"
            ],
            [
                "getEdgeSet",
                "org.graphstream.ui.graphicGraph",
                "GraphicGraph",
                "public <T> Collection<T> getEdgeSet()"
            ],
            [
                "addNode",
                "org.graphstream.ui.graphicGraph",
                "GraphicGraph",
                "public <T> T addNode(String arg0) throws IdAlreadyInUseException"
            ],
            [
                "getMaxPos",
                "org.graphstream.ui.graphicGraph",
                "GraphicGraph",
                "public Point3 getMaxPos()"
            ],
            [
                "getLabel",
                "org.graphstream.graph.implementations",
                "AbstractElement",
                "public String getLabel(String arg0)"
            ],
            [
                "getArray",
                "org.graphstream.graph.implementations",
                "AbstractElement",
                "public Object[] getArray(String arg0)"
            ],
            [
                "hasHash",
                "org.graphstream.graph.implementations",
                "AbstractElement",
                "public boolean hasHash(String arg0)"
            ],
            [
                "nullAttributesAreErrors",
                "org.graphstream.graph.implementations",
                "AbstractElement",
                "protected abstract boolean nullAttributesAreErrors()"
            ],
            [
                "toString",
                "org.graphstream.graph.implementations",
                "AbstractElement",
                "public String toString()"
            ],
            [
                "getEachAttributeKey",
                "org.graphstream.graph.implementations",
                "AbstractElement",
                "public Iterable<String> getEachAttributeKey()"
            ],
            [
                "hasAttribute",
                "org.graphstream.graph.implementations",
                "AbstractElement",
                "public boolean hasAttribute(String arg0)"
            ],
            [
                "getAttribute",
                "org.graphstream.graph.implementations",
                "AbstractElement",
                "public <T> T getAttribute(String arg0, Class<T> arg1)"
            ],
            [
                "getAttributeKeySet",
                "org.graphstream.graph.implementations",
                "AbstractElement",
                "public Collection<String> getAttributeKeySet()"
            ],
            [
                "hasAttribute",
                "org.graphstream.graph.implementations",
                "AbstractElement",
                "public boolean hasAttribute(String arg0, Class<?> arg1)"
            ],
            [
                "getIndex",
                "org.graphstream.graph.implementations",
                "AbstractElement",
                "public int getIndex()"
            ],
            [
                "getFirstAttributeOf",
                "org.graphstream.graph.implementations",
                "AbstractElement",
                "public transient <T> T getFirstAttributeOf(Class<T> arg0, String[] arg1)"
            ],
            [
                "getAttributeCount",
                "org.graphstream.graph.implementations",
                "AbstractElement",
                "public int getAttributeCount()"
            ],
            [
                "getNumber",
                "org.graphstream.graph.implementations",
                "AbstractElement",
                "public double getNumber(String arg0)"
            ],
            [
                "getHash",
                "org.graphstream.graph.implementations",
                "AbstractElement",
                "public HashMap<?, ?> getHash(String arg0)"
            ],
            [
                "getId",
                "org.graphstream.graph.implementations",
                "AbstractElement",
                "public String getId()"
            ],
            [
                "getVector",
                "org.graphstream.graph.implementations",
                "AbstractElement",
                "public ArrayList<? extends Number> getVector(String arg0)"
            ],
            [
                "hasVector",
                "org.graphstream.graph.implementations",
                "AbstractElement",
                "public boolean hasVector(String arg0)"
            ],
            [
                "getAttributeKeyIterator",
                "org.graphstream.graph.implementations",
                "AbstractElement",
                "public Iterator<String> getAttributeKeyIterator()"
            ],
            [
                "getAttribute",
                "org.graphstream.graph.implementations",
                "AbstractElement",
                "public <T> T getAttribute(String arg0)"
            ],
            [
                "hasNumber",
                "org.graphstream.graph.implementations",
                "AbstractElement",
                "public boolean hasNumber(String arg0)"
            ],
            [
                "hasLabel",
                "org.graphstream.graph.implementations",
                "AbstractElement",
                "public boolean hasLabel(String arg0)"
            ],
            [
                "getFirstAttributeOf",
                "org.graphstream.graph.implementations",
                "AbstractElement",
                "public transient <T> T getFirstAttributeOf(String[] arg0)"
            ],
            [
                "hasArray",
                "org.graphstream.graph.implementations",
                "AbstractElement",
                "public boolean hasArray(String arg0)"
            ],
            [
                "toString",
                "java.lang",
                "Object",
                "public String toString()"
            ],
            [
                "clone",
                "java.lang",
                "Object",
                "protected native Object clone() throws CloneNotSupportedException"
            ],
            [
                "getClass",
                "java.lang",
                "Object",
                "public final native Class<? extends Object> getClass()"
            ],
            [
                "hashCode",
                "java.lang",
                "Object",
                "public native int hashCode()"
            ],
            [
                "equals",
                "java.lang",
                "Object",
                "public boolean equals(Object arg0)"
            ],
            [
                "getFirstAttributeOf",
                "org.graphstream.graph",
                "Element",
                "public abstract transient <T> T getFirstAttributeOf(String[] arg0)"
            ],
            [
                "getNumber",
                "org.graphstream.graph",
                "Element",
                "public abstract double getNumber(String arg0)"
            ],
            [
                "getId",
                "org.graphstream.graph",
                "Element",
                "public abstract String getId()"
            ],
            [
                "getAttributeKeySet",
                "org.graphstream.graph",
                "Element",
                "public abstract Collection<String> getAttributeKeySet()"
            ],
            [
                "getAttribute",
                "org.graphstream.graph",
                "Element",
                "public abstract <T> T getAttribute(String arg0, Class<T> arg1)"
            ],
            [
                "getLabel",
                "org.graphstream.graph",
                "Element",
                "public abstract CharSequence getLabel(String arg0)"
            ],
            [
                "getAttributeCount",
                "org.graphstream.graph",
                "Element",
                "public abstract int getAttributeCount()"
            ],
            [
                "getFirstAttributeOf",
                "org.graphstream.graph",
                "Element",
                "public abstract transient <T> T getFirstAttributeOf(Class<T> arg0, String[] arg1)"
            ],
            [
                "getIndex",
                "org.graphstream.graph",
                "Element",
                "public abstract int getIndex()"
            ],
            [
                "getAttributeKeyIterator",
                "org.graphstream.graph",
                "Element",
                "public abstract Iterator<String> getAttributeKeyIterator()"
            ],
            [
                "hasNumber",
                "org.graphstream.graph",
                "Element",
                "public abstract boolean hasNumber(String arg0)"
            ],
            [
                "hasAttribute",
                "org.graphstream.graph",
                "Element",
                "public abstract boolean hasAttribute(String arg0, Class<?> arg1)"
            ],
            [
                "hasVector",
                "org.graphstream.graph",
                "Element",
                "public abstract boolean hasVector(String arg0)"
            ],
            [
                "hasArray",
                "org.graphstream.graph",
                "Element",
                "public abstract boolean hasArray(String arg0)"
            ],
            [
                "hasLabel",
                "org.graphstream.graph",
                "Element",
                "public abstract boolean hasLabel(String arg0)"
            ],
            [
                "hasHash",
                "org.graphstream.graph",
                "Element",
                "public abstract boolean hasHash(String arg0)"
            ],
            [
                "getHash",
                "org.graphstream.graph",
                "Element",
                "public abstract HashMap<?, ?> getHash(String arg0)"
            ],
            [
                "getArray",
                "org.graphstream.graph",
                "Element",
                "public abstract Object[] getArray(String arg0)"
            ],
            [
                "getAttribute",
                "org.graphstream.graph",
                "Element",
                "public abstract <T> T getAttribute(String arg0)"
            ],
            [
                "getEachAttributeKey",
                "org.graphstream.graph",
                "Element",
                "public abstract Iterable<String> getEachAttributeKey()"
            ],
            [
                "getVector",
                "org.graphstream.graph",
                "Element",
                "public abstract ArrayList<? extends Number> getVector(String arg0)"
            ],
            [
                "hasAttribute",
                "org.graphstream.graph",
                "Element",
                "public abstract boolean hasAttribute(String arg0)"
            ],
            [
                "isStrict",
                "org.graphstream.graph",
                "Graph",
                "public abstract boolean isStrict()"
            ],
            [
                "getEdge",
                "org.graphstream.graph",
                "Graph",
                "public abstract <T> T getEdge(String arg0)"
            ],
            [
                "nullAttributesAreErrors",
                "org.graphstream.graph",
                "Graph",
                "public abstract boolean nullAttributesAreErrors()"
            ],
            [
                "display",
                "org.graphstream.graph",
                "Graph",
                "public abstract Viewer display()"
            ],
            [
                "addNode",
                "org.graphstream.graph",
                "Graph",
                "public abstract <T> T addNode(String arg0) throws IdAlreadyInUseException"
            ],
            [
                "display",
                "org.graphstream.graph",
                "Graph",
                "public abstract Viewer display(boolean arg0)"
            ],
            [
                "removeNode",
                "org.graphstream.graph",
                "Graph",
                "public abstract <T> T removeNode(Node arg0)"
            ],
            [
                "removeNode",
                "org.graphstream.graph",
                "Graph",
                "public abstract <T> T removeNode(String arg0) throws ElementNotFoundException"
            ],
            [
                "addEdge",
                "org.graphstream.graph",
                "Graph",
                "public abstract <T> T addEdge(String arg0, Node arg1, Node arg2, boolean arg3) throws IdAlreadyInUseException, EdgeRejectedException"
            ],
            [
                "nodeFactory",
                "org.graphstream.graph",
                "Graph",
                "public abstract NodeFactory<? extends Node> nodeFactory()"
            ],
            [
                "removeEdge",
                "org.graphstream.graph",
                "Graph",
                "public abstract <T> T removeEdge(String arg0, String arg1) throws ElementNotFoundException"
            ],
            [
                "addEdge",
                "org.graphstream.graph",
                "Graph",
                "public abstract <T> T addEdge(String arg0, int arg1, int arg2) throws IndexOutOfBoundsException, IdAlreadyInUseException, EdgeRejectedException"
            ],
            [
                "removeNode",
                "org.graphstream.graph",
                "Graph",
                "public abstract <T> T removeNode(int arg0) throws IndexOutOfBoundsException"
            ],
            [
                "removeEdge",
                "org.graphstream.graph",
                "Graph",
                "public abstract <T> T removeEdge(String arg0) throws ElementNotFoundException"
            ],
            [
                "getNode",
                "org.graphstream.graph",
                "Graph",
                "public abstract <T> T getNode(String arg0)"
            ],
            [
                "getStep",
                "org.graphstream.graph",
                "Graph",
                "public abstract double getStep()"
            ],
            [
                "elementSinks",
                "org.graphstream.graph",
                "Graph",
                "public abstract Iterable<ElementSink> elementSinks()"
            ],
            [
                "addEdge",
                "org.graphstream.graph",
                "Graph",
                "public abstract <T> T addEdge(String arg0, int arg1, int arg2, boolean arg3) throws IndexOutOfBoundsException, IdAlreadyInUseException, EdgeRejectedException"
            ],
            [
                "removeEdge",
                "org.graphstream.graph",
                "Graph",
                "public abstract <T> T removeEdge(int arg0) throws IndexOutOfBoundsException"
            ],
            [
                "removeEdge",
                "org.graphstream.graph",
                "Graph",
                "public abstract <T> T removeEdge(Edge arg0)"
            ],
            [
                "addEdge",
                "org.graphstream.graph",
                "Graph",
                "public abstract <T> T addEdge(String arg0, Node arg1, Node arg2) throws IdAlreadyInUseException, EdgeRejectedException"
            ],
            [
                "attributeSinks",
                "org.graphstream.graph",
                "Graph",
                "public abstract Iterable<AttributeSink> attributeSinks()"
            ],
            [
                "addEdge",
                "org.graphstream.graph",
                "Graph",
                "public abstract <T> T addEdge(String arg0, String arg1, String arg2, boolean arg3) throws IdAlreadyInUseException, ElementNotFoundException"
            ],
            [
                "edgeFactory",
                "org.graphstream.graph",
                "Graph",
                "public abstract EdgeFactory<? extends Edge> edgeFactory()"
            ],
            [
                "removeEdge",
                "org.graphstream.graph",
                "Graph",
                "public abstract <T> T removeEdge(Node arg0, Node arg1) throws ElementNotFoundException"
            ],
            [
                "getEdge",
                "org.graphstream.graph",
                "Graph",
                "public abstract <T> T getEdge(int arg0) throws IndexOutOfBoundsException"
            ],
            [
                "addEdge",
                "org.graphstream.graph",
                "Graph",
                "public abstract <T> T addEdge(String arg0, String arg1, String arg2) throws IdAlreadyInUseException, ElementNotFoundException, EdgeRejectedException"
            ],
            [
                "getNode",
                "org.graphstream.graph",
                "Graph",
                "public abstract <T> T getNode(int arg0) throws IndexOutOfBoundsException"
            ],
            [
                "isAutoCreationEnabled",
                "org.graphstream.graph",
                "Graph",
                "public abstract boolean isAutoCreationEnabled()"
            ],
            [
                "removeEdge",
                "org.graphstream.graph",
                "Graph",
                "public abstract <T> T removeEdge(int arg0, int arg1) throws IndexOutOfBoundsException, ElementNotFoundException"
            ],
            [
                "spliterator",
                "java.lang",
                "Iterable",
                "public default Spliterator<T> spliterator()"
            ],
            [
                "iterator",
                "java.lang",
                "Iterable",
                "public abstract Iterator<T> iterator()"
            ],
            [
                "getEdgeCount",
                "org.graphstream.graph",
                "Structure",
                "public abstract int getEdgeCount()"
            ],
            [
                "getNodeCount",
                "org.graphstream.graph",
                "Structure",
                "public abstract int getNodeCount()"
            ],
            [
                "getEachNode",
                "org.graphstream.graph",
                "Structure",
                "public abstract <T> Iterable<? extends T> getEachNode()"
            ],
            [
                "getNodeSet",
                "org.graphstream.graph",
                "Structure",
                "public abstract <T> Collection<T> getNodeSet()"
            ],
            [
                "getEdgeSet",
                "org.graphstream.graph",
                "Structure",
                "public abstract <T> Collection<T> getEdgeSet()"
            ],
            [
                "getEdgeIterator",
                "org.graphstream.graph",
                "Structure",
                "public abstract <T> Iterator<T> getEdgeIterator()"
            ],
            [
                "getEachEdge",
                "org.graphstream.graph",
                "Structure",
                "public abstract <T> Iterable<? extends T> getEachEdge()"
            ],
            [
                "getNodeIterator",
                "org.graphstream.graph",
                "Structure",
                "public abstract <T> Iterator<T> getNodeIterator()"
            ],
            [
                "findNodeOrSpriteAt",
                "org.graphstream.ui.view",
                "View",
                "public abstract GraphicElement findNodeOrSpriteAt(double arg0, double arg1)"
            ],
            [
                "allNodesOrSpritesIn",
                "org.graphstream.ui.view",
                "View",
                "public abstract Collection<GraphicElement> allNodesOrSpritesIn(double arg0, double arg1, double arg2, double arg3)"
            ],
            [
                "getCamera",
                "org.graphstream.ui.view",
                "View",
                "public abstract Camera getCamera()"
            ],
            [
                "getId",
                "org.graphstream.ui.view",
                "View",
                "public abstract String getId()"
            ]
        ],
        "tokensMethodVariablesNonPrivateNonStaticAttributes": [
            [
                "styleSheet",
                "org.graphstream.ui.graphicGraph",
                "GraphicGraph",
                "protected StyleSheet styleSheet;"
            ],
            [
                "styleGroups",
                "org.graphstream.ui.graphicGraph",
                "GraphicGraph",
                "protected StyleGroupSet styleGroups;"
            ],
            [
                "connectivity",
                "org.graphstream.ui.graphicGraph",
                "GraphicGraph",
                "protected Map<GraphicNode, List<GraphicEdge>> connectivity;"
            ],
            [
                "style",
                "org.graphstream.ui.graphicGraph",
                "GraphicGraph",
                "public StyleGroup style;"
            ],
            [
                "step",
                "org.graphstream.ui.graphicGraph",
                "GraphicGraph",
                "public double step;"
            ],
            [
                "graphChanged",
                "org.graphstream.ui.graphicGraph",
                "GraphicGraph",
                "public boolean graphChanged;"
            ],
            [
                "boundsChanged",
                "org.graphstream.ui.graphicGraph",
                "GraphicGraph",
                "protected boolean boundsChanged;"
            ],
            [
                "hi",
                "org.graphstream.ui.graphicGraph",
                "GraphicGraph",
                "protected Point3 hi;"
            ],
            [
                "lo",
                "org.graphstream.ui.graphicGraph",
                "GraphicGraph",
                "protected Point3 lo;"
            ],
            [
                "listeners",
                "org.graphstream.ui.graphicGraph",
                "GraphicGraph",
                "protected GraphListeners listeners;"
            ],
            [
                "nullAttrError",
                "org.graphstream.ui.graphicGraph",
                "GraphicGraph",
                "protected boolean nullAttrError;"
            ],
            [
                "feedbackXYZ",
                "org.graphstream.ui.graphicGraph",
                "GraphicGraph",
                "protected boolean feedbackXYZ;"
            ],
            [
                "id",
                "org.graphstream.graph.implementations",
                "AbstractElement",
                "protected String id;"
            ],
            [
                "attributes",
                "org.graphstream.graph.implementations",
                "AbstractElement",
                "protected HashMap<String, Object> attributes;"
            ],
            [
                "attributesBeingRemoved",
                "org.graphstream.graph.implementations",
                "AbstractElement",
                "protected ArrayList<String> attributesBeingRemoved;"
            ]
        ],
        "tokensOracleVariablesNonPrivateNonStaticNonVoidMethods": [],
        "tokensOracleVariablesNonPrivateNonStaticAttributes": []
    },
    {
        "id": 2914,
        "oracle": ";",
        "oracleType": "NORMAL_POST",
        "projectName": "gs-core-1.3",
        "packageName": "org.graphstream.ui.view.util",
        "className": "CubicCurve",
        "javadocTag": "@return The point at parametric position `t` on the curve.",
        "methodJavadoc": "    /**\n\t * Evaluate a cubic B\u00e9zier curve according to control points `p0`, `p1`,\n\t * `p2` and `p3` and return the position at parametric position `t` of the\n\t * curve.\n\t * \n\t * @return The point at parametric position `t` on the curve.\n\t */",
        "methodSourceCode": "public static Point2D.Double eval(Point2D.Double p0, Point2D.Double p1, Point2D.Double p2, Point2D.Double p3, double t){\n    return new Point2D.Double(eval(p0.x, p1.x, p2.x, p3.x, t), eval(p0.y, p1.y, p2.y, p3.y, t));\n}",
        "classJavadoc": "/** Utility methods to deal with cubic B\u00e9zier curves. */",
        "classSourceCode": "/*\n * Copyright 2006 - 2015\n *     Stefan Balev     <stefan.balev@graphstream-project.org>\n *     Julien Baudry    <julien.baudry@graphstream-project.org>\n *     Antoine Dutot    <antoine.dutot@graphstream-project.org>\n *     Yoann Pign\u00e9      <yoann.pigne@graphstream-project.org>\n *     Guilhelm Savin   <guilhelm.savin@graphstream-project.org>\n * \n * This file is part of GraphStream <http://graphstream-project.org>.\n * \n * GraphStream is a library whose purpose is to handle static or dynamic\n * graph, create them from scratch, file or any source and display them.\n * \n * This program is free software distributed under the terms of two licenses, the\n * CeCILL-C license that fits European law, and the GNU Lesser General Public\n * License. You can  use, modify and/ or redistribute the software under the terms\n * of the CeCILL-C license as circulated by CEA, CNRS and INRIA at the following\n * URL <http://www.cecill.info> or under the terms of the GNU LGPL as published by\n * the Free Software Foundation, either version 3 of the License, or (at your\n * option) any later version.\n * \n * This program is distributed in the hope that it will be useful, but WITHOUT ANY\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A\n * PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more details.\n * \n * You should have received a copy of the GNU Lesser General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n * \n * The fact that you are presently reading this means that you have had\n * knowledge of the CeCILL-C and LGPL licenses and that you accept their terms.\n */\npackage org.graphstream.ui.view.util;\n\nimport org.graphstream.ui.geom.*;\nimport java.awt.geom.*;\n\n/** Utility methods to deal with cubic B\u00e9zier curves. */\npublic class CubicCurve {\n\t/**\n\t * Evaluate a cubic B\u00e9zier curve according to control points `x0`, `x1`,\n\t * `x2` and `x3` and return the position at parametric position `t` of the\n\t * curve.\n\t * \n\t * @return The coordinate at parametric position `t` on the curve.\n\t */\n\tpublic static double eval(double x0, double x1, double x2, double x3, double t) {\n\t\tdouble tt = (1f - t);\n\n\t\treturn x0 * (tt * tt * tt) + 3f * x1 * t * (tt * tt) + 3f * x2\n\t\t\t\t* (t * t) * tt + x3 * (t * t * t);\n\t}\n\n\t/**\n\t * Evaluate a cubic B\u00e9zier curve according to control points `p0`, `p1`,\n\t * `p2` and `p3` and return the position at parametric position `t` of the\n\t * curve.\n\t * \n\t * @return The point at parametric position `t` on the curve.\n\t */\n\tpublic static Point2 eval(Point2 p0, Point2 p1, Point2 p2, Point2 p3,\n\t\t\tdouble t) {\n\t\treturn new Point2(eval(p0.x, p1.x, p2.x, p3.x, t), eval(p0.y, p1.y,\n\t\t\t\tp2.y, p3.y, t));\n\t}\n\n\t/**\n\t * Evaluate a cubic B\u00e9zier curve according to control points `p0`, `p1`,\n\t * `p2` and `p3` and return the position at parametric position `t` of the\n\t * curve.\n\t * \n\t * @return The point at parametric position `t` on the curve.\n\t */\n\tpublic static Point2D.Double eval(Point2D.Double p0, Point2D.Double p1,\n\t\t\tPoint2D.Double p2, Point2D.Double p3, double t) {\n\t\treturn new Point2D.Double(eval(p0.x, p1.x, p2.x, p3.x, t), eval(p0.y,\n\t\t\t\tp1.y, p2.y, p3.y, t));\n\t}\n\n\t/**\n\t * Evaluate a cubic B\u00e9zier curve according to control points `p0`, `p1`,\n\t * `p2` and `p3` and store the position at parametric position `t` of the\n\t * curve in `result`.\n\t * \n\t * @return the given reference to `result`.\n\t */\n\tpublic static Point2 eval(Point2 p0, Point2 p1, Point2 p2, Point2 p3,\n\t\t\tdouble t, Point2 result) {\n\t\tresult.set(eval(p0.x, p1.x, p2.x, p3.x, t),\n\t\t\t\teval(p0.y, p1.y, p2.y, p3.y, t));\n\t\treturn result;\n\t}\n\n\t/**\n\t * Derivative of a cubic B\u00e9zier curve according to control points `x0`,\n\t * `x1`, `x2` and `x3` at parametric position `t` of the curve.\n\t * \n\t * @return The derivative at parametric position `t` on the curve.\n\t */\n\tpublic static double derivative(double x0, double x1, double x2, double x3,\n\t\t\tdouble t) {\n\t\treturn 3 * (x3 - 3 * x2 + 3 * x1 - x0) * t * t + 2\n\t\t\t\t* (3 * x2 - 6 * x1 + 3 * x0) * t + (3 * x1 - 3 * x0);\n\t}\n\n\t/**\n\t * Derivative point of a cubic B\u00e9zier curve according to control points\n\t * `x0`, `x1`, `x2` and `x3` at parametric position `t` of the curve.\n\t * \n\t * @return The derivative point at parametric position `t` on the curve.\n\t */\n\tpublic static Point2 derivative(Point2 p0, Point2 p1, Point2 p2, Point3 p3,\n\t\t\tdouble t) {\n\t\treturn new Point2(derivative(p0.x, p1.x, p2.x, p3.x, t), derivative(\n\t\t\t\tp0.y, p1.y, p2.y, p3.y, t));\n\t}\n\n\t/**\n\t * Store in `result` the derivative point of a cubic B\u00e9zier curve according\n\t * to control points `x0`, `x1`, `x2` and `x3` at parametric position `t` of\n\t * the curve.\n\t * \n\t * @return the given reference to `result`.\n\t */\n\tpublic static Point2 derivative(Point2 p0, Point2 p1, Point2 p2, Point3 p3,\n\t\t\tdouble t, Point2 result) {\n\t\tresult.set(derivative(p0.x, p1.x, p2.x, p3.x, t),\n\t\t\t\tderivative(p0.y, p1.y, p2.y, p3.y, t));\n\t\treturn result;\n\t}\n\n\t/**\n\t * The perpendicular vector to the curve defined by control points `p0`,\n\t * `p1`, `p2` and `p3` at parametric position `t`.\n\t * \n\t * @return A vector perpendicular to the curve at position `t`.\n\t */\n\tpublic static Vector2 perpendicular(Point2 p0, Point2 p1, Point2 p2,\n\t\t\tPoint2 p3, double t) {\n\t\treturn new Vector2(derivative(p0.y, p1.y, p2.y, p3.y, t), -derivative(\n\t\t\t\tp0.x, p1.x, p2.x, p3.x, t));\n\t}\n\n\t/**\n\t * Store in `result` the perpendicular vector to the curve defined by\n\t * control points `p0`, `p1`, `p2` and `p3` at parametric position `t`.\n\t * \n\t * @return the given reference to `result`.\n\t */\n\tpublic static Vector2 perpendicular(Point2 p0, Point2 p1, Point2 p2,\n\t\t\tPoint2 p3, double t, Vector2 result) {\n\t\tresult.set(derivative(p0.y, p1.y, p2.y, p3.y, t),\n\t\t\t\t-derivative(p0.x, p1.x, p2.x, p3.x, t));\n\t\treturn result;\n\t}\n\n\t/**\n\t * The perpendicular vector to the curve defined by control points `p0`,\n\t * `p1`, `p2` and `p3` at parametric position `t`.\n\t * \n\t * @return A vector perpendicular to the curve at position `t`.\n\t */\n\tpublic static Point2D.Double perpendicular(Point2D.Double p0,\n\t\t\tPoint2D.Double p1, Point2D.Double p2, Point2D.Double p3, double t) {\n\t\treturn new Point2D.Double(derivative(p0.y, p1.y, p2.y, p3.y, t),\n\t\t\t\t-derivative(p0.x, p1.x, p2.x, p3.x, t));\n\t}\n}",
        "tokensGeneralGrammar": [
            "null",
            "true",
            "false",
            ",",
            ".",
            ":",
            ";",
            "?",
            "(",
            ")",
            "jdVar",
            "stream",
            "Arrays",
            "allMatch",
            "noneMatch",
            "anyMatch",
            "~",
            ">>",
            "<<",
            ">>>",
            "|",
            "&",
            "^",
            "+",
            "-",
            "/",
            "*",
            "%",
            "&&",
            "||",
            ">=",
            "<=",
            ">",
            "<",
            "==",
            "!=",
            "instanceof",
            "class",
            "methodResultID",
            "this"
        ],
        "tokensGeneralValuesGlobalDictionary": [
            [
                "0",
                "int"
            ],
            [
                "1",
                "int"
            ],
            [
                "-1",
                "int"
            ],
            [
                "0.0",
                "double"
            ],
            [
                "1.0",
                "double"
            ],
            [
                "-1.0",
                "double"
            ],
            [
                "\"\"",
                "String"
            ],
            [
                "\" \"",
                "String"
            ]
        ],
        "tokensProjectClasses": [
            [
                "DefaultCamera",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "GradientFactory",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "GraphMetrics",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "Graphics2DOutput",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "ImageCache",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "StrokeFactory",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "FontCache",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "FontSlot",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "DefaultView",
                "org.graphstream.ui.swingViewer"
            ],
            [
                "SpriteRenderer",
                "org.graphstream.ui.swingViewer.basicRenderer"
            ],
            [
                "ElementRenderer",
                "org.graphstream.ui.swingViewer.basicRenderer"
            ],
            [
                "NodeRenderer",
                "org.graphstream.ui.swingViewer.basicRenderer"
            ],
            [
                "Arrow",
                "org.graphstream.ui.swingViewer.basicRenderer.shapes"
            ],
            [
                "Shape",
                "org.graphstream.ui.swingViewer.basicRenderer.shapes"
            ],
            [
                "EdgeRenderer",
                "org.graphstream.ui.swingViewer.basicRenderer"
            ],
            [
                "SwingBasicGraphRenderer",
                "org.graphstream.ui.swingViewer.basicRenderer"
            ],
            [
                "GraphRendererBase",
                "org.graphstream.ui.swingViewer"
            ],
            [
                "GraphRenderer",
                "org.graphstream.ui.swingViewer"
            ],
            [
                "LayerRenderer",
                "org.graphstream.ui.swingViewer"
            ],
            [
                "ViewPanel",
                "org.graphstream.ui.swingViewer"
            ],
            [
                "Layouts",
                "org.graphstream.ui.layout"
            ],
            [
                "Layout",
                "org.graphstream.ui.layout"
            ],
            [
                "LayoutRunner",
                "org.graphstream.ui.layout"
            ],
            [
                "NodeParticle",
                "org.graphstream.ui.layout.springbox"
            ],
            [
                "GraphCellData",
                "org.graphstream.ui.layout.springbox"
            ],
            [
                "EdgeSpring",
                "org.graphstream.ui.layout.springbox"
            ],
            [
                "Energies",
                "org.graphstream.ui.layout.springbox"
            ],
            [
                "BarnesHutLayout",
                "org.graphstream.ui.layout.springbox"
            ],
            [
                "LinLog",
                "org.graphstream.ui.layout.springbox.implementations"
            ],
            [
                "LinLogNodeParticle",
                "org.graphstream.ui.layout.springbox.implementations"
            ],
            [
                "SpringBoxNodeParticle",
                "org.graphstream.ui.layout.springbox.implementations"
            ],
            [
                "SpringBox",
                "org.graphstream.ui.layout.springbox.implementations"
            ],
            [
                "Point2",
                "org.graphstream.ui.geom"
            ],
            [
                "Vector2",
                "org.graphstream.ui.geom"
            ],
            [
                "Vector3",
                "org.graphstream.ui.geom"
            ],
            [
                "Point3",
                "org.graphstream.ui.geom"
            ],
            [
                "ViewerListener",
                "org.graphstream.ui.view"
            ],
            [
                "MouseManager",
                "org.graphstream.ui.view.util"
            ],
            [
                "ShortcutManager",
                "org.graphstream.ui.view.util"
            ],
            [
                "DefaultShortcutManager",
                "org.graphstream.ui.view.util"
            ],
            [
                "FpsCounter",
                "org.graphstream.ui.view.util"
            ],
            [
                "CubicCurve",
                "org.graphstream.ui.view.util"
            ],
            [
                "DefaultMouseManager",
                "org.graphstream.ui.view.util"
            ],
            [
                "Selection",
                "org.graphstream.ui.view"
            ],
            [
                "ViewerPipe",
                "org.graphstream.ui.view"
            ],
            [
                "Viewer",
                "org.graphstream.ui.view"
            ],
            [
                "View",
                "org.graphstream.ui.view"
            ],
            [
                "Camera",
                "org.graphstream.ui.view"
            ],
            [
                "Sprite",
                "org.graphstream.ui.spriteManager"
            ],
            [
                "InvalidSpriteIDException",
                "org.graphstream.ui.spriteManager"
            ],
            [
                "SpriteManager",
                "org.graphstream.ui.spriteManager"
            ],
            [
                "SpriteFactory",
                "org.graphstream.ui.spriteManager"
            ],
            [
                "StyleGroupListener",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "Colors",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "Values",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "StyleSheetListener",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "StyleSheetParserTokenManager",
                "org.graphstream.ui.graphicGraph.stylesheet.parser"
            ],
            [
                "StyleSheetParserConstants",
                "org.graphstream.ui.graphicGraph.stylesheet.parser"
            ],
            [
                "StyleSheetParser",
                "org.graphstream.ui.graphicGraph.stylesheet.parser"
            ],
            [
                "Style",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "StyleSheet",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "StyleConstants",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "Selector",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "Value",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "Rule",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "GraphicNode",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "StyleGroup",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphPosLengthUtils",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphicEdge",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphicElementChangeListener",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphicGraph",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "StyleGroupSet",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphicSprite",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphicElement",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "VerboseSink",
                "org.graphstream.util"
            ],
            [
                "GraphListeners",
                "org.graphstream.util"
            ],
            [
                "Environment",
                "org.graphstream.util"
            ],
            [
                "GraphDiff",
                "org.graphstream.util"
            ],
            [
                "Filters",
                "org.graphstream.util"
            ],
            [
                "FilteredEdgeIterator",
                "org.graphstream.util"
            ],
            [
                "Parser",
                "org.graphstream.util.parser"
            ],
            [
                "ParserFactory",
                "org.graphstream.util.parser"
            ],
            [
                "TokenMgrError",
                "org.graphstream.util.parser"
            ],
            [
                "ParseException",
                "org.graphstream.util.parser"
            ],
            [
                "SimpleCharStream",
                "org.graphstream.util.parser"
            ],
            [
                "Token",
                "org.graphstream.util.parser"
            ],
            [
                "ISODateIO",
                "org.graphstream.util.time"
            ],
            [
                "ISODateComponent",
                "org.graphstream.util.time"
            ],
            [
                "FilteredNodeIterator",
                "org.graphstream.util"
            ],
            [
                "FixedArrayList",
                "org.graphstream.util.set"
            ],
            [
                "StepCounter",
                "org.graphstream.util"
            ],
            [
                "GraphSpells",
                "org.graphstream.util.cumulative"
            ],
            [
                "CumulativeAttributes",
                "org.graphstream.util.cumulative"
            ],
            [
                "CumulativeSpells",
                "org.graphstream.util.cumulative"
            ],
            [
                "Filter",
                "org.graphstream.util"
            ],
            [
                "PipeAdapter",
                "org.graphstream.stream"
            ],
            [
                "GraphParseException",
                "org.graphstream.stream"
            ],
            [
                "ElementSink",
                "org.graphstream.stream"
            ],
            [
                "URLSource",
                "org.graphstream.stream.net"
            ],
            [
                "HTTPSource",
                "org.graphstream.stream.net"
            ],
            [
                "SourceAdapter",
                "org.graphstream.stream"
            ],
            [
                "AttributeSink",
                "org.graphstream.stream"
            ],
            [
                "GMLParserConstants",
                "org.graphstream.stream.file.gml"
            ],
            [
                "GMLParserTokenManager",
                "org.graphstream.stream.file.gml"
            ],
            [
                "GMLContext",
                "org.graphstream.stream.file.gml"
            ],
            [
                "Graphics",
                "org.graphstream.stream.file.gml"
            ],
            [
                "KeyValues",
                "org.graphstream.stream.file.gml"
            ],
            [
                "GMLParser",
                "org.graphstream.stream.file.gml"
            ],
            [
                "FileSinkGraphML",
                "org.graphstream.stream.file"
            ],
            [
                "TLPParserConstants",
                "org.graphstream.stream.file.tlp"
            ],
            [
                "TLPParser",
                "org.graphstream.stream.file.tlp"
            ],
            [
                "TLPParserTokenManager",
                "org.graphstream.stream.file.tlp"
            ],
            [
                "FileSinkFactory",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceEdge",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkBase",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkTikZ",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceGEXF",
                "org.graphstream.stream.file"
            ],
            [
                "DOTParser",
                "org.graphstream.stream.file.dot"
            ],
            [
                "DOTParserConstants",
                "org.graphstream.stream.file.dot"
            ],
            [
                "DOTParserTokenManager",
                "org.graphstream.stream.file.dot"
            ],
            [
                "FileSink",
                "org.graphstream.stream.file"
            ],
            [
                "PajekContext",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "Graphics",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "NodeGraphics",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "EdgeGraphics",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "EdgeMatrix",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "PajekParserTokenManager",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "PajekParserConstants",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "FileSourceXML",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkBaseFiltered",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkDOT",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceParser",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkDGSFiltered",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceDOT",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceDGS1And2",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceGraphML",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceFactory",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkImages",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkDynamicGML",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkSVG",
                "org.graphstream.stream.file"
            ],
            [
                "GEXFSpell",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "SmartXMLWriter",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFElement",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFEdges",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFAttValues",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFEdge",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFSpells",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFAttValue",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFNodes",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFNode",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFMeta",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFAttributes",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXF",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFGraph",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFAttribute",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "OldFileSourceDGS",
                "org.graphstream.stream.file.dgs"
            ],
            [
                "DGSParser",
                "org.graphstream.stream.file.dgs"
            ],
            [
                "FileSourceBase",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkGML",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceDGS",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkDGSUtility",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceTLP",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkSVG2",
                "org.graphstream.stream.file"
            ],
            [
                "FileSource",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceNCol",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourcePajek",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceGPX",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceLGL",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkGEXF2",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceGML",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkGEXF",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkDGS",
                "org.graphstream.stream.file"
            ],
            [
                "ProxyPipe",
                "org.graphstream.stream"
            ],
            [
                "Sink",
                "org.graphstream.stream"
            ],
            [
                "Timeline",
                "org.graphstream.stream"
            ],
            [
                "Pipe",
                "org.graphstream.stream"
            ],
            [
                "SinkAdapter",
                "org.graphstream.stream"
            ],
            [
                "Replayable",
                "org.graphstream.stream"
            ],
            [
                "Source",
                "org.graphstream.stream"
            ],
            [
                "AnnotatedSink",
                "org.graphstream.stream"
            ],
            [
                "GraphReplay",
                "org.graphstream.stream"
            ],
            [
                "AttributePipe",
                "org.graphstream.stream"
            ],
            [
                "SinkTime",
                "org.graphstream.stream.sync"
            ],
            [
                "SourceTime",
                "org.graphstream.stream.sync"
            ],
            [
                "PipeBase",
                "org.graphstream.stream"
            ],
            [
                "ThreadProxyPipe",
                "org.graphstream.stream.thread"
            ],
            [
                "ThreadProxyPipeOld",
                "org.graphstream.stream.thread"
            ],
            [
                "RMISource",
                "org.graphstream.stream.rmi"
            ],
            [
                "RMIAdapterOut",
                "org.graphstream.stream.rmi"
            ],
            [
                "RMISink",
                "org.graphstream.stream.rmi"
            ],
            [
                "RMIAdapterIn",
                "org.graphstream.stream.rmi"
            ],
            [
                "SourceBase",
                "org.graphstream.stream"
            ],
            [
                "NetStreamDecoder",
                "org.graphstream.stream.netstream"
            ],
            [
                "NetStreamReceiver",
                "org.graphstream.stream.netstream"
            ],
            [
                "NetStreamConstants",
                "org.graphstream.stream.netstream"
            ],
            [
                "NetStreamSender",
                "org.graphstream.stream.netstream"
            ],
            [
                "DefaultNetStreamDecoder",
                "org.graphstream.stream.netstream"
            ],
            [
                "Base64",
                "org.graphstream.stream.netstream.packing"
            ],
            [
                "NetStreamUnpacker",
                "org.graphstream.stream.netstream.packing"
            ],
            [
                "Base64Packer",
                "org.graphstream.stream.netstream.packing"
            ],
            [
                "Base64Unpacker",
                "org.graphstream.stream.netstream.packing"
            ],
            [
                "NetStreamPacker",
                "org.graphstream.stream.netstream.packing"
            ],
            [
                "AttributePredicate",
                "org.graphstream.stream"
            ],
            [
                "Element",
                "org.graphstream.graph"
            ],
            [
                "Node",
                "org.graphstream.graph"
            ],
            [
                "BreadthFirstIterator",
                "org.graphstream.graph"
            ],
            [
                "Graph",
                "org.graphstream.graph"
            ],
            [
                "EdgeRejectedException",
                "org.graphstream.graph"
            ],
            [
                "CompoundAttribute",
                "org.graphstream.graph"
            ],
            [
                "Structure",
                "org.graphstream.graph"
            ],
            [
                "DepthFirstIterator",
                "org.graphstream.graph"
            ],
            [
                "NullAttributeException",
                "org.graphstream.graph"
            ],
            [
                "IdAlreadyInUseException",
                "org.graphstream.graph"
            ],
            [
                "EdgeFactory",
                "org.graphstream.graph"
            ],
            [
                "ElementNotFoundException",
                "org.graphstream.graph"
            ],
            [
                "OneAttributeElement",
                "org.graphstream.graph.implementations"
            ],
            [
                "AdjacencyListNode",
                "org.graphstream.graph.implementations"
            ],
            [
                "SingleNode",
                "org.graphstream.graph.implementations"
            ],
            [
                "AbstractElement",
                "org.graphstream.graph.implementations"
            ],
            [
                "AdjacencyListGraph",
                "org.graphstream.graph.implementations"
            ],
            [
                "AbstractNode",
                "org.graphstream.graph.implementations"
            ],
            [
                "DefaultGraph",
                "org.graphstream.graph.implementations"
            ],
            [
                "MultiGraph",
                "org.graphstream.graph.implementations"
            ],
            [
                "Graphs",
                "org.graphstream.graph.implementations"
            ],
            [
                "SingleGraph",
                "org.graphstream.graph.implementations"
            ],
            [
                "MultiNode",
                "org.graphstream.graph.implementations"
            ],
            [
                "AbstractGraph",
                "org.graphstream.graph.implementations"
            ],
            [
                "AbstractEdge",
                "org.graphstream.graph.implementations"
            ],
            [
                "GraphFactory",
                "org.graphstream.graph"
            ],
            [
                "NodeFactory",
                "org.graphstream.graph"
            ],
            [
                "Edge",
                "org.graphstream.graph"
            ],
            [
                "Path",
                "org.graphstream.graph"
            ]
        ],
        "tokensProjectClassesNonPrivateStaticNonVoidMethods": [
            [
                "gradientInArea",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "/**\n * Generate a gradient in the given pixel area following the given style.\n * This produces a gradient only if the style fill-mode is compatible.\n *\n * @param x0\n *            The left corner of the area.\n * @param y0\n *            The bottom corner of the area.\n * @param width\n *            The area width.\n * @param height\n *            The area height.\n * @param style\n *            The style.\n * @return A gradient paint or null if the style does not specify a\n *         gradient.\n */\npublic static Paint gradientInArea(int x0, int y0, int width, int height, Style style) {\n    switch(style.getFillMode()) {\n        case GRADIENT_VERTICAL:\n            return linearGradientFromStyle(x0, y0, x0, y0 + height, style);\n        case GRADIENT_HORIZONTAL:\n            return linearGradientFromStyle(x0, y0, x0 + width, y0, style);\n        case GRADIENT_DIAGONAL1:\n            return linearGradientFromStyle(x0, y0, x0 + width, y0 + height, style);\n        case GRADIENT_DIAGONAL2:\n            return linearGradientFromStyle(x0 + width, y0, x0, y0 + height, style);\n        case GRADIENT_RADIAL:\n            return radialGradientFromStyle(x0 + (width / 2), y0 + (height / 2), width > height ? width / 2 : height / 2, style);\n        default:\n            return null;\n    }\n}"
            ],
            [
                "linearGradientFromStyle",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "/**\n * Generate a linear gradient between two given points corresponding to the\n * given style.\n *\n * @param x0\n *            The start point abscissa.\n * @param y0\n *            The start point ordinate.\n * @param x1\n *            The end point abscissa.\n * @param y1\n *            The end point ordinate.\n * @param style\n *            The style.\n * @return A paint for the gradient or null if the style specifies no\n *         gradient (the fill mode is not a linear gradient or there is only\n *         one fill colour).\n */\npublic static Paint linearGradientFromStyle(float x0, float y0, float x1, float y1, Style style) {\n    Paint paint = null;\n    if (style.getFillColorCount() > 1) {\n        switch(style.getFillMode()) {\n            case GRADIENT_DIAGONAL1:\n            case GRADIENT_DIAGONAL2:\n            case GRADIENT_HORIZONTAL:\n            case GRADIENT_VERTICAL:\n                if (version16)\n                    paint = new LinearGradientPaint(x0, y0, x1, y1, createFractions(style), createColors(style));\n                else\n                    paint = new GradientPaint(x0, y0, style.getFillColor(0), x1, y1, style.getFillColor(1));\n                break;\n            default:\n                break;\n        }\n    }\n    return paint;\n}"
            ],
            [
                "radialGradientFromStyle",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static Paint radialGradientFromStyle(float cx, float cy, float radius, Style style) {\n    return radialGradientFromStyle(cx, cy, radius, cx, cy, style);\n}"
            ],
            [
                "radialGradientFromStyle",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "/**\n * Generate a radial gradient between whose center is at (cx,cy) with the\n * given radius. The focus (fx,fy) is the start position of the gradient in\n * the circle.\n *\n * @param cx\n *            The center point abscissa.\n * @param cy\n *            The center point ordinate.\n * @param fx\n *            The start point abscissa.\n * @param fy\n *            The start point ordinate.\n * @param radius\n *            The gradient radius.\n * @param style\n *            The style.\n * @return A paint for the gradient or null if the style specifies no\n *         gradient (the fill mode is not a radial gradient or there is only\n *         one fill colour).\n */\npublic static Paint radialGradientFromStyle(float cx, float cy, float radius, float fx, float fy, Style style) {\n    Paint paint = null;\n    if (version16) {\n        if (style.getFillColorCount() > 1 && style.getFillMode() == FillMode.GRADIENT_RADIAL) {\n            float[] fractions = createFractions(style);\n            Color[] colors = createColors(style);\n            paint = new RadialGradientPaint(cx, cy, radius, fx, fy, fractions, colors, MultipleGradientPaint.CycleMethod.REFLECT);\n        }\n    }\n    return paint;\n}"
            ],
            [
                "createFractions",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "protected static float[] createFractions(Style style) {\n    int n = style.getFillColorCount();\n    if (n < predefFractions.length)\n        return predefFractions[n];\n    float[] fractions = new float[n];\n    float div = 1f / (n - 1);\n    for (int i = 1; i < (n - 1); i++) fractions[i] = div * i;\n    fractions[0] = 0f;\n    fractions[n - 1] = 1f;\n    return fractions;\n}"
            ],
            [
                "createColors",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "protected static Color[] createColors(Style style) {\n    int n = style.getFillColorCount();\n    Color[] colors = new Color[n];\n    for (int i = 0; i < n; i++) colors[i] = style.getFillColor(i);\n    return colors;\n}"
            ],
            [
                "defaultImageCache",
                "org.graphstream.ui.swingViewer.util",
                "ImageCache",
                "/**\n * Default singleton image cache instance that can be shared. This method\n * and singleton must be used only in the Swing thread.\n *\n * @return The default singleton image cache instance.\n */\npublic static ImageCache defaultImageCache() {\n    if (defaultImageCache == null)\n        defaultImageCache = new ImageCache();\n    return defaultImageCache;\n}"
            ],
            [
                "generateStroke",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "/**\n * Generate a stroke of the appropriate width and style according to the\n * given style and metrics.\n *\n * @param style\n *            The style to use.\n * @param metrics\n *            The metrics to use.\n * @return The stroke or null if the style specifies a \"none\" stroke mode.\n */\npublic static Stroke generateStroke(Style style, GraphMetrics metrics) {\n    if (style.getStrokeWidth().value == 0)\n        return null;\n    switch(style.getStrokeMode()) {\n        case PLAIN:\n            return generatePlainStroke(style, metrics);\n        case DOTS:\n            return generateDotsStroke(style, metrics);\n        case DASHES:\n            return generateDashesStroke(style, metrics);\n        default:\n        case NONE:\n            return null;\n    }\n}"
            ],
            [
                "generatePlainStroke",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "protected static Stroke generatePlainStroke(Style style, GraphMetrics metrics) {\n    float width = (float) metrics.lengthToGu(style.getStrokeWidth());\n    /*\n\t\t * if( width == 1f ) return plainLine1px; // XXX Not a good optimisation\n\t\t * else if( width == 2f ) return plainLine2px; // We draw the whole\n\t\t * graph in GU else if( width == 3f ) return plainLine3px; // In graph\n\t\t * units the width is never exactly 1,2, 5 ... else if( width == 5f )\n\t\t * return plainLine5px; else if( width == 10f ) return plainLine10px;\n\t\t * else\n\t\t */\n    {\n        return new BasicStroke(width);\n    }\n}"
            ],
            [
                "generateDotsStroke",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "protected static Stroke generateDotsStroke(Style style, GraphMetrics metrics) {\n    float width = (float) metrics.lengthToGu(style.getStrokeWidth());\n    /*\n\t\t * if( width == 1f ) return dotsLine1px; else if( width == 2f ) return\n\t\t * dotsLine2px; else if( width == 3f ) return dotsLine3px; else if(\n\t\t * width == 5f ) return dotsLine5px; else if( width == 10f ) return\n\t\t * dotsLine10px; else\n\t\t */\n    {\n        dots[0] = (float) metrics.lengthToGu(1f, Units.PX);\n        dots[1] = dots[0];\n        return new BasicStroke(width, BasicStroke.CAP_BUTT, BasicStroke.JOIN_MITER, 1f, dots, 0);\n    }\n}"
            ],
            [
                "generateDashesStroke",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "protected static Stroke generateDashesStroke(Style style, GraphMetrics metrics) {\n    float width = (float) metrics.lengthToGu(style.getStrokeWidth());\n    /*\n\t\t * if( width == 1f ) return dashesLine1px; else if( width == 2f ) return\n\t\t * dashesLine2px; else if( width == 3f ) return dashesLine3px; else if(\n\t\t * width == 5f ) return dashesLine5px; else if( width == 10f ) return\n\t\t * dashesLine10px; else\n\t\t */\n    {\n        dashes[0] = (float) metrics.lengthToGu(3f, Units.PX);\n        dashes[1] = dashes[0];\n        return new BasicStroke(width, BasicStroke.CAP_BUTT, BasicStroke.JOIN_MITER, 1f, dashes, 0);\n    }\n}"
            ],
            [
                "defaultFontCache",
                "org.graphstream.ui.swingViewer.util",
                "FontCache",
                "/**\n * Default singleton instance for shared font cache. This method and cache\n * can only be used in the Swing thread.\n *\n * @return The default singleton font cache instance.\n */\npublic static FontCache defaultFontCache() {\n    if (defaultFontCache == null)\n        defaultFontCache = new FontCache();\n    return defaultFontCache;\n}"
            ],
            [
                "newLayoutAlgorithm",
                "org.graphstream.ui.layout",
                "Layouts",
                "/**\n * Creates a layout according to the \"org.graphstream.ui.layout\" system property.\n *\n * @return The new layout or the default GraphStream \"Spring-Box\" layout if\n *         the \"gs.ui.layout\" system property is either not set or contains\n *         a class that cannot be found.\n */\npublic static Layout newLayoutAlgorithm() {\n    String layoutClassName;\n    try {\n        layoutClassName = System.getProperty(\"gs.ui.layout\");\n        if (layoutClassName != null) {\n            logger.log(Level.WARNING, \"\\\"gs.ui.layout\\\" is deprecated, use \\\"org.graphstream.ui.layout\\\" instead.\");\n        } else {\n            layoutClassName = System.getProperty(\"org.graphstream.ui.layout\");\n        }\n    } catch (AccessControlException e) {\n        layoutClassName = null;\n    }\n    if (layoutClassName != null) {\n        try {\n            Class<?> c = Class.forName(layoutClassName);\n            Object object = c.newInstance();\n            if (object instanceof Layout) {\n                return (Layout) object;\n            } else {\n                logger.warning(String.format(\"class '%s' is not a 'GraphRenderer'%n\", object));\n            }\n        } catch (Exception e) {\n            logger.log(Level.WARNING, \"Cannot create layout.\", e);\n        }\n    }\n    return new org.graphstream.ui.layout.springbox.implementations.SpringBox(false);\n}"
            ],
            [
                "eval",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * Evaluate a cubic B\u00e9zier curve according to control points `x0`, `x1`,\n * `x2` and `x3` and return the position at parametric position `t` of the\n * curve.\n *\n * @return The coordinate at parametric position `t` on the curve.\n */\npublic static double eval(double x0, double x1, double x2, double x3, double t) {\n    double tt = (1f - t);\n    return x0 * (tt * tt * tt) + 3f * x1 * t * (tt * tt) + 3f * x2 * (t * t) * tt + x3 * (t * t * t);\n}"
            ],
            [
                "eval",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * Evaluate a cubic B\u00e9zier curve according to control points `p0`, `p1`,\n * `p2` and `p3` and return the position at parametric position `t` of the\n * curve.\n *\n * @return The point at parametric position `t` on the curve.\n */\npublic static Point2 eval(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t) {\n    return new Point2(eval(p0.x, p1.x, p2.x, p3.x, t), eval(p0.y, p1.y, p2.y, p3.y, t));\n}"
            ],
            [
                "eval",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * Evaluate a cubic B\u00e9zier curve according to control points `p0`, `p1`,\n * `p2` and `p3` and return the position at parametric position `t` of the\n * curve.\n *\n * @return The point at parametric position `t` on the curve.\n */\npublic static Point2D.Double eval(Point2D.Double p0, Point2D.Double p1, Point2D.Double p2, Point2D.Double p3, double t) {\n    return new Point2D.Double(eval(p0.x, p1.x, p2.x, p3.x, t), eval(p0.y, p1.y, p2.y, p3.y, t));\n}"
            ],
            [
                "eval",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * Evaluate a cubic B\u00e9zier curve according to control points `p0`, `p1`,\n * `p2` and `p3` and store the position at parametric position `t` of the\n * curve in `result`.\n *\n * @return the given reference to `result`.\n */\npublic static Point2 eval(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t, Point2 result) {\n    result.set(eval(p0.x, p1.x, p2.x, p3.x, t), eval(p0.y, p1.y, p2.y, p3.y, t));\n    return result;\n}"
            ],
            [
                "derivative",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * Derivative of a cubic B\u00e9zier curve according to control points `x0`,\n * `x1`, `x2` and `x3` at parametric position `t` of the curve.\n *\n * @return The derivative at parametric position `t` on the curve.\n */\npublic static double derivative(double x0, double x1, double x2, double x3, double t) {\n    return 3 * (x3 - 3 * x2 + 3 * x1 - x0) * t * t + 2 * (3 * x2 - 6 * x1 + 3 * x0) * t + (3 * x1 - 3 * x0);\n}"
            ],
            [
                "derivative",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * Derivative point of a cubic B\u00e9zier curve according to control points\n * `x0`, `x1`, `x2` and `x3` at parametric position `t` of the curve.\n *\n * @return The derivative point at parametric position `t` on the curve.\n */\npublic static Point2 derivative(Point2 p0, Point2 p1, Point2 p2, Point3 p3, double t) {\n    return new Point2(derivative(p0.x, p1.x, p2.x, p3.x, t), derivative(p0.y, p1.y, p2.y, p3.y, t));\n}"
            ],
            [
                "derivative",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * Store in `result` the derivative point of a cubic B\u00e9zier curve according\n * to control points `x0`, `x1`, `x2` and `x3` at parametric position `t` of\n * the curve.\n *\n * @return the given reference to `result`.\n */\npublic static Point2 derivative(Point2 p0, Point2 p1, Point2 p2, Point3 p3, double t, Point2 result) {\n    result.set(derivative(p0.x, p1.x, p2.x, p3.x, t), derivative(p0.y, p1.y, p2.y, p3.y, t));\n    return result;\n}"
            ],
            [
                "perpendicular",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * The perpendicular vector to the curve defined by control points `p0`,\n * `p1`, `p2` and `p3` at parametric position `t`.\n *\n * @return A vector perpendicular to the curve at position `t`.\n */\npublic static Vector2 perpendicular(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t) {\n    return new Vector2(derivative(p0.y, p1.y, p2.y, p3.y, t), -derivative(p0.x, p1.x, p2.x, p3.x, t));\n}"
            ],
            [
                "perpendicular",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * Store in `result` the perpendicular vector to the curve defined by\n * control points `p0`, `p1`, `p2` and `p3` at parametric position `t`.\n *\n * @return the given reference to `result`.\n */\npublic static Vector2 perpendicular(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t, Vector2 result) {\n    result.set(derivative(p0.y, p1.y, p2.y, p3.y, t), -derivative(p0.x, p1.x, p2.x, p3.x, t));\n    return result;\n}"
            ],
            [
                "perpendicular",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * The perpendicular vector to the curve defined by control points `p0`,\n * `p1`, `p2` and `p3` at parametric position `t`.\n *\n * @return A vector perpendicular to the curve at position `t`.\n */\npublic static Point2D.Double perpendicular(Point2D.Double p0, Point2D.Double p1, Point2D.Double p2, Point2D.Double p3, double t) {\n    return new Point2D.Double(derivative(p0.y, p1.y, p2.y, p3.y, t), -derivative(p0.x, p1.x, p2.x, p3.x, t));\n}"
            ],
            [
                "newGraphRenderer",
                "org.graphstream.ui.view",
                "Viewer",
                "// Access\n/**\n * Create a new instance of the default graph renderer. The default graph\n * renderer class is given by the \"org.graphstream.ui.renderer\" system\n * property. If the class indicated by this property is not usable (not in\n * the class path, not of the correct type, etc.) or if the property is not\n * present a SwingBasicGraphRenderer is returned.\n */\npublic static GraphRenderer newGraphRenderer() {\n    String rendererClassName;\n    try {\n        rendererClassName = System.getProperty(\"gs.ui.renderer\");\n        if (rendererClassName != null) {\n            logger.warning(\"\\\"gs.ui.renderer\\\" is deprecated, use \\\"org.graphstream.ui.renderer\\\" instead.\");\n        } else {\n            rendererClassName = System.getProperty(\"org.graphstream.ui.renderer\");\n        }\n    } catch (AccessControlException e) {\n        rendererClassName = null;\n    }\n    if (rendererClassName == null)\n        return new SwingBasicGraphRenderer();\n    try {\n        Class<?> c = Class.forName(rendererClassName);\n        Object object = c.newInstance();\n        if (object instanceof GraphRenderer) {\n            return (GraphRenderer) object;\n        } else {\n            logger.warning(String.format(\"Class '%s' is not a 'GraphRenderer'.\", object));\n        }\n    } catch (Exception e) {\n        logger.log(Level.WARNING, \"Cannot create graph renderer.\", e);\n    }\n    return new SwingBasicGraphRenderer();\n}"
            ],
            [
                "getPositionValue",
                "org.graphstream.ui.spriteManager",
                "SpriteManager",
                "// Utility\nprotected static Values getPositionValue(Object value) {\n    if (value instanceof Object[]) {\n        Object[] values = (Object[]) value;\n        if (values.length == 4) {\n            if (values[0] instanceof Number && values[1] instanceof Number && values[2] instanceof Number && values[3] instanceof Style.Units) {\n                return new Values((Style.Units) values[3], ((Number) values[0]).floatValue(), ((Number) values[1]).floatValue(), ((Number) values[2]).floatValue());\n            } else {\n                logger.warning(\"Cannot parse values[4] for sprite position.\");\n            }\n        } else if (values.length == 3) {\n            if (values[0] instanceof Number && values[1] instanceof Number && values[2] instanceof Number) {\n                return new Values(Units.GU, ((Number) values[0]).floatValue(), ((Number) values[1]).floatValue(), ((Number) values[2]).floatValue());\n            } else {\n                logger.warning(\"Cannot parse values[3] for sprite position.\");\n            }\n        } else if (values.length == 1) {\n            if (values[0] instanceof Number) {\n                return new Values(Units.GU, ((Number) values[0]).floatValue());\n            } else {\n                logger.warning(String.format(\"Sprite position percent is not a number.\"));\n            }\n        } else {\n            logger.warning(String.format(\"Cannot transform value '%s' (length=%d) into a position.\", Arrays.toString(values), values.length));\n        }\n    } else if (value instanceof Number) {\n        return new Values(Units.GU, ((Number) value).floatValue());\n    } else if (value instanceof Value) {\n        return new Values((Value) value);\n    } else if (value instanceof Values) {\n        return new Values((Values) value);\n    } else {\n        System.err.printf(\"GraphicGraph : cannot place sprite with posiiton '%s' (instance of %s)%n\", value, value.getClass().getName());\n    }\n    return null;\n}"
            ],
            [
                "convertColor",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Try to convert the given string value to a colour. It understands the 600\n * colour names of the X11 RGB data base. It also understands colours given\n * in the \"#FFFFFF\" format and the hexadecimal \"0xFFFFFF\" format. Finally,\n * it understands colours given as a \"rgb(1,10,100)\", CSS-like format. If\n * the input value is null, the result is null.\n *\n * @param anyValue\n *            The value to convert.\n * @return the converted colour or null if the conversion failed.\n */\npublic static Color convertColor(Object anyValue) {\n    if (anyValue == null)\n        return null;\n    if (anyValue instanceof Color)\n        return (Color) anyValue;\n    if (anyValue instanceof String) {\n        Color c = null;\n        String value = (String) anyValue;\n        if (value.startsWith(\"#\")) {\n            Matcher m = sharpColor1.matcher(value);\n            if (m.matches()) {\n                if (value.length() == 7) {\n                    try {\n                        c = Color.decode(value);\n                        return c;\n                    } catch (NumberFormatException e) {\n                        c = null;\n                    }\n                } else if (value.length() == 9) {\n                    int r = Integer.parseInt(m.group(1), 16);\n                    int g = Integer.parseInt(m.group(2), 16);\n                    int b = Integer.parseInt(m.group(3), 16);\n                    int a = Integer.parseInt(m.group(4), 16);\n                    return new Color(r, g, b, a);\n                }\n            }\n            m = sharpColor2.matcher(value);\n            if (m.matches()) {\n                if (value.length() >= 4) {\n                    int r = Integer.parseInt(m.group(1), 16) * 16;\n                    int g = Integer.parseInt(m.group(2), 16) * 16;\n                    int b = Integer.parseInt(m.group(3), 16) * 16;\n                    int a = 255;\n                    if (value.length() == 5)\n                        a = Integer.parseInt(m.group(4), 16) * 16;\n                    return new Color(r, g, b, a);\n                }\n            }\n        } else if (value.startsWith(\"rgb\")) {\n            Matcher m = cssColorA.matcher(value);\n            if (m.matches()) {\n                int r = Integer.parseInt(m.group(1));\n                int g = Integer.parseInt(m.group(2));\n                int b = Integer.parseInt(m.group(3));\n                int a = Integer.parseInt(m.group(4));\n                return new Color(r, g, b, a);\n            }\n            m = cssColor.matcher(value);\n            if (m.matches()) {\n                int r = Integer.parseInt(m.group(1));\n                int g = Integer.parseInt(m.group(2));\n                int b = Integer.parseInt(m.group(3));\n                return new Color(r, g, b);\n            }\n        } else if (value.startsWith(\"0x\") || value.startsWith(\"0X\")) {\n            Matcher m = hexaColor.matcher(value);\n            if (m.matches()) {\n                if (value.length() == 8) {\n                    try {\n                        return Color.decode(value);\n                    } catch (NumberFormatException e) {\n                        c = null;\n                    }\n                } else if (value.length() == 10) {\n                    String r = m.group(1);\n                    String g = m.group(2);\n                    String b = m.group(3);\n                    String a = m.group(4);\n                    return new Color(Integer.parseInt(r, 16), Integer.parseInt(g, 16), Integer.parseInt(b, 16), Integer.parseInt(a, 16));\n                }\n            }\n        } else if (value.startsWith(\"java.awt.Color[\")) {\n            Matcher m = awtColor.matcher(value);\n            if (m.matches()) {\n                int r = Integer.parseInt(m.group(1));\n                int g = Integer.parseInt(m.group(2));\n                int b = Integer.parseInt(m.group(3));\n                return new Color(r, g, b);\n            }\n        }\n        return colorMap.get(value.toLowerCase());\n    }\n    // TODO throw an exception instead ??\n    return null;\n}"
            ],
            [
                "convertLabel",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Check if the given value is an instance of CharSequence (String is) and\n * return it as a string. Else return null. If the input value is null, the\n * return value is null. If the value returned is larger than 128\n * characters, this method cuts it to 128 characters. TODO: allow to set the\n * max length of these strings.\n *\n * @param value\n *            The value to convert.\n * @return The corresponding string, or null.\n */\npublic static String convertLabel(Object value) {\n    String label = null;\n    if (value != null) {\n        if (value instanceof CharSequence)\n            label = ((CharSequence) value).toString();\n        else\n            label = value.toString();\n        if (label.length() > 128)\n            label = String.format(\"%s...\", label.substring(0, 128));\n    }\n    return label;\n}"
            ],
            [
                "convertWidth",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Try to convert an arbitrary value to a float. If it is a descendant of\n * Number, the float value is returned. If it is a string, a conversion is\n * tried to change it into a number and if successful, this number is\n * returned as a float. Else, the -1 value is returned as no width can be\n * negative to indicate the conversion failed. If the input is null, the\n * return value is -1.\n *\n * @param value\n *            The input to convert.\n * @return The value or -1 if the conversion failed. TODO should be named\n *         convertNumber\n */\npublic static float convertWidth(Object value) {\n    if (value instanceof CharSequence) {\n        try {\n            float val = Float.parseFloat(((CharSequence) value).toString());\n            return val;\n        } catch (NumberFormatException e) {\n            return -1;\n        }\n    } else if (value instanceof Number) {\n        return ((Number) value).floatValue();\n    }\n    return -1;\n}"
            ],
            [
                "convertValue",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Convert an object to a value with units. The object can be a number, in\n * which case the value returned contains this number in pixel units. The\n * object can be a string. In this case the strings understood by this\n * method are of the form (spaces, number, spaces, unit, spaces). For\n * example \"3px\", \"45gu\", \"5.5%\", \" 25.3  gu \", \"4\", \"   28.1  \".\n *\n * @param value\n *            A Number or a CharSequence.\n * @return A value.\n */\npublic static Value convertValue(Object value) {\n    if (value instanceof CharSequence) {\n        CharSequence string = (CharSequence) value;\n        //\t\t\tif (string == null)\n        //\t\t\t\tthrow new RuntimeException(\"null size string ...\");\n        if (string.length() < 0)\n            throw new RuntimeException(\"empty size string ...\");\n        Matcher m = numberUnit.matcher(string);\n        if (m.matches())\n            return new Value(convertUnit(m.group(2)), Float.parseFloat(m.group(1)));\n        m = number.matcher(string);\n        if (m.matches())\n            return new Value(Units.PX, Float.parseFloat(m.group(1)));\n        throw new RuntimeException(String.format(\"string is not convertible to a value (%s)\", string));\n    } else if (value instanceof Number) {\n        return new Value(Units.PX, ((Number) value).floatValue());\n    }\n    if (value == null)\n        throw new RuntimeException(\"cannot convert null value\");\n    throw new RuntimeException(String.format(\"value is of class %s%n\", value.getClass().getName()));\n}"
            ],
            [
                "convertUnit",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Convert \"gu\", \"px\" and \"%\" to Units.GU, Units.PX, Units.PERCENTS.\n */\nprotected static Units convertUnit(String unit) {\n    if (unit.equals(\"gu\"))\n        return Units.GU;\n    else if (unit.equals(\"px\"))\n        return Units.PX;\n    else if (unit.equals(\"%\"))\n        return Units.PERCENTS;\n    return Units.PX;\n}"
            ],
            [
                "nodePosition",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "/**\n * Retrieve a node position from its attributes (\"x\", \"y\", \"z\", or \"xy\", or\n * \"xyz\").\n *\n * @param id\n *            The node identifier.\n * @return A newly allocated array of three floats containing the (x,y,z)\n *         position of the node, or null if the node is not part of the\n *         graph.\n */\npublic static double[] nodePosition(Graph graph, String id) {\n    Node node = graph.getNode(id);\n    if (node != null)\n        return nodePosition(node);\n    return null;\n}"
            ],
            [
                "nodePointPosition",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "/**\n * Retrieve a node position from its attributes (\"x\", \"y\", \"z\", or \"xy\", or\n * \"xyz\").\n *\n * @param id\n *            The node identifier.\n * @return A newly allocated point containing the (x,y,z)\n *         position of the node, or null if the node is not part of the\n *         graph.\n */\npublic static Point3 nodePointPosition(Graph graph, String id) {\n    Node node = graph.getNode(id);\n    if (node != null)\n        return nodePointPosition(node);\n    return null;\n}"
            ],
            [
                "nodePosition",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "/**\n * Like {@link #nodePosition(Graph,String)} but use an existing node as\n * argument.\n *\n * @param node\n *            The node to consider.\n * @return A newly allocated array of three floats containing the (x,y,z)\n *         position of the node.\n */\npublic static double[] nodePosition(Node node) {\n    double[] xyz = new double[3];\n    nodePosition(node, xyz);\n    return xyz;\n}"
            ],
            [
                "nodePointPosition",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "/**\n * Like {@link #nodePointPosition(Graph,String)} but use an existing node as\n * argument.\n *\n * @param node\n *            The node to consider.\n * @return A newly allocated point containing the (x,y,z)\n *         position of the node.\n */\npublic static Point3 nodePointPosition(Node node) {\n    Point3 pos = new Point3();\n    nodePosition(node, pos);\n    return pos;\n}"
            ],
            [
                "edgeLength",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "/**\n * Compute the edge length of the given edge according to its two nodes\n * positions.\n *\n * @param id\n *            The identifier of the edge.\n * @return The edge length or -1 if the nodes of the edge have no positions.\n * @throws RuntimeException\n *             If the edge cannot be found.\n */\npublic static double edgeLength(Graph graph, String id) {\n    Edge edge = graph.getEdge(id);\n    if (edge != null)\n        return edgeLength(edge);\n    throw new RuntimeException(\"edge '\" + id + \"' cannot be found\");\n}"
            ],
            [
                "edgeLength",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "/**\n * Like {@link #edgeLength(Graph,String)} but use an existing edge as\n * argument.\n *\n * @param edge\n * @return The edge length or -1 if the nodes of the edge have no positions.\n */\npublic static double edgeLength(Edge edge) {\n    double[] xyz0 = nodePosition(edge.getNode0());\n    double[] xyz1 = nodePosition(edge.getNode1());\n    if (xyz0 == null || xyz1 == null)\n        return -1;\n    xyz0[0] = xyz1[0] - xyz0[0];\n    xyz0[1] = xyz1[1] - xyz0[1];\n    xyz0[2] = xyz1[2] - xyz0[2];\n    return Math.sqrt(xyz0[0] * xyz0[0] + xyz0[1] * xyz0[1] + xyz0[2] * xyz0[2]);\n}"
            ],
            [
                "getGlobalEnvironment",
                "org.graphstream.util",
                "Environment",
                "// --------- Static methods -----------\n/**\n * Access to the global shared environment for the whole JVM. This method\n * allows to access a shared environment, that can be read and written from\n * anywhere.\n * @return A singleton instance of the global environment.\n */\npublic static Environment getGlobalEnvironment() {\n    if (GLOBAL_ENV == null)\n        GLOBAL_ENV = new Environment();\n    return GLOBAL_ENV;\n}"
            ],
            [
                "falseFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> falseFilter() {\n    return new Filter<T>() {\n\n        public boolean isAvailable(T e) {\n            return false;\n        }\n    };\n}"
            ],
            [
                "trueFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> trueFilter() {\n    return new Filter<T>() {\n\n        public boolean isAvailable(T e) {\n            return true;\n        }\n    };\n}"
            ],
            [
                "byAttributeFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> byAttributeFilter(String key, Object expectedValue) {\n    return new ByAttributeFilter<T>(key, expectedValue);\n}"
            ],
            [
                "separateNodeAndEdgeFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element, U extends Element> Filter<Element> separateNodeAndEdgeFilter(Filter<T> nodeFilter, Filter<U> edgeFilter) {\n    return new SeparateNodeEdgeFilter<T, U>(nodeFilter, edgeFilter);\n}"
            ],
            [
                "byExtremitiesFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element, U extends Element> Filter<T> byExtremitiesFilter(Filter<U> f) {\n    return new ExtremitiesFilter<T, U>(f);\n}"
            ],
            [
                "byIdFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> byIdFilter(String idPattern) {\n    return new ByIdFilter<T>(idPattern);\n}"
            ],
            [
                "isContained",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> isContained(final Collection<? extends T> set) {\n    return new Filter<T>() {\n\n        public boolean isAvailable(T e) {\n            return set.contains(e);\n        }\n    };\n}"
            ],
            [
                "isIdContained",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> isIdContained(final Collection<String> set) {\n    return new Filter<T>() {\n\n        public boolean isAvailable(T e) {\n            return set.contains(e.getId());\n        }\n    };\n}"
            ],
            [
                "and",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> and(Filter<T> f1, Filter<T> f2) {\n    return new AndFilter<T>(f1, f2);\n}"
            ],
            [
                "or",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> or(Filter<T> f1, Filter<T> f2) {\n    return new OrFilter<T>(f1, f2);\n}"
            ],
            [
                "xor",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> xor(Filter<T> f1, Filter<T> f2) {\n    return new XorFilter<T>(f1, f2);\n}"
            ],
            [
                "not",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> not(Filter<T> f) {\n    return new NotFilter<T>(f);\n}"
            ],
            [
                "addEscapes",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "/**\n * Replaces unprintable characters by their escaped (or unicode escaped)\n * equivalents in the given string\n */\nprotected static final String addEscapes(String str) {\n    StringBuffer retval = new StringBuffer();\n    char ch;\n    for (int i = 0; i < str.length(); i++) {\n        switch(str.charAt(i)) {\n            case 0:\n                continue;\n            case '\\b':\n                retval.append(\"\\\\b\");\n                continue;\n            case '\\t':\n                retval.append(\"\\\\t\");\n                continue;\n            case '\\n':\n                retval.append(\"\\\\n\");\n                continue;\n            case '\\f':\n                retval.append(\"\\\\f\");\n                continue;\n            case '\\r':\n                retval.append(\"\\\\r\");\n                continue;\n            case '\\\"':\n                retval.append(\"\\\\\\\"\");\n                continue;\n            case '\\'':\n                retval.append(\"\\\\\\'\");\n                continue;\n            case '\\\\':\n                retval.append(\"\\\\\\\\\");\n                continue;\n            default:\n                if ((ch = str.charAt(i)) < 0x20 || ch > 0x7e) {\n                    String s = \"0000\" + Integer.toString(ch, 16);\n                    retval.append(\"\\\\u\" + s.substring(s.length() - 4, s.length()));\n                } else {\n                    retval.append(ch);\n                }\n                continue;\n        }\n    }\n    return retval.toString();\n}"
            ],
            [
                "LexicalError",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "/**\n * Returns a detailed message for the Error when it is thrown by the token\n * manager to indicate a lexical error. Parameters : EOFSeen : indicates if\n * EOF caused the lexical error curLexState : lexical state in which this\n * error occurred errorLine : line number when the error occurred\n * errorColumn : column number when the error occurred errorAfter : prefix\n * that was seen before this error occurred curchar : the offending\n * character Note: You can customize the lexical error message by modifying\n * this method.\n */\nprotected static String LexicalError(boolean EOFSeen, int lexState, int errorLine, int errorColumn, String errorAfter, char curChar) {\n    return (\"Lexical error at line \" + errorLine + \", column \" + errorColumn + \".  Encountered: \" + (EOFSeen ? \"<EOF> \" : (\"\\\"\" + addEscapes(String.valueOf(curChar)) + \"\\\"\") + \" (\" + (int) curChar + \"), \") + \"after : \\\"\" + addEscapes(errorAfter) + \"\\\"\");\n}"
            ],
            [
                "add_escapes",
                "org.graphstream.util.parser",
                "ParseException",
                "/**\n * Used to convert raw characters to their escaped version when these raw\n * version cannot be used as part of an ASCII string literal.\n */\nstatic String add_escapes(String str) {\n    StringBuffer retval = new StringBuffer();\n    char ch;\n    for (int i = 0; i < str.length(); i++) {\n        switch(str.charAt(i)) {\n            case 0:\n                continue;\n            case '\\b':\n                retval.append(\"\\\\b\");\n                continue;\n            case '\\t':\n                retval.append(\"\\\\t\");\n                continue;\n            case '\\n':\n                retval.append(\"\\\\n\");\n                continue;\n            case '\\f':\n                retval.append(\"\\\\f\");\n                continue;\n            case '\\r':\n                retval.append(\"\\\\r\");\n                continue;\n            case '\\\"':\n                retval.append(\"\\\\\\\"\");\n                continue;\n            case '\\'':\n                retval.append(\"\\\\\\'\");\n                continue;\n            case '\\\\':\n                retval.append(\"\\\\\\\\\");\n                continue;\n            default:\n                if ((ch = str.charAt(i)) < 0x20 || ch > 0x7e) {\n                    String s = \"0000\" + Integer.toString(ch, 16);\n                    retval.append(\"\\\\u\" + s.substring(s.length() - 4, s.length()));\n                } else {\n                    retval.append(ch);\n                }\n                continue;\n        }\n    }\n    return retval.toString();\n}"
            ],
            [
                "newToken",
                "org.graphstream.util.parser",
                "Token",
                "/**\n * Returns a new Token object, by default. However, if you want, you can\n * create and return subclass objects based on the value of ofKind. Simply\n * add the cases to the switch for all those special cases. For example, if\n * you have a subclass of Token called IDToken that you want to create if\n * ofKind is ID, simply add something like :\n *\n * case MyParserConstants.ID : return new IDToken(ofKind, image);\n *\n * to the following switch statement. Then you can cast matchedToken\n * variable to the appropriate type and use sit in your lexical actions.\n */\npublic static Token newToken(int ofKind, String image) {\n    switch(ofKind) {\n        default:\n            return new Token(ofKind, image);\n    }\n}"
            ],
            [
                "newToken",
                "org.graphstream.util.parser",
                "Token",
                "public static Token newToken(int ofKind) {\n    return newToken(ofKind, null);\n}"
            ],
            [
                "countStepInFile",
                "org.graphstream.util",
                "StepCounter",
                "/**\n * Count step contains in a file.\n *\n * @param path\n *            path to the file\n * @return count of step event in the file\n * @throws IOException\n * @see org.graphstream.stream.file.FileSourceFactory\n */\npublic static int countStepInFile(String path) throws IOException {\n    StepCounter counter = new StepCounter();\n    FileSource source = FileSourceFactory.sourceFor(path);\n    source.addElementSink(counter);\n    source.readAll(path);\n    return counter.getStepCount();\n}"
            ],
            [
                "GET",
                "org.graphstream.stream.net",
                "HTTPSource",
                "@SuppressWarnings(\"unchecked\")\nprotected static HashMap<String, Object> GET(HttpExchange ex) {\n    HashMap<String, Object> get = new HashMap<String, Object>();\n    String[] args = ex.getRequestURI().getRawQuery().split(\"[&]\");\n    for (String arg : args) {\n        String[] kv = arg.split(\"[=]\");\n        String k, v;\n        k = null;\n        v = null;\n        try {\n            if (kv.length > 0)\n                k = URLDecoder.decode(kv[0], System.getProperty(\"file.encoding\"));\n            if (kv.length > 1)\n                v = URLDecoder.decode(kv[1], System.getProperty(\"file.encoding\"));\n            if (get.containsKey(k)) {\n                Object o = get.get(k);\n                if (o instanceof LinkedList<?>)\n                    ((LinkedList<Object>) o).add(v);\n                else {\n                    LinkedList<Object> l = new LinkedList<Object>();\n                    l.add(o);\n                    l.add(v);\n                    get.put(k, l);\n                }\n            } else {\n                get.put(k, v);\n            }\n        } catch (UnsupportedEncodingException e) {\n            e.printStackTrace();\n        }\n    }\n    return get;\n}"
            ],
            [
                "sinkFor",
                "org.graphstream.stream.file",
                "FileSinkFactory",
                "/**\n * Looks at the file name given and its extension and propose a file output\n * for the format that match this extension.\n *\n * @param filename\n *            The file name where the graph will be written.\n * @return A file sink or null.\n */\npublic static FileSink sinkFor(String filename) {\n    if (filename.indexOf('.') > 0) {\n        String ext = filename.substring(filename.lastIndexOf('.') + 1);\n        ext = ext.toLowerCase();\n        if (ext2sink.containsKey(ext)) {\n            Class<? extends FileSink> fsink = ext2sink.get(ext);\n            try {\n                return fsink.newInstance();\n            } catch (InstantiationException e) {\n                e.printStackTrace();\n            } catch (IllegalAccessException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n    return null;\n}"
            ],
            [
                "formatId",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "protected static String formatId(String id) {\n    return \"node\" + id.replaceAll(\"\\\\W\", \"_\");\n}"
            ],
            [
                "getInt",
                "org.graphstream.stream.file.pajek",
                "PajekContext",
                "protected static int getInt(Token nb) throws ParseException {\n    try {\n        return Integer.parseInt(nb.image);\n    } catch (Exception e) {\n        throw new ParseException(String.format(\"%d:%d: %s not an integer\", nb.beginLine, nb.beginColumn, nb.image));\n    }\n}"
            ],
            [
                "getReal",
                "org.graphstream.stream.file.pajek",
                "PajekContext",
                "protected static double getReal(Token nb) throws ParseException {\n    try {\n        return Double.parseDouble(nb.image);\n    } catch (Exception e) {\n        throw new ParseException(String.format(\"%d:%d: %s not a real\", nb.beginLine, nb.beginColumn, nb.image));\n    }\n}"
            ],
            [
                "toColorValue",
                "org.graphstream.stream.file.pajek",
                "PajekContext",
                "public static String toColorValue(Token R, Token G, Token B) throws ParseException {\n    double r = getReal(R);\n    double g = getReal(G);\n    double b = getReal(B);\n    return String.format(\"rgb(%d, %d, %d)\", (int) (r * 255), (int) (g * 255), (int) (b * 255));\n}"
            ],
            [
                "sourceFor",
                "org.graphstream.stream.file",
                "FileSourceFactory",
                "/**\n * Create a file input for the given file name.\n *\n * <p>\n * This method first tests if the file is a regular file and is readable. If\n * so, it opens it and reads the magic cookie to test the known file formats\n * that can be inferred from their header. If it works, it returns a file\n * input for the format. Else it looks at the file name extension, and\n * returns a file input for the extension. Finally if all fail, it throws a\n * NotFoundException.\n * </p>\n *\n * <p>\n * Notice that this method only creates the file input and does not connect\n * it to a graph.\n * </p>\n *\n * @param fileName\n *            Name of the graph file.\n * @return A graph reader suitable for the fileName graph format.\n * @throws IOException\n *             If the file is not readable or accessible.\n */\npublic static FileSource sourceFor(String fileName) throws IOException {\n    File file = new File(fileName);\n    if (!file.isFile())\n        throw new IOException(\"not a regular file '\" + fileName + \"'\");\n    if (!file.canRead())\n        throw new IOException(\"not a readable file '\" + fileName + \"'\");\n    // Try to read the beginning of the file.\n    RandomAccessFile in = new RandomAccessFile(fileName, \"r\");\n    byte[] b = new byte[10];\n    int n = in.read(b, 0, 10);\n    // System.err.printf( \"[\" );\n    // for( int i=0; i<n; ++i )\n    // {\n    // System.err.printf( \"%c\", (char)b[i] );\n    // }\n    // System.err.printf( \"]%n\" );\n    in.close();\n    // Surely match a DGS file, as DGS files are well done and have a\n    // signature.\n    if (n >= 3 && b[0] == 'D' && b[1] == 'G' && b[2] == 'S') {\n        if (n >= 6 && b[3] == '0' && b[4] == '0') {\n            if (b[5] == '1' || b[5] == '2') {\n                return new FileSourceDGS1And2();\n            } else if (b[5] == '3' || b[5] == '4') {\n                return new FileSourceDGS();\n            }\n        }\n    }\n    // Maybe match a GML file as most GML files begin by the line \"graph [\",\n    // but not sure, you may create a GML file that starts by a comment, an\n    // empty line, with any kind of spaces, etc.\n    if (n >= 7 && b[0] == 'g' && b[1] == 'r' && b[2] == 'a' && b[3] == 'p' && b[4] == 'h' && b[5] == ' ' && b[6] == '[') {\n        return new org.graphstream.stream.file.FileSourceGML();\n    }\n    if (n >= 4 && b[0] == '(' && b[1] == 't' && b[2] == 'l' && b[3] == 'p')\n        return new FileSourceTLP();\n    // The web reader.\n    String flc = fileName.toLowerCase();\n    // If we did not found anything, we try with the filename extension ...\n    if (flc.endsWith(\".dgs\")) {\n        return new FileSourceDGS();\n    }\n    if (flc.endsWith(\".gml\") || flc.endsWith(\".dgml\")) {\n        return new org.graphstream.stream.file.FileSourceGML();\n    }\n    if (flc.endsWith(\".net\")) {\n        return new FileSourcePajek();\n    }\n    if (flc.endsWith(\".chaco\") || flc.endsWith(\".graph\")) {\n        // return new GraphReaderChaco();\n    }\n    if (flc.endsWith(\".dot\")) {\n        return new org.graphstream.stream.file.FileSourceDOT();\n    }\n    if (flc.endsWith(\".edge\")) {\n        return new FileSourceEdge();\n    }\n    if (flc.endsWith(\".lgl\")) {\n        return new FileSourceLGL();\n    }\n    if (flc.endsWith(\".ncol\")) {\n        return new FileSourceNCol();\n    }\n    if (flc.endsWith(\".tlp\")) {\n        return new FileSourceTLP();\n    }\n    if (flc.endsWith(\".xml\")) {\n        String root = getXMLRootElement(fileName);\n        if (root.equalsIgnoreCase(\"gexf\"))\n            return new FileSourceGEXF();\n        return new FileSourceGraphML();\n    }\n    if (flc.endsWith(\".gexf\")) {\n        return new FileSourceGEXF();\n    }\n    return null;\n}"
            ],
            [
                "getXMLRootElement",
                "org.graphstream.stream.file",
                "FileSourceFactory",
                "public static String getXMLRootElement(String fileName) throws IOException {\n    FileReader stream = new FileReader(fileName);\n    XMLEventReader reader;\n    XMLEvent e;\n    String root;\n    try {\n        reader = XMLInputFactory.newInstance().createXMLEventReader(stream);\n        do {\n            e = reader.nextEvent();\n        } while (!e.isStartElement() && !e.isEndDocument());\n        if (e.isEndDocument())\n            throw new IOException(\"document ended before catching root element\");\n        root = e.asStartElement().getName().getLocalPart();\n        reader.close();\n        stream.close();\n        return root;\n    } catch (XMLStreamException ex) {\n        throw new IOException(ex);\n    } catch (FactoryConfigurationError ex) {\n        throw new IOException(ex);\n    }\n}"
            ],
            [
                "formatStringForQuoting",
                "org.graphstream.stream.file",
                "FileSinkDGSUtility",
                "protected static String formatStringForQuoting(String str) {\n    return str.replaceAll(\"(^|[^\\\\\\\\])\\\"\", \"$1\\\\\\\\\\\"\");\n}"
            ],
            [
                "attributeString",
                "org.graphstream.stream.file",
                "FileSinkDGSUtility",
                "protected static String attributeString(String key, Object value, boolean remove) {\n    if (key == null || key.length() == 0)\n        return null;\n    if (remove) {\n        return String.format(\" -\\\"%s\\\"\", key);\n    } else {\n        if (value != null && value.getClass().isArray())\n            return String.format(\" \\\"%s\\\":%s\", key, arrayString(value));\n        else\n            return String.format(\" \\\"%s\\\":%s\", key, valueString(value));\n    }\n}"
            ],
            [
                "arrayString",
                "org.graphstream.stream.file",
                "FileSinkDGSUtility",
                "protected static String arrayString(Object value) {\n    if (value != null && value.getClass().isArray()) {\n        StringBuilder sb = new StringBuilder();\n        sb.append(\"{\");\n        if (Array.getLength(value) == 0)\n            sb.append(\"\\\"\\\"\");\n        else\n            sb.append(arrayString(Array.get(value, 0)));\n        for (int i = 1; i < Array.getLength(value); ++i) sb.append(String.format(\",%s\", arrayString(Array.get(value, i))));\n        sb.append(\"}\");\n        return sb.toString();\n    } else {\n        return valueString(value);\n    }\n}"
            ],
            [
                "valueString",
                "org.graphstream.stream.file",
                "FileSinkDGSUtility",
                "protected static String valueString(Object value) {\n    if (value == null)\n        return \"\\\"\\\"\";\n    if (value instanceof CharSequence) {\n        if (value instanceof String)\n            return String.format(\"\\\"%s\\\"\", formatStringForQuoting((String) value));\n        else\n            return String.format(\"\\\"%s\\\"\", (CharSequence) value);\n    } else if (value instanceof Number) {\n        Number nval = (Number) value;\n        if (value instanceof Integer || value instanceof Short || value instanceof Byte || value instanceof Long)\n            return String.format(Locale.US, \"%d\", nval.longValue());\n        else\n            return String.format(Locale.US, \"%f\", nval.doubleValue());\n    } else if (value instanceof Boolean) {\n        return String.format(Locale.US, \"%b\", ((Boolean) value));\n    } else if (value instanceof Character) {\n        return String.format(\"\\\"%c\\\"\", ((Character) value).charValue());\n    } else if (value instanceof Object[]) {\n        Object[] array = (Object[]) value;\n        int n = array.length;\n        StringBuffer sb = new StringBuffer();\n        if (array.length > 0)\n            sb.append(valueString(array[0]));\n        for (int i = 1; i < n; i++) {\n            sb.append(\",\");\n            sb.append(valueString(array[i]));\n        }\n        return sb.toString();\n    } else if (value instanceof HashMap<?, ?> || value instanceof CompoundAttribute) {\n        HashMap<?, ?> hash;\n        if (value instanceof CompoundAttribute)\n            hash = ((CompoundAttribute) value).toHashMap();\n        else\n            hash = (HashMap<?, ?>) value;\n        return hashToString(hash);\n    } else if (value instanceof Color) {\n        Color c = (Color) value;\n        return String.format(\"#%02X%02X%02X%02X\", c.getRed(), c.getGreen(), c.getBlue(), c.getAlpha());\n    } else {\n        return String.format(\"\\\"%s\\\"\", value.toString());\n    }\n}"
            ],
            [
                "hashToString",
                "org.graphstream.stream.file",
                "FileSinkDGSUtility",
                "protected static String hashToString(HashMap<?, ?> hash) {\n    StringBuilder sb = new StringBuilder();\n    sb.append(\"[ \");\n    for (Object key : hash.keySet()) {\n        sb.append(attributeString(key.toString(), hash.get(key), false));\n        sb.append(\",\");\n    }\n    sb.append(']');\n    return sb.toString();\n}"
            ],
            [
                "encodeObject",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Serializes an object and returns the Base64-encoded\n * version of that serialized object.\n *\n * <p>As of v 2.3, if the object\n * cannot be serialized or there is another error,\n * the method will throw an java.io.IOException. <b>This is new to v2.3!</b>\n * In earlier versions, it just returned a null value, but\n * in retrospect that's a pretty poor way to handle it.</p>\n *\n * The object is not GZip-compressed before being encoded.\n *\n * @param serializableObject The object to encode\n * @return The Base64-encoded object\n * @throws java.io.IOException if there is an error\n * @throws NullPointerException if serializedObject is null\n * @since 1.4\n */\npublic static String encodeObject(java.io.Serializable serializableObject) throws java.io.IOException {\n    return encodeObject(serializableObject, NO_OPTIONS);\n}"
            ],
            [
                "encodeObject",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end encodeObject\n/**\n * Serializes an object and returns the Base64-encoded\n * version of that serialized object.\n *\n * <p>As of v 2.3, if the object\n * cannot be serialized or there is another error,\n * the method will throw an java.io.IOException. <b>This is new to v2.3!</b>\n * In earlier versions, it just returned a null value, but\n * in retrospect that's a pretty poor way to handle it.</p>\n *\n * The object is not GZip-compressed before being encoded.\n * <p>\n * Example options:<pre>\n *   GZIP: gzip-compresses object before encoding it.\n *   DO_BREAK_LINES: break lines at 76 characters\n * </pre>\n * <p>\n * Example: <code>encodeObject( myObj, Base64.GZIP )</code> or\n * <p>\n * Example: <code>encodeObject( myObj, Base64.GZIP | Base64.DO_BREAK_LINES )</code>\n *\n * @param serializableObject The object to encode\n * @param options Specified options\n * @return The Base64-encoded object\n * @see Base64#GZIP\n * @see Base64#DO_BREAK_LINES\n * @throws java.io.IOException if there is an error\n * @since 2.0\n */\npublic static String encodeObject(java.io.Serializable serializableObject, int options) throws java.io.IOException {\n    if (serializableObject == null) {\n        throw new NullPointerException(\"Cannot serialize a null object.\");\n    }\n    // end if: null\n    // Streams\n    java.io.ByteArrayOutputStream baos = null;\n    java.io.OutputStream b64os = null;\n    java.util.zip.GZIPOutputStream gzos = null;\n    java.io.ObjectOutputStream oos = null;\n    try {\n        // ObjectOutputStream -> (GZIP) -> Base64 -> ByteArrayOutputStream\n        baos = new java.io.ByteArrayOutputStream();\n        b64os = new Base64.OutputStream(baos, ENCODE | options);\n        if ((options & GZIP) != 0) {\n            // Gzip\n            gzos = new java.util.zip.GZIPOutputStream(b64os);\n            oos = new java.io.ObjectOutputStream(gzos);\n        } else {\n            // Not gzipped\n            oos = new java.io.ObjectOutputStream(b64os);\n        }\n        oos.writeObject(serializableObject);\n    }// end try\n     catch (java.io.IOException e) {\n        // Catch it and then throw it immediately so that\n        // the finally{} block is called for cleanup.\n        throw e;\n    } finally // end catch\n    {\n        try {\n            oos.close();\n        } catch (Exception e) {\n        }\n        try {\n            gzos.close();\n        } catch (Exception e) {\n        }\n        try {\n            b64os.close();\n        } catch (Exception e) {\n        }\n        try {\n            baos.close();\n        } catch (Exception e) {\n        }\n    }\n    // end finally\n    // Return value according to relevant encoding.\n    try {\n        return new String(baos.toByteArray(), PREFERRED_ENCODING);\n    }// end try\n     catch (java.io.UnsupportedEncodingException uue) {\n        // Fall back to some Java default\n        return new String(baos.toByteArray());\n    }\n    // end catch\n}"
            ],
            [
                "encodeBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end encode\n/**\n * Encodes a byte array into Base64 notation.\n * Does not GZip-compress data.\n *\n * @param source The data to convert\n * @return The data in Base64-encoded form\n * @throws NullPointerException if source array is null\n * @since 1.4\n */\npublic static String encodeBytes(byte[] source) {\n    // Since we're not going to have the GZIP encoding turned on,\n    // we're not going to have an java.io.IOException thrown, so\n    // we should not force the user to have to catch it.\n    String encoded = null;\n    try {\n        encoded = encodeBytes(source, 0, source.length, NO_OPTIONS);\n    } catch (java.io.IOException ex) {\n        assert false : ex.getMessage();\n    }\n    // end catch\n    assert encoded != null;\n    return encoded;\n}"
            ],
            [
                "encodeBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end encodeBytes\n/**\n * Encodes a byte array into Base64 notation.\n * <p>\n * Example options:<pre>\n *   GZIP: gzip-compresses object before encoding it.\n *   DO_BREAK_LINES: break lines at 76 characters\n *     <i>Note: Technically, this makes your encoding non-compliant.</i>\n * </pre>\n * <p>\n * Example: <code>encodeBytes( myData, Base64.GZIP )</code> or\n * <p>\n * Example: <code>encodeBytes( myData, Base64.GZIP | Base64.DO_BREAK_LINES )</code>\n *\n * <p>As of v 2.3, if there is an error with the GZIP stream,\n * the method will throw an java.io.IOException. <b>This is new to v2.3!</b>\n * In earlier versions, it just returned a null value, but\n * in retrospect that's a pretty poor way to handle it.</p>\n *\n * @param source The data to convert\n * @param options Specified options\n * @return The Base64-encoded data as a String\n * @see Base64#GZIP\n * @see Base64#DO_BREAK_LINES\n * @throws java.io.IOException if there is an error\n * @throws NullPointerException if source array is null\n * @since 2.0\n */\npublic static String encodeBytes(byte[] source, int options) throws java.io.IOException {\n    return encodeBytes(source, 0, source.length, options);\n}"
            ],
            [
                "encodeBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end encodeBytes\n/**\n * Encodes a byte array into Base64 notation.\n * Does not GZip-compress data.\n *\n * <p>As of v 2.3, if there is an error,\n * the method will throw an java.io.IOException. <b>This is new to v2.3!</b>\n * In earlier versions, it just returned a null value, but\n * in retrospect that's a pretty poor way to handle it.</p>\n *\n * @param source The data to convert\n * @param off Offset in array where conversion should begin\n * @param len Length of data to convert\n * @return The Base64-encoded data as a String\n * @throws NullPointerException if source array is null\n * @throws IllegalArgumentException if source array, offset, or length are invalid\n * @since 1.4\n */\npublic static String encodeBytes(byte[] source, int off, int len) {\n    // Since we're not going to have the GZIP encoding turned on,\n    // we're not going to have an java.io.IOException thrown, so\n    // we should not force the user to have to catch it.\n    String encoded = null;\n    try {\n        encoded = encodeBytes(source, off, len, NO_OPTIONS);\n    } catch (java.io.IOException ex) {\n        assert false : ex.getMessage();\n    }\n    // end catch\n    assert encoded != null;\n    return encoded;\n}"
            ],
            [
                "encodeBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end encodeBytes\n/**\n * Encodes a byte array into Base64 notation.\n * <p>\n * Example options:<pre>\n *   GZIP: gzip-compresses object before encoding it.\n *   DO_BREAK_LINES: break lines at 76 characters\n *     <i>Note: Technically, this makes your encoding non-compliant.</i>\n * </pre>\n * <p>\n * Example: <code>encodeBytes( myData, Base64.GZIP )</code> or\n * <p>\n * Example: <code>encodeBytes( myData, Base64.GZIP | Base64.DO_BREAK_LINES )</code>\n *\n * <p>As of v 2.3, if there is an error with the GZIP stream,\n * the method will throw an java.io.IOException. <b>This is new to v2.3!</b>\n * In earlier versions, it just returned a null value, but\n * in retrospect that's a pretty poor way to handle it.</p>\n *\n * @param source The data to convert\n * @param off Offset in array where conversion should begin\n * @param len Length of data to convert\n * @param options Specified options\n * @return The Base64-encoded data as a String\n * @see Base64#GZIP\n * @see Base64#DO_BREAK_LINES\n * @throws java.io.IOException if there is an error\n * @throws NullPointerException if source array is null\n * @throws IllegalArgumentException if source array, offset, or length are invalid\n * @since 2.0\n */\npublic static String encodeBytes(byte[] source, int off, int len, int options) throws java.io.IOException {\n    byte[] encoded = encodeBytesToBytes(source, off, len, options);\n    // Return value according to relevant encoding.\n    try {\n        return new String(encoded, PREFERRED_ENCODING);\n    }// end try\n     catch (java.io.UnsupportedEncodingException uue) {\n        return new String(encoded);\n    }\n    // end catch\n}"
            ],
            [
                "encodeBytesToBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end encodeBytes\n/**\n * Similar to {@link #encodeBytes(byte[])} but returns\n * a byte array instead of instantiating a String. This is more efficient\n * if you're working with I/O streams and have large data sets to encode.\n *\n * @param source The data to convert\n * @return The Base64-encoded data as a byte[] (of ASCII characters)\n * @throws NullPointerException if source array is null\n * @since 2.3.1\n */\npublic static byte[] encodeBytesToBytes(byte[] source) {\n    byte[] encoded = null;\n    try {\n        encoded = encodeBytesToBytes(source, 0, source.length, Base64.NO_OPTIONS);\n    } catch (java.io.IOException ex) {\n        assert false : \"IOExceptions only come from GZipping, which is turned off: \" + ex.getMessage();\n    }\n    return encoded;\n}"
            ],
            [
                "encodeBytesToBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Similar to {@link #encodeBytes(byte[], int, int, int)} but returns\n * a byte array instead of instantiating a String. This is more efficient\n * if you're working with I/O streams and have large data sets to encode.\n *\n * @param source The data to convert\n * @param off Offset in array where conversion should begin\n * @param len Length of data to convert\n * @param options Specified options\n * @return The Base64-encoded data as a String\n * @see Base64#GZIP\n * @see Base64#DO_BREAK_LINES\n * @throws java.io.IOException if there is an error\n * @throws NullPointerException if source array is null\n * @throws IllegalArgumentException if source array, offset, or length are invalid\n * @since 2.3.1\n */\npublic static byte[] encodeBytesToBytes(byte[] source, int off, int len, int options) throws java.io.IOException {\n    if (source == null) {\n        throw new NullPointerException(\"Cannot serialize a null array.\");\n    }\n    // end if: null\n    if (off < 0) {\n        throw new IllegalArgumentException(\"Cannot have negative offset: \" + off);\n    }\n    // end if: off < 0\n    if (len < 0) {\n        throw new IllegalArgumentException(\"Cannot have length offset: \" + len);\n    }\n    // end if: len < 0\n    if (off + len > source.length) {\n        throw new IllegalArgumentException(String.format(\"Cannot have offset of %d and length of %d with array of length %d\", off, len, source.length));\n    }\n    // end if: off < 0\n    // Compress?\n    if ((options & GZIP) != 0) {\n        java.io.ByteArrayOutputStream baos = null;\n        java.util.zip.GZIPOutputStream gzos = null;\n        Base64.OutputStream b64os = null;\n        try {\n            // GZip -> Base64 -> ByteArray\n            baos = new java.io.ByteArrayOutputStream();\n            b64os = new Base64.OutputStream(baos, ENCODE | options);\n            gzos = new java.util.zip.GZIPOutputStream(b64os);\n            gzos.write(source, off, len);\n            gzos.close();\n        }// end try\n         catch (java.io.IOException e) {\n            // Catch it and then throw it immediately so that\n            // the finally{} block is called for cleanup.\n            throw e;\n        } finally // end catch\n        {\n            try {\n                gzos.close();\n            } catch (Exception e) {\n            }\n            try {\n                b64os.close();\n            } catch (Exception e) {\n            }\n            try {\n                baos.close();\n            } catch (Exception e) {\n            }\n        }\n        // end finally\n        return baos.toByteArray();\n    } else // end if: compress\n    // Else, don't compress. Better not to use streams at all then.\n    {\n        boolean breakLines = (options & DO_BREAK_LINES) != 0;\n        //int    len43   = len * 4 / 3;\n        //byte[] outBuff = new byte[   ( len43 )                      // Main 4:3\n        //                           + ( (len % 3) > 0 ? 4 : 0 )      // Account for padding\n        //                           + (breakLines ? ( len43 / MAX_LINE_LENGTH ) : 0) ]; // New lines\n        // Try to determine more precisely how big the array needs to be.\n        // If we get it right, we don't have to do an array copy, and\n        // we save a bunch of memory.\n        // Bytes needed for actual encoding\n        int encLen = (len / 3) * 4 + (len % 3 > 0 ? 4 : 0);\n        if (breakLines) {\n            // Plus extra newline characters\n            encLen += encLen / MAX_LINE_LENGTH;\n        }\n        byte[] outBuff = new byte[encLen];\n        int d = 0;\n        int e = 0;\n        int len2 = len - 2;\n        int lineLength = 0;\n        for (; d < len2; d += 3, e += 4) {\n            encode3to4(source, d + off, 3, outBuff, e, options);\n            lineLength += 4;\n            if (breakLines && lineLength >= MAX_LINE_LENGTH) {\n                outBuff[e + 4] = NEW_LINE;\n                e++;\n                lineLength = 0;\n            }\n            // end if: end of line\n        }\n        // en dfor: each piece of array\n        if (d < len) {\n            encode3to4(source, d + off, len - d, outBuff, e, options);\n            e += 4;\n        }\n        // end if: some padding needed\n        // Only resize array if we didn't guess it right.\n        if (e <= outBuff.length - 1) {\n            // If breaking lines and the last byte falls right at\n            // the line length (76 bytes per line), there will be\n            // one extra byte, and the array will need to be resized.\n            // Not too bad of an estimate on array size, I'd say.\n            byte[] finalOut = new byte[e];\n            System.arraycopy(outBuff, 0, finalOut, 0, e);\n            //System.err.println(\"Having to resize array from \" + outBuff.length + \" to \" + e );\n            return finalOut;\n        } else {\n            //System.err.println(\"No need to resize array.\");\n            return outBuff;\n        }\n    }\n    // end else: don't compress\n}"
            ],
            [
                "decode",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end decodeToBytes\n/**\n * Low-level access to decoding ASCII characters in\n * the form of a byte array. <strong>Ignores GUNZIP option, if\n * it's set.</strong> This is not generally a recommended method,\n * although it is used internally as part of the decoding process.\n * Special case: if len = 0, an empty array is returned. Still,\n * if you need more speed and reduced memory footprint (and aren't\n * gzipping), consider this method.\n *\n * @param source The Base64 encoded data\n * @return decoded data\n * @since 2.3.1\n */\npublic static byte[] decode(byte[] source) throws java.io.IOException {\n    byte[] decoded = null;\n    //        try {\n    decoded = decode(source, 0, source.length, Base64.NO_OPTIONS);\n    //        } catch( java.io.IOException ex ) {\n    //            assert false : \"IOExceptions only come from GZipping, which is turned off: \" + ex.getMessage();\n    //        }\n    return decoded;\n}"
            ],
            [
                "decode",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Low-level access to decoding ASCII characters in\n * the form of a byte array. <strong>Ignores GUNZIP option, if\n * it's set.</strong> This is not generally a recommended method,\n * although it is used internally as part of the decoding process.\n * Special case: if len = 0, an empty array is returned. Still,\n * if you need more speed and reduced memory footprint (and aren't\n * gzipping), consider this method.\n *\n * @param source The Base64 encoded data\n * @param off    The offset of where to begin decoding\n * @param len    The length of characters to decode\n * @param options Can specify options such as alphabet type to use\n * @return decoded data\n * @throws java.io.IOException If bogus characters exist in source data\n * @since 1.3\n */\npublic static byte[] decode(byte[] source, int off, int len, int options) throws java.io.IOException {\n    // Lots of error checking and exception throwing\n    if (source == null) {\n        throw new NullPointerException(\"Cannot decode null source array.\");\n    }\n    // end if\n    if (off < 0 || off + len > source.length) {\n        throw new IllegalArgumentException(String.format(\"Source array with length %d cannot have offset of %d and process %d bytes.\", source.length, off, len));\n    }\n    // end if\n    if (len == 0) {\n        return new byte[0];\n    } else if (len < 4) {\n        throw new IllegalArgumentException(\"Base64-encoded string must have at least four characters, but length specified was \" + len);\n    }\n    // end if\n    byte[] DECODABET = getDecodabet(options);\n    // Estimate on array size\n    int len34 = len * 3 / 4;\n    // Upper limit on size of output\n    byte[] outBuff = new byte[len34];\n    // Keep track of where we're writing\n    int outBuffPosn = 0;\n    // Four byte buffer from source, eliminating white space\n    byte[] b4 = new byte[4];\n    // Keep track of four byte input buffer\n    int b4Posn = 0;\n    // Source array counter\n    int i = 0;\n    // Special value from DECODABET\n    byte sbiDecode = 0;\n    for (i = off; i < off + len; i++) {\n        // Loop through source\n        sbiDecode = DECODABET[source[i] & 0xFF];\n        // White space, Equals sign, or legit Base64 character\n        // Note the values such as -5 and -9 in the\n        // DECODABETs at the top of the file.\n        if (sbiDecode >= WHITE_SPACE_ENC) {\n            if (sbiDecode >= EQUALS_SIGN_ENC) {\n                // Save non-whitespace\n                b4[b4Posn++] = source[i];\n                if (b4Posn > 3) {\n                    // Time to decode?\n                    outBuffPosn += decode4to3(b4, 0, outBuff, outBuffPosn, options);\n                    b4Posn = 0;\n                    // If that was the equals sign, break out of 'for' loop\n                    if (source[i] == EQUALS_SIGN) {\n                        break;\n                    }\n                    // end if: equals sign\n                }\n                // end if: quartet built\n            }\n            // end if: equals sign or better\n        } else // end if: white space, equals sign or better\n        {\n            // There's a bad input character in the Base64 stream.\n            throw new java.io.IOException(String.format(\"Bad Base64 input character decimal %d in array position %d\", ((int) source[i]) & 0xFF, i));\n        }\n        // end else:\n    }\n    // each input character\n    byte[] out = new byte[outBuffPosn];\n    System.arraycopy(outBuff, 0, out, 0, outBuffPosn);\n    return out;\n}"
            ],
            [
                "decode",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end decode\n/**\n * Decodes data from Base64 notation, automatically\n * detecting gzip-compressed data and decompressing it.\n *\n * @param s the string to decode\n * @return the decoded data\n * @throws java.io.IOException If there is a problem\n * @since 1.4\n */\npublic static byte[] decode(String s) throws java.io.IOException {\n    return decode(s, NO_OPTIONS);\n}"
            ],
            [
                "decode",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Decodes data from Base64 notation, automatically\n * detecting gzip-compressed data and decompressing it.\n *\n * @param s the string to decode\n * @param options encode options such as URL_SAFE\n * @return the decoded data\n * @throws java.io.IOException if there is an error\n * @throws NullPointerException if <tt>s</tt> is null\n * @since 1.4\n */\npublic static byte[] decode(String s, int options) throws java.io.IOException {\n    if (s == null) {\n        throw new NullPointerException(\"Input string was null.\");\n    }\n    // end if\n    byte[] bytes;\n    try {\n        bytes = s.getBytes(PREFERRED_ENCODING);\n    }// end try\n     catch (java.io.UnsupportedEncodingException uee) {\n        bytes = s.getBytes();\n    }\n    // end catch\n    //</change>\n    // Decode\n    bytes = decode(bytes, 0, bytes.length, options);\n    // Check to see if it's gzip-compressed\n    // GZIP Magic Two-Byte Number: 0x8b1f (35615)\n    boolean dontGunzip = (options & DONT_GUNZIP) != 0;\n    if ((bytes != null) && (bytes.length >= 4) && (!dontGunzip)) {\n        int head = ((int) bytes[0] & 0xff) | ((bytes[1] << 8) & 0xff00);\n        if (java.util.zip.GZIPInputStream.GZIP_MAGIC == head) {\n            java.io.ByteArrayInputStream bais = null;\n            java.util.zip.GZIPInputStream gzis = null;\n            java.io.ByteArrayOutputStream baos = null;\n            byte[] buffer = new byte[2048];\n            int length = 0;\n            try {\n                baos = new java.io.ByteArrayOutputStream();\n                bais = new java.io.ByteArrayInputStream(bytes);\n                gzis = new java.util.zip.GZIPInputStream(bais);\n                while ((length = gzis.read(buffer)) >= 0) {\n                    baos.write(buffer, 0, length);\n                }\n                // end while: reading input\n                // No error? Get new bytes.\n                bytes = baos.toByteArray();\n            }// end try\n             catch (java.io.IOException e) {\n                e.printStackTrace();\n                // Just return originally-decoded bytes\n            } finally // end catch\n            {\n                try {\n                    baos.close();\n                } catch (Exception e) {\n                }\n                try {\n                    gzis.close();\n                } catch (Exception e) {\n                }\n                try {\n                    bais.close();\n                } catch (Exception e) {\n                }\n            }\n            // end finally\n        }\n        // end if: gzipped\n    }\n    // end if: bytes.length >= 2\n    return bytes;\n}"
            ],
            [
                "decodeToObject",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end decode\n/**\n * Attempts to decode Base64 data and deserialize a Java\n * Object within. Returns <tt>null</tt> if there was an error.\n *\n * @param encodedObject The Base64 data to decode\n * @return The decoded and deserialized object\n * @throws NullPointerException if encodedObject is null\n * @throws java.io.IOException if there is a general error\n * @throws ClassNotFoundException if the decoded object is of a\n *         class that cannot be found by the JVM\n * @since 1.5\n */\npublic static Object decodeToObject(String encodedObject) throws java.io.IOException, java.lang.ClassNotFoundException {\n    return decodeToObject(encodedObject, NO_OPTIONS, null);\n}"
            ],
            [
                "decodeToObject",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Attempts to decode Base64 data and deserialize a Java\n * Object within. Returns <tt>null</tt> if there was an error.\n * If <tt>loader</tt> is not null, it will be the class loader\n * used when deserializing.\n *\n * @param encodedObject The Base64 data to decode\n * @param options Various parameters related to decoding\n * @param loader Optional class loader to use in deserializing classes.\n * @return The decoded and deserialized object\n * @throws NullPointerException if encodedObject is null\n * @throws java.io.IOException if there is a general error\n * @throws ClassNotFoundException if the decoded object is of a\n *         class that cannot be found by the JVM\n * @since 2.3.4\n */\npublic static Object decodeToObject(String encodedObject, int options, final ClassLoader loader) throws java.io.IOException, java.lang.ClassNotFoundException {\n    // Decode and gunzip if necessary\n    byte[] objBytes = decode(encodedObject, options);\n    java.io.ByteArrayInputStream bais = null;\n    java.io.ObjectInputStream ois = null;\n    Object obj = null;\n    try {\n        bais = new java.io.ByteArrayInputStream(objBytes);\n        // If no custom class loader is provided, use Java's builtin OIS.\n        if (loader == null) {\n            ois = new java.io.ObjectInputStream(bais);\n        } else // end if: no loader provided\n        // Else make a customized object input stream that uses\n        // the provided class loader.\n        {\n            ois = new java.io.ObjectInputStream(bais) {\n\n                @Override\n                public Class<?> resolveClass(java.io.ObjectStreamClass streamClass) throws java.io.IOException, ClassNotFoundException {\n                    Class<?> c = Class.forName(streamClass.getName(), false, loader);\n                    if (c == null) {\n                        return super.resolveClass(streamClass);\n                    } else {\n                        // Class loader knows of this class.\n                        return c;\n                    }\n                    // end else: not null\n                }\n            };\n            // end ois\n        }\n        // end else: no custom class loader\n        obj = ois.readObject();\n    }// end try\n     catch (java.io.IOException e) {\n        // Catch and throw in order to execute finally{}\n        throw e;\n    }// end catch\n     catch (java.lang.ClassNotFoundException e) {\n        // Catch and throw in order to execute finally{}\n        throw e;\n    } finally // end catch\n    {\n        try {\n            bais.close();\n        } catch (Exception e) {\n        }\n        try {\n            ois.close();\n        } catch (Exception e) {\n        }\n    }\n    // end finally\n    return obj;\n}"
            ],
            [
                "decodeFromFile",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end decodeToFile\n/**\n * Convenience method for reading a base64-encoded\n * file and decoding it.\n *\n * <p>As of v 2.3, if there is a error,\n * the method will throw an java.io.IOException. <b>This is new to v2.3!</b>\n * In earlier versions, it just returned false, but\n * in retrospect that's a pretty poor way to handle it.</p>\n *\n * @param filename Filename for reading encoded data\n * @return decoded byte array\n * @throws java.io.IOException if there is an error\n * @since 2.1\n */\npublic static byte[] decodeFromFile(String filename) throws java.io.IOException {\n    byte[] decodedData = null;\n    Base64.InputStream bis = null;\n    try {\n        // Set up some useful variables\n        java.io.File file = new java.io.File(filename);\n        byte[] buffer = null;\n        int length = 0;\n        int numBytes = 0;\n        // Check for size of file\n        if (file.length() > Integer.MAX_VALUE) {\n            throw new java.io.IOException(\"File is too big for this convenience method (\" + file.length() + \" bytes).\");\n        }\n        // end if: file too big for int index\n        buffer = new byte[(int) file.length()];\n        // Open a stream\n        bis = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(file)), Base64.DECODE);\n        // Read until done\n        while ((numBytes = bis.read(buffer, length, 4096)) >= 0) {\n            length += numBytes;\n        }\n        // end while\n        // Save in a variable to return\n        decodedData = new byte[length];\n        System.arraycopy(buffer, 0, decodedData, 0, length);\n    }// end try\n     catch (java.io.IOException e) {\n        // Catch and release to execute finally{}\n        throw e;\n    } finally // end catch: java.io.IOException\n    {\n        try {\n            bis.close();\n        } catch (Exception e) {\n        }\n    }\n    // end finally\n    return decodedData;\n}"
            ],
            [
                "encodeFromFile",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end decodeFromFile\n/**\n * Convenience method for reading a binary file\n * and base64-encoding it.\n *\n * <p>As of v 2.3, if there is a error,\n * the method will throw an java.io.IOException. <b>This is new to v2.3!</b>\n * In earlier versions, it just returned false, but\n * in retrospect that's a pretty poor way to handle it.</p>\n *\n * @param filename Filename for reading binary data\n * @return base64-encoded string\n * @throws java.io.IOException if there is an error\n * @since 2.1\n */\npublic static String encodeFromFile(String filename) throws java.io.IOException {\n    String encodedData = null;\n    Base64.InputStream bis = null;\n    try {\n        // Set up some useful variables\n        java.io.File file = new java.io.File(filename);\n        // Need max() for math on small files (v2.2.1); Need +1 for a few corner cases (v2.3.5)\n        byte[] buffer = new byte[Math.max((int) (file.length() * 1.4 + 1), 40)];\n        int length = 0;\n        int numBytes = 0;\n        // Open a stream\n        bis = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(file)), Base64.ENCODE);\n        // Read until done\n        while ((numBytes = bis.read(buffer, length, 4096)) >= 0) {\n            length += numBytes;\n        }\n        // end while\n        // Save in a variable to return\n        encodedData = new String(buffer, 0, length, Base64.PREFERRED_ENCODING);\n    }// end try\n     catch (java.io.IOException e) {\n        // Catch and release to execute finally{}\n        throw e;\n    } finally // end catch: java.io.IOException\n    {\n        try {\n            bis.close();\n        } catch (Exception e) {\n        }\n    }\n    // end finally\n    return encodedData;\n}"
            ],
            [
                "unmutableGraph",
                "org.graphstream.graph.implementations",
                "Graphs",
                "public static Graph unmutableGraph(Graph g) {\n    return null;\n}"
            ],
            [
                "synchronizedGraph",
                "org.graphstream.graph.implementations",
                "Graphs",
                "/**\n * Synchronizes a graph. The returned graph can be accessed and modified by\n * several threads. You lose genericity in methods returning edge or node\n * because each element (graph, nodes and edges) is wrapped into a\n * synchronized wrapper which breaks original elements class.\n *\n * @param g\n *            the graph to synchronize\n * @return a synchronized wrapper for g\n */\npublic static Graph synchronizedGraph(Graph g) {\n    return new SynchronizedGraph(g);\n}"
            ],
            [
                "merge",
                "org.graphstream.graph.implementations",
                "Graphs",
                "/**\n * Merge several graphs in one. A new graph is created, that will contain\n * the result. The method will try to create a graph of the same class that\n * the first graph to merge (it needs to have a constructor with a String).\n * Else, a MultiGraph is used.\n *\n * @param graphs\n *            graphs to merge\n * @return merge result\n */\npublic static Graph merge(Graph... graphs) {\n    if (graphs == null)\n        return new DefaultGraph(\"void-merge\");\n    String id = \"merge\";\n    for (Graph g : graphs) id += \"-\" + g.getId();\n    Graph result;\n    try {\n        Class<? extends Graph> cls = graphs[0].getClass();\n        result = cls.getConstructor(String.class).newInstance(id);\n    } catch (Exception e) {\n        logger.warning(String.format(\"Cannot create a graph of %s.\", graphs[0].getClass().getName()));\n        result = new MultiGraph(id);\n    }\n    mergeIn(result, graphs);\n    return result;\n}"
            ],
            [
                "clone",
                "org.graphstream.graph.implementations",
                "Graphs",
                "/**\n * Clone a given graph with same node/edge structure and same attributes.\n *\n * @param g\n *            the graph to clone\n * @return a copy of g\n */\npublic static Graph clone(Graph g) {\n    Graph copy;\n    try {\n        Class<? extends Graph> cls = g.getClass();\n        copy = cls.getConstructor(String.class).newInstance(g.getId());\n    } catch (Exception e) {\n        logger.warning(String.format(\"Cannot create a graph of %s.\", g.getClass().getName()));\n        copy = new AdjacencyListGraph(g.getId());\n    }\n    copyAttributes(g, copy);\n    for (int i = 0; i < g.getNodeCount(); i++) {\n        Node source = g.getNode(i);\n        Node target = copy.addNode(source.getId());\n        copyAttributes(source, target);\n    }\n    for (int i = 0; i < g.getEdgeCount(); i++) {\n        Edge source = g.getEdge(i);\n        Edge target = copy.addEdge(source.getId(), source.getSourceNode().getId(), source.getTargetNode().getId(), source.isDirected());\n        copyAttributes(source, target);\n    }\n    return copy;\n}"
            ]
        ],
        "tokensProjectClassesNonPrivateStaticAttributes": [
            [
                "version16",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static boolean version16 = false;"
            ],
            [
                "predefFractions",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[][] predefFractions = new float[11][];"
            ],
            [
                "predefFractions2",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions2 = { 0f, 1f };"
            ],
            [
                "predefFractions3",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions3 = { 0f, 0.5f, 1f };"
            ],
            [
                "predefFractions4",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions4 = { 0f, 0.33f, 0.66f, 1f };"
            ],
            [
                "predefFractions5",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions5 = { 0f, 0.25f, 0.5f, 0.75f, 1f };"
            ],
            [
                "predefFractions6",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions6 = { 0f, 0.2f, 0.4f, 0.6f, 0.8f, 1f };"
            ],
            [
                "predefFractions7",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions7 = { 0f, 0.1666f, 0.3333f, 0.4999f, 0.6666f, 0.8333f, 1f };"
            ],
            [
                "predefFractions8",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions8 = { 0f, 0.1428f, 0.2856f, 0.4284f, 0.5712f, 0.7140f, 0.8568f, 1f };"
            ],
            [
                "predefFractions9",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions9 = { 0f, 0.125f, 0.25f, 0.375f, 0.5f, 0.625f, .75f, 0.875f, 1f };"
            ],
            [
                "predefFractions10",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions10 = { 0f, 0.1111f, 0.2222f, 0.3333f, 0.4444f, 0.5555f, 0.6666f, 0.7777f, 0.8888f, 1f };"
            ],
            [
                "defaultImageCache",
                "org.graphstream.ui.swingViewer.util",
                "ImageCache",
                "/**\n * The default singleton image cache instance.\n */\nprotected static ImageCache defaultImageCache;"
            ],
            [
                "dots",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "protected static float[] dots = { 1f, 1f };"
            ],
            [
                "dashes",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "protected static float[] dashes = { 3f, 3f };"
            ],
            [
                "defaultFontCache",
                "org.graphstream.ui.swingViewer.util",
                "FontCache",
                "/**\n * The default font cache.\n */\npublic static FontCache defaultFontCache;"
            ],
            [
                "NULL_POINT2",
                "org.graphstream.ui.geom",
                "Point2",
                "// Attributes -- Shared\n/**\n * Specific point at (0,0).\n */\npublic static final Point2 NULL_POINT2 = new Point2(0, 0);"
            ],
            [
                "NULL_POINT3",
                "org.graphstream.ui.geom",
                "Point3",
                "// Attributes -- Shared\n/**\n * Specific point at (0,0,0).\n */\npublic static final Point3 NULL_POINT3 = new Point3(0, 0, 0);"
            ],
            [
                "DEFAULT_VIEW_ID",
                "org.graphstream.ui.view",
                "Viewer",
                "// Attributes\n/**\n * Name of the default view.\n */\npublic static String DEFAULT_VIEW_ID = \"defaultView\";"
            ],
            [
                "jjbitVec0",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };"
            ],
            [
                "jjnextStates",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "static final int[] jjnextStates = { 48, 49, 52, 54, 55, 65, 69, 2, 4, 6, 10, 16, 23, 33, 50, 52, 54, 55, 57, 58, 60, 61, 66, 68, 70, 71 };"
            ],
            [
                "jjstrLiteralImages",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "/**\n * Token literal values.\n */\npublic static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, \"\\56\", \"\\173\", \"\\175\", \"\\50\", \"\\51\", \"\\43\", \"\\72\", \"\\73\", \"\\54\", \"\\162\\147\\142\\141\", \"\\162\\147\\142\", null, null, null, \"\\165\\162\\154\", \"\\147\\162\\141\\160\\150\", \"\\145\\144\\147\\145\", \"\\156\\157\\144\\145\", \"\\163\\160\\162\\151\\164\\145\", \"\\146\\151\\154\\154\\55\\155\\157\\144\\145\", \"\\146\\151\\154\\154\\55\\143\\157\\154\\157\\162\", \"\\146\\151\\154\\154\\55\\151\\155\\141\\147\\145\", \"\\163\\164\\162\\157\\153\\145\\55\\155\\157\\144\\145\", \"\\163\\164\\162\\157\\153\\145\\55\\143\\157\\154\\157\\162\", \"\\163\\164\\162\\157\\153\\145\\55\\167\\151\\144\\164\\150\", \"\\163\\150\\141\\144\\157\\167\\55\\155\\157\\144\\145\", \"\\163\\150\\141\\144\\157\\167\\55\\143\\157\\154\\157\\162\", \"\\163\\150\\141\\144\\157\\167\\55\\167\\151\\144\\164\\150\", \"\\163\\150\\141\\144\\157\\167\\55\\157\\146\\146\\163\\145\\164\", \"\\164\\145\\170\\164\\55\\155\\157\\144\\145\", \"\\164\\145\\170\\164\\55\\143\\157\\154\\157\\162\", \"\\164\\145\\170\\164\\55\\163\\164\\171\\154\\145\", \"\\164\\145\\170\\164\\55\\146\\157\\156\\164\", \"\\164\\145\\170\\164\\55\\163\\151\\172\\145\", \"\\164\\145\\170\\164\\55\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\\55\\155\\157\\144\\145\", \"\\164\\145\\170\\164\\55\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\", \"\\164\\145\\170\\164\\55\\142\\141\\143\\153\\147\\162\\157\\165\\156\\144\\55\\155\\157\\144\\145\", \"\\164\\145\\170\\164\\55\\142\\141\\143\\153\\147\\162\\157\\165\\156\\144\\55\\143\\157\\154\\157\\162\", \"\\164\\145\\170\\164\\55\\157\\146\\146\\163\\145\\164\", \"\\164\\145\\170\\164\\55\\160\\141\\144\\144\\151\\156\\147\", \"\\151\\143\\157\\156\\55\\155\\157\\144\\145\", \"\\151\\143\\157\\156\", \"\\160\\141\\144\\144\\151\\156\\147\", \"\\172\\55\\151\\156\\144\\145\\170\", \"\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\\55\\155\\157\\144\\145\", \"\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\", \"\\163\\150\\141\\160\\145\", \"\\163\\151\\172\\145\", \"\\163\\151\\172\\145\\55\\155\\157\\144\\145\", \"\\163\\150\\141\\160\\145\\55\\160\\157\\151\\156\\164\\163\", \"\\164\\145\\170\\164\\55\\141\\154\\151\\147\\156\\155\\145\\156\\164\", \"\\152\\143\\157\\155\\160\\157\\156\\145\\156\\164\", \"\\141\\162\\162\\157\\167\\55\\151\\155\\141\\147\\145\", \"\\141\\162\\162\\157\\167\\55\\163\\151\\172\\145\", \"\\141\\162\\162\\157\\167\\55\\163\\150\\141\\160\\145\", \"\\163\\160\\162\\151\\164\\145\\55\\157\\162\\151\\145\\156\\164\\141\\164\\151\\157\\156\", \"\\143\\141\\156\\166\\141\\163\\55\\143\\157\\154\\157\\162\", \"\\160\\154\\141\\151\\156\", \"\\144\\171\\156\\55\\160\\154\\141\\151\\156\", \"\\144\\171\\156\\55\\163\\151\\172\\145\", \"\\144\\171\\156\\55\\151\\143\\157\\156\", \"\\144\\141\\163\\150\\145\\163\", \"\\144\\157\\164\\163\", \"\\144\\157\\165\\142\\154\\145\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\144\\151\\141\\147\\157\\156\\141\\154\\61\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\144\\151\\141\\147\\157\\156\\141\\154\\62\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\150\\157\\162\\151\\172\\157\\156\\164\\141\\154\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\162\\141\\144\\151\\141\\154\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\166\\145\\162\\164\\151\\143\\141\\154\", \"\\150\\151\\144\\144\\145\\156\", \"\\151\\155\\141\\147\\145\\55\\164\\151\\154\\145\\144\", \"\\151\\155\\141\\147\\145\\55\\163\\143\\141\\154\\145\\144\", \"\\151\\155\\141\\147\\145\\55\\163\\143\\141\\154\\145\\144\\55\\162\\141\\164\\151\\157\\55\\155\\141\\170\", \"\\151\\155\\141\\147\\145\\55\\163\\143\\141\\154\\145\\144\\55\\162\\141\\164\\151\\157\\55\\155\\151\\156\", \"\\156\\157\\156\\145\", \"\\156\\157\\162\\155\\141\\154\", \"\\164\\162\\165\\156\\143\\141\\164\\145\\144\", \"\\172\\157\\157\\155\\55\\162\\141\\156\\147\\145\", \"\\141\\164\\55\\172\\157\\157\\155\", \"\\165\\156\\144\\145\\162\\55\\172\\157\\157\\155\", \"\\157\\166\\145\\162\\55\\172\\157\\157\\155\", \"\\172\\157\\157\\155\\163\", \"\\146\\151\\164\", \"\\142\\157\\154\\144\", \"\\142\\157\\154\\144\\55\\151\\164\\141\\154\\151\\143\", \"\\151\\164\\141\\154\\151\\143\", \"\\141\\154\\157\\156\\147\", \"\\141\\164\\55\\154\\145\\146\\164\", \"\\141\\164\\55\\162\\151\\147\\150\\164\", \"\\143\\145\\156\\164\\145\\162\", \"\\154\\145\\146\\164\", \"\\162\\151\\147\\150\\164\", \"\\165\\156\\144\\145\\162\", \"\\141\\142\\157\\166\\145\", \"\\152\\165\\163\\164\\151\\146\\171\", \"\\143\\151\\162\\143\\154\\145\", \"\\164\\162\\151\\141\\156\\147\\154\\145\", \"\\146\\162\\145\\145\\160\\154\\141\\156\\145\", \"\\164\\145\\170\\164\\55\\142\\157\\170\", \"\\164\\145\\170\\164\\55\\162\\157\\165\\156\\144\\145\\144\\55\\142\\157\\170\", \"\\164\\145\\170\\164\\55\\143\\151\\162\\143\\154\\145\", \"\\164\\145\\170\\164\\55\\144\\151\\141\\155\\157\\156\\144\", \"\\164\\145\\170\\164\\55\\160\\141\\162\\141\\147\\162\\141\\160\\150\", \"\\142\\157\\170\", \"\\162\\157\\165\\156\\144\\145\\144\\55\\142\\157\\170\", \"\\143\\162\\157\\163\\163\", \"\\144\\151\\141\\155\\157\\156\\144\", \"\\160\\157\\154\\171\\147\\157\\156\", \"\\142\\165\\164\\164\\157\\156\", \"\\164\\145\\170\\164\\55\\146\\151\\145\\154\\144\", \"\\160\\141\\156\\145\\154\", \"\\154\\151\\156\\145\", \"\\160\\157\\154\\171\\154\\151\\156\\145\", \"\\160\\157\\154\\171\\154\\151\\156\\145\\55\\163\\143\\141\\154\\145\\144\", \"\\141\\156\\147\\154\\145\", \"\\143\\165\\142\\151\\143\\55\\143\\165\\162\\166\\145\", \"\\142\\154\\157\\142\", \"\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\114\\55\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\150\\157\\162\\151\\172\\157\\156\\164\\141\\154\\55\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\166\\145\\162\\164\\151\\143\\141\\154\\55\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\141\\162\\162\\157\\167\", \"\\146\\154\\157\\167\", \"\\160\\151\\145\\55\\143\\150\\141\\162\\164\", \"\\151\\155\\141\\147\\145\", \"\\151\\155\\141\\147\\145\\163\", \"\\146\\162\\157\\155\", \"\\156\\157\\144\\145\\60\", \"\\164\\157\", \"\\156\\157\\144\\145\\61\", \"\\160\\162\\157\\152\\145\\143\\164\\151\\157\\156\", \"\\143\\154\\151\\143\\153\\145\\144\", \"\\163\\145\\154\\145\\143\\164\\145\\144\", null, null };"
            ],
            [
                "lexStateNames",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "/**\n * Lexer state names.\n */\npublic static final String[] lexStateNames = { \"DEFAULT\" };"
            ],
            [
                "jjtoToken",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "static final long[] jjtoToken = { 0xfffffffffffffe01L, 0xffffffffffffffffL, 0xffffL };"
            ],
            [
                "jjtoSkip",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "static final long[] jjtoSkip = { 0x1eL, 0x0L, 0x0L };"
            ],
            [
                "colorMap",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "// Static\n/**\n * A set of colour names mapped to real AWT Colour objects.\n */\nprotected static HashMap<String, Color> colorMap;"
            ],
            [
                "sharpColor1",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Pattern to ensure a \"#FFFFFF\" colour is recognised.\n */\nprotected static Pattern sharpColor1, sharpColor2;"
            ],
            [
                "sharpColor2",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Pattern to ensure a \"#FFFFFF\" colour is recognised.\n */\nprotected static Pattern sharpColor1, sharpColor2;"
            ],
            [
                "cssColor",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Pattern to ensure a CSS style \"rgb(1,2,3)\" colour is recognised.\n */\nprotected static Pattern cssColor;"
            ],
            [
                "cssColorA",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Pattern to ensure a CSS style \"rgba(1,2,3,4)\" colour is recognised.\n */\nprotected static Pattern cssColorA;"
            ],
            [
                "awtColor",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Pattern to ensure that java.awt.Color.toString() strings are recognised\n * as colour.\n */\nprotected static Pattern awtColor;"
            ],
            [
                "hexaColor",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Pattern to ensure an hexadecimal number is a recognised colour.\n */\nprotected static Pattern hexaColor;"
            ],
            [
                "numberUnit",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Pattern to ensure a string is a Value in various units.\n */\nprotected static Pattern numberUnit, number;"
            ],
            [
                "number",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Pattern to ensure a string is a Value in various units.\n */\nprotected static Pattern numberUnit, number;"
            ],
            [
                "acceptedAttribute",
                "org.graphstream.ui.graphicGraph",
                "GraphicElement",
                "// Overriding of standard attribute changing to filter them.\nprotected static Pattern acceptedAttribute;"
            ],
            [
                "DEFAULT_AN_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_AN_FORMAT = \"%prefix%[%sourceId%:%timeId%] add node \\\"%nodeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_CNA_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CNA_FORMAT = \"%prefix%[%sourceId%:%timeId%] set node \\\"%nodeId%\\\" +\\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CNC_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CNC_FORMAT = \"%prefix%[%sourceId%:%timeId%] set node \\\"%nodeId%\\\" \\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CNR_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CNR_FORMAT = \"%prefix%[%sourceId%:%timeId%] set node \\\"%nodeId%\\\" -\\\"%attributeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_DN_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_DN_FORMAT = \"%prefix%[%sourceId%:%timeId%] remove node \\\"%nodeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_AE_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_AE_FORMAT = \"%prefix%[%sourceId%:%timeId%] add edge \\\"%edgeId%\\\" : \\\"%source%\\\" -- \\\"%target%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_CEA_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CEA_FORMAT = \"%prefix%[%sourceId%:%timeId%] set edge \\\"%edgeId%\\\" +\\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CEC_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CEC_FORMAT = \"%prefix%[%sourceId%:%timeId%] set edge \\\"%edgeId%\\\" \\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CER_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CER_FORMAT = \"%prefix%[%sourceId%:%timeId%] set edge \\\"%edgeId%\\\" -\\\"%attributeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_DE_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_DE_FORMAT = \"%prefix%[%sourceId%:%timeId%] remove edge \\\"%edgeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_CGA_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CGA_FORMAT = \"%prefix%[%sourceId%:%timeId%] set +\\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CGC_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CGC_FORMAT = \"%prefix%[%sourceId%:%timeId%] set \\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CGR_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CGR_FORMAT = \"%prefix%[%sourceId%:%timeId%] set -\\\"%attributeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_CL_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CL_FORMAT = \"%prefix%[%sourceId%:%timeId%] clear%suffix%\";"
            ],
            [
                "DEFAULT_ST_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_ST_FORMAT = \"%prefix%[%sourceId%:%timeId%] step %step% begins%suffix%\";"
            ],
            [
                "GLOBAL_ENV",
                "org.graphstream.util",
                "Environment",
                "// --------- Static attributes ---------\n/**\n * Global environment for the whole JVM. This global environment is\n * available <b>and editable</b> from everywhere. It is create as soon as\n * the {@link #getGlobalEnvironment()} static method is called if this field\n * was not yet initialized by any other mean.\n * @see #getGlobalEnvironment()\n */\npublic static Environment GLOBAL_ENV;"
            ],
            [
                "LEXICAL_ERROR",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "/*\n\t * Ordinals for various reasons why an Error of this type can be thrown.\n\t */\n/**\n * Lexical error occurred.\n */\npublic static final int LEXICAL_ERROR = 0;"
            ],
            [
                "STATIC_LEXER_ERROR",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "/**\n * An attempt was made to create a second instance of a static token\n * manager.\n */\npublic static final int STATIC_LEXER_ERROR = 1;"
            ],
            [
                "INVALID_LEXICAL_STATE",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "/**\n * Tried to change to an invalid lexical state.\n */\npublic static final int INVALID_LEXICAL_STATE = 2;"
            ],
            [
                "LOOP_DETECTED",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "/**\n * Detected (and bailed out of) an infinite loop in the token manager.\n */\npublic static final int LOOP_DETECTED = 3;"
            ],
            [
                "staticFlag",
                "org.graphstream.util.parser",
                "SimpleCharStream",
                "/**\n * Whether parser is static.\n */\npublic static final boolean staticFlag = false;"
            ],
            [
                "ABBREVIATED_WEEKDAY_NAME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent ABBREVIATED_WEEKDAY_NAME = new NotImplementedComponent(\"%a\", \"\\\\w+[.]\");"
            ],
            [
                "FULL_WEEKDAY_NAME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent FULL_WEEKDAY_NAME = new NotImplementedComponent(\"%A\", \"\\\\w+\");"
            ],
            [
                "ABBREVIATED_MONTH_NAME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent ABBREVIATED_MONTH_NAME = new NotImplementedComponent(\"%b\", \"\\\\w+[.]\");"
            ],
            [
                "FULL_MONTH_NAME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent FULL_MONTH_NAME = new NotImplementedComponent(\"%B\", \"\\\\w+\");"
            ],
            [
                "LOCALE_DATE_AND_TIME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent LOCALE_DATE_AND_TIME = new NotImplementedComponent(\"%c\", null);"
            ],
            [
                "CENTURY",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent CENTURY = new NotImplementedComponent(\"%C\", \"\\\\d\\\\d\");"
            ],
            [
                "DAY_OF_MONTH_2_DIGITS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DAY_OF_MONTH_2_DIGITS = new FieldComponent(\"%d\", \"[012]\\\\d|3[01]\", Calendar.DAY_OF_MONTH, \"%02d\");"
            ],
            [
                "DATE",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DATE = new AliasComponent(\"%D\", \"%m/%d/%y\");"
            ],
            [
                "DAY_OF_MONTH",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DAY_OF_MONTH = new FieldComponent(\"%e\", \"\\\\d|[12]\\\\d|3[01]\", Calendar.DAY_OF_MONTH, \"%2d\");"
            ],
            [
                "DATE_ISO8601",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DATE_ISO8601 = new AliasComponent(\"%F\", \"%Y-%m-%d\");"
            ],
            [
                "WEEK_BASED_YEAR_2_DIGITS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent WEEK_BASED_YEAR_2_DIGITS = new FieldComponent(\"%g\", \"\\\\d\\\\d\", Calendar.YEAR, \"%02d\");"
            ],
            [
                "WEEK_BASED_YEAR_4_DIGITS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent WEEK_BASED_YEAR_4_DIGITS = new FieldComponent(\"%G\", \"\\\\d{4}\", Calendar.YEAR, \"%04d\");"
            ],
            [
                "ABBREVIATED_MONTH_NAME_ALIAS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent ABBREVIATED_MONTH_NAME_ALIAS = new AliasComponent(\"%h\", \"%b\");"
            ],
            [
                "HOUR_OF_DAY",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent HOUR_OF_DAY = new FieldComponent(\"%H\", \"[01]\\\\d|2[0123]\", Calendar.HOUR_OF_DAY, \"%02d\");"
            ],
            [
                "HOUR",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent HOUR = new FieldComponent(\"%I\", \"0\\\\d|1[012]\", Calendar.HOUR, \"%02d\");"
            ],
            [
                "DAY_OF_YEAR",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DAY_OF_YEAR = new FieldComponent(\"%j\", \"[012]\\\\d\\\\d|3[0-5]\\\\d|36[0-6]\", Calendar.DAY_OF_YEAR, \"%03d\");"
            ],
            [
                "MILLISECOND",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent MILLISECOND = new FieldComponent(\"%k\", \"\\\\d{3}\", Calendar.MILLISECOND, \"%03d\");"
            ],
            [
                "EPOCH",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent EPOCH = new EpochComponent();"
            ],
            [
                "MONTH",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent MONTH = new FieldComponent(\"%m\", \"0[1-9]|1[012]\", Calendar.MONTH, -1, \"%02d\");"
            ],
            [
                "MINUTE",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent MINUTE = new FieldComponent(\"%M\", \"[0-5]\\\\d\", Calendar.MINUTE, \"%02d\");"
            ],
            [
                "NEW_LINE",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent NEW_LINE = new AliasComponent(\"%n\", \"\\n\");"
            ],
            [
                "AM_PM",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent AM_PM = new AMPMComponent();"
            ],
            [
                "LOCALE_CLOCK_TIME_12_HOUR",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent LOCALE_CLOCK_TIME_12_HOUR = new NotImplementedComponent(\"%r\", \"\");"
            ],
            [
                "HOUR_AND_MINUTE",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent HOUR_AND_MINUTE = new AliasComponent(\"%R\", \"%H:%M\");"
            ],
            [
                "SECOND",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent SECOND = new FieldComponent(\"%S\", \"[0-5]\\\\d|60\", Calendar.SECOND, \"%02d\");"
            ],
            [
                "TABULATION",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent TABULATION = new AliasComponent(\"%t\", \"\\t\");"
            ],
            [
                "TIME_ISO8601",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent TIME_ISO8601 = new AliasComponent(\"%T\", \"%H:%M:%S\");"
            ],
            [
                "DAY_OF_WEEK_1_7",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DAY_OF_WEEK_1_7 = new FieldComponent(\"%u\", \"[1-7]\", Calendar.DAY_OF_WEEK, -1, \"%1d\");"
            ],
            [
                "WEEK_OF_YEAR_FROM_SUNDAY",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent WEEK_OF_YEAR_FROM_SUNDAY = new FieldComponent(\"%U\", \"[0-4]\\\\d|5[0123]\", Calendar.WEEK_OF_YEAR, 1, \"%2d\");"
            ],
            [
                "WEEK_NUMBER_ISO8601",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent WEEK_NUMBER_ISO8601 = new NotImplementedComponent(\"%V\", \"0[1-9]|[2-4]\\\\d|5[0123]\");"
            ],
            [
                "DAY_OF_WEEK_0_6",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DAY_OF_WEEK_0_6 = new FieldComponent(\"%w\", \"[0-6]\", Calendar.DAY_OF_WEEK, \"%01d\");"
            ],
            [
                "WEEK_OF_YEAR_FROM_MONDAY",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent WEEK_OF_YEAR_FROM_MONDAY = new FieldComponent(\"%W\", \"[0-4]\\\\d|5[0123]\", Calendar.WEEK_OF_YEAR, \"%02d\");"
            ],
            [
                "LOCALE_DATE_REPRESENTATION",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent LOCALE_DATE_REPRESENTATION = new NotImplementedComponent(\"%x\", \"\");"
            ],
            [
                "LOCALE_TIME_REPRESENTATION",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent LOCALE_TIME_REPRESENTATION = new NotImplementedComponent(\"%X\", \"\");"
            ],
            [
                "YEAR_2_DIGITS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent YEAR_2_DIGITS = new FieldComponent(\"%y\", \"\\\\d\\\\d\", Calendar.YEAR, \"%02d\");"
            ],
            [
                "YEAR_4_DIGITS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent YEAR_4_DIGITS = new FieldComponent(\"%Y\", \"\\\\d{4}\", Calendar.YEAR, \"%04d\");"
            ],
            [
                "UTC_OFFSET",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent UTC_OFFSET = new UTCOffsetComponent();"
            ],
            [
                "LOCALE_TIME_ZONE_NAME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent LOCALE_TIME_ZONE_NAME = new NotImplementedComponent(\"%Z\", \"\\\\w*\");"
            ],
            [
                "PERCENT",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent PERCENT = new AliasComponent(\"%%\", \"%\");"
            ],
            [
                "jjbitVec0",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };"
            ],
            [
                "jjnextStates",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "static final int[] jjnextStates = { 5, 6, 8, 9, 13, 14 };"
            ],
            [
                "jjstrLiteralImages",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "/**\n * Token literal values.\n */\npublic static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, \"\\133\", \"\\135\", null, null, null, null, null, null };"
            ],
            [
                "lexStateNames",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "/**\n * Lexer state names.\n */\npublic static final String[] lexStateNames = { \"DEFAULT\" };"
            ],
            [
                "jjtoToken",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "static final long[] jjtoToken = { 0xff01L };"
            ],
            [
                "jjtoSkip",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "static final long[] jjtoSkip = { 0x1eL };"
            ],
            [
                "jjbitVec0",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };"
            ],
            [
                "jjnextStates",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "static final int[] jjnextStates = { 54, 11, 12, 15, 17, 18, 1, 2, 5, 47, 52, 8, 9, 20, 21 };"
            ],
            [
                "jjstrLiteralImages",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "/**\n * Token literal values.\n */\npublic static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, null, \"\\50\", \"\\51\", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null };"
            ],
            [
                "lexStateNames",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "/**\n * Lexer state names.\n */\npublic static final String[] lexStateNames = { \"DEFAULT\" };"
            ],
            [
                "jjtoToken",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "static final long[] jjtoToken = { 0xffffc01L };"
            ],
            [
                "jjtoSkip",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "static final long[] jjtoSkip = { 0x7eL };"
            ],
            [
                "XYZ_ATTR",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "/**\n * Node attribute storing coordinates.\n */\npublic static final String XYZ_ATTR = \"xyz\";"
            ],
            [
                "WIDTH_ATTR",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "/**\n * Graph attribute storing width of the TikZ picture.\n */\npublic static final String WIDTH_ATTR = \"ui.tikz.width\";"
            ],
            [
                "HEIGHT_ATTR",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "/**\n * Graph attribute storing height of the TikZ picture.\n */\npublic static final String HEIGHT_ATTR = \"ui.tikz.height\";"
            ],
            [
                "DEFAULT_WIDTH",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "public static final double DEFAULT_WIDTH = 10;"
            ],
            [
                "DEFAULT_HEIGHT",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "public static final double DEFAULT_HEIGHT = 10;"
            ],
            [
                "DISPLAY_MIN_SIZE_IN_MM",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "/**\n * Define the default minimum size of nodes when using a dynamic size. This\n * size is in millimeter.\n */\npublic static final double DISPLAY_MIN_SIZE_IN_MM = 2;"
            ],
            [
                "DISPLAY_MAX_SIZE_IN_MM",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "/**\n * Define the default maximum size of nodes when using a dynamic size. This\n * size is in millimeter.\n */\npublic static final double DISPLAY_MAX_SIZE_IN_MM = 10;"
            ],
            [
                "jjbitVec0",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };"
            ],
            [
                "jjnextStates",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "static final int[] jjnextStates = { 21, 27, 8, 10, 11, 18, 19, 22, 23, 26, 1, 2, 13, 14 };"
            ],
            [
                "jjstrLiteralImages",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "/**\n * Token literal values.\n */\npublic static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, null, \"\\133\", \"\\135\", \"\\173\", \"\\175\", \"\\72\", \"\\54\", \"\\75\", null, null, null, null, null, null, null, null, null, null, \"\\73\", null, null, null, null, null, null, null, null, null, \"\\137\" };"
            ],
            [
                "lexStateNames",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "/**\n * Lexer state names.\n */\npublic static final String[] lexStateNames = { \"DEFAULT\" };"
            ],
            [
                "jjtoToken",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "static final long[] jjtoToken = { 0x3ffffffc01L };"
            ],
            [
                "jjtoSkip",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "static final long[] jjtoSkip = { 0x7eL };"
            ],
            [
                "jjbitVec0",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };"
            ],
            [
                "jjnextStates",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "static final int[] jjnextStates = { 21, 22, 23, 17, 19, 2, 3, 5, 6, 8, 9 };"
            ],
            [
                "jjstrLiteralImages",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "/**\n * Token literal values.\n */\npublic static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null };"
            ],
            [
                "lexStateNames",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "/**\n * Lexer state names.\n */\npublic static final String[] lexStateNames = { \"DEFAULT\" };"
            ],
            [
                "jjtoToken",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "static final long[] jjtoToken = { 0x3fffffffffffc9L };"
            ],
            [
                "jjtoSkip",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "static final long[] jjtoSkip = { 0x6L };"
            ],
            [
                "XMLNS",
                "org.graphstream.stream.file.gexf",
                "GEXF",
                "public static final String XMLNS = \"http://www.gexf.net/1.2draft\";"
            ],
            [
                "XMLNS_XSI",
                "org.graphstream.stream.file.gexf",
                "GEXF",
                "public static final String XMLNS_XSI = \"http://www.w3.org/2001/XMLSchema-instance\";"
            ],
            [
                "XMLNS_SL",
                "org.graphstream.stream.file.gexf",
                "GEXF",
                "public static final String XMLNS_SL = \"http://www.gexf.net/1.2draft http://www.gexf.net/1.2draft/gexf.xsd\";"
            ],
            [
                "XMLNS_VIZ",
                "org.graphstream.stream.file.gexf",
                "GEXF",
                "public static final String XMLNS_VIZ = \"http://www.gexf.net/1.2draft/viz\";"
            ],
            [
                "VERSION",
                "org.graphstream.stream.file.gexf",
                "GEXF",
                "public static final String VERSION = \"1.2\";"
            ],
            [
                "BUFFER_SIZE",
                "org.graphstream.stream.file.dgs",
                "DGSParser",
                "protected static final int BUFFER_SIZE = 4096;"
            ],
            [
                "ARRAY_OPEN",
                "org.graphstream.stream.file.dgs",
                "DGSParser",
                "public static final int ARRAY_OPEN = '{';"
            ],
            [
                "ARRAY_CLOSE",
                "org.graphstream.stream.file.dgs",
                "DGSParser",
                "public static final int ARRAY_CLOSE = '}';"
            ],
            [
                "MAP_OPEN",
                "org.graphstream.stream.file.dgs",
                "DGSParser",
                "public static final int MAP_OPEN = '[';"
            ],
            [
                "MAP_CLOSE",
                "org.graphstream.stream.file.dgs",
                "DGSParser",
                "public static final int MAP_CLOSE = ']';"
            ],
            [
                "gradientId",
                "org.graphstream.stream.file",
                "FileSinkSVG2",
                "static int gradientId = 0;"
            ],
            [
                "gradientId",
                "org.graphstream.stream.file",
                "SVGStyle",
                "static int gradientId = 0;"
            ],
            [
                "TIME_PREFIX",
                "org.graphstream.stream",
                "Timeline",
                "public static final String TIME_PREFIX = \"time\";"
            ],
            [
                "SYNC_DISABLE_KEY",
                "org.graphstream.stream.sync",
                "SinkTime",
                "/**\n * Key used to disable synchro. Just run : java -DSYNC_DISABLE_KEY ...\n */\npublic static final String SYNC_DISABLE_KEY = \"org.graphstream.stream.sync.disable\";"
            ],
            [
                "disableSync",
                "org.graphstream.stream.sync",
                "SinkTime",
                "/**\n * Flag used to disable sync.\n */\nprotected static final boolean disableSync;"
            ],
            [
                "LIGHT_YELLOW",
                "org.graphstream.stream.netstream",
                "NetStreamReceiver",
                "protected static final String LIGHT_YELLOW = \"\u001b[33;1m\";"
            ],
            [
                "RESET",
                "org.graphstream.stream.netstream",
                "NetStreamReceiver",
                "protected static final String RESET = \"\u001b[0m\";"
            ],
            [
                "BUFFER_INITIAL_SIZE",
                "org.graphstream.stream.netstream",
                "NetStreamReceiver",
                "// Attributes\n// 65535, 4096\nprotected static final int BUFFER_INITIAL_SIZE = 8192;"
            ],
            [
                "BUFFER_INITIAL_SIZE",
                "org.graphstream.stream.netstream",
                "IncomingBuffer",
                "// Attributes\n// 65535, 4096\nprotected static final int BUFFER_INITIAL_SIZE = 8192;"
            ],
            [
                "EVENT_GETVERSION",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by an 32-bit signed integer for this protocol version. Certainly\n * useless.\n */\npublic static int EVENT_GETVERSION = 0x00;"
            ],
            [
                "EVENT_START",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Not used.\n */\npublic static int EVENT_START = 0x01;"
            ],
            [
                "EVENT_END",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Constant indicating that the client has disconnected.\n */\npublic static int EVENT_END = 0x02;"
            ],
            [
                "EVENT_ADD_NODE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "//\n// ----------------------------------\n// GraphStream's graph events\n// ----------------------------------\n//\n/**\n * Followed by a node id (TYPE_STRING format)\n */\npublic static int EVENT_ADD_NODE = 0x10;"
            ],
            [
                "EVENT_DEL_NODE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by a node id (TYPE_STRING format)\n */\npublic static int EVENT_DEL_NODE = 0x11;"
            ],
            [
                "EVENT_ADD_EDGE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - an edge id (TYPE_STRING format), - an source node id\n * (TYPE_STRING format), - a target node id (TYPE_STRING format - a boolean\n * indicating if directed (TYPE_BOOLEAN format)\n */\npublic static int EVENT_ADD_EDGE = 0x12;"
            ],
            [
                "EVENT_DEL_EDGE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by an edge id (TYPE_STRING format)\n */\npublic static int EVENT_DEL_EDGE = 0x13;"
            ],
            [
                "EVENT_STEP",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by double (TYPE_DOUBLE format)\n */\npublic static int EVENT_STEP = 0x14;"
            ],
            [
                "EVENT_CLEARED",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n */\npublic static int EVENT_CLEARED = 0x15;"
            ],
            [
                "EVENT_ADD_GRAPH_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - an attribute id (TYPE_STRING format) - the attribute TYPE -\n * the attribute value\n */\npublic static int EVENT_ADD_GRAPH_ATTR = 0x16;"
            ],
            [
                "EVENT_CHG_GRAPH_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - an attribute id (TYPE_STRING format) - the attribute TYPE -\n * the attribute old value - the attribute new value\n */\npublic static int EVENT_CHG_GRAPH_ATTR = 0x17;"
            ],
            [
                "EVENT_DEL_GRAPH_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - the attribute id (TYPE_STRING format)\n */\npublic static int EVENT_DEL_GRAPH_ATTR = 0x18;"
            ],
            [
                "EVENT_ADD_NODE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - an attribute id (TYPE_STRING format) - the attribute TYPE -\n * the attribute value\n */\npublic static int EVENT_ADD_NODE_ATTR = 0x19;"
            ],
            [
                "EVENT_CHG_NODE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - an attribute id (TYPE_STRING format) - the attribute TYPE -\n * the attribute old value - the attribute new value\n */\npublic static int EVENT_CHG_NODE_ATTR = 0x1a;"
            ],
            [
                "EVENT_DEL_NODE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - the node id (TYPE_STRING format) - the attribute id\n * (TYPE_STRING format)\n */\npublic static int EVENT_DEL_NODE_ATTR = 0x1b;"
            ],
            [
                "EVENT_ADD_EDGE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - an attribute id (TYPE_STRING format) - the attribute TYPE -\n * the attribute value\n */\npublic static int EVENT_ADD_EDGE_ATTR = 0x1c;"
            ],
            [
                "EVENT_CHG_EDGE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - an attribute id (TYPE_STRING format) - the attribute TYPE -\n * the attribute old value - the attribute new value\n */\npublic static int EVENT_CHG_EDGE_ATTR = 0x1d;"
            ],
            [
                "EVENT_DEL_EDGE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - the edge id (TYPE_STRING format) - the attribute id\n * (TYPE_STRING format)\n */\npublic static int EVENT_DEL_EDGE_ATTR = 0x1e;"
            ],
            [
                "TYPE_UNKNOWN",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "// Values types\npublic static int TYPE_UNKNOWN = 0x00;"
            ],
            [
                "TYPE_BOOLEAN",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by a byte who's value is 0 or 1\n */\npublic static int TYPE_BOOLEAN = 0x50;"
            ],
            [
                "TYPE_BOOLEAN_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * An array of booleans. Followed by first, a 16-bits integer for the number\n * of booleans and then, a list of bytes who's value is 0 or 1\n */\npublic static int TYPE_BOOLEAN_ARRAY = 0x51;"
            ],
            [
                "TYPE_BYTE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by a signed byte [-127,127]\n */\npublic static int TYPE_BYTE = 0x52;"
            ],
            [
                "TYPE_BYTE_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * An array of bytes. Followed by first, a 16-bits integer for the number of\n * integers and then, a list of signed bytes.\n */\npublic static int TYPE_BYTE_ARRAY = 0x53;"
            ],
            [
                "TYPE_SHORT",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by an 16-bit signed integer (a short)\n */\npublic static int TYPE_SHORT = 0x54;"
            ],
            [
                "TYPE_SHORT_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * An array of shorts. Followed by first, a 16-bits integer for the number\n * of integers and then, a list of 16-bit signed shorts\n */\npublic static int TYPE_SHORT_ARRAY = 0x55;"
            ],
            [
                "TYPE_INT",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by an 32-bit signed integer\n */\npublic static int TYPE_INT = 0x56;"
            ],
            [
                "TYPE_INT_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * An array of integers. Followed by first, a 16-bits integer for the number\n * of integers and then, a list of 32-bit signed integers\n */\npublic static int TYPE_INT_ARRAY = 0x57;"
            ],
            [
                "TYPE_LONG",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by an 64-bit signed integer\n */\npublic static int TYPE_LONG = 0x58;"
            ],
            [
                "TYPE_LONG_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * An array of longs. Followed by first, a 16-bits integer for the number of\n * longs and then, a list of 62-bit signed integers\n */\npublic static int TYPE_LONG_ARRAY = 0x59;"
            ],
            [
                "TYPE_FLOAT",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by a single precision 32-bits floating point number\n */\npublic static int TYPE_FLOAT = 0x5a;"
            ],
            [
                "TYPE_FLOAT_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Array of double. Followed by first, a 16-bits integer for the number of\n * floats and then, a list of 32-bit floats\n */\npublic static int TYPE_FLOAT_ARRAY = 0x5b;"
            ],
            [
                "TYPE_DOUBLE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by a double precision 64-bits floating point number\n */\npublic static int TYPE_DOUBLE = 0x5c;"
            ],
            [
                "TYPE_DOUBLE_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Array of double. Followed by first, a 16-bits integer for the number of\n * doubles and then, a list of 64-bit doubles\n */\npublic static int TYPE_DOUBLE_ARRAY = 0x5d;"
            ],
            [
                "TYPE_STRING",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Array of characters. Followed by first, a 16-bits integer for the size in\n * bytes (not in number of characters) of the string, then by the unicode\n * string\n */\npublic static int TYPE_STRING = 0x5e;"
            ],
            [
                "TYPE_RAW",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Raw data, good for serialization. Followed by first, a 16-bits integer\n * indicating the length in bytes of the dataset, and then the data itself.\n */\npublic static int TYPE_RAW = 0x5f;"
            ],
            [
                "TYPE_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * An type-unspecified array. Followed by first, a 16-bits integer\n * indicating the number of elements, and then, the elements themselves. The\n * elements themselves have to give their type.\n */\npublic static byte TYPE_ARRAY = 0x60;"
            ],
            [
                "TYPE_NULL",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_NULL = 0x61;"
            ],
            [
                "COMMAND",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n *  Constant that indicates that this message is a COMMAND, not and EVENT.\n *\n *  For now it is followed by a string that has to be parssed at the application level.\n *\n *  THIS IS EXPERIMENTAL AND MAY (WILL) CHANGE !\n */\npublic static int COMMAND = 0x70;"
            ],
            [
                "NO_OPTIONS",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/* ********  P U B L I C   F I E L D S  ******** */\n/**\n * No options specified. Value is zero.\n */\npublic final static int NO_OPTIONS = 0;"
            ],
            [
                "ENCODE",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Specify encoding in first bit. Value is one.\n */\npublic final static int ENCODE = 1;"
            ],
            [
                "DECODE",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Specify decoding in first bit. Value is zero.\n */\npublic final static int DECODE = 0;"
            ],
            [
                "GZIP",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Specify that data should be gzip-compressed in second bit. Value is two.\n */\npublic final static int GZIP = 2;"
            ],
            [
                "DONT_GUNZIP",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Specify that gzipped data should <em>not</em> be automatically gunzipped.\n */\npublic final static int DONT_GUNZIP = 4;"
            ],
            [
                "DO_BREAK_LINES",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Do break lines when encoding. Value is 8.\n */\npublic final static int DO_BREAK_LINES = 8;"
            ],
            [
                "URL_SAFE",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Encode using Base64-like encoding that is URL- and Filename-safe as described\n * in Section 4 of RFC3548:\n * <a href=\"http://www.faqs.org/rfcs/rfc3548.html\">http://www.faqs.org/rfcs/rfc3548.html</a>.\n * It is important to note that data encoded this way is <em>not</em> officially valid Base64,\n * or at the very least should not be called Base64 without also specifying that is\n * was encoded using the URL- and Filename-safe dialect.\n */\npublic final static int URL_SAFE = 16;"
            ],
            [
                "ORDERED",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Encode using the special \"ordered\" dialect of Base64 described here:\n * <a href=\"http://www.faqs.org/qa/rfcc-1940.html\">http://www.faqs.org/qa/rfcc-1940.html</a>.\n */\npublic final static int ORDERED = 32;"
            ],
            [
                "INITIAL_EDGE_CAPACITY",
                "org.graphstream.graph.implementations",
                "AdjacencyListNode",
                "protected static final int INITIAL_EDGE_CAPACITY;"
            ],
            [
                "GROWTH_FACTOR",
                "org.graphstream.graph.implementations",
                "AdjacencyListNode",
                "protected static final double GROWTH_FACTOR = 1.1;"
            ],
            [
                "I_EDGE",
                "org.graphstream.graph.implementations",
                "AdjacencyListNode",
                "protected static final char I_EDGE = 0;"
            ],
            [
                "IO_EDGE",
                "org.graphstream.graph.implementations",
                "AdjacencyListNode",
                "protected static final char IO_EDGE = 1;"
            ],
            [
                "O_EDGE",
                "org.graphstream.graph.implementations",
                "AdjacencyListNode",
                "protected static final char O_EDGE = 2;"
            ],
            [
                "GROW_FACTOR",
                "org.graphstream.graph.implementations",
                "AdjacencyListGraph",
                "public static final double GROW_FACTOR = 1.1;"
            ],
            [
                "DEFAULT_NODE_CAPACITY",
                "org.graphstream.graph.implementations",
                "AdjacencyListGraph",
                "public static final int DEFAULT_NODE_CAPACITY = 128;"
            ],
            [
                "DEFAULT_EDGE_CAPACITY",
                "org.graphstream.graph.implementations",
                "AdjacencyListGraph",
                "public static final int DEFAULT_EDGE_CAPACITY = 1024;"
            ]
        ],
        "tokensMethodJavadocValues": [
            [
                "0",
                "int"
            ],
            [
                "1",
                "int"
            ],
            [
                "2",
                "int"
            ],
            [
                "3",
                "int"
            ]
        ],
        "tokensMethodArguments": [
            [
                "p0",
                "java.awt.geom",
                "Point2D.Double"
            ],
            [
                "p1",
                "java.awt.geom",
                "Point2D.Double"
            ],
            [
                "p2",
                "java.awt.geom",
                "Point2D.Double"
            ],
            [
                "p3",
                "java.awt.geom",
                "Point2D.Double"
            ],
            [
                "t",
                "",
                "double"
            ]
        ],
        "tokensMethodVariablesNonPrivateNonStaticNonVoidMethods": [
            [
                "equals",
                "java.lang",
                "Object",
                "public boolean equals(Object arg0)"
            ],
            [
                "toString",
                "java.lang",
                "Object",
                "public String toString()"
            ],
            [
                "getClass",
                "java.lang",
                "Object",
                "public final native Class<? extends Object> getClass()"
            ],
            [
                "clone",
                "java.lang",
                "Object",
                "protected native Object clone() throws CloneNotSupportedException"
            ],
            [
                "hashCode",
                "java.lang",
                "Object",
                "public native int hashCode()"
            ],
            [
                "getX",
                "java.awt.geom",
                "Point2D.Double",
                "public double getX()"
            ],
            [
                "getY",
                "java.awt.geom",
                "Point2D.Double",
                "public double getY()"
            ],
            [
                "toString",
                "java.awt.geom",
                "Point2D.Double",
                "public String toString()"
            ],
            [
                "getX",
                "java.awt.geom",
                "Point2D",
                "public abstract double getX()"
            ],
            [
                "distance",
                "java.awt.geom",
                "Point2D",
                "public double distance(double arg0, double arg1)"
            ],
            [
                "equals",
                "java.awt.geom",
                "Point2D",
                "public boolean equals(Object arg0)"
            ],
            [
                "hashCode",
                "java.awt.geom",
                "Point2D",
                "public int hashCode()"
            ],
            [
                "clone",
                "java.awt.geom",
                "Point2D",
                "public Object clone()"
            ],
            [
                "distanceSq",
                "java.awt.geom",
                "Point2D",
                "public double distanceSq(Point2D arg0)"
            ],
            [
                "distance",
                "java.awt.geom",
                "Point2D",
                "public double distance(Point2D arg0)"
            ],
            [
                "getY",
                "java.awt.geom",
                "Point2D",
                "public abstract double getY()"
            ],
            [
                "distanceSq",
                "java.awt.geom",
                "Point2D",
                "public double distanceSq(double arg0, double arg1)"
            ]
        ],
        "tokensMethodVariablesNonPrivateNonStaticAttributes": [
            [
                "x",
                "java.awt.geom",
                "Point2D.Double",
                "public double x;"
            ],
            [
                "y",
                "java.awt.geom",
                "Point2D.Double",
                "public double y;"
            ]
        ],
        "tokensOracleVariablesNonPrivateNonStaticNonVoidMethods": [],
        "tokensOracleVariablesNonPrivateNonStaticAttributes": []
    },
    {
        "id": 2935,
        "oracle": ";",
        "oracleType": "PRE",
        "projectName": "gs-core-1.3",
        "packageName": "org.graphstream.ui.view",
        "className": "Viewer",
        "javadocTag": "@param renderer The renderer to use.",
        "methodJavadoc": "    /**\n\t * Add a new default view with a specific renderer. If a view with the same\n\t * id exists, it is removed and closed. By default the view is open in a\n\t * frame.\n\t * \n\t * @param id\n\t *            The new view identifier.\n\t * @param renderer\n\t *            The renderer to use.\n\t * @return The created view.\n\t */",
        "methodSourceCode": "public ViewPanel addView(String id, GraphRenderer renderer){\n    return addView(id, renderer, true);\n}",
        "classJavadoc": "/**\n * Set of views on a graphic graph.\n * \n * <p>\n * The viewer class is in charge of maintaining :\n * <ul>\n * <li>A \"graphic graph\" (a special graph that internally stores the graph under\n * the form of style sets of \"graphic\" elements, suitable to draw the graph, but\n * not to adapted to used it as a general graph),</li>\n * <li>The eventual proxy pipe from which the events come from (but graph events\n * can come from any kind of source),</li>\n * <li>A default view, and eventually more views on the graphic graph.</li>\n * <li>A flag that allows to repaint the view only if the graphic graph changed.\n * <li>\n * </ul>\n * </p>\n * \n * <p>\n * The graphic graph can be created by the viewer or given at construction (to\n * share it with another viewer).\n * </p>\n * \n * <p>\n * <u>Once created, the viewer runs in a loop inside the Swing thread. You\n * cannot call methods on it directly if you are not in this thread</u>. The\n * only operation that you can use in other threads is the constructor, the\n * {@link #addView(View)}, {@link #removeView(String)} and the {@link #close()}\n * methods. Other methods are not protected from concurrent accesses.\n * </p>\n * \n * <p>\n * Some constructors allow a {@link ProxyPipe} as argument. If given, the\n * graphic graph is made listener of this pipe and the pipe is \"pumped\" during\n * the view loop. This allows to run algorithms on a graph in the main thread\n * (or any other thread) while letting the viewer run in the swing thread.\n * </p>\n * \n * <p>\n * Be very careful: due to the nature of graph events in GraphStream, the viewer\n * is not aware of events that occured on the graph <u>before</u> its creation.\n * There is a special mechanism that replay the graph if you use a proxy pipe or\n * if you pass the graph directly. However, when you create the viewer by\n * yourself and only pass a {@link Source}, the viewer <u>will not</u> display\n * the events that occured on the source before it is connected to it.\n * </p>\n */",
        "classSourceCode": "/*\n * Copyright 2006 - 2015\n *     Stefan Balev     <stefan.balev@graphstream-project.org>\n *     Julien Baudry    <julien.baudry@graphstream-project.org>\n *     Antoine Dutot    <antoine.dutot@graphstream-project.org>\n *     Yoann Pign\u00e9      <yoann.pigne@graphstream-project.org>\n *     Guilhelm Savin   <guilhelm.savin@graphstream-project.org>\n * \n * This file is part of GraphStream <http://graphstream-project.org>.\n * \n * GraphStream is a library whose purpose is to handle static or dynamic\n * graph, create them from scratch, file or any source and display them.\n * \n * This program is free software distributed under the terms of two licenses, the\n * CeCILL-C license that fits European law, and the GNU Lesser General Public\n * License. You can  use, modify and/ or redistribute the software under the terms\n * of the CeCILL-C license as circulated by CEA, CNRS and INRIA at the following\n * URL <http://www.cecill.info> or under the terms of the GNU LGPL as published by\n * the Free Software Foundation, either version 3 of the License, or (at your\n * option) any later version.\n * \n * This program is distributed in the hope that it will be useful, but WITHOUT ANY\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A\n * PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more details.\n * \n * You should have received a copy of the GNU Lesser General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n * \n * The fact that you are presently reading this means that you have had\n * knowledge of the CeCILL-C and LGPL licenses and that you accept their terms.\n */\npackage org.graphstream.ui.view;\n\nimport org.graphstream.graph.Edge;\nimport org.graphstream.graph.Graph;\nimport org.graphstream.graph.Node;\nimport org.graphstream.stream.ProxyPipe;\nimport org.graphstream.stream.Source;\nimport org.graphstream.stream.thread.ThreadProxyPipe;\nimport org.graphstream.ui.geom.Point3;\nimport org.graphstream.ui.graphicGraph.GraphicGraph;\nimport org.graphstream.ui.layout.Layout;\nimport org.graphstream.ui.layout.LayoutRunner;\nimport org.graphstream.ui.layout.Layouts;\nimport org.graphstream.ui.swingViewer.DefaultView;\nimport org.graphstream.ui.swingViewer.GraphRenderer;\nimport org.graphstream.ui.swingViewer.ViewPanel;\nimport org.graphstream.ui.swingViewer.basicRenderer.SwingBasicGraphRenderer;\n\nimport javax.swing.Timer;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ActionListener;\nimport java.security.AccessControlException;\nimport java.util.Map;\nimport java.util.TreeMap;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\n\n/**\n * Set of views on a graphic graph.\n * \n * <p>\n * The viewer class is in charge of maintaining :\n * <ul>\n * <li>A \"graphic graph\" (a special graph that internally stores the graph under\n * the form of style sets of \"graphic\" elements, suitable to draw the graph, but\n * not to adapted to used it as a general graph),</li>\n * <li>The eventual proxy pipe from which the events come from (but graph events\n * can come from any kind of source),</li>\n * <li>A default view, and eventually more views on the graphic graph.</li>\n * <li>A flag that allows to repaint the view only if the graphic graph changed.\n * <li>\n * </ul>\n * </p>\n * \n * <p>\n * The graphic graph can be created by the viewer or given at construction (to\n * share it with another viewer).\n * </p>\n * \n * <p>\n * <u>Once created, the viewer runs in a loop inside the Swing thread. You\n * cannot call methods on it directly if you are not in this thread</u>. The\n * only operation that you can use in other threads is the constructor, the\n * {@link #addView(View)}, {@link #removeView(String)} and the {@link #close()}\n * methods. Other methods are not protected from concurrent accesses.\n * </p>\n * \n * <p>\n * Some constructors allow a {@link ProxyPipe} as argument. If given, the\n * graphic graph is made listener of this pipe and the pipe is \"pumped\" during\n * the view loop. This allows to run algorithms on a graph in the main thread\n * (or any other thread) while letting the viewer run in the swing thread.\n * </p>\n * \n * <p>\n * Be very careful: due to the nature of graph events in GraphStream, the viewer\n * is not aware of events that occured on the graph <u>before</u> its creation.\n * There is a special mechanism that replay the graph if you use a proxy pipe or\n * if you pass the graph directly. However, when you create the viewer by\n * yourself and only pass a {@link Source}, the viewer <u>will not</u> display\n * the events that occured on the source before it is connected to it.\n * </p>\n */\npublic class Viewer implements ActionListener {\n\n    /**\n     * class level logger\n     */\n    private static final Logger logger = Logger.getLogger(Viewer.class.getName());\n\n\t// Attributes\n\n\t/**\n\t * Name of the default view.\n\t */\n\tpublic static String DEFAULT_VIEW_ID = \"defaultView\";\n\n\t/**\n\t * What to do when a view frame is closed.\n\t */\n\tpublic static enum CloseFramePolicy {\n\t\tCLOSE_VIEWER, HIDE_ONLY, EXIT\n\t};\n\n\t/**\n\t * How does the viewer synchronise its internal graphic graph with the graph\n\t * displayed. The graph we display can be in the Swing thread (as will be\n\t * the viewer, therefore in the same thread as the viewer), in another\n\t * thread, or on a distant machine.\n\t */\n\tpublic enum ThreadingModel {\n        GRAPH_IN_GUI_THREAD, GRAPH_IN_ANOTHER_THREAD, GRAPH_ON_NETWORK\n\t};\n\n\t// Attribute\n\n\t/**\n\t * If true the graph we display is in another thread, the synchronisation\n\t * between the graph and the graphic graph must therefore use thread\n\t * proxies.\n\t */\n\tprotected boolean graphInAnotherThread = true;\n\n\t/**\n\t * The graph observed by the views.\n\t */\n\tprotected GraphicGraph graph;\n\n\t/**\n\t * If we have to pump events by ourself.\n\t */\n\tprotected ProxyPipe pumpPipe;\n\n\t/**\n\t * If we take graph events from a source in this thread.\n\t */\n\tprotected Source sourceInSameThread;\n\n\t/**\n\t * Timer in the Swing thread.\n\t */\n\tprotected Timer timer;\n\n\t/**\n\t * Delay in milliseconds between frames.\n\t */\n\tprotected int delay = 40;\n\n\t/**\n\t * The set of views.\n\t */\n\tprotected final Map<String, View> views = new TreeMap<String, View>();\n\n\t/**\n\t * What to do when a view frame is closed.\n\t */\n\tprotected CloseFramePolicy closeFramePolicy = CloseFramePolicy.EXIT;\n\n\t// Attribute\n\n\t/**\n\t * Optional layout algorithm running in another thread.\n\t */\n\tprotected LayoutRunner optLayout = null;\n\n\t/**\n\t * If there is a layout in another thread, this is the pipe coming from it.\n\t */\n\tprotected ProxyPipe layoutPipeIn = null;\n\n\t// Construction\n\n\t/**\n\t * The graph or source of graph events is in another thread or on another\n\t * machine, but the pipe already exists. The graphic graph displayed by this\n\t * viewer is created.\n\t * \n\t * @param source\n\t *            The source of graph events.\n\t */\n\tpublic Viewer(ProxyPipe source) {\n\t\tgraphInAnotherThread = true;\n\t\tinit(new GraphicGraph(newGGId()), source, (Source) null);\n\t}\n\n\t/**\n\t * We draw a pre-existing graphic graph. The graphic graph is maintained by\n\t * its creator.\n\t * \n\t * @param graph\n\t *            THe graph to draw.\n\t */\n\tpublic Viewer(GraphicGraph graph) {\n\t\tgraphInAnotherThread = false;\n\t\tinit(graph, (ProxyPipe) null, (Source) null);\n\t}\n\n\t/**\n\t * New viewer on an existing graph. The viewer always run in the Swing\n\t * thread, therefore, you must specify how it will take graph events from\n\t * the graph you give. If the graph you give will be accessed only from the\n\t * Swing thread use ThreadingModel.GRAPH_IN_GUI_THREAD. If the graph you\n\t * use is accessed in another thread use\n\t * ThreadingModel.GRAPH_IN_ANOTHER_THREAD. This last scheme is more powerful\n\t * since it allows to run algorithms on the graph in parallel with the\n\t * viewer.\n\t * \n\t * @param graph\n\t *            The graph to render.\n\t * @param threadingModel\n\t *            The threading model.\n\t */\n\tpublic Viewer(Graph graph, ThreadingModel threadingModel) {\n\t\tswitch (threadingModel) {\n\t\tcase GRAPH_IN_GUI_THREAD:\n\t\t\tgraphInAnotherThread = false;\n\t\t\tinit(new GraphicGraph(newGGId()), (ProxyPipe) null, graph);\n\t\t\tenableXYZfeedback(true);\n\t\t\tbreak;\n\t\tcase GRAPH_IN_ANOTHER_THREAD:\n\t\t\tgraphInAnotherThread = true;\n\t\t\t\n\t\t\tThreadProxyPipe tpp = new ThreadProxyPipe();\n\t\t\ttpp.init(graph, true);\n\n\t\t\tinit(new GraphicGraph(newGGId()), tpp, (Source) null);\n\t\t\tenableXYZfeedback(false);\n\t\t\tbreak;\n\t\tcase GRAPH_ON_NETWORK:\n\t\t\tthrow new RuntimeException(\"TO DO, sorry !:-)\");\n\t\t}\n\t}\n\n\t/**\n\t * Create a new unique identifier for a graph.\n\t * \n\t * @return The new identifier.\n\t */\n\tprotected String newGGId() {\n\t\treturn String.format(\"GraphicGraph_%d\", (int) (Math.random() * 10000));\n\t}\n\n\t/**\n\t * Initialise the viewer.\n\t * \n\t * @param graph\n\t *            The graphic graph.\n\t * @param ppipe\n\t *            The source of events from another thread or machine (null if\n\t *            source != null).\n\t * @param source\n\t *            The source of events from this thread (null if ppipe != null).\n\t */\n\tprotected void init(GraphicGraph graph, ProxyPipe ppipe, Source source) {\n\t\tthis.graph = graph;\n\t\tthis.pumpPipe = ppipe;\n\t\tthis.sourceInSameThread = source;\n\t\tthis.timer = new Timer(delay, this);\n\n\t\tassert ((ppipe != null && source == null) || (ppipe == null && source != null));\n\n\t\tif (pumpPipe != null)\n\t\t\tpumpPipe.addSink(graph);\n\t\tif (sourceInSameThread != null) {\n\t\t\tif (source instanceof Graph)\n\t\t\t\treplayGraph((Graph) source);\n\t\t\tsourceInSameThread.addSink(graph);\n\t\t}\n\n\t\ttimer.setCoalesce(true);\n\t\ttimer.setRepeats(true);\n\t\ttimer.start();\n\t}\n\n\t/**\n\t * Close definitively this viewer and all its views.\n\t */\n\tpublic void close() {\n\t\tsynchronized (views) {\n\t\t\tdisableAutoLayout();\n\n\t\t\tfor (View view : views.values())\n\t\t\t\tview.close(graph);\n\n\t\t\ttimer.stop();\n\t\t\ttimer.removeActionListener(this);\n\n\t\t\tif (pumpPipe != null)\n\t\t\t\tpumpPipe.removeSink(graph);\n\t\t\tif (sourceInSameThread != null)\n\t\t\t\tsourceInSameThread.removeSink(graph);\n\n\t\t\tgraph = null;\n\t\t\tpumpPipe = null;\n\t\t\tsourceInSameThread = null;\n\t\t\ttimer = null;\n\t\t}\n\t}\n\n\t// Access\n\n\t/**\n\t * Create a new instance of the default graph renderer. The default graph\n\t * renderer class is given by the \"org.graphstream.ui.renderer\" system\n\t * property. If the class indicated by this property is not usable (not in\n\t * the class path, not of the correct type, etc.) or if the property is not\n\t * present a SwingBasicGraphRenderer is returned.\n\t */\n\tpublic static GraphRenderer newGraphRenderer() {\n\t\tString rendererClassName;\n\n\t\ttry {\n\t\t\trendererClassName = System.getProperty(\"gs.ui.renderer\");\n\n\t\t\tif (rendererClassName != null) {\n                logger.warning(\"\\\"gs.ui.renderer\\\" is deprecated, use \\\"org.graphstream.ui.renderer\\\" instead.\");\n\t\t\t} else {\n\t\t\t\trendererClassName = System.getProperty(\"org.graphstream.ui.renderer\");\n\t\t\t}\n\t\t} catch (AccessControlException e) {\n\t\t\trendererClassName = null;\n\t\t}\n\n\t\tif (rendererClassName == null)\n\t\t\treturn new SwingBasicGraphRenderer();\n\n\t\ttry {\n\t\t\tClass<?> c = Class.forName(rendererClassName);\n\t\t\tObject object = c.newInstance();\n\n\t\t\tif (object instanceof GraphRenderer) {\n\t\t\t\treturn (GraphRenderer) object;\n\t\t\t} else {\n\t\t\t\tlogger.warning(String.format(\"Class '%s' is not a 'GraphRenderer'.\", object));\n\t\t\t}\n\t\t} catch (Exception e) {\n            logger.log(Level.WARNING, \"Cannot create graph renderer.\", e);\n\t\t}\n\n\t\treturn new SwingBasicGraphRenderer();\n\t}\n\n\t/**\n\t * What to do when a frame is closed.\n\t */\n\tpublic CloseFramePolicy getCloseFramePolicy() {\n\t\treturn closeFramePolicy;\n\t}\n\n\t/**\n\t * New proxy pipe on events coming from the viewer through a thread.\n\t * \n\t * @return The new proxy pipe.\n\t */\n\tpublic ProxyPipe newThreadProxyOnGraphicGraph() {\n\t\tThreadProxyPipe tpp = new ThreadProxyPipe();\n\t\ttpp.init(graph);\n\t\treturn tpp;\n\t}\n\n\t/**\n\t * New viewer pipe on the events coming from the viewer through a thread.\n\t * \n\t * @return The new viewer pipe.\n\t */\n\tpublic ViewerPipe newViewerPipe() {\n\t\tThreadProxyPipe tpp = new ThreadProxyPipe();\n\t\ttpp.init(graph, false);\n\n\t\tenableXYZfeedback(true);\n\n\t\treturn new ViewerPipe(String.format(\"viewer_%d\",\n\t\t\t\t(int) (Math.random() * 10000)), tpp);\n\t}\n\n\t/**\n\t * The underlying graphic graph. Caution : Use the returned graph only in\n\t * the Swing thread !!\n\t */\n\tpublic GraphicGraph getGraphicGraph() {\n\t\treturn graph;\n\t}\n\n\t/**\n\t * The view that correspond to the given identifier.\n\t * \n\t * @param id\n\t *            The view identifier.\n\t * @return A view or null if not found.\n\t */\n\tpublic View getView(String id) {\n\t\tsynchronized (views) {\n\t\t\treturn views.get(id);\n\t\t}\n\t}\n\n\t/**\n\t * The default view. This is a shortcut to a call to\n\t * {@link #getView(String)} with {@link #DEFAULT_VIEW_ID} as parameter.\n\t * \n\t * @return The default view or null if no default view has been installed.\n\t */\n\tpublic ViewPanel getDefaultView() {\n\t\treturn (DefaultView) getView(DEFAULT_VIEW_ID);\n\t}\n\n\t// Command\n\n\t/**\n\t * Build the default graph view and insert it. The view identifier is\n\t * {@link #DEFAULT_VIEW_ID}. You can request the view to be open in its own\n\t * frame.\n\t * \n\t * @param openInAFrame\n\t *            It true, the view is placed in a frame, else the view is only\n\t *            created and you must embed it yourself in your application.\n\t */\n\tpublic ViewPanel addDefaultView(boolean openInAFrame) {\n\t\tsynchronized (views) {\n            DefaultView view = new DefaultView(this, DEFAULT_VIEW_ID,\n\t\t\t\t\tnewGraphRenderer());\n\t\t\taddView(view);\n\n\t\t\tif (openInAFrame)\n\t\t\t\tview.openInAFrame(true);\n\n\t\t\treturn view;\n\t\t}\n\t}\n\n\t/**\n\t * Add a view using its identifier. If there was already a view with this\n\t * identifier, it is closed and returned (if different of the one added).\n\t * \n\t * @param view\n\t *            The view to add.\n\t * @return The old view that was at the given identifier, if any, else null.\n\t */\n\tpublic View addView(View view) {\n\t\tsynchronized (views) {\n\t\t\tView old = views.put(view.getId(), view);\n\n\t\t\tif (old != null && old != view)\n\t\t\t\told.close(graph);\n\n\t\t\treturn old;\n\t\t}\n\t}\n\n\t/**\n\t * Add a new default view with a specific renderer. If a view with the same\n\t * id exists, it is removed and closed. By default the view is open in a\n\t * frame.\n\t * \n\t * @param id\n\t *            The new view identifier.\n\t * @param renderer\n\t *            The renderer to use.\n\t * @return The created view.\n\t */\n\tpublic ViewPanel addView(String id, GraphRenderer renderer) {\n\t\treturn addView(id, renderer, true);\n\t}\n\n\t/**\n\t * Same as {@link #addView(String, GraphRenderer)} but allows to specify\n\t * that the view uses a frame or not.\n\t * \n\t * @param id\n\t *            The new view identifier.\n\t * @param renderer\n\t *            The renderer to use.\n\t * @param openInAFrame\n\t *            If true the view is open in a frame, else the returned view is\n\t *            a JPanel that can be inserted in a GUI.\n\t * @return The created view.\n\t */\n\tpublic ViewPanel addView(String id, GraphRenderer renderer, boolean openInAFrame) {\n\t\tsynchronized (views) {\n            DefaultView view = new DefaultView(this, id, renderer);\n\t\t\taddView(view);\n\n\t\t\tif (openInAFrame)\n\t\t\t\tview.openInAFrame(true);\n\n\t\t\treturn view;\n\t\t}\n\t}\n\n\t/**\n\t * Remove a view. The view is not closed.\n\t * \n\t * @param id\n\t *            The view identifier.\n\t */\n\tpublic void removeView(String id) {\n\t\tsynchronized (views) {\n\t\t\tviews.remove(id);\n\t\t}\n\t}\n\n\t/**\n\t * Called on a regular basis by the timer. Checks if some events occurred\n\t * from the graph pipe or from the layout pipe, and if the graph changed,\n\t * triggers a repaint. Never call this method, it is called by a Swing Timer\n\t * automatically.\n\t */\n\tpublic void actionPerformed(ActionEvent e) {\n\t\tsynchronized (views) {\n\t\t\t// long t1=System.currentTimeMillis();\n\t\t\t// long gsize1=graph.getNodeCount();\n\t\t\tif (pumpPipe != null)\n\t\t\t\tpumpPipe.pump();\n\t\t\t// long gsize2=graph.getNodeCount();\n\t\t\t// long t2=System.currentTimeMillis();\n\n\t\t\tif (layoutPipeIn != null)\n\t\t\t\tlayoutPipeIn.pump();\n\t\t\t// long t3=System.currentTimeMillis();\n\n\t\t\tboolean changed = graph.graphChangedFlag();\n\n\t\t\tif (changed) {\n\t\t\t\tcomputeGraphMetrics();\n\t\t\t\t// long t4=System.currentTimeMillis();\n\n\t\t\t\tfor (View view : views.values())\n\t\t\t\t\tview.display(graph, changed);\n\t\t\t}\n\t\t\t// long t5=System.currentTimeMillis();\n\n\t\t\tgraph.resetGraphChangedFlag();\n\n\t\t\t// System.err.printf(\"display pump=%f  layoutPump=%f  metrics=%f  display=%f (size delta=%d  size1=%d size2=%d)%n\",\n\t\t\t// (t2-t1)/1000.0, (t3-t2)/1000.0, (t4-t3)/1000.0, (t5-t4)/1000.0,\n\t\t\t// (gsize2-gsize1), gsize1, gsize2);\n\t\t}\n\t}\n\n\t/**\n\t * Compute the overall bounds of the graphic graph according to the nodes\n\t * and sprites positions. We can only compute the graph bounds from the\n\t * nodes and sprites centres since the node and graph bounds may in certain\n\t * circumstances be computed according to the graph bounds. The bounds are\n\t * stored in the graph metrics.\n\t */\n\tprotected void computeGraphMetrics() {\n\t\tgraph.computeBounds();\n\n\t\tsynchronized (views) {\n\t\t\tPoint3 lo = graph.getMinPos();\n            Point3 hi = graph.getMaxPos();\n\t\t\tfor (final View view : views.values()) {\n                Camera camera = view.getCamera();\n                if (camera != null) {\n                    camera.setBounds(lo.x, lo.y, lo.z, hi.x, hi.y, hi.z);\n                }\n            }\n\t\t}\n\t}\n\n\t/**\n\t * What to do when the frame containing one or more views is closed.\n\t * \n\t * @param policy\n\t *            The close frame policy.\n\t */\n\tpublic void setCloseFramePolicy(CloseFramePolicy policy) {\n\t\tsynchronized (views) {\n\t\t\tcloseFramePolicy = policy;\n\t\t}\n\t}\n\n\t// Optional layout algorithm\n\n\t/**\n\t * Enable or disable the \"xyz\" attribute change when a node is moved in the\n\t * views. By default the \"xyz\" attribute is changed.\n\t * \n\t * By default, each time a node of the graphic graph is moved, its \"xyz\"\n\t * attribute is reset to follow the node position. This is useful only if\n\t * someone listen at the graphic graph or use the graphic graph directly.\n\t * But this operation is quite costly. Therefore by default if this viewer\n\t * runs in its own thread, and the main graph is in another thread, xyz\n\t * attribute change will be disabled until a listener is added.\n\t * \n\t * When the viewer is created to be used only in the swing thread, this\n\t * feature is always on.\n\t */\n\tpublic void enableXYZfeedback(boolean on) {\n\t\tsynchronized (views) {\n\t\t\tgraph.feedbackXYZ(on);\n\t\t}\n\t}\n\n\t/**\n\t * Launch an automatic layout process that will position nodes in the\n\t * background.\n\t */\n\tpublic void enableAutoLayout() {\n\t\tenableAutoLayout(Layouts.newLayoutAlgorithm());\n\t}\n\n\t/**\n\t * Launch an automatic layout process that will position nodes in the\n\t * background.\n\t * \n\t * @param layoutAlgorithm\n\t *            The algorithm to use (see Layouts.newLayoutAlgorithm() for the\n\t *            default algorithm).\n\t */\n\tpublic void enableAutoLayout(Layout layoutAlgorithm) {\n\t\tsynchronized (views) {\n\t\t\tif (optLayout == null) {\n\t\t\t\t// optLayout = new LayoutRunner(graph, layoutAlgorithm, true,\n\t\t\t\t// true);\n\t\t\t\toptLayout = new LayoutRunner(graph, layoutAlgorithm, true,\n\t\t\t\t\t\tfalse);\n\t\t\t\tgraph.replay();\n\t\t\t\tlayoutPipeIn = optLayout.newLayoutPipe();\n\t\t\t\tlayoutPipeIn.addAttributeSink(graph);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Disable the running automatic layout process, if any.\n\t */\n\tpublic void disableAutoLayout() {\n\t\tsynchronized (views) {\n\t\t\tif (optLayout != null) {\n\t\t\t\t((ThreadProxyPipe) layoutPipeIn).unregisterFromSource();\n\t\t\t\tlayoutPipeIn.removeSink(graph);\n\t\t\t\tlayoutPipeIn = null;\n\t\t\t\toptLayout.release();\n\t\t\t\toptLayout = null;\n\t\t\t}\n\t\t}\n\t}\n\n\t/** Dirty replay of the graph. */\n\tprotected void replayGraph(Graph graph) {\n\t\t// Replay all graph attributes.\n\n\t\tif (graph.getAttributeKeySet() != null)\n\t\t\tfor (String key : graph.getAttributeKeySet()) {\n\t\t\t\tthis.graph.addAttribute(key, graph.getAttribute(key));\n\t\t\t}\n\n\t\t// Replay all nodes and their attributes.\n\n\t\tfor (Node node : graph) {\n\t\t\tNode n = this.graph.addNode(node.getId());\n\n\t\t\tif (node.getAttributeKeySet() != null) {\n\t\t\t\tfor (String key : node.getAttributeKeySet()) {\n\t\t\t\t\tn.addAttribute(key, node.getAttribute(key));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Replay all edges and their attributes.\n\n\t\tfor (Edge edge : graph.getEachEdge()) {\n\t\t\tEdge e = this.graph.addEdge(edge.getId(), edge.getSourceNode()\n\t\t\t\t\t.getId(), edge.getTargetNode().getId(), edge.isDirected());\n\n\t\t\tif (edge.getAttributeKeySet() != null) {\n\t\t\t\tfor (String key : edge.getAttributeKeySet()) {\n\t\t\t\t\te.addAttribute(key, edge.getAttribute(key));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}",
        "tokensGeneralGrammar": [
            "null",
            "true",
            "false",
            ",",
            ".",
            ":",
            ";",
            "?",
            "(",
            ")",
            "jdVar",
            "stream",
            "Arrays",
            "allMatch",
            "noneMatch",
            "anyMatch",
            "~",
            ">>",
            "<<",
            ">>>",
            "|",
            "&",
            "^",
            "+",
            "-",
            "/",
            "*",
            "%",
            "&&",
            "||",
            ">=",
            "<=",
            ">",
            "<",
            "==",
            "!=",
            "instanceof",
            "class",
            "methodResultID",
            "this"
        ],
        "tokensGeneralValuesGlobalDictionary": [
            [
                "0",
                "int"
            ],
            [
                "1",
                "int"
            ],
            [
                "-1",
                "int"
            ],
            [
                "0.0",
                "double"
            ],
            [
                "1.0",
                "double"
            ],
            [
                "-1.0",
                "double"
            ],
            [
                "\"\"",
                "String"
            ],
            [
                "\" \"",
                "String"
            ]
        ],
        "tokensProjectClasses": [
            [
                "DefaultCamera",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "GradientFactory",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "GraphMetrics",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "Graphics2DOutput",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "ImageCache",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "StrokeFactory",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "FontCache",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "FontSlot",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "DefaultView",
                "org.graphstream.ui.swingViewer"
            ],
            [
                "SpriteRenderer",
                "org.graphstream.ui.swingViewer.basicRenderer"
            ],
            [
                "ElementRenderer",
                "org.graphstream.ui.swingViewer.basicRenderer"
            ],
            [
                "NodeRenderer",
                "org.graphstream.ui.swingViewer.basicRenderer"
            ],
            [
                "Arrow",
                "org.graphstream.ui.swingViewer.basicRenderer.shapes"
            ],
            [
                "Shape",
                "org.graphstream.ui.swingViewer.basicRenderer.shapes"
            ],
            [
                "EdgeRenderer",
                "org.graphstream.ui.swingViewer.basicRenderer"
            ],
            [
                "SwingBasicGraphRenderer",
                "org.graphstream.ui.swingViewer.basicRenderer"
            ],
            [
                "GraphRendererBase",
                "org.graphstream.ui.swingViewer"
            ],
            [
                "GraphRenderer",
                "org.graphstream.ui.swingViewer"
            ],
            [
                "LayerRenderer",
                "org.graphstream.ui.swingViewer"
            ],
            [
                "ViewPanel",
                "org.graphstream.ui.swingViewer"
            ],
            [
                "Layouts",
                "org.graphstream.ui.layout"
            ],
            [
                "Layout",
                "org.graphstream.ui.layout"
            ],
            [
                "LayoutRunner",
                "org.graphstream.ui.layout"
            ],
            [
                "NodeParticle",
                "org.graphstream.ui.layout.springbox"
            ],
            [
                "GraphCellData",
                "org.graphstream.ui.layout.springbox"
            ],
            [
                "EdgeSpring",
                "org.graphstream.ui.layout.springbox"
            ],
            [
                "Energies",
                "org.graphstream.ui.layout.springbox"
            ],
            [
                "BarnesHutLayout",
                "org.graphstream.ui.layout.springbox"
            ],
            [
                "LinLog",
                "org.graphstream.ui.layout.springbox.implementations"
            ],
            [
                "LinLogNodeParticle",
                "org.graphstream.ui.layout.springbox.implementations"
            ],
            [
                "SpringBoxNodeParticle",
                "org.graphstream.ui.layout.springbox.implementations"
            ],
            [
                "SpringBox",
                "org.graphstream.ui.layout.springbox.implementations"
            ],
            [
                "Point2",
                "org.graphstream.ui.geom"
            ],
            [
                "Vector2",
                "org.graphstream.ui.geom"
            ],
            [
                "Vector3",
                "org.graphstream.ui.geom"
            ],
            [
                "Point3",
                "org.graphstream.ui.geom"
            ],
            [
                "ViewerListener",
                "org.graphstream.ui.view"
            ],
            [
                "MouseManager",
                "org.graphstream.ui.view.util"
            ],
            [
                "ShortcutManager",
                "org.graphstream.ui.view.util"
            ],
            [
                "DefaultShortcutManager",
                "org.graphstream.ui.view.util"
            ],
            [
                "FpsCounter",
                "org.graphstream.ui.view.util"
            ],
            [
                "CubicCurve",
                "org.graphstream.ui.view.util"
            ],
            [
                "DefaultMouseManager",
                "org.graphstream.ui.view.util"
            ],
            [
                "Selection",
                "org.graphstream.ui.view"
            ],
            [
                "ViewerPipe",
                "org.graphstream.ui.view"
            ],
            [
                "Viewer",
                "org.graphstream.ui.view"
            ],
            [
                "View",
                "org.graphstream.ui.view"
            ],
            [
                "Camera",
                "org.graphstream.ui.view"
            ],
            [
                "Sprite",
                "org.graphstream.ui.spriteManager"
            ],
            [
                "InvalidSpriteIDException",
                "org.graphstream.ui.spriteManager"
            ],
            [
                "SpriteManager",
                "org.graphstream.ui.spriteManager"
            ],
            [
                "SpriteFactory",
                "org.graphstream.ui.spriteManager"
            ],
            [
                "StyleGroupListener",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "Colors",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "Values",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "StyleSheetListener",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "StyleSheetParserTokenManager",
                "org.graphstream.ui.graphicGraph.stylesheet.parser"
            ],
            [
                "StyleSheetParserConstants",
                "org.graphstream.ui.graphicGraph.stylesheet.parser"
            ],
            [
                "StyleSheetParser",
                "org.graphstream.ui.graphicGraph.stylesheet.parser"
            ],
            [
                "Style",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "StyleSheet",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "StyleConstants",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "Selector",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "Value",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "Rule",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "GraphicNode",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "StyleGroup",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphPosLengthUtils",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphicEdge",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphicElementChangeListener",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphicGraph",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "StyleGroupSet",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphicSprite",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphicElement",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "VerboseSink",
                "org.graphstream.util"
            ],
            [
                "GraphListeners",
                "org.graphstream.util"
            ],
            [
                "Environment",
                "org.graphstream.util"
            ],
            [
                "GraphDiff",
                "org.graphstream.util"
            ],
            [
                "Filters",
                "org.graphstream.util"
            ],
            [
                "FilteredEdgeIterator",
                "org.graphstream.util"
            ],
            [
                "Parser",
                "org.graphstream.util.parser"
            ],
            [
                "ParserFactory",
                "org.graphstream.util.parser"
            ],
            [
                "TokenMgrError",
                "org.graphstream.util.parser"
            ],
            [
                "ParseException",
                "org.graphstream.util.parser"
            ],
            [
                "SimpleCharStream",
                "org.graphstream.util.parser"
            ],
            [
                "Token",
                "org.graphstream.util.parser"
            ],
            [
                "ISODateIO",
                "org.graphstream.util.time"
            ],
            [
                "ISODateComponent",
                "org.graphstream.util.time"
            ],
            [
                "FilteredNodeIterator",
                "org.graphstream.util"
            ],
            [
                "FixedArrayList",
                "org.graphstream.util.set"
            ],
            [
                "StepCounter",
                "org.graphstream.util"
            ],
            [
                "GraphSpells",
                "org.graphstream.util.cumulative"
            ],
            [
                "CumulativeAttributes",
                "org.graphstream.util.cumulative"
            ],
            [
                "CumulativeSpells",
                "org.graphstream.util.cumulative"
            ],
            [
                "Filter",
                "org.graphstream.util"
            ],
            [
                "PipeAdapter",
                "org.graphstream.stream"
            ],
            [
                "GraphParseException",
                "org.graphstream.stream"
            ],
            [
                "ElementSink",
                "org.graphstream.stream"
            ],
            [
                "URLSource",
                "org.graphstream.stream.net"
            ],
            [
                "HTTPSource",
                "org.graphstream.stream.net"
            ],
            [
                "SourceAdapter",
                "org.graphstream.stream"
            ],
            [
                "AttributeSink",
                "org.graphstream.stream"
            ],
            [
                "GMLParserConstants",
                "org.graphstream.stream.file.gml"
            ],
            [
                "GMLParserTokenManager",
                "org.graphstream.stream.file.gml"
            ],
            [
                "GMLContext",
                "org.graphstream.stream.file.gml"
            ],
            [
                "Graphics",
                "org.graphstream.stream.file.gml"
            ],
            [
                "KeyValues",
                "org.graphstream.stream.file.gml"
            ],
            [
                "GMLParser",
                "org.graphstream.stream.file.gml"
            ],
            [
                "FileSinkGraphML",
                "org.graphstream.stream.file"
            ],
            [
                "TLPParserConstants",
                "org.graphstream.stream.file.tlp"
            ],
            [
                "TLPParser",
                "org.graphstream.stream.file.tlp"
            ],
            [
                "TLPParserTokenManager",
                "org.graphstream.stream.file.tlp"
            ],
            [
                "FileSinkFactory",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceEdge",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkBase",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkTikZ",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceGEXF",
                "org.graphstream.stream.file"
            ],
            [
                "DOTParser",
                "org.graphstream.stream.file.dot"
            ],
            [
                "DOTParserConstants",
                "org.graphstream.stream.file.dot"
            ],
            [
                "DOTParserTokenManager",
                "org.graphstream.stream.file.dot"
            ],
            [
                "FileSink",
                "org.graphstream.stream.file"
            ],
            [
                "PajekContext",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "Graphics",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "NodeGraphics",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "EdgeGraphics",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "EdgeMatrix",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "PajekParserTokenManager",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "PajekParserConstants",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "FileSourceXML",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkBaseFiltered",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkDOT",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceParser",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkDGSFiltered",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceDOT",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceDGS1And2",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceGraphML",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceFactory",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkImages",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkDynamicGML",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkSVG",
                "org.graphstream.stream.file"
            ],
            [
                "GEXFSpell",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "SmartXMLWriter",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFElement",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFEdges",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFAttValues",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFEdge",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFSpells",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFAttValue",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFNodes",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFNode",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFMeta",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFAttributes",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXF",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFGraph",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFAttribute",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "OldFileSourceDGS",
                "org.graphstream.stream.file.dgs"
            ],
            [
                "DGSParser",
                "org.graphstream.stream.file.dgs"
            ],
            [
                "FileSourceBase",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkGML",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceDGS",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkDGSUtility",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceTLP",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkSVG2",
                "org.graphstream.stream.file"
            ],
            [
                "FileSource",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceNCol",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourcePajek",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceGPX",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceLGL",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkGEXF2",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceGML",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkGEXF",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkDGS",
                "org.graphstream.stream.file"
            ],
            [
                "ProxyPipe",
                "org.graphstream.stream"
            ],
            [
                "Sink",
                "org.graphstream.stream"
            ],
            [
                "Timeline",
                "org.graphstream.stream"
            ],
            [
                "Pipe",
                "org.graphstream.stream"
            ],
            [
                "SinkAdapter",
                "org.graphstream.stream"
            ],
            [
                "Replayable",
                "org.graphstream.stream"
            ],
            [
                "Source",
                "org.graphstream.stream"
            ],
            [
                "AnnotatedSink",
                "org.graphstream.stream"
            ],
            [
                "GraphReplay",
                "org.graphstream.stream"
            ],
            [
                "AttributePipe",
                "org.graphstream.stream"
            ],
            [
                "SinkTime",
                "org.graphstream.stream.sync"
            ],
            [
                "SourceTime",
                "org.graphstream.stream.sync"
            ],
            [
                "PipeBase",
                "org.graphstream.stream"
            ],
            [
                "ThreadProxyPipe",
                "org.graphstream.stream.thread"
            ],
            [
                "ThreadProxyPipeOld",
                "org.graphstream.stream.thread"
            ],
            [
                "RMISource",
                "org.graphstream.stream.rmi"
            ],
            [
                "RMIAdapterOut",
                "org.graphstream.stream.rmi"
            ],
            [
                "RMISink",
                "org.graphstream.stream.rmi"
            ],
            [
                "RMIAdapterIn",
                "org.graphstream.stream.rmi"
            ],
            [
                "SourceBase",
                "org.graphstream.stream"
            ],
            [
                "NetStreamDecoder",
                "org.graphstream.stream.netstream"
            ],
            [
                "NetStreamReceiver",
                "org.graphstream.stream.netstream"
            ],
            [
                "NetStreamConstants",
                "org.graphstream.stream.netstream"
            ],
            [
                "NetStreamSender",
                "org.graphstream.stream.netstream"
            ],
            [
                "DefaultNetStreamDecoder",
                "org.graphstream.stream.netstream"
            ],
            [
                "Base64",
                "org.graphstream.stream.netstream.packing"
            ],
            [
                "NetStreamUnpacker",
                "org.graphstream.stream.netstream.packing"
            ],
            [
                "Base64Packer",
                "org.graphstream.stream.netstream.packing"
            ],
            [
                "Base64Unpacker",
                "org.graphstream.stream.netstream.packing"
            ],
            [
                "NetStreamPacker",
                "org.graphstream.stream.netstream.packing"
            ],
            [
                "AttributePredicate",
                "org.graphstream.stream"
            ],
            [
                "Element",
                "org.graphstream.graph"
            ],
            [
                "Node",
                "org.graphstream.graph"
            ],
            [
                "BreadthFirstIterator",
                "org.graphstream.graph"
            ],
            [
                "Graph",
                "org.graphstream.graph"
            ],
            [
                "EdgeRejectedException",
                "org.graphstream.graph"
            ],
            [
                "CompoundAttribute",
                "org.graphstream.graph"
            ],
            [
                "Structure",
                "org.graphstream.graph"
            ],
            [
                "DepthFirstIterator",
                "org.graphstream.graph"
            ],
            [
                "NullAttributeException",
                "org.graphstream.graph"
            ],
            [
                "IdAlreadyInUseException",
                "org.graphstream.graph"
            ],
            [
                "EdgeFactory",
                "org.graphstream.graph"
            ],
            [
                "ElementNotFoundException",
                "org.graphstream.graph"
            ],
            [
                "OneAttributeElement",
                "org.graphstream.graph.implementations"
            ],
            [
                "AdjacencyListNode",
                "org.graphstream.graph.implementations"
            ],
            [
                "SingleNode",
                "org.graphstream.graph.implementations"
            ],
            [
                "AbstractElement",
                "org.graphstream.graph.implementations"
            ],
            [
                "AdjacencyListGraph",
                "org.graphstream.graph.implementations"
            ],
            [
                "AbstractNode",
                "org.graphstream.graph.implementations"
            ],
            [
                "DefaultGraph",
                "org.graphstream.graph.implementations"
            ],
            [
                "MultiGraph",
                "org.graphstream.graph.implementations"
            ],
            [
                "Graphs",
                "org.graphstream.graph.implementations"
            ],
            [
                "SingleGraph",
                "org.graphstream.graph.implementations"
            ],
            [
                "MultiNode",
                "org.graphstream.graph.implementations"
            ],
            [
                "AbstractGraph",
                "org.graphstream.graph.implementations"
            ],
            [
                "AbstractEdge",
                "org.graphstream.graph.implementations"
            ],
            [
                "GraphFactory",
                "org.graphstream.graph"
            ],
            [
                "NodeFactory",
                "org.graphstream.graph"
            ],
            [
                "Edge",
                "org.graphstream.graph"
            ],
            [
                "Path",
                "org.graphstream.graph"
            ]
        ],
        "tokensProjectClassesNonPrivateStaticNonVoidMethods": [
            [
                "gradientInArea",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "/**\n * Generate a gradient in the given pixel area following the given style.\n * This produces a gradient only if the style fill-mode is compatible.\n *\n * @param x0\n *            The left corner of the area.\n * @param y0\n *            The bottom corner of the area.\n * @param width\n *            The area width.\n * @param height\n *            The area height.\n * @param style\n *            The style.\n * @return A gradient paint or null if the style does not specify a\n *         gradient.\n */\npublic static Paint gradientInArea(int x0, int y0, int width, int height, Style style) {\n    switch(style.getFillMode()) {\n        case GRADIENT_VERTICAL:\n            return linearGradientFromStyle(x0, y0, x0, y0 + height, style);\n        case GRADIENT_HORIZONTAL:\n            return linearGradientFromStyle(x0, y0, x0 + width, y0, style);\n        case GRADIENT_DIAGONAL1:\n            return linearGradientFromStyle(x0, y0, x0 + width, y0 + height, style);\n        case GRADIENT_DIAGONAL2:\n            return linearGradientFromStyle(x0 + width, y0, x0, y0 + height, style);\n        case GRADIENT_RADIAL:\n            return radialGradientFromStyle(x0 + (width / 2), y0 + (height / 2), width > height ? width / 2 : height / 2, style);\n        default:\n            return null;\n    }\n}"
            ],
            [
                "linearGradientFromStyle",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "/**\n * Generate a linear gradient between two given points corresponding to the\n * given style.\n *\n * @param x0\n *            The start point abscissa.\n * @param y0\n *            The start point ordinate.\n * @param x1\n *            The end point abscissa.\n * @param y1\n *            The end point ordinate.\n * @param style\n *            The style.\n * @return A paint for the gradient or null if the style specifies no\n *         gradient (the fill mode is not a linear gradient or there is only\n *         one fill colour).\n */\npublic static Paint linearGradientFromStyle(float x0, float y0, float x1, float y1, Style style) {\n    Paint paint = null;\n    if (style.getFillColorCount() > 1) {\n        switch(style.getFillMode()) {\n            case GRADIENT_DIAGONAL1:\n            case GRADIENT_DIAGONAL2:\n            case GRADIENT_HORIZONTAL:\n            case GRADIENT_VERTICAL:\n                if (version16)\n                    paint = new LinearGradientPaint(x0, y0, x1, y1, createFractions(style), createColors(style));\n                else\n                    paint = new GradientPaint(x0, y0, style.getFillColor(0), x1, y1, style.getFillColor(1));\n                break;\n            default:\n                break;\n        }\n    }\n    return paint;\n}"
            ],
            [
                "radialGradientFromStyle",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static Paint radialGradientFromStyle(float cx, float cy, float radius, Style style) {\n    return radialGradientFromStyle(cx, cy, radius, cx, cy, style);\n}"
            ],
            [
                "radialGradientFromStyle",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "/**\n * Generate a radial gradient between whose center is at (cx,cy) with the\n * given radius. The focus (fx,fy) is the start position of the gradient in\n * the circle.\n *\n * @param cx\n *            The center point abscissa.\n * @param cy\n *            The center point ordinate.\n * @param fx\n *            The start point abscissa.\n * @param fy\n *            The start point ordinate.\n * @param radius\n *            The gradient radius.\n * @param style\n *            The style.\n * @return A paint for the gradient or null if the style specifies no\n *         gradient (the fill mode is not a radial gradient or there is only\n *         one fill colour).\n */\npublic static Paint radialGradientFromStyle(float cx, float cy, float radius, float fx, float fy, Style style) {\n    Paint paint = null;\n    if (version16) {\n        if (style.getFillColorCount() > 1 && style.getFillMode() == FillMode.GRADIENT_RADIAL) {\n            float[] fractions = createFractions(style);\n            Color[] colors = createColors(style);\n            paint = new RadialGradientPaint(cx, cy, radius, fx, fy, fractions, colors, MultipleGradientPaint.CycleMethod.REFLECT);\n        }\n    }\n    return paint;\n}"
            ],
            [
                "createFractions",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "protected static float[] createFractions(Style style) {\n    int n = style.getFillColorCount();\n    if (n < predefFractions.length)\n        return predefFractions[n];\n    float[] fractions = new float[n];\n    float div = 1f / (n - 1);\n    for (int i = 1; i < (n - 1); i++) fractions[i] = div * i;\n    fractions[0] = 0f;\n    fractions[n - 1] = 1f;\n    return fractions;\n}"
            ],
            [
                "createColors",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "protected static Color[] createColors(Style style) {\n    int n = style.getFillColorCount();\n    Color[] colors = new Color[n];\n    for (int i = 0; i < n; i++) colors[i] = style.getFillColor(i);\n    return colors;\n}"
            ],
            [
                "defaultImageCache",
                "org.graphstream.ui.swingViewer.util",
                "ImageCache",
                "/**\n * Default singleton image cache instance that can be shared. This method\n * and singleton must be used only in the Swing thread.\n *\n * @return The default singleton image cache instance.\n */\npublic static ImageCache defaultImageCache() {\n    if (defaultImageCache == null)\n        defaultImageCache = new ImageCache();\n    return defaultImageCache;\n}"
            ],
            [
                "generateStroke",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "/**\n * Generate a stroke of the appropriate width and style according to the\n * given style and metrics.\n *\n * @param style\n *            The style to use.\n * @param metrics\n *            The metrics to use.\n * @return The stroke or null if the style specifies a \"none\" stroke mode.\n */\npublic static Stroke generateStroke(Style style, GraphMetrics metrics) {\n    if (style.getStrokeWidth().value == 0)\n        return null;\n    switch(style.getStrokeMode()) {\n        case PLAIN:\n            return generatePlainStroke(style, metrics);\n        case DOTS:\n            return generateDotsStroke(style, metrics);\n        case DASHES:\n            return generateDashesStroke(style, metrics);\n        default:\n        case NONE:\n            return null;\n    }\n}"
            ],
            [
                "generatePlainStroke",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "protected static Stroke generatePlainStroke(Style style, GraphMetrics metrics) {\n    float width = (float) metrics.lengthToGu(style.getStrokeWidth());\n    /*\n\t\t * if( width == 1f ) return plainLine1px; // XXX Not a good optimisation\n\t\t * else if( width == 2f ) return plainLine2px; // We draw the whole\n\t\t * graph in GU else if( width == 3f ) return plainLine3px; // In graph\n\t\t * units the width is never exactly 1,2, 5 ... else if( width == 5f )\n\t\t * return plainLine5px; else if( width == 10f ) return plainLine10px;\n\t\t * else\n\t\t */\n    {\n        return new BasicStroke(width);\n    }\n}"
            ],
            [
                "generateDotsStroke",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "protected static Stroke generateDotsStroke(Style style, GraphMetrics metrics) {\n    float width = (float) metrics.lengthToGu(style.getStrokeWidth());\n    /*\n\t\t * if( width == 1f ) return dotsLine1px; else if( width == 2f ) return\n\t\t * dotsLine2px; else if( width == 3f ) return dotsLine3px; else if(\n\t\t * width == 5f ) return dotsLine5px; else if( width == 10f ) return\n\t\t * dotsLine10px; else\n\t\t */\n    {\n        dots[0] = (float) metrics.lengthToGu(1f, Units.PX);\n        dots[1] = dots[0];\n        return new BasicStroke(width, BasicStroke.CAP_BUTT, BasicStroke.JOIN_MITER, 1f, dots, 0);\n    }\n}"
            ],
            [
                "generateDashesStroke",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "protected static Stroke generateDashesStroke(Style style, GraphMetrics metrics) {\n    float width = (float) metrics.lengthToGu(style.getStrokeWidth());\n    /*\n\t\t * if( width == 1f ) return dashesLine1px; else if( width == 2f ) return\n\t\t * dashesLine2px; else if( width == 3f ) return dashesLine3px; else if(\n\t\t * width == 5f ) return dashesLine5px; else if( width == 10f ) return\n\t\t * dashesLine10px; else\n\t\t */\n    {\n        dashes[0] = (float) metrics.lengthToGu(3f, Units.PX);\n        dashes[1] = dashes[0];\n        return new BasicStroke(width, BasicStroke.CAP_BUTT, BasicStroke.JOIN_MITER, 1f, dashes, 0);\n    }\n}"
            ],
            [
                "defaultFontCache",
                "org.graphstream.ui.swingViewer.util",
                "FontCache",
                "/**\n * Default singleton instance for shared font cache. This method and cache\n * can only be used in the Swing thread.\n *\n * @return The default singleton font cache instance.\n */\npublic static FontCache defaultFontCache() {\n    if (defaultFontCache == null)\n        defaultFontCache = new FontCache();\n    return defaultFontCache;\n}"
            ],
            [
                "newLayoutAlgorithm",
                "org.graphstream.ui.layout",
                "Layouts",
                "/**\n * Creates a layout according to the \"org.graphstream.ui.layout\" system property.\n *\n * @return The new layout or the default GraphStream \"Spring-Box\" layout if\n *         the \"gs.ui.layout\" system property is either not set or contains\n *         a class that cannot be found.\n */\npublic static Layout newLayoutAlgorithm() {\n    String layoutClassName;\n    try {\n        layoutClassName = System.getProperty(\"gs.ui.layout\");\n        if (layoutClassName != null) {\n            logger.log(Level.WARNING, \"\\\"gs.ui.layout\\\" is deprecated, use \\\"org.graphstream.ui.layout\\\" instead.\");\n        } else {\n            layoutClassName = System.getProperty(\"org.graphstream.ui.layout\");\n        }\n    } catch (AccessControlException e) {\n        layoutClassName = null;\n    }\n    if (layoutClassName != null) {\n        try {\n            Class<?> c = Class.forName(layoutClassName);\n            Object object = c.newInstance();\n            if (object instanceof Layout) {\n                return (Layout) object;\n            } else {\n                logger.warning(String.format(\"class '%s' is not a 'GraphRenderer'%n\", object));\n            }\n        } catch (Exception e) {\n            logger.log(Level.WARNING, \"Cannot create layout.\", e);\n        }\n    }\n    return new org.graphstream.ui.layout.springbox.implementations.SpringBox(false);\n}"
            ],
            [
                "eval",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * Evaluate a cubic B\u00e9zier curve according to control points `x0`, `x1`,\n * `x2` and `x3` and return the position at parametric position `t` of the\n * curve.\n *\n * @return The coordinate at parametric position `t` on the curve.\n */\npublic static double eval(double x0, double x1, double x2, double x3, double t) {\n    double tt = (1f - t);\n    return x0 * (tt * tt * tt) + 3f * x1 * t * (tt * tt) + 3f * x2 * (t * t) * tt + x3 * (t * t * t);\n}"
            ],
            [
                "eval",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * Evaluate a cubic B\u00e9zier curve according to control points `p0`, `p1`,\n * `p2` and `p3` and return the position at parametric position `t` of the\n * curve.\n *\n * @return The point at parametric position `t` on the curve.\n */\npublic static Point2 eval(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t) {\n    return new Point2(eval(p0.x, p1.x, p2.x, p3.x, t), eval(p0.y, p1.y, p2.y, p3.y, t));\n}"
            ],
            [
                "eval",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * Evaluate a cubic B\u00e9zier curve according to control points `p0`, `p1`,\n * `p2` and `p3` and return the position at parametric position `t` of the\n * curve.\n *\n * @return The point at parametric position `t` on the curve.\n */\npublic static Point2D.Double eval(Point2D.Double p0, Point2D.Double p1, Point2D.Double p2, Point2D.Double p3, double t) {\n    return new Point2D.Double(eval(p0.x, p1.x, p2.x, p3.x, t), eval(p0.y, p1.y, p2.y, p3.y, t));\n}"
            ],
            [
                "eval",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * Evaluate a cubic B\u00e9zier curve according to control points `p0`, `p1`,\n * `p2` and `p3` and store the position at parametric position `t` of the\n * curve in `result`.\n *\n * @return the given reference to `result`.\n */\npublic static Point2 eval(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t, Point2 result) {\n    result.set(eval(p0.x, p1.x, p2.x, p3.x, t), eval(p0.y, p1.y, p2.y, p3.y, t));\n    return result;\n}"
            ],
            [
                "derivative",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * Derivative of a cubic B\u00e9zier curve according to control points `x0`,\n * `x1`, `x2` and `x3` at parametric position `t` of the curve.\n *\n * @return The derivative at parametric position `t` on the curve.\n */\npublic static double derivative(double x0, double x1, double x2, double x3, double t) {\n    return 3 * (x3 - 3 * x2 + 3 * x1 - x0) * t * t + 2 * (3 * x2 - 6 * x1 + 3 * x0) * t + (3 * x1 - 3 * x0);\n}"
            ],
            [
                "derivative",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * Derivative point of a cubic B\u00e9zier curve according to control points\n * `x0`, `x1`, `x2` and `x3` at parametric position `t` of the curve.\n *\n * @return The derivative point at parametric position `t` on the curve.\n */\npublic static Point2 derivative(Point2 p0, Point2 p1, Point2 p2, Point3 p3, double t) {\n    return new Point2(derivative(p0.x, p1.x, p2.x, p3.x, t), derivative(p0.y, p1.y, p2.y, p3.y, t));\n}"
            ],
            [
                "derivative",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * Store in `result` the derivative point of a cubic B\u00e9zier curve according\n * to control points `x0`, `x1`, `x2` and `x3` at parametric position `t` of\n * the curve.\n *\n * @return the given reference to `result`.\n */\npublic static Point2 derivative(Point2 p0, Point2 p1, Point2 p2, Point3 p3, double t, Point2 result) {\n    result.set(derivative(p0.x, p1.x, p2.x, p3.x, t), derivative(p0.y, p1.y, p2.y, p3.y, t));\n    return result;\n}"
            ],
            [
                "perpendicular",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * The perpendicular vector to the curve defined by control points `p0`,\n * `p1`, `p2` and `p3` at parametric position `t`.\n *\n * @return A vector perpendicular to the curve at position `t`.\n */\npublic static Vector2 perpendicular(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t) {\n    return new Vector2(derivative(p0.y, p1.y, p2.y, p3.y, t), -derivative(p0.x, p1.x, p2.x, p3.x, t));\n}"
            ],
            [
                "perpendicular",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * Store in `result` the perpendicular vector to the curve defined by\n * control points `p0`, `p1`, `p2` and `p3` at parametric position `t`.\n *\n * @return the given reference to `result`.\n */\npublic static Vector2 perpendicular(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t, Vector2 result) {\n    result.set(derivative(p0.y, p1.y, p2.y, p3.y, t), -derivative(p0.x, p1.x, p2.x, p3.x, t));\n    return result;\n}"
            ],
            [
                "perpendicular",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * The perpendicular vector to the curve defined by control points `p0`,\n * `p1`, `p2` and `p3` at parametric position `t`.\n *\n * @return A vector perpendicular to the curve at position `t`.\n */\npublic static Point2D.Double perpendicular(Point2D.Double p0, Point2D.Double p1, Point2D.Double p2, Point2D.Double p3, double t) {\n    return new Point2D.Double(derivative(p0.y, p1.y, p2.y, p3.y, t), -derivative(p0.x, p1.x, p2.x, p3.x, t));\n}"
            ],
            [
                "newGraphRenderer",
                "org.graphstream.ui.view",
                "Viewer",
                "// Access\n/**\n * Create a new instance of the default graph renderer. The default graph\n * renderer class is given by the \"org.graphstream.ui.renderer\" system\n * property. If the class indicated by this property is not usable (not in\n * the class path, not of the correct type, etc.) or if the property is not\n * present a SwingBasicGraphRenderer is returned.\n */\npublic static GraphRenderer newGraphRenderer() {\n    String rendererClassName;\n    try {\n        rendererClassName = System.getProperty(\"gs.ui.renderer\");\n        if (rendererClassName != null) {\n            logger.warning(\"\\\"gs.ui.renderer\\\" is deprecated, use \\\"org.graphstream.ui.renderer\\\" instead.\");\n        } else {\n            rendererClassName = System.getProperty(\"org.graphstream.ui.renderer\");\n        }\n    } catch (AccessControlException e) {\n        rendererClassName = null;\n    }\n    if (rendererClassName == null)\n        return new SwingBasicGraphRenderer();\n    try {\n        Class<?> c = Class.forName(rendererClassName);\n        Object object = c.newInstance();\n        if (object instanceof GraphRenderer) {\n            return (GraphRenderer) object;\n        } else {\n            logger.warning(String.format(\"Class '%s' is not a 'GraphRenderer'.\", object));\n        }\n    } catch (Exception e) {\n        logger.log(Level.WARNING, \"Cannot create graph renderer.\", e);\n    }\n    return new SwingBasicGraphRenderer();\n}"
            ],
            [
                "getPositionValue",
                "org.graphstream.ui.spriteManager",
                "SpriteManager",
                "// Utility\nprotected static Values getPositionValue(Object value) {\n    if (value instanceof Object[]) {\n        Object[] values = (Object[]) value;\n        if (values.length == 4) {\n            if (values[0] instanceof Number && values[1] instanceof Number && values[2] instanceof Number && values[3] instanceof Style.Units) {\n                return new Values((Style.Units) values[3], ((Number) values[0]).floatValue(), ((Number) values[1]).floatValue(), ((Number) values[2]).floatValue());\n            } else {\n                logger.warning(\"Cannot parse values[4] for sprite position.\");\n            }\n        } else if (values.length == 3) {\n            if (values[0] instanceof Number && values[1] instanceof Number && values[2] instanceof Number) {\n                return new Values(Units.GU, ((Number) values[0]).floatValue(), ((Number) values[1]).floatValue(), ((Number) values[2]).floatValue());\n            } else {\n                logger.warning(\"Cannot parse values[3] for sprite position.\");\n            }\n        } else if (values.length == 1) {\n            if (values[0] instanceof Number) {\n                return new Values(Units.GU, ((Number) values[0]).floatValue());\n            } else {\n                logger.warning(String.format(\"Sprite position percent is not a number.\"));\n            }\n        } else {\n            logger.warning(String.format(\"Cannot transform value '%s' (length=%d) into a position.\", Arrays.toString(values), values.length));\n        }\n    } else if (value instanceof Number) {\n        return new Values(Units.GU, ((Number) value).floatValue());\n    } else if (value instanceof Value) {\n        return new Values((Value) value);\n    } else if (value instanceof Values) {\n        return new Values((Values) value);\n    } else {\n        System.err.printf(\"GraphicGraph : cannot place sprite with posiiton '%s' (instance of %s)%n\", value, value.getClass().getName());\n    }\n    return null;\n}"
            ],
            [
                "convertColor",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Try to convert the given string value to a colour. It understands the 600\n * colour names of the X11 RGB data base. It also understands colours given\n * in the \"#FFFFFF\" format and the hexadecimal \"0xFFFFFF\" format. Finally,\n * it understands colours given as a \"rgb(1,10,100)\", CSS-like format. If\n * the input value is null, the result is null.\n *\n * @param anyValue\n *            The value to convert.\n * @return the converted colour or null if the conversion failed.\n */\npublic static Color convertColor(Object anyValue) {\n    if (anyValue == null)\n        return null;\n    if (anyValue instanceof Color)\n        return (Color) anyValue;\n    if (anyValue instanceof String) {\n        Color c = null;\n        String value = (String) anyValue;\n        if (value.startsWith(\"#\")) {\n            Matcher m = sharpColor1.matcher(value);\n            if (m.matches()) {\n                if (value.length() == 7) {\n                    try {\n                        c = Color.decode(value);\n                        return c;\n                    } catch (NumberFormatException e) {\n                        c = null;\n                    }\n                } else if (value.length() == 9) {\n                    int r = Integer.parseInt(m.group(1), 16);\n                    int g = Integer.parseInt(m.group(2), 16);\n                    int b = Integer.parseInt(m.group(3), 16);\n                    int a = Integer.parseInt(m.group(4), 16);\n                    return new Color(r, g, b, a);\n                }\n            }\n            m = sharpColor2.matcher(value);\n            if (m.matches()) {\n                if (value.length() >= 4) {\n                    int r = Integer.parseInt(m.group(1), 16) * 16;\n                    int g = Integer.parseInt(m.group(2), 16) * 16;\n                    int b = Integer.parseInt(m.group(3), 16) * 16;\n                    int a = 255;\n                    if (value.length() == 5)\n                        a = Integer.parseInt(m.group(4), 16) * 16;\n                    return new Color(r, g, b, a);\n                }\n            }\n        } else if (value.startsWith(\"rgb\")) {\n            Matcher m = cssColorA.matcher(value);\n            if (m.matches()) {\n                int r = Integer.parseInt(m.group(1));\n                int g = Integer.parseInt(m.group(2));\n                int b = Integer.parseInt(m.group(3));\n                int a = Integer.parseInt(m.group(4));\n                return new Color(r, g, b, a);\n            }\n            m = cssColor.matcher(value);\n            if (m.matches()) {\n                int r = Integer.parseInt(m.group(1));\n                int g = Integer.parseInt(m.group(2));\n                int b = Integer.parseInt(m.group(3));\n                return new Color(r, g, b);\n            }\n        } else if (value.startsWith(\"0x\") || value.startsWith(\"0X\")) {\n            Matcher m = hexaColor.matcher(value);\n            if (m.matches()) {\n                if (value.length() == 8) {\n                    try {\n                        return Color.decode(value);\n                    } catch (NumberFormatException e) {\n                        c = null;\n                    }\n                } else if (value.length() == 10) {\n                    String r = m.group(1);\n                    String g = m.group(2);\n                    String b = m.group(3);\n                    String a = m.group(4);\n                    return new Color(Integer.parseInt(r, 16), Integer.parseInt(g, 16), Integer.parseInt(b, 16), Integer.parseInt(a, 16));\n                }\n            }\n        } else if (value.startsWith(\"java.awt.Color[\")) {\n            Matcher m = awtColor.matcher(value);\n            if (m.matches()) {\n                int r = Integer.parseInt(m.group(1));\n                int g = Integer.parseInt(m.group(2));\n                int b = Integer.parseInt(m.group(3));\n                return new Color(r, g, b);\n            }\n        }\n        return colorMap.get(value.toLowerCase());\n    }\n    // TODO throw an exception instead ??\n    return null;\n}"
            ],
            [
                "convertLabel",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Check if the given value is an instance of CharSequence (String is) and\n * return it as a string. Else return null. If the input value is null, the\n * return value is null. If the value returned is larger than 128\n * characters, this method cuts it to 128 characters. TODO: allow to set the\n * max length of these strings.\n *\n * @param value\n *            The value to convert.\n * @return The corresponding string, or null.\n */\npublic static String convertLabel(Object value) {\n    String label = null;\n    if (value != null) {\n        if (value instanceof CharSequence)\n            label = ((CharSequence) value).toString();\n        else\n            label = value.toString();\n        if (label.length() > 128)\n            label = String.format(\"%s...\", label.substring(0, 128));\n    }\n    return label;\n}"
            ],
            [
                "convertWidth",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Try to convert an arbitrary value to a float. If it is a descendant of\n * Number, the float value is returned. If it is a string, a conversion is\n * tried to change it into a number and if successful, this number is\n * returned as a float. Else, the -1 value is returned as no width can be\n * negative to indicate the conversion failed. If the input is null, the\n * return value is -1.\n *\n * @param value\n *            The input to convert.\n * @return The value or -1 if the conversion failed. TODO should be named\n *         convertNumber\n */\npublic static float convertWidth(Object value) {\n    if (value instanceof CharSequence) {\n        try {\n            float val = Float.parseFloat(((CharSequence) value).toString());\n            return val;\n        } catch (NumberFormatException e) {\n            return -1;\n        }\n    } else if (value instanceof Number) {\n        return ((Number) value).floatValue();\n    }\n    return -1;\n}"
            ],
            [
                "convertValue",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Convert an object to a value with units. The object can be a number, in\n * which case the value returned contains this number in pixel units. The\n * object can be a string. In this case the strings understood by this\n * method are of the form (spaces, number, spaces, unit, spaces). For\n * example \"3px\", \"45gu\", \"5.5%\", \" 25.3  gu \", \"4\", \"   28.1  \".\n *\n * @param value\n *            A Number or a CharSequence.\n * @return A value.\n */\npublic static Value convertValue(Object value) {\n    if (value instanceof CharSequence) {\n        CharSequence string = (CharSequence) value;\n        //\t\t\tif (string == null)\n        //\t\t\t\tthrow new RuntimeException(\"null size string ...\");\n        if (string.length() < 0)\n            throw new RuntimeException(\"empty size string ...\");\n        Matcher m = numberUnit.matcher(string);\n        if (m.matches())\n            return new Value(convertUnit(m.group(2)), Float.parseFloat(m.group(1)));\n        m = number.matcher(string);\n        if (m.matches())\n            return new Value(Units.PX, Float.parseFloat(m.group(1)));\n        throw new RuntimeException(String.format(\"string is not convertible to a value (%s)\", string));\n    } else if (value instanceof Number) {\n        return new Value(Units.PX, ((Number) value).floatValue());\n    }\n    if (value == null)\n        throw new RuntimeException(\"cannot convert null value\");\n    throw new RuntimeException(String.format(\"value is of class %s%n\", value.getClass().getName()));\n}"
            ],
            [
                "convertUnit",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Convert \"gu\", \"px\" and \"%\" to Units.GU, Units.PX, Units.PERCENTS.\n */\nprotected static Units convertUnit(String unit) {\n    if (unit.equals(\"gu\"))\n        return Units.GU;\n    else if (unit.equals(\"px\"))\n        return Units.PX;\n    else if (unit.equals(\"%\"))\n        return Units.PERCENTS;\n    return Units.PX;\n}"
            ],
            [
                "nodePosition",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "/**\n * Retrieve a node position from its attributes (\"x\", \"y\", \"z\", or \"xy\", or\n * \"xyz\").\n *\n * @param id\n *            The node identifier.\n * @return A newly allocated array of three floats containing the (x,y,z)\n *         position of the node, or null if the node is not part of the\n *         graph.\n */\npublic static double[] nodePosition(Graph graph, String id) {\n    Node node = graph.getNode(id);\n    if (node != null)\n        return nodePosition(node);\n    return null;\n}"
            ],
            [
                "nodePointPosition",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "/**\n * Retrieve a node position from its attributes (\"x\", \"y\", \"z\", or \"xy\", or\n * \"xyz\").\n *\n * @param id\n *            The node identifier.\n * @return A newly allocated point containing the (x,y,z)\n *         position of the node, or null if the node is not part of the\n *         graph.\n */\npublic static Point3 nodePointPosition(Graph graph, String id) {\n    Node node = graph.getNode(id);\n    if (node != null)\n        return nodePointPosition(node);\n    return null;\n}"
            ],
            [
                "nodePosition",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "/**\n * Like {@link #nodePosition(Graph,String)} but use an existing node as\n * argument.\n *\n * @param node\n *            The node to consider.\n * @return A newly allocated array of three floats containing the (x,y,z)\n *         position of the node.\n */\npublic static double[] nodePosition(Node node) {\n    double[] xyz = new double[3];\n    nodePosition(node, xyz);\n    return xyz;\n}"
            ],
            [
                "nodePointPosition",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "/**\n * Like {@link #nodePointPosition(Graph,String)} but use an existing node as\n * argument.\n *\n * @param node\n *            The node to consider.\n * @return A newly allocated point containing the (x,y,z)\n *         position of the node.\n */\npublic static Point3 nodePointPosition(Node node) {\n    Point3 pos = new Point3();\n    nodePosition(node, pos);\n    return pos;\n}"
            ],
            [
                "edgeLength",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "/**\n * Compute the edge length of the given edge according to its two nodes\n * positions.\n *\n * @param id\n *            The identifier of the edge.\n * @return The edge length or -1 if the nodes of the edge have no positions.\n * @throws RuntimeException\n *             If the edge cannot be found.\n */\npublic static double edgeLength(Graph graph, String id) {\n    Edge edge = graph.getEdge(id);\n    if (edge != null)\n        return edgeLength(edge);\n    throw new RuntimeException(\"edge '\" + id + \"' cannot be found\");\n}"
            ],
            [
                "edgeLength",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "/**\n * Like {@link #edgeLength(Graph,String)} but use an existing edge as\n * argument.\n *\n * @param edge\n * @return The edge length or -1 if the nodes of the edge have no positions.\n */\npublic static double edgeLength(Edge edge) {\n    double[] xyz0 = nodePosition(edge.getNode0());\n    double[] xyz1 = nodePosition(edge.getNode1());\n    if (xyz0 == null || xyz1 == null)\n        return -1;\n    xyz0[0] = xyz1[0] - xyz0[0];\n    xyz0[1] = xyz1[1] - xyz0[1];\n    xyz0[2] = xyz1[2] - xyz0[2];\n    return Math.sqrt(xyz0[0] * xyz0[0] + xyz0[1] * xyz0[1] + xyz0[2] * xyz0[2]);\n}"
            ],
            [
                "getGlobalEnvironment",
                "org.graphstream.util",
                "Environment",
                "// --------- Static methods -----------\n/**\n * Access to the global shared environment for the whole JVM. This method\n * allows to access a shared environment, that can be read and written from\n * anywhere.\n * @return A singleton instance of the global environment.\n */\npublic static Environment getGlobalEnvironment() {\n    if (GLOBAL_ENV == null)\n        GLOBAL_ENV = new Environment();\n    return GLOBAL_ENV;\n}"
            ],
            [
                "falseFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> falseFilter() {\n    return new Filter<T>() {\n\n        public boolean isAvailable(T e) {\n            return false;\n        }\n    };\n}"
            ],
            [
                "trueFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> trueFilter() {\n    return new Filter<T>() {\n\n        public boolean isAvailable(T e) {\n            return true;\n        }\n    };\n}"
            ],
            [
                "byAttributeFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> byAttributeFilter(String key, Object expectedValue) {\n    return new ByAttributeFilter<T>(key, expectedValue);\n}"
            ],
            [
                "separateNodeAndEdgeFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element, U extends Element> Filter<Element> separateNodeAndEdgeFilter(Filter<T> nodeFilter, Filter<U> edgeFilter) {\n    return new SeparateNodeEdgeFilter<T, U>(nodeFilter, edgeFilter);\n}"
            ],
            [
                "byExtremitiesFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element, U extends Element> Filter<T> byExtremitiesFilter(Filter<U> f) {\n    return new ExtremitiesFilter<T, U>(f);\n}"
            ],
            [
                "byIdFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> byIdFilter(String idPattern) {\n    return new ByIdFilter<T>(idPattern);\n}"
            ],
            [
                "isContained",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> isContained(final Collection<? extends T> set) {\n    return new Filter<T>() {\n\n        public boolean isAvailable(T e) {\n            return set.contains(e);\n        }\n    };\n}"
            ],
            [
                "isIdContained",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> isIdContained(final Collection<String> set) {\n    return new Filter<T>() {\n\n        public boolean isAvailable(T e) {\n            return set.contains(e.getId());\n        }\n    };\n}"
            ],
            [
                "and",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> and(Filter<T> f1, Filter<T> f2) {\n    return new AndFilter<T>(f1, f2);\n}"
            ],
            [
                "or",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> or(Filter<T> f1, Filter<T> f2) {\n    return new OrFilter<T>(f1, f2);\n}"
            ],
            [
                "xor",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> xor(Filter<T> f1, Filter<T> f2) {\n    return new XorFilter<T>(f1, f2);\n}"
            ],
            [
                "not",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> not(Filter<T> f) {\n    return new NotFilter<T>(f);\n}"
            ],
            [
                "addEscapes",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "/**\n * Replaces unprintable characters by their escaped (or unicode escaped)\n * equivalents in the given string\n */\nprotected static final String addEscapes(String str) {\n    StringBuffer retval = new StringBuffer();\n    char ch;\n    for (int i = 0; i < str.length(); i++) {\n        switch(str.charAt(i)) {\n            case 0:\n                continue;\n            case '\\b':\n                retval.append(\"\\\\b\");\n                continue;\n            case '\\t':\n                retval.append(\"\\\\t\");\n                continue;\n            case '\\n':\n                retval.append(\"\\\\n\");\n                continue;\n            case '\\f':\n                retval.append(\"\\\\f\");\n                continue;\n            case '\\r':\n                retval.append(\"\\\\r\");\n                continue;\n            case '\\\"':\n                retval.append(\"\\\\\\\"\");\n                continue;\n            case '\\'':\n                retval.append(\"\\\\\\'\");\n                continue;\n            case '\\\\':\n                retval.append(\"\\\\\\\\\");\n                continue;\n            default:\n                if ((ch = str.charAt(i)) < 0x20 || ch > 0x7e) {\n                    String s = \"0000\" + Integer.toString(ch, 16);\n                    retval.append(\"\\\\u\" + s.substring(s.length() - 4, s.length()));\n                } else {\n                    retval.append(ch);\n                }\n                continue;\n        }\n    }\n    return retval.toString();\n}"
            ],
            [
                "LexicalError",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "/**\n * Returns a detailed message for the Error when it is thrown by the token\n * manager to indicate a lexical error. Parameters : EOFSeen : indicates if\n * EOF caused the lexical error curLexState : lexical state in which this\n * error occurred errorLine : line number when the error occurred\n * errorColumn : column number when the error occurred errorAfter : prefix\n * that was seen before this error occurred curchar : the offending\n * character Note: You can customize the lexical error message by modifying\n * this method.\n */\nprotected static String LexicalError(boolean EOFSeen, int lexState, int errorLine, int errorColumn, String errorAfter, char curChar) {\n    return (\"Lexical error at line \" + errorLine + \", column \" + errorColumn + \".  Encountered: \" + (EOFSeen ? \"<EOF> \" : (\"\\\"\" + addEscapes(String.valueOf(curChar)) + \"\\\"\") + \" (\" + (int) curChar + \"), \") + \"after : \\\"\" + addEscapes(errorAfter) + \"\\\"\");\n}"
            ],
            [
                "add_escapes",
                "org.graphstream.util.parser",
                "ParseException",
                "/**\n * Used to convert raw characters to their escaped version when these raw\n * version cannot be used as part of an ASCII string literal.\n */\nstatic String add_escapes(String str) {\n    StringBuffer retval = new StringBuffer();\n    char ch;\n    for (int i = 0; i < str.length(); i++) {\n        switch(str.charAt(i)) {\n            case 0:\n                continue;\n            case '\\b':\n                retval.append(\"\\\\b\");\n                continue;\n            case '\\t':\n                retval.append(\"\\\\t\");\n                continue;\n            case '\\n':\n                retval.append(\"\\\\n\");\n                continue;\n            case '\\f':\n                retval.append(\"\\\\f\");\n                continue;\n            case '\\r':\n                retval.append(\"\\\\r\");\n                continue;\n            case '\\\"':\n                retval.append(\"\\\\\\\"\");\n                continue;\n            case '\\'':\n                retval.append(\"\\\\\\'\");\n                continue;\n            case '\\\\':\n                retval.append(\"\\\\\\\\\");\n                continue;\n            default:\n                if ((ch = str.charAt(i)) < 0x20 || ch > 0x7e) {\n                    String s = \"0000\" + Integer.toString(ch, 16);\n                    retval.append(\"\\\\u\" + s.substring(s.length() - 4, s.length()));\n                } else {\n                    retval.append(ch);\n                }\n                continue;\n        }\n    }\n    return retval.toString();\n}"
            ],
            [
                "newToken",
                "org.graphstream.util.parser",
                "Token",
                "/**\n * Returns a new Token object, by default. However, if you want, you can\n * create and return subclass objects based on the value of ofKind. Simply\n * add the cases to the switch for all those special cases. For example, if\n * you have a subclass of Token called IDToken that you want to create if\n * ofKind is ID, simply add something like :\n *\n * case MyParserConstants.ID : return new IDToken(ofKind, image);\n *\n * to the following switch statement. Then you can cast matchedToken\n * variable to the appropriate type and use sit in your lexical actions.\n */\npublic static Token newToken(int ofKind, String image) {\n    switch(ofKind) {\n        default:\n            return new Token(ofKind, image);\n    }\n}"
            ],
            [
                "newToken",
                "org.graphstream.util.parser",
                "Token",
                "public static Token newToken(int ofKind) {\n    return newToken(ofKind, null);\n}"
            ],
            [
                "countStepInFile",
                "org.graphstream.util",
                "StepCounter",
                "/**\n * Count step contains in a file.\n *\n * @param path\n *            path to the file\n * @return count of step event in the file\n * @throws IOException\n * @see org.graphstream.stream.file.FileSourceFactory\n */\npublic static int countStepInFile(String path) throws IOException {\n    StepCounter counter = new StepCounter();\n    FileSource source = FileSourceFactory.sourceFor(path);\n    source.addElementSink(counter);\n    source.readAll(path);\n    return counter.getStepCount();\n}"
            ],
            [
                "GET",
                "org.graphstream.stream.net",
                "HTTPSource",
                "@SuppressWarnings(\"unchecked\")\nprotected static HashMap<String, Object> GET(HttpExchange ex) {\n    HashMap<String, Object> get = new HashMap<String, Object>();\n    String[] args = ex.getRequestURI().getRawQuery().split(\"[&]\");\n    for (String arg : args) {\n        String[] kv = arg.split(\"[=]\");\n        String k, v;\n        k = null;\n        v = null;\n        try {\n            if (kv.length > 0)\n                k = URLDecoder.decode(kv[0], System.getProperty(\"file.encoding\"));\n            if (kv.length > 1)\n                v = URLDecoder.decode(kv[1], System.getProperty(\"file.encoding\"));\n            if (get.containsKey(k)) {\n                Object o = get.get(k);\n                if (o instanceof LinkedList<?>)\n                    ((LinkedList<Object>) o).add(v);\n                else {\n                    LinkedList<Object> l = new LinkedList<Object>();\n                    l.add(o);\n                    l.add(v);\n                    get.put(k, l);\n                }\n            } else {\n                get.put(k, v);\n            }\n        } catch (UnsupportedEncodingException e) {\n            e.printStackTrace();\n        }\n    }\n    return get;\n}"
            ],
            [
                "sinkFor",
                "org.graphstream.stream.file",
                "FileSinkFactory",
                "/**\n * Looks at the file name given and its extension and propose a file output\n * for the format that match this extension.\n *\n * @param filename\n *            The file name where the graph will be written.\n * @return A file sink or null.\n */\npublic static FileSink sinkFor(String filename) {\n    if (filename.indexOf('.') > 0) {\n        String ext = filename.substring(filename.lastIndexOf('.') + 1);\n        ext = ext.toLowerCase();\n        if (ext2sink.containsKey(ext)) {\n            Class<? extends FileSink> fsink = ext2sink.get(ext);\n            try {\n                return fsink.newInstance();\n            } catch (InstantiationException e) {\n                e.printStackTrace();\n            } catch (IllegalAccessException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n    return null;\n}"
            ],
            [
                "formatId",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "protected static String formatId(String id) {\n    return \"node\" + id.replaceAll(\"\\\\W\", \"_\");\n}"
            ],
            [
                "getInt",
                "org.graphstream.stream.file.pajek",
                "PajekContext",
                "protected static int getInt(Token nb) throws ParseException {\n    try {\n        return Integer.parseInt(nb.image);\n    } catch (Exception e) {\n        throw new ParseException(String.format(\"%d:%d: %s not an integer\", nb.beginLine, nb.beginColumn, nb.image));\n    }\n}"
            ],
            [
                "getReal",
                "org.graphstream.stream.file.pajek",
                "PajekContext",
                "protected static double getReal(Token nb) throws ParseException {\n    try {\n        return Double.parseDouble(nb.image);\n    } catch (Exception e) {\n        throw new ParseException(String.format(\"%d:%d: %s not a real\", nb.beginLine, nb.beginColumn, nb.image));\n    }\n}"
            ],
            [
                "toColorValue",
                "org.graphstream.stream.file.pajek",
                "PajekContext",
                "public static String toColorValue(Token R, Token G, Token B) throws ParseException {\n    double r = getReal(R);\n    double g = getReal(G);\n    double b = getReal(B);\n    return String.format(\"rgb(%d, %d, %d)\", (int) (r * 255), (int) (g * 255), (int) (b * 255));\n}"
            ],
            [
                "sourceFor",
                "org.graphstream.stream.file",
                "FileSourceFactory",
                "/**\n * Create a file input for the given file name.\n *\n * <p>\n * This method first tests if the file is a regular file and is readable. If\n * so, it opens it and reads the magic cookie to test the known file formats\n * that can be inferred from their header. If it works, it returns a file\n * input for the format. Else it looks at the file name extension, and\n * returns a file input for the extension. Finally if all fail, it throws a\n * NotFoundException.\n * </p>\n *\n * <p>\n * Notice that this method only creates the file input and does not connect\n * it to a graph.\n * </p>\n *\n * @param fileName\n *            Name of the graph file.\n * @return A graph reader suitable for the fileName graph format.\n * @throws IOException\n *             If the file is not readable or accessible.\n */\npublic static FileSource sourceFor(String fileName) throws IOException {\n    File file = new File(fileName);\n    if (!file.isFile())\n        throw new IOException(\"not a regular file '\" + fileName + \"'\");\n    if (!file.canRead())\n        throw new IOException(\"not a readable file '\" + fileName + \"'\");\n    // Try to read the beginning of the file.\n    RandomAccessFile in = new RandomAccessFile(fileName, \"r\");\n    byte[] b = new byte[10];\n    int n = in.read(b, 0, 10);\n    // System.err.printf( \"[\" );\n    // for( int i=0; i<n; ++i )\n    // {\n    // System.err.printf( \"%c\", (char)b[i] );\n    // }\n    // System.err.printf( \"]%n\" );\n    in.close();\n    // Surely match a DGS file, as DGS files are well done and have a\n    // signature.\n    if (n >= 3 && b[0] == 'D' && b[1] == 'G' && b[2] == 'S') {\n        if (n >= 6 && b[3] == '0' && b[4] == '0') {\n            if (b[5] == '1' || b[5] == '2') {\n                return new FileSourceDGS1And2();\n            } else if (b[5] == '3' || b[5] == '4') {\n                return new FileSourceDGS();\n            }\n        }\n    }\n    // Maybe match a GML file as most GML files begin by the line \"graph [\",\n    // but not sure, you may create a GML file that starts by a comment, an\n    // empty line, with any kind of spaces, etc.\n    if (n >= 7 && b[0] == 'g' && b[1] == 'r' && b[2] == 'a' && b[3] == 'p' && b[4] == 'h' && b[5] == ' ' && b[6] == '[') {\n        return new org.graphstream.stream.file.FileSourceGML();\n    }\n    if (n >= 4 && b[0] == '(' && b[1] == 't' && b[2] == 'l' && b[3] == 'p')\n        return new FileSourceTLP();\n    // The web reader.\n    String flc = fileName.toLowerCase();\n    // If we did not found anything, we try with the filename extension ...\n    if (flc.endsWith(\".dgs\")) {\n        return new FileSourceDGS();\n    }\n    if (flc.endsWith(\".gml\") || flc.endsWith(\".dgml\")) {\n        return new org.graphstream.stream.file.FileSourceGML();\n    }\n    if (flc.endsWith(\".net\")) {\n        return new FileSourcePajek();\n    }\n    if (flc.endsWith(\".chaco\") || flc.endsWith(\".graph\")) {\n        // return new GraphReaderChaco();\n    }\n    if (flc.endsWith(\".dot\")) {\n        return new org.graphstream.stream.file.FileSourceDOT();\n    }\n    if (flc.endsWith(\".edge\")) {\n        return new FileSourceEdge();\n    }\n    if (flc.endsWith(\".lgl\")) {\n        return new FileSourceLGL();\n    }\n    if (flc.endsWith(\".ncol\")) {\n        return new FileSourceNCol();\n    }\n    if (flc.endsWith(\".tlp\")) {\n        return new FileSourceTLP();\n    }\n    if (flc.endsWith(\".xml\")) {\n        String root = getXMLRootElement(fileName);\n        if (root.equalsIgnoreCase(\"gexf\"))\n            return new FileSourceGEXF();\n        return new FileSourceGraphML();\n    }\n    if (flc.endsWith(\".gexf\")) {\n        return new FileSourceGEXF();\n    }\n    return null;\n}"
            ],
            [
                "getXMLRootElement",
                "org.graphstream.stream.file",
                "FileSourceFactory",
                "public static String getXMLRootElement(String fileName) throws IOException {\n    FileReader stream = new FileReader(fileName);\n    XMLEventReader reader;\n    XMLEvent e;\n    String root;\n    try {\n        reader = XMLInputFactory.newInstance().createXMLEventReader(stream);\n        do {\n            e = reader.nextEvent();\n        } while (!e.isStartElement() && !e.isEndDocument());\n        if (e.isEndDocument())\n            throw new IOException(\"document ended before catching root element\");\n        root = e.asStartElement().getName().getLocalPart();\n        reader.close();\n        stream.close();\n        return root;\n    } catch (XMLStreamException ex) {\n        throw new IOException(ex);\n    } catch (FactoryConfigurationError ex) {\n        throw new IOException(ex);\n    }\n}"
            ],
            [
                "formatStringForQuoting",
                "org.graphstream.stream.file",
                "FileSinkDGSUtility",
                "protected static String formatStringForQuoting(String str) {\n    return str.replaceAll(\"(^|[^\\\\\\\\])\\\"\", \"$1\\\\\\\\\\\"\");\n}"
            ],
            [
                "attributeString",
                "org.graphstream.stream.file",
                "FileSinkDGSUtility",
                "protected static String attributeString(String key, Object value, boolean remove) {\n    if (key == null || key.length() == 0)\n        return null;\n    if (remove) {\n        return String.format(\" -\\\"%s\\\"\", key);\n    } else {\n        if (value != null && value.getClass().isArray())\n            return String.format(\" \\\"%s\\\":%s\", key, arrayString(value));\n        else\n            return String.format(\" \\\"%s\\\":%s\", key, valueString(value));\n    }\n}"
            ],
            [
                "arrayString",
                "org.graphstream.stream.file",
                "FileSinkDGSUtility",
                "protected static String arrayString(Object value) {\n    if (value != null && value.getClass().isArray()) {\n        StringBuilder sb = new StringBuilder();\n        sb.append(\"{\");\n        if (Array.getLength(value) == 0)\n            sb.append(\"\\\"\\\"\");\n        else\n            sb.append(arrayString(Array.get(value, 0)));\n        for (int i = 1; i < Array.getLength(value); ++i) sb.append(String.format(\",%s\", arrayString(Array.get(value, i))));\n        sb.append(\"}\");\n        return sb.toString();\n    } else {\n        return valueString(value);\n    }\n}"
            ],
            [
                "valueString",
                "org.graphstream.stream.file",
                "FileSinkDGSUtility",
                "protected static String valueString(Object value) {\n    if (value == null)\n        return \"\\\"\\\"\";\n    if (value instanceof CharSequence) {\n        if (value instanceof String)\n            return String.format(\"\\\"%s\\\"\", formatStringForQuoting((String) value));\n        else\n            return String.format(\"\\\"%s\\\"\", (CharSequence) value);\n    } else if (value instanceof Number) {\n        Number nval = (Number) value;\n        if (value instanceof Integer || value instanceof Short || value instanceof Byte || value instanceof Long)\n            return String.format(Locale.US, \"%d\", nval.longValue());\n        else\n            return String.format(Locale.US, \"%f\", nval.doubleValue());\n    } else if (value instanceof Boolean) {\n        return String.format(Locale.US, \"%b\", ((Boolean) value));\n    } else if (value instanceof Character) {\n        return String.format(\"\\\"%c\\\"\", ((Character) value).charValue());\n    } else if (value instanceof Object[]) {\n        Object[] array = (Object[]) value;\n        int n = array.length;\n        StringBuffer sb = new StringBuffer();\n        if (array.length > 0)\n            sb.append(valueString(array[0]));\n        for (int i = 1; i < n; i++) {\n            sb.append(\",\");\n            sb.append(valueString(array[i]));\n        }\n        return sb.toString();\n    } else if (value instanceof HashMap<?, ?> || value instanceof CompoundAttribute) {\n        HashMap<?, ?> hash;\n        if (value instanceof CompoundAttribute)\n            hash = ((CompoundAttribute) value).toHashMap();\n        else\n            hash = (HashMap<?, ?>) value;\n        return hashToString(hash);\n    } else if (value instanceof Color) {\n        Color c = (Color) value;\n        return String.format(\"#%02X%02X%02X%02X\", c.getRed(), c.getGreen(), c.getBlue(), c.getAlpha());\n    } else {\n        return String.format(\"\\\"%s\\\"\", value.toString());\n    }\n}"
            ],
            [
                "hashToString",
                "org.graphstream.stream.file",
                "FileSinkDGSUtility",
                "protected static String hashToString(HashMap<?, ?> hash) {\n    StringBuilder sb = new StringBuilder();\n    sb.append(\"[ \");\n    for (Object key : hash.keySet()) {\n        sb.append(attributeString(key.toString(), hash.get(key), false));\n        sb.append(\",\");\n    }\n    sb.append(']');\n    return sb.toString();\n}"
            ],
            [
                "encodeObject",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Serializes an object and returns the Base64-encoded\n * version of that serialized object.\n *\n * <p>As of v 2.3, if the object\n * cannot be serialized or there is another error,\n * the method will throw an java.io.IOException. <b>This is new to v2.3!</b>\n * In earlier versions, it just returned a null value, but\n * in retrospect that's a pretty poor way to handle it.</p>\n *\n * The object is not GZip-compressed before being encoded.\n *\n * @param serializableObject The object to encode\n * @return The Base64-encoded object\n * @throws java.io.IOException if there is an error\n * @throws NullPointerException if serializedObject is null\n * @since 1.4\n */\npublic static String encodeObject(java.io.Serializable serializableObject) throws java.io.IOException {\n    return encodeObject(serializableObject, NO_OPTIONS);\n}"
            ],
            [
                "encodeObject",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end encodeObject\n/**\n * Serializes an object and returns the Base64-encoded\n * version of that serialized object.\n *\n * <p>As of v 2.3, if the object\n * cannot be serialized or there is another error,\n * the method will throw an java.io.IOException. <b>This is new to v2.3!</b>\n * In earlier versions, it just returned a null value, but\n * in retrospect that's a pretty poor way to handle it.</p>\n *\n * The object is not GZip-compressed before being encoded.\n * <p>\n * Example options:<pre>\n *   GZIP: gzip-compresses object before encoding it.\n *   DO_BREAK_LINES: break lines at 76 characters\n * </pre>\n * <p>\n * Example: <code>encodeObject( myObj, Base64.GZIP )</code> or\n * <p>\n * Example: <code>encodeObject( myObj, Base64.GZIP | Base64.DO_BREAK_LINES )</code>\n *\n * @param serializableObject The object to encode\n * @param options Specified options\n * @return The Base64-encoded object\n * @see Base64#GZIP\n * @see Base64#DO_BREAK_LINES\n * @throws java.io.IOException if there is an error\n * @since 2.0\n */\npublic static String encodeObject(java.io.Serializable serializableObject, int options) throws java.io.IOException {\n    if (serializableObject == null) {\n        throw new NullPointerException(\"Cannot serialize a null object.\");\n    }\n    // end if: null\n    // Streams\n    java.io.ByteArrayOutputStream baos = null;\n    java.io.OutputStream b64os = null;\n    java.util.zip.GZIPOutputStream gzos = null;\n    java.io.ObjectOutputStream oos = null;\n    try {\n        // ObjectOutputStream -> (GZIP) -> Base64 -> ByteArrayOutputStream\n        baos = new java.io.ByteArrayOutputStream();\n        b64os = new Base64.OutputStream(baos, ENCODE | options);\n        if ((options & GZIP) != 0) {\n            // Gzip\n            gzos = new java.util.zip.GZIPOutputStream(b64os);\n            oos = new java.io.ObjectOutputStream(gzos);\n        } else {\n            // Not gzipped\n            oos = new java.io.ObjectOutputStream(b64os);\n        }\n        oos.writeObject(serializableObject);\n    }// end try\n     catch (java.io.IOException e) {\n        // Catch it and then throw it immediately so that\n        // the finally{} block is called for cleanup.\n        throw e;\n    } finally // end catch\n    {\n        try {\n            oos.close();\n        } catch (Exception e) {\n        }\n        try {\n            gzos.close();\n        } catch (Exception e) {\n        }\n        try {\n            b64os.close();\n        } catch (Exception e) {\n        }\n        try {\n            baos.close();\n        } catch (Exception e) {\n        }\n    }\n    // end finally\n    // Return value according to relevant encoding.\n    try {\n        return new String(baos.toByteArray(), PREFERRED_ENCODING);\n    }// end try\n     catch (java.io.UnsupportedEncodingException uue) {\n        // Fall back to some Java default\n        return new String(baos.toByteArray());\n    }\n    // end catch\n}"
            ],
            [
                "encodeBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end encode\n/**\n * Encodes a byte array into Base64 notation.\n * Does not GZip-compress data.\n *\n * @param source The data to convert\n * @return The data in Base64-encoded form\n * @throws NullPointerException if source array is null\n * @since 1.4\n */\npublic static String encodeBytes(byte[] source) {\n    // Since we're not going to have the GZIP encoding turned on,\n    // we're not going to have an java.io.IOException thrown, so\n    // we should not force the user to have to catch it.\n    String encoded = null;\n    try {\n        encoded = encodeBytes(source, 0, source.length, NO_OPTIONS);\n    } catch (java.io.IOException ex) {\n        assert false : ex.getMessage();\n    }\n    // end catch\n    assert encoded != null;\n    return encoded;\n}"
            ],
            [
                "encodeBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end encodeBytes\n/**\n * Encodes a byte array into Base64 notation.\n * <p>\n * Example options:<pre>\n *   GZIP: gzip-compresses object before encoding it.\n *   DO_BREAK_LINES: break lines at 76 characters\n *     <i>Note: Technically, this makes your encoding non-compliant.</i>\n * </pre>\n * <p>\n * Example: <code>encodeBytes( myData, Base64.GZIP )</code> or\n * <p>\n * Example: <code>encodeBytes( myData, Base64.GZIP | Base64.DO_BREAK_LINES )</code>\n *\n * <p>As of v 2.3, if there is an error with the GZIP stream,\n * the method will throw an java.io.IOException. <b>This is new to v2.3!</b>\n * In earlier versions, it just returned a null value, but\n * in retrospect that's a pretty poor way to handle it.</p>\n *\n * @param source The data to convert\n * @param options Specified options\n * @return The Base64-encoded data as a String\n * @see Base64#GZIP\n * @see Base64#DO_BREAK_LINES\n * @throws java.io.IOException if there is an error\n * @throws NullPointerException if source array is null\n * @since 2.0\n */\npublic static String encodeBytes(byte[] source, int options) throws java.io.IOException {\n    return encodeBytes(source, 0, source.length, options);\n}"
            ],
            [
                "encodeBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end encodeBytes\n/**\n * Encodes a byte array into Base64 notation.\n * Does not GZip-compress data.\n *\n * <p>As of v 2.3, if there is an error,\n * the method will throw an java.io.IOException. <b>This is new to v2.3!</b>\n * In earlier versions, it just returned a null value, but\n * in retrospect that's a pretty poor way to handle it.</p>\n *\n * @param source The data to convert\n * @param off Offset in array where conversion should begin\n * @param len Length of data to convert\n * @return The Base64-encoded data as a String\n * @throws NullPointerException if source array is null\n * @throws IllegalArgumentException if source array, offset, or length are invalid\n * @since 1.4\n */\npublic static String encodeBytes(byte[] source, int off, int len) {\n    // Since we're not going to have the GZIP encoding turned on,\n    // we're not going to have an java.io.IOException thrown, so\n    // we should not force the user to have to catch it.\n    String encoded = null;\n    try {\n        encoded = encodeBytes(source, off, len, NO_OPTIONS);\n    } catch (java.io.IOException ex) {\n        assert false : ex.getMessage();\n    }\n    // end catch\n    assert encoded != null;\n    return encoded;\n}"
            ],
            [
                "encodeBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end encodeBytes\n/**\n * Encodes a byte array into Base64 notation.\n * <p>\n * Example options:<pre>\n *   GZIP: gzip-compresses object before encoding it.\n *   DO_BREAK_LINES: break lines at 76 characters\n *     <i>Note: Technically, this makes your encoding non-compliant.</i>\n * </pre>\n * <p>\n * Example: <code>encodeBytes( myData, Base64.GZIP )</code> or\n * <p>\n * Example: <code>encodeBytes( myData, Base64.GZIP | Base64.DO_BREAK_LINES )</code>\n *\n * <p>As of v 2.3, if there is an error with the GZIP stream,\n * the method will throw an java.io.IOException. <b>This is new to v2.3!</b>\n * In earlier versions, it just returned a null value, but\n * in retrospect that's a pretty poor way to handle it.</p>\n *\n * @param source The data to convert\n * @param off Offset in array where conversion should begin\n * @param len Length of data to convert\n * @param options Specified options\n * @return The Base64-encoded data as a String\n * @see Base64#GZIP\n * @see Base64#DO_BREAK_LINES\n * @throws java.io.IOException if there is an error\n * @throws NullPointerException if source array is null\n * @throws IllegalArgumentException if source array, offset, or length are invalid\n * @since 2.0\n */\npublic static String encodeBytes(byte[] source, int off, int len, int options) throws java.io.IOException {\n    byte[] encoded = encodeBytesToBytes(source, off, len, options);\n    // Return value according to relevant encoding.\n    try {\n        return new String(encoded, PREFERRED_ENCODING);\n    }// end try\n     catch (java.io.UnsupportedEncodingException uue) {\n        return new String(encoded);\n    }\n    // end catch\n}"
            ],
            [
                "encodeBytesToBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end encodeBytes\n/**\n * Similar to {@link #encodeBytes(byte[])} but returns\n * a byte array instead of instantiating a String. This is more efficient\n * if you're working with I/O streams and have large data sets to encode.\n *\n * @param source The data to convert\n * @return The Base64-encoded data as a byte[] (of ASCII characters)\n * @throws NullPointerException if source array is null\n * @since 2.3.1\n */\npublic static byte[] encodeBytesToBytes(byte[] source) {\n    byte[] encoded = null;\n    try {\n        encoded = encodeBytesToBytes(source, 0, source.length, Base64.NO_OPTIONS);\n    } catch (java.io.IOException ex) {\n        assert false : \"IOExceptions only come from GZipping, which is turned off: \" + ex.getMessage();\n    }\n    return encoded;\n}"
            ],
            [
                "encodeBytesToBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Similar to {@link #encodeBytes(byte[], int, int, int)} but returns\n * a byte array instead of instantiating a String. This is more efficient\n * if you're working with I/O streams and have large data sets to encode.\n *\n * @param source The data to convert\n * @param off Offset in array where conversion should begin\n * @param len Length of data to convert\n * @param options Specified options\n * @return The Base64-encoded data as a String\n * @see Base64#GZIP\n * @see Base64#DO_BREAK_LINES\n * @throws java.io.IOException if there is an error\n * @throws NullPointerException if source array is null\n * @throws IllegalArgumentException if source array, offset, or length are invalid\n * @since 2.3.1\n */\npublic static byte[] encodeBytesToBytes(byte[] source, int off, int len, int options) throws java.io.IOException {\n    if (source == null) {\n        throw new NullPointerException(\"Cannot serialize a null array.\");\n    }\n    // end if: null\n    if (off < 0) {\n        throw new IllegalArgumentException(\"Cannot have negative offset: \" + off);\n    }\n    // end if: off < 0\n    if (len < 0) {\n        throw new IllegalArgumentException(\"Cannot have length offset: \" + len);\n    }\n    // end if: len < 0\n    if (off + len > source.length) {\n        throw new IllegalArgumentException(String.format(\"Cannot have offset of %d and length of %d with array of length %d\", off, len, source.length));\n    }\n    // end if: off < 0\n    // Compress?\n    if ((options & GZIP) != 0) {\n        java.io.ByteArrayOutputStream baos = null;\n        java.util.zip.GZIPOutputStream gzos = null;\n        Base64.OutputStream b64os = null;\n        try {\n            // GZip -> Base64 -> ByteArray\n            baos = new java.io.ByteArrayOutputStream();\n            b64os = new Base64.OutputStream(baos, ENCODE | options);\n            gzos = new java.util.zip.GZIPOutputStream(b64os);\n            gzos.write(source, off, len);\n            gzos.close();\n        }// end try\n         catch (java.io.IOException e) {\n            // Catch it and then throw it immediately so that\n            // the finally{} block is called for cleanup.\n            throw e;\n        } finally // end catch\n        {\n            try {\n                gzos.close();\n            } catch (Exception e) {\n            }\n            try {\n                b64os.close();\n            } catch (Exception e) {\n            }\n            try {\n                baos.close();\n            } catch (Exception e) {\n            }\n        }\n        // end finally\n        return baos.toByteArray();\n    } else // end if: compress\n    // Else, don't compress. Better not to use streams at all then.\n    {\n        boolean breakLines = (options & DO_BREAK_LINES) != 0;\n        //int    len43   = len * 4 / 3;\n        //byte[] outBuff = new byte[   ( len43 )                      // Main 4:3\n        //                           + ( (len % 3) > 0 ? 4 : 0 )      // Account for padding\n        //                           + (breakLines ? ( len43 / MAX_LINE_LENGTH ) : 0) ]; // New lines\n        // Try to determine more precisely how big the array needs to be.\n        // If we get it right, we don't have to do an array copy, and\n        // we save a bunch of memory.\n        // Bytes needed for actual encoding\n        int encLen = (len / 3) * 4 + (len % 3 > 0 ? 4 : 0);\n        if (breakLines) {\n            // Plus extra newline characters\n            encLen += encLen / MAX_LINE_LENGTH;\n        }\n        byte[] outBuff = new byte[encLen];\n        int d = 0;\n        int e = 0;\n        int len2 = len - 2;\n        int lineLength = 0;\n        for (; d < len2; d += 3, e += 4) {\n            encode3to4(source, d + off, 3, outBuff, e, options);\n            lineLength += 4;\n            if (breakLines && lineLength >= MAX_LINE_LENGTH) {\n                outBuff[e + 4] = NEW_LINE;\n                e++;\n                lineLength = 0;\n            }\n            // end if: end of line\n        }\n        // en dfor: each piece of array\n        if (d < len) {\n            encode3to4(source, d + off, len - d, outBuff, e, options);\n            e += 4;\n        }\n        // end if: some padding needed\n        // Only resize array if we didn't guess it right.\n        if (e <= outBuff.length - 1) {\n            // If breaking lines and the last byte falls right at\n            // the line length (76 bytes per line), there will be\n            // one extra byte, and the array will need to be resized.\n            // Not too bad of an estimate on array size, I'd say.\n            byte[] finalOut = new byte[e];\n            System.arraycopy(outBuff, 0, finalOut, 0, e);\n            //System.err.println(\"Having to resize array from \" + outBuff.length + \" to \" + e );\n            return finalOut;\n        } else {\n            //System.err.println(\"No need to resize array.\");\n            return outBuff;\n        }\n    }\n    // end else: don't compress\n}"
            ],
            [
                "decode",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end decodeToBytes\n/**\n * Low-level access to decoding ASCII characters in\n * the form of a byte array. <strong>Ignores GUNZIP option, if\n * it's set.</strong> This is not generally a recommended method,\n * although it is used internally as part of the decoding process.\n * Special case: if len = 0, an empty array is returned. Still,\n * if you need more speed and reduced memory footprint (and aren't\n * gzipping), consider this method.\n *\n * @param source The Base64 encoded data\n * @return decoded data\n * @since 2.3.1\n */\npublic static byte[] decode(byte[] source) throws java.io.IOException {\n    byte[] decoded = null;\n    //        try {\n    decoded = decode(source, 0, source.length, Base64.NO_OPTIONS);\n    //        } catch( java.io.IOException ex ) {\n    //            assert false : \"IOExceptions only come from GZipping, which is turned off: \" + ex.getMessage();\n    //        }\n    return decoded;\n}"
            ],
            [
                "decode",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Low-level access to decoding ASCII characters in\n * the form of a byte array. <strong>Ignores GUNZIP option, if\n * it's set.</strong> This is not generally a recommended method,\n * although it is used internally as part of the decoding process.\n * Special case: if len = 0, an empty array is returned. Still,\n * if you need more speed and reduced memory footprint (and aren't\n * gzipping), consider this method.\n *\n * @param source The Base64 encoded data\n * @param off    The offset of where to begin decoding\n * @param len    The length of characters to decode\n * @param options Can specify options such as alphabet type to use\n * @return decoded data\n * @throws java.io.IOException If bogus characters exist in source data\n * @since 1.3\n */\npublic static byte[] decode(byte[] source, int off, int len, int options) throws java.io.IOException {\n    // Lots of error checking and exception throwing\n    if (source == null) {\n        throw new NullPointerException(\"Cannot decode null source array.\");\n    }\n    // end if\n    if (off < 0 || off + len > source.length) {\n        throw new IllegalArgumentException(String.format(\"Source array with length %d cannot have offset of %d and process %d bytes.\", source.length, off, len));\n    }\n    // end if\n    if (len == 0) {\n        return new byte[0];\n    } else if (len < 4) {\n        throw new IllegalArgumentException(\"Base64-encoded string must have at least four characters, but length specified was \" + len);\n    }\n    // end if\n    byte[] DECODABET = getDecodabet(options);\n    // Estimate on array size\n    int len34 = len * 3 / 4;\n    // Upper limit on size of output\n    byte[] outBuff = new byte[len34];\n    // Keep track of where we're writing\n    int outBuffPosn = 0;\n    // Four byte buffer from source, eliminating white space\n    byte[] b4 = new byte[4];\n    // Keep track of four byte input buffer\n    int b4Posn = 0;\n    // Source array counter\n    int i = 0;\n    // Special value from DECODABET\n    byte sbiDecode = 0;\n    for (i = off; i < off + len; i++) {\n        // Loop through source\n        sbiDecode = DECODABET[source[i] & 0xFF];\n        // White space, Equals sign, or legit Base64 character\n        // Note the values such as -5 and -9 in the\n        // DECODABETs at the top of the file.\n        if (sbiDecode >= WHITE_SPACE_ENC) {\n            if (sbiDecode >= EQUALS_SIGN_ENC) {\n                // Save non-whitespace\n                b4[b4Posn++] = source[i];\n                if (b4Posn > 3) {\n                    // Time to decode?\n                    outBuffPosn += decode4to3(b4, 0, outBuff, outBuffPosn, options);\n                    b4Posn = 0;\n                    // If that was the equals sign, break out of 'for' loop\n                    if (source[i] == EQUALS_SIGN) {\n                        break;\n                    }\n                    // end if: equals sign\n                }\n                // end if: quartet built\n            }\n            // end if: equals sign or better\n        } else // end if: white space, equals sign or better\n        {\n            // There's a bad input character in the Base64 stream.\n            throw new java.io.IOException(String.format(\"Bad Base64 input character decimal %d in array position %d\", ((int) source[i]) & 0xFF, i));\n        }\n        // end else:\n    }\n    // each input character\n    byte[] out = new byte[outBuffPosn];\n    System.arraycopy(outBuff, 0, out, 0, outBuffPosn);\n    return out;\n}"
            ],
            [
                "decode",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end decode\n/**\n * Decodes data from Base64 notation, automatically\n * detecting gzip-compressed data and decompressing it.\n *\n * @param s the string to decode\n * @return the decoded data\n * @throws java.io.IOException If there is a problem\n * @since 1.4\n */\npublic static byte[] decode(String s) throws java.io.IOException {\n    return decode(s, NO_OPTIONS);\n}"
            ],
            [
                "decode",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Decodes data from Base64 notation, automatically\n * detecting gzip-compressed data and decompressing it.\n *\n * @param s the string to decode\n * @param options encode options such as URL_SAFE\n * @return the decoded data\n * @throws java.io.IOException if there is an error\n * @throws NullPointerException if <tt>s</tt> is null\n * @since 1.4\n */\npublic static byte[] decode(String s, int options) throws java.io.IOException {\n    if (s == null) {\n        throw new NullPointerException(\"Input string was null.\");\n    }\n    // end if\n    byte[] bytes;\n    try {\n        bytes = s.getBytes(PREFERRED_ENCODING);\n    }// end try\n     catch (java.io.UnsupportedEncodingException uee) {\n        bytes = s.getBytes();\n    }\n    // end catch\n    //</change>\n    // Decode\n    bytes = decode(bytes, 0, bytes.length, options);\n    // Check to see if it's gzip-compressed\n    // GZIP Magic Two-Byte Number: 0x8b1f (35615)\n    boolean dontGunzip = (options & DONT_GUNZIP) != 0;\n    if ((bytes != null) && (bytes.length >= 4) && (!dontGunzip)) {\n        int head = ((int) bytes[0] & 0xff) | ((bytes[1] << 8) & 0xff00);\n        if (java.util.zip.GZIPInputStream.GZIP_MAGIC == head) {\n            java.io.ByteArrayInputStream bais = null;\n            java.util.zip.GZIPInputStream gzis = null;\n            java.io.ByteArrayOutputStream baos = null;\n            byte[] buffer = new byte[2048];\n            int length = 0;\n            try {\n                baos = new java.io.ByteArrayOutputStream();\n                bais = new java.io.ByteArrayInputStream(bytes);\n                gzis = new java.util.zip.GZIPInputStream(bais);\n                while ((length = gzis.read(buffer)) >= 0) {\n                    baos.write(buffer, 0, length);\n                }\n                // end while: reading input\n                // No error? Get new bytes.\n                bytes = baos.toByteArray();\n            }// end try\n             catch (java.io.IOException e) {\n                e.printStackTrace();\n                // Just return originally-decoded bytes\n            } finally // end catch\n            {\n                try {\n                    baos.close();\n                } catch (Exception e) {\n                }\n                try {\n                    gzis.close();\n                } catch (Exception e) {\n                }\n                try {\n                    bais.close();\n                } catch (Exception e) {\n                }\n            }\n            // end finally\n        }\n        // end if: gzipped\n    }\n    // end if: bytes.length >= 2\n    return bytes;\n}"
            ],
            [
                "decodeToObject",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end decode\n/**\n * Attempts to decode Base64 data and deserialize a Java\n * Object within. Returns <tt>null</tt> if there was an error.\n *\n * @param encodedObject The Base64 data to decode\n * @return The decoded and deserialized object\n * @throws NullPointerException if encodedObject is null\n * @throws java.io.IOException if there is a general error\n * @throws ClassNotFoundException if the decoded object is of a\n *         class that cannot be found by the JVM\n * @since 1.5\n */\npublic static Object decodeToObject(String encodedObject) throws java.io.IOException, java.lang.ClassNotFoundException {\n    return decodeToObject(encodedObject, NO_OPTIONS, null);\n}"
            ],
            [
                "decodeToObject",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Attempts to decode Base64 data and deserialize a Java\n * Object within. Returns <tt>null</tt> if there was an error.\n * If <tt>loader</tt> is not null, it will be the class loader\n * used when deserializing.\n *\n * @param encodedObject The Base64 data to decode\n * @param options Various parameters related to decoding\n * @param loader Optional class loader to use in deserializing classes.\n * @return The decoded and deserialized object\n * @throws NullPointerException if encodedObject is null\n * @throws java.io.IOException if there is a general error\n * @throws ClassNotFoundException if the decoded object is of a\n *         class that cannot be found by the JVM\n * @since 2.3.4\n */\npublic static Object decodeToObject(String encodedObject, int options, final ClassLoader loader) throws java.io.IOException, java.lang.ClassNotFoundException {\n    // Decode and gunzip if necessary\n    byte[] objBytes = decode(encodedObject, options);\n    java.io.ByteArrayInputStream bais = null;\n    java.io.ObjectInputStream ois = null;\n    Object obj = null;\n    try {\n        bais = new java.io.ByteArrayInputStream(objBytes);\n        // If no custom class loader is provided, use Java's builtin OIS.\n        if (loader == null) {\n            ois = new java.io.ObjectInputStream(bais);\n        } else // end if: no loader provided\n        // Else make a customized object input stream that uses\n        // the provided class loader.\n        {\n            ois = new java.io.ObjectInputStream(bais) {\n\n                @Override\n                public Class<?> resolveClass(java.io.ObjectStreamClass streamClass) throws java.io.IOException, ClassNotFoundException {\n                    Class<?> c = Class.forName(streamClass.getName(), false, loader);\n                    if (c == null) {\n                        return super.resolveClass(streamClass);\n                    } else {\n                        // Class loader knows of this class.\n                        return c;\n                    }\n                    // end else: not null\n                }\n            };\n            // end ois\n        }\n        // end else: no custom class loader\n        obj = ois.readObject();\n    }// end try\n     catch (java.io.IOException e) {\n        // Catch and throw in order to execute finally{}\n        throw e;\n    }// end catch\n     catch (java.lang.ClassNotFoundException e) {\n        // Catch and throw in order to execute finally{}\n        throw e;\n    } finally // end catch\n    {\n        try {\n            bais.close();\n        } catch (Exception e) {\n        }\n        try {\n            ois.close();\n        } catch (Exception e) {\n        }\n    }\n    // end finally\n    return obj;\n}"
            ],
            [
                "decodeFromFile",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end decodeToFile\n/**\n * Convenience method for reading a base64-encoded\n * file and decoding it.\n *\n * <p>As of v 2.3, if there is a error,\n * the method will throw an java.io.IOException. <b>This is new to v2.3!</b>\n * In earlier versions, it just returned false, but\n * in retrospect that's a pretty poor way to handle it.</p>\n *\n * @param filename Filename for reading encoded data\n * @return decoded byte array\n * @throws java.io.IOException if there is an error\n * @since 2.1\n */\npublic static byte[] decodeFromFile(String filename) throws java.io.IOException {\n    byte[] decodedData = null;\n    Base64.InputStream bis = null;\n    try {\n        // Set up some useful variables\n        java.io.File file = new java.io.File(filename);\n        byte[] buffer = null;\n        int length = 0;\n        int numBytes = 0;\n        // Check for size of file\n        if (file.length() > Integer.MAX_VALUE) {\n            throw new java.io.IOException(\"File is too big for this convenience method (\" + file.length() + \" bytes).\");\n        }\n        // end if: file too big for int index\n        buffer = new byte[(int) file.length()];\n        // Open a stream\n        bis = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(file)), Base64.DECODE);\n        // Read until done\n        while ((numBytes = bis.read(buffer, length, 4096)) >= 0) {\n            length += numBytes;\n        }\n        // end while\n        // Save in a variable to return\n        decodedData = new byte[length];\n        System.arraycopy(buffer, 0, decodedData, 0, length);\n    }// end try\n     catch (java.io.IOException e) {\n        // Catch and release to execute finally{}\n        throw e;\n    } finally // end catch: java.io.IOException\n    {\n        try {\n            bis.close();\n        } catch (Exception e) {\n        }\n    }\n    // end finally\n    return decodedData;\n}"
            ],
            [
                "encodeFromFile",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end decodeFromFile\n/**\n * Convenience method for reading a binary file\n * and base64-encoding it.\n *\n * <p>As of v 2.3, if there is a error,\n * the method will throw an java.io.IOException. <b>This is new to v2.3!</b>\n * In earlier versions, it just returned false, but\n * in retrospect that's a pretty poor way to handle it.</p>\n *\n * @param filename Filename for reading binary data\n * @return base64-encoded string\n * @throws java.io.IOException if there is an error\n * @since 2.1\n */\npublic static String encodeFromFile(String filename) throws java.io.IOException {\n    String encodedData = null;\n    Base64.InputStream bis = null;\n    try {\n        // Set up some useful variables\n        java.io.File file = new java.io.File(filename);\n        // Need max() for math on small files (v2.2.1); Need +1 for a few corner cases (v2.3.5)\n        byte[] buffer = new byte[Math.max((int) (file.length() * 1.4 + 1), 40)];\n        int length = 0;\n        int numBytes = 0;\n        // Open a stream\n        bis = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(file)), Base64.ENCODE);\n        // Read until done\n        while ((numBytes = bis.read(buffer, length, 4096)) >= 0) {\n            length += numBytes;\n        }\n        // end while\n        // Save in a variable to return\n        encodedData = new String(buffer, 0, length, Base64.PREFERRED_ENCODING);\n    }// end try\n     catch (java.io.IOException e) {\n        // Catch and release to execute finally{}\n        throw e;\n    } finally // end catch: java.io.IOException\n    {\n        try {\n            bis.close();\n        } catch (Exception e) {\n        }\n    }\n    // end finally\n    return encodedData;\n}"
            ],
            [
                "unmutableGraph",
                "org.graphstream.graph.implementations",
                "Graphs",
                "public static Graph unmutableGraph(Graph g) {\n    return null;\n}"
            ],
            [
                "synchronizedGraph",
                "org.graphstream.graph.implementations",
                "Graphs",
                "/**\n * Synchronizes a graph. The returned graph can be accessed and modified by\n * several threads. You lose genericity in methods returning edge or node\n * because each element (graph, nodes and edges) is wrapped into a\n * synchronized wrapper which breaks original elements class.\n *\n * @param g\n *            the graph to synchronize\n * @return a synchronized wrapper for g\n */\npublic static Graph synchronizedGraph(Graph g) {\n    return new SynchronizedGraph(g);\n}"
            ],
            [
                "merge",
                "org.graphstream.graph.implementations",
                "Graphs",
                "/**\n * Merge several graphs in one. A new graph is created, that will contain\n * the result. The method will try to create a graph of the same class that\n * the first graph to merge (it needs to have a constructor with a String).\n * Else, a MultiGraph is used.\n *\n * @param graphs\n *            graphs to merge\n * @return merge result\n */\npublic static Graph merge(Graph... graphs) {\n    if (graphs == null)\n        return new DefaultGraph(\"void-merge\");\n    String id = \"merge\";\n    for (Graph g : graphs) id += \"-\" + g.getId();\n    Graph result;\n    try {\n        Class<? extends Graph> cls = graphs[0].getClass();\n        result = cls.getConstructor(String.class).newInstance(id);\n    } catch (Exception e) {\n        logger.warning(String.format(\"Cannot create a graph of %s.\", graphs[0].getClass().getName()));\n        result = new MultiGraph(id);\n    }\n    mergeIn(result, graphs);\n    return result;\n}"
            ],
            [
                "clone",
                "org.graphstream.graph.implementations",
                "Graphs",
                "/**\n * Clone a given graph with same node/edge structure and same attributes.\n *\n * @param g\n *            the graph to clone\n * @return a copy of g\n */\npublic static Graph clone(Graph g) {\n    Graph copy;\n    try {\n        Class<? extends Graph> cls = g.getClass();\n        copy = cls.getConstructor(String.class).newInstance(g.getId());\n    } catch (Exception e) {\n        logger.warning(String.format(\"Cannot create a graph of %s.\", g.getClass().getName()));\n        copy = new AdjacencyListGraph(g.getId());\n    }\n    copyAttributes(g, copy);\n    for (int i = 0; i < g.getNodeCount(); i++) {\n        Node source = g.getNode(i);\n        Node target = copy.addNode(source.getId());\n        copyAttributes(source, target);\n    }\n    for (int i = 0; i < g.getEdgeCount(); i++) {\n        Edge source = g.getEdge(i);\n        Edge target = copy.addEdge(source.getId(), source.getSourceNode().getId(), source.getTargetNode().getId(), source.isDirected());\n        copyAttributes(source, target);\n    }\n    return copy;\n}"
            ]
        ],
        "tokensProjectClassesNonPrivateStaticAttributes": [
            [
                "version16",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static boolean version16 = false;"
            ],
            [
                "predefFractions",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[][] predefFractions = new float[11][];"
            ],
            [
                "predefFractions2",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions2 = { 0f, 1f };"
            ],
            [
                "predefFractions3",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions3 = { 0f, 0.5f, 1f };"
            ],
            [
                "predefFractions4",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions4 = { 0f, 0.33f, 0.66f, 1f };"
            ],
            [
                "predefFractions5",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions5 = { 0f, 0.25f, 0.5f, 0.75f, 1f };"
            ],
            [
                "predefFractions6",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions6 = { 0f, 0.2f, 0.4f, 0.6f, 0.8f, 1f };"
            ],
            [
                "predefFractions7",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions7 = { 0f, 0.1666f, 0.3333f, 0.4999f, 0.6666f, 0.8333f, 1f };"
            ],
            [
                "predefFractions8",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions8 = { 0f, 0.1428f, 0.2856f, 0.4284f, 0.5712f, 0.7140f, 0.8568f, 1f };"
            ],
            [
                "predefFractions9",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions9 = { 0f, 0.125f, 0.25f, 0.375f, 0.5f, 0.625f, .75f, 0.875f, 1f };"
            ],
            [
                "predefFractions10",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions10 = { 0f, 0.1111f, 0.2222f, 0.3333f, 0.4444f, 0.5555f, 0.6666f, 0.7777f, 0.8888f, 1f };"
            ],
            [
                "defaultImageCache",
                "org.graphstream.ui.swingViewer.util",
                "ImageCache",
                "/**\n * The default singleton image cache instance.\n */\nprotected static ImageCache defaultImageCache;"
            ],
            [
                "dots",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "protected static float[] dots = { 1f, 1f };"
            ],
            [
                "dashes",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "protected static float[] dashes = { 3f, 3f };"
            ],
            [
                "defaultFontCache",
                "org.graphstream.ui.swingViewer.util",
                "FontCache",
                "/**\n * The default font cache.\n */\npublic static FontCache defaultFontCache;"
            ],
            [
                "NULL_POINT2",
                "org.graphstream.ui.geom",
                "Point2",
                "// Attributes -- Shared\n/**\n * Specific point at (0,0).\n */\npublic static final Point2 NULL_POINT2 = new Point2(0, 0);"
            ],
            [
                "NULL_POINT3",
                "org.graphstream.ui.geom",
                "Point3",
                "// Attributes -- Shared\n/**\n * Specific point at (0,0,0).\n */\npublic static final Point3 NULL_POINT3 = new Point3(0, 0, 0);"
            ],
            [
                "DEFAULT_VIEW_ID",
                "org.graphstream.ui.view",
                "Viewer",
                "// Attributes\n/**\n * Name of the default view.\n */\npublic static String DEFAULT_VIEW_ID = \"defaultView\";"
            ],
            [
                "jjbitVec0",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };"
            ],
            [
                "jjnextStates",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "static final int[] jjnextStates = { 48, 49, 52, 54, 55, 65, 69, 2, 4, 6, 10, 16, 23, 33, 50, 52, 54, 55, 57, 58, 60, 61, 66, 68, 70, 71 };"
            ],
            [
                "jjstrLiteralImages",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "/**\n * Token literal values.\n */\npublic static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, \"\\56\", \"\\173\", \"\\175\", \"\\50\", \"\\51\", \"\\43\", \"\\72\", \"\\73\", \"\\54\", \"\\162\\147\\142\\141\", \"\\162\\147\\142\", null, null, null, \"\\165\\162\\154\", \"\\147\\162\\141\\160\\150\", \"\\145\\144\\147\\145\", \"\\156\\157\\144\\145\", \"\\163\\160\\162\\151\\164\\145\", \"\\146\\151\\154\\154\\55\\155\\157\\144\\145\", \"\\146\\151\\154\\154\\55\\143\\157\\154\\157\\162\", \"\\146\\151\\154\\154\\55\\151\\155\\141\\147\\145\", \"\\163\\164\\162\\157\\153\\145\\55\\155\\157\\144\\145\", \"\\163\\164\\162\\157\\153\\145\\55\\143\\157\\154\\157\\162\", \"\\163\\164\\162\\157\\153\\145\\55\\167\\151\\144\\164\\150\", \"\\163\\150\\141\\144\\157\\167\\55\\155\\157\\144\\145\", \"\\163\\150\\141\\144\\157\\167\\55\\143\\157\\154\\157\\162\", \"\\163\\150\\141\\144\\157\\167\\55\\167\\151\\144\\164\\150\", \"\\163\\150\\141\\144\\157\\167\\55\\157\\146\\146\\163\\145\\164\", \"\\164\\145\\170\\164\\55\\155\\157\\144\\145\", \"\\164\\145\\170\\164\\55\\143\\157\\154\\157\\162\", \"\\164\\145\\170\\164\\55\\163\\164\\171\\154\\145\", \"\\164\\145\\170\\164\\55\\146\\157\\156\\164\", \"\\164\\145\\170\\164\\55\\163\\151\\172\\145\", \"\\164\\145\\170\\164\\55\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\\55\\155\\157\\144\\145\", \"\\164\\145\\170\\164\\55\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\", \"\\164\\145\\170\\164\\55\\142\\141\\143\\153\\147\\162\\157\\165\\156\\144\\55\\155\\157\\144\\145\", \"\\164\\145\\170\\164\\55\\142\\141\\143\\153\\147\\162\\157\\165\\156\\144\\55\\143\\157\\154\\157\\162\", \"\\164\\145\\170\\164\\55\\157\\146\\146\\163\\145\\164\", \"\\164\\145\\170\\164\\55\\160\\141\\144\\144\\151\\156\\147\", \"\\151\\143\\157\\156\\55\\155\\157\\144\\145\", \"\\151\\143\\157\\156\", \"\\160\\141\\144\\144\\151\\156\\147\", \"\\172\\55\\151\\156\\144\\145\\170\", \"\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\\55\\155\\157\\144\\145\", \"\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\", \"\\163\\150\\141\\160\\145\", \"\\163\\151\\172\\145\", \"\\163\\151\\172\\145\\55\\155\\157\\144\\145\", \"\\163\\150\\141\\160\\145\\55\\160\\157\\151\\156\\164\\163\", \"\\164\\145\\170\\164\\55\\141\\154\\151\\147\\156\\155\\145\\156\\164\", \"\\152\\143\\157\\155\\160\\157\\156\\145\\156\\164\", \"\\141\\162\\162\\157\\167\\55\\151\\155\\141\\147\\145\", \"\\141\\162\\162\\157\\167\\55\\163\\151\\172\\145\", \"\\141\\162\\162\\157\\167\\55\\163\\150\\141\\160\\145\", \"\\163\\160\\162\\151\\164\\145\\55\\157\\162\\151\\145\\156\\164\\141\\164\\151\\157\\156\", \"\\143\\141\\156\\166\\141\\163\\55\\143\\157\\154\\157\\162\", \"\\160\\154\\141\\151\\156\", \"\\144\\171\\156\\55\\160\\154\\141\\151\\156\", \"\\144\\171\\156\\55\\163\\151\\172\\145\", \"\\144\\171\\156\\55\\151\\143\\157\\156\", \"\\144\\141\\163\\150\\145\\163\", \"\\144\\157\\164\\163\", \"\\144\\157\\165\\142\\154\\145\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\144\\151\\141\\147\\157\\156\\141\\154\\61\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\144\\151\\141\\147\\157\\156\\141\\154\\62\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\150\\157\\162\\151\\172\\157\\156\\164\\141\\154\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\162\\141\\144\\151\\141\\154\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\166\\145\\162\\164\\151\\143\\141\\154\", \"\\150\\151\\144\\144\\145\\156\", \"\\151\\155\\141\\147\\145\\55\\164\\151\\154\\145\\144\", \"\\151\\155\\141\\147\\145\\55\\163\\143\\141\\154\\145\\144\", \"\\151\\155\\141\\147\\145\\55\\163\\143\\141\\154\\145\\144\\55\\162\\141\\164\\151\\157\\55\\155\\141\\170\", \"\\151\\155\\141\\147\\145\\55\\163\\143\\141\\154\\145\\144\\55\\162\\141\\164\\151\\157\\55\\155\\151\\156\", \"\\156\\157\\156\\145\", \"\\156\\157\\162\\155\\141\\154\", \"\\164\\162\\165\\156\\143\\141\\164\\145\\144\", \"\\172\\157\\157\\155\\55\\162\\141\\156\\147\\145\", \"\\141\\164\\55\\172\\157\\157\\155\", \"\\165\\156\\144\\145\\162\\55\\172\\157\\157\\155\", \"\\157\\166\\145\\162\\55\\172\\157\\157\\155\", \"\\172\\157\\157\\155\\163\", \"\\146\\151\\164\", \"\\142\\157\\154\\144\", \"\\142\\157\\154\\144\\55\\151\\164\\141\\154\\151\\143\", \"\\151\\164\\141\\154\\151\\143\", \"\\141\\154\\157\\156\\147\", \"\\141\\164\\55\\154\\145\\146\\164\", \"\\141\\164\\55\\162\\151\\147\\150\\164\", \"\\143\\145\\156\\164\\145\\162\", \"\\154\\145\\146\\164\", \"\\162\\151\\147\\150\\164\", \"\\165\\156\\144\\145\\162\", \"\\141\\142\\157\\166\\145\", \"\\152\\165\\163\\164\\151\\146\\171\", \"\\143\\151\\162\\143\\154\\145\", \"\\164\\162\\151\\141\\156\\147\\154\\145\", \"\\146\\162\\145\\145\\160\\154\\141\\156\\145\", \"\\164\\145\\170\\164\\55\\142\\157\\170\", \"\\164\\145\\170\\164\\55\\162\\157\\165\\156\\144\\145\\144\\55\\142\\157\\170\", \"\\164\\145\\170\\164\\55\\143\\151\\162\\143\\154\\145\", \"\\164\\145\\170\\164\\55\\144\\151\\141\\155\\157\\156\\144\", \"\\164\\145\\170\\164\\55\\160\\141\\162\\141\\147\\162\\141\\160\\150\", \"\\142\\157\\170\", \"\\162\\157\\165\\156\\144\\145\\144\\55\\142\\157\\170\", \"\\143\\162\\157\\163\\163\", \"\\144\\151\\141\\155\\157\\156\\144\", \"\\160\\157\\154\\171\\147\\157\\156\", \"\\142\\165\\164\\164\\157\\156\", \"\\164\\145\\170\\164\\55\\146\\151\\145\\154\\144\", \"\\160\\141\\156\\145\\154\", \"\\154\\151\\156\\145\", \"\\160\\157\\154\\171\\154\\151\\156\\145\", \"\\160\\157\\154\\171\\154\\151\\156\\145\\55\\163\\143\\141\\154\\145\\144\", \"\\141\\156\\147\\154\\145\", \"\\143\\165\\142\\151\\143\\55\\143\\165\\162\\166\\145\", \"\\142\\154\\157\\142\", \"\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\114\\55\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\150\\157\\162\\151\\172\\157\\156\\164\\141\\154\\55\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\166\\145\\162\\164\\151\\143\\141\\154\\55\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\141\\162\\162\\157\\167\", \"\\146\\154\\157\\167\", \"\\160\\151\\145\\55\\143\\150\\141\\162\\164\", \"\\151\\155\\141\\147\\145\", \"\\151\\155\\141\\147\\145\\163\", \"\\146\\162\\157\\155\", \"\\156\\157\\144\\145\\60\", \"\\164\\157\", \"\\156\\157\\144\\145\\61\", \"\\160\\162\\157\\152\\145\\143\\164\\151\\157\\156\", \"\\143\\154\\151\\143\\153\\145\\144\", \"\\163\\145\\154\\145\\143\\164\\145\\144\", null, null };"
            ],
            [
                "lexStateNames",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "/**\n * Lexer state names.\n */\npublic static final String[] lexStateNames = { \"DEFAULT\" };"
            ],
            [
                "jjtoToken",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "static final long[] jjtoToken = { 0xfffffffffffffe01L, 0xffffffffffffffffL, 0xffffL };"
            ],
            [
                "jjtoSkip",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "static final long[] jjtoSkip = { 0x1eL, 0x0L, 0x0L };"
            ],
            [
                "colorMap",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "// Static\n/**\n * A set of colour names mapped to real AWT Colour objects.\n */\nprotected static HashMap<String, Color> colorMap;"
            ],
            [
                "sharpColor1",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Pattern to ensure a \"#FFFFFF\" colour is recognised.\n */\nprotected static Pattern sharpColor1, sharpColor2;"
            ],
            [
                "sharpColor2",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Pattern to ensure a \"#FFFFFF\" colour is recognised.\n */\nprotected static Pattern sharpColor1, sharpColor2;"
            ],
            [
                "cssColor",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Pattern to ensure a CSS style \"rgb(1,2,3)\" colour is recognised.\n */\nprotected static Pattern cssColor;"
            ],
            [
                "cssColorA",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Pattern to ensure a CSS style \"rgba(1,2,3,4)\" colour is recognised.\n */\nprotected static Pattern cssColorA;"
            ],
            [
                "awtColor",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Pattern to ensure that java.awt.Color.toString() strings are recognised\n * as colour.\n */\nprotected static Pattern awtColor;"
            ],
            [
                "hexaColor",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Pattern to ensure an hexadecimal number is a recognised colour.\n */\nprotected static Pattern hexaColor;"
            ],
            [
                "numberUnit",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Pattern to ensure a string is a Value in various units.\n */\nprotected static Pattern numberUnit, number;"
            ],
            [
                "number",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Pattern to ensure a string is a Value in various units.\n */\nprotected static Pattern numberUnit, number;"
            ],
            [
                "acceptedAttribute",
                "org.graphstream.ui.graphicGraph",
                "GraphicElement",
                "// Overriding of standard attribute changing to filter them.\nprotected static Pattern acceptedAttribute;"
            ],
            [
                "DEFAULT_AN_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_AN_FORMAT = \"%prefix%[%sourceId%:%timeId%] add node \\\"%nodeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_CNA_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CNA_FORMAT = \"%prefix%[%sourceId%:%timeId%] set node \\\"%nodeId%\\\" +\\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CNC_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CNC_FORMAT = \"%prefix%[%sourceId%:%timeId%] set node \\\"%nodeId%\\\" \\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CNR_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CNR_FORMAT = \"%prefix%[%sourceId%:%timeId%] set node \\\"%nodeId%\\\" -\\\"%attributeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_DN_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_DN_FORMAT = \"%prefix%[%sourceId%:%timeId%] remove node \\\"%nodeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_AE_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_AE_FORMAT = \"%prefix%[%sourceId%:%timeId%] add edge \\\"%edgeId%\\\" : \\\"%source%\\\" -- \\\"%target%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_CEA_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CEA_FORMAT = \"%prefix%[%sourceId%:%timeId%] set edge \\\"%edgeId%\\\" +\\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CEC_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CEC_FORMAT = \"%prefix%[%sourceId%:%timeId%] set edge \\\"%edgeId%\\\" \\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CER_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CER_FORMAT = \"%prefix%[%sourceId%:%timeId%] set edge \\\"%edgeId%\\\" -\\\"%attributeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_DE_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_DE_FORMAT = \"%prefix%[%sourceId%:%timeId%] remove edge \\\"%edgeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_CGA_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CGA_FORMAT = \"%prefix%[%sourceId%:%timeId%] set +\\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CGC_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CGC_FORMAT = \"%prefix%[%sourceId%:%timeId%] set \\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CGR_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CGR_FORMAT = \"%prefix%[%sourceId%:%timeId%] set -\\\"%attributeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_CL_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CL_FORMAT = \"%prefix%[%sourceId%:%timeId%] clear%suffix%\";"
            ],
            [
                "DEFAULT_ST_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_ST_FORMAT = \"%prefix%[%sourceId%:%timeId%] step %step% begins%suffix%\";"
            ],
            [
                "GLOBAL_ENV",
                "org.graphstream.util",
                "Environment",
                "// --------- Static attributes ---------\n/**\n * Global environment for the whole JVM. This global environment is\n * available <b>and editable</b> from everywhere. It is create as soon as\n * the {@link #getGlobalEnvironment()} static method is called if this field\n * was not yet initialized by any other mean.\n * @see #getGlobalEnvironment()\n */\npublic static Environment GLOBAL_ENV;"
            ],
            [
                "LEXICAL_ERROR",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "/*\n\t * Ordinals for various reasons why an Error of this type can be thrown.\n\t */\n/**\n * Lexical error occurred.\n */\npublic static final int LEXICAL_ERROR = 0;"
            ],
            [
                "STATIC_LEXER_ERROR",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "/**\n * An attempt was made to create a second instance of a static token\n * manager.\n */\npublic static final int STATIC_LEXER_ERROR = 1;"
            ],
            [
                "INVALID_LEXICAL_STATE",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "/**\n * Tried to change to an invalid lexical state.\n */\npublic static final int INVALID_LEXICAL_STATE = 2;"
            ],
            [
                "LOOP_DETECTED",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "/**\n * Detected (and bailed out of) an infinite loop in the token manager.\n */\npublic static final int LOOP_DETECTED = 3;"
            ],
            [
                "staticFlag",
                "org.graphstream.util.parser",
                "SimpleCharStream",
                "/**\n * Whether parser is static.\n */\npublic static final boolean staticFlag = false;"
            ],
            [
                "ABBREVIATED_WEEKDAY_NAME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent ABBREVIATED_WEEKDAY_NAME = new NotImplementedComponent(\"%a\", \"\\\\w+[.]\");"
            ],
            [
                "FULL_WEEKDAY_NAME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent FULL_WEEKDAY_NAME = new NotImplementedComponent(\"%A\", \"\\\\w+\");"
            ],
            [
                "ABBREVIATED_MONTH_NAME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent ABBREVIATED_MONTH_NAME = new NotImplementedComponent(\"%b\", \"\\\\w+[.]\");"
            ],
            [
                "FULL_MONTH_NAME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent FULL_MONTH_NAME = new NotImplementedComponent(\"%B\", \"\\\\w+\");"
            ],
            [
                "LOCALE_DATE_AND_TIME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent LOCALE_DATE_AND_TIME = new NotImplementedComponent(\"%c\", null);"
            ],
            [
                "CENTURY",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent CENTURY = new NotImplementedComponent(\"%C\", \"\\\\d\\\\d\");"
            ],
            [
                "DAY_OF_MONTH_2_DIGITS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DAY_OF_MONTH_2_DIGITS = new FieldComponent(\"%d\", \"[012]\\\\d|3[01]\", Calendar.DAY_OF_MONTH, \"%02d\");"
            ],
            [
                "DATE",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DATE = new AliasComponent(\"%D\", \"%m/%d/%y\");"
            ],
            [
                "DAY_OF_MONTH",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DAY_OF_MONTH = new FieldComponent(\"%e\", \"\\\\d|[12]\\\\d|3[01]\", Calendar.DAY_OF_MONTH, \"%2d\");"
            ],
            [
                "DATE_ISO8601",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DATE_ISO8601 = new AliasComponent(\"%F\", \"%Y-%m-%d\");"
            ],
            [
                "WEEK_BASED_YEAR_2_DIGITS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent WEEK_BASED_YEAR_2_DIGITS = new FieldComponent(\"%g\", \"\\\\d\\\\d\", Calendar.YEAR, \"%02d\");"
            ],
            [
                "WEEK_BASED_YEAR_4_DIGITS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent WEEK_BASED_YEAR_4_DIGITS = new FieldComponent(\"%G\", \"\\\\d{4}\", Calendar.YEAR, \"%04d\");"
            ],
            [
                "ABBREVIATED_MONTH_NAME_ALIAS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent ABBREVIATED_MONTH_NAME_ALIAS = new AliasComponent(\"%h\", \"%b\");"
            ],
            [
                "HOUR_OF_DAY",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent HOUR_OF_DAY = new FieldComponent(\"%H\", \"[01]\\\\d|2[0123]\", Calendar.HOUR_OF_DAY, \"%02d\");"
            ],
            [
                "HOUR",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent HOUR = new FieldComponent(\"%I\", \"0\\\\d|1[012]\", Calendar.HOUR, \"%02d\");"
            ],
            [
                "DAY_OF_YEAR",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DAY_OF_YEAR = new FieldComponent(\"%j\", \"[012]\\\\d\\\\d|3[0-5]\\\\d|36[0-6]\", Calendar.DAY_OF_YEAR, \"%03d\");"
            ],
            [
                "MILLISECOND",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent MILLISECOND = new FieldComponent(\"%k\", \"\\\\d{3}\", Calendar.MILLISECOND, \"%03d\");"
            ],
            [
                "EPOCH",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent EPOCH = new EpochComponent();"
            ],
            [
                "MONTH",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent MONTH = new FieldComponent(\"%m\", \"0[1-9]|1[012]\", Calendar.MONTH, -1, \"%02d\");"
            ],
            [
                "MINUTE",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent MINUTE = new FieldComponent(\"%M\", \"[0-5]\\\\d\", Calendar.MINUTE, \"%02d\");"
            ],
            [
                "NEW_LINE",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent NEW_LINE = new AliasComponent(\"%n\", \"\\n\");"
            ],
            [
                "AM_PM",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent AM_PM = new AMPMComponent();"
            ],
            [
                "LOCALE_CLOCK_TIME_12_HOUR",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent LOCALE_CLOCK_TIME_12_HOUR = new NotImplementedComponent(\"%r\", \"\");"
            ],
            [
                "HOUR_AND_MINUTE",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent HOUR_AND_MINUTE = new AliasComponent(\"%R\", \"%H:%M\");"
            ],
            [
                "SECOND",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent SECOND = new FieldComponent(\"%S\", \"[0-5]\\\\d|60\", Calendar.SECOND, \"%02d\");"
            ],
            [
                "TABULATION",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent TABULATION = new AliasComponent(\"%t\", \"\\t\");"
            ],
            [
                "TIME_ISO8601",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent TIME_ISO8601 = new AliasComponent(\"%T\", \"%H:%M:%S\");"
            ],
            [
                "DAY_OF_WEEK_1_7",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DAY_OF_WEEK_1_7 = new FieldComponent(\"%u\", \"[1-7]\", Calendar.DAY_OF_WEEK, -1, \"%1d\");"
            ],
            [
                "WEEK_OF_YEAR_FROM_SUNDAY",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent WEEK_OF_YEAR_FROM_SUNDAY = new FieldComponent(\"%U\", \"[0-4]\\\\d|5[0123]\", Calendar.WEEK_OF_YEAR, 1, \"%2d\");"
            ],
            [
                "WEEK_NUMBER_ISO8601",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent WEEK_NUMBER_ISO8601 = new NotImplementedComponent(\"%V\", \"0[1-9]|[2-4]\\\\d|5[0123]\");"
            ],
            [
                "DAY_OF_WEEK_0_6",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DAY_OF_WEEK_0_6 = new FieldComponent(\"%w\", \"[0-6]\", Calendar.DAY_OF_WEEK, \"%01d\");"
            ],
            [
                "WEEK_OF_YEAR_FROM_MONDAY",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent WEEK_OF_YEAR_FROM_MONDAY = new FieldComponent(\"%W\", \"[0-4]\\\\d|5[0123]\", Calendar.WEEK_OF_YEAR, \"%02d\");"
            ],
            [
                "LOCALE_DATE_REPRESENTATION",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent LOCALE_DATE_REPRESENTATION = new NotImplementedComponent(\"%x\", \"\");"
            ],
            [
                "LOCALE_TIME_REPRESENTATION",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent LOCALE_TIME_REPRESENTATION = new NotImplementedComponent(\"%X\", \"\");"
            ],
            [
                "YEAR_2_DIGITS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent YEAR_2_DIGITS = new FieldComponent(\"%y\", \"\\\\d\\\\d\", Calendar.YEAR, \"%02d\");"
            ],
            [
                "YEAR_4_DIGITS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent YEAR_4_DIGITS = new FieldComponent(\"%Y\", \"\\\\d{4}\", Calendar.YEAR, \"%04d\");"
            ],
            [
                "UTC_OFFSET",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent UTC_OFFSET = new UTCOffsetComponent();"
            ],
            [
                "LOCALE_TIME_ZONE_NAME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent LOCALE_TIME_ZONE_NAME = new NotImplementedComponent(\"%Z\", \"\\\\w*\");"
            ],
            [
                "PERCENT",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent PERCENT = new AliasComponent(\"%%\", \"%\");"
            ],
            [
                "jjbitVec0",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };"
            ],
            [
                "jjnextStates",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "static final int[] jjnextStates = { 5, 6, 8, 9, 13, 14 };"
            ],
            [
                "jjstrLiteralImages",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "/**\n * Token literal values.\n */\npublic static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, \"\\133\", \"\\135\", null, null, null, null, null, null };"
            ],
            [
                "lexStateNames",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "/**\n * Lexer state names.\n */\npublic static final String[] lexStateNames = { \"DEFAULT\" };"
            ],
            [
                "jjtoToken",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "static final long[] jjtoToken = { 0xff01L };"
            ],
            [
                "jjtoSkip",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "static final long[] jjtoSkip = { 0x1eL };"
            ],
            [
                "jjbitVec0",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };"
            ],
            [
                "jjnextStates",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "static final int[] jjnextStates = { 54, 11, 12, 15, 17, 18, 1, 2, 5, 47, 52, 8, 9, 20, 21 };"
            ],
            [
                "jjstrLiteralImages",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "/**\n * Token literal values.\n */\npublic static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, null, \"\\50\", \"\\51\", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null };"
            ],
            [
                "lexStateNames",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "/**\n * Lexer state names.\n */\npublic static final String[] lexStateNames = { \"DEFAULT\" };"
            ],
            [
                "jjtoToken",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "static final long[] jjtoToken = { 0xffffc01L };"
            ],
            [
                "jjtoSkip",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "static final long[] jjtoSkip = { 0x7eL };"
            ],
            [
                "XYZ_ATTR",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "/**\n * Node attribute storing coordinates.\n */\npublic static final String XYZ_ATTR = \"xyz\";"
            ],
            [
                "WIDTH_ATTR",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "/**\n * Graph attribute storing width of the TikZ picture.\n */\npublic static final String WIDTH_ATTR = \"ui.tikz.width\";"
            ],
            [
                "HEIGHT_ATTR",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "/**\n * Graph attribute storing height of the TikZ picture.\n */\npublic static final String HEIGHT_ATTR = \"ui.tikz.height\";"
            ],
            [
                "DEFAULT_WIDTH",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "public static final double DEFAULT_WIDTH = 10;"
            ],
            [
                "DEFAULT_HEIGHT",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "public static final double DEFAULT_HEIGHT = 10;"
            ],
            [
                "DISPLAY_MIN_SIZE_IN_MM",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "/**\n * Define the default minimum size of nodes when using a dynamic size. This\n * size is in millimeter.\n */\npublic static final double DISPLAY_MIN_SIZE_IN_MM = 2;"
            ],
            [
                "DISPLAY_MAX_SIZE_IN_MM",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "/**\n * Define the default maximum size of nodes when using a dynamic size. This\n * size is in millimeter.\n */\npublic static final double DISPLAY_MAX_SIZE_IN_MM = 10;"
            ],
            [
                "jjbitVec0",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };"
            ],
            [
                "jjnextStates",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "static final int[] jjnextStates = { 21, 27, 8, 10, 11, 18, 19, 22, 23, 26, 1, 2, 13, 14 };"
            ],
            [
                "jjstrLiteralImages",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "/**\n * Token literal values.\n */\npublic static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, null, \"\\133\", \"\\135\", \"\\173\", \"\\175\", \"\\72\", \"\\54\", \"\\75\", null, null, null, null, null, null, null, null, null, null, \"\\73\", null, null, null, null, null, null, null, null, null, \"\\137\" };"
            ],
            [
                "lexStateNames",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "/**\n * Lexer state names.\n */\npublic static final String[] lexStateNames = { \"DEFAULT\" };"
            ],
            [
                "jjtoToken",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "static final long[] jjtoToken = { 0x3ffffffc01L };"
            ],
            [
                "jjtoSkip",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "static final long[] jjtoSkip = { 0x7eL };"
            ],
            [
                "jjbitVec0",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };"
            ],
            [
                "jjnextStates",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "static final int[] jjnextStates = { 21, 22, 23, 17, 19, 2, 3, 5, 6, 8, 9 };"
            ],
            [
                "jjstrLiteralImages",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "/**\n * Token literal values.\n */\npublic static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null };"
            ],
            [
                "lexStateNames",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "/**\n * Lexer state names.\n */\npublic static final String[] lexStateNames = { \"DEFAULT\" };"
            ],
            [
                "jjtoToken",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "static final long[] jjtoToken = { 0x3fffffffffffc9L };"
            ],
            [
                "jjtoSkip",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "static final long[] jjtoSkip = { 0x6L };"
            ],
            [
                "XMLNS",
                "org.graphstream.stream.file.gexf",
                "GEXF",
                "public static final String XMLNS = \"http://www.gexf.net/1.2draft\";"
            ],
            [
                "XMLNS_XSI",
                "org.graphstream.stream.file.gexf",
                "GEXF",
                "public static final String XMLNS_XSI = \"http://www.w3.org/2001/XMLSchema-instance\";"
            ],
            [
                "XMLNS_SL",
                "org.graphstream.stream.file.gexf",
                "GEXF",
                "public static final String XMLNS_SL = \"http://www.gexf.net/1.2draft http://www.gexf.net/1.2draft/gexf.xsd\";"
            ],
            [
                "XMLNS_VIZ",
                "org.graphstream.stream.file.gexf",
                "GEXF",
                "public static final String XMLNS_VIZ = \"http://www.gexf.net/1.2draft/viz\";"
            ],
            [
                "VERSION",
                "org.graphstream.stream.file.gexf",
                "GEXF",
                "public static final String VERSION = \"1.2\";"
            ],
            [
                "BUFFER_SIZE",
                "org.graphstream.stream.file.dgs",
                "DGSParser",
                "protected static final int BUFFER_SIZE = 4096;"
            ],
            [
                "ARRAY_OPEN",
                "org.graphstream.stream.file.dgs",
                "DGSParser",
                "public static final int ARRAY_OPEN = '{';"
            ],
            [
                "ARRAY_CLOSE",
                "org.graphstream.stream.file.dgs",
                "DGSParser",
                "public static final int ARRAY_CLOSE = '}';"
            ],
            [
                "MAP_OPEN",
                "org.graphstream.stream.file.dgs",
                "DGSParser",
                "public static final int MAP_OPEN = '[';"
            ],
            [
                "MAP_CLOSE",
                "org.graphstream.stream.file.dgs",
                "DGSParser",
                "public static final int MAP_CLOSE = ']';"
            ],
            [
                "gradientId",
                "org.graphstream.stream.file",
                "FileSinkSVG2",
                "static int gradientId = 0;"
            ],
            [
                "gradientId",
                "org.graphstream.stream.file",
                "SVGStyle",
                "static int gradientId = 0;"
            ],
            [
                "TIME_PREFIX",
                "org.graphstream.stream",
                "Timeline",
                "public static final String TIME_PREFIX = \"time\";"
            ],
            [
                "SYNC_DISABLE_KEY",
                "org.graphstream.stream.sync",
                "SinkTime",
                "/**\n * Key used to disable synchro. Just run : java -DSYNC_DISABLE_KEY ...\n */\npublic static final String SYNC_DISABLE_KEY = \"org.graphstream.stream.sync.disable\";"
            ],
            [
                "disableSync",
                "org.graphstream.stream.sync",
                "SinkTime",
                "/**\n * Flag used to disable sync.\n */\nprotected static final boolean disableSync;"
            ],
            [
                "LIGHT_YELLOW",
                "org.graphstream.stream.netstream",
                "NetStreamReceiver",
                "protected static final String LIGHT_YELLOW = \"\u001b[33;1m\";"
            ],
            [
                "RESET",
                "org.graphstream.stream.netstream",
                "NetStreamReceiver",
                "protected static final String RESET = \"\u001b[0m\";"
            ],
            [
                "BUFFER_INITIAL_SIZE",
                "org.graphstream.stream.netstream",
                "NetStreamReceiver",
                "// Attributes\n// 65535, 4096\nprotected static final int BUFFER_INITIAL_SIZE = 8192;"
            ],
            [
                "BUFFER_INITIAL_SIZE",
                "org.graphstream.stream.netstream",
                "IncomingBuffer",
                "// Attributes\n// 65535, 4096\nprotected static final int BUFFER_INITIAL_SIZE = 8192;"
            ],
            [
                "EVENT_GETVERSION",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by an 32-bit signed integer for this protocol version. Certainly\n * useless.\n */\npublic static int EVENT_GETVERSION = 0x00;"
            ],
            [
                "EVENT_START",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Not used.\n */\npublic static int EVENT_START = 0x01;"
            ],
            [
                "EVENT_END",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Constant indicating that the client has disconnected.\n */\npublic static int EVENT_END = 0x02;"
            ],
            [
                "EVENT_ADD_NODE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "//\n// ----------------------------------\n// GraphStream's graph events\n// ----------------------------------\n//\n/**\n * Followed by a node id (TYPE_STRING format)\n */\npublic static int EVENT_ADD_NODE = 0x10;"
            ],
            [
                "EVENT_DEL_NODE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by a node id (TYPE_STRING format)\n */\npublic static int EVENT_DEL_NODE = 0x11;"
            ],
            [
                "EVENT_ADD_EDGE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - an edge id (TYPE_STRING format), - an source node id\n * (TYPE_STRING format), - a target node id (TYPE_STRING format - a boolean\n * indicating if directed (TYPE_BOOLEAN format)\n */\npublic static int EVENT_ADD_EDGE = 0x12;"
            ],
            [
                "EVENT_DEL_EDGE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by an edge id (TYPE_STRING format)\n */\npublic static int EVENT_DEL_EDGE = 0x13;"
            ],
            [
                "EVENT_STEP",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by double (TYPE_DOUBLE format)\n */\npublic static int EVENT_STEP = 0x14;"
            ],
            [
                "EVENT_CLEARED",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n */\npublic static int EVENT_CLEARED = 0x15;"
            ],
            [
                "EVENT_ADD_GRAPH_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - an attribute id (TYPE_STRING format) - the attribute TYPE -\n * the attribute value\n */\npublic static int EVENT_ADD_GRAPH_ATTR = 0x16;"
            ],
            [
                "EVENT_CHG_GRAPH_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - an attribute id (TYPE_STRING format) - the attribute TYPE -\n * the attribute old value - the attribute new value\n */\npublic static int EVENT_CHG_GRAPH_ATTR = 0x17;"
            ],
            [
                "EVENT_DEL_GRAPH_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - the attribute id (TYPE_STRING format)\n */\npublic static int EVENT_DEL_GRAPH_ATTR = 0x18;"
            ],
            [
                "EVENT_ADD_NODE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - an attribute id (TYPE_STRING format) - the attribute TYPE -\n * the attribute value\n */\npublic static int EVENT_ADD_NODE_ATTR = 0x19;"
            ],
            [
                "EVENT_CHG_NODE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - an attribute id (TYPE_STRING format) - the attribute TYPE -\n * the attribute old value - the attribute new value\n */\npublic static int EVENT_CHG_NODE_ATTR = 0x1a;"
            ],
            [
                "EVENT_DEL_NODE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - the node id (TYPE_STRING format) - the attribute id\n * (TYPE_STRING format)\n */\npublic static int EVENT_DEL_NODE_ATTR = 0x1b;"
            ],
            [
                "EVENT_ADD_EDGE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - an attribute id (TYPE_STRING format) - the attribute TYPE -\n * the attribute value\n */\npublic static int EVENT_ADD_EDGE_ATTR = 0x1c;"
            ],
            [
                "EVENT_CHG_EDGE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - an attribute id (TYPE_STRING format) - the attribute TYPE -\n * the attribute old value - the attribute new value\n */\npublic static int EVENT_CHG_EDGE_ATTR = 0x1d;"
            ],
            [
                "EVENT_DEL_EDGE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - the edge id (TYPE_STRING format) - the attribute id\n * (TYPE_STRING format)\n */\npublic static int EVENT_DEL_EDGE_ATTR = 0x1e;"
            ],
            [
                "TYPE_UNKNOWN",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "// Values types\npublic static int TYPE_UNKNOWN = 0x00;"
            ],
            [
                "TYPE_BOOLEAN",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by a byte who's value is 0 or 1\n */\npublic static int TYPE_BOOLEAN = 0x50;"
            ],
            [
                "TYPE_BOOLEAN_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * An array of booleans. Followed by first, a 16-bits integer for the number\n * of booleans and then, a list of bytes who's value is 0 or 1\n */\npublic static int TYPE_BOOLEAN_ARRAY = 0x51;"
            ],
            [
                "TYPE_BYTE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by a signed byte [-127,127]\n */\npublic static int TYPE_BYTE = 0x52;"
            ],
            [
                "TYPE_BYTE_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * An array of bytes. Followed by first, a 16-bits integer for the number of\n * integers and then, a list of signed bytes.\n */\npublic static int TYPE_BYTE_ARRAY = 0x53;"
            ],
            [
                "TYPE_SHORT",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by an 16-bit signed integer (a short)\n */\npublic static int TYPE_SHORT = 0x54;"
            ],
            [
                "TYPE_SHORT_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * An array of shorts. Followed by first, a 16-bits integer for the number\n * of integers and then, a list of 16-bit signed shorts\n */\npublic static int TYPE_SHORT_ARRAY = 0x55;"
            ],
            [
                "TYPE_INT",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by an 32-bit signed integer\n */\npublic static int TYPE_INT = 0x56;"
            ],
            [
                "TYPE_INT_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * An array of integers. Followed by first, a 16-bits integer for the number\n * of integers and then, a list of 32-bit signed integers\n */\npublic static int TYPE_INT_ARRAY = 0x57;"
            ],
            [
                "TYPE_LONG",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by an 64-bit signed integer\n */\npublic static int TYPE_LONG = 0x58;"
            ],
            [
                "TYPE_LONG_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * An array of longs. Followed by first, a 16-bits integer for the number of\n * longs and then, a list of 62-bit signed integers\n */\npublic static int TYPE_LONG_ARRAY = 0x59;"
            ],
            [
                "TYPE_FLOAT",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by a single precision 32-bits floating point number\n */\npublic static int TYPE_FLOAT = 0x5a;"
            ],
            [
                "TYPE_FLOAT_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Array of double. Followed by first, a 16-bits integer for the number of\n * floats and then, a list of 32-bit floats\n */\npublic static int TYPE_FLOAT_ARRAY = 0x5b;"
            ],
            [
                "TYPE_DOUBLE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by a double precision 64-bits floating point number\n */\npublic static int TYPE_DOUBLE = 0x5c;"
            ],
            [
                "TYPE_DOUBLE_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Array of double. Followed by first, a 16-bits integer for the number of\n * doubles and then, a list of 64-bit doubles\n */\npublic static int TYPE_DOUBLE_ARRAY = 0x5d;"
            ],
            [
                "TYPE_STRING",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Array of characters. Followed by first, a 16-bits integer for the size in\n * bytes (not in number of characters) of the string, then by the unicode\n * string\n */\npublic static int TYPE_STRING = 0x5e;"
            ],
            [
                "TYPE_RAW",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Raw data, good for serialization. Followed by first, a 16-bits integer\n * indicating the length in bytes of the dataset, and then the data itself.\n */\npublic static int TYPE_RAW = 0x5f;"
            ],
            [
                "TYPE_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * An type-unspecified array. Followed by first, a 16-bits integer\n * indicating the number of elements, and then, the elements themselves. The\n * elements themselves have to give their type.\n */\npublic static byte TYPE_ARRAY = 0x60;"
            ],
            [
                "TYPE_NULL",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_NULL = 0x61;"
            ],
            [
                "COMMAND",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n *  Constant that indicates that this message is a COMMAND, not and EVENT.\n *\n *  For now it is followed by a string that has to be parssed at the application level.\n *\n *  THIS IS EXPERIMENTAL AND MAY (WILL) CHANGE !\n */\npublic static int COMMAND = 0x70;"
            ],
            [
                "NO_OPTIONS",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/* ********  P U B L I C   F I E L D S  ******** */\n/**\n * No options specified. Value is zero.\n */\npublic final static int NO_OPTIONS = 0;"
            ],
            [
                "ENCODE",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Specify encoding in first bit. Value is one.\n */\npublic final static int ENCODE = 1;"
            ],
            [
                "DECODE",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Specify decoding in first bit. Value is zero.\n */\npublic final static int DECODE = 0;"
            ],
            [
                "GZIP",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Specify that data should be gzip-compressed in second bit. Value is two.\n */\npublic final static int GZIP = 2;"
            ],
            [
                "DONT_GUNZIP",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Specify that gzipped data should <em>not</em> be automatically gunzipped.\n */\npublic final static int DONT_GUNZIP = 4;"
            ],
            [
                "DO_BREAK_LINES",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Do break lines when encoding. Value is 8.\n */\npublic final static int DO_BREAK_LINES = 8;"
            ],
            [
                "URL_SAFE",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Encode using Base64-like encoding that is URL- and Filename-safe as described\n * in Section 4 of RFC3548:\n * <a href=\"http://www.faqs.org/rfcs/rfc3548.html\">http://www.faqs.org/rfcs/rfc3548.html</a>.\n * It is important to note that data encoded this way is <em>not</em> officially valid Base64,\n * or at the very least should not be called Base64 without also specifying that is\n * was encoded using the URL- and Filename-safe dialect.\n */\npublic final static int URL_SAFE = 16;"
            ],
            [
                "ORDERED",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Encode using the special \"ordered\" dialect of Base64 described here:\n * <a href=\"http://www.faqs.org/qa/rfcc-1940.html\">http://www.faqs.org/qa/rfcc-1940.html</a>.\n */\npublic final static int ORDERED = 32;"
            ],
            [
                "INITIAL_EDGE_CAPACITY",
                "org.graphstream.graph.implementations",
                "AdjacencyListNode",
                "protected static final int INITIAL_EDGE_CAPACITY;"
            ],
            [
                "GROWTH_FACTOR",
                "org.graphstream.graph.implementations",
                "AdjacencyListNode",
                "protected static final double GROWTH_FACTOR = 1.1;"
            ],
            [
                "I_EDGE",
                "org.graphstream.graph.implementations",
                "AdjacencyListNode",
                "protected static final char I_EDGE = 0;"
            ],
            [
                "IO_EDGE",
                "org.graphstream.graph.implementations",
                "AdjacencyListNode",
                "protected static final char IO_EDGE = 1;"
            ],
            [
                "O_EDGE",
                "org.graphstream.graph.implementations",
                "AdjacencyListNode",
                "protected static final char O_EDGE = 2;"
            ],
            [
                "GROW_FACTOR",
                "org.graphstream.graph.implementations",
                "AdjacencyListGraph",
                "public static final double GROW_FACTOR = 1.1;"
            ],
            [
                "DEFAULT_NODE_CAPACITY",
                "org.graphstream.graph.implementations",
                "AdjacencyListGraph",
                "public static final int DEFAULT_NODE_CAPACITY = 128;"
            ],
            [
                "DEFAULT_EDGE_CAPACITY",
                "org.graphstream.graph.implementations",
                "AdjacencyListGraph",
                "public static final int DEFAULT_EDGE_CAPACITY = 1024;"
            ]
        ],
        "tokensMethodJavadocValues": [],
        "tokensMethodArguments": [
            [
                "id",
                "java.lang",
                "String"
            ],
            [
                "renderer",
                "org.graphstream.ui.swingViewer",
                "GraphRenderer"
            ]
        ],
        "tokensMethodVariablesNonPrivateNonStaticNonVoidMethods": [
            [
                "newGGId",
                "org.graphstream.ui.view",
                "Viewer",
                "/**\n * Create a new unique identifier for a graph.\n *\n * @return The new identifier.\n */\nprotected String newGGId() {\n    return String.format(\"GraphicGraph_%d\", (int) (Math.random() * 10000));\n}"
            ],
            [
                "getDefaultView",
                "org.graphstream.ui.view",
                "Viewer",
                "/**\n * The default view. This is a shortcut to a call to\n * {@link #getView(String)} with {@link #DEFAULT_VIEW_ID} as parameter.\n *\n * @return The default view or null if no default view has been installed.\n */\npublic ViewPanel getDefaultView() {\n    return (DefaultView) getView(DEFAULT_VIEW_ID);\n}"
            ],
            [
                "addView",
                "org.graphstream.ui.view",
                "Viewer",
                "/**\n * Add a view using its identifier. If there was already a view with this\n * identifier, it is closed and returned (if different of the one added).\n *\n * @param view\n *            The view to add.\n * @return The old view that was at the given identifier, if any, else null.\n */\npublic View addView(View view) {\n    synchronized (views) {\n        View old = views.put(view.getId(), view);\n        if (old != null && old != view)\n            old.close(graph);\n        return old;\n    }\n}"
            ],
            [
                "addView",
                "org.graphstream.ui.view",
                "Viewer",
                "/**\n * Add a new default view with a specific renderer. If a view with the same\n * id exists, it is removed and closed. By default the view is open in a\n * frame.\n *\n * @param id\n *            The new view identifier.\n * @param renderer\n *            The renderer to use.\n * @return The created view.\n */\npublic ViewPanel addView(String id, GraphRenderer renderer) {\n    return addView(id, renderer, true);\n}"
            ],
            [
                "toString",
                "java.lang",
                "Object",
                "public String toString()"
            ],
            [
                "newViewerPipe",
                "org.graphstream.ui.view",
                "Viewer",
                "/**\n * New viewer pipe on the events coming from the viewer through a thread.\n *\n * @return The new viewer pipe.\n */\npublic ViewerPipe newViewerPipe() {\n    ThreadProxyPipe tpp = new ThreadProxyPipe();\n    tpp.init(graph, false);\n    enableXYZfeedback(true);\n    return new ViewerPipe(String.format(\"viewer_%d\", (int) (Math.random() * 10000)), tpp);\n}"
            ],
            [
                "getView",
                "org.graphstream.ui.view",
                "Viewer",
                "/**\n * The view that correspond to the given identifier.\n *\n * @param id\n *            The view identifier.\n * @return A view or null if not found.\n */\npublic View getView(String id) {\n    synchronized (views) {\n        return views.get(id);\n    }\n}"
            ],
            [
                "getCloseFramePolicy",
                "org.graphstream.ui.view",
                "Viewer",
                "/**\n * What to do when a frame is closed.\n */\npublic CloseFramePolicy getCloseFramePolicy() {\n    return closeFramePolicy;\n}"
            ],
            [
                "newThreadProxyOnGraphicGraph",
                "org.graphstream.ui.view",
                "Viewer",
                "/**\n * New proxy pipe on events coming from the viewer through a thread.\n *\n * @return The new proxy pipe.\n */\npublic ProxyPipe newThreadProxyOnGraphicGraph() {\n    ThreadProxyPipe tpp = new ThreadProxyPipe();\n    tpp.init(graph);\n    return tpp;\n}"
            ],
            [
                "addView",
                "org.graphstream.ui.view",
                "Viewer",
                "/**\n * Same as {@link #addView(String, GraphRenderer)} but allows to specify\n * that the view uses a frame or not.\n *\n * @param id\n *            The new view identifier.\n * @param renderer\n *            The renderer to use.\n * @param openInAFrame\n *            If true the view is open in a frame, else the returned view is\n *            a JPanel that can be inserted in a GUI.\n * @return The created view.\n */\npublic ViewPanel addView(String id, GraphRenderer renderer, boolean openInAFrame) {\n    synchronized (views) {\n        DefaultView view = new DefaultView(this, id, renderer);\n        addView(view);\n        if (openInAFrame)\n            view.openInAFrame(true);\n        return view;\n    }\n}"
            ],
            [
                "getClass",
                "java.lang",
                "Object",
                "public final native Class<? extends Object> getClass()"
            ],
            [
                "getGraphicGraph",
                "org.graphstream.ui.view",
                "Viewer",
                "/**\n * The underlying graphic graph. Caution : Use the returned graph only in\n * the Swing thread !!\n */\npublic GraphicGraph getGraphicGraph() {\n    return graph;\n}"
            ],
            [
                "hashCode",
                "java.lang",
                "Object",
                "public native int hashCode()"
            ],
            [
                "clone",
                "java.lang",
                "Object",
                "protected native Object clone() throws CloneNotSupportedException"
            ],
            [
                "equals",
                "java.lang",
                "Object",
                "public boolean equals(Object arg0)"
            ],
            [
                "addDefaultView",
                "org.graphstream.ui.view",
                "Viewer",
                "// Command\n/**\n * Build the default graph view and insert it. The view identifier is\n * {@link #DEFAULT_VIEW_ID}. You can request the view to be open in its own\n * frame.\n *\n * @param openInAFrame\n *            It true, the view is placed in a frame, else the view is only\n *            created and you must embed it yourself in your application.\n */\npublic ViewPanel addDefaultView(boolean openInAFrame) {\n    synchronized (views) {\n        DefaultView view = new DefaultView(this, DEFAULT_VIEW_ID, newGraphRenderer());\n        addView(view);\n        if (openInAFrame)\n            view.openInAFrame(true);\n        return view;\n    }\n}"
            ],
            [
                "regionMatches",
                "java.lang",
                "String",
                "public boolean regionMatches(int arg0, String arg1, int arg2, int arg3)"
            ],
            [
                "chars",
                "java.lang",
                "String",
                "public IntStream chars()"
            ],
            [
                "isLatin1",
                "java.lang",
                "String",
                "boolean isLatin1()"
            ],
            [
                "hashCode",
                "java.lang",
                "String",
                "public int hashCode()"
            ],
            [
                "stripTrailing",
                "java.lang",
                "String",
                "public String stripTrailing()"
            ],
            [
                "indexOf",
                "java.lang",
                "String",
                "public int indexOf(int arg0, int arg1)"
            ],
            [
                "codePointCount",
                "java.lang",
                "String",
                "public int codePointCount(int arg0, int arg1)"
            ],
            [
                "codePoints",
                "java.lang",
                "String",
                "public IntStream codePoints()"
            ],
            [
                "resolveConstantDesc",
                "java.lang",
                "String",
                "public String resolveConstantDesc(MethodHandles.Lookup arg0)"
            ],
            [
                "contains",
                "java.lang",
                "String",
                "public boolean contains(CharSequence arg0)"
            ],
            [
                "stripIndent",
                "java.lang",
                "String",
                "public String stripIndent()"
            ],
            [
                "charAt",
                "java.lang",
                "String",
                "public char charAt(int arg0)"
            ],
            [
                "lines",
                "java.lang",
                "String",
                "public Stream<String> lines()"
            ],
            [
                "split",
                "java.lang",
                "String",
                "public String[] split(String arg0, int arg1)"
            ],
            [
                "codePointAt",
                "java.lang",
                "String",
                "public int codePointAt(int arg0)"
            ],
            [
                "replace",
                "java.lang",
                "String",
                "public String replace(CharSequence arg0, CharSequence arg1)"
            ],
            [
                "lastIndexOf",
                "java.lang",
                "String",
                "public int lastIndexOf(int arg0, int arg1)"
            ],
            [
                "startsWith",
                "java.lang",
                "String",
                "public boolean startsWith(String arg0, int arg1)"
            ],
            [
                "stripLeading",
                "java.lang",
                "String",
                "public String stripLeading()"
            ],
            [
                "length",
                "java.lang",
                "String",
                "public int length()"
            ],
            [
                "indexOf",
                "java.lang",
                "String",
                "public int indexOf(String arg0)"
            ],
            [
                "subSequence",
                "java.lang",
                "String",
                "public CharSequence subSequence(int arg0, int arg1)"
            ],
            [
                "regionMatches",
                "java.lang",
                "String",
                "public boolean regionMatches(boolean arg0, int arg1, String arg2, int arg3, int arg4)"
            ],
            [
                "strip",
                "java.lang",
                "String",
                "public String strip()"
            ],
            [
                "isEmpty",
                "java.lang",
                "String",
                "public boolean isEmpty()"
            ],
            [
                "codePointBefore",
                "java.lang",
                "String",
                "public int codePointBefore(int arg0)"
            ],
            [
                "toLowerCase",
                "java.lang",
                "String",
                "public String toLowerCase()"
            ],
            [
                "matches",
                "java.lang",
                "String",
                "public boolean matches(String arg0)"
            ],
            [
                "getBytes",
                "java.lang",
                "String",
                "public byte[] getBytes(String arg0) throws UnsupportedEncodingException"
            ],
            [
                "replaceFirst",
                "java.lang",
                "String",
                "public String replaceFirst(String arg0, String arg1)"
            ],
            [
                "equals",
                "java.lang",
                "String",
                "public boolean equals(Object arg0)"
            ],
            [
                "indent",
                "java.lang",
                "String",
                "public String indent(int arg0)"
            ],
            [
                "contentEquals",
                "java.lang",
                "String",
                "public boolean contentEquals(CharSequence arg0)"
            ],
            [
                "startsWith",
                "java.lang",
                "String",
                "public boolean startsWith(String arg0)"
            ],
            [
                "isBlank",
                "java.lang",
                "String",
                "public boolean isBlank()"
            ],
            [
                "intern",
                "java.lang",
                "String",
                "public native String intern()"
            ],
            [
                "concat",
                "java.lang",
                "String",
                "public String concat(String arg0)"
            ],
            [
                "lastIndexOf",
                "java.lang",
                "String",
                "public int lastIndexOf(String arg0)"
            ],
            [
                "toCharArray",
                "java.lang",
                "String",
                "public char[] toCharArray()"
            ],
            [
                "substring",
                "java.lang",
                "String",
                "public String substring(int arg0, int arg1)"
            ],
            [
                "lastIndexOf",
                "java.lang",
                "String",
                "public int lastIndexOf(String arg0, int arg1)"
            ],
            [
                "value",
                "java.lang",
                "String",
                "byte[] value()"
            ],
            [
                "translateEscapes",
                "java.lang",
                "String",
                "public String translateEscapes()"
            ],
            [
                "replace",
                "java.lang",
                "String",
                "public String replace(char arg0, char arg1)"
            ],
            [
                "getBytes",
                "java.lang",
                "String",
                "public byte[] getBytes()"
            ],
            [
                "toUpperCase",
                "java.lang",
                "String",
                "public String toUpperCase(Locale arg0)"
            ],
            [
                "split",
                "java.lang",
                "String",
                "public String[] split(String arg0)"
            ],
            [
                "repeat",
                "java.lang",
                "String",
                "public String repeat(int arg0)"
            ],
            [
                "describeConstable",
                "java.lang",
                "String",
                "public Optional<String> describeConstable()"
            ],
            [
                "formatted",
                "java.lang",
                "String",
                "public String formatted(Object[] arg0)"
            ],
            [
                "endsWith",
                "java.lang",
                "String",
                "public boolean endsWith(String arg0)"
            ],
            [
                "substring",
                "java.lang",
                "String",
                "public String substring(int arg0)"
            ],
            [
                "equalsIgnoreCase",
                "java.lang",
                "String",
                "public boolean equalsIgnoreCase(String arg0)"
            ],
            [
                "toString",
                "java.lang",
                "String",
                "public String toString()"
            ],
            [
                "getBytes",
                "java.lang",
                "String",
                "public byte[] getBytes(Charset arg0)"
            ],
            [
                "indexOf",
                "java.lang",
                "String",
                "public int indexOf(String arg0, int arg1)"
            ],
            [
                "compareTo",
                "java.lang",
                "String",
                "public int compareTo(String arg0)"
            ],
            [
                "compareToIgnoreCase",
                "java.lang",
                "String",
                "public int compareToIgnoreCase(String arg0)"
            ],
            [
                "lastIndexOf",
                "java.lang",
                "String",
                "public int lastIndexOf(int arg0)"
            ],
            [
                "toUpperCase",
                "java.lang",
                "String",
                "public String toUpperCase()"
            ],
            [
                "offsetByCodePoints",
                "java.lang",
                "String",
                "public int offsetByCodePoints(int arg0, int arg1)"
            ],
            [
                "replaceAll",
                "java.lang",
                "String",
                "public String replaceAll(String arg0, String arg1)"
            ],
            [
                "toLowerCase",
                "java.lang",
                "String",
                "public String toLowerCase(Locale arg0)"
            ],
            [
                "trim",
                "java.lang",
                "String",
                "public String trim()"
            ],
            [
                "coder",
                "java.lang",
                "String",
                "byte coder()"
            ],
            [
                "indexOf",
                "java.lang",
                "String",
                "public int indexOf(int arg0)"
            ],
            [
                "contentEquals",
                "java.lang",
                "String",
                "public boolean contentEquals(StringBuffer arg0)"
            ],
            [
                "transform",
                "java.lang",
                "String",
                "public <R> R transform(Function<? super String, ? extends R> arg0)"
            ],
            [
                "compareTo",
                "java.lang",
                "Comparable",
                "public abstract int compareTo(T arg0)"
            ],
            [
                "toString",
                "java.lang",
                "CharSequence",
                "public abstract String toString()"
            ],
            [
                "codePoints",
                "java.lang",
                "CharSequence",
                "public default IntStream codePoints()"
            ],
            [
                "subSequence",
                "java.lang",
                "CharSequence",
                "public abstract CharSequence subSequence(int arg0, int arg1)"
            ],
            [
                "chars",
                "java.lang",
                "CharSequence",
                "public default IntStream chars()"
            ],
            [
                "length",
                "java.lang",
                "CharSequence",
                "public abstract int length()"
            ],
            [
                "charAt",
                "java.lang",
                "CharSequence",
                "public abstract char charAt(int arg0)"
            ],
            [
                "isEmpty",
                "java.lang",
                "CharSequence",
                "public default boolean isEmpty()"
            ],
            [
                "describeConstable",
                "java.lang.constant",
                "Constable",
                "public abstract Optional<? extends ConstantDesc> describeConstable()"
            ],
            [
                "resolveConstantDesc",
                "java.lang.constant",
                "ConstantDesc",
                "public abstract Object resolveConstantDesc(MethodHandles.Lookup arg0) throws ReflectiveOperationException"
            ],
            [
                "getCamera",
                "org.graphstream.ui.swingViewer",
                "GraphRenderer",
                "public abstract Camera getCamera()"
            ],
            [
                "findNodeOrSpriteAt",
                "org.graphstream.ui.swingViewer",
                "GraphRenderer",
                "public abstract GraphicElement findNodeOrSpriteAt(double arg0, double arg1)"
            ],
            [
                "allNodesOrSpritesIn",
                "org.graphstream.ui.swingViewer",
                "GraphRenderer",
                "public abstract Collection<GraphicElement> allNodesOrSpritesIn(double arg0, double arg1, double arg2, double arg3)"
            ],
            [
                "getId",
                "org.graphstream.ui.swingViewer",
                "ViewPanel",
                "public String getId()"
            ],
            [
                "getUI",
                "javax.swing",
                "JPanel",
                "public PanelUI getUI()"
            ],
            [
                "getAccessibleContext",
                "javax.swing",
                "JPanel",
                "public AccessibleContext getAccessibleContext()"
            ],
            [
                "getUIClassID",
                "javax.swing",
                "JPanel",
                "public String getUIClassID()"
            ],
            [
                "paramString",
                "javax.swing",
                "JPanel",
                "protected String paramString()"
            ],
            [
                "isPaintingTile",
                "javax.swing",
                "JComponent",
                "public boolean isPaintingTile()"
            ],
            [
                "getAlignmentY",
                "javax.swing",
                "JComponent",
                "public float getAlignmentY()"
            ],
            [
                "isPainting",
                "javax.swing",
                "JComponent",
                "boolean isPainting()"
            ],
            [
                "getConditionForKeyStroke",
                "javax.swing",
                "JComponent",
                "public int getConditionForKeyStroke(KeyStroke arg0)"
            ],
            [
                "getClientProperty",
                "javax.swing",
                "JComponent",
                "public final Object getClientProperty(Object arg0)"
            ],
            [
                "getNextFocusableComponent",
                "javax.swing",
                "JComponent",
                "public Component getNextFocusableComponent()"
            ],
            [
                "getToolTipText",
                "javax.swing",
                "JComponent",
                "public String getToolTipText(MouseEvent arg0)"
            ],
            [
                "paramString",
                "javax.swing",
                "JComponent",
                "protected String paramString()"
            ],
            [
                "getBorder",
                "javax.swing",
                "JComponent",
                "public Border getBorder()"
            ],
            [
                "getActionForKeyStroke",
                "javax.swing",
                "JComponent",
                "public ActionListener getActionForKeyStroke(KeyStroke arg0)"
            ],
            [
                "getActionMap",
                "javax.swing",
                "JComponent",
                "public final ActionMap getActionMap()"
            ],
            [
                "shouldDebugGraphics",
                "javax.swing",
                "JComponent",
                "int shouldDebugGraphics()"
            ],
            [
                "getHeight",
                "javax.swing",
                "JComponent",
                "public int getHeight()"
            ],
            [
                "getVerifyInputWhenFocusTarget",
                "javax.swing",
                "JComponent",
                "public boolean getVerifyInputWhenFocusTarget()"
            ],
            [
                "getPopupLocation",
                "javax.swing",
                "JComponent",
                "public Point getPopupLocation(MouseEvent arg0)"
            ],
            [
                "getTransferHandler",
                "javax.swing",
                "JComponent",
                "public TransferHandler getTransferHandler()"
            ],
            [
                "createToolTip",
                "javax.swing",
                "JComponent",
                "public JToolTip createToolTip()"
            ],
            [
                "contains",
                "javax.swing",
                "JComponent",
                "public boolean contains(int arg0, int arg1)"
            ],
            [
                "checkIfChildObscuredBySibling",
                "javax.swing",
                "JComponent",
                "boolean checkIfChildObscuredBySibling()"
            ],
            [
                "processKeyBindings",
                "javax.swing",
                "JComponent",
                "boolean processKeyBindings(KeyEvent arg0, boolean arg1)"
            ],
            [
                "getInheritsPopupMenu",
                "javax.swing",
                "JComponent",
                "public boolean getInheritsPopupMenu()"
            ],
            [
                "getActionMap",
                "javax.swing",
                "JComponent",
                "final ActionMap getActionMap(boolean arg0)"
            ],
            [
                "getInputMap",
                "javax.swing",
                "JComponent",
                "final InputMap getInputMap(int arg0, boolean arg1)"
            ],
            [
                "getInputVerifier",
                "javax.swing",
                "JComponent",
                "public InputVerifier getInputVerifier()"
            ],
            [
                "getInputMap",
                "javax.swing",
                "JComponent",
                "public final InputMap getInputMap(int arg0)"
            ],
            [
                "getAlignmentX",
                "javax.swing",
                "JComponent",
                "public float getAlignmentX()"
            ],
            [
                "isPaintingForPrint",
                "javax.swing",
                "JComponent",
                "public final boolean isPaintingForPrint()"
            ],
            [
                "isRequestFocusEnabled",
                "javax.swing",
                "JComponent",
                "public boolean isRequestFocusEnabled()"
            ],
            [
                "requestDefaultFocus",
                "javax.swing",
                "JComponent",
                "public boolean requestDefaultFocus()"
            ],
            [
                "getMaximumSize",
                "javax.swing",
                "JComponent",
                "public Dimension getMaximumSize()"
            ],
            [
                "getAutoscrolls",
                "javax.swing",
                "JComponent",
                "public boolean getAutoscrolls()"
            ],
            [
                "getY",
                "javax.swing",
                "JComponent",
                "public int getY()"
            ],
            [
                "isDoubleBuffered",
                "javax.swing",
                "JComponent",
                "public boolean isDoubleBuffered()"
            ],
            [
                "requestFocusInWindow",
                "javax.swing",
                "JComponent",
                "protected boolean requestFocusInWindow(boolean arg0)"
            ],
            [
                "getRegisteredKeyStrokes",
                "javax.swing",
                "JComponent",
                "public KeyStroke[] getRegisteredKeyStrokes()"
            ],
            [
                "requestFocus",
                "javax.swing",
                "JComponent",
                "public boolean requestFocus(boolean arg0)"
            ],
            [
                "getRootPane",
                "javax.swing",
                "JComponent",
                "public JRootPane getRootPane()"
            ],
            [
                "isOpaque",
                "javax.swing",
                "JComponent",
                "public boolean isOpaque()"
            ],
            [
                "getDebugGraphicsOptions",
                "javax.swing",
                "JComponent",
                "public int getDebugGraphicsOptions()"
            ],
            [
                "getAncestorListeners",
                "javax.swing",
                "JComponent",
                "public AncestorListener[] getAncestorListeners()"
            ],
            [
                "getListeners",
                "javax.swing",
                "JComponent",
                "public <T> T[] getListeners(Class<T> arg0)"
            ],
            [
                "getX",
                "javax.swing",
                "JComponent",
                "public int getX()"
            ],
            [
                "getGraphics",
                "javax.swing",
                "JComponent",
                "public Graphics getGraphics()"
            ],
            [
                "getBaselineResizeBehavior",
                "javax.swing",
                "JComponent",
                "public Component.BaselineResizeBehavior getBaselineResizeBehavior()"
            ],
            [
                "getMinimumSize",
                "javax.swing",
                "JComponent",
                "public Dimension getMinimumSize()"
            ],
            [
                "requestFocusInWindow",
                "javax.swing",
                "JComponent",
                "public boolean requestFocusInWindow()"
            ],
            [
                "getCreatedDoubleBuffer",
                "javax.swing",
                "JComponent",
                "boolean getCreatedDoubleBuffer()"
            ],
            [
                "getToolTipLocation",
                "javax.swing",
                "JComponent",
                "public Point getToolTipLocation(MouseEvent arg0)"
            ],
            [
                "getWidth",
                "javax.swing",
                "JComponent",
                "public int getWidth()"
            ],
            [
                "isManagingFocus",
                "javax.swing",
                "JComponent",
                "public boolean isManagingFocus()"
            ],
            [
                "getUI",
                "javax.swing",
                "JComponent",
                "public ComponentUI getUI()"
            ],
            [
                "getUIClassID",
                "javax.swing",
                "JComponent",
                "public String getUIClassID()"
            ],
            [
                "getPreferredSize",
                "javax.swing",
                "JComponent",
                "public Dimension getPreferredSize()"
            ],
            [
                "getComponentGraphics",
                "javax.swing",
                "JComponent",
                "protected Graphics getComponentGraphics(Graphics arg0)"
            ],
            [
                "getLocation",
                "javax.swing",
                "JComponent",
                "public Point getLocation(Point arg0)"
            ],
            [
                "alwaysOnTop",
                "javax.swing",
                "JComponent",
                "boolean alwaysOnTop()"
            ],
            [
                "isPaintingOrigin",
                "javax.swing",
                "JComponent",
                "protected boolean isPaintingOrigin()"
            ],
            [
                "getFontMetrics",
                "javax.swing",
                "JComponent",
                "public FontMetrics getFontMetrics(Font arg0)"
            ],
            [
                "getInsets",
                "javax.swing",
                "JComponent",
                "public Insets getInsets(Insets arg0)"
            ],
            [
                "isOptimizedDrawingEnabled",
                "javax.swing",
                "JComponent",
                "public boolean isOptimizedDrawingEnabled()"
            ],
            [
                "getVisibleRect",
                "javax.swing",
                "JComponent",
                "public Rectangle getVisibleRect()"
            ],
            [
                "getBaseline",
                "javax.swing",
                "JComponent",
                "public int getBaseline(int arg0, int arg1)"
            ],
            [
                "getInsets",
                "javax.swing",
                "JComponent",
                "public Insets getInsets()"
            ],
            [
                "dropLocationForPoint",
                "javax.swing",
                "JComponent",
                "TransferHandler.DropLocation dropLocationForPoint(Point arg0)"
            ],
            [
                "getToolTipText",
                "javax.swing",
                "JComponent",
                "public String getToolTipText()"
            ],
            [
                "getBounds",
                "javax.swing",
                "JComponent",
                "public Rectangle getBounds(Rectangle arg0)"
            ],
            [
                "getComponentPopupMenu",
                "javax.swing",
                "JComponent",
                "public JPopupMenu getComponentPopupMenu()"
            ],
            [
                "getTopLevelAncestor",
                "javax.swing",
                "JComponent",
                "public Container getTopLevelAncestor()"
            ],
            [
                "setDropLocation",
                "javax.swing",
                "JComponent",
                "Object setDropLocation(TransferHandler.DropLocation arg0, Object arg1, boolean arg2)"
            ],
            [
                "getVetoableChangeListeners",
                "javax.swing",
                "JComponent",
                "public synchronized VetoableChangeListener[] getVetoableChangeListeners()"
            ],
            [
                "isValidateRoot",
                "javax.swing",
                "JComponent",
                "public boolean isValidateRoot()"
            ],
            [
                "getSize",
                "javax.swing",
                "JComponent",
                "public Dimension getSize(Dimension arg0)"
            ],
            [
                "processKeyBinding",
                "javax.swing",
                "JComponent",
                "protected boolean processKeyBinding(KeyStroke arg0, KeyEvent arg1, int arg2, boolean arg3)"
            ],
            [
                "rectangleIsObscured",
                "javax.swing",
                "JComponent",
                "boolean rectangleIsObscured(int arg0, int arg1, int arg2, int arg3)"
            ],
            [
                "getInputMap",
                "javax.swing",
                "JComponent",
                "public final InputMap getInputMap()"
            ],
            [
                "getComponents_NoClientCode",
                "java.awt",
                "Container",
                "final Component[] getComponents_NoClientCode()"
            ],
            [
                "getPreferredSize",
                "java.awt",
                "Container",
                "public Dimension getPreferredSize()"
            ],
            [
                "getMinimumSize",
                "java.awt",
                "Container",
                "public Dimension getMinimumSize()"
            ],
            [
                "add",
                "java.awt",
                "Container",
                "public Component add(String arg0, Component arg1)"
            ],
            [
                "getAccessibleAt",
                "java.awt",
                "Container",
                "Accessible getAccessibleAt(Point arg0)"
            ],
            [
                "isAncestorOf",
                "java.awt",
                "Container",
                "public boolean isAncestorOf(Component arg0)"
            ],
            [
                "numListening",
                "java.awt",
                "Container",
                "int numListening(long arg0)"
            ],
            [
                "hasHeavyweightDescendants",
                "java.awt",
                "Container",
                "final boolean hasHeavyweightDescendants()"
            ],
            [
                "containsFocus",
                "java.awt",
                "Container",
                "final boolean containsFocus()"
            ],
            [
                "getLayout",
                "java.awt",
                "Container",
                "public LayoutManager getLayout()"
            ],
            [
                "add",
                "java.awt",
                "Container",
                "public Component add(Component arg0)"
            ],
            [
                "postsOldMouseEvents",
                "java.awt",
                "Container",
                "boolean postsOldMouseEvents()"
            ],
            [
                "isSameOrAncestorOf",
                "java.awt",
                "Container",
                "boolean isSameOrAncestorOf(Component arg0, boolean arg1)"
            ],
            [
                "getContainerListeners",
                "java.awt",
                "Container",
                "public synchronized ContainerListener[] getContainerListeners()"
            ],
            [
                "paramString",
                "java.awt",
                "Container",
                "protected String paramString()"
            ],
            [
                "countComponents",
                "java.awt",
                "Container",
                "public int countComponents()"
            ],
            [
                "getComponentZOrder",
                "java.awt",
                "Container",
                "public int getComponentZOrder(Component arg0)"
            ],
            [
                "getFocusTraversalPolicy",
                "java.awt",
                "Container",
                "public FocusTraversalPolicy getFocusTraversalPolicy()"
            ],
            [
                "hasLightweightDescendants",
                "java.awt",
                "Container",
                "final boolean hasLightweightDescendants()"
            ],
            [
                "isValidateRoot",
                "java.awt",
                "Container",
                "public boolean isValidateRoot()"
            ],
            [
                "getListeners",
                "java.awt",
                "Container",
                "public <T> T[] getListeners(Class<T> arg0)"
            ],
            [
                "updateChildGraphicsData",
                "java.awt",
                "Container",
                "final boolean updateChildGraphicsData(GraphicsConfiguration arg0)"
            ],
            [
                "minimumSize",
                "java.awt",
                "Container",
                "public Dimension minimumSize()"
            ],
            [
                "getAccessibleChildrenCount",
                "java.awt",
                "Container",
                "int getAccessibleChildrenCount()"
            ],
            [
                "getAlignmentX",
                "java.awt",
                "Container",
                "public float getAlignmentX()"
            ],
            [
                "findComponentAt",
                "java.awt",
                "Container",
                "public Component findComponentAt(Point arg0)"
            ],
            [
                "getInsets",
                "java.awt",
                "Container",
                "public Insets getInsets()"
            ],
            [
                "getComponents",
                "java.awt",
                "Container",
                "public Component[] getComponents()"
            ],
            [
                "getComponent",
                "java.awt",
                "Container",
                "public Component getComponent(int arg0)"
            ],
            [
                "getTraversalRoot",
                "java.awt",
                "Container",
                "final Container getTraversalRoot()"
            ],
            [
                "findComponentAt",
                "java.awt",
                "Container",
                "final Component findComponentAt(int arg0, int arg1, boolean arg2)"
            ],
            [
                "getHeavyweightContainer",
                "java.awt",
                "Container",
                "Container getHeavyweightContainer()"
            ],
            [
                "add",
                "java.awt",
                "Container",
                "public Component add(Component arg0, int arg1)"
            ],
            [
                "eventEnabled",
                "java.awt",
                "Container",
                "boolean eventEnabled(AWTEvent arg0)"
            ],
            [
                "getComponentAt",
                "java.awt",
                "Container",
                "public Component getComponentAt(int arg0, int arg1)"
            ],
            [
                "isFocusTraversalPolicySet",
                "java.awt",
                "Container",
                "public boolean isFocusTraversalPolicySet()"
            ],
            [
                "canContainFocusOwner",
                "java.awt",
                "Container",
                "boolean canContainFocusOwner(Component arg0)"
            ],
            [
                "findComponentAtImpl",
                "java.awt",
                "Container",
                "final Component findComponentAtImpl(int arg0, int arg1, boolean arg2)"
            ],
            [
                "locate",
                "java.awt",
                "Container",
                "public Component locate(int arg0, int arg1)"
            ],
            [
                "isFocusCycleRoot",
                "java.awt",
                "Container",
                "public boolean isFocusCycleRoot()"
            ],
            [
                "insets",
                "java.awt",
                "Container",
                "public Insets insets()"
            ],
            [
                "countHierarchyMembers",
                "java.awt",
                "Container",
                "int countHierarchyMembers()"
            ],
            [
                "getComponentCount",
                "java.awt",
                "Container",
                "public int getComponentCount()"
            ],
            [
                "getMaximumSize",
                "java.awt",
                "Container",
                "public Dimension getMaximumSize()"
            ],
            [
                "getAccessibleChild",
                "java.awt",
                "Container",
                "Accessible getAccessibleChild(int arg0)"
            ],
            [
                "createHierarchyEvents",
                "java.awt",
                "Container",
                "final int createHierarchyEvents(int arg0, Component arg1, Container arg2, long arg3, boolean arg4)"
            ],
            [
                "isFocusTraversalPolicyProvider",
                "java.awt",
                "Container",
                "public final boolean isFocusTraversalPolicyProvider()"
            ],
            [
                "isFocusCycleRoot",
                "java.awt",
                "Container",
                "public boolean isFocusCycleRoot(Container arg0)"
            ],
            [
                "getMouseEventTarget",
                "java.awt",
                "Container",
                "Component getMouseEventTarget(int arg0, int arg1, boolean arg2)"
            ],
            [
                "getComponentsSync",
                "java.awt",
                "Container",
                "Component[] getComponentsSync()"
            ],
            [
                "getDropTargetEventTarget",
                "java.awt",
                "Container",
                "Component getDropTargetEventTarget(int arg0, int arg1, boolean arg2)"
            ],
            [
                "preferredSize",
                "java.awt",
                "Container",
                "public Dimension preferredSize()"
            ],
            [
                "isRecursivelyVisibleUpToHeavyweightContainer",
                "java.awt",
                "Container",
                "final boolean isRecursivelyVisibleUpToHeavyweightContainer()"
            ],
            [
                "getOpaqueShape",
                "java.awt",
                "Container",
                "final Region getOpaqueShape()"
            ],
            [
                "areFocusTraversalKeysSet",
                "java.awt",
                "Container",
                "public boolean areFocusTraversalKeysSet(int arg0)"
            ],
            [
                "getAlignmentY",
                "java.awt",
                "Container",
                "public float getAlignmentY()"
            ],
            [
                "getMousePosition",
                "java.awt",
                "Container",
                "public Point getMousePosition(boolean arg0) throws HeadlessException"
            ],
            [
                "findComponentAt",
                "java.awt",
                "Container",
                "public Component findComponentAt(int arg0, int arg1)"
            ],
            [
                "getComponentAt",
                "java.awt",
                "Container",
                "public Component getComponentAt(Point arg0)"
            ],
            [
                "getFocusTraversalKeys",
                "java.awt",
                "Container",
                "public Set<AWTKeyStroke> getFocusTraversalKeys(int arg0)"
            ],
            [
                "findUnderMouseInWindow",
                "java.awt",
                "Component",
                "Component findUnderMouseInWindow(PointerInfo arg0)"
            ],
            [
                "isPreferredSizeSet",
                "java.awt",
                "Component",
                "public boolean isPreferredSizeSet()"
            ],
            [
                "isValid",
                "java.awt",
                "Component",
                "public boolean isValid()"
            ],
            [
                "isDisplayable",
                "java.awt",
                "Component",
                "public boolean isDisplayable()"
            ],
            [
                "paramString",
                "java.awt",
                "Component",
                "protected String paramString()"
            ],
            [
                "getCursor_NoClientCode",
                "java.awt",
                "Component",
                "final Cursor getCursor_NoClientCode()"
            ],
            [
                "getToolkit",
                "java.awt",
                "Component",
                "public Toolkit getToolkit()"
            ],
            [
                "getFont_NoClientCode",
                "java.awt",
                "Component",
                "final Font getFont_NoClientCode()"
            ],
            [
                "getInputMethodListeners",
                "java.awt",
                "Component",
                "public synchronized InputMethodListener[] getInputMethodListeners()"
            ],
            [
                "getSiblingIndexAbove",
                "java.awt",
                "Component",
                "final int getSiblingIndexAbove()"
            ],
            [
                "toString",
                "java.awt",
                "Component",
                "public String toString()"
            ],
            [
                "getFocusTraversalKeys_NoIDCheck",
                "java.awt",
                "Component",
                "final Set<AWTKeyStroke> getFocusTraversalKeys_NoIDCheck(int arg0)"
            ],
            [
                "isFocusTraversableOverridden",
                "java.awt",
                "Component",
                "final boolean isFocusTraversableOverridden()"
            ],
            [
                "getInputContext",
                "java.awt",
                "Component",
                "public InputContext getInputContext()"
            ],
            [
                "getGraphics_NoClientCode",
                "java.awt",
                "Component",
                "final Graphics getGraphics_NoClientCode()"
            ],
            [
                "isRecursivelyVisible",
                "java.awt",
                "Component",
                "boolean isRecursivelyVisible()"
            ],
            [
                "isFocusable",
                "java.awt",
                "Component",
                "public boolean isFocusable()"
            ],
            [
                "countHierarchyMembers",
                "java.awt",
                "Component",
                "int countHierarchyMembers()"
            ],
            [
                "coalesceEvents",
                "java.awt",
                "Component",
                "protected AWTEvent coalesceEvents(AWTEvent arg0, AWTEvent arg1)"
            ],
            [
                "getLocationOnScreen",
                "java.awt",
                "Component",
                "public Point getLocationOnScreen()"
            ],
            [
                "getGraphics",
                "java.awt",
                "Component",
                "public Graphics getGraphics()"
            ],
            [
                "keyDown",
                "java.awt",
                "Component",
                "public boolean keyDown(Event arg0, int arg1)"
            ],
            [
                "postEvent",
                "java.awt",
                "Component",
                "public boolean postEvent(Event arg0)"
            ],
            [
                "getPreferredSize",
                "java.awt",
                "Component",
                "public Dimension getPreferredSize()"
            ],
            [
                "isFontSet",
                "java.awt",
                "Component",
                "public boolean isFontSet()"
            ],
            [
                "getLocationOnScreen_NoTreeLock",
                "java.awt",
                "Component",
                "final Point getLocationOnScreen_NoTreeLock()"
            ],
            [
                "keyUp",
                "java.awt",
                "Component",
                "public boolean keyUp(Event arg0, int arg1)"
            ],
            [
                "areBoundsValid",
                "java.awt",
                "Component",
                "final boolean areBoundsValid()"
            ],
            [
                "locate",
                "java.awt",
                "Component",
                "public Component locate(int arg0, int arg1)"
            ],
            [
                "mouseMove",
                "java.awt",
                "Component",
                "public boolean mouseMove(Event arg0, int arg1, int arg2)"
            ],
            [
                "getTraversalRoot",
                "java.awt",
                "Component",
                "Container getTraversalRoot()"
            ],
            [
                "isDoubleBuffered",
                "java.awt",
                "Component",
                "public boolean isDoubleBuffered()"
            ],
            [
                "getHierarchyListeners",
                "java.awt",
                "Component",
                "public synchronized HierarchyListener[] getHierarchyListeners()"
            ],
            [
                "checkImage",
                "java.awt",
                "Component",
                "public int checkImage(Image arg0, ImageObserver arg1)"
            ],
            [
                "prepareImage",
                "java.awt",
                "Component",
                "public boolean prepareImage(Image arg0, int arg1, int arg2, ImageObserver arg3)"
            ],
            [
                "getAlignmentY",
                "java.awt",
                "Component",
                "public float getAlignmentY()"
            ],
            [
                "getParent_NoClientCode",
                "java.awt",
                "Component",
                "final Container getParent_NoClientCode()"
            ],
            [
                "getMaximumSize",
                "java.awt",
                "Component",
                "public Dimension getMaximumSize()"
            ],
            [
                "getToolkitImpl",
                "java.awt",
                "Component",
                "final Toolkit getToolkitImpl()"
            ],
            [
                "createVolatileImage",
                "java.awt",
                "Component",
                "public VolatileImage createVolatileImage(int arg0, int arg1)"
            ],
            [
                "requestFocusInWindow",
                "java.awt",
                "Component",
                "protected boolean requestFocusInWindow(boolean arg0)"
            ],
            [
                "isFocusCycleRoot",
                "java.awt",
                "Component",
                "public boolean isFocusCycleRoot(Container arg0)"
            ],
            [
                "getTreeLock",
                "java.awt",
                "Component",
                "public final Object getTreeLock()"
            ],
            [
                "getComponentFactory",
                "java.awt",
                "Component",
                "final ComponentFactory getComponentFactory()"
            ],
            [
                "action",
                "java.awt",
                "Component",
                "public boolean action(Event arg0, Object arg1)"
            ],
            [
                "getFocusListeners",
                "java.awt",
                "Component",
                "public synchronized FocusListener[] getFocusListeners()"
            ],
            [
                "getBaselineResizeBehavior",
                "java.awt",
                "Component",
                "public Component.BaselineResizeBehavior getBaselineResizeBehavior()"
            ],
            [
                "bounds",
                "java.awt",
                "Component",
                "public Rectangle bounds()"
            ],
            [
                "hasFocus",
                "java.awt",
                "Component",
                "public boolean hasFocus()"
            ],
            [
                "isBackgroundSet",
                "java.awt",
                "Component",
                "public boolean isBackgroundSet()"
            ],
            [
                "getCursor",
                "java.awt",
                "Component",
                "public Cursor getCursor()"
            ],
            [
                "getGraphicsConfiguration",
                "java.awt",
                "Component",
                "public GraphicsConfiguration getGraphicsConfiguration()"
            ],
            [
                "isEnabledImpl",
                "java.awt",
                "Component",
                "final boolean isEnabledImpl()"
            ],
            [
                "mouseUp",
                "java.awt",
                "Component",
                "public boolean mouseUp(Event arg0, int arg1, int arg2)"
            ],
            [
                "size",
                "java.awt",
                "Component",
                "public Dimension size()"
            ],
            [
                "getHWPeerAboveMe",
                "java.awt",
                "Component",
                "final ComponentPeer getHWPeerAboveMe()"
            ],
            [
                "createVolatileImage",
                "java.awt",
                "Component",
                "public VolatileImage createVolatileImage(int arg0, int arg1, ImageCapabilities arg2) throws AWTException"
            ],
            [
                "getAccessibleStateSet",
                "java.awt",
                "Component",
                "AccessibleStateSet getAccessibleStateSet()"
            ],
            [
                "getLocation",
                "java.awt",
                "Component",
                "public Point getLocation(Point arg0)"
            ],
            [
                "getIgnoreRepaint",
                "java.awt",
                "Component",
                "public boolean getIgnoreRepaint()"
            ],
            [
                "getBounds",
                "java.awt",
                "Component",
                "public Rectangle getBounds(Rectangle arg0)"
            ],
            [
                "getFocusTraversalKeys",
                "java.awt",
                "Component",
                "public Set<AWTKeyStroke> getFocusTraversalKeys(int arg0)"
            ],
            [
                "getAccessControlContext",
                "java.awt",
                "Component",
                "final AccessControlContext getAccessControlContext()"
            ],
            [
                "getComponentAt",
                "java.awt",
                "Component",
                "public Component getComponentAt(int arg0, int arg1)"
            ],
            [
                "isFocusOwner",
                "java.awt",
                "Component",
                "public boolean isFocusOwner()"
            ],
            [
                "areFocusTraversalKeysSet",
                "java.awt",
                "Component",
                "public boolean areFocusTraversalKeysSet(int arg0)"
            ],
            [
                "numListening",
                "java.awt",
                "Component",
                "int numListening(long arg0)"
            ],
            [
                "getX",
                "java.awt",
                "Component",
                "public int getX()"
            ],
            [
                "getNativeContainer",
                "java.awt",
                "Component",
                "final Container getNativeContainer()"
            ],
            [
                "prepareImage",
                "java.awt",
                "Component",
                "public boolean prepareImage(Image arg0, ImageObserver arg1)"
            ],
            [
                "canBeFocusOwnerRecursively",
                "java.awt",
                "Component",
                "final boolean canBeFocusOwnerRecursively()"
            ],
            [
                "isShowing",
                "java.awt",
                "Component",
                "public boolean isShowing()"
            ],
            [
                "getComponentOrientation",
                "java.awt",
                "Component",
                "public ComponentOrientation getComponentOrientation()"
            ],
            [
                "createImage",
                "java.awt",
                "Component",
                "public Image createImage(int arg0, int arg1)"
            ],
            [
                "requestFocusHelper",
                "java.awt",
                "Component",
                "final boolean requestFocusHelper(boolean arg0, boolean arg1)"
            ],
            [
                "getKeyListeners",
                "java.awt",
                "Component",
                "public synchronized KeyListener[] getKeyListeners()"
            ],
            [
                "mouseDown",
                "java.awt",
                "Component",
                "public boolean mouseDown(Event arg0, int arg1, int arg2)"
            ],
            [
                "postsOldMouseEvents",
                "java.awt",
                "Component",
                "boolean postsOldMouseEvents()"
            ],
            [
                "getMouseListeners",
                "java.awt",
                "Component",
                "public synchronized MouseListener[] getMouseListeners()"
            ],
            [
                "getBaseline",
                "java.awt",
                "Component",
                "public int getBaseline(int arg0, int arg1)"
            ],
            [
                "imageUpdate",
                "java.awt",
                "Component",
                "public boolean imageUpdate(Image arg0, int arg1, int arg2, int arg3, int arg4, int arg5)"
            ],
            [
                "getWidth",
                "java.awt",
                "Component",
                "public int getWidth()"
            ],
            [
                "dispatchMouseWheelToAncestor",
                "java.awt",
                "Component",
                "boolean dispatchMouseWheelToAncestor(MouseWheelEvent arg0)"
            ],
            [
                "getParent",
                "java.awt",
                "Component",
                "public Container getParent()"
            ],
            [
                "getBackBuffer",
                "java.awt",
                "Component",
                "Image getBackBuffer()"
            ],
            [
                "getAlignmentX",
                "java.awt",
                "Component",
                "public float getAlignmentX()"
            ],
            [
                "areInputMethodsEnabled",
                "java.awt",
                "Component",
                "boolean areInputMethodsEnabled()"
            ],
            [
                "requestFocus",
                "java.awt",
                "Component",
                "protected boolean requestFocus(boolean arg0, FocusEvent.Cause arg1)"
            ],
            [
                "getNextFocusCandidate",
                "java.awt",
                "Component",
                "final Component getNextFocusCandidate()"
            ],
            [
                "contains",
                "java.awt",
                "Component",
                "public boolean contains(int arg0, int arg1)"
            ],
            [
                "getY",
                "java.awt",
                "Component",
                "public int getY()"
            ],
            [
                "getContainer",
                "java.awt",
                "Component",
                "Container getContainer()"
            ],
            [
                "isFocusTraversable",
                "java.awt",
                "Component",
                "public boolean isFocusTraversable()"
            ],
            [
                "getAccessibleIndexInParent",
                "java.awt",
                "Component",
                "int getAccessibleIndexInParent()"
            ],
            [
                "preferredSize",
                "java.awt",
                "Component",
                "public Dimension preferredSize()"
            ],
            [
                "isEnabled",
                "java.awt",
                "Component",
                "public boolean isEnabled()"
            ],
            [
                "getInputMethodRequests",
                "java.awt",
                "Component",
                "public InputMethodRequests getInputMethodRequests()"
            ],
            [
                "transferFocusBackward",
                "java.awt",
                "Component",
                "boolean transferFocusBackward(boolean arg0)"
            ],
            [
                "inside",
                "java.awt",
                "Component",
                "public boolean inside(int arg0, int arg1)"
            ],
            [
                "mouseDrag",
                "java.awt",
                "Component",
                "public boolean mouseDrag(Event arg0, int arg1, int arg2)"
            ],
            [
                "isSameOrAncestorOf",
                "java.awt",
                "Component",
                "boolean isSameOrAncestorOf(Component arg0, boolean arg1)"
            ],
            [
                "getNormalShape",
                "java.awt",
                "Component",
                "final Region getNormalShape()"
            ],
            [
                "getSize",
                "java.awt",
                "Component",
                "public Dimension getSize(Dimension arg0)"
            ],
            [
                "isCoalescingEnabled",
                "java.awt",
                "Component",
                "final boolean isCoalescingEnabled()"
            ],
            [
                "isVisible",
                "java.awt",
                "Component",
                "public boolean isVisible()"
            ],
            [
                "isVisible_NoClientCode",
                "java.awt",
                "Component",
                "final boolean isVisible_NoClientCode()"
            ],
            [
                "handleEvent",
                "java.awt",
                "Component",
                "public boolean handleEvent(Event arg0)"
            ],
            [
                "gotFocus",
                "java.awt",
                "Component",
                "public boolean gotFocus(Event arg0, Object arg1)"
            ],
            [
                "requestFocusInWindow",
                "java.awt",
                "Component",
                "public boolean requestFocusInWindow(FocusEvent.Cause arg0)"
            ],
            [
                "getDropTarget",
                "java.awt",
                "Component",
                "public synchronized DropTarget getDropTarget()"
            ],
            [
                "getPropertyChangeListeners",
                "java.awt",
                "Component",
                "public PropertyChangeListener[] getPropertyChangeListeners(String arg0)"
            ],
            [
                "getHierarchyBoundsListeners",
                "java.awt",
                "Component",
                "public synchronized HierarchyBoundsListener[] getHierarchyBoundsListeners()"
            ],
            [
                "getName",
                "java.awt",
                "Component",
                "public String getName()"
            ],
            [
                "getMinimumSize",
                "java.awt",
                "Component",
                "public Dimension getMinimumSize()"
            ],
            [
                "contains",
                "java.awt",
                "Component",
                "public boolean contains(Point arg0)"
            ],
            [
                "getLocale",
                "java.awt",
                "Component",
                "public Locale getLocale()"
            ],
            [
                "getFocusTraversalKeysEnabled",
                "java.awt",
                "Component",
                "public boolean getFocusTraversalKeysEnabled()"
            ],
            [
                "getAccessibleContext",
                "java.awt",
                "Component",
                "public AccessibleContext getAccessibleContext()"
            ],
            [
                "location",
                "java.awt",
                "Component",
                "public Point location()"
            ],
            [
                "getFont",
                "java.awt",
                "Component",
                "public Font getFont()"
            ],
            [
                "requestFocus",
                "java.awt",
                "Component",
                "protected boolean requestFocus(boolean arg0)"
            ],
            [
                "minimumSize",
                "java.awt",
                "Component",
                "public Dimension minimumSize()"
            ],
            [
                "requestFocusInWindow",
                "java.awt",
                "Component",
                "public boolean requestFocusInWindow()"
            ],
            [
                "getBoundsOp",
                "java.awt",
                "Component",
                "int getBoundsOp()"
            ],
            [
                "getLocation",
                "java.awt",
                "Component",
                "public Point getLocation()"
            ],
            [
                "requestFocusInWindow",
                "java.awt",
                "Component",
                "boolean requestFocusInWindow(boolean arg0, FocusEvent.Cause arg1)"
            ],
            [
                "getComponentAt",
                "java.awt",
                "Component",
                "public Component getComponentAt(Point arg0)"
            ],
            [
                "isMixingNeeded",
                "java.awt",
                "Component",
                "final boolean isMixingNeeded()"
            ],
            [
                "getPropertyChangeListeners",
                "java.awt",
                "Component",
                "public PropertyChangeListener[] getPropertyChangeListeners()"
            ],
            [
                "getMousePosition",
                "java.awt",
                "Component",
                "public Point getMousePosition() throws HeadlessException"
            ],
            [
                "checkImage",
                "java.awt",
                "Component",
                "public int checkImage(Image arg0, int arg1, int arg2, ImageObserver arg3)"
            ],
            [
                "isCursorSet",
                "java.awt",
                "Component",
                "public boolean isCursorSet()"
            ],
            [
                "isLightweight",
                "java.awt",
                "Component",
                "public boolean isLightweight()"
            ],
            [
                "getGraphicsConfiguration_NoClientCode",
                "java.awt",
                "Component",
                "final GraphicsConfiguration getGraphicsConfiguration_NoClientCode()"
            ],
            [
                "updateChildGraphicsData",
                "java.awt",
                "Component",
                "boolean updateChildGraphicsData(GraphicsConfiguration arg0)"
            ],
            [
                "isNonOpaqueForMixing",
                "java.awt",
                "Component",
                "final boolean isNonOpaqueForMixing()"
            ],
            [
                "getOpaqueShape",
                "java.awt",
                "Component",
                "Region getOpaqueShape()"
            ],
            [
                "isAutoFocusTransferOnDisposal",
                "java.awt",
                "Component",
                "boolean isAutoFocusTransferOnDisposal()"
            ],
            [
                "canBeFocusOwner",
                "java.awt",
                "Component",
                "final boolean canBeFocusOwner()"
            ],
            [
                "getBounds",
                "java.awt",
                "Component",
                "public Rectangle getBounds()"
            ],
            [
                "constructComponentName",
                "java.awt",
                "Component",
                "String constructComponentName()"
            ],
            [
                "updateGraphicsData",
                "java.awt",
                "Component",
                "final boolean updateGraphicsData(GraphicsConfiguration arg0)"
            ],
            [
                "getBufferStrategy",
                "java.awt",
                "Component",
                "BufferStrategy getBufferStrategy()"
            ],
            [
                "getLocationOnWindow",
                "java.awt",
                "Component",
                "Point getLocationOnWindow()"
            ],
            [
                "isForegroundSet",
                "java.awt",
                "Component",
                "public boolean isForegroundSet()"
            ],
            [
                "getFontMetrics",
                "java.awt",
                "Component",
                "public FontMetrics getFontMetrics(Font arg0)"
            ],
            [
                "getMouseWheelListeners",
                "java.awt",
                "Component",
                "public synchronized MouseWheelListener[] getMouseWheelListeners()"
            ],
            [
                "getBackground",
                "java.awt",
                "Component",
                "public Color getBackground()"
            ],
            [
                "containsFocus",
                "java.awt",
                "Component",
                "boolean containsFocus()"
            ],
            [
                "getContainingWindow",
                "java.awt",
                "Component",
                "Window getContainingWindow()"
            ],
            [
                "lostFocus",
                "java.awt",
                "Component",
                "public boolean lostFocus(Event arg0, Object arg1)"
            ],
            [
                "getFocusCycleRootAncestor",
                "java.awt",
                "Component",
                "public Container getFocusCycleRootAncestor()"
            ],
            [
                "mouseEnter",
                "java.awt",
                "Component",
                "public boolean mouseEnter(Event arg0, int arg1, int arg2)"
            ],
            [
                "requestFocusHelper",
                "java.awt",
                "Component",
                "final boolean requestFocusHelper(boolean arg0, boolean arg1, FocusEvent.Cause arg2)"
            ],
            [
                "getSiblingIndexBelow",
                "java.awt",
                "Component",
                "final int getSiblingIndexBelow()"
            ],
            [
                "getMouseMotionListeners",
                "java.awt",
                "Component",
                "public synchronized MouseMotionListener[] getMouseMotionListeners()"
            ],
            [
                "isOpaque",
                "java.awt",
                "Component",
                "public boolean isOpaque()"
            ],
            [
                "getSize",
                "java.awt",
                "Component",
                "public Dimension getSize()"
            ],
            [
                "createHierarchyEvents",
                "java.awt",
                "Component",
                "int createHierarchyEvents(int arg0, Component arg1, Container arg2, long arg3, boolean arg4)"
            ],
            [
                "pointRelativeToComponent",
                "java.awt",
                "Component",
                "Point pointRelativeToComponent(Point arg0)"
            ],
            [
                "mouseExit",
                "java.awt",
                "Component",
                "public boolean mouseExit(Event arg0, int arg1, int arg2)"
            ],
            [
                "eventTypeEnabled",
                "java.awt",
                "Component",
                "boolean eventTypeEnabled(int arg0)"
            ],
            [
                "getListeners",
                "java.awt",
                "Component",
                "public <T> T[] getListeners(Class<T> arg0)"
            ],
            [
                "createImage",
                "java.awt",
                "Component",
                "public Image createImage(ImageProducer arg0)"
            ],
            [
                "getForeground",
                "java.awt",
                "Component",
                "public Color getForeground()"
            ],
            [
                "getColorModel",
                "java.awt",
                "Component",
                "public ColorModel getColorModel()"
            ],
            [
                "getObjectLock",
                "java.awt",
                "Component",
                "Object getObjectLock()"
            ],
            [
                "getComponentListeners",
                "java.awt",
                "Component",
                "public synchronized ComponentListener[] getComponentListeners()"
            ],
            [
                "transferFocus",
                "java.awt",
                "Component",
                "boolean transferFocus(boolean arg0)"
            ],
            [
                "getHeight",
                "java.awt",
                "Component",
                "public int getHeight()"
            ],
            [
                "isMaximumSizeSet",
                "java.awt",
                "Component",
                "public boolean isMaximumSizeSet()"
            ],
            [
                "eventEnabled",
                "java.awt",
                "Component",
                "boolean eventEnabled(AWTEvent arg0)"
            ],
            [
                "isMinimumSizeSet",
                "java.awt",
                "Component",
                "public boolean isMinimumSizeSet()"
            ],
            [
                "imageUpdate",
                "java.awt.image",
                "ImageObserver",
                "public abstract boolean imageUpdate(Image arg0, int arg1, int arg2, int arg3, int arg4, int arg5)"
            ],
            [
                "getFont",
                "java.awt",
                "MenuContainer",
                "public abstract Font getFont()"
            ],
            [
                "postEvent",
                "java.awt",
                "MenuContainer",
                "public abstract boolean postEvent(Event arg0)"
            ],
            [
                "getTransferHandler",
                "javax.swing",
                "TransferHandler.HasGetTransferHandler",
                "public abstract TransferHandler getTransferHandler()"
            ],
            [
                "getAccessibleContext",
                "javax.accessibility",
                "Accessible",
                "public abstract AccessibleContext getAccessibleContext()"
            ],
            [
                "getId",
                "org.graphstream.ui.view",
                "View",
                "public abstract String getId()"
            ],
            [
                "getCamera",
                "org.graphstream.ui.view",
                "View",
                "public abstract Camera getCamera()"
            ],
            [
                "allNodesOrSpritesIn",
                "org.graphstream.ui.view",
                "View",
                "public abstract Collection<GraphicElement> allNodesOrSpritesIn(double arg0, double arg1, double arg2, double arg3)"
            ],
            [
                "findNodeOrSpriteAt",
                "org.graphstream.ui.view",
                "View",
                "public abstract GraphicElement findNodeOrSpriteAt(double arg0, double arg1)"
            ]
        ],
        "tokensMethodVariablesNonPrivateNonStaticAttributes": [
            [
                "graphInAnotherThread",
                "org.graphstream.ui.view",
                "Viewer",
                "// Attribute\n/**\n * If true the graph we display is in another thread, the synchronisation\n * between the graph and the graphic graph must therefore use thread\n * proxies.\n */\nprotected boolean graphInAnotherThread = true;"
            ],
            [
                "graph",
                "org.graphstream.ui.view",
                "Viewer",
                "/**\n * The graph observed by the views.\n */\nprotected GraphicGraph graph;"
            ],
            [
                "pumpPipe",
                "org.graphstream.ui.view",
                "Viewer",
                "/**\n * If we have to pump events by ourself.\n */\nprotected ProxyPipe pumpPipe;"
            ],
            [
                "sourceInSameThread",
                "org.graphstream.ui.view",
                "Viewer",
                "/**\n * If we take graph events from a source in this thread.\n */\nprotected Source sourceInSameThread;"
            ],
            [
                "timer",
                "org.graphstream.ui.view",
                "Viewer",
                "/**\n * Timer in the Swing thread.\n */\nprotected Timer timer;"
            ],
            [
                "delay",
                "org.graphstream.ui.view",
                "Viewer",
                "/**\n * Delay in milliseconds between frames.\n */\nprotected int delay = 40;"
            ],
            [
                "views",
                "org.graphstream.ui.view",
                "Viewer",
                "/**\n * The set of views.\n */\nprotected final Map<String, View> views = new TreeMap<String, View>();"
            ],
            [
                "closeFramePolicy",
                "org.graphstream.ui.view",
                "Viewer",
                "/**\n * What to do when a view frame is closed.\n */\nprotected CloseFramePolicy closeFramePolicy = CloseFramePolicy.EXIT;"
            ],
            [
                "optLayout",
                "org.graphstream.ui.view",
                "Viewer",
                "// Attribute\n/**\n * Optional layout algorithm running in another thread.\n */\nprotected LayoutRunner optLayout = null;"
            ],
            [
                "layoutPipeIn",
                "org.graphstream.ui.view",
                "Viewer",
                "/**\n * If there is a layout in another thread, this is the pipe coming from it.\n */\nprotected ProxyPipe layoutPipeIn = null;"
            ],
            [
                "ui",
                "javax.swing",
                "JComponent",
                "protected transient ComponentUI ui;"
            ],
            [
                "listenerList",
                "javax.swing",
                "JComponent",
                "protected EventListenerList listenerList;"
            ],
            [
                "paintingChild",
                "javax.swing",
                "JComponent",
                "transient Component paintingChild;"
            ],
            [
                "layoutMgr",
                "java.awt",
                "Container",
                "LayoutManager layoutMgr;"
            ],
            [
                "containerListener",
                "java.awt",
                "Container",
                "transient ContainerListener containerListener;"
            ],
            [
                "listeningChildren",
                "java.awt",
                "Container",
                "transient int listeningChildren;"
            ],
            [
                "listeningBoundsChildren",
                "java.awt",
                "Container",
                "transient int listeningBoundsChildren;"
            ],
            [
                "descendantsCount",
                "java.awt",
                "Container",
                "transient int descendantsCount;"
            ],
            [
                "preserveBackgroundColor",
                "java.awt",
                "Container",
                "transient Color preserveBackgroundColor;"
            ],
            [
                "modalComp",
                "java.awt",
                "Container",
                "transient Component modalComp;"
            ],
            [
                "modalAppContext",
                "java.awt",
                "Container",
                "transient AppContext modalAppContext;"
            ],
            [
                "peer",
                "java.awt",
                "Component",
                "transient volatile ComponentPeer peer;"
            ],
            [
                "parent",
                "java.awt",
                "Component",
                "transient Container parent;"
            ],
            [
                "appContext",
                "java.awt",
                "Component",
                "transient AppContext appContext;"
            ],
            [
                "x",
                "java.awt",
                "Component",
                "int x;"
            ],
            [
                "y",
                "java.awt",
                "Component",
                "int y;"
            ],
            [
                "width",
                "java.awt",
                "Component",
                "int width;"
            ],
            [
                "height",
                "java.awt",
                "Component",
                "int height;"
            ],
            [
                "foreground",
                "java.awt",
                "Component",
                "Color foreground;"
            ],
            [
                "background",
                "java.awt",
                "Component",
                "Color background;"
            ],
            [
                "font",
                "java.awt",
                "Component",
                "volatile Font font;"
            ],
            [
                "peerFont",
                "java.awt",
                "Component",
                "Font peerFont;"
            ],
            [
                "cursor",
                "java.awt",
                "Component",
                "Cursor cursor;"
            ],
            [
                "locale",
                "java.awt",
                "Component",
                "Locale locale;"
            ],
            [
                "ignoreRepaint",
                "java.awt",
                "Component",
                "boolean ignoreRepaint;"
            ],
            [
                "visible",
                "java.awt",
                "Component",
                "boolean visible;"
            ],
            [
                "enabled",
                "java.awt",
                "Component",
                "boolean enabled;"
            ],
            [
                "dropTarget",
                "java.awt",
                "Component",
                "DropTarget dropTarget;"
            ],
            [
                "popups",
                "java.awt",
                "Component",
                "Vector<PopupMenu> popups;"
            ],
            [
                "focusTraversalKeys",
                "java.awt",
                "Component",
                "Set<AWTKeyStroke>[] focusTraversalKeys;"
            ],
            [
                "minSize",
                "java.awt",
                "Component",
                "Dimension minSize;"
            ],
            [
                "minSizeSet",
                "java.awt",
                "Component",
                "boolean minSizeSet;"
            ],
            [
                "prefSize",
                "java.awt",
                "Component",
                "Dimension prefSize;"
            ],
            [
                "prefSizeSet",
                "java.awt",
                "Component",
                "boolean prefSizeSet;"
            ],
            [
                "maxSize",
                "java.awt",
                "Component",
                "Dimension maxSize;"
            ],
            [
                "maxSizeSet",
                "java.awt",
                "Component",
                "boolean maxSizeSet;"
            ],
            [
                "componentOrientation",
                "java.awt",
                "Component",
                "transient ComponentOrientation componentOrientation;"
            ],
            [
                "newEventsOnly",
                "java.awt",
                "Component",
                "boolean newEventsOnly;"
            ],
            [
                "componentListener",
                "java.awt",
                "Component",
                "transient ComponentListener componentListener;"
            ],
            [
                "focusListener",
                "java.awt",
                "Component",
                "transient FocusListener focusListener;"
            ],
            [
                "hierarchyListener",
                "java.awt",
                "Component",
                "transient HierarchyListener hierarchyListener;"
            ],
            [
                "hierarchyBoundsListener",
                "java.awt",
                "Component",
                "transient HierarchyBoundsListener hierarchyBoundsListener;"
            ],
            [
                "keyListener",
                "java.awt",
                "Component",
                "transient KeyListener keyListener;"
            ],
            [
                "mouseListener",
                "java.awt",
                "Component",
                "transient MouseListener mouseListener;"
            ],
            [
                "mouseMotionListener",
                "java.awt",
                "Component",
                "transient MouseMotionListener mouseMotionListener;"
            ],
            [
                "mouseWheelListener",
                "java.awt",
                "Component",
                "transient MouseWheelListener mouseWheelListener;"
            ],
            [
                "inputMethodListener",
                "java.awt",
                "Component",
                "transient InputMethodListener inputMethodListener;"
            ],
            [
                "eventMask",
                "java.awt",
                "Component",
                "long eventMask;"
            ],
            [
                "isPacked",
                "java.awt",
                "Component",
                "boolean isPacked;"
            ],
            [
                "backgroundEraseDisabled",
                "java.awt",
                "Component",
                "transient boolean backgroundEraseDisabled;"
            ],
            [
                "eventCache",
                "java.awt",
                "Component",
                "transient EventQueueItem[] eventCache;"
            ],
            [
                "accessibleContext",
                "java.awt",
                "Component",
                "protected AccessibleContext accessibleContext;"
            ]
        ],
        "tokensOracleVariablesNonPrivateNonStaticNonVoidMethods": [],
        "tokensOracleVariablesNonPrivateNonStaticAttributes": []
    },
    {
        "id": 2954,
        "oracle": ";",
        "oracleType": "PRE",
        "projectName": "gs-core-1.3",
        "packageName": "org.graphstream.ui.view",
        "className": "View",
        "javadocTag": "@param y1 The rectangle lowest point ordinate.",
        "methodJavadoc": "    /**\n     * Search for all the nodes and sprites contained inside the rectangle\n     * (x1,y1)-(x2,y2).\n     *\n     * @param x1 The rectangle lowest point abscissa.\n     * @param y1 The rectangle lowest point ordinate.\n     * @param x2 The rectangle highest point abscissa.\n     * @param y2 The rectangle highest point ordinate.\n     * @return The set of sprites and nodes in the given rectangle.\n     */",
        "methodSourceCode": "Collection<GraphicElement> allNodesOrSpritesIn(double x1, double y1, double x2, double y2);",
        "classJavadoc": "/**\n * A view on a graphic graph.\n */",
        "classSourceCode": "/*\n * Copyright 2006 - 2015\n *     Stefan Balev     <stefan.balev@graphstream-project.org>\n *     Julien Baudry    <julien.baudry@graphstream-project.org>\n *     Antoine Dutot    <antoine.dutot@graphstream-project.org>\n *     Yoann Pign\u00e9      <yoann.pigne@graphstream-project.org>\n *     Guilhelm Savin   <guilhelm.savin@graphstream-project.org>\n * \n * This file is part of GraphStream <http://graphstream-project.org>.\n * \n * GraphStream is a library whose purpose is to handle static or dynamic\n * graph, create them from scratch, file or any source and display them.\n * \n * This program is free software distributed under the terms of two licenses, the\n * CeCILL-C license that fits European law, and the GNU Lesser General Public\n * License. You can  use, modify and/ or redistribute the software under the terms\n * of the CeCILL-C license as circulated by CEA, CNRS and INRIA at the following\n * URL <http://www.cecill.info> or under the terms of the GNU LGPL as published by\n * the Free Software Foundation, either version 3 of the License, or (at your\n * option) any later version.\n * \n * This program is distributed in the hope that it will be useful, but WITHOUT ANY\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A\n * PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more details.\n * \n * You should have received a copy of the GNU Lesser General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n * \n * The fact that you are presently reading this means that you have had\n * knowledge of the CeCILL-C and LGPL licenses and that you accept their terms.\n */\npackage org.graphstream.ui.view;\n\nimport org.graphstream.ui.graphicGraph.GraphicElement;\nimport org.graphstream.ui.graphicGraph.GraphicGraph;\nimport org.graphstream.ui.view.util.MouseManager;\nimport org.graphstream.ui.view.util.ShortcutManager;\n\nimport java.awt.event.KeyListener;\nimport java.awt.event.MouseListener;\nimport java.awt.event.MouseMotionListener;\nimport java.util.Collection;\n\n/**\n * A view on a graphic graph.\n */\npublic interface View\n{\n    /**\n     * Get the unique view id.\n     *\n     * @return a view id\n     */\n    String getId();\n\n    /**\n     * Get a camera object to provide control commands on the view.\n     *\n     * @return a Camera instance\n     */\n    Camera getCamera();\n\n    /**\n     * Search for the first node or sprite (in that order) that contains the\n     * point at coordinates (x, y).\n     *\n     * @param x The point abscissa.\n     * @param y The point ordinate.\n     * @return The first node or sprite at the given coordinates or null if\n     * nothing found.\n     */\n    GraphicElement findNodeOrSpriteAt(double x, double y);\n\n    /**\n     * Search for all the nodes and sprites contained inside the rectangle\n     * (x1,y1)-(x2,y2).\n     *\n     * @param x1 The rectangle lowest point abscissa.\n     * @param y1 The rectangle lowest point ordinate.\n     * @param x2 The rectangle highest point abscissa.\n     * @param y2 The rectangle highest point ordinate.\n     * @return The set of sprites and nodes in the given rectangle.\n     */\n    Collection<GraphicElement> allNodesOrSpritesIn(double x1, double y1, double x2, double y2);\n\n    /**\n     * Redisplay or update the view contents. Called by the Viewer.\n     *\n     * @param graph        The graphic graph to represent.\n     * @param graphChanged True if the graph changed since the last call to this method.\n     */\n    void display(GraphicGraph graph, boolean graphChanged);\n\n    /**\n     * Close definitively this view. Called by the Viewer.\n     *\n     * @param graph The graphic graph.\n     */\n    void close(GraphicGraph graph);\n\n\n    /**\n     * Called by the mouse manager to specify where a node and sprite selection\n     * started.\n     *\n     * @param x1 The selection start abscissa.\n     * @param y1 The selection start ordinate.\n     */\n    void beginSelectionAt(double x1, double y1);\n\n    /**\n     * The selection already started grows toward position (x, y).\n     *\n     * @param x The new end selection abscissa.\n     * @param y The new end selection ordinate.\n     */\n    void selectionGrowsAt(double x, double y);\n\n    /**\n     * Called by the mouse manager to specify where a node and spite selection\n     * stopped.\n     *\n     * @param x2 The selection stop abscissa.\n     * @param y2 The selection stop ordinate.\n     */\n    void endSelectionAt(double x2, double y2);\n\n    /**\n     * Freeze an element so that the optional layout cannot move it.\n     *\n     * @param element The element.\n     * @param frozen  If true the element cannot be moved automatically.\n     */\n    void freezeElement(GraphicElement element, boolean frozen);\n\n    /**\n     * Force an element to move at the given location in pixels.\n     *\n     * @param element The element.\n     * @param x       The requested position abscissa in pixels.\n     * @param y       The requested position ordinate in pixels.\n     */\n    void moveElementAtPx(GraphicElement element, double x, double y);\n\n    /**\n     * Change the manager for mouse events on this view. If the value for the new manager is\n     * null, a default manager is installed. The {@link org.graphstream.ui.view.util.MouseManager#init(org.graphstream.ui.graphicGraph.GraphicGraph, View)}\n     * method must not yet have been called.\n     *\n     * @param manager The new manager, or null to set the default manager.\n     * @see org.graphstream.ui.view.util.MouseManager\n     */\n    void setMouseManager(MouseManager manager);\n\n    /**\n     * Change the manager for key and shortcuts events on this view. If the value for the new\n     * manager is null, a default manager is installed. The {@link org.graphstream.ui.view.util.ShortcutManager#init(org.graphstream.ui.graphicGraph.GraphicGraph, View)}\n     * method must not yet have been called.\n     *\n     * @param manager The new manager, or null to set the default manager\n     * @see org.graphstream.ui.view.util.ShortcutManager\n     */\n    void setShortcutManager(ShortcutManager manager);\n\n    /**\n     * Request ui focus.\n     */\n    void requestFocus();\n\n    /**\n     * Add key ui listener.\n     *\n     * @param l the listener\n     */\n    void addKeyListener(KeyListener l);\n\n    /**\n     * Remove key ui listener.\n     *\n     * @param l the listener\n     */\n    void removeKeyListener(KeyListener l);\n\n    /**\n     * Add mouse ui listener.\n     *\n     * @param l the listener\n     */\n    void addMouseListener(MouseListener l);\n\n    /**\n     * Remove mouse ui listener.\n     *\n     * @param l the listener\n     */\n    void removeMouseListener(MouseListener l);\n\n    /**\n     * Add mouse motion ui listener.\n     *\n     * @param l the listener\n     */\n    void addMouseMotionListener(MouseMotionListener l);\n\n    /**\n     * Remove mouse motion ui listener.\n     *\n     * @param l the listener\n     */\n    void removeMouseMotionListener(MouseMotionListener l);\n}\n",
        "tokensGeneralGrammar": [
            "null",
            "true",
            "false",
            ",",
            ".",
            ":",
            ";",
            "?",
            "(",
            ")",
            "jdVar",
            "stream",
            "Arrays",
            "allMatch",
            "noneMatch",
            "anyMatch",
            "~",
            ">>",
            "<<",
            ">>>",
            "|",
            "&",
            "^",
            "+",
            "-",
            "/",
            "*",
            "%",
            "&&",
            "||",
            ">=",
            "<=",
            ">",
            "<",
            "==",
            "!=",
            "instanceof",
            "class",
            "methodResultID",
            "this"
        ],
        "tokensGeneralValuesGlobalDictionary": [
            [
                "0",
                "int"
            ],
            [
                "1",
                "int"
            ],
            [
                "-1",
                "int"
            ],
            [
                "0.0",
                "double"
            ],
            [
                "1.0",
                "double"
            ],
            [
                "-1.0",
                "double"
            ],
            [
                "\"\"",
                "String"
            ],
            [
                "\" \"",
                "String"
            ]
        ],
        "tokensProjectClasses": [
            [
                "DefaultCamera",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "GradientFactory",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "GraphMetrics",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "Graphics2DOutput",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "ImageCache",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "StrokeFactory",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "FontCache",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "FontSlot",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "DefaultView",
                "org.graphstream.ui.swingViewer"
            ],
            [
                "SpriteRenderer",
                "org.graphstream.ui.swingViewer.basicRenderer"
            ],
            [
                "ElementRenderer",
                "org.graphstream.ui.swingViewer.basicRenderer"
            ],
            [
                "NodeRenderer",
                "org.graphstream.ui.swingViewer.basicRenderer"
            ],
            [
                "Arrow",
                "org.graphstream.ui.swingViewer.basicRenderer.shapes"
            ],
            [
                "Shape",
                "org.graphstream.ui.swingViewer.basicRenderer.shapes"
            ],
            [
                "EdgeRenderer",
                "org.graphstream.ui.swingViewer.basicRenderer"
            ],
            [
                "SwingBasicGraphRenderer",
                "org.graphstream.ui.swingViewer.basicRenderer"
            ],
            [
                "GraphRendererBase",
                "org.graphstream.ui.swingViewer"
            ],
            [
                "GraphRenderer",
                "org.graphstream.ui.swingViewer"
            ],
            [
                "LayerRenderer",
                "org.graphstream.ui.swingViewer"
            ],
            [
                "ViewPanel",
                "org.graphstream.ui.swingViewer"
            ],
            [
                "Layouts",
                "org.graphstream.ui.layout"
            ],
            [
                "Layout",
                "org.graphstream.ui.layout"
            ],
            [
                "LayoutRunner",
                "org.graphstream.ui.layout"
            ],
            [
                "NodeParticle",
                "org.graphstream.ui.layout.springbox"
            ],
            [
                "GraphCellData",
                "org.graphstream.ui.layout.springbox"
            ],
            [
                "EdgeSpring",
                "org.graphstream.ui.layout.springbox"
            ],
            [
                "Energies",
                "org.graphstream.ui.layout.springbox"
            ],
            [
                "BarnesHutLayout",
                "org.graphstream.ui.layout.springbox"
            ],
            [
                "LinLog",
                "org.graphstream.ui.layout.springbox.implementations"
            ],
            [
                "LinLogNodeParticle",
                "org.graphstream.ui.layout.springbox.implementations"
            ],
            [
                "SpringBoxNodeParticle",
                "org.graphstream.ui.layout.springbox.implementations"
            ],
            [
                "SpringBox",
                "org.graphstream.ui.layout.springbox.implementations"
            ],
            [
                "Point2",
                "org.graphstream.ui.geom"
            ],
            [
                "Vector2",
                "org.graphstream.ui.geom"
            ],
            [
                "Vector3",
                "org.graphstream.ui.geom"
            ],
            [
                "Point3",
                "org.graphstream.ui.geom"
            ],
            [
                "ViewerListener",
                "org.graphstream.ui.view"
            ],
            [
                "MouseManager",
                "org.graphstream.ui.view.util"
            ],
            [
                "ShortcutManager",
                "org.graphstream.ui.view.util"
            ],
            [
                "DefaultShortcutManager",
                "org.graphstream.ui.view.util"
            ],
            [
                "FpsCounter",
                "org.graphstream.ui.view.util"
            ],
            [
                "CubicCurve",
                "org.graphstream.ui.view.util"
            ],
            [
                "DefaultMouseManager",
                "org.graphstream.ui.view.util"
            ],
            [
                "Selection",
                "org.graphstream.ui.view"
            ],
            [
                "ViewerPipe",
                "org.graphstream.ui.view"
            ],
            [
                "Viewer",
                "org.graphstream.ui.view"
            ],
            [
                "View",
                "org.graphstream.ui.view"
            ],
            [
                "Camera",
                "org.graphstream.ui.view"
            ],
            [
                "Sprite",
                "org.graphstream.ui.spriteManager"
            ],
            [
                "InvalidSpriteIDException",
                "org.graphstream.ui.spriteManager"
            ],
            [
                "SpriteManager",
                "org.graphstream.ui.spriteManager"
            ],
            [
                "SpriteFactory",
                "org.graphstream.ui.spriteManager"
            ],
            [
                "StyleGroupListener",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "Colors",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "Values",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "StyleSheetListener",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "StyleSheetParserTokenManager",
                "org.graphstream.ui.graphicGraph.stylesheet.parser"
            ],
            [
                "StyleSheetParserConstants",
                "org.graphstream.ui.graphicGraph.stylesheet.parser"
            ],
            [
                "StyleSheetParser",
                "org.graphstream.ui.graphicGraph.stylesheet.parser"
            ],
            [
                "Style",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "StyleSheet",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "StyleConstants",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "Selector",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "Value",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "Rule",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "GraphicNode",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "StyleGroup",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphPosLengthUtils",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphicEdge",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphicElementChangeListener",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphicGraph",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "StyleGroupSet",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphicSprite",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphicElement",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "VerboseSink",
                "org.graphstream.util"
            ],
            [
                "GraphListeners",
                "org.graphstream.util"
            ],
            [
                "Environment",
                "org.graphstream.util"
            ],
            [
                "GraphDiff",
                "org.graphstream.util"
            ],
            [
                "Filters",
                "org.graphstream.util"
            ],
            [
                "FilteredEdgeIterator",
                "org.graphstream.util"
            ],
            [
                "Parser",
                "org.graphstream.util.parser"
            ],
            [
                "ParserFactory",
                "org.graphstream.util.parser"
            ],
            [
                "TokenMgrError",
                "org.graphstream.util.parser"
            ],
            [
                "ParseException",
                "org.graphstream.util.parser"
            ],
            [
                "SimpleCharStream",
                "org.graphstream.util.parser"
            ],
            [
                "Token",
                "org.graphstream.util.parser"
            ],
            [
                "ISODateIO",
                "org.graphstream.util.time"
            ],
            [
                "ISODateComponent",
                "org.graphstream.util.time"
            ],
            [
                "FilteredNodeIterator",
                "org.graphstream.util"
            ],
            [
                "FixedArrayList",
                "org.graphstream.util.set"
            ],
            [
                "StepCounter",
                "org.graphstream.util"
            ],
            [
                "GraphSpells",
                "org.graphstream.util.cumulative"
            ],
            [
                "CumulativeAttributes",
                "org.graphstream.util.cumulative"
            ],
            [
                "CumulativeSpells",
                "org.graphstream.util.cumulative"
            ],
            [
                "Filter",
                "org.graphstream.util"
            ],
            [
                "PipeAdapter",
                "org.graphstream.stream"
            ],
            [
                "GraphParseException",
                "org.graphstream.stream"
            ],
            [
                "ElementSink",
                "org.graphstream.stream"
            ],
            [
                "URLSource",
                "org.graphstream.stream.net"
            ],
            [
                "HTTPSource",
                "org.graphstream.stream.net"
            ],
            [
                "SourceAdapter",
                "org.graphstream.stream"
            ],
            [
                "AttributeSink",
                "org.graphstream.stream"
            ],
            [
                "GMLParserConstants",
                "org.graphstream.stream.file.gml"
            ],
            [
                "GMLParserTokenManager",
                "org.graphstream.stream.file.gml"
            ],
            [
                "GMLContext",
                "org.graphstream.stream.file.gml"
            ],
            [
                "Graphics",
                "org.graphstream.stream.file.gml"
            ],
            [
                "KeyValues",
                "org.graphstream.stream.file.gml"
            ],
            [
                "GMLParser",
                "org.graphstream.stream.file.gml"
            ],
            [
                "FileSinkGraphML",
                "org.graphstream.stream.file"
            ],
            [
                "TLPParserConstants",
                "org.graphstream.stream.file.tlp"
            ],
            [
                "TLPParser",
                "org.graphstream.stream.file.tlp"
            ],
            [
                "TLPParserTokenManager",
                "org.graphstream.stream.file.tlp"
            ],
            [
                "FileSinkFactory",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceEdge",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkBase",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkTikZ",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceGEXF",
                "org.graphstream.stream.file"
            ],
            [
                "DOTParser",
                "org.graphstream.stream.file.dot"
            ],
            [
                "DOTParserConstants",
                "org.graphstream.stream.file.dot"
            ],
            [
                "DOTParserTokenManager",
                "org.graphstream.stream.file.dot"
            ],
            [
                "FileSink",
                "org.graphstream.stream.file"
            ],
            [
                "PajekContext",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "Graphics",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "NodeGraphics",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "EdgeGraphics",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "EdgeMatrix",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "PajekParserTokenManager",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "PajekParserConstants",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "FileSourceXML",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkBaseFiltered",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkDOT",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceParser",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkDGSFiltered",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceDOT",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceDGS1And2",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceGraphML",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceFactory",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkImages",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkDynamicGML",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkSVG",
                "org.graphstream.stream.file"
            ],
            [
                "GEXFSpell",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "SmartXMLWriter",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFElement",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFEdges",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFAttValues",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFEdge",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFSpells",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFAttValue",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFNodes",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFNode",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFMeta",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFAttributes",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXF",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFGraph",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFAttribute",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "OldFileSourceDGS",
                "org.graphstream.stream.file.dgs"
            ],
            [
                "DGSParser",
                "org.graphstream.stream.file.dgs"
            ],
            [
                "FileSourceBase",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkGML",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceDGS",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkDGSUtility",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceTLP",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkSVG2",
                "org.graphstream.stream.file"
            ],
            [
                "FileSource",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceNCol",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourcePajek",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceGPX",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceLGL",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkGEXF2",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceGML",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkGEXF",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkDGS",
                "org.graphstream.stream.file"
            ],
            [
                "ProxyPipe",
                "org.graphstream.stream"
            ],
            [
                "Sink",
                "org.graphstream.stream"
            ],
            [
                "Timeline",
                "org.graphstream.stream"
            ],
            [
                "Pipe",
                "org.graphstream.stream"
            ],
            [
                "SinkAdapter",
                "org.graphstream.stream"
            ],
            [
                "Replayable",
                "org.graphstream.stream"
            ],
            [
                "Source",
                "org.graphstream.stream"
            ],
            [
                "AnnotatedSink",
                "org.graphstream.stream"
            ],
            [
                "GraphReplay",
                "org.graphstream.stream"
            ],
            [
                "AttributePipe",
                "org.graphstream.stream"
            ],
            [
                "SinkTime",
                "org.graphstream.stream.sync"
            ],
            [
                "SourceTime",
                "org.graphstream.stream.sync"
            ],
            [
                "PipeBase",
                "org.graphstream.stream"
            ],
            [
                "ThreadProxyPipe",
                "org.graphstream.stream.thread"
            ],
            [
                "ThreadProxyPipeOld",
                "org.graphstream.stream.thread"
            ],
            [
                "RMISource",
                "org.graphstream.stream.rmi"
            ],
            [
                "RMIAdapterOut",
                "org.graphstream.stream.rmi"
            ],
            [
                "RMISink",
                "org.graphstream.stream.rmi"
            ],
            [
                "RMIAdapterIn",
                "org.graphstream.stream.rmi"
            ],
            [
                "SourceBase",
                "org.graphstream.stream"
            ],
            [
                "NetStreamDecoder",
                "org.graphstream.stream.netstream"
            ],
            [
                "NetStreamReceiver",
                "org.graphstream.stream.netstream"
            ],
            [
                "NetStreamConstants",
                "org.graphstream.stream.netstream"
            ],
            [
                "NetStreamSender",
                "org.graphstream.stream.netstream"
            ],
            [
                "DefaultNetStreamDecoder",
                "org.graphstream.stream.netstream"
            ],
            [
                "Base64",
                "org.graphstream.stream.netstream.packing"
            ],
            [
                "NetStreamUnpacker",
                "org.graphstream.stream.netstream.packing"
            ],
            [
                "Base64Packer",
                "org.graphstream.stream.netstream.packing"
            ],
            [
                "Base64Unpacker",
                "org.graphstream.stream.netstream.packing"
            ],
            [
                "NetStreamPacker",
                "org.graphstream.stream.netstream.packing"
            ],
            [
                "AttributePredicate",
                "org.graphstream.stream"
            ],
            [
                "Element",
                "org.graphstream.graph"
            ],
            [
                "Node",
                "org.graphstream.graph"
            ],
            [
                "BreadthFirstIterator",
                "org.graphstream.graph"
            ],
            [
                "Graph",
                "org.graphstream.graph"
            ],
            [
                "EdgeRejectedException",
                "org.graphstream.graph"
            ],
            [
                "CompoundAttribute",
                "org.graphstream.graph"
            ],
            [
                "Structure",
                "org.graphstream.graph"
            ],
            [
                "DepthFirstIterator",
                "org.graphstream.graph"
            ],
            [
                "NullAttributeException",
                "org.graphstream.graph"
            ],
            [
                "IdAlreadyInUseException",
                "org.graphstream.graph"
            ],
            [
                "EdgeFactory",
                "org.graphstream.graph"
            ],
            [
                "ElementNotFoundException",
                "org.graphstream.graph"
            ],
            [
                "OneAttributeElement",
                "org.graphstream.graph.implementations"
            ],
            [
                "AdjacencyListNode",
                "org.graphstream.graph.implementations"
            ],
            [
                "SingleNode",
                "org.graphstream.graph.implementations"
            ],
            [
                "AbstractElement",
                "org.graphstream.graph.implementations"
            ],
            [
                "AdjacencyListGraph",
                "org.graphstream.graph.implementations"
            ],
            [
                "AbstractNode",
                "org.graphstream.graph.implementations"
            ],
            [
                "DefaultGraph",
                "org.graphstream.graph.implementations"
            ],
            [
                "MultiGraph",
                "org.graphstream.graph.implementations"
            ],
            [
                "Graphs",
                "org.graphstream.graph.implementations"
            ],
            [
                "SingleGraph",
                "org.graphstream.graph.implementations"
            ],
            [
                "MultiNode",
                "org.graphstream.graph.implementations"
            ],
            [
                "AbstractGraph",
                "org.graphstream.graph.implementations"
            ],
            [
                "AbstractEdge",
                "org.graphstream.graph.implementations"
            ],
            [
                "GraphFactory",
                "org.graphstream.graph"
            ],
            [
                "NodeFactory",
                "org.graphstream.graph"
            ],
            [
                "Edge",
                "org.graphstream.graph"
            ],
            [
                "Path",
                "org.graphstream.graph"
            ]
        ],
        "tokensProjectClassesNonPrivateStaticNonVoidMethods": [
            [
                "gradientInArea",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "/**\n * Generate a gradient in the given pixel area following the given style.\n * This produces a gradient only if the style fill-mode is compatible.\n *\n * @param x0\n *            The left corner of the area.\n * @param y0\n *            The bottom corner of the area.\n * @param width\n *            The area width.\n * @param height\n *            The area height.\n * @param style\n *            The style.\n * @return A gradient paint or null if the style does not specify a\n *         gradient.\n */\npublic static Paint gradientInArea(int x0, int y0, int width, int height, Style style) {\n    switch(style.getFillMode()) {\n        case GRADIENT_VERTICAL:\n            return linearGradientFromStyle(x0, y0, x0, y0 + height, style);\n        case GRADIENT_HORIZONTAL:\n            return linearGradientFromStyle(x0, y0, x0 + width, y0, style);\n        case GRADIENT_DIAGONAL1:\n            return linearGradientFromStyle(x0, y0, x0 + width, y0 + height, style);\n        case GRADIENT_DIAGONAL2:\n            return linearGradientFromStyle(x0 + width, y0, x0, y0 + height, style);\n        case GRADIENT_RADIAL:\n            return radialGradientFromStyle(x0 + (width / 2), y0 + (height / 2), width > height ? width / 2 : height / 2, style);\n        default:\n            return null;\n    }\n}"
            ],
            [
                "linearGradientFromStyle",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "/**\n * Generate a linear gradient between two given points corresponding to the\n * given style.\n *\n * @param x0\n *            The start point abscissa.\n * @param y0\n *            The start point ordinate.\n * @param x1\n *            The end point abscissa.\n * @param y1\n *            The end point ordinate.\n * @param style\n *            The style.\n * @return A paint for the gradient or null if the style specifies no\n *         gradient (the fill mode is not a linear gradient or there is only\n *         one fill colour).\n */\npublic static Paint linearGradientFromStyle(float x0, float y0, float x1, float y1, Style style) {\n    Paint paint = null;\n    if (style.getFillColorCount() > 1) {\n        switch(style.getFillMode()) {\n            case GRADIENT_DIAGONAL1:\n            case GRADIENT_DIAGONAL2:\n            case GRADIENT_HORIZONTAL:\n            case GRADIENT_VERTICAL:\n                if (version16)\n                    paint = new LinearGradientPaint(x0, y0, x1, y1, createFractions(style), createColors(style));\n                else\n                    paint = new GradientPaint(x0, y0, style.getFillColor(0), x1, y1, style.getFillColor(1));\n                break;\n            default:\n                break;\n        }\n    }\n    return paint;\n}"
            ],
            [
                "radialGradientFromStyle",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static Paint radialGradientFromStyle(float cx, float cy, float radius, Style style) {\n    return radialGradientFromStyle(cx, cy, radius, cx, cy, style);\n}"
            ],
            [
                "radialGradientFromStyle",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "/**\n * Generate a radial gradient between whose center is at (cx,cy) with the\n * given radius. The focus (fx,fy) is the start position of the gradient in\n * the circle.\n *\n * @param cx\n *            The center point abscissa.\n * @param cy\n *            The center point ordinate.\n * @param fx\n *            The start point abscissa.\n * @param fy\n *            The start point ordinate.\n * @param radius\n *            The gradient radius.\n * @param style\n *            The style.\n * @return A paint for the gradient or null if the style specifies no\n *         gradient (the fill mode is not a radial gradient or there is only\n *         one fill colour).\n */\npublic static Paint radialGradientFromStyle(float cx, float cy, float radius, float fx, float fy, Style style) {\n    Paint paint = null;\n    if (version16) {\n        if (style.getFillColorCount() > 1 && style.getFillMode() == FillMode.GRADIENT_RADIAL) {\n            float[] fractions = createFractions(style);\n            Color[] colors = createColors(style);\n            paint = new RadialGradientPaint(cx, cy, radius, fx, fy, fractions, colors, MultipleGradientPaint.CycleMethod.REFLECT);\n        }\n    }\n    return paint;\n}"
            ],
            [
                "createFractions",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "protected static float[] createFractions(Style style) {\n    int n = style.getFillColorCount();\n    if (n < predefFractions.length)\n        return predefFractions[n];\n    float[] fractions = new float[n];\n    float div = 1f / (n - 1);\n    for (int i = 1; i < (n - 1); i++) fractions[i] = div * i;\n    fractions[0] = 0f;\n    fractions[n - 1] = 1f;\n    return fractions;\n}"
            ],
            [
                "createColors",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "protected static Color[] createColors(Style style) {\n    int n = style.getFillColorCount();\n    Color[] colors = new Color[n];\n    for (int i = 0; i < n; i++) colors[i] = style.getFillColor(i);\n    return colors;\n}"
            ],
            [
                "defaultImageCache",
                "org.graphstream.ui.swingViewer.util",
                "ImageCache",
                "/**\n * Default singleton image cache instance that can be shared. This method\n * and singleton must be used only in the Swing thread.\n *\n * @return The default singleton image cache instance.\n */\npublic static ImageCache defaultImageCache() {\n    if (defaultImageCache == null)\n        defaultImageCache = new ImageCache();\n    return defaultImageCache;\n}"
            ],
            [
                "generateStroke",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "/**\n * Generate a stroke of the appropriate width and style according to the\n * given style and metrics.\n *\n * @param style\n *            The style to use.\n * @param metrics\n *            The metrics to use.\n * @return The stroke or null if the style specifies a \"none\" stroke mode.\n */\npublic static Stroke generateStroke(Style style, GraphMetrics metrics) {\n    if (style.getStrokeWidth().value == 0)\n        return null;\n    switch(style.getStrokeMode()) {\n        case PLAIN:\n            return generatePlainStroke(style, metrics);\n        case DOTS:\n            return generateDotsStroke(style, metrics);\n        case DASHES:\n            return generateDashesStroke(style, metrics);\n        default:\n        case NONE:\n            return null;\n    }\n}"
            ],
            [
                "generatePlainStroke",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "protected static Stroke generatePlainStroke(Style style, GraphMetrics metrics) {\n    float width = (float) metrics.lengthToGu(style.getStrokeWidth());\n    /*\n\t\t * if( width == 1f ) return plainLine1px; // XXX Not a good optimisation\n\t\t * else if( width == 2f ) return plainLine2px; // We draw the whole\n\t\t * graph in GU else if( width == 3f ) return plainLine3px; // In graph\n\t\t * units the width is never exactly 1,2, 5 ... else if( width == 5f )\n\t\t * return plainLine5px; else if( width == 10f ) return plainLine10px;\n\t\t * else\n\t\t */\n    {\n        return new BasicStroke(width);\n    }\n}"
            ],
            [
                "generateDotsStroke",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "protected static Stroke generateDotsStroke(Style style, GraphMetrics metrics) {\n    float width = (float) metrics.lengthToGu(style.getStrokeWidth());\n    /*\n\t\t * if( width == 1f ) return dotsLine1px; else if( width == 2f ) return\n\t\t * dotsLine2px; else if( width == 3f ) return dotsLine3px; else if(\n\t\t * width == 5f ) return dotsLine5px; else if( width == 10f ) return\n\t\t * dotsLine10px; else\n\t\t */\n    {\n        dots[0] = (float) metrics.lengthToGu(1f, Units.PX);\n        dots[1] = dots[0];\n        return new BasicStroke(width, BasicStroke.CAP_BUTT, BasicStroke.JOIN_MITER, 1f, dots, 0);\n    }\n}"
            ],
            [
                "generateDashesStroke",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "protected static Stroke generateDashesStroke(Style style, GraphMetrics metrics) {\n    float width = (float) metrics.lengthToGu(style.getStrokeWidth());\n    /*\n\t\t * if( width == 1f ) return dashesLine1px; else if( width == 2f ) return\n\t\t * dashesLine2px; else if( width == 3f ) return dashesLine3px; else if(\n\t\t * width == 5f ) return dashesLine5px; else if( width == 10f ) return\n\t\t * dashesLine10px; else\n\t\t */\n    {\n        dashes[0] = (float) metrics.lengthToGu(3f, Units.PX);\n        dashes[1] = dashes[0];\n        return new BasicStroke(width, BasicStroke.CAP_BUTT, BasicStroke.JOIN_MITER, 1f, dashes, 0);\n    }\n}"
            ],
            [
                "defaultFontCache",
                "org.graphstream.ui.swingViewer.util",
                "FontCache",
                "/**\n * Default singleton instance for shared font cache. This method and cache\n * can only be used in the Swing thread.\n *\n * @return The default singleton font cache instance.\n */\npublic static FontCache defaultFontCache() {\n    if (defaultFontCache == null)\n        defaultFontCache = new FontCache();\n    return defaultFontCache;\n}"
            ],
            [
                "newLayoutAlgorithm",
                "org.graphstream.ui.layout",
                "Layouts",
                "/**\n * Creates a layout according to the \"org.graphstream.ui.layout\" system property.\n *\n * @return The new layout or the default GraphStream \"Spring-Box\" layout if\n *         the \"gs.ui.layout\" system property is either not set or contains\n *         a class that cannot be found.\n */\npublic static Layout newLayoutAlgorithm() {\n    String layoutClassName;\n    try {\n        layoutClassName = System.getProperty(\"gs.ui.layout\");\n        if (layoutClassName != null) {\n            logger.log(Level.WARNING, \"\\\"gs.ui.layout\\\" is deprecated, use \\\"org.graphstream.ui.layout\\\" instead.\");\n        } else {\n            layoutClassName = System.getProperty(\"org.graphstream.ui.layout\");\n        }\n    } catch (AccessControlException e) {\n        layoutClassName = null;\n    }\n    if (layoutClassName != null) {\n        try {\n            Class<?> c = Class.forName(layoutClassName);\n            Object object = c.newInstance();\n            if (object instanceof Layout) {\n                return (Layout) object;\n            } else {\n                logger.warning(String.format(\"class '%s' is not a 'GraphRenderer'%n\", object));\n            }\n        } catch (Exception e) {\n            logger.log(Level.WARNING, \"Cannot create layout.\", e);\n        }\n    }\n    return new org.graphstream.ui.layout.springbox.implementations.SpringBox(false);\n}"
            ],
            [
                "eval",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * Evaluate a cubic B\u00e9zier curve according to control points `x0`, `x1`,\n * `x2` and `x3` and return the position at parametric position `t` of the\n * curve.\n *\n * @return The coordinate at parametric position `t` on the curve.\n */\npublic static double eval(double x0, double x1, double x2, double x3, double t) {\n    double tt = (1f - t);\n    return x0 * (tt * tt * tt) + 3f * x1 * t * (tt * tt) + 3f * x2 * (t * t) * tt + x3 * (t * t * t);\n}"
            ],
            [
                "eval",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * Evaluate a cubic B\u00e9zier curve according to control points `p0`, `p1`,\n * `p2` and `p3` and return the position at parametric position `t` of the\n * curve.\n *\n * @return The point at parametric position `t` on the curve.\n */\npublic static Point2 eval(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t) {\n    return new Point2(eval(p0.x, p1.x, p2.x, p3.x, t), eval(p0.y, p1.y, p2.y, p3.y, t));\n}"
            ],
            [
                "eval",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * Evaluate a cubic B\u00e9zier curve according to control points `p0`, `p1`,\n * `p2` and `p3` and return the position at parametric position `t` of the\n * curve.\n *\n * @return The point at parametric position `t` on the curve.\n */\npublic static Point2D.Double eval(Point2D.Double p0, Point2D.Double p1, Point2D.Double p2, Point2D.Double p3, double t) {\n    return new Point2D.Double(eval(p0.x, p1.x, p2.x, p3.x, t), eval(p0.y, p1.y, p2.y, p3.y, t));\n}"
            ],
            [
                "eval",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * Evaluate a cubic B\u00e9zier curve according to control points `p0`, `p1`,\n * `p2` and `p3` and store the position at parametric position `t` of the\n * curve in `result`.\n *\n * @return the given reference to `result`.\n */\npublic static Point2 eval(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t, Point2 result) {\n    result.set(eval(p0.x, p1.x, p2.x, p3.x, t), eval(p0.y, p1.y, p2.y, p3.y, t));\n    return result;\n}"
            ],
            [
                "derivative",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * Derivative of a cubic B\u00e9zier curve according to control points `x0`,\n * `x1`, `x2` and `x3` at parametric position `t` of the curve.\n *\n * @return The derivative at parametric position `t` on the curve.\n */\npublic static double derivative(double x0, double x1, double x2, double x3, double t) {\n    return 3 * (x3 - 3 * x2 + 3 * x1 - x0) * t * t + 2 * (3 * x2 - 6 * x1 + 3 * x0) * t + (3 * x1 - 3 * x0);\n}"
            ],
            [
                "derivative",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * Derivative point of a cubic B\u00e9zier curve according to control points\n * `x0`, `x1`, `x2` and `x3` at parametric position `t` of the curve.\n *\n * @return The derivative point at parametric position `t` on the curve.\n */\npublic static Point2 derivative(Point2 p0, Point2 p1, Point2 p2, Point3 p3, double t) {\n    return new Point2(derivative(p0.x, p1.x, p2.x, p3.x, t), derivative(p0.y, p1.y, p2.y, p3.y, t));\n}"
            ],
            [
                "derivative",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * Store in `result` the derivative point of a cubic B\u00e9zier curve according\n * to control points `x0`, `x1`, `x2` and `x3` at parametric position `t` of\n * the curve.\n *\n * @return the given reference to `result`.\n */\npublic static Point2 derivative(Point2 p0, Point2 p1, Point2 p2, Point3 p3, double t, Point2 result) {\n    result.set(derivative(p0.x, p1.x, p2.x, p3.x, t), derivative(p0.y, p1.y, p2.y, p3.y, t));\n    return result;\n}"
            ],
            [
                "perpendicular",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * The perpendicular vector to the curve defined by control points `p0`,\n * `p1`, `p2` and `p3` at parametric position `t`.\n *\n * @return A vector perpendicular to the curve at position `t`.\n */\npublic static Vector2 perpendicular(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t) {\n    return new Vector2(derivative(p0.y, p1.y, p2.y, p3.y, t), -derivative(p0.x, p1.x, p2.x, p3.x, t));\n}"
            ],
            [
                "perpendicular",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * Store in `result` the perpendicular vector to the curve defined by\n * control points `p0`, `p1`, `p2` and `p3` at parametric position `t`.\n *\n * @return the given reference to `result`.\n */\npublic static Vector2 perpendicular(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t, Vector2 result) {\n    result.set(derivative(p0.y, p1.y, p2.y, p3.y, t), -derivative(p0.x, p1.x, p2.x, p3.x, t));\n    return result;\n}"
            ],
            [
                "perpendicular",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * The perpendicular vector to the curve defined by control points `p0`,\n * `p1`, `p2` and `p3` at parametric position `t`.\n *\n * @return A vector perpendicular to the curve at position `t`.\n */\npublic static Point2D.Double perpendicular(Point2D.Double p0, Point2D.Double p1, Point2D.Double p2, Point2D.Double p3, double t) {\n    return new Point2D.Double(derivative(p0.y, p1.y, p2.y, p3.y, t), -derivative(p0.x, p1.x, p2.x, p3.x, t));\n}"
            ],
            [
                "newGraphRenderer",
                "org.graphstream.ui.view",
                "Viewer",
                "// Access\n/**\n * Create a new instance of the default graph renderer. The default graph\n * renderer class is given by the \"org.graphstream.ui.renderer\" system\n * property. If the class indicated by this property is not usable (not in\n * the class path, not of the correct type, etc.) or if the property is not\n * present a SwingBasicGraphRenderer is returned.\n */\npublic static GraphRenderer newGraphRenderer() {\n    String rendererClassName;\n    try {\n        rendererClassName = System.getProperty(\"gs.ui.renderer\");\n        if (rendererClassName != null) {\n            logger.warning(\"\\\"gs.ui.renderer\\\" is deprecated, use \\\"org.graphstream.ui.renderer\\\" instead.\");\n        } else {\n            rendererClassName = System.getProperty(\"org.graphstream.ui.renderer\");\n        }\n    } catch (AccessControlException e) {\n        rendererClassName = null;\n    }\n    if (rendererClassName == null)\n        return new SwingBasicGraphRenderer();\n    try {\n        Class<?> c = Class.forName(rendererClassName);\n        Object object = c.newInstance();\n        if (object instanceof GraphRenderer) {\n            return (GraphRenderer) object;\n        } else {\n            logger.warning(String.format(\"Class '%s' is not a 'GraphRenderer'.\", object));\n        }\n    } catch (Exception e) {\n        logger.log(Level.WARNING, \"Cannot create graph renderer.\", e);\n    }\n    return new SwingBasicGraphRenderer();\n}"
            ],
            [
                "getPositionValue",
                "org.graphstream.ui.spriteManager",
                "SpriteManager",
                "// Utility\nprotected static Values getPositionValue(Object value) {\n    if (value instanceof Object[]) {\n        Object[] values = (Object[]) value;\n        if (values.length == 4) {\n            if (values[0] instanceof Number && values[1] instanceof Number && values[2] instanceof Number && values[3] instanceof Style.Units) {\n                return new Values((Style.Units) values[3], ((Number) values[0]).floatValue(), ((Number) values[1]).floatValue(), ((Number) values[2]).floatValue());\n            } else {\n                logger.warning(\"Cannot parse values[4] for sprite position.\");\n            }\n        } else if (values.length == 3) {\n            if (values[0] instanceof Number && values[1] instanceof Number && values[2] instanceof Number) {\n                return new Values(Units.GU, ((Number) values[0]).floatValue(), ((Number) values[1]).floatValue(), ((Number) values[2]).floatValue());\n            } else {\n                logger.warning(\"Cannot parse values[3] for sprite position.\");\n            }\n        } else if (values.length == 1) {\n            if (values[0] instanceof Number) {\n                return new Values(Units.GU, ((Number) values[0]).floatValue());\n            } else {\n                logger.warning(String.format(\"Sprite position percent is not a number.\"));\n            }\n        } else {\n            logger.warning(String.format(\"Cannot transform value '%s' (length=%d) into a position.\", Arrays.toString(values), values.length));\n        }\n    } else if (value instanceof Number) {\n        return new Values(Units.GU, ((Number) value).floatValue());\n    } else if (value instanceof Value) {\n        return new Values((Value) value);\n    } else if (value instanceof Values) {\n        return new Values((Values) value);\n    } else {\n        System.err.printf(\"GraphicGraph : cannot place sprite with posiiton '%s' (instance of %s)%n\", value, value.getClass().getName());\n    }\n    return null;\n}"
            ],
            [
                "convertColor",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Try to convert the given string value to a colour. It understands the 600\n * colour names of the X11 RGB data base. It also understands colours given\n * in the \"#FFFFFF\" format and the hexadecimal \"0xFFFFFF\" format. Finally,\n * it understands colours given as a \"rgb(1,10,100)\", CSS-like format. If\n * the input value is null, the result is null.\n *\n * @param anyValue\n *            The value to convert.\n * @return the converted colour or null if the conversion failed.\n */\npublic static Color convertColor(Object anyValue) {\n    if (anyValue == null)\n        return null;\n    if (anyValue instanceof Color)\n        return (Color) anyValue;\n    if (anyValue instanceof String) {\n        Color c = null;\n        String value = (String) anyValue;\n        if (value.startsWith(\"#\")) {\n            Matcher m = sharpColor1.matcher(value);\n            if (m.matches()) {\n                if (value.length() == 7) {\n                    try {\n                        c = Color.decode(value);\n                        return c;\n                    } catch (NumberFormatException e) {\n                        c = null;\n                    }\n                } else if (value.length() == 9) {\n                    int r = Integer.parseInt(m.group(1), 16);\n                    int g = Integer.parseInt(m.group(2), 16);\n                    int b = Integer.parseInt(m.group(3), 16);\n                    int a = Integer.parseInt(m.group(4), 16);\n                    return new Color(r, g, b, a);\n                }\n            }\n            m = sharpColor2.matcher(value);\n            if (m.matches()) {\n                if (value.length() >= 4) {\n                    int r = Integer.parseInt(m.group(1), 16) * 16;\n                    int g = Integer.parseInt(m.group(2), 16) * 16;\n                    int b = Integer.parseInt(m.group(3), 16) * 16;\n                    int a = 255;\n                    if (value.length() == 5)\n                        a = Integer.parseInt(m.group(4), 16) * 16;\n                    return new Color(r, g, b, a);\n                }\n            }\n        } else if (value.startsWith(\"rgb\")) {\n            Matcher m = cssColorA.matcher(value);\n            if (m.matches()) {\n                int r = Integer.parseInt(m.group(1));\n                int g = Integer.parseInt(m.group(2));\n                int b = Integer.parseInt(m.group(3));\n                int a = Integer.parseInt(m.group(4));\n                return new Color(r, g, b, a);\n            }\n            m = cssColor.matcher(value);\n            if (m.matches()) {\n                int r = Integer.parseInt(m.group(1));\n                int g = Integer.parseInt(m.group(2));\n                int b = Integer.parseInt(m.group(3));\n                return new Color(r, g, b);\n            }\n        } else if (value.startsWith(\"0x\") || value.startsWith(\"0X\")) {\n            Matcher m = hexaColor.matcher(value);\n            if (m.matches()) {\n                if (value.length() == 8) {\n                    try {\n                        return Color.decode(value);\n                    } catch (NumberFormatException e) {\n                        c = null;\n                    }\n                } else if (value.length() == 10) {\n                    String r = m.group(1);\n                    String g = m.group(2);\n                    String b = m.group(3);\n                    String a = m.group(4);\n                    return new Color(Integer.parseInt(r, 16), Integer.parseInt(g, 16), Integer.parseInt(b, 16), Integer.parseInt(a, 16));\n                }\n            }\n        } else if (value.startsWith(\"java.awt.Color[\")) {\n            Matcher m = awtColor.matcher(value);\n            if (m.matches()) {\n                int r = Integer.parseInt(m.group(1));\n                int g = Integer.parseInt(m.group(2));\n                int b = Integer.parseInt(m.group(3));\n                return new Color(r, g, b);\n            }\n        }\n        return colorMap.get(value.toLowerCase());\n    }\n    // TODO throw an exception instead ??\n    return null;\n}"
            ],
            [
                "convertLabel",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Check if the given value is an instance of CharSequence (String is) and\n * return it as a string. Else return null. If the input value is null, the\n * return value is null. If the value returned is larger than 128\n * characters, this method cuts it to 128 characters. TODO: allow to set the\n * max length of these strings.\n *\n * @param value\n *            The value to convert.\n * @return The corresponding string, or null.\n */\npublic static String convertLabel(Object value) {\n    String label = null;\n    if (value != null) {\n        if (value instanceof CharSequence)\n            label = ((CharSequence) value).toString();\n        else\n            label = value.toString();\n        if (label.length() > 128)\n            label = String.format(\"%s...\", label.substring(0, 128));\n    }\n    return label;\n}"
            ],
            [
                "convertWidth",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Try to convert an arbitrary value to a float. If it is a descendant of\n * Number, the float value is returned. If it is a string, a conversion is\n * tried to change it into a number and if successful, this number is\n * returned as a float. Else, the -1 value is returned as no width can be\n * negative to indicate the conversion failed. If the input is null, the\n * return value is -1.\n *\n * @param value\n *            The input to convert.\n * @return The value or -1 if the conversion failed. TODO should be named\n *         convertNumber\n */\npublic static float convertWidth(Object value) {\n    if (value instanceof CharSequence) {\n        try {\n            float val = Float.parseFloat(((CharSequence) value).toString());\n            return val;\n        } catch (NumberFormatException e) {\n            return -1;\n        }\n    } else if (value instanceof Number) {\n        return ((Number) value).floatValue();\n    }\n    return -1;\n}"
            ],
            [
                "convertValue",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Convert an object to a value with units. The object can be a number, in\n * which case the value returned contains this number in pixel units. The\n * object can be a string. In this case the strings understood by this\n * method are of the form (spaces, number, spaces, unit, spaces). For\n * example \"3px\", \"45gu\", \"5.5%\", \" 25.3  gu \", \"4\", \"   28.1  \".\n *\n * @param value\n *            A Number or a CharSequence.\n * @return A value.\n */\npublic static Value convertValue(Object value) {\n    if (value instanceof CharSequence) {\n        CharSequence string = (CharSequence) value;\n        //\t\t\tif (string == null)\n        //\t\t\t\tthrow new RuntimeException(\"null size string ...\");\n        if (string.length() < 0)\n            throw new RuntimeException(\"empty size string ...\");\n        Matcher m = numberUnit.matcher(string);\n        if (m.matches())\n            return new Value(convertUnit(m.group(2)), Float.parseFloat(m.group(1)));\n        m = number.matcher(string);\n        if (m.matches())\n            return new Value(Units.PX, Float.parseFloat(m.group(1)));\n        throw new RuntimeException(String.format(\"string is not convertible to a value (%s)\", string));\n    } else if (value instanceof Number) {\n        return new Value(Units.PX, ((Number) value).floatValue());\n    }\n    if (value == null)\n        throw new RuntimeException(\"cannot convert null value\");\n    throw new RuntimeException(String.format(\"value is of class %s%n\", value.getClass().getName()));\n}"
            ],
            [
                "convertUnit",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Convert \"gu\", \"px\" and \"%\" to Units.GU, Units.PX, Units.PERCENTS.\n */\nprotected static Units convertUnit(String unit) {\n    if (unit.equals(\"gu\"))\n        return Units.GU;\n    else if (unit.equals(\"px\"))\n        return Units.PX;\n    else if (unit.equals(\"%\"))\n        return Units.PERCENTS;\n    return Units.PX;\n}"
            ],
            [
                "nodePosition",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "/**\n * Retrieve a node position from its attributes (\"x\", \"y\", \"z\", or \"xy\", or\n * \"xyz\").\n *\n * @param id\n *            The node identifier.\n * @return A newly allocated array of three floats containing the (x,y,z)\n *         position of the node, or null if the node is not part of the\n *         graph.\n */\npublic static double[] nodePosition(Graph graph, String id) {\n    Node node = graph.getNode(id);\n    if (node != null)\n        return nodePosition(node);\n    return null;\n}"
            ],
            [
                "nodePointPosition",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "/**\n * Retrieve a node position from its attributes (\"x\", \"y\", \"z\", or \"xy\", or\n * \"xyz\").\n *\n * @param id\n *            The node identifier.\n * @return A newly allocated point containing the (x,y,z)\n *         position of the node, or null if the node is not part of the\n *         graph.\n */\npublic static Point3 nodePointPosition(Graph graph, String id) {\n    Node node = graph.getNode(id);\n    if (node != null)\n        return nodePointPosition(node);\n    return null;\n}"
            ],
            [
                "nodePosition",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "/**\n * Like {@link #nodePosition(Graph,String)} but use an existing node as\n * argument.\n *\n * @param node\n *            The node to consider.\n * @return A newly allocated array of three floats containing the (x,y,z)\n *         position of the node.\n */\npublic static double[] nodePosition(Node node) {\n    double[] xyz = new double[3];\n    nodePosition(node, xyz);\n    return xyz;\n}"
            ],
            [
                "nodePointPosition",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "/**\n * Like {@link #nodePointPosition(Graph,String)} but use an existing node as\n * argument.\n *\n * @param node\n *            The node to consider.\n * @return A newly allocated point containing the (x,y,z)\n *         position of the node.\n */\npublic static Point3 nodePointPosition(Node node) {\n    Point3 pos = new Point3();\n    nodePosition(node, pos);\n    return pos;\n}"
            ],
            [
                "edgeLength",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "/**\n * Compute the edge length of the given edge according to its two nodes\n * positions.\n *\n * @param id\n *            The identifier of the edge.\n * @return The edge length or -1 if the nodes of the edge have no positions.\n * @throws RuntimeException\n *             If the edge cannot be found.\n */\npublic static double edgeLength(Graph graph, String id) {\n    Edge edge = graph.getEdge(id);\n    if (edge != null)\n        return edgeLength(edge);\n    throw new RuntimeException(\"edge '\" + id + \"' cannot be found\");\n}"
            ],
            [
                "edgeLength",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "/**\n * Like {@link #edgeLength(Graph,String)} but use an existing edge as\n * argument.\n *\n * @param edge\n * @return The edge length or -1 if the nodes of the edge have no positions.\n */\npublic static double edgeLength(Edge edge) {\n    double[] xyz0 = nodePosition(edge.getNode0());\n    double[] xyz1 = nodePosition(edge.getNode1());\n    if (xyz0 == null || xyz1 == null)\n        return -1;\n    xyz0[0] = xyz1[0] - xyz0[0];\n    xyz0[1] = xyz1[1] - xyz0[1];\n    xyz0[2] = xyz1[2] - xyz0[2];\n    return Math.sqrt(xyz0[0] * xyz0[0] + xyz0[1] * xyz0[1] + xyz0[2] * xyz0[2]);\n}"
            ],
            [
                "getGlobalEnvironment",
                "org.graphstream.util",
                "Environment",
                "// --------- Static methods -----------\n/**\n * Access to the global shared environment for the whole JVM. This method\n * allows to access a shared environment, that can be read and written from\n * anywhere.\n * @return A singleton instance of the global environment.\n */\npublic static Environment getGlobalEnvironment() {\n    if (GLOBAL_ENV == null)\n        GLOBAL_ENV = new Environment();\n    return GLOBAL_ENV;\n}"
            ],
            [
                "falseFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> falseFilter() {\n    return new Filter<T>() {\n\n        public boolean isAvailable(T e) {\n            return false;\n        }\n    };\n}"
            ],
            [
                "trueFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> trueFilter() {\n    return new Filter<T>() {\n\n        public boolean isAvailable(T e) {\n            return true;\n        }\n    };\n}"
            ],
            [
                "byAttributeFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> byAttributeFilter(String key, Object expectedValue) {\n    return new ByAttributeFilter<T>(key, expectedValue);\n}"
            ],
            [
                "separateNodeAndEdgeFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element, U extends Element> Filter<Element> separateNodeAndEdgeFilter(Filter<T> nodeFilter, Filter<U> edgeFilter) {\n    return new SeparateNodeEdgeFilter<T, U>(nodeFilter, edgeFilter);\n}"
            ],
            [
                "byExtremitiesFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element, U extends Element> Filter<T> byExtremitiesFilter(Filter<U> f) {\n    return new ExtremitiesFilter<T, U>(f);\n}"
            ],
            [
                "byIdFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> byIdFilter(String idPattern) {\n    return new ByIdFilter<T>(idPattern);\n}"
            ],
            [
                "isContained",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> isContained(final Collection<? extends T> set) {\n    return new Filter<T>() {\n\n        public boolean isAvailable(T e) {\n            return set.contains(e);\n        }\n    };\n}"
            ],
            [
                "isIdContained",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> isIdContained(final Collection<String> set) {\n    return new Filter<T>() {\n\n        public boolean isAvailable(T e) {\n            return set.contains(e.getId());\n        }\n    };\n}"
            ],
            [
                "and",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> and(Filter<T> f1, Filter<T> f2) {\n    return new AndFilter<T>(f1, f2);\n}"
            ],
            [
                "or",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> or(Filter<T> f1, Filter<T> f2) {\n    return new OrFilter<T>(f1, f2);\n}"
            ],
            [
                "xor",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> xor(Filter<T> f1, Filter<T> f2) {\n    return new XorFilter<T>(f1, f2);\n}"
            ],
            [
                "not",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> not(Filter<T> f) {\n    return new NotFilter<T>(f);\n}"
            ],
            [
                "addEscapes",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "/**\n * Replaces unprintable characters by their escaped (or unicode escaped)\n * equivalents in the given string\n */\nprotected static final String addEscapes(String str) {\n    StringBuffer retval = new StringBuffer();\n    char ch;\n    for (int i = 0; i < str.length(); i++) {\n        switch(str.charAt(i)) {\n            case 0:\n                continue;\n            case '\\b':\n                retval.append(\"\\\\b\");\n                continue;\n            case '\\t':\n                retval.append(\"\\\\t\");\n                continue;\n            case '\\n':\n                retval.append(\"\\\\n\");\n                continue;\n            case '\\f':\n                retval.append(\"\\\\f\");\n                continue;\n            case '\\r':\n                retval.append(\"\\\\r\");\n                continue;\n            case '\\\"':\n                retval.append(\"\\\\\\\"\");\n                continue;\n            case '\\'':\n                retval.append(\"\\\\\\'\");\n                continue;\n            case '\\\\':\n                retval.append(\"\\\\\\\\\");\n                continue;\n            default:\n                if ((ch = str.charAt(i)) < 0x20 || ch > 0x7e) {\n                    String s = \"0000\" + Integer.toString(ch, 16);\n                    retval.append(\"\\\\u\" + s.substring(s.length() - 4, s.length()));\n                } else {\n                    retval.append(ch);\n                }\n                continue;\n        }\n    }\n    return retval.toString();\n}"
            ],
            [
                "LexicalError",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "/**\n * Returns a detailed message for the Error when it is thrown by the token\n * manager to indicate a lexical error. Parameters : EOFSeen : indicates if\n * EOF caused the lexical error curLexState : lexical state in which this\n * error occurred errorLine : line number when the error occurred\n * errorColumn : column number when the error occurred errorAfter : prefix\n * that was seen before this error occurred curchar : the offending\n * character Note: You can customize the lexical error message by modifying\n * this method.\n */\nprotected static String LexicalError(boolean EOFSeen, int lexState, int errorLine, int errorColumn, String errorAfter, char curChar) {\n    return (\"Lexical error at line \" + errorLine + \", column \" + errorColumn + \".  Encountered: \" + (EOFSeen ? \"<EOF> \" : (\"\\\"\" + addEscapes(String.valueOf(curChar)) + \"\\\"\") + \" (\" + (int) curChar + \"), \") + \"after : \\\"\" + addEscapes(errorAfter) + \"\\\"\");\n}"
            ],
            [
                "add_escapes",
                "org.graphstream.util.parser",
                "ParseException",
                "/**\n * Used to convert raw characters to their escaped version when these raw\n * version cannot be used as part of an ASCII string literal.\n */\nstatic String add_escapes(String str) {\n    StringBuffer retval = new StringBuffer();\n    char ch;\n    for (int i = 0; i < str.length(); i++) {\n        switch(str.charAt(i)) {\n            case 0:\n                continue;\n            case '\\b':\n                retval.append(\"\\\\b\");\n                continue;\n            case '\\t':\n                retval.append(\"\\\\t\");\n                continue;\n            case '\\n':\n                retval.append(\"\\\\n\");\n                continue;\n            case '\\f':\n                retval.append(\"\\\\f\");\n                continue;\n            case '\\r':\n                retval.append(\"\\\\r\");\n                continue;\n            case '\\\"':\n                retval.append(\"\\\\\\\"\");\n                continue;\n            case '\\'':\n                retval.append(\"\\\\\\'\");\n                continue;\n            case '\\\\':\n                retval.append(\"\\\\\\\\\");\n                continue;\n            default:\n                if ((ch = str.charAt(i)) < 0x20 || ch > 0x7e) {\n                    String s = \"0000\" + Integer.toString(ch, 16);\n                    retval.append(\"\\\\u\" + s.substring(s.length() - 4, s.length()));\n                } else {\n                    retval.append(ch);\n                }\n                continue;\n        }\n    }\n    return retval.toString();\n}"
            ],
            [
                "newToken",
                "org.graphstream.util.parser",
                "Token",
                "/**\n * Returns a new Token object, by default. However, if you want, you can\n * create and return subclass objects based on the value of ofKind. Simply\n * add the cases to the switch for all those special cases. For example, if\n * you have a subclass of Token called IDToken that you want to create if\n * ofKind is ID, simply add something like :\n *\n * case MyParserConstants.ID : return new IDToken(ofKind, image);\n *\n * to the following switch statement. Then you can cast matchedToken\n * variable to the appropriate type and use sit in your lexical actions.\n */\npublic static Token newToken(int ofKind, String image) {\n    switch(ofKind) {\n        default:\n            return new Token(ofKind, image);\n    }\n}"
            ],
            [
                "newToken",
                "org.graphstream.util.parser",
                "Token",
                "public static Token newToken(int ofKind) {\n    return newToken(ofKind, null);\n}"
            ],
            [
                "countStepInFile",
                "org.graphstream.util",
                "StepCounter",
                "/**\n * Count step contains in a file.\n *\n * @param path\n *            path to the file\n * @return count of step event in the file\n * @throws IOException\n * @see org.graphstream.stream.file.FileSourceFactory\n */\npublic static int countStepInFile(String path) throws IOException {\n    StepCounter counter = new StepCounter();\n    FileSource source = FileSourceFactory.sourceFor(path);\n    source.addElementSink(counter);\n    source.readAll(path);\n    return counter.getStepCount();\n}"
            ],
            [
                "GET",
                "org.graphstream.stream.net",
                "HTTPSource",
                "@SuppressWarnings(\"unchecked\")\nprotected static HashMap<String, Object> GET(HttpExchange ex) {\n    HashMap<String, Object> get = new HashMap<String, Object>();\n    String[] args = ex.getRequestURI().getRawQuery().split(\"[&]\");\n    for (String arg : args) {\n        String[] kv = arg.split(\"[=]\");\n        String k, v;\n        k = null;\n        v = null;\n        try {\n            if (kv.length > 0)\n                k = URLDecoder.decode(kv[0], System.getProperty(\"file.encoding\"));\n            if (kv.length > 1)\n                v = URLDecoder.decode(kv[1], System.getProperty(\"file.encoding\"));\n            if (get.containsKey(k)) {\n                Object o = get.get(k);\n                if (o instanceof LinkedList<?>)\n                    ((LinkedList<Object>) o).add(v);\n                else {\n                    LinkedList<Object> l = new LinkedList<Object>();\n                    l.add(o);\n                    l.add(v);\n                    get.put(k, l);\n                }\n            } else {\n                get.put(k, v);\n            }\n        } catch (UnsupportedEncodingException e) {\n            e.printStackTrace();\n        }\n    }\n    return get;\n}"
            ],
            [
                "sinkFor",
                "org.graphstream.stream.file",
                "FileSinkFactory",
                "/**\n * Looks at the file name given and its extension and propose a file output\n * for the format that match this extension.\n *\n * @param filename\n *            The file name where the graph will be written.\n * @return A file sink or null.\n */\npublic static FileSink sinkFor(String filename) {\n    if (filename.indexOf('.') > 0) {\n        String ext = filename.substring(filename.lastIndexOf('.') + 1);\n        ext = ext.toLowerCase();\n        if (ext2sink.containsKey(ext)) {\n            Class<? extends FileSink> fsink = ext2sink.get(ext);\n            try {\n                return fsink.newInstance();\n            } catch (InstantiationException e) {\n                e.printStackTrace();\n            } catch (IllegalAccessException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n    return null;\n}"
            ],
            [
                "formatId",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "protected static String formatId(String id) {\n    return \"node\" + id.replaceAll(\"\\\\W\", \"_\");\n}"
            ],
            [
                "getInt",
                "org.graphstream.stream.file.pajek",
                "PajekContext",
                "protected static int getInt(Token nb) throws ParseException {\n    try {\n        return Integer.parseInt(nb.image);\n    } catch (Exception e) {\n        throw new ParseException(String.format(\"%d:%d: %s not an integer\", nb.beginLine, nb.beginColumn, nb.image));\n    }\n}"
            ],
            [
                "getReal",
                "org.graphstream.stream.file.pajek",
                "PajekContext",
                "protected static double getReal(Token nb) throws ParseException {\n    try {\n        return Double.parseDouble(nb.image);\n    } catch (Exception e) {\n        throw new ParseException(String.format(\"%d:%d: %s not a real\", nb.beginLine, nb.beginColumn, nb.image));\n    }\n}"
            ],
            [
                "toColorValue",
                "org.graphstream.stream.file.pajek",
                "PajekContext",
                "public static String toColorValue(Token R, Token G, Token B) throws ParseException {\n    double r = getReal(R);\n    double g = getReal(G);\n    double b = getReal(B);\n    return String.format(\"rgb(%d, %d, %d)\", (int) (r * 255), (int) (g * 255), (int) (b * 255));\n}"
            ],
            [
                "sourceFor",
                "org.graphstream.stream.file",
                "FileSourceFactory",
                "/**\n * Create a file input for the given file name.\n *\n * <p>\n * This method first tests if the file is a regular file and is readable. If\n * so, it opens it and reads the magic cookie to test the known file formats\n * that can be inferred from their header. If it works, it returns a file\n * input for the format. Else it looks at the file name extension, and\n * returns a file input for the extension. Finally if all fail, it throws a\n * NotFoundException.\n * </p>\n *\n * <p>\n * Notice that this method only creates the file input and does not connect\n * it to a graph.\n * </p>\n *\n * @param fileName\n *            Name of the graph file.\n * @return A graph reader suitable for the fileName graph format.\n * @throws IOException\n *             If the file is not readable or accessible.\n */\npublic static FileSource sourceFor(String fileName) throws IOException {\n    File file = new File(fileName);\n    if (!file.isFile())\n        throw new IOException(\"not a regular file '\" + fileName + \"'\");\n    if (!file.canRead())\n        throw new IOException(\"not a readable file '\" + fileName + \"'\");\n    // Try to read the beginning of the file.\n    RandomAccessFile in = new RandomAccessFile(fileName, \"r\");\n    byte[] b = new byte[10];\n    int n = in.read(b, 0, 10);\n    // System.err.printf( \"[\" );\n    // for( int i=0; i<n; ++i )\n    // {\n    // System.err.printf( \"%c\", (char)b[i] );\n    // }\n    // System.err.printf( \"]%n\" );\n    in.close();\n    // Surely match a DGS file, as DGS files are well done and have a\n    // signature.\n    if (n >= 3 && b[0] == 'D' && b[1] == 'G' && b[2] == 'S') {\n        if (n >= 6 && b[3] == '0' && b[4] == '0') {\n            if (b[5] == '1' || b[5] == '2') {\n                return new FileSourceDGS1And2();\n            } else if (b[5] == '3' || b[5] == '4') {\n                return new FileSourceDGS();\n            }\n        }\n    }\n    // Maybe match a GML file as most GML files begin by the line \"graph [\",\n    // but not sure, you may create a GML file that starts by a comment, an\n    // empty line, with any kind of spaces, etc.\n    if (n >= 7 && b[0] == 'g' && b[1] == 'r' && b[2] == 'a' && b[3] == 'p' && b[4] == 'h' && b[5] == ' ' && b[6] == '[') {\n        return new org.graphstream.stream.file.FileSourceGML();\n    }\n    if (n >= 4 && b[0] == '(' && b[1] == 't' && b[2] == 'l' && b[3] == 'p')\n        return new FileSourceTLP();\n    // The web reader.\n    String flc = fileName.toLowerCase();\n    // If we did not found anything, we try with the filename extension ...\n    if (flc.endsWith(\".dgs\")) {\n        return new FileSourceDGS();\n    }\n    if (flc.endsWith(\".gml\") || flc.endsWith(\".dgml\")) {\n        return new org.graphstream.stream.file.FileSourceGML();\n    }\n    if (flc.endsWith(\".net\")) {\n        return new FileSourcePajek();\n    }\n    if (flc.endsWith(\".chaco\") || flc.endsWith(\".graph\")) {\n        // return new GraphReaderChaco();\n    }\n    if (flc.endsWith(\".dot\")) {\n        return new org.graphstream.stream.file.FileSourceDOT();\n    }\n    if (flc.endsWith(\".edge\")) {\n        return new FileSourceEdge();\n    }\n    if (flc.endsWith(\".lgl\")) {\n        return new FileSourceLGL();\n    }\n    if (flc.endsWith(\".ncol\")) {\n        return new FileSourceNCol();\n    }\n    if (flc.endsWith(\".tlp\")) {\n        return new FileSourceTLP();\n    }\n    if (flc.endsWith(\".xml\")) {\n        String root = getXMLRootElement(fileName);\n        if (root.equalsIgnoreCase(\"gexf\"))\n            return new FileSourceGEXF();\n        return new FileSourceGraphML();\n    }\n    if (flc.endsWith(\".gexf\")) {\n        return new FileSourceGEXF();\n    }\n    return null;\n}"
            ],
            [
                "getXMLRootElement",
                "org.graphstream.stream.file",
                "FileSourceFactory",
                "public static String getXMLRootElement(String fileName) throws IOException {\n    FileReader stream = new FileReader(fileName);\n    XMLEventReader reader;\n    XMLEvent e;\n    String root;\n    try {\n        reader = XMLInputFactory.newInstance().createXMLEventReader(stream);\n        do {\n            e = reader.nextEvent();\n        } while (!e.isStartElement() && !e.isEndDocument());\n        if (e.isEndDocument())\n            throw new IOException(\"document ended before catching root element\");\n        root = e.asStartElement().getName().getLocalPart();\n        reader.close();\n        stream.close();\n        return root;\n    } catch (XMLStreamException ex) {\n        throw new IOException(ex);\n    } catch (FactoryConfigurationError ex) {\n        throw new IOException(ex);\n    }\n}"
            ],
            [
                "formatStringForQuoting",
                "org.graphstream.stream.file",
                "FileSinkDGSUtility",
                "protected static String formatStringForQuoting(String str) {\n    return str.replaceAll(\"(^|[^\\\\\\\\])\\\"\", \"$1\\\\\\\\\\\"\");\n}"
            ],
            [
                "attributeString",
                "org.graphstream.stream.file",
                "FileSinkDGSUtility",
                "protected static String attributeString(String key, Object value, boolean remove) {\n    if (key == null || key.length() == 0)\n        return null;\n    if (remove) {\n        return String.format(\" -\\\"%s\\\"\", key);\n    } else {\n        if (value != null && value.getClass().isArray())\n            return String.format(\" \\\"%s\\\":%s\", key, arrayString(value));\n        else\n            return String.format(\" \\\"%s\\\":%s\", key, valueString(value));\n    }\n}"
            ],
            [
                "arrayString",
                "org.graphstream.stream.file",
                "FileSinkDGSUtility",
                "protected static String arrayString(Object value) {\n    if (value != null && value.getClass().isArray()) {\n        StringBuilder sb = new StringBuilder();\n        sb.append(\"{\");\n        if (Array.getLength(value) == 0)\n            sb.append(\"\\\"\\\"\");\n        else\n            sb.append(arrayString(Array.get(value, 0)));\n        for (int i = 1; i < Array.getLength(value); ++i) sb.append(String.format(\",%s\", arrayString(Array.get(value, i))));\n        sb.append(\"}\");\n        return sb.toString();\n    } else {\n        return valueString(value);\n    }\n}"
            ],
            [
                "valueString",
                "org.graphstream.stream.file",
                "FileSinkDGSUtility",
                "protected static String valueString(Object value) {\n    if (value == null)\n        return \"\\\"\\\"\";\n    if (value instanceof CharSequence) {\n        if (value instanceof String)\n            return String.format(\"\\\"%s\\\"\", formatStringForQuoting((String) value));\n        else\n            return String.format(\"\\\"%s\\\"\", (CharSequence) value);\n    } else if (value instanceof Number) {\n        Number nval = (Number) value;\n        if (value instanceof Integer || value instanceof Short || value instanceof Byte || value instanceof Long)\n            return String.format(Locale.US, \"%d\", nval.longValue());\n        else\n            return String.format(Locale.US, \"%f\", nval.doubleValue());\n    } else if (value instanceof Boolean) {\n        return String.format(Locale.US, \"%b\", ((Boolean) value));\n    } else if (value instanceof Character) {\n        return String.format(\"\\\"%c\\\"\", ((Character) value).charValue());\n    } else if (value instanceof Object[]) {\n        Object[] array = (Object[]) value;\n        int n = array.length;\n        StringBuffer sb = new StringBuffer();\n        if (array.length > 0)\n            sb.append(valueString(array[0]));\n        for (int i = 1; i < n; i++) {\n            sb.append(\",\");\n            sb.append(valueString(array[i]));\n        }\n        return sb.toString();\n    } else if (value instanceof HashMap<?, ?> || value instanceof CompoundAttribute) {\n        HashMap<?, ?> hash;\n        if (value instanceof CompoundAttribute)\n            hash = ((CompoundAttribute) value).toHashMap();\n        else\n            hash = (HashMap<?, ?>) value;\n        return hashToString(hash);\n    } else if (value instanceof Color) {\n        Color c = (Color) value;\n        return String.format(\"#%02X%02X%02X%02X\", c.getRed(), c.getGreen(), c.getBlue(), c.getAlpha());\n    } else {\n        return String.format(\"\\\"%s\\\"\", value.toString());\n    }\n}"
            ],
            [
                "hashToString",
                "org.graphstream.stream.file",
                "FileSinkDGSUtility",
                "protected static String hashToString(HashMap<?, ?> hash) {\n    StringBuilder sb = new StringBuilder();\n    sb.append(\"[ \");\n    for (Object key : hash.keySet()) {\n        sb.append(attributeString(key.toString(), hash.get(key), false));\n        sb.append(\",\");\n    }\n    sb.append(']');\n    return sb.toString();\n}"
            ],
            [
                "encodeObject",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Serializes an object and returns the Base64-encoded\n * version of that serialized object.\n *\n * <p>As of v 2.3, if the object\n * cannot be serialized or there is another error,\n * the method will throw an java.io.IOException. <b>This is new to v2.3!</b>\n * In earlier versions, it just returned a null value, but\n * in retrospect that's a pretty poor way to handle it.</p>\n *\n * The object is not GZip-compressed before being encoded.\n *\n * @param serializableObject The object to encode\n * @return The Base64-encoded object\n * @throws java.io.IOException if there is an error\n * @throws NullPointerException if serializedObject is null\n * @since 1.4\n */\npublic static String encodeObject(java.io.Serializable serializableObject) throws java.io.IOException {\n    return encodeObject(serializableObject, NO_OPTIONS);\n}"
            ],
            [
                "encodeObject",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end encodeObject\n/**\n * Serializes an object and returns the Base64-encoded\n * version of that serialized object.\n *\n * <p>As of v 2.3, if the object\n * cannot be serialized or there is another error,\n * the method will throw an java.io.IOException. <b>This is new to v2.3!</b>\n * In earlier versions, it just returned a null value, but\n * in retrospect that's a pretty poor way to handle it.</p>\n *\n * The object is not GZip-compressed before being encoded.\n * <p>\n * Example options:<pre>\n *   GZIP: gzip-compresses object before encoding it.\n *   DO_BREAK_LINES: break lines at 76 characters\n * </pre>\n * <p>\n * Example: <code>encodeObject( myObj, Base64.GZIP )</code> or\n * <p>\n * Example: <code>encodeObject( myObj, Base64.GZIP | Base64.DO_BREAK_LINES )</code>\n *\n * @param serializableObject The object to encode\n * @param options Specified options\n * @return The Base64-encoded object\n * @see Base64#GZIP\n * @see Base64#DO_BREAK_LINES\n * @throws java.io.IOException if there is an error\n * @since 2.0\n */\npublic static String encodeObject(java.io.Serializable serializableObject, int options) throws java.io.IOException {\n    if (serializableObject == null) {\n        throw new NullPointerException(\"Cannot serialize a null object.\");\n    }\n    // end if: null\n    // Streams\n    java.io.ByteArrayOutputStream baos = null;\n    java.io.OutputStream b64os = null;\n    java.util.zip.GZIPOutputStream gzos = null;\n    java.io.ObjectOutputStream oos = null;\n    try {\n        // ObjectOutputStream -> (GZIP) -> Base64 -> ByteArrayOutputStream\n        baos = new java.io.ByteArrayOutputStream();\n        b64os = new Base64.OutputStream(baos, ENCODE | options);\n        if ((options & GZIP) != 0) {\n            // Gzip\n            gzos = new java.util.zip.GZIPOutputStream(b64os);\n            oos = new java.io.ObjectOutputStream(gzos);\n        } else {\n            // Not gzipped\n            oos = new java.io.ObjectOutputStream(b64os);\n        }\n        oos.writeObject(serializableObject);\n    }// end try\n     catch (java.io.IOException e) {\n        // Catch it and then throw it immediately so that\n        // the finally{} block is called for cleanup.\n        throw e;\n    } finally // end catch\n    {\n        try {\n            oos.close();\n        } catch (Exception e) {\n        }\n        try {\n            gzos.close();\n        } catch (Exception e) {\n        }\n        try {\n            b64os.close();\n        } catch (Exception e) {\n        }\n        try {\n            baos.close();\n        } catch (Exception e) {\n        }\n    }\n    // end finally\n    // Return value according to relevant encoding.\n    try {\n        return new String(baos.toByteArray(), PREFERRED_ENCODING);\n    }// end try\n     catch (java.io.UnsupportedEncodingException uue) {\n        // Fall back to some Java default\n        return new String(baos.toByteArray());\n    }\n    // end catch\n}"
            ],
            [
                "encodeBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end encode\n/**\n * Encodes a byte array into Base64 notation.\n * Does not GZip-compress data.\n *\n * @param source The data to convert\n * @return The data in Base64-encoded form\n * @throws NullPointerException if source array is null\n * @since 1.4\n */\npublic static String encodeBytes(byte[] source) {\n    // Since we're not going to have the GZIP encoding turned on,\n    // we're not going to have an java.io.IOException thrown, so\n    // we should not force the user to have to catch it.\n    String encoded = null;\n    try {\n        encoded = encodeBytes(source, 0, source.length, NO_OPTIONS);\n    } catch (java.io.IOException ex) {\n        assert false : ex.getMessage();\n    }\n    // end catch\n    assert encoded != null;\n    return encoded;\n}"
            ],
            [
                "encodeBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end encodeBytes\n/**\n * Encodes a byte array into Base64 notation.\n * <p>\n * Example options:<pre>\n *   GZIP: gzip-compresses object before encoding it.\n *   DO_BREAK_LINES: break lines at 76 characters\n *     <i>Note: Technically, this makes your encoding non-compliant.</i>\n * </pre>\n * <p>\n * Example: <code>encodeBytes( myData, Base64.GZIP )</code> or\n * <p>\n * Example: <code>encodeBytes( myData, Base64.GZIP | Base64.DO_BREAK_LINES )</code>\n *\n * <p>As of v 2.3, if there is an error with the GZIP stream,\n * the method will throw an java.io.IOException. <b>This is new to v2.3!</b>\n * In earlier versions, it just returned a null value, but\n * in retrospect that's a pretty poor way to handle it.</p>\n *\n * @param source The data to convert\n * @param options Specified options\n * @return The Base64-encoded data as a String\n * @see Base64#GZIP\n * @see Base64#DO_BREAK_LINES\n * @throws java.io.IOException if there is an error\n * @throws NullPointerException if source array is null\n * @since 2.0\n */\npublic static String encodeBytes(byte[] source, int options) throws java.io.IOException {\n    return encodeBytes(source, 0, source.length, options);\n}"
            ],
            [
                "encodeBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end encodeBytes\n/**\n * Encodes a byte array into Base64 notation.\n * Does not GZip-compress data.\n *\n * <p>As of v 2.3, if there is an error,\n * the method will throw an java.io.IOException. <b>This is new to v2.3!</b>\n * In earlier versions, it just returned a null value, but\n * in retrospect that's a pretty poor way to handle it.</p>\n *\n * @param source The data to convert\n * @param off Offset in array where conversion should begin\n * @param len Length of data to convert\n * @return The Base64-encoded data as a String\n * @throws NullPointerException if source array is null\n * @throws IllegalArgumentException if source array, offset, or length are invalid\n * @since 1.4\n */\npublic static String encodeBytes(byte[] source, int off, int len) {\n    // Since we're not going to have the GZIP encoding turned on,\n    // we're not going to have an java.io.IOException thrown, so\n    // we should not force the user to have to catch it.\n    String encoded = null;\n    try {\n        encoded = encodeBytes(source, off, len, NO_OPTIONS);\n    } catch (java.io.IOException ex) {\n        assert false : ex.getMessage();\n    }\n    // end catch\n    assert encoded != null;\n    return encoded;\n}"
            ],
            [
                "encodeBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end encodeBytes\n/**\n * Encodes a byte array into Base64 notation.\n * <p>\n * Example options:<pre>\n *   GZIP: gzip-compresses object before encoding it.\n *   DO_BREAK_LINES: break lines at 76 characters\n *     <i>Note: Technically, this makes your encoding non-compliant.</i>\n * </pre>\n * <p>\n * Example: <code>encodeBytes( myData, Base64.GZIP )</code> or\n * <p>\n * Example: <code>encodeBytes( myData, Base64.GZIP | Base64.DO_BREAK_LINES )</code>\n *\n * <p>As of v 2.3, if there is an error with the GZIP stream,\n * the method will throw an java.io.IOException. <b>This is new to v2.3!</b>\n * In earlier versions, it just returned a null value, but\n * in retrospect that's a pretty poor way to handle it.</p>\n *\n * @param source The data to convert\n * @param off Offset in array where conversion should begin\n * @param len Length of data to convert\n * @param options Specified options\n * @return The Base64-encoded data as a String\n * @see Base64#GZIP\n * @see Base64#DO_BREAK_LINES\n * @throws java.io.IOException if there is an error\n * @throws NullPointerException if source array is null\n * @throws IllegalArgumentException if source array, offset, or length are invalid\n * @since 2.0\n */\npublic static String encodeBytes(byte[] source, int off, int len, int options) throws java.io.IOException {\n    byte[] encoded = encodeBytesToBytes(source, off, len, options);\n    // Return value according to relevant encoding.\n    try {\n        return new String(encoded, PREFERRED_ENCODING);\n    }// end try\n     catch (java.io.UnsupportedEncodingException uue) {\n        return new String(encoded);\n    }\n    // end catch\n}"
            ],
            [
                "encodeBytesToBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end encodeBytes\n/**\n * Similar to {@link #encodeBytes(byte[])} but returns\n * a byte array instead of instantiating a String. This is more efficient\n * if you're working with I/O streams and have large data sets to encode.\n *\n * @param source The data to convert\n * @return The Base64-encoded data as a byte[] (of ASCII characters)\n * @throws NullPointerException if source array is null\n * @since 2.3.1\n */\npublic static byte[] encodeBytesToBytes(byte[] source) {\n    byte[] encoded = null;\n    try {\n        encoded = encodeBytesToBytes(source, 0, source.length, Base64.NO_OPTIONS);\n    } catch (java.io.IOException ex) {\n        assert false : \"IOExceptions only come from GZipping, which is turned off: \" + ex.getMessage();\n    }\n    return encoded;\n}"
            ],
            [
                "encodeBytesToBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Similar to {@link #encodeBytes(byte[], int, int, int)} but returns\n * a byte array instead of instantiating a String. This is more efficient\n * if you're working with I/O streams and have large data sets to encode.\n *\n * @param source The data to convert\n * @param off Offset in array where conversion should begin\n * @param len Length of data to convert\n * @param options Specified options\n * @return The Base64-encoded data as a String\n * @see Base64#GZIP\n * @see Base64#DO_BREAK_LINES\n * @throws java.io.IOException if there is an error\n * @throws NullPointerException if source array is null\n * @throws IllegalArgumentException if source array, offset, or length are invalid\n * @since 2.3.1\n */\npublic static byte[] encodeBytesToBytes(byte[] source, int off, int len, int options) throws java.io.IOException {\n    if (source == null) {\n        throw new NullPointerException(\"Cannot serialize a null array.\");\n    }\n    // end if: null\n    if (off < 0) {\n        throw new IllegalArgumentException(\"Cannot have negative offset: \" + off);\n    }\n    // end if: off < 0\n    if (len < 0) {\n        throw new IllegalArgumentException(\"Cannot have length offset: \" + len);\n    }\n    // end if: len < 0\n    if (off + len > source.length) {\n        throw new IllegalArgumentException(String.format(\"Cannot have offset of %d and length of %d with array of length %d\", off, len, source.length));\n    }\n    // end if: off < 0\n    // Compress?\n    if ((options & GZIP) != 0) {\n        java.io.ByteArrayOutputStream baos = null;\n        java.util.zip.GZIPOutputStream gzos = null;\n        Base64.OutputStream b64os = null;\n        try {\n            // GZip -> Base64 -> ByteArray\n            baos = new java.io.ByteArrayOutputStream();\n            b64os = new Base64.OutputStream(baos, ENCODE | options);\n            gzos = new java.util.zip.GZIPOutputStream(b64os);\n            gzos.write(source, off, len);\n            gzos.close();\n        }// end try\n         catch (java.io.IOException e) {\n            // Catch it and then throw it immediately so that\n            // the finally{} block is called for cleanup.\n            throw e;\n        } finally // end catch\n        {\n            try {\n                gzos.close();\n            } catch (Exception e) {\n            }\n            try {\n                b64os.close();\n            } catch (Exception e) {\n            }\n            try {\n                baos.close();\n            } catch (Exception e) {\n            }\n        }\n        // end finally\n        return baos.toByteArray();\n    } else // end if: compress\n    // Else, don't compress. Better not to use streams at all then.\n    {\n        boolean breakLines = (options & DO_BREAK_LINES) != 0;\n        //int    len43   = len * 4 / 3;\n        //byte[] outBuff = new byte[   ( len43 )                      // Main 4:3\n        //                           + ( (len % 3) > 0 ? 4 : 0 )      // Account for padding\n        //                           + (breakLines ? ( len43 / MAX_LINE_LENGTH ) : 0) ]; // New lines\n        // Try to determine more precisely how big the array needs to be.\n        // If we get it right, we don't have to do an array copy, and\n        // we save a bunch of memory.\n        // Bytes needed for actual encoding\n        int encLen = (len / 3) * 4 + (len % 3 > 0 ? 4 : 0);\n        if (breakLines) {\n            // Plus extra newline characters\n            encLen += encLen / MAX_LINE_LENGTH;\n        }\n        byte[] outBuff = new byte[encLen];\n        int d = 0;\n        int e = 0;\n        int len2 = len - 2;\n        int lineLength = 0;\n        for (; d < len2; d += 3, e += 4) {\n            encode3to4(source, d + off, 3, outBuff, e, options);\n            lineLength += 4;\n            if (breakLines && lineLength >= MAX_LINE_LENGTH) {\n                outBuff[e + 4] = NEW_LINE;\n                e++;\n                lineLength = 0;\n            }\n            // end if: end of line\n        }\n        // en dfor: each piece of array\n        if (d < len) {\n            encode3to4(source, d + off, len - d, outBuff, e, options);\n            e += 4;\n        }\n        // end if: some padding needed\n        // Only resize array if we didn't guess it right.\n        if (e <= outBuff.length - 1) {\n            // If breaking lines and the last byte falls right at\n            // the line length (76 bytes per line), there will be\n            // one extra byte, and the array will need to be resized.\n            // Not too bad of an estimate on array size, I'd say.\n            byte[] finalOut = new byte[e];\n            System.arraycopy(outBuff, 0, finalOut, 0, e);\n            //System.err.println(\"Having to resize array from \" + outBuff.length + \" to \" + e );\n            return finalOut;\n        } else {\n            //System.err.println(\"No need to resize array.\");\n            return outBuff;\n        }\n    }\n    // end else: don't compress\n}"
            ],
            [
                "decode",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end decodeToBytes\n/**\n * Low-level access to decoding ASCII characters in\n * the form of a byte array. <strong>Ignores GUNZIP option, if\n * it's set.</strong> This is not generally a recommended method,\n * although it is used internally as part of the decoding process.\n * Special case: if len = 0, an empty array is returned. Still,\n * if you need more speed and reduced memory footprint (and aren't\n * gzipping), consider this method.\n *\n * @param source The Base64 encoded data\n * @return decoded data\n * @since 2.3.1\n */\npublic static byte[] decode(byte[] source) throws java.io.IOException {\n    byte[] decoded = null;\n    //        try {\n    decoded = decode(source, 0, source.length, Base64.NO_OPTIONS);\n    //        } catch( java.io.IOException ex ) {\n    //            assert false : \"IOExceptions only come from GZipping, which is turned off: \" + ex.getMessage();\n    //        }\n    return decoded;\n}"
            ],
            [
                "decode",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Low-level access to decoding ASCII characters in\n * the form of a byte array. <strong>Ignores GUNZIP option, if\n * it's set.</strong> This is not generally a recommended method,\n * although it is used internally as part of the decoding process.\n * Special case: if len = 0, an empty array is returned. Still,\n * if you need more speed and reduced memory footprint (and aren't\n * gzipping), consider this method.\n *\n * @param source The Base64 encoded data\n * @param off    The offset of where to begin decoding\n * @param len    The length of characters to decode\n * @param options Can specify options such as alphabet type to use\n * @return decoded data\n * @throws java.io.IOException If bogus characters exist in source data\n * @since 1.3\n */\npublic static byte[] decode(byte[] source, int off, int len, int options) throws java.io.IOException {\n    // Lots of error checking and exception throwing\n    if (source == null) {\n        throw new NullPointerException(\"Cannot decode null source array.\");\n    }\n    // end if\n    if (off < 0 || off + len > source.length) {\n        throw new IllegalArgumentException(String.format(\"Source array with length %d cannot have offset of %d and process %d bytes.\", source.length, off, len));\n    }\n    // end if\n    if (len == 0) {\n        return new byte[0];\n    } else if (len < 4) {\n        throw new IllegalArgumentException(\"Base64-encoded string must have at least four characters, but length specified was \" + len);\n    }\n    // end if\n    byte[] DECODABET = getDecodabet(options);\n    // Estimate on array size\n    int len34 = len * 3 / 4;\n    // Upper limit on size of output\n    byte[] outBuff = new byte[len34];\n    // Keep track of where we're writing\n    int outBuffPosn = 0;\n    // Four byte buffer from source, eliminating white space\n    byte[] b4 = new byte[4];\n    // Keep track of four byte input buffer\n    int b4Posn = 0;\n    // Source array counter\n    int i = 0;\n    // Special value from DECODABET\n    byte sbiDecode = 0;\n    for (i = off; i < off + len; i++) {\n        // Loop through source\n        sbiDecode = DECODABET[source[i] & 0xFF];\n        // White space, Equals sign, or legit Base64 character\n        // Note the values such as -5 and -9 in the\n        // DECODABETs at the top of the file.\n        if (sbiDecode >= WHITE_SPACE_ENC) {\n            if (sbiDecode >= EQUALS_SIGN_ENC) {\n                // Save non-whitespace\n                b4[b4Posn++] = source[i];\n                if (b4Posn > 3) {\n                    // Time to decode?\n                    outBuffPosn += decode4to3(b4, 0, outBuff, outBuffPosn, options);\n                    b4Posn = 0;\n                    // If that was the equals sign, break out of 'for' loop\n                    if (source[i] == EQUALS_SIGN) {\n                        break;\n                    }\n                    // end if: equals sign\n                }\n                // end if: quartet built\n            }\n            // end if: equals sign or better\n        } else // end if: white space, equals sign or better\n        {\n            // There's a bad input character in the Base64 stream.\n            throw new java.io.IOException(String.format(\"Bad Base64 input character decimal %d in array position %d\", ((int) source[i]) & 0xFF, i));\n        }\n        // end else:\n    }\n    // each input character\n    byte[] out = new byte[outBuffPosn];\n    System.arraycopy(outBuff, 0, out, 0, outBuffPosn);\n    return out;\n}"
            ],
            [
                "decode",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end decode\n/**\n * Decodes data from Base64 notation, automatically\n * detecting gzip-compressed data and decompressing it.\n *\n * @param s the string to decode\n * @return the decoded data\n * @throws java.io.IOException If there is a problem\n * @since 1.4\n */\npublic static byte[] decode(String s) throws java.io.IOException {\n    return decode(s, NO_OPTIONS);\n}"
            ],
            [
                "decode",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Decodes data from Base64 notation, automatically\n * detecting gzip-compressed data and decompressing it.\n *\n * @param s the string to decode\n * @param options encode options such as URL_SAFE\n * @return the decoded data\n * @throws java.io.IOException if there is an error\n * @throws NullPointerException if <tt>s</tt> is null\n * @since 1.4\n */\npublic static byte[] decode(String s, int options) throws java.io.IOException {\n    if (s == null) {\n        throw new NullPointerException(\"Input string was null.\");\n    }\n    // end if\n    byte[] bytes;\n    try {\n        bytes = s.getBytes(PREFERRED_ENCODING);\n    }// end try\n     catch (java.io.UnsupportedEncodingException uee) {\n        bytes = s.getBytes();\n    }\n    // end catch\n    //</change>\n    // Decode\n    bytes = decode(bytes, 0, bytes.length, options);\n    // Check to see if it's gzip-compressed\n    // GZIP Magic Two-Byte Number: 0x8b1f (35615)\n    boolean dontGunzip = (options & DONT_GUNZIP) != 0;\n    if ((bytes != null) && (bytes.length >= 4) && (!dontGunzip)) {\n        int head = ((int) bytes[0] & 0xff) | ((bytes[1] << 8) & 0xff00);\n        if (java.util.zip.GZIPInputStream.GZIP_MAGIC == head) {\n            java.io.ByteArrayInputStream bais = null;\n            java.util.zip.GZIPInputStream gzis = null;\n            java.io.ByteArrayOutputStream baos = null;\n            byte[] buffer = new byte[2048];\n            int length = 0;\n            try {\n                baos = new java.io.ByteArrayOutputStream();\n                bais = new java.io.ByteArrayInputStream(bytes);\n                gzis = new java.util.zip.GZIPInputStream(bais);\n                while ((length = gzis.read(buffer)) >= 0) {\n                    baos.write(buffer, 0, length);\n                }\n                // end while: reading input\n                // No error? Get new bytes.\n                bytes = baos.toByteArray();\n            }// end try\n             catch (java.io.IOException e) {\n                e.printStackTrace();\n                // Just return originally-decoded bytes\n            } finally // end catch\n            {\n                try {\n                    baos.close();\n                } catch (Exception e) {\n                }\n                try {\n                    gzis.close();\n                } catch (Exception e) {\n                }\n                try {\n                    bais.close();\n                } catch (Exception e) {\n                }\n            }\n            // end finally\n        }\n        // end if: gzipped\n    }\n    // end if: bytes.length >= 2\n    return bytes;\n}"
            ],
            [
                "decodeToObject",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end decode\n/**\n * Attempts to decode Base64 data and deserialize a Java\n * Object within. Returns <tt>null</tt> if there was an error.\n *\n * @param encodedObject The Base64 data to decode\n * @return The decoded and deserialized object\n * @throws NullPointerException if encodedObject is null\n * @throws java.io.IOException if there is a general error\n * @throws ClassNotFoundException if the decoded object is of a\n *         class that cannot be found by the JVM\n * @since 1.5\n */\npublic static Object decodeToObject(String encodedObject) throws java.io.IOException, java.lang.ClassNotFoundException {\n    return decodeToObject(encodedObject, NO_OPTIONS, null);\n}"
            ],
            [
                "decodeToObject",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Attempts to decode Base64 data and deserialize a Java\n * Object within. Returns <tt>null</tt> if there was an error.\n * If <tt>loader</tt> is not null, it will be the class loader\n * used when deserializing.\n *\n * @param encodedObject The Base64 data to decode\n * @param options Various parameters related to decoding\n * @param loader Optional class loader to use in deserializing classes.\n * @return The decoded and deserialized object\n * @throws NullPointerException if encodedObject is null\n * @throws java.io.IOException if there is a general error\n * @throws ClassNotFoundException if the decoded object is of a\n *         class that cannot be found by the JVM\n * @since 2.3.4\n */\npublic static Object decodeToObject(String encodedObject, int options, final ClassLoader loader) throws java.io.IOException, java.lang.ClassNotFoundException {\n    // Decode and gunzip if necessary\n    byte[] objBytes = decode(encodedObject, options);\n    java.io.ByteArrayInputStream bais = null;\n    java.io.ObjectInputStream ois = null;\n    Object obj = null;\n    try {\n        bais = new java.io.ByteArrayInputStream(objBytes);\n        // If no custom class loader is provided, use Java's builtin OIS.\n        if (loader == null) {\n            ois = new java.io.ObjectInputStream(bais);\n        } else // end if: no loader provided\n        // Else make a customized object input stream that uses\n        // the provided class loader.\n        {\n            ois = new java.io.ObjectInputStream(bais) {\n\n                @Override\n                public Class<?> resolveClass(java.io.ObjectStreamClass streamClass) throws java.io.IOException, ClassNotFoundException {\n                    Class<?> c = Class.forName(streamClass.getName(), false, loader);\n                    if (c == null) {\n                        return super.resolveClass(streamClass);\n                    } else {\n                        // Class loader knows of this class.\n                        return c;\n                    }\n                    // end else: not null\n                }\n            };\n            // end ois\n        }\n        // end else: no custom class loader\n        obj = ois.readObject();\n    }// end try\n     catch (java.io.IOException e) {\n        // Catch and throw in order to execute finally{}\n        throw e;\n    }// end catch\n     catch (java.lang.ClassNotFoundException e) {\n        // Catch and throw in order to execute finally{}\n        throw e;\n    } finally // end catch\n    {\n        try {\n            bais.close();\n        } catch (Exception e) {\n        }\n        try {\n            ois.close();\n        } catch (Exception e) {\n        }\n    }\n    // end finally\n    return obj;\n}"
            ],
            [
                "decodeFromFile",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end decodeToFile\n/**\n * Convenience method for reading a base64-encoded\n * file and decoding it.\n *\n * <p>As of v 2.3, if there is a error,\n * the method will throw an java.io.IOException. <b>This is new to v2.3!</b>\n * In earlier versions, it just returned false, but\n * in retrospect that's a pretty poor way to handle it.</p>\n *\n * @param filename Filename for reading encoded data\n * @return decoded byte array\n * @throws java.io.IOException if there is an error\n * @since 2.1\n */\npublic static byte[] decodeFromFile(String filename) throws java.io.IOException {\n    byte[] decodedData = null;\n    Base64.InputStream bis = null;\n    try {\n        // Set up some useful variables\n        java.io.File file = new java.io.File(filename);\n        byte[] buffer = null;\n        int length = 0;\n        int numBytes = 0;\n        // Check for size of file\n        if (file.length() > Integer.MAX_VALUE) {\n            throw new java.io.IOException(\"File is too big for this convenience method (\" + file.length() + \" bytes).\");\n        }\n        // end if: file too big for int index\n        buffer = new byte[(int) file.length()];\n        // Open a stream\n        bis = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(file)), Base64.DECODE);\n        // Read until done\n        while ((numBytes = bis.read(buffer, length, 4096)) >= 0) {\n            length += numBytes;\n        }\n        // end while\n        // Save in a variable to return\n        decodedData = new byte[length];\n        System.arraycopy(buffer, 0, decodedData, 0, length);\n    }// end try\n     catch (java.io.IOException e) {\n        // Catch and release to execute finally{}\n        throw e;\n    } finally // end catch: java.io.IOException\n    {\n        try {\n            bis.close();\n        } catch (Exception e) {\n        }\n    }\n    // end finally\n    return decodedData;\n}"
            ],
            [
                "encodeFromFile",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end decodeFromFile\n/**\n * Convenience method for reading a binary file\n * and base64-encoding it.\n *\n * <p>As of v 2.3, if there is a error,\n * the method will throw an java.io.IOException. <b>This is new to v2.3!</b>\n * In earlier versions, it just returned false, but\n * in retrospect that's a pretty poor way to handle it.</p>\n *\n * @param filename Filename for reading binary data\n * @return base64-encoded string\n * @throws java.io.IOException if there is an error\n * @since 2.1\n */\npublic static String encodeFromFile(String filename) throws java.io.IOException {\n    String encodedData = null;\n    Base64.InputStream bis = null;\n    try {\n        // Set up some useful variables\n        java.io.File file = new java.io.File(filename);\n        // Need max() for math on small files (v2.2.1); Need +1 for a few corner cases (v2.3.5)\n        byte[] buffer = new byte[Math.max((int) (file.length() * 1.4 + 1), 40)];\n        int length = 0;\n        int numBytes = 0;\n        // Open a stream\n        bis = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(file)), Base64.ENCODE);\n        // Read until done\n        while ((numBytes = bis.read(buffer, length, 4096)) >= 0) {\n            length += numBytes;\n        }\n        // end while\n        // Save in a variable to return\n        encodedData = new String(buffer, 0, length, Base64.PREFERRED_ENCODING);\n    }// end try\n     catch (java.io.IOException e) {\n        // Catch and release to execute finally{}\n        throw e;\n    } finally // end catch: java.io.IOException\n    {\n        try {\n            bis.close();\n        } catch (Exception e) {\n        }\n    }\n    // end finally\n    return encodedData;\n}"
            ],
            [
                "unmutableGraph",
                "org.graphstream.graph.implementations",
                "Graphs",
                "public static Graph unmutableGraph(Graph g) {\n    return null;\n}"
            ],
            [
                "synchronizedGraph",
                "org.graphstream.graph.implementations",
                "Graphs",
                "/**\n * Synchronizes a graph. The returned graph can be accessed and modified by\n * several threads. You lose genericity in methods returning edge or node\n * because each element (graph, nodes and edges) is wrapped into a\n * synchronized wrapper which breaks original elements class.\n *\n * @param g\n *            the graph to synchronize\n * @return a synchronized wrapper for g\n */\npublic static Graph synchronizedGraph(Graph g) {\n    return new SynchronizedGraph(g);\n}"
            ],
            [
                "merge",
                "org.graphstream.graph.implementations",
                "Graphs",
                "/**\n * Merge several graphs in one. A new graph is created, that will contain\n * the result. The method will try to create a graph of the same class that\n * the first graph to merge (it needs to have a constructor with a String).\n * Else, a MultiGraph is used.\n *\n * @param graphs\n *            graphs to merge\n * @return merge result\n */\npublic static Graph merge(Graph... graphs) {\n    if (graphs == null)\n        return new DefaultGraph(\"void-merge\");\n    String id = \"merge\";\n    for (Graph g : graphs) id += \"-\" + g.getId();\n    Graph result;\n    try {\n        Class<? extends Graph> cls = graphs[0].getClass();\n        result = cls.getConstructor(String.class).newInstance(id);\n    } catch (Exception e) {\n        logger.warning(String.format(\"Cannot create a graph of %s.\", graphs[0].getClass().getName()));\n        result = new MultiGraph(id);\n    }\n    mergeIn(result, graphs);\n    return result;\n}"
            ],
            [
                "clone",
                "org.graphstream.graph.implementations",
                "Graphs",
                "/**\n * Clone a given graph with same node/edge structure and same attributes.\n *\n * @param g\n *            the graph to clone\n * @return a copy of g\n */\npublic static Graph clone(Graph g) {\n    Graph copy;\n    try {\n        Class<? extends Graph> cls = g.getClass();\n        copy = cls.getConstructor(String.class).newInstance(g.getId());\n    } catch (Exception e) {\n        logger.warning(String.format(\"Cannot create a graph of %s.\", g.getClass().getName()));\n        copy = new AdjacencyListGraph(g.getId());\n    }\n    copyAttributes(g, copy);\n    for (int i = 0; i < g.getNodeCount(); i++) {\n        Node source = g.getNode(i);\n        Node target = copy.addNode(source.getId());\n        copyAttributes(source, target);\n    }\n    for (int i = 0; i < g.getEdgeCount(); i++) {\n        Edge source = g.getEdge(i);\n        Edge target = copy.addEdge(source.getId(), source.getSourceNode().getId(), source.getTargetNode().getId(), source.isDirected());\n        copyAttributes(source, target);\n    }\n    return copy;\n}"
            ]
        ],
        "tokensProjectClassesNonPrivateStaticAttributes": [
            [
                "version16",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static boolean version16 = false;"
            ],
            [
                "predefFractions",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[][] predefFractions = new float[11][];"
            ],
            [
                "predefFractions2",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions2 = { 0f, 1f };"
            ],
            [
                "predefFractions3",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions3 = { 0f, 0.5f, 1f };"
            ],
            [
                "predefFractions4",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions4 = { 0f, 0.33f, 0.66f, 1f };"
            ],
            [
                "predefFractions5",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions5 = { 0f, 0.25f, 0.5f, 0.75f, 1f };"
            ],
            [
                "predefFractions6",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions6 = { 0f, 0.2f, 0.4f, 0.6f, 0.8f, 1f };"
            ],
            [
                "predefFractions7",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions7 = { 0f, 0.1666f, 0.3333f, 0.4999f, 0.6666f, 0.8333f, 1f };"
            ],
            [
                "predefFractions8",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions8 = { 0f, 0.1428f, 0.2856f, 0.4284f, 0.5712f, 0.7140f, 0.8568f, 1f };"
            ],
            [
                "predefFractions9",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions9 = { 0f, 0.125f, 0.25f, 0.375f, 0.5f, 0.625f, .75f, 0.875f, 1f };"
            ],
            [
                "predefFractions10",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions10 = { 0f, 0.1111f, 0.2222f, 0.3333f, 0.4444f, 0.5555f, 0.6666f, 0.7777f, 0.8888f, 1f };"
            ],
            [
                "defaultImageCache",
                "org.graphstream.ui.swingViewer.util",
                "ImageCache",
                "/**\n * The default singleton image cache instance.\n */\nprotected static ImageCache defaultImageCache;"
            ],
            [
                "dots",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "protected static float[] dots = { 1f, 1f };"
            ],
            [
                "dashes",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "protected static float[] dashes = { 3f, 3f };"
            ],
            [
                "defaultFontCache",
                "org.graphstream.ui.swingViewer.util",
                "FontCache",
                "/**\n * The default font cache.\n */\npublic static FontCache defaultFontCache;"
            ],
            [
                "NULL_POINT2",
                "org.graphstream.ui.geom",
                "Point2",
                "// Attributes -- Shared\n/**\n * Specific point at (0,0).\n */\npublic static final Point2 NULL_POINT2 = new Point2(0, 0);"
            ],
            [
                "NULL_POINT3",
                "org.graphstream.ui.geom",
                "Point3",
                "// Attributes -- Shared\n/**\n * Specific point at (0,0,0).\n */\npublic static final Point3 NULL_POINT3 = new Point3(0, 0, 0);"
            ],
            [
                "DEFAULT_VIEW_ID",
                "org.graphstream.ui.view",
                "Viewer",
                "// Attributes\n/**\n * Name of the default view.\n */\npublic static String DEFAULT_VIEW_ID = \"defaultView\";"
            ],
            [
                "jjbitVec0",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };"
            ],
            [
                "jjnextStates",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "static final int[] jjnextStates = { 48, 49, 52, 54, 55, 65, 69, 2, 4, 6, 10, 16, 23, 33, 50, 52, 54, 55, 57, 58, 60, 61, 66, 68, 70, 71 };"
            ],
            [
                "jjstrLiteralImages",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "/**\n * Token literal values.\n */\npublic static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, \"\\56\", \"\\173\", \"\\175\", \"\\50\", \"\\51\", \"\\43\", \"\\72\", \"\\73\", \"\\54\", \"\\162\\147\\142\\141\", \"\\162\\147\\142\", null, null, null, \"\\165\\162\\154\", \"\\147\\162\\141\\160\\150\", \"\\145\\144\\147\\145\", \"\\156\\157\\144\\145\", \"\\163\\160\\162\\151\\164\\145\", \"\\146\\151\\154\\154\\55\\155\\157\\144\\145\", \"\\146\\151\\154\\154\\55\\143\\157\\154\\157\\162\", \"\\146\\151\\154\\154\\55\\151\\155\\141\\147\\145\", \"\\163\\164\\162\\157\\153\\145\\55\\155\\157\\144\\145\", \"\\163\\164\\162\\157\\153\\145\\55\\143\\157\\154\\157\\162\", \"\\163\\164\\162\\157\\153\\145\\55\\167\\151\\144\\164\\150\", \"\\163\\150\\141\\144\\157\\167\\55\\155\\157\\144\\145\", \"\\163\\150\\141\\144\\157\\167\\55\\143\\157\\154\\157\\162\", \"\\163\\150\\141\\144\\157\\167\\55\\167\\151\\144\\164\\150\", \"\\163\\150\\141\\144\\157\\167\\55\\157\\146\\146\\163\\145\\164\", \"\\164\\145\\170\\164\\55\\155\\157\\144\\145\", \"\\164\\145\\170\\164\\55\\143\\157\\154\\157\\162\", \"\\164\\145\\170\\164\\55\\163\\164\\171\\154\\145\", \"\\164\\145\\170\\164\\55\\146\\157\\156\\164\", \"\\164\\145\\170\\164\\55\\163\\151\\172\\145\", \"\\164\\145\\170\\164\\55\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\\55\\155\\157\\144\\145\", \"\\164\\145\\170\\164\\55\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\", \"\\164\\145\\170\\164\\55\\142\\141\\143\\153\\147\\162\\157\\165\\156\\144\\55\\155\\157\\144\\145\", \"\\164\\145\\170\\164\\55\\142\\141\\143\\153\\147\\162\\157\\165\\156\\144\\55\\143\\157\\154\\157\\162\", \"\\164\\145\\170\\164\\55\\157\\146\\146\\163\\145\\164\", \"\\164\\145\\170\\164\\55\\160\\141\\144\\144\\151\\156\\147\", \"\\151\\143\\157\\156\\55\\155\\157\\144\\145\", \"\\151\\143\\157\\156\", \"\\160\\141\\144\\144\\151\\156\\147\", \"\\172\\55\\151\\156\\144\\145\\170\", \"\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\\55\\155\\157\\144\\145\", \"\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\", \"\\163\\150\\141\\160\\145\", \"\\163\\151\\172\\145\", \"\\163\\151\\172\\145\\55\\155\\157\\144\\145\", \"\\163\\150\\141\\160\\145\\55\\160\\157\\151\\156\\164\\163\", \"\\164\\145\\170\\164\\55\\141\\154\\151\\147\\156\\155\\145\\156\\164\", \"\\152\\143\\157\\155\\160\\157\\156\\145\\156\\164\", \"\\141\\162\\162\\157\\167\\55\\151\\155\\141\\147\\145\", \"\\141\\162\\162\\157\\167\\55\\163\\151\\172\\145\", \"\\141\\162\\162\\157\\167\\55\\163\\150\\141\\160\\145\", \"\\163\\160\\162\\151\\164\\145\\55\\157\\162\\151\\145\\156\\164\\141\\164\\151\\157\\156\", \"\\143\\141\\156\\166\\141\\163\\55\\143\\157\\154\\157\\162\", \"\\160\\154\\141\\151\\156\", \"\\144\\171\\156\\55\\160\\154\\141\\151\\156\", \"\\144\\171\\156\\55\\163\\151\\172\\145\", \"\\144\\171\\156\\55\\151\\143\\157\\156\", \"\\144\\141\\163\\150\\145\\163\", \"\\144\\157\\164\\163\", \"\\144\\157\\165\\142\\154\\145\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\144\\151\\141\\147\\157\\156\\141\\154\\61\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\144\\151\\141\\147\\157\\156\\141\\154\\62\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\150\\157\\162\\151\\172\\157\\156\\164\\141\\154\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\162\\141\\144\\151\\141\\154\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\166\\145\\162\\164\\151\\143\\141\\154\", \"\\150\\151\\144\\144\\145\\156\", \"\\151\\155\\141\\147\\145\\55\\164\\151\\154\\145\\144\", \"\\151\\155\\141\\147\\145\\55\\163\\143\\141\\154\\145\\144\", \"\\151\\155\\141\\147\\145\\55\\163\\143\\141\\154\\145\\144\\55\\162\\141\\164\\151\\157\\55\\155\\141\\170\", \"\\151\\155\\141\\147\\145\\55\\163\\143\\141\\154\\145\\144\\55\\162\\141\\164\\151\\157\\55\\155\\151\\156\", \"\\156\\157\\156\\145\", \"\\156\\157\\162\\155\\141\\154\", \"\\164\\162\\165\\156\\143\\141\\164\\145\\144\", \"\\172\\157\\157\\155\\55\\162\\141\\156\\147\\145\", \"\\141\\164\\55\\172\\157\\157\\155\", \"\\165\\156\\144\\145\\162\\55\\172\\157\\157\\155\", \"\\157\\166\\145\\162\\55\\172\\157\\157\\155\", \"\\172\\157\\157\\155\\163\", \"\\146\\151\\164\", \"\\142\\157\\154\\144\", \"\\142\\157\\154\\144\\55\\151\\164\\141\\154\\151\\143\", \"\\151\\164\\141\\154\\151\\143\", \"\\141\\154\\157\\156\\147\", \"\\141\\164\\55\\154\\145\\146\\164\", \"\\141\\164\\55\\162\\151\\147\\150\\164\", \"\\143\\145\\156\\164\\145\\162\", \"\\154\\145\\146\\164\", \"\\162\\151\\147\\150\\164\", \"\\165\\156\\144\\145\\162\", \"\\141\\142\\157\\166\\145\", \"\\152\\165\\163\\164\\151\\146\\171\", \"\\143\\151\\162\\143\\154\\145\", \"\\164\\162\\151\\141\\156\\147\\154\\145\", \"\\146\\162\\145\\145\\160\\154\\141\\156\\145\", \"\\164\\145\\170\\164\\55\\142\\157\\170\", \"\\164\\145\\170\\164\\55\\162\\157\\165\\156\\144\\145\\144\\55\\142\\157\\170\", \"\\164\\145\\170\\164\\55\\143\\151\\162\\143\\154\\145\", \"\\164\\145\\170\\164\\55\\144\\151\\141\\155\\157\\156\\144\", \"\\164\\145\\170\\164\\55\\160\\141\\162\\141\\147\\162\\141\\160\\150\", \"\\142\\157\\170\", \"\\162\\157\\165\\156\\144\\145\\144\\55\\142\\157\\170\", \"\\143\\162\\157\\163\\163\", \"\\144\\151\\141\\155\\157\\156\\144\", \"\\160\\157\\154\\171\\147\\157\\156\", \"\\142\\165\\164\\164\\157\\156\", \"\\164\\145\\170\\164\\55\\146\\151\\145\\154\\144\", \"\\160\\141\\156\\145\\154\", \"\\154\\151\\156\\145\", \"\\160\\157\\154\\171\\154\\151\\156\\145\", \"\\160\\157\\154\\171\\154\\151\\156\\145\\55\\163\\143\\141\\154\\145\\144\", \"\\141\\156\\147\\154\\145\", \"\\143\\165\\142\\151\\143\\55\\143\\165\\162\\166\\145\", \"\\142\\154\\157\\142\", \"\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\114\\55\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\150\\157\\162\\151\\172\\157\\156\\164\\141\\154\\55\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\166\\145\\162\\164\\151\\143\\141\\154\\55\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\141\\162\\162\\157\\167\", \"\\146\\154\\157\\167\", \"\\160\\151\\145\\55\\143\\150\\141\\162\\164\", \"\\151\\155\\141\\147\\145\", \"\\151\\155\\141\\147\\145\\163\", \"\\146\\162\\157\\155\", \"\\156\\157\\144\\145\\60\", \"\\164\\157\", \"\\156\\157\\144\\145\\61\", \"\\160\\162\\157\\152\\145\\143\\164\\151\\157\\156\", \"\\143\\154\\151\\143\\153\\145\\144\", \"\\163\\145\\154\\145\\143\\164\\145\\144\", null, null };"
            ],
            [
                "lexStateNames",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "/**\n * Lexer state names.\n */\npublic static final String[] lexStateNames = { \"DEFAULT\" };"
            ],
            [
                "jjtoToken",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "static final long[] jjtoToken = { 0xfffffffffffffe01L, 0xffffffffffffffffL, 0xffffL };"
            ],
            [
                "jjtoSkip",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "static final long[] jjtoSkip = { 0x1eL, 0x0L, 0x0L };"
            ],
            [
                "colorMap",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "// Static\n/**\n * A set of colour names mapped to real AWT Colour objects.\n */\nprotected static HashMap<String, Color> colorMap;"
            ],
            [
                "sharpColor1",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Pattern to ensure a \"#FFFFFF\" colour is recognised.\n */\nprotected static Pattern sharpColor1, sharpColor2;"
            ],
            [
                "sharpColor2",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Pattern to ensure a \"#FFFFFF\" colour is recognised.\n */\nprotected static Pattern sharpColor1, sharpColor2;"
            ],
            [
                "cssColor",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Pattern to ensure a CSS style \"rgb(1,2,3)\" colour is recognised.\n */\nprotected static Pattern cssColor;"
            ],
            [
                "cssColorA",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Pattern to ensure a CSS style \"rgba(1,2,3,4)\" colour is recognised.\n */\nprotected static Pattern cssColorA;"
            ],
            [
                "awtColor",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Pattern to ensure that java.awt.Color.toString() strings are recognised\n * as colour.\n */\nprotected static Pattern awtColor;"
            ],
            [
                "hexaColor",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Pattern to ensure an hexadecimal number is a recognised colour.\n */\nprotected static Pattern hexaColor;"
            ],
            [
                "numberUnit",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Pattern to ensure a string is a Value in various units.\n */\nprotected static Pattern numberUnit, number;"
            ],
            [
                "number",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Pattern to ensure a string is a Value in various units.\n */\nprotected static Pattern numberUnit, number;"
            ],
            [
                "acceptedAttribute",
                "org.graphstream.ui.graphicGraph",
                "GraphicElement",
                "// Overriding of standard attribute changing to filter them.\nprotected static Pattern acceptedAttribute;"
            ],
            [
                "DEFAULT_AN_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_AN_FORMAT = \"%prefix%[%sourceId%:%timeId%] add node \\\"%nodeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_CNA_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CNA_FORMAT = \"%prefix%[%sourceId%:%timeId%] set node \\\"%nodeId%\\\" +\\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CNC_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CNC_FORMAT = \"%prefix%[%sourceId%:%timeId%] set node \\\"%nodeId%\\\" \\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CNR_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CNR_FORMAT = \"%prefix%[%sourceId%:%timeId%] set node \\\"%nodeId%\\\" -\\\"%attributeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_DN_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_DN_FORMAT = \"%prefix%[%sourceId%:%timeId%] remove node \\\"%nodeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_AE_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_AE_FORMAT = \"%prefix%[%sourceId%:%timeId%] add edge \\\"%edgeId%\\\" : \\\"%source%\\\" -- \\\"%target%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_CEA_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CEA_FORMAT = \"%prefix%[%sourceId%:%timeId%] set edge \\\"%edgeId%\\\" +\\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CEC_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CEC_FORMAT = \"%prefix%[%sourceId%:%timeId%] set edge \\\"%edgeId%\\\" \\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CER_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CER_FORMAT = \"%prefix%[%sourceId%:%timeId%] set edge \\\"%edgeId%\\\" -\\\"%attributeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_DE_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_DE_FORMAT = \"%prefix%[%sourceId%:%timeId%] remove edge \\\"%edgeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_CGA_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CGA_FORMAT = \"%prefix%[%sourceId%:%timeId%] set +\\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CGC_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CGC_FORMAT = \"%prefix%[%sourceId%:%timeId%] set \\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CGR_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CGR_FORMAT = \"%prefix%[%sourceId%:%timeId%] set -\\\"%attributeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_CL_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CL_FORMAT = \"%prefix%[%sourceId%:%timeId%] clear%suffix%\";"
            ],
            [
                "DEFAULT_ST_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_ST_FORMAT = \"%prefix%[%sourceId%:%timeId%] step %step% begins%suffix%\";"
            ],
            [
                "GLOBAL_ENV",
                "org.graphstream.util",
                "Environment",
                "// --------- Static attributes ---------\n/**\n * Global environment for the whole JVM. This global environment is\n * available <b>and editable</b> from everywhere. It is create as soon as\n * the {@link #getGlobalEnvironment()} static method is called if this field\n * was not yet initialized by any other mean.\n * @see #getGlobalEnvironment()\n */\npublic static Environment GLOBAL_ENV;"
            ],
            [
                "LEXICAL_ERROR",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "/*\n\t * Ordinals for various reasons why an Error of this type can be thrown.\n\t */\n/**\n * Lexical error occurred.\n */\npublic static final int LEXICAL_ERROR = 0;"
            ],
            [
                "STATIC_LEXER_ERROR",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "/**\n * An attempt was made to create a second instance of a static token\n * manager.\n */\npublic static final int STATIC_LEXER_ERROR = 1;"
            ],
            [
                "INVALID_LEXICAL_STATE",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "/**\n * Tried to change to an invalid lexical state.\n */\npublic static final int INVALID_LEXICAL_STATE = 2;"
            ],
            [
                "LOOP_DETECTED",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "/**\n * Detected (and bailed out of) an infinite loop in the token manager.\n */\npublic static final int LOOP_DETECTED = 3;"
            ],
            [
                "staticFlag",
                "org.graphstream.util.parser",
                "SimpleCharStream",
                "/**\n * Whether parser is static.\n */\npublic static final boolean staticFlag = false;"
            ],
            [
                "ABBREVIATED_WEEKDAY_NAME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent ABBREVIATED_WEEKDAY_NAME = new NotImplementedComponent(\"%a\", \"\\\\w+[.]\");"
            ],
            [
                "FULL_WEEKDAY_NAME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent FULL_WEEKDAY_NAME = new NotImplementedComponent(\"%A\", \"\\\\w+\");"
            ],
            [
                "ABBREVIATED_MONTH_NAME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent ABBREVIATED_MONTH_NAME = new NotImplementedComponent(\"%b\", \"\\\\w+[.]\");"
            ],
            [
                "FULL_MONTH_NAME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent FULL_MONTH_NAME = new NotImplementedComponent(\"%B\", \"\\\\w+\");"
            ],
            [
                "LOCALE_DATE_AND_TIME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent LOCALE_DATE_AND_TIME = new NotImplementedComponent(\"%c\", null);"
            ],
            [
                "CENTURY",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent CENTURY = new NotImplementedComponent(\"%C\", \"\\\\d\\\\d\");"
            ],
            [
                "DAY_OF_MONTH_2_DIGITS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DAY_OF_MONTH_2_DIGITS = new FieldComponent(\"%d\", \"[012]\\\\d|3[01]\", Calendar.DAY_OF_MONTH, \"%02d\");"
            ],
            [
                "DATE",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DATE = new AliasComponent(\"%D\", \"%m/%d/%y\");"
            ],
            [
                "DAY_OF_MONTH",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DAY_OF_MONTH = new FieldComponent(\"%e\", \"\\\\d|[12]\\\\d|3[01]\", Calendar.DAY_OF_MONTH, \"%2d\");"
            ],
            [
                "DATE_ISO8601",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DATE_ISO8601 = new AliasComponent(\"%F\", \"%Y-%m-%d\");"
            ],
            [
                "WEEK_BASED_YEAR_2_DIGITS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent WEEK_BASED_YEAR_2_DIGITS = new FieldComponent(\"%g\", \"\\\\d\\\\d\", Calendar.YEAR, \"%02d\");"
            ],
            [
                "WEEK_BASED_YEAR_4_DIGITS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent WEEK_BASED_YEAR_4_DIGITS = new FieldComponent(\"%G\", \"\\\\d{4}\", Calendar.YEAR, \"%04d\");"
            ],
            [
                "ABBREVIATED_MONTH_NAME_ALIAS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent ABBREVIATED_MONTH_NAME_ALIAS = new AliasComponent(\"%h\", \"%b\");"
            ],
            [
                "HOUR_OF_DAY",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent HOUR_OF_DAY = new FieldComponent(\"%H\", \"[01]\\\\d|2[0123]\", Calendar.HOUR_OF_DAY, \"%02d\");"
            ],
            [
                "HOUR",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent HOUR = new FieldComponent(\"%I\", \"0\\\\d|1[012]\", Calendar.HOUR, \"%02d\");"
            ],
            [
                "DAY_OF_YEAR",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DAY_OF_YEAR = new FieldComponent(\"%j\", \"[012]\\\\d\\\\d|3[0-5]\\\\d|36[0-6]\", Calendar.DAY_OF_YEAR, \"%03d\");"
            ],
            [
                "MILLISECOND",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent MILLISECOND = new FieldComponent(\"%k\", \"\\\\d{3}\", Calendar.MILLISECOND, \"%03d\");"
            ],
            [
                "EPOCH",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent EPOCH = new EpochComponent();"
            ],
            [
                "MONTH",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent MONTH = new FieldComponent(\"%m\", \"0[1-9]|1[012]\", Calendar.MONTH, -1, \"%02d\");"
            ],
            [
                "MINUTE",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent MINUTE = new FieldComponent(\"%M\", \"[0-5]\\\\d\", Calendar.MINUTE, \"%02d\");"
            ],
            [
                "NEW_LINE",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent NEW_LINE = new AliasComponent(\"%n\", \"\\n\");"
            ],
            [
                "AM_PM",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent AM_PM = new AMPMComponent();"
            ],
            [
                "LOCALE_CLOCK_TIME_12_HOUR",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent LOCALE_CLOCK_TIME_12_HOUR = new NotImplementedComponent(\"%r\", \"\");"
            ],
            [
                "HOUR_AND_MINUTE",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent HOUR_AND_MINUTE = new AliasComponent(\"%R\", \"%H:%M\");"
            ],
            [
                "SECOND",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent SECOND = new FieldComponent(\"%S\", \"[0-5]\\\\d|60\", Calendar.SECOND, \"%02d\");"
            ],
            [
                "TABULATION",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent TABULATION = new AliasComponent(\"%t\", \"\\t\");"
            ],
            [
                "TIME_ISO8601",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent TIME_ISO8601 = new AliasComponent(\"%T\", \"%H:%M:%S\");"
            ],
            [
                "DAY_OF_WEEK_1_7",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DAY_OF_WEEK_1_7 = new FieldComponent(\"%u\", \"[1-7]\", Calendar.DAY_OF_WEEK, -1, \"%1d\");"
            ],
            [
                "WEEK_OF_YEAR_FROM_SUNDAY",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent WEEK_OF_YEAR_FROM_SUNDAY = new FieldComponent(\"%U\", \"[0-4]\\\\d|5[0123]\", Calendar.WEEK_OF_YEAR, 1, \"%2d\");"
            ],
            [
                "WEEK_NUMBER_ISO8601",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent WEEK_NUMBER_ISO8601 = new NotImplementedComponent(\"%V\", \"0[1-9]|[2-4]\\\\d|5[0123]\");"
            ],
            [
                "DAY_OF_WEEK_0_6",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DAY_OF_WEEK_0_6 = new FieldComponent(\"%w\", \"[0-6]\", Calendar.DAY_OF_WEEK, \"%01d\");"
            ],
            [
                "WEEK_OF_YEAR_FROM_MONDAY",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent WEEK_OF_YEAR_FROM_MONDAY = new FieldComponent(\"%W\", \"[0-4]\\\\d|5[0123]\", Calendar.WEEK_OF_YEAR, \"%02d\");"
            ],
            [
                "LOCALE_DATE_REPRESENTATION",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent LOCALE_DATE_REPRESENTATION = new NotImplementedComponent(\"%x\", \"\");"
            ],
            [
                "LOCALE_TIME_REPRESENTATION",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent LOCALE_TIME_REPRESENTATION = new NotImplementedComponent(\"%X\", \"\");"
            ],
            [
                "YEAR_2_DIGITS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent YEAR_2_DIGITS = new FieldComponent(\"%y\", \"\\\\d\\\\d\", Calendar.YEAR, \"%02d\");"
            ],
            [
                "YEAR_4_DIGITS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent YEAR_4_DIGITS = new FieldComponent(\"%Y\", \"\\\\d{4}\", Calendar.YEAR, \"%04d\");"
            ],
            [
                "UTC_OFFSET",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent UTC_OFFSET = new UTCOffsetComponent();"
            ],
            [
                "LOCALE_TIME_ZONE_NAME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent LOCALE_TIME_ZONE_NAME = new NotImplementedComponent(\"%Z\", \"\\\\w*\");"
            ],
            [
                "PERCENT",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent PERCENT = new AliasComponent(\"%%\", \"%\");"
            ],
            [
                "jjbitVec0",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };"
            ],
            [
                "jjnextStates",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "static final int[] jjnextStates = { 5, 6, 8, 9, 13, 14 };"
            ],
            [
                "jjstrLiteralImages",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "/**\n * Token literal values.\n */\npublic static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, \"\\133\", \"\\135\", null, null, null, null, null, null };"
            ],
            [
                "lexStateNames",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "/**\n * Lexer state names.\n */\npublic static final String[] lexStateNames = { \"DEFAULT\" };"
            ],
            [
                "jjtoToken",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "static final long[] jjtoToken = { 0xff01L };"
            ],
            [
                "jjtoSkip",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "static final long[] jjtoSkip = { 0x1eL };"
            ],
            [
                "jjbitVec0",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };"
            ],
            [
                "jjnextStates",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "static final int[] jjnextStates = { 54, 11, 12, 15, 17, 18, 1, 2, 5, 47, 52, 8, 9, 20, 21 };"
            ],
            [
                "jjstrLiteralImages",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "/**\n * Token literal values.\n */\npublic static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, null, \"\\50\", \"\\51\", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null };"
            ],
            [
                "lexStateNames",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "/**\n * Lexer state names.\n */\npublic static final String[] lexStateNames = { \"DEFAULT\" };"
            ],
            [
                "jjtoToken",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "static final long[] jjtoToken = { 0xffffc01L };"
            ],
            [
                "jjtoSkip",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "static final long[] jjtoSkip = { 0x7eL };"
            ],
            [
                "XYZ_ATTR",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "/**\n * Node attribute storing coordinates.\n */\npublic static final String XYZ_ATTR = \"xyz\";"
            ],
            [
                "WIDTH_ATTR",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "/**\n * Graph attribute storing width of the TikZ picture.\n */\npublic static final String WIDTH_ATTR = \"ui.tikz.width\";"
            ],
            [
                "HEIGHT_ATTR",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "/**\n * Graph attribute storing height of the TikZ picture.\n */\npublic static final String HEIGHT_ATTR = \"ui.tikz.height\";"
            ],
            [
                "DEFAULT_WIDTH",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "public static final double DEFAULT_WIDTH = 10;"
            ],
            [
                "DEFAULT_HEIGHT",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "public static final double DEFAULT_HEIGHT = 10;"
            ],
            [
                "DISPLAY_MIN_SIZE_IN_MM",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "/**\n * Define the default minimum size of nodes when using a dynamic size. This\n * size is in millimeter.\n */\npublic static final double DISPLAY_MIN_SIZE_IN_MM = 2;"
            ],
            [
                "DISPLAY_MAX_SIZE_IN_MM",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "/**\n * Define the default maximum size of nodes when using a dynamic size. This\n * size is in millimeter.\n */\npublic static final double DISPLAY_MAX_SIZE_IN_MM = 10;"
            ],
            [
                "jjbitVec0",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };"
            ],
            [
                "jjnextStates",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "static final int[] jjnextStates = { 21, 27, 8, 10, 11, 18, 19, 22, 23, 26, 1, 2, 13, 14 };"
            ],
            [
                "jjstrLiteralImages",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "/**\n * Token literal values.\n */\npublic static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, null, \"\\133\", \"\\135\", \"\\173\", \"\\175\", \"\\72\", \"\\54\", \"\\75\", null, null, null, null, null, null, null, null, null, null, \"\\73\", null, null, null, null, null, null, null, null, null, \"\\137\" };"
            ],
            [
                "lexStateNames",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "/**\n * Lexer state names.\n */\npublic static final String[] lexStateNames = { \"DEFAULT\" };"
            ],
            [
                "jjtoToken",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "static final long[] jjtoToken = { 0x3ffffffc01L };"
            ],
            [
                "jjtoSkip",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "static final long[] jjtoSkip = { 0x7eL };"
            ],
            [
                "jjbitVec0",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };"
            ],
            [
                "jjnextStates",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "static final int[] jjnextStates = { 21, 22, 23, 17, 19, 2, 3, 5, 6, 8, 9 };"
            ],
            [
                "jjstrLiteralImages",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "/**\n * Token literal values.\n */\npublic static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null };"
            ],
            [
                "lexStateNames",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "/**\n * Lexer state names.\n */\npublic static final String[] lexStateNames = { \"DEFAULT\" };"
            ],
            [
                "jjtoToken",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "static final long[] jjtoToken = { 0x3fffffffffffc9L };"
            ],
            [
                "jjtoSkip",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "static final long[] jjtoSkip = { 0x6L };"
            ],
            [
                "XMLNS",
                "org.graphstream.stream.file.gexf",
                "GEXF",
                "public static final String XMLNS = \"http://www.gexf.net/1.2draft\";"
            ],
            [
                "XMLNS_XSI",
                "org.graphstream.stream.file.gexf",
                "GEXF",
                "public static final String XMLNS_XSI = \"http://www.w3.org/2001/XMLSchema-instance\";"
            ],
            [
                "XMLNS_SL",
                "org.graphstream.stream.file.gexf",
                "GEXF",
                "public static final String XMLNS_SL = \"http://www.gexf.net/1.2draft http://www.gexf.net/1.2draft/gexf.xsd\";"
            ],
            [
                "XMLNS_VIZ",
                "org.graphstream.stream.file.gexf",
                "GEXF",
                "public static final String XMLNS_VIZ = \"http://www.gexf.net/1.2draft/viz\";"
            ],
            [
                "VERSION",
                "org.graphstream.stream.file.gexf",
                "GEXF",
                "public static final String VERSION = \"1.2\";"
            ],
            [
                "BUFFER_SIZE",
                "org.graphstream.stream.file.dgs",
                "DGSParser",
                "protected static final int BUFFER_SIZE = 4096;"
            ],
            [
                "ARRAY_OPEN",
                "org.graphstream.stream.file.dgs",
                "DGSParser",
                "public static final int ARRAY_OPEN = '{';"
            ],
            [
                "ARRAY_CLOSE",
                "org.graphstream.stream.file.dgs",
                "DGSParser",
                "public static final int ARRAY_CLOSE = '}';"
            ],
            [
                "MAP_OPEN",
                "org.graphstream.stream.file.dgs",
                "DGSParser",
                "public static final int MAP_OPEN = '[';"
            ],
            [
                "MAP_CLOSE",
                "org.graphstream.stream.file.dgs",
                "DGSParser",
                "public static final int MAP_CLOSE = ']';"
            ],
            [
                "gradientId",
                "org.graphstream.stream.file",
                "FileSinkSVG2",
                "static int gradientId = 0;"
            ],
            [
                "gradientId",
                "org.graphstream.stream.file",
                "SVGStyle",
                "static int gradientId = 0;"
            ],
            [
                "TIME_PREFIX",
                "org.graphstream.stream",
                "Timeline",
                "public static final String TIME_PREFIX = \"time\";"
            ],
            [
                "SYNC_DISABLE_KEY",
                "org.graphstream.stream.sync",
                "SinkTime",
                "/**\n * Key used to disable synchro. Just run : java -DSYNC_DISABLE_KEY ...\n */\npublic static final String SYNC_DISABLE_KEY = \"org.graphstream.stream.sync.disable\";"
            ],
            [
                "disableSync",
                "org.graphstream.stream.sync",
                "SinkTime",
                "/**\n * Flag used to disable sync.\n */\nprotected static final boolean disableSync;"
            ],
            [
                "LIGHT_YELLOW",
                "org.graphstream.stream.netstream",
                "NetStreamReceiver",
                "protected static final String LIGHT_YELLOW = \"\u001b[33;1m\";"
            ],
            [
                "RESET",
                "org.graphstream.stream.netstream",
                "NetStreamReceiver",
                "protected static final String RESET = \"\u001b[0m\";"
            ],
            [
                "BUFFER_INITIAL_SIZE",
                "org.graphstream.stream.netstream",
                "NetStreamReceiver",
                "// Attributes\n// 65535, 4096\nprotected static final int BUFFER_INITIAL_SIZE = 8192;"
            ],
            [
                "BUFFER_INITIAL_SIZE",
                "org.graphstream.stream.netstream",
                "IncomingBuffer",
                "// Attributes\n// 65535, 4096\nprotected static final int BUFFER_INITIAL_SIZE = 8192;"
            ],
            [
                "EVENT_GETVERSION",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by an 32-bit signed integer for this protocol version. Certainly\n * useless.\n */\npublic static int EVENT_GETVERSION = 0x00;"
            ],
            [
                "EVENT_START",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Not used.\n */\npublic static int EVENT_START = 0x01;"
            ],
            [
                "EVENT_END",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Constant indicating that the client has disconnected.\n */\npublic static int EVENT_END = 0x02;"
            ],
            [
                "EVENT_ADD_NODE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "//\n// ----------------------------------\n// GraphStream's graph events\n// ----------------------------------\n//\n/**\n * Followed by a node id (TYPE_STRING format)\n */\npublic static int EVENT_ADD_NODE = 0x10;"
            ],
            [
                "EVENT_DEL_NODE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by a node id (TYPE_STRING format)\n */\npublic static int EVENT_DEL_NODE = 0x11;"
            ],
            [
                "EVENT_ADD_EDGE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - an edge id (TYPE_STRING format), - an source node id\n * (TYPE_STRING format), - a target node id (TYPE_STRING format - a boolean\n * indicating if directed (TYPE_BOOLEAN format)\n */\npublic static int EVENT_ADD_EDGE = 0x12;"
            ],
            [
                "EVENT_DEL_EDGE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by an edge id (TYPE_STRING format)\n */\npublic static int EVENT_DEL_EDGE = 0x13;"
            ],
            [
                "EVENT_STEP",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by double (TYPE_DOUBLE format)\n */\npublic static int EVENT_STEP = 0x14;"
            ],
            [
                "EVENT_CLEARED",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n */\npublic static int EVENT_CLEARED = 0x15;"
            ],
            [
                "EVENT_ADD_GRAPH_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - an attribute id (TYPE_STRING format) - the attribute TYPE -\n * the attribute value\n */\npublic static int EVENT_ADD_GRAPH_ATTR = 0x16;"
            ],
            [
                "EVENT_CHG_GRAPH_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - an attribute id (TYPE_STRING format) - the attribute TYPE -\n * the attribute old value - the attribute new value\n */\npublic static int EVENT_CHG_GRAPH_ATTR = 0x17;"
            ],
            [
                "EVENT_DEL_GRAPH_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - the attribute id (TYPE_STRING format)\n */\npublic static int EVENT_DEL_GRAPH_ATTR = 0x18;"
            ],
            [
                "EVENT_ADD_NODE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - an attribute id (TYPE_STRING format) - the attribute TYPE -\n * the attribute value\n */\npublic static int EVENT_ADD_NODE_ATTR = 0x19;"
            ],
            [
                "EVENT_CHG_NODE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - an attribute id (TYPE_STRING format) - the attribute TYPE -\n * the attribute old value - the attribute new value\n */\npublic static int EVENT_CHG_NODE_ATTR = 0x1a;"
            ],
            [
                "EVENT_DEL_NODE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - the node id (TYPE_STRING format) - the attribute id\n * (TYPE_STRING format)\n */\npublic static int EVENT_DEL_NODE_ATTR = 0x1b;"
            ],
            [
                "EVENT_ADD_EDGE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - an attribute id (TYPE_STRING format) - the attribute TYPE -\n * the attribute value\n */\npublic static int EVENT_ADD_EDGE_ATTR = 0x1c;"
            ],
            [
                "EVENT_CHG_EDGE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - an attribute id (TYPE_STRING format) - the attribute TYPE -\n * the attribute old value - the attribute new value\n */\npublic static int EVENT_CHG_EDGE_ATTR = 0x1d;"
            ],
            [
                "EVENT_DEL_EDGE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - the edge id (TYPE_STRING format) - the attribute id\n * (TYPE_STRING format)\n */\npublic static int EVENT_DEL_EDGE_ATTR = 0x1e;"
            ],
            [
                "TYPE_UNKNOWN",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "// Values types\npublic static int TYPE_UNKNOWN = 0x00;"
            ],
            [
                "TYPE_BOOLEAN",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by a byte who's value is 0 or 1\n */\npublic static int TYPE_BOOLEAN = 0x50;"
            ],
            [
                "TYPE_BOOLEAN_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * An array of booleans. Followed by first, a 16-bits integer for the number\n * of booleans and then, a list of bytes who's value is 0 or 1\n */\npublic static int TYPE_BOOLEAN_ARRAY = 0x51;"
            ],
            [
                "TYPE_BYTE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by a signed byte [-127,127]\n */\npublic static int TYPE_BYTE = 0x52;"
            ],
            [
                "TYPE_BYTE_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * An array of bytes. Followed by first, a 16-bits integer for the number of\n * integers and then, a list of signed bytes.\n */\npublic static int TYPE_BYTE_ARRAY = 0x53;"
            ],
            [
                "TYPE_SHORT",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by an 16-bit signed integer (a short)\n */\npublic static int TYPE_SHORT = 0x54;"
            ],
            [
                "TYPE_SHORT_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * An array of shorts. Followed by first, a 16-bits integer for the number\n * of integers and then, a list of 16-bit signed shorts\n */\npublic static int TYPE_SHORT_ARRAY = 0x55;"
            ],
            [
                "TYPE_INT",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by an 32-bit signed integer\n */\npublic static int TYPE_INT = 0x56;"
            ],
            [
                "TYPE_INT_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * An array of integers. Followed by first, a 16-bits integer for the number\n * of integers and then, a list of 32-bit signed integers\n */\npublic static int TYPE_INT_ARRAY = 0x57;"
            ],
            [
                "TYPE_LONG",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by an 64-bit signed integer\n */\npublic static int TYPE_LONG = 0x58;"
            ],
            [
                "TYPE_LONG_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * An array of longs. Followed by first, a 16-bits integer for the number of\n * longs and then, a list of 62-bit signed integers\n */\npublic static int TYPE_LONG_ARRAY = 0x59;"
            ],
            [
                "TYPE_FLOAT",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by a single precision 32-bits floating point number\n */\npublic static int TYPE_FLOAT = 0x5a;"
            ],
            [
                "TYPE_FLOAT_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Array of double. Followed by first, a 16-bits integer for the number of\n * floats and then, a list of 32-bit floats\n */\npublic static int TYPE_FLOAT_ARRAY = 0x5b;"
            ],
            [
                "TYPE_DOUBLE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by a double precision 64-bits floating point number\n */\npublic static int TYPE_DOUBLE = 0x5c;"
            ],
            [
                "TYPE_DOUBLE_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Array of double. Followed by first, a 16-bits integer for the number of\n * doubles and then, a list of 64-bit doubles\n */\npublic static int TYPE_DOUBLE_ARRAY = 0x5d;"
            ],
            [
                "TYPE_STRING",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Array of characters. Followed by first, a 16-bits integer for the size in\n * bytes (not in number of characters) of the string, then by the unicode\n * string\n */\npublic static int TYPE_STRING = 0x5e;"
            ],
            [
                "TYPE_RAW",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Raw data, good for serialization. Followed by first, a 16-bits integer\n * indicating the length in bytes of the dataset, and then the data itself.\n */\npublic static int TYPE_RAW = 0x5f;"
            ],
            [
                "TYPE_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * An type-unspecified array. Followed by first, a 16-bits integer\n * indicating the number of elements, and then, the elements themselves. The\n * elements themselves have to give their type.\n */\npublic static byte TYPE_ARRAY = 0x60;"
            ],
            [
                "TYPE_NULL",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_NULL = 0x61;"
            ],
            [
                "COMMAND",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n *  Constant that indicates that this message is a COMMAND, not and EVENT.\n *\n *  For now it is followed by a string that has to be parssed at the application level.\n *\n *  THIS IS EXPERIMENTAL AND MAY (WILL) CHANGE !\n */\npublic static int COMMAND = 0x70;"
            ],
            [
                "NO_OPTIONS",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/* ********  P U B L I C   F I E L D S  ******** */\n/**\n * No options specified. Value is zero.\n */\npublic final static int NO_OPTIONS = 0;"
            ],
            [
                "ENCODE",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Specify encoding in first bit. Value is one.\n */\npublic final static int ENCODE = 1;"
            ],
            [
                "DECODE",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Specify decoding in first bit. Value is zero.\n */\npublic final static int DECODE = 0;"
            ],
            [
                "GZIP",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Specify that data should be gzip-compressed in second bit. Value is two.\n */\npublic final static int GZIP = 2;"
            ],
            [
                "DONT_GUNZIP",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Specify that gzipped data should <em>not</em> be automatically gunzipped.\n */\npublic final static int DONT_GUNZIP = 4;"
            ],
            [
                "DO_BREAK_LINES",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Do break lines when encoding. Value is 8.\n */\npublic final static int DO_BREAK_LINES = 8;"
            ],
            [
                "URL_SAFE",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Encode using Base64-like encoding that is URL- and Filename-safe as described\n * in Section 4 of RFC3548:\n * <a href=\"http://www.faqs.org/rfcs/rfc3548.html\">http://www.faqs.org/rfcs/rfc3548.html</a>.\n * It is important to note that data encoded this way is <em>not</em> officially valid Base64,\n * or at the very least should not be called Base64 without also specifying that is\n * was encoded using the URL- and Filename-safe dialect.\n */\npublic final static int URL_SAFE = 16;"
            ],
            [
                "ORDERED",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Encode using the special \"ordered\" dialect of Base64 described here:\n * <a href=\"http://www.faqs.org/qa/rfcc-1940.html\">http://www.faqs.org/qa/rfcc-1940.html</a>.\n */\npublic final static int ORDERED = 32;"
            ],
            [
                "INITIAL_EDGE_CAPACITY",
                "org.graphstream.graph.implementations",
                "AdjacencyListNode",
                "protected static final int INITIAL_EDGE_CAPACITY;"
            ],
            [
                "GROWTH_FACTOR",
                "org.graphstream.graph.implementations",
                "AdjacencyListNode",
                "protected static final double GROWTH_FACTOR = 1.1;"
            ],
            [
                "I_EDGE",
                "org.graphstream.graph.implementations",
                "AdjacencyListNode",
                "protected static final char I_EDGE = 0;"
            ],
            [
                "IO_EDGE",
                "org.graphstream.graph.implementations",
                "AdjacencyListNode",
                "protected static final char IO_EDGE = 1;"
            ],
            [
                "O_EDGE",
                "org.graphstream.graph.implementations",
                "AdjacencyListNode",
                "protected static final char O_EDGE = 2;"
            ],
            [
                "GROW_FACTOR",
                "org.graphstream.graph.implementations",
                "AdjacencyListGraph",
                "public static final double GROW_FACTOR = 1.1;"
            ],
            [
                "DEFAULT_NODE_CAPACITY",
                "org.graphstream.graph.implementations",
                "AdjacencyListGraph",
                "public static final int DEFAULT_NODE_CAPACITY = 128;"
            ],
            [
                "DEFAULT_EDGE_CAPACITY",
                "org.graphstream.graph.implementations",
                "AdjacencyListGraph",
                "public static final int DEFAULT_EDGE_CAPACITY = 1024;"
            ]
        ],
        "tokensMethodJavadocValues": [
            [
                "1",
                "int"
            ],
            [
                "1",
                "int"
            ],
            [
                "2",
                "int"
            ],
            [
                "2",
                "int"
            ],
            [
                "1",
                "int"
            ],
            [
                "1",
                "int"
            ],
            [
                "2",
                "int"
            ],
            [
                "2",
                "int"
            ]
        ],
        "tokensMethodArguments": [
            [
                "x1",
                "",
                "double"
            ],
            [
                "y1",
                "",
                "double"
            ],
            [
                "x2",
                "",
                "double"
            ],
            [
                "y2",
                "",
                "double"
            ]
        ],
        "tokensMethodVariablesNonPrivateNonStaticNonVoidMethods": [
            [
                "getId",
                "org.graphstream.ui.view",
                "View",
                "/**\n * Get the unique view id.\n *\n * @return a view id\n */\nString getId();"
            ],
            [
                "findNodeOrSpriteAt",
                "org.graphstream.ui.view",
                "View",
                "/**\n * Search for the first node or sprite (in that order) that contains the\n * point at coordinates (x, y).\n *\n * @param x The point abscissa.\n * @param y The point ordinate.\n * @return The first node or sprite at the given coordinates or null if\n * nothing found.\n */\nGraphicElement findNodeOrSpriteAt(double x, double y);"
            ],
            [
                "allNodesOrSpritesIn",
                "org.graphstream.ui.view",
                "View",
                "/**\n * Search for all the nodes and sprites contained inside the rectangle\n * (x1,y1)-(x2,y2).\n *\n * @param x1 The rectangle lowest point abscissa.\n * @param y1 The rectangle lowest point ordinate.\n * @param x2 The rectangle highest point abscissa.\n * @param y2 The rectangle highest point ordinate.\n * @return The set of sprites and nodes in the given rectangle.\n */\nCollection<GraphicElement> allNodesOrSpritesIn(double x1, double y1, double x2, double y2);"
            ],
            [
                "getCamera",
                "org.graphstream.ui.view",
                "View",
                "/**\n * Get a camera object to provide control commands on the view.\n *\n * @return a Camera instance\n */\nCamera getCamera();"
            ],
            [
                "contains",
                "java.util",
                "Collection",
                "public abstract boolean contains(Object arg0)"
            ],
            [
                "equals",
                "java.util",
                "Collection",
                "public abstract boolean equals(Object arg0)"
            ],
            [
                "isEmpty",
                "java.util",
                "Collection",
                "public abstract boolean isEmpty()"
            ],
            [
                "iterator",
                "java.util",
                "Collection",
                "public abstract Iterator<E> iterator()"
            ],
            [
                "addAll",
                "java.util",
                "Collection",
                "public abstract boolean addAll(Collection<? extends E> arg0)"
            ],
            [
                "removeIf",
                "java.util",
                "Collection",
                "public default boolean removeIf(Predicate<? super E> arg0)"
            ],
            [
                "stream",
                "java.util",
                "Collection",
                "public default Stream<E> stream()"
            ],
            [
                "parallelStream",
                "java.util",
                "Collection",
                "public default Stream<E> parallelStream()"
            ],
            [
                "toArray",
                "java.util",
                "Collection",
                "public abstract <T> T[] toArray(T[] arg0)"
            ],
            [
                "spliterator",
                "java.util",
                "Collection",
                "public default Spliterator<E> spliterator()"
            ],
            [
                "hashCode",
                "java.util",
                "Collection",
                "public abstract int hashCode()"
            ],
            [
                "removeAll",
                "java.util",
                "Collection",
                "public abstract boolean removeAll(Collection<? extends Object> arg0)"
            ],
            [
                "size",
                "java.util",
                "Collection",
                "public abstract int size()"
            ],
            [
                "toArray",
                "java.util",
                "Collection",
                "public abstract Object[] toArray()"
            ],
            [
                "retainAll",
                "java.util",
                "Collection",
                "public abstract boolean retainAll(Collection<? extends Object> arg0)"
            ],
            [
                "containsAll",
                "java.util",
                "Collection",
                "public abstract boolean containsAll(Collection<? extends Object> arg0)"
            ],
            [
                "add",
                "java.util",
                "Collection",
                "public abstract boolean add(E arg0)"
            ],
            [
                "remove",
                "java.util",
                "Collection",
                "public abstract boolean remove(Object arg0)"
            ],
            [
                "toArray",
                "java.util",
                "Collection",
                "public default <T> T[] toArray(IntFunction<T[]> arg0)"
            ],
            [
                "iterator",
                "java.lang",
                "Iterable",
                "public abstract Iterator<T> iterator()"
            ],
            [
                "spliterator",
                "java.lang",
                "Iterable",
                "public default Spliterator<T> spliterator()"
            ],
            [
                "toString",
                "java.lang",
                "Object",
                "public String toString()"
            ],
            [
                "clone",
                "java.lang",
                "Object",
                "protected native Object clone() throws CloneNotSupportedException"
            ],
            [
                "getClass",
                "java.lang",
                "Object",
                "public final native Class<? extends Object> getClass()"
            ],
            [
                "equals",
                "java.lang",
                "Object",
                "public boolean equals(Object arg0)"
            ],
            [
                "hashCode",
                "java.lang",
                "Object",
                "public native int hashCode()"
            ]
        ],
        "tokensMethodVariablesNonPrivateNonStaticAttributes": [],
        "tokensOracleVariablesNonPrivateNonStaticNonVoidMethods": [],
        "tokensOracleVariablesNonPrivateNonStaticAttributes": []
    },
    {
        "id": 2970,
        "oracle": ";",
        "oracleType": "PRE",
        "projectName": "gs-core-1.3",
        "packageName": "org.graphstream.ui.view",
        "className": "View",
        "javadocTag": "@param x The requested position abscissa in pixels.",
        "methodJavadoc": "    /**\n     * Force an element to move at the given location in pixels.\n     *\n     * @param element The element.\n     * @param x       The requested position abscissa in pixels.\n     * @param y       The requested position ordinate in pixels.\n     */",
        "methodSourceCode": "void moveElementAtPx(GraphicElement element, double x, double y);",
        "classJavadoc": "/**\n * A view on a graphic graph.\n */",
        "classSourceCode": "/*\n * Copyright 2006 - 2015\n *     Stefan Balev     <stefan.balev@graphstream-project.org>\n *     Julien Baudry    <julien.baudry@graphstream-project.org>\n *     Antoine Dutot    <antoine.dutot@graphstream-project.org>\n *     Yoann Pign\u00e9      <yoann.pigne@graphstream-project.org>\n *     Guilhelm Savin   <guilhelm.savin@graphstream-project.org>\n * \n * This file is part of GraphStream <http://graphstream-project.org>.\n * \n * GraphStream is a library whose purpose is to handle static or dynamic\n * graph, create them from scratch, file or any source and display them.\n * \n * This program is free software distributed under the terms of two licenses, the\n * CeCILL-C license that fits European law, and the GNU Lesser General Public\n * License. You can  use, modify and/ or redistribute the software under the terms\n * of the CeCILL-C license as circulated by CEA, CNRS and INRIA at the following\n * URL <http://www.cecill.info> or under the terms of the GNU LGPL as published by\n * the Free Software Foundation, either version 3 of the License, or (at your\n * option) any later version.\n * \n * This program is distributed in the hope that it will be useful, but WITHOUT ANY\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A\n * PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more details.\n * \n * You should have received a copy of the GNU Lesser General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n * \n * The fact that you are presently reading this means that you have had\n * knowledge of the CeCILL-C and LGPL licenses and that you accept their terms.\n */\npackage org.graphstream.ui.view;\n\nimport org.graphstream.ui.graphicGraph.GraphicElement;\nimport org.graphstream.ui.graphicGraph.GraphicGraph;\nimport org.graphstream.ui.view.util.MouseManager;\nimport org.graphstream.ui.view.util.ShortcutManager;\n\nimport java.awt.event.KeyListener;\nimport java.awt.event.MouseListener;\nimport java.awt.event.MouseMotionListener;\nimport java.util.Collection;\n\n/**\n * A view on a graphic graph.\n */\npublic interface View\n{\n    /**\n     * Get the unique view id.\n     *\n     * @return a view id\n     */\n    String getId();\n\n    /**\n     * Get a camera object to provide control commands on the view.\n     *\n     * @return a Camera instance\n     */\n    Camera getCamera();\n\n    /**\n     * Search for the first node or sprite (in that order) that contains the\n     * point at coordinates (x, y).\n     *\n     * @param x The point abscissa.\n     * @param y The point ordinate.\n     * @return The first node or sprite at the given coordinates or null if\n     * nothing found.\n     */\n    GraphicElement findNodeOrSpriteAt(double x, double y);\n\n    /**\n     * Search for all the nodes and sprites contained inside the rectangle\n     * (x1,y1)-(x2,y2).\n     *\n     * @param x1 The rectangle lowest point abscissa.\n     * @param y1 The rectangle lowest point ordinate.\n     * @param x2 The rectangle highest point abscissa.\n     * @param y2 The rectangle highest point ordinate.\n     * @return The set of sprites and nodes in the given rectangle.\n     */\n    Collection<GraphicElement> allNodesOrSpritesIn(double x1, double y1, double x2, double y2);\n\n    /**\n     * Redisplay or update the view contents. Called by the Viewer.\n     *\n     * @param graph        The graphic graph to represent.\n     * @param graphChanged True if the graph changed since the last call to this method.\n     */\n    void display(GraphicGraph graph, boolean graphChanged);\n\n    /**\n     * Close definitively this view. Called by the Viewer.\n     *\n     * @param graph The graphic graph.\n     */\n    void close(GraphicGraph graph);\n\n\n    /**\n     * Called by the mouse manager to specify where a node and sprite selection\n     * started.\n     *\n     * @param x1 The selection start abscissa.\n     * @param y1 The selection start ordinate.\n     */\n    void beginSelectionAt(double x1, double y1);\n\n    /**\n     * The selection already started grows toward position (x, y).\n     *\n     * @param x The new end selection abscissa.\n     * @param y The new end selection ordinate.\n     */\n    void selectionGrowsAt(double x, double y);\n\n    /**\n     * Called by the mouse manager to specify where a node and spite selection\n     * stopped.\n     *\n     * @param x2 The selection stop abscissa.\n     * @param y2 The selection stop ordinate.\n     */\n    void endSelectionAt(double x2, double y2);\n\n    /**\n     * Freeze an element so that the optional layout cannot move it.\n     *\n     * @param element The element.\n     * @param frozen  If true the element cannot be moved automatically.\n     */\n    void freezeElement(GraphicElement element, boolean frozen);\n\n    /**\n     * Force an element to move at the given location in pixels.\n     *\n     * @param element The element.\n     * @param x       The requested position abscissa in pixels.\n     * @param y       The requested position ordinate in pixels.\n     */\n    void moveElementAtPx(GraphicElement element, double x, double y);\n\n    /**\n     * Change the manager for mouse events on this view. If the value for the new manager is\n     * null, a default manager is installed. The {@link org.graphstream.ui.view.util.MouseManager#init(org.graphstream.ui.graphicGraph.GraphicGraph, View)}\n     * method must not yet have been called.\n     *\n     * @param manager The new manager, or null to set the default manager.\n     * @see org.graphstream.ui.view.util.MouseManager\n     */\n    void setMouseManager(MouseManager manager);\n\n    /**\n     * Change the manager for key and shortcuts events on this view. If the value for the new\n     * manager is null, a default manager is installed. The {@link org.graphstream.ui.view.util.ShortcutManager#init(org.graphstream.ui.graphicGraph.GraphicGraph, View)}\n     * method must not yet have been called.\n     *\n     * @param manager The new manager, or null to set the default manager\n     * @see org.graphstream.ui.view.util.ShortcutManager\n     */\n    void setShortcutManager(ShortcutManager manager);\n\n    /**\n     * Request ui focus.\n     */\n    void requestFocus();\n\n    /**\n     * Add key ui listener.\n     *\n     * @param l the listener\n     */\n    void addKeyListener(KeyListener l);\n\n    /**\n     * Remove key ui listener.\n     *\n     * @param l the listener\n     */\n    void removeKeyListener(KeyListener l);\n\n    /**\n     * Add mouse ui listener.\n     *\n     * @param l the listener\n     */\n    void addMouseListener(MouseListener l);\n\n    /**\n     * Remove mouse ui listener.\n     *\n     * @param l the listener\n     */\n    void removeMouseListener(MouseListener l);\n\n    /**\n     * Add mouse motion ui listener.\n     *\n     * @param l the listener\n     */\n    void addMouseMotionListener(MouseMotionListener l);\n\n    /**\n     * Remove mouse motion ui listener.\n     *\n     * @param l the listener\n     */\n    void removeMouseMotionListener(MouseMotionListener l);\n}\n",
        "tokensGeneralGrammar": [
            "null",
            "true",
            "false",
            ",",
            ".",
            ":",
            ";",
            "?",
            "(",
            ")",
            "jdVar",
            "stream",
            "Arrays",
            "allMatch",
            "noneMatch",
            "anyMatch",
            "~",
            ">>",
            "<<",
            ">>>",
            "|",
            "&",
            "^",
            "+",
            "-",
            "/",
            "*",
            "%",
            "&&",
            "||",
            ">=",
            "<=",
            ">",
            "<",
            "==",
            "!=",
            "instanceof",
            "class",
            "methodResultID",
            "this"
        ],
        "tokensGeneralValuesGlobalDictionary": [
            [
                "0",
                "int"
            ],
            [
                "1",
                "int"
            ],
            [
                "-1",
                "int"
            ],
            [
                "0.0",
                "double"
            ],
            [
                "1.0",
                "double"
            ],
            [
                "-1.0",
                "double"
            ],
            [
                "\"\"",
                "String"
            ],
            [
                "\" \"",
                "String"
            ]
        ],
        "tokensProjectClasses": [
            [
                "DefaultCamera",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "GradientFactory",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "GraphMetrics",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "Graphics2DOutput",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "ImageCache",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "StrokeFactory",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "FontCache",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "FontSlot",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "DefaultView",
                "org.graphstream.ui.swingViewer"
            ],
            [
                "SpriteRenderer",
                "org.graphstream.ui.swingViewer.basicRenderer"
            ],
            [
                "ElementRenderer",
                "org.graphstream.ui.swingViewer.basicRenderer"
            ],
            [
                "NodeRenderer",
                "org.graphstream.ui.swingViewer.basicRenderer"
            ],
            [
                "Arrow",
                "org.graphstream.ui.swingViewer.basicRenderer.shapes"
            ],
            [
                "Shape",
                "org.graphstream.ui.swingViewer.basicRenderer.shapes"
            ],
            [
                "EdgeRenderer",
                "org.graphstream.ui.swingViewer.basicRenderer"
            ],
            [
                "SwingBasicGraphRenderer",
                "org.graphstream.ui.swingViewer.basicRenderer"
            ],
            [
                "GraphRendererBase",
                "org.graphstream.ui.swingViewer"
            ],
            [
                "GraphRenderer",
                "org.graphstream.ui.swingViewer"
            ],
            [
                "LayerRenderer",
                "org.graphstream.ui.swingViewer"
            ],
            [
                "ViewPanel",
                "org.graphstream.ui.swingViewer"
            ],
            [
                "Layouts",
                "org.graphstream.ui.layout"
            ],
            [
                "Layout",
                "org.graphstream.ui.layout"
            ],
            [
                "LayoutRunner",
                "org.graphstream.ui.layout"
            ],
            [
                "NodeParticle",
                "org.graphstream.ui.layout.springbox"
            ],
            [
                "GraphCellData",
                "org.graphstream.ui.layout.springbox"
            ],
            [
                "EdgeSpring",
                "org.graphstream.ui.layout.springbox"
            ],
            [
                "Energies",
                "org.graphstream.ui.layout.springbox"
            ],
            [
                "BarnesHutLayout",
                "org.graphstream.ui.layout.springbox"
            ],
            [
                "LinLog",
                "org.graphstream.ui.layout.springbox.implementations"
            ],
            [
                "LinLogNodeParticle",
                "org.graphstream.ui.layout.springbox.implementations"
            ],
            [
                "SpringBoxNodeParticle",
                "org.graphstream.ui.layout.springbox.implementations"
            ],
            [
                "SpringBox",
                "org.graphstream.ui.layout.springbox.implementations"
            ],
            [
                "Point2",
                "org.graphstream.ui.geom"
            ],
            [
                "Vector2",
                "org.graphstream.ui.geom"
            ],
            [
                "Vector3",
                "org.graphstream.ui.geom"
            ],
            [
                "Point3",
                "org.graphstream.ui.geom"
            ],
            [
                "ViewerListener",
                "org.graphstream.ui.view"
            ],
            [
                "MouseManager",
                "org.graphstream.ui.view.util"
            ],
            [
                "ShortcutManager",
                "org.graphstream.ui.view.util"
            ],
            [
                "DefaultShortcutManager",
                "org.graphstream.ui.view.util"
            ],
            [
                "FpsCounter",
                "org.graphstream.ui.view.util"
            ],
            [
                "CubicCurve",
                "org.graphstream.ui.view.util"
            ],
            [
                "DefaultMouseManager",
                "org.graphstream.ui.view.util"
            ],
            [
                "Selection",
                "org.graphstream.ui.view"
            ],
            [
                "ViewerPipe",
                "org.graphstream.ui.view"
            ],
            [
                "Viewer",
                "org.graphstream.ui.view"
            ],
            [
                "View",
                "org.graphstream.ui.view"
            ],
            [
                "Camera",
                "org.graphstream.ui.view"
            ],
            [
                "Sprite",
                "org.graphstream.ui.spriteManager"
            ],
            [
                "InvalidSpriteIDException",
                "org.graphstream.ui.spriteManager"
            ],
            [
                "SpriteManager",
                "org.graphstream.ui.spriteManager"
            ],
            [
                "SpriteFactory",
                "org.graphstream.ui.spriteManager"
            ],
            [
                "StyleGroupListener",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "Colors",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "Values",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "StyleSheetListener",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "StyleSheetParserTokenManager",
                "org.graphstream.ui.graphicGraph.stylesheet.parser"
            ],
            [
                "StyleSheetParserConstants",
                "org.graphstream.ui.graphicGraph.stylesheet.parser"
            ],
            [
                "StyleSheetParser",
                "org.graphstream.ui.graphicGraph.stylesheet.parser"
            ],
            [
                "Style",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "StyleSheet",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "StyleConstants",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "Selector",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "Value",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "Rule",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "GraphicNode",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "StyleGroup",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphPosLengthUtils",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphicEdge",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphicElementChangeListener",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphicGraph",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "StyleGroupSet",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphicSprite",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphicElement",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "VerboseSink",
                "org.graphstream.util"
            ],
            [
                "GraphListeners",
                "org.graphstream.util"
            ],
            [
                "Environment",
                "org.graphstream.util"
            ],
            [
                "GraphDiff",
                "org.graphstream.util"
            ],
            [
                "Filters",
                "org.graphstream.util"
            ],
            [
                "FilteredEdgeIterator",
                "org.graphstream.util"
            ],
            [
                "Parser",
                "org.graphstream.util.parser"
            ],
            [
                "ParserFactory",
                "org.graphstream.util.parser"
            ],
            [
                "TokenMgrError",
                "org.graphstream.util.parser"
            ],
            [
                "ParseException",
                "org.graphstream.util.parser"
            ],
            [
                "SimpleCharStream",
                "org.graphstream.util.parser"
            ],
            [
                "Token",
                "org.graphstream.util.parser"
            ],
            [
                "ISODateIO",
                "org.graphstream.util.time"
            ],
            [
                "ISODateComponent",
                "org.graphstream.util.time"
            ],
            [
                "FilteredNodeIterator",
                "org.graphstream.util"
            ],
            [
                "FixedArrayList",
                "org.graphstream.util.set"
            ],
            [
                "StepCounter",
                "org.graphstream.util"
            ],
            [
                "GraphSpells",
                "org.graphstream.util.cumulative"
            ],
            [
                "CumulativeAttributes",
                "org.graphstream.util.cumulative"
            ],
            [
                "CumulativeSpells",
                "org.graphstream.util.cumulative"
            ],
            [
                "Filter",
                "org.graphstream.util"
            ],
            [
                "PipeAdapter",
                "org.graphstream.stream"
            ],
            [
                "GraphParseException",
                "org.graphstream.stream"
            ],
            [
                "ElementSink",
                "org.graphstream.stream"
            ],
            [
                "URLSource",
                "org.graphstream.stream.net"
            ],
            [
                "HTTPSource",
                "org.graphstream.stream.net"
            ],
            [
                "SourceAdapter",
                "org.graphstream.stream"
            ],
            [
                "AttributeSink",
                "org.graphstream.stream"
            ],
            [
                "GMLParserConstants",
                "org.graphstream.stream.file.gml"
            ],
            [
                "GMLParserTokenManager",
                "org.graphstream.stream.file.gml"
            ],
            [
                "GMLContext",
                "org.graphstream.stream.file.gml"
            ],
            [
                "Graphics",
                "org.graphstream.stream.file.gml"
            ],
            [
                "KeyValues",
                "org.graphstream.stream.file.gml"
            ],
            [
                "GMLParser",
                "org.graphstream.stream.file.gml"
            ],
            [
                "FileSinkGraphML",
                "org.graphstream.stream.file"
            ],
            [
                "TLPParserConstants",
                "org.graphstream.stream.file.tlp"
            ],
            [
                "TLPParser",
                "org.graphstream.stream.file.tlp"
            ],
            [
                "TLPParserTokenManager",
                "org.graphstream.stream.file.tlp"
            ],
            [
                "FileSinkFactory",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceEdge",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkBase",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkTikZ",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceGEXF",
                "org.graphstream.stream.file"
            ],
            [
                "DOTParser",
                "org.graphstream.stream.file.dot"
            ],
            [
                "DOTParserConstants",
                "org.graphstream.stream.file.dot"
            ],
            [
                "DOTParserTokenManager",
                "org.graphstream.stream.file.dot"
            ],
            [
                "FileSink",
                "org.graphstream.stream.file"
            ],
            [
                "PajekContext",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "Graphics",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "NodeGraphics",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "EdgeGraphics",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "EdgeMatrix",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "PajekParserTokenManager",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "PajekParserConstants",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "FileSourceXML",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkBaseFiltered",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkDOT",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceParser",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkDGSFiltered",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceDOT",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceDGS1And2",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceGraphML",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceFactory",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkImages",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkDynamicGML",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkSVG",
                "org.graphstream.stream.file"
            ],
            [
                "GEXFSpell",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "SmartXMLWriter",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFElement",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFEdges",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFAttValues",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFEdge",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFSpells",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFAttValue",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFNodes",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFNode",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFMeta",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFAttributes",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXF",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFGraph",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFAttribute",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "OldFileSourceDGS",
                "org.graphstream.stream.file.dgs"
            ],
            [
                "DGSParser",
                "org.graphstream.stream.file.dgs"
            ],
            [
                "FileSourceBase",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkGML",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceDGS",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkDGSUtility",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceTLP",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkSVG2",
                "org.graphstream.stream.file"
            ],
            [
                "FileSource",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceNCol",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourcePajek",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceGPX",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceLGL",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkGEXF2",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceGML",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkGEXF",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkDGS",
                "org.graphstream.stream.file"
            ],
            [
                "ProxyPipe",
                "org.graphstream.stream"
            ],
            [
                "Sink",
                "org.graphstream.stream"
            ],
            [
                "Timeline",
                "org.graphstream.stream"
            ],
            [
                "Pipe",
                "org.graphstream.stream"
            ],
            [
                "SinkAdapter",
                "org.graphstream.stream"
            ],
            [
                "Replayable",
                "org.graphstream.stream"
            ],
            [
                "Source",
                "org.graphstream.stream"
            ],
            [
                "AnnotatedSink",
                "org.graphstream.stream"
            ],
            [
                "GraphReplay",
                "org.graphstream.stream"
            ],
            [
                "AttributePipe",
                "org.graphstream.stream"
            ],
            [
                "SinkTime",
                "org.graphstream.stream.sync"
            ],
            [
                "SourceTime",
                "org.graphstream.stream.sync"
            ],
            [
                "PipeBase",
                "org.graphstream.stream"
            ],
            [
                "ThreadProxyPipe",
                "org.graphstream.stream.thread"
            ],
            [
                "ThreadProxyPipeOld",
                "org.graphstream.stream.thread"
            ],
            [
                "RMISource",
                "org.graphstream.stream.rmi"
            ],
            [
                "RMIAdapterOut",
                "org.graphstream.stream.rmi"
            ],
            [
                "RMISink",
                "org.graphstream.stream.rmi"
            ],
            [
                "RMIAdapterIn",
                "org.graphstream.stream.rmi"
            ],
            [
                "SourceBase",
                "org.graphstream.stream"
            ],
            [
                "NetStreamDecoder",
                "org.graphstream.stream.netstream"
            ],
            [
                "NetStreamReceiver",
                "org.graphstream.stream.netstream"
            ],
            [
                "NetStreamConstants",
                "org.graphstream.stream.netstream"
            ],
            [
                "NetStreamSender",
                "org.graphstream.stream.netstream"
            ],
            [
                "DefaultNetStreamDecoder",
                "org.graphstream.stream.netstream"
            ],
            [
                "Base64",
                "org.graphstream.stream.netstream.packing"
            ],
            [
                "NetStreamUnpacker",
                "org.graphstream.stream.netstream.packing"
            ],
            [
                "Base64Packer",
                "org.graphstream.stream.netstream.packing"
            ],
            [
                "Base64Unpacker",
                "org.graphstream.stream.netstream.packing"
            ],
            [
                "NetStreamPacker",
                "org.graphstream.stream.netstream.packing"
            ],
            [
                "AttributePredicate",
                "org.graphstream.stream"
            ],
            [
                "Element",
                "org.graphstream.graph"
            ],
            [
                "Node",
                "org.graphstream.graph"
            ],
            [
                "BreadthFirstIterator",
                "org.graphstream.graph"
            ],
            [
                "Graph",
                "org.graphstream.graph"
            ],
            [
                "EdgeRejectedException",
                "org.graphstream.graph"
            ],
            [
                "CompoundAttribute",
                "org.graphstream.graph"
            ],
            [
                "Structure",
                "org.graphstream.graph"
            ],
            [
                "DepthFirstIterator",
                "org.graphstream.graph"
            ],
            [
                "NullAttributeException",
                "org.graphstream.graph"
            ],
            [
                "IdAlreadyInUseException",
                "org.graphstream.graph"
            ],
            [
                "EdgeFactory",
                "org.graphstream.graph"
            ],
            [
                "ElementNotFoundException",
                "org.graphstream.graph"
            ],
            [
                "OneAttributeElement",
                "org.graphstream.graph.implementations"
            ],
            [
                "AdjacencyListNode",
                "org.graphstream.graph.implementations"
            ],
            [
                "SingleNode",
                "org.graphstream.graph.implementations"
            ],
            [
                "AbstractElement",
                "org.graphstream.graph.implementations"
            ],
            [
                "AdjacencyListGraph",
                "org.graphstream.graph.implementations"
            ],
            [
                "AbstractNode",
                "org.graphstream.graph.implementations"
            ],
            [
                "DefaultGraph",
                "org.graphstream.graph.implementations"
            ],
            [
                "MultiGraph",
                "org.graphstream.graph.implementations"
            ],
            [
                "Graphs",
                "org.graphstream.graph.implementations"
            ],
            [
                "SingleGraph",
                "org.graphstream.graph.implementations"
            ],
            [
                "MultiNode",
                "org.graphstream.graph.implementations"
            ],
            [
                "AbstractGraph",
                "org.graphstream.graph.implementations"
            ],
            [
                "AbstractEdge",
                "org.graphstream.graph.implementations"
            ],
            [
                "GraphFactory",
                "org.graphstream.graph"
            ],
            [
                "NodeFactory",
                "org.graphstream.graph"
            ],
            [
                "Edge",
                "org.graphstream.graph"
            ],
            [
                "Path",
                "org.graphstream.graph"
            ]
        ],
        "tokensProjectClassesNonPrivateStaticNonVoidMethods": [
            [
                "gradientInArea",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "/**\n * Generate a gradient in the given pixel area following the given style.\n * This produces a gradient only if the style fill-mode is compatible.\n *\n * @param x0\n *            The left corner of the area.\n * @param y0\n *            The bottom corner of the area.\n * @param width\n *            The area width.\n * @param height\n *            The area height.\n * @param style\n *            The style.\n * @return A gradient paint or null if the style does not specify a\n *         gradient.\n */\npublic static Paint gradientInArea(int x0, int y0, int width, int height, Style style) {\n    switch(style.getFillMode()) {\n        case GRADIENT_VERTICAL:\n            return linearGradientFromStyle(x0, y0, x0, y0 + height, style);\n        case GRADIENT_HORIZONTAL:\n            return linearGradientFromStyle(x0, y0, x0 + width, y0, style);\n        case GRADIENT_DIAGONAL1:\n            return linearGradientFromStyle(x0, y0, x0 + width, y0 + height, style);\n        case GRADIENT_DIAGONAL2:\n            return linearGradientFromStyle(x0 + width, y0, x0, y0 + height, style);\n        case GRADIENT_RADIAL:\n            return radialGradientFromStyle(x0 + (width / 2), y0 + (height / 2), width > height ? width / 2 : height / 2, style);\n        default:\n            return null;\n    }\n}"
            ],
            [
                "linearGradientFromStyle",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "/**\n * Generate a linear gradient between two given points corresponding to the\n * given style.\n *\n * @param x0\n *            The start point abscissa.\n * @param y0\n *            The start point ordinate.\n * @param x1\n *            The end point abscissa.\n * @param y1\n *            The end point ordinate.\n * @param style\n *            The style.\n * @return A paint for the gradient or null if the style specifies no\n *         gradient (the fill mode is not a linear gradient or there is only\n *         one fill colour).\n */\npublic static Paint linearGradientFromStyle(float x0, float y0, float x1, float y1, Style style) {\n    Paint paint = null;\n    if (style.getFillColorCount() > 1) {\n        switch(style.getFillMode()) {\n            case GRADIENT_DIAGONAL1:\n            case GRADIENT_DIAGONAL2:\n            case GRADIENT_HORIZONTAL:\n            case GRADIENT_VERTICAL:\n                if (version16)\n                    paint = new LinearGradientPaint(x0, y0, x1, y1, createFractions(style), createColors(style));\n                else\n                    paint = new GradientPaint(x0, y0, style.getFillColor(0), x1, y1, style.getFillColor(1));\n                break;\n            default:\n                break;\n        }\n    }\n    return paint;\n}"
            ],
            [
                "radialGradientFromStyle",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static Paint radialGradientFromStyle(float cx, float cy, float radius, Style style) {\n    return radialGradientFromStyle(cx, cy, radius, cx, cy, style);\n}"
            ],
            [
                "radialGradientFromStyle",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "/**\n * Generate a radial gradient between whose center is at (cx,cy) with the\n * given radius. The focus (fx,fy) is the start position of the gradient in\n * the circle.\n *\n * @param cx\n *            The center point abscissa.\n * @param cy\n *            The center point ordinate.\n * @param fx\n *            The start point abscissa.\n * @param fy\n *            The start point ordinate.\n * @param radius\n *            The gradient radius.\n * @param style\n *            The style.\n * @return A paint for the gradient or null if the style specifies no\n *         gradient (the fill mode is not a radial gradient or there is only\n *         one fill colour).\n */\npublic static Paint radialGradientFromStyle(float cx, float cy, float radius, float fx, float fy, Style style) {\n    Paint paint = null;\n    if (version16) {\n        if (style.getFillColorCount() > 1 && style.getFillMode() == FillMode.GRADIENT_RADIAL) {\n            float[] fractions = createFractions(style);\n            Color[] colors = createColors(style);\n            paint = new RadialGradientPaint(cx, cy, radius, fx, fy, fractions, colors, MultipleGradientPaint.CycleMethod.REFLECT);\n        }\n    }\n    return paint;\n}"
            ],
            [
                "createFractions",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "protected static float[] createFractions(Style style) {\n    int n = style.getFillColorCount();\n    if (n < predefFractions.length)\n        return predefFractions[n];\n    float[] fractions = new float[n];\n    float div = 1f / (n - 1);\n    for (int i = 1; i < (n - 1); i++) fractions[i] = div * i;\n    fractions[0] = 0f;\n    fractions[n - 1] = 1f;\n    return fractions;\n}"
            ],
            [
                "createColors",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "protected static Color[] createColors(Style style) {\n    int n = style.getFillColorCount();\n    Color[] colors = new Color[n];\n    for (int i = 0; i < n; i++) colors[i] = style.getFillColor(i);\n    return colors;\n}"
            ],
            [
                "defaultImageCache",
                "org.graphstream.ui.swingViewer.util",
                "ImageCache",
                "/**\n * Default singleton image cache instance that can be shared. This method\n * and singleton must be used only in the Swing thread.\n *\n * @return The default singleton image cache instance.\n */\npublic static ImageCache defaultImageCache() {\n    if (defaultImageCache == null)\n        defaultImageCache = new ImageCache();\n    return defaultImageCache;\n}"
            ],
            [
                "generateStroke",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "/**\n * Generate a stroke of the appropriate width and style according to the\n * given style and metrics.\n *\n * @param style\n *            The style to use.\n * @param metrics\n *            The metrics to use.\n * @return The stroke or null if the style specifies a \"none\" stroke mode.\n */\npublic static Stroke generateStroke(Style style, GraphMetrics metrics) {\n    if (style.getStrokeWidth().value == 0)\n        return null;\n    switch(style.getStrokeMode()) {\n        case PLAIN:\n            return generatePlainStroke(style, metrics);\n        case DOTS:\n            return generateDotsStroke(style, metrics);\n        case DASHES:\n            return generateDashesStroke(style, metrics);\n        default:\n        case NONE:\n            return null;\n    }\n}"
            ],
            [
                "generatePlainStroke",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "protected static Stroke generatePlainStroke(Style style, GraphMetrics metrics) {\n    float width = (float) metrics.lengthToGu(style.getStrokeWidth());\n    /*\n\t\t * if( width == 1f ) return plainLine1px; // XXX Not a good optimisation\n\t\t * else if( width == 2f ) return plainLine2px; // We draw the whole\n\t\t * graph in GU else if( width == 3f ) return plainLine3px; // In graph\n\t\t * units the width is never exactly 1,2, 5 ... else if( width == 5f )\n\t\t * return plainLine5px; else if( width == 10f ) return plainLine10px;\n\t\t * else\n\t\t */\n    {\n        return new BasicStroke(width);\n    }\n}"
            ],
            [
                "generateDotsStroke",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "protected static Stroke generateDotsStroke(Style style, GraphMetrics metrics) {\n    float width = (float) metrics.lengthToGu(style.getStrokeWidth());\n    /*\n\t\t * if( width == 1f ) return dotsLine1px; else if( width == 2f ) return\n\t\t * dotsLine2px; else if( width == 3f ) return dotsLine3px; else if(\n\t\t * width == 5f ) return dotsLine5px; else if( width == 10f ) return\n\t\t * dotsLine10px; else\n\t\t */\n    {\n        dots[0] = (float) metrics.lengthToGu(1f, Units.PX);\n        dots[1] = dots[0];\n        return new BasicStroke(width, BasicStroke.CAP_BUTT, BasicStroke.JOIN_MITER, 1f, dots, 0);\n    }\n}"
            ],
            [
                "generateDashesStroke",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "protected static Stroke generateDashesStroke(Style style, GraphMetrics metrics) {\n    float width = (float) metrics.lengthToGu(style.getStrokeWidth());\n    /*\n\t\t * if( width == 1f ) return dashesLine1px; else if( width == 2f ) return\n\t\t * dashesLine2px; else if( width == 3f ) return dashesLine3px; else if(\n\t\t * width == 5f ) return dashesLine5px; else if( width == 10f ) return\n\t\t * dashesLine10px; else\n\t\t */\n    {\n        dashes[0] = (float) metrics.lengthToGu(3f, Units.PX);\n        dashes[1] = dashes[0];\n        return new BasicStroke(width, BasicStroke.CAP_BUTT, BasicStroke.JOIN_MITER, 1f, dashes, 0);\n    }\n}"
            ],
            [
                "defaultFontCache",
                "org.graphstream.ui.swingViewer.util",
                "FontCache",
                "/**\n * Default singleton instance for shared font cache. This method and cache\n * can only be used in the Swing thread.\n *\n * @return The default singleton font cache instance.\n */\npublic static FontCache defaultFontCache() {\n    if (defaultFontCache == null)\n        defaultFontCache = new FontCache();\n    return defaultFontCache;\n}"
            ],
            [
                "newLayoutAlgorithm",
                "org.graphstream.ui.layout",
                "Layouts",
                "/**\n * Creates a layout according to the \"org.graphstream.ui.layout\" system property.\n *\n * @return The new layout or the default GraphStream \"Spring-Box\" layout if\n *         the \"gs.ui.layout\" system property is either not set or contains\n *         a class that cannot be found.\n */\npublic static Layout newLayoutAlgorithm() {\n    String layoutClassName;\n    try {\n        layoutClassName = System.getProperty(\"gs.ui.layout\");\n        if (layoutClassName != null) {\n            logger.log(Level.WARNING, \"\\\"gs.ui.layout\\\" is deprecated, use \\\"org.graphstream.ui.layout\\\" instead.\");\n        } else {\n            layoutClassName = System.getProperty(\"org.graphstream.ui.layout\");\n        }\n    } catch (AccessControlException e) {\n        layoutClassName = null;\n    }\n    if (layoutClassName != null) {\n        try {\n            Class<?> c = Class.forName(layoutClassName);\n            Object object = c.newInstance();\n            if (object instanceof Layout) {\n                return (Layout) object;\n            } else {\n                logger.warning(String.format(\"class '%s' is not a 'GraphRenderer'%n\", object));\n            }\n        } catch (Exception e) {\n            logger.log(Level.WARNING, \"Cannot create layout.\", e);\n        }\n    }\n    return new org.graphstream.ui.layout.springbox.implementations.SpringBox(false);\n}"
            ],
            [
                "eval",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * Evaluate a cubic B\u00e9zier curve according to control points `x0`, `x1`,\n * `x2` and `x3` and return the position at parametric position `t` of the\n * curve.\n *\n * @return The coordinate at parametric position `t` on the curve.\n */\npublic static double eval(double x0, double x1, double x2, double x3, double t) {\n    double tt = (1f - t);\n    return x0 * (tt * tt * tt) + 3f * x1 * t * (tt * tt) + 3f * x2 * (t * t) * tt + x3 * (t * t * t);\n}"
            ],
            [
                "eval",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * Evaluate a cubic B\u00e9zier curve according to control points `p0`, `p1`,\n * `p2` and `p3` and return the position at parametric position `t` of the\n * curve.\n *\n * @return The point at parametric position `t` on the curve.\n */\npublic static Point2 eval(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t) {\n    return new Point2(eval(p0.x, p1.x, p2.x, p3.x, t), eval(p0.y, p1.y, p2.y, p3.y, t));\n}"
            ],
            [
                "eval",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * Evaluate a cubic B\u00e9zier curve according to control points `p0`, `p1`,\n * `p2` and `p3` and return the position at parametric position `t` of the\n * curve.\n *\n * @return The point at parametric position `t` on the curve.\n */\npublic static Point2D.Double eval(Point2D.Double p0, Point2D.Double p1, Point2D.Double p2, Point2D.Double p3, double t) {\n    return new Point2D.Double(eval(p0.x, p1.x, p2.x, p3.x, t), eval(p0.y, p1.y, p2.y, p3.y, t));\n}"
            ],
            [
                "eval",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * Evaluate a cubic B\u00e9zier curve according to control points `p0`, `p1`,\n * `p2` and `p3` and store the position at parametric position `t` of the\n * curve in `result`.\n *\n * @return the given reference to `result`.\n */\npublic static Point2 eval(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t, Point2 result) {\n    result.set(eval(p0.x, p1.x, p2.x, p3.x, t), eval(p0.y, p1.y, p2.y, p3.y, t));\n    return result;\n}"
            ],
            [
                "derivative",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * Derivative of a cubic B\u00e9zier curve according to control points `x0`,\n * `x1`, `x2` and `x3` at parametric position `t` of the curve.\n *\n * @return The derivative at parametric position `t` on the curve.\n */\npublic static double derivative(double x0, double x1, double x2, double x3, double t) {\n    return 3 * (x3 - 3 * x2 + 3 * x1 - x0) * t * t + 2 * (3 * x2 - 6 * x1 + 3 * x0) * t + (3 * x1 - 3 * x0);\n}"
            ],
            [
                "derivative",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * Derivative point of a cubic B\u00e9zier curve according to control points\n * `x0`, `x1`, `x2` and `x3` at parametric position `t` of the curve.\n *\n * @return The derivative point at parametric position `t` on the curve.\n */\npublic static Point2 derivative(Point2 p0, Point2 p1, Point2 p2, Point3 p3, double t) {\n    return new Point2(derivative(p0.x, p1.x, p2.x, p3.x, t), derivative(p0.y, p1.y, p2.y, p3.y, t));\n}"
            ],
            [
                "derivative",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * Store in `result` the derivative point of a cubic B\u00e9zier curve according\n * to control points `x0`, `x1`, `x2` and `x3` at parametric position `t` of\n * the curve.\n *\n * @return the given reference to `result`.\n */\npublic static Point2 derivative(Point2 p0, Point2 p1, Point2 p2, Point3 p3, double t, Point2 result) {\n    result.set(derivative(p0.x, p1.x, p2.x, p3.x, t), derivative(p0.y, p1.y, p2.y, p3.y, t));\n    return result;\n}"
            ],
            [
                "perpendicular",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * The perpendicular vector to the curve defined by control points `p0`,\n * `p1`, `p2` and `p3` at parametric position `t`.\n *\n * @return A vector perpendicular to the curve at position `t`.\n */\npublic static Vector2 perpendicular(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t) {\n    return new Vector2(derivative(p0.y, p1.y, p2.y, p3.y, t), -derivative(p0.x, p1.x, p2.x, p3.x, t));\n}"
            ],
            [
                "perpendicular",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * Store in `result` the perpendicular vector to the curve defined by\n * control points `p0`, `p1`, `p2` and `p3` at parametric position `t`.\n *\n * @return the given reference to `result`.\n */\npublic static Vector2 perpendicular(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t, Vector2 result) {\n    result.set(derivative(p0.y, p1.y, p2.y, p3.y, t), -derivative(p0.x, p1.x, p2.x, p3.x, t));\n    return result;\n}"
            ],
            [
                "perpendicular",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * The perpendicular vector to the curve defined by control points `p0`,\n * `p1`, `p2` and `p3` at parametric position `t`.\n *\n * @return A vector perpendicular to the curve at position `t`.\n */\npublic static Point2D.Double perpendicular(Point2D.Double p0, Point2D.Double p1, Point2D.Double p2, Point2D.Double p3, double t) {\n    return new Point2D.Double(derivative(p0.y, p1.y, p2.y, p3.y, t), -derivative(p0.x, p1.x, p2.x, p3.x, t));\n}"
            ],
            [
                "newGraphRenderer",
                "org.graphstream.ui.view",
                "Viewer",
                "// Access\n/**\n * Create a new instance of the default graph renderer. The default graph\n * renderer class is given by the \"org.graphstream.ui.renderer\" system\n * property. If the class indicated by this property is not usable (not in\n * the class path, not of the correct type, etc.) or if the property is not\n * present a SwingBasicGraphRenderer is returned.\n */\npublic static GraphRenderer newGraphRenderer() {\n    String rendererClassName;\n    try {\n        rendererClassName = System.getProperty(\"gs.ui.renderer\");\n        if (rendererClassName != null) {\n            logger.warning(\"\\\"gs.ui.renderer\\\" is deprecated, use \\\"org.graphstream.ui.renderer\\\" instead.\");\n        } else {\n            rendererClassName = System.getProperty(\"org.graphstream.ui.renderer\");\n        }\n    } catch (AccessControlException e) {\n        rendererClassName = null;\n    }\n    if (rendererClassName == null)\n        return new SwingBasicGraphRenderer();\n    try {\n        Class<?> c = Class.forName(rendererClassName);\n        Object object = c.newInstance();\n        if (object instanceof GraphRenderer) {\n            return (GraphRenderer) object;\n        } else {\n            logger.warning(String.format(\"Class '%s' is not a 'GraphRenderer'.\", object));\n        }\n    } catch (Exception e) {\n        logger.log(Level.WARNING, \"Cannot create graph renderer.\", e);\n    }\n    return new SwingBasicGraphRenderer();\n}"
            ],
            [
                "getPositionValue",
                "org.graphstream.ui.spriteManager",
                "SpriteManager",
                "// Utility\nprotected static Values getPositionValue(Object value) {\n    if (value instanceof Object[]) {\n        Object[] values = (Object[]) value;\n        if (values.length == 4) {\n            if (values[0] instanceof Number && values[1] instanceof Number && values[2] instanceof Number && values[3] instanceof Style.Units) {\n                return new Values((Style.Units) values[3], ((Number) values[0]).floatValue(), ((Number) values[1]).floatValue(), ((Number) values[2]).floatValue());\n            } else {\n                logger.warning(\"Cannot parse values[4] for sprite position.\");\n            }\n        } else if (values.length == 3) {\n            if (values[0] instanceof Number && values[1] instanceof Number && values[2] instanceof Number) {\n                return new Values(Units.GU, ((Number) values[0]).floatValue(), ((Number) values[1]).floatValue(), ((Number) values[2]).floatValue());\n            } else {\n                logger.warning(\"Cannot parse values[3] for sprite position.\");\n            }\n        } else if (values.length == 1) {\n            if (values[0] instanceof Number) {\n                return new Values(Units.GU, ((Number) values[0]).floatValue());\n            } else {\n                logger.warning(String.format(\"Sprite position percent is not a number.\"));\n            }\n        } else {\n            logger.warning(String.format(\"Cannot transform value '%s' (length=%d) into a position.\", Arrays.toString(values), values.length));\n        }\n    } else if (value instanceof Number) {\n        return new Values(Units.GU, ((Number) value).floatValue());\n    } else if (value instanceof Value) {\n        return new Values((Value) value);\n    } else if (value instanceof Values) {\n        return new Values((Values) value);\n    } else {\n        System.err.printf(\"GraphicGraph : cannot place sprite with posiiton '%s' (instance of %s)%n\", value, value.getClass().getName());\n    }\n    return null;\n}"
            ],
            [
                "convertColor",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Try to convert the given string value to a colour. It understands the 600\n * colour names of the X11 RGB data base. It also understands colours given\n * in the \"#FFFFFF\" format and the hexadecimal \"0xFFFFFF\" format. Finally,\n * it understands colours given as a \"rgb(1,10,100)\", CSS-like format. If\n * the input value is null, the result is null.\n *\n * @param anyValue\n *            The value to convert.\n * @return the converted colour or null if the conversion failed.\n */\npublic static Color convertColor(Object anyValue) {\n    if (anyValue == null)\n        return null;\n    if (anyValue instanceof Color)\n        return (Color) anyValue;\n    if (anyValue instanceof String) {\n        Color c = null;\n        String value = (String) anyValue;\n        if (value.startsWith(\"#\")) {\n            Matcher m = sharpColor1.matcher(value);\n            if (m.matches()) {\n                if (value.length() == 7) {\n                    try {\n                        c = Color.decode(value);\n                        return c;\n                    } catch (NumberFormatException e) {\n                        c = null;\n                    }\n                } else if (value.length() == 9) {\n                    int r = Integer.parseInt(m.group(1), 16);\n                    int g = Integer.parseInt(m.group(2), 16);\n                    int b = Integer.parseInt(m.group(3), 16);\n                    int a = Integer.parseInt(m.group(4), 16);\n                    return new Color(r, g, b, a);\n                }\n            }\n            m = sharpColor2.matcher(value);\n            if (m.matches()) {\n                if (value.length() >= 4) {\n                    int r = Integer.parseInt(m.group(1), 16) * 16;\n                    int g = Integer.parseInt(m.group(2), 16) * 16;\n                    int b = Integer.parseInt(m.group(3), 16) * 16;\n                    int a = 255;\n                    if (value.length() == 5)\n                        a = Integer.parseInt(m.group(4), 16) * 16;\n                    return new Color(r, g, b, a);\n                }\n            }\n        } else if (value.startsWith(\"rgb\")) {\n            Matcher m = cssColorA.matcher(value);\n            if (m.matches()) {\n                int r = Integer.parseInt(m.group(1));\n                int g = Integer.parseInt(m.group(2));\n                int b = Integer.parseInt(m.group(3));\n                int a = Integer.parseInt(m.group(4));\n                return new Color(r, g, b, a);\n            }\n            m = cssColor.matcher(value);\n            if (m.matches()) {\n                int r = Integer.parseInt(m.group(1));\n                int g = Integer.parseInt(m.group(2));\n                int b = Integer.parseInt(m.group(3));\n                return new Color(r, g, b);\n            }\n        } else if (value.startsWith(\"0x\") || value.startsWith(\"0X\")) {\n            Matcher m = hexaColor.matcher(value);\n            if (m.matches()) {\n                if (value.length() == 8) {\n                    try {\n                        return Color.decode(value);\n                    } catch (NumberFormatException e) {\n                        c = null;\n                    }\n                } else if (value.length() == 10) {\n                    String r = m.group(1);\n                    String g = m.group(2);\n                    String b = m.group(3);\n                    String a = m.group(4);\n                    return new Color(Integer.parseInt(r, 16), Integer.parseInt(g, 16), Integer.parseInt(b, 16), Integer.parseInt(a, 16));\n                }\n            }\n        } else if (value.startsWith(\"java.awt.Color[\")) {\n            Matcher m = awtColor.matcher(value);\n            if (m.matches()) {\n                int r = Integer.parseInt(m.group(1));\n                int g = Integer.parseInt(m.group(2));\n                int b = Integer.parseInt(m.group(3));\n                return new Color(r, g, b);\n            }\n        }\n        return colorMap.get(value.toLowerCase());\n    }\n    // TODO throw an exception instead ??\n    return null;\n}"
            ],
            [
                "convertLabel",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Check if the given value is an instance of CharSequence (String is) and\n * return it as a string. Else return null. If the input value is null, the\n * return value is null. If the value returned is larger than 128\n * characters, this method cuts it to 128 characters. TODO: allow to set the\n * max length of these strings.\n *\n * @param value\n *            The value to convert.\n * @return The corresponding string, or null.\n */\npublic static String convertLabel(Object value) {\n    String label = null;\n    if (value != null) {\n        if (value instanceof CharSequence)\n            label = ((CharSequence) value).toString();\n        else\n            label = value.toString();\n        if (label.length() > 128)\n            label = String.format(\"%s...\", label.substring(0, 128));\n    }\n    return label;\n}"
            ],
            [
                "convertWidth",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Try to convert an arbitrary value to a float. If it is a descendant of\n * Number, the float value is returned. If it is a string, a conversion is\n * tried to change it into a number and if successful, this number is\n * returned as a float. Else, the -1 value is returned as no width can be\n * negative to indicate the conversion failed. If the input is null, the\n * return value is -1.\n *\n * @param value\n *            The input to convert.\n * @return The value or -1 if the conversion failed. TODO should be named\n *         convertNumber\n */\npublic static float convertWidth(Object value) {\n    if (value instanceof CharSequence) {\n        try {\n            float val = Float.parseFloat(((CharSequence) value).toString());\n            return val;\n        } catch (NumberFormatException e) {\n            return -1;\n        }\n    } else if (value instanceof Number) {\n        return ((Number) value).floatValue();\n    }\n    return -1;\n}"
            ],
            [
                "convertValue",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Convert an object to a value with units. The object can be a number, in\n * which case the value returned contains this number in pixel units. The\n * object can be a string. In this case the strings understood by this\n * method are of the form (spaces, number, spaces, unit, spaces). For\n * example \"3px\", \"45gu\", \"5.5%\", \" 25.3  gu \", \"4\", \"   28.1  \".\n *\n * @param value\n *            A Number or a CharSequence.\n * @return A value.\n */\npublic static Value convertValue(Object value) {\n    if (value instanceof CharSequence) {\n        CharSequence string = (CharSequence) value;\n        //\t\t\tif (string == null)\n        //\t\t\t\tthrow new RuntimeException(\"null size string ...\");\n        if (string.length() < 0)\n            throw new RuntimeException(\"empty size string ...\");\n        Matcher m = numberUnit.matcher(string);\n        if (m.matches())\n            return new Value(convertUnit(m.group(2)), Float.parseFloat(m.group(1)));\n        m = number.matcher(string);\n        if (m.matches())\n            return new Value(Units.PX, Float.parseFloat(m.group(1)));\n        throw new RuntimeException(String.format(\"string is not convertible to a value (%s)\", string));\n    } else if (value instanceof Number) {\n        return new Value(Units.PX, ((Number) value).floatValue());\n    }\n    if (value == null)\n        throw new RuntimeException(\"cannot convert null value\");\n    throw new RuntimeException(String.format(\"value is of class %s%n\", value.getClass().getName()));\n}"
            ],
            [
                "convertUnit",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Convert \"gu\", \"px\" and \"%\" to Units.GU, Units.PX, Units.PERCENTS.\n */\nprotected static Units convertUnit(String unit) {\n    if (unit.equals(\"gu\"))\n        return Units.GU;\n    else if (unit.equals(\"px\"))\n        return Units.PX;\n    else if (unit.equals(\"%\"))\n        return Units.PERCENTS;\n    return Units.PX;\n}"
            ],
            [
                "nodePosition",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "/**\n * Retrieve a node position from its attributes (\"x\", \"y\", \"z\", or \"xy\", or\n * \"xyz\").\n *\n * @param id\n *            The node identifier.\n * @return A newly allocated array of three floats containing the (x,y,z)\n *         position of the node, or null if the node is not part of the\n *         graph.\n */\npublic static double[] nodePosition(Graph graph, String id) {\n    Node node = graph.getNode(id);\n    if (node != null)\n        return nodePosition(node);\n    return null;\n}"
            ],
            [
                "nodePointPosition",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "/**\n * Retrieve a node position from its attributes (\"x\", \"y\", \"z\", or \"xy\", or\n * \"xyz\").\n *\n * @param id\n *            The node identifier.\n * @return A newly allocated point containing the (x,y,z)\n *         position of the node, or null if the node is not part of the\n *         graph.\n */\npublic static Point3 nodePointPosition(Graph graph, String id) {\n    Node node = graph.getNode(id);\n    if (node != null)\n        return nodePointPosition(node);\n    return null;\n}"
            ],
            [
                "nodePosition",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "/**\n * Like {@link #nodePosition(Graph,String)} but use an existing node as\n * argument.\n *\n * @param node\n *            The node to consider.\n * @return A newly allocated array of three floats containing the (x,y,z)\n *         position of the node.\n */\npublic static double[] nodePosition(Node node) {\n    double[] xyz = new double[3];\n    nodePosition(node, xyz);\n    return xyz;\n}"
            ],
            [
                "nodePointPosition",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "/**\n * Like {@link #nodePointPosition(Graph,String)} but use an existing node as\n * argument.\n *\n * @param node\n *            The node to consider.\n * @return A newly allocated point containing the (x,y,z)\n *         position of the node.\n */\npublic static Point3 nodePointPosition(Node node) {\n    Point3 pos = new Point3();\n    nodePosition(node, pos);\n    return pos;\n}"
            ],
            [
                "edgeLength",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "/**\n * Compute the edge length of the given edge according to its two nodes\n * positions.\n *\n * @param id\n *            The identifier of the edge.\n * @return The edge length or -1 if the nodes of the edge have no positions.\n * @throws RuntimeException\n *             If the edge cannot be found.\n */\npublic static double edgeLength(Graph graph, String id) {\n    Edge edge = graph.getEdge(id);\n    if (edge != null)\n        return edgeLength(edge);\n    throw new RuntimeException(\"edge '\" + id + \"' cannot be found\");\n}"
            ],
            [
                "edgeLength",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "/**\n * Like {@link #edgeLength(Graph,String)} but use an existing edge as\n * argument.\n *\n * @param edge\n * @return The edge length or -1 if the nodes of the edge have no positions.\n */\npublic static double edgeLength(Edge edge) {\n    double[] xyz0 = nodePosition(edge.getNode0());\n    double[] xyz1 = nodePosition(edge.getNode1());\n    if (xyz0 == null || xyz1 == null)\n        return -1;\n    xyz0[0] = xyz1[0] - xyz0[0];\n    xyz0[1] = xyz1[1] - xyz0[1];\n    xyz0[2] = xyz1[2] - xyz0[2];\n    return Math.sqrt(xyz0[0] * xyz0[0] + xyz0[1] * xyz0[1] + xyz0[2] * xyz0[2]);\n}"
            ],
            [
                "getGlobalEnvironment",
                "org.graphstream.util",
                "Environment",
                "// --------- Static methods -----------\n/**\n * Access to the global shared environment for the whole JVM. This method\n * allows to access a shared environment, that can be read and written from\n * anywhere.\n * @return A singleton instance of the global environment.\n */\npublic static Environment getGlobalEnvironment() {\n    if (GLOBAL_ENV == null)\n        GLOBAL_ENV = new Environment();\n    return GLOBAL_ENV;\n}"
            ],
            [
                "falseFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> falseFilter() {\n    return new Filter<T>() {\n\n        public boolean isAvailable(T e) {\n            return false;\n        }\n    };\n}"
            ],
            [
                "trueFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> trueFilter() {\n    return new Filter<T>() {\n\n        public boolean isAvailable(T e) {\n            return true;\n        }\n    };\n}"
            ],
            [
                "byAttributeFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> byAttributeFilter(String key, Object expectedValue) {\n    return new ByAttributeFilter<T>(key, expectedValue);\n}"
            ],
            [
                "separateNodeAndEdgeFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element, U extends Element> Filter<Element> separateNodeAndEdgeFilter(Filter<T> nodeFilter, Filter<U> edgeFilter) {\n    return new SeparateNodeEdgeFilter<T, U>(nodeFilter, edgeFilter);\n}"
            ],
            [
                "byExtremitiesFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element, U extends Element> Filter<T> byExtremitiesFilter(Filter<U> f) {\n    return new ExtremitiesFilter<T, U>(f);\n}"
            ],
            [
                "byIdFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> byIdFilter(String idPattern) {\n    return new ByIdFilter<T>(idPattern);\n}"
            ],
            [
                "isContained",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> isContained(final Collection<? extends T> set) {\n    return new Filter<T>() {\n\n        public boolean isAvailable(T e) {\n            return set.contains(e);\n        }\n    };\n}"
            ],
            [
                "isIdContained",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> isIdContained(final Collection<String> set) {\n    return new Filter<T>() {\n\n        public boolean isAvailable(T e) {\n            return set.contains(e.getId());\n        }\n    };\n}"
            ],
            [
                "and",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> and(Filter<T> f1, Filter<T> f2) {\n    return new AndFilter<T>(f1, f2);\n}"
            ],
            [
                "or",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> or(Filter<T> f1, Filter<T> f2) {\n    return new OrFilter<T>(f1, f2);\n}"
            ],
            [
                "xor",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> xor(Filter<T> f1, Filter<T> f2) {\n    return new XorFilter<T>(f1, f2);\n}"
            ],
            [
                "not",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> not(Filter<T> f) {\n    return new NotFilter<T>(f);\n}"
            ],
            [
                "addEscapes",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "/**\n * Replaces unprintable characters by their escaped (or unicode escaped)\n * equivalents in the given string\n */\nprotected static final String addEscapes(String str) {\n    StringBuffer retval = new StringBuffer();\n    char ch;\n    for (int i = 0; i < str.length(); i++) {\n        switch(str.charAt(i)) {\n            case 0:\n                continue;\n            case '\\b':\n                retval.append(\"\\\\b\");\n                continue;\n            case '\\t':\n                retval.append(\"\\\\t\");\n                continue;\n            case '\\n':\n                retval.append(\"\\\\n\");\n                continue;\n            case '\\f':\n                retval.append(\"\\\\f\");\n                continue;\n            case '\\r':\n                retval.append(\"\\\\r\");\n                continue;\n            case '\\\"':\n                retval.append(\"\\\\\\\"\");\n                continue;\n            case '\\'':\n                retval.append(\"\\\\\\'\");\n                continue;\n            case '\\\\':\n                retval.append(\"\\\\\\\\\");\n                continue;\n            default:\n                if ((ch = str.charAt(i)) < 0x20 || ch > 0x7e) {\n                    String s = \"0000\" + Integer.toString(ch, 16);\n                    retval.append(\"\\\\u\" + s.substring(s.length() - 4, s.length()));\n                } else {\n                    retval.append(ch);\n                }\n                continue;\n        }\n    }\n    return retval.toString();\n}"
            ],
            [
                "LexicalError",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "/**\n * Returns a detailed message for the Error when it is thrown by the token\n * manager to indicate a lexical error. Parameters : EOFSeen : indicates if\n * EOF caused the lexical error curLexState : lexical state in which this\n * error occurred errorLine : line number when the error occurred\n * errorColumn : column number when the error occurred errorAfter : prefix\n * that was seen before this error occurred curchar : the offending\n * character Note: You can customize the lexical error message by modifying\n * this method.\n */\nprotected static String LexicalError(boolean EOFSeen, int lexState, int errorLine, int errorColumn, String errorAfter, char curChar) {\n    return (\"Lexical error at line \" + errorLine + \", column \" + errorColumn + \".  Encountered: \" + (EOFSeen ? \"<EOF> \" : (\"\\\"\" + addEscapes(String.valueOf(curChar)) + \"\\\"\") + \" (\" + (int) curChar + \"), \") + \"after : \\\"\" + addEscapes(errorAfter) + \"\\\"\");\n}"
            ],
            [
                "add_escapes",
                "org.graphstream.util.parser",
                "ParseException",
                "/**\n * Used to convert raw characters to their escaped version when these raw\n * version cannot be used as part of an ASCII string literal.\n */\nstatic String add_escapes(String str) {\n    StringBuffer retval = new StringBuffer();\n    char ch;\n    for (int i = 0; i < str.length(); i++) {\n        switch(str.charAt(i)) {\n            case 0:\n                continue;\n            case '\\b':\n                retval.append(\"\\\\b\");\n                continue;\n            case '\\t':\n                retval.append(\"\\\\t\");\n                continue;\n            case '\\n':\n                retval.append(\"\\\\n\");\n                continue;\n            case '\\f':\n                retval.append(\"\\\\f\");\n                continue;\n            case '\\r':\n                retval.append(\"\\\\r\");\n                continue;\n            case '\\\"':\n                retval.append(\"\\\\\\\"\");\n                continue;\n            case '\\'':\n                retval.append(\"\\\\\\'\");\n                continue;\n            case '\\\\':\n                retval.append(\"\\\\\\\\\");\n                continue;\n            default:\n                if ((ch = str.charAt(i)) < 0x20 || ch > 0x7e) {\n                    String s = \"0000\" + Integer.toString(ch, 16);\n                    retval.append(\"\\\\u\" + s.substring(s.length() - 4, s.length()));\n                } else {\n                    retval.append(ch);\n                }\n                continue;\n        }\n    }\n    return retval.toString();\n}"
            ],
            [
                "newToken",
                "org.graphstream.util.parser",
                "Token",
                "/**\n * Returns a new Token object, by default. However, if you want, you can\n * create and return subclass objects based on the value of ofKind. Simply\n * add the cases to the switch for all those special cases. For example, if\n * you have a subclass of Token called IDToken that you want to create if\n * ofKind is ID, simply add something like :\n *\n * case MyParserConstants.ID : return new IDToken(ofKind, image);\n *\n * to the following switch statement. Then you can cast matchedToken\n * variable to the appropriate type and use sit in your lexical actions.\n */\npublic static Token newToken(int ofKind, String image) {\n    switch(ofKind) {\n        default:\n            return new Token(ofKind, image);\n    }\n}"
            ],
            [
                "newToken",
                "org.graphstream.util.parser",
                "Token",
                "public static Token newToken(int ofKind) {\n    return newToken(ofKind, null);\n}"
            ],
            [
                "countStepInFile",
                "org.graphstream.util",
                "StepCounter",
                "/**\n * Count step contains in a file.\n *\n * @param path\n *            path to the file\n * @return count of step event in the file\n * @throws IOException\n * @see org.graphstream.stream.file.FileSourceFactory\n */\npublic static int countStepInFile(String path) throws IOException {\n    StepCounter counter = new StepCounter();\n    FileSource source = FileSourceFactory.sourceFor(path);\n    source.addElementSink(counter);\n    source.readAll(path);\n    return counter.getStepCount();\n}"
            ],
            [
                "GET",
                "org.graphstream.stream.net",
                "HTTPSource",
                "@SuppressWarnings(\"unchecked\")\nprotected static HashMap<String, Object> GET(HttpExchange ex) {\n    HashMap<String, Object> get = new HashMap<String, Object>();\n    String[] args = ex.getRequestURI().getRawQuery().split(\"[&]\");\n    for (String arg : args) {\n        String[] kv = arg.split(\"[=]\");\n        String k, v;\n        k = null;\n        v = null;\n        try {\n            if (kv.length > 0)\n                k = URLDecoder.decode(kv[0], System.getProperty(\"file.encoding\"));\n            if (kv.length > 1)\n                v = URLDecoder.decode(kv[1], System.getProperty(\"file.encoding\"));\n            if (get.containsKey(k)) {\n                Object o = get.get(k);\n                if (o instanceof LinkedList<?>)\n                    ((LinkedList<Object>) o).add(v);\n                else {\n                    LinkedList<Object> l = new LinkedList<Object>();\n                    l.add(o);\n                    l.add(v);\n                    get.put(k, l);\n                }\n            } else {\n                get.put(k, v);\n            }\n        } catch (UnsupportedEncodingException e) {\n            e.printStackTrace();\n        }\n    }\n    return get;\n}"
            ],
            [
                "sinkFor",
                "org.graphstream.stream.file",
                "FileSinkFactory",
                "/**\n * Looks at the file name given and its extension and propose a file output\n * for the format that match this extension.\n *\n * @param filename\n *            The file name where the graph will be written.\n * @return A file sink or null.\n */\npublic static FileSink sinkFor(String filename) {\n    if (filename.indexOf('.') > 0) {\n        String ext = filename.substring(filename.lastIndexOf('.') + 1);\n        ext = ext.toLowerCase();\n        if (ext2sink.containsKey(ext)) {\n            Class<? extends FileSink> fsink = ext2sink.get(ext);\n            try {\n                return fsink.newInstance();\n            } catch (InstantiationException e) {\n                e.printStackTrace();\n            } catch (IllegalAccessException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n    return null;\n}"
            ],
            [
                "formatId",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "protected static String formatId(String id) {\n    return \"node\" + id.replaceAll(\"\\\\W\", \"_\");\n}"
            ],
            [
                "getInt",
                "org.graphstream.stream.file.pajek",
                "PajekContext",
                "protected static int getInt(Token nb) throws ParseException {\n    try {\n        return Integer.parseInt(nb.image);\n    } catch (Exception e) {\n        throw new ParseException(String.format(\"%d:%d: %s not an integer\", nb.beginLine, nb.beginColumn, nb.image));\n    }\n}"
            ],
            [
                "getReal",
                "org.graphstream.stream.file.pajek",
                "PajekContext",
                "protected static double getReal(Token nb) throws ParseException {\n    try {\n        return Double.parseDouble(nb.image);\n    } catch (Exception e) {\n        throw new ParseException(String.format(\"%d:%d: %s not a real\", nb.beginLine, nb.beginColumn, nb.image));\n    }\n}"
            ],
            [
                "toColorValue",
                "org.graphstream.stream.file.pajek",
                "PajekContext",
                "public static String toColorValue(Token R, Token G, Token B) throws ParseException {\n    double r = getReal(R);\n    double g = getReal(G);\n    double b = getReal(B);\n    return String.format(\"rgb(%d, %d, %d)\", (int) (r * 255), (int) (g * 255), (int) (b * 255));\n}"
            ],
            [
                "sourceFor",
                "org.graphstream.stream.file",
                "FileSourceFactory",
                "/**\n * Create a file input for the given file name.\n *\n * <p>\n * This method first tests if the file is a regular file and is readable. If\n * so, it opens it and reads the magic cookie to test the known file formats\n * that can be inferred from their header. If it works, it returns a file\n * input for the format. Else it looks at the file name extension, and\n * returns a file input for the extension. Finally if all fail, it throws a\n * NotFoundException.\n * </p>\n *\n * <p>\n * Notice that this method only creates the file input and does not connect\n * it to a graph.\n * </p>\n *\n * @param fileName\n *            Name of the graph file.\n * @return A graph reader suitable for the fileName graph format.\n * @throws IOException\n *             If the file is not readable or accessible.\n */\npublic static FileSource sourceFor(String fileName) throws IOException {\n    File file = new File(fileName);\n    if (!file.isFile())\n        throw new IOException(\"not a regular file '\" + fileName + \"'\");\n    if (!file.canRead())\n        throw new IOException(\"not a readable file '\" + fileName + \"'\");\n    // Try to read the beginning of the file.\n    RandomAccessFile in = new RandomAccessFile(fileName, \"r\");\n    byte[] b = new byte[10];\n    int n = in.read(b, 0, 10);\n    // System.err.printf( \"[\" );\n    // for( int i=0; i<n; ++i )\n    // {\n    // System.err.printf( \"%c\", (char)b[i] );\n    // }\n    // System.err.printf( \"]%n\" );\n    in.close();\n    // Surely match a DGS file, as DGS files are well done and have a\n    // signature.\n    if (n >= 3 && b[0] == 'D' && b[1] == 'G' && b[2] == 'S') {\n        if (n >= 6 && b[3] == '0' && b[4] == '0') {\n            if (b[5] == '1' || b[5] == '2') {\n                return new FileSourceDGS1And2();\n            } else if (b[5] == '3' || b[5] == '4') {\n                return new FileSourceDGS();\n            }\n        }\n    }\n    // Maybe match a GML file as most GML files begin by the line \"graph [\",\n    // but not sure, you may create a GML file that starts by a comment, an\n    // empty line, with any kind of spaces, etc.\n    if (n >= 7 && b[0] == 'g' && b[1] == 'r' && b[2] == 'a' && b[3] == 'p' && b[4] == 'h' && b[5] == ' ' && b[6] == '[') {\n        return new org.graphstream.stream.file.FileSourceGML();\n    }\n    if (n >= 4 && b[0] == '(' && b[1] == 't' && b[2] == 'l' && b[3] == 'p')\n        return new FileSourceTLP();\n    // The web reader.\n    String flc = fileName.toLowerCase();\n    // If we did not found anything, we try with the filename extension ...\n    if (flc.endsWith(\".dgs\")) {\n        return new FileSourceDGS();\n    }\n    if (flc.endsWith(\".gml\") || flc.endsWith(\".dgml\")) {\n        return new org.graphstream.stream.file.FileSourceGML();\n    }\n    if (flc.endsWith(\".net\")) {\n        return new FileSourcePajek();\n    }\n    if (flc.endsWith(\".chaco\") || flc.endsWith(\".graph\")) {\n        // return new GraphReaderChaco();\n    }\n    if (flc.endsWith(\".dot\")) {\n        return new org.graphstream.stream.file.FileSourceDOT();\n    }\n    if (flc.endsWith(\".edge\")) {\n        return new FileSourceEdge();\n    }\n    if (flc.endsWith(\".lgl\")) {\n        return new FileSourceLGL();\n    }\n    if (flc.endsWith(\".ncol\")) {\n        return new FileSourceNCol();\n    }\n    if (flc.endsWith(\".tlp\")) {\n        return new FileSourceTLP();\n    }\n    if (flc.endsWith(\".xml\")) {\n        String root = getXMLRootElement(fileName);\n        if (root.equalsIgnoreCase(\"gexf\"))\n            return new FileSourceGEXF();\n        return new FileSourceGraphML();\n    }\n    if (flc.endsWith(\".gexf\")) {\n        return new FileSourceGEXF();\n    }\n    return null;\n}"
            ],
            [
                "getXMLRootElement",
                "org.graphstream.stream.file",
                "FileSourceFactory",
                "public static String getXMLRootElement(String fileName) throws IOException {\n    FileReader stream = new FileReader(fileName);\n    XMLEventReader reader;\n    XMLEvent e;\n    String root;\n    try {\n        reader = XMLInputFactory.newInstance().createXMLEventReader(stream);\n        do {\n            e = reader.nextEvent();\n        } while (!e.isStartElement() && !e.isEndDocument());\n        if (e.isEndDocument())\n            throw new IOException(\"document ended before catching root element\");\n        root = e.asStartElement().getName().getLocalPart();\n        reader.close();\n        stream.close();\n        return root;\n    } catch (XMLStreamException ex) {\n        throw new IOException(ex);\n    } catch (FactoryConfigurationError ex) {\n        throw new IOException(ex);\n    }\n}"
            ],
            [
                "formatStringForQuoting",
                "org.graphstream.stream.file",
                "FileSinkDGSUtility",
                "protected static String formatStringForQuoting(String str) {\n    return str.replaceAll(\"(^|[^\\\\\\\\])\\\"\", \"$1\\\\\\\\\\\"\");\n}"
            ],
            [
                "attributeString",
                "org.graphstream.stream.file",
                "FileSinkDGSUtility",
                "protected static String attributeString(String key, Object value, boolean remove) {\n    if (key == null || key.length() == 0)\n        return null;\n    if (remove) {\n        return String.format(\" -\\\"%s\\\"\", key);\n    } else {\n        if (value != null && value.getClass().isArray())\n            return String.format(\" \\\"%s\\\":%s\", key, arrayString(value));\n        else\n            return String.format(\" \\\"%s\\\":%s\", key, valueString(value));\n    }\n}"
            ],
            [
                "arrayString",
                "org.graphstream.stream.file",
                "FileSinkDGSUtility",
                "protected static String arrayString(Object value) {\n    if (value != null && value.getClass().isArray()) {\n        StringBuilder sb = new StringBuilder();\n        sb.append(\"{\");\n        if (Array.getLength(value) == 0)\n            sb.append(\"\\\"\\\"\");\n        else\n            sb.append(arrayString(Array.get(value, 0)));\n        for (int i = 1; i < Array.getLength(value); ++i) sb.append(String.format(\",%s\", arrayString(Array.get(value, i))));\n        sb.append(\"}\");\n        return sb.toString();\n    } else {\n        return valueString(value);\n    }\n}"
            ],
            [
                "valueString",
                "org.graphstream.stream.file",
                "FileSinkDGSUtility",
                "protected static String valueString(Object value) {\n    if (value == null)\n        return \"\\\"\\\"\";\n    if (value instanceof CharSequence) {\n        if (value instanceof String)\n            return String.format(\"\\\"%s\\\"\", formatStringForQuoting((String) value));\n        else\n            return String.format(\"\\\"%s\\\"\", (CharSequence) value);\n    } else if (value instanceof Number) {\n        Number nval = (Number) value;\n        if (value instanceof Integer || value instanceof Short || value instanceof Byte || value instanceof Long)\n            return String.format(Locale.US, \"%d\", nval.longValue());\n        else\n            return String.format(Locale.US, \"%f\", nval.doubleValue());\n    } else if (value instanceof Boolean) {\n        return String.format(Locale.US, \"%b\", ((Boolean) value));\n    } else if (value instanceof Character) {\n        return String.format(\"\\\"%c\\\"\", ((Character) value).charValue());\n    } else if (value instanceof Object[]) {\n        Object[] array = (Object[]) value;\n        int n = array.length;\n        StringBuffer sb = new StringBuffer();\n        if (array.length > 0)\n            sb.append(valueString(array[0]));\n        for (int i = 1; i < n; i++) {\n            sb.append(\",\");\n            sb.append(valueString(array[i]));\n        }\n        return sb.toString();\n    } else if (value instanceof HashMap<?, ?> || value instanceof CompoundAttribute) {\n        HashMap<?, ?> hash;\n        if (value instanceof CompoundAttribute)\n            hash = ((CompoundAttribute) value).toHashMap();\n        else\n            hash = (HashMap<?, ?>) value;\n        return hashToString(hash);\n    } else if (value instanceof Color) {\n        Color c = (Color) value;\n        return String.format(\"#%02X%02X%02X%02X\", c.getRed(), c.getGreen(), c.getBlue(), c.getAlpha());\n    } else {\n        return String.format(\"\\\"%s\\\"\", value.toString());\n    }\n}"
            ],
            [
                "hashToString",
                "org.graphstream.stream.file",
                "FileSinkDGSUtility",
                "protected static String hashToString(HashMap<?, ?> hash) {\n    StringBuilder sb = new StringBuilder();\n    sb.append(\"[ \");\n    for (Object key : hash.keySet()) {\n        sb.append(attributeString(key.toString(), hash.get(key), false));\n        sb.append(\",\");\n    }\n    sb.append(']');\n    return sb.toString();\n}"
            ],
            [
                "encodeObject",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Serializes an object and returns the Base64-encoded\n * version of that serialized object.\n *\n * <p>As of v 2.3, if the object\n * cannot be serialized or there is another error,\n * the method will throw an java.io.IOException. <b>This is new to v2.3!</b>\n * In earlier versions, it just returned a null value, but\n * in retrospect that's a pretty poor way to handle it.</p>\n *\n * The object is not GZip-compressed before being encoded.\n *\n * @param serializableObject The object to encode\n * @return The Base64-encoded object\n * @throws java.io.IOException if there is an error\n * @throws NullPointerException if serializedObject is null\n * @since 1.4\n */\npublic static String encodeObject(java.io.Serializable serializableObject) throws java.io.IOException {\n    return encodeObject(serializableObject, NO_OPTIONS);\n}"
            ],
            [
                "encodeObject",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end encodeObject\n/**\n * Serializes an object and returns the Base64-encoded\n * version of that serialized object.\n *\n * <p>As of v 2.3, if the object\n * cannot be serialized or there is another error,\n * the method will throw an java.io.IOException. <b>This is new to v2.3!</b>\n * In earlier versions, it just returned a null value, but\n * in retrospect that's a pretty poor way to handle it.</p>\n *\n * The object is not GZip-compressed before being encoded.\n * <p>\n * Example options:<pre>\n *   GZIP: gzip-compresses object before encoding it.\n *   DO_BREAK_LINES: break lines at 76 characters\n * </pre>\n * <p>\n * Example: <code>encodeObject( myObj, Base64.GZIP )</code> or\n * <p>\n * Example: <code>encodeObject( myObj, Base64.GZIP | Base64.DO_BREAK_LINES )</code>\n *\n * @param serializableObject The object to encode\n * @param options Specified options\n * @return The Base64-encoded object\n * @see Base64#GZIP\n * @see Base64#DO_BREAK_LINES\n * @throws java.io.IOException if there is an error\n * @since 2.0\n */\npublic static String encodeObject(java.io.Serializable serializableObject, int options) throws java.io.IOException {\n    if (serializableObject == null) {\n        throw new NullPointerException(\"Cannot serialize a null object.\");\n    }\n    // end if: null\n    // Streams\n    java.io.ByteArrayOutputStream baos = null;\n    java.io.OutputStream b64os = null;\n    java.util.zip.GZIPOutputStream gzos = null;\n    java.io.ObjectOutputStream oos = null;\n    try {\n        // ObjectOutputStream -> (GZIP) -> Base64 -> ByteArrayOutputStream\n        baos = new java.io.ByteArrayOutputStream();\n        b64os = new Base64.OutputStream(baos, ENCODE | options);\n        if ((options & GZIP) != 0) {\n            // Gzip\n            gzos = new java.util.zip.GZIPOutputStream(b64os);\n            oos = new java.io.ObjectOutputStream(gzos);\n        } else {\n            // Not gzipped\n            oos = new java.io.ObjectOutputStream(b64os);\n        }\n        oos.writeObject(serializableObject);\n    }// end try\n     catch (java.io.IOException e) {\n        // Catch it and then throw it immediately so that\n        // the finally{} block is called for cleanup.\n        throw e;\n    } finally // end catch\n    {\n        try {\n            oos.close();\n        } catch (Exception e) {\n        }\n        try {\n            gzos.close();\n        } catch (Exception e) {\n        }\n        try {\n            b64os.close();\n        } catch (Exception e) {\n        }\n        try {\n            baos.close();\n        } catch (Exception e) {\n        }\n    }\n    // end finally\n    // Return value according to relevant encoding.\n    try {\n        return new String(baos.toByteArray(), PREFERRED_ENCODING);\n    }// end try\n     catch (java.io.UnsupportedEncodingException uue) {\n        // Fall back to some Java default\n        return new String(baos.toByteArray());\n    }\n    // end catch\n}"
            ],
            [
                "encodeBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end encode\n/**\n * Encodes a byte array into Base64 notation.\n * Does not GZip-compress data.\n *\n * @param source The data to convert\n * @return The data in Base64-encoded form\n * @throws NullPointerException if source array is null\n * @since 1.4\n */\npublic static String encodeBytes(byte[] source) {\n    // Since we're not going to have the GZIP encoding turned on,\n    // we're not going to have an java.io.IOException thrown, so\n    // we should not force the user to have to catch it.\n    String encoded = null;\n    try {\n        encoded = encodeBytes(source, 0, source.length, NO_OPTIONS);\n    } catch (java.io.IOException ex) {\n        assert false : ex.getMessage();\n    }\n    // end catch\n    assert encoded != null;\n    return encoded;\n}"
            ],
            [
                "encodeBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end encodeBytes\n/**\n * Encodes a byte array into Base64 notation.\n * <p>\n * Example options:<pre>\n *   GZIP: gzip-compresses object before encoding it.\n *   DO_BREAK_LINES: break lines at 76 characters\n *     <i>Note: Technically, this makes your encoding non-compliant.</i>\n * </pre>\n * <p>\n * Example: <code>encodeBytes( myData, Base64.GZIP )</code> or\n * <p>\n * Example: <code>encodeBytes( myData, Base64.GZIP | Base64.DO_BREAK_LINES )</code>\n *\n * <p>As of v 2.3, if there is an error with the GZIP stream,\n * the method will throw an java.io.IOException. <b>This is new to v2.3!</b>\n * In earlier versions, it just returned a null value, but\n * in retrospect that's a pretty poor way to handle it.</p>\n *\n * @param source The data to convert\n * @param options Specified options\n * @return The Base64-encoded data as a String\n * @see Base64#GZIP\n * @see Base64#DO_BREAK_LINES\n * @throws java.io.IOException if there is an error\n * @throws NullPointerException if source array is null\n * @since 2.0\n */\npublic static String encodeBytes(byte[] source, int options) throws java.io.IOException {\n    return encodeBytes(source, 0, source.length, options);\n}"
            ],
            [
                "encodeBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end encodeBytes\n/**\n * Encodes a byte array into Base64 notation.\n * Does not GZip-compress data.\n *\n * <p>As of v 2.3, if there is an error,\n * the method will throw an java.io.IOException. <b>This is new to v2.3!</b>\n * In earlier versions, it just returned a null value, but\n * in retrospect that's a pretty poor way to handle it.</p>\n *\n * @param source The data to convert\n * @param off Offset in array where conversion should begin\n * @param len Length of data to convert\n * @return The Base64-encoded data as a String\n * @throws NullPointerException if source array is null\n * @throws IllegalArgumentException if source array, offset, or length are invalid\n * @since 1.4\n */\npublic static String encodeBytes(byte[] source, int off, int len) {\n    // Since we're not going to have the GZIP encoding turned on,\n    // we're not going to have an java.io.IOException thrown, so\n    // we should not force the user to have to catch it.\n    String encoded = null;\n    try {\n        encoded = encodeBytes(source, off, len, NO_OPTIONS);\n    } catch (java.io.IOException ex) {\n        assert false : ex.getMessage();\n    }\n    // end catch\n    assert encoded != null;\n    return encoded;\n}"
            ],
            [
                "encodeBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end encodeBytes\n/**\n * Encodes a byte array into Base64 notation.\n * <p>\n * Example options:<pre>\n *   GZIP: gzip-compresses object before encoding it.\n *   DO_BREAK_LINES: break lines at 76 characters\n *     <i>Note: Technically, this makes your encoding non-compliant.</i>\n * </pre>\n * <p>\n * Example: <code>encodeBytes( myData, Base64.GZIP )</code> or\n * <p>\n * Example: <code>encodeBytes( myData, Base64.GZIP | Base64.DO_BREAK_LINES )</code>\n *\n * <p>As of v 2.3, if there is an error with the GZIP stream,\n * the method will throw an java.io.IOException. <b>This is new to v2.3!</b>\n * In earlier versions, it just returned a null value, but\n * in retrospect that's a pretty poor way to handle it.</p>\n *\n * @param source The data to convert\n * @param off Offset in array where conversion should begin\n * @param len Length of data to convert\n * @param options Specified options\n * @return The Base64-encoded data as a String\n * @see Base64#GZIP\n * @see Base64#DO_BREAK_LINES\n * @throws java.io.IOException if there is an error\n * @throws NullPointerException if source array is null\n * @throws IllegalArgumentException if source array, offset, or length are invalid\n * @since 2.0\n */\npublic static String encodeBytes(byte[] source, int off, int len, int options) throws java.io.IOException {\n    byte[] encoded = encodeBytesToBytes(source, off, len, options);\n    // Return value according to relevant encoding.\n    try {\n        return new String(encoded, PREFERRED_ENCODING);\n    }// end try\n     catch (java.io.UnsupportedEncodingException uue) {\n        return new String(encoded);\n    }\n    // end catch\n}"
            ],
            [
                "encodeBytesToBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end encodeBytes\n/**\n * Similar to {@link #encodeBytes(byte[])} but returns\n * a byte array instead of instantiating a String. This is more efficient\n * if you're working with I/O streams and have large data sets to encode.\n *\n * @param source The data to convert\n * @return The Base64-encoded data as a byte[] (of ASCII characters)\n * @throws NullPointerException if source array is null\n * @since 2.3.1\n */\npublic static byte[] encodeBytesToBytes(byte[] source) {\n    byte[] encoded = null;\n    try {\n        encoded = encodeBytesToBytes(source, 0, source.length, Base64.NO_OPTIONS);\n    } catch (java.io.IOException ex) {\n        assert false : \"IOExceptions only come from GZipping, which is turned off: \" + ex.getMessage();\n    }\n    return encoded;\n}"
            ],
            [
                "encodeBytesToBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Similar to {@link #encodeBytes(byte[], int, int, int)} but returns\n * a byte array instead of instantiating a String. This is more efficient\n * if you're working with I/O streams and have large data sets to encode.\n *\n * @param source The data to convert\n * @param off Offset in array where conversion should begin\n * @param len Length of data to convert\n * @param options Specified options\n * @return The Base64-encoded data as a String\n * @see Base64#GZIP\n * @see Base64#DO_BREAK_LINES\n * @throws java.io.IOException if there is an error\n * @throws NullPointerException if source array is null\n * @throws IllegalArgumentException if source array, offset, or length are invalid\n * @since 2.3.1\n */\npublic static byte[] encodeBytesToBytes(byte[] source, int off, int len, int options) throws java.io.IOException {\n    if (source == null) {\n        throw new NullPointerException(\"Cannot serialize a null array.\");\n    }\n    // end if: null\n    if (off < 0) {\n        throw new IllegalArgumentException(\"Cannot have negative offset: \" + off);\n    }\n    // end if: off < 0\n    if (len < 0) {\n        throw new IllegalArgumentException(\"Cannot have length offset: \" + len);\n    }\n    // end if: len < 0\n    if (off + len > source.length) {\n        throw new IllegalArgumentException(String.format(\"Cannot have offset of %d and length of %d with array of length %d\", off, len, source.length));\n    }\n    // end if: off < 0\n    // Compress?\n    if ((options & GZIP) != 0) {\n        java.io.ByteArrayOutputStream baos = null;\n        java.util.zip.GZIPOutputStream gzos = null;\n        Base64.OutputStream b64os = null;\n        try {\n            // GZip -> Base64 -> ByteArray\n            baos = new java.io.ByteArrayOutputStream();\n            b64os = new Base64.OutputStream(baos, ENCODE | options);\n            gzos = new java.util.zip.GZIPOutputStream(b64os);\n            gzos.write(source, off, len);\n            gzos.close();\n        }// end try\n         catch (java.io.IOException e) {\n            // Catch it and then throw it immediately so that\n            // the finally{} block is called for cleanup.\n            throw e;\n        } finally // end catch\n        {\n            try {\n                gzos.close();\n            } catch (Exception e) {\n            }\n            try {\n                b64os.close();\n            } catch (Exception e) {\n            }\n            try {\n                baos.close();\n            } catch (Exception e) {\n            }\n        }\n        // end finally\n        return baos.toByteArray();\n    } else // end if: compress\n    // Else, don't compress. Better not to use streams at all then.\n    {\n        boolean breakLines = (options & DO_BREAK_LINES) != 0;\n        //int    len43   = len * 4 / 3;\n        //byte[] outBuff = new byte[   ( len43 )                      // Main 4:3\n        //                           + ( (len % 3) > 0 ? 4 : 0 )      // Account for padding\n        //                           + (breakLines ? ( len43 / MAX_LINE_LENGTH ) : 0) ]; // New lines\n        // Try to determine more precisely how big the array needs to be.\n        // If we get it right, we don't have to do an array copy, and\n        // we save a bunch of memory.\n        // Bytes needed for actual encoding\n        int encLen = (len / 3) * 4 + (len % 3 > 0 ? 4 : 0);\n        if (breakLines) {\n            // Plus extra newline characters\n            encLen += encLen / MAX_LINE_LENGTH;\n        }\n        byte[] outBuff = new byte[encLen];\n        int d = 0;\n        int e = 0;\n        int len2 = len - 2;\n        int lineLength = 0;\n        for (; d < len2; d += 3, e += 4) {\n            encode3to4(source, d + off, 3, outBuff, e, options);\n            lineLength += 4;\n            if (breakLines && lineLength >= MAX_LINE_LENGTH) {\n                outBuff[e + 4] = NEW_LINE;\n                e++;\n                lineLength = 0;\n            }\n            // end if: end of line\n        }\n        // en dfor: each piece of array\n        if (d < len) {\n            encode3to4(source, d + off, len - d, outBuff, e, options);\n            e += 4;\n        }\n        // end if: some padding needed\n        // Only resize array if we didn't guess it right.\n        if (e <= outBuff.length - 1) {\n            // If breaking lines and the last byte falls right at\n            // the line length (76 bytes per line), there will be\n            // one extra byte, and the array will need to be resized.\n            // Not too bad of an estimate on array size, I'd say.\n            byte[] finalOut = new byte[e];\n            System.arraycopy(outBuff, 0, finalOut, 0, e);\n            //System.err.println(\"Having to resize array from \" + outBuff.length + \" to \" + e );\n            return finalOut;\n        } else {\n            //System.err.println(\"No need to resize array.\");\n            return outBuff;\n        }\n    }\n    // end else: don't compress\n}"
            ],
            [
                "decode",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end decodeToBytes\n/**\n * Low-level access to decoding ASCII characters in\n * the form of a byte array. <strong>Ignores GUNZIP option, if\n * it's set.</strong> This is not generally a recommended method,\n * although it is used internally as part of the decoding process.\n * Special case: if len = 0, an empty array is returned. Still,\n * if you need more speed and reduced memory footprint (and aren't\n * gzipping), consider this method.\n *\n * @param source The Base64 encoded data\n * @return decoded data\n * @since 2.3.1\n */\npublic static byte[] decode(byte[] source) throws java.io.IOException {\n    byte[] decoded = null;\n    //        try {\n    decoded = decode(source, 0, source.length, Base64.NO_OPTIONS);\n    //        } catch( java.io.IOException ex ) {\n    //            assert false : \"IOExceptions only come from GZipping, which is turned off: \" + ex.getMessage();\n    //        }\n    return decoded;\n}"
            ],
            [
                "decode",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Low-level access to decoding ASCII characters in\n * the form of a byte array. <strong>Ignores GUNZIP option, if\n * it's set.</strong> This is not generally a recommended method,\n * although it is used internally as part of the decoding process.\n * Special case: if len = 0, an empty array is returned. Still,\n * if you need more speed and reduced memory footprint (and aren't\n * gzipping), consider this method.\n *\n * @param source The Base64 encoded data\n * @param off    The offset of where to begin decoding\n * @param len    The length of characters to decode\n * @param options Can specify options such as alphabet type to use\n * @return decoded data\n * @throws java.io.IOException If bogus characters exist in source data\n * @since 1.3\n */\npublic static byte[] decode(byte[] source, int off, int len, int options) throws java.io.IOException {\n    // Lots of error checking and exception throwing\n    if (source == null) {\n        throw new NullPointerException(\"Cannot decode null source array.\");\n    }\n    // end if\n    if (off < 0 || off + len > source.length) {\n        throw new IllegalArgumentException(String.format(\"Source array with length %d cannot have offset of %d and process %d bytes.\", source.length, off, len));\n    }\n    // end if\n    if (len == 0) {\n        return new byte[0];\n    } else if (len < 4) {\n        throw new IllegalArgumentException(\"Base64-encoded string must have at least four characters, but length specified was \" + len);\n    }\n    // end if\n    byte[] DECODABET = getDecodabet(options);\n    // Estimate on array size\n    int len34 = len * 3 / 4;\n    // Upper limit on size of output\n    byte[] outBuff = new byte[len34];\n    // Keep track of where we're writing\n    int outBuffPosn = 0;\n    // Four byte buffer from source, eliminating white space\n    byte[] b4 = new byte[4];\n    // Keep track of four byte input buffer\n    int b4Posn = 0;\n    // Source array counter\n    int i = 0;\n    // Special value from DECODABET\n    byte sbiDecode = 0;\n    for (i = off; i < off + len; i++) {\n        // Loop through source\n        sbiDecode = DECODABET[source[i] & 0xFF];\n        // White space, Equals sign, or legit Base64 character\n        // Note the values such as -5 and -9 in the\n        // DECODABETs at the top of the file.\n        if (sbiDecode >= WHITE_SPACE_ENC) {\n            if (sbiDecode >= EQUALS_SIGN_ENC) {\n                // Save non-whitespace\n                b4[b4Posn++] = source[i];\n                if (b4Posn > 3) {\n                    // Time to decode?\n                    outBuffPosn += decode4to3(b4, 0, outBuff, outBuffPosn, options);\n                    b4Posn = 0;\n                    // If that was the equals sign, break out of 'for' loop\n                    if (source[i] == EQUALS_SIGN) {\n                        break;\n                    }\n                    // end if: equals sign\n                }\n                // end if: quartet built\n            }\n            // end if: equals sign or better\n        } else // end if: white space, equals sign or better\n        {\n            // There's a bad input character in the Base64 stream.\n            throw new java.io.IOException(String.format(\"Bad Base64 input character decimal %d in array position %d\", ((int) source[i]) & 0xFF, i));\n        }\n        // end else:\n    }\n    // each input character\n    byte[] out = new byte[outBuffPosn];\n    System.arraycopy(outBuff, 0, out, 0, outBuffPosn);\n    return out;\n}"
            ],
            [
                "decode",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end decode\n/**\n * Decodes data from Base64 notation, automatically\n * detecting gzip-compressed data and decompressing it.\n *\n * @param s the string to decode\n * @return the decoded data\n * @throws java.io.IOException If there is a problem\n * @since 1.4\n */\npublic static byte[] decode(String s) throws java.io.IOException {\n    return decode(s, NO_OPTIONS);\n}"
            ],
            [
                "decode",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Decodes data from Base64 notation, automatically\n * detecting gzip-compressed data and decompressing it.\n *\n * @param s the string to decode\n * @param options encode options such as URL_SAFE\n * @return the decoded data\n * @throws java.io.IOException if there is an error\n * @throws NullPointerException if <tt>s</tt> is null\n * @since 1.4\n */\npublic static byte[] decode(String s, int options) throws java.io.IOException {\n    if (s == null) {\n        throw new NullPointerException(\"Input string was null.\");\n    }\n    // end if\n    byte[] bytes;\n    try {\n        bytes = s.getBytes(PREFERRED_ENCODING);\n    }// end try\n     catch (java.io.UnsupportedEncodingException uee) {\n        bytes = s.getBytes();\n    }\n    // end catch\n    //</change>\n    // Decode\n    bytes = decode(bytes, 0, bytes.length, options);\n    // Check to see if it's gzip-compressed\n    // GZIP Magic Two-Byte Number: 0x8b1f (35615)\n    boolean dontGunzip = (options & DONT_GUNZIP) != 0;\n    if ((bytes != null) && (bytes.length >= 4) && (!dontGunzip)) {\n        int head = ((int) bytes[0] & 0xff) | ((bytes[1] << 8) & 0xff00);\n        if (java.util.zip.GZIPInputStream.GZIP_MAGIC == head) {\n            java.io.ByteArrayInputStream bais = null;\n            java.util.zip.GZIPInputStream gzis = null;\n            java.io.ByteArrayOutputStream baos = null;\n            byte[] buffer = new byte[2048];\n            int length = 0;\n            try {\n                baos = new java.io.ByteArrayOutputStream();\n                bais = new java.io.ByteArrayInputStream(bytes);\n                gzis = new java.util.zip.GZIPInputStream(bais);\n                while ((length = gzis.read(buffer)) >= 0) {\n                    baos.write(buffer, 0, length);\n                }\n                // end while: reading input\n                // No error? Get new bytes.\n                bytes = baos.toByteArray();\n            }// end try\n             catch (java.io.IOException e) {\n                e.printStackTrace();\n                // Just return originally-decoded bytes\n            } finally // end catch\n            {\n                try {\n                    baos.close();\n                } catch (Exception e) {\n                }\n                try {\n                    gzis.close();\n                } catch (Exception e) {\n                }\n                try {\n                    bais.close();\n                } catch (Exception e) {\n                }\n            }\n            // end finally\n        }\n        // end if: gzipped\n    }\n    // end if: bytes.length >= 2\n    return bytes;\n}"
            ],
            [
                "decodeToObject",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end decode\n/**\n * Attempts to decode Base64 data and deserialize a Java\n * Object within. Returns <tt>null</tt> if there was an error.\n *\n * @param encodedObject The Base64 data to decode\n * @return The decoded and deserialized object\n * @throws NullPointerException if encodedObject is null\n * @throws java.io.IOException if there is a general error\n * @throws ClassNotFoundException if the decoded object is of a\n *         class that cannot be found by the JVM\n * @since 1.5\n */\npublic static Object decodeToObject(String encodedObject) throws java.io.IOException, java.lang.ClassNotFoundException {\n    return decodeToObject(encodedObject, NO_OPTIONS, null);\n}"
            ],
            [
                "decodeToObject",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Attempts to decode Base64 data and deserialize a Java\n * Object within. Returns <tt>null</tt> if there was an error.\n * If <tt>loader</tt> is not null, it will be the class loader\n * used when deserializing.\n *\n * @param encodedObject The Base64 data to decode\n * @param options Various parameters related to decoding\n * @param loader Optional class loader to use in deserializing classes.\n * @return The decoded and deserialized object\n * @throws NullPointerException if encodedObject is null\n * @throws java.io.IOException if there is a general error\n * @throws ClassNotFoundException if the decoded object is of a\n *         class that cannot be found by the JVM\n * @since 2.3.4\n */\npublic static Object decodeToObject(String encodedObject, int options, final ClassLoader loader) throws java.io.IOException, java.lang.ClassNotFoundException {\n    // Decode and gunzip if necessary\n    byte[] objBytes = decode(encodedObject, options);\n    java.io.ByteArrayInputStream bais = null;\n    java.io.ObjectInputStream ois = null;\n    Object obj = null;\n    try {\n        bais = new java.io.ByteArrayInputStream(objBytes);\n        // If no custom class loader is provided, use Java's builtin OIS.\n        if (loader == null) {\n            ois = new java.io.ObjectInputStream(bais);\n        } else // end if: no loader provided\n        // Else make a customized object input stream that uses\n        // the provided class loader.\n        {\n            ois = new java.io.ObjectInputStream(bais) {\n\n                @Override\n                public Class<?> resolveClass(java.io.ObjectStreamClass streamClass) throws java.io.IOException, ClassNotFoundException {\n                    Class<?> c = Class.forName(streamClass.getName(), false, loader);\n                    if (c == null) {\n                        return super.resolveClass(streamClass);\n                    } else {\n                        // Class loader knows of this class.\n                        return c;\n                    }\n                    // end else: not null\n                }\n            };\n            // end ois\n        }\n        // end else: no custom class loader\n        obj = ois.readObject();\n    }// end try\n     catch (java.io.IOException e) {\n        // Catch and throw in order to execute finally{}\n        throw e;\n    }// end catch\n     catch (java.lang.ClassNotFoundException e) {\n        // Catch and throw in order to execute finally{}\n        throw e;\n    } finally // end catch\n    {\n        try {\n            bais.close();\n        } catch (Exception e) {\n        }\n        try {\n            ois.close();\n        } catch (Exception e) {\n        }\n    }\n    // end finally\n    return obj;\n}"
            ],
            [
                "decodeFromFile",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end decodeToFile\n/**\n * Convenience method for reading a base64-encoded\n * file and decoding it.\n *\n * <p>As of v 2.3, if there is a error,\n * the method will throw an java.io.IOException. <b>This is new to v2.3!</b>\n * In earlier versions, it just returned false, but\n * in retrospect that's a pretty poor way to handle it.</p>\n *\n * @param filename Filename for reading encoded data\n * @return decoded byte array\n * @throws java.io.IOException if there is an error\n * @since 2.1\n */\npublic static byte[] decodeFromFile(String filename) throws java.io.IOException {\n    byte[] decodedData = null;\n    Base64.InputStream bis = null;\n    try {\n        // Set up some useful variables\n        java.io.File file = new java.io.File(filename);\n        byte[] buffer = null;\n        int length = 0;\n        int numBytes = 0;\n        // Check for size of file\n        if (file.length() > Integer.MAX_VALUE) {\n            throw new java.io.IOException(\"File is too big for this convenience method (\" + file.length() + \" bytes).\");\n        }\n        // end if: file too big for int index\n        buffer = new byte[(int) file.length()];\n        // Open a stream\n        bis = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(file)), Base64.DECODE);\n        // Read until done\n        while ((numBytes = bis.read(buffer, length, 4096)) >= 0) {\n            length += numBytes;\n        }\n        // end while\n        // Save in a variable to return\n        decodedData = new byte[length];\n        System.arraycopy(buffer, 0, decodedData, 0, length);\n    }// end try\n     catch (java.io.IOException e) {\n        // Catch and release to execute finally{}\n        throw e;\n    } finally // end catch: java.io.IOException\n    {\n        try {\n            bis.close();\n        } catch (Exception e) {\n        }\n    }\n    // end finally\n    return decodedData;\n}"
            ],
            [
                "encodeFromFile",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end decodeFromFile\n/**\n * Convenience method for reading a binary file\n * and base64-encoding it.\n *\n * <p>As of v 2.3, if there is a error,\n * the method will throw an java.io.IOException. <b>This is new to v2.3!</b>\n * In earlier versions, it just returned false, but\n * in retrospect that's a pretty poor way to handle it.</p>\n *\n * @param filename Filename for reading binary data\n * @return base64-encoded string\n * @throws java.io.IOException if there is an error\n * @since 2.1\n */\npublic static String encodeFromFile(String filename) throws java.io.IOException {\n    String encodedData = null;\n    Base64.InputStream bis = null;\n    try {\n        // Set up some useful variables\n        java.io.File file = new java.io.File(filename);\n        // Need max() for math on small files (v2.2.1); Need +1 for a few corner cases (v2.3.5)\n        byte[] buffer = new byte[Math.max((int) (file.length() * 1.4 + 1), 40)];\n        int length = 0;\n        int numBytes = 0;\n        // Open a stream\n        bis = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(file)), Base64.ENCODE);\n        // Read until done\n        while ((numBytes = bis.read(buffer, length, 4096)) >= 0) {\n            length += numBytes;\n        }\n        // end while\n        // Save in a variable to return\n        encodedData = new String(buffer, 0, length, Base64.PREFERRED_ENCODING);\n    }// end try\n     catch (java.io.IOException e) {\n        // Catch and release to execute finally{}\n        throw e;\n    } finally // end catch: java.io.IOException\n    {\n        try {\n            bis.close();\n        } catch (Exception e) {\n        }\n    }\n    // end finally\n    return encodedData;\n}"
            ],
            [
                "unmutableGraph",
                "org.graphstream.graph.implementations",
                "Graphs",
                "public static Graph unmutableGraph(Graph g) {\n    return null;\n}"
            ],
            [
                "synchronizedGraph",
                "org.graphstream.graph.implementations",
                "Graphs",
                "/**\n * Synchronizes a graph. The returned graph can be accessed and modified by\n * several threads. You lose genericity in methods returning edge or node\n * because each element (graph, nodes and edges) is wrapped into a\n * synchronized wrapper which breaks original elements class.\n *\n * @param g\n *            the graph to synchronize\n * @return a synchronized wrapper for g\n */\npublic static Graph synchronizedGraph(Graph g) {\n    return new SynchronizedGraph(g);\n}"
            ],
            [
                "merge",
                "org.graphstream.graph.implementations",
                "Graphs",
                "/**\n * Merge several graphs in one. A new graph is created, that will contain\n * the result. The method will try to create a graph of the same class that\n * the first graph to merge (it needs to have a constructor with a String).\n * Else, a MultiGraph is used.\n *\n * @param graphs\n *            graphs to merge\n * @return merge result\n */\npublic static Graph merge(Graph... graphs) {\n    if (graphs == null)\n        return new DefaultGraph(\"void-merge\");\n    String id = \"merge\";\n    for (Graph g : graphs) id += \"-\" + g.getId();\n    Graph result;\n    try {\n        Class<? extends Graph> cls = graphs[0].getClass();\n        result = cls.getConstructor(String.class).newInstance(id);\n    } catch (Exception e) {\n        logger.warning(String.format(\"Cannot create a graph of %s.\", graphs[0].getClass().getName()));\n        result = new MultiGraph(id);\n    }\n    mergeIn(result, graphs);\n    return result;\n}"
            ],
            [
                "clone",
                "org.graphstream.graph.implementations",
                "Graphs",
                "/**\n * Clone a given graph with same node/edge structure and same attributes.\n *\n * @param g\n *            the graph to clone\n * @return a copy of g\n */\npublic static Graph clone(Graph g) {\n    Graph copy;\n    try {\n        Class<? extends Graph> cls = g.getClass();\n        copy = cls.getConstructor(String.class).newInstance(g.getId());\n    } catch (Exception e) {\n        logger.warning(String.format(\"Cannot create a graph of %s.\", g.getClass().getName()));\n        copy = new AdjacencyListGraph(g.getId());\n    }\n    copyAttributes(g, copy);\n    for (int i = 0; i < g.getNodeCount(); i++) {\n        Node source = g.getNode(i);\n        Node target = copy.addNode(source.getId());\n        copyAttributes(source, target);\n    }\n    for (int i = 0; i < g.getEdgeCount(); i++) {\n        Edge source = g.getEdge(i);\n        Edge target = copy.addEdge(source.getId(), source.getSourceNode().getId(), source.getTargetNode().getId(), source.isDirected());\n        copyAttributes(source, target);\n    }\n    return copy;\n}"
            ]
        ],
        "tokensProjectClassesNonPrivateStaticAttributes": [
            [
                "version16",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static boolean version16 = false;"
            ],
            [
                "predefFractions",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[][] predefFractions = new float[11][];"
            ],
            [
                "predefFractions2",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions2 = { 0f, 1f };"
            ],
            [
                "predefFractions3",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions3 = { 0f, 0.5f, 1f };"
            ],
            [
                "predefFractions4",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions4 = { 0f, 0.33f, 0.66f, 1f };"
            ],
            [
                "predefFractions5",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions5 = { 0f, 0.25f, 0.5f, 0.75f, 1f };"
            ],
            [
                "predefFractions6",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions6 = { 0f, 0.2f, 0.4f, 0.6f, 0.8f, 1f };"
            ],
            [
                "predefFractions7",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions7 = { 0f, 0.1666f, 0.3333f, 0.4999f, 0.6666f, 0.8333f, 1f };"
            ],
            [
                "predefFractions8",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions8 = { 0f, 0.1428f, 0.2856f, 0.4284f, 0.5712f, 0.7140f, 0.8568f, 1f };"
            ],
            [
                "predefFractions9",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions9 = { 0f, 0.125f, 0.25f, 0.375f, 0.5f, 0.625f, .75f, 0.875f, 1f };"
            ],
            [
                "predefFractions10",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions10 = { 0f, 0.1111f, 0.2222f, 0.3333f, 0.4444f, 0.5555f, 0.6666f, 0.7777f, 0.8888f, 1f };"
            ],
            [
                "defaultImageCache",
                "org.graphstream.ui.swingViewer.util",
                "ImageCache",
                "/**\n * The default singleton image cache instance.\n */\nprotected static ImageCache defaultImageCache;"
            ],
            [
                "dots",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "protected static float[] dots = { 1f, 1f };"
            ],
            [
                "dashes",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "protected static float[] dashes = { 3f, 3f };"
            ],
            [
                "defaultFontCache",
                "org.graphstream.ui.swingViewer.util",
                "FontCache",
                "/**\n * The default font cache.\n */\npublic static FontCache defaultFontCache;"
            ],
            [
                "NULL_POINT2",
                "org.graphstream.ui.geom",
                "Point2",
                "// Attributes -- Shared\n/**\n * Specific point at (0,0).\n */\npublic static final Point2 NULL_POINT2 = new Point2(0, 0);"
            ],
            [
                "NULL_POINT3",
                "org.graphstream.ui.geom",
                "Point3",
                "// Attributes -- Shared\n/**\n * Specific point at (0,0,0).\n */\npublic static final Point3 NULL_POINT3 = new Point3(0, 0, 0);"
            ],
            [
                "DEFAULT_VIEW_ID",
                "org.graphstream.ui.view",
                "Viewer",
                "// Attributes\n/**\n * Name of the default view.\n */\npublic static String DEFAULT_VIEW_ID = \"defaultView\";"
            ],
            [
                "jjbitVec0",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };"
            ],
            [
                "jjnextStates",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "static final int[] jjnextStates = { 48, 49, 52, 54, 55, 65, 69, 2, 4, 6, 10, 16, 23, 33, 50, 52, 54, 55, 57, 58, 60, 61, 66, 68, 70, 71 };"
            ],
            [
                "jjstrLiteralImages",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "/**\n * Token literal values.\n */\npublic static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, \"\\56\", \"\\173\", \"\\175\", \"\\50\", \"\\51\", \"\\43\", \"\\72\", \"\\73\", \"\\54\", \"\\162\\147\\142\\141\", \"\\162\\147\\142\", null, null, null, \"\\165\\162\\154\", \"\\147\\162\\141\\160\\150\", \"\\145\\144\\147\\145\", \"\\156\\157\\144\\145\", \"\\163\\160\\162\\151\\164\\145\", \"\\146\\151\\154\\154\\55\\155\\157\\144\\145\", \"\\146\\151\\154\\154\\55\\143\\157\\154\\157\\162\", \"\\146\\151\\154\\154\\55\\151\\155\\141\\147\\145\", \"\\163\\164\\162\\157\\153\\145\\55\\155\\157\\144\\145\", \"\\163\\164\\162\\157\\153\\145\\55\\143\\157\\154\\157\\162\", \"\\163\\164\\162\\157\\153\\145\\55\\167\\151\\144\\164\\150\", \"\\163\\150\\141\\144\\157\\167\\55\\155\\157\\144\\145\", \"\\163\\150\\141\\144\\157\\167\\55\\143\\157\\154\\157\\162\", \"\\163\\150\\141\\144\\157\\167\\55\\167\\151\\144\\164\\150\", \"\\163\\150\\141\\144\\157\\167\\55\\157\\146\\146\\163\\145\\164\", \"\\164\\145\\170\\164\\55\\155\\157\\144\\145\", \"\\164\\145\\170\\164\\55\\143\\157\\154\\157\\162\", \"\\164\\145\\170\\164\\55\\163\\164\\171\\154\\145\", \"\\164\\145\\170\\164\\55\\146\\157\\156\\164\", \"\\164\\145\\170\\164\\55\\163\\151\\172\\145\", \"\\164\\145\\170\\164\\55\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\\55\\155\\157\\144\\145\", \"\\164\\145\\170\\164\\55\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\", \"\\164\\145\\170\\164\\55\\142\\141\\143\\153\\147\\162\\157\\165\\156\\144\\55\\155\\157\\144\\145\", \"\\164\\145\\170\\164\\55\\142\\141\\143\\153\\147\\162\\157\\165\\156\\144\\55\\143\\157\\154\\157\\162\", \"\\164\\145\\170\\164\\55\\157\\146\\146\\163\\145\\164\", \"\\164\\145\\170\\164\\55\\160\\141\\144\\144\\151\\156\\147\", \"\\151\\143\\157\\156\\55\\155\\157\\144\\145\", \"\\151\\143\\157\\156\", \"\\160\\141\\144\\144\\151\\156\\147\", \"\\172\\55\\151\\156\\144\\145\\170\", \"\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\\55\\155\\157\\144\\145\", \"\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\", \"\\163\\150\\141\\160\\145\", \"\\163\\151\\172\\145\", \"\\163\\151\\172\\145\\55\\155\\157\\144\\145\", \"\\163\\150\\141\\160\\145\\55\\160\\157\\151\\156\\164\\163\", \"\\164\\145\\170\\164\\55\\141\\154\\151\\147\\156\\155\\145\\156\\164\", \"\\152\\143\\157\\155\\160\\157\\156\\145\\156\\164\", \"\\141\\162\\162\\157\\167\\55\\151\\155\\141\\147\\145\", \"\\141\\162\\162\\157\\167\\55\\163\\151\\172\\145\", \"\\141\\162\\162\\157\\167\\55\\163\\150\\141\\160\\145\", \"\\163\\160\\162\\151\\164\\145\\55\\157\\162\\151\\145\\156\\164\\141\\164\\151\\157\\156\", \"\\143\\141\\156\\166\\141\\163\\55\\143\\157\\154\\157\\162\", \"\\160\\154\\141\\151\\156\", \"\\144\\171\\156\\55\\160\\154\\141\\151\\156\", \"\\144\\171\\156\\55\\163\\151\\172\\145\", \"\\144\\171\\156\\55\\151\\143\\157\\156\", \"\\144\\141\\163\\150\\145\\163\", \"\\144\\157\\164\\163\", \"\\144\\157\\165\\142\\154\\145\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\144\\151\\141\\147\\157\\156\\141\\154\\61\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\144\\151\\141\\147\\157\\156\\141\\154\\62\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\150\\157\\162\\151\\172\\157\\156\\164\\141\\154\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\162\\141\\144\\151\\141\\154\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\166\\145\\162\\164\\151\\143\\141\\154\", \"\\150\\151\\144\\144\\145\\156\", \"\\151\\155\\141\\147\\145\\55\\164\\151\\154\\145\\144\", \"\\151\\155\\141\\147\\145\\55\\163\\143\\141\\154\\145\\144\", \"\\151\\155\\141\\147\\145\\55\\163\\143\\141\\154\\145\\144\\55\\162\\141\\164\\151\\157\\55\\155\\141\\170\", \"\\151\\155\\141\\147\\145\\55\\163\\143\\141\\154\\145\\144\\55\\162\\141\\164\\151\\157\\55\\155\\151\\156\", \"\\156\\157\\156\\145\", \"\\156\\157\\162\\155\\141\\154\", \"\\164\\162\\165\\156\\143\\141\\164\\145\\144\", \"\\172\\157\\157\\155\\55\\162\\141\\156\\147\\145\", \"\\141\\164\\55\\172\\157\\157\\155\", \"\\165\\156\\144\\145\\162\\55\\172\\157\\157\\155\", \"\\157\\166\\145\\162\\55\\172\\157\\157\\155\", \"\\172\\157\\157\\155\\163\", \"\\146\\151\\164\", \"\\142\\157\\154\\144\", \"\\142\\157\\154\\144\\55\\151\\164\\141\\154\\151\\143\", \"\\151\\164\\141\\154\\151\\143\", \"\\141\\154\\157\\156\\147\", \"\\141\\164\\55\\154\\145\\146\\164\", \"\\141\\164\\55\\162\\151\\147\\150\\164\", \"\\143\\145\\156\\164\\145\\162\", \"\\154\\145\\146\\164\", \"\\162\\151\\147\\150\\164\", \"\\165\\156\\144\\145\\162\", \"\\141\\142\\157\\166\\145\", \"\\152\\165\\163\\164\\151\\146\\171\", \"\\143\\151\\162\\143\\154\\145\", \"\\164\\162\\151\\141\\156\\147\\154\\145\", \"\\146\\162\\145\\145\\160\\154\\141\\156\\145\", \"\\164\\145\\170\\164\\55\\142\\157\\170\", \"\\164\\145\\170\\164\\55\\162\\157\\165\\156\\144\\145\\144\\55\\142\\157\\170\", \"\\164\\145\\170\\164\\55\\143\\151\\162\\143\\154\\145\", \"\\164\\145\\170\\164\\55\\144\\151\\141\\155\\157\\156\\144\", \"\\164\\145\\170\\164\\55\\160\\141\\162\\141\\147\\162\\141\\160\\150\", \"\\142\\157\\170\", \"\\162\\157\\165\\156\\144\\145\\144\\55\\142\\157\\170\", \"\\143\\162\\157\\163\\163\", \"\\144\\151\\141\\155\\157\\156\\144\", \"\\160\\157\\154\\171\\147\\157\\156\", \"\\142\\165\\164\\164\\157\\156\", \"\\164\\145\\170\\164\\55\\146\\151\\145\\154\\144\", \"\\160\\141\\156\\145\\154\", \"\\154\\151\\156\\145\", \"\\160\\157\\154\\171\\154\\151\\156\\145\", \"\\160\\157\\154\\171\\154\\151\\156\\145\\55\\163\\143\\141\\154\\145\\144\", \"\\141\\156\\147\\154\\145\", \"\\143\\165\\142\\151\\143\\55\\143\\165\\162\\166\\145\", \"\\142\\154\\157\\142\", \"\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\114\\55\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\150\\157\\162\\151\\172\\157\\156\\164\\141\\154\\55\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\166\\145\\162\\164\\151\\143\\141\\154\\55\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\141\\162\\162\\157\\167\", \"\\146\\154\\157\\167\", \"\\160\\151\\145\\55\\143\\150\\141\\162\\164\", \"\\151\\155\\141\\147\\145\", \"\\151\\155\\141\\147\\145\\163\", \"\\146\\162\\157\\155\", \"\\156\\157\\144\\145\\60\", \"\\164\\157\", \"\\156\\157\\144\\145\\61\", \"\\160\\162\\157\\152\\145\\143\\164\\151\\157\\156\", \"\\143\\154\\151\\143\\153\\145\\144\", \"\\163\\145\\154\\145\\143\\164\\145\\144\", null, null };"
            ],
            [
                "lexStateNames",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "/**\n * Lexer state names.\n */\npublic static final String[] lexStateNames = { \"DEFAULT\" };"
            ],
            [
                "jjtoToken",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "static final long[] jjtoToken = { 0xfffffffffffffe01L, 0xffffffffffffffffL, 0xffffL };"
            ],
            [
                "jjtoSkip",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "static final long[] jjtoSkip = { 0x1eL, 0x0L, 0x0L };"
            ],
            [
                "colorMap",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "// Static\n/**\n * A set of colour names mapped to real AWT Colour objects.\n */\nprotected static HashMap<String, Color> colorMap;"
            ],
            [
                "sharpColor1",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Pattern to ensure a \"#FFFFFF\" colour is recognised.\n */\nprotected static Pattern sharpColor1, sharpColor2;"
            ],
            [
                "sharpColor2",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Pattern to ensure a \"#FFFFFF\" colour is recognised.\n */\nprotected static Pattern sharpColor1, sharpColor2;"
            ],
            [
                "cssColor",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Pattern to ensure a CSS style \"rgb(1,2,3)\" colour is recognised.\n */\nprotected static Pattern cssColor;"
            ],
            [
                "cssColorA",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Pattern to ensure a CSS style \"rgba(1,2,3,4)\" colour is recognised.\n */\nprotected static Pattern cssColorA;"
            ],
            [
                "awtColor",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Pattern to ensure that java.awt.Color.toString() strings are recognised\n * as colour.\n */\nprotected static Pattern awtColor;"
            ],
            [
                "hexaColor",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Pattern to ensure an hexadecimal number is a recognised colour.\n */\nprotected static Pattern hexaColor;"
            ],
            [
                "numberUnit",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Pattern to ensure a string is a Value in various units.\n */\nprotected static Pattern numberUnit, number;"
            ],
            [
                "number",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Pattern to ensure a string is a Value in various units.\n */\nprotected static Pattern numberUnit, number;"
            ],
            [
                "acceptedAttribute",
                "org.graphstream.ui.graphicGraph",
                "GraphicElement",
                "// Overriding of standard attribute changing to filter them.\nprotected static Pattern acceptedAttribute;"
            ],
            [
                "DEFAULT_AN_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_AN_FORMAT = \"%prefix%[%sourceId%:%timeId%] add node \\\"%nodeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_CNA_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CNA_FORMAT = \"%prefix%[%sourceId%:%timeId%] set node \\\"%nodeId%\\\" +\\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CNC_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CNC_FORMAT = \"%prefix%[%sourceId%:%timeId%] set node \\\"%nodeId%\\\" \\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CNR_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CNR_FORMAT = \"%prefix%[%sourceId%:%timeId%] set node \\\"%nodeId%\\\" -\\\"%attributeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_DN_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_DN_FORMAT = \"%prefix%[%sourceId%:%timeId%] remove node \\\"%nodeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_AE_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_AE_FORMAT = \"%prefix%[%sourceId%:%timeId%] add edge \\\"%edgeId%\\\" : \\\"%source%\\\" -- \\\"%target%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_CEA_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CEA_FORMAT = \"%prefix%[%sourceId%:%timeId%] set edge \\\"%edgeId%\\\" +\\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CEC_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CEC_FORMAT = \"%prefix%[%sourceId%:%timeId%] set edge \\\"%edgeId%\\\" \\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CER_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CER_FORMAT = \"%prefix%[%sourceId%:%timeId%] set edge \\\"%edgeId%\\\" -\\\"%attributeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_DE_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_DE_FORMAT = \"%prefix%[%sourceId%:%timeId%] remove edge \\\"%edgeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_CGA_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CGA_FORMAT = \"%prefix%[%sourceId%:%timeId%] set +\\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CGC_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CGC_FORMAT = \"%prefix%[%sourceId%:%timeId%] set \\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CGR_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CGR_FORMAT = \"%prefix%[%sourceId%:%timeId%] set -\\\"%attributeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_CL_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CL_FORMAT = \"%prefix%[%sourceId%:%timeId%] clear%suffix%\";"
            ],
            [
                "DEFAULT_ST_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_ST_FORMAT = \"%prefix%[%sourceId%:%timeId%] step %step% begins%suffix%\";"
            ],
            [
                "GLOBAL_ENV",
                "org.graphstream.util",
                "Environment",
                "// --------- Static attributes ---------\n/**\n * Global environment for the whole JVM. This global environment is\n * available <b>and editable</b> from everywhere. It is create as soon as\n * the {@link #getGlobalEnvironment()} static method is called if this field\n * was not yet initialized by any other mean.\n * @see #getGlobalEnvironment()\n */\npublic static Environment GLOBAL_ENV;"
            ],
            [
                "LEXICAL_ERROR",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "/*\n\t * Ordinals for various reasons why an Error of this type can be thrown.\n\t */\n/**\n * Lexical error occurred.\n */\npublic static final int LEXICAL_ERROR = 0;"
            ],
            [
                "STATIC_LEXER_ERROR",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "/**\n * An attempt was made to create a second instance of a static token\n * manager.\n */\npublic static final int STATIC_LEXER_ERROR = 1;"
            ],
            [
                "INVALID_LEXICAL_STATE",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "/**\n * Tried to change to an invalid lexical state.\n */\npublic static final int INVALID_LEXICAL_STATE = 2;"
            ],
            [
                "LOOP_DETECTED",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "/**\n * Detected (and bailed out of) an infinite loop in the token manager.\n */\npublic static final int LOOP_DETECTED = 3;"
            ],
            [
                "staticFlag",
                "org.graphstream.util.parser",
                "SimpleCharStream",
                "/**\n * Whether parser is static.\n */\npublic static final boolean staticFlag = false;"
            ],
            [
                "ABBREVIATED_WEEKDAY_NAME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent ABBREVIATED_WEEKDAY_NAME = new NotImplementedComponent(\"%a\", \"\\\\w+[.]\");"
            ],
            [
                "FULL_WEEKDAY_NAME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent FULL_WEEKDAY_NAME = new NotImplementedComponent(\"%A\", \"\\\\w+\");"
            ],
            [
                "ABBREVIATED_MONTH_NAME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent ABBREVIATED_MONTH_NAME = new NotImplementedComponent(\"%b\", \"\\\\w+[.]\");"
            ],
            [
                "FULL_MONTH_NAME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent FULL_MONTH_NAME = new NotImplementedComponent(\"%B\", \"\\\\w+\");"
            ],
            [
                "LOCALE_DATE_AND_TIME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent LOCALE_DATE_AND_TIME = new NotImplementedComponent(\"%c\", null);"
            ],
            [
                "CENTURY",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent CENTURY = new NotImplementedComponent(\"%C\", \"\\\\d\\\\d\");"
            ],
            [
                "DAY_OF_MONTH_2_DIGITS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DAY_OF_MONTH_2_DIGITS = new FieldComponent(\"%d\", \"[012]\\\\d|3[01]\", Calendar.DAY_OF_MONTH, \"%02d\");"
            ],
            [
                "DATE",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DATE = new AliasComponent(\"%D\", \"%m/%d/%y\");"
            ],
            [
                "DAY_OF_MONTH",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DAY_OF_MONTH = new FieldComponent(\"%e\", \"\\\\d|[12]\\\\d|3[01]\", Calendar.DAY_OF_MONTH, \"%2d\");"
            ],
            [
                "DATE_ISO8601",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DATE_ISO8601 = new AliasComponent(\"%F\", \"%Y-%m-%d\");"
            ],
            [
                "WEEK_BASED_YEAR_2_DIGITS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent WEEK_BASED_YEAR_2_DIGITS = new FieldComponent(\"%g\", \"\\\\d\\\\d\", Calendar.YEAR, \"%02d\");"
            ],
            [
                "WEEK_BASED_YEAR_4_DIGITS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent WEEK_BASED_YEAR_4_DIGITS = new FieldComponent(\"%G\", \"\\\\d{4}\", Calendar.YEAR, \"%04d\");"
            ],
            [
                "ABBREVIATED_MONTH_NAME_ALIAS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent ABBREVIATED_MONTH_NAME_ALIAS = new AliasComponent(\"%h\", \"%b\");"
            ],
            [
                "HOUR_OF_DAY",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent HOUR_OF_DAY = new FieldComponent(\"%H\", \"[01]\\\\d|2[0123]\", Calendar.HOUR_OF_DAY, \"%02d\");"
            ],
            [
                "HOUR",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent HOUR = new FieldComponent(\"%I\", \"0\\\\d|1[012]\", Calendar.HOUR, \"%02d\");"
            ],
            [
                "DAY_OF_YEAR",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DAY_OF_YEAR = new FieldComponent(\"%j\", \"[012]\\\\d\\\\d|3[0-5]\\\\d|36[0-6]\", Calendar.DAY_OF_YEAR, \"%03d\");"
            ],
            [
                "MILLISECOND",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent MILLISECOND = new FieldComponent(\"%k\", \"\\\\d{3}\", Calendar.MILLISECOND, \"%03d\");"
            ],
            [
                "EPOCH",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent EPOCH = new EpochComponent();"
            ],
            [
                "MONTH",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent MONTH = new FieldComponent(\"%m\", \"0[1-9]|1[012]\", Calendar.MONTH, -1, \"%02d\");"
            ],
            [
                "MINUTE",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent MINUTE = new FieldComponent(\"%M\", \"[0-5]\\\\d\", Calendar.MINUTE, \"%02d\");"
            ],
            [
                "NEW_LINE",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent NEW_LINE = new AliasComponent(\"%n\", \"\\n\");"
            ],
            [
                "AM_PM",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent AM_PM = new AMPMComponent();"
            ],
            [
                "LOCALE_CLOCK_TIME_12_HOUR",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent LOCALE_CLOCK_TIME_12_HOUR = new NotImplementedComponent(\"%r\", \"\");"
            ],
            [
                "HOUR_AND_MINUTE",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent HOUR_AND_MINUTE = new AliasComponent(\"%R\", \"%H:%M\");"
            ],
            [
                "SECOND",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent SECOND = new FieldComponent(\"%S\", \"[0-5]\\\\d|60\", Calendar.SECOND, \"%02d\");"
            ],
            [
                "TABULATION",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent TABULATION = new AliasComponent(\"%t\", \"\\t\");"
            ],
            [
                "TIME_ISO8601",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent TIME_ISO8601 = new AliasComponent(\"%T\", \"%H:%M:%S\");"
            ],
            [
                "DAY_OF_WEEK_1_7",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DAY_OF_WEEK_1_7 = new FieldComponent(\"%u\", \"[1-7]\", Calendar.DAY_OF_WEEK, -1, \"%1d\");"
            ],
            [
                "WEEK_OF_YEAR_FROM_SUNDAY",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent WEEK_OF_YEAR_FROM_SUNDAY = new FieldComponent(\"%U\", \"[0-4]\\\\d|5[0123]\", Calendar.WEEK_OF_YEAR, 1, \"%2d\");"
            ],
            [
                "WEEK_NUMBER_ISO8601",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent WEEK_NUMBER_ISO8601 = new NotImplementedComponent(\"%V\", \"0[1-9]|[2-4]\\\\d|5[0123]\");"
            ],
            [
                "DAY_OF_WEEK_0_6",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DAY_OF_WEEK_0_6 = new FieldComponent(\"%w\", \"[0-6]\", Calendar.DAY_OF_WEEK, \"%01d\");"
            ],
            [
                "WEEK_OF_YEAR_FROM_MONDAY",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent WEEK_OF_YEAR_FROM_MONDAY = new FieldComponent(\"%W\", \"[0-4]\\\\d|5[0123]\", Calendar.WEEK_OF_YEAR, \"%02d\");"
            ],
            [
                "LOCALE_DATE_REPRESENTATION",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent LOCALE_DATE_REPRESENTATION = new NotImplementedComponent(\"%x\", \"\");"
            ],
            [
                "LOCALE_TIME_REPRESENTATION",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent LOCALE_TIME_REPRESENTATION = new NotImplementedComponent(\"%X\", \"\");"
            ],
            [
                "YEAR_2_DIGITS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent YEAR_2_DIGITS = new FieldComponent(\"%y\", \"\\\\d\\\\d\", Calendar.YEAR, \"%02d\");"
            ],
            [
                "YEAR_4_DIGITS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent YEAR_4_DIGITS = new FieldComponent(\"%Y\", \"\\\\d{4}\", Calendar.YEAR, \"%04d\");"
            ],
            [
                "UTC_OFFSET",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent UTC_OFFSET = new UTCOffsetComponent();"
            ],
            [
                "LOCALE_TIME_ZONE_NAME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent LOCALE_TIME_ZONE_NAME = new NotImplementedComponent(\"%Z\", \"\\\\w*\");"
            ],
            [
                "PERCENT",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent PERCENT = new AliasComponent(\"%%\", \"%\");"
            ],
            [
                "jjbitVec0",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };"
            ],
            [
                "jjnextStates",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "static final int[] jjnextStates = { 5, 6, 8, 9, 13, 14 };"
            ],
            [
                "jjstrLiteralImages",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "/**\n * Token literal values.\n */\npublic static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, \"\\133\", \"\\135\", null, null, null, null, null, null };"
            ],
            [
                "lexStateNames",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "/**\n * Lexer state names.\n */\npublic static final String[] lexStateNames = { \"DEFAULT\" };"
            ],
            [
                "jjtoToken",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "static final long[] jjtoToken = { 0xff01L };"
            ],
            [
                "jjtoSkip",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "static final long[] jjtoSkip = { 0x1eL };"
            ],
            [
                "jjbitVec0",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };"
            ],
            [
                "jjnextStates",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "static final int[] jjnextStates = { 54, 11, 12, 15, 17, 18, 1, 2, 5, 47, 52, 8, 9, 20, 21 };"
            ],
            [
                "jjstrLiteralImages",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "/**\n * Token literal values.\n */\npublic static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, null, \"\\50\", \"\\51\", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null };"
            ],
            [
                "lexStateNames",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "/**\n * Lexer state names.\n */\npublic static final String[] lexStateNames = { \"DEFAULT\" };"
            ],
            [
                "jjtoToken",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "static final long[] jjtoToken = { 0xffffc01L };"
            ],
            [
                "jjtoSkip",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "static final long[] jjtoSkip = { 0x7eL };"
            ],
            [
                "XYZ_ATTR",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "/**\n * Node attribute storing coordinates.\n */\npublic static final String XYZ_ATTR = \"xyz\";"
            ],
            [
                "WIDTH_ATTR",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "/**\n * Graph attribute storing width of the TikZ picture.\n */\npublic static final String WIDTH_ATTR = \"ui.tikz.width\";"
            ],
            [
                "HEIGHT_ATTR",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "/**\n * Graph attribute storing height of the TikZ picture.\n */\npublic static final String HEIGHT_ATTR = \"ui.tikz.height\";"
            ],
            [
                "DEFAULT_WIDTH",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "public static final double DEFAULT_WIDTH = 10;"
            ],
            [
                "DEFAULT_HEIGHT",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "public static final double DEFAULT_HEIGHT = 10;"
            ],
            [
                "DISPLAY_MIN_SIZE_IN_MM",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "/**\n * Define the default minimum size of nodes when using a dynamic size. This\n * size is in millimeter.\n */\npublic static final double DISPLAY_MIN_SIZE_IN_MM = 2;"
            ],
            [
                "DISPLAY_MAX_SIZE_IN_MM",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "/**\n * Define the default maximum size of nodes when using a dynamic size. This\n * size is in millimeter.\n */\npublic static final double DISPLAY_MAX_SIZE_IN_MM = 10;"
            ],
            [
                "jjbitVec0",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };"
            ],
            [
                "jjnextStates",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "static final int[] jjnextStates = { 21, 27, 8, 10, 11, 18, 19, 22, 23, 26, 1, 2, 13, 14 };"
            ],
            [
                "jjstrLiteralImages",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "/**\n * Token literal values.\n */\npublic static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, null, \"\\133\", \"\\135\", \"\\173\", \"\\175\", \"\\72\", \"\\54\", \"\\75\", null, null, null, null, null, null, null, null, null, null, \"\\73\", null, null, null, null, null, null, null, null, null, \"\\137\" };"
            ],
            [
                "lexStateNames",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "/**\n * Lexer state names.\n */\npublic static final String[] lexStateNames = { \"DEFAULT\" };"
            ],
            [
                "jjtoToken",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "static final long[] jjtoToken = { 0x3ffffffc01L };"
            ],
            [
                "jjtoSkip",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "static final long[] jjtoSkip = { 0x7eL };"
            ],
            [
                "jjbitVec0",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };"
            ],
            [
                "jjnextStates",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "static final int[] jjnextStates = { 21, 22, 23, 17, 19, 2, 3, 5, 6, 8, 9 };"
            ],
            [
                "jjstrLiteralImages",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "/**\n * Token literal values.\n */\npublic static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null };"
            ],
            [
                "lexStateNames",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "/**\n * Lexer state names.\n */\npublic static final String[] lexStateNames = { \"DEFAULT\" };"
            ],
            [
                "jjtoToken",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "static final long[] jjtoToken = { 0x3fffffffffffc9L };"
            ],
            [
                "jjtoSkip",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "static final long[] jjtoSkip = { 0x6L };"
            ],
            [
                "XMLNS",
                "org.graphstream.stream.file.gexf",
                "GEXF",
                "public static final String XMLNS = \"http://www.gexf.net/1.2draft\";"
            ],
            [
                "XMLNS_XSI",
                "org.graphstream.stream.file.gexf",
                "GEXF",
                "public static final String XMLNS_XSI = \"http://www.w3.org/2001/XMLSchema-instance\";"
            ],
            [
                "XMLNS_SL",
                "org.graphstream.stream.file.gexf",
                "GEXF",
                "public static final String XMLNS_SL = \"http://www.gexf.net/1.2draft http://www.gexf.net/1.2draft/gexf.xsd\";"
            ],
            [
                "XMLNS_VIZ",
                "org.graphstream.stream.file.gexf",
                "GEXF",
                "public static final String XMLNS_VIZ = \"http://www.gexf.net/1.2draft/viz\";"
            ],
            [
                "VERSION",
                "org.graphstream.stream.file.gexf",
                "GEXF",
                "public static final String VERSION = \"1.2\";"
            ],
            [
                "BUFFER_SIZE",
                "org.graphstream.stream.file.dgs",
                "DGSParser",
                "protected static final int BUFFER_SIZE = 4096;"
            ],
            [
                "ARRAY_OPEN",
                "org.graphstream.stream.file.dgs",
                "DGSParser",
                "public static final int ARRAY_OPEN = '{';"
            ],
            [
                "ARRAY_CLOSE",
                "org.graphstream.stream.file.dgs",
                "DGSParser",
                "public static final int ARRAY_CLOSE = '}';"
            ],
            [
                "MAP_OPEN",
                "org.graphstream.stream.file.dgs",
                "DGSParser",
                "public static final int MAP_OPEN = '[';"
            ],
            [
                "MAP_CLOSE",
                "org.graphstream.stream.file.dgs",
                "DGSParser",
                "public static final int MAP_CLOSE = ']';"
            ],
            [
                "gradientId",
                "org.graphstream.stream.file",
                "FileSinkSVG2",
                "static int gradientId = 0;"
            ],
            [
                "gradientId",
                "org.graphstream.stream.file",
                "SVGStyle",
                "static int gradientId = 0;"
            ],
            [
                "TIME_PREFIX",
                "org.graphstream.stream",
                "Timeline",
                "public static final String TIME_PREFIX = \"time\";"
            ],
            [
                "SYNC_DISABLE_KEY",
                "org.graphstream.stream.sync",
                "SinkTime",
                "/**\n * Key used to disable synchro. Just run : java -DSYNC_DISABLE_KEY ...\n */\npublic static final String SYNC_DISABLE_KEY = \"org.graphstream.stream.sync.disable\";"
            ],
            [
                "disableSync",
                "org.graphstream.stream.sync",
                "SinkTime",
                "/**\n * Flag used to disable sync.\n */\nprotected static final boolean disableSync;"
            ],
            [
                "LIGHT_YELLOW",
                "org.graphstream.stream.netstream",
                "NetStreamReceiver",
                "protected static final String LIGHT_YELLOW = \"\u001b[33;1m\";"
            ],
            [
                "RESET",
                "org.graphstream.stream.netstream",
                "NetStreamReceiver",
                "protected static final String RESET = \"\u001b[0m\";"
            ],
            [
                "BUFFER_INITIAL_SIZE",
                "org.graphstream.stream.netstream",
                "NetStreamReceiver",
                "// Attributes\n// 65535, 4096\nprotected static final int BUFFER_INITIAL_SIZE = 8192;"
            ],
            [
                "BUFFER_INITIAL_SIZE",
                "org.graphstream.stream.netstream",
                "IncomingBuffer",
                "// Attributes\n// 65535, 4096\nprotected static final int BUFFER_INITIAL_SIZE = 8192;"
            ],
            [
                "EVENT_GETVERSION",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by an 32-bit signed integer for this protocol version. Certainly\n * useless.\n */\npublic static int EVENT_GETVERSION = 0x00;"
            ],
            [
                "EVENT_START",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Not used.\n */\npublic static int EVENT_START = 0x01;"
            ],
            [
                "EVENT_END",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Constant indicating that the client has disconnected.\n */\npublic static int EVENT_END = 0x02;"
            ],
            [
                "EVENT_ADD_NODE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "//\n// ----------------------------------\n// GraphStream's graph events\n// ----------------------------------\n//\n/**\n * Followed by a node id (TYPE_STRING format)\n */\npublic static int EVENT_ADD_NODE = 0x10;"
            ],
            [
                "EVENT_DEL_NODE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by a node id (TYPE_STRING format)\n */\npublic static int EVENT_DEL_NODE = 0x11;"
            ],
            [
                "EVENT_ADD_EDGE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - an edge id (TYPE_STRING format), - an source node id\n * (TYPE_STRING format), - a target node id (TYPE_STRING format - a boolean\n * indicating if directed (TYPE_BOOLEAN format)\n */\npublic static int EVENT_ADD_EDGE = 0x12;"
            ],
            [
                "EVENT_DEL_EDGE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by an edge id (TYPE_STRING format)\n */\npublic static int EVENT_DEL_EDGE = 0x13;"
            ],
            [
                "EVENT_STEP",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by double (TYPE_DOUBLE format)\n */\npublic static int EVENT_STEP = 0x14;"
            ],
            [
                "EVENT_CLEARED",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n */\npublic static int EVENT_CLEARED = 0x15;"
            ],
            [
                "EVENT_ADD_GRAPH_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - an attribute id (TYPE_STRING format) - the attribute TYPE -\n * the attribute value\n */\npublic static int EVENT_ADD_GRAPH_ATTR = 0x16;"
            ],
            [
                "EVENT_CHG_GRAPH_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - an attribute id (TYPE_STRING format) - the attribute TYPE -\n * the attribute old value - the attribute new value\n */\npublic static int EVENT_CHG_GRAPH_ATTR = 0x17;"
            ],
            [
                "EVENT_DEL_GRAPH_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - the attribute id (TYPE_STRING format)\n */\npublic static int EVENT_DEL_GRAPH_ATTR = 0x18;"
            ],
            [
                "EVENT_ADD_NODE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - an attribute id (TYPE_STRING format) - the attribute TYPE -\n * the attribute value\n */\npublic static int EVENT_ADD_NODE_ATTR = 0x19;"
            ],
            [
                "EVENT_CHG_NODE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - an attribute id (TYPE_STRING format) - the attribute TYPE -\n * the attribute old value - the attribute new value\n */\npublic static int EVENT_CHG_NODE_ATTR = 0x1a;"
            ],
            [
                "EVENT_DEL_NODE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - the node id (TYPE_STRING format) - the attribute id\n * (TYPE_STRING format)\n */\npublic static int EVENT_DEL_NODE_ATTR = 0x1b;"
            ],
            [
                "EVENT_ADD_EDGE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - an attribute id (TYPE_STRING format) - the attribute TYPE -\n * the attribute value\n */\npublic static int EVENT_ADD_EDGE_ATTR = 0x1c;"
            ],
            [
                "EVENT_CHG_EDGE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - an attribute id (TYPE_STRING format) - the attribute TYPE -\n * the attribute old value - the attribute new value\n */\npublic static int EVENT_CHG_EDGE_ATTR = 0x1d;"
            ],
            [
                "EVENT_DEL_EDGE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - the edge id (TYPE_STRING format) - the attribute id\n * (TYPE_STRING format)\n */\npublic static int EVENT_DEL_EDGE_ATTR = 0x1e;"
            ],
            [
                "TYPE_UNKNOWN",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "// Values types\npublic static int TYPE_UNKNOWN = 0x00;"
            ],
            [
                "TYPE_BOOLEAN",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by a byte who's value is 0 or 1\n */\npublic static int TYPE_BOOLEAN = 0x50;"
            ],
            [
                "TYPE_BOOLEAN_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * An array of booleans. Followed by first, a 16-bits integer for the number\n * of booleans and then, a list of bytes who's value is 0 or 1\n */\npublic static int TYPE_BOOLEAN_ARRAY = 0x51;"
            ],
            [
                "TYPE_BYTE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by a signed byte [-127,127]\n */\npublic static int TYPE_BYTE = 0x52;"
            ],
            [
                "TYPE_BYTE_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * An array of bytes. Followed by first, a 16-bits integer for the number of\n * integers and then, a list of signed bytes.\n */\npublic static int TYPE_BYTE_ARRAY = 0x53;"
            ],
            [
                "TYPE_SHORT",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by an 16-bit signed integer (a short)\n */\npublic static int TYPE_SHORT = 0x54;"
            ],
            [
                "TYPE_SHORT_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * An array of shorts. Followed by first, a 16-bits integer for the number\n * of integers and then, a list of 16-bit signed shorts\n */\npublic static int TYPE_SHORT_ARRAY = 0x55;"
            ],
            [
                "TYPE_INT",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by an 32-bit signed integer\n */\npublic static int TYPE_INT = 0x56;"
            ],
            [
                "TYPE_INT_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * An array of integers. Followed by first, a 16-bits integer for the number\n * of integers and then, a list of 32-bit signed integers\n */\npublic static int TYPE_INT_ARRAY = 0x57;"
            ],
            [
                "TYPE_LONG",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by an 64-bit signed integer\n */\npublic static int TYPE_LONG = 0x58;"
            ],
            [
                "TYPE_LONG_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * An array of longs. Followed by first, a 16-bits integer for the number of\n * longs and then, a list of 62-bit signed integers\n */\npublic static int TYPE_LONG_ARRAY = 0x59;"
            ],
            [
                "TYPE_FLOAT",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by a single precision 32-bits floating point number\n */\npublic static int TYPE_FLOAT = 0x5a;"
            ],
            [
                "TYPE_FLOAT_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Array of double. Followed by first, a 16-bits integer for the number of\n * floats and then, a list of 32-bit floats\n */\npublic static int TYPE_FLOAT_ARRAY = 0x5b;"
            ],
            [
                "TYPE_DOUBLE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by a double precision 64-bits floating point number\n */\npublic static int TYPE_DOUBLE = 0x5c;"
            ],
            [
                "TYPE_DOUBLE_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Array of double. Followed by first, a 16-bits integer for the number of\n * doubles and then, a list of 64-bit doubles\n */\npublic static int TYPE_DOUBLE_ARRAY = 0x5d;"
            ],
            [
                "TYPE_STRING",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Array of characters. Followed by first, a 16-bits integer for the size in\n * bytes (not in number of characters) of the string, then by the unicode\n * string\n */\npublic static int TYPE_STRING = 0x5e;"
            ],
            [
                "TYPE_RAW",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Raw data, good for serialization. Followed by first, a 16-bits integer\n * indicating the length in bytes of the dataset, and then the data itself.\n */\npublic static int TYPE_RAW = 0x5f;"
            ],
            [
                "TYPE_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * An type-unspecified array. Followed by first, a 16-bits integer\n * indicating the number of elements, and then, the elements themselves. The\n * elements themselves have to give their type.\n */\npublic static byte TYPE_ARRAY = 0x60;"
            ],
            [
                "TYPE_NULL",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_NULL = 0x61;"
            ],
            [
                "COMMAND",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n *  Constant that indicates that this message is a COMMAND, not and EVENT.\n *\n *  For now it is followed by a string that has to be parssed at the application level.\n *\n *  THIS IS EXPERIMENTAL AND MAY (WILL) CHANGE !\n */\npublic static int COMMAND = 0x70;"
            ],
            [
                "NO_OPTIONS",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/* ********  P U B L I C   F I E L D S  ******** */\n/**\n * No options specified. Value is zero.\n */\npublic final static int NO_OPTIONS = 0;"
            ],
            [
                "ENCODE",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Specify encoding in first bit. Value is one.\n */\npublic final static int ENCODE = 1;"
            ],
            [
                "DECODE",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Specify decoding in first bit. Value is zero.\n */\npublic final static int DECODE = 0;"
            ],
            [
                "GZIP",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Specify that data should be gzip-compressed in second bit. Value is two.\n */\npublic final static int GZIP = 2;"
            ],
            [
                "DONT_GUNZIP",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Specify that gzipped data should <em>not</em> be automatically gunzipped.\n */\npublic final static int DONT_GUNZIP = 4;"
            ],
            [
                "DO_BREAK_LINES",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Do break lines when encoding. Value is 8.\n */\npublic final static int DO_BREAK_LINES = 8;"
            ],
            [
                "URL_SAFE",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Encode using Base64-like encoding that is URL- and Filename-safe as described\n * in Section 4 of RFC3548:\n * <a href=\"http://www.faqs.org/rfcs/rfc3548.html\">http://www.faqs.org/rfcs/rfc3548.html</a>.\n * It is important to note that data encoded this way is <em>not</em> officially valid Base64,\n * or at the very least should not be called Base64 without also specifying that is\n * was encoded using the URL- and Filename-safe dialect.\n */\npublic final static int URL_SAFE = 16;"
            ],
            [
                "ORDERED",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Encode using the special \"ordered\" dialect of Base64 described here:\n * <a href=\"http://www.faqs.org/qa/rfcc-1940.html\">http://www.faqs.org/qa/rfcc-1940.html</a>.\n */\npublic final static int ORDERED = 32;"
            ],
            [
                "INITIAL_EDGE_CAPACITY",
                "org.graphstream.graph.implementations",
                "AdjacencyListNode",
                "protected static final int INITIAL_EDGE_CAPACITY;"
            ],
            [
                "GROWTH_FACTOR",
                "org.graphstream.graph.implementations",
                "AdjacencyListNode",
                "protected static final double GROWTH_FACTOR = 1.1;"
            ],
            [
                "I_EDGE",
                "org.graphstream.graph.implementations",
                "AdjacencyListNode",
                "protected static final char I_EDGE = 0;"
            ],
            [
                "IO_EDGE",
                "org.graphstream.graph.implementations",
                "AdjacencyListNode",
                "protected static final char IO_EDGE = 1;"
            ],
            [
                "O_EDGE",
                "org.graphstream.graph.implementations",
                "AdjacencyListNode",
                "protected static final char O_EDGE = 2;"
            ],
            [
                "GROW_FACTOR",
                "org.graphstream.graph.implementations",
                "AdjacencyListGraph",
                "public static final double GROW_FACTOR = 1.1;"
            ],
            [
                "DEFAULT_NODE_CAPACITY",
                "org.graphstream.graph.implementations",
                "AdjacencyListGraph",
                "public static final int DEFAULT_NODE_CAPACITY = 128;"
            ],
            [
                "DEFAULT_EDGE_CAPACITY",
                "org.graphstream.graph.implementations",
                "AdjacencyListGraph",
                "public static final int DEFAULT_EDGE_CAPACITY = 1024;"
            ]
        ],
        "tokensMethodJavadocValues": [],
        "tokensMethodArguments": [
            [
                "element",
                "org.graphstream.ui.graphicGraph",
                "GraphicElement"
            ],
            [
                "x",
                "",
                "double"
            ],
            [
                "y",
                "",
                "double"
            ]
        ],
        "tokensMethodVariablesNonPrivateNonStaticNonVoidMethods": [
            [
                "findNodeOrSpriteAt",
                "org.graphstream.ui.view",
                "View",
                "/**\n * Search for the first node or sprite (in that order) that contains the\n * point at coordinates (x, y).\n *\n * @param x The point abscissa.\n * @param y The point ordinate.\n * @return The first node or sprite at the given coordinates or null if\n * nothing found.\n */\nGraphicElement findNodeOrSpriteAt(double x, double y);"
            ],
            [
                "getId",
                "org.graphstream.ui.view",
                "View",
                "/**\n * Get the unique view id.\n *\n * @return a view id\n */\nString getId();"
            ],
            [
                "getCamera",
                "org.graphstream.ui.view",
                "View",
                "/**\n * Get a camera object to provide control commands on the view.\n *\n * @return a Camera instance\n */\nCamera getCamera();"
            ],
            [
                "allNodesOrSpritesIn",
                "org.graphstream.ui.view",
                "View",
                "/**\n * Search for all the nodes and sprites contained inside the rectangle\n * (x1,y1)-(x2,y2).\n *\n * @param x1 The rectangle lowest point abscissa.\n * @param y1 The rectangle lowest point ordinate.\n * @param x2 The rectangle highest point abscissa.\n * @param y2 The rectangle highest point ordinate.\n * @return The set of sprites and nodes in the given rectangle.\n */\nCollection<GraphicElement> allNodesOrSpritesIn(double x1, double y1, double x2, double y2);"
            ],
            [
                "getStyle",
                "org.graphstream.ui.graphicGraph",
                "GraphicElement",
                "public StyleGroup getStyle()"
            ],
            [
                "getX",
                "org.graphstream.ui.graphicGraph",
                "GraphicElement",
                "public abstract double getX()"
            ],
            [
                "getLabel",
                "org.graphstream.ui.graphicGraph",
                "GraphicElement",
                "public String getLabel()"
            ],
            [
                "getY",
                "org.graphstream.ui.graphicGraph",
                "GraphicElement",
                "public abstract double getY()"
            ],
            [
                "nullAttributesAreErrors",
                "org.graphstream.ui.graphicGraph",
                "GraphicElement",
                "protected boolean nullAttributesAreErrors()"
            ],
            [
                "getComponent",
                "org.graphstream.ui.graphicGraph",
                "GraphicElement",
                "public Object getComponent()"
            ],
            [
                "getZ",
                "org.graphstream.ui.graphicGraph",
                "GraphicElement",
                "public abstract double getZ()"
            ],
            [
                "getSelectorType",
                "org.graphstream.ui.graphicGraph",
                "GraphicElement",
                "public abstract Selector.Type getSelectorType()"
            ],
            [
                "myGraph",
                "org.graphstream.ui.graphicGraph",
                "GraphicElement",
                "public GraphicGraph myGraph()"
            ],
            [
                "getAttribute",
                "org.graphstream.graph.implementations",
                "AbstractElement",
                "public <T> T getAttribute(String arg0, Class<T> arg1)"
            ],
            [
                "getId",
                "org.graphstream.graph.implementations",
                "AbstractElement",
                "public String getId()"
            ],
            [
                "hasHash",
                "org.graphstream.graph.implementations",
                "AbstractElement",
                "public boolean hasHash(String arg0)"
            ],
            [
                "getFirstAttributeOf",
                "org.graphstream.graph.implementations",
                "AbstractElement",
                "public transient <T> T getFirstAttributeOf(String[] arg0)"
            ],
            [
                "getVector",
                "org.graphstream.graph.implementations",
                "AbstractElement",
                "public ArrayList<? extends Number> getVector(String arg0)"
            ],
            [
                "toString",
                "org.graphstream.graph.implementations",
                "AbstractElement",
                "public String toString()"
            ],
            [
                "hasAttribute",
                "org.graphstream.graph.implementations",
                "AbstractElement",
                "public boolean hasAttribute(String arg0, Class<?> arg1)"
            ],
            [
                "getAttributeKeyIterator",
                "org.graphstream.graph.implementations",
                "AbstractElement",
                "public Iterator<String> getAttributeKeyIterator()"
            ],
            [
                "hasArray",
                "org.graphstream.graph.implementations",
                "AbstractElement",
                "public boolean hasArray(String arg0)"
            ],
            [
                "nullAttributesAreErrors",
                "org.graphstream.graph.implementations",
                "AbstractElement",
                "protected abstract boolean nullAttributesAreErrors()"
            ],
            [
                "hasNumber",
                "org.graphstream.graph.implementations",
                "AbstractElement",
                "public boolean hasNumber(String arg0)"
            ],
            [
                "getAttributeKeySet",
                "org.graphstream.graph.implementations",
                "AbstractElement",
                "public Collection<String> getAttributeKeySet()"
            ],
            [
                "getAttributeCount",
                "org.graphstream.graph.implementations",
                "AbstractElement",
                "public int getAttributeCount()"
            ],
            [
                "hasLabel",
                "org.graphstream.graph.implementations",
                "AbstractElement",
                "public boolean hasLabel(String arg0)"
            ],
            [
                "hasVector",
                "org.graphstream.graph.implementations",
                "AbstractElement",
                "public boolean hasVector(String arg0)"
            ],
            [
                "getAttribute",
                "org.graphstream.graph.implementations",
                "AbstractElement",
                "public <T> T getAttribute(String arg0)"
            ],
            [
                "getLabel",
                "org.graphstream.graph.implementations",
                "AbstractElement",
                "public String getLabel(String arg0)"
            ],
            [
                "getArray",
                "org.graphstream.graph.implementations",
                "AbstractElement",
                "public Object[] getArray(String arg0)"
            ],
            [
                "getEachAttributeKey",
                "org.graphstream.graph.implementations",
                "AbstractElement",
                "public Iterable<String> getEachAttributeKey()"
            ],
            [
                "getFirstAttributeOf",
                "org.graphstream.graph.implementations",
                "AbstractElement",
                "public transient <T> T getFirstAttributeOf(Class<T> arg0, String[] arg1)"
            ],
            [
                "getIndex",
                "org.graphstream.graph.implementations",
                "AbstractElement",
                "public int getIndex()"
            ],
            [
                "getHash",
                "org.graphstream.graph.implementations",
                "AbstractElement",
                "public HashMap<?, ?> getHash(String arg0)"
            ],
            [
                "hasAttribute",
                "org.graphstream.graph.implementations",
                "AbstractElement",
                "public boolean hasAttribute(String arg0)"
            ],
            [
                "getNumber",
                "org.graphstream.graph.implementations",
                "AbstractElement",
                "public double getNumber(String arg0)"
            ],
            [
                "equals",
                "java.lang",
                "Object",
                "public boolean equals(Object arg0)"
            ],
            [
                "clone",
                "java.lang",
                "Object",
                "protected native Object clone() throws CloneNotSupportedException"
            ],
            [
                "toString",
                "java.lang",
                "Object",
                "public String toString()"
            ],
            [
                "getClass",
                "java.lang",
                "Object",
                "public final native Class<? extends Object> getClass()"
            ],
            [
                "hashCode",
                "java.lang",
                "Object",
                "public native int hashCode()"
            ],
            [
                "getVector",
                "org.graphstream.graph",
                "Element",
                "public abstract ArrayList<? extends Number> getVector(String arg0)"
            ],
            [
                "hasAttribute",
                "org.graphstream.graph",
                "Element",
                "public abstract boolean hasAttribute(String arg0)"
            ],
            [
                "getNumber",
                "org.graphstream.graph",
                "Element",
                "public abstract double getNumber(String arg0)"
            ],
            [
                "hasVector",
                "org.graphstream.graph",
                "Element",
                "public abstract boolean hasVector(String arg0)"
            ],
            [
                "hasAttribute",
                "org.graphstream.graph",
                "Element",
                "public abstract boolean hasAttribute(String arg0, Class<?> arg1)"
            ],
            [
                "getAttributeKeyIterator",
                "org.graphstream.graph",
                "Element",
                "public abstract Iterator<String> getAttributeKeyIterator()"
            ],
            [
                "getEachAttributeKey",
                "org.graphstream.graph",
                "Element",
                "public abstract Iterable<String> getEachAttributeKey()"
            ],
            [
                "getAttributeKeySet",
                "org.graphstream.graph",
                "Element",
                "public abstract Collection<String> getAttributeKeySet()"
            ],
            [
                "getIndex",
                "org.graphstream.graph",
                "Element",
                "public abstract int getIndex()"
            ],
            [
                "hasArray",
                "org.graphstream.graph",
                "Element",
                "public abstract boolean hasArray(String arg0)"
            ],
            [
                "getHash",
                "org.graphstream.graph",
                "Element",
                "public abstract HashMap<?, ?> getHash(String arg0)"
            ],
            [
                "getAttribute",
                "org.graphstream.graph",
                "Element",
                "public abstract <T> T getAttribute(String arg0, Class<T> arg1)"
            ],
            [
                "getId",
                "org.graphstream.graph",
                "Element",
                "public abstract String getId()"
            ],
            [
                "getAttribute",
                "org.graphstream.graph",
                "Element",
                "public abstract <T> T getAttribute(String arg0)"
            ],
            [
                "getFirstAttributeOf",
                "org.graphstream.graph",
                "Element",
                "public abstract transient <T> T getFirstAttributeOf(Class<T> arg0, String[] arg1)"
            ],
            [
                "hasNumber",
                "org.graphstream.graph",
                "Element",
                "public abstract boolean hasNumber(String arg0)"
            ],
            [
                "hasHash",
                "org.graphstream.graph",
                "Element",
                "public abstract boolean hasHash(String arg0)"
            ],
            [
                "getArray",
                "org.graphstream.graph",
                "Element",
                "public abstract Object[] getArray(String arg0)"
            ],
            [
                "hasLabel",
                "org.graphstream.graph",
                "Element",
                "public abstract boolean hasLabel(String arg0)"
            ],
            [
                "getLabel",
                "org.graphstream.graph",
                "Element",
                "public abstract CharSequence getLabel(String arg0)"
            ],
            [
                "getFirstAttributeOf",
                "org.graphstream.graph",
                "Element",
                "public abstract transient <T> T getFirstAttributeOf(String[] arg0)"
            ],
            [
                "getAttributeCount",
                "org.graphstream.graph",
                "Element",
                "public abstract int getAttributeCount()"
            ]
        ],
        "tokensMethodVariablesNonPrivateNonStaticAttributes": [
            [
                "mygraph",
                "org.graphstream.ui.graphicGraph",
                "GraphicElement",
                "protected GraphicGraph mygraph;"
            ],
            [
                "label",
                "org.graphstream.ui.graphicGraph",
                "GraphicElement",
                "public String label;"
            ],
            [
                "style",
                "org.graphstream.ui.graphicGraph",
                "GraphicElement",
                "public StyleGroup style;"
            ],
            [
                "component",
                "org.graphstream.ui.graphicGraph",
                "GraphicElement",
                "public Object component;"
            ],
            [
                "hidden",
                "org.graphstream.ui.graphicGraph",
                "GraphicElement",
                "public boolean hidden;"
            ],
            [
                "id",
                "org.graphstream.graph.implementations",
                "AbstractElement",
                "protected String id;"
            ],
            [
                "attributes",
                "org.graphstream.graph.implementations",
                "AbstractElement",
                "protected HashMap<String, Object> attributes;"
            ],
            [
                "attributesBeingRemoved",
                "org.graphstream.graph.implementations",
                "AbstractElement",
                "protected ArrayList<String> attributesBeingRemoved;"
            ]
        ],
        "tokensOracleVariablesNonPrivateNonStaticNonVoidMethods": [],
        "tokensOracleVariablesNonPrivateNonStaticAttributes": []
    },
    {
        "id": 2973,
        "oracle": ";",
        "oracleType": "PRE",
        "projectName": "gs-core-1.3",
        "packageName": "org.graphstream.ui.view",
        "className": "View",
        "javadocTag": "@param manager The new manager, or null to set the default manager",
        "methodJavadoc": "    /**\n     * Change the manager for key and shortcuts events on this view. If the value for the new\n     * manager is null, a default manager is installed. The {@link org.graphstream.ui.view.util.ShortcutManager#init(org.graphstream.ui.graphicGraph.GraphicGraph, View)}\n     * method must not yet have been called.\n     *\n     * @param manager The new manager, or null to set the default manager\n     * @see org.graphstream.ui.view.util.ShortcutManager\n     */",
        "methodSourceCode": "void setShortcutManager(ShortcutManager manager);",
        "classJavadoc": "/**\n * A view on a graphic graph.\n */",
        "classSourceCode": "/*\n * Copyright 2006 - 2015\n *     Stefan Balev     <stefan.balev@graphstream-project.org>\n *     Julien Baudry    <julien.baudry@graphstream-project.org>\n *     Antoine Dutot    <antoine.dutot@graphstream-project.org>\n *     Yoann Pign\u00e9      <yoann.pigne@graphstream-project.org>\n *     Guilhelm Savin   <guilhelm.savin@graphstream-project.org>\n * \n * This file is part of GraphStream <http://graphstream-project.org>.\n * \n * GraphStream is a library whose purpose is to handle static or dynamic\n * graph, create them from scratch, file or any source and display them.\n * \n * This program is free software distributed under the terms of two licenses, the\n * CeCILL-C license that fits European law, and the GNU Lesser General Public\n * License. You can  use, modify and/ or redistribute the software under the terms\n * of the CeCILL-C license as circulated by CEA, CNRS and INRIA at the following\n * URL <http://www.cecill.info> or under the terms of the GNU LGPL as published by\n * the Free Software Foundation, either version 3 of the License, or (at your\n * option) any later version.\n * \n * This program is distributed in the hope that it will be useful, but WITHOUT ANY\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A\n * PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more details.\n * \n * You should have received a copy of the GNU Lesser General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n * \n * The fact that you are presently reading this means that you have had\n * knowledge of the CeCILL-C and LGPL licenses and that you accept their terms.\n */\npackage org.graphstream.ui.view;\n\nimport org.graphstream.ui.graphicGraph.GraphicElement;\nimport org.graphstream.ui.graphicGraph.GraphicGraph;\nimport org.graphstream.ui.view.util.MouseManager;\nimport org.graphstream.ui.view.util.ShortcutManager;\n\nimport java.awt.event.KeyListener;\nimport java.awt.event.MouseListener;\nimport java.awt.event.MouseMotionListener;\nimport java.util.Collection;\n\n/**\n * A view on a graphic graph.\n */\npublic interface View\n{\n    /**\n     * Get the unique view id.\n     *\n     * @return a view id\n     */\n    String getId();\n\n    /**\n     * Get a camera object to provide control commands on the view.\n     *\n     * @return a Camera instance\n     */\n    Camera getCamera();\n\n    /**\n     * Search for the first node or sprite (in that order) that contains the\n     * point at coordinates (x, y).\n     *\n     * @param x The point abscissa.\n     * @param y The point ordinate.\n     * @return The first node or sprite at the given coordinates or null if\n     * nothing found.\n     */\n    GraphicElement findNodeOrSpriteAt(double x, double y);\n\n    /**\n     * Search for all the nodes and sprites contained inside the rectangle\n     * (x1,y1)-(x2,y2).\n     *\n     * @param x1 The rectangle lowest point abscissa.\n     * @param y1 The rectangle lowest point ordinate.\n     * @param x2 The rectangle highest point abscissa.\n     * @param y2 The rectangle highest point ordinate.\n     * @return The set of sprites and nodes in the given rectangle.\n     */\n    Collection<GraphicElement> allNodesOrSpritesIn(double x1, double y1, double x2, double y2);\n\n    /**\n     * Redisplay or update the view contents. Called by the Viewer.\n     *\n     * @param graph        The graphic graph to represent.\n     * @param graphChanged True if the graph changed since the last call to this method.\n     */\n    void display(GraphicGraph graph, boolean graphChanged);\n\n    /**\n     * Close definitively this view. Called by the Viewer.\n     *\n     * @param graph The graphic graph.\n     */\n    void close(GraphicGraph graph);\n\n\n    /**\n     * Called by the mouse manager to specify where a node and sprite selection\n     * started.\n     *\n     * @param x1 The selection start abscissa.\n     * @param y1 The selection start ordinate.\n     */\n    void beginSelectionAt(double x1, double y1);\n\n    /**\n     * The selection already started grows toward position (x, y).\n     *\n     * @param x The new end selection abscissa.\n     * @param y The new end selection ordinate.\n     */\n    void selectionGrowsAt(double x, double y);\n\n    /**\n     * Called by the mouse manager to specify where a node and spite selection\n     * stopped.\n     *\n     * @param x2 The selection stop abscissa.\n     * @param y2 The selection stop ordinate.\n     */\n    void endSelectionAt(double x2, double y2);\n\n    /**\n     * Freeze an element so that the optional layout cannot move it.\n     *\n     * @param element The element.\n     * @param frozen  If true the element cannot be moved automatically.\n     */\n    void freezeElement(GraphicElement element, boolean frozen);\n\n    /**\n     * Force an element to move at the given location in pixels.\n     *\n     * @param element The element.\n     * @param x       The requested position abscissa in pixels.\n     * @param y       The requested position ordinate in pixels.\n     */\n    void moveElementAtPx(GraphicElement element, double x, double y);\n\n    /**\n     * Change the manager for mouse events on this view. If the value for the new manager is\n     * null, a default manager is installed. The {@link org.graphstream.ui.view.util.MouseManager#init(org.graphstream.ui.graphicGraph.GraphicGraph, View)}\n     * method must not yet have been called.\n     *\n     * @param manager The new manager, or null to set the default manager.\n     * @see org.graphstream.ui.view.util.MouseManager\n     */\n    void setMouseManager(MouseManager manager);\n\n    /**\n     * Change the manager for key and shortcuts events on this view. If the value for the new\n     * manager is null, a default manager is installed. The {@link org.graphstream.ui.view.util.ShortcutManager#init(org.graphstream.ui.graphicGraph.GraphicGraph, View)}\n     * method must not yet have been called.\n     *\n     * @param manager The new manager, or null to set the default manager\n     * @see org.graphstream.ui.view.util.ShortcutManager\n     */\n    void setShortcutManager(ShortcutManager manager);\n\n    /**\n     * Request ui focus.\n     */\n    void requestFocus();\n\n    /**\n     * Add key ui listener.\n     *\n     * @param l the listener\n     */\n    void addKeyListener(KeyListener l);\n\n    /**\n     * Remove key ui listener.\n     *\n     * @param l the listener\n     */\n    void removeKeyListener(KeyListener l);\n\n    /**\n     * Add mouse ui listener.\n     *\n     * @param l the listener\n     */\n    void addMouseListener(MouseListener l);\n\n    /**\n     * Remove mouse ui listener.\n     *\n     * @param l the listener\n     */\n    void removeMouseListener(MouseListener l);\n\n    /**\n     * Add mouse motion ui listener.\n     *\n     * @param l the listener\n     */\n    void addMouseMotionListener(MouseMotionListener l);\n\n    /**\n     * Remove mouse motion ui listener.\n     *\n     * @param l the listener\n     */\n    void removeMouseMotionListener(MouseMotionListener l);\n}\n",
        "tokensGeneralGrammar": [
            "null",
            "true",
            "false",
            ",",
            ".",
            ":",
            ";",
            "?",
            "(",
            ")",
            "jdVar",
            "stream",
            "Arrays",
            "allMatch",
            "noneMatch",
            "anyMatch",
            "~",
            ">>",
            "<<",
            ">>>",
            "|",
            "&",
            "^",
            "+",
            "-",
            "/",
            "*",
            "%",
            "&&",
            "||",
            ">=",
            "<=",
            ">",
            "<",
            "==",
            "!=",
            "instanceof",
            "class",
            "methodResultID",
            "this"
        ],
        "tokensGeneralValuesGlobalDictionary": [
            [
                "0",
                "int"
            ],
            [
                "1",
                "int"
            ],
            [
                "-1",
                "int"
            ],
            [
                "0.0",
                "double"
            ],
            [
                "1.0",
                "double"
            ],
            [
                "-1.0",
                "double"
            ],
            [
                "\"\"",
                "String"
            ],
            [
                "\" \"",
                "String"
            ]
        ],
        "tokensProjectClasses": [
            [
                "DefaultCamera",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "GradientFactory",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "GraphMetrics",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "Graphics2DOutput",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "ImageCache",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "StrokeFactory",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "FontCache",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "FontSlot",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "DefaultView",
                "org.graphstream.ui.swingViewer"
            ],
            [
                "SpriteRenderer",
                "org.graphstream.ui.swingViewer.basicRenderer"
            ],
            [
                "ElementRenderer",
                "org.graphstream.ui.swingViewer.basicRenderer"
            ],
            [
                "NodeRenderer",
                "org.graphstream.ui.swingViewer.basicRenderer"
            ],
            [
                "Arrow",
                "org.graphstream.ui.swingViewer.basicRenderer.shapes"
            ],
            [
                "Shape",
                "org.graphstream.ui.swingViewer.basicRenderer.shapes"
            ],
            [
                "EdgeRenderer",
                "org.graphstream.ui.swingViewer.basicRenderer"
            ],
            [
                "SwingBasicGraphRenderer",
                "org.graphstream.ui.swingViewer.basicRenderer"
            ],
            [
                "GraphRendererBase",
                "org.graphstream.ui.swingViewer"
            ],
            [
                "GraphRenderer",
                "org.graphstream.ui.swingViewer"
            ],
            [
                "LayerRenderer",
                "org.graphstream.ui.swingViewer"
            ],
            [
                "ViewPanel",
                "org.graphstream.ui.swingViewer"
            ],
            [
                "Layouts",
                "org.graphstream.ui.layout"
            ],
            [
                "Layout",
                "org.graphstream.ui.layout"
            ],
            [
                "LayoutRunner",
                "org.graphstream.ui.layout"
            ],
            [
                "NodeParticle",
                "org.graphstream.ui.layout.springbox"
            ],
            [
                "GraphCellData",
                "org.graphstream.ui.layout.springbox"
            ],
            [
                "EdgeSpring",
                "org.graphstream.ui.layout.springbox"
            ],
            [
                "Energies",
                "org.graphstream.ui.layout.springbox"
            ],
            [
                "BarnesHutLayout",
                "org.graphstream.ui.layout.springbox"
            ],
            [
                "LinLog",
                "org.graphstream.ui.layout.springbox.implementations"
            ],
            [
                "LinLogNodeParticle",
                "org.graphstream.ui.layout.springbox.implementations"
            ],
            [
                "SpringBoxNodeParticle",
                "org.graphstream.ui.layout.springbox.implementations"
            ],
            [
                "SpringBox",
                "org.graphstream.ui.layout.springbox.implementations"
            ],
            [
                "Point2",
                "org.graphstream.ui.geom"
            ],
            [
                "Vector2",
                "org.graphstream.ui.geom"
            ],
            [
                "Vector3",
                "org.graphstream.ui.geom"
            ],
            [
                "Point3",
                "org.graphstream.ui.geom"
            ],
            [
                "ViewerListener",
                "org.graphstream.ui.view"
            ],
            [
                "MouseManager",
                "org.graphstream.ui.view.util"
            ],
            [
                "ShortcutManager",
                "org.graphstream.ui.view.util"
            ],
            [
                "DefaultShortcutManager",
                "org.graphstream.ui.view.util"
            ],
            [
                "FpsCounter",
                "org.graphstream.ui.view.util"
            ],
            [
                "CubicCurve",
                "org.graphstream.ui.view.util"
            ],
            [
                "DefaultMouseManager",
                "org.graphstream.ui.view.util"
            ],
            [
                "Selection",
                "org.graphstream.ui.view"
            ],
            [
                "ViewerPipe",
                "org.graphstream.ui.view"
            ],
            [
                "Viewer",
                "org.graphstream.ui.view"
            ],
            [
                "View",
                "org.graphstream.ui.view"
            ],
            [
                "Camera",
                "org.graphstream.ui.view"
            ],
            [
                "Sprite",
                "org.graphstream.ui.spriteManager"
            ],
            [
                "InvalidSpriteIDException",
                "org.graphstream.ui.spriteManager"
            ],
            [
                "SpriteManager",
                "org.graphstream.ui.spriteManager"
            ],
            [
                "SpriteFactory",
                "org.graphstream.ui.spriteManager"
            ],
            [
                "StyleGroupListener",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "Colors",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "Values",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "StyleSheetListener",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "StyleSheetParserTokenManager",
                "org.graphstream.ui.graphicGraph.stylesheet.parser"
            ],
            [
                "StyleSheetParserConstants",
                "org.graphstream.ui.graphicGraph.stylesheet.parser"
            ],
            [
                "StyleSheetParser",
                "org.graphstream.ui.graphicGraph.stylesheet.parser"
            ],
            [
                "Style",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "StyleSheet",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "StyleConstants",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "Selector",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "Value",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "Rule",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "GraphicNode",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "StyleGroup",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphPosLengthUtils",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphicEdge",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphicElementChangeListener",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphicGraph",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "StyleGroupSet",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphicSprite",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphicElement",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "VerboseSink",
                "org.graphstream.util"
            ],
            [
                "GraphListeners",
                "org.graphstream.util"
            ],
            [
                "Environment",
                "org.graphstream.util"
            ],
            [
                "GraphDiff",
                "org.graphstream.util"
            ],
            [
                "Filters",
                "org.graphstream.util"
            ],
            [
                "FilteredEdgeIterator",
                "org.graphstream.util"
            ],
            [
                "Parser",
                "org.graphstream.util.parser"
            ],
            [
                "ParserFactory",
                "org.graphstream.util.parser"
            ],
            [
                "TokenMgrError",
                "org.graphstream.util.parser"
            ],
            [
                "ParseException",
                "org.graphstream.util.parser"
            ],
            [
                "SimpleCharStream",
                "org.graphstream.util.parser"
            ],
            [
                "Token",
                "org.graphstream.util.parser"
            ],
            [
                "ISODateIO",
                "org.graphstream.util.time"
            ],
            [
                "ISODateComponent",
                "org.graphstream.util.time"
            ],
            [
                "FilteredNodeIterator",
                "org.graphstream.util"
            ],
            [
                "FixedArrayList",
                "org.graphstream.util.set"
            ],
            [
                "StepCounter",
                "org.graphstream.util"
            ],
            [
                "GraphSpells",
                "org.graphstream.util.cumulative"
            ],
            [
                "CumulativeAttributes",
                "org.graphstream.util.cumulative"
            ],
            [
                "CumulativeSpells",
                "org.graphstream.util.cumulative"
            ],
            [
                "Filter",
                "org.graphstream.util"
            ],
            [
                "PipeAdapter",
                "org.graphstream.stream"
            ],
            [
                "GraphParseException",
                "org.graphstream.stream"
            ],
            [
                "ElementSink",
                "org.graphstream.stream"
            ],
            [
                "URLSource",
                "org.graphstream.stream.net"
            ],
            [
                "HTTPSource",
                "org.graphstream.stream.net"
            ],
            [
                "SourceAdapter",
                "org.graphstream.stream"
            ],
            [
                "AttributeSink",
                "org.graphstream.stream"
            ],
            [
                "GMLParserConstants",
                "org.graphstream.stream.file.gml"
            ],
            [
                "GMLParserTokenManager",
                "org.graphstream.stream.file.gml"
            ],
            [
                "GMLContext",
                "org.graphstream.stream.file.gml"
            ],
            [
                "Graphics",
                "org.graphstream.stream.file.gml"
            ],
            [
                "KeyValues",
                "org.graphstream.stream.file.gml"
            ],
            [
                "GMLParser",
                "org.graphstream.stream.file.gml"
            ],
            [
                "FileSinkGraphML",
                "org.graphstream.stream.file"
            ],
            [
                "TLPParserConstants",
                "org.graphstream.stream.file.tlp"
            ],
            [
                "TLPParser",
                "org.graphstream.stream.file.tlp"
            ],
            [
                "TLPParserTokenManager",
                "org.graphstream.stream.file.tlp"
            ],
            [
                "FileSinkFactory",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceEdge",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkBase",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkTikZ",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceGEXF",
                "org.graphstream.stream.file"
            ],
            [
                "DOTParser",
                "org.graphstream.stream.file.dot"
            ],
            [
                "DOTParserConstants",
                "org.graphstream.stream.file.dot"
            ],
            [
                "DOTParserTokenManager",
                "org.graphstream.stream.file.dot"
            ],
            [
                "FileSink",
                "org.graphstream.stream.file"
            ],
            [
                "PajekContext",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "Graphics",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "NodeGraphics",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "EdgeGraphics",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "EdgeMatrix",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "PajekParserTokenManager",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "PajekParserConstants",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "FileSourceXML",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkBaseFiltered",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkDOT",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceParser",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkDGSFiltered",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceDOT",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceDGS1And2",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceGraphML",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceFactory",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkImages",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkDynamicGML",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkSVG",
                "org.graphstream.stream.file"
            ],
            [
                "GEXFSpell",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "SmartXMLWriter",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFElement",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFEdges",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFAttValues",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFEdge",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFSpells",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFAttValue",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFNodes",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFNode",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFMeta",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFAttributes",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXF",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFGraph",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFAttribute",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "OldFileSourceDGS",
                "org.graphstream.stream.file.dgs"
            ],
            [
                "DGSParser",
                "org.graphstream.stream.file.dgs"
            ],
            [
                "FileSourceBase",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkGML",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceDGS",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkDGSUtility",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceTLP",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkSVG2",
                "org.graphstream.stream.file"
            ],
            [
                "FileSource",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceNCol",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourcePajek",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceGPX",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceLGL",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkGEXF2",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceGML",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkGEXF",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkDGS",
                "org.graphstream.stream.file"
            ],
            [
                "ProxyPipe",
                "org.graphstream.stream"
            ],
            [
                "Sink",
                "org.graphstream.stream"
            ],
            [
                "Timeline",
                "org.graphstream.stream"
            ],
            [
                "Pipe",
                "org.graphstream.stream"
            ],
            [
                "SinkAdapter",
                "org.graphstream.stream"
            ],
            [
                "Replayable",
                "org.graphstream.stream"
            ],
            [
                "Source",
                "org.graphstream.stream"
            ],
            [
                "AnnotatedSink",
                "org.graphstream.stream"
            ],
            [
                "GraphReplay",
                "org.graphstream.stream"
            ],
            [
                "AttributePipe",
                "org.graphstream.stream"
            ],
            [
                "SinkTime",
                "org.graphstream.stream.sync"
            ],
            [
                "SourceTime",
                "org.graphstream.stream.sync"
            ],
            [
                "PipeBase",
                "org.graphstream.stream"
            ],
            [
                "ThreadProxyPipe",
                "org.graphstream.stream.thread"
            ],
            [
                "ThreadProxyPipeOld",
                "org.graphstream.stream.thread"
            ],
            [
                "RMISource",
                "org.graphstream.stream.rmi"
            ],
            [
                "RMIAdapterOut",
                "org.graphstream.stream.rmi"
            ],
            [
                "RMISink",
                "org.graphstream.stream.rmi"
            ],
            [
                "RMIAdapterIn",
                "org.graphstream.stream.rmi"
            ],
            [
                "SourceBase",
                "org.graphstream.stream"
            ],
            [
                "NetStreamDecoder",
                "org.graphstream.stream.netstream"
            ],
            [
                "NetStreamReceiver",
                "org.graphstream.stream.netstream"
            ],
            [
                "NetStreamConstants",
                "org.graphstream.stream.netstream"
            ],
            [
                "NetStreamSender",
                "org.graphstream.stream.netstream"
            ],
            [
                "DefaultNetStreamDecoder",
                "org.graphstream.stream.netstream"
            ],
            [
                "Base64",
                "org.graphstream.stream.netstream.packing"
            ],
            [
                "NetStreamUnpacker",
                "org.graphstream.stream.netstream.packing"
            ],
            [
                "Base64Packer",
                "org.graphstream.stream.netstream.packing"
            ],
            [
                "Base64Unpacker",
                "org.graphstream.stream.netstream.packing"
            ],
            [
                "NetStreamPacker",
                "org.graphstream.stream.netstream.packing"
            ],
            [
                "AttributePredicate",
                "org.graphstream.stream"
            ],
            [
                "Element",
                "org.graphstream.graph"
            ],
            [
                "Node",
                "org.graphstream.graph"
            ],
            [
                "BreadthFirstIterator",
                "org.graphstream.graph"
            ],
            [
                "Graph",
                "org.graphstream.graph"
            ],
            [
                "EdgeRejectedException",
                "org.graphstream.graph"
            ],
            [
                "CompoundAttribute",
                "org.graphstream.graph"
            ],
            [
                "Structure",
                "org.graphstream.graph"
            ],
            [
                "DepthFirstIterator",
                "org.graphstream.graph"
            ],
            [
                "NullAttributeException",
                "org.graphstream.graph"
            ],
            [
                "IdAlreadyInUseException",
                "org.graphstream.graph"
            ],
            [
                "EdgeFactory",
                "org.graphstream.graph"
            ],
            [
                "ElementNotFoundException",
                "org.graphstream.graph"
            ],
            [
                "OneAttributeElement",
                "org.graphstream.graph.implementations"
            ],
            [
                "AdjacencyListNode",
                "org.graphstream.graph.implementations"
            ],
            [
                "SingleNode",
                "org.graphstream.graph.implementations"
            ],
            [
                "AbstractElement",
                "org.graphstream.graph.implementations"
            ],
            [
                "AdjacencyListGraph",
                "org.graphstream.graph.implementations"
            ],
            [
                "AbstractNode",
                "org.graphstream.graph.implementations"
            ],
            [
                "DefaultGraph",
                "org.graphstream.graph.implementations"
            ],
            [
                "MultiGraph",
                "org.graphstream.graph.implementations"
            ],
            [
                "Graphs",
                "org.graphstream.graph.implementations"
            ],
            [
                "SingleGraph",
                "org.graphstream.graph.implementations"
            ],
            [
                "MultiNode",
                "org.graphstream.graph.implementations"
            ],
            [
                "AbstractGraph",
                "org.graphstream.graph.implementations"
            ],
            [
                "AbstractEdge",
                "org.graphstream.graph.implementations"
            ],
            [
                "GraphFactory",
                "org.graphstream.graph"
            ],
            [
                "NodeFactory",
                "org.graphstream.graph"
            ],
            [
                "Edge",
                "org.graphstream.graph"
            ],
            [
                "Path",
                "org.graphstream.graph"
            ]
        ],
        "tokensProjectClassesNonPrivateStaticNonVoidMethods": [
            [
                "gradientInArea",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "/**\n * Generate a gradient in the given pixel area following the given style.\n * This produces a gradient only if the style fill-mode is compatible.\n *\n * @param x0\n *            The left corner of the area.\n * @param y0\n *            The bottom corner of the area.\n * @param width\n *            The area width.\n * @param height\n *            The area height.\n * @param style\n *            The style.\n * @return A gradient paint or null if the style does not specify a\n *         gradient.\n */\npublic static Paint gradientInArea(int x0, int y0, int width, int height, Style style) {\n    switch(style.getFillMode()) {\n        case GRADIENT_VERTICAL:\n            return linearGradientFromStyle(x0, y0, x0, y0 + height, style);\n        case GRADIENT_HORIZONTAL:\n            return linearGradientFromStyle(x0, y0, x0 + width, y0, style);\n        case GRADIENT_DIAGONAL1:\n            return linearGradientFromStyle(x0, y0, x0 + width, y0 + height, style);\n        case GRADIENT_DIAGONAL2:\n            return linearGradientFromStyle(x0 + width, y0, x0, y0 + height, style);\n        case GRADIENT_RADIAL:\n            return radialGradientFromStyle(x0 + (width / 2), y0 + (height / 2), width > height ? width / 2 : height / 2, style);\n        default:\n            return null;\n    }\n}"
            ],
            [
                "linearGradientFromStyle",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "/**\n * Generate a linear gradient between two given points corresponding to the\n * given style.\n *\n * @param x0\n *            The start point abscissa.\n * @param y0\n *            The start point ordinate.\n * @param x1\n *            The end point abscissa.\n * @param y1\n *            The end point ordinate.\n * @param style\n *            The style.\n * @return A paint for the gradient or null if the style specifies no\n *         gradient (the fill mode is not a linear gradient or there is only\n *         one fill colour).\n */\npublic static Paint linearGradientFromStyle(float x0, float y0, float x1, float y1, Style style) {\n    Paint paint = null;\n    if (style.getFillColorCount() > 1) {\n        switch(style.getFillMode()) {\n            case GRADIENT_DIAGONAL1:\n            case GRADIENT_DIAGONAL2:\n            case GRADIENT_HORIZONTAL:\n            case GRADIENT_VERTICAL:\n                if (version16)\n                    paint = new LinearGradientPaint(x0, y0, x1, y1, createFractions(style), createColors(style));\n                else\n                    paint = new GradientPaint(x0, y0, style.getFillColor(0), x1, y1, style.getFillColor(1));\n                break;\n            default:\n                break;\n        }\n    }\n    return paint;\n}"
            ],
            [
                "radialGradientFromStyle",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static Paint radialGradientFromStyle(float cx, float cy, float radius, Style style) {\n    return radialGradientFromStyle(cx, cy, radius, cx, cy, style);\n}"
            ],
            [
                "radialGradientFromStyle",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "/**\n * Generate a radial gradient between whose center is at (cx,cy) with the\n * given radius. The focus (fx,fy) is the start position of the gradient in\n * the circle.\n *\n * @param cx\n *            The center point abscissa.\n * @param cy\n *            The center point ordinate.\n * @param fx\n *            The start point abscissa.\n * @param fy\n *            The start point ordinate.\n * @param radius\n *            The gradient radius.\n * @param style\n *            The style.\n * @return A paint for the gradient or null if the style specifies no\n *         gradient (the fill mode is not a radial gradient or there is only\n *         one fill colour).\n */\npublic static Paint radialGradientFromStyle(float cx, float cy, float radius, float fx, float fy, Style style) {\n    Paint paint = null;\n    if (version16) {\n        if (style.getFillColorCount() > 1 && style.getFillMode() == FillMode.GRADIENT_RADIAL) {\n            float[] fractions = createFractions(style);\n            Color[] colors = createColors(style);\n            paint = new RadialGradientPaint(cx, cy, radius, fx, fy, fractions, colors, MultipleGradientPaint.CycleMethod.REFLECT);\n        }\n    }\n    return paint;\n}"
            ],
            [
                "createFractions",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "protected static float[] createFractions(Style style) {\n    int n = style.getFillColorCount();\n    if (n < predefFractions.length)\n        return predefFractions[n];\n    float[] fractions = new float[n];\n    float div = 1f / (n - 1);\n    for (int i = 1; i < (n - 1); i++) fractions[i] = div * i;\n    fractions[0] = 0f;\n    fractions[n - 1] = 1f;\n    return fractions;\n}"
            ],
            [
                "createColors",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "protected static Color[] createColors(Style style) {\n    int n = style.getFillColorCount();\n    Color[] colors = new Color[n];\n    for (int i = 0; i < n; i++) colors[i] = style.getFillColor(i);\n    return colors;\n}"
            ],
            [
                "defaultImageCache",
                "org.graphstream.ui.swingViewer.util",
                "ImageCache",
                "/**\n * Default singleton image cache instance that can be shared. This method\n * and singleton must be used only in the Swing thread.\n *\n * @return The default singleton image cache instance.\n */\npublic static ImageCache defaultImageCache() {\n    if (defaultImageCache == null)\n        defaultImageCache = new ImageCache();\n    return defaultImageCache;\n}"
            ],
            [
                "generateStroke",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "/**\n * Generate a stroke of the appropriate width and style according to the\n * given style and metrics.\n *\n * @param style\n *            The style to use.\n * @param metrics\n *            The metrics to use.\n * @return The stroke or null if the style specifies a \"none\" stroke mode.\n */\npublic static Stroke generateStroke(Style style, GraphMetrics metrics) {\n    if (style.getStrokeWidth().value == 0)\n        return null;\n    switch(style.getStrokeMode()) {\n        case PLAIN:\n            return generatePlainStroke(style, metrics);\n        case DOTS:\n            return generateDotsStroke(style, metrics);\n        case DASHES:\n            return generateDashesStroke(style, metrics);\n        default:\n        case NONE:\n            return null;\n    }\n}"
            ],
            [
                "generatePlainStroke",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "protected static Stroke generatePlainStroke(Style style, GraphMetrics metrics) {\n    float width = (float) metrics.lengthToGu(style.getStrokeWidth());\n    /*\n\t\t * if( width == 1f ) return plainLine1px; // XXX Not a good optimisation\n\t\t * else if( width == 2f ) return plainLine2px; // We draw the whole\n\t\t * graph in GU else if( width == 3f ) return plainLine3px; // In graph\n\t\t * units the width is never exactly 1,2, 5 ... else if( width == 5f )\n\t\t * return plainLine5px; else if( width == 10f ) return plainLine10px;\n\t\t * else\n\t\t */\n    {\n        return new BasicStroke(width);\n    }\n}"
            ],
            [
                "generateDotsStroke",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "protected static Stroke generateDotsStroke(Style style, GraphMetrics metrics) {\n    float width = (float) metrics.lengthToGu(style.getStrokeWidth());\n    /*\n\t\t * if( width == 1f ) return dotsLine1px; else if( width == 2f ) return\n\t\t * dotsLine2px; else if( width == 3f ) return dotsLine3px; else if(\n\t\t * width == 5f ) return dotsLine5px; else if( width == 10f ) return\n\t\t * dotsLine10px; else\n\t\t */\n    {\n        dots[0] = (float) metrics.lengthToGu(1f, Units.PX);\n        dots[1] = dots[0];\n        return new BasicStroke(width, BasicStroke.CAP_BUTT, BasicStroke.JOIN_MITER, 1f, dots, 0);\n    }\n}"
            ],
            [
                "generateDashesStroke",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "protected static Stroke generateDashesStroke(Style style, GraphMetrics metrics) {\n    float width = (float) metrics.lengthToGu(style.getStrokeWidth());\n    /*\n\t\t * if( width == 1f ) return dashesLine1px; else if( width == 2f ) return\n\t\t * dashesLine2px; else if( width == 3f ) return dashesLine3px; else if(\n\t\t * width == 5f ) return dashesLine5px; else if( width == 10f ) return\n\t\t * dashesLine10px; else\n\t\t */\n    {\n        dashes[0] = (float) metrics.lengthToGu(3f, Units.PX);\n        dashes[1] = dashes[0];\n        return new BasicStroke(width, BasicStroke.CAP_BUTT, BasicStroke.JOIN_MITER, 1f, dashes, 0);\n    }\n}"
            ],
            [
                "defaultFontCache",
                "org.graphstream.ui.swingViewer.util",
                "FontCache",
                "/**\n * Default singleton instance for shared font cache. This method and cache\n * can only be used in the Swing thread.\n *\n * @return The default singleton font cache instance.\n */\npublic static FontCache defaultFontCache() {\n    if (defaultFontCache == null)\n        defaultFontCache = new FontCache();\n    return defaultFontCache;\n}"
            ],
            [
                "newLayoutAlgorithm",
                "org.graphstream.ui.layout",
                "Layouts",
                "/**\n * Creates a layout according to the \"org.graphstream.ui.layout\" system property.\n *\n * @return The new layout or the default GraphStream \"Spring-Box\" layout if\n *         the \"gs.ui.layout\" system property is either not set or contains\n *         a class that cannot be found.\n */\npublic static Layout newLayoutAlgorithm() {\n    String layoutClassName;\n    try {\n        layoutClassName = System.getProperty(\"gs.ui.layout\");\n        if (layoutClassName != null) {\n            logger.log(Level.WARNING, \"\\\"gs.ui.layout\\\" is deprecated, use \\\"org.graphstream.ui.layout\\\" instead.\");\n        } else {\n            layoutClassName = System.getProperty(\"org.graphstream.ui.layout\");\n        }\n    } catch (AccessControlException e) {\n        layoutClassName = null;\n    }\n    if (layoutClassName != null) {\n        try {\n            Class<?> c = Class.forName(layoutClassName);\n            Object object = c.newInstance();\n            if (object instanceof Layout) {\n                return (Layout) object;\n            } else {\n                logger.warning(String.format(\"class '%s' is not a 'GraphRenderer'%n\", object));\n            }\n        } catch (Exception e) {\n            logger.log(Level.WARNING, \"Cannot create layout.\", e);\n        }\n    }\n    return new org.graphstream.ui.layout.springbox.implementations.SpringBox(false);\n}"
            ],
            [
                "eval",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * Evaluate a cubic B\u00e9zier curve according to control points `x0`, `x1`,\n * `x2` and `x3` and return the position at parametric position `t` of the\n * curve.\n *\n * @return The coordinate at parametric position `t` on the curve.\n */\npublic static double eval(double x0, double x1, double x2, double x3, double t) {\n    double tt = (1f - t);\n    return x0 * (tt * tt * tt) + 3f * x1 * t * (tt * tt) + 3f * x2 * (t * t) * tt + x3 * (t * t * t);\n}"
            ],
            [
                "eval",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * Evaluate a cubic B\u00e9zier curve according to control points `p0`, `p1`,\n * `p2` and `p3` and return the position at parametric position `t` of the\n * curve.\n *\n * @return The point at parametric position `t` on the curve.\n */\npublic static Point2 eval(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t) {\n    return new Point2(eval(p0.x, p1.x, p2.x, p3.x, t), eval(p0.y, p1.y, p2.y, p3.y, t));\n}"
            ],
            [
                "eval",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * Evaluate a cubic B\u00e9zier curve according to control points `p0`, `p1`,\n * `p2` and `p3` and return the position at parametric position `t` of the\n * curve.\n *\n * @return The point at parametric position `t` on the curve.\n */\npublic static Point2D.Double eval(Point2D.Double p0, Point2D.Double p1, Point2D.Double p2, Point2D.Double p3, double t) {\n    return new Point2D.Double(eval(p0.x, p1.x, p2.x, p3.x, t), eval(p0.y, p1.y, p2.y, p3.y, t));\n}"
            ],
            [
                "eval",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * Evaluate a cubic B\u00e9zier curve according to control points `p0`, `p1`,\n * `p2` and `p3` and store the position at parametric position `t` of the\n * curve in `result`.\n *\n * @return the given reference to `result`.\n */\npublic static Point2 eval(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t, Point2 result) {\n    result.set(eval(p0.x, p1.x, p2.x, p3.x, t), eval(p0.y, p1.y, p2.y, p3.y, t));\n    return result;\n}"
            ],
            [
                "derivative",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * Derivative of a cubic B\u00e9zier curve according to control points `x0`,\n * `x1`, `x2` and `x3` at parametric position `t` of the curve.\n *\n * @return The derivative at parametric position `t` on the curve.\n */\npublic static double derivative(double x0, double x1, double x2, double x3, double t) {\n    return 3 * (x3 - 3 * x2 + 3 * x1 - x0) * t * t + 2 * (3 * x2 - 6 * x1 + 3 * x0) * t + (3 * x1 - 3 * x0);\n}"
            ],
            [
                "derivative",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * Derivative point of a cubic B\u00e9zier curve according to control points\n * `x0`, `x1`, `x2` and `x3` at parametric position `t` of the curve.\n *\n * @return The derivative point at parametric position `t` on the curve.\n */\npublic static Point2 derivative(Point2 p0, Point2 p1, Point2 p2, Point3 p3, double t) {\n    return new Point2(derivative(p0.x, p1.x, p2.x, p3.x, t), derivative(p0.y, p1.y, p2.y, p3.y, t));\n}"
            ],
            [
                "derivative",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * Store in `result` the derivative point of a cubic B\u00e9zier curve according\n * to control points `x0`, `x1`, `x2` and `x3` at parametric position `t` of\n * the curve.\n *\n * @return the given reference to `result`.\n */\npublic static Point2 derivative(Point2 p0, Point2 p1, Point2 p2, Point3 p3, double t, Point2 result) {\n    result.set(derivative(p0.x, p1.x, p2.x, p3.x, t), derivative(p0.y, p1.y, p2.y, p3.y, t));\n    return result;\n}"
            ],
            [
                "perpendicular",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * The perpendicular vector to the curve defined by control points `p0`,\n * `p1`, `p2` and `p3` at parametric position `t`.\n *\n * @return A vector perpendicular to the curve at position `t`.\n */\npublic static Vector2 perpendicular(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t) {\n    return new Vector2(derivative(p0.y, p1.y, p2.y, p3.y, t), -derivative(p0.x, p1.x, p2.x, p3.x, t));\n}"
            ],
            [
                "perpendicular",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * Store in `result` the perpendicular vector to the curve defined by\n * control points `p0`, `p1`, `p2` and `p3` at parametric position `t`.\n *\n * @return the given reference to `result`.\n */\npublic static Vector2 perpendicular(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t, Vector2 result) {\n    result.set(derivative(p0.y, p1.y, p2.y, p3.y, t), -derivative(p0.x, p1.x, p2.x, p3.x, t));\n    return result;\n}"
            ],
            [
                "perpendicular",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "/**\n * The perpendicular vector to the curve defined by control points `p0`,\n * `p1`, `p2` and `p3` at parametric position `t`.\n *\n * @return A vector perpendicular to the curve at position `t`.\n */\npublic static Point2D.Double perpendicular(Point2D.Double p0, Point2D.Double p1, Point2D.Double p2, Point2D.Double p3, double t) {\n    return new Point2D.Double(derivative(p0.y, p1.y, p2.y, p3.y, t), -derivative(p0.x, p1.x, p2.x, p3.x, t));\n}"
            ],
            [
                "newGraphRenderer",
                "org.graphstream.ui.view",
                "Viewer",
                "// Access\n/**\n * Create a new instance of the default graph renderer. The default graph\n * renderer class is given by the \"org.graphstream.ui.renderer\" system\n * property. If the class indicated by this property is not usable (not in\n * the class path, not of the correct type, etc.) or if the property is not\n * present a SwingBasicGraphRenderer is returned.\n */\npublic static GraphRenderer newGraphRenderer() {\n    String rendererClassName;\n    try {\n        rendererClassName = System.getProperty(\"gs.ui.renderer\");\n        if (rendererClassName != null) {\n            logger.warning(\"\\\"gs.ui.renderer\\\" is deprecated, use \\\"org.graphstream.ui.renderer\\\" instead.\");\n        } else {\n            rendererClassName = System.getProperty(\"org.graphstream.ui.renderer\");\n        }\n    } catch (AccessControlException e) {\n        rendererClassName = null;\n    }\n    if (rendererClassName == null)\n        return new SwingBasicGraphRenderer();\n    try {\n        Class<?> c = Class.forName(rendererClassName);\n        Object object = c.newInstance();\n        if (object instanceof GraphRenderer) {\n            return (GraphRenderer) object;\n        } else {\n            logger.warning(String.format(\"Class '%s' is not a 'GraphRenderer'.\", object));\n        }\n    } catch (Exception e) {\n        logger.log(Level.WARNING, \"Cannot create graph renderer.\", e);\n    }\n    return new SwingBasicGraphRenderer();\n}"
            ],
            [
                "getPositionValue",
                "org.graphstream.ui.spriteManager",
                "SpriteManager",
                "// Utility\nprotected static Values getPositionValue(Object value) {\n    if (value instanceof Object[]) {\n        Object[] values = (Object[]) value;\n        if (values.length == 4) {\n            if (values[0] instanceof Number && values[1] instanceof Number && values[2] instanceof Number && values[3] instanceof Style.Units) {\n                return new Values((Style.Units) values[3], ((Number) values[0]).floatValue(), ((Number) values[1]).floatValue(), ((Number) values[2]).floatValue());\n            } else {\n                logger.warning(\"Cannot parse values[4] for sprite position.\");\n            }\n        } else if (values.length == 3) {\n            if (values[0] instanceof Number && values[1] instanceof Number && values[2] instanceof Number) {\n                return new Values(Units.GU, ((Number) values[0]).floatValue(), ((Number) values[1]).floatValue(), ((Number) values[2]).floatValue());\n            } else {\n                logger.warning(\"Cannot parse values[3] for sprite position.\");\n            }\n        } else if (values.length == 1) {\n            if (values[0] instanceof Number) {\n                return new Values(Units.GU, ((Number) values[0]).floatValue());\n            } else {\n                logger.warning(String.format(\"Sprite position percent is not a number.\"));\n            }\n        } else {\n            logger.warning(String.format(\"Cannot transform value '%s' (length=%d) into a position.\", Arrays.toString(values), values.length));\n        }\n    } else if (value instanceof Number) {\n        return new Values(Units.GU, ((Number) value).floatValue());\n    } else if (value instanceof Value) {\n        return new Values((Value) value);\n    } else if (value instanceof Values) {\n        return new Values((Values) value);\n    } else {\n        System.err.printf(\"GraphicGraph : cannot place sprite with posiiton '%s' (instance of %s)%n\", value, value.getClass().getName());\n    }\n    return null;\n}"
            ],
            [
                "convertColor",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Try to convert the given string value to a colour. It understands the 600\n * colour names of the X11 RGB data base. It also understands colours given\n * in the \"#FFFFFF\" format and the hexadecimal \"0xFFFFFF\" format. Finally,\n * it understands colours given as a \"rgb(1,10,100)\", CSS-like format. If\n * the input value is null, the result is null.\n *\n * @param anyValue\n *            The value to convert.\n * @return the converted colour or null if the conversion failed.\n */\npublic static Color convertColor(Object anyValue) {\n    if (anyValue == null)\n        return null;\n    if (anyValue instanceof Color)\n        return (Color) anyValue;\n    if (anyValue instanceof String) {\n        Color c = null;\n        String value = (String) anyValue;\n        if (value.startsWith(\"#\")) {\n            Matcher m = sharpColor1.matcher(value);\n            if (m.matches()) {\n                if (value.length() == 7) {\n                    try {\n                        c = Color.decode(value);\n                        return c;\n                    } catch (NumberFormatException e) {\n                        c = null;\n                    }\n                } else if (value.length() == 9) {\n                    int r = Integer.parseInt(m.group(1), 16);\n                    int g = Integer.parseInt(m.group(2), 16);\n                    int b = Integer.parseInt(m.group(3), 16);\n                    int a = Integer.parseInt(m.group(4), 16);\n                    return new Color(r, g, b, a);\n                }\n            }\n            m = sharpColor2.matcher(value);\n            if (m.matches()) {\n                if (value.length() >= 4) {\n                    int r = Integer.parseInt(m.group(1), 16) * 16;\n                    int g = Integer.parseInt(m.group(2), 16) * 16;\n                    int b = Integer.parseInt(m.group(3), 16) * 16;\n                    int a = 255;\n                    if (value.length() == 5)\n                        a = Integer.parseInt(m.group(4), 16) * 16;\n                    return new Color(r, g, b, a);\n                }\n            }\n        } else if (value.startsWith(\"rgb\")) {\n            Matcher m = cssColorA.matcher(value);\n            if (m.matches()) {\n                int r = Integer.parseInt(m.group(1));\n                int g = Integer.parseInt(m.group(2));\n                int b = Integer.parseInt(m.group(3));\n                int a = Integer.parseInt(m.group(4));\n                return new Color(r, g, b, a);\n            }\n            m = cssColor.matcher(value);\n            if (m.matches()) {\n                int r = Integer.parseInt(m.group(1));\n                int g = Integer.parseInt(m.group(2));\n                int b = Integer.parseInt(m.group(3));\n                return new Color(r, g, b);\n            }\n        } else if (value.startsWith(\"0x\") || value.startsWith(\"0X\")) {\n            Matcher m = hexaColor.matcher(value);\n            if (m.matches()) {\n                if (value.length() == 8) {\n                    try {\n                        return Color.decode(value);\n                    } catch (NumberFormatException e) {\n                        c = null;\n                    }\n                } else if (value.length() == 10) {\n                    String r = m.group(1);\n                    String g = m.group(2);\n                    String b = m.group(3);\n                    String a = m.group(4);\n                    return new Color(Integer.parseInt(r, 16), Integer.parseInt(g, 16), Integer.parseInt(b, 16), Integer.parseInt(a, 16));\n                }\n            }\n        } else if (value.startsWith(\"java.awt.Color[\")) {\n            Matcher m = awtColor.matcher(value);\n            if (m.matches()) {\n                int r = Integer.parseInt(m.group(1));\n                int g = Integer.parseInt(m.group(2));\n                int b = Integer.parseInt(m.group(3));\n                return new Color(r, g, b);\n            }\n        }\n        return colorMap.get(value.toLowerCase());\n    }\n    // TODO throw an exception instead ??\n    return null;\n}"
            ],
            [
                "convertLabel",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Check if the given value is an instance of CharSequence (String is) and\n * return it as a string. Else return null. If the input value is null, the\n * return value is null. If the value returned is larger than 128\n * characters, this method cuts it to 128 characters. TODO: allow to set the\n * max length of these strings.\n *\n * @param value\n *            The value to convert.\n * @return The corresponding string, or null.\n */\npublic static String convertLabel(Object value) {\n    String label = null;\n    if (value != null) {\n        if (value instanceof CharSequence)\n            label = ((CharSequence) value).toString();\n        else\n            label = value.toString();\n        if (label.length() > 128)\n            label = String.format(\"%s...\", label.substring(0, 128));\n    }\n    return label;\n}"
            ],
            [
                "convertWidth",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Try to convert an arbitrary value to a float. If it is a descendant of\n * Number, the float value is returned. If it is a string, a conversion is\n * tried to change it into a number and if successful, this number is\n * returned as a float. Else, the -1 value is returned as no width can be\n * negative to indicate the conversion failed. If the input is null, the\n * return value is -1.\n *\n * @param value\n *            The input to convert.\n * @return The value or -1 if the conversion failed. TODO should be named\n *         convertNumber\n */\npublic static float convertWidth(Object value) {\n    if (value instanceof CharSequence) {\n        try {\n            float val = Float.parseFloat(((CharSequence) value).toString());\n            return val;\n        } catch (NumberFormatException e) {\n            return -1;\n        }\n    } else if (value instanceof Number) {\n        return ((Number) value).floatValue();\n    }\n    return -1;\n}"
            ],
            [
                "convertValue",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Convert an object to a value with units. The object can be a number, in\n * which case the value returned contains this number in pixel units. The\n * object can be a string. In this case the strings understood by this\n * method are of the form (spaces, number, spaces, unit, spaces). For\n * example \"3px\", \"45gu\", \"5.5%\", \" 25.3  gu \", \"4\", \"   28.1  \".\n *\n * @param value\n *            A Number or a CharSequence.\n * @return A value.\n */\npublic static Value convertValue(Object value) {\n    if (value instanceof CharSequence) {\n        CharSequence string = (CharSequence) value;\n        //\t\t\tif (string == null)\n        //\t\t\t\tthrow new RuntimeException(\"null size string ...\");\n        if (string.length() < 0)\n            throw new RuntimeException(\"empty size string ...\");\n        Matcher m = numberUnit.matcher(string);\n        if (m.matches())\n            return new Value(convertUnit(m.group(2)), Float.parseFloat(m.group(1)));\n        m = number.matcher(string);\n        if (m.matches())\n            return new Value(Units.PX, Float.parseFloat(m.group(1)));\n        throw new RuntimeException(String.format(\"string is not convertible to a value (%s)\", string));\n    } else if (value instanceof Number) {\n        return new Value(Units.PX, ((Number) value).floatValue());\n    }\n    if (value == null)\n        throw new RuntimeException(\"cannot convert null value\");\n    throw new RuntimeException(String.format(\"value is of class %s%n\", value.getClass().getName()));\n}"
            ],
            [
                "convertUnit",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Convert \"gu\", \"px\" and \"%\" to Units.GU, Units.PX, Units.PERCENTS.\n */\nprotected static Units convertUnit(String unit) {\n    if (unit.equals(\"gu\"))\n        return Units.GU;\n    else if (unit.equals(\"px\"))\n        return Units.PX;\n    else if (unit.equals(\"%\"))\n        return Units.PERCENTS;\n    return Units.PX;\n}"
            ],
            [
                "nodePosition",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "/**\n * Retrieve a node position from its attributes (\"x\", \"y\", \"z\", or \"xy\", or\n * \"xyz\").\n *\n * @param id\n *            The node identifier.\n * @return A newly allocated array of three floats containing the (x,y,z)\n *         position of the node, or null if the node is not part of the\n *         graph.\n */\npublic static double[] nodePosition(Graph graph, String id) {\n    Node node = graph.getNode(id);\n    if (node != null)\n        return nodePosition(node);\n    return null;\n}"
            ],
            [
                "nodePointPosition",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "/**\n * Retrieve a node position from its attributes (\"x\", \"y\", \"z\", or \"xy\", or\n * \"xyz\").\n *\n * @param id\n *            The node identifier.\n * @return A newly allocated point containing the (x,y,z)\n *         position of the node, or null if the node is not part of the\n *         graph.\n */\npublic static Point3 nodePointPosition(Graph graph, String id) {\n    Node node = graph.getNode(id);\n    if (node != null)\n        return nodePointPosition(node);\n    return null;\n}"
            ],
            [
                "nodePosition",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "/**\n * Like {@link #nodePosition(Graph,String)} but use an existing node as\n * argument.\n *\n * @param node\n *            The node to consider.\n * @return A newly allocated array of three floats containing the (x,y,z)\n *         position of the node.\n */\npublic static double[] nodePosition(Node node) {\n    double[] xyz = new double[3];\n    nodePosition(node, xyz);\n    return xyz;\n}"
            ],
            [
                "nodePointPosition",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "/**\n * Like {@link #nodePointPosition(Graph,String)} but use an existing node as\n * argument.\n *\n * @param node\n *            The node to consider.\n * @return A newly allocated point containing the (x,y,z)\n *         position of the node.\n */\npublic static Point3 nodePointPosition(Node node) {\n    Point3 pos = new Point3();\n    nodePosition(node, pos);\n    return pos;\n}"
            ],
            [
                "edgeLength",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "/**\n * Compute the edge length of the given edge according to its two nodes\n * positions.\n *\n * @param id\n *            The identifier of the edge.\n * @return The edge length or -1 if the nodes of the edge have no positions.\n * @throws RuntimeException\n *             If the edge cannot be found.\n */\npublic static double edgeLength(Graph graph, String id) {\n    Edge edge = graph.getEdge(id);\n    if (edge != null)\n        return edgeLength(edge);\n    throw new RuntimeException(\"edge '\" + id + \"' cannot be found\");\n}"
            ],
            [
                "edgeLength",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "/**\n * Like {@link #edgeLength(Graph,String)} but use an existing edge as\n * argument.\n *\n * @param edge\n * @return The edge length or -1 if the nodes of the edge have no positions.\n */\npublic static double edgeLength(Edge edge) {\n    double[] xyz0 = nodePosition(edge.getNode0());\n    double[] xyz1 = nodePosition(edge.getNode1());\n    if (xyz0 == null || xyz1 == null)\n        return -1;\n    xyz0[0] = xyz1[0] - xyz0[0];\n    xyz0[1] = xyz1[1] - xyz0[1];\n    xyz0[2] = xyz1[2] - xyz0[2];\n    return Math.sqrt(xyz0[0] * xyz0[0] + xyz0[1] * xyz0[1] + xyz0[2] * xyz0[2]);\n}"
            ],
            [
                "getGlobalEnvironment",
                "org.graphstream.util",
                "Environment",
                "// --------- Static methods -----------\n/**\n * Access to the global shared environment for the whole JVM. This method\n * allows to access a shared environment, that can be read and written from\n * anywhere.\n * @return A singleton instance of the global environment.\n */\npublic static Environment getGlobalEnvironment() {\n    if (GLOBAL_ENV == null)\n        GLOBAL_ENV = new Environment();\n    return GLOBAL_ENV;\n}"
            ],
            [
                "falseFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> falseFilter() {\n    return new Filter<T>() {\n\n        public boolean isAvailable(T e) {\n            return false;\n        }\n    };\n}"
            ],
            [
                "trueFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> trueFilter() {\n    return new Filter<T>() {\n\n        public boolean isAvailable(T e) {\n            return true;\n        }\n    };\n}"
            ],
            [
                "byAttributeFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> byAttributeFilter(String key, Object expectedValue) {\n    return new ByAttributeFilter<T>(key, expectedValue);\n}"
            ],
            [
                "separateNodeAndEdgeFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element, U extends Element> Filter<Element> separateNodeAndEdgeFilter(Filter<T> nodeFilter, Filter<U> edgeFilter) {\n    return new SeparateNodeEdgeFilter<T, U>(nodeFilter, edgeFilter);\n}"
            ],
            [
                "byExtremitiesFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element, U extends Element> Filter<T> byExtremitiesFilter(Filter<U> f) {\n    return new ExtremitiesFilter<T, U>(f);\n}"
            ],
            [
                "byIdFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> byIdFilter(String idPattern) {\n    return new ByIdFilter<T>(idPattern);\n}"
            ],
            [
                "isContained",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> isContained(final Collection<? extends T> set) {\n    return new Filter<T>() {\n\n        public boolean isAvailable(T e) {\n            return set.contains(e);\n        }\n    };\n}"
            ],
            [
                "isIdContained",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> isIdContained(final Collection<String> set) {\n    return new Filter<T>() {\n\n        public boolean isAvailable(T e) {\n            return set.contains(e.getId());\n        }\n    };\n}"
            ],
            [
                "and",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> and(Filter<T> f1, Filter<T> f2) {\n    return new AndFilter<T>(f1, f2);\n}"
            ],
            [
                "or",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> or(Filter<T> f1, Filter<T> f2) {\n    return new OrFilter<T>(f1, f2);\n}"
            ],
            [
                "xor",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> xor(Filter<T> f1, Filter<T> f2) {\n    return new XorFilter<T>(f1, f2);\n}"
            ],
            [
                "not",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> not(Filter<T> f) {\n    return new NotFilter<T>(f);\n}"
            ],
            [
                "addEscapes",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "/**\n * Replaces unprintable characters by their escaped (or unicode escaped)\n * equivalents in the given string\n */\nprotected static final String addEscapes(String str) {\n    StringBuffer retval = new StringBuffer();\n    char ch;\n    for (int i = 0; i < str.length(); i++) {\n        switch(str.charAt(i)) {\n            case 0:\n                continue;\n            case '\\b':\n                retval.append(\"\\\\b\");\n                continue;\n            case '\\t':\n                retval.append(\"\\\\t\");\n                continue;\n            case '\\n':\n                retval.append(\"\\\\n\");\n                continue;\n            case '\\f':\n                retval.append(\"\\\\f\");\n                continue;\n            case '\\r':\n                retval.append(\"\\\\r\");\n                continue;\n            case '\\\"':\n                retval.append(\"\\\\\\\"\");\n                continue;\n            case '\\'':\n                retval.append(\"\\\\\\'\");\n                continue;\n            case '\\\\':\n                retval.append(\"\\\\\\\\\");\n                continue;\n            default:\n                if ((ch = str.charAt(i)) < 0x20 || ch > 0x7e) {\n                    String s = \"0000\" + Integer.toString(ch, 16);\n                    retval.append(\"\\\\u\" + s.substring(s.length() - 4, s.length()));\n                } else {\n                    retval.append(ch);\n                }\n                continue;\n        }\n    }\n    return retval.toString();\n}"
            ],
            [
                "LexicalError",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "/**\n * Returns a detailed message for the Error when it is thrown by the token\n * manager to indicate a lexical error. Parameters : EOFSeen : indicates if\n * EOF caused the lexical error curLexState : lexical state in which this\n * error occurred errorLine : line number when the error occurred\n * errorColumn : column number when the error occurred errorAfter : prefix\n * that was seen before this error occurred curchar : the offending\n * character Note: You can customize the lexical error message by modifying\n * this method.\n */\nprotected static String LexicalError(boolean EOFSeen, int lexState, int errorLine, int errorColumn, String errorAfter, char curChar) {\n    return (\"Lexical error at line \" + errorLine + \", column \" + errorColumn + \".  Encountered: \" + (EOFSeen ? \"<EOF> \" : (\"\\\"\" + addEscapes(String.valueOf(curChar)) + \"\\\"\") + \" (\" + (int) curChar + \"), \") + \"after : \\\"\" + addEscapes(errorAfter) + \"\\\"\");\n}"
            ],
            [
                "add_escapes",
                "org.graphstream.util.parser",
                "ParseException",
                "/**\n * Used to convert raw characters to their escaped version when these raw\n * version cannot be used as part of an ASCII string literal.\n */\nstatic String add_escapes(String str) {\n    StringBuffer retval = new StringBuffer();\n    char ch;\n    for (int i = 0; i < str.length(); i++) {\n        switch(str.charAt(i)) {\n            case 0:\n                continue;\n            case '\\b':\n                retval.append(\"\\\\b\");\n                continue;\n            case '\\t':\n                retval.append(\"\\\\t\");\n                continue;\n            case '\\n':\n                retval.append(\"\\\\n\");\n                continue;\n            case '\\f':\n                retval.append(\"\\\\f\");\n                continue;\n            case '\\r':\n                retval.append(\"\\\\r\");\n                continue;\n            case '\\\"':\n                retval.append(\"\\\\\\\"\");\n                continue;\n            case '\\'':\n                retval.append(\"\\\\\\'\");\n                continue;\n            case '\\\\':\n                retval.append(\"\\\\\\\\\");\n                continue;\n            default:\n                if ((ch = str.charAt(i)) < 0x20 || ch > 0x7e) {\n                    String s = \"0000\" + Integer.toString(ch, 16);\n                    retval.append(\"\\\\u\" + s.substring(s.length() - 4, s.length()));\n                } else {\n                    retval.append(ch);\n                }\n                continue;\n        }\n    }\n    return retval.toString();\n}"
            ],
            [
                "newToken",
                "org.graphstream.util.parser",
                "Token",
                "/**\n * Returns a new Token object, by default. However, if you want, you can\n * create and return subclass objects based on the value of ofKind. Simply\n * add the cases to the switch for all those special cases. For example, if\n * you have a subclass of Token called IDToken that you want to create if\n * ofKind is ID, simply add something like :\n *\n * case MyParserConstants.ID : return new IDToken(ofKind, image);\n *\n * to the following switch statement. Then you can cast matchedToken\n * variable to the appropriate type and use sit in your lexical actions.\n */\npublic static Token newToken(int ofKind, String image) {\n    switch(ofKind) {\n        default:\n            return new Token(ofKind, image);\n    }\n}"
            ],
            [
                "newToken",
                "org.graphstream.util.parser",
                "Token",
                "public static Token newToken(int ofKind) {\n    return newToken(ofKind, null);\n}"
            ],
            [
                "countStepInFile",
                "org.graphstream.util",
                "StepCounter",
                "/**\n * Count step contains in a file.\n *\n * @param path\n *            path to the file\n * @return count of step event in the file\n * @throws IOException\n * @see org.graphstream.stream.file.FileSourceFactory\n */\npublic static int countStepInFile(String path) throws IOException {\n    StepCounter counter = new StepCounter();\n    FileSource source = FileSourceFactory.sourceFor(path);\n    source.addElementSink(counter);\n    source.readAll(path);\n    return counter.getStepCount();\n}"
            ],
            [
                "GET",
                "org.graphstream.stream.net",
                "HTTPSource",
                "@SuppressWarnings(\"unchecked\")\nprotected static HashMap<String, Object> GET(HttpExchange ex) {\n    HashMap<String, Object> get = new HashMap<String, Object>();\n    String[] args = ex.getRequestURI().getRawQuery().split(\"[&]\");\n    for (String arg : args) {\n        String[] kv = arg.split(\"[=]\");\n        String k, v;\n        k = null;\n        v = null;\n        try {\n            if (kv.length > 0)\n                k = URLDecoder.decode(kv[0], System.getProperty(\"file.encoding\"));\n            if (kv.length > 1)\n                v = URLDecoder.decode(kv[1], System.getProperty(\"file.encoding\"));\n            if (get.containsKey(k)) {\n                Object o = get.get(k);\n                if (o instanceof LinkedList<?>)\n                    ((LinkedList<Object>) o).add(v);\n                else {\n                    LinkedList<Object> l = new LinkedList<Object>();\n                    l.add(o);\n                    l.add(v);\n                    get.put(k, l);\n                }\n            } else {\n                get.put(k, v);\n            }\n        } catch (UnsupportedEncodingException e) {\n            e.printStackTrace();\n        }\n    }\n    return get;\n}"
            ],
            [
                "sinkFor",
                "org.graphstream.stream.file",
                "FileSinkFactory",
                "/**\n * Looks at the file name given and its extension and propose a file output\n * for the format that match this extension.\n *\n * @param filename\n *            The file name where the graph will be written.\n * @return A file sink or null.\n */\npublic static FileSink sinkFor(String filename) {\n    if (filename.indexOf('.') > 0) {\n        String ext = filename.substring(filename.lastIndexOf('.') + 1);\n        ext = ext.toLowerCase();\n        if (ext2sink.containsKey(ext)) {\n            Class<? extends FileSink> fsink = ext2sink.get(ext);\n            try {\n                return fsink.newInstance();\n            } catch (InstantiationException e) {\n                e.printStackTrace();\n            } catch (IllegalAccessException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n    return null;\n}"
            ],
            [
                "formatId",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "protected static String formatId(String id) {\n    return \"node\" + id.replaceAll(\"\\\\W\", \"_\");\n}"
            ],
            [
                "getInt",
                "org.graphstream.stream.file.pajek",
                "PajekContext",
                "protected static int getInt(Token nb) throws ParseException {\n    try {\n        return Integer.parseInt(nb.image);\n    } catch (Exception e) {\n        throw new ParseException(String.format(\"%d:%d: %s not an integer\", nb.beginLine, nb.beginColumn, nb.image));\n    }\n}"
            ],
            [
                "getReal",
                "org.graphstream.stream.file.pajek",
                "PajekContext",
                "protected static double getReal(Token nb) throws ParseException {\n    try {\n        return Double.parseDouble(nb.image);\n    } catch (Exception e) {\n        throw new ParseException(String.format(\"%d:%d: %s not a real\", nb.beginLine, nb.beginColumn, nb.image));\n    }\n}"
            ],
            [
                "toColorValue",
                "org.graphstream.stream.file.pajek",
                "PajekContext",
                "public static String toColorValue(Token R, Token G, Token B) throws ParseException {\n    double r = getReal(R);\n    double g = getReal(G);\n    double b = getReal(B);\n    return String.format(\"rgb(%d, %d, %d)\", (int) (r * 255), (int) (g * 255), (int) (b * 255));\n}"
            ],
            [
                "sourceFor",
                "org.graphstream.stream.file",
                "FileSourceFactory",
                "/**\n * Create a file input for the given file name.\n *\n * <p>\n * This method first tests if the file is a regular file and is readable. If\n * so, it opens it and reads the magic cookie to test the known file formats\n * that can be inferred from their header. If it works, it returns a file\n * input for the format. Else it looks at the file name extension, and\n * returns a file input for the extension. Finally if all fail, it throws a\n * NotFoundException.\n * </p>\n *\n * <p>\n * Notice that this method only creates the file input and does not connect\n * it to a graph.\n * </p>\n *\n * @param fileName\n *            Name of the graph file.\n * @return A graph reader suitable for the fileName graph format.\n * @throws IOException\n *             If the file is not readable or accessible.\n */\npublic static FileSource sourceFor(String fileName) throws IOException {\n    File file = new File(fileName);\n    if (!file.isFile())\n        throw new IOException(\"not a regular file '\" + fileName + \"'\");\n    if (!file.canRead())\n        throw new IOException(\"not a readable file '\" + fileName + \"'\");\n    // Try to read the beginning of the file.\n    RandomAccessFile in = new RandomAccessFile(fileName, \"r\");\n    byte[] b = new byte[10];\n    int n = in.read(b, 0, 10);\n    // System.err.printf( \"[\" );\n    // for( int i=0; i<n; ++i )\n    // {\n    // System.err.printf( \"%c\", (char)b[i] );\n    // }\n    // System.err.printf( \"]%n\" );\n    in.close();\n    // Surely match a DGS file, as DGS files are well done and have a\n    // signature.\n    if (n >= 3 && b[0] == 'D' && b[1] == 'G' && b[2] == 'S') {\n        if (n >= 6 && b[3] == '0' && b[4] == '0') {\n            if (b[5] == '1' || b[5] == '2') {\n                return new FileSourceDGS1And2();\n            } else if (b[5] == '3' || b[5] == '4') {\n                return new FileSourceDGS();\n            }\n        }\n    }\n    // Maybe match a GML file as most GML files begin by the line \"graph [\",\n    // but not sure, you may create a GML file that starts by a comment, an\n    // empty line, with any kind of spaces, etc.\n    if (n >= 7 && b[0] == 'g' && b[1] == 'r' && b[2] == 'a' && b[3] == 'p' && b[4] == 'h' && b[5] == ' ' && b[6] == '[') {\n        return new org.graphstream.stream.file.FileSourceGML();\n    }\n    if (n >= 4 && b[0] == '(' && b[1] == 't' && b[2] == 'l' && b[3] == 'p')\n        return new FileSourceTLP();\n    // The web reader.\n    String flc = fileName.toLowerCase();\n    // If we did not found anything, we try with the filename extension ...\n    if (flc.endsWith(\".dgs\")) {\n        return new FileSourceDGS();\n    }\n    if (flc.endsWith(\".gml\") || flc.endsWith(\".dgml\")) {\n        return new org.graphstream.stream.file.FileSourceGML();\n    }\n    if (flc.endsWith(\".net\")) {\n        return new FileSourcePajek();\n    }\n    if (flc.endsWith(\".chaco\") || flc.endsWith(\".graph\")) {\n        // return new GraphReaderChaco();\n    }\n    if (flc.endsWith(\".dot\")) {\n        return new org.graphstream.stream.file.FileSourceDOT();\n    }\n    if (flc.endsWith(\".edge\")) {\n        return new FileSourceEdge();\n    }\n    if (flc.endsWith(\".lgl\")) {\n        return new FileSourceLGL();\n    }\n    if (flc.endsWith(\".ncol\")) {\n        return new FileSourceNCol();\n    }\n    if (flc.endsWith(\".tlp\")) {\n        return new FileSourceTLP();\n    }\n    if (flc.endsWith(\".xml\")) {\n        String root = getXMLRootElement(fileName);\n        if (root.equalsIgnoreCase(\"gexf\"))\n            return new FileSourceGEXF();\n        return new FileSourceGraphML();\n    }\n    if (flc.endsWith(\".gexf\")) {\n        return new FileSourceGEXF();\n    }\n    return null;\n}"
            ],
            [
                "getXMLRootElement",
                "org.graphstream.stream.file",
                "FileSourceFactory",
                "public static String getXMLRootElement(String fileName) throws IOException {\n    FileReader stream = new FileReader(fileName);\n    XMLEventReader reader;\n    XMLEvent e;\n    String root;\n    try {\n        reader = XMLInputFactory.newInstance().createXMLEventReader(stream);\n        do {\n            e = reader.nextEvent();\n        } while (!e.isStartElement() && !e.isEndDocument());\n        if (e.isEndDocument())\n            throw new IOException(\"document ended before catching root element\");\n        root = e.asStartElement().getName().getLocalPart();\n        reader.close();\n        stream.close();\n        return root;\n    } catch (XMLStreamException ex) {\n        throw new IOException(ex);\n    } catch (FactoryConfigurationError ex) {\n        throw new IOException(ex);\n    }\n}"
            ],
            [
                "formatStringForQuoting",
                "org.graphstream.stream.file",
                "FileSinkDGSUtility",
                "protected static String formatStringForQuoting(String str) {\n    return str.replaceAll(\"(^|[^\\\\\\\\])\\\"\", \"$1\\\\\\\\\\\"\");\n}"
            ],
            [
                "attributeString",
                "org.graphstream.stream.file",
                "FileSinkDGSUtility",
                "protected static String attributeString(String key, Object value, boolean remove) {\n    if (key == null || key.length() == 0)\n        return null;\n    if (remove) {\n        return String.format(\" -\\\"%s\\\"\", key);\n    } else {\n        if (value != null && value.getClass().isArray())\n            return String.format(\" \\\"%s\\\":%s\", key, arrayString(value));\n        else\n            return String.format(\" \\\"%s\\\":%s\", key, valueString(value));\n    }\n}"
            ],
            [
                "arrayString",
                "org.graphstream.stream.file",
                "FileSinkDGSUtility",
                "protected static String arrayString(Object value) {\n    if (value != null && value.getClass().isArray()) {\n        StringBuilder sb = new StringBuilder();\n        sb.append(\"{\");\n        if (Array.getLength(value) == 0)\n            sb.append(\"\\\"\\\"\");\n        else\n            sb.append(arrayString(Array.get(value, 0)));\n        for (int i = 1; i < Array.getLength(value); ++i) sb.append(String.format(\",%s\", arrayString(Array.get(value, i))));\n        sb.append(\"}\");\n        return sb.toString();\n    } else {\n        return valueString(value);\n    }\n}"
            ],
            [
                "valueString",
                "org.graphstream.stream.file",
                "FileSinkDGSUtility",
                "protected static String valueString(Object value) {\n    if (value == null)\n        return \"\\\"\\\"\";\n    if (value instanceof CharSequence) {\n        if (value instanceof String)\n            return String.format(\"\\\"%s\\\"\", formatStringForQuoting((String) value));\n        else\n            return String.format(\"\\\"%s\\\"\", (CharSequence) value);\n    } else if (value instanceof Number) {\n        Number nval = (Number) value;\n        if (value instanceof Integer || value instanceof Short || value instanceof Byte || value instanceof Long)\n            return String.format(Locale.US, \"%d\", nval.longValue());\n        else\n            return String.format(Locale.US, \"%f\", nval.doubleValue());\n    } else if (value instanceof Boolean) {\n        return String.format(Locale.US, \"%b\", ((Boolean) value));\n    } else if (value instanceof Character) {\n        return String.format(\"\\\"%c\\\"\", ((Character) value).charValue());\n    } else if (value instanceof Object[]) {\n        Object[] array = (Object[]) value;\n        int n = array.length;\n        StringBuffer sb = new StringBuffer();\n        if (array.length > 0)\n            sb.append(valueString(array[0]));\n        for (int i = 1; i < n; i++) {\n            sb.append(\",\");\n            sb.append(valueString(array[i]));\n        }\n        return sb.toString();\n    } else if (value instanceof HashMap<?, ?> || value instanceof CompoundAttribute) {\n        HashMap<?, ?> hash;\n        if (value instanceof CompoundAttribute)\n            hash = ((CompoundAttribute) value).toHashMap();\n        else\n            hash = (HashMap<?, ?>) value;\n        return hashToString(hash);\n    } else if (value instanceof Color) {\n        Color c = (Color) value;\n        return String.format(\"#%02X%02X%02X%02X\", c.getRed(), c.getGreen(), c.getBlue(), c.getAlpha());\n    } else {\n        return String.format(\"\\\"%s\\\"\", value.toString());\n    }\n}"
            ],
            [
                "hashToString",
                "org.graphstream.stream.file",
                "FileSinkDGSUtility",
                "protected static String hashToString(HashMap<?, ?> hash) {\n    StringBuilder sb = new StringBuilder();\n    sb.append(\"[ \");\n    for (Object key : hash.keySet()) {\n        sb.append(attributeString(key.toString(), hash.get(key), false));\n        sb.append(\",\");\n    }\n    sb.append(']');\n    return sb.toString();\n}"
            ],
            [
                "encodeObject",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Serializes an object and returns the Base64-encoded\n * version of that serialized object.\n *\n * <p>As of v 2.3, if the object\n * cannot be serialized or there is another error,\n * the method will throw an java.io.IOException. <b>This is new to v2.3!</b>\n * In earlier versions, it just returned a null value, but\n * in retrospect that's a pretty poor way to handle it.</p>\n *\n * The object is not GZip-compressed before being encoded.\n *\n * @param serializableObject The object to encode\n * @return The Base64-encoded object\n * @throws java.io.IOException if there is an error\n * @throws NullPointerException if serializedObject is null\n * @since 1.4\n */\npublic static String encodeObject(java.io.Serializable serializableObject) throws java.io.IOException {\n    return encodeObject(serializableObject, NO_OPTIONS);\n}"
            ],
            [
                "encodeObject",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end encodeObject\n/**\n * Serializes an object and returns the Base64-encoded\n * version of that serialized object.\n *\n * <p>As of v 2.3, if the object\n * cannot be serialized or there is another error,\n * the method will throw an java.io.IOException. <b>This is new to v2.3!</b>\n * In earlier versions, it just returned a null value, but\n * in retrospect that's a pretty poor way to handle it.</p>\n *\n * The object is not GZip-compressed before being encoded.\n * <p>\n * Example options:<pre>\n *   GZIP: gzip-compresses object before encoding it.\n *   DO_BREAK_LINES: break lines at 76 characters\n * </pre>\n * <p>\n * Example: <code>encodeObject( myObj, Base64.GZIP )</code> or\n * <p>\n * Example: <code>encodeObject( myObj, Base64.GZIP | Base64.DO_BREAK_LINES )</code>\n *\n * @param serializableObject The object to encode\n * @param options Specified options\n * @return The Base64-encoded object\n * @see Base64#GZIP\n * @see Base64#DO_BREAK_LINES\n * @throws java.io.IOException if there is an error\n * @since 2.0\n */\npublic static String encodeObject(java.io.Serializable serializableObject, int options) throws java.io.IOException {\n    if (serializableObject == null) {\n        throw new NullPointerException(\"Cannot serialize a null object.\");\n    }\n    // end if: null\n    // Streams\n    java.io.ByteArrayOutputStream baos = null;\n    java.io.OutputStream b64os = null;\n    java.util.zip.GZIPOutputStream gzos = null;\n    java.io.ObjectOutputStream oos = null;\n    try {\n        // ObjectOutputStream -> (GZIP) -> Base64 -> ByteArrayOutputStream\n        baos = new java.io.ByteArrayOutputStream();\n        b64os = new Base64.OutputStream(baos, ENCODE | options);\n        if ((options & GZIP) != 0) {\n            // Gzip\n            gzos = new java.util.zip.GZIPOutputStream(b64os);\n            oos = new java.io.ObjectOutputStream(gzos);\n        } else {\n            // Not gzipped\n            oos = new java.io.ObjectOutputStream(b64os);\n        }\n        oos.writeObject(serializableObject);\n    }// end try\n     catch (java.io.IOException e) {\n        // Catch it and then throw it immediately so that\n        // the finally{} block is called for cleanup.\n        throw e;\n    } finally // end catch\n    {\n        try {\n            oos.close();\n        } catch (Exception e) {\n        }\n        try {\n            gzos.close();\n        } catch (Exception e) {\n        }\n        try {\n            b64os.close();\n        } catch (Exception e) {\n        }\n        try {\n            baos.close();\n        } catch (Exception e) {\n        }\n    }\n    // end finally\n    // Return value according to relevant encoding.\n    try {\n        return new String(baos.toByteArray(), PREFERRED_ENCODING);\n    }// end try\n     catch (java.io.UnsupportedEncodingException uue) {\n        // Fall back to some Java default\n        return new String(baos.toByteArray());\n    }\n    // end catch\n}"
            ],
            [
                "encodeBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end encode\n/**\n * Encodes a byte array into Base64 notation.\n * Does not GZip-compress data.\n *\n * @param source The data to convert\n * @return The data in Base64-encoded form\n * @throws NullPointerException if source array is null\n * @since 1.4\n */\npublic static String encodeBytes(byte[] source) {\n    // Since we're not going to have the GZIP encoding turned on,\n    // we're not going to have an java.io.IOException thrown, so\n    // we should not force the user to have to catch it.\n    String encoded = null;\n    try {\n        encoded = encodeBytes(source, 0, source.length, NO_OPTIONS);\n    } catch (java.io.IOException ex) {\n        assert false : ex.getMessage();\n    }\n    // end catch\n    assert encoded != null;\n    return encoded;\n}"
            ],
            [
                "encodeBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end encodeBytes\n/**\n * Encodes a byte array into Base64 notation.\n * <p>\n * Example options:<pre>\n *   GZIP: gzip-compresses object before encoding it.\n *   DO_BREAK_LINES: break lines at 76 characters\n *     <i>Note: Technically, this makes your encoding non-compliant.</i>\n * </pre>\n * <p>\n * Example: <code>encodeBytes( myData, Base64.GZIP )</code> or\n * <p>\n * Example: <code>encodeBytes( myData, Base64.GZIP | Base64.DO_BREAK_LINES )</code>\n *\n * <p>As of v 2.3, if there is an error with the GZIP stream,\n * the method will throw an java.io.IOException. <b>This is new to v2.3!</b>\n * In earlier versions, it just returned a null value, but\n * in retrospect that's a pretty poor way to handle it.</p>\n *\n * @param source The data to convert\n * @param options Specified options\n * @return The Base64-encoded data as a String\n * @see Base64#GZIP\n * @see Base64#DO_BREAK_LINES\n * @throws java.io.IOException if there is an error\n * @throws NullPointerException if source array is null\n * @since 2.0\n */\npublic static String encodeBytes(byte[] source, int options) throws java.io.IOException {\n    return encodeBytes(source, 0, source.length, options);\n}"
            ],
            [
                "encodeBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end encodeBytes\n/**\n * Encodes a byte array into Base64 notation.\n * Does not GZip-compress data.\n *\n * <p>As of v 2.3, if there is an error,\n * the method will throw an java.io.IOException. <b>This is new to v2.3!</b>\n * In earlier versions, it just returned a null value, but\n * in retrospect that's a pretty poor way to handle it.</p>\n *\n * @param source The data to convert\n * @param off Offset in array where conversion should begin\n * @param len Length of data to convert\n * @return The Base64-encoded data as a String\n * @throws NullPointerException if source array is null\n * @throws IllegalArgumentException if source array, offset, or length are invalid\n * @since 1.4\n */\npublic static String encodeBytes(byte[] source, int off, int len) {\n    // Since we're not going to have the GZIP encoding turned on,\n    // we're not going to have an java.io.IOException thrown, so\n    // we should not force the user to have to catch it.\n    String encoded = null;\n    try {\n        encoded = encodeBytes(source, off, len, NO_OPTIONS);\n    } catch (java.io.IOException ex) {\n        assert false : ex.getMessage();\n    }\n    // end catch\n    assert encoded != null;\n    return encoded;\n}"
            ],
            [
                "encodeBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end encodeBytes\n/**\n * Encodes a byte array into Base64 notation.\n * <p>\n * Example options:<pre>\n *   GZIP: gzip-compresses object before encoding it.\n *   DO_BREAK_LINES: break lines at 76 characters\n *     <i>Note: Technically, this makes your encoding non-compliant.</i>\n * </pre>\n * <p>\n * Example: <code>encodeBytes( myData, Base64.GZIP )</code> or\n * <p>\n * Example: <code>encodeBytes( myData, Base64.GZIP | Base64.DO_BREAK_LINES )</code>\n *\n * <p>As of v 2.3, if there is an error with the GZIP stream,\n * the method will throw an java.io.IOException. <b>This is new to v2.3!</b>\n * In earlier versions, it just returned a null value, but\n * in retrospect that's a pretty poor way to handle it.</p>\n *\n * @param source The data to convert\n * @param off Offset in array where conversion should begin\n * @param len Length of data to convert\n * @param options Specified options\n * @return The Base64-encoded data as a String\n * @see Base64#GZIP\n * @see Base64#DO_BREAK_LINES\n * @throws java.io.IOException if there is an error\n * @throws NullPointerException if source array is null\n * @throws IllegalArgumentException if source array, offset, or length are invalid\n * @since 2.0\n */\npublic static String encodeBytes(byte[] source, int off, int len, int options) throws java.io.IOException {\n    byte[] encoded = encodeBytesToBytes(source, off, len, options);\n    // Return value according to relevant encoding.\n    try {\n        return new String(encoded, PREFERRED_ENCODING);\n    }// end try\n     catch (java.io.UnsupportedEncodingException uue) {\n        return new String(encoded);\n    }\n    // end catch\n}"
            ],
            [
                "encodeBytesToBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end encodeBytes\n/**\n * Similar to {@link #encodeBytes(byte[])} but returns\n * a byte array instead of instantiating a String. This is more efficient\n * if you're working with I/O streams and have large data sets to encode.\n *\n * @param source The data to convert\n * @return The Base64-encoded data as a byte[] (of ASCII characters)\n * @throws NullPointerException if source array is null\n * @since 2.3.1\n */\npublic static byte[] encodeBytesToBytes(byte[] source) {\n    byte[] encoded = null;\n    try {\n        encoded = encodeBytesToBytes(source, 0, source.length, Base64.NO_OPTIONS);\n    } catch (java.io.IOException ex) {\n        assert false : \"IOExceptions only come from GZipping, which is turned off: \" + ex.getMessage();\n    }\n    return encoded;\n}"
            ],
            [
                "encodeBytesToBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Similar to {@link #encodeBytes(byte[], int, int, int)} but returns\n * a byte array instead of instantiating a String. This is more efficient\n * if you're working with I/O streams and have large data sets to encode.\n *\n * @param source The data to convert\n * @param off Offset in array where conversion should begin\n * @param len Length of data to convert\n * @param options Specified options\n * @return The Base64-encoded data as a String\n * @see Base64#GZIP\n * @see Base64#DO_BREAK_LINES\n * @throws java.io.IOException if there is an error\n * @throws NullPointerException if source array is null\n * @throws IllegalArgumentException if source array, offset, or length are invalid\n * @since 2.3.1\n */\npublic static byte[] encodeBytesToBytes(byte[] source, int off, int len, int options) throws java.io.IOException {\n    if (source == null) {\n        throw new NullPointerException(\"Cannot serialize a null array.\");\n    }\n    // end if: null\n    if (off < 0) {\n        throw new IllegalArgumentException(\"Cannot have negative offset: \" + off);\n    }\n    // end if: off < 0\n    if (len < 0) {\n        throw new IllegalArgumentException(\"Cannot have length offset: \" + len);\n    }\n    // end if: len < 0\n    if (off + len > source.length) {\n        throw new IllegalArgumentException(String.format(\"Cannot have offset of %d and length of %d with array of length %d\", off, len, source.length));\n    }\n    // end if: off < 0\n    // Compress?\n    if ((options & GZIP) != 0) {\n        java.io.ByteArrayOutputStream baos = null;\n        java.util.zip.GZIPOutputStream gzos = null;\n        Base64.OutputStream b64os = null;\n        try {\n            // GZip -> Base64 -> ByteArray\n            baos = new java.io.ByteArrayOutputStream();\n            b64os = new Base64.OutputStream(baos, ENCODE | options);\n            gzos = new java.util.zip.GZIPOutputStream(b64os);\n            gzos.write(source, off, len);\n            gzos.close();\n        }// end try\n         catch (java.io.IOException e) {\n            // Catch it and then throw it immediately so that\n            // the finally{} block is called for cleanup.\n            throw e;\n        } finally // end catch\n        {\n            try {\n                gzos.close();\n            } catch (Exception e) {\n            }\n            try {\n                b64os.close();\n            } catch (Exception e) {\n            }\n            try {\n                baos.close();\n            } catch (Exception e) {\n            }\n        }\n        // end finally\n        return baos.toByteArray();\n    } else // end if: compress\n    // Else, don't compress. Better not to use streams at all then.\n    {\n        boolean breakLines = (options & DO_BREAK_LINES) != 0;\n        //int    len43   = len * 4 / 3;\n        //byte[] outBuff = new byte[   ( len43 )                      // Main 4:3\n        //                           + ( (len % 3) > 0 ? 4 : 0 )      // Account for padding\n        //                           + (breakLines ? ( len43 / MAX_LINE_LENGTH ) : 0) ]; // New lines\n        // Try to determine more precisely how big the array needs to be.\n        // If we get it right, we don't have to do an array copy, and\n        // we save a bunch of memory.\n        // Bytes needed for actual encoding\n        int encLen = (len / 3) * 4 + (len % 3 > 0 ? 4 : 0);\n        if (breakLines) {\n            // Plus extra newline characters\n            encLen += encLen / MAX_LINE_LENGTH;\n        }\n        byte[] outBuff = new byte[encLen];\n        int d = 0;\n        int e = 0;\n        int len2 = len - 2;\n        int lineLength = 0;\n        for (; d < len2; d += 3, e += 4) {\n            encode3to4(source, d + off, 3, outBuff, e, options);\n            lineLength += 4;\n            if (breakLines && lineLength >= MAX_LINE_LENGTH) {\n                outBuff[e + 4] = NEW_LINE;\n                e++;\n                lineLength = 0;\n            }\n            // end if: end of line\n        }\n        // en dfor: each piece of array\n        if (d < len) {\n            encode3to4(source, d + off, len - d, outBuff, e, options);\n            e += 4;\n        }\n        // end if: some padding needed\n        // Only resize array if we didn't guess it right.\n        if (e <= outBuff.length - 1) {\n            // If breaking lines and the last byte falls right at\n            // the line length (76 bytes per line), there will be\n            // one extra byte, and the array will need to be resized.\n            // Not too bad of an estimate on array size, I'd say.\n            byte[] finalOut = new byte[e];\n            System.arraycopy(outBuff, 0, finalOut, 0, e);\n            //System.err.println(\"Having to resize array from \" + outBuff.length + \" to \" + e );\n            return finalOut;\n        } else {\n            //System.err.println(\"No need to resize array.\");\n            return outBuff;\n        }\n    }\n    // end else: don't compress\n}"
            ],
            [
                "decode",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end decodeToBytes\n/**\n * Low-level access to decoding ASCII characters in\n * the form of a byte array. <strong>Ignores GUNZIP option, if\n * it's set.</strong> This is not generally a recommended method,\n * although it is used internally as part of the decoding process.\n * Special case: if len = 0, an empty array is returned. Still,\n * if you need more speed and reduced memory footprint (and aren't\n * gzipping), consider this method.\n *\n * @param source The Base64 encoded data\n * @return decoded data\n * @since 2.3.1\n */\npublic static byte[] decode(byte[] source) throws java.io.IOException {\n    byte[] decoded = null;\n    //        try {\n    decoded = decode(source, 0, source.length, Base64.NO_OPTIONS);\n    //        } catch( java.io.IOException ex ) {\n    //            assert false : \"IOExceptions only come from GZipping, which is turned off: \" + ex.getMessage();\n    //        }\n    return decoded;\n}"
            ],
            [
                "decode",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Low-level access to decoding ASCII characters in\n * the form of a byte array. <strong>Ignores GUNZIP option, if\n * it's set.</strong> This is not generally a recommended method,\n * although it is used internally as part of the decoding process.\n * Special case: if len = 0, an empty array is returned. Still,\n * if you need more speed and reduced memory footprint (and aren't\n * gzipping), consider this method.\n *\n * @param source The Base64 encoded data\n * @param off    The offset of where to begin decoding\n * @param len    The length of characters to decode\n * @param options Can specify options such as alphabet type to use\n * @return decoded data\n * @throws java.io.IOException If bogus characters exist in source data\n * @since 1.3\n */\npublic static byte[] decode(byte[] source, int off, int len, int options) throws java.io.IOException {\n    // Lots of error checking and exception throwing\n    if (source == null) {\n        throw new NullPointerException(\"Cannot decode null source array.\");\n    }\n    // end if\n    if (off < 0 || off + len > source.length) {\n        throw new IllegalArgumentException(String.format(\"Source array with length %d cannot have offset of %d and process %d bytes.\", source.length, off, len));\n    }\n    // end if\n    if (len == 0) {\n        return new byte[0];\n    } else if (len < 4) {\n        throw new IllegalArgumentException(\"Base64-encoded string must have at least four characters, but length specified was \" + len);\n    }\n    // end if\n    byte[] DECODABET = getDecodabet(options);\n    // Estimate on array size\n    int len34 = len * 3 / 4;\n    // Upper limit on size of output\n    byte[] outBuff = new byte[len34];\n    // Keep track of where we're writing\n    int outBuffPosn = 0;\n    // Four byte buffer from source, eliminating white space\n    byte[] b4 = new byte[4];\n    // Keep track of four byte input buffer\n    int b4Posn = 0;\n    // Source array counter\n    int i = 0;\n    // Special value from DECODABET\n    byte sbiDecode = 0;\n    for (i = off; i < off + len; i++) {\n        // Loop through source\n        sbiDecode = DECODABET[source[i] & 0xFF];\n        // White space, Equals sign, or legit Base64 character\n        // Note the values such as -5 and -9 in the\n        // DECODABETs at the top of the file.\n        if (sbiDecode >= WHITE_SPACE_ENC) {\n            if (sbiDecode >= EQUALS_SIGN_ENC) {\n                // Save non-whitespace\n                b4[b4Posn++] = source[i];\n                if (b4Posn > 3) {\n                    // Time to decode?\n                    outBuffPosn += decode4to3(b4, 0, outBuff, outBuffPosn, options);\n                    b4Posn = 0;\n                    // If that was the equals sign, break out of 'for' loop\n                    if (source[i] == EQUALS_SIGN) {\n                        break;\n                    }\n                    // end if: equals sign\n                }\n                // end if: quartet built\n            }\n            // end if: equals sign or better\n        } else // end if: white space, equals sign or better\n        {\n            // There's a bad input character in the Base64 stream.\n            throw new java.io.IOException(String.format(\"Bad Base64 input character decimal %d in array position %d\", ((int) source[i]) & 0xFF, i));\n        }\n        // end else:\n    }\n    // each input character\n    byte[] out = new byte[outBuffPosn];\n    System.arraycopy(outBuff, 0, out, 0, outBuffPosn);\n    return out;\n}"
            ],
            [
                "decode",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end decode\n/**\n * Decodes data from Base64 notation, automatically\n * detecting gzip-compressed data and decompressing it.\n *\n * @param s the string to decode\n * @return the decoded data\n * @throws java.io.IOException If there is a problem\n * @since 1.4\n */\npublic static byte[] decode(String s) throws java.io.IOException {\n    return decode(s, NO_OPTIONS);\n}"
            ],
            [
                "decode",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Decodes data from Base64 notation, automatically\n * detecting gzip-compressed data and decompressing it.\n *\n * @param s the string to decode\n * @param options encode options such as URL_SAFE\n * @return the decoded data\n * @throws java.io.IOException if there is an error\n * @throws NullPointerException if <tt>s</tt> is null\n * @since 1.4\n */\npublic static byte[] decode(String s, int options) throws java.io.IOException {\n    if (s == null) {\n        throw new NullPointerException(\"Input string was null.\");\n    }\n    // end if\n    byte[] bytes;\n    try {\n        bytes = s.getBytes(PREFERRED_ENCODING);\n    }// end try\n     catch (java.io.UnsupportedEncodingException uee) {\n        bytes = s.getBytes();\n    }\n    // end catch\n    //</change>\n    // Decode\n    bytes = decode(bytes, 0, bytes.length, options);\n    // Check to see if it's gzip-compressed\n    // GZIP Magic Two-Byte Number: 0x8b1f (35615)\n    boolean dontGunzip = (options & DONT_GUNZIP) != 0;\n    if ((bytes != null) && (bytes.length >= 4) && (!dontGunzip)) {\n        int head = ((int) bytes[0] & 0xff) | ((bytes[1] << 8) & 0xff00);\n        if (java.util.zip.GZIPInputStream.GZIP_MAGIC == head) {\n            java.io.ByteArrayInputStream bais = null;\n            java.util.zip.GZIPInputStream gzis = null;\n            java.io.ByteArrayOutputStream baos = null;\n            byte[] buffer = new byte[2048];\n            int length = 0;\n            try {\n                baos = new java.io.ByteArrayOutputStream();\n                bais = new java.io.ByteArrayInputStream(bytes);\n                gzis = new java.util.zip.GZIPInputStream(bais);\n                while ((length = gzis.read(buffer)) >= 0) {\n                    baos.write(buffer, 0, length);\n                }\n                // end while: reading input\n                // No error? Get new bytes.\n                bytes = baos.toByteArray();\n            }// end try\n             catch (java.io.IOException e) {\n                e.printStackTrace();\n                // Just return originally-decoded bytes\n            } finally // end catch\n            {\n                try {\n                    baos.close();\n                } catch (Exception e) {\n                }\n                try {\n                    gzis.close();\n                } catch (Exception e) {\n                }\n                try {\n                    bais.close();\n                } catch (Exception e) {\n                }\n            }\n            // end finally\n        }\n        // end if: gzipped\n    }\n    // end if: bytes.length >= 2\n    return bytes;\n}"
            ],
            [
                "decodeToObject",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end decode\n/**\n * Attempts to decode Base64 data and deserialize a Java\n * Object within. Returns <tt>null</tt> if there was an error.\n *\n * @param encodedObject The Base64 data to decode\n * @return The decoded and deserialized object\n * @throws NullPointerException if encodedObject is null\n * @throws java.io.IOException if there is a general error\n * @throws ClassNotFoundException if the decoded object is of a\n *         class that cannot be found by the JVM\n * @since 1.5\n */\npublic static Object decodeToObject(String encodedObject) throws java.io.IOException, java.lang.ClassNotFoundException {\n    return decodeToObject(encodedObject, NO_OPTIONS, null);\n}"
            ],
            [
                "decodeToObject",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Attempts to decode Base64 data and deserialize a Java\n * Object within. Returns <tt>null</tt> if there was an error.\n * If <tt>loader</tt> is not null, it will be the class loader\n * used when deserializing.\n *\n * @param encodedObject The Base64 data to decode\n * @param options Various parameters related to decoding\n * @param loader Optional class loader to use in deserializing classes.\n * @return The decoded and deserialized object\n * @throws NullPointerException if encodedObject is null\n * @throws java.io.IOException if there is a general error\n * @throws ClassNotFoundException if the decoded object is of a\n *         class that cannot be found by the JVM\n * @since 2.3.4\n */\npublic static Object decodeToObject(String encodedObject, int options, final ClassLoader loader) throws java.io.IOException, java.lang.ClassNotFoundException {\n    // Decode and gunzip if necessary\n    byte[] objBytes = decode(encodedObject, options);\n    java.io.ByteArrayInputStream bais = null;\n    java.io.ObjectInputStream ois = null;\n    Object obj = null;\n    try {\n        bais = new java.io.ByteArrayInputStream(objBytes);\n        // If no custom class loader is provided, use Java's builtin OIS.\n        if (loader == null) {\n            ois = new java.io.ObjectInputStream(bais);\n        } else // end if: no loader provided\n        // Else make a customized object input stream that uses\n        // the provided class loader.\n        {\n            ois = new java.io.ObjectInputStream(bais) {\n\n                @Override\n                public Class<?> resolveClass(java.io.ObjectStreamClass streamClass) throws java.io.IOException, ClassNotFoundException {\n                    Class<?> c = Class.forName(streamClass.getName(), false, loader);\n                    if (c == null) {\n                        return super.resolveClass(streamClass);\n                    } else {\n                        // Class loader knows of this class.\n                        return c;\n                    }\n                    // end else: not null\n                }\n            };\n            // end ois\n        }\n        // end else: no custom class loader\n        obj = ois.readObject();\n    }// end try\n     catch (java.io.IOException e) {\n        // Catch and throw in order to execute finally{}\n        throw e;\n    }// end catch\n     catch (java.lang.ClassNotFoundException e) {\n        // Catch and throw in order to execute finally{}\n        throw e;\n    } finally // end catch\n    {\n        try {\n            bais.close();\n        } catch (Exception e) {\n        }\n        try {\n            ois.close();\n        } catch (Exception e) {\n        }\n    }\n    // end finally\n    return obj;\n}"
            ],
            [
                "decodeFromFile",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end decodeToFile\n/**\n * Convenience method for reading a base64-encoded\n * file and decoding it.\n *\n * <p>As of v 2.3, if there is a error,\n * the method will throw an java.io.IOException. <b>This is new to v2.3!</b>\n * In earlier versions, it just returned false, but\n * in retrospect that's a pretty poor way to handle it.</p>\n *\n * @param filename Filename for reading encoded data\n * @return decoded byte array\n * @throws java.io.IOException if there is an error\n * @since 2.1\n */\npublic static byte[] decodeFromFile(String filename) throws java.io.IOException {\n    byte[] decodedData = null;\n    Base64.InputStream bis = null;\n    try {\n        // Set up some useful variables\n        java.io.File file = new java.io.File(filename);\n        byte[] buffer = null;\n        int length = 0;\n        int numBytes = 0;\n        // Check for size of file\n        if (file.length() > Integer.MAX_VALUE) {\n            throw new java.io.IOException(\"File is too big for this convenience method (\" + file.length() + \" bytes).\");\n        }\n        // end if: file too big for int index\n        buffer = new byte[(int) file.length()];\n        // Open a stream\n        bis = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(file)), Base64.DECODE);\n        // Read until done\n        while ((numBytes = bis.read(buffer, length, 4096)) >= 0) {\n            length += numBytes;\n        }\n        // end while\n        // Save in a variable to return\n        decodedData = new byte[length];\n        System.arraycopy(buffer, 0, decodedData, 0, length);\n    }// end try\n     catch (java.io.IOException e) {\n        // Catch and release to execute finally{}\n        throw e;\n    } finally // end catch: java.io.IOException\n    {\n        try {\n            bis.close();\n        } catch (Exception e) {\n        }\n    }\n    // end finally\n    return decodedData;\n}"
            ],
            [
                "encodeFromFile",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "// end decodeFromFile\n/**\n * Convenience method for reading a binary file\n * and base64-encoding it.\n *\n * <p>As of v 2.3, if there is a error,\n * the method will throw an java.io.IOException. <b>This is new to v2.3!</b>\n * In earlier versions, it just returned false, but\n * in retrospect that's a pretty poor way to handle it.</p>\n *\n * @param filename Filename for reading binary data\n * @return base64-encoded string\n * @throws java.io.IOException if there is an error\n * @since 2.1\n */\npublic static String encodeFromFile(String filename) throws java.io.IOException {\n    String encodedData = null;\n    Base64.InputStream bis = null;\n    try {\n        // Set up some useful variables\n        java.io.File file = new java.io.File(filename);\n        // Need max() for math on small files (v2.2.1); Need +1 for a few corner cases (v2.3.5)\n        byte[] buffer = new byte[Math.max((int) (file.length() * 1.4 + 1), 40)];\n        int length = 0;\n        int numBytes = 0;\n        // Open a stream\n        bis = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(file)), Base64.ENCODE);\n        // Read until done\n        while ((numBytes = bis.read(buffer, length, 4096)) >= 0) {\n            length += numBytes;\n        }\n        // end while\n        // Save in a variable to return\n        encodedData = new String(buffer, 0, length, Base64.PREFERRED_ENCODING);\n    }// end try\n     catch (java.io.IOException e) {\n        // Catch and release to execute finally{}\n        throw e;\n    } finally // end catch: java.io.IOException\n    {\n        try {\n            bis.close();\n        } catch (Exception e) {\n        }\n    }\n    // end finally\n    return encodedData;\n}"
            ],
            [
                "unmutableGraph",
                "org.graphstream.graph.implementations",
                "Graphs",
                "public static Graph unmutableGraph(Graph g) {\n    return null;\n}"
            ],
            [
                "synchronizedGraph",
                "org.graphstream.graph.implementations",
                "Graphs",
                "/**\n * Synchronizes a graph. The returned graph can be accessed and modified by\n * several threads. You lose genericity in methods returning edge or node\n * because each element (graph, nodes and edges) is wrapped into a\n * synchronized wrapper which breaks original elements class.\n *\n * @param g\n *            the graph to synchronize\n * @return a synchronized wrapper for g\n */\npublic static Graph synchronizedGraph(Graph g) {\n    return new SynchronizedGraph(g);\n}"
            ],
            [
                "merge",
                "org.graphstream.graph.implementations",
                "Graphs",
                "/**\n * Merge several graphs in one. A new graph is created, that will contain\n * the result. The method will try to create a graph of the same class that\n * the first graph to merge (it needs to have a constructor with a String).\n * Else, a MultiGraph is used.\n *\n * @param graphs\n *            graphs to merge\n * @return merge result\n */\npublic static Graph merge(Graph... graphs) {\n    if (graphs == null)\n        return new DefaultGraph(\"void-merge\");\n    String id = \"merge\";\n    for (Graph g : graphs) id += \"-\" + g.getId();\n    Graph result;\n    try {\n        Class<? extends Graph> cls = graphs[0].getClass();\n        result = cls.getConstructor(String.class).newInstance(id);\n    } catch (Exception e) {\n        logger.warning(String.format(\"Cannot create a graph of %s.\", graphs[0].getClass().getName()));\n        result = new MultiGraph(id);\n    }\n    mergeIn(result, graphs);\n    return result;\n}"
            ],
            [
                "clone",
                "org.graphstream.graph.implementations",
                "Graphs",
                "/**\n * Clone a given graph with same node/edge structure and same attributes.\n *\n * @param g\n *            the graph to clone\n * @return a copy of g\n */\npublic static Graph clone(Graph g) {\n    Graph copy;\n    try {\n        Class<? extends Graph> cls = g.getClass();\n        copy = cls.getConstructor(String.class).newInstance(g.getId());\n    } catch (Exception e) {\n        logger.warning(String.format(\"Cannot create a graph of %s.\", g.getClass().getName()));\n        copy = new AdjacencyListGraph(g.getId());\n    }\n    copyAttributes(g, copy);\n    for (int i = 0; i < g.getNodeCount(); i++) {\n        Node source = g.getNode(i);\n        Node target = copy.addNode(source.getId());\n        copyAttributes(source, target);\n    }\n    for (int i = 0; i < g.getEdgeCount(); i++) {\n        Edge source = g.getEdge(i);\n        Edge target = copy.addEdge(source.getId(), source.getSourceNode().getId(), source.getTargetNode().getId(), source.isDirected());\n        copyAttributes(source, target);\n    }\n    return copy;\n}"
            ]
        ],
        "tokensProjectClassesNonPrivateStaticAttributes": [
            [
                "version16",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static boolean version16 = false;"
            ],
            [
                "predefFractions",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[][] predefFractions = new float[11][];"
            ],
            [
                "predefFractions2",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions2 = { 0f, 1f };"
            ],
            [
                "predefFractions3",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions3 = { 0f, 0.5f, 1f };"
            ],
            [
                "predefFractions4",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions4 = { 0f, 0.33f, 0.66f, 1f };"
            ],
            [
                "predefFractions5",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions5 = { 0f, 0.25f, 0.5f, 0.75f, 1f };"
            ],
            [
                "predefFractions6",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions6 = { 0f, 0.2f, 0.4f, 0.6f, 0.8f, 1f };"
            ],
            [
                "predefFractions7",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions7 = { 0f, 0.1666f, 0.3333f, 0.4999f, 0.6666f, 0.8333f, 1f };"
            ],
            [
                "predefFractions8",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions8 = { 0f, 0.1428f, 0.2856f, 0.4284f, 0.5712f, 0.7140f, 0.8568f, 1f };"
            ],
            [
                "predefFractions9",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions9 = { 0f, 0.125f, 0.25f, 0.375f, 0.5f, 0.625f, .75f, 0.875f, 1f };"
            ],
            [
                "predefFractions10",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions10 = { 0f, 0.1111f, 0.2222f, 0.3333f, 0.4444f, 0.5555f, 0.6666f, 0.7777f, 0.8888f, 1f };"
            ],
            [
                "defaultImageCache",
                "org.graphstream.ui.swingViewer.util",
                "ImageCache",
                "/**\n * The default singleton image cache instance.\n */\nprotected static ImageCache defaultImageCache;"
            ],
            [
                "dots",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "protected static float[] dots = { 1f, 1f };"
            ],
            [
                "dashes",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "protected static float[] dashes = { 3f, 3f };"
            ],
            [
                "defaultFontCache",
                "org.graphstream.ui.swingViewer.util",
                "FontCache",
                "/**\n * The default font cache.\n */\npublic static FontCache defaultFontCache;"
            ],
            [
                "NULL_POINT2",
                "org.graphstream.ui.geom",
                "Point2",
                "// Attributes -- Shared\n/**\n * Specific point at (0,0).\n */\npublic static final Point2 NULL_POINT2 = new Point2(0, 0);"
            ],
            [
                "NULL_POINT3",
                "org.graphstream.ui.geom",
                "Point3",
                "// Attributes -- Shared\n/**\n * Specific point at (0,0,0).\n */\npublic static final Point3 NULL_POINT3 = new Point3(0, 0, 0);"
            ],
            [
                "DEFAULT_VIEW_ID",
                "org.graphstream.ui.view",
                "Viewer",
                "// Attributes\n/**\n * Name of the default view.\n */\npublic static String DEFAULT_VIEW_ID = \"defaultView\";"
            ],
            [
                "jjbitVec0",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };"
            ],
            [
                "jjnextStates",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "static final int[] jjnextStates = { 48, 49, 52, 54, 55, 65, 69, 2, 4, 6, 10, 16, 23, 33, 50, 52, 54, 55, 57, 58, 60, 61, 66, 68, 70, 71 };"
            ],
            [
                "jjstrLiteralImages",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "/**\n * Token literal values.\n */\npublic static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, \"\\56\", \"\\173\", \"\\175\", \"\\50\", \"\\51\", \"\\43\", \"\\72\", \"\\73\", \"\\54\", \"\\162\\147\\142\\141\", \"\\162\\147\\142\", null, null, null, \"\\165\\162\\154\", \"\\147\\162\\141\\160\\150\", \"\\145\\144\\147\\145\", \"\\156\\157\\144\\145\", \"\\163\\160\\162\\151\\164\\145\", \"\\146\\151\\154\\154\\55\\155\\157\\144\\145\", \"\\146\\151\\154\\154\\55\\143\\157\\154\\157\\162\", \"\\146\\151\\154\\154\\55\\151\\155\\141\\147\\145\", \"\\163\\164\\162\\157\\153\\145\\55\\155\\157\\144\\145\", \"\\163\\164\\162\\157\\153\\145\\55\\143\\157\\154\\157\\162\", \"\\163\\164\\162\\157\\153\\145\\55\\167\\151\\144\\164\\150\", \"\\163\\150\\141\\144\\157\\167\\55\\155\\157\\144\\145\", \"\\163\\150\\141\\144\\157\\167\\55\\143\\157\\154\\157\\162\", \"\\163\\150\\141\\144\\157\\167\\55\\167\\151\\144\\164\\150\", \"\\163\\150\\141\\144\\157\\167\\55\\157\\146\\146\\163\\145\\164\", \"\\164\\145\\170\\164\\55\\155\\157\\144\\145\", \"\\164\\145\\170\\164\\55\\143\\157\\154\\157\\162\", \"\\164\\145\\170\\164\\55\\163\\164\\171\\154\\145\", \"\\164\\145\\170\\164\\55\\146\\157\\156\\164\", \"\\164\\145\\170\\164\\55\\163\\151\\172\\145\", \"\\164\\145\\170\\164\\55\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\\55\\155\\157\\144\\145\", \"\\164\\145\\170\\164\\55\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\", \"\\164\\145\\170\\164\\55\\142\\141\\143\\153\\147\\162\\157\\165\\156\\144\\55\\155\\157\\144\\145\", \"\\164\\145\\170\\164\\55\\142\\141\\143\\153\\147\\162\\157\\165\\156\\144\\55\\143\\157\\154\\157\\162\", \"\\164\\145\\170\\164\\55\\157\\146\\146\\163\\145\\164\", \"\\164\\145\\170\\164\\55\\160\\141\\144\\144\\151\\156\\147\", \"\\151\\143\\157\\156\\55\\155\\157\\144\\145\", \"\\151\\143\\157\\156\", \"\\160\\141\\144\\144\\151\\156\\147\", \"\\172\\55\\151\\156\\144\\145\\170\", \"\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\\55\\155\\157\\144\\145\", \"\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\", \"\\163\\150\\141\\160\\145\", \"\\163\\151\\172\\145\", \"\\163\\151\\172\\145\\55\\155\\157\\144\\145\", \"\\163\\150\\141\\160\\145\\55\\160\\157\\151\\156\\164\\163\", \"\\164\\145\\170\\164\\55\\141\\154\\151\\147\\156\\155\\145\\156\\164\", \"\\152\\143\\157\\155\\160\\157\\156\\145\\156\\164\", \"\\141\\162\\162\\157\\167\\55\\151\\155\\141\\147\\145\", \"\\141\\162\\162\\157\\167\\55\\163\\151\\172\\145\", \"\\141\\162\\162\\157\\167\\55\\163\\150\\141\\160\\145\", \"\\163\\160\\162\\151\\164\\145\\55\\157\\162\\151\\145\\156\\164\\141\\164\\151\\157\\156\", \"\\143\\141\\156\\166\\141\\163\\55\\143\\157\\154\\157\\162\", \"\\160\\154\\141\\151\\156\", \"\\144\\171\\156\\55\\160\\154\\141\\151\\156\", \"\\144\\171\\156\\55\\163\\151\\172\\145\", \"\\144\\171\\156\\55\\151\\143\\157\\156\", \"\\144\\141\\163\\150\\145\\163\", \"\\144\\157\\164\\163\", \"\\144\\157\\165\\142\\154\\145\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\144\\151\\141\\147\\157\\156\\141\\154\\61\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\144\\151\\141\\147\\157\\156\\141\\154\\62\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\150\\157\\162\\151\\172\\157\\156\\164\\141\\154\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\162\\141\\144\\151\\141\\154\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\166\\145\\162\\164\\151\\143\\141\\154\", \"\\150\\151\\144\\144\\145\\156\", \"\\151\\155\\141\\147\\145\\55\\164\\151\\154\\145\\144\", \"\\151\\155\\141\\147\\145\\55\\163\\143\\141\\154\\145\\144\", \"\\151\\155\\141\\147\\145\\55\\163\\143\\141\\154\\145\\144\\55\\162\\141\\164\\151\\157\\55\\155\\141\\170\", \"\\151\\155\\141\\147\\145\\55\\163\\143\\141\\154\\145\\144\\55\\162\\141\\164\\151\\157\\55\\155\\151\\156\", \"\\156\\157\\156\\145\", \"\\156\\157\\162\\155\\141\\154\", \"\\164\\162\\165\\156\\143\\141\\164\\145\\144\", \"\\172\\157\\157\\155\\55\\162\\141\\156\\147\\145\", \"\\141\\164\\55\\172\\157\\157\\155\", \"\\165\\156\\144\\145\\162\\55\\172\\157\\157\\155\", \"\\157\\166\\145\\162\\55\\172\\157\\157\\155\", \"\\172\\157\\157\\155\\163\", \"\\146\\151\\164\", \"\\142\\157\\154\\144\", \"\\142\\157\\154\\144\\55\\151\\164\\141\\154\\151\\143\", \"\\151\\164\\141\\154\\151\\143\", \"\\141\\154\\157\\156\\147\", \"\\141\\164\\55\\154\\145\\146\\164\", \"\\141\\164\\55\\162\\151\\147\\150\\164\", \"\\143\\145\\156\\164\\145\\162\", \"\\154\\145\\146\\164\", \"\\162\\151\\147\\150\\164\", \"\\165\\156\\144\\145\\162\", \"\\141\\142\\157\\166\\145\", \"\\152\\165\\163\\164\\151\\146\\171\", \"\\143\\151\\162\\143\\154\\145\", \"\\164\\162\\151\\141\\156\\147\\154\\145\", \"\\146\\162\\145\\145\\160\\154\\141\\156\\145\", \"\\164\\145\\170\\164\\55\\142\\157\\170\", \"\\164\\145\\170\\164\\55\\162\\157\\165\\156\\144\\145\\144\\55\\142\\157\\170\", \"\\164\\145\\170\\164\\55\\143\\151\\162\\143\\154\\145\", \"\\164\\145\\170\\164\\55\\144\\151\\141\\155\\157\\156\\144\", \"\\164\\145\\170\\164\\55\\160\\141\\162\\141\\147\\162\\141\\160\\150\", \"\\142\\157\\170\", \"\\162\\157\\165\\156\\144\\145\\144\\55\\142\\157\\170\", \"\\143\\162\\157\\163\\163\", \"\\144\\151\\141\\155\\157\\156\\144\", \"\\160\\157\\154\\171\\147\\157\\156\", \"\\142\\165\\164\\164\\157\\156\", \"\\164\\145\\170\\164\\55\\146\\151\\145\\154\\144\", \"\\160\\141\\156\\145\\154\", \"\\154\\151\\156\\145\", \"\\160\\157\\154\\171\\154\\151\\156\\145\", \"\\160\\157\\154\\171\\154\\151\\156\\145\\55\\163\\143\\141\\154\\145\\144\", \"\\141\\156\\147\\154\\145\", \"\\143\\165\\142\\151\\143\\55\\143\\165\\162\\166\\145\", \"\\142\\154\\157\\142\", \"\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\114\\55\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\150\\157\\162\\151\\172\\157\\156\\164\\141\\154\\55\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\166\\145\\162\\164\\151\\143\\141\\154\\55\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\141\\162\\162\\157\\167\", \"\\146\\154\\157\\167\", \"\\160\\151\\145\\55\\143\\150\\141\\162\\164\", \"\\151\\155\\141\\147\\145\", \"\\151\\155\\141\\147\\145\\163\", \"\\146\\162\\157\\155\", \"\\156\\157\\144\\145\\60\", \"\\164\\157\", \"\\156\\157\\144\\145\\61\", \"\\160\\162\\157\\152\\145\\143\\164\\151\\157\\156\", \"\\143\\154\\151\\143\\153\\145\\144\", \"\\163\\145\\154\\145\\143\\164\\145\\144\", null, null };"
            ],
            [
                "lexStateNames",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "/**\n * Lexer state names.\n */\npublic static final String[] lexStateNames = { \"DEFAULT\" };"
            ],
            [
                "jjtoToken",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "static final long[] jjtoToken = { 0xfffffffffffffe01L, 0xffffffffffffffffL, 0xffffL };"
            ],
            [
                "jjtoSkip",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "static final long[] jjtoSkip = { 0x1eL, 0x0L, 0x0L };"
            ],
            [
                "colorMap",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "// Static\n/**\n * A set of colour names mapped to real AWT Colour objects.\n */\nprotected static HashMap<String, Color> colorMap;"
            ],
            [
                "sharpColor1",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Pattern to ensure a \"#FFFFFF\" colour is recognised.\n */\nprotected static Pattern sharpColor1, sharpColor2;"
            ],
            [
                "sharpColor2",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Pattern to ensure a \"#FFFFFF\" colour is recognised.\n */\nprotected static Pattern sharpColor1, sharpColor2;"
            ],
            [
                "cssColor",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Pattern to ensure a CSS style \"rgb(1,2,3)\" colour is recognised.\n */\nprotected static Pattern cssColor;"
            ],
            [
                "cssColorA",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Pattern to ensure a CSS style \"rgba(1,2,3,4)\" colour is recognised.\n */\nprotected static Pattern cssColorA;"
            ],
            [
                "awtColor",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Pattern to ensure that java.awt.Color.toString() strings are recognised\n * as colour.\n */\nprotected static Pattern awtColor;"
            ],
            [
                "hexaColor",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Pattern to ensure an hexadecimal number is a recognised colour.\n */\nprotected static Pattern hexaColor;"
            ],
            [
                "numberUnit",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Pattern to ensure a string is a Value in various units.\n */\nprotected static Pattern numberUnit, number;"
            ],
            [
                "number",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "/**\n * Pattern to ensure a string is a Value in various units.\n */\nprotected static Pattern numberUnit, number;"
            ],
            [
                "acceptedAttribute",
                "org.graphstream.ui.graphicGraph",
                "GraphicElement",
                "// Overriding of standard attribute changing to filter them.\nprotected static Pattern acceptedAttribute;"
            ],
            [
                "DEFAULT_AN_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_AN_FORMAT = \"%prefix%[%sourceId%:%timeId%] add node \\\"%nodeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_CNA_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CNA_FORMAT = \"%prefix%[%sourceId%:%timeId%] set node \\\"%nodeId%\\\" +\\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CNC_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CNC_FORMAT = \"%prefix%[%sourceId%:%timeId%] set node \\\"%nodeId%\\\" \\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CNR_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CNR_FORMAT = \"%prefix%[%sourceId%:%timeId%] set node \\\"%nodeId%\\\" -\\\"%attributeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_DN_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_DN_FORMAT = \"%prefix%[%sourceId%:%timeId%] remove node \\\"%nodeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_AE_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_AE_FORMAT = \"%prefix%[%sourceId%:%timeId%] add edge \\\"%edgeId%\\\" : \\\"%source%\\\" -- \\\"%target%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_CEA_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CEA_FORMAT = \"%prefix%[%sourceId%:%timeId%] set edge \\\"%edgeId%\\\" +\\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CEC_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CEC_FORMAT = \"%prefix%[%sourceId%:%timeId%] set edge \\\"%edgeId%\\\" \\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CER_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CER_FORMAT = \"%prefix%[%sourceId%:%timeId%] set edge \\\"%edgeId%\\\" -\\\"%attributeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_DE_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_DE_FORMAT = \"%prefix%[%sourceId%:%timeId%] remove edge \\\"%edgeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_CGA_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CGA_FORMAT = \"%prefix%[%sourceId%:%timeId%] set +\\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CGC_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CGC_FORMAT = \"%prefix%[%sourceId%:%timeId%] set \\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CGR_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CGR_FORMAT = \"%prefix%[%sourceId%:%timeId%] set -\\\"%attributeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_CL_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CL_FORMAT = \"%prefix%[%sourceId%:%timeId%] clear%suffix%\";"
            ],
            [
                "DEFAULT_ST_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_ST_FORMAT = \"%prefix%[%sourceId%:%timeId%] step %step% begins%suffix%\";"
            ],
            [
                "GLOBAL_ENV",
                "org.graphstream.util",
                "Environment",
                "// --------- Static attributes ---------\n/**\n * Global environment for the whole JVM. This global environment is\n * available <b>and editable</b> from everywhere. It is create as soon as\n * the {@link #getGlobalEnvironment()} static method is called if this field\n * was not yet initialized by any other mean.\n * @see #getGlobalEnvironment()\n */\npublic static Environment GLOBAL_ENV;"
            ],
            [
                "LEXICAL_ERROR",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "/*\n\t * Ordinals for various reasons why an Error of this type can be thrown.\n\t */\n/**\n * Lexical error occurred.\n */\npublic static final int LEXICAL_ERROR = 0;"
            ],
            [
                "STATIC_LEXER_ERROR",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "/**\n * An attempt was made to create a second instance of a static token\n * manager.\n */\npublic static final int STATIC_LEXER_ERROR = 1;"
            ],
            [
                "INVALID_LEXICAL_STATE",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "/**\n * Tried to change to an invalid lexical state.\n */\npublic static final int INVALID_LEXICAL_STATE = 2;"
            ],
            [
                "LOOP_DETECTED",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "/**\n * Detected (and bailed out of) an infinite loop in the token manager.\n */\npublic static final int LOOP_DETECTED = 3;"
            ],
            [
                "staticFlag",
                "org.graphstream.util.parser",
                "SimpleCharStream",
                "/**\n * Whether parser is static.\n */\npublic static final boolean staticFlag = false;"
            ],
            [
                "ABBREVIATED_WEEKDAY_NAME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent ABBREVIATED_WEEKDAY_NAME = new NotImplementedComponent(\"%a\", \"\\\\w+[.]\");"
            ],
            [
                "FULL_WEEKDAY_NAME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent FULL_WEEKDAY_NAME = new NotImplementedComponent(\"%A\", \"\\\\w+\");"
            ],
            [
                "ABBREVIATED_MONTH_NAME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent ABBREVIATED_MONTH_NAME = new NotImplementedComponent(\"%b\", \"\\\\w+[.]\");"
            ],
            [
                "FULL_MONTH_NAME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent FULL_MONTH_NAME = new NotImplementedComponent(\"%B\", \"\\\\w+\");"
            ],
            [
                "LOCALE_DATE_AND_TIME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent LOCALE_DATE_AND_TIME = new NotImplementedComponent(\"%c\", null);"
            ],
            [
                "CENTURY",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent CENTURY = new NotImplementedComponent(\"%C\", \"\\\\d\\\\d\");"
            ],
            [
                "DAY_OF_MONTH_2_DIGITS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DAY_OF_MONTH_2_DIGITS = new FieldComponent(\"%d\", \"[012]\\\\d|3[01]\", Calendar.DAY_OF_MONTH, \"%02d\");"
            ],
            [
                "DATE",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DATE = new AliasComponent(\"%D\", \"%m/%d/%y\");"
            ],
            [
                "DAY_OF_MONTH",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DAY_OF_MONTH = new FieldComponent(\"%e\", \"\\\\d|[12]\\\\d|3[01]\", Calendar.DAY_OF_MONTH, \"%2d\");"
            ],
            [
                "DATE_ISO8601",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DATE_ISO8601 = new AliasComponent(\"%F\", \"%Y-%m-%d\");"
            ],
            [
                "WEEK_BASED_YEAR_2_DIGITS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent WEEK_BASED_YEAR_2_DIGITS = new FieldComponent(\"%g\", \"\\\\d\\\\d\", Calendar.YEAR, \"%02d\");"
            ],
            [
                "WEEK_BASED_YEAR_4_DIGITS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent WEEK_BASED_YEAR_4_DIGITS = new FieldComponent(\"%G\", \"\\\\d{4}\", Calendar.YEAR, \"%04d\");"
            ],
            [
                "ABBREVIATED_MONTH_NAME_ALIAS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent ABBREVIATED_MONTH_NAME_ALIAS = new AliasComponent(\"%h\", \"%b\");"
            ],
            [
                "HOUR_OF_DAY",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent HOUR_OF_DAY = new FieldComponent(\"%H\", \"[01]\\\\d|2[0123]\", Calendar.HOUR_OF_DAY, \"%02d\");"
            ],
            [
                "HOUR",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent HOUR = new FieldComponent(\"%I\", \"0\\\\d|1[012]\", Calendar.HOUR, \"%02d\");"
            ],
            [
                "DAY_OF_YEAR",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DAY_OF_YEAR = new FieldComponent(\"%j\", \"[012]\\\\d\\\\d|3[0-5]\\\\d|36[0-6]\", Calendar.DAY_OF_YEAR, \"%03d\");"
            ],
            [
                "MILLISECOND",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent MILLISECOND = new FieldComponent(\"%k\", \"\\\\d{3}\", Calendar.MILLISECOND, \"%03d\");"
            ],
            [
                "EPOCH",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent EPOCH = new EpochComponent();"
            ],
            [
                "MONTH",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent MONTH = new FieldComponent(\"%m\", \"0[1-9]|1[012]\", Calendar.MONTH, -1, \"%02d\");"
            ],
            [
                "MINUTE",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent MINUTE = new FieldComponent(\"%M\", \"[0-5]\\\\d\", Calendar.MINUTE, \"%02d\");"
            ],
            [
                "NEW_LINE",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent NEW_LINE = new AliasComponent(\"%n\", \"\\n\");"
            ],
            [
                "AM_PM",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent AM_PM = new AMPMComponent();"
            ],
            [
                "LOCALE_CLOCK_TIME_12_HOUR",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent LOCALE_CLOCK_TIME_12_HOUR = new NotImplementedComponent(\"%r\", \"\");"
            ],
            [
                "HOUR_AND_MINUTE",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent HOUR_AND_MINUTE = new AliasComponent(\"%R\", \"%H:%M\");"
            ],
            [
                "SECOND",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent SECOND = new FieldComponent(\"%S\", \"[0-5]\\\\d|60\", Calendar.SECOND, \"%02d\");"
            ],
            [
                "TABULATION",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent TABULATION = new AliasComponent(\"%t\", \"\\t\");"
            ],
            [
                "TIME_ISO8601",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent TIME_ISO8601 = new AliasComponent(\"%T\", \"%H:%M:%S\");"
            ],
            [
                "DAY_OF_WEEK_1_7",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DAY_OF_WEEK_1_7 = new FieldComponent(\"%u\", \"[1-7]\", Calendar.DAY_OF_WEEK, -1, \"%1d\");"
            ],
            [
                "WEEK_OF_YEAR_FROM_SUNDAY",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent WEEK_OF_YEAR_FROM_SUNDAY = new FieldComponent(\"%U\", \"[0-4]\\\\d|5[0123]\", Calendar.WEEK_OF_YEAR, 1, \"%2d\");"
            ],
            [
                "WEEK_NUMBER_ISO8601",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent WEEK_NUMBER_ISO8601 = new NotImplementedComponent(\"%V\", \"0[1-9]|[2-4]\\\\d|5[0123]\");"
            ],
            [
                "DAY_OF_WEEK_0_6",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DAY_OF_WEEK_0_6 = new FieldComponent(\"%w\", \"[0-6]\", Calendar.DAY_OF_WEEK, \"%01d\");"
            ],
            [
                "WEEK_OF_YEAR_FROM_MONDAY",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent WEEK_OF_YEAR_FROM_MONDAY = new FieldComponent(\"%W\", \"[0-4]\\\\d|5[0123]\", Calendar.WEEK_OF_YEAR, \"%02d\");"
            ],
            [
                "LOCALE_DATE_REPRESENTATION",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent LOCALE_DATE_REPRESENTATION = new NotImplementedComponent(\"%x\", \"\");"
            ],
            [
                "LOCALE_TIME_REPRESENTATION",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent LOCALE_TIME_REPRESENTATION = new NotImplementedComponent(\"%X\", \"\");"
            ],
            [
                "YEAR_2_DIGITS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent YEAR_2_DIGITS = new FieldComponent(\"%y\", \"\\\\d\\\\d\", Calendar.YEAR, \"%02d\");"
            ],
            [
                "YEAR_4_DIGITS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent YEAR_4_DIGITS = new FieldComponent(\"%Y\", \"\\\\d{4}\", Calendar.YEAR, \"%04d\");"
            ],
            [
                "UTC_OFFSET",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent UTC_OFFSET = new UTCOffsetComponent();"
            ],
            [
                "LOCALE_TIME_ZONE_NAME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent LOCALE_TIME_ZONE_NAME = new NotImplementedComponent(\"%Z\", \"\\\\w*\");"
            ],
            [
                "PERCENT",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent PERCENT = new AliasComponent(\"%%\", \"%\");"
            ],
            [
                "jjbitVec0",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };"
            ],
            [
                "jjnextStates",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "static final int[] jjnextStates = { 5, 6, 8, 9, 13, 14 };"
            ],
            [
                "jjstrLiteralImages",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "/**\n * Token literal values.\n */\npublic static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, \"\\133\", \"\\135\", null, null, null, null, null, null };"
            ],
            [
                "lexStateNames",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "/**\n * Lexer state names.\n */\npublic static final String[] lexStateNames = { \"DEFAULT\" };"
            ],
            [
                "jjtoToken",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "static final long[] jjtoToken = { 0xff01L };"
            ],
            [
                "jjtoSkip",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "static final long[] jjtoSkip = { 0x1eL };"
            ],
            [
                "jjbitVec0",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };"
            ],
            [
                "jjnextStates",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "static final int[] jjnextStates = { 54, 11, 12, 15, 17, 18, 1, 2, 5, 47, 52, 8, 9, 20, 21 };"
            ],
            [
                "jjstrLiteralImages",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "/**\n * Token literal values.\n */\npublic static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, null, \"\\50\", \"\\51\", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null };"
            ],
            [
                "lexStateNames",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "/**\n * Lexer state names.\n */\npublic static final String[] lexStateNames = { \"DEFAULT\" };"
            ],
            [
                "jjtoToken",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "static final long[] jjtoToken = { 0xffffc01L };"
            ],
            [
                "jjtoSkip",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "static final long[] jjtoSkip = { 0x7eL };"
            ],
            [
                "XYZ_ATTR",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "/**\n * Node attribute storing coordinates.\n */\npublic static final String XYZ_ATTR = \"xyz\";"
            ],
            [
                "WIDTH_ATTR",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "/**\n * Graph attribute storing width of the TikZ picture.\n */\npublic static final String WIDTH_ATTR = \"ui.tikz.width\";"
            ],
            [
                "HEIGHT_ATTR",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "/**\n * Graph attribute storing height of the TikZ picture.\n */\npublic static final String HEIGHT_ATTR = \"ui.tikz.height\";"
            ],
            [
                "DEFAULT_WIDTH",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "public static final double DEFAULT_WIDTH = 10;"
            ],
            [
                "DEFAULT_HEIGHT",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "public static final double DEFAULT_HEIGHT = 10;"
            ],
            [
                "DISPLAY_MIN_SIZE_IN_MM",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "/**\n * Define the default minimum size of nodes when using a dynamic size. This\n * size is in millimeter.\n */\npublic static final double DISPLAY_MIN_SIZE_IN_MM = 2;"
            ],
            [
                "DISPLAY_MAX_SIZE_IN_MM",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "/**\n * Define the default maximum size of nodes when using a dynamic size. This\n * size is in millimeter.\n */\npublic static final double DISPLAY_MAX_SIZE_IN_MM = 10;"
            ],
            [
                "jjbitVec0",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };"
            ],
            [
                "jjnextStates",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "static final int[] jjnextStates = { 21, 27, 8, 10, 11, 18, 19, 22, 23, 26, 1, 2, 13, 14 };"
            ],
            [
                "jjstrLiteralImages",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "/**\n * Token literal values.\n */\npublic static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, null, \"\\133\", \"\\135\", \"\\173\", \"\\175\", \"\\72\", \"\\54\", \"\\75\", null, null, null, null, null, null, null, null, null, null, \"\\73\", null, null, null, null, null, null, null, null, null, \"\\137\" };"
            ],
            [
                "lexStateNames",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "/**\n * Lexer state names.\n */\npublic static final String[] lexStateNames = { \"DEFAULT\" };"
            ],
            [
                "jjtoToken",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "static final long[] jjtoToken = { 0x3ffffffc01L };"
            ],
            [
                "jjtoSkip",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "static final long[] jjtoSkip = { 0x7eL };"
            ],
            [
                "jjbitVec0",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };"
            ],
            [
                "jjnextStates",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "static final int[] jjnextStates = { 21, 22, 23, 17, 19, 2, 3, 5, 6, 8, 9 };"
            ],
            [
                "jjstrLiteralImages",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "/**\n * Token literal values.\n */\npublic static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null };"
            ],
            [
                "lexStateNames",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "/**\n * Lexer state names.\n */\npublic static final String[] lexStateNames = { \"DEFAULT\" };"
            ],
            [
                "jjtoToken",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "static final long[] jjtoToken = { 0x3fffffffffffc9L };"
            ],
            [
                "jjtoSkip",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "static final long[] jjtoSkip = { 0x6L };"
            ],
            [
                "XMLNS",
                "org.graphstream.stream.file.gexf",
                "GEXF",
                "public static final String XMLNS = \"http://www.gexf.net/1.2draft\";"
            ],
            [
                "XMLNS_XSI",
                "org.graphstream.stream.file.gexf",
                "GEXF",
                "public static final String XMLNS_XSI = \"http://www.w3.org/2001/XMLSchema-instance\";"
            ],
            [
                "XMLNS_SL",
                "org.graphstream.stream.file.gexf",
                "GEXF",
                "public static final String XMLNS_SL = \"http://www.gexf.net/1.2draft http://www.gexf.net/1.2draft/gexf.xsd\";"
            ],
            [
                "XMLNS_VIZ",
                "org.graphstream.stream.file.gexf",
                "GEXF",
                "public static final String XMLNS_VIZ = \"http://www.gexf.net/1.2draft/viz\";"
            ],
            [
                "VERSION",
                "org.graphstream.stream.file.gexf",
                "GEXF",
                "public static final String VERSION = \"1.2\";"
            ],
            [
                "BUFFER_SIZE",
                "org.graphstream.stream.file.dgs",
                "DGSParser",
                "protected static final int BUFFER_SIZE = 4096;"
            ],
            [
                "ARRAY_OPEN",
                "org.graphstream.stream.file.dgs",
                "DGSParser",
                "public static final int ARRAY_OPEN = '{';"
            ],
            [
                "ARRAY_CLOSE",
                "org.graphstream.stream.file.dgs",
                "DGSParser",
                "public static final int ARRAY_CLOSE = '}';"
            ],
            [
                "MAP_OPEN",
                "org.graphstream.stream.file.dgs",
                "DGSParser",
                "public static final int MAP_OPEN = '[';"
            ],
            [
                "MAP_CLOSE",
                "org.graphstream.stream.file.dgs",
                "DGSParser",
                "public static final int MAP_CLOSE = ']';"
            ],
            [
                "gradientId",
                "org.graphstream.stream.file",
                "FileSinkSVG2",
                "static int gradientId = 0;"
            ],
            [
                "gradientId",
                "org.graphstream.stream.file",
                "SVGStyle",
                "static int gradientId = 0;"
            ],
            [
                "TIME_PREFIX",
                "org.graphstream.stream",
                "Timeline",
                "public static final String TIME_PREFIX = \"time\";"
            ],
            [
                "SYNC_DISABLE_KEY",
                "org.graphstream.stream.sync",
                "SinkTime",
                "/**\n * Key used to disable synchro. Just run : java -DSYNC_DISABLE_KEY ...\n */\npublic static final String SYNC_DISABLE_KEY = \"org.graphstream.stream.sync.disable\";"
            ],
            [
                "disableSync",
                "org.graphstream.stream.sync",
                "SinkTime",
                "/**\n * Flag used to disable sync.\n */\nprotected static final boolean disableSync;"
            ],
            [
                "LIGHT_YELLOW",
                "org.graphstream.stream.netstream",
                "NetStreamReceiver",
                "protected static final String LIGHT_YELLOW = \"\u001b[33;1m\";"
            ],
            [
                "RESET",
                "org.graphstream.stream.netstream",
                "NetStreamReceiver",
                "protected static final String RESET = \"\u001b[0m\";"
            ],
            [
                "BUFFER_INITIAL_SIZE",
                "org.graphstream.stream.netstream",
                "NetStreamReceiver",
                "// Attributes\n// 65535, 4096\nprotected static final int BUFFER_INITIAL_SIZE = 8192;"
            ],
            [
                "BUFFER_INITIAL_SIZE",
                "org.graphstream.stream.netstream",
                "IncomingBuffer",
                "// Attributes\n// 65535, 4096\nprotected static final int BUFFER_INITIAL_SIZE = 8192;"
            ],
            [
                "EVENT_GETVERSION",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by an 32-bit signed integer for this protocol version. Certainly\n * useless.\n */\npublic static int EVENT_GETVERSION = 0x00;"
            ],
            [
                "EVENT_START",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Not used.\n */\npublic static int EVENT_START = 0x01;"
            ],
            [
                "EVENT_END",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Constant indicating that the client has disconnected.\n */\npublic static int EVENT_END = 0x02;"
            ],
            [
                "EVENT_ADD_NODE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "//\n// ----------------------------------\n// GraphStream's graph events\n// ----------------------------------\n//\n/**\n * Followed by a node id (TYPE_STRING format)\n */\npublic static int EVENT_ADD_NODE = 0x10;"
            ],
            [
                "EVENT_DEL_NODE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by a node id (TYPE_STRING format)\n */\npublic static int EVENT_DEL_NODE = 0x11;"
            ],
            [
                "EVENT_ADD_EDGE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - an edge id (TYPE_STRING format), - an source node id\n * (TYPE_STRING format), - a target node id (TYPE_STRING format - a boolean\n * indicating if directed (TYPE_BOOLEAN format)\n */\npublic static int EVENT_ADD_EDGE = 0x12;"
            ],
            [
                "EVENT_DEL_EDGE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by an edge id (TYPE_STRING format)\n */\npublic static int EVENT_DEL_EDGE = 0x13;"
            ],
            [
                "EVENT_STEP",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by double (TYPE_DOUBLE format)\n */\npublic static int EVENT_STEP = 0x14;"
            ],
            [
                "EVENT_CLEARED",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n */\npublic static int EVENT_CLEARED = 0x15;"
            ],
            [
                "EVENT_ADD_GRAPH_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - an attribute id (TYPE_STRING format) - the attribute TYPE -\n * the attribute value\n */\npublic static int EVENT_ADD_GRAPH_ATTR = 0x16;"
            ],
            [
                "EVENT_CHG_GRAPH_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - an attribute id (TYPE_STRING format) - the attribute TYPE -\n * the attribute old value - the attribute new value\n */\npublic static int EVENT_CHG_GRAPH_ATTR = 0x17;"
            ],
            [
                "EVENT_DEL_GRAPH_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - the attribute id (TYPE_STRING format)\n */\npublic static int EVENT_DEL_GRAPH_ATTR = 0x18;"
            ],
            [
                "EVENT_ADD_NODE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - an attribute id (TYPE_STRING format) - the attribute TYPE -\n * the attribute value\n */\npublic static int EVENT_ADD_NODE_ATTR = 0x19;"
            ],
            [
                "EVENT_CHG_NODE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - an attribute id (TYPE_STRING format) - the attribute TYPE -\n * the attribute old value - the attribute new value\n */\npublic static int EVENT_CHG_NODE_ATTR = 0x1a;"
            ],
            [
                "EVENT_DEL_NODE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - the node id (TYPE_STRING format) - the attribute id\n * (TYPE_STRING format)\n */\npublic static int EVENT_DEL_NODE_ATTR = 0x1b;"
            ],
            [
                "EVENT_ADD_EDGE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - an attribute id (TYPE_STRING format) - the attribute TYPE -\n * the attribute value\n */\npublic static int EVENT_ADD_EDGE_ATTR = 0x1c;"
            ],
            [
                "EVENT_CHG_EDGE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - an attribute id (TYPE_STRING format) - the attribute TYPE -\n * the attribute old value - the attribute new value\n */\npublic static int EVENT_CHG_EDGE_ATTR = 0x1d;"
            ],
            [
                "EVENT_DEL_EDGE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by - the edge id (TYPE_STRING format) - the attribute id\n * (TYPE_STRING format)\n */\npublic static int EVENT_DEL_EDGE_ATTR = 0x1e;"
            ],
            [
                "TYPE_UNKNOWN",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "// Values types\npublic static int TYPE_UNKNOWN = 0x00;"
            ],
            [
                "TYPE_BOOLEAN",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by a byte who's value is 0 or 1\n */\npublic static int TYPE_BOOLEAN = 0x50;"
            ],
            [
                "TYPE_BOOLEAN_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * An array of booleans. Followed by first, a 16-bits integer for the number\n * of booleans and then, a list of bytes who's value is 0 or 1\n */\npublic static int TYPE_BOOLEAN_ARRAY = 0x51;"
            ],
            [
                "TYPE_BYTE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by a signed byte [-127,127]\n */\npublic static int TYPE_BYTE = 0x52;"
            ],
            [
                "TYPE_BYTE_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * An array of bytes. Followed by first, a 16-bits integer for the number of\n * integers and then, a list of signed bytes.\n */\npublic static int TYPE_BYTE_ARRAY = 0x53;"
            ],
            [
                "TYPE_SHORT",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by an 16-bit signed integer (a short)\n */\npublic static int TYPE_SHORT = 0x54;"
            ],
            [
                "TYPE_SHORT_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * An array of shorts. Followed by first, a 16-bits integer for the number\n * of integers and then, a list of 16-bit signed shorts\n */\npublic static int TYPE_SHORT_ARRAY = 0x55;"
            ],
            [
                "TYPE_INT",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by an 32-bit signed integer\n */\npublic static int TYPE_INT = 0x56;"
            ],
            [
                "TYPE_INT_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * An array of integers. Followed by first, a 16-bits integer for the number\n * of integers and then, a list of 32-bit signed integers\n */\npublic static int TYPE_INT_ARRAY = 0x57;"
            ],
            [
                "TYPE_LONG",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by an 64-bit signed integer\n */\npublic static int TYPE_LONG = 0x58;"
            ],
            [
                "TYPE_LONG_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * An array of longs. Followed by first, a 16-bits integer for the number of\n * longs and then, a list of 62-bit signed integers\n */\npublic static int TYPE_LONG_ARRAY = 0x59;"
            ],
            [
                "TYPE_FLOAT",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by a single precision 32-bits floating point number\n */\npublic static int TYPE_FLOAT = 0x5a;"
            ],
            [
                "TYPE_FLOAT_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Array of double. Followed by first, a 16-bits integer for the number of\n * floats and then, a list of 32-bit floats\n */\npublic static int TYPE_FLOAT_ARRAY = 0x5b;"
            ],
            [
                "TYPE_DOUBLE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Followed by a double precision 64-bits floating point number\n */\npublic static int TYPE_DOUBLE = 0x5c;"
            ],
            [
                "TYPE_DOUBLE_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Array of double. Followed by first, a 16-bits integer for the number of\n * doubles and then, a list of 64-bit doubles\n */\npublic static int TYPE_DOUBLE_ARRAY = 0x5d;"
            ],
            [
                "TYPE_STRING",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Array of characters. Followed by first, a 16-bits integer for the size in\n * bytes (not in number of characters) of the string, then by the unicode\n * string\n */\npublic static int TYPE_STRING = 0x5e;"
            ],
            [
                "TYPE_RAW",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * Raw data, good for serialization. Followed by first, a 16-bits integer\n * indicating the length in bytes of the dataset, and then the data itself.\n */\npublic static int TYPE_RAW = 0x5f;"
            ],
            [
                "TYPE_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n * An type-unspecified array. Followed by first, a 16-bits integer\n * indicating the number of elements, and then, the elements themselves. The\n * elements themselves have to give their type.\n */\npublic static byte TYPE_ARRAY = 0x60;"
            ],
            [
                "TYPE_NULL",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_NULL = 0x61;"
            ],
            [
                "COMMAND",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "/**\n *  Constant that indicates that this message is a COMMAND, not and EVENT.\n *\n *  For now it is followed by a string that has to be parssed at the application level.\n *\n *  THIS IS EXPERIMENTAL AND MAY (WILL) CHANGE !\n */\npublic static int COMMAND = 0x70;"
            ],
            [
                "NO_OPTIONS",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/* ********  P U B L I C   F I E L D S  ******** */\n/**\n * No options specified. Value is zero.\n */\npublic final static int NO_OPTIONS = 0;"
            ],
            [
                "ENCODE",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Specify encoding in first bit. Value is one.\n */\npublic final static int ENCODE = 1;"
            ],
            [
                "DECODE",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Specify decoding in first bit. Value is zero.\n */\npublic final static int DECODE = 0;"
            ],
            [
                "GZIP",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Specify that data should be gzip-compressed in second bit. Value is two.\n */\npublic final static int GZIP = 2;"
            ],
            [
                "DONT_GUNZIP",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Specify that gzipped data should <em>not</em> be automatically gunzipped.\n */\npublic final static int DONT_GUNZIP = 4;"
            ],
            [
                "DO_BREAK_LINES",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Do break lines when encoding. Value is 8.\n */\npublic final static int DO_BREAK_LINES = 8;"
            ],
            [
                "URL_SAFE",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Encode using Base64-like encoding that is URL- and Filename-safe as described\n * in Section 4 of RFC3548:\n * <a href=\"http://www.faqs.org/rfcs/rfc3548.html\">http://www.faqs.org/rfcs/rfc3548.html</a>.\n * It is important to note that data encoded this way is <em>not</em> officially valid Base64,\n * or at the very least should not be called Base64 without also specifying that is\n * was encoded using the URL- and Filename-safe dialect.\n */\npublic final static int URL_SAFE = 16;"
            ],
            [
                "ORDERED",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "/**\n * Encode using the special \"ordered\" dialect of Base64 described here:\n * <a href=\"http://www.faqs.org/qa/rfcc-1940.html\">http://www.faqs.org/qa/rfcc-1940.html</a>.\n */\npublic final static int ORDERED = 32;"
            ],
            [
                "INITIAL_EDGE_CAPACITY",
                "org.graphstream.graph.implementations",
                "AdjacencyListNode",
                "protected static final int INITIAL_EDGE_CAPACITY;"
            ],
            [
                "GROWTH_FACTOR",
                "org.graphstream.graph.implementations",
                "AdjacencyListNode",
                "protected static final double GROWTH_FACTOR = 1.1;"
            ],
            [
                "I_EDGE",
                "org.graphstream.graph.implementations",
                "AdjacencyListNode",
                "protected static final char I_EDGE = 0;"
            ],
            [
                "IO_EDGE",
                "org.graphstream.graph.implementations",
                "AdjacencyListNode",
                "protected static final char IO_EDGE = 1;"
            ],
            [
                "O_EDGE",
                "org.graphstream.graph.implementations",
                "AdjacencyListNode",
                "protected static final char O_EDGE = 2;"
            ],
            [
                "GROW_FACTOR",
                "org.graphstream.graph.implementations",
                "AdjacencyListGraph",
                "public static final double GROW_FACTOR = 1.1;"
            ],
            [
                "DEFAULT_NODE_CAPACITY",
                "org.graphstream.graph.implementations",
                "AdjacencyListGraph",
                "public static final int DEFAULT_NODE_CAPACITY = 128;"
            ],
            [
                "DEFAULT_EDGE_CAPACITY",
                "org.graphstream.graph.implementations",
                "AdjacencyListGraph",
                "public static final int DEFAULT_EDGE_CAPACITY = 1024;"
            ]
        ],
        "tokensMethodJavadocValues": [],
        "tokensMethodArguments": [
            [
                "manager",
                "org.graphstream.ui.view.util",
                "ShortcutManager"
            ]
        ],
        "tokensMethodVariablesNonPrivateNonStaticNonVoidMethods": [
            [
                "getCamera",
                "org.graphstream.ui.view",
                "View",
                "/**\n * Get a camera object to provide control commands on the view.\n *\n * @return a Camera instance\n */\nCamera getCamera();"
            ],
            [
                "findNodeOrSpriteAt",
                "org.graphstream.ui.view",
                "View",
                "/**\n * Search for the first node or sprite (in that order) that contains the\n * point at coordinates (x, y).\n *\n * @param x The point abscissa.\n * @param y The point ordinate.\n * @return The first node or sprite at the given coordinates or null if\n * nothing found.\n */\nGraphicElement findNodeOrSpriteAt(double x, double y);"
            ],
            [
                "allNodesOrSpritesIn",
                "org.graphstream.ui.view",
                "View",
                "/**\n * Search for all the nodes and sprites contained inside the rectangle\n * (x1,y1)-(x2,y2).\n *\n * @param x1 The rectangle lowest point abscissa.\n * @param y1 The rectangle lowest point ordinate.\n * @param x2 The rectangle highest point abscissa.\n * @param y2 The rectangle highest point ordinate.\n * @return The set of sprites and nodes in the given rectangle.\n */\nCollection<GraphicElement> allNodesOrSpritesIn(double x1, double y1, double x2, double y2);"
            ],
            [
                "getId",
                "org.graphstream.ui.view",
                "View",
                "/**\n * Get the unique view id.\n *\n * @return a view id\n */\nString getId();"
            ],
            [
                "toString",
                "java.lang",
                "Object",
                "public String toString()"
            ],
            [
                "hashCode",
                "java.lang",
                "Object",
                "public native int hashCode()"
            ],
            [
                "getClass",
                "java.lang",
                "Object",
                "public final native Class<? extends Object> getClass()"
            ],
            [
                "equals",
                "java.lang",
                "Object",
                "public boolean equals(Object arg0)"
            ],
            [
                "clone",
                "java.lang",
                "Object",
                "protected native Object clone() throws CloneNotSupportedException"
            ]
        ],
        "tokensMethodVariablesNonPrivateNonStaticAttributes": [],
        "tokensOracleVariablesNonPrivateNonStaticNonVoidMethods": [],
        "tokensOracleVariablesNonPrivateNonStaticAttributes": []
    }
]