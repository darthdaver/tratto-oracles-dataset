[ {
  "id" : 8952,
  "oracle" : ";",
  "oracleType" : "PRE",
  "projectName" : "commons-collections4-4.1",
  "packageName" : "org.apache.commons.collections4",
  "className" : "TransformerUtils",
  "javadocTag" : "@param <I> the input type",
  "methodJavadoc" : "    /**\n     * Create a new Transformer that calls one of the transformers depending\n     * on the predicates. The transformer at array location 0 is called if the\n     * predicate at array location 0 returned true. Each predicate is evaluated\n     * until one returns true. If no predicates evaluate to true, null is returned.\n     *\n     * @param <I>  the input type\n     * @param <O>  the output type\n     * @param predicates  an array of predicates to check\n     * @param transformers  an array of transformers to call\n     * @return the transformer\n     * @throws NullPointerException if the either array is null\n     * @throws NullPointerException if any element in the arrays is null\n     * @throws IllegalArgumentException if the arrays have different sizes\n     * @see SwitchTransformer\n     */",
  "methodSourceCode" : "public static <I, O> Transformer<I, O> switchTransformer(final Predicate<? super I>[] predicates, final Transformer<? super I, ? extends O>[] transformers){\n    return SwitchTransformer.switchTransformer(predicates, transformers, null);\n}",
  "classJavadoc" : "/**\n * <code>TransformerUtils</code> provides reference implementations and\n * utilities for the Transformer functor interface. The supplied transformers are:\n * <ul>\n * <li>Invoker - returns the result of a method call on the input object\n * <li>Clone - returns a clone of the input object\n * <li>Constant - always returns the same object\n * <li>Closure - performs a Closure and returns the input object\n * <li>Predicate - returns the result of the predicate as a Boolean\n * <li>Factory - returns a new object from a factory\n * <li>Chained - chains two or more transformers together\n * <li>If - calls one transformer or another based on a predicate\n * <li>Switch - calls one transformer based on one or more predicates\n * <li>SwitchMap - calls one transformer looked up from a Map\n * <li>Instantiate - the Class input object is instantiated\n * <li>Map - returns an object from a supplied Map\n * <li>Null - always returns null\n * <li>NOP - returns the input object, which should be immutable\n * <li>Exception - always throws an exception\n * <li>StringValue - returns a <code>java.lang.String</code> representation of the input object\n * </ul>\n * <p>\n * Since v4.1 only transformers which are considered to be unsafe are\n * Serializable. Transformers considered to be unsafe for serialization are:\n * <ul>\n * <li>Invoker\n * <li>Clone\n * <li>Instantiate\n * </ul>\n *\n * @since 3.0\n * @version $Id: TransformerUtils.java 1714362 2015-11-14 20:38:02Z tn $\n */",
  "classSourceCode" : "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.commons.collections4;\n\nimport java.util.Collection;\nimport java.util.Map;\n\nimport org.apache.commons.collections4.functors.ChainedTransformer;\nimport org.apache.commons.collections4.functors.CloneTransformer;\nimport org.apache.commons.collections4.functors.ClosureTransformer;\nimport org.apache.commons.collections4.functors.ConstantTransformer;\nimport org.apache.commons.collections4.functors.EqualPredicate;\nimport org.apache.commons.collections4.functors.ExceptionTransformer;\nimport org.apache.commons.collections4.functors.FactoryTransformer;\nimport org.apache.commons.collections4.functors.IfTransformer;\nimport org.apache.commons.collections4.functors.InstantiateTransformer;\nimport org.apache.commons.collections4.functors.InvokerTransformer;\nimport org.apache.commons.collections4.functors.MapTransformer;\nimport org.apache.commons.collections4.functors.NOPTransformer;\nimport org.apache.commons.collections4.functors.PredicateTransformer;\nimport org.apache.commons.collections4.functors.StringValueTransformer;\nimport org.apache.commons.collections4.functors.SwitchTransformer;\n\n/**\n * <code>TransformerUtils</code> provides reference implementations and\n * utilities for the Transformer functor interface. The supplied transformers are:\n * <ul>\n * <li>Invoker - returns the result of a method call on the input object\n * <li>Clone - returns a clone of the input object\n * <li>Constant - always returns the same object\n * <li>Closure - performs a Closure and returns the input object\n * <li>Predicate - returns the result of the predicate as a Boolean\n * <li>Factory - returns a new object from a factory\n * <li>Chained - chains two or more transformers together\n * <li>If - calls one transformer or another based on a predicate\n * <li>Switch - calls one transformer based on one or more predicates\n * <li>SwitchMap - calls one transformer looked up from a Map\n * <li>Instantiate - the Class input object is instantiated\n * <li>Map - returns an object from a supplied Map\n * <li>Null - always returns null\n * <li>NOP - returns the input object, which should be immutable\n * <li>Exception - always throws an exception\n * <li>StringValue - returns a <code>java.lang.String</code> representation of the input object\n * </ul>\n * <p>\n * Since v4.1 only transformers which are considered to be unsafe are\n * Serializable. Transformers considered to be unsafe for serialization are:\n * <ul>\n * <li>Invoker\n * <li>Clone\n * <li>Instantiate\n * </ul>\n *\n * @since 3.0\n * @version $Id: TransformerUtils.java 1714362 2015-11-14 20:38:02Z tn $\n */\npublic class TransformerUtils {\n\n    /**\n     * This class is not normally instantiated.\n     */\n    private TransformerUtils() {}\n\n    /**\n     * Gets a transformer that always throws an exception.\n     * This could be useful during testing as a placeholder.\n     *\n     * @param <I>  the input type\n     * @param <O>  the output type\n     * @return the transformer\n     * @see ExceptionTransformer\n     */\n    public static <I, O> Transformer<I, O> exceptionTransformer() {\n        return ExceptionTransformer.exceptionTransformer();\n    }\n\n    /**\n     * Gets a transformer that always returns null.\n     *\n     * @param <I>  the input type\n     * @param <O>  the output type\n     * @return the transformer\n     * @see ConstantTransformer\n     */\n    public static <I, O> Transformer<I, O> nullTransformer() {\n        return ConstantTransformer.nullTransformer();\n    }\n\n    /**\n     * Gets a transformer that returns the input object.\n     * The input object should be immutable to maintain the\n     * contract of Transformer (although this is not checked).\n     *\n     * @param <T>  the input/output type\n     * @return the transformer\n     * @see NOPTransformer\n     */\n    public static <T> Transformer<T, T> nopTransformer() {\n        return NOPTransformer.nopTransformer();\n    }\n\n    /**\n     * Gets a transformer that returns a clone of the input object.\n     * The input object will be cloned using one of these techniques (in order):\n     * <ul>\n     * <li>public clone method\n     * <li>public copy constructor\n     * <li>serialization clone\n     * <ul>\n     *\n     * @param <T>  the input/output type\n     * @return the transformer\n     * @see CloneTransformer\n     */\n    public static <T> Transformer<T, T> cloneTransformer() {\n        return CloneTransformer.cloneTransformer();\n    }\n\n    /**\n     * Creates a Transformer that will return the same object each time the\n     * transformer is used.\n     *\n     * @param <I>  the input type\n     * @param <O>  the output type\n     * @param constantToReturn  the constant object to return each time in the transformer\n     * @return the transformer.\n     * @see ConstantTransformer\n     */\n    public static <I, O> Transformer<I, O> constantTransformer(final O constantToReturn) {\n        return ConstantTransformer.constantTransformer(constantToReturn);\n    }\n\n    /**\n     * Creates a Transformer that calls a Closure each time the transformer is used.\n     * The transformer returns the input object.\n     *\n     * @param <T>  the input/output type\n     * @param closure  the closure to run each time in the transformer, not null\n     * @return the transformer\n     * @throws NullPointerException if the closure is null\n     * @see ClosureTransformer\n     */\n    public static <T> Transformer<T, T> asTransformer(final Closure<? super T> closure) {\n        return ClosureTransformer.closureTransformer(closure);\n    }\n\n    /**\n     * Creates a Transformer that calls a Predicate each time the transformer is used.\n     * The transformer will return either Boolean.TRUE or Boolean.FALSE.\n     *\n     * @param <T>  the input type\n     * @param predicate  the predicate to run each time in the transformer, not null\n     * @return the transformer\n     * @throws NullPointerException if the predicate is null\n     * @see PredicateTransformer\n     */\n    public static <T> Transformer<T, Boolean> asTransformer(final Predicate<? super T> predicate) {\n        return PredicateTransformer.predicateTransformer(predicate);\n    }\n\n    /**\n     * Creates a Transformer that calls a Factory each time the transformer is used.\n     * The transformer will return the value returned by the factory.\n     *\n     * @param <I>  the input type\n     * @param <O>  the output type\n     * @param factory  the factory to run each time in the transformer, not null\n     * @return the transformer\n     * @throws NullPointerException if the factory is null\n     * @see FactoryTransformer\n     */\n    public static <I, O> Transformer<I, O> asTransformer(final Factory<? extends O> factory) {\n        return FactoryTransformer.factoryTransformer(factory);\n    }\n\n    /**\n     * Create a new Transformer that calls each transformer in turn, passing the\n     * result into the next transformer.\n     *\n     * @param <T>  the input/output type\n     * @param transformers  an array of transformers to chain\n     * @return the transformer\n     * @throws NullPointerException if the transformers array or any of the transformers is null\n     * @see ChainedTransformer\n     */\n    public static <T> Transformer<T, T> chainedTransformer(\n            final Transformer<? super T, ? extends T>... transformers) {\n        return ChainedTransformer.chainedTransformer(transformers);\n    }\n\n    /**\n     * Create a new Transformer that calls each transformer in turn, passing the\n     * result into the next transformer. The ordering is that of the iterator()\n     * method on the collection.\n     *\n     * @param <T>  the input/output type\n     * @param transformers  a collection of transformers to chain\n     * @return the transformer\n     * @throws NullPointerException if the transformers collection or any of the transformers is null\n     * @see ChainedTransformer\n     */\n    public static <T> Transformer<T, T> chainedTransformer(\n            final Collection<? extends Transformer<? super T, ? extends T>> transformers) {\n        return ChainedTransformer.chainedTransformer(transformers);\n    }\n\n    /**\n     * Create a new Transformer that calls the transformer if the predicate is true,\n     * otherwise the input object is returned unchanged.\n     *\n     * @param <T>  the input / output type\n     * @param predicate  the predicate to switch on\n     * @param trueTransformer  the transformer called if the predicate is true\n     * @return the transformer\n     * @throws NullPointerException if either the predicate or transformer is null\n     * @see IfTransformer\n     * @since 4.1\n     */\n    public static <T> Transformer<T, T> ifTransformer(final Predicate<? super T> predicate,\n                                                      final Transformer<? super T, ? extends T> trueTransformer) {\n        return IfTransformer.ifTransformer(predicate, trueTransformer);\n    }\n\n    /**\n     * Create a new Transformer that calls one of two transformers depending\n     * on the specified predicate.\n     *\n     * @param <I>  the input type\n     * @param <O>  the output type\n     * @param predicate  the predicate to switch on\n     * @param trueTransformer  the transformer called if the predicate is true\n     * @param falseTransformer  the transformer called if the predicate is false\n     * @return the transformer\n     * @throws NullPointerException if either the predicate or transformer is null\n     * @see IfTransformer\n     * @since 4.1\n     */\n    public static <I, O> Transformer<I, O> ifTransformer(final Predicate<? super I> predicate,\n                                                         final Transformer<? super I, ? extends O> trueTransformer,\n                                                         final Transformer<? super I, ? extends O> falseTransformer) {\n        return IfTransformer.ifTransformer(predicate, trueTransformer, falseTransformer);\n    }\n\n    /**\n     * Create a new Transformer that calls one of two transformers depending\n     * on the specified predicate.\n     *\n     * @param <I>  the input type\n     * @param <O>  the output type\n     * @param predicate  the predicate to switch on\n     * @param trueTransformer  the transformer called if the predicate is true\n     * @param falseTransformer  the transformer called if the predicate is false\n     * @return the transformer\n     * @throws NullPointerException if either the predicate or transformer is null\n     * @see SwitchTransformer\n     * @deprecated as of 4.1, use {@link #ifTransformer(Predicate, Transformer, Transformer))\n     */\n    @SuppressWarnings(\"unchecked\")\n    @Deprecated\n    public static <I, O> Transformer<I, O> switchTransformer(final Predicate<? super I> predicate,\n            final Transformer<? super I, ? extends O> trueTransformer,\n            final Transformer<? super I, ? extends O> falseTransformer) {\n        return SwitchTransformer.switchTransformer(new Predicate[] { predicate },\n                                                   new Transformer[] { trueTransformer }, falseTransformer);\n    }\n\n    /**\n     * Create a new Transformer that calls one of the transformers depending\n     * on the predicates. The transformer at array location 0 is called if the\n     * predicate at array location 0 returned true. Each predicate is evaluated\n     * until one returns true. If no predicates evaluate to true, null is returned.\n     *\n     * @param <I>  the input type\n     * @param <O>  the output type\n     * @param predicates  an array of predicates to check\n     * @param transformers  an array of transformers to call\n     * @return the transformer\n     * @throws NullPointerException if the either array is null\n     * @throws NullPointerException if any element in the arrays is null\n     * @throws IllegalArgumentException if the arrays have different sizes\n     * @see SwitchTransformer\n     */\n    public static <I, O> Transformer<I, O> switchTransformer(final Predicate<? super I>[] predicates,\n            final Transformer<? super I, ? extends O>[] transformers) {\n        return SwitchTransformer.switchTransformer(predicates, transformers, null);\n    }\n\n    /**\n     * Create a new Transformer that calls one of the transformers depending\n     * on the predicates. The transformer at array location 0 is called if the\n     * predicate at array location 0 returned true. Each predicate is evaluated\n     * until one returns true. If no predicates evaluate to true, the default\n     * transformer is called. If the default transformer is null, null is returned.\n     *\n     * @param <I>  the input type\n     * @param <O>  the output type\n     * @param predicates  an array of predicates to check\n     * @param transformers  an array of transformers to call\n     * @param defaultTransformer  the default to call if no predicate matches, null means return null\n     * @return the transformer\n     * @throws NullPointerException if the either array is null\n     * @throws NullPointerException if any element in the arrays is null\n     * @throws IllegalArgumentException if the arrays have different sizes\n     * @see SwitchTransformer\n     */\n    public static <I, O> Transformer<I, O> switchTransformer(final Predicate<? super I>[] predicates,\n            final Transformer<? super I, ? extends O>[] transformers,\n            final Transformer<? super I, ? extends O> defaultTransformer) {\n        return SwitchTransformer.switchTransformer(predicates, transformers, defaultTransformer);\n    }\n\n    /**\n     * Create a new Transformer that calls one of the transformers depending\n     * on the predicates.\n     * <p>\n     * The Map consists of Predicate keys and Transformer values. A transformer\n     * is called if its matching predicate returns true. Each predicate is evaluated\n     * until one returns true. If no predicates evaluate to true, the default\n     * transformer is called. The default transformer is set in the map with a\n     * null key. If no default transformer is set, null will be returned in a default\n     * case. The ordering is that of the iterator() method on the entryset collection\n     * of the map.\n     *\n     * @param <I>  the input type\n     * @param <O>  the output type\n     * @param predicatesAndTransformers  a map of predicates to transformers\n     * @return the transformer\n     * @throws NullPointerException if the map is null\n     * @throws NullPointerException if any transformer in the map is null\n     * @throws ClassCastException  if the map elements are of the wrong type\n     * @see SwitchTransformer\n     */\n    public static <I, O> Transformer<I, O> switchTransformer(\n            final Map<Predicate<I>, Transformer<I, O>> predicatesAndTransformers) {\n        return SwitchTransformer.switchTransformer(predicatesAndTransformers);\n    }\n\n    /**\n     * Create a new Transformer that uses the input object as a key to find the\n     * transformer to call.\n     * <p>\n     * The Map consists of object keys and Transformer values. A transformer\n     * is called if the input object equals the key. If there is no match, the\n     * default transformer is called. The default transformer is set in the map\n     * using a null key. If no default is set, null will be returned in a default case.\n     *\n     * @param <I>  the input type\n     * @param <O>  the output type\n     * @param objectsAndTransformers  a map of objects to transformers\n     * @return the transformer\n     * @throws NullPointerException if the map is null\n     * @throws NullPointerException if any transformer in the map is null\n     * @see SwitchTransformer\n     */\n    @SuppressWarnings(\"unchecked\")\n    public static <I, O> Transformer<I, O> switchMapTransformer(\n            final Map<I, Transformer<I, O>> objectsAndTransformers) {\n\n        if (objectsAndTransformers == null) {\n            throw new NullPointerException(\"The object and transformer map must not be null\");\n        }\n        final Transformer<? super I, ? extends O> def = objectsAndTransformers.remove(null);\n        final int size = objectsAndTransformers.size();\n        final Transformer<? super I, ? extends O>[] trs = new Transformer[size];\n        final Predicate<I>[] preds = new Predicate[size];\n        int i = 0;\n        for (final Map.Entry<I, Transformer<I, O>> entry : objectsAndTransformers.entrySet()) {\n            preds[i] = EqualPredicate.<I>equalPredicate(entry.getKey());\n            trs[i++] = entry.getValue();\n        }\n        return TransformerUtils.switchTransformer(preds, trs, def);\n    }\n\n    /**\n     * Gets a Transformer that expects an input Class object that it will instantiate.\n     *\n     * @param <T>  the output type\n     * @return the transformer\n     * @see InstantiateTransformer\n     */\n    public static <T> Transformer<Class<? extends T>, T> instantiateTransformer() {\n        return InstantiateTransformer.instantiateTransformer();\n    }\n\n    /**\n     * Creates a Transformer that expects an input Class object that it will\n     * instantiate. The constructor used is determined by the arguments specified\n     * to this method.\n     *\n     * @param <T>  the output type\n     * @param paramTypes  parameter types for the constructor, can be null\n     * @param args  the arguments to pass to the constructor, can be null\n     * @return the transformer\n     * @throws IllegalArgumentException if the paramTypes and args don't match\n     * @see InstantiateTransformer\n     */\n    public static <T> Transformer<Class<? extends T>, T> instantiateTransformer(\n            final Class<?>[] paramTypes, final Object[] args) {\n        return InstantiateTransformer.instantiateTransformer(paramTypes, args);\n    }\n\n    /**\n     * Creates a Transformer that uses the passed in Map to transform the input\n     * object (as a simple lookup).\n     *\n     * @param <I>  the input type\n     * @param <O>  the output type\n     * @param map  the map to use to transform the objects\n     * @return the transformer, or {@link ConstantTransformer#nullTransformer()} if the\n     *   {@code map} is {@code null}\n     * @see MapTransformer\n     */\n    public static <I, O> Transformer<I, O> mapTransformer(final Map<? super I, ? extends O> map) {\n        return MapTransformer.mapTransformer(map);\n    }\n\n    /**\n     * Gets a Transformer that invokes a method on the input object.\n     * The method must have no parameters. If the input object is null,\n     * null is returned.\n     * <p>\n     * For example, <code>TransformerUtils.invokerTransformer(\"getName\");</code>\n     * will call the <code>getName/code> method on the input object to\n     * determine the transformer result.\n     *\n     * @param <I>  the input type\n     * @param <O>  the output type\n     * @param methodName  the method name to call on the input object, may not be null\n     * @return the transformer\n     * @throws NullPointerException if the methodName is null.\n     * @see InvokerTransformer\n     */\n    public static <I, O> Transformer<I, O> invokerTransformer(final String methodName) {\n        return InvokerTransformer.invokerTransformer(methodName, null, null);\n    }\n\n    /**\n     * Gets a Transformer that invokes a method on the input object.\n     * The method parameters are specified. If the input object is {@code null},\n     * {@code null} is returned.\n     *\n     * @param <I>  the input type\n     * @param <O>  the output type\n     * @param methodName  the name of the method\n     * @param paramTypes  the parameter types\n     * @param args  the arguments\n     * @return the transformer\n     * @throws NullPointerException if the method name is null\n     * @throws IllegalArgumentException if the paramTypes and args don't match\n     * @see InvokerTransformer\n     */\n    public static <I, O> Transformer<I, O> invokerTransformer(final String methodName, final Class<?>[] paramTypes,\n                                                              final Object[] args) {\n        return InvokerTransformer.invokerTransformer(methodName, paramTypes, args);\n    }\n\n    /**\n     * Gets a transformer that returns a <code>java.lang.String</code>\n     * representation of the input object. This is achieved via the\n     * <code>toString</code> method, <code>null</code> returns 'null'.\n     *\n     * @param <T>  the input type\n     * @return the transformer\n     * @see StringValueTransformer\n     */\n    public static <T> Transformer<T, String> stringValueTransformer() {\n        return StringValueTransformer.stringValueTransformer();\n    }\n\n}\n",
  "tokensGeneralGrammar" : [ "null", "true", "false", ",", ".", ":", ";", "?", "(", ")", "jdVar", "stream", "Arrays", "allMatch", "noneMatch", "anyMatch", "~", ">>", "<<", ">>>", "|", "&", "^", "+", "-", "/", "*", "%", "&&", "||", ">=", "<=", ">", "<", "==", "!=", "instanceof", "class", "methodResultID", "this" ],
  "tokensGeneralValuesGlobalDictionary" : [ [ "0", "int" ], [ "1", "int" ], [ "-1", "int" ], [ "0.0", "double" ], [ "1.0", "double" ], [ "-1.0", "double" ], [ "\"\"", "String" ], [ "\" \"", "String" ] ],
  "tokensProjectClasses" : [ [ "BidiMap", "org.apache.commons.collections4" ], [ "Equator", "org.apache.commons.collections4" ], [ "MultiSet", "org.apache.commons.collections4" ], [ "IteratorUtils", "org.apache.commons.collections4" ], [ "ComparatorUtils", "org.apache.commons.collections4" ], [ "FunctorException", "org.apache.commons.collections4" ], [ "AbstractDualBidiMap", "org.apache.commons.collections4.bidimap" ], [ "UnmodifiableBidiMap", "org.apache.commons.collections4.bidimap" ], [ "AbstractOrderedBidiMapDecorator", "org.apache.commons.collections4.bidimap" ], [ "UnmodifiableOrderedBidiMap", "org.apache.commons.collections4.bidimap" ], [ "AbstractBidiMapDecorator", "org.apache.commons.collections4.bidimap" ], [ "DualLinkedHashBidiMap", "org.apache.commons.collections4.bidimap" ], [ "UnmodifiableSortedBidiMap", "org.apache.commons.collections4.bidimap" ], [ "AbstractSortedBidiMapDecorator", "org.apache.commons.collections4.bidimap" ], [ "DualHashBidiMap", "org.apache.commons.collections4.bidimap" ], [ "DualTreeBidiMap", "org.apache.commons.collections4.bidimap" ], [ "TreeBidiMap", "org.apache.commons.collections4.bidimap" ], [ "MultiMapUtils", "org.apache.commons.collections4" ], [ "BoundedCollection", "org.apache.commons.collections4" ], [ "UnmodifiableBoundedCollection", "org.apache.commons.collections4.collection" ], [ "CompositeCollection", "org.apache.commons.collections4.collection" ], [ "TransformedCollection", "org.apache.commons.collections4.collection" ], [ "PredicatedCollection", "org.apache.commons.collections4.collection" ], [ "IndexedCollection", "org.apache.commons.collections4.collection" ], [ "SynchronizedCollection", "org.apache.commons.collections4.collection" ], [ "UnmodifiableCollection", "org.apache.commons.collections4.collection" ], [ "AbstractCollectionDecorator", "org.apache.commons.collections4.collection" ], [ "OrderedBidiMap", "org.apache.commons.collections4" ], [ "FactoryUtils", "org.apache.commons.collections4" ], [ "IterableGet", "org.apache.commons.collections4" ], [ "ListUtils", "org.apache.commons.collections4" ], [ "Closure", "org.apache.commons.collections4" ], [ "IterableSortedMap", "org.apache.commons.collections4" ], [ "MapUtils", "org.apache.commons.collections4" ], [ "Transformer", "org.apache.commons.collections4" ], [ "DefaultEquator", "org.apache.commons.collections4.functors" ], [ "StringValueTransformer", "org.apache.commons.collections4.functors" ], [ "PredicateDecorator", "org.apache.commons.collections4.functors" ], [ "IfTransformer", "org.apache.commons.collections4.functors" ], [ "IdentityPredicate", "org.apache.commons.collections4.functors" ], [ "ExceptionClosure", "org.apache.commons.collections4.functors" ], [ "NOPClosure", "org.apache.commons.collections4.functors" ], [ "ClosureTransformer", "org.apache.commons.collections4.functors" ], [ "FunctorUtils", "org.apache.commons.collections4.functors" ], [ "TransformerPredicate", "org.apache.commons.collections4.functors" ], [ "NullPredicate", "org.apache.commons.collections4.functors" ], [ "ConstantTransformer", "org.apache.commons.collections4.functors" ], [ "PredicateTransformer", "org.apache.commons.collections4.functors" ], [ "WhileClosure", "org.apache.commons.collections4.functors" ], [ "ForClosure", "org.apache.commons.collections4.functors" ], [ "NullIsTruePredicate", "org.apache.commons.collections4.functors" ], [ "TransformedPredicate", "org.apache.commons.collections4.functors" ], [ "NonePredicate", "org.apache.commons.collections4.functors" ], [ "ExceptionTransformer", "org.apache.commons.collections4.functors" ], [ "SwitchTransformer", "org.apache.commons.collections4.functors" ], [ "TransformerClosure", "org.apache.commons.collections4.functors" ], [ "OrPredicate", "org.apache.commons.collections4.functors" ], [ "NOPTransformer", "org.apache.commons.collections4.functors" ], [ "MapTransformer", "org.apache.commons.collections4.functors" ], [ "ExceptionFactory", "org.apache.commons.collections4.functors" ], [ "ChainedClosure", "org.apache.commons.collections4.functors" ], [ "AndPredicate", "org.apache.commons.collections4.functors" ], [ "PrototypeFactory", "org.apache.commons.collections4.functors" ], [ "ExceptionPredicate", "org.apache.commons.collections4.functors" ], [ "AbstractQuantifierPredicate", "org.apache.commons.collections4.functors" ], [ "InstanceofPredicate", "org.apache.commons.collections4.functors" ], [ "InvokerTransformer", "org.apache.commons.collections4.functors" ], [ "FalsePredicate", "org.apache.commons.collections4.functors" ], [ "CloneTransformer", "org.apache.commons.collections4.functors" ], [ "NotPredicate", "org.apache.commons.collections4.functors" ], [ "ConstantFactory", "org.apache.commons.collections4.functors" ], [ "ChainedTransformer", "org.apache.commons.collections4.functors" ], [ "ComparatorPredicate", "org.apache.commons.collections4.functors" ], [ "CatchAndRethrowClosure", "org.apache.commons.collections4.functors" ], [ "AllPredicate", "org.apache.commons.collections4.functors" ], [ "NullIsFalsePredicate", "org.apache.commons.collections4.functors" ], [ "NullIsExceptionPredicate", "org.apache.commons.collections4.functors" ], [ "AnyPredicate", "org.apache.commons.collections4.functors" ], [ "TruePredicate", "org.apache.commons.collections4.functors" ], [ "FactoryTransformer", "org.apache.commons.collections4.functors" ], [ "NotNullPredicate", "org.apache.commons.collections4.functors" ], [ "SwitchClosure", "org.apache.commons.collections4.functors" ], [ "UniquePredicate", "org.apache.commons.collections4.functors" ], [ "InstantiateTransformer", "org.apache.commons.collections4.functors" ], [ "OnePredicate", "org.apache.commons.collections4.functors" ], [ "EqualPredicate", "org.apache.commons.collections4.functors" ], [ "InstantiateFactory", "org.apache.commons.collections4.functors" ], [ "IfClosure", "org.apache.commons.collections4.functors" ], [ "ResettableListIterator", "org.apache.commons.collections4" ], [ "OrderedIterator", "org.apache.commons.collections4" ], [ "ComparatorChain", "org.apache.commons.collections4.comparators" ], [ "BooleanComparator", "org.apache.commons.collections4.comparators" ], [ "ReverseComparator", "org.apache.commons.collections4.comparators" ], [ "ComparableComparator", "org.apache.commons.collections4.comparators" ], [ "TransformingComparator", "org.apache.commons.collections4.comparators" ], [ "FixedOrderComparator", "org.apache.commons.collections4.comparators" ], [ "NullComparator", "org.apache.commons.collections4.comparators" ], [ "CollectionUtils", "org.apache.commons.collections4" ], [ "ListValuedMap", "org.apache.commons.collections4" ], [ "AbstractIterableGetMapDecorator", "org.apache.commons.collections4.splitmap" ], [ "TransformedSplitMap", "org.apache.commons.collections4.splitmap" ], [ "Factory", "org.apache.commons.collections4" ], [ "IterableUtils", "org.apache.commons.collections4" ], [ "Bag", "org.apache.commons.collections4" ], [ "Predicate", "org.apache.commons.collections4" ], [ "SortedBag", "org.apache.commons.collections4" ], [ "TrieUtils", "org.apache.commons.collections4" ], [ "ClosureUtils", "org.apache.commons.collections4" ], [ "PatriciaTrie", "org.apache.commons.collections4.trie" ], [ "UnmodifiableTrie", "org.apache.commons.collections4.trie" ], [ "KeyAnalyzer", "org.apache.commons.collections4.trie" ], [ "AbstractPatriciaTrie", "org.apache.commons.collections4.trie" ], [ "AbstractBitwiseTrie", "org.apache.commons.collections4.trie" ], [ "StringKeyAnalyzer", "org.apache.commons.collections4.trie.analyzer" ], [ "TransformedSortedMap", "org.apache.commons.collections4.map" ], [ "AbstractLinkedMap", "org.apache.commons.collections4.map" ], [ "Flat3Map", "org.apache.commons.collections4.map" ], [ "PredicatedMap", "org.apache.commons.collections4.map" ], [ "FixedSizeSortedMap", "org.apache.commons.collections4.map" ], [ "UnmodifiableSortedMap", "org.apache.commons.collections4.map" ], [ "PredicatedSortedMap", "org.apache.commons.collections4.map" ], [ "DefaultedMap", "org.apache.commons.collections4.map" ], [ "ReferenceIdentityMap", "org.apache.commons.collections4.map" ], [ "AbstractSortedMapDecorator", "org.apache.commons.collections4.map" ], [ "AbstractInputCheckedMapDecorator", "org.apache.commons.collections4.map" ], [ "FixedSizeMap", "org.apache.commons.collections4.map" ], [ "LazySortedMap", "org.apache.commons.collections4.map" ], [ "UnmodifiableOrderedMap", "org.apache.commons.collections4.map" ], [ "CaseInsensitiveMap", "org.apache.commons.collections4.map" ], [ "AbstractHashedMap", "org.apache.commons.collections4.map" ], [ "AbstractOrderedMapDecorator", "org.apache.commons.collections4.map" ], [ "UnmodifiableMap", "org.apache.commons.collections4.map" ], [ "EntrySetToMapIteratorAdapter", "org.apache.commons.collections4.map" ], [ "AbstractIterableMap", "org.apache.commons.collections4.map" ], [ "ListOrderedMap", "org.apache.commons.collections4.map" ], [ "LinkedMap", "org.apache.commons.collections4.map" ], [ "SingletonMap", "org.apache.commons.collections4.map" ], [ "UnmodifiableEntrySet", "org.apache.commons.collections4.map" ], [ "StaticBucketMap", "org.apache.commons.collections4.map" ], [ "AbstractMapDecorator", "org.apache.commons.collections4.map" ], [ "AbstractReferenceMap", "org.apache.commons.collections4.map" ], [ "MultiKeyMap", "org.apache.commons.collections4.map" ], [ "HashedMap", "org.apache.commons.collections4.map" ], [ "LazyMap", "org.apache.commons.collections4.map" ], [ "PassiveExpiringMap", "org.apache.commons.collections4.map" ], [ "MultiValueMap", "org.apache.commons.collections4.map" ], [ "LRUMap", "org.apache.commons.collections4.map" ], [ "ReferenceMap", "org.apache.commons.collections4.map" ], [ "TransformedMap", "org.apache.commons.collections4.map" ], [ "CompositeMap", "org.apache.commons.collections4.map" ], [ "UnmodifiableMapEntry", "org.apache.commons.collections4.keyvalue" ], [ "MultiKey", "org.apache.commons.collections4.keyvalue" ], [ "DefaultMapEntry", "org.apache.commons.collections4.keyvalue" ], [ "DefaultKeyValue", "org.apache.commons.collections4.keyvalue" ], [ "AbstractMapEntryDecorator", "org.apache.commons.collections4.keyvalue" ], [ "AbstractKeyValue", "org.apache.commons.collections4.keyvalue" ], [ "TiedMapEntry", "org.apache.commons.collections4.keyvalue" ], [ "AbstractMapEntry", "org.apache.commons.collections4.keyvalue" ], [ "MultiSetUtils", "org.apache.commons.collections4" ], [ "MapIterator", "org.apache.commons.collections4" ], [ "AbstractMultiValuedMap", "org.apache.commons.collections4.multimap" ], [ "UnmodifiableMultiValuedMap", "org.apache.commons.collections4.multimap" ], [ "HashSetValuedHashMap", "org.apache.commons.collections4.multimap" ], [ "TransformedMultiValuedMap", "org.apache.commons.collections4.multimap" ], [ "AbstractSetValuedMap", "org.apache.commons.collections4.multimap" ], [ "AbstractListValuedMap", "org.apache.commons.collections4.multimap" ], [ "ArrayListValuedHashMap", "org.apache.commons.collections4.multimap" ], [ "AbstractMultiValuedMapDecorator", "org.apache.commons.collections4.multimap" ], [ "LazyList", "org.apache.commons.collections4.list" ], [ "AbstractSerializableListDecorator", "org.apache.commons.collections4.list" ], [ "TreeList", "org.apache.commons.collections4.list" ], [ "SetUniqueList", "org.apache.commons.collections4.list" ], [ "AbstractListDecorator", "org.apache.commons.collections4.list" ], [ "NodeCachingLinkedList", "org.apache.commons.collections4.list" ], [ "UnmodifiableList", "org.apache.commons.collections4.list" ], [ "FixedSizeList", "org.apache.commons.collections4.list" ], [ "TransformedList", "org.apache.commons.collections4.list" ], [ "GrowthList", "org.apache.commons.collections4.list" ], [ "AbstractLinkedList", "org.apache.commons.collections4.list" ], [ "CursorableLinkedList", "org.apache.commons.collections4.list" ], [ "PredicatedList", "org.apache.commons.collections4.list" ], [ "OrderedMap", "org.apache.commons.collections4" ], [ "AbstractQueueDecorator", "org.apache.commons.collections4.queue" ], [ "TransformedQueue", "org.apache.commons.collections4.queue" ], [ "UnmodifiableQueue", "org.apache.commons.collections4.queue" ], [ "CircularFifoQueue", "org.apache.commons.collections4.queue" ], [ "PredicatedQueue", "org.apache.commons.collections4.queue" ], [ "FluentIterable", "org.apache.commons.collections4" ], [ "TransformerUtils", "org.apache.commons.collections4" ], [ "PredicateUtils", "org.apache.commons.collections4" ], [ "ResettableIterator", "org.apache.commons.collections4" ], [ "MultiValuedMap", "org.apache.commons.collections4" ], [ "SetUtils", "org.apache.commons.collections4" ], [ "SortedBidiMap", "org.apache.commons.collections4" ], [ "ArrayStack", "org.apache.commons.collections4" ], [ "Put", "org.apache.commons.collections4" ], [ "OrderedMapIterator", "org.apache.commons.collections4" ], [ "TransformedSet", "org.apache.commons.collections4.set" ], [ "CompositeSet", "org.apache.commons.collections4.set" ], [ "TransformedNavigableSet", "org.apache.commons.collections4.set" ], [ "PredicatedNavigableSet", "org.apache.commons.collections4.set" ], [ "AbstractSetDecorator", "org.apache.commons.collections4.set" ], [ "ListOrderedSet", "org.apache.commons.collections4.set" ], [ "UnmodifiableSet", "org.apache.commons.collections4.set" ], [ "AbstractSerializableSetDecorator", "org.apache.commons.collections4.set" ], [ "MapBackedSet", "org.apache.commons.collections4.set" ], [ "UnmodifiableSortedSet", "org.apache.commons.collections4.set" ], [ "PredicatedSortedSet", "org.apache.commons.collections4.set" ], [ "AbstractSortedSetDecorator", "org.apache.commons.collections4.set" ], [ "PredicatedSet", "org.apache.commons.collections4.set" ], [ "AbstractNavigableSetDecorator", "org.apache.commons.collections4.set" ], [ "UnmodifiableNavigableSet", "org.apache.commons.collections4.set" ], [ "TransformedSortedSet", "org.apache.commons.collections4.set" ], [ "IterableMap", "org.apache.commons.collections4" ], [ "EnumerationUtils", "org.apache.commons.collections4" ], [ "DeleteCommand", "org.apache.commons.collections4.sequence" ], [ "ReplacementsHandler", "org.apache.commons.collections4.sequence" ], [ "InsertCommand", "org.apache.commons.collections4.sequence" ], [ "SequencesComparator", "org.apache.commons.collections4.sequence" ], [ "ReplacementsFinder", "org.apache.commons.collections4.sequence" ], [ "KeepCommand", "org.apache.commons.collections4.sequence" ], [ "EditCommand", "org.apache.commons.collections4.sequence" ], [ "CommandVisitor", "org.apache.commons.collections4.sequence" ], [ "EditScript", "org.apache.commons.collections4.sequence" ], [ "QueueUtils", "org.apache.commons.collections4" ], [ "SetValuedMap", "org.apache.commons.collections4" ], [ "SynchronizedBag", "org.apache.commons.collections4.bag" ], [ "AbstractMapBag", "org.apache.commons.collections4.bag" ], [ "CollectionBag", "org.apache.commons.collections4.bag" ], [ "UnmodifiableBag", "org.apache.commons.collections4.bag" ], [ "PredicatedSortedBag", "org.apache.commons.collections4.bag" ], [ "UnmodifiableSortedBag", "org.apache.commons.collections4.bag" ], [ "HashBag", "org.apache.commons.collections4.bag" ], [ "AbstractBagDecorator", "org.apache.commons.collections4.bag" ], [ "TransformedSortedBag", "org.apache.commons.collections4.bag" ], [ "TreeBag", "org.apache.commons.collections4.bag" ], [ "PredicatedBag", "org.apache.commons.collections4.bag" ], [ "SynchronizedSortedBag", "org.apache.commons.collections4.bag" ], [ "CollectionSortedBag", "org.apache.commons.collections4.bag" ], [ "TransformedBag", "org.apache.commons.collections4.bag" ], [ "AbstractSortedBagDecorator", "org.apache.commons.collections4.bag" ], [ "HashMultiSet", "org.apache.commons.collections4.multiset" ], [ "AbstractMultiSet", "org.apache.commons.collections4.multiset" ], [ "PredicatedMultiSet", "org.apache.commons.collections4.multiset" ], [ "AbstractMultiSetDecorator", "org.apache.commons.collections4.multiset" ], [ "AbstractMapMultiSet", "org.apache.commons.collections4.multiset" ], [ "UnmodifiableMultiSet", "org.apache.commons.collections4.multiset" ], [ "SynchronizedMultiSet", "org.apache.commons.collections4.multiset" ], [ "BagUtils", "org.apache.commons.collections4" ], [ "Unmodifiable", "org.apache.commons.collections4" ], [ "Get", "org.apache.commons.collections4" ], [ "Trie", "org.apache.commons.collections4" ], [ "MultiMap", "org.apache.commons.collections4" ], [ "KeyValue", "org.apache.commons.collections4" ], [ "IteratorChain", "org.apache.commons.collections4.iterators" ], [ "EmptyListIterator", "org.apache.commons.collections4.iterators" ], [ "UnmodifiableOrderedMapIterator", "org.apache.commons.collections4.iterators" ], [ "AbstractListIteratorDecorator", "org.apache.commons.collections4.iterators" ], [ "ZippingIterator", "org.apache.commons.collections4.iterators" ], [ "UnmodifiableIterator", "org.apache.commons.collections4.iterators" ], [ "CollatingIterator", "org.apache.commons.collections4.iterators" ], [ "UniqueFilterIterator", "org.apache.commons.collections4.iterators" ], [ "ReverseListIterator", "org.apache.commons.collections4.iterators" ], [ "BoundedIterator", "org.apache.commons.collections4.iterators" ], [ "AbstractIteratorDecorator", "org.apache.commons.collections4.iterators" ], [ "TransformIterator", "org.apache.commons.collections4.iterators" ], [ "AbstractEmptyIterator", "org.apache.commons.collections4.iterators" ], [ "NodeListIterator", "org.apache.commons.collections4.iterators" ], [ "ArrayListIterator", "org.apache.commons.collections4.iterators" ], [ "LazyIteratorChain", "org.apache.commons.collections4.iterators" ], [ "LoopingListIterator", "org.apache.commons.collections4.iterators" ], [ "PeekingIterator", "org.apache.commons.collections4.iterators" ], [ "ObjectGraphIterator", "org.apache.commons.collections4.iterators" ], [ "ArrayIterator", "org.apache.commons.collections4.iterators" ], [ "PermutationIterator", "org.apache.commons.collections4.iterators" ], [ "SingletonListIterator", "org.apache.commons.collections4.iterators" ], [ "EmptyMapIterator", "org.apache.commons.collections4.iterators" ], [ "ObjectArrayIterator", "org.apache.commons.collections4.iterators" ], [ "EnumerationIterator", "org.apache.commons.collections4.iterators" ], [ "IteratorIterable", "org.apache.commons.collections4.iterators" ], [ "AbstractEmptyMapIterator", "org.apache.commons.collections4.iterators" ], [ "LoopingIterator", "org.apache.commons.collections4.iterators" ], [ "IteratorEnumeration", "org.apache.commons.collections4.iterators" ], [ "SingletonIterator", "org.apache.commons.collections4.iterators" ], [ "ListIteratorWrapper", "org.apache.commons.collections4.iterators" ], [ "SkippingIterator", "org.apache.commons.collections4.iterators" ], [ "EmptyOrderedIterator", "org.apache.commons.collections4.iterators" ], [ "AbstractMapIteratorDecorator", "org.apache.commons.collections4.iterators" ], [ "ObjectArrayListIterator", "org.apache.commons.collections4.iterators" ], [ "UnmodifiableListIterator", "org.apache.commons.collections4.iterators" ], [ "EmptyOrderedMapIterator", "org.apache.commons.collections4.iterators" ], [ "UnmodifiableMapIterator", "org.apache.commons.collections4.iterators" ], [ "EmptyIterator", "org.apache.commons.collections4.iterators" ], [ "EntrySetMapIterator", "org.apache.commons.collections4.iterators" ], [ "PushbackIterator", "org.apache.commons.collections4.iterators" ], [ "FilterIterator", "org.apache.commons.collections4.iterators" ], [ "AbstractUntypedIteratorDecorator", "org.apache.commons.collections4.iterators" ], [ "AbstractOrderedMapIteratorDecorator", "org.apache.commons.collections4.iterators" ], [ "FilterListIterator", "org.apache.commons.collections4.iterators" ], [ "SplitMapUtils", "org.apache.commons.collections4" ], [ "BoundedMap", "org.apache.commons.collections4" ] ],
  "tokensProjectClassesNonPrivateStaticNonVoidMethods" : [ [ "emptyIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> emptyIterator()" ], [ "emptyListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> emptyListIterator()" ], [ "emptyOrderedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> OrderedIterator<E> emptyOrderedIterator()" ], [ "emptyMapIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <K, V> MapIterator<K, V> emptyMapIterator()" ], [ "emptyOrderedMapIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <K, V> OrderedMapIterator<K, V> emptyOrderedMapIterator()" ], [ "singletonIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> singletonIterator(final E object)" ], [ "singletonListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ListIterator<E> singletonListIterator(final E object)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final E... array)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final Object array)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final E[] array, final int start)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final Object array, final int start)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final E[] array, final int start, final int end)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final Object array, final int start, final int end)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final E... array)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final Object array)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final E[] array, final int start)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final Object array, final int start)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final E[] array, final int start, final int end)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final Object array, final int start, final int end)" ], [ "boundedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> BoundedIterator<E> boundedIterator(final Iterator<? extends E> iterator, long max)" ], [ "boundedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> BoundedIterator<E> boundedIterator(final Iterator<? extends E> iterator, long offset, long max)" ], [ "unmodifiableIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> unmodifiableIterator(final Iterator<E> iterator)" ], [ "unmodifiableListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ListIterator<E> unmodifiableListIterator(final ListIterator<E> listIterator)" ], [ "unmodifiableMapIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <K, V> MapIterator<K, V> unmodifiableMapIterator(final MapIterator<K, V> mapIterator)" ], [ "chainedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> chainedIterator(final Iterator<? extends E> iterator1, final Iterator<? extends E> iterator2)" ], [ "chainedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> chainedIterator(final Iterator<? extends E>... iterators)" ], [ "chainedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> chainedIterator(final Collection<Iterator<? extends E>> iterators)" ], [ "collatedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> collatedIterator(final Comparator<? super E> comparator, final Iterator<? extends E> iterator1, final Iterator<? extends E> iterator2)" ], [ "collatedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> collatedIterator(final Comparator<? super E> comparator, final Iterator<? extends E>... iterators)" ], [ "collatedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> collatedIterator(final Comparator<? super E> comparator, final Collection<Iterator<? extends E>> iterators)" ], [ "objectGraphIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> objectGraphIterator(final E root, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <I, O> Iterator<O> transformedIterator(final Iterator<? extends I> iterator, final Transformer<? super I, ? extends O> transform)" ], [ "filteredIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> filteredIterator(final Iterator<? extends E> iterator, final Predicate<? super E> predicate)" ], [ "filteredListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ListIterator<E> filteredListIterator(final ListIterator<? extends E> listIterator, final Predicate<? super E> predicate)" ], [ "loopingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> loopingIterator(final Collection<? extends E> coll)" ], [ "loopingListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> loopingListIterator(final List<E> list)" ], [ "nodeListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static NodeListIterator nodeListIterator(final NodeList nodeList)" ], [ "nodeListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static NodeListIterator nodeListIterator(final Node node)" ], [ "peekingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> peekingIterator(final Iterator<? extends E> iterator)" ], [ "pushbackIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> pushbackIterator(final Iterator<? extends E> iterator)" ], [ "skippingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> SkippingIterator<E> skippingIterator(final Iterator<E> iterator, long offset)" ], [ "zippingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ZippingIterator<E> zippingIterator(final Iterator<? extends E> a, final Iterator<? extends E> b)" ], [ "zippingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ZippingIterator<E> zippingIterator(final Iterator<? extends E> a, final Iterator<? extends E> b, final Iterator<? extends E> c)" ], [ "zippingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ZippingIterator<E> zippingIterator(final Iterator<? extends E>... iterators)" ], [ "asIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> asIterator(final Enumeration<? extends E> enumeration)" ], [ "asIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> asIterator(final Enumeration<? extends E> enumeration, final Collection<? super E> removeCollection)" ], [ "asEnumeration", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Enumeration<E> asEnumeration(final Iterator<? extends E> iterator)" ], [ "asIterable", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterable<E> asIterable(final Iterator<? extends E> iterator)" ], [ "asMultipleUseIterable", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterable<E> asMultipleUseIterable(final Iterator<? extends E> iterator)" ], [ "toListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ListIterator<E> toListIterator(final Iterator<? extends E> iterator)" ], [ "toArray", "org.apache.commons.collections4", "IteratorUtils", "public static Object[] toArray(final Iterator<?> iterator)" ], [ "toArray", "org.apache.commons.collections4", "IteratorUtils", "public static <E> E[] toArray(final Iterator<? extends E> iterator, final Class<E> arrayClass)" ], [ "toList", "org.apache.commons.collections4", "IteratorUtils", "public static <E> List<E> toList(final Iterator<? extends E> iterator)" ], [ "toList", "org.apache.commons.collections4", "IteratorUtils", "public static <E> List<E> toList(final Iterator<? extends E> iterator, final int estimatedSize)" ], [ "getIterator", "org.apache.commons.collections4", "IteratorUtils", "public static Iterator<?> getIterator(final Object obj)" ], [ "forEachButLast", "org.apache.commons.collections4", "IteratorUtils", "public static <E> E forEachButLast(final Iterator<E> iterator, final Closure<? super E> closure)" ], [ "find", "org.apache.commons.collections4", "IteratorUtils", "public static <E> E find(final Iterator<E> iterator, final Predicate<? super E> predicate)" ], [ "indexOf", "org.apache.commons.collections4", "IteratorUtils", "public static <E> int indexOf(final Iterator<E> iterator, final Predicate<? super E> predicate)" ], [ "matchesAny", "org.apache.commons.collections4", "IteratorUtils", "public static <E> boolean matchesAny(final Iterator<E> iterator, final Predicate<? super E> predicate)" ], [ "matchesAll", "org.apache.commons.collections4", "IteratorUtils", "public static <E> boolean matchesAll(final Iterator<E> iterator, final Predicate<? super E> predicate)" ], [ "isEmpty", "org.apache.commons.collections4", "IteratorUtils", "public static boolean isEmpty(final Iterator<?> iterator)" ], [ "contains", "org.apache.commons.collections4", "IteratorUtils", "public static <E> boolean contains(final Iterator<E> iterator, final Object object)" ], [ "get", "org.apache.commons.collections4", "IteratorUtils", "public static <E> E get(final Iterator<E> iterator, final int index)" ], [ "size", "org.apache.commons.collections4", "IteratorUtils", "public static int size(final Iterator<?> iterator)" ], [ "toString", "org.apache.commons.collections4", "IteratorUtils", "public static <E> String toString(final Iterator<E> iterator)" ], [ "toString", "org.apache.commons.collections4", "IteratorUtils", "public static <E> String toString(final Iterator<E> iterator, final Transformer<? super E, String> transformer)" ], [ "toString", "org.apache.commons.collections4", "IteratorUtils", "public static <E> String toString(final Iterator<E> iterator, final Transformer<? super E, String> transformer, final String delimiter, final String prefix, final String suffix)" ], [ "naturalComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E extends Comparable<? super E>> Comparator<E> naturalComparator()" ], [ "chainedComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> Comparator<E> chainedComparator(final Comparator<E>... comparators)" ], [ "chainedComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> Comparator<E> chainedComparator(final Collection<Comparator<E>> comparators)" ], [ "reversedComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> Comparator<E> reversedComparator(final Comparator<E> comparator)" ], [ "booleanComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static Comparator<Boolean> booleanComparator(final boolean trueFirst)" ], [ "nullLowComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> Comparator<E> nullLowComparator(Comparator<E> comparator)" ], [ "nullHighComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> Comparator<E> nullHighComparator(Comparator<E> comparator)" ], [ "transformedComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <I, O> Comparator<I> transformedComparator(Comparator<O> comparator, final Transformer<? super I, ? extends O> transformer)" ], [ "min", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> E min(final E o1, final E o2, Comparator<E> comparator)" ], [ "max", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> E max(final E o1, final E o2, Comparator<E> comparator)" ], [ "unmodifiableBidiMap", "org.apache.commons.collections4.bidimap", "UnmodifiableBidiMap", "public static <K, V> BidiMap<K, V> unmodifiableBidiMap(final BidiMap<? extends K, ? extends V> map)" ], [ "unmodifiableOrderedBidiMap", "org.apache.commons.collections4.bidimap", "UnmodifiableOrderedBidiMap", "public static <K, V> OrderedBidiMap<K, V> unmodifiableOrderedBidiMap(final OrderedBidiMap<? extends K, ? extends V> map)" ], [ "unmodifiableSortedBidiMap", "org.apache.commons.collections4.bidimap", "UnmodifiableSortedBidiMap", "public static <K, V> SortedBidiMap<K, V> unmodifiableSortedBidiMap(final SortedBidiMap<K, ? extends V> map)" ], [ "emptyMultiValuedMap", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> MultiValuedMap<K, V> emptyMultiValuedMap()" ], [ "emptyIfNull", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> MultiValuedMap<K, V> emptyIfNull(final MultiValuedMap<K, V> map)" ], [ "isEmpty", "org.apache.commons.collections4", "MultiMapUtils", "public static boolean isEmpty(final MultiValuedMap<?, ?> map)" ], [ "getCollection", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> Collection<V> getCollection(final MultiValuedMap<K, V> map, final K key)" ], [ "getValuesAsList", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> List<V> getValuesAsList(final MultiValuedMap<K, V> map, final K key)" ], [ "getValuesAsSet", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> Set<V> getValuesAsSet(final MultiValuedMap<K, V> map, final K key)" ], [ "getValuesAsBag", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> Bag<V> getValuesAsBag(final MultiValuedMap<K, V> map, final K key)" ], [ "newListValuedHashMap", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> ListValuedMap<K, V> newListValuedHashMap()" ], [ "newSetValuedHashMap", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> SetValuedMap<K, V> newSetValuedHashMap()" ], [ "unmodifiableMultiValuedMap", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> MultiValuedMap<K, V> unmodifiableMultiValuedMap(final MultiValuedMap<? extends K, ? extends V> map)" ], [ "transformedMultiValuedMap", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> MultiValuedMap<K, V> transformedMultiValuedMap(final MultiValuedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "unmodifiableBoundedCollection", "org.apache.commons.collections4.collection", "UnmodifiableBoundedCollection", "public static <E> BoundedCollection<E> unmodifiableBoundedCollection(final BoundedCollection<? extends E> coll)" ], [ "unmodifiableBoundedCollection", "org.apache.commons.collections4.collection", "UnmodifiableBoundedCollection", "public static <E> BoundedCollection<E> unmodifiableBoundedCollection(Collection<? extends E> coll)" ], [ "transformingCollection", "org.apache.commons.collections4.collection", "TransformedCollection", "public static <E> TransformedCollection<E> transformingCollection(final Collection<E> coll, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedCollection", "org.apache.commons.collections4.collection", "TransformedCollection", "public static <E> TransformedCollection<E> transformedCollection(final Collection<E> collection, final Transformer<? super E, ? extends E> transformer)" ], [ "builder", "org.apache.commons.collections4.collection", "PredicatedCollection", "public static <E> Builder<E> builder(final Predicate<? super E> predicate)" ], [ "notNullBuilder", "org.apache.commons.collections4.collection", "PredicatedCollection", "public static <E> Builder<E> notNullBuilder()" ], [ "predicatedCollection", "org.apache.commons.collections4.collection", "PredicatedCollection", "public static <T> PredicatedCollection<T> predicatedCollection(final Collection<T> coll, final Predicate<? super T> predicate)" ], [ "uniqueIndexedCollection", "org.apache.commons.collections4.collection", "IndexedCollection", "public static <K, C> IndexedCollection<K, C> uniqueIndexedCollection(final Collection<C> coll, final Transformer<C, K> keyTransformer)" ], [ "nonUniqueIndexedCollection", "org.apache.commons.collections4.collection", "IndexedCollection", "public static <K, C> IndexedCollection<K, C> nonUniqueIndexedCollection(final Collection<C> coll, final Transformer<C, K> keyTransformer)" ], [ "synchronizedCollection", "org.apache.commons.collections4.collection", "SynchronizedCollection", "public static <T> SynchronizedCollection<T> synchronizedCollection(final Collection<T> coll)" ], [ "unmodifiableCollection", "org.apache.commons.collections4.collection", "UnmodifiableCollection", "public static <T> Collection<T> unmodifiableCollection(final Collection<? extends T> coll)" ], [ "exceptionFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> exceptionFactory()" ], [ "nullFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> nullFactory()" ], [ "constantFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> constantFactory(final T constantToReturn)" ], [ "prototypeFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> prototypeFactory(final T prototype)" ], [ "instantiateFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> instantiateFactory(final Class<T> classToInstantiate)" ], [ "instantiateFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> instantiateFactory(final Class<T> classToInstantiate, final Class<?>[] paramTypes, final Object[] args)" ], [ "emptyIfNull", "org.apache.commons.collections4", "ListUtils", "public static <T> List<T> emptyIfNull(final List<T> list)" ], [ "defaultIfNull", "org.apache.commons.collections4", "ListUtils", "public static <T> List<T> defaultIfNull(final List<T> list, final List<T> defaultList)" ], [ "intersection", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> intersection(final List<? extends E> list1, final List<? extends E> list2)" ], [ "subtract", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> subtract(final List<E> list1, final List<? extends E> list2)" ], [ "sum", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> sum(final List<? extends E> list1, final List<? extends E> list2)" ], [ "union", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> union(final List<? extends E> list1, final List<? extends E> list2)" ], [ "select", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> select(final Collection<? extends E> inputCollection, final Predicate<? super E> predicate)" ], [ "selectRejected", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> selectRejected(final Collection<? extends E> inputCollection, final Predicate<? super E> predicate)" ], [ "isEqualList", "org.apache.commons.collections4", "ListUtils", "public static boolean isEqualList(final Collection<?> list1, final Collection<?> list2)" ], [ "hashCodeForList", "org.apache.commons.collections4", "ListUtils", "public static int hashCodeForList(final Collection<?> list)" ], [ "retainAll", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> retainAll(final Collection<E> collection, final Collection<?> retain)" ], [ "removeAll", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> removeAll(final Collection<E> collection, final Collection<?> remove)" ], [ "synchronizedList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> synchronizedList(final List<E> list)" ], [ "unmodifiableList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> unmodifiableList(final List<? extends E> list)" ], [ "predicatedList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> predicatedList(final List<E> list, final Predicate<E> predicate)" ], [ "transformedList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> transformedList(final List<E> list, final Transformer<? super E, ? extends E> transformer)" ], [ "lazyList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> lazyList(final List<E> list, final Factory<? extends E> factory)" ], [ "fixedSizeList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> fixedSizeList(final List<E> list)" ], [ "indexOf", "org.apache.commons.collections4", "ListUtils", "public static <E> int indexOf(final List<E> list, final Predicate<E> predicate)" ], [ "longestCommonSubsequence", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> longestCommonSubsequence(final List<E> a, final List<E> b)" ], [ "longestCommonSubsequence", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> longestCommonSubsequence(final List<E> a, final List<E> b, final Equator<? super E> equator)" ], [ "longestCommonSubsequence", "org.apache.commons.collections4", "ListUtils", "public static String longestCommonSubsequence(final CharSequence a, final CharSequence b)" ], [ "partition", "org.apache.commons.collections4", "ListUtils", "public static <T> List<List<T>> partition(final List<T> list, final int size)" ], [ "getObject", "org.apache.commons.collections4", "MapUtils", "public static <K, V> V getObject(final Map<? super K, V> map, final K key)" ], [ "getString", "org.apache.commons.collections4", "MapUtils", "public static <K> String getString(final Map<? super K, ?> map, final K key)" ], [ "getBoolean", "org.apache.commons.collections4", "MapUtils", "public static <K> Boolean getBoolean(final Map<? super K, ?> map, final K key)" ], [ "getNumber", "org.apache.commons.collections4", "MapUtils", "public static <K> Number getNumber(final Map<? super K, ?> map, final K key)" ], [ "getByte", "org.apache.commons.collections4", "MapUtils", "public static <K> Byte getByte(final Map<? super K, ?> map, final K key)" ], [ "getShort", "org.apache.commons.collections4", "MapUtils", "public static <K> Short getShort(final Map<? super K, ?> map, final K key)" ], [ "getInteger", "org.apache.commons.collections4", "MapUtils", "public static <K> Integer getInteger(final Map<? super K, ?> map, final K key)" ], [ "getLong", "org.apache.commons.collections4", "MapUtils", "public static <K> Long getLong(final Map<? super K, ?> map, final K key)" ], [ "getFloat", "org.apache.commons.collections4", "MapUtils", "public static <K> Float getFloat(final Map<? super K, ?> map, final K key)" ], [ "getDouble", "org.apache.commons.collections4", "MapUtils", "public static <K> Double getDouble(final Map<? super K, ?> map, final K key)" ], [ "getMap", "org.apache.commons.collections4", "MapUtils", "public static <K> Map<?, ?> getMap(final Map<? super K, ?> map, final K key)" ], [ "getObject", "org.apache.commons.collections4", "MapUtils", "public static <K, V> V getObject(final Map<K, V> map, final K key, final V defaultValue)" ], [ "getString", "org.apache.commons.collections4", "MapUtils", "public static <K> String getString(final Map<? super K, ?> map, final K key, final String defaultValue)" ], [ "getBoolean", "org.apache.commons.collections4", "MapUtils", "public static <K> Boolean getBoolean(final Map<? super K, ?> map, final K key, final Boolean defaultValue)" ], [ "getNumber", "org.apache.commons.collections4", "MapUtils", "public static <K> Number getNumber(final Map<? super K, ?> map, final K key, final Number defaultValue)" ], [ "getByte", "org.apache.commons.collections4", "MapUtils", "public static <K> Byte getByte(final Map<? super K, ?> map, final K key, final Byte defaultValue)" ], [ "getShort", "org.apache.commons.collections4", "MapUtils", "public static <K> Short getShort(final Map<? super K, ?> map, final K key, final Short defaultValue)" ], [ "getInteger", "org.apache.commons.collections4", "MapUtils", "public static <K> Integer getInteger(final Map<? super K, ?> map, final K key, final Integer defaultValue)" ], [ "getLong", "org.apache.commons.collections4", "MapUtils", "public static <K> Long getLong(final Map<? super K, ?> map, final K key, final Long defaultValue)" ], [ "getFloat", "org.apache.commons.collections4", "MapUtils", "public static <K> Float getFloat(final Map<? super K, ?> map, final K key, final Float defaultValue)" ], [ "getDouble", "org.apache.commons.collections4", "MapUtils", "public static <K> Double getDouble(final Map<? super K, ?> map, final K key, final Double defaultValue)" ], [ "getMap", "org.apache.commons.collections4", "MapUtils", "public static <K> Map<?, ?> getMap(final Map<? super K, ?> map, final K key, final Map<?, ?> defaultValue)" ], [ "getBooleanValue", "org.apache.commons.collections4", "MapUtils", "public static <K> boolean getBooleanValue(final Map<? super K, ?> map, final K key)" ], [ "getByteValue", "org.apache.commons.collections4", "MapUtils", "public static <K> byte getByteValue(final Map<? super K, ?> map, final K key)" ], [ "getShortValue", "org.apache.commons.collections4", "MapUtils", "public static <K> short getShortValue(final Map<? super K, ?> map, final K key)" ], [ "getIntValue", "org.apache.commons.collections4", "MapUtils", "public static <K> int getIntValue(final Map<? super K, ?> map, final K key)" ], [ "getLongValue", "org.apache.commons.collections4", "MapUtils", "public static <K> long getLongValue(final Map<? super K, ?> map, final K key)" ], [ "getFloatValue", "org.apache.commons.collections4", "MapUtils", "public static <K> float getFloatValue(final Map<? super K, ?> map, final K key)" ], [ "getDoubleValue", "org.apache.commons.collections4", "MapUtils", "public static <K> double getDoubleValue(final Map<? super K, ?> map, final K key)" ], [ "getBooleanValue", "org.apache.commons.collections4", "MapUtils", "public static <K> boolean getBooleanValue(final Map<? super K, ?> map, final K key, final boolean defaultValue)" ], [ "getByteValue", "org.apache.commons.collections4", "MapUtils", "public static <K> byte getByteValue(final Map<? super K, ?> map, final K key, final byte defaultValue)" ], [ "getShortValue", "org.apache.commons.collections4", "MapUtils", "public static <K> short getShortValue(final Map<? super K, ?> map, final K key, final short defaultValue)" ], [ "getIntValue", "org.apache.commons.collections4", "MapUtils", "public static <K> int getIntValue(final Map<? super K, ?> map, final K key, final int defaultValue)" ], [ "getLongValue", "org.apache.commons.collections4", "MapUtils", "public static <K> long getLongValue(final Map<? super K, ?> map, final K key, final long defaultValue)" ], [ "getFloatValue", "org.apache.commons.collections4", "MapUtils", "public static <K> float getFloatValue(final Map<? super K, ?> map, final K key, final float defaultValue)" ], [ "getDoubleValue", "org.apache.commons.collections4", "MapUtils", "public static <K> double getDoubleValue(final Map<? super K, ?> map, final K key, final double defaultValue)" ], [ "toProperties", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Properties toProperties(final Map<K, V> map)" ], [ "toMap", "org.apache.commons.collections4", "MapUtils", "public static Map<String, Object> toMap(final ResourceBundle resourceBundle)" ], [ "invertMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Map<V, K> invertMap(final Map<K, V> map)" ], [ "putAll", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Map<K, V> putAll(final Map<K, V> map, final Object[] array)" ], [ "emptyIfNull", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Map<K, V> emptyIfNull(final Map<K, V> map)" ], [ "isEmpty", "org.apache.commons.collections4", "MapUtils", "public static boolean isEmpty(final Map<?, ?> map)" ], [ "isNotEmpty", "org.apache.commons.collections4", "MapUtils", "public static boolean isNotEmpty(final Map<?, ?> map)" ], [ "synchronizedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Map<K, V> synchronizedMap(final Map<K, V> map)" ], [ "unmodifiableMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Map<K, V> unmodifiableMap(final Map<? extends K, ? extends V> map)" ], [ "predicatedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> predicatedMap(final Map<K, V> map, final Predicate<? super K> keyPred, final Predicate<? super V> valuePred)" ], [ "transformedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> transformedMap(final Map<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "fixedSizeMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> fixedSizeMap(final Map<K, V> map)" ], [ "lazyMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> lazyMap(final Map<K, V> map, final Factory<? extends V> factory)" ], [ "lazyMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> lazyMap(final Map<K, V> map, final Transformer<? super K, ? extends V> transformerFactory)" ], [ "orderedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> OrderedMap<K, V> orderedMap(final Map<K, V> map)" ], [ "multiValueMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> MultiValueMap<K, V> multiValueMap(final Map<K, ? super Collection<V>> map)" ], [ "multiValueMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V, C extends Collection<V>> MultiValueMap<K, V> multiValueMap(final Map<K, C> map, final Class<C> collectionClass)" ], [ "multiValueMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V, C extends Collection<V>> MultiValueMap<K, V> multiValueMap(final Map<K, C> map, final Factory<C> collectionFactory)" ], [ "synchronizedSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> synchronizedSortedMap(final SortedMap<K, V> map)" ], [ "unmodifiableSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> unmodifiableSortedMap(final SortedMap<K, ? extends V> map)" ], [ "predicatedSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> predicatedSortedMap(final SortedMap<K, V> map, final Predicate<? super K> keyPred, final Predicate<? super V> valuePred)" ], [ "transformedSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> transformedSortedMap(final SortedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "fixedSizeSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> fixedSizeSortedMap(final SortedMap<K, V> map)" ], [ "lazySortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> lazySortedMap(final SortedMap<K, V> map, final Factory<? extends V> factory)" ], [ "lazySortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> lazySortedMap(final SortedMap<K, V> map, final Transformer<? super K, ? extends V> transformerFactory)" ], [ "iterableMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> iterableMap(final Map<K, V> map)" ], [ "iterableSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableSortedMap<K, V> iterableSortedMap(final SortedMap<K, V> sortedMap)" ], [ "defaultEquator", "org.apache.commons.collections4.functors", "DefaultEquator", "public static <T> DefaultEquator<T> defaultEquator()" ], [ "stringValueTransformer", "org.apache.commons.collections4.functors", "StringValueTransformer", "public static <T> Transformer<T, String> stringValueTransformer()" ], [ "ifTransformer", "org.apache.commons.collections4.functors", "IfTransformer", "public static <I, O> Transformer<I, O> ifTransformer(final Predicate<? super I> predicate, final Transformer<? super I, ? extends O> trueTransformer, final Transformer<? super I, ? extends O> falseTransformer)" ], [ "ifTransformer", "org.apache.commons.collections4.functors", "IfTransformer", "public static <T> Transformer<T, T> ifTransformer(final Predicate<? super T> predicate, final Transformer<? super T, ? extends T> trueTransformer)" ], [ "identityPredicate", "org.apache.commons.collections4.functors", "IdentityPredicate", "public static <T> Predicate<T> identityPredicate(final T object)" ], [ "exceptionClosure", "org.apache.commons.collections4.functors", "ExceptionClosure", "public static <E> Closure<E> exceptionClosure()" ], [ "nopClosure", "org.apache.commons.collections4.functors", "NOPClosure", "public static <E> Closure<E> nopClosure()" ], [ "closureTransformer", "org.apache.commons.collections4.functors", "ClosureTransformer", "public static <T> Transformer<T, T> closureTransformer(final Closure<? super T> closure)" ], [ "copy", "org.apache.commons.collections4.functors", "FunctorUtils", "static <T> Predicate<T>[] copy(final Predicate<? super T>... predicates)" ], [ "coerce", "org.apache.commons.collections4.functors", "FunctorUtils", "static <T> Predicate<T> coerce(final Predicate<? super T> predicate)" ], [ "validate", "org.apache.commons.collections4.functors", "FunctorUtils", "static <T> Predicate<? super T>[] validate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "copy", "org.apache.commons.collections4.functors", "FunctorUtils", "static <E> Closure<E>[] copy(final Closure<? super E>... closures)" ], [ "coerce", "org.apache.commons.collections4.functors", "FunctorUtils", "static <T> Closure<T> coerce(final Closure<? super T> closure)" ], [ "copy", "org.apache.commons.collections4.functors", "FunctorUtils", "static <I, O> Transformer<I, O>[] copy(final Transformer<? super I, ? extends O>... transformers)" ], [ "coerce", "org.apache.commons.collections4.functors", "FunctorUtils", "static <I, O> Transformer<I, O> coerce(final Transformer<? super I, ? extends O> transformer)" ], [ "transformerPredicate", "org.apache.commons.collections4.functors", "TransformerPredicate", "public static <T> Predicate<T> transformerPredicate(final Transformer<? super T, Boolean> transformer)" ], [ "nullPredicate", "org.apache.commons.collections4.functors", "NullPredicate", "public static <T> Predicate<T> nullPredicate()" ], [ "nullTransformer", "org.apache.commons.collections4.functors", "ConstantTransformer", "public static <I, O> Transformer<I, O> nullTransformer()" ], [ "constantTransformer", "org.apache.commons.collections4.functors", "ConstantTransformer", "public static <I, O> Transformer<I, O> constantTransformer(final O constantToReturn)" ], [ "predicateTransformer", "org.apache.commons.collections4.functors", "PredicateTransformer", "public static <T> Transformer<T, Boolean> predicateTransformer(final Predicate<? super T> predicate)" ], [ "whileClosure", "org.apache.commons.collections4.functors", "WhileClosure", "public static <E> Closure<E> whileClosure(final Predicate<? super E> predicate, final Closure<? super E> closure, final boolean doLoop)" ], [ "forClosure", "org.apache.commons.collections4.functors", "ForClosure", "public static <E> Closure<E> forClosure(final int count, final Closure<? super E> closure)" ], [ "nullIsTruePredicate", "org.apache.commons.collections4.functors", "NullIsTruePredicate", "public static <T> Predicate<T> nullIsTruePredicate(final Predicate<? super T> predicate)" ], [ "transformedPredicate", "org.apache.commons.collections4.functors", "TransformedPredicate", "public static <T> Predicate<T> transformedPredicate(final Transformer<? super T, ? extends T> transformer, final Predicate<? super T> predicate)" ], [ "nonePredicate", "org.apache.commons.collections4.functors", "NonePredicate", "public static <T> Predicate<T> nonePredicate(final Predicate<? super T>... predicates)" ], [ "nonePredicate", "org.apache.commons.collections4.functors", "NonePredicate", "public static <T> Predicate<T> nonePredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "exceptionTransformer", "org.apache.commons.collections4.functors", "ExceptionTransformer", "public static <I, O> Transformer<I, O> exceptionTransformer()" ], [ "switchTransformer", "org.apache.commons.collections4.functors", "SwitchTransformer", "public static <I, O> Transformer<I, O> switchTransformer(final Predicate<? super I>[] predicates, final Transformer<? super I, ? extends O>[] transformers, final Transformer<? super I, ? extends O> defaultTransformer)" ], [ "switchTransformer", "org.apache.commons.collections4.functors", "SwitchTransformer", "public static <I, O> Transformer<I, O> switchTransformer(final Map<? extends Predicate<? super I>, ? extends Transformer<? super I, ? extends O>> map)" ], [ "transformerClosure", "org.apache.commons.collections4.functors", "TransformerClosure", "public static <E> Closure<E> transformerClosure(final Transformer<? super E, ?> transformer)" ], [ "orPredicate", "org.apache.commons.collections4.functors", "OrPredicate", "public static <T> Predicate<T> orPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "nopTransformer", "org.apache.commons.collections4.functors", "NOPTransformer", "public static <T> Transformer<T, T> nopTransformer()" ], [ "mapTransformer", "org.apache.commons.collections4.functors", "MapTransformer", "public static <I, O> Transformer<I, O> mapTransformer(final Map<? super I, ? extends O> map)" ], [ "exceptionFactory", "org.apache.commons.collections4.functors", "ExceptionFactory", "public static <T> Factory<T> exceptionFactory()" ], [ "chainedClosure", "org.apache.commons.collections4.functors", "ChainedClosure", "public static <E> Closure<E> chainedClosure(final Closure<? super E>... closures)" ], [ "chainedClosure", "org.apache.commons.collections4.functors", "ChainedClosure", "public static <E> Closure<E> chainedClosure(final Collection<? extends Closure<? super E>> closures)" ], [ "andPredicate", "org.apache.commons.collections4.functors", "AndPredicate", "public static <T> Predicate<T> andPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "prototypeFactory", "org.apache.commons.collections4.functors", "PrototypeFactory", "public static <T> Factory<T> prototypeFactory(final T prototype)" ], [ "exceptionPredicate", "org.apache.commons.collections4.functors", "ExceptionPredicate", "public static <T> Predicate<T> exceptionPredicate()" ], [ "instanceOfPredicate", "org.apache.commons.collections4.functors", "InstanceofPredicate", "public static Predicate<Object> instanceOfPredicate(final Class<?> type)" ], [ "invokerTransformer", "org.apache.commons.collections4.functors", "InvokerTransformer", "public static <I, O> Transformer<I, O> invokerTransformer(final String methodName)" ], [ "invokerTransformer", "org.apache.commons.collections4.functors", "InvokerTransformer", "public static <I, O> Transformer<I, O> invokerTransformer(final String methodName, final Class<?>[] paramTypes, final Object[] args)" ], [ "falsePredicate", "org.apache.commons.collections4.functors", "FalsePredicate", "public static <T> Predicate<T> falsePredicate()" ], [ "cloneTransformer", "org.apache.commons.collections4.functors", "CloneTransformer", "public static <T> Transformer<T, T> cloneTransformer()" ], [ "notPredicate", "org.apache.commons.collections4.functors", "NotPredicate", "public static <T> Predicate<T> notPredicate(final Predicate<? super T> predicate)" ], [ "constantFactory", "org.apache.commons.collections4.functors", "ConstantFactory", "public static <T> Factory<T> constantFactory(final T constantToReturn)" ], [ "chainedTransformer", "org.apache.commons.collections4.functors", "ChainedTransformer", "public static <T> Transformer<T, T> chainedTransformer(final Transformer<? super T, ? extends T>... transformers)" ], [ "chainedTransformer", "org.apache.commons.collections4.functors", "ChainedTransformer", "public static <T> Transformer<T, T> chainedTransformer(final Collection<? extends Transformer<? super T, ? extends T>> transformers)" ], [ "comparatorPredicate", "org.apache.commons.collections4.functors", "ComparatorPredicate", "public static <T> Predicate<T> comparatorPredicate(final T object, final Comparator<T> comparator)" ], [ "comparatorPredicate", "org.apache.commons.collections4.functors", "ComparatorPredicate", "public static <T> Predicate<T> comparatorPredicate(final T object, final Comparator<T> comparator, final Criterion criterion)" ], [ "allPredicate", "org.apache.commons.collections4.functors", "AllPredicate", "public static <T> Predicate<T> allPredicate(final Predicate<? super T>... predicates)" ], [ "allPredicate", "org.apache.commons.collections4.functors", "AllPredicate", "public static <T> Predicate<T> allPredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "nullIsFalsePredicate", "org.apache.commons.collections4.functors", "NullIsFalsePredicate", "public static <T> Predicate<T> nullIsFalsePredicate(final Predicate<? super T> predicate)" ], [ "nullIsExceptionPredicate", "org.apache.commons.collections4.functors", "NullIsExceptionPredicate", "public static <T> Predicate<T> nullIsExceptionPredicate(final Predicate<? super T> predicate)" ], [ "anyPredicate", "org.apache.commons.collections4.functors", "AnyPredicate", "public static <T> Predicate<T> anyPredicate(final Predicate<? super T>... predicates)" ], [ "anyPredicate", "org.apache.commons.collections4.functors", "AnyPredicate", "public static <T> Predicate<T> anyPredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "truePredicate", "org.apache.commons.collections4.functors", "TruePredicate", "public static <T> Predicate<T> truePredicate()" ], [ "factoryTransformer", "org.apache.commons.collections4.functors", "FactoryTransformer", "public static <I, O> Transformer<I, O> factoryTransformer(final Factory<? extends O> factory)" ], [ "notNullPredicate", "org.apache.commons.collections4.functors", "NotNullPredicate", "public static <T> Predicate<T> notNullPredicate()" ], [ "switchClosure", "org.apache.commons.collections4.functors", "SwitchClosure", "public static <E> Closure<E> switchClosure(final Predicate<? super E>[] predicates, final Closure<? super E>[] closures, final Closure<? super E> defaultClosure)" ], [ "switchClosure", "org.apache.commons.collections4.functors", "SwitchClosure", "public static <E> Closure<E> switchClosure(final Map<Predicate<E>, Closure<E>> predicatesAndClosures)" ], [ "uniquePredicate", "org.apache.commons.collections4.functors", "UniquePredicate", "public static <T> Predicate<T> uniquePredicate()" ], [ "instantiateTransformer", "org.apache.commons.collections4.functors", "InstantiateTransformer", "public static <T> Transformer<Class<? extends T>, T> instantiateTransformer()" ], [ "instantiateTransformer", "org.apache.commons.collections4.functors", "InstantiateTransformer", "public static <T> Transformer<Class<? extends T>, T> instantiateTransformer(final Class<?>[] paramTypes, final Object[] args)" ], [ "onePredicate", "org.apache.commons.collections4.functors", "OnePredicate", "public static <T> Predicate<T> onePredicate(final Predicate<? super T>... predicates)" ], [ "onePredicate", "org.apache.commons.collections4.functors", "OnePredicate", "public static <T> Predicate<T> onePredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "equalPredicate", "org.apache.commons.collections4.functors", "EqualPredicate", "public static <T> Predicate<T> equalPredicate(final T object)" ], [ "equalPredicate", "org.apache.commons.collections4.functors", "EqualPredicate", "public static <T> Predicate<T> equalPredicate(final T object, final Equator<T> equator)" ], [ "instantiateFactory", "org.apache.commons.collections4.functors", "InstantiateFactory", "public static <T> Factory<T> instantiateFactory(final Class<T> classToInstantiate, final Class<?>[] paramTypes, final Object[] args)" ], [ "ifClosure", "org.apache.commons.collections4.functors", "IfClosure", "public static <E> Closure<E> ifClosure(final Predicate<? super E> predicate, final Closure<? super E> trueClosure)" ], [ "ifClosure", "org.apache.commons.collections4.functors", "IfClosure", "public static <E> Closure<E> ifClosure(final Predicate<? super E> predicate, final Closure<? super E> trueClosure, final Closure<? super E> falseClosure)" ], [ "getTrueFirstComparator", "org.apache.commons.collections4.comparators", "BooleanComparator", "public static BooleanComparator getTrueFirstComparator()" ], [ "getFalseFirstComparator", "org.apache.commons.collections4.comparators", "BooleanComparator", "public static BooleanComparator getFalseFirstComparator()" ], [ "booleanComparator", "org.apache.commons.collections4.comparators", "BooleanComparator", "public static BooleanComparator booleanComparator(final boolean trueFirst)" ], [ "comparableComparator", "org.apache.commons.collections4.comparators", "ComparableComparator", "public static <E extends Comparable<? super E>> ComparableComparator<E> comparableComparator()" ], [ "emptyCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <T> Collection<T> emptyCollection()" ], [ "emptyIfNull", "org.apache.commons.collections4", "CollectionUtils", "public static <T> Collection<T> emptyIfNull(final Collection<T> collection)" ], [ "union", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> union(final Iterable<? extends O> a, final Iterable<? extends O> b)" ], [ "intersection", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> intersection(final Iterable<? extends O> a, final Iterable<? extends O> b)" ], [ "disjunction", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> disjunction(final Iterable<? extends O> a, final Iterable<? extends O> b)" ], [ "subtract", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> subtract(final Iterable<? extends O> a, final Iterable<? extends O> b)" ], [ "subtract", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> subtract(final Iterable<? extends O> a, final Iterable<? extends O> b, final Predicate<O> p)" ], [ "containsAll", "org.apache.commons.collections4", "CollectionUtils", "public static boolean containsAll(final Collection<?> coll1, final Collection<?> coll2)" ], [ "containsAny", "org.apache.commons.collections4", "CollectionUtils", "public static boolean containsAny(final Collection<?> coll1, final Collection<?> coll2)" ], [ "getCardinalityMap", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Map<O, Integer> getCardinalityMap(final Iterable<? extends O> coll)" ], [ "isSubCollection", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isSubCollection(final Collection<?> a, final Collection<?> b)" ], [ "isProperSubCollection", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isProperSubCollection(final Collection<?> a, final Collection<?> b)" ], [ "isEqualCollection", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isEqualCollection(final Collection<?> a, final Collection<?> b)" ], [ "isEqualCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <E> boolean isEqualCollection(final Collection<? extends E> a, final Collection<? extends E> b, final Equator<? super E> equator)" ], [ "cardinality", "org.apache.commons.collections4", "CollectionUtils", "public static <O> int cardinality(final O obj, final Iterable<? super O> coll)" ], [ "find", "org.apache.commons.collections4", "CollectionUtils", "public static <T> T find(final Iterable<T> collection, final Predicate<? super T> predicate)" ], [ "forAllDo", "org.apache.commons.collections4", "CollectionUtils", "public static <T, C extends Closure<? super T>> C forAllDo(final Iterable<T> collection, final C closure)" ], [ "forAllDo", "org.apache.commons.collections4", "CollectionUtils", "public static <T, C extends Closure<? super T>> C forAllDo(final Iterator<T> iterator, final C closure)" ], [ "forAllButLastDo", "org.apache.commons.collections4", "CollectionUtils", "public static <T, C extends Closure<? super T>> T forAllButLastDo(final Iterable<T> collection, final C closure)" ], [ "forAllButLastDo", "org.apache.commons.collections4", "CollectionUtils", "public static <T, C extends Closure<? super T>> T forAllButLastDo(final Iterator<T> iterator, final C closure)" ], [ "filter", "org.apache.commons.collections4", "CollectionUtils", "public static <T> boolean filter(final Iterable<T> collection, final Predicate<? super T> predicate)" ], [ "filterInverse", "org.apache.commons.collections4", "CollectionUtils", "public static <T> boolean filterInverse(final Iterable<T> collection, final Predicate<? super T> predicate)" ], [ "countMatches", "org.apache.commons.collections4", "CollectionUtils", "public static <C> int countMatches(final Iterable<C> input, final Predicate<? super C> predicate)" ], [ "exists", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean exists(final Iterable<C> input, final Predicate<? super C> predicate)" ], [ "matchesAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean matchesAll(final Iterable<C> input, final Predicate<? super C> predicate)" ], [ "select", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> select(final Iterable<? extends O> inputCollection, final Predicate<? super O> predicate)" ], [ "select", "org.apache.commons.collections4", "CollectionUtils", "public static <O, R extends Collection<? super O>> R select(final Iterable<? extends O> inputCollection, final Predicate<? super O> predicate, final R outputCollection)" ], [ "select", "org.apache.commons.collections4", "CollectionUtils", "public static <O, R extends Collection<? super O>> R select(final Iterable<? extends O> inputCollection, final Predicate<? super O> predicate, R outputCollection, R rejectedCollection)" ], [ "selectRejected", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> selectRejected(final Iterable<? extends O> inputCollection, final Predicate<? super O> predicate)" ], [ "selectRejected", "org.apache.commons.collections4", "CollectionUtils", "public static <O, R extends Collection<? super O>> R selectRejected(final Iterable<? extends O> inputCollection, final Predicate<? super O> predicate, final R outputCollection)" ], [ "collect", "org.apache.commons.collections4", "CollectionUtils", "public static <I, O> Collection<O> collect(final Iterable<I> inputCollection, final Transformer<? super I, ? extends O> transformer)" ], [ "collect", "org.apache.commons.collections4", "CollectionUtils", "public static <I, O> Collection<O> collect(final Iterator<I> inputIterator, final Transformer<? super I, ? extends O> transformer)" ], [ "collect", "org.apache.commons.collections4", "CollectionUtils", "public static <I, O, R extends Collection<? super O>> R collect(final Iterable<? extends I> inputCollection, final Transformer<? super I, ? extends O> transformer, final R outputCollection)" ], [ "collect", "org.apache.commons.collections4", "CollectionUtils", "public static <I, O, R extends Collection<? super O>> R collect(final Iterator<? extends I> inputIterator, final Transformer<? super I, ? extends O> transformer, final R outputCollection)" ], [ "addIgnoreNull", "org.apache.commons.collections4", "CollectionUtils", "public static <T> boolean addIgnoreNull(final Collection<T> collection, final T object)" ], [ "addAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean addAll(final Collection<C> collection, final Iterable<? extends C> iterable)" ], [ "addAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean addAll(final Collection<C> collection, final Iterator<? extends C> iterator)" ], [ "addAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean addAll(final Collection<C> collection, final Enumeration<? extends C> enumeration)" ], [ "addAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean addAll(final Collection<C> collection, final C[] elements)" ], [ "get", "org.apache.commons.collections4", "CollectionUtils", "public static <T> T get(final Iterator<T> iterator, final int index)" ], [ "get", "org.apache.commons.collections4", "CollectionUtils", "public static <T> T get(final Iterable<T> iterable, final int index)" ], [ "get", "org.apache.commons.collections4", "CollectionUtils", "public static Object get(final Object object, final int index)" ], [ "get", "org.apache.commons.collections4", "CollectionUtils", "public static <K, V> Map.Entry<K, V> get(final Map<K, V> map, final int index)" ], [ "size", "org.apache.commons.collections4", "CollectionUtils", "public static int size(final Object object)" ], [ "sizeIsEmpty", "org.apache.commons.collections4", "CollectionUtils", "public static boolean sizeIsEmpty(final Object object)" ], [ "isEmpty", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isEmpty(final Collection<?> coll)" ], [ "isNotEmpty", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isNotEmpty(final Collection<?> coll)" ], [ "isFull", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isFull(final Collection<? extends Object> coll)" ], [ "maxSize", "org.apache.commons.collections4", "CollectionUtils", "public static int maxSize(final Collection<? extends Object> coll)" ], [ "collate", "org.apache.commons.collections4", "CollectionUtils", "public static <O extends Comparable<? super O>> List<O> collate(Iterable<? extends O> a, Iterable<? extends O> b)" ], [ "collate", "org.apache.commons.collections4", "CollectionUtils", "public static <O extends Comparable<? super O>> List<O> collate(final Iterable<? extends O> a, final Iterable<? extends O> b, final boolean includeDuplicates)" ], [ "collate", "org.apache.commons.collections4", "CollectionUtils", "public static <O> List<O> collate(final Iterable<? extends O> a, final Iterable<? extends O> b, final Comparator<? super O> c)" ], [ "collate", "org.apache.commons.collections4", "CollectionUtils", "public static <O> List<O> collate(final Iterable<? extends O> a, final Iterable<? extends O> b, final Comparator<? super O> c, final boolean includeDuplicates)" ], [ "permutations", "org.apache.commons.collections4", "CollectionUtils", "public static <E> Collection<List<E>> permutations(final Collection<E> collection)" ], [ "retainAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> Collection<C> retainAll(final Collection<C> collection, final Collection<?> retain)" ], [ "retainAll", "org.apache.commons.collections4", "CollectionUtils", "public static <E> Collection<E> retainAll(final Iterable<E> collection, final Iterable<? extends E> retain, final Equator<? super E> equator)" ], [ "removeAll", "org.apache.commons.collections4", "CollectionUtils", "public static <E> Collection<E> removeAll(final Collection<E> collection, final Collection<?> remove)" ], [ "removeAll", "org.apache.commons.collections4", "CollectionUtils", "public static <E> Collection<E> removeAll(final Iterable<E> collection, final Iterable<? extends E> remove, final Equator<? super E> equator)" ], [ "synchronizedCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <C> Collection<C> synchronizedCollection(final Collection<C> collection)" ], [ "unmodifiableCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <C> Collection<C> unmodifiableCollection(final Collection<? extends C> collection)" ], [ "predicatedCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <C> Collection<C> predicatedCollection(final Collection<C> collection, final Predicate<? super C> predicate)" ], [ "transformingCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <E> Collection<E> transformingCollection(final Collection<E> collection, final Transformer<? super E, ? extends E> transformer)" ], [ "extractSingleton", "org.apache.commons.collections4", "CollectionUtils", "public static <E> E extractSingleton(final Collection<E> collection)" ], [ "transformingMap", "org.apache.commons.collections4.splitmap", "TransformedSplitMap", "public static <J, K, U, V> TransformedSplitMap<J, K, U, V> transformingMap(final Map<K, V> map, final Transformer<? super J, ? extends K> keyTransformer, final Transformer<? super U, ? extends V> valueTransformer)" ], [ "emptyIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> emptyIterable()" ], [ "chainedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> chainedIterable(final Iterable<? extends E> a, final Iterable<? extends E> b)" ], [ "chainedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> chainedIterable(final Iterable<? extends E> a, final Iterable<? extends E> b, final Iterable<? extends E> c)" ], [ "chainedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> chainedIterable(final Iterable<? extends E> a, final Iterable<? extends E> b, final Iterable<? extends E> c, final Iterable<? extends E> d)" ], [ "chainedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> chainedIterable(final Iterable<? extends E>... iterables)" ], [ "collatedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> collatedIterable(final Iterable<? extends E> a, final Iterable<? extends E> b)" ], [ "collatedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> collatedIterable(final Comparator<? super E> comparator, final Iterable<? extends E> a, final Iterable<? extends E> b)" ], [ "filteredIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> filteredIterable(final Iterable<E> iterable, final Predicate<? super E> predicate)" ], [ "boundedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> boundedIterable(final Iterable<E> iterable, final long maxSize)" ], [ "loopingIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> loopingIterable(final Iterable<E> iterable)" ], [ "reversedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> reversedIterable(final Iterable<E> iterable)" ], [ "skippingIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> skippingIterable(final Iterable<E> iterable, final long elementsToSkip)" ], [ "transformedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <I, O> Iterable<O> transformedIterable(final Iterable<I> iterable, final Transformer<? super I, ? extends O> transformer)" ], [ "uniqueIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> uniqueIterable(final Iterable<E> iterable)" ], [ "unmodifiableIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> unmodifiableIterable(final Iterable<E> iterable)" ], [ "zippingIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> zippingIterable(final Iterable<? extends E> a, final Iterable<? extends E> b)" ], [ "zippingIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> zippingIterable(final Iterable<? extends E> first, final Iterable<? extends E>... others)" ], [ "emptyIfNull", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> emptyIfNull(final Iterable<E> iterable)" ], [ "forEachButLast", "org.apache.commons.collections4", "IterableUtils", "public static <E> E forEachButLast(final Iterable<E> iterable, final Closure<? super E> closure)" ], [ "find", "org.apache.commons.collections4", "IterableUtils", "public static <E> E find(final Iterable<E> iterable, final Predicate<? super E> predicate)" ], [ "indexOf", "org.apache.commons.collections4", "IterableUtils", "public static <E> int indexOf(final Iterable<E> iterable, final Predicate<? super E> predicate)" ], [ "matchesAll", "org.apache.commons.collections4", "IterableUtils", "public static <E> boolean matchesAll(final Iterable<E> iterable, final Predicate<? super E> predicate)" ], [ "matchesAny", "org.apache.commons.collections4", "IterableUtils", "public static <E> boolean matchesAny(final Iterable<E> iterable, final Predicate<? super E> predicate)" ], [ "countMatches", "org.apache.commons.collections4", "IterableUtils", "public static <E> long countMatches(final Iterable<E> input, final Predicate<? super E> predicate)" ], [ "isEmpty", "org.apache.commons.collections4", "IterableUtils", "public static boolean isEmpty(final Iterable<?> iterable)" ], [ "contains", "org.apache.commons.collections4", "IterableUtils", "public static <E> boolean contains(final Iterable<E> iterable, final Object object)" ], [ "contains", "org.apache.commons.collections4", "IterableUtils", "public static <E> boolean contains(final Iterable<? extends E> iterable, final E object, final Equator<? super E> equator)" ], [ "frequency", "org.apache.commons.collections4", "IterableUtils", "public static <E, T extends E> int frequency(final Iterable<E> iterable, final T obj)" ], [ "get", "org.apache.commons.collections4", "IterableUtils", "public static <T> T get(final Iterable<T> iterable, final int index)" ], [ "size", "org.apache.commons.collections4", "IterableUtils", "public static int size(final Iterable<?> iterable)" ], [ "partition", "org.apache.commons.collections4", "IterableUtils", "public static <O> List<List<O>> partition(final Iterable<? extends O> iterable, final Predicate<? super O> predicate)" ], [ "partition", "org.apache.commons.collections4", "IterableUtils", "public static <O> List<List<O>> partition(final Iterable<? extends O> iterable, final Predicate<? super O>... predicates)" ], [ "partition", "org.apache.commons.collections4", "IterableUtils", "public static <O, R extends Collection<O>> List<R> partition(final Iterable<? extends O> iterable, final Factory<R> partitionFactory, final Predicate<? super O>... predicates)" ], [ "toList", "org.apache.commons.collections4", "IterableUtils", "public static <E> List<E> toList(final Iterable<E> iterable)" ], [ "toString", "org.apache.commons.collections4", "IterableUtils", "public static <E> String toString(final Iterable<E> iterable)" ], [ "toString", "org.apache.commons.collections4", "IterableUtils", "public static <E> String toString(final Iterable<E> iterable, final Transformer<? super E, String> transformer)" ], [ "toString", "org.apache.commons.collections4", "IterableUtils", "public static <E> String toString(final Iterable<E> iterable, final Transformer<? super E, String> transformer, final String delimiter, final String prefix, final String suffix)" ], [ "unmodifiableTrie", "org.apache.commons.collections4", "TrieUtils", "public static <K, V> Trie<K, V> unmodifiableTrie(final Trie<K, ? extends V> trie)" ], [ "exceptionClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> exceptionClosure()" ], [ "nopClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> nopClosure()" ], [ "asClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> asClosure(final Transformer<? super E, ?> transformer)" ], [ "forClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> forClosure(final int count, final Closure<? super E> closure)" ], [ "whileClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> whileClosure(final Predicate<? super E> predicate, final Closure<? super E> closure)" ], [ "doWhileClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> doWhileClosure(final Closure<? super E> closure, final Predicate<? super E> predicate)" ], [ "invokerClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> invokerClosure(final String methodName)" ], [ "invokerClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> invokerClosure(final String methodName, final Class<?>[] paramTypes, final Object[] args)" ], [ "chainedClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> chainedClosure(final Closure<? super E>... closures)" ], [ "chainedClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> chainedClosure(final Collection<? extends Closure<? super E>> closures)" ], [ "ifClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> ifClosure(final Predicate<? super E> predicate, final Closure<? super E> trueClosure)" ], [ "ifClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> ifClosure(final Predicate<? super E> predicate, final Closure<? super E> trueClosure, final Closure<? super E> falseClosure)" ], [ "switchClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> switchClosure(final Predicate<? super E>[] predicates, final Closure<? super E>[] closures)" ], [ "switchClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> switchClosure(final Predicate<? super E>[] predicates, final Closure<? super E>[] closures, final Closure<? super E> defaultClosure)" ], [ "switchClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> switchClosure(final Map<Predicate<E>, Closure<E>> predicatesAndClosures)" ], [ "switchMapClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> switchMapClosure(final Map<? extends E, Closure<E>> objectsAndClosures)" ], [ "unmodifiableTrie", "org.apache.commons.collections4.trie", "UnmodifiableTrie", "public static <K, V> Trie<K, V> unmodifiableTrie(final Trie<K, ? extends V> trie)" ], [ "isOutOfBoundsIndex", "org.apache.commons.collections4.trie", "KeyAnalyzer", "static boolean isOutOfBoundsIndex(final int bitIndex)" ], [ "isEqualBitKey", "org.apache.commons.collections4.trie", "KeyAnalyzer", "static boolean isEqualBitKey(final int bitIndex)" ], [ "isNullBitKey", "org.apache.commons.collections4.trie", "KeyAnalyzer", "static boolean isNullBitKey(final int bitIndex)" ], [ "isValidBitIndex", "org.apache.commons.collections4.trie", "KeyAnalyzer", "static boolean isValidBitIndex(final int bitIndex)" ], [ "isValidUplink", "org.apache.commons.collections4.trie", "AbstractPatriciaTrie", "static boolean isValidUplink(final TrieEntry<?, ?> next, final TrieEntry<?, ?> from)" ], [ "compare", "org.apache.commons.collections4.trie", "AbstractBitwiseTrie", "static boolean compare(final Object a, final Object b)" ], [ "transformingSortedMap", "org.apache.commons.collections4.map", "TransformedSortedMap", "public static <K, V> TransformedSortedMap<K, V> transformingSortedMap(final SortedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "transformedSortedMap", "org.apache.commons.collections4.map", "TransformedSortedMap", "public static <K, V> TransformedSortedMap<K, V> transformedSortedMap(final SortedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "predicatedMap", "org.apache.commons.collections4.map", "PredicatedMap", "public static <K, V> PredicatedMap<K, V> predicatedMap(final Map<K, V> map, final Predicate<? super K> keyPredicate, final Predicate<? super V> valuePredicate)" ], [ "fixedSizeSortedMap", "org.apache.commons.collections4.map", "FixedSizeSortedMap", "public static <K, V> FixedSizeSortedMap<K, V> fixedSizeSortedMap(final SortedMap<K, V> map)" ], [ "unmodifiableSortedMap", "org.apache.commons.collections4.map", "UnmodifiableSortedMap", "public static <K, V> SortedMap<K, V> unmodifiableSortedMap(final SortedMap<K, ? extends V> map)" ], [ "predicatedSortedMap", "org.apache.commons.collections4.map", "PredicatedSortedMap", "public static <K, V> PredicatedSortedMap<K, V> predicatedSortedMap(final SortedMap<K, V> map, final Predicate<? super K> keyPredicate, final Predicate<? super V> valuePredicate)" ], [ "defaultedMap", "org.apache.commons.collections4.map", "DefaultedMap", "public static <K, V> DefaultedMap<K, V> defaultedMap(final Map<K, V> map, final V defaultValue)" ], [ "defaultedMap", "org.apache.commons.collections4.map", "DefaultedMap", "public static <K, V> DefaultedMap<K, V> defaultedMap(final Map<K, V> map, final Factory<? extends V> factory)" ], [ "defaultedMap", "org.apache.commons.collections4.map", "DefaultedMap", "public static <K, V> Map<K, V> defaultedMap(final Map<K, V> map, final Transformer<? super K, ? extends V> transformer)" ], [ "fixedSizeMap", "org.apache.commons.collections4.map", "FixedSizeMap", "public static <K, V> FixedSizeMap<K, V> fixedSizeMap(final Map<K, V> map)" ], [ "lazySortedMap", "org.apache.commons.collections4.map", "LazySortedMap", "public static <K, V> LazySortedMap<K, V> lazySortedMap(final SortedMap<K, V> map, final Factory<? extends V> factory)" ], [ "lazySortedMap", "org.apache.commons.collections4.map", "LazySortedMap", "public static <K, V> LazySortedMap<K, V> lazySortedMap(final SortedMap<K, V> map, final Transformer<? super K, ? extends V> factory)" ], [ "unmodifiableOrderedMap", "org.apache.commons.collections4.map", "UnmodifiableOrderedMap", "public static <K, V> OrderedMap<K, V> unmodifiableOrderedMap(final OrderedMap<? extends K, ? extends V> map)" ], [ "unmodifiableMap", "org.apache.commons.collections4.map", "UnmodifiableMap", "public static <K, V> Map<K, V> unmodifiableMap(final Map<? extends K, ? extends V> map)" ], [ "listOrderedMap", "org.apache.commons.collections4.map", "ListOrderedMap", "public static <K, V> ListOrderedMap<K, V> listOrderedMap(final Map<K, V> map)" ], [ "unmodifiableEntrySet", "org.apache.commons.collections4.map", "UnmodifiableEntrySet", "public static <K, V> Set<Map.Entry<K, V>> unmodifiableEntrySet(final Set<Map.Entry<K, V>> set)" ], [ "resolve", "org.apache.commons.collections4.map", "AbstractReferenceMap", "public static ReferenceStrength resolve(final int value)" ], [ "resolve", "org.apache.commons.collections4.map", "ReferenceStrength", "public static ReferenceStrength resolve(final int value)" ], [ "multiKeyMap", "org.apache.commons.collections4.map", "MultiKeyMap", "public static <K, V> MultiKeyMap<K, V> multiKeyMap(final AbstractHashedMap<MultiKey<? extends K>, V> map)" ], [ "lazyMap", "org.apache.commons.collections4.map", "LazyMap", "public static <K, V> LazyMap<K, V> lazyMap(final Map<K, V> map, final Factory<? extends V> factory)" ], [ "lazyMap", "org.apache.commons.collections4.map", "LazyMap", "public static <V, K> LazyMap<K, V> lazyMap(final Map<K, V> map, final Transformer<? super K, ? extends V> factory)" ], [ "multiValueMap", "org.apache.commons.collections4.map", "MultiValueMap", "public static <K, V> MultiValueMap<K, V> multiValueMap(final Map<K, ? super Collection<V>> map)" ], [ "multiValueMap", "org.apache.commons.collections4.map", "MultiValueMap", "public static <K, V, C extends Collection<V>> MultiValueMap<K, V> multiValueMap(final Map<K, ? super C> map, final Class<C> collectionClass)" ], [ "multiValueMap", "org.apache.commons.collections4.map", "MultiValueMap", "public static <K, V, C extends Collection<V>> MultiValueMap<K, V> multiValueMap(final Map<K, ? super C> map, final Factory<C> collectionFactory)" ], [ "transformingMap", "org.apache.commons.collections4.map", "TransformedMap", "public static <K, V> TransformedMap<K, V> transformingMap(final Map<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "transformedMap", "org.apache.commons.collections4.map", "TransformedMap", "public static <K, V> TransformedMap<K, V> transformedMap(final Map<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "synchronizedMultiSet", "org.apache.commons.collections4", "MultiSetUtils", "public static <E> MultiSet<E> synchronizedMultiSet(final MultiSet<E> multiset)" ], [ "unmodifiableMultiSet", "org.apache.commons.collections4", "MultiSetUtils", "public static <E> MultiSet<E> unmodifiableMultiSet(final MultiSet<? extends E> multiset)" ], [ "predicatedMultiSet", "org.apache.commons.collections4", "MultiSetUtils", "public static <E> MultiSet<E> predicatedMultiSet(final MultiSet<E> multiset, final Predicate<? super E> predicate)" ], [ "emptyMultiSet", "org.apache.commons.collections4", "MultiSetUtils", "public static <E> MultiSet<E> emptyMultiSet()" ], [ "unmodifiableMultiValuedMap", "org.apache.commons.collections4.multimap", "UnmodifiableMultiValuedMap", "public static <K, V> UnmodifiableMultiValuedMap<K, V> unmodifiableMultiValuedMap(MultiValuedMap<? extends K, ? extends V> map)" ], [ "transformingMap", "org.apache.commons.collections4.multimap", "TransformedMultiValuedMap", "public static <K, V> TransformedMultiValuedMap<K, V> transformingMap(final MultiValuedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "transformedMap", "org.apache.commons.collections4.multimap", "TransformedMultiValuedMap", "public static <K, V> TransformedMultiValuedMap<K, V> transformedMap(final MultiValuedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "lazyList", "org.apache.commons.collections4.list", "LazyList", "public static <E> LazyList<E> lazyList(final List<E> list, final Factory<? extends E> factory)" ], [ "setUniqueList", "org.apache.commons.collections4.list", "SetUniqueList", "public static <E> SetUniqueList<E> setUniqueList(final List<E> list)" ], [ "unmodifiableList", "org.apache.commons.collections4.list", "UnmodifiableList", "public static <E> List<E> unmodifiableList(final List<? extends E> list)" ], [ "fixedSizeList", "org.apache.commons.collections4.list", "FixedSizeList", "public static <E> FixedSizeList<E> fixedSizeList(final List<E> list)" ], [ "transformingList", "org.apache.commons.collections4.list", "TransformedList", "public static <E> TransformedList<E> transformingList(final List<E> list, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedList", "org.apache.commons.collections4.list", "TransformedList", "public static <E> TransformedList<E> transformedList(final List<E> list, final Transformer<? super E, ? extends E> transformer)" ], [ "growthList", "org.apache.commons.collections4.list", "GrowthList", "public static <E> GrowthList<E> growthList(final List<E> list)" ], [ "predicatedList", "org.apache.commons.collections4.list", "PredicatedList", "public static <T> PredicatedList<T> predicatedList(final List<T> list, final Predicate<? super T> predicate)" ], [ "transformingQueue", "org.apache.commons.collections4.queue", "TransformedQueue", "public static <E> TransformedQueue<E> transformingQueue(final Queue<E> queue, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedQueue", "org.apache.commons.collections4.queue", "TransformedQueue", "public static <E> TransformedQueue<E> transformedQueue(final Queue<E> queue, final Transformer<? super E, ? extends E> transformer)" ], [ "unmodifiableQueue", "org.apache.commons.collections4.queue", "UnmodifiableQueue", "public static <E> Queue<E> unmodifiableQueue(final Queue<? extends E> queue)" ], [ "predicatedQueue", "org.apache.commons.collections4.queue", "PredicatedQueue", "public static <E> PredicatedQueue<E> predicatedQueue(final Queue<E> Queue, final Predicate<? super E> predicate)" ], [ "empty", "org.apache.commons.collections4", "FluentIterable", "public static <T> FluentIterable<T> empty()" ], [ "of", "org.apache.commons.collections4", "FluentIterable", "public static <T> FluentIterable<T> of(final T singleton)" ], [ "of", "org.apache.commons.collections4", "FluentIterable", "public static <T> FluentIterable<T> of(final T... elements)" ], [ "of", "org.apache.commons.collections4", "FluentIterable", "public static <T> FluentIterable<T> of(final Iterable<T> iterable)" ], [ "exceptionTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> exceptionTransformer()" ], [ "nullTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> nullTransformer()" ], [ "nopTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> nopTransformer()" ], [ "cloneTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> cloneTransformer()" ], [ "constantTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> constantTransformer(final O constantToReturn)" ], [ "asTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> asTransformer(final Closure<? super T> closure)" ], [ "asTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, Boolean> asTransformer(final Predicate<? super T> predicate)" ], [ "asTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> asTransformer(final Factory<? extends O> factory)" ], [ "chainedTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> chainedTransformer(final Transformer<? super T, ? extends T>... transformers)" ], [ "chainedTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> chainedTransformer(final Collection<? extends Transformer<? super T, ? extends T>> transformers)" ], [ "ifTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> ifTransformer(final Predicate<? super T> predicate, final Transformer<? super T, ? extends T> trueTransformer)" ], [ "ifTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> ifTransformer(final Predicate<? super I> predicate, final Transformer<? super I, ? extends O> trueTransformer, final Transformer<? super I, ? extends O> falseTransformer)" ], [ "switchTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> switchTransformer(final Predicate<? super I> predicate, final Transformer<? super I, ? extends O> trueTransformer, final Transformer<? super I, ? extends O> falseTransformer)" ], [ "switchTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> switchTransformer(final Predicate<? super I>[] predicates, final Transformer<? super I, ? extends O>[] transformers)" ], [ "switchTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> switchTransformer(final Predicate<? super I>[] predicates, final Transformer<? super I, ? extends O>[] transformers, final Transformer<? super I, ? extends O> defaultTransformer)" ], [ "switchTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> switchTransformer(final Map<Predicate<I>, Transformer<I, O>> predicatesAndTransformers)" ], [ "switchMapTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> switchMapTransformer(final Map<I, Transformer<I, O>> objectsAndTransformers)" ], [ "instantiateTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<Class<? extends T>, T> instantiateTransformer()" ], [ "instantiateTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<Class<? extends T>, T> instantiateTransformer(final Class<?>[] paramTypes, final Object[] args)" ], [ "mapTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> mapTransformer(final Map<? super I, ? extends O> map)" ], [ "invokerTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> invokerTransformer(final String methodName)" ], [ "invokerTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> invokerTransformer(final String methodName, final Class<?>[] paramTypes, final Object[] args)" ], [ "stringValueTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, String> stringValueTransformer()" ], [ "exceptionPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> exceptionPredicate()" ], [ "truePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> truePredicate()" ], [ "falsePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> falsePredicate()" ], [ "nullPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nullPredicate()" ], [ "notNullPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> notNullPredicate()" ], [ "equalPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> equalPredicate(final T value)" ], [ "identityPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> identityPredicate(final T value)" ], [ "instanceofPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static Predicate<Object> instanceofPredicate(final Class<?> type)" ], [ "uniquePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> uniquePredicate()" ], [ "invokerPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> invokerPredicate(final String methodName)" ], [ "invokerPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> invokerPredicate(final String methodName, final Class<?>[] paramTypes, final Object[] args)" ], [ "andPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> andPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "allPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> allPredicate(final Predicate<? super T>... predicates)" ], [ "allPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> allPredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "orPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> orPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "anyPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> anyPredicate(final Predicate<? super T>... predicates)" ], [ "anyPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> anyPredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "eitherPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> eitherPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "onePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> onePredicate(final Predicate<? super T>... predicates)" ], [ "onePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> onePredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "neitherPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> neitherPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "nonePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nonePredicate(final Predicate<? super T>... predicates)" ], [ "nonePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nonePredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "notPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> notPredicate(final Predicate<? super T> predicate)" ], [ "asPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> asPredicate(final Transformer<? super T, Boolean> transformer)" ], [ "nullIsExceptionPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nullIsExceptionPredicate(final Predicate<? super T> predicate)" ], [ "nullIsFalsePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nullIsFalsePredicate(final Predicate<? super T> predicate)" ], [ "nullIsTruePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nullIsTruePredicate(final Predicate<? super T> predicate)" ], [ "transformedPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> transformedPredicate(final Transformer<? super T, ? extends T> transformer, final Predicate<? super T> predicate)" ], [ "emptySet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> emptySet()" ], [ "emptySortedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> emptySortedSet()" ], [ "emptyIfNull", "org.apache.commons.collections4", "SetUtils", "public static <T> Set<T> emptyIfNull(final Set<T> set)" ], [ "isEqualSet", "org.apache.commons.collections4", "SetUtils", "public static boolean isEqualSet(final Collection<?> set1, final Collection<?> set2)" ], [ "hashCodeForSet", "org.apache.commons.collections4", "SetUtils", "public static <T> int hashCodeForSet(final Collection<T> set)" ], [ "newIdentityHashSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> newIdentityHashSet()" ], [ "synchronizedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> synchronizedSet(final Set<E> set)" ], [ "unmodifiableSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> unmodifiableSet(final Set<? extends E> set)" ], [ "predicatedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> predicatedSet(final Set<E> set, final Predicate<? super E> predicate)" ], [ "transformedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> transformedSet(final Set<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "orderedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> orderedSet(final Set<E> set)" ], [ "synchronizedSortedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> synchronizedSortedSet(final SortedSet<E> set)" ], [ "unmodifiableSortedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> unmodifiableSortedSet(final SortedSet<E> set)" ], [ "predicatedSortedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> predicatedSortedSet(final SortedSet<E> set, final Predicate<? super E> predicate)" ], [ "transformedSortedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> transformedSortedSet(final SortedSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "unmodifiableNavigableSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> unmodifiableNavigableSet(final NavigableSet<E> set)" ], [ "predicatedNavigableSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> predicatedNavigableSet(final NavigableSet<E> set, final Predicate<? super E> predicate)" ], [ "transformedNavigableSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> transformedNavigableSet(final NavigableSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "union", "org.apache.commons.collections4", "SetUtils", "public static <E> SetView<E> union(final Set<? extends E> a, final Set<? extends E> b)" ], [ "difference", "org.apache.commons.collections4", "SetUtils", "public static <E> SetView<E> difference(final Set<? extends E> a, final Set<? extends E> b)" ], [ "intersection", "org.apache.commons.collections4", "SetUtils", "public static <E> SetView<E> intersection(final Set<? extends E> a, final Set<? extends E> b)" ], [ "disjunction", "org.apache.commons.collections4", "SetUtils", "public static <E> SetView<E> disjunction(final Set<? extends E> a, final Set<? extends E> b)" ], [ "transformingSet", "org.apache.commons.collections4.set", "TransformedSet", "public static <E> TransformedSet<E> transformingSet(final Set<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedSet", "org.apache.commons.collections4.set", "TransformedSet", "public static <E> Set<E> transformedSet(final Set<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "transformingNavigableSet", "org.apache.commons.collections4.set", "TransformedNavigableSet", "public static <E> TransformedNavigableSet<E> transformingNavigableSet(final NavigableSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedNavigableSet", "org.apache.commons.collections4.set", "TransformedNavigableSet", "public static <E> TransformedNavigableSet<E> transformedNavigableSet(final NavigableSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "predicatedNavigableSet", "org.apache.commons.collections4.set", "PredicatedNavigableSet", "public static <E> PredicatedNavigableSet<E> predicatedNavigableSet(final NavigableSet<E> set, final Predicate<? super E> predicate)" ], [ "listOrderedSet", "org.apache.commons.collections4.set", "ListOrderedSet", "public static <E> ListOrderedSet<E> listOrderedSet(final Set<E> set, final List<E> list)" ], [ "listOrderedSet", "org.apache.commons.collections4.set", "ListOrderedSet", "public static <E> ListOrderedSet<E> listOrderedSet(final Set<E> set)" ], [ "listOrderedSet", "org.apache.commons.collections4.set", "ListOrderedSet", "public static <E> ListOrderedSet<E> listOrderedSet(final List<E> list)" ], [ "unmodifiableSet", "org.apache.commons.collections4.set", "UnmodifiableSet", "public static <E> Set<E> unmodifiableSet(final Set<? extends E> set)" ], [ "mapBackedSet", "org.apache.commons.collections4.set", "MapBackedSet", "public static <E, V> MapBackedSet<E, V> mapBackedSet(final Map<E, ? super V> map)" ], [ "mapBackedSet", "org.apache.commons.collections4.set", "MapBackedSet", "public static <E, V> MapBackedSet<E, V> mapBackedSet(final Map<E, ? super V> map, final V dummyValue)" ], [ "unmodifiableSortedSet", "org.apache.commons.collections4.set", "UnmodifiableSortedSet", "public static <E> SortedSet<E> unmodifiableSortedSet(final SortedSet<E> set)" ], [ "predicatedSortedSet", "org.apache.commons.collections4.set", "PredicatedSortedSet", "public static <E> PredicatedSortedSet<E> predicatedSortedSet(final SortedSet<E> set, final Predicate<? super E> predicate)" ], [ "predicatedSet", "org.apache.commons.collections4.set", "PredicatedSet", "public static <E> PredicatedSet<E> predicatedSet(final Set<E> set, final Predicate<? super E> predicate)" ], [ "unmodifiableNavigableSet", "org.apache.commons.collections4.set", "UnmodifiableNavigableSet", "public static <E> NavigableSet<E> unmodifiableNavigableSet(final NavigableSet<E> set)" ], [ "transformingSortedSet", "org.apache.commons.collections4.set", "TransformedSortedSet", "public static <E> TransformedSortedSet<E> transformingSortedSet(final SortedSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedSortedSet", "org.apache.commons.collections4.set", "TransformedSortedSet", "public static <E> TransformedSortedSet<E> transformedSortedSet(final SortedSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "get", "org.apache.commons.collections4", "EnumerationUtils", "public static <T> T get(final Enumeration<T> e, final int index)" ], [ "toList", "org.apache.commons.collections4", "EnumerationUtils", "public static <E> List<E> toList(final Enumeration<? extends E> enumeration)" ], [ "toList", "org.apache.commons.collections4", "EnumerationUtils", "public static List<String> toList(final StringTokenizer stringTokenizer)" ], [ "unmodifiableQueue", "org.apache.commons.collections4", "QueueUtils", "public static <E> Queue<E> unmodifiableQueue(final Queue<? extends E> queue)" ], [ "predicatedQueue", "org.apache.commons.collections4", "QueueUtils", "public static <E> Queue<E> predicatedQueue(final Queue<E> queue, final Predicate<? super E> predicate)" ], [ "transformingQueue", "org.apache.commons.collections4", "QueueUtils", "public static <E> Queue<E> transformingQueue(final Queue<E> queue, final Transformer<? super E, ? extends E> transformer)" ], [ "emptyQueue", "org.apache.commons.collections4", "QueueUtils", "public static <E> Queue<E> emptyQueue()" ], [ "synchronizedBag", "org.apache.commons.collections4.bag", "SynchronizedBag", "public static <E> SynchronizedBag<E> synchronizedBag(final Bag<E> bag)" ], [ "collectionBag", "org.apache.commons.collections4.bag", "CollectionBag", "public static <E> Bag<E> collectionBag(final Bag<E> bag)" ], [ "unmodifiableBag", "org.apache.commons.collections4.bag", "UnmodifiableBag", "public static <E> Bag<E> unmodifiableBag(final Bag<? extends E> bag)" ], [ "predicatedSortedBag", "org.apache.commons.collections4.bag", "PredicatedSortedBag", "public static <E> PredicatedSortedBag<E> predicatedSortedBag(final SortedBag<E> bag, final Predicate<? super E> predicate)" ], [ "unmodifiableSortedBag", "org.apache.commons.collections4.bag", "UnmodifiableSortedBag", "public static <E> SortedBag<E> unmodifiableSortedBag(final SortedBag<E> bag)" ], [ "transformingSortedBag", "org.apache.commons.collections4.bag", "TransformedSortedBag", "public static <E> TransformedSortedBag<E> transformingSortedBag(final SortedBag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedSortedBag", "org.apache.commons.collections4.bag", "TransformedSortedBag", "public static <E> TransformedSortedBag<E> transformedSortedBag(final SortedBag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "predicatedBag", "org.apache.commons.collections4.bag", "PredicatedBag", "public static <E> PredicatedBag<E> predicatedBag(final Bag<E> bag, final Predicate<? super E> predicate)" ], [ "synchronizedSortedBag", "org.apache.commons.collections4.bag", "SynchronizedSortedBag", "public static <E> SynchronizedSortedBag<E> synchronizedSortedBag(final SortedBag<E> bag)" ], [ "collectionSortedBag", "org.apache.commons.collections4.bag", "CollectionSortedBag", "public static <E> SortedBag<E> collectionSortedBag(final SortedBag<E> bag)" ], [ "transformingBag", "org.apache.commons.collections4.bag", "TransformedBag", "public static <E> Bag<E> transformingBag(final Bag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedBag", "org.apache.commons.collections4.bag", "TransformedBag", "public static <E> Bag<E> transformedBag(final Bag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "predicatedMultiSet", "org.apache.commons.collections4.multiset", "PredicatedMultiSet", "public static <E> PredicatedMultiSet<E> predicatedMultiSet(final MultiSet<E> multiset, final Predicate<? super E> predicate)" ], [ "unmodifiableMultiSet", "org.apache.commons.collections4.multiset", "UnmodifiableMultiSet", "public static <E> MultiSet<E> unmodifiableMultiSet(final MultiSet<? extends E> multiset)" ], [ "synchronizedMultiSet", "org.apache.commons.collections4.multiset", "SynchronizedMultiSet", "public static <E> SynchronizedMultiSet<E> synchronizedMultiSet(final MultiSet<E> multiset)" ], [ "synchronizedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> synchronizedBag(final Bag<E> bag)" ], [ "unmodifiableBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> unmodifiableBag(final Bag<? extends E> bag)" ], [ "predicatedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> predicatedBag(final Bag<E> bag, final Predicate<? super E> predicate)" ], [ "transformingBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> transformingBag(final Bag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "collectionBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> collectionBag(final Bag<E> bag)" ], [ "synchronizedSortedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> SortedBag<E> synchronizedSortedBag(final SortedBag<E> bag)" ], [ "unmodifiableSortedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> SortedBag<E> unmodifiableSortedBag(final SortedBag<E> bag)" ], [ "predicatedSortedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> SortedBag<E> predicatedSortedBag(final SortedBag<E> bag, final Predicate<? super E> predicate)" ], [ "transformingSortedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> SortedBag<E> transformingSortedBag(final SortedBag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "emptyBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> emptyBag()" ], [ "emptySortedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> SortedBag<E> emptySortedBag()" ], [ "resettableEmptyListIterator", "org.apache.commons.collections4.iterators", "EmptyListIterator", "public static <E> ResettableListIterator<E> resettableEmptyListIterator()" ], [ "emptyListIterator", "org.apache.commons.collections4.iterators", "EmptyListIterator", "public static <E> ListIterator<E> emptyListIterator()" ], [ "unmodifiableOrderedMapIterator", "org.apache.commons.collections4.iterators", "UnmodifiableOrderedMapIterator", "public static <K, V> OrderedMapIterator<K, V> unmodifiableOrderedMapIterator(final OrderedMapIterator<K, ? extends V> iterator)" ], [ "unmodifiableIterator", "org.apache.commons.collections4.iterators", "UnmodifiableIterator", "public static <E> Iterator<E> unmodifiableIterator(final Iterator<? extends E> iterator)" ], [ "peekingIterator", "org.apache.commons.collections4.iterators", "PeekingIterator", "public static <E> PeekingIterator<E> peekingIterator(final Iterator<? extends E> iterator)" ], [ "emptyMapIterator", "org.apache.commons.collections4.iterators", "EmptyMapIterator", "public static <K, V> MapIterator<K, V> emptyMapIterator()" ], [ "emptyOrderedIterator", "org.apache.commons.collections4.iterators", "EmptyOrderedIterator", "public static <E> OrderedIterator<E> emptyOrderedIterator()" ], [ "umodifiableListIterator", "org.apache.commons.collections4.iterators", "UnmodifiableListIterator", "public static <E> ListIterator<E> umodifiableListIterator(final ListIterator<? extends E> iterator)" ], [ "emptyOrderedMapIterator", "org.apache.commons.collections4.iterators", "EmptyOrderedMapIterator", "public static <K, V> OrderedMapIterator<K, V> emptyOrderedMapIterator()" ], [ "unmodifiableMapIterator", "org.apache.commons.collections4.iterators", "UnmodifiableMapIterator", "public static <K, V> MapIterator<K, V> unmodifiableMapIterator(final MapIterator<? extends K, ? extends V> iterator)" ], [ "resettableEmptyIterator", "org.apache.commons.collections4.iterators", "EmptyIterator", "public static <E> ResettableIterator<E> resettableEmptyIterator()" ], [ "emptyIterator", "org.apache.commons.collections4.iterators", "EmptyIterator", "public static <E> Iterator<E> emptyIterator()" ], [ "pushbackIterator", "org.apache.commons.collections4.iterators", "PushbackIterator", "public static <E> PushbackIterator<E> pushbackIterator(final Iterator<? extends E> iterator)" ], [ "readableMap", "org.apache.commons.collections4", "SplitMapUtils", "public static <K, V> IterableMap<K, V> readableMap(final Get<K, V> get)" ], [ "writableMap", "org.apache.commons.collections4", "SplitMapUtils", "public static <K, V> Map<K, V> writableMap(final Put<K, V> put)" ] ],
  "tokensProjectClassesNonPrivateStaticAttributes" : [ [ "EMPTY_ITERATOR", "org.apache.commons.collections4", "IteratorUtils", "public static final ResettableIterator EMPTY_ITERATOR = EmptyIterator.RESETTABLE_INSTANCE;" ], [ "EMPTY_LIST_ITERATOR", "org.apache.commons.collections4", "IteratorUtils", "public static final ResettableListIterator EMPTY_LIST_ITERATOR = EmptyListIterator.RESETTABLE_INSTANCE;" ], [ "EMPTY_ORDERED_ITERATOR", "org.apache.commons.collections4", "IteratorUtils", "public static final OrderedIterator EMPTY_ORDERED_ITERATOR = EmptyOrderedIterator.INSTANCE;" ], [ "EMPTY_MAP_ITERATOR", "org.apache.commons.collections4", "IteratorUtils", "public static final MapIterator EMPTY_MAP_ITERATOR = EmptyMapIterator.INSTANCE;" ], [ "EMPTY_ORDERED_MAP_ITERATOR", "org.apache.commons.collections4", "IteratorUtils", "public static final OrderedMapIterator EMPTY_ORDERED_MAP_ITERATOR = EmptyOrderedMapIterator.INSTANCE;" ], [ "NATURAL_COMPARATOR", "org.apache.commons.collections4", "ComparatorUtils", "public static final Comparator NATURAL_COMPARATOR = ComparableComparator.<Comparable>comparableComparator();" ], [ "EMPTY_MULTI_VALUED_MAP", "org.apache.commons.collections4", "MultiMapUtils", "public static final MultiValuedMap EMPTY_MULTI_VALUED_MAP = UnmodifiableMultiValuedMap.unmodifiableMultiValuedMap(new ArrayListValuedHashMap(0, 0));" ], [ "EMPTY_SORTED_MAP", "org.apache.commons.collections4", "MapUtils", "public static final SortedMap EMPTY_SORTED_MAP = UnmodifiableSortedMap.unmodifiableSortedMap(new TreeMap<Object, Object>());" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "DefaultEquator", "public static final DefaultEquator INSTANCE = new DefaultEquator<Object>();" ], [ "HASHCODE_NULL", "org.apache.commons.collections4.functors", "DefaultEquator", "public static final int HASHCODE_NULL = -1;" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "ExceptionClosure", "public static final Closure INSTANCE = new ExceptionClosure<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "NOPClosure", "public static final Closure INSTANCE = new NOPClosure<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "NullPredicate", "public static final Predicate INSTANCE = new NullPredicate<Object>();" ], [ "NULL_INSTANCE", "org.apache.commons.collections4.functors", "ConstantTransformer", "public static final Transformer NULL_INSTANCE = new ConstantTransformer<Object, Object>(null);" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "ExceptionTransformer", "public static final Transformer INSTANCE = new ExceptionTransformer<Object, Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "NOPTransformer", "public static final Transformer INSTANCE = new NOPTransformer<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "ExceptionFactory", "public static final Factory INSTANCE = new ExceptionFactory<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "ExceptionPredicate", "public static final Predicate INSTANCE = new ExceptionPredicate<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "FalsePredicate", "public static final Predicate INSTANCE = new FalsePredicate<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "CloneTransformer", "public static final Transformer INSTANCE = new CloneTransformer<Object>();" ], [ "NULL_INSTANCE", "org.apache.commons.collections4.functors", "ConstantFactory", "public static final Factory NULL_INSTANCE = new ConstantFactory<Object>(null);" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "TruePredicate", "public static final Predicate INSTANCE = new TruePredicate<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "NotNullPredicate", "public static final Predicate INSTANCE = new NotNullPredicate<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.comparators", "ComparableComparator", "public static final ComparableComparator INSTANCE = new ComparableComparator();" ], [ "EMPTY_COLLECTION", "org.apache.commons.collections4", "CollectionUtils", "public static final Collection EMPTY_COLLECTION = UnmodifiableCollection.unmodifiableCollection(new ArrayList<Object>());" ], [ "EMPTY_ITERABLE", "org.apache.commons.collections4", "IterableUtils", "static final FluentIterable EMPTY_ITERABLE = new FluentIterable<Object>() {\n\n    @Override\n    public Iterator<Object> iterator() {\n        return IteratorUtils.emptyIterator();\n    }\n};" ], [ "NULL_BIT_KEY", "org.apache.commons.collections4.trie", "KeyAnalyzer", "public static final int NULL_BIT_KEY = -1;" ], [ "EQUAL_BIT_KEY", "org.apache.commons.collections4.trie", "KeyAnalyzer", "public static final int EQUAL_BIT_KEY = -2;" ], [ "OUT_OF_BOUNDS_BIT_KEY", "org.apache.commons.collections4.trie", "KeyAnalyzer", "public static final int OUT_OF_BOUNDS_BIT_KEY = -3;" ], [ "INSTANCE", "org.apache.commons.collections4.trie.analyzer", "StringKeyAnalyzer", "public static final StringKeyAnalyzer INSTANCE = new StringKeyAnalyzer();" ], [ "LENGTH", "org.apache.commons.collections4.trie.analyzer", "StringKeyAnalyzer", "public static final int LENGTH = Character.SIZE;" ], [ "NO_NEXT_ENTRY", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String NO_NEXT_ENTRY = \"No next() entry in the iteration\";" ], [ "NO_PREVIOUS_ENTRY", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String NO_PREVIOUS_ENTRY = \"No previous() entry in the iteration\";" ], [ "REMOVE_INVALID", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String REMOVE_INVALID = \"remove() can only be called once after next()\";" ], [ "GETKEY_INVALID", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String GETKEY_INVALID = \"getKey() can only be called after next() and before remove()\";" ], [ "GETVALUE_INVALID", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String GETVALUE_INVALID = \"getValue() can only be called after next() and before remove()\";" ], [ "SETVALUE_INVALID", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String SETVALUE_INVALID = \"setValue() can only be called after next() and before remove()\";" ], [ "DEFAULT_CAPACITY", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final int DEFAULT_CAPACITY = 16;" ], [ "DEFAULT_THRESHOLD", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final int DEFAULT_THRESHOLD = 12;" ], [ "DEFAULT_LOAD_FACTOR", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final float DEFAULT_LOAD_FACTOR = 0.75f;" ], [ "MAXIMUM_CAPACITY", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final int MAXIMUM_CAPACITY = 1 << 30;" ], [ "NULL", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final Object NULL = new Object();" ], [ "DEFAULT_MAX_SIZE", "org.apache.commons.collections4.map", "LRUMap", "protected static final int DEFAULT_MAX_SIZE = 100;" ], [ "EMPTY_MULTISET", "org.apache.commons.collections4", "MultiSetUtils", "public static final MultiSet EMPTY_MULTISET = UnmodifiableMultiSet.unmodifiableMultiSet(new HashMultiSet<Object>());" ], [ "EMPTY_SORTED_SET", "org.apache.commons.collections4", "SetUtils", "public static final SortedSet EMPTY_SORTED_SET = UnmodifiableSortedSet.unmodifiableSortedSet(new TreeSet<Object>());" ], [ "EMPTY_QUEUE", "org.apache.commons.collections4", "QueueUtils", "public static final Queue EMPTY_QUEUE = UnmodifiableQueue.unmodifiableQueue(new LinkedList<Object>());" ], [ "EMPTY_BAG", "org.apache.commons.collections4", "BagUtils", "public static final Bag EMPTY_BAG = UnmodifiableBag.unmodifiableBag(new HashBag<Object>());" ], [ "EMPTY_SORTED_BAG", "org.apache.commons.collections4", "BagUtils", "public static final Bag EMPTY_SORTED_BAG = UnmodifiableSortedBag.unmodifiableSortedBag(new TreeBag<Object>());" ], [ "RESETTABLE_INSTANCE", "org.apache.commons.collections4.iterators", "EmptyListIterator", "public static final ResettableListIterator RESETTABLE_INSTANCE = new EmptyListIterator<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.iterators", "EmptyListIterator", "public static final ListIterator INSTANCE = RESETTABLE_INSTANCE;" ], [ "INSTANCE", "org.apache.commons.collections4.iterators", "EmptyMapIterator", "public static final MapIterator INSTANCE = new EmptyMapIterator<Object, Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.iterators", "EmptyOrderedIterator", "public static final OrderedIterator INSTANCE = new EmptyOrderedIterator<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.iterators", "EmptyOrderedMapIterator", "public static final OrderedMapIterator INSTANCE = new EmptyOrderedMapIterator<Object, Object>();" ], [ "RESETTABLE_INSTANCE", "org.apache.commons.collections4.iterators", "EmptyIterator", "public static final ResettableIterator RESETTABLE_INSTANCE = new EmptyIterator<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.iterators", "EmptyIterator", "public static final Iterator INSTANCE = RESETTABLE_INSTANCE;" ] ],
  "tokensMethodJavadocValues" : [ [ "0", "int" ], [ "0", "int" ] ],
  "tokensMethodArguments" : [ [ "predicates", "", "Predicate<? super I>[]" ], [ "transformers", "", "Transformer<? super I, ? extends O>[]" ] ],
  "tokensMethodVariablesNonPrivateNonStaticNonVoidMethods" : [ [ "equals", "java.lang", "Object", "public boolean equals(Object arg0)" ], [ "getClass", "java.lang", "Object", "public final native Class<? extends Object> getClass()" ], [ "toString", "java.lang", "Object", "public String toString()" ], [ "hashCode", "java.lang", "Object", "public native int hashCode()" ], [ "clone", "java.lang", "Object", "protected native Object clone() throws CloneNotSupportedException" ], [ "equals", "", "org.apache.commons.collections4.Predicate<? super I>[]", "public boolean equals(Object);" ], [ "toString", "", "org.apache.commons.collections4.Predicate<? super I>[]", "public String toString()" ], [ "hashCode", "", "org.apache.commons.collections4.Predicate<? super I>[]", "public native int hashCode()" ], [ "getClass", "", "org.apache.commons.collections4.Predicate<? super I>[]", "public final native Class getClass();" ], [ "clone", "", "org.apache.commons.collections4.Predicate<? super I>[]", "public T[] clone();" ], [ "equals", "", "org.apache.commons.collections4.Transformer<? super I, ? extends O>[]", "public boolean equals(Object);" ], [ "toString", "", "org.apache.commons.collections4.Transformer<? super I, ? extends O>[]", "public String toString()" ], [ "hashCode", "", "org.apache.commons.collections4.Transformer<? super I, ? extends O>[]", "public native int hashCode()" ], [ "getClass", "", "org.apache.commons.collections4.Transformer<? super I, ? extends O>[]", "public final native Class getClass();" ], [ "clone", "", "org.apache.commons.collections4.Transformer<? super I, ? extends O>[]", "public T[] clone();" ], [ "transform", "org.apache.commons.collections4", "Transformer", "public abstract O transform(I arg0)" ] ],
  "tokensMethodVariablesNonPrivateNonStaticAttributes" : [ [ "length", "org.apache.commons.collections4", "Predicate[]", "public final int length;" ], [ "length", "org.apache.commons.collections4", "Transformer[]", "public final int length;" ] ],
  "tokensOracleVariablesNonPrivateNonStaticNonVoidMethods" : [ ],
  "tokensOracleVariablesNonPrivateNonStaticAttributes" : [ ]
}, {
  "id" : 8953,
  "oracle" : ";",
  "oracleType" : "PRE",
  "projectName" : "commons-collections4-4.1",
  "packageName" : "org.apache.commons.collections4",
  "className" : "TransformerUtils",
  "javadocTag" : "@param <O> the output type",
  "methodJavadoc" : "    /**\n     * Create a new Transformer that calls one of the transformers depending\n     * on the predicates. The transformer at array location 0 is called if the\n     * predicate at array location 0 returned true. Each predicate is evaluated\n     * until one returns true. If no predicates evaluate to true, null is returned.\n     *\n     * @param <I>  the input type\n     * @param <O>  the output type\n     * @param predicates  an array of predicates to check\n     * @param transformers  an array of transformers to call\n     * @return the transformer\n     * @throws NullPointerException if the either array is null\n     * @throws NullPointerException if any element in the arrays is null\n     * @throws IllegalArgumentException if the arrays have different sizes\n     * @see SwitchTransformer\n     */",
  "methodSourceCode" : "public static <I, O> Transformer<I, O> switchTransformer(final Predicate<? super I>[] predicates, final Transformer<? super I, ? extends O>[] transformers){\n    return SwitchTransformer.switchTransformer(predicates, transformers, null);\n}",
  "classJavadoc" : "/**\n * <code>TransformerUtils</code> provides reference implementations and\n * utilities for the Transformer functor interface. The supplied transformers are:\n * <ul>\n * <li>Invoker - returns the result of a method call on the input object\n * <li>Clone - returns a clone of the input object\n * <li>Constant - always returns the same object\n * <li>Closure - performs a Closure and returns the input object\n * <li>Predicate - returns the result of the predicate as a Boolean\n * <li>Factory - returns a new object from a factory\n * <li>Chained - chains two or more transformers together\n * <li>If - calls one transformer or another based on a predicate\n * <li>Switch - calls one transformer based on one or more predicates\n * <li>SwitchMap - calls one transformer looked up from a Map\n * <li>Instantiate - the Class input object is instantiated\n * <li>Map - returns an object from a supplied Map\n * <li>Null - always returns null\n * <li>NOP - returns the input object, which should be immutable\n * <li>Exception - always throws an exception\n * <li>StringValue - returns a <code>java.lang.String</code> representation of the input object\n * </ul>\n * <p>\n * Since v4.1 only transformers which are considered to be unsafe are\n * Serializable. Transformers considered to be unsafe for serialization are:\n * <ul>\n * <li>Invoker\n * <li>Clone\n * <li>Instantiate\n * </ul>\n *\n * @since 3.0\n * @version $Id: TransformerUtils.java 1714362 2015-11-14 20:38:02Z tn $\n */",
  "classSourceCode" : "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.commons.collections4;\n\nimport java.util.Collection;\nimport java.util.Map;\n\nimport org.apache.commons.collections4.functors.ChainedTransformer;\nimport org.apache.commons.collections4.functors.CloneTransformer;\nimport org.apache.commons.collections4.functors.ClosureTransformer;\nimport org.apache.commons.collections4.functors.ConstantTransformer;\nimport org.apache.commons.collections4.functors.EqualPredicate;\nimport org.apache.commons.collections4.functors.ExceptionTransformer;\nimport org.apache.commons.collections4.functors.FactoryTransformer;\nimport org.apache.commons.collections4.functors.IfTransformer;\nimport org.apache.commons.collections4.functors.InstantiateTransformer;\nimport org.apache.commons.collections4.functors.InvokerTransformer;\nimport org.apache.commons.collections4.functors.MapTransformer;\nimport org.apache.commons.collections4.functors.NOPTransformer;\nimport org.apache.commons.collections4.functors.PredicateTransformer;\nimport org.apache.commons.collections4.functors.StringValueTransformer;\nimport org.apache.commons.collections4.functors.SwitchTransformer;\n\n/**\n * <code>TransformerUtils</code> provides reference implementations and\n * utilities for the Transformer functor interface. The supplied transformers are:\n * <ul>\n * <li>Invoker - returns the result of a method call on the input object\n * <li>Clone - returns a clone of the input object\n * <li>Constant - always returns the same object\n * <li>Closure - performs a Closure and returns the input object\n * <li>Predicate - returns the result of the predicate as a Boolean\n * <li>Factory - returns a new object from a factory\n * <li>Chained - chains two or more transformers together\n * <li>If - calls one transformer or another based on a predicate\n * <li>Switch - calls one transformer based on one or more predicates\n * <li>SwitchMap - calls one transformer looked up from a Map\n * <li>Instantiate - the Class input object is instantiated\n * <li>Map - returns an object from a supplied Map\n * <li>Null - always returns null\n * <li>NOP - returns the input object, which should be immutable\n * <li>Exception - always throws an exception\n * <li>StringValue - returns a <code>java.lang.String</code> representation of the input object\n * </ul>\n * <p>\n * Since v4.1 only transformers which are considered to be unsafe are\n * Serializable. Transformers considered to be unsafe for serialization are:\n * <ul>\n * <li>Invoker\n * <li>Clone\n * <li>Instantiate\n * </ul>\n *\n * @since 3.0\n * @version $Id: TransformerUtils.java 1714362 2015-11-14 20:38:02Z tn $\n */\npublic class TransformerUtils {\n\n    /**\n     * This class is not normally instantiated.\n     */\n    private TransformerUtils() {}\n\n    /**\n     * Gets a transformer that always throws an exception.\n     * This could be useful during testing as a placeholder.\n     *\n     * @param <I>  the input type\n     * @param <O>  the output type\n     * @return the transformer\n     * @see ExceptionTransformer\n     */\n    public static <I, O> Transformer<I, O> exceptionTransformer() {\n        return ExceptionTransformer.exceptionTransformer();\n    }\n\n    /**\n     * Gets a transformer that always returns null.\n     *\n     * @param <I>  the input type\n     * @param <O>  the output type\n     * @return the transformer\n     * @see ConstantTransformer\n     */\n    public static <I, O> Transformer<I, O> nullTransformer() {\n        return ConstantTransformer.nullTransformer();\n    }\n\n    /**\n     * Gets a transformer that returns the input object.\n     * The input object should be immutable to maintain the\n     * contract of Transformer (although this is not checked).\n     *\n     * @param <T>  the input/output type\n     * @return the transformer\n     * @see NOPTransformer\n     */\n    public static <T> Transformer<T, T> nopTransformer() {\n        return NOPTransformer.nopTransformer();\n    }\n\n    /**\n     * Gets a transformer that returns a clone of the input object.\n     * The input object will be cloned using one of these techniques (in order):\n     * <ul>\n     * <li>public clone method\n     * <li>public copy constructor\n     * <li>serialization clone\n     * <ul>\n     *\n     * @param <T>  the input/output type\n     * @return the transformer\n     * @see CloneTransformer\n     */\n    public static <T> Transformer<T, T> cloneTransformer() {\n        return CloneTransformer.cloneTransformer();\n    }\n\n    /**\n     * Creates a Transformer that will return the same object each time the\n     * transformer is used.\n     *\n     * @param <I>  the input type\n     * @param <O>  the output type\n     * @param constantToReturn  the constant object to return each time in the transformer\n     * @return the transformer.\n     * @see ConstantTransformer\n     */\n    public static <I, O> Transformer<I, O> constantTransformer(final O constantToReturn) {\n        return ConstantTransformer.constantTransformer(constantToReturn);\n    }\n\n    /**\n     * Creates a Transformer that calls a Closure each time the transformer is used.\n     * The transformer returns the input object.\n     *\n     * @param <T>  the input/output type\n     * @param closure  the closure to run each time in the transformer, not null\n     * @return the transformer\n     * @throws NullPointerException if the closure is null\n     * @see ClosureTransformer\n     */\n    public static <T> Transformer<T, T> asTransformer(final Closure<? super T> closure) {\n        return ClosureTransformer.closureTransformer(closure);\n    }\n\n    /**\n     * Creates a Transformer that calls a Predicate each time the transformer is used.\n     * The transformer will return either Boolean.TRUE or Boolean.FALSE.\n     *\n     * @param <T>  the input type\n     * @param predicate  the predicate to run each time in the transformer, not null\n     * @return the transformer\n     * @throws NullPointerException if the predicate is null\n     * @see PredicateTransformer\n     */\n    public static <T> Transformer<T, Boolean> asTransformer(final Predicate<? super T> predicate) {\n        return PredicateTransformer.predicateTransformer(predicate);\n    }\n\n    /**\n     * Creates a Transformer that calls a Factory each time the transformer is used.\n     * The transformer will return the value returned by the factory.\n     *\n     * @param <I>  the input type\n     * @param <O>  the output type\n     * @param factory  the factory to run each time in the transformer, not null\n     * @return the transformer\n     * @throws NullPointerException if the factory is null\n     * @see FactoryTransformer\n     */\n    public static <I, O> Transformer<I, O> asTransformer(final Factory<? extends O> factory) {\n        return FactoryTransformer.factoryTransformer(factory);\n    }\n\n    /**\n     * Create a new Transformer that calls each transformer in turn, passing the\n     * result into the next transformer.\n     *\n     * @param <T>  the input/output type\n     * @param transformers  an array of transformers to chain\n     * @return the transformer\n     * @throws NullPointerException if the transformers array or any of the transformers is null\n     * @see ChainedTransformer\n     */\n    public static <T> Transformer<T, T> chainedTransformer(\n            final Transformer<? super T, ? extends T>... transformers) {\n        return ChainedTransformer.chainedTransformer(transformers);\n    }\n\n    /**\n     * Create a new Transformer that calls each transformer in turn, passing the\n     * result into the next transformer. The ordering is that of the iterator()\n     * method on the collection.\n     *\n     * @param <T>  the input/output type\n     * @param transformers  a collection of transformers to chain\n     * @return the transformer\n     * @throws NullPointerException if the transformers collection or any of the transformers is null\n     * @see ChainedTransformer\n     */\n    public static <T> Transformer<T, T> chainedTransformer(\n            final Collection<? extends Transformer<? super T, ? extends T>> transformers) {\n        return ChainedTransformer.chainedTransformer(transformers);\n    }\n\n    /**\n     * Create a new Transformer that calls the transformer if the predicate is true,\n     * otherwise the input object is returned unchanged.\n     *\n     * @param <T>  the input / output type\n     * @param predicate  the predicate to switch on\n     * @param trueTransformer  the transformer called if the predicate is true\n     * @return the transformer\n     * @throws NullPointerException if either the predicate or transformer is null\n     * @see IfTransformer\n     * @since 4.1\n     */\n    public static <T> Transformer<T, T> ifTransformer(final Predicate<? super T> predicate,\n                                                      final Transformer<? super T, ? extends T> trueTransformer) {\n        return IfTransformer.ifTransformer(predicate, trueTransformer);\n    }\n\n    /**\n     * Create a new Transformer that calls one of two transformers depending\n     * on the specified predicate.\n     *\n     * @param <I>  the input type\n     * @param <O>  the output type\n     * @param predicate  the predicate to switch on\n     * @param trueTransformer  the transformer called if the predicate is true\n     * @param falseTransformer  the transformer called if the predicate is false\n     * @return the transformer\n     * @throws NullPointerException if either the predicate or transformer is null\n     * @see IfTransformer\n     * @since 4.1\n     */\n    public static <I, O> Transformer<I, O> ifTransformer(final Predicate<? super I> predicate,\n                                                         final Transformer<? super I, ? extends O> trueTransformer,\n                                                         final Transformer<? super I, ? extends O> falseTransformer) {\n        return IfTransformer.ifTransformer(predicate, trueTransformer, falseTransformer);\n    }\n\n    /**\n     * Create a new Transformer that calls one of two transformers depending\n     * on the specified predicate.\n     *\n     * @param <I>  the input type\n     * @param <O>  the output type\n     * @param predicate  the predicate to switch on\n     * @param trueTransformer  the transformer called if the predicate is true\n     * @param falseTransformer  the transformer called if the predicate is false\n     * @return the transformer\n     * @throws NullPointerException if either the predicate or transformer is null\n     * @see SwitchTransformer\n     * @deprecated as of 4.1, use {@link #ifTransformer(Predicate, Transformer, Transformer))\n     */\n    @SuppressWarnings(\"unchecked\")\n    @Deprecated\n    public static <I, O> Transformer<I, O> switchTransformer(final Predicate<? super I> predicate,\n            final Transformer<? super I, ? extends O> trueTransformer,\n            final Transformer<? super I, ? extends O> falseTransformer) {\n        return SwitchTransformer.switchTransformer(new Predicate[] { predicate },\n                                                   new Transformer[] { trueTransformer }, falseTransformer);\n    }\n\n    /**\n     * Create a new Transformer that calls one of the transformers depending\n     * on the predicates. The transformer at array location 0 is called if the\n     * predicate at array location 0 returned true. Each predicate is evaluated\n     * until one returns true. If no predicates evaluate to true, null is returned.\n     *\n     * @param <I>  the input type\n     * @param <O>  the output type\n     * @param predicates  an array of predicates to check\n     * @param transformers  an array of transformers to call\n     * @return the transformer\n     * @throws NullPointerException if the either array is null\n     * @throws NullPointerException if any element in the arrays is null\n     * @throws IllegalArgumentException if the arrays have different sizes\n     * @see SwitchTransformer\n     */\n    public static <I, O> Transformer<I, O> switchTransformer(final Predicate<? super I>[] predicates,\n            final Transformer<? super I, ? extends O>[] transformers) {\n        return SwitchTransformer.switchTransformer(predicates, transformers, null);\n    }\n\n    /**\n     * Create a new Transformer that calls one of the transformers depending\n     * on the predicates. The transformer at array location 0 is called if the\n     * predicate at array location 0 returned true. Each predicate is evaluated\n     * until one returns true. If no predicates evaluate to true, the default\n     * transformer is called. If the default transformer is null, null is returned.\n     *\n     * @param <I>  the input type\n     * @param <O>  the output type\n     * @param predicates  an array of predicates to check\n     * @param transformers  an array of transformers to call\n     * @param defaultTransformer  the default to call if no predicate matches, null means return null\n     * @return the transformer\n     * @throws NullPointerException if the either array is null\n     * @throws NullPointerException if any element in the arrays is null\n     * @throws IllegalArgumentException if the arrays have different sizes\n     * @see SwitchTransformer\n     */\n    public static <I, O> Transformer<I, O> switchTransformer(final Predicate<? super I>[] predicates,\n            final Transformer<? super I, ? extends O>[] transformers,\n            final Transformer<? super I, ? extends O> defaultTransformer) {\n        return SwitchTransformer.switchTransformer(predicates, transformers, defaultTransformer);\n    }\n\n    /**\n     * Create a new Transformer that calls one of the transformers depending\n     * on the predicates.\n     * <p>\n     * The Map consists of Predicate keys and Transformer values. A transformer\n     * is called if its matching predicate returns true. Each predicate is evaluated\n     * until one returns true. If no predicates evaluate to true, the default\n     * transformer is called. The default transformer is set in the map with a\n     * null key. If no default transformer is set, null will be returned in a default\n     * case. The ordering is that of the iterator() method on the entryset collection\n     * of the map.\n     *\n     * @param <I>  the input type\n     * @param <O>  the output type\n     * @param predicatesAndTransformers  a map of predicates to transformers\n     * @return the transformer\n     * @throws NullPointerException if the map is null\n     * @throws NullPointerException if any transformer in the map is null\n     * @throws ClassCastException  if the map elements are of the wrong type\n     * @see SwitchTransformer\n     */\n    public static <I, O> Transformer<I, O> switchTransformer(\n            final Map<Predicate<I>, Transformer<I, O>> predicatesAndTransformers) {\n        return SwitchTransformer.switchTransformer(predicatesAndTransformers);\n    }\n\n    /**\n     * Create a new Transformer that uses the input object as a key to find the\n     * transformer to call.\n     * <p>\n     * The Map consists of object keys and Transformer values. A transformer\n     * is called if the input object equals the key. If there is no match, the\n     * default transformer is called. The default transformer is set in the map\n     * using a null key. If no default is set, null will be returned in a default case.\n     *\n     * @param <I>  the input type\n     * @param <O>  the output type\n     * @param objectsAndTransformers  a map of objects to transformers\n     * @return the transformer\n     * @throws NullPointerException if the map is null\n     * @throws NullPointerException if any transformer in the map is null\n     * @see SwitchTransformer\n     */\n    @SuppressWarnings(\"unchecked\")\n    public static <I, O> Transformer<I, O> switchMapTransformer(\n            final Map<I, Transformer<I, O>> objectsAndTransformers) {\n\n        if (objectsAndTransformers == null) {\n            throw new NullPointerException(\"The object and transformer map must not be null\");\n        }\n        final Transformer<? super I, ? extends O> def = objectsAndTransformers.remove(null);\n        final int size = objectsAndTransformers.size();\n        final Transformer<? super I, ? extends O>[] trs = new Transformer[size];\n        final Predicate<I>[] preds = new Predicate[size];\n        int i = 0;\n        for (final Map.Entry<I, Transformer<I, O>> entry : objectsAndTransformers.entrySet()) {\n            preds[i] = EqualPredicate.<I>equalPredicate(entry.getKey());\n            trs[i++] = entry.getValue();\n        }\n        return TransformerUtils.switchTransformer(preds, trs, def);\n    }\n\n    /**\n     * Gets a Transformer that expects an input Class object that it will instantiate.\n     *\n     * @param <T>  the output type\n     * @return the transformer\n     * @see InstantiateTransformer\n     */\n    public static <T> Transformer<Class<? extends T>, T> instantiateTransformer() {\n        return InstantiateTransformer.instantiateTransformer();\n    }\n\n    /**\n     * Creates a Transformer that expects an input Class object that it will\n     * instantiate. The constructor used is determined by the arguments specified\n     * to this method.\n     *\n     * @param <T>  the output type\n     * @param paramTypes  parameter types for the constructor, can be null\n     * @param args  the arguments to pass to the constructor, can be null\n     * @return the transformer\n     * @throws IllegalArgumentException if the paramTypes and args don't match\n     * @see InstantiateTransformer\n     */\n    public static <T> Transformer<Class<? extends T>, T> instantiateTransformer(\n            final Class<?>[] paramTypes, final Object[] args) {\n        return InstantiateTransformer.instantiateTransformer(paramTypes, args);\n    }\n\n    /**\n     * Creates a Transformer that uses the passed in Map to transform the input\n     * object (as a simple lookup).\n     *\n     * @param <I>  the input type\n     * @param <O>  the output type\n     * @param map  the map to use to transform the objects\n     * @return the transformer, or {@link ConstantTransformer#nullTransformer()} if the\n     *   {@code map} is {@code null}\n     * @see MapTransformer\n     */\n    public static <I, O> Transformer<I, O> mapTransformer(final Map<? super I, ? extends O> map) {\n        return MapTransformer.mapTransformer(map);\n    }\n\n    /**\n     * Gets a Transformer that invokes a method on the input object.\n     * The method must have no parameters. If the input object is null,\n     * null is returned.\n     * <p>\n     * For example, <code>TransformerUtils.invokerTransformer(\"getName\");</code>\n     * will call the <code>getName/code> method on the input object to\n     * determine the transformer result.\n     *\n     * @param <I>  the input type\n     * @param <O>  the output type\n     * @param methodName  the method name to call on the input object, may not be null\n     * @return the transformer\n     * @throws NullPointerException if the methodName is null.\n     * @see InvokerTransformer\n     */\n    public static <I, O> Transformer<I, O> invokerTransformer(final String methodName) {\n        return InvokerTransformer.invokerTransformer(methodName, null, null);\n    }\n\n    /**\n     * Gets a Transformer that invokes a method on the input object.\n     * The method parameters are specified. If the input object is {@code null},\n     * {@code null} is returned.\n     *\n     * @param <I>  the input type\n     * @param <O>  the output type\n     * @param methodName  the name of the method\n     * @param paramTypes  the parameter types\n     * @param args  the arguments\n     * @return the transformer\n     * @throws NullPointerException if the method name is null\n     * @throws IllegalArgumentException if the paramTypes and args don't match\n     * @see InvokerTransformer\n     */\n    public static <I, O> Transformer<I, O> invokerTransformer(final String methodName, final Class<?>[] paramTypes,\n                                                              final Object[] args) {\n        return InvokerTransformer.invokerTransformer(methodName, paramTypes, args);\n    }\n\n    /**\n     * Gets a transformer that returns a <code>java.lang.String</code>\n     * representation of the input object. This is achieved via the\n     * <code>toString</code> method, <code>null</code> returns 'null'.\n     *\n     * @param <T>  the input type\n     * @return the transformer\n     * @see StringValueTransformer\n     */\n    public static <T> Transformer<T, String> stringValueTransformer() {\n        return StringValueTransformer.stringValueTransformer();\n    }\n\n}\n",
  "tokensGeneralGrammar" : [ "null", "true", "false", ",", ".", ":", ";", "?", "(", ")", "jdVar", "stream", "Arrays", "allMatch", "noneMatch", "anyMatch", "~", ">>", "<<", ">>>", "|", "&", "^", "+", "-", "/", "*", "%", "&&", "||", ">=", "<=", ">", "<", "==", "!=", "instanceof", "class", "methodResultID", "this" ],
  "tokensGeneralValuesGlobalDictionary" : [ [ "0", "int" ], [ "1", "int" ], [ "-1", "int" ], [ "0.0", "double" ], [ "1.0", "double" ], [ "-1.0", "double" ], [ "\"\"", "String" ], [ "\" \"", "String" ] ],
  "tokensProjectClasses" : [ [ "BidiMap", "org.apache.commons.collections4" ], [ "Equator", "org.apache.commons.collections4" ], [ "MultiSet", "org.apache.commons.collections4" ], [ "IteratorUtils", "org.apache.commons.collections4" ], [ "ComparatorUtils", "org.apache.commons.collections4" ], [ "FunctorException", "org.apache.commons.collections4" ], [ "AbstractDualBidiMap", "org.apache.commons.collections4.bidimap" ], [ "UnmodifiableBidiMap", "org.apache.commons.collections4.bidimap" ], [ "AbstractOrderedBidiMapDecorator", "org.apache.commons.collections4.bidimap" ], [ "UnmodifiableOrderedBidiMap", "org.apache.commons.collections4.bidimap" ], [ "AbstractBidiMapDecorator", "org.apache.commons.collections4.bidimap" ], [ "DualLinkedHashBidiMap", "org.apache.commons.collections4.bidimap" ], [ "UnmodifiableSortedBidiMap", "org.apache.commons.collections4.bidimap" ], [ "AbstractSortedBidiMapDecorator", "org.apache.commons.collections4.bidimap" ], [ "DualHashBidiMap", "org.apache.commons.collections4.bidimap" ], [ "DualTreeBidiMap", "org.apache.commons.collections4.bidimap" ], [ "TreeBidiMap", "org.apache.commons.collections4.bidimap" ], [ "MultiMapUtils", "org.apache.commons.collections4" ], [ "BoundedCollection", "org.apache.commons.collections4" ], [ "UnmodifiableBoundedCollection", "org.apache.commons.collections4.collection" ], [ "CompositeCollection", "org.apache.commons.collections4.collection" ], [ "TransformedCollection", "org.apache.commons.collections4.collection" ], [ "PredicatedCollection", "org.apache.commons.collections4.collection" ], [ "IndexedCollection", "org.apache.commons.collections4.collection" ], [ "SynchronizedCollection", "org.apache.commons.collections4.collection" ], [ "UnmodifiableCollection", "org.apache.commons.collections4.collection" ], [ "AbstractCollectionDecorator", "org.apache.commons.collections4.collection" ], [ "OrderedBidiMap", "org.apache.commons.collections4" ], [ "FactoryUtils", "org.apache.commons.collections4" ], [ "IterableGet", "org.apache.commons.collections4" ], [ "ListUtils", "org.apache.commons.collections4" ], [ "Closure", "org.apache.commons.collections4" ], [ "IterableSortedMap", "org.apache.commons.collections4" ], [ "MapUtils", "org.apache.commons.collections4" ], [ "Transformer", "org.apache.commons.collections4" ], [ "DefaultEquator", "org.apache.commons.collections4.functors" ], [ "StringValueTransformer", "org.apache.commons.collections4.functors" ], [ "PredicateDecorator", "org.apache.commons.collections4.functors" ], [ "IfTransformer", "org.apache.commons.collections4.functors" ], [ "IdentityPredicate", "org.apache.commons.collections4.functors" ], [ "ExceptionClosure", "org.apache.commons.collections4.functors" ], [ "NOPClosure", "org.apache.commons.collections4.functors" ], [ "ClosureTransformer", "org.apache.commons.collections4.functors" ], [ "FunctorUtils", "org.apache.commons.collections4.functors" ], [ "TransformerPredicate", "org.apache.commons.collections4.functors" ], [ "NullPredicate", "org.apache.commons.collections4.functors" ], [ "ConstantTransformer", "org.apache.commons.collections4.functors" ], [ "PredicateTransformer", "org.apache.commons.collections4.functors" ], [ "WhileClosure", "org.apache.commons.collections4.functors" ], [ "ForClosure", "org.apache.commons.collections4.functors" ], [ "NullIsTruePredicate", "org.apache.commons.collections4.functors" ], [ "TransformedPredicate", "org.apache.commons.collections4.functors" ], [ "NonePredicate", "org.apache.commons.collections4.functors" ], [ "ExceptionTransformer", "org.apache.commons.collections4.functors" ], [ "SwitchTransformer", "org.apache.commons.collections4.functors" ], [ "TransformerClosure", "org.apache.commons.collections4.functors" ], [ "OrPredicate", "org.apache.commons.collections4.functors" ], [ "NOPTransformer", "org.apache.commons.collections4.functors" ], [ "MapTransformer", "org.apache.commons.collections4.functors" ], [ "ExceptionFactory", "org.apache.commons.collections4.functors" ], [ "ChainedClosure", "org.apache.commons.collections4.functors" ], [ "AndPredicate", "org.apache.commons.collections4.functors" ], [ "PrototypeFactory", "org.apache.commons.collections4.functors" ], [ "ExceptionPredicate", "org.apache.commons.collections4.functors" ], [ "AbstractQuantifierPredicate", "org.apache.commons.collections4.functors" ], [ "InstanceofPredicate", "org.apache.commons.collections4.functors" ], [ "InvokerTransformer", "org.apache.commons.collections4.functors" ], [ "FalsePredicate", "org.apache.commons.collections4.functors" ], [ "CloneTransformer", "org.apache.commons.collections4.functors" ], [ "NotPredicate", "org.apache.commons.collections4.functors" ], [ "ConstantFactory", "org.apache.commons.collections4.functors" ], [ "ChainedTransformer", "org.apache.commons.collections4.functors" ], [ "ComparatorPredicate", "org.apache.commons.collections4.functors" ], [ "CatchAndRethrowClosure", "org.apache.commons.collections4.functors" ], [ "AllPredicate", "org.apache.commons.collections4.functors" ], [ "NullIsFalsePredicate", "org.apache.commons.collections4.functors" ], [ "NullIsExceptionPredicate", "org.apache.commons.collections4.functors" ], [ "AnyPredicate", "org.apache.commons.collections4.functors" ], [ "TruePredicate", "org.apache.commons.collections4.functors" ], [ "FactoryTransformer", "org.apache.commons.collections4.functors" ], [ "NotNullPredicate", "org.apache.commons.collections4.functors" ], [ "SwitchClosure", "org.apache.commons.collections4.functors" ], [ "UniquePredicate", "org.apache.commons.collections4.functors" ], [ "InstantiateTransformer", "org.apache.commons.collections4.functors" ], [ "OnePredicate", "org.apache.commons.collections4.functors" ], [ "EqualPredicate", "org.apache.commons.collections4.functors" ], [ "InstantiateFactory", "org.apache.commons.collections4.functors" ], [ "IfClosure", "org.apache.commons.collections4.functors" ], [ "ResettableListIterator", "org.apache.commons.collections4" ], [ "OrderedIterator", "org.apache.commons.collections4" ], [ "ComparatorChain", "org.apache.commons.collections4.comparators" ], [ "BooleanComparator", "org.apache.commons.collections4.comparators" ], [ "ReverseComparator", "org.apache.commons.collections4.comparators" ], [ "ComparableComparator", "org.apache.commons.collections4.comparators" ], [ "TransformingComparator", "org.apache.commons.collections4.comparators" ], [ "FixedOrderComparator", "org.apache.commons.collections4.comparators" ], [ "NullComparator", "org.apache.commons.collections4.comparators" ], [ "CollectionUtils", "org.apache.commons.collections4" ], [ "ListValuedMap", "org.apache.commons.collections4" ], [ "AbstractIterableGetMapDecorator", "org.apache.commons.collections4.splitmap" ], [ "TransformedSplitMap", "org.apache.commons.collections4.splitmap" ], [ "Factory", "org.apache.commons.collections4" ], [ "IterableUtils", "org.apache.commons.collections4" ], [ "Bag", "org.apache.commons.collections4" ], [ "Predicate", "org.apache.commons.collections4" ], [ "SortedBag", "org.apache.commons.collections4" ], [ "TrieUtils", "org.apache.commons.collections4" ], [ "ClosureUtils", "org.apache.commons.collections4" ], [ "PatriciaTrie", "org.apache.commons.collections4.trie" ], [ "UnmodifiableTrie", "org.apache.commons.collections4.trie" ], [ "KeyAnalyzer", "org.apache.commons.collections4.trie" ], [ "AbstractPatriciaTrie", "org.apache.commons.collections4.trie" ], [ "AbstractBitwiseTrie", "org.apache.commons.collections4.trie" ], [ "StringKeyAnalyzer", "org.apache.commons.collections4.trie.analyzer" ], [ "TransformedSortedMap", "org.apache.commons.collections4.map" ], [ "AbstractLinkedMap", "org.apache.commons.collections4.map" ], [ "Flat3Map", "org.apache.commons.collections4.map" ], [ "PredicatedMap", "org.apache.commons.collections4.map" ], [ "FixedSizeSortedMap", "org.apache.commons.collections4.map" ], [ "UnmodifiableSortedMap", "org.apache.commons.collections4.map" ], [ "PredicatedSortedMap", "org.apache.commons.collections4.map" ], [ "DefaultedMap", "org.apache.commons.collections4.map" ], [ "ReferenceIdentityMap", "org.apache.commons.collections4.map" ], [ "AbstractSortedMapDecorator", "org.apache.commons.collections4.map" ], [ "AbstractInputCheckedMapDecorator", "org.apache.commons.collections4.map" ], [ "FixedSizeMap", "org.apache.commons.collections4.map" ], [ "LazySortedMap", "org.apache.commons.collections4.map" ], [ "UnmodifiableOrderedMap", "org.apache.commons.collections4.map" ], [ "CaseInsensitiveMap", "org.apache.commons.collections4.map" ], [ "AbstractHashedMap", "org.apache.commons.collections4.map" ], [ "AbstractOrderedMapDecorator", "org.apache.commons.collections4.map" ], [ "UnmodifiableMap", "org.apache.commons.collections4.map" ], [ "EntrySetToMapIteratorAdapter", "org.apache.commons.collections4.map" ], [ "AbstractIterableMap", "org.apache.commons.collections4.map" ], [ "ListOrderedMap", "org.apache.commons.collections4.map" ], [ "LinkedMap", "org.apache.commons.collections4.map" ], [ "SingletonMap", "org.apache.commons.collections4.map" ], [ "UnmodifiableEntrySet", "org.apache.commons.collections4.map" ], [ "StaticBucketMap", "org.apache.commons.collections4.map" ], [ "AbstractMapDecorator", "org.apache.commons.collections4.map" ], [ "AbstractReferenceMap", "org.apache.commons.collections4.map" ], [ "MultiKeyMap", "org.apache.commons.collections4.map" ], [ "HashedMap", "org.apache.commons.collections4.map" ], [ "LazyMap", "org.apache.commons.collections4.map" ], [ "PassiveExpiringMap", "org.apache.commons.collections4.map" ], [ "MultiValueMap", "org.apache.commons.collections4.map" ], [ "LRUMap", "org.apache.commons.collections4.map" ], [ "ReferenceMap", "org.apache.commons.collections4.map" ], [ "TransformedMap", "org.apache.commons.collections4.map" ], [ "CompositeMap", "org.apache.commons.collections4.map" ], [ "UnmodifiableMapEntry", "org.apache.commons.collections4.keyvalue" ], [ "MultiKey", "org.apache.commons.collections4.keyvalue" ], [ "DefaultMapEntry", "org.apache.commons.collections4.keyvalue" ], [ "DefaultKeyValue", "org.apache.commons.collections4.keyvalue" ], [ "AbstractMapEntryDecorator", "org.apache.commons.collections4.keyvalue" ], [ "AbstractKeyValue", "org.apache.commons.collections4.keyvalue" ], [ "TiedMapEntry", "org.apache.commons.collections4.keyvalue" ], [ "AbstractMapEntry", "org.apache.commons.collections4.keyvalue" ], [ "MultiSetUtils", "org.apache.commons.collections4" ], [ "MapIterator", "org.apache.commons.collections4" ], [ "AbstractMultiValuedMap", "org.apache.commons.collections4.multimap" ], [ "UnmodifiableMultiValuedMap", "org.apache.commons.collections4.multimap" ], [ "HashSetValuedHashMap", "org.apache.commons.collections4.multimap" ], [ "TransformedMultiValuedMap", "org.apache.commons.collections4.multimap" ], [ "AbstractSetValuedMap", "org.apache.commons.collections4.multimap" ], [ "AbstractListValuedMap", "org.apache.commons.collections4.multimap" ], [ "ArrayListValuedHashMap", "org.apache.commons.collections4.multimap" ], [ "AbstractMultiValuedMapDecorator", "org.apache.commons.collections4.multimap" ], [ "LazyList", "org.apache.commons.collections4.list" ], [ "AbstractSerializableListDecorator", "org.apache.commons.collections4.list" ], [ "TreeList", "org.apache.commons.collections4.list" ], [ "SetUniqueList", "org.apache.commons.collections4.list" ], [ "AbstractListDecorator", "org.apache.commons.collections4.list" ], [ "NodeCachingLinkedList", "org.apache.commons.collections4.list" ], [ "UnmodifiableList", "org.apache.commons.collections4.list" ], [ "FixedSizeList", "org.apache.commons.collections4.list" ], [ "TransformedList", "org.apache.commons.collections4.list" ], [ "GrowthList", "org.apache.commons.collections4.list" ], [ "AbstractLinkedList", "org.apache.commons.collections4.list" ], [ "CursorableLinkedList", "org.apache.commons.collections4.list" ], [ "PredicatedList", "org.apache.commons.collections4.list" ], [ "OrderedMap", "org.apache.commons.collections4" ], [ "AbstractQueueDecorator", "org.apache.commons.collections4.queue" ], [ "TransformedQueue", "org.apache.commons.collections4.queue" ], [ "UnmodifiableQueue", "org.apache.commons.collections4.queue" ], [ "CircularFifoQueue", "org.apache.commons.collections4.queue" ], [ "PredicatedQueue", "org.apache.commons.collections4.queue" ], [ "FluentIterable", "org.apache.commons.collections4" ], [ "TransformerUtils", "org.apache.commons.collections4" ], [ "PredicateUtils", "org.apache.commons.collections4" ], [ "ResettableIterator", "org.apache.commons.collections4" ], [ "MultiValuedMap", "org.apache.commons.collections4" ], [ "SetUtils", "org.apache.commons.collections4" ], [ "SortedBidiMap", "org.apache.commons.collections4" ], [ "ArrayStack", "org.apache.commons.collections4" ], [ "Put", "org.apache.commons.collections4" ], [ "OrderedMapIterator", "org.apache.commons.collections4" ], [ "TransformedSet", "org.apache.commons.collections4.set" ], [ "CompositeSet", "org.apache.commons.collections4.set" ], [ "TransformedNavigableSet", "org.apache.commons.collections4.set" ], [ "PredicatedNavigableSet", "org.apache.commons.collections4.set" ], [ "AbstractSetDecorator", "org.apache.commons.collections4.set" ], [ "ListOrderedSet", "org.apache.commons.collections4.set" ], [ "UnmodifiableSet", "org.apache.commons.collections4.set" ], [ "AbstractSerializableSetDecorator", "org.apache.commons.collections4.set" ], [ "MapBackedSet", "org.apache.commons.collections4.set" ], [ "UnmodifiableSortedSet", "org.apache.commons.collections4.set" ], [ "PredicatedSortedSet", "org.apache.commons.collections4.set" ], [ "AbstractSortedSetDecorator", "org.apache.commons.collections4.set" ], [ "PredicatedSet", "org.apache.commons.collections4.set" ], [ "AbstractNavigableSetDecorator", "org.apache.commons.collections4.set" ], [ "UnmodifiableNavigableSet", "org.apache.commons.collections4.set" ], [ "TransformedSortedSet", "org.apache.commons.collections4.set" ], [ "IterableMap", "org.apache.commons.collections4" ], [ "EnumerationUtils", "org.apache.commons.collections4" ], [ "DeleteCommand", "org.apache.commons.collections4.sequence" ], [ "ReplacementsHandler", "org.apache.commons.collections4.sequence" ], [ "InsertCommand", "org.apache.commons.collections4.sequence" ], [ "SequencesComparator", "org.apache.commons.collections4.sequence" ], [ "ReplacementsFinder", "org.apache.commons.collections4.sequence" ], [ "KeepCommand", "org.apache.commons.collections4.sequence" ], [ "EditCommand", "org.apache.commons.collections4.sequence" ], [ "CommandVisitor", "org.apache.commons.collections4.sequence" ], [ "EditScript", "org.apache.commons.collections4.sequence" ], [ "QueueUtils", "org.apache.commons.collections4" ], [ "SetValuedMap", "org.apache.commons.collections4" ], [ "SynchronizedBag", "org.apache.commons.collections4.bag" ], [ "AbstractMapBag", "org.apache.commons.collections4.bag" ], [ "CollectionBag", "org.apache.commons.collections4.bag" ], [ "UnmodifiableBag", "org.apache.commons.collections4.bag" ], [ "PredicatedSortedBag", "org.apache.commons.collections4.bag" ], [ "UnmodifiableSortedBag", "org.apache.commons.collections4.bag" ], [ "HashBag", "org.apache.commons.collections4.bag" ], [ "AbstractBagDecorator", "org.apache.commons.collections4.bag" ], [ "TransformedSortedBag", "org.apache.commons.collections4.bag" ], [ "TreeBag", "org.apache.commons.collections4.bag" ], [ "PredicatedBag", "org.apache.commons.collections4.bag" ], [ "SynchronizedSortedBag", "org.apache.commons.collections4.bag" ], [ "CollectionSortedBag", "org.apache.commons.collections4.bag" ], [ "TransformedBag", "org.apache.commons.collections4.bag" ], [ "AbstractSortedBagDecorator", "org.apache.commons.collections4.bag" ], [ "HashMultiSet", "org.apache.commons.collections4.multiset" ], [ "AbstractMultiSet", "org.apache.commons.collections4.multiset" ], [ "PredicatedMultiSet", "org.apache.commons.collections4.multiset" ], [ "AbstractMultiSetDecorator", "org.apache.commons.collections4.multiset" ], [ "AbstractMapMultiSet", "org.apache.commons.collections4.multiset" ], [ "UnmodifiableMultiSet", "org.apache.commons.collections4.multiset" ], [ "SynchronizedMultiSet", "org.apache.commons.collections4.multiset" ], [ "BagUtils", "org.apache.commons.collections4" ], [ "Unmodifiable", "org.apache.commons.collections4" ], [ "Get", "org.apache.commons.collections4" ], [ "Trie", "org.apache.commons.collections4" ], [ "MultiMap", "org.apache.commons.collections4" ], [ "KeyValue", "org.apache.commons.collections4" ], [ "IteratorChain", "org.apache.commons.collections4.iterators" ], [ "EmptyListIterator", "org.apache.commons.collections4.iterators" ], [ "UnmodifiableOrderedMapIterator", "org.apache.commons.collections4.iterators" ], [ "AbstractListIteratorDecorator", "org.apache.commons.collections4.iterators" ], [ "ZippingIterator", "org.apache.commons.collections4.iterators" ], [ "UnmodifiableIterator", "org.apache.commons.collections4.iterators" ], [ "CollatingIterator", "org.apache.commons.collections4.iterators" ], [ "UniqueFilterIterator", "org.apache.commons.collections4.iterators" ], [ "ReverseListIterator", "org.apache.commons.collections4.iterators" ], [ "BoundedIterator", "org.apache.commons.collections4.iterators" ], [ "AbstractIteratorDecorator", "org.apache.commons.collections4.iterators" ], [ "TransformIterator", "org.apache.commons.collections4.iterators" ], [ "AbstractEmptyIterator", "org.apache.commons.collections4.iterators" ], [ "NodeListIterator", "org.apache.commons.collections4.iterators" ], [ "ArrayListIterator", "org.apache.commons.collections4.iterators" ], [ "LazyIteratorChain", "org.apache.commons.collections4.iterators" ], [ "LoopingListIterator", "org.apache.commons.collections4.iterators" ], [ "PeekingIterator", "org.apache.commons.collections4.iterators" ], [ "ObjectGraphIterator", "org.apache.commons.collections4.iterators" ], [ "ArrayIterator", "org.apache.commons.collections4.iterators" ], [ "PermutationIterator", "org.apache.commons.collections4.iterators" ], [ "SingletonListIterator", "org.apache.commons.collections4.iterators" ], [ "EmptyMapIterator", "org.apache.commons.collections4.iterators" ], [ "ObjectArrayIterator", "org.apache.commons.collections4.iterators" ], [ "EnumerationIterator", "org.apache.commons.collections4.iterators" ], [ "IteratorIterable", "org.apache.commons.collections4.iterators" ], [ "AbstractEmptyMapIterator", "org.apache.commons.collections4.iterators" ], [ "LoopingIterator", "org.apache.commons.collections4.iterators" ], [ "IteratorEnumeration", "org.apache.commons.collections4.iterators" ], [ "SingletonIterator", "org.apache.commons.collections4.iterators" ], [ "ListIteratorWrapper", "org.apache.commons.collections4.iterators" ], [ "SkippingIterator", "org.apache.commons.collections4.iterators" ], [ "EmptyOrderedIterator", "org.apache.commons.collections4.iterators" ], [ "AbstractMapIteratorDecorator", "org.apache.commons.collections4.iterators" ], [ "ObjectArrayListIterator", "org.apache.commons.collections4.iterators" ], [ "UnmodifiableListIterator", "org.apache.commons.collections4.iterators" ], [ "EmptyOrderedMapIterator", "org.apache.commons.collections4.iterators" ], [ "UnmodifiableMapIterator", "org.apache.commons.collections4.iterators" ], [ "EmptyIterator", "org.apache.commons.collections4.iterators" ], [ "EntrySetMapIterator", "org.apache.commons.collections4.iterators" ], [ "PushbackIterator", "org.apache.commons.collections4.iterators" ], [ "FilterIterator", "org.apache.commons.collections4.iterators" ], [ "AbstractUntypedIteratorDecorator", "org.apache.commons.collections4.iterators" ], [ "AbstractOrderedMapIteratorDecorator", "org.apache.commons.collections4.iterators" ], [ "FilterListIterator", "org.apache.commons.collections4.iterators" ], [ "SplitMapUtils", "org.apache.commons.collections4" ], [ "BoundedMap", "org.apache.commons.collections4" ] ],
  "tokensProjectClassesNonPrivateStaticNonVoidMethods" : [ [ "emptyIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> emptyIterator()" ], [ "emptyListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> emptyListIterator()" ], [ "emptyOrderedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> OrderedIterator<E> emptyOrderedIterator()" ], [ "emptyMapIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <K, V> MapIterator<K, V> emptyMapIterator()" ], [ "emptyOrderedMapIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <K, V> OrderedMapIterator<K, V> emptyOrderedMapIterator()" ], [ "singletonIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> singletonIterator(final E object)" ], [ "singletonListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ListIterator<E> singletonListIterator(final E object)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final E... array)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final Object array)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final E[] array, final int start)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final Object array, final int start)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final E[] array, final int start, final int end)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final Object array, final int start, final int end)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final E... array)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final Object array)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final E[] array, final int start)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final Object array, final int start)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final E[] array, final int start, final int end)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final Object array, final int start, final int end)" ], [ "boundedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> BoundedIterator<E> boundedIterator(final Iterator<? extends E> iterator, long max)" ], [ "boundedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> BoundedIterator<E> boundedIterator(final Iterator<? extends E> iterator, long offset, long max)" ], [ "unmodifiableIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> unmodifiableIterator(final Iterator<E> iterator)" ], [ "unmodifiableListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ListIterator<E> unmodifiableListIterator(final ListIterator<E> listIterator)" ], [ "unmodifiableMapIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <K, V> MapIterator<K, V> unmodifiableMapIterator(final MapIterator<K, V> mapIterator)" ], [ "chainedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> chainedIterator(final Iterator<? extends E> iterator1, final Iterator<? extends E> iterator2)" ], [ "chainedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> chainedIterator(final Iterator<? extends E>... iterators)" ], [ "chainedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> chainedIterator(final Collection<Iterator<? extends E>> iterators)" ], [ "collatedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> collatedIterator(final Comparator<? super E> comparator, final Iterator<? extends E> iterator1, final Iterator<? extends E> iterator2)" ], [ "collatedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> collatedIterator(final Comparator<? super E> comparator, final Iterator<? extends E>... iterators)" ], [ "collatedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> collatedIterator(final Comparator<? super E> comparator, final Collection<Iterator<? extends E>> iterators)" ], [ "objectGraphIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> objectGraphIterator(final E root, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <I, O> Iterator<O> transformedIterator(final Iterator<? extends I> iterator, final Transformer<? super I, ? extends O> transform)" ], [ "filteredIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> filteredIterator(final Iterator<? extends E> iterator, final Predicate<? super E> predicate)" ], [ "filteredListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ListIterator<E> filteredListIterator(final ListIterator<? extends E> listIterator, final Predicate<? super E> predicate)" ], [ "loopingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> loopingIterator(final Collection<? extends E> coll)" ], [ "loopingListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> loopingListIterator(final List<E> list)" ], [ "nodeListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static NodeListIterator nodeListIterator(final NodeList nodeList)" ], [ "nodeListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static NodeListIterator nodeListIterator(final Node node)" ], [ "peekingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> peekingIterator(final Iterator<? extends E> iterator)" ], [ "pushbackIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> pushbackIterator(final Iterator<? extends E> iterator)" ], [ "skippingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> SkippingIterator<E> skippingIterator(final Iterator<E> iterator, long offset)" ], [ "zippingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ZippingIterator<E> zippingIterator(final Iterator<? extends E> a, final Iterator<? extends E> b)" ], [ "zippingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ZippingIterator<E> zippingIterator(final Iterator<? extends E> a, final Iterator<? extends E> b, final Iterator<? extends E> c)" ], [ "zippingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ZippingIterator<E> zippingIterator(final Iterator<? extends E>... iterators)" ], [ "asIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> asIterator(final Enumeration<? extends E> enumeration)" ], [ "asIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> asIterator(final Enumeration<? extends E> enumeration, final Collection<? super E> removeCollection)" ], [ "asEnumeration", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Enumeration<E> asEnumeration(final Iterator<? extends E> iterator)" ], [ "asIterable", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterable<E> asIterable(final Iterator<? extends E> iterator)" ], [ "asMultipleUseIterable", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterable<E> asMultipleUseIterable(final Iterator<? extends E> iterator)" ], [ "toListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ListIterator<E> toListIterator(final Iterator<? extends E> iterator)" ], [ "toArray", "org.apache.commons.collections4", "IteratorUtils", "public static Object[] toArray(final Iterator<?> iterator)" ], [ "toArray", "org.apache.commons.collections4", "IteratorUtils", "public static <E> E[] toArray(final Iterator<? extends E> iterator, final Class<E> arrayClass)" ], [ "toList", "org.apache.commons.collections4", "IteratorUtils", "public static <E> List<E> toList(final Iterator<? extends E> iterator)" ], [ "toList", "org.apache.commons.collections4", "IteratorUtils", "public static <E> List<E> toList(final Iterator<? extends E> iterator, final int estimatedSize)" ], [ "getIterator", "org.apache.commons.collections4", "IteratorUtils", "public static Iterator<?> getIterator(final Object obj)" ], [ "forEachButLast", "org.apache.commons.collections4", "IteratorUtils", "public static <E> E forEachButLast(final Iterator<E> iterator, final Closure<? super E> closure)" ], [ "find", "org.apache.commons.collections4", "IteratorUtils", "public static <E> E find(final Iterator<E> iterator, final Predicate<? super E> predicate)" ], [ "indexOf", "org.apache.commons.collections4", "IteratorUtils", "public static <E> int indexOf(final Iterator<E> iterator, final Predicate<? super E> predicate)" ], [ "matchesAny", "org.apache.commons.collections4", "IteratorUtils", "public static <E> boolean matchesAny(final Iterator<E> iterator, final Predicate<? super E> predicate)" ], [ "matchesAll", "org.apache.commons.collections4", "IteratorUtils", "public static <E> boolean matchesAll(final Iterator<E> iterator, final Predicate<? super E> predicate)" ], [ "isEmpty", "org.apache.commons.collections4", "IteratorUtils", "public static boolean isEmpty(final Iterator<?> iterator)" ], [ "contains", "org.apache.commons.collections4", "IteratorUtils", "public static <E> boolean contains(final Iterator<E> iterator, final Object object)" ], [ "get", "org.apache.commons.collections4", "IteratorUtils", "public static <E> E get(final Iterator<E> iterator, final int index)" ], [ "size", "org.apache.commons.collections4", "IteratorUtils", "public static int size(final Iterator<?> iterator)" ], [ "toString", "org.apache.commons.collections4", "IteratorUtils", "public static <E> String toString(final Iterator<E> iterator)" ], [ "toString", "org.apache.commons.collections4", "IteratorUtils", "public static <E> String toString(final Iterator<E> iterator, final Transformer<? super E, String> transformer)" ], [ "toString", "org.apache.commons.collections4", "IteratorUtils", "public static <E> String toString(final Iterator<E> iterator, final Transformer<? super E, String> transformer, final String delimiter, final String prefix, final String suffix)" ], [ "naturalComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E extends Comparable<? super E>> Comparator<E> naturalComparator()" ], [ "chainedComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> Comparator<E> chainedComparator(final Comparator<E>... comparators)" ], [ "chainedComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> Comparator<E> chainedComparator(final Collection<Comparator<E>> comparators)" ], [ "reversedComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> Comparator<E> reversedComparator(final Comparator<E> comparator)" ], [ "booleanComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static Comparator<Boolean> booleanComparator(final boolean trueFirst)" ], [ "nullLowComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> Comparator<E> nullLowComparator(Comparator<E> comparator)" ], [ "nullHighComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> Comparator<E> nullHighComparator(Comparator<E> comparator)" ], [ "transformedComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <I, O> Comparator<I> transformedComparator(Comparator<O> comparator, final Transformer<? super I, ? extends O> transformer)" ], [ "min", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> E min(final E o1, final E o2, Comparator<E> comparator)" ], [ "max", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> E max(final E o1, final E o2, Comparator<E> comparator)" ], [ "unmodifiableBidiMap", "org.apache.commons.collections4.bidimap", "UnmodifiableBidiMap", "public static <K, V> BidiMap<K, V> unmodifiableBidiMap(final BidiMap<? extends K, ? extends V> map)" ], [ "unmodifiableOrderedBidiMap", "org.apache.commons.collections4.bidimap", "UnmodifiableOrderedBidiMap", "public static <K, V> OrderedBidiMap<K, V> unmodifiableOrderedBidiMap(final OrderedBidiMap<? extends K, ? extends V> map)" ], [ "unmodifiableSortedBidiMap", "org.apache.commons.collections4.bidimap", "UnmodifiableSortedBidiMap", "public static <K, V> SortedBidiMap<K, V> unmodifiableSortedBidiMap(final SortedBidiMap<K, ? extends V> map)" ], [ "emptyMultiValuedMap", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> MultiValuedMap<K, V> emptyMultiValuedMap()" ], [ "emptyIfNull", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> MultiValuedMap<K, V> emptyIfNull(final MultiValuedMap<K, V> map)" ], [ "isEmpty", "org.apache.commons.collections4", "MultiMapUtils", "public static boolean isEmpty(final MultiValuedMap<?, ?> map)" ], [ "getCollection", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> Collection<V> getCollection(final MultiValuedMap<K, V> map, final K key)" ], [ "getValuesAsList", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> List<V> getValuesAsList(final MultiValuedMap<K, V> map, final K key)" ], [ "getValuesAsSet", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> Set<V> getValuesAsSet(final MultiValuedMap<K, V> map, final K key)" ], [ "getValuesAsBag", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> Bag<V> getValuesAsBag(final MultiValuedMap<K, V> map, final K key)" ], [ "newListValuedHashMap", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> ListValuedMap<K, V> newListValuedHashMap()" ], [ "newSetValuedHashMap", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> SetValuedMap<K, V> newSetValuedHashMap()" ], [ "unmodifiableMultiValuedMap", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> MultiValuedMap<K, V> unmodifiableMultiValuedMap(final MultiValuedMap<? extends K, ? extends V> map)" ], [ "transformedMultiValuedMap", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> MultiValuedMap<K, V> transformedMultiValuedMap(final MultiValuedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "unmodifiableBoundedCollection", "org.apache.commons.collections4.collection", "UnmodifiableBoundedCollection", "public static <E> BoundedCollection<E> unmodifiableBoundedCollection(final BoundedCollection<? extends E> coll)" ], [ "unmodifiableBoundedCollection", "org.apache.commons.collections4.collection", "UnmodifiableBoundedCollection", "public static <E> BoundedCollection<E> unmodifiableBoundedCollection(Collection<? extends E> coll)" ], [ "transformingCollection", "org.apache.commons.collections4.collection", "TransformedCollection", "public static <E> TransformedCollection<E> transformingCollection(final Collection<E> coll, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedCollection", "org.apache.commons.collections4.collection", "TransformedCollection", "public static <E> TransformedCollection<E> transformedCollection(final Collection<E> collection, final Transformer<? super E, ? extends E> transformer)" ], [ "builder", "org.apache.commons.collections4.collection", "PredicatedCollection", "public static <E> Builder<E> builder(final Predicate<? super E> predicate)" ], [ "notNullBuilder", "org.apache.commons.collections4.collection", "PredicatedCollection", "public static <E> Builder<E> notNullBuilder()" ], [ "predicatedCollection", "org.apache.commons.collections4.collection", "PredicatedCollection", "public static <T> PredicatedCollection<T> predicatedCollection(final Collection<T> coll, final Predicate<? super T> predicate)" ], [ "uniqueIndexedCollection", "org.apache.commons.collections4.collection", "IndexedCollection", "public static <K, C> IndexedCollection<K, C> uniqueIndexedCollection(final Collection<C> coll, final Transformer<C, K> keyTransformer)" ], [ "nonUniqueIndexedCollection", "org.apache.commons.collections4.collection", "IndexedCollection", "public static <K, C> IndexedCollection<K, C> nonUniqueIndexedCollection(final Collection<C> coll, final Transformer<C, K> keyTransformer)" ], [ "synchronizedCollection", "org.apache.commons.collections4.collection", "SynchronizedCollection", "public static <T> SynchronizedCollection<T> synchronizedCollection(final Collection<T> coll)" ], [ "unmodifiableCollection", "org.apache.commons.collections4.collection", "UnmodifiableCollection", "public static <T> Collection<T> unmodifiableCollection(final Collection<? extends T> coll)" ], [ "exceptionFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> exceptionFactory()" ], [ "nullFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> nullFactory()" ], [ "constantFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> constantFactory(final T constantToReturn)" ], [ "prototypeFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> prototypeFactory(final T prototype)" ], [ "instantiateFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> instantiateFactory(final Class<T> classToInstantiate)" ], [ "instantiateFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> instantiateFactory(final Class<T> classToInstantiate, final Class<?>[] paramTypes, final Object[] args)" ], [ "emptyIfNull", "org.apache.commons.collections4", "ListUtils", "public static <T> List<T> emptyIfNull(final List<T> list)" ], [ "defaultIfNull", "org.apache.commons.collections4", "ListUtils", "public static <T> List<T> defaultIfNull(final List<T> list, final List<T> defaultList)" ], [ "intersection", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> intersection(final List<? extends E> list1, final List<? extends E> list2)" ], [ "subtract", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> subtract(final List<E> list1, final List<? extends E> list2)" ], [ "sum", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> sum(final List<? extends E> list1, final List<? extends E> list2)" ], [ "union", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> union(final List<? extends E> list1, final List<? extends E> list2)" ], [ "select", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> select(final Collection<? extends E> inputCollection, final Predicate<? super E> predicate)" ], [ "selectRejected", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> selectRejected(final Collection<? extends E> inputCollection, final Predicate<? super E> predicate)" ], [ "isEqualList", "org.apache.commons.collections4", "ListUtils", "public static boolean isEqualList(final Collection<?> list1, final Collection<?> list2)" ], [ "hashCodeForList", "org.apache.commons.collections4", "ListUtils", "public static int hashCodeForList(final Collection<?> list)" ], [ "retainAll", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> retainAll(final Collection<E> collection, final Collection<?> retain)" ], [ "removeAll", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> removeAll(final Collection<E> collection, final Collection<?> remove)" ], [ "synchronizedList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> synchronizedList(final List<E> list)" ], [ "unmodifiableList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> unmodifiableList(final List<? extends E> list)" ], [ "predicatedList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> predicatedList(final List<E> list, final Predicate<E> predicate)" ], [ "transformedList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> transformedList(final List<E> list, final Transformer<? super E, ? extends E> transformer)" ], [ "lazyList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> lazyList(final List<E> list, final Factory<? extends E> factory)" ], [ "fixedSizeList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> fixedSizeList(final List<E> list)" ], [ "indexOf", "org.apache.commons.collections4", "ListUtils", "public static <E> int indexOf(final List<E> list, final Predicate<E> predicate)" ], [ "longestCommonSubsequence", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> longestCommonSubsequence(final List<E> a, final List<E> b)" ], [ "longestCommonSubsequence", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> longestCommonSubsequence(final List<E> a, final List<E> b, final Equator<? super E> equator)" ], [ "longestCommonSubsequence", "org.apache.commons.collections4", "ListUtils", "public static String longestCommonSubsequence(final CharSequence a, final CharSequence b)" ], [ "partition", "org.apache.commons.collections4", "ListUtils", "public static <T> List<List<T>> partition(final List<T> list, final int size)" ], [ "getObject", "org.apache.commons.collections4", "MapUtils", "public static <K, V> V getObject(final Map<? super K, V> map, final K key)" ], [ "getString", "org.apache.commons.collections4", "MapUtils", "public static <K> String getString(final Map<? super K, ?> map, final K key)" ], [ "getBoolean", "org.apache.commons.collections4", "MapUtils", "public static <K> Boolean getBoolean(final Map<? super K, ?> map, final K key)" ], [ "getNumber", "org.apache.commons.collections4", "MapUtils", "public static <K> Number getNumber(final Map<? super K, ?> map, final K key)" ], [ "getByte", "org.apache.commons.collections4", "MapUtils", "public static <K> Byte getByte(final Map<? super K, ?> map, final K key)" ], [ "getShort", "org.apache.commons.collections4", "MapUtils", "public static <K> Short getShort(final Map<? super K, ?> map, final K key)" ], [ "getInteger", "org.apache.commons.collections4", "MapUtils", "public static <K> Integer getInteger(final Map<? super K, ?> map, final K key)" ], [ "getLong", "org.apache.commons.collections4", "MapUtils", "public static <K> Long getLong(final Map<? super K, ?> map, final K key)" ], [ "getFloat", "org.apache.commons.collections4", "MapUtils", "public static <K> Float getFloat(final Map<? super K, ?> map, final K key)" ], [ "getDouble", "org.apache.commons.collections4", "MapUtils", "public static <K> Double getDouble(final Map<? super K, ?> map, final K key)" ], [ "getMap", "org.apache.commons.collections4", "MapUtils", "public static <K> Map<?, ?> getMap(final Map<? super K, ?> map, final K key)" ], [ "getObject", "org.apache.commons.collections4", "MapUtils", "public static <K, V> V getObject(final Map<K, V> map, final K key, final V defaultValue)" ], [ "getString", "org.apache.commons.collections4", "MapUtils", "public static <K> String getString(final Map<? super K, ?> map, final K key, final String defaultValue)" ], [ "getBoolean", "org.apache.commons.collections4", "MapUtils", "public static <K> Boolean getBoolean(final Map<? super K, ?> map, final K key, final Boolean defaultValue)" ], [ "getNumber", "org.apache.commons.collections4", "MapUtils", "public static <K> Number getNumber(final Map<? super K, ?> map, final K key, final Number defaultValue)" ], [ "getByte", "org.apache.commons.collections4", "MapUtils", "public static <K> Byte getByte(final Map<? super K, ?> map, final K key, final Byte defaultValue)" ], [ "getShort", "org.apache.commons.collections4", "MapUtils", "public static <K> Short getShort(final Map<? super K, ?> map, final K key, final Short defaultValue)" ], [ "getInteger", "org.apache.commons.collections4", "MapUtils", "public static <K> Integer getInteger(final Map<? super K, ?> map, final K key, final Integer defaultValue)" ], [ "getLong", "org.apache.commons.collections4", "MapUtils", "public static <K> Long getLong(final Map<? super K, ?> map, final K key, final Long defaultValue)" ], [ "getFloat", "org.apache.commons.collections4", "MapUtils", "public static <K> Float getFloat(final Map<? super K, ?> map, final K key, final Float defaultValue)" ], [ "getDouble", "org.apache.commons.collections4", "MapUtils", "public static <K> Double getDouble(final Map<? super K, ?> map, final K key, final Double defaultValue)" ], [ "getMap", "org.apache.commons.collections4", "MapUtils", "public static <K> Map<?, ?> getMap(final Map<? super K, ?> map, final K key, final Map<?, ?> defaultValue)" ], [ "getBooleanValue", "org.apache.commons.collections4", "MapUtils", "public static <K> boolean getBooleanValue(final Map<? super K, ?> map, final K key)" ], [ "getByteValue", "org.apache.commons.collections4", "MapUtils", "public static <K> byte getByteValue(final Map<? super K, ?> map, final K key)" ], [ "getShortValue", "org.apache.commons.collections4", "MapUtils", "public static <K> short getShortValue(final Map<? super K, ?> map, final K key)" ], [ "getIntValue", "org.apache.commons.collections4", "MapUtils", "public static <K> int getIntValue(final Map<? super K, ?> map, final K key)" ], [ "getLongValue", "org.apache.commons.collections4", "MapUtils", "public static <K> long getLongValue(final Map<? super K, ?> map, final K key)" ], [ "getFloatValue", "org.apache.commons.collections4", "MapUtils", "public static <K> float getFloatValue(final Map<? super K, ?> map, final K key)" ], [ "getDoubleValue", "org.apache.commons.collections4", "MapUtils", "public static <K> double getDoubleValue(final Map<? super K, ?> map, final K key)" ], [ "getBooleanValue", "org.apache.commons.collections4", "MapUtils", "public static <K> boolean getBooleanValue(final Map<? super K, ?> map, final K key, final boolean defaultValue)" ], [ "getByteValue", "org.apache.commons.collections4", "MapUtils", "public static <K> byte getByteValue(final Map<? super K, ?> map, final K key, final byte defaultValue)" ], [ "getShortValue", "org.apache.commons.collections4", "MapUtils", "public static <K> short getShortValue(final Map<? super K, ?> map, final K key, final short defaultValue)" ], [ "getIntValue", "org.apache.commons.collections4", "MapUtils", "public static <K> int getIntValue(final Map<? super K, ?> map, final K key, final int defaultValue)" ], [ "getLongValue", "org.apache.commons.collections4", "MapUtils", "public static <K> long getLongValue(final Map<? super K, ?> map, final K key, final long defaultValue)" ], [ "getFloatValue", "org.apache.commons.collections4", "MapUtils", "public static <K> float getFloatValue(final Map<? super K, ?> map, final K key, final float defaultValue)" ], [ "getDoubleValue", "org.apache.commons.collections4", "MapUtils", "public static <K> double getDoubleValue(final Map<? super K, ?> map, final K key, final double defaultValue)" ], [ "toProperties", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Properties toProperties(final Map<K, V> map)" ], [ "toMap", "org.apache.commons.collections4", "MapUtils", "public static Map<String, Object> toMap(final ResourceBundle resourceBundle)" ], [ "invertMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Map<V, K> invertMap(final Map<K, V> map)" ], [ "putAll", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Map<K, V> putAll(final Map<K, V> map, final Object[] array)" ], [ "emptyIfNull", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Map<K, V> emptyIfNull(final Map<K, V> map)" ], [ "isEmpty", "org.apache.commons.collections4", "MapUtils", "public static boolean isEmpty(final Map<?, ?> map)" ], [ "isNotEmpty", "org.apache.commons.collections4", "MapUtils", "public static boolean isNotEmpty(final Map<?, ?> map)" ], [ "synchronizedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Map<K, V> synchronizedMap(final Map<K, V> map)" ], [ "unmodifiableMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Map<K, V> unmodifiableMap(final Map<? extends K, ? extends V> map)" ], [ "predicatedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> predicatedMap(final Map<K, V> map, final Predicate<? super K> keyPred, final Predicate<? super V> valuePred)" ], [ "transformedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> transformedMap(final Map<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "fixedSizeMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> fixedSizeMap(final Map<K, V> map)" ], [ "lazyMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> lazyMap(final Map<K, V> map, final Factory<? extends V> factory)" ], [ "lazyMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> lazyMap(final Map<K, V> map, final Transformer<? super K, ? extends V> transformerFactory)" ], [ "orderedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> OrderedMap<K, V> orderedMap(final Map<K, V> map)" ], [ "multiValueMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> MultiValueMap<K, V> multiValueMap(final Map<K, ? super Collection<V>> map)" ], [ "multiValueMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V, C extends Collection<V>> MultiValueMap<K, V> multiValueMap(final Map<K, C> map, final Class<C> collectionClass)" ], [ "multiValueMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V, C extends Collection<V>> MultiValueMap<K, V> multiValueMap(final Map<K, C> map, final Factory<C> collectionFactory)" ], [ "synchronizedSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> synchronizedSortedMap(final SortedMap<K, V> map)" ], [ "unmodifiableSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> unmodifiableSortedMap(final SortedMap<K, ? extends V> map)" ], [ "predicatedSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> predicatedSortedMap(final SortedMap<K, V> map, final Predicate<? super K> keyPred, final Predicate<? super V> valuePred)" ], [ "transformedSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> transformedSortedMap(final SortedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "fixedSizeSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> fixedSizeSortedMap(final SortedMap<K, V> map)" ], [ "lazySortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> lazySortedMap(final SortedMap<K, V> map, final Factory<? extends V> factory)" ], [ "lazySortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> lazySortedMap(final SortedMap<K, V> map, final Transformer<? super K, ? extends V> transformerFactory)" ], [ "iterableMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> iterableMap(final Map<K, V> map)" ], [ "iterableSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableSortedMap<K, V> iterableSortedMap(final SortedMap<K, V> sortedMap)" ], [ "defaultEquator", "org.apache.commons.collections4.functors", "DefaultEquator", "public static <T> DefaultEquator<T> defaultEquator()" ], [ "stringValueTransformer", "org.apache.commons.collections4.functors", "StringValueTransformer", "public static <T> Transformer<T, String> stringValueTransformer()" ], [ "ifTransformer", "org.apache.commons.collections4.functors", "IfTransformer", "public static <I, O> Transformer<I, O> ifTransformer(final Predicate<? super I> predicate, final Transformer<? super I, ? extends O> trueTransformer, final Transformer<? super I, ? extends O> falseTransformer)" ], [ "ifTransformer", "org.apache.commons.collections4.functors", "IfTransformer", "public static <T> Transformer<T, T> ifTransformer(final Predicate<? super T> predicate, final Transformer<? super T, ? extends T> trueTransformer)" ], [ "identityPredicate", "org.apache.commons.collections4.functors", "IdentityPredicate", "public static <T> Predicate<T> identityPredicate(final T object)" ], [ "exceptionClosure", "org.apache.commons.collections4.functors", "ExceptionClosure", "public static <E> Closure<E> exceptionClosure()" ], [ "nopClosure", "org.apache.commons.collections4.functors", "NOPClosure", "public static <E> Closure<E> nopClosure()" ], [ "closureTransformer", "org.apache.commons.collections4.functors", "ClosureTransformer", "public static <T> Transformer<T, T> closureTransformer(final Closure<? super T> closure)" ], [ "copy", "org.apache.commons.collections4.functors", "FunctorUtils", "static <T> Predicate<T>[] copy(final Predicate<? super T>... predicates)" ], [ "coerce", "org.apache.commons.collections4.functors", "FunctorUtils", "static <T> Predicate<T> coerce(final Predicate<? super T> predicate)" ], [ "validate", "org.apache.commons.collections4.functors", "FunctorUtils", "static <T> Predicate<? super T>[] validate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "copy", "org.apache.commons.collections4.functors", "FunctorUtils", "static <E> Closure<E>[] copy(final Closure<? super E>... closures)" ], [ "coerce", "org.apache.commons.collections4.functors", "FunctorUtils", "static <T> Closure<T> coerce(final Closure<? super T> closure)" ], [ "copy", "org.apache.commons.collections4.functors", "FunctorUtils", "static <I, O> Transformer<I, O>[] copy(final Transformer<? super I, ? extends O>... transformers)" ], [ "coerce", "org.apache.commons.collections4.functors", "FunctorUtils", "static <I, O> Transformer<I, O> coerce(final Transformer<? super I, ? extends O> transformer)" ], [ "transformerPredicate", "org.apache.commons.collections4.functors", "TransformerPredicate", "public static <T> Predicate<T> transformerPredicate(final Transformer<? super T, Boolean> transformer)" ], [ "nullPredicate", "org.apache.commons.collections4.functors", "NullPredicate", "public static <T> Predicate<T> nullPredicate()" ], [ "nullTransformer", "org.apache.commons.collections4.functors", "ConstantTransformer", "public static <I, O> Transformer<I, O> nullTransformer()" ], [ "constantTransformer", "org.apache.commons.collections4.functors", "ConstantTransformer", "public static <I, O> Transformer<I, O> constantTransformer(final O constantToReturn)" ], [ "predicateTransformer", "org.apache.commons.collections4.functors", "PredicateTransformer", "public static <T> Transformer<T, Boolean> predicateTransformer(final Predicate<? super T> predicate)" ], [ "whileClosure", "org.apache.commons.collections4.functors", "WhileClosure", "public static <E> Closure<E> whileClosure(final Predicate<? super E> predicate, final Closure<? super E> closure, final boolean doLoop)" ], [ "forClosure", "org.apache.commons.collections4.functors", "ForClosure", "public static <E> Closure<E> forClosure(final int count, final Closure<? super E> closure)" ], [ "nullIsTruePredicate", "org.apache.commons.collections4.functors", "NullIsTruePredicate", "public static <T> Predicate<T> nullIsTruePredicate(final Predicate<? super T> predicate)" ], [ "transformedPredicate", "org.apache.commons.collections4.functors", "TransformedPredicate", "public static <T> Predicate<T> transformedPredicate(final Transformer<? super T, ? extends T> transformer, final Predicate<? super T> predicate)" ], [ "nonePredicate", "org.apache.commons.collections4.functors", "NonePredicate", "public static <T> Predicate<T> nonePredicate(final Predicate<? super T>... predicates)" ], [ "nonePredicate", "org.apache.commons.collections4.functors", "NonePredicate", "public static <T> Predicate<T> nonePredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "exceptionTransformer", "org.apache.commons.collections4.functors", "ExceptionTransformer", "public static <I, O> Transformer<I, O> exceptionTransformer()" ], [ "switchTransformer", "org.apache.commons.collections4.functors", "SwitchTransformer", "public static <I, O> Transformer<I, O> switchTransformer(final Predicate<? super I>[] predicates, final Transformer<? super I, ? extends O>[] transformers, final Transformer<? super I, ? extends O> defaultTransformer)" ], [ "switchTransformer", "org.apache.commons.collections4.functors", "SwitchTransformer", "public static <I, O> Transformer<I, O> switchTransformer(final Map<? extends Predicate<? super I>, ? extends Transformer<? super I, ? extends O>> map)" ], [ "transformerClosure", "org.apache.commons.collections4.functors", "TransformerClosure", "public static <E> Closure<E> transformerClosure(final Transformer<? super E, ?> transformer)" ], [ "orPredicate", "org.apache.commons.collections4.functors", "OrPredicate", "public static <T> Predicate<T> orPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "nopTransformer", "org.apache.commons.collections4.functors", "NOPTransformer", "public static <T> Transformer<T, T> nopTransformer()" ], [ "mapTransformer", "org.apache.commons.collections4.functors", "MapTransformer", "public static <I, O> Transformer<I, O> mapTransformer(final Map<? super I, ? extends O> map)" ], [ "exceptionFactory", "org.apache.commons.collections4.functors", "ExceptionFactory", "public static <T> Factory<T> exceptionFactory()" ], [ "chainedClosure", "org.apache.commons.collections4.functors", "ChainedClosure", "public static <E> Closure<E> chainedClosure(final Closure<? super E>... closures)" ], [ "chainedClosure", "org.apache.commons.collections4.functors", "ChainedClosure", "public static <E> Closure<E> chainedClosure(final Collection<? extends Closure<? super E>> closures)" ], [ "andPredicate", "org.apache.commons.collections4.functors", "AndPredicate", "public static <T> Predicate<T> andPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "prototypeFactory", "org.apache.commons.collections4.functors", "PrototypeFactory", "public static <T> Factory<T> prototypeFactory(final T prototype)" ], [ "exceptionPredicate", "org.apache.commons.collections4.functors", "ExceptionPredicate", "public static <T> Predicate<T> exceptionPredicate()" ], [ "instanceOfPredicate", "org.apache.commons.collections4.functors", "InstanceofPredicate", "public static Predicate<Object> instanceOfPredicate(final Class<?> type)" ], [ "invokerTransformer", "org.apache.commons.collections4.functors", "InvokerTransformer", "public static <I, O> Transformer<I, O> invokerTransformer(final String methodName)" ], [ "invokerTransformer", "org.apache.commons.collections4.functors", "InvokerTransformer", "public static <I, O> Transformer<I, O> invokerTransformer(final String methodName, final Class<?>[] paramTypes, final Object[] args)" ], [ "falsePredicate", "org.apache.commons.collections4.functors", "FalsePredicate", "public static <T> Predicate<T> falsePredicate()" ], [ "cloneTransformer", "org.apache.commons.collections4.functors", "CloneTransformer", "public static <T> Transformer<T, T> cloneTransformer()" ], [ "notPredicate", "org.apache.commons.collections4.functors", "NotPredicate", "public static <T> Predicate<T> notPredicate(final Predicate<? super T> predicate)" ], [ "constantFactory", "org.apache.commons.collections4.functors", "ConstantFactory", "public static <T> Factory<T> constantFactory(final T constantToReturn)" ], [ "chainedTransformer", "org.apache.commons.collections4.functors", "ChainedTransformer", "public static <T> Transformer<T, T> chainedTransformer(final Transformer<? super T, ? extends T>... transformers)" ], [ "chainedTransformer", "org.apache.commons.collections4.functors", "ChainedTransformer", "public static <T> Transformer<T, T> chainedTransformer(final Collection<? extends Transformer<? super T, ? extends T>> transformers)" ], [ "comparatorPredicate", "org.apache.commons.collections4.functors", "ComparatorPredicate", "public static <T> Predicate<T> comparatorPredicate(final T object, final Comparator<T> comparator)" ], [ "comparatorPredicate", "org.apache.commons.collections4.functors", "ComparatorPredicate", "public static <T> Predicate<T> comparatorPredicate(final T object, final Comparator<T> comparator, final Criterion criterion)" ], [ "allPredicate", "org.apache.commons.collections4.functors", "AllPredicate", "public static <T> Predicate<T> allPredicate(final Predicate<? super T>... predicates)" ], [ "allPredicate", "org.apache.commons.collections4.functors", "AllPredicate", "public static <T> Predicate<T> allPredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "nullIsFalsePredicate", "org.apache.commons.collections4.functors", "NullIsFalsePredicate", "public static <T> Predicate<T> nullIsFalsePredicate(final Predicate<? super T> predicate)" ], [ "nullIsExceptionPredicate", "org.apache.commons.collections4.functors", "NullIsExceptionPredicate", "public static <T> Predicate<T> nullIsExceptionPredicate(final Predicate<? super T> predicate)" ], [ "anyPredicate", "org.apache.commons.collections4.functors", "AnyPredicate", "public static <T> Predicate<T> anyPredicate(final Predicate<? super T>... predicates)" ], [ "anyPredicate", "org.apache.commons.collections4.functors", "AnyPredicate", "public static <T> Predicate<T> anyPredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "truePredicate", "org.apache.commons.collections4.functors", "TruePredicate", "public static <T> Predicate<T> truePredicate()" ], [ "factoryTransformer", "org.apache.commons.collections4.functors", "FactoryTransformer", "public static <I, O> Transformer<I, O> factoryTransformer(final Factory<? extends O> factory)" ], [ "notNullPredicate", "org.apache.commons.collections4.functors", "NotNullPredicate", "public static <T> Predicate<T> notNullPredicate()" ], [ "switchClosure", "org.apache.commons.collections4.functors", "SwitchClosure", "public static <E> Closure<E> switchClosure(final Predicate<? super E>[] predicates, final Closure<? super E>[] closures, final Closure<? super E> defaultClosure)" ], [ "switchClosure", "org.apache.commons.collections4.functors", "SwitchClosure", "public static <E> Closure<E> switchClosure(final Map<Predicate<E>, Closure<E>> predicatesAndClosures)" ], [ "uniquePredicate", "org.apache.commons.collections4.functors", "UniquePredicate", "public static <T> Predicate<T> uniquePredicate()" ], [ "instantiateTransformer", "org.apache.commons.collections4.functors", "InstantiateTransformer", "public static <T> Transformer<Class<? extends T>, T> instantiateTransformer()" ], [ "instantiateTransformer", "org.apache.commons.collections4.functors", "InstantiateTransformer", "public static <T> Transformer<Class<? extends T>, T> instantiateTransformer(final Class<?>[] paramTypes, final Object[] args)" ], [ "onePredicate", "org.apache.commons.collections4.functors", "OnePredicate", "public static <T> Predicate<T> onePredicate(final Predicate<? super T>... predicates)" ], [ "onePredicate", "org.apache.commons.collections4.functors", "OnePredicate", "public static <T> Predicate<T> onePredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "equalPredicate", "org.apache.commons.collections4.functors", "EqualPredicate", "public static <T> Predicate<T> equalPredicate(final T object)" ], [ "equalPredicate", "org.apache.commons.collections4.functors", "EqualPredicate", "public static <T> Predicate<T> equalPredicate(final T object, final Equator<T> equator)" ], [ "instantiateFactory", "org.apache.commons.collections4.functors", "InstantiateFactory", "public static <T> Factory<T> instantiateFactory(final Class<T> classToInstantiate, final Class<?>[] paramTypes, final Object[] args)" ], [ "ifClosure", "org.apache.commons.collections4.functors", "IfClosure", "public static <E> Closure<E> ifClosure(final Predicate<? super E> predicate, final Closure<? super E> trueClosure)" ], [ "ifClosure", "org.apache.commons.collections4.functors", "IfClosure", "public static <E> Closure<E> ifClosure(final Predicate<? super E> predicate, final Closure<? super E> trueClosure, final Closure<? super E> falseClosure)" ], [ "getTrueFirstComparator", "org.apache.commons.collections4.comparators", "BooleanComparator", "public static BooleanComparator getTrueFirstComparator()" ], [ "getFalseFirstComparator", "org.apache.commons.collections4.comparators", "BooleanComparator", "public static BooleanComparator getFalseFirstComparator()" ], [ "booleanComparator", "org.apache.commons.collections4.comparators", "BooleanComparator", "public static BooleanComparator booleanComparator(final boolean trueFirst)" ], [ "comparableComparator", "org.apache.commons.collections4.comparators", "ComparableComparator", "public static <E extends Comparable<? super E>> ComparableComparator<E> comparableComparator()" ], [ "emptyCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <T> Collection<T> emptyCollection()" ], [ "emptyIfNull", "org.apache.commons.collections4", "CollectionUtils", "public static <T> Collection<T> emptyIfNull(final Collection<T> collection)" ], [ "union", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> union(final Iterable<? extends O> a, final Iterable<? extends O> b)" ], [ "intersection", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> intersection(final Iterable<? extends O> a, final Iterable<? extends O> b)" ], [ "disjunction", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> disjunction(final Iterable<? extends O> a, final Iterable<? extends O> b)" ], [ "subtract", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> subtract(final Iterable<? extends O> a, final Iterable<? extends O> b)" ], [ "subtract", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> subtract(final Iterable<? extends O> a, final Iterable<? extends O> b, final Predicate<O> p)" ], [ "containsAll", "org.apache.commons.collections4", "CollectionUtils", "public static boolean containsAll(final Collection<?> coll1, final Collection<?> coll2)" ], [ "containsAny", "org.apache.commons.collections4", "CollectionUtils", "public static boolean containsAny(final Collection<?> coll1, final Collection<?> coll2)" ], [ "getCardinalityMap", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Map<O, Integer> getCardinalityMap(final Iterable<? extends O> coll)" ], [ "isSubCollection", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isSubCollection(final Collection<?> a, final Collection<?> b)" ], [ "isProperSubCollection", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isProperSubCollection(final Collection<?> a, final Collection<?> b)" ], [ "isEqualCollection", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isEqualCollection(final Collection<?> a, final Collection<?> b)" ], [ "isEqualCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <E> boolean isEqualCollection(final Collection<? extends E> a, final Collection<? extends E> b, final Equator<? super E> equator)" ], [ "cardinality", "org.apache.commons.collections4", "CollectionUtils", "public static <O> int cardinality(final O obj, final Iterable<? super O> coll)" ], [ "find", "org.apache.commons.collections4", "CollectionUtils", "public static <T> T find(final Iterable<T> collection, final Predicate<? super T> predicate)" ], [ "forAllDo", "org.apache.commons.collections4", "CollectionUtils", "public static <T, C extends Closure<? super T>> C forAllDo(final Iterable<T> collection, final C closure)" ], [ "forAllDo", "org.apache.commons.collections4", "CollectionUtils", "public static <T, C extends Closure<? super T>> C forAllDo(final Iterator<T> iterator, final C closure)" ], [ "forAllButLastDo", "org.apache.commons.collections4", "CollectionUtils", "public static <T, C extends Closure<? super T>> T forAllButLastDo(final Iterable<T> collection, final C closure)" ], [ "forAllButLastDo", "org.apache.commons.collections4", "CollectionUtils", "public static <T, C extends Closure<? super T>> T forAllButLastDo(final Iterator<T> iterator, final C closure)" ], [ "filter", "org.apache.commons.collections4", "CollectionUtils", "public static <T> boolean filter(final Iterable<T> collection, final Predicate<? super T> predicate)" ], [ "filterInverse", "org.apache.commons.collections4", "CollectionUtils", "public static <T> boolean filterInverse(final Iterable<T> collection, final Predicate<? super T> predicate)" ], [ "countMatches", "org.apache.commons.collections4", "CollectionUtils", "public static <C> int countMatches(final Iterable<C> input, final Predicate<? super C> predicate)" ], [ "exists", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean exists(final Iterable<C> input, final Predicate<? super C> predicate)" ], [ "matchesAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean matchesAll(final Iterable<C> input, final Predicate<? super C> predicate)" ], [ "select", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> select(final Iterable<? extends O> inputCollection, final Predicate<? super O> predicate)" ], [ "select", "org.apache.commons.collections4", "CollectionUtils", "public static <O, R extends Collection<? super O>> R select(final Iterable<? extends O> inputCollection, final Predicate<? super O> predicate, final R outputCollection)" ], [ "select", "org.apache.commons.collections4", "CollectionUtils", "public static <O, R extends Collection<? super O>> R select(final Iterable<? extends O> inputCollection, final Predicate<? super O> predicate, R outputCollection, R rejectedCollection)" ], [ "selectRejected", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> selectRejected(final Iterable<? extends O> inputCollection, final Predicate<? super O> predicate)" ], [ "selectRejected", "org.apache.commons.collections4", "CollectionUtils", "public static <O, R extends Collection<? super O>> R selectRejected(final Iterable<? extends O> inputCollection, final Predicate<? super O> predicate, final R outputCollection)" ], [ "collect", "org.apache.commons.collections4", "CollectionUtils", "public static <I, O> Collection<O> collect(final Iterable<I> inputCollection, final Transformer<? super I, ? extends O> transformer)" ], [ "collect", "org.apache.commons.collections4", "CollectionUtils", "public static <I, O> Collection<O> collect(final Iterator<I> inputIterator, final Transformer<? super I, ? extends O> transformer)" ], [ "collect", "org.apache.commons.collections4", "CollectionUtils", "public static <I, O, R extends Collection<? super O>> R collect(final Iterable<? extends I> inputCollection, final Transformer<? super I, ? extends O> transformer, final R outputCollection)" ], [ "collect", "org.apache.commons.collections4", "CollectionUtils", "public static <I, O, R extends Collection<? super O>> R collect(final Iterator<? extends I> inputIterator, final Transformer<? super I, ? extends O> transformer, final R outputCollection)" ], [ "addIgnoreNull", "org.apache.commons.collections4", "CollectionUtils", "public static <T> boolean addIgnoreNull(final Collection<T> collection, final T object)" ], [ "addAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean addAll(final Collection<C> collection, final Iterable<? extends C> iterable)" ], [ "addAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean addAll(final Collection<C> collection, final Iterator<? extends C> iterator)" ], [ "addAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean addAll(final Collection<C> collection, final Enumeration<? extends C> enumeration)" ], [ "addAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean addAll(final Collection<C> collection, final C[] elements)" ], [ "get", "org.apache.commons.collections4", "CollectionUtils", "public static <T> T get(final Iterator<T> iterator, final int index)" ], [ "get", "org.apache.commons.collections4", "CollectionUtils", "public static <T> T get(final Iterable<T> iterable, final int index)" ], [ "get", "org.apache.commons.collections4", "CollectionUtils", "public static Object get(final Object object, final int index)" ], [ "get", "org.apache.commons.collections4", "CollectionUtils", "public static <K, V> Map.Entry<K, V> get(final Map<K, V> map, final int index)" ], [ "size", "org.apache.commons.collections4", "CollectionUtils", "public static int size(final Object object)" ], [ "sizeIsEmpty", "org.apache.commons.collections4", "CollectionUtils", "public static boolean sizeIsEmpty(final Object object)" ], [ "isEmpty", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isEmpty(final Collection<?> coll)" ], [ "isNotEmpty", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isNotEmpty(final Collection<?> coll)" ], [ "isFull", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isFull(final Collection<? extends Object> coll)" ], [ "maxSize", "org.apache.commons.collections4", "CollectionUtils", "public static int maxSize(final Collection<? extends Object> coll)" ], [ "collate", "org.apache.commons.collections4", "CollectionUtils", "public static <O extends Comparable<? super O>> List<O> collate(Iterable<? extends O> a, Iterable<? extends O> b)" ], [ "collate", "org.apache.commons.collections4", "CollectionUtils", "public static <O extends Comparable<? super O>> List<O> collate(final Iterable<? extends O> a, final Iterable<? extends O> b, final boolean includeDuplicates)" ], [ "collate", "org.apache.commons.collections4", "CollectionUtils", "public static <O> List<O> collate(final Iterable<? extends O> a, final Iterable<? extends O> b, final Comparator<? super O> c)" ], [ "collate", "org.apache.commons.collections4", "CollectionUtils", "public static <O> List<O> collate(final Iterable<? extends O> a, final Iterable<? extends O> b, final Comparator<? super O> c, final boolean includeDuplicates)" ], [ "permutations", "org.apache.commons.collections4", "CollectionUtils", "public static <E> Collection<List<E>> permutations(final Collection<E> collection)" ], [ "retainAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> Collection<C> retainAll(final Collection<C> collection, final Collection<?> retain)" ], [ "retainAll", "org.apache.commons.collections4", "CollectionUtils", "public static <E> Collection<E> retainAll(final Iterable<E> collection, final Iterable<? extends E> retain, final Equator<? super E> equator)" ], [ "removeAll", "org.apache.commons.collections4", "CollectionUtils", "public static <E> Collection<E> removeAll(final Collection<E> collection, final Collection<?> remove)" ], [ "removeAll", "org.apache.commons.collections4", "CollectionUtils", "public static <E> Collection<E> removeAll(final Iterable<E> collection, final Iterable<? extends E> remove, final Equator<? super E> equator)" ], [ "synchronizedCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <C> Collection<C> synchronizedCollection(final Collection<C> collection)" ], [ "unmodifiableCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <C> Collection<C> unmodifiableCollection(final Collection<? extends C> collection)" ], [ "predicatedCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <C> Collection<C> predicatedCollection(final Collection<C> collection, final Predicate<? super C> predicate)" ], [ "transformingCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <E> Collection<E> transformingCollection(final Collection<E> collection, final Transformer<? super E, ? extends E> transformer)" ], [ "extractSingleton", "org.apache.commons.collections4", "CollectionUtils", "public static <E> E extractSingleton(final Collection<E> collection)" ], [ "transformingMap", "org.apache.commons.collections4.splitmap", "TransformedSplitMap", "public static <J, K, U, V> TransformedSplitMap<J, K, U, V> transformingMap(final Map<K, V> map, final Transformer<? super J, ? extends K> keyTransformer, final Transformer<? super U, ? extends V> valueTransformer)" ], [ "emptyIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> emptyIterable()" ], [ "chainedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> chainedIterable(final Iterable<? extends E> a, final Iterable<? extends E> b)" ], [ "chainedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> chainedIterable(final Iterable<? extends E> a, final Iterable<? extends E> b, final Iterable<? extends E> c)" ], [ "chainedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> chainedIterable(final Iterable<? extends E> a, final Iterable<? extends E> b, final Iterable<? extends E> c, final Iterable<? extends E> d)" ], [ "chainedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> chainedIterable(final Iterable<? extends E>... iterables)" ], [ "collatedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> collatedIterable(final Iterable<? extends E> a, final Iterable<? extends E> b)" ], [ "collatedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> collatedIterable(final Comparator<? super E> comparator, final Iterable<? extends E> a, final Iterable<? extends E> b)" ], [ "filteredIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> filteredIterable(final Iterable<E> iterable, final Predicate<? super E> predicate)" ], [ "boundedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> boundedIterable(final Iterable<E> iterable, final long maxSize)" ], [ "loopingIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> loopingIterable(final Iterable<E> iterable)" ], [ "reversedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> reversedIterable(final Iterable<E> iterable)" ], [ "skippingIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> skippingIterable(final Iterable<E> iterable, final long elementsToSkip)" ], [ "transformedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <I, O> Iterable<O> transformedIterable(final Iterable<I> iterable, final Transformer<? super I, ? extends O> transformer)" ], [ "uniqueIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> uniqueIterable(final Iterable<E> iterable)" ], [ "unmodifiableIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> unmodifiableIterable(final Iterable<E> iterable)" ], [ "zippingIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> zippingIterable(final Iterable<? extends E> a, final Iterable<? extends E> b)" ], [ "zippingIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> zippingIterable(final Iterable<? extends E> first, final Iterable<? extends E>... others)" ], [ "emptyIfNull", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> emptyIfNull(final Iterable<E> iterable)" ], [ "forEachButLast", "org.apache.commons.collections4", "IterableUtils", "public static <E> E forEachButLast(final Iterable<E> iterable, final Closure<? super E> closure)" ], [ "find", "org.apache.commons.collections4", "IterableUtils", "public static <E> E find(final Iterable<E> iterable, final Predicate<? super E> predicate)" ], [ "indexOf", "org.apache.commons.collections4", "IterableUtils", "public static <E> int indexOf(final Iterable<E> iterable, final Predicate<? super E> predicate)" ], [ "matchesAll", "org.apache.commons.collections4", "IterableUtils", "public static <E> boolean matchesAll(final Iterable<E> iterable, final Predicate<? super E> predicate)" ], [ "matchesAny", "org.apache.commons.collections4", "IterableUtils", "public static <E> boolean matchesAny(final Iterable<E> iterable, final Predicate<? super E> predicate)" ], [ "countMatches", "org.apache.commons.collections4", "IterableUtils", "public static <E> long countMatches(final Iterable<E> input, final Predicate<? super E> predicate)" ], [ "isEmpty", "org.apache.commons.collections4", "IterableUtils", "public static boolean isEmpty(final Iterable<?> iterable)" ], [ "contains", "org.apache.commons.collections4", "IterableUtils", "public static <E> boolean contains(final Iterable<E> iterable, final Object object)" ], [ "contains", "org.apache.commons.collections4", "IterableUtils", "public static <E> boolean contains(final Iterable<? extends E> iterable, final E object, final Equator<? super E> equator)" ], [ "frequency", "org.apache.commons.collections4", "IterableUtils", "public static <E, T extends E> int frequency(final Iterable<E> iterable, final T obj)" ], [ "get", "org.apache.commons.collections4", "IterableUtils", "public static <T> T get(final Iterable<T> iterable, final int index)" ], [ "size", "org.apache.commons.collections4", "IterableUtils", "public static int size(final Iterable<?> iterable)" ], [ "partition", "org.apache.commons.collections4", "IterableUtils", "public static <O> List<List<O>> partition(final Iterable<? extends O> iterable, final Predicate<? super O> predicate)" ], [ "partition", "org.apache.commons.collections4", "IterableUtils", "public static <O> List<List<O>> partition(final Iterable<? extends O> iterable, final Predicate<? super O>... predicates)" ], [ "partition", "org.apache.commons.collections4", "IterableUtils", "public static <O, R extends Collection<O>> List<R> partition(final Iterable<? extends O> iterable, final Factory<R> partitionFactory, final Predicate<? super O>... predicates)" ], [ "toList", "org.apache.commons.collections4", "IterableUtils", "public static <E> List<E> toList(final Iterable<E> iterable)" ], [ "toString", "org.apache.commons.collections4", "IterableUtils", "public static <E> String toString(final Iterable<E> iterable)" ], [ "toString", "org.apache.commons.collections4", "IterableUtils", "public static <E> String toString(final Iterable<E> iterable, final Transformer<? super E, String> transformer)" ], [ "toString", "org.apache.commons.collections4", "IterableUtils", "public static <E> String toString(final Iterable<E> iterable, final Transformer<? super E, String> transformer, final String delimiter, final String prefix, final String suffix)" ], [ "unmodifiableTrie", "org.apache.commons.collections4", "TrieUtils", "public static <K, V> Trie<K, V> unmodifiableTrie(final Trie<K, ? extends V> trie)" ], [ "exceptionClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> exceptionClosure()" ], [ "nopClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> nopClosure()" ], [ "asClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> asClosure(final Transformer<? super E, ?> transformer)" ], [ "forClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> forClosure(final int count, final Closure<? super E> closure)" ], [ "whileClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> whileClosure(final Predicate<? super E> predicate, final Closure<? super E> closure)" ], [ "doWhileClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> doWhileClosure(final Closure<? super E> closure, final Predicate<? super E> predicate)" ], [ "invokerClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> invokerClosure(final String methodName)" ], [ "invokerClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> invokerClosure(final String methodName, final Class<?>[] paramTypes, final Object[] args)" ], [ "chainedClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> chainedClosure(final Closure<? super E>... closures)" ], [ "chainedClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> chainedClosure(final Collection<? extends Closure<? super E>> closures)" ], [ "ifClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> ifClosure(final Predicate<? super E> predicate, final Closure<? super E> trueClosure)" ], [ "ifClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> ifClosure(final Predicate<? super E> predicate, final Closure<? super E> trueClosure, final Closure<? super E> falseClosure)" ], [ "switchClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> switchClosure(final Predicate<? super E>[] predicates, final Closure<? super E>[] closures)" ], [ "switchClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> switchClosure(final Predicate<? super E>[] predicates, final Closure<? super E>[] closures, final Closure<? super E> defaultClosure)" ], [ "switchClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> switchClosure(final Map<Predicate<E>, Closure<E>> predicatesAndClosures)" ], [ "switchMapClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> switchMapClosure(final Map<? extends E, Closure<E>> objectsAndClosures)" ], [ "unmodifiableTrie", "org.apache.commons.collections4.trie", "UnmodifiableTrie", "public static <K, V> Trie<K, V> unmodifiableTrie(final Trie<K, ? extends V> trie)" ], [ "isOutOfBoundsIndex", "org.apache.commons.collections4.trie", "KeyAnalyzer", "static boolean isOutOfBoundsIndex(final int bitIndex)" ], [ "isEqualBitKey", "org.apache.commons.collections4.trie", "KeyAnalyzer", "static boolean isEqualBitKey(final int bitIndex)" ], [ "isNullBitKey", "org.apache.commons.collections4.trie", "KeyAnalyzer", "static boolean isNullBitKey(final int bitIndex)" ], [ "isValidBitIndex", "org.apache.commons.collections4.trie", "KeyAnalyzer", "static boolean isValidBitIndex(final int bitIndex)" ], [ "isValidUplink", "org.apache.commons.collections4.trie", "AbstractPatriciaTrie", "static boolean isValidUplink(final TrieEntry<?, ?> next, final TrieEntry<?, ?> from)" ], [ "compare", "org.apache.commons.collections4.trie", "AbstractBitwiseTrie", "static boolean compare(final Object a, final Object b)" ], [ "transformingSortedMap", "org.apache.commons.collections4.map", "TransformedSortedMap", "public static <K, V> TransformedSortedMap<K, V> transformingSortedMap(final SortedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "transformedSortedMap", "org.apache.commons.collections4.map", "TransformedSortedMap", "public static <K, V> TransformedSortedMap<K, V> transformedSortedMap(final SortedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "predicatedMap", "org.apache.commons.collections4.map", "PredicatedMap", "public static <K, V> PredicatedMap<K, V> predicatedMap(final Map<K, V> map, final Predicate<? super K> keyPredicate, final Predicate<? super V> valuePredicate)" ], [ "fixedSizeSortedMap", "org.apache.commons.collections4.map", "FixedSizeSortedMap", "public static <K, V> FixedSizeSortedMap<K, V> fixedSizeSortedMap(final SortedMap<K, V> map)" ], [ "unmodifiableSortedMap", "org.apache.commons.collections4.map", "UnmodifiableSortedMap", "public static <K, V> SortedMap<K, V> unmodifiableSortedMap(final SortedMap<K, ? extends V> map)" ], [ "predicatedSortedMap", "org.apache.commons.collections4.map", "PredicatedSortedMap", "public static <K, V> PredicatedSortedMap<K, V> predicatedSortedMap(final SortedMap<K, V> map, final Predicate<? super K> keyPredicate, final Predicate<? super V> valuePredicate)" ], [ "defaultedMap", "org.apache.commons.collections4.map", "DefaultedMap", "public static <K, V> DefaultedMap<K, V> defaultedMap(final Map<K, V> map, final V defaultValue)" ], [ "defaultedMap", "org.apache.commons.collections4.map", "DefaultedMap", "public static <K, V> DefaultedMap<K, V> defaultedMap(final Map<K, V> map, final Factory<? extends V> factory)" ], [ "defaultedMap", "org.apache.commons.collections4.map", "DefaultedMap", "public static <K, V> Map<K, V> defaultedMap(final Map<K, V> map, final Transformer<? super K, ? extends V> transformer)" ], [ "fixedSizeMap", "org.apache.commons.collections4.map", "FixedSizeMap", "public static <K, V> FixedSizeMap<K, V> fixedSizeMap(final Map<K, V> map)" ], [ "lazySortedMap", "org.apache.commons.collections4.map", "LazySortedMap", "public static <K, V> LazySortedMap<K, V> lazySortedMap(final SortedMap<K, V> map, final Factory<? extends V> factory)" ], [ "lazySortedMap", "org.apache.commons.collections4.map", "LazySortedMap", "public static <K, V> LazySortedMap<K, V> lazySortedMap(final SortedMap<K, V> map, final Transformer<? super K, ? extends V> factory)" ], [ "unmodifiableOrderedMap", "org.apache.commons.collections4.map", "UnmodifiableOrderedMap", "public static <K, V> OrderedMap<K, V> unmodifiableOrderedMap(final OrderedMap<? extends K, ? extends V> map)" ], [ "unmodifiableMap", "org.apache.commons.collections4.map", "UnmodifiableMap", "public static <K, V> Map<K, V> unmodifiableMap(final Map<? extends K, ? extends V> map)" ], [ "listOrderedMap", "org.apache.commons.collections4.map", "ListOrderedMap", "public static <K, V> ListOrderedMap<K, V> listOrderedMap(final Map<K, V> map)" ], [ "unmodifiableEntrySet", "org.apache.commons.collections4.map", "UnmodifiableEntrySet", "public static <K, V> Set<Map.Entry<K, V>> unmodifiableEntrySet(final Set<Map.Entry<K, V>> set)" ], [ "resolve", "org.apache.commons.collections4.map", "AbstractReferenceMap", "public static ReferenceStrength resolve(final int value)" ], [ "resolve", "org.apache.commons.collections4.map", "ReferenceStrength", "public static ReferenceStrength resolve(final int value)" ], [ "multiKeyMap", "org.apache.commons.collections4.map", "MultiKeyMap", "public static <K, V> MultiKeyMap<K, V> multiKeyMap(final AbstractHashedMap<MultiKey<? extends K>, V> map)" ], [ "lazyMap", "org.apache.commons.collections4.map", "LazyMap", "public static <K, V> LazyMap<K, V> lazyMap(final Map<K, V> map, final Factory<? extends V> factory)" ], [ "lazyMap", "org.apache.commons.collections4.map", "LazyMap", "public static <V, K> LazyMap<K, V> lazyMap(final Map<K, V> map, final Transformer<? super K, ? extends V> factory)" ], [ "multiValueMap", "org.apache.commons.collections4.map", "MultiValueMap", "public static <K, V> MultiValueMap<K, V> multiValueMap(final Map<K, ? super Collection<V>> map)" ], [ "multiValueMap", "org.apache.commons.collections4.map", "MultiValueMap", "public static <K, V, C extends Collection<V>> MultiValueMap<K, V> multiValueMap(final Map<K, ? super C> map, final Class<C> collectionClass)" ], [ "multiValueMap", "org.apache.commons.collections4.map", "MultiValueMap", "public static <K, V, C extends Collection<V>> MultiValueMap<K, V> multiValueMap(final Map<K, ? super C> map, final Factory<C> collectionFactory)" ], [ "transformingMap", "org.apache.commons.collections4.map", "TransformedMap", "public static <K, V> TransformedMap<K, V> transformingMap(final Map<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "transformedMap", "org.apache.commons.collections4.map", "TransformedMap", "public static <K, V> TransformedMap<K, V> transformedMap(final Map<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "synchronizedMultiSet", "org.apache.commons.collections4", "MultiSetUtils", "public static <E> MultiSet<E> synchronizedMultiSet(final MultiSet<E> multiset)" ], [ "unmodifiableMultiSet", "org.apache.commons.collections4", "MultiSetUtils", "public static <E> MultiSet<E> unmodifiableMultiSet(final MultiSet<? extends E> multiset)" ], [ "predicatedMultiSet", "org.apache.commons.collections4", "MultiSetUtils", "public static <E> MultiSet<E> predicatedMultiSet(final MultiSet<E> multiset, final Predicate<? super E> predicate)" ], [ "emptyMultiSet", "org.apache.commons.collections4", "MultiSetUtils", "public static <E> MultiSet<E> emptyMultiSet()" ], [ "unmodifiableMultiValuedMap", "org.apache.commons.collections4.multimap", "UnmodifiableMultiValuedMap", "public static <K, V> UnmodifiableMultiValuedMap<K, V> unmodifiableMultiValuedMap(MultiValuedMap<? extends K, ? extends V> map)" ], [ "transformingMap", "org.apache.commons.collections4.multimap", "TransformedMultiValuedMap", "public static <K, V> TransformedMultiValuedMap<K, V> transformingMap(final MultiValuedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "transformedMap", "org.apache.commons.collections4.multimap", "TransformedMultiValuedMap", "public static <K, V> TransformedMultiValuedMap<K, V> transformedMap(final MultiValuedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "lazyList", "org.apache.commons.collections4.list", "LazyList", "public static <E> LazyList<E> lazyList(final List<E> list, final Factory<? extends E> factory)" ], [ "setUniqueList", "org.apache.commons.collections4.list", "SetUniqueList", "public static <E> SetUniqueList<E> setUniqueList(final List<E> list)" ], [ "unmodifiableList", "org.apache.commons.collections4.list", "UnmodifiableList", "public static <E> List<E> unmodifiableList(final List<? extends E> list)" ], [ "fixedSizeList", "org.apache.commons.collections4.list", "FixedSizeList", "public static <E> FixedSizeList<E> fixedSizeList(final List<E> list)" ], [ "transformingList", "org.apache.commons.collections4.list", "TransformedList", "public static <E> TransformedList<E> transformingList(final List<E> list, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedList", "org.apache.commons.collections4.list", "TransformedList", "public static <E> TransformedList<E> transformedList(final List<E> list, final Transformer<? super E, ? extends E> transformer)" ], [ "growthList", "org.apache.commons.collections4.list", "GrowthList", "public static <E> GrowthList<E> growthList(final List<E> list)" ], [ "predicatedList", "org.apache.commons.collections4.list", "PredicatedList", "public static <T> PredicatedList<T> predicatedList(final List<T> list, final Predicate<? super T> predicate)" ], [ "transformingQueue", "org.apache.commons.collections4.queue", "TransformedQueue", "public static <E> TransformedQueue<E> transformingQueue(final Queue<E> queue, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedQueue", "org.apache.commons.collections4.queue", "TransformedQueue", "public static <E> TransformedQueue<E> transformedQueue(final Queue<E> queue, final Transformer<? super E, ? extends E> transformer)" ], [ "unmodifiableQueue", "org.apache.commons.collections4.queue", "UnmodifiableQueue", "public static <E> Queue<E> unmodifiableQueue(final Queue<? extends E> queue)" ], [ "predicatedQueue", "org.apache.commons.collections4.queue", "PredicatedQueue", "public static <E> PredicatedQueue<E> predicatedQueue(final Queue<E> Queue, final Predicate<? super E> predicate)" ], [ "empty", "org.apache.commons.collections4", "FluentIterable", "public static <T> FluentIterable<T> empty()" ], [ "of", "org.apache.commons.collections4", "FluentIterable", "public static <T> FluentIterable<T> of(final T singleton)" ], [ "of", "org.apache.commons.collections4", "FluentIterable", "public static <T> FluentIterable<T> of(final T... elements)" ], [ "of", "org.apache.commons.collections4", "FluentIterable", "public static <T> FluentIterable<T> of(final Iterable<T> iterable)" ], [ "exceptionTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> exceptionTransformer()" ], [ "nullTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> nullTransformer()" ], [ "nopTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> nopTransformer()" ], [ "cloneTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> cloneTransformer()" ], [ "constantTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> constantTransformer(final O constantToReturn)" ], [ "asTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> asTransformer(final Closure<? super T> closure)" ], [ "asTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, Boolean> asTransformer(final Predicate<? super T> predicate)" ], [ "asTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> asTransformer(final Factory<? extends O> factory)" ], [ "chainedTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> chainedTransformer(final Transformer<? super T, ? extends T>... transformers)" ], [ "chainedTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> chainedTransformer(final Collection<? extends Transformer<? super T, ? extends T>> transformers)" ], [ "ifTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> ifTransformer(final Predicate<? super T> predicate, final Transformer<? super T, ? extends T> trueTransformer)" ], [ "ifTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> ifTransformer(final Predicate<? super I> predicate, final Transformer<? super I, ? extends O> trueTransformer, final Transformer<? super I, ? extends O> falseTransformer)" ], [ "switchTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> switchTransformer(final Predicate<? super I> predicate, final Transformer<? super I, ? extends O> trueTransformer, final Transformer<? super I, ? extends O> falseTransformer)" ], [ "switchTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> switchTransformer(final Predicate<? super I>[] predicates, final Transformer<? super I, ? extends O>[] transformers)" ], [ "switchTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> switchTransformer(final Predicate<? super I>[] predicates, final Transformer<? super I, ? extends O>[] transformers, final Transformer<? super I, ? extends O> defaultTransformer)" ], [ "switchTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> switchTransformer(final Map<Predicate<I>, Transformer<I, O>> predicatesAndTransformers)" ], [ "switchMapTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> switchMapTransformer(final Map<I, Transformer<I, O>> objectsAndTransformers)" ], [ "instantiateTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<Class<? extends T>, T> instantiateTransformer()" ], [ "instantiateTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<Class<? extends T>, T> instantiateTransformer(final Class<?>[] paramTypes, final Object[] args)" ], [ "mapTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> mapTransformer(final Map<? super I, ? extends O> map)" ], [ "invokerTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> invokerTransformer(final String methodName)" ], [ "invokerTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> invokerTransformer(final String methodName, final Class<?>[] paramTypes, final Object[] args)" ], [ "stringValueTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, String> stringValueTransformer()" ], [ "exceptionPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> exceptionPredicate()" ], [ "truePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> truePredicate()" ], [ "falsePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> falsePredicate()" ], [ "nullPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nullPredicate()" ], [ "notNullPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> notNullPredicate()" ], [ "equalPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> equalPredicate(final T value)" ], [ "identityPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> identityPredicate(final T value)" ], [ "instanceofPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static Predicate<Object> instanceofPredicate(final Class<?> type)" ], [ "uniquePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> uniquePredicate()" ], [ "invokerPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> invokerPredicate(final String methodName)" ], [ "invokerPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> invokerPredicate(final String methodName, final Class<?>[] paramTypes, final Object[] args)" ], [ "andPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> andPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "allPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> allPredicate(final Predicate<? super T>... predicates)" ], [ "allPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> allPredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "orPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> orPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "anyPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> anyPredicate(final Predicate<? super T>... predicates)" ], [ "anyPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> anyPredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "eitherPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> eitherPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "onePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> onePredicate(final Predicate<? super T>... predicates)" ], [ "onePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> onePredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "neitherPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> neitherPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "nonePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nonePredicate(final Predicate<? super T>... predicates)" ], [ "nonePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nonePredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "notPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> notPredicate(final Predicate<? super T> predicate)" ], [ "asPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> asPredicate(final Transformer<? super T, Boolean> transformer)" ], [ "nullIsExceptionPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nullIsExceptionPredicate(final Predicate<? super T> predicate)" ], [ "nullIsFalsePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nullIsFalsePredicate(final Predicate<? super T> predicate)" ], [ "nullIsTruePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nullIsTruePredicate(final Predicate<? super T> predicate)" ], [ "transformedPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> transformedPredicate(final Transformer<? super T, ? extends T> transformer, final Predicate<? super T> predicate)" ], [ "emptySet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> emptySet()" ], [ "emptySortedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> emptySortedSet()" ], [ "emptyIfNull", "org.apache.commons.collections4", "SetUtils", "public static <T> Set<T> emptyIfNull(final Set<T> set)" ], [ "isEqualSet", "org.apache.commons.collections4", "SetUtils", "public static boolean isEqualSet(final Collection<?> set1, final Collection<?> set2)" ], [ "hashCodeForSet", "org.apache.commons.collections4", "SetUtils", "public static <T> int hashCodeForSet(final Collection<T> set)" ], [ "newIdentityHashSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> newIdentityHashSet()" ], [ "synchronizedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> synchronizedSet(final Set<E> set)" ], [ "unmodifiableSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> unmodifiableSet(final Set<? extends E> set)" ], [ "predicatedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> predicatedSet(final Set<E> set, final Predicate<? super E> predicate)" ], [ "transformedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> transformedSet(final Set<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "orderedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> orderedSet(final Set<E> set)" ], [ "synchronizedSortedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> synchronizedSortedSet(final SortedSet<E> set)" ], [ "unmodifiableSortedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> unmodifiableSortedSet(final SortedSet<E> set)" ], [ "predicatedSortedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> predicatedSortedSet(final SortedSet<E> set, final Predicate<? super E> predicate)" ], [ "transformedSortedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> transformedSortedSet(final SortedSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "unmodifiableNavigableSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> unmodifiableNavigableSet(final NavigableSet<E> set)" ], [ "predicatedNavigableSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> predicatedNavigableSet(final NavigableSet<E> set, final Predicate<? super E> predicate)" ], [ "transformedNavigableSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> transformedNavigableSet(final NavigableSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "union", "org.apache.commons.collections4", "SetUtils", "public static <E> SetView<E> union(final Set<? extends E> a, final Set<? extends E> b)" ], [ "difference", "org.apache.commons.collections4", "SetUtils", "public static <E> SetView<E> difference(final Set<? extends E> a, final Set<? extends E> b)" ], [ "intersection", "org.apache.commons.collections4", "SetUtils", "public static <E> SetView<E> intersection(final Set<? extends E> a, final Set<? extends E> b)" ], [ "disjunction", "org.apache.commons.collections4", "SetUtils", "public static <E> SetView<E> disjunction(final Set<? extends E> a, final Set<? extends E> b)" ], [ "transformingSet", "org.apache.commons.collections4.set", "TransformedSet", "public static <E> TransformedSet<E> transformingSet(final Set<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedSet", "org.apache.commons.collections4.set", "TransformedSet", "public static <E> Set<E> transformedSet(final Set<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "transformingNavigableSet", "org.apache.commons.collections4.set", "TransformedNavigableSet", "public static <E> TransformedNavigableSet<E> transformingNavigableSet(final NavigableSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedNavigableSet", "org.apache.commons.collections4.set", "TransformedNavigableSet", "public static <E> TransformedNavigableSet<E> transformedNavigableSet(final NavigableSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "predicatedNavigableSet", "org.apache.commons.collections4.set", "PredicatedNavigableSet", "public static <E> PredicatedNavigableSet<E> predicatedNavigableSet(final NavigableSet<E> set, final Predicate<? super E> predicate)" ], [ "listOrderedSet", "org.apache.commons.collections4.set", "ListOrderedSet", "public static <E> ListOrderedSet<E> listOrderedSet(final Set<E> set, final List<E> list)" ], [ "listOrderedSet", "org.apache.commons.collections4.set", "ListOrderedSet", "public static <E> ListOrderedSet<E> listOrderedSet(final Set<E> set)" ], [ "listOrderedSet", "org.apache.commons.collections4.set", "ListOrderedSet", "public static <E> ListOrderedSet<E> listOrderedSet(final List<E> list)" ], [ "unmodifiableSet", "org.apache.commons.collections4.set", "UnmodifiableSet", "public static <E> Set<E> unmodifiableSet(final Set<? extends E> set)" ], [ "mapBackedSet", "org.apache.commons.collections4.set", "MapBackedSet", "public static <E, V> MapBackedSet<E, V> mapBackedSet(final Map<E, ? super V> map)" ], [ "mapBackedSet", "org.apache.commons.collections4.set", "MapBackedSet", "public static <E, V> MapBackedSet<E, V> mapBackedSet(final Map<E, ? super V> map, final V dummyValue)" ], [ "unmodifiableSortedSet", "org.apache.commons.collections4.set", "UnmodifiableSortedSet", "public static <E> SortedSet<E> unmodifiableSortedSet(final SortedSet<E> set)" ], [ "predicatedSortedSet", "org.apache.commons.collections4.set", "PredicatedSortedSet", "public static <E> PredicatedSortedSet<E> predicatedSortedSet(final SortedSet<E> set, final Predicate<? super E> predicate)" ], [ "predicatedSet", "org.apache.commons.collections4.set", "PredicatedSet", "public static <E> PredicatedSet<E> predicatedSet(final Set<E> set, final Predicate<? super E> predicate)" ], [ "unmodifiableNavigableSet", "org.apache.commons.collections4.set", "UnmodifiableNavigableSet", "public static <E> NavigableSet<E> unmodifiableNavigableSet(final NavigableSet<E> set)" ], [ "transformingSortedSet", "org.apache.commons.collections4.set", "TransformedSortedSet", "public static <E> TransformedSortedSet<E> transformingSortedSet(final SortedSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedSortedSet", "org.apache.commons.collections4.set", "TransformedSortedSet", "public static <E> TransformedSortedSet<E> transformedSortedSet(final SortedSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "get", "org.apache.commons.collections4", "EnumerationUtils", "public static <T> T get(final Enumeration<T> e, final int index)" ], [ "toList", "org.apache.commons.collections4", "EnumerationUtils", "public static <E> List<E> toList(final Enumeration<? extends E> enumeration)" ], [ "toList", "org.apache.commons.collections4", "EnumerationUtils", "public static List<String> toList(final StringTokenizer stringTokenizer)" ], [ "unmodifiableQueue", "org.apache.commons.collections4", "QueueUtils", "public static <E> Queue<E> unmodifiableQueue(final Queue<? extends E> queue)" ], [ "predicatedQueue", "org.apache.commons.collections4", "QueueUtils", "public static <E> Queue<E> predicatedQueue(final Queue<E> queue, final Predicate<? super E> predicate)" ], [ "transformingQueue", "org.apache.commons.collections4", "QueueUtils", "public static <E> Queue<E> transformingQueue(final Queue<E> queue, final Transformer<? super E, ? extends E> transformer)" ], [ "emptyQueue", "org.apache.commons.collections4", "QueueUtils", "public static <E> Queue<E> emptyQueue()" ], [ "synchronizedBag", "org.apache.commons.collections4.bag", "SynchronizedBag", "public static <E> SynchronizedBag<E> synchronizedBag(final Bag<E> bag)" ], [ "collectionBag", "org.apache.commons.collections4.bag", "CollectionBag", "public static <E> Bag<E> collectionBag(final Bag<E> bag)" ], [ "unmodifiableBag", "org.apache.commons.collections4.bag", "UnmodifiableBag", "public static <E> Bag<E> unmodifiableBag(final Bag<? extends E> bag)" ], [ "predicatedSortedBag", "org.apache.commons.collections4.bag", "PredicatedSortedBag", "public static <E> PredicatedSortedBag<E> predicatedSortedBag(final SortedBag<E> bag, final Predicate<? super E> predicate)" ], [ "unmodifiableSortedBag", "org.apache.commons.collections4.bag", "UnmodifiableSortedBag", "public static <E> SortedBag<E> unmodifiableSortedBag(final SortedBag<E> bag)" ], [ "transformingSortedBag", "org.apache.commons.collections4.bag", "TransformedSortedBag", "public static <E> TransformedSortedBag<E> transformingSortedBag(final SortedBag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedSortedBag", "org.apache.commons.collections4.bag", "TransformedSortedBag", "public static <E> TransformedSortedBag<E> transformedSortedBag(final SortedBag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "predicatedBag", "org.apache.commons.collections4.bag", "PredicatedBag", "public static <E> PredicatedBag<E> predicatedBag(final Bag<E> bag, final Predicate<? super E> predicate)" ], [ "synchronizedSortedBag", "org.apache.commons.collections4.bag", "SynchronizedSortedBag", "public static <E> SynchronizedSortedBag<E> synchronizedSortedBag(final SortedBag<E> bag)" ], [ "collectionSortedBag", "org.apache.commons.collections4.bag", "CollectionSortedBag", "public static <E> SortedBag<E> collectionSortedBag(final SortedBag<E> bag)" ], [ "transformingBag", "org.apache.commons.collections4.bag", "TransformedBag", "public static <E> Bag<E> transformingBag(final Bag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedBag", "org.apache.commons.collections4.bag", "TransformedBag", "public static <E> Bag<E> transformedBag(final Bag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "predicatedMultiSet", "org.apache.commons.collections4.multiset", "PredicatedMultiSet", "public static <E> PredicatedMultiSet<E> predicatedMultiSet(final MultiSet<E> multiset, final Predicate<? super E> predicate)" ], [ "unmodifiableMultiSet", "org.apache.commons.collections4.multiset", "UnmodifiableMultiSet", "public static <E> MultiSet<E> unmodifiableMultiSet(final MultiSet<? extends E> multiset)" ], [ "synchronizedMultiSet", "org.apache.commons.collections4.multiset", "SynchronizedMultiSet", "public static <E> SynchronizedMultiSet<E> synchronizedMultiSet(final MultiSet<E> multiset)" ], [ "synchronizedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> synchronizedBag(final Bag<E> bag)" ], [ "unmodifiableBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> unmodifiableBag(final Bag<? extends E> bag)" ], [ "predicatedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> predicatedBag(final Bag<E> bag, final Predicate<? super E> predicate)" ], [ "transformingBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> transformingBag(final Bag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "collectionBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> collectionBag(final Bag<E> bag)" ], [ "synchronizedSortedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> SortedBag<E> synchronizedSortedBag(final SortedBag<E> bag)" ], [ "unmodifiableSortedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> SortedBag<E> unmodifiableSortedBag(final SortedBag<E> bag)" ], [ "predicatedSortedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> SortedBag<E> predicatedSortedBag(final SortedBag<E> bag, final Predicate<? super E> predicate)" ], [ "transformingSortedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> SortedBag<E> transformingSortedBag(final SortedBag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "emptyBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> emptyBag()" ], [ "emptySortedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> SortedBag<E> emptySortedBag()" ], [ "resettableEmptyListIterator", "org.apache.commons.collections4.iterators", "EmptyListIterator", "public static <E> ResettableListIterator<E> resettableEmptyListIterator()" ], [ "emptyListIterator", "org.apache.commons.collections4.iterators", "EmptyListIterator", "public static <E> ListIterator<E> emptyListIterator()" ], [ "unmodifiableOrderedMapIterator", "org.apache.commons.collections4.iterators", "UnmodifiableOrderedMapIterator", "public static <K, V> OrderedMapIterator<K, V> unmodifiableOrderedMapIterator(final OrderedMapIterator<K, ? extends V> iterator)" ], [ "unmodifiableIterator", "org.apache.commons.collections4.iterators", "UnmodifiableIterator", "public static <E> Iterator<E> unmodifiableIterator(final Iterator<? extends E> iterator)" ], [ "peekingIterator", "org.apache.commons.collections4.iterators", "PeekingIterator", "public static <E> PeekingIterator<E> peekingIterator(final Iterator<? extends E> iterator)" ], [ "emptyMapIterator", "org.apache.commons.collections4.iterators", "EmptyMapIterator", "public static <K, V> MapIterator<K, V> emptyMapIterator()" ], [ "emptyOrderedIterator", "org.apache.commons.collections4.iterators", "EmptyOrderedIterator", "public static <E> OrderedIterator<E> emptyOrderedIterator()" ], [ "umodifiableListIterator", "org.apache.commons.collections4.iterators", "UnmodifiableListIterator", "public static <E> ListIterator<E> umodifiableListIterator(final ListIterator<? extends E> iterator)" ], [ "emptyOrderedMapIterator", "org.apache.commons.collections4.iterators", "EmptyOrderedMapIterator", "public static <K, V> OrderedMapIterator<K, V> emptyOrderedMapIterator()" ], [ "unmodifiableMapIterator", "org.apache.commons.collections4.iterators", "UnmodifiableMapIterator", "public static <K, V> MapIterator<K, V> unmodifiableMapIterator(final MapIterator<? extends K, ? extends V> iterator)" ], [ "resettableEmptyIterator", "org.apache.commons.collections4.iterators", "EmptyIterator", "public static <E> ResettableIterator<E> resettableEmptyIterator()" ], [ "emptyIterator", "org.apache.commons.collections4.iterators", "EmptyIterator", "public static <E> Iterator<E> emptyIterator()" ], [ "pushbackIterator", "org.apache.commons.collections4.iterators", "PushbackIterator", "public static <E> PushbackIterator<E> pushbackIterator(final Iterator<? extends E> iterator)" ], [ "readableMap", "org.apache.commons.collections4", "SplitMapUtils", "public static <K, V> IterableMap<K, V> readableMap(final Get<K, V> get)" ], [ "writableMap", "org.apache.commons.collections4", "SplitMapUtils", "public static <K, V> Map<K, V> writableMap(final Put<K, V> put)" ] ],
  "tokensProjectClassesNonPrivateStaticAttributes" : [ [ "EMPTY_ITERATOR", "org.apache.commons.collections4", "IteratorUtils", "public static final ResettableIterator EMPTY_ITERATOR = EmptyIterator.RESETTABLE_INSTANCE;" ], [ "EMPTY_LIST_ITERATOR", "org.apache.commons.collections4", "IteratorUtils", "public static final ResettableListIterator EMPTY_LIST_ITERATOR = EmptyListIterator.RESETTABLE_INSTANCE;" ], [ "EMPTY_ORDERED_ITERATOR", "org.apache.commons.collections4", "IteratorUtils", "public static final OrderedIterator EMPTY_ORDERED_ITERATOR = EmptyOrderedIterator.INSTANCE;" ], [ "EMPTY_MAP_ITERATOR", "org.apache.commons.collections4", "IteratorUtils", "public static final MapIterator EMPTY_MAP_ITERATOR = EmptyMapIterator.INSTANCE;" ], [ "EMPTY_ORDERED_MAP_ITERATOR", "org.apache.commons.collections4", "IteratorUtils", "public static final OrderedMapIterator EMPTY_ORDERED_MAP_ITERATOR = EmptyOrderedMapIterator.INSTANCE;" ], [ "NATURAL_COMPARATOR", "org.apache.commons.collections4", "ComparatorUtils", "public static final Comparator NATURAL_COMPARATOR = ComparableComparator.<Comparable>comparableComparator();" ], [ "EMPTY_MULTI_VALUED_MAP", "org.apache.commons.collections4", "MultiMapUtils", "public static final MultiValuedMap EMPTY_MULTI_VALUED_MAP = UnmodifiableMultiValuedMap.unmodifiableMultiValuedMap(new ArrayListValuedHashMap(0, 0));" ], [ "EMPTY_SORTED_MAP", "org.apache.commons.collections4", "MapUtils", "public static final SortedMap EMPTY_SORTED_MAP = UnmodifiableSortedMap.unmodifiableSortedMap(new TreeMap<Object, Object>());" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "DefaultEquator", "public static final DefaultEquator INSTANCE = new DefaultEquator<Object>();" ], [ "HASHCODE_NULL", "org.apache.commons.collections4.functors", "DefaultEquator", "public static final int HASHCODE_NULL = -1;" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "ExceptionClosure", "public static final Closure INSTANCE = new ExceptionClosure<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "NOPClosure", "public static final Closure INSTANCE = new NOPClosure<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "NullPredicate", "public static final Predicate INSTANCE = new NullPredicate<Object>();" ], [ "NULL_INSTANCE", "org.apache.commons.collections4.functors", "ConstantTransformer", "public static final Transformer NULL_INSTANCE = new ConstantTransformer<Object, Object>(null);" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "ExceptionTransformer", "public static final Transformer INSTANCE = new ExceptionTransformer<Object, Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "NOPTransformer", "public static final Transformer INSTANCE = new NOPTransformer<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "ExceptionFactory", "public static final Factory INSTANCE = new ExceptionFactory<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "ExceptionPredicate", "public static final Predicate INSTANCE = new ExceptionPredicate<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "FalsePredicate", "public static final Predicate INSTANCE = new FalsePredicate<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "CloneTransformer", "public static final Transformer INSTANCE = new CloneTransformer<Object>();" ], [ "NULL_INSTANCE", "org.apache.commons.collections4.functors", "ConstantFactory", "public static final Factory NULL_INSTANCE = new ConstantFactory<Object>(null);" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "TruePredicate", "public static final Predicate INSTANCE = new TruePredicate<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "NotNullPredicate", "public static final Predicate INSTANCE = new NotNullPredicate<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.comparators", "ComparableComparator", "public static final ComparableComparator INSTANCE = new ComparableComparator();" ], [ "EMPTY_COLLECTION", "org.apache.commons.collections4", "CollectionUtils", "public static final Collection EMPTY_COLLECTION = UnmodifiableCollection.unmodifiableCollection(new ArrayList<Object>());" ], [ "EMPTY_ITERABLE", "org.apache.commons.collections4", "IterableUtils", "static final FluentIterable EMPTY_ITERABLE = new FluentIterable<Object>() {\n\n    @Override\n    public Iterator<Object> iterator() {\n        return IteratorUtils.emptyIterator();\n    }\n};" ], [ "NULL_BIT_KEY", "org.apache.commons.collections4.trie", "KeyAnalyzer", "public static final int NULL_BIT_KEY = -1;" ], [ "EQUAL_BIT_KEY", "org.apache.commons.collections4.trie", "KeyAnalyzer", "public static final int EQUAL_BIT_KEY = -2;" ], [ "OUT_OF_BOUNDS_BIT_KEY", "org.apache.commons.collections4.trie", "KeyAnalyzer", "public static final int OUT_OF_BOUNDS_BIT_KEY = -3;" ], [ "INSTANCE", "org.apache.commons.collections4.trie.analyzer", "StringKeyAnalyzer", "public static final StringKeyAnalyzer INSTANCE = new StringKeyAnalyzer();" ], [ "LENGTH", "org.apache.commons.collections4.trie.analyzer", "StringKeyAnalyzer", "public static final int LENGTH = Character.SIZE;" ], [ "NO_NEXT_ENTRY", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String NO_NEXT_ENTRY = \"No next() entry in the iteration\";" ], [ "NO_PREVIOUS_ENTRY", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String NO_PREVIOUS_ENTRY = \"No previous() entry in the iteration\";" ], [ "REMOVE_INVALID", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String REMOVE_INVALID = \"remove() can only be called once after next()\";" ], [ "GETKEY_INVALID", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String GETKEY_INVALID = \"getKey() can only be called after next() and before remove()\";" ], [ "GETVALUE_INVALID", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String GETVALUE_INVALID = \"getValue() can only be called after next() and before remove()\";" ], [ "SETVALUE_INVALID", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String SETVALUE_INVALID = \"setValue() can only be called after next() and before remove()\";" ], [ "DEFAULT_CAPACITY", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final int DEFAULT_CAPACITY = 16;" ], [ "DEFAULT_THRESHOLD", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final int DEFAULT_THRESHOLD = 12;" ], [ "DEFAULT_LOAD_FACTOR", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final float DEFAULT_LOAD_FACTOR = 0.75f;" ], [ "MAXIMUM_CAPACITY", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final int MAXIMUM_CAPACITY = 1 << 30;" ], [ "NULL", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final Object NULL = new Object();" ], [ "DEFAULT_MAX_SIZE", "org.apache.commons.collections4.map", "LRUMap", "protected static final int DEFAULT_MAX_SIZE = 100;" ], [ "EMPTY_MULTISET", "org.apache.commons.collections4", "MultiSetUtils", "public static final MultiSet EMPTY_MULTISET = UnmodifiableMultiSet.unmodifiableMultiSet(new HashMultiSet<Object>());" ], [ "EMPTY_SORTED_SET", "org.apache.commons.collections4", "SetUtils", "public static final SortedSet EMPTY_SORTED_SET = UnmodifiableSortedSet.unmodifiableSortedSet(new TreeSet<Object>());" ], [ "EMPTY_QUEUE", "org.apache.commons.collections4", "QueueUtils", "public static final Queue EMPTY_QUEUE = UnmodifiableQueue.unmodifiableQueue(new LinkedList<Object>());" ], [ "EMPTY_BAG", "org.apache.commons.collections4", "BagUtils", "public static final Bag EMPTY_BAG = UnmodifiableBag.unmodifiableBag(new HashBag<Object>());" ], [ "EMPTY_SORTED_BAG", "org.apache.commons.collections4", "BagUtils", "public static final Bag EMPTY_SORTED_BAG = UnmodifiableSortedBag.unmodifiableSortedBag(new TreeBag<Object>());" ], [ "RESETTABLE_INSTANCE", "org.apache.commons.collections4.iterators", "EmptyListIterator", "public static final ResettableListIterator RESETTABLE_INSTANCE = new EmptyListIterator<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.iterators", "EmptyListIterator", "public static final ListIterator INSTANCE = RESETTABLE_INSTANCE;" ], [ "INSTANCE", "org.apache.commons.collections4.iterators", "EmptyMapIterator", "public static final MapIterator INSTANCE = new EmptyMapIterator<Object, Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.iterators", "EmptyOrderedIterator", "public static final OrderedIterator INSTANCE = new EmptyOrderedIterator<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.iterators", "EmptyOrderedMapIterator", "public static final OrderedMapIterator INSTANCE = new EmptyOrderedMapIterator<Object, Object>();" ], [ "RESETTABLE_INSTANCE", "org.apache.commons.collections4.iterators", "EmptyIterator", "public static final ResettableIterator RESETTABLE_INSTANCE = new EmptyIterator<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.iterators", "EmptyIterator", "public static final Iterator INSTANCE = RESETTABLE_INSTANCE;" ] ],
  "tokensMethodJavadocValues" : [ [ "0", "int" ], [ "0", "int" ] ],
  "tokensMethodArguments" : [ [ "predicates", "", "Predicate<? super I>[]" ], [ "transformers", "", "Transformer<? super I, ? extends O>[]" ] ],
  "tokensMethodVariablesNonPrivateNonStaticNonVoidMethods" : [ [ "clone", "java.lang", "Object", "protected native Object clone() throws CloneNotSupportedException" ], [ "toString", "java.lang", "Object", "public String toString()" ], [ "hashCode", "java.lang", "Object", "public native int hashCode()" ], [ "getClass", "java.lang", "Object", "public final native Class<? extends Object> getClass()" ], [ "equals", "java.lang", "Object", "public boolean equals(Object arg0)" ], [ "equals", "", "org.apache.commons.collections4.Predicate<? super I>[]", "public boolean equals(Object);" ], [ "toString", "", "org.apache.commons.collections4.Predicate<? super I>[]", "public String toString()" ], [ "hashCode", "", "org.apache.commons.collections4.Predicate<? super I>[]", "public native int hashCode()" ], [ "getClass", "", "org.apache.commons.collections4.Predicate<? super I>[]", "public final native Class getClass();" ], [ "clone", "", "org.apache.commons.collections4.Predicate<? super I>[]", "public T[] clone();" ], [ "equals", "", "org.apache.commons.collections4.Transformer<? super I, ? extends O>[]", "public boolean equals(Object);" ], [ "toString", "", "org.apache.commons.collections4.Transformer<? super I, ? extends O>[]", "public String toString()" ], [ "hashCode", "", "org.apache.commons.collections4.Transformer<? super I, ? extends O>[]", "public native int hashCode()" ], [ "getClass", "", "org.apache.commons.collections4.Transformer<? super I, ? extends O>[]", "public final native Class getClass();" ], [ "clone", "", "org.apache.commons.collections4.Transformer<? super I, ? extends O>[]", "public T[] clone();" ], [ "transform", "org.apache.commons.collections4", "Transformer", "public abstract O transform(I arg0)" ] ],
  "tokensMethodVariablesNonPrivateNonStaticAttributes" : [ [ "length", "org.apache.commons.collections4", "Predicate[]", "public final int length;" ], [ "length", "org.apache.commons.collections4", "Transformer[]", "public final int length;" ] ],
  "tokensOracleVariablesNonPrivateNonStaticNonVoidMethods" : [ ],
  "tokensOracleVariablesNonPrivateNonStaticAttributes" : [ ]
}, {
  "id" : 8957,
  "oracle" : ";",
  "oracleType" : "EXCEPT_POST",
  "projectName" : "commons-collections4-4.1",
  "packageName" : "org.apache.commons.collections4",
  "className" : "TransformerUtils",
  "javadocTag" : "@throws NullPointerException if the either array is null",
  "methodJavadoc" : "    /**\n     * Create a new Transformer that calls one of the transformers depending\n     * on the predicates. The transformer at array location 0 is called if the\n     * predicate at array location 0 returned true. Each predicate is evaluated\n     * until one returns true. If no predicates evaluate to true, null is returned.\n     *\n     * @param <I>  the input type\n     * @param <O>  the output type\n     * @param predicates  an array of predicates to check\n     * @param transformers  an array of transformers to call\n     * @return the transformer\n     * @throws NullPointerException if the either array is null\n     * @throws NullPointerException if any element in the arrays is null\n     * @throws IllegalArgumentException if the arrays have different sizes\n     * @see SwitchTransformer\n     */",
  "methodSourceCode" : "public static <I, O> Transformer<I, O> switchTransformer(final Predicate<? super I>[] predicates, final Transformer<? super I, ? extends O>[] transformers){\n    return SwitchTransformer.switchTransformer(predicates, transformers, null);\n}",
  "classJavadoc" : "/**\n * <code>TransformerUtils</code> provides reference implementations and\n * utilities for the Transformer functor interface. The supplied transformers are:\n * <ul>\n * <li>Invoker - returns the result of a method call on the input object\n * <li>Clone - returns a clone of the input object\n * <li>Constant - always returns the same object\n * <li>Closure - performs a Closure and returns the input object\n * <li>Predicate - returns the result of the predicate as a Boolean\n * <li>Factory - returns a new object from a factory\n * <li>Chained - chains two or more transformers together\n * <li>If - calls one transformer or another based on a predicate\n * <li>Switch - calls one transformer based on one or more predicates\n * <li>SwitchMap - calls one transformer looked up from a Map\n * <li>Instantiate - the Class input object is instantiated\n * <li>Map - returns an object from a supplied Map\n * <li>Null - always returns null\n * <li>NOP - returns the input object, which should be immutable\n * <li>Exception - always throws an exception\n * <li>StringValue - returns a <code>java.lang.String</code> representation of the input object\n * </ul>\n * <p>\n * Since v4.1 only transformers which are considered to be unsafe are\n * Serializable. Transformers considered to be unsafe for serialization are:\n * <ul>\n * <li>Invoker\n * <li>Clone\n * <li>Instantiate\n * </ul>\n *\n * @since 3.0\n * @version $Id: TransformerUtils.java 1714362 2015-11-14 20:38:02Z tn $\n */",
  "classSourceCode" : "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.commons.collections4;\n\nimport java.util.Collection;\nimport java.util.Map;\n\nimport org.apache.commons.collections4.functors.ChainedTransformer;\nimport org.apache.commons.collections4.functors.CloneTransformer;\nimport org.apache.commons.collections4.functors.ClosureTransformer;\nimport org.apache.commons.collections4.functors.ConstantTransformer;\nimport org.apache.commons.collections4.functors.EqualPredicate;\nimport org.apache.commons.collections4.functors.ExceptionTransformer;\nimport org.apache.commons.collections4.functors.FactoryTransformer;\nimport org.apache.commons.collections4.functors.IfTransformer;\nimport org.apache.commons.collections4.functors.InstantiateTransformer;\nimport org.apache.commons.collections4.functors.InvokerTransformer;\nimport org.apache.commons.collections4.functors.MapTransformer;\nimport org.apache.commons.collections4.functors.NOPTransformer;\nimport org.apache.commons.collections4.functors.PredicateTransformer;\nimport org.apache.commons.collections4.functors.StringValueTransformer;\nimport org.apache.commons.collections4.functors.SwitchTransformer;\n\n/**\n * <code>TransformerUtils</code> provides reference implementations and\n * utilities for the Transformer functor interface. The supplied transformers are:\n * <ul>\n * <li>Invoker - returns the result of a method call on the input object\n * <li>Clone - returns a clone of the input object\n * <li>Constant - always returns the same object\n * <li>Closure - performs a Closure and returns the input object\n * <li>Predicate - returns the result of the predicate as a Boolean\n * <li>Factory - returns a new object from a factory\n * <li>Chained - chains two or more transformers together\n * <li>If - calls one transformer or another based on a predicate\n * <li>Switch - calls one transformer based on one or more predicates\n * <li>SwitchMap - calls one transformer looked up from a Map\n * <li>Instantiate - the Class input object is instantiated\n * <li>Map - returns an object from a supplied Map\n * <li>Null - always returns null\n * <li>NOP - returns the input object, which should be immutable\n * <li>Exception - always throws an exception\n * <li>StringValue - returns a <code>java.lang.String</code> representation of the input object\n * </ul>\n * <p>\n * Since v4.1 only transformers which are considered to be unsafe are\n * Serializable. Transformers considered to be unsafe for serialization are:\n * <ul>\n * <li>Invoker\n * <li>Clone\n * <li>Instantiate\n * </ul>\n *\n * @since 3.0\n * @version $Id: TransformerUtils.java 1714362 2015-11-14 20:38:02Z tn $\n */\npublic class TransformerUtils {\n\n    /**\n     * This class is not normally instantiated.\n     */\n    private TransformerUtils() {}\n\n    /**\n     * Gets a transformer that always throws an exception.\n     * This could be useful during testing as a placeholder.\n     *\n     * @param <I>  the input type\n     * @param <O>  the output type\n     * @return the transformer\n     * @see ExceptionTransformer\n     */\n    public static <I, O> Transformer<I, O> exceptionTransformer() {\n        return ExceptionTransformer.exceptionTransformer();\n    }\n\n    /**\n     * Gets a transformer that always returns null.\n     *\n     * @param <I>  the input type\n     * @param <O>  the output type\n     * @return the transformer\n     * @see ConstantTransformer\n     */\n    public static <I, O> Transformer<I, O> nullTransformer() {\n        return ConstantTransformer.nullTransformer();\n    }\n\n    /**\n     * Gets a transformer that returns the input object.\n     * The input object should be immutable to maintain the\n     * contract of Transformer (although this is not checked).\n     *\n     * @param <T>  the input/output type\n     * @return the transformer\n     * @see NOPTransformer\n     */\n    public static <T> Transformer<T, T> nopTransformer() {\n        return NOPTransformer.nopTransformer();\n    }\n\n    /**\n     * Gets a transformer that returns a clone of the input object.\n     * The input object will be cloned using one of these techniques (in order):\n     * <ul>\n     * <li>public clone method\n     * <li>public copy constructor\n     * <li>serialization clone\n     * <ul>\n     *\n     * @param <T>  the input/output type\n     * @return the transformer\n     * @see CloneTransformer\n     */\n    public static <T> Transformer<T, T> cloneTransformer() {\n        return CloneTransformer.cloneTransformer();\n    }\n\n    /**\n     * Creates a Transformer that will return the same object each time the\n     * transformer is used.\n     *\n     * @param <I>  the input type\n     * @param <O>  the output type\n     * @param constantToReturn  the constant object to return each time in the transformer\n     * @return the transformer.\n     * @see ConstantTransformer\n     */\n    public static <I, O> Transformer<I, O> constantTransformer(final O constantToReturn) {\n        return ConstantTransformer.constantTransformer(constantToReturn);\n    }\n\n    /**\n     * Creates a Transformer that calls a Closure each time the transformer is used.\n     * The transformer returns the input object.\n     *\n     * @param <T>  the input/output type\n     * @param closure  the closure to run each time in the transformer, not null\n     * @return the transformer\n     * @throws NullPointerException if the closure is null\n     * @see ClosureTransformer\n     */\n    public static <T> Transformer<T, T> asTransformer(final Closure<? super T> closure) {\n        return ClosureTransformer.closureTransformer(closure);\n    }\n\n    /**\n     * Creates a Transformer that calls a Predicate each time the transformer is used.\n     * The transformer will return either Boolean.TRUE or Boolean.FALSE.\n     *\n     * @param <T>  the input type\n     * @param predicate  the predicate to run each time in the transformer, not null\n     * @return the transformer\n     * @throws NullPointerException if the predicate is null\n     * @see PredicateTransformer\n     */\n    public static <T> Transformer<T, Boolean> asTransformer(final Predicate<? super T> predicate) {\n        return PredicateTransformer.predicateTransformer(predicate);\n    }\n\n    /**\n     * Creates a Transformer that calls a Factory each time the transformer is used.\n     * The transformer will return the value returned by the factory.\n     *\n     * @param <I>  the input type\n     * @param <O>  the output type\n     * @param factory  the factory to run each time in the transformer, not null\n     * @return the transformer\n     * @throws NullPointerException if the factory is null\n     * @see FactoryTransformer\n     */\n    public static <I, O> Transformer<I, O> asTransformer(final Factory<? extends O> factory) {\n        return FactoryTransformer.factoryTransformer(factory);\n    }\n\n    /**\n     * Create a new Transformer that calls each transformer in turn, passing the\n     * result into the next transformer.\n     *\n     * @param <T>  the input/output type\n     * @param transformers  an array of transformers to chain\n     * @return the transformer\n     * @throws NullPointerException if the transformers array or any of the transformers is null\n     * @see ChainedTransformer\n     */\n    public static <T> Transformer<T, T> chainedTransformer(\n            final Transformer<? super T, ? extends T>... transformers) {\n        return ChainedTransformer.chainedTransformer(transformers);\n    }\n\n    /**\n     * Create a new Transformer that calls each transformer in turn, passing the\n     * result into the next transformer. The ordering is that of the iterator()\n     * method on the collection.\n     *\n     * @param <T>  the input/output type\n     * @param transformers  a collection of transformers to chain\n     * @return the transformer\n     * @throws NullPointerException if the transformers collection or any of the transformers is null\n     * @see ChainedTransformer\n     */\n    public static <T> Transformer<T, T> chainedTransformer(\n            final Collection<? extends Transformer<? super T, ? extends T>> transformers) {\n        return ChainedTransformer.chainedTransformer(transformers);\n    }\n\n    /**\n     * Create a new Transformer that calls the transformer if the predicate is true,\n     * otherwise the input object is returned unchanged.\n     *\n     * @param <T>  the input / output type\n     * @param predicate  the predicate to switch on\n     * @param trueTransformer  the transformer called if the predicate is true\n     * @return the transformer\n     * @throws NullPointerException if either the predicate or transformer is null\n     * @see IfTransformer\n     * @since 4.1\n     */\n    public static <T> Transformer<T, T> ifTransformer(final Predicate<? super T> predicate,\n                                                      final Transformer<? super T, ? extends T> trueTransformer) {\n        return IfTransformer.ifTransformer(predicate, trueTransformer);\n    }\n\n    /**\n     * Create a new Transformer that calls one of two transformers depending\n     * on the specified predicate.\n     *\n     * @param <I>  the input type\n     * @param <O>  the output type\n     * @param predicate  the predicate to switch on\n     * @param trueTransformer  the transformer called if the predicate is true\n     * @param falseTransformer  the transformer called if the predicate is false\n     * @return the transformer\n     * @throws NullPointerException if either the predicate or transformer is null\n     * @see IfTransformer\n     * @since 4.1\n     */\n    public static <I, O> Transformer<I, O> ifTransformer(final Predicate<? super I> predicate,\n                                                         final Transformer<? super I, ? extends O> trueTransformer,\n                                                         final Transformer<? super I, ? extends O> falseTransformer) {\n        return IfTransformer.ifTransformer(predicate, trueTransformer, falseTransformer);\n    }\n\n    /**\n     * Create a new Transformer that calls one of two transformers depending\n     * on the specified predicate.\n     *\n     * @param <I>  the input type\n     * @param <O>  the output type\n     * @param predicate  the predicate to switch on\n     * @param trueTransformer  the transformer called if the predicate is true\n     * @param falseTransformer  the transformer called if the predicate is false\n     * @return the transformer\n     * @throws NullPointerException if either the predicate or transformer is null\n     * @see SwitchTransformer\n     * @deprecated as of 4.1, use {@link #ifTransformer(Predicate, Transformer, Transformer))\n     */\n    @SuppressWarnings(\"unchecked\")\n    @Deprecated\n    public static <I, O> Transformer<I, O> switchTransformer(final Predicate<? super I> predicate,\n            final Transformer<? super I, ? extends O> trueTransformer,\n            final Transformer<? super I, ? extends O> falseTransformer) {\n        return SwitchTransformer.switchTransformer(new Predicate[] { predicate },\n                                                   new Transformer[] { trueTransformer }, falseTransformer);\n    }\n\n    /**\n     * Create a new Transformer that calls one of the transformers depending\n     * on the predicates. The transformer at array location 0 is called if the\n     * predicate at array location 0 returned true. Each predicate is evaluated\n     * until one returns true. If no predicates evaluate to true, null is returned.\n     *\n     * @param <I>  the input type\n     * @param <O>  the output type\n     * @param predicates  an array of predicates to check\n     * @param transformers  an array of transformers to call\n     * @return the transformer\n     * @throws NullPointerException if the either array is null\n     * @throws NullPointerException if any element in the arrays is null\n     * @throws IllegalArgumentException if the arrays have different sizes\n     * @see SwitchTransformer\n     */\n    public static <I, O> Transformer<I, O> switchTransformer(final Predicate<? super I>[] predicates,\n            final Transformer<? super I, ? extends O>[] transformers) {\n        return SwitchTransformer.switchTransformer(predicates, transformers, null);\n    }\n\n    /**\n     * Create a new Transformer that calls one of the transformers depending\n     * on the predicates. The transformer at array location 0 is called if the\n     * predicate at array location 0 returned true. Each predicate is evaluated\n     * until one returns true. If no predicates evaluate to true, the default\n     * transformer is called. If the default transformer is null, null is returned.\n     *\n     * @param <I>  the input type\n     * @param <O>  the output type\n     * @param predicates  an array of predicates to check\n     * @param transformers  an array of transformers to call\n     * @param defaultTransformer  the default to call if no predicate matches, null means return null\n     * @return the transformer\n     * @throws NullPointerException if the either array is null\n     * @throws NullPointerException if any element in the arrays is null\n     * @throws IllegalArgumentException if the arrays have different sizes\n     * @see SwitchTransformer\n     */\n    public static <I, O> Transformer<I, O> switchTransformer(final Predicate<? super I>[] predicates,\n            final Transformer<? super I, ? extends O>[] transformers,\n            final Transformer<? super I, ? extends O> defaultTransformer) {\n        return SwitchTransformer.switchTransformer(predicates, transformers, defaultTransformer);\n    }\n\n    /**\n     * Create a new Transformer that calls one of the transformers depending\n     * on the predicates.\n     * <p>\n     * The Map consists of Predicate keys and Transformer values. A transformer\n     * is called if its matching predicate returns true. Each predicate is evaluated\n     * until one returns true. If no predicates evaluate to true, the default\n     * transformer is called. The default transformer is set in the map with a\n     * null key. If no default transformer is set, null will be returned in a default\n     * case. The ordering is that of the iterator() method on the entryset collection\n     * of the map.\n     *\n     * @param <I>  the input type\n     * @param <O>  the output type\n     * @param predicatesAndTransformers  a map of predicates to transformers\n     * @return the transformer\n     * @throws NullPointerException if the map is null\n     * @throws NullPointerException if any transformer in the map is null\n     * @throws ClassCastException  if the map elements are of the wrong type\n     * @see SwitchTransformer\n     */\n    public static <I, O> Transformer<I, O> switchTransformer(\n            final Map<Predicate<I>, Transformer<I, O>> predicatesAndTransformers) {\n        return SwitchTransformer.switchTransformer(predicatesAndTransformers);\n    }\n\n    /**\n     * Create a new Transformer that uses the input object as a key to find the\n     * transformer to call.\n     * <p>\n     * The Map consists of object keys and Transformer values. A transformer\n     * is called if the input object equals the key. If there is no match, the\n     * default transformer is called. The default transformer is set in the map\n     * using a null key. If no default is set, null will be returned in a default case.\n     *\n     * @param <I>  the input type\n     * @param <O>  the output type\n     * @param objectsAndTransformers  a map of objects to transformers\n     * @return the transformer\n     * @throws NullPointerException if the map is null\n     * @throws NullPointerException if any transformer in the map is null\n     * @see SwitchTransformer\n     */\n    @SuppressWarnings(\"unchecked\")\n    public static <I, O> Transformer<I, O> switchMapTransformer(\n            final Map<I, Transformer<I, O>> objectsAndTransformers) {\n\n        if (objectsAndTransformers == null) {\n            throw new NullPointerException(\"The object and transformer map must not be null\");\n        }\n        final Transformer<? super I, ? extends O> def = objectsAndTransformers.remove(null);\n        final int size = objectsAndTransformers.size();\n        final Transformer<? super I, ? extends O>[] trs = new Transformer[size];\n        final Predicate<I>[] preds = new Predicate[size];\n        int i = 0;\n        for (final Map.Entry<I, Transformer<I, O>> entry : objectsAndTransformers.entrySet()) {\n            preds[i] = EqualPredicate.<I>equalPredicate(entry.getKey());\n            trs[i++] = entry.getValue();\n        }\n        return TransformerUtils.switchTransformer(preds, trs, def);\n    }\n\n    /**\n     * Gets a Transformer that expects an input Class object that it will instantiate.\n     *\n     * @param <T>  the output type\n     * @return the transformer\n     * @see InstantiateTransformer\n     */\n    public static <T> Transformer<Class<? extends T>, T> instantiateTransformer() {\n        return InstantiateTransformer.instantiateTransformer();\n    }\n\n    /**\n     * Creates a Transformer that expects an input Class object that it will\n     * instantiate. The constructor used is determined by the arguments specified\n     * to this method.\n     *\n     * @param <T>  the output type\n     * @param paramTypes  parameter types for the constructor, can be null\n     * @param args  the arguments to pass to the constructor, can be null\n     * @return the transformer\n     * @throws IllegalArgumentException if the paramTypes and args don't match\n     * @see InstantiateTransformer\n     */\n    public static <T> Transformer<Class<? extends T>, T> instantiateTransformer(\n            final Class<?>[] paramTypes, final Object[] args) {\n        return InstantiateTransformer.instantiateTransformer(paramTypes, args);\n    }\n\n    /**\n     * Creates a Transformer that uses the passed in Map to transform the input\n     * object (as a simple lookup).\n     *\n     * @param <I>  the input type\n     * @param <O>  the output type\n     * @param map  the map to use to transform the objects\n     * @return the transformer, or {@link ConstantTransformer#nullTransformer()} if the\n     *   {@code map} is {@code null}\n     * @see MapTransformer\n     */\n    public static <I, O> Transformer<I, O> mapTransformer(final Map<? super I, ? extends O> map) {\n        return MapTransformer.mapTransformer(map);\n    }\n\n    /**\n     * Gets a Transformer that invokes a method on the input object.\n     * The method must have no parameters. If the input object is null,\n     * null is returned.\n     * <p>\n     * For example, <code>TransformerUtils.invokerTransformer(\"getName\");</code>\n     * will call the <code>getName/code> method on the input object to\n     * determine the transformer result.\n     *\n     * @param <I>  the input type\n     * @param <O>  the output type\n     * @param methodName  the method name to call on the input object, may not be null\n     * @return the transformer\n     * @throws NullPointerException if the methodName is null.\n     * @see InvokerTransformer\n     */\n    public static <I, O> Transformer<I, O> invokerTransformer(final String methodName) {\n        return InvokerTransformer.invokerTransformer(methodName, null, null);\n    }\n\n    /**\n     * Gets a Transformer that invokes a method on the input object.\n     * The method parameters are specified. If the input object is {@code null},\n     * {@code null} is returned.\n     *\n     * @param <I>  the input type\n     * @param <O>  the output type\n     * @param methodName  the name of the method\n     * @param paramTypes  the parameter types\n     * @param args  the arguments\n     * @return the transformer\n     * @throws NullPointerException if the method name is null\n     * @throws IllegalArgumentException if the paramTypes and args don't match\n     * @see InvokerTransformer\n     */\n    public static <I, O> Transformer<I, O> invokerTransformer(final String methodName, final Class<?>[] paramTypes,\n                                                              final Object[] args) {\n        return InvokerTransformer.invokerTransformer(methodName, paramTypes, args);\n    }\n\n    /**\n     * Gets a transformer that returns a <code>java.lang.String</code>\n     * representation of the input object. This is achieved via the\n     * <code>toString</code> method, <code>null</code> returns 'null'.\n     *\n     * @param <T>  the input type\n     * @return the transformer\n     * @see StringValueTransformer\n     */\n    public static <T> Transformer<T, String> stringValueTransformer() {\n        return StringValueTransformer.stringValueTransformer();\n    }\n\n}\n",
  "tokensGeneralGrammar" : [ "null", "true", "false", ",", ".", ":", ";", "?", "(", ")", "jdVar", "stream", "Arrays", "allMatch", "noneMatch", "anyMatch", "~", ">>", "<<", ">>>", "|", "&", "^", "+", "-", "/", "*", "%", "&&", "||", ">=", "<=", ">", "<", "==", "!=", "instanceof", "class", "methodResultID", "this" ],
  "tokensGeneralValuesGlobalDictionary" : [ [ "0", "int" ], [ "1", "int" ], [ "-1", "int" ], [ "0.0", "double" ], [ "1.0", "double" ], [ "-1.0", "double" ], [ "\"\"", "String" ], [ "\" \"", "String" ] ],
  "tokensProjectClasses" : [ [ "BidiMap", "org.apache.commons.collections4" ], [ "Equator", "org.apache.commons.collections4" ], [ "MultiSet", "org.apache.commons.collections4" ], [ "IteratorUtils", "org.apache.commons.collections4" ], [ "ComparatorUtils", "org.apache.commons.collections4" ], [ "FunctorException", "org.apache.commons.collections4" ], [ "AbstractDualBidiMap", "org.apache.commons.collections4.bidimap" ], [ "UnmodifiableBidiMap", "org.apache.commons.collections4.bidimap" ], [ "AbstractOrderedBidiMapDecorator", "org.apache.commons.collections4.bidimap" ], [ "UnmodifiableOrderedBidiMap", "org.apache.commons.collections4.bidimap" ], [ "AbstractBidiMapDecorator", "org.apache.commons.collections4.bidimap" ], [ "DualLinkedHashBidiMap", "org.apache.commons.collections4.bidimap" ], [ "UnmodifiableSortedBidiMap", "org.apache.commons.collections4.bidimap" ], [ "AbstractSortedBidiMapDecorator", "org.apache.commons.collections4.bidimap" ], [ "DualHashBidiMap", "org.apache.commons.collections4.bidimap" ], [ "DualTreeBidiMap", "org.apache.commons.collections4.bidimap" ], [ "TreeBidiMap", "org.apache.commons.collections4.bidimap" ], [ "MultiMapUtils", "org.apache.commons.collections4" ], [ "BoundedCollection", "org.apache.commons.collections4" ], [ "UnmodifiableBoundedCollection", "org.apache.commons.collections4.collection" ], [ "CompositeCollection", "org.apache.commons.collections4.collection" ], [ "TransformedCollection", "org.apache.commons.collections4.collection" ], [ "PredicatedCollection", "org.apache.commons.collections4.collection" ], [ "IndexedCollection", "org.apache.commons.collections4.collection" ], [ "SynchronizedCollection", "org.apache.commons.collections4.collection" ], [ "UnmodifiableCollection", "org.apache.commons.collections4.collection" ], [ "AbstractCollectionDecorator", "org.apache.commons.collections4.collection" ], [ "OrderedBidiMap", "org.apache.commons.collections4" ], [ "FactoryUtils", "org.apache.commons.collections4" ], [ "IterableGet", "org.apache.commons.collections4" ], [ "ListUtils", "org.apache.commons.collections4" ], [ "Closure", "org.apache.commons.collections4" ], [ "IterableSortedMap", "org.apache.commons.collections4" ], [ "MapUtils", "org.apache.commons.collections4" ], [ "Transformer", "org.apache.commons.collections4" ], [ "DefaultEquator", "org.apache.commons.collections4.functors" ], [ "StringValueTransformer", "org.apache.commons.collections4.functors" ], [ "PredicateDecorator", "org.apache.commons.collections4.functors" ], [ "IfTransformer", "org.apache.commons.collections4.functors" ], [ "IdentityPredicate", "org.apache.commons.collections4.functors" ], [ "ExceptionClosure", "org.apache.commons.collections4.functors" ], [ "NOPClosure", "org.apache.commons.collections4.functors" ], [ "ClosureTransformer", "org.apache.commons.collections4.functors" ], [ "FunctorUtils", "org.apache.commons.collections4.functors" ], [ "TransformerPredicate", "org.apache.commons.collections4.functors" ], [ "NullPredicate", "org.apache.commons.collections4.functors" ], [ "ConstantTransformer", "org.apache.commons.collections4.functors" ], [ "PredicateTransformer", "org.apache.commons.collections4.functors" ], [ "WhileClosure", "org.apache.commons.collections4.functors" ], [ "ForClosure", "org.apache.commons.collections4.functors" ], [ "NullIsTruePredicate", "org.apache.commons.collections4.functors" ], [ "TransformedPredicate", "org.apache.commons.collections4.functors" ], [ "NonePredicate", "org.apache.commons.collections4.functors" ], [ "ExceptionTransformer", "org.apache.commons.collections4.functors" ], [ "SwitchTransformer", "org.apache.commons.collections4.functors" ], [ "TransformerClosure", "org.apache.commons.collections4.functors" ], [ "OrPredicate", "org.apache.commons.collections4.functors" ], [ "NOPTransformer", "org.apache.commons.collections4.functors" ], [ "MapTransformer", "org.apache.commons.collections4.functors" ], [ "ExceptionFactory", "org.apache.commons.collections4.functors" ], [ "ChainedClosure", "org.apache.commons.collections4.functors" ], [ "AndPredicate", "org.apache.commons.collections4.functors" ], [ "PrototypeFactory", "org.apache.commons.collections4.functors" ], [ "ExceptionPredicate", "org.apache.commons.collections4.functors" ], [ "AbstractQuantifierPredicate", "org.apache.commons.collections4.functors" ], [ "InstanceofPredicate", "org.apache.commons.collections4.functors" ], [ "InvokerTransformer", "org.apache.commons.collections4.functors" ], [ "FalsePredicate", "org.apache.commons.collections4.functors" ], [ "CloneTransformer", "org.apache.commons.collections4.functors" ], [ "NotPredicate", "org.apache.commons.collections4.functors" ], [ "ConstantFactory", "org.apache.commons.collections4.functors" ], [ "ChainedTransformer", "org.apache.commons.collections4.functors" ], [ "ComparatorPredicate", "org.apache.commons.collections4.functors" ], [ "CatchAndRethrowClosure", "org.apache.commons.collections4.functors" ], [ "AllPredicate", "org.apache.commons.collections4.functors" ], [ "NullIsFalsePredicate", "org.apache.commons.collections4.functors" ], [ "NullIsExceptionPredicate", "org.apache.commons.collections4.functors" ], [ "AnyPredicate", "org.apache.commons.collections4.functors" ], [ "TruePredicate", "org.apache.commons.collections4.functors" ], [ "FactoryTransformer", "org.apache.commons.collections4.functors" ], [ "NotNullPredicate", "org.apache.commons.collections4.functors" ], [ "SwitchClosure", "org.apache.commons.collections4.functors" ], [ "UniquePredicate", "org.apache.commons.collections4.functors" ], [ "InstantiateTransformer", "org.apache.commons.collections4.functors" ], [ "OnePredicate", "org.apache.commons.collections4.functors" ], [ "EqualPredicate", "org.apache.commons.collections4.functors" ], [ "InstantiateFactory", "org.apache.commons.collections4.functors" ], [ "IfClosure", "org.apache.commons.collections4.functors" ], [ "ResettableListIterator", "org.apache.commons.collections4" ], [ "OrderedIterator", "org.apache.commons.collections4" ], [ "ComparatorChain", "org.apache.commons.collections4.comparators" ], [ "BooleanComparator", "org.apache.commons.collections4.comparators" ], [ "ReverseComparator", "org.apache.commons.collections4.comparators" ], [ "ComparableComparator", "org.apache.commons.collections4.comparators" ], [ "TransformingComparator", "org.apache.commons.collections4.comparators" ], [ "FixedOrderComparator", "org.apache.commons.collections4.comparators" ], [ "NullComparator", "org.apache.commons.collections4.comparators" ], [ "CollectionUtils", "org.apache.commons.collections4" ], [ "ListValuedMap", "org.apache.commons.collections4" ], [ "AbstractIterableGetMapDecorator", "org.apache.commons.collections4.splitmap" ], [ "TransformedSplitMap", "org.apache.commons.collections4.splitmap" ], [ "Factory", "org.apache.commons.collections4" ], [ "IterableUtils", "org.apache.commons.collections4" ], [ "Bag", "org.apache.commons.collections4" ], [ "Predicate", "org.apache.commons.collections4" ], [ "SortedBag", "org.apache.commons.collections4" ], [ "TrieUtils", "org.apache.commons.collections4" ], [ "ClosureUtils", "org.apache.commons.collections4" ], [ "PatriciaTrie", "org.apache.commons.collections4.trie" ], [ "UnmodifiableTrie", "org.apache.commons.collections4.trie" ], [ "KeyAnalyzer", "org.apache.commons.collections4.trie" ], [ "AbstractPatriciaTrie", "org.apache.commons.collections4.trie" ], [ "AbstractBitwiseTrie", "org.apache.commons.collections4.trie" ], [ "StringKeyAnalyzer", "org.apache.commons.collections4.trie.analyzer" ], [ "TransformedSortedMap", "org.apache.commons.collections4.map" ], [ "AbstractLinkedMap", "org.apache.commons.collections4.map" ], [ "Flat3Map", "org.apache.commons.collections4.map" ], [ "PredicatedMap", "org.apache.commons.collections4.map" ], [ "FixedSizeSortedMap", "org.apache.commons.collections4.map" ], [ "UnmodifiableSortedMap", "org.apache.commons.collections4.map" ], [ "PredicatedSortedMap", "org.apache.commons.collections4.map" ], [ "DefaultedMap", "org.apache.commons.collections4.map" ], [ "ReferenceIdentityMap", "org.apache.commons.collections4.map" ], [ "AbstractSortedMapDecorator", "org.apache.commons.collections4.map" ], [ "AbstractInputCheckedMapDecorator", "org.apache.commons.collections4.map" ], [ "FixedSizeMap", "org.apache.commons.collections4.map" ], [ "LazySortedMap", "org.apache.commons.collections4.map" ], [ "UnmodifiableOrderedMap", "org.apache.commons.collections4.map" ], [ "CaseInsensitiveMap", "org.apache.commons.collections4.map" ], [ "AbstractHashedMap", "org.apache.commons.collections4.map" ], [ "AbstractOrderedMapDecorator", "org.apache.commons.collections4.map" ], [ "UnmodifiableMap", "org.apache.commons.collections4.map" ], [ "EntrySetToMapIteratorAdapter", "org.apache.commons.collections4.map" ], [ "AbstractIterableMap", "org.apache.commons.collections4.map" ], [ "ListOrderedMap", "org.apache.commons.collections4.map" ], [ "LinkedMap", "org.apache.commons.collections4.map" ], [ "SingletonMap", "org.apache.commons.collections4.map" ], [ "UnmodifiableEntrySet", "org.apache.commons.collections4.map" ], [ "StaticBucketMap", "org.apache.commons.collections4.map" ], [ "AbstractMapDecorator", "org.apache.commons.collections4.map" ], [ "AbstractReferenceMap", "org.apache.commons.collections4.map" ], [ "MultiKeyMap", "org.apache.commons.collections4.map" ], [ "HashedMap", "org.apache.commons.collections4.map" ], [ "LazyMap", "org.apache.commons.collections4.map" ], [ "PassiveExpiringMap", "org.apache.commons.collections4.map" ], [ "MultiValueMap", "org.apache.commons.collections4.map" ], [ "LRUMap", "org.apache.commons.collections4.map" ], [ "ReferenceMap", "org.apache.commons.collections4.map" ], [ "TransformedMap", "org.apache.commons.collections4.map" ], [ "CompositeMap", "org.apache.commons.collections4.map" ], [ "UnmodifiableMapEntry", "org.apache.commons.collections4.keyvalue" ], [ "MultiKey", "org.apache.commons.collections4.keyvalue" ], [ "DefaultMapEntry", "org.apache.commons.collections4.keyvalue" ], [ "DefaultKeyValue", "org.apache.commons.collections4.keyvalue" ], [ "AbstractMapEntryDecorator", "org.apache.commons.collections4.keyvalue" ], [ "AbstractKeyValue", "org.apache.commons.collections4.keyvalue" ], [ "TiedMapEntry", "org.apache.commons.collections4.keyvalue" ], [ "AbstractMapEntry", "org.apache.commons.collections4.keyvalue" ], [ "MultiSetUtils", "org.apache.commons.collections4" ], [ "MapIterator", "org.apache.commons.collections4" ], [ "AbstractMultiValuedMap", "org.apache.commons.collections4.multimap" ], [ "UnmodifiableMultiValuedMap", "org.apache.commons.collections4.multimap" ], [ "HashSetValuedHashMap", "org.apache.commons.collections4.multimap" ], [ "TransformedMultiValuedMap", "org.apache.commons.collections4.multimap" ], [ "AbstractSetValuedMap", "org.apache.commons.collections4.multimap" ], [ "AbstractListValuedMap", "org.apache.commons.collections4.multimap" ], [ "ArrayListValuedHashMap", "org.apache.commons.collections4.multimap" ], [ "AbstractMultiValuedMapDecorator", "org.apache.commons.collections4.multimap" ], [ "LazyList", "org.apache.commons.collections4.list" ], [ "AbstractSerializableListDecorator", "org.apache.commons.collections4.list" ], [ "TreeList", "org.apache.commons.collections4.list" ], [ "SetUniqueList", "org.apache.commons.collections4.list" ], [ "AbstractListDecorator", "org.apache.commons.collections4.list" ], [ "NodeCachingLinkedList", "org.apache.commons.collections4.list" ], [ "UnmodifiableList", "org.apache.commons.collections4.list" ], [ "FixedSizeList", "org.apache.commons.collections4.list" ], [ "TransformedList", "org.apache.commons.collections4.list" ], [ "GrowthList", "org.apache.commons.collections4.list" ], [ "AbstractLinkedList", "org.apache.commons.collections4.list" ], [ "CursorableLinkedList", "org.apache.commons.collections4.list" ], [ "PredicatedList", "org.apache.commons.collections4.list" ], [ "OrderedMap", "org.apache.commons.collections4" ], [ "AbstractQueueDecorator", "org.apache.commons.collections4.queue" ], [ "TransformedQueue", "org.apache.commons.collections4.queue" ], [ "UnmodifiableQueue", "org.apache.commons.collections4.queue" ], [ "CircularFifoQueue", "org.apache.commons.collections4.queue" ], [ "PredicatedQueue", "org.apache.commons.collections4.queue" ], [ "FluentIterable", "org.apache.commons.collections4" ], [ "TransformerUtils", "org.apache.commons.collections4" ], [ "PredicateUtils", "org.apache.commons.collections4" ], [ "ResettableIterator", "org.apache.commons.collections4" ], [ "MultiValuedMap", "org.apache.commons.collections4" ], [ "SetUtils", "org.apache.commons.collections4" ], [ "SortedBidiMap", "org.apache.commons.collections4" ], [ "ArrayStack", "org.apache.commons.collections4" ], [ "Put", "org.apache.commons.collections4" ], [ "OrderedMapIterator", "org.apache.commons.collections4" ], [ "TransformedSet", "org.apache.commons.collections4.set" ], [ "CompositeSet", "org.apache.commons.collections4.set" ], [ "TransformedNavigableSet", "org.apache.commons.collections4.set" ], [ "PredicatedNavigableSet", "org.apache.commons.collections4.set" ], [ "AbstractSetDecorator", "org.apache.commons.collections4.set" ], [ "ListOrderedSet", "org.apache.commons.collections4.set" ], [ "UnmodifiableSet", "org.apache.commons.collections4.set" ], [ "AbstractSerializableSetDecorator", "org.apache.commons.collections4.set" ], [ "MapBackedSet", "org.apache.commons.collections4.set" ], [ "UnmodifiableSortedSet", "org.apache.commons.collections4.set" ], [ "PredicatedSortedSet", "org.apache.commons.collections4.set" ], [ "AbstractSortedSetDecorator", "org.apache.commons.collections4.set" ], [ "PredicatedSet", "org.apache.commons.collections4.set" ], [ "AbstractNavigableSetDecorator", "org.apache.commons.collections4.set" ], [ "UnmodifiableNavigableSet", "org.apache.commons.collections4.set" ], [ "TransformedSortedSet", "org.apache.commons.collections4.set" ], [ "IterableMap", "org.apache.commons.collections4" ], [ "EnumerationUtils", "org.apache.commons.collections4" ], [ "DeleteCommand", "org.apache.commons.collections4.sequence" ], [ "ReplacementsHandler", "org.apache.commons.collections4.sequence" ], [ "InsertCommand", "org.apache.commons.collections4.sequence" ], [ "SequencesComparator", "org.apache.commons.collections4.sequence" ], [ "ReplacementsFinder", "org.apache.commons.collections4.sequence" ], [ "KeepCommand", "org.apache.commons.collections4.sequence" ], [ "EditCommand", "org.apache.commons.collections4.sequence" ], [ "CommandVisitor", "org.apache.commons.collections4.sequence" ], [ "EditScript", "org.apache.commons.collections4.sequence" ], [ "QueueUtils", "org.apache.commons.collections4" ], [ "SetValuedMap", "org.apache.commons.collections4" ], [ "SynchronizedBag", "org.apache.commons.collections4.bag" ], [ "AbstractMapBag", "org.apache.commons.collections4.bag" ], [ "CollectionBag", "org.apache.commons.collections4.bag" ], [ "UnmodifiableBag", "org.apache.commons.collections4.bag" ], [ "PredicatedSortedBag", "org.apache.commons.collections4.bag" ], [ "UnmodifiableSortedBag", "org.apache.commons.collections4.bag" ], [ "HashBag", "org.apache.commons.collections4.bag" ], [ "AbstractBagDecorator", "org.apache.commons.collections4.bag" ], [ "TransformedSortedBag", "org.apache.commons.collections4.bag" ], [ "TreeBag", "org.apache.commons.collections4.bag" ], [ "PredicatedBag", "org.apache.commons.collections4.bag" ], [ "SynchronizedSortedBag", "org.apache.commons.collections4.bag" ], [ "CollectionSortedBag", "org.apache.commons.collections4.bag" ], [ "TransformedBag", "org.apache.commons.collections4.bag" ], [ "AbstractSortedBagDecorator", "org.apache.commons.collections4.bag" ], [ "HashMultiSet", "org.apache.commons.collections4.multiset" ], [ "AbstractMultiSet", "org.apache.commons.collections4.multiset" ], [ "PredicatedMultiSet", "org.apache.commons.collections4.multiset" ], [ "AbstractMultiSetDecorator", "org.apache.commons.collections4.multiset" ], [ "AbstractMapMultiSet", "org.apache.commons.collections4.multiset" ], [ "UnmodifiableMultiSet", "org.apache.commons.collections4.multiset" ], [ "SynchronizedMultiSet", "org.apache.commons.collections4.multiset" ], [ "BagUtils", "org.apache.commons.collections4" ], [ "Unmodifiable", "org.apache.commons.collections4" ], [ "Get", "org.apache.commons.collections4" ], [ "Trie", "org.apache.commons.collections4" ], [ "MultiMap", "org.apache.commons.collections4" ], [ "KeyValue", "org.apache.commons.collections4" ], [ "IteratorChain", "org.apache.commons.collections4.iterators" ], [ "EmptyListIterator", "org.apache.commons.collections4.iterators" ], [ "UnmodifiableOrderedMapIterator", "org.apache.commons.collections4.iterators" ], [ "AbstractListIteratorDecorator", "org.apache.commons.collections4.iterators" ], [ "ZippingIterator", "org.apache.commons.collections4.iterators" ], [ "UnmodifiableIterator", "org.apache.commons.collections4.iterators" ], [ "CollatingIterator", "org.apache.commons.collections4.iterators" ], [ "UniqueFilterIterator", "org.apache.commons.collections4.iterators" ], [ "ReverseListIterator", "org.apache.commons.collections4.iterators" ], [ "BoundedIterator", "org.apache.commons.collections4.iterators" ], [ "AbstractIteratorDecorator", "org.apache.commons.collections4.iterators" ], [ "TransformIterator", "org.apache.commons.collections4.iterators" ], [ "AbstractEmptyIterator", "org.apache.commons.collections4.iterators" ], [ "NodeListIterator", "org.apache.commons.collections4.iterators" ], [ "ArrayListIterator", "org.apache.commons.collections4.iterators" ], [ "LazyIteratorChain", "org.apache.commons.collections4.iterators" ], [ "LoopingListIterator", "org.apache.commons.collections4.iterators" ], [ "PeekingIterator", "org.apache.commons.collections4.iterators" ], [ "ObjectGraphIterator", "org.apache.commons.collections4.iterators" ], [ "ArrayIterator", "org.apache.commons.collections4.iterators" ], [ "PermutationIterator", "org.apache.commons.collections4.iterators" ], [ "SingletonListIterator", "org.apache.commons.collections4.iterators" ], [ "EmptyMapIterator", "org.apache.commons.collections4.iterators" ], [ "ObjectArrayIterator", "org.apache.commons.collections4.iterators" ], [ "EnumerationIterator", "org.apache.commons.collections4.iterators" ], [ "IteratorIterable", "org.apache.commons.collections4.iterators" ], [ "AbstractEmptyMapIterator", "org.apache.commons.collections4.iterators" ], [ "LoopingIterator", "org.apache.commons.collections4.iterators" ], [ "IteratorEnumeration", "org.apache.commons.collections4.iterators" ], [ "SingletonIterator", "org.apache.commons.collections4.iterators" ], [ "ListIteratorWrapper", "org.apache.commons.collections4.iterators" ], [ "SkippingIterator", "org.apache.commons.collections4.iterators" ], [ "EmptyOrderedIterator", "org.apache.commons.collections4.iterators" ], [ "AbstractMapIteratorDecorator", "org.apache.commons.collections4.iterators" ], [ "ObjectArrayListIterator", "org.apache.commons.collections4.iterators" ], [ "UnmodifiableListIterator", "org.apache.commons.collections4.iterators" ], [ "EmptyOrderedMapIterator", "org.apache.commons.collections4.iterators" ], [ "UnmodifiableMapIterator", "org.apache.commons.collections4.iterators" ], [ "EmptyIterator", "org.apache.commons.collections4.iterators" ], [ "EntrySetMapIterator", "org.apache.commons.collections4.iterators" ], [ "PushbackIterator", "org.apache.commons.collections4.iterators" ], [ "FilterIterator", "org.apache.commons.collections4.iterators" ], [ "AbstractUntypedIteratorDecorator", "org.apache.commons.collections4.iterators" ], [ "AbstractOrderedMapIteratorDecorator", "org.apache.commons.collections4.iterators" ], [ "FilterListIterator", "org.apache.commons.collections4.iterators" ], [ "SplitMapUtils", "org.apache.commons.collections4" ], [ "BoundedMap", "org.apache.commons.collections4" ] ],
  "tokensProjectClassesNonPrivateStaticNonVoidMethods" : [ [ "emptyIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> emptyIterator()" ], [ "emptyListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> emptyListIterator()" ], [ "emptyOrderedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> OrderedIterator<E> emptyOrderedIterator()" ], [ "emptyMapIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <K, V> MapIterator<K, V> emptyMapIterator()" ], [ "emptyOrderedMapIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <K, V> OrderedMapIterator<K, V> emptyOrderedMapIterator()" ], [ "singletonIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> singletonIterator(final E object)" ], [ "singletonListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ListIterator<E> singletonListIterator(final E object)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final E... array)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final Object array)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final E[] array, final int start)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final Object array, final int start)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final E[] array, final int start, final int end)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final Object array, final int start, final int end)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final E... array)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final Object array)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final E[] array, final int start)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final Object array, final int start)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final E[] array, final int start, final int end)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final Object array, final int start, final int end)" ], [ "boundedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> BoundedIterator<E> boundedIterator(final Iterator<? extends E> iterator, long max)" ], [ "boundedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> BoundedIterator<E> boundedIterator(final Iterator<? extends E> iterator, long offset, long max)" ], [ "unmodifiableIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> unmodifiableIterator(final Iterator<E> iterator)" ], [ "unmodifiableListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ListIterator<E> unmodifiableListIterator(final ListIterator<E> listIterator)" ], [ "unmodifiableMapIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <K, V> MapIterator<K, V> unmodifiableMapIterator(final MapIterator<K, V> mapIterator)" ], [ "chainedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> chainedIterator(final Iterator<? extends E> iterator1, final Iterator<? extends E> iterator2)" ], [ "chainedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> chainedIterator(final Iterator<? extends E>... iterators)" ], [ "chainedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> chainedIterator(final Collection<Iterator<? extends E>> iterators)" ], [ "collatedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> collatedIterator(final Comparator<? super E> comparator, final Iterator<? extends E> iterator1, final Iterator<? extends E> iterator2)" ], [ "collatedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> collatedIterator(final Comparator<? super E> comparator, final Iterator<? extends E>... iterators)" ], [ "collatedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> collatedIterator(final Comparator<? super E> comparator, final Collection<Iterator<? extends E>> iterators)" ], [ "objectGraphIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> objectGraphIterator(final E root, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <I, O> Iterator<O> transformedIterator(final Iterator<? extends I> iterator, final Transformer<? super I, ? extends O> transform)" ], [ "filteredIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> filteredIterator(final Iterator<? extends E> iterator, final Predicate<? super E> predicate)" ], [ "filteredListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ListIterator<E> filteredListIterator(final ListIterator<? extends E> listIterator, final Predicate<? super E> predicate)" ], [ "loopingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> loopingIterator(final Collection<? extends E> coll)" ], [ "loopingListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> loopingListIterator(final List<E> list)" ], [ "nodeListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static NodeListIterator nodeListIterator(final NodeList nodeList)" ], [ "nodeListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static NodeListIterator nodeListIterator(final Node node)" ], [ "peekingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> peekingIterator(final Iterator<? extends E> iterator)" ], [ "pushbackIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> pushbackIterator(final Iterator<? extends E> iterator)" ], [ "skippingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> SkippingIterator<E> skippingIterator(final Iterator<E> iterator, long offset)" ], [ "zippingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ZippingIterator<E> zippingIterator(final Iterator<? extends E> a, final Iterator<? extends E> b)" ], [ "zippingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ZippingIterator<E> zippingIterator(final Iterator<? extends E> a, final Iterator<? extends E> b, final Iterator<? extends E> c)" ], [ "zippingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ZippingIterator<E> zippingIterator(final Iterator<? extends E>... iterators)" ], [ "asIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> asIterator(final Enumeration<? extends E> enumeration)" ], [ "asIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> asIterator(final Enumeration<? extends E> enumeration, final Collection<? super E> removeCollection)" ], [ "asEnumeration", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Enumeration<E> asEnumeration(final Iterator<? extends E> iterator)" ], [ "asIterable", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterable<E> asIterable(final Iterator<? extends E> iterator)" ], [ "asMultipleUseIterable", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterable<E> asMultipleUseIterable(final Iterator<? extends E> iterator)" ], [ "toListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ListIterator<E> toListIterator(final Iterator<? extends E> iterator)" ], [ "toArray", "org.apache.commons.collections4", "IteratorUtils", "public static Object[] toArray(final Iterator<?> iterator)" ], [ "toArray", "org.apache.commons.collections4", "IteratorUtils", "public static <E> E[] toArray(final Iterator<? extends E> iterator, final Class<E> arrayClass)" ], [ "toList", "org.apache.commons.collections4", "IteratorUtils", "public static <E> List<E> toList(final Iterator<? extends E> iterator)" ], [ "toList", "org.apache.commons.collections4", "IteratorUtils", "public static <E> List<E> toList(final Iterator<? extends E> iterator, final int estimatedSize)" ], [ "getIterator", "org.apache.commons.collections4", "IteratorUtils", "public static Iterator<?> getIterator(final Object obj)" ], [ "forEachButLast", "org.apache.commons.collections4", "IteratorUtils", "public static <E> E forEachButLast(final Iterator<E> iterator, final Closure<? super E> closure)" ], [ "find", "org.apache.commons.collections4", "IteratorUtils", "public static <E> E find(final Iterator<E> iterator, final Predicate<? super E> predicate)" ], [ "indexOf", "org.apache.commons.collections4", "IteratorUtils", "public static <E> int indexOf(final Iterator<E> iterator, final Predicate<? super E> predicate)" ], [ "matchesAny", "org.apache.commons.collections4", "IteratorUtils", "public static <E> boolean matchesAny(final Iterator<E> iterator, final Predicate<? super E> predicate)" ], [ "matchesAll", "org.apache.commons.collections4", "IteratorUtils", "public static <E> boolean matchesAll(final Iterator<E> iterator, final Predicate<? super E> predicate)" ], [ "isEmpty", "org.apache.commons.collections4", "IteratorUtils", "public static boolean isEmpty(final Iterator<?> iterator)" ], [ "contains", "org.apache.commons.collections4", "IteratorUtils", "public static <E> boolean contains(final Iterator<E> iterator, final Object object)" ], [ "get", "org.apache.commons.collections4", "IteratorUtils", "public static <E> E get(final Iterator<E> iterator, final int index)" ], [ "size", "org.apache.commons.collections4", "IteratorUtils", "public static int size(final Iterator<?> iterator)" ], [ "toString", "org.apache.commons.collections4", "IteratorUtils", "public static <E> String toString(final Iterator<E> iterator)" ], [ "toString", "org.apache.commons.collections4", "IteratorUtils", "public static <E> String toString(final Iterator<E> iterator, final Transformer<? super E, String> transformer)" ], [ "toString", "org.apache.commons.collections4", "IteratorUtils", "public static <E> String toString(final Iterator<E> iterator, final Transformer<? super E, String> transformer, final String delimiter, final String prefix, final String suffix)" ], [ "naturalComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E extends Comparable<? super E>> Comparator<E> naturalComparator()" ], [ "chainedComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> Comparator<E> chainedComparator(final Comparator<E>... comparators)" ], [ "chainedComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> Comparator<E> chainedComparator(final Collection<Comparator<E>> comparators)" ], [ "reversedComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> Comparator<E> reversedComparator(final Comparator<E> comparator)" ], [ "booleanComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static Comparator<Boolean> booleanComparator(final boolean trueFirst)" ], [ "nullLowComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> Comparator<E> nullLowComparator(Comparator<E> comparator)" ], [ "nullHighComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> Comparator<E> nullHighComparator(Comparator<E> comparator)" ], [ "transformedComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <I, O> Comparator<I> transformedComparator(Comparator<O> comparator, final Transformer<? super I, ? extends O> transformer)" ], [ "min", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> E min(final E o1, final E o2, Comparator<E> comparator)" ], [ "max", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> E max(final E o1, final E o2, Comparator<E> comparator)" ], [ "unmodifiableBidiMap", "org.apache.commons.collections4.bidimap", "UnmodifiableBidiMap", "public static <K, V> BidiMap<K, V> unmodifiableBidiMap(final BidiMap<? extends K, ? extends V> map)" ], [ "unmodifiableOrderedBidiMap", "org.apache.commons.collections4.bidimap", "UnmodifiableOrderedBidiMap", "public static <K, V> OrderedBidiMap<K, V> unmodifiableOrderedBidiMap(final OrderedBidiMap<? extends K, ? extends V> map)" ], [ "unmodifiableSortedBidiMap", "org.apache.commons.collections4.bidimap", "UnmodifiableSortedBidiMap", "public static <K, V> SortedBidiMap<K, V> unmodifiableSortedBidiMap(final SortedBidiMap<K, ? extends V> map)" ], [ "emptyMultiValuedMap", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> MultiValuedMap<K, V> emptyMultiValuedMap()" ], [ "emptyIfNull", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> MultiValuedMap<K, V> emptyIfNull(final MultiValuedMap<K, V> map)" ], [ "isEmpty", "org.apache.commons.collections4", "MultiMapUtils", "public static boolean isEmpty(final MultiValuedMap<?, ?> map)" ], [ "getCollection", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> Collection<V> getCollection(final MultiValuedMap<K, V> map, final K key)" ], [ "getValuesAsList", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> List<V> getValuesAsList(final MultiValuedMap<K, V> map, final K key)" ], [ "getValuesAsSet", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> Set<V> getValuesAsSet(final MultiValuedMap<K, V> map, final K key)" ], [ "getValuesAsBag", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> Bag<V> getValuesAsBag(final MultiValuedMap<K, V> map, final K key)" ], [ "newListValuedHashMap", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> ListValuedMap<K, V> newListValuedHashMap()" ], [ "newSetValuedHashMap", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> SetValuedMap<K, V> newSetValuedHashMap()" ], [ "unmodifiableMultiValuedMap", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> MultiValuedMap<K, V> unmodifiableMultiValuedMap(final MultiValuedMap<? extends K, ? extends V> map)" ], [ "transformedMultiValuedMap", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> MultiValuedMap<K, V> transformedMultiValuedMap(final MultiValuedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "unmodifiableBoundedCollection", "org.apache.commons.collections4.collection", "UnmodifiableBoundedCollection", "public static <E> BoundedCollection<E> unmodifiableBoundedCollection(final BoundedCollection<? extends E> coll)" ], [ "unmodifiableBoundedCollection", "org.apache.commons.collections4.collection", "UnmodifiableBoundedCollection", "public static <E> BoundedCollection<E> unmodifiableBoundedCollection(Collection<? extends E> coll)" ], [ "transformingCollection", "org.apache.commons.collections4.collection", "TransformedCollection", "public static <E> TransformedCollection<E> transformingCollection(final Collection<E> coll, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedCollection", "org.apache.commons.collections4.collection", "TransformedCollection", "public static <E> TransformedCollection<E> transformedCollection(final Collection<E> collection, final Transformer<? super E, ? extends E> transformer)" ], [ "builder", "org.apache.commons.collections4.collection", "PredicatedCollection", "public static <E> Builder<E> builder(final Predicate<? super E> predicate)" ], [ "notNullBuilder", "org.apache.commons.collections4.collection", "PredicatedCollection", "public static <E> Builder<E> notNullBuilder()" ], [ "predicatedCollection", "org.apache.commons.collections4.collection", "PredicatedCollection", "public static <T> PredicatedCollection<T> predicatedCollection(final Collection<T> coll, final Predicate<? super T> predicate)" ], [ "uniqueIndexedCollection", "org.apache.commons.collections4.collection", "IndexedCollection", "public static <K, C> IndexedCollection<K, C> uniqueIndexedCollection(final Collection<C> coll, final Transformer<C, K> keyTransformer)" ], [ "nonUniqueIndexedCollection", "org.apache.commons.collections4.collection", "IndexedCollection", "public static <K, C> IndexedCollection<K, C> nonUniqueIndexedCollection(final Collection<C> coll, final Transformer<C, K> keyTransformer)" ], [ "synchronizedCollection", "org.apache.commons.collections4.collection", "SynchronizedCollection", "public static <T> SynchronizedCollection<T> synchronizedCollection(final Collection<T> coll)" ], [ "unmodifiableCollection", "org.apache.commons.collections4.collection", "UnmodifiableCollection", "public static <T> Collection<T> unmodifiableCollection(final Collection<? extends T> coll)" ], [ "exceptionFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> exceptionFactory()" ], [ "nullFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> nullFactory()" ], [ "constantFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> constantFactory(final T constantToReturn)" ], [ "prototypeFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> prototypeFactory(final T prototype)" ], [ "instantiateFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> instantiateFactory(final Class<T> classToInstantiate)" ], [ "instantiateFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> instantiateFactory(final Class<T> classToInstantiate, final Class<?>[] paramTypes, final Object[] args)" ], [ "emptyIfNull", "org.apache.commons.collections4", "ListUtils", "public static <T> List<T> emptyIfNull(final List<T> list)" ], [ "defaultIfNull", "org.apache.commons.collections4", "ListUtils", "public static <T> List<T> defaultIfNull(final List<T> list, final List<T> defaultList)" ], [ "intersection", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> intersection(final List<? extends E> list1, final List<? extends E> list2)" ], [ "subtract", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> subtract(final List<E> list1, final List<? extends E> list2)" ], [ "sum", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> sum(final List<? extends E> list1, final List<? extends E> list2)" ], [ "union", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> union(final List<? extends E> list1, final List<? extends E> list2)" ], [ "select", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> select(final Collection<? extends E> inputCollection, final Predicate<? super E> predicate)" ], [ "selectRejected", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> selectRejected(final Collection<? extends E> inputCollection, final Predicate<? super E> predicate)" ], [ "isEqualList", "org.apache.commons.collections4", "ListUtils", "public static boolean isEqualList(final Collection<?> list1, final Collection<?> list2)" ], [ "hashCodeForList", "org.apache.commons.collections4", "ListUtils", "public static int hashCodeForList(final Collection<?> list)" ], [ "retainAll", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> retainAll(final Collection<E> collection, final Collection<?> retain)" ], [ "removeAll", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> removeAll(final Collection<E> collection, final Collection<?> remove)" ], [ "synchronizedList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> synchronizedList(final List<E> list)" ], [ "unmodifiableList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> unmodifiableList(final List<? extends E> list)" ], [ "predicatedList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> predicatedList(final List<E> list, final Predicate<E> predicate)" ], [ "transformedList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> transformedList(final List<E> list, final Transformer<? super E, ? extends E> transformer)" ], [ "lazyList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> lazyList(final List<E> list, final Factory<? extends E> factory)" ], [ "fixedSizeList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> fixedSizeList(final List<E> list)" ], [ "indexOf", "org.apache.commons.collections4", "ListUtils", "public static <E> int indexOf(final List<E> list, final Predicate<E> predicate)" ], [ "longestCommonSubsequence", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> longestCommonSubsequence(final List<E> a, final List<E> b)" ], [ "longestCommonSubsequence", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> longestCommonSubsequence(final List<E> a, final List<E> b, final Equator<? super E> equator)" ], [ "longestCommonSubsequence", "org.apache.commons.collections4", "ListUtils", "public static String longestCommonSubsequence(final CharSequence a, final CharSequence b)" ], [ "partition", "org.apache.commons.collections4", "ListUtils", "public static <T> List<List<T>> partition(final List<T> list, final int size)" ], [ "getObject", "org.apache.commons.collections4", "MapUtils", "public static <K, V> V getObject(final Map<? super K, V> map, final K key)" ], [ "getString", "org.apache.commons.collections4", "MapUtils", "public static <K> String getString(final Map<? super K, ?> map, final K key)" ], [ "getBoolean", "org.apache.commons.collections4", "MapUtils", "public static <K> Boolean getBoolean(final Map<? super K, ?> map, final K key)" ], [ "getNumber", "org.apache.commons.collections4", "MapUtils", "public static <K> Number getNumber(final Map<? super K, ?> map, final K key)" ], [ "getByte", "org.apache.commons.collections4", "MapUtils", "public static <K> Byte getByte(final Map<? super K, ?> map, final K key)" ], [ "getShort", "org.apache.commons.collections4", "MapUtils", "public static <K> Short getShort(final Map<? super K, ?> map, final K key)" ], [ "getInteger", "org.apache.commons.collections4", "MapUtils", "public static <K> Integer getInteger(final Map<? super K, ?> map, final K key)" ], [ "getLong", "org.apache.commons.collections4", "MapUtils", "public static <K> Long getLong(final Map<? super K, ?> map, final K key)" ], [ "getFloat", "org.apache.commons.collections4", "MapUtils", "public static <K> Float getFloat(final Map<? super K, ?> map, final K key)" ], [ "getDouble", "org.apache.commons.collections4", "MapUtils", "public static <K> Double getDouble(final Map<? super K, ?> map, final K key)" ], [ "getMap", "org.apache.commons.collections4", "MapUtils", "public static <K> Map<?, ?> getMap(final Map<? super K, ?> map, final K key)" ], [ "getObject", "org.apache.commons.collections4", "MapUtils", "public static <K, V> V getObject(final Map<K, V> map, final K key, final V defaultValue)" ], [ "getString", "org.apache.commons.collections4", "MapUtils", "public static <K> String getString(final Map<? super K, ?> map, final K key, final String defaultValue)" ], [ "getBoolean", "org.apache.commons.collections4", "MapUtils", "public static <K> Boolean getBoolean(final Map<? super K, ?> map, final K key, final Boolean defaultValue)" ], [ "getNumber", "org.apache.commons.collections4", "MapUtils", "public static <K> Number getNumber(final Map<? super K, ?> map, final K key, final Number defaultValue)" ], [ "getByte", "org.apache.commons.collections4", "MapUtils", "public static <K> Byte getByte(final Map<? super K, ?> map, final K key, final Byte defaultValue)" ], [ "getShort", "org.apache.commons.collections4", "MapUtils", "public static <K> Short getShort(final Map<? super K, ?> map, final K key, final Short defaultValue)" ], [ "getInteger", "org.apache.commons.collections4", "MapUtils", "public static <K> Integer getInteger(final Map<? super K, ?> map, final K key, final Integer defaultValue)" ], [ "getLong", "org.apache.commons.collections4", "MapUtils", "public static <K> Long getLong(final Map<? super K, ?> map, final K key, final Long defaultValue)" ], [ "getFloat", "org.apache.commons.collections4", "MapUtils", "public static <K> Float getFloat(final Map<? super K, ?> map, final K key, final Float defaultValue)" ], [ "getDouble", "org.apache.commons.collections4", "MapUtils", "public static <K> Double getDouble(final Map<? super K, ?> map, final K key, final Double defaultValue)" ], [ "getMap", "org.apache.commons.collections4", "MapUtils", "public static <K> Map<?, ?> getMap(final Map<? super K, ?> map, final K key, final Map<?, ?> defaultValue)" ], [ "getBooleanValue", "org.apache.commons.collections4", "MapUtils", "public static <K> boolean getBooleanValue(final Map<? super K, ?> map, final K key)" ], [ "getByteValue", "org.apache.commons.collections4", "MapUtils", "public static <K> byte getByteValue(final Map<? super K, ?> map, final K key)" ], [ "getShortValue", "org.apache.commons.collections4", "MapUtils", "public static <K> short getShortValue(final Map<? super K, ?> map, final K key)" ], [ "getIntValue", "org.apache.commons.collections4", "MapUtils", "public static <K> int getIntValue(final Map<? super K, ?> map, final K key)" ], [ "getLongValue", "org.apache.commons.collections4", "MapUtils", "public static <K> long getLongValue(final Map<? super K, ?> map, final K key)" ], [ "getFloatValue", "org.apache.commons.collections4", "MapUtils", "public static <K> float getFloatValue(final Map<? super K, ?> map, final K key)" ], [ "getDoubleValue", "org.apache.commons.collections4", "MapUtils", "public static <K> double getDoubleValue(final Map<? super K, ?> map, final K key)" ], [ "getBooleanValue", "org.apache.commons.collections4", "MapUtils", "public static <K> boolean getBooleanValue(final Map<? super K, ?> map, final K key, final boolean defaultValue)" ], [ "getByteValue", "org.apache.commons.collections4", "MapUtils", "public static <K> byte getByteValue(final Map<? super K, ?> map, final K key, final byte defaultValue)" ], [ "getShortValue", "org.apache.commons.collections4", "MapUtils", "public static <K> short getShortValue(final Map<? super K, ?> map, final K key, final short defaultValue)" ], [ "getIntValue", "org.apache.commons.collections4", "MapUtils", "public static <K> int getIntValue(final Map<? super K, ?> map, final K key, final int defaultValue)" ], [ "getLongValue", "org.apache.commons.collections4", "MapUtils", "public static <K> long getLongValue(final Map<? super K, ?> map, final K key, final long defaultValue)" ], [ "getFloatValue", "org.apache.commons.collections4", "MapUtils", "public static <K> float getFloatValue(final Map<? super K, ?> map, final K key, final float defaultValue)" ], [ "getDoubleValue", "org.apache.commons.collections4", "MapUtils", "public static <K> double getDoubleValue(final Map<? super K, ?> map, final K key, final double defaultValue)" ], [ "toProperties", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Properties toProperties(final Map<K, V> map)" ], [ "toMap", "org.apache.commons.collections4", "MapUtils", "public static Map<String, Object> toMap(final ResourceBundle resourceBundle)" ], [ "invertMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Map<V, K> invertMap(final Map<K, V> map)" ], [ "putAll", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Map<K, V> putAll(final Map<K, V> map, final Object[] array)" ], [ "emptyIfNull", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Map<K, V> emptyIfNull(final Map<K, V> map)" ], [ "isEmpty", "org.apache.commons.collections4", "MapUtils", "public static boolean isEmpty(final Map<?, ?> map)" ], [ "isNotEmpty", "org.apache.commons.collections4", "MapUtils", "public static boolean isNotEmpty(final Map<?, ?> map)" ], [ "synchronizedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Map<K, V> synchronizedMap(final Map<K, V> map)" ], [ "unmodifiableMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Map<K, V> unmodifiableMap(final Map<? extends K, ? extends V> map)" ], [ "predicatedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> predicatedMap(final Map<K, V> map, final Predicate<? super K> keyPred, final Predicate<? super V> valuePred)" ], [ "transformedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> transformedMap(final Map<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "fixedSizeMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> fixedSizeMap(final Map<K, V> map)" ], [ "lazyMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> lazyMap(final Map<K, V> map, final Factory<? extends V> factory)" ], [ "lazyMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> lazyMap(final Map<K, V> map, final Transformer<? super K, ? extends V> transformerFactory)" ], [ "orderedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> OrderedMap<K, V> orderedMap(final Map<K, V> map)" ], [ "multiValueMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> MultiValueMap<K, V> multiValueMap(final Map<K, ? super Collection<V>> map)" ], [ "multiValueMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V, C extends Collection<V>> MultiValueMap<K, V> multiValueMap(final Map<K, C> map, final Class<C> collectionClass)" ], [ "multiValueMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V, C extends Collection<V>> MultiValueMap<K, V> multiValueMap(final Map<K, C> map, final Factory<C> collectionFactory)" ], [ "synchronizedSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> synchronizedSortedMap(final SortedMap<K, V> map)" ], [ "unmodifiableSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> unmodifiableSortedMap(final SortedMap<K, ? extends V> map)" ], [ "predicatedSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> predicatedSortedMap(final SortedMap<K, V> map, final Predicate<? super K> keyPred, final Predicate<? super V> valuePred)" ], [ "transformedSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> transformedSortedMap(final SortedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "fixedSizeSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> fixedSizeSortedMap(final SortedMap<K, V> map)" ], [ "lazySortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> lazySortedMap(final SortedMap<K, V> map, final Factory<? extends V> factory)" ], [ "lazySortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> lazySortedMap(final SortedMap<K, V> map, final Transformer<? super K, ? extends V> transformerFactory)" ], [ "iterableMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> iterableMap(final Map<K, V> map)" ], [ "iterableSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableSortedMap<K, V> iterableSortedMap(final SortedMap<K, V> sortedMap)" ], [ "defaultEquator", "org.apache.commons.collections4.functors", "DefaultEquator", "public static <T> DefaultEquator<T> defaultEquator()" ], [ "stringValueTransformer", "org.apache.commons.collections4.functors", "StringValueTransformer", "public static <T> Transformer<T, String> stringValueTransformer()" ], [ "ifTransformer", "org.apache.commons.collections4.functors", "IfTransformer", "public static <I, O> Transformer<I, O> ifTransformer(final Predicate<? super I> predicate, final Transformer<? super I, ? extends O> trueTransformer, final Transformer<? super I, ? extends O> falseTransformer)" ], [ "ifTransformer", "org.apache.commons.collections4.functors", "IfTransformer", "public static <T> Transformer<T, T> ifTransformer(final Predicate<? super T> predicate, final Transformer<? super T, ? extends T> trueTransformer)" ], [ "identityPredicate", "org.apache.commons.collections4.functors", "IdentityPredicate", "public static <T> Predicate<T> identityPredicate(final T object)" ], [ "exceptionClosure", "org.apache.commons.collections4.functors", "ExceptionClosure", "public static <E> Closure<E> exceptionClosure()" ], [ "nopClosure", "org.apache.commons.collections4.functors", "NOPClosure", "public static <E> Closure<E> nopClosure()" ], [ "closureTransformer", "org.apache.commons.collections4.functors", "ClosureTransformer", "public static <T> Transformer<T, T> closureTransformer(final Closure<? super T> closure)" ], [ "copy", "org.apache.commons.collections4.functors", "FunctorUtils", "static <T> Predicate<T>[] copy(final Predicate<? super T>... predicates)" ], [ "coerce", "org.apache.commons.collections4.functors", "FunctorUtils", "static <T> Predicate<T> coerce(final Predicate<? super T> predicate)" ], [ "validate", "org.apache.commons.collections4.functors", "FunctorUtils", "static <T> Predicate<? super T>[] validate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "copy", "org.apache.commons.collections4.functors", "FunctorUtils", "static <E> Closure<E>[] copy(final Closure<? super E>... closures)" ], [ "coerce", "org.apache.commons.collections4.functors", "FunctorUtils", "static <T> Closure<T> coerce(final Closure<? super T> closure)" ], [ "copy", "org.apache.commons.collections4.functors", "FunctorUtils", "static <I, O> Transformer<I, O>[] copy(final Transformer<? super I, ? extends O>... transformers)" ], [ "coerce", "org.apache.commons.collections4.functors", "FunctorUtils", "static <I, O> Transformer<I, O> coerce(final Transformer<? super I, ? extends O> transformer)" ], [ "transformerPredicate", "org.apache.commons.collections4.functors", "TransformerPredicate", "public static <T> Predicate<T> transformerPredicate(final Transformer<? super T, Boolean> transformer)" ], [ "nullPredicate", "org.apache.commons.collections4.functors", "NullPredicate", "public static <T> Predicate<T> nullPredicate()" ], [ "nullTransformer", "org.apache.commons.collections4.functors", "ConstantTransformer", "public static <I, O> Transformer<I, O> nullTransformer()" ], [ "constantTransformer", "org.apache.commons.collections4.functors", "ConstantTransformer", "public static <I, O> Transformer<I, O> constantTransformer(final O constantToReturn)" ], [ "predicateTransformer", "org.apache.commons.collections4.functors", "PredicateTransformer", "public static <T> Transformer<T, Boolean> predicateTransformer(final Predicate<? super T> predicate)" ], [ "whileClosure", "org.apache.commons.collections4.functors", "WhileClosure", "public static <E> Closure<E> whileClosure(final Predicate<? super E> predicate, final Closure<? super E> closure, final boolean doLoop)" ], [ "forClosure", "org.apache.commons.collections4.functors", "ForClosure", "public static <E> Closure<E> forClosure(final int count, final Closure<? super E> closure)" ], [ "nullIsTruePredicate", "org.apache.commons.collections4.functors", "NullIsTruePredicate", "public static <T> Predicate<T> nullIsTruePredicate(final Predicate<? super T> predicate)" ], [ "transformedPredicate", "org.apache.commons.collections4.functors", "TransformedPredicate", "public static <T> Predicate<T> transformedPredicate(final Transformer<? super T, ? extends T> transformer, final Predicate<? super T> predicate)" ], [ "nonePredicate", "org.apache.commons.collections4.functors", "NonePredicate", "public static <T> Predicate<T> nonePredicate(final Predicate<? super T>... predicates)" ], [ "nonePredicate", "org.apache.commons.collections4.functors", "NonePredicate", "public static <T> Predicate<T> nonePredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "exceptionTransformer", "org.apache.commons.collections4.functors", "ExceptionTransformer", "public static <I, O> Transformer<I, O> exceptionTransformer()" ], [ "switchTransformer", "org.apache.commons.collections4.functors", "SwitchTransformer", "public static <I, O> Transformer<I, O> switchTransformer(final Predicate<? super I>[] predicates, final Transformer<? super I, ? extends O>[] transformers, final Transformer<? super I, ? extends O> defaultTransformer)" ], [ "switchTransformer", "org.apache.commons.collections4.functors", "SwitchTransformer", "public static <I, O> Transformer<I, O> switchTransformer(final Map<? extends Predicate<? super I>, ? extends Transformer<? super I, ? extends O>> map)" ], [ "transformerClosure", "org.apache.commons.collections4.functors", "TransformerClosure", "public static <E> Closure<E> transformerClosure(final Transformer<? super E, ?> transformer)" ], [ "orPredicate", "org.apache.commons.collections4.functors", "OrPredicate", "public static <T> Predicate<T> orPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "nopTransformer", "org.apache.commons.collections4.functors", "NOPTransformer", "public static <T> Transformer<T, T> nopTransformer()" ], [ "mapTransformer", "org.apache.commons.collections4.functors", "MapTransformer", "public static <I, O> Transformer<I, O> mapTransformer(final Map<? super I, ? extends O> map)" ], [ "exceptionFactory", "org.apache.commons.collections4.functors", "ExceptionFactory", "public static <T> Factory<T> exceptionFactory()" ], [ "chainedClosure", "org.apache.commons.collections4.functors", "ChainedClosure", "public static <E> Closure<E> chainedClosure(final Closure<? super E>... closures)" ], [ "chainedClosure", "org.apache.commons.collections4.functors", "ChainedClosure", "public static <E> Closure<E> chainedClosure(final Collection<? extends Closure<? super E>> closures)" ], [ "andPredicate", "org.apache.commons.collections4.functors", "AndPredicate", "public static <T> Predicate<T> andPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "prototypeFactory", "org.apache.commons.collections4.functors", "PrototypeFactory", "public static <T> Factory<T> prototypeFactory(final T prototype)" ], [ "exceptionPredicate", "org.apache.commons.collections4.functors", "ExceptionPredicate", "public static <T> Predicate<T> exceptionPredicate()" ], [ "instanceOfPredicate", "org.apache.commons.collections4.functors", "InstanceofPredicate", "public static Predicate<Object> instanceOfPredicate(final Class<?> type)" ], [ "invokerTransformer", "org.apache.commons.collections4.functors", "InvokerTransformer", "public static <I, O> Transformer<I, O> invokerTransformer(final String methodName)" ], [ "invokerTransformer", "org.apache.commons.collections4.functors", "InvokerTransformer", "public static <I, O> Transformer<I, O> invokerTransformer(final String methodName, final Class<?>[] paramTypes, final Object[] args)" ], [ "falsePredicate", "org.apache.commons.collections4.functors", "FalsePredicate", "public static <T> Predicate<T> falsePredicate()" ], [ "cloneTransformer", "org.apache.commons.collections4.functors", "CloneTransformer", "public static <T> Transformer<T, T> cloneTransformer()" ], [ "notPredicate", "org.apache.commons.collections4.functors", "NotPredicate", "public static <T> Predicate<T> notPredicate(final Predicate<? super T> predicate)" ], [ "constantFactory", "org.apache.commons.collections4.functors", "ConstantFactory", "public static <T> Factory<T> constantFactory(final T constantToReturn)" ], [ "chainedTransformer", "org.apache.commons.collections4.functors", "ChainedTransformer", "public static <T> Transformer<T, T> chainedTransformer(final Transformer<? super T, ? extends T>... transformers)" ], [ "chainedTransformer", "org.apache.commons.collections4.functors", "ChainedTransformer", "public static <T> Transformer<T, T> chainedTransformer(final Collection<? extends Transformer<? super T, ? extends T>> transformers)" ], [ "comparatorPredicate", "org.apache.commons.collections4.functors", "ComparatorPredicate", "public static <T> Predicate<T> comparatorPredicate(final T object, final Comparator<T> comparator)" ], [ "comparatorPredicate", "org.apache.commons.collections4.functors", "ComparatorPredicate", "public static <T> Predicate<T> comparatorPredicate(final T object, final Comparator<T> comparator, final Criterion criterion)" ], [ "allPredicate", "org.apache.commons.collections4.functors", "AllPredicate", "public static <T> Predicate<T> allPredicate(final Predicate<? super T>... predicates)" ], [ "allPredicate", "org.apache.commons.collections4.functors", "AllPredicate", "public static <T> Predicate<T> allPredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "nullIsFalsePredicate", "org.apache.commons.collections4.functors", "NullIsFalsePredicate", "public static <T> Predicate<T> nullIsFalsePredicate(final Predicate<? super T> predicate)" ], [ "nullIsExceptionPredicate", "org.apache.commons.collections4.functors", "NullIsExceptionPredicate", "public static <T> Predicate<T> nullIsExceptionPredicate(final Predicate<? super T> predicate)" ], [ "anyPredicate", "org.apache.commons.collections4.functors", "AnyPredicate", "public static <T> Predicate<T> anyPredicate(final Predicate<? super T>... predicates)" ], [ "anyPredicate", "org.apache.commons.collections4.functors", "AnyPredicate", "public static <T> Predicate<T> anyPredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "truePredicate", "org.apache.commons.collections4.functors", "TruePredicate", "public static <T> Predicate<T> truePredicate()" ], [ "factoryTransformer", "org.apache.commons.collections4.functors", "FactoryTransformer", "public static <I, O> Transformer<I, O> factoryTransformer(final Factory<? extends O> factory)" ], [ "notNullPredicate", "org.apache.commons.collections4.functors", "NotNullPredicate", "public static <T> Predicate<T> notNullPredicate()" ], [ "switchClosure", "org.apache.commons.collections4.functors", "SwitchClosure", "public static <E> Closure<E> switchClosure(final Predicate<? super E>[] predicates, final Closure<? super E>[] closures, final Closure<? super E> defaultClosure)" ], [ "switchClosure", "org.apache.commons.collections4.functors", "SwitchClosure", "public static <E> Closure<E> switchClosure(final Map<Predicate<E>, Closure<E>> predicatesAndClosures)" ], [ "uniquePredicate", "org.apache.commons.collections4.functors", "UniquePredicate", "public static <T> Predicate<T> uniquePredicate()" ], [ "instantiateTransformer", "org.apache.commons.collections4.functors", "InstantiateTransformer", "public static <T> Transformer<Class<? extends T>, T> instantiateTransformer()" ], [ "instantiateTransformer", "org.apache.commons.collections4.functors", "InstantiateTransformer", "public static <T> Transformer<Class<? extends T>, T> instantiateTransformer(final Class<?>[] paramTypes, final Object[] args)" ], [ "onePredicate", "org.apache.commons.collections4.functors", "OnePredicate", "public static <T> Predicate<T> onePredicate(final Predicate<? super T>... predicates)" ], [ "onePredicate", "org.apache.commons.collections4.functors", "OnePredicate", "public static <T> Predicate<T> onePredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "equalPredicate", "org.apache.commons.collections4.functors", "EqualPredicate", "public static <T> Predicate<T> equalPredicate(final T object)" ], [ "equalPredicate", "org.apache.commons.collections4.functors", "EqualPredicate", "public static <T> Predicate<T> equalPredicate(final T object, final Equator<T> equator)" ], [ "instantiateFactory", "org.apache.commons.collections4.functors", "InstantiateFactory", "public static <T> Factory<T> instantiateFactory(final Class<T> classToInstantiate, final Class<?>[] paramTypes, final Object[] args)" ], [ "ifClosure", "org.apache.commons.collections4.functors", "IfClosure", "public static <E> Closure<E> ifClosure(final Predicate<? super E> predicate, final Closure<? super E> trueClosure)" ], [ "ifClosure", "org.apache.commons.collections4.functors", "IfClosure", "public static <E> Closure<E> ifClosure(final Predicate<? super E> predicate, final Closure<? super E> trueClosure, final Closure<? super E> falseClosure)" ], [ "getTrueFirstComparator", "org.apache.commons.collections4.comparators", "BooleanComparator", "public static BooleanComparator getTrueFirstComparator()" ], [ "getFalseFirstComparator", "org.apache.commons.collections4.comparators", "BooleanComparator", "public static BooleanComparator getFalseFirstComparator()" ], [ "booleanComparator", "org.apache.commons.collections4.comparators", "BooleanComparator", "public static BooleanComparator booleanComparator(final boolean trueFirst)" ], [ "comparableComparator", "org.apache.commons.collections4.comparators", "ComparableComparator", "public static <E extends Comparable<? super E>> ComparableComparator<E> comparableComparator()" ], [ "emptyCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <T> Collection<T> emptyCollection()" ], [ "emptyIfNull", "org.apache.commons.collections4", "CollectionUtils", "public static <T> Collection<T> emptyIfNull(final Collection<T> collection)" ], [ "union", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> union(final Iterable<? extends O> a, final Iterable<? extends O> b)" ], [ "intersection", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> intersection(final Iterable<? extends O> a, final Iterable<? extends O> b)" ], [ "disjunction", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> disjunction(final Iterable<? extends O> a, final Iterable<? extends O> b)" ], [ "subtract", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> subtract(final Iterable<? extends O> a, final Iterable<? extends O> b)" ], [ "subtract", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> subtract(final Iterable<? extends O> a, final Iterable<? extends O> b, final Predicate<O> p)" ], [ "containsAll", "org.apache.commons.collections4", "CollectionUtils", "public static boolean containsAll(final Collection<?> coll1, final Collection<?> coll2)" ], [ "containsAny", "org.apache.commons.collections4", "CollectionUtils", "public static boolean containsAny(final Collection<?> coll1, final Collection<?> coll2)" ], [ "getCardinalityMap", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Map<O, Integer> getCardinalityMap(final Iterable<? extends O> coll)" ], [ "isSubCollection", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isSubCollection(final Collection<?> a, final Collection<?> b)" ], [ "isProperSubCollection", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isProperSubCollection(final Collection<?> a, final Collection<?> b)" ], [ "isEqualCollection", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isEqualCollection(final Collection<?> a, final Collection<?> b)" ], [ "isEqualCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <E> boolean isEqualCollection(final Collection<? extends E> a, final Collection<? extends E> b, final Equator<? super E> equator)" ], [ "cardinality", "org.apache.commons.collections4", "CollectionUtils", "public static <O> int cardinality(final O obj, final Iterable<? super O> coll)" ], [ "find", "org.apache.commons.collections4", "CollectionUtils", "public static <T> T find(final Iterable<T> collection, final Predicate<? super T> predicate)" ], [ "forAllDo", "org.apache.commons.collections4", "CollectionUtils", "public static <T, C extends Closure<? super T>> C forAllDo(final Iterable<T> collection, final C closure)" ], [ "forAllDo", "org.apache.commons.collections4", "CollectionUtils", "public static <T, C extends Closure<? super T>> C forAllDo(final Iterator<T> iterator, final C closure)" ], [ "forAllButLastDo", "org.apache.commons.collections4", "CollectionUtils", "public static <T, C extends Closure<? super T>> T forAllButLastDo(final Iterable<T> collection, final C closure)" ], [ "forAllButLastDo", "org.apache.commons.collections4", "CollectionUtils", "public static <T, C extends Closure<? super T>> T forAllButLastDo(final Iterator<T> iterator, final C closure)" ], [ "filter", "org.apache.commons.collections4", "CollectionUtils", "public static <T> boolean filter(final Iterable<T> collection, final Predicate<? super T> predicate)" ], [ "filterInverse", "org.apache.commons.collections4", "CollectionUtils", "public static <T> boolean filterInverse(final Iterable<T> collection, final Predicate<? super T> predicate)" ], [ "countMatches", "org.apache.commons.collections4", "CollectionUtils", "public static <C> int countMatches(final Iterable<C> input, final Predicate<? super C> predicate)" ], [ "exists", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean exists(final Iterable<C> input, final Predicate<? super C> predicate)" ], [ "matchesAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean matchesAll(final Iterable<C> input, final Predicate<? super C> predicate)" ], [ "select", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> select(final Iterable<? extends O> inputCollection, final Predicate<? super O> predicate)" ], [ "select", "org.apache.commons.collections4", "CollectionUtils", "public static <O, R extends Collection<? super O>> R select(final Iterable<? extends O> inputCollection, final Predicate<? super O> predicate, final R outputCollection)" ], [ "select", "org.apache.commons.collections4", "CollectionUtils", "public static <O, R extends Collection<? super O>> R select(final Iterable<? extends O> inputCollection, final Predicate<? super O> predicate, R outputCollection, R rejectedCollection)" ], [ "selectRejected", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> selectRejected(final Iterable<? extends O> inputCollection, final Predicate<? super O> predicate)" ], [ "selectRejected", "org.apache.commons.collections4", "CollectionUtils", "public static <O, R extends Collection<? super O>> R selectRejected(final Iterable<? extends O> inputCollection, final Predicate<? super O> predicate, final R outputCollection)" ], [ "collect", "org.apache.commons.collections4", "CollectionUtils", "public static <I, O> Collection<O> collect(final Iterable<I> inputCollection, final Transformer<? super I, ? extends O> transformer)" ], [ "collect", "org.apache.commons.collections4", "CollectionUtils", "public static <I, O> Collection<O> collect(final Iterator<I> inputIterator, final Transformer<? super I, ? extends O> transformer)" ], [ "collect", "org.apache.commons.collections4", "CollectionUtils", "public static <I, O, R extends Collection<? super O>> R collect(final Iterable<? extends I> inputCollection, final Transformer<? super I, ? extends O> transformer, final R outputCollection)" ], [ "collect", "org.apache.commons.collections4", "CollectionUtils", "public static <I, O, R extends Collection<? super O>> R collect(final Iterator<? extends I> inputIterator, final Transformer<? super I, ? extends O> transformer, final R outputCollection)" ], [ "addIgnoreNull", "org.apache.commons.collections4", "CollectionUtils", "public static <T> boolean addIgnoreNull(final Collection<T> collection, final T object)" ], [ "addAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean addAll(final Collection<C> collection, final Iterable<? extends C> iterable)" ], [ "addAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean addAll(final Collection<C> collection, final Iterator<? extends C> iterator)" ], [ "addAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean addAll(final Collection<C> collection, final Enumeration<? extends C> enumeration)" ], [ "addAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean addAll(final Collection<C> collection, final C[] elements)" ], [ "get", "org.apache.commons.collections4", "CollectionUtils", "public static <T> T get(final Iterator<T> iterator, final int index)" ], [ "get", "org.apache.commons.collections4", "CollectionUtils", "public static <T> T get(final Iterable<T> iterable, final int index)" ], [ "get", "org.apache.commons.collections4", "CollectionUtils", "public static Object get(final Object object, final int index)" ], [ "get", "org.apache.commons.collections4", "CollectionUtils", "public static <K, V> Map.Entry<K, V> get(final Map<K, V> map, final int index)" ], [ "size", "org.apache.commons.collections4", "CollectionUtils", "public static int size(final Object object)" ], [ "sizeIsEmpty", "org.apache.commons.collections4", "CollectionUtils", "public static boolean sizeIsEmpty(final Object object)" ], [ "isEmpty", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isEmpty(final Collection<?> coll)" ], [ "isNotEmpty", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isNotEmpty(final Collection<?> coll)" ], [ "isFull", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isFull(final Collection<? extends Object> coll)" ], [ "maxSize", "org.apache.commons.collections4", "CollectionUtils", "public static int maxSize(final Collection<? extends Object> coll)" ], [ "collate", "org.apache.commons.collections4", "CollectionUtils", "public static <O extends Comparable<? super O>> List<O> collate(Iterable<? extends O> a, Iterable<? extends O> b)" ], [ "collate", "org.apache.commons.collections4", "CollectionUtils", "public static <O extends Comparable<? super O>> List<O> collate(final Iterable<? extends O> a, final Iterable<? extends O> b, final boolean includeDuplicates)" ], [ "collate", "org.apache.commons.collections4", "CollectionUtils", "public static <O> List<O> collate(final Iterable<? extends O> a, final Iterable<? extends O> b, final Comparator<? super O> c)" ], [ "collate", "org.apache.commons.collections4", "CollectionUtils", "public static <O> List<O> collate(final Iterable<? extends O> a, final Iterable<? extends O> b, final Comparator<? super O> c, final boolean includeDuplicates)" ], [ "permutations", "org.apache.commons.collections4", "CollectionUtils", "public static <E> Collection<List<E>> permutations(final Collection<E> collection)" ], [ "retainAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> Collection<C> retainAll(final Collection<C> collection, final Collection<?> retain)" ], [ "retainAll", "org.apache.commons.collections4", "CollectionUtils", "public static <E> Collection<E> retainAll(final Iterable<E> collection, final Iterable<? extends E> retain, final Equator<? super E> equator)" ], [ "removeAll", "org.apache.commons.collections4", "CollectionUtils", "public static <E> Collection<E> removeAll(final Collection<E> collection, final Collection<?> remove)" ], [ "removeAll", "org.apache.commons.collections4", "CollectionUtils", "public static <E> Collection<E> removeAll(final Iterable<E> collection, final Iterable<? extends E> remove, final Equator<? super E> equator)" ], [ "synchronizedCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <C> Collection<C> synchronizedCollection(final Collection<C> collection)" ], [ "unmodifiableCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <C> Collection<C> unmodifiableCollection(final Collection<? extends C> collection)" ], [ "predicatedCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <C> Collection<C> predicatedCollection(final Collection<C> collection, final Predicate<? super C> predicate)" ], [ "transformingCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <E> Collection<E> transformingCollection(final Collection<E> collection, final Transformer<? super E, ? extends E> transformer)" ], [ "extractSingleton", "org.apache.commons.collections4", "CollectionUtils", "public static <E> E extractSingleton(final Collection<E> collection)" ], [ "transformingMap", "org.apache.commons.collections4.splitmap", "TransformedSplitMap", "public static <J, K, U, V> TransformedSplitMap<J, K, U, V> transformingMap(final Map<K, V> map, final Transformer<? super J, ? extends K> keyTransformer, final Transformer<? super U, ? extends V> valueTransformer)" ], [ "emptyIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> emptyIterable()" ], [ "chainedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> chainedIterable(final Iterable<? extends E> a, final Iterable<? extends E> b)" ], [ "chainedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> chainedIterable(final Iterable<? extends E> a, final Iterable<? extends E> b, final Iterable<? extends E> c)" ], [ "chainedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> chainedIterable(final Iterable<? extends E> a, final Iterable<? extends E> b, final Iterable<? extends E> c, final Iterable<? extends E> d)" ], [ "chainedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> chainedIterable(final Iterable<? extends E>... iterables)" ], [ "collatedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> collatedIterable(final Iterable<? extends E> a, final Iterable<? extends E> b)" ], [ "collatedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> collatedIterable(final Comparator<? super E> comparator, final Iterable<? extends E> a, final Iterable<? extends E> b)" ], [ "filteredIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> filteredIterable(final Iterable<E> iterable, final Predicate<? super E> predicate)" ], [ "boundedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> boundedIterable(final Iterable<E> iterable, final long maxSize)" ], [ "loopingIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> loopingIterable(final Iterable<E> iterable)" ], [ "reversedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> reversedIterable(final Iterable<E> iterable)" ], [ "skippingIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> skippingIterable(final Iterable<E> iterable, final long elementsToSkip)" ], [ "transformedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <I, O> Iterable<O> transformedIterable(final Iterable<I> iterable, final Transformer<? super I, ? extends O> transformer)" ], [ "uniqueIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> uniqueIterable(final Iterable<E> iterable)" ], [ "unmodifiableIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> unmodifiableIterable(final Iterable<E> iterable)" ], [ "zippingIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> zippingIterable(final Iterable<? extends E> a, final Iterable<? extends E> b)" ], [ "zippingIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> zippingIterable(final Iterable<? extends E> first, final Iterable<? extends E>... others)" ], [ "emptyIfNull", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> emptyIfNull(final Iterable<E> iterable)" ], [ "forEachButLast", "org.apache.commons.collections4", "IterableUtils", "public static <E> E forEachButLast(final Iterable<E> iterable, final Closure<? super E> closure)" ], [ "find", "org.apache.commons.collections4", "IterableUtils", "public static <E> E find(final Iterable<E> iterable, final Predicate<? super E> predicate)" ], [ "indexOf", "org.apache.commons.collections4", "IterableUtils", "public static <E> int indexOf(final Iterable<E> iterable, final Predicate<? super E> predicate)" ], [ "matchesAll", "org.apache.commons.collections4", "IterableUtils", "public static <E> boolean matchesAll(final Iterable<E> iterable, final Predicate<? super E> predicate)" ], [ "matchesAny", "org.apache.commons.collections4", "IterableUtils", "public static <E> boolean matchesAny(final Iterable<E> iterable, final Predicate<? super E> predicate)" ], [ "countMatches", "org.apache.commons.collections4", "IterableUtils", "public static <E> long countMatches(final Iterable<E> input, final Predicate<? super E> predicate)" ], [ "isEmpty", "org.apache.commons.collections4", "IterableUtils", "public static boolean isEmpty(final Iterable<?> iterable)" ], [ "contains", "org.apache.commons.collections4", "IterableUtils", "public static <E> boolean contains(final Iterable<E> iterable, final Object object)" ], [ "contains", "org.apache.commons.collections4", "IterableUtils", "public static <E> boolean contains(final Iterable<? extends E> iterable, final E object, final Equator<? super E> equator)" ], [ "frequency", "org.apache.commons.collections4", "IterableUtils", "public static <E, T extends E> int frequency(final Iterable<E> iterable, final T obj)" ], [ "get", "org.apache.commons.collections4", "IterableUtils", "public static <T> T get(final Iterable<T> iterable, final int index)" ], [ "size", "org.apache.commons.collections4", "IterableUtils", "public static int size(final Iterable<?> iterable)" ], [ "partition", "org.apache.commons.collections4", "IterableUtils", "public static <O> List<List<O>> partition(final Iterable<? extends O> iterable, final Predicate<? super O> predicate)" ], [ "partition", "org.apache.commons.collections4", "IterableUtils", "public static <O> List<List<O>> partition(final Iterable<? extends O> iterable, final Predicate<? super O>... predicates)" ], [ "partition", "org.apache.commons.collections4", "IterableUtils", "public static <O, R extends Collection<O>> List<R> partition(final Iterable<? extends O> iterable, final Factory<R> partitionFactory, final Predicate<? super O>... predicates)" ], [ "toList", "org.apache.commons.collections4", "IterableUtils", "public static <E> List<E> toList(final Iterable<E> iterable)" ], [ "toString", "org.apache.commons.collections4", "IterableUtils", "public static <E> String toString(final Iterable<E> iterable)" ], [ "toString", "org.apache.commons.collections4", "IterableUtils", "public static <E> String toString(final Iterable<E> iterable, final Transformer<? super E, String> transformer)" ], [ "toString", "org.apache.commons.collections4", "IterableUtils", "public static <E> String toString(final Iterable<E> iterable, final Transformer<? super E, String> transformer, final String delimiter, final String prefix, final String suffix)" ], [ "unmodifiableTrie", "org.apache.commons.collections4", "TrieUtils", "public static <K, V> Trie<K, V> unmodifiableTrie(final Trie<K, ? extends V> trie)" ], [ "exceptionClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> exceptionClosure()" ], [ "nopClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> nopClosure()" ], [ "asClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> asClosure(final Transformer<? super E, ?> transformer)" ], [ "forClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> forClosure(final int count, final Closure<? super E> closure)" ], [ "whileClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> whileClosure(final Predicate<? super E> predicate, final Closure<? super E> closure)" ], [ "doWhileClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> doWhileClosure(final Closure<? super E> closure, final Predicate<? super E> predicate)" ], [ "invokerClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> invokerClosure(final String methodName)" ], [ "invokerClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> invokerClosure(final String methodName, final Class<?>[] paramTypes, final Object[] args)" ], [ "chainedClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> chainedClosure(final Closure<? super E>... closures)" ], [ "chainedClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> chainedClosure(final Collection<? extends Closure<? super E>> closures)" ], [ "ifClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> ifClosure(final Predicate<? super E> predicate, final Closure<? super E> trueClosure)" ], [ "ifClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> ifClosure(final Predicate<? super E> predicate, final Closure<? super E> trueClosure, final Closure<? super E> falseClosure)" ], [ "switchClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> switchClosure(final Predicate<? super E>[] predicates, final Closure<? super E>[] closures)" ], [ "switchClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> switchClosure(final Predicate<? super E>[] predicates, final Closure<? super E>[] closures, final Closure<? super E> defaultClosure)" ], [ "switchClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> switchClosure(final Map<Predicate<E>, Closure<E>> predicatesAndClosures)" ], [ "switchMapClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> switchMapClosure(final Map<? extends E, Closure<E>> objectsAndClosures)" ], [ "unmodifiableTrie", "org.apache.commons.collections4.trie", "UnmodifiableTrie", "public static <K, V> Trie<K, V> unmodifiableTrie(final Trie<K, ? extends V> trie)" ], [ "isOutOfBoundsIndex", "org.apache.commons.collections4.trie", "KeyAnalyzer", "static boolean isOutOfBoundsIndex(final int bitIndex)" ], [ "isEqualBitKey", "org.apache.commons.collections4.trie", "KeyAnalyzer", "static boolean isEqualBitKey(final int bitIndex)" ], [ "isNullBitKey", "org.apache.commons.collections4.trie", "KeyAnalyzer", "static boolean isNullBitKey(final int bitIndex)" ], [ "isValidBitIndex", "org.apache.commons.collections4.trie", "KeyAnalyzer", "static boolean isValidBitIndex(final int bitIndex)" ], [ "isValidUplink", "org.apache.commons.collections4.trie", "AbstractPatriciaTrie", "static boolean isValidUplink(final TrieEntry<?, ?> next, final TrieEntry<?, ?> from)" ], [ "compare", "org.apache.commons.collections4.trie", "AbstractBitwiseTrie", "static boolean compare(final Object a, final Object b)" ], [ "transformingSortedMap", "org.apache.commons.collections4.map", "TransformedSortedMap", "public static <K, V> TransformedSortedMap<K, V> transformingSortedMap(final SortedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "transformedSortedMap", "org.apache.commons.collections4.map", "TransformedSortedMap", "public static <K, V> TransformedSortedMap<K, V> transformedSortedMap(final SortedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "predicatedMap", "org.apache.commons.collections4.map", "PredicatedMap", "public static <K, V> PredicatedMap<K, V> predicatedMap(final Map<K, V> map, final Predicate<? super K> keyPredicate, final Predicate<? super V> valuePredicate)" ], [ "fixedSizeSortedMap", "org.apache.commons.collections4.map", "FixedSizeSortedMap", "public static <K, V> FixedSizeSortedMap<K, V> fixedSizeSortedMap(final SortedMap<K, V> map)" ], [ "unmodifiableSortedMap", "org.apache.commons.collections4.map", "UnmodifiableSortedMap", "public static <K, V> SortedMap<K, V> unmodifiableSortedMap(final SortedMap<K, ? extends V> map)" ], [ "predicatedSortedMap", "org.apache.commons.collections4.map", "PredicatedSortedMap", "public static <K, V> PredicatedSortedMap<K, V> predicatedSortedMap(final SortedMap<K, V> map, final Predicate<? super K> keyPredicate, final Predicate<? super V> valuePredicate)" ], [ "defaultedMap", "org.apache.commons.collections4.map", "DefaultedMap", "public static <K, V> DefaultedMap<K, V> defaultedMap(final Map<K, V> map, final V defaultValue)" ], [ "defaultedMap", "org.apache.commons.collections4.map", "DefaultedMap", "public static <K, V> DefaultedMap<K, V> defaultedMap(final Map<K, V> map, final Factory<? extends V> factory)" ], [ "defaultedMap", "org.apache.commons.collections4.map", "DefaultedMap", "public static <K, V> Map<K, V> defaultedMap(final Map<K, V> map, final Transformer<? super K, ? extends V> transformer)" ], [ "fixedSizeMap", "org.apache.commons.collections4.map", "FixedSizeMap", "public static <K, V> FixedSizeMap<K, V> fixedSizeMap(final Map<K, V> map)" ], [ "lazySortedMap", "org.apache.commons.collections4.map", "LazySortedMap", "public static <K, V> LazySortedMap<K, V> lazySortedMap(final SortedMap<K, V> map, final Factory<? extends V> factory)" ], [ "lazySortedMap", "org.apache.commons.collections4.map", "LazySortedMap", "public static <K, V> LazySortedMap<K, V> lazySortedMap(final SortedMap<K, V> map, final Transformer<? super K, ? extends V> factory)" ], [ "unmodifiableOrderedMap", "org.apache.commons.collections4.map", "UnmodifiableOrderedMap", "public static <K, V> OrderedMap<K, V> unmodifiableOrderedMap(final OrderedMap<? extends K, ? extends V> map)" ], [ "unmodifiableMap", "org.apache.commons.collections4.map", "UnmodifiableMap", "public static <K, V> Map<K, V> unmodifiableMap(final Map<? extends K, ? extends V> map)" ], [ "listOrderedMap", "org.apache.commons.collections4.map", "ListOrderedMap", "public static <K, V> ListOrderedMap<K, V> listOrderedMap(final Map<K, V> map)" ], [ "unmodifiableEntrySet", "org.apache.commons.collections4.map", "UnmodifiableEntrySet", "public static <K, V> Set<Map.Entry<K, V>> unmodifiableEntrySet(final Set<Map.Entry<K, V>> set)" ], [ "resolve", "org.apache.commons.collections4.map", "AbstractReferenceMap", "public static ReferenceStrength resolve(final int value)" ], [ "resolve", "org.apache.commons.collections4.map", "ReferenceStrength", "public static ReferenceStrength resolve(final int value)" ], [ "multiKeyMap", "org.apache.commons.collections4.map", "MultiKeyMap", "public static <K, V> MultiKeyMap<K, V> multiKeyMap(final AbstractHashedMap<MultiKey<? extends K>, V> map)" ], [ "lazyMap", "org.apache.commons.collections4.map", "LazyMap", "public static <K, V> LazyMap<K, V> lazyMap(final Map<K, V> map, final Factory<? extends V> factory)" ], [ "lazyMap", "org.apache.commons.collections4.map", "LazyMap", "public static <V, K> LazyMap<K, V> lazyMap(final Map<K, V> map, final Transformer<? super K, ? extends V> factory)" ], [ "multiValueMap", "org.apache.commons.collections4.map", "MultiValueMap", "public static <K, V> MultiValueMap<K, V> multiValueMap(final Map<K, ? super Collection<V>> map)" ], [ "multiValueMap", "org.apache.commons.collections4.map", "MultiValueMap", "public static <K, V, C extends Collection<V>> MultiValueMap<K, V> multiValueMap(final Map<K, ? super C> map, final Class<C> collectionClass)" ], [ "multiValueMap", "org.apache.commons.collections4.map", "MultiValueMap", "public static <K, V, C extends Collection<V>> MultiValueMap<K, V> multiValueMap(final Map<K, ? super C> map, final Factory<C> collectionFactory)" ], [ "transformingMap", "org.apache.commons.collections4.map", "TransformedMap", "public static <K, V> TransformedMap<K, V> transformingMap(final Map<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "transformedMap", "org.apache.commons.collections4.map", "TransformedMap", "public static <K, V> TransformedMap<K, V> transformedMap(final Map<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "synchronizedMultiSet", "org.apache.commons.collections4", "MultiSetUtils", "public static <E> MultiSet<E> synchronizedMultiSet(final MultiSet<E> multiset)" ], [ "unmodifiableMultiSet", "org.apache.commons.collections4", "MultiSetUtils", "public static <E> MultiSet<E> unmodifiableMultiSet(final MultiSet<? extends E> multiset)" ], [ "predicatedMultiSet", "org.apache.commons.collections4", "MultiSetUtils", "public static <E> MultiSet<E> predicatedMultiSet(final MultiSet<E> multiset, final Predicate<? super E> predicate)" ], [ "emptyMultiSet", "org.apache.commons.collections4", "MultiSetUtils", "public static <E> MultiSet<E> emptyMultiSet()" ], [ "unmodifiableMultiValuedMap", "org.apache.commons.collections4.multimap", "UnmodifiableMultiValuedMap", "public static <K, V> UnmodifiableMultiValuedMap<K, V> unmodifiableMultiValuedMap(MultiValuedMap<? extends K, ? extends V> map)" ], [ "transformingMap", "org.apache.commons.collections4.multimap", "TransformedMultiValuedMap", "public static <K, V> TransformedMultiValuedMap<K, V> transformingMap(final MultiValuedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "transformedMap", "org.apache.commons.collections4.multimap", "TransformedMultiValuedMap", "public static <K, V> TransformedMultiValuedMap<K, V> transformedMap(final MultiValuedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "lazyList", "org.apache.commons.collections4.list", "LazyList", "public static <E> LazyList<E> lazyList(final List<E> list, final Factory<? extends E> factory)" ], [ "setUniqueList", "org.apache.commons.collections4.list", "SetUniqueList", "public static <E> SetUniqueList<E> setUniqueList(final List<E> list)" ], [ "unmodifiableList", "org.apache.commons.collections4.list", "UnmodifiableList", "public static <E> List<E> unmodifiableList(final List<? extends E> list)" ], [ "fixedSizeList", "org.apache.commons.collections4.list", "FixedSizeList", "public static <E> FixedSizeList<E> fixedSizeList(final List<E> list)" ], [ "transformingList", "org.apache.commons.collections4.list", "TransformedList", "public static <E> TransformedList<E> transformingList(final List<E> list, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedList", "org.apache.commons.collections4.list", "TransformedList", "public static <E> TransformedList<E> transformedList(final List<E> list, final Transformer<? super E, ? extends E> transformer)" ], [ "growthList", "org.apache.commons.collections4.list", "GrowthList", "public static <E> GrowthList<E> growthList(final List<E> list)" ], [ "predicatedList", "org.apache.commons.collections4.list", "PredicatedList", "public static <T> PredicatedList<T> predicatedList(final List<T> list, final Predicate<? super T> predicate)" ], [ "transformingQueue", "org.apache.commons.collections4.queue", "TransformedQueue", "public static <E> TransformedQueue<E> transformingQueue(final Queue<E> queue, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedQueue", "org.apache.commons.collections4.queue", "TransformedQueue", "public static <E> TransformedQueue<E> transformedQueue(final Queue<E> queue, final Transformer<? super E, ? extends E> transformer)" ], [ "unmodifiableQueue", "org.apache.commons.collections4.queue", "UnmodifiableQueue", "public static <E> Queue<E> unmodifiableQueue(final Queue<? extends E> queue)" ], [ "predicatedQueue", "org.apache.commons.collections4.queue", "PredicatedQueue", "public static <E> PredicatedQueue<E> predicatedQueue(final Queue<E> Queue, final Predicate<? super E> predicate)" ], [ "empty", "org.apache.commons.collections4", "FluentIterable", "public static <T> FluentIterable<T> empty()" ], [ "of", "org.apache.commons.collections4", "FluentIterable", "public static <T> FluentIterable<T> of(final T singleton)" ], [ "of", "org.apache.commons.collections4", "FluentIterable", "public static <T> FluentIterable<T> of(final T... elements)" ], [ "of", "org.apache.commons.collections4", "FluentIterable", "public static <T> FluentIterable<T> of(final Iterable<T> iterable)" ], [ "exceptionTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> exceptionTransformer()" ], [ "nullTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> nullTransformer()" ], [ "nopTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> nopTransformer()" ], [ "cloneTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> cloneTransformer()" ], [ "constantTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> constantTransformer(final O constantToReturn)" ], [ "asTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> asTransformer(final Closure<? super T> closure)" ], [ "asTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, Boolean> asTransformer(final Predicate<? super T> predicate)" ], [ "asTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> asTransformer(final Factory<? extends O> factory)" ], [ "chainedTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> chainedTransformer(final Transformer<? super T, ? extends T>... transformers)" ], [ "chainedTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> chainedTransformer(final Collection<? extends Transformer<? super T, ? extends T>> transformers)" ], [ "ifTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> ifTransformer(final Predicate<? super T> predicate, final Transformer<? super T, ? extends T> trueTransformer)" ], [ "ifTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> ifTransformer(final Predicate<? super I> predicate, final Transformer<? super I, ? extends O> trueTransformer, final Transformer<? super I, ? extends O> falseTransformer)" ], [ "switchTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> switchTransformer(final Predicate<? super I> predicate, final Transformer<? super I, ? extends O> trueTransformer, final Transformer<? super I, ? extends O> falseTransformer)" ], [ "switchTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> switchTransformer(final Predicate<? super I>[] predicates, final Transformer<? super I, ? extends O>[] transformers)" ], [ "switchTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> switchTransformer(final Predicate<? super I>[] predicates, final Transformer<? super I, ? extends O>[] transformers, final Transformer<? super I, ? extends O> defaultTransformer)" ], [ "switchTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> switchTransformer(final Map<Predicate<I>, Transformer<I, O>> predicatesAndTransformers)" ], [ "switchMapTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> switchMapTransformer(final Map<I, Transformer<I, O>> objectsAndTransformers)" ], [ "instantiateTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<Class<? extends T>, T> instantiateTransformer()" ], [ "instantiateTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<Class<? extends T>, T> instantiateTransformer(final Class<?>[] paramTypes, final Object[] args)" ], [ "mapTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> mapTransformer(final Map<? super I, ? extends O> map)" ], [ "invokerTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> invokerTransformer(final String methodName)" ], [ "invokerTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> invokerTransformer(final String methodName, final Class<?>[] paramTypes, final Object[] args)" ], [ "stringValueTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, String> stringValueTransformer()" ], [ "exceptionPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> exceptionPredicate()" ], [ "truePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> truePredicate()" ], [ "falsePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> falsePredicate()" ], [ "nullPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nullPredicate()" ], [ "notNullPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> notNullPredicate()" ], [ "equalPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> equalPredicate(final T value)" ], [ "identityPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> identityPredicate(final T value)" ], [ "instanceofPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static Predicate<Object> instanceofPredicate(final Class<?> type)" ], [ "uniquePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> uniquePredicate()" ], [ "invokerPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> invokerPredicate(final String methodName)" ], [ "invokerPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> invokerPredicate(final String methodName, final Class<?>[] paramTypes, final Object[] args)" ], [ "andPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> andPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "allPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> allPredicate(final Predicate<? super T>... predicates)" ], [ "allPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> allPredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "orPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> orPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "anyPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> anyPredicate(final Predicate<? super T>... predicates)" ], [ "anyPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> anyPredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "eitherPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> eitherPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "onePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> onePredicate(final Predicate<? super T>... predicates)" ], [ "onePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> onePredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "neitherPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> neitherPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "nonePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nonePredicate(final Predicate<? super T>... predicates)" ], [ "nonePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nonePredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "notPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> notPredicate(final Predicate<? super T> predicate)" ], [ "asPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> asPredicate(final Transformer<? super T, Boolean> transformer)" ], [ "nullIsExceptionPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nullIsExceptionPredicate(final Predicate<? super T> predicate)" ], [ "nullIsFalsePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nullIsFalsePredicate(final Predicate<? super T> predicate)" ], [ "nullIsTruePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nullIsTruePredicate(final Predicate<? super T> predicate)" ], [ "transformedPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> transformedPredicate(final Transformer<? super T, ? extends T> transformer, final Predicate<? super T> predicate)" ], [ "emptySet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> emptySet()" ], [ "emptySortedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> emptySortedSet()" ], [ "emptyIfNull", "org.apache.commons.collections4", "SetUtils", "public static <T> Set<T> emptyIfNull(final Set<T> set)" ], [ "isEqualSet", "org.apache.commons.collections4", "SetUtils", "public static boolean isEqualSet(final Collection<?> set1, final Collection<?> set2)" ], [ "hashCodeForSet", "org.apache.commons.collections4", "SetUtils", "public static <T> int hashCodeForSet(final Collection<T> set)" ], [ "newIdentityHashSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> newIdentityHashSet()" ], [ "synchronizedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> synchronizedSet(final Set<E> set)" ], [ "unmodifiableSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> unmodifiableSet(final Set<? extends E> set)" ], [ "predicatedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> predicatedSet(final Set<E> set, final Predicate<? super E> predicate)" ], [ "transformedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> transformedSet(final Set<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "orderedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> orderedSet(final Set<E> set)" ], [ "synchronizedSortedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> synchronizedSortedSet(final SortedSet<E> set)" ], [ "unmodifiableSortedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> unmodifiableSortedSet(final SortedSet<E> set)" ], [ "predicatedSortedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> predicatedSortedSet(final SortedSet<E> set, final Predicate<? super E> predicate)" ], [ "transformedSortedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> transformedSortedSet(final SortedSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "unmodifiableNavigableSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> unmodifiableNavigableSet(final NavigableSet<E> set)" ], [ "predicatedNavigableSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> predicatedNavigableSet(final NavigableSet<E> set, final Predicate<? super E> predicate)" ], [ "transformedNavigableSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> transformedNavigableSet(final NavigableSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "union", "org.apache.commons.collections4", "SetUtils", "public static <E> SetView<E> union(final Set<? extends E> a, final Set<? extends E> b)" ], [ "difference", "org.apache.commons.collections4", "SetUtils", "public static <E> SetView<E> difference(final Set<? extends E> a, final Set<? extends E> b)" ], [ "intersection", "org.apache.commons.collections4", "SetUtils", "public static <E> SetView<E> intersection(final Set<? extends E> a, final Set<? extends E> b)" ], [ "disjunction", "org.apache.commons.collections4", "SetUtils", "public static <E> SetView<E> disjunction(final Set<? extends E> a, final Set<? extends E> b)" ], [ "transformingSet", "org.apache.commons.collections4.set", "TransformedSet", "public static <E> TransformedSet<E> transformingSet(final Set<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedSet", "org.apache.commons.collections4.set", "TransformedSet", "public static <E> Set<E> transformedSet(final Set<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "transformingNavigableSet", "org.apache.commons.collections4.set", "TransformedNavigableSet", "public static <E> TransformedNavigableSet<E> transformingNavigableSet(final NavigableSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedNavigableSet", "org.apache.commons.collections4.set", "TransformedNavigableSet", "public static <E> TransformedNavigableSet<E> transformedNavigableSet(final NavigableSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "predicatedNavigableSet", "org.apache.commons.collections4.set", "PredicatedNavigableSet", "public static <E> PredicatedNavigableSet<E> predicatedNavigableSet(final NavigableSet<E> set, final Predicate<? super E> predicate)" ], [ "listOrderedSet", "org.apache.commons.collections4.set", "ListOrderedSet", "public static <E> ListOrderedSet<E> listOrderedSet(final Set<E> set, final List<E> list)" ], [ "listOrderedSet", "org.apache.commons.collections4.set", "ListOrderedSet", "public static <E> ListOrderedSet<E> listOrderedSet(final Set<E> set)" ], [ "listOrderedSet", "org.apache.commons.collections4.set", "ListOrderedSet", "public static <E> ListOrderedSet<E> listOrderedSet(final List<E> list)" ], [ "unmodifiableSet", "org.apache.commons.collections4.set", "UnmodifiableSet", "public static <E> Set<E> unmodifiableSet(final Set<? extends E> set)" ], [ "mapBackedSet", "org.apache.commons.collections4.set", "MapBackedSet", "public static <E, V> MapBackedSet<E, V> mapBackedSet(final Map<E, ? super V> map)" ], [ "mapBackedSet", "org.apache.commons.collections4.set", "MapBackedSet", "public static <E, V> MapBackedSet<E, V> mapBackedSet(final Map<E, ? super V> map, final V dummyValue)" ], [ "unmodifiableSortedSet", "org.apache.commons.collections4.set", "UnmodifiableSortedSet", "public static <E> SortedSet<E> unmodifiableSortedSet(final SortedSet<E> set)" ], [ "predicatedSortedSet", "org.apache.commons.collections4.set", "PredicatedSortedSet", "public static <E> PredicatedSortedSet<E> predicatedSortedSet(final SortedSet<E> set, final Predicate<? super E> predicate)" ], [ "predicatedSet", "org.apache.commons.collections4.set", "PredicatedSet", "public static <E> PredicatedSet<E> predicatedSet(final Set<E> set, final Predicate<? super E> predicate)" ], [ "unmodifiableNavigableSet", "org.apache.commons.collections4.set", "UnmodifiableNavigableSet", "public static <E> NavigableSet<E> unmodifiableNavigableSet(final NavigableSet<E> set)" ], [ "transformingSortedSet", "org.apache.commons.collections4.set", "TransformedSortedSet", "public static <E> TransformedSortedSet<E> transformingSortedSet(final SortedSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedSortedSet", "org.apache.commons.collections4.set", "TransformedSortedSet", "public static <E> TransformedSortedSet<E> transformedSortedSet(final SortedSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "get", "org.apache.commons.collections4", "EnumerationUtils", "public static <T> T get(final Enumeration<T> e, final int index)" ], [ "toList", "org.apache.commons.collections4", "EnumerationUtils", "public static <E> List<E> toList(final Enumeration<? extends E> enumeration)" ], [ "toList", "org.apache.commons.collections4", "EnumerationUtils", "public static List<String> toList(final StringTokenizer stringTokenizer)" ], [ "unmodifiableQueue", "org.apache.commons.collections4", "QueueUtils", "public static <E> Queue<E> unmodifiableQueue(final Queue<? extends E> queue)" ], [ "predicatedQueue", "org.apache.commons.collections4", "QueueUtils", "public static <E> Queue<E> predicatedQueue(final Queue<E> queue, final Predicate<? super E> predicate)" ], [ "transformingQueue", "org.apache.commons.collections4", "QueueUtils", "public static <E> Queue<E> transformingQueue(final Queue<E> queue, final Transformer<? super E, ? extends E> transformer)" ], [ "emptyQueue", "org.apache.commons.collections4", "QueueUtils", "public static <E> Queue<E> emptyQueue()" ], [ "synchronizedBag", "org.apache.commons.collections4.bag", "SynchronizedBag", "public static <E> SynchronizedBag<E> synchronizedBag(final Bag<E> bag)" ], [ "collectionBag", "org.apache.commons.collections4.bag", "CollectionBag", "public static <E> Bag<E> collectionBag(final Bag<E> bag)" ], [ "unmodifiableBag", "org.apache.commons.collections4.bag", "UnmodifiableBag", "public static <E> Bag<E> unmodifiableBag(final Bag<? extends E> bag)" ], [ "predicatedSortedBag", "org.apache.commons.collections4.bag", "PredicatedSortedBag", "public static <E> PredicatedSortedBag<E> predicatedSortedBag(final SortedBag<E> bag, final Predicate<? super E> predicate)" ], [ "unmodifiableSortedBag", "org.apache.commons.collections4.bag", "UnmodifiableSortedBag", "public static <E> SortedBag<E> unmodifiableSortedBag(final SortedBag<E> bag)" ], [ "transformingSortedBag", "org.apache.commons.collections4.bag", "TransformedSortedBag", "public static <E> TransformedSortedBag<E> transformingSortedBag(final SortedBag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedSortedBag", "org.apache.commons.collections4.bag", "TransformedSortedBag", "public static <E> TransformedSortedBag<E> transformedSortedBag(final SortedBag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "predicatedBag", "org.apache.commons.collections4.bag", "PredicatedBag", "public static <E> PredicatedBag<E> predicatedBag(final Bag<E> bag, final Predicate<? super E> predicate)" ], [ "synchronizedSortedBag", "org.apache.commons.collections4.bag", "SynchronizedSortedBag", "public static <E> SynchronizedSortedBag<E> synchronizedSortedBag(final SortedBag<E> bag)" ], [ "collectionSortedBag", "org.apache.commons.collections4.bag", "CollectionSortedBag", "public static <E> SortedBag<E> collectionSortedBag(final SortedBag<E> bag)" ], [ "transformingBag", "org.apache.commons.collections4.bag", "TransformedBag", "public static <E> Bag<E> transformingBag(final Bag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedBag", "org.apache.commons.collections4.bag", "TransformedBag", "public static <E> Bag<E> transformedBag(final Bag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "predicatedMultiSet", "org.apache.commons.collections4.multiset", "PredicatedMultiSet", "public static <E> PredicatedMultiSet<E> predicatedMultiSet(final MultiSet<E> multiset, final Predicate<? super E> predicate)" ], [ "unmodifiableMultiSet", "org.apache.commons.collections4.multiset", "UnmodifiableMultiSet", "public static <E> MultiSet<E> unmodifiableMultiSet(final MultiSet<? extends E> multiset)" ], [ "synchronizedMultiSet", "org.apache.commons.collections4.multiset", "SynchronizedMultiSet", "public static <E> SynchronizedMultiSet<E> synchronizedMultiSet(final MultiSet<E> multiset)" ], [ "synchronizedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> synchronizedBag(final Bag<E> bag)" ], [ "unmodifiableBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> unmodifiableBag(final Bag<? extends E> bag)" ], [ "predicatedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> predicatedBag(final Bag<E> bag, final Predicate<? super E> predicate)" ], [ "transformingBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> transformingBag(final Bag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "collectionBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> collectionBag(final Bag<E> bag)" ], [ "synchronizedSortedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> SortedBag<E> synchronizedSortedBag(final SortedBag<E> bag)" ], [ "unmodifiableSortedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> SortedBag<E> unmodifiableSortedBag(final SortedBag<E> bag)" ], [ "predicatedSortedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> SortedBag<E> predicatedSortedBag(final SortedBag<E> bag, final Predicate<? super E> predicate)" ], [ "transformingSortedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> SortedBag<E> transformingSortedBag(final SortedBag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "emptyBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> emptyBag()" ], [ "emptySortedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> SortedBag<E> emptySortedBag()" ], [ "resettableEmptyListIterator", "org.apache.commons.collections4.iterators", "EmptyListIterator", "public static <E> ResettableListIterator<E> resettableEmptyListIterator()" ], [ "emptyListIterator", "org.apache.commons.collections4.iterators", "EmptyListIterator", "public static <E> ListIterator<E> emptyListIterator()" ], [ "unmodifiableOrderedMapIterator", "org.apache.commons.collections4.iterators", "UnmodifiableOrderedMapIterator", "public static <K, V> OrderedMapIterator<K, V> unmodifiableOrderedMapIterator(final OrderedMapIterator<K, ? extends V> iterator)" ], [ "unmodifiableIterator", "org.apache.commons.collections4.iterators", "UnmodifiableIterator", "public static <E> Iterator<E> unmodifiableIterator(final Iterator<? extends E> iterator)" ], [ "peekingIterator", "org.apache.commons.collections4.iterators", "PeekingIterator", "public static <E> PeekingIterator<E> peekingIterator(final Iterator<? extends E> iterator)" ], [ "emptyMapIterator", "org.apache.commons.collections4.iterators", "EmptyMapIterator", "public static <K, V> MapIterator<K, V> emptyMapIterator()" ], [ "emptyOrderedIterator", "org.apache.commons.collections4.iterators", "EmptyOrderedIterator", "public static <E> OrderedIterator<E> emptyOrderedIterator()" ], [ "umodifiableListIterator", "org.apache.commons.collections4.iterators", "UnmodifiableListIterator", "public static <E> ListIterator<E> umodifiableListIterator(final ListIterator<? extends E> iterator)" ], [ "emptyOrderedMapIterator", "org.apache.commons.collections4.iterators", "EmptyOrderedMapIterator", "public static <K, V> OrderedMapIterator<K, V> emptyOrderedMapIterator()" ], [ "unmodifiableMapIterator", "org.apache.commons.collections4.iterators", "UnmodifiableMapIterator", "public static <K, V> MapIterator<K, V> unmodifiableMapIterator(final MapIterator<? extends K, ? extends V> iterator)" ], [ "resettableEmptyIterator", "org.apache.commons.collections4.iterators", "EmptyIterator", "public static <E> ResettableIterator<E> resettableEmptyIterator()" ], [ "emptyIterator", "org.apache.commons.collections4.iterators", "EmptyIterator", "public static <E> Iterator<E> emptyIterator()" ], [ "pushbackIterator", "org.apache.commons.collections4.iterators", "PushbackIterator", "public static <E> PushbackIterator<E> pushbackIterator(final Iterator<? extends E> iterator)" ], [ "readableMap", "org.apache.commons.collections4", "SplitMapUtils", "public static <K, V> IterableMap<K, V> readableMap(final Get<K, V> get)" ], [ "writableMap", "org.apache.commons.collections4", "SplitMapUtils", "public static <K, V> Map<K, V> writableMap(final Put<K, V> put)" ] ],
  "tokensProjectClassesNonPrivateStaticAttributes" : [ [ "EMPTY_ITERATOR", "org.apache.commons.collections4", "IteratorUtils", "public static final ResettableIterator EMPTY_ITERATOR = EmptyIterator.RESETTABLE_INSTANCE;" ], [ "EMPTY_LIST_ITERATOR", "org.apache.commons.collections4", "IteratorUtils", "public static final ResettableListIterator EMPTY_LIST_ITERATOR = EmptyListIterator.RESETTABLE_INSTANCE;" ], [ "EMPTY_ORDERED_ITERATOR", "org.apache.commons.collections4", "IteratorUtils", "public static final OrderedIterator EMPTY_ORDERED_ITERATOR = EmptyOrderedIterator.INSTANCE;" ], [ "EMPTY_MAP_ITERATOR", "org.apache.commons.collections4", "IteratorUtils", "public static final MapIterator EMPTY_MAP_ITERATOR = EmptyMapIterator.INSTANCE;" ], [ "EMPTY_ORDERED_MAP_ITERATOR", "org.apache.commons.collections4", "IteratorUtils", "public static final OrderedMapIterator EMPTY_ORDERED_MAP_ITERATOR = EmptyOrderedMapIterator.INSTANCE;" ], [ "NATURAL_COMPARATOR", "org.apache.commons.collections4", "ComparatorUtils", "public static final Comparator NATURAL_COMPARATOR = ComparableComparator.<Comparable>comparableComparator();" ], [ "EMPTY_MULTI_VALUED_MAP", "org.apache.commons.collections4", "MultiMapUtils", "public static final MultiValuedMap EMPTY_MULTI_VALUED_MAP = UnmodifiableMultiValuedMap.unmodifiableMultiValuedMap(new ArrayListValuedHashMap(0, 0));" ], [ "EMPTY_SORTED_MAP", "org.apache.commons.collections4", "MapUtils", "public static final SortedMap EMPTY_SORTED_MAP = UnmodifiableSortedMap.unmodifiableSortedMap(new TreeMap<Object, Object>());" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "DefaultEquator", "public static final DefaultEquator INSTANCE = new DefaultEquator<Object>();" ], [ "HASHCODE_NULL", "org.apache.commons.collections4.functors", "DefaultEquator", "public static final int HASHCODE_NULL = -1;" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "ExceptionClosure", "public static final Closure INSTANCE = new ExceptionClosure<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "NOPClosure", "public static final Closure INSTANCE = new NOPClosure<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "NullPredicate", "public static final Predicate INSTANCE = new NullPredicate<Object>();" ], [ "NULL_INSTANCE", "org.apache.commons.collections4.functors", "ConstantTransformer", "public static final Transformer NULL_INSTANCE = new ConstantTransformer<Object, Object>(null);" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "ExceptionTransformer", "public static final Transformer INSTANCE = new ExceptionTransformer<Object, Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "NOPTransformer", "public static final Transformer INSTANCE = new NOPTransformer<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "ExceptionFactory", "public static final Factory INSTANCE = new ExceptionFactory<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "ExceptionPredicate", "public static final Predicate INSTANCE = new ExceptionPredicate<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "FalsePredicate", "public static final Predicate INSTANCE = new FalsePredicate<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "CloneTransformer", "public static final Transformer INSTANCE = new CloneTransformer<Object>();" ], [ "NULL_INSTANCE", "org.apache.commons.collections4.functors", "ConstantFactory", "public static final Factory NULL_INSTANCE = new ConstantFactory<Object>(null);" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "TruePredicate", "public static final Predicate INSTANCE = new TruePredicate<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "NotNullPredicate", "public static final Predicate INSTANCE = new NotNullPredicate<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.comparators", "ComparableComparator", "public static final ComparableComparator INSTANCE = new ComparableComparator();" ], [ "EMPTY_COLLECTION", "org.apache.commons.collections4", "CollectionUtils", "public static final Collection EMPTY_COLLECTION = UnmodifiableCollection.unmodifiableCollection(new ArrayList<Object>());" ], [ "EMPTY_ITERABLE", "org.apache.commons.collections4", "IterableUtils", "static final FluentIterable EMPTY_ITERABLE = new FluentIterable<Object>() {\n\n    @Override\n    public Iterator<Object> iterator() {\n        return IteratorUtils.emptyIterator();\n    }\n};" ], [ "NULL_BIT_KEY", "org.apache.commons.collections4.trie", "KeyAnalyzer", "public static final int NULL_BIT_KEY = -1;" ], [ "EQUAL_BIT_KEY", "org.apache.commons.collections4.trie", "KeyAnalyzer", "public static final int EQUAL_BIT_KEY = -2;" ], [ "OUT_OF_BOUNDS_BIT_KEY", "org.apache.commons.collections4.trie", "KeyAnalyzer", "public static final int OUT_OF_BOUNDS_BIT_KEY = -3;" ], [ "INSTANCE", "org.apache.commons.collections4.trie.analyzer", "StringKeyAnalyzer", "public static final StringKeyAnalyzer INSTANCE = new StringKeyAnalyzer();" ], [ "LENGTH", "org.apache.commons.collections4.trie.analyzer", "StringKeyAnalyzer", "public static final int LENGTH = Character.SIZE;" ], [ "NO_NEXT_ENTRY", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String NO_NEXT_ENTRY = \"No next() entry in the iteration\";" ], [ "NO_PREVIOUS_ENTRY", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String NO_PREVIOUS_ENTRY = \"No previous() entry in the iteration\";" ], [ "REMOVE_INVALID", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String REMOVE_INVALID = \"remove() can only be called once after next()\";" ], [ "GETKEY_INVALID", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String GETKEY_INVALID = \"getKey() can only be called after next() and before remove()\";" ], [ "GETVALUE_INVALID", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String GETVALUE_INVALID = \"getValue() can only be called after next() and before remove()\";" ], [ "SETVALUE_INVALID", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String SETVALUE_INVALID = \"setValue() can only be called after next() and before remove()\";" ], [ "DEFAULT_CAPACITY", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final int DEFAULT_CAPACITY = 16;" ], [ "DEFAULT_THRESHOLD", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final int DEFAULT_THRESHOLD = 12;" ], [ "DEFAULT_LOAD_FACTOR", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final float DEFAULT_LOAD_FACTOR = 0.75f;" ], [ "MAXIMUM_CAPACITY", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final int MAXIMUM_CAPACITY = 1 << 30;" ], [ "NULL", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final Object NULL = new Object();" ], [ "DEFAULT_MAX_SIZE", "org.apache.commons.collections4.map", "LRUMap", "protected static final int DEFAULT_MAX_SIZE = 100;" ], [ "EMPTY_MULTISET", "org.apache.commons.collections4", "MultiSetUtils", "public static final MultiSet EMPTY_MULTISET = UnmodifiableMultiSet.unmodifiableMultiSet(new HashMultiSet<Object>());" ], [ "EMPTY_SORTED_SET", "org.apache.commons.collections4", "SetUtils", "public static final SortedSet EMPTY_SORTED_SET = UnmodifiableSortedSet.unmodifiableSortedSet(new TreeSet<Object>());" ], [ "EMPTY_QUEUE", "org.apache.commons.collections4", "QueueUtils", "public static final Queue EMPTY_QUEUE = UnmodifiableQueue.unmodifiableQueue(new LinkedList<Object>());" ], [ "EMPTY_BAG", "org.apache.commons.collections4", "BagUtils", "public static final Bag EMPTY_BAG = UnmodifiableBag.unmodifiableBag(new HashBag<Object>());" ], [ "EMPTY_SORTED_BAG", "org.apache.commons.collections4", "BagUtils", "public static final Bag EMPTY_SORTED_BAG = UnmodifiableSortedBag.unmodifiableSortedBag(new TreeBag<Object>());" ], [ "RESETTABLE_INSTANCE", "org.apache.commons.collections4.iterators", "EmptyListIterator", "public static final ResettableListIterator RESETTABLE_INSTANCE = new EmptyListIterator<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.iterators", "EmptyListIterator", "public static final ListIterator INSTANCE = RESETTABLE_INSTANCE;" ], [ "INSTANCE", "org.apache.commons.collections4.iterators", "EmptyMapIterator", "public static final MapIterator INSTANCE = new EmptyMapIterator<Object, Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.iterators", "EmptyOrderedIterator", "public static final OrderedIterator INSTANCE = new EmptyOrderedIterator<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.iterators", "EmptyOrderedMapIterator", "public static final OrderedMapIterator INSTANCE = new EmptyOrderedMapIterator<Object, Object>();" ], [ "RESETTABLE_INSTANCE", "org.apache.commons.collections4.iterators", "EmptyIterator", "public static final ResettableIterator RESETTABLE_INSTANCE = new EmptyIterator<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.iterators", "EmptyIterator", "public static final Iterator INSTANCE = RESETTABLE_INSTANCE;" ] ],
  "tokensMethodJavadocValues" : [ [ "0", "int" ], [ "0", "int" ] ],
  "tokensMethodArguments" : [ [ "predicates", "", "Predicate<? super I>[]" ], [ "transformers", "", "Transformer<? super I, ? extends O>[]" ] ],
  "tokensMethodVariablesNonPrivateNonStaticNonVoidMethods" : [ [ "equals", "java.lang", "Object", "public boolean equals(Object arg0)" ], [ "clone", "java.lang", "Object", "protected native Object clone() throws CloneNotSupportedException" ], [ "hashCode", "java.lang", "Object", "public native int hashCode()" ], [ "toString", "java.lang", "Object", "public String toString()" ], [ "getClass", "java.lang", "Object", "public final native Class<? extends Object> getClass()" ], [ "equals", "", "org.apache.commons.collections4.Predicate<? super I>[]", "public boolean equals(Object);" ], [ "toString", "", "org.apache.commons.collections4.Predicate<? super I>[]", "public String toString()" ], [ "hashCode", "", "org.apache.commons.collections4.Predicate<? super I>[]", "public native int hashCode()" ], [ "getClass", "", "org.apache.commons.collections4.Predicate<? super I>[]", "public final native Class getClass();" ], [ "clone", "", "org.apache.commons.collections4.Predicate<? super I>[]", "public T[] clone();" ], [ "equals", "", "org.apache.commons.collections4.Transformer<? super I, ? extends O>[]", "public boolean equals(Object);" ], [ "toString", "", "org.apache.commons.collections4.Transformer<? super I, ? extends O>[]", "public String toString()" ], [ "hashCode", "", "org.apache.commons.collections4.Transformer<? super I, ? extends O>[]", "public native int hashCode()" ], [ "getClass", "", "org.apache.commons.collections4.Transformer<? super I, ? extends O>[]", "public final native Class getClass();" ], [ "clone", "", "org.apache.commons.collections4.Transformer<? super I, ? extends O>[]", "public T[] clone();" ], [ "transform", "org.apache.commons.collections4", "Transformer", "public abstract O transform(I arg0)" ] ],
  "tokensMethodVariablesNonPrivateNonStaticAttributes" : [ [ "length", "org.apache.commons.collections4", "Predicate[]", "public final int length;" ], [ "length", "org.apache.commons.collections4", "Transformer[]", "public final int length;" ] ],
  "tokensOracleVariablesNonPrivateNonStaticNonVoidMethods" : [ ],
  "tokensOracleVariablesNonPrivateNonStaticAttributes" : [ ]
}, {
  "id" : 8958,
  "oracle" : ";",
  "oracleType" : "EXCEPT_POST",
  "projectName" : "commons-collections4-4.1",
  "packageName" : "org.apache.commons.collections4",
  "className" : "TransformerUtils",
  "javadocTag" : "@throws IllegalArgumentException if the arrays have different sizes",
  "methodJavadoc" : "    /**\n     * Create a new Transformer that calls one of the transformers depending\n     * on the predicates. The transformer at array location 0 is called if the\n     * predicate at array location 0 returned true. Each predicate is evaluated\n     * until one returns true. If no predicates evaluate to true, null is returned.\n     *\n     * @param <I>  the input type\n     * @param <O>  the output type\n     * @param predicates  an array of predicates to check\n     * @param transformers  an array of transformers to call\n     * @return the transformer\n     * @throws NullPointerException if the either array is null\n     * @throws NullPointerException if any element in the arrays is null\n     * @throws IllegalArgumentException if the arrays have different sizes\n     * @see SwitchTransformer\n     */",
  "methodSourceCode" : "public static <I, O> Transformer<I, O> switchTransformer(final Predicate<? super I>[] predicates, final Transformer<? super I, ? extends O>[] transformers){\n    return SwitchTransformer.switchTransformer(predicates, transformers, null);\n}",
  "classJavadoc" : "/**\n * <code>TransformerUtils</code> provides reference implementations and\n * utilities for the Transformer functor interface. The supplied transformers are:\n * <ul>\n * <li>Invoker - returns the result of a method call on the input object\n * <li>Clone - returns a clone of the input object\n * <li>Constant - always returns the same object\n * <li>Closure - performs a Closure and returns the input object\n * <li>Predicate - returns the result of the predicate as a Boolean\n * <li>Factory - returns a new object from a factory\n * <li>Chained - chains two or more transformers together\n * <li>If - calls one transformer or another based on a predicate\n * <li>Switch - calls one transformer based on one or more predicates\n * <li>SwitchMap - calls one transformer looked up from a Map\n * <li>Instantiate - the Class input object is instantiated\n * <li>Map - returns an object from a supplied Map\n * <li>Null - always returns null\n * <li>NOP - returns the input object, which should be immutable\n * <li>Exception - always throws an exception\n * <li>StringValue - returns a <code>java.lang.String</code> representation of the input object\n * </ul>\n * <p>\n * Since v4.1 only transformers which are considered to be unsafe are\n * Serializable. Transformers considered to be unsafe for serialization are:\n * <ul>\n * <li>Invoker\n * <li>Clone\n * <li>Instantiate\n * </ul>\n *\n * @since 3.0\n * @version $Id: TransformerUtils.java 1714362 2015-11-14 20:38:02Z tn $\n */",
  "classSourceCode" : "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.commons.collections4;\n\nimport java.util.Collection;\nimport java.util.Map;\n\nimport org.apache.commons.collections4.functors.ChainedTransformer;\nimport org.apache.commons.collections4.functors.CloneTransformer;\nimport org.apache.commons.collections4.functors.ClosureTransformer;\nimport org.apache.commons.collections4.functors.ConstantTransformer;\nimport org.apache.commons.collections4.functors.EqualPredicate;\nimport org.apache.commons.collections4.functors.ExceptionTransformer;\nimport org.apache.commons.collections4.functors.FactoryTransformer;\nimport org.apache.commons.collections4.functors.IfTransformer;\nimport org.apache.commons.collections4.functors.InstantiateTransformer;\nimport org.apache.commons.collections4.functors.InvokerTransformer;\nimport org.apache.commons.collections4.functors.MapTransformer;\nimport org.apache.commons.collections4.functors.NOPTransformer;\nimport org.apache.commons.collections4.functors.PredicateTransformer;\nimport org.apache.commons.collections4.functors.StringValueTransformer;\nimport org.apache.commons.collections4.functors.SwitchTransformer;\n\n/**\n * <code>TransformerUtils</code> provides reference implementations and\n * utilities for the Transformer functor interface. The supplied transformers are:\n * <ul>\n * <li>Invoker - returns the result of a method call on the input object\n * <li>Clone - returns a clone of the input object\n * <li>Constant - always returns the same object\n * <li>Closure - performs a Closure and returns the input object\n * <li>Predicate - returns the result of the predicate as a Boolean\n * <li>Factory - returns a new object from a factory\n * <li>Chained - chains two or more transformers together\n * <li>If - calls one transformer or another based on a predicate\n * <li>Switch - calls one transformer based on one or more predicates\n * <li>SwitchMap - calls one transformer looked up from a Map\n * <li>Instantiate - the Class input object is instantiated\n * <li>Map - returns an object from a supplied Map\n * <li>Null - always returns null\n * <li>NOP - returns the input object, which should be immutable\n * <li>Exception - always throws an exception\n * <li>StringValue - returns a <code>java.lang.String</code> representation of the input object\n * </ul>\n * <p>\n * Since v4.1 only transformers which are considered to be unsafe are\n * Serializable. Transformers considered to be unsafe for serialization are:\n * <ul>\n * <li>Invoker\n * <li>Clone\n * <li>Instantiate\n * </ul>\n *\n * @since 3.0\n * @version $Id: TransformerUtils.java 1714362 2015-11-14 20:38:02Z tn $\n */\npublic class TransformerUtils {\n\n    /**\n     * This class is not normally instantiated.\n     */\n    private TransformerUtils() {}\n\n    /**\n     * Gets a transformer that always throws an exception.\n     * This could be useful during testing as a placeholder.\n     *\n     * @param <I>  the input type\n     * @param <O>  the output type\n     * @return the transformer\n     * @see ExceptionTransformer\n     */\n    public static <I, O> Transformer<I, O> exceptionTransformer() {\n        return ExceptionTransformer.exceptionTransformer();\n    }\n\n    /**\n     * Gets a transformer that always returns null.\n     *\n     * @param <I>  the input type\n     * @param <O>  the output type\n     * @return the transformer\n     * @see ConstantTransformer\n     */\n    public static <I, O> Transformer<I, O> nullTransformer() {\n        return ConstantTransformer.nullTransformer();\n    }\n\n    /**\n     * Gets a transformer that returns the input object.\n     * The input object should be immutable to maintain the\n     * contract of Transformer (although this is not checked).\n     *\n     * @param <T>  the input/output type\n     * @return the transformer\n     * @see NOPTransformer\n     */\n    public static <T> Transformer<T, T> nopTransformer() {\n        return NOPTransformer.nopTransformer();\n    }\n\n    /**\n     * Gets a transformer that returns a clone of the input object.\n     * The input object will be cloned using one of these techniques (in order):\n     * <ul>\n     * <li>public clone method\n     * <li>public copy constructor\n     * <li>serialization clone\n     * <ul>\n     *\n     * @param <T>  the input/output type\n     * @return the transformer\n     * @see CloneTransformer\n     */\n    public static <T> Transformer<T, T> cloneTransformer() {\n        return CloneTransformer.cloneTransformer();\n    }\n\n    /**\n     * Creates a Transformer that will return the same object each time the\n     * transformer is used.\n     *\n     * @param <I>  the input type\n     * @param <O>  the output type\n     * @param constantToReturn  the constant object to return each time in the transformer\n     * @return the transformer.\n     * @see ConstantTransformer\n     */\n    public static <I, O> Transformer<I, O> constantTransformer(final O constantToReturn) {\n        return ConstantTransformer.constantTransformer(constantToReturn);\n    }\n\n    /**\n     * Creates a Transformer that calls a Closure each time the transformer is used.\n     * The transformer returns the input object.\n     *\n     * @param <T>  the input/output type\n     * @param closure  the closure to run each time in the transformer, not null\n     * @return the transformer\n     * @throws NullPointerException if the closure is null\n     * @see ClosureTransformer\n     */\n    public static <T> Transformer<T, T> asTransformer(final Closure<? super T> closure) {\n        return ClosureTransformer.closureTransformer(closure);\n    }\n\n    /**\n     * Creates a Transformer that calls a Predicate each time the transformer is used.\n     * The transformer will return either Boolean.TRUE or Boolean.FALSE.\n     *\n     * @param <T>  the input type\n     * @param predicate  the predicate to run each time in the transformer, not null\n     * @return the transformer\n     * @throws NullPointerException if the predicate is null\n     * @see PredicateTransformer\n     */\n    public static <T> Transformer<T, Boolean> asTransformer(final Predicate<? super T> predicate) {\n        return PredicateTransformer.predicateTransformer(predicate);\n    }\n\n    /**\n     * Creates a Transformer that calls a Factory each time the transformer is used.\n     * The transformer will return the value returned by the factory.\n     *\n     * @param <I>  the input type\n     * @param <O>  the output type\n     * @param factory  the factory to run each time in the transformer, not null\n     * @return the transformer\n     * @throws NullPointerException if the factory is null\n     * @see FactoryTransformer\n     */\n    public static <I, O> Transformer<I, O> asTransformer(final Factory<? extends O> factory) {\n        return FactoryTransformer.factoryTransformer(factory);\n    }\n\n    /**\n     * Create a new Transformer that calls each transformer in turn, passing the\n     * result into the next transformer.\n     *\n     * @param <T>  the input/output type\n     * @param transformers  an array of transformers to chain\n     * @return the transformer\n     * @throws NullPointerException if the transformers array or any of the transformers is null\n     * @see ChainedTransformer\n     */\n    public static <T> Transformer<T, T> chainedTransformer(\n            final Transformer<? super T, ? extends T>... transformers) {\n        return ChainedTransformer.chainedTransformer(transformers);\n    }\n\n    /**\n     * Create a new Transformer that calls each transformer in turn, passing the\n     * result into the next transformer. The ordering is that of the iterator()\n     * method on the collection.\n     *\n     * @param <T>  the input/output type\n     * @param transformers  a collection of transformers to chain\n     * @return the transformer\n     * @throws NullPointerException if the transformers collection or any of the transformers is null\n     * @see ChainedTransformer\n     */\n    public static <T> Transformer<T, T> chainedTransformer(\n            final Collection<? extends Transformer<? super T, ? extends T>> transformers) {\n        return ChainedTransformer.chainedTransformer(transformers);\n    }\n\n    /**\n     * Create a new Transformer that calls the transformer if the predicate is true,\n     * otherwise the input object is returned unchanged.\n     *\n     * @param <T>  the input / output type\n     * @param predicate  the predicate to switch on\n     * @param trueTransformer  the transformer called if the predicate is true\n     * @return the transformer\n     * @throws NullPointerException if either the predicate or transformer is null\n     * @see IfTransformer\n     * @since 4.1\n     */\n    public static <T> Transformer<T, T> ifTransformer(final Predicate<? super T> predicate,\n                                                      final Transformer<? super T, ? extends T> trueTransformer) {\n        return IfTransformer.ifTransformer(predicate, trueTransformer);\n    }\n\n    /**\n     * Create a new Transformer that calls one of two transformers depending\n     * on the specified predicate.\n     *\n     * @param <I>  the input type\n     * @param <O>  the output type\n     * @param predicate  the predicate to switch on\n     * @param trueTransformer  the transformer called if the predicate is true\n     * @param falseTransformer  the transformer called if the predicate is false\n     * @return the transformer\n     * @throws NullPointerException if either the predicate or transformer is null\n     * @see IfTransformer\n     * @since 4.1\n     */\n    public static <I, O> Transformer<I, O> ifTransformer(final Predicate<? super I> predicate,\n                                                         final Transformer<? super I, ? extends O> trueTransformer,\n                                                         final Transformer<? super I, ? extends O> falseTransformer) {\n        return IfTransformer.ifTransformer(predicate, trueTransformer, falseTransformer);\n    }\n\n    /**\n     * Create a new Transformer that calls one of two transformers depending\n     * on the specified predicate.\n     *\n     * @param <I>  the input type\n     * @param <O>  the output type\n     * @param predicate  the predicate to switch on\n     * @param trueTransformer  the transformer called if the predicate is true\n     * @param falseTransformer  the transformer called if the predicate is false\n     * @return the transformer\n     * @throws NullPointerException if either the predicate or transformer is null\n     * @see SwitchTransformer\n     * @deprecated as of 4.1, use {@link #ifTransformer(Predicate, Transformer, Transformer))\n     */\n    @SuppressWarnings(\"unchecked\")\n    @Deprecated\n    public static <I, O> Transformer<I, O> switchTransformer(final Predicate<? super I> predicate,\n            final Transformer<? super I, ? extends O> trueTransformer,\n            final Transformer<? super I, ? extends O> falseTransformer) {\n        return SwitchTransformer.switchTransformer(new Predicate[] { predicate },\n                                                   new Transformer[] { trueTransformer }, falseTransformer);\n    }\n\n    /**\n     * Create a new Transformer that calls one of the transformers depending\n     * on the predicates. The transformer at array location 0 is called if the\n     * predicate at array location 0 returned true. Each predicate is evaluated\n     * until one returns true. If no predicates evaluate to true, null is returned.\n     *\n     * @param <I>  the input type\n     * @param <O>  the output type\n     * @param predicates  an array of predicates to check\n     * @param transformers  an array of transformers to call\n     * @return the transformer\n     * @throws NullPointerException if the either array is null\n     * @throws NullPointerException if any element in the arrays is null\n     * @throws IllegalArgumentException if the arrays have different sizes\n     * @see SwitchTransformer\n     */\n    public static <I, O> Transformer<I, O> switchTransformer(final Predicate<? super I>[] predicates,\n            final Transformer<? super I, ? extends O>[] transformers) {\n        return SwitchTransformer.switchTransformer(predicates, transformers, null);\n    }\n\n    /**\n     * Create a new Transformer that calls one of the transformers depending\n     * on the predicates. The transformer at array location 0 is called if the\n     * predicate at array location 0 returned true. Each predicate is evaluated\n     * until one returns true. If no predicates evaluate to true, the default\n     * transformer is called. If the default transformer is null, null is returned.\n     *\n     * @param <I>  the input type\n     * @param <O>  the output type\n     * @param predicates  an array of predicates to check\n     * @param transformers  an array of transformers to call\n     * @param defaultTransformer  the default to call if no predicate matches, null means return null\n     * @return the transformer\n     * @throws NullPointerException if the either array is null\n     * @throws NullPointerException if any element in the arrays is null\n     * @throws IllegalArgumentException if the arrays have different sizes\n     * @see SwitchTransformer\n     */\n    public static <I, O> Transformer<I, O> switchTransformer(final Predicate<? super I>[] predicates,\n            final Transformer<? super I, ? extends O>[] transformers,\n            final Transformer<? super I, ? extends O> defaultTransformer) {\n        return SwitchTransformer.switchTransformer(predicates, transformers, defaultTransformer);\n    }\n\n    /**\n     * Create a new Transformer that calls one of the transformers depending\n     * on the predicates.\n     * <p>\n     * The Map consists of Predicate keys and Transformer values. A transformer\n     * is called if its matching predicate returns true. Each predicate is evaluated\n     * until one returns true. If no predicates evaluate to true, the default\n     * transformer is called. The default transformer is set in the map with a\n     * null key. If no default transformer is set, null will be returned in a default\n     * case. The ordering is that of the iterator() method on the entryset collection\n     * of the map.\n     *\n     * @param <I>  the input type\n     * @param <O>  the output type\n     * @param predicatesAndTransformers  a map of predicates to transformers\n     * @return the transformer\n     * @throws NullPointerException if the map is null\n     * @throws NullPointerException if any transformer in the map is null\n     * @throws ClassCastException  if the map elements are of the wrong type\n     * @see SwitchTransformer\n     */\n    public static <I, O> Transformer<I, O> switchTransformer(\n            final Map<Predicate<I>, Transformer<I, O>> predicatesAndTransformers) {\n        return SwitchTransformer.switchTransformer(predicatesAndTransformers);\n    }\n\n    /**\n     * Create a new Transformer that uses the input object as a key to find the\n     * transformer to call.\n     * <p>\n     * The Map consists of object keys and Transformer values. A transformer\n     * is called if the input object equals the key. If there is no match, the\n     * default transformer is called. The default transformer is set in the map\n     * using a null key. If no default is set, null will be returned in a default case.\n     *\n     * @param <I>  the input type\n     * @param <O>  the output type\n     * @param objectsAndTransformers  a map of objects to transformers\n     * @return the transformer\n     * @throws NullPointerException if the map is null\n     * @throws NullPointerException if any transformer in the map is null\n     * @see SwitchTransformer\n     */\n    @SuppressWarnings(\"unchecked\")\n    public static <I, O> Transformer<I, O> switchMapTransformer(\n            final Map<I, Transformer<I, O>> objectsAndTransformers) {\n\n        if (objectsAndTransformers == null) {\n            throw new NullPointerException(\"The object and transformer map must not be null\");\n        }\n        final Transformer<? super I, ? extends O> def = objectsAndTransformers.remove(null);\n        final int size = objectsAndTransformers.size();\n        final Transformer<? super I, ? extends O>[] trs = new Transformer[size];\n        final Predicate<I>[] preds = new Predicate[size];\n        int i = 0;\n        for (final Map.Entry<I, Transformer<I, O>> entry : objectsAndTransformers.entrySet()) {\n            preds[i] = EqualPredicate.<I>equalPredicate(entry.getKey());\n            trs[i++] = entry.getValue();\n        }\n        return TransformerUtils.switchTransformer(preds, trs, def);\n    }\n\n    /**\n     * Gets a Transformer that expects an input Class object that it will instantiate.\n     *\n     * @param <T>  the output type\n     * @return the transformer\n     * @see InstantiateTransformer\n     */\n    public static <T> Transformer<Class<? extends T>, T> instantiateTransformer() {\n        return InstantiateTransformer.instantiateTransformer();\n    }\n\n    /**\n     * Creates a Transformer that expects an input Class object that it will\n     * instantiate. The constructor used is determined by the arguments specified\n     * to this method.\n     *\n     * @param <T>  the output type\n     * @param paramTypes  parameter types for the constructor, can be null\n     * @param args  the arguments to pass to the constructor, can be null\n     * @return the transformer\n     * @throws IllegalArgumentException if the paramTypes and args don't match\n     * @see InstantiateTransformer\n     */\n    public static <T> Transformer<Class<? extends T>, T> instantiateTransformer(\n            final Class<?>[] paramTypes, final Object[] args) {\n        return InstantiateTransformer.instantiateTransformer(paramTypes, args);\n    }\n\n    /**\n     * Creates a Transformer that uses the passed in Map to transform the input\n     * object (as a simple lookup).\n     *\n     * @param <I>  the input type\n     * @param <O>  the output type\n     * @param map  the map to use to transform the objects\n     * @return the transformer, or {@link ConstantTransformer#nullTransformer()} if the\n     *   {@code map} is {@code null}\n     * @see MapTransformer\n     */\n    public static <I, O> Transformer<I, O> mapTransformer(final Map<? super I, ? extends O> map) {\n        return MapTransformer.mapTransformer(map);\n    }\n\n    /**\n     * Gets a Transformer that invokes a method on the input object.\n     * The method must have no parameters. If the input object is null,\n     * null is returned.\n     * <p>\n     * For example, <code>TransformerUtils.invokerTransformer(\"getName\");</code>\n     * will call the <code>getName/code> method on the input object to\n     * determine the transformer result.\n     *\n     * @param <I>  the input type\n     * @param <O>  the output type\n     * @param methodName  the method name to call on the input object, may not be null\n     * @return the transformer\n     * @throws NullPointerException if the methodName is null.\n     * @see InvokerTransformer\n     */\n    public static <I, O> Transformer<I, O> invokerTransformer(final String methodName) {\n        return InvokerTransformer.invokerTransformer(methodName, null, null);\n    }\n\n    /**\n     * Gets a Transformer that invokes a method on the input object.\n     * The method parameters are specified. If the input object is {@code null},\n     * {@code null} is returned.\n     *\n     * @param <I>  the input type\n     * @param <O>  the output type\n     * @param methodName  the name of the method\n     * @param paramTypes  the parameter types\n     * @param args  the arguments\n     * @return the transformer\n     * @throws NullPointerException if the method name is null\n     * @throws IllegalArgumentException if the paramTypes and args don't match\n     * @see InvokerTransformer\n     */\n    public static <I, O> Transformer<I, O> invokerTransformer(final String methodName, final Class<?>[] paramTypes,\n                                                              final Object[] args) {\n        return InvokerTransformer.invokerTransformer(methodName, paramTypes, args);\n    }\n\n    /**\n     * Gets a transformer that returns a <code>java.lang.String</code>\n     * representation of the input object. This is achieved via the\n     * <code>toString</code> method, <code>null</code> returns 'null'.\n     *\n     * @param <T>  the input type\n     * @return the transformer\n     * @see StringValueTransformer\n     */\n    public static <T> Transformer<T, String> stringValueTransformer() {\n        return StringValueTransformer.stringValueTransformer();\n    }\n\n}\n",
  "tokensGeneralGrammar" : [ "null", "true", "false", ",", ".", ":", ";", "?", "(", ")", "jdVar", "stream", "Arrays", "allMatch", "noneMatch", "anyMatch", "~", ">>", "<<", ">>>", "|", "&", "^", "+", "-", "/", "*", "%", "&&", "||", ">=", "<=", ">", "<", "==", "!=", "instanceof", "class", "methodResultID", "this" ],
  "tokensGeneralValuesGlobalDictionary" : [ [ "0", "int" ], [ "1", "int" ], [ "-1", "int" ], [ "0.0", "double" ], [ "1.0", "double" ], [ "-1.0", "double" ], [ "\"\"", "String" ], [ "\" \"", "String" ] ],
  "tokensProjectClasses" : [ [ "BidiMap", "org.apache.commons.collections4" ], [ "Equator", "org.apache.commons.collections4" ], [ "MultiSet", "org.apache.commons.collections4" ], [ "IteratorUtils", "org.apache.commons.collections4" ], [ "ComparatorUtils", "org.apache.commons.collections4" ], [ "FunctorException", "org.apache.commons.collections4" ], [ "AbstractDualBidiMap", "org.apache.commons.collections4.bidimap" ], [ "UnmodifiableBidiMap", "org.apache.commons.collections4.bidimap" ], [ "AbstractOrderedBidiMapDecorator", "org.apache.commons.collections4.bidimap" ], [ "UnmodifiableOrderedBidiMap", "org.apache.commons.collections4.bidimap" ], [ "AbstractBidiMapDecorator", "org.apache.commons.collections4.bidimap" ], [ "DualLinkedHashBidiMap", "org.apache.commons.collections4.bidimap" ], [ "UnmodifiableSortedBidiMap", "org.apache.commons.collections4.bidimap" ], [ "AbstractSortedBidiMapDecorator", "org.apache.commons.collections4.bidimap" ], [ "DualHashBidiMap", "org.apache.commons.collections4.bidimap" ], [ "DualTreeBidiMap", "org.apache.commons.collections4.bidimap" ], [ "TreeBidiMap", "org.apache.commons.collections4.bidimap" ], [ "MultiMapUtils", "org.apache.commons.collections4" ], [ "BoundedCollection", "org.apache.commons.collections4" ], [ "UnmodifiableBoundedCollection", "org.apache.commons.collections4.collection" ], [ "CompositeCollection", "org.apache.commons.collections4.collection" ], [ "TransformedCollection", "org.apache.commons.collections4.collection" ], [ "PredicatedCollection", "org.apache.commons.collections4.collection" ], [ "IndexedCollection", "org.apache.commons.collections4.collection" ], [ "SynchronizedCollection", "org.apache.commons.collections4.collection" ], [ "UnmodifiableCollection", "org.apache.commons.collections4.collection" ], [ "AbstractCollectionDecorator", "org.apache.commons.collections4.collection" ], [ "OrderedBidiMap", "org.apache.commons.collections4" ], [ "FactoryUtils", "org.apache.commons.collections4" ], [ "IterableGet", "org.apache.commons.collections4" ], [ "ListUtils", "org.apache.commons.collections4" ], [ "Closure", "org.apache.commons.collections4" ], [ "IterableSortedMap", "org.apache.commons.collections4" ], [ "MapUtils", "org.apache.commons.collections4" ], [ "Transformer", "org.apache.commons.collections4" ], [ "DefaultEquator", "org.apache.commons.collections4.functors" ], [ "StringValueTransformer", "org.apache.commons.collections4.functors" ], [ "PredicateDecorator", "org.apache.commons.collections4.functors" ], [ "IfTransformer", "org.apache.commons.collections4.functors" ], [ "IdentityPredicate", "org.apache.commons.collections4.functors" ], [ "ExceptionClosure", "org.apache.commons.collections4.functors" ], [ "NOPClosure", "org.apache.commons.collections4.functors" ], [ "ClosureTransformer", "org.apache.commons.collections4.functors" ], [ "FunctorUtils", "org.apache.commons.collections4.functors" ], [ "TransformerPredicate", "org.apache.commons.collections4.functors" ], [ "NullPredicate", "org.apache.commons.collections4.functors" ], [ "ConstantTransformer", "org.apache.commons.collections4.functors" ], [ "PredicateTransformer", "org.apache.commons.collections4.functors" ], [ "WhileClosure", "org.apache.commons.collections4.functors" ], [ "ForClosure", "org.apache.commons.collections4.functors" ], [ "NullIsTruePredicate", "org.apache.commons.collections4.functors" ], [ "TransformedPredicate", "org.apache.commons.collections4.functors" ], [ "NonePredicate", "org.apache.commons.collections4.functors" ], [ "ExceptionTransformer", "org.apache.commons.collections4.functors" ], [ "SwitchTransformer", "org.apache.commons.collections4.functors" ], [ "TransformerClosure", "org.apache.commons.collections4.functors" ], [ "OrPredicate", "org.apache.commons.collections4.functors" ], [ "NOPTransformer", "org.apache.commons.collections4.functors" ], [ "MapTransformer", "org.apache.commons.collections4.functors" ], [ "ExceptionFactory", "org.apache.commons.collections4.functors" ], [ "ChainedClosure", "org.apache.commons.collections4.functors" ], [ "AndPredicate", "org.apache.commons.collections4.functors" ], [ "PrototypeFactory", "org.apache.commons.collections4.functors" ], [ "ExceptionPredicate", "org.apache.commons.collections4.functors" ], [ "AbstractQuantifierPredicate", "org.apache.commons.collections4.functors" ], [ "InstanceofPredicate", "org.apache.commons.collections4.functors" ], [ "InvokerTransformer", "org.apache.commons.collections4.functors" ], [ "FalsePredicate", "org.apache.commons.collections4.functors" ], [ "CloneTransformer", "org.apache.commons.collections4.functors" ], [ "NotPredicate", "org.apache.commons.collections4.functors" ], [ "ConstantFactory", "org.apache.commons.collections4.functors" ], [ "ChainedTransformer", "org.apache.commons.collections4.functors" ], [ "ComparatorPredicate", "org.apache.commons.collections4.functors" ], [ "CatchAndRethrowClosure", "org.apache.commons.collections4.functors" ], [ "AllPredicate", "org.apache.commons.collections4.functors" ], [ "NullIsFalsePredicate", "org.apache.commons.collections4.functors" ], [ "NullIsExceptionPredicate", "org.apache.commons.collections4.functors" ], [ "AnyPredicate", "org.apache.commons.collections4.functors" ], [ "TruePredicate", "org.apache.commons.collections4.functors" ], [ "FactoryTransformer", "org.apache.commons.collections4.functors" ], [ "NotNullPredicate", "org.apache.commons.collections4.functors" ], [ "SwitchClosure", "org.apache.commons.collections4.functors" ], [ "UniquePredicate", "org.apache.commons.collections4.functors" ], [ "InstantiateTransformer", "org.apache.commons.collections4.functors" ], [ "OnePredicate", "org.apache.commons.collections4.functors" ], [ "EqualPredicate", "org.apache.commons.collections4.functors" ], [ "InstantiateFactory", "org.apache.commons.collections4.functors" ], [ "IfClosure", "org.apache.commons.collections4.functors" ], [ "ResettableListIterator", "org.apache.commons.collections4" ], [ "OrderedIterator", "org.apache.commons.collections4" ], [ "ComparatorChain", "org.apache.commons.collections4.comparators" ], [ "BooleanComparator", "org.apache.commons.collections4.comparators" ], [ "ReverseComparator", "org.apache.commons.collections4.comparators" ], [ "ComparableComparator", "org.apache.commons.collections4.comparators" ], [ "TransformingComparator", "org.apache.commons.collections4.comparators" ], [ "FixedOrderComparator", "org.apache.commons.collections4.comparators" ], [ "NullComparator", "org.apache.commons.collections4.comparators" ], [ "CollectionUtils", "org.apache.commons.collections4" ], [ "ListValuedMap", "org.apache.commons.collections4" ], [ "AbstractIterableGetMapDecorator", "org.apache.commons.collections4.splitmap" ], [ "TransformedSplitMap", "org.apache.commons.collections4.splitmap" ], [ "Factory", "org.apache.commons.collections4" ], [ "IterableUtils", "org.apache.commons.collections4" ], [ "Bag", "org.apache.commons.collections4" ], [ "Predicate", "org.apache.commons.collections4" ], [ "SortedBag", "org.apache.commons.collections4" ], [ "TrieUtils", "org.apache.commons.collections4" ], [ "ClosureUtils", "org.apache.commons.collections4" ], [ "PatriciaTrie", "org.apache.commons.collections4.trie" ], [ "UnmodifiableTrie", "org.apache.commons.collections4.trie" ], [ "KeyAnalyzer", "org.apache.commons.collections4.trie" ], [ "AbstractPatriciaTrie", "org.apache.commons.collections4.trie" ], [ "AbstractBitwiseTrie", "org.apache.commons.collections4.trie" ], [ "StringKeyAnalyzer", "org.apache.commons.collections4.trie.analyzer" ], [ "TransformedSortedMap", "org.apache.commons.collections4.map" ], [ "AbstractLinkedMap", "org.apache.commons.collections4.map" ], [ "Flat3Map", "org.apache.commons.collections4.map" ], [ "PredicatedMap", "org.apache.commons.collections4.map" ], [ "FixedSizeSortedMap", "org.apache.commons.collections4.map" ], [ "UnmodifiableSortedMap", "org.apache.commons.collections4.map" ], [ "PredicatedSortedMap", "org.apache.commons.collections4.map" ], [ "DefaultedMap", "org.apache.commons.collections4.map" ], [ "ReferenceIdentityMap", "org.apache.commons.collections4.map" ], [ "AbstractSortedMapDecorator", "org.apache.commons.collections4.map" ], [ "AbstractInputCheckedMapDecorator", "org.apache.commons.collections4.map" ], [ "FixedSizeMap", "org.apache.commons.collections4.map" ], [ "LazySortedMap", "org.apache.commons.collections4.map" ], [ "UnmodifiableOrderedMap", "org.apache.commons.collections4.map" ], [ "CaseInsensitiveMap", "org.apache.commons.collections4.map" ], [ "AbstractHashedMap", "org.apache.commons.collections4.map" ], [ "AbstractOrderedMapDecorator", "org.apache.commons.collections4.map" ], [ "UnmodifiableMap", "org.apache.commons.collections4.map" ], [ "EntrySetToMapIteratorAdapter", "org.apache.commons.collections4.map" ], [ "AbstractIterableMap", "org.apache.commons.collections4.map" ], [ "ListOrderedMap", "org.apache.commons.collections4.map" ], [ "LinkedMap", "org.apache.commons.collections4.map" ], [ "SingletonMap", "org.apache.commons.collections4.map" ], [ "UnmodifiableEntrySet", "org.apache.commons.collections4.map" ], [ "StaticBucketMap", "org.apache.commons.collections4.map" ], [ "AbstractMapDecorator", "org.apache.commons.collections4.map" ], [ "AbstractReferenceMap", "org.apache.commons.collections4.map" ], [ "MultiKeyMap", "org.apache.commons.collections4.map" ], [ "HashedMap", "org.apache.commons.collections4.map" ], [ "LazyMap", "org.apache.commons.collections4.map" ], [ "PassiveExpiringMap", "org.apache.commons.collections4.map" ], [ "MultiValueMap", "org.apache.commons.collections4.map" ], [ "LRUMap", "org.apache.commons.collections4.map" ], [ "ReferenceMap", "org.apache.commons.collections4.map" ], [ "TransformedMap", "org.apache.commons.collections4.map" ], [ "CompositeMap", "org.apache.commons.collections4.map" ], [ "UnmodifiableMapEntry", "org.apache.commons.collections4.keyvalue" ], [ "MultiKey", "org.apache.commons.collections4.keyvalue" ], [ "DefaultMapEntry", "org.apache.commons.collections4.keyvalue" ], [ "DefaultKeyValue", "org.apache.commons.collections4.keyvalue" ], [ "AbstractMapEntryDecorator", "org.apache.commons.collections4.keyvalue" ], [ "AbstractKeyValue", "org.apache.commons.collections4.keyvalue" ], [ "TiedMapEntry", "org.apache.commons.collections4.keyvalue" ], [ "AbstractMapEntry", "org.apache.commons.collections4.keyvalue" ], [ "MultiSetUtils", "org.apache.commons.collections4" ], [ "MapIterator", "org.apache.commons.collections4" ], [ "AbstractMultiValuedMap", "org.apache.commons.collections4.multimap" ], [ "UnmodifiableMultiValuedMap", "org.apache.commons.collections4.multimap" ], [ "HashSetValuedHashMap", "org.apache.commons.collections4.multimap" ], [ "TransformedMultiValuedMap", "org.apache.commons.collections4.multimap" ], [ "AbstractSetValuedMap", "org.apache.commons.collections4.multimap" ], [ "AbstractListValuedMap", "org.apache.commons.collections4.multimap" ], [ "ArrayListValuedHashMap", "org.apache.commons.collections4.multimap" ], [ "AbstractMultiValuedMapDecorator", "org.apache.commons.collections4.multimap" ], [ "LazyList", "org.apache.commons.collections4.list" ], [ "AbstractSerializableListDecorator", "org.apache.commons.collections4.list" ], [ "TreeList", "org.apache.commons.collections4.list" ], [ "SetUniqueList", "org.apache.commons.collections4.list" ], [ "AbstractListDecorator", "org.apache.commons.collections4.list" ], [ "NodeCachingLinkedList", "org.apache.commons.collections4.list" ], [ "UnmodifiableList", "org.apache.commons.collections4.list" ], [ "FixedSizeList", "org.apache.commons.collections4.list" ], [ "TransformedList", "org.apache.commons.collections4.list" ], [ "GrowthList", "org.apache.commons.collections4.list" ], [ "AbstractLinkedList", "org.apache.commons.collections4.list" ], [ "CursorableLinkedList", "org.apache.commons.collections4.list" ], [ "PredicatedList", "org.apache.commons.collections4.list" ], [ "OrderedMap", "org.apache.commons.collections4" ], [ "AbstractQueueDecorator", "org.apache.commons.collections4.queue" ], [ "TransformedQueue", "org.apache.commons.collections4.queue" ], [ "UnmodifiableQueue", "org.apache.commons.collections4.queue" ], [ "CircularFifoQueue", "org.apache.commons.collections4.queue" ], [ "PredicatedQueue", "org.apache.commons.collections4.queue" ], [ "FluentIterable", "org.apache.commons.collections4" ], [ "TransformerUtils", "org.apache.commons.collections4" ], [ "PredicateUtils", "org.apache.commons.collections4" ], [ "ResettableIterator", "org.apache.commons.collections4" ], [ "MultiValuedMap", "org.apache.commons.collections4" ], [ "SetUtils", "org.apache.commons.collections4" ], [ "SortedBidiMap", "org.apache.commons.collections4" ], [ "ArrayStack", "org.apache.commons.collections4" ], [ "Put", "org.apache.commons.collections4" ], [ "OrderedMapIterator", "org.apache.commons.collections4" ], [ "TransformedSet", "org.apache.commons.collections4.set" ], [ "CompositeSet", "org.apache.commons.collections4.set" ], [ "TransformedNavigableSet", "org.apache.commons.collections4.set" ], [ "PredicatedNavigableSet", "org.apache.commons.collections4.set" ], [ "AbstractSetDecorator", "org.apache.commons.collections4.set" ], [ "ListOrderedSet", "org.apache.commons.collections4.set" ], [ "UnmodifiableSet", "org.apache.commons.collections4.set" ], [ "AbstractSerializableSetDecorator", "org.apache.commons.collections4.set" ], [ "MapBackedSet", "org.apache.commons.collections4.set" ], [ "UnmodifiableSortedSet", "org.apache.commons.collections4.set" ], [ "PredicatedSortedSet", "org.apache.commons.collections4.set" ], [ "AbstractSortedSetDecorator", "org.apache.commons.collections4.set" ], [ "PredicatedSet", "org.apache.commons.collections4.set" ], [ "AbstractNavigableSetDecorator", "org.apache.commons.collections4.set" ], [ "UnmodifiableNavigableSet", "org.apache.commons.collections4.set" ], [ "TransformedSortedSet", "org.apache.commons.collections4.set" ], [ "IterableMap", "org.apache.commons.collections4" ], [ "EnumerationUtils", "org.apache.commons.collections4" ], [ "DeleteCommand", "org.apache.commons.collections4.sequence" ], [ "ReplacementsHandler", "org.apache.commons.collections4.sequence" ], [ "InsertCommand", "org.apache.commons.collections4.sequence" ], [ "SequencesComparator", "org.apache.commons.collections4.sequence" ], [ "ReplacementsFinder", "org.apache.commons.collections4.sequence" ], [ "KeepCommand", "org.apache.commons.collections4.sequence" ], [ "EditCommand", "org.apache.commons.collections4.sequence" ], [ "CommandVisitor", "org.apache.commons.collections4.sequence" ], [ "EditScript", "org.apache.commons.collections4.sequence" ], [ "QueueUtils", "org.apache.commons.collections4" ], [ "SetValuedMap", "org.apache.commons.collections4" ], [ "SynchronizedBag", "org.apache.commons.collections4.bag" ], [ "AbstractMapBag", "org.apache.commons.collections4.bag" ], [ "CollectionBag", "org.apache.commons.collections4.bag" ], [ "UnmodifiableBag", "org.apache.commons.collections4.bag" ], [ "PredicatedSortedBag", "org.apache.commons.collections4.bag" ], [ "UnmodifiableSortedBag", "org.apache.commons.collections4.bag" ], [ "HashBag", "org.apache.commons.collections4.bag" ], [ "AbstractBagDecorator", "org.apache.commons.collections4.bag" ], [ "TransformedSortedBag", "org.apache.commons.collections4.bag" ], [ "TreeBag", "org.apache.commons.collections4.bag" ], [ "PredicatedBag", "org.apache.commons.collections4.bag" ], [ "SynchronizedSortedBag", "org.apache.commons.collections4.bag" ], [ "CollectionSortedBag", "org.apache.commons.collections4.bag" ], [ "TransformedBag", "org.apache.commons.collections4.bag" ], [ "AbstractSortedBagDecorator", "org.apache.commons.collections4.bag" ], [ "HashMultiSet", "org.apache.commons.collections4.multiset" ], [ "AbstractMultiSet", "org.apache.commons.collections4.multiset" ], [ "PredicatedMultiSet", "org.apache.commons.collections4.multiset" ], [ "AbstractMultiSetDecorator", "org.apache.commons.collections4.multiset" ], [ "AbstractMapMultiSet", "org.apache.commons.collections4.multiset" ], [ "UnmodifiableMultiSet", "org.apache.commons.collections4.multiset" ], [ "SynchronizedMultiSet", "org.apache.commons.collections4.multiset" ], [ "BagUtils", "org.apache.commons.collections4" ], [ "Unmodifiable", "org.apache.commons.collections4" ], [ "Get", "org.apache.commons.collections4" ], [ "Trie", "org.apache.commons.collections4" ], [ "MultiMap", "org.apache.commons.collections4" ], [ "KeyValue", "org.apache.commons.collections4" ], [ "IteratorChain", "org.apache.commons.collections4.iterators" ], [ "EmptyListIterator", "org.apache.commons.collections4.iterators" ], [ "UnmodifiableOrderedMapIterator", "org.apache.commons.collections4.iterators" ], [ "AbstractListIteratorDecorator", "org.apache.commons.collections4.iterators" ], [ "ZippingIterator", "org.apache.commons.collections4.iterators" ], [ "UnmodifiableIterator", "org.apache.commons.collections4.iterators" ], [ "CollatingIterator", "org.apache.commons.collections4.iterators" ], [ "UniqueFilterIterator", "org.apache.commons.collections4.iterators" ], [ "ReverseListIterator", "org.apache.commons.collections4.iterators" ], [ "BoundedIterator", "org.apache.commons.collections4.iterators" ], [ "AbstractIteratorDecorator", "org.apache.commons.collections4.iterators" ], [ "TransformIterator", "org.apache.commons.collections4.iterators" ], [ "AbstractEmptyIterator", "org.apache.commons.collections4.iterators" ], [ "NodeListIterator", "org.apache.commons.collections4.iterators" ], [ "ArrayListIterator", "org.apache.commons.collections4.iterators" ], [ "LazyIteratorChain", "org.apache.commons.collections4.iterators" ], [ "LoopingListIterator", "org.apache.commons.collections4.iterators" ], [ "PeekingIterator", "org.apache.commons.collections4.iterators" ], [ "ObjectGraphIterator", "org.apache.commons.collections4.iterators" ], [ "ArrayIterator", "org.apache.commons.collections4.iterators" ], [ "PermutationIterator", "org.apache.commons.collections4.iterators" ], [ "SingletonListIterator", "org.apache.commons.collections4.iterators" ], [ "EmptyMapIterator", "org.apache.commons.collections4.iterators" ], [ "ObjectArrayIterator", "org.apache.commons.collections4.iterators" ], [ "EnumerationIterator", "org.apache.commons.collections4.iterators" ], [ "IteratorIterable", "org.apache.commons.collections4.iterators" ], [ "AbstractEmptyMapIterator", "org.apache.commons.collections4.iterators" ], [ "LoopingIterator", "org.apache.commons.collections4.iterators" ], [ "IteratorEnumeration", "org.apache.commons.collections4.iterators" ], [ "SingletonIterator", "org.apache.commons.collections4.iterators" ], [ "ListIteratorWrapper", "org.apache.commons.collections4.iterators" ], [ "SkippingIterator", "org.apache.commons.collections4.iterators" ], [ "EmptyOrderedIterator", "org.apache.commons.collections4.iterators" ], [ "AbstractMapIteratorDecorator", "org.apache.commons.collections4.iterators" ], [ "ObjectArrayListIterator", "org.apache.commons.collections4.iterators" ], [ "UnmodifiableListIterator", "org.apache.commons.collections4.iterators" ], [ "EmptyOrderedMapIterator", "org.apache.commons.collections4.iterators" ], [ "UnmodifiableMapIterator", "org.apache.commons.collections4.iterators" ], [ "EmptyIterator", "org.apache.commons.collections4.iterators" ], [ "EntrySetMapIterator", "org.apache.commons.collections4.iterators" ], [ "PushbackIterator", "org.apache.commons.collections4.iterators" ], [ "FilterIterator", "org.apache.commons.collections4.iterators" ], [ "AbstractUntypedIteratorDecorator", "org.apache.commons.collections4.iterators" ], [ "AbstractOrderedMapIteratorDecorator", "org.apache.commons.collections4.iterators" ], [ "FilterListIterator", "org.apache.commons.collections4.iterators" ], [ "SplitMapUtils", "org.apache.commons.collections4" ], [ "BoundedMap", "org.apache.commons.collections4" ] ],
  "tokensProjectClassesNonPrivateStaticNonVoidMethods" : [ [ "emptyIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> emptyIterator()" ], [ "emptyListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> emptyListIterator()" ], [ "emptyOrderedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> OrderedIterator<E> emptyOrderedIterator()" ], [ "emptyMapIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <K, V> MapIterator<K, V> emptyMapIterator()" ], [ "emptyOrderedMapIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <K, V> OrderedMapIterator<K, V> emptyOrderedMapIterator()" ], [ "singletonIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> singletonIterator(final E object)" ], [ "singletonListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ListIterator<E> singletonListIterator(final E object)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final E... array)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final Object array)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final E[] array, final int start)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final Object array, final int start)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final E[] array, final int start, final int end)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final Object array, final int start, final int end)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final E... array)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final Object array)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final E[] array, final int start)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final Object array, final int start)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final E[] array, final int start, final int end)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final Object array, final int start, final int end)" ], [ "boundedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> BoundedIterator<E> boundedIterator(final Iterator<? extends E> iterator, long max)" ], [ "boundedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> BoundedIterator<E> boundedIterator(final Iterator<? extends E> iterator, long offset, long max)" ], [ "unmodifiableIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> unmodifiableIterator(final Iterator<E> iterator)" ], [ "unmodifiableListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ListIterator<E> unmodifiableListIterator(final ListIterator<E> listIterator)" ], [ "unmodifiableMapIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <K, V> MapIterator<K, V> unmodifiableMapIterator(final MapIterator<K, V> mapIterator)" ], [ "chainedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> chainedIterator(final Iterator<? extends E> iterator1, final Iterator<? extends E> iterator2)" ], [ "chainedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> chainedIterator(final Iterator<? extends E>... iterators)" ], [ "chainedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> chainedIterator(final Collection<Iterator<? extends E>> iterators)" ], [ "collatedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> collatedIterator(final Comparator<? super E> comparator, final Iterator<? extends E> iterator1, final Iterator<? extends E> iterator2)" ], [ "collatedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> collatedIterator(final Comparator<? super E> comparator, final Iterator<? extends E>... iterators)" ], [ "collatedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> collatedIterator(final Comparator<? super E> comparator, final Collection<Iterator<? extends E>> iterators)" ], [ "objectGraphIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> objectGraphIterator(final E root, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <I, O> Iterator<O> transformedIterator(final Iterator<? extends I> iterator, final Transformer<? super I, ? extends O> transform)" ], [ "filteredIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> filteredIterator(final Iterator<? extends E> iterator, final Predicate<? super E> predicate)" ], [ "filteredListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ListIterator<E> filteredListIterator(final ListIterator<? extends E> listIterator, final Predicate<? super E> predicate)" ], [ "loopingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> loopingIterator(final Collection<? extends E> coll)" ], [ "loopingListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> loopingListIterator(final List<E> list)" ], [ "nodeListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static NodeListIterator nodeListIterator(final NodeList nodeList)" ], [ "nodeListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static NodeListIterator nodeListIterator(final Node node)" ], [ "peekingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> peekingIterator(final Iterator<? extends E> iterator)" ], [ "pushbackIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> pushbackIterator(final Iterator<? extends E> iterator)" ], [ "skippingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> SkippingIterator<E> skippingIterator(final Iterator<E> iterator, long offset)" ], [ "zippingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ZippingIterator<E> zippingIterator(final Iterator<? extends E> a, final Iterator<? extends E> b)" ], [ "zippingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ZippingIterator<E> zippingIterator(final Iterator<? extends E> a, final Iterator<? extends E> b, final Iterator<? extends E> c)" ], [ "zippingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ZippingIterator<E> zippingIterator(final Iterator<? extends E>... iterators)" ], [ "asIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> asIterator(final Enumeration<? extends E> enumeration)" ], [ "asIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> asIterator(final Enumeration<? extends E> enumeration, final Collection<? super E> removeCollection)" ], [ "asEnumeration", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Enumeration<E> asEnumeration(final Iterator<? extends E> iterator)" ], [ "asIterable", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterable<E> asIterable(final Iterator<? extends E> iterator)" ], [ "asMultipleUseIterable", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterable<E> asMultipleUseIterable(final Iterator<? extends E> iterator)" ], [ "toListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ListIterator<E> toListIterator(final Iterator<? extends E> iterator)" ], [ "toArray", "org.apache.commons.collections4", "IteratorUtils", "public static Object[] toArray(final Iterator<?> iterator)" ], [ "toArray", "org.apache.commons.collections4", "IteratorUtils", "public static <E> E[] toArray(final Iterator<? extends E> iterator, final Class<E> arrayClass)" ], [ "toList", "org.apache.commons.collections4", "IteratorUtils", "public static <E> List<E> toList(final Iterator<? extends E> iterator)" ], [ "toList", "org.apache.commons.collections4", "IteratorUtils", "public static <E> List<E> toList(final Iterator<? extends E> iterator, final int estimatedSize)" ], [ "getIterator", "org.apache.commons.collections4", "IteratorUtils", "public static Iterator<?> getIterator(final Object obj)" ], [ "forEachButLast", "org.apache.commons.collections4", "IteratorUtils", "public static <E> E forEachButLast(final Iterator<E> iterator, final Closure<? super E> closure)" ], [ "find", "org.apache.commons.collections4", "IteratorUtils", "public static <E> E find(final Iterator<E> iterator, final Predicate<? super E> predicate)" ], [ "indexOf", "org.apache.commons.collections4", "IteratorUtils", "public static <E> int indexOf(final Iterator<E> iterator, final Predicate<? super E> predicate)" ], [ "matchesAny", "org.apache.commons.collections4", "IteratorUtils", "public static <E> boolean matchesAny(final Iterator<E> iterator, final Predicate<? super E> predicate)" ], [ "matchesAll", "org.apache.commons.collections4", "IteratorUtils", "public static <E> boolean matchesAll(final Iterator<E> iterator, final Predicate<? super E> predicate)" ], [ "isEmpty", "org.apache.commons.collections4", "IteratorUtils", "public static boolean isEmpty(final Iterator<?> iterator)" ], [ "contains", "org.apache.commons.collections4", "IteratorUtils", "public static <E> boolean contains(final Iterator<E> iterator, final Object object)" ], [ "get", "org.apache.commons.collections4", "IteratorUtils", "public static <E> E get(final Iterator<E> iterator, final int index)" ], [ "size", "org.apache.commons.collections4", "IteratorUtils", "public static int size(final Iterator<?> iterator)" ], [ "toString", "org.apache.commons.collections4", "IteratorUtils", "public static <E> String toString(final Iterator<E> iterator)" ], [ "toString", "org.apache.commons.collections4", "IteratorUtils", "public static <E> String toString(final Iterator<E> iterator, final Transformer<? super E, String> transformer)" ], [ "toString", "org.apache.commons.collections4", "IteratorUtils", "public static <E> String toString(final Iterator<E> iterator, final Transformer<? super E, String> transformer, final String delimiter, final String prefix, final String suffix)" ], [ "naturalComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E extends Comparable<? super E>> Comparator<E> naturalComparator()" ], [ "chainedComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> Comparator<E> chainedComparator(final Comparator<E>... comparators)" ], [ "chainedComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> Comparator<E> chainedComparator(final Collection<Comparator<E>> comparators)" ], [ "reversedComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> Comparator<E> reversedComparator(final Comparator<E> comparator)" ], [ "booleanComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static Comparator<Boolean> booleanComparator(final boolean trueFirst)" ], [ "nullLowComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> Comparator<E> nullLowComparator(Comparator<E> comparator)" ], [ "nullHighComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> Comparator<E> nullHighComparator(Comparator<E> comparator)" ], [ "transformedComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <I, O> Comparator<I> transformedComparator(Comparator<O> comparator, final Transformer<? super I, ? extends O> transformer)" ], [ "min", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> E min(final E o1, final E o2, Comparator<E> comparator)" ], [ "max", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> E max(final E o1, final E o2, Comparator<E> comparator)" ], [ "unmodifiableBidiMap", "org.apache.commons.collections4.bidimap", "UnmodifiableBidiMap", "public static <K, V> BidiMap<K, V> unmodifiableBidiMap(final BidiMap<? extends K, ? extends V> map)" ], [ "unmodifiableOrderedBidiMap", "org.apache.commons.collections4.bidimap", "UnmodifiableOrderedBidiMap", "public static <K, V> OrderedBidiMap<K, V> unmodifiableOrderedBidiMap(final OrderedBidiMap<? extends K, ? extends V> map)" ], [ "unmodifiableSortedBidiMap", "org.apache.commons.collections4.bidimap", "UnmodifiableSortedBidiMap", "public static <K, V> SortedBidiMap<K, V> unmodifiableSortedBidiMap(final SortedBidiMap<K, ? extends V> map)" ], [ "emptyMultiValuedMap", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> MultiValuedMap<K, V> emptyMultiValuedMap()" ], [ "emptyIfNull", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> MultiValuedMap<K, V> emptyIfNull(final MultiValuedMap<K, V> map)" ], [ "isEmpty", "org.apache.commons.collections4", "MultiMapUtils", "public static boolean isEmpty(final MultiValuedMap<?, ?> map)" ], [ "getCollection", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> Collection<V> getCollection(final MultiValuedMap<K, V> map, final K key)" ], [ "getValuesAsList", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> List<V> getValuesAsList(final MultiValuedMap<K, V> map, final K key)" ], [ "getValuesAsSet", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> Set<V> getValuesAsSet(final MultiValuedMap<K, V> map, final K key)" ], [ "getValuesAsBag", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> Bag<V> getValuesAsBag(final MultiValuedMap<K, V> map, final K key)" ], [ "newListValuedHashMap", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> ListValuedMap<K, V> newListValuedHashMap()" ], [ "newSetValuedHashMap", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> SetValuedMap<K, V> newSetValuedHashMap()" ], [ "unmodifiableMultiValuedMap", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> MultiValuedMap<K, V> unmodifiableMultiValuedMap(final MultiValuedMap<? extends K, ? extends V> map)" ], [ "transformedMultiValuedMap", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> MultiValuedMap<K, V> transformedMultiValuedMap(final MultiValuedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "unmodifiableBoundedCollection", "org.apache.commons.collections4.collection", "UnmodifiableBoundedCollection", "public static <E> BoundedCollection<E> unmodifiableBoundedCollection(final BoundedCollection<? extends E> coll)" ], [ "unmodifiableBoundedCollection", "org.apache.commons.collections4.collection", "UnmodifiableBoundedCollection", "public static <E> BoundedCollection<E> unmodifiableBoundedCollection(Collection<? extends E> coll)" ], [ "transformingCollection", "org.apache.commons.collections4.collection", "TransformedCollection", "public static <E> TransformedCollection<E> transformingCollection(final Collection<E> coll, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedCollection", "org.apache.commons.collections4.collection", "TransformedCollection", "public static <E> TransformedCollection<E> transformedCollection(final Collection<E> collection, final Transformer<? super E, ? extends E> transformer)" ], [ "builder", "org.apache.commons.collections4.collection", "PredicatedCollection", "public static <E> Builder<E> builder(final Predicate<? super E> predicate)" ], [ "notNullBuilder", "org.apache.commons.collections4.collection", "PredicatedCollection", "public static <E> Builder<E> notNullBuilder()" ], [ "predicatedCollection", "org.apache.commons.collections4.collection", "PredicatedCollection", "public static <T> PredicatedCollection<T> predicatedCollection(final Collection<T> coll, final Predicate<? super T> predicate)" ], [ "uniqueIndexedCollection", "org.apache.commons.collections4.collection", "IndexedCollection", "public static <K, C> IndexedCollection<K, C> uniqueIndexedCollection(final Collection<C> coll, final Transformer<C, K> keyTransformer)" ], [ "nonUniqueIndexedCollection", "org.apache.commons.collections4.collection", "IndexedCollection", "public static <K, C> IndexedCollection<K, C> nonUniqueIndexedCollection(final Collection<C> coll, final Transformer<C, K> keyTransformer)" ], [ "synchronizedCollection", "org.apache.commons.collections4.collection", "SynchronizedCollection", "public static <T> SynchronizedCollection<T> synchronizedCollection(final Collection<T> coll)" ], [ "unmodifiableCollection", "org.apache.commons.collections4.collection", "UnmodifiableCollection", "public static <T> Collection<T> unmodifiableCollection(final Collection<? extends T> coll)" ], [ "exceptionFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> exceptionFactory()" ], [ "nullFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> nullFactory()" ], [ "constantFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> constantFactory(final T constantToReturn)" ], [ "prototypeFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> prototypeFactory(final T prototype)" ], [ "instantiateFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> instantiateFactory(final Class<T> classToInstantiate)" ], [ "instantiateFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> instantiateFactory(final Class<T> classToInstantiate, final Class<?>[] paramTypes, final Object[] args)" ], [ "emptyIfNull", "org.apache.commons.collections4", "ListUtils", "public static <T> List<T> emptyIfNull(final List<T> list)" ], [ "defaultIfNull", "org.apache.commons.collections4", "ListUtils", "public static <T> List<T> defaultIfNull(final List<T> list, final List<T> defaultList)" ], [ "intersection", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> intersection(final List<? extends E> list1, final List<? extends E> list2)" ], [ "subtract", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> subtract(final List<E> list1, final List<? extends E> list2)" ], [ "sum", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> sum(final List<? extends E> list1, final List<? extends E> list2)" ], [ "union", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> union(final List<? extends E> list1, final List<? extends E> list2)" ], [ "select", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> select(final Collection<? extends E> inputCollection, final Predicate<? super E> predicate)" ], [ "selectRejected", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> selectRejected(final Collection<? extends E> inputCollection, final Predicate<? super E> predicate)" ], [ "isEqualList", "org.apache.commons.collections4", "ListUtils", "public static boolean isEqualList(final Collection<?> list1, final Collection<?> list2)" ], [ "hashCodeForList", "org.apache.commons.collections4", "ListUtils", "public static int hashCodeForList(final Collection<?> list)" ], [ "retainAll", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> retainAll(final Collection<E> collection, final Collection<?> retain)" ], [ "removeAll", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> removeAll(final Collection<E> collection, final Collection<?> remove)" ], [ "synchronizedList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> synchronizedList(final List<E> list)" ], [ "unmodifiableList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> unmodifiableList(final List<? extends E> list)" ], [ "predicatedList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> predicatedList(final List<E> list, final Predicate<E> predicate)" ], [ "transformedList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> transformedList(final List<E> list, final Transformer<? super E, ? extends E> transformer)" ], [ "lazyList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> lazyList(final List<E> list, final Factory<? extends E> factory)" ], [ "fixedSizeList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> fixedSizeList(final List<E> list)" ], [ "indexOf", "org.apache.commons.collections4", "ListUtils", "public static <E> int indexOf(final List<E> list, final Predicate<E> predicate)" ], [ "longestCommonSubsequence", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> longestCommonSubsequence(final List<E> a, final List<E> b)" ], [ "longestCommonSubsequence", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> longestCommonSubsequence(final List<E> a, final List<E> b, final Equator<? super E> equator)" ], [ "longestCommonSubsequence", "org.apache.commons.collections4", "ListUtils", "public static String longestCommonSubsequence(final CharSequence a, final CharSequence b)" ], [ "partition", "org.apache.commons.collections4", "ListUtils", "public static <T> List<List<T>> partition(final List<T> list, final int size)" ], [ "getObject", "org.apache.commons.collections4", "MapUtils", "public static <K, V> V getObject(final Map<? super K, V> map, final K key)" ], [ "getString", "org.apache.commons.collections4", "MapUtils", "public static <K> String getString(final Map<? super K, ?> map, final K key)" ], [ "getBoolean", "org.apache.commons.collections4", "MapUtils", "public static <K> Boolean getBoolean(final Map<? super K, ?> map, final K key)" ], [ "getNumber", "org.apache.commons.collections4", "MapUtils", "public static <K> Number getNumber(final Map<? super K, ?> map, final K key)" ], [ "getByte", "org.apache.commons.collections4", "MapUtils", "public static <K> Byte getByte(final Map<? super K, ?> map, final K key)" ], [ "getShort", "org.apache.commons.collections4", "MapUtils", "public static <K> Short getShort(final Map<? super K, ?> map, final K key)" ], [ "getInteger", "org.apache.commons.collections4", "MapUtils", "public static <K> Integer getInteger(final Map<? super K, ?> map, final K key)" ], [ "getLong", "org.apache.commons.collections4", "MapUtils", "public static <K> Long getLong(final Map<? super K, ?> map, final K key)" ], [ "getFloat", "org.apache.commons.collections4", "MapUtils", "public static <K> Float getFloat(final Map<? super K, ?> map, final K key)" ], [ "getDouble", "org.apache.commons.collections4", "MapUtils", "public static <K> Double getDouble(final Map<? super K, ?> map, final K key)" ], [ "getMap", "org.apache.commons.collections4", "MapUtils", "public static <K> Map<?, ?> getMap(final Map<? super K, ?> map, final K key)" ], [ "getObject", "org.apache.commons.collections4", "MapUtils", "public static <K, V> V getObject(final Map<K, V> map, final K key, final V defaultValue)" ], [ "getString", "org.apache.commons.collections4", "MapUtils", "public static <K> String getString(final Map<? super K, ?> map, final K key, final String defaultValue)" ], [ "getBoolean", "org.apache.commons.collections4", "MapUtils", "public static <K> Boolean getBoolean(final Map<? super K, ?> map, final K key, final Boolean defaultValue)" ], [ "getNumber", "org.apache.commons.collections4", "MapUtils", "public static <K> Number getNumber(final Map<? super K, ?> map, final K key, final Number defaultValue)" ], [ "getByte", "org.apache.commons.collections4", "MapUtils", "public static <K> Byte getByte(final Map<? super K, ?> map, final K key, final Byte defaultValue)" ], [ "getShort", "org.apache.commons.collections4", "MapUtils", "public static <K> Short getShort(final Map<? super K, ?> map, final K key, final Short defaultValue)" ], [ "getInteger", "org.apache.commons.collections4", "MapUtils", "public static <K> Integer getInteger(final Map<? super K, ?> map, final K key, final Integer defaultValue)" ], [ "getLong", "org.apache.commons.collections4", "MapUtils", "public static <K> Long getLong(final Map<? super K, ?> map, final K key, final Long defaultValue)" ], [ "getFloat", "org.apache.commons.collections4", "MapUtils", "public static <K> Float getFloat(final Map<? super K, ?> map, final K key, final Float defaultValue)" ], [ "getDouble", "org.apache.commons.collections4", "MapUtils", "public static <K> Double getDouble(final Map<? super K, ?> map, final K key, final Double defaultValue)" ], [ "getMap", "org.apache.commons.collections4", "MapUtils", "public static <K> Map<?, ?> getMap(final Map<? super K, ?> map, final K key, final Map<?, ?> defaultValue)" ], [ "getBooleanValue", "org.apache.commons.collections4", "MapUtils", "public static <K> boolean getBooleanValue(final Map<? super K, ?> map, final K key)" ], [ "getByteValue", "org.apache.commons.collections4", "MapUtils", "public static <K> byte getByteValue(final Map<? super K, ?> map, final K key)" ], [ "getShortValue", "org.apache.commons.collections4", "MapUtils", "public static <K> short getShortValue(final Map<? super K, ?> map, final K key)" ], [ "getIntValue", "org.apache.commons.collections4", "MapUtils", "public static <K> int getIntValue(final Map<? super K, ?> map, final K key)" ], [ "getLongValue", "org.apache.commons.collections4", "MapUtils", "public static <K> long getLongValue(final Map<? super K, ?> map, final K key)" ], [ "getFloatValue", "org.apache.commons.collections4", "MapUtils", "public static <K> float getFloatValue(final Map<? super K, ?> map, final K key)" ], [ "getDoubleValue", "org.apache.commons.collections4", "MapUtils", "public static <K> double getDoubleValue(final Map<? super K, ?> map, final K key)" ], [ "getBooleanValue", "org.apache.commons.collections4", "MapUtils", "public static <K> boolean getBooleanValue(final Map<? super K, ?> map, final K key, final boolean defaultValue)" ], [ "getByteValue", "org.apache.commons.collections4", "MapUtils", "public static <K> byte getByteValue(final Map<? super K, ?> map, final K key, final byte defaultValue)" ], [ "getShortValue", "org.apache.commons.collections4", "MapUtils", "public static <K> short getShortValue(final Map<? super K, ?> map, final K key, final short defaultValue)" ], [ "getIntValue", "org.apache.commons.collections4", "MapUtils", "public static <K> int getIntValue(final Map<? super K, ?> map, final K key, final int defaultValue)" ], [ "getLongValue", "org.apache.commons.collections4", "MapUtils", "public static <K> long getLongValue(final Map<? super K, ?> map, final K key, final long defaultValue)" ], [ "getFloatValue", "org.apache.commons.collections4", "MapUtils", "public static <K> float getFloatValue(final Map<? super K, ?> map, final K key, final float defaultValue)" ], [ "getDoubleValue", "org.apache.commons.collections4", "MapUtils", "public static <K> double getDoubleValue(final Map<? super K, ?> map, final K key, final double defaultValue)" ], [ "toProperties", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Properties toProperties(final Map<K, V> map)" ], [ "toMap", "org.apache.commons.collections4", "MapUtils", "public static Map<String, Object> toMap(final ResourceBundle resourceBundle)" ], [ "invertMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Map<V, K> invertMap(final Map<K, V> map)" ], [ "putAll", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Map<K, V> putAll(final Map<K, V> map, final Object[] array)" ], [ "emptyIfNull", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Map<K, V> emptyIfNull(final Map<K, V> map)" ], [ "isEmpty", "org.apache.commons.collections4", "MapUtils", "public static boolean isEmpty(final Map<?, ?> map)" ], [ "isNotEmpty", "org.apache.commons.collections4", "MapUtils", "public static boolean isNotEmpty(final Map<?, ?> map)" ], [ "synchronizedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Map<K, V> synchronizedMap(final Map<K, V> map)" ], [ "unmodifiableMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Map<K, V> unmodifiableMap(final Map<? extends K, ? extends V> map)" ], [ "predicatedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> predicatedMap(final Map<K, V> map, final Predicate<? super K> keyPred, final Predicate<? super V> valuePred)" ], [ "transformedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> transformedMap(final Map<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "fixedSizeMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> fixedSizeMap(final Map<K, V> map)" ], [ "lazyMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> lazyMap(final Map<K, V> map, final Factory<? extends V> factory)" ], [ "lazyMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> lazyMap(final Map<K, V> map, final Transformer<? super K, ? extends V> transformerFactory)" ], [ "orderedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> OrderedMap<K, V> orderedMap(final Map<K, V> map)" ], [ "multiValueMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> MultiValueMap<K, V> multiValueMap(final Map<K, ? super Collection<V>> map)" ], [ "multiValueMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V, C extends Collection<V>> MultiValueMap<K, V> multiValueMap(final Map<K, C> map, final Class<C> collectionClass)" ], [ "multiValueMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V, C extends Collection<V>> MultiValueMap<K, V> multiValueMap(final Map<K, C> map, final Factory<C> collectionFactory)" ], [ "synchronizedSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> synchronizedSortedMap(final SortedMap<K, V> map)" ], [ "unmodifiableSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> unmodifiableSortedMap(final SortedMap<K, ? extends V> map)" ], [ "predicatedSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> predicatedSortedMap(final SortedMap<K, V> map, final Predicate<? super K> keyPred, final Predicate<? super V> valuePred)" ], [ "transformedSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> transformedSortedMap(final SortedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "fixedSizeSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> fixedSizeSortedMap(final SortedMap<K, V> map)" ], [ "lazySortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> lazySortedMap(final SortedMap<K, V> map, final Factory<? extends V> factory)" ], [ "lazySortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> lazySortedMap(final SortedMap<K, V> map, final Transformer<? super K, ? extends V> transformerFactory)" ], [ "iterableMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> iterableMap(final Map<K, V> map)" ], [ "iterableSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableSortedMap<K, V> iterableSortedMap(final SortedMap<K, V> sortedMap)" ], [ "defaultEquator", "org.apache.commons.collections4.functors", "DefaultEquator", "public static <T> DefaultEquator<T> defaultEquator()" ], [ "stringValueTransformer", "org.apache.commons.collections4.functors", "StringValueTransformer", "public static <T> Transformer<T, String> stringValueTransformer()" ], [ "ifTransformer", "org.apache.commons.collections4.functors", "IfTransformer", "public static <I, O> Transformer<I, O> ifTransformer(final Predicate<? super I> predicate, final Transformer<? super I, ? extends O> trueTransformer, final Transformer<? super I, ? extends O> falseTransformer)" ], [ "ifTransformer", "org.apache.commons.collections4.functors", "IfTransformer", "public static <T> Transformer<T, T> ifTransformer(final Predicate<? super T> predicate, final Transformer<? super T, ? extends T> trueTransformer)" ], [ "identityPredicate", "org.apache.commons.collections4.functors", "IdentityPredicate", "public static <T> Predicate<T> identityPredicate(final T object)" ], [ "exceptionClosure", "org.apache.commons.collections4.functors", "ExceptionClosure", "public static <E> Closure<E> exceptionClosure()" ], [ "nopClosure", "org.apache.commons.collections4.functors", "NOPClosure", "public static <E> Closure<E> nopClosure()" ], [ "closureTransformer", "org.apache.commons.collections4.functors", "ClosureTransformer", "public static <T> Transformer<T, T> closureTransformer(final Closure<? super T> closure)" ], [ "copy", "org.apache.commons.collections4.functors", "FunctorUtils", "static <T> Predicate<T>[] copy(final Predicate<? super T>... predicates)" ], [ "coerce", "org.apache.commons.collections4.functors", "FunctorUtils", "static <T> Predicate<T> coerce(final Predicate<? super T> predicate)" ], [ "validate", "org.apache.commons.collections4.functors", "FunctorUtils", "static <T> Predicate<? super T>[] validate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "copy", "org.apache.commons.collections4.functors", "FunctorUtils", "static <E> Closure<E>[] copy(final Closure<? super E>... closures)" ], [ "coerce", "org.apache.commons.collections4.functors", "FunctorUtils", "static <T> Closure<T> coerce(final Closure<? super T> closure)" ], [ "copy", "org.apache.commons.collections4.functors", "FunctorUtils", "static <I, O> Transformer<I, O>[] copy(final Transformer<? super I, ? extends O>... transformers)" ], [ "coerce", "org.apache.commons.collections4.functors", "FunctorUtils", "static <I, O> Transformer<I, O> coerce(final Transformer<? super I, ? extends O> transformer)" ], [ "transformerPredicate", "org.apache.commons.collections4.functors", "TransformerPredicate", "public static <T> Predicate<T> transformerPredicate(final Transformer<? super T, Boolean> transformer)" ], [ "nullPredicate", "org.apache.commons.collections4.functors", "NullPredicate", "public static <T> Predicate<T> nullPredicate()" ], [ "nullTransformer", "org.apache.commons.collections4.functors", "ConstantTransformer", "public static <I, O> Transformer<I, O> nullTransformer()" ], [ "constantTransformer", "org.apache.commons.collections4.functors", "ConstantTransformer", "public static <I, O> Transformer<I, O> constantTransformer(final O constantToReturn)" ], [ "predicateTransformer", "org.apache.commons.collections4.functors", "PredicateTransformer", "public static <T> Transformer<T, Boolean> predicateTransformer(final Predicate<? super T> predicate)" ], [ "whileClosure", "org.apache.commons.collections4.functors", "WhileClosure", "public static <E> Closure<E> whileClosure(final Predicate<? super E> predicate, final Closure<? super E> closure, final boolean doLoop)" ], [ "forClosure", "org.apache.commons.collections4.functors", "ForClosure", "public static <E> Closure<E> forClosure(final int count, final Closure<? super E> closure)" ], [ "nullIsTruePredicate", "org.apache.commons.collections4.functors", "NullIsTruePredicate", "public static <T> Predicate<T> nullIsTruePredicate(final Predicate<? super T> predicate)" ], [ "transformedPredicate", "org.apache.commons.collections4.functors", "TransformedPredicate", "public static <T> Predicate<T> transformedPredicate(final Transformer<? super T, ? extends T> transformer, final Predicate<? super T> predicate)" ], [ "nonePredicate", "org.apache.commons.collections4.functors", "NonePredicate", "public static <T> Predicate<T> nonePredicate(final Predicate<? super T>... predicates)" ], [ "nonePredicate", "org.apache.commons.collections4.functors", "NonePredicate", "public static <T> Predicate<T> nonePredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "exceptionTransformer", "org.apache.commons.collections4.functors", "ExceptionTransformer", "public static <I, O> Transformer<I, O> exceptionTransformer()" ], [ "switchTransformer", "org.apache.commons.collections4.functors", "SwitchTransformer", "public static <I, O> Transformer<I, O> switchTransformer(final Predicate<? super I>[] predicates, final Transformer<? super I, ? extends O>[] transformers, final Transformer<? super I, ? extends O> defaultTransformer)" ], [ "switchTransformer", "org.apache.commons.collections4.functors", "SwitchTransformer", "public static <I, O> Transformer<I, O> switchTransformer(final Map<? extends Predicate<? super I>, ? extends Transformer<? super I, ? extends O>> map)" ], [ "transformerClosure", "org.apache.commons.collections4.functors", "TransformerClosure", "public static <E> Closure<E> transformerClosure(final Transformer<? super E, ?> transformer)" ], [ "orPredicate", "org.apache.commons.collections4.functors", "OrPredicate", "public static <T> Predicate<T> orPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "nopTransformer", "org.apache.commons.collections4.functors", "NOPTransformer", "public static <T> Transformer<T, T> nopTransformer()" ], [ "mapTransformer", "org.apache.commons.collections4.functors", "MapTransformer", "public static <I, O> Transformer<I, O> mapTransformer(final Map<? super I, ? extends O> map)" ], [ "exceptionFactory", "org.apache.commons.collections4.functors", "ExceptionFactory", "public static <T> Factory<T> exceptionFactory()" ], [ "chainedClosure", "org.apache.commons.collections4.functors", "ChainedClosure", "public static <E> Closure<E> chainedClosure(final Closure<? super E>... closures)" ], [ "chainedClosure", "org.apache.commons.collections4.functors", "ChainedClosure", "public static <E> Closure<E> chainedClosure(final Collection<? extends Closure<? super E>> closures)" ], [ "andPredicate", "org.apache.commons.collections4.functors", "AndPredicate", "public static <T> Predicate<T> andPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "prototypeFactory", "org.apache.commons.collections4.functors", "PrototypeFactory", "public static <T> Factory<T> prototypeFactory(final T prototype)" ], [ "exceptionPredicate", "org.apache.commons.collections4.functors", "ExceptionPredicate", "public static <T> Predicate<T> exceptionPredicate()" ], [ "instanceOfPredicate", "org.apache.commons.collections4.functors", "InstanceofPredicate", "public static Predicate<Object> instanceOfPredicate(final Class<?> type)" ], [ "invokerTransformer", "org.apache.commons.collections4.functors", "InvokerTransformer", "public static <I, O> Transformer<I, O> invokerTransformer(final String methodName)" ], [ "invokerTransformer", "org.apache.commons.collections4.functors", "InvokerTransformer", "public static <I, O> Transformer<I, O> invokerTransformer(final String methodName, final Class<?>[] paramTypes, final Object[] args)" ], [ "falsePredicate", "org.apache.commons.collections4.functors", "FalsePredicate", "public static <T> Predicate<T> falsePredicate()" ], [ "cloneTransformer", "org.apache.commons.collections4.functors", "CloneTransformer", "public static <T> Transformer<T, T> cloneTransformer()" ], [ "notPredicate", "org.apache.commons.collections4.functors", "NotPredicate", "public static <T> Predicate<T> notPredicate(final Predicate<? super T> predicate)" ], [ "constantFactory", "org.apache.commons.collections4.functors", "ConstantFactory", "public static <T> Factory<T> constantFactory(final T constantToReturn)" ], [ "chainedTransformer", "org.apache.commons.collections4.functors", "ChainedTransformer", "public static <T> Transformer<T, T> chainedTransformer(final Transformer<? super T, ? extends T>... transformers)" ], [ "chainedTransformer", "org.apache.commons.collections4.functors", "ChainedTransformer", "public static <T> Transformer<T, T> chainedTransformer(final Collection<? extends Transformer<? super T, ? extends T>> transformers)" ], [ "comparatorPredicate", "org.apache.commons.collections4.functors", "ComparatorPredicate", "public static <T> Predicate<T> comparatorPredicate(final T object, final Comparator<T> comparator)" ], [ "comparatorPredicate", "org.apache.commons.collections4.functors", "ComparatorPredicate", "public static <T> Predicate<T> comparatorPredicate(final T object, final Comparator<T> comparator, final Criterion criterion)" ], [ "allPredicate", "org.apache.commons.collections4.functors", "AllPredicate", "public static <T> Predicate<T> allPredicate(final Predicate<? super T>... predicates)" ], [ "allPredicate", "org.apache.commons.collections4.functors", "AllPredicate", "public static <T> Predicate<T> allPredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "nullIsFalsePredicate", "org.apache.commons.collections4.functors", "NullIsFalsePredicate", "public static <T> Predicate<T> nullIsFalsePredicate(final Predicate<? super T> predicate)" ], [ "nullIsExceptionPredicate", "org.apache.commons.collections4.functors", "NullIsExceptionPredicate", "public static <T> Predicate<T> nullIsExceptionPredicate(final Predicate<? super T> predicate)" ], [ "anyPredicate", "org.apache.commons.collections4.functors", "AnyPredicate", "public static <T> Predicate<T> anyPredicate(final Predicate<? super T>... predicates)" ], [ "anyPredicate", "org.apache.commons.collections4.functors", "AnyPredicate", "public static <T> Predicate<T> anyPredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "truePredicate", "org.apache.commons.collections4.functors", "TruePredicate", "public static <T> Predicate<T> truePredicate()" ], [ "factoryTransformer", "org.apache.commons.collections4.functors", "FactoryTransformer", "public static <I, O> Transformer<I, O> factoryTransformer(final Factory<? extends O> factory)" ], [ "notNullPredicate", "org.apache.commons.collections4.functors", "NotNullPredicate", "public static <T> Predicate<T> notNullPredicate()" ], [ "switchClosure", "org.apache.commons.collections4.functors", "SwitchClosure", "public static <E> Closure<E> switchClosure(final Predicate<? super E>[] predicates, final Closure<? super E>[] closures, final Closure<? super E> defaultClosure)" ], [ "switchClosure", "org.apache.commons.collections4.functors", "SwitchClosure", "public static <E> Closure<E> switchClosure(final Map<Predicate<E>, Closure<E>> predicatesAndClosures)" ], [ "uniquePredicate", "org.apache.commons.collections4.functors", "UniquePredicate", "public static <T> Predicate<T> uniquePredicate()" ], [ "instantiateTransformer", "org.apache.commons.collections4.functors", "InstantiateTransformer", "public static <T> Transformer<Class<? extends T>, T> instantiateTransformer()" ], [ "instantiateTransformer", "org.apache.commons.collections4.functors", "InstantiateTransformer", "public static <T> Transformer<Class<? extends T>, T> instantiateTransformer(final Class<?>[] paramTypes, final Object[] args)" ], [ "onePredicate", "org.apache.commons.collections4.functors", "OnePredicate", "public static <T> Predicate<T> onePredicate(final Predicate<? super T>... predicates)" ], [ "onePredicate", "org.apache.commons.collections4.functors", "OnePredicate", "public static <T> Predicate<T> onePredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "equalPredicate", "org.apache.commons.collections4.functors", "EqualPredicate", "public static <T> Predicate<T> equalPredicate(final T object)" ], [ "equalPredicate", "org.apache.commons.collections4.functors", "EqualPredicate", "public static <T> Predicate<T> equalPredicate(final T object, final Equator<T> equator)" ], [ "instantiateFactory", "org.apache.commons.collections4.functors", "InstantiateFactory", "public static <T> Factory<T> instantiateFactory(final Class<T> classToInstantiate, final Class<?>[] paramTypes, final Object[] args)" ], [ "ifClosure", "org.apache.commons.collections4.functors", "IfClosure", "public static <E> Closure<E> ifClosure(final Predicate<? super E> predicate, final Closure<? super E> trueClosure)" ], [ "ifClosure", "org.apache.commons.collections4.functors", "IfClosure", "public static <E> Closure<E> ifClosure(final Predicate<? super E> predicate, final Closure<? super E> trueClosure, final Closure<? super E> falseClosure)" ], [ "getTrueFirstComparator", "org.apache.commons.collections4.comparators", "BooleanComparator", "public static BooleanComparator getTrueFirstComparator()" ], [ "getFalseFirstComparator", "org.apache.commons.collections4.comparators", "BooleanComparator", "public static BooleanComparator getFalseFirstComparator()" ], [ "booleanComparator", "org.apache.commons.collections4.comparators", "BooleanComparator", "public static BooleanComparator booleanComparator(final boolean trueFirst)" ], [ "comparableComparator", "org.apache.commons.collections4.comparators", "ComparableComparator", "public static <E extends Comparable<? super E>> ComparableComparator<E> comparableComparator()" ], [ "emptyCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <T> Collection<T> emptyCollection()" ], [ "emptyIfNull", "org.apache.commons.collections4", "CollectionUtils", "public static <T> Collection<T> emptyIfNull(final Collection<T> collection)" ], [ "union", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> union(final Iterable<? extends O> a, final Iterable<? extends O> b)" ], [ "intersection", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> intersection(final Iterable<? extends O> a, final Iterable<? extends O> b)" ], [ "disjunction", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> disjunction(final Iterable<? extends O> a, final Iterable<? extends O> b)" ], [ "subtract", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> subtract(final Iterable<? extends O> a, final Iterable<? extends O> b)" ], [ "subtract", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> subtract(final Iterable<? extends O> a, final Iterable<? extends O> b, final Predicate<O> p)" ], [ "containsAll", "org.apache.commons.collections4", "CollectionUtils", "public static boolean containsAll(final Collection<?> coll1, final Collection<?> coll2)" ], [ "containsAny", "org.apache.commons.collections4", "CollectionUtils", "public static boolean containsAny(final Collection<?> coll1, final Collection<?> coll2)" ], [ "getCardinalityMap", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Map<O, Integer> getCardinalityMap(final Iterable<? extends O> coll)" ], [ "isSubCollection", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isSubCollection(final Collection<?> a, final Collection<?> b)" ], [ "isProperSubCollection", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isProperSubCollection(final Collection<?> a, final Collection<?> b)" ], [ "isEqualCollection", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isEqualCollection(final Collection<?> a, final Collection<?> b)" ], [ "isEqualCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <E> boolean isEqualCollection(final Collection<? extends E> a, final Collection<? extends E> b, final Equator<? super E> equator)" ], [ "cardinality", "org.apache.commons.collections4", "CollectionUtils", "public static <O> int cardinality(final O obj, final Iterable<? super O> coll)" ], [ "find", "org.apache.commons.collections4", "CollectionUtils", "public static <T> T find(final Iterable<T> collection, final Predicate<? super T> predicate)" ], [ "forAllDo", "org.apache.commons.collections4", "CollectionUtils", "public static <T, C extends Closure<? super T>> C forAllDo(final Iterable<T> collection, final C closure)" ], [ "forAllDo", "org.apache.commons.collections4", "CollectionUtils", "public static <T, C extends Closure<? super T>> C forAllDo(final Iterator<T> iterator, final C closure)" ], [ "forAllButLastDo", "org.apache.commons.collections4", "CollectionUtils", "public static <T, C extends Closure<? super T>> T forAllButLastDo(final Iterable<T> collection, final C closure)" ], [ "forAllButLastDo", "org.apache.commons.collections4", "CollectionUtils", "public static <T, C extends Closure<? super T>> T forAllButLastDo(final Iterator<T> iterator, final C closure)" ], [ "filter", "org.apache.commons.collections4", "CollectionUtils", "public static <T> boolean filter(final Iterable<T> collection, final Predicate<? super T> predicate)" ], [ "filterInverse", "org.apache.commons.collections4", "CollectionUtils", "public static <T> boolean filterInverse(final Iterable<T> collection, final Predicate<? super T> predicate)" ], [ "countMatches", "org.apache.commons.collections4", "CollectionUtils", "public static <C> int countMatches(final Iterable<C> input, final Predicate<? super C> predicate)" ], [ "exists", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean exists(final Iterable<C> input, final Predicate<? super C> predicate)" ], [ "matchesAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean matchesAll(final Iterable<C> input, final Predicate<? super C> predicate)" ], [ "select", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> select(final Iterable<? extends O> inputCollection, final Predicate<? super O> predicate)" ], [ "select", "org.apache.commons.collections4", "CollectionUtils", "public static <O, R extends Collection<? super O>> R select(final Iterable<? extends O> inputCollection, final Predicate<? super O> predicate, final R outputCollection)" ], [ "select", "org.apache.commons.collections4", "CollectionUtils", "public static <O, R extends Collection<? super O>> R select(final Iterable<? extends O> inputCollection, final Predicate<? super O> predicate, R outputCollection, R rejectedCollection)" ], [ "selectRejected", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> selectRejected(final Iterable<? extends O> inputCollection, final Predicate<? super O> predicate)" ], [ "selectRejected", "org.apache.commons.collections4", "CollectionUtils", "public static <O, R extends Collection<? super O>> R selectRejected(final Iterable<? extends O> inputCollection, final Predicate<? super O> predicate, final R outputCollection)" ], [ "collect", "org.apache.commons.collections4", "CollectionUtils", "public static <I, O> Collection<O> collect(final Iterable<I> inputCollection, final Transformer<? super I, ? extends O> transformer)" ], [ "collect", "org.apache.commons.collections4", "CollectionUtils", "public static <I, O> Collection<O> collect(final Iterator<I> inputIterator, final Transformer<? super I, ? extends O> transformer)" ], [ "collect", "org.apache.commons.collections4", "CollectionUtils", "public static <I, O, R extends Collection<? super O>> R collect(final Iterable<? extends I> inputCollection, final Transformer<? super I, ? extends O> transformer, final R outputCollection)" ], [ "collect", "org.apache.commons.collections4", "CollectionUtils", "public static <I, O, R extends Collection<? super O>> R collect(final Iterator<? extends I> inputIterator, final Transformer<? super I, ? extends O> transformer, final R outputCollection)" ], [ "addIgnoreNull", "org.apache.commons.collections4", "CollectionUtils", "public static <T> boolean addIgnoreNull(final Collection<T> collection, final T object)" ], [ "addAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean addAll(final Collection<C> collection, final Iterable<? extends C> iterable)" ], [ "addAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean addAll(final Collection<C> collection, final Iterator<? extends C> iterator)" ], [ "addAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean addAll(final Collection<C> collection, final Enumeration<? extends C> enumeration)" ], [ "addAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean addAll(final Collection<C> collection, final C[] elements)" ], [ "get", "org.apache.commons.collections4", "CollectionUtils", "public static <T> T get(final Iterator<T> iterator, final int index)" ], [ "get", "org.apache.commons.collections4", "CollectionUtils", "public static <T> T get(final Iterable<T> iterable, final int index)" ], [ "get", "org.apache.commons.collections4", "CollectionUtils", "public static Object get(final Object object, final int index)" ], [ "get", "org.apache.commons.collections4", "CollectionUtils", "public static <K, V> Map.Entry<K, V> get(final Map<K, V> map, final int index)" ], [ "size", "org.apache.commons.collections4", "CollectionUtils", "public static int size(final Object object)" ], [ "sizeIsEmpty", "org.apache.commons.collections4", "CollectionUtils", "public static boolean sizeIsEmpty(final Object object)" ], [ "isEmpty", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isEmpty(final Collection<?> coll)" ], [ "isNotEmpty", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isNotEmpty(final Collection<?> coll)" ], [ "isFull", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isFull(final Collection<? extends Object> coll)" ], [ "maxSize", "org.apache.commons.collections4", "CollectionUtils", "public static int maxSize(final Collection<? extends Object> coll)" ], [ "collate", "org.apache.commons.collections4", "CollectionUtils", "public static <O extends Comparable<? super O>> List<O> collate(Iterable<? extends O> a, Iterable<? extends O> b)" ], [ "collate", "org.apache.commons.collections4", "CollectionUtils", "public static <O extends Comparable<? super O>> List<O> collate(final Iterable<? extends O> a, final Iterable<? extends O> b, final boolean includeDuplicates)" ], [ "collate", "org.apache.commons.collections4", "CollectionUtils", "public static <O> List<O> collate(final Iterable<? extends O> a, final Iterable<? extends O> b, final Comparator<? super O> c)" ], [ "collate", "org.apache.commons.collections4", "CollectionUtils", "public static <O> List<O> collate(final Iterable<? extends O> a, final Iterable<? extends O> b, final Comparator<? super O> c, final boolean includeDuplicates)" ], [ "permutations", "org.apache.commons.collections4", "CollectionUtils", "public static <E> Collection<List<E>> permutations(final Collection<E> collection)" ], [ "retainAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> Collection<C> retainAll(final Collection<C> collection, final Collection<?> retain)" ], [ "retainAll", "org.apache.commons.collections4", "CollectionUtils", "public static <E> Collection<E> retainAll(final Iterable<E> collection, final Iterable<? extends E> retain, final Equator<? super E> equator)" ], [ "removeAll", "org.apache.commons.collections4", "CollectionUtils", "public static <E> Collection<E> removeAll(final Collection<E> collection, final Collection<?> remove)" ], [ "removeAll", "org.apache.commons.collections4", "CollectionUtils", "public static <E> Collection<E> removeAll(final Iterable<E> collection, final Iterable<? extends E> remove, final Equator<? super E> equator)" ], [ "synchronizedCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <C> Collection<C> synchronizedCollection(final Collection<C> collection)" ], [ "unmodifiableCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <C> Collection<C> unmodifiableCollection(final Collection<? extends C> collection)" ], [ "predicatedCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <C> Collection<C> predicatedCollection(final Collection<C> collection, final Predicate<? super C> predicate)" ], [ "transformingCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <E> Collection<E> transformingCollection(final Collection<E> collection, final Transformer<? super E, ? extends E> transformer)" ], [ "extractSingleton", "org.apache.commons.collections4", "CollectionUtils", "public static <E> E extractSingleton(final Collection<E> collection)" ], [ "transformingMap", "org.apache.commons.collections4.splitmap", "TransformedSplitMap", "public static <J, K, U, V> TransformedSplitMap<J, K, U, V> transformingMap(final Map<K, V> map, final Transformer<? super J, ? extends K> keyTransformer, final Transformer<? super U, ? extends V> valueTransformer)" ], [ "emptyIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> emptyIterable()" ], [ "chainedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> chainedIterable(final Iterable<? extends E> a, final Iterable<? extends E> b)" ], [ "chainedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> chainedIterable(final Iterable<? extends E> a, final Iterable<? extends E> b, final Iterable<? extends E> c)" ], [ "chainedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> chainedIterable(final Iterable<? extends E> a, final Iterable<? extends E> b, final Iterable<? extends E> c, final Iterable<? extends E> d)" ], [ "chainedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> chainedIterable(final Iterable<? extends E>... iterables)" ], [ "collatedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> collatedIterable(final Iterable<? extends E> a, final Iterable<? extends E> b)" ], [ "collatedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> collatedIterable(final Comparator<? super E> comparator, final Iterable<? extends E> a, final Iterable<? extends E> b)" ], [ "filteredIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> filteredIterable(final Iterable<E> iterable, final Predicate<? super E> predicate)" ], [ "boundedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> boundedIterable(final Iterable<E> iterable, final long maxSize)" ], [ "loopingIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> loopingIterable(final Iterable<E> iterable)" ], [ "reversedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> reversedIterable(final Iterable<E> iterable)" ], [ "skippingIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> skippingIterable(final Iterable<E> iterable, final long elementsToSkip)" ], [ "transformedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <I, O> Iterable<O> transformedIterable(final Iterable<I> iterable, final Transformer<? super I, ? extends O> transformer)" ], [ "uniqueIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> uniqueIterable(final Iterable<E> iterable)" ], [ "unmodifiableIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> unmodifiableIterable(final Iterable<E> iterable)" ], [ "zippingIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> zippingIterable(final Iterable<? extends E> a, final Iterable<? extends E> b)" ], [ "zippingIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> zippingIterable(final Iterable<? extends E> first, final Iterable<? extends E>... others)" ], [ "emptyIfNull", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> emptyIfNull(final Iterable<E> iterable)" ], [ "forEachButLast", "org.apache.commons.collections4", "IterableUtils", "public static <E> E forEachButLast(final Iterable<E> iterable, final Closure<? super E> closure)" ], [ "find", "org.apache.commons.collections4", "IterableUtils", "public static <E> E find(final Iterable<E> iterable, final Predicate<? super E> predicate)" ], [ "indexOf", "org.apache.commons.collections4", "IterableUtils", "public static <E> int indexOf(final Iterable<E> iterable, final Predicate<? super E> predicate)" ], [ "matchesAll", "org.apache.commons.collections4", "IterableUtils", "public static <E> boolean matchesAll(final Iterable<E> iterable, final Predicate<? super E> predicate)" ], [ "matchesAny", "org.apache.commons.collections4", "IterableUtils", "public static <E> boolean matchesAny(final Iterable<E> iterable, final Predicate<? super E> predicate)" ], [ "countMatches", "org.apache.commons.collections4", "IterableUtils", "public static <E> long countMatches(final Iterable<E> input, final Predicate<? super E> predicate)" ], [ "isEmpty", "org.apache.commons.collections4", "IterableUtils", "public static boolean isEmpty(final Iterable<?> iterable)" ], [ "contains", "org.apache.commons.collections4", "IterableUtils", "public static <E> boolean contains(final Iterable<E> iterable, final Object object)" ], [ "contains", "org.apache.commons.collections4", "IterableUtils", "public static <E> boolean contains(final Iterable<? extends E> iterable, final E object, final Equator<? super E> equator)" ], [ "frequency", "org.apache.commons.collections4", "IterableUtils", "public static <E, T extends E> int frequency(final Iterable<E> iterable, final T obj)" ], [ "get", "org.apache.commons.collections4", "IterableUtils", "public static <T> T get(final Iterable<T> iterable, final int index)" ], [ "size", "org.apache.commons.collections4", "IterableUtils", "public static int size(final Iterable<?> iterable)" ], [ "partition", "org.apache.commons.collections4", "IterableUtils", "public static <O> List<List<O>> partition(final Iterable<? extends O> iterable, final Predicate<? super O> predicate)" ], [ "partition", "org.apache.commons.collections4", "IterableUtils", "public static <O> List<List<O>> partition(final Iterable<? extends O> iterable, final Predicate<? super O>... predicates)" ], [ "partition", "org.apache.commons.collections4", "IterableUtils", "public static <O, R extends Collection<O>> List<R> partition(final Iterable<? extends O> iterable, final Factory<R> partitionFactory, final Predicate<? super O>... predicates)" ], [ "toList", "org.apache.commons.collections4", "IterableUtils", "public static <E> List<E> toList(final Iterable<E> iterable)" ], [ "toString", "org.apache.commons.collections4", "IterableUtils", "public static <E> String toString(final Iterable<E> iterable)" ], [ "toString", "org.apache.commons.collections4", "IterableUtils", "public static <E> String toString(final Iterable<E> iterable, final Transformer<? super E, String> transformer)" ], [ "toString", "org.apache.commons.collections4", "IterableUtils", "public static <E> String toString(final Iterable<E> iterable, final Transformer<? super E, String> transformer, final String delimiter, final String prefix, final String suffix)" ], [ "unmodifiableTrie", "org.apache.commons.collections4", "TrieUtils", "public static <K, V> Trie<K, V> unmodifiableTrie(final Trie<K, ? extends V> trie)" ], [ "exceptionClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> exceptionClosure()" ], [ "nopClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> nopClosure()" ], [ "asClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> asClosure(final Transformer<? super E, ?> transformer)" ], [ "forClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> forClosure(final int count, final Closure<? super E> closure)" ], [ "whileClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> whileClosure(final Predicate<? super E> predicate, final Closure<? super E> closure)" ], [ "doWhileClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> doWhileClosure(final Closure<? super E> closure, final Predicate<? super E> predicate)" ], [ "invokerClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> invokerClosure(final String methodName)" ], [ "invokerClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> invokerClosure(final String methodName, final Class<?>[] paramTypes, final Object[] args)" ], [ "chainedClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> chainedClosure(final Closure<? super E>... closures)" ], [ "chainedClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> chainedClosure(final Collection<? extends Closure<? super E>> closures)" ], [ "ifClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> ifClosure(final Predicate<? super E> predicate, final Closure<? super E> trueClosure)" ], [ "ifClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> ifClosure(final Predicate<? super E> predicate, final Closure<? super E> trueClosure, final Closure<? super E> falseClosure)" ], [ "switchClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> switchClosure(final Predicate<? super E>[] predicates, final Closure<? super E>[] closures)" ], [ "switchClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> switchClosure(final Predicate<? super E>[] predicates, final Closure<? super E>[] closures, final Closure<? super E> defaultClosure)" ], [ "switchClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> switchClosure(final Map<Predicate<E>, Closure<E>> predicatesAndClosures)" ], [ "switchMapClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> switchMapClosure(final Map<? extends E, Closure<E>> objectsAndClosures)" ], [ "unmodifiableTrie", "org.apache.commons.collections4.trie", "UnmodifiableTrie", "public static <K, V> Trie<K, V> unmodifiableTrie(final Trie<K, ? extends V> trie)" ], [ "isOutOfBoundsIndex", "org.apache.commons.collections4.trie", "KeyAnalyzer", "static boolean isOutOfBoundsIndex(final int bitIndex)" ], [ "isEqualBitKey", "org.apache.commons.collections4.trie", "KeyAnalyzer", "static boolean isEqualBitKey(final int bitIndex)" ], [ "isNullBitKey", "org.apache.commons.collections4.trie", "KeyAnalyzer", "static boolean isNullBitKey(final int bitIndex)" ], [ "isValidBitIndex", "org.apache.commons.collections4.trie", "KeyAnalyzer", "static boolean isValidBitIndex(final int bitIndex)" ], [ "isValidUplink", "org.apache.commons.collections4.trie", "AbstractPatriciaTrie", "static boolean isValidUplink(final TrieEntry<?, ?> next, final TrieEntry<?, ?> from)" ], [ "compare", "org.apache.commons.collections4.trie", "AbstractBitwiseTrie", "static boolean compare(final Object a, final Object b)" ], [ "transformingSortedMap", "org.apache.commons.collections4.map", "TransformedSortedMap", "public static <K, V> TransformedSortedMap<K, V> transformingSortedMap(final SortedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "transformedSortedMap", "org.apache.commons.collections4.map", "TransformedSortedMap", "public static <K, V> TransformedSortedMap<K, V> transformedSortedMap(final SortedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "predicatedMap", "org.apache.commons.collections4.map", "PredicatedMap", "public static <K, V> PredicatedMap<K, V> predicatedMap(final Map<K, V> map, final Predicate<? super K> keyPredicate, final Predicate<? super V> valuePredicate)" ], [ "fixedSizeSortedMap", "org.apache.commons.collections4.map", "FixedSizeSortedMap", "public static <K, V> FixedSizeSortedMap<K, V> fixedSizeSortedMap(final SortedMap<K, V> map)" ], [ "unmodifiableSortedMap", "org.apache.commons.collections4.map", "UnmodifiableSortedMap", "public static <K, V> SortedMap<K, V> unmodifiableSortedMap(final SortedMap<K, ? extends V> map)" ], [ "predicatedSortedMap", "org.apache.commons.collections4.map", "PredicatedSortedMap", "public static <K, V> PredicatedSortedMap<K, V> predicatedSortedMap(final SortedMap<K, V> map, final Predicate<? super K> keyPredicate, final Predicate<? super V> valuePredicate)" ], [ "defaultedMap", "org.apache.commons.collections4.map", "DefaultedMap", "public static <K, V> DefaultedMap<K, V> defaultedMap(final Map<K, V> map, final V defaultValue)" ], [ "defaultedMap", "org.apache.commons.collections4.map", "DefaultedMap", "public static <K, V> DefaultedMap<K, V> defaultedMap(final Map<K, V> map, final Factory<? extends V> factory)" ], [ "defaultedMap", "org.apache.commons.collections4.map", "DefaultedMap", "public static <K, V> Map<K, V> defaultedMap(final Map<K, V> map, final Transformer<? super K, ? extends V> transformer)" ], [ "fixedSizeMap", "org.apache.commons.collections4.map", "FixedSizeMap", "public static <K, V> FixedSizeMap<K, V> fixedSizeMap(final Map<K, V> map)" ], [ "lazySortedMap", "org.apache.commons.collections4.map", "LazySortedMap", "public static <K, V> LazySortedMap<K, V> lazySortedMap(final SortedMap<K, V> map, final Factory<? extends V> factory)" ], [ "lazySortedMap", "org.apache.commons.collections4.map", "LazySortedMap", "public static <K, V> LazySortedMap<K, V> lazySortedMap(final SortedMap<K, V> map, final Transformer<? super K, ? extends V> factory)" ], [ "unmodifiableOrderedMap", "org.apache.commons.collections4.map", "UnmodifiableOrderedMap", "public static <K, V> OrderedMap<K, V> unmodifiableOrderedMap(final OrderedMap<? extends K, ? extends V> map)" ], [ "unmodifiableMap", "org.apache.commons.collections4.map", "UnmodifiableMap", "public static <K, V> Map<K, V> unmodifiableMap(final Map<? extends K, ? extends V> map)" ], [ "listOrderedMap", "org.apache.commons.collections4.map", "ListOrderedMap", "public static <K, V> ListOrderedMap<K, V> listOrderedMap(final Map<K, V> map)" ], [ "unmodifiableEntrySet", "org.apache.commons.collections4.map", "UnmodifiableEntrySet", "public static <K, V> Set<Map.Entry<K, V>> unmodifiableEntrySet(final Set<Map.Entry<K, V>> set)" ], [ "resolve", "org.apache.commons.collections4.map", "AbstractReferenceMap", "public static ReferenceStrength resolve(final int value)" ], [ "resolve", "org.apache.commons.collections4.map", "ReferenceStrength", "public static ReferenceStrength resolve(final int value)" ], [ "multiKeyMap", "org.apache.commons.collections4.map", "MultiKeyMap", "public static <K, V> MultiKeyMap<K, V> multiKeyMap(final AbstractHashedMap<MultiKey<? extends K>, V> map)" ], [ "lazyMap", "org.apache.commons.collections4.map", "LazyMap", "public static <K, V> LazyMap<K, V> lazyMap(final Map<K, V> map, final Factory<? extends V> factory)" ], [ "lazyMap", "org.apache.commons.collections4.map", "LazyMap", "public static <V, K> LazyMap<K, V> lazyMap(final Map<K, V> map, final Transformer<? super K, ? extends V> factory)" ], [ "multiValueMap", "org.apache.commons.collections4.map", "MultiValueMap", "public static <K, V> MultiValueMap<K, V> multiValueMap(final Map<K, ? super Collection<V>> map)" ], [ "multiValueMap", "org.apache.commons.collections4.map", "MultiValueMap", "public static <K, V, C extends Collection<V>> MultiValueMap<K, V> multiValueMap(final Map<K, ? super C> map, final Class<C> collectionClass)" ], [ "multiValueMap", "org.apache.commons.collections4.map", "MultiValueMap", "public static <K, V, C extends Collection<V>> MultiValueMap<K, V> multiValueMap(final Map<K, ? super C> map, final Factory<C> collectionFactory)" ], [ "transformingMap", "org.apache.commons.collections4.map", "TransformedMap", "public static <K, V> TransformedMap<K, V> transformingMap(final Map<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "transformedMap", "org.apache.commons.collections4.map", "TransformedMap", "public static <K, V> TransformedMap<K, V> transformedMap(final Map<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "synchronizedMultiSet", "org.apache.commons.collections4", "MultiSetUtils", "public static <E> MultiSet<E> synchronizedMultiSet(final MultiSet<E> multiset)" ], [ "unmodifiableMultiSet", "org.apache.commons.collections4", "MultiSetUtils", "public static <E> MultiSet<E> unmodifiableMultiSet(final MultiSet<? extends E> multiset)" ], [ "predicatedMultiSet", "org.apache.commons.collections4", "MultiSetUtils", "public static <E> MultiSet<E> predicatedMultiSet(final MultiSet<E> multiset, final Predicate<? super E> predicate)" ], [ "emptyMultiSet", "org.apache.commons.collections4", "MultiSetUtils", "public static <E> MultiSet<E> emptyMultiSet()" ], [ "unmodifiableMultiValuedMap", "org.apache.commons.collections4.multimap", "UnmodifiableMultiValuedMap", "public static <K, V> UnmodifiableMultiValuedMap<K, V> unmodifiableMultiValuedMap(MultiValuedMap<? extends K, ? extends V> map)" ], [ "transformingMap", "org.apache.commons.collections4.multimap", "TransformedMultiValuedMap", "public static <K, V> TransformedMultiValuedMap<K, V> transformingMap(final MultiValuedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "transformedMap", "org.apache.commons.collections4.multimap", "TransformedMultiValuedMap", "public static <K, V> TransformedMultiValuedMap<K, V> transformedMap(final MultiValuedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "lazyList", "org.apache.commons.collections4.list", "LazyList", "public static <E> LazyList<E> lazyList(final List<E> list, final Factory<? extends E> factory)" ], [ "setUniqueList", "org.apache.commons.collections4.list", "SetUniqueList", "public static <E> SetUniqueList<E> setUniqueList(final List<E> list)" ], [ "unmodifiableList", "org.apache.commons.collections4.list", "UnmodifiableList", "public static <E> List<E> unmodifiableList(final List<? extends E> list)" ], [ "fixedSizeList", "org.apache.commons.collections4.list", "FixedSizeList", "public static <E> FixedSizeList<E> fixedSizeList(final List<E> list)" ], [ "transformingList", "org.apache.commons.collections4.list", "TransformedList", "public static <E> TransformedList<E> transformingList(final List<E> list, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedList", "org.apache.commons.collections4.list", "TransformedList", "public static <E> TransformedList<E> transformedList(final List<E> list, final Transformer<? super E, ? extends E> transformer)" ], [ "growthList", "org.apache.commons.collections4.list", "GrowthList", "public static <E> GrowthList<E> growthList(final List<E> list)" ], [ "predicatedList", "org.apache.commons.collections4.list", "PredicatedList", "public static <T> PredicatedList<T> predicatedList(final List<T> list, final Predicate<? super T> predicate)" ], [ "transformingQueue", "org.apache.commons.collections4.queue", "TransformedQueue", "public static <E> TransformedQueue<E> transformingQueue(final Queue<E> queue, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedQueue", "org.apache.commons.collections4.queue", "TransformedQueue", "public static <E> TransformedQueue<E> transformedQueue(final Queue<E> queue, final Transformer<? super E, ? extends E> transformer)" ], [ "unmodifiableQueue", "org.apache.commons.collections4.queue", "UnmodifiableQueue", "public static <E> Queue<E> unmodifiableQueue(final Queue<? extends E> queue)" ], [ "predicatedQueue", "org.apache.commons.collections4.queue", "PredicatedQueue", "public static <E> PredicatedQueue<E> predicatedQueue(final Queue<E> Queue, final Predicate<? super E> predicate)" ], [ "empty", "org.apache.commons.collections4", "FluentIterable", "public static <T> FluentIterable<T> empty()" ], [ "of", "org.apache.commons.collections4", "FluentIterable", "public static <T> FluentIterable<T> of(final T singleton)" ], [ "of", "org.apache.commons.collections4", "FluentIterable", "public static <T> FluentIterable<T> of(final T... elements)" ], [ "of", "org.apache.commons.collections4", "FluentIterable", "public static <T> FluentIterable<T> of(final Iterable<T> iterable)" ], [ "exceptionTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> exceptionTransformer()" ], [ "nullTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> nullTransformer()" ], [ "nopTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> nopTransformer()" ], [ "cloneTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> cloneTransformer()" ], [ "constantTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> constantTransformer(final O constantToReturn)" ], [ "asTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> asTransformer(final Closure<? super T> closure)" ], [ "asTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, Boolean> asTransformer(final Predicate<? super T> predicate)" ], [ "asTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> asTransformer(final Factory<? extends O> factory)" ], [ "chainedTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> chainedTransformer(final Transformer<? super T, ? extends T>... transformers)" ], [ "chainedTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> chainedTransformer(final Collection<? extends Transformer<? super T, ? extends T>> transformers)" ], [ "ifTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> ifTransformer(final Predicate<? super T> predicate, final Transformer<? super T, ? extends T> trueTransformer)" ], [ "ifTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> ifTransformer(final Predicate<? super I> predicate, final Transformer<? super I, ? extends O> trueTransformer, final Transformer<? super I, ? extends O> falseTransformer)" ], [ "switchTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> switchTransformer(final Predicate<? super I> predicate, final Transformer<? super I, ? extends O> trueTransformer, final Transformer<? super I, ? extends O> falseTransformer)" ], [ "switchTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> switchTransformer(final Predicate<? super I>[] predicates, final Transformer<? super I, ? extends O>[] transformers)" ], [ "switchTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> switchTransformer(final Predicate<? super I>[] predicates, final Transformer<? super I, ? extends O>[] transformers, final Transformer<? super I, ? extends O> defaultTransformer)" ], [ "switchTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> switchTransformer(final Map<Predicate<I>, Transformer<I, O>> predicatesAndTransformers)" ], [ "switchMapTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> switchMapTransformer(final Map<I, Transformer<I, O>> objectsAndTransformers)" ], [ "instantiateTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<Class<? extends T>, T> instantiateTransformer()" ], [ "instantiateTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<Class<? extends T>, T> instantiateTransformer(final Class<?>[] paramTypes, final Object[] args)" ], [ "mapTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> mapTransformer(final Map<? super I, ? extends O> map)" ], [ "invokerTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> invokerTransformer(final String methodName)" ], [ "invokerTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> invokerTransformer(final String methodName, final Class<?>[] paramTypes, final Object[] args)" ], [ "stringValueTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, String> stringValueTransformer()" ], [ "exceptionPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> exceptionPredicate()" ], [ "truePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> truePredicate()" ], [ "falsePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> falsePredicate()" ], [ "nullPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nullPredicate()" ], [ "notNullPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> notNullPredicate()" ], [ "equalPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> equalPredicate(final T value)" ], [ "identityPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> identityPredicate(final T value)" ], [ "instanceofPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static Predicate<Object> instanceofPredicate(final Class<?> type)" ], [ "uniquePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> uniquePredicate()" ], [ "invokerPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> invokerPredicate(final String methodName)" ], [ "invokerPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> invokerPredicate(final String methodName, final Class<?>[] paramTypes, final Object[] args)" ], [ "andPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> andPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "allPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> allPredicate(final Predicate<? super T>... predicates)" ], [ "allPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> allPredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "orPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> orPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "anyPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> anyPredicate(final Predicate<? super T>... predicates)" ], [ "anyPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> anyPredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "eitherPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> eitherPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "onePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> onePredicate(final Predicate<? super T>... predicates)" ], [ "onePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> onePredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "neitherPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> neitherPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "nonePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nonePredicate(final Predicate<? super T>... predicates)" ], [ "nonePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nonePredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "notPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> notPredicate(final Predicate<? super T> predicate)" ], [ "asPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> asPredicate(final Transformer<? super T, Boolean> transformer)" ], [ "nullIsExceptionPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nullIsExceptionPredicate(final Predicate<? super T> predicate)" ], [ "nullIsFalsePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nullIsFalsePredicate(final Predicate<? super T> predicate)" ], [ "nullIsTruePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nullIsTruePredicate(final Predicate<? super T> predicate)" ], [ "transformedPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> transformedPredicate(final Transformer<? super T, ? extends T> transformer, final Predicate<? super T> predicate)" ], [ "emptySet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> emptySet()" ], [ "emptySortedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> emptySortedSet()" ], [ "emptyIfNull", "org.apache.commons.collections4", "SetUtils", "public static <T> Set<T> emptyIfNull(final Set<T> set)" ], [ "isEqualSet", "org.apache.commons.collections4", "SetUtils", "public static boolean isEqualSet(final Collection<?> set1, final Collection<?> set2)" ], [ "hashCodeForSet", "org.apache.commons.collections4", "SetUtils", "public static <T> int hashCodeForSet(final Collection<T> set)" ], [ "newIdentityHashSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> newIdentityHashSet()" ], [ "synchronizedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> synchronizedSet(final Set<E> set)" ], [ "unmodifiableSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> unmodifiableSet(final Set<? extends E> set)" ], [ "predicatedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> predicatedSet(final Set<E> set, final Predicate<? super E> predicate)" ], [ "transformedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> transformedSet(final Set<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "orderedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> orderedSet(final Set<E> set)" ], [ "synchronizedSortedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> synchronizedSortedSet(final SortedSet<E> set)" ], [ "unmodifiableSortedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> unmodifiableSortedSet(final SortedSet<E> set)" ], [ "predicatedSortedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> predicatedSortedSet(final SortedSet<E> set, final Predicate<? super E> predicate)" ], [ "transformedSortedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> transformedSortedSet(final SortedSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "unmodifiableNavigableSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> unmodifiableNavigableSet(final NavigableSet<E> set)" ], [ "predicatedNavigableSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> predicatedNavigableSet(final NavigableSet<E> set, final Predicate<? super E> predicate)" ], [ "transformedNavigableSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> transformedNavigableSet(final NavigableSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "union", "org.apache.commons.collections4", "SetUtils", "public static <E> SetView<E> union(final Set<? extends E> a, final Set<? extends E> b)" ], [ "difference", "org.apache.commons.collections4", "SetUtils", "public static <E> SetView<E> difference(final Set<? extends E> a, final Set<? extends E> b)" ], [ "intersection", "org.apache.commons.collections4", "SetUtils", "public static <E> SetView<E> intersection(final Set<? extends E> a, final Set<? extends E> b)" ], [ "disjunction", "org.apache.commons.collections4", "SetUtils", "public static <E> SetView<E> disjunction(final Set<? extends E> a, final Set<? extends E> b)" ], [ "transformingSet", "org.apache.commons.collections4.set", "TransformedSet", "public static <E> TransformedSet<E> transformingSet(final Set<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedSet", "org.apache.commons.collections4.set", "TransformedSet", "public static <E> Set<E> transformedSet(final Set<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "transformingNavigableSet", "org.apache.commons.collections4.set", "TransformedNavigableSet", "public static <E> TransformedNavigableSet<E> transformingNavigableSet(final NavigableSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedNavigableSet", "org.apache.commons.collections4.set", "TransformedNavigableSet", "public static <E> TransformedNavigableSet<E> transformedNavigableSet(final NavigableSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "predicatedNavigableSet", "org.apache.commons.collections4.set", "PredicatedNavigableSet", "public static <E> PredicatedNavigableSet<E> predicatedNavigableSet(final NavigableSet<E> set, final Predicate<? super E> predicate)" ], [ "listOrderedSet", "org.apache.commons.collections4.set", "ListOrderedSet", "public static <E> ListOrderedSet<E> listOrderedSet(final Set<E> set, final List<E> list)" ], [ "listOrderedSet", "org.apache.commons.collections4.set", "ListOrderedSet", "public static <E> ListOrderedSet<E> listOrderedSet(final Set<E> set)" ], [ "listOrderedSet", "org.apache.commons.collections4.set", "ListOrderedSet", "public static <E> ListOrderedSet<E> listOrderedSet(final List<E> list)" ], [ "unmodifiableSet", "org.apache.commons.collections4.set", "UnmodifiableSet", "public static <E> Set<E> unmodifiableSet(final Set<? extends E> set)" ], [ "mapBackedSet", "org.apache.commons.collections4.set", "MapBackedSet", "public static <E, V> MapBackedSet<E, V> mapBackedSet(final Map<E, ? super V> map)" ], [ "mapBackedSet", "org.apache.commons.collections4.set", "MapBackedSet", "public static <E, V> MapBackedSet<E, V> mapBackedSet(final Map<E, ? super V> map, final V dummyValue)" ], [ "unmodifiableSortedSet", "org.apache.commons.collections4.set", "UnmodifiableSortedSet", "public static <E> SortedSet<E> unmodifiableSortedSet(final SortedSet<E> set)" ], [ "predicatedSortedSet", "org.apache.commons.collections4.set", "PredicatedSortedSet", "public static <E> PredicatedSortedSet<E> predicatedSortedSet(final SortedSet<E> set, final Predicate<? super E> predicate)" ], [ "predicatedSet", "org.apache.commons.collections4.set", "PredicatedSet", "public static <E> PredicatedSet<E> predicatedSet(final Set<E> set, final Predicate<? super E> predicate)" ], [ "unmodifiableNavigableSet", "org.apache.commons.collections4.set", "UnmodifiableNavigableSet", "public static <E> NavigableSet<E> unmodifiableNavigableSet(final NavigableSet<E> set)" ], [ "transformingSortedSet", "org.apache.commons.collections4.set", "TransformedSortedSet", "public static <E> TransformedSortedSet<E> transformingSortedSet(final SortedSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedSortedSet", "org.apache.commons.collections4.set", "TransformedSortedSet", "public static <E> TransformedSortedSet<E> transformedSortedSet(final SortedSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "get", "org.apache.commons.collections4", "EnumerationUtils", "public static <T> T get(final Enumeration<T> e, final int index)" ], [ "toList", "org.apache.commons.collections4", "EnumerationUtils", "public static <E> List<E> toList(final Enumeration<? extends E> enumeration)" ], [ "toList", "org.apache.commons.collections4", "EnumerationUtils", "public static List<String> toList(final StringTokenizer stringTokenizer)" ], [ "unmodifiableQueue", "org.apache.commons.collections4", "QueueUtils", "public static <E> Queue<E> unmodifiableQueue(final Queue<? extends E> queue)" ], [ "predicatedQueue", "org.apache.commons.collections4", "QueueUtils", "public static <E> Queue<E> predicatedQueue(final Queue<E> queue, final Predicate<? super E> predicate)" ], [ "transformingQueue", "org.apache.commons.collections4", "QueueUtils", "public static <E> Queue<E> transformingQueue(final Queue<E> queue, final Transformer<? super E, ? extends E> transformer)" ], [ "emptyQueue", "org.apache.commons.collections4", "QueueUtils", "public static <E> Queue<E> emptyQueue()" ], [ "synchronizedBag", "org.apache.commons.collections4.bag", "SynchronizedBag", "public static <E> SynchronizedBag<E> synchronizedBag(final Bag<E> bag)" ], [ "collectionBag", "org.apache.commons.collections4.bag", "CollectionBag", "public static <E> Bag<E> collectionBag(final Bag<E> bag)" ], [ "unmodifiableBag", "org.apache.commons.collections4.bag", "UnmodifiableBag", "public static <E> Bag<E> unmodifiableBag(final Bag<? extends E> bag)" ], [ "predicatedSortedBag", "org.apache.commons.collections4.bag", "PredicatedSortedBag", "public static <E> PredicatedSortedBag<E> predicatedSortedBag(final SortedBag<E> bag, final Predicate<? super E> predicate)" ], [ "unmodifiableSortedBag", "org.apache.commons.collections4.bag", "UnmodifiableSortedBag", "public static <E> SortedBag<E> unmodifiableSortedBag(final SortedBag<E> bag)" ], [ "transformingSortedBag", "org.apache.commons.collections4.bag", "TransformedSortedBag", "public static <E> TransformedSortedBag<E> transformingSortedBag(final SortedBag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedSortedBag", "org.apache.commons.collections4.bag", "TransformedSortedBag", "public static <E> TransformedSortedBag<E> transformedSortedBag(final SortedBag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "predicatedBag", "org.apache.commons.collections4.bag", "PredicatedBag", "public static <E> PredicatedBag<E> predicatedBag(final Bag<E> bag, final Predicate<? super E> predicate)" ], [ "synchronizedSortedBag", "org.apache.commons.collections4.bag", "SynchronizedSortedBag", "public static <E> SynchronizedSortedBag<E> synchronizedSortedBag(final SortedBag<E> bag)" ], [ "collectionSortedBag", "org.apache.commons.collections4.bag", "CollectionSortedBag", "public static <E> SortedBag<E> collectionSortedBag(final SortedBag<E> bag)" ], [ "transformingBag", "org.apache.commons.collections4.bag", "TransformedBag", "public static <E> Bag<E> transformingBag(final Bag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedBag", "org.apache.commons.collections4.bag", "TransformedBag", "public static <E> Bag<E> transformedBag(final Bag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "predicatedMultiSet", "org.apache.commons.collections4.multiset", "PredicatedMultiSet", "public static <E> PredicatedMultiSet<E> predicatedMultiSet(final MultiSet<E> multiset, final Predicate<? super E> predicate)" ], [ "unmodifiableMultiSet", "org.apache.commons.collections4.multiset", "UnmodifiableMultiSet", "public static <E> MultiSet<E> unmodifiableMultiSet(final MultiSet<? extends E> multiset)" ], [ "synchronizedMultiSet", "org.apache.commons.collections4.multiset", "SynchronizedMultiSet", "public static <E> SynchronizedMultiSet<E> synchronizedMultiSet(final MultiSet<E> multiset)" ], [ "synchronizedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> synchronizedBag(final Bag<E> bag)" ], [ "unmodifiableBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> unmodifiableBag(final Bag<? extends E> bag)" ], [ "predicatedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> predicatedBag(final Bag<E> bag, final Predicate<? super E> predicate)" ], [ "transformingBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> transformingBag(final Bag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "collectionBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> collectionBag(final Bag<E> bag)" ], [ "synchronizedSortedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> SortedBag<E> synchronizedSortedBag(final SortedBag<E> bag)" ], [ "unmodifiableSortedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> SortedBag<E> unmodifiableSortedBag(final SortedBag<E> bag)" ], [ "predicatedSortedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> SortedBag<E> predicatedSortedBag(final SortedBag<E> bag, final Predicate<? super E> predicate)" ], [ "transformingSortedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> SortedBag<E> transformingSortedBag(final SortedBag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "emptyBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> emptyBag()" ], [ "emptySortedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> SortedBag<E> emptySortedBag()" ], [ "resettableEmptyListIterator", "org.apache.commons.collections4.iterators", "EmptyListIterator", "public static <E> ResettableListIterator<E> resettableEmptyListIterator()" ], [ "emptyListIterator", "org.apache.commons.collections4.iterators", "EmptyListIterator", "public static <E> ListIterator<E> emptyListIterator()" ], [ "unmodifiableOrderedMapIterator", "org.apache.commons.collections4.iterators", "UnmodifiableOrderedMapIterator", "public static <K, V> OrderedMapIterator<K, V> unmodifiableOrderedMapIterator(final OrderedMapIterator<K, ? extends V> iterator)" ], [ "unmodifiableIterator", "org.apache.commons.collections4.iterators", "UnmodifiableIterator", "public static <E> Iterator<E> unmodifiableIterator(final Iterator<? extends E> iterator)" ], [ "peekingIterator", "org.apache.commons.collections4.iterators", "PeekingIterator", "public static <E> PeekingIterator<E> peekingIterator(final Iterator<? extends E> iterator)" ], [ "emptyMapIterator", "org.apache.commons.collections4.iterators", "EmptyMapIterator", "public static <K, V> MapIterator<K, V> emptyMapIterator()" ], [ "emptyOrderedIterator", "org.apache.commons.collections4.iterators", "EmptyOrderedIterator", "public static <E> OrderedIterator<E> emptyOrderedIterator()" ], [ "umodifiableListIterator", "org.apache.commons.collections4.iterators", "UnmodifiableListIterator", "public static <E> ListIterator<E> umodifiableListIterator(final ListIterator<? extends E> iterator)" ], [ "emptyOrderedMapIterator", "org.apache.commons.collections4.iterators", "EmptyOrderedMapIterator", "public static <K, V> OrderedMapIterator<K, V> emptyOrderedMapIterator()" ], [ "unmodifiableMapIterator", "org.apache.commons.collections4.iterators", "UnmodifiableMapIterator", "public static <K, V> MapIterator<K, V> unmodifiableMapIterator(final MapIterator<? extends K, ? extends V> iterator)" ], [ "resettableEmptyIterator", "org.apache.commons.collections4.iterators", "EmptyIterator", "public static <E> ResettableIterator<E> resettableEmptyIterator()" ], [ "emptyIterator", "org.apache.commons.collections4.iterators", "EmptyIterator", "public static <E> Iterator<E> emptyIterator()" ], [ "pushbackIterator", "org.apache.commons.collections4.iterators", "PushbackIterator", "public static <E> PushbackIterator<E> pushbackIterator(final Iterator<? extends E> iterator)" ], [ "readableMap", "org.apache.commons.collections4", "SplitMapUtils", "public static <K, V> IterableMap<K, V> readableMap(final Get<K, V> get)" ], [ "writableMap", "org.apache.commons.collections4", "SplitMapUtils", "public static <K, V> Map<K, V> writableMap(final Put<K, V> put)" ] ],
  "tokensProjectClassesNonPrivateStaticAttributes" : [ [ "EMPTY_ITERATOR", "org.apache.commons.collections4", "IteratorUtils", "public static final ResettableIterator EMPTY_ITERATOR = EmptyIterator.RESETTABLE_INSTANCE;" ], [ "EMPTY_LIST_ITERATOR", "org.apache.commons.collections4", "IteratorUtils", "public static final ResettableListIterator EMPTY_LIST_ITERATOR = EmptyListIterator.RESETTABLE_INSTANCE;" ], [ "EMPTY_ORDERED_ITERATOR", "org.apache.commons.collections4", "IteratorUtils", "public static final OrderedIterator EMPTY_ORDERED_ITERATOR = EmptyOrderedIterator.INSTANCE;" ], [ "EMPTY_MAP_ITERATOR", "org.apache.commons.collections4", "IteratorUtils", "public static final MapIterator EMPTY_MAP_ITERATOR = EmptyMapIterator.INSTANCE;" ], [ "EMPTY_ORDERED_MAP_ITERATOR", "org.apache.commons.collections4", "IteratorUtils", "public static final OrderedMapIterator EMPTY_ORDERED_MAP_ITERATOR = EmptyOrderedMapIterator.INSTANCE;" ], [ "NATURAL_COMPARATOR", "org.apache.commons.collections4", "ComparatorUtils", "public static final Comparator NATURAL_COMPARATOR = ComparableComparator.<Comparable>comparableComparator();" ], [ "EMPTY_MULTI_VALUED_MAP", "org.apache.commons.collections4", "MultiMapUtils", "public static final MultiValuedMap EMPTY_MULTI_VALUED_MAP = UnmodifiableMultiValuedMap.unmodifiableMultiValuedMap(new ArrayListValuedHashMap(0, 0));" ], [ "EMPTY_SORTED_MAP", "org.apache.commons.collections4", "MapUtils", "public static final SortedMap EMPTY_SORTED_MAP = UnmodifiableSortedMap.unmodifiableSortedMap(new TreeMap<Object, Object>());" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "DefaultEquator", "public static final DefaultEquator INSTANCE = new DefaultEquator<Object>();" ], [ "HASHCODE_NULL", "org.apache.commons.collections4.functors", "DefaultEquator", "public static final int HASHCODE_NULL = -1;" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "ExceptionClosure", "public static final Closure INSTANCE = new ExceptionClosure<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "NOPClosure", "public static final Closure INSTANCE = new NOPClosure<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "NullPredicate", "public static final Predicate INSTANCE = new NullPredicate<Object>();" ], [ "NULL_INSTANCE", "org.apache.commons.collections4.functors", "ConstantTransformer", "public static final Transformer NULL_INSTANCE = new ConstantTransformer<Object, Object>(null);" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "ExceptionTransformer", "public static final Transformer INSTANCE = new ExceptionTransformer<Object, Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "NOPTransformer", "public static final Transformer INSTANCE = new NOPTransformer<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "ExceptionFactory", "public static final Factory INSTANCE = new ExceptionFactory<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "ExceptionPredicate", "public static final Predicate INSTANCE = new ExceptionPredicate<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "FalsePredicate", "public static final Predicate INSTANCE = new FalsePredicate<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "CloneTransformer", "public static final Transformer INSTANCE = new CloneTransformer<Object>();" ], [ "NULL_INSTANCE", "org.apache.commons.collections4.functors", "ConstantFactory", "public static final Factory NULL_INSTANCE = new ConstantFactory<Object>(null);" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "TruePredicate", "public static final Predicate INSTANCE = new TruePredicate<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "NotNullPredicate", "public static final Predicate INSTANCE = new NotNullPredicate<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.comparators", "ComparableComparator", "public static final ComparableComparator INSTANCE = new ComparableComparator();" ], [ "EMPTY_COLLECTION", "org.apache.commons.collections4", "CollectionUtils", "public static final Collection EMPTY_COLLECTION = UnmodifiableCollection.unmodifiableCollection(new ArrayList<Object>());" ], [ "EMPTY_ITERABLE", "org.apache.commons.collections4", "IterableUtils", "static final FluentIterable EMPTY_ITERABLE = new FluentIterable<Object>() {\n\n    @Override\n    public Iterator<Object> iterator() {\n        return IteratorUtils.emptyIterator();\n    }\n};" ], [ "NULL_BIT_KEY", "org.apache.commons.collections4.trie", "KeyAnalyzer", "public static final int NULL_BIT_KEY = -1;" ], [ "EQUAL_BIT_KEY", "org.apache.commons.collections4.trie", "KeyAnalyzer", "public static final int EQUAL_BIT_KEY = -2;" ], [ "OUT_OF_BOUNDS_BIT_KEY", "org.apache.commons.collections4.trie", "KeyAnalyzer", "public static final int OUT_OF_BOUNDS_BIT_KEY = -3;" ], [ "INSTANCE", "org.apache.commons.collections4.trie.analyzer", "StringKeyAnalyzer", "public static final StringKeyAnalyzer INSTANCE = new StringKeyAnalyzer();" ], [ "LENGTH", "org.apache.commons.collections4.trie.analyzer", "StringKeyAnalyzer", "public static final int LENGTH = Character.SIZE;" ], [ "NO_NEXT_ENTRY", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String NO_NEXT_ENTRY = \"No next() entry in the iteration\";" ], [ "NO_PREVIOUS_ENTRY", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String NO_PREVIOUS_ENTRY = \"No previous() entry in the iteration\";" ], [ "REMOVE_INVALID", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String REMOVE_INVALID = \"remove() can only be called once after next()\";" ], [ "GETKEY_INVALID", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String GETKEY_INVALID = \"getKey() can only be called after next() and before remove()\";" ], [ "GETVALUE_INVALID", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String GETVALUE_INVALID = \"getValue() can only be called after next() and before remove()\";" ], [ "SETVALUE_INVALID", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String SETVALUE_INVALID = \"setValue() can only be called after next() and before remove()\";" ], [ "DEFAULT_CAPACITY", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final int DEFAULT_CAPACITY = 16;" ], [ "DEFAULT_THRESHOLD", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final int DEFAULT_THRESHOLD = 12;" ], [ "DEFAULT_LOAD_FACTOR", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final float DEFAULT_LOAD_FACTOR = 0.75f;" ], [ "MAXIMUM_CAPACITY", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final int MAXIMUM_CAPACITY = 1 << 30;" ], [ "NULL", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final Object NULL = new Object();" ], [ "DEFAULT_MAX_SIZE", "org.apache.commons.collections4.map", "LRUMap", "protected static final int DEFAULT_MAX_SIZE = 100;" ], [ "EMPTY_MULTISET", "org.apache.commons.collections4", "MultiSetUtils", "public static final MultiSet EMPTY_MULTISET = UnmodifiableMultiSet.unmodifiableMultiSet(new HashMultiSet<Object>());" ], [ "EMPTY_SORTED_SET", "org.apache.commons.collections4", "SetUtils", "public static final SortedSet EMPTY_SORTED_SET = UnmodifiableSortedSet.unmodifiableSortedSet(new TreeSet<Object>());" ], [ "EMPTY_QUEUE", "org.apache.commons.collections4", "QueueUtils", "public static final Queue EMPTY_QUEUE = UnmodifiableQueue.unmodifiableQueue(new LinkedList<Object>());" ], [ "EMPTY_BAG", "org.apache.commons.collections4", "BagUtils", "public static final Bag EMPTY_BAG = UnmodifiableBag.unmodifiableBag(new HashBag<Object>());" ], [ "EMPTY_SORTED_BAG", "org.apache.commons.collections4", "BagUtils", "public static final Bag EMPTY_SORTED_BAG = UnmodifiableSortedBag.unmodifiableSortedBag(new TreeBag<Object>());" ], [ "RESETTABLE_INSTANCE", "org.apache.commons.collections4.iterators", "EmptyListIterator", "public static final ResettableListIterator RESETTABLE_INSTANCE = new EmptyListIterator<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.iterators", "EmptyListIterator", "public static final ListIterator INSTANCE = RESETTABLE_INSTANCE;" ], [ "INSTANCE", "org.apache.commons.collections4.iterators", "EmptyMapIterator", "public static final MapIterator INSTANCE = new EmptyMapIterator<Object, Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.iterators", "EmptyOrderedIterator", "public static final OrderedIterator INSTANCE = new EmptyOrderedIterator<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.iterators", "EmptyOrderedMapIterator", "public static final OrderedMapIterator INSTANCE = new EmptyOrderedMapIterator<Object, Object>();" ], [ "RESETTABLE_INSTANCE", "org.apache.commons.collections4.iterators", "EmptyIterator", "public static final ResettableIterator RESETTABLE_INSTANCE = new EmptyIterator<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.iterators", "EmptyIterator", "public static final Iterator INSTANCE = RESETTABLE_INSTANCE;" ] ],
  "tokensMethodJavadocValues" : [ [ "0", "int" ], [ "0", "int" ] ],
  "tokensMethodArguments" : [ [ "predicates", "", "Predicate<? super I>[]" ], [ "transformers", "", "Transformer<? super I, ? extends O>[]" ] ],
  "tokensMethodVariablesNonPrivateNonStaticNonVoidMethods" : [ [ "hashCode", "java.lang", "Object", "public native int hashCode()" ], [ "equals", "java.lang", "Object", "public boolean equals(Object arg0)" ], [ "getClass", "java.lang", "Object", "public final native Class<? extends Object> getClass()" ], [ "clone", "java.lang", "Object", "protected native Object clone() throws CloneNotSupportedException" ], [ "toString", "java.lang", "Object", "public String toString()" ], [ "equals", "", "org.apache.commons.collections4.Predicate<? super I>[]", "public boolean equals(Object);" ], [ "toString", "", "org.apache.commons.collections4.Predicate<? super I>[]", "public String toString()" ], [ "hashCode", "", "org.apache.commons.collections4.Predicate<? super I>[]", "public native int hashCode()" ], [ "getClass", "", "org.apache.commons.collections4.Predicate<? super I>[]", "public final native Class getClass();" ], [ "clone", "", "org.apache.commons.collections4.Predicate<? super I>[]", "public T[] clone();" ], [ "equals", "", "org.apache.commons.collections4.Transformer<? super I, ? extends O>[]", "public boolean equals(Object);" ], [ "toString", "", "org.apache.commons.collections4.Transformer<? super I, ? extends O>[]", "public String toString()" ], [ "hashCode", "", "org.apache.commons.collections4.Transformer<? super I, ? extends O>[]", "public native int hashCode()" ], [ "getClass", "", "org.apache.commons.collections4.Transformer<? super I, ? extends O>[]", "public final native Class getClass();" ], [ "clone", "", "org.apache.commons.collections4.Transformer<? super I, ? extends O>[]", "public T[] clone();" ], [ "transform", "org.apache.commons.collections4", "Transformer", "public abstract O transform(I arg0)" ] ],
  "tokensMethodVariablesNonPrivateNonStaticAttributes" : [ [ "length", "org.apache.commons.collections4", "Predicate[]", "public final int length;" ], [ "length", "org.apache.commons.collections4", "Transformer[]", "public final int length;" ] ],
  "tokensOracleVariablesNonPrivateNonStaticNonVoidMethods" : [ ],
  "tokensOracleVariablesNonPrivateNonStaticAttributes" : [ ]
}, {
  "id" : 8963,
  "oracle" : ";",
  "oracleType" : "EXCEPT_POST",
  "projectName" : "commons-collections4-4.1",
  "packageName" : "org.apache.commons.collections4",
  "className" : "TransformerUtils",
  "javadocTag" : "@throws NullPointerException if the either array is null",
  "methodJavadoc" : "    /**\n     * Create a new Transformer that calls one of the transformers depending\n     * on the predicates. The transformer at array location 0 is called if the\n     * predicate at array location 0 returned true. Each predicate is evaluated\n     * until one returns true. If no predicates evaluate to true, the default\n     * transformer is called. If the default transformer is null, null is returned.\n     *\n     * @param <I>  the input type\n     * @param <O>  the output type\n     * @param predicates  an array of predicates to check\n     * @param transformers  an array of transformers to call\n     * @param defaultTransformer  the default to call if no predicate matches, null means return null\n     * @return the transformer\n     * @throws NullPointerException if the either array is null\n     * @throws NullPointerException if any element in the arrays is null\n     * @throws IllegalArgumentException if the arrays have different sizes\n     * @see SwitchTransformer\n     */",
  "methodSourceCode" : "public static <I, O> Transformer<I, O> switchTransformer(final Predicate<? super I>[] predicates, final Transformer<? super I, ? extends O>[] transformers, final Transformer<? super I, ? extends O> defaultTransformer){\n    return SwitchTransformer.switchTransformer(predicates, transformers, defaultTransformer);\n}",
  "classJavadoc" : "/**\n * <code>TransformerUtils</code> provides reference implementations and\n * utilities for the Transformer functor interface. The supplied transformers are:\n * <ul>\n * <li>Invoker - returns the result of a method call on the input object\n * <li>Clone - returns a clone of the input object\n * <li>Constant - always returns the same object\n * <li>Closure - performs a Closure and returns the input object\n * <li>Predicate - returns the result of the predicate as a Boolean\n * <li>Factory - returns a new object from a factory\n * <li>Chained - chains two or more transformers together\n * <li>If - calls one transformer or another based on a predicate\n * <li>Switch - calls one transformer based on one or more predicates\n * <li>SwitchMap - calls one transformer looked up from a Map\n * <li>Instantiate - the Class input object is instantiated\n * <li>Map - returns an object from a supplied Map\n * <li>Null - always returns null\n * <li>NOP - returns the input object, which should be immutable\n * <li>Exception - always throws an exception\n * <li>StringValue - returns a <code>java.lang.String</code> representation of the input object\n * </ul>\n * <p>\n * Since v4.1 only transformers which are considered to be unsafe are\n * Serializable. Transformers considered to be unsafe for serialization are:\n * <ul>\n * <li>Invoker\n * <li>Clone\n * <li>Instantiate\n * </ul>\n *\n * @since 3.0\n * @version $Id: TransformerUtils.java 1714362 2015-11-14 20:38:02Z tn $\n */",
  "classSourceCode" : "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.commons.collections4;\n\nimport java.util.Collection;\nimport java.util.Map;\n\nimport org.apache.commons.collections4.functors.ChainedTransformer;\nimport org.apache.commons.collections4.functors.CloneTransformer;\nimport org.apache.commons.collections4.functors.ClosureTransformer;\nimport org.apache.commons.collections4.functors.ConstantTransformer;\nimport org.apache.commons.collections4.functors.EqualPredicate;\nimport org.apache.commons.collections4.functors.ExceptionTransformer;\nimport org.apache.commons.collections4.functors.FactoryTransformer;\nimport org.apache.commons.collections4.functors.IfTransformer;\nimport org.apache.commons.collections4.functors.InstantiateTransformer;\nimport org.apache.commons.collections4.functors.InvokerTransformer;\nimport org.apache.commons.collections4.functors.MapTransformer;\nimport org.apache.commons.collections4.functors.NOPTransformer;\nimport org.apache.commons.collections4.functors.PredicateTransformer;\nimport org.apache.commons.collections4.functors.StringValueTransformer;\nimport org.apache.commons.collections4.functors.SwitchTransformer;\n\n/**\n * <code>TransformerUtils</code> provides reference implementations and\n * utilities for the Transformer functor interface. The supplied transformers are:\n * <ul>\n * <li>Invoker - returns the result of a method call on the input object\n * <li>Clone - returns a clone of the input object\n * <li>Constant - always returns the same object\n * <li>Closure - performs a Closure and returns the input object\n * <li>Predicate - returns the result of the predicate as a Boolean\n * <li>Factory - returns a new object from a factory\n * <li>Chained - chains two or more transformers together\n * <li>If - calls one transformer or another based on a predicate\n * <li>Switch - calls one transformer based on one or more predicates\n * <li>SwitchMap - calls one transformer looked up from a Map\n * <li>Instantiate - the Class input object is instantiated\n * <li>Map - returns an object from a supplied Map\n * <li>Null - always returns null\n * <li>NOP - returns the input object, which should be immutable\n * <li>Exception - always throws an exception\n * <li>StringValue - returns a <code>java.lang.String</code> representation of the input object\n * </ul>\n * <p>\n * Since v4.1 only transformers which are considered to be unsafe are\n * Serializable. Transformers considered to be unsafe for serialization are:\n * <ul>\n * <li>Invoker\n * <li>Clone\n * <li>Instantiate\n * </ul>\n *\n * @since 3.0\n * @version $Id: TransformerUtils.java 1714362 2015-11-14 20:38:02Z tn $\n */\npublic class TransformerUtils {\n\n    /**\n     * This class is not normally instantiated.\n     */\n    private TransformerUtils() {}\n\n    /**\n     * Gets a transformer that always throws an exception.\n     * This could be useful during testing as a placeholder.\n     *\n     * @param <I>  the input type\n     * @param <O>  the output type\n     * @return the transformer\n     * @see ExceptionTransformer\n     */\n    public static <I, O> Transformer<I, O> exceptionTransformer() {\n        return ExceptionTransformer.exceptionTransformer();\n    }\n\n    /**\n     * Gets a transformer that always returns null.\n     *\n     * @param <I>  the input type\n     * @param <O>  the output type\n     * @return the transformer\n     * @see ConstantTransformer\n     */\n    public static <I, O> Transformer<I, O> nullTransformer() {\n        return ConstantTransformer.nullTransformer();\n    }\n\n    /**\n     * Gets a transformer that returns the input object.\n     * The input object should be immutable to maintain the\n     * contract of Transformer (although this is not checked).\n     *\n     * @param <T>  the input/output type\n     * @return the transformer\n     * @see NOPTransformer\n     */\n    public static <T> Transformer<T, T> nopTransformer() {\n        return NOPTransformer.nopTransformer();\n    }\n\n    /**\n     * Gets a transformer that returns a clone of the input object.\n     * The input object will be cloned using one of these techniques (in order):\n     * <ul>\n     * <li>public clone method\n     * <li>public copy constructor\n     * <li>serialization clone\n     * <ul>\n     *\n     * @param <T>  the input/output type\n     * @return the transformer\n     * @see CloneTransformer\n     */\n    public static <T> Transformer<T, T> cloneTransformer() {\n        return CloneTransformer.cloneTransformer();\n    }\n\n    /**\n     * Creates a Transformer that will return the same object each time the\n     * transformer is used.\n     *\n     * @param <I>  the input type\n     * @param <O>  the output type\n     * @param constantToReturn  the constant object to return each time in the transformer\n     * @return the transformer.\n     * @see ConstantTransformer\n     */\n    public static <I, O> Transformer<I, O> constantTransformer(final O constantToReturn) {\n        return ConstantTransformer.constantTransformer(constantToReturn);\n    }\n\n    /**\n     * Creates a Transformer that calls a Closure each time the transformer is used.\n     * The transformer returns the input object.\n     *\n     * @param <T>  the input/output type\n     * @param closure  the closure to run each time in the transformer, not null\n     * @return the transformer\n     * @throws NullPointerException if the closure is null\n     * @see ClosureTransformer\n     */\n    public static <T> Transformer<T, T> asTransformer(final Closure<? super T> closure) {\n        return ClosureTransformer.closureTransformer(closure);\n    }\n\n    /**\n     * Creates a Transformer that calls a Predicate each time the transformer is used.\n     * The transformer will return either Boolean.TRUE or Boolean.FALSE.\n     *\n     * @param <T>  the input type\n     * @param predicate  the predicate to run each time in the transformer, not null\n     * @return the transformer\n     * @throws NullPointerException if the predicate is null\n     * @see PredicateTransformer\n     */\n    public static <T> Transformer<T, Boolean> asTransformer(final Predicate<? super T> predicate) {\n        return PredicateTransformer.predicateTransformer(predicate);\n    }\n\n    /**\n     * Creates a Transformer that calls a Factory each time the transformer is used.\n     * The transformer will return the value returned by the factory.\n     *\n     * @param <I>  the input type\n     * @param <O>  the output type\n     * @param factory  the factory to run each time in the transformer, not null\n     * @return the transformer\n     * @throws NullPointerException if the factory is null\n     * @see FactoryTransformer\n     */\n    public static <I, O> Transformer<I, O> asTransformer(final Factory<? extends O> factory) {\n        return FactoryTransformer.factoryTransformer(factory);\n    }\n\n    /**\n     * Create a new Transformer that calls each transformer in turn, passing the\n     * result into the next transformer.\n     *\n     * @param <T>  the input/output type\n     * @param transformers  an array of transformers to chain\n     * @return the transformer\n     * @throws NullPointerException if the transformers array or any of the transformers is null\n     * @see ChainedTransformer\n     */\n    public static <T> Transformer<T, T> chainedTransformer(\n            final Transformer<? super T, ? extends T>... transformers) {\n        return ChainedTransformer.chainedTransformer(transformers);\n    }\n\n    /**\n     * Create a new Transformer that calls each transformer in turn, passing the\n     * result into the next transformer. The ordering is that of the iterator()\n     * method on the collection.\n     *\n     * @param <T>  the input/output type\n     * @param transformers  a collection of transformers to chain\n     * @return the transformer\n     * @throws NullPointerException if the transformers collection or any of the transformers is null\n     * @see ChainedTransformer\n     */\n    public static <T> Transformer<T, T> chainedTransformer(\n            final Collection<? extends Transformer<? super T, ? extends T>> transformers) {\n        return ChainedTransformer.chainedTransformer(transformers);\n    }\n\n    /**\n     * Create a new Transformer that calls the transformer if the predicate is true,\n     * otherwise the input object is returned unchanged.\n     *\n     * @param <T>  the input / output type\n     * @param predicate  the predicate to switch on\n     * @param trueTransformer  the transformer called if the predicate is true\n     * @return the transformer\n     * @throws NullPointerException if either the predicate or transformer is null\n     * @see IfTransformer\n     * @since 4.1\n     */\n    public static <T> Transformer<T, T> ifTransformer(final Predicate<? super T> predicate,\n                                                      final Transformer<? super T, ? extends T> trueTransformer) {\n        return IfTransformer.ifTransformer(predicate, trueTransformer);\n    }\n\n    /**\n     * Create a new Transformer that calls one of two transformers depending\n     * on the specified predicate.\n     *\n     * @param <I>  the input type\n     * @param <O>  the output type\n     * @param predicate  the predicate to switch on\n     * @param trueTransformer  the transformer called if the predicate is true\n     * @param falseTransformer  the transformer called if the predicate is false\n     * @return the transformer\n     * @throws NullPointerException if either the predicate or transformer is null\n     * @see IfTransformer\n     * @since 4.1\n     */\n    public static <I, O> Transformer<I, O> ifTransformer(final Predicate<? super I> predicate,\n                                                         final Transformer<? super I, ? extends O> trueTransformer,\n                                                         final Transformer<? super I, ? extends O> falseTransformer) {\n        return IfTransformer.ifTransformer(predicate, trueTransformer, falseTransformer);\n    }\n\n    /**\n     * Create a new Transformer that calls one of two transformers depending\n     * on the specified predicate.\n     *\n     * @param <I>  the input type\n     * @param <O>  the output type\n     * @param predicate  the predicate to switch on\n     * @param trueTransformer  the transformer called if the predicate is true\n     * @param falseTransformer  the transformer called if the predicate is false\n     * @return the transformer\n     * @throws NullPointerException if either the predicate or transformer is null\n     * @see SwitchTransformer\n     * @deprecated as of 4.1, use {@link #ifTransformer(Predicate, Transformer, Transformer))\n     */\n    @SuppressWarnings(\"unchecked\")\n    @Deprecated\n    public static <I, O> Transformer<I, O> switchTransformer(final Predicate<? super I> predicate,\n            final Transformer<? super I, ? extends O> trueTransformer,\n            final Transformer<? super I, ? extends O> falseTransformer) {\n        return SwitchTransformer.switchTransformer(new Predicate[] { predicate },\n                                                   new Transformer[] { trueTransformer }, falseTransformer);\n    }\n\n    /**\n     * Create a new Transformer that calls one of the transformers depending\n     * on the predicates. The transformer at array location 0 is called if the\n     * predicate at array location 0 returned true. Each predicate is evaluated\n     * until one returns true. If no predicates evaluate to true, null is returned.\n     *\n     * @param <I>  the input type\n     * @param <O>  the output type\n     * @param predicates  an array of predicates to check\n     * @param transformers  an array of transformers to call\n     * @return the transformer\n     * @throws NullPointerException if the either array is null\n     * @throws NullPointerException if any element in the arrays is null\n     * @throws IllegalArgumentException if the arrays have different sizes\n     * @see SwitchTransformer\n     */\n    public static <I, O> Transformer<I, O> switchTransformer(final Predicate<? super I>[] predicates,\n            final Transformer<? super I, ? extends O>[] transformers) {\n        return SwitchTransformer.switchTransformer(predicates, transformers, null);\n    }\n\n    /**\n     * Create a new Transformer that calls one of the transformers depending\n     * on the predicates. The transformer at array location 0 is called if the\n     * predicate at array location 0 returned true. Each predicate is evaluated\n     * until one returns true. If no predicates evaluate to true, the default\n     * transformer is called. If the default transformer is null, null is returned.\n     *\n     * @param <I>  the input type\n     * @param <O>  the output type\n     * @param predicates  an array of predicates to check\n     * @param transformers  an array of transformers to call\n     * @param defaultTransformer  the default to call if no predicate matches, null means return null\n     * @return the transformer\n     * @throws NullPointerException if the either array is null\n     * @throws NullPointerException if any element in the arrays is null\n     * @throws IllegalArgumentException if the arrays have different sizes\n     * @see SwitchTransformer\n     */\n    public static <I, O> Transformer<I, O> switchTransformer(final Predicate<? super I>[] predicates,\n            final Transformer<? super I, ? extends O>[] transformers,\n            final Transformer<? super I, ? extends O> defaultTransformer) {\n        return SwitchTransformer.switchTransformer(predicates, transformers, defaultTransformer);\n    }\n\n    /**\n     * Create a new Transformer that calls one of the transformers depending\n     * on the predicates.\n     * <p>\n     * The Map consists of Predicate keys and Transformer values. A transformer\n     * is called if its matching predicate returns true. Each predicate is evaluated\n     * until one returns true. If no predicates evaluate to true, the default\n     * transformer is called. The default transformer is set in the map with a\n     * null key. If no default transformer is set, null will be returned in a default\n     * case. The ordering is that of the iterator() method on the entryset collection\n     * of the map.\n     *\n     * @param <I>  the input type\n     * @param <O>  the output type\n     * @param predicatesAndTransformers  a map of predicates to transformers\n     * @return the transformer\n     * @throws NullPointerException if the map is null\n     * @throws NullPointerException if any transformer in the map is null\n     * @throws ClassCastException  if the map elements are of the wrong type\n     * @see SwitchTransformer\n     */\n    public static <I, O> Transformer<I, O> switchTransformer(\n            final Map<Predicate<I>, Transformer<I, O>> predicatesAndTransformers) {\n        return SwitchTransformer.switchTransformer(predicatesAndTransformers);\n    }\n\n    /**\n     * Create a new Transformer that uses the input object as a key to find the\n     * transformer to call.\n     * <p>\n     * The Map consists of object keys and Transformer values. A transformer\n     * is called if the input object equals the key. If there is no match, the\n     * default transformer is called. The default transformer is set in the map\n     * using a null key. If no default is set, null will be returned in a default case.\n     *\n     * @param <I>  the input type\n     * @param <O>  the output type\n     * @param objectsAndTransformers  a map of objects to transformers\n     * @return the transformer\n     * @throws NullPointerException if the map is null\n     * @throws NullPointerException if any transformer in the map is null\n     * @see SwitchTransformer\n     */\n    @SuppressWarnings(\"unchecked\")\n    public static <I, O> Transformer<I, O> switchMapTransformer(\n            final Map<I, Transformer<I, O>> objectsAndTransformers) {\n\n        if (objectsAndTransformers == null) {\n            throw new NullPointerException(\"The object and transformer map must not be null\");\n        }\n        final Transformer<? super I, ? extends O> def = objectsAndTransformers.remove(null);\n        final int size = objectsAndTransformers.size();\n        final Transformer<? super I, ? extends O>[] trs = new Transformer[size];\n        final Predicate<I>[] preds = new Predicate[size];\n        int i = 0;\n        for (final Map.Entry<I, Transformer<I, O>> entry : objectsAndTransformers.entrySet()) {\n            preds[i] = EqualPredicate.<I>equalPredicate(entry.getKey());\n            trs[i++] = entry.getValue();\n        }\n        return TransformerUtils.switchTransformer(preds, trs, def);\n    }\n\n    /**\n     * Gets a Transformer that expects an input Class object that it will instantiate.\n     *\n     * @param <T>  the output type\n     * @return the transformer\n     * @see InstantiateTransformer\n     */\n    public static <T> Transformer<Class<? extends T>, T> instantiateTransformer() {\n        return InstantiateTransformer.instantiateTransformer();\n    }\n\n    /**\n     * Creates a Transformer that expects an input Class object that it will\n     * instantiate. The constructor used is determined by the arguments specified\n     * to this method.\n     *\n     * @param <T>  the output type\n     * @param paramTypes  parameter types for the constructor, can be null\n     * @param args  the arguments to pass to the constructor, can be null\n     * @return the transformer\n     * @throws IllegalArgumentException if the paramTypes and args don't match\n     * @see InstantiateTransformer\n     */\n    public static <T> Transformer<Class<? extends T>, T> instantiateTransformer(\n            final Class<?>[] paramTypes, final Object[] args) {\n        return InstantiateTransformer.instantiateTransformer(paramTypes, args);\n    }\n\n    /**\n     * Creates a Transformer that uses the passed in Map to transform the input\n     * object (as a simple lookup).\n     *\n     * @param <I>  the input type\n     * @param <O>  the output type\n     * @param map  the map to use to transform the objects\n     * @return the transformer, or {@link ConstantTransformer#nullTransformer()} if the\n     *   {@code map} is {@code null}\n     * @see MapTransformer\n     */\n    public static <I, O> Transformer<I, O> mapTransformer(final Map<? super I, ? extends O> map) {\n        return MapTransformer.mapTransformer(map);\n    }\n\n    /**\n     * Gets a Transformer that invokes a method on the input object.\n     * The method must have no parameters. If the input object is null,\n     * null is returned.\n     * <p>\n     * For example, <code>TransformerUtils.invokerTransformer(\"getName\");</code>\n     * will call the <code>getName/code> method on the input object to\n     * determine the transformer result.\n     *\n     * @param <I>  the input type\n     * @param <O>  the output type\n     * @param methodName  the method name to call on the input object, may not be null\n     * @return the transformer\n     * @throws NullPointerException if the methodName is null.\n     * @see InvokerTransformer\n     */\n    public static <I, O> Transformer<I, O> invokerTransformer(final String methodName) {\n        return InvokerTransformer.invokerTransformer(methodName, null, null);\n    }\n\n    /**\n     * Gets a Transformer that invokes a method on the input object.\n     * The method parameters are specified. If the input object is {@code null},\n     * {@code null} is returned.\n     *\n     * @param <I>  the input type\n     * @param <O>  the output type\n     * @param methodName  the name of the method\n     * @param paramTypes  the parameter types\n     * @param args  the arguments\n     * @return the transformer\n     * @throws NullPointerException if the method name is null\n     * @throws IllegalArgumentException if the paramTypes and args don't match\n     * @see InvokerTransformer\n     */\n    public static <I, O> Transformer<I, O> invokerTransformer(final String methodName, final Class<?>[] paramTypes,\n                                                              final Object[] args) {\n        return InvokerTransformer.invokerTransformer(methodName, paramTypes, args);\n    }\n\n    /**\n     * Gets a transformer that returns a <code>java.lang.String</code>\n     * representation of the input object. This is achieved via the\n     * <code>toString</code> method, <code>null</code> returns 'null'.\n     *\n     * @param <T>  the input type\n     * @return the transformer\n     * @see StringValueTransformer\n     */\n    public static <T> Transformer<T, String> stringValueTransformer() {\n        return StringValueTransformer.stringValueTransformer();\n    }\n\n}\n",
  "tokensGeneralGrammar" : [ "null", "true", "false", ",", ".", ":", ";", "?", "(", ")", "jdVar", "stream", "Arrays", "allMatch", "noneMatch", "anyMatch", "~", ">>", "<<", ">>>", "|", "&", "^", "+", "-", "/", "*", "%", "&&", "||", ">=", "<=", ">", "<", "==", "!=", "instanceof", "class", "methodResultID", "this" ],
  "tokensGeneralValuesGlobalDictionary" : [ [ "0", "int" ], [ "1", "int" ], [ "-1", "int" ], [ "0.0", "double" ], [ "1.0", "double" ], [ "-1.0", "double" ], [ "\"\"", "String" ], [ "\" \"", "String" ] ],
  "tokensProjectClasses" : [ [ "BidiMap", "org.apache.commons.collections4" ], [ "Equator", "org.apache.commons.collections4" ], [ "MultiSet", "org.apache.commons.collections4" ], [ "IteratorUtils", "org.apache.commons.collections4" ], [ "ComparatorUtils", "org.apache.commons.collections4" ], [ "FunctorException", "org.apache.commons.collections4" ], [ "AbstractDualBidiMap", "org.apache.commons.collections4.bidimap" ], [ "UnmodifiableBidiMap", "org.apache.commons.collections4.bidimap" ], [ "AbstractOrderedBidiMapDecorator", "org.apache.commons.collections4.bidimap" ], [ "UnmodifiableOrderedBidiMap", "org.apache.commons.collections4.bidimap" ], [ "AbstractBidiMapDecorator", "org.apache.commons.collections4.bidimap" ], [ "DualLinkedHashBidiMap", "org.apache.commons.collections4.bidimap" ], [ "UnmodifiableSortedBidiMap", "org.apache.commons.collections4.bidimap" ], [ "AbstractSortedBidiMapDecorator", "org.apache.commons.collections4.bidimap" ], [ "DualHashBidiMap", "org.apache.commons.collections4.bidimap" ], [ "DualTreeBidiMap", "org.apache.commons.collections4.bidimap" ], [ "TreeBidiMap", "org.apache.commons.collections4.bidimap" ], [ "MultiMapUtils", "org.apache.commons.collections4" ], [ "BoundedCollection", "org.apache.commons.collections4" ], [ "UnmodifiableBoundedCollection", "org.apache.commons.collections4.collection" ], [ "CompositeCollection", "org.apache.commons.collections4.collection" ], [ "TransformedCollection", "org.apache.commons.collections4.collection" ], [ "PredicatedCollection", "org.apache.commons.collections4.collection" ], [ "IndexedCollection", "org.apache.commons.collections4.collection" ], [ "SynchronizedCollection", "org.apache.commons.collections4.collection" ], [ "UnmodifiableCollection", "org.apache.commons.collections4.collection" ], [ "AbstractCollectionDecorator", "org.apache.commons.collections4.collection" ], [ "OrderedBidiMap", "org.apache.commons.collections4" ], [ "FactoryUtils", "org.apache.commons.collections4" ], [ "IterableGet", "org.apache.commons.collections4" ], [ "ListUtils", "org.apache.commons.collections4" ], [ "Closure", "org.apache.commons.collections4" ], [ "IterableSortedMap", "org.apache.commons.collections4" ], [ "MapUtils", "org.apache.commons.collections4" ], [ "Transformer", "org.apache.commons.collections4" ], [ "DefaultEquator", "org.apache.commons.collections4.functors" ], [ "StringValueTransformer", "org.apache.commons.collections4.functors" ], [ "PredicateDecorator", "org.apache.commons.collections4.functors" ], [ "IfTransformer", "org.apache.commons.collections4.functors" ], [ "IdentityPredicate", "org.apache.commons.collections4.functors" ], [ "ExceptionClosure", "org.apache.commons.collections4.functors" ], [ "NOPClosure", "org.apache.commons.collections4.functors" ], [ "ClosureTransformer", "org.apache.commons.collections4.functors" ], [ "FunctorUtils", "org.apache.commons.collections4.functors" ], [ "TransformerPredicate", "org.apache.commons.collections4.functors" ], [ "NullPredicate", "org.apache.commons.collections4.functors" ], [ "ConstantTransformer", "org.apache.commons.collections4.functors" ], [ "PredicateTransformer", "org.apache.commons.collections4.functors" ], [ "WhileClosure", "org.apache.commons.collections4.functors" ], [ "ForClosure", "org.apache.commons.collections4.functors" ], [ "NullIsTruePredicate", "org.apache.commons.collections4.functors" ], [ "TransformedPredicate", "org.apache.commons.collections4.functors" ], [ "NonePredicate", "org.apache.commons.collections4.functors" ], [ "ExceptionTransformer", "org.apache.commons.collections4.functors" ], [ "SwitchTransformer", "org.apache.commons.collections4.functors" ], [ "TransformerClosure", "org.apache.commons.collections4.functors" ], [ "OrPredicate", "org.apache.commons.collections4.functors" ], [ "NOPTransformer", "org.apache.commons.collections4.functors" ], [ "MapTransformer", "org.apache.commons.collections4.functors" ], [ "ExceptionFactory", "org.apache.commons.collections4.functors" ], [ "ChainedClosure", "org.apache.commons.collections4.functors" ], [ "AndPredicate", "org.apache.commons.collections4.functors" ], [ "PrototypeFactory", "org.apache.commons.collections4.functors" ], [ "ExceptionPredicate", "org.apache.commons.collections4.functors" ], [ "AbstractQuantifierPredicate", "org.apache.commons.collections4.functors" ], [ "InstanceofPredicate", "org.apache.commons.collections4.functors" ], [ "InvokerTransformer", "org.apache.commons.collections4.functors" ], [ "FalsePredicate", "org.apache.commons.collections4.functors" ], [ "CloneTransformer", "org.apache.commons.collections4.functors" ], [ "NotPredicate", "org.apache.commons.collections4.functors" ], [ "ConstantFactory", "org.apache.commons.collections4.functors" ], [ "ChainedTransformer", "org.apache.commons.collections4.functors" ], [ "ComparatorPredicate", "org.apache.commons.collections4.functors" ], [ "CatchAndRethrowClosure", "org.apache.commons.collections4.functors" ], [ "AllPredicate", "org.apache.commons.collections4.functors" ], [ "NullIsFalsePredicate", "org.apache.commons.collections4.functors" ], [ "NullIsExceptionPredicate", "org.apache.commons.collections4.functors" ], [ "AnyPredicate", "org.apache.commons.collections4.functors" ], [ "TruePredicate", "org.apache.commons.collections4.functors" ], [ "FactoryTransformer", "org.apache.commons.collections4.functors" ], [ "NotNullPredicate", "org.apache.commons.collections4.functors" ], [ "SwitchClosure", "org.apache.commons.collections4.functors" ], [ "UniquePredicate", "org.apache.commons.collections4.functors" ], [ "InstantiateTransformer", "org.apache.commons.collections4.functors" ], [ "OnePredicate", "org.apache.commons.collections4.functors" ], [ "EqualPredicate", "org.apache.commons.collections4.functors" ], [ "InstantiateFactory", "org.apache.commons.collections4.functors" ], [ "IfClosure", "org.apache.commons.collections4.functors" ], [ "ResettableListIterator", "org.apache.commons.collections4" ], [ "OrderedIterator", "org.apache.commons.collections4" ], [ "ComparatorChain", "org.apache.commons.collections4.comparators" ], [ "BooleanComparator", "org.apache.commons.collections4.comparators" ], [ "ReverseComparator", "org.apache.commons.collections4.comparators" ], [ "ComparableComparator", "org.apache.commons.collections4.comparators" ], [ "TransformingComparator", "org.apache.commons.collections4.comparators" ], [ "FixedOrderComparator", "org.apache.commons.collections4.comparators" ], [ "NullComparator", "org.apache.commons.collections4.comparators" ], [ "CollectionUtils", "org.apache.commons.collections4" ], [ "ListValuedMap", "org.apache.commons.collections4" ], [ "AbstractIterableGetMapDecorator", "org.apache.commons.collections4.splitmap" ], [ "TransformedSplitMap", "org.apache.commons.collections4.splitmap" ], [ "Factory", "org.apache.commons.collections4" ], [ "IterableUtils", "org.apache.commons.collections4" ], [ "Bag", "org.apache.commons.collections4" ], [ "Predicate", "org.apache.commons.collections4" ], [ "SortedBag", "org.apache.commons.collections4" ], [ "TrieUtils", "org.apache.commons.collections4" ], [ "ClosureUtils", "org.apache.commons.collections4" ], [ "PatriciaTrie", "org.apache.commons.collections4.trie" ], [ "UnmodifiableTrie", "org.apache.commons.collections4.trie" ], [ "KeyAnalyzer", "org.apache.commons.collections4.trie" ], [ "AbstractPatriciaTrie", "org.apache.commons.collections4.trie" ], [ "AbstractBitwiseTrie", "org.apache.commons.collections4.trie" ], [ "StringKeyAnalyzer", "org.apache.commons.collections4.trie.analyzer" ], [ "TransformedSortedMap", "org.apache.commons.collections4.map" ], [ "AbstractLinkedMap", "org.apache.commons.collections4.map" ], [ "Flat3Map", "org.apache.commons.collections4.map" ], [ "PredicatedMap", "org.apache.commons.collections4.map" ], [ "FixedSizeSortedMap", "org.apache.commons.collections4.map" ], [ "UnmodifiableSortedMap", "org.apache.commons.collections4.map" ], [ "PredicatedSortedMap", "org.apache.commons.collections4.map" ], [ "DefaultedMap", "org.apache.commons.collections4.map" ], [ "ReferenceIdentityMap", "org.apache.commons.collections4.map" ], [ "AbstractSortedMapDecorator", "org.apache.commons.collections4.map" ], [ "AbstractInputCheckedMapDecorator", "org.apache.commons.collections4.map" ], [ "FixedSizeMap", "org.apache.commons.collections4.map" ], [ "LazySortedMap", "org.apache.commons.collections4.map" ], [ "UnmodifiableOrderedMap", "org.apache.commons.collections4.map" ], [ "CaseInsensitiveMap", "org.apache.commons.collections4.map" ], [ "AbstractHashedMap", "org.apache.commons.collections4.map" ], [ "AbstractOrderedMapDecorator", "org.apache.commons.collections4.map" ], [ "UnmodifiableMap", "org.apache.commons.collections4.map" ], [ "EntrySetToMapIteratorAdapter", "org.apache.commons.collections4.map" ], [ "AbstractIterableMap", "org.apache.commons.collections4.map" ], [ "ListOrderedMap", "org.apache.commons.collections4.map" ], [ "LinkedMap", "org.apache.commons.collections4.map" ], [ "SingletonMap", "org.apache.commons.collections4.map" ], [ "UnmodifiableEntrySet", "org.apache.commons.collections4.map" ], [ "StaticBucketMap", "org.apache.commons.collections4.map" ], [ "AbstractMapDecorator", "org.apache.commons.collections4.map" ], [ "AbstractReferenceMap", "org.apache.commons.collections4.map" ], [ "MultiKeyMap", "org.apache.commons.collections4.map" ], [ "HashedMap", "org.apache.commons.collections4.map" ], [ "LazyMap", "org.apache.commons.collections4.map" ], [ "PassiveExpiringMap", "org.apache.commons.collections4.map" ], [ "MultiValueMap", "org.apache.commons.collections4.map" ], [ "LRUMap", "org.apache.commons.collections4.map" ], [ "ReferenceMap", "org.apache.commons.collections4.map" ], [ "TransformedMap", "org.apache.commons.collections4.map" ], [ "CompositeMap", "org.apache.commons.collections4.map" ], [ "UnmodifiableMapEntry", "org.apache.commons.collections4.keyvalue" ], [ "MultiKey", "org.apache.commons.collections4.keyvalue" ], [ "DefaultMapEntry", "org.apache.commons.collections4.keyvalue" ], [ "DefaultKeyValue", "org.apache.commons.collections4.keyvalue" ], [ "AbstractMapEntryDecorator", "org.apache.commons.collections4.keyvalue" ], [ "AbstractKeyValue", "org.apache.commons.collections4.keyvalue" ], [ "TiedMapEntry", "org.apache.commons.collections4.keyvalue" ], [ "AbstractMapEntry", "org.apache.commons.collections4.keyvalue" ], [ "MultiSetUtils", "org.apache.commons.collections4" ], [ "MapIterator", "org.apache.commons.collections4" ], [ "AbstractMultiValuedMap", "org.apache.commons.collections4.multimap" ], [ "UnmodifiableMultiValuedMap", "org.apache.commons.collections4.multimap" ], [ "HashSetValuedHashMap", "org.apache.commons.collections4.multimap" ], [ "TransformedMultiValuedMap", "org.apache.commons.collections4.multimap" ], [ "AbstractSetValuedMap", "org.apache.commons.collections4.multimap" ], [ "AbstractListValuedMap", "org.apache.commons.collections4.multimap" ], [ "ArrayListValuedHashMap", "org.apache.commons.collections4.multimap" ], [ "AbstractMultiValuedMapDecorator", "org.apache.commons.collections4.multimap" ], [ "LazyList", "org.apache.commons.collections4.list" ], [ "AbstractSerializableListDecorator", "org.apache.commons.collections4.list" ], [ "TreeList", "org.apache.commons.collections4.list" ], [ "SetUniqueList", "org.apache.commons.collections4.list" ], [ "AbstractListDecorator", "org.apache.commons.collections4.list" ], [ "NodeCachingLinkedList", "org.apache.commons.collections4.list" ], [ "UnmodifiableList", "org.apache.commons.collections4.list" ], [ "FixedSizeList", "org.apache.commons.collections4.list" ], [ "TransformedList", "org.apache.commons.collections4.list" ], [ "GrowthList", "org.apache.commons.collections4.list" ], [ "AbstractLinkedList", "org.apache.commons.collections4.list" ], [ "CursorableLinkedList", "org.apache.commons.collections4.list" ], [ "PredicatedList", "org.apache.commons.collections4.list" ], [ "OrderedMap", "org.apache.commons.collections4" ], [ "AbstractQueueDecorator", "org.apache.commons.collections4.queue" ], [ "TransformedQueue", "org.apache.commons.collections4.queue" ], [ "UnmodifiableQueue", "org.apache.commons.collections4.queue" ], [ "CircularFifoQueue", "org.apache.commons.collections4.queue" ], [ "PredicatedQueue", "org.apache.commons.collections4.queue" ], [ "FluentIterable", "org.apache.commons.collections4" ], [ "TransformerUtils", "org.apache.commons.collections4" ], [ "PredicateUtils", "org.apache.commons.collections4" ], [ "ResettableIterator", "org.apache.commons.collections4" ], [ "MultiValuedMap", "org.apache.commons.collections4" ], [ "SetUtils", "org.apache.commons.collections4" ], [ "SortedBidiMap", "org.apache.commons.collections4" ], [ "ArrayStack", "org.apache.commons.collections4" ], [ "Put", "org.apache.commons.collections4" ], [ "OrderedMapIterator", "org.apache.commons.collections4" ], [ "TransformedSet", "org.apache.commons.collections4.set" ], [ "CompositeSet", "org.apache.commons.collections4.set" ], [ "TransformedNavigableSet", "org.apache.commons.collections4.set" ], [ "PredicatedNavigableSet", "org.apache.commons.collections4.set" ], [ "AbstractSetDecorator", "org.apache.commons.collections4.set" ], [ "ListOrderedSet", "org.apache.commons.collections4.set" ], [ "UnmodifiableSet", "org.apache.commons.collections4.set" ], [ "AbstractSerializableSetDecorator", "org.apache.commons.collections4.set" ], [ "MapBackedSet", "org.apache.commons.collections4.set" ], [ "UnmodifiableSortedSet", "org.apache.commons.collections4.set" ], [ "PredicatedSortedSet", "org.apache.commons.collections4.set" ], [ "AbstractSortedSetDecorator", "org.apache.commons.collections4.set" ], [ "PredicatedSet", "org.apache.commons.collections4.set" ], [ "AbstractNavigableSetDecorator", "org.apache.commons.collections4.set" ], [ "UnmodifiableNavigableSet", "org.apache.commons.collections4.set" ], [ "TransformedSortedSet", "org.apache.commons.collections4.set" ], [ "IterableMap", "org.apache.commons.collections4" ], [ "EnumerationUtils", "org.apache.commons.collections4" ], [ "DeleteCommand", "org.apache.commons.collections4.sequence" ], [ "ReplacementsHandler", "org.apache.commons.collections4.sequence" ], [ "InsertCommand", "org.apache.commons.collections4.sequence" ], [ "SequencesComparator", "org.apache.commons.collections4.sequence" ], [ "ReplacementsFinder", "org.apache.commons.collections4.sequence" ], [ "KeepCommand", "org.apache.commons.collections4.sequence" ], [ "EditCommand", "org.apache.commons.collections4.sequence" ], [ "CommandVisitor", "org.apache.commons.collections4.sequence" ], [ "EditScript", "org.apache.commons.collections4.sequence" ], [ "QueueUtils", "org.apache.commons.collections4" ], [ "SetValuedMap", "org.apache.commons.collections4" ], [ "SynchronizedBag", "org.apache.commons.collections4.bag" ], [ "AbstractMapBag", "org.apache.commons.collections4.bag" ], [ "CollectionBag", "org.apache.commons.collections4.bag" ], [ "UnmodifiableBag", "org.apache.commons.collections4.bag" ], [ "PredicatedSortedBag", "org.apache.commons.collections4.bag" ], [ "UnmodifiableSortedBag", "org.apache.commons.collections4.bag" ], [ "HashBag", "org.apache.commons.collections4.bag" ], [ "AbstractBagDecorator", "org.apache.commons.collections4.bag" ], [ "TransformedSortedBag", "org.apache.commons.collections4.bag" ], [ "TreeBag", "org.apache.commons.collections4.bag" ], [ "PredicatedBag", "org.apache.commons.collections4.bag" ], [ "SynchronizedSortedBag", "org.apache.commons.collections4.bag" ], [ "CollectionSortedBag", "org.apache.commons.collections4.bag" ], [ "TransformedBag", "org.apache.commons.collections4.bag" ], [ "AbstractSortedBagDecorator", "org.apache.commons.collections4.bag" ], [ "HashMultiSet", "org.apache.commons.collections4.multiset" ], [ "AbstractMultiSet", "org.apache.commons.collections4.multiset" ], [ "PredicatedMultiSet", "org.apache.commons.collections4.multiset" ], [ "AbstractMultiSetDecorator", "org.apache.commons.collections4.multiset" ], [ "AbstractMapMultiSet", "org.apache.commons.collections4.multiset" ], [ "UnmodifiableMultiSet", "org.apache.commons.collections4.multiset" ], [ "SynchronizedMultiSet", "org.apache.commons.collections4.multiset" ], [ "BagUtils", "org.apache.commons.collections4" ], [ "Unmodifiable", "org.apache.commons.collections4" ], [ "Get", "org.apache.commons.collections4" ], [ "Trie", "org.apache.commons.collections4" ], [ "MultiMap", "org.apache.commons.collections4" ], [ "KeyValue", "org.apache.commons.collections4" ], [ "IteratorChain", "org.apache.commons.collections4.iterators" ], [ "EmptyListIterator", "org.apache.commons.collections4.iterators" ], [ "UnmodifiableOrderedMapIterator", "org.apache.commons.collections4.iterators" ], [ "AbstractListIteratorDecorator", "org.apache.commons.collections4.iterators" ], [ "ZippingIterator", "org.apache.commons.collections4.iterators" ], [ "UnmodifiableIterator", "org.apache.commons.collections4.iterators" ], [ "CollatingIterator", "org.apache.commons.collections4.iterators" ], [ "UniqueFilterIterator", "org.apache.commons.collections4.iterators" ], [ "ReverseListIterator", "org.apache.commons.collections4.iterators" ], [ "BoundedIterator", "org.apache.commons.collections4.iterators" ], [ "AbstractIteratorDecorator", "org.apache.commons.collections4.iterators" ], [ "TransformIterator", "org.apache.commons.collections4.iterators" ], [ "AbstractEmptyIterator", "org.apache.commons.collections4.iterators" ], [ "NodeListIterator", "org.apache.commons.collections4.iterators" ], [ "ArrayListIterator", "org.apache.commons.collections4.iterators" ], [ "LazyIteratorChain", "org.apache.commons.collections4.iterators" ], [ "LoopingListIterator", "org.apache.commons.collections4.iterators" ], [ "PeekingIterator", "org.apache.commons.collections4.iterators" ], [ "ObjectGraphIterator", "org.apache.commons.collections4.iterators" ], [ "ArrayIterator", "org.apache.commons.collections4.iterators" ], [ "PermutationIterator", "org.apache.commons.collections4.iterators" ], [ "SingletonListIterator", "org.apache.commons.collections4.iterators" ], [ "EmptyMapIterator", "org.apache.commons.collections4.iterators" ], [ "ObjectArrayIterator", "org.apache.commons.collections4.iterators" ], [ "EnumerationIterator", "org.apache.commons.collections4.iterators" ], [ "IteratorIterable", "org.apache.commons.collections4.iterators" ], [ "AbstractEmptyMapIterator", "org.apache.commons.collections4.iterators" ], [ "LoopingIterator", "org.apache.commons.collections4.iterators" ], [ "IteratorEnumeration", "org.apache.commons.collections4.iterators" ], [ "SingletonIterator", "org.apache.commons.collections4.iterators" ], [ "ListIteratorWrapper", "org.apache.commons.collections4.iterators" ], [ "SkippingIterator", "org.apache.commons.collections4.iterators" ], [ "EmptyOrderedIterator", "org.apache.commons.collections4.iterators" ], [ "AbstractMapIteratorDecorator", "org.apache.commons.collections4.iterators" ], [ "ObjectArrayListIterator", "org.apache.commons.collections4.iterators" ], [ "UnmodifiableListIterator", "org.apache.commons.collections4.iterators" ], [ "EmptyOrderedMapIterator", "org.apache.commons.collections4.iterators" ], [ "UnmodifiableMapIterator", "org.apache.commons.collections4.iterators" ], [ "EmptyIterator", "org.apache.commons.collections4.iterators" ], [ "EntrySetMapIterator", "org.apache.commons.collections4.iterators" ], [ "PushbackIterator", "org.apache.commons.collections4.iterators" ], [ "FilterIterator", "org.apache.commons.collections4.iterators" ], [ "AbstractUntypedIteratorDecorator", "org.apache.commons.collections4.iterators" ], [ "AbstractOrderedMapIteratorDecorator", "org.apache.commons.collections4.iterators" ], [ "FilterListIterator", "org.apache.commons.collections4.iterators" ], [ "SplitMapUtils", "org.apache.commons.collections4" ], [ "BoundedMap", "org.apache.commons.collections4" ] ],
  "tokensProjectClassesNonPrivateStaticNonVoidMethods" : [ [ "emptyIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> emptyIterator()" ], [ "emptyListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> emptyListIterator()" ], [ "emptyOrderedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> OrderedIterator<E> emptyOrderedIterator()" ], [ "emptyMapIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <K, V> MapIterator<K, V> emptyMapIterator()" ], [ "emptyOrderedMapIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <K, V> OrderedMapIterator<K, V> emptyOrderedMapIterator()" ], [ "singletonIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> singletonIterator(final E object)" ], [ "singletonListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ListIterator<E> singletonListIterator(final E object)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final E... array)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final Object array)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final E[] array, final int start)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final Object array, final int start)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final E[] array, final int start, final int end)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final Object array, final int start, final int end)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final E... array)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final Object array)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final E[] array, final int start)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final Object array, final int start)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final E[] array, final int start, final int end)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final Object array, final int start, final int end)" ], [ "boundedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> BoundedIterator<E> boundedIterator(final Iterator<? extends E> iterator, long max)" ], [ "boundedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> BoundedIterator<E> boundedIterator(final Iterator<? extends E> iterator, long offset, long max)" ], [ "unmodifiableIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> unmodifiableIterator(final Iterator<E> iterator)" ], [ "unmodifiableListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ListIterator<E> unmodifiableListIterator(final ListIterator<E> listIterator)" ], [ "unmodifiableMapIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <K, V> MapIterator<K, V> unmodifiableMapIterator(final MapIterator<K, V> mapIterator)" ], [ "chainedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> chainedIterator(final Iterator<? extends E> iterator1, final Iterator<? extends E> iterator2)" ], [ "chainedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> chainedIterator(final Iterator<? extends E>... iterators)" ], [ "chainedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> chainedIterator(final Collection<Iterator<? extends E>> iterators)" ], [ "collatedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> collatedIterator(final Comparator<? super E> comparator, final Iterator<? extends E> iterator1, final Iterator<? extends E> iterator2)" ], [ "collatedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> collatedIterator(final Comparator<? super E> comparator, final Iterator<? extends E>... iterators)" ], [ "collatedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> collatedIterator(final Comparator<? super E> comparator, final Collection<Iterator<? extends E>> iterators)" ], [ "objectGraphIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> objectGraphIterator(final E root, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <I, O> Iterator<O> transformedIterator(final Iterator<? extends I> iterator, final Transformer<? super I, ? extends O> transform)" ], [ "filteredIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> filteredIterator(final Iterator<? extends E> iterator, final Predicate<? super E> predicate)" ], [ "filteredListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ListIterator<E> filteredListIterator(final ListIterator<? extends E> listIterator, final Predicate<? super E> predicate)" ], [ "loopingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> loopingIterator(final Collection<? extends E> coll)" ], [ "loopingListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> loopingListIterator(final List<E> list)" ], [ "nodeListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static NodeListIterator nodeListIterator(final NodeList nodeList)" ], [ "nodeListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static NodeListIterator nodeListIterator(final Node node)" ], [ "peekingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> peekingIterator(final Iterator<? extends E> iterator)" ], [ "pushbackIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> pushbackIterator(final Iterator<? extends E> iterator)" ], [ "skippingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> SkippingIterator<E> skippingIterator(final Iterator<E> iterator, long offset)" ], [ "zippingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ZippingIterator<E> zippingIterator(final Iterator<? extends E> a, final Iterator<? extends E> b)" ], [ "zippingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ZippingIterator<E> zippingIterator(final Iterator<? extends E> a, final Iterator<? extends E> b, final Iterator<? extends E> c)" ], [ "zippingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ZippingIterator<E> zippingIterator(final Iterator<? extends E>... iterators)" ], [ "asIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> asIterator(final Enumeration<? extends E> enumeration)" ], [ "asIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> asIterator(final Enumeration<? extends E> enumeration, final Collection<? super E> removeCollection)" ], [ "asEnumeration", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Enumeration<E> asEnumeration(final Iterator<? extends E> iterator)" ], [ "asIterable", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterable<E> asIterable(final Iterator<? extends E> iterator)" ], [ "asMultipleUseIterable", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterable<E> asMultipleUseIterable(final Iterator<? extends E> iterator)" ], [ "toListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ListIterator<E> toListIterator(final Iterator<? extends E> iterator)" ], [ "toArray", "org.apache.commons.collections4", "IteratorUtils", "public static Object[] toArray(final Iterator<?> iterator)" ], [ "toArray", "org.apache.commons.collections4", "IteratorUtils", "public static <E> E[] toArray(final Iterator<? extends E> iterator, final Class<E> arrayClass)" ], [ "toList", "org.apache.commons.collections4", "IteratorUtils", "public static <E> List<E> toList(final Iterator<? extends E> iterator)" ], [ "toList", "org.apache.commons.collections4", "IteratorUtils", "public static <E> List<E> toList(final Iterator<? extends E> iterator, final int estimatedSize)" ], [ "getIterator", "org.apache.commons.collections4", "IteratorUtils", "public static Iterator<?> getIterator(final Object obj)" ], [ "forEachButLast", "org.apache.commons.collections4", "IteratorUtils", "public static <E> E forEachButLast(final Iterator<E> iterator, final Closure<? super E> closure)" ], [ "find", "org.apache.commons.collections4", "IteratorUtils", "public static <E> E find(final Iterator<E> iterator, final Predicate<? super E> predicate)" ], [ "indexOf", "org.apache.commons.collections4", "IteratorUtils", "public static <E> int indexOf(final Iterator<E> iterator, final Predicate<? super E> predicate)" ], [ "matchesAny", "org.apache.commons.collections4", "IteratorUtils", "public static <E> boolean matchesAny(final Iterator<E> iterator, final Predicate<? super E> predicate)" ], [ "matchesAll", "org.apache.commons.collections4", "IteratorUtils", "public static <E> boolean matchesAll(final Iterator<E> iterator, final Predicate<? super E> predicate)" ], [ "isEmpty", "org.apache.commons.collections4", "IteratorUtils", "public static boolean isEmpty(final Iterator<?> iterator)" ], [ "contains", "org.apache.commons.collections4", "IteratorUtils", "public static <E> boolean contains(final Iterator<E> iterator, final Object object)" ], [ "get", "org.apache.commons.collections4", "IteratorUtils", "public static <E> E get(final Iterator<E> iterator, final int index)" ], [ "size", "org.apache.commons.collections4", "IteratorUtils", "public static int size(final Iterator<?> iterator)" ], [ "toString", "org.apache.commons.collections4", "IteratorUtils", "public static <E> String toString(final Iterator<E> iterator)" ], [ "toString", "org.apache.commons.collections4", "IteratorUtils", "public static <E> String toString(final Iterator<E> iterator, final Transformer<? super E, String> transformer)" ], [ "toString", "org.apache.commons.collections4", "IteratorUtils", "public static <E> String toString(final Iterator<E> iterator, final Transformer<? super E, String> transformer, final String delimiter, final String prefix, final String suffix)" ], [ "naturalComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E extends Comparable<? super E>> Comparator<E> naturalComparator()" ], [ "chainedComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> Comparator<E> chainedComparator(final Comparator<E>... comparators)" ], [ "chainedComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> Comparator<E> chainedComparator(final Collection<Comparator<E>> comparators)" ], [ "reversedComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> Comparator<E> reversedComparator(final Comparator<E> comparator)" ], [ "booleanComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static Comparator<Boolean> booleanComparator(final boolean trueFirst)" ], [ "nullLowComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> Comparator<E> nullLowComparator(Comparator<E> comparator)" ], [ "nullHighComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> Comparator<E> nullHighComparator(Comparator<E> comparator)" ], [ "transformedComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <I, O> Comparator<I> transformedComparator(Comparator<O> comparator, final Transformer<? super I, ? extends O> transformer)" ], [ "min", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> E min(final E o1, final E o2, Comparator<E> comparator)" ], [ "max", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> E max(final E o1, final E o2, Comparator<E> comparator)" ], [ "unmodifiableBidiMap", "org.apache.commons.collections4.bidimap", "UnmodifiableBidiMap", "public static <K, V> BidiMap<K, V> unmodifiableBidiMap(final BidiMap<? extends K, ? extends V> map)" ], [ "unmodifiableOrderedBidiMap", "org.apache.commons.collections4.bidimap", "UnmodifiableOrderedBidiMap", "public static <K, V> OrderedBidiMap<K, V> unmodifiableOrderedBidiMap(final OrderedBidiMap<? extends K, ? extends V> map)" ], [ "unmodifiableSortedBidiMap", "org.apache.commons.collections4.bidimap", "UnmodifiableSortedBidiMap", "public static <K, V> SortedBidiMap<K, V> unmodifiableSortedBidiMap(final SortedBidiMap<K, ? extends V> map)" ], [ "emptyMultiValuedMap", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> MultiValuedMap<K, V> emptyMultiValuedMap()" ], [ "emptyIfNull", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> MultiValuedMap<K, V> emptyIfNull(final MultiValuedMap<K, V> map)" ], [ "isEmpty", "org.apache.commons.collections4", "MultiMapUtils", "public static boolean isEmpty(final MultiValuedMap<?, ?> map)" ], [ "getCollection", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> Collection<V> getCollection(final MultiValuedMap<K, V> map, final K key)" ], [ "getValuesAsList", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> List<V> getValuesAsList(final MultiValuedMap<K, V> map, final K key)" ], [ "getValuesAsSet", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> Set<V> getValuesAsSet(final MultiValuedMap<K, V> map, final K key)" ], [ "getValuesAsBag", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> Bag<V> getValuesAsBag(final MultiValuedMap<K, V> map, final K key)" ], [ "newListValuedHashMap", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> ListValuedMap<K, V> newListValuedHashMap()" ], [ "newSetValuedHashMap", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> SetValuedMap<K, V> newSetValuedHashMap()" ], [ "unmodifiableMultiValuedMap", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> MultiValuedMap<K, V> unmodifiableMultiValuedMap(final MultiValuedMap<? extends K, ? extends V> map)" ], [ "transformedMultiValuedMap", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> MultiValuedMap<K, V> transformedMultiValuedMap(final MultiValuedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "unmodifiableBoundedCollection", "org.apache.commons.collections4.collection", "UnmodifiableBoundedCollection", "public static <E> BoundedCollection<E> unmodifiableBoundedCollection(final BoundedCollection<? extends E> coll)" ], [ "unmodifiableBoundedCollection", "org.apache.commons.collections4.collection", "UnmodifiableBoundedCollection", "public static <E> BoundedCollection<E> unmodifiableBoundedCollection(Collection<? extends E> coll)" ], [ "transformingCollection", "org.apache.commons.collections4.collection", "TransformedCollection", "public static <E> TransformedCollection<E> transformingCollection(final Collection<E> coll, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedCollection", "org.apache.commons.collections4.collection", "TransformedCollection", "public static <E> TransformedCollection<E> transformedCollection(final Collection<E> collection, final Transformer<? super E, ? extends E> transformer)" ], [ "builder", "org.apache.commons.collections4.collection", "PredicatedCollection", "public static <E> Builder<E> builder(final Predicate<? super E> predicate)" ], [ "notNullBuilder", "org.apache.commons.collections4.collection", "PredicatedCollection", "public static <E> Builder<E> notNullBuilder()" ], [ "predicatedCollection", "org.apache.commons.collections4.collection", "PredicatedCollection", "public static <T> PredicatedCollection<T> predicatedCollection(final Collection<T> coll, final Predicate<? super T> predicate)" ], [ "uniqueIndexedCollection", "org.apache.commons.collections4.collection", "IndexedCollection", "public static <K, C> IndexedCollection<K, C> uniqueIndexedCollection(final Collection<C> coll, final Transformer<C, K> keyTransformer)" ], [ "nonUniqueIndexedCollection", "org.apache.commons.collections4.collection", "IndexedCollection", "public static <K, C> IndexedCollection<K, C> nonUniqueIndexedCollection(final Collection<C> coll, final Transformer<C, K> keyTransformer)" ], [ "synchronizedCollection", "org.apache.commons.collections4.collection", "SynchronizedCollection", "public static <T> SynchronizedCollection<T> synchronizedCollection(final Collection<T> coll)" ], [ "unmodifiableCollection", "org.apache.commons.collections4.collection", "UnmodifiableCollection", "public static <T> Collection<T> unmodifiableCollection(final Collection<? extends T> coll)" ], [ "exceptionFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> exceptionFactory()" ], [ "nullFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> nullFactory()" ], [ "constantFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> constantFactory(final T constantToReturn)" ], [ "prototypeFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> prototypeFactory(final T prototype)" ], [ "instantiateFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> instantiateFactory(final Class<T> classToInstantiate)" ], [ "instantiateFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> instantiateFactory(final Class<T> classToInstantiate, final Class<?>[] paramTypes, final Object[] args)" ], [ "emptyIfNull", "org.apache.commons.collections4", "ListUtils", "public static <T> List<T> emptyIfNull(final List<T> list)" ], [ "defaultIfNull", "org.apache.commons.collections4", "ListUtils", "public static <T> List<T> defaultIfNull(final List<T> list, final List<T> defaultList)" ], [ "intersection", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> intersection(final List<? extends E> list1, final List<? extends E> list2)" ], [ "subtract", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> subtract(final List<E> list1, final List<? extends E> list2)" ], [ "sum", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> sum(final List<? extends E> list1, final List<? extends E> list2)" ], [ "union", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> union(final List<? extends E> list1, final List<? extends E> list2)" ], [ "select", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> select(final Collection<? extends E> inputCollection, final Predicate<? super E> predicate)" ], [ "selectRejected", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> selectRejected(final Collection<? extends E> inputCollection, final Predicate<? super E> predicate)" ], [ "isEqualList", "org.apache.commons.collections4", "ListUtils", "public static boolean isEqualList(final Collection<?> list1, final Collection<?> list2)" ], [ "hashCodeForList", "org.apache.commons.collections4", "ListUtils", "public static int hashCodeForList(final Collection<?> list)" ], [ "retainAll", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> retainAll(final Collection<E> collection, final Collection<?> retain)" ], [ "removeAll", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> removeAll(final Collection<E> collection, final Collection<?> remove)" ], [ "synchronizedList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> synchronizedList(final List<E> list)" ], [ "unmodifiableList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> unmodifiableList(final List<? extends E> list)" ], [ "predicatedList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> predicatedList(final List<E> list, final Predicate<E> predicate)" ], [ "transformedList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> transformedList(final List<E> list, final Transformer<? super E, ? extends E> transformer)" ], [ "lazyList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> lazyList(final List<E> list, final Factory<? extends E> factory)" ], [ "fixedSizeList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> fixedSizeList(final List<E> list)" ], [ "indexOf", "org.apache.commons.collections4", "ListUtils", "public static <E> int indexOf(final List<E> list, final Predicate<E> predicate)" ], [ "longestCommonSubsequence", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> longestCommonSubsequence(final List<E> a, final List<E> b)" ], [ "longestCommonSubsequence", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> longestCommonSubsequence(final List<E> a, final List<E> b, final Equator<? super E> equator)" ], [ "longestCommonSubsequence", "org.apache.commons.collections4", "ListUtils", "public static String longestCommonSubsequence(final CharSequence a, final CharSequence b)" ], [ "partition", "org.apache.commons.collections4", "ListUtils", "public static <T> List<List<T>> partition(final List<T> list, final int size)" ], [ "getObject", "org.apache.commons.collections4", "MapUtils", "public static <K, V> V getObject(final Map<? super K, V> map, final K key)" ], [ "getString", "org.apache.commons.collections4", "MapUtils", "public static <K> String getString(final Map<? super K, ?> map, final K key)" ], [ "getBoolean", "org.apache.commons.collections4", "MapUtils", "public static <K> Boolean getBoolean(final Map<? super K, ?> map, final K key)" ], [ "getNumber", "org.apache.commons.collections4", "MapUtils", "public static <K> Number getNumber(final Map<? super K, ?> map, final K key)" ], [ "getByte", "org.apache.commons.collections4", "MapUtils", "public static <K> Byte getByte(final Map<? super K, ?> map, final K key)" ], [ "getShort", "org.apache.commons.collections4", "MapUtils", "public static <K> Short getShort(final Map<? super K, ?> map, final K key)" ], [ "getInteger", "org.apache.commons.collections4", "MapUtils", "public static <K> Integer getInteger(final Map<? super K, ?> map, final K key)" ], [ "getLong", "org.apache.commons.collections4", "MapUtils", "public static <K> Long getLong(final Map<? super K, ?> map, final K key)" ], [ "getFloat", "org.apache.commons.collections4", "MapUtils", "public static <K> Float getFloat(final Map<? super K, ?> map, final K key)" ], [ "getDouble", "org.apache.commons.collections4", "MapUtils", "public static <K> Double getDouble(final Map<? super K, ?> map, final K key)" ], [ "getMap", "org.apache.commons.collections4", "MapUtils", "public static <K> Map<?, ?> getMap(final Map<? super K, ?> map, final K key)" ], [ "getObject", "org.apache.commons.collections4", "MapUtils", "public static <K, V> V getObject(final Map<K, V> map, final K key, final V defaultValue)" ], [ "getString", "org.apache.commons.collections4", "MapUtils", "public static <K> String getString(final Map<? super K, ?> map, final K key, final String defaultValue)" ], [ "getBoolean", "org.apache.commons.collections4", "MapUtils", "public static <K> Boolean getBoolean(final Map<? super K, ?> map, final K key, final Boolean defaultValue)" ], [ "getNumber", "org.apache.commons.collections4", "MapUtils", "public static <K> Number getNumber(final Map<? super K, ?> map, final K key, final Number defaultValue)" ], [ "getByte", "org.apache.commons.collections4", "MapUtils", "public static <K> Byte getByte(final Map<? super K, ?> map, final K key, final Byte defaultValue)" ], [ "getShort", "org.apache.commons.collections4", "MapUtils", "public static <K> Short getShort(final Map<? super K, ?> map, final K key, final Short defaultValue)" ], [ "getInteger", "org.apache.commons.collections4", "MapUtils", "public static <K> Integer getInteger(final Map<? super K, ?> map, final K key, final Integer defaultValue)" ], [ "getLong", "org.apache.commons.collections4", "MapUtils", "public static <K> Long getLong(final Map<? super K, ?> map, final K key, final Long defaultValue)" ], [ "getFloat", "org.apache.commons.collections4", "MapUtils", "public static <K> Float getFloat(final Map<? super K, ?> map, final K key, final Float defaultValue)" ], [ "getDouble", "org.apache.commons.collections4", "MapUtils", "public static <K> Double getDouble(final Map<? super K, ?> map, final K key, final Double defaultValue)" ], [ "getMap", "org.apache.commons.collections4", "MapUtils", "public static <K> Map<?, ?> getMap(final Map<? super K, ?> map, final K key, final Map<?, ?> defaultValue)" ], [ "getBooleanValue", "org.apache.commons.collections4", "MapUtils", "public static <K> boolean getBooleanValue(final Map<? super K, ?> map, final K key)" ], [ "getByteValue", "org.apache.commons.collections4", "MapUtils", "public static <K> byte getByteValue(final Map<? super K, ?> map, final K key)" ], [ "getShortValue", "org.apache.commons.collections4", "MapUtils", "public static <K> short getShortValue(final Map<? super K, ?> map, final K key)" ], [ "getIntValue", "org.apache.commons.collections4", "MapUtils", "public static <K> int getIntValue(final Map<? super K, ?> map, final K key)" ], [ "getLongValue", "org.apache.commons.collections4", "MapUtils", "public static <K> long getLongValue(final Map<? super K, ?> map, final K key)" ], [ "getFloatValue", "org.apache.commons.collections4", "MapUtils", "public static <K> float getFloatValue(final Map<? super K, ?> map, final K key)" ], [ "getDoubleValue", "org.apache.commons.collections4", "MapUtils", "public static <K> double getDoubleValue(final Map<? super K, ?> map, final K key)" ], [ "getBooleanValue", "org.apache.commons.collections4", "MapUtils", "public static <K> boolean getBooleanValue(final Map<? super K, ?> map, final K key, final boolean defaultValue)" ], [ "getByteValue", "org.apache.commons.collections4", "MapUtils", "public static <K> byte getByteValue(final Map<? super K, ?> map, final K key, final byte defaultValue)" ], [ "getShortValue", "org.apache.commons.collections4", "MapUtils", "public static <K> short getShortValue(final Map<? super K, ?> map, final K key, final short defaultValue)" ], [ "getIntValue", "org.apache.commons.collections4", "MapUtils", "public static <K> int getIntValue(final Map<? super K, ?> map, final K key, final int defaultValue)" ], [ "getLongValue", "org.apache.commons.collections4", "MapUtils", "public static <K> long getLongValue(final Map<? super K, ?> map, final K key, final long defaultValue)" ], [ "getFloatValue", "org.apache.commons.collections4", "MapUtils", "public static <K> float getFloatValue(final Map<? super K, ?> map, final K key, final float defaultValue)" ], [ "getDoubleValue", "org.apache.commons.collections4", "MapUtils", "public static <K> double getDoubleValue(final Map<? super K, ?> map, final K key, final double defaultValue)" ], [ "toProperties", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Properties toProperties(final Map<K, V> map)" ], [ "toMap", "org.apache.commons.collections4", "MapUtils", "public static Map<String, Object> toMap(final ResourceBundle resourceBundle)" ], [ "invertMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Map<V, K> invertMap(final Map<K, V> map)" ], [ "putAll", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Map<K, V> putAll(final Map<K, V> map, final Object[] array)" ], [ "emptyIfNull", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Map<K, V> emptyIfNull(final Map<K, V> map)" ], [ "isEmpty", "org.apache.commons.collections4", "MapUtils", "public static boolean isEmpty(final Map<?, ?> map)" ], [ "isNotEmpty", "org.apache.commons.collections4", "MapUtils", "public static boolean isNotEmpty(final Map<?, ?> map)" ], [ "synchronizedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Map<K, V> synchronizedMap(final Map<K, V> map)" ], [ "unmodifiableMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Map<K, V> unmodifiableMap(final Map<? extends K, ? extends V> map)" ], [ "predicatedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> predicatedMap(final Map<K, V> map, final Predicate<? super K> keyPred, final Predicate<? super V> valuePred)" ], [ "transformedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> transformedMap(final Map<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "fixedSizeMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> fixedSizeMap(final Map<K, V> map)" ], [ "lazyMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> lazyMap(final Map<K, V> map, final Factory<? extends V> factory)" ], [ "lazyMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> lazyMap(final Map<K, V> map, final Transformer<? super K, ? extends V> transformerFactory)" ], [ "orderedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> OrderedMap<K, V> orderedMap(final Map<K, V> map)" ], [ "multiValueMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> MultiValueMap<K, V> multiValueMap(final Map<K, ? super Collection<V>> map)" ], [ "multiValueMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V, C extends Collection<V>> MultiValueMap<K, V> multiValueMap(final Map<K, C> map, final Class<C> collectionClass)" ], [ "multiValueMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V, C extends Collection<V>> MultiValueMap<K, V> multiValueMap(final Map<K, C> map, final Factory<C> collectionFactory)" ], [ "synchronizedSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> synchronizedSortedMap(final SortedMap<K, V> map)" ], [ "unmodifiableSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> unmodifiableSortedMap(final SortedMap<K, ? extends V> map)" ], [ "predicatedSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> predicatedSortedMap(final SortedMap<K, V> map, final Predicate<? super K> keyPred, final Predicate<? super V> valuePred)" ], [ "transformedSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> transformedSortedMap(final SortedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "fixedSizeSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> fixedSizeSortedMap(final SortedMap<K, V> map)" ], [ "lazySortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> lazySortedMap(final SortedMap<K, V> map, final Factory<? extends V> factory)" ], [ "lazySortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> lazySortedMap(final SortedMap<K, V> map, final Transformer<? super K, ? extends V> transformerFactory)" ], [ "iterableMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> iterableMap(final Map<K, V> map)" ], [ "iterableSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableSortedMap<K, V> iterableSortedMap(final SortedMap<K, V> sortedMap)" ], [ "defaultEquator", "org.apache.commons.collections4.functors", "DefaultEquator", "public static <T> DefaultEquator<T> defaultEquator()" ], [ "stringValueTransformer", "org.apache.commons.collections4.functors", "StringValueTransformer", "public static <T> Transformer<T, String> stringValueTransformer()" ], [ "ifTransformer", "org.apache.commons.collections4.functors", "IfTransformer", "public static <I, O> Transformer<I, O> ifTransformer(final Predicate<? super I> predicate, final Transformer<? super I, ? extends O> trueTransformer, final Transformer<? super I, ? extends O> falseTransformer)" ], [ "ifTransformer", "org.apache.commons.collections4.functors", "IfTransformer", "public static <T> Transformer<T, T> ifTransformer(final Predicate<? super T> predicate, final Transformer<? super T, ? extends T> trueTransformer)" ], [ "identityPredicate", "org.apache.commons.collections4.functors", "IdentityPredicate", "public static <T> Predicate<T> identityPredicate(final T object)" ], [ "exceptionClosure", "org.apache.commons.collections4.functors", "ExceptionClosure", "public static <E> Closure<E> exceptionClosure()" ], [ "nopClosure", "org.apache.commons.collections4.functors", "NOPClosure", "public static <E> Closure<E> nopClosure()" ], [ "closureTransformer", "org.apache.commons.collections4.functors", "ClosureTransformer", "public static <T> Transformer<T, T> closureTransformer(final Closure<? super T> closure)" ], [ "copy", "org.apache.commons.collections4.functors", "FunctorUtils", "static <T> Predicate<T>[] copy(final Predicate<? super T>... predicates)" ], [ "coerce", "org.apache.commons.collections4.functors", "FunctorUtils", "static <T> Predicate<T> coerce(final Predicate<? super T> predicate)" ], [ "validate", "org.apache.commons.collections4.functors", "FunctorUtils", "static <T> Predicate<? super T>[] validate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "copy", "org.apache.commons.collections4.functors", "FunctorUtils", "static <E> Closure<E>[] copy(final Closure<? super E>... closures)" ], [ "coerce", "org.apache.commons.collections4.functors", "FunctorUtils", "static <T> Closure<T> coerce(final Closure<? super T> closure)" ], [ "copy", "org.apache.commons.collections4.functors", "FunctorUtils", "static <I, O> Transformer<I, O>[] copy(final Transformer<? super I, ? extends O>... transformers)" ], [ "coerce", "org.apache.commons.collections4.functors", "FunctorUtils", "static <I, O> Transformer<I, O> coerce(final Transformer<? super I, ? extends O> transformer)" ], [ "transformerPredicate", "org.apache.commons.collections4.functors", "TransformerPredicate", "public static <T> Predicate<T> transformerPredicate(final Transformer<? super T, Boolean> transformer)" ], [ "nullPredicate", "org.apache.commons.collections4.functors", "NullPredicate", "public static <T> Predicate<T> nullPredicate()" ], [ "nullTransformer", "org.apache.commons.collections4.functors", "ConstantTransformer", "public static <I, O> Transformer<I, O> nullTransformer()" ], [ "constantTransformer", "org.apache.commons.collections4.functors", "ConstantTransformer", "public static <I, O> Transformer<I, O> constantTransformer(final O constantToReturn)" ], [ "predicateTransformer", "org.apache.commons.collections4.functors", "PredicateTransformer", "public static <T> Transformer<T, Boolean> predicateTransformer(final Predicate<? super T> predicate)" ], [ "whileClosure", "org.apache.commons.collections4.functors", "WhileClosure", "public static <E> Closure<E> whileClosure(final Predicate<? super E> predicate, final Closure<? super E> closure, final boolean doLoop)" ], [ "forClosure", "org.apache.commons.collections4.functors", "ForClosure", "public static <E> Closure<E> forClosure(final int count, final Closure<? super E> closure)" ], [ "nullIsTruePredicate", "org.apache.commons.collections4.functors", "NullIsTruePredicate", "public static <T> Predicate<T> nullIsTruePredicate(final Predicate<? super T> predicate)" ], [ "transformedPredicate", "org.apache.commons.collections4.functors", "TransformedPredicate", "public static <T> Predicate<T> transformedPredicate(final Transformer<? super T, ? extends T> transformer, final Predicate<? super T> predicate)" ], [ "nonePredicate", "org.apache.commons.collections4.functors", "NonePredicate", "public static <T> Predicate<T> nonePredicate(final Predicate<? super T>... predicates)" ], [ "nonePredicate", "org.apache.commons.collections4.functors", "NonePredicate", "public static <T> Predicate<T> nonePredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "exceptionTransformer", "org.apache.commons.collections4.functors", "ExceptionTransformer", "public static <I, O> Transformer<I, O> exceptionTransformer()" ], [ "switchTransformer", "org.apache.commons.collections4.functors", "SwitchTransformer", "public static <I, O> Transformer<I, O> switchTransformer(final Predicate<? super I>[] predicates, final Transformer<? super I, ? extends O>[] transformers, final Transformer<? super I, ? extends O> defaultTransformer)" ], [ "switchTransformer", "org.apache.commons.collections4.functors", "SwitchTransformer", "public static <I, O> Transformer<I, O> switchTransformer(final Map<? extends Predicate<? super I>, ? extends Transformer<? super I, ? extends O>> map)" ], [ "transformerClosure", "org.apache.commons.collections4.functors", "TransformerClosure", "public static <E> Closure<E> transformerClosure(final Transformer<? super E, ?> transformer)" ], [ "orPredicate", "org.apache.commons.collections4.functors", "OrPredicate", "public static <T> Predicate<T> orPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "nopTransformer", "org.apache.commons.collections4.functors", "NOPTransformer", "public static <T> Transformer<T, T> nopTransformer()" ], [ "mapTransformer", "org.apache.commons.collections4.functors", "MapTransformer", "public static <I, O> Transformer<I, O> mapTransformer(final Map<? super I, ? extends O> map)" ], [ "exceptionFactory", "org.apache.commons.collections4.functors", "ExceptionFactory", "public static <T> Factory<T> exceptionFactory()" ], [ "chainedClosure", "org.apache.commons.collections4.functors", "ChainedClosure", "public static <E> Closure<E> chainedClosure(final Closure<? super E>... closures)" ], [ "chainedClosure", "org.apache.commons.collections4.functors", "ChainedClosure", "public static <E> Closure<E> chainedClosure(final Collection<? extends Closure<? super E>> closures)" ], [ "andPredicate", "org.apache.commons.collections4.functors", "AndPredicate", "public static <T> Predicate<T> andPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "prototypeFactory", "org.apache.commons.collections4.functors", "PrototypeFactory", "public static <T> Factory<T> prototypeFactory(final T prototype)" ], [ "exceptionPredicate", "org.apache.commons.collections4.functors", "ExceptionPredicate", "public static <T> Predicate<T> exceptionPredicate()" ], [ "instanceOfPredicate", "org.apache.commons.collections4.functors", "InstanceofPredicate", "public static Predicate<Object> instanceOfPredicate(final Class<?> type)" ], [ "invokerTransformer", "org.apache.commons.collections4.functors", "InvokerTransformer", "public static <I, O> Transformer<I, O> invokerTransformer(final String methodName)" ], [ "invokerTransformer", "org.apache.commons.collections4.functors", "InvokerTransformer", "public static <I, O> Transformer<I, O> invokerTransformer(final String methodName, final Class<?>[] paramTypes, final Object[] args)" ], [ "falsePredicate", "org.apache.commons.collections4.functors", "FalsePredicate", "public static <T> Predicate<T> falsePredicate()" ], [ "cloneTransformer", "org.apache.commons.collections4.functors", "CloneTransformer", "public static <T> Transformer<T, T> cloneTransformer()" ], [ "notPredicate", "org.apache.commons.collections4.functors", "NotPredicate", "public static <T> Predicate<T> notPredicate(final Predicate<? super T> predicate)" ], [ "constantFactory", "org.apache.commons.collections4.functors", "ConstantFactory", "public static <T> Factory<T> constantFactory(final T constantToReturn)" ], [ "chainedTransformer", "org.apache.commons.collections4.functors", "ChainedTransformer", "public static <T> Transformer<T, T> chainedTransformer(final Transformer<? super T, ? extends T>... transformers)" ], [ "chainedTransformer", "org.apache.commons.collections4.functors", "ChainedTransformer", "public static <T> Transformer<T, T> chainedTransformer(final Collection<? extends Transformer<? super T, ? extends T>> transformers)" ], [ "comparatorPredicate", "org.apache.commons.collections4.functors", "ComparatorPredicate", "public static <T> Predicate<T> comparatorPredicate(final T object, final Comparator<T> comparator)" ], [ "comparatorPredicate", "org.apache.commons.collections4.functors", "ComparatorPredicate", "public static <T> Predicate<T> comparatorPredicate(final T object, final Comparator<T> comparator, final Criterion criterion)" ], [ "allPredicate", "org.apache.commons.collections4.functors", "AllPredicate", "public static <T> Predicate<T> allPredicate(final Predicate<? super T>... predicates)" ], [ "allPredicate", "org.apache.commons.collections4.functors", "AllPredicate", "public static <T> Predicate<T> allPredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "nullIsFalsePredicate", "org.apache.commons.collections4.functors", "NullIsFalsePredicate", "public static <T> Predicate<T> nullIsFalsePredicate(final Predicate<? super T> predicate)" ], [ "nullIsExceptionPredicate", "org.apache.commons.collections4.functors", "NullIsExceptionPredicate", "public static <T> Predicate<T> nullIsExceptionPredicate(final Predicate<? super T> predicate)" ], [ "anyPredicate", "org.apache.commons.collections4.functors", "AnyPredicate", "public static <T> Predicate<T> anyPredicate(final Predicate<? super T>... predicates)" ], [ "anyPredicate", "org.apache.commons.collections4.functors", "AnyPredicate", "public static <T> Predicate<T> anyPredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "truePredicate", "org.apache.commons.collections4.functors", "TruePredicate", "public static <T> Predicate<T> truePredicate()" ], [ "factoryTransformer", "org.apache.commons.collections4.functors", "FactoryTransformer", "public static <I, O> Transformer<I, O> factoryTransformer(final Factory<? extends O> factory)" ], [ "notNullPredicate", "org.apache.commons.collections4.functors", "NotNullPredicate", "public static <T> Predicate<T> notNullPredicate()" ], [ "switchClosure", "org.apache.commons.collections4.functors", "SwitchClosure", "public static <E> Closure<E> switchClosure(final Predicate<? super E>[] predicates, final Closure<? super E>[] closures, final Closure<? super E> defaultClosure)" ], [ "switchClosure", "org.apache.commons.collections4.functors", "SwitchClosure", "public static <E> Closure<E> switchClosure(final Map<Predicate<E>, Closure<E>> predicatesAndClosures)" ], [ "uniquePredicate", "org.apache.commons.collections4.functors", "UniquePredicate", "public static <T> Predicate<T> uniquePredicate()" ], [ "instantiateTransformer", "org.apache.commons.collections4.functors", "InstantiateTransformer", "public static <T> Transformer<Class<? extends T>, T> instantiateTransformer()" ], [ "instantiateTransformer", "org.apache.commons.collections4.functors", "InstantiateTransformer", "public static <T> Transformer<Class<? extends T>, T> instantiateTransformer(final Class<?>[] paramTypes, final Object[] args)" ], [ "onePredicate", "org.apache.commons.collections4.functors", "OnePredicate", "public static <T> Predicate<T> onePredicate(final Predicate<? super T>... predicates)" ], [ "onePredicate", "org.apache.commons.collections4.functors", "OnePredicate", "public static <T> Predicate<T> onePredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "equalPredicate", "org.apache.commons.collections4.functors", "EqualPredicate", "public static <T> Predicate<T> equalPredicate(final T object)" ], [ "equalPredicate", "org.apache.commons.collections4.functors", "EqualPredicate", "public static <T> Predicate<T> equalPredicate(final T object, final Equator<T> equator)" ], [ "instantiateFactory", "org.apache.commons.collections4.functors", "InstantiateFactory", "public static <T> Factory<T> instantiateFactory(final Class<T> classToInstantiate, final Class<?>[] paramTypes, final Object[] args)" ], [ "ifClosure", "org.apache.commons.collections4.functors", "IfClosure", "public static <E> Closure<E> ifClosure(final Predicate<? super E> predicate, final Closure<? super E> trueClosure)" ], [ "ifClosure", "org.apache.commons.collections4.functors", "IfClosure", "public static <E> Closure<E> ifClosure(final Predicate<? super E> predicate, final Closure<? super E> trueClosure, final Closure<? super E> falseClosure)" ], [ "getTrueFirstComparator", "org.apache.commons.collections4.comparators", "BooleanComparator", "public static BooleanComparator getTrueFirstComparator()" ], [ "getFalseFirstComparator", "org.apache.commons.collections4.comparators", "BooleanComparator", "public static BooleanComparator getFalseFirstComparator()" ], [ "booleanComparator", "org.apache.commons.collections4.comparators", "BooleanComparator", "public static BooleanComparator booleanComparator(final boolean trueFirst)" ], [ "comparableComparator", "org.apache.commons.collections4.comparators", "ComparableComparator", "public static <E extends Comparable<? super E>> ComparableComparator<E> comparableComparator()" ], [ "emptyCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <T> Collection<T> emptyCollection()" ], [ "emptyIfNull", "org.apache.commons.collections4", "CollectionUtils", "public static <T> Collection<T> emptyIfNull(final Collection<T> collection)" ], [ "union", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> union(final Iterable<? extends O> a, final Iterable<? extends O> b)" ], [ "intersection", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> intersection(final Iterable<? extends O> a, final Iterable<? extends O> b)" ], [ "disjunction", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> disjunction(final Iterable<? extends O> a, final Iterable<? extends O> b)" ], [ "subtract", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> subtract(final Iterable<? extends O> a, final Iterable<? extends O> b)" ], [ "subtract", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> subtract(final Iterable<? extends O> a, final Iterable<? extends O> b, final Predicate<O> p)" ], [ "containsAll", "org.apache.commons.collections4", "CollectionUtils", "public static boolean containsAll(final Collection<?> coll1, final Collection<?> coll2)" ], [ "containsAny", "org.apache.commons.collections4", "CollectionUtils", "public static boolean containsAny(final Collection<?> coll1, final Collection<?> coll2)" ], [ "getCardinalityMap", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Map<O, Integer> getCardinalityMap(final Iterable<? extends O> coll)" ], [ "isSubCollection", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isSubCollection(final Collection<?> a, final Collection<?> b)" ], [ "isProperSubCollection", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isProperSubCollection(final Collection<?> a, final Collection<?> b)" ], [ "isEqualCollection", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isEqualCollection(final Collection<?> a, final Collection<?> b)" ], [ "isEqualCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <E> boolean isEqualCollection(final Collection<? extends E> a, final Collection<? extends E> b, final Equator<? super E> equator)" ], [ "cardinality", "org.apache.commons.collections4", "CollectionUtils", "public static <O> int cardinality(final O obj, final Iterable<? super O> coll)" ], [ "find", "org.apache.commons.collections4", "CollectionUtils", "public static <T> T find(final Iterable<T> collection, final Predicate<? super T> predicate)" ], [ "forAllDo", "org.apache.commons.collections4", "CollectionUtils", "public static <T, C extends Closure<? super T>> C forAllDo(final Iterable<T> collection, final C closure)" ], [ "forAllDo", "org.apache.commons.collections4", "CollectionUtils", "public static <T, C extends Closure<? super T>> C forAllDo(final Iterator<T> iterator, final C closure)" ], [ "forAllButLastDo", "org.apache.commons.collections4", "CollectionUtils", "public static <T, C extends Closure<? super T>> T forAllButLastDo(final Iterable<T> collection, final C closure)" ], [ "forAllButLastDo", "org.apache.commons.collections4", "CollectionUtils", "public static <T, C extends Closure<? super T>> T forAllButLastDo(final Iterator<T> iterator, final C closure)" ], [ "filter", "org.apache.commons.collections4", "CollectionUtils", "public static <T> boolean filter(final Iterable<T> collection, final Predicate<? super T> predicate)" ], [ "filterInverse", "org.apache.commons.collections4", "CollectionUtils", "public static <T> boolean filterInverse(final Iterable<T> collection, final Predicate<? super T> predicate)" ], [ "countMatches", "org.apache.commons.collections4", "CollectionUtils", "public static <C> int countMatches(final Iterable<C> input, final Predicate<? super C> predicate)" ], [ "exists", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean exists(final Iterable<C> input, final Predicate<? super C> predicate)" ], [ "matchesAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean matchesAll(final Iterable<C> input, final Predicate<? super C> predicate)" ], [ "select", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> select(final Iterable<? extends O> inputCollection, final Predicate<? super O> predicate)" ], [ "select", "org.apache.commons.collections4", "CollectionUtils", "public static <O, R extends Collection<? super O>> R select(final Iterable<? extends O> inputCollection, final Predicate<? super O> predicate, final R outputCollection)" ], [ "select", "org.apache.commons.collections4", "CollectionUtils", "public static <O, R extends Collection<? super O>> R select(final Iterable<? extends O> inputCollection, final Predicate<? super O> predicate, R outputCollection, R rejectedCollection)" ], [ "selectRejected", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> selectRejected(final Iterable<? extends O> inputCollection, final Predicate<? super O> predicate)" ], [ "selectRejected", "org.apache.commons.collections4", "CollectionUtils", "public static <O, R extends Collection<? super O>> R selectRejected(final Iterable<? extends O> inputCollection, final Predicate<? super O> predicate, final R outputCollection)" ], [ "collect", "org.apache.commons.collections4", "CollectionUtils", "public static <I, O> Collection<O> collect(final Iterable<I> inputCollection, final Transformer<? super I, ? extends O> transformer)" ], [ "collect", "org.apache.commons.collections4", "CollectionUtils", "public static <I, O> Collection<O> collect(final Iterator<I> inputIterator, final Transformer<? super I, ? extends O> transformer)" ], [ "collect", "org.apache.commons.collections4", "CollectionUtils", "public static <I, O, R extends Collection<? super O>> R collect(final Iterable<? extends I> inputCollection, final Transformer<? super I, ? extends O> transformer, final R outputCollection)" ], [ "collect", "org.apache.commons.collections4", "CollectionUtils", "public static <I, O, R extends Collection<? super O>> R collect(final Iterator<? extends I> inputIterator, final Transformer<? super I, ? extends O> transformer, final R outputCollection)" ], [ "addIgnoreNull", "org.apache.commons.collections4", "CollectionUtils", "public static <T> boolean addIgnoreNull(final Collection<T> collection, final T object)" ], [ "addAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean addAll(final Collection<C> collection, final Iterable<? extends C> iterable)" ], [ "addAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean addAll(final Collection<C> collection, final Iterator<? extends C> iterator)" ], [ "addAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean addAll(final Collection<C> collection, final Enumeration<? extends C> enumeration)" ], [ "addAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean addAll(final Collection<C> collection, final C[] elements)" ], [ "get", "org.apache.commons.collections4", "CollectionUtils", "public static <T> T get(final Iterator<T> iterator, final int index)" ], [ "get", "org.apache.commons.collections4", "CollectionUtils", "public static <T> T get(final Iterable<T> iterable, final int index)" ], [ "get", "org.apache.commons.collections4", "CollectionUtils", "public static Object get(final Object object, final int index)" ], [ "get", "org.apache.commons.collections4", "CollectionUtils", "public static <K, V> Map.Entry<K, V> get(final Map<K, V> map, final int index)" ], [ "size", "org.apache.commons.collections4", "CollectionUtils", "public static int size(final Object object)" ], [ "sizeIsEmpty", "org.apache.commons.collections4", "CollectionUtils", "public static boolean sizeIsEmpty(final Object object)" ], [ "isEmpty", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isEmpty(final Collection<?> coll)" ], [ "isNotEmpty", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isNotEmpty(final Collection<?> coll)" ], [ "isFull", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isFull(final Collection<? extends Object> coll)" ], [ "maxSize", "org.apache.commons.collections4", "CollectionUtils", "public static int maxSize(final Collection<? extends Object> coll)" ], [ "collate", "org.apache.commons.collections4", "CollectionUtils", "public static <O extends Comparable<? super O>> List<O> collate(Iterable<? extends O> a, Iterable<? extends O> b)" ], [ "collate", "org.apache.commons.collections4", "CollectionUtils", "public static <O extends Comparable<? super O>> List<O> collate(final Iterable<? extends O> a, final Iterable<? extends O> b, final boolean includeDuplicates)" ], [ "collate", "org.apache.commons.collections4", "CollectionUtils", "public static <O> List<O> collate(final Iterable<? extends O> a, final Iterable<? extends O> b, final Comparator<? super O> c)" ], [ "collate", "org.apache.commons.collections4", "CollectionUtils", "public static <O> List<O> collate(final Iterable<? extends O> a, final Iterable<? extends O> b, final Comparator<? super O> c, final boolean includeDuplicates)" ], [ "permutations", "org.apache.commons.collections4", "CollectionUtils", "public static <E> Collection<List<E>> permutations(final Collection<E> collection)" ], [ "retainAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> Collection<C> retainAll(final Collection<C> collection, final Collection<?> retain)" ], [ "retainAll", "org.apache.commons.collections4", "CollectionUtils", "public static <E> Collection<E> retainAll(final Iterable<E> collection, final Iterable<? extends E> retain, final Equator<? super E> equator)" ], [ "removeAll", "org.apache.commons.collections4", "CollectionUtils", "public static <E> Collection<E> removeAll(final Collection<E> collection, final Collection<?> remove)" ], [ "removeAll", "org.apache.commons.collections4", "CollectionUtils", "public static <E> Collection<E> removeAll(final Iterable<E> collection, final Iterable<? extends E> remove, final Equator<? super E> equator)" ], [ "synchronizedCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <C> Collection<C> synchronizedCollection(final Collection<C> collection)" ], [ "unmodifiableCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <C> Collection<C> unmodifiableCollection(final Collection<? extends C> collection)" ], [ "predicatedCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <C> Collection<C> predicatedCollection(final Collection<C> collection, final Predicate<? super C> predicate)" ], [ "transformingCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <E> Collection<E> transformingCollection(final Collection<E> collection, final Transformer<? super E, ? extends E> transformer)" ], [ "extractSingleton", "org.apache.commons.collections4", "CollectionUtils", "public static <E> E extractSingleton(final Collection<E> collection)" ], [ "transformingMap", "org.apache.commons.collections4.splitmap", "TransformedSplitMap", "public static <J, K, U, V> TransformedSplitMap<J, K, U, V> transformingMap(final Map<K, V> map, final Transformer<? super J, ? extends K> keyTransformer, final Transformer<? super U, ? extends V> valueTransformer)" ], [ "emptyIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> emptyIterable()" ], [ "chainedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> chainedIterable(final Iterable<? extends E> a, final Iterable<? extends E> b)" ], [ "chainedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> chainedIterable(final Iterable<? extends E> a, final Iterable<? extends E> b, final Iterable<? extends E> c)" ], [ "chainedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> chainedIterable(final Iterable<? extends E> a, final Iterable<? extends E> b, final Iterable<? extends E> c, final Iterable<? extends E> d)" ], [ "chainedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> chainedIterable(final Iterable<? extends E>... iterables)" ], [ "collatedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> collatedIterable(final Iterable<? extends E> a, final Iterable<? extends E> b)" ], [ "collatedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> collatedIterable(final Comparator<? super E> comparator, final Iterable<? extends E> a, final Iterable<? extends E> b)" ], [ "filteredIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> filteredIterable(final Iterable<E> iterable, final Predicate<? super E> predicate)" ], [ "boundedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> boundedIterable(final Iterable<E> iterable, final long maxSize)" ], [ "loopingIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> loopingIterable(final Iterable<E> iterable)" ], [ "reversedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> reversedIterable(final Iterable<E> iterable)" ], [ "skippingIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> skippingIterable(final Iterable<E> iterable, final long elementsToSkip)" ], [ "transformedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <I, O> Iterable<O> transformedIterable(final Iterable<I> iterable, final Transformer<? super I, ? extends O> transformer)" ], [ "uniqueIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> uniqueIterable(final Iterable<E> iterable)" ], [ "unmodifiableIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> unmodifiableIterable(final Iterable<E> iterable)" ], [ "zippingIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> zippingIterable(final Iterable<? extends E> a, final Iterable<? extends E> b)" ], [ "zippingIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> zippingIterable(final Iterable<? extends E> first, final Iterable<? extends E>... others)" ], [ "emptyIfNull", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> emptyIfNull(final Iterable<E> iterable)" ], [ "forEachButLast", "org.apache.commons.collections4", "IterableUtils", "public static <E> E forEachButLast(final Iterable<E> iterable, final Closure<? super E> closure)" ], [ "find", "org.apache.commons.collections4", "IterableUtils", "public static <E> E find(final Iterable<E> iterable, final Predicate<? super E> predicate)" ], [ "indexOf", "org.apache.commons.collections4", "IterableUtils", "public static <E> int indexOf(final Iterable<E> iterable, final Predicate<? super E> predicate)" ], [ "matchesAll", "org.apache.commons.collections4", "IterableUtils", "public static <E> boolean matchesAll(final Iterable<E> iterable, final Predicate<? super E> predicate)" ], [ "matchesAny", "org.apache.commons.collections4", "IterableUtils", "public static <E> boolean matchesAny(final Iterable<E> iterable, final Predicate<? super E> predicate)" ], [ "countMatches", "org.apache.commons.collections4", "IterableUtils", "public static <E> long countMatches(final Iterable<E> input, final Predicate<? super E> predicate)" ], [ "isEmpty", "org.apache.commons.collections4", "IterableUtils", "public static boolean isEmpty(final Iterable<?> iterable)" ], [ "contains", "org.apache.commons.collections4", "IterableUtils", "public static <E> boolean contains(final Iterable<E> iterable, final Object object)" ], [ "contains", "org.apache.commons.collections4", "IterableUtils", "public static <E> boolean contains(final Iterable<? extends E> iterable, final E object, final Equator<? super E> equator)" ], [ "frequency", "org.apache.commons.collections4", "IterableUtils", "public static <E, T extends E> int frequency(final Iterable<E> iterable, final T obj)" ], [ "get", "org.apache.commons.collections4", "IterableUtils", "public static <T> T get(final Iterable<T> iterable, final int index)" ], [ "size", "org.apache.commons.collections4", "IterableUtils", "public static int size(final Iterable<?> iterable)" ], [ "partition", "org.apache.commons.collections4", "IterableUtils", "public static <O> List<List<O>> partition(final Iterable<? extends O> iterable, final Predicate<? super O> predicate)" ], [ "partition", "org.apache.commons.collections4", "IterableUtils", "public static <O> List<List<O>> partition(final Iterable<? extends O> iterable, final Predicate<? super O>... predicates)" ], [ "partition", "org.apache.commons.collections4", "IterableUtils", "public static <O, R extends Collection<O>> List<R> partition(final Iterable<? extends O> iterable, final Factory<R> partitionFactory, final Predicate<? super O>... predicates)" ], [ "toList", "org.apache.commons.collections4", "IterableUtils", "public static <E> List<E> toList(final Iterable<E> iterable)" ], [ "toString", "org.apache.commons.collections4", "IterableUtils", "public static <E> String toString(final Iterable<E> iterable)" ], [ "toString", "org.apache.commons.collections4", "IterableUtils", "public static <E> String toString(final Iterable<E> iterable, final Transformer<? super E, String> transformer)" ], [ "toString", "org.apache.commons.collections4", "IterableUtils", "public static <E> String toString(final Iterable<E> iterable, final Transformer<? super E, String> transformer, final String delimiter, final String prefix, final String suffix)" ], [ "unmodifiableTrie", "org.apache.commons.collections4", "TrieUtils", "public static <K, V> Trie<K, V> unmodifiableTrie(final Trie<K, ? extends V> trie)" ], [ "exceptionClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> exceptionClosure()" ], [ "nopClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> nopClosure()" ], [ "asClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> asClosure(final Transformer<? super E, ?> transformer)" ], [ "forClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> forClosure(final int count, final Closure<? super E> closure)" ], [ "whileClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> whileClosure(final Predicate<? super E> predicate, final Closure<? super E> closure)" ], [ "doWhileClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> doWhileClosure(final Closure<? super E> closure, final Predicate<? super E> predicate)" ], [ "invokerClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> invokerClosure(final String methodName)" ], [ "invokerClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> invokerClosure(final String methodName, final Class<?>[] paramTypes, final Object[] args)" ], [ "chainedClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> chainedClosure(final Closure<? super E>... closures)" ], [ "chainedClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> chainedClosure(final Collection<? extends Closure<? super E>> closures)" ], [ "ifClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> ifClosure(final Predicate<? super E> predicate, final Closure<? super E> trueClosure)" ], [ "ifClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> ifClosure(final Predicate<? super E> predicate, final Closure<? super E> trueClosure, final Closure<? super E> falseClosure)" ], [ "switchClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> switchClosure(final Predicate<? super E>[] predicates, final Closure<? super E>[] closures)" ], [ "switchClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> switchClosure(final Predicate<? super E>[] predicates, final Closure<? super E>[] closures, final Closure<? super E> defaultClosure)" ], [ "switchClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> switchClosure(final Map<Predicate<E>, Closure<E>> predicatesAndClosures)" ], [ "switchMapClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> switchMapClosure(final Map<? extends E, Closure<E>> objectsAndClosures)" ], [ "unmodifiableTrie", "org.apache.commons.collections4.trie", "UnmodifiableTrie", "public static <K, V> Trie<K, V> unmodifiableTrie(final Trie<K, ? extends V> trie)" ], [ "isOutOfBoundsIndex", "org.apache.commons.collections4.trie", "KeyAnalyzer", "static boolean isOutOfBoundsIndex(final int bitIndex)" ], [ "isEqualBitKey", "org.apache.commons.collections4.trie", "KeyAnalyzer", "static boolean isEqualBitKey(final int bitIndex)" ], [ "isNullBitKey", "org.apache.commons.collections4.trie", "KeyAnalyzer", "static boolean isNullBitKey(final int bitIndex)" ], [ "isValidBitIndex", "org.apache.commons.collections4.trie", "KeyAnalyzer", "static boolean isValidBitIndex(final int bitIndex)" ], [ "isValidUplink", "org.apache.commons.collections4.trie", "AbstractPatriciaTrie", "static boolean isValidUplink(final TrieEntry<?, ?> next, final TrieEntry<?, ?> from)" ], [ "compare", "org.apache.commons.collections4.trie", "AbstractBitwiseTrie", "static boolean compare(final Object a, final Object b)" ], [ "transformingSortedMap", "org.apache.commons.collections4.map", "TransformedSortedMap", "public static <K, V> TransformedSortedMap<K, V> transformingSortedMap(final SortedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "transformedSortedMap", "org.apache.commons.collections4.map", "TransformedSortedMap", "public static <K, V> TransformedSortedMap<K, V> transformedSortedMap(final SortedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "predicatedMap", "org.apache.commons.collections4.map", "PredicatedMap", "public static <K, V> PredicatedMap<K, V> predicatedMap(final Map<K, V> map, final Predicate<? super K> keyPredicate, final Predicate<? super V> valuePredicate)" ], [ "fixedSizeSortedMap", "org.apache.commons.collections4.map", "FixedSizeSortedMap", "public static <K, V> FixedSizeSortedMap<K, V> fixedSizeSortedMap(final SortedMap<K, V> map)" ], [ "unmodifiableSortedMap", "org.apache.commons.collections4.map", "UnmodifiableSortedMap", "public static <K, V> SortedMap<K, V> unmodifiableSortedMap(final SortedMap<K, ? extends V> map)" ], [ "predicatedSortedMap", "org.apache.commons.collections4.map", "PredicatedSortedMap", "public static <K, V> PredicatedSortedMap<K, V> predicatedSortedMap(final SortedMap<K, V> map, final Predicate<? super K> keyPredicate, final Predicate<? super V> valuePredicate)" ], [ "defaultedMap", "org.apache.commons.collections4.map", "DefaultedMap", "public static <K, V> DefaultedMap<K, V> defaultedMap(final Map<K, V> map, final V defaultValue)" ], [ "defaultedMap", "org.apache.commons.collections4.map", "DefaultedMap", "public static <K, V> DefaultedMap<K, V> defaultedMap(final Map<K, V> map, final Factory<? extends V> factory)" ], [ "defaultedMap", "org.apache.commons.collections4.map", "DefaultedMap", "public static <K, V> Map<K, V> defaultedMap(final Map<K, V> map, final Transformer<? super K, ? extends V> transformer)" ], [ "fixedSizeMap", "org.apache.commons.collections4.map", "FixedSizeMap", "public static <K, V> FixedSizeMap<K, V> fixedSizeMap(final Map<K, V> map)" ], [ "lazySortedMap", "org.apache.commons.collections4.map", "LazySortedMap", "public static <K, V> LazySortedMap<K, V> lazySortedMap(final SortedMap<K, V> map, final Factory<? extends V> factory)" ], [ "lazySortedMap", "org.apache.commons.collections4.map", "LazySortedMap", "public static <K, V> LazySortedMap<K, V> lazySortedMap(final SortedMap<K, V> map, final Transformer<? super K, ? extends V> factory)" ], [ "unmodifiableOrderedMap", "org.apache.commons.collections4.map", "UnmodifiableOrderedMap", "public static <K, V> OrderedMap<K, V> unmodifiableOrderedMap(final OrderedMap<? extends K, ? extends V> map)" ], [ "unmodifiableMap", "org.apache.commons.collections4.map", "UnmodifiableMap", "public static <K, V> Map<K, V> unmodifiableMap(final Map<? extends K, ? extends V> map)" ], [ "listOrderedMap", "org.apache.commons.collections4.map", "ListOrderedMap", "public static <K, V> ListOrderedMap<K, V> listOrderedMap(final Map<K, V> map)" ], [ "unmodifiableEntrySet", "org.apache.commons.collections4.map", "UnmodifiableEntrySet", "public static <K, V> Set<Map.Entry<K, V>> unmodifiableEntrySet(final Set<Map.Entry<K, V>> set)" ], [ "resolve", "org.apache.commons.collections4.map", "AbstractReferenceMap", "public static ReferenceStrength resolve(final int value)" ], [ "resolve", "org.apache.commons.collections4.map", "ReferenceStrength", "public static ReferenceStrength resolve(final int value)" ], [ "multiKeyMap", "org.apache.commons.collections4.map", "MultiKeyMap", "public static <K, V> MultiKeyMap<K, V> multiKeyMap(final AbstractHashedMap<MultiKey<? extends K>, V> map)" ], [ "lazyMap", "org.apache.commons.collections4.map", "LazyMap", "public static <K, V> LazyMap<K, V> lazyMap(final Map<K, V> map, final Factory<? extends V> factory)" ], [ "lazyMap", "org.apache.commons.collections4.map", "LazyMap", "public static <V, K> LazyMap<K, V> lazyMap(final Map<K, V> map, final Transformer<? super K, ? extends V> factory)" ], [ "multiValueMap", "org.apache.commons.collections4.map", "MultiValueMap", "public static <K, V> MultiValueMap<K, V> multiValueMap(final Map<K, ? super Collection<V>> map)" ], [ "multiValueMap", "org.apache.commons.collections4.map", "MultiValueMap", "public static <K, V, C extends Collection<V>> MultiValueMap<K, V> multiValueMap(final Map<K, ? super C> map, final Class<C> collectionClass)" ], [ "multiValueMap", "org.apache.commons.collections4.map", "MultiValueMap", "public static <K, V, C extends Collection<V>> MultiValueMap<K, V> multiValueMap(final Map<K, ? super C> map, final Factory<C> collectionFactory)" ], [ "transformingMap", "org.apache.commons.collections4.map", "TransformedMap", "public static <K, V> TransformedMap<K, V> transformingMap(final Map<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "transformedMap", "org.apache.commons.collections4.map", "TransformedMap", "public static <K, V> TransformedMap<K, V> transformedMap(final Map<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "synchronizedMultiSet", "org.apache.commons.collections4", "MultiSetUtils", "public static <E> MultiSet<E> synchronizedMultiSet(final MultiSet<E> multiset)" ], [ "unmodifiableMultiSet", "org.apache.commons.collections4", "MultiSetUtils", "public static <E> MultiSet<E> unmodifiableMultiSet(final MultiSet<? extends E> multiset)" ], [ "predicatedMultiSet", "org.apache.commons.collections4", "MultiSetUtils", "public static <E> MultiSet<E> predicatedMultiSet(final MultiSet<E> multiset, final Predicate<? super E> predicate)" ], [ "emptyMultiSet", "org.apache.commons.collections4", "MultiSetUtils", "public static <E> MultiSet<E> emptyMultiSet()" ], [ "unmodifiableMultiValuedMap", "org.apache.commons.collections4.multimap", "UnmodifiableMultiValuedMap", "public static <K, V> UnmodifiableMultiValuedMap<K, V> unmodifiableMultiValuedMap(MultiValuedMap<? extends K, ? extends V> map)" ], [ "transformingMap", "org.apache.commons.collections4.multimap", "TransformedMultiValuedMap", "public static <K, V> TransformedMultiValuedMap<K, V> transformingMap(final MultiValuedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "transformedMap", "org.apache.commons.collections4.multimap", "TransformedMultiValuedMap", "public static <K, V> TransformedMultiValuedMap<K, V> transformedMap(final MultiValuedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "lazyList", "org.apache.commons.collections4.list", "LazyList", "public static <E> LazyList<E> lazyList(final List<E> list, final Factory<? extends E> factory)" ], [ "setUniqueList", "org.apache.commons.collections4.list", "SetUniqueList", "public static <E> SetUniqueList<E> setUniqueList(final List<E> list)" ], [ "unmodifiableList", "org.apache.commons.collections4.list", "UnmodifiableList", "public static <E> List<E> unmodifiableList(final List<? extends E> list)" ], [ "fixedSizeList", "org.apache.commons.collections4.list", "FixedSizeList", "public static <E> FixedSizeList<E> fixedSizeList(final List<E> list)" ], [ "transformingList", "org.apache.commons.collections4.list", "TransformedList", "public static <E> TransformedList<E> transformingList(final List<E> list, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedList", "org.apache.commons.collections4.list", "TransformedList", "public static <E> TransformedList<E> transformedList(final List<E> list, final Transformer<? super E, ? extends E> transformer)" ], [ "growthList", "org.apache.commons.collections4.list", "GrowthList", "public static <E> GrowthList<E> growthList(final List<E> list)" ], [ "predicatedList", "org.apache.commons.collections4.list", "PredicatedList", "public static <T> PredicatedList<T> predicatedList(final List<T> list, final Predicate<? super T> predicate)" ], [ "transformingQueue", "org.apache.commons.collections4.queue", "TransformedQueue", "public static <E> TransformedQueue<E> transformingQueue(final Queue<E> queue, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedQueue", "org.apache.commons.collections4.queue", "TransformedQueue", "public static <E> TransformedQueue<E> transformedQueue(final Queue<E> queue, final Transformer<? super E, ? extends E> transformer)" ], [ "unmodifiableQueue", "org.apache.commons.collections4.queue", "UnmodifiableQueue", "public static <E> Queue<E> unmodifiableQueue(final Queue<? extends E> queue)" ], [ "predicatedQueue", "org.apache.commons.collections4.queue", "PredicatedQueue", "public static <E> PredicatedQueue<E> predicatedQueue(final Queue<E> Queue, final Predicate<? super E> predicate)" ], [ "empty", "org.apache.commons.collections4", "FluentIterable", "public static <T> FluentIterable<T> empty()" ], [ "of", "org.apache.commons.collections4", "FluentIterable", "public static <T> FluentIterable<T> of(final T singleton)" ], [ "of", "org.apache.commons.collections4", "FluentIterable", "public static <T> FluentIterable<T> of(final T... elements)" ], [ "of", "org.apache.commons.collections4", "FluentIterable", "public static <T> FluentIterable<T> of(final Iterable<T> iterable)" ], [ "exceptionTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> exceptionTransformer()" ], [ "nullTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> nullTransformer()" ], [ "nopTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> nopTransformer()" ], [ "cloneTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> cloneTransformer()" ], [ "constantTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> constantTransformer(final O constantToReturn)" ], [ "asTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> asTransformer(final Closure<? super T> closure)" ], [ "asTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, Boolean> asTransformer(final Predicate<? super T> predicate)" ], [ "asTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> asTransformer(final Factory<? extends O> factory)" ], [ "chainedTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> chainedTransformer(final Transformer<? super T, ? extends T>... transformers)" ], [ "chainedTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> chainedTransformer(final Collection<? extends Transformer<? super T, ? extends T>> transformers)" ], [ "ifTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> ifTransformer(final Predicate<? super T> predicate, final Transformer<? super T, ? extends T> trueTransformer)" ], [ "ifTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> ifTransformer(final Predicate<? super I> predicate, final Transformer<? super I, ? extends O> trueTransformer, final Transformer<? super I, ? extends O> falseTransformer)" ], [ "switchTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> switchTransformer(final Predicate<? super I> predicate, final Transformer<? super I, ? extends O> trueTransformer, final Transformer<? super I, ? extends O> falseTransformer)" ], [ "switchTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> switchTransformer(final Predicate<? super I>[] predicates, final Transformer<? super I, ? extends O>[] transformers)" ], [ "switchTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> switchTransformer(final Predicate<? super I>[] predicates, final Transformer<? super I, ? extends O>[] transformers, final Transformer<? super I, ? extends O> defaultTransformer)" ], [ "switchTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> switchTransformer(final Map<Predicate<I>, Transformer<I, O>> predicatesAndTransformers)" ], [ "switchMapTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> switchMapTransformer(final Map<I, Transformer<I, O>> objectsAndTransformers)" ], [ "instantiateTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<Class<? extends T>, T> instantiateTransformer()" ], [ "instantiateTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<Class<? extends T>, T> instantiateTransformer(final Class<?>[] paramTypes, final Object[] args)" ], [ "mapTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> mapTransformer(final Map<? super I, ? extends O> map)" ], [ "invokerTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> invokerTransformer(final String methodName)" ], [ "invokerTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> invokerTransformer(final String methodName, final Class<?>[] paramTypes, final Object[] args)" ], [ "stringValueTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, String> stringValueTransformer()" ], [ "exceptionPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> exceptionPredicate()" ], [ "truePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> truePredicate()" ], [ "falsePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> falsePredicate()" ], [ "nullPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nullPredicate()" ], [ "notNullPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> notNullPredicate()" ], [ "equalPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> equalPredicate(final T value)" ], [ "identityPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> identityPredicate(final T value)" ], [ "instanceofPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static Predicate<Object> instanceofPredicate(final Class<?> type)" ], [ "uniquePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> uniquePredicate()" ], [ "invokerPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> invokerPredicate(final String methodName)" ], [ "invokerPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> invokerPredicate(final String methodName, final Class<?>[] paramTypes, final Object[] args)" ], [ "andPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> andPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "allPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> allPredicate(final Predicate<? super T>... predicates)" ], [ "allPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> allPredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "orPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> orPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "anyPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> anyPredicate(final Predicate<? super T>... predicates)" ], [ "anyPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> anyPredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "eitherPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> eitherPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "onePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> onePredicate(final Predicate<? super T>... predicates)" ], [ "onePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> onePredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "neitherPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> neitherPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "nonePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nonePredicate(final Predicate<? super T>... predicates)" ], [ "nonePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nonePredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "notPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> notPredicate(final Predicate<? super T> predicate)" ], [ "asPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> asPredicate(final Transformer<? super T, Boolean> transformer)" ], [ "nullIsExceptionPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nullIsExceptionPredicate(final Predicate<? super T> predicate)" ], [ "nullIsFalsePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nullIsFalsePredicate(final Predicate<? super T> predicate)" ], [ "nullIsTruePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nullIsTruePredicate(final Predicate<? super T> predicate)" ], [ "transformedPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> transformedPredicate(final Transformer<? super T, ? extends T> transformer, final Predicate<? super T> predicate)" ], [ "emptySet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> emptySet()" ], [ "emptySortedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> emptySortedSet()" ], [ "emptyIfNull", "org.apache.commons.collections4", "SetUtils", "public static <T> Set<T> emptyIfNull(final Set<T> set)" ], [ "isEqualSet", "org.apache.commons.collections4", "SetUtils", "public static boolean isEqualSet(final Collection<?> set1, final Collection<?> set2)" ], [ "hashCodeForSet", "org.apache.commons.collections4", "SetUtils", "public static <T> int hashCodeForSet(final Collection<T> set)" ], [ "newIdentityHashSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> newIdentityHashSet()" ], [ "synchronizedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> synchronizedSet(final Set<E> set)" ], [ "unmodifiableSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> unmodifiableSet(final Set<? extends E> set)" ], [ "predicatedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> predicatedSet(final Set<E> set, final Predicate<? super E> predicate)" ], [ "transformedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> transformedSet(final Set<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "orderedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> orderedSet(final Set<E> set)" ], [ "synchronizedSortedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> synchronizedSortedSet(final SortedSet<E> set)" ], [ "unmodifiableSortedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> unmodifiableSortedSet(final SortedSet<E> set)" ], [ "predicatedSortedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> predicatedSortedSet(final SortedSet<E> set, final Predicate<? super E> predicate)" ], [ "transformedSortedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> transformedSortedSet(final SortedSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "unmodifiableNavigableSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> unmodifiableNavigableSet(final NavigableSet<E> set)" ], [ "predicatedNavigableSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> predicatedNavigableSet(final NavigableSet<E> set, final Predicate<? super E> predicate)" ], [ "transformedNavigableSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> transformedNavigableSet(final NavigableSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "union", "org.apache.commons.collections4", "SetUtils", "public static <E> SetView<E> union(final Set<? extends E> a, final Set<? extends E> b)" ], [ "difference", "org.apache.commons.collections4", "SetUtils", "public static <E> SetView<E> difference(final Set<? extends E> a, final Set<? extends E> b)" ], [ "intersection", "org.apache.commons.collections4", "SetUtils", "public static <E> SetView<E> intersection(final Set<? extends E> a, final Set<? extends E> b)" ], [ "disjunction", "org.apache.commons.collections4", "SetUtils", "public static <E> SetView<E> disjunction(final Set<? extends E> a, final Set<? extends E> b)" ], [ "transformingSet", "org.apache.commons.collections4.set", "TransformedSet", "public static <E> TransformedSet<E> transformingSet(final Set<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedSet", "org.apache.commons.collections4.set", "TransformedSet", "public static <E> Set<E> transformedSet(final Set<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "transformingNavigableSet", "org.apache.commons.collections4.set", "TransformedNavigableSet", "public static <E> TransformedNavigableSet<E> transformingNavigableSet(final NavigableSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedNavigableSet", "org.apache.commons.collections4.set", "TransformedNavigableSet", "public static <E> TransformedNavigableSet<E> transformedNavigableSet(final NavigableSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "predicatedNavigableSet", "org.apache.commons.collections4.set", "PredicatedNavigableSet", "public static <E> PredicatedNavigableSet<E> predicatedNavigableSet(final NavigableSet<E> set, final Predicate<? super E> predicate)" ], [ "listOrderedSet", "org.apache.commons.collections4.set", "ListOrderedSet", "public static <E> ListOrderedSet<E> listOrderedSet(final Set<E> set, final List<E> list)" ], [ "listOrderedSet", "org.apache.commons.collections4.set", "ListOrderedSet", "public static <E> ListOrderedSet<E> listOrderedSet(final Set<E> set)" ], [ "listOrderedSet", "org.apache.commons.collections4.set", "ListOrderedSet", "public static <E> ListOrderedSet<E> listOrderedSet(final List<E> list)" ], [ "unmodifiableSet", "org.apache.commons.collections4.set", "UnmodifiableSet", "public static <E> Set<E> unmodifiableSet(final Set<? extends E> set)" ], [ "mapBackedSet", "org.apache.commons.collections4.set", "MapBackedSet", "public static <E, V> MapBackedSet<E, V> mapBackedSet(final Map<E, ? super V> map)" ], [ "mapBackedSet", "org.apache.commons.collections4.set", "MapBackedSet", "public static <E, V> MapBackedSet<E, V> mapBackedSet(final Map<E, ? super V> map, final V dummyValue)" ], [ "unmodifiableSortedSet", "org.apache.commons.collections4.set", "UnmodifiableSortedSet", "public static <E> SortedSet<E> unmodifiableSortedSet(final SortedSet<E> set)" ], [ "predicatedSortedSet", "org.apache.commons.collections4.set", "PredicatedSortedSet", "public static <E> PredicatedSortedSet<E> predicatedSortedSet(final SortedSet<E> set, final Predicate<? super E> predicate)" ], [ "predicatedSet", "org.apache.commons.collections4.set", "PredicatedSet", "public static <E> PredicatedSet<E> predicatedSet(final Set<E> set, final Predicate<? super E> predicate)" ], [ "unmodifiableNavigableSet", "org.apache.commons.collections4.set", "UnmodifiableNavigableSet", "public static <E> NavigableSet<E> unmodifiableNavigableSet(final NavigableSet<E> set)" ], [ "transformingSortedSet", "org.apache.commons.collections4.set", "TransformedSortedSet", "public static <E> TransformedSortedSet<E> transformingSortedSet(final SortedSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedSortedSet", "org.apache.commons.collections4.set", "TransformedSortedSet", "public static <E> TransformedSortedSet<E> transformedSortedSet(final SortedSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "get", "org.apache.commons.collections4", "EnumerationUtils", "public static <T> T get(final Enumeration<T> e, final int index)" ], [ "toList", "org.apache.commons.collections4", "EnumerationUtils", "public static <E> List<E> toList(final Enumeration<? extends E> enumeration)" ], [ "toList", "org.apache.commons.collections4", "EnumerationUtils", "public static List<String> toList(final StringTokenizer stringTokenizer)" ], [ "unmodifiableQueue", "org.apache.commons.collections4", "QueueUtils", "public static <E> Queue<E> unmodifiableQueue(final Queue<? extends E> queue)" ], [ "predicatedQueue", "org.apache.commons.collections4", "QueueUtils", "public static <E> Queue<E> predicatedQueue(final Queue<E> queue, final Predicate<? super E> predicate)" ], [ "transformingQueue", "org.apache.commons.collections4", "QueueUtils", "public static <E> Queue<E> transformingQueue(final Queue<E> queue, final Transformer<? super E, ? extends E> transformer)" ], [ "emptyQueue", "org.apache.commons.collections4", "QueueUtils", "public static <E> Queue<E> emptyQueue()" ], [ "synchronizedBag", "org.apache.commons.collections4.bag", "SynchronizedBag", "public static <E> SynchronizedBag<E> synchronizedBag(final Bag<E> bag)" ], [ "collectionBag", "org.apache.commons.collections4.bag", "CollectionBag", "public static <E> Bag<E> collectionBag(final Bag<E> bag)" ], [ "unmodifiableBag", "org.apache.commons.collections4.bag", "UnmodifiableBag", "public static <E> Bag<E> unmodifiableBag(final Bag<? extends E> bag)" ], [ "predicatedSortedBag", "org.apache.commons.collections4.bag", "PredicatedSortedBag", "public static <E> PredicatedSortedBag<E> predicatedSortedBag(final SortedBag<E> bag, final Predicate<? super E> predicate)" ], [ "unmodifiableSortedBag", "org.apache.commons.collections4.bag", "UnmodifiableSortedBag", "public static <E> SortedBag<E> unmodifiableSortedBag(final SortedBag<E> bag)" ], [ "transformingSortedBag", "org.apache.commons.collections4.bag", "TransformedSortedBag", "public static <E> TransformedSortedBag<E> transformingSortedBag(final SortedBag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedSortedBag", "org.apache.commons.collections4.bag", "TransformedSortedBag", "public static <E> TransformedSortedBag<E> transformedSortedBag(final SortedBag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "predicatedBag", "org.apache.commons.collections4.bag", "PredicatedBag", "public static <E> PredicatedBag<E> predicatedBag(final Bag<E> bag, final Predicate<? super E> predicate)" ], [ "synchronizedSortedBag", "org.apache.commons.collections4.bag", "SynchronizedSortedBag", "public static <E> SynchronizedSortedBag<E> synchronizedSortedBag(final SortedBag<E> bag)" ], [ "collectionSortedBag", "org.apache.commons.collections4.bag", "CollectionSortedBag", "public static <E> SortedBag<E> collectionSortedBag(final SortedBag<E> bag)" ], [ "transformingBag", "org.apache.commons.collections4.bag", "TransformedBag", "public static <E> Bag<E> transformingBag(final Bag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedBag", "org.apache.commons.collections4.bag", "TransformedBag", "public static <E> Bag<E> transformedBag(final Bag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "predicatedMultiSet", "org.apache.commons.collections4.multiset", "PredicatedMultiSet", "public static <E> PredicatedMultiSet<E> predicatedMultiSet(final MultiSet<E> multiset, final Predicate<? super E> predicate)" ], [ "unmodifiableMultiSet", "org.apache.commons.collections4.multiset", "UnmodifiableMultiSet", "public static <E> MultiSet<E> unmodifiableMultiSet(final MultiSet<? extends E> multiset)" ], [ "synchronizedMultiSet", "org.apache.commons.collections4.multiset", "SynchronizedMultiSet", "public static <E> SynchronizedMultiSet<E> synchronizedMultiSet(final MultiSet<E> multiset)" ], [ "synchronizedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> synchronizedBag(final Bag<E> bag)" ], [ "unmodifiableBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> unmodifiableBag(final Bag<? extends E> bag)" ], [ "predicatedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> predicatedBag(final Bag<E> bag, final Predicate<? super E> predicate)" ], [ "transformingBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> transformingBag(final Bag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "collectionBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> collectionBag(final Bag<E> bag)" ], [ "synchronizedSortedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> SortedBag<E> synchronizedSortedBag(final SortedBag<E> bag)" ], [ "unmodifiableSortedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> SortedBag<E> unmodifiableSortedBag(final SortedBag<E> bag)" ], [ "predicatedSortedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> SortedBag<E> predicatedSortedBag(final SortedBag<E> bag, final Predicate<? super E> predicate)" ], [ "transformingSortedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> SortedBag<E> transformingSortedBag(final SortedBag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "emptyBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> emptyBag()" ], [ "emptySortedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> SortedBag<E> emptySortedBag()" ], [ "resettableEmptyListIterator", "org.apache.commons.collections4.iterators", "EmptyListIterator", "public static <E> ResettableListIterator<E> resettableEmptyListIterator()" ], [ "emptyListIterator", "org.apache.commons.collections4.iterators", "EmptyListIterator", "public static <E> ListIterator<E> emptyListIterator()" ], [ "unmodifiableOrderedMapIterator", "org.apache.commons.collections4.iterators", "UnmodifiableOrderedMapIterator", "public static <K, V> OrderedMapIterator<K, V> unmodifiableOrderedMapIterator(final OrderedMapIterator<K, ? extends V> iterator)" ], [ "unmodifiableIterator", "org.apache.commons.collections4.iterators", "UnmodifiableIterator", "public static <E> Iterator<E> unmodifiableIterator(final Iterator<? extends E> iterator)" ], [ "peekingIterator", "org.apache.commons.collections4.iterators", "PeekingIterator", "public static <E> PeekingIterator<E> peekingIterator(final Iterator<? extends E> iterator)" ], [ "emptyMapIterator", "org.apache.commons.collections4.iterators", "EmptyMapIterator", "public static <K, V> MapIterator<K, V> emptyMapIterator()" ], [ "emptyOrderedIterator", "org.apache.commons.collections4.iterators", "EmptyOrderedIterator", "public static <E> OrderedIterator<E> emptyOrderedIterator()" ], [ "umodifiableListIterator", "org.apache.commons.collections4.iterators", "UnmodifiableListIterator", "public static <E> ListIterator<E> umodifiableListIterator(final ListIterator<? extends E> iterator)" ], [ "emptyOrderedMapIterator", "org.apache.commons.collections4.iterators", "EmptyOrderedMapIterator", "public static <K, V> OrderedMapIterator<K, V> emptyOrderedMapIterator()" ], [ "unmodifiableMapIterator", "org.apache.commons.collections4.iterators", "UnmodifiableMapIterator", "public static <K, V> MapIterator<K, V> unmodifiableMapIterator(final MapIterator<? extends K, ? extends V> iterator)" ], [ "resettableEmptyIterator", "org.apache.commons.collections4.iterators", "EmptyIterator", "public static <E> ResettableIterator<E> resettableEmptyIterator()" ], [ "emptyIterator", "org.apache.commons.collections4.iterators", "EmptyIterator", "public static <E> Iterator<E> emptyIterator()" ], [ "pushbackIterator", "org.apache.commons.collections4.iterators", "PushbackIterator", "public static <E> PushbackIterator<E> pushbackIterator(final Iterator<? extends E> iterator)" ], [ "readableMap", "org.apache.commons.collections4", "SplitMapUtils", "public static <K, V> IterableMap<K, V> readableMap(final Get<K, V> get)" ], [ "writableMap", "org.apache.commons.collections4", "SplitMapUtils", "public static <K, V> Map<K, V> writableMap(final Put<K, V> put)" ] ],
  "tokensProjectClassesNonPrivateStaticAttributes" : [ [ "EMPTY_ITERATOR", "org.apache.commons.collections4", "IteratorUtils", "public static final ResettableIterator EMPTY_ITERATOR = EmptyIterator.RESETTABLE_INSTANCE;" ], [ "EMPTY_LIST_ITERATOR", "org.apache.commons.collections4", "IteratorUtils", "public static final ResettableListIterator EMPTY_LIST_ITERATOR = EmptyListIterator.RESETTABLE_INSTANCE;" ], [ "EMPTY_ORDERED_ITERATOR", "org.apache.commons.collections4", "IteratorUtils", "public static final OrderedIterator EMPTY_ORDERED_ITERATOR = EmptyOrderedIterator.INSTANCE;" ], [ "EMPTY_MAP_ITERATOR", "org.apache.commons.collections4", "IteratorUtils", "public static final MapIterator EMPTY_MAP_ITERATOR = EmptyMapIterator.INSTANCE;" ], [ "EMPTY_ORDERED_MAP_ITERATOR", "org.apache.commons.collections4", "IteratorUtils", "public static final OrderedMapIterator EMPTY_ORDERED_MAP_ITERATOR = EmptyOrderedMapIterator.INSTANCE;" ], [ "NATURAL_COMPARATOR", "org.apache.commons.collections4", "ComparatorUtils", "public static final Comparator NATURAL_COMPARATOR = ComparableComparator.<Comparable>comparableComparator();" ], [ "EMPTY_MULTI_VALUED_MAP", "org.apache.commons.collections4", "MultiMapUtils", "public static final MultiValuedMap EMPTY_MULTI_VALUED_MAP = UnmodifiableMultiValuedMap.unmodifiableMultiValuedMap(new ArrayListValuedHashMap(0, 0));" ], [ "EMPTY_SORTED_MAP", "org.apache.commons.collections4", "MapUtils", "public static final SortedMap EMPTY_SORTED_MAP = UnmodifiableSortedMap.unmodifiableSortedMap(new TreeMap<Object, Object>());" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "DefaultEquator", "public static final DefaultEquator INSTANCE = new DefaultEquator<Object>();" ], [ "HASHCODE_NULL", "org.apache.commons.collections4.functors", "DefaultEquator", "public static final int HASHCODE_NULL = -1;" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "ExceptionClosure", "public static final Closure INSTANCE = new ExceptionClosure<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "NOPClosure", "public static final Closure INSTANCE = new NOPClosure<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "NullPredicate", "public static final Predicate INSTANCE = new NullPredicate<Object>();" ], [ "NULL_INSTANCE", "org.apache.commons.collections4.functors", "ConstantTransformer", "public static final Transformer NULL_INSTANCE = new ConstantTransformer<Object, Object>(null);" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "ExceptionTransformer", "public static final Transformer INSTANCE = new ExceptionTransformer<Object, Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "NOPTransformer", "public static final Transformer INSTANCE = new NOPTransformer<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "ExceptionFactory", "public static final Factory INSTANCE = new ExceptionFactory<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "ExceptionPredicate", "public static final Predicate INSTANCE = new ExceptionPredicate<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "FalsePredicate", "public static final Predicate INSTANCE = new FalsePredicate<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "CloneTransformer", "public static final Transformer INSTANCE = new CloneTransformer<Object>();" ], [ "NULL_INSTANCE", "org.apache.commons.collections4.functors", "ConstantFactory", "public static final Factory NULL_INSTANCE = new ConstantFactory<Object>(null);" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "TruePredicate", "public static final Predicate INSTANCE = new TruePredicate<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "NotNullPredicate", "public static final Predicate INSTANCE = new NotNullPredicate<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.comparators", "ComparableComparator", "public static final ComparableComparator INSTANCE = new ComparableComparator();" ], [ "EMPTY_COLLECTION", "org.apache.commons.collections4", "CollectionUtils", "public static final Collection EMPTY_COLLECTION = UnmodifiableCollection.unmodifiableCollection(new ArrayList<Object>());" ], [ "EMPTY_ITERABLE", "org.apache.commons.collections4", "IterableUtils", "static final FluentIterable EMPTY_ITERABLE = new FluentIterable<Object>() {\n\n    @Override\n    public Iterator<Object> iterator() {\n        return IteratorUtils.emptyIterator();\n    }\n};" ], [ "NULL_BIT_KEY", "org.apache.commons.collections4.trie", "KeyAnalyzer", "public static final int NULL_BIT_KEY = -1;" ], [ "EQUAL_BIT_KEY", "org.apache.commons.collections4.trie", "KeyAnalyzer", "public static final int EQUAL_BIT_KEY = -2;" ], [ "OUT_OF_BOUNDS_BIT_KEY", "org.apache.commons.collections4.trie", "KeyAnalyzer", "public static final int OUT_OF_BOUNDS_BIT_KEY = -3;" ], [ "INSTANCE", "org.apache.commons.collections4.trie.analyzer", "StringKeyAnalyzer", "public static final StringKeyAnalyzer INSTANCE = new StringKeyAnalyzer();" ], [ "LENGTH", "org.apache.commons.collections4.trie.analyzer", "StringKeyAnalyzer", "public static final int LENGTH = Character.SIZE;" ], [ "NO_NEXT_ENTRY", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String NO_NEXT_ENTRY = \"No next() entry in the iteration\";" ], [ "NO_PREVIOUS_ENTRY", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String NO_PREVIOUS_ENTRY = \"No previous() entry in the iteration\";" ], [ "REMOVE_INVALID", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String REMOVE_INVALID = \"remove() can only be called once after next()\";" ], [ "GETKEY_INVALID", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String GETKEY_INVALID = \"getKey() can only be called after next() and before remove()\";" ], [ "GETVALUE_INVALID", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String GETVALUE_INVALID = \"getValue() can only be called after next() and before remove()\";" ], [ "SETVALUE_INVALID", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String SETVALUE_INVALID = \"setValue() can only be called after next() and before remove()\";" ], [ "DEFAULT_CAPACITY", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final int DEFAULT_CAPACITY = 16;" ], [ "DEFAULT_THRESHOLD", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final int DEFAULT_THRESHOLD = 12;" ], [ "DEFAULT_LOAD_FACTOR", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final float DEFAULT_LOAD_FACTOR = 0.75f;" ], [ "MAXIMUM_CAPACITY", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final int MAXIMUM_CAPACITY = 1 << 30;" ], [ "NULL", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final Object NULL = new Object();" ], [ "DEFAULT_MAX_SIZE", "org.apache.commons.collections4.map", "LRUMap", "protected static final int DEFAULT_MAX_SIZE = 100;" ], [ "EMPTY_MULTISET", "org.apache.commons.collections4", "MultiSetUtils", "public static final MultiSet EMPTY_MULTISET = UnmodifiableMultiSet.unmodifiableMultiSet(new HashMultiSet<Object>());" ], [ "EMPTY_SORTED_SET", "org.apache.commons.collections4", "SetUtils", "public static final SortedSet EMPTY_SORTED_SET = UnmodifiableSortedSet.unmodifiableSortedSet(new TreeSet<Object>());" ], [ "EMPTY_QUEUE", "org.apache.commons.collections4", "QueueUtils", "public static final Queue EMPTY_QUEUE = UnmodifiableQueue.unmodifiableQueue(new LinkedList<Object>());" ], [ "EMPTY_BAG", "org.apache.commons.collections4", "BagUtils", "public static final Bag EMPTY_BAG = UnmodifiableBag.unmodifiableBag(new HashBag<Object>());" ], [ "EMPTY_SORTED_BAG", "org.apache.commons.collections4", "BagUtils", "public static final Bag EMPTY_SORTED_BAG = UnmodifiableSortedBag.unmodifiableSortedBag(new TreeBag<Object>());" ], [ "RESETTABLE_INSTANCE", "org.apache.commons.collections4.iterators", "EmptyListIterator", "public static final ResettableListIterator RESETTABLE_INSTANCE = new EmptyListIterator<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.iterators", "EmptyListIterator", "public static final ListIterator INSTANCE = RESETTABLE_INSTANCE;" ], [ "INSTANCE", "org.apache.commons.collections4.iterators", "EmptyMapIterator", "public static final MapIterator INSTANCE = new EmptyMapIterator<Object, Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.iterators", "EmptyOrderedIterator", "public static final OrderedIterator INSTANCE = new EmptyOrderedIterator<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.iterators", "EmptyOrderedMapIterator", "public static final OrderedMapIterator INSTANCE = new EmptyOrderedMapIterator<Object, Object>();" ], [ "RESETTABLE_INSTANCE", "org.apache.commons.collections4.iterators", "EmptyIterator", "public static final ResettableIterator RESETTABLE_INSTANCE = new EmptyIterator<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.iterators", "EmptyIterator", "public static final Iterator INSTANCE = RESETTABLE_INSTANCE;" ] ],
  "tokensMethodJavadocValues" : [ [ "0", "int" ], [ "0", "int" ] ],
  "tokensMethodArguments" : [ [ "predicates", "", "Predicate<? super I>[]" ], [ "transformers", "", "Transformer<? super I, ? extends O>[]" ], [ "defaultTransformer", "org.apache.commons.collections4.Transformer", "Transformer<? super I, ? extends O>" ] ],
  "tokensMethodVariablesNonPrivateNonStaticNonVoidMethods" : [ [ "clone", "java.lang", "Object", "protected native Object clone() throws CloneNotSupportedException" ], [ "getClass", "java.lang", "Object", "public final native Class<? extends Object> getClass()" ], [ "toString", "java.lang", "Object", "public String toString()" ], [ "equals", "java.lang", "Object", "public boolean equals(Object arg0)" ], [ "hashCode", "java.lang", "Object", "public native int hashCode()" ], [ "equals", "", "org.apache.commons.collections4.Predicate<? super I>[]", "public boolean equals(Object);" ], [ "toString", "", "org.apache.commons.collections4.Predicate<? super I>[]", "public String toString()" ], [ "hashCode", "", "org.apache.commons.collections4.Predicate<? super I>[]", "public native int hashCode()" ], [ "getClass", "", "org.apache.commons.collections4.Predicate<? super I>[]", "public final native Class getClass();" ], [ "clone", "", "org.apache.commons.collections4.Predicate<? super I>[]", "public T[] clone();" ], [ "equals", "", "org.apache.commons.collections4.Transformer<? super I, ? extends O>[]", "public boolean equals(Object);" ], [ "toString", "", "org.apache.commons.collections4.Transformer<? super I, ? extends O>[]", "public String toString()" ], [ "hashCode", "", "org.apache.commons.collections4.Transformer<? super I, ? extends O>[]", "public native int hashCode()" ], [ "getClass", "", "org.apache.commons.collections4.Transformer<? super I, ? extends O>[]", "public final native Class getClass();" ], [ "clone", "", "org.apache.commons.collections4.Transformer<? super I, ? extends O>[]", "public T[] clone();" ], [ "transform", "org.apache.commons.collections4", "Transformer", "public abstract O transform(I arg0)" ] ],
  "tokensMethodVariablesNonPrivateNonStaticAttributes" : [ [ "length", "org.apache.commons.collections4", "Predicate[]", "public final int length;" ], [ "length", "org.apache.commons.collections4", "Transformer[]", "public final int length;" ] ],
  "tokensOracleVariablesNonPrivateNonStaticNonVoidMethods" : [ ],
  "tokensOracleVariablesNonPrivateNonStaticAttributes" : [ ]
}, {
  "id" : 8964,
  "oracle" : ";",
  "oracleType" : "EXCEPT_POST",
  "projectName" : "commons-collections4-4.1",
  "packageName" : "org.apache.commons.collections4",
  "className" : "TransformerUtils",
  "javadocTag" : "@throws IllegalArgumentException if the arrays have different sizes",
  "methodJavadoc" : "    /**\n     * Create a new Transformer that calls one of the transformers depending\n     * on the predicates. The transformer at array location 0 is called if the\n     * predicate at array location 0 returned true. Each predicate is evaluated\n     * until one returns true. If no predicates evaluate to true, the default\n     * transformer is called. If the default transformer is null, null is returned.\n     *\n     * @param <I>  the input type\n     * @param <O>  the output type\n     * @param predicates  an array of predicates to check\n     * @param transformers  an array of transformers to call\n     * @param defaultTransformer  the default to call if no predicate matches, null means return null\n     * @return the transformer\n     * @throws NullPointerException if the either array is null\n     * @throws NullPointerException if any element in the arrays is null\n     * @throws IllegalArgumentException if the arrays have different sizes\n     * @see SwitchTransformer\n     */",
  "methodSourceCode" : "public static <I, O> Transformer<I, O> switchTransformer(final Predicate<? super I>[] predicates, final Transformer<? super I, ? extends O>[] transformers, final Transformer<? super I, ? extends O> defaultTransformer){\n    return SwitchTransformer.switchTransformer(predicates, transformers, defaultTransformer);\n}",
  "classJavadoc" : "/**\n * <code>TransformerUtils</code> provides reference implementations and\n * utilities for the Transformer functor interface. The supplied transformers are:\n * <ul>\n * <li>Invoker - returns the result of a method call on the input object\n * <li>Clone - returns a clone of the input object\n * <li>Constant - always returns the same object\n * <li>Closure - performs a Closure and returns the input object\n * <li>Predicate - returns the result of the predicate as a Boolean\n * <li>Factory - returns a new object from a factory\n * <li>Chained - chains two or more transformers together\n * <li>If - calls one transformer or another based on a predicate\n * <li>Switch - calls one transformer based on one or more predicates\n * <li>SwitchMap - calls one transformer looked up from a Map\n * <li>Instantiate - the Class input object is instantiated\n * <li>Map - returns an object from a supplied Map\n * <li>Null - always returns null\n * <li>NOP - returns the input object, which should be immutable\n * <li>Exception - always throws an exception\n * <li>StringValue - returns a <code>java.lang.String</code> representation of the input object\n * </ul>\n * <p>\n * Since v4.1 only transformers which are considered to be unsafe are\n * Serializable. Transformers considered to be unsafe for serialization are:\n * <ul>\n * <li>Invoker\n * <li>Clone\n * <li>Instantiate\n * </ul>\n *\n * @since 3.0\n * @version $Id: TransformerUtils.java 1714362 2015-11-14 20:38:02Z tn $\n */",
  "classSourceCode" : "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.commons.collections4;\n\nimport java.util.Collection;\nimport java.util.Map;\n\nimport org.apache.commons.collections4.functors.ChainedTransformer;\nimport org.apache.commons.collections4.functors.CloneTransformer;\nimport org.apache.commons.collections4.functors.ClosureTransformer;\nimport org.apache.commons.collections4.functors.ConstantTransformer;\nimport org.apache.commons.collections4.functors.EqualPredicate;\nimport org.apache.commons.collections4.functors.ExceptionTransformer;\nimport org.apache.commons.collections4.functors.FactoryTransformer;\nimport org.apache.commons.collections4.functors.IfTransformer;\nimport org.apache.commons.collections4.functors.InstantiateTransformer;\nimport org.apache.commons.collections4.functors.InvokerTransformer;\nimport org.apache.commons.collections4.functors.MapTransformer;\nimport org.apache.commons.collections4.functors.NOPTransformer;\nimport org.apache.commons.collections4.functors.PredicateTransformer;\nimport org.apache.commons.collections4.functors.StringValueTransformer;\nimport org.apache.commons.collections4.functors.SwitchTransformer;\n\n/**\n * <code>TransformerUtils</code> provides reference implementations and\n * utilities for the Transformer functor interface. The supplied transformers are:\n * <ul>\n * <li>Invoker - returns the result of a method call on the input object\n * <li>Clone - returns a clone of the input object\n * <li>Constant - always returns the same object\n * <li>Closure - performs a Closure and returns the input object\n * <li>Predicate - returns the result of the predicate as a Boolean\n * <li>Factory - returns a new object from a factory\n * <li>Chained - chains two or more transformers together\n * <li>If - calls one transformer or another based on a predicate\n * <li>Switch - calls one transformer based on one or more predicates\n * <li>SwitchMap - calls one transformer looked up from a Map\n * <li>Instantiate - the Class input object is instantiated\n * <li>Map - returns an object from a supplied Map\n * <li>Null - always returns null\n * <li>NOP - returns the input object, which should be immutable\n * <li>Exception - always throws an exception\n * <li>StringValue - returns a <code>java.lang.String</code> representation of the input object\n * </ul>\n * <p>\n * Since v4.1 only transformers which are considered to be unsafe are\n * Serializable. Transformers considered to be unsafe for serialization are:\n * <ul>\n * <li>Invoker\n * <li>Clone\n * <li>Instantiate\n * </ul>\n *\n * @since 3.0\n * @version $Id: TransformerUtils.java 1714362 2015-11-14 20:38:02Z tn $\n */\npublic class TransformerUtils {\n\n    /**\n     * This class is not normally instantiated.\n     */\n    private TransformerUtils() {}\n\n    /**\n     * Gets a transformer that always throws an exception.\n     * This could be useful during testing as a placeholder.\n     *\n     * @param <I>  the input type\n     * @param <O>  the output type\n     * @return the transformer\n     * @see ExceptionTransformer\n     */\n    public static <I, O> Transformer<I, O> exceptionTransformer() {\n        return ExceptionTransformer.exceptionTransformer();\n    }\n\n    /**\n     * Gets a transformer that always returns null.\n     *\n     * @param <I>  the input type\n     * @param <O>  the output type\n     * @return the transformer\n     * @see ConstantTransformer\n     */\n    public static <I, O> Transformer<I, O> nullTransformer() {\n        return ConstantTransformer.nullTransformer();\n    }\n\n    /**\n     * Gets a transformer that returns the input object.\n     * The input object should be immutable to maintain the\n     * contract of Transformer (although this is not checked).\n     *\n     * @param <T>  the input/output type\n     * @return the transformer\n     * @see NOPTransformer\n     */\n    public static <T> Transformer<T, T> nopTransformer() {\n        return NOPTransformer.nopTransformer();\n    }\n\n    /**\n     * Gets a transformer that returns a clone of the input object.\n     * The input object will be cloned using one of these techniques (in order):\n     * <ul>\n     * <li>public clone method\n     * <li>public copy constructor\n     * <li>serialization clone\n     * <ul>\n     *\n     * @param <T>  the input/output type\n     * @return the transformer\n     * @see CloneTransformer\n     */\n    public static <T> Transformer<T, T> cloneTransformer() {\n        return CloneTransformer.cloneTransformer();\n    }\n\n    /**\n     * Creates a Transformer that will return the same object each time the\n     * transformer is used.\n     *\n     * @param <I>  the input type\n     * @param <O>  the output type\n     * @param constantToReturn  the constant object to return each time in the transformer\n     * @return the transformer.\n     * @see ConstantTransformer\n     */\n    public static <I, O> Transformer<I, O> constantTransformer(final O constantToReturn) {\n        return ConstantTransformer.constantTransformer(constantToReturn);\n    }\n\n    /**\n     * Creates a Transformer that calls a Closure each time the transformer is used.\n     * The transformer returns the input object.\n     *\n     * @param <T>  the input/output type\n     * @param closure  the closure to run each time in the transformer, not null\n     * @return the transformer\n     * @throws NullPointerException if the closure is null\n     * @see ClosureTransformer\n     */\n    public static <T> Transformer<T, T> asTransformer(final Closure<? super T> closure) {\n        return ClosureTransformer.closureTransformer(closure);\n    }\n\n    /**\n     * Creates a Transformer that calls a Predicate each time the transformer is used.\n     * The transformer will return either Boolean.TRUE or Boolean.FALSE.\n     *\n     * @param <T>  the input type\n     * @param predicate  the predicate to run each time in the transformer, not null\n     * @return the transformer\n     * @throws NullPointerException if the predicate is null\n     * @see PredicateTransformer\n     */\n    public static <T> Transformer<T, Boolean> asTransformer(final Predicate<? super T> predicate) {\n        return PredicateTransformer.predicateTransformer(predicate);\n    }\n\n    /**\n     * Creates a Transformer that calls a Factory each time the transformer is used.\n     * The transformer will return the value returned by the factory.\n     *\n     * @param <I>  the input type\n     * @param <O>  the output type\n     * @param factory  the factory to run each time in the transformer, not null\n     * @return the transformer\n     * @throws NullPointerException if the factory is null\n     * @see FactoryTransformer\n     */\n    public static <I, O> Transformer<I, O> asTransformer(final Factory<? extends O> factory) {\n        return FactoryTransformer.factoryTransformer(factory);\n    }\n\n    /**\n     * Create a new Transformer that calls each transformer in turn, passing the\n     * result into the next transformer.\n     *\n     * @param <T>  the input/output type\n     * @param transformers  an array of transformers to chain\n     * @return the transformer\n     * @throws NullPointerException if the transformers array or any of the transformers is null\n     * @see ChainedTransformer\n     */\n    public static <T> Transformer<T, T> chainedTransformer(\n            final Transformer<? super T, ? extends T>... transformers) {\n        return ChainedTransformer.chainedTransformer(transformers);\n    }\n\n    /**\n     * Create a new Transformer that calls each transformer in turn, passing the\n     * result into the next transformer. The ordering is that of the iterator()\n     * method on the collection.\n     *\n     * @param <T>  the input/output type\n     * @param transformers  a collection of transformers to chain\n     * @return the transformer\n     * @throws NullPointerException if the transformers collection or any of the transformers is null\n     * @see ChainedTransformer\n     */\n    public static <T> Transformer<T, T> chainedTransformer(\n            final Collection<? extends Transformer<? super T, ? extends T>> transformers) {\n        return ChainedTransformer.chainedTransformer(transformers);\n    }\n\n    /**\n     * Create a new Transformer that calls the transformer if the predicate is true,\n     * otherwise the input object is returned unchanged.\n     *\n     * @param <T>  the input / output type\n     * @param predicate  the predicate to switch on\n     * @param trueTransformer  the transformer called if the predicate is true\n     * @return the transformer\n     * @throws NullPointerException if either the predicate or transformer is null\n     * @see IfTransformer\n     * @since 4.1\n     */\n    public static <T> Transformer<T, T> ifTransformer(final Predicate<? super T> predicate,\n                                                      final Transformer<? super T, ? extends T> trueTransformer) {\n        return IfTransformer.ifTransformer(predicate, trueTransformer);\n    }\n\n    /**\n     * Create a new Transformer that calls one of two transformers depending\n     * on the specified predicate.\n     *\n     * @param <I>  the input type\n     * @param <O>  the output type\n     * @param predicate  the predicate to switch on\n     * @param trueTransformer  the transformer called if the predicate is true\n     * @param falseTransformer  the transformer called if the predicate is false\n     * @return the transformer\n     * @throws NullPointerException if either the predicate or transformer is null\n     * @see IfTransformer\n     * @since 4.1\n     */\n    public static <I, O> Transformer<I, O> ifTransformer(final Predicate<? super I> predicate,\n                                                         final Transformer<? super I, ? extends O> trueTransformer,\n                                                         final Transformer<? super I, ? extends O> falseTransformer) {\n        return IfTransformer.ifTransformer(predicate, trueTransformer, falseTransformer);\n    }\n\n    /**\n     * Create a new Transformer that calls one of two transformers depending\n     * on the specified predicate.\n     *\n     * @param <I>  the input type\n     * @param <O>  the output type\n     * @param predicate  the predicate to switch on\n     * @param trueTransformer  the transformer called if the predicate is true\n     * @param falseTransformer  the transformer called if the predicate is false\n     * @return the transformer\n     * @throws NullPointerException if either the predicate or transformer is null\n     * @see SwitchTransformer\n     * @deprecated as of 4.1, use {@link #ifTransformer(Predicate, Transformer, Transformer))\n     */\n    @SuppressWarnings(\"unchecked\")\n    @Deprecated\n    public static <I, O> Transformer<I, O> switchTransformer(final Predicate<? super I> predicate,\n            final Transformer<? super I, ? extends O> trueTransformer,\n            final Transformer<? super I, ? extends O> falseTransformer) {\n        return SwitchTransformer.switchTransformer(new Predicate[] { predicate },\n                                                   new Transformer[] { trueTransformer }, falseTransformer);\n    }\n\n    /**\n     * Create a new Transformer that calls one of the transformers depending\n     * on the predicates. The transformer at array location 0 is called if the\n     * predicate at array location 0 returned true. Each predicate is evaluated\n     * until one returns true. If no predicates evaluate to true, null is returned.\n     *\n     * @param <I>  the input type\n     * @param <O>  the output type\n     * @param predicates  an array of predicates to check\n     * @param transformers  an array of transformers to call\n     * @return the transformer\n     * @throws NullPointerException if the either array is null\n     * @throws NullPointerException if any element in the arrays is null\n     * @throws IllegalArgumentException if the arrays have different sizes\n     * @see SwitchTransformer\n     */\n    public static <I, O> Transformer<I, O> switchTransformer(final Predicate<? super I>[] predicates,\n            final Transformer<? super I, ? extends O>[] transformers) {\n        return SwitchTransformer.switchTransformer(predicates, transformers, null);\n    }\n\n    /**\n     * Create a new Transformer that calls one of the transformers depending\n     * on the predicates. The transformer at array location 0 is called if the\n     * predicate at array location 0 returned true. Each predicate is evaluated\n     * until one returns true. If no predicates evaluate to true, the default\n     * transformer is called. If the default transformer is null, null is returned.\n     *\n     * @param <I>  the input type\n     * @param <O>  the output type\n     * @param predicates  an array of predicates to check\n     * @param transformers  an array of transformers to call\n     * @param defaultTransformer  the default to call if no predicate matches, null means return null\n     * @return the transformer\n     * @throws NullPointerException if the either array is null\n     * @throws NullPointerException if any element in the arrays is null\n     * @throws IllegalArgumentException if the arrays have different sizes\n     * @see SwitchTransformer\n     */\n    public static <I, O> Transformer<I, O> switchTransformer(final Predicate<? super I>[] predicates,\n            final Transformer<? super I, ? extends O>[] transformers,\n            final Transformer<? super I, ? extends O> defaultTransformer) {\n        return SwitchTransformer.switchTransformer(predicates, transformers, defaultTransformer);\n    }\n\n    /**\n     * Create a new Transformer that calls one of the transformers depending\n     * on the predicates.\n     * <p>\n     * The Map consists of Predicate keys and Transformer values. A transformer\n     * is called if its matching predicate returns true. Each predicate is evaluated\n     * until one returns true. If no predicates evaluate to true, the default\n     * transformer is called. The default transformer is set in the map with a\n     * null key. If no default transformer is set, null will be returned in a default\n     * case. The ordering is that of the iterator() method on the entryset collection\n     * of the map.\n     *\n     * @param <I>  the input type\n     * @param <O>  the output type\n     * @param predicatesAndTransformers  a map of predicates to transformers\n     * @return the transformer\n     * @throws NullPointerException if the map is null\n     * @throws NullPointerException if any transformer in the map is null\n     * @throws ClassCastException  if the map elements are of the wrong type\n     * @see SwitchTransformer\n     */\n    public static <I, O> Transformer<I, O> switchTransformer(\n            final Map<Predicate<I>, Transformer<I, O>> predicatesAndTransformers) {\n        return SwitchTransformer.switchTransformer(predicatesAndTransformers);\n    }\n\n    /**\n     * Create a new Transformer that uses the input object as a key to find the\n     * transformer to call.\n     * <p>\n     * The Map consists of object keys and Transformer values. A transformer\n     * is called if the input object equals the key. If there is no match, the\n     * default transformer is called. The default transformer is set in the map\n     * using a null key. If no default is set, null will be returned in a default case.\n     *\n     * @param <I>  the input type\n     * @param <O>  the output type\n     * @param objectsAndTransformers  a map of objects to transformers\n     * @return the transformer\n     * @throws NullPointerException if the map is null\n     * @throws NullPointerException if any transformer in the map is null\n     * @see SwitchTransformer\n     */\n    @SuppressWarnings(\"unchecked\")\n    public static <I, O> Transformer<I, O> switchMapTransformer(\n            final Map<I, Transformer<I, O>> objectsAndTransformers) {\n\n        if (objectsAndTransformers == null) {\n            throw new NullPointerException(\"The object and transformer map must not be null\");\n        }\n        final Transformer<? super I, ? extends O> def = objectsAndTransformers.remove(null);\n        final int size = objectsAndTransformers.size();\n        final Transformer<? super I, ? extends O>[] trs = new Transformer[size];\n        final Predicate<I>[] preds = new Predicate[size];\n        int i = 0;\n        for (final Map.Entry<I, Transformer<I, O>> entry : objectsAndTransformers.entrySet()) {\n            preds[i] = EqualPredicate.<I>equalPredicate(entry.getKey());\n            trs[i++] = entry.getValue();\n        }\n        return TransformerUtils.switchTransformer(preds, trs, def);\n    }\n\n    /**\n     * Gets a Transformer that expects an input Class object that it will instantiate.\n     *\n     * @param <T>  the output type\n     * @return the transformer\n     * @see InstantiateTransformer\n     */\n    public static <T> Transformer<Class<? extends T>, T> instantiateTransformer() {\n        return InstantiateTransformer.instantiateTransformer();\n    }\n\n    /**\n     * Creates a Transformer that expects an input Class object that it will\n     * instantiate. The constructor used is determined by the arguments specified\n     * to this method.\n     *\n     * @param <T>  the output type\n     * @param paramTypes  parameter types for the constructor, can be null\n     * @param args  the arguments to pass to the constructor, can be null\n     * @return the transformer\n     * @throws IllegalArgumentException if the paramTypes and args don't match\n     * @see InstantiateTransformer\n     */\n    public static <T> Transformer<Class<? extends T>, T> instantiateTransformer(\n            final Class<?>[] paramTypes, final Object[] args) {\n        return InstantiateTransformer.instantiateTransformer(paramTypes, args);\n    }\n\n    /**\n     * Creates a Transformer that uses the passed in Map to transform the input\n     * object (as a simple lookup).\n     *\n     * @param <I>  the input type\n     * @param <O>  the output type\n     * @param map  the map to use to transform the objects\n     * @return the transformer, or {@link ConstantTransformer#nullTransformer()} if the\n     *   {@code map} is {@code null}\n     * @see MapTransformer\n     */\n    public static <I, O> Transformer<I, O> mapTransformer(final Map<? super I, ? extends O> map) {\n        return MapTransformer.mapTransformer(map);\n    }\n\n    /**\n     * Gets a Transformer that invokes a method on the input object.\n     * The method must have no parameters. If the input object is null,\n     * null is returned.\n     * <p>\n     * For example, <code>TransformerUtils.invokerTransformer(\"getName\");</code>\n     * will call the <code>getName/code> method on the input object to\n     * determine the transformer result.\n     *\n     * @param <I>  the input type\n     * @param <O>  the output type\n     * @param methodName  the method name to call on the input object, may not be null\n     * @return the transformer\n     * @throws NullPointerException if the methodName is null.\n     * @see InvokerTransformer\n     */\n    public static <I, O> Transformer<I, O> invokerTransformer(final String methodName) {\n        return InvokerTransformer.invokerTransformer(methodName, null, null);\n    }\n\n    /**\n     * Gets a Transformer that invokes a method on the input object.\n     * The method parameters are specified. If the input object is {@code null},\n     * {@code null} is returned.\n     *\n     * @param <I>  the input type\n     * @param <O>  the output type\n     * @param methodName  the name of the method\n     * @param paramTypes  the parameter types\n     * @param args  the arguments\n     * @return the transformer\n     * @throws NullPointerException if the method name is null\n     * @throws IllegalArgumentException if the paramTypes and args don't match\n     * @see InvokerTransformer\n     */\n    public static <I, O> Transformer<I, O> invokerTransformer(final String methodName, final Class<?>[] paramTypes,\n                                                              final Object[] args) {\n        return InvokerTransformer.invokerTransformer(methodName, paramTypes, args);\n    }\n\n    /**\n     * Gets a transformer that returns a <code>java.lang.String</code>\n     * representation of the input object. This is achieved via the\n     * <code>toString</code> method, <code>null</code> returns 'null'.\n     *\n     * @param <T>  the input type\n     * @return the transformer\n     * @see StringValueTransformer\n     */\n    public static <T> Transformer<T, String> stringValueTransformer() {\n        return StringValueTransformer.stringValueTransformer();\n    }\n\n}\n",
  "tokensGeneralGrammar" : [ "null", "true", "false", ",", ".", ":", ";", "?", "(", ")", "jdVar", "stream", "Arrays", "allMatch", "noneMatch", "anyMatch", "~", ">>", "<<", ">>>", "|", "&", "^", "+", "-", "/", "*", "%", "&&", "||", ">=", "<=", ">", "<", "==", "!=", "instanceof", "class", "methodResultID", "this" ],
  "tokensGeneralValuesGlobalDictionary" : [ [ "0", "int" ], [ "1", "int" ], [ "-1", "int" ], [ "0.0", "double" ], [ "1.0", "double" ], [ "-1.0", "double" ], [ "\"\"", "String" ], [ "\" \"", "String" ] ],
  "tokensProjectClasses" : [ [ "BidiMap", "org.apache.commons.collections4" ], [ "Equator", "org.apache.commons.collections4" ], [ "MultiSet", "org.apache.commons.collections4" ], [ "IteratorUtils", "org.apache.commons.collections4" ], [ "ComparatorUtils", "org.apache.commons.collections4" ], [ "FunctorException", "org.apache.commons.collections4" ], [ "AbstractDualBidiMap", "org.apache.commons.collections4.bidimap" ], [ "UnmodifiableBidiMap", "org.apache.commons.collections4.bidimap" ], [ "AbstractOrderedBidiMapDecorator", "org.apache.commons.collections4.bidimap" ], [ "UnmodifiableOrderedBidiMap", "org.apache.commons.collections4.bidimap" ], [ "AbstractBidiMapDecorator", "org.apache.commons.collections4.bidimap" ], [ "DualLinkedHashBidiMap", "org.apache.commons.collections4.bidimap" ], [ "UnmodifiableSortedBidiMap", "org.apache.commons.collections4.bidimap" ], [ "AbstractSortedBidiMapDecorator", "org.apache.commons.collections4.bidimap" ], [ "DualHashBidiMap", "org.apache.commons.collections4.bidimap" ], [ "DualTreeBidiMap", "org.apache.commons.collections4.bidimap" ], [ "TreeBidiMap", "org.apache.commons.collections4.bidimap" ], [ "MultiMapUtils", "org.apache.commons.collections4" ], [ "BoundedCollection", "org.apache.commons.collections4" ], [ "UnmodifiableBoundedCollection", "org.apache.commons.collections4.collection" ], [ "CompositeCollection", "org.apache.commons.collections4.collection" ], [ "TransformedCollection", "org.apache.commons.collections4.collection" ], [ "PredicatedCollection", "org.apache.commons.collections4.collection" ], [ "IndexedCollection", "org.apache.commons.collections4.collection" ], [ "SynchronizedCollection", "org.apache.commons.collections4.collection" ], [ "UnmodifiableCollection", "org.apache.commons.collections4.collection" ], [ "AbstractCollectionDecorator", "org.apache.commons.collections4.collection" ], [ "OrderedBidiMap", "org.apache.commons.collections4" ], [ "FactoryUtils", "org.apache.commons.collections4" ], [ "IterableGet", "org.apache.commons.collections4" ], [ "ListUtils", "org.apache.commons.collections4" ], [ "Closure", "org.apache.commons.collections4" ], [ "IterableSortedMap", "org.apache.commons.collections4" ], [ "MapUtils", "org.apache.commons.collections4" ], [ "Transformer", "org.apache.commons.collections4" ], [ "DefaultEquator", "org.apache.commons.collections4.functors" ], [ "StringValueTransformer", "org.apache.commons.collections4.functors" ], [ "PredicateDecorator", "org.apache.commons.collections4.functors" ], [ "IfTransformer", "org.apache.commons.collections4.functors" ], [ "IdentityPredicate", "org.apache.commons.collections4.functors" ], [ "ExceptionClosure", "org.apache.commons.collections4.functors" ], [ "NOPClosure", "org.apache.commons.collections4.functors" ], [ "ClosureTransformer", "org.apache.commons.collections4.functors" ], [ "FunctorUtils", "org.apache.commons.collections4.functors" ], [ "TransformerPredicate", "org.apache.commons.collections4.functors" ], [ "NullPredicate", "org.apache.commons.collections4.functors" ], [ "ConstantTransformer", "org.apache.commons.collections4.functors" ], [ "PredicateTransformer", "org.apache.commons.collections4.functors" ], [ "WhileClosure", "org.apache.commons.collections4.functors" ], [ "ForClosure", "org.apache.commons.collections4.functors" ], [ "NullIsTruePredicate", "org.apache.commons.collections4.functors" ], [ "TransformedPredicate", "org.apache.commons.collections4.functors" ], [ "NonePredicate", "org.apache.commons.collections4.functors" ], [ "ExceptionTransformer", "org.apache.commons.collections4.functors" ], [ "SwitchTransformer", "org.apache.commons.collections4.functors" ], [ "TransformerClosure", "org.apache.commons.collections4.functors" ], [ "OrPredicate", "org.apache.commons.collections4.functors" ], [ "NOPTransformer", "org.apache.commons.collections4.functors" ], [ "MapTransformer", "org.apache.commons.collections4.functors" ], [ "ExceptionFactory", "org.apache.commons.collections4.functors" ], [ "ChainedClosure", "org.apache.commons.collections4.functors" ], [ "AndPredicate", "org.apache.commons.collections4.functors" ], [ "PrototypeFactory", "org.apache.commons.collections4.functors" ], [ "ExceptionPredicate", "org.apache.commons.collections4.functors" ], [ "AbstractQuantifierPredicate", "org.apache.commons.collections4.functors" ], [ "InstanceofPredicate", "org.apache.commons.collections4.functors" ], [ "InvokerTransformer", "org.apache.commons.collections4.functors" ], [ "FalsePredicate", "org.apache.commons.collections4.functors" ], [ "CloneTransformer", "org.apache.commons.collections4.functors" ], [ "NotPredicate", "org.apache.commons.collections4.functors" ], [ "ConstantFactory", "org.apache.commons.collections4.functors" ], [ "ChainedTransformer", "org.apache.commons.collections4.functors" ], [ "ComparatorPredicate", "org.apache.commons.collections4.functors" ], [ "CatchAndRethrowClosure", "org.apache.commons.collections4.functors" ], [ "AllPredicate", "org.apache.commons.collections4.functors" ], [ "NullIsFalsePredicate", "org.apache.commons.collections4.functors" ], [ "NullIsExceptionPredicate", "org.apache.commons.collections4.functors" ], [ "AnyPredicate", "org.apache.commons.collections4.functors" ], [ "TruePredicate", "org.apache.commons.collections4.functors" ], [ "FactoryTransformer", "org.apache.commons.collections4.functors" ], [ "NotNullPredicate", "org.apache.commons.collections4.functors" ], [ "SwitchClosure", "org.apache.commons.collections4.functors" ], [ "UniquePredicate", "org.apache.commons.collections4.functors" ], [ "InstantiateTransformer", "org.apache.commons.collections4.functors" ], [ "OnePredicate", "org.apache.commons.collections4.functors" ], [ "EqualPredicate", "org.apache.commons.collections4.functors" ], [ "InstantiateFactory", "org.apache.commons.collections4.functors" ], [ "IfClosure", "org.apache.commons.collections4.functors" ], [ "ResettableListIterator", "org.apache.commons.collections4" ], [ "OrderedIterator", "org.apache.commons.collections4" ], [ "ComparatorChain", "org.apache.commons.collections4.comparators" ], [ "BooleanComparator", "org.apache.commons.collections4.comparators" ], [ "ReverseComparator", "org.apache.commons.collections4.comparators" ], [ "ComparableComparator", "org.apache.commons.collections4.comparators" ], [ "TransformingComparator", "org.apache.commons.collections4.comparators" ], [ "FixedOrderComparator", "org.apache.commons.collections4.comparators" ], [ "NullComparator", "org.apache.commons.collections4.comparators" ], [ "CollectionUtils", "org.apache.commons.collections4" ], [ "ListValuedMap", "org.apache.commons.collections4" ], [ "AbstractIterableGetMapDecorator", "org.apache.commons.collections4.splitmap" ], [ "TransformedSplitMap", "org.apache.commons.collections4.splitmap" ], [ "Factory", "org.apache.commons.collections4" ], [ "IterableUtils", "org.apache.commons.collections4" ], [ "Bag", "org.apache.commons.collections4" ], [ "Predicate", "org.apache.commons.collections4" ], [ "SortedBag", "org.apache.commons.collections4" ], [ "TrieUtils", "org.apache.commons.collections4" ], [ "ClosureUtils", "org.apache.commons.collections4" ], [ "PatriciaTrie", "org.apache.commons.collections4.trie" ], [ "UnmodifiableTrie", "org.apache.commons.collections4.trie" ], [ "KeyAnalyzer", "org.apache.commons.collections4.trie" ], [ "AbstractPatriciaTrie", "org.apache.commons.collections4.trie" ], [ "AbstractBitwiseTrie", "org.apache.commons.collections4.trie" ], [ "StringKeyAnalyzer", "org.apache.commons.collections4.trie.analyzer" ], [ "TransformedSortedMap", "org.apache.commons.collections4.map" ], [ "AbstractLinkedMap", "org.apache.commons.collections4.map" ], [ "Flat3Map", "org.apache.commons.collections4.map" ], [ "PredicatedMap", "org.apache.commons.collections4.map" ], [ "FixedSizeSortedMap", "org.apache.commons.collections4.map" ], [ "UnmodifiableSortedMap", "org.apache.commons.collections4.map" ], [ "PredicatedSortedMap", "org.apache.commons.collections4.map" ], [ "DefaultedMap", "org.apache.commons.collections4.map" ], [ "ReferenceIdentityMap", "org.apache.commons.collections4.map" ], [ "AbstractSortedMapDecorator", "org.apache.commons.collections4.map" ], [ "AbstractInputCheckedMapDecorator", "org.apache.commons.collections4.map" ], [ "FixedSizeMap", "org.apache.commons.collections4.map" ], [ "LazySortedMap", "org.apache.commons.collections4.map" ], [ "UnmodifiableOrderedMap", "org.apache.commons.collections4.map" ], [ "CaseInsensitiveMap", "org.apache.commons.collections4.map" ], [ "AbstractHashedMap", "org.apache.commons.collections4.map" ], [ "AbstractOrderedMapDecorator", "org.apache.commons.collections4.map" ], [ "UnmodifiableMap", "org.apache.commons.collections4.map" ], [ "EntrySetToMapIteratorAdapter", "org.apache.commons.collections4.map" ], [ "AbstractIterableMap", "org.apache.commons.collections4.map" ], [ "ListOrderedMap", "org.apache.commons.collections4.map" ], [ "LinkedMap", "org.apache.commons.collections4.map" ], [ "SingletonMap", "org.apache.commons.collections4.map" ], [ "UnmodifiableEntrySet", "org.apache.commons.collections4.map" ], [ "StaticBucketMap", "org.apache.commons.collections4.map" ], [ "AbstractMapDecorator", "org.apache.commons.collections4.map" ], [ "AbstractReferenceMap", "org.apache.commons.collections4.map" ], [ "MultiKeyMap", "org.apache.commons.collections4.map" ], [ "HashedMap", "org.apache.commons.collections4.map" ], [ "LazyMap", "org.apache.commons.collections4.map" ], [ "PassiveExpiringMap", "org.apache.commons.collections4.map" ], [ "MultiValueMap", "org.apache.commons.collections4.map" ], [ "LRUMap", "org.apache.commons.collections4.map" ], [ "ReferenceMap", "org.apache.commons.collections4.map" ], [ "TransformedMap", "org.apache.commons.collections4.map" ], [ "CompositeMap", "org.apache.commons.collections4.map" ], [ "UnmodifiableMapEntry", "org.apache.commons.collections4.keyvalue" ], [ "MultiKey", "org.apache.commons.collections4.keyvalue" ], [ "DefaultMapEntry", "org.apache.commons.collections4.keyvalue" ], [ "DefaultKeyValue", "org.apache.commons.collections4.keyvalue" ], [ "AbstractMapEntryDecorator", "org.apache.commons.collections4.keyvalue" ], [ "AbstractKeyValue", "org.apache.commons.collections4.keyvalue" ], [ "TiedMapEntry", "org.apache.commons.collections4.keyvalue" ], [ "AbstractMapEntry", "org.apache.commons.collections4.keyvalue" ], [ "MultiSetUtils", "org.apache.commons.collections4" ], [ "MapIterator", "org.apache.commons.collections4" ], [ "AbstractMultiValuedMap", "org.apache.commons.collections4.multimap" ], [ "UnmodifiableMultiValuedMap", "org.apache.commons.collections4.multimap" ], [ "HashSetValuedHashMap", "org.apache.commons.collections4.multimap" ], [ "TransformedMultiValuedMap", "org.apache.commons.collections4.multimap" ], [ "AbstractSetValuedMap", "org.apache.commons.collections4.multimap" ], [ "AbstractListValuedMap", "org.apache.commons.collections4.multimap" ], [ "ArrayListValuedHashMap", "org.apache.commons.collections4.multimap" ], [ "AbstractMultiValuedMapDecorator", "org.apache.commons.collections4.multimap" ], [ "LazyList", "org.apache.commons.collections4.list" ], [ "AbstractSerializableListDecorator", "org.apache.commons.collections4.list" ], [ "TreeList", "org.apache.commons.collections4.list" ], [ "SetUniqueList", "org.apache.commons.collections4.list" ], [ "AbstractListDecorator", "org.apache.commons.collections4.list" ], [ "NodeCachingLinkedList", "org.apache.commons.collections4.list" ], [ "UnmodifiableList", "org.apache.commons.collections4.list" ], [ "FixedSizeList", "org.apache.commons.collections4.list" ], [ "TransformedList", "org.apache.commons.collections4.list" ], [ "GrowthList", "org.apache.commons.collections4.list" ], [ "AbstractLinkedList", "org.apache.commons.collections4.list" ], [ "CursorableLinkedList", "org.apache.commons.collections4.list" ], [ "PredicatedList", "org.apache.commons.collections4.list" ], [ "OrderedMap", "org.apache.commons.collections4" ], [ "AbstractQueueDecorator", "org.apache.commons.collections4.queue" ], [ "TransformedQueue", "org.apache.commons.collections4.queue" ], [ "UnmodifiableQueue", "org.apache.commons.collections4.queue" ], [ "CircularFifoQueue", "org.apache.commons.collections4.queue" ], [ "PredicatedQueue", "org.apache.commons.collections4.queue" ], [ "FluentIterable", "org.apache.commons.collections4" ], [ "TransformerUtils", "org.apache.commons.collections4" ], [ "PredicateUtils", "org.apache.commons.collections4" ], [ "ResettableIterator", "org.apache.commons.collections4" ], [ "MultiValuedMap", "org.apache.commons.collections4" ], [ "SetUtils", "org.apache.commons.collections4" ], [ "SortedBidiMap", "org.apache.commons.collections4" ], [ "ArrayStack", "org.apache.commons.collections4" ], [ "Put", "org.apache.commons.collections4" ], [ "OrderedMapIterator", "org.apache.commons.collections4" ], [ "TransformedSet", "org.apache.commons.collections4.set" ], [ "CompositeSet", "org.apache.commons.collections4.set" ], [ "TransformedNavigableSet", "org.apache.commons.collections4.set" ], [ "PredicatedNavigableSet", "org.apache.commons.collections4.set" ], [ "AbstractSetDecorator", "org.apache.commons.collections4.set" ], [ "ListOrderedSet", "org.apache.commons.collections4.set" ], [ "UnmodifiableSet", "org.apache.commons.collections4.set" ], [ "AbstractSerializableSetDecorator", "org.apache.commons.collections4.set" ], [ "MapBackedSet", "org.apache.commons.collections4.set" ], [ "UnmodifiableSortedSet", "org.apache.commons.collections4.set" ], [ "PredicatedSortedSet", "org.apache.commons.collections4.set" ], [ "AbstractSortedSetDecorator", "org.apache.commons.collections4.set" ], [ "PredicatedSet", "org.apache.commons.collections4.set" ], [ "AbstractNavigableSetDecorator", "org.apache.commons.collections4.set" ], [ "UnmodifiableNavigableSet", "org.apache.commons.collections4.set" ], [ "TransformedSortedSet", "org.apache.commons.collections4.set" ], [ "IterableMap", "org.apache.commons.collections4" ], [ "EnumerationUtils", "org.apache.commons.collections4" ], [ "DeleteCommand", "org.apache.commons.collections4.sequence" ], [ "ReplacementsHandler", "org.apache.commons.collections4.sequence" ], [ "InsertCommand", "org.apache.commons.collections4.sequence" ], [ "SequencesComparator", "org.apache.commons.collections4.sequence" ], [ "ReplacementsFinder", "org.apache.commons.collections4.sequence" ], [ "KeepCommand", "org.apache.commons.collections4.sequence" ], [ "EditCommand", "org.apache.commons.collections4.sequence" ], [ "CommandVisitor", "org.apache.commons.collections4.sequence" ], [ "EditScript", "org.apache.commons.collections4.sequence" ], [ "QueueUtils", "org.apache.commons.collections4" ], [ "SetValuedMap", "org.apache.commons.collections4" ], [ "SynchronizedBag", "org.apache.commons.collections4.bag" ], [ "AbstractMapBag", "org.apache.commons.collections4.bag" ], [ "CollectionBag", "org.apache.commons.collections4.bag" ], [ "UnmodifiableBag", "org.apache.commons.collections4.bag" ], [ "PredicatedSortedBag", "org.apache.commons.collections4.bag" ], [ "UnmodifiableSortedBag", "org.apache.commons.collections4.bag" ], [ "HashBag", "org.apache.commons.collections4.bag" ], [ "AbstractBagDecorator", "org.apache.commons.collections4.bag" ], [ "TransformedSortedBag", "org.apache.commons.collections4.bag" ], [ "TreeBag", "org.apache.commons.collections4.bag" ], [ "PredicatedBag", "org.apache.commons.collections4.bag" ], [ "SynchronizedSortedBag", "org.apache.commons.collections4.bag" ], [ "CollectionSortedBag", "org.apache.commons.collections4.bag" ], [ "TransformedBag", "org.apache.commons.collections4.bag" ], [ "AbstractSortedBagDecorator", "org.apache.commons.collections4.bag" ], [ "HashMultiSet", "org.apache.commons.collections4.multiset" ], [ "AbstractMultiSet", "org.apache.commons.collections4.multiset" ], [ "PredicatedMultiSet", "org.apache.commons.collections4.multiset" ], [ "AbstractMultiSetDecorator", "org.apache.commons.collections4.multiset" ], [ "AbstractMapMultiSet", "org.apache.commons.collections4.multiset" ], [ "UnmodifiableMultiSet", "org.apache.commons.collections4.multiset" ], [ "SynchronizedMultiSet", "org.apache.commons.collections4.multiset" ], [ "BagUtils", "org.apache.commons.collections4" ], [ "Unmodifiable", "org.apache.commons.collections4" ], [ "Get", "org.apache.commons.collections4" ], [ "Trie", "org.apache.commons.collections4" ], [ "MultiMap", "org.apache.commons.collections4" ], [ "KeyValue", "org.apache.commons.collections4" ], [ "IteratorChain", "org.apache.commons.collections4.iterators" ], [ "EmptyListIterator", "org.apache.commons.collections4.iterators" ], [ "UnmodifiableOrderedMapIterator", "org.apache.commons.collections4.iterators" ], [ "AbstractListIteratorDecorator", "org.apache.commons.collections4.iterators" ], [ "ZippingIterator", "org.apache.commons.collections4.iterators" ], [ "UnmodifiableIterator", "org.apache.commons.collections4.iterators" ], [ "CollatingIterator", "org.apache.commons.collections4.iterators" ], [ "UniqueFilterIterator", "org.apache.commons.collections4.iterators" ], [ "ReverseListIterator", "org.apache.commons.collections4.iterators" ], [ "BoundedIterator", "org.apache.commons.collections4.iterators" ], [ "AbstractIteratorDecorator", "org.apache.commons.collections4.iterators" ], [ "TransformIterator", "org.apache.commons.collections4.iterators" ], [ "AbstractEmptyIterator", "org.apache.commons.collections4.iterators" ], [ "NodeListIterator", "org.apache.commons.collections4.iterators" ], [ "ArrayListIterator", "org.apache.commons.collections4.iterators" ], [ "LazyIteratorChain", "org.apache.commons.collections4.iterators" ], [ "LoopingListIterator", "org.apache.commons.collections4.iterators" ], [ "PeekingIterator", "org.apache.commons.collections4.iterators" ], [ "ObjectGraphIterator", "org.apache.commons.collections4.iterators" ], [ "ArrayIterator", "org.apache.commons.collections4.iterators" ], [ "PermutationIterator", "org.apache.commons.collections4.iterators" ], [ "SingletonListIterator", "org.apache.commons.collections4.iterators" ], [ "EmptyMapIterator", "org.apache.commons.collections4.iterators" ], [ "ObjectArrayIterator", "org.apache.commons.collections4.iterators" ], [ "EnumerationIterator", "org.apache.commons.collections4.iterators" ], [ "IteratorIterable", "org.apache.commons.collections4.iterators" ], [ "AbstractEmptyMapIterator", "org.apache.commons.collections4.iterators" ], [ "LoopingIterator", "org.apache.commons.collections4.iterators" ], [ "IteratorEnumeration", "org.apache.commons.collections4.iterators" ], [ "SingletonIterator", "org.apache.commons.collections4.iterators" ], [ "ListIteratorWrapper", "org.apache.commons.collections4.iterators" ], [ "SkippingIterator", "org.apache.commons.collections4.iterators" ], [ "EmptyOrderedIterator", "org.apache.commons.collections4.iterators" ], [ "AbstractMapIteratorDecorator", "org.apache.commons.collections4.iterators" ], [ "ObjectArrayListIterator", "org.apache.commons.collections4.iterators" ], [ "UnmodifiableListIterator", "org.apache.commons.collections4.iterators" ], [ "EmptyOrderedMapIterator", "org.apache.commons.collections4.iterators" ], [ "UnmodifiableMapIterator", "org.apache.commons.collections4.iterators" ], [ "EmptyIterator", "org.apache.commons.collections4.iterators" ], [ "EntrySetMapIterator", "org.apache.commons.collections4.iterators" ], [ "PushbackIterator", "org.apache.commons.collections4.iterators" ], [ "FilterIterator", "org.apache.commons.collections4.iterators" ], [ "AbstractUntypedIteratorDecorator", "org.apache.commons.collections4.iterators" ], [ "AbstractOrderedMapIteratorDecorator", "org.apache.commons.collections4.iterators" ], [ "FilterListIterator", "org.apache.commons.collections4.iterators" ], [ "SplitMapUtils", "org.apache.commons.collections4" ], [ "BoundedMap", "org.apache.commons.collections4" ] ],
  "tokensProjectClassesNonPrivateStaticNonVoidMethods" : [ [ "emptyIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> emptyIterator()" ], [ "emptyListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> emptyListIterator()" ], [ "emptyOrderedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> OrderedIterator<E> emptyOrderedIterator()" ], [ "emptyMapIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <K, V> MapIterator<K, V> emptyMapIterator()" ], [ "emptyOrderedMapIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <K, V> OrderedMapIterator<K, V> emptyOrderedMapIterator()" ], [ "singletonIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> singletonIterator(final E object)" ], [ "singletonListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ListIterator<E> singletonListIterator(final E object)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final E... array)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final Object array)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final E[] array, final int start)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final Object array, final int start)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final E[] array, final int start, final int end)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final Object array, final int start, final int end)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final E... array)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final Object array)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final E[] array, final int start)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final Object array, final int start)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final E[] array, final int start, final int end)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final Object array, final int start, final int end)" ], [ "boundedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> BoundedIterator<E> boundedIterator(final Iterator<? extends E> iterator, long max)" ], [ "boundedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> BoundedIterator<E> boundedIterator(final Iterator<? extends E> iterator, long offset, long max)" ], [ "unmodifiableIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> unmodifiableIterator(final Iterator<E> iterator)" ], [ "unmodifiableListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ListIterator<E> unmodifiableListIterator(final ListIterator<E> listIterator)" ], [ "unmodifiableMapIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <K, V> MapIterator<K, V> unmodifiableMapIterator(final MapIterator<K, V> mapIterator)" ], [ "chainedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> chainedIterator(final Iterator<? extends E> iterator1, final Iterator<? extends E> iterator2)" ], [ "chainedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> chainedIterator(final Iterator<? extends E>... iterators)" ], [ "chainedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> chainedIterator(final Collection<Iterator<? extends E>> iterators)" ], [ "collatedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> collatedIterator(final Comparator<? super E> comparator, final Iterator<? extends E> iterator1, final Iterator<? extends E> iterator2)" ], [ "collatedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> collatedIterator(final Comparator<? super E> comparator, final Iterator<? extends E>... iterators)" ], [ "collatedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> collatedIterator(final Comparator<? super E> comparator, final Collection<Iterator<? extends E>> iterators)" ], [ "objectGraphIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> objectGraphIterator(final E root, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <I, O> Iterator<O> transformedIterator(final Iterator<? extends I> iterator, final Transformer<? super I, ? extends O> transform)" ], [ "filteredIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> filteredIterator(final Iterator<? extends E> iterator, final Predicate<? super E> predicate)" ], [ "filteredListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ListIterator<E> filteredListIterator(final ListIterator<? extends E> listIterator, final Predicate<? super E> predicate)" ], [ "loopingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> loopingIterator(final Collection<? extends E> coll)" ], [ "loopingListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> loopingListIterator(final List<E> list)" ], [ "nodeListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static NodeListIterator nodeListIterator(final NodeList nodeList)" ], [ "nodeListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static NodeListIterator nodeListIterator(final Node node)" ], [ "peekingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> peekingIterator(final Iterator<? extends E> iterator)" ], [ "pushbackIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> pushbackIterator(final Iterator<? extends E> iterator)" ], [ "skippingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> SkippingIterator<E> skippingIterator(final Iterator<E> iterator, long offset)" ], [ "zippingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ZippingIterator<E> zippingIterator(final Iterator<? extends E> a, final Iterator<? extends E> b)" ], [ "zippingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ZippingIterator<E> zippingIterator(final Iterator<? extends E> a, final Iterator<? extends E> b, final Iterator<? extends E> c)" ], [ "zippingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ZippingIterator<E> zippingIterator(final Iterator<? extends E>... iterators)" ], [ "asIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> asIterator(final Enumeration<? extends E> enumeration)" ], [ "asIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> asIterator(final Enumeration<? extends E> enumeration, final Collection<? super E> removeCollection)" ], [ "asEnumeration", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Enumeration<E> asEnumeration(final Iterator<? extends E> iterator)" ], [ "asIterable", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterable<E> asIterable(final Iterator<? extends E> iterator)" ], [ "asMultipleUseIterable", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterable<E> asMultipleUseIterable(final Iterator<? extends E> iterator)" ], [ "toListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ListIterator<E> toListIterator(final Iterator<? extends E> iterator)" ], [ "toArray", "org.apache.commons.collections4", "IteratorUtils", "public static Object[] toArray(final Iterator<?> iterator)" ], [ "toArray", "org.apache.commons.collections4", "IteratorUtils", "public static <E> E[] toArray(final Iterator<? extends E> iterator, final Class<E> arrayClass)" ], [ "toList", "org.apache.commons.collections4", "IteratorUtils", "public static <E> List<E> toList(final Iterator<? extends E> iterator)" ], [ "toList", "org.apache.commons.collections4", "IteratorUtils", "public static <E> List<E> toList(final Iterator<? extends E> iterator, final int estimatedSize)" ], [ "getIterator", "org.apache.commons.collections4", "IteratorUtils", "public static Iterator<?> getIterator(final Object obj)" ], [ "forEachButLast", "org.apache.commons.collections4", "IteratorUtils", "public static <E> E forEachButLast(final Iterator<E> iterator, final Closure<? super E> closure)" ], [ "find", "org.apache.commons.collections4", "IteratorUtils", "public static <E> E find(final Iterator<E> iterator, final Predicate<? super E> predicate)" ], [ "indexOf", "org.apache.commons.collections4", "IteratorUtils", "public static <E> int indexOf(final Iterator<E> iterator, final Predicate<? super E> predicate)" ], [ "matchesAny", "org.apache.commons.collections4", "IteratorUtils", "public static <E> boolean matchesAny(final Iterator<E> iterator, final Predicate<? super E> predicate)" ], [ "matchesAll", "org.apache.commons.collections4", "IteratorUtils", "public static <E> boolean matchesAll(final Iterator<E> iterator, final Predicate<? super E> predicate)" ], [ "isEmpty", "org.apache.commons.collections4", "IteratorUtils", "public static boolean isEmpty(final Iterator<?> iterator)" ], [ "contains", "org.apache.commons.collections4", "IteratorUtils", "public static <E> boolean contains(final Iterator<E> iterator, final Object object)" ], [ "get", "org.apache.commons.collections4", "IteratorUtils", "public static <E> E get(final Iterator<E> iterator, final int index)" ], [ "size", "org.apache.commons.collections4", "IteratorUtils", "public static int size(final Iterator<?> iterator)" ], [ "toString", "org.apache.commons.collections4", "IteratorUtils", "public static <E> String toString(final Iterator<E> iterator)" ], [ "toString", "org.apache.commons.collections4", "IteratorUtils", "public static <E> String toString(final Iterator<E> iterator, final Transformer<? super E, String> transformer)" ], [ "toString", "org.apache.commons.collections4", "IteratorUtils", "public static <E> String toString(final Iterator<E> iterator, final Transformer<? super E, String> transformer, final String delimiter, final String prefix, final String suffix)" ], [ "naturalComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E extends Comparable<? super E>> Comparator<E> naturalComparator()" ], [ "chainedComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> Comparator<E> chainedComparator(final Comparator<E>... comparators)" ], [ "chainedComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> Comparator<E> chainedComparator(final Collection<Comparator<E>> comparators)" ], [ "reversedComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> Comparator<E> reversedComparator(final Comparator<E> comparator)" ], [ "booleanComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static Comparator<Boolean> booleanComparator(final boolean trueFirst)" ], [ "nullLowComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> Comparator<E> nullLowComparator(Comparator<E> comparator)" ], [ "nullHighComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> Comparator<E> nullHighComparator(Comparator<E> comparator)" ], [ "transformedComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <I, O> Comparator<I> transformedComparator(Comparator<O> comparator, final Transformer<? super I, ? extends O> transformer)" ], [ "min", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> E min(final E o1, final E o2, Comparator<E> comparator)" ], [ "max", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> E max(final E o1, final E o2, Comparator<E> comparator)" ], [ "unmodifiableBidiMap", "org.apache.commons.collections4.bidimap", "UnmodifiableBidiMap", "public static <K, V> BidiMap<K, V> unmodifiableBidiMap(final BidiMap<? extends K, ? extends V> map)" ], [ "unmodifiableOrderedBidiMap", "org.apache.commons.collections4.bidimap", "UnmodifiableOrderedBidiMap", "public static <K, V> OrderedBidiMap<K, V> unmodifiableOrderedBidiMap(final OrderedBidiMap<? extends K, ? extends V> map)" ], [ "unmodifiableSortedBidiMap", "org.apache.commons.collections4.bidimap", "UnmodifiableSortedBidiMap", "public static <K, V> SortedBidiMap<K, V> unmodifiableSortedBidiMap(final SortedBidiMap<K, ? extends V> map)" ], [ "emptyMultiValuedMap", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> MultiValuedMap<K, V> emptyMultiValuedMap()" ], [ "emptyIfNull", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> MultiValuedMap<K, V> emptyIfNull(final MultiValuedMap<K, V> map)" ], [ "isEmpty", "org.apache.commons.collections4", "MultiMapUtils", "public static boolean isEmpty(final MultiValuedMap<?, ?> map)" ], [ "getCollection", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> Collection<V> getCollection(final MultiValuedMap<K, V> map, final K key)" ], [ "getValuesAsList", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> List<V> getValuesAsList(final MultiValuedMap<K, V> map, final K key)" ], [ "getValuesAsSet", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> Set<V> getValuesAsSet(final MultiValuedMap<K, V> map, final K key)" ], [ "getValuesAsBag", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> Bag<V> getValuesAsBag(final MultiValuedMap<K, V> map, final K key)" ], [ "newListValuedHashMap", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> ListValuedMap<K, V> newListValuedHashMap()" ], [ "newSetValuedHashMap", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> SetValuedMap<K, V> newSetValuedHashMap()" ], [ "unmodifiableMultiValuedMap", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> MultiValuedMap<K, V> unmodifiableMultiValuedMap(final MultiValuedMap<? extends K, ? extends V> map)" ], [ "transformedMultiValuedMap", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> MultiValuedMap<K, V> transformedMultiValuedMap(final MultiValuedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "unmodifiableBoundedCollection", "org.apache.commons.collections4.collection", "UnmodifiableBoundedCollection", "public static <E> BoundedCollection<E> unmodifiableBoundedCollection(final BoundedCollection<? extends E> coll)" ], [ "unmodifiableBoundedCollection", "org.apache.commons.collections4.collection", "UnmodifiableBoundedCollection", "public static <E> BoundedCollection<E> unmodifiableBoundedCollection(Collection<? extends E> coll)" ], [ "transformingCollection", "org.apache.commons.collections4.collection", "TransformedCollection", "public static <E> TransformedCollection<E> transformingCollection(final Collection<E> coll, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedCollection", "org.apache.commons.collections4.collection", "TransformedCollection", "public static <E> TransformedCollection<E> transformedCollection(final Collection<E> collection, final Transformer<? super E, ? extends E> transformer)" ], [ "builder", "org.apache.commons.collections4.collection", "PredicatedCollection", "public static <E> Builder<E> builder(final Predicate<? super E> predicate)" ], [ "notNullBuilder", "org.apache.commons.collections4.collection", "PredicatedCollection", "public static <E> Builder<E> notNullBuilder()" ], [ "predicatedCollection", "org.apache.commons.collections4.collection", "PredicatedCollection", "public static <T> PredicatedCollection<T> predicatedCollection(final Collection<T> coll, final Predicate<? super T> predicate)" ], [ "uniqueIndexedCollection", "org.apache.commons.collections4.collection", "IndexedCollection", "public static <K, C> IndexedCollection<K, C> uniqueIndexedCollection(final Collection<C> coll, final Transformer<C, K> keyTransformer)" ], [ "nonUniqueIndexedCollection", "org.apache.commons.collections4.collection", "IndexedCollection", "public static <K, C> IndexedCollection<K, C> nonUniqueIndexedCollection(final Collection<C> coll, final Transformer<C, K> keyTransformer)" ], [ "synchronizedCollection", "org.apache.commons.collections4.collection", "SynchronizedCollection", "public static <T> SynchronizedCollection<T> synchronizedCollection(final Collection<T> coll)" ], [ "unmodifiableCollection", "org.apache.commons.collections4.collection", "UnmodifiableCollection", "public static <T> Collection<T> unmodifiableCollection(final Collection<? extends T> coll)" ], [ "exceptionFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> exceptionFactory()" ], [ "nullFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> nullFactory()" ], [ "constantFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> constantFactory(final T constantToReturn)" ], [ "prototypeFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> prototypeFactory(final T prototype)" ], [ "instantiateFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> instantiateFactory(final Class<T> classToInstantiate)" ], [ "instantiateFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> instantiateFactory(final Class<T> classToInstantiate, final Class<?>[] paramTypes, final Object[] args)" ], [ "emptyIfNull", "org.apache.commons.collections4", "ListUtils", "public static <T> List<T> emptyIfNull(final List<T> list)" ], [ "defaultIfNull", "org.apache.commons.collections4", "ListUtils", "public static <T> List<T> defaultIfNull(final List<T> list, final List<T> defaultList)" ], [ "intersection", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> intersection(final List<? extends E> list1, final List<? extends E> list2)" ], [ "subtract", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> subtract(final List<E> list1, final List<? extends E> list2)" ], [ "sum", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> sum(final List<? extends E> list1, final List<? extends E> list2)" ], [ "union", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> union(final List<? extends E> list1, final List<? extends E> list2)" ], [ "select", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> select(final Collection<? extends E> inputCollection, final Predicate<? super E> predicate)" ], [ "selectRejected", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> selectRejected(final Collection<? extends E> inputCollection, final Predicate<? super E> predicate)" ], [ "isEqualList", "org.apache.commons.collections4", "ListUtils", "public static boolean isEqualList(final Collection<?> list1, final Collection<?> list2)" ], [ "hashCodeForList", "org.apache.commons.collections4", "ListUtils", "public static int hashCodeForList(final Collection<?> list)" ], [ "retainAll", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> retainAll(final Collection<E> collection, final Collection<?> retain)" ], [ "removeAll", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> removeAll(final Collection<E> collection, final Collection<?> remove)" ], [ "synchronizedList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> synchronizedList(final List<E> list)" ], [ "unmodifiableList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> unmodifiableList(final List<? extends E> list)" ], [ "predicatedList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> predicatedList(final List<E> list, final Predicate<E> predicate)" ], [ "transformedList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> transformedList(final List<E> list, final Transformer<? super E, ? extends E> transformer)" ], [ "lazyList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> lazyList(final List<E> list, final Factory<? extends E> factory)" ], [ "fixedSizeList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> fixedSizeList(final List<E> list)" ], [ "indexOf", "org.apache.commons.collections4", "ListUtils", "public static <E> int indexOf(final List<E> list, final Predicate<E> predicate)" ], [ "longestCommonSubsequence", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> longestCommonSubsequence(final List<E> a, final List<E> b)" ], [ "longestCommonSubsequence", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> longestCommonSubsequence(final List<E> a, final List<E> b, final Equator<? super E> equator)" ], [ "longestCommonSubsequence", "org.apache.commons.collections4", "ListUtils", "public static String longestCommonSubsequence(final CharSequence a, final CharSequence b)" ], [ "partition", "org.apache.commons.collections4", "ListUtils", "public static <T> List<List<T>> partition(final List<T> list, final int size)" ], [ "getObject", "org.apache.commons.collections4", "MapUtils", "public static <K, V> V getObject(final Map<? super K, V> map, final K key)" ], [ "getString", "org.apache.commons.collections4", "MapUtils", "public static <K> String getString(final Map<? super K, ?> map, final K key)" ], [ "getBoolean", "org.apache.commons.collections4", "MapUtils", "public static <K> Boolean getBoolean(final Map<? super K, ?> map, final K key)" ], [ "getNumber", "org.apache.commons.collections4", "MapUtils", "public static <K> Number getNumber(final Map<? super K, ?> map, final K key)" ], [ "getByte", "org.apache.commons.collections4", "MapUtils", "public static <K> Byte getByte(final Map<? super K, ?> map, final K key)" ], [ "getShort", "org.apache.commons.collections4", "MapUtils", "public static <K> Short getShort(final Map<? super K, ?> map, final K key)" ], [ "getInteger", "org.apache.commons.collections4", "MapUtils", "public static <K> Integer getInteger(final Map<? super K, ?> map, final K key)" ], [ "getLong", "org.apache.commons.collections4", "MapUtils", "public static <K> Long getLong(final Map<? super K, ?> map, final K key)" ], [ "getFloat", "org.apache.commons.collections4", "MapUtils", "public static <K> Float getFloat(final Map<? super K, ?> map, final K key)" ], [ "getDouble", "org.apache.commons.collections4", "MapUtils", "public static <K> Double getDouble(final Map<? super K, ?> map, final K key)" ], [ "getMap", "org.apache.commons.collections4", "MapUtils", "public static <K> Map<?, ?> getMap(final Map<? super K, ?> map, final K key)" ], [ "getObject", "org.apache.commons.collections4", "MapUtils", "public static <K, V> V getObject(final Map<K, V> map, final K key, final V defaultValue)" ], [ "getString", "org.apache.commons.collections4", "MapUtils", "public static <K> String getString(final Map<? super K, ?> map, final K key, final String defaultValue)" ], [ "getBoolean", "org.apache.commons.collections4", "MapUtils", "public static <K> Boolean getBoolean(final Map<? super K, ?> map, final K key, final Boolean defaultValue)" ], [ "getNumber", "org.apache.commons.collections4", "MapUtils", "public static <K> Number getNumber(final Map<? super K, ?> map, final K key, final Number defaultValue)" ], [ "getByte", "org.apache.commons.collections4", "MapUtils", "public static <K> Byte getByte(final Map<? super K, ?> map, final K key, final Byte defaultValue)" ], [ "getShort", "org.apache.commons.collections4", "MapUtils", "public static <K> Short getShort(final Map<? super K, ?> map, final K key, final Short defaultValue)" ], [ "getInteger", "org.apache.commons.collections4", "MapUtils", "public static <K> Integer getInteger(final Map<? super K, ?> map, final K key, final Integer defaultValue)" ], [ "getLong", "org.apache.commons.collections4", "MapUtils", "public static <K> Long getLong(final Map<? super K, ?> map, final K key, final Long defaultValue)" ], [ "getFloat", "org.apache.commons.collections4", "MapUtils", "public static <K> Float getFloat(final Map<? super K, ?> map, final K key, final Float defaultValue)" ], [ "getDouble", "org.apache.commons.collections4", "MapUtils", "public static <K> Double getDouble(final Map<? super K, ?> map, final K key, final Double defaultValue)" ], [ "getMap", "org.apache.commons.collections4", "MapUtils", "public static <K> Map<?, ?> getMap(final Map<? super K, ?> map, final K key, final Map<?, ?> defaultValue)" ], [ "getBooleanValue", "org.apache.commons.collections4", "MapUtils", "public static <K> boolean getBooleanValue(final Map<? super K, ?> map, final K key)" ], [ "getByteValue", "org.apache.commons.collections4", "MapUtils", "public static <K> byte getByteValue(final Map<? super K, ?> map, final K key)" ], [ "getShortValue", "org.apache.commons.collections4", "MapUtils", "public static <K> short getShortValue(final Map<? super K, ?> map, final K key)" ], [ "getIntValue", "org.apache.commons.collections4", "MapUtils", "public static <K> int getIntValue(final Map<? super K, ?> map, final K key)" ], [ "getLongValue", "org.apache.commons.collections4", "MapUtils", "public static <K> long getLongValue(final Map<? super K, ?> map, final K key)" ], [ "getFloatValue", "org.apache.commons.collections4", "MapUtils", "public static <K> float getFloatValue(final Map<? super K, ?> map, final K key)" ], [ "getDoubleValue", "org.apache.commons.collections4", "MapUtils", "public static <K> double getDoubleValue(final Map<? super K, ?> map, final K key)" ], [ "getBooleanValue", "org.apache.commons.collections4", "MapUtils", "public static <K> boolean getBooleanValue(final Map<? super K, ?> map, final K key, final boolean defaultValue)" ], [ "getByteValue", "org.apache.commons.collections4", "MapUtils", "public static <K> byte getByteValue(final Map<? super K, ?> map, final K key, final byte defaultValue)" ], [ "getShortValue", "org.apache.commons.collections4", "MapUtils", "public static <K> short getShortValue(final Map<? super K, ?> map, final K key, final short defaultValue)" ], [ "getIntValue", "org.apache.commons.collections4", "MapUtils", "public static <K> int getIntValue(final Map<? super K, ?> map, final K key, final int defaultValue)" ], [ "getLongValue", "org.apache.commons.collections4", "MapUtils", "public static <K> long getLongValue(final Map<? super K, ?> map, final K key, final long defaultValue)" ], [ "getFloatValue", "org.apache.commons.collections4", "MapUtils", "public static <K> float getFloatValue(final Map<? super K, ?> map, final K key, final float defaultValue)" ], [ "getDoubleValue", "org.apache.commons.collections4", "MapUtils", "public static <K> double getDoubleValue(final Map<? super K, ?> map, final K key, final double defaultValue)" ], [ "toProperties", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Properties toProperties(final Map<K, V> map)" ], [ "toMap", "org.apache.commons.collections4", "MapUtils", "public static Map<String, Object> toMap(final ResourceBundle resourceBundle)" ], [ "invertMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Map<V, K> invertMap(final Map<K, V> map)" ], [ "putAll", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Map<K, V> putAll(final Map<K, V> map, final Object[] array)" ], [ "emptyIfNull", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Map<K, V> emptyIfNull(final Map<K, V> map)" ], [ "isEmpty", "org.apache.commons.collections4", "MapUtils", "public static boolean isEmpty(final Map<?, ?> map)" ], [ "isNotEmpty", "org.apache.commons.collections4", "MapUtils", "public static boolean isNotEmpty(final Map<?, ?> map)" ], [ "synchronizedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Map<K, V> synchronizedMap(final Map<K, V> map)" ], [ "unmodifiableMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Map<K, V> unmodifiableMap(final Map<? extends K, ? extends V> map)" ], [ "predicatedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> predicatedMap(final Map<K, V> map, final Predicate<? super K> keyPred, final Predicate<? super V> valuePred)" ], [ "transformedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> transformedMap(final Map<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "fixedSizeMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> fixedSizeMap(final Map<K, V> map)" ], [ "lazyMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> lazyMap(final Map<K, V> map, final Factory<? extends V> factory)" ], [ "lazyMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> lazyMap(final Map<K, V> map, final Transformer<? super K, ? extends V> transformerFactory)" ], [ "orderedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> OrderedMap<K, V> orderedMap(final Map<K, V> map)" ], [ "multiValueMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> MultiValueMap<K, V> multiValueMap(final Map<K, ? super Collection<V>> map)" ], [ "multiValueMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V, C extends Collection<V>> MultiValueMap<K, V> multiValueMap(final Map<K, C> map, final Class<C> collectionClass)" ], [ "multiValueMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V, C extends Collection<V>> MultiValueMap<K, V> multiValueMap(final Map<K, C> map, final Factory<C> collectionFactory)" ], [ "synchronizedSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> synchronizedSortedMap(final SortedMap<K, V> map)" ], [ "unmodifiableSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> unmodifiableSortedMap(final SortedMap<K, ? extends V> map)" ], [ "predicatedSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> predicatedSortedMap(final SortedMap<K, V> map, final Predicate<? super K> keyPred, final Predicate<? super V> valuePred)" ], [ "transformedSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> transformedSortedMap(final SortedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "fixedSizeSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> fixedSizeSortedMap(final SortedMap<K, V> map)" ], [ "lazySortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> lazySortedMap(final SortedMap<K, V> map, final Factory<? extends V> factory)" ], [ "lazySortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> lazySortedMap(final SortedMap<K, V> map, final Transformer<? super K, ? extends V> transformerFactory)" ], [ "iterableMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> iterableMap(final Map<K, V> map)" ], [ "iterableSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableSortedMap<K, V> iterableSortedMap(final SortedMap<K, V> sortedMap)" ], [ "defaultEquator", "org.apache.commons.collections4.functors", "DefaultEquator", "public static <T> DefaultEquator<T> defaultEquator()" ], [ "stringValueTransformer", "org.apache.commons.collections4.functors", "StringValueTransformer", "public static <T> Transformer<T, String> stringValueTransformer()" ], [ "ifTransformer", "org.apache.commons.collections4.functors", "IfTransformer", "public static <I, O> Transformer<I, O> ifTransformer(final Predicate<? super I> predicate, final Transformer<? super I, ? extends O> trueTransformer, final Transformer<? super I, ? extends O> falseTransformer)" ], [ "ifTransformer", "org.apache.commons.collections4.functors", "IfTransformer", "public static <T> Transformer<T, T> ifTransformer(final Predicate<? super T> predicate, final Transformer<? super T, ? extends T> trueTransformer)" ], [ "identityPredicate", "org.apache.commons.collections4.functors", "IdentityPredicate", "public static <T> Predicate<T> identityPredicate(final T object)" ], [ "exceptionClosure", "org.apache.commons.collections4.functors", "ExceptionClosure", "public static <E> Closure<E> exceptionClosure()" ], [ "nopClosure", "org.apache.commons.collections4.functors", "NOPClosure", "public static <E> Closure<E> nopClosure()" ], [ "closureTransformer", "org.apache.commons.collections4.functors", "ClosureTransformer", "public static <T> Transformer<T, T> closureTransformer(final Closure<? super T> closure)" ], [ "copy", "org.apache.commons.collections4.functors", "FunctorUtils", "static <T> Predicate<T>[] copy(final Predicate<? super T>... predicates)" ], [ "coerce", "org.apache.commons.collections4.functors", "FunctorUtils", "static <T> Predicate<T> coerce(final Predicate<? super T> predicate)" ], [ "validate", "org.apache.commons.collections4.functors", "FunctorUtils", "static <T> Predicate<? super T>[] validate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "copy", "org.apache.commons.collections4.functors", "FunctorUtils", "static <E> Closure<E>[] copy(final Closure<? super E>... closures)" ], [ "coerce", "org.apache.commons.collections4.functors", "FunctorUtils", "static <T> Closure<T> coerce(final Closure<? super T> closure)" ], [ "copy", "org.apache.commons.collections4.functors", "FunctorUtils", "static <I, O> Transformer<I, O>[] copy(final Transformer<? super I, ? extends O>... transformers)" ], [ "coerce", "org.apache.commons.collections4.functors", "FunctorUtils", "static <I, O> Transformer<I, O> coerce(final Transformer<? super I, ? extends O> transformer)" ], [ "transformerPredicate", "org.apache.commons.collections4.functors", "TransformerPredicate", "public static <T> Predicate<T> transformerPredicate(final Transformer<? super T, Boolean> transformer)" ], [ "nullPredicate", "org.apache.commons.collections4.functors", "NullPredicate", "public static <T> Predicate<T> nullPredicate()" ], [ "nullTransformer", "org.apache.commons.collections4.functors", "ConstantTransformer", "public static <I, O> Transformer<I, O> nullTransformer()" ], [ "constantTransformer", "org.apache.commons.collections4.functors", "ConstantTransformer", "public static <I, O> Transformer<I, O> constantTransformer(final O constantToReturn)" ], [ "predicateTransformer", "org.apache.commons.collections4.functors", "PredicateTransformer", "public static <T> Transformer<T, Boolean> predicateTransformer(final Predicate<? super T> predicate)" ], [ "whileClosure", "org.apache.commons.collections4.functors", "WhileClosure", "public static <E> Closure<E> whileClosure(final Predicate<? super E> predicate, final Closure<? super E> closure, final boolean doLoop)" ], [ "forClosure", "org.apache.commons.collections4.functors", "ForClosure", "public static <E> Closure<E> forClosure(final int count, final Closure<? super E> closure)" ], [ "nullIsTruePredicate", "org.apache.commons.collections4.functors", "NullIsTruePredicate", "public static <T> Predicate<T> nullIsTruePredicate(final Predicate<? super T> predicate)" ], [ "transformedPredicate", "org.apache.commons.collections4.functors", "TransformedPredicate", "public static <T> Predicate<T> transformedPredicate(final Transformer<? super T, ? extends T> transformer, final Predicate<? super T> predicate)" ], [ "nonePredicate", "org.apache.commons.collections4.functors", "NonePredicate", "public static <T> Predicate<T> nonePredicate(final Predicate<? super T>... predicates)" ], [ "nonePredicate", "org.apache.commons.collections4.functors", "NonePredicate", "public static <T> Predicate<T> nonePredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "exceptionTransformer", "org.apache.commons.collections4.functors", "ExceptionTransformer", "public static <I, O> Transformer<I, O> exceptionTransformer()" ], [ "switchTransformer", "org.apache.commons.collections4.functors", "SwitchTransformer", "public static <I, O> Transformer<I, O> switchTransformer(final Predicate<? super I>[] predicates, final Transformer<? super I, ? extends O>[] transformers, final Transformer<? super I, ? extends O> defaultTransformer)" ], [ "switchTransformer", "org.apache.commons.collections4.functors", "SwitchTransformer", "public static <I, O> Transformer<I, O> switchTransformer(final Map<? extends Predicate<? super I>, ? extends Transformer<? super I, ? extends O>> map)" ], [ "transformerClosure", "org.apache.commons.collections4.functors", "TransformerClosure", "public static <E> Closure<E> transformerClosure(final Transformer<? super E, ?> transformer)" ], [ "orPredicate", "org.apache.commons.collections4.functors", "OrPredicate", "public static <T> Predicate<T> orPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "nopTransformer", "org.apache.commons.collections4.functors", "NOPTransformer", "public static <T> Transformer<T, T> nopTransformer()" ], [ "mapTransformer", "org.apache.commons.collections4.functors", "MapTransformer", "public static <I, O> Transformer<I, O> mapTransformer(final Map<? super I, ? extends O> map)" ], [ "exceptionFactory", "org.apache.commons.collections4.functors", "ExceptionFactory", "public static <T> Factory<T> exceptionFactory()" ], [ "chainedClosure", "org.apache.commons.collections4.functors", "ChainedClosure", "public static <E> Closure<E> chainedClosure(final Closure<? super E>... closures)" ], [ "chainedClosure", "org.apache.commons.collections4.functors", "ChainedClosure", "public static <E> Closure<E> chainedClosure(final Collection<? extends Closure<? super E>> closures)" ], [ "andPredicate", "org.apache.commons.collections4.functors", "AndPredicate", "public static <T> Predicate<T> andPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "prototypeFactory", "org.apache.commons.collections4.functors", "PrototypeFactory", "public static <T> Factory<T> prototypeFactory(final T prototype)" ], [ "exceptionPredicate", "org.apache.commons.collections4.functors", "ExceptionPredicate", "public static <T> Predicate<T> exceptionPredicate()" ], [ "instanceOfPredicate", "org.apache.commons.collections4.functors", "InstanceofPredicate", "public static Predicate<Object> instanceOfPredicate(final Class<?> type)" ], [ "invokerTransformer", "org.apache.commons.collections4.functors", "InvokerTransformer", "public static <I, O> Transformer<I, O> invokerTransformer(final String methodName)" ], [ "invokerTransformer", "org.apache.commons.collections4.functors", "InvokerTransformer", "public static <I, O> Transformer<I, O> invokerTransformer(final String methodName, final Class<?>[] paramTypes, final Object[] args)" ], [ "falsePredicate", "org.apache.commons.collections4.functors", "FalsePredicate", "public static <T> Predicate<T> falsePredicate()" ], [ "cloneTransformer", "org.apache.commons.collections4.functors", "CloneTransformer", "public static <T> Transformer<T, T> cloneTransformer()" ], [ "notPredicate", "org.apache.commons.collections4.functors", "NotPredicate", "public static <T> Predicate<T> notPredicate(final Predicate<? super T> predicate)" ], [ "constantFactory", "org.apache.commons.collections4.functors", "ConstantFactory", "public static <T> Factory<T> constantFactory(final T constantToReturn)" ], [ "chainedTransformer", "org.apache.commons.collections4.functors", "ChainedTransformer", "public static <T> Transformer<T, T> chainedTransformer(final Transformer<? super T, ? extends T>... transformers)" ], [ "chainedTransformer", "org.apache.commons.collections4.functors", "ChainedTransformer", "public static <T> Transformer<T, T> chainedTransformer(final Collection<? extends Transformer<? super T, ? extends T>> transformers)" ], [ "comparatorPredicate", "org.apache.commons.collections4.functors", "ComparatorPredicate", "public static <T> Predicate<T> comparatorPredicate(final T object, final Comparator<T> comparator)" ], [ "comparatorPredicate", "org.apache.commons.collections4.functors", "ComparatorPredicate", "public static <T> Predicate<T> comparatorPredicate(final T object, final Comparator<T> comparator, final Criterion criterion)" ], [ "allPredicate", "org.apache.commons.collections4.functors", "AllPredicate", "public static <T> Predicate<T> allPredicate(final Predicate<? super T>... predicates)" ], [ "allPredicate", "org.apache.commons.collections4.functors", "AllPredicate", "public static <T> Predicate<T> allPredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "nullIsFalsePredicate", "org.apache.commons.collections4.functors", "NullIsFalsePredicate", "public static <T> Predicate<T> nullIsFalsePredicate(final Predicate<? super T> predicate)" ], [ "nullIsExceptionPredicate", "org.apache.commons.collections4.functors", "NullIsExceptionPredicate", "public static <T> Predicate<T> nullIsExceptionPredicate(final Predicate<? super T> predicate)" ], [ "anyPredicate", "org.apache.commons.collections4.functors", "AnyPredicate", "public static <T> Predicate<T> anyPredicate(final Predicate<? super T>... predicates)" ], [ "anyPredicate", "org.apache.commons.collections4.functors", "AnyPredicate", "public static <T> Predicate<T> anyPredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "truePredicate", "org.apache.commons.collections4.functors", "TruePredicate", "public static <T> Predicate<T> truePredicate()" ], [ "factoryTransformer", "org.apache.commons.collections4.functors", "FactoryTransformer", "public static <I, O> Transformer<I, O> factoryTransformer(final Factory<? extends O> factory)" ], [ "notNullPredicate", "org.apache.commons.collections4.functors", "NotNullPredicate", "public static <T> Predicate<T> notNullPredicate()" ], [ "switchClosure", "org.apache.commons.collections4.functors", "SwitchClosure", "public static <E> Closure<E> switchClosure(final Predicate<? super E>[] predicates, final Closure<? super E>[] closures, final Closure<? super E> defaultClosure)" ], [ "switchClosure", "org.apache.commons.collections4.functors", "SwitchClosure", "public static <E> Closure<E> switchClosure(final Map<Predicate<E>, Closure<E>> predicatesAndClosures)" ], [ "uniquePredicate", "org.apache.commons.collections4.functors", "UniquePredicate", "public static <T> Predicate<T> uniquePredicate()" ], [ "instantiateTransformer", "org.apache.commons.collections4.functors", "InstantiateTransformer", "public static <T> Transformer<Class<? extends T>, T> instantiateTransformer()" ], [ "instantiateTransformer", "org.apache.commons.collections4.functors", "InstantiateTransformer", "public static <T> Transformer<Class<? extends T>, T> instantiateTransformer(final Class<?>[] paramTypes, final Object[] args)" ], [ "onePredicate", "org.apache.commons.collections4.functors", "OnePredicate", "public static <T> Predicate<T> onePredicate(final Predicate<? super T>... predicates)" ], [ "onePredicate", "org.apache.commons.collections4.functors", "OnePredicate", "public static <T> Predicate<T> onePredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "equalPredicate", "org.apache.commons.collections4.functors", "EqualPredicate", "public static <T> Predicate<T> equalPredicate(final T object)" ], [ "equalPredicate", "org.apache.commons.collections4.functors", "EqualPredicate", "public static <T> Predicate<T> equalPredicate(final T object, final Equator<T> equator)" ], [ "instantiateFactory", "org.apache.commons.collections4.functors", "InstantiateFactory", "public static <T> Factory<T> instantiateFactory(final Class<T> classToInstantiate, final Class<?>[] paramTypes, final Object[] args)" ], [ "ifClosure", "org.apache.commons.collections4.functors", "IfClosure", "public static <E> Closure<E> ifClosure(final Predicate<? super E> predicate, final Closure<? super E> trueClosure)" ], [ "ifClosure", "org.apache.commons.collections4.functors", "IfClosure", "public static <E> Closure<E> ifClosure(final Predicate<? super E> predicate, final Closure<? super E> trueClosure, final Closure<? super E> falseClosure)" ], [ "getTrueFirstComparator", "org.apache.commons.collections4.comparators", "BooleanComparator", "public static BooleanComparator getTrueFirstComparator()" ], [ "getFalseFirstComparator", "org.apache.commons.collections4.comparators", "BooleanComparator", "public static BooleanComparator getFalseFirstComparator()" ], [ "booleanComparator", "org.apache.commons.collections4.comparators", "BooleanComparator", "public static BooleanComparator booleanComparator(final boolean trueFirst)" ], [ "comparableComparator", "org.apache.commons.collections4.comparators", "ComparableComparator", "public static <E extends Comparable<? super E>> ComparableComparator<E> comparableComparator()" ], [ "emptyCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <T> Collection<T> emptyCollection()" ], [ "emptyIfNull", "org.apache.commons.collections4", "CollectionUtils", "public static <T> Collection<T> emptyIfNull(final Collection<T> collection)" ], [ "union", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> union(final Iterable<? extends O> a, final Iterable<? extends O> b)" ], [ "intersection", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> intersection(final Iterable<? extends O> a, final Iterable<? extends O> b)" ], [ "disjunction", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> disjunction(final Iterable<? extends O> a, final Iterable<? extends O> b)" ], [ "subtract", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> subtract(final Iterable<? extends O> a, final Iterable<? extends O> b)" ], [ "subtract", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> subtract(final Iterable<? extends O> a, final Iterable<? extends O> b, final Predicate<O> p)" ], [ "containsAll", "org.apache.commons.collections4", "CollectionUtils", "public static boolean containsAll(final Collection<?> coll1, final Collection<?> coll2)" ], [ "containsAny", "org.apache.commons.collections4", "CollectionUtils", "public static boolean containsAny(final Collection<?> coll1, final Collection<?> coll2)" ], [ "getCardinalityMap", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Map<O, Integer> getCardinalityMap(final Iterable<? extends O> coll)" ], [ "isSubCollection", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isSubCollection(final Collection<?> a, final Collection<?> b)" ], [ "isProperSubCollection", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isProperSubCollection(final Collection<?> a, final Collection<?> b)" ], [ "isEqualCollection", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isEqualCollection(final Collection<?> a, final Collection<?> b)" ], [ "isEqualCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <E> boolean isEqualCollection(final Collection<? extends E> a, final Collection<? extends E> b, final Equator<? super E> equator)" ], [ "cardinality", "org.apache.commons.collections4", "CollectionUtils", "public static <O> int cardinality(final O obj, final Iterable<? super O> coll)" ], [ "find", "org.apache.commons.collections4", "CollectionUtils", "public static <T> T find(final Iterable<T> collection, final Predicate<? super T> predicate)" ], [ "forAllDo", "org.apache.commons.collections4", "CollectionUtils", "public static <T, C extends Closure<? super T>> C forAllDo(final Iterable<T> collection, final C closure)" ], [ "forAllDo", "org.apache.commons.collections4", "CollectionUtils", "public static <T, C extends Closure<? super T>> C forAllDo(final Iterator<T> iterator, final C closure)" ], [ "forAllButLastDo", "org.apache.commons.collections4", "CollectionUtils", "public static <T, C extends Closure<? super T>> T forAllButLastDo(final Iterable<T> collection, final C closure)" ], [ "forAllButLastDo", "org.apache.commons.collections4", "CollectionUtils", "public static <T, C extends Closure<? super T>> T forAllButLastDo(final Iterator<T> iterator, final C closure)" ], [ "filter", "org.apache.commons.collections4", "CollectionUtils", "public static <T> boolean filter(final Iterable<T> collection, final Predicate<? super T> predicate)" ], [ "filterInverse", "org.apache.commons.collections4", "CollectionUtils", "public static <T> boolean filterInverse(final Iterable<T> collection, final Predicate<? super T> predicate)" ], [ "countMatches", "org.apache.commons.collections4", "CollectionUtils", "public static <C> int countMatches(final Iterable<C> input, final Predicate<? super C> predicate)" ], [ "exists", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean exists(final Iterable<C> input, final Predicate<? super C> predicate)" ], [ "matchesAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean matchesAll(final Iterable<C> input, final Predicate<? super C> predicate)" ], [ "select", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> select(final Iterable<? extends O> inputCollection, final Predicate<? super O> predicate)" ], [ "select", "org.apache.commons.collections4", "CollectionUtils", "public static <O, R extends Collection<? super O>> R select(final Iterable<? extends O> inputCollection, final Predicate<? super O> predicate, final R outputCollection)" ], [ "select", "org.apache.commons.collections4", "CollectionUtils", "public static <O, R extends Collection<? super O>> R select(final Iterable<? extends O> inputCollection, final Predicate<? super O> predicate, R outputCollection, R rejectedCollection)" ], [ "selectRejected", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> selectRejected(final Iterable<? extends O> inputCollection, final Predicate<? super O> predicate)" ], [ "selectRejected", "org.apache.commons.collections4", "CollectionUtils", "public static <O, R extends Collection<? super O>> R selectRejected(final Iterable<? extends O> inputCollection, final Predicate<? super O> predicate, final R outputCollection)" ], [ "collect", "org.apache.commons.collections4", "CollectionUtils", "public static <I, O> Collection<O> collect(final Iterable<I> inputCollection, final Transformer<? super I, ? extends O> transformer)" ], [ "collect", "org.apache.commons.collections4", "CollectionUtils", "public static <I, O> Collection<O> collect(final Iterator<I> inputIterator, final Transformer<? super I, ? extends O> transformer)" ], [ "collect", "org.apache.commons.collections4", "CollectionUtils", "public static <I, O, R extends Collection<? super O>> R collect(final Iterable<? extends I> inputCollection, final Transformer<? super I, ? extends O> transformer, final R outputCollection)" ], [ "collect", "org.apache.commons.collections4", "CollectionUtils", "public static <I, O, R extends Collection<? super O>> R collect(final Iterator<? extends I> inputIterator, final Transformer<? super I, ? extends O> transformer, final R outputCollection)" ], [ "addIgnoreNull", "org.apache.commons.collections4", "CollectionUtils", "public static <T> boolean addIgnoreNull(final Collection<T> collection, final T object)" ], [ "addAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean addAll(final Collection<C> collection, final Iterable<? extends C> iterable)" ], [ "addAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean addAll(final Collection<C> collection, final Iterator<? extends C> iterator)" ], [ "addAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean addAll(final Collection<C> collection, final Enumeration<? extends C> enumeration)" ], [ "addAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean addAll(final Collection<C> collection, final C[] elements)" ], [ "get", "org.apache.commons.collections4", "CollectionUtils", "public static <T> T get(final Iterator<T> iterator, final int index)" ], [ "get", "org.apache.commons.collections4", "CollectionUtils", "public static <T> T get(final Iterable<T> iterable, final int index)" ], [ "get", "org.apache.commons.collections4", "CollectionUtils", "public static Object get(final Object object, final int index)" ], [ "get", "org.apache.commons.collections4", "CollectionUtils", "public static <K, V> Map.Entry<K, V> get(final Map<K, V> map, final int index)" ], [ "size", "org.apache.commons.collections4", "CollectionUtils", "public static int size(final Object object)" ], [ "sizeIsEmpty", "org.apache.commons.collections4", "CollectionUtils", "public static boolean sizeIsEmpty(final Object object)" ], [ "isEmpty", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isEmpty(final Collection<?> coll)" ], [ "isNotEmpty", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isNotEmpty(final Collection<?> coll)" ], [ "isFull", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isFull(final Collection<? extends Object> coll)" ], [ "maxSize", "org.apache.commons.collections4", "CollectionUtils", "public static int maxSize(final Collection<? extends Object> coll)" ], [ "collate", "org.apache.commons.collections4", "CollectionUtils", "public static <O extends Comparable<? super O>> List<O> collate(Iterable<? extends O> a, Iterable<? extends O> b)" ], [ "collate", "org.apache.commons.collections4", "CollectionUtils", "public static <O extends Comparable<? super O>> List<O> collate(final Iterable<? extends O> a, final Iterable<? extends O> b, final boolean includeDuplicates)" ], [ "collate", "org.apache.commons.collections4", "CollectionUtils", "public static <O> List<O> collate(final Iterable<? extends O> a, final Iterable<? extends O> b, final Comparator<? super O> c)" ], [ "collate", "org.apache.commons.collections4", "CollectionUtils", "public static <O> List<O> collate(final Iterable<? extends O> a, final Iterable<? extends O> b, final Comparator<? super O> c, final boolean includeDuplicates)" ], [ "permutations", "org.apache.commons.collections4", "CollectionUtils", "public static <E> Collection<List<E>> permutations(final Collection<E> collection)" ], [ "retainAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> Collection<C> retainAll(final Collection<C> collection, final Collection<?> retain)" ], [ "retainAll", "org.apache.commons.collections4", "CollectionUtils", "public static <E> Collection<E> retainAll(final Iterable<E> collection, final Iterable<? extends E> retain, final Equator<? super E> equator)" ], [ "removeAll", "org.apache.commons.collections4", "CollectionUtils", "public static <E> Collection<E> removeAll(final Collection<E> collection, final Collection<?> remove)" ], [ "removeAll", "org.apache.commons.collections4", "CollectionUtils", "public static <E> Collection<E> removeAll(final Iterable<E> collection, final Iterable<? extends E> remove, final Equator<? super E> equator)" ], [ "synchronizedCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <C> Collection<C> synchronizedCollection(final Collection<C> collection)" ], [ "unmodifiableCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <C> Collection<C> unmodifiableCollection(final Collection<? extends C> collection)" ], [ "predicatedCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <C> Collection<C> predicatedCollection(final Collection<C> collection, final Predicate<? super C> predicate)" ], [ "transformingCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <E> Collection<E> transformingCollection(final Collection<E> collection, final Transformer<? super E, ? extends E> transformer)" ], [ "extractSingleton", "org.apache.commons.collections4", "CollectionUtils", "public static <E> E extractSingleton(final Collection<E> collection)" ], [ "transformingMap", "org.apache.commons.collections4.splitmap", "TransformedSplitMap", "public static <J, K, U, V> TransformedSplitMap<J, K, U, V> transformingMap(final Map<K, V> map, final Transformer<? super J, ? extends K> keyTransformer, final Transformer<? super U, ? extends V> valueTransformer)" ], [ "emptyIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> emptyIterable()" ], [ "chainedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> chainedIterable(final Iterable<? extends E> a, final Iterable<? extends E> b)" ], [ "chainedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> chainedIterable(final Iterable<? extends E> a, final Iterable<? extends E> b, final Iterable<? extends E> c)" ], [ "chainedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> chainedIterable(final Iterable<? extends E> a, final Iterable<? extends E> b, final Iterable<? extends E> c, final Iterable<? extends E> d)" ], [ "chainedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> chainedIterable(final Iterable<? extends E>... iterables)" ], [ "collatedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> collatedIterable(final Iterable<? extends E> a, final Iterable<? extends E> b)" ], [ "collatedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> collatedIterable(final Comparator<? super E> comparator, final Iterable<? extends E> a, final Iterable<? extends E> b)" ], [ "filteredIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> filteredIterable(final Iterable<E> iterable, final Predicate<? super E> predicate)" ], [ "boundedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> boundedIterable(final Iterable<E> iterable, final long maxSize)" ], [ "loopingIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> loopingIterable(final Iterable<E> iterable)" ], [ "reversedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> reversedIterable(final Iterable<E> iterable)" ], [ "skippingIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> skippingIterable(final Iterable<E> iterable, final long elementsToSkip)" ], [ "transformedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <I, O> Iterable<O> transformedIterable(final Iterable<I> iterable, final Transformer<? super I, ? extends O> transformer)" ], [ "uniqueIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> uniqueIterable(final Iterable<E> iterable)" ], [ "unmodifiableIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> unmodifiableIterable(final Iterable<E> iterable)" ], [ "zippingIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> zippingIterable(final Iterable<? extends E> a, final Iterable<? extends E> b)" ], [ "zippingIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> zippingIterable(final Iterable<? extends E> first, final Iterable<? extends E>... others)" ], [ "emptyIfNull", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> emptyIfNull(final Iterable<E> iterable)" ], [ "forEachButLast", "org.apache.commons.collections4", "IterableUtils", "public static <E> E forEachButLast(final Iterable<E> iterable, final Closure<? super E> closure)" ], [ "find", "org.apache.commons.collections4", "IterableUtils", "public static <E> E find(final Iterable<E> iterable, final Predicate<? super E> predicate)" ], [ "indexOf", "org.apache.commons.collections4", "IterableUtils", "public static <E> int indexOf(final Iterable<E> iterable, final Predicate<? super E> predicate)" ], [ "matchesAll", "org.apache.commons.collections4", "IterableUtils", "public static <E> boolean matchesAll(final Iterable<E> iterable, final Predicate<? super E> predicate)" ], [ "matchesAny", "org.apache.commons.collections4", "IterableUtils", "public static <E> boolean matchesAny(final Iterable<E> iterable, final Predicate<? super E> predicate)" ], [ "countMatches", "org.apache.commons.collections4", "IterableUtils", "public static <E> long countMatches(final Iterable<E> input, final Predicate<? super E> predicate)" ], [ "isEmpty", "org.apache.commons.collections4", "IterableUtils", "public static boolean isEmpty(final Iterable<?> iterable)" ], [ "contains", "org.apache.commons.collections4", "IterableUtils", "public static <E> boolean contains(final Iterable<E> iterable, final Object object)" ], [ "contains", "org.apache.commons.collections4", "IterableUtils", "public static <E> boolean contains(final Iterable<? extends E> iterable, final E object, final Equator<? super E> equator)" ], [ "frequency", "org.apache.commons.collections4", "IterableUtils", "public static <E, T extends E> int frequency(final Iterable<E> iterable, final T obj)" ], [ "get", "org.apache.commons.collections4", "IterableUtils", "public static <T> T get(final Iterable<T> iterable, final int index)" ], [ "size", "org.apache.commons.collections4", "IterableUtils", "public static int size(final Iterable<?> iterable)" ], [ "partition", "org.apache.commons.collections4", "IterableUtils", "public static <O> List<List<O>> partition(final Iterable<? extends O> iterable, final Predicate<? super O> predicate)" ], [ "partition", "org.apache.commons.collections4", "IterableUtils", "public static <O> List<List<O>> partition(final Iterable<? extends O> iterable, final Predicate<? super O>... predicates)" ], [ "partition", "org.apache.commons.collections4", "IterableUtils", "public static <O, R extends Collection<O>> List<R> partition(final Iterable<? extends O> iterable, final Factory<R> partitionFactory, final Predicate<? super O>... predicates)" ], [ "toList", "org.apache.commons.collections4", "IterableUtils", "public static <E> List<E> toList(final Iterable<E> iterable)" ], [ "toString", "org.apache.commons.collections4", "IterableUtils", "public static <E> String toString(final Iterable<E> iterable)" ], [ "toString", "org.apache.commons.collections4", "IterableUtils", "public static <E> String toString(final Iterable<E> iterable, final Transformer<? super E, String> transformer)" ], [ "toString", "org.apache.commons.collections4", "IterableUtils", "public static <E> String toString(final Iterable<E> iterable, final Transformer<? super E, String> transformer, final String delimiter, final String prefix, final String suffix)" ], [ "unmodifiableTrie", "org.apache.commons.collections4", "TrieUtils", "public static <K, V> Trie<K, V> unmodifiableTrie(final Trie<K, ? extends V> trie)" ], [ "exceptionClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> exceptionClosure()" ], [ "nopClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> nopClosure()" ], [ "asClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> asClosure(final Transformer<? super E, ?> transformer)" ], [ "forClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> forClosure(final int count, final Closure<? super E> closure)" ], [ "whileClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> whileClosure(final Predicate<? super E> predicate, final Closure<? super E> closure)" ], [ "doWhileClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> doWhileClosure(final Closure<? super E> closure, final Predicate<? super E> predicate)" ], [ "invokerClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> invokerClosure(final String methodName)" ], [ "invokerClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> invokerClosure(final String methodName, final Class<?>[] paramTypes, final Object[] args)" ], [ "chainedClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> chainedClosure(final Closure<? super E>... closures)" ], [ "chainedClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> chainedClosure(final Collection<? extends Closure<? super E>> closures)" ], [ "ifClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> ifClosure(final Predicate<? super E> predicate, final Closure<? super E> trueClosure)" ], [ "ifClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> ifClosure(final Predicate<? super E> predicate, final Closure<? super E> trueClosure, final Closure<? super E> falseClosure)" ], [ "switchClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> switchClosure(final Predicate<? super E>[] predicates, final Closure<? super E>[] closures)" ], [ "switchClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> switchClosure(final Predicate<? super E>[] predicates, final Closure<? super E>[] closures, final Closure<? super E> defaultClosure)" ], [ "switchClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> switchClosure(final Map<Predicate<E>, Closure<E>> predicatesAndClosures)" ], [ "switchMapClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> switchMapClosure(final Map<? extends E, Closure<E>> objectsAndClosures)" ], [ "unmodifiableTrie", "org.apache.commons.collections4.trie", "UnmodifiableTrie", "public static <K, V> Trie<K, V> unmodifiableTrie(final Trie<K, ? extends V> trie)" ], [ "isOutOfBoundsIndex", "org.apache.commons.collections4.trie", "KeyAnalyzer", "static boolean isOutOfBoundsIndex(final int bitIndex)" ], [ "isEqualBitKey", "org.apache.commons.collections4.trie", "KeyAnalyzer", "static boolean isEqualBitKey(final int bitIndex)" ], [ "isNullBitKey", "org.apache.commons.collections4.trie", "KeyAnalyzer", "static boolean isNullBitKey(final int bitIndex)" ], [ "isValidBitIndex", "org.apache.commons.collections4.trie", "KeyAnalyzer", "static boolean isValidBitIndex(final int bitIndex)" ], [ "isValidUplink", "org.apache.commons.collections4.trie", "AbstractPatriciaTrie", "static boolean isValidUplink(final TrieEntry<?, ?> next, final TrieEntry<?, ?> from)" ], [ "compare", "org.apache.commons.collections4.trie", "AbstractBitwiseTrie", "static boolean compare(final Object a, final Object b)" ], [ "transformingSortedMap", "org.apache.commons.collections4.map", "TransformedSortedMap", "public static <K, V> TransformedSortedMap<K, V> transformingSortedMap(final SortedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "transformedSortedMap", "org.apache.commons.collections4.map", "TransformedSortedMap", "public static <K, V> TransformedSortedMap<K, V> transformedSortedMap(final SortedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "predicatedMap", "org.apache.commons.collections4.map", "PredicatedMap", "public static <K, V> PredicatedMap<K, V> predicatedMap(final Map<K, V> map, final Predicate<? super K> keyPredicate, final Predicate<? super V> valuePredicate)" ], [ "fixedSizeSortedMap", "org.apache.commons.collections4.map", "FixedSizeSortedMap", "public static <K, V> FixedSizeSortedMap<K, V> fixedSizeSortedMap(final SortedMap<K, V> map)" ], [ "unmodifiableSortedMap", "org.apache.commons.collections4.map", "UnmodifiableSortedMap", "public static <K, V> SortedMap<K, V> unmodifiableSortedMap(final SortedMap<K, ? extends V> map)" ], [ "predicatedSortedMap", "org.apache.commons.collections4.map", "PredicatedSortedMap", "public static <K, V> PredicatedSortedMap<K, V> predicatedSortedMap(final SortedMap<K, V> map, final Predicate<? super K> keyPredicate, final Predicate<? super V> valuePredicate)" ], [ "defaultedMap", "org.apache.commons.collections4.map", "DefaultedMap", "public static <K, V> DefaultedMap<K, V> defaultedMap(final Map<K, V> map, final V defaultValue)" ], [ "defaultedMap", "org.apache.commons.collections4.map", "DefaultedMap", "public static <K, V> DefaultedMap<K, V> defaultedMap(final Map<K, V> map, final Factory<? extends V> factory)" ], [ "defaultedMap", "org.apache.commons.collections4.map", "DefaultedMap", "public static <K, V> Map<K, V> defaultedMap(final Map<K, V> map, final Transformer<? super K, ? extends V> transformer)" ], [ "fixedSizeMap", "org.apache.commons.collections4.map", "FixedSizeMap", "public static <K, V> FixedSizeMap<K, V> fixedSizeMap(final Map<K, V> map)" ], [ "lazySortedMap", "org.apache.commons.collections4.map", "LazySortedMap", "public static <K, V> LazySortedMap<K, V> lazySortedMap(final SortedMap<K, V> map, final Factory<? extends V> factory)" ], [ "lazySortedMap", "org.apache.commons.collections4.map", "LazySortedMap", "public static <K, V> LazySortedMap<K, V> lazySortedMap(final SortedMap<K, V> map, final Transformer<? super K, ? extends V> factory)" ], [ "unmodifiableOrderedMap", "org.apache.commons.collections4.map", "UnmodifiableOrderedMap", "public static <K, V> OrderedMap<K, V> unmodifiableOrderedMap(final OrderedMap<? extends K, ? extends V> map)" ], [ "unmodifiableMap", "org.apache.commons.collections4.map", "UnmodifiableMap", "public static <K, V> Map<K, V> unmodifiableMap(final Map<? extends K, ? extends V> map)" ], [ "listOrderedMap", "org.apache.commons.collections4.map", "ListOrderedMap", "public static <K, V> ListOrderedMap<K, V> listOrderedMap(final Map<K, V> map)" ], [ "unmodifiableEntrySet", "org.apache.commons.collections4.map", "UnmodifiableEntrySet", "public static <K, V> Set<Map.Entry<K, V>> unmodifiableEntrySet(final Set<Map.Entry<K, V>> set)" ], [ "resolve", "org.apache.commons.collections4.map", "AbstractReferenceMap", "public static ReferenceStrength resolve(final int value)" ], [ "resolve", "org.apache.commons.collections4.map", "ReferenceStrength", "public static ReferenceStrength resolve(final int value)" ], [ "multiKeyMap", "org.apache.commons.collections4.map", "MultiKeyMap", "public static <K, V> MultiKeyMap<K, V> multiKeyMap(final AbstractHashedMap<MultiKey<? extends K>, V> map)" ], [ "lazyMap", "org.apache.commons.collections4.map", "LazyMap", "public static <K, V> LazyMap<K, V> lazyMap(final Map<K, V> map, final Factory<? extends V> factory)" ], [ "lazyMap", "org.apache.commons.collections4.map", "LazyMap", "public static <V, K> LazyMap<K, V> lazyMap(final Map<K, V> map, final Transformer<? super K, ? extends V> factory)" ], [ "multiValueMap", "org.apache.commons.collections4.map", "MultiValueMap", "public static <K, V> MultiValueMap<K, V> multiValueMap(final Map<K, ? super Collection<V>> map)" ], [ "multiValueMap", "org.apache.commons.collections4.map", "MultiValueMap", "public static <K, V, C extends Collection<V>> MultiValueMap<K, V> multiValueMap(final Map<K, ? super C> map, final Class<C> collectionClass)" ], [ "multiValueMap", "org.apache.commons.collections4.map", "MultiValueMap", "public static <K, V, C extends Collection<V>> MultiValueMap<K, V> multiValueMap(final Map<K, ? super C> map, final Factory<C> collectionFactory)" ], [ "transformingMap", "org.apache.commons.collections4.map", "TransformedMap", "public static <K, V> TransformedMap<K, V> transformingMap(final Map<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "transformedMap", "org.apache.commons.collections4.map", "TransformedMap", "public static <K, V> TransformedMap<K, V> transformedMap(final Map<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "synchronizedMultiSet", "org.apache.commons.collections4", "MultiSetUtils", "public static <E> MultiSet<E> synchronizedMultiSet(final MultiSet<E> multiset)" ], [ "unmodifiableMultiSet", "org.apache.commons.collections4", "MultiSetUtils", "public static <E> MultiSet<E> unmodifiableMultiSet(final MultiSet<? extends E> multiset)" ], [ "predicatedMultiSet", "org.apache.commons.collections4", "MultiSetUtils", "public static <E> MultiSet<E> predicatedMultiSet(final MultiSet<E> multiset, final Predicate<? super E> predicate)" ], [ "emptyMultiSet", "org.apache.commons.collections4", "MultiSetUtils", "public static <E> MultiSet<E> emptyMultiSet()" ], [ "unmodifiableMultiValuedMap", "org.apache.commons.collections4.multimap", "UnmodifiableMultiValuedMap", "public static <K, V> UnmodifiableMultiValuedMap<K, V> unmodifiableMultiValuedMap(MultiValuedMap<? extends K, ? extends V> map)" ], [ "transformingMap", "org.apache.commons.collections4.multimap", "TransformedMultiValuedMap", "public static <K, V> TransformedMultiValuedMap<K, V> transformingMap(final MultiValuedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "transformedMap", "org.apache.commons.collections4.multimap", "TransformedMultiValuedMap", "public static <K, V> TransformedMultiValuedMap<K, V> transformedMap(final MultiValuedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "lazyList", "org.apache.commons.collections4.list", "LazyList", "public static <E> LazyList<E> lazyList(final List<E> list, final Factory<? extends E> factory)" ], [ "setUniqueList", "org.apache.commons.collections4.list", "SetUniqueList", "public static <E> SetUniqueList<E> setUniqueList(final List<E> list)" ], [ "unmodifiableList", "org.apache.commons.collections4.list", "UnmodifiableList", "public static <E> List<E> unmodifiableList(final List<? extends E> list)" ], [ "fixedSizeList", "org.apache.commons.collections4.list", "FixedSizeList", "public static <E> FixedSizeList<E> fixedSizeList(final List<E> list)" ], [ "transformingList", "org.apache.commons.collections4.list", "TransformedList", "public static <E> TransformedList<E> transformingList(final List<E> list, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedList", "org.apache.commons.collections4.list", "TransformedList", "public static <E> TransformedList<E> transformedList(final List<E> list, final Transformer<? super E, ? extends E> transformer)" ], [ "growthList", "org.apache.commons.collections4.list", "GrowthList", "public static <E> GrowthList<E> growthList(final List<E> list)" ], [ "predicatedList", "org.apache.commons.collections4.list", "PredicatedList", "public static <T> PredicatedList<T> predicatedList(final List<T> list, final Predicate<? super T> predicate)" ], [ "transformingQueue", "org.apache.commons.collections4.queue", "TransformedQueue", "public static <E> TransformedQueue<E> transformingQueue(final Queue<E> queue, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedQueue", "org.apache.commons.collections4.queue", "TransformedQueue", "public static <E> TransformedQueue<E> transformedQueue(final Queue<E> queue, final Transformer<? super E, ? extends E> transformer)" ], [ "unmodifiableQueue", "org.apache.commons.collections4.queue", "UnmodifiableQueue", "public static <E> Queue<E> unmodifiableQueue(final Queue<? extends E> queue)" ], [ "predicatedQueue", "org.apache.commons.collections4.queue", "PredicatedQueue", "public static <E> PredicatedQueue<E> predicatedQueue(final Queue<E> Queue, final Predicate<? super E> predicate)" ], [ "empty", "org.apache.commons.collections4", "FluentIterable", "public static <T> FluentIterable<T> empty()" ], [ "of", "org.apache.commons.collections4", "FluentIterable", "public static <T> FluentIterable<T> of(final T singleton)" ], [ "of", "org.apache.commons.collections4", "FluentIterable", "public static <T> FluentIterable<T> of(final T... elements)" ], [ "of", "org.apache.commons.collections4", "FluentIterable", "public static <T> FluentIterable<T> of(final Iterable<T> iterable)" ], [ "exceptionTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> exceptionTransformer()" ], [ "nullTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> nullTransformer()" ], [ "nopTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> nopTransformer()" ], [ "cloneTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> cloneTransformer()" ], [ "constantTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> constantTransformer(final O constantToReturn)" ], [ "asTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> asTransformer(final Closure<? super T> closure)" ], [ "asTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, Boolean> asTransformer(final Predicate<? super T> predicate)" ], [ "asTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> asTransformer(final Factory<? extends O> factory)" ], [ "chainedTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> chainedTransformer(final Transformer<? super T, ? extends T>... transformers)" ], [ "chainedTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> chainedTransformer(final Collection<? extends Transformer<? super T, ? extends T>> transformers)" ], [ "ifTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> ifTransformer(final Predicate<? super T> predicate, final Transformer<? super T, ? extends T> trueTransformer)" ], [ "ifTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> ifTransformer(final Predicate<? super I> predicate, final Transformer<? super I, ? extends O> trueTransformer, final Transformer<? super I, ? extends O> falseTransformer)" ], [ "switchTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> switchTransformer(final Predicate<? super I> predicate, final Transformer<? super I, ? extends O> trueTransformer, final Transformer<? super I, ? extends O> falseTransformer)" ], [ "switchTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> switchTransformer(final Predicate<? super I>[] predicates, final Transformer<? super I, ? extends O>[] transformers)" ], [ "switchTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> switchTransformer(final Predicate<? super I>[] predicates, final Transformer<? super I, ? extends O>[] transformers, final Transformer<? super I, ? extends O> defaultTransformer)" ], [ "switchTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> switchTransformer(final Map<Predicate<I>, Transformer<I, O>> predicatesAndTransformers)" ], [ "switchMapTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> switchMapTransformer(final Map<I, Transformer<I, O>> objectsAndTransformers)" ], [ "instantiateTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<Class<? extends T>, T> instantiateTransformer()" ], [ "instantiateTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<Class<? extends T>, T> instantiateTransformer(final Class<?>[] paramTypes, final Object[] args)" ], [ "mapTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> mapTransformer(final Map<? super I, ? extends O> map)" ], [ "invokerTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> invokerTransformer(final String methodName)" ], [ "invokerTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> invokerTransformer(final String methodName, final Class<?>[] paramTypes, final Object[] args)" ], [ "stringValueTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, String> stringValueTransformer()" ], [ "exceptionPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> exceptionPredicate()" ], [ "truePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> truePredicate()" ], [ "falsePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> falsePredicate()" ], [ "nullPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nullPredicate()" ], [ "notNullPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> notNullPredicate()" ], [ "equalPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> equalPredicate(final T value)" ], [ "identityPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> identityPredicate(final T value)" ], [ "instanceofPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static Predicate<Object> instanceofPredicate(final Class<?> type)" ], [ "uniquePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> uniquePredicate()" ], [ "invokerPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> invokerPredicate(final String methodName)" ], [ "invokerPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> invokerPredicate(final String methodName, final Class<?>[] paramTypes, final Object[] args)" ], [ "andPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> andPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "allPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> allPredicate(final Predicate<? super T>... predicates)" ], [ "allPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> allPredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "orPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> orPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "anyPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> anyPredicate(final Predicate<? super T>... predicates)" ], [ "anyPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> anyPredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "eitherPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> eitherPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "onePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> onePredicate(final Predicate<? super T>... predicates)" ], [ "onePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> onePredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "neitherPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> neitherPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "nonePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nonePredicate(final Predicate<? super T>... predicates)" ], [ "nonePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nonePredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "notPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> notPredicate(final Predicate<? super T> predicate)" ], [ "asPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> asPredicate(final Transformer<? super T, Boolean> transformer)" ], [ "nullIsExceptionPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nullIsExceptionPredicate(final Predicate<? super T> predicate)" ], [ "nullIsFalsePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nullIsFalsePredicate(final Predicate<? super T> predicate)" ], [ "nullIsTruePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nullIsTruePredicate(final Predicate<? super T> predicate)" ], [ "transformedPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> transformedPredicate(final Transformer<? super T, ? extends T> transformer, final Predicate<? super T> predicate)" ], [ "emptySet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> emptySet()" ], [ "emptySortedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> emptySortedSet()" ], [ "emptyIfNull", "org.apache.commons.collections4", "SetUtils", "public static <T> Set<T> emptyIfNull(final Set<T> set)" ], [ "isEqualSet", "org.apache.commons.collections4", "SetUtils", "public static boolean isEqualSet(final Collection<?> set1, final Collection<?> set2)" ], [ "hashCodeForSet", "org.apache.commons.collections4", "SetUtils", "public static <T> int hashCodeForSet(final Collection<T> set)" ], [ "newIdentityHashSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> newIdentityHashSet()" ], [ "synchronizedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> synchronizedSet(final Set<E> set)" ], [ "unmodifiableSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> unmodifiableSet(final Set<? extends E> set)" ], [ "predicatedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> predicatedSet(final Set<E> set, final Predicate<? super E> predicate)" ], [ "transformedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> transformedSet(final Set<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "orderedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> orderedSet(final Set<E> set)" ], [ "synchronizedSortedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> synchronizedSortedSet(final SortedSet<E> set)" ], [ "unmodifiableSortedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> unmodifiableSortedSet(final SortedSet<E> set)" ], [ "predicatedSortedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> predicatedSortedSet(final SortedSet<E> set, final Predicate<? super E> predicate)" ], [ "transformedSortedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> transformedSortedSet(final SortedSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "unmodifiableNavigableSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> unmodifiableNavigableSet(final NavigableSet<E> set)" ], [ "predicatedNavigableSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> predicatedNavigableSet(final NavigableSet<E> set, final Predicate<? super E> predicate)" ], [ "transformedNavigableSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> transformedNavigableSet(final NavigableSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "union", "org.apache.commons.collections4", "SetUtils", "public static <E> SetView<E> union(final Set<? extends E> a, final Set<? extends E> b)" ], [ "difference", "org.apache.commons.collections4", "SetUtils", "public static <E> SetView<E> difference(final Set<? extends E> a, final Set<? extends E> b)" ], [ "intersection", "org.apache.commons.collections4", "SetUtils", "public static <E> SetView<E> intersection(final Set<? extends E> a, final Set<? extends E> b)" ], [ "disjunction", "org.apache.commons.collections4", "SetUtils", "public static <E> SetView<E> disjunction(final Set<? extends E> a, final Set<? extends E> b)" ], [ "transformingSet", "org.apache.commons.collections4.set", "TransformedSet", "public static <E> TransformedSet<E> transformingSet(final Set<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedSet", "org.apache.commons.collections4.set", "TransformedSet", "public static <E> Set<E> transformedSet(final Set<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "transformingNavigableSet", "org.apache.commons.collections4.set", "TransformedNavigableSet", "public static <E> TransformedNavigableSet<E> transformingNavigableSet(final NavigableSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedNavigableSet", "org.apache.commons.collections4.set", "TransformedNavigableSet", "public static <E> TransformedNavigableSet<E> transformedNavigableSet(final NavigableSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "predicatedNavigableSet", "org.apache.commons.collections4.set", "PredicatedNavigableSet", "public static <E> PredicatedNavigableSet<E> predicatedNavigableSet(final NavigableSet<E> set, final Predicate<? super E> predicate)" ], [ "listOrderedSet", "org.apache.commons.collections4.set", "ListOrderedSet", "public static <E> ListOrderedSet<E> listOrderedSet(final Set<E> set, final List<E> list)" ], [ "listOrderedSet", "org.apache.commons.collections4.set", "ListOrderedSet", "public static <E> ListOrderedSet<E> listOrderedSet(final Set<E> set)" ], [ "listOrderedSet", "org.apache.commons.collections4.set", "ListOrderedSet", "public static <E> ListOrderedSet<E> listOrderedSet(final List<E> list)" ], [ "unmodifiableSet", "org.apache.commons.collections4.set", "UnmodifiableSet", "public static <E> Set<E> unmodifiableSet(final Set<? extends E> set)" ], [ "mapBackedSet", "org.apache.commons.collections4.set", "MapBackedSet", "public static <E, V> MapBackedSet<E, V> mapBackedSet(final Map<E, ? super V> map)" ], [ "mapBackedSet", "org.apache.commons.collections4.set", "MapBackedSet", "public static <E, V> MapBackedSet<E, V> mapBackedSet(final Map<E, ? super V> map, final V dummyValue)" ], [ "unmodifiableSortedSet", "org.apache.commons.collections4.set", "UnmodifiableSortedSet", "public static <E> SortedSet<E> unmodifiableSortedSet(final SortedSet<E> set)" ], [ "predicatedSortedSet", "org.apache.commons.collections4.set", "PredicatedSortedSet", "public static <E> PredicatedSortedSet<E> predicatedSortedSet(final SortedSet<E> set, final Predicate<? super E> predicate)" ], [ "predicatedSet", "org.apache.commons.collections4.set", "PredicatedSet", "public static <E> PredicatedSet<E> predicatedSet(final Set<E> set, final Predicate<? super E> predicate)" ], [ "unmodifiableNavigableSet", "org.apache.commons.collections4.set", "UnmodifiableNavigableSet", "public static <E> NavigableSet<E> unmodifiableNavigableSet(final NavigableSet<E> set)" ], [ "transformingSortedSet", "org.apache.commons.collections4.set", "TransformedSortedSet", "public static <E> TransformedSortedSet<E> transformingSortedSet(final SortedSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedSortedSet", "org.apache.commons.collections4.set", "TransformedSortedSet", "public static <E> TransformedSortedSet<E> transformedSortedSet(final SortedSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "get", "org.apache.commons.collections4", "EnumerationUtils", "public static <T> T get(final Enumeration<T> e, final int index)" ], [ "toList", "org.apache.commons.collections4", "EnumerationUtils", "public static <E> List<E> toList(final Enumeration<? extends E> enumeration)" ], [ "toList", "org.apache.commons.collections4", "EnumerationUtils", "public static List<String> toList(final StringTokenizer stringTokenizer)" ], [ "unmodifiableQueue", "org.apache.commons.collections4", "QueueUtils", "public static <E> Queue<E> unmodifiableQueue(final Queue<? extends E> queue)" ], [ "predicatedQueue", "org.apache.commons.collections4", "QueueUtils", "public static <E> Queue<E> predicatedQueue(final Queue<E> queue, final Predicate<? super E> predicate)" ], [ "transformingQueue", "org.apache.commons.collections4", "QueueUtils", "public static <E> Queue<E> transformingQueue(final Queue<E> queue, final Transformer<? super E, ? extends E> transformer)" ], [ "emptyQueue", "org.apache.commons.collections4", "QueueUtils", "public static <E> Queue<E> emptyQueue()" ], [ "synchronizedBag", "org.apache.commons.collections4.bag", "SynchronizedBag", "public static <E> SynchronizedBag<E> synchronizedBag(final Bag<E> bag)" ], [ "collectionBag", "org.apache.commons.collections4.bag", "CollectionBag", "public static <E> Bag<E> collectionBag(final Bag<E> bag)" ], [ "unmodifiableBag", "org.apache.commons.collections4.bag", "UnmodifiableBag", "public static <E> Bag<E> unmodifiableBag(final Bag<? extends E> bag)" ], [ "predicatedSortedBag", "org.apache.commons.collections4.bag", "PredicatedSortedBag", "public static <E> PredicatedSortedBag<E> predicatedSortedBag(final SortedBag<E> bag, final Predicate<? super E> predicate)" ], [ "unmodifiableSortedBag", "org.apache.commons.collections4.bag", "UnmodifiableSortedBag", "public static <E> SortedBag<E> unmodifiableSortedBag(final SortedBag<E> bag)" ], [ "transformingSortedBag", "org.apache.commons.collections4.bag", "TransformedSortedBag", "public static <E> TransformedSortedBag<E> transformingSortedBag(final SortedBag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedSortedBag", "org.apache.commons.collections4.bag", "TransformedSortedBag", "public static <E> TransformedSortedBag<E> transformedSortedBag(final SortedBag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "predicatedBag", "org.apache.commons.collections4.bag", "PredicatedBag", "public static <E> PredicatedBag<E> predicatedBag(final Bag<E> bag, final Predicate<? super E> predicate)" ], [ "synchronizedSortedBag", "org.apache.commons.collections4.bag", "SynchronizedSortedBag", "public static <E> SynchronizedSortedBag<E> synchronizedSortedBag(final SortedBag<E> bag)" ], [ "collectionSortedBag", "org.apache.commons.collections4.bag", "CollectionSortedBag", "public static <E> SortedBag<E> collectionSortedBag(final SortedBag<E> bag)" ], [ "transformingBag", "org.apache.commons.collections4.bag", "TransformedBag", "public static <E> Bag<E> transformingBag(final Bag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedBag", "org.apache.commons.collections4.bag", "TransformedBag", "public static <E> Bag<E> transformedBag(final Bag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "predicatedMultiSet", "org.apache.commons.collections4.multiset", "PredicatedMultiSet", "public static <E> PredicatedMultiSet<E> predicatedMultiSet(final MultiSet<E> multiset, final Predicate<? super E> predicate)" ], [ "unmodifiableMultiSet", "org.apache.commons.collections4.multiset", "UnmodifiableMultiSet", "public static <E> MultiSet<E> unmodifiableMultiSet(final MultiSet<? extends E> multiset)" ], [ "synchronizedMultiSet", "org.apache.commons.collections4.multiset", "SynchronizedMultiSet", "public static <E> SynchronizedMultiSet<E> synchronizedMultiSet(final MultiSet<E> multiset)" ], [ "synchronizedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> synchronizedBag(final Bag<E> bag)" ], [ "unmodifiableBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> unmodifiableBag(final Bag<? extends E> bag)" ], [ "predicatedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> predicatedBag(final Bag<E> bag, final Predicate<? super E> predicate)" ], [ "transformingBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> transformingBag(final Bag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "collectionBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> collectionBag(final Bag<E> bag)" ], [ "synchronizedSortedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> SortedBag<E> synchronizedSortedBag(final SortedBag<E> bag)" ], [ "unmodifiableSortedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> SortedBag<E> unmodifiableSortedBag(final SortedBag<E> bag)" ], [ "predicatedSortedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> SortedBag<E> predicatedSortedBag(final SortedBag<E> bag, final Predicate<? super E> predicate)" ], [ "transformingSortedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> SortedBag<E> transformingSortedBag(final SortedBag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "emptyBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> emptyBag()" ], [ "emptySortedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> SortedBag<E> emptySortedBag()" ], [ "resettableEmptyListIterator", "org.apache.commons.collections4.iterators", "EmptyListIterator", "public static <E> ResettableListIterator<E> resettableEmptyListIterator()" ], [ "emptyListIterator", "org.apache.commons.collections4.iterators", "EmptyListIterator", "public static <E> ListIterator<E> emptyListIterator()" ], [ "unmodifiableOrderedMapIterator", "org.apache.commons.collections4.iterators", "UnmodifiableOrderedMapIterator", "public static <K, V> OrderedMapIterator<K, V> unmodifiableOrderedMapIterator(final OrderedMapIterator<K, ? extends V> iterator)" ], [ "unmodifiableIterator", "org.apache.commons.collections4.iterators", "UnmodifiableIterator", "public static <E> Iterator<E> unmodifiableIterator(final Iterator<? extends E> iterator)" ], [ "peekingIterator", "org.apache.commons.collections4.iterators", "PeekingIterator", "public static <E> PeekingIterator<E> peekingIterator(final Iterator<? extends E> iterator)" ], [ "emptyMapIterator", "org.apache.commons.collections4.iterators", "EmptyMapIterator", "public static <K, V> MapIterator<K, V> emptyMapIterator()" ], [ "emptyOrderedIterator", "org.apache.commons.collections4.iterators", "EmptyOrderedIterator", "public static <E> OrderedIterator<E> emptyOrderedIterator()" ], [ "umodifiableListIterator", "org.apache.commons.collections4.iterators", "UnmodifiableListIterator", "public static <E> ListIterator<E> umodifiableListIterator(final ListIterator<? extends E> iterator)" ], [ "emptyOrderedMapIterator", "org.apache.commons.collections4.iterators", "EmptyOrderedMapIterator", "public static <K, V> OrderedMapIterator<K, V> emptyOrderedMapIterator()" ], [ "unmodifiableMapIterator", "org.apache.commons.collections4.iterators", "UnmodifiableMapIterator", "public static <K, V> MapIterator<K, V> unmodifiableMapIterator(final MapIterator<? extends K, ? extends V> iterator)" ], [ "resettableEmptyIterator", "org.apache.commons.collections4.iterators", "EmptyIterator", "public static <E> ResettableIterator<E> resettableEmptyIterator()" ], [ "emptyIterator", "org.apache.commons.collections4.iterators", "EmptyIterator", "public static <E> Iterator<E> emptyIterator()" ], [ "pushbackIterator", "org.apache.commons.collections4.iterators", "PushbackIterator", "public static <E> PushbackIterator<E> pushbackIterator(final Iterator<? extends E> iterator)" ], [ "readableMap", "org.apache.commons.collections4", "SplitMapUtils", "public static <K, V> IterableMap<K, V> readableMap(final Get<K, V> get)" ], [ "writableMap", "org.apache.commons.collections4", "SplitMapUtils", "public static <K, V> Map<K, V> writableMap(final Put<K, V> put)" ] ],
  "tokensProjectClassesNonPrivateStaticAttributes" : [ [ "EMPTY_ITERATOR", "org.apache.commons.collections4", "IteratorUtils", "public static final ResettableIterator EMPTY_ITERATOR = EmptyIterator.RESETTABLE_INSTANCE;" ], [ "EMPTY_LIST_ITERATOR", "org.apache.commons.collections4", "IteratorUtils", "public static final ResettableListIterator EMPTY_LIST_ITERATOR = EmptyListIterator.RESETTABLE_INSTANCE;" ], [ "EMPTY_ORDERED_ITERATOR", "org.apache.commons.collections4", "IteratorUtils", "public static final OrderedIterator EMPTY_ORDERED_ITERATOR = EmptyOrderedIterator.INSTANCE;" ], [ "EMPTY_MAP_ITERATOR", "org.apache.commons.collections4", "IteratorUtils", "public static final MapIterator EMPTY_MAP_ITERATOR = EmptyMapIterator.INSTANCE;" ], [ "EMPTY_ORDERED_MAP_ITERATOR", "org.apache.commons.collections4", "IteratorUtils", "public static final OrderedMapIterator EMPTY_ORDERED_MAP_ITERATOR = EmptyOrderedMapIterator.INSTANCE;" ], [ "NATURAL_COMPARATOR", "org.apache.commons.collections4", "ComparatorUtils", "public static final Comparator NATURAL_COMPARATOR = ComparableComparator.<Comparable>comparableComparator();" ], [ "EMPTY_MULTI_VALUED_MAP", "org.apache.commons.collections4", "MultiMapUtils", "public static final MultiValuedMap EMPTY_MULTI_VALUED_MAP = UnmodifiableMultiValuedMap.unmodifiableMultiValuedMap(new ArrayListValuedHashMap(0, 0));" ], [ "EMPTY_SORTED_MAP", "org.apache.commons.collections4", "MapUtils", "public static final SortedMap EMPTY_SORTED_MAP = UnmodifiableSortedMap.unmodifiableSortedMap(new TreeMap<Object, Object>());" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "DefaultEquator", "public static final DefaultEquator INSTANCE = new DefaultEquator<Object>();" ], [ "HASHCODE_NULL", "org.apache.commons.collections4.functors", "DefaultEquator", "public static final int HASHCODE_NULL = -1;" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "ExceptionClosure", "public static final Closure INSTANCE = new ExceptionClosure<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "NOPClosure", "public static final Closure INSTANCE = new NOPClosure<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "NullPredicate", "public static final Predicate INSTANCE = new NullPredicate<Object>();" ], [ "NULL_INSTANCE", "org.apache.commons.collections4.functors", "ConstantTransformer", "public static final Transformer NULL_INSTANCE = new ConstantTransformer<Object, Object>(null);" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "ExceptionTransformer", "public static final Transformer INSTANCE = new ExceptionTransformer<Object, Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "NOPTransformer", "public static final Transformer INSTANCE = new NOPTransformer<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "ExceptionFactory", "public static final Factory INSTANCE = new ExceptionFactory<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "ExceptionPredicate", "public static final Predicate INSTANCE = new ExceptionPredicate<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "FalsePredicate", "public static final Predicate INSTANCE = new FalsePredicate<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "CloneTransformer", "public static final Transformer INSTANCE = new CloneTransformer<Object>();" ], [ "NULL_INSTANCE", "org.apache.commons.collections4.functors", "ConstantFactory", "public static final Factory NULL_INSTANCE = new ConstantFactory<Object>(null);" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "TruePredicate", "public static final Predicate INSTANCE = new TruePredicate<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "NotNullPredicate", "public static final Predicate INSTANCE = new NotNullPredicate<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.comparators", "ComparableComparator", "public static final ComparableComparator INSTANCE = new ComparableComparator();" ], [ "EMPTY_COLLECTION", "org.apache.commons.collections4", "CollectionUtils", "public static final Collection EMPTY_COLLECTION = UnmodifiableCollection.unmodifiableCollection(new ArrayList<Object>());" ], [ "EMPTY_ITERABLE", "org.apache.commons.collections4", "IterableUtils", "static final FluentIterable EMPTY_ITERABLE = new FluentIterable<Object>() {\n\n    @Override\n    public Iterator<Object> iterator() {\n        return IteratorUtils.emptyIterator();\n    }\n};" ], [ "NULL_BIT_KEY", "org.apache.commons.collections4.trie", "KeyAnalyzer", "public static final int NULL_BIT_KEY = -1;" ], [ "EQUAL_BIT_KEY", "org.apache.commons.collections4.trie", "KeyAnalyzer", "public static final int EQUAL_BIT_KEY = -2;" ], [ "OUT_OF_BOUNDS_BIT_KEY", "org.apache.commons.collections4.trie", "KeyAnalyzer", "public static final int OUT_OF_BOUNDS_BIT_KEY = -3;" ], [ "INSTANCE", "org.apache.commons.collections4.trie.analyzer", "StringKeyAnalyzer", "public static final StringKeyAnalyzer INSTANCE = new StringKeyAnalyzer();" ], [ "LENGTH", "org.apache.commons.collections4.trie.analyzer", "StringKeyAnalyzer", "public static final int LENGTH = Character.SIZE;" ], [ "NO_NEXT_ENTRY", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String NO_NEXT_ENTRY = \"No next() entry in the iteration\";" ], [ "NO_PREVIOUS_ENTRY", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String NO_PREVIOUS_ENTRY = \"No previous() entry in the iteration\";" ], [ "REMOVE_INVALID", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String REMOVE_INVALID = \"remove() can only be called once after next()\";" ], [ "GETKEY_INVALID", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String GETKEY_INVALID = \"getKey() can only be called after next() and before remove()\";" ], [ "GETVALUE_INVALID", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String GETVALUE_INVALID = \"getValue() can only be called after next() and before remove()\";" ], [ "SETVALUE_INVALID", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String SETVALUE_INVALID = \"setValue() can only be called after next() and before remove()\";" ], [ "DEFAULT_CAPACITY", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final int DEFAULT_CAPACITY = 16;" ], [ "DEFAULT_THRESHOLD", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final int DEFAULT_THRESHOLD = 12;" ], [ "DEFAULT_LOAD_FACTOR", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final float DEFAULT_LOAD_FACTOR = 0.75f;" ], [ "MAXIMUM_CAPACITY", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final int MAXIMUM_CAPACITY = 1 << 30;" ], [ "NULL", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final Object NULL = new Object();" ], [ "DEFAULT_MAX_SIZE", "org.apache.commons.collections4.map", "LRUMap", "protected static final int DEFAULT_MAX_SIZE = 100;" ], [ "EMPTY_MULTISET", "org.apache.commons.collections4", "MultiSetUtils", "public static final MultiSet EMPTY_MULTISET = UnmodifiableMultiSet.unmodifiableMultiSet(new HashMultiSet<Object>());" ], [ "EMPTY_SORTED_SET", "org.apache.commons.collections4", "SetUtils", "public static final SortedSet EMPTY_SORTED_SET = UnmodifiableSortedSet.unmodifiableSortedSet(new TreeSet<Object>());" ], [ "EMPTY_QUEUE", "org.apache.commons.collections4", "QueueUtils", "public static final Queue EMPTY_QUEUE = UnmodifiableQueue.unmodifiableQueue(new LinkedList<Object>());" ], [ "EMPTY_BAG", "org.apache.commons.collections4", "BagUtils", "public static final Bag EMPTY_BAG = UnmodifiableBag.unmodifiableBag(new HashBag<Object>());" ], [ "EMPTY_SORTED_BAG", "org.apache.commons.collections4", "BagUtils", "public static final Bag EMPTY_SORTED_BAG = UnmodifiableSortedBag.unmodifiableSortedBag(new TreeBag<Object>());" ], [ "RESETTABLE_INSTANCE", "org.apache.commons.collections4.iterators", "EmptyListIterator", "public static final ResettableListIterator RESETTABLE_INSTANCE = new EmptyListIterator<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.iterators", "EmptyListIterator", "public static final ListIterator INSTANCE = RESETTABLE_INSTANCE;" ], [ "INSTANCE", "org.apache.commons.collections4.iterators", "EmptyMapIterator", "public static final MapIterator INSTANCE = new EmptyMapIterator<Object, Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.iterators", "EmptyOrderedIterator", "public static final OrderedIterator INSTANCE = new EmptyOrderedIterator<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.iterators", "EmptyOrderedMapIterator", "public static final OrderedMapIterator INSTANCE = new EmptyOrderedMapIterator<Object, Object>();" ], [ "RESETTABLE_INSTANCE", "org.apache.commons.collections4.iterators", "EmptyIterator", "public static final ResettableIterator RESETTABLE_INSTANCE = new EmptyIterator<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.iterators", "EmptyIterator", "public static final Iterator INSTANCE = RESETTABLE_INSTANCE;" ] ],
  "tokensMethodJavadocValues" : [ [ "0", "int" ], [ "0", "int" ] ],
  "tokensMethodArguments" : [ [ "predicates", "", "Predicate<? super I>[]" ], [ "transformers", "", "Transformer<? super I, ? extends O>[]" ], [ "defaultTransformer", "org.apache.commons.collections4.Transformer", "Transformer<? super I, ? extends O>" ] ],
  "tokensMethodVariablesNonPrivateNonStaticNonVoidMethods" : [ [ "getClass", "java.lang", "Object", "public final native Class<? extends Object> getClass()" ], [ "hashCode", "java.lang", "Object", "public native int hashCode()" ], [ "equals", "java.lang", "Object", "public boolean equals(Object arg0)" ], [ "toString", "java.lang", "Object", "public String toString()" ], [ "clone", "java.lang", "Object", "protected native Object clone() throws CloneNotSupportedException" ], [ "equals", "", "org.apache.commons.collections4.Predicate<? super I>[]", "public boolean equals(Object);" ], [ "toString", "", "org.apache.commons.collections4.Predicate<? super I>[]", "public String toString()" ], [ "hashCode", "", "org.apache.commons.collections4.Predicate<? super I>[]", "public native int hashCode()" ], [ "getClass", "", "org.apache.commons.collections4.Predicate<? super I>[]", "public final native Class getClass();" ], [ "clone", "", "org.apache.commons.collections4.Predicate<? super I>[]", "public T[] clone();" ], [ "equals", "", "org.apache.commons.collections4.Transformer<? super I, ? extends O>[]", "public boolean equals(Object);" ], [ "toString", "", "org.apache.commons.collections4.Transformer<? super I, ? extends O>[]", "public String toString()" ], [ "hashCode", "", "org.apache.commons.collections4.Transformer<? super I, ? extends O>[]", "public native int hashCode()" ], [ "getClass", "", "org.apache.commons.collections4.Transformer<? super I, ? extends O>[]", "public final native Class getClass();" ], [ "clone", "", "org.apache.commons.collections4.Transformer<? super I, ? extends O>[]", "public T[] clone();" ], [ "transform", "org.apache.commons.collections4", "Transformer", "public abstract O transform(I arg0)" ] ],
  "tokensMethodVariablesNonPrivateNonStaticAttributes" : [ [ "length", "org.apache.commons.collections4", "Predicate[]", "public final int length;" ], [ "length", "org.apache.commons.collections4", "Transformer[]", "public final int length;" ] ],
  "tokensOracleVariablesNonPrivateNonStaticNonVoidMethods" : [ ],
  "tokensOracleVariablesNonPrivateNonStaticAttributes" : [ ]
}, {
  "id" : 8969,
  "oracle" : ";",
  "oracleType" : "EXCEPT_POST",
  "projectName" : "commons-collections4-4.1",
  "packageName" : "org.apache.commons.collections4",
  "className" : "TransformerUtils",
  "javadocTag" : "@throws NullPointerException if any transformer in the map is null",
  "methodJavadoc" : "    /**\n     * Create a new Transformer that calls one of the transformers depending\n     * on the predicates.\n     * <p>\n     * The Map consists of Predicate keys and Transformer values. A transformer\n     * is called if its matching predicate returns true. Each predicate is evaluated\n     * until one returns true. If no predicates evaluate to true, the default\n     * transformer is called. The default transformer is set in the map with a\n     * null key. If no default transformer is set, null will be returned in a default\n     * case. The ordering is that of the iterator() method on the entryset collection\n     * of the map.\n     *\n     * @param <I>  the input type\n     * @param <O>  the output type\n     * @param predicatesAndTransformers  a map of predicates to transformers\n     * @return the transformer\n     * @throws NullPointerException if the map is null\n     * @throws NullPointerException if any transformer in the map is null\n     * @throws ClassCastException  if the map elements are of the wrong type\n     * @see SwitchTransformer\n     */",
  "methodSourceCode" : "public static <I, O> Transformer<I, O> switchTransformer(final Map<Predicate<I>, Transformer<I, O>> predicatesAndTransformers){\n    return SwitchTransformer.switchTransformer(predicatesAndTransformers);\n}",
  "classJavadoc" : "/**\n * <code>TransformerUtils</code> provides reference implementations and\n * utilities for the Transformer functor interface. The supplied transformers are:\n * <ul>\n * <li>Invoker - returns the result of a method call on the input object\n * <li>Clone - returns a clone of the input object\n * <li>Constant - always returns the same object\n * <li>Closure - performs a Closure and returns the input object\n * <li>Predicate - returns the result of the predicate as a Boolean\n * <li>Factory - returns a new object from a factory\n * <li>Chained - chains two or more transformers together\n * <li>If - calls one transformer or another based on a predicate\n * <li>Switch - calls one transformer based on one or more predicates\n * <li>SwitchMap - calls one transformer looked up from a Map\n * <li>Instantiate - the Class input object is instantiated\n * <li>Map - returns an object from a supplied Map\n * <li>Null - always returns null\n * <li>NOP - returns the input object, which should be immutable\n * <li>Exception - always throws an exception\n * <li>StringValue - returns a <code>java.lang.String</code> representation of the input object\n * </ul>\n * <p>\n * Since v4.1 only transformers which are considered to be unsafe are\n * Serializable. Transformers considered to be unsafe for serialization are:\n * <ul>\n * <li>Invoker\n * <li>Clone\n * <li>Instantiate\n * </ul>\n *\n * @since 3.0\n * @version $Id: TransformerUtils.java 1714362 2015-11-14 20:38:02Z tn $\n */",
  "classSourceCode" : "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.commons.collections4;\n\nimport java.util.Collection;\nimport java.util.Map;\n\nimport org.apache.commons.collections4.functors.ChainedTransformer;\nimport org.apache.commons.collections4.functors.CloneTransformer;\nimport org.apache.commons.collections4.functors.ClosureTransformer;\nimport org.apache.commons.collections4.functors.ConstantTransformer;\nimport org.apache.commons.collections4.functors.EqualPredicate;\nimport org.apache.commons.collections4.functors.ExceptionTransformer;\nimport org.apache.commons.collections4.functors.FactoryTransformer;\nimport org.apache.commons.collections4.functors.IfTransformer;\nimport org.apache.commons.collections4.functors.InstantiateTransformer;\nimport org.apache.commons.collections4.functors.InvokerTransformer;\nimport org.apache.commons.collections4.functors.MapTransformer;\nimport org.apache.commons.collections4.functors.NOPTransformer;\nimport org.apache.commons.collections4.functors.PredicateTransformer;\nimport org.apache.commons.collections4.functors.StringValueTransformer;\nimport org.apache.commons.collections4.functors.SwitchTransformer;\n\n/**\n * <code>TransformerUtils</code> provides reference implementations and\n * utilities for the Transformer functor interface. The supplied transformers are:\n * <ul>\n * <li>Invoker - returns the result of a method call on the input object\n * <li>Clone - returns a clone of the input object\n * <li>Constant - always returns the same object\n * <li>Closure - performs a Closure and returns the input object\n * <li>Predicate - returns the result of the predicate as a Boolean\n * <li>Factory - returns a new object from a factory\n * <li>Chained - chains two or more transformers together\n * <li>If - calls one transformer or another based on a predicate\n * <li>Switch - calls one transformer based on one or more predicates\n * <li>SwitchMap - calls one transformer looked up from a Map\n * <li>Instantiate - the Class input object is instantiated\n * <li>Map - returns an object from a supplied Map\n * <li>Null - always returns null\n * <li>NOP - returns the input object, which should be immutable\n * <li>Exception - always throws an exception\n * <li>StringValue - returns a <code>java.lang.String</code> representation of the input object\n * </ul>\n * <p>\n * Since v4.1 only transformers which are considered to be unsafe are\n * Serializable. Transformers considered to be unsafe for serialization are:\n * <ul>\n * <li>Invoker\n * <li>Clone\n * <li>Instantiate\n * </ul>\n *\n * @since 3.0\n * @version $Id: TransformerUtils.java 1714362 2015-11-14 20:38:02Z tn $\n */\npublic class TransformerUtils {\n\n    /**\n     * This class is not normally instantiated.\n     */\n    private TransformerUtils() {}\n\n    /**\n     * Gets a transformer that always throws an exception.\n     * This could be useful during testing as a placeholder.\n     *\n     * @param <I>  the input type\n     * @param <O>  the output type\n     * @return the transformer\n     * @see ExceptionTransformer\n     */\n    public static <I, O> Transformer<I, O> exceptionTransformer() {\n        return ExceptionTransformer.exceptionTransformer();\n    }\n\n    /**\n     * Gets a transformer that always returns null.\n     *\n     * @param <I>  the input type\n     * @param <O>  the output type\n     * @return the transformer\n     * @see ConstantTransformer\n     */\n    public static <I, O> Transformer<I, O> nullTransformer() {\n        return ConstantTransformer.nullTransformer();\n    }\n\n    /**\n     * Gets a transformer that returns the input object.\n     * The input object should be immutable to maintain the\n     * contract of Transformer (although this is not checked).\n     *\n     * @param <T>  the input/output type\n     * @return the transformer\n     * @see NOPTransformer\n     */\n    public static <T> Transformer<T, T> nopTransformer() {\n        return NOPTransformer.nopTransformer();\n    }\n\n    /**\n     * Gets a transformer that returns a clone of the input object.\n     * The input object will be cloned using one of these techniques (in order):\n     * <ul>\n     * <li>public clone method\n     * <li>public copy constructor\n     * <li>serialization clone\n     * <ul>\n     *\n     * @param <T>  the input/output type\n     * @return the transformer\n     * @see CloneTransformer\n     */\n    public static <T> Transformer<T, T> cloneTransformer() {\n        return CloneTransformer.cloneTransformer();\n    }\n\n    /**\n     * Creates a Transformer that will return the same object each time the\n     * transformer is used.\n     *\n     * @param <I>  the input type\n     * @param <O>  the output type\n     * @param constantToReturn  the constant object to return each time in the transformer\n     * @return the transformer.\n     * @see ConstantTransformer\n     */\n    public static <I, O> Transformer<I, O> constantTransformer(final O constantToReturn) {\n        return ConstantTransformer.constantTransformer(constantToReturn);\n    }\n\n    /**\n     * Creates a Transformer that calls a Closure each time the transformer is used.\n     * The transformer returns the input object.\n     *\n     * @param <T>  the input/output type\n     * @param closure  the closure to run each time in the transformer, not null\n     * @return the transformer\n     * @throws NullPointerException if the closure is null\n     * @see ClosureTransformer\n     */\n    public static <T> Transformer<T, T> asTransformer(final Closure<? super T> closure) {\n        return ClosureTransformer.closureTransformer(closure);\n    }\n\n    /**\n     * Creates a Transformer that calls a Predicate each time the transformer is used.\n     * The transformer will return either Boolean.TRUE or Boolean.FALSE.\n     *\n     * @param <T>  the input type\n     * @param predicate  the predicate to run each time in the transformer, not null\n     * @return the transformer\n     * @throws NullPointerException if the predicate is null\n     * @see PredicateTransformer\n     */\n    public static <T> Transformer<T, Boolean> asTransformer(final Predicate<? super T> predicate) {\n        return PredicateTransformer.predicateTransformer(predicate);\n    }\n\n    /**\n     * Creates a Transformer that calls a Factory each time the transformer is used.\n     * The transformer will return the value returned by the factory.\n     *\n     * @param <I>  the input type\n     * @param <O>  the output type\n     * @param factory  the factory to run each time in the transformer, not null\n     * @return the transformer\n     * @throws NullPointerException if the factory is null\n     * @see FactoryTransformer\n     */\n    public static <I, O> Transformer<I, O> asTransformer(final Factory<? extends O> factory) {\n        return FactoryTransformer.factoryTransformer(factory);\n    }\n\n    /**\n     * Create a new Transformer that calls each transformer in turn, passing the\n     * result into the next transformer.\n     *\n     * @param <T>  the input/output type\n     * @param transformers  an array of transformers to chain\n     * @return the transformer\n     * @throws NullPointerException if the transformers array or any of the transformers is null\n     * @see ChainedTransformer\n     */\n    public static <T> Transformer<T, T> chainedTransformer(\n            final Transformer<? super T, ? extends T>... transformers) {\n        return ChainedTransformer.chainedTransformer(transformers);\n    }\n\n    /**\n     * Create a new Transformer that calls each transformer in turn, passing the\n     * result into the next transformer. The ordering is that of the iterator()\n     * method on the collection.\n     *\n     * @param <T>  the input/output type\n     * @param transformers  a collection of transformers to chain\n     * @return the transformer\n     * @throws NullPointerException if the transformers collection or any of the transformers is null\n     * @see ChainedTransformer\n     */\n    public static <T> Transformer<T, T> chainedTransformer(\n            final Collection<? extends Transformer<? super T, ? extends T>> transformers) {\n        return ChainedTransformer.chainedTransformer(transformers);\n    }\n\n    /**\n     * Create a new Transformer that calls the transformer if the predicate is true,\n     * otherwise the input object is returned unchanged.\n     *\n     * @param <T>  the input / output type\n     * @param predicate  the predicate to switch on\n     * @param trueTransformer  the transformer called if the predicate is true\n     * @return the transformer\n     * @throws NullPointerException if either the predicate or transformer is null\n     * @see IfTransformer\n     * @since 4.1\n     */\n    public static <T> Transformer<T, T> ifTransformer(final Predicate<? super T> predicate,\n                                                      final Transformer<? super T, ? extends T> trueTransformer) {\n        return IfTransformer.ifTransformer(predicate, trueTransformer);\n    }\n\n    /**\n     * Create a new Transformer that calls one of two transformers depending\n     * on the specified predicate.\n     *\n     * @param <I>  the input type\n     * @param <O>  the output type\n     * @param predicate  the predicate to switch on\n     * @param trueTransformer  the transformer called if the predicate is true\n     * @param falseTransformer  the transformer called if the predicate is false\n     * @return the transformer\n     * @throws NullPointerException if either the predicate or transformer is null\n     * @see IfTransformer\n     * @since 4.1\n     */\n    public static <I, O> Transformer<I, O> ifTransformer(final Predicate<? super I> predicate,\n                                                         final Transformer<? super I, ? extends O> trueTransformer,\n                                                         final Transformer<? super I, ? extends O> falseTransformer) {\n        return IfTransformer.ifTransformer(predicate, trueTransformer, falseTransformer);\n    }\n\n    /**\n     * Create a new Transformer that calls one of two transformers depending\n     * on the specified predicate.\n     *\n     * @param <I>  the input type\n     * @param <O>  the output type\n     * @param predicate  the predicate to switch on\n     * @param trueTransformer  the transformer called if the predicate is true\n     * @param falseTransformer  the transformer called if the predicate is false\n     * @return the transformer\n     * @throws NullPointerException if either the predicate or transformer is null\n     * @see SwitchTransformer\n     * @deprecated as of 4.1, use {@link #ifTransformer(Predicate, Transformer, Transformer))\n     */\n    @SuppressWarnings(\"unchecked\")\n    @Deprecated\n    public static <I, O> Transformer<I, O> switchTransformer(final Predicate<? super I> predicate,\n            final Transformer<? super I, ? extends O> trueTransformer,\n            final Transformer<? super I, ? extends O> falseTransformer) {\n        return SwitchTransformer.switchTransformer(new Predicate[] { predicate },\n                                                   new Transformer[] { trueTransformer }, falseTransformer);\n    }\n\n    /**\n     * Create a new Transformer that calls one of the transformers depending\n     * on the predicates. The transformer at array location 0 is called if the\n     * predicate at array location 0 returned true. Each predicate is evaluated\n     * until one returns true. If no predicates evaluate to true, null is returned.\n     *\n     * @param <I>  the input type\n     * @param <O>  the output type\n     * @param predicates  an array of predicates to check\n     * @param transformers  an array of transformers to call\n     * @return the transformer\n     * @throws NullPointerException if the either array is null\n     * @throws NullPointerException if any element in the arrays is null\n     * @throws IllegalArgumentException if the arrays have different sizes\n     * @see SwitchTransformer\n     */\n    public static <I, O> Transformer<I, O> switchTransformer(final Predicate<? super I>[] predicates,\n            final Transformer<? super I, ? extends O>[] transformers) {\n        return SwitchTransformer.switchTransformer(predicates, transformers, null);\n    }\n\n    /**\n     * Create a new Transformer that calls one of the transformers depending\n     * on the predicates. The transformer at array location 0 is called if the\n     * predicate at array location 0 returned true. Each predicate is evaluated\n     * until one returns true. If no predicates evaluate to true, the default\n     * transformer is called. If the default transformer is null, null is returned.\n     *\n     * @param <I>  the input type\n     * @param <O>  the output type\n     * @param predicates  an array of predicates to check\n     * @param transformers  an array of transformers to call\n     * @param defaultTransformer  the default to call if no predicate matches, null means return null\n     * @return the transformer\n     * @throws NullPointerException if the either array is null\n     * @throws NullPointerException if any element in the arrays is null\n     * @throws IllegalArgumentException if the arrays have different sizes\n     * @see SwitchTransformer\n     */\n    public static <I, O> Transformer<I, O> switchTransformer(final Predicate<? super I>[] predicates,\n            final Transformer<? super I, ? extends O>[] transformers,\n            final Transformer<? super I, ? extends O> defaultTransformer) {\n        return SwitchTransformer.switchTransformer(predicates, transformers, defaultTransformer);\n    }\n\n    /**\n     * Create a new Transformer that calls one of the transformers depending\n     * on the predicates.\n     * <p>\n     * The Map consists of Predicate keys and Transformer values. A transformer\n     * is called if its matching predicate returns true. Each predicate is evaluated\n     * until one returns true. If no predicates evaluate to true, the default\n     * transformer is called. The default transformer is set in the map with a\n     * null key. If no default transformer is set, null will be returned in a default\n     * case. The ordering is that of the iterator() method on the entryset collection\n     * of the map.\n     *\n     * @param <I>  the input type\n     * @param <O>  the output type\n     * @param predicatesAndTransformers  a map of predicates to transformers\n     * @return the transformer\n     * @throws NullPointerException if the map is null\n     * @throws NullPointerException if any transformer in the map is null\n     * @throws ClassCastException  if the map elements are of the wrong type\n     * @see SwitchTransformer\n     */\n    public static <I, O> Transformer<I, O> switchTransformer(\n            final Map<Predicate<I>, Transformer<I, O>> predicatesAndTransformers) {\n        return SwitchTransformer.switchTransformer(predicatesAndTransformers);\n    }\n\n    /**\n     * Create a new Transformer that uses the input object as a key to find the\n     * transformer to call.\n     * <p>\n     * The Map consists of object keys and Transformer values. A transformer\n     * is called if the input object equals the key. If there is no match, the\n     * default transformer is called. The default transformer is set in the map\n     * using a null key. If no default is set, null will be returned in a default case.\n     *\n     * @param <I>  the input type\n     * @param <O>  the output type\n     * @param objectsAndTransformers  a map of objects to transformers\n     * @return the transformer\n     * @throws NullPointerException if the map is null\n     * @throws NullPointerException if any transformer in the map is null\n     * @see SwitchTransformer\n     */\n    @SuppressWarnings(\"unchecked\")\n    public static <I, O> Transformer<I, O> switchMapTransformer(\n            final Map<I, Transformer<I, O>> objectsAndTransformers) {\n\n        if (objectsAndTransformers == null) {\n            throw new NullPointerException(\"The object and transformer map must not be null\");\n        }\n        final Transformer<? super I, ? extends O> def = objectsAndTransformers.remove(null);\n        final int size = objectsAndTransformers.size();\n        final Transformer<? super I, ? extends O>[] trs = new Transformer[size];\n        final Predicate<I>[] preds = new Predicate[size];\n        int i = 0;\n        for (final Map.Entry<I, Transformer<I, O>> entry : objectsAndTransformers.entrySet()) {\n            preds[i] = EqualPredicate.<I>equalPredicate(entry.getKey());\n            trs[i++] = entry.getValue();\n        }\n        return TransformerUtils.switchTransformer(preds, trs, def);\n    }\n\n    /**\n     * Gets a Transformer that expects an input Class object that it will instantiate.\n     *\n     * @param <T>  the output type\n     * @return the transformer\n     * @see InstantiateTransformer\n     */\n    public static <T> Transformer<Class<? extends T>, T> instantiateTransformer() {\n        return InstantiateTransformer.instantiateTransformer();\n    }\n\n    /**\n     * Creates a Transformer that expects an input Class object that it will\n     * instantiate. The constructor used is determined by the arguments specified\n     * to this method.\n     *\n     * @param <T>  the output type\n     * @param paramTypes  parameter types for the constructor, can be null\n     * @param args  the arguments to pass to the constructor, can be null\n     * @return the transformer\n     * @throws IllegalArgumentException if the paramTypes and args don't match\n     * @see InstantiateTransformer\n     */\n    public static <T> Transformer<Class<? extends T>, T> instantiateTransformer(\n            final Class<?>[] paramTypes, final Object[] args) {\n        return InstantiateTransformer.instantiateTransformer(paramTypes, args);\n    }\n\n    /**\n     * Creates a Transformer that uses the passed in Map to transform the input\n     * object (as a simple lookup).\n     *\n     * @param <I>  the input type\n     * @param <O>  the output type\n     * @param map  the map to use to transform the objects\n     * @return the transformer, or {@link ConstantTransformer#nullTransformer()} if the\n     *   {@code map} is {@code null}\n     * @see MapTransformer\n     */\n    public static <I, O> Transformer<I, O> mapTransformer(final Map<? super I, ? extends O> map) {\n        return MapTransformer.mapTransformer(map);\n    }\n\n    /**\n     * Gets a Transformer that invokes a method on the input object.\n     * The method must have no parameters. If the input object is null,\n     * null is returned.\n     * <p>\n     * For example, <code>TransformerUtils.invokerTransformer(\"getName\");</code>\n     * will call the <code>getName/code> method on the input object to\n     * determine the transformer result.\n     *\n     * @param <I>  the input type\n     * @param <O>  the output type\n     * @param methodName  the method name to call on the input object, may not be null\n     * @return the transformer\n     * @throws NullPointerException if the methodName is null.\n     * @see InvokerTransformer\n     */\n    public static <I, O> Transformer<I, O> invokerTransformer(final String methodName) {\n        return InvokerTransformer.invokerTransformer(methodName, null, null);\n    }\n\n    /**\n     * Gets a Transformer that invokes a method on the input object.\n     * The method parameters are specified. If the input object is {@code null},\n     * {@code null} is returned.\n     *\n     * @param <I>  the input type\n     * @param <O>  the output type\n     * @param methodName  the name of the method\n     * @param paramTypes  the parameter types\n     * @param args  the arguments\n     * @return the transformer\n     * @throws NullPointerException if the method name is null\n     * @throws IllegalArgumentException if the paramTypes and args don't match\n     * @see InvokerTransformer\n     */\n    public static <I, O> Transformer<I, O> invokerTransformer(final String methodName, final Class<?>[] paramTypes,\n                                                              final Object[] args) {\n        return InvokerTransformer.invokerTransformer(methodName, paramTypes, args);\n    }\n\n    /**\n     * Gets a transformer that returns a <code>java.lang.String</code>\n     * representation of the input object. This is achieved via the\n     * <code>toString</code> method, <code>null</code> returns 'null'.\n     *\n     * @param <T>  the input type\n     * @return the transformer\n     * @see StringValueTransformer\n     */\n    public static <T> Transformer<T, String> stringValueTransformer() {\n        return StringValueTransformer.stringValueTransformer();\n    }\n\n}\n",
  "tokensGeneralGrammar" : [ "null", "true", "false", ",", ".", ":", ";", "?", "(", ")", "jdVar", "stream", "Arrays", "allMatch", "noneMatch", "anyMatch", "~", ">>", "<<", ">>>", "|", "&", "^", "+", "-", "/", "*", "%", "&&", "||", ">=", "<=", ">", "<", "==", "!=", "instanceof", "class", "methodResultID", "this" ],
  "tokensGeneralValuesGlobalDictionary" : [ [ "0", "int" ], [ "1", "int" ], [ "-1", "int" ], [ "0.0", "double" ], [ "1.0", "double" ], [ "-1.0", "double" ], [ "\"\"", "String" ], [ "\" \"", "String" ] ],
  "tokensProjectClasses" : [ [ "BidiMap", "org.apache.commons.collections4" ], [ "Equator", "org.apache.commons.collections4" ], [ "MultiSet", "org.apache.commons.collections4" ], [ "IteratorUtils", "org.apache.commons.collections4" ], [ "ComparatorUtils", "org.apache.commons.collections4" ], [ "FunctorException", "org.apache.commons.collections4" ], [ "AbstractDualBidiMap", "org.apache.commons.collections4.bidimap" ], [ "UnmodifiableBidiMap", "org.apache.commons.collections4.bidimap" ], [ "AbstractOrderedBidiMapDecorator", "org.apache.commons.collections4.bidimap" ], [ "UnmodifiableOrderedBidiMap", "org.apache.commons.collections4.bidimap" ], [ "AbstractBidiMapDecorator", "org.apache.commons.collections4.bidimap" ], [ "DualLinkedHashBidiMap", "org.apache.commons.collections4.bidimap" ], [ "UnmodifiableSortedBidiMap", "org.apache.commons.collections4.bidimap" ], [ "AbstractSortedBidiMapDecorator", "org.apache.commons.collections4.bidimap" ], [ "DualHashBidiMap", "org.apache.commons.collections4.bidimap" ], [ "DualTreeBidiMap", "org.apache.commons.collections4.bidimap" ], [ "TreeBidiMap", "org.apache.commons.collections4.bidimap" ], [ "MultiMapUtils", "org.apache.commons.collections4" ], [ "BoundedCollection", "org.apache.commons.collections4" ], [ "UnmodifiableBoundedCollection", "org.apache.commons.collections4.collection" ], [ "CompositeCollection", "org.apache.commons.collections4.collection" ], [ "TransformedCollection", "org.apache.commons.collections4.collection" ], [ "PredicatedCollection", "org.apache.commons.collections4.collection" ], [ "IndexedCollection", "org.apache.commons.collections4.collection" ], [ "SynchronizedCollection", "org.apache.commons.collections4.collection" ], [ "UnmodifiableCollection", "org.apache.commons.collections4.collection" ], [ "AbstractCollectionDecorator", "org.apache.commons.collections4.collection" ], [ "OrderedBidiMap", "org.apache.commons.collections4" ], [ "FactoryUtils", "org.apache.commons.collections4" ], [ "IterableGet", "org.apache.commons.collections4" ], [ "ListUtils", "org.apache.commons.collections4" ], [ "Closure", "org.apache.commons.collections4" ], [ "IterableSortedMap", "org.apache.commons.collections4" ], [ "MapUtils", "org.apache.commons.collections4" ], [ "Transformer", "org.apache.commons.collections4" ], [ "DefaultEquator", "org.apache.commons.collections4.functors" ], [ "StringValueTransformer", "org.apache.commons.collections4.functors" ], [ "PredicateDecorator", "org.apache.commons.collections4.functors" ], [ "IfTransformer", "org.apache.commons.collections4.functors" ], [ "IdentityPredicate", "org.apache.commons.collections4.functors" ], [ "ExceptionClosure", "org.apache.commons.collections4.functors" ], [ "NOPClosure", "org.apache.commons.collections4.functors" ], [ "ClosureTransformer", "org.apache.commons.collections4.functors" ], [ "FunctorUtils", "org.apache.commons.collections4.functors" ], [ "TransformerPredicate", "org.apache.commons.collections4.functors" ], [ "NullPredicate", "org.apache.commons.collections4.functors" ], [ "ConstantTransformer", "org.apache.commons.collections4.functors" ], [ "PredicateTransformer", "org.apache.commons.collections4.functors" ], [ "WhileClosure", "org.apache.commons.collections4.functors" ], [ "ForClosure", "org.apache.commons.collections4.functors" ], [ "NullIsTruePredicate", "org.apache.commons.collections4.functors" ], [ "TransformedPredicate", "org.apache.commons.collections4.functors" ], [ "NonePredicate", "org.apache.commons.collections4.functors" ], [ "ExceptionTransformer", "org.apache.commons.collections4.functors" ], [ "SwitchTransformer", "org.apache.commons.collections4.functors" ], [ "TransformerClosure", "org.apache.commons.collections4.functors" ], [ "OrPredicate", "org.apache.commons.collections4.functors" ], [ "NOPTransformer", "org.apache.commons.collections4.functors" ], [ "MapTransformer", "org.apache.commons.collections4.functors" ], [ "ExceptionFactory", "org.apache.commons.collections4.functors" ], [ "ChainedClosure", "org.apache.commons.collections4.functors" ], [ "AndPredicate", "org.apache.commons.collections4.functors" ], [ "PrototypeFactory", "org.apache.commons.collections4.functors" ], [ "ExceptionPredicate", "org.apache.commons.collections4.functors" ], [ "AbstractQuantifierPredicate", "org.apache.commons.collections4.functors" ], [ "InstanceofPredicate", "org.apache.commons.collections4.functors" ], [ "InvokerTransformer", "org.apache.commons.collections4.functors" ], [ "FalsePredicate", "org.apache.commons.collections4.functors" ], [ "CloneTransformer", "org.apache.commons.collections4.functors" ], [ "NotPredicate", "org.apache.commons.collections4.functors" ], [ "ConstantFactory", "org.apache.commons.collections4.functors" ], [ "ChainedTransformer", "org.apache.commons.collections4.functors" ], [ "ComparatorPredicate", "org.apache.commons.collections4.functors" ], [ "CatchAndRethrowClosure", "org.apache.commons.collections4.functors" ], [ "AllPredicate", "org.apache.commons.collections4.functors" ], [ "NullIsFalsePredicate", "org.apache.commons.collections4.functors" ], [ "NullIsExceptionPredicate", "org.apache.commons.collections4.functors" ], [ "AnyPredicate", "org.apache.commons.collections4.functors" ], [ "TruePredicate", "org.apache.commons.collections4.functors" ], [ "FactoryTransformer", "org.apache.commons.collections4.functors" ], [ "NotNullPredicate", "org.apache.commons.collections4.functors" ], [ "SwitchClosure", "org.apache.commons.collections4.functors" ], [ "UniquePredicate", "org.apache.commons.collections4.functors" ], [ "InstantiateTransformer", "org.apache.commons.collections4.functors" ], [ "OnePredicate", "org.apache.commons.collections4.functors" ], [ "EqualPredicate", "org.apache.commons.collections4.functors" ], [ "InstantiateFactory", "org.apache.commons.collections4.functors" ], [ "IfClosure", "org.apache.commons.collections4.functors" ], [ "ResettableListIterator", "org.apache.commons.collections4" ], [ "OrderedIterator", "org.apache.commons.collections4" ], [ "ComparatorChain", "org.apache.commons.collections4.comparators" ], [ "BooleanComparator", "org.apache.commons.collections4.comparators" ], [ "ReverseComparator", "org.apache.commons.collections4.comparators" ], [ "ComparableComparator", "org.apache.commons.collections4.comparators" ], [ "TransformingComparator", "org.apache.commons.collections4.comparators" ], [ "FixedOrderComparator", "org.apache.commons.collections4.comparators" ], [ "NullComparator", "org.apache.commons.collections4.comparators" ], [ "CollectionUtils", "org.apache.commons.collections4" ], [ "ListValuedMap", "org.apache.commons.collections4" ], [ "AbstractIterableGetMapDecorator", "org.apache.commons.collections4.splitmap" ], [ "TransformedSplitMap", "org.apache.commons.collections4.splitmap" ], [ "Factory", "org.apache.commons.collections4" ], [ "IterableUtils", "org.apache.commons.collections4" ], [ "Bag", "org.apache.commons.collections4" ], [ "Predicate", "org.apache.commons.collections4" ], [ "SortedBag", "org.apache.commons.collections4" ], [ "TrieUtils", "org.apache.commons.collections4" ], [ "ClosureUtils", "org.apache.commons.collections4" ], [ "PatriciaTrie", "org.apache.commons.collections4.trie" ], [ "UnmodifiableTrie", "org.apache.commons.collections4.trie" ], [ "KeyAnalyzer", "org.apache.commons.collections4.trie" ], [ "AbstractPatriciaTrie", "org.apache.commons.collections4.trie" ], [ "AbstractBitwiseTrie", "org.apache.commons.collections4.trie" ], [ "StringKeyAnalyzer", "org.apache.commons.collections4.trie.analyzer" ], [ "TransformedSortedMap", "org.apache.commons.collections4.map" ], [ "AbstractLinkedMap", "org.apache.commons.collections4.map" ], [ "Flat3Map", "org.apache.commons.collections4.map" ], [ "PredicatedMap", "org.apache.commons.collections4.map" ], [ "FixedSizeSortedMap", "org.apache.commons.collections4.map" ], [ "UnmodifiableSortedMap", "org.apache.commons.collections4.map" ], [ "PredicatedSortedMap", "org.apache.commons.collections4.map" ], [ "DefaultedMap", "org.apache.commons.collections4.map" ], [ "ReferenceIdentityMap", "org.apache.commons.collections4.map" ], [ "AbstractSortedMapDecorator", "org.apache.commons.collections4.map" ], [ "AbstractInputCheckedMapDecorator", "org.apache.commons.collections4.map" ], [ "FixedSizeMap", "org.apache.commons.collections4.map" ], [ "LazySortedMap", "org.apache.commons.collections4.map" ], [ "UnmodifiableOrderedMap", "org.apache.commons.collections4.map" ], [ "CaseInsensitiveMap", "org.apache.commons.collections4.map" ], [ "AbstractHashedMap", "org.apache.commons.collections4.map" ], [ "AbstractOrderedMapDecorator", "org.apache.commons.collections4.map" ], [ "UnmodifiableMap", "org.apache.commons.collections4.map" ], [ "EntrySetToMapIteratorAdapter", "org.apache.commons.collections4.map" ], [ "AbstractIterableMap", "org.apache.commons.collections4.map" ], [ "ListOrderedMap", "org.apache.commons.collections4.map" ], [ "LinkedMap", "org.apache.commons.collections4.map" ], [ "SingletonMap", "org.apache.commons.collections4.map" ], [ "UnmodifiableEntrySet", "org.apache.commons.collections4.map" ], [ "StaticBucketMap", "org.apache.commons.collections4.map" ], [ "AbstractMapDecorator", "org.apache.commons.collections4.map" ], [ "AbstractReferenceMap", "org.apache.commons.collections4.map" ], [ "MultiKeyMap", "org.apache.commons.collections4.map" ], [ "HashedMap", "org.apache.commons.collections4.map" ], [ "LazyMap", "org.apache.commons.collections4.map" ], [ "PassiveExpiringMap", "org.apache.commons.collections4.map" ], [ "MultiValueMap", "org.apache.commons.collections4.map" ], [ "LRUMap", "org.apache.commons.collections4.map" ], [ "ReferenceMap", "org.apache.commons.collections4.map" ], [ "TransformedMap", "org.apache.commons.collections4.map" ], [ "CompositeMap", "org.apache.commons.collections4.map" ], [ "UnmodifiableMapEntry", "org.apache.commons.collections4.keyvalue" ], [ "MultiKey", "org.apache.commons.collections4.keyvalue" ], [ "DefaultMapEntry", "org.apache.commons.collections4.keyvalue" ], [ "DefaultKeyValue", "org.apache.commons.collections4.keyvalue" ], [ "AbstractMapEntryDecorator", "org.apache.commons.collections4.keyvalue" ], [ "AbstractKeyValue", "org.apache.commons.collections4.keyvalue" ], [ "TiedMapEntry", "org.apache.commons.collections4.keyvalue" ], [ "AbstractMapEntry", "org.apache.commons.collections4.keyvalue" ], [ "MultiSetUtils", "org.apache.commons.collections4" ], [ "MapIterator", "org.apache.commons.collections4" ], [ "AbstractMultiValuedMap", "org.apache.commons.collections4.multimap" ], [ "UnmodifiableMultiValuedMap", "org.apache.commons.collections4.multimap" ], [ "HashSetValuedHashMap", "org.apache.commons.collections4.multimap" ], [ "TransformedMultiValuedMap", "org.apache.commons.collections4.multimap" ], [ "AbstractSetValuedMap", "org.apache.commons.collections4.multimap" ], [ "AbstractListValuedMap", "org.apache.commons.collections4.multimap" ], [ "ArrayListValuedHashMap", "org.apache.commons.collections4.multimap" ], [ "AbstractMultiValuedMapDecorator", "org.apache.commons.collections4.multimap" ], [ "LazyList", "org.apache.commons.collections4.list" ], [ "AbstractSerializableListDecorator", "org.apache.commons.collections4.list" ], [ "TreeList", "org.apache.commons.collections4.list" ], [ "SetUniqueList", "org.apache.commons.collections4.list" ], [ "AbstractListDecorator", "org.apache.commons.collections4.list" ], [ "NodeCachingLinkedList", "org.apache.commons.collections4.list" ], [ "UnmodifiableList", "org.apache.commons.collections4.list" ], [ "FixedSizeList", "org.apache.commons.collections4.list" ], [ "TransformedList", "org.apache.commons.collections4.list" ], [ "GrowthList", "org.apache.commons.collections4.list" ], [ "AbstractLinkedList", "org.apache.commons.collections4.list" ], [ "CursorableLinkedList", "org.apache.commons.collections4.list" ], [ "PredicatedList", "org.apache.commons.collections4.list" ], [ "OrderedMap", "org.apache.commons.collections4" ], [ "AbstractQueueDecorator", "org.apache.commons.collections4.queue" ], [ "TransformedQueue", "org.apache.commons.collections4.queue" ], [ "UnmodifiableQueue", "org.apache.commons.collections4.queue" ], [ "CircularFifoQueue", "org.apache.commons.collections4.queue" ], [ "PredicatedQueue", "org.apache.commons.collections4.queue" ], [ "FluentIterable", "org.apache.commons.collections4" ], [ "TransformerUtils", "org.apache.commons.collections4" ], [ "PredicateUtils", "org.apache.commons.collections4" ], [ "ResettableIterator", "org.apache.commons.collections4" ], [ "MultiValuedMap", "org.apache.commons.collections4" ], [ "SetUtils", "org.apache.commons.collections4" ], [ "SortedBidiMap", "org.apache.commons.collections4" ], [ "ArrayStack", "org.apache.commons.collections4" ], [ "Put", "org.apache.commons.collections4" ], [ "OrderedMapIterator", "org.apache.commons.collections4" ], [ "TransformedSet", "org.apache.commons.collections4.set" ], [ "CompositeSet", "org.apache.commons.collections4.set" ], [ "TransformedNavigableSet", "org.apache.commons.collections4.set" ], [ "PredicatedNavigableSet", "org.apache.commons.collections4.set" ], [ "AbstractSetDecorator", "org.apache.commons.collections4.set" ], [ "ListOrderedSet", "org.apache.commons.collections4.set" ], [ "UnmodifiableSet", "org.apache.commons.collections4.set" ], [ "AbstractSerializableSetDecorator", "org.apache.commons.collections4.set" ], [ "MapBackedSet", "org.apache.commons.collections4.set" ], [ "UnmodifiableSortedSet", "org.apache.commons.collections4.set" ], [ "PredicatedSortedSet", "org.apache.commons.collections4.set" ], [ "AbstractSortedSetDecorator", "org.apache.commons.collections4.set" ], [ "PredicatedSet", "org.apache.commons.collections4.set" ], [ "AbstractNavigableSetDecorator", "org.apache.commons.collections4.set" ], [ "UnmodifiableNavigableSet", "org.apache.commons.collections4.set" ], [ "TransformedSortedSet", "org.apache.commons.collections4.set" ], [ "IterableMap", "org.apache.commons.collections4" ], [ "EnumerationUtils", "org.apache.commons.collections4" ], [ "DeleteCommand", "org.apache.commons.collections4.sequence" ], [ "ReplacementsHandler", "org.apache.commons.collections4.sequence" ], [ "InsertCommand", "org.apache.commons.collections4.sequence" ], [ "SequencesComparator", "org.apache.commons.collections4.sequence" ], [ "ReplacementsFinder", "org.apache.commons.collections4.sequence" ], [ "KeepCommand", "org.apache.commons.collections4.sequence" ], [ "EditCommand", "org.apache.commons.collections4.sequence" ], [ "CommandVisitor", "org.apache.commons.collections4.sequence" ], [ "EditScript", "org.apache.commons.collections4.sequence" ], [ "QueueUtils", "org.apache.commons.collections4" ], [ "SetValuedMap", "org.apache.commons.collections4" ], [ "SynchronizedBag", "org.apache.commons.collections4.bag" ], [ "AbstractMapBag", "org.apache.commons.collections4.bag" ], [ "CollectionBag", "org.apache.commons.collections4.bag" ], [ "UnmodifiableBag", "org.apache.commons.collections4.bag" ], [ "PredicatedSortedBag", "org.apache.commons.collections4.bag" ], [ "UnmodifiableSortedBag", "org.apache.commons.collections4.bag" ], [ "HashBag", "org.apache.commons.collections4.bag" ], [ "AbstractBagDecorator", "org.apache.commons.collections4.bag" ], [ "TransformedSortedBag", "org.apache.commons.collections4.bag" ], [ "TreeBag", "org.apache.commons.collections4.bag" ], [ "PredicatedBag", "org.apache.commons.collections4.bag" ], [ "SynchronizedSortedBag", "org.apache.commons.collections4.bag" ], [ "CollectionSortedBag", "org.apache.commons.collections4.bag" ], [ "TransformedBag", "org.apache.commons.collections4.bag" ], [ "AbstractSortedBagDecorator", "org.apache.commons.collections4.bag" ], [ "HashMultiSet", "org.apache.commons.collections4.multiset" ], [ "AbstractMultiSet", "org.apache.commons.collections4.multiset" ], [ "PredicatedMultiSet", "org.apache.commons.collections4.multiset" ], [ "AbstractMultiSetDecorator", "org.apache.commons.collections4.multiset" ], [ "AbstractMapMultiSet", "org.apache.commons.collections4.multiset" ], [ "UnmodifiableMultiSet", "org.apache.commons.collections4.multiset" ], [ "SynchronizedMultiSet", "org.apache.commons.collections4.multiset" ], [ "BagUtils", "org.apache.commons.collections4" ], [ "Unmodifiable", "org.apache.commons.collections4" ], [ "Get", "org.apache.commons.collections4" ], [ "Trie", "org.apache.commons.collections4" ], [ "MultiMap", "org.apache.commons.collections4" ], [ "KeyValue", "org.apache.commons.collections4" ], [ "IteratorChain", "org.apache.commons.collections4.iterators" ], [ "EmptyListIterator", "org.apache.commons.collections4.iterators" ], [ "UnmodifiableOrderedMapIterator", "org.apache.commons.collections4.iterators" ], [ "AbstractListIteratorDecorator", "org.apache.commons.collections4.iterators" ], [ "ZippingIterator", "org.apache.commons.collections4.iterators" ], [ "UnmodifiableIterator", "org.apache.commons.collections4.iterators" ], [ "CollatingIterator", "org.apache.commons.collections4.iterators" ], [ "UniqueFilterIterator", "org.apache.commons.collections4.iterators" ], [ "ReverseListIterator", "org.apache.commons.collections4.iterators" ], [ "BoundedIterator", "org.apache.commons.collections4.iterators" ], [ "AbstractIteratorDecorator", "org.apache.commons.collections4.iterators" ], [ "TransformIterator", "org.apache.commons.collections4.iterators" ], [ "AbstractEmptyIterator", "org.apache.commons.collections4.iterators" ], [ "NodeListIterator", "org.apache.commons.collections4.iterators" ], [ "ArrayListIterator", "org.apache.commons.collections4.iterators" ], [ "LazyIteratorChain", "org.apache.commons.collections4.iterators" ], [ "LoopingListIterator", "org.apache.commons.collections4.iterators" ], [ "PeekingIterator", "org.apache.commons.collections4.iterators" ], [ "ObjectGraphIterator", "org.apache.commons.collections4.iterators" ], [ "ArrayIterator", "org.apache.commons.collections4.iterators" ], [ "PermutationIterator", "org.apache.commons.collections4.iterators" ], [ "SingletonListIterator", "org.apache.commons.collections4.iterators" ], [ "EmptyMapIterator", "org.apache.commons.collections4.iterators" ], [ "ObjectArrayIterator", "org.apache.commons.collections4.iterators" ], [ "EnumerationIterator", "org.apache.commons.collections4.iterators" ], [ "IteratorIterable", "org.apache.commons.collections4.iterators" ], [ "AbstractEmptyMapIterator", "org.apache.commons.collections4.iterators" ], [ "LoopingIterator", "org.apache.commons.collections4.iterators" ], [ "IteratorEnumeration", "org.apache.commons.collections4.iterators" ], [ "SingletonIterator", "org.apache.commons.collections4.iterators" ], [ "ListIteratorWrapper", "org.apache.commons.collections4.iterators" ], [ "SkippingIterator", "org.apache.commons.collections4.iterators" ], [ "EmptyOrderedIterator", "org.apache.commons.collections4.iterators" ], [ "AbstractMapIteratorDecorator", "org.apache.commons.collections4.iterators" ], [ "ObjectArrayListIterator", "org.apache.commons.collections4.iterators" ], [ "UnmodifiableListIterator", "org.apache.commons.collections4.iterators" ], [ "EmptyOrderedMapIterator", "org.apache.commons.collections4.iterators" ], [ "UnmodifiableMapIterator", "org.apache.commons.collections4.iterators" ], [ "EmptyIterator", "org.apache.commons.collections4.iterators" ], [ "EntrySetMapIterator", "org.apache.commons.collections4.iterators" ], [ "PushbackIterator", "org.apache.commons.collections4.iterators" ], [ "FilterIterator", "org.apache.commons.collections4.iterators" ], [ "AbstractUntypedIteratorDecorator", "org.apache.commons.collections4.iterators" ], [ "AbstractOrderedMapIteratorDecorator", "org.apache.commons.collections4.iterators" ], [ "FilterListIterator", "org.apache.commons.collections4.iterators" ], [ "SplitMapUtils", "org.apache.commons.collections4" ], [ "BoundedMap", "org.apache.commons.collections4" ] ],
  "tokensProjectClassesNonPrivateStaticNonVoidMethods" : [ [ "emptyIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> emptyIterator()" ], [ "emptyListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> emptyListIterator()" ], [ "emptyOrderedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> OrderedIterator<E> emptyOrderedIterator()" ], [ "emptyMapIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <K, V> MapIterator<K, V> emptyMapIterator()" ], [ "emptyOrderedMapIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <K, V> OrderedMapIterator<K, V> emptyOrderedMapIterator()" ], [ "singletonIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> singletonIterator(final E object)" ], [ "singletonListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ListIterator<E> singletonListIterator(final E object)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final E... array)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final Object array)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final E[] array, final int start)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final Object array, final int start)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final E[] array, final int start, final int end)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final Object array, final int start, final int end)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final E... array)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final Object array)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final E[] array, final int start)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final Object array, final int start)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final E[] array, final int start, final int end)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final Object array, final int start, final int end)" ], [ "boundedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> BoundedIterator<E> boundedIterator(final Iterator<? extends E> iterator, long max)" ], [ "boundedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> BoundedIterator<E> boundedIterator(final Iterator<? extends E> iterator, long offset, long max)" ], [ "unmodifiableIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> unmodifiableIterator(final Iterator<E> iterator)" ], [ "unmodifiableListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ListIterator<E> unmodifiableListIterator(final ListIterator<E> listIterator)" ], [ "unmodifiableMapIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <K, V> MapIterator<K, V> unmodifiableMapIterator(final MapIterator<K, V> mapIterator)" ], [ "chainedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> chainedIterator(final Iterator<? extends E> iterator1, final Iterator<? extends E> iterator2)" ], [ "chainedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> chainedIterator(final Iterator<? extends E>... iterators)" ], [ "chainedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> chainedIterator(final Collection<Iterator<? extends E>> iterators)" ], [ "collatedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> collatedIterator(final Comparator<? super E> comparator, final Iterator<? extends E> iterator1, final Iterator<? extends E> iterator2)" ], [ "collatedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> collatedIterator(final Comparator<? super E> comparator, final Iterator<? extends E>... iterators)" ], [ "collatedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> collatedIterator(final Comparator<? super E> comparator, final Collection<Iterator<? extends E>> iterators)" ], [ "objectGraphIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> objectGraphIterator(final E root, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <I, O> Iterator<O> transformedIterator(final Iterator<? extends I> iterator, final Transformer<? super I, ? extends O> transform)" ], [ "filteredIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> filteredIterator(final Iterator<? extends E> iterator, final Predicate<? super E> predicate)" ], [ "filteredListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ListIterator<E> filteredListIterator(final ListIterator<? extends E> listIterator, final Predicate<? super E> predicate)" ], [ "loopingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> loopingIterator(final Collection<? extends E> coll)" ], [ "loopingListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> loopingListIterator(final List<E> list)" ], [ "nodeListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static NodeListIterator nodeListIterator(final NodeList nodeList)" ], [ "nodeListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static NodeListIterator nodeListIterator(final Node node)" ], [ "peekingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> peekingIterator(final Iterator<? extends E> iterator)" ], [ "pushbackIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> pushbackIterator(final Iterator<? extends E> iterator)" ], [ "skippingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> SkippingIterator<E> skippingIterator(final Iterator<E> iterator, long offset)" ], [ "zippingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ZippingIterator<E> zippingIterator(final Iterator<? extends E> a, final Iterator<? extends E> b)" ], [ "zippingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ZippingIterator<E> zippingIterator(final Iterator<? extends E> a, final Iterator<? extends E> b, final Iterator<? extends E> c)" ], [ "zippingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ZippingIterator<E> zippingIterator(final Iterator<? extends E>... iterators)" ], [ "asIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> asIterator(final Enumeration<? extends E> enumeration)" ], [ "asIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> asIterator(final Enumeration<? extends E> enumeration, final Collection<? super E> removeCollection)" ], [ "asEnumeration", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Enumeration<E> asEnumeration(final Iterator<? extends E> iterator)" ], [ "asIterable", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterable<E> asIterable(final Iterator<? extends E> iterator)" ], [ "asMultipleUseIterable", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterable<E> asMultipleUseIterable(final Iterator<? extends E> iterator)" ], [ "toListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ListIterator<E> toListIterator(final Iterator<? extends E> iterator)" ], [ "toArray", "org.apache.commons.collections4", "IteratorUtils", "public static Object[] toArray(final Iterator<?> iterator)" ], [ "toArray", "org.apache.commons.collections4", "IteratorUtils", "public static <E> E[] toArray(final Iterator<? extends E> iterator, final Class<E> arrayClass)" ], [ "toList", "org.apache.commons.collections4", "IteratorUtils", "public static <E> List<E> toList(final Iterator<? extends E> iterator)" ], [ "toList", "org.apache.commons.collections4", "IteratorUtils", "public static <E> List<E> toList(final Iterator<? extends E> iterator, final int estimatedSize)" ], [ "getIterator", "org.apache.commons.collections4", "IteratorUtils", "public static Iterator<?> getIterator(final Object obj)" ], [ "forEachButLast", "org.apache.commons.collections4", "IteratorUtils", "public static <E> E forEachButLast(final Iterator<E> iterator, final Closure<? super E> closure)" ], [ "find", "org.apache.commons.collections4", "IteratorUtils", "public static <E> E find(final Iterator<E> iterator, final Predicate<? super E> predicate)" ], [ "indexOf", "org.apache.commons.collections4", "IteratorUtils", "public static <E> int indexOf(final Iterator<E> iterator, final Predicate<? super E> predicate)" ], [ "matchesAny", "org.apache.commons.collections4", "IteratorUtils", "public static <E> boolean matchesAny(final Iterator<E> iterator, final Predicate<? super E> predicate)" ], [ "matchesAll", "org.apache.commons.collections4", "IteratorUtils", "public static <E> boolean matchesAll(final Iterator<E> iterator, final Predicate<? super E> predicate)" ], [ "isEmpty", "org.apache.commons.collections4", "IteratorUtils", "public static boolean isEmpty(final Iterator<?> iterator)" ], [ "contains", "org.apache.commons.collections4", "IteratorUtils", "public static <E> boolean contains(final Iterator<E> iterator, final Object object)" ], [ "get", "org.apache.commons.collections4", "IteratorUtils", "public static <E> E get(final Iterator<E> iterator, final int index)" ], [ "size", "org.apache.commons.collections4", "IteratorUtils", "public static int size(final Iterator<?> iterator)" ], [ "toString", "org.apache.commons.collections4", "IteratorUtils", "public static <E> String toString(final Iterator<E> iterator)" ], [ "toString", "org.apache.commons.collections4", "IteratorUtils", "public static <E> String toString(final Iterator<E> iterator, final Transformer<? super E, String> transformer)" ], [ "toString", "org.apache.commons.collections4", "IteratorUtils", "public static <E> String toString(final Iterator<E> iterator, final Transformer<? super E, String> transformer, final String delimiter, final String prefix, final String suffix)" ], [ "naturalComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E extends Comparable<? super E>> Comparator<E> naturalComparator()" ], [ "chainedComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> Comparator<E> chainedComparator(final Comparator<E>... comparators)" ], [ "chainedComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> Comparator<E> chainedComparator(final Collection<Comparator<E>> comparators)" ], [ "reversedComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> Comparator<E> reversedComparator(final Comparator<E> comparator)" ], [ "booleanComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static Comparator<Boolean> booleanComparator(final boolean trueFirst)" ], [ "nullLowComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> Comparator<E> nullLowComparator(Comparator<E> comparator)" ], [ "nullHighComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> Comparator<E> nullHighComparator(Comparator<E> comparator)" ], [ "transformedComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <I, O> Comparator<I> transformedComparator(Comparator<O> comparator, final Transformer<? super I, ? extends O> transformer)" ], [ "min", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> E min(final E o1, final E o2, Comparator<E> comparator)" ], [ "max", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> E max(final E o1, final E o2, Comparator<E> comparator)" ], [ "unmodifiableBidiMap", "org.apache.commons.collections4.bidimap", "UnmodifiableBidiMap", "public static <K, V> BidiMap<K, V> unmodifiableBidiMap(final BidiMap<? extends K, ? extends V> map)" ], [ "unmodifiableOrderedBidiMap", "org.apache.commons.collections4.bidimap", "UnmodifiableOrderedBidiMap", "public static <K, V> OrderedBidiMap<K, V> unmodifiableOrderedBidiMap(final OrderedBidiMap<? extends K, ? extends V> map)" ], [ "unmodifiableSortedBidiMap", "org.apache.commons.collections4.bidimap", "UnmodifiableSortedBidiMap", "public static <K, V> SortedBidiMap<K, V> unmodifiableSortedBidiMap(final SortedBidiMap<K, ? extends V> map)" ], [ "emptyMultiValuedMap", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> MultiValuedMap<K, V> emptyMultiValuedMap()" ], [ "emptyIfNull", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> MultiValuedMap<K, V> emptyIfNull(final MultiValuedMap<K, V> map)" ], [ "isEmpty", "org.apache.commons.collections4", "MultiMapUtils", "public static boolean isEmpty(final MultiValuedMap<?, ?> map)" ], [ "getCollection", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> Collection<V> getCollection(final MultiValuedMap<K, V> map, final K key)" ], [ "getValuesAsList", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> List<V> getValuesAsList(final MultiValuedMap<K, V> map, final K key)" ], [ "getValuesAsSet", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> Set<V> getValuesAsSet(final MultiValuedMap<K, V> map, final K key)" ], [ "getValuesAsBag", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> Bag<V> getValuesAsBag(final MultiValuedMap<K, V> map, final K key)" ], [ "newListValuedHashMap", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> ListValuedMap<K, V> newListValuedHashMap()" ], [ "newSetValuedHashMap", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> SetValuedMap<K, V> newSetValuedHashMap()" ], [ "unmodifiableMultiValuedMap", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> MultiValuedMap<K, V> unmodifiableMultiValuedMap(final MultiValuedMap<? extends K, ? extends V> map)" ], [ "transformedMultiValuedMap", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> MultiValuedMap<K, V> transformedMultiValuedMap(final MultiValuedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "unmodifiableBoundedCollection", "org.apache.commons.collections4.collection", "UnmodifiableBoundedCollection", "public static <E> BoundedCollection<E> unmodifiableBoundedCollection(final BoundedCollection<? extends E> coll)" ], [ "unmodifiableBoundedCollection", "org.apache.commons.collections4.collection", "UnmodifiableBoundedCollection", "public static <E> BoundedCollection<E> unmodifiableBoundedCollection(Collection<? extends E> coll)" ], [ "transformingCollection", "org.apache.commons.collections4.collection", "TransformedCollection", "public static <E> TransformedCollection<E> transformingCollection(final Collection<E> coll, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedCollection", "org.apache.commons.collections4.collection", "TransformedCollection", "public static <E> TransformedCollection<E> transformedCollection(final Collection<E> collection, final Transformer<? super E, ? extends E> transformer)" ], [ "builder", "org.apache.commons.collections4.collection", "PredicatedCollection", "public static <E> Builder<E> builder(final Predicate<? super E> predicate)" ], [ "notNullBuilder", "org.apache.commons.collections4.collection", "PredicatedCollection", "public static <E> Builder<E> notNullBuilder()" ], [ "predicatedCollection", "org.apache.commons.collections4.collection", "PredicatedCollection", "public static <T> PredicatedCollection<T> predicatedCollection(final Collection<T> coll, final Predicate<? super T> predicate)" ], [ "uniqueIndexedCollection", "org.apache.commons.collections4.collection", "IndexedCollection", "public static <K, C> IndexedCollection<K, C> uniqueIndexedCollection(final Collection<C> coll, final Transformer<C, K> keyTransformer)" ], [ "nonUniqueIndexedCollection", "org.apache.commons.collections4.collection", "IndexedCollection", "public static <K, C> IndexedCollection<K, C> nonUniqueIndexedCollection(final Collection<C> coll, final Transformer<C, K> keyTransformer)" ], [ "synchronizedCollection", "org.apache.commons.collections4.collection", "SynchronizedCollection", "public static <T> SynchronizedCollection<T> synchronizedCollection(final Collection<T> coll)" ], [ "unmodifiableCollection", "org.apache.commons.collections4.collection", "UnmodifiableCollection", "public static <T> Collection<T> unmodifiableCollection(final Collection<? extends T> coll)" ], [ "exceptionFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> exceptionFactory()" ], [ "nullFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> nullFactory()" ], [ "constantFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> constantFactory(final T constantToReturn)" ], [ "prototypeFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> prototypeFactory(final T prototype)" ], [ "instantiateFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> instantiateFactory(final Class<T> classToInstantiate)" ], [ "instantiateFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> instantiateFactory(final Class<T> classToInstantiate, final Class<?>[] paramTypes, final Object[] args)" ], [ "emptyIfNull", "org.apache.commons.collections4", "ListUtils", "public static <T> List<T> emptyIfNull(final List<T> list)" ], [ "defaultIfNull", "org.apache.commons.collections4", "ListUtils", "public static <T> List<T> defaultIfNull(final List<T> list, final List<T> defaultList)" ], [ "intersection", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> intersection(final List<? extends E> list1, final List<? extends E> list2)" ], [ "subtract", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> subtract(final List<E> list1, final List<? extends E> list2)" ], [ "sum", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> sum(final List<? extends E> list1, final List<? extends E> list2)" ], [ "union", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> union(final List<? extends E> list1, final List<? extends E> list2)" ], [ "select", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> select(final Collection<? extends E> inputCollection, final Predicate<? super E> predicate)" ], [ "selectRejected", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> selectRejected(final Collection<? extends E> inputCollection, final Predicate<? super E> predicate)" ], [ "isEqualList", "org.apache.commons.collections4", "ListUtils", "public static boolean isEqualList(final Collection<?> list1, final Collection<?> list2)" ], [ "hashCodeForList", "org.apache.commons.collections4", "ListUtils", "public static int hashCodeForList(final Collection<?> list)" ], [ "retainAll", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> retainAll(final Collection<E> collection, final Collection<?> retain)" ], [ "removeAll", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> removeAll(final Collection<E> collection, final Collection<?> remove)" ], [ "synchronizedList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> synchronizedList(final List<E> list)" ], [ "unmodifiableList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> unmodifiableList(final List<? extends E> list)" ], [ "predicatedList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> predicatedList(final List<E> list, final Predicate<E> predicate)" ], [ "transformedList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> transformedList(final List<E> list, final Transformer<? super E, ? extends E> transformer)" ], [ "lazyList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> lazyList(final List<E> list, final Factory<? extends E> factory)" ], [ "fixedSizeList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> fixedSizeList(final List<E> list)" ], [ "indexOf", "org.apache.commons.collections4", "ListUtils", "public static <E> int indexOf(final List<E> list, final Predicate<E> predicate)" ], [ "longestCommonSubsequence", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> longestCommonSubsequence(final List<E> a, final List<E> b)" ], [ "longestCommonSubsequence", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> longestCommonSubsequence(final List<E> a, final List<E> b, final Equator<? super E> equator)" ], [ "longestCommonSubsequence", "org.apache.commons.collections4", "ListUtils", "public static String longestCommonSubsequence(final CharSequence a, final CharSequence b)" ], [ "partition", "org.apache.commons.collections4", "ListUtils", "public static <T> List<List<T>> partition(final List<T> list, final int size)" ], [ "getObject", "org.apache.commons.collections4", "MapUtils", "public static <K, V> V getObject(final Map<? super K, V> map, final K key)" ], [ "getString", "org.apache.commons.collections4", "MapUtils", "public static <K> String getString(final Map<? super K, ?> map, final K key)" ], [ "getBoolean", "org.apache.commons.collections4", "MapUtils", "public static <K> Boolean getBoolean(final Map<? super K, ?> map, final K key)" ], [ "getNumber", "org.apache.commons.collections4", "MapUtils", "public static <K> Number getNumber(final Map<? super K, ?> map, final K key)" ], [ "getByte", "org.apache.commons.collections4", "MapUtils", "public static <K> Byte getByte(final Map<? super K, ?> map, final K key)" ], [ "getShort", "org.apache.commons.collections4", "MapUtils", "public static <K> Short getShort(final Map<? super K, ?> map, final K key)" ], [ "getInteger", "org.apache.commons.collections4", "MapUtils", "public static <K> Integer getInteger(final Map<? super K, ?> map, final K key)" ], [ "getLong", "org.apache.commons.collections4", "MapUtils", "public static <K> Long getLong(final Map<? super K, ?> map, final K key)" ], [ "getFloat", "org.apache.commons.collections4", "MapUtils", "public static <K> Float getFloat(final Map<? super K, ?> map, final K key)" ], [ "getDouble", "org.apache.commons.collections4", "MapUtils", "public static <K> Double getDouble(final Map<? super K, ?> map, final K key)" ], [ "getMap", "org.apache.commons.collections4", "MapUtils", "public static <K> Map<?, ?> getMap(final Map<? super K, ?> map, final K key)" ], [ "getObject", "org.apache.commons.collections4", "MapUtils", "public static <K, V> V getObject(final Map<K, V> map, final K key, final V defaultValue)" ], [ "getString", "org.apache.commons.collections4", "MapUtils", "public static <K> String getString(final Map<? super K, ?> map, final K key, final String defaultValue)" ], [ "getBoolean", "org.apache.commons.collections4", "MapUtils", "public static <K> Boolean getBoolean(final Map<? super K, ?> map, final K key, final Boolean defaultValue)" ], [ "getNumber", "org.apache.commons.collections4", "MapUtils", "public static <K> Number getNumber(final Map<? super K, ?> map, final K key, final Number defaultValue)" ], [ "getByte", "org.apache.commons.collections4", "MapUtils", "public static <K> Byte getByte(final Map<? super K, ?> map, final K key, final Byte defaultValue)" ], [ "getShort", "org.apache.commons.collections4", "MapUtils", "public static <K> Short getShort(final Map<? super K, ?> map, final K key, final Short defaultValue)" ], [ "getInteger", "org.apache.commons.collections4", "MapUtils", "public static <K> Integer getInteger(final Map<? super K, ?> map, final K key, final Integer defaultValue)" ], [ "getLong", "org.apache.commons.collections4", "MapUtils", "public static <K> Long getLong(final Map<? super K, ?> map, final K key, final Long defaultValue)" ], [ "getFloat", "org.apache.commons.collections4", "MapUtils", "public static <K> Float getFloat(final Map<? super K, ?> map, final K key, final Float defaultValue)" ], [ "getDouble", "org.apache.commons.collections4", "MapUtils", "public static <K> Double getDouble(final Map<? super K, ?> map, final K key, final Double defaultValue)" ], [ "getMap", "org.apache.commons.collections4", "MapUtils", "public static <K> Map<?, ?> getMap(final Map<? super K, ?> map, final K key, final Map<?, ?> defaultValue)" ], [ "getBooleanValue", "org.apache.commons.collections4", "MapUtils", "public static <K> boolean getBooleanValue(final Map<? super K, ?> map, final K key)" ], [ "getByteValue", "org.apache.commons.collections4", "MapUtils", "public static <K> byte getByteValue(final Map<? super K, ?> map, final K key)" ], [ "getShortValue", "org.apache.commons.collections4", "MapUtils", "public static <K> short getShortValue(final Map<? super K, ?> map, final K key)" ], [ "getIntValue", "org.apache.commons.collections4", "MapUtils", "public static <K> int getIntValue(final Map<? super K, ?> map, final K key)" ], [ "getLongValue", "org.apache.commons.collections4", "MapUtils", "public static <K> long getLongValue(final Map<? super K, ?> map, final K key)" ], [ "getFloatValue", "org.apache.commons.collections4", "MapUtils", "public static <K> float getFloatValue(final Map<? super K, ?> map, final K key)" ], [ "getDoubleValue", "org.apache.commons.collections4", "MapUtils", "public static <K> double getDoubleValue(final Map<? super K, ?> map, final K key)" ], [ "getBooleanValue", "org.apache.commons.collections4", "MapUtils", "public static <K> boolean getBooleanValue(final Map<? super K, ?> map, final K key, final boolean defaultValue)" ], [ "getByteValue", "org.apache.commons.collections4", "MapUtils", "public static <K> byte getByteValue(final Map<? super K, ?> map, final K key, final byte defaultValue)" ], [ "getShortValue", "org.apache.commons.collections4", "MapUtils", "public static <K> short getShortValue(final Map<? super K, ?> map, final K key, final short defaultValue)" ], [ "getIntValue", "org.apache.commons.collections4", "MapUtils", "public static <K> int getIntValue(final Map<? super K, ?> map, final K key, final int defaultValue)" ], [ "getLongValue", "org.apache.commons.collections4", "MapUtils", "public static <K> long getLongValue(final Map<? super K, ?> map, final K key, final long defaultValue)" ], [ "getFloatValue", "org.apache.commons.collections4", "MapUtils", "public static <K> float getFloatValue(final Map<? super K, ?> map, final K key, final float defaultValue)" ], [ "getDoubleValue", "org.apache.commons.collections4", "MapUtils", "public static <K> double getDoubleValue(final Map<? super K, ?> map, final K key, final double defaultValue)" ], [ "toProperties", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Properties toProperties(final Map<K, V> map)" ], [ "toMap", "org.apache.commons.collections4", "MapUtils", "public static Map<String, Object> toMap(final ResourceBundle resourceBundle)" ], [ "invertMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Map<V, K> invertMap(final Map<K, V> map)" ], [ "putAll", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Map<K, V> putAll(final Map<K, V> map, final Object[] array)" ], [ "emptyIfNull", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Map<K, V> emptyIfNull(final Map<K, V> map)" ], [ "isEmpty", "org.apache.commons.collections4", "MapUtils", "public static boolean isEmpty(final Map<?, ?> map)" ], [ "isNotEmpty", "org.apache.commons.collections4", "MapUtils", "public static boolean isNotEmpty(final Map<?, ?> map)" ], [ "synchronizedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Map<K, V> synchronizedMap(final Map<K, V> map)" ], [ "unmodifiableMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Map<K, V> unmodifiableMap(final Map<? extends K, ? extends V> map)" ], [ "predicatedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> predicatedMap(final Map<K, V> map, final Predicate<? super K> keyPred, final Predicate<? super V> valuePred)" ], [ "transformedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> transformedMap(final Map<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "fixedSizeMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> fixedSizeMap(final Map<K, V> map)" ], [ "lazyMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> lazyMap(final Map<K, V> map, final Factory<? extends V> factory)" ], [ "lazyMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> lazyMap(final Map<K, V> map, final Transformer<? super K, ? extends V> transformerFactory)" ], [ "orderedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> OrderedMap<K, V> orderedMap(final Map<K, V> map)" ], [ "multiValueMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> MultiValueMap<K, V> multiValueMap(final Map<K, ? super Collection<V>> map)" ], [ "multiValueMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V, C extends Collection<V>> MultiValueMap<K, V> multiValueMap(final Map<K, C> map, final Class<C> collectionClass)" ], [ "multiValueMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V, C extends Collection<V>> MultiValueMap<K, V> multiValueMap(final Map<K, C> map, final Factory<C> collectionFactory)" ], [ "synchronizedSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> synchronizedSortedMap(final SortedMap<K, V> map)" ], [ "unmodifiableSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> unmodifiableSortedMap(final SortedMap<K, ? extends V> map)" ], [ "predicatedSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> predicatedSortedMap(final SortedMap<K, V> map, final Predicate<? super K> keyPred, final Predicate<? super V> valuePred)" ], [ "transformedSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> transformedSortedMap(final SortedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "fixedSizeSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> fixedSizeSortedMap(final SortedMap<K, V> map)" ], [ "lazySortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> lazySortedMap(final SortedMap<K, V> map, final Factory<? extends V> factory)" ], [ "lazySortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> lazySortedMap(final SortedMap<K, V> map, final Transformer<? super K, ? extends V> transformerFactory)" ], [ "iterableMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> iterableMap(final Map<K, V> map)" ], [ "iterableSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableSortedMap<K, V> iterableSortedMap(final SortedMap<K, V> sortedMap)" ], [ "defaultEquator", "org.apache.commons.collections4.functors", "DefaultEquator", "public static <T> DefaultEquator<T> defaultEquator()" ], [ "stringValueTransformer", "org.apache.commons.collections4.functors", "StringValueTransformer", "public static <T> Transformer<T, String> stringValueTransformer()" ], [ "ifTransformer", "org.apache.commons.collections4.functors", "IfTransformer", "public static <I, O> Transformer<I, O> ifTransformer(final Predicate<? super I> predicate, final Transformer<? super I, ? extends O> trueTransformer, final Transformer<? super I, ? extends O> falseTransformer)" ], [ "ifTransformer", "org.apache.commons.collections4.functors", "IfTransformer", "public static <T> Transformer<T, T> ifTransformer(final Predicate<? super T> predicate, final Transformer<? super T, ? extends T> trueTransformer)" ], [ "identityPredicate", "org.apache.commons.collections4.functors", "IdentityPredicate", "public static <T> Predicate<T> identityPredicate(final T object)" ], [ "exceptionClosure", "org.apache.commons.collections4.functors", "ExceptionClosure", "public static <E> Closure<E> exceptionClosure()" ], [ "nopClosure", "org.apache.commons.collections4.functors", "NOPClosure", "public static <E> Closure<E> nopClosure()" ], [ "closureTransformer", "org.apache.commons.collections4.functors", "ClosureTransformer", "public static <T> Transformer<T, T> closureTransformer(final Closure<? super T> closure)" ], [ "copy", "org.apache.commons.collections4.functors", "FunctorUtils", "static <T> Predicate<T>[] copy(final Predicate<? super T>... predicates)" ], [ "coerce", "org.apache.commons.collections4.functors", "FunctorUtils", "static <T> Predicate<T> coerce(final Predicate<? super T> predicate)" ], [ "validate", "org.apache.commons.collections4.functors", "FunctorUtils", "static <T> Predicate<? super T>[] validate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "copy", "org.apache.commons.collections4.functors", "FunctorUtils", "static <E> Closure<E>[] copy(final Closure<? super E>... closures)" ], [ "coerce", "org.apache.commons.collections4.functors", "FunctorUtils", "static <T> Closure<T> coerce(final Closure<? super T> closure)" ], [ "copy", "org.apache.commons.collections4.functors", "FunctorUtils", "static <I, O> Transformer<I, O>[] copy(final Transformer<? super I, ? extends O>... transformers)" ], [ "coerce", "org.apache.commons.collections4.functors", "FunctorUtils", "static <I, O> Transformer<I, O> coerce(final Transformer<? super I, ? extends O> transformer)" ], [ "transformerPredicate", "org.apache.commons.collections4.functors", "TransformerPredicate", "public static <T> Predicate<T> transformerPredicate(final Transformer<? super T, Boolean> transformer)" ], [ "nullPredicate", "org.apache.commons.collections4.functors", "NullPredicate", "public static <T> Predicate<T> nullPredicate()" ], [ "nullTransformer", "org.apache.commons.collections4.functors", "ConstantTransformer", "public static <I, O> Transformer<I, O> nullTransformer()" ], [ "constantTransformer", "org.apache.commons.collections4.functors", "ConstantTransformer", "public static <I, O> Transformer<I, O> constantTransformer(final O constantToReturn)" ], [ "predicateTransformer", "org.apache.commons.collections4.functors", "PredicateTransformer", "public static <T> Transformer<T, Boolean> predicateTransformer(final Predicate<? super T> predicate)" ], [ "whileClosure", "org.apache.commons.collections4.functors", "WhileClosure", "public static <E> Closure<E> whileClosure(final Predicate<? super E> predicate, final Closure<? super E> closure, final boolean doLoop)" ], [ "forClosure", "org.apache.commons.collections4.functors", "ForClosure", "public static <E> Closure<E> forClosure(final int count, final Closure<? super E> closure)" ], [ "nullIsTruePredicate", "org.apache.commons.collections4.functors", "NullIsTruePredicate", "public static <T> Predicate<T> nullIsTruePredicate(final Predicate<? super T> predicate)" ], [ "transformedPredicate", "org.apache.commons.collections4.functors", "TransformedPredicate", "public static <T> Predicate<T> transformedPredicate(final Transformer<? super T, ? extends T> transformer, final Predicate<? super T> predicate)" ], [ "nonePredicate", "org.apache.commons.collections4.functors", "NonePredicate", "public static <T> Predicate<T> nonePredicate(final Predicate<? super T>... predicates)" ], [ "nonePredicate", "org.apache.commons.collections4.functors", "NonePredicate", "public static <T> Predicate<T> nonePredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "exceptionTransformer", "org.apache.commons.collections4.functors", "ExceptionTransformer", "public static <I, O> Transformer<I, O> exceptionTransformer()" ], [ "switchTransformer", "org.apache.commons.collections4.functors", "SwitchTransformer", "public static <I, O> Transformer<I, O> switchTransformer(final Predicate<? super I>[] predicates, final Transformer<? super I, ? extends O>[] transformers, final Transformer<? super I, ? extends O> defaultTransformer)" ], [ "switchTransformer", "org.apache.commons.collections4.functors", "SwitchTransformer", "public static <I, O> Transformer<I, O> switchTransformer(final Map<? extends Predicate<? super I>, ? extends Transformer<? super I, ? extends O>> map)" ], [ "transformerClosure", "org.apache.commons.collections4.functors", "TransformerClosure", "public static <E> Closure<E> transformerClosure(final Transformer<? super E, ?> transformer)" ], [ "orPredicate", "org.apache.commons.collections4.functors", "OrPredicate", "public static <T> Predicate<T> orPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "nopTransformer", "org.apache.commons.collections4.functors", "NOPTransformer", "public static <T> Transformer<T, T> nopTransformer()" ], [ "mapTransformer", "org.apache.commons.collections4.functors", "MapTransformer", "public static <I, O> Transformer<I, O> mapTransformer(final Map<? super I, ? extends O> map)" ], [ "exceptionFactory", "org.apache.commons.collections4.functors", "ExceptionFactory", "public static <T> Factory<T> exceptionFactory()" ], [ "chainedClosure", "org.apache.commons.collections4.functors", "ChainedClosure", "public static <E> Closure<E> chainedClosure(final Closure<? super E>... closures)" ], [ "chainedClosure", "org.apache.commons.collections4.functors", "ChainedClosure", "public static <E> Closure<E> chainedClosure(final Collection<? extends Closure<? super E>> closures)" ], [ "andPredicate", "org.apache.commons.collections4.functors", "AndPredicate", "public static <T> Predicate<T> andPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "prototypeFactory", "org.apache.commons.collections4.functors", "PrototypeFactory", "public static <T> Factory<T> prototypeFactory(final T prototype)" ], [ "exceptionPredicate", "org.apache.commons.collections4.functors", "ExceptionPredicate", "public static <T> Predicate<T> exceptionPredicate()" ], [ "instanceOfPredicate", "org.apache.commons.collections4.functors", "InstanceofPredicate", "public static Predicate<Object> instanceOfPredicate(final Class<?> type)" ], [ "invokerTransformer", "org.apache.commons.collections4.functors", "InvokerTransformer", "public static <I, O> Transformer<I, O> invokerTransformer(final String methodName)" ], [ "invokerTransformer", "org.apache.commons.collections4.functors", "InvokerTransformer", "public static <I, O> Transformer<I, O> invokerTransformer(final String methodName, final Class<?>[] paramTypes, final Object[] args)" ], [ "falsePredicate", "org.apache.commons.collections4.functors", "FalsePredicate", "public static <T> Predicate<T> falsePredicate()" ], [ "cloneTransformer", "org.apache.commons.collections4.functors", "CloneTransformer", "public static <T> Transformer<T, T> cloneTransformer()" ], [ "notPredicate", "org.apache.commons.collections4.functors", "NotPredicate", "public static <T> Predicate<T> notPredicate(final Predicate<? super T> predicate)" ], [ "constantFactory", "org.apache.commons.collections4.functors", "ConstantFactory", "public static <T> Factory<T> constantFactory(final T constantToReturn)" ], [ "chainedTransformer", "org.apache.commons.collections4.functors", "ChainedTransformer", "public static <T> Transformer<T, T> chainedTransformer(final Transformer<? super T, ? extends T>... transformers)" ], [ "chainedTransformer", "org.apache.commons.collections4.functors", "ChainedTransformer", "public static <T> Transformer<T, T> chainedTransformer(final Collection<? extends Transformer<? super T, ? extends T>> transformers)" ], [ "comparatorPredicate", "org.apache.commons.collections4.functors", "ComparatorPredicate", "public static <T> Predicate<T> comparatorPredicate(final T object, final Comparator<T> comparator)" ], [ "comparatorPredicate", "org.apache.commons.collections4.functors", "ComparatorPredicate", "public static <T> Predicate<T> comparatorPredicate(final T object, final Comparator<T> comparator, final Criterion criterion)" ], [ "allPredicate", "org.apache.commons.collections4.functors", "AllPredicate", "public static <T> Predicate<T> allPredicate(final Predicate<? super T>... predicates)" ], [ "allPredicate", "org.apache.commons.collections4.functors", "AllPredicate", "public static <T> Predicate<T> allPredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "nullIsFalsePredicate", "org.apache.commons.collections4.functors", "NullIsFalsePredicate", "public static <T> Predicate<T> nullIsFalsePredicate(final Predicate<? super T> predicate)" ], [ "nullIsExceptionPredicate", "org.apache.commons.collections4.functors", "NullIsExceptionPredicate", "public static <T> Predicate<T> nullIsExceptionPredicate(final Predicate<? super T> predicate)" ], [ "anyPredicate", "org.apache.commons.collections4.functors", "AnyPredicate", "public static <T> Predicate<T> anyPredicate(final Predicate<? super T>... predicates)" ], [ "anyPredicate", "org.apache.commons.collections4.functors", "AnyPredicate", "public static <T> Predicate<T> anyPredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "truePredicate", "org.apache.commons.collections4.functors", "TruePredicate", "public static <T> Predicate<T> truePredicate()" ], [ "factoryTransformer", "org.apache.commons.collections4.functors", "FactoryTransformer", "public static <I, O> Transformer<I, O> factoryTransformer(final Factory<? extends O> factory)" ], [ "notNullPredicate", "org.apache.commons.collections4.functors", "NotNullPredicate", "public static <T> Predicate<T> notNullPredicate()" ], [ "switchClosure", "org.apache.commons.collections4.functors", "SwitchClosure", "public static <E> Closure<E> switchClosure(final Predicate<? super E>[] predicates, final Closure<? super E>[] closures, final Closure<? super E> defaultClosure)" ], [ "switchClosure", "org.apache.commons.collections4.functors", "SwitchClosure", "public static <E> Closure<E> switchClosure(final Map<Predicate<E>, Closure<E>> predicatesAndClosures)" ], [ "uniquePredicate", "org.apache.commons.collections4.functors", "UniquePredicate", "public static <T> Predicate<T> uniquePredicate()" ], [ "instantiateTransformer", "org.apache.commons.collections4.functors", "InstantiateTransformer", "public static <T> Transformer<Class<? extends T>, T> instantiateTransformer()" ], [ "instantiateTransformer", "org.apache.commons.collections4.functors", "InstantiateTransformer", "public static <T> Transformer<Class<? extends T>, T> instantiateTransformer(final Class<?>[] paramTypes, final Object[] args)" ], [ "onePredicate", "org.apache.commons.collections4.functors", "OnePredicate", "public static <T> Predicate<T> onePredicate(final Predicate<? super T>... predicates)" ], [ "onePredicate", "org.apache.commons.collections4.functors", "OnePredicate", "public static <T> Predicate<T> onePredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "equalPredicate", "org.apache.commons.collections4.functors", "EqualPredicate", "public static <T> Predicate<T> equalPredicate(final T object)" ], [ "equalPredicate", "org.apache.commons.collections4.functors", "EqualPredicate", "public static <T> Predicate<T> equalPredicate(final T object, final Equator<T> equator)" ], [ "instantiateFactory", "org.apache.commons.collections4.functors", "InstantiateFactory", "public static <T> Factory<T> instantiateFactory(final Class<T> classToInstantiate, final Class<?>[] paramTypes, final Object[] args)" ], [ "ifClosure", "org.apache.commons.collections4.functors", "IfClosure", "public static <E> Closure<E> ifClosure(final Predicate<? super E> predicate, final Closure<? super E> trueClosure)" ], [ "ifClosure", "org.apache.commons.collections4.functors", "IfClosure", "public static <E> Closure<E> ifClosure(final Predicate<? super E> predicate, final Closure<? super E> trueClosure, final Closure<? super E> falseClosure)" ], [ "getTrueFirstComparator", "org.apache.commons.collections4.comparators", "BooleanComparator", "public static BooleanComparator getTrueFirstComparator()" ], [ "getFalseFirstComparator", "org.apache.commons.collections4.comparators", "BooleanComparator", "public static BooleanComparator getFalseFirstComparator()" ], [ "booleanComparator", "org.apache.commons.collections4.comparators", "BooleanComparator", "public static BooleanComparator booleanComparator(final boolean trueFirst)" ], [ "comparableComparator", "org.apache.commons.collections4.comparators", "ComparableComparator", "public static <E extends Comparable<? super E>> ComparableComparator<E> comparableComparator()" ], [ "emptyCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <T> Collection<T> emptyCollection()" ], [ "emptyIfNull", "org.apache.commons.collections4", "CollectionUtils", "public static <T> Collection<T> emptyIfNull(final Collection<T> collection)" ], [ "union", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> union(final Iterable<? extends O> a, final Iterable<? extends O> b)" ], [ "intersection", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> intersection(final Iterable<? extends O> a, final Iterable<? extends O> b)" ], [ "disjunction", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> disjunction(final Iterable<? extends O> a, final Iterable<? extends O> b)" ], [ "subtract", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> subtract(final Iterable<? extends O> a, final Iterable<? extends O> b)" ], [ "subtract", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> subtract(final Iterable<? extends O> a, final Iterable<? extends O> b, final Predicate<O> p)" ], [ "containsAll", "org.apache.commons.collections4", "CollectionUtils", "public static boolean containsAll(final Collection<?> coll1, final Collection<?> coll2)" ], [ "containsAny", "org.apache.commons.collections4", "CollectionUtils", "public static boolean containsAny(final Collection<?> coll1, final Collection<?> coll2)" ], [ "getCardinalityMap", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Map<O, Integer> getCardinalityMap(final Iterable<? extends O> coll)" ], [ "isSubCollection", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isSubCollection(final Collection<?> a, final Collection<?> b)" ], [ "isProperSubCollection", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isProperSubCollection(final Collection<?> a, final Collection<?> b)" ], [ "isEqualCollection", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isEqualCollection(final Collection<?> a, final Collection<?> b)" ], [ "isEqualCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <E> boolean isEqualCollection(final Collection<? extends E> a, final Collection<? extends E> b, final Equator<? super E> equator)" ], [ "cardinality", "org.apache.commons.collections4", "CollectionUtils", "public static <O> int cardinality(final O obj, final Iterable<? super O> coll)" ], [ "find", "org.apache.commons.collections4", "CollectionUtils", "public static <T> T find(final Iterable<T> collection, final Predicate<? super T> predicate)" ], [ "forAllDo", "org.apache.commons.collections4", "CollectionUtils", "public static <T, C extends Closure<? super T>> C forAllDo(final Iterable<T> collection, final C closure)" ], [ "forAllDo", "org.apache.commons.collections4", "CollectionUtils", "public static <T, C extends Closure<? super T>> C forAllDo(final Iterator<T> iterator, final C closure)" ], [ "forAllButLastDo", "org.apache.commons.collections4", "CollectionUtils", "public static <T, C extends Closure<? super T>> T forAllButLastDo(final Iterable<T> collection, final C closure)" ], [ "forAllButLastDo", "org.apache.commons.collections4", "CollectionUtils", "public static <T, C extends Closure<? super T>> T forAllButLastDo(final Iterator<T> iterator, final C closure)" ], [ "filter", "org.apache.commons.collections4", "CollectionUtils", "public static <T> boolean filter(final Iterable<T> collection, final Predicate<? super T> predicate)" ], [ "filterInverse", "org.apache.commons.collections4", "CollectionUtils", "public static <T> boolean filterInverse(final Iterable<T> collection, final Predicate<? super T> predicate)" ], [ "countMatches", "org.apache.commons.collections4", "CollectionUtils", "public static <C> int countMatches(final Iterable<C> input, final Predicate<? super C> predicate)" ], [ "exists", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean exists(final Iterable<C> input, final Predicate<? super C> predicate)" ], [ "matchesAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean matchesAll(final Iterable<C> input, final Predicate<? super C> predicate)" ], [ "select", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> select(final Iterable<? extends O> inputCollection, final Predicate<? super O> predicate)" ], [ "select", "org.apache.commons.collections4", "CollectionUtils", "public static <O, R extends Collection<? super O>> R select(final Iterable<? extends O> inputCollection, final Predicate<? super O> predicate, final R outputCollection)" ], [ "select", "org.apache.commons.collections4", "CollectionUtils", "public static <O, R extends Collection<? super O>> R select(final Iterable<? extends O> inputCollection, final Predicate<? super O> predicate, R outputCollection, R rejectedCollection)" ], [ "selectRejected", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> selectRejected(final Iterable<? extends O> inputCollection, final Predicate<? super O> predicate)" ], [ "selectRejected", "org.apache.commons.collections4", "CollectionUtils", "public static <O, R extends Collection<? super O>> R selectRejected(final Iterable<? extends O> inputCollection, final Predicate<? super O> predicate, final R outputCollection)" ], [ "collect", "org.apache.commons.collections4", "CollectionUtils", "public static <I, O> Collection<O> collect(final Iterable<I> inputCollection, final Transformer<? super I, ? extends O> transformer)" ], [ "collect", "org.apache.commons.collections4", "CollectionUtils", "public static <I, O> Collection<O> collect(final Iterator<I> inputIterator, final Transformer<? super I, ? extends O> transformer)" ], [ "collect", "org.apache.commons.collections4", "CollectionUtils", "public static <I, O, R extends Collection<? super O>> R collect(final Iterable<? extends I> inputCollection, final Transformer<? super I, ? extends O> transformer, final R outputCollection)" ], [ "collect", "org.apache.commons.collections4", "CollectionUtils", "public static <I, O, R extends Collection<? super O>> R collect(final Iterator<? extends I> inputIterator, final Transformer<? super I, ? extends O> transformer, final R outputCollection)" ], [ "addIgnoreNull", "org.apache.commons.collections4", "CollectionUtils", "public static <T> boolean addIgnoreNull(final Collection<T> collection, final T object)" ], [ "addAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean addAll(final Collection<C> collection, final Iterable<? extends C> iterable)" ], [ "addAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean addAll(final Collection<C> collection, final Iterator<? extends C> iterator)" ], [ "addAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean addAll(final Collection<C> collection, final Enumeration<? extends C> enumeration)" ], [ "addAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean addAll(final Collection<C> collection, final C[] elements)" ], [ "get", "org.apache.commons.collections4", "CollectionUtils", "public static <T> T get(final Iterator<T> iterator, final int index)" ], [ "get", "org.apache.commons.collections4", "CollectionUtils", "public static <T> T get(final Iterable<T> iterable, final int index)" ], [ "get", "org.apache.commons.collections4", "CollectionUtils", "public static Object get(final Object object, final int index)" ], [ "get", "org.apache.commons.collections4", "CollectionUtils", "public static <K, V> Map.Entry<K, V> get(final Map<K, V> map, final int index)" ], [ "size", "org.apache.commons.collections4", "CollectionUtils", "public static int size(final Object object)" ], [ "sizeIsEmpty", "org.apache.commons.collections4", "CollectionUtils", "public static boolean sizeIsEmpty(final Object object)" ], [ "isEmpty", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isEmpty(final Collection<?> coll)" ], [ "isNotEmpty", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isNotEmpty(final Collection<?> coll)" ], [ "isFull", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isFull(final Collection<? extends Object> coll)" ], [ "maxSize", "org.apache.commons.collections4", "CollectionUtils", "public static int maxSize(final Collection<? extends Object> coll)" ], [ "collate", "org.apache.commons.collections4", "CollectionUtils", "public static <O extends Comparable<? super O>> List<O> collate(Iterable<? extends O> a, Iterable<? extends O> b)" ], [ "collate", "org.apache.commons.collections4", "CollectionUtils", "public static <O extends Comparable<? super O>> List<O> collate(final Iterable<? extends O> a, final Iterable<? extends O> b, final boolean includeDuplicates)" ], [ "collate", "org.apache.commons.collections4", "CollectionUtils", "public static <O> List<O> collate(final Iterable<? extends O> a, final Iterable<? extends O> b, final Comparator<? super O> c)" ], [ "collate", "org.apache.commons.collections4", "CollectionUtils", "public static <O> List<O> collate(final Iterable<? extends O> a, final Iterable<? extends O> b, final Comparator<? super O> c, final boolean includeDuplicates)" ], [ "permutations", "org.apache.commons.collections4", "CollectionUtils", "public static <E> Collection<List<E>> permutations(final Collection<E> collection)" ], [ "retainAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> Collection<C> retainAll(final Collection<C> collection, final Collection<?> retain)" ], [ "retainAll", "org.apache.commons.collections4", "CollectionUtils", "public static <E> Collection<E> retainAll(final Iterable<E> collection, final Iterable<? extends E> retain, final Equator<? super E> equator)" ], [ "removeAll", "org.apache.commons.collections4", "CollectionUtils", "public static <E> Collection<E> removeAll(final Collection<E> collection, final Collection<?> remove)" ], [ "removeAll", "org.apache.commons.collections4", "CollectionUtils", "public static <E> Collection<E> removeAll(final Iterable<E> collection, final Iterable<? extends E> remove, final Equator<? super E> equator)" ], [ "synchronizedCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <C> Collection<C> synchronizedCollection(final Collection<C> collection)" ], [ "unmodifiableCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <C> Collection<C> unmodifiableCollection(final Collection<? extends C> collection)" ], [ "predicatedCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <C> Collection<C> predicatedCollection(final Collection<C> collection, final Predicate<? super C> predicate)" ], [ "transformingCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <E> Collection<E> transformingCollection(final Collection<E> collection, final Transformer<? super E, ? extends E> transformer)" ], [ "extractSingleton", "org.apache.commons.collections4", "CollectionUtils", "public static <E> E extractSingleton(final Collection<E> collection)" ], [ "transformingMap", "org.apache.commons.collections4.splitmap", "TransformedSplitMap", "public static <J, K, U, V> TransformedSplitMap<J, K, U, V> transformingMap(final Map<K, V> map, final Transformer<? super J, ? extends K> keyTransformer, final Transformer<? super U, ? extends V> valueTransformer)" ], [ "emptyIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> emptyIterable()" ], [ "chainedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> chainedIterable(final Iterable<? extends E> a, final Iterable<? extends E> b)" ], [ "chainedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> chainedIterable(final Iterable<? extends E> a, final Iterable<? extends E> b, final Iterable<? extends E> c)" ], [ "chainedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> chainedIterable(final Iterable<? extends E> a, final Iterable<? extends E> b, final Iterable<? extends E> c, final Iterable<? extends E> d)" ], [ "chainedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> chainedIterable(final Iterable<? extends E>... iterables)" ], [ "collatedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> collatedIterable(final Iterable<? extends E> a, final Iterable<? extends E> b)" ], [ "collatedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> collatedIterable(final Comparator<? super E> comparator, final Iterable<? extends E> a, final Iterable<? extends E> b)" ], [ "filteredIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> filteredIterable(final Iterable<E> iterable, final Predicate<? super E> predicate)" ], [ "boundedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> boundedIterable(final Iterable<E> iterable, final long maxSize)" ], [ "loopingIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> loopingIterable(final Iterable<E> iterable)" ], [ "reversedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> reversedIterable(final Iterable<E> iterable)" ], [ "skippingIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> skippingIterable(final Iterable<E> iterable, final long elementsToSkip)" ], [ "transformedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <I, O> Iterable<O> transformedIterable(final Iterable<I> iterable, final Transformer<? super I, ? extends O> transformer)" ], [ "uniqueIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> uniqueIterable(final Iterable<E> iterable)" ], [ "unmodifiableIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> unmodifiableIterable(final Iterable<E> iterable)" ], [ "zippingIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> zippingIterable(final Iterable<? extends E> a, final Iterable<? extends E> b)" ], [ "zippingIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> zippingIterable(final Iterable<? extends E> first, final Iterable<? extends E>... others)" ], [ "emptyIfNull", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> emptyIfNull(final Iterable<E> iterable)" ], [ "forEachButLast", "org.apache.commons.collections4", "IterableUtils", "public static <E> E forEachButLast(final Iterable<E> iterable, final Closure<? super E> closure)" ], [ "find", "org.apache.commons.collections4", "IterableUtils", "public static <E> E find(final Iterable<E> iterable, final Predicate<? super E> predicate)" ], [ "indexOf", "org.apache.commons.collections4", "IterableUtils", "public static <E> int indexOf(final Iterable<E> iterable, final Predicate<? super E> predicate)" ], [ "matchesAll", "org.apache.commons.collections4", "IterableUtils", "public static <E> boolean matchesAll(final Iterable<E> iterable, final Predicate<? super E> predicate)" ], [ "matchesAny", "org.apache.commons.collections4", "IterableUtils", "public static <E> boolean matchesAny(final Iterable<E> iterable, final Predicate<? super E> predicate)" ], [ "countMatches", "org.apache.commons.collections4", "IterableUtils", "public static <E> long countMatches(final Iterable<E> input, final Predicate<? super E> predicate)" ], [ "isEmpty", "org.apache.commons.collections4", "IterableUtils", "public static boolean isEmpty(final Iterable<?> iterable)" ], [ "contains", "org.apache.commons.collections4", "IterableUtils", "public static <E> boolean contains(final Iterable<E> iterable, final Object object)" ], [ "contains", "org.apache.commons.collections4", "IterableUtils", "public static <E> boolean contains(final Iterable<? extends E> iterable, final E object, final Equator<? super E> equator)" ], [ "frequency", "org.apache.commons.collections4", "IterableUtils", "public static <E, T extends E> int frequency(final Iterable<E> iterable, final T obj)" ], [ "get", "org.apache.commons.collections4", "IterableUtils", "public static <T> T get(final Iterable<T> iterable, final int index)" ], [ "size", "org.apache.commons.collections4", "IterableUtils", "public static int size(final Iterable<?> iterable)" ], [ "partition", "org.apache.commons.collections4", "IterableUtils", "public static <O> List<List<O>> partition(final Iterable<? extends O> iterable, final Predicate<? super O> predicate)" ], [ "partition", "org.apache.commons.collections4", "IterableUtils", "public static <O> List<List<O>> partition(final Iterable<? extends O> iterable, final Predicate<? super O>... predicates)" ], [ "partition", "org.apache.commons.collections4", "IterableUtils", "public static <O, R extends Collection<O>> List<R> partition(final Iterable<? extends O> iterable, final Factory<R> partitionFactory, final Predicate<? super O>... predicates)" ], [ "toList", "org.apache.commons.collections4", "IterableUtils", "public static <E> List<E> toList(final Iterable<E> iterable)" ], [ "toString", "org.apache.commons.collections4", "IterableUtils", "public static <E> String toString(final Iterable<E> iterable)" ], [ "toString", "org.apache.commons.collections4", "IterableUtils", "public static <E> String toString(final Iterable<E> iterable, final Transformer<? super E, String> transformer)" ], [ "toString", "org.apache.commons.collections4", "IterableUtils", "public static <E> String toString(final Iterable<E> iterable, final Transformer<? super E, String> transformer, final String delimiter, final String prefix, final String suffix)" ], [ "unmodifiableTrie", "org.apache.commons.collections4", "TrieUtils", "public static <K, V> Trie<K, V> unmodifiableTrie(final Trie<K, ? extends V> trie)" ], [ "exceptionClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> exceptionClosure()" ], [ "nopClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> nopClosure()" ], [ "asClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> asClosure(final Transformer<? super E, ?> transformer)" ], [ "forClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> forClosure(final int count, final Closure<? super E> closure)" ], [ "whileClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> whileClosure(final Predicate<? super E> predicate, final Closure<? super E> closure)" ], [ "doWhileClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> doWhileClosure(final Closure<? super E> closure, final Predicate<? super E> predicate)" ], [ "invokerClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> invokerClosure(final String methodName)" ], [ "invokerClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> invokerClosure(final String methodName, final Class<?>[] paramTypes, final Object[] args)" ], [ "chainedClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> chainedClosure(final Closure<? super E>... closures)" ], [ "chainedClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> chainedClosure(final Collection<? extends Closure<? super E>> closures)" ], [ "ifClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> ifClosure(final Predicate<? super E> predicate, final Closure<? super E> trueClosure)" ], [ "ifClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> ifClosure(final Predicate<? super E> predicate, final Closure<? super E> trueClosure, final Closure<? super E> falseClosure)" ], [ "switchClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> switchClosure(final Predicate<? super E>[] predicates, final Closure<? super E>[] closures)" ], [ "switchClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> switchClosure(final Predicate<? super E>[] predicates, final Closure<? super E>[] closures, final Closure<? super E> defaultClosure)" ], [ "switchClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> switchClosure(final Map<Predicate<E>, Closure<E>> predicatesAndClosures)" ], [ "switchMapClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> switchMapClosure(final Map<? extends E, Closure<E>> objectsAndClosures)" ], [ "unmodifiableTrie", "org.apache.commons.collections4.trie", "UnmodifiableTrie", "public static <K, V> Trie<K, V> unmodifiableTrie(final Trie<K, ? extends V> trie)" ], [ "isOutOfBoundsIndex", "org.apache.commons.collections4.trie", "KeyAnalyzer", "static boolean isOutOfBoundsIndex(final int bitIndex)" ], [ "isEqualBitKey", "org.apache.commons.collections4.trie", "KeyAnalyzer", "static boolean isEqualBitKey(final int bitIndex)" ], [ "isNullBitKey", "org.apache.commons.collections4.trie", "KeyAnalyzer", "static boolean isNullBitKey(final int bitIndex)" ], [ "isValidBitIndex", "org.apache.commons.collections4.trie", "KeyAnalyzer", "static boolean isValidBitIndex(final int bitIndex)" ], [ "isValidUplink", "org.apache.commons.collections4.trie", "AbstractPatriciaTrie", "static boolean isValidUplink(final TrieEntry<?, ?> next, final TrieEntry<?, ?> from)" ], [ "compare", "org.apache.commons.collections4.trie", "AbstractBitwiseTrie", "static boolean compare(final Object a, final Object b)" ], [ "transformingSortedMap", "org.apache.commons.collections4.map", "TransformedSortedMap", "public static <K, V> TransformedSortedMap<K, V> transformingSortedMap(final SortedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "transformedSortedMap", "org.apache.commons.collections4.map", "TransformedSortedMap", "public static <K, V> TransformedSortedMap<K, V> transformedSortedMap(final SortedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "predicatedMap", "org.apache.commons.collections4.map", "PredicatedMap", "public static <K, V> PredicatedMap<K, V> predicatedMap(final Map<K, V> map, final Predicate<? super K> keyPredicate, final Predicate<? super V> valuePredicate)" ], [ "fixedSizeSortedMap", "org.apache.commons.collections4.map", "FixedSizeSortedMap", "public static <K, V> FixedSizeSortedMap<K, V> fixedSizeSortedMap(final SortedMap<K, V> map)" ], [ "unmodifiableSortedMap", "org.apache.commons.collections4.map", "UnmodifiableSortedMap", "public static <K, V> SortedMap<K, V> unmodifiableSortedMap(final SortedMap<K, ? extends V> map)" ], [ "predicatedSortedMap", "org.apache.commons.collections4.map", "PredicatedSortedMap", "public static <K, V> PredicatedSortedMap<K, V> predicatedSortedMap(final SortedMap<K, V> map, final Predicate<? super K> keyPredicate, final Predicate<? super V> valuePredicate)" ], [ "defaultedMap", "org.apache.commons.collections4.map", "DefaultedMap", "public static <K, V> DefaultedMap<K, V> defaultedMap(final Map<K, V> map, final V defaultValue)" ], [ "defaultedMap", "org.apache.commons.collections4.map", "DefaultedMap", "public static <K, V> DefaultedMap<K, V> defaultedMap(final Map<K, V> map, final Factory<? extends V> factory)" ], [ "defaultedMap", "org.apache.commons.collections4.map", "DefaultedMap", "public static <K, V> Map<K, V> defaultedMap(final Map<K, V> map, final Transformer<? super K, ? extends V> transformer)" ], [ "fixedSizeMap", "org.apache.commons.collections4.map", "FixedSizeMap", "public static <K, V> FixedSizeMap<K, V> fixedSizeMap(final Map<K, V> map)" ], [ "lazySortedMap", "org.apache.commons.collections4.map", "LazySortedMap", "public static <K, V> LazySortedMap<K, V> lazySortedMap(final SortedMap<K, V> map, final Factory<? extends V> factory)" ], [ "lazySortedMap", "org.apache.commons.collections4.map", "LazySortedMap", "public static <K, V> LazySortedMap<K, V> lazySortedMap(final SortedMap<K, V> map, final Transformer<? super K, ? extends V> factory)" ], [ "unmodifiableOrderedMap", "org.apache.commons.collections4.map", "UnmodifiableOrderedMap", "public static <K, V> OrderedMap<K, V> unmodifiableOrderedMap(final OrderedMap<? extends K, ? extends V> map)" ], [ "unmodifiableMap", "org.apache.commons.collections4.map", "UnmodifiableMap", "public static <K, V> Map<K, V> unmodifiableMap(final Map<? extends K, ? extends V> map)" ], [ "listOrderedMap", "org.apache.commons.collections4.map", "ListOrderedMap", "public static <K, V> ListOrderedMap<K, V> listOrderedMap(final Map<K, V> map)" ], [ "unmodifiableEntrySet", "org.apache.commons.collections4.map", "UnmodifiableEntrySet", "public static <K, V> Set<Map.Entry<K, V>> unmodifiableEntrySet(final Set<Map.Entry<K, V>> set)" ], [ "resolve", "org.apache.commons.collections4.map", "AbstractReferenceMap", "public static ReferenceStrength resolve(final int value)" ], [ "resolve", "org.apache.commons.collections4.map", "ReferenceStrength", "public static ReferenceStrength resolve(final int value)" ], [ "multiKeyMap", "org.apache.commons.collections4.map", "MultiKeyMap", "public static <K, V> MultiKeyMap<K, V> multiKeyMap(final AbstractHashedMap<MultiKey<? extends K>, V> map)" ], [ "lazyMap", "org.apache.commons.collections4.map", "LazyMap", "public static <K, V> LazyMap<K, V> lazyMap(final Map<K, V> map, final Factory<? extends V> factory)" ], [ "lazyMap", "org.apache.commons.collections4.map", "LazyMap", "public static <V, K> LazyMap<K, V> lazyMap(final Map<K, V> map, final Transformer<? super K, ? extends V> factory)" ], [ "multiValueMap", "org.apache.commons.collections4.map", "MultiValueMap", "public static <K, V> MultiValueMap<K, V> multiValueMap(final Map<K, ? super Collection<V>> map)" ], [ "multiValueMap", "org.apache.commons.collections4.map", "MultiValueMap", "public static <K, V, C extends Collection<V>> MultiValueMap<K, V> multiValueMap(final Map<K, ? super C> map, final Class<C> collectionClass)" ], [ "multiValueMap", "org.apache.commons.collections4.map", "MultiValueMap", "public static <K, V, C extends Collection<V>> MultiValueMap<K, V> multiValueMap(final Map<K, ? super C> map, final Factory<C> collectionFactory)" ], [ "transformingMap", "org.apache.commons.collections4.map", "TransformedMap", "public static <K, V> TransformedMap<K, V> transformingMap(final Map<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "transformedMap", "org.apache.commons.collections4.map", "TransformedMap", "public static <K, V> TransformedMap<K, V> transformedMap(final Map<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "synchronizedMultiSet", "org.apache.commons.collections4", "MultiSetUtils", "public static <E> MultiSet<E> synchronizedMultiSet(final MultiSet<E> multiset)" ], [ "unmodifiableMultiSet", "org.apache.commons.collections4", "MultiSetUtils", "public static <E> MultiSet<E> unmodifiableMultiSet(final MultiSet<? extends E> multiset)" ], [ "predicatedMultiSet", "org.apache.commons.collections4", "MultiSetUtils", "public static <E> MultiSet<E> predicatedMultiSet(final MultiSet<E> multiset, final Predicate<? super E> predicate)" ], [ "emptyMultiSet", "org.apache.commons.collections4", "MultiSetUtils", "public static <E> MultiSet<E> emptyMultiSet()" ], [ "unmodifiableMultiValuedMap", "org.apache.commons.collections4.multimap", "UnmodifiableMultiValuedMap", "public static <K, V> UnmodifiableMultiValuedMap<K, V> unmodifiableMultiValuedMap(MultiValuedMap<? extends K, ? extends V> map)" ], [ "transformingMap", "org.apache.commons.collections4.multimap", "TransformedMultiValuedMap", "public static <K, V> TransformedMultiValuedMap<K, V> transformingMap(final MultiValuedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "transformedMap", "org.apache.commons.collections4.multimap", "TransformedMultiValuedMap", "public static <K, V> TransformedMultiValuedMap<K, V> transformedMap(final MultiValuedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "lazyList", "org.apache.commons.collections4.list", "LazyList", "public static <E> LazyList<E> lazyList(final List<E> list, final Factory<? extends E> factory)" ], [ "setUniqueList", "org.apache.commons.collections4.list", "SetUniqueList", "public static <E> SetUniqueList<E> setUniqueList(final List<E> list)" ], [ "unmodifiableList", "org.apache.commons.collections4.list", "UnmodifiableList", "public static <E> List<E> unmodifiableList(final List<? extends E> list)" ], [ "fixedSizeList", "org.apache.commons.collections4.list", "FixedSizeList", "public static <E> FixedSizeList<E> fixedSizeList(final List<E> list)" ], [ "transformingList", "org.apache.commons.collections4.list", "TransformedList", "public static <E> TransformedList<E> transformingList(final List<E> list, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedList", "org.apache.commons.collections4.list", "TransformedList", "public static <E> TransformedList<E> transformedList(final List<E> list, final Transformer<? super E, ? extends E> transformer)" ], [ "growthList", "org.apache.commons.collections4.list", "GrowthList", "public static <E> GrowthList<E> growthList(final List<E> list)" ], [ "predicatedList", "org.apache.commons.collections4.list", "PredicatedList", "public static <T> PredicatedList<T> predicatedList(final List<T> list, final Predicate<? super T> predicate)" ], [ "transformingQueue", "org.apache.commons.collections4.queue", "TransformedQueue", "public static <E> TransformedQueue<E> transformingQueue(final Queue<E> queue, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedQueue", "org.apache.commons.collections4.queue", "TransformedQueue", "public static <E> TransformedQueue<E> transformedQueue(final Queue<E> queue, final Transformer<? super E, ? extends E> transformer)" ], [ "unmodifiableQueue", "org.apache.commons.collections4.queue", "UnmodifiableQueue", "public static <E> Queue<E> unmodifiableQueue(final Queue<? extends E> queue)" ], [ "predicatedQueue", "org.apache.commons.collections4.queue", "PredicatedQueue", "public static <E> PredicatedQueue<E> predicatedQueue(final Queue<E> Queue, final Predicate<? super E> predicate)" ], [ "empty", "org.apache.commons.collections4", "FluentIterable", "public static <T> FluentIterable<T> empty()" ], [ "of", "org.apache.commons.collections4", "FluentIterable", "public static <T> FluentIterable<T> of(final T singleton)" ], [ "of", "org.apache.commons.collections4", "FluentIterable", "public static <T> FluentIterable<T> of(final T... elements)" ], [ "of", "org.apache.commons.collections4", "FluentIterable", "public static <T> FluentIterable<T> of(final Iterable<T> iterable)" ], [ "exceptionTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> exceptionTransformer()" ], [ "nullTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> nullTransformer()" ], [ "nopTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> nopTransformer()" ], [ "cloneTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> cloneTransformer()" ], [ "constantTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> constantTransformer(final O constantToReturn)" ], [ "asTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> asTransformer(final Closure<? super T> closure)" ], [ "asTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, Boolean> asTransformer(final Predicate<? super T> predicate)" ], [ "asTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> asTransformer(final Factory<? extends O> factory)" ], [ "chainedTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> chainedTransformer(final Transformer<? super T, ? extends T>... transformers)" ], [ "chainedTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> chainedTransformer(final Collection<? extends Transformer<? super T, ? extends T>> transformers)" ], [ "ifTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> ifTransformer(final Predicate<? super T> predicate, final Transformer<? super T, ? extends T> trueTransformer)" ], [ "ifTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> ifTransformer(final Predicate<? super I> predicate, final Transformer<? super I, ? extends O> trueTransformer, final Transformer<? super I, ? extends O> falseTransformer)" ], [ "switchTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> switchTransformer(final Predicate<? super I> predicate, final Transformer<? super I, ? extends O> trueTransformer, final Transformer<? super I, ? extends O> falseTransformer)" ], [ "switchTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> switchTransformer(final Predicate<? super I>[] predicates, final Transformer<? super I, ? extends O>[] transformers)" ], [ "switchTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> switchTransformer(final Predicate<? super I>[] predicates, final Transformer<? super I, ? extends O>[] transformers, final Transformer<? super I, ? extends O> defaultTransformer)" ], [ "switchTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> switchTransformer(final Map<Predicate<I>, Transformer<I, O>> predicatesAndTransformers)" ], [ "switchMapTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> switchMapTransformer(final Map<I, Transformer<I, O>> objectsAndTransformers)" ], [ "instantiateTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<Class<? extends T>, T> instantiateTransformer()" ], [ "instantiateTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<Class<? extends T>, T> instantiateTransformer(final Class<?>[] paramTypes, final Object[] args)" ], [ "mapTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> mapTransformer(final Map<? super I, ? extends O> map)" ], [ "invokerTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> invokerTransformer(final String methodName)" ], [ "invokerTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> invokerTransformer(final String methodName, final Class<?>[] paramTypes, final Object[] args)" ], [ "stringValueTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, String> stringValueTransformer()" ], [ "exceptionPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> exceptionPredicate()" ], [ "truePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> truePredicate()" ], [ "falsePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> falsePredicate()" ], [ "nullPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nullPredicate()" ], [ "notNullPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> notNullPredicate()" ], [ "equalPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> equalPredicate(final T value)" ], [ "identityPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> identityPredicate(final T value)" ], [ "instanceofPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static Predicate<Object> instanceofPredicate(final Class<?> type)" ], [ "uniquePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> uniquePredicate()" ], [ "invokerPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> invokerPredicate(final String methodName)" ], [ "invokerPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> invokerPredicate(final String methodName, final Class<?>[] paramTypes, final Object[] args)" ], [ "andPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> andPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "allPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> allPredicate(final Predicate<? super T>... predicates)" ], [ "allPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> allPredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "orPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> orPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "anyPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> anyPredicate(final Predicate<? super T>... predicates)" ], [ "anyPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> anyPredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "eitherPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> eitherPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "onePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> onePredicate(final Predicate<? super T>... predicates)" ], [ "onePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> onePredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "neitherPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> neitherPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "nonePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nonePredicate(final Predicate<? super T>... predicates)" ], [ "nonePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nonePredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "notPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> notPredicate(final Predicate<? super T> predicate)" ], [ "asPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> asPredicate(final Transformer<? super T, Boolean> transformer)" ], [ "nullIsExceptionPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nullIsExceptionPredicate(final Predicate<? super T> predicate)" ], [ "nullIsFalsePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nullIsFalsePredicate(final Predicate<? super T> predicate)" ], [ "nullIsTruePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nullIsTruePredicate(final Predicate<? super T> predicate)" ], [ "transformedPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> transformedPredicate(final Transformer<? super T, ? extends T> transformer, final Predicate<? super T> predicate)" ], [ "emptySet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> emptySet()" ], [ "emptySortedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> emptySortedSet()" ], [ "emptyIfNull", "org.apache.commons.collections4", "SetUtils", "public static <T> Set<T> emptyIfNull(final Set<T> set)" ], [ "isEqualSet", "org.apache.commons.collections4", "SetUtils", "public static boolean isEqualSet(final Collection<?> set1, final Collection<?> set2)" ], [ "hashCodeForSet", "org.apache.commons.collections4", "SetUtils", "public static <T> int hashCodeForSet(final Collection<T> set)" ], [ "newIdentityHashSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> newIdentityHashSet()" ], [ "synchronizedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> synchronizedSet(final Set<E> set)" ], [ "unmodifiableSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> unmodifiableSet(final Set<? extends E> set)" ], [ "predicatedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> predicatedSet(final Set<E> set, final Predicate<? super E> predicate)" ], [ "transformedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> transformedSet(final Set<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "orderedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> orderedSet(final Set<E> set)" ], [ "synchronizedSortedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> synchronizedSortedSet(final SortedSet<E> set)" ], [ "unmodifiableSortedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> unmodifiableSortedSet(final SortedSet<E> set)" ], [ "predicatedSortedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> predicatedSortedSet(final SortedSet<E> set, final Predicate<? super E> predicate)" ], [ "transformedSortedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> transformedSortedSet(final SortedSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "unmodifiableNavigableSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> unmodifiableNavigableSet(final NavigableSet<E> set)" ], [ "predicatedNavigableSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> predicatedNavigableSet(final NavigableSet<E> set, final Predicate<? super E> predicate)" ], [ "transformedNavigableSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> transformedNavigableSet(final NavigableSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "union", "org.apache.commons.collections4", "SetUtils", "public static <E> SetView<E> union(final Set<? extends E> a, final Set<? extends E> b)" ], [ "difference", "org.apache.commons.collections4", "SetUtils", "public static <E> SetView<E> difference(final Set<? extends E> a, final Set<? extends E> b)" ], [ "intersection", "org.apache.commons.collections4", "SetUtils", "public static <E> SetView<E> intersection(final Set<? extends E> a, final Set<? extends E> b)" ], [ "disjunction", "org.apache.commons.collections4", "SetUtils", "public static <E> SetView<E> disjunction(final Set<? extends E> a, final Set<? extends E> b)" ], [ "transformingSet", "org.apache.commons.collections4.set", "TransformedSet", "public static <E> TransformedSet<E> transformingSet(final Set<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedSet", "org.apache.commons.collections4.set", "TransformedSet", "public static <E> Set<E> transformedSet(final Set<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "transformingNavigableSet", "org.apache.commons.collections4.set", "TransformedNavigableSet", "public static <E> TransformedNavigableSet<E> transformingNavigableSet(final NavigableSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedNavigableSet", "org.apache.commons.collections4.set", "TransformedNavigableSet", "public static <E> TransformedNavigableSet<E> transformedNavigableSet(final NavigableSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "predicatedNavigableSet", "org.apache.commons.collections4.set", "PredicatedNavigableSet", "public static <E> PredicatedNavigableSet<E> predicatedNavigableSet(final NavigableSet<E> set, final Predicate<? super E> predicate)" ], [ "listOrderedSet", "org.apache.commons.collections4.set", "ListOrderedSet", "public static <E> ListOrderedSet<E> listOrderedSet(final Set<E> set, final List<E> list)" ], [ "listOrderedSet", "org.apache.commons.collections4.set", "ListOrderedSet", "public static <E> ListOrderedSet<E> listOrderedSet(final Set<E> set)" ], [ "listOrderedSet", "org.apache.commons.collections4.set", "ListOrderedSet", "public static <E> ListOrderedSet<E> listOrderedSet(final List<E> list)" ], [ "unmodifiableSet", "org.apache.commons.collections4.set", "UnmodifiableSet", "public static <E> Set<E> unmodifiableSet(final Set<? extends E> set)" ], [ "mapBackedSet", "org.apache.commons.collections4.set", "MapBackedSet", "public static <E, V> MapBackedSet<E, V> mapBackedSet(final Map<E, ? super V> map)" ], [ "mapBackedSet", "org.apache.commons.collections4.set", "MapBackedSet", "public static <E, V> MapBackedSet<E, V> mapBackedSet(final Map<E, ? super V> map, final V dummyValue)" ], [ "unmodifiableSortedSet", "org.apache.commons.collections4.set", "UnmodifiableSortedSet", "public static <E> SortedSet<E> unmodifiableSortedSet(final SortedSet<E> set)" ], [ "predicatedSortedSet", "org.apache.commons.collections4.set", "PredicatedSortedSet", "public static <E> PredicatedSortedSet<E> predicatedSortedSet(final SortedSet<E> set, final Predicate<? super E> predicate)" ], [ "predicatedSet", "org.apache.commons.collections4.set", "PredicatedSet", "public static <E> PredicatedSet<E> predicatedSet(final Set<E> set, final Predicate<? super E> predicate)" ], [ "unmodifiableNavigableSet", "org.apache.commons.collections4.set", "UnmodifiableNavigableSet", "public static <E> NavigableSet<E> unmodifiableNavigableSet(final NavigableSet<E> set)" ], [ "transformingSortedSet", "org.apache.commons.collections4.set", "TransformedSortedSet", "public static <E> TransformedSortedSet<E> transformingSortedSet(final SortedSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedSortedSet", "org.apache.commons.collections4.set", "TransformedSortedSet", "public static <E> TransformedSortedSet<E> transformedSortedSet(final SortedSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "get", "org.apache.commons.collections4", "EnumerationUtils", "public static <T> T get(final Enumeration<T> e, final int index)" ], [ "toList", "org.apache.commons.collections4", "EnumerationUtils", "public static <E> List<E> toList(final Enumeration<? extends E> enumeration)" ], [ "toList", "org.apache.commons.collections4", "EnumerationUtils", "public static List<String> toList(final StringTokenizer stringTokenizer)" ], [ "unmodifiableQueue", "org.apache.commons.collections4", "QueueUtils", "public static <E> Queue<E> unmodifiableQueue(final Queue<? extends E> queue)" ], [ "predicatedQueue", "org.apache.commons.collections4", "QueueUtils", "public static <E> Queue<E> predicatedQueue(final Queue<E> queue, final Predicate<? super E> predicate)" ], [ "transformingQueue", "org.apache.commons.collections4", "QueueUtils", "public static <E> Queue<E> transformingQueue(final Queue<E> queue, final Transformer<? super E, ? extends E> transformer)" ], [ "emptyQueue", "org.apache.commons.collections4", "QueueUtils", "public static <E> Queue<E> emptyQueue()" ], [ "synchronizedBag", "org.apache.commons.collections4.bag", "SynchronizedBag", "public static <E> SynchronizedBag<E> synchronizedBag(final Bag<E> bag)" ], [ "collectionBag", "org.apache.commons.collections4.bag", "CollectionBag", "public static <E> Bag<E> collectionBag(final Bag<E> bag)" ], [ "unmodifiableBag", "org.apache.commons.collections4.bag", "UnmodifiableBag", "public static <E> Bag<E> unmodifiableBag(final Bag<? extends E> bag)" ], [ "predicatedSortedBag", "org.apache.commons.collections4.bag", "PredicatedSortedBag", "public static <E> PredicatedSortedBag<E> predicatedSortedBag(final SortedBag<E> bag, final Predicate<? super E> predicate)" ], [ "unmodifiableSortedBag", "org.apache.commons.collections4.bag", "UnmodifiableSortedBag", "public static <E> SortedBag<E> unmodifiableSortedBag(final SortedBag<E> bag)" ], [ "transformingSortedBag", "org.apache.commons.collections4.bag", "TransformedSortedBag", "public static <E> TransformedSortedBag<E> transformingSortedBag(final SortedBag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedSortedBag", "org.apache.commons.collections4.bag", "TransformedSortedBag", "public static <E> TransformedSortedBag<E> transformedSortedBag(final SortedBag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "predicatedBag", "org.apache.commons.collections4.bag", "PredicatedBag", "public static <E> PredicatedBag<E> predicatedBag(final Bag<E> bag, final Predicate<? super E> predicate)" ], [ "synchronizedSortedBag", "org.apache.commons.collections4.bag", "SynchronizedSortedBag", "public static <E> SynchronizedSortedBag<E> synchronizedSortedBag(final SortedBag<E> bag)" ], [ "collectionSortedBag", "org.apache.commons.collections4.bag", "CollectionSortedBag", "public static <E> SortedBag<E> collectionSortedBag(final SortedBag<E> bag)" ], [ "transformingBag", "org.apache.commons.collections4.bag", "TransformedBag", "public static <E> Bag<E> transformingBag(final Bag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedBag", "org.apache.commons.collections4.bag", "TransformedBag", "public static <E> Bag<E> transformedBag(final Bag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "predicatedMultiSet", "org.apache.commons.collections4.multiset", "PredicatedMultiSet", "public static <E> PredicatedMultiSet<E> predicatedMultiSet(final MultiSet<E> multiset, final Predicate<? super E> predicate)" ], [ "unmodifiableMultiSet", "org.apache.commons.collections4.multiset", "UnmodifiableMultiSet", "public static <E> MultiSet<E> unmodifiableMultiSet(final MultiSet<? extends E> multiset)" ], [ "synchronizedMultiSet", "org.apache.commons.collections4.multiset", "SynchronizedMultiSet", "public static <E> SynchronizedMultiSet<E> synchronizedMultiSet(final MultiSet<E> multiset)" ], [ "synchronizedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> synchronizedBag(final Bag<E> bag)" ], [ "unmodifiableBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> unmodifiableBag(final Bag<? extends E> bag)" ], [ "predicatedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> predicatedBag(final Bag<E> bag, final Predicate<? super E> predicate)" ], [ "transformingBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> transformingBag(final Bag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "collectionBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> collectionBag(final Bag<E> bag)" ], [ "synchronizedSortedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> SortedBag<E> synchronizedSortedBag(final SortedBag<E> bag)" ], [ "unmodifiableSortedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> SortedBag<E> unmodifiableSortedBag(final SortedBag<E> bag)" ], [ "predicatedSortedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> SortedBag<E> predicatedSortedBag(final SortedBag<E> bag, final Predicate<? super E> predicate)" ], [ "transformingSortedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> SortedBag<E> transformingSortedBag(final SortedBag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "emptyBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> emptyBag()" ], [ "emptySortedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> SortedBag<E> emptySortedBag()" ], [ "resettableEmptyListIterator", "org.apache.commons.collections4.iterators", "EmptyListIterator", "public static <E> ResettableListIterator<E> resettableEmptyListIterator()" ], [ "emptyListIterator", "org.apache.commons.collections4.iterators", "EmptyListIterator", "public static <E> ListIterator<E> emptyListIterator()" ], [ "unmodifiableOrderedMapIterator", "org.apache.commons.collections4.iterators", "UnmodifiableOrderedMapIterator", "public static <K, V> OrderedMapIterator<K, V> unmodifiableOrderedMapIterator(final OrderedMapIterator<K, ? extends V> iterator)" ], [ "unmodifiableIterator", "org.apache.commons.collections4.iterators", "UnmodifiableIterator", "public static <E> Iterator<E> unmodifiableIterator(final Iterator<? extends E> iterator)" ], [ "peekingIterator", "org.apache.commons.collections4.iterators", "PeekingIterator", "public static <E> PeekingIterator<E> peekingIterator(final Iterator<? extends E> iterator)" ], [ "emptyMapIterator", "org.apache.commons.collections4.iterators", "EmptyMapIterator", "public static <K, V> MapIterator<K, V> emptyMapIterator()" ], [ "emptyOrderedIterator", "org.apache.commons.collections4.iterators", "EmptyOrderedIterator", "public static <E> OrderedIterator<E> emptyOrderedIterator()" ], [ "umodifiableListIterator", "org.apache.commons.collections4.iterators", "UnmodifiableListIterator", "public static <E> ListIterator<E> umodifiableListIterator(final ListIterator<? extends E> iterator)" ], [ "emptyOrderedMapIterator", "org.apache.commons.collections4.iterators", "EmptyOrderedMapIterator", "public static <K, V> OrderedMapIterator<K, V> emptyOrderedMapIterator()" ], [ "unmodifiableMapIterator", "org.apache.commons.collections4.iterators", "UnmodifiableMapIterator", "public static <K, V> MapIterator<K, V> unmodifiableMapIterator(final MapIterator<? extends K, ? extends V> iterator)" ], [ "resettableEmptyIterator", "org.apache.commons.collections4.iterators", "EmptyIterator", "public static <E> ResettableIterator<E> resettableEmptyIterator()" ], [ "emptyIterator", "org.apache.commons.collections4.iterators", "EmptyIterator", "public static <E> Iterator<E> emptyIterator()" ], [ "pushbackIterator", "org.apache.commons.collections4.iterators", "PushbackIterator", "public static <E> PushbackIterator<E> pushbackIterator(final Iterator<? extends E> iterator)" ], [ "readableMap", "org.apache.commons.collections4", "SplitMapUtils", "public static <K, V> IterableMap<K, V> readableMap(final Get<K, V> get)" ], [ "writableMap", "org.apache.commons.collections4", "SplitMapUtils", "public static <K, V> Map<K, V> writableMap(final Put<K, V> put)" ] ],
  "tokensProjectClassesNonPrivateStaticAttributes" : [ [ "EMPTY_ITERATOR", "org.apache.commons.collections4", "IteratorUtils", "public static final ResettableIterator EMPTY_ITERATOR = EmptyIterator.RESETTABLE_INSTANCE;" ], [ "EMPTY_LIST_ITERATOR", "org.apache.commons.collections4", "IteratorUtils", "public static final ResettableListIterator EMPTY_LIST_ITERATOR = EmptyListIterator.RESETTABLE_INSTANCE;" ], [ "EMPTY_ORDERED_ITERATOR", "org.apache.commons.collections4", "IteratorUtils", "public static final OrderedIterator EMPTY_ORDERED_ITERATOR = EmptyOrderedIterator.INSTANCE;" ], [ "EMPTY_MAP_ITERATOR", "org.apache.commons.collections4", "IteratorUtils", "public static final MapIterator EMPTY_MAP_ITERATOR = EmptyMapIterator.INSTANCE;" ], [ "EMPTY_ORDERED_MAP_ITERATOR", "org.apache.commons.collections4", "IteratorUtils", "public static final OrderedMapIterator EMPTY_ORDERED_MAP_ITERATOR = EmptyOrderedMapIterator.INSTANCE;" ], [ "NATURAL_COMPARATOR", "org.apache.commons.collections4", "ComparatorUtils", "public static final Comparator NATURAL_COMPARATOR = ComparableComparator.<Comparable>comparableComparator();" ], [ "EMPTY_MULTI_VALUED_MAP", "org.apache.commons.collections4", "MultiMapUtils", "public static final MultiValuedMap EMPTY_MULTI_VALUED_MAP = UnmodifiableMultiValuedMap.unmodifiableMultiValuedMap(new ArrayListValuedHashMap(0, 0));" ], [ "EMPTY_SORTED_MAP", "org.apache.commons.collections4", "MapUtils", "public static final SortedMap EMPTY_SORTED_MAP = UnmodifiableSortedMap.unmodifiableSortedMap(new TreeMap<Object, Object>());" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "DefaultEquator", "public static final DefaultEquator INSTANCE = new DefaultEquator<Object>();" ], [ "HASHCODE_NULL", "org.apache.commons.collections4.functors", "DefaultEquator", "public static final int HASHCODE_NULL = -1;" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "ExceptionClosure", "public static final Closure INSTANCE = new ExceptionClosure<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "NOPClosure", "public static final Closure INSTANCE = new NOPClosure<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "NullPredicate", "public static final Predicate INSTANCE = new NullPredicate<Object>();" ], [ "NULL_INSTANCE", "org.apache.commons.collections4.functors", "ConstantTransformer", "public static final Transformer NULL_INSTANCE = new ConstantTransformer<Object, Object>(null);" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "ExceptionTransformer", "public static final Transformer INSTANCE = new ExceptionTransformer<Object, Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "NOPTransformer", "public static final Transformer INSTANCE = new NOPTransformer<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "ExceptionFactory", "public static final Factory INSTANCE = new ExceptionFactory<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "ExceptionPredicate", "public static final Predicate INSTANCE = new ExceptionPredicate<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "FalsePredicate", "public static final Predicate INSTANCE = new FalsePredicate<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "CloneTransformer", "public static final Transformer INSTANCE = new CloneTransformer<Object>();" ], [ "NULL_INSTANCE", "org.apache.commons.collections4.functors", "ConstantFactory", "public static final Factory NULL_INSTANCE = new ConstantFactory<Object>(null);" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "TruePredicate", "public static final Predicate INSTANCE = new TruePredicate<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "NotNullPredicate", "public static final Predicate INSTANCE = new NotNullPredicate<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.comparators", "ComparableComparator", "public static final ComparableComparator INSTANCE = new ComparableComparator();" ], [ "EMPTY_COLLECTION", "org.apache.commons.collections4", "CollectionUtils", "public static final Collection EMPTY_COLLECTION = UnmodifiableCollection.unmodifiableCollection(new ArrayList<Object>());" ], [ "EMPTY_ITERABLE", "org.apache.commons.collections4", "IterableUtils", "static final FluentIterable EMPTY_ITERABLE = new FluentIterable<Object>() {\n\n    @Override\n    public Iterator<Object> iterator() {\n        return IteratorUtils.emptyIterator();\n    }\n};" ], [ "NULL_BIT_KEY", "org.apache.commons.collections4.trie", "KeyAnalyzer", "public static final int NULL_BIT_KEY = -1;" ], [ "EQUAL_BIT_KEY", "org.apache.commons.collections4.trie", "KeyAnalyzer", "public static final int EQUAL_BIT_KEY = -2;" ], [ "OUT_OF_BOUNDS_BIT_KEY", "org.apache.commons.collections4.trie", "KeyAnalyzer", "public static final int OUT_OF_BOUNDS_BIT_KEY = -3;" ], [ "INSTANCE", "org.apache.commons.collections4.trie.analyzer", "StringKeyAnalyzer", "public static final StringKeyAnalyzer INSTANCE = new StringKeyAnalyzer();" ], [ "LENGTH", "org.apache.commons.collections4.trie.analyzer", "StringKeyAnalyzer", "public static final int LENGTH = Character.SIZE;" ], [ "NO_NEXT_ENTRY", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String NO_NEXT_ENTRY = \"No next() entry in the iteration\";" ], [ "NO_PREVIOUS_ENTRY", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String NO_PREVIOUS_ENTRY = \"No previous() entry in the iteration\";" ], [ "REMOVE_INVALID", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String REMOVE_INVALID = \"remove() can only be called once after next()\";" ], [ "GETKEY_INVALID", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String GETKEY_INVALID = \"getKey() can only be called after next() and before remove()\";" ], [ "GETVALUE_INVALID", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String GETVALUE_INVALID = \"getValue() can only be called after next() and before remove()\";" ], [ "SETVALUE_INVALID", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String SETVALUE_INVALID = \"setValue() can only be called after next() and before remove()\";" ], [ "DEFAULT_CAPACITY", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final int DEFAULT_CAPACITY = 16;" ], [ "DEFAULT_THRESHOLD", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final int DEFAULT_THRESHOLD = 12;" ], [ "DEFAULT_LOAD_FACTOR", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final float DEFAULT_LOAD_FACTOR = 0.75f;" ], [ "MAXIMUM_CAPACITY", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final int MAXIMUM_CAPACITY = 1 << 30;" ], [ "NULL", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final Object NULL = new Object();" ], [ "DEFAULT_MAX_SIZE", "org.apache.commons.collections4.map", "LRUMap", "protected static final int DEFAULT_MAX_SIZE = 100;" ], [ "EMPTY_MULTISET", "org.apache.commons.collections4", "MultiSetUtils", "public static final MultiSet EMPTY_MULTISET = UnmodifiableMultiSet.unmodifiableMultiSet(new HashMultiSet<Object>());" ], [ "EMPTY_SORTED_SET", "org.apache.commons.collections4", "SetUtils", "public static final SortedSet EMPTY_SORTED_SET = UnmodifiableSortedSet.unmodifiableSortedSet(new TreeSet<Object>());" ], [ "EMPTY_QUEUE", "org.apache.commons.collections4", "QueueUtils", "public static final Queue EMPTY_QUEUE = UnmodifiableQueue.unmodifiableQueue(new LinkedList<Object>());" ], [ "EMPTY_BAG", "org.apache.commons.collections4", "BagUtils", "public static final Bag EMPTY_BAG = UnmodifiableBag.unmodifiableBag(new HashBag<Object>());" ], [ "EMPTY_SORTED_BAG", "org.apache.commons.collections4", "BagUtils", "public static final Bag EMPTY_SORTED_BAG = UnmodifiableSortedBag.unmodifiableSortedBag(new TreeBag<Object>());" ], [ "RESETTABLE_INSTANCE", "org.apache.commons.collections4.iterators", "EmptyListIterator", "public static final ResettableListIterator RESETTABLE_INSTANCE = new EmptyListIterator<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.iterators", "EmptyListIterator", "public static final ListIterator INSTANCE = RESETTABLE_INSTANCE;" ], [ "INSTANCE", "org.apache.commons.collections4.iterators", "EmptyMapIterator", "public static final MapIterator INSTANCE = new EmptyMapIterator<Object, Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.iterators", "EmptyOrderedIterator", "public static final OrderedIterator INSTANCE = new EmptyOrderedIterator<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.iterators", "EmptyOrderedMapIterator", "public static final OrderedMapIterator INSTANCE = new EmptyOrderedMapIterator<Object, Object>();" ], [ "RESETTABLE_INSTANCE", "org.apache.commons.collections4.iterators", "EmptyIterator", "public static final ResettableIterator RESETTABLE_INSTANCE = new EmptyIterator<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.iterators", "EmptyIterator", "public static final Iterator INSTANCE = RESETTABLE_INSTANCE;" ] ],
  "tokensMethodJavadocValues" : [ ],
  "tokensMethodArguments" : [ [ "predicatesAndTransformers", "java.util.Map", "Map<Predicate<I>, Transformer<I, O>>" ] ],
  "tokensMethodVariablesNonPrivateNonStaticNonVoidMethods" : [ [ "clone", "java.lang", "Object", "protected native Object clone() throws CloneNotSupportedException" ], [ "toString", "java.lang", "Object", "public String toString()" ], [ "getClass", "java.lang", "Object", "public final native Class<? extends Object> getClass()" ], [ "hashCode", "java.lang", "Object", "public native int hashCode()" ], [ "equals", "java.lang", "Object", "public boolean equals(Object arg0)" ], [ "remove", "java.util", "Map", "public abstract V remove(Object arg0)" ], [ "containsKey", "java.util", "Map", "public abstract boolean containsKey(Object arg0)" ], [ "size", "java.util", "Map", "public abstract int size()" ], [ "remove", "java.util", "Map", "public default boolean remove(Object arg0, Object arg1)" ], [ "compute", "java.util", "Map", "public default V compute(K arg0, BiFunction<? super K, ? super V, ? extends V> arg1)" ], [ "keySet", "java.util", "Map", "public abstract Set<K> keySet()" ], [ "hashCode", "java.util", "Map", "public abstract int hashCode()" ], [ "isEmpty", "java.util", "Map", "public abstract boolean isEmpty()" ], [ "replace", "java.util", "Map", "public default boolean replace(K arg0, V arg1, V arg2)" ], [ "getOrDefault", "java.util", "Map", "public default V getOrDefault(Object arg0, V arg1)" ], [ "containsValue", "java.util", "Map", "public abstract boolean containsValue(Object arg0)" ], [ "replace", "java.util", "Map", "public default V replace(K arg0, V arg1)" ], [ "equals", "java.util", "Map", "public abstract boolean equals(Object arg0)" ], [ "computeIfPresent", "java.util", "Map", "public default V computeIfPresent(K arg0, BiFunction<? super K, ? super V, ? extends V> arg1)" ], [ "values", "java.util", "Map", "public abstract Collection<V> values()" ], [ "merge", "java.util", "Map", "public default V merge(K arg0, V arg1, BiFunction<? super V, ? super V, ? extends V> arg2)" ], [ "computeIfAbsent", "java.util", "Map", "public default V computeIfAbsent(K arg0, Function<? super K, ? extends V> arg1)" ], [ "entrySet", "java.util", "Map", "public abstract Set<Map.Entry<K, V>> entrySet()" ], [ "putIfAbsent", "java.util", "Map", "public default V putIfAbsent(K arg0, V arg1)" ], [ "put", "java.util", "Map", "public abstract V put(K arg0, V arg1)" ], [ "get", "java.util", "Map", "public abstract V get(Object arg0)" ], [ "transform", "org.apache.commons.collections4", "Transformer", "public abstract O transform(I arg0)" ] ],
  "tokensMethodVariablesNonPrivateNonStaticAttributes" : [ ],
  "tokensOracleVariablesNonPrivateNonStaticNonVoidMethods" : [ ],
  "tokensOracleVariablesNonPrivateNonStaticAttributes" : [ ]
}, {
  "id" : 8975,
  "oracle" : ";",
  "oracleType" : "EXCEPT_POST",
  "projectName" : "commons-collections4-4.1",
  "packageName" : "org.apache.commons.collections4",
  "className" : "TransformerUtils",
  "javadocTag" : "@throws NullPointerException if any transformer in the map is null",
  "methodJavadoc" : "    /**\n     * Create a new Transformer that uses the input object as a key to find the\n     * transformer to call.\n     * <p>\n     * The Map consists of object keys and Transformer values. A transformer\n     * is called if the input object equals the key. If there is no match, the\n     * default transformer is called. The default transformer is set in the map\n     * using a null key. If no default is set, null will be returned in a default case.\n     *\n     * @param <I>  the input type\n     * @param <O>  the output type\n     * @param objectsAndTransformers  a map of objects to transformers\n     * @return the transformer\n     * @throws NullPointerException if the map is null\n     * @throws NullPointerException if any transformer in the map is null\n     * @see SwitchTransformer\n     */",
  "methodSourceCode" : "public static <I, O> Transformer<I, O> switchMapTransformer(final Map<I, Transformer<I, O>> objectsAndTransformers){\n    if (objectsAndTransformers == null) {\n        throw new NullPointerException(\"The object and transformer map must not be null\");\n    }\n    final Transformer<? super I, ? extends O> def = objectsAndTransformers.remove(null);\n    final int size = objectsAndTransformers.size();\n    final Transformer<? super I, ? extends O>[] trs = new Transformer[size];\n    final Predicate<I>[] preds = new Predicate[size];\n    int i = 0;\n    for (final Map.Entry<I, Transformer<I, O>> entry : objectsAndTransformers.entrySet()) {\n        preds[i] = EqualPredicate.<I>equalPredicate(entry.getKey());\n        trs[i++] = entry.getValue();\n    }\n    return TransformerUtils.switchTransformer(preds, trs, def);\n}",
  "classJavadoc" : "/**\n * <code>TransformerUtils</code> provides reference implementations and\n * utilities for the Transformer functor interface. The supplied transformers are:\n * <ul>\n * <li>Invoker - returns the result of a method call on the input object\n * <li>Clone - returns a clone of the input object\n * <li>Constant - always returns the same object\n * <li>Closure - performs a Closure and returns the input object\n * <li>Predicate - returns the result of the predicate as a Boolean\n * <li>Factory - returns a new object from a factory\n * <li>Chained - chains two or more transformers together\n * <li>If - calls one transformer or another based on a predicate\n * <li>Switch - calls one transformer based on one or more predicates\n * <li>SwitchMap - calls one transformer looked up from a Map\n * <li>Instantiate - the Class input object is instantiated\n * <li>Map - returns an object from a supplied Map\n * <li>Null - always returns null\n * <li>NOP - returns the input object, which should be immutable\n * <li>Exception - always throws an exception\n * <li>StringValue - returns a <code>java.lang.String</code> representation of the input object\n * </ul>\n * <p>\n * Since v4.1 only transformers which are considered to be unsafe are\n * Serializable. Transformers considered to be unsafe for serialization are:\n * <ul>\n * <li>Invoker\n * <li>Clone\n * <li>Instantiate\n * </ul>\n *\n * @since 3.0\n * @version $Id: TransformerUtils.java 1714362 2015-11-14 20:38:02Z tn $\n */",
  "classSourceCode" : "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.commons.collections4;\n\nimport java.util.Collection;\nimport java.util.Map;\n\nimport org.apache.commons.collections4.functors.ChainedTransformer;\nimport org.apache.commons.collections4.functors.CloneTransformer;\nimport org.apache.commons.collections4.functors.ClosureTransformer;\nimport org.apache.commons.collections4.functors.ConstantTransformer;\nimport org.apache.commons.collections4.functors.EqualPredicate;\nimport org.apache.commons.collections4.functors.ExceptionTransformer;\nimport org.apache.commons.collections4.functors.FactoryTransformer;\nimport org.apache.commons.collections4.functors.IfTransformer;\nimport org.apache.commons.collections4.functors.InstantiateTransformer;\nimport org.apache.commons.collections4.functors.InvokerTransformer;\nimport org.apache.commons.collections4.functors.MapTransformer;\nimport org.apache.commons.collections4.functors.NOPTransformer;\nimport org.apache.commons.collections4.functors.PredicateTransformer;\nimport org.apache.commons.collections4.functors.StringValueTransformer;\nimport org.apache.commons.collections4.functors.SwitchTransformer;\n\n/**\n * <code>TransformerUtils</code> provides reference implementations and\n * utilities for the Transformer functor interface. The supplied transformers are:\n * <ul>\n * <li>Invoker - returns the result of a method call on the input object\n * <li>Clone - returns a clone of the input object\n * <li>Constant - always returns the same object\n * <li>Closure - performs a Closure and returns the input object\n * <li>Predicate - returns the result of the predicate as a Boolean\n * <li>Factory - returns a new object from a factory\n * <li>Chained - chains two or more transformers together\n * <li>If - calls one transformer or another based on a predicate\n * <li>Switch - calls one transformer based on one or more predicates\n * <li>SwitchMap - calls one transformer looked up from a Map\n * <li>Instantiate - the Class input object is instantiated\n * <li>Map - returns an object from a supplied Map\n * <li>Null - always returns null\n * <li>NOP - returns the input object, which should be immutable\n * <li>Exception - always throws an exception\n * <li>StringValue - returns a <code>java.lang.String</code> representation of the input object\n * </ul>\n * <p>\n * Since v4.1 only transformers which are considered to be unsafe are\n * Serializable. Transformers considered to be unsafe for serialization are:\n * <ul>\n * <li>Invoker\n * <li>Clone\n * <li>Instantiate\n * </ul>\n *\n * @since 3.0\n * @version $Id: TransformerUtils.java 1714362 2015-11-14 20:38:02Z tn $\n */\npublic class TransformerUtils {\n\n    /**\n     * This class is not normally instantiated.\n     */\n    private TransformerUtils() {}\n\n    /**\n     * Gets a transformer that always throws an exception.\n     * This could be useful during testing as a placeholder.\n     *\n     * @param <I>  the input type\n     * @param <O>  the output type\n     * @return the transformer\n     * @see ExceptionTransformer\n     */\n    public static <I, O> Transformer<I, O> exceptionTransformer() {\n        return ExceptionTransformer.exceptionTransformer();\n    }\n\n    /**\n     * Gets a transformer that always returns null.\n     *\n     * @param <I>  the input type\n     * @param <O>  the output type\n     * @return the transformer\n     * @see ConstantTransformer\n     */\n    public static <I, O> Transformer<I, O> nullTransformer() {\n        return ConstantTransformer.nullTransformer();\n    }\n\n    /**\n     * Gets a transformer that returns the input object.\n     * The input object should be immutable to maintain the\n     * contract of Transformer (although this is not checked).\n     *\n     * @param <T>  the input/output type\n     * @return the transformer\n     * @see NOPTransformer\n     */\n    public static <T> Transformer<T, T> nopTransformer() {\n        return NOPTransformer.nopTransformer();\n    }\n\n    /**\n     * Gets a transformer that returns a clone of the input object.\n     * The input object will be cloned using one of these techniques (in order):\n     * <ul>\n     * <li>public clone method\n     * <li>public copy constructor\n     * <li>serialization clone\n     * <ul>\n     *\n     * @param <T>  the input/output type\n     * @return the transformer\n     * @see CloneTransformer\n     */\n    public static <T> Transformer<T, T> cloneTransformer() {\n        return CloneTransformer.cloneTransformer();\n    }\n\n    /**\n     * Creates a Transformer that will return the same object each time the\n     * transformer is used.\n     *\n     * @param <I>  the input type\n     * @param <O>  the output type\n     * @param constantToReturn  the constant object to return each time in the transformer\n     * @return the transformer.\n     * @see ConstantTransformer\n     */\n    public static <I, O> Transformer<I, O> constantTransformer(final O constantToReturn) {\n        return ConstantTransformer.constantTransformer(constantToReturn);\n    }\n\n    /**\n     * Creates a Transformer that calls a Closure each time the transformer is used.\n     * The transformer returns the input object.\n     *\n     * @param <T>  the input/output type\n     * @param closure  the closure to run each time in the transformer, not null\n     * @return the transformer\n     * @throws NullPointerException if the closure is null\n     * @see ClosureTransformer\n     */\n    public static <T> Transformer<T, T> asTransformer(final Closure<? super T> closure) {\n        return ClosureTransformer.closureTransformer(closure);\n    }\n\n    /**\n     * Creates a Transformer that calls a Predicate each time the transformer is used.\n     * The transformer will return either Boolean.TRUE or Boolean.FALSE.\n     *\n     * @param <T>  the input type\n     * @param predicate  the predicate to run each time in the transformer, not null\n     * @return the transformer\n     * @throws NullPointerException if the predicate is null\n     * @see PredicateTransformer\n     */\n    public static <T> Transformer<T, Boolean> asTransformer(final Predicate<? super T> predicate) {\n        return PredicateTransformer.predicateTransformer(predicate);\n    }\n\n    /**\n     * Creates a Transformer that calls a Factory each time the transformer is used.\n     * The transformer will return the value returned by the factory.\n     *\n     * @param <I>  the input type\n     * @param <O>  the output type\n     * @param factory  the factory to run each time in the transformer, not null\n     * @return the transformer\n     * @throws NullPointerException if the factory is null\n     * @see FactoryTransformer\n     */\n    public static <I, O> Transformer<I, O> asTransformer(final Factory<? extends O> factory) {\n        return FactoryTransformer.factoryTransformer(factory);\n    }\n\n    /**\n     * Create a new Transformer that calls each transformer in turn, passing the\n     * result into the next transformer.\n     *\n     * @param <T>  the input/output type\n     * @param transformers  an array of transformers to chain\n     * @return the transformer\n     * @throws NullPointerException if the transformers array or any of the transformers is null\n     * @see ChainedTransformer\n     */\n    public static <T> Transformer<T, T> chainedTransformer(\n            final Transformer<? super T, ? extends T>... transformers) {\n        return ChainedTransformer.chainedTransformer(transformers);\n    }\n\n    /**\n     * Create a new Transformer that calls each transformer in turn, passing the\n     * result into the next transformer. The ordering is that of the iterator()\n     * method on the collection.\n     *\n     * @param <T>  the input/output type\n     * @param transformers  a collection of transformers to chain\n     * @return the transformer\n     * @throws NullPointerException if the transformers collection or any of the transformers is null\n     * @see ChainedTransformer\n     */\n    public static <T> Transformer<T, T> chainedTransformer(\n            final Collection<? extends Transformer<? super T, ? extends T>> transformers) {\n        return ChainedTransformer.chainedTransformer(transformers);\n    }\n\n    /**\n     * Create a new Transformer that calls the transformer if the predicate is true,\n     * otherwise the input object is returned unchanged.\n     *\n     * @param <T>  the input / output type\n     * @param predicate  the predicate to switch on\n     * @param trueTransformer  the transformer called if the predicate is true\n     * @return the transformer\n     * @throws NullPointerException if either the predicate or transformer is null\n     * @see IfTransformer\n     * @since 4.1\n     */\n    public static <T> Transformer<T, T> ifTransformer(final Predicate<? super T> predicate,\n                                                      final Transformer<? super T, ? extends T> trueTransformer) {\n        return IfTransformer.ifTransformer(predicate, trueTransformer);\n    }\n\n    /**\n     * Create a new Transformer that calls one of two transformers depending\n     * on the specified predicate.\n     *\n     * @param <I>  the input type\n     * @param <O>  the output type\n     * @param predicate  the predicate to switch on\n     * @param trueTransformer  the transformer called if the predicate is true\n     * @param falseTransformer  the transformer called if the predicate is false\n     * @return the transformer\n     * @throws NullPointerException if either the predicate or transformer is null\n     * @see IfTransformer\n     * @since 4.1\n     */\n    public static <I, O> Transformer<I, O> ifTransformer(final Predicate<? super I> predicate,\n                                                         final Transformer<? super I, ? extends O> trueTransformer,\n                                                         final Transformer<? super I, ? extends O> falseTransformer) {\n        return IfTransformer.ifTransformer(predicate, trueTransformer, falseTransformer);\n    }\n\n    /**\n     * Create a new Transformer that calls one of two transformers depending\n     * on the specified predicate.\n     *\n     * @param <I>  the input type\n     * @param <O>  the output type\n     * @param predicate  the predicate to switch on\n     * @param trueTransformer  the transformer called if the predicate is true\n     * @param falseTransformer  the transformer called if the predicate is false\n     * @return the transformer\n     * @throws NullPointerException if either the predicate or transformer is null\n     * @see SwitchTransformer\n     * @deprecated as of 4.1, use {@link #ifTransformer(Predicate, Transformer, Transformer))\n     */\n    @SuppressWarnings(\"unchecked\")\n    @Deprecated\n    public static <I, O> Transformer<I, O> switchTransformer(final Predicate<? super I> predicate,\n            final Transformer<? super I, ? extends O> trueTransformer,\n            final Transformer<? super I, ? extends O> falseTransformer) {\n        return SwitchTransformer.switchTransformer(new Predicate[] { predicate },\n                                                   new Transformer[] { trueTransformer }, falseTransformer);\n    }\n\n    /**\n     * Create a new Transformer that calls one of the transformers depending\n     * on the predicates. The transformer at array location 0 is called if the\n     * predicate at array location 0 returned true. Each predicate is evaluated\n     * until one returns true. If no predicates evaluate to true, null is returned.\n     *\n     * @param <I>  the input type\n     * @param <O>  the output type\n     * @param predicates  an array of predicates to check\n     * @param transformers  an array of transformers to call\n     * @return the transformer\n     * @throws NullPointerException if the either array is null\n     * @throws NullPointerException if any element in the arrays is null\n     * @throws IllegalArgumentException if the arrays have different sizes\n     * @see SwitchTransformer\n     */\n    public static <I, O> Transformer<I, O> switchTransformer(final Predicate<? super I>[] predicates,\n            final Transformer<? super I, ? extends O>[] transformers) {\n        return SwitchTransformer.switchTransformer(predicates, transformers, null);\n    }\n\n    /**\n     * Create a new Transformer that calls one of the transformers depending\n     * on the predicates. The transformer at array location 0 is called if the\n     * predicate at array location 0 returned true. Each predicate is evaluated\n     * until one returns true. If no predicates evaluate to true, the default\n     * transformer is called. If the default transformer is null, null is returned.\n     *\n     * @param <I>  the input type\n     * @param <O>  the output type\n     * @param predicates  an array of predicates to check\n     * @param transformers  an array of transformers to call\n     * @param defaultTransformer  the default to call if no predicate matches, null means return null\n     * @return the transformer\n     * @throws NullPointerException if the either array is null\n     * @throws NullPointerException if any element in the arrays is null\n     * @throws IllegalArgumentException if the arrays have different sizes\n     * @see SwitchTransformer\n     */\n    public static <I, O> Transformer<I, O> switchTransformer(final Predicate<? super I>[] predicates,\n            final Transformer<? super I, ? extends O>[] transformers,\n            final Transformer<? super I, ? extends O> defaultTransformer) {\n        return SwitchTransformer.switchTransformer(predicates, transformers, defaultTransformer);\n    }\n\n    /**\n     * Create a new Transformer that calls one of the transformers depending\n     * on the predicates.\n     * <p>\n     * The Map consists of Predicate keys and Transformer values. A transformer\n     * is called if its matching predicate returns true. Each predicate is evaluated\n     * until one returns true. If no predicates evaluate to true, the default\n     * transformer is called. The default transformer is set in the map with a\n     * null key. If no default transformer is set, null will be returned in a default\n     * case. The ordering is that of the iterator() method on the entryset collection\n     * of the map.\n     *\n     * @param <I>  the input type\n     * @param <O>  the output type\n     * @param predicatesAndTransformers  a map of predicates to transformers\n     * @return the transformer\n     * @throws NullPointerException if the map is null\n     * @throws NullPointerException if any transformer in the map is null\n     * @throws ClassCastException  if the map elements are of the wrong type\n     * @see SwitchTransformer\n     */\n    public static <I, O> Transformer<I, O> switchTransformer(\n            final Map<Predicate<I>, Transformer<I, O>> predicatesAndTransformers) {\n        return SwitchTransformer.switchTransformer(predicatesAndTransformers);\n    }\n\n    /**\n     * Create a new Transformer that uses the input object as a key to find the\n     * transformer to call.\n     * <p>\n     * The Map consists of object keys and Transformer values. A transformer\n     * is called if the input object equals the key. If there is no match, the\n     * default transformer is called. The default transformer is set in the map\n     * using a null key. If no default is set, null will be returned in a default case.\n     *\n     * @param <I>  the input type\n     * @param <O>  the output type\n     * @param objectsAndTransformers  a map of objects to transformers\n     * @return the transformer\n     * @throws NullPointerException if the map is null\n     * @throws NullPointerException if any transformer in the map is null\n     * @see SwitchTransformer\n     */\n    @SuppressWarnings(\"unchecked\")\n    public static <I, O> Transformer<I, O> switchMapTransformer(\n            final Map<I, Transformer<I, O>> objectsAndTransformers) {\n\n        if (objectsAndTransformers == null) {\n            throw new NullPointerException(\"The object and transformer map must not be null\");\n        }\n        final Transformer<? super I, ? extends O> def = objectsAndTransformers.remove(null);\n        final int size = objectsAndTransformers.size();\n        final Transformer<? super I, ? extends O>[] trs = new Transformer[size];\n        final Predicate<I>[] preds = new Predicate[size];\n        int i = 0;\n        for (final Map.Entry<I, Transformer<I, O>> entry : objectsAndTransformers.entrySet()) {\n            preds[i] = EqualPredicate.<I>equalPredicate(entry.getKey());\n            trs[i++] = entry.getValue();\n        }\n        return TransformerUtils.switchTransformer(preds, trs, def);\n    }\n\n    /**\n     * Gets a Transformer that expects an input Class object that it will instantiate.\n     *\n     * @param <T>  the output type\n     * @return the transformer\n     * @see InstantiateTransformer\n     */\n    public static <T> Transformer<Class<? extends T>, T> instantiateTransformer() {\n        return InstantiateTransformer.instantiateTransformer();\n    }\n\n    /**\n     * Creates a Transformer that expects an input Class object that it will\n     * instantiate. The constructor used is determined by the arguments specified\n     * to this method.\n     *\n     * @param <T>  the output type\n     * @param paramTypes  parameter types for the constructor, can be null\n     * @param args  the arguments to pass to the constructor, can be null\n     * @return the transformer\n     * @throws IllegalArgumentException if the paramTypes and args don't match\n     * @see InstantiateTransformer\n     */\n    public static <T> Transformer<Class<? extends T>, T> instantiateTransformer(\n            final Class<?>[] paramTypes, final Object[] args) {\n        return InstantiateTransformer.instantiateTransformer(paramTypes, args);\n    }\n\n    /**\n     * Creates a Transformer that uses the passed in Map to transform the input\n     * object (as a simple lookup).\n     *\n     * @param <I>  the input type\n     * @param <O>  the output type\n     * @param map  the map to use to transform the objects\n     * @return the transformer, or {@link ConstantTransformer#nullTransformer()} if the\n     *   {@code map} is {@code null}\n     * @see MapTransformer\n     */\n    public static <I, O> Transformer<I, O> mapTransformer(final Map<? super I, ? extends O> map) {\n        return MapTransformer.mapTransformer(map);\n    }\n\n    /**\n     * Gets a Transformer that invokes a method on the input object.\n     * The method must have no parameters. If the input object is null,\n     * null is returned.\n     * <p>\n     * For example, <code>TransformerUtils.invokerTransformer(\"getName\");</code>\n     * will call the <code>getName/code> method on the input object to\n     * determine the transformer result.\n     *\n     * @param <I>  the input type\n     * @param <O>  the output type\n     * @param methodName  the method name to call on the input object, may not be null\n     * @return the transformer\n     * @throws NullPointerException if the methodName is null.\n     * @see InvokerTransformer\n     */\n    public static <I, O> Transformer<I, O> invokerTransformer(final String methodName) {\n        return InvokerTransformer.invokerTransformer(methodName, null, null);\n    }\n\n    /**\n     * Gets a Transformer that invokes a method on the input object.\n     * The method parameters are specified. If the input object is {@code null},\n     * {@code null} is returned.\n     *\n     * @param <I>  the input type\n     * @param <O>  the output type\n     * @param methodName  the name of the method\n     * @param paramTypes  the parameter types\n     * @param args  the arguments\n     * @return the transformer\n     * @throws NullPointerException if the method name is null\n     * @throws IllegalArgumentException if the paramTypes and args don't match\n     * @see InvokerTransformer\n     */\n    public static <I, O> Transformer<I, O> invokerTransformer(final String methodName, final Class<?>[] paramTypes,\n                                                              final Object[] args) {\n        return InvokerTransformer.invokerTransformer(methodName, paramTypes, args);\n    }\n\n    /**\n     * Gets a transformer that returns a <code>java.lang.String</code>\n     * representation of the input object. This is achieved via the\n     * <code>toString</code> method, <code>null</code> returns 'null'.\n     *\n     * @param <T>  the input type\n     * @return the transformer\n     * @see StringValueTransformer\n     */\n    public static <T> Transformer<T, String> stringValueTransformer() {\n        return StringValueTransformer.stringValueTransformer();\n    }\n\n}\n",
  "tokensGeneralGrammar" : [ "null", "true", "false", ",", ".", ":", ";", "?", "(", ")", "jdVar", "stream", "Arrays", "allMatch", "noneMatch", "anyMatch", "~", ">>", "<<", ">>>", "|", "&", "^", "+", "-", "/", "*", "%", "&&", "||", ">=", "<=", ">", "<", "==", "!=", "instanceof", "class", "methodResultID", "this" ],
  "tokensGeneralValuesGlobalDictionary" : [ [ "0", "int" ], [ "1", "int" ], [ "-1", "int" ], [ "0.0", "double" ], [ "1.0", "double" ], [ "-1.0", "double" ], [ "\"\"", "String" ], [ "\" \"", "String" ] ],
  "tokensProjectClasses" : [ [ "BidiMap", "org.apache.commons.collections4" ], [ "Equator", "org.apache.commons.collections4" ], [ "MultiSet", "org.apache.commons.collections4" ], [ "IteratorUtils", "org.apache.commons.collections4" ], [ "ComparatorUtils", "org.apache.commons.collections4" ], [ "FunctorException", "org.apache.commons.collections4" ], [ "AbstractDualBidiMap", "org.apache.commons.collections4.bidimap" ], [ "UnmodifiableBidiMap", "org.apache.commons.collections4.bidimap" ], [ "AbstractOrderedBidiMapDecorator", "org.apache.commons.collections4.bidimap" ], [ "UnmodifiableOrderedBidiMap", "org.apache.commons.collections4.bidimap" ], [ "AbstractBidiMapDecorator", "org.apache.commons.collections4.bidimap" ], [ "DualLinkedHashBidiMap", "org.apache.commons.collections4.bidimap" ], [ "UnmodifiableSortedBidiMap", "org.apache.commons.collections4.bidimap" ], [ "AbstractSortedBidiMapDecorator", "org.apache.commons.collections4.bidimap" ], [ "DualHashBidiMap", "org.apache.commons.collections4.bidimap" ], [ "DualTreeBidiMap", "org.apache.commons.collections4.bidimap" ], [ "TreeBidiMap", "org.apache.commons.collections4.bidimap" ], [ "MultiMapUtils", "org.apache.commons.collections4" ], [ "BoundedCollection", "org.apache.commons.collections4" ], [ "UnmodifiableBoundedCollection", "org.apache.commons.collections4.collection" ], [ "CompositeCollection", "org.apache.commons.collections4.collection" ], [ "TransformedCollection", "org.apache.commons.collections4.collection" ], [ "PredicatedCollection", "org.apache.commons.collections4.collection" ], [ "IndexedCollection", "org.apache.commons.collections4.collection" ], [ "SynchronizedCollection", "org.apache.commons.collections4.collection" ], [ "UnmodifiableCollection", "org.apache.commons.collections4.collection" ], [ "AbstractCollectionDecorator", "org.apache.commons.collections4.collection" ], [ "OrderedBidiMap", "org.apache.commons.collections4" ], [ "FactoryUtils", "org.apache.commons.collections4" ], [ "IterableGet", "org.apache.commons.collections4" ], [ "ListUtils", "org.apache.commons.collections4" ], [ "Closure", "org.apache.commons.collections4" ], [ "IterableSortedMap", "org.apache.commons.collections4" ], [ "MapUtils", "org.apache.commons.collections4" ], [ "Transformer", "org.apache.commons.collections4" ], [ "DefaultEquator", "org.apache.commons.collections4.functors" ], [ "StringValueTransformer", "org.apache.commons.collections4.functors" ], [ "PredicateDecorator", "org.apache.commons.collections4.functors" ], [ "IfTransformer", "org.apache.commons.collections4.functors" ], [ "IdentityPredicate", "org.apache.commons.collections4.functors" ], [ "ExceptionClosure", "org.apache.commons.collections4.functors" ], [ "NOPClosure", "org.apache.commons.collections4.functors" ], [ "ClosureTransformer", "org.apache.commons.collections4.functors" ], [ "FunctorUtils", "org.apache.commons.collections4.functors" ], [ "TransformerPredicate", "org.apache.commons.collections4.functors" ], [ "NullPredicate", "org.apache.commons.collections4.functors" ], [ "ConstantTransformer", "org.apache.commons.collections4.functors" ], [ "PredicateTransformer", "org.apache.commons.collections4.functors" ], [ "WhileClosure", "org.apache.commons.collections4.functors" ], [ "ForClosure", "org.apache.commons.collections4.functors" ], [ "NullIsTruePredicate", "org.apache.commons.collections4.functors" ], [ "TransformedPredicate", "org.apache.commons.collections4.functors" ], [ "NonePredicate", "org.apache.commons.collections4.functors" ], [ "ExceptionTransformer", "org.apache.commons.collections4.functors" ], [ "SwitchTransformer", "org.apache.commons.collections4.functors" ], [ "TransformerClosure", "org.apache.commons.collections4.functors" ], [ "OrPredicate", "org.apache.commons.collections4.functors" ], [ "NOPTransformer", "org.apache.commons.collections4.functors" ], [ "MapTransformer", "org.apache.commons.collections4.functors" ], [ "ExceptionFactory", "org.apache.commons.collections4.functors" ], [ "ChainedClosure", "org.apache.commons.collections4.functors" ], [ "AndPredicate", "org.apache.commons.collections4.functors" ], [ "PrototypeFactory", "org.apache.commons.collections4.functors" ], [ "ExceptionPredicate", "org.apache.commons.collections4.functors" ], [ "AbstractQuantifierPredicate", "org.apache.commons.collections4.functors" ], [ "InstanceofPredicate", "org.apache.commons.collections4.functors" ], [ "InvokerTransformer", "org.apache.commons.collections4.functors" ], [ "FalsePredicate", "org.apache.commons.collections4.functors" ], [ "CloneTransformer", "org.apache.commons.collections4.functors" ], [ "NotPredicate", "org.apache.commons.collections4.functors" ], [ "ConstantFactory", "org.apache.commons.collections4.functors" ], [ "ChainedTransformer", "org.apache.commons.collections4.functors" ], [ "ComparatorPredicate", "org.apache.commons.collections4.functors" ], [ "CatchAndRethrowClosure", "org.apache.commons.collections4.functors" ], [ "AllPredicate", "org.apache.commons.collections4.functors" ], [ "NullIsFalsePredicate", "org.apache.commons.collections4.functors" ], [ "NullIsExceptionPredicate", "org.apache.commons.collections4.functors" ], [ "AnyPredicate", "org.apache.commons.collections4.functors" ], [ "TruePredicate", "org.apache.commons.collections4.functors" ], [ "FactoryTransformer", "org.apache.commons.collections4.functors" ], [ "NotNullPredicate", "org.apache.commons.collections4.functors" ], [ "SwitchClosure", "org.apache.commons.collections4.functors" ], [ "UniquePredicate", "org.apache.commons.collections4.functors" ], [ "InstantiateTransformer", "org.apache.commons.collections4.functors" ], [ "OnePredicate", "org.apache.commons.collections4.functors" ], [ "EqualPredicate", "org.apache.commons.collections4.functors" ], [ "InstantiateFactory", "org.apache.commons.collections4.functors" ], [ "IfClosure", "org.apache.commons.collections4.functors" ], [ "ResettableListIterator", "org.apache.commons.collections4" ], [ "OrderedIterator", "org.apache.commons.collections4" ], [ "ComparatorChain", "org.apache.commons.collections4.comparators" ], [ "BooleanComparator", "org.apache.commons.collections4.comparators" ], [ "ReverseComparator", "org.apache.commons.collections4.comparators" ], [ "ComparableComparator", "org.apache.commons.collections4.comparators" ], [ "TransformingComparator", "org.apache.commons.collections4.comparators" ], [ "FixedOrderComparator", "org.apache.commons.collections4.comparators" ], [ "NullComparator", "org.apache.commons.collections4.comparators" ], [ "CollectionUtils", "org.apache.commons.collections4" ], [ "ListValuedMap", "org.apache.commons.collections4" ], [ "AbstractIterableGetMapDecorator", "org.apache.commons.collections4.splitmap" ], [ "TransformedSplitMap", "org.apache.commons.collections4.splitmap" ], [ "Factory", "org.apache.commons.collections4" ], [ "IterableUtils", "org.apache.commons.collections4" ], [ "Bag", "org.apache.commons.collections4" ], [ "Predicate", "org.apache.commons.collections4" ], [ "SortedBag", "org.apache.commons.collections4" ], [ "TrieUtils", "org.apache.commons.collections4" ], [ "ClosureUtils", "org.apache.commons.collections4" ], [ "PatriciaTrie", "org.apache.commons.collections4.trie" ], [ "UnmodifiableTrie", "org.apache.commons.collections4.trie" ], [ "KeyAnalyzer", "org.apache.commons.collections4.trie" ], [ "AbstractPatriciaTrie", "org.apache.commons.collections4.trie" ], [ "AbstractBitwiseTrie", "org.apache.commons.collections4.trie" ], [ "StringKeyAnalyzer", "org.apache.commons.collections4.trie.analyzer" ], [ "TransformedSortedMap", "org.apache.commons.collections4.map" ], [ "AbstractLinkedMap", "org.apache.commons.collections4.map" ], [ "Flat3Map", "org.apache.commons.collections4.map" ], [ "PredicatedMap", "org.apache.commons.collections4.map" ], [ "FixedSizeSortedMap", "org.apache.commons.collections4.map" ], [ "UnmodifiableSortedMap", "org.apache.commons.collections4.map" ], [ "PredicatedSortedMap", "org.apache.commons.collections4.map" ], [ "DefaultedMap", "org.apache.commons.collections4.map" ], [ "ReferenceIdentityMap", "org.apache.commons.collections4.map" ], [ "AbstractSortedMapDecorator", "org.apache.commons.collections4.map" ], [ "AbstractInputCheckedMapDecorator", "org.apache.commons.collections4.map" ], [ "FixedSizeMap", "org.apache.commons.collections4.map" ], [ "LazySortedMap", "org.apache.commons.collections4.map" ], [ "UnmodifiableOrderedMap", "org.apache.commons.collections4.map" ], [ "CaseInsensitiveMap", "org.apache.commons.collections4.map" ], [ "AbstractHashedMap", "org.apache.commons.collections4.map" ], [ "AbstractOrderedMapDecorator", "org.apache.commons.collections4.map" ], [ "UnmodifiableMap", "org.apache.commons.collections4.map" ], [ "EntrySetToMapIteratorAdapter", "org.apache.commons.collections4.map" ], [ "AbstractIterableMap", "org.apache.commons.collections4.map" ], [ "ListOrderedMap", "org.apache.commons.collections4.map" ], [ "LinkedMap", "org.apache.commons.collections4.map" ], [ "SingletonMap", "org.apache.commons.collections4.map" ], [ "UnmodifiableEntrySet", "org.apache.commons.collections4.map" ], [ "StaticBucketMap", "org.apache.commons.collections4.map" ], [ "AbstractMapDecorator", "org.apache.commons.collections4.map" ], [ "AbstractReferenceMap", "org.apache.commons.collections4.map" ], [ "MultiKeyMap", "org.apache.commons.collections4.map" ], [ "HashedMap", "org.apache.commons.collections4.map" ], [ "LazyMap", "org.apache.commons.collections4.map" ], [ "PassiveExpiringMap", "org.apache.commons.collections4.map" ], [ "MultiValueMap", "org.apache.commons.collections4.map" ], [ "LRUMap", "org.apache.commons.collections4.map" ], [ "ReferenceMap", "org.apache.commons.collections4.map" ], [ "TransformedMap", "org.apache.commons.collections4.map" ], [ "CompositeMap", "org.apache.commons.collections4.map" ], [ "UnmodifiableMapEntry", "org.apache.commons.collections4.keyvalue" ], [ "MultiKey", "org.apache.commons.collections4.keyvalue" ], [ "DefaultMapEntry", "org.apache.commons.collections4.keyvalue" ], [ "DefaultKeyValue", "org.apache.commons.collections4.keyvalue" ], [ "AbstractMapEntryDecorator", "org.apache.commons.collections4.keyvalue" ], [ "AbstractKeyValue", "org.apache.commons.collections4.keyvalue" ], [ "TiedMapEntry", "org.apache.commons.collections4.keyvalue" ], [ "AbstractMapEntry", "org.apache.commons.collections4.keyvalue" ], [ "MultiSetUtils", "org.apache.commons.collections4" ], [ "MapIterator", "org.apache.commons.collections4" ], [ "AbstractMultiValuedMap", "org.apache.commons.collections4.multimap" ], [ "UnmodifiableMultiValuedMap", "org.apache.commons.collections4.multimap" ], [ "HashSetValuedHashMap", "org.apache.commons.collections4.multimap" ], [ "TransformedMultiValuedMap", "org.apache.commons.collections4.multimap" ], [ "AbstractSetValuedMap", "org.apache.commons.collections4.multimap" ], [ "AbstractListValuedMap", "org.apache.commons.collections4.multimap" ], [ "ArrayListValuedHashMap", "org.apache.commons.collections4.multimap" ], [ "AbstractMultiValuedMapDecorator", "org.apache.commons.collections4.multimap" ], [ "LazyList", "org.apache.commons.collections4.list" ], [ "AbstractSerializableListDecorator", "org.apache.commons.collections4.list" ], [ "TreeList", "org.apache.commons.collections4.list" ], [ "SetUniqueList", "org.apache.commons.collections4.list" ], [ "AbstractListDecorator", "org.apache.commons.collections4.list" ], [ "NodeCachingLinkedList", "org.apache.commons.collections4.list" ], [ "UnmodifiableList", "org.apache.commons.collections4.list" ], [ "FixedSizeList", "org.apache.commons.collections4.list" ], [ "TransformedList", "org.apache.commons.collections4.list" ], [ "GrowthList", "org.apache.commons.collections4.list" ], [ "AbstractLinkedList", "org.apache.commons.collections4.list" ], [ "CursorableLinkedList", "org.apache.commons.collections4.list" ], [ "PredicatedList", "org.apache.commons.collections4.list" ], [ "OrderedMap", "org.apache.commons.collections4" ], [ "AbstractQueueDecorator", "org.apache.commons.collections4.queue" ], [ "TransformedQueue", "org.apache.commons.collections4.queue" ], [ "UnmodifiableQueue", "org.apache.commons.collections4.queue" ], [ "CircularFifoQueue", "org.apache.commons.collections4.queue" ], [ "PredicatedQueue", "org.apache.commons.collections4.queue" ], [ "FluentIterable", "org.apache.commons.collections4" ], [ "TransformerUtils", "org.apache.commons.collections4" ], [ "PredicateUtils", "org.apache.commons.collections4" ], [ "ResettableIterator", "org.apache.commons.collections4" ], [ "MultiValuedMap", "org.apache.commons.collections4" ], [ "SetUtils", "org.apache.commons.collections4" ], [ "SortedBidiMap", "org.apache.commons.collections4" ], [ "ArrayStack", "org.apache.commons.collections4" ], [ "Put", "org.apache.commons.collections4" ], [ "OrderedMapIterator", "org.apache.commons.collections4" ], [ "TransformedSet", "org.apache.commons.collections4.set" ], [ "CompositeSet", "org.apache.commons.collections4.set" ], [ "TransformedNavigableSet", "org.apache.commons.collections4.set" ], [ "PredicatedNavigableSet", "org.apache.commons.collections4.set" ], [ "AbstractSetDecorator", "org.apache.commons.collections4.set" ], [ "ListOrderedSet", "org.apache.commons.collections4.set" ], [ "UnmodifiableSet", "org.apache.commons.collections4.set" ], [ "AbstractSerializableSetDecorator", "org.apache.commons.collections4.set" ], [ "MapBackedSet", "org.apache.commons.collections4.set" ], [ "UnmodifiableSortedSet", "org.apache.commons.collections4.set" ], [ "PredicatedSortedSet", "org.apache.commons.collections4.set" ], [ "AbstractSortedSetDecorator", "org.apache.commons.collections4.set" ], [ "PredicatedSet", "org.apache.commons.collections4.set" ], [ "AbstractNavigableSetDecorator", "org.apache.commons.collections4.set" ], [ "UnmodifiableNavigableSet", "org.apache.commons.collections4.set" ], [ "TransformedSortedSet", "org.apache.commons.collections4.set" ], [ "IterableMap", "org.apache.commons.collections4" ], [ "EnumerationUtils", "org.apache.commons.collections4" ], [ "DeleteCommand", "org.apache.commons.collections4.sequence" ], [ "ReplacementsHandler", "org.apache.commons.collections4.sequence" ], [ "InsertCommand", "org.apache.commons.collections4.sequence" ], [ "SequencesComparator", "org.apache.commons.collections4.sequence" ], [ "ReplacementsFinder", "org.apache.commons.collections4.sequence" ], [ "KeepCommand", "org.apache.commons.collections4.sequence" ], [ "EditCommand", "org.apache.commons.collections4.sequence" ], [ "CommandVisitor", "org.apache.commons.collections4.sequence" ], [ "EditScript", "org.apache.commons.collections4.sequence" ], [ "QueueUtils", "org.apache.commons.collections4" ], [ "SetValuedMap", "org.apache.commons.collections4" ], [ "SynchronizedBag", "org.apache.commons.collections4.bag" ], [ "AbstractMapBag", "org.apache.commons.collections4.bag" ], [ "CollectionBag", "org.apache.commons.collections4.bag" ], [ "UnmodifiableBag", "org.apache.commons.collections4.bag" ], [ "PredicatedSortedBag", "org.apache.commons.collections4.bag" ], [ "UnmodifiableSortedBag", "org.apache.commons.collections4.bag" ], [ "HashBag", "org.apache.commons.collections4.bag" ], [ "AbstractBagDecorator", "org.apache.commons.collections4.bag" ], [ "TransformedSortedBag", "org.apache.commons.collections4.bag" ], [ "TreeBag", "org.apache.commons.collections4.bag" ], [ "PredicatedBag", "org.apache.commons.collections4.bag" ], [ "SynchronizedSortedBag", "org.apache.commons.collections4.bag" ], [ "CollectionSortedBag", "org.apache.commons.collections4.bag" ], [ "TransformedBag", "org.apache.commons.collections4.bag" ], [ "AbstractSortedBagDecorator", "org.apache.commons.collections4.bag" ], [ "HashMultiSet", "org.apache.commons.collections4.multiset" ], [ "AbstractMultiSet", "org.apache.commons.collections4.multiset" ], [ "PredicatedMultiSet", "org.apache.commons.collections4.multiset" ], [ "AbstractMultiSetDecorator", "org.apache.commons.collections4.multiset" ], [ "AbstractMapMultiSet", "org.apache.commons.collections4.multiset" ], [ "UnmodifiableMultiSet", "org.apache.commons.collections4.multiset" ], [ "SynchronizedMultiSet", "org.apache.commons.collections4.multiset" ], [ "BagUtils", "org.apache.commons.collections4" ], [ "Unmodifiable", "org.apache.commons.collections4" ], [ "Get", "org.apache.commons.collections4" ], [ "Trie", "org.apache.commons.collections4" ], [ "MultiMap", "org.apache.commons.collections4" ], [ "KeyValue", "org.apache.commons.collections4" ], [ "IteratorChain", "org.apache.commons.collections4.iterators" ], [ "EmptyListIterator", "org.apache.commons.collections4.iterators" ], [ "UnmodifiableOrderedMapIterator", "org.apache.commons.collections4.iterators" ], [ "AbstractListIteratorDecorator", "org.apache.commons.collections4.iterators" ], [ "ZippingIterator", "org.apache.commons.collections4.iterators" ], [ "UnmodifiableIterator", "org.apache.commons.collections4.iterators" ], [ "CollatingIterator", "org.apache.commons.collections4.iterators" ], [ "UniqueFilterIterator", "org.apache.commons.collections4.iterators" ], [ "ReverseListIterator", "org.apache.commons.collections4.iterators" ], [ "BoundedIterator", "org.apache.commons.collections4.iterators" ], [ "AbstractIteratorDecorator", "org.apache.commons.collections4.iterators" ], [ "TransformIterator", "org.apache.commons.collections4.iterators" ], [ "AbstractEmptyIterator", "org.apache.commons.collections4.iterators" ], [ "NodeListIterator", "org.apache.commons.collections4.iterators" ], [ "ArrayListIterator", "org.apache.commons.collections4.iterators" ], [ "LazyIteratorChain", "org.apache.commons.collections4.iterators" ], [ "LoopingListIterator", "org.apache.commons.collections4.iterators" ], [ "PeekingIterator", "org.apache.commons.collections4.iterators" ], [ "ObjectGraphIterator", "org.apache.commons.collections4.iterators" ], [ "ArrayIterator", "org.apache.commons.collections4.iterators" ], [ "PermutationIterator", "org.apache.commons.collections4.iterators" ], [ "SingletonListIterator", "org.apache.commons.collections4.iterators" ], [ "EmptyMapIterator", "org.apache.commons.collections4.iterators" ], [ "ObjectArrayIterator", "org.apache.commons.collections4.iterators" ], [ "EnumerationIterator", "org.apache.commons.collections4.iterators" ], [ "IteratorIterable", "org.apache.commons.collections4.iterators" ], [ "AbstractEmptyMapIterator", "org.apache.commons.collections4.iterators" ], [ "LoopingIterator", "org.apache.commons.collections4.iterators" ], [ "IteratorEnumeration", "org.apache.commons.collections4.iterators" ], [ "SingletonIterator", "org.apache.commons.collections4.iterators" ], [ "ListIteratorWrapper", "org.apache.commons.collections4.iterators" ], [ "SkippingIterator", "org.apache.commons.collections4.iterators" ], [ "EmptyOrderedIterator", "org.apache.commons.collections4.iterators" ], [ "AbstractMapIteratorDecorator", "org.apache.commons.collections4.iterators" ], [ "ObjectArrayListIterator", "org.apache.commons.collections4.iterators" ], [ "UnmodifiableListIterator", "org.apache.commons.collections4.iterators" ], [ "EmptyOrderedMapIterator", "org.apache.commons.collections4.iterators" ], [ "UnmodifiableMapIterator", "org.apache.commons.collections4.iterators" ], [ "EmptyIterator", "org.apache.commons.collections4.iterators" ], [ "EntrySetMapIterator", "org.apache.commons.collections4.iterators" ], [ "PushbackIterator", "org.apache.commons.collections4.iterators" ], [ "FilterIterator", "org.apache.commons.collections4.iterators" ], [ "AbstractUntypedIteratorDecorator", "org.apache.commons.collections4.iterators" ], [ "AbstractOrderedMapIteratorDecorator", "org.apache.commons.collections4.iterators" ], [ "FilterListIterator", "org.apache.commons.collections4.iterators" ], [ "SplitMapUtils", "org.apache.commons.collections4" ], [ "BoundedMap", "org.apache.commons.collections4" ] ],
  "tokensProjectClassesNonPrivateStaticNonVoidMethods" : [ [ "emptyIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> emptyIterator()" ], [ "emptyListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> emptyListIterator()" ], [ "emptyOrderedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> OrderedIterator<E> emptyOrderedIterator()" ], [ "emptyMapIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <K, V> MapIterator<K, V> emptyMapIterator()" ], [ "emptyOrderedMapIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <K, V> OrderedMapIterator<K, V> emptyOrderedMapIterator()" ], [ "singletonIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> singletonIterator(final E object)" ], [ "singletonListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ListIterator<E> singletonListIterator(final E object)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final E... array)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final Object array)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final E[] array, final int start)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final Object array, final int start)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final E[] array, final int start, final int end)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final Object array, final int start, final int end)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final E... array)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final Object array)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final E[] array, final int start)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final Object array, final int start)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final E[] array, final int start, final int end)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final Object array, final int start, final int end)" ], [ "boundedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> BoundedIterator<E> boundedIterator(final Iterator<? extends E> iterator, long max)" ], [ "boundedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> BoundedIterator<E> boundedIterator(final Iterator<? extends E> iterator, long offset, long max)" ], [ "unmodifiableIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> unmodifiableIterator(final Iterator<E> iterator)" ], [ "unmodifiableListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ListIterator<E> unmodifiableListIterator(final ListIterator<E> listIterator)" ], [ "unmodifiableMapIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <K, V> MapIterator<K, V> unmodifiableMapIterator(final MapIterator<K, V> mapIterator)" ], [ "chainedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> chainedIterator(final Iterator<? extends E> iterator1, final Iterator<? extends E> iterator2)" ], [ "chainedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> chainedIterator(final Iterator<? extends E>... iterators)" ], [ "chainedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> chainedIterator(final Collection<Iterator<? extends E>> iterators)" ], [ "collatedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> collatedIterator(final Comparator<? super E> comparator, final Iterator<? extends E> iterator1, final Iterator<? extends E> iterator2)" ], [ "collatedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> collatedIterator(final Comparator<? super E> comparator, final Iterator<? extends E>... iterators)" ], [ "collatedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> collatedIterator(final Comparator<? super E> comparator, final Collection<Iterator<? extends E>> iterators)" ], [ "objectGraphIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> objectGraphIterator(final E root, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <I, O> Iterator<O> transformedIterator(final Iterator<? extends I> iterator, final Transformer<? super I, ? extends O> transform)" ], [ "filteredIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> filteredIterator(final Iterator<? extends E> iterator, final Predicate<? super E> predicate)" ], [ "filteredListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ListIterator<E> filteredListIterator(final ListIterator<? extends E> listIterator, final Predicate<? super E> predicate)" ], [ "loopingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> loopingIterator(final Collection<? extends E> coll)" ], [ "loopingListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> loopingListIterator(final List<E> list)" ], [ "nodeListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static NodeListIterator nodeListIterator(final NodeList nodeList)" ], [ "nodeListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static NodeListIterator nodeListIterator(final Node node)" ], [ "peekingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> peekingIterator(final Iterator<? extends E> iterator)" ], [ "pushbackIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> pushbackIterator(final Iterator<? extends E> iterator)" ], [ "skippingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> SkippingIterator<E> skippingIterator(final Iterator<E> iterator, long offset)" ], [ "zippingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ZippingIterator<E> zippingIterator(final Iterator<? extends E> a, final Iterator<? extends E> b)" ], [ "zippingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ZippingIterator<E> zippingIterator(final Iterator<? extends E> a, final Iterator<? extends E> b, final Iterator<? extends E> c)" ], [ "zippingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ZippingIterator<E> zippingIterator(final Iterator<? extends E>... iterators)" ], [ "asIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> asIterator(final Enumeration<? extends E> enumeration)" ], [ "asIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> asIterator(final Enumeration<? extends E> enumeration, final Collection<? super E> removeCollection)" ], [ "asEnumeration", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Enumeration<E> asEnumeration(final Iterator<? extends E> iterator)" ], [ "asIterable", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterable<E> asIterable(final Iterator<? extends E> iterator)" ], [ "asMultipleUseIterable", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterable<E> asMultipleUseIterable(final Iterator<? extends E> iterator)" ], [ "toListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ListIterator<E> toListIterator(final Iterator<? extends E> iterator)" ], [ "toArray", "org.apache.commons.collections4", "IteratorUtils", "public static Object[] toArray(final Iterator<?> iterator)" ], [ "toArray", "org.apache.commons.collections4", "IteratorUtils", "public static <E> E[] toArray(final Iterator<? extends E> iterator, final Class<E> arrayClass)" ], [ "toList", "org.apache.commons.collections4", "IteratorUtils", "public static <E> List<E> toList(final Iterator<? extends E> iterator)" ], [ "toList", "org.apache.commons.collections4", "IteratorUtils", "public static <E> List<E> toList(final Iterator<? extends E> iterator, final int estimatedSize)" ], [ "getIterator", "org.apache.commons.collections4", "IteratorUtils", "public static Iterator<?> getIterator(final Object obj)" ], [ "forEachButLast", "org.apache.commons.collections4", "IteratorUtils", "public static <E> E forEachButLast(final Iterator<E> iterator, final Closure<? super E> closure)" ], [ "find", "org.apache.commons.collections4", "IteratorUtils", "public static <E> E find(final Iterator<E> iterator, final Predicate<? super E> predicate)" ], [ "indexOf", "org.apache.commons.collections4", "IteratorUtils", "public static <E> int indexOf(final Iterator<E> iterator, final Predicate<? super E> predicate)" ], [ "matchesAny", "org.apache.commons.collections4", "IteratorUtils", "public static <E> boolean matchesAny(final Iterator<E> iterator, final Predicate<? super E> predicate)" ], [ "matchesAll", "org.apache.commons.collections4", "IteratorUtils", "public static <E> boolean matchesAll(final Iterator<E> iterator, final Predicate<? super E> predicate)" ], [ "isEmpty", "org.apache.commons.collections4", "IteratorUtils", "public static boolean isEmpty(final Iterator<?> iterator)" ], [ "contains", "org.apache.commons.collections4", "IteratorUtils", "public static <E> boolean contains(final Iterator<E> iterator, final Object object)" ], [ "get", "org.apache.commons.collections4", "IteratorUtils", "public static <E> E get(final Iterator<E> iterator, final int index)" ], [ "size", "org.apache.commons.collections4", "IteratorUtils", "public static int size(final Iterator<?> iterator)" ], [ "toString", "org.apache.commons.collections4", "IteratorUtils", "public static <E> String toString(final Iterator<E> iterator)" ], [ "toString", "org.apache.commons.collections4", "IteratorUtils", "public static <E> String toString(final Iterator<E> iterator, final Transformer<? super E, String> transformer)" ], [ "toString", "org.apache.commons.collections4", "IteratorUtils", "public static <E> String toString(final Iterator<E> iterator, final Transformer<? super E, String> transformer, final String delimiter, final String prefix, final String suffix)" ], [ "naturalComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E extends Comparable<? super E>> Comparator<E> naturalComparator()" ], [ "chainedComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> Comparator<E> chainedComparator(final Comparator<E>... comparators)" ], [ "chainedComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> Comparator<E> chainedComparator(final Collection<Comparator<E>> comparators)" ], [ "reversedComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> Comparator<E> reversedComparator(final Comparator<E> comparator)" ], [ "booleanComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static Comparator<Boolean> booleanComparator(final boolean trueFirst)" ], [ "nullLowComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> Comparator<E> nullLowComparator(Comparator<E> comparator)" ], [ "nullHighComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> Comparator<E> nullHighComparator(Comparator<E> comparator)" ], [ "transformedComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <I, O> Comparator<I> transformedComparator(Comparator<O> comparator, final Transformer<? super I, ? extends O> transformer)" ], [ "min", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> E min(final E o1, final E o2, Comparator<E> comparator)" ], [ "max", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> E max(final E o1, final E o2, Comparator<E> comparator)" ], [ "unmodifiableBidiMap", "org.apache.commons.collections4.bidimap", "UnmodifiableBidiMap", "public static <K, V> BidiMap<K, V> unmodifiableBidiMap(final BidiMap<? extends K, ? extends V> map)" ], [ "unmodifiableOrderedBidiMap", "org.apache.commons.collections4.bidimap", "UnmodifiableOrderedBidiMap", "public static <K, V> OrderedBidiMap<K, V> unmodifiableOrderedBidiMap(final OrderedBidiMap<? extends K, ? extends V> map)" ], [ "unmodifiableSortedBidiMap", "org.apache.commons.collections4.bidimap", "UnmodifiableSortedBidiMap", "public static <K, V> SortedBidiMap<K, V> unmodifiableSortedBidiMap(final SortedBidiMap<K, ? extends V> map)" ], [ "emptyMultiValuedMap", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> MultiValuedMap<K, V> emptyMultiValuedMap()" ], [ "emptyIfNull", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> MultiValuedMap<K, V> emptyIfNull(final MultiValuedMap<K, V> map)" ], [ "isEmpty", "org.apache.commons.collections4", "MultiMapUtils", "public static boolean isEmpty(final MultiValuedMap<?, ?> map)" ], [ "getCollection", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> Collection<V> getCollection(final MultiValuedMap<K, V> map, final K key)" ], [ "getValuesAsList", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> List<V> getValuesAsList(final MultiValuedMap<K, V> map, final K key)" ], [ "getValuesAsSet", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> Set<V> getValuesAsSet(final MultiValuedMap<K, V> map, final K key)" ], [ "getValuesAsBag", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> Bag<V> getValuesAsBag(final MultiValuedMap<K, V> map, final K key)" ], [ "newListValuedHashMap", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> ListValuedMap<K, V> newListValuedHashMap()" ], [ "newSetValuedHashMap", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> SetValuedMap<K, V> newSetValuedHashMap()" ], [ "unmodifiableMultiValuedMap", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> MultiValuedMap<K, V> unmodifiableMultiValuedMap(final MultiValuedMap<? extends K, ? extends V> map)" ], [ "transformedMultiValuedMap", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> MultiValuedMap<K, V> transformedMultiValuedMap(final MultiValuedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "unmodifiableBoundedCollection", "org.apache.commons.collections4.collection", "UnmodifiableBoundedCollection", "public static <E> BoundedCollection<E> unmodifiableBoundedCollection(final BoundedCollection<? extends E> coll)" ], [ "unmodifiableBoundedCollection", "org.apache.commons.collections4.collection", "UnmodifiableBoundedCollection", "public static <E> BoundedCollection<E> unmodifiableBoundedCollection(Collection<? extends E> coll)" ], [ "transformingCollection", "org.apache.commons.collections4.collection", "TransformedCollection", "public static <E> TransformedCollection<E> transformingCollection(final Collection<E> coll, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedCollection", "org.apache.commons.collections4.collection", "TransformedCollection", "public static <E> TransformedCollection<E> transformedCollection(final Collection<E> collection, final Transformer<? super E, ? extends E> transformer)" ], [ "builder", "org.apache.commons.collections4.collection", "PredicatedCollection", "public static <E> Builder<E> builder(final Predicate<? super E> predicate)" ], [ "notNullBuilder", "org.apache.commons.collections4.collection", "PredicatedCollection", "public static <E> Builder<E> notNullBuilder()" ], [ "predicatedCollection", "org.apache.commons.collections4.collection", "PredicatedCollection", "public static <T> PredicatedCollection<T> predicatedCollection(final Collection<T> coll, final Predicate<? super T> predicate)" ], [ "uniqueIndexedCollection", "org.apache.commons.collections4.collection", "IndexedCollection", "public static <K, C> IndexedCollection<K, C> uniqueIndexedCollection(final Collection<C> coll, final Transformer<C, K> keyTransformer)" ], [ "nonUniqueIndexedCollection", "org.apache.commons.collections4.collection", "IndexedCollection", "public static <K, C> IndexedCollection<K, C> nonUniqueIndexedCollection(final Collection<C> coll, final Transformer<C, K> keyTransformer)" ], [ "synchronizedCollection", "org.apache.commons.collections4.collection", "SynchronizedCollection", "public static <T> SynchronizedCollection<T> synchronizedCollection(final Collection<T> coll)" ], [ "unmodifiableCollection", "org.apache.commons.collections4.collection", "UnmodifiableCollection", "public static <T> Collection<T> unmodifiableCollection(final Collection<? extends T> coll)" ], [ "exceptionFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> exceptionFactory()" ], [ "nullFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> nullFactory()" ], [ "constantFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> constantFactory(final T constantToReturn)" ], [ "prototypeFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> prototypeFactory(final T prototype)" ], [ "instantiateFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> instantiateFactory(final Class<T> classToInstantiate)" ], [ "instantiateFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> instantiateFactory(final Class<T> classToInstantiate, final Class<?>[] paramTypes, final Object[] args)" ], [ "emptyIfNull", "org.apache.commons.collections4", "ListUtils", "public static <T> List<T> emptyIfNull(final List<T> list)" ], [ "defaultIfNull", "org.apache.commons.collections4", "ListUtils", "public static <T> List<T> defaultIfNull(final List<T> list, final List<T> defaultList)" ], [ "intersection", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> intersection(final List<? extends E> list1, final List<? extends E> list2)" ], [ "subtract", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> subtract(final List<E> list1, final List<? extends E> list2)" ], [ "sum", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> sum(final List<? extends E> list1, final List<? extends E> list2)" ], [ "union", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> union(final List<? extends E> list1, final List<? extends E> list2)" ], [ "select", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> select(final Collection<? extends E> inputCollection, final Predicate<? super E> predicate)" ], [ "selectRejected", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> selectRejected(final Collection<? extends E> inputCollection, final Predicate<? super E> predicate)" ], [ "isEqualList", "org.apache.commons.collections4", "ListUtils", "public static boolean isEqualList(final Collection<?> list1, final Collection<?> list2)" ], [ "hashCodeForList", "org.apache.commons.collections4", "ListUtils", "public static int hashCodeForList(final Collection<?> list)" ], [ "retainAll", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> retainAll(final Collection<E> collection, final Collection<?> retain)" ], [ "removeAll", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> removeAll(final Collection<E> collection, final Collection<?> remove)" ], [ "synchronizedList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> synchronizedList(final List<E> list)" ], [ "unmodifiableList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> unmodifiableList(final List<? extends E> list)" ], [ "predicatedList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> predicatedList(final List<E> list, final Predicate<E> predicate)" ], [ "transformedList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> transformedList(final List<E> list, final Transformer<? super E, ? extends E> transformer)" ], [ "lazyList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> lazyList(final List<E> list, final Factory<? extends E> factory)" ], [ "fixedSizeList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> fixedSizeList(final List<E> list)" ], [ "indexOf", "org.apache.commons.collections4", "ListUtils", "public static <E> int indexOf(final List<E> list, final Predicate<E> predicate)" ], [ "longestCommonSubsequence", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> longestCommonSubsequence(final List<E> a, final List<E> b)" ], [ "longestCommonSubsequence", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> longestCommonSubsequence(final List<E> a, final List<E> b, final Equator<? super E> equator)" ], [ "longestCommonSubsequence", "org.apache.commons.collections4", "ListUtils", "public static String longestCommonSubsequence(final CharSequence a, final CharSequence b)" ], [ "partition", "org.apache.commons.collections4", "ListUtils", "public static <T> List<List<T>> partition(final List<T> list, final int size)" ], [ "getObject", "org.apache.commons.collections4", "MapUtils", "public static <K, V> V getObject(final Map<? super K, V> map, final K key)" ], [ "getString", "org.apache.commons.collections4", "MapUtils", "public static <K> String getString(final Map<? super K, ?> map, final K key)" ], [ "getBoolean", "org.apache.commons.collections4", "MapUtils", "public static <K> Boolean getBoolean(final Map<? super K, ?> map, final K key)" ], [ "getNumber", "org.apache.commons.collections4", "MapUtils", "public static <K> Number getNumber(final Map<? super K, ?> map, final K key)" ], [ "getByte", "org.apache.commons.collections4", "MapUtils", "public static <K> Byte getByte(final Map<? super K, ?> map, final K key)" ], [ "getShort", "org.apache.commons.collections4", "MapUtils", "public static <K> Short getShort(final Map<? super K, ?> map, final K key)" ], [ "getInteger", "org.apache.commons.collections4", "MapUtils", "public static <K> Integer getInteger(final Map<? super K, ?> map, final K key)" ], [ "getLong", "org.apache.commons.collections4", "MapUtils", "public static <K> Long getLong(final Map<? super K, ?> map, final K key)" ], [ "getFloat", "org.apache.commons.collections4", "MapUtils", "public static <K> Float getFloat(final Map<? super K, ?> map, final K key)" ], [ "getDouble", "org.apache.commons.collections4", "MapUtils", "public static <K> Double getDouble(final Map<? super K, ?> map, final K key)" ], [ "getMap", "org.apache.commons.collections4", "MapUtils", "public static <K> Map<?, ?> getMap(final Map<? super K, ?> map, final K key)" ], [ "getObject", "org.apache.commons.collections4", "MapUtils", "public static <K, V> V getObject(final Map<K, V> map, final K key, final V defaultValue)" ], [ "getString", "org.apache.commons.collections4", "MapUtils", "public static <K> String getString(final Map<? super K, ?> map, final K key, final String defaultValue)" ], [ "getBoolean", "org.apache.commons.collections4", "MapUtils", "public static <K> Boolean getBoolean(final Map<? super K, ?> map, final K key, final Boolean defaultValue)" ], [ "getNumber", "org.apache.commons.collections4", "MapUtils", "public static <K> Number getNumber(final Map<? super K, ?> map, final K key, final Number defaultValue)" ], [ "getByte", "org.apache.commons.collections4", "MapUtils", "public static <K> Byte getByte(final Map<? super K, ?> map, final K key, final Byte defaultValue)" ], [ "getShort", "org.apache.commons.collections4", "MapUtils", "public static <K> Short getShort(final Map<? super K, ?> map, final K key, final Short defaultValue)" ], [ "getInteger", "org.apache.commons.collections4", "MapUtils", "public static <K> Integer getInteger(final Map<? super K, ?> map, final K key, final Integer defaultValue)" ], [ "getLong", "org.apache.commons.collections4", "MapUtils", "public static <K> Long getLong(final Map<? super K, ?> map, final K key, final Long defaultValue)" ], [ "getFloat", "org.apache.commons.collections4", "MapUtils", "public static <K> Float getFloat(final Map<? super K, ?> map, final K key, final Float defaultValue)" ], [ "getDouble", "org.apache.commons.collections4", "MapUtils", "public static <K> Double getDouble(final Map<? super K, ?> map, final K key, final Double defaultValue)" ], [ "getMap", "org.apache.commons.collections4", "MapUtils", "public static <K> Map<?, ?> getMap(final Map<? super K, ?> map, final K key, final Map<?, ?> defaultValue)" ], [ "getBooleanValue", "org.apache.commons.collections4", "MapUtils", "public static <K> boolean getBooleanValue(final Map<? super K, ?> map, final K key)" ], [ "getByteValue", "org.apache.commons.collections4", "MapUtils", "public static <K> byte getByteValue(final Map<? super K, ?> map, final K key)" ], [ "getShortValue", "org.apache.commons.collections4", "MapUtils", "public static <K> short getShortValue(final Map<? super K, ?> map, final K key)" ], [ "getIntValue", "org.apache.commons.collections4", "MapUtils", "public static <K> int getIntValue(final Map<? super K, ?> map, final K key)" ], [ "getLongValue", "org.apache.commons.collections4", "MapUtils", "public static <K> long getLongValue(final Map<? super K, ?> map, final K key)" ], [ "getFloatValue", "org.apache.commons.collections4", "MapUtils", "public static <K> float getFloatValue(final Map<? super K, ?> map, final K key)" ], [ "getDoubleValue", "org.apache.commons.collections4", "MapUtils", "public static <K> double getDoubleValue(final Map<? super K, ?> map, final K key)" ], [ "getBooleanValue", "org.apache.commons.collections4", "MapUtils", "public static <K> boolean getBooleanValue(final Map<? super K, ?> map, final K key, final boolean defaultValue)" ], [ "getByteValue", "org.apache.commons.collections4", "MapUtils", "public static <K> byte getByteValue(final Map<? super K, ?> map, final K key, final byte defaultValue)" ], [ "getShortValue", "org.apache.commons.collections4", "MapUtils", "public static <K> short getShortValue(final Map<? super K, ?> map, final K key, final short defaultValue)" ], [ "getIntValue", "org.apache.commons.collections4", "MapUtils", "public static <K> int getIntValue(final Map<? super K, ?> map, final K key, final int defaultValue)" ], [ "getLongValue", "org.apache.commons.collections4", "MapUtils", "public static <K> long getLongValue(final Map<? super K, ?> map, final K key, final long defaultValue)" ], [ "getFloatValue", "org.apache.commons.collections4", "MapUtils", "public static <K> float getFloatValue(final Map<? super K, ?> map, final K key, final float defaultValue)" ], [ "getDoubleValue", "org.apache.commons.collections4", "MapUtils", "public static <K> double getDoubleValue(final Map<? super K, ?> map, final K key, final double defaultValue)" ], [ "toProperties", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Properties toProperties(final Map<K, V> map)" ], [ "toMap", "org.apache.commons.collections4", "MapUtils", "public static Map<String, Object> toMap(final ResourceBundle resourceBundle)" ], [ "invertMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Map<V, K> invertMap(final Map<K, V> map)" ], [ "putAll", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Map<K, V> putAll(final Map<K, V> map, final Object[] array)" ], [ "emptyIfNull", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Map<K, V> emptyIfNull(final Map<K, V> map)" ], [ "isEmpty", "org.apache.commons.collections4", "MapUtils", "public static boolean isEmpty(final Map<?, ?> map)" ], [ "isNotEmpty", "org.apache.commons.collections4", "MapUtils", "public static boolean isNotEmpty(final Map<?, ?> map)" ], [ "synchronizedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Map<K, V> synchronizedMap(final Map<K, V> map)" ], [ "unmodifiableMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Map<K, V> unmodifiableMap(final Map<? extends K, ? extends V> map)" ], [ "predicatedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> predicatedMap(final Map<K, V> map, final Predicate<? super K> keyPred, final Predicate<? super V> valuePred)" ], [ "transformedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> transformedMap(final Map<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "fixedSizeMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> fixedSizeMap(final Map<K, V> map)" ], [ "lazyMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> lazyMap(final Map<K, V> map, final Factory<? extends V> factory)" ], [ "lazyMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> lazyMap(final Map<K, V> map, final Transformer<? super K, ? extends V> transformerFactory)" ], [ "orderedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> OrderedMap<K, V> orderedMap(final Map<K, V> map)" ], [ "multiValueMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> MultiValueMap<K, V> multiValueMap(final Map<K, ? super Collection<V>> map)" ], [ "multiValueMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V, C extends Collection<V>> MultiValueMap<K, V> multiValueMap(final Map<K, C> map, final Class<C> collectionClass)" ], [ "multiValueMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V, C extends Collection<V>> MultiValueMap<K, V> multiValueMap(final Map<K, C> map, final Factory<C> collectionFactory)" ], [ "synchronizedSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> synchronizedSortedMap(final SortedMap<K, V> map)" ], [ "unmodifiableSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> unmodifiableSortedMap(final SortedMap<K, ? extends V> map)" ], [ "predicatedSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> predicatedSortedMap(final SortedMap<K, V> map, final Predicate<? super K> keyPred, final Predicate<? super V> valuePred)" ], [ "transformedSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> transformedSortedMap(final SortedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "fixedSizeSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> fixedSizeSortedMap(final SortedMap<K, V> map)" ], [ "lazySortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> lazySortedMap(final SortedMap<K, V> map, final Factory<? extends V> factory)" ], [ "lazySortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> lazySortedMap(final SortedMap<K, V> map, final Transformer<? super K, ? extends V> transformerFactory)" ], [ "iterableMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> iterableMap(final Map<K, V> map)" ], [ "iterableSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableSortedMap<K, V> iterableSortedMap(final SortedMap<K, V> sortedMap)" ], [ "defaultEquator", "org.apache.commons.collections4.functors", "DefaultEquator", "public static <T> DefaultEquator<T> defaultEquator()" ], [ "stringValueTransformer", "org.apache.commons.collections4.functors", "StringValueTransformer", "public static <T> Transformer<T, String> stringValueTransformer()" ], [ "ifTransformer", "org.apache.commons.collections4.functors", "IfTransformer", "public static <I, O> Transformer<I, O> ifTransformer(final Predicate<? super I> predicate, final Transformer<? super I, ? extends O> trueTransformer, final Transformer<? super I, ? extends O> falseTransformer)" ], [ "ifTransformer", "org.apache.commons.collections4.functors", "IfTransformer", "public static <T> Transformer<T, T> ifTransformer(final Predicate<? super T> predicate, final Transformer<? super T, ? extends T> trueTransformer)" ], [ "identityPredicate", "org.apache.commons.collections4.functors", "IdentityPredicate", "public static <T> Predicate<T> identityPredicate(final T object)" ], [ "exceptionClosure", "org.apache.commons.collections4.functors", "ExceptionClosure", "public static <E> Closure<E> exceptionClosure()" ], [ "nopClosure", "org.apache.commons.collections4.functors", "NOPClosure", "public static <E> Closure<E> nopClosure()" ], [ "closureTransformer", "org.apache.commons.collections4.functors", "ClosureTransformer", "public static <T> Transformer<T, T> closureTransformer(final Closure<? super T> closure)" ], [ "copy", "org.apache.commons.collections4.functors", "FunctorUtils", "static <T> Predicate<T>[] copy(final Predicate<? super T>... predicates)" ], [ "coerce", "org.apache.commons.collections4.functors", "FunctorUtils", "static <T> Predicate<T> coerce(final Predicate<? super T> predicate)" ], [ "validate", "org.apache.commons.collections4.functors", "FunctorUtils", "static <T> Predicate<? super T>[] validate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "copy", "org.apache.commons.collections4.functors", "FunctorUtils", "static <E> Closure<E>[] copy(final Closure<? super E>... closures)" ], [ "coerce", "org.apache.commons.collections4.functors", "FunctorUtils", "static <T> Closure<T> coerce(final Closure<? super T> closure)" ], [ "copy", "org.apache.commons.collections4.functors", "FunctorUtils", "static <I, O> Transformer<I, O>[] copy(final Transformer<? super I, ? extends O>... transformers)" ], [ "coerce", "org.apache.commons.collections4.functors", "FunctorUtils", "static <I, O> Transformer<I, O> coerce(final Transformer<? super I, ? extends O> transformer)" ], [ "transformerPredicate", "org.apache.commons.collections4.functors", "TransformerPredicate", "public static <T> Predicate<T> transformerPredicate(final Transformer<? super T, Boolean> transformer)" ], [ "nullPredicate", "org.apache.commons.collections4.functors", "NullPredicate", "public static <T> Predicate<T> nullPredicate()" ], [ "nullTransformer", "org.apache.commons.collections4.functors", "ConstantTransformer", "public static <I, O> Transformer<I, O> nullTransformer()" ], [ "constantTransformer", "org.apache.commons.collections4.functors", "ConstantTransformer", "public static <I, O> Transformer<I, O> constantTransformer(final O constantToReturn)" ], [ "predicateTransformer", "org.apache.commons.collections4.functors", "PredicateTransformer", "public static <T> Transformer<T, Boolean> predicateTransformer(final Predicate<? super T> predicate)" ], [ "whileClosure", "org.apache.commons.collections4.functors", "WhileClosure", "public static <E> Closure<E> whileClosure(final Predicate<? super E> predicate, final Closure<? super E> closure, final boolean doLoop)" ], [ "forClosure", "org.apache.commons.collections4.functors", "ForClosure", "public static <E> Closure<E> forClosure(final int count, final Closure<? super E> closure)" ], [ "nullIsTruePredicate", "org.apache.commons.collections4.functors", "NullIsTruePredicate", "public static <T> Predicate<T> nullIsTruePredicate(final Predicate<? super T> predicate)" ], [ "transformedPredicate", "org.apache.commons.collections4.functors", "TransformedPredicate", "public static <T> Predicate<T> transformedPredicate(final Transformer<? super T, ? extends T> transformer, final Predicate<? super T> predicate)" ], [ "nonePredicate", "org.apache.commons.collections4.functors", "NonePredicate", "public static <T> Predicate<T> nonePredicate(final Predicate<? super T>... predicates)" ], [ "nonePredicate", "org.apache.commons.collections4.functors", "NonePredicate", "public static <T> Predicate<T> nonePredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "exceptionTransformer", "org.apache.commons.collections4.functors", "ExceptionTransformer", "public static <I, O> Transformer<I, O> exceptionTransformer()" ], [ "switchTransformer", "org.apache.commons.collections4.functors", "SwitchTransformer", "public static <I, O> Transformer<I, O> switchTransformer(final Predicate<? super I>[] predicates, final Transformer<? super I, ? extends O>[] transformers, final Transformer<? super I, ? extends O> defaultTransformer)" ], [ "switchTransformer", "org.apache.commons.collections4.functors", "SwitchTransformer", "public static <I, O> Transformer<I, O> switchTransformer(final Map<? extends Predicate<? super I>, ? extends Transformer<? super I, ? extends O>> map)" ], [ "transformerClosure", "org.apache.commons.collections4.functors", "TransformerClosure", "public static <E> Closure<E> transformerClosure(final Transformer<? super E, ?> transformer)" ], [ "orPredicate", "org.apache.commons.collections4.functors", "OrPredicate", "public static <T> Predicate<T> orPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "nopTransformer", "org.apache.commons.collections4.functors", "NOPTransformer", "public static <T> Transformer<T, T> nopTransformer()" ], [ "mapTransformer", "org.apache.commons.collections4.functors", "MapTransformer", "public static <I, O> Transformer<I, O> mapTransformer(final Map<? super I, ? extends O> map)" ], [ "exceptionFactory", "org.apache.commons.collections4.functors", "ExceptionFactory", "public static <T> Factory<T> exceptionFactory()" ], [ "chainedClosure", "org.apache.commons.collections4.functors", "ChainedClosure", "public static <E> Closure<E> chainedClosure(final Closure<? super E>... closures)" ], [ "chainedClosure", "org.apache.commons.collections4.functors", "ChainedClosure", "public static <E> Closure<E> chainedClosure(final Collection<? extends Closure<? super E>> closures)" ], [ "andPredicate", "org.apache.commons.collections4.functors", "AndPredicate", "public static <T> Predicate<T> andPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "prototypeFactory", "org.apache.commons.collections4.functors", "PrototypeFactory", "public static <T> Factory<T> prototypeFactory(final T prototype)" ], [ "exceptionPredicate", "org.apache.commons.collections4.functors", "ExceptionPredicate", "public static <T> Predicate<T> exceptionPredicate()" ], [ "instanceOfPredicate", "org.apache.commons.collections4.functors", "InstanceofPredicate", "public static Predicate<Object> instanceOfPredicate(final Class<?> type)" ], [ "invokerTransformer", "org.apache.commons.collections4.functors", "InvokerTransformer", "public static <I, O> Transformer<I, O> invokerTransformer(final String methodName)" ], [ "invokerTransformer", "org.apache.commons.collections4.functors", "InvokerTransformer", "public static <I, O> Transformer<I, O> invokerTransformer(final String methodName, final Class<?>[] paramTypes, final Object[] args)" ], [ "falsePredicate", "org.apache.commons.collections4.functors", "FalsePredicate", "public static <T> Predicate<T> falsePredicate()" ], [ "cloneTransformer", "org.apache.commons.collections4.functors", "CloneTransformer", "public static <T> Transformer<T, T> cloneTransformer()" ], [ "notPredicate", "org.apache.commons.collections4.functors", "NotPredicate", "public static <T> Predicate<T> notPredicate(final Predicate<? super T> predicate)" ], [ "constantFactory", "org.apache.commons.collections4.functors", "ConstantFactory", "public static <T> Factory<T> constantFactory(final T constantToReturn)" ], [ "chainedTransformer", "org.apache.commons.collections4.functors", "ChainedTransformer", "public static <T> Transformer<T, T> chainedTransformer(final Transformer<? super T, ? extends T>... transformers)" ], [ "chainedTransformer", "org.apache.commons.collections4.functors", "ChainedTransformer", "public static <T> Transformer<T, T> chainedTransformer(final Collection<? extends Transformer<? super T, ? extends T>> transformers)" ], [ "comparatorPredicate", "org.apache.commons.collections4.functors", "ComparatorPredicate", "public static <T> Predicate<T> comparatorPredicate(final T object, final Comparator<T> comparator)" ], [ "comparatorPredicate", "org.apache.commons.collections4.functors", "ComparatorPredicate", "public static <T> Predicate<T> comparatorPredicate(final T object, final Comparator<T> comparator, final Criterion criterion)" ], [ "allPredicate", "org.apache.commons.collections4.functors", "AllPredicate", "public static <T> Predicate<T> allPredicate(final Predicate<? super T>... predicates)" ], [ "allPredicate", "org.apache.commons.collections4.functors", "AllPredicate", "public static <T> Predicate<T> allPredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "nullIsFalsePredicate", "org.apache.commons.collections4.functors", "NullIsFalsePredicate", "public static <T> Predicate<T> nullIsFalsePredicate(final Predicate<? super T> predicate)" ], [ "nullIsExceptionPredicate", "org.apache.commons.collections4.functors", "NullIsExceptionPredicate", "public static <T> Predicate<T> nullIsExceptionPredicate(final Predicate<? super T> predicate)" ], [ "anyPredicate", "org.apache.commons.collections4.functors", "AnyPredicate", "public static <T> Predicate<T> anyPredicate(final Predicate<? super T>... predicates)" ], [ "anyPredicate", "org.apache.commons.collections4.functors", "AnyPredicate", "public static <T> Predicate<T> anyPredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "truePredicate", "org.apache.commons.collections4.functors", "TruePredicate", "public static <T> Predicate<T> truePredicate()" ], [ "factoryTransformer", "org.apache.commons.collections4.functors", "FactoryTransformer", "public static <I, O> Transformer<I, O> factoryTransformer(final Factory<? extends O> factory)" ], [ "notNullPredicate", "org.apache.commons.collections4.functors", "NotNullPredicate", "public static <T> Predicate<T> notNullPredicate()" ], [ "switchClosure", "org.apache.commons.collections4.functors", "SwitchClosure", "public static <E> Closure<E> switchClosure(final Predicate<? super E>[] predicates, final Closure<? super E>[] closures, final Closure<? super E> defaultClosure)" ], [ "switchClosure", "org.apache.commons.collections4.functors", "SwitchClosure", "public static <E> Closure<E> switchClosure(final Map<Predicate<E>, Closure<E>> predicatesAndClosures)" ], [ "uniquePredicate", "org.apache.commons.collections4.functors", "UniquePredicate", "public static <T> Predicate<T> uniquePredicate()" ], [ "instantiateTransformer", "org.apache.commons.collections4.functors", "InstantiateTransformer", "public static <T> Transformer<Class<? extends T>, T> instantiateTransformer()" ], [ "instantiateTransformer", "org.apache.commons.collections4.functors", "InstantiateTransformer", "public static <T> Transformer<Class<? extends T>, T> instantiateTransformer(final Class<?>[] paramTypes, final Object[] args)" ], [ "onePredicate", "org.apache.commons.collections4.functors", "OnePredicate", "public static <T> Predicate<T> onePredicate(final Predicate<? super T>... predicates)" ], [ "onePredicate", "org.apache.commons.collections4.functors", "OnePredicate", "public static <T> Predicate<T> onePredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "equalPredicate", "org.apache.commons.collections4.functors", "EqualPredicate", "public static <T> Predicate<T> equalPredicate(final T object)" ], [ "equalPredicate", "org.apache.commons.collections4.functors", "EqualPredicate", "public static <T> Predicate<T> equalPredicate(final T object, final Equator<T> equator)" ], [ "instantiateFactory", "org.apache.commons.collections4.functors", "InstantiateFactory", "public static <T> Factory<T> instantiateFactory(final Class<T> classToInstantiate, final Class<?>[] paramTypes, final Object[] args)" ], [ "ifClosure", "org.apache.commons.collections4.functors", "IfClosure", "public static <E> Closure<E> ifClosure(final Predicate<? super E> predicate, final Closure<? super E> trueClosure)" ], [ "ifClosure", "org.apache.commons.collections4.functors", "IfClosure", "public static <E> Closure<E> ifClosure(final Predicate<? super E> predicate, final Closure<? super E> trueClosure, final Closure<? super E> falseClosure)" ], [ "getTrueFirstComparator", "org.apache.commons.collections4.comparators", "BooleanComparator", "public static BooleanComparator getTrueFirstComparator()" ], [ "getFalseFirstComparator", "org.apache.commons.collections4.comparators", "BooleanComparator", "public static BooleanComparator getFalseFirstComparator()" ], [ "booleanComparator", "org.apache.commons.collections4.comparators", "BooleanComparator", "public static BooleanComparator booleanComparator(final boolean trueFirst)" ], [ "comparableComparator", "org.apache.commons.collections4.comparators", "ComparableComparator", "public static <E extends Comparable<? super E>> ComparableComparator<E> comparableComparator()" ], [ "emptyCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <T> Collection<T> emptyCollection()" ], [ "emptyIfNull", "org.apache.commons.collections4", "CollectionUtils", "public static <T> Collection<T> emptyIfNull(final Collection<T> collection)" ], [ "union", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> union(final Iterable<? extends O> a, final Iterable<? extends O> b)" ], [ "intersection", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> intersection(final Iterable<? extends O> a, final Iterable<? extends O> b)" ], [ "disjunction", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> disjunction(final Iterable<? extends O> a, final Iterable<? extends O> b)" ], [ "subtract", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> subtract(final Iterable<? extends O> a, final Iterable<? extends O> b)" ], [ "subtract", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> subtract(final Iterable<? extends O> a, final Iterable<? extends O> b, final Predicate<O> p)" ], [ "containsAll", "org.apache.commons.collections4", "CollectionUtils", "public static boolean containsAll(final Collection<?> coll1, final Collection<?> coll2)" ], [ "containsAny", "org.apache.commons.collections4", "CollectionUtils", "public static boolean containsAny(final Collection<?> coll1, final Collection<?> coll2)" ], [ "getCardinalityMap", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Map<O, Integer> getCardinalityMap(final Iterable<? extends O> coll)" ], [ "isSubCollection", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isSubCollection(final Collection<?> a, final Collection<?> b)" ], [ "isProperSubCollection", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isProperSubCollection(final Collection<?> a, final Collection<?> b)" ], [ "isEqualCollection", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isEqualCollection(final Collection<?> a, final Collection<?> b)" ], [ "isEqualCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <E> boolean isEqualCollection(final Collection<? extends E> a, final Collection<? extends E> b, final Equator<? super E> equator)" ], [ "cardinality", "org.apache.commons.collections4", "CollectionUtils", "public static <O> int cardinality(final O obj, final Iterable<? super O> coll)" ], [ "find", "org.apache.commons.collections4", "CollectionUtils", "public static <T> T find(final Iterable<T> collection, final Predicate<? super T> predicate)" ], [ "forAllDo", "org.apache.commons.collections4", "CollectionUtils", "public static <T, C extends Closure<? super T>> C forAllDo(final Iterable<T> collection, final C closure)" ], [ "forAllDo", "org.apache.commons.collections4", "CollectionUtils", "public static <T, C extends Closure<? super T>> C forAllDo(final Iterator<T> iterator, final C closure)" ], [ "forAllButLastDo", "org.apache.commons.collections4", "CollectionUtils", "public static <T, C extends Closure<? super T>> T forAllButLastDo(final Iterable<T> collection, final C closure)" ], [ "forAllButLastDo", "org.apache.commons.collections4", "CollectionUtils", "public static <T, C extends Closure<? super T>> T forAllButLastDo(final Iterator<T> iterator, final C closure)" ], [ "filter", "org.apache.commons.collections4", "CollectionUtils", "public static <T> boolean filter(final Iterable<T> collection, final Predicate<? super T> predicate)" ], [ "filterInverse", "org.apache.commons.collections4", "CollectionUtils", "public static <T> boolean filterInverse(final Iterable<T> collection, final Predicate<? super T> predicate)" ], [ "countMatches", "org.apache.commons.collections4", "CollectionUtils", "public static <C> int countMatches(final Iterable<C> input, final Predicate<? super C> predicate)" ], [ "exists", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean exists(final Iterable<C> input, final Predicate<? super C> predicate)" ], [ "matchesAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean matchesAll(final Iterable<C> input, final Predicate<? super C> predicate)" ], [ "select", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> select(final Iterable<? extends O> inputCollection, final Predicate<? super O> predicate)" ], [ "select", "org.apache.commons.collections4", "CollectionUtils", "public static <O, R extends Collection<? super O>> R select(final Iterable<? extends O> inputCollection, final Predicate<? super O> predicate, final R outputCollection)" ], [ "select", "org.apache.commons.collections4", "CollectionUtils", "public static <O, R extends Collection<? super O>> R select(final Iterable<? extends O> inputCollection, final Predicate<? super O> predicate, R outputCollection, R rejectedCollection)" ], [ "selectRejected", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> selectRejected(final Iterable<? extends O> inputCollection, final Predicate<? super O> predicate)" ], [ "selectRejected", "org.apache.commons.collections4", "CollectionUtils", "public static <O, R extends Collection<? super O>> R selectRejected(final Iterable<? extends O> inputCollection, final Predicate<? super O> predicate, final R outputCollection)" ], [ "collect", "org.apache.commons.collections4", "CollectionUtils", "public static <I, O> Collection<O> collect(final Iterable<I> inputCollection, final Transformer<? super I, ? extends O> transformer)" ], [ "collect", "org.apache.commons.collections4", "CollectionUtils", "public static <I, O> Collection<O> collect(final Iterator<I> inputIterator, final Transformer<? super I, ? extends O> transformer)" ], [ "collect", "org.apache.commons.collections4", "CollectionUtils", "public static <I, O, R extends Collection<? super O>> R collect(final Iterable<? extends I> inputCollection, final Transformer<? super I, ? extends O> transformer, final R outputCollection)" ], [ "collect", "org.apache.commons.collections4", "CollectionUtils", "public static <I, O, R extends Collection<? super O>> R collect(final Iterator<? extends I> inputIterator, final Transformer<? super I, ? extends O> transformer, final R outputCollection)" ], [ "addIgnoreNull", "org.apache.commons.collections4", "CollectionUtils", "public static <T> boolean addIgnoreNull(final Collection<T> collection, final T object)" ], [ "addAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean addAll(final Collection<C> collection, final Iterable<? extends C> iterable)" ], [ "addAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean addAll(final Collection<C> collection, final Iterator<? extends C> iterator)" ], [ "addAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean addAll(final Collection<C> collection, final Enumeration<? extends C> enumeration)" ], [ "addAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean addAll(final Collection<C> collection, final C[] elements)" ], [ "get", "org.apache.commons.collections4", "CollectionUtils", "public static <T> T get(final Iterator<T> iterator, final int index)" ], [ "get", "org.apache.commons.collections4", "CollectionUtils", "public static <T> T get(final Iterable<T> iterable, final int index)" ], [ "get", "org.apache.commons.collections4", "CollectionUtils", "public static Object get(final Object object, final int index)" ], [ "get", "org.apache.commons.collections4", "CollectionUtils", "public static <K, V> Map.Entry<K, V> get(final Map<K, V> map, final int index)" ], [ "size", "org.apache.commons.collections4", "CollectionUtils", "public static int size(final Object object)" ], [ "sizeIsEmpty", "org.apache.commons.collections4", "CollectionUtils", "public static boolean sizeIsEmpty(final Object object)" ], [ "isEmpty", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isEmpty(final Collection<?> coll)" ], [ "isNotEmpty", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isNotEmpty(final Collection<?> coll)" ], [ "isFull", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isFull(final Collection<? extends Object> coll)" ], [ "maxSize", "org.apache.commons.collections4", "CollectionUtils", "public static int maxSize(final Collection<? extends Object> coll)" ], [ "collate", "org.apache.commons.collections4", "CollectionUtils", "public static <O extends Comparable<? super O>> List<O> collate(Iterable<? extends O> a, Iterable<? extends O> b)" ], [ "collate", "org.apache.commons.collections4", "CollectionUtils", "public static <O extends Comparable<? super O>> List<O> collate(final Iterable<? extends O> a, final Iterable<? extends O> b, final boolean includeDuplicates)" ], [ "collate", "org.apache.commons.collections4", "CollectionUtils", "public static <O> List<O> collate(final Iterable<? extends O> a, final Iterable<? extends O> b, final Comparator<? super O> c)" ], [ "collate", "org.apache.commons.collections4", "CollectionUtils", "public static <O> List<O> collate(final Iterable<? extends O> a, final Iterable<? extends O> b, final Comparator<? super O> c, final boolean includeDuplicates)" ], [ "permutations", "org.apache.commons.collections4", "CollectionUtils", "public static <E> Collection<List<E>> permutations(final Collection<E> collection)" ], [ "retainAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> Collection<C> retainAll(final Collection<C> collection, final Collection<?> retain)" ], [ "retainAll", "org.apache.commons.collections4", "CollectionUtils", "public static <E> Collection<E> retainAll(final Iterable<E> collection, final Iterable<? extends E> retain, final Equator<? super E> equator)" ], [ "removeAll", "org.apache.commons.collections4", "CollectionUtils", "public static <E> Collection<E> removeAll(final Collection<E> collection, final Collection<?> remove)" ], [ "removeAll", "org.apache.commons.collections4", "CollectionUtils", "public static <E> Collection<E> removeAll(final Iterable<E> collection, final Iterable<? extends E> remove, final Equator<? super E> equator)" ], [ "synchronizedCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <C> Collection<C> synchronizedCollection(final Collection<C> collection)" ], [ "unmodifiableCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <C> Collection<C> unmodifiableCollection(final Collection<? extends C> collection)" ], [ "predicatedCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <C> Collection<C> predicatedCollection(final Collection<C> collection, final Predicate<? super C> predicate)" ], [ "transformingCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <E> Collection<E> transformingCollection(final Collection<E> collection, final Transformer<? super E, ? extends E> transformer)" ], [ "extractSingleton", "org.apache.commons.collections4", "CollectionUtils", "public static <E> E extractSingleton(final Collection<E> collection)" ], [ "transformingMap", "org.apache.commons.collections4.splitmap", "TransformedSplitMap", "public static <J, K, U, V> TransformedSplitMap<J, K, U, V> transformingMap(final Map<K, V> map, final Transformer<? super J, ? extends K> keyTransformer, final Transformer<? super U, ? extends V> valueTransformer)" ], [ "emptyIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> emptyIterable()" ], [ "chainedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> chainedIterable(final Iterable<? extends E> a, final Iterable<? extends E> b)" ], [ "chainedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> chainedIterable(final Iterable<? extends E> a, final Iterable<? extends E> b, final Iterable<? extends E> c)" ], [ "chainedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> chainedIterable(final Iterable<? extends E> a, final Iterable<? extends E> b, final Iterable<? extends E> c, final Iterable<? extends E> d)" ], [ "chainedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> chainedIterable(final Iterable<? extends E>... iterables)" ], [ "collatedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> collatedIterable(final Iterable<? extends E> a, final Iterable<? extends E> b)" ], [ "collatedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> collatedIterable(final Comparator<? super E> comparator, final Iterable<? extends E> a, final Iterable<? extends E> b)" ], [ "filteredIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> filteredIterable(final Iterable<E> iterable, final Predicate<? super E> predicate)" ], [ "boundedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> boundedIterable(final Iterable<E> iterable, final long maxSize)" ], [ "loopingIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> loopingIterable(final Iterable<E> iterable)" ], [ "reversedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> reversedIterable(final Iterable<E> iterable)" ], [ "skippingIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> skippingIterable(final Iterable<E> iterable, final long elementsToSkip)" ], [ "transformedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <I, O> Iterable<O> transformedIterable(final Iterable<I> iterable, final Transformer<? super I, ? extends O> transformer)" ], [ "uniqueIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> uniqueIterable(final Iterable<E> iterable)" ], [ "unmodifiableIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> unmodifiableIterable(final Iterable<E> iterable)" ], [ "zippingIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> zippingIterable(final Iterable<? extends E> a, final Iterable<? extends E> b)" ], [ "zippingIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> zippingIterable(final Iterable<? extends E> first, final Iterable<? extends E>... others)" ], [ "emptyIfNull", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> emptyIfNull(final Iterable<E> iterable)" ], [ "forEachButLast", "org.apache.commons.collections4", "IterableUtils", "public static <E> E forEachButLast(final Iterable<E> iterable, final Closure<? super E> closure)" ], [ "find", "org.apache.commons.collections4", "IterableUtils", "public static <E> E find(final Iterable<E> iterable, final Predicate<? super E> predicate)" ], [ "indexOf", "org.apache.commons.collections4", "IterableUtils", "public static <E> int indexOf(final Iterable<E> iterable, final Predicate<? super E> predicate)" ], [ "matchesAll", "org.apache.commons.collections4", "IterableUtils", "public static <E> boolean matchesAll(final Iterable<E> iterable, final Predicate<? super E> predicate)" ], [ "matchesAny", "org.apache.commons.collections4", "IterableUtils", "public static <E> boolean matchesAny(final Iterable<E> iterable, final Predicate<? super E> predicate)" ], [ "countMatches", "org.apache.commons.collections4", "IterableUtils", "public static <E> long countMatches(final Iterable<E> input, final Predicate<? super E> predicate)" ], [ "isEmpty", "org.apache.commons.collections4", "IterableUtils", "public static boolean isEmpty(final Iterable<?> iterable)" ], [ "contains", "org.apache.commons.collections4", "IterableUtils", "public static <E> boolean contains(final Iterable<E> iterable, final Object object)" ], [ "contains", "org.apache.commons.collections4", "IterableUtils", "public static <E> boolean contains(final Iterable<? extends E> iterable, final E object, final Equator<? super E> equator)" ], [ "frequency", "org.apache.commons.collections4", "IterableUtils", "public static <E, T extends E> int frequency(final Iterable<E> iterable, final T obj)" ], [ "get", "org.apache.commons.collections4", "IterableUtils", "public static <T> T get(final Iterable<T> iterable, final int index)" ], [ "size", "org.apache.commons.collections4", "IterableUtils", "public static int size(final Iterable<?> iterable)" ], [ "partition", "org.apache.commons.collections4", "IterableUtils", "public static <O> List<List<O>> partition(final Iterable<? extends O> iterable, final Predicate<? super O> predicate)" ], [ "partition", "org.apache.commons.collections4", "IterableUtils", "public static <O> List<List<O>> partition(final Iterable<? extends O> iterable, final Predicate<? super O>... predicates)" ], [ "partition", "org.apache.commons.collections4", "IterableUtils", "public static <O, R extends Collection<O>> List<R> partition(final Iterable<? extends O> iterable, final Factory<R> partitionFactory, final Predicate<? super O>... predicates)" ], [ "toList", "org.apache.commons.collections4", "IterableUtils", "public static <E> List<E> toList(final Iterable<E> iterable)" ], [ "toString", "org.apache.commons.collections4", "IterableUtils", "public static <E> String toString(final Iterable<E> iterable)" ], [ "toString", "org.apache.commons.collections4", "IterableUtils", "public static <E> String toString(final Iterable<E> iterable, final Transformer<? super E, String> transformer)" ], [ "toString", "org.apache.commons.collections4", "IterableUtils", "public static <E> String toString(final Iterable<E> iterable, final Transformer<? super E, String> transformer, final String delimiter, final String prefix, final String suffix)" ], [ "unmodifiableTrie", "org.apache.commons.collections4", "TrieUtils", "public static <K, V> Trie<K, V> unmodifiableTrie(final Trie<K, ? extends V> trie)" ], [ "exceptionClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> exceptionClosure()" ], [ "nopClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> nopClosure()" ], [ "asClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> asClosure(final Transformer<? super E, ?> transformer)" ], [ "forClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> forClosure(final int count, final Closure<? super E> closure)" ], [ "whileClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> whileClosure(final Predicate<? super E> predicate, final Closure<? super E> closure)" ], [ "doWhileClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> doWhileClosure(final Closure<? super E> closure, final Predicate<? super E> predicate)" ], [ "invokerClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> invokerClosure(final String methodName)" ], [ "invokerClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> invokerClosure(final String methodName, final Class<?>[] paramTypes, final Object[] args)" ], [ "chainedClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> chainedClosure(final Closure<? super E>... closures)" ], [ "chainedClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> chainedClosure(final Collection<? extends Closure<? super E>> closures)" ], [ "ifClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> ifClosure(final Predicate<? super E> predicate, final Closure<? super E> trueClosure)" ], [ "ifClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> ifClosure(final Predicate<? super E> predicate, final Closure<? super E> trueClosure, final Closure<? super E> falseClosure)" ], [ "switchClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> switchClosure(final Predicate<? super E>[] predicates, final Closure<? super E>[] closures)" ], [ "switchClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> switchClosure(final Predicate<? super E>[] predicates, final Closure<? super E>[] closures, final Closure<? super E> defaultClosure)" ], [ "switchClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> switchClosure(final Map<Predicate<E>, Closure<E>> predicatesAndClosures)" ], [ "switchMapClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> switchMapClosure(final Map<? extends E, Closure<E>> objectsAndClosures)" ], [ "unmodifiableTrie", "org.apache.commons.collections4.trie", "UnmodifiableTrie", "public static <K, V> Trie<K, V> unmodifiableTrie(final Trie<K, ? extends V> trie)" ], [ "isOutOfBoundsIndex", "org.apache.commons.collections4.trie", "KeyAnalyzer", "static boolean isOutOfBoundsIndex(final int bitIndex)" ], [ "isEqualBitKey", "org.apache.commons.collections4.trie", "KeyAnalyzer", "static boolean isEqualBitKey(final int bitIndex)" ], [ "isNullBitKey", "org.apache.commons.collections4.trie", "KeyAnalyzer", "static boolean isNullBitKey(final int bitIndex)" ], [ "isValidBitIndex", "org.apache.commons.collections4.trie", "KeyAnalyzer", "static boolean isValidBitIndex(final int bitIndex)" ], [ "isValidUplink", "org.apache.commons.collections4.trie", "AbstractPatriciaTrie", "static boolean isValidUplink(final TrieEntry<?, ?> next, final TrieEntry<?, ?> from)" ], [ "compare", "org.apache.commons.collections4.trie", "AbstractBitwiseTrie", "static boolean compare(final Object a, final Object b)" ], [ "transformingSortedMap", "org.apache.commons.collections4.map", "TransformedSortedMap", "public static <K, V> TransformedSortedMap<K, V> transformingSortedMap(final SortedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "transformedSortedMap", "org.apache.commons.collections4.map", "TransformedSortedMap", "public static <K, V> TransformedSortedMap<K, V> transformedSortedMap(final SortedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "predicatedMap", "org.apache.commons.collections4.map", "PredicatedMap", "public static <K, V> PredicatedMap<K, V> predicatedMap(final Map<K, V> map, final Predicate<? super K> keyPredicate, final Predicate<? super V> valuePredicate)" ], [ "fixedSizeSortedMap", "org.apache.commons.collections4.map", "FixedSizeSortedMap", "public static <K, V> FixedSizeSortedMap<K, V> fixedSizeSortedMap(final SortedMap<K, V> map)" ], [ "unmodifiableSortedMap", "org.apache.commons.collections4.map", "UnmodifiableSortedMap", "public static <K, V> SortedMap<K, V> unmodifiableSortedMap(final SortedMap<K, ? extends V> map)" ], [ "predicatedSortedMap", "org.apache.commons.collections4.map", "PredicatedSortedMap", "public static <K, V> PredicatedSortedMap<K, V> predicatedSortedMap(final SortedMap<K, V> map, final Predicate<? super K> keyPredicate, final Predicate<? super V> valuePredicate)" ], [ "defaultedMap", "org.apache.commons.collections4.map", "DefaultedMap", "public static <K, V> DefaultedMap<K, V> defaultedMap(final Map<K, V> map, final V defaultValue)" ], [ "defaultedMap", "org.apache.commons.collections4.map", "DefaultedMap", "public static <K, V> DefaultedMap<K, V> defaultedMap(final Map<K, V> map, final Factory<? extends V> factory)" ], [ "defaultedMap", "org.apache.commons.collections4.map", "DefaultedMap", "public static <K, V> Map<K, V> defaultedMap(final Map<K, V> map, final Transformer<? super K, ? extends V> transformer)" ], [ "fixedSizeMap", "org.apache.commons.collections4.map", "FixedSizeMap", "public static <K, V> FixedSizeMap<K, V> fixedSizeMap(final Map<K, V> map)" ], [ "lazySortedMap", "org.apache.commons.collections4.map", "LazySortedMap", "public static <K, V> LazySortedMap<K, V> lazySortedMap(final SortedMap<K, V> map, final Factory<? extends V> factory)" ], [ "lazySortedMap", "org.apache.commons.collections4.map", "LazySortedMap", "public static <K, V> LazySortedMap<K, V> lazySortedMap(final SortedMap<K, V> map, final Transformer<? super K, ? extends V> factory)" ], [ "unmodifiableOrderedMap", "org.apache.commons.collections4.map", "UnmodifiableOrderedMap", "public static <K, V> OrderedMap<K, V> unmodifiableOrderedMap(final OrderedMap<? extends K, ? extends V> map)" ], [ "unmodifiableMap", "org.apache.commons.collections4.map", "UnmodifiableMap", "public static <K, V> Map<K, V> unmodifiableMap(final Map<? extends K, ? extends V> map)" ], [ "listOrderedMap", "org.apache.commons.collections4.map", "ListOrderedMap", "public static <K, V> ListOrderedMap<K, V> listOrderedMap(final Map<K, V> map)" ], [ "unmodifiableEntrySet", "org.apache.commons.collections4.map", "UnmodifiableEntrySet", "public static <K, V> Set<Map.Entry<K, V>> unmodifiableEntrySet(final Set<Map.Entry<K, V>> set)" ], [ "resolve", "org.apache.commons.collections4.map", "AbstractReferenceMap", "public static ReferenceStrength resolve(final int value)" ], [ "resolve", "org.apache.commons.collections4.map", "ReferenceStrength", "public static ReferenceStrength resolve(final int value)" ], [ "multiKeyMap", "org.apache.commons.collections4.map", "MultiKeyMap", "public static <K, V> MultiKeyMap<K, V> multiKeyMap(final AbstractHashedMap<MultiKey<? extends K>, V> map)" ], [ "lazyMap", "org.apache.commons.collections4.map", "LazyMap", "public static <K, V> LazyMap<K, V> lazyMap(final Map<K, V> map, final Factory<? extends V> factory)" ], [ "lazyMap", "org.apache.commons.collections4.map", "LazyMap", "public static <V, K> LazyMap<K, V> lazyMap(final Map<K, V> map, final Transformer<? super K, ? extends V> factory)" ], [ "multiValueMap", "org.apache.commons.collections4.map", "MultiValueMap", "public static <K, V> MultiValueMap<K, V> multiValueMap(final Map<K, ? super Collection<V>> map)" ], [ "multiValueMap", "org.apache.commons.collections4.map", "MultiValueMap", "public static <K, V, C extends Collection<V>> MultiValueMap<K, V> multiValueMap(final Map<K, ? super C> map, final Class<C> collectionClass)" ], [ "multiValueMap", "org.apache.commons.collections4.map", "MultiValueMap", "public static <K, V, C extends Collection<V>> MultiValueMap<K, V> multiValueMap(final Map<K, ? super C> map, final Factory<C> collectionFactory)" ], [ "transformingMap", "org.apache.commons.collections4.map", "TransformedMap", "public static <K, V> TransformedMap<K, V> transformingMap(final Map<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "transformedMap", "org.apache.commons.collections4.map", "TransformedMap", "public static <K, V> TransformedMap<K, V> transformedMap(final Map<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "synchronizedMultiSet", "org.apache.commons.collections4", "MultiSetUtils", "public static <E> MultiSet<E> synchronizedMultiSet(final MultiSet<E> multiset)" ], [ "unmodifiableMultiSet", "org.apache.commons.collections4", "MultiSetUtils", "public static <E> MultiSet<E> unmodifiableMultiSet(final MultiSet<? extends E> multiset)" ], [ "predicatedMultiSet", "org.apache.commons.collections4", "MultiSetUtils", "public static <E> MultiSet<E> predicatedMultiSet(final MultiSet<E> multiset, final Predicate<? super E> predicate)" ], [ "emptyMultiSet", "org.apache.commons.collections4", "MultiSetUtils", "public static <E> MultiSet<E> emptyMultiSet()" ], [ "unmodifiableMultiValuedMap", "org.apache.commons.collections4.multimap", "UnmodifiableMultiValuedMap", "public static <K, V> UnmodifiableMultiValuedMap<K, V> unmodifiableMultiValuedMap(MultiValuedMap<? extends K, ? extends V> map)" ], [ "transformingMap", "org.apache.commons.collections4.multimap", "TransformedMultiValuedMap", "public static <K, V> TransformedMultiValuedMap<K, V> transformingMap(final MultiValuedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "transformedMap", "org.apache.commons.collections4.multimap", "TransformedMultiValuedMap", "public static <K, V> TransformedMultiValuedMap<K, V> transformedMap(final MultiValuedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "lazyList", "org.apache.commons.collections4.list", "LazyList", "public static <E> LazyList<E> lazyList(final List<E> list, final Factory<? extends E> factory)" ], [ "setUniqueList", "org.apache.commons.collections4.list", "SetUniqueList", "public static <E> SetUniqueList<E> setUniqueList(final List<E> list)" ], [ "unmodifiableList", "org.apache.commons.collections4.list", "UnmodifiableList", "public static <E> List<E> unmodifiableList(final List<? extends E> list)" ], [ "fixedSizeList", "org.apache.commons.collections4.list", "FixedSizeList", "public static <E> FixedSizeList<E> fixedSizeList(final List<E> list)" ], [ "transformingList", "org.apache.commons.collections4.list", "TransformedList", "public static <E> TransformedList<E> transformingList(final List<E> list, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedList", "org.apache.commons.collections4.list", "TransformedList", "public static <E> TransformedList<E> transformedList(final List<E> list, final Transformer<? super E, ? extends E> transformer)" ], [ "growthList", "org.apache.commons.collections4.list", "GrowthList", "public static <E> GrowthList<E> growthList(final List<E> list)" ], [ "predicatedList", "org.apache.commons.collections4.list", "PredicatedList", "public static <T> PredicatedList<T> predicatedList(final List<T> list, final Predicate<? super T> predicate)" ], [ "transformingQueue", "org.apache.commons.collections4.queue", "TransformedQueue", "public static <E> TransformedQueue<E> transformingQueue(final Queue<E> queue, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedQueue", "org.apache.commons.collections4.queue", "TransformedQueue", "public static <E> TransformedQueue<E> transformedQueue(final Queue<E> queue, final Transformer<? super E, ? extends E> transformer)" ], [ "unmodifiableQueue", "org.apache.commons.collections4.queue", "UnmodifiableQueue", "public static <E> Queue<E> unmodifiableQueue(final Queue<? extends E> queue)" ], [ "predicatedQueue", "org.apache.commons.collections4.queue", "PredicatedQueue", "public static <E> PredicatedQueue<E> predicatedQueue(final Queue<E> Queue, final Predicate<? super E> predicate)" ], [ "empty", "org.apache.commons.collections4", "FluentIterable", "public static <T> FluentIterable<T> empty()" ], [ "of", "org.apache.commons.collections4", "FluentIterable", "public static <T> FluentIterable<T> of(final T singleton)" ], [ "of", "org.apache.commons.collections4", "FluentIterable", "public static <T> FluentIterable<T> of(final T... elements)" ], [ "of", "org.apache.commons.collections4", "FluentIterable", "public static <T> FluentIterable<T> of(final Iterable<T> iterable)" ], [ "exceptionTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> exceptionTransformer()" ], [ "nullTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> nullTransformer()" ], [ "nopTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> nopTransformer()" ], [ "cloneTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> cloneTransformer()" ], [ "constantTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> constantTransformer(final O constantToReturn)" ], [ "asTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> asTransformer(final Closure<? super T> closure)" ], [ "asTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, Boolean> asTransformer(final Predicate<? super T> predicate)" ], [ "asTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> asTransformer(final Factory<? extends O> factory)" ], [ "chainedTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> chainedTransformer(final Transformer<? super T, ? extends T>... transformers)" ], [ "chainedTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> chainedTransformer(final Collection<? extends Transformer<? super T, ? extends T>> transformers)" ], [ "ifTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> ifTransformer(final Predicate<? super T> predicate, final Transformer<? super T, ? extends T> trueTransformer)" ], [ "ifTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> ifTransformer(final Predicate<? super I> predicate, final Transformer<? super I, ? extends O> trueTransformer, final Transformer<? super I, ? extends O> falseTransformer)" ], [ "switchTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> switchTransformer(final Predicate<? super I> predicate, final Transformer<? super I, ? extends O> trueTransformer, final Transformer<? super I, ? extends O> falseTransformer)" ], [ "switchTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> switchTransformer(final Predicate<? super I>[] predicates, final Transformer<? super I, ? extends O>[] transformers)" ], [ "switchTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> switchTransformer(final Predicate<? super I>[] predicates, final Transformer<? super I, ? extends O>[] transformers, final Transformer<? super I, ? extends O> defaultTransformer)" ], [ "switchTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> switchTransformer(final Map<Predicate<I>, Transformer<I, O>> predicatesAndTransformers)" ], [ "switchMapTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> switchMapTransformer(final Map<I, Transformer<I, O>> objectsAndTransformers)" ], [ "instantiateTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<Class<? extends T>, T> instantiateTransformer()" ], [ "instantiateTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<Class<? extends T>, T> instantiateTransformer(final Class<?>[] paramTypes, final Object[] args)" ], [ "mapTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> mapTransformer(final Map<? super I, ? extends O> map)" ], [ "invokerTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> invokerTransformer(final String methodName)" ], [ "invokerTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> invokerTransformer(final String methodName, final Class<?>[] paramTypes, final Object[] args)" ], [ "stringValueTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, String> stringValueTransformer()" ], [ "exceptionPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> exceptionPredicate()" ], [ "truePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> truePredicate()" ], [ "falsePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> falsePredicate()" ], [ "nullPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nullPredicate()" ], [ "notNullPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> notNullPredicate()" ], [ "equalPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> equalPredicate(final T value)" ], [ "identityPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> identityPredicate(final T value)" ], [ "instanceofPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static Predicate<Object> instanceofPredicate(final Class<?> type)" ], [ "uniquePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> uniquePredicate()" ], [ "invokerPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> invokerPredicate(final String methodName)" ], [ "invokerPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> invokerPredicate(final String methodName, final Class<?>[] paramTypes, final Object[] args)" ], [ "andPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> andPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "allPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> allPredicate(final Predicate<? super T>... predicates)" ], [ "allPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> allPredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "orPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> orPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "anyPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> anyPredicate(final Predicate<? super T>... predicates)" ], [ "anyPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> anyPredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "eitherPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> eitherPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "onePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> onePredicate(final Predicate<? super T>... predicates)" ], [ "onePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> onePredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "neitherPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> neitherPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "nonePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nonePredicate(final Predicate<? super T>... predicates)" ], [ "nonePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nonePredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "notPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> notPredicate(final Predicate<? super T> predicate)" ], [ "asPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> asPredicate(final Transformer<? super T, Boolean> transformer)" ], [ "nullIsExceptionPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nullIsExceptionPredicate(final Predicate<? super T> predicate)" ], [ "nullIsFalsePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nullIsFalsePredicate(final Predicate<? super T> predicate)" ], [ "nullIsTruePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nullIsTruePredicate(final Predicate<? super T> predicate)" ], [ "transformedPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> transformedPredicate(final Transformer<? super T, ? extends T> transformer, final Predicate<? super T> predicate)" ], [ "emptySet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> emptySet()" ], [ "emptySortedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> emptySortedSet()" ], [ "emptyIfNull", "org.apache.commons.collections4", "SetUtils", "public static <T> Set<T> emptyIfNull(final Set<T> set)" ], [ "isEqualSet", "org.apache.commons.collections4", "SetUtils", "public static boolean isEqualSet(final Collection<?> set1, final Collection<?> set2)" ], [ "hashCodeForSet", "org.apache.commons.collections4", "SetUtils", "public static <T> int hashCodeForSet(final Collection<T> set)" ], [ "newIdentityHashSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> newIdentityHashSet()" ], [ "synchronizedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> synchronizedSet(final Set<E> set)" ], [ "unmodifiableSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> unmodifiableSet(final Set<? extends E> set)" ], [ "predicatedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> predicatedSet(final Set<E> set, final Predicate<? super E> predicate)" ], [ "transformedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> transformedSet(final Set<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "orderedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> orderedSet(final Set<E> set)" ], [ "synchronizedSortedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> synchronizedSortedSet(final SortedSet<E> set)" ], [ "unmodifiableSortedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> unmodifiableSortedSet(final SortedSet<E> set)" ], [ "predicatedSortedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> predicatedSortedSet(final SortedSet<E> set, final Predicate<? super E> predicate)" ], [ "transformedSortedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> transformedSortedSet(final SortedSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "unmodifiableNavigableSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> unmodifiableNavigableSet(final NavigableSet<E> set)" ], [ "predicatedNavigableSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> predicatedNavigableSet(final NavigableSet<E> set, final Predicate<? super E> predicate)" ], [ "transformedNavigableSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> transformedNavigableSet(final NavigableSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "union", "org.apache.commons.collections4", "SetUtils", "public static <E> SetView<E> union(final Set<? extends E> a, final Set<? extends E> b)" ], [ "difference", "org.apache.commons.collections4", "SetUtils", "public static <E> SetView<E> difference(final Set<? extends E> a, final Set<? extends E> b)" ], [ "intersection", "org.apache.commons.collections4", "SetUtils", "public static <E> SetView<E> intersection(final Set<? extends E> a, final Set<? extends E> b)" ], [ "disjunction", "org.apache.commons.collections4", "SetUtils", "public static <E> SetView<E> disjunction(final Set<? extends E> a, final Set<? extends E> b)" ], [ "transformingSet", "org.apache.commons.collections4.set", "TransformedSet", "public static <E> TransformedSet<E> transformingSet(final Set<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedSet", "org.apache.commons.collections4.set", "TransformedSet", "public static <E> Set<E> transformedSet(final Set<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "transformingNavigableSet", "org.apache.commons.collections4.set", "TransformedNavigableSet", "public static <E> TransformedNavigableSet<E> transformingNavigableSet(final NavigableSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedNavigableSet", "org.apache.commons.collections4.set", "TransformedNavigableSet", "public static <E> TransformedNavigableSet<E> transformedNavigableSet(final NavigableSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "predicatedNavigableSet", "org.apache.commons.collections4.set", "PredicatedNavigableSet", "public static <E> PredicatedNavigableSet<E> predicatedNavigableSet(final NavigableSet<E> set, final Predicate<? super E> predicate)" ], [ "listOrderedSet", "org.apache.commons.collections4.set", "ListOrderedSet", "public static <E> ListOrderedSet<E> listOrderedSet(final Set<E> set, final List<E> list)" ], [ "listOrderedSet", "org.apache.commons.collections4.set", "ListOrderedSet", "public static <E> ListOrderedSet<E> listOrderedSet(final Set<E> set)" ], [ "listOrderedSet", "org.apache.commons.collections4.set", "ListOrderedSet", "public static <E> ListOrderedSet<E> listOrderedSet(final List<E> list)" ], [ "unmodifiableSet", "org.apache.commons.collections4.set", "UnmodifiableSet", "public static <E> Set<E> unmodifiableSet(final Set<? extends E> set)" ], [ "mapBackedSet", "org.apache.commons.collections4.set", "MapBackedSet", "public static <E, V> MapBackedSet<E, V> mapBackedSet(final Map<E, ? super V> map)" ], [ "mapBackedSet", "org.apache.commons.collections4.set", "MapBackedSet", "public static <E, V> MapBackedSet<E, V> mapBackedSet(final Map<E, ? super V> map, final V dummyValue)" ], [ "unmodifiableSortedSet", "org.apache.commons.collections4.set", "UnmodifiableSortedSet", "public static <E> SortedSet<E> unmodifiableSortedSet(final SortedSet<E> set)" ], [ "predicatedSortedSet", "org.apache.commons.collections4.set", "PredicatedSortedSet", "public static <E> PredicatedSortedSet<E> predicatedSortedSet(final SortedSet<E> set, final Predicate<? super E> predicate)" ], [ "predicatedSet", "org.apache.commons.collections4.set", "PredicatedSet", "public static <E> PredicatedSet<E> predicatedSet(final Set<E> set, final Predicate<? super E> predicate)" ], [ "unmodifiableNavigableSet", "org.apache.commons.collections4.set", "UnmodifiableNavigableSet", "public static <E> NavigableSet<E> unmodifiableNavigableSet(final NavigableSet<E> set)" ], [ "transformingSortedSet", "org.apache.commons.collections4.set", "TransformedSortedSet", "public static <E> TransformedSortedSet<E> transformingSortedSet(final SortedSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedSortedSet", "org.apache.commons.collections4.set", "TransformedSortedSet", "public static <E> TransformedSortedSet<E> transformedSortedSet(final SortedSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "get", "org.apache.commons.collections4", "EnumerationUtils", "public static <T> T get(final Enumeration<T> e, final int index)" ], [ "toList", "org.apache.commons.collections4", "EnumerationUtils", "public static <E> List<E> toList(final Enumeration<? extends E> enumeration)" ], [ "toList", "org.apache.commons.collections4", "EnumerationUtils", "public static List<String> toList(final StringTokenizer stringTokenizer)" ], [ "unmodifiableQueue", "org.apache.commons.collections4", "QueueUtils", "public static <E> Queue<E> unmodifiableQueue(final Queue<? extends E> queue)" ], [ "predicatedQueue", "org.apache.commons.collections4", "QueueUtils", "public static <E> Queue<E> predicatedQueue(final Queue<E> queue, final Predicate<? super E> predicate)" ], [ "transformingQueue", "org.apache.commons.collections4", "QueueUtils", "public static <E> Queue<E> transformingQueue(final Queue<E> queue, final Transformer<? super E, ? extends E> transformer)" ], [ "emptyQueue", "org.apache.commons.collections4", "QueueUtils", "public static <E> Queue<E> emptyQueue()" ], [ "synchronizedBag", "org.apache.commons.collections4.bag", "SynchronizedBag", "public static <E> SynchronizedBag<E> synchronizedBag(final Bag<E> bag)" ], [ "collectionBag", "org.apache.commons.collections4.bag", "CollectionBag", "public static <E> Bag<E> collectionBag(final Bag<E> bag)" ], [ "unmodifiableBag", "org.apache.commons.collections4.bag", "UnmodifiableBag", "public static <E> Bag<E> unmodifiableBag(final Bag<? extends E> bag)" ], [ "predicatedSortedBag", "org.apache.commons.collections4.bag", "PredicatedSortedBag", "public static <E> PredicatedSortedBag<E> predicatedSortedBag(final SortedBag<E> bag, final Predicate<? super E> predicate)" ], [ "unmodifiableSortedBag", "org.apache.commons.collections4.bag", "UnmodifiableSortedBag", "public static <E> SortedBag<E> unmodifiableSortedBag(final SortedBag<E> bag)" ], [ "transformingSortedBag", "org.apache.commons.collections4.bag", "TransformedSortedBag", "public static <E> TransformedSortedBag<E> transformingSortedBag(final SortedBag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedSortedBag", "org.apache.commons.collections4.bag", "TransformedSortedBag", "public static <E> TransformedSortedBag<E> transformedSortedBag(final SortedBag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "predicatedBag", "org.apache.commons.collections4.bag", "PredicatedBag", "public static <E> PredicatedBag<E> predicatedBag(final Bag<E> bag, final Predicate<? super E> predicate)" ], [ "synchronizedSortedBag", "org.apache.commons.collections4.bag", "SynchronizedSortedBag", "public static <E> SynchronizedSortedBag<E> synchronizedSortedBag(final SortedBag<E> bag)" ], [ "collectionSortedBag", "org.apache.commons.collections4.bag", "CollectionSortedBag", "public static <E> SortedBag<E> collectionSortedBag(final SortedBag<E> bag)" ], [ "transformingBag", "org.apache.commons.collections4.bag", "TransformedBag", "public static <E> Bag<E> transformingBag(final Bag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedBag", "org.apache.commons.collections4.bag", "TransformedBag", "public static <E> Bag<E> transformedBag(final Bag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "predicatedMultiSet", "org.apache.commons.collections4.multiset", "PredicatedMultiSet", "public static <E> PredicatedMultiSet<E> predicatedMultiSet(final MultiSet<E> multiset, final Predicate<? super E> predicate)" ], [ "unmodifiableMultiSet", "org.apache.commons.collections4.multiset", "UnmodifiableMultiSet", "public static <E> MultiSet<E> unmodifiableMultiSet(final MultiSet<? extends E> multiset)" ], [ "synchronizedMultiSet", "org.apache.commons.collections4.multiset", "SynchronizedMultiSet", "public static <E> SynchronizedMultiSet<E> synchronizedMultiSet(final MultiSet<E> multiset)" ], [ "synchronizedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> synchronizedBag(final Bag<E> bag)" ], [ "unmodifiableBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> unmodifiableBag(final Bag<? extends E> bag)" ], [ "predicatedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> predicatedBag(final Bag<E> bag, final Predicate<? super E> predicate)" ], [ "transformingBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> transformingBag(final Bag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "collectionBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> collectionBag(final Bag<E> bag)" ], [ "synchronizedSortedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> SortedBag<E> synchronizedSortedBag(final SortedBag<E> bag)" ], [ "unmodifiableSortedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> SortedBag<E> unmodifiableSortedBag(final SortedBag<E> bag)" ], [ "predicatedSortedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> SortedBag<E> predicatedSortedBag(final SortedBag<E> bag, final Predicate<? super E> predicate)" ], [ "transformingSortedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> SortedBag<E> transformingSortedBag(final SortedBag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "emptyBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> emptyBag()" ], [ "emptySortedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> SortedBag<E> emptySortedBag()" ], [ "resettableEmptyListIterator", "org.apache.commons.collections4.iterators", "EmptyListIterator", "public static <E> ResettableListIterator<E> resettableEmptyListIterator()" ], [ "emptyListIterator", "org.apache.commons.collections4.iterators", "EmptyListIterator", "public static <E> ListIterator<E> emptyListIterator()" ], [ "unmodifiableOrderedMapIterator", "org.apache.commons.collections4.iterators", "UnmodifiableOrderedMapIterator", "public static <K, V> OrderedMapIterator<K, V> unmodifiableOrderedMapIterator(final OrderedMapIterator<K, ? extends V> iterator)" ], [ "unmodifiableIterator", "org.apache.commons.collections4.iterators", "UnmodifiableIterator", "public static <E> Iterator<E> unmodifiableIterator(final Iterator<? extends E> iterator)" ], [ "peekingIterator", "org.apache.commons.collections4.iterators", "PeekingIterator", "public static <E> PeekingIterator<E> peekingIterator(final Iterator<? extends E> iterator)" ], [ "emptyMapIterator", "org.apache.commons.collections4.iterators", "EmptyMapIterator", "public static <K, V> MapIterator<K, V> emptyMapIterator()" ], [ "emptyOrderedIterator", "org.apache.commons.collections4.iterators", "EmptyOrderedIterator", "public static <E> OrderedIterator<E> emptyOrderedIterator()" ], [ "umodifiableListIterator", "org.apache.commons.collections4.iterators", "UnmodifiableListIterator", "public static <E> ListIterator<E> umodifiableListIterator(final ListIterator<? extends E> iterator)" ], [ "emptyOrderedMapIterator", "org.apache.commons.collections4.iterators", "EmptyOrderedMapIterator", "public static <K, V> OrderedMapIterator<K, V> emptyOrderedMapIterator()" ], [ "unmodifiableMapIterator", "org.apache.commons.collections4.iterators", "UnmodifiableMapIterator", "public static <K, V> MapIterator<K, V> unmodifiableMapIterator(final MapIterator<? extends K, ? extends V> iterator)" ], [ "resettableEmptyIterator", "org.apache.commons.collections4.iterators", "EmptyIterator", "public static <E> ResettableIterator<E> resettableEmptyIterator()" ], [ "emptyIterator", "org.apache.commons.collections4.iterators", "EmptyIterator", "public static <E> Iterator<E> emptyIterator()" ], [ "pushbackIterator", "org.apache.commons.collections4.iterators", "PushbackIterator", "public static <E> PushbackIterator<E> pushbackIterator(final Iterator<? extends E> iterator)" ], [ "readableMap", "org.apache.commons.collections4", "SplitMapUtils", "public static <K, V> IterableMap<K, V> readableMap(final Get<K, V> get)" ], [ "writableMap", "org.apache.commons.collections4", "SplitMapUtils", "public static <K, V> Map<K, V> writableMap(final Put<K, V> put)" ] ],
  "tokensProjectClassesNonPrivateStaticAttributes" : [ [ "EMPTY_ITERATOR", "org.apache.commons.collections4", "IteratorUtils", "public static final ResettableIterator EMPTY_ITERATOR = EmptyIterator.RESETTABLE_INSTANCE;" ], [ "EMPTY_LIST_ITERATOR", "org.apache.commons.collections4", "IteratorUtils", "public static final ResettableListIterator EMPTY_LIST_ITERATOR = EmptyListIterator.RESETTABLE_INSTANCE;" ], [ "EMPTY_ORDERED_ITERATOR", "org.apache.commons.collections4", "IteratorUtils", "public static final OrderedIterator EMPTY_ORDERED_ITERATOR = EmptyOrderedIterator.INSTANCE;" ], [ "EMPTY_MAP_ITERATOR", "org.apache.commons.collections4", "IteratorUtils", "public static final MapIterator EMPTY_MAP_ITERATOR = EmptyMapIterator.INSTANCE;" ], [ "EMPTY_ORDERED_MAP_ITERATOR", "org.apache.commons.collections4", "IteratorUtils", "public static final OrderedMapIterator EMPTY_ORDERED_MAP_ITERATOR = EmptyOrderedMapIterator.INSTANCE;" ], [ "NATURAL_COMPARATOR", "org.apache.commons.collections4", "ComparatorUtils", "public static final Comparator NATURAL_COMPARATOR = ComparableComparator.<Comparable>comparableComparator();" ], [ "EMPTY_MULTI_VALUED_MAP", "org.apache.commons.collections4", "MultiMapUtils", "public static final MultiValuedMap EMPTY_MULTI_VALUED_MAP = UnmodifiableMultiValuedMap.unmodifiableMultiValuedMap(new ArrayListValuedHashMap(0, 0));" ], [ "EMPTY_SORTED_MAP", "org.apache.commons.collections4", "MapUtils", "public static final SortedMap EMPTY_SORTED_MAP = UnmodifiableSortedMap.unmodifiableSortedMap(new TreeMap<Object, Object>());" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "DefaultEquator", "public static final DefaultEquator INSTANCE = new DefaultEquator<Object>();" ], [ "HASHCODE_NULL", "org.apache.commons.collections4.functors", "DefaultEquator", "public static final int HASHCODE_NULL = -1;" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "ExceptionClosure", "public static final Closure INSTANCE = new ExceptionClosure<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "NOPClosure", "public static final Closure INSTANCE = new NOPClosure<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "NullPredicate", "public static final Predicate INSTANCE = new NullPredicate<Object>();" ], [ "NULL_INSTANCE", "org.apache.commons.collections4.functors", "ConstantTransformer", "public static final Transformer NULL_INSTANCE = new ConstantTransformer<Object, Object>(null);" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "ExceptionTransformer", "public static final Transformer INSTANCE = new ExceptionTransformer<Object, Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "NOPTransformer", "public static final Transformer INSTANCE = new NOPTransformer<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "ExceptionFactory", "public static final Factory INSTANCE = new ExceptionFactory<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "ExceptionPredicate", "public static final Predicate INSTANCE = new ExceptionPredicate<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "FalsePredicate", "public static final Predicate INSTANCE = new FalsePredicate<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "CloneTransformer", "public static final Transformer INSTANCE = new CloneTransformer<Object>();" ], [ "NULL_INSTANCE", "org.apache.commons.collections4.functors", "ConstantFactory", "public static final Factory NULL_INSTANCE = new ConstantFactory<Object>(null);" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "TruePredicate", "public static final Predicate INSTANCE = new TruePredicate<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "NotNullPredicate", "public static final Predicate INSTANCE = new NotNullPredicate<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.comparators", "ComparableComparator", "public static final ComparableComparator INSTANCE = new ComparableComparator();" ], [ "EMPTY_COLLECTION", "org.apache.commons.collections4", "CollectionUtils", "public static final Collection EMPTY_COLLECTION = UnmodifiableCollection.unmodifiableCollection(new ArrayList<Object>());" ], [ "EMPTY_ITERABLE", "org.apache.commons.collections4", "IterableUtils", "static final FluentIterable EMPTY_ITERABLE = new FluentIterable<Object>() {\n\n    @Override\n    public Iterator<Object> iterator() {\n        return IteratorUtils.emptyIterator();\n    }\n};" ], [ "NULL_BIT_KEY", "org.apache.commons.collections4.trie", "KeyAnalyzer", "public static final int NULL_BIT_KEY = -1;" ], [ "EQUAL_BIT_KEY", "org.apache.commons.collections4.trie", "KeyAnalyzer", "public static final int EQUAL_BIT_KEY = -2;" ], [ "OUT_OF_BOUNDS_BIT_KEY", "org.apache.commons.collections4.trie", "KeyAnalyzer", "public static final int OUT_OF_BOUNDS_BIT_KEY = -3;" ], [ "INSTANCE", "org.apache.commons.collections4.trie.analyzer", "StringKeyAnalyzer", "public static final StringKeyAnalyzer INSTANCE = new StringKeyAnalyzer();" ], [ "LENGTH", "org.apache.commons.collections4.trie.analyzer", "StringKeyAnalyzer", "public static final int LENGTH = Character.SIZE;" ], [ "NO_NEXT_ENTRY", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String NO_NEXT_ENTRY = \"No next() entry in the iteration\";" ], [ "NO_PREVIOUS_ENTRY", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String NO_PREVIOUS_ENTRY = \"No previous() entry in the iteration\";" ], [ "REMOVE_INVALID", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String REMOVE_INVALID = \"remove() can only be called once after next()\";" ], [ "GETKEY_INVALID", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String GETKEY_INVALID = \"getKey() can only be called after next() and before remove()\";" ], [ "GETVALUE_INVALID", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String GETVALUE_INVALID = \"getValue() can only be called after next() and before remove()\";" ], [ "SETVALUE_INVALID", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String SETVALUE_INVALID = \"setValue() can only be called after next() and before remove()\";" ], [ "DEFAULT_CAPACITY", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final int DEFAULT_CAPACITY = 16;" ], [ "DEFAULT_THRESHOLD", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final int DEFAULT_THRESHOLD = 12;" ], [ "DEFAULT_LOAD_FACTOR", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final float DEFAULT_LOAD_FACTOR = 0.75f;" ], [ "MAXIMUM_CAPACITY", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final int MAXIMUM_CAPACITY = 1 << 30;" ], [ "NULL", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final Object NULL = new Object();" ], [ "DEFAULT_MAX_SIZE", "org.apache.commons.collections4.map", "LRUMap", "protected static final int DEFAULT_MAX_SIZE = 100;" ], [ "EMPTY_MULTISET", "org.apache.commons.collections4", "MultiSetUtils", "public static final MultiSet EMPTY_MULTISET = UnmodifiableMultiSet.unmodifiableMultiSet(new HashMultiSet<Object>());" ], [ "EMPTY_SORTED_SET", "org.apache.commons.collections4", "SetUtils", "public static final SortedSet EMPTY_SORTED_SET = UnmodifiableSortedSet.unmodifiableSortedSet(new TreeSet<Object>());" ], [ "EMPTY_QUEUE", "org.apache.commons.collections4", "QueueUtils", "public static final Queue EMPTY_QUEUE = UnmodifiableQueue.unmodifiableQueue(new LinkedList<Object>());" ], [ "EMPTY_BAG", "org.apache.commons.collections4", "BagUtils", "public static final Bag EMPTY_BAG = UnmodifiableBag.unmodifiableBag(new HashBag<Object>());" ], [ "EMPTY_SORTED_BAG", "org.apache.commons.collections4", "BagUtils", "public static final Bag EMPTY_SORTED_BAG = UnmodifiableSortedBag.unmodifiableSortedBag(new TreeBag<Object>());" ], [ "RESETTABLE_INSTANCE", "org.apache.commons.collections4.iterators", "EmptyListIterator", "public static final ResettableListIterator RESETTABLE_INSTANCE = new EmptyListIterator<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.iterators", "EmptyListIterator", "public static final ListIterator INSTANCE = RESETTABLE_INSTANCE;" ], [ "INSTANCE", "org.apache.commons.collections4.iterators", "EmptyMapIterator", "public static final MapIterator INSTANCE = new EmptyMapIterator<Object, Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.iterators", "EmptyOrderedIterator", "public static final OrderedIterator INSTANCE = new EmptyOrderedIterator<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.iterators", "EmptyOrderedMapIterator", "public static final OrderedMapIterator INSTANCE = new EmptyOrderedMapIterator<Object, Object>();" ], [ "RESETTABLE_INSTANCE", "org.apache.commons.collections4.iterators", "EmptyIterator", "public static final ResettableIterator RESETTABLE_INSTANCE = new EmptyIterator<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.iterators", "EmptyIterator", "public static final Iterator INSTANCE = RESETTABLE_INSTANCE;" ] ],
  "tokensMethodJavadocValues" : [ ],
  "tokensMethodArguments" : [ [ "objectsAndTransformers", "java.util.Map", "Map<I, Transformer<I, O>>" ] ],
  "tokensMethodVariablesNonPrivateNonStaticNonVoidMethods" : [ [ "getClass", "java.lang", "Object", "public final native Class<? extends Object> getClass()" ], [ "hashCode", "java.lang", "Object", "public native int hashCode()" ], [ "toString", "java.lang", "Object", "public String toString()" ], [ "equals", "java.lang", "Object", "public boolean equals(Object arg0)" ], [ "clone", "java.lang", "Object", "protected native Object clone() throws CloneNotSupportedException" ], [ "containsValue", "java.util", "Map", "public abstract boolean containsValue(Object arg0)" ], [ "getOrDefault", "java.util", "Map", "public default V getOrDefault(Object arg0, V arg1)" ], [ "merge", "java.util", "Map", "public default V merge(K arg0, V arg1, BiFunction<? super V, ? super V, ? extends V> arg2)" ], [ "equals", "java.util", "Map", "public abstract boolean equals(Object arg0)" ], [ "size", "java.util", "Map", "public abstract int size()" ], [ "keySet", "java.util", "Map", "public abstract Set<K> keySet()" ], [ "remove", "java.util", "Map", "public abstract V remove(Object arg0)" ], [ "containsKey", "java.util", "Map", "public abstract boolean containsKey(Object arg0)" ], [ "hashCode", "java.util", "Map", "public abstract int hashCode()" ], [ "replace", "java.util", "Map", "public default boolean replace(K arg0, V arg1, V arg2)" ], [ "remove", "java.util", "Map", "public default boolean remove(Object arg0, Object arg1)" ], [ "compute", "java.util", "Map", "public default V compute(K arg0, BiFunction<? super K, ? super V, ? extends V> arg1)" ], [ "computeIfPresent", "java.util", "Map", "public default V computeIfPresent(K arg0, BiFunction<? super K, ? super V, ? extends V> arg1)" ], [ "put", "java.util", "Map", "public abstract V put(K arg0, V arg1)" ], [ "get", "java.util", "Map", "public abstract V get(Object arg0)" ], [ "replace", "java.util", "Map", "public default V replace(K arg0, V arg1)" ], [ "computeIfAbsent", "java.util", "Map", "public default V computeIfAbsent(K arg0, Function<? super K, ? extends V> arg1)" ], [ "isEmpty", "java.util", "Map", "public abstract boolean isEmpty()" ], [ "values", "java.util", "Map", "public abstract Collection<V> values()" ], [ "entrySet", "java.util", "Map", "public abstract Set<Map.Entry<K, V>> entrySet()" ], [ "putIfAbsent", "java.util", "Map", "public default V putIfAbsent(K arg0, V arg1)" ], [ "transform", "org.apache.commons.collections4", "Transformer", "public abstract O transform(I arg0)" ] ],
  "tokensMethodVariablesNonPrivateNonStaticAttributes" : [ ],
  "tokensOracleVariablesNonPrivateNonStaticNonVoidMethods" : [ ],
  "tokensOracleVariablesNonPrivateNonStaticAttributes" : [ ]
}, {
  "id" : 8982,
  "oracle" : ";",
  "oracleType" : "EXCEPT_POST",
  "projectName" : "commons-collections4-4.1",
  "packageName" : "org.apache.commons.collections4",
  "className" : "TransformerUtils",
  "javadocTag" : "@throws IllegalArgumentException if the paramTypes and args don't match",
  "methodJavadoc" : "    /**\n     * Creates a Transformer that expects an input Class object that it will\n     * instantiate. The constructor used is determined by the arguments specified\n     * to this method.\n     *\n     * @param <T>  the output type\n     * @param paramTypes  parameter types for the constructor, can be null\n     * @param args  the arguments to pass to the constructor, can be null\n     * @return the transformer\n     * @throws IllegalArgumentException if the paramTypes and args don't match\n     * @see InstantiateTransformer\n     */",
  "methodSourceCode" : "public static <T> Transformer<Class<? extends T>, T> instantiateTransformer(final Class<?>[] paramTypes, final Object[] args){\n    return InstantiateTransformer.instantiateTransformer(paramTypes, args);\n}",
  "classJavadoc" : "/**\n * <code>TransformerUtils</code> provides reference implementations and\n * utilities for the Transformer functor interface. The supplied transformers are:\n * <ul>\n * <li>Invoker - returns the result of a method call on the input object\n * <li>Clone - returns a clone of the input object\n * <li>Constant - always returns the same object\n * <li>Closure - performs a Closure and returns the input object\n * <li>Predicate - returns the result of the predicate as a Boolean\n * <li>Factory - returns a new object from a factory\n * <li>Chained - chains two or more transformers together\n * <li>If - calls one transformer or another based on a predicate\n * <li>Switch - calls one transformer based on one or more predicates\n * <li>SwitchMap - calls one transformer looked up from a Map\n * <li>Instantiate - the Class input object is instantiated\n * <li>Map - returns an object from a supplied Map\n * <li>Null - always returns null\n * <li>NOP - returns the input object, which should be immutable\n * <li>Exception - always throws an exception\n * <li>StringValue - returns a <code>java.lang.String</code> representation of the input object\n * </ul>\n * <p>\n * Since v4.1 only transformers which are considered to be unsafe are\n * Serializable. Transformers considered to be unsafe for serialization are:\n * <ul>\n * <li>Invoker\n * <li>Clone\n * <li>Instantiate\n * </ul>\n *\n * @since 3.0\n * @version $Id: TransformerUtils.java 1714362 2015-11-14 20:38:02Z tn $\n */",
  "classSourceCode" : "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.commons.collections4;\n\nimport java.util.Collection;\nimport java.util.Map;\n\nimport org.apache.commons.collections4.functors.ChainedTransformer;\nimport org.apache.commons.collections4.functors.CloneTransformer;\nimport org.apache.commons.collections4.functors.ClosureTransformer;\nimport org.apache.commons.collections4.functors.ConstantTransformer;\nimport org.apache.commons.collections4.functors.EqualPredicate;\nimport org.apache.commons.collections4.functors.ExceptionTransformer;\nimport org.apache.commons.collections4.functors.FactoryTransformer;\nimport org.apache.commons.collections4.functors.IfTransformer;\nimport org.apache.commons.collections4.functors.InstantiateTransformer;\nimport org.apache.commons.collections4.functors.InvokerTransformer;\nimport org.apache.commons.collections4.functors.MapTransformer;\nimport org.apache.commons.collections4.functors.NOPTransformer;\nimport org.apache.commons.collections4.functors.PredicateTransformer;\nimport org.apache.commons.collections4.functors.StringValueTransformer;\nimport org.apache.commons.collections4.functors.SwitchTransformer;\n\n/**\n * <code>TransformerUtils</code> provides reference implementations and\n * utilities for the Transformer functor interface. The supplied transformers are:\n * <ul>\n * <li>Invoker - returns the result of a method call on the input object\n * <li>Clone - returns a clone of the input object\n * <li>Constant - always returns the same object\n * <li>Closure - performs a Closure and returns the input object\n * <li>Predicate - returns the result of the predicate as a Boolean\n * <li>Factory - returns a new object from a factory\n * <li>Chained - chains two or more transformers together\n * <li>If - calls one transformer or another based on a predicate\n * <li>Switch - calls one transformer based on one or more predicates\n * <li>SwitchMap - calls one transformer looked up from a Map\n * <li>Instantiate - the Class input object is instantiated\n * <li>Map - returns an object from a supplied Map\n * <li>Null - always returns null\n * <li>NOP - returns the input object, which should be immutable\n * <li>Exception - always throws an exception\n * <li>StringValue - returns a <code>java.lang.String</code> representation of the input object\n * </ul>\n * <p>\n * Since v4.1 only transformers which are considered to be unsafe are\n * Serializable. Transformers considered to be unsafe for serialization are:\n * <ul>\n * <li>Invoker\n * <li>Clone\n * <li>Instantiate\n * </ul>\n *\n * @since 3.0\n * @version $Id: TransformerUtils.java 1714362 2015-11-14 20:38:02Z tn $\n */\npublic class TransformerUtils {\n\n    /**\n     * This class is not normally instantiated.\n     */\n    private TransformerUtils() {}\n\n    /**\n     * Gets a transformer that always throws an exception.\n     * This could be useful during testing as a placeholder.\n     *\n     * @param <I>  the input type\n     * @param <O>  the output type\n     * @return the transformer\n     * @see ExceptionTransformer\n     */\n    public static <I, O> Transformer<I, O> exceptionTransformer() {\n        return ExceptionTransformer.exceptionTransformer();\n    }\n\n    /**\n     * Gets a transformer that always returns null.\n     *\n     * @param <I>  the input type\n     * @param <O>  the output type\n     * @return the transformer\n     * @see ConstantTransformer\n     */\n    public static <I, O> Transformer<I, O> nullTransformer() {\n        return ConstantTransformer.nullTransformer();\n    }\n\n    /**\n     * Gets a transformer that returns the input object.\n     * The input object should be immutable to maintain the\n     * contract of Transformer (although this is not checked).\n     *\n     * @param <T>  the input/output type\n     * @return the transformer\n     * @see NOPTransformer\n     */\n    public static <T> Transformer<T, T> nopTransformer() {\n        return NOPTransformer.nopTransformer();\n    }\n\n    /**\n     * Gets a transformer that returns a clone of the input object.\n     * The input object will be cloned using one of these techniques (in order):\n     * <ul>\n     * <li>public clone method\n     * <li>public copy constructor\n     * <li>serialization clone\n     * <ul>\n     *\n     * @param <T>  the input/output type\n     * @return the transformer\n     * @see CloneTransformer\n     */\n    public static <T> Transformer<T, T> cloneTransformer() {\n        return CloneTransformer.cloneTransformer();\n    }\n\n    /**\n     * Creates a Transformer that will return the same object each time the\n     * transformer is used.\n     *\n     * @param <I>  the input type\n     * @param <O>  the output type\n     * @param constantToReturn  the constant object to return each time in the transformer\n     * @return the transformer.\n     * @see ConstantTransformer\n     */\n    public static <I, O> Transformer<I, O> constantTransformer(final O constantToReturn) {\n        return ConstantTransformer.constantTransformer(constantToReturn);\n    }\n\n    /**\n     * Creates a Transformer that calls a Closure each time the transformer is used.\n     * The transformer returns the input object.\n     *\n     * @param <T>  the input/output type\n     * @param closure  the closure to run each time in the transformer, not null\n     * @return the transformer\n     * @throws NullPointerException if the closure is null\n     * @see ClosureTransformer\n     */\n    public static <T> Transformer<T, T> asTransformer(final Closure<? super T> closure) {\n        return ClosureTransformer.closureTransformer(closure);\n    }\n\n    /**\n     * Creates a Transformer that calls a Predicate each time the transformer is used.\n     * The transformer will return either Boolean.TRUE or Boolean.FALSE.\n     *\n     * @param <T>  the input type\n     * @param predicate  the predicate to run each time in the transformer, not null\n     * @return the transformer\n     * @throws NullPointerException if the predicate is null\n     * @see PredicateTransformer\n     */\n    public static <T> Transformer<T, Boolean> asTransformer(final Predicate<? super T> predicate) {\n        return PredicateTransformer.predicateTransformer(predicate);\n    }\n\n    /**\n     * Creates a Transformer that calls a Factory each time the transformer is used.\n     * The transformer will return the value returned by the factory.\n     *\n     * @param <I>  the input type\n     * @param <O>  the output type\n     * @param factory  the factory to run each time in the transformer, not null\n     * @return the transformer\n     * @throws NullPointerException if the factory is null\n     * @see FactoryTransformer\n     */\n    public static <I, O> Transformer<I, O> asTransformer(final Factory<? extends O> factory) {\n        return FactoryTransformer.factoryTransformer(factory);\n    }\n\n    /**\n     * Create a new Transformer that calls each transformer in turn, passing the\n     * result into the next transformer.\n     *\n     * @param <T>  the input/output type\n     * @param transformers  an array of transformers to chain\n     * @return the transformer\n     * @throws NullPointerException if the transformers array or any of the transformers is null\n     * @see ChainedTransformer\n     */\n    public static <T> Transformer<T, T> chainedTransformer(\n            final Transformer<? super T, ? extends T>... transformers) {\n        return ChainedTransformer.chainedTransformer(transformers);\n    }\n\n    /**\n     * Create a new Transformer that calls each transformer in turn, passing the\n     * result into the next transformer. The ordering is that of the iterator()\n     * method on the collection.\n     *\n     * @param <T>  the input/output type\n     * @param transformers  a collection of transformers to chain\n     * @return the transformer\n     * @throws NullPointerException if the transformers collection or any of the transformers is null\n     * @see ChainedTransformer\n     */\n    public static <T> Transformer<T, T> chainedTransformer(\n            final Collection<? extends Transformer<? super T, ? extends T>> transformers) {\n        return ChainedTransformer.chainedTransformer(transformers);\n    }\n\n    /**\n     * Create a new Transformer that calls the transformer if the predicate is true,\n     * otherwise the input object is returned unchanged.\n     *\n     * @param <T>  the input / output type\n     * @param predicate  the predicate to switch on\n     * @param trueTransformer  the transformer called if the predicate is true\n     * @return the transformer\n     * @throws NullPointerException if either the predicate or transformer is null\n     * @see IfTransformer\n     * @since 4.1\n     */\n    public static <T> Transformer<T, T> ifTransformer(final Predicate<? super T> predicate,\n                                                      final Transformer<? super T, ? extends T> trueTransformer) {\n        return IfTransformer.ifTransformer(predicate, trueTransformer);\n    }\n\n    /**\n     * Create a new Transformer that calls one of two transformers depending\n     * on the specified predicate.\n     *\n     * @param <I>  the input type\n     * @param <O>  the output type\n     * @param predicate  the predicate to switch on\n     * @param trueTransformer  the transformer called if the predicate is true\n     * @param falseTransformer  the transformer called if the predicate is false\n     * @return the transformer\n     * @throws NullPointerException if either the predicate or transformer is null\n     * @see IfTransformer\n     * @since 4.1\n     */\n    public static <I, O> Transformer<I, O> ifTransformer(final Predicate<? super I> predicate,\n                                                         final Transformer<? super I, ? extends O> trueTransformer,\n                                                         final Transformer<? super I, ? extends O> falseTransformer) {\n        return IfTransformer.ifTransformer(predicate, trueTransformer, falseTransformer);\n    }\n\n    /**\n     * Create a new Transformer that calls one of two transformers depending\n     * on the specified predicate.\n     *\n     * @param <I>  the input type\n     * @param <O>  the output type\n     * @param predicate  the predicate to switch on\n     * @param trueTransformer  the transformer called if the predicate is true\n     * @param falseTransformer  the transformer called if the predicate is false\n     * @return the transformer\n     * @throws NullPointerException if either the predicate or transformer is null\n     * @see SwitchTransformer\n     * @deprecated as of 4.1, use {@link #ifTransformer(Predicate, Transformer, Transformer))\n     */\n    @SuppressWarnings(\"unchecked\")\n    @Deprecated\n    public static <I, O> Transformer<I, O> switchTransformer(final Predicate<? super I> predicate,\n            final Transformer<? super I, ? extends O> trueTransformer,\n            final Transformer<? super I, ? extends O> falseTransformer) {\n        return SwitchTransformer.switchTransformer(new Predicate[] { predicate },\n                                                   new Transformer[] { trueTransformer }, falseTransformer);\n    }\n\n    /**\n     * Create a new Transformer that calls one of the transformers depending\n     * on the predicates. The transformer at array location 0 is called if the\n     * predicate at array location 0 returned true. Each predicate is evaluated\n     * until one returns true. If no predicates evaluate to true, null is returned.\n     *\n     * @param <I>  the input type\n     * @param <O>  the output type\n     * @param predicates  an array of predicates to check\n     * @param transformers  an array of transformers to call\n     * @return the transformer\n     * @throws NullPointerException if the either array is null\n     * @throws NullPointerException if any element in the arrays is null\n     * @throws IllegalArgumentException if the arrays have different sizes\n     * @see SwitchTransformer\n     */\n    public static <I, O> Transformer<I, O> switchTransformer(final Predicate<? super I>[] predicates,\n            final Transformer<? super I, ? extends O>[] transformers) {\n        return SwitchTransformer.switchTransformer(predicates, transformers, null);\n    }\n\n    /**\n     * Create a new Transformer that calls one of the transformers depending\n     * on the predicates. The transformer at array location 0 is called if the\n     * predicate at array location 0 returned true. Each predicate is evaluated\n     * until one returns true. If no predicates evaluate to true, the default\n     * transformer is called. If the default transformer is null, null is returned.\n     *\n     * @param <I>  the input type\n     * @param <O>  the output type\n     * @param predicates  an array of predicates to check\n     * @param transformers  an array of transformers to call\n     * @param defaultTransformer  the default to call if no predicate matches, null means return null\n     * @return the transformer\n     * @throws NullPointerException if the either array is null\n     * @throws NullPointerException if any element in the arrays is null\n     * @throws IllegalArgumentException if the arrays have different sizes\n     * @see SwitchTransformer\n     */\n    public static <I, O> Transformer<I, O> switchTransformer(final Predicate<? super I>[] predicates,\n            final Transformer<? super I, ? extends O>[] transformers,\n            final Transformer<? super I, ? extends O> defaultTransformer) {\n        return SwitchTransformer.switchTransformer(predicates, transformers, defaultTransformer);\n    }\n\n    /**\n     * Create a new Transformer that calls one of the transformers depending\n     * on the predicates.\n     * <p>\n     * The Map consists of Predicate keys and Transformer values. A transformer\n     * is called if its matching predicate returns true. Each predicate is evaluated\n     * until one returns true. If no predicates evaluate to true, the default\n     * transformer is called. The default transformer is set in the map with a\n     * null key. If no default transformer is set, null will be returned in a default\n     * case. The ordering is that of the iterator() method on the entryset collection\n     * of the map.\n     *\n     * @param <I>  the input type\n     * @param <O>  the output type\n     * @param predicatesAndTransformers  a map of predicates to transformers\n     * @return the transformer\n     * @throws NullPointerException if the map is null\n     * @throws NullPointerException if any transformer in the map is null\n     * @throws ClassCastException  if the map elements are of the wrong type\n     * @see SwitchTransformer\n     */\n    public static <I, O> Transformer<I, O> switchTransformer(\n            final Map<Predicate<I>, Transformer<I, O>> predicatesAndTransformers) {\n        return SwitchTransformer.switchTransformer(predicatesAndTransformers);\n    }\n\n    /**\n     * Create a new Transformer that uses the input object as a key to find the\n     * transformer to call.\n     * <p>\n     * The Map consists of object keys and Transformer values. A transformer\n     * is called if the input object equals the key. If there is no match, the\n     * default transformer is called. The default transformer is set in the map\n     * using a null key. If no default is set, null will be returned in a default case.\n     *\n     * @param <I>  the input type\n     * @param <O>  the output type\n     * @param objectsAndTransformers  a map of objects to transformers\n     * @return the transformer\n     * @throws NullPointerException if the map is null\n     * @throws NullPointerException if any transformer in the map is null\n     * @see SwitchTransformer\n     */\n    @SuppressWarnings(\"unchecked\")\n    public static <I, O> Transformer<I, O> switchMapTransformer(\n            final Map<I, Transformer<I, O>> objectsAndTransformers) {\n\n        if (objectsAndTransformers == null) {\n            throw new NullPointerException(\"The object and transformer map must not be null\");\n        }\n        final Transformer<? super I, ? extends O> def = objectsAndTransformers.remove(null);\n        final int size = objectsAndTransformers.size();\n        final Transformer<? super I, ? extends O>[] trs = new Transformer[size];\n        final Predicate<I>[] preds = new Predicate[size];\n        int i = 0;\n        for (final Map.Entry<I, Transformer<I, O>> entry : objectsAndTransformers.entrySet()) {\n            preds[i] = EqualPredicate.<I>equalPredicate(entry.getKey());\n            trs[i++] = entry.getValue();\n        }\n        return TransformerUtils.switchTransformer(preds, trs, def);\n    }\n\n    /**\n     * Gets a Transformer that expects an input Class object that it will instantiate.\n     *\n     * @param <T>  the output type\n     * @return the transformer\n     * @see InstantiateTransformer\n     */\n    public static <T> Transformer<Class<? extends T>, T> instantiateTransformer() {\n        return InstantiateTransformer.instantiateTransformer();\n    }\n\n    /**\n     * Creates a Transformer that expects an input Class object that it will\n     * instantiate. The constructor used is determined by the arguments specified\n     * to this method.\n     *\n     * @param <T>  the output type\n     * @param paramTypes  parameter types for the constructor, can be null\n     * @param args  the arguments to pass to the constructor, can be null\n     * @return the transformer\n     * @throws IllegalArgumentException if the paramTypes and args don't match\n     * @see InstantiateTransformer\n     */\n    public static <T> Transformer<Class<? extends T>, T> instantiateTransformer(\n            final Class<?>[] paramTypes, final Object[] args) {\n        return InstantiateTransformer.instantiateTransformer(paramTypes, args);\n    }\n\n    /**\n     * Creates a Transformer that uses the passed in Map to transform the input\n     * object (as a simple lookup).\n     *\n     * @param <I>  the input type\n     * @param <O>  the output type\n     * @param map  the map to use to transform the objects\n     * @return the transformer, or {@link ConstantTransformer#nullTransformer()} if the\n     *   {@code map} is {@code null}\n     * @see MapTransformer\n     */\n    public static <I, O> Transformer<I, O> mapTransformer(final Map<? super I, ? extends O> map) {\n        return MapTransformer.mapTransformer(map);\n    }\n\n    /**\n     * Gets a Transformer that invokes a method on the input object.\n     * The method must have no parameters. If the input object is null,\n     * null is returned.\n     * <p>\n     * For example, <code>TransformerUtils.invokerTransformer(\"getName\");</code>\n     * will call the <code>getName/code> method on the input object to\n     * determine the transformer result.\n     *\n     * @param <I>  the input type\n     * @param <O>  the output type\n     * @param methodName  the method name to call on the input object, may not be null\n     * @return the transformer\n     * @throws NullPointerException if the methodName is null.\n     * @see InvokerTransformer\n     */\n    public static <I, O> Transformer<I, O> invokerTransformer(final String methodName) {\n        return InvokerTransformer.invokerTransformer(methodName, null, null);\n    }\n\n    /**\n     * Gets a Transformer that invokes a method on the input object.\n     * The method parameters are specified. If the input object is {@code null},\n     * {@code null} is returned.\n     *\n     * @param <I>  the input type\n     * @param <O>  the output type\n     * @param methodName  the name of the method\n     * @param paramTypes  the parameter types\n     * @param args  the arguments\n     * @return the transformer\n     * @throws NullPointerException if the method name is null\n     * @throws IllegalArgumentException if the paramTypes and args don't match\n     * @see InvokerTransformer\n     */\n    public static <I, O> Transformer<I, O> invokerTransformer(final String methodName, final Class<?>[] paramTypes,\n                                                              final Object[] args) {\n        return InvokerTransformer.invokerTransformer(methodName, paramTypes, args);\n    }\n\n    /**\n     * Gets a transformer that returns a <code>java.lang.String</code>\n     * representation of the input object. This is achieved via the\n     * <code>toString</code> method, <code>null</code> returns 'null'.\n     *\n     * @param <T>  the input type\n     * @return the transformer\n     * @see StringValueTransformer\n     */\n    public static <T> Transformer<T, String> stringValueTransformer() {\n        return StringValueTransformer.stringValueTransformer();\n    }\n\n}\n",
  "tokensGeneralGrammar" : [ "null", "true", "false", ",", ".", ":", ";", "?", "(", ")", "jdVar", "stream", "Arrays", "allMatch", "noneMatch", "anyMatch", "~", ">>", "<<", ">>>", "|", "&", "^", "+", "-", "/", "*", "%", "&&", "||", ">=", "<=", ">", "<", "==", "!=", "instanceof", "class", "methodResultID", "this" ],
  "tokensGeneralValuesGlobalDictionary" : [ [ "0", "int" ], [ "1", "int" ], [ "-1", "int" ], [ "0.0", "double" ], [ "1.0", "double" ], [ "-1.0", "double" ], [ "\"\"", "String" ], [ "\" \"", "String" ] ],
  "tokensProjectClasses" : [ [ "BidiMap", "org.apache.commons.collections4" ], [ "Equator", "org.apache.commons.collections4" ], [ "MultiSet", "org.apache.commons.collections4" ], [ "IteratorUtils", "org.apache.commons.collections4" ], [ "ComparatorUtils", "org.apache.commons.collections4" ], [ "FunctorException", "org.apache.commons.collections4" ], [ "AbstractDualBidiMap", "org.apache.commons.collections4.bidimap" ], [ "UnmodifiableBidiMap", "org.apache.commons.collections4.bidimap" ], [ "AbstractOrderedBidiMapDecorator", "org.apache.commons.collections4.bidimap" ], [ "UnmodifiableOrderedBidiMap", "org.apache.commons.collections4.bidimap" ], [ "AbstractBidiMapDecorator", "org.apache.commons.collections4.bidimap" ], [ "DualLinkedHashBidiMap", "org.apache.commons.collections4.bidimap" ], [ "UnmodifiableSortedBidiMap", "org.apache.commons.collections4.bidimap" ], [ "AbstractSortedBidiMapDecorator", "org.apache.commons.collections4.bidimap" ], [ "DualHashBidiMap", "org.apache.commons.collections4.bidimap" ], [ "DualTreeBidiMap", "org.apache.commons.collections4.bidimap" ], [ "TreeBidiMap", "org.apache.commons.collections4.bidimap" ], [ "MultiMapUtils", "org.apache.commons.collections4" ], [ "BoundedCollection", "org.apache.commons.collections4" ], [ "UnmodifiableBoundedCollection", "org.apache.commons.collections4.collection" ], [ "CompositeCollection", "org.apache.commons.collections4.collection" ], [ "TransformedCollection", "org.apache.commons.collections4.collection" ], [ "PredicatedCollection", "org.apache.commons.collections4.collection" ], [ "IndexedCollection", "org.apache.commons.collections4.collection" ], [ "SynchronizedCollection", "org.apache.commons.collections4.collection" ], [ "UnmodifiableCollection", "org.apache.commons.collections4.collection" ], [ "AbstractCollectionDecorator", "org.apache.commons.collections4.collection" ], [ "OrderedBidiMap", "org.apache.commons.collections4" ], [ "FactoryUtils", "org.apache.commons.collections4" ], [ "IterableGet", "org.apache.commons.collections4" ], [ "ListUtils", "org.apache.commons.collections4" ], [ "Closure", "org.apache.commons.collections4" ], [ "IterableSortedMap", "org.apache.commons.collections4" ], [ "MapUtils", "org.apache.commons.collections4" ], [ "Transformer", "org.apache.commons.collections4" ], [ "DefaultEquator", "org.apache.commons.collections4.functors" ], [ "StringValueTransformer", "org.apache.commons.collections4.functors" ], [ "PredicateDecorator", "org.apache.commons.collections4.functors" ], [ "IfTransformer", "org.apache.commons.collections4.functors" ], [ "IdentityPredicate", "org.apache.commons.collections4.functors" ], [ "ExceptionClosure", "org.apache.commons.collections4.functors" ], [ "NOPClosure", "org.apache.commons.collections4.functors" ], [ "ClosureTransformer", "org.apache.commons.collections4.functors" ], [ "FunctorUtils", "org.apache.commons.collections4.functors" ], [ "TransformerPredicate", "org.apache.commons.collections4.functors" ], [ "NullPredicate", "org.apache.commons.collections4.functors" ], [ "ConstantTransformer", "org.apache.commons.collections4.functors" ], [ "PredicateTransformer", "org.apache.commons.collections4.functors" ], [ "WhileClosure", "org.apache.commons.collections4.functors" ], [ "ForClosure", "org.apache.commons.collections4.functors" ], [ "NullIsTruePredicate", "org.apache.commons.collections4.functors" ], [ "TransformedPredicate", "org.apache.commons.collections4.functors" ], [ "NonePredicate", "org.apache.commons.collections4.functors" ], [ "ExceptionTransformer", "org.apache.commons.collections4.functors" ], [ "SwitchTransformer", "org.apache.commons.collections4.functors" ], [ "TransformerClosure", "org.apache.commons.collections4.functors" ], [ "OrPredicate", "org.apache.commons.collections4.functors" ], [ "NOPTransformer", "org.apache.commons.collections4.functors" ], [ "MapTransformer", "org.apache.commons.collections4.functors" ], [ "ExceptionFactory", "org.apache.commons.collections4.functors" ], [ "ChainedClosure", "org.apache.commons.collections4.functors" ], [ "AndPredicate", "org.apache.commons.collections4.functors" ], [ "PrototypeFactory", "org.apache.commons.collections4.functors" ], [ "ExceptionPredicate", "org.apache.commons.collections4.functors" ], [ "AbstractQuantifierPredicate", "org.apache.commons.collections4.functors" ], [ "InstanceofPredicate", "org.apache.commons.collections4.functors" ], [ "InvokerTransformer", "org.apache.commons.collections4.functors" ], [ "FalsePredicate", "org.apache.commons.collections4.functors" ], [ "CloneTransformer", "org.apache.commons.collections4.functors" ], [ "NotPredicate", "org.apache.commons.collections4.functors" ], [ "ConstantFactory", "org.apache.commons.collections4.functors" ], [ "ChainedTransformer", "org.apache.commons.collections4.functors" ], [ "ComparatorPredicate", "org.apache.commons.collections4.functors" ], [ "CatchAndRethrowClosure", "org.apache.commons.collections4.functors" ], [ "AllPredicate", "org.apache.commons.collections4.functors" ], [ "NullIsFalsePredicate", "org.apache.commons.collections4.functors" ], [ "NullIsExceptionPredicate", "org.apache.commons.collections4.functors" ], [ "AnyPredicate", "org.apache.commons.collections4.functors" ], [ "TruePredicate", "org.apache.commons.collections4.functors" ], [ "FactoryTransformer", "org.apache.commons.collections4.functors" ], [ "NotNullPredicate", "org.apache.commons.collections4.functors" ], [ "SwitchClosure", "org.apache.commons.collections4.functors" ], [ "UniquePredicate", "org.apache.commons.collections4.functors" ], [ "InstantiateTransformer", "org.apache.commons.collections4.functors" ], [ "OnePredicate", "org.apache.commons.collections4.functors" ], [ "EqualPredicate", "org.apache.commons.collections4.functors" ], [ "InstantiateFactory", "org.apache.commons.collections4.functors" ], [ "IfClosure", "org.apache.commons.collections4.functors" ], [ "ResettableListIterator", "org.apache.commons.collections4" ], [ "OrderedIterator", "org.apache.commons.collections4" ], [ "ComparatorChain", "org.apache.commons.collections4.comparators" ], [ "BooleanComparator", "org.apache.commons.collections4.comparators" ], [ "ReverseComparator", "org.apache.commons.collections4.comparators" ], [ "ComparableComparator", "org.apache.commons.collections4.comparators" ], [ "TransformingComparator", "org.apache.commons.collections4.comparators" ], [ "FixedOrderComparator", "org.apache.commons.collections4.comparators" ], [ "NullComparator", "org.apache.commons.collections4.comparators" ], [ "CollectionUtils", "org.apache.commons.collections4" ], [ "ListValuedMap", "org.apache.commons.collections4" ], [ "AbstractIterableGetMapDecorator", "org.apache.commons.collections4.splitmap" ], [ "TransformedSplitMap", "org.apache.commons.collections4.splitmap" ], [ "Factory", "org.apache.commons.collections4" ], [ "IterableUtils", "org.apache.commons.collections4" ], [ "Bag", "org.apache.commons.collections4" ], [ "Predicate", "org.apache.commons.collections4" ], [ "SortedBag", "org.apache.commons.collections4" ], [ "TrieUtils", "org.apache.commons.collections4" ], [ "ClosureUtils", "org.apache.commons.collections4" ], [ "PatriciaTrie", "org.apache.commons.collections4.trie" ], [ "UnmodifiableTrie", "org.apache.commons.collections4.trie" ], [ "KeyAnalyzer", "org.apache.commons.collections4.trie" ], [ "AbstractPatriciaTrie", "org.apache.commons.collections4.trie" ], [ "AbstractBitwiseTrie", "org.apache.commons.collections4.trie" ], [ "StringKeyAnalyzer", "org.apache.commons.collections4.trie.analyzer" ], [ "TransformedSortedMap", "org.apache.commons.collections4.map" ], [ "AbstractLinkedMap", "org.apache.commons.collections4.map" ], [ "Flat3Map", "org.apache.commons.collections4.map" ], [ "PredicatedMap", "org.apache.commons.collections4.map" ], [ "FixedSizeSortedMap", "org.apache.commons.collections4.map" ], [ "UnmodifiableSortedMap", "org.apache.commons.collections4.map" ], [ "PredicatedSortedMap", "org.apache.commons.collections4.map" ], [ "DefaultedMap", "org.apache.commons.collections4.map" ], [ "ReferenceIdentityMap", "org.apache.commons.collections4.map" ], [ "AbstractSortedMapDecorator", "org.apache.commons.collections4.map" ], [ "AbstractInputCheckedMapDecorator", "org.apache.commons.collections4.map" ], [ "FixedSizeMap", "org.apache.commons.collections4.map" ], [ "LazySortedMap", "org.apache.commons.collections4.map" ], [ "UnmodifiableOrderedMap", "org.apache.commons.collections4.map" ], [ "CaseInsensitiveMap", "org.apache.commons.collections4.map" ], [ "AbstractHashedMap", "org.apache.commons.collections4.map" ], [ "AbstractOrderedMapDecorator", "org.apache.commons.collections4.map" ], [ "UnmodifiableMap", "org.apache.commons.collections4.map" ], [ "EntrySetToMapIteratorAdapter", "org.apache.commons.collections4.map" ], [ "AbstractIterableMap", "org.apache.commons.collections4.map" ], [ "ListOrderedMap", "org.apache.commons.collections4.map" ], [ "LinkedMap", "org.apache.commons.collections4.map" ], [ "SingletonMap", "org.apache.commons.collections4.map" ], [ "UnmodifiableEntrySet", "org.apache.commons.collections4.map" ], [ "StaticBucketMap", "org.apache.commons.collections4.map" ], [ "AbstractMapDecorator", "org.apache.commons.collections4.map" ], [ "AbstractReferenceMap", "org.apache.commons.collections4.map" ], [ "MultiKeyMap", "org.apache.commons.collections4.map" ], [ "HashedMap", "org.apache.commons.collections4.map" ], [ "LazyMap", "org.apache.commons.collections4.map" ], [ "PassiveExpiringMap", "org.apache.commons.collections4.map" ], [ "MultiValueMap", "org.apache.commons.collections4.map" ], [ "LRUMap", "org.apache.commons.collections4.map" ], [ "ReferenceMap", "org.apache.commons.collections4.map" ], [ "TransformedMap", "org.apache.commons.collections4.map" ], [ "CompositeMap", "org.apache.commons.collections4.map" ], [ "UnmodifiableMapEntry", "org.apache.commons.collections4.keyvalue" ], [ "MultiKey", "org.apache.commons.collections4.keyvalue" ], [ "DefaultMapEntry", "org.apache.commons.collections4.keyvalue" ], [ "DefaultKeyValue", "org.apache.commons.collections4.keyvalue" ], [ "AbstractMapEntryDecorator", "org.apache.commons.collections4.keyvalue" ], [ "AbstractKeyValue", "org.apache.commons.collections4.keyvalue" ], [ "TiedMapEntry", "org.apache.commons.collections4.keyvalue" ], [ "AbstractMapEntry", "org.apache.commons.collections4.keyvalue" ], [ "MultiSetUtils", "org.apache.commons.collections4" ], [ "MapIterator", "org.apache.commons.collections4" ], [ "AbstractMultiValuedMap", "org.apache.commons.collections4.multimap" ], [ "UnmodifiableMultiValuedMap", "org.apache.commons.collections4.multimap" ], [ "HashSetValuedHashMap", "org.apache.commons.collections4.multimap" ], [ "TransformedMultiValuedMap", "org.apache.commons.collections4.multimap" ], [ "AbstractSetValuedMap", "org.apache.commons.collections4.multimap" ], [ "AbstractListValuedMap", "org.apache.commons.collections4.multimap" ], [ "ArrayListValuedHashMap", "org.apache.commons.collections4.multimap" ], [ "AbstractMultiValuedMapDecorator", "org.apache.commons.collections4.multimap" ], [ "LazyList", "org.apache.commons.collections4.list" ], [ "AbstractSerializableListDecorator", "org.apache.commons.collections4.list" ], [ "TreeList", "org.apache.commons.collections4.list" ], [ "SetUniqueList", "org.apache.commons.collections4.list" ], [ "AbstractListDecorator", "org.apache.commons.collections4.list" ], [ "NodeCachingLinkedList", "org.apache.commons.collections4.list" ], [ "UnmodifiableList", "org.apache.commons.collections4.list" ], [ "FixedSizeList", "org.apache.commons.collections4.list" ], [ "TransformedList", "org.apache.commons.collections4.list" ], [ "GrowthList", "org.apache.commons.collections4.list" ], [ "AbstractLinkedList", "org.apache.commons.collections4.list" ], [ "CursorableLinkedList", "org.apache.commons.collections4.list" ], [ "PredicatedList", "org.apache.commons.collections4.list" ], [ "OrderedMap", "org.apache.commons.collections4" ], [ "AbstractQueueDecorator", "org.apache.commons.collections4.queue" ], [ "TransformedQueue", "org.apache.commons.collections4.queue" ], [ "UnmodifiableQueue", "org.apache.commons.collections4.queue" ], [ "CircularFifoQueue", "org.apache.commons.collections4.queue" ], [ "PredicatedQueue", "org.apache.commons.collections4.queue" ], [ "FluentIterable", "org.apache.commons.collections4" ], [ "TransformerUtils", "org.apache.commons.collections4" ], [ "PredicateUtils", "org.apache.commons.collections4" ], [ "ResettableIterator", "org.apache.commons.collections4" ], [ "MultiValuedMap", "org.apache.commons.collections4" ], [ "SetUtils", "org.apache.commons.collections4" ], [ "SortedBidiMap", "org.apache.commons.collections4" ], [ "ArrayStack", "org.apache.commons.collections4" ], [ "Put", "org.apache.commons.collections4" ], [ "OrderedMapIterator", "org.apache.commons.collections4" ], [ "TransformedSet", "org.apache.commons.collections4.set" ], [ "CompositeSet", "org.apache.commons.collections4.set" ], [ "TransformedNavigableSet", "org.apache.commons.collections4.set" ], [ "PredicatedNavigableSet", "org.apache.commons.collections4.set" ], [ "AbstractSetDecorator", "org.apache.commons.collections4.set" ], [ "ListOrderedSet", "org.apache.commons.collections4.set" ], [ "UnmodifiableSet", "org.apache.commons.collections4.set" ], [ "AbstractSerializableSetDecorator", "org.apache.commons.collections4.set" ], [ "MapBackedSet", "org.apache.commons.collections4.set" ], [ "UnmodifiableSortedSet", "org.apache.commons.collections4.set" ], [ "PredicatedSortedSet", "org.apache.commons.collections4.set" ], [ "AbstractSortedSetDecorator", "org.apache.commons.collections4.set" ], [ "PredicatedSet", "org.apache.commons.collections4.set" ], [ "AbstractNavigableSetDecorator", "org.apache.commons.collections4.set" ], [ "UnmodifiableNavigableSet", "org.apache.commons.collections4.set" ], [ "TransformedSortedSet", "org.apache.commons.collections4.set" ], [ "IterableMap", "org.apache.commons.collections4" ], [ "EnumerationUtils", "org.apache.commons.collections4" ], [ "DeleteCommand", "org.apache.commons.collections4.sequence" ], [ "ReplacementsHandler", "org.apache.commons.collections4.sequence" ], [ "InsertCommand", "org.apache.commons.collections4.sequence" ], [ "SequencesComparator", "org.apache.commons.collections4.sequence" ], [ "ReplacementsFinder", "org.apache.commons.collections4.sequence" ], [ "KeepCommand", "org.apache.commons.collections4.sequence" ], [ "EditCommand", "org.apache.commons.collections4.sequence" ], [ "CommandVisitor", "org.apache.commons.collections4.sequence" ], [ "EditScript", "org.apache.commons.collections4.sequence" ], [ "QueueUtils", "org.apache.commons.collections4" ], [ "SetValuedMap", "org.apache.commons.collections4" ], [ "SynchronizedBag", "org.apache.commons.collections4.bag" ], [ "AbstractMapBag", "org.apache.commons.collections4.bag" ], [ "CollectionBag", "org.apache.commons.collections4.bag" ], [ "UnmodifiableBag", "org.apache.commons.collections4.bag" ], [ "PredicatedSortedBag", "org.apache.commons.collections4.bag" ], [ "UnmodifiableSortedBag", "org.apache.commons.collections4.bag" ], [ "HashBag", "org.apache.commons.collections4.bag" ], [ "AbstractBagDecorator", "org.apache.commons.collections4.bag" ], [ "TransformedSortedBag", "org.apache.commons.collections4.bag" ], [ "TreeBag", "org.apache.commons.collections4.bag" ], [ "PredicatedBag", "org.apache.commons.collections4.bag" ], [ "SynchronizedSortedBag", "org.apache.commons.collections4.bag" ], [ "CollectionSortedBag", "org.apache.commons.collections4.bag" ], [ "TransformedBag", "org.apache.commons.collections4.bag" ], [ "AbstractSortedBagDecorator", "org.apache.commons.collections4.bag" ], [ "HashMultiSet", "org.apache.commons.collections4.multiset" ], [ "AbstractMultiSet", "org.apache.commons.collections4.multiset" ], [ "PredicatedMultiSet", "org.apache.commons.collections4.multiset" ], [ "AbstractMultiSetDecorator", "org.apache.commons.collections4.multiset" ], [ "AbstractMapMultiSet", "org.apache.commons.collections4.multiset" ], [ "UnmodifiableMultiSet", "org.apache.commons.collections4.multiset" ], [ "SynchronizedMultiSet", "org.apache.commons.collections4.multiset" ], [ "BagUtils", "org.apache.commons.collections4" ], [ "Unmodifiable", "org.apache.commons.collections4" ], [ "Get", "org.apache.commons.collections4" ], [ "Trie", "org.apache.commons.collections4" ], [ "MultiMap", "org.apache.commons.collections4" ], [ "KeyValue", "org.apache.commons.collections4" ], [ "IteratorChain", "org.apache.commons.collections4.iterators" ], [ "EmptyListIterator", "org.apache.commons.collections4.iterators" ], [ "UnmodifiableOrderedMapIterator", "org.apache.commons.collections4.iterators" ], [ "AbstractListIteratorDecorator", "org.apache.commons.collections4.iterators" ], [ "ZippingIterator", "org.apache.commons.collections4.iterators" ], [ "UnmodifiableIterator", "org.apache.commons.collections4.iterators" ], [ "CollatingIterator", "org.apache.commons.collections4.iterators" ], [ "UniqueFilterIterator", "org.apache.commons.collections4.iterators" ], [ "ReverseListIterator", "org.apache.commons.collections4.iterators" ], [ "BoundedIterator", "org.apache.commons.collections4.iterators" ], [ "AbstractIteratorDecorator", "org.apache.commons.collections4.iterators" ], [ "TransformIterator", "org.apache.commons.collections4.iterators" ], [ "AbstractEmptyIterator", "org.apache.commons.collections4.iterators" ], [ "NodeListIterator", "org.apache.commons.collections4.iterators" ], [ "ArrayListIterator", "org.apache.commons.collections4.iterators" ], [ "LazyIteratorChain", "org.apache.commons.collections4.iterators" ], [ "LoopingListIterator", "org.apache.commons.collections4.iterators" ], [ "PeekingIterator", "org.apache.commons.collections4.iterators" ], [ "ObjectGraphIterator", "org.apache.commons.collections4.iterators" ], [ "ArrayIterator", "org.apache.commons.collections4.iterators" ], [ "PermutationIterator", "org.apache.commons.collections4.iterators" ], [ "SingletonListIterator", "org.apache.commons.collections4.iterators" ], [ "EmptyMapIterator", "org.apache.commons.collections4.iterators" ], [ "ObjectArrayIterator", "org.apache.commons.collections4.iterators" ], [ "EnumerationIterator", "org.apache.commons.collections4.iterators" ], [ "IteratorIterable", "org.apache.commons.collections4.iterators" ], [ "AbstractEmptyMapIterator", "org.apache.commons.collections4.iterators" ], [ "LoopingIterator", "org.apache.commons.collections4.iterators" ], [ "IteratorEnumeration", "org.apache.commons.collections4.iterators" ], [ "SingletonIterator", "org.apache.commons.collections4.iterators" ], [ "ListIteratorWrapper", "org.apache.commons.collections4.iterators" ], [ "SkippingIterator", "org.apache.commons.collections4.iterators" ], [ "EmptyOrderedIterator", "org.apache.commons.collections4.iterators" ], [ "AbstractMapIteratorDecorator", "org.apache.commons.collections4.iterators" ], [ "ObjectArrayListIterator", "org.apache.commons.collections4.iterators" ], [ "UnmodifiableListIterator", "org.apache.commons.collections4.iterators" ], [ "EmptyOrderedMapIterator", "org.apache.commons.collections4.iterators" ], [ "UnmodifiableMapIterator", "org.apache.commons.collections4.iterators" ], [ "EmptyIterator", "org.apache.commons.collections4.iterators" ], [ "EntrySetMapIterator", "org.apache.commons.collections4.iterators" ], [ "PushbackIterator", "org.apache.commons.collections4.iterators" ], [ "FilterIterator", "org.apache.commons.collections4.iterators" ], [ "AbstractUntypedIteratorDecorator", "org.apache.commons.collections4.iterators" ], [ "AbstractOrderedMapIteratorDecorator", "org.apache.commons.collections4.iterators" ], [ "FilterListIterator", "org.apache.commons.collections4.iterators" ], [ "SplitMapUtils", "org.apache.commons.collections4" ], [ "BoundedMap", "org.apache.commons.collections4" ] ],
  "tokensProjectClassesNonPrivateStaticNonVoidMethods" : [ [ "emptyIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> emptyIterator()" ], [ "emptyListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> emptyListIterator()" ], [ "emptyOrderedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> OrderedIterator<E> emptyOrderedIterator()" ], [ "emptyMapIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <K, V> MapIterator<K, V> emptyMapIterator()" ], [ "emptyOrderedMapIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <K, V> OrderedMapIterator<K, V> emptyOrderedMapIterator()" ], [ "singletonIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> singletonIterator(final E object)" ], [ "singletonListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ListIterator<E> singletonListIterator(final E object)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final E... array)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final Object array)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final E[] array, final int start)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final Object array, final int start)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final E[] array, final int start, final int end)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final Object array, final int start, final int end)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final E... array)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final Object array)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final E[] array, final int start)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final Object array, final int start)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final E[] array, final int start, final int end)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final Object array, final int start, final int end)" ], [ "boundedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> BoundedIterator<E> boundedIterator(final Iterator<? extends E> iterator, long max)" ], [ "boundedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> BoundedIterator<E> boundedIterator(final Iterator<? extends E> iterator, long offset, long max)" ], [ "unmodifiableIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> unmodifiableIterator(final Iterator<E> iterator)" ], [ "unmodifiableListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ListIterator<E> unmodifiableListIterator(final ListIterator<E> listIterator)" ], [ "unmodifiableMapIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <K, V> MapIterator<K, V> unmodifiableMapIterator(final MapIterator<K, V> mapIterator)" ], [ "chainedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> chainedIterator(final Iterator<? extends E> iterator1, final Iterator<? extends E> iterator2)" ], [ "chainedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> chainedIterator(final Iterator<? extends E>... iterators)" ], [ "chainedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> chainedIterator(final Collection<Iterator<? extends E>> iterators)" ], [ "collatedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> collatedIterator(final Comparator<? super E> comparator, final Iterator<? extends E> iterator1, final Iterator<? extends E> iterator2)" ], [ "collatedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> collatedIterator(final Comparator<? super E> comparator, final Iterator<? extends E>... iterators)" ], [ "collatedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> collatedIterator(final Comparator<? super E> comparator, final Collection<Iterator<? extends E>> iterators)" ], [ "objectGraphIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> objectGraphIterator(final E root, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <I, O> Iterator<O> transformedIterator(final Iterator<? extends I> iterator, final Transformer<? super I, ? extends O> transform)" ], [ "filteredIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> filteredIterator(final Iterator<? extends E> iterator, final Predicate<? super E> predicate)" ], [ "filteredListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ListIterator<E> filteredListIterator(final ListIterator<? extends E> listIterator, final Predicate<? super E> predicate)" ], [ "loopingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> loopingIterator(final Collection<? extends E> coll)" ], [ "loopingListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> loopingListIterator(final List<E> list)" ], [ "nodeListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static NodeListIterator nodeListIterator(final NodeList nodeList)" ], [ "nodeListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static NodeListIterator nodeListIterator(final Node node)" ], [ "peekingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> peekingIterator(final Iterator<? extends E> iterator)" ], [ "pushbackIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> pushbackIterator(final Iterator<? extends E> iterator)" ], [ "skippingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> SkippingIterator<E> skippingIterator(final Iterator<E> iterator, long offset)" ], [ "zippingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ZippingIterator<E> zippingIterator(final Iterator<? extends E> a, final Iterator<? extends E> b)" ], [ "zippingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ZippingIterator<E> zippingIterator(final Iterator<? extends E> a, final Iterator<? extends E> b, final Iterator<? extends E> c)" ], [ "zippingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ZippingIterator<E> zippingIterator(final Iterator<? extends E>... iterators)" ], [ "asIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> asIterator(final Enumeration<? extends E> enumeration)" ], [ "asIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> asIterator(final Enumeration<? extends E> enumeration, final Collection<? super E> removeCollection)" ], [ "asEnumeration", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Enumeration<E> asEnumeration(final Iterator<? extends E> iterator)" ], [ "asIterable", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterable<E> asIterable(final Iterator<? extends E> iterator)" ], [ "asMultipleUseIterable", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterable<E> asMultipleUseIterable(final Iterator<? extends E> iterator)" ], [ "toListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ListIterator<E> toListIterator(final Iterator<? extends E> iterator)" ], [ "toArray", "org.apache.commons.collections4", "IteratorUtils", "public static Object[] toArray(final Iterator<?> iterator)" ], [ "toArray", "org.apache.commons.collections4", "IteratorUtils", "public static <E> E[] toArray(final Iterator<? extends E> iterator, final Class<E> arrayClass)" ], [ "toList", "org.apache.commons.collections4", "IteratorUtils", "public static <E> List<E> toList(final Iterator<? extends E> iterator)" ], [ "toList", "org.apache.commons.collections4", "IteratorUtils", "public static <E> List<E> toList(final Iterator<? extends E> iterator, final int estimatedSize)" ], [ "getIterator", "org.apache.commons.collections4", "IteratorUtils", "public static Iterator<?> getIterator(final Object obj)" ], [ "forEachButLast", "org.apache.commons.collections4", "IteratorUtils", "public static <E> E forEachButLast(final Iterator<E> iterator, final Closure<? super E> closure)" ], [ "find", "org.apache.commons.collections4", "IteratorUtils", "public static <E> E find(final Iterator<E> iterator, final Predicate<? super E> predicate)" ], [ "indexOf", "org.apache.commons.collections4", "IteratorUtils", "public static <E> int indexOf(final Iterator<E> iterator, final Predicate<? super E> predicate)" ], [ "matchesAny", "org.apache.commons.collections4", "IteratorUtils", "public static <E> boolean matchesAny(final Iterator<E> iterator, final Predicate<? super E> predicate)" ], [ "matchesAll", "org.apache.commons.collections4", "IteratorUtils", "public static <E> boolean matchesAll(final Iterator<E> iterator, final Predicate<? super E> predicate)" ], [ "isEmpty", "org.apache.commons.collections4", "IteratorUtils", "public static boolean isEmpty(final Iterator<?> iterator)" ], [ "contains", "org.apache.commons.collections4", "IteratorUtils", "public static <E> boolean contains(final Iterator<E> iterator, final Object object)" ], [ "get", "org.apache.commons.collections4", "IteratorUtils", "public static <E> E get(final Iterator<E> iterator, final int index)" ], [ "size", "org.apache.commons.collections4", "IteratorUtils", "public static int size(final Iterator<?> iterator)" ], [ "toString", "org.apache.commons.collections4", "IteratorUtils", "public static <E> String toString(final Iterator<E> iterator)" ], [ "toString", "org.apache.commons.collections4", "IteratorUtils", "public static <E> String toString(final Iterator<E> iterator, final Transformer<? super E, String> transformer)" ], [ "toString", "org.apache.commons.collections4", "IteratorUtils", "public static <E> String toString(final Iterator<E> iterator, final Transformer<? super E, String> transformer, final String delimiter, final String prefix, final String suffix)" ], [ "naturalComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E extends Comparable<? super E>> Comparator<E> naturalComparator()" ], [ "chainedComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> Comparator<E> chainedComparator(final Comparator<E>... comparators)" ], [ "chainedComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> Comparator<E> chainedComparator(final Collection<Comparator<E>> comparators)" ], [ "reversedComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> Comparator<E> reversedComparator(final Comparator<E> comparator)" ], [ "booleanComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static Comparator<Boolean> booleanComparator(final boolean trueFirst)" ], [ "nullLowComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> Comparator<E> nullLowComparator(Comparator<E> comparator)" ], [ "nullHighComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> Comparator<E> nullHighComparator(Comparator<E> comparator)" ], [ "transformedComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <I, O> Comparator<I> transformedComparator(Comparator<O> comparator, final Transformer<? super I, ? extends O> transformer)" ], [ "min", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> E min(final E o1, final E o2, Comparator<E> comparator)" ], [ "max", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> E max(final E o1, final E o2, Comparator<E> comparator)" ], [ "unmodifiableBidiMap", "org.apache.commons.collections4.bidimap", "UnmodifiableBidiMap", "public static <K, V> BidiMap<K, V> unmodifiableBidiMap(final BidiMap<? extends K, ? extends V> map)" ], [ "unmodifiableOrderedBidiMap", "org.apache.commons.collections4.bidimap", "UnmodifiableOrderedBidiMap", "public static <K, V> OrderedBidiMap<K, V> unmodifiableOrderedBidiMap(final OrderedBidiMap<? extends K, ? extends V> map)" ], [ "unmodifiableSortedBidiMap", "org.apache.commons.collections4.bidimap", "UnmodifiableSortedBidiMap", "public static <K, V> SortedBidiMap<K, V> unmodifiableSortedBidiMap(final SortedBidiMap<K, ? extends V> map)" ], [ "emptyMultiValuedMap", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> MultiValuedMap<K, V> emptyMultiValuedMap()" ], [ "emptyIfNull", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> MultiValuedMap<K, V> emptyIfNull(final MultiValuedMap<K, V> map)" ], [ "isEmpty", "org.apache.commons.collections4", "MultiMapUtils", "public static boolean isEmpty(final MultiValuedMap<?, ?> map)" ], [ "getCollection", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> Collection<V> getCollection(final MultiValuedMap<K, V> map, final K key)" ], [ "getValuesAsList", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> List<V> getValuesAsList(final MultiValuedMap<K, V> map, final K key)" ], [ "getValuesAsSet", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> Set<V> getValuesAsSet(final MultiValuedMap<K, V> map, final K key)" ], [ "getValuesAsBag", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> Bag<V> getValuesAsBag(final MultiValuedMap<K, V> map, final K key)" ], [ "newListValuedHashMap", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> ListValuedMap<K, V> newListValuedHashMap()" ], [ "newSetValuedHashMap", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> SetValuedMap<K, V> newSetValuedHashMap()" ], [ "unmodifiableMultiValuedMap", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> MultiValuedMap<K, V> unmodifiableMultiValuedMap(final MultiValuedMap<? extends K, ? extends V> map)" ], [ "transformedMultiValuedMap", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> MultiValuedMap<K, V> transformedMultiValuedMap(final MultiValuedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "unmodifiableBoundedCollection", "org.apache.commons.collections4.collection", "UnmodifiableBoundedCollection", "public static <E> BoundedCollection<E> unmodifiableBoundedCollection(final BoundedCollection<? extends E> coll)" ], [ "unmodifiableBoundedCollection", "org.apache.commons.collections4.collection", "UnmodifiableBoundedCollection", "public static <E> BoundedCollection<E> unmodifiableBoundedCollection(Collection<? extends E> coll)" ], [ "transformingCollection", "org.apache.commons.collections4.collection", "TransformedCollection", "public static <E> TransformedCollection<E> transformingCollection(final Collection<E> coll, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedCollection", "org.apache.commons.collections4.collection", "TransformedCollection", "public static <E> TransformedCollection<E> transformedCollection(final Collection<E> collection, final Transformer<? super E, ? extends E> transformer)" ], [ "builder", "org.apache.commons.collections4.collection", "PredicatedCollection", "public static <E> Builder<E> builder(final Predicate<? super E> predicate)" ], [ "notNullBuilder", "org.apache.commons.collections4.collection", "PredicatedCollection", "public static <E> Builder<E> notNullBuilder()" ], [ "predicatedCollection", "org.apache.commons.collections4.collection", "PredicatedCollection", "public static <T> PredicatedCollection<T> predicatedCollection(final Collection<T> coll, final Predicate<? super T> predicate)" ], [ "uniqueIndexedCollection", "org.apache.commons.collections4.collection", "IndexedCollection", "public static <K, C> IndexedCollection<K, C> uniqueIndexedCollection(final Collection<C> coll, final Transformer<C, K> keyTransformer)" ], [ "nonUniqueIndexedCollection", "org.apache.commons.collections4.collection", "IndexedCollection", "public static <K, C> IndexedCollection<K, C> nonUniqueIndexedCollection(final Collection<C> coll, final Transformer<C, K> keyTransformer)" ], [ "synchronizedCollection", "org.apache.commons.collections4.collection", "SynchronizedCollection", "public static <T> SynchronizedCollection<T> synchronizedCollection(final Collection<T> coll)" ], [ "unmodifiableCollection", "org.apache.commons.collections4.collection", "UnmodifiableCollection", "public static <T> Collection<T> unmodifiableCollection(final Collection<? extends T> coll)" ], [ "exceptionFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> exceptionFactory()" ], [ "nullFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> nullFactory()" ], [ "constantFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> constantFactory(final T constantToReturn)" ], [ "prototypeFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> prototypeFactory(final T prototype)" ], [ "instantiateFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> instantiateFactory(final Class<T> classToInstantiate)" ], [ "instantiateFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> instantiateFactory(final Class<T> classToInstantiate, final Class<?>[] paramTypes, final Object[] args)" ], [ "emptyIfNull", "org.apache.commons.collections4", "ListUtils", "public static <T> List<T> emptyIfNull(final List<T> list)" ], [ "defaultIfNull", "org.apache.commons.collections4", "ListUtils", "public static <T> List<T> defaultIfNull(final List<T> list, final List<T> defaultList)" ], [ "intersection", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> intersection(final List<? extends E> list1, final List<? extends E> list2)" ], [ "subtract", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> subtract(final List<E> list1, final List<? extends E> list2)" ], [ "sum", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> sum(final List<? extends E> list1, final List<? extends E> list2)" ], [ "union", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> union(final List<? extends E> list1, final List<? extends E> list2)" ], [ "select", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> select(final Collection<? extends E> inputCollection, final Predicate<? super E> predicate)" ], [ "selectRejected", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> selectRejected(final Collection<? extends E> inputCollection, final Predicate<? super E> predicate)" ], [ "isEqualList", "org.apache.commons.collections4", "ListUtils", "public static boolean isEqualList(final Collection<?> list1, final Collection<?> list2)" ], [ "hashCodeForList", "org.apache.commons.collections4", "ListUtils", "public static int hashCodeForList(final Collection<?> list)" ], [ "retainAll", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> retainAll(final Collection<E> collection, final Collection<?> retain)" ], [ "removeAll", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> removeAll(final Collection<E> collection, final Collection<?> remove)" ], [ "synchronizedList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> synchronizedList(final List<E> list)" ], [ "unmodifiableList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> unmodifiableList(final List<? extends E> list)" ], [ "predicatedList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> predicatedList(final List<E> list, final Predicate<E> predicate)" ], [ "transformedList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> transformedList(final List<E> list, final Transformer<? super E, ? extends E> transformer)" ], [ "lazyList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> lazyList(final List<E> list, final Factory<? extends E> factory)" ], [ "fixedSizeList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> fixedSizeList(final List<E> list)" ], [ "indexOf", "org.apache.commons.collections4", "ListUtils", "public static <E> int indexOf(final List<E> list, final Predicate<E> predicate)" ], [ "longestCommonSubsequence", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> longestCommonSubsequence(final List<E> a, final List<E> b)" ], [ "longestCommonSubsequence", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> longestCommonSubsequence(final List<E> a, final List<E> b, final Equator<? super E> equator)" ], [ "longestCommonSubsequence", "org.apache.commons.collections4", "ListUtils", "public static String longestCommonSubsequence(final CharSequence a, final CharSequence b)" ], [ "partition", "org.apache.commons.collections4", "ListUtils", "public static <T> List<List<T>> partition(final List<T> list, final int size)" ], [ "getObject", "org.apache.commons.collections4", "MapUtils", "public static <K, V> V getObject(final Map<? super K, V> map, final K key)" ], [ "getString", "org.apache.commons.collections4", "MapUtils", "public static <K> String getString(final Map<? super K, ?> map, final K key)" ], [ "getBoolean", "org.apache.commons.collections4", "MapUtils", "public static <K> Boolean getBoolean(final Map<? super K, ?> map, final K key)" ], [ "getNumber", "org.apache.commons.collections4", "MapUtils", "public static <K> Number getNumber(final Map<? super K, ?> map, final K key)" ], [ "getByte", "org.apache.commons.collections4", "MapUtils", "public static <K> Byte getByte(final Map<? super K, ?> map, final K key)" ], [ "getShort", "org.apache.commons.collections4", "MapUtils", "public static <K> Short getShort(final Map<? super K, ?> map, final K key)" ], [ "getInteger", "org.apache.commons.collections4", "MapUtils", "public static <K> Integer getInteger(final Map<? super K, ?> map, final K key)" ], [ "getLong", "org.apache.commons.collections4", "MapUtils", "public static <K> Long getLong(final Map<? super K, ?> map, final K key)" ], [ "getFloat", "org.apache.commons.collections4", "MapUtils", "public static <K> Float getFloat(final Map<? super K, ?> map, final K key)" ], [ "getDouble", "org.apache.commons.collections4", "MapUtils", "public static <K> Double getDouble(final Map<? super K, ?> map, final K key)" ], [ "getMap", "org.apache.commons.collections4", "MapUtils", "public static <K> Map<?, ?> getMap(final Map<? super K, ?> map, final K key)" ], [ "getObject", "org.apache.commons.collections4", "MapUtils", "public static <K, V> V getObject(final Map<K, V> map, final K key, final V defaultValue)" ], [ "getString", "org.apache.commons.collections4", "MapUtils", "public static <K> String getString(final Map<? super K, ?> map, final K key, final String defaultValue)" ], [ "getBoolean", "org.apache.commons.collections4", "MapUtils", "public static <K> Boolean getBoolean(final Map<? super K, ?> map, final K key, final Boolean defaultValue)" ], [ "getNumber", "org.apache.commons.collections4", "MapUtils", "public static <K> Number getNumber(final Map<? super K, ?> map, final K key, final Number defaultValue)" ], [ "getByte", "org.apache.commons.collections4", "MapUtils", "public static <K> Byte getByte(final Map<? super K, ?> map, final K key, final Byte defaultValue)" ], [ "getShort", "org.apache.commons.collections4", "MapUtils", "public static <K> Short getShort(final Map<? super K, ?> map, final K key, final Short defaultValue)" ], [ "getInteger", "org.apache.commons.collections4", "MapUtils", "public static <K> Integer getInteger(final Map<? super K, ?> map, final K key, final Integer defaultValue)" ], [ "getLong", "org.apache.commons.collections4", "MapUtils", "public static <K> Long getLong(final Map<? super K, ?> map, final K key, final Long defaultValue)" ], [ "getFloat", "org.apache.commons.collections4", "MapUtils", "public static <K> Float getFloat(final Map<? super K, ?> map, final K key, final Float defaultValue)" ], [ "getDouble", "org.apache.commons.collections4", "MapUtils", "public static <K> Double getDouble(final Map<? super K, ?> map, final K key, final Double defaultValue)" ], [ "getMap", "org.apache.commons.collections4", "MapUtils", "public static <K> Map<?, ?> getMap(final Map<? super K, ?> map, final K key, final Map<?, ?> defaultValue)" ], [ "getBooleanValue", "org.apache.commons.collections4", "MapUtils", "public static <K> boolean getBooleanValue(final Map<? super K, ?> map, final K key)" ], [ "getByteValue", "org.apache.commons.collections4", "MapUtils", "public static <K> byte getByteValue(final Map<? super K, ?> map, final K key)" ], [ "getShortValue", "org.apache.commons.collections4", "MapUtils", "public static <K> short getShortValue(final Map<? super K, ?> map, final K key)" ], [ "getIntValue", "org.apache.commons.collections4", "MapUtils", "public static <K> int getIntValue(final Map<? super K, ?> map, final K key)" ], [ "getLongValue", "org.apache.commons.collections4", "MapUtils", "public static <K> long getLongValue(final Map<? super K, ?> map, final K key)" ], [ "getFloatValue", "org.apache.commons.collections4", "MapUtils", "public static <K> float getFloatValue(final Map<? super K, ?> map, final K key)" ], [ "getDoubleValue", "org.apache.commons.collections4", "MapUtils", "public static <K> double getDoubleValue(final Map<? super K, ?> map, final K key)" ], [ "getBooleanValue", "org.apache.commons.collections4", "MapUtils", "public static <K> boolean getBooleanValue(final Map<? super K, ?> map, final K key, final boolean defaultValue)" ], [ "getByteValue", "org.apache.commons.collections4", "MapUtils", "public static <K> byte getByteValue(final Map<? super K, ?> map, final K key, final byte defaultValue)" ], [ "getShortValue", "org.apache.commons.collections4", "MapUtils", "public static <K> short getShortValue(final Map<? super K, ?> map, final K key, final short defaultValue)" ], [ "getIntValue", "org.apache.commons.collections4", "MapUtils", "public static <K> int getIntValue(final Map<? super K, ?> map, final K key, final int defaultValue)" ], [ "getLongValue", "org.apache.commons.collections4", "MapUtils", "public static <K> long getLongValue(final Map<? super K, ?> map, final K key, final long defaultValue)" ], [ "getFloatValue", "org.apache.commons.collections4", "MapUtils", "public static <K> float getFloatValue(final Map<? super K, ?> map, final K key, final float defaultValue)" ], [ "getDoubleValue", "org.apache.commons.collections4", "MapUtils", "public static <K> double getDoubleValue(final Map<? super K, ?> map, final K key, final double defaultValue)" ], [ "toProperties", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Properties toProperties(final Map<K, V> map)" ], [ "toMap", "org.apache.commons.collections4", "MapUtils", "public static Map<String, Object> toMap(final ResourceBundle resourceBundle)" ], [ "invertMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Map<V, K> invertMap(final Map<K, V> map)" ], [ "putAll", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Map<K, V> putAll(final Map<K, V> map, final Object[] array)" ], [ "emptyIfNull", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Map<K, V> emptyIfNull(final Map<K, V> map)" ], [ "isEmpty", "org.apache.commons.collections4", "MapUtils", "public static boolean isEmpty(final Map<?, ?> map)" ], [ "isNotEmpty", "org.apache.commons.collections4", "MapUtils", "public static boolean isNotEmpty(final Map<?, ?> map)" ], [ "synchronizedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Map<K, V> synchronizedMap(final Map<K, V> map)" ], [ "unmodifiableMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Map<K, V> unmodifiableMap(final Map<? extends K, ? extends V> map)" ], [ "predicatedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> predicatedMap(final Map<K, V> map, final Predicate<? super K> keyPred, final Predicate<? super V> valuePred)" ], [ "transformedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> transformedMap(final Map<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "fixedSizeMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> fixedSizeMap(final Map<K, V> map)" ], [ "lazyMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> lazyMap(final Map<K, V> map, final Factory<? extends V> factory)" ], [ "lazyMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> lazyMap(final Map<K, V> map, final Transformer<? super K, ? extends V> transformerFactory)" ], [ "orderedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> OrderedMap<K, V> orderedMap(final Map<K, V> map)" ], [ "multiValueMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> MultiValueMap<K, V> multiValueMap(final Map<K, ? super Collection<V>> map)" ], [ "multiValueMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V, C extends Collection<V>> MultiValueMap<K, V> multiValueMap(final Map<K, C> map, final Class<C> collectionClass)" ], [ "multiValueMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V, C extends Collection<V>> MultiValueMap<K, V> multiValueMap(final Map<K, C> map, final Factory<C> collectionFactory)" ], [ "synchronizedSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> synchronizedSortedMap(final SortedMap<K, V> map)" ], [ "unmodifiableSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> unmodifiableSortedMap(final SortedMap<K, ? extends V> map)" ], [ "predicatedSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> predicatedSortedMap(final SortedMap<K, V> map, final Predicate<? super K> keyPred, final Predicate<? super V> valuePred)" ], [ "transformedSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> transformedSortedMap(final SortedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "fixedSizeSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> fixedSizeSortedMap(final SortedMap<K, V> map)" ], [ "lazySortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> lazySortedMap(final SortedMap<K, V> map, final Factory<? extends V> factory)" ], [ "lazySortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> lazySortedMap(final SortedMap<K, V> map, final Transformer<? super K, ? extends V> transformerFactory)" ], [ "iterableMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> iterableMap(final Map<K, V> map)" ], [ "iterableSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableSortedMap<K, V> iterableSortedMap(final SortedMap<K, V> sortedMap)" ], [ "defaultEquator", "org.apache.commons.collections4.functors", "DefaultEquator", "public static <T> DefaultEquator<T> defaultEquator()" ], [ "stringValueTransformer", "org.apache.commons.collections4.functors", "StringValueTransformer", "public static <T> Transformer<T, String> stringValueTransformer()" ], [ "ifTransformer", "org.apache.commons.collections4.functors", "IfTransformer", "public static <I, O> Transformer<I, O> ifTransformer(final Predicate<? super I> predicate, final Transformer<? super I, ? extends O> trueTransformer, final Transformer<? super I, ? extends O> falseTransformer)" ], [ "ifTransformer", "org.apache.commons.collections4.functors", "IfTransformer", "public static <T> Transformer<T, T> ifTransformer(final Predicate<? super T> predicate, final Transformer<? super T, ? extends T> trueTransformer)" ], [ "identityPredicate", "org.apache.commons.collections4.functors", "IdentityPredicate", "public static <T> Predicate<T> identityPredicate(final T object)" ], [ "exceptionClosure", "org.apache.commons.collections4.functors", "ExceptionClosure", "public static <E> Closure<E> exceptionClosure()" ], [ "nopClosure", "org.apache.commons.collections4.functors", "NOPClosure", "public static <E> Closure<E> nopClosure()" ], [ "closureTransformer", "org.apache.commons.collections4.functors", "ClosureTransformer", "public static <T> Transformer<T, T> closureTransformer(final Closure<? super T> closure)" ], [ "copy", "org.apache.commons.collections4.functors", "FunctorUtils", "static <T> Predicate<T>[] copy(final Predicate<? super T>... predicates)" ], [ "coerce", "org.apache.commons.collections4.functors", "FunctorUtils", "static <T> Predicate<T> coerce(final Predicate<? super T> predicate)" ], [ "validate", "org.apache.commons.collections4.functors", "FunctorUtils", "static <T> Predicate<? super T>[] validate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "copy", "org.apache.commons.collections4.functors", "FunctorUtils", "static <E> Closure<E>[] copy(final Closure<? super E>... closures)" ], [ "coerce", "org.apache.commons.collections4.functors", "FunctorUtils", "static <T> Closure<T> coerce(final Closure<? super T> closure)" ], [ "copy", "org.apache.commons.collections4.functors", "FunctorUtils", "static <I, O> Transformer<I, O>[] copy(final Transformer<? super I, ? extends O>... transformers)" ], [ "coerce", "org.apache.commons.collections4.functors", "FunctorUtils", "static <I, O> Transformer<I, O> coerce(final Transformer<? super I, ? extends O> transformer)" ], [ "transformerPredicate", "org.apache.commons.collections4.functors", "TransformerPredicate", "public static <T> Predicate<T> transformerPredicate(final Transformer<? super T, Boolean> transformer)" ], [ "nullPredicate", "org.apache.commons.collections4.functors", "NullPredicate", "public static <T> Predicate<T> nullPredicate()" ], [ "nullTransformer", "org.apache.commons.collections4.functors", "ConstantTransformer", "public static <I, O> Transformer<I, O> nullTransformer()" ], [ "constantTransformer", "org.apache.commons.collections4.functors", "ConstantTransformer", "public static <I, O> Transformer<I, O> constantTransformer(final O constantToReturn)" ], [ "predicateTransformer", "org.apache.commons.collections4.functors", "PredicateTransformer", "public static <T> Transformer<T, Boolean> predicateTransformer(final Predicate<? super T> predicate)" ], [ "whileClosure", "org.apache.commons.collections4.functors", "WhileClosure", "public static <E> Closure<E> whileClosure(final Predicate<? super E> predicate, final Closure<? super E> closure, final boolean doLoop)" ], [ "forClosure", "org.apache.commons.collections4.functors", "ForClosure", "public static <E> Closure<E> forClosure(final int count, final Closure<? super E> closure)" ], [ "nullIsTruePredicate", "org.apache.commons.collections4.functors", "NullIsTruePredicate", "public static <T> Predicate<T> nullIsTruePredicate(final Predicate<? super T> predicate)" ], [ "transformedPredicate", "org.apache.commons.collections4.functors", "TransformedPredicate", "public static <T> Predicate<T> transformedPredicate(final Transformer<? super T, ? extends T> transformer, final Predicate<? super T> predicate)" ], [ "nonePredicate", "org.apache.commons.collections4.functors", "NonePredicate", "public static <T> Predicate<T> nonePredicate(final Predicate<? super T>... predicates)" ], [ "nonePredicate", "org.apache.commons.collections4.functors", "NonePredicate", "public static <T> Predicate<T> nonePredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "exceptionTransformer", "org.apache.commons.collections4.functors", "ExceptionTransformer", "public static <I, O> Transformer<I, O> exceptionTransformer()" ], [ "switchTransformer", "org.apache.commons.collections4.functors", "SwitchTransformer", "public static <I, O> Transformer<I, O> switchTransformer(final Predicate<? super I>[] predicates, final Transformer<? super I, ? extends O>[] transformers, final Transformer<? super I, ? extends O> defaultTransformer)" ], [ "switchTransformer", "org.apache.commons.collections4.functors", "SwitchTransformer", "public static <I, O> Transformer<I, O> switchTransformer(final Map<? extends Predicate<? super I>, ? extends Transformer<? super I, ? extends O>> map)" ], [ "transformerClosure", "org.apache.commons.collections4.functors", "TransformerClosure", "public static <E> Closure<E> transformerClosure(final Transformer<? super E, ?> transformer)" ], [ "orPredicate", "org.apache.commons.collections4.functors", "OrPredicate", "public static <T> Predicate<T> orPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "nopTransformer", "org.apache.commons.collections4.functors", "NOPTransformer", "public static <T> Transformer<T, T> nopTransformer()" ], [ "mapTransformer", "org.apache.commons.collections4.functors", "MapTransformer", "public static <I, O> Transformer<I, O> mapTransformer(final Map<? super I, ? extends O> map)" ], [ "exceptionFactory", "org.apache.commons.collections4.functors", "ExceptionFactory", "public static <T> Factory<T> exceptionFactory()" ], [ "chainedClosure", "org.apache.commons.collections4.functors", "ChainedClosure", "public static <E> Closure<E> chainedClosure(final Closure<? super E>... closures)" ], [ "chainedClosure", "org.apache.commons.collections4.functors", "ChainedClosure", "public static <E> Closure<E> chainedClosure(final Collection<? extends Closure<? super E>> closures)" ], [ "andPredicate", "org.apache.commons.collections4.functors", "AndPredicate", "public static <T> Predicate<T> andPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "prototypeFactory", "org.apache.commons.collections4.functors", "PrototypeFactory", "public static <T> Factory<T> prototypeFactory(final T prototype)" ], [ "exceptionPredicate", "org.apache.commons.collections4.functors", "ExceptionPredicate", "public static <T> Predicate<T> exceptionPredicate()" ], [ "instanceOfPredicate", "org.apache.commons.collections4.functors", "InstanceofPredicate", "public static Predicate<Object> instanceOfPredicate(final Class<?> type)" ], [ "invokerTransformer", "org.apache.commons.collections4.functors", "InvokerTransformer", "public static <I, O> Transformer<I, O> invokerTransformer(final String methodName)" ], [ "invokerTransformer", "org.apache.commons.collections4.functors", "InvokerTransformer", "public static <I, O> Transformer<I, O> invokerTransformer(final String methodName, final Class<?>[] paramTypes, final Object[] args)" ], [ "falsePredicate", "org.apache.commons.collections4.functors", "FalsePredicate", "public static <T> Predicate<T> falsePredicate()" ], [ "cloneTransformer", "org.apache.commons.collections4.functors", "CloneTransformer", "public static <T> Transformer<T, T> cloneTransformer()" ], [ "notPredicate", "org.apache.commons.collections4.functors", "NotPredicate", "public static <T> Predicate<T> notPredicate(final Predicate<? super T> predicate)" ], [ "constantFactory", "org.apache.commons.collections4.functors", "ConstantFactory", "public static <T> Factory<T> constantFactory(final T constantToReturn)" ], [ "chainedTransformer", "org.apache.commons.collections4.functors", "ChainedTransformer", "public static <T> Transformer<T, T> chainedTransformer(final Transformer<? super T, ? extends T>... transformers)" ], [ "chainedTransformer", "org.apache.commons.collections4.functors", "ChainedTransformer", "public static <T> Transformer<T, T> chainedTransformer(final Collection<? extends Transformer<? super T, ? extends T>> transformers)" ], [ "comparatorPredicate", "org.apache.commons.collections4.functors", "ComparatorPredicate", "public static <T> Predicate<T> comparatorPredicate(final T object, final Comparator<T> comparator)" ], [ "comparatorPredicate", "org.apache.commons.collections4.functors", "ComparatorPredicate", "public static <T> Predicate<T> comparatorPredicate(final T object, final Comparator<T> comparator, final Criterion criterion)" ], [ "allPredicate", "org.apache.commons.collections4.functors", "AllPredicate", "public static <T> Predicate<T> allPredicate(final Predicate<? super T>... predicates)" ], [ "allPredicate", "org.apache.commons.collections4.functors", "AllPredicate", "public static <T> Predicate<T> allPredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "nullIsFalsePredicate", "org.apache.commons.collections4.functors", "NullIsFalsePredicate", "public static <T> Predicate<T> nullIsFalsePredicate(final Predicate<? super T> predicate)" ], [ "nullIsExceptionPredicate", "org.apache.commons.collections4.functors", "NullIsExceptionPredicate", "public static <T> Predicate<T> nullIsExceptionPredicate(final Predicate<? super T> predicate)" ], [ "anyPredicate", "org.apache.commons.collections4.functors", "AnyPredicate", "public static <T> Predicate<T> anyPredicate(final Predicate<? super T>... predicates)" ], [ "anyPredicate", "org.apache.commons.collections4.functors", "AnyPredicate", "public static <T> Predicate<T> anyPredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "truePredicate", "org.apache.commons.collections4.functors", "TruePredicate", "public static <T> Predicate<T> truePredicate()" ], [ "factoryTransformer", "org.apache.commons.collections4.functors", "FactoryTransformer", "public static <I, O> Transformer<I, O> factoryTransformer(final Factory<? extends O> factory)" ], [ "notNullPredicate", "org.apache.commons.collections4.functors", "NotNullPredicate", "public static <T> Predicate<T> notNullPredicate()" ], [ "switchClosure", "org.apache.commons.collections4.functors", "SwitchClosure", "public static <E> Closure<E> switchClosure(final Predicate<? super E>[] predicates, final Closure<? super E>[] closures, final Closure<? super E> defaultClosure)" ], [ "switchClosure", "org.apache.commons.collections4.functors", "SwitchClosure", "public static <E> Closure<E> switchClosure(final Map<Predicate<E>, Closure<E>> predicatesAndClosures)" ], [ "uniquePredicate", "org.apache.commons.collections4.functors", "UniquePredicate", "public static <T> Predicate<T> uniquePredicate()" ], [ "instantiateTransformer", "org.apache.commons.collections4.functors", "InstantiateTransformer", "public static <T> Transformer<Class<? extends T>, T> instantiateTransformer()" ], [ "instantiateTransformer", "org.apache.commons.collections4.functors", "InstantiateTransformer", "public static <T> Transformer<Class<? extends T>, T> instantiateTransformer(final Class<?>[] paramTypes, final Object[] args)" ], [ "onePredicate", "org.apache.commons.collections4.functors", "OnePredicate", "public static <T> Predicate<T> onePredicate(final Predicate<? super T>... predicates)" ], [ "onePredicate", "org.apache.commons.collections4.functors", "OnePredicate", "public static <T> Predicate<T> onePredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "equalPredicate", "org.apache.commons.collections4.functors", "EqualPredicate", "public static <T> Predicate<T> equalPredicate(final T object)" ], [ "equalPredicate", "org.apache.commons.collections4.functors", "EqualPredicate", "public static <T> Predicate<T> equalPredicate(final T object, final Equator<T> equator)" ], [ "instantiateFactory", "org.apache.commons.collections4.functors", "InstantiateFactory", "public static <T> Factory<T> instantiateFactory(final Class<T> classToInstantiate, final Class<?>[] paramTypes, final Object[] args)" ], [ "ifClosure", "org.apache.commons.collections4.functors", "IfClosure", "public static <E> Closure<E> ifClosure(final Predicate<? super E> predicate, final Closure<? super E> trueClosure)" ], [ "ifClosure", "org.apache.commons.collections4.functors", "IfClosure", "public static <E> Closure<E> ifClosure(final Predicate<? super E> predicate, final Closure<? super E> trueClosure, final Closure<? super E> falseClosure)" ], [ "getTrueFirstComparator", "org.apache.commons.collections4.comparators", "BooleanComparator", "public static BooleanComparator getTrueFirstComparator()" ], [ "getFalseFirstComparator", "org.apache.commons.collections4.comparators", "BooleanComparator", "public static BooleanComparator getFalseFirstComparator()" ], [ "booleanComparator", "org.apache.commons.collections4.comparators", "BooleanComparator", "public static BooleanComparator booleanComparator(final boolean trueFirst)" ], [ "comparableComparator", "org.apache.commons.collections4.comparators", "ComparableComparator", "public static <E extends Comparable<? super E>> ComparableComparator<E> comparableComparator()" ], [ "emptyCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <T> Collection<T> emptyCollection()" ], [ "emptyIfNull", "org.apache.commons.collections4", "CollectionUtils", "public static <T> Collection<T> emptyIfNull(final Collection<T> collection)" ], [ "union", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> union(final Iterable<? extends O> a, final Iterable<? extends O> b)" ], [ "intersection", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> intersection(final Iterable<? extends O> a, final Iterable<? extends O> b)" ], [ "disjunction", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> disjunction(final Iterable<? extends O> a, final Iterable<? extends O> b)" ], [ "subtract", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> subtract(final Iterable<? extends O> a, final Iterable<? extends O> b)" ], [ "subtract", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> subtract(final Iterable<? extends O> a, final Iterable<? extends O> b, final Predicate<O> p)" ], [ "containsAll", "org.apache.commons.collections4", "CollectionUtils", "public static boolean containsAll(final Collection<?> coll1, final Collection<?> coll2)" ], [ "containsAny", "org.apache.commons.collections4", "CollectionUtils", "public static boolean containsAny(final Collection<?> coll1, final Collection<?> coll2)" ], [ "getCardinalityMap", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Map<O, Integer> getCardinalityMap(final Iterable<? extends O> coll)" ], [ "isSubCollection", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isSubCollection(final Collection<?> a, final Collection<?> b)" ], [ "isProperSubCollection", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isProperSubCollection(final Collection<?> a, final Collection<?> b)" ], [ "isEqualCollection", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isEqualCollection(final Collection<?> a, final Collection<?> b)" ], [ "isEqualCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <E> boolean isEqualCollection(final Collection<? extends E> a, final Collection<? extends E> b, final Equator<? super E> equator)" ], [ "cardinality", "org.apache.commons.collections4", "CollectionUtils", "public static <O> int cardinality(final O obj, final Iterable<? super O> coll)" ], [ "find", "org.apache.commons.collections4", "CollectionUtils", "public static <T> T find(final Iterable<T> collection, final Predicate<? super T> predicate)" ], [ "forAllDo", "org.apache.commons.collections4", "CollectionUtils", "public static <T, C extends Closure<? super T>> C forAllDo(final Iterable<T> collection, final C closure)" ], [ "forAllDo", "org.apache.commons.collections4", "CollectionUtils", "public static <T, C extends Closure<? super T>> C forAllDo(final Iterator<T> iterator, final C closure)" ], [ "forAllButLastDo", "org.apache.commons.collections4", "CollectionUtils", "public static <T, C extends Closure<? super T>> T forAllButLastDo(final Iterable<T> collection, final C closure)" ], [ "forAllButLastDo", "org.apache.commons.collections4", "CollectionUtils", "public static <T, C extends Closure<? super T>> T forAllButLastDo(final Iterator<T> iterator, final C closure)" ], [ "filter", "org.apache.commons.collections4", "CollectionUtils", "public static <T> boolean filter(final Iterable<T> collection, final Predicate<? super T> predicate)" ], [ "filterInverse", "org.apache.commons.collections4", "CollectionUtils", "public static <T> boolean filterInverse(final Iterable<T> collection, final Predicate<? super T> predicate)" ], [ "countMatches", "org.apache.commons.collections4", "CollectionUtils", "public static <C> int countMatches(final Iterable<C> input, final Predicate<? super C> predicate)" ], [ "exists", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean exists(final Iterable<C> input, final Predicate<? super C> predicate)" ], [ "matchesAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean matchesAll(final Iterable<C> input, final Predicate<? super C> predicate)" ], [ "select", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> select(final Iterable<? extends O> inputCollection, final Predicate<? super O> predicate)" ], [ "select", "org.apache.commons.collections4", "CollectionUtils", "public static <O, R extends Collection<? super O>> R select(final Iterable<? extends O> inputCollection, final Predicate<? super O> predicate, final R outputCollection)" ], [ "select", "org.apache.commons.collections4", "CollectionUtils", "public static <O, R extends Collection<? super O>> R select(final Iterable<? extends O> inputCollection, final Predicate<? super O> predicate, R outputCollection, R rejectedCollection)" ], [ "selectRejected", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> selectRejected(final Iterable<? extends O> inputCollection, final Predicate<? super O> predicate)" ], [ "selectRejected", "org.apache.commons.collections4", "CollectionUtils", "public static <O, R extends Collection<? super O>> R selectRejected(final Iterable<? extends O> inputCollection, final Predicate<? super O> predicate, final R outputCollection)" ], [ "collect", "org.apache.commons.collections4", "CollectionUtils", "public static <I, O> Collection<O> collect(final Iterable<I> inputCollection, final Transformer<? super I, ? extends O> transformer)" ], [ "collect", "org.apache.commons.collections4", "CollectionUtils", "public static <I, O> Collection<O> collect(final Iterator<I> inputIterator, final Transformer<? super I, ? extends O> transformer)" ], [ "collect", "org.apache.commons.collections4", "CollectionUtils", "public static <I, O, R extends Collection<? super O>> R collect(final Iterable<? extends I> inputCollection, final Transformer<? super I, ? extends O> transformer, final R outputCollection)" ], [ "collect", "org.apache.commons.collections4", "CollectionUtils", "public static <I, O, R extends Collection<? super O>> R collect(final Iterator<? extends I> inputIterator, final Transformer<? super I, ? extends O> transformer, final R outputCollection)" ], [ "addIgnoreNull", "org.apache.commons.collections4", "CollectionUtils", "public static <T> boolean addIgnoreNull(final Collection<T> collection, final T object)" ], [ "addAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean addAll(final Collection<C> collection, final Iterable<? extends C> iterable)" ], [ "addAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean addAll(final Collection<C> collection, final Iterator<? extends C> iterator)" ], [ "addAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean addAll(final Collection<C> collection, final Enumeration<? extends C> enumeration)" ], [ "addAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean addAll(final Collection<C> collection, final C[] elements)" ], [ "get", "org.apache.commons.collections4", "CollectionUtils", "public static <T> T get(final Iterator<T> iterator, final int index)" ], [ "get", "org.apache.commons.collections4", "CollectionUtils", "public static <T> T get(final Iterable<T> iterable, final int index)" ], [ "get", "org.apache.commons.collections4", "CollectionUtils", "public static Object get(final Object object, final int index)" ], [ "get", "org.apache.commons.collections4", "CollectionUtils", "public static <K, V> Map.Entry<K, V> get(final Map<K, V> map, final int index)" ], [ "size", "org.apache.commons.collections4", "CollectionUtils", "public static int size(final Object object)" ], [ "sizeIsEmpty", "org.apache.commons.collections4", "CollectionUtils", "public static boolean sizeIsEmpty(final Object object)" ], [ "isEmpty", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isEmpty(final Collection<?> coll)" ], [ "isNotEmpty", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isNotEmpty(final Collection<?> coll)" ], [ "isFull", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isFull(final Collection<? extends Object> coll)" ], [ "maxSize", "org.apache.commons.collections4", "CollectionUtils", "public static int maxSize(final Collection<? extends Object> coll)" ], [ "collate", "org.apache.commons.collections4", "CollectionUtils", "public static <O extends Comparable<? super O>> List<O> collate(Iterable<? extends O> a, Iterable<? extends O> b)" ], [ "collate", "org.apache.commons.collections4", "CollectionUtils", "public static <O extends Comparable<? super O>> List<O> collate(final Iterable<? extends O> a, final Iterable<? extends O> b, final boolean includeDuplicates)" ], [ "collate", "org.apache.commons.collections4", "CollectionUtils", "public static <O> List<O> collate(final Iterable<? extends O> a, final Iterable<? extends O> b, final Comparator<? super O> c)" ], [ "collate", "org.apache.commons.collections4", "CollectionUtils", "public static <O> List<O> collate(final Iterable<? extends O> a, final Iterable<? extends O> b, final Comparator<? super O> c, final boolean includeDuplicates)" ], [ "permutations", "org.apache.commons.collections4", "CollectionUtils", "public static <E> Collection<List<E>> permutations(final Collection<E> collection)" ], [ "retainAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> Collection<C> retainAll(final Collection<C> collection, final Collection<?> retain)" ], [ "retainAll", "org.apache.commons.collections4", "CollectionUtils", "public static <E> Collection<E> retainAll(final Iterable<E> collection, final Iterable<? extends E> retain, final Equator<? super E> equator)" ], [ "removeAll", "org.apache.commons.collections4", "CollectionUtils", "public static <E> Collection<E> removeAll(final Collection<E> collection, final Collection<?> remove)" ], [ "removeAll", "org.apache.commons.collections4", "CollectionUtils", "public static <E> Collection<E> removeAll(final Iterable<E> collection, final Iterable<? extends E> remove, final Equator<? super E> equator)" ], [ "synchronizedCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <C> Collection<C> synchronizedCollection(final Collection<C> collection)" ], [ "unmodifiableCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <C> Collection<C> unmodifiableCollection(final Collection<? extends C> collection)" ], [ "predicatedCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <C> Collection<C> predicatedCollection(final Collection<C> collection, final Predicate<? super C> predicate)" ], [ "transformingCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <E> Collection<E> transformingCollection(final Collection<E> collection, final Transformer<? super E, ? extends E> transformer)" ], [ "extractSingleton", "org.apache.commons.collections4", "CollectionUtils", "public static <E> E extractSingleton(final Collection<E> collection)" ], [ "transformingMap", "org.apache.commons.collections4.splitmap", "TransformedSplitMap", "public static <J, K, U, V> TransformedSplitMap<J, K, U, V> transformingMap(final Map<K, V> map, final Transformer<? super J, ? extends K> keyTransformer, final Transformer<? super U, ? extends V> valueTransformer)" ], [ "emptyIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> emptyIterable()" ], [ "chainedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> chainedIterable(final Iterable<? extends E> a, final Iterable<? extends E> b)" ], [ "chainedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> chainedIterable(final Iterable<? extends E> a, final Iterable<? extends E> b, final Iterable<? extends E> c)" ], [ "chainedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> chainedIterable(final Iterable<? extends E> a, final Iterable<? extends E> b, final Iterable<? extends E> c, final Iterable<? extends E> d)" ], [ "chainedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> chainedIterable(final Iterable<? extends E>... iterables)" ], [ "collatedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> collatedIterable(final Iterable<? extends E> a, final Iterable<? extends E> b)" ], [ "collatedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> collatedIterable(final Comparator<? super E> comparator, final Iterable<? extends E> a, final Iterable<? extends E> b)" ], [ "filteredIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> filteredIterable(final Iterable<E> iterable, final Predicate<? super E> predicate)" ], [ "boundedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> boundedIterable(final Iterable<E> iterable, final long maxSize)" ], [ "loopingIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> loopingIterable(final Iterable<E> iterable)" ], [ "reversedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> reversedIterable(final Iterable<E> iterable)" ], [ "skippingIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> skippingIterable(final Iterable<E> iterable, final long elementsToSkip)" ], [ "transformedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <I, O> Iterable<O> transformedIterable(final Iterable<I> iterable, final Transformer<? super I, ? extends O> transformer)" ], [ "uniqueIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> uniqueIterable(final Iterable<E> iterable)" ], [ "unmodifiableIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> unmodifiableIterable(final Iterable<E> iterable)" ], [ "zippingIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> zippingIterable(final Iterable<? extends E> a, final Iterable<? extends E> b)" ], [ "zippingIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> zippingIterable(final Iterable<? extends E> first, final Iterable<? extends E>... others)" ], [ "emptyIfNull", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> emptyIfNull(final Iterable<E> iterable)" ], [ "forEachButLast", "org.apache.commons.collections4", "IterableUtils", "public static <E> E forEachButLast(final Iterable<E> iterable, final Closure<? super E> closure)" ], [ "find", "org.apache.commons.collections4", "IterableUtils", "public static <E> E find(final Iterable<E> iterable, final Predicate<? super E> predicate)" ], [ "indexOf", "org.apache.commons.collections4", "IterableUtils", "public static <E> int indexOf(final Iterable<E> iterable, final Predicate<? super E> predicate)" ], [ "matchesAll", "org.apache.commons.collections4", "IterableUtils", "public static <E> boolean matchesAll(final Iterable<E> iterable, final Predicate<? super E> predicate)" ], [ "matchesAny", "org.apache.commons.collections4", "IterableUtils", "public static <E> boolean matchesAny(final Iterable<E> iterable, final Predicate<? super E> predicate)" ], [ "countMatches", "org.apache.commons.collections4", "IterableUtils", "public static <E> long countMatches(final Iterable<E> input, final Predicate<? super E> predicate)" ], [ "isEmpty", "org.apache.commons.collections4", "IterableUtils", "public static boolean isEmpty(final Iterable<?> iterable)" ], [ "contains", "org.apache.commons.collections4", "IterableUtils", "public static <E> boolean contains(final Iterable<E> iterable, final Object object)" ], [ "contains", "org.apache.commons.collections4", "IterableUtils", "public static <E> boolean contains(final Iterable<? extends E> iterable, final E object, final Equator<? super E> equator)" ], [ "frequency", "org.apache.commons.collections4", "IterableUtils", "public static <E, T extends E> int frequency(final Iterable<E> iterable, final T obj)" ], [ "get", "org.apache.commons.collections4", "IterableUtils", "public static <T> T get(final Iterable<T> iterable, final int index)" ], [ "size", "org.apache.commons.collections4", "IterableUtils", "public static int size(final Iterable<?> iterable)" ], [ "partition", "org.apache.commons.collections4", "IterableUtils", "public static <O> List<List<O>> partition(final Iterable<? extends O> iterable, final Predicate<? super O> predicate)" ], [ "partition", "org.apache.commons.collections4", "IterableUtils", "public static <O> List<List<O>> partition(final Iterable<? extends O> iterable, final Predicate<? super O>... predicates)" ], [ "partition", "org.apache.commons.collections4", "IterableUtils", "public static <O, R extends Collection<O>> List<R> partition(final Iterable<? extends O> iterable, final Factory<R> partitionFactory, final Predicate<? super O>... predicates)" ], [ "toList", "org.apache.commons.collections4", "IterableUtils", "public static <E> List<E> toList(final Iterable<E> iterable)" ], [ "toString", "org.apache.commons.collections4", "IterableUtils", "public static <E> String toString(final Iterable<E> iterable)" ], [ "toString", "org.apache.commons.collections4", "IterableUtils", "public static <E> String toString(final Iterable<E> iterable, final Transformer<? super E, String> transformer)" ], [ "toString", "org.apache.commons.collections4", "IterableUtils", "public static <E> String toString(final Iterable<E> iterable, final Transformer<? super E, String> transformer, final String delimiter, final String prefix, final String suffix)" ], [ "unmodifiableTrie", "org.apache.commons.collections4", "TrieUtils", "public static <K, V> Trie<K, V> unmodifiableTrie(final Trie<K, ? extends V> trie)" ], [ "exceptionClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> exceptionClosure()" ], [ "nopClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> nopClosure()" ], [ "asClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> asClosure(final Transformer<? super E, ?> transformer)" ], [ "forClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> forClosure(final int count, final Closure<? super E> closure)" ], [ "whileClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> whileClosure(final Predicate<? super E> predicate, final Closure<? super E> closure)" ], [ "doWhileClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> doWhileClosure(final Closure<? super E> closure, final Predicate<? super E> predicate)" ], [ "invokerClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> invokerClosure(final String methodName)" ], [ "invokerClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> invokerClosure(final String methodName, final Class<?>[] paramTypes, final Object[] args)" ], [ "chainedClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> chainedClosure(final Closure<? super E>... closures)" ], [ "chainedClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> chainedClosure(final Collection<? extends Closure<? super E>> closures)" ], [ "ifClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> ifClosure(final Predicate<? super E> predicate, final Closure<? super E> trueClosure)" ], [ "ifClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> ifClosure(final Predicate<? super E> predicate, final Closure<? super E> trueClosure, final Closure<? super E> falseClosure)" ], [ "switchClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> switchClosure(final Predicate<? super E>[] predicates, final Closure<? super E>[] closures)" ], [ "switchClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> switchClosure(final Predicate<? super E>[] predicates, final Closure<? super E>[] closures, final Closure<? super E> defaultClosure)" ], [ "switchClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> switchClosure(final Map<Predicate<E>, Closure<E>> predicatesAndClosures)" ], [ "switchMapClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> switchMapClosure(final Map<? extends E, Closure<E>> objectsAndClosures)" ], [ "unmodifiableTrie", "org.apache.commons.collections4.trie", "UnmodifiableTrie", "public static <K, V> Trie<K, V> unmodifiableTrie(final Trie<K, ? extends V> trie)" ], [ "isOutOfBoundsIndex", "org.apache.commons.collections4.trie", "KeyAnalyzer", "static boolean isOutOfBoundsIndex(final int bitIndex)" ], [ "isEqualBitKey", "org.apache.commons.collections4.trie", "KeyAnalyzer", "static boolean isEqualBitKey(final int bitIndex)" ], [ "isNullBitKey", "org.apache.commons.collections4.trie", "KeyAnalyzer", "static boolean isNullBitKey(final int bitIndex)" ], [ "isValidBitIndex", "org.apache.commons.collections4.trie", "KeyAnalyzer", "static boolean isValidBitIndex(final int bitIndex)" ], [ "isValidUplink", "org.apache.commons.collections4.trie", "AbstractPatriciaTrie", "static boolean isValidUplink(final TrieEntry<?, ?> next, final TrieEntry<?, ?> from)" ], [ "compare", "org.apache.commons.collections4.trie", "AbstractBitwiseTrie", "static boolean compare(final Object a, final Object b)" ], [ "transformingSortedMap", "org.apache.commons.collections4.map", "TransformedSortedMap", "public static <K, V> TransformedSortedMap<K, V> transformingSortedMap(final SortedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "transformedSortedMap", "org.apache.commons.collections4.map", "TransformedSortedMap", "public static <K, V> TransformedSortedMap<K, V> transformedSortedMap(final SortedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "predicatedMap", "org.apache.commons.collections4.map", "PredicatedMap", "public static <K, V> PredicatedMap<K, V> predicatedMap(final Map<K, V> map, final Predicate<? super K> keyPredicate, final Predicate<? super V> valuePredicate)" ], [ "fixedSizeSortedMap", "org.apache.commons.collections4.map", "FixedSizeSortedMap", "public static <K, V> FixedSizeSortedMap<K, V> fixedSizeSortedMap(final SortedMap<K, V> map)" ], [ "unmodifiableSortedMap", "org.apache.commons.collections4.map", "UnmodifiableSortedMap", "public static <K, V> SortedMap<K, V> unmodifiableSortedMap(final SortedMap<K, ? extends V> map)" ], [ "predicatedSortedMap", "org.apache.commons.collections4.map", "PredicatedSortedMap", "public static <K, V> PredicatedSortedMap<K, V> predicatedSortedMap(final SortedMap<K, V> map, final Predicate<? super K> keyPredicate, final Predicate<? super V> valuePredicate)" ], [ "defaultedMap", "org.apache.commons.collections4.map", "DefaultedMap", "public static <K, V> DefaultedMap<K, V> defaultedMap(final Map<K, V> map, final V defaultValue)" ], [ "defaultedMap", "org.apache.commons.collections4.map", "DefaultedMap", "public static <K, V> DefaultedMap<K, V> defaultedMap(final Map<K, V> map, final Factory<? extends V> factory)" ], [ "defaultedMap", "org.apache.commons.collections4.map", "DefaultedMap", "public static <K, V> Map<K, V> defaultedMap(final Map<K, V> map, final Transformer<? super K, ? extends V> transformer)" ], [ "fixedSizeMap", "org.apache.commons.collections4.map", "FixedSizeMap", "public static <K, V> FixedSizeMap<K, V> fixedSizeMap(final Map<K, V> map)" ], [ "lazySortedMap", "org.apache.commons.collections4.map", "LazySortedMap", "public static <K, V> LazySortedMap<K, V> lazySortedMap(final SortedMap<K, V> map, final Factory<? extends V> factory)" ], [ "lazySortedMap", "org.apache.commons.collections4.map", "LazySortedMap", "public static <K, V> LazySortedMap<K, V> lazySortedMap(final SortedMap<K, V> map, final Transformer<? super K, ? extends V> factory)" ], [ "unmodifiableOrderedMap", "org.apache.commons.collections4.map", "UnmodifiableOrderedMap", "public static <K, V> OrderedMap<K, V> unmodifiableOrderedMap(final OrderedMap<? extends K, ? extends V> map)" ], [ "unmodifiableMap", "org.apache.commons.collections4.map", "UnmodifiableMap", "public static <K, V> Map<K, V> unmodifiableMap(final Map<? extends K, ? extends V> map)" ], [ "listOrderedMap", "org.apache.commons.collections4.map", "ListOrderedMap", "public static <K, V> ListOrderedMap<K, V> listOrderedMap(final Map<K, V> map)" ], [ "unmodifiableEntrySet", "org.apache.commons.collections4.map", "UnmodifiableEntrySet", "public static <K, V> Set<Map.Entry<K, V>> unmodifiableEntrySet(final Set<Map.Entry<K, V>> set)" ], [ "resolve", "org.apache.commons.collections4.map", "AbstractReferenceMap", "public static ReferenceStrength resolve(final int value)" ], [ "resolve", "org.apache.commons.collections4.map", "ReferenceStrength", "public static ReferenceStrength resolve(final int value)" ], [ "multiKeyMap", "org.apache.commons.collections4.map", "MultiKeyMap", "public static <K, V> MultiKeyMap<K, V> multiKeyMap(final AbstractHashedMap<MultiKey<? extends K>, V> map)" ], [ "lazyMap", "org.apache.commons.collections4.map", "LazyMap", "public static <K, V> LazyMap<K, V> lazyMap(final Map<K, V> map, final Factory<? extends V> factory)" ], [ "lazyMap", "org.apache.commons.collections4.map", "LazyMap", "public static <V, K> LazyMap<K, V> lazyMap(final Map<K, V> map, final Transformer<? super K, ? extends V> factory)" ], [ "multiValueMap", "org.apache.commons.collections4.map", "MultiValueMap", "public static <K, V> MultiValueMap<K, V> multiValueMap(final Map<K, ? super Collection<V>> map)" ], [ "multiValueMap", "org.apache.commons.collections4.map", "MultiValueMap", "public static <K, V, C extends Collection<V>> MultiValueMap<K, V> multiValueMap(final Map<K, ? super C> map, final Class<C> collectionClass)" ], [ "multiValueMap", "org.apache.commons.collections4.map", "MultiValueMap", "public static <K, V, C extends Collection<V>> MultiValueMap<K, V> multiValueMap(final Map<K, ? super C> map, final Factory<C> collectionFactory)" ], [ "transformingMap", "org.apache.commons.collections4.map", "TransformedMap", "public static <K, V> TransformedMap<K, V> transformingMap(final Map<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "transformedMap", "org.apache.commons.collections4.map", "TransformedMap", "public static <K, V> TransformedMap<K, V> transformedMap(final Map<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "synchronizedMultiSet", "org.apache.commons.collections4", "MultiSetUtils", "public static <E> MultiSet<E> synchronizedMultiSet(final MultiSet<E> multiset)" ], [ "unmodifiableMultiSet", "org.apache.commons.collections4", "MultiSetUtils", "public static <E> MultiSet<E> unmodifiableMultiSet(final MultiSet<? extends E> multiset)" ], [ "predicatedMultiSet", "org.apache.commons.collections4", "MultiSetUtils", "public static <E> MultiSet<E> predicatedMultiSet(final MultiSet<E> multiset, final Predicate<? super E> predicate)" ], [ "emptyMultiSet", "org.apache.commons.collections4", "MultiSetUtils", "public static <E> MultiSet<E> emptyMultiSet()" ], [ "unmodifiableMultiValuedMap", "org.apache.commons.collections4.multimap", "UnmodifiableMultiValuedMap", "public static <K, V> UnmodifiableMultiValuedMap<K, V> unmodifiableMultiValuedMap(MultiValuedMap<? extends K, ? extends V> map)" ], [ "transformingMap", "org.apache.commons.collections4.multimap", "TransformedMultiValuedMap", "public static <K, V> TransformedMultiValuedMap<K, V> transformingMap(final MultiValuedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "transformedMap", "org.apache.commons.collections4.multimap", "TransformedMultiValuedMap", "public static <K, V> TransformedMultiValuedMap<K, V> transformedMap(final MultiValuedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "lazyList", "org.apache.commons.collections4.list", "LazyList", "public static <E> LazyList<E> lazyList(final List<E> list, final Factory<? extends E> factory)" ], [ "setUniqueList", "org.apache.commons.collections4.list", "SetUniqueList", "public static <E> SetUniqueList<E> setUniqueList(final List<E> list)" ], [ "unmodifiableList", "org.apache.commons.collections4.list", "UnmodifiableList", "public static <E> List<E> unmodifiableList(final List<? extends E> list)" ], [ "fixedSizeList", "org.apache.commons.collections4.list", "FixedSizeList", "public static <E> FixedSizeList<E> fixedSizeList(final List<E> list)" ], [ "transformingList", "org.apache.commons.collections4.list", "TransformedList", "public static <E> TransformedList<E> transformingList(final List<E> list, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedList", "org.apache.commons.collections4.list", "TransformedList", "public static <E> TransformedList<E> transformedList(final List<E> list, final Transformer<? super E, ? extends E> transformer)" ], [ "growthList", "org.apache.commons.collections4.list", "GrowthList", "public static <E> GrowthList<E> growthList(final List<E> list)" ], [ "predicatedList", "org.apache.commons.collections4.list", "PredicatedList", "public static <T> PredicatedList<T> predicatedList(final List<T> list, final Predicate<? super T> predicate)" ], [ "transformingQueue", "org.apache.commons.collections4.queue", "TransformedQueue", "public static <E> TransformedQueue<E> transformingQueue(final Queue<E> queue, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedQueue", "org.apache.commons.collections4.queue", "TransformedQueue", "public static <E> TransformedQueue<E> transformedQueue(final Queue<E> queue, final Transformer<? super E, ? extends E> transformer)" ], [ "unmodifiableQueue", "org.apache.commons.collections4.queue", "UnmodifiableQueue", "public static <E> Queue<E> unmodifiableQueue(final Queue<? extends E> queue)" ], [ "predicatedQueue", "org.apache.commons.collections4.queue", "PredicatedQueue", "public static <E> PredicatedQueue<E> predicatedQueue(final Queue<E> Queue, final Predicate<? super E> predicate)" ], [ "empty", "org.apache.commons.collections4", "FluentIterable", "public static <T> FluentIterable<T> empty()" ], [ "of", "org.apache.commons.collections4", "FluentIterable", "public static <T> FluentIterable<T> of(final T singleton)" ], [ "of", "org.apache.commons.collections4", "FluentIterable", "public static <T> FluentIterable<T> of(final T... elements)" ], [ "of", "org.apache.commons.collections4", "FluentIterable", "public static <T> FluentIterable<T> of(final Iterable<T> iterable)" ], [ "exceptionTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> exceptionTransformer()" ], [ "nullTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> nullTransformer()" ], [ "nopTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> nopTransformer()" ], [ "cloneTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> cloneTransformer()" ], [ "constantTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> constantTransformer(final O constantToReturn)" ], [ "asTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> asTransformer(final Closure<? super T> closure)" ], [ "asTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, Boolean> asTransformer(final Predicate<? super T> predicate)" ], [ "asTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> asTransformer(final Factory<? extends O> factory)" ], [ "chainedTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> chainedTransformer(final Transformer<? super T, ? extends T>... transformers)" ], [ "chainedTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> chainedTransformer(final Collection<? extends Transformer<? super T, ? extends T>> transformers)" ], [ "ifTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> ifTransformer(final Predicate<? super T> predicate, final Transformer<? super T, ? extends T> trueTransformer)" ], [ "ifTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> ifTransformer(final Predicate<? super I> predicate, final Transformer<? super I, ? extends O> trueTransformer, final Transformer<? super I, ? extends O> falseTransformer)" ], [ "switchTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> switchTransformer(final Predicate<? super I> predicate, final Transformer<? super I, ? extends O> trueTransformer, final Transformer<? super I, ? extends O> falseTransformer)" ], [ "switchTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> switchTransformer(final Predicate<? super I>[] predicates, final Transformer<? super I, ? extends O>[] transformers)" ], [ "switchTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> switchTransformer(final Predicate<? super I>[] predicates, final Transformer<? super I, ? extends O>[] transformers, final Transformer<? super I, ? extends O> defaultTransformer)" ], [ "switchTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> switchTransformer(final Map<Predicate<I>, Transformer<I, O>> predicatesAndTransformers)" ], [ "switchMapTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> switchMapTransformer(final Map<I, Transformer<I, O>> objectsAndTransformers)" ], [ "instantiateTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<Class<? extends T>, T> instantiateTransformer()" ], [ "instantiateTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<Class<? extends T>, T> instantiateTransformer(final Class<?>[] paramTypes, final Object[] args)" ], [ "mapTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> mapTransformer(final Map<? super I, ? extends O> map)" ], [ "invokerTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> invokerTransformer(final String methodName)" ], [ "invokerTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> invokerTransformer(final String methodName, final Class<?>[] paramTypes, final Object[] args)" ], [ "stringValueTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, String> stringValueTransformer()" ], [ "exceptionPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> exceptionPredicate()" ], [ "truePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> truePredicate()" ], [ "falsePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> falsePredicate()" ], [ "nullPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nullPredicate()" ], [ "notNullPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> notNullPredicate()" ], [ "equalPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> equalPredicate(final T value)" ], [ "identityPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> identityPredicate(final T value)" ], [ "instanceofPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static Predicate<Object> instanceofPredicate(final Class<?> type)" ], [ "uniquePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> uniquePredicate()" ], [ "invokerPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> invokerPredicate(final String methodName)" ], [ "invokerPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> invokerPredicate(final String methodName, final Class<?>[] paramTypes, final Object[] args)" ], [ "andPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> andPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "allPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> allPredicate(final Predicate<? super T>... predicates)" ], [ "allPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> allPredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "orPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> orPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "anyPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> anyPredicate(final Predicate<? super T>... predicates)" ], [ "anyPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> anyPredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "eitherPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> eitherPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "onePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> onePredicate(final Predicate<? super T>... predicates)" ], [ "onePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> onePredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "neitherPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> neitherPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "nonePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nonePredicate(final Predicate<? super T>... predicates)" ], [ "nonePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nonePredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "notPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> notPredicate(final Predicate<? super T> predicate)" ], [ "asPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> asPredicate(final Transformer<? super T, Boolean> transformer)" ], [ "nullIsExceptionPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nullIsExceptionPredicate(final Predicate<? super T> predicate)" ], [ "nullIsFalsePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nullIsFalsePredicate(final Predicate<? super T> predicate)" ], [ "nullIsTruePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nullIsTruePredicate(final Predicate<? super T> predicate)" ], [ "transformedPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> transformedPredicate(final Transformer<? super T, ? extends T> transformer, final Predicate<? super T> predicate)" ], [ "emptySet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> emptySet()" ], [ "emptySortedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> emptySortedSet()" ], [ "emptyIfNull", "org.apache.commons.collections4", "SetUtils", "public static <T> Set<T> emptyIfNull(final Set<T> set)" ], [ "isEqualSet", "org.apache.commons.collections4", "SetUtils", "public static boolean isEqualSet(final Collection<?> set1, final Collection<?> set2)" ], [ "hashCodeForSet", "org.apache.commons.collections4", "SetUtils", "public static <T> int hashCodeForSet(final Collection<T> set)" ], [ "newIdentityHashSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> newIdentityHashSet()" ], [ "synchronizedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> synchronizedSet(final Set<E> set)" ], [ "unmodifiableSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> unmodifiableSet(final Set<? extends E> set)" ], [ "predicatedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> predicatedSet(final Set<E> set, final Predicate<? super E> predicate)" ], [ "transformedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> transformedSet(final Set<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "orderedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> orderedSet(final Set<E> set)" ], [ "synchronizedSortedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> synchronizedSortedSet(final SortedSet<E> set)" ], [ "unmodifiableSortedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> unmodifiableSortedSet(final SortedSet<E> set)" ], [ "predicatedSortedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> predicatedSortedSet(final SortedSet<E> set, final Predicate<? super E> predicate)" ], [ "transformedSortedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> transformedSortedSet(final SortedSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "unmodifiableNavigableSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> unmodifiableNavigableSet(final NavigableSet<E> set)" ], [ "predicatedNavigableSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> predicatedNavigableSet(final NavigableSet<E> set, final Predicate<? super E> predicate)" ], [ "transformedNavigableSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> transformedNavigableSet(final NavigableSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "union", "org.apache.commons.collections4", "SetUtils", "public static <E> SetView<E> union(final Set<? extends E> a, final Set<? extends E> b)" ], [ "difference", "org.apache.commons.collections4", "SetUtils", "public static <E> SetView<E> difference(final Set<? extends E> a, final Set<? extends E> b)" ], [ "intersection", "org.apache.commons.collections4", "SetUtils", "public static <E> SetView<E> intersection(final Set<? extends E> a, final Set<? extends E> b)" ], [ "disjunction", "org.apache.commons.collections4", "SetUtils", "public static <E> SetView<E> disjunction(final Set<? extends E> a, final Set<? extends E> b)" ], [ "transformingSet", "org.apache.commons.collections4.set", "TransformedSet", "public static <E> TransformedSet<E> transformingSet(final Set<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedSet", "org.apache.commons.collections4.set", "TransformedSet", "public static <E> Set<E> transformedSet(final Set<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "transformingNavigableSet", "org.apache.commons.collections4.set", "TransformedNavigableSet", "public static <E> TransformedNavigableSet<E> transformingNavigableSet(final NavigableSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedNavigableSet", "org.apache.commons.collections4.set", "TransformedNavigableSet", "public static <E> TransformedNavigableSet<E> transformedNavigableSet(final NavigableSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "predicatedNavigableSet", "org.apache.commons.collections4.set", "PredicatedNavigableSet", "public static <E> PredicatedNavigableSet<E> predicatedNavigableSet(final NavigableSet<E> set, final Predicate<? super E> predicate)" ], [ "listOrderedSet", "org.apache.commons.collections4.set", "ListOrderedSet", "public static <E> ListOrderedSet<E> listOrderedSet(final Set<E> set, final List<E> list)" ], [ "listOrderedSet", "org.apache.commons.collections4.set", "ListOrderedSet", "public static <E> ListOrderedSet<E> listOrderedSet(final Set<E> set)" ], [ "listOrderedSet", "org.apache.commons.collections4.set", "ListOrderedSet", "public static <E> ListOrderedSet<E> listOrderedSet(final List<E> list)" ], [ "unmodifiableSet", "org.apache.commons.collections4.set", "UnmodifiableSet", "public static <E> Set<E> unmodifiableSet(final Set<? extends E> set)" ], [ "mapBackedSet", "org.apache.commons.collections4.set", "MapBackedSet", "public static <E, V> MapBackedSet<E, V> mapBackedSet(final Map<E, ? super V> map)" ], [ "mapBackedSet", "org.apache.commons.collections4.set", "MapBackedSet", "public static <E, V> MapBackedSet<E, V> mapBackedSet(final Map<E, ? super V> map, final V dummyValue)" ], [ "unmodifiableSortedSet", "org.apache.commons.collections4.set", "UnmodifiableSortedSet", "public static <E> SortedSet<E> unmodifiableSortedSet(final SortedSet<E> set)" ], [ "predicatedSortedSet", "org.apache.commons.collections4.set", "PredicatedSortedSet", "public static <E> PredicatedSortedSet<E> predicatedSortedSet(final SortedSet<E> set, final Predicate<? super E> predicate)" ], [ "predicatedSet", "org.apache.commons.collections4.set", "PredicatedSet", "public static <E> PredicatedSet<E> predicatedSet(final Set<E> set, final Predicate<? super E> predicate)" ], [ "unmodifiableNavigableSet", "org.apache.commons.collections4.set", "UnmodifiableNavigableSet", "public static <E> NavigableSet<E> unmodifiableNavigableSet(final NavigableSet<E> set)" ], [ "transformingSortedSet", "org.apache.commons.collections4.set", "TransformedSortedSet", "public static <E> TransformedSortedSet<E> transformingSortedSet(final SortedSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedSortedSet", "org.apache.commons.collections4.set", "TransformedSortedSet", "public static <E> TransformedSortedSet<E> transformedSortedSet(final SortedSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "get", "org.apache.commons.collections4", "EnumerationUtils", "public static <T> T get(final Enumeration<T> e, final int index)" ], [ "toList", "org.apache.commons.collections4", "EnumerationUtils", "public static <E> List<E> toList(final Enumeration<? extends E> enumeration)" ], [ "toList", "org.apache.commons.collections4", "EnumerationUtils", "public static List<String> toList(final StringTokenizer stringTokenizer)" ], [ "unmodifiableQueue", "org.apache.commons.collections4", "QueueUtils", "public static <E> Queue<E> unmodifiableQueue(final Queue<? extends E> queue)" ], [ "predicatedQueue", "org.apache.commons.collections4", "QueueUtils", "public static <E> Queue<E> predicatedQueue(final Queue<E> queue, final Predicate<? super E> predicate)" ], [ "transformingQueue", "org.apache.commons.collections4", "QueueUtils", "public static <E> Queue<E> transformingQueue(final Queue<E> queue, final Transformer<? super E, ? extends E> transformer)" ], [ "emptyQueue", "org.apache.commons.collections4", "QueueUtils", "public static <E> Queue<E> emptyQueue()" ], [ "synchronizedBag", "org.apache.commons.collections4.bag", "SynchronizedBag", "public static <E> SynchronizedBag<E> synchronizedBag(final Bag<E> bag)" ], [ "collectionBag", "org.apache.commons.collections4.bag", "CollectionBag", "public static <E> Bag<E> collectionBag(final Bag<E> bag)" ], [ "unmodifiableBag", "org.apache.commons.collections4.bag", "UnmodifiableBag", "public static <E> Bag<E> unmodifiableBag(final Bag<? extends E> bag)" ], [ "predicatedSortedBag", "org.apache.commons.collections4.bag", "PredicatedSortedBag", "public static <E> PredicatedSortedBag<E> predicatedSortedBag(final SortedBag<E> bag, final Predicate<? super E> predicate)" ], [ "unmodifiableSortedBag", "org.apache.commons.collections4.bag", "UnmodifiableSortedBag", "public static <E> SortedBag<E> unmodifiableSortedBag(final SortedBag<E> bag)" ], [ "transformingSortedBag", "org.apache.commons.collections4.bag", "TransformedSortedBag", "public static <E> TransformedSortedBag<E> transformingSortedBag(final SortedBag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedSortedBag", "org.apache.commons.collections4.bag", "TransformedSortedBag", "public static <E> TransformedSortedBag<E> transformedSortedBag(final SortedBag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "predicatedBag", "org.apache.commons.collections4.bag", "PredicatedBag", "public static <E> PredicatedBag<E> predicatedBag(final Bag<E> bag, final Predicate<? super E> predicate)" ], [ "synchronizedSortedBag", "org.apache.commons.collections4.bag", "SynchronizedSortedBag", "public static <E> SynchronizedSortedBag<E> synchronizedSortedBag(final SortedBag<E> bag)" ], [ "collectionSortedBag", "org.apache.commons.collections4.bag", "CollectionSortedBag", "public static <E> SortedBag<E> collectionSortedBag(final SortedBag<E> bag)" ], [ "transformingBag", "org.apache.commons.collections4.bag", "TransformedBag", "public static <E> Bag<E> transformingBag(final Bag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedBag", "org.apache.commons.collections4.bag", "TransformedBag", "public static <E> Bag<E> transformedBag(final Bag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "predicatedMultiSet", "org.apache.commons.collections4.multiset", "PredicatedMultiSet", "public static <E> PredicatedMultiSet<E> predicatedMultiSet(final MultiSet<E> multiset, final Predicate<? super E> predicate)" ], [ "unmodifiableMultiSet", "org.apache.commons.collections4.multiset", "UnmodifiableMultiSet", "public static <E> MultiSet<E> unmodifiableMultiSet(final MultiSet<? extends E> multiset)" ], [ "synchronizedMultiSet", "org.apache.commons.collections4.multiset", "SynchronizedMultiSet", "public static <E> SynchronizedMultiSet<E> synchronizedMultiSet(final MultiSet<E> multiset)" ], [ "synchronizedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> synchronizedBag(final Bag<E> bag)" ], [ "unmodifiableBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> unmodifiableBag(final Bag<? extends E> bag)" ], [ "predicatedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> predicatedBag(final Bag<E> bag, final Predicate<? super E> predicate)" ], [ "transformingBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> transformingBag(final Bag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "collectionBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> collectionBag(final Bag<E> bag)" ], [ "synchronizedSortedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> SortedBag<E> synchronizedSortedBag(final SortedBag<E> bag)" ], [ "unmodifiableSortedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> SortedBag<E> unmodifiableSortedBag(final SortedBag<E> bag)" ], [ "predicatedSortedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> SortedBag<E> predicatedSortedBag(final SortedBag<E> bag, final Predicate<? super E> predicate)" ], [ "transformingSortedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> SortedBag<E> transformingSortedBag(final SortedBag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "emptyBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> emptyBag()" ], [ "emptySortedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> SortedBag<E> emptySortedBag()" ], [ "resettableEmptyListIterator", "org.apache.commons.collections4.iterators", "EmptyListIterator", "public static <E> ResettableListIterator<E> resettableEmptyListIterator()" ], [ "emptyListIterator", "org.apache.commons.collections4.iterators", "EmptyListIterator", "public static <E> ListIterator<E> emptyListIterator()" ], [ "unmodifiableOrderedMapIterator", "org.apache.commons.collections4.iterators", "UnmodifiableOrderedMapIterator", "public static <K, V> OrderedMapIterator<K, V> unmodifiableOrderedMapIterator(final OrderedMapIterator<K, ? extends V> iterator)" ], [ "unmodifiableIterator", "org.apache.commons.collections4.iterators", "UnmodifiableIterator", "public static <E> Iterator<E> unmodifiableIterator(final Iterator<? extends E> iterator)" ], [ "peekingIterator", "org.apache.commons.collections4.iterators", "PeekingIterator", "public static <E> PeekingIterator<E> peekingIterator(final Iterator<? extends E> iterator)" ], [ "emptyMapIterator", "org.apache.commons.collections4.iterators", "EmptyMapIterator", "public static <K, V> MapIterator<K, V> emptyMapIterator()" ], [ "emptyOrderedIterator", "org.apache.commons.collections4.iterators", "EmptyOrderedIterator", "public static <E> OrderedIterator<E> emptyOrderedIterator()" ], [ "umodifiableListIterator", "org.apache.commons.collections4.iterators", "UnmodifiableListIterator", "public static <E> ListIterator<E> umodifiableListIterator(final ListIterator<? extends E> iterator)" ], [ "emptyOrderedMapIterator", "org.apache.commons.collections4.iterators", "EmptyOrderedMapIterator", "public static <K, V> OrderedMapIterator<K, V> emptyOrderedMapIterator()" ], [ "unmodifiableMapIterator", "org.apache.commons.collections4.iterators", "UnmodifiableMapIterator", "public static <K, V> MapIterator<K, V> unmodifiableMapIterator(final MapIterator<? extends K, ? extends V> iterator)" ], [ "resettableEmptyIterator", "org.apache.commons.collections4.iterators", "EmptyIterator", "public static <E> ResettableIterator<E> resettableEmptyIterator()" ], [ "emptyIterator", "org.apache.commons.collections4.iterators", "EmptyIterator", "public static <E> Iterator<E> emptyIterator()" ], [ "pushbackIterator", "org.apache.commons.collections4.iterators", "PushbackIterator", "public static <E> PushbackIterator<E> pushbackIterator(final Iterator<? extends E> iterator)" ], [ "readableMap", "org.apache.commons.collections4", "SplitMapUtils", "public static <K, V> IterableMap<K, V> readableMap(final Get<K, V> get)" ], [ "writableMap", "org.apache.commons.collections4", "SplitMapUtils", "public static <K, V> Map<K, V> writableMap(final Put<K, V> put)" ] ],
  "tokensProjectClassesNonPrivateStaticAttributes" : [ [ "EMPTY_ITERATOR", "org.apache.commons.collections4", "IteratorUtils", "public static final ResettableIterator EMPTY_ITERATOR = EmptyIterator.RESETTABLE_INSTANCE;" ], [ "EMPTY_LIST_ITERATOR", "org.apache.commons.collections4", "IteratorUtils", "public static final ResettableListIterator EMPTY_LIST_ITERATOR = EmptyListIterator.RESETTABLE_INSTANCE;" ], [ "EMPTY_ORDERED_ITERATOR", "org.apache.commons.collections4", "IteratorUtils", "public static final OrderedIterator EMPTY_ORDERED_ITERATOR = EmptyOrderedIterator.INSTANCE;" ], [ "EMPTY_MAP_ITERATOR", "org.apache.commons.collections4", "IteratorUtils", "public static final MapIterator EMPTY_MAP_ITERATOR = EmptyMapIterator.INSTANCE;" ], [ "EMPTY_ORDERED_MAP_ITERATOR", "org.apache.commons.collections4", "IteratorUtils", "public static final OrderedMapIterator EMPTY_ORDERED_MAP_ITERATOR = EmptyOrderedMapIterator.INSTANCE;" ], [ "NATURAL_COMPARATOR", "org.apache.commons.collections4", "ComparatorUtils", "public static final Comparator NATURAL_COMPARATOR = ComparableComparator.<Comparable>comparableComparator();" ], [ "EMPTY_MULTI_VALUED_MAP", "org.apache.commons.collections4", "MultiMapUtils", "public static final MultiValuedMap EMPTY_MULTI_VALUED_MAP = UnmodifiableMultiValuedMap.unmodifiableMultiValuedMap(new ArrayListValuedHashMap(0, 0));" ], [ "EMPTY_SORTED_MAP", "org.apache.commons.collections4", "MapUtils", "public static final SortedMap EMPTY_SORTED_MAP = UnmodifiableSortedMap.unmodifiableSortedMap(new TreeMap<Object, Object>());" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "DefaultEquator", "public static final DefaultEquator INSTANCE = new DefaultEquator<Object>();" ], [ "HASHCODE_NULL", "org.apache.commons.collections4.functors", "DefaultEquator", "public static final int HASHCODE_NULL = -1;" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "ExceptionClosure", "public static final Closure INSTANCE = new ExceptionClosure<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "NOPClosure", "public static final Closure INSTANCE = new NOPClosure<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "NullPredicate", "public static final Predicate INSTANCE = new NullPredicate<Object>();" ], [ "NULL_INSTANCE", "org.apache.commons.collections4.functors", "ConstantTransformer", "public static final Transformer NULL_INSTANCE = new ConstantTransformer<Object, Object>(null);" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "ExceptionTransformer", "public static final Transformer INSTANCE = new ExceptionTransformer<Object, Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "NOPTransformer", "public static final Transformer INSTANCE = new NOPTransformer<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "ExceptionFactory", "public static final Factory INSTANCE = new ExceptionFactory<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "ExceptionPredicate", "public static final Predicate INSTANCE = new ExceptionPredicate<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "FalsePredicate", "public static final Predicate INSTANCE = new FalsePredicate<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "CloneTransformer", "public static final Transformer INSTANCE = new CloneTransformer<Object>();" ], [ "NULL_INSTANCE", "org.apache.commons.collections4.functors", "ConstantFactory", "public static final Factory NULL_INSTANCE = new ConstantFactory<Object>(null);" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "TruePredicate", "public static final Predicate INSTANCE = new TruePredicate<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "NotNullPredicate", "public static final Predicate INSTANCE = new NotNullPredicate<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.comparators", "ComparableComparator", "public static final ComparableComparator INSTANCE = new ComparableComparator();" ], [ "EMPTY_COLLECTION", "org.apache.commons.collections4", "CollectionUtils", "public static final Collection EMPTY_COLLECTION = UnmodifiableCollection.unmodifiableCollection(new ArrayList<Object>());" ], [ "EMPTY_ITERABLE", "org.apache.commons.collections4", "IterableUtils", "static final FluentIterable EMPTY_ITERABLE = new FluentIterable<Object>() {\n\n    @Override\n    public Iterator<Object> iterator() {\n        return IteratorUtils.emptyIterator();\n    }\n};" ], [ "NULL_BIT_KEY", "org.apache.commons.collections4.trie", "KeyAnalyzer", "public static final int NULL_BIT_KEY = -1;" ], [ "EQUAL_BIT_KEY", "org.apache.commons.collections4.trie", "KeyAnalyzer", "public static final int EQUAL_BIT_KEY = -2;" ], [ "OUT_OF_BOUNDS_BIT_KEY", "org.apache.commons.collections4.trie", "KeyAnalyzer", "public static final int OUT_OF_BOUNDS_BIT_KEY = -3;" ], [ "INSTANCE", "org.apache.commons.collections4.trie.analyzer", "StringKeyAnalyzer", "public static final StringKeyAnalyzer INSTANCE = new StringKeyAnalyzer();" ], [ "LENGTH", "org.apache.commons.collections4.trie.analyzer", "StringKeyAnalyzer", "public static final int LENGTH = Character.SIZE;" ], [ "NO_NEXT_ENTRY", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String NO_NEXT_ENTRY = \"No next() entry in the iteration\";" ], [ "NO_PREVIOUS_ENTRY", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String NO_PREVIOUS_ENTRY = \"No previous() entry in the iteration\";" ], [ "REMOVE_INVALID", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String REMOVE_INVALID = \"remove() can only be called once after next()\";" ], [ "GETKEY_INVALID", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String GETKEY_INVALID = \"getKey() can only be called after next() and before remove()\";" ], [ "GETVALUE_INVALID", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String GETVALUE_INVALID = \"getValue() can only be called after next() and before remove()\";" ], [ "SETVALUE_INVALID", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String SETVALUE_INVALID = \"setValue() can only be called after next() and before remove()\";" ], [ "DEFAULT_CAPACITY", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final int DEFAULT_CAPACITY = 16;" ], [ "DEFAULT_THRESHOLD", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final int DEFAULT_THRESHOLD = 12;" ], [ "DEFAULT_LOAD_FACTOR", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final float DEFAULT_LOAD_FACTOR = 0.75f;" ], [ "MAXIMUM_CAPACITY", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final int MAXIMUM_CAPACITY = 1 << 30;" ], [ "NULL", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final Object NULL = new Object();" ], [ "DEFAULT_MAX_SIZE", "org.apache.commons.collections4.map", "LRUMap", "protected static final int DEFAULT_MAX_SIZE = 100;" ], [ "EMPTY_MULTISET", "org.apache.commons.collections4", "MultiSetUtils", "public static final MultiSet EMPTY_MULTISET = UnmodifiableMultiSet.unmodifiableMultiSet(new HashMultiSet<Object>());" ], [ "EMPTY_SORTED_SET", "org.apache.commons.collections4", "SetUtils", "public static final SortedSet EMPTY_SORTED_SET = UnmodifiableSortedSet.unmodifiableSortedSet(new TreeSet<Object>());" ], [ "EMPTY_QUEUE", "org.apache.commons.collections4", "QueueUtils", "public static final Queue EMPTY_QUEUE = UnmodifiableQueue.unmodifiableQueue(new LinkedList<Object>());" ], [ "EMPTY_BAG", "org.apache.commons.collections4", "BagUtils", "public static final Bag EMPTY_BAG = UnmodifiableBag.unmodifiableBag(new HashBag<Object>());" ], [ "EMPTY_SORTED_BAG", "org.apache.commons.collections4", "BagUtils", "public static final Bag EMPTY_SORTED_BAG = UnmodifiableSortedBag.unmodifiableSortedBag(new TreeBag<Object>());" ], [ "RESETTABLE_INSTANCE", "org.apache.commons.collections4.iterators", "EmptyListIterator", "public static final ResettableListIterator RESETTABLE_INSTANCE = new EmptyListIterator<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.iterators", "EmptyListIterator", "public static final ListIterator INSTANCE = RESETTABLE_INSTANCE;" ], [ "INSTANCE", "org.apache.commons.collections4.iterators", "EmptyMapIterator", "public static final MapIterator INSTANCE = new EmptyMapIterator<Object, Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.iterators", "EmptyOrderedIterator", "public static final OrderedIterator INSTANCE = new EmptyOrderedIterator<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.iterators", "EmptyOrderedMapIterator", "public static final OrderedMapIterator INSTANCE = new EmptyOrderedMapIterator<Object, Object>();" ], [ "RESETTABLE_INSTANCE", "org.apache.commons.collections4.iterators", "EmptyIterator", "public static final ResettableIterator RESETTABLE_INSTANCE = new EmptyIterator<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.iterators", "EmptyIterator", "public static final Iterator INSTANCE = RESETTABLE_INSTANCE;" ] ],
  "tokensMethodJavadocValues" : [ ],
  "tokensMethodArguments" : [ [ "paramTypes", "", "Class<?>[]" ], [ "args", "", "Object[]" ] ],
  "tokensMethodVariablesNonPrivateNonStaticNonVoidMethods" : [ [ "clone", "java.lang", "Object", "protected native Object clone() throws CloneNotSupportedException" ], [ "hashCode", "java.lang", "Object", "public native int hashCode()" ], [ "toString", "java.lang", "Object", "public String toString()" ], [ "getClass", "java.lang", "Object", "public final native Class<? extends Object> getClass()" ], [ "equals", "java.lang", "Object", "public boolean equals(Object arg0)" ], [ "equals", "", "java.lang.Class<?>[]", "public boolean equals(Object);" ], [ "toString", "", "java.lang.Class<?>[]", "public String toString()" ], [ "hashCode", "", "java.lang.Class<?>[]", "public native int hashCode()" ], [ "getClass", "", "java.lang.Class<?>[]", "public final native Class getClass();" ], [ "clone", "", "java.lang.Class<?>[]", "public T[] clone();" ], [ "equals", "", "java.lang.Object[]", "public boolean equals(Object);" ], [ "toString", "", "java.lang.Object[]", "public String toString()" ], [ "hashCode", "", "java.lang.Object[]", "public native int hashCode()" ], [ "getClass", "", "java.lang.Object[]", "public final native Class getClass();" ], [ "clone", "", "java.lang.Object[]", "public T[] clone();" ], [ "transform", "org.apache.commons.collections4", "Transformer", "public abstract O transform(I arg0)" ] ],
  "tokensMethodVariablesNonPrivateNonStaticAttributes" : [ [ "length", "java.lang", "Class[]", "public final int length;" ], [ "length", "java.lang", "Object[]", "public final int length;" ] ],
  "tokensOracleVariablesNonPrivateNonStaticNonVoidMethods" : [ ],
  "tokensOracleVariablesNonPrivateNonStaticAttributes" : [ ]
}, {
  "id" : 8989,
  "oracle" : ";",
  "oracleType" : "NORMAL_POST",
  "projectName" : "commons-collections4-4.1",
  "packageName" : "org.apache.commons.collections4",
  "className" : "TransformerUtils",
  "javadocTag" : "@return the transformer",
  "methodJavadoc" : "    /**\n     * Gets a Transformer that invokes a method on the input object.\n     * The method must have no parameters. If the input object is null,\n     * null is returned.\n     * <p>\n     * For example, <code>TransformerUtils.invokerTransformer(\"getName\");</code>\n     * will call the <code>getName/code> method on the input object to\n     * determine the transformer result.\n     *\n     * @param <I>  the input type\n     * @param <O>  the output type\n     * @param methodName  the method name to call on the input object, may not be null\n     * @return the transformer\n     * @throws NullPointerException if the methodName is null.\n     * @see InvokerTransformer\n     */",
  "methodSourceCode" : "public static <I, O> Transformer<I, O> invokerTransformer(final String methodName){\n    return InvokerTransformer.invokerTransformer(methodName, null, null);\n}",
  "classJavadoc" : "/**\n * <code>TransformerUtils</code> provides reference implementations and\n * utilities for the Transformer functor interface. The supplied transformers are:\n * <ul>\n * <li>Invoker - returns the result of a method call on the input object\n * <li>Clone - returns a clone of the input object\n * <li>Constant - always returns the same object\n * <li>Closure - performs a Closure and returns the input object\n * <li>Predicate - returns the result of the predicate as a Boolean\n * <li>Factory - returns a new object from a factory\n * <li>Chained - chains two or more transformers together\n * <li>If - calls one transformer or another based on a predicate\n * <li>Switch - calls one transformer based on one or more predicates\n * <li>SwitchMap - calls one transformer looked up from a Map\n * <li>Instantiate - the Class input object is instantiated\n * <li>Map - returns an object from a supplied Map\n * <li>Null - always returns null\n * <li>NOP - returns the input object, which should be immutable\n * <li>Exception - always throws an exception\n * <li>StringValue - returns a <code>java.lang.String</code> representation of the input object\n * </ul>\n * <p>\n * Since v4.1 only transformers which are considered to be unsafe are\n * Serializable. Transformers considered to be unsafe for serialization are:\n * <ul>\n * <li>Invoker\n * <li>Clone\n * <li>Instantiate\n * </ul>\n *\n * @since 3.0\n * @version $Id: TransformerUtils.java 1714362 2015-11-14 20:38:02Z tn $\n */",
  "classSourceCode" : "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.commons.collections4;\n\nimport java.util.Collection;\nimport java.util.Map;\n\nimport org.apache.commons.collections4.functors.ChainedTransformer;\nimport org.apache.commons.collections4.functors.CloneTransformer;\nimport org.apache.commons.collections4.functors.ClosureTransformer;\nimport org.apache.commons.collections4.functors.ConstantTransformer;\nimport org.apache.commons.collections4.functors.EqualPredicate;\nimport org.apache.commons.collections4.functors.ExceptionTransformer;\nimport org.apache.commons.collections4.functors.FactoryTransformer;\nimport org.apache.commons.collections4.functors.IfTransformer;\nimport org.apache.commons.collections4.functors.InstantiateTransformer;\nimport org.apache.commons.collections4.functors.InvokerTransformer;\nimport org.apache.commons.collections4.functors.MapTransformer;\nimport org.apache.commons.collections4.functors.NOPTransformer;\nimport org.apache.commons.collections4.functors.PredicateTransformer;\nimport org.apache.commons.collections4.functors.StringValueTransformer;\nimport org.apache.commons.collections4.functors.SwitchTransformer;\n\n/**\n * <code>TransformerUtils</code> provides reference implementations and\n * utilities for the Transformer functor interface. The supplied transformers are:\n * <ul>\n * <li>Invoker - returns the result of a method call on the input object\n * <li>Clone - returns a clone of the input object\n * <li>Constant - always returns the same object\n * <li>Closure - performs a Closure and returns the input object\n * <li>Predicate - returns the result of the predicate as a Boolean\n * <li>Factory - returns a new object from a factory\n * <li>Chained - chains two or more transformers together\n * <li>If - calls one transformer or another based on a predicate\n * <li>Switch - calls one transformer based on one or more predicates\n * <li>SwitchMap - calls one transformer looked up from a Map\n * <li>Instantiate - the Class input object is instantiated\n * <li>Map - returns an object from a supplied Map\n * <li>Null - always returns null\n * <li>NOP - returns the input object, which should be immutable\n * <li>Exception - always throws an exception\n * <li>StringValue - returns a <code>java.lang.String</code> representation of the input object\n * </ul>\n * <p>\n * Since v4.1 only transformers which are considered to be unsafe are\n * Serializable. Transformers considered to be unsafe for serialization are:\n * <ul>\n * <li>Invoker\n * <li>Clone\n * <li>Instantiate\n * </ul>\n *\n * @since 3.0\n * @version $Id: TransformerUtils.java 1714362 2015-11-14 20:38:02Z tn $\n */\npublic class TransformerUtils {\n\n    /**\n     * This class is not normally instantiated.\n     */\n    private TransformerUtils() {}\n\n    /**\n     * Gets a transformer that always throws an exception.\n     * This could be useful during testing as a placeholder.\n     *\n     * @param <I>  the input type\n     * @param <O>  the output type\n     * @return the transformer\n     * @see ExceptionTransformer\n     */\n    public static <I, O> Transformer<I, O> exceptionTransformer() {\n        return ExceptionTransformer.exceptionTransformer();\n    }\n\n    /**\n     * Gets a transformer that always returns null.\n     *\n     * @param <I>  the input type\n     * @param <O>  the output type\n     * @return the transformer\n     * @see ConstantTransformer\n     */\n    public static <I, O> Transformer<I, O> nullTransformer() {\n        return ConstantTransformer.nullTransformer();\n    }\n\n    /**\n     * Gets a transformer that returns the input object.\n     * The input object should be immutable to maintain the\n     * contract of Transformer (although this is not checked).\n     *\n     * @param <T>  the input/output type\n     * @return the transformer\n     * @see NOPTransformer\n     */\n    public static <T> Transformer<T, T> nopTransformer() {\n        return NOPTransformer.nopTransformer();\n    }\n\n    /**\n     * Gets a transformer that returns a clone of the input object.\n     * The input object will be cloned using one of these techniques (in order):\n     * <ul>\n     * <li>public clone method\n     * <li>public copy constructor\n     * <li>serialization clone\n     * <ul>\n     *\n     * @param <T>  the input/output type\n     * @return the transformer\n     * @see CloneTransformer\n     */\n    public static <T> Transformer<T, T> cloneTransformer() {\n        return CloneTransformer.cloneTransformer();\n    }\n\n    /**\n     * Creates a Transformer that will return the same object each time the\n     * transformer is used.\n     *\n     * @param <I>  the input type\n     * @param <O>  the output type\n     * @param constantToReturn  the constant object to return each time in the transformer\n     * @return the transformer.\n     * @see ConstantTransformer\n     */\n    public static <I, O> Transformer<I, O> constantTransformer(final O constantToReturn) {\n        return ConstantTransformer.constantTransformer(constantToReturn);\n    }\n\n    /**\n     * Creates a Transformer that calls a Closure each time the transformer is used.\n     * The transformer returns the input object.\n     *\n     * @param <T>  the input/output type\n     * @param closure  the closure to run each time in the transformer, not null\n     * @return the transformer\n     * @throws NullPointerException if the closure is null\n     * @see ClosureTransformer\n     */\n    public static <T> Transformer<T, T> asTransformer(final Closure<? super T> closure) {\n        return ClosureTransformer.closureTransformer(closure);\n    }\n\n    /**\n     * Creates a Transformer that calls a Predicate each time the transformer is used.\n     * The transformer will return either Boolean.TRUE or Boolean.FALSE.\n     *\n     * @param <T>  the input type\n     * @param predicate  the predicate to run each time in the transformer, not null\n     * @return the transformer\n     * @throws NullPointerException if the predicate is null\n     * @see PredicateTransformer\n     */\n    public static <T> Transformer<T, Boolean> asTransformer(final Predicate<? super T> predicate) {\n        return PredicateTransformer.predicateTransformer(predicate);\n    }\n\n    /**\n     * Creates a Transformer that calls a Factory each time the transformer is used.\n     * The transformer will return the value returned by the factory.\n     *\n     * @param <I>  the input type\n     * @param <O>  the output type\n     * @param factory  the factory to run each time in the transformer, not null\n     * @return the transformer\n     * @throws NullPointerException if the factory is null\n     * @see FactoryTransformer\n     */\n    public static <I, O> Transformer<I, O> asTransformer(final Factory<? extends O> factory) {\n        return FactoryTransformer.factoryTransformer(factory);\n    }\n\n    /**\n     * Create a new Transformer that calls each transformer in turn, passing the\n     * result into the next transformer.\n     *\n     * @param <T>  the input/output type\n     * @param transformers  an array of transformers to chain\n     * @return the transformer\n     * @throws NullPointerException if the transformers array or any of the transformers is null\n     * @see ChainedTransformer\n     */\n    public static <T> Transformer<T, T> chainedTransformer(\n            final Transformer<? super T, ? extends T>... transformers) {\n        return ChainedTransformer.chainedTransformer(transformers);\n    }\n\n    /**\n     * Create a new Transformer that calls each transformer in turn, passing the\n     * result into the next transformer. The ordering is that of the iterator()\n     * method on the collection.\n     *\n     * @param <T>  the input/output type\n     * @param transformers  a collection of transformers to chain\n     * @return the transformer\n     * @throws NullPointerException if the transformers collection or any of the transformers is null\n     * @see ChainedTransformer\n     */\n    public static <T> Transformer<T, T> chainedTransformer(\n            final Collection<? extends Transformer<? super T, ? extends T>> transformers) {\n        return ChainedTransformer.chainedTransformer(transformers);\n    }\n\n    /**\n     * Create a new Transformer that calls the transformer if the predicate is true,\n     * otherwise the input object is returned unchanged.\n     *\n     * @param <T>  the input / output type\n     * @param predicate  the predicate to switch on\n     * @param trueTransformer  the transformer called if the predicate is true\n     * @return the transformer\n     * @throws NullPointerException if either the predicate or transformer is null\n     * @see IfTransformer\n     * @since 4.1\n     */\n    public static <T> Transformer<T, T> ifTransformer(final Predicate<? super T> predicate,\n                                                      final Transformer<? super T, ? extends T> trueTransformer) {\n        return IfTransformer.ifTransformer(predicate, trueTransformer);\n    }\n\n    /**\n     * Create a new Transformer that calls one of two transformers depending\n     * on the specified predicate.\n     *\n     * @param <I>  the input type\n     * @param <O>  the output type\n     * @param predicate  the predicate to switch on\n     * @param trueTransformer  the transformer called if the predicate is true\n     * @param falseTransformer  the transformer called if the predicate is false\n     * @return the transformer\n     * @throws NullPointerException if either the predicate or transformer is null\n     * @see IfTransformer\n     * @since 4.1\n     */\n    public static <I, O> Transformer<I, O> ifTransformer(final Predicate<? super I> predicate,\n                                                         final Transformer<? super I, ? extends O> trueTransformer,\n                                                         final Transformer<? super I, ? extends O> falseTransformer) {\n        return IfTransformer.ifTransformer(predicate, trueTransformer, falseTransformer);\n    }\n\n    /**\n     * Create a new Transformer that calls one of two transformers depending\n     * on the specified predicate.\n     *\n     * @param <I>  the input type\n     * @param <O>  the output type\n     * @param predicate  the predicate to switch on\n     * @param trueTransformer  the transformer called if the predicate is true\n     * @param falseTransformer  the transformer called if the predicate is false\n     * @return the transformer\n     * @throws NullPointerException if either the predicate or transformer is null\n     * @see SwitchTransformer\n     * @deprecated as of 4.1, use {@link #ifTransformer(Predicate, Transformer, Transformer))\n     */\n    @SuppressWarnings(\"unchecked\")\n    @Deprecated\n    public static <I, O> Transformer<I, O> switchTransformer(final Predicate<? super I> predicate,\n            final Transformer<? super I, ? extends O> trueTransformer,\n            final Transformer<? super I, ? extends O> falseTransformer) {\n        return SwitchTransformer.switchTransformer(new Predicate[] { predicate },\n                                                   new Transformer[] { trueTransformer }, falseTransformer);\n    }\n\n    /**\n     * Create a new Transformer that calls one of the transformers depending\n     * on the predicates. The transformer at array location 0 is called if the\n     * predicate at array location 0 returned true. Each predicate is evaluated\n     * until one returns true. If no predicates evaluate to true, null is returned.\n     *\n     * @param <I>  the input type\n     * @param <O>  the output type\n     * @param predicates  an array of predicates to check\n     * @param transformers  an array of transformers to call\n     * @return the transformer\n     * @throws NullPointerException if the either array is null\n     * @throws NullPointerException if any element in the arrays is null\n     * @throws IllegalArgumentException if the arrays have different sizes\n     * @see SwitchTransformer\n     */\n    public static <I, O> Transformer<I, O> switchTransformer(final Predicate<? super I>[] predicates,\n            final Transformer<? super I, ? extends O>[] transformers) {\n        return SwitchTransformer.switchTransformer(predicates, transformers, null);\n    }\n\n    /**\n     * Create a new Transformer that calls one of the transformers depending\n     * on the predicates. The transformer at array location 0 is called if the\n     * predicate at array location 0 returned true. Each predicate is evaluated\n     * until one returns true. If no predicates evaluate to true, the default\n     * transformer is called. If the default transformer is null, null is returned.\n     *\n     * @param <I>  the input type\n     * @param <O>  the output type\n     * @param predicates  an array of predicates to check\n     * @param transformers  an array of transformers to call\n     * @param defaultTransformer  the default to call if no predicate matches, null means return null\n     * @return the transformer\n     * @throws NullPointerException if the either array is null\n     * @throws NullPointerException if any element in the arrays is null\n     * @throws IllegalArgumentException if the arrays have different sizes\n     * @see SwitchTransformer\n     */\n    public static <I, O> Transformer<I, O> switchTransformer(final Predicate<? super I>[] predicates,\n            final Transformer<? super I, ? extends O>[] transformers,\n            final Transformer<? super I, ? extends O> defaultTransformer) {\n        return SwitchTransformer.switchTransformer(predicates, transformers, defaultTransformer);\n    }\n\n    /**\n     * Create a new Transformer that calls one of the transformers depending\n     * on the predicates.\n     * <p>\n     * The Map consists of Predicate keys and Transformer values. A transformer\n     * is called if its matching predicate returns true. Each predicate is evaluated\n     * until one returns true. If no predicates evaluate to true, the default\n     * transformer is called. The default transformer is set in the map with a\n     * null key. If no default transformer is set, null will be returned in a default\n     * case. The ordering is that of the iterator() method on the entryset collection\n     * of the map.\n     *\n     * @param <I>  the input type\n     * @param <O>  the output type\n     * @param predicatesAndTransformers  a map of predicates to transformers\n     * @return the transformer\n     * @throws NullPointerException if the map is null\n     * @throws NullPointerException if any transformer in the map is null\n     * @throws ClassCastException  if the map elements are of the wrong type\n     * @see SwitchTransformer\n     */\n    public static <I, O> Transformer<I, O> switchTransformer(\n            final Map<Predicate<I>, Transformer<I, O>> predicatesAndTransformers) {\n        return SwitchTransformer.switchTransformer(predicatesAndTransformers);\n    }\n\n    /**\n     * Create a new Transformer that uses the input object as a key to find the\n     * transformer to call.\n     * <p>\n     * The Map consists of object keys and Transformer values. A transformer\n     * is called if the input object equals the key. If there is no match, the\n     * default transformer is called. The default transformer is set in the map\n     * using a null key. If no default is set, null will be returned in a default case.\n     *\n     * @param <I>  the input type\n     * @param <O>  the output type\n     * @param objectsAndTransformers  a map of objects to transformers\n     * @return the transformer\n     * @throws NullPointerException if the map is null\n     * @throws NullPointerException if any transformer in the map is null\n     * @see SwitchTransformer\n     */\n    @SuppressWarnings(\"unchecked\")\n    public static <I, O> Transformer<I, O> switchMapTransformer(\n            final Map<I, Transformer<I, O>> objectsAndTransformers) {\n\n        if (objectsAndTransformers == null) {\n            throw new NullPointerException(\"The object and transformer map must not be null\");\n        }\n        final Transformer<? super I, ? extends O> def = objectsAndTransformers.remove(null);\n        final int size = objectsAndTransformers.size();\n        final Transformer<? super I, ? extends O>[] trs = new Transformer[size];\n        final Predicate<I>[] preds = new Predicate[size];\n        int i = 0;\n        for (final Map.Entry<I, Transformer<I, O>> entry : objectsAndTransformers.entrySet()) {\n            preds[i] = EqualPredicate.<I>equalPredicate(entry.getKey());\n            trs[i++] = entry.getValue();\n        }\n        return TransformerUtils.switchTransformer(preds, trs, def);\n    }\n\n    /**\n     * Gets a Transformer that expects an input Class object that it will instantiate.\n     *\n     * @param <T>  the output type\n     * @return the transformer\n     * @see InstantiateTransformer\n     */\n    public static <T> Transformer<Class<? extends T>, T> instantiateTransformer() {\n        return InstantiateTransformer.instantiateTransformer();\n    }\n\n    /**\n     * Creates a Transformer that expects an input Class object that it will\n     * instantiate. The constructor used is determined by the arguments specified\n     * to this method.\n     *\n     * @param <T>  the output type\n     * @param paramTypes  parameter types for the constructor, can be null\n     * @param args  the arguments to pass to the constructor, can be null\n     * @return the transformer\n     * @throws IllegalArgumentException if the paramTypes and args don't match\n     * @see InstantiateTransformer\n     */\n    public static <T> Transformer<Class<? extends T>, T> instantiateTransformer(\n            final Class<?>[] paramTypes, final Object[] args) {\n        return InstantiateTransformer.instantiateTransformer(paramTypes, args);\n    }\n\n    /**\n     * Creates a Transformer that uses the passed in Map to transform the input\n     * object (as a simple lookup).\n     *\n     * @param <I>  the input type\n     * @param <O>  the output type\n     * @param map  the map to use to transform the objects\n     * @return the transformer, or {@link ConstantTransformer#nullTransformer()} if the\n     *   {@code map} is {@code null}\n     * @see MapTransformer\n     */\n    public static <I, O> Transformer<I, O> mapTransformer(final Map<? super I, ? extends O> map) {\n        return MapTransformer.mapTransformer(map);\n    }\n\n    /**\n     * Gets a Transformer that invokes a method on the input object.\n     * The method must have no parameters. If the input object is null,\n     * null is returned.\n     * <p>\n     * For example, <code>TransformerUtils.invokerTransformer(\"getName\");</code>\n     * will call the <code>getName/code> method on the input object to\n     * determine the transformer result.\n     *\n     * @param <I>  the input type\n     * @param <O>  the output type\n     * @param methodName  the method name to call on the input object, may not be null\n     * @return the transformer\n     * @throws NullPointerException if the methodName is null.\n     * @see InvokerTransformer\n     */\n    public static <I, O> Transformer<I, O> invokerTransformer(final String methodName) {\n        return InvokerTransformer.invokerTransformer(methodName, null, null);\n    }\n\n    /**\n     * Gets a Transformer that invokes a method on the input object.\n     * The method parameters are specified. If the input object is {@code null},\n     * {@code null} is returned.\n     *\n     * @param <I>  the input type\n     * @param <O>  the output type\n     * @param methodName  the name of the method\n     * @param paramTypes  the parameter types\n     * @param args  the arguments\n     * @return the transformer\n     * @throws NullPointerException if the method name is null\n     * @throws IllegalArgumentException if the paramTypes and args don't match\n     * @see InvokerTransformer\n     */\n    public static <I, O> Transformer<I, O> invokerTransformer(final String methodName, final Class<?>[] paramTypes,\n                                                              final Object[] args) {\n        return InvokerTransformer.invokerTransformer(methodName, paramTypes, args);\n    }\n\n    /**\n     * Gets a transformer that returns a <code>java.lang.String</code>\n     * representation of the input object. This is achieved via the\n     * <code>toString</code> method, <code>null</code> returns 'null'.\n     *\n     * @param <T>  the input type\n     * @return the transformer\n     * @see StringValueTransformer\n     */\n    public static <T> Transformer<T, String> stringValueTransformer() {\n        return StringValueTransformer.stringValueTransformer();\n    }\n\n}\n",
  "tokensGeneralGrammar" : [ "null", "true", "false", ",", ".", ":", ";", "?", "(", ")", "jdVar", "stream", "Arrays", "allMatch", "noneMatch", "anyMatch", "~", ">>", "<<", ">>>", "|", "&", "^", "+", "-", "/", "*", "%", "&&", "||", ">=", "<=", ">", "<", "==", "!=", "instanceof", "class", "methodResultID", "this" ],
  "tokensGeneralValuesGlobalDictionary" : [ [ "0", "int" ], [ "1", "int" ], [ "-1", "int" ], [ "0.0", "double" ], [ "1.0", "double" ], [ "-1.0", "double" ], [ "\"\"", "String" ], [ "\" \"", "String" ] ],
  "tokensProjectClasses" : [ [ "BidiMap", "org.apache.commons.collections4" ], [ "Equator", "org.apache.commons.collections4" ], [ "MultiSet", "org.apache.commons.collections4" ], [ "IteratorUtils", "org.apache.commons.collections4" ], [ "ComparatorUtils", "org.apache.commons.collections4" ], [ "FunctorException", "org.apache.commons.collections4" ], [ "AbstractDualBidiMap", "org.apache.commons.collections4.bidimap" ], [ "UnmodifiableBidiMap", "org.apache.commons.collections4.bidimap" ], [ "AbstractOrderedBidiMapDecorator", "org.apache.commons.collections4.bidimap" ], [ "UnmodifiableOrderedBidiMap", "org.apache.commons.collections4.bidimap" ], [ "AbstractBidiMapDecorator", "org.apache.commons.collections4.bidimap" ], [ "DualLinkedHashBidiMap", "org.apache.commons.collections4.bidimap" ], [ "UnmodifiableSortedBidiMap", "org.apache.commons.collections4.bidimap" ], [ "AbstractSortedBidiMapDecorator", "org.apache.commons.collections4.bidimap" ], [ "DualHashBidiMap", "org.apache.commons.collections4.bidimap" ], [ "DualTreeBidiMap", "org.apache.commons.collections4.bidimap" ], [ "TreeBidiMap", "org.apache.commons.collections4.bidimap" ], [ "MultiMapUtils", "org.apache.commons.collections4" ], [ "BoundedCollection", "org.apache.commons.collections4" ], [ "UnmodifiableBoundedCollection", "org.apache.commons.collections4.collection" ], [ "CompositeCollection", "org.apache.commons.collections4.collection" ], [ "TransformedCollection", "org.apache.commons.collections4.collection" ], [ "PredicatedCollection", "org.apache.commons.collections4.collection" ], [ "IndexedCollection", "org.apache.commons.collections4.collection" ], [ "SynchronizedCollection", "org.apache.commons.collections4.collection" ], [ "UnmodifiableCollection", "org.apache.commons.collections4.collection" ], [ "AbstractCollectionDecorator", "org.apache.commons.collections4.collection" ], [ "OrderedBidiMap", "org.apache.commons.collections4" ], [ "FactoryUtils", "org.apache.commons.collections4" ], [ "IterableGet", "org.apache.commons.collections4" ], [ "ListUtils", "org.apache.commons.collections4" ], [ "Closure", "org.apache.commons.collections4" ], [ "IterableSortedMap", "org.apache.commons.collections4" ], [ "MapUtils", "org.apache.commons.collections4" ], [ "Transformer", "org.apache.commons.collections4" ], [ "DefaultEquator", "org.apache.commons.collections4.functors" ], [ "StringValueTransformer", "org.apache.commons.collections4.functors" ], [ "PredicateDecorator", "org.apache.commons.collections4.functors" ], [ "IfTransformer", "org.apache.commons.collections4.functors" ], [ "IdentityPredicate", "org.apache.commons.collections4.functors" ], [ "ExceptionClosure", "org.apache.commons.collections4.functors" ], [ "NOPClosure", "org.apache.commons.collections4.functors" ], [ "ClosureTransformer", "org.apache.commons.collections4.functors" ], [ "FunctorUtils", "org.apache.commons.collections4.functors" ], [ "TransformerPredicate", "org.apache.commons.collections4.functors" ], [ "NullPredicate", "org.apache.commons.collections4.functors" ], [ "ConstantTransformer", "org.apache.commons.collections4.functors" ], [ "PredicateTransformer", "org.apache.commons.collections4.functors" ], [ "WhileClosure", "org.apache.commons.collections4.functors" ], [ "ForClosure", "org.apache.commons.collections4.functors" ], [ "NullIsTruePredicate", "org.apache.commons.collections4.functors" ], [ "TransformedPredicate", "org.apache.commons.collections4.functors" ], [ "NonePredicate", "org.apache.commons.collections4.functors" ], [ "ExceptionTransformer", "org.apache.commons.collections4.functors" ], [ "SwitchTransformer", "org.apache.commons.collections4.functors" ], [ "TransformerClosure", "org.apache.commons.collections4.functors" ], [ "OrPredicate", "org.apache.commons.collections4.functors" ], [ "NOPTransformer", "org.apache.commons.collections4.functors" ], [ "MapTransformer", "org.apache.commons.collections4.functors" ], [ "ExceptionFactory", "org.apache.commons.collections4.functors" ], [ "ChainedClosure", "org.apache.commons.collections4.functors" ], [ "AndPredicate", "org.apache.commons.collections4.functors" ], [ "PrototypeFactory", "org.apache.commons.collections4.functors" ], [ "ExceptionPredicate", "org.apache.commons.collections4.functors" ], [ "AbstractQuantifierPredicate", "org.apache.commons.collections4.functors" ], [ "InstanceofPredicate", "org.apache.commons.collections4.functors" ], [ "InvokerTransformer", "org.apache.commons.collections4.functors" ], [ "FalsePredicate", "org.apache.commons.collections4.functors" ], [ "CloneTransformer", "org.apache.commons.collections4.functors" ], [ "NotPredicate", "org.apache.commons.collections4.functors" ], [ "ConstantFactory", "org.apache.commons.collections4.functors" ], [ "ChainedTransformer", "org.apache.commons.collections4.functors" ], [ "ComparatorPredicate", "org.apache.commons.collections4.functors" ], [ "CatchAndRethrowClosure", "org.apache.commons.collections4.functors" ], [ "AllPredicate", "org.apache.commons.collections4.functors" ], [ "NullIsFalsePredicate", "org.apache.commons.collections4.functors" ], [ "NullIsExceptionPredicate", "org.apache.commons.collections4.functors" ], [ "AnyPredicate", "org.apache.commons.collections4.functors" ], [ "TruePredicate", "org.apache.commons.collections4.functors" ], [ "FactoryTransformer", "org.apache.commons.collections4.functors" ], [ "NotNullPredicate", "org.apache.commons.collections4.functors" ], [ "SwitchClosure", "org.apache.commons.collections4.functors" ], [ "UniquePredicate", "org.apache.commons.collections4.functors" ], [ "InstantiateTransformer", "org.apache.commons.collections4.functors" ], [ "OnePredicate", "org.apache.commons.collections4.functors" ], [ "EqualPredicate", "org.apache.commons.collections4.functors" ], [ "InstantiateFactory", "org.apache.commons.collections4.functors" ], [ "IfClosure", "org.apache.commons.collections4.functors" ], [ "ResettableListIterator", "org.apache.commons.collections4" ], [ "OrderedIterator", "org.apache.commons.collections4" ], [ "ComparatorChain", "org.apache.commons.collections4.comparators" ], [ "BooleanComparator", "org.apache.commons.collections4.comparators" ], [ "ReverseComparator", "org.apache.commons.collections4.comparators" ], [ "ComparableComparator", "org.apache.commons.collections4.comparators" ], [ "TransformingComparator", "org.apache.commons.collections4.comparators" ], [ "FixedOrderComparator", "org.apache.commons.collections4.comparators" ], [ "NullComparator", "org.apache.commons.collections4.comparators" ], [ "CollectionUtils", "org.apache.commons.collections4" ], [ "ListValuedMap", "org.apache.commons.collections4" ], [ "AbstractIterableGetMapDecorator", "org.apache.commons.collections4.splitmap" ], [ "TransformedSplitMap", "org.apache.commons.collections4.splitmap" ], [ "Factory", "org.apache.commons.collections4" ], [ "IterableUtils", "org.apache.commons.collections4" ], [ "Bag", "org.apache.commons.collections4" ], [ "Predicate", "org.apache.commons.collections4" ], [ "SortedBag", "org.apache.commons.collections4" ], [ "TrieUtils", "org.apache.commons.collections4" ], [ "ClosureUtils", "org.apache.commons.collections4" ], [ "PatriciaTrie", "org.apache.commons.collections4.trie" ], [ "UnmodifiableTrie", "org.apache.commons.collections4.trie" ], [ "KeyAnalyzer", "org.apache.commons.collections4.trie" ], [ "AbstractPatriciaTrie", "org.apache.commons.collections4.trie" ], [ "AbstractBitwiseTrie", "org.apache.commons.collections4.trie" ], [ "StringKeyAnalyzer", "org.apache.commons.collections4.trie.analyzer" ], [ "TransformedSortedMap", "org.apache.commons.collections4.map" ], [ "AbstractLinkedMap", "org.apache.commons.collections4.map" ], [ "Flat3Map", "org.apache.commons.collections4.map" ], [ "PredicatedMap", "org.apache.commons.collections4.map" ], [ "FixedSizeSortedMap", "org.apache.commons.collections4.map" ], [ "UnmodifiableSortedMap", "org.apache.commons.collections4.map" ], [ "PredicatedSortedMap", "org.apache.commons.collections4.map" ], [ "DefaultedMap", "org.apache.commons.collections4.map" ], [ "ReferenceIdentityMap", "org.apache.commons.collections4.map" ], [ "AbstractSortedMapDecorator", "org.apache.commons.collections4.map" ], [ "AbstractInputCheckedMapDecorator", "org.apache.commons.collections4.map" ], [ "FixedSizeMap", "org.apache.commons.collections4.map" ], [ "LazySortedMap", "org.apache.commons.collections4.map" ], [ "UnmodifiableOrderedMap", "org.apache.commons.collections4.map" ], [ "CaseInsensitiveMap", "org.apache.commons.collections4.map" ], [ "AbstractHashedMap", "org.apache.commons.collections4.map" ], [ "AbstractOrderedMapDecorator", "org.apache.commons.collections4.map" ], [ "UnmodifiableMap", "org.apache.commons.collections4.map" ], [ "EntrySetToMapIteratorAdapter", "org.apache.commons.collections4.map" ], [ "AbstractIterableMap", "org.apache.commons.collections4.map" ], [ "ListOrderedMap", "org.apache.commons.collections4.map" ], [ "LinkedMap", "org.apache.commons.collections4.map" ], [ "SingletonMap", "org.apache.commons.collections4.map" ], [ "UnmodifiableEntrySet", "org.apache.commons.collections4.map" ], [ "StaticBucketMap", "org.apache.commons.collections4.map" ], [ "AbstractMapDecorator", "org.apache.commons.collections4.map" ], [ "AbstractReferenceMap", "org.apache.commons.collections4.map" ], [ "MultiKeyMap", "org.apache.commons.collections4.map" ], [ "HashedMap", "org.apache.commons.collections4.map" ], [ "LazyMap", "org.apache.commons.collections4.map" ], [ "PassiveExpiringMap", "org.apache.commons.collections4.map" ], [ "MultiValueMap", "org.apache.commons.collections4.map" ], [ "LRUMap", "org.apache.commons.collections4.map" ], [ "ReferenceMap", "org.apache.commons.collections4.map" ], [ "TransformedMap", "org.apache.commons.collections4.map" ], [ "CompositeMap", "org.apache.commons.collections4.map" ], [ "UnmodifiableMapEntry", "org.apache.commons.collections4.keyvalue" ], [ "MultiKey", "org.apache.commons.collections4.keyvalue" ], [ "DefaultMapEntry", "org.apache.commons.collections4.keyvalue" ], [ "DefaultKeyValue", "org.apache.commons.collections4.keyvalue" ], [ "AbstractMapEntryDecorator", "org.apache.commons.collections4.keyvalue" ], [ "AbstractKeyValue", "org.apache.commons.collections4.keyvalue" ], [ "TiedMapEntry", "org.apache.commons.collections4.keyvalue" ], [ "AbstractMapEntry", "org.apache.commons.collections4.keyvalue" ], [ "MultiSetUtils", "org.apache.commons.collections4" ], [ "MapIterator", "org.apache.commons.collections4" ], [ "AbstractMultiValuedMap", "org.apache.commons.collections4.multimap" ], [ "UnmodifiableMultiValuedMap", "org.apache.commons.collections4.multimap" ], [ "HashSetValuedHashMap", "org.apache.commons.collections4.multimap" ], [ "TransformedMultiValuedMap", "org.apache.commons.collections4.multimap" ], [ "AbstractSetValuedMap", "org.apache.commons.collections4.multimap" ], [ "AbstractListValuedMap", "org.apache.commons.collections4.multimap" ], [ "ArrayListValuedHashMap", "org.apache.commons.collections4.multimap" ], [ "AbstractMultiValuedMapDecorator", "org.apache.commons.collections4.multimap" ], [ "LazyList", "org.apache.commons.collections4.list" ], [ "AbstractSerializableListDecorator", "org.apache.commons.collections4.list" ], [ "TreeList", "org.apache.commons.collections4.list" ], [ "SetUniqueList", "org.apache.commons.collections4.list" ], [ "AbstractListDecorator", "org.apache.commons.collections4.list" ], [ "NodeCachingLinkedList", "org.apache.commons.collections4.list" ], [ "UnmodifiableList", "org.apache.commons.collections4.list" ], [ "FixedSizeList", "org.apache.commons.collections4.list" ], [ "TransformedList", "org.apache.commons.collections4.list" ], [ "GrowthList", "org.apache.commons.collections4.list" ], [ "AbstractLinkedList", "org.apache.commons.collections4.list" ], [ "CursorableLinkedList", "org.apache.commons.collections4.list" ], [ "PredicatedList", "org.apache.commons.collections4.list" ], [ "OrderedMap", "org.apache.commons.collections4" ], [ "AbstractQueueDecorator", "org.apache.commons.collections4.queue" ], [ "TransformedQueue", "org.apache.commons.collections4.queue" ], [ "UnmodifiableQueue", "org.apache.commons.collections4.queue" ], [ "CircularFifoQueue", "org.apache.commons.collections4.queue" ], [ "PredicatedQueue", "org.apache.commons.collections4.queue" ], [ "FluentIterable", "org.apache.commons.collections4" ], [ "TransformerUtils", "org.apache.commons.collections4" ], [ "PredicateUtils", "org.apache.commons.collections4" ], [ "ResettableIterator", "org.apache.commons.collections4" ], [ "MultiValuedMap", "org.apache.commons.collections4" ], [ "SetUtils", "org.apache.commons.collections4" ], [ "SortedBidiMap", "org.apache.commons.collections4" ], [ "ArrayStack", "org.apache.commons.collections4" ], [ "Put", "org.apache.commons.collections4" ], [ "OrderedMapIterator", "org.apache.commons.collections4" ], [ "TransformedSet", "org.apache.commons.collections4.set" ], [ "CompositeSet", "org.apache.commons.collections4.set" ], [ "TransformedNavigableSet", "org.apache.commons.collections4.set" ], [ "PredicatedNavigableSet", "org.apache.commons.collections4.set" ], [ "AbstractSetDecorator", "org.apache.commons.collections4.set" ], [ "ListOrderedSet", "org.apache.commons.collections4.set" ], [ "UnmodifiableSet", "org.apache.commons.collections4.set" ], [ "AbstractSerializableSetDecorator", "org.apache.commons.collections4.set" ], [ "MapBackedSet", "org.apache.commons.collections4.set" ], [ "UnmodifiableSortedSet", "org.apache.commons.collections4.set" ], [ "PredicatedSortedSet", "org.apache.commons.collections4.set" ], [ "AbstractSortedSetDecorator", "org.apache.commons.collections4.set" ], [ "PredicatedSet", "org.apache.commons.collections4.set" ], [ "AbstractNavigableSetDecorator", "org.apache.commons.collections4.set" ], [ "UnmodifiableNavigableSet", "org.apache.commons.collections4.set" ], [ "TransformedSortedSet", "org.apache.commons.collections4.set" ], [ "IterableMap", "org.apache.commons.collections4" ], [ "EnumerationUtils", "org.apache.commons.collections4" ], [ "DeleteCommand", "org.apache.commons.collections4.sequence" ], [ "ReplacementsHandler", "org.apache.commons.collections4.sequence" ], [ "InsertCommand", "org.apache.commons.collections4.sequence" ], [ "SequencesComparator", "org.apache.commons.collections4.sequence" ], [ "ReplacementsFinder", "org.apache.commons.collections4.sequence" ], [ "KeepCommand", "org.apache.commons.collections4.sequence" ], [ "EditCommand", "org.apache.commons.collections4.sequence" ], [ "CommandVisitor", "org.apache.commons.collections4.sequence" ], [ "EditScript", "org.apache.commons.collections4.sequence" ], [ "QueueUtils", "org.apache.commons.collections4" ], [ "SetValuedMap", "org.apache.commons.collections4" ], [ "SynchronizedBag", "org.apache.commons.collections4.bag" ], [ "AbstractMapBag", "org.apache.commons.collections4.bag" ], [ "CollectionBag", "org.apache.commons.collections4.bag" ], [ "UnmodifiableBag", "org.apache.commons.collections4.bag" ], [ "PredicatedSortedBag", "org.apache.commons.collections4.bag" ], [ "UnmodifiableSortedBag", "org.apache.commons.collections4.bag" ], [ "HashBag", "org.apache.commons.collections4.bag" ], [ "AbstractBagDecorator", "org.apache.commons.collections4.bag" ], [ "TransformedSortedBag", "org.apache.commons.collections4.bag" ], [ "TreeBag", "org.apache.commons.collections4.bag" ], [ "PredicatedBag", "org.apache.commons.collections4.bag" ], [ "SynchronizedSortedBag", "org.apache.commons.collections4.bag" ], [ "CollectionSortedBag", "org.apache.commons.collections4.bag" ], [ "TransformedBag", "org.apache.commons.collections4.bag" ], [ "AbstractSortedBagDecorator", "org.apache.commons.collections4.bag" ], [ "HashMultiSet", "org.apache.commons.collections4.multiset" ], [ "AbstractMultiSet", "org.apache.commons.collections4.multiset" ], [ "PredicatedMultiSet", "org.apache.commons.collections4.multiset" ], [ "AbstractMultiSetDecorator", "org.apache.commons.collections4.multiset" ], [ "AbstractMapMultiSet", "org.apache.commons.collections4.multiset" ], [ "UnmodifiableMultiSet", "org.apache.commons.collections4.multiset" ], [ "SynchronizedMultiSet", "org.apache.commons.collections4.multiset" ], [ "BagUtils", "org.apache.commons.collections4" ], [ "Unmodifiable", "org.apache.commons.collections4" ], [ "Get", "org.apache.commons.collections4" ], [ "Trie", "org.apache.commons.collections4" ], [ "MultiMap", "org.apache.commons.collections4" ], [ "KeyValue", "org.apache.commons.collections4" ], [ "IteratorChain", "org.apache.commons.collections4.iterators" ], [ "EmptyListIterator", "org.apache.commons.collections4.iterators" ], [ "UnmodifiableOrderedMapIterator", "org.apache.commons.collections4.iterators" ], [ "AbstractListIteratorDecorator", "org.apache.commons.collections4.iterators" ], [ "ZippingIterator", "org.apache.commons.collections4.iterators" ], [ "UnmodifiableIterator", "org.apache.commons.collections4.iterators" ], [ "CollatingIterator", "org.apache.commons.collections4.iterators" ], [ "UniqueFilterIterator", "org.apache.commons.collections4.iterators" ], [ "ReverseListIterator", "org.apache.commons.collections4.iterators" ], [ "BoundedIterator", "org.apache.commons.collections4.iterators" ], [ "AbstractIteratorDecorator", "org.apache.commons.collections4.iterators" ], [ "TransformIterator", "org.apache.commons.collections4.iterators" ], [ "AbstractEmptyIterator", "org.apache.commons.collections4.iterators" ], [ "NodeListIterator", "org.apache.commons.collections4.iterators" ], [ "ArrayListIterator", "org.apache.commons.collections4.iterators" ], [ "LazyIteratorChain", "org.apache.commons.collections4.iterators" ], [ "LoopingListIterator", "org.apache.commons.collections4.iterators" ], [ "PeekingIterator", "org.apache.commons.collections4.iterators" ], [ "ObjectGraphIterator", "org.apache.commons.collections4.iterators" ], [ "ArrayIterator", "org.apache.commons.collections4.iterators" ], [ "PermutationIterator", "org.apache.commons.collections4.iterators" ], [ "SingletonListIterator", "org.apache.commons.collections4.iterators" ], [ "EmptyMapIterator", "org.apache.commons.collections4.iterators" ], [ "ObjectArrayIterator", "org.apache.commons.collections4.iterators" ], [ "EnumerationIterator", "org.apache.commons.collections4.iterators" ], [ "IteratorIterable", "org.apache.commons.collections4.iterators" ], [ "AbstractEmptyMapIterator", "org.apache.commons.collections4.iterators" ], [ "LoopingIterator", "org.apache.commons.collections4.iterators" ], [ "IteratorEnumeration", "org.apache.commons.collections4.iterators" ], [ "SingletonIterator", "org.apache.commons.collections4.iterators" ], [ "ListIteratorWrapper", "org.apache.commons.collections4.iterators" ], [ "SkippingIterator", "org.apache.commons.collections4.iterators" ], [ "EmptyOrderedIterator", "org.apache.commons.collections4.iterators" ], [ "AbstractMapIteratorDecorator", "org.apache.commons.collections4.iterators" ], [ "ObjectArrayListIterator", "org.apache.commons.collections4.iterators" ], [ "UnmodifiableListIterator", "org.apache.commons.collections4.iterators" ], [ "EmptyOrderedMapIterator", "org.apache.commons.collections4.iterators" ], [ "UnmodifiableMapIterator", "org.apache.commons.collections4.iterators" ], [ "EmptyIterator", "org.apache.commons.collections4.iterators" ], [ "EntrySetMapIterator", "org.apache.commons.collections4.iterators" ], [ "PushbackIterator", "org.apache.commons.collections4.iterators" ], [ "FilterIterator", "org.apache.commons.collections4.iterators" ], [ "AbstractUntypedIteratorDecorator", "org.apache.commons.collections4.iterators" ], [ "AbstractOrderedMapIteratorDecorator", "org.apache.commons.collections4.iterators" ], [ "FilterListIterator", "org.apache.commons.collections4.iterators" ], [ "SplitMapUtils", "org.apache.commons.collections4" ], [ "BoundedMap", "org.apache.commons.collections4" ] ],
  "tokensProjectClassesNonPrivateStaticNonVoidMethods" : [ [ "emptyIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> emptyIterator()" ], [ "emptyListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> emptyListIterator()" ], [ "emptyOrderedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> OrderedIterator<E> emptyOrderedIterator()" ], [ "emptyMapIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <K, V> MapIterator<K, V> emptyMapIterator()" ], [ "emptyOrderedMapIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <K, V> OrderedMapIterator<K, V> emptyOrderedMapIterator()" ], [ "singletonIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> singletonIterator(final E object)" ], [ "singletonListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ListIterator<E> singletonListIterator(final E object)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final E... array)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final Object array)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final E[] array, final int start)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final Object array, final int start)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final E[] array, final int start, final int end)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final Object array, final int start, final int end)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final E... array)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final Object array)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final E[] array, final int start)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final Object array, final int start)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final E[] array, final int start, final int end)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final Object array, final int start, final int end)" ], [ "boundedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> BoundedIterator<E> boundedIterator(final Iterator<? extends E> iterator, long max)" ], [ "boundedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> BoundedIterator<E> boundedIterator(final Iterator<? extends E> iterator, long offset, long max)" ], [ "unmodifiableIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> unmodifiableIterator(final Iterator<E> iterator)" ], [ "unmodifiableListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ListIterator<E> unmodifiableListIterator(final ListIterator<E> listIterator)" ], [ "unmodifiableMapIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <K, V> MapIterator<K, V> unmodifiableMapIterator(final MapIterator<K, V> mapIterator)" ], [ "chainedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> chainedIterator(final Iterator<? extends E> iterator1, final Iterator<? extends E> iterator2)" ], [ "chainedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> chainedIterator(final Iterator<? extends E>... iterators)" ], [ "chainedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> chainedIterator(final Collection<Iterator<? extends E>> iterators)" ], [ "collatedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> collatedIterator(final Comparator<? super E> comparator, final Iterator<? extends E> iterator1, final Iterator<? extends E> iterator2)" ], [ "collatedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> collatedIterator(final Comparator<? super E> comparator, final Iterator<? extends E>... iterators)" ], [ "collatedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> collatedIterator(final Comparator<? super E> comparator, final Collection<Iterator<? extends E>> iterators)" ], [ "objectGraphIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> objectGraphIterator(final E root, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <I, O> Iterator<O> transformedIterator(final Iterator<? extends I> iterator, final Transformer<? super I, ? extends O> transform)" ], [ "filteredIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> filteredIterator(final Iterator<? extends E> iterator, final Predicate<? super E> predicate)" ], [ "filteredListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ListIterator<E> filteredListIterator(final ListIterator<? extends E> listIterator, final Predicate<? super E> predicate)" ], [ "loopingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> loopingIterator(final Collection<? extends E> coll)" ], [ "loopingListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> loopingListIterator(final List<E> list)" ], [ "nodeListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static NodeListIterator nodeListIterator(final NodeList nodeList)" ], [ "nodeListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static NodeListIterator nodeListIterator(final Node node)" ], [ "peekingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> peekingIterator(final Iterator<? extends E> iterator)" ], [ "pushbackIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> pushbackIterator(final Iterator<? extends E> iterator)" ], [ "skippingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> SkippingIterator<E> skippingIterator(final Iterator<E> iterator, long offset)" ], [ "zippingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ZippingIterator<E> zippingIterator(final Iterator<? extends E> a, final Iterator<? extends E> b)" ], [ "zippingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ZippingIterator<E> zippingIterator(final Iterator<? extends E> a, final Iterator<? extends E> b, final Iterator<? extends E> c)" ], [ "zippingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ZippingIterator<E> zippingIterator(final Iterator<? extends E>... iterators)" ], [ "asIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> asIterator(final Enumeration<? extends E> enumeration)" ], [ "asIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> asIterator(final Enumeration<? extends E> enumeration, final Collection<? super E> removeCollection)" ], [ "asEnumeration", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Enumeration<E> asEnumeration(final Iterator<? extends E> iterator)" ], [ "asIterable", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterable<E> asIterable(final Iterator<? extends E> iterator)" ], [ "asMultipleUseIterable", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterable<E> asMultipleUseIterable(final Iterator<? extends E> iterator)" ], [ "toListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ListIterator<E> toListIterator(final Iterator<? extends E> iterator)" ], [ "toArray", "org.apache.commons.collections4", "IteratorUtils", "public static Object[] toArray(final Iterator<?> iterator)" ], [ "toArray", "org.apache.commons.collections4", "IteratorUtils", "public static <E> E[] toArray(final Iterator<? extends E> iterator, final Class<E> arrayClass)" ], [ "toList", "org.apache.commons.collections4", "IteratorUtils", "public static <E> List<E> toList(final Iterator<? extends E> iterator)" ], [ "toList", "org.apache.commons.collections4", "IteratorUtils", "public static <E> List<E> toList(final Iterator<? extends E> iterator, final int estimatedSize)" ], [ "getIterator", "org.apache.commons.collections4", "IteratorUtils", "public static Iterator<?> getIterator(final Object obj)" ], [ "forEachButLast", "org.apache.commons.collections4", "IteratorUtils", "public static <E> E forEachButLast(final Iterator<E> iterator, final Closure<? super E> closure)" ], [ "find", "org.apache.commons.collections4", "IteratorUtils", "public static <E> E find(final Iterator<E> iterator, final Predicate<? super E> predicate)" ], [ "indexOf", "org.apache.commons.collections4", "IteratorUtils", "public static <E> int indexOf(final Iterator<E> iterator, final Predicate<? super E> predicate)" ], [ "matchesAny", "org.apache.commons.collections4", "IteratorUtils", "public static <E> boolean matchesAny(final Iterator<E> iterator, final Predicate<? super E> predicate)" ], [ "matchesAll", "org.apache.commons.collections4", "IteratorUtils", "public static <E> boolean matchesAll(final Iterator<E> iterator, final Predicate<? super E> predicate)" ], [ "isEmpty", "org.apache.commons.collections4", "IteratorUtils", "public static boolean isEmpty(final Iterator<?> iterator)" ], [ "contains", "org.apache.commons.collections4", "IteratorUtils", "public static <E> boolean contains(final Iterator<E> iterator, final Object object)" ], [ "get", "org.apache.commons.collections4", "IteratorUtils", "public static <E> E get(final Iterator<E> iterator, final int index)" ], [ "size", "org.apache.commons.collections4", "IteratorUtils", "public static int size(final Iterator<?> iterator)" ], [ "toString", "org.apache.commons.collections4", "IteratorUtils", "public static <E> String toString(final Iterator<E> iterator)" ], [ "toString", "org.apache.commons.collections4", "IteratorUtils", "public static <E> String toString(final Iterator<E> iterator, final Transformer<? super E, String> transformer)" ], [ "toString", "org.apache.commons.collections4", "IteratorUtils", "public static <E> String toString(final Iterator<E> iterator, final Transformer<? super E, String> transformer, final String delimiter, final String prefix, final String suffix)" ], [ "naturalComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E extends Comparable<? super E>> Comparator<E> naturalComparator()" ], [ "chainedComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> Comparator<E> chainedComparator(final Comparator<E>... comparators)" ], [ "chainedComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> Comparator<E> chainedComparator(final Collection<Comparator<E>> comparators)" ], [ "reversedComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> Comparator<E> reversedComparator(final Comparator<E> comparator)" ], [ "booleanComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static Comparator<Boolean> booleanComparator(final boolean trueFirst)" ], [ "nullLowComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> Comparator<E> nullLowComparator(Comparator<E> comparator)" ], [ "nullHighComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> Comparator<E> nullHighComparator(Comparator<E> comparator)" ], [ "transformedComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <I, O> Comparator<I> transformedComparator(Comparator<O> comparator, final Transformer<? super I, ? extends O> transformer)" ], [ "min", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> E min(final E o1, final E o2, Comparator<E> comparator)" ], [ "max", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> E max(final E o1, final E o2, Comparator<E> comparator)" ], [ "unmodifiableBidiMap", "org.apache.commons.collections4.bidimap", "UnmodifiableBidiMap", "public static <K, V> BidiMap<K, V> unmodifiableBidiMap(final BidiMap<? extends K, ? extends V> map)" ], [ "unmodifiableOrderedBidiMap", "org.apache.commons.collections4.bidimap", "UnmodifiableOrderedBidiMap", "public static <K, V> OrderedBidiMap<K, V> unmodifiableOrderedBidiMap(final OrderedBidiMap<? extends K, ? extends V> map)" ], [ "unmodifiableSortedBidiMap", "org.apache.commons.collections4.bidimap", "UnmodifiableSortedBidiMap", "public static <K, V> SortedBidiMap<K, V> unmodifiableSortedBidiMap(final SortedBidiMap<K, ? extends V> map)" ], [ "emptyMultiValuedMap", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> MultiValuedMap<K, V> emptyMultiValuedMap()" ], [ "emptyIfNull", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> MultiValuedMap<K, V> emptyIfNull(final MultiValuedMap<K, V> map)" ], [ "isEmpty", "org.apache.commons.collections4", "MultiMapUtils", "public static boolean isEmpty(final MultiValuedMap<?, ?> map)" ], [ "getCollection", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> Collection<V> getCollection(final MultiValuedMap<K, V> map, final K key)" ], [ "getValuesAsList", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> List<V> getValuesAsList(final MultiValuedMap<K, V> map, final K key)" ], [ "getValuesAsSet", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> Set<V> getValuesAsSet(final MultiValuedMap<K, V> map, final K key)" ], [ "getValuesAsBag", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> Bag<V> getValuesAsBag(final MultiValuedMap<K, V> map, final K key)" ], [ "newListValuedHashMap", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> ListValuedMap<K, V> newListValuedHashMap()" ], [ "newSetValuedHashMap", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> SetValuedMap<K, V> newSetValuedHashMap()" ], [ "unmodifiableMultiValuedMap", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> MultiValuedMap<K, V> unmodifiableMultiValuedMap(final MultiValuedMap<? extends K, ? extends V> map)" ], [ "transformedMultiValuedMap", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> MultiValuedMap<K, V> transformedMultiValuedMap(final MultiValuedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "unmodifiableBoundedCollection", "org.apache.commons.collections4.collection", "UnmodifiableBoundedCollection", "public static <E> BoundedCollection<E> unmodifiableBoundedCollection(final BoundedCollection<? extends E> coll)" ], [ "unmodifiableBoundedCollection", "org.apache.commons.collections4.collection", "UnmodifiableBoundedCollection", "public static <E> BoundedCollection<E> unmodifiableBoundedCollection(Collection<? extends E> coll)" ], [ "transformingCollection", "org.apache.commons.collections4.collection", "TransformedCollection", "public static <E> TransformedCollection<E> transformingCollection(final Collection<E> coll, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedCollection", "org.apache.commons.collections4.collection", "TransformedCollection", "public static <E> TransformedCollection<E> transformedCollection(final Collection<E> collection, final Transformer<? super E, ? extends E> transformer)" ], [ "builder", "org.apache.commons.collections4.collection", "PredicatedCollection", "public static <E> Builder<E> builder(final Predicate<? super E> predicate)" ], [ "notNullBuilder", "org.apache.commons.collections4.collection", "PredicatedCollection", "public static <E> Builder<E> notNullBuilder()" ], [ "predicatedCollection", "org.apache.commons.collections4.collection", "PredicatedCollection", "public static <T> PredicatedCollection<T> predicatedCollection(final Collection<T> coll, final Predicate<? super T> predicate)" ], [ "uniqueIndexedCollection", "org.apache.commons.collections4.collection", "IndexedCollection", "public static <K, C> IndexedCollection<K, C> uniqueIndexedCollection(final Collection<C> coll, final Transformer<C, K> keyTransformer)" ], [ "nonUniqueIndexedCollection", "org.apache.commons.collections4.collection", "IndexedCollection", "public static <K, C> IndexedCollection<K, C> nonUniqueIndexedCollection(final Collection<C> coll, final Transformer<C, K> keyTransformer)" ], [ "synchronizedCollection", "org.apache.commons.collections4.collection", "SynchronizedCollection", "public static <T> SynchronizedCollection<T> synchronizedCollection(final Collection<T> coll)" ], [ "unmodifiableCollection", "org.apache.commons.collections4.collection", "UnmodifiableCollection", "public static <T> Collection<T> unmodifiableCollection(final Collection<? extends T> coll)" ], [ "exceptionFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> exceptionFactory()" ], [ "nullFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> nullFactory()" ], [ "constantFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> constantFactory(final T constantToReturn)" ], [ "prototypeFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> prototypeFactory(final T prototype)" ], [ "instantiateFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> instantiateFactory(final Class<T> classToInstantiate)" ], [ "instantiateFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> instantiateFactory(final Class<T> classToInstantiate, final Class<?>[] paramTypes, final Object[] args)" ], [ "emptyIfNull", "org.apache.commons.collections4", "ListUtils", "public static <T> List<T> emptyIfNull(final List<T> list)" ], [ "defaultIfNull", "org.apache.commons.collections4", "ListUtils", "public static <T> List<T> defaultIfNull(final List<T> list, final List<T> defaultList)" ], [ "intersection", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> intersection(final List<? extends E> list1, final List<? extends E> list2)" ], [ "subtract", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> subtract(final List<E> list1, final List<? extends E> list2)" ], [ "sum", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> sum(final List<? extends E> list1, final List<? extends E> list2)" ], [ "union", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> union(final List<? extends E> list1, final List<? extends E> list2)" ], [ "select", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> select(final Collection<? extends E> inputCollection, final Predicate<? super E> predicate)" ], [ "selectRejected", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> selectRejected(final Collection<? extends E> inputCollection, final Predicate<? super E> predicate)" ], [ "isEqualList", "org.apache.commons.collections4", "ListUtils", "public static boolean isEqualList(final Collection<?> list1, final Collection<?> list2)" ], [ "hashCodeForList", "org.apache.commons.collections4", "ListUtils", "public static int hashCodeForList(final Collection<?> list)" ], [ "retainAll", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> retainAll(final Collection<E> collection, final Collection<?> retain)" ], [ "removeAll", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> removeAll(final Collection<E> collection, final Collection<?> remove)" ], [ "synchronizedList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> synchronizedList(final List<E> list)" ], [ "unmodifiableList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> unmodifiableList(final List<? extends E> list)" ], [ "predicatedList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> predicatedList(final List<E> list, final Predicate<E> predicate)" ], [ "transformedList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> transformedList(final List<E> list, final Transformer<? super E, ? extends E> transformer)" ], [ "lazyList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> lazyList(final List<E> list, final Factory<? extends E> factory)" ], [ "fixedSizeList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> fixedSizeList(final List<E> list)" ], [ "indexOf", "org.apache.commons.collections4", "ListUtils", "public static <E> int indexOf(final List<E> list, final Predicate<E> predicate)" ], [ "longestCommonSubsequence", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> longestCommonSubsequence(final List<E> a, final List<E> b)" ], [ "longestCommonSubsequence", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> longestCommonSubsequence(final List<E> a, final List<E> b, final Equator<? super E> equator)" ], [ "longestCommonSubsequence", "org.apache.commons.collections4", "ListUtils", "public static String longestCommonSubsequence(final CharSequence a, final CharSequence b)" ], [ "partition", "org.apache.commons.collections4", "ListUtils", "public static <T> List<List<T>> partition(final List<T> list, final int size)" ], [ "getObject", "org.apache.commons.collections4", "MapUtils", "public static <K, V> V getObject(final Map<? super K, V> map, final K key)" ], [ "getString", "org.apache.commons.collections4", "MapUtils", "public static <K> String getString(final Map<? super K, ?> map, final K key)" ], [ "getBoolean", "org.apache.commons.collections4", "MapUtils", "public static <K> Boolean getBoolean(final Map<? super K, ?> map, final K key)" ], [ "getNumber", "org.apache.commons.collections4", "MapUtils", "public static <K> Number getNumber(final Map<? super K, ?> map, final K key)" ], [ "getByte", "org.apache.commons.collections4", "MapUtils", "public static <K> Byte getByte(final Map<? super K, ?> map, final K key)" ], [ "getShort", "org.apache.commons.collections4", "MapUtils", "public static <K> Short getShort(final Map<? super K, ?> map, final K key)" ], [ "getInteger", "org.apache.commons.collections4", "MapUtils", "public static <K> Integer getInteger(final Map<? super K, ?> map, final K key)" ], [ "getLong", "org.apache.commons.collections4", "MapUtils", "public static <K> Long getLong(final Map<? super K, ?> map, final K key)" ], [ "getFloat", "org.apache.commons.collections4", "MapUtils", "public static <K> Float getFloat(final Map<? super K, ?> map, final K key)" ], [ "getDouble", "org.apache.commons.collections4", "MapUtils", "public static <K> Double getDouble(final Map<? super K, ?> map, final K key)" ], [ "getMap", "org.apache.commons.collections4", "MapUtils", "public static <K> Map<?, ?> getMap(final Map<? super K, ?> map, final K key)" ], [ "getObject", "org.apache.commons.collections4", "MapUtils", "public static <K, V> V getObject(final Map<K, V> map, final K key, final V defaultValue)" ], [ "getString", "org.apache.commons.collections4", "MapUtils", "public static <K> String getString(final Map<? super K, ?> map, final K key, final String defaultValue)" ], [ "getBoolean", "org.apache.commons.collections4", "MapUtils", "public static <K> Boolean getBoolean(final Map<? super K, ?> map, final K key, final Boolean defaultValue)" ], [ "getNumber", "org.apache.commons.collections4", "MapUtils", "public static <K> Number getNumber(final Map<? super K, ?> map, final K key, final Number defaultValue)" ], [ "getByte", "org.apache.commons.collections4", "MapUtils", "public static <K> Byte getByte(final Map<? super K, ?> map, final K key, final Byte defaultValue)" ], [ "getShort", "org.apache.commons.collections4", "MapUtils", "public static <K> Short getShort(final Map<? super K, ?> map, final K key, final Short defaultValue)" ], [ "getInteger", "org.apache.commons.collections4", "MapUtils", "public static <K> Integer getInteger(final Map<? super K, ?> map, final K key, final Integer defaultValue)" ], [ "getLong", "org.apache.commons.collections4", "MapUtils", "public static <K> Long getLong(final Map<? super K, ?> map, final K key, final Long defaultValue)" ], [ "getFloat", "org.apache.commons.collections4", "MapUtils", "public static <K> Float getFloat(final Map<? super K, ?> map, final K key, final Float defaultValue)" ], [ "getDouble", "org.apache.commons.collections4", "MapUtils", "public static <K> Double getDouble(final Map<? super K, ?> map, final K key, final Double defaultValue)" ], [ "getMap", "org.apache.commons.collections4", "MapUtils", "public static <K> Map<?, ?> getMap(final Map<? super K, ?> map, final K key, final Map<?, ?> defaultValue)" ], [ "getBooleanValue", "org.apache.commons.collections4", "MapUtils", "public static <K> boolean getBooleanValue(final Map<? super K, ?> map, final K key)" ], [ "getByteValue", "org.apache.commons.collections4", "MapUtils", "public static <K> byte getByteValue(final Map<? super K, ?> map, final K key)" ], [ "getShortValue", "org.apache.commons.collections4", "MapUtils", "public static <K> short getShortValue(final Map<? super K, ?> map, final K key)" ], [ "getIntValue", "org.apache.commons.collections4", "MapUtils", "public static <K> int getIntValue(final Map<? super K, ?> map, final K key)" ], [ "getLongValue", "org.apache.commons.collections4", "MapUtils", "public static <K> long getLongValue(final Map<? super K, ?> map, final K key)" ], [ "getFloatValue", "org.apache.commons.collections4", "MapUtils", "public static <K> float getFloatValue(final Map<? super K, ?> map, final K key)" ], [ "getDoubleValue", "org.apache.commons.collections4", "MapUtils", "public static <K> double getDoubleValue(final Map<? super K, ?> map, final K key)" ], [ "getBooleanValue", "org.apache.commons.collections4", "MapUtils", "public static <K> boolean getBooleanValue(final Map<? super K, ?> map, final K key, final boolean defaultValue)" ], [ "getByteValue", "org.apache.commons.collections4", "MapUtils", "public static <K> byte getByteValue(final Map<? super K, ?> map, final K key, final byte defaultValue)" ], [ "getShortValue", "org.apache.commons.collections4", "MapUtils", "public static <K> short getShortValue(final Map<? super K, ?> map, final K key, final short defaultValue)" ], [ "getIntValue", "org.apache.commons.collections4", "MapUtils", "public static <K> int getIntValue(final Map<? super K, ?> map, final K key, final int defaultValue)" ], [ "getLongValue", "org.apache.commons.collections4", "MapUtils", "public static <K> long getLongValue(final Map<? super K, ?> map, final K key, final long defaultValue)" ], [ "getFloatValue", "org.apache.commons.collections4", "MapUtils", "public static <K> float getFloatValue(final Map<? super K, ?> map, final K key, final float defaultValue)" ], [ "getDoubleValue", "org.apache.commons.collections4", "MapUtils", "public static <K> double getDoubleValue(final Map<? super K, ?> map, final K key, final double defaultValue)" ], [ "toProperties", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Properties toProperties(final Map<K, V> map)" ], [ "toMap", "org.apache.commons.collections4", "MapUtils", "public static Map<String, Object> toMap(final ResourceBundle resourceBundle)" ], [ "invertMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Map<V, K> invertMap(final Map<K, V> map)" ], [ "putAll", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Map<K, V> putAll(final Map<K, V> map, final Object[] array)" ], [ "emptyIfNull", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Map<K, V> emptyIfNull(final Map<K, V> map)" ], [ "isEmpty", "org.apache.commons.collections4", "MapUtils", "public static boolean isEmpty(final Map<?, ?> map)" ], [ "isNotEmpty", "org.apache.commons.collections4", "MapUtils", "public static boolean isNotEmpty(final Map<?, ?> map)" ], [ "synchronizedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Map<K, V> synchronizedMap(final Map<K, V> map)" ], [ "unmodifiableMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Map<K, V> unmodifiableMap(final Map<? extends K, ? extends V> map)" ], [ "predicatedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> predicatedMap(final Map<K, V> map, final Predicate<? super K> keyPred, final Predicate<? super V> valuePred)" ], [ "transformedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> transformedMap(final Map<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "fixedSizeMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> fixedSizeMap(final Map<K, V> map)" ], [ "lazyMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> lazyMap(final Map<K, V> map, final Factory<? extends V> factory)" ], [ "lazyMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> lazyMap(final Map<K, V> map, final Transformer<? super K, ? extends V> transformerFactory)" ], [ "orderedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> OrderedMap<K, V> orderedMap(final Map<K, V> map)" ], [ "multiValueMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> MultiValueMap<K, V> multiValueMap(final Map<K, ? super Collection<V>> map)" ], [ "multiValueMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V, C extends Collection<V>> MultiValueMap<K, V> multiValueMap(final Map<K, C> map, final Class<C> collectionClass)" ], [ "multiValueMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V, C extends Collection<V>> MultiValueMap<K, V> multiValueMap(final Map<K, C> map, final Factory<C> collectionFactory)" ], [ "synchronizedSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> synchronizedSortedMap(final SortedMap<K, V> map)" ], [ "unmodifiableSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> unmodifiableSortedMap(final SortedMap<K, ? extends V> map)" ], [ "predicatedSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> predicatedSortedMap(final SortedMap<K, V> map, final Predicate<? super K> keyPred, final Predicate<? super V> valuePred)" ], [ "transformedSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> transformedSortedMap(final SortedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "fixedSizeSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> fixedSizeSortedMap(final SortedMap<K, V> map)" ], [ "lazySortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> lazySortedMap(final SortedMap<K, V> map, final Factory<? extends V> factory)" ], [ "lazySortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> lazySortedMap(final SortedMap<K, V> map, final Transformer<? super K, ? extends V> transformerFactory)" ], [ "iterableMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> iterableMap(final Map<K, V> map)" ], [ "iterableSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableSortedMap<K, V> iterableSortedMap(final SortedMap<K, V> sortedMap)" ], [ "defaultEquator", "org.apache.commons.collections4.functors", "DefaultEquator", "public static <T> DefaultEquator<T> defaultEquator()" ], [ "stringValueTransformer", "org.apache.commons.collections4.functors", "StringValueTransformer", "public static <T> Transformer<T, String> stringValueTransformer()" ], [ "ifTransformer", "org.apache.commons.collections4.functors", "IfTransformer", "public static <I, O> Transformer<I, O> ifTransformer(final Predicate<? super I> predicate, final Transformer<? super I, ? extends O> trueTransformer, final Transformer<? super I, ? extends O> falseTransformer)" ], [ "ifTransformer", "org.apache.commons.collections4.functors", "IfTransformer", "public static <T> Transformer<T, T> ifTransformer(final Predicate<? super T> predicate, final Transformer<? super T, ? extends T> trueTransformer)" ], [ "identityPredicate", "org.apache.commons.collections4.functors", "IdentityPredicate", "public static <T> Predicate<T> identityPredicate(final T object)" ], [ "exceptionClosure", "org.apache.commons.collections4.functors", "ExceptionClosure", "public static <E> Closure<E> exceptionClosure()" ], [ "nopClosure", "org.apache.commons.collections4.functors", "NOPClosure", "public static <E> Closure<E> nopClosure()" ], [ "closureTransformer", "org.apache.commons.collections4.functors", "ClosureTransformer", "public static <T> Transformer<T, T> closureTransformer(final Closure<? super T> closure)" ], [ "copy", "org.apache.commons.collections4.functors", "FunctorUtils", "static <T> Predicate<T>[] copy(final Predicate<? super T>... predicates)" ], [ "coerce", "org.apache.commons.collections4.functors", "FunctorUtils", "static <T> Predicate<T> coerce(final Predicate<? super T> predicate)" ], [ "validate", "org.apache.commons.collections4.functors", "FunctorUtils", "static <T> Predicate<? super T>[] validate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "copy", "org.apache.commons.collections4.functors", "FunctorUtils", "static <E> Closure<E>[] copy(final Closure<? super E>... closures)" ], [ "coerce", "org.apache.commons.collections4.functors", "FunctorUtils", "static <T> Closure<T> coerce(final Closure<? super T> closure)" ], [ "copy", "org.apache.commons.collections4.functors", "FunctorUtils", "static <I, O> Transformer<I, O>[] copy(final Transformer<? super I, ? extends O>... transformers)" ], [ "coerce", "org.apache.commons.collections4.functors", "FunctorUtils", "static <I, O> Transformer<I, O> coerce(final Transformer<? super I, ? extends O> transformer)" ], [ "transformerPredicate", "org.apache.commons.collections4.functors", "TransformerPredicate", "public static <T> Predicate<T> transformerPredicate(final Transformer<? super T, Boolean> transformer)" ], [ "nullPredicate", "org.apache.commons.collections4.functors", "NullPredicate", "public static <T> Predicate<T> nullPredicate()" ], [ "nullTransformer", "org.apache.commons.collections4.functors", "ConstantTransformer", "public static <I, O> Transformer<I, O> nullTransformer()" ], [ "constantTransformer", "org.apache.commons.collections4.functors", "ConstantTransformer", "public static <I, O> Transformer<I, O> constantTransformer(final O constantToReturn)" ], [ "predicateTransformer", "org.apache.commons.collections4.functors", "PredicateTransformer", "public static <T> Transformer<T, Boolean> predicateTransformer(final Predicate<? super T> predicate)" ], [ "whileClosure", "org.apache.commons.collections4.functors", "WhileClosure", "public static <E> Closure<E> whileClosure(final Predicate<? super E> predicate, final Closure<? super E> closure, final boolean doLoop)" ], [ "forClosure", "org.apache.commons.collections4.functors", "ForClosure", "public static <E> Closure<E> forClosure(final int count, final Closure<? super E> closure)" ], [ "nullIsTruePredicate", "org.apache.commons.collections4.functors", "NullIsTruePredicate", "public static <T> Predicate<T> nullIsTruePredicate(final Predicate<? super T> predicate)" ], [ "transformedPredicate", "org.apache.commons.collections4.functors", "TransformedPredicate", "public static <T> Predicate<T> transformedPredicate(final Transformer<? super T, ? extends T> transformer, final Predicate<? super T> predicate)" ], [ "nonePredicate", "org.apache.commons.collections4.functors", "NonePredicate", "public static <T> Predicate<T> nonePredicate(final Predicate<? super T>... predicates)" ], [ "nonePredicate", "org.apache.commons.collections4.functors", "NonePredicate", "public static <T> Predicate<T> nonePredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "exceptionTransformer", "org.apache.commons.collections4.functors", "ExceptionTransformer", "public static <I, O> Transformer<I, O> exceptionTransformer()" ], [ "switchTransformer", "org.apache.commons.collections4.functors", "SwitchTransformer", "public static <I, O> Transformer<I, O> switchTransformer(final Predicate<? super I>[] predicates, final Transformer<? super I, ? extends O>[] transformers, final Transformer<? super I, ? extends O> defaultTransformer)" ], [ "switchTransformer", "org.apache.commons.collections4.functors", "SwitchTransformer", "public static <I, O> Transformer<I, O> switchTransformer(final Map<? extends Predicate<? super I>, ? extends Transformer<? super I, ? extends O>> map)" ], [ "transformerClosure", "org.apache.commons.collections4.functors", "TransformerClosure", "public static <E> Closure<E> transformerClosure(final Transformer<? super E, ?> transformer)" ], [ "orPredicate", "org.apache.commons.collections4.functors", "OrPredicate", "public static <T> Predicate<T> orPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "nopTransformer", "org.apache.commons.collections4.functors", "NOPTransformer", "public static <T> Transformer<T, T> nopTransformer()" ], [ "mapTransformer", "org.apache.commons.collections4.functors", "MapTransformer", "public static <I, O> Transformer<I, O> mapTransformer(final Map<? super I, ? extends O> map)" ], [ "exceptionFactory", "org.apache.commons.collections4.functors", "ExceptionFactory", "public static <T> Factory<T> exceptionFactory()" ], [ "chainedClosure", "org.apache.commons.collections4.functors", "ChainedClosure", "public static <E> Closure<E> chainedClosure(final Closure<? super E>... closures)" ], [ "chainedClosure", "org.apache.commons.collections4.functors", "ChainedClosure", "public static <E> Closure<E> chainedClosure(final Collection<? extends Closure<? super E>> closures)" ], [ "andPredicate", "org.apache.commons.collections4.functors", "AndPredicate", "public static <T> Predicate<T> andPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "prototypeFactory", "org.apache.commons.collections4.functors", "PrototypeFactory", "public static <T> Factory<T> prototypeFactory(final T prototype)" ], [ "exceptionPredicate", "org.apache.commons.collections4.functors", "ExceptionPredicate", "public static <T> Predicate<T> exceptionPredicate()" ], [ "instanceOfPredicate", "org.apache.commons.collections4.functors", "InstanceofPredicate", "public static Predicate<Object> instanceOfPredicate(final Class<?> type)" ], [ "invokerTransformer", "org.apache.commons.collections4.functors", "InvokerTransformer", "public static <I, O> Transformer<I, O> invokerTransformer(final String methodName)" ], [ "invokerTransformer", "org.apache.commons.collections4.functors", "InvokerTransformer", "public static <I, O> Transformer<I, O> invokerTransformer(final String methodName, final Class<?>[] paramTypes, final Object[] args)" ], [ "falsePredicate", "org.apache.commons.collections4.functors", "FalsePredicate", "public static <T> Predicate<T> falsePredicate()" ], [ "cloneTransformer", "org.apache.commons.collections4.functors", "CloneTransformer", "public static <T> Transformer<T, T> cloneTransformer()" ], [ "notPredicate", "org.apache.commons.collections4.functors", "NotPredicate", "public static <T> Predicate<T> notPredicate(final Predicate<? super T> predicate)" ], [ "constantFactory", "org.apache.commons.collections4.functors", "ConstantFactory", "public static <T> Factory<T> constantFactory(final T constantToReturn)" ], [ "chainedTransformer", "org.apache.commons.collections4.functors", "ChainedTransformer", "public static <T> Transformer<T, T> chainedTransformer(final Transformer<? super T, ? extends T>... transformers)" ], [ "chainedTransformer", "org.apache.commons.collections4.functors", "ChainedTransformer", "public static <T> Transformer<T, T> chainedTransformer(final Collection<? extends Transformer<? super T, ? extends T>> transformers)" ], [ "comparatorPredicate", "org.apache.commons.collections4.functors", "ComparatorPredicate", "public static <T> Predicate<T> comparatorPredicate(final T object, final Comparator<T> comparator)" ], [ "comparatorPredicate", "org.apache.commons.collections4.functors", "ComparatorPredicate", "public static <T> Predicate<T> comparatorPredicate(final T object, final Comparator<T> comparator, final Criterion criterion)" ], [ "allPredicate", "org.apache.commons.collections4.functors", "AllPredicate", "public static <T> Predicate<T> allPredicate(final Predicate<? super T>... predicates)" ], [ "allPredicate", "org.apache.commons.collections4.functors", "AllPredicate", "public static <T> Predicate<T> allPredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "nullIsFalsePredicate", "org.apache.commons.collections4.functors", "NullIsFalsePredicate", "public static <T> Predicate<T> nullIsFalsePredicate(final Predicate<? super T> predicate)" ], [ "nullIsExceptionPredicate", "org.apache.commons.collections4.functors", "NullIsExceptionPredicate", "public static <T> Predicate<T> nullIsExceptionPredicate(final Predicate<? super T> predicate)" ], [ "anyPredicate", "org.apache.commons.collections4.functors", "AnyPredicate", "public static <T> Predicate<T> anyPredicate(final Predicate<? super T>... predicates)" ], [ "anyPredicate", "org.apache.commons.collections4.functors", "AnyPredicate", "public static <T> Predicate<T> anyPredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "truePredicate", "org.apache.commons.collections4.functors", "TruePredicate", "public static <T> Predicate<T> truePredicate()" ], [ "factoryTransformer", "org.apache.commons.collections4.functors", "FactoryTransformer", "public static <I, O> Transformer<I, O> factoryTransformer(final Factory<? extends O> factory)" ], [ "notNullPredicate", "org.apache.commons.collections4.functors", "NotNullPredicate", "public static <T> Predicate<T> notNullPredicate()" ], [ "switchClosure", "org.apache.commons.collections4.functors", "SwitchClosure", "public static <E> Closure<E> switchClosure(final Predicate<? super E>[] predicates, final Closure<? super E>[] closures, final Closure<? super E> defaultClosure)" ], [ "switchClosure", "org.apache.commons.collections4.functors", "SwitchClosure", "public static <E> Closure<E> switchClosure(final Map<Predicate<E>, Closure<E>> predicatesAndClosures)" ], [ "uniquePredicate", "org.apache.commons.collections4.functors", "UniquePredicate", "public static <T> Predicate<T> uniquePredicate()" ], [ "instantiateTransformer", "org.apache.commons.collections4.functors", "InstantiateTransformer", "public static <T> Transformer<Class<? extends T>, T> instantiateTransformer()" ], [ "instantiateTransformer", "org.apache.commons.collections4.functors", "InstantiateTransformer", "public static <T> Transformer<Class<? extends T>, T> instantiateTransformer(final Class<?>[] paramTypes, final Object[] args)" ], [ "onePredicate", "org.apache.commons.collections4.functors", "OnePredicate", "public static <T> Predicate<T> onePredicate(final Predicate<? super T>... predicates)" ], [ "onePredicate", "org.apache.commons.collections4.functors", "OnePredicate", "public static <T> Predicate<T> onePredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "equalPredicate", "org.apache.commons.collections4.functors", "EqualPredicate", "public static <T> Predicate<T> equalPredicate(final T object)" ], [ "equalPredicate", "org.apache.commons.collections4.functors", "EqualPredicate", "public static <T> Predicate<T> equalPredicate(final T object, final Equator<T> equator)" ], [ "instantiateFactory", "org.apache.commons.collections4.functors", "InstantiateFactory", "public static <T> Factory<T> instantiateFactory(final Class<T> classToInstantiate, final Class<?>[] paramTypes, final Object[] args)" ], [ "ifClosure", "org.apache.commons.collections4.functors", "IfClosure", "public static <E> Closure<E> ifClosure(final Predicate<? super E> predicate, final Closure<? super E> trueClosure)" ], [ "ifClosure", "org.apache.commons.collections4.functors", "IfClosure", "public static <E> Closure<E> ifClosure(final Predicate<? super E> predicate, final Closure<? super E> trueClosure, final Closure<? super E> falseClosure)" ], [ "getTrueFirstComparator", "org.apache.commons.collections4.comparators", "BooleanComparator", "public static BooleanComparator getTrueFirstComparator()" ], [ "getFalseFirstComparator", "org.apache.commons.collections4.comparators", "BooleanComparator", "public static BooleanComparator getFalseFirstComparator()" ], [ "booleanComparator", "org.apache.commons.collections4.comparators", "BooleanComparator", "public static BooleanComparator booleanComparator(final boolean trueFirst)" ], [ "comparableComparator", "org.apache.commons.collections4.comparators", "ComparableComparator", "public static <E extends Comparable<? super E>> ComparableComparator<E> comparableComparator()" ], [ "emptyCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <T> Collection<T> emptyCollection()" ], [ "emptyIfNull", "org.apache.commons.collections4", "CollectionUtils", "public static <T> Collection<T> emptyIfNull(final Collection<T> collection)" ], [ "union", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> union(final Iterable<? extends O> a, final Iterable<? extends O> b)" ], [ "intersection", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> intersection(final Iterable<? extends O> a, final Iterable<? extends O> b)" ], [ "disjunction", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> disjunction(final Iterable<? extends O> a, final Iterable<? extends O> b)" ], [ "subtract", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> subtract(final Iterable<? extends O> a, final Iterable<? extends O> b)" ], [ "subtract", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> subtract(final Iterable<? extends O> a, final Iterable<? extends O> b, final Predicate<O> p)" ], [ "containsAll", "org.apache.commons.collections4", "CollectionUtils", "public static boolean containsAll(final Collection<?> coll1, final Collection<?> coll2)" ], [ "containsAny", "org.apache.commons.collections4", "CollectionUtils", "public static boolean containsAny(final Collection<?> coll1, final Collection<?> coll2)" ], [ "getCardinalityMap", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Map<O, Integer> getCardinalityMap(final Iterable<? extends O> coll)" ], [ "isSubCollection", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isSubCollection(final Collection<?> a, final Collection<?> b)" ], [ "isProperSubCollection", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isProperSubCollection(final Collection<?> a, final Collection<?> b)" ], [ "isEqualCollection", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isEqualCollection(final Collection<?> a, final Collection<?> b)" ], [ "isEqualCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <E> boolean isEqualCollection(final Collection<? extends E> a, final Collection<? extends E> b, final Equator<? super E> equator)" ], [ "cardinality", "org.apache.commons.collections4", "CollectionUtils", "public static <O> int cardinality(final O obj, final Iterable<? super O> coll)" ], [ "find", "org.apache.commons.collections4", "CollectionUtils", "public static <T> T find(final Iterable<T> collection, final Predicate<? super T> predicate)" ], [ "forAllDo", "org.apache.commons.collections4", "CollectionUtils", "public static <T, C extends Closure<? super T>> C forAllDo(final Iterable<T> collection, final C closure)" ], [ "forAllDo", "org.apache.commons.collections4", "CollectionUtils", "public static <T, C extends Closure<? super T>> C forAllDo(final Iterator<T> iterator, final C closure)" ], [ "forAllButLastDo", "org.apache.commons.collections4", "CollectionUtils", "public static <T, C extends Closure<? super T>> T forAllButLastDo(final Iterable<T> collection, final C closure)" ], [ "forAllButLastDo", "org.apache.commons.collections4", "CollectionUtils", "public static <T, C extends Closure<? super T>> T forAllButLastDo(final Iterator<T> iterator, final C closure)" ], [ "filter", "org.apache.commons.collections4", "CollectionUtils", "public static <T> boolean filter(final Iterable<T> collection, final Predicate<? super T> predicate)" ], [ "filterInverse", "org.apache.commons.collections4", "CollectionUtils", "public static <T> boolean filterInverse(final Iterable<T> collection, final Predicate<? super T> predicate)" ], [ "countMatches", "org.apache.commons.collections4", "CollectionUtils", "public static <C> int countMatches(final Iterable<C> input, final Predicate<? super C> predicate)" ], [ "exists", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean exists(final Iterable<C> input, final Predicate<? super C> predicate)" ], [ "matchesAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean matchesAll(final Iterable<C> input, final Predicate<? super C> predicate)" ], [ "select", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> select(final Iterable<? extends O> inputCollection, final Predicate<? super O> predicate)" ], [ "select", "org.apache.commons.collections4", "CollectionUtils", "public static <O, R extends Collection<? super O>> R select(final Iterable<? extends O> inputCollection, final Predicate<? super O> predicate, final R outputCollection)" ], [ "select", "org.apache.commons.collections4", "CollectionUtils", "public static <O, R extends Collection<? super O>> R select(final Iterable<? extends O> inputCollection, final Predicate<? super O> predicate, R outputCollection, R rejectedCollection)" ], [ "selectRejected", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> selectRejected(final Iterable<? extends O> inputCollection, final Predicate<? super O> predicate)" ], [ "selectRejected", "org.apache.commons.collections4", "CollectionUtils", "public static <O, R extends Collection<? super O>> R selectRejected(final Iterable<? extends O> inputCollection, final Predicate<? super O> predicate, final R outputCollection)" ], [ "collect", "org.apache.commons.collections4", "CollectionUtils", "public static <I, O> Collection<O> collect(final Iterable<I> inputCollection, final Transformer<? super I, ? extends O> transformer)" ], [ "collect", "org.apache.commons.collections4", "CollectionUtils", "public static <I, O> Collection<O> collect(final Iterator<I> inputIterator, final Transformer<? super I, ? extends O> transformer)" ], [ "collect", "org.apache.commons.collections4", "CollectionUtils", "public static <I, O, R extends Collection<? super O>> R collect(final Iterable<? extends I> inputCollection, final Transformer<? super I, ? extends O> transformer, final R outputCollection)" ], [ "collect", "org.apache.commons.collections4", "CollectionUtils", "public static <I, O, R extends Collection<? super O>> R collect(final Iterator<? extends I> inputIterator, final Transformer<? super I, ? extends O> transformer, final R outputCollection)" ], [ "addIgnoreNull", "org.apache.commons.collections4", "CollectionUtils", "public static <T> boolean addIgnoreNull(final Collection<T> collection, final T object)" ], [ "addAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean addAll(final Collection<C> collection, final Iterable<? extends C> iterable)" ], [ "addAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean addAll(final Collection<C> collection, final Iterator<? extends C> iterator)" ], [ "addAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean addAll(final Collection<C> collection, final Enumeration<? extends C> enumeration)" ], [ "addAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean addAll(final Collection<C> collection, final C[] elements)" ], [ "get", "org.apache.commons.collections4", "CollectionUtils", "public static <T> T get(final Iterator<T> iterator, final int index)" ], [ "get", "org.apache.commons.collections4", "CollectionUtils", "public static <T> T get(final Iterable<T> iterable, final int index)" ], [ "get", "org.apache.commons.collections4", "CollectionUtils", "public static Object get(final Object object, final int index)" ], [ "get", "org.apache.commons.collections4", "CollectionUtils", "public static <K, V> Map.Entry<K, V> get(final Map<K, V> map, final int index)" ], [ "size", "org.apache.commons.collections4", "CollectionUtils", "public static int size(final Object object)" ], [ "sizeIsEmpty", "org.apache.commons.collections4", "CollectionUtils", "public static boolean sizeIsEmpty(final Object object)" ], [ "isEmpty", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isEmpty(final Collection<?> coll)" ], [ "isNotEmpty", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isNotEmpty(final Collection<?> coll)" ], [ "isFull", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isFull(final Collection<? extends Object> coll)" ], [ "maxSize", "org.apache.commons.collections4", "CollectionUtils", "public static int maxSize(final Collection<? extends Object> coll)" ], [ "collate", "org.apache.commons.collections4", "CollectionUtils", "public static <O extends Comparable<? super O>> List<O> collate(Iterable<? extends O> a, Iterable<? extends O> b)" ], [ "collate", "org.apache.commons.collections4", "CollectionUtils", "public static <O extends Comparable<? super O>> List<O> collate(final Iterable<? extends O> a, final Iterable<? extends O> b, final boolean includeDuplicates)" ], [ "collate", "org.apache.commons.collections4", "CollectionUtils", "public static <O> List<O> collate(final Iterable<? extends O> a, final Iterable<? extends O> b, final Comparator<? super O> c)" ], [ "collate", "org.apache.commons.collections4", "CollectionUtils", "public static <O> List<O> collate(final Iterable<? extends O> a, final Iterable<? extends O> b, final Comparator<? super O> c, final boolean includeDuplicates)" ], [ "permutations", "org.apache.commons.collections4", "CollectionUtils", "public static <E> Collection<List<E>> permutations(final Collection<E> collection)" ], [ "retainAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> Collection<C> retainAll(final Collection<C> collection, final Collection<?> retain)" ], [ "retainAll", "org.apache.commons.collections4", "CollectionUtils", "public static <E> Collection<E> retainAll(final Iterable<E> collection, final Iterable<? extends E> retain, final Equator<? super E> equator)" ], [ "removeAll", "org.apache.commons.collections4", "CollectionUtils", "public static <E> Collection<E> removeAll(final Collection<E> collection, final Collection<?> remove)" ], [ "removeAll", "org.apache.commons.collections4", "CollectionUtils", "public static <E> Collection<E> removeAll(final Iterable<E> collection, final Iterable<? extends E> remove, final Equator<? super E> equator)" ], [ "synchronizedCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <C> Collection<C> synchronizedCollection(final Collection<C> collection)" ], [ "unmodifiableCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <C> Collection<C> unmodifiableCollection(final Collection<? extends C> collection)" ], [ "predicatedCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <C> Collection<C> predicatedCollection(final Collection<C> collection, final Predicate<? super C> predicate)" ], [ "transformingCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <E> Collection<E> transformingCollection(final Collection<E> collection, final Transformer<? super E, ? extends E> transformer)" ], [ "extractSingleton", "org.apache.commons.collections4", "CollectionUtils", "public static <E> E extractSingleton(final Collection<E> collection)" ], [ "transformingMap", "org.apache.commons.collections4.splitmap", "TransformedSplitMap", "public static <J, K, U, V> TransformedSplitMap<J, K, U, V> transformingMap(final Map<K, V> map, final Transformer<? super J, ? extends K> keyTransformer, final Transformer<? super U, ? extends V> valueTransformer)" ], [ "emptyIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> emptyIterable()" ], [ "chainedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> chainedIterable(final Iterable<? extends E> a, final Iterable<? extends E> b)" ], [ "chainedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> chainedIterable(final Iterable<? extends E> a, final Iterable<? extends E> b, final Iterable<? extends E> c)" ], [ "chainedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> chainedIterable(final Iterable<? extends E> a, final Iterable<? extends E> b, final Iterable<? extends E> c, final Iterable<? extends E> d)" ], [ "chainedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> chainedIterable(final Iterable<? extends E>... iterables)" ], [ "collatedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> collatedIterable(final Iterable<? extends E> a, final Iterable<? extends E> b)" ], [ "collatedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> collatedIterable(final Comparator<? super E> comparator, final Iterable<? extends E> a, final Iterable<? extends E> b)" ], [ "filteredIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> filteredIterable(final Iterable<E> iterable, final Predicate<? super E> predicate)" ], [ "boundedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> boundedIterable(final Iterable<E> iterable, final long maxSize)" ], [ "loopingIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> loopingIterable(final Iterable<E> iterable)" ], [ "reversedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> reversedIterable(final Iterable<E> iterable)" ], [ "skippingIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> skippingIterable(final Iterable<E> iterable, final long elementsToSkip)" ], [ "transformedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <I, O> Iterable<O> transformedIterable(final Iterable<I> iterable, final Transformer<? super I, ? extends O> transformer)" ], [ "uniqueIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> uniqueIterable(final Iterable<E> iterable)" ], [ "unmodifiableIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> unmodifiableIterable(final Iterable<E> iterable)" ], [ "zippingIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> zippingIterable(final Iterable<? extends E> a, final Iterable<? extends E> b)" ], [ "zippingIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> zippingIterable(final Iterable<? extends E> first, final Iterable<? extends E>... others)" ], [ "emptyIfNull", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> emptyIfNull(final Iterable<E> iterable)" ], [ "forEachButLast", "org.apache.commons.collections4", "IterableUtils", "public static <E> E forEachButLast(final Iterable<E> iterable, final Closure<? super E> closure)" ], [ "find", "org.apache.commons.collections4", "IterableUtils", "public static <E> E find(final Iterable<E> iterable, final Predicate<? super E> predicate)" ], [ "indexOf", "org.apache.commons.collections4", "IterableUtils", "public static <E> int indexOf(final Iterable<E> iterable, final Predicate<? super E> predicate)" ], [ "matchesAll", "org.apache.commons.collections4", "IterableUtils", "public static <E> boolean matchesAll(final Iterable<E> iterable, final Predicate<? super E> predicate)" ], [ "matchesAny", "org.apache.commons.collections4", "IterableUtils", "public static <E> boolean matchesAny(final Iterable<E> iterable, final Predicate<? super E> predicate)" ], [ "countMatches", "org.apache.commons.collections4", "IterableUtils", "public static <E> long countMatches(final Iterable<E> input, final Predicate<? super E> predicate)" ], [ "isEmpty", "org.apache.commons.collections4", "IterableUtils", "public static boolean isEmpty(final Iterable<?> iterable)" ], [ "contains", "org.apache.commons.collections4", "IterableUtils", "public static <E> boolean contains(final Iterable<E> iterable, final Object object)" ], [ "contains", "org.apache.commons.collections4", "IterableUtils", "public static <E> boolean contains(final Iterable<? extends E> iterable, final E object, final Equator<? super E> equator)" ], [ "frequency", "org.apache.commons.collections4", "IterableUtils", "public static <E, T extends E> int frequency(final Iterable<E> iterable, final T obj)" ], [ "get", "org.apache.commons.collections4", "IterableUtils", "public static <T> T get(final Iterable<T> iterable, final int index)" ], [ "size", "org.apache.commons.collections4", "IterableUtils", "public static int size(final Iterable<?> iterable)" ], [ "partition", "org.apache.commons.collections4", "IterableUtils", "public static <O> List<List<O>> partition(final Iterable<? extends O> iterable, final Predicate<? super O> predicate)" ], [ "partition", "org.apache.commons.collections4", "IterableUtils", "public static <O> List<List<O>> partition(final Iterable<? extends O> iterable, final Predicate<? super O>... predicates)" ], [ "partition", "org.apache.commons.collections4", "IterableUtils", "public static <O, R extends Collection<O>> List<R> partition(final Iterable<? extends O> iterable, final Factory<R> partitionFactory, final Predicate<? super O>... predicates)" ], [ "toList", "org.apache.commons.collections4", "IterableUtils", "public static <E> List<E> toList(final Iterable<E> iterable)" ], [ "toString", "org.apache.commons.collections4", "IterableUtils", "public static <E> String toString(final Iterable<E> iterable)" ], [ "toString", "org.apache.commons.collections4", "IterableUtils", "public static <E> String toString(final Iterable<E> iterable, final Transformer<? super E, String> transformer)" ], [ "toString", "org.apache.commons.collections4", "IterableUtils", "public static <E> String toString(final Iterable<E> iterable, final Transformer<? super E, String> transformer, final String delimiter, final String prefix, final String suffix)" ], [ "unmodifiableTrie", "org.apache.commons.collections4", "TrieUtils", "public static <K, V> Trie<K, V> unmodifiableTrie(final Trie<K, ? extends V> trie)" ], [ "exceptionClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> exceptionClosure()" ], [ "nopClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> nopClosure()" ], [ "asClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> asClosure(final Transformer<? super E, ?> transformer)" ], [ "forClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> forClosure(final int count, final Closure<? super E> closure)" ], [ "whileClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> whileClosure(final Predicate<? super E> predicate, final Closure<? super E> closure)" ], [ "doWhileClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> doWhileClosure(final Closure<? super E> closure, final Predicate<? super E> predicate)" ], [ "invokerClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> invokerClosure(final String methodName)" ], [ "invokerClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> invokerClosure(final String methodName, final Class<?>[] paramTypes, final Object[] args)" ], [ "chainedClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> chainedClosure(final Closure<? super E>... closures)" ], [ "chainedClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> chainedClosure(final Collection<? extends Closure<? super E>> closures)" ], [ "ifClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> ifClosure(final Predicate<? super E> predicate, final Closure<? super E> trueClosure)" ], [ "ifClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> ifClosure(final Predicate<? super E> predicate, final Closure<? super E> trueClosure, final Closure<? super E> falseClosure)" ], [ "switchClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> switchClosure(final Predicate<? super E>[] predicates, final Closure<? super E>[] closures)" ], [ "switchClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> switchClosure(final Predicate<? super E>[] predicates, final Closure<? super E>[] closures, final Closure<? super E> defaultClosure)" ], [ "switchClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> switchClosure(final Map<Predicate<E>, Closure<E>> predicatesAndClosures)" ], [ "switchMapClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> switchMapClosure(final Map<? extends E, Closure<E>> objectsAndClosures)" ], [ "unmodifiableTrie", "org.apache.commons.collections4.trie", "UnmodifiableTrie", "public static <K, V> Trie<K, V> unmodifiableTrie(final Trie<K, ? extends V> trie)" ], [ "isOutOfBoundsIndex", "org.apache.commons.collections4.trie", "KeyAnalyzer", "static boolean isOutOfBoundsIndex(final int bitIndex)" ], [ "isEqualBitKey", "org.apache.commons.collections4.trie", "KeyAnalyzer", "static boolean isEqualBitKey(final int bitIndex)" ], [ "isNullBitKey", "org.apache.commons.collections4.trie", "KeyAnalyzer", "static boolean isNullBitKey(final int bitIndex)" ], [ "isValidBitIndex", "org.apache.commons.collections4.trie", "KeyAnalyzer", "static boolean isValidBitIndex(final int bitIndex)" ], [ "isValidUplink", "org.apache.commons.collections4.trie", "AbstractPatriciaTrie", "static boolean isValidUplink(final TrieEntry<?, ?> next, final TrieEntry<?, ?> from)" ], [ "compare", "org.apache.commons.collections4.trie", "AbstractBitwiseTrie", "static boolean compare(final Object a, final Object b)" ], [ "transformingSortedMap", "org.apache.commons.collections4.map", "TransformedSortedMap", "public static <K, V> TransformedSortedMap<K, V> transformingSortedMap(final SortedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "transformedSortedMap", "org.apache.commons.collections4.map", "TransformedSortedMap", "public static <K, V> TransformedSortedMap<K, V> transformedSortedMap(final SortedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "predicatedMap", "org.apache.commons.collections4.map", "PredicatedMap", "public static <K, V> PredicatedMap<K, V> predicatedMap(final Map<K, V> map, final Predicate<? super K> keyPredicate, final Predicate<? super V> valuePredicate)" ], [ "fixedSizeSortedMap", "org.apache.commons.collections4.map", "FixedSizeSortedMap", "public static <K, V> FixedSizeSortedMap<K, V> fixedSizeSortedMap(final SortedMap<K, V> map)" ], [ "unmodifiableSortedMap", "org.apache.commons.collections4.map", "UnmodifiableSortedMap", "public static <K, V> SortedMap<K, V> unmodifiableSortedMap(final SortedMap<K, ? extends V> map)" ], [ "predicatedSortedMap", "org.apache.commons.collections4.map", "PredicatedSortedMap", "public static <K, V> PredicatedSortedMap<K, V> predicatedSortedMap(final SortedMap<K, V> map, final Predicate<? super K> keyPredicate, final Predicate<? super V> valuePredicate)" ], [ "defaultedMap", "org.apache.commons.collections4.map", "DefaultedMap", "public static <K, V> DefaultedMap<K, V> defaultedMap(final Map<K, V> map, final V defaultValue)" ], [ "defaultedMap", "org.apache.commons.collections4.map", "DefaultedMap", "public static <K, V> DefaultedMap<K, V> defaultedMap(final Map<K, V> map, final Factory<? extends V> factory)" ], [ "defaultedMap", "org.apache.commons.collections4.map", "DefaultedMap", "public static <K, V> Map<K, V> defaultedMap(final Map<K, V> map, final Transformer<? super K, ? extends V> transformer)" ], [ "fixedSizeMap", "org.apache.commons.collections4.map", "FixedSizeMap", "public static <K, V> FixedSizeMap<K, V> fixedSizeMap(final Map<K, V> map)" ], [ "lazySortedMap", "org.apache.commons.collections4.map", "LazySortedMap", "public static <K, V> LazySortedMap<K, V> lazySortedMap(final SortedMap<K, V> map, final Factory<? extends V> factory)" ], [ "lazySortedMap", "org.apache.commons.collections4.map", "LazySortedMap", "public static <K, V> LazySortedMap<K, V> lazySortedMap(final SortedMap<K, V> map, final Transformer<? super K, ? extends V> factory)" ], [ "unmodifiableOrderedMap", "org.apache.commons.collections4.map", "UnmodifiableOrderedMap", "public static <K, V> OrderedMap<K, V> unmodifiableOrderedMap(final OrderedMap<? extends K, ? extends V> map)" ], [ "unmodifiableMap", "org.apache.commons.collections4.map", "UnmodifiableMap", "public static <K, V> Map<K, V> unmodifiableMap(final Map<? extends K, ? extends V> map)" ], [ "listOrderedMap", "org.apache.commons.collections4.map", "ListOrderedMap", "public static <K, V> ListOrderedMap<K, V> listOrderedMap(final Map<K, V> map)" ], [ "unmodifiableEntrySet", "org.apache.commons.collections4.map", "UnmodifiableEntrySet", "public static <K, V> Set<Map.Entry<K, V>> unmodifiableEntrySet(final Set<Map.Entry<K, V>> set)" ], [ "resolve", "org.apache.commons.collections4.map", "AbstractReferenceMap", "public static ReferenceStrength resolve(final int value)" ], [ "resolve", "org.apache.commons.collections4.map", "ReferenceStrength", "public static ReferenceStrength resolve(final int value)" ], [ "multiKeyMap", "org.apache.commons.collections4.map", "MultiKeyMap", "public static <K, V> MultiKeyMap<K, V> multiKeyMap(final AbstractHashedMap<MultiKey<? extends K>, V> map)" ], [ "lazyMap", "org.apache.commons.collections4.map", "LazyMap", "public static <K, V> LazyMap<K, V> lazyMap(final Map<K, V> map, final Factory<? extends V> factory)" ], [ "lazyMap", "org.apache.commons.collections4.map", "LazyMap", "public static <V, K> LazyMap<K, V> lazyMap(final Map<K, V> map, final Transformer<? super K, ? extends V> factory)" ], [ "multiValueMap", "org.apache.commons.collections4.map", "MultiValueMap", "public static <K, V> MultiValueMap<K, V> multiValueMap(final Map<K, ? super Collection<V>> map)" ], [ "multiValueMap", "org.apache.commons.collections4.map", "MultiValueMap", "public static <K, V, C extends Collection<V>> MultiValueMap<K, V> multiValueMap(final Map<K, ? super C> map, final Class<C> collectionClass)" ], [ "multiValueMap", "org.apache.commons.collections4.map", "MultiValueMap", "public static <K, V, C extends Collection<V>> MultiValueMap<K, V> multiValueMap(final Map<K, ? super C> map, final Factory<C> collectionFactory)" ], [ "transformingMap", "org.apache.commons.collections4.map", "TransformedMap", "public static <K, V> TransformedMap<K, V> transformingMap(final Map<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "transformedMap", "org.apache.commons.collections4.map", "TransformedMap", "public static <K, V> TransformedMap<K, V> transformedMap(final Map<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "synchronizedMultiSet", "org.apache.commons.collections4", "MultiSetUtils", "public static <E> MultiSet<E> synchronizedMultiSet(final MultiSet<E> multiset)" ], [ "unmodifiableMultiSet", "org.apache.commons.collections4", "MultiSetUtils", "public static <E> MultiSet<E> unmodifiableMultiSet(final MultiSet<? extends E> multiset)" ], [ "predicatedMultiSet", "org.apache.commons.collections4", "MultiSetUtils", "public static <E> MultiSet<E> predicatedMultiSet(final MultiSet<E> multiset, final Predicate<? super E> predicate)" ], [ "emptyMultiSet", "org.apache.commons.collections4", "MultiSetUtils", "public static <E> MultiSet<E> emptyMultiSet()" ], [ "unmodifiableMultiValuedMap", "org.apache.commons.collections4.multimap", "UnmodifiableMultiValuedMap", "public static <K, V> UnmodifiableMultiValuedMap<K, V> unmodifiableMultiValuedMap(MultiValuedMap<? extends K, ? extends V> map)" ], [ "transformingMap", "org.apache.commons.collections4.multimap", "TransformedMultiValuedMap", "public static <K, V> TransformedMultiValuedMap<K, V> transformingMap(final MultiValuedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "transformedMap", "org.apache.commons.collections4.multimap", "TransformedMultiValuedMap", "public static <K, V> TransformedMultiValuedMap<K, V> transformedMap(final MultiValuedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "lazyList", "org.apache.commons.collections4.list", "LazyList", "public static <E> LazyList<E> lazyList(final List<E> list, final Factory<? extends E> factory)" ], [ "setUniqueList", "org.apache.commons.collections4.list", "SetUniqueList", "public static <E> SetUniqueList<E> setUniqueList(final List<E> list)" ], [ "unmodifiableList", "org.apache.commons.collections4.list", "UnmodifiableList", "public static <E> List<E> unmodifiableList(final List<? extends E> list)" ], [ "fixedSizeList", "org.apache.commons.collections4.list", "FixedSizeList", "public static <E> FixedSizeList<E> fixedSizeList(final List<E> list)" ], [ "transformingList", "org.apache.commons.collections4.list", "TransformedList", "public static <E> TransformedList<E> transformingList(final List<E> list, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedList", "org.apache.commons.collections4.list", "TransformedList", "public static <E> TransformedList<E> transformedList(final List<E> list, final Transformer<? super E, ? extends E> transformer)" ], [ "growthList", "org.apache.commons.collections4.list", "GrowthList", "public static <E> GrowthList<E> growthList(final List<E> list)" ], [ "predicatedList", "org.apache.commons.collections4.list", "PredicatedList", "public static <T> PredicatedList<T> predicatedList(final List<T> list, final Predicate<? super T> predicate)" ], [ "transformingQueue", "org.apache.commons.collections4.queue", "TransformedQueue", "public static <E> TransformedQueue<E> transformingQueue(final Queue<E> queue, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedQueue", "org.apache.commons.collections4.queue", "TransformedQueue", "public static <E> TransformedQueue<E> transformedQueue(final Queue<E> queue, final Transformer<? super E, ? extends E> transformer)" ], [ "unmodifiableQueue", "org.apache.commons.collections4.queue", "UnmodifiableQueue", "public static <E> Queue<E> unmodifiableQueue(final Queue<? extends E> queue)" ], [ "predicatedQueue", "org.apache.commons.collections4.queue", "PredicatedQueue", "public static <E> PredicatedQueue<E> predicatedQueue(final Queue<E> Queue, final Predicate<? super E> predicate)" ], [ "empty", "org.apache.commons.collections4", "FluentIterable", "public static <T> FluentIterable<T> empty()" ], [ "of", "org.apache.commons.collections4", "FluentIterable", "public static <T> FluentIterable<T> of(final T singleton)" ], [ "of", "org.apache.commons.collections4", "FluentIterable", "public static <T> FluentIterable<T> of(final T... elements)" ], [ "of", "org.apache.commons.collections4", "FluentIterable", "public static <T> FluentIterable<T> of(final Iterable<T> iterable)" ], [ "exceptionTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> exceptionTransformer()" ], [ "nullTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> nullTransformer()" ], [ "nopTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> nopTransformer()" ], [ "cloneTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> cloneTransformer()" ], [ "constantTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> constantTransformer(final O constantToReturn)" ], [ "asTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> asTransformer(final Closure<? super T> closure)" ], [ "asTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, Boolean> asTransformer(final Predicate<? super T> predicate)" ], [ "asTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> asTransformer(final Factory<? extends O> factory)" ], [ "chainedTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> chainedTransformer(final Transformer<? super T, ? extends T>... transformers)" ], [ "chainedTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> chainedTransformer(final Collection<? extends Transformer<? super T, ? extends T>> transformers)" ], [ "ifTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> ifTransformer(final Predicate<? super T> predicate, final Transformer<? super T, ? extends T> trueTransformer)" ], [ "ifTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> ifTransformer(final Predicate<? super I> predicate, final Transformer<? super I, ? extends O> trueTransformer, final Transformer<? super I, ? extends O> falseTransformer)" ], [ "switchTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> switchTransformer(final Predicate<? super I> predicate, final Transformer<? super I, ? extends O> trueTransformer, final Transformer<? super I, ? extends O> falseTransformer)" ], [ "switchTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> switchTransformer(final Predicate<? super I>[] predicates, final Transformer<? super I, ? extends O>[] transformers)" ], [ "switchTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> switchTransformer(final Predicate<? super I>[] predicates, final Transformer<? super I, ? extends O>[] transformers, final Transformer<? super I, ? extends O> defaultTransformer)" ], [ "switchTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> switchTransformer(final Map<Predicate<I>, Transformer<I, O>> predicatesAndTransformers)" ], [ "switchMapTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> switchMapTransformer(final Map<I, Transformer<I, O>> objectsAndTransformers)" ], [ "instantiateTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<Class<? extends T>, T> instantiateTransformer()" ], [ "instantiateTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<Class<? extends T>, T> instantiateTransformer(final Class<?>[] paramTypes, final Object[] args)" ], [ "mapTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> mapTransformer(final Map<? super I, ? extends O> map)" ], [ "invokerTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> invokerTransformer(final String methodName)" ], [ "invokerTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> invokerTransformer(final String methodName, final Class<?>[] paramTypes, final Object[] args)" ], [ "stringValueTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, String> stringValueTransformer()" ], [ "exceptionPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> exceptionPredicate()" ], [ "truePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> truePredicate()" ], [ "falsePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> falsePredicate()" ], [ "nullPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nullPredicate()" ], [ "notNullPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> notNullPredicate()" ], [ "equalPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> equalPredicate(final T value)" ], [ "identityPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> identityPredicate(final T value)" ], [ "instanceofPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static Predicate<Object> instanceofPredicate(final Class<?> type)" ], [ "uniquePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> uniquePredicate()" ], [ "invokerPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> invokerPredicate(final String methodName)" ], [ "invokerPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> invokerPredicate(final String methodName, final Class<?>[] paramTypes, final Object[] args)" ], [ "andPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> andPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "allPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> allPredicate(final Predicate<? super T>... predicates)" ], [ "allPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> allPredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "orPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> orPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "anyPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> anyPredicate(final Predicate<? super T>... predicates)" ], [ "anyPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> anyPredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "eitherPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> eitherPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "onePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> onePredicate(final Predicate<? super T>... predicates)" ], [ "onePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> onePredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "neitherPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> neitherPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "nonePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nonePredicate(final Predicate<? super T>... predicates)" ], [ "nonePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nonePredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "notPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> notPredicate(final Predicate<? super T> predicate)" ], [ "asPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> asPredicate(final Transformer<? super T, Boolean> transformer)" ], [ "nullIsExceptionPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nullIsExceptionPredicate(final Predicate<? super T> predicate)" ], [ "nullIsFalsePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nullIsFalsePredicate(final Predicate<? super T> predicate)" ], [ "nullIsTruePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nullIsTruePredicate(final Predicate<? super T> predicate)" ], [ "transformedPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> transformedPredicate(final Transformer<? super T, ? extends T> transformer, final Predicate<? super T> predicate)" ], [ "emptySet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> emptySet()" ], [ "emptySortedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> emptySortedSet()" ], [ "emptyIfNull", "org.apache.commons.collections4", "SetUtils", "public static <T> Set<T> emptyIfNull(final Set<T> set)" ], [ "isEqualSet", "org.apache.commons.collections4", "SetUtils", "public static boolean isEqualSet(final Collection<?> set1, final Collection<?> set2)" ], [ "hashCodeForSet", "org.apache.commons.collections4", "SetUtils", "public static <T> int hashCodeForSet(final Collection<T> set)" ], [ "newIdentityHashSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> newIdentityHashSet()" ], [ "synchronizedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> synchronizedSet(final Set<E> set)" ], [ "unmodifiableSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> unmodifiableSet(final Set<? extends E> set)" ], [ "predicatedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> predicatedSet(final Set<E> set, final Predicate<? super E> predicate)" ], [ "transformedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> transformedSet(final Set<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "orderedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> orderedSet(final Set<E> set)" ], [ "synchronizedSortedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> synchronizedSortedSet(final SortedSet<E> set)" ], [ "unmodifiableSortedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> unmodifiableSortedSet(final SortedSet<E> set)" ], [ "predicatedSortedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> predicatedSortedSet(final SortedSet<E> set, final Predicate<? super E> predicate)" ], [ "transformedSortedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> transformedSortedSet(final SortedSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "unmodifiableNavigableSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> unmodifiableNavigableSet(final NavigableSet<E> set)" ], [ "predicatedNavigableSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> predicatedNavigableSet(final NavigableSet<E> set, final Predicate<? super E> predicate)" ], [ "transformedNavigableSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> transformedNavigableSet(final NavigableSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "union", "org.apache.commons.collections4", "SetUtils", "public static <E> SetView<E> union(final Set<? extends E> a, final Set<? extends E> b)" ], [ "difference", "org.apache.commons.collections4", "SetUtils", "public static <E> SetView<E> difference(final Set<? extends E> a, final Set<? extends E> b)" ], [ "intersection", "org.apache.commons.collections4", "SetUtils", "public static <E> SetView<E> intersection(final Set<? extends E> a, final Set<? extends E> b)" ], [ "disjunction", "org.apache.commons.collections4", "SetUtils", "public static <E> SetView<E> disjunction(final Set<? extends E> a, final Set<? extends E> b)" ], [ "transformingSet", "org.apache.commons.collections4.set", "TransformedSet", "public static <E> TransformedSet<E> transformingSet(final Set<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedSet", "org.apache.commons.collections4.set", "TransformedSet", "public static <E> Set<E> transformedSet(final Set<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "transformingNavigableSet", "org.apache.commons.collections4.set", "TransformedNavigableSet", "public static <E> TransformedNavigableSet<E> transformingNavigableSet(final NavigableSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedNavigableSet", "org.apache.commons.collections4.set", "TransformedNavigableSet", "public static <E> TransformedNavigableSet<E> transformedNavigableSet(final NavigableSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "predicatedNavigableSet", "org.apache.commons.collections4.set", "PredicatedNavigableSet", "public static <E> PredicatedNavigableSet<E> predicatedNavigableSet(final NavigableSet<E> set, final Predicate<? super E> predicate)" ], [ "listOrderedSet", "org.apache.commons.collections4.set", "ListOrderedSet", "public static <E> ListOrderedSet<E> listOrderedSet(final Set<E> set, final List<E> list)" ], [ "listOrderedSet", "org.apache.commons.collections4.set", "ListOrderedSet", "public static <E> ListOrderedSet<E> listOrderedSet(final Set<E> set)" ], [ "listOrderedSet", "org.apache.commons.collections4.set", "ListOrderedSet", "public static <E> ListOrderedSet<E> listOrderedSet(final List<E> list)" ], [ "unmodifiableSet", "org.apache.commons.collections4.set", "UnmodifiableSet", "public static <E> Set<E> unmodifiableSet(final Set<? extends E> set)" ], [ "mapBackedSet", "org.apache.commons.collections4.set", "MapBackedSet", "public static <E, V> MapBackedSet<E, V> mapBackedSet(final Map<E, ? super V> map)" ], [ "mapBackedSet", "org.apache.commons.collections4.set", "MapBackedSet", "public static <E, V> MapBackedSet<E, V> mapBackedSet(final Map<E, ? super V> map, final V dummyValue)" ], [ "unmodifiableSortedSet", "org.apache.commons.collections4.set", "UnmodifiableSortedSet", "public static <E> SortedSet<E> unmodifiableSortedSet(final SortedSet<E> set)" ], [ "predicatedSortedSet", "org.apache.commons.collections4.set", "PredicatedSortedSet", "public static <E> PredicatedSortedSet<E> predicatedSortedSet(final SortedSet<E> set, final Predicate<? super E> predicate)" ], [ "predicatedSet", "org.apache.commons.collections4.set", "PredicatedSet", "public static <E> PredicatedSet<E> predicatedSet(final Set<E> set, final Predicate<? super E> predicate)" ], [ "unmodifiableNavigableSet", "org.apache.commons.collections4.set", "UnmodifiableNavigableSet", "public static <E> NavigableSet<E> unmodifiableNavigableSet(final NavigableSet<E> set)" ], [ "transformingSortedSet", "org.apache.commons.collections4.set", "TransformedSortedSet", "public static <E> TransformedSortedSet<E> transformingSortedSet(final SortedSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedSortedSet", "org.apache.commons.collections4.set", "TransformedSortedSet", "public static <E> TransformedSortedSet<E> transformedSortedSet(final SortedSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "get", "org.apache.commons.collections4", "EnumerationUtils", "public static <T> T get(final Enumeration<T> e, final int index)" ], [ "toList", "org.apache.commons.collections4", "EnumerationUtils", "public static <E> List<E> toList(final Enumeration<? extends E> enumeration)" ], [ "toList", "org.apache.commons.collections4", "EnumerationUtils", "public static List<String> toList(final StringTokenizer stringTokenizer)" ], [ "unmodifiableQueue", "org.apache.commons.collections4", "QueueUtils", "public static <E> Queue<E> unmodifiableQueue(final Queue<? extends E> queue)" ], [ "predicatedQueue", "org.apache.commons.collections4", "QueueUtils", "public static <E> Queue<E> predicatedQueue(final Queue<E> queue, final Predicate<? super E> predicate)" ], [ "transformingQueue", "org.apache.commons.collections4", "QueueUtils", "public static <E> Queue<E> transformingQueue(final Queue<E> queue, final Transformer<? super E, ? extends E> transformer)" ], [ "emptyQueue", "org.apache.commons.collections4", "QueueUtils", "public static <E> Queue<E> emptyQueue()" ], [ "synchronizedBag", "org.apache.commons.collections4.bag", "SynchronizedBag", "public static <E> SynchronizedBag<E> synchronizedBag(final Bag<E> bag)" ], [ "collectionBag", "org.apache.commons.collections4.bag", "CollectionBag", "public static <E> Bag<E> collectionBag(final Bag<E> bag)" ], [ "unmodifiableBag", "org.apache.commons.collections4.bag", "UnmodifiableBag", "public static <E> Bag<E> unmodifiableBag(final Bag<? extends E> bag)" ], [ "predicatedSortedBag", "org.apache.commons.collections4.bag", "PredicatedSortedBag", "public static <E> PredicatedSortedBag<E> predicatedSortedBag(final SortedBag<E> bag, final Predicate<? super E> predicate)" ], [ "unmodifiableSortedBag", "org.apache.commons.collections4.bag", "UnmodifiableSortedBag", "public static <E> SortedBag<E> unmodifiableSortedBag(final SortedBag<E> bag)" ], [ "transformingSortedBag", "org.apache.commons.collections4.bag", "TransformedSortedBag", "public static <E> TransformedSortedBag<E> transformingSortedBag(final SortedBag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedSortedBag", "org.apache.commons.collections4.bag", "TransformedSortedBag", "public static <E> TransformedSortedBag<E> transformedSortedBag(final SortedBag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "predicatedBag", "org.apache.commons.collections4.bag", "PredicatedBag", "public static <E> PredicatedBag<E> predicatedBag(final Bag<E> bag, final Predicate<? super E> predicate)" ], [ "synchronizedSortedBag", "org.apache.commons.collections4.bag", "SynchronizedSortedBag", "public static <E> SynchronizedSortedBag<E> synchronizedSortedBag(final SortedBag<E> bag)" ], [ "collectionSortedBag", "org.apache.commons.collections4.bag", "CollectionSortedBag", "public static <E> SortedBag<E> collectionSortedBag(final SortedBag<E> bag)" ], [ "transformingBag", "org.apache.commons.collections4.bag", "TransformedBag", "public static <E> Bag<E> transformingBag(final Bag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedBag", "org.apache.commons.collections4.bag", "TransformedBag", "public static <E> Bag<E> transformedBag(final Bag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "predicatedMultiSet", "org.apache.commons.collections4.multiset", "PredicatedMultiSet", "public static <E> PredicatedMultiSet<E> predicatedMultiSet(final MultiSet<E> multiset, final Predicate<? super E> predicate)" ], [ "unmodifiableMultiSet", "org.apache.commons.collections4.multiset", "UnmodifiableMultiSet", "public static <E> MultiSet<E> unmodifiableMultiSet(final MultiSet<? extends E> multiset)" ], [ "synchronizedMultiSet", "org.apache.commons.collections4.multiset", "SynchronizedMultiSet", "public static <E> SynchronizedMultiSet<E> synchronizedMultiSet(final MultiSet<E> multiset)" ], [ "synchronizedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> synchronizedBag(final Bag<E> bag)" ], [ "unmodifiableBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> unmodifiableBag(final Bag<? extends E> bag)" ], [ "predicatedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> predicatedBag(final Bag<E> bag, final Predicate<? super E> predicate)" ], [ "transformingBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> transformingBag(final Bag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "collectionBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> collectionBag(final Bag<E> bag)" ], [ "synchronizedSortedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> SortedBag<E> synchronizedSortedBag(final SortedBag<E> bag)" ], [ "unmodifiableSortedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> SortedBag<E> unmodifiableSortedBag(final SortedBag<E> bag)" ], [ "predicatedSortedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> SortedBag<E> predicatedSortedBag(final SortedBag<E> bag, final Predicate<? super E> predicate)" ], [ "transformingSortedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> SortedBag<E> transformingSortedBag(final SortedBag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "emptyBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> emptyBag()" ], [ "emptySortedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> SortedBag<E> emptySortedBag()" ], [ "resettableEmptyListIterator", "org.apache.commons.collections4.iterators", "EmptyListIterator", "public static <E> ResettableListIterator<E> resettableEmptyListIterator()" ], [ "emptyListIterator", "org.apache.commons.collections4.iterators", "EmptyListIterator", "public static <E> ListIterator<E> emptyListIterator()" ], [ "unmodifiableOrderedMapIterator", "org.apache.commons.collections4.iterators", "UnmodifiableOrderedMapIterator", "public static <K, V> OrderedMapIterator<K, V> unmodifiableOrderedMapIterator(final OrderedMapIterator<K, ? extends V> iterator)" ], [ "unmodifiableIterator", "org.apache.commons.collections4.iterators", "UnmodifiableIterator", "public static <E> Iterator<E> unmodifiableIterator(final Iterator<? extends E> iterator)" ], [ "peekingIterator", "org.apache.commons.collections4.iterators", "PeekingIterator", "public static <E> PeekingIterator<E> peekingIterator(final Iterator<? extends E> iterator)" ], [ "emptyMapIterator", "org.apache.commons.collections4.iterators", "EmptyMapIterator", "public static <K, V> MapIterator<K, V> emptyMapIterator()" ], [ "emptyOrderedIterator", "org.apache.commons.collections4.iterators", "EmptyOrderedIterator", "public static <E> OrderedIterator<E> emptyOrderedIterator()" ], [ "umodifiableListIterator", "org.apache.commons.collections4.iterators", "UnmodifiableListIterator", "public static <E> ListIterator<E> umodifiableListIterator(final ListIterator<? extends E> iterator)" ], [ "emptyOrderedMapIterator", "org.apache.commons.collections4.iterators", "EmptyOrderedMapIterator", "public static <K, V> OrderedMapIterator<K, V> emptyOrderedMapIterator()" ], [ "unmodifiableMapIterator", "org.apache.commons.collections4.iterators", "UnmodifiableMapIterator", "public static <K, V> MapIterator<K, V> unmodifiableMapIterator(final MapIterator<? extends K, ? extends V> iterator)" ], [ "resettableEmptyIterator", "org.apache.commons.collections4.iterators", "EmptyIterator", "public static <E> ResettableIterator<E> resettableEmptyIterator()" ], [ "emptyIterator", "org.apache.commons.collections4.iterators", "EmptyIterator", "public static <E> Iterator<E> emptyIterator()" ], [ "pushbackIterator", "org.apache.commons.collections4.iterators", "PushbackIterator", "public static <E> PushbackIterator<E> pushbackIterator(final Iterator<? extends E> iterator)" ], [ "readableMap", "org.apache.commons.collections4", "SplitMapUtils", "public static <K, V> IterableMap<K, V> readableMap(final Get<K, V> get)" ], [ "writableMap", "org.apache.commons.collections4", "SplitMapUtils", "public static <K, V> Map<K, V> writableMap(final Put<K, V> put)" ] ],
  "tokensProjectClassesNonPrivateStaticAttributes" : [ [ "EMPTY_ITERATOR", "org.apache.commons.collections4", "IteratorUtils", "public static final ResettableIterator EMPTY_ITERATOR = EmptyIterator.RESETTABLE_INSTANCE;" ], [ "EMPTY_LIST_ITERATOR", "org.apache.commons.collections4", "IteratorUtils", "public static final ResettableListIterator EMPTY_LIST_ITERATOR = EmptyListIterator.RESETTABLE_INSTANCE;" ], [ "EMPTY_ORDERED_ITERATOR", "org.apache.commons.collections4", "IteratorUtils", "public static final OrderedIterator EMPTY_ORDERED_ITERATOR = EmptyOrderedIterator.INSTANCE;" ], [ "EMPTY_MAP_ITERATOR", "org.apache.commons.collections4", "IteratorUtils", "public static final MapIterator EMPTY_MAP_ITERATOR = EmptyMapIterator.INSTANCE;" ], [ "EMPTY_ORDERED_MAP_ITERATOR", "org.apache.commons.collections4", "IteratorUtils", "public static final OrderedMapIterator EMPTY_ORDERED_MAP_ITERATOR = EmptyOrderedMapIterator.INSTANCE;" ], [ "NATURAL_COMPARATOR", "org.apache.commons.collections4", "ComparatorUtils", "public static final Comparator NATURAL_COMPARATOR = ComparableComparator.<Comparable>comparableComparator();" ], [ "EMPTY_MULTI_VALUED_MAP", "org.apache.commons.collections4", "MultiMapUtils", "public static final MultiValuedMap EMPTY_MULTI_VALUED_MAP = UnmodifiableMultiValuedMap.unmodifiableMultiValuedMap(new ArrayListValuedHashMap(0, 0));" ], [ "EMPTY_SORTED_MAP", "org.apache.commons.collections4", "MapUtils", "public static final SortedMap EMPTY_SORTED_MAP = UnmodifiableSortedMap.unmodifiableSortedMap(new TreeMap<Object, Object>());" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "DefaultEquator", "public static final DefaultEquator INSTANCE = new DefaultEquator<Object>();" ], [ "HASHCODE_NULL", "org.apache.commons.collections4.functors", "DefaultEquator", "public static final int HASHCODE_NULL = -1;" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "ExceptionClosure", "public static final Closure INSTANCE = new ExceptionClosure<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "NOPClosure", "public static final Closure INSTANCE = new NOPClosure<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "NullPredicate", "public static final Predicate INSTANCE = new NullPredicate<Object>();" ], [ "NULL_INSTANCE", "org.apache.commons.collections4.functors", "ConstantTransformer", "public static final Transformer NULL_INSTANCE = new ConstantTransformer<Object, Object>(null);" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "ExceptionTransformer", "public static final Transformer INSTANCE = new ExceptionTransformer<Object, Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "NOPTransformer", "public static final Transformer INSTANCE = new NOPTransformer<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "ExceptionFactory", "public static final Factory INSTANCE = new ExceptionFactory<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "ExceptionPredicate", "public static final Predicate INSTANCE = new ExceptionPredicate<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "FalsePredicate", "public static final Predicate INSTANCE = new FalsePredicate<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "CloneTransformer", "public static final Transformer INSTANCE = new CloneTransformer<Object>();" ], [ "NULL_INSTANCE", "org.apache.commons.collections4.functors", "ConstantFactory", "public static final Factory NULL_INSTANCE = new ConstantFactory<Object>(null);" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "TruePredicate", "public static final Predicate INSTANCE = new TruePredicate<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "NotNullPredicate", "public static final Predicate INSTANCE = new NotNullPredicate<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.comparators", "ComparableComparator", "public static final ComparableComparator INSTANCE = new ComparableComparator();" ], [ "EMPTY_COLLECTION", "org.apache.commons.collections4", "CollectionUtils", "public static final Collection EMPTY_COLLECTION = UnmodifiableCollection.unmodifiableCollection(new ArrayList<Object>());" ], [ "EMPTY_ITERABLE", "org.apache.commons.collections4", "IterableUtils", "static final FluentIterable EMPTY_ITERABLE = new FluentIterable<Object>() {\n\n    @Override\n    public Iterator<Object> iterator() {\n        return IteratorUtils.emptyIterator();\n    }\n};" ], [ "NULL_BIT_KEY", "org.apache.commons.collections4.trie", "KeyAnalyzer", "public static final int NULL_BIT_KEY = -1;" ], [ "EQUAL_BIT_KEY", "org.apache.commons.collections4.trie", "KeyAnalyzer", "public static final int EQUAL_BIT_KEY = -2;" ], [ "OUT_OF_BOUNDS_BIT_KEY", "org.apache.commons.collections4.trie", "KeyAnalyzer", "public static final int OUT_OF_BOUNDS_BIT_KEY = -3;" ], [ "INSTANCE", "org.apache.commons.collections4.trie.analyzer", "StringKeyAnalyzer", "public static final StringKeyAnalyzer INSTANCE = new StringKeyAnalyzer();" ], [ "LENGTH", "org.apache.commons.collections4.trie.analyzer", "StringKeyAnalyzer", "public static final int LENGTH = Character.SIZE;" ], [ "NO_NEXT_ENTRY", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String NO_NEXT_ENTRY = \"No next() entry in the iteration\";" ], [ "NO_PREVIOUS_ENTRY", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String NO_PREVIOUS_ENTRY = \"No previous() entry in the iteration\";" ], [ "REMOVE_INVALID", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String REMOVE_INVALID = \"remove() can only be called once after next()\";" ], [ "GETKEY_INVALID", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String GETKEY_INVALID = \"getKey() can only be called after next() and before remove()\";" ], [ "GETVALUE_INVALID", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String GETVALUE_INVALID = \"getValue() can only be called after next() and before remove()\";" ], [ "SETVALUE_INVALID", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String SETVALUE_INVALID = \"setValue() can only be called after next() and before remove()\";" ], [ "DEFAULT_CAPACITY", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final int DEFAULT_CAPACITY = 16;" ], [ "DEFAULT_THRESHOLD", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final int DEFAULT_THRESHOLD = 12;" ], [ "DEFAULT_LOAD_FACTOR", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final float DEFAULT_LOAD_FACTOR = 0.75f;" ], [ "MAXIMUM_CAPACITY", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final int MAXIMUM_CAPACITY = 1 << 30;" ], [ "NULL", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final Object NULL = new Object();" ], [ "DEFAULT_MAX_SIZE", "org.apache.commons.collections4.map", "LRUMap", "protected static final int DEFAULT_MAX_SIZE = 100;" ], [ "EMPTY_MULTISET", "org.apache.commons.collections4", "MultiSetUtils", "public static final MultiSet EMPTY_MULTISET = UnmodifiableMultiSet.unmodifiableMultiSet(new HashMultiSet<Object>());" ], [ "EMPTY_SORTED_SET", "org.apache.commons.collections4", "SetUtils", "public static final SortedSet EMPTY_SORTED_SET = UnmodifiableSortedSet.unmodifiableSortedSet(new TreeSet<Object>());" ], [ "EMPTY_QUEUE", "org.apache.commons.collections4", "QueueUtils", "public static final Queue EMPTY_QUEUE = UnmodifiableQueue.unmodifiableQueue(new LinkedList<Object>());" ], [ "EMPTY_BAG", "org.apache.commons.collections4", "BagUtils", "public static final Bag EMPTY_BAG = UnmodifiableBag.unmodifiableBag(new HashBag<Object>());" ], [ "EMPTY_SORTED_BAG", "org.apache.commons.collections4", "BagUtils", "public static final Bag EMPTY_SORTED_BAG = UnmodifiableSortedBag.unmodifiableSortedBag(new TreeBag<Object>());" ], [ "RESETTABLE_INSTANCE", "org.apache.commons.collections4.iterators", "EmptyListIterator", "public static final ResettableListIterator RESETTABLE_INSTANCE = new EmptyListIterator<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.iterators", "EmptyListIterator", "public static final ListIterator INSTANCE = RESETTABLE_INSTANCE;" ], [ "INSTANCE", "org.apache.commons.collections4.iterators", "EmptyMapIterator", "public static final MapIterator INSTANCE = new EmptyMapIterator<Object, Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.iterators", "EmptyOrderedIterator", "public static final OrderedIterator INSTANCE = new EmptyOrderedIterator<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.iterators", "EmptyOrderedMapIterator", "public static final OrderedMapIterator INSTANCE = new EmptyOrderedMapIterator<Object, Object>();" ], [ "RESETTABLE_INSTANCE", "org.apache.commons.collections4.iterators", "EmptyIterator", "public static final ResettableIterator RESETTABLE_INSTANCE = new EmptyIterator<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.iterators", "EmptyIterator", "public static final Iterator INSTANCE = RESETTABLE_INSTANCE;" ] ],
  "tokensMethodJavadocValues" : [ [ "\"getName\"", "String" ] ],
  "tokensMethodArguments" : [ [ "methodName", "java.lang", "String" ] ],
  "tokensMethodVariablesNonPrivateNonStaticNonVoidMethods" : [ [ "clone", "java.lang", "Object", "protected native Object clone() throws CloneNotSupportedException" ], [ "equals", "java.lang", "Object", "public boolean equals(Object arg0)" ], [ "toString", "java.lang", "Object", "public String toString()" ], [ "getClass", "java.lang", "Object", "public final native Class<? extends Object> getClass()" ], [ "hashCode", "java.lang", "Object", "public native int hashCode()" ], [ "toLowerCase", "java.lang", "String", "public String toLowerCase(Locale arg0)" ], [ "split", "java.lang", "String", "public String[] split(String arg0)" ], [ "chars", "java.lang", "String", "public IntStream chars()" ], [ "intern", "java.lang", "String", "public native String intern()" ], [ "codePointBefore", "java.lang", "String", "public int codePointBefore(int arg0)" ], [ "substring", "java.lang", "String", "public String substring(int arg0)" ], [ "replace", "java.lang", "String", "public String replace(char arg0, char arg1)" ], [ "compareToIgnoreCase", "java.lang", "String", "public int compareToIgnoreCase(String arg0)" ], [ "trim", "java.lang", "String", "public String trim()" ], [ "substring", "java.lang", "String", "public String substring(int arg0, int arg1)" ], [ "split", "java.lang", "String", "public String[] split(String arg0, int arg1)" ], [ "isBlank", "java.lang", "String", "public boolean isBlank()" ], [ "equals", "java.lang", "String", "public boolean equals(Object arg0)" ], [ "stripLeading", "java.lang", "String", "public String stripLeading()" ], [ "contains", "java.lang", "String", "public boolean contains(CharSequence arg0)" ], [ "toLowerCase", "java.lang", "String", "public String toLowerCase()" ], [ "resolveConstantDesc", "java.lang", "String", "public String resolveConstantDesc(MethodHandles.Lookup arg0)" ], [ "lines", "java.lang", "String", "public Stream<String> lines()" ], [ "equalsIgnoreCase", "java.lang", "String", "public boolean equalsIgnoreCase(String arg0)" ], [ "length", "java.lang", "String", "public int length()" ], [ "codePointCount", "java.lang", "String", "public int codePointCount(int arg0, int arg1)" ], [ "startsWith", "java.lang", "String", "public boolean startsWith(String arg0)" ], [ "stripIndent", "java.lang", "String", "public String stripIndent()" ], [ "contentEquals", "java.lang", "String", "public boolean contentEquals(StringBuffer arg0)" ], [ "contentEquals", "java.lang", "String", "public boolean contentEquals(CharSequence arg0)" ], [ "codePointAt", "java.lang", "String", "public int codePointAt(int arg0)" ], [ "endsWith", "java.lang", "String", "public boolean endsWith(String arg0)" ], [ "indexOf", "java.lang", "String", "public int indexOf(int arg0, int arg1)" ], [ "getBytes", "java.lang", "String", "public byte[] getBytes()" ], [ "lastIndexOf", "java.lang", "String", "public int lastIndexOf(int arg0, int arg1)" ], [ "indexOf", "java.lang", "String", "public int indexOf(int arg0)" ], [ "lastIndexOf", "java.lang", "String", "public int lastIndexOf(int arg0)" ], [ "lastIndexOf", "java.lang", "String", "public int lastIndexOf(String arg0, int arg1)" ], [ "lastIndexOf", "java.lang", "String", "public int lastIndexOf(String arg0)" ], [ "offsetByCodePoints", "java.lang", "String", "public int offsetByCodePoints(int arg0, int arg1)" ], [ "subSequence", "java.lang", "String", "public CharSequence subSequence(int arg0, int arg1)" ], [ "indexOf", "java.lang", "String", "public int indexOf(String arg0, int arg1)" ], [ "describeConstable", "java.lang", "String", "public Optional<String> describeConstable()" ], [ "repeat", "java.lang", "String", "public String repeat(int arg0)" ], [ "codePoints", "java.lang", "String", "public IntStream codePoints()" ], [ "coder", "java.lang", "String", "byte coder()" ], [ "formatted", "java.lang", "String", "public String formatted(Object[] arg0)" ], [ "regionMatches", "java.lang", "String", "public boolean regionMatches(boolean arg0, int arg1, String arg2, int arg3, int arg4)" ], [ "toUpperCase", "java.lang", "String", "public String toUpperCase(Locale arg0)" ], [ "regionMatches", "java.lang", "String", "public boolean regionMatches(int arg0, String arg1, int arg2, int arg3)" ], [ "toUpperCase", "java.lang", "String", "public String toUpperCase()" ], [ "translateEscapes", "java.lang", "String", "public String translateEscapes()" ], [ "getBytes", "java.lang", "String", "public byte[] getBytes(Charset arg0)" ], [ "matches", "java.lang", "String", "public boolean matches(String arg0)" ], [ "transform", "java.lang", "String", "public <R> R transform(Function<? super String, ? extends R> arg0)" ], [ "startsWith", "java.lang", "String", "public boolean startsWith(String arg0, int arg1)" ], [ "isEmpty", "java.lang", "String", "public boolean isEmpty()" ], [ "toString", "java.lang", "String", "public String toString()" ], [ "strip", "java.lang", "String", "public String strip()" ], [ "replaceAll", "java.lang", "String", "public String replaceAll(String arg0, String arg1)" ], [ "hashCode", "java.lang", "String", "public int hashCode()" ], [ "compareTo", "java.lang", "String", "public int compareTo(String arg0)" ], [ "value", "java.lang", "String", "byte[] value()" ], [ "concat", "java.lang", "String", "public String concat(String arg0)" ], [ "toCharArray", "java.lang", "String", "public char[] toCharArray()" ], [ "charAt", "java.lang", "String", "public char charAt(int arg0)" ], [ "getBytes", "java.lang", "String", "public byte[] getBytes(String arg0) throws UnsupportedEncodingException" ], [ "stripTrailing", "java.lang", "String", "public String stripTrailing()" ], [ "replaceFirst", "java.lang", "String", "public String replaceFirst(String arg0, String arg1)" ], [ "isLatin1", "java.lang", "String", "boolean isLatin1()" ], [ "indent", "java.lang", "String", "public String indent(int arg0)" ], [ "replace", "java.lang", "String", "public String replace(CharSequence arg0, CharSequence arg1)" ], [ "indexOf", "java.lang", "String", "public int indexOf(String arg0)" ], [ "compareTo", "java.lang", "Comparable", "public abstract int compareTo(T arg0)" ], [ "toString", "java.lang", "CharSequence", "public abstract String toString()" ], [ "subSequence", "java.lang", "CharSequence", "public abstract CharSequence subSequence(int arg0, int arg1)" ], [ "isEmpty", "java.lang", "CharSequence", "public default boolean isEmpty()" ], [ "length", "java.lang", "CharSequence", "public abstract int length()" ], [ "charAt", "java.lang", "CharSequence", "public abstract char charAt(int arg0)" ], [ "codePoints", "java.lang", "CharSequence", "public default IntStream codePoints()" ], [ "chars", "java.lang", "CharSequence", "public default IntStream chars()" ], [ "describeConstable", "java.lang.constant", "Constable", "public abstract Optional<? extends ConstantDesc> describeConstable()" ], [ "resolveConstantDesc", "java.lang.constant", "ConstantDesc", "public abstract Object resolveConstantDesc(MethodHandles.Lookup arg0) throws ReflectiveOperationException" ], [ "transform", "org.apache.commons.collections4", "Transformer", "public abstract O transform(I arg0)" ] ],
  "tokensMethodVariablesNonPrivateNonStaticAttributes" : [ ],
  "tokensOracleVariablesNonPrivateNonStaticNonVoidMethods" : [ ],
  "tokensOracleVariablesNonPrivateNonStaticAttributes" : [ ]
}, {
  "id" : 8995,
  "oracle" : ";",
  "oracleType" : "NORMAL_POST",
  "projectName" : "commons-collections4-4.1",
  "packageName" : "org.apache.commons.collections4",
  "className" : "TransformerUtils",
  "javadocTag" : "@return the transformer",
  "methodJavadoc" : "    /**\n     * Gets a Transformer that invokes a method on the input object.\n     * The method parameters are specified. If the input object is {@code null},\n     * {@code null} is returned.\n     *\n     * @param <I>  the input type\n     * @param <O>  the output type\n     * @param methodName  the name of the method\n     * @param paramTypes  the parameter types\n     * @param args  the arguments\n     * @return the transformer\n     * @throws NullPointerException if the method name is null\n     * @throws IllegalArgumentException if the paramTypes and args don't match\n     * @see InvokerTransformer\n     */",
  "methodSourceCode" : "public static <I, O> Transformer<I, O> invokerTransformer(final String methodName, final Class<?>[] paramTypes, final Object[] args){\n    return InvokerTransformer.invokerTransformer(methodName, paramTypes, args);\n}",
  "classJavadoc" : "/**\n * <code>TransformerUtils</code> provides reference implementations and\n * utilities for the Transformer functor interface. The supplied transformers are:\n * <ul>\n * <li>Invoker - returns the result of a method call on the input object\n * <li>Clone - returns a clone of the input object\n * <li>Constant - always returns the same object\n * <li>Closure - performs a Closure and returns the input object\n * <li>Predicate - returns the result of the predicate as a Boolean\n * <li>Factory - returns a new object from a factory\n * <li>Chained - chains two or more transformers together\n * <li>If - calls one transformer or another based on a predicate\n * <li>Switch - calls one transformer based on one or more predicates\n * <li>SwitchMap - calls one transformer looked up from a Map\n * <li>Instantiate - the Class input object is instantiated\n * <li>Map - returns an object from a supplied Map\n * <li>Null - always returns null\n * <li>NOP - returns the input object, which should be immutable\n * <li>Exception - always throws an exception\n * <li>StringValue - returns a <code>java.lang.String</code> representation of the input object\n * </ul>\n * <p>\n * Since v4.1 only transformers which are considered to be unsafe are\n * Serializable. Transformers considered to be unsafe for serialization are:\n * <ul>\n * <li>Invoker\n * <li>Clone\n * <li>Instantiate\n * </ul>\n *\n * @since 3.0\n * @version $Id: TransformerUtils.java 1714362 2015-11-14 20:38:02Z tn $\n */",
  "classSourceCode" : "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.commons.collections4;\n\nimport java.util.Collection;\nimport java.util.Map;\n\nimport org.apache.commons.collections4.functors.ChainedTransformer;\nimport org.apache.commons.collections4.functors.CloneTransformer;\nimport org.apache.commons.collections4.functors.ClosureTransformer;\nimport org.apache.commons.collections4.functors.ConstantTransformer;\nimport org.apache.commons.collections4.functors.EqualPredicate;\nimport org.apache.commons.collections4.functors.ExceptionTransformer;\nimport org.apache.commons.collections4.functors.FactoryTransformer;\nimport org.apache.commons.collections4.functors.IfTransformer;\nimport org.apache.commons.collections4.functors.InstantiateTransformer;\nimport org.apache.commons.collections4.functors.InvokerTransformer;\nimport org.apache.commons.collections4.functors.MapTransformer;\nimport org.apache.commons.collections4.functors.NOPTransformer;\nimport org.apache.commons.collections4.functors.PredicateTransformer;\nimport org.apache.commons.collections4.functors.StringValueTransformer;\nimport org.apache.commons.collections4.functors.SwitchTransformer;\n\n/**\n * <code>TransformerUtils</code> provides reference implementations and\n * utilities for the Transformer functor interface. The supplied transformers are:\n * <ul>\n * <li>Invoker - returns the result of a method call on the input object\n * <li>Clone - returns a clone of the input object\n * <li>Constant - always returns the same object\n * <li>Closure - performs a Closure and returns the input object\n * <li>Predicate - returns the result of the predicate as a Boolean\n * <li>Factory - returns a new object from a factory\n * <li>Chained - chains two or more transformers together\n * <li>If - calls one transformer or another based on a predicate\n * <li>Switch - calls one transformer based on one or more predicates\n * <li>SwitchMap - calls one transformer looked up from a Map\n * <li>Instantiate - the Class input object is instantiated\n * <li>Map - returns an object from a supplied Map\n * <li>Null - always returns null\n * <li>NOP - returns the input object, which should be immutable\n * <li>Exception - always throws an exception\n * <li>StringValue - returns a <code>java.lang.String</code> representation of the input object\n * </ul>\n * <p>\n * Since v4.1 only transformers which are considered to be unsafe are\n * Serializable. Transformers considered to be unsafe for serialization are:\n * <ul>\n * <li>Invoker\n * <li>Clone\n * <li>Instantiate\n * </ul>\n *\n * @since 3.0\n * @version $Id: TransformerUtils.java 1714362 2015-11-14 20:38:02Z tn $\n */\npublic class TransformerUtils {\n\n    /**\n     * This class is not normally instantiated.\n     */\n    private TransformerUtils() {}\n\n    /**\n     * Gets a transformer that always throws an exception.\n     * This could be useful during testing as a placeholder.\n     *\n     * @param <I>  the input type\n     * @param <O>  the output type\n     * @return the transformer\n     * @see ExceptionTransformer\n     */\n    public static <I, O> Transformer<I, O> exceptionTransformer() {\n        return ExceptionTransformer.exceptionTransformer();\n    }\n\n    /**\n     * Gets a transformer that always returns null.\n     *\n     * @param <I>  the input type\n     * @param <O>  the output type\n     * @return the transformer\n     * @see ConstantTransformer\n     */\n    public static <I, O> Transformer<I, O> nullTransformer() {\n        return ConstantTransformer.nullTransformer();\n    }\n\n    /**\n     * Gets a transformer that returns the input object.\n     * The input object should be immutable to maintain the\n     * contract of Transformer (although this is not checked).\n     *\n     * @param <T>  the input/output type\n     * @return the transformer\n     * @see NOPTransformer\n     */\n    public static <T> Transformer<T, T> nopTransformer() {\n        return NOPTransformer.nopTransformer();\n    }\n\n    /**\n     * Gets a transformer that returns a clone of the input object.\n     * The input object will be cloned using one of these techniques (in order):\n     * <ul>\n     * <li>public clone method\n     * <li>public copy constructor\n     * <li>serialization clone\n     * <ul>\n     *\n     * @param <T>  the input/output type\n     * @return the transformer\n     * @see CloneTransformer\n     */\n    public static <T> Transformer<T, T> cloneTransformer() {\n        return CloneTransformer.cloneTransformer();\n    }\n\n    /**\n     * Creates a Transformer that will return the same object each time the\n     * transformer is used.\n     *\n     * @param <I>  the input type\n     * @param <O>  the output type\n     * @param constantToReturn  the constant object to return each time in the transformer\n     * @return the transformer.\n     * @see ConstantTransformer\n     */\n    public static <I, O> Transformer<I, O> constantTransformer(final O constantToReturn) {\n        return ConstantTransformer.constantTransformer(constantToReturn);\n    }\n\n    /**\n     * Creates a Transformer that calls a Closure each time the transformer is used.\n     * The transformer returns the input object.\n     *\n     * @param <T>  the input/output type\n     * @param closure  the closure to run each time in the transformer, not null\n     * @return the transformer\n     * @throws NullPointerException if the closure is null\n     * @see ClosureTransformer\n     */\n    public static <T> Transformer<T, T> asTransformer(final Closure<? super T> closure) {\n        return ClosureTransformer.closureTransformer(closure);\n    }\n\n    /**\n     * Creates a Transformer that calls a Predicate each time the transformer is used.\n     * The transformer will return either Boolean.TRUE or Boolean.FALSE.\n     *\n     * @param <T>  the input type\n     * @param predicate  the predicate to run each time in the transformer, not null\n     * @return the transformer\n     * @throws NullPointerException if the predicate is null\n     * @see PredicateTransformer\n     */\n    public static <T> Transformer<T, Boolean> asTransformer(final Predicate<? super T> predicate) {\n        return PredicateTransformer.predicateTransformer(predicate);\n    }\n\n    /**\n     * Creates a Transformer that calls a Factory each time the transformer is used.\n     * The transformer will return the value returned by the factory.\n     *\n     * @param <I>  the input type\n     * @param <O>  the output type\n     * @param factory  the factory to run each time in the transformer, not null\n     * @return the transformer\n     * @throws NullPointerException if the factory is null\n     * @see FactoryTransformer\n     */\n    public static <I, O> Transformer<I, O> asTransformer(final Factory<? extends O> factory) {\n        return FactoryTransformer.factoryTransformer(factory);\n    }\n\n    /**\n     * Create a new Transformer that calls each transformer in turn, passing the\n     * result into the next transformer.\n     *\n     * @param <T>  the input/output type\n     * @param transformers  an array of transformers to chain\n     * @return the transformer\n     * @throws NullPointerException if the transformers array or any of the transformers is null\n     * @see ChainedTransformer\n     */\n    public static <T> Transformer<T, T> chainedTransformer(\n            final Transformer<? super T, ? extends T>... transformers) {\n        return ChainedTransformer.chainedTransformer(transformers);\n    }\n\n    /**\n     * Create a new Transformer that calls each transformer in turn, passing the\n     * result into the next transformer. The ordering is that of the iterator()\n     * method on the collection.\n     *\n     * @param <T>  the input/output type\n     * @param transformers  a collection of transformers to chain\n     * @return the transformer\n     * @throws NullPointerException if the transformers collection or any of the transformers is null\n     * @see ChainedTransformer\n     */\n    public static <T> Transformer<T, T> chainedTransformer(\n            final Collection<? extends Transformer<? super T, ? extends T>> transformers) {\n        return ChainedTransformer.chainedTransformer(transformers);\n    }\n\n    /**\n     * Create a new Transformer that calls the transformer if the predicate is true,\n     * otherwise the input object is returned unchanged.\n     *\n     * @param <T>  the input / output type\n     * @param predicate  the predicate to switch on\n     * @param trueTransformer  the transformer called if the predicate is true\n     * @return the transformer\n     * @throws NullPointerException if either the predicate or transformer is null\n     * @see IfTransformer\n     * @since 4.1\n     */\n    public static <T> Transformer<T, T> ifTransformer(final Predicate<? super T> predicate,\n                                                      final Transformer<? super T, ? extends T> trueTransformer) {\n        return IfTransformer.ifTransformer(predicate, trueTransformer);\n    }\n\n    /**\n     * Create a new Transformer that calls one of two transformers depending\n     * on the specified predicate.\n     *\n     * @param <I>  the input type\n     * @param <O>  the output type\n     * @param predicate  the predicate to switch on\n     * @param trueTransformer  the transformer called if the predicate is true\n     * @param falseTransformer  the transformer called if the predicate is false\n     * @return the transformer\n     * @throws NullPointerException if either the predicate or transformer is null\n     * @see IfTransformer\n     * @since 4.1\n     */\n    public static <I, O> Transformer<I, O> ifTransformer(final Predicate<? super I> predicate,\n                                                         final Transformer<? super I, ? extends O> trueTransformer,\n                                                         final Transformer<? super I, ? extends O> falseTransformer) {\n        return IfTransformer.ifTransformer(predicate, trueTransformer, falseTransformer);\n    }\n\n    /**\n     * Create a new Transformer that calls one of two transformers depending\n     * on the specified predicate.\n     *\n     * @param <I>  the input type\n     * @param <O>  the output type\n     * @param predicate  the predicate to switch on\n     * @param trueTransformer  the transformer called if the predicate is true\n     * @param falseTransformer  the transformer called if the predicate is false\n     * @return the transformer\n     * @throws NullPointerException if either the predicate or transformer is null\n     * @see SwitchTransformer\n     * @deprecated as of 4.1, use {@link #ifTransformer(Predicate, Transformer, Transformer))\n     */\n    @SuppressWarnings(\"unchecked\")\n    @Deprecated\n    public static <I, O> Transformer<I, O> switchTransformer(final Predicate<? super I> predicate,\n            final Transformer<? super I, ? extends O> trueTransformer,\n            final Transformer<? super I, ? extends O> falseTransformer) {\n        return SwitchTransformer.switchTransformer(new Predicate[] { predicate },\n                                                   new Transformer[] { trueTransformer }, falseTransformer);\n    }\n\n    /**\n     * Create a new Transformer that calls one of the transformers depending\n     * on the predicates. The transformer at array location 0 is called if the\n     * predicate at array location 0 returned true. Each predicate is evaluated\n     * until one returns true. If no predicates evaluate to true, null is returned.\n     *\n     * @param <I>  the input type\n     * @param <O>  the output type\n     * @param predicates  an array of predicates to check\n     * @param transformers  an array of transformers to call\n     * @return the transformer\n     * @throws NullPointerException if the either array is null\n     * @throws NullPointerException if any element in the arrays is null\n     * @throws IllegalArgumentException if the arrays have different sizes\n     * @see SwitchTransformer\n     */\n    public static <I, O> Transformer<I, O> switchTransformer(final Predicate<? super I>[] predicates,\n            final Transformer<? super I, ? extends O>[] transformers) {\n        return SwitchTransformer.switchTransformer(predicates, transformers, null);\n    }\n\n    /**\n     * Create a new Transformer that calls one of the transformers depending\n     * on the predicates. The transformer at array location 0 is called if the\n     * predicate at array location 0 returned true. Each predicate is evaluated\n     * until one returns true. If no predicates evaluate to true, the default\n     * transformer is called. If the default transformer is null, null is returned.\n     *\n     * @param <I>  the input type\n     * @param <O>  the output type\n     * @param predicates  an array of predicates to check\n     * @param transformers  an array of transformers to call\n     * @param defaultTransformer  the default to call if no predicate matches, null means return null\n     * @return the transformer\n     * @throws NullPointerException if the either array is null\n     * @throws NullPointerException if any element in the arrays is null\n     * @throws IllegalArgumentException if the arrays have different sizes\n     * @see SwitchTransformer\n     */\n    public static <I, O> Transformer<I, O> switchTransformer(final Predicate<? super I>[] predicates,\n            final Transformer<? super I, ? extends O>[] transformers,\n            final Transformer<? super I, ? extends O> defaultTransformer) {\n        return SwitchTransformer.switchTransformer(predicates, transformers, defaultTransformer);\n    }\n\n    /**\n     * Create a new Transformer that calls one of the transformers depending\n     * on the predicates.\n     * <p>\n     * The Map consists of Predicate keys and Transformer values. A transformer\n     * is called if its matching predicate returns true. Each predicate is evaluated\n     * until one returns true. If no predicates evaluate to true, the default\n     * transformer is called. The default transformer is set in the map with a\n     * null key. If no default transformer is set, null will be returned in a default\n     * case. The ordering is that of the iterator() method on the entryset collection\n     * of the map.\n     *\n     * @param <I>  the input type\n     * @param <O>  the output type\n     * @param predicatesAndTransformers  a map of predicates to transformers\n     * @return the transformer\n     * @throws NullPointerException if the map is null\n     * @throws NullPointerException if any transformer in the map is null\n     * @throws ClassCastException  if the map elements are of the wrong type\n     * @see SwitchTransformer\n     */\n    public static <I, O> Transformer<I, O> switchTransformer(\n            final Map<Predicate<I>, Transformer<I, O>> predicatesAndTransformers) {\n        return SwitchTransformer.switchTransformer(predicatesAndTransformers);\n    }\n\n    /**\n     * Create a new Transformer that uses the input object as a key to find the\n     * transformer to call.\n     * <p>\n     * The Map consists of object keys and Transformer values. A transformer\n     * is called if the input object equals the key. If there is no match, the\n     * default transformer is called. The default transformer is set in the map\n     * using a null key. If no default is set, null will be returned in a default case.\n     *\n     * @param <I>  the input type\n     * @param <O>  the output type\n     * @param objectsAndTransformers  a map of objects to transformers\n     * @return the transformer\n     * @throws NullPointerException if the map is null\n     * @throws NullPointerException if any transformer in the map is null\n     * @see SwitchTransformer\n     */\n    @SuppressWarnings(\"unchecked\")\n    public static <I, O> Transformer<I, O> switchMapTransformer(\n            final Map<I, Transformer<I, O>> objectsAndTransformers) {\n\n        if (objectsAndTransformers == null) {\n            throw new NullPointerException(\"The object and transformer map must not be null\");\n        }\n        final Transformer<? super I, ? extends O> def = objectsAndTransformers.remove(null);\n        final int size = objectsAndTransformers.size();\n        final Transformer<? super I, ? extends O>[] trs = new Transformer[size];\n        final Predicate<I>[] preds = new Predicate[size];\n        int i = 0;\n        for (final Map.Entry<I, Transformer<I, O>> entry : objectsAndTransformers.entrySet()) {\n            preds[i] = EqualPredicate.<I>equalPredicate(entry.getKey());\n            trs[i++] = entry.getValue();\n        }\n        return TransformerUtils.switchTransformer(preds, trs, def);\n    }\n\n    /**\n     * Gets a Transformer that expects an input Class object that it will instantiate.\n     *\n     * @param <T>  the output type\n     * @return the transformer\n     * @see InstantiateTransformer\n     */\n    public static <T> Transformer<Class<? extends T>, T> instantiateTransformer() {\n        return InstantiateTransformer.instantiateTransformer();\n    }\n\n    /**\n     * Creates a Transformer that expects an input Class object that it will\n     * instantiate. The constructor used is determined by the arguments specified\n     * to this method.\n     *\n     * @param <T>  the output type\n     * @param paramTypes  parameter types for the constructor, can be null\n     * @param args  the arguments to pass to the constructor, can be null\n     * @return the transformer\n     * @throws IllegalArgumentException if the paramTypes and args don't match\n     * @see InstantiateTransformer\n     */\n    public static <T> Transformer<Class<? extends T>, T> instantiateTransformer(\n            final Class<?>[] paramTypes, final Object[] args) {\n        return InstantiateTransformer.instantiateTransformer(paramTypes, args);\n    }\n\n    /**\n     * Creates a Transformer that uses the passed in Map to transform the input\n     * object (as a simple lookup).\n     *\n     * @param <I>  the input type\n     * @param <O>  the output type\n     * @param map  the map to use to transform the objects\n     * @return the transformer, or {@link ConstantTransformer#nullTransformer()} if the\n     *   {@code map} is {@code null}\n     * @see MapTransformer\n     */\n    public static <I, O> Transformer<I, O> mapTransformer(final Map<? super I, ? extends O> map) {\n        return MapTransformer.mapTransformer(map);\n    }\n\n    /**\n     * Gets a Transformer that invokes a method on the input object.\n     * The method must have no parameters. If the input object is null,\n     * null is returned.\n     * <p>\n     * For example, <code>TransformerUtils.invokerTransformer(\"getName\");</code>\n     * will call the <code>getName/code> method on the input object to\n     * determine the transformer result.\n     *\n     * @param <I>  the input type\n     * @param <O>  the output type\n     * @param methodName  the method name to call on the input object, may not be null\n     * @return the transformer\n     * @throws NullPointerException if the methodName is null.\n     * @see InvokerTransformer\n     */\n    public static <I, O> Transformer<I, O> invokerTransformer(final String methodName) {\n        return InvokerTransformer.invokerTransformer(methodName, null, null);\n    }\n\n    /**\n     * Gets a Transformer that invokes a method on the input object.\n     * The method parameters are specified. If the input object is {@code null},\n     * {@code null} is returned.\n     *\n     * @param <I>  the input type\n     * @param <O>  the output type\n     * @param methodName  the name of the method\n     * @param paramTypes  the parameter types\n     * @param args  the arguments\n     * @return the transformer\n     * @throws NullPointerException if the method name is null\n     * @throws IllegalArgumentException if the paramTypes and args don't match\n     * @see InvokerTransformer\n     */\n    public static <I, O> Transformer<I, O> invokerTransformer(final String methodName, final Class<?>[] paramTypes,\n                                                              final Object[] args) {\n        return InvokerTransformer.invokerTransformer(methodName, paramTypes, args);\n    }\n\n    /**\n     * Gets a transformer that returns a <code>java.lang.String</code>\n     * representation of the input object. This is achieved via the\n     * <code>toString</code> method, <code>null</code> returns 'null'.\n     *\n     * @param <T>  the input type\n     * @return the transformer\n     * @see StringValueTransformer\n     */\n    public static <T> Transformer<T, String> stringValueTransformer() {\n        return StringValueTransformer.stringValueTransformer();\n    }\n\n}\n",
  "tokensGeneralGrammar" : [ "null", "true", "false", ",", ".", ":", ";", "?", "(", ")", "jdVar", "stream", "Arrays", "allMatch", "noneMatch", "anyMatch", "~", ">>", "<<", ">>>", "|", "&", "^", "+", "-", "/", "*", "%", "&&", "||", ">=", "<=", ">", "<", "==", "!=", "instanceof", "class", "methodResultID", "this" ],
  "tokensGeneralValuesGlobalDictionary" : [ [ "0", "int" ], [ "1", "int" ], [ "-1", "int" ], [ "0.0", "double" ], [ "1.0", "double" ], [ "-1.0", "double" ], [ "\"\"", "String" ], [ "\" \"", "String" ] ],
  "tokensProjectClasses" : [ [ "BidiMap", "org.apache.commons.collections4" ], [ "Equator", "org.apache.commons.collections4" ], [ "MultiSet", "org.apache.commons.collections4" ], [ "IteratorUtils", "org.apache.commons.collections4" ], [ "ComparatorUtils", "org.apache.commons.collections4" ], [ "FunctorException", "org.apache.commons.collections4" ], [ "AbstractDualBidiMap", "org.apache.commons.collections4.bidimap" ], [ "UnmodifiableBidiMap", "org.apache.commons.collections4.bidimap" ], [ "AbstractOrderedBidiMapDecorator", "org.apache.commons.collections4.bidimap" ], [ "UnmodifiableOrderedBidiMap", "org.apache.commons.collections4.bidimap" ], [ "AbstractBidiMapDecorator", "org.apache.commons.collections4.bidimap" ], [ "DualLinkedHashBidiMap", "org.apache.commons.collections4.bidimap" ], [ "UnmodifiableSortedBidiMap", "org.apache.commons.collections4.bidimap" ], [ "AbstractSortedBidiMapDecorator", "org.apache.commons.collections4.bidimap" ], [ "DualHashBidiMap", "org.apache.commons.collections4.bidimap" ], [ "DualTreeBidiMap", "org.apache.commons.collections4.bidimap" ], [ "TreeBidiMap", "org.apache.commons.collections4.bidimap" ], [ "MultiMapUtils", "org.apache.commons.collections4" ], [ "BoundedCollection", "org.apache.commons.collections4" ], [ "UnmodifiableBoundedCollection", "org.apache.commons.collections4.collection" ], [ "CompositeCollection", "org.apache.commons.collections4.collection" ], [ "TransformedCollection", "org.apache.commons.collections4.collection" ], [ "PredicatedCollection", "org.apache.commons.collections4.collection" ], [ "IndexedCollection", "org.apache.commons.collections4.collection" ], [ "SynchronizedCollection", "org.apache.commons.collections4.collection" ], [ "UnmodifiableCollection", "org.apache.commons.collections4.collection" ], [ "AbstractCollectionDecorator", "org.apache.commons.collections4.collection" ], [ "OrderedBidiMap", "org.apache.commons.collections4" ], [ "FactoryUtils", "org.apache.commons.collections4" ], [ "IterableGet", "org.apache.commons.collections4" ], [ "ListUtils", "org.apache.commons.collections4" ], [ "Closure", "org.apache.commons.collections4" ], [ "IterableSortedMap", "org.apache.commons.collections4" ], [ "MapUtils", "org.apache.commons.collections4" ], [ "Transformer", "org.apache.commons.collections4" ], [ "DefaultEquator", "org.apache.commons.collections4.functors" ], [ "StringValueTransformer", "org.apache.commons.collections4.functors" ], [ "PredicateDecorator", "org.apache.commons.collections4.functors" ], [ "IfTransformer", "org.apache.commons.collections4.functors" ], [ "IdentityPredicate", "org.apache.commons.collections4.functors" ], [ "ExceptionClosure", "org.apache.commons.collections4.functors" ], [ "NOPClosure", "org.apache.commons.collections4.functors" ], [ "ClosureTransformer", "org.apache.commons.collections4.functors" ], [ "FunctorUtils", "org.apache.commons.collections4.functors" ], [ "TransformerPredicate", "org.apache.commons.collections4.functors" ], [ "NullPredicate", "org.apache.commons.collections4.functors" ], [ "ConstantTransformer", "org.apache.commons.collections4.functors" ], [ "PredicateTransformer", "org.apache.commons.collections4.functors" ], [ "WhileClosure", "org.apache.commons.collections4.functors" ], [ "ForClosure", "org.apache.commons.collections4.functors" ], [ "NullIsTruePredicate", "org.apache.commons.collections4.functors" ], [ "TransformedPredicate", "org.apache.commons.collections4.functors" ], [ "NonePredicate", "org.apache.commons.collections4.functors" ], [ "ExceptionTransformer", "org.apache.commons.collections4.functors" ], [ "SwitchTransformer", "org.apache.commons.collections4.functors" ], [ "TransformerClosure", "org.apache.commons.collections4.functors" ], [ "OrPredicate", "org.apache.commons.collections4.functors" ], [ "NOPTransformer", "org.apache.commons.collections4.functors" ], [ "MapTransformer", "org.apache.commons.collections4.functors" ], [ "ExceptionFactory", "org.apache.commons.collections4.functors" ], [ "ChainedClosure", "org.apache.commons.collections4.functors" ], [ "AndPredicate", "org.apache.commons.collections4.functors" ], [ "PrototypeFactory", "org.apache.commons.collections4.functors" ], [ "ExceptionPredicate", "org.apache.commons.collections4.functors" ], [ "AbstractQuantifierPredicate", "org.apache.commons.collections4.functors" ], [ "InstanceofPredicate", "org.apache.commons.collections4.functors" ], [ "InvokerTransformer", "org.apache.commons.collections4.functors" ], [ "FalsePredicate", "org.apache.commons.collections4.functors" ], [ "CloneTransformer", "org.apache.commons.collections4.functors" ], [ "NotPredicate", "org.apache.commons.collections4.functors" ], [ "ConstantFactory", "org.apache.commons.collections4.functors" ], [ "ChainedTransformer", "org.apache.commons.collections4.functors" ], [ "ComparatorPredicate", "org.apache.commons.collections4.functors" ], [ "CatchAndRethrowClosure", "org.apache.commons.collections4.functors" ], [ "AllPredicate", "org.apache.commons.collections4.functors" ], [ "NullIsFalsePredicate", "org.apache.commons.collections4.functors" ], [ "NullIsExceptionPredicate", "org.apache.commons.collections4.functors" ], [ "AnyPredicate", "org.apache.commons.collections4.functors" ], [ "TruePredicate", "org.apache.commons.collections4.functors" ], [ "FactoryTransformer", "org.apache.commons.collections4.functors" ], [ "NotNullPredicate", "org.apache.commons.collections4.functors" ], [ "SwitchClosure", "org.apache.commons.collections4.functors" ], [ "UniquePredicate", "org.apache.commons.collections4.functors" ], [ "InstantiateTransformer", "org.apache.commons.collections4.functors" ], [ "OnePredicate", "org.apache.commons.collections4.functors" ], [ "EqualPredicate", "org.apache.commons.collections4.functors" ], [ "InstantiateFactory", "org.apache.commons.collections4.functors" ], [ "IfClosure", "org.apache.commons.collections4.functors" ], [ "ResettableListIterator", "org.apache.commons.collections4" ], [ "OrderedIterator", "org.apache.commons.collections4" ], [ "ComparatorChain", "org.apache.commons.collections4.comparators" ], [ "BooleanComparator", "org.apache.commons.collections4.comparators" ], [ "ReverseComparator", "org.apache.commons.collections4.comparators" ], [ "ComparableComparator", "org.apache.commons.collections4.comparators" ], [ "TransformingComparator", "org.apache.commons.collections4.comparators" ], [ "FixedOrderComparator", "org.apache.commons.collections4.comparators" ], [ "NullComparator", "org.apache.commons.collections4.comparators" ], [ "CollectionUtils", "org.apache.commons.collections4" ], [ "ListValuedMap", "org.apache.commons.collections4" ], [ "AbstractIterableGetMapDecorator", "org.apache.commons.collections4.splitmap" ], [ "TransformedSplitMap", "org.apache.commons.collections4.splitmap" ], [ "Factory", "org.apache.commons.collections4" ], [ "IterableUtils", "org.apache.commons.collections4" ], [ "Bag", "org.apache.commons.collections4" ], [ "Predicate", "org.apache.commons.collections4" ], [ "SortedBag", "org.apache.commons.collections4" ], [ "TrieUtils", "org.apache.commons.collections4" ], [ "ClosureUtils", "org.apache.commons.collections4" ], [ "PatriciaTrie", "org.apache.commons.collections4.trie" ], [ "UnmodifiableTrie", "org.apache.commons.collections4.trie" ], [ "KeyAnalyzer", "org.apache.commons.collections4.trie" ], [ "AbstractPatriciaTrie", "org.apache.commons.collections4.trie" ], [ "AbstractBitwiseTrie", "org.apache.commons.collections4.trie" ], [ "StringKeyAnalyzer", "org.apache.commons.collections4.trie.analyzer" ], [ "TransformedSortedMap", "org.apache.commons.collections4.map" ], [ "AbstractLinkedMap", "org.apache.commons.collections4.map" ], [ "Flat3Map", "org.apache.commons.collections4.map" ], [ "PredicatedMap", "org.apache.commons.collections4.map" ], [ "FixedSizeSortedMap", "org.apache.commons.collections4.map" ], [ "UnmodifiableSortedMap", "org.apache.commons.collections4.map" ], [ "PredicatedSortedMap", "org.apache.commons.collections4.map" ], [ "DefaultedMap", "org.apache.commons.collections4.map" ], [ "ReferenceIdentityMap", "org.apache.commons.collections4.map" ], [ "AbstractSortedMapDecorator", "org.apache.commons.collections4.map" ], [ "AbstractInputCheckedMapDecorator", "org.apache.commons.collections4.map" ], [ "FixedSizeMap", "org.apache.commons.collections4.map" ], [ "LazySortedMap", "org.apache.commons.collections4.map" ], [ "UnmodifiableOrderedMap", "org.apache.commons.collections4.map" ], [ "CaseInsensitiveMap", "org.apache.commons.collections4.map" ], [ "AbstractHashedMap", "org.apache.commons.collections4.map" ], [ "AbstractOrderedMapDecorator", "org.apache.commons.collections4.map" ], [ "UnmodifiableMap", "org.apache.commons.collections4.map" ], [ "EntrySetToMapIteratorAdapter", "org.apache.commons.collections4.map" ], [ "AbstractIterableMap", "org.apache.commons.collections4.map" ], [ "ListOrderedMap", "org.apache.commons.collections4.map" ], [ "LinkedMap", "org.apache.commons.collections4.map" ], [ "SingletonMap", "org.apache.commons.collections4.map" ], [ "UnmodifiableEntrySet", "org.apache.commons.collections4.map" ], [ "StaticBucketMap", "org.apache.commons.collections4.map" ], [ "AbstractMapDecorator", "org.apache.commons.collections4.map" ], [ "AbstractReferenceMap", "org.apache.commons.collections4.map" ], [ "MultiKeyMap", "org.apache.commons.collections4.map" ], [ "HashedMap", "org.apache.commons.collections4.map" ], [ "LazyMap", "org.apache.commons.collections4.map" ], [ "PassiveExpiringMap", "org.apache.commons.collections4.map" ], [ "MultiValueMap", "org.apache.commons.collections4.map" ], [ "LRUMap", "org.apache.commons.collections4.map" ], [ "ReferenceMap", "org.apache.commons.collections4.map" ], [ "TransformedMap", "org.apache.commons.collections4.map" ], [ "CompositeMap", "org.apache.commons.collections4.map" ], [ "UnmodifiableMapEntry", "org.apache.commons.collections4.keyvalue" ], [ "MultiKey", "org.apache.commons.collections4.keyvalue" ], [ "DefaultMapEntry", "org.apache.commons.collections4.keyvalue" ], [ "DefaultKeyValue", "org.apache.commons.collections4.keyvalue" ], [ "AbstractMapEntryDecorator", "org.apache.commons.collections4.keyvalue" ], [ "AbstractKeyValue", "org.apache.commons.collections4.keyvalue" ], [ "TiedMapEntry", "org.apache.commons.collections4.keyvalue" ], [ "AbstractMapEntry", "org.apache.commons.collections4.keyvalue" ], [ "MultiSetUtils", "org.apache.commons.collections4" ], [ "MapIterator", "org.apache.commons.collections4" ], [ "AbstractMultiValuedMap", "org.apache.commons.collections4.multimap" ], [ "UnmodifiableMultiValuedMap", "org.apache.commons.collections4.multimap" ], [ "HashSetValuedHashMap", "org.apache.commons.collections4.multimap" ], [ "TransformedMultiValuedMap", "org.apache.commons.collections4.multimap" ], [ "AbstractSetValuedMap", "org.apache.commons.collections4.multimap" ], [ "AbstractListValuedMap", "org.apache.commons.collections4.multimap" ], [ "ArrayListValuedHashMap", "org.apache.commons.collections4.multimap" ], [ "AbstractMultiValuedMapDecorator", "org.apache.commons.collections4.multimap" ], [ "LazyList", "org.apache.commons.collections4.list" ], [ "AbstractSerializableListDecorator", "org.apache.commons.collections4.list" ], [ "TreeList", "org.apache.commons.collections4.list" ], [ "SetUniqueList", "org.apache.commons.collections4.list" ], [ "AbstractListDecorator", "org.apache.commons.collections4.list" ], [ "NodeCachingLinkedList", "org.apache.commons.collections4.list" ], [ "UnmodifiableList", "org.apache.commons.collections4.list" ], [ "FixedSizeList", "org.apache.commons.collections4.list" ], [ "TransformedList", "org.apache.commons.collections4.list" ], [ "GrowthList", "org.apache.commons.collections4.list" ], [ "AbstractLinkedList", "org.apache.commons.collections4.list" ], [ "CursorableLinkedList", "org.apache.commons.collections4.list" ], [ "PredicatedList", "org.apache.commons.collections4.list" ], [ "OrderedMap", "org.apache.commons.collections4" ], [ "AbstractQueueDecorator", "org.apache.commons.collections4.queue" ], [ "TransformedQueue", "org.apache.commons.collections4.queue" ], [ "UnmodifiableQueue", "org.apache.commons.collections4.queue" ], [ "CircularFifoQueue", "org.apache.commons.collections4.queue" ], [ "PredicatedQueue", "org.apache.commons.collections4.queue" ], [ "FluentIterable", "org.apache.commons.collections4" ], [ "TransformerUtils", "org.apache.commons.collections4" ], [ "PredicateUtils", "org.apache.commons.collections4" ], [ "ResettableIterator", "org.apache.commons.collections4" ], [ "MultiValuedMap", "org.apache.commons.collections4" ], [ "SetUtils", "org.apache.commons.collections4" ], [ "SortedBidiMap", "org.apache.commons.collections4" ], [ "ArrayStack", "org.apache.commons.collections4" ], [ "Put", "org.apache.commons.collections4" ], [ "OrderedMapIterator", "org.apache.commons.collections4" ], [ "TransformedSet", "org.apache.commons.collections4.set" ], [ "CompositeSet", "org.apache.commons.collections4.set" ], [ "TransformedNavigableSet", "org.apache.commons.collections4.set" ], [ "PredicatedNavigableSet", "org.apache.commons.collections4.set" ], [ "AbstractSetDecorator", "org.apache.commons.collections4.set" ], [ "ListOrderedSet", "org.apache.commons.collections4.set" ], [ "UnmodifiableSet", "org.apache.commons.collections4.set" ], [ "AbstractSerializableSetDecorator", "org.apache.commons.collections4.set" ], [ "MapBackedSet", "org.apache.commons.collections4.set" ], [ "UnmodifiableSortedSet", "org.apache.commons.collections4.set" ], [ "PredicatedSortedSet", "org.apache.commons.collections4.set" ], [ "AbstractSortedSetDecorator", "org.apache.commons.collections4.set" ], [ "PredicatedSet", "org.apache.commons.collections4.set" ], [ "AbstractNavigableSetDecorator", "org.apache.commons.collections4.set" ], [ "UnmodifiableNavigableSet", "org.apache.commons.collections4.set" ], [ "TransformedSortedSet", "org.apache.commons.collections4.set" ], [ "IterableMap", "org.apache.commons.collections4" ], [ "EnumerationUtils", "org.apache.commons.collections4" ], [ "DeleteCommand", "org.apache.commons.collections4.sequence" ], [ "ReplacementsHandler", "org.apache.commons.collections4.sequence" ], [ "InsertCommand", "org.apache.commons.collections4.sequence" ], [ "SequencesComparator", "org.apache.commons.collections4.sequence" ], [ "ReplacementsFinder", "org.apache.commons.collections4.sequence" ], [ "KeepCommand", "org.apache.commons.collections4.sequence" ], [ "EditCommand", "org.apache.commons.collections4.sequence" ], [ "CommandVisitor", "org.apache.commons.collections4.sequence" ], [ "EditScript", "org.apache.commons.collections4.sequence" ], [ "QueueUtils", "org.apache.commons.collections4" ], [ "SetValuedMap", "org.apache.commons.collections4" ], [ "SynchronizedBag", "org.apache.commons.collections4.bag" ], [ "AbstractMapBag", "org.apache.commons.collections4.bag" ], [ "CollectionBag", "org.apache.commons.collections4.bag" ], [ "UnmodifiableBag", "org.apache.commons.collections4.bag" ], [ "PredicatedSortedBag", "org.apache.commons.collections4.bag" ], [ "UnmodifiableSortedBag", "org.apache.commons.collections4.bag" ], [ "HashBag", "org.apache.commons.collections4.bag" ], [ "AbstractBagDecorator", "org.apache.commons.collections4.bag" ], [ "TransformedSortedBag", "org.apache.commons.collections4.bag" ], [ "TreeBag", "org.apache.commons.collections4.bag" ], [ "PredicatedBag", "org.apache.commons.collections4.bag" ], [ "SynchronizedSortedBag", "org.apache.commons.collections4.bag" ], [ "CollectionSortedBag", "org.apache.commons.collections4.bag" ], [ "TransformedBag", "org.apache.commons.collections4.bag" ], [ "AbstractSortedBagDecorator", "org.apache.commons.collections4.bag" ], [ "HashMultiSet", "org.apache.commons.collections4.multiset" ], [ "AbstractMultiSet", "org.apache.commons.collections4.multiset" ], [ "PredicatedMultiSet", "org.apache.commons.collections4.multiset" ], [ "AbstractMultiSetDecorator", "org.apache.commons.collections4.multiset" ], [ "AbstractMapMultiSet", "org.apache.commons.collections4.multiset" ], [ "UnmodifiableMultiSet", "org.apache.commons.collections4.multiset" ], [ "SynchronizedMultiSet", "org.apache.commons.collections4.multiset" ], [ "BagUtils", "org.apache.commons.collections4" ], [ "Unmodifiable", "org.apache.commons.collections4" ], [ "Get", "org.apache.commons.collections4" ], [ "Trie", "org.apache.commons.collections4" ], [ "MultiMap", "org.apache.commons.collections4" ], [ "KeyValue", "org.apache.commons.collections4" ], [ "IteratorChain", "org.apache.commons.collections4.iterators" ], [ "EmptyListIterator", "org.apache.commons.collections4.iterators" ], [ "UnmodifiableOrderedMapIterator", "org.apache.commons.collections4.iterators" ], [ "AbstractListIteratorDecorator", "org.apache.commons.collections4.iterators" ], [ "ZippingIterator", "org.apache.commons.collections4.iterators" ], [ "UnmodifiableIterator", "org.apache.commons.collections4.iterators" ], [ "CollatingIterator", "org.apache.commons.collections4.iterators" ], [ "UniqueFilterIterator", "org.apache.commons.collections4.iterators" ], [ "ReverseListIterator", "org.apache.commons.collections4.iterators" ], [ "BoundedIterator", "org.apache.commons.collections4.iterators" ], [ "AbstractIteratorDecorator", "org.apache.commons.collections4.iterators" ], [ "TransformIterator", "org.apache.commons.collections4.iterators" ], [ "AbstractEmptyIterator", "org.apache.commons.collections4.iterators" ], [ "NodeListIterator", "org.apache.commons.collections4.iterators" ], [ "ArrayListIterator", "org.apache.commons.collections4.iterators" ], [ "LazyIteratorChain", "org.apache.commons.collections4.iterators" ], [ "LoopingListIterator", "org.apache.commons.collections4.iterators" ], [ "PeekingIterator", "org.apache.commons.collections4.iterators" ], [ "ObjectGraphIterator", "org.apache.commons.collections4.iterators" ], [ "ArrayIterator", "org.apache.commons.collections4.iterators" ], [ "PermutationIterator", "org.apache.commons.collections4.iterators" ], [ "SingletonListIterator", "org.apache.commons.collections4.iterators" ], [ "EmptyMapIterator", "org.apache.commons.collections4.iterators" ], [ "ObjectArrayIterator", "org.apache.commons.collections4.iterators" ], [ "EnumerationIterator", "org.apache.commons.collections4.iterators" ], [ "IteratorIterable", "org.apache.commons.collections4.iterators" ], [ "AbstractEmptyMapIterator", "org.apache.commons.collections4.iterators" ], [ "LoopingIterator", "org.apache.commons.collections4.iterators" ], [ "IteratorEnumeration", "org.apache.commons.collections4.iterators" ], [ "SingletonIterator", "org.apache.commons.collections4.iterators" ], [ "ListIteratorWrapper", "org.apache.commons.collections4.iterators" ], [ "SkippingIterator", "org.apache.commons.collections4.iterators" ], [ "EmptyOrderedIterator", "org.apache.commons.collections4.iterators" ], [ "AbstractMapIteratorDecorator", "org.apache.commons.collections4.iterators" ], [ "ObjectArrayListIterator", "org.apache.commons.collections4.iterators" ], [ "UnmodifiableListIterator", "org.apache.commons.collections4.iterators" ], [ "EmptyOrderedMapIterator", "org.apache.commons.collections4.iterators" ], [ "UnmodifiableMapIterator", "org.apache.commons.collections4.iterators" ], [ "EmptyIterator", "org.apache.commons.collections4.iterators" ], [ "EntrySetMapIterator", "org.apache.commons.collections4.iterators" ], [ "PushbackIterator", "org.apache.commons.collections4.iterators" ], [ "FilterIterator", "org.apache.commons.collections4.iterators" ], [ "AbstractUntypedIteratorDecorator", "org.apache.commons.collections4.iterators" ], [ "AbstractOrderedMapIteratorDecorator", "org.apache.commons.collections4.iterators" ], [ "FilterListIterator", "org.apache.commons.collections4.iterators" ], [ "SplitMapUtils", "org.apache.commons.collections4" ], [ "BoundedMap", "org.apache.commons.collections4" ] ],
  "tokensProjectClassesNonPrivateStaticNonVoidMethods" : [ [ "emptyIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> emptyIterator()" ], [ "emptyListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> emptyListIterator()" ], [ "emptyOrderedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> OrderedIterator<E> emptyOrderedIterator()" ], [ "emptyMapIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <K, V> MapIterator<K, V> emptyMapIterator()" ], [ "emptyOrderedMapIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <K, V> OrderedMapIterator<K, V> emptyOrderedMapIterator()" ], [ "singletonIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> singletonIterator(final E object)" ], [ "singletonListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ListIterator<E> singletonListIterator(final E object)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final E... array)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final Object array)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final E[] array, final int start)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final Object array, final int start)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final E[] array, final int start, final int end)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final Object array, final int start, final int end)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final E... array)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final Object array)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final E[] array, final int start)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final Object array, final int start)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final E[] array, final int start, final int end)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final Object array, final int start, final int end)" ], [ "boundedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> BoundedIterator<E> boundedIterator(final Iterator<? extends E> iterator, long max)" ], [ "boundedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> BoundedIterator<E> boundedIterator(final Iterator<? extends E> iterator, long offset, long max)" ], [ "unmodifiableIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> unmodifiableIterator(final Iterator<E> iterator)" ], [ "unmodifiableListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ListIterator<E> unmodifiableListIterator(final ListIterator<E> listIterator)" ], [ "unmodifiableMapIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <K, V> MapIterator<K, V> unmodifiableMapIterator(final MapIterator<K, V> mapIterator)" ], [ "chainedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> chainedIterator(final Iterator<? extends E> iterator1, final Iterator<? extends E> iterator2)" ], [ "chainedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> chainedIterator(final Iterator<? extends E>... iterators)" ], [ "chainedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> chainedIterator(final Collection<Iterator<? extends E>> iterators)" ], [ "collatedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> collatedIterator(final Comparator<? super E> comparator, final Iterator<? extends E> iterator1, final Iterator<? extends E> iterator2)" ], [ "collatedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> collatedIterator(final Comparator<? super E> comparator, final Iterator<? extends E>... iterators)" ], [ "collatedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> collatedIterator(final Comparator<? super E> comparator, final Collection<Iterator<? extends E>> iterators)" ], [ "objectGraphIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> objectGraphIterator(final E root, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <I, O> Iterator<O> transformedIterator(final Iterator<? extends I> iterator, final Transformer<? super I, ? extends O> transform)" ], [ "filteredIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> filteredIterator(final Iterator<? extends E> iterator, final Predicate<? super E> predicate)" ], [ "filteredListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ListIterator<E> filteredListIterator(final ListIterator<? extends E> listIterator, final Predicate<? super E> predicate)" ], [ "loopingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> loopingIterator(final Collection<? extends E> coll)" ], [ "loopingListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> loopingListIterator(final List<E> list)" ], [ "nodeListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static NodeListIterator nodeListIterator(final NodeList nodeList)" ], [ "nodeListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static NodeListIterator nodeListIterator(final Node node)" ], [ "peekingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> peekingIterator(final Iterator<? extends E> iterator)" ], [ "pushbackIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> pushbackIterator(final Iterator<? extends E> iterator)" ], [ "skippingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> SkippingIterator<E> skippingIterator(final Iterator<E> iterator, long offset)" ], [ "zippingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ZippingIterator<E> zippingIterator(final Iterator<? extends E> a, final Iterator<? extends E> b)" ], [ "zippingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ZippingIterator<E> zippingIterator(final Iterator<? extends E> a, final Iterator<? extends E> b, final Iterator<? extends E> c)" ], [ "zippingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ZippingIterator<E> zippingIterator(final Iterator<? extends E>... iterators)" ], [ "asIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> asIterator(final Enumeration<? extends E> enumeration)" ], [ "asIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> asIterator(final Enumeration<? extends E> enumeration, final Collection<? super E> removeCollection)" ], [ "asEnumeration", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Enumeration<E> asEnumeration(final Iterator<? extends E> iterator)" ], [ "asIterable", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterable<E> asIterable(final Iterator<? extends E> iterator)" ], [ "asMultipleUseIterable", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterable<E> asMultipleUseIterable(final Iterator<? extends E> iterator)" ], [ "toListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ListIterator<E> toListIterator(final Iterator<? extends E> iterator)" ], [ "toArray", "org.apache.commons.collections4", "IteratorUtils", "public static Object[] toArray(final Iterator<?> iterator)" ], [ "toArray", "org.apache.commons.collections4", "IteratorUtils", "public static <E> E[] toArray(final Iterator<? extends E> iterator, final Class<E> arrayClass)" ], [ "toList", "org.apache.commons.collections4", "IteratorUtils", "public static <E> List<E> toList(final Iterator<? extends E> iterator)" ], [ "toList", "org.apache.commons.collections4", "IteratorUtils", "public static <E> List<E> toList(final Iterator<? extends E> iterator, final int estimatedSize)" ], [ "getIterator", "org.apache.commons.collections4", "IteratorUtils", "public static Iterator<?> getIterator(final Object obj)" ], [ "forEachButLast", "org.apache.commons.collections4", "IteratorUtils", "public static <E> E forEachButLast(final Iterator<E> iterator, final Closure<? super E> closure)" ], [ "find", "org.apache.commons.collections4", "IteratorUtils", "public static <E> E find(final Iterator<E> iterator, final Predicate<? super E> predicate)" ], [ "indexOf", "org.apache.commons.collections4", "IteratorUtils", "public static <E> int indexOf(final Iterator<E> iterator, final Predicate<? super E> predicate)" ], [ "matchesAny", "org.apache.commons.collections4", "IteratorUtils", "public static <E> boolean matchesAny(final Iterator<E> iterator, final Predicate<? super E> predicate)" ], [ "matchesAll", "org.apache.commons.collections4", "IteratorUtils", "public static <E> boolean matchesAll(final Iterator<E> iterator, final Predicate<? super E> predicate)" ], [ "isEmpty", "org.apache.commons.collections4", "IteratorUtils", "public static boolean isEmpty(final Iterator<?> iterator)" ], [ "contains", "org.apache.commons.collections4", "IteratorUtils", "public static <E> boolean contains(final Iterator<E> iterator, final Object object)" ], [ "get", "org.apache.commons.collections4", "IteratorUtils", "public static <E> E get(final Iterator<E> iterator, final int index)" ], [ "size", "org.apache.commons.collections4", "IteratorUtils", "public static int size(final Iterator<?> iterator)" ], [ "toString", "org.apache.commons.collections4", "IteratorUtils", "public static <E> String toString(final Iterator<E> iterator)" ], [ "toString", "org.apache.commons.collections4", "IteratorUtils", "public static <E> String toString(final Iterator<E> iterator, final Transformer<? super E, String> transformer)" ], [ "toString", "org.apache.commons.collections4", "IteratorUtils", "public static <E> String toString(final Iterator<E> iterator, final Transformer<? super E, String> transformer, final String delimiter, final String prefix, final String suffix)" ], [ "naturalComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E extends Comparable<? super E>> Comparator<E> naturalComparator()" ], [ "chainedComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> Comparator<E> chainedComparator(final Comparator<E>... comparators)" ], [ "chainedComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> Comparator<E> chainedComparator(final Collection<Comparator<E>> comparators)" ], [ "reversedComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> Comparator<E> reversedComparator(final Comparator<E> comparator)" ], [ "booleanComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static Comparator<Boolean> booleanComparator(final boolean trueFirst)" ], [ "nullLowComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> Comparator<E> nullLowComparator(Comparator<E> comparator)" ], [ "nullHighComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> Comparator<E> nullHighComparator(Comparator<E> comparator)" ], [ "transformedComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <I, O> Comparator<I> transformedComparator(Comparator<O> comparator, final Transformer<? super I, ? extends O> transformer)" ], [ "min", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> E min(final E o1, final E o2, Comparator<E> comparator)" ], [ "max", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> E max(final E o1, final E o2, Comparator<E> comparator)" ], [ "unmodifiableBidiMap", "org.apache.commons.collections4.bidimap", "UnmodifiableBidiMap", "public static <K, V> BidiMap<K, V> unmodifiableBidiMap(final BidiMap<? extends K, ? extends V> map)" ], [ "unmodifiableOrderedBidiMap", "org.apache.commons.collections4.bidimap", "UnmodifiableOrderedBidiMap", "public static <K, V> OrderedBidiMap<K, V> unmodifiableOrderedBidiMap(final OrderedBidiMap<? extends K, ? extends V> map)" ], [ "unmodifiableSortedBidiMap", "org.apache.commons.collections4.bidimap", "UnmodifiableSortedBidiMap", "public static <K, V> SortedBidiMap<K, V> unmodifiableSortedBidiMap(final SortedBidiMap<K, ? extends V> map)" ], [ "emptyMultiValuedMap", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> MultiValuedMap<K, V> emptyMultiValuedMap()" ], [ "emptyIfNull", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> MultiValuedMap<K, V> emptyIfNull(final MultiValuedMap<K, V> map)" ], [ "isEmpty", "org.apache.commons.collections4", "MultiMapUtils", "public static boolean isEmpty(final MultiValuedMap<?, ?> map)" ], [ "getCollection", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> Collection<V> getCollection(final MultiValuedMap<K, V> map, final K key)" ], [ "getValuesAsList", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> List<V> getValuesAsList(final MultiValuedMap<K, V> map, final K key)" ], [ "getValuesAsSet", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> Set<V> getValuesAsSet(final MultiValuedMap<K, V> map, final K key)" ], [ "getValuesAsBag", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> Bag<V> getValuesAsBag(final MultiValuedMap<K, V> map, final K key)" ], [ "newListValuedHashMap", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> ListValuedMap<K, V> newListValuedHashMap()" ], [ "newSetValuedHashMap", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> SetValuedMap<K, V> newSetValuedHashMap()" ], [ "unmodifiableMultiValuedMap", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> MultiValuedMap<K, V> unmodifiableMultiValuedMap(final MultiValuedMap<? extends K, ? extends V> map)" ], [ "transformedMultiValuedMap", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> MultiValuedMap<K, V> transformedMultiValuedMap(final MultiValuedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "unmodifiableBoundedCollection", "org.apache.commons.collections4.collection", "UnmodifiableBoundedCollection", "public static <E> BoundedCollection<E> unmodifiableBoundedCollection(final BoundedCollection<? extends E> coll)" ], [ "unmodifiableBoundedCollection", "org.apache.commons.collections4.collection", "UnmodifiableBoundedCollection", "public static <E> BoundedCollection<E> unmodifiableBoundedCollection(Collection<? extends E> coll)" ], [ "transformingCollection", "org.apache.commons.collections4.collection", "TransformedCollection", "public static <E> TransformedCollection<E> transformingCollection(final Collection<E> coll, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedCollection", "org.apache.commons.collections4.collection", "TransformedCollection", "public static <E> TransformedCollection<E> transformedCollection(final Collection<E> collection, final Transformer<? super E, ? extends E> transformer)" ], [ "builder", "org.apache.commons.collections4.collection", "PredicatedCollection", "public static <E> Builder<E> builder(final Predicate<? super E> predicate)" ], [ "notNullBuilder", "org.apache.commons.collections4.collection", "PredicatedCollection", "public static <E> Builder<E> notNullBuilder()" ], [ "predicatedCollection", "org.apache.commons.collections4.collection", "PredicatedCollection", "public static <T> PredicatedCollection<T> predicatedCollection(final Collection<T> coll, final Predicate<? super T> predicate)" ], [ "uniqueIndexedCollection", "org.apache.commons.collections4.collection", "IndexedCollection", "public static <K, C> IndexedCollection<K, C> uniqueIndexedCollection(final Collection<C> coll, final Transformer<C, K> keyTransformer)" ], [ "nonUniqueIndexedCollection", "org.apache.commons.collections4.collection", "IndexedCollection", "public static <K, C> IndexedCollection<K, C> nonUniqueIndexedCollection(final Collection<C> coll, final Transformer<C, K> keyTransformer)" ], [ "synchronizedCollection", "org.apache.commons.collections4.collection", "SynchronizedCollection", "public static <T> SynchronizedCollection<T> synchronizedCollection(final Collection<T> coll)" ], [ "unmodifiableCollection", "org.apache.commons.collections4.collection", "UnmodifiableCollection", "public static <T> Collection<T> unmodifiableCollection(final Collection<? extends T> coll)" ], [ "exceptionFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> exceptionFactory()" ], [ "nullFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> nullFactory()" ], [ "constantFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> constantFactory(final T constantToReturn)" ], [ "prototypeFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> prototypeFactory(final T prototype)" ], [ "instantiateFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> instantiateFactory(final Class<T> classToInstantiate)" ], [ "instantiateFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> instantiateFactory(final Class<T> classToInstantiate, final Class<?>[] paramTypes, final Object[] args)" ], [ "emptyIfNull", "org.apache.commons.collections4", "ListUtils", "public static <T> List<T> emptyIfNull(final List<T> list)" ], [ "defaultIfNull", "org.apache.commons.collections4", "ListUtils", "public static <T> List<T> defaultIfNull(final List<T> list, final List<T> defaultList)" ], [ "intersection", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> intersection(final List<? extends E> list1, final List<? extends E> list2)" ], [ "subtract", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> subtract(final List<E> list1, final List<? extends E> list2)" ], [ "sum", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> sum(final List<? extends E> list1, final List<? extends E> list2)" ], [ "union", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> union(final List<? extends E> list1, final List<? extends E> list2)" ], [ "select", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> select(final Collection<? extends E> inputCollection, final Predicate<? super E> predicate)" ], [ "selectRejected", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> selectRejected(final Collection<? extends E> inputCollection, final Predicate<? super E> predicate)" ], [ "isEqualList", "org.apache.commons.collections4", "ListUtils", "public static boolean isEqualList(final Collection<?> list1, final Collection<?> list2)" ], [ "hashCodeForList", "org.apache.commons.collections4", "ListUtils", "public static int hashCodeForList(final Collection<?> list)" ], [ "retainAll", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> retainAll(final Collection<E> collection, final Collection<?> retain)" ], [ "removeAll", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> removeAll(final Collection<E> collection, final Collection<?> remove)" ], [ "synchronizedList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> synchronizedList(final List<E> list)" ], [ "unmodifiableList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> unmodifiableList(final List<? extends E> list)" ], [ "predicatedList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> predicatedList(final List<E> list, final Predicate<E> predicate)" ], [ "transformedList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> transformedList(final List<E> list, final Transformer<? super E, ? extends E> transformer)" ], [ "lazyList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> lazyList(final List<E> list, final Factory<? extends E> factory)" ], [ "fixedSizeList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> fixedSizeList(final List<E> list)" ], [ "indexOf", "org.apache.commons.collections4", "ListUtils", "public static <E> int indexOf(final List<E> list, final Predicate<E> predicate)" ], [ "longestCommonSubsequence", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> longestCommonSubsequence(final List<E> a, final List<E> b)" ], [ "longestCommonSubsequence", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> longestCommonSubsequence(final List<E> a, final List<E> b, final Equator<? super E> equator)" ], [ "longestCommonSubsequence", "org.apache.commons.collections4", "ListUtils", "public static String longestCommonSubsequence(final CharSequence a, final CharSequence b)" ], [ "partition", "org.apache.commons.collections4", "ListUtils", "public static <T> List<List<T>> partition(final List<T> list, final int size)" ], [ "getObject", "org.apache.commons.collections4", "MapUtils", "public static <K, V> V getObject(final Map<? super K, V> map, final K key)" ], [ "getString", "org.apache.commons.collections4", "MapUtils", "public static <K> String getString(final Map<? super K, ?> map, final K key)" ], [ "getBoolean", "org.apache.commons.collections4", "MapUtils", "public static <K> Boolean getBoolean(final Map<? super K, ?> map, final K key)" ], [ "getNumber", "org.apache.commons.collections4", "MapUtils", "public static <K> Number getNumber(final Map<? super K, ?> map, final K key)" ], [ "getByte", "org.apache.commons.collections4", "MapUtils", "public static <K> Byte getByte(final Map<? super K, ?> map, final K key)" ], [ "getShort", "org.apache.commons.collections4", "MapUtils", "public static <K> Short getShort(final Map<? super K, ?> map, final K key)" ], [ "getInteger", "org.apache.commons.collections4", "MapUtils", "public static <K> Integer getInteger(final Map<? super K, ?> map, final K key)" ], [ "getLong", "org.apache.commons.collections4", "MapUtils", "public static <K> Long getLong(final Map<? super K, ?> map, final K key)" ], [ "getFloat", "org.apache.commons.collections4", "MapUtils", "public static <K> Float getFloat(final Map<? super K, ?> map, final K key)" ], [ "getDouble", "org.apache.commons.collections4", "MapUtils", "public static <K> Double getDouble(final Map<? super K, ?> map, final K key)" ], [ "getMap", "org.apache.commons.collections4", "MapUtils", "public static <K> Map<?, ?> getMap(final Map<? super K, ?> map, final K key)" ], [ "getObject", "org.apache.commons.collections4", "MapUtils", "public static <K, V> V getObject(final Map<K, V> map, final K key, final V defaultValue)" ], [ "getString", "org.apache.commons.collections4", "MapUtils", "public static <K> String getString(final Map<? super K, ?> map, final K key, final String defaultValue)" ], [ "getBoolean", "org.apache.commons.collections4", "MapUtils", "public static <K> Boolean getBoolean(final Map<? super K, ?> map, final K key, final Boolean defaultValue)" ], [ "getNumber", "org.apache.commons.collections4", "MapUtils", "public static <K> Number getNumber(final Map<? super K, ?> map, final K key, final Number defaultValue)" ], [ "getByte", "org.apache.commons.collections4", "MapUtils", "public static <K> Byte getByte(final Map<? super K, ?> map, final K key, final Byte defaultValue)" ], [ "getShort", "org.apache.commons.collections4", "MapUtils", "public static <K> Short getShort(final Map<? super K, ?> map, final K key, final Short defaultValue)" ], [ "getInteger", "org.apache.commons.collections4", "MapUtils", "public static <K> Integer getInteger(final Map<? super K, ?> map, final K key, final Integer defaultValue)" ], [ "getLong", "org.apache.commons.collections4", "MapUtils", "public static <K> Long getLong(final Map<? super K, ?> map, final K key, final Long defaultValue)" ], [ "getFloat", "org.apache.commons.collections4", "MapUtils", "public static <K> Float getFloat(final Map<? super K, ?> map, final K key, final Float defaultValue)" ], [ "getDouble", "org.apache.commons.collections4", "MapUtils", "public static <K> Double getDouble(final Map<? super K, ?> map, final K key, final Double defaultValue)" ], [ "getMap", "org.apache.commons.collections4", "MapUtils", "public static <K> Map<?, ?> getMap(final Map<? super K, ?> map, final K key, final Map<?, ?> defaultValue)" ], [ "getBooleanValue", "org.apache.commons.collections4", "MapUtils", "public static <K> boolean getBooleanValue(final Map<? super K, ?> map, final K key)" ], [ "getByteValue", "org.apache.commons.collections4", "MapUtils", "public static <K> byte getByteValue(final Map<? super K, ?> map, final K key)" ], [ "getShortValue", "org.apache.commons.collections4", "MapUtils", "public static <K> short getShortValue(final Map<? super K, ?> map, final K key)" ], [ "getIntValue", "org.apache.commons.collections4", "MapUtils", "public static <K> int getIntValue(final Map<? super K, ?> map, final K key)" ], [ "getLongValue", "org.apache.commons.collections4", "MapUtils", "public static <K> long getLongValue(final Map<? super K, ?> map, final K key)" ], [ "getFloatValue", "org.apache.commons.collections4", "MapUtils", "public static <K> float getFloatValue(final Map<? super K, ?> map, final K key)" ], [ "getDoubleValue", "org.apache.commons.collections4", "MapUtils", "public static <K> double getDoubleValue(final Map<? super K, ?> map, final K key)" ], [ "getBooleanValue", "org.apache.commons.collections4", "MapUtils", "public static <K> boolean getBooleanValue(final Map<? super K, ?> map, final K key, final boolean defaultValue)" ], [ "getByteValue", "org.apache.commons.collections4", "MapUtils", "public static <K> byte getByteValue(final Map<? super K, ?> map, final K key, final byte defaultValue)" ], [ "getShortValue", "org.apache.commons.collections4", "MapUtils", "public static <K> short getShortValue(final Map<? super K, ?> map, final K key, final short defaultValue)" ], [ "getIntValue", "org.apache.commons.collections4", "MapUtils", "public static <K> int getIntValue(final Map<? super K, ?> map, final K key, final int defaultValue)" ], [ "getLongValue", "org.apache.commons.collections4", "MapUtils", "public static <K> long getLongValue(final Map<? super K, ?> map, final K key, final long defaultValue)" ], [ "getFloatValue", "org.apache.commons.collections4", "MapUtils", "public static <K> float getFloatValue(final Map<? super K, ?> map, final K key, final float defaultValue)" ], [ "getDoubleValue", "org.apache.commons.collections4", "MapUtils", "public static <K> double getDoubleValue(final Map<? super K, ?> map, final K key, final double defaultValue)" ], [ "toProperties", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Properties toProperties(final Map<K, V> map)" ], [ "toMap", "org.apache.commons.collections4", "MapUtils", "public static Map<String, Object> toMap(final ResourceBundle resourceBundle)" ], [ "invertMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Map<V, K> invertMap(final Map<K, V> map)" ], [ "putAll", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Map<K, V> putAll(final Map<K, V> map, final Object[] array)" ], [ "emptyIfNull", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Map<K, V> emptyIfNull(final Map<K, V> map)" ], [ "isEmpty", "org.apache.commons.collections4", "MapUtils", "public static boolean isEmpty(final Map<?, ?> map)" ], [ "isNotEmpty", "org.apache.commons.collections4", "MapUtils", "public static boolean isNotEmpty(final Map<?, ?> map)" ], [ "synchronizedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Map<K, V> synchronizedMap(final Map<K, V> map)" ], [ "unmodifiableMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Map<K, V> unmodifiableMap(final Map<? extends K, ? extends V> map)" ], [ "predicatedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> predicatedMap(final Map<K, V> map, final Predicate<? super K> keyPred, final Predicate<? super V> valuePred)" ], [ "transformedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> transformedMap(final Map<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "fixedSizeMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> fixedSizeMap(final Map<K, V> map)" ], [ "lazyMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> lazyMap(final Map<K, V> map, final Factory<? extends V> factory)" ], [ "lazyMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> lazyMap(final Map<K, V> map, final Transformer<? super K, ? extends V> transformerFactory)" ], [ "orderedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> OrderedMap<K, V> orderedMap(final Map<K, V> map)" ], [ "multiValueMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> MultiValueMap<K, V> multiValueMap(final Map<K, ? super Collection<V>> map)" ], [ "multiValueMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V, C extends Collection<V>> MultiValueMap<K, V> multiValueMap(final Map<K, C> map, final Class<C> collectionClass)" ], [ "multiValueMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V, C extends Collection<V>> MultiValueMap<K, V> multiValueMap(final Map<K, C> map, final Factory<C> collectionFactory)" ], [ "synchronizedSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> synchronizedSortedMap(final SortedMap<K, V> map)" ], [ "unmodifiableSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> unmodifiableSortedMap(final SortedMap<K, ? extends V> map)" ], [ "predicatedSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> predicatedSortedMap(final SortedMap<K, V> map, final Predicate<? super K> keyPred, final Predicate<? super V> valuePred)" ], [ "transformedSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> transformedSortedMap(final SortedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "fixedSizeSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> fixedSizeSortedMap(final SortedMap<K, V> map)" ], [ "lazySortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> lazySortedMap(final SortedMap<K, V> map, final Factory<? extends V> factory)" ], [ "lazySortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> lazySortedMap(final SortedMap<K, V> map, final Transformer<? super K, ? extends V> transformerFactory)" ], [ "iterableMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> iterableMap(final Map<K, V> map)" ], [ "iterableSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableSortedMap<K, V> iterableSortedMap(final SortedMap<K, V> sortedMap)" ], [ "defaultEquator", "org.apache.commons.collections4.functors", "DefaultEquator", "public static <T> DefaultEquator<T> defaultEquator()" ], [ "stringValueTransformer", "org.apache.commons.collections4.functors", "StringValueTransformer", "public static <T> Transformer<T, String> stringValueTransformer()" ], [ "ifTransformer", "org.apache.commons.collections4.functors", "IfTransformer", "public static <I, O> Transformer<I, O> ifTransformer(final Predicate<? super I> predicate, final Transformer<? super I, ? extends O> trueTransformer, final Transformer<? super I, ? extends O> falseTransformer)" ], [ "ifTransformer", "org.apache.commons.collections4.functors", "IfTransformer", "public static <T> Transformer<T, T> ifTransformer(final Predicate<? super T> predicate, final Transformer<? super T, ? extends T> trueTransformer)" ], [ "identityPredicate", "org.apache.commons.collections4.functors", "IdentityPredicate", "public static <T> Predicate<T> identityPredicate(final T object)" ], [ "exceptionClosure", "org.apache.commons.collections4.functors", "ExceptionClosure", "public static <E> Closure<E> exceptionClosure()" ], [ "nopClosure", "org.apache.commons.collections4.functors", "NOPClosure", "public static <E> Closure<E> nopClosure()" ], [ "closureTransformer", "org.apache.commons.collections4.functors", "ClosureTransformer", "public static <T> Transformer<T, T> closureTransformer(final Closure<? super T> closure)" ], [ "copy", "org.apache.commons.collections4.functors", "FunctorUtils", "static <T> Predicate<T>[] copy(final Predicate<? super T>... predicates)" ], [ "coerce", "org.apache.commons.collections4.functors", "FunctorUtils", "static <T> Predicate<T> coerce(final Predicate<? super T> predicate)" ], [ "validate", "org.apache.commons.collections4.functors", "FunctorUtils", "static <T> Predicate<? super T>[] validate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "copy", "org.apache.commons.collections4.functors", "FunctorUtils", "static <E> Closure<E>[] copy(final Closure<? super E>... closures)" ], [ "coerce", "org.apache.commons.collections4.functors", "FunctorUtils", "static <T> Closure<T> coerce(final Closure<? super T> closure)" ], [ "copy", "org.apache.commons.collections4.functors", "FunctorUtils", "static <I, O> Transformer<I, O>[] copy(final Transformer<? super I, ? extends O>... transformers)" ], [ "coerce", "org.apache.commons.collections4.functors", "FunctorUtils", "static <I, O> Transformer<I, O> coerce(final Transformer<? super I, ? extends O> transformer)" ], [ "transformerPredicate", "org.apache.commons.collections4.functors", "TransformerPredicate", "public static <T> Predicate<T> transformerPredicate(final Transformer<? super T, Boolean> transformer)" ], [ "nullPredicate", "org.apache.commons.collections4.functors", "NullPredicate", "public static <T> Predicate<T> nullPredicate()" ], [ "nullTransformer", "org.apache.commons.collections4.functors", "ConstantTransformer", "public static <I, O> Transformer<I, O> nullTransformer()" ], [ "constantTransformer", "org.apache.commons.collections4.functors", "ConstantTransformer", "public static <I, O> Transformer<I, O> constantTransformer(final O constantToReturn)" ], [ "predicateTransformer", "org.apache.commons.collections4.functors", "PredicateTransformer", "public static <T> Transformer<T, Boolean> predicateTransformer(final Predicate<? super T> predicate)" ], [ "whileClosure", "org.apache.commons.collections4.functors", "WhileClosure", "public static <E> Closure<E> whileClosure(final Predicate<? super E> predicate, final Closure<? super E> closure, final boolean doLoop)" ], [ "forClosure", "org.apache.commons.collections4.functors", "ForClosure", "public static <E> Closure<E> forClosure(final int count, final Closure<? super E> closure)" ], [ "nullIsTruePredicate", "org.apache.commons.collections4.functors", "NullIsTruePredicate", "public static <T> Predicate<T> nullIsTruePredicate(final Predicate<? super T> predicate)" ], [ "transformedPredicate", "org.apache.commons.collections4.functors", "TransformedPredicate", "public static <T> Predicate<T> transformedPredicate(final Transformer<? super T, ? extends T> transformer, final Predicate<? super T> predicate)" ], [ "nonePredicate", "org.apache.commons.collections4.functors", "NonePredicate", "public static <T> Predicate<T> nonePredicate(final Predicate<? super T>... predicates)" ], [ "nonePredicate", "org.apache.commons.collections4.functors", "NonePredicate", "public static <T> Predicate<T> nonePredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "exceptionTransformer", "org.apache.commons.collections4.functors", "ExceptionTransformer", "public static <I, O> Transformer<I, O> exceptionTransformer()" ], [ "switchTransformer", "org.apache.commons.collections4.functors", "SwitchTransformer", "public static <I, O> Transformer<I, O> switchTransformer(final Predicate<? super I>[] predicates, final Transformer<? super I, ? extends O>[] transformers, final Transformer<? super I, ? extends O> defaultTransformer)" ], [ "switchTransformer", "org.apache.commons.collections4.functors", "SwitchTransformer", "public static <I, O> Transformer<I, O> switchTransformer(final Map<? extends Predicate<? super I>, ? extends Transformer<? super I, ? extends O>> map)" ], [ "transformerClosure", "org.apache.commons.collections4.functors", "TransformerClosure", "public static <E> Closure<E> transformerClosure(final Transformer<? super E, ?> transformer)" ], [ "orPredicate", "org.apache.commons.collections4.functors", "OrPredicate", "public static <T> Predicate<T> orPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "nopTransformer", "org.apache.commons.collections4.functors", "NOPTransformer", "public static <T> Transformer<T, T> nopTransformer()" ], [ "mapTransformer", "org.apache.commons.collections4.functors", "MapTransformer", "public static <I, O> Transformer<I, O> mapTransformer(final Map<? super I, ? extends O> map)" ], [ "exceptionFactory", "org.apache.commons.collections4.functors", "ExceptionFactory", "public static <T> Factory<T> exceptionFactory()" ], [ "chainedClosure", "org.apache.commons.collections4.functors", "ChainedClosure", "public static <E> Closure<E> chainedClosure(final Closure<? super E>... closures)" ], [ "chainedClosure", "org.apache.commons.collections4.functors", "ChainedClosure", "public static <E> Closure<E> chainedClosure(final Collection<? extends Closure<? super E>> closures)" ], [ "andPredicate", "org.apache.commons.collections4.functors", "AndPredicate", "public static <T> Predicate<T> andPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "prototypeFactory", "org.apache.commons.collections4.functors", "PrototypeFactory", "public static <T> Factory<T> prototypeFactory(final T prototype)" ], [ "exceptionPredicate", "org.apache.commons.collections4.functors", "ExceptionPredicate", "public static <T> Predicate<T> exceptionPredicate()" ], [ "instanceOfPredicate", "org.apache.commons.collections4.functors", "InstanceofPredicate", "public static Predicate<Object> instanceOfPredicate(final Class<?> type)" ], [ "invokerTransformer", "org.apache.commons.collections4.functors", "InvokerTransformer", "public static <I, O> Transformer<I, O> invokerTransformer(final String methodName)" ], [ "invokerTransformer", "org.apache.commons.collections4.functors", "InvokerTransformer", "public static <I, O> Transformer<I, O> invokerTransformer(final String methodName, final Class<?>[] paramTypes, final Object[] args)" ], [ "falsePredicate", "org.apache.commons.collections4.functors", "FalsePredicate", "public static <T> Predicate<T> falsePredicate()" ], [ "cloneTransformer", "org.apache.commons.collections4.functors", "CloneTransformer", "public static <T> Transformer<T, T> cloneTransformer()" ], [ "notPredicate", "org.apache.commons.collections4.functors", "NotPredicate", "public static <T> Predicate<T> notPredicate(final Predicate<? super T> predicate)" ], [ "constantFactory", "org.apache.commons.collections4.functors", "ConstantFactory", "public static <T> Factory<T> constantFactory(final T constantToReturn)" ], [ "chainedTransformer", "org.apache.commons.collections4.functors", "ChainedTransformer", "public static <T> Transformer<T, T> chainedTransformer(final Transformer<? super T, ? extends T>... transformers)" ], [ "chainedTransformer", "org.apache.commons.collections4.functors", "ChainedTransformer", "public static <T> Transformer<T, T> chainedTransformer(final Collection<? extends Transformer<? super T, ? extends T>> transformers)" ], [ "comparatorPredicate", "org.apache.commons.collections4.functors", "ComparatorPredicate", "public static <T> Predicate<T> comparatorPredicate(final T object, final Comparator<T> comparator)" ], [ "comparatorPredicate", "org.apache.commons.collections4.functors", "ComparatorPredicate", "public static <T> Predicate<T> comparatorPredicate(final T object, final Comparator<T> comparator, final Criterion criterion)" ], [ "allPredicate", "org.apache.commons.collections4.functors", "AllPredicate", "public static <T> Predicate<T> allPredicate(final Predicate<? super T>... predicates)" ], [ "allPredicate", "org.apache.commons.collections4.functors", "AllPredicate", "public static <T> Predicate<T> allPredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "nullIsFalsePredicate", "org.apache.commons.collections4.functors", "NullIsFalsePredicate", "public static <T> Predicate<T> nullIsFalsePredicate(final Predicate<? super T> predicate)" ], [ "nullIsExceptionPredicate", "org.apache.commons.collections4.functors", "NullIsExceptionPredicate", "public static <T> Predicate<T> nullIsExceptionPredicate(final Predicate<? super T> predicate)" ], [ "anyPredicate", "org.apache.commons.collections4.functors", "AnyPredicate", "public static <T> Predicate<T> anyPredicate(final Predicate<? super T>... predicates)" ], [ "anyPredicate", "org.apache.commons.collections4.functors", "AnyPredicate", "public static <T> Predicate<T> anyPredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "truePredicate", "org.apache.commons.collections4.functors", "TruePredicate", "public static <T> Predicate<T> truePredicate()" ], [ "factoryTransformer", "org.apache.commons.collections4.functors", "FactoryTransformer", "public static <I, O> Transformer<I, O> factoryTransformer(final Factory<? extends O> factory)" ], [ "notNullPredicate", "org.apache.commons.collections4.functors", "NotNullPredicate", "public static <T> Predicate<T> notNullPredicate()" ], [ "switchClosure", "org.apache.commons.collections4.functors", "SwitchClosure", "public static <E> Closure<E> switchClosure(final Predicate<? super E>[] predicates, final Closure<? super E>[] closures, final Closure<? super E> defaultClosure)" ], [ "switchClosure", "org.apache.commons.collections4.functors", "SwitchClosure", "public static <E> Closure<E> switchClosure(final Map<Predicate<E>, Closure<E>> predicatesAndClosures)" ], [ "uniquePredicate", "org.apache.commons.collections4.functors", "UniquePredicate", "public static <T> Predicate<T> uniquePredicate()" ], [ "instantiateTransformer", "org.apache.commons.collections4.functors", "InstantiateTransformer", "public static <T> Transformer<Class<? extends T>, T> instantiateTransformer()" ], [ "instantiateTransformer", "org.apache.commons.collections4.functors", "InstantiateTransformer", "public static <T> Transformer<Class<? extends T>, T> instantiateTransformer(final Class<?>[] paramTypes, final Object[] args)" ], [ "onePredicate", "org.apache.commons.collections4.functors", "OnePredicate", "public static <T> Predicate<T> onePredicate(final Predicate<? super T>... predicates)" ], [ "onePredicate", "org.apache.commons.collections4.functors", "OnePredicate", "public static <T> Predicate<T> onePredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "equalPredicate", "org.apache.commons.collections4.functors", "EqualPredicate", "public static <T> Predicate<T> equalPredicate(final T object)" ], [ "equalPredicate", "org.apache.commons.collections4.functors", "EqualPredicate", "public static <T> Predicate<T> equalPredicate(final T object, final Equator<T> equator)" ], [ "instantiateFactory", "org.apache.commons.collections4.functors", "InstantiateFactory", "public static <T> Factory<T> instantiateFactory(final Class<T> classToInstantiate, final Class<?>[] paramTypes, final Object[] args)" ], [ "ifClosure", "org.apache.commons.collections4.functors", "IfClosure", "public static <E> Closure<E> ifClosure(final Predicate<? super E> predicate, final Closure<? super E> trueClosure)" ], [ "ifClosure", "org.apache.commons.collections4.functors", "IfClosure", "public static <E> Closure<E> ifClosure(final Predicate<? super E> predicate, final Closure<? super E> trueClosure, final Closure<? super E> falseClosure)" ], [ "getTrueFirstComparator", "org.apache.commons.collections4.comparators", "BooleanComparator", "public static BooleanComparator getTrueFirstComparator()" ], [ "getFalseFirstComparator", "org.apache.commons.collections4.comparators", "BooleanComparator", "public static BooleanComparator getFalseFirstComparator()" ], [ "booleanComparator", "org.apache.commons.collections4.comparators", "BooleanComparator", "public static BooleanComparator booleanComparator(final boolean trueFirst)" ], [ "comparableComparator", "org.apache.commons.collections4.comparators", "ComparableComparator", "public static <E extends Comparable<? super E>> ComparableComparator<E> comparableComparator()" ], [ "emptyCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <T> Collection<T> emptyCollection()" ], [ "emptyIfNull", "org.apache.commons.collections4", "CollectionUtils", "public static <T> Collection<T> emptyIfNull(final Collection<T> collection)" ], [ "union", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> union(final Iterable<? extends O> a, final Iterable<? extends O> b)" ], [ "intersection", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> intersection(final Iterable<? extends O> a, final Iterable<? extends O> b)" ], [ "disjunction", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> disjunction(final Iterable<? extends O> a, final Iterable<? extends O> b)" ], [ "subtract", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> subtract(final Iterable<? extends O> a, final Iterable<? extends O> b)" ], [ "subtract", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> subtract(final Iterable<? extends O> a, final Iterable<? extends O> b, final Predicate<O> p)" ], [ "containsAll", "org.apache.commons.collections4", "CollectionUtils", "public static boolean containsAll(final Collection<?> coll1, final Collection<?> coll2)" ], [ "containsAny", "org.apache.commons.collections4", "CollectionUtils", "public static boolean containsAny(final Collection<?> coll1, final Collection<?> coll2)" ], [ "getCardinalityMap", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Map<O, Integer> getCardinalityMap(final Iterable<? extends O> coll)" ], [ "isSubCollection", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isSubCollection(final Collection<?> a, final Collection<?> b)" ], [ "isProperSubCollection", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isProperSubCollection(final Collection<?> a, final Collection<?> b)" ], [ "isEqualCollection", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isEqualCollection(final Collection<?> a, final Collection<?> b)" ], [ "isEqualCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <E> boolean isEqualCollection(final Collection<? extends E> a, final Collection<? extends E> b, final Equator<? super E> equator)" ], [ "cardinality", "org.apache.commons.collections4", "CollectionUtils", "public static <O> int cardinality(final O obj, final Iterable<? super O> coll)" ], [ "find", "org.apache.commons.collections4", "CollectionUtils", "public static <T> T find(final Iterable<T> collection, final Predicate<? super T> predicate)" ], [ "forAllDo", "org.apache.commons.collections4", "CollectionUtils", "public static <T, C extends Closure<? super T>> C forAllDo(final Iterable<T> collection, final C closure)" ], [ "forAllDo", "org.apache.commons.collections4", "CollectionUtils", "public static <T, C extends Closure<? super T>> C forAllDo(final Iterator<T> iterator, final C closure)" ], [ "forAllButLastDo", "org.apache.commons.collections4", "CollectionUtils", "public static <T, C extends Closure<? super T>> T forAllButLastDo(final Iterable<T> collection, final C closure)" ], [ "forAllButLastDo", "org.apache.commons.collections4", "CollectionUtils", "public static <T, C extends Closure<? super T>> T forAllButLastDo(final Iterator<T> iterator, final C closure)" ], [ "filter", "org.apache.commons.collections4", "CollectionUtils", "public static <T> boolean filter(final Iterable<T> collection, final Predicate<? super T> predicate)" ], [ "filterInverse", "org.apache.commons.collections4", "CollectionUtils", "public static <T> boolean filterInverse(final Iterable<T> collection, final Predicate<? super T> predicate)" ], [ "countMatches", "org.apache.commons.collections4", "CollectionUtils", "public static <C> int countMatches(final Iterable<C> input, final Predicate<? super C> predicate)" ], [ "exists", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean exists(final Iterable<C> input, final Predicate<? super C> predicate)" ], [ "matchesAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean matchesAll(final Iterable<C> input, final Predicate<? super C> predicate)" ], [ "select", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> select(final Iterable<? extends O> inputCollection, final Predicate<? super O> predicate)" ], [ "select", "org.apache.commons.collections4", "CollectionUtils", "public static <O, R extends Collection<? super O>> R select(final Iterable<? extends O> inputCollection, final Predicate<? super O> predicate, final R outputCollection)" ], [ "select", "org.apache.commons.collections4", "CollectionUtils", "public static <O, R extends Collection<? super O>> R select(final Iterable<? extends O> inputCollection, final Predicate<? super O> predicate, R outputCollection, R rejectedCollection)" ], [ "selectRejected", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> selectRejected(final Iterable<? extends O> inputCollection, final Predicate<? super O> predicate)" ], [ "selectRejected", "org.apache.commons.collections4", "CollectionUtils", "public static <O, R extends Collection<? super O>> R selectRejected(final Iterable<? extends O> inputCollection, final Predicate<? super O> predicate, final R outputCollection)" ], [ "collect", "org.apache.commons.collections4", "CollectionUtils", "public static <I, O> Collection<O> collect(final Iterable<I> inputCollection, final Transformer<? super I, ? extends O> transformer)" ], [ "collect", "org.apache.commons.collections4", "CollectionUtils", "public static <I, O> Collection<O> collect(final Iterator<I> inputIterator, final Transformer<? super I, ? extends O> transformer)" ], [ "collect", "org.apache.commons.collections4", "CollectionUtils", "public static <I, O, R extends Collection<? super O>> R collect(final Iterable<? extends I> inputCollection, final Transformer<? super I, ? extends O> transformer, final R outputCollection)" ], [ "collect", "org.apache.commons.collections4", "CollectionUtils", "public static <I, O, R extends Collection<? super O>> R collect(final Iterator<? extends I> inputIterator, final Transformer<? super I, ? extends O> transformer, final R outputCollection)" ], [ "addIgnoreNull", "org.apache.commons.collections4", "CollectionUtils", "public static <T> boolean addIgnoreNull(final Collection<T> collection, final T object)" ], [ "addAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean addAll(final Collection<C> collection, final Iterable<? extends C> iterable)" ], [ "addAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean addAll(final Collection<C> collection, final Iterator<? extends C> iterator)" ], [ "addAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean addAll(final Collection<C> collection, final Enumeration<? extends C> enumeration)" ], [ "addAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean addAll(final Collection<C> collection, final C[] elements)" ], [ "get", "org.apache.commons.collections4", "CollectionUtils", "public static <T> T get(final Iterator<T> iterator, final int index)" ], [ "get", "org.apache.commons.collections4", "CollectionUtils", "public static <T> T get(final Iterable<T> iterable, final int index)" ], [ "get", "org.apache.commons.collections4", "CollectionUtils", "public static Object get(final Object object, final int index)" ], [ "get", "org.apache.commons.collections4", "CollectionUtils", "public static <K, V> Map.Entry<K, V> get(final Map<K, V> map, final int index)" ], [ "size", "org.apache.commons.collections4", "CollectionUtils", "public static int size(final Object object)" ], [ "sizeIsEmpty", "org.apache.commons.collections4", "CollectionUtils", "public static boolean sizeIsEmpty(final Object object)" ], [ "isEmpty", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isEmpty(final Collection<?> coll)" ], [ "isNotEmpty", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isNotEmpty(final Collection<?> coll)" ], [ "isFull", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isFull(final Collection<? extends Object> coll)" ], [ "maxSize", "org.apache.commons.collections4", "CollectionUtils", "public static int maxSize(final Collection<? extends Object> coll)" ], [ "collate", "org.apache.commons.collections4", "CollectionUtils", "public static <O extends Comparable<? super O>> List<O> collate(Iterable<? extends O> a, Iterable<? extends O> b)" ], [ "collate", "org.apache.commons.collections4", "CollectionUtils", "public static <O extends Comparable<? super O>> List<O> collate(final Iterable<? extends O> a, final Iterable<? extends O> b, final boolean includeDuplicates)" ], [ "collate", "org.apache.commons.collections4", "CollectionUtils", "public static <O> List<O> collate(final Iterable<? extends O> a, final Iterable<? extends O> b, final Comparator<? super O> c)" ], [ "collate", "org.apache.commons.collections4", "CollectionUtils", "public static <O> List<O> collate(final Iterable<? extends O> a, final Iterable<? extends O> b, final Comparator<? super O> c, final boolean includeDuplicates)" ], [ "permutations", "org.apache.commons.collections4", "CollectionUtils", "public static <E> Collection<List<E>> permutations(final Collection<E> collection)" ], [ "retainAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> Collection<C> retainAll(final Collection<C> collection, final Collection<?> retain)" ], [ "retainAll", "org.apache.commons.collections4", "CollectionUtils", "public static <E> Collection<E> retainAll(final Iterable<E> collection, final Iterable<? extends E> retain, final Equator<? super E> equator)" ], [ "removeAll", "org.apache.commons.collections4", "CollectionUtils", "public static <E> Collection<E> removeAll(final Collection<E> collection, final Collection<?> remove)" ], [ "removeAll", "org.apache.commons.collections4", "CollectionUtils", "public static <E> Collection<E> removeAll(final Iterable<E> collection, final Iterable<? extends E> remove, final Equator<? super E> equator)" ], [ "synchronizedCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <C> Collection<C> synchronizedCollection(final Collection<C> collection)" ], [ "unmodifiableCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <C> Collection<C> unmodifiableCollection(final Collection<? extends C> collection)" ], [ "predicatedCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <C> Collection<C> predicatedCollection(final Collection<C> collection, final Predicate<? super C> predicate)" ], [ "transformingCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <E> Collection<E> transformingCollection(final Collection<E> collection, final Transformer<? super E, ? extends E> transformer)" ], [ "extractSingleton", "org.apache.commons.collections4", "CollectionUtils", "public static <E> E extractSingleton(final Collection<E> collection)" ], [ "transformingMap", "org.apache.commons.collections4.splitmap", "TransformedSplitMap", "public static <J, K, U, V> TransformedSplitMap<J, K, U, V> transformingMap(final Map<K, V> map, final Transformer<? super J, ? extends K> keyTransformer, final Transformer<? super U, ? extends V> valueTransformer)" ], [ "emptyIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> emptyIterable()" ], [ "chainedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> chainedIterable(final Iterable<? extends E> a, final Iterable<? extends E> b)" ], [ "chainedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> chainedIterable(final Iterable<? extends E> a, final Iterable<? extends E> b, final Iterable<? extends E> c)" ], [ "chainedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> chainedIterable(final Iterable<? extends E> a, final Iterable<? extends E> b, final Iterable<? extends E> c, final Iterable<? extends E> d)" ], [ "chainedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> chainedIterable(final Iterable<? extends E>... iterables)" ], [ "collatedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> collatedIterable(final Iterable<? extends E> a, final Iterable<? extends E> b)" ], [ "collatedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> collatedIterable(final Comparator<? super E> comparator, final Iterable<? extends E> a, final Iterable<? extends E> b)" ], [ "filteredIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> filteredIterable(final Iterable<E> iterable, final Predicate<? super E> predicate)" ], [ "boundedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> boundedIterable(final Iterable<E> iterable, final long maxSize)" ], [ "loopingIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> loopingIterable(final Iterable<E> iterable)" ], [ "reversedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> reversedIterable(final Iterable<E> iterable)" ], [ "skippingIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> skippingIterable(final Iterable<E> iterable, final long elementsToSkip)" ], [ "transformedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <I, O> Iterable<O> transformedIterable(final Iterable<I> iterable, final Transformer<? super I, ? extends O> transformer)" ], [ "uniqueIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> uniqueIterable(final Iterable<E> iterable)" ], [ "unmodifiableIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> unmodifiableIterable(final Iterable<E> iterable)" ], [ "zippingIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> zippingIterable(final Iterable<? extends E> a, final Iterable<? extends E> b)" ], [ "zippingIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> zippingIterable(final Iterable<? extends E> first, final Iterable<? extends E>... others)" ], [ "emptyIfNull", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> emptyIfNull(final Iterable<E> iterable)" ], [ "forEachButLast", "org.apache.commons.collections4", "IterableUtils", "public static <E> E forEachButLast(final Iterable<E> iterable, final Closure<? super E> closure)" ], [ "find", "org.apache.commons.collections4", "IterableUtils", "public static <E> E find(final Iterable<E> iterable, final Predicate<? super E> predicate)" ], [ "indexOf", "org.apache.commons.collections4", "IterableUtils", "public static <E> int indexOf(final Iterable<E> iterable, final Predicate<? super E> predicate)" ], [ "matchesAll", "org.apache.commons.collections4", "IterableUtils", "public static <E> boolean matchesAll(final Iterable<E> iterable, final Predicate<? super E> predicate)" ], [ "matchesAny", "org.apache.commons.collections4", "IterableUtils", "public static <E> boolean matchesAny(final Iterable<E> iterable, final Predicate<? super E> predicate)" ], [ "countMatches", "org.apache.commons.collections4", "IterableUtils", "public static <E> long countMatches(final Iterable<E> input, final Predicate<? super E> predicate)" ], [ "isEmpty", "org.apache.commons.collections4", "IterableUtils", "public static boolean isEmpty(final Iterable<?> iterable)" ], [ "contains", "org.apache.commons.collections4", "IterableUtils", "public static <E> boolean contains(final Iterable<E> iterable, final Object object)" ], [ "contains", "org.apache.commons.collections4", "IterableUtils", "public static <E> boolean contains(final Iterable<? extends E> iterable, final E object, final Equator<? super E> equator)" ], [ "frequency", "org.apache.commons.collections4", "IterableUtils", "public static <E, T extends E> int frequency(final Iterable<E> iterable, final T obj)" ], [ "get", "org.apache.commons.collections4", "IterableUtils", "public static <T> T get(final Iterable<T> iterable, final int index)" ], [ "size", "org.apache.commons.collections4", "IterableUtils", "public static int size(final Iterable<?> iterable)" ], [ "partition", "org.apache.commons.collections4", "IterableUtils", "public static <O> List<List<O>> partition(final Iterable<? extends O> iterable, final Predicate<? super O> predicate)" ], [ "partition", "org.apache.commons.collections4", "IterableUtils", "public static <O> List<List<O>> partition(final Iterable<? extends O> iterable, final Predicate<? super O>... predicates)" ], [ "partition", "org.apache.commons.collections4", "IterableUtils", "public static <O, R extends Collection<O>> List<R> partition(final Iterable<? extends O> iterable, final Factory<R> partitionFactory, final Predicate<? super O>... predicates)" ], [ "toList", "org.apache.commons.collections4", "IterableUtils", "public static <E> List<E> toList(final Iterable<E> iterable)" ], [ "toString", "org.apache.commons.collections4", "IterableUtils", "public static <E> String toString(final Iterable<E> iterable)" ], [ "toString", "org.apache.commons.collections4", "IterableUtils", "public static <E> String toString(final Iterable<E> iterable, final Transformer<? super E, String> transformer)" ], [ "toString", "org.apache.commons.collections4", "IterableUtils", "public static <E> String toString(final Iterable<E> iterable, final Transformer<? super E, String> transformer, final String delimiter, final String prefix, final String suffix)" ], [ "unmodifiableTrie", "org.apache.commons.collections4", "TrieUtils", "public static <K, V> Trie<K, V> unmodifiableTrie(final Trie<K, ? extends V> trie)" ], [ "exceptionClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> exceptionClosure()" ], [ "nopClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> nopClosure()" ], [ "asClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> asClosure(final Transformer<? super E, ?> transformer)" ], [ "forClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> forClosure(final int count, final Closure<? super E> closure)" ], [ "whileClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> whileClosure(final Predicate<? super E> predicate, final Closure<? super E> closure)" ], [ "doWhileClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> doWhileClosure(final Closure<? super E> closure, final Predicate<? super E> predicate)" ], [ "invokerClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> invokerClosure(final String methodName)" ], [ "invokerClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> invokerClosure(final String methodName, final Class<?>[] paramTypes, final Object[] args)" ], [ "chainedClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> chainedClosure(final Closure<? super E>... closures)" ], [ "chainedClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> chainedClosure(final Collection<? extends Closure<? super E>> closures)" ], [ "ifClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> ifClosure(final Predicate<? super E> predicate, final Closure<? super E> trueClosure)" ], [ "ifClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> ifClosure(final Predicate<? super E> predicate, final Closure<? super E> trueClosure, final Closure<? super E> falseClosure)" ], [ "switchClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> switchClosure(final Predicate<? super E>[] predicates, final Closure<? super E>[] closures)" ], [ "switchClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> switchClosure(final Predicate<? super E>[] predicates, final Closure<? super E>[] closures, final Closure<? super E> defaultClosure)" ], [ "switchClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> switchClosure(final Map<Predicate<E>, Closure<E>> predicatesAndClosures)" ], [ "switchMapClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> switchMapClosure(final Map<? extends E, Closure<E>> objectsAndClosures)" ], [ "unmodifiableTrie", "org.apache.commons.collections4.trie", "UnmodifiableTrie", "public static <K, V> Trie<K, V> unmodifiableTrie(final Trie<K, ? extends V> trie)" ], [ "isOutOfBoundsIndex", "org.apache.commons.collections4.trie", "KeyAnalyzer", "static boolean isOutOfBoundsIndex(final int bitIndex)" ], [ "isEqualBitKey", "org.apache.commons.collections4.trie", "KeyAnalyzer", "static boolean isEqualBitKey(final int bitIndex)" ], [ "isNullBitKey", "org.apache.commons.collections4.trie", "KeyAnalyzer", "static boolean isNullBitKey(final int bitIndex)" ], [ "isValidBitIndex", "org.apache.commons.collections4.trie", "KeyAnalyzer", "static boolean isValidBitIndex(final int bitIndex)" ], [ "isValidUplink", "org.apache.commons.collections4.trie", "AbstractPatriciaTrie", "static boolean isValidUplink(final TrieEntry<?, ?> next, final TrieEntry<?, ?> from)" ], [ "compare", "org.apache.commons.collections4.trie", "AbstractBitwiseTrie", "static boolean compare(final Object a, final Object b)" ], [ "transformingSortedMap", "org.apache.commons.collections4.map", "TransformedSortedMap", "public static <K, V> TransformedSortedMap<K, V> transformingSortedMap(final SortedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "transformedSortedMap", "org.apache.commons.collections4.map", "TransformedSortedMap", "public static <K, V> TransformedSortedMap<K, V> transformedSortedMap(final SortedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "predicatedMap", "org.apache.commons.collections4.map", "PredicatedMap", "public static <K, V> PredicatedMap<K, V> predicatedMap(final Map<K, V> map, final Predicate<? super K> keyPredicate, final Predicate<? super V> valuePredicate)" ], [ "fixedSizeSortedMap", "org.apache.commons.collections4.map", "FixedSizeSortedMap", "public static <K, V> FixedSizeSortedMap<K, V> fixedSizeSortedMap(final SortedMap<K, V> map)" ], [ "unmodifiableSortedMap", "org.apache.commons.collections4.map", "UnmodifiableSortedMap", "public static <K, V> SortedMap<K, V> unmodifiableSortedMap(final SortedMap<K, ? extends V> map)" ], [ "predicatedSortedMap", "org.apache.commons.collections4.map", "PredicatedSortedMap", "public static <K, V> PredicatedSortedMap<K, V> predicatedSortedMap(final SortedMap<K, V> map, final Predicate<? super K> keyPredicate, final Predicate<? super V> valuePredicate)" ], [ "defaultedMap", "org.apache.commons.collections4.map", "DefaultedMap", "public static <K, V> DefaultedMap<K, V> defaultedMap(final Map<K, V> map, final V defaultValue)" ], [ "defaultedMap", "org.apache.commons.collections4.map", "DefaultedMap", "public static <K, V> DefaultedMap<K, V> defaultedMap(final Map<K, V> map, final Factory<? extends V> factory)" ], [ "defaultedMap", "org.apache.commons.collections4.map", "DefaultedMap", "public static <K, V> Map<K, V> defaultedMap(final Map<K, V> map, final Transformer<? super K, ? extends V> transformer)" ], [ "fixedSizeMap", "org.apache.commons.collections4.map", "FixedSizeMap", "public static <K, V> FixedSizeMap<K, V> fixedSizeMap(final Map<K, V> map)" ], [ "lazySortedMap", "org.apache.commons.collections4.map", "LazySortedMap", "public static <K, V> LazySortedMap<K, V> lazySortedMap(final SortedMap<K, V> map, final Factory<? extends V> factory)" ], [ "lazySortedMap", "org.apache.commons.collections4.map", "LazySortedMap", "public static <K, V> LazySortedMap<K, V> lazySortedMap(final SortedMap<K, V> map, final Transformer<? super K, ? extends V> factory)" ], [ "unmodifiableOrderedMap", "org.apache.commons.collections4.map", "UnmodifiableOrderedMap", "public static <K, V> OrderedMap<K, V> unmodifiableOrderedMap(final OrderedMap<? extends K, ? extends V> map)" ], [ "unmodifiableMap", "org.apache.commons.collections4.map", "UnmodifiableMap", "public static <K, V> Map<K, V> unmodifiableMap(final Map<? extends K, ? extends V> map)" ], [ "listOrderedMap", "org.apache.commons.collections4.map", "ListOrderedMap", "public static <K, V> ListOrderedMap<K, V> listOrderedMap(final Map<K, V> map)" ], [ "unmodifiableEntrySet", "org.apache.commons.collections4.map", "UnmodifiableEntrySet", "public static <K, V> Set<Map.Entry<K, V>> unmodifiableEntrySet(final Set<Map.Entry<K, V>> set)" ], [ "resolve", "org.apache.commons.collections4.map", "AbstractReferenceMap", "public static ReferenceStrength resolve(final int value)" ], [ "resolve", "org.apache.commons.collections4.map", "ReferenceStrength", "public static ReferenceStrength resolve(final int value)" ], [ "multiKeyMap", "org.apache.commons.collections4.map", "MultiKeyMap", "public static <K, V> MultiKeyMap<K, V> multiKeyMap(final AbstractHashedMap<MultiKey<? extends K>, V> map)" ], [ "lazyMap", "org.apache.commons.collections4.map", "LazyMap", "public static <K, V> LazyMap<K, V> lazyMap(final Map<K, V> map, final Factory<? extends V> factory)" ], [ "lazyMap", "org.apache.commons.collections4.map", "LazyMap", "public static <V, K> LazyMap<K, V> lazyMap(final Map<K, V> map, final Transformer<? super K, ? extends V> factory)" ], [ "multiValueMap", "org.apache.commons.collections4.map", "MultiValueMap", "public static <K, V> MultiValueMap<K, V> multiValueMap(final Map<K, ? super Collection<V>> map)" ], [ "multiValueMap", "org.apache.commons.collections4.map", "MultiValueMap", "public static <K, V, C extends Collection<V>> MultiValueMap<K, V> multiValueMap(final Map<K, ? super C> map, final Class<C> collectionClass)" ], [ "multiValueMap", "org.apache.commons.collections4.map", "MultiValueMap", "public static <K, V, C extends Collection<V>> MultiValueMap<K, V> multiValueMap(final Map<K, ? super C> map, final Factory<C> collectionFactory)" ], [ "transformingMap", "org.apache.commons.collections4.map", "TransformedMap", "public static <K, V> TransformedMap<K, V> transformingMap(final Map<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "transformedMap", "org.apache.commons.collections4.map", "TransformedMap", "public static <K, V> TransformedMap<K, V> transformedMap(final Map<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "synchronizedMultiSet", "org.apache.commons.collections4", "MultiSetUtils", "public static <E> MultiSet<E> synchronizedMultiSet(final MultiSet<E> multiset)" ], [ "unmodifiableMultiSet", "org.apache.commons.collections4", "MultiSetUtils", "public static <E> MultiSet<E> unmodifiableMultiSet(final MultiSet<? extends E> multiset)" ], [ "predicatedMultiSet", "org.apache.commons.collections4", "MultiSetUtils", "public static <E> MultiSet<E> predicatedMultiSet(final MultiSet<E> multiset, final Predicate<? super E> predicate)" ], [ "emptyMultiSet", "org.apache.commons.collections4", "MultiSetUtils", "public static <E> MultiSet<E> emptyMultiSet()" ], [ "unmodifiableMultiValuedMap", "org.apache.commons.collections4.multimap", "UnmodifiableMultiValuedMap", "public static <K, V> UnmodifiableMultiValuedMap<K, V> unmodifiableMultiValuedMap(MultiValuedMap<? extends K, ? extends V> map)" ], [ "transformingMap", "org.apache.commons.collections4.multimap", "TransformedMultiValuedMap", "public static <K, V> TransformedMultiValuedMap<K, V> transformingMap(final MultiValuedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "transformedMap", "org.apache.commons.collections4.multimap", "TransformedMultiValuedMap", "public static <K, V> TransformedMultiValuedMap<K, V> transformedMap(final MultiValuedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "lazyList", "org.apache.commons.collections4.list", "LazyList", "public static <E> LazyList<E> lazyList(final List<E> list, final Factory<? extends E> factory)" ], [ "setUniqueList", "org.apache.commons.collections4.list", "SetUniqueList", "public static <E> SetUniqueList<E> setUniqueList(final List<E> list)" ], [ "unmodifiableList", "org.apache.commons.collections4.list", "UnmodifiableList", "public static <E> List<E> unmodifiableList(final List<? extends E> list)" ], [ "fixedSizeList", "org.apache.commons.collections4.list", "FixedSizeList", "public static <E> FixedSizeList<E> fixedSizeList(final List<E> list)" ], [ "transformingList", "org.apache.commons.collections4.list", "TransformedList", "public static <E> TransformedList<E> transformingList(final List<E> list, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedList", "org.apache.commons.collections4.list", "TransformedList", "public static <E> TransformedList<E> transformedList(final List<E> list, final Transformer<? super E, ? extends E> transformer)" ], [ "growthList", "org.apache.commons.collections4.list", "GrowthList", "public static <E> GrowthList<E> growthList(final List<E> list)" ], [ "predicatedList", "org.apache.commons.collections4.list", "PredicatedList", "public static <T> PredicatedList<T> predicatedList(final List<T> list, final Predicate<? super T> predicate)" ], [ "transformingQueue", "org.apache.commons.collections4.queue", "TransformedQueue", "public static <E> TransformedQueue<E> transformingQueue(final Queue<E> queue, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedQueue", "org.apache.commons.collections4.queue", "TransformedQueue", "public static <E> TransformedQueue<E> transformedQueue(final Queue<E> queue, final Transformer<? super E, ? extends E> transformer)" ], [ "unmodifiableQueue", "org.apache.commons.collections4.queue", "UnmodifiableQueue", "public static <E> Queue<E> unmodifiableQueue(final Queue<? extends E> queue)" ], [ "predicatedQueue", "org.apache.commons.collections4.queue", "PredicatedQueue", "public static <E> PredicatedQueue<E> predicatedQueue(final Queue<E> Queue, final Predicate<? super E> predicate)" ], [ "empty", "org.apache.commons.collections4", "FluentIterable", "public static <T> FluentIterable<T> empty()" ], [ "of", "org.apache.commons.collections4", "FluentIterable", "public static <T> FluentIterable<T> of(final T singleton)" ], [ "of", "org.apache.commons.collections4", "FluentIterable", "public static <T> FluentIterable<T> of(final T... elements)" ], [ "of", "org.apache.commons.collections4", "FluentIterable", "public static <T> FluentIterable<T> of(final Iterable<T> iterable)" ], [ "exceptionTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> exceptionTransformer()" ], [ "nullTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> nullTransformer()" ], [ "nopTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> nopTransformer()" ], [ "cloneTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> cloneTransformer()" ], [ "constantTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> constantTransformer(final O constantToReturn)" ], [ "asTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> asTransformer(final Closure<? super T> closure)" ], [ "asTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, Boolean> asTransformer(final Predicate<? super T> predicate)" ], [ "asTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> asTransformer(final Factory<? extends O> factory)" ], [ "chainedTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> chainedTransformer(final Transformer<? super T, ? extends T>... transformers)" ], [ "chainedTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> chainedTransformer(final Collection<? extends Transformer<? super T, ? extends T>> transformers)" ], [ "ifTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> ifTransformer(final Predicate<? super T> predicate, final Transformer<? super T, ? extends T> trueTransformer)" ], [ "ifTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> ifTransformer(final Predicate<? super I> predicate, final Transformer<? super I, ? extends O> trueTransformer, final Transformer<? super I, ? extends O> falseTransformer)" ], [ "switchTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> switchTransformer(final Predicate<? super I> predicate, final Transformer<? super I, ? extends O> trueTransformer, final Transformer<? super I, ? extends O> falseTransformer)" ], [ "switchTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> switchTransformer(final Predicate<? super I>[] predicates, final Transformer<? super I, ? extends O>[] transformers)" ], [ "switchTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> switchTransformer(final Predicate<? super I>[] predicates, final Transformer<? super I, ? extends O>[] transformers, final Transformer<? super I, ? extends O> defaultTransformer)" ], [ "switchTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> switchTransformer(final Map<Predicate<I>, Transformer<I, O>> predicatesAndTransformers)" ], [ "switchMapTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> switchMapTransformer(final Map<I, Transformer<I, O>> objectsAndTransformers)" ], [ "instantiateTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<Class<? extends T>, T> instantiateTransformer()" ], [ "instantiateTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<Class<? extends T>, T> instantiateTransformer(final Class<?>[] paramTypes, final Object[] args)" ], [ "mapTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> mapTransformer(final Map<? super I, ? extends O> map)" ], [ "invokerTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> invokerTransformer(final String methodName)" ], [ "invokerTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> invokerTransformer(final String methodName, final Class<?>[] paramTypes, final Object[] args)" ], [ "stringValueTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, String> stringValueTransformer()" ], [ "exceptionPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> exceptionPredicate()" ], [ "truePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> truePredicate()" ], [ "falsePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> falsePredicate()" ], [ "nullPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nullPredicate()" ], [ "notNullPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> notNullPredicate()" ], [ "equalPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> equalPredicate(final T value)" ], [ "identityPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> identityPredicate(final T value)" ], [ "instanceofPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static Predicate<Object> instanceofPredicate(final Class<?> type)" ], [ "uniquePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> uniquePredicate()" ], [ "invokerPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> invokerPredicate(final String methodName)" ], [ "invokerPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> invokerPredicate(final String methodName, final Class<?>[] paramTypes, final Object[] args)" ], [ "andPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> andPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "allPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> allPredicate(final Predicate<? super T>... predicates)" ], [ "allPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> allPredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "orPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> orPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "anyPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> anyPredicate(final Predicate<? super T>... predicates)" ], [ "anyPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> anyPredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "eitherPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> eitherPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "onePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> onePredicate(final Predicate<? super T>... predicates)" ], [ "onePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> onePredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "neitherPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> neitherPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "nonePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nonePredicate(final Predicate<? super T>... predicates)" ], [ "nonePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nonePredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "notPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> notPredicate(final Predicate<? super T> predicate)" ], [ "asPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> asPredicate(final Transformer<? super T, Boolean> transformer)" ], [ "nullIsExceptionPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nullIsExceptionPredicate(final Predicate<? super T> predicate)" ], [ "nullIsFalsePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nullIsFalsePredicate(final Predicate<? super T> predicate)" ], [ "nullIsTruePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nullIsTruePredicate(final Predicate<? super T> predicate)" ], [ "transformedPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> transformedPredicate(final Transformer<? super T, ? extends T> transformer, final Predicate<? super T> predicate)" ], [ "emptySet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> emptySet()" ], [ "emptySortedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> emptySortedSet()" ], [ "emptyIfNull", "org.apache.commons.collections4", "SetUtils", "public static <T> Set<T> emptyIfNull(final Set<T> set)" ], [ "isEqualSet", "org.apache.commons.collections4", "SetUtils", "public static boolean isEqualSet(final Collection<?> set1, final Collection<?> set2)" ], [ "hashCodeForSet", "org.apache.commons.collections4", "SetUtils", "public static <T> int hashCodeForSet(final Collection<T> set)" ], [ "newIdentityHashSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> newIdentityHashSet()" ], [ "synchronizedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> synchronizedSet(final Set<E> set)" ], [ "unmodifiableSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> unmodifiableSet(final Set<? extends E> set)" ], [ "predicatedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> predicatedSet(final Set<E> set, final Predicate<? super E> predicate)" ], [ "transformedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> transformedSet(final Set<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "orderedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> orderedSet(final Set<E> set)" ], [ "synchronizedSortedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> synchronizedSortedSet(final SortedSet<E> set)" ], [ "unmodifiableSortedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> unmodifiableSortedSet(final SortedSet<E> set)" ], [ "predicatedSortedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> predicatedSortedSet(final SortedSet<E> set, final Predicate<? super E> predicate)" ], [ "transformedSortedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> transformedSortedSet(final SortedSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "unmodifiableNavigableSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> unmodifiableNavigableSet(final NavigableSet<E> set)" ], [ "predicatedNavigableSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> predicatedNavigableSet(final NavigableSet<E> set, final Predicate<? super E> predicate)" ], [ "transformedNavigableSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> transformedNavigableSet(final NavigableSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "union", "org.apache.commons.collections4", "SetUtils", "public static <E> SetView<E> union(final Set<? extends E> a, final Set<? extends E> b)" ], [ "difference", "org.apache.commons.collections4", "SetUtils", "public static <E> SetView<E> difference(final Set<? extends E> a, final Set<? extends E> b)" ], [ "intersection", "org.apache.commons.collections4", "SetUtils", "public static <E> SetView<E> intersection(final Set<? extends E> a, final Set<? extends E> b)" ], [ "disjunction", "org.apache.commons.collections4", "SetUtils", "public static <E> SetView<E> disjunction(final Set<? extends E> a, final Set<? extends E> b)" ], [ "transformingSet", "org.apache.commons.collections4.set", "TransformedSet", "public static <E> TransformedSet<E> transformingSet(final Set<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedSet", "org.apache.commons.collections4.set", "TransformedSet", "public static <E> Set<E> transformedSet(final Set<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "transformingNavigableSet", "org.apache.commons.collections4.set", "TransformedNavigableSet", "public static <E> TransformedNavigableSet<E> transformingNavigableSet(final NavigableSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedNavigableSet", "org.apache.commons.collections4.set", "TransformedNavigableSet", "public static <E> TransformedNavigableSet<E> transformedNavigableSet(final NavigableSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "predicatedNavigableSet", "org.apache.commons.collections4.set", "PredicatedNavigableSet", "public static <E> PredicatedNavigableSet<E> predicatedNavigableSet(final NavigableSet<E> set, final Predicate<? super E> predicate)" ], [ "listOrderedSet", "org.apache.commons.collections4.set", "ListOrderedSet", "public static <E> ListOrderedSet<E> listOrderedSet(final Set<E> set, final List<E> list)" ], [ "listOrderedSet", "org.apache.commons.collections4.set", "ListOrderedSet", "public static <E> ListOrderedSet<E> listOrderedSet(final Set<E> set)" ], [ "listOrderedSet", "org.apache.commons.collections4.set", "ListOrderedSet", "public static <E> ListOrderedSet<E> listOrderedSet(final List<E> list)" ], [ "unmodifiableSet", "org.apache.commons.collections4.set", "UnmodifiableSet", "public static <E> Set<E> unmodifiableSet(final Set<? extends E> set)" ], [ "mapBackedSet", "org.apache.commons.collections4.set", "MapBackedSet", "public static <E, V> MapBackedSet<E, V> mapBackedSet(final Map<E, ? super V> map)" ], [ "mapBackedSet", "org.apache.commons.collections4.set", "MapBackedSet", "public static <E, V> MapBackedSet<E, V> mapBackedSet(final Map<E, ? super V> map, final V dummyValue)" ], [ "unmodifiableSortedSet", "org.apache.commons.collections4.set", "UnmodifiableSortedSet", "public static <E> SortedSet<E> unmodifiableSortedSet(final SortedSet<E> set)" ], [ "predicatedSortedSet", "org.apache.commons.collections4.set", "PredicatedSortedSet", "public static <E> PredicatedSortedSet<E> predicatedSortedSet(final SortedSet<E> set, final Predicate<? super E> predicate)" ], [ "predicatedSet", "org.apache.commons.collections4.set", "PredicatedSet", "public static <E> PredicatedSet<E> predicatedSet(final Set<E> set, final Predicate<? super E> predicate)" ], [ "unmodifiableNavigableSet", "org.apache.commons.collections4.set", "UnmodifiableNavigableSet", "public static <E> NavigableSet<E> unmodifiableNavigableSet(final NavigableSet<E> set)" ], [ "transformingSortedSet", "org.apache.commons.collections4.set", "TransformedSortedSet", "public static <E> TransformedSortedSet<E> transformingSortedSet(final SortedSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedSortedSet", "org.apache.commons.collections4.set", "TransformedSortedSet", "public static <E> TransformedSortedSet<E> transformedSortedSet(final SortedSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "get", "org.apache.commons.collections4", "EnumerationUtils", "public static <T> T get(final Enumeration<T> e, final int index)" ], [ "toList", "org.apache.commons.collections4", "EnumerationUtils", "public static <E> List<E> toList(final Enumeration<? extends E> enumeration)" ], [ "toList", "org.apache.commons.collections4", "EnumerationUtils", "public static List<String> toList(final StringTokenizer stringTokenizer)" ], [ "unmodifiableQueue", "org.apache.commons.collections4", "QueueUtils", "public static <E> Queue<E> unmodifiableQueue(final Queue<? extends E> queue)" ], [ "predicatedQueue", "org.apache.commons.collections4", "QueueUtils", "public static <E> Queue<E> predicatedQueue(final Queue<E> queue, final Predicate<? super E> predicate)" ], [ "transformingQueue", "org.apache.commons.collections4", "QueueUtils", "public static <E> Queue<E> transformingQueue(final Queue<E> queue, final Transformer<? super E, ? extends E> transformer)" ], [ "emptyQueue", "org.apache.commons.collections4", "QueueUtils", "public static <E> Queue<E> emptyQueue()" ], [ "synchronizedBag", "org.apache.commons.collections4.bag", "SynchronizedBag", "public static <E> SynchronizedBag<E> synchronizedBag(final Bag<E> bag)" ], [ "collectionBag", "org.apache.commons.collections4.bag", "CollectionBag", "public static <E> Bag<E> collectionBag(final Bag<E> bag)" ], [ "unmodifiableBag", "org.apache.commons.collections4.bag", "UnmodifiableBag", "public static <E> Bag<E> unmodifiableBag(final Bag<? extends E> bag)" ], [ "predicatedSortedBag", "org.apache.commons.collections4.bag", "PredicatedSortedBag", "public static <E> PredicatedSortedBag<E> predicatedSortedBag(final SortedBag<E> bag, final Predicate<? super E> predicate)" ], [ "unmodifiableSortedBag", "org.apache.commons.collections4.bag", "UnmodifiableSortedBag", "public static <E> SortedBag<E> unmodifiableSortedBag(final SortedBag<E> bag)" ], [ "transformingSortedBag", "org.apache.commons.collections4.bag", "TransformedSortedBag", "public static <E> TransformedSortedBag<E> transformingSortedBag(final SortedBag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedSortedBag", "org.apache.commons.collections4.bag", "TransformedSortedBag", "public static <E> TransformedSortedBag<E> transformedSortedBag(final SortedBag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "predicatedBag", "org.apache.commons.collections4.bag", "PredicatedBag", "public static <E> PredicatedBag<E> predicatedBag(final Bag<E> bag, final Predicate<? super E> predicate)" ], [ "synchronizedSortedBag", "org.apache.commons.collections4.bag", "SynchronizedSortedBag", "public static <E> SynchronizedSortedBag<E> synchronizedSortedBag(final SortedBag<E> bag)" ], [ "collectionSortedBag", "org.apache.commons.collections4.bag", "CollectionSortedBag", "public static <E> SortedBag<E> collectionSortedBag(final SortedBag<E> bag)" ], [ "transformingBag", "org.apache.commons.collections4.bag", "TransformedBag", "public static <E> Bag<E> transformingBag(final Bag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedBag", "org.apache.commons.collections4.bag", "TransformedBag", "public static <E> Bag<E> transformedBag(final Bag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "predicatedMultiSet", "org.apache.commons.collections4.multiset", "PredicatedMultiSet", "public static <E> PredicatedMultiSet<E> predicatedMultiSet(final MultiSet<E> multiset, final Predicate<? super E> predicate)" ], [ "unmodifiableMultiSet", "org.apache.commons.collections4.multiset", "UnmodifiableMultiSet", "public static <E> MultiSet<E> unmodifiableMultiSet(final MultiSet<? extends E> multiset)" ], [ "synchronizedMultiSet", "org.apache.commons.collections4.multiset", "SynchronizedMultiSet", "public static <E> SynchronizedMultiSet<E> synchronizedMultiSet(final MultiSet<E> multiset)" ], [ "synchronizedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> synchronizedBag(final Bag<E> bag)" ], [ "unmodifiableBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> unmodifiableBag(final Bag<? extends E> bag)" ], [ "predicatedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> predicatedBag(final Bag<E> bag, final Predicate<? super E> predicate)" ], [ "transformingBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> transformingBag(final Bag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "collectionBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> collectionBag(final Bag<E> bag)" ], [ "synchronizedSortedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> SortedBag<E> synchronizedSortedBag(final SortedBag<E> bag)" ], [ "unmodifiableSortedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> SortedBag<E> unmodifiableSortedBag(final SortedBag<E> bag)" ], [ "predicatedSortedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> SortedBag<E> predicatedSortedBag(final SortedBag<E> bag, final Predicate<? super E> predicate)" ], [ "transformingSortedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> SortedBag<E> transformingSortedBag(final SortedBag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "emptyBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> emptyBag()" ], [ "emptySortedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> SortedBag<E> emptySortedBag()" ], [ "resettableEmptyListIterator", "org.apache.commons.collections4.iterators", "EmptyListIterator", "public static <E> ResettableListIterator<E> resettableEmptyListIterator()" ], [ "emptyListIterator", "org.apache.commons.collections4.iterators", "EmptyListIterator", "public static <E> ListIterator<E> emptyListIterator()" ], [ "unmodifiableOrderedMapIterator", "org.apache.commons.collections4.iterators", "UnmodifiableOrderedMapIterator", "public static <K, V> OrderedMapIterator<K, V> unmodifiableOrderedMapIterator(final OrderedMapIterator<K, ? extends V> iterator)" ], [ "unmodifiableIterator", "org.apache.commons.collections4.iterators", "UnmodifiableIterator", "public static <E> Iterator<E> unmodifiableIterator(final Iterator<? extends E> iterator)" ], [ "peekingIterator", "org.apache.commons.collections4.iterators", "PeekingIterator", "public static <E> PeekingIterator<E> peekingIterator(final Iterator<? extends E> iterator)" ], [ "emptyMapIterator", "org.apache.commons.collections4.iterators", "EmptyMapIterator", "public static <K, V> MapIterator<K, V> emptyMapIterator()" ], [ "emptyOrderedIterator", "org.apache.commons.collections4.iterators", "EmptyOrderedIterator", "public static <E> OrderedIterator<E> emptyOrderedIterator()" ], [ "umodifiableListIterator", "org.apache.commons.collections4.iterators", "UnmodifiableListIterator", "public static <E> ListIterator<E> umodifiableListIterator(final ListIterator<? extends E> iterator)" ], [ "emptyOrderedMapIterator", "org.apache.commons.collections4.iterators", "EmptyOrderedMapIterator", "public static <K, V> OrderedMapIterator<K, V> emptyOrderedMapIterator()" ], [ "unmodifiableMapIterator", "org.apache.commons.collections4.iterators", "UnmodifiableMapIterator", "public static <K, V> MapIterator<K, V> unmodifiableMapIterator(final MapIterator<? extends K, ? extends V> iterator)" ], [ "resettableEmptyIterator", "org.apache.commons.collections4.iterators", "EmptyIterator", "public static <E> ResettableIterator<E> resettableEmptyIterator()" ], [ "emptyIterator", "org.apache.commons.collections4.iterators", "EmptyIterator", "public static <E> Iterator<E> emptyIterator()" ], [ "pushbackIterator", "org.apache.commons.collections4.iterators", "PushbackIterator", "public static <E> PushbackIterator<E> pushbackIterator(final Iterator<? extends E> iterator)" ], [ "readableMap", "org.apache.commons.collections4", "SplitMapUtils", "public static <K, V> IterableMap<K, V> readableMap(final Get<K, V> get)" ], [ "writableMap", "org.apache.commons.collections4", "SplitMapUtils", "public static <K, V> Map<K, V> writableMap(final Put<K, V> put)" ] ],
  "tokensProjectClassesNonPrivateStaticAttributes" : [ [ "EMPTY_ITERATOR", "org.apache.commons.collections4", "IteratorUtils", "public static final ResettableIterator EMPTY_ITERATOR = EmptyIterator.RESETTABLE_INSTANCE;" ], [ "EMPTY_LIST_ITERATOR", "org.apache.commons.collections4", "IteratorUtils", "public static final ResettableListIterator EMPTY_LIST_ITERATOR = EmptyListIterator.RESETTABLE_INSTANCE;" ], [ "EMPTY_ORDERED_ITERATOR", "org.apache.commons.collections4", "IteratorUtils", "public static final OrderedIterator EMPTY_ORDERED_ITERATOR = EmptyOrderedIterator.INSTANCE;" ], [ "EMPTY_MAP_ITERATOR", "org.apache.commons.collections4", "IteratorUtils", "public static final MapIterator EMPTY_MAP_ITERATOR = EmptyMapIterator.INSTANCE;" ], [ "EMPTY_ORDERED_MAP_ITERATOR", "org.apache.commons.collections4", "IteratorUtils", "public static final OrderedMapIterator EMPTY_ORDERED_MAP_ITERATOR = EmptyOrderedMapIterator.INSTANCE;" ], [ "NATURAL_COMPARATOR", "org.apache.commons.collections4", "ComparatorUtils", "public static final Comparator NATURAL_COMPARATOR = ComparableComparator.<Comparable>comparableComparator();" ], [ "EMPTY_MULTI_VALUED_MAP", "org.apache.commons.collections4", "MultiMapUtils", "public static final MultiValuedMap EMPTY_MULTI_VALUED_MAP = UnmodifiableMultiValuedMap.unmodifiableMultiValuedMap(new ArrayListValuedHashMap(0, 0));" ], [ "EMPTY_SORTED_MAP", "org.apache.commons.collections4", "MapUtils", "public static final SortedMap EMPTY_SORTED_MAP = UnmodifiableSortedMap.unmodifiableSortedMap(new TreeMap<Object, Object>());" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "DefaultEquator", "public static final DefaultEquator INSTANCE = new DefaultEquator<Object>();" ], [ "HASHCODE_NULL", "org.apache.commons.collections4.functors", "DefaultEquator", "public static final int HASHCODE_NULL = -1;" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "ExceptionClosure", "public static final Closure INSTANCE = new ExceptionClosure<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "NOPClosure", "public static final Closure INSTANCE = new NOPClosure<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "NullPredicate", "public static final Predicate INSTANCE = new NullPredicate<Object>();" ], [ "NULL_INSTANCE", "org.apache.commons.collections4.functors", "ConstantTransformer", "public static final Transformer NULL_INSTANCE = new ConstantTransformer<Object, Object>(null);" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "ExceptionTransformer", "public static final Transformer INSTANCE = new ExceptionTransformer<Object, Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "NOPTransformer", "public static final Transformer INSTANCE = new NOPTransformer<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "ExceptionFactory", "public static final Factory INSTANCE = new ExceptionFactory<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "ExceptionPredicate", "public static final Predicate INSTANCE = new ExceptionPredicate<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "FalsePredicate", "public static final Predicate INSTANCE = new FalsePredicate<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "CloneTransformer", "public static final Transformer INSTANCE = new CloneTransformer<Object>();" ], [ "NULL_INSTANCE", "org.apache.commons.collections4.functors", "ConstantFactory", "public static final Factory NULL_INSTANCE = new ConstantFactory<Object>(null);" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "TruePredicate", "public static final Predicate INSTANCE = new TruePredicate<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "NotNullPredicate", "public static final Predicate INSTANCE = new NotNullPredicate<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.comparators", "ComparableComparator", "public static final ComparableComparator INSTANCE = new ComparableComparator();" ], [ "EMPTY_COLLECTION", "org.apache.commons.collections4", "CollectionUtils", "public static final Collection EMPTY_COLLECTION = UnmodifiableCollection.unmodifiableCollection(new ArrayList<Object>());" ], [ "EMPTY_ITERABLE", "org.apache.commons.collections4", "IterableUtils", "static final FluentIterable EMPTY_ITERABLE = new FluentIterable<Object>() {\n\n    @Override\n    public Iterator<Object> iterator() {\n        return IteratorUtils.emptyIterator();\n    }\n};" ], [ "NULL_BIT_KEY", "org.apache.commons.collections4.trie", "KeyAnalyzer", "public static final int NULL_BIT_KEY = -1;" ], [ "EQUAL_BIT_KEY", "org.apache.commons.collections4.trie", "KeyAnalyzer", "public static final int EQUAL_BIT_KEY = -2;" ], [ "OUT_OF_BOUNDS_BIT_KEY", "org.apache.commons.collections4.trie", "KeyAnalyzer", "public static final int OUT_OF_BOUNDS_BIT_KEY = -3;" ], [ "INSTANCE", "org.apache.commons.collections4.trie.analyzer", "StringKeyAnalyzer", "public static final StringKeyAnalyzer INSTANCE = new StringKeyAnalyzer();" ], [ "LENGTH", "org.apache.commons.collections4.trie.analyzer", "StringKeyAnalyzer", "public static final int LENGTH = Character.SIZE;" ], [ "NO_NEXT_ENTRY", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String NO_NEXT_ENTRY = \"No next() entry in the iteration\";" ], [ "NO_PREVIOUS_ENTRY", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String NO_PREVIOUS_ENTRY = \"No previous() entry in the iteration\";" ], [ "REMOVE_INVALID", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String REMOVE_INVALID = \"remove() can only be called once after next()\";" ], [ "GETKEY_INVALID", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String GETKEY_INVALID = \"getKey() can only be called after next() and before remove()\";" ], [ "GETVALUE_INVALID", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String GETVALUE_INVALID = \"getValue() can only be called after next() and before remove()\";" ], [ "SETVALUE_INVALID", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String SETVALUE_INVALID = \"setValue() can only be called after next() and before remove()\";" ], [ "DEFAULT_CAPACITY", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final int DEFAULT_CAPACITY = 16;" ], [ "DEFAULT_THRESHOLD", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final int DEFAULT_THRESHOLD = 12;" ], [ "DEFAULT_LOAD_FACTOR", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final float DEFAULT_LOAD_FACTOR = 0.75f;" ], [ "MAXIMUM_CAPACITY", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final int MAXIMUM_CAPACITY = 1 << 30;" ], [ "NULL", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final Object NULL = new Object();" ], [ "DEFAULT_MAX_SIZE", "org.apache.commons.collections4.map", "LRUMap", "protected static final int DEFAULT_MAX_SIZE = 100;" ], [ "EMPTY_MULTISET", "org.apache.commons.collections4", "MultiSetUtils", "public static final MultiSet EMPTY_MULTISET = UnmodifiableMultiSet.unmodifiableMultiSet(new HashMultiSet<Object>());" ], [ "EMPTY_SORTED_SET", "org.apache.commons.collections4", "SetUtils", "public static final SortedSet EMPTY_SORTED_SET = UnmodifiableSortedSet.unmodifiableSortedSet(new TreeSet<Object>());" ], [ "EMPTY_QUEUE", "org.apache.commons.collections4", "QueueUtils", "public static final Queue EMPTY_QUEUE = UnmodifiableQueue.unmodifiableQueue(new LinkedList<Object>());" ], [ "EMPTY_BAG", "org.apache.commons.collections4", "BagUtils", "public static final Bag EMPTY_BAG = UnmodifiableBag.unmodifiableBag(new HashBag<Object>());" ], [ "EMPTY_SORTED_BAG", "org.apache.commons.collections4", "BagUtils", "public static final Bag EMPTY_SORTED_BAG = UnmodifiableSortedBag.unmodifiableSortedBag(new TreeBag<Object>());" ], [ "RESETTABLE_INSTANCE", "org.apache.commons.collections4.iterators", "EmptyListIterator", "public static final ResettableListIterator RESETTABLE_INSTANCE = new EmptyListIterator<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.iterators", "EmptyListIterator", "public static final ListIterator INSTANCE = RESETTABLE_INSTANCE;" ], [ "INSTANCE", "org.apache.commons.collections4.iterators", "EmptyMapIterator", "public static final MapIterator INSTANCE = new EmptyMapIterator<Object, Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.iterators", "EmptyOrderedIterator", "public static final OrderedIterator INSTANCE = new EmptyOrderedIterator<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.iterators", "EmptyOrderedMapIterator", "public static final OrderedMapIterator INSTANCE = new EmptyOrderedMapIterator<Object, Object>();" ], [ "RESETTABLE_INSTANCE", "org.apache.commons.collections4.iterators", "EmptyIterator", "public static final ResettableIterator RESETTABLE_INSTANCE = new EmptyIterator<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.iterators", "EmptyIterator", "public static final Iterator INSTANCE = RESETTABLE_INSTANCE;" ] ],
  "tokensMethodJavadocValues" : [ ],
  "tokensMethodArguments" : [ [ "methodName", "java.lang", "String" ], [ "paramTypes", "", "Class<?>[]" ], [ "args", "", "Object[]" ] ],
  "tokensMethodVariablesNonPrivateNonStaticNonVoidMethods" : [ [ "toString", "java.lang", "Object", "public String toString()" ], [ "hashCode", "java.lang", "Object", "public native int hashCode()" ], [ "clone", "java.lang", "Object", "protected native Object clone() throws CloneNotSupportedException" ], [ "getClass", "java.lang", "Object", "public final native Class<? extends Object> getClass()" ], [ "equals", "java.lang", "Object", "public boolean equals(Object arg0)" ], [ "lastIndexOf", "java.lang", "String", "public int lastIndexOf(String arg0)" ], [ "value", "java.lang", "String", "byte[] value()" ], [ "substring", "java.lang", "String", "public String substring(int arg0, int arg1)" ], [ "matches", "java.lang", "String", "public boolean matches(String arg0)" ], [ "intern", "java.lang", "String", "public native String intern()" ], [ "toUpperCase", "java.lang", "String", "public String toUpperCase(Locale arg0)" ], [ "codePointCount", "java.lang", "String", "public int codePointCount(int arg0, int arg1)" ], [ "codePointBefore", "java.lang", "String", "public int codePointBefore(int arg0)" ], [ "contentEquals", "java.lang", "String", "public boolean contentEquals(StringBuffer arg0)" ], [ "chars", "java.lang", "String", "public IntStream chars()" ], [ "codePointAt", "java.lang", "String", "public int codePointAt(int arg0)" ], [ "subSequence", "java.lang", "String", "public CharSequence subSequence(int arg0, int arg1)" ], [ "startsWith", "java.lang", "String", "public boolean startsWith(String arg0, int arg1)" ], [ "lastIndexOf", "java.lang", "String", "public int lastIndexOf(String arg0, int arg1)" ], [ "indexOf", "java.lang", "String", "public int indexOf(int arg0)" ], [ "coder", "java.lang", "String", "byte coder()" ], [ "concat", "java.lang", "String", "public String concat(String arg0)" ], [ "contentEquals", "java.lang", "String", "public boolean contentEquals(CharSequence arg0)" ], [ "startsWith", "java.lang", "String", "public boolean startsWith(String arg0)" ], [ "hashCode", "java.lang", "String", "public int hashCode()" ], [ "getBytes", "java.lang", "String", "public byte[] getBytes()" ], [ "compareTo", "java.lang", "String", "public int compareTo(String arg0)" ], [ "lastIndexOf", "java.lang", "String", "public int lastIndexOf(int arg0)" ], [ "strip", "java.lang", "String", "public String strip()" ], [ "endsWith", "java.lang", "String", "public boolean endsWith(String arg0)" ], [ "translateEscapes", "java.lang", "String", "public String translateEscapes()" ], [ "split", "java.lang", "String", "public String[] split(String arg0, int arg1)" ], [ "length", "java.lang", "String", "public int length()" ], [ "toUpperCase", "java.lang", "String", "public String toUpperCase()" ], [ "formatted", "java.lang", "String", "public String formatted(Object[] arg0)" ], [ "toString", "java.lang", "String", "public String toString()" ], [ "indexOf", "java.lang", "String", "public int indexOf(String arg0)" ], [ "toLowerCase", "java.lang", "String", "public String toLowerCase()" ], [ "isBlank", "java.lang", "String", "public boolean isBlank()" ], [ "getBytes", "java.lang", "String", "public byte[] getBytes(Charset arg0)" ], [ "codePoints", "java.lang", "String", "public IntStream codePoints()" ], [ "contains", "java.lang", "String", "public boolean contains(CharSequence arg0)" ], [ "split", "java.lang", "String", "public String[] split(String arg0)" ], [ "stripLeading", "java.lang", "String", "public String stripLeading()" ], [ "indexOf", "java.lang", "String", "public int indexOf(String arg0, int arg1)" ], [ "offsetByCodePoints", "java.lang", "String", "public int offsetByCodePoints(int arg0, int arg1)" ], [ "replaceAll", "java.lang", "String", "public String replaceAll(String arg0, String arg1)" ], [ "describeConstable", "java.lang", "String", "public Optional<String> describeConstable()" ], [ "toLowerCase", "java.lang", "String", "public String toLowerCase(Locale arg0)" ], [ "indent", "java.lang", "String", "public String indent(int arg0)" ], [ "lastIndexOf", "java.lang", "String", "public int lastIndexOf(int arg0, int arg1)" ], [ "stripTrailing", "java.lang", "String", "public String stripTrailing()" ], [ "regionMatches", "java.lang", "String", "public boolean regionMatches(boolean arg0, int arg1, String arg2, int arg3, int arg4)" ], [ "replace", "java.lang", "String", "public String replace(char arg0, char arg1)" ], [ "getBytes", "java.lang", "String", "public byte[] getBytes(String arg0) throws UnsupportedEncodingException" ], [ "equals", "java.lang", "String", "public boolean equals(Object arg0)" ], [ "lines", "java.lang", "String", "public Stream<String> lines()" ], [ "toCharArray", "java.lang", "String", "public char[] toCharArray()" ], [ "replaceFirst", "java.lang", "String", "public String replaceFirst(String arg0, String arg1)" ], [ "regionMatches", "java.lang", "String", "public boolean regionMatches(int arg0, String arg1, int arg2, int arg3)" ], [ "trim", "java.lang", "String", "public String trim()" ], [ "equalsIgnoreCase", "java.lang", "String", "public boolean equalsIgnoreCase(String arg0)" ], [ "repeat", "java.lang", "String", "public String repeat(int arg0)" ], [ "stripIndent", "java.lang", "String", "public String stripIndent()" ], [ "replace", "java.lang", "String", "public String replace(CharSequence arg0, CharSequence arg1)" ], [ "substring", "java.lang", "String", "public String substring(int arg0)" ], [ "charAt", "java.lang", "String", "public char charAt(int arg0)" ], [ "isLatin1", "java.lang", "String", "boolean isLatin1()" ], [ "resolveConstantDesc", "java.lang", "String", "public String resolveConstantDesc(MethodHandles.Lookup arg0)" ], [ "isEmpty", "java.lang", "String", "public boolean isEmpty()" ], [ "indexOf", "java.lang", "String", "public int indexOf(int arg0, int arg1)" ], [ "compareToIgnoreCase", "java.lang", "String", "public int compareToIgnoreCase(String arg0)" ], [ "transform", "java.lang", "String", "public <R> R transform(Function<? super String, ? extends R> arg0)" ], [ "compareTo", "java.lang", "Comparable", "public abstract int compareTo(T arg0)" ], [ "chars", "java.lang", "CharSequence", "public default IntStream chars()" ], [ "length", "java.lang", "CharSequence", "public abstract int length()" ], [ "codePoints", "java.lang", "CharSequence", "public default IntStream codePoints()" ], [ "toString", "java.lang", "CharSequence", "public abstract String toString()" ], [ "subSequence", "java.lang", "CharSequence", "public abstract CharSequence subSequence(int arg0, int arg1)" ], [ "charAt", "java.lang", "CharSequence", "public abstract char charAt(int arg0)" ], [ "isEmpty", "java.lang", "CharSequence", "public default boolean isEmpty()" ], [ "describeConstable", "java.lang.constant", "Constable", "public abstract Optional<? extends ConstantDesc> describeConstable()" ], [ "resolveConstantDesc", "java.lang.constant", "ConstantDesc", "public abstract Object resolveConstantDesc(MethodHandles.Lookup arg0) throws ReflectiveOperationException" ], [ "equals", "", "java.lang.Class<?>[]", "public boolean equals(Object);" ], [ "toString", "", "java.lang.Class<?>[]", "public String toString()" ], [ "hashCode", "", "java.lang.Class<?>[]", "public native int hashCode()" ], [ "getClass", "", "java.lang.Class<?>[]", "public final native Class getClass();" ], [ "clone", "", "java.lang.Class<?>[]", "public T[] clone();" ], [ "equals", "", "java.lang.Object[]", "public boolean equals(Object);" ], [ "toString", "", "java.lang.Object[]", "public String toString()" ], [ "hashCode", "", "java.lang.Object[]", "public native int hashCode()" ], [ "getClass", "", "java.lang.Object[]", "public final native Class getClass();" ], [ "clone", "", "java.lang.Object[]", "public T[] clone();" ], [ "transform", "org.apache.commons.collections4", "Transformer", "public abstract O transform(I arg0)" ] ],
  "tokensMethodVariablesNonPrivateNonStaticAttributes" : [ [ "length", "java.lang", "Class[]", "public final int length;" ], [ "length", "java.lang", "Object[]", "public final int length;" ] ],
  "tokensOracleVariablesNonPrivateNonStaticNonVoidMethods" : [ ],
  "tokensOracleVariablesNonPrivateNonStaticAttributes" : [ ]
}, {
  "id" : 8996,
  "oracle" : ";",
  "oracleType" : "EXCEPT_POST",
  "projectName" : "commons-collections4-4.1",
  "packageName" : "org.apache.commons.collections4",
  "className" : "TransformerUtils",
  "javadocTag" : "@throws IllegalArgumentException if the paramTypes and args don't match",
  "methodJavadoc" : "    /**\n     * Gets a Transformer that invokes a method on the input object.\n     * The method parameters are specified. If the input object is {@code null},\n     * {@code null} is returned.\n     *\n     * @param <I>  the input type\n     * @param <O>  the output type\n     * @param methodName  the name of the method\n     * @param paramTypes  the parameter types\n     * @param args  the arguments\n     * @return the transformer\n     * @throws NullPointerException if the method name is null\n     * @throws IllegalArgumentException if the paramTypes and args don't match\n     * @see InvokerTransformer\n     */",
  "methodSourceCode" : "public static <I, O> Transformer<I, O> invokerTransformer(final String methodName, final Class<?>[] paramTypes, final Object[] args){\n    return InvokerTransformer.invokerTransformer(methodName, paramTypes, args);\n}",
  "classJavadoc" : "/**\n * <code>TransformerUtils</code> provides reference implementations and\n * utilities for the Transformer functor interface. The supplied transformers are:\n * <ul>\n * <li>Invoker - returns the result of a method call on the input object\n * <li>Clone - returns a clone of the input object\n * <li>Constant - always returns the same object\n * <li>Closure - performs a Closure and returns the input object\n * <li>Predicate - returns the result of the predicate as a Boolean\n * <li>Factory - returns a new object from a factory\n * <li>Chained - chains two or more transformers together\n * <li>If - calls one transformer or another based on a predicate\n * <li>Switch - calls one transformer based on one or more predicates\n * <li>SwitchMap - calls one transformer looked up from a Map\n * <li>Instantiate - the Class input object is instantiated\n * <li>Map - returns an object from a supplied Map\n * <li>Null - always returns null\n * <li>NOP - returns the input object, which should be immutable\n * <li>Exception - always throws an exception\n * <li>StringValue - returns a <code>java.lang.String</code> representation of the input object\n * </ul>\n * <p>\n * Since v4.1 only transformers which are considered to be unsafe are\n * Serializable. Transformers considered to be unsafe for serialization are:\n * <ul>\n * <li>Invoker\n * <li>Clone\n * <li>Instantiate\n * </ul>\n *\n * @since 3.0\n * @version $Id: TransformerUtils.java 1714362 2015-11-14 20:38:02Z tn $\n */",
  "classSourceCode" : "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.commons.collections4;\n\nimport java.util.Collection;\nimport java.util.Map;\n\nimport org.apache.commons.collections4.functors.ChainedTransformer;\nimport org.apache.commons.collections4.functors.CloneTransformer;\nimport org.apache.commons.collections4.functors.ClosureTransformer;\nimport org.apache.commons.collections4.functors.ConstantTransformer;\nimport org.apache.commons.collections4.functors.EqualPredicate;\nimport org.apache.commons.collections4.functors.ExceptionTransformer;\nimport org.apache.commons.collections4.functors.FactoryTransformer;\nimport org.apache.commons.collections4.functors.IfTransformer;\nimport org.apache.commons.collections4.functors.InstantiateTransformer;\nimport org.apache.commons.collections4.functors.InvokerTransformer;\nimport org.apache.commons.collections4.functors.MapTransformer;\nimport org.apache.commons.collections4.functors.NOPTransformer;\nimport org.apache.commons.collections4.functors.PredicateTransformer;\nimport org.apache.commons.collections4.functors.StringValueTransformer;\nimport org.apache.commons.collections4.functors.SwitchTransformer;\n\n/**\n * <code>TransformerUtils</code> provides reference implementations and\n * utilities for the Transformer functor interface. The supplied transformers are:\n * <ul>\n * <li>Invoker - returns the result of a method call on the input object\n * <li>Clone - returns a clone of the input object\n * <li>Constant - always returns the same object\n * <li>Closure - performs a Closure and returns the input object\n * <li>Predicate - returns the result of the predicate as a Boolean\n * <li>Factory - returns a new object from a factory\n * <li>Chained - chains two or more transformers together\n * <li>If - calls one transformer or another based on a predicate\n * <li>Switch - calls one transformer based on one or more predicates\n * <li>SwitchMap - calls one transformer looked up from a Map\n * <li>Instantiate - the Class input object is instantiated\n * <li>Map - returns an object from a supplied Map\n * <li>Null - always returns null\n * <li>NOP - returns the input object, which should be immutable\n * <li>Exception - always throws an exception\n * <li>StringValue - returns a <code>java.lang.String</code> representation of the input object\n * </ul>\n * <p>\n * Since v4.1 only transformers which are considered to be unsafe are\n * Serializable. Transformers considered to be unsafe for serialization are:\n * <ul>\n * <li>Invoker\n * <li>Clone\n * <li>Instantiate\n * </ul>\n *\n * @since 3.0\n * @version $Id: TransformerUtils.java 1714362 2015-11-14 20:38:02Z tn $\n */\npublic class TransformerUtils {\n\n    /**\n     * This class is not normally instantiated.\n     */\n    private TransformerUtils() {}\n\n    /**\n     * Gets a transformer that always throws an exception.\n     * This could be useful during testing as a placeholder.\n     *\n     * @param <I>  the input type\n     * @param <O>  the output type\n     * @return the transformer\n     * @see ExceptionTransformer\n     */\n    public static <I, O> Transformer<I, O> exceptionTransformer() {\n        return ExceptionTransformer.exceptionTransformer();\n    }\n\n    /**\n     * Gets a transformer that always returns null.\n     *\n     * @param <I>  the input type\n     * @param <O>  the output type\n     * @return the transformer\n     * @see ConstantTransformer\n     */\n    public static <I, O> Transformer<I, O> nullTransformer() {\n        return ConstantTransformer.nullTransformer();\n    }\n\n    /**\n     * Gets a transformer that returns the input object.\n     * The input object should be immutable to maintain the\n     * contract of Transformer (although this is not checked).\n     *\n     * @param <T>  the input/output type\n     * @return the transformer\n     * @see NOPTransformer\n     */\n    public static <T> Transformer<T, T> nopTransformer() {\n        return NOPTransformer.nopTransformer();\n    }\n\n    /**\n     * Gets a transformer that returns a clone of the input object.\n     * The input object will be cloned using one of these techniques (in order):\n     * <ul>\n     * <li>public clone method\n     * <li>public copy constructor\n     * <li>serialization clone\n     * <ul>\n     *\n     * @param <T>  the input/output type\n     * @return the transformer\n     * @see CloneTransformer\n     */\n    public static <T> Transformer<T, T> cloneTransformer() {\n        return CloneTransformer.cloneTransformer();\n    }\n\n    /**\n     * Creates a Transformer that will return the same object each time the\n     * transformer is used.\n     *\n     * @param <I>  the input type\n     * @param <O>  the output type\n     * @param constantToReturn  the constant object to return each time in the transformer\n     * @return the transformer.\n     * @see ConstantTransformer\n     */\n    public static <I, O> Transformer<I, O> constantTransformer(final O constantToReturn) {\n        return ConstantTransformer.constantTransformer(constantToReturn);\n    }\n\n    /**\n     * Creates a Transformer that calls a Closure each time the transformer is used.\n     * The transformer returns the input object.\n     *\n     * @param <T>  the input/output type\n     * @param closure  the closure to run each time in the transformer, not null\n     * @return the transformer\n     * @throws NullPointerException if the closure is null\n     * @see ClosureTransformer\n     */\n    public static <T> Transformer<T, T> asTransformer(final Closure<? super T> closure) {\n        return ClosureTransformer.closureTransformer(closure);\n    }\n\n    /**\n     * Creates a Transformer that calls a Predicate each time the transformer is used.\n     * The transformer will return either Boolean.TRUE or Boolean.FALSE.\n     *\n     * @param <T>  the input type\n     * @param predicate  the predicate to run each time in the transformer, not null\n     * @return the transformer\n     * @throws NullPointerException if the predicate is null\n     * @see PredicateTransformer\n     */\n    public static <T> Transformer<T, Boolean> asTransformer(final Predicate<? super T> predicate) {\n        return PredicateTransformer.predicateTransformer(predicate);\n    }\n\n    /**\n     * Creates a Transformer that calls a Factory each time the transformer is used.\n     * The transformer will return the value returned by the factory.\n     *\n     * @param <I>  the input type\n     * @param <O>  the output type\n     * @param factory  the factory to run each time in the transformer, not null\n     * @return the transformer\n     * @throws NullPointerException if the factory is null\n     * @see FactoryTransformer\n     */\n    public static <I, O> Transformer<I, O> asTransformer(final Factory<? extends O> factory) {\n        return FactoryTransformer.factoryTransformer(factory);\n    }\n\n    /**\n     * Create a new Transformer that calls each transformer in turn, passing the\n     * result into the next transformer.\n     *\n     * @param <T>  the input/output type\n     * @param transformers  an array of transformers to chain\n     * @return the transformer\n     * @throws NullPointerException if the transformers array or any of the transformers is null\n     * @see ChainedTransformer\n     */\n    public static <T> Transformer<T, T> chainedTransformer(\n            final Transformer<? super T, ? extends T>... transformers) {\n        return ChainedTransformer.chainedTransformer(transformers);\n    }\n\n    /**\n     * Create a new Transformer that calls each transformer in turn, passing the\n     * result into the next transformer. The ordering is that of the iterator()\n     * method on the collection.\n     *\n     * @param <T>  the input/output type\n     * @param transformers  a collection of transformers to chain\n     * @return the transformer\n     * @throws NullPointerException if the transformers collection or any of the transformers is null\n     * @see ChainedTransformer\n     */\n    public static <T> Transformer<T, T> chainedTransformer(\n            final Collection<? extends Transformer<? super T, ? extends T>> transformers) {\n        return ChainedTransformer.chainedTransformer(transformers);\n    }\n\n    /**\n     * Create a new Transformer that calls the transformer if the predicate is true,\n     * otherwise the input object is returned unchanged.\n     *\n     * @param <T>  the input / output type\n     * @param predicate  the predicate to switch on\n     * @param trueTransformer  the transformer called if the predicate is true\n     * @return the transformer\n     * @throws NullPointerException if either the predicate or transformer is null\n     * @see IfTransformer\n     * @since 4.1\n     */\n    public static <T> Transformer<T, T> ifTransformer(final Predicate<? super T> predicate,\n                                                      final Transformer<? super T, ? extends T> trueTransformer) {\n        return IfTransformer.ifTransformer(predicate, trueTransformer);\n    }\n\n    /**\n     * Create a new Transformer that calls one of two transformers depending\n     * on the specified predicate.\n     *\n     * @param <I>  the input type\n     * @param <O>  the output type\n     * @param predicate  the predicate to switch on\n     * @param trueTransformer  the transformer called if the predicate is true\n     * @param falseTransformer  the transformer called if the predicate is false\n     * @return the transformer\n     * @throws NullPointerException if either the predicate or transformer is null\n     * @see IfTransformer\n     * @since 4.1\n     */\n    public static <I, O> Transformer<I, O> ifTransformer(final Predicate<? super I> predicate,\n                                                         final Transformer<? super I, ? extends O> trueTransformer,\n                                                         final Transformer<? super I, ? extends O> falseTransformer) {\n        return IfTransformer.ifTransformer(predicate, trueTransformer, falseTransformer);\n    }\n\n    /**\n     * Create a new Transformer that calls one of two transformers depending\n     * on the specified predicate.\n     *\n     * @param <I>  the input type\n     * @param <O>  the output type\n     * @param predicate  the predicate to switch on\n     * @param trueTransformer  the transformer called if the predicate is true\n     * @param falseTransformer  the transformer called if the predicate is false\n     * @return the transformer\n     * @throws NullPointerException if either the predicate or transformer is null\n     * @see SwitchTransformer\n     * @deprecated as of 4.1, use {@link #ifTransformer(Predicate, Transformer, Transformer))\n     */\n    @SuppressWarnings(\"unchecked\")\n    @Deprecated\n    public static <I, O> Transformer<I, O> switchTransformer(final Predicate<? super I> predicate,\n            final Transformer<? super I, ? extends O> trueTransformer,\n            final Transformer<? super I, ? extends O> falseTransformer) {\n        return SwitchTransformer.switchTransformer(new Predicate[] { predicate },\n                                                   new Transformer[] { trueTransformer }, falseTransformer);\n    }\n\n    /**\n     * Create a new Transformer that calls one of the transformers depending\n     * on the predicates. The transformer at array location 0 is called if the\n     * predicate at array location 0 returned true. Each predicate is evaluated\n     * until one returns true. If no predicates evaluate to true, null is returned.\n     *\n     * @param <I>  the input type\n     * @param <O>  the output type\n     * @param predicates  an array of predicates to check\n     * @param transformers  an array of transformers to call\n     * @return the transformer\n     * @throws NullPointerException if the either array is null\n     * @throws NullPointerException if any element in the arrays is null\n     * @throws IllegalArgumentException if the arrays have different sizes\n     * @see SwitchTransformer\n     */\n    public static <I, O> Transformer<I, O> switchTransformer(final Predicate<? super I>[] predicates,\n            final Transformer<? super I, ? extends O>[] transformers) {\n        return SwitchTransformer.switchTransformer(predicates, transformers, null);\n    }\n\n    /**\n     * Create a new Transformer that calls one of the transformers depending\n     * on the predicates. The transformer at array location 0 is called if the\n     * predicate at array location 0 returned true. Each predicate is evaluated\n     * until one returns true. If no predicates evaluate to true, the default\n     * transformer is called. If the default transformer is null, null is returned.\n     *\n     * @param <I>  the input type\n     * @param <O>  the output type\n     * @param predicates  an array of predicates to check\n     * @param transformers  an array of transformers to call\n     * @param defaultTransformer  the default to call if no predicate matches, null means return null\n     * @return the transformer\n     * @throws NullPointerException if the either array is null\n     * @throws NullPointerException if any element in the arrays is null\n     * @throws IllegalArgumentException if the arrays have different sizes\n     * @see SwitchTransformer\n     */\n    public static <I, O> Transformer<I, O> switchTransformer(final Predicate<? super I>[] predicates,\n            final Transformer<? super I, ? extends O>[] transformers,\n            final Transformer<? super I, ? extends O> defaultTransformer) {\n        return SwitchTransformer.switchTransformer(predicates, transformers, defaultTransformer);\n    }\n\n    /**\n     * Create a new Transformer that calls one of the transformers depending\n     * on the predicates.\n     * <p>\n     * The Map consists of Predicate keys and Transformer values. A transformer\n     * is called if its matching predicate returns true. Each predicate is evaluated\n     * until one returns true. If no predicates evaluate to true, the default\n     * transformer is called. The default transformer is set in the map with a\n     * null key. If no default transformer is set, null will be returned in a default\n     * case. The ordering is that of the iterator() method on the entryset collection\n     * of the map.\n     *\n     * @param <I>  the input type\n     * @param <O>  the output type\n     * @param predicatesAndTransformers  a map of predicates to transformers\n     * @return the transformer\n     * @throws NullPointerException if the map is null\n     * @throws NullPointerException if any transformer in the map is null\n     * @throws ClassCastException  if the map elements are of the wrong type\n     * @see SwitchTransformer\n     */\n    public static <I, O> Transformer<I, O> switchTransformer(\n            final Map<Predicate<I>, Transformer<I, O>> predicatesAndTransformers) {\n        return SwitchTransformer.switchTransformer(predicatesAndTransformers);\n    }\n\n    /**\n     * Create a new Transformer that uses the input object as a key to find the\n     * transformer to call.\n     * <p>\n     * The Map consists of object keys and Transformer values. A transformer\n     * is called if the input object equals the key. If there is no match, the\n     * default transformer is called. The default transformer is set in the map\n     * using a null key. If no default is set, null will be returned in a default case.\n     *\n     * @param <I>  the input type\n     * @param <O>  the output type\n     * @param objectsAndTransformers  a map of objects to transformers\n     * @return the transformer\n     * @throws NullPointerException if the map is null\n     * @throws NullPointerException if any transformer in the map is null\n     * @see SwitchTransformer\n     */\n    @SuppressWarnings(\"unchecked\")\n    public static <I, O> Transformer<I, O> switchMapTransformer(\n            final Map<I, Transformer<I, O>> objectsAndTransformers) {\n\n        if (objectsAndTransformers == null) {\n            throw new NullPointerException(\"The object and transformer map must not be null\");\n        }\n        final Transformer<? super I, ? extends O> def = objectsAndTransformers.remove(null);\n        final int size = objectsAndTransformers.size();\n        final Transformer<? super I, ? extends O>[] trs = new Transformer[size];\n        final Predicate<I>[] preds = new Predicate[size];\n        int i = 0;\n        for (final Map.Entry<I, Transformer<I, O>> entry : objectsAndTransformers.entrySet()) {\n            preds[i] = EqualPredicate.<I>equalPredicate(entry.getKey());\n            trs[i++] = entry.getValue();\n        }\n        return TransformerUtils.switchTransformer(preds, trs, def);\n    }\n\n    /**\n     * Gets a Transformer that expects an input Class object that it will instantiate.\n     *\n     * @param <T>  the output type\n     * @return the transformer\n     * @see InstantiateTransformer\n     */\n    public static <T> Transformer<Class<? extends T>, T> instantiateTransformer() {\n        return InstantiateTransformer.instantiateTransformer();\n    }\n\n    /**\n     * Creates a Transformer that expects an input Class object that it will\n     * instantiate. The constructor used is determined by the arguments specified\n     * to this method.\n     *\n     * @param <T>  the output type\n     * @param paramTypes  parameter types for the constructor, can be null\n     * @param args  the arguments to pass to the constructor, can be null\n     * @return the transformer\n     * @throws IllegalArgumentException if the paramTypes and args don't match\n     * @see InstantiateTransformer\n     */\n    public static <T> Transformer<Class<? extends T>, T> instantiateTransformer(\n            final Class<?>[] paramTypes, final Object[] args) {\n        return InstantiateTransformer.instantiateTransformer(paramTypes, args);\n    }\n\n    /**\n     * Creates a Transformer that uses the passed in Map to transform the input\n     * object (as a simple lookup).\n     *\n     * @param <I>  the input type\n     * @param <O>  the output type\n     * @param map  the map to use to transform the objects\n     * @return the transformer, or {@link ConstantTransformer#nullTransformer()} if the\n     *   {@code map} is {@code null}\n     * @see MapTransformer\n     */\n    public static <I, O> Transformer<I, O> mapTransformer(final Map<? super I, ? extends O> map) {\n        return MapTransformer.mapTransformer(map);\n    }\n\n    /**\n     * Gets a Transformer that invokes a method on the input object.\n     * The method must have no parameters. If the input object is null,\n     * null is returned.\n     * <p>\n     * For example, <code>TransformerUtils.invokerTransformer(\"getName\");</code>\n     * will call the <code>getName/code> method on the input object to\n     * determine the transformer result.\n     *\n     * @param <I>  the input type\n     * @param <O>  the output type\n     * @param methodName  the method name to call on the input object, may not be null\n     * @return the transformer\n     * @throws NullPointerException if the methodName is null.\n     * @see InvokerTransformer\n     */\n    public static <I, O> Transformer<I, O> invokerTransformer(final String methodName) {\n        return InvokerTransformer.invokerTransformer(methodName, null, null);\n    }\n\n    /**\n     * Gets a Transformer that invokes a method on the input object.\n     * The method parameters are specified. If the input object is {@code null},\n     * {@code null} is returned.\n     *\n     * @param <I>  the input type\n     * @param <O>  the output type\n     * @param methodName  the name of the method\n     * @param paramTypes  the parameter types\n     * @param args  the arguments\n     * @return the transformer\n     * @throws NullPointerException if the method name is null\n     * @throws IllegalArgumentException if the paramTypes and args don't match\n     * @see InvokerTransformer\n     */\n    public static <I, O> Transformer<I, O> invokerTransformer(final String methodName, final Class<?>[] paramTypes,\n                                                              final Object[] args) {\n        return InvokerTransformer.invokerTransformer(methodName, paramTypes, args);\n    }\n\n    /**\n     * Gets a transformer that returns a <code>java.lang.String</code>\n     * representation of the input object. This is achieved via the\n     * <code>toString</code> method, <code>null</code> returns 'null'.\n     *\n     * @param <T>  the input type\n     * @return the transformer\n     * @see StringValueTransformer\n     */\n    public static <T> Transformer<T, String> stringValueTransformer() {\n        return StringValueTransformer.stringValueTransformer();\n    }\n\n}\n",
  "tokensGeneralGrammar" : [ "null", "true", "false", ",", ".", ":", ";", "?", "(", ")", "jdVar", "stream", "Arrays", "allMatch", "noneMatch", "anyMatch", "~", ">>", "<<", ">>>", "|", "&", "^", "+", "-", "/", "*", "%", "&&", "||", ">=", "<=", ">", "<", "==", "!=", "instanceof", "class", "methodResultID", "this" ],
  "tokensGeneralValuesGlobalDictionary" : [ [ "0", "int" ], [ "1", "int" ], [ "-1", "int" ], [ "0.0", "double" ], [ "1.0", "double" ], [ "-1.0", "double" ], [ "\"\"", "String" ], [ "\" \"", "String" ] ],
  "tokensProjectClasses" : [ [ "BidiMap", "org.apache.commons.collections4" ], [ "Equator", "org.apache.commons.collections4" ], [ "MultiSet", "org.apache.commons.collections4" ], [ "IteratorUtils", "org.apache.commons.collections4" ], [ "ComparatorUtils", "org.apache.commons.collections4" ], [ "FunctorException", "org.apache.commons.collections4" ], [ "AbstractDualBidiMap", "org.apache.commons.collections4.bidimap" ], [ "UnmodifiableBidiMap", "org.apache.commons.collections4.bidimap" ], [ "AbstractOrderedBidiMapDecorator", "org.apache.commons.collections4.bidimap" ], [ "UnmodifiableOrderedBidiMap", "org.apache.commons.collections4.bidimap" ], [ "AbstractBidiMapDecorator", "org.apache.commons.collections4.bidimap" ], [ "DualLinkedHashBidiMap", "org.apache.commons.collections4.bidimap" ], [ "UnmodifiableSortedBidiMap", "org.apache.commons.collections4.bidimap" ], [ "AbstractSortedBidiMapDecorator", "org.apache.commons.collections4.bidimap" ], [ "DualHashBidiMap", "org.apache.commons.collections4.bidimap" ], [ "DualTreeBidiMap", "org.apache.commons.collections4.bidimap" ], [ "TreeBidiMap", "org.apache.commons.collections4.bidimap" ], [ "MultiMapUtils", "org.apache.commons.collections4" ], [ "BoundedCollection", "org.apache.commons.collections4" ], [ "UnmodifiableBoundedCollection", "org.apache.commons.collections4.collection" ], [ "CompositeCollection", "org.apache.commons.collections4.collection" ], [ "TransformedCollection", "org.apache.commons.collections4.collection" ], [ "PredicatedCollection", "org.apache.commons.collections4.collection" ], [ "IndexedCollection", "org.apache.commons.collections4.collection" ], [ "SynchronizedCollection", "org.apache.commons.collections4.collection" ], [ "UnmodifiableCollection", "org.apache.commons.collections4.collection" ], [ "AbstractCollectionDecorator", "org.apache.commons.collections4.collection" ], [ "OrderedBidiMap", "org.apache.commons.collections4" ], [ "FactoryUtils", "org.apache.commons.collections4" ], [ "IterableGet", "org.apache.commons.collections4" ], [ "ListUtils", "org.apache.commons.collections4" ], [ "Closure", "org.apache.commons.collections4" ], [ "IterableSortedMap", "org.apache.commons.collections4" ], [ "MapUtils", "org.apache.commons.collections4" ], [ "Transformer", "org.apache.commons.collections4" ], [ "DefaultEquator", "org.apache.commons.collections4.functors" ], [ "StringValueTransformer", "org.apache.commons.collections4.functors" ], [ "PredicateDecorator", "org.apache.commons.collections4.functors" ], [ "IfTransformer", "org.apache.commons.collections4.functors" ], [ "IdentityPredicate", "org.apache.commons.collections4.functors" ], [ "ExceptionClosure", "org.apache.commons.collections4.functors" ], [ "NOPClosure", "org.apache.commons.collections4.functors" ], [ "ClosureTransformer", "org.apache.commons.collections4.functors" ], [ "FunctorUtils", "org.apache.commons.collections4.functors" ], [ "TransformerPredicate", "org.apache.commons.collections4.functors" ], [ "NullPredicate", "org.apache.commons.collections4.functors" ], [ "ConstantTransformer", "org.apache.commons.collections4.functors" ], [ "PredicateTransformer", "org.apache.commons.collections4.functors" ], [ "WhileClosure", "org.apache.commons.collections4.functors" ], [ "ForClosure", "org.apache.commons.collections4.functors" ], [ "NullIsTruePredicate", "org.apache.commons.collections4.functors" ], [ "TransformedPredicate", "org.apache.commons.collections4.functors" ], [ "NonePredicate", "org.apache.commons.collections4.functors" ], [ "ExceptionTransformer", "org.apache.commons.collections4.functors" ], [ "SwitchTransformer", "org.apache.commons.collections4.functors" ], [ "TransformerClosure", "org.apache.commons.collections4.functors" ], [ "OrPredicate", "org.apache.commons.collections4.functors" ], [ "NOPTransformer", "org.apache.commons.collections4.functors" ], [ "MapTransformer", "org.apache.commons.collections4.functors" ], [ "ExceptionFactory", "org.apache.commons.collections4.functors" ], [ "ChainedClosure", "org.apache.commons.collections4.functors" ], [ "AndPredicate", "org.apache.commons.collections4.functors" ], [ "PrototypeFactory", "org.apache.commons.collections4.functors" ], [ "ExceptionPredicate", "org.apache.commons.collections4.functors" ], [ "AbstractQuantifierPredicate", "org.apache.commons.collections4.functors" ], [ "InstanceofPredicate", "org.apache.commons.collections4.functors" ], [ "InvokerTransformer", "org.apache.commons.collections4.functors" ], [ "FalsePredicate", "org.apache.commons.collections4.functors" ], [ "CloneTransformer", "org.apache.commons.collections4.functors" ], [ "NotPredicate", "org.apache.commons.collections4.functors" ], [ "ConstantFactory", "org.apache.commons.collections4.functors" ], [ "ChainedTransformer", "org.apache.commons.collections4.functors" ], [ "ComparatorPredicate", "org.apache.commons.collections4.functors" ], [ "CatchAndRethrowClosure", "org.apache.commons.collections4.functors" ], [ "AllPredicate", "org.apache.commons.collections4.functors" ], [ "NullIsFalsePredicate", "org.apache.commons.collections4.functors" ], [ "NullIsExceptionPredicate", "org.apache.commons.collections4.functors" ], [ "AnyPredicate", "org.apache.commons.collections4.functors" ], [ "TruePredicate", "org.apache.commons.collections4.functors" ], [ "FactoryTransformer", "org.apache.commons.collections4.functors" ], [ "NotNullPredicate", "org.apache.commons.collections4.functors" ], [ "SwitchClosure", "org.apache.commons.collections4.functors" ], [ "UniquePredicate", "org.apache.commons.collections4.functors" ], [ "InstantiateTransformer", "org.apache.commons.collections4.functors" ], [ "OnePredicate", "org.apache.commons.collections4.functors" ], [ "EqualPredicate", "org.apache.commons.collections4.functors" ], [ "InstantiateFactory", "org.apache.commons.collections4.functors" ], [ "IfClosure", "org.apache.commons.collections4.functors" ], [ "ResettableListIterator", "org.apache.commons.collections4" ], [ "OrderedIterator", "org.apache.commons.collections4" ], [ "ComparatorChain", "org.apache.commons.collections4.comparators" ], [ "BooleanComparator", "org.apache.commons.collections4.comparators" ], [ "ReverseComparator", "org.apache.commons.collections4.comparators" ], [ "ComparableComparator", "org.apache.commons.collections4.comparators" ], [ "TransformingComparator", "org.apache.commons.collections4.comparators" ], [ "FixedOrderComparator", "org.apache.commons.collections4.comparators" ], [ "NullComparator", "org.apache.commons.collections4.comparators" ], [ "CollectionUtils", "org.apache.commons.collections4" ], [ "ListValuedMap", "org.apache.commons.collections4" ], [ "AbstractIterableGetMapDecorator", "org.apache.commons.collections4.splitmap" ], [ "TransformedSplitMap", "org.apache.commons.collections4.splitmap" ], [ "Factory", "org.apache.commons.collections4" ], [ "IterableUtils", "org.apache.commons.collections4" ], [ "Bag", "org.apache.commons.collections4" ], [ "Predicate", "org.apache.commons.collections4" ], [ "SortedBag", "org.apache.commons.collections4" ], [ "TrieUtils", "org.apache.commons.collections4" ], [ "ClosureUtils", "org.apache.commons.collections4" ], [ "PatriciaTrie", "org.apache.commons.collections4.trie" ], [ "UnmodifiableTrie", "org.apache.commons.collections4.trie" ], [ "KeyAnalyzer", "org.apache.commons.collections4.trie" ], [ "AbstractPatriciaTrie", "org.apache.commons.collections4.trie" ], [ "AbstractBitwiseTrie", "org.apache.commons.collections4.trie" ], [ "StringKeyAnalyzer", "org.apache.commons.collections4.trie.analyzer" ], [ "TransformedSortedMap", "org.apache.commons.collections4.map" ], [ "AbstractLinkedMap", "org.apache.commons.collections4.map" ], [ "Flat3Map", "org.apache.commons.collections4.map" ], [ "PredicatedMap", "org.apache.commons.collections4.map" ], [ "FixedSizeSortedMap", "org.apache.commons.collections4.map" ], [ "UnmodifiableSortedMap", "org.apache.commons.collections4.map" ], [ "PredicatedSortedMap", "org.apache.commons.collections4.map" ], [ "DefaultedMap", "org.apache.commons.collections4.map" ], [ "ReferenceIdentityMap", "org.apache.commons.collections4.map" ], [ "AbstractSortedMapDecorator", "org.apache.commons.collections4.map" ], [ "AbstractInputCheckedMapDecorator", "org.apache.commons.collections4.map" ], [ "FixedSizeMap", "org.apache.commons.collections4.map" ], [ "LazySortedMap", "org.apache.commons.collections4.map" ], [ "UnmodifiableOrderedMap", "org.apache.commons.collections4.map" ], [ "CaseInsensitiveMap", "org.apache.commons.collections4.map" ], [ "AbstractHashedMap", "org.apache.commons.collections4.map" ], [ "AbstractOrderedMapDecorator", "org.apache.commons.collections4.map" ], [ "UnmodifiableMap", "org.apache.commons.collections4.map" ], [ "EntrySetToMapIteratorAdapter", "org.apache.commons.collections4.map" ], [ "AbstractIterableMap", "org.apache.commons.collections4.map" ], [ "ListOrderedMap", "org.apache.commons.collections4.map" ], [ "LinkedMap", "org.apache.commons.collections4.map" ], [ "SingletonMap", "org.apache.commons.collections4.map" ], [ "UnmodifiableEntrySet", "org.apache.commons.collections4.map" ], [ "StaticBucketMap", "org.apache.commons.collections4.map" ], [ "AbstractMapDecorator", "org.apache.commons.collections4.map" ], [ "AbstractReferenceMap", "org.apache.commons.collections4.map" ], [ "MultiKeyMap", "org.apache.commons.collections4.map" ], [ "HashedMap", "org.apache.commons.collections4.map" ], [ "LazyMap", "org.apache.commons.collections4.map" ], [ "PassiveExpiringMap", "org.apache.commons.collections4.map" ], [ "MultiValueMap", "org.apache.commons.collections4.map" ], [ "LRUMap", "org.apache.commons.collections4.map" ], [ "ReferenceMap", "org.apache.commons.collections4.map" ], [ "TransformedMap", "org.apache.commons.collections4.map" ], [ "CompositeMap", "org.apache.commons.collections4.map" ], [ "UnmodifiableMapEntry", "org.apache.commons.collections4.keyvalue" ], [ "MultiKey", "org.apache.commons.collections4.keyvalue" ], [ "DefaultMapEntry", "org.apache.commons.collections4.keyvalue" ], [ "DefaultKeyValue", "org.apache.commons.collections4.keyvalue" ], [ "AbstractMapEntryDecorator", "org.apache.commons.collections4.keyvalue" ], [ "AbstractKeyValue", "org.apache.commons.collections4.keyvalue" ], [ "TiedMapEntry", "org.apache.commons.collections4.keyvalue" ], [ "AbstractMapEntry", "org.apache.commons.collections4.keyvalue" ], [ "MultiSetUtils", "org.apache.commons.collections4" ], [ "MapIterator", "org.apache.commons.collections4" ], [ "AbstractMultiValuedMap", "org.apache.commons.collections4.multimap" ], [ "UnmodifiableMultiValuedMap", "org.apache.commons.collections4.multimap" ], [ "HashSetValuedHashMap", "org.apache.commons.collections4.multimap" ], [ "TransformedMultiValuedMap", "org.apache.commons.collections4.multimap" ], [ "AbstractSetValuedMap", "org.apache.commons.collections4.multimap" ], [ "AbstractListValuedMap", "org.apache.commons.collections4.multimap" ], [ "ArrayListValuedHashMap", "org.apache.commons.collections4.multimap" ], [ "AbstractMultiValuedMapDecorator", "org.apache.commons.collections4.multimap" ], [ "LazyList", "org.apache.commons.collections4.list" ], [ "AbstractSerializableListDecorator", "org.apache.commons.collections4.list" ], [ "TreeList", "org.apache.commons.collections4.list" ], [ "SetUniqueList", "org.apache.commons.collections4.list" ], [ "AbstractListDecorator", "org.apache.commons.collections4.list" ], [ "NodeCachingLinkedList", "org.apache.commons.collections4.list" ], [ "UnmodifiableList", "org.apache.commons.collections4.list" ], [ "FixedSizeList", "org.apache.commons.collections4.list" ], [ "TransformedList", "org.apache.commons.collections4.list" ], [ "GrowthList", "org.apache.commons.collections4.list" ], [ "AbstractLinkedList", "org.apache.commons.collections4.list" ], [ "CursorableLinkedList", "org.apache.commons.collections4.list" ], [ "PredicatedList", "org.apache.commons.collections4.list" ], [ "OrderedMap", "org.apache.commons.collections4" ], [ "AbstractQueueDecorator", "org.apache.commons.collections4.queue" ], [ "TransformedQueue", "org.apache.commons.collections4.queue" ], [ "UnmodifiableQueue", "org.apache.commons.collections4.queue" ], [ "CircularFifoQueue", "org.apache.commons.collections4.queue" ], [ "PredicatedQueue", "org.apache.commons.collections4.queue" ], [ "FluentIterable", "org.apache.commons.collections4" ], [ "TransformerUtils", "org.apache.commons.collections4" ], [ "PredicateUtils", "org.apache.commons.collections4" ], [ "ResettableIterator", "org.apache.commons.collections4" ], [ "MultiValuedMap", "org.apache.commons.collections4" ], [ "SetUtils", "org.apache.commons.collections4" ], [ "SortedBidiMap", "org.apache.commons.collections4" ], [ "ArrayStack", "org.apache.commons.collections4" ], [ "Put", "org.apache.commons.collections4" ], [ "OrderedMapIterator", "org.apache.commons.collections4" ], [ "TransformedSet", "org.apache.commons.collections4.set" ], [ "CompositeSet", "org.apache.commons.collections4.set" ], [ "TransformedNavigableSet", "org.apache.commons.collections4.set" ], [ "PredicatedNavigableSet", "org.apache.commons.collections4.set" ], [ "AbstractSetDecorator", "org.apache.commons.collections4.set" ], [ "ListOrderedSet", "org.apache.commons.collections4.set" ], [ "UnmodifiableSet", "org.apache.commons.collections4.set" ], [ "AbstractSerializableSetDecorator", "org.apache.commons.collections4.set" ], [ "MapBackedSet", "org.apache.commons.collections4.set" ], [ "UnmodifiableSortedSet", "org.apache.commons.collections4.set" ], [ "PredicatedSortedSet", "org.apache.commons.collections4.set" ], [ "AbstractSortedSetDecorator", "org.apache.commons.collections4.set" ], [ "PredicatedSet", "org.apache.commons.collections4.set" ], [ "AbstractNavigableSetDecorator", "org.apache.commons.collections4.set" ], [ "UnmodifiableNavigableSet", "org.apache.commons.collections4.set" ], [ "TransformedSortedSet", "org.apache.commons.collections4.set" ], [ "IterableMap", "org.apache.commons.collections4" ], [ "EnumerationUtils", "org.apache.commons.collections4" ], [ "DeleteCommand", "org.apache.commons.collections4.sequence" ], [ "ReplacementsHandler", "org.apache.commons.collections4.sequence" ], [ "InsertCommand", "org.apache.commons.collections4.sequence" ], [ "SequencesComparator", "org.apache.commons.collections4.sequence" ], [ "ReplacementsFinder", "org.apache.commons.collections4.sequence" ], [ "KeepCommand", "org.apache.commons.collections4.sequence" ], [ "EditCommand", "org.apache.commons.collections4.sequence" ], [ "CommandVisitor", "org.apache.commons.collections4.sequence" ], [ "EditScript", "org.apache.commons.collections4.sequence" ], [ "QueueUtils", "org.apache.commons.collections4" ], [ "SetValuedMap", "org.apache.commons.collections4" ], [ "SynchronizedBag", "org.apache.commons.collections4.bag" ], [ "AbstractMapBag", "org.apache.commons.collections4.bag" ], [ "CollectionBag", "org.apache.commons.collections4.bag" ], [ "UnmodifiableBag", "org.apache.commons.collections4.bag" ], [ "PredicatedSortedBag", "org.apache.commons.collections4.bag" ], [ "UnmodifiableSortedBag", "org.apache.commons.collections4.bag" ], [ "HashBag", "org.apache.commons.collections4.bag" ], [ "AbstractBagDecorator", "org.apache.commons.collections4.bag" ], [ "TransformedSortedBag", "org.apache.commons.collections4.bag" ], [ "TreeBag", "org.apache.commons.collections4.bag" ], [ "PredicatedBag", "org.apache.commons.collections4.bag" ], [ "SynchronizedSortedBag", "org.apache.commons.collections4.bag" ], [ "CollectionSortedBag", "org.apache.commons.collections4.bag" ], [ "TransformedBag", "org.apache.commons.collections4.bag" ], [ "AbstractSortedBagDecorator", "org.apache.commons.collections4.bag" ], [ "HashMultiSet", "org.apache.commons.collections4.multiset" ], [ "AbstractMultiSet", "org.apache.commons.collections4.multiset" ], [ "PredicatedMultiSet", "org.apache.commons.collections4.multiset" ], [ "AbstractMultiSetDecorator", "org.apache.commons.collections4.multiset" ], [ "AbstractMapMultiSet", "org.apache.commons.collections4.multiset" ], [ "UnmodifiableMultiSet", "org.apache.commons.collections4.multiset" ], [ "SynchronizedMultiSet", "org.apache.commons.collections4.multiset" ], [ "BagUtils", "org.apache.commons.collections4" ], [ "Unmodifiable", "org.apache.commons.collections4" ], [ "Get", "org.apache.commons.collections4" ], [ "Trie", "org.apache.commons.collections4" ], [ "MultiMap", "org.apache.commons.collections4" ], [ "KeyValue", "org.apache.commons.collections4" ], [ "IteratorChain", "org.apache.commons.collections4.iterators" ], [ "EmptyListIterator", "org.apache.commons.collections4.iterators" ], [ "UnmodifiableOrderedMapIterator", "org.apache.commons.collections4.iterators" ], [ "AbstractListIteratorDecorator", "org.apache.commons.collections4.iterators" ], [ "ZippingIterator", "org.apache.commons.collections4.iterators" ], [ "UnmodifiableIterator", "org.apache.commons.collections4.iterators" ], [ "CollatingIterator", "org.apache.commons.collections4.iterators" ], [ "UniqueFilterIterator", "org.apache.commons.collections4.iterators" ], [ "ReverseListIterator", "org.apache.commons.collections4.iterators" ], [ "BoundedIterator", "org.apache.commons.collections4.iterators" ], [ "AbstractIteratorDecorator", "org.apache.commons.collections4.iterators" ], [ "TransformIterator", "org.apache.commons.collections4.iterators" ], [ "AbstractEmptyIterator", "org.apache.commons.collections4.iterators" ], [ "NodeListIterator", "org.apache.commons.collections4.iterators" ], [ "ArrayListIterator", "org.apache.commons.collections4.iterators" ], [ "LazyIteratorChain", "org.apache.commons.collections4.iterators" ], [ "LoopingListIterator", "org.apache.commons.collections4.iterators" ], [ "PeekingIterator", "org.apache.commons.collections4.iterators" ], [ "ObjectGraphIterator", "org.apache.commons.collections4.iterators" ], [ "ArrayIterator", "org.apache.commons.collections4.iterators" ], [ "PermutationIterator", "org.apache.commons.collections4.iterators" ], [ "SingletonListIterator", "org.apache.commons.collections4.iterators" ], [ "EmptyMapIterator", "org.apache.commons.collections4.iterators" ], [ "ObjectArrayIterator", "org.apache.commons.collections4.iterators" ], [ "EnumerationIterator", "org.apache.commons.collections4.iterators" ], [ "IteratorIterable", "org.apache.commons.collections4.iterators" ], [ "AbstractEmptyMapIterator", "org.apache.commons.collections4.iterators" ], [ "LoopingIterator", "org.apache.commons.collections4.iterators" ], [ "IteratorEnumeration", "org.apache.commons.collections4.iterators" ], [ "SingletonIterator", "org.apache.commons.collections4.iterators" ], [ "ListIteratorWrapper", "org.apache.commons.collections4.iterators" ], [ "SkippingIterator", "org.apache.commons.collections4.iterators" ], [ "EmptyOrderedIterator", "org.apache.commons.collections4.iterators" ], [ "AbstractMapIteratorDecorator", "org.apache.commons.collections4.iterators" ], [ "ObjectArrayListIterator", "org.apache.commons.collections4.iterators" ], [ "UnmodifiableListIterator", "org.apache.commons.collections4.iterators" ], [ "EmptyOrderedMapIterator", "org.apache.commons.collections4.iterators" ], [ "UnmodifiableMapIterator", "org.apache.commons.collections4.iterators" ], [ "EmptyIterator", "org.apache.commons.collections4.iterators" ], [ "EntrySetMapIterator", "org.apache.commons.collections4.iterators" ], [ "PushbackIterator", "org.apache.commons.collections4.iterators" ], [ "FilterIterator", "org.apache.commons.collections4.iterators" ], [ "AbstractUntypedIteratorDecorator", "org.apache.commons.collections4.iterators" ], [ "AbstractOrderedMapIteratorDecorator", "org.apache.commons.collections4.iterators" ], [ "FilterListIterator", "org.apache.commons.collections4.iterators" ], [ "SplitMapUtils", "org.apache.commons.collections4" ], [ "BoundedMap", "org.apache.commons.collections4" ] ],
  "tokensProjectClassesNonPrivateStaticNonVoidMethods" : [ [ "emptyIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> emptyIterator()" ], [ "emptyListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> emptyListIterator()" ], [ "emptyOrderedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> OrderedIterator<E> emptyOrderedIterator()" ], [ "emptyMapIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <K, V> MapIterator<K, V> emptyMapIterator()" ], [ "emptyOrderedMapIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <K, V> OrderedMapIterator<K, V> emptyOrderedMapIterator()" ], [ "singletonIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> singletonIterator(final E object)" ], [ "singletonListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ListIterator<E> singletonListIterator(final E object)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final E... array)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final Object array)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final E[] array, final int start)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final Object array, final int start)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final E[] array, final int start, final int end)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final Object array, final int start, final int end)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final E... array)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final Object array)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final E[] array, final int start)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final Object array, final int start)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final E[] array, final int start, final int end)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final Object array, final int start, final int end)" ], [ "boundedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> BoundedIterator<E> boundedIterator(final Iterator<? extends E> iterator, long max)" ], [ "boundedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> BoundedIterator<E> boundedIterator(final Iterator<? extends E> iterator, long offset, long max)" ], [ "unmodifiableIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> unmodifiableIterator(final Iterator<E> iterator)" ], [ "unmodifiableListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ListIterator<E> unmodifiableListIterator(final ListIterator<E> listIterator)" ], [ "unmodifiableMapIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <K, V> MapIterator<K, V> unmodifiableMapIterator(final MapIterator<K, V> mapIterator)" ], [ "chainedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> chainedIterator(final Iterator<? extends E> iterator1, final Iterator<? extends E> iterator2)" ], [ "chainedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> chainedIterator(final Iterator<? extends E>... iterators)" ], [ "chainedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> chainedIterator(final Collection<Iterator<? extends E>> iterators)" ], [ "collatedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> collatedIterator(final Comparator<? super E> comparator, final Iterator<? extends E> iterator1, final Iterator<? extends E> iterator2)" ], [ "collatedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> collatedIterator(final Comparator<? super E> comparator, final Iterator<? extends E>... iterators)" ], [ "collatedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> collatedIterator(final Comparator<? super E> comparator, final Collection<Iterator<? extends E>> iterators)" ], [ "objectGraphIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> objectGraphIterator(final E root, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <I, O> Iterator<O> transformedIterator(final Iterator<? extends I> iterator, final Transformer<? super I, ? extends O> transform)" ], [ "filteredIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> filteredIterator(final Iterator<? extends E> iterator, final Predicate<? super E> predicate)" ], [ "filteredListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ListIterator<E> filteredListIterator(final ListIterator<? extends E> listIterator, final Predicate<? super E> predicate)" ], [ "loopingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> loopingIterator(final Collection<? extends E> coll)" ], [ "loopingListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> loopingListIterator(final List<E> list)" ], [ "nodeListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static NodeListIterator nodeListIterator(final NodeList nodeList)" ], [ "nodeListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static NodeListIterator nodeListIterator(final Node node)" ], [ "peekingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> peekingIterator(final Iterator<? extends E> iterator)" ], [ "pushbackIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> pushbackIterator(final Iterator<? extends E> iterator)" ], [ "skippingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> SkippingIterator<E> skippingIterator(final Iterator<E> iterator, long offset)" ], [ "zippingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ZippingIterator<E> zippingIterator(final Iterator<? extends E> a, final Iterator<? extends E> b)" ], [ "zippingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ZippingIterator<E> zippingIterator(final Iterator<? extends E> a, final Iterator<? extends E> b, final Iterator<? extends E> c)" ], [ "zippingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ZippingIterator<E> zippingIterator(final Iterator<? extends E>... iterators)" ], [ "asIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> asIterator(final Enumeration<? extends E> enumeration)" ], [ "asIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> asIterator(final Enumeration<? extends E> enumeration, final Collection<? super E> removeCollection)" ], [ "asEnumeration", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Enumeration<E> asEnumeration(final Iterator<? extends E> iterator)" ], [ "asIterable", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterable<E> asIterable(final Iterator<? extends E> iterator)" ], [ "asMultipleUseIterable", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterable<E> asMultipleUseIterable(final Iterator<? extends E> iterator)" ], [ "toListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ListIterator<E> toListIterator(final Iterator<? extends E> iterator)" ], [ "toArray", "org.apache.commons.collections4", "IteratorUtils", "public static Object[] toArray(final Iterator<?> iterator)" ], [ "toArray", "org.apache.commons.collections4", "IteratorUtils", "public static <E> E[] toArray(final Iterator<? extends E> iterator, final Class<E> arrayClass)" ], [ "toList", "org.apache.commons.collections4", "IteratorUtils", "public static <E> List<E> toList(final Iterator<? extends E> iterator)" ], [ "toList", "org.apache.commons.collections4", "IteratorUtils", "public static <E> List<E> toList(final Iterator<? extends E> iterator, final int estimatedSize)" ], [ "getIterator", "org.apache.commons.collections4", "IteratorUtils", "public static Iterator<?> getIterator(final Object obj)" ], [ "forEachButLast", "org.apache.commons.collections4", "IteratorUtils", "public static <E> E forEachButLast(final Iterator<E> iterator, final Closure<? super E> closure)" ], [ "find", "org.apache.commons.collections4", "IteratorUtils", "public static <E> E find(final Iterator<E> iterator, final Predicate<? super E> predicate)" ], [ "indexOf", "org.apache.commons.collections4", "IteratorUtils", "public static <E> int indexOf(final Iterator<E> iterator, final Predicate<? super E> predicate)" ], [ "matchesAny", "org.apache.commons.collections4", "IteratorUtils", "public static <E> boolean matchesAny(final Iterator<E> iterator, final Predicate<? super E> predicate)" ], [ "matchesAll", "org.apache.commons.collections4", "IteratorUtils", "public static <E> boolean matchesAll(final Iterator<E> iterator, final Predicate<? super E> predicate)" ], [ "isEmpty", "org.apache.commons.collections4", "IteratorUtils", "public static boolean isEmpty(final Iterator<?> iterator)" ], [ "contains", "org.apache.commons.collections4", "IteratorUtils", "public static <E> boolean contains(final Iterator<E> iterator, final Object object)" ], [ "get", "org.apache.commons.collections4", "IteratorUtils", "public static <E> E get(final Iterator<E> iterator, final int index)" ], [ "size", "org.apache.commons.collections4", "IteratorUtils", "public static int size(final Iterator<?> iterator)" ], [ "toString", "org.apache.commons.collections4", "IteratorUtils", "public static <E> String toString(final Iterator<E> iterator)" ], [ "toString", "org.apache.commons.collections4", "IteratorUtils", "public static <E> String toString(final Iterator<E> iterator, final Transformer<? super E, String> transformer)" ], [ "toString", "org.apache.commons.collections4", "IteratorUtils", "public static <E> String toString(final Iterator<E> iterator, final Transformer<? super E, String> transformer, final String delimiter, final String prefix, final String suffix)" ], [ "naturalComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E extends Comparable<? super E>> Comparator<E> naturalComparator()" ], [ "chainedComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> Comparator<E> chainedComparator(final Comparator<E>... comparators)" ], [ "chainedComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> Comparator<E> chainedComparator(final Collection<Comparator<E>> comparators)" ], [ "reversedComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> Comparator<E> reversedComparator(final Comparator<E> comparator)" ], [ "booleanComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static Comparator<Boolean> booleanComparator(final boolean trueFirst)" ], [ "nullLowComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> Comparator<E> nullLowComparator(Comparator<E> comparator)" ], [ "nullHighComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> Comparator<E> nullHighComparator(Comparator<E> comparator)" ], [ "transformedComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <I, O> Comparator<I> transformedComparator(Comparator<O> comparator, final Transformer<? super I, ? extends O> transformer)" ], [ "min", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> E min(final E o1, final E o2, Comparator<E> comparator)" ], [ "max", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> E max(final E o1, final E o2, Comparator<E> comparator)" ], [ "unmodifiableBidiMap", "org.apache.commons.collections4.bidimap", "UnmodifiableBidiMap", "public static <K, V> BidiMap<K, V> unmodifiableBidiMap(final BidiMap<? extends K, ? extends V> map)" ], [ "unmodifiableOrderedBidiMap", "org.apache.commons.collections4.bidimap", "UnmodifiableOrderedBidiMap", "public static <K, V> OrderedBidiMap<K, V> unmodifiableOrderedBidiMap(final OrderedBidiMap<? extends K, ? extends V> map)" ], [ "unmodifiableSortedBidiMap", "org.apache.commons.collections4.bidimap", "UnmodifiableSortedBidiMap", "public static <K, V> SortedBidiMap<K, V> unmodifiableSortedBidiMap(final SortedBidiMap<K, ? extends V> map)" ], [ "emptyMultiValuedMap", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> MultiValuedMap<K, V> emptyMultiValuedMap()" ], [ "emptyIfNull", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> MultiValuedMap<K, V> emptyIfNull(final MultiValuedMap<K, V> map)" ], [ "isEmpty", "org.apache.commons.collections4", "MultiMapUtils", "public static boolean isEmpty(final MultiValuedMap<?, ?> map)" ], [ "getCollection", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> Collection<V> getCollection(final MultiValuedMap<K, V> map, final K key)" ], [ "getValuesAsList", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> List<V> getValuesAsList(final MultiValuedMap<K, V> map, final K key)" ], [ "getValuesAsSet", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> Set<V> getValuesAsSet(final MultiValuedMap<K, V> map, final K key)" ], [ "getValuesAsBag", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> Bag<V> getValuesAsBag(final MultiValuedMap<K, V> map, final K key)" ], [ "newListValuedHashMap", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> ListValuedMap<K, V> newListValuedHashMap()" ], [ "newSetValuedHashMap", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> SetValuedMap<K, V> newSetValuedHashMap()" ], [ "unmodifiableMultiValuedMap", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> MultiValuedMap<K, V> unmodifiableMultiValuedMap(final MultiValuedMap<? extends K, ? extends V> map)" ], [ "transformedMultiValuedMap", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> MultiValuedMap<K, V> transformedMultiValuedMap(final MultiValuedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "unmodifiableBoundedCollection", "org.apache.commons.collections4.collection", "UnmodifiableBoundedCollection", "public static <E> BoundedCollection<E> unmodifiableBoundedCollection(final BoundedCollection<? extends E> coll)" ], [ "unmodifiableBoundedCollection", "org.apache.commons.collections4.collection", "UnmodifiableBoundedCollection", "public static <E> BoundedCollection<E> unmodifiableBoundedCollection(Collection<? extends E> coll)" ], [ "transformingCollection", "org.apache.commons.collections4.collection", "TransformedCollection", "public static <E> TransformedCollection<E> transformingCollection(final Collection<E> coll, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedCollection", "org.apache.commons.collections4.collection", "TransformedCollection", "public static <E> TransformedCollection<E> transformedCollection(final Collection<E> collection, final Transformer<? super E, ? extends E> transformer)" ], [ "builder", "org.apache.commons.collections4.collection", "PredicatedCollection", "public static <E> Builder<E> builder(final Predicate<? super E> predicate)" ], [ "notNullBuilder", "org.apache.commons.collections4.collection", "PredicatedCollection", "public static <E> Builder<E> notNullBuilder()" ], [ "predicatedCollection", "org.apache.commons.collections4.collection", "PredicatedCollection", "public static <T> PredicatedCollection<T> predicatedCollection(final Collection<T> coll, final Predicate<? super T> predicate)" ], [ "uniqueIndexedCollection", "org.apache.commons.collections4.collection", "IndexedCollection", "public static <K, C> IndexedCollection<K, C> uniqueIndexedCollection(final Collection<C> coll, final Transformer<C, K> keyTransformer)" ], [ "nonUniqueIndexedCollection", "org.apache.commons.collections4.collection", "IndexedCollection", "public static <K, C> IndexedCollection<K, C> nonUniqueIndexedCollection(final Collection<C> coll, final Transformer<C, K> keyTransformer)" ], [ "synchronizedCollection", "org.apache.commons.collections4.collection", "SynchronizedCollection", "public static <T> SynchronizedCollection<T> synchronizedCollection(final Collection<T> coll)" ], [ "unmodifiableCollection", "org.apache.commons.collections4.collection", "UnmodifiableCollection", "public static <T> Collection<T> unmodifiableCollection(final Collection<? extends T> coll)" ], [ "exceptionFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> exceptionFactory()" ], [ "nullFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> nullFactory()" ], [ "constantFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> constantFactory(final T constantToReturn)" ], [ "prototypeFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> prototypeFactory(final T prototype)" ], [ "instantiateFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> instantiateFactory(final Class<T> classToInstantiate)" ], [ "instantiateFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> instantiateFactory(final Class<T> classToInstantiate, final Class<?>[] paramTypes, final Object[] args)" ], [ "emptyIfNull", "org.apache.commons.collections4", "ListUtils", "public static <T> List<T> emptyIfNull(final List<T> list)" ], [ "defaultIfNull", "org.apache.commons.collections4", "ListUtils", "public static <T> List<T> defaultIfNull(final List<T> list, final List<T> defaultList)" ], [ "intersection", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> intersection(final List<? extends E> list1, final List<? extends E> list2)" ], [ "subtract", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> subtract(final List<E> list1, final List<? extends E> list2)" ], [ "sum", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> sum(final List<? extends E> list1, final List<? extends E> list2)" ], [ "union", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> union(final List<? extends E> list1, final List<? extends E> list2)" ], [ "select", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> select(final Collection<? extends E> inputCollection, final Predicate<? super E> predicate)" ], [ "selectRejected", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> selectRejected(final Collection<? extends E> inputCollection, final Predicate<? super E> predicate)" ], [ "isEqualList", "org.apache.commons.collections4", "ListUtils", "public static boolean isEqualList(final Collection<?> list1, final Collection<?> list2)" ], [ "hashCodeForList", "org.apache.commons.collections4", "ListUtils", "public static int hashCodeForList(final Collection<?> list)" ], [ "retainAll", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> retainAll(final Collection<E> collection, final Collection<?> retain)" ], [ "removeAll", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> removeAll(final Collection<E> collection, final Collection<?> remove)" ], [ "synchronizedList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> synchronizedList(final List<E> list)" ], [ "unmodifiableList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> unmodifiableList(final List<? extends E> list)" ], [ "predicatedList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> predicatedList(final List<E> list, final Predicate<E> predicate)" ], [ "transformedList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> transformedList(final List<E> list, final Transformer<? super E, ? extends E> transformer)" ], [ "lazyList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> lazyList(final List<E> list, final Factory<? extends E> factory)" ], [ "fixedSizeList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> fixedSizeList(final List<E> list)" ], [ "indexOf", "org.apache.commons.collections4", "ListUtils", "public static <E> int indexOf(final List<E> list, final Predicate<E> predicate)" ], [ "longestCommonSubsequence", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> longestCommonSubsequence(final List<E> a, final List<E> b)" ], [ "longestCommonSubsequence", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> longestCommonSubsequence(final List<E> a, final List<E> b, final Equator<? super E> equator)" ], [ "longestCommonSubsequence", "org.apache.commons.collections4", "ListUtils", "public static String longestCommonSubsequence(final CharSequence a, final CharSequence b)" ], [ "partition", "org.apache.commons.collections4", "ListUtils", "public static <T> List<List<T>> partition(final List<T> list, final int size)" ], [ "getObject", "org.apache.commons.collections4", "MapUtils", "public static <K, V> V getObject(final Map<? super K, V> map, final K key)" ], [ "getString", "org.apache.commons.collections4", "MapUtils", "public static <K> String getString(final Map<? super K, ?> map, final K key)" ], [ "getBoolean", "org.apache.commons.collections4", "MapUtils", "public static <K> Boolean getBoolean(final Map<? super K, ?> map, final K key)" ], [ "getNumber", "org.apache.commons.collections4", "MapUtils", "public static <K> Number getNumber(final Map<? super K, ?> map, final K key)" ], [ "getByte", "org.apache.commons.collections4", "MapUtils", "public static <K> Byte getByte(final Map<? super K, ?> map, final K key)" ], [ "getShort", "org.apache.commons.collections4", "MapUtils", "public static <K> Short getShort(final Map<? super K, ?> map, final K key)" ], [ "getInteger", "org.apache.commons.collections4", "MapUtils", "public static <K> Integer getInteger(final Map<? super K, ?> map, final K key)" ], [ "getLong", "org.apache.commons.collections4", "MapUtils", "public static <K> Long getLong(final Map<? super K, ?> map, final K key)" ], [ "getFloat", "org.apache.commons.collections4", "MapUtils", "public static <K> Float getFloat(final Map<? super K, ?> map, final K key)" ], [ "getDouble", "org.apache.commons.collections4", "MapUtils", "public static <K> Double getDouble(final Map<? super K, ?> map, final K key)" ], [ "getMap", "org.apache.commons.collections4", "MapUtils", "public static <K> Map<?, ?> getMap(final Map<? super K, ?> map, final K key)" ], [ "getObject", "org.apache.commons.collections4", "MapUtils", "public static <K, V> V getObject(final Map<K, V> map, final K key, final V defaultValue)" ], [ "getString", "org.apache.commons.collections4", "MapUtils", "public static <K> String getString(final Map<? super K, ?> map, final K key, final String defaultValue)" ], [ "getBoolean", "org.apache.commons.collections4", "MapUtils", "public static <K> Boolean getBoolean(final Map<? super K, ?> map, final K key, final Boolean defaultValue)" ], [ "getNumber", "org.apache.commons.collections4", "MapUtils", "public static <K> Number getNumber(final Map<? super K, ?> map, final K key, final Number defaultValue)" ], [ "getByte", "org.apache.commons.collections4", "MapUtils", "public static <K> Byte getByte(final Map<? super K, ?> map, final K key, final Byte defaultValue)" ], [ "getShort", "org.apache.commons.collections4", "MapUtils", "public static <K> Short getShort(final Map<? super K, ?> map, final K key, final Short defaultValue)" ], [ "getInteger", "org.apache.commons.collections4", "MapUtils", "public static <K> Integer getInteger(final Map<? super K, ?> map, final K key, final Integer defaultValue)" ], [ "getLong", "org.apache.commons.collections4", "MapUtils", "public static <K> Long getLong(final Map<? super K, ?> map, final K key, final Long defaultValue)" ], [ "getFloat", "org.apache.commons.collections4", "MapUtils", "public static <K> Float getFloat(final Map<? super K, ?> map, final K key, final Float defaultValue)" ], [ "getDouble", "org.apache.commons.collections4", "MapUtils", "public static <K> Double getDouble(final Map<? super K, ?> map, final K key, final Double defaultValue)" ], [ "getMap", "org.apache.commons.collections4", "MapUtils", "public static <K> Map<?, ?> getMap(final Map<? super K, ?> map, final K key, final Map<?, ?> defaultValue)" ], [ "getBooleanValue", "org.apache.commons.collections4", "MapUtils", "public static <K> boolean getBooleanValue(final Map<? super K, ?> map, final K key)" ], [ "getByteValue", "org.apache.commons.collections4", "MapUtils", "public static <K> byte getByteValue(final Map<? super K, ?> map, final K key)" ], [ "getShortValue", "org.apache.commons.collections4", "MapUtils", "public static <K> short getShortValue(final Map<? super K, ?> map, final K key)" ], [ "getIntValue", "org.apache.commons.collections4", "MapUtils", "public static <K> int getIntValue(final Map<? super K, ?> map, final K key)" ], [ "getLongValue", "org.apache.commons.collections4", "MapUtils", "public static <K> long getLongValue(final Map<? super K, ?> map, final K key)" ], [ "getFloatValue", "org.apache.commons.collections4", "MapUtils", "public static <K> float getFloatValue(final Map<? super K, ?> map, final K key)" ], [ "getDoubleValue", "org.apache.commons.collections4", "MapUtils", "public static <K> double getDoubleValue(final Map<? super K, ?> map, final K key)" ], [ "getBooleanValue", "org.apache.commons.collections4", "MapUtils", "public static <K> boolean getBooleanValue(final Map<? super K, ?> map, final K key, final boolean defaultValue)" ], [ "getByteValue", "org.apache.commons.collections4", "MapUtils", "public static <K> byte getByteValue(final Map<? super K, ?> map, final K key, final byte defaultValue)" ], [ "getShortValue", "org.apache.commons.collections4", "MapUtils", "public static <K> short getShortValue(final Map<? super K, ?> map, final K key, final short defaultValue)" ], [ "getIntValue", "org.apache.commons.collections4", "MapUtils", "public static <K> int getIntValue(final Map<? super K, ?> map, final K key, final int defaultValue)" ], [ "getLongValue", "org.apache.commons.collections4", "MapUtils", "public static <K> long getLongValue(final Map<? super K, ?> map, final K key, final long defaultValue)" ], [ "getFloatValue", "org.apache.commons.collections4", "MapUtils", "public static <K> float getFloatValue(final Map<? super K, ?> map, final K key, final float defaultValue)" ], [ "getDoubleValue", "org.apache.commons.collections4", "MapUtils", "public static <K> double getDoubleValue(final Map<? super K, ?> map, final K key, final double defaultValue)" ], [ "toProperties", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Properties toProperties(final Map<K, V> map)" ], [ "toMap", "org.apache.commons.collections4", "MapUtils", "public static Map<String, Object> toMap(final ResourceBundle resourceBundle)" ], [ "invertMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Map<V, K> invertMap(final Map<K, V> map)" ], [ "putAll", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Map<K, V> putAll(final Map<K, V> map, final Object[] array)" ], [ "emptyIfNull", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Map<K, V> emptyIfNull(final Map<K, V> map)" ], [ "isEmpty", "org.apache.commons.collections4", "MapUtils", "public static boolean isEmpty(final Map<?, ?> map)" ], [ "isNotEmpty", "org.apache.commons.collections4", "MapUtils", "public static boolean isNotEmpty(final Map<?, ?> map)" ], [ "synchronizedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Map<K, V> synchronizedMap(final Map<K, V> map)" ], [ "unmodifiableMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Map<K, V> unmodifiableMap(final Map<? extends K, ? extends V> map)" ], [ "predicatedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> predicatedMap(final Map<K, V> map, final Predicate<? super K> keyPred, final Predicate<? super V> valuePred)" ], [ "transformedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> transformedMap(final Map<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "fixedSizeMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> fixedSizeMap(final Map<K, V> map)" ], [ "lazyMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> lazyMap(final Map<K, V> map, final Factory<? extends V> factory)" ], [ "lazyMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> lazyMap(final Map<K, V> map, final Transformer<? super K, ? extends V> transformerFactory)" ], [ "orderedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> OrderedMap<K, V> orderedMap(final Map<K, V> map)" ], [ "multiValueMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> MultiValueMap<K, V> multiValueMap(final Map<K, ? super Collection<V>> map)" ], [ "multiValueMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V, C extends Collection<V>> MultiValueMap<K, V> multiValueMap(final Map<K, C> map, final Class<C> collectionClass)" ], [ "multiValueMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V, C extends Collection<V>> MultiValueMap<K, V> multiValueMap(final Map<K, C> map, final Factory<C> collectionFactory)" ], [ "synchronizedSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> synchronizedSortedMap(final SortedMap<K, V> map)" ], [ "unmodifiableSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> unmodifiableSortedMap(final SortedMap<K, ? extends V> map)" ], [ "predicatedSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> predicatedSortedMap(final SortedMap<K, V> map, final Predicate<? super K> keyPred, final Predicate<? super V> valuePred)" ], [ "transformedSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> transformedSortedMap(final SortedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "fixedSizeSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> fixedSizeSortedMap(final SortedMap<K, V> map)" ], [ "lazySortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> lazySortedMap(final SortedMap<K, V> map, final Factory<? extends V> factory)" ], [ "lazySortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> lazySortedMap(final SortedMap<K, V> map, final Transformer<? super K, ? extends V> transformerFactory)" ], [ "iterableMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> iterableMap(final Map<K, V> map)" ], [ "iterableSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableSortedMap<K, V> iterableSortedMap(final SortedMap<K, V> sortedMap)" ], [ "defaultEquator", "org.apache.commons.collections4.functors", "DefaultEquator", "public static <T> DefaultEquator<T> defaultEquator()" ], [ "stringValueTransformer", "org.apache.commons.collections4.functors", "StringValueTransformer", "public static <T> Transformer<T, String> stringValueTransformer()" ], [ "ifTransformer", "org.apache.commons.collections4.functors", "IfTransformer", "public static <I, O> Transformer<I, O> ifTransformer(final Predicate<? super I> predicate, final Transformer<? super I, ? extends O> trueTransformer, final Transformer<? super I, ? extends O> falseTransformer)" ], [ "ifTransformer", "org.apache.commons.collections4.functors", "IfTransformer", "public static <T> Transformer<T, T> ifTransformer(final Predicate<? super T> predicate, final Transformer<? super T, ? extends T> trueTransformer)" ], [ "identityPredicate", "org.apache.commons.collections4.functors", "IdentityPredicate", "public static <T> Predicate<T> identityPredicate(final T object)" ], [ "exceptionClosure", "org.apache.commons.collections4.functors", "ExceptionClosure", "public static <E> Closure<E> exceptionClosure()" ], [ "nopClosure", "org.apache.commons.collections4.functors", "NOPClosure", "public static <E> Closure<E> nopClosure()" ], [ "closureTransformer", "org.apache.commons.collections4.functors", "ClosureTransformer", "public static <T> Transformer<T, T> closureTransformer(final Closure<? super T> closure)" ], [ "copy", "org.apache.commons.collections4.functors", "FunctorUtils", "static <T> Predicate<T>[] copy(final Predicate<? super T>... predicates)" ], [ "coerce", "org.apache.commons.collections4.functors", "FunctorUtils", "static <T> Predicate<T> coerce(final Predicate<? super T> predicate)" ], [ "validate", "org.apache.commons.collections4.functors", "FunctorUtils", "static <T> Predicate<? super T>[] validate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "copy", "org.apache.commons.collections4.functors", "FunctorUtils", "static <E> Closure<E>[] copy(final Closure<? super E>... closures)" ], [ "coerce", "org.apache.commons.collections4.functors", "FunctorUtils", "static <T> Closure<T> coerce(final Closure<? super T> closure)" ], [ "copy", "org.apache.commons.collections4.functors", "FunctorUtils", "static <I, O> Transformer<I, O>[] copy(final Transformer<? super I, ? extends O>... transformers)" ], [ "coerce", "org.apache.commons.collections4.functors", "FunctorUtils", "static <I, O> Transformer<I, O> coerce(final Transformer<? super I, ? extends O> transformer)" ], [ "transformerPredicate", "org.apache.commons.collections4.functors", "TransformerPredicate", "public static <T> Predicate<T> transformerPredicate(final Transformer<? super T, Boolean> transformer)" ], [ "nullPredicate", "org.apache.commons.collections4.functors", "NullPredicate", "public static <T> Predicate<T> nullPredicate()" ], [ "nullTransformer", "org.apache.commons.collections4.functors", "ConstantTransformer", "public static <I, O> Transformer<I, O> nullTransformer()" ], [ "constantTransformer", "org.apache.commons.collections4.functors", "ConstantTransformer", "public static <I, O> Transformer<I, O> constantTransformer(final O constantToReturn)" ], [ "predicateTransformer", "org.apache.commons.collections4.functors", "PredicateTransformer", "public static <T> Transformer<T, Boolean> predicateTransformer(final Predicate<? super T> predicate)" ], [ "whileClosure", "org.apache.commons.collections4.functors", "WhileClosure", "public static <E> Closure<E> whileClosure(final Predicate<? super E> predicate, final Closure<? super E> closure, final boolean doLoop)" ], [ "forClosure", "org.apache.commons.collections4.functors", "ForClosure", "public static <E> Closure<E> forClosure(final int count, final Closure<? super E> closure)" ], [ "nullIsTruePredicate", "org.apache.commons.collections4.functors", "NullIsTruePredicate", "public static <T> Predicate<T> nullIsTruePredicate(final Predicate<? super T> predicate)" ], [ "transformedPredicate", "org.apache.commons.collections4.functors", "TransformedPredicate", "public static <T> Predicate<T> transformedPredicate(final Transformer<? super T, ? extends T> transformer, final Predicate<? super T> predicate)" ], [ "nonePredicate", "org.apache.commons.collections4.functors", "NonePredicate", "public static <T> Predicate<T> nonePredicate(final Predicate<? super T>... predicates)" ], [ "nonePredicate", "org.apache.commons.collections4.functors", "NonePredicate", "public static <T> Predicate<T> nonePredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "exceptionTransformer", "org.apache.commons.collections4.functors", "ExceptionTransformer", "public static <I, O> Transformer<I, O> exceptionTransformer()" ], [ "switchTransformer", "org.apache.commons.collections4.functors", "SwitchTransformer", "public static <I, O> Transformer<I, O> switchTransformer(final Predicate<? super I>[] predicates, final Transformer<? super I, ? extends O>[] transformers, final Transformer<? super I, ? extends O> defaultTransformer)" ], [ "switchTransformer", "org.apache.commons.collections4.functors", "SwitchTransformer", "public static <I, O> Transformer<I, O> switchTransformer(final Map<? extends Predicate<? super I>, ? extends Transformer<? super I, ? extends O>> map)" ], [ "transformerClosure", "org.apache.commons.collections4.functors", "TransformerClosure", "public static <E> Closure<E> transformerClosure(final Transformer<? super E, ?> transformer)" ], [ "orPredicate", "org.apache.commons.collections4.functors", "OrPredicate", "public static <T> Predicate<T> orPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "nopTransformer", "org.apache.commons.collections4.functors", "NOPTransformer", "public static <T> Transformer<T, T> nopTransformer()" ], [ "mapTransformer", "org.apache.commons.collections4.functors", "MapTransformer", "public static <I, O> Transformer<I, O> mapTransformer(final Map<? super I, ? extends O> map)" ], [ "exceptionFactory", "org.apache.commons.collections4.functors", "ExceptionFactory", "public static <T> Factory<T> exceptionFactory()" ], [ "chainedClosure", "org.apache.commons.collections4.functors", "ChainedClosure", "public static <E> Closure<E> chainedClosure(final Closure<? super E>... closures)" ], [ "chainedClosure", "org.apache.commons.collections4.functors", "ChainedClosure", "public static <E> Closure<E> chainedClosure(final Collection<? extends Closure<? super E>> closures)" ], [ "andPredicate", "org.apache.commons.collections4.functors", "AndPredicate", "public static <T> Predicate<T> andPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "prototypeFactory", "org.apache.commons.collections4.functors", "PrototypeFactory", "public static <T> Factory<T> prototypeFactory(final T prototype)" ], [ "exceptionPredicate", "org.apache.commons.collections4.functors", "ExceptionPredicate", "public static <T> Predicate<T> exceptionPredicate()" ], [ "instanceOfPredicate", "org.apache.commons.collections4.functors", "InstanceofPredicate", "public static Predicate<Object> instanceOfPredicate(final Class<?> type)" ], [ "invokerTransformer", "org.apache.commons.collections4.functors", "InvokerTransformer", "public static <I, O> Transformer<I, O> invokerTransformer(final String methodName)" ], [ "invokerTransformer", "org.apache.commons.collections4.functors", "InvokerTransformer", "public static <I, O> Transformer<I, O> invokerTransformer(final String methodName, final Class<?>[] paramTypes, final Object[] args)" ], [ "falsePredicate", "org.apache.commons.collections4.functors", "FalsePredicate", "public static <T> Predicate<T> falsePredicate()" ], [ "cloneTransformer", "org.apache.commons.collections4.functors", "CloneTransformer", "public static <T> Transformer<T, T> cloneTransformer()" ], [ "notPredicate", "org.apache.commons.collections4.functors", "NotPredicate", "public static <T> Predicate<T> notPredicate(final Predicate<? super T> predicate)" ], [ "constantFactory", "org.apache.commons.collections4.functors", "ConstantFactory", "public static <T> Factory<T> constantFactory(final T constantToReturn)" ], [ "chainedTransformer", "org.apache.commons.collections4.functors", "ChainedTransformer", "public static <T> Transformer<T, T> chainedTransformer(final Transformer<? super T, ? extends T>... transformers)" ], [ "chainedTransformer", "org.apache.commons.collections4.functors", "ChainedTransformer", "public static <T> Transformer<T, T> chainedTransformer(final Collection<? extends Transformer<? super T, ? extends T>> transformers)" ], [ "comparatorPredicate", "org.apache.commons.collections4.functors", "ComparatorPredicate", "public static <T> Predicate<T> comparatorPredicate(final T object, final Comparator<T> comparator)" ], [ "comparatorPredicate", "org.apache.commons.collections4.functors", "ComparatorPredicate", "public static <T> Predicate<T> comparatorPredicate(final T object, final Comparator<T> comparator, final Criterion criterion)" ], [ "allPredicate", "org.apache.commons.collections4.functors", "AllPredicate", "public static <T> Predicate<T> allPredicate(final Predicate<? super T>... predicates)" ], [ "allPredicate", "org.apache.commons.collections4.functors", "AllPredicate", "public static <T> Predicate<T> allPredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "nullIsFalsePredicate", "org.apache.commons.collections4.functors", "NullIsFalsePredicate", "public static <T> Predicate<T> nullIsFalsePredicate(final Predicate<? super T> predicate)" ], [ "nullIsExceptionPredicate", "org.apache.commons.collections4.functors", "NullIsExceptionPredicate", "public static <T> Predicate<T> nullIsExceptionPredicate(final Predicate<? super T> predicate)" ], [ "anyPredicate", "org.apache.commons.collections4.functors", "AnyPredicate", "public static <T> Predicate<T> anyPredicate(final Predicate<? super T>... predicates)" ], [ "anyPredicate", "org.apache.commons.collections4.functors", "AnyPredicate", "public static <T> Predicate<T> anyPredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "truePredicate", "org.apache.commons.collections4.functors", "TruePredicate", "public static <T> Predicate<T> truePredicate()" ], [ "factoryTransformer", "org.apache.commons.collections4.functors", "FactoryTransformer", "public static <I, O> Transformer<I, O> factoryTransformer(final Factory<? extends O> factory)" ], [ "notNullPredicate", "org.apache.commons.collections4.functors", "NotNullPredicate", "public static <T> Predicate<T> notNullPredicate()" ], [ "switchClosure", "org.apache.commons.collections4.functors", "SwitchClosure", "public static <E> Closure<E> switchClosure(final Predicate<? super E>[] predicates, final Closure<? super E>[] closures, final Closure<? super E> defaultClosure)" ], [ "switchClosure", "org.apache.commons.collections4.functors", "SwitchClosure", "public static <E> Closure<E> switchClosure(final Map<Predicate<E>, Closure<E>> predicatesAndClosures)" ], [ "uniquePredicate", "org.apache.commons.collections4.functors", "UniquePredicate", "public static <T> Predicate<T> uniquePredicate()" ], [ "instantiateTransformer", "org.apache.commons.collections4.functors", "InstantiateTransformer", "public static <T> Transformer<Class<? extends T>, T> instantiateTransformer()" ], [ "instantiateTransformer", "org.apache.commons.collections4.functors", "InstantiateTransformer", "public static <T> Transformer<Class<? extends T>, T> instantiateTransformer(final Class<?>[] paramTypes, final Object[] args)" ], [ "onePredicate", "org.apache.commons.collections4.functors", "OnePredicate", "public static <T> Predicate<T> onePredicate(final Predicate<? super T>... predicates)" ], [ "onePredicate", "org.apache.commons.collections4.functors", "OnePredicate", "public static <T> Predicate<T> onePredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "equalPredicate", "org.apache.commons.collections4.functors", "EqualPredicate", "public static <T> Predicate<T> equalPredicate(final T object)" ], [ "equalPredicate", "org.apache.commons.collections4.functors", "EqualPredicate", "public static <T> Predicate<T> equalPredicate(final T object, final Equator<T> equator)" ], [ "instantiateFactory", "org.apache.commons.collections4.functors", "InstantiateFactory", "public static <T> Factory<T> instantiateFactory(final Class<T> classToInstantiate, final Class<?>[] paramTypes, final Object[] args)" ], [ "ifClosure", "org.apache.commons.collections4.functors", "IfClosure", "public static <E> Closure<E> ifClosure(final Predicate<? super E> predicate, final Closure<? super E> trueClosure)" ], [ "ifClosure", "org.apache.commons.collections4.functors", "IfClosure", "public static <E> Closure<E> ifClosure(final Predicate<? super E> predicate, final Closure<? super E> trueClosure, final Closure<? super E> falseClosure)" ], [ "getTrueFirstComparator", "org.apache.commons.collections4.comparators", "BooleanComparator", "public static BooleanComparator getTrueFirstComparator()" ], [ "getFalseFirstComparator", "org.apache.commons.collections4.comparators", "BooleanComparator", "public static BooleanComparator getFalseFirstComparator()" ], [ "booleanComparator", "org.apache.commons.collections4.comparators", "BooleanComparator", "public static BooleanComparator booleanComparator(final boolean trueFirst)" ], [ "comparableComparator", "org.apache.commons.collections4.comparators", "ComparableComparator", "public static <E extends Comparable<? super E>> ComparableComparator<E> comparableComparator()" ], [ "emptyCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <T> Collection<T> emptyCollection()" ], [ "emptyIfNull", "org.apache.commons.collections4", "CollectionUtils", "public static <T> Collection<T> emptyIfNull(final Collection<T> collection)" ], [ "union", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> union(final Iterable<? extends O> a, final Iterable<? extends O> b)" ], [ "intersection", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> intersection(final Iterable<? extends O> a, final Iterable<? extends O> b)" ], [ "disjunction", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> disjunction(final Iterable<? extends O> a, final Iterable<? extends O> b)" ], [ "subtract", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> subtract(final Iterable<? extends O> a, final Iterable<? extends O> b)" ], [ "subtract", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> subtract(final Iterable<? extends O> a, final Iterable<? extends O> b, final Predicate<O> p)" ], [ "containsAll", "org.apache.commons.collections4", "CollectionUtils", "public static boolean containsAll(final Collection<?> coll1, final Collection<?> coll2)" ], [ "containsAny", "org.apache.commons.collections4", "CollectionUtils", "public static boolean containsAny(final Collection<?> coll1, final Collection<?> coll2)" ], [ "getCardinalityMap", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Map<O, Integer> getCardinalityMap(final Iterable<? extends O> coll)" ], [ "isSubCollection", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isSubCollection(final Collection<?> a, final Collection<?> b)" ], [ "isProperSubCollection", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isProperSubCollection(final Collection<?> a, final Collection<?> b)" ], [ "isEqualCollection", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isEqualCollection(final Collection<?> a, final Collection<?> b)" ], [ "isEqualCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <E> boolean isEqualCollection(final Collection<? extends E> a, final Collection<? extends E> b, final Equator<? super E> equator)" ], [ "cardinality", "org.apache.commons.collections4", "CollectionUtils", "public static <O> int cardinality(final O obj, final Iterable<? super O> coll)" ], [ "find", "org.apache.commons.collections4", "CollectionUtils", "public static <T> T find(final Iterable<T> collection, final Predicate<? super T> predicate)" ], [ "forAllDo", "org.apache.commons.collections4", "CollectionUtils", "public static <T, C extends Closure<? super T>> C forAllDo(final Iterable<T> collection, final C closure)" ], [ "forAllDo", "org.apache.commons.collections4", "CollectionUtils", "public static <T, C extends Closure<? super T>> C forAllDo(final Iterator<T> iterator, final C closure)" ], [ "forAllButLastDo", "org.apache.commons.collections4", "CollectionUtils", "public static <T, C extends Closure<? super T>> T forAllButLastDo(final Iterable<T> collection, final C closure)" ], [ "forAllButLastDo", "org.apache.commons.collections4", "CollectionUtils", "public static <T, C extends Closure<? super T>> T forAllButLastDo(final Iterator<T> iterator, final C closure)" ], [ "filter", "org.apache.commons.collections4", "CollectionUtils", "public static <T> boolean filter(final Iterable<T> collection, final Predicate<? super T> predicate)" ], [ "filterInverse", "org.apache.commons.collections4", "CollectionUtils", "public static <T> boolean filterInverse(final Iterable<T> collection, final Predicate<? super T> predicate)" ], [ "countMatches", "org.apache.commons.collections4", "CollectionUtils", "public static <C> int countMatches(final Iterable<C> input, final Predicate<? super C> predicate)" ], [ "exists", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean exists(final Iterable<C> input, final Predicate<? super C> predicate)" ], [ "matchesAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean matchesAll(final Iterable<C> input, final Predicate<? super C> predicate)" ], [ "select", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> select(final Iterable<? extends O> inputCollection, final Predicate<? super O> predicate)" ], [ "select", "org.apache.commons.collections4", "CollectionUtils", "public static <O, R extends Collection<? super O>> R select(final Iterable<? extends O> inputCollection, final Predicate<? super O> predicate, final R outputCollection)" ], [ "select", "org.apache.commons.collections4", "CollectionUtils", "public static <O, R extends Collection<? super O>> R select(final Iterable<? extends O> inputCollection, final Predicate<? super O> predicate, R outputCollection, R rejectedCollection)" ], [ "selectRejected", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> selectRejected(final Iterable<? extends O> inputCollection, final Predicate<? super O> predicate)" ], [ "selectRejected", "org.apache.commons.collections4", "CollectionUtils", "public static <O, R extends Collection<? super O>> R selectRejected(final Iterable<? extends O> inputCollection, final Predicate<? super O> predicate, final R outputCollection)" ], [ "collect", "org.apache.commons.collections4", "CollectionUtils", "public static <I, O> Collection<O> collect(final Iterable<I> inputCollection, final Transformer<? super I, ? extends O> transformer)" ], [ "collect", "org.apache.commons.collections4", "CollectionUtils", "public static <I, O> Collection<O> collect(final Iterator<I> inputIterator, final Transformer<? super I, ? extends O> transformer)" ], [ "collect", "org.apache.commons.collections4", "CollectionUtils", "public static <I, O, R extends Collection<? super O>> R collect(final Iterable<? extends I> inputCollection, final Transformer<? super I, ? extends O> transformer, final R outputCollection)" ], [ "collect", "org.apache.commons.collections4", "CollectionUtils", "public static <I, O, R extends Collection<? super O>> R collect(final Iterator<? extends I> inputIterator, final Transformer<? super I, ? extends O> transformer, final R outputCollection)" ], [ "addIgnoreNull", "org.apache.commons.collections4", "CollectionUtils", "public static <T> boolean addIgnoreNull(final Collection<T> collection, final T object)" ], [ "addAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean addAll(final Collection<C> collection, final Iterable<? extends C> iterable)" ], [ "addAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean addAll(final Collection<C> collection, final Iterator<? extends C> iterator)" ], [ "addAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean addAll(final Collection<C> collection, final Enumeration<? extends C> enumeration)" ], [ "addAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean addAll(final Collection<C> collection, final C[] elements)" ], [ "get", "org.apache.commons.collections4", "CollectionUtils", "public static <T> T get(final Iterator<T> iterator, final int index)" ], [ "get", "org.apache.commons.collections4", "CollectionUtils", "public static <T> T get(final Iterable<T> iterable, final int index)" ], [ "get", "org.apache.commons.collections4", "CollectionUtils", "public static Object get(final Object object, final int index)" ], [ "get", "org.apache.commons.collections4", "CollectionUtils", "public static <K, V> Map.Entry<K, V> get(final Map<K, V> map, final int index)" ], [ "size", "org.apache.commons.collections4", "CollectionUtils", "public static int size(final Object object)" ], [ "sizeIsEmpty", "org.apache.commons.collections4", "CollectionUtils", "public static boolean sizeIsEmpty(final Object object)" ], [ "isEmpty", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isEmpty(final Collection<?> coll)" ], [ "isNotEmpty", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isNotEmpty(final Collection<?> coll)" ], [ "isFull", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isFull(final Collection<? extends Object> coll)" ], [ "maxSize", "org.apache.commons.collections4", "CollectionUtils", "public static int maxSize(final Collection<? extends Object> coll)" ], [ "collate", "org.apache.commons.collections4", "CollectionUtils", "public static <O extends Comparable<? super O>> List<O> collate(Iterable<? extends O> a, Iterable<? extends O> b)" ], [ "collate", "org.apache.commons.collections4", "CollectionUtils", "public static <O extends Comparable<? super O>> List<O> collate(final Iterable<? extends O> a, final Iterable<? extends O> b, final boolean includeDuplicates)" ], [ "collate", "org.apache.commons.collections4", "CollectionUtils", "public static <O> List<O> collate(final Iterable<? extends O> a, final Iterable<? extends O> b, final Comparator<? super O> c)" ], [ "collate", "org.apache.commons.collections4", "CollectionUtils", "public static <O> List<O> collate(final Iterable<? extends O> a, final Iterable<? extends O> b, final Comparator<? super O> c, final boolean includeDuplicates)" ], [ "permutations", "org.apache.commons.collections4", "CollectionUtils", "public static <E> Collection<List<E>> permutations(final Collection<E> collection)" ], [ "retainAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> Collection<C> retainAll(final Collection<C> collection, final Collection<?> retain)" ], [ "retainAll", "org.apache.commons.collections4", "CollectionUtils", "public static <E> Collection<E> retainAll(final Iterable<E> collection, final Iterable<? extends E> retain, final Equator<? super E> equator)" ], [ "removeAll", "org.apache.commons.collections4", "CollectionUtils", "public static <E> Collection<E> removeAll(final Collection<E> collection, final Collection<?> remove)" ], [ "removeAll", "org.apache.commons.collections4", "CollectionUtils", "public static <E> Collection<E> removeAll(final Iterable<E> collection, final Iterable<? extends E> remove, final Equator<? super E> equator)" ], [ "synchronizedCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <C> Collection<C> synchronizedCollection(final Collection<C> collection)" ], [ "unmodifiableCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <C> Collection<C> unmodifiableCollection(final Collection<? extends C> collection)" ], [ "predicatedCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <C> Collection<C> predicatedCollection(final Collection<C> collection, final Predicate<? super C> predicate)" ], [ "transformingCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <E> Collection<E> transformingCollection(final Collection<E> collection, final Transformer<? super E, ? extends E> transformer)" ], [ "extractSingleton", "org.apache.commons.collections4", "CollectionUtils", "public static <E> E extractSingleton(final Collection<E> collection)" ], [ "transformingMap", "org.apache.commons.collections4.splitmap", "TransformedSplitMap", "public static <J, K, U, V> TransformedSplitMap<J, K, U, V> transformingMap(final Map<K, V> map, final Transformer<? super J, ? extends K> keyTransformer, final Transformer<? super U, ? extends V> valueTransformer)" ], [ "emptyIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> emptyIterable()" ], [ "chainedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> chainedIterable(final Iterable<? extends E> a, final Iterable<? extends E> b)" ], [ "chainedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> chainedIterable(final Iterable<? extends E> a, final Iterable<? extends E> b, final Iterable<? extends E> c)" ], [ "chainedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> chainedIterable(final Iterable<? extends E> a, final Iterable<? extends E> b, final Iterable<? extends E> c, final Iterable<? extends E> d)" ], [ "chainedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> chainedIterable(final Iterable<? extends E>... iterables)" ], [ "collatedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> collatedIterable(final Iterable<? extends E> a, final Iterable<? extends E> b)" ], [ "collatedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> collatedIterable(final Comparator<? super E> comparator, final Iterable<? extends E> a, final Iterable<? extends E> b)" ], [ "filteredIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> filteredIterable(final Iterable<E> iterable, final Predicate<? super E> predicate)" ], [ "boundedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> boundedIterable(final Iterable<E> iterable, final long maxSize)" ], [ "loopingIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> loopingIterable(final Iterable<E> iterable)" ], [ "reversedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> reversedIterable(final Iterable<E> iterable)" ], [ "skippingIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> skippingIterable(final Iterable<E> iterable, final long elementsToSkip)" ], [ "transformedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <I, O> Iterable<O> transformedIterable(final Iterable<I> iterable, final Transformer<? super I, ? extends O> transformer)" ], [ "uniqueIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> uniqueIterable(final Iterable<E> iterable)" ], [ "unmodifiableIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> unmodifiableIterable(final Iterable<E> iterable)" ], [ "zippingIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> zippingIterable(final Iterable<? extends E> a, final Iterable<? extends E> b)" ], [ "zippingIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> zippingIterable(final Iterable<? extends E> first, final Iterable<? extends E>... others)" ], [ "emptyIfNull", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> emptyIfNull(final Iterable<E> iterable)" ], [ "forEachButLast", "org.apache.commons.collections4", "IterableUtils", "public static <E> E forEachButLast(final Iterable<E> iterable, final Closure<? super E> closure)" ], [ "find", "org.apache.commons.collections4", "IterableUtils", "public static <E> E find(final Iterable<E> iterable, final Predicate<? super E> predicate)" ], [ "indexOf", "org.apache.commons.collections4", "IterableUtils", "public static <E> int indexOf(final Iterable<E> iterable, final Predicate<? super E> predicate)" ], [ "matchesAll", "org.apache.commons.collections4", "IterableUtils", "public static <E> boolean matchesAll(final Iterable<E> iterable, final Predicate<? super E> predicate)" ], [ "matchesAny", "org.apache.commons.collections4", "IterableUtils", "public static <E> boolean matchesAny(final Iterable<E> iterable, final Predicate<? super E> predicate)" ], [ "countMatches", "org.apache.commons.collections4", "IterableUtils", "public static <E> long countMatches(final Iterable<E> input, final Predicate<? super E> predicate)" ], [ "isEmpty", "org.apache.commons.collections4", "IterableUtils", "public static boolean isEmpty(final Iterable<?> iterable)" ], [ "contains", "org.apache.commons.collections4", "IterableUtils", "public static <E> boolean contains(final Iterable<E> iterable, final Object object)" ], [ "contains", "org.apache.commons.collections4", "IterableUtils", "public static <E> boolean contains(final Iterable<? extends E> iterable, final E object, final Equator<? super E> equator)" ], [ "frequency", "org.apache.commons.collections4", "IterableUtils", "public static <E, T extends E> int frequency(final Iterable<E> iterable, final T obj)" ], [ "get", "org.apache.commons.collections4", "IterableUtils", "public static <T> T get(final Iterable<T> iterable, final int index)" ], [ "size", "org.apache.commons.collections4", "IterableUtils", "public static int size(final Iterable<?> iterable)" ], [ "partition", "org.apache.commons.collections4", "IterableUtils", "public static <O> List<List<O>> partition(final Iterable<? extends O> iterable, final Predicate<? super O> predicate)" ], [ "partition", "org.apache.commons.collections4", "IterableUtils", "public static <O> List<List<O>> partition(final Iterable<? extends O> iterable, final Predicate<? super O>... predicates)" ], [ "partition", "org.apache.commons.collections4", "IterableUtils", "public static <O, R extends Collection<O>> List<R> partition(final Iterable<? extends O> iterable, final Factory<R> partitionFactory, final Predicate<? super O>... predicates)" ], [ "toList", "org.apache.commons.collections4", "IterableUtils", "public static <E> List<E> toList(final Iterable<E> iterable)" ], [ "toString", "org.apache.commons.collections4", "IterableUtils", "public static <E> String toString(final Iterable<E> iterable)" ], [ "toString", "org.apache.commons.collections4", "IterableUtils", "public static <E> String toString(final Iterable<E> iterable, final Transformer<? super E, String> transformer)" ], [ "toString", "org.apache.commons.collections4", "IterableUtils", "public static <E> String toString(final Iterable<E> iterable, final Transformer<? super E, String> transformer, final String delimiter, final String prefix, final String suffix)" ], [ "unmodifiableTrie", "org.apache.commons.collections4", "TrieUtils", "public static <K, V> Trie<K, V> unmodifiableTrie(final Trie<K, ? extends V> trie)" ], [ "exceptionClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> exceptionClosure()" ], [ "nopClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> nopClosure()" ], [ "asClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> asClosure(final Transformer<? super E, ?> transformer)" ], [ "forClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> forClosure(final int count, final Closure<? super E> closure)" ], [ "whileClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> whileClosure(final Predicate<? super E> predicate, final Closure<? super E> closure)" ], [ "doWhileClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> doWhileClosure(final Closure<? super E> closure, final Predicate<? super E> predicate)" ], [ "invokerClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> invokerClosure(final String methodName)" ], [ "invokerClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> invokerClosure(final String methodName, final Class<?>[] paramTypes, final Object[] args)" ], [ "chainedClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> chainedClosure(final Closure<? super E>... closures)" ], [ "chainedClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> chainedClosure(final Collection<? extends Closure<? super E>> closures)" ], [ "ifClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> ifClosure(final Predicate<? super E> predicate, final Closure<? super E> trueClosure)" ], [ "ifClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> ifClosure(final Predicate<? super E> predicate, final Closure<? super E> trueClosure, final Closure<? super E> falseClosure)" ], [ "switchClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> switchClosure(final Predicate<? super E>[] predicates, final Closure<? super E>[] closures)" ], [ "switchClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> switchClosure(final Predicate<? super E>[] predicates, final Closure<? super E>[] closures, final Closure<? super E> defaultClosure)" ], [ "switchClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> switchClosure(final Map<Predicate<E>, Closure<E>> predicatesAndClosures)" ], [ "switchMapClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> switchMapClosure(final Map<? extends E, Closure<E>> objectsAndClosures)" ], [ "unmodifiableTrie", "org.apache.commons.collections4.trie", "UnmodifiableTrie", "public static <K, V> Trie<K, V> unmodifiableTrie(final Trie<K, ? extends V> trie)" ], [ "isOutOfBoundsIndex", "org.apache.commons.collections4.trie", "KeyAnalyzer", "static boolean isOutOfBoundsIndex(final int bitIndex)" ], [ "isEqualBitKey", "org.apache.commons.collections4.trie", "KeyAnalyzer", "static boolean isEqualBitKey(final int bitIndex)" ], [ "isNullBitKey", "org.apache.commons.collections4.trie", "KeyAnalyzer", "static boolean isNullBitKey(final int bitIndex)" ], [ "isValidBitIndex", "org.apache.commons.collections4.trie", "KeyAnalyzer", "static boolean isValidBitIndex(final int bitIndex)" ], [ "isValidUplink", "org.apache.commons.collections4.trie", "AbstractPatriciaTrie", "static boolean isValidUplink(final TrieEntry<?, ?> next, final TrieEntry<?, ?> from)" ], [ "compare", "org.apache.commons.collections4.trie", "AbstractBitwiseTrie", "static boolean compare(final Object a, final Object b)" ], [ "transformingSortedMap", "org.apache.commons.collections4.map", "TransformedSortedMap", "public static <K, V> TransformedSortedMap<K, V> transformingSortedMap(final SortedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "transformedSortedMap", "org.apache.commons.collections4.map", "TransformedSortedMap", "public static <K, V> TransformedSortedMap<K, V> transformedSortedMap(final SortedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "predicatedMap", "org.apache.commons.collections4.map", "PredicatedMap", "public static <K, V> PredicatedMap<K, V> predicatedMap(final Map<K, V> map, final Predicate<? super K> keyPredicate, final Predicate<? super V> valuePredicate)" ], [ "fixedSizeSortedMap", "org.apache.commons.collections4.map", "FixedSizeSortedMap", "public static <K, V> FixedSizeSortedMap<K, V> fixedSizeSortedMap(final SortedMap<K, V> map)" ], [ "unmodifiableSortedMap", "org.apache.commons.collections4.map", "UnmodifiableSortedMap", "public static <K, V> SortedMap<K, V> unmodifiableSortedMap(final SortedMap<K, ? extends V> map)" ], [ "predicatedSortedMap", "org.apache.commons.collections4.map", "PredicatedSortedMap", "public static <K, V> PredicatedSortedMap<K, V> predicatedSortedMap(final SortedMap<K, V> map, final Predicate<? super K> keyPredicate, final Predicate<? super V> valuePredicate)" ], [ "defaultedMap", "org.apache.commons.collections4.map", "DefaultedMap", "public static <K, V> DefaultedMap<K, V> defaultedMap(final Map<K, V> map, final V defaultValue)" ], [ "defaultedMap", "org.apache.commons.collections4.map", "DefaultedMap", "public static <K, V> DefaultedMap<K, V> defaultedMap(final Map<K, V> map, final Factory<? extends V> factory)" ], [ "defaultedMap", "org.apache.commons.collections4.map", "DefaultedMap", "public static <K, V> Map<K, V> defaultedMap(final Map<K, V> map, final Transformer<? super K, ? extends V> transformer)" ], [ "fixedSizeMap", "org.apache.commons.collections4.map", "FixedSizeMap", "public static <K, V> FixedSizeMap<K, V> fixedSizeMap(final Map<K, V> map)" ], [ "lazySortedMap", "org.apache.commons.collections4.map", "LazySortedMap", "public static <K, V> LazySortedMap<K, V> lazySortedMap(final SortedMap<K, V> map, final Factory<? extends V> factory)" ], [ "lazySortedMap", "org.apache.commons.collections4.map", "LazySortedMap", "public static <K, V> LazySortedMap<K, V> lazySortedMap(final SortedMap<K, V> map, final Transformer<? super K, ? extends V> factory)" ], [ "unmodifiableOrderedMap", "org.apache.commons.collections4.map", "UnmodifiableOrderedMap", "public static <K, V> OrderedMap<K, V> unmodifiableOrderedMap(final OrderedMap<? extends K, ? extends V> map)" ], [ "unmodifiableMap", "org.apache.commons.collections4.map", "UnmodifiableMap", "public static <K, V> Map<K, V> unmodifiableMap(final Map<? extends K, ? extends V> map)" ], [ "listOrderedMap", "org.apache.commons.collections4.map", "ListOrderedMap", "public static <K, V> ListOrderedMap<K, V> listOrderedMap(final Map<K, V> map)" ], [ "unmodifiableEntrySet", "org.apache.commons.collections4.map", "UnmodifiableEntrySet", "public static <K, V> Set<Map.Entry<K, V>> unmodifiableEntrySet(final Set<Map.Entry<K, V>> set)" ], [ "resolve", "org.apache.commons.collections4.map", "AbstractReferenceMap", "public static ReferenceStrength resolve(final int value)" ], [ "resolve", "org.apache.commons.collections4.map", "ReferenceStrength", "public static ReferenceStrength resolve(final int value)" ], [ "multiKeyMap", "org.apache.commons.collections4.map", "MultiKeyMap", "public static <K, V> MultiKeyMap<K, V> multiKeyMap(final AbstractHashedMap<MultiKey<? extends K>, V> map)" ], [ "lazyMap", "org.apache.commons.collections4.map", "LazyMap", "public static <K, V> LazyMap<K, V> lazyMap(final Map<K, V> map, final Factory<? extends V> factory)" ], [ "lazyMap", "org.apache.commons.collections4.map", "LazyMap", "public static <V, K> LazyMap<K, V> lazyMap(final Map<K, V> map, final Transformer<? super K, ? extends V> factory)" ], [ "multiValueMap", "org.apache.commons.collections4.map", "MultiValueMap", "public static <K, V> MultiValueMap<K, V> multiValueMap(final Map<K, ? super Collection<V>> map)" ], [ "multiValueMap", "org.apache.commons.collections4.map", "MultiValueMap", "public static <K, V, C extends Collection<V>> MultiValueMap<K, V> multiValueMap(final Map<K, ? super C> map, final Class<C> collectionClass)" ], [ "multiValueMap", "org.apache.commons.collections4.map", "MultiValueMap", "public static <K, V, C extends Collection<V>> MultiValueMap<K, V> multiValueMap(final Map<K, ? super C> map, final Factory<C> collectionFactory)" ], [ "transformingMap", "org.apache.commons.collections4.map", "TransformedMap", "public static <K, V> TransformedMap<K, V> transformingMap(final Map<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "transformedMap", "org.apache.commons.collections4.map", "TransformedMap", "public static <K, V> TransformedMap<K, V> transformedMap(final Map<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "synchronizedMultiSet", "org.apache.commons.collections4", "MultiSetUtils", "public static <E> MultiSet<E> synchronizedMultiSet(final MultiSet<E> multiset)" ], [ "unmodifiableMultiSet", "org.apache.commons.collections4", "MultiSetUtils", "public static <E> MultiSet<E> unmodifiableMultiSet(final MultiSet<? extends E> multiset)" ], [ "predicatedMultiSet", "org.apache.commons.collections4", "MultiSetUtils", "public static <E> MultiSet<E> predicatedMultiSet(final MultiSet<E> multiset, final Predicate<? super E> predicate)" ], [ "emptyMultiSet", "org.apache.commons.collections4", "MultiSetUtils", "public static <E> MultiSet<E> emptyMultiSet()" ], [ "unmodifiableMultiValuedMap", "org.apache.commons.collections4.multimap", "UnmodifiableMultiValuedMap", "public static <K, V> UnmodifiableMultiValuedMap<K, V> unmodifiableMultiValuedMap(MultiValuedMap<? extends K, ? extends V> map)" ], [ "transformingMap", "org.apache.commons.collections4.multimap", "TransformedMultiValuedMap", "public static <K, V> TransformedMultiValuedMap<K, V> transformingMap(final MultiValuedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "transformedMap", "org.apache.commons.collections4.multimap", "TransformedMultiValuedMap", "public static <K, V> TransformedMultiValuedMap<K, V> transformedMap(final MultiValuedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "lazyList", "org.apache.commons.collections4.list", "LazyList", "public static <E> LazyList<E> lazyList(final List<E> list, final Factory<? extends E> factory)" ], [ "setUniqueList", "org.apache.commons.collections4.list", "SetUniqueList", "public static <E> SetUniqueList<E> setUniqueList(final List<E> list)" ], [ "unmodifiableList", "org.apache.commons.collections4.list", "UnmodifiableList", "public static <E> List<E> unmodifiableList(final List<? extends E> list)" ], [ "fixedSizeList", "org.apache.commons.collections4.list", "FixedSizeList", "public static <E> FixedSizeList<E> fixedSizeList(final List<E> list)" ], [ "transformingList", "org.apache.commons.collections4.list", "TransformedList", "public static <E> TransformedList<E> transformingList(final List<E> list, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedList", "org.apache.commons.collections4.list", "TransformedList", "public static <E> TransformedList<E> transformedList(final List<E> list, final Transformer<? super E, ? extends E> transformer)" ], [ "growthList", "org.apache.commons.collections4.list", "GrowthList", "public static <E> GrowthList<E> growthList(final List<E> list)" ], [ "predicatedList", "org.apache.commons.collections4.list", "PredicatedList", "public static <T> PredicatedList<T> predicatedList(final List<T> list, final Predicate<? super T> predicate)" ], [ "transformingQueue", "org.apache.commons.collections4.queue", "TransformedQueue", "public static <E> TransformedQueue<E> transformingQueue(final Queue<E> queue, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedQueue", "org.apache.commons.collections4.queue", "TransformedQueue", "public static <E> TransformedQueue<E> transformedQueue(final Queue<E> queue, final Transformer<? super E, ? extends E> transformer)" ], [ "unmodifiableQueue", "org.apache.commons.collections4.queue", "UnmodifiableQueue", "public static <E> Queue<E> unmodifiableQueue(final Queue<? extends E> queue)" ], [ "predicatedQueue", "org.apache.commons.collections4.queue", "PredicatedQueue", "public static <E> PredicatedQueue<E> predicatedQueue(final Queue<E> Queue, final Predicate<? super E> predicate)" ], [ "empty", "org.apache.commons.collections4", "FluentIterable", "public static <T> FluentIterable<T> empty()" ], [ "of", "org.apache.commons.collections4", "FluentIterable", "public static <T> FluentIterable<T> of(final T singleton)" ], [ "of", "org.apache.commons.collections4", "FluentIterable", "public static <T> FluentIterable<T> of(final T... elements)" ], [ "of", "org.apache.commons.collections4", "FluentIterable", "public static <T> FluentIterable<T> of(final Iterable<T> iterable)" ], [ "exceptionTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> exceptionTransformer()" ], [ "nullTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> nullTransformer()" ], [ "nopTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> nopTransformer()" ], [ "cloneTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> cloneTransformer()" ], [ "constantTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> constantTransformer(final O constantToReturn)" ], [ "asTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> asTransformer(final Closure<? super T> closure)" ], [ "asTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, Boolean> asTransformer(final Predicate<? super T> predicate)" ], [ "asTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> asTransformer(final Factory<? extends O> factory)" ], [ "chainedTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> chainedTransformer(final Transformer<? super T, ? extends T>... transformers)" ], [ "chainedTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> chainedTransformer(final Collection<? extends Transformer<? super T, ? extends T>> transformers)" ], [ "ifTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> ifTransformer(final Predicate<? super T> predicate, final Transformer<? super T, ? extends T> trueTransformer)" ], [ "ifTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> ifTransformer(final Predicate<? super I> predicate, final Transformer<? super I, ? extends O> trueTransformer, final Transformer<? super I, ? extends O> falseTransformer)" ], [ "switchTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> switchTransformer(final Predicate<? super I> predicate, final Transformer<? super I, ? extends O> trueTransformer, final Transformer<? super I, ? extends O> falseTransformer)" ], [ "switchTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> switchTransformer(final Predicate<? super I>[] predicates, final Transformer<? super I, ? extends O>[] transformers)" ], [ "switchTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> switchTransformer(final Predicate<? super I>[] predicates, final Transformer<? super I, ? extends O>[] transformers, final Transformer<? super I, ? extends O> defaultTransformer)" ], [ "switchTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> switchTransformer(final Map<Predicate<I>, Transformer<I, O>> predicatesAndTransformers)" ], [ "switchMapTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> switchMapTransformer(final Map<I, Transformer<I, O>> objectsAndTransformers)" ], [ "instantiateTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<Class<? extends T>, T> instantiateTransformer()" ], [ "instantiateTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<Class<? extends T>, T> instantiateTransformer(final Class<?>[] paramTypes, final Object[] args)" ], [ "mapTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> mapTransformer(final Map<? super I, ? extends O> map)" ], [ "invokerTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> invokerTransformer(final String methodName)" ], [ "invokerTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> invokerTransformer(final String methodName, final Class<?>[] paramTypes, final Object[] args)" ], [ "stringValueTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, String> stringValueTransformer()" ], [ "exceptionPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> exceptionPredicate()" ], [ "truePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> truePredicate()" ], [ "falsePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> falsePredicate()" ], [ "nullPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nullPredicate()" ], [ "notNullPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> notNullPredicate()" ], [ "equalPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> equalPredicate(final T value)" ], [ "identityPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> identityPredicate(final T value)" ], [ "instanceofPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static Predicate<Object> instanceofPredicate(final Class<?> type)" ], [ "uniquePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> uniquePredicate()" ], [ "invokerPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> invokerPredicate(final String methodName)" ], [ "invokerPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> invokerPredicate(final String methodName, final Class<?>[] paramTypes, final Object[] args)" ], [ "andPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> andPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "allPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> allPredicate(final Predicate<? super T>... predicates)" ], [ "allPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> allPredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "orPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> orPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "anyPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> anyPredicate(final Predicate<? super T>... predicates)" ], [ "anyPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> anyPredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "eitherPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> eitherPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "onePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> onePredicate(final Predicate<? super T>... predicates)" ], [ "onePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> onePredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "neitherPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> neitherPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "nonePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nonePredicate(final Predicate<? super T>... predicates)" ], [ "nonePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nonePredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "notPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> notPredicate(final Predicate<? super T> predicate)" ], [ "asPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> asPredicate(final Transformer<? super T, Boolean> transformer)" ], [ "nullIsExceptionPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nullIsExceptionPredicate(final Predicate<? super T> predicate)" ], [ "nullIsFalsePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nullIsFalsePredicate(final Predicate<? super T> predicate)" ], [ "nullIsTruePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nullIsTruePredicate(final Predicate<? super T> predicate)" ], [ "transformedPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> transformedPredicate(final Transformer<? super T, ? extends T> transformer, final Predicate<? super T> predicate)" ], [ "emptySet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> emptySet()" ], [ "emptySortedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> emptySortedSet()" ], [ "emptyIfNull", "org.apache.commons.collections4", "SetUtils", "public static <T> Set<T> emptyIfNull(final Set<T> set)" ], [ "isEqualSet", "org.apache.commons.collections4", "SetUtils", "public static boolean isEqualSet(final Collection<?> set1, final Collection<?> set2)" ], [ "hashCodeForSet", "org.apache.commons.collections4", "SetUtils", "public static <T> int hashCodeForSet(final Collection<T> set)" ], [ "newIdentityHashSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> newIdentityHashSet()" ], [ "synchronizedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> synchronizedSet(final Set<E> set)" ], [ "unmodifiableSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> unmodifiableSet(final Set<? extends E> set)" ], [ "predicatedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> predicatedSet(final Set<E> set, final Predicate<? super E> predicate)" ], [ "transformedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> transformedSet(final Set<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "orderedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> orderedSet(final Set<E> set)" ], [ "synchronizedSortedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> synchronizedSortedSet(final SortedSet<E> set)" ], [ "unmodifiableSortedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> unmodifiableSortedSet(final SortedSet<E> set)" ], [ "predicatedSortedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> predicatedSortedSet(final SortedSet<E> set, final Predicate<? super E> predicate)" ], [ "transformedSortedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> transformedSortedSet(final SortedSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "unmodifiableNavigableSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> unmodifiableNavigableSet(final NavigableSet<E> set)" ], [ "predicatedNavigableSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> predicatedNavigableSet(final NavigableSet<E> set, final Predicate<? super E> predicate)" ], [ "transformedNavigableSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> transformedNavigableSet(final NavigableSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "union", "org.apache.commons.collections4", "SetUtils", "public static <E> SetView<E> union(final Set<? extends E> a, final Set<? extends E> b)" ], [ "difference", "org.apache.commons.collections4", "SetUtils", "public static <E> SetView<E> difference(final Set<? extends E> a, final Set<? extends E> b)" ], [ "intersection", "org.apache.commons.collections4", "SetUtils", "public static <E> SetView<E> intersection(final Set<? extends E> a, final Set<? extends E> b)" ], [ "disjunction", "org.apache.commons.collections4", "SetUtils", "public static <E> SetView<E> disjunction(final Set<? extends E> a, final Set<? extends E> b)" ], [ "transformingSet", "org.apache.commons.collections4.set", "TransformedSet", "public static <E> TransformedSet<E> transformingSet(final Set<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedSet", "org.apache.commons.collections4.set", "TransformedSet", "public static <E> Set<E> transformedSet(final Set<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "transformingNavigableSet", "org.apache.commons.collections4.set", "TransformedNavigableSet", "public static <E> TransformedNavigableSet<E> transformingNavigableSet(final NavigableSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedNavigableSet", "org.apache.commons.collections4.set", "TransformedNavigableSet", "public static <E> TransformedNavigableSet<E> transformedNavigableSet(final NavigableSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "predicatedNavigableSet", "org.apache.commons.collections4.set", "PredicatedNavigableSet", "public static <E> PredicatedNavigableSet<E> predicatedNavigableSet(final NavigableSet<E> set, final Predicate<? super E> predicate)" ], [ "listOrderedSet", "org.apache.commons.collections4.set", "ListOrderedSet", "public static <E> ListOrderedSet<E> listOrderedSet(final Set<E> set, final List<E> list)" ], [ "listOrderedSet", "org.apache.commons.collections4.set", "ListOrderedSet", "public static <E> ListOrderedSet<E> listOrderedSet(final Set<E> set)" ], [ "listOrderedSet", "org.apache.commons.collections4.set", "ListOrderedSet", "public static <E> ListOrderedSet<E> listOrderedSet(final List<E> list)" ], [ "unmodifiableSet", "org.apache.commons.collections4.set", "UnmodifiableSet", "public static <E> Set<E> unmodifiableSet(final Set<? extends E> set)" ], [ "mapBackedSet", "org.apache.commons.collections4.set", "MapBackedSet", "public static <E, V> MapBackedSet<E, V> mapBackedSet(final Map<E, ? super V> map)" ], [ "mapBackedSet", "org.apache.commons.collections4.set", "MapBackedSet", "public static <E, V> MapBackedSet<E, V> mapBackedSet(final Map<E, ? super V> map, final V dummyValue)" ], [ "unmodifiableSortedSet", "org.apache.commons.collections4.set", "UnmodifiableSortedSet", "public static <E> SortedSet<E> unmodifiableSortedSet(final SortedSet<E> set)" ], [ "predicatedSortedSet", "org.apache.commons.collections4.set", "PredicatedSortedSet", "public static <E> PredicatedSortedSet<E> predicatedSortedSet(final SortedSet<E> set, final Predicate<? super E> predicate)" ], [ "predicatedSet", "org.apache.commons.collections4.set", "PredicatedSet", "public static <E> PredicatedSet<E> predicatedSet(final Set<E> set, final Predicate<? super E> predicate)" ], [ "unmodifiableNavigableSet", "org.apache.commons.collections4.set", "UnmodifiableNavigableSet", "public static <E> NavigableSet<E> unmodifiableNavigableSet(final NavigableSet<E> set)" ], [ "transformingSortedSet", "org.apache.commons.collections4.set", "TransformedSortedSet", "public static <E> TransformedSortedSet<E> transformingSortedSet(final SortedSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedSortedSet", "org.apache.commons.collections4.set", "TransformedSortedSet", "public static <E> TransformedSortedSet<E> transformedSortedSet(final SortedSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "get", "org.apache.commons.collections4", "EnumerationUtils", "public static <T> T get(final Enumeration<T> e, final int index)" ], [ "toList", "org.apache.commons.collections4", "EnumerationUtils", "public static <E> List<E> toList(final Enumeration<? extends E> enumeration)" ], [ "toList", "org.apache.commons.collections4", "EnumerationUtils", "public static List<String> toList(final StringTokenizer stringTokenizer)" ], [ "unmodifiableQueue", "org.apache.commons.collections4", "QueueUtils", "public static <E> Queue<E> unmodifiableQueue(final Queue<? extends E> queue)" ], [ "predicatedQueue", "org.apache.commons.collections4", "QueueUtils", "public static <E> Queue<E> predicatedQueue(final Queue<E> queue, final Predicate<? super E> predicate)" ], [ "transformingQueue", "org.apache.commons.collections4", "QueueUtils", "public static <E> Queue<E> transformingQueue(final Queue<E> queue, final Transformer<? super E, ? extends E> transformer)" ], [ "emptyQueue", "org.apache.commons.collections4", "QueueUtils", "public static <E> Queue<E> emptyQueue()" ], [ "synchronizedBag", "org.apache.commons.collections4.bag", "SynchronizedBag", "public static <E> SynchronizedBag<E> synchronizedBag(final Bag<E> bag)" ], [ "collectionBag", "org.apache.commons.collections4.bag", "CollectionBag", "public static <E> Bag<E> collectionBag(final Bag<E> bag)" ], [ "unmodifiableBag", "org.apache.commons.collections4.bag", "UnmodifiableBag", "public static <E> Bag<E> unmodifiableBag(final Bag<? extends E> bag)" ], [ "predicatedSortedBag", "org.apache.commons.collections4.bag", "PredicatedSortedBag", "public static <E> PredicatedSortedBag<E> predicatedSortedBag(final SortedBag<E> bag, final Predicate<? super E> predicate)" ], [ "unmodifiableSortedBag", "org.apache.commons.collections4.bag", "UnmodifiableSortedBag", "public static <E> SortedBag<E> unmodifiableSortedBag(final SortedBag<E> bag)" ], [ "transformingSortedBag", "org.apache.commons.collections4.bag", "TransformedSortedBag", "public static <E> TransformedSortedBag<E> transformingSortedBag(final SortedBag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedSortedBag", "org.apache.commons.collections4.bag", "TransformedSortedBag", "public static <E> TransformedSortedBag<E> transformedSortedBag(final SortedBag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "predicatedBag", "org.apache.commons.collections4.bag", "PredicatedBag", "public static <E> PredicatedBag<E> predicatedBag(final Bag<E> bag, final Predicate<? super E> predicate)" ], [ "synchronizedSortedBag", "org.apache.commons.collections4.bag", "SynchronizedSortedBag", "public static <E> SynchronizedSortedBag<E> synchronizedSortedBag(final SortedBag<E> bag)" ], [ "collectionSortedBag", "org.apache.commons.collections4.bag", "CollectionSortedBag", "public static <E> SortedBag<E> collectionSortedBag(final SortedBag<E> bag)" ], [ "transformingBag", "org.apache.commons.collections4.bag", "TransformedBag", "public static <E> Bag<E> transformingBag(final Bag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedBag", "org.apache.commons.collections4.bag", "TransformedBag", "public static <E> Bag<E> transformedBag(final Bag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "predicatedMultiSet", "org.apache.commons.collections4.multiset", "PredicatedMultiSet", "public static <E> PredicatedMultiSet<E> predicatedMultiSet(final MultiSet<E> multiset, final Predicate<? super E> predicate)" ], [ "unmodifiableMultiSet", "org.apache.commons.collections4.multiset", "UnmodifiableMultiSet", "public static <E> MultiSet<E> unmodifiableMultiSet(final MultiSet<? extends E> multiset)" ], [ "synchronizedMultiSet", "org.apache.commons.collections4.multiset", "SynchronizedMultiSet", "public static <E> SynchronizedMultiSet<E> synchronizedMultiSet(final MultiSet<E> multiset)" ], [ "synchronizedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> synchronizedBag(final Bag<E> bag)" ], [ "unmodifiableBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> unmodifiableBag(final Bag<? extends E> bag)" ], [ "predicatedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> predicatedBag(final Bag<E> bag, final Predicate<? super E> predicate)" ], [ "transformingBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> transformingBag(final Bag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "collectionBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> collectionBag(final Bag<E> bag)" ], [ "synchronizedSortedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> SortedBag<E> synchronizedSortedBag(final SortedBag<E> bag)" ], [ "unmodifiableSortedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> SortedBag<E> unmodifiableSortedBag(final SortedBag<E> bag)" ], [ "predicatedSortedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> SortedBag<E> predicatedSortedBag(final SortedBag<E> bag, final Predicate<? super E> predicate)" ], [ "transformingSortedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> SortedBag<E> transformingSortedBag(final SortedBag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "emptyBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> emptyBag()" ], [ "emptySortedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> SortedBag<E> emptySortedBag()" ], [ "resettableEmptyListIterator", "org.apache.commons.collections4.iterators", "EmptyListIterator", "public static <E> ResettableListIterator<E> resettableEmptyListIterator()" ], [ "emptyListIterator", "org.apache.commons.collections4.iterators", "EmptyListIterator", "public static <E> ListIterator<E> emptyListIterator()" ], [ "unmodifiableOrderedMapIterator", "org.apache.commons.collections4.iterators", "UnmodifiableOrderedMapIterator", "public static <K, V> OrderedMapIterator<K, V> unmodifiableOrderedMapIterator(final OrderedMapIterator<K, ? extends V> iterator)" ], [ "unmodifiableIterator", "org.apache.commons.collections4.iterators", "UnmodifiableIterator", "public static <E> Iterator<E> unmodifiableIterator(final Iterator<? extends E> iterator)" ], [ "peekingIterator", "org.apache.commons.collections4.iterators", "PeekingIterator", "public static <E> PeekingIterator<E> peekingIterator(final Iterator<? extends E> iterator)" ], [ "emptyMapIterator", "org.apache.commons.collections4.iterators", "EmptyMapIterator", "public static <K, V> MapIterator<K, V> emptyMapIterator()" ], [ "emptyOrderedIterator", "org.apache.commons.collections4.iterators", "EmptyOrderedIterator", "public static <E> OrderedIterator<E> emptyOrderedIterator()" ], [ "umodifiableListIterator", "org.apache.commons.collections4.iterators", "UnmodifiableListIterator", "public static <E> ListIterator<E> umodifiableListIterator(final ListIterator<? extends E> iterator)" ], [ "emptyOrderedMapIterator", "org.apache.commons.collections4.iterators", "EmptyOrderedMapIterator", "public static <K, V> OrderedMapIterator<K, V> emptyOrderedMapIterator()" ], [ "unmodifiableMapIterator", "org.apache.commons.collections4.iterators", "UnmodifiableMapIterator", "public static <K, V> MapIterator<K, V> unmodifiableMapIterator(final MapIterator<? extends K, ? extends V> iterator)" ], [ "resettableEmptyIterator", "org.apache.commons.collections4.iterators", "EmptyIterator", "public static <E> ResettableIterator<E> resettableEmptyIterator()" ], [ "emptyIterator", "org.apache.commons.collections4.iterators", "EmptyIterator", "public static <E> Iterator<E> emptyIterator()" ], [ "pushbackIterator", "org.apache.commons.collections4.iterators", "PushbackIterator", "public static <E> PushbackIterator<E> pushbackIterator(final Iterator<? extends E> iterator)" ], [ "readableMap", "org.apache.commons.collections4", "SplitMapUtils", "public static <K, V> IterableMap<K, V> readableMap(final Get<K, V> get)" ], [ "writableMap", "org.apache.commons.collections4", "SplitMapUtils", "public static <K, V> Map<K, V> writableMap(final Put<K, V> put)" ] ],
  "tokensProjectClassesNonPrivateStaticAttributes" : [ [ "EMPTY_ITERATOR", "org.apache.commons.collections4", "IteratorUtils", "public static final ResettableIterator EMPTY_ITERATOR = EmptyIterator.RESETTABLE_INSTANCE;" ], [ "EMPTY_LIST_ITERATOR", "org.apache.commons.collections4", "IteratorUtils", "public static final ResettableListIterator EMPTY_LIST_ITERATOR = EmptyListIterator.RESETTABLE_INSTANCE;" ], [ "EMPTY_ORDERED_ITERATOR", "org.apache.commons.collections4", "IteratorUtils", "public static final OrderedIterator EMPTY_ORDERED_ITERATOR = EmptyOrderedIterator.INSTANCE;" ], [ "EMPTY_MAP_ITERATOR", "org.apache.commons.collections4", "IteratorUtils", "public static final MapIterator EMPTY_MAP_ITERATOR = EmptyMapIterator.INSTANCE;" ], [ "EMPTY_ORDERED_MAP_ITERATOR", "org.apache.commons.collections4", "IteratorUtils", "public static final OrderedMapIterator EMPTY_ORDERED_MAP_ITERATOR = EmptyOrderedMapIterator.INSTANCE;" ], [ "NATURAL_COMPARATOR", "org.apache.commons.collections4", "ComparatorUtils", "public static final Comparator NATURAL_COMPARATOR = ComparableComparator.<Comparable>comparableComparator();" ], [ "EMPTY_MULTI_VALUED_MAP", "org.apache.commons.collections4", "MultiMapUtils", "public static final MultiValuedMap EMPTY_MULTI_VALUED_MAP = UnmodifiableMultiValuedMap.unmodifiableMultiValuedMap(new ArrayListValuedHashMap(0, 0));" ], [ "EMPTY_SORTED_MAP", "org.apache.commons.collections4", "MapUtils", "public static final SortedMap EMPTY_SORTED_MAP = UnmodifiableSortedMap.unmodifiableSortedMap(new TreeMap<Object, Object>());" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "DefaultEquator", "public static final DefaultEquator INSTANCE = new DefaultEquator<Object>();" ], [ "HASHCODE_NULL", "org.apache.commons.collections4.functors", "DefaultEquator", "public static final int HASHCODE_NULL = -1;" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "ExceptionClosure", "public static final Closure INSTANCE = new ExceptionClosure<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "NOPClosure", "public static final Closure INSTANCE = new NOPClosure<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "NullPredicate", "public static final Predicate INSTANCE = new NullPredicate<Object>();" ], [ "NULL_INSTANCE", "org.apache.commons.collections4.functors", "ConstantTransformer", "public static final Transformer NULL_INSTANCE = new ConstantTransformer<Object, Object>(null);" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "ExceptionTransformer", "public static final Transformer INSTANCE = new ExceptionTransformer<Object, Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "NOPTransformer", "public static final Transformer INSTANCE = new NOPTransformer<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "ExceptionFactory", "public static final Factory INSTANCE = new ExceptionFactory<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "ExceptionPredicate", "public static final Predicate INSTANCE = new ExceptionPredicate<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "FalsePredicate", "public static final Predicate INSTANCE = new FalsePredicate<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "CloneTransformer", "public static final Transformer INSTANCE = new CloneTransformer<Object>();" ], [ "NULL_INSTANCE", "org.apache.commons.collections4.functors", "ConstantFactory", "public static final Factory NULL_INSTANCE = new ConstantFactory<Object>(null);" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "TruePredicate", "public static final Predicate INSTANCE = new TruePredicate<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "NotNullPredicate", "public static final Predicate INSTANCE = new NotNullPredicate<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.comparators", "ComparableComparator", "public static final ComparableComparator INSTANCE = new ComparableComparator();" ], [ "EMPTY_COLLECTION", "org.apache.commons.collections4", "CollectionUtils", "public static final Collection EMPTY_COLLECTION = UnmodifiableCollection.unmodifiableCollection(new ArrayList<Object>());" ], [ "EMPTY_ITERABLE", "org.apache.commons.collections4", "IterableUtils", "static final FluentIterable EMPTY_ITERABLE = new FluentIterable<Object>() {\n\n    @Override\n    public Iterator<Object> iterator() {\n        return IteratorUtils.emptyIterator();\n    }\n};" ], [ "NULL_BIT_KEY", "org.apache.commons.collections4.trie", "KeyAnalyzer", "public static final int NULL_BIT_KEY = -1;" ], [ "EQUAL_BIT_KEY", "org.apache.commons.collections4.trie", "KeyAnalyzer", "public static final int EQUAL_BIT_KEY = -2;" ], [ "OUT_OF_BOUNDS_BIT_KEY", "org.apache.commons.collections4.trie", "KeyAnalyzer", "public static final int OUT_OF_BOUNDS_BIT_KEY = -3;" ], [ "INSTANCE", "org.apache.commons.collections4.trie.analyzer", "StringKeyAnalyzer", "public static final StringKeyAnalyzer INSTANCE = new StringKeyAnalyzer();" ], [ "LENGTH", "org.apache.commons.collections4.trie.analyzer", "StringKeyAnalyzer", "public static final int LENGTH = Character.SIZE;" ], [ "NO_NEXT_ENTRY", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String NO_NEXT_ENTRY = \"No next() entry in the iteration\";" ], [ "NO_PREVIOUS_ENTRY", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String NO_PREVIOUS_ENTRY = \"No previous() entry in the iteration\";" ], [ "REMOVE_INVALID", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String REMOVE_INVALID = \"remove() can only be called once after next()\";" ], [ "GETKEY_INVALID", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String GETKEY_INVALID = \"getKey() can only be called after next() and before remove()\";" ], [ "GETVALUE_INVALID", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String GETVALUE_INVALID = \"getValue() can only be called after next() and before remove()\";" ], [ "SETVALUE_INVALID", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String SETVALUE_INVALID = \"setValue() can only be called after next() and before remove()\";" ], [ "DEFAULT_CAPACITY", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final int DEFAULT_CAPACITY = 16;" ], [ "DEFAULT_THRESHOLD", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final int DEFAULT_THRESHOLD = 12;" ], [ "DEFAULT_LOAD_FACTOR", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final float DEFAULT_LOAD_FACTOR = 0.75f;" ], [ "MAXIMUM_CAPACITY", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final int MAXIMUM_CAPACITY = 1 << 30;" ], [ "NULL", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final Object NULL = new Object();" ], [ "DEFAULT_MAX_SIZE", "org.apache.commons.collections4.map", "LRUMap", "protected static final int DEFAULT_MAX_SIZE = 100;" ], [ "EMPTY_MULTISET", "org.apache.commons.collections4", "MultiSetUtils", "public static final MultiSet EMPTY_MULTISET = UnmodifiableMultiSet.unmodifiableMultiSet(new HashMultiSet<Object>());" ], [ "EMPTY_SORTED_SET", "org.apache.commons.collections4", "SetUtils", "public static final SortedSet EMPTY_SORTED_SET = UnmodifiableSortedSet.unmodifiableSortedSet(new TreeSet<Object>());" ], [ "EMPTY_QUEUE", "org.apache.commons.collections4", "QueueUtils", "public static final Queue EMPTY_QUEUE = UnmodifiableQueue.unmodifiableQueue(new LinkedList<Object>());" ], [ "EMPTY_BAG", "org.apache.commons.collections4", "BagUtils", "public static final Bag EMPTY_BAG = UnmodifiableBag.unmodifiableBag(new HashBag<Object>());" ], [ "EMPTY_SORTED_BAG", "org.apache.commons.collections4", "BagUtils", "public static final Bag EMPTY_SORTED_BAG = UnmodifiableSortedBag.unmodifiableSortedBag(new TreeBag<Object>());" ], [ "RESETTABLE_INSTANCE", "org.apache.commons.collections4.iterators", "EmptyListIterator", "public static final ResettableListIterator RESETTABLE_INSTANCE = new EmptyListIterator<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.iterators", "EmptyListIterator", "public static final ListIterator INSTANCE = RESETTABLE_INSTANCE;" ], [ "INSTANCE", "org.apache.commons.collections4.iterators", "EmptyMapIterator", "public static final MapIterator INSTANCE = new EmptyMapIterator<Object, Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.iterators", "EmptyOrderedIterator", "public static final OrderedIterator INSTANCE = new EmptyOrderedIterator<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.iterators", "EmptyOrderedMapIterator", "public static final OrderedMapIterator INSTANCE = new EmptyOrderedMapIterator<Object, Object>();" ], [ "RESETTABLE_INSTANCE", "org.apache.commons.collections4.iterators", "EmptyIterator", "public static final ResettableIterator RESETTABLE_INSTANCE = new EmptyIterator<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.iterators", "EmptyIterator", "public static final Iterator INSTANCE = RESETTABLE_INSTANCE;" ] ],
  "tokensMethodJavadocValues" : [ ],
  "tokensMethodArguments" : [ [ "methodName", "java.lang", "String" ], [ "paramTypes", "", "Class<?>[]" ], [ "args", "", "Object[]" ] ],
  "tokensMethodVariablesNonPrivateNonStaticNonVoidMethods" : [ [ "toString", "java.lang", "Object", "public String toString()" ], [ "clone", "java.lang", "Object", "protected native Object clone() throws CloneNotSupportedException" ], [ "getClass", "java.lang", "Object", "public final native Class<? extends Object> getClass()" ], [ "hashCode", "java.lang", "Object", "public native int hashCode()" ], [ "equals", "java.lang", "Object", "public boolean equals(Object arg0)" ], [ "stripTrailing", "java.lang", "String", "public String stripTrailing()" ], [ "compareToIgnoreCase", "java.lang", "String", "public int compareToIgnoreCase(String arg0)" ], [ "toUpperCase", "java.lang", "String", "public String toUpperCase(Locale arg0)" ], [ "indexOf", "java.lang", "String", "public int indexOf(String arg0)" ], [ "indexOf", "java.lang", "String", "public int indexOf(int arg0, int arg1)" ], [ "replace", "java.lang", "String", "public String replace(CharSequence arg0, CharSequence arg1)" ], [ "indexOf", "java.lang", "String", "public int indexOf(int arg0)" ], [ "startsWith", "java.lang", "String", "public boolean startsWith(String arg0, int arg1)" ], [ "lastIndexOf", "java.lang", "String", "public int lastIndexOf(int arg0, int arg1)" ], [ "substring", "java.lang", "String", "public String substring(int arg0, int arg1)" ], [ "lastIndexOf", "java.lang", "String", "public int lastIndexOf(int arg0)" ], [ "charAt", "java.lang", "String", "public char charAt(int arg0)" ], [ "toLowerCase", "java.lang", "String", "public String toLowerCase(Locale arg0)" ], [ "regionMatches", "java.lang", "String", "public boolean regionMatches(int arg0, String arg1, int arg2, int arg3)" ], [ "codePointCount", "java.lang", "String", "public int codePointCount(int arg0, int arg1)" ], [ "isBlank", "java.lang", "String", "public boolean isBlank()" ], [ "value", "java.lang", "String", "byte[] value()" ], [ "lastIndexOf", "java.lang", "String", "public int lastIndexOf(String arg0)" ], [ "concat", "java.lang", "String", "public String concat(String arg0)" ], [ "replace", "java.lang", "String", "public String replace(char arg0, char arg1)" ], [ "strip", "java.lang", "String", "public String strip()" ], [ "replaceFirst", "java.lang", "String", "public String replaceFirst(String arg0, String arg1)" ], [ "hashCode", "java.lang", "String", "public int hashCode()" ], [ "indent", "java.lang", "String", "public String indent(int arg0)" ], [ "trim", "java.lang", "String", "public String trim()" ], [ "describeConstable", "java.lang", "String", "public Optional<String> describeConstable()" ], [ "offsetByCodePoints", "java.lang", "String", "public int offsetByCodePoints(int arg0, int arg1)" ], [ "equals", "java.lang", "String", "public boolean equals(Object arg0)" ], [ "lastIndexOf", "java.lang", "String", "public int lastIndexOf(String arg0, int arg1)" ], [ "transform", "java.lang", "String", "public <R> R transform(Function<? super String, ? extends R> arg0)" ], [ "intern", "java.lang", "String", "public native String intern()" ], [ "stripIndent", "java.lang", "String", "public String stripIndent()" ], [ "length", "java.lang", "String", "public int length()" ], [ "translateEscapes", "java.lang", "String", "public String translateEscapes()" ], [ "startsWith", "java.lang", "String", "public boolean startsWith(String arg0)" ], [ "toCharArray", "java.lang", "String", "public char[] toCharArray()" ], [ "codePointBefore", "java.lang", "String", "public int codePointBefore(int arg0)" ], [ "contentEquals", "java.lang", "String", "public boolean contentEquals(CharSequence arg0)" ], [ "getBytes", "java.lang", "String", "public byte[] getBytes(String arg0) throws UnsupportedEncodingException" ], [ "toUpperCase", "java.lang", "String", "public String toUpperCase()" ], [ "stripLeading", "java.lang", "String", "public String stripLeading()" ], [ "codePointAt", "java.lang", "String", "public int codePointAt(int arg0)" ], [ "getBytes", "java.lang", "String", "public byte[] getBytes(Charset arg0)" ], [ "resolveConstantDesc", "java.lang", "String", "public String resolveConstantDesc(MethodHandles.Lookup arg0)" ], [ "subSequence", "java.lang", "String", "public CharSequence subSequence(int arg0, int arg1)" ], [ "isLatin1", "java.lang", "String", "boolean isLatin1()" ], [ "substring", "java.lang", "String", "public String substring(int arg0)" ], [ "coder", "java.lang", "String", "byte coder()" ], [ "matches", "java.lang", "String", "public boolean matches(String arg0)" ], [ "repeat", "java.lang", "String", "public String repeat(int arg0)" ], [ "contains", "java.lang", "String", "public boolean contains(CharSequence arg0)" ], [ "chars", "java.lang", "String", "public IntStream chars()" ], [ "lines", "java.lang", "String", "public Stream<String> lines()" ], [ "split", "java.lang", "String", "public String[] split(String arg0, int arg1)" ], [ "getBytes", "java.lang", "String", "public byte[] getBytes()" ], [ "compareTo", "java.lang", "String", "public int compareTo(String arg0)" ], [ "toLowerCase", "java.lang", "String", "public String toLowerCase()" ], [ "regionMatches", "java.lang", "String", "public boolean regionMatches(boolean arg0, int arg1, String arg2, int arg3, int arg4)" ], [ "replaceAll", "java.lang", "String", "public String replaceAll(String arg0, String arg1)" ], [ "indexOf", "java.lang", "String", "public int indexOf(String arg0, int arg1)" ], [ "endsWith", "java.lang", "String", "public boolean endsWith(String arg0)" ], [ "contentEquals", "java.lang", "String", "public boolean contentEquals(StringBuffer arg0)" ], [ "isEmpty", "java.lang", "String", "public boolean isEmpty()" ], [ "split", "java.lang", "String", "public String[] split(String arg0)" ], [ "codePoints", "java.lang", "String", "public IntStream codePoints()" ], [ "toString", "java.lang", "String", "public String toString()" ], [ "formatted", "java.lang", "String", "public String formatted(Object[] arg0)" ], [ "equalsIgnoreCase", "java.lang", "String", "public boolean equalsIgnoreCase(String arg0)" ], [ "compareTo", "java.lang", "Comparable", "public abstract int compareTo(T arg0)" ], [ "toString", "java.lang", "CharSequence", "public abstract String toString()" ], [ "charAt", "java.lang", "CharSequence", "public abstract char charAt(int arg0)" ], [ "length", "java.lang", "CharSequence", "public abstract int length()" ], [ "codePoints", "java.lang", "CharSequence", "public default IntStream codePoints()" ], [ "subSequence", "java.lang", "CharSequence", "public abstract CharSequence subSequence(int arg0, int arg1)" ], [ "isEmpty", "java.lang", "CharSequence", "public default boolean isEmpty()" ], [ "chars", "java.lang", "CharSequence", "public default IntStream chars()" ], [ "describeConstable", "java.lang.constant", "Constable", "public abstract Optional<? extends ConstantDesc> describeConstable()" ], [ "resolveConstantDesc", "java.lang.constant", "ConstantDesc", "public abstract Object resolveConstantDesc(MethodHandles.Lookup arg0) throws ReflectiveOperationException" ], [ "equals", "", "java.lang.Class<?>[]", "public boolean equals(Object);" ], [ "toString", "", "java.lang.Class<?>[]", "public String toString()" ], [ "hashCode", "", "java.lang.Class<?>[]", "public native int hashCode()" ], [ "getClass", "", "java.lang.Class<?>[]", "public final native Class getClass();" ], [ "clone", "", "java.lang.Class<?>[]", "public T[] clone();" ], [ "equals", "", "java.lang.Object[]", "public boolean equals(Object);" ], [ "toString", "", "java.lang.Object[]", "public String toString()" ], [ "hashCode", "", "java.lang.Object[]", "public native int hashCode()" ], [ "getClass", "", "java.lang.Object[]", "public final native Class getClass();" ], [ "clone", "", "java.lang.Object[]", "public T[] clone();" ], [ "transform", "org.apache.commons.collections4", "Transformer", "public abstract O transform(I arg0)" ] ],
  "tokensMethodVariablesNonPrivateNonStaticAttributes" : [ [ "length", "java.lang", "Class[]", "public final int length;" ], [ "length", "java.lang", "Object[]", "public final int length;" ] ],
  "tokensOracleVariablesNonPrivateNonStaticNonVoidMethods" : [ ],
  "tokensOracleVariablesNonPrivateNonStaticAttributes" : [ ]
}, {
  "id" : 9008,
  "oracle" : ";",
  "oracleType" : "NORMAL_POST",
  "projectName" : "commons-collections4-4.1",
  "packageName" : "org.apache.commons.collections4",
  "className" : "PredicateUtils",
  "javadocTag" : "@return the predicate",
  "methodJavadoc" : "    /**\n     * Gets a Predicate that checks if the input object passed in is not null.\n     *\n     * @param <T>  the type that the predicate queries\n     * @return the predicate\n     * @see NotNullPredicate\n     */",
  "methodSourceCode" : "public static <T> Predicate<T> notNullPredicate(){\n    return NotNullPredicate.notNullPredicate();\n}",
  "classJavadoc" : "/**\n * <code>PredicateUtils</code> provides reference implementations and utilities\n * for the Predicate functor interface. The supplied predicates are:\n * <ul>\n * <li>Invoker - returns the result of a method call on the input object\n * <li>InstanceOf - true if the object is an instanceof a class\n * <li>Equal - true if the object equals() a specified object\n * <li>Identity - true if the object == a specified object\n * <li>Null - true if the object is null\n * <li>NotNull - true if the object is not null\n * <li>Unique - true if the object has not already been evaluated\n * <li>And/All - true if all of the predicates are true\n * <li>Or/Any - true if any of the predicates is true\n * <li>Either/One - true if only one of the predicate is true\n * <li>Neither/None - true if none of the predicates are true\n * <li>Not - true if the predicate is false, and vice versa\n * <li>Transformer - wraps a Transformer as a Predicate\n * <li>True - always return true\n * <li>False - always return false\n * <li>Exception - always throws an exception\n * <li>NullIsException/NullIsFalse/NullIsTrue - check for null input\n * <li>Transformed - transforms the input before calling the predicate\n * </ul>\n * All the supplied predicates are Serializable.\n *\n * @since 3.0\n * @version $Id: PredicateUtils.java 1686855 2015-06-22 13:00:27Z tn $\n */",
  "classSourceCode" : "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.commons.collections4;\n\nimport java.util.Collection;\n\nimport org.apache.commons.collections4.functors.AllPredicate;\nimport org.apache.commons.collections4.functors.AndPredicate;\nimport org.apache.commons.collections4.functors.AnyPredicate;\nimport org.apache.commons.collections4.functors.EqualPredicate;\nimport org.apache.commons.collections4.functors.ExceptionPredicate;\nimport org.apache.commons.collections4.functors.FalsePredicate;\nimport org.apache.commons.collections4.functors.IdentityPredicate;\nimport org.apache.commons.collections4.functors.InstanceofPredicate;\nimport org.apache.commons.collections4.functors.InvokerTransformer;\nimport org.apache.commons.collections4.functors.NonePredicate;\nimport org.apache.commons.collections4.functors.NotNullPredicate;\nimport org.apache.commons.collections4.functors.NotPredicate;\nimport org.apache.commons.collections4.functors.NullIsExceptionPredicate;\nimport org.apache.commons.collections4.functors.NullIsFalsePredicate;\nimport org.apache.commons.collections4.functors.NullIsTruePredicate;\nimport org.apache.commons.collections4.functors.NullPredicate;\nimport org.apache.commons.collections4.functors.OnePredicate;\nimport org.apache.commons.collections4.functors.OrPredicate;\nimport org.apache.commons.collections4.functors.TransformedPredicate;\nimport org.apache.commons.collections4.functors.TransformerPredicate;\nimport org.apache.commons.collections4.functors.TruePredicate;\nimport org.apache.commons.collections4.functors.UniquePredicate;\n\n/**\n * <code>PredicateUtils</code> provides reference implementations and utilities\n * for the Predicate functor interface. The supplied predicates are:\n * <ul>\n * <li>Invoker - returns the result of a method call on the input object\n * <li>InstanceOf - true if the object is an instanceof a class\n * <li>Equal - true if the object equals() a specified object\n * <li>Identity - true if the object == a specified object\n * <li>Null - true if the object is null\n * <li>NotNull - true if the object is not null\n * <li>Unique - true if the object has not already been evaluated\n * <li>And/All - true if all of the predicates are true\n * <li>Or/Any - true if any of the predicates is true\n * <li>Either/One - true if only one of the predicate is true\n * <li>Neither/None - true if none of the predicates are true\n * <li>Not - true if the predicate is false, and vice versa\n * <li>Transformer - wraps a Transformer as a Predicate\n * <li>True - always return true\n * <li>False - always return false\n * <li>Exception - always throws an exception\n * <li>NullIsException/NullIsFalse/NullIsTrue - check for null input\n * <li>Transformed - transforms the input before calling the predicate\n * </ul>\n * All the supplied predicates are Serializable.\n *\n * @since 3.0\n * @version $Id: PredicateUtils.java 1686855 2015-06-22 13:00:27Z tn $\n */\npublic class PredicateUtils {\n\n    /**\n     * This class is not normally instantiated.\n     */\n    private PredicateUtils() {}\n\n    // Simple predicates\n    //-----------------------------------------------------------------------------\n\n    /**\n     * Gets a Predicate that always throws an exception.\n     * This could be useful during testing as a placeholder.\n     *\n     * @param <T>  the type that the predicate queries\n     * @return the predicate\n     * @see ExceptionPredicate\n     */\n    public static <T> Predicate<T> exceptionPredicate() {\n        return ExceptionPredicate.exceptionPredicate();\n    }\n\n    /**\n     * Gets a Predicate that always returns true.\n     *\n     * @param <T>  the type that the predicate queries\n     * @return the predicate\n     * @see TruePredicate\n     */\n    public static <T> Predicate<T> truePredicate() {\n        return TruePredicate.truePredicate();\n    }\n\n    /**\n     * Gets a Predicate that always returns false.\n     *\n     * @param <T>  the type that the predicate queries\n     * @return the predicate\n     * @see FalsePredicate\n     */\n    public static <T> Predicate<T> falsePredicate() {\n        return FalsePredicate.falsePredicate();\n    }\n\n    /**\n     * Gets a Predicate that checks if the input object passed in is null.\n     *\n     * @param <T>  the type that the predicate queries\n     * @return the predicate\n     * @see NullPredicate\n     */\n    public static <T> Predicate<T> nullPredicate() {\n        return NullPredicate.nullPredicate();\n    }\n\n    /**\n     * Gets a Predicate that checks if the input object passed in is not null.\n     *\n     * @param <T>  the type that the predicate queries\n     * @return the predicate\n     * @see NotNullPredicate\n     */\n    public static <T> Predicate<T> notNullPredicate() {\n        return NotNullPredicate.notNullPredicate();\n    }\n\n    /**\n     * Creates a Predicate that checks if the input object is equal to the\n     * specified object using equals().\n     *\n     * @param <T>  the type that the predicate queries\n     * @param value  the value to compare against\n     * @return the predicate\n     * @see EqualPredicate\n     */\n    public static <T> Predicate<T> equalPredicate(final T value) {\n        return EqualPredicate.equalPredicate(value);\n    }\n\n    /**\n     * Creates a Predicate that checks if the input object is equal to the\n     * specified object by identity.\n     *\n     * @param <T>  the type that the predicate queries\n     * @param value  the value to compare against\n     * @return the predicate\n     * @see IdentityPredicate\n     */\n    public static <T> Predicate<T> identityPredicate(final T value) {\n        return IdentityPredicate.identityPredicate(value);\n    }\n\n    /**\n     * Creates a Predicate that checks if the object passed in is of\n     * a particular type, using instanceof. A <code>null</code> input\n     * object will return <code>false</code>.\n     *\n     * @param type  the type to check for, may not be null\n     * @return the predicate\n     * @throws NullPointerException if the class is null\n     * @see InstanceofPredicate\n     */\n    public static Predicate<Object> instanceofPredicate(final Class<?> type) {\n        return InstanceofPredicate.instanceOfPredicate(type);\n    }\n\n    /**\n     * Creates a Predicate that returns true the first time an object is\n     * encountered, and false if the same object is received\n     * again. The comparison is by equals(). A <code>null</code> input object\n     * is accepted and will return true the first time, and false subsequently\n     * as well.\n     *\n     * @param <T>  the type that the predicate queries\n     * @return the predicate\n     * @see UniquePredicate\n     */\n    public static <T> Predicate<T> uniquePredicate() {\n        // must return new instance each time\n        return UniquePredicate.uniquePredicate();\n    }\n\n    /**\n     * Creates a Predicate that invokes a method on the input object.\n     * The method must return either a boolean or a non-null Boolean,\n     * and have no parameters. If the input object is null, a\n     * PredicateException is thrown.\n     * <p>\n     * For example, <code>PredicateUtils.invokerPredicate(\"isEmpty\");</code>\n     * will call the <code>isEmpty</code> method on the input object to\n     * determine the predicate result.\n     *\n     * @param <T>  the type that the predicate queries\n     * @param methodName  the method name to call on the input object, may not be null\n     * @return the predicate\n     * @throws NullPointerException if the methodName is null.\n     * @see InvokerTransformer\n     * @see TransformerPredicate\n     */\n    public static <T> Predicate<T> invokerPredicate(final String methodName) {\n        // reuse transformer as it has caching - this is lazy really, should have inner class here\n        return asPredicate(InvokerTransformer.<Object, Boolean>invokerTransformer(methodName));\n    }\n\n    /**\n     * Creates a Predicate that invokes a method on the input object.\n     * The method must return either a boolean or a non-null Boolean,\n     * and have no parameters. If the input object is null, a\n     * PredicateException is thrown.\n     * <p>\n     * For example, <code>PredicateUtils.invokerPredicate(\"isEmpty\");</code>\n     * will call the <code>isEmpty</code> method on the input object to\n     * determine the predicate result.\n     *\n     * @param <T>  the type that the predicate queries\n     * @param methodName  the method name to call on the input object, may not be null\n     * @param paramTypes  the parameter types\n     * @param args  the arguments\n     * @return the predicate\n     * @throws NullPointerException if the method name is null\n     * @throws IllegalArgumentException if the paramTypes and args don't match\n     * @see InvokerTransformer\n     * @see TransformerPredicate\n     */\n    public static <T> Predicate<T> invokerPredicate(final String methodName, final Class<?>[] paramTypes,\n                                                    final Object[] args) {\n        // reuse transformer as it has caching - this is lazy really, should have inner class here\n        return asPredicate(InvokerTransformer.<Object, Boolean>invokerTransformer(methodName, paramTypes, args));\n    }\n\n    // Boolean combinations\n    //-----------------------------------------------------------------------------\n\n    /**\n     * Create a new Predicate that returns true only if both of the specified\n     * predicates are true.\n     *\n     * @param <T>  the type that the predicate queries\n     * @param predicate1  the first predicate, may not be null\n     * @param predicate2  the second predicate, may not be null\n     * @return the <code>and</code> predicate\n     * @throws NullPointerException if either predicate is null\n     * @see AndPredicate\n     */\n    public static <T> Predicate<T> andPredicate(final Predicate<? super T> predicate1,\n                                                final Predicate<? super T> predicate2) {\n        return AndPredicate.andPredicate(predicate1, predicate2);\n    }\n\n    /**\n     * Create a new Predicate that returns true only if all of the specified\n     * predicates are true.\n     * If the array of predicates is empty, then this predicate returns true.\n     *\n     * @param <T>  the type that the predicate queries\n     * @param predicates  an array of predicates to check, may not be null\n     * @return the <code>all</code> predicate\n     * @throws NullPointerException if the predicates array is null\n     * @throws NullPointerException if any predicate in the array is null\n     * @see AllPredicate\n     */\n    public static <T> Predicate<T> allPredicate(final Predicate<? super T>... predicates) {\n        return AllPredicate.allPredicate(predicates);\n    }\n\n    /**\n     * Create a new Predicate that returns true only if all of the specified\n     * predicates are true. The predicates are checked in iterator order.\n     * If the collection of predicates is empty, then this predicate returns true.\n     *\n     * @param <T>  the type that the predicate queries\n     * @param predicates  a collection of predicates to check, may not be null\n     * @return the <code>all</code> predicate\n     * @throws NullPointerException if the predicates collection is null\n     * @throws NullPointerException if any predicate in the collection is null\n     * @see AllPredicate\n     */\n    public static <T> Predicate<T> allPredicate(final Collection<? extends Predicate<? super T>> predicates) {\n        return AllPredicate.allPredicate(predicates);\n    }\n\n    /**\n     * Create a new Predicate that returns true if either of the specified\n     * predicates are true.\n     *\n     * @param <T>  the type that the predicate queries\n     * @param predicate1  the first predicate, may not be null\n     * @param predicate2  the second predicate, may not be null\n     * @return the <code>or</code> predicate\n     * @throws NullPointerException if either predicate is null\n     * @see OrPredicate\n     */\n    public static <T> Predicate<T> orPredicate(final Predicate<? super T> predicate1,\n                                               final Predicate<? super T> predicate2) {\n        return OrPredicate.orPredicate(predicate1, predicate2);\n    }\n\n    /**\n     * Create a new Predicate that returns true if any of the specified\n     * predicates are true.\n     * If the array of predicates is empty, then this predicate returns false.\n     *\n     * @param <T>  the type that the predicate queries\n     * @param predicates  an array of predicates to check, may not be null\n     * @return the <code>any</code> predicate\n     * @throws NullPointerException if the predicates array is null\n     * @throws NullPointerException if any predicate in the array is null\n     * @see AnyPredicate\n     */\n    public static <T> Predicate<T> anyPredicate(final Predicate<? super T>... predicates) {\n        return AnyPredicate.anyPredicate(predicates);\n    }\n\n    /**\n     * Create a new Predicate that returns true if any of the specified\n     * predicates are true. The predicates are checked in iterator order.\n     * If the collection of predicates is empty, then this predicate returns false.\n     *\n     * @param <T>  the type that the predicate queries\n     * @param predicates  a collection of predicates to check, may not be null\n     * @return the <code>any</code> predicate\n     * @throws NullPointerException if the predicates collection is null\n     * @throws NullPointerException if any predicate in the collection is null\n     * @see AnyPredicate\n     */\n    public static <T> Predicate<T> anyPredicate(final Collection<? extends Predicate<? super T>> predicates) {\n        return AnyPredicate.anyPredicate(predicates);\n    }\n\n    /**\n     * Create a new Predicate that returns true if one, but not both, of the\n     * specified predicates are true. XOR\n     *\n     * @param <T>  the type that the predicate queries\n     * @param predicate1  the first predicate, may not be null\n     * @param predicate2  the second predicate, may not be null\n     * @return the <code>either</code> predicate\n     * @throws NullPointerException if either predicate is null\n     * @see OnePredicate\n     */\n    public static <T> Predicate<T> eitherPredicate(final Predicate<? super T> predicate1,\n                                                   final Predicate<? super T> predicate2) {\n        @SuppressWarnings(\"unchecked\")\n        final Predicate<T> onePredicate = PredicateUtils.onePredicate(predicate1, predicate2);\n        return onePredicate;\n    }\n\n    /**\n     * Create a new Predicate that returns true if only one of the specified\n     * predicates are true.\n     * If the array of predicates is empty, then this predicate returns false.\n     *\n     * @param <T>  the type that the predicate queries\n     * @param predicates  an array of predicates to check, may not be null\n     * @return the <code>one</code> predicate\n     * @throws NullPointerException if the predicates array is null\n     * @throws NullPointerException if any predicate in the array is null\n     * @see OnePredicate\n     */\n    public static <T> Predicate<T> onePredicate(final Predicate<? super T>... predicates) {\n        return OnePredicate.onePredicate(predicates);\n    }\n\n    /**\n     * Create a new Predicate that returns true if only one of the specified\n     * predicates are true. The predicates are checked in iterator order.\n     * If the collection of predicates is empty, then this predicate returns false.\n     *\n     * @param <T>  the type that the predicate queries\n     * @param predicates  a collection of predicates to check, may not be null\n     * @return the <code>one</code> predicate\n     * @throws NullPointerException if the predicates collection is null\n     * @throws NullPointerException if any predicate in the collection is null\n     * @see OnePredicate\n     */\n    public static <T> Predicate<T> onePredicate(final Collection<? extends Predicate<? super T>> predicates) {\n        return OnePredicate.onePredicate(predicates);\n    }\n\n    /**\n     * Create a new Predicate that returns true if neither of the specified\n     * predicates are true.\n     *\n     * @param <T>  the type that the predicate queries\n     * @param predicate1  the first predicate, may not be null\n     * @param predicate2  the second predicate, may not be null\n     * @return the <code>neither</code> predicate\n     * @throws NullPointerException if either predicate is null\n     * @see NonePredicate\n     */\n    public static <T> Predicate<T> neitherPredicate(final Predicate<? super T> predicate1,\n                                                    final Predicate<? super T> predicate2) {\n        @SuppressWarnings(\"unchecked\")\n        final Predicate<T> nonePredicate = PredicateUtils.nonePredicate(predicate1, predicate2);\n        return nonePredicate;\n    }\n\n    /**\n     * Create a new Predicate that returns true if none of the specified\n     * predicates are true.\n     * If the array of predicates is empty, then this predicate returns true.\n     *\n     * @param <T>  the type that the predicate queries\n     * @param predicates  an array of predicates to check, may not be null\n     * @return the <code>none</code> predicate\n     * @throws NullPointerException if the predicates array is null\n     * @throws NullPointerException if any predicate in the array is null\n     * @see NonePredicate\n     */\n    public static <T> Predicate<T> nonePredicate(final Predicate<? super T>... predicates) {\n        return NonePredicate.nonePredicate(predicates);\n    }\n\n    /**\n     * Create a new Predicate that returns true if none of the specified\n     * predicates are true. The predicates are checked in iterator order.\n     * If the collection of predicates is empty, then this predicate returns true.\n     *\n     * @param <T>  the type that the predicate queries\n     * @param predicates  a collection of predicates to check, may not be null\n     * @return the <code>none</code> predicate\n     * @throws NullPointerException if the predicates collection is null\n     * @throws NullPointerException if any predicate in the collection is null\n     * @see NonePredicate\n     */\n    public static <T> Predicate<T> nonePredicate(final Collection<? extends Predicate<? super T>> predicates) {\n        return NonePredicate.nonePredicate(predicates);\n    }\n\n    /**\n     * Create a new Predicate that returns true if the specified predicate\n     * returns false and vice versa.\n     *\n     * @param <T>  the type that the predicate queries\n     * @param predicate  the predicate to not\n     * @return the <code>not</code> predicate\n     * @throws NullPointerException if the predicate is null\n     * @see NotPredicate\n     */\n    public static <T> Predicate<T> notPredicate(final Predicate<? super T> predicate) {\n        return NotPredicate.notPredicate(predicate);\n    }\n\n    // Adaptors\n    //-----------------------------------------------------------------------------\n\n    /**\n     * Create a new Predicate that wraps a Transformer. The Transformer must\n     * return either Boolean.TRUE or Boolean.FALSE otherwise a PredicateException\n     * will be thrown.\n     *\n     * @param <T>  the type that the predicate queries\n     * @param transformer  the transformer to wrap, may not be null\n     * @return the transformer wrapping predicate\n     * @throws NullPointerException if the transformer is null\n     * @see TransformerPredicate\n     */\n    public static <T> Predicate<T> asPredicate(final Transformer<? super T, Boolean> transformer) {\n        return TransformerPredicate.transformerPredicate(transformer);\n    }\n\n    // Null handlers\n    //-----------------------------------------------------------------------------\n\n    /**\n     * Gets a Predicate that throws an exception if the input object is null,\n     * otherwise it calls the specified Predicate. This allows null handling\n     * behaviour to be added to Predicates that don't support nulls.\n     *\n     * @param <T>  the type that the predicate queries\n     * @param predicate  the predicate to wrap, may not be null\n     * @return the predicate\n     * @throws NullPointerException if the predicate is null.\n     * @see NullIsExceptionPredicate\n     */\n    public static <T> Predicate<T> nullIsExceptionPredicate(final Predicate<? super T> predicate){\n        return NullIsExceptionPredicate.nullIsExceptionPredicate(predicate);\n    }\n\n    /**\n     * Gets a Predicate that returns false if the input object is null, otherwise\n     * it calls the specified Predicate. This allows null handling behaviour to\n     * be added to Predicates that don't support nulls.\n     *\n     * @param <T>  the type that the predicate queries\n     * @param predicate  the predicate to wrap, may not be null\n     * @return the predicate\n     * @throws NullPointerException if the predicate is null.\n     * @see NullIsFalsePredicate\n     */\n    public static <T> Predicate<T> nullIsFalsePredicate(final Predicate<? super T> predicate){\n        return NullIsFalsePredicate.nullIsFalsePredicate(predicate);\n    }\n\n    /**\n     * Gets a Predicate that returns true if the input object is null, otherwise\n     * it calls the specified Predicate. This allows null handling behaviour to\n     * be added to Predicates that don't support nulls.\n     *\n     * @param <T>  the type that the predicate queries\n     * @param predicate  the predicate to wrap, may not be null\n     * @return the predicate\n     * @throws NullPointerException if the predicate is null.\n     * @see NullIsTruePredicate\n     */\n    public static <T> Predicate<T> nullIsTruePredicate(final Predicate<? super T> predicate){\n        return NullIsTruePredicate.nullIsTruePredicate(predicate);\n    }\n\n    // Transformed\n    //-----------------------------------------------------------------------\n    /**\n     * Creates a predicate that transforms the input object before passing it\n     * to the predicate.\n     *\n     * @param <T>  the type that the predicate queries\n     * @param transformer  the transformer to call first\n     * @param predicate  the predicate to call with the result of the transform\n     * @return the predicate\n     * @throws NullPointerException if the transformer or the predicate is null\n     * @see TransformedPredicate\n     * @since 3.1\n     */\n    public static <T> Predicate<T> transformedPredicate(\n            final Transformer<? super T, ? extends T> transformer, final Predicate<? super T> predicate) {\n        return TransformedPredicate.transformedPredicate(transformer, predicate);\n    }\n\n}\n",
  "tokensGeneralGrammar" : [ "null", "true", "false", ",", ".", ":", ";", "?", "(", ")", "jdVar", "stream", "Arrays", "allMatch", "noneMatch", "anyMatch", "~", ">>", "<<", ">>>", "|", "&", "^", "+", "-", "/", "*", "%", "&&", "||", ">=", "<=", ">", "<", "==", "!=", "instanceof", "class", "methodResultID", "this" ],
  "tokensGeneralValuesGlobalDictionary" : [ [ "0", "int" ], [ "1", "int" ], [ "-1", "int" ], [ "0.0", "double" ], [ "1.0", "double" ], [ "-1.0", "double" ], [ "\"\"", "String" ], [ "\" \"", "String" ] ],
  "tokensProjectClasses" : [ [ "BidiMap", "org.apache.commons.collections4" ], [ "Equator", "org.apache.commons.collections4" ], [ "MultiSet", "org.apache.commons.collections4" ], [ "IteratorUtils", "org.apache.commons.collections4" ], [ "ComparatorUtils", "org.apache.commons.collections4" ], [ "FunctorException", "org.apache.commons.collections4" ], [ "AbstractDualBidiMap", "org.apache.commons.collections4.bidimap" ], [ "UnmodifiableBidiMap", "org.apache.commons.collections4.bidimap" ], [ "AbstractOrderedBidiMapDecorator", "org.apache.commons.collections4.bidimap" ], [ "UnmodifiableOrderedBidiMap", "org.apache.commons.collections4.bidimap" ], [ "AbstractBidiMapDecorator", "org.apache.commons.collections4.bidimap" ], [ "DualLinkedHashBidiMap", "org.apache.commons.collections4.bidimap" ], [ "UnmodifiableSortedBidiMap", "org.apache.commons.collections4.bidimap" ], [ "AbstractSortedBidiMapDecorator", "org.apache.commons.collections4.bidimap" ], [ "DualHashBidiMap", "org.apache.commons.collections4.bidimap" ], [ "DualTreeBidiMap", "org.apache.commons.collections4.bidimap" ], [ "TreeBidiMap", "org.apache.commons.collections4.bidimap" ], [ "MultiMapUtils", "org.apache.commons.collections4" ], [ "BoundedCollection", "org.apache.commons.collections4" ], [ "UnmodifiableBoundedCollection", "org.apache.commons.collections4.collection" ], [ "CompositeCollection", "org.apache.commons.collections4.collection" ], [ "TransformedCollection", "org.apache.commons.collections4.collection" ], [ "PredicatedCollection", "org.apache.commons.collections4.collection" ], [ "IndexedCollection", "org.apache.commons.collections4.collection" ], [ "SynchronizedCollection", "org.apache.commons.collections4.collection" ], [ "UnmodifiableCollection", "org.apache.commons.collections4.collection" ], [ "AbstractCollectionDecorator", "org.apache.commons.collections4.collection" ], [ "OrderedBidiMap", "org.apache.commons.collections4" ], [ "FactoryUtils", "org.apache.commons.collections4" ], [ "IterableGet", "org.apache.commons.collections4" ], [ "ListUtils", "org.apache.commons.collections4" ], [ "Closure", "org.apache.commons.collections4" ], [ "IterableSortedMap", "org.apache.commons.collections4" ], [ "MapUtils", "org.apache.commons.collections4" ], [ "Transformer", "org.apache.commons.collections4" ], [ "DefaultEquator", "org.apache.commons.collections4.functors" ], [ "StringValueTransformer", "org.apache.commons.collections4.functors" ], [ "PredicateDecorator", "org.apache.commons.collections4.functors" ], [ "IfTransformer", "org.apache.commons.collections4.functors" ], [ "IdentityPredicate", "org.apache.commons.collections4.functors" ], [ "ExceptionClosure", "org.apache.commons.collections4.functors" ], [ "NOPClosure", "org.apache.commons.collections4.functors" ], [ "ClosureTransformer", "org.apache.commons.collections4.functors" ], [ "FunctorUtils", "org.apache.commons.collections4.functors" ], [ "TransformerPredicate", "org.apache.commons.collections4.functors" ], [ "NullPredicate", "org.apache.commons.collections4.functors" ], [ "ConstantTransformer", "org.apache.commons.collections4.functors" ], [ "PredicateTransformer", "org.apache.commons.collections4.functors" ], [ "WhileClosure", "org.apache.commons.collections4.functors" ], [ "ForClosure", "org.apache.commons.collections4.functors" ], [ "NullIsTruePredicate", "org.apache.commons.collections4.functors" ], [ "TransformedPredicate", "org.apache.commons.collections4.functors" ], [ "NonePredicate", "org.apache.commons.collections4.functors" ], [ "ExceptionTransformer", "org.apache.commons.collections4.functors" ], [ "SwitchTransformer", "org.apache.commons.collections4.functors" ], [ "TransformerClosure", "org.apache.commons.collections4.functors" ], [ "OrPredicate", "org.apache.commons.collections4.functors" ], [ "NOPTransformer", "org.apache.commons.collections4.functors" ], [ "MapTransformer", "org.apache.commons.collections4.functors" ], [ "ExceptionFactory", "org.apache.commons.collections4.functors" ], [ "ChainedClosure", "org.apache.commons.collections4.functors" ], [ "AndPredicate", "org.apache.commons.collections4.functors" ], [ "PrototypeFactory", "org.apache.commons.collections4.functors" ], [ "ExceptionPredicate", "org.apache.commons.collections4.functors" ], [ "AbstractQuantifierPredicate", "org.apache.commons.collections4.functors" ], [ "InstanceofPredicate", "org.apache.commons.collections4.functors" ], [ "InvokerTransformer", "org.apache.commons.collections4.functors" ], [ "FalsePredicate", "org.apache.commons.collections4.functors" ], [ "CloneTransformer", "org.apache.commons.collections4.functors" ], [ "NotPredicate", "org.apache.commons.collections4.functors" ], [ "ConstantFactory", "org.apache.commons.collections4.functors" ], [ "ChainedTransformer", "org.apache.commons.collections4.functors" ], [ "ComparatorPredicate", "org.apache.commons.collections4.functors" ], [ "CatchAndRethrowClosure", "org.apache.commons.collections4.functors" ], [ "AllPredicate", "org.apache.commons.collections4.functors" ], [ "NullIsFalsePredicate", "org.apache.commons.collections4.functors" ], [ "NullIsExceptionPredicate", "org.apache.commons.collections4.functors" ], [ "AnyPredicate", "org.apache.commons.collections4.functors" ], [ "TruePredicate", "org.apache.commons.collections4.functors" ], [ "FactoryTransformer", "org.apache.commons.collections4.functors" ], [ "NotNullPredicate", "org.apache.commons.collections4.functors" ], [ "SwitchClosure", "org.apache.commons.collections4.functors" ], [ "UniquePredicate", "org.apache.commons.collections4.functors" ], [ "InstantiateTransformer", "org.apache.commons.collections4.functors" ], [ "OnePredicate", "org.apache.commons.collections4.functors" ], [ "EqualPredicate", "org.apache.commons.collections4.functors" ], [ "InstantiateFactory", "org.apache.commons.collections4.functors" ], [ "IfClosure", "org.apache.commons.collections4.functors" ], [ "ResettableListIterator", "org.apache.commons.collections4" ], [ "OrderedIterator", "org.apache.commons.collections4" ], [ "ComparatorChain", "org.apache.commons.collections4.comparators" ], [ "BooleanComparator", "org.apache.commons.collections4.comparators" ], [ "ReverseComparator", "org.apache.commons.collections4.comparators" ], [ "ComparableComparator", "org.apache.commons.collections4.comparators" ], [ "TransformingComparator", "org.apache.commons.collections4.comparators" ], [ "FixedOrderComparator", "org.apache.commons.collections4.comparators" ], [ "NullComparator", "org.apache.commons.collections4.comparators" ], [ "CollectionUtils", "org.apache.commons.collections4" ], [ "ListValuedMap", "org.apache.commons.collections4" ], [ "AbstractIterableGetMapDecorator", "org.apache.commons.collections4.splitmap" ], [ "TransformedSplitMap", "org.apache.commons.collections4.splitmap" ], [ "Factory", "org.apache.commons.collections4" ], [ "IterableUtils", "org.apache.commons.collections4" ], [ "Bag", "org.apache.commons.collections4" ], [ "Predicate", "org.apache.commons.collections4" ], [ "SortedBag", "org.apache.commons.collections4" ], [ "TrieUtils", "org.apache.commons.collections4" ], [ "ClosureUtils", "org.apache.commons.collections4" ], [ "PatriciaTrie", "org.apache.commons.collections4.trie" ], [ "UnmodifiableTrie", "org.apache.commons.collections4.trie" ], [ "KeyAnalyzer", "org.apache.commons.collections4.trie" ], [ "AbstractPatriciaTrie", "org.apache.commons.collections4.trie" ], [ "AbstractBitwiseTrie", "org.apache.commons.collections4.trie" ], [ "StringKeyAnalyzer", "org.apache.commons.collections4.trie.analyzer" ], [ "TransformedSortedMap", "org.apache.commons.collections4.map" ], [ "AbstractLinkedMap", "org.apache.commons.collections4.map" ], [ "Flat3Map", "org.apache.commons.collections4.map" ], [ "PredicatedMap", "org.apache.commons.collections4.map" ], [ "FixedSizeSortedMap", "org.apache.commons.collections4.map" ], [ "UnmodifiableSortedMap", "org.apache.commons.collections4.map" ], [ "PredicatedSortedMap", "org.apache.commons.collections4.map" ], [ "DefaultedMap", "org.apache.commons.collections4.map" ], [ "ReferenceIdentityMap", "org.apache.commons.collections4.map" ], [ "AbstractSortedMapDecorator", "org.apache.commons.collections4.map" ], [ "AbstractInputCheckedMapDecorator", "org.apache.commons.collections4.map" ], [ "FixedSizeMap", "org.apache.commons.collections4.map" ], [ "LazySortedMap", "org.apache.commons.collections4.map" ], [ "UnmodifiableOrderedMap", "org.apache.commons.collections4.map" ], [ "CaseInsensitiveMap", "org.apache.commons.collections4.map" ], [ "AbstractHashedMap", "org.apache.commons.collections4.map" ], [ "AbstractOrderedMapDecorator", "org.apache.commons.collections4.map" ], [ "UnmodifiableMap", "org.apache.commons.collections4.map" ], [ "EntrySetToMapIteratorAdapter", "org.apache.commons.collections4.map" ], [ "AbstractIterableMap", "org.apache.commons.collections4.map" ], [ "ListOrderedMap", "org.apache.commons.collections4.map" ], [ "LinkedMap", "org.apache.commons.collections4.map" ], [ "SingletonMap", "org.apache.commons.collections4.map" ], [ "UnmodifiableEntrySet", "org.apache.commons.collections4.map" ], [ "StaticBucketMap", "org.apache.commons.collections4.map" ], [ "AbstractMapDecorator", "org.apache.commons.collections4.map" ], [ "AbstractReferenceMap", "org.apache.commons.collections4.map" ], [ "MultiKeyMap", "org.apache.commons.collections4.map" ], [ "HashedMap", "org.apache.commons.collections4.map" ], [ "LazyMap", "org.apache.commons.collections4.map" ], [ "PassiveExpiringMap", "org.apache.commons.collections4.map" ], [ "MultiValueMap", "org.apache.commons.collections4.map" ], [ "LRUMap", "org.apache.commons.collections4.map" ], [ "ReferenceMap", "org.apache.commons.collections4.map" ], [ "TransformedMap", "org.apache.commons.collections4.map" ], [ "CompositeMap", "org.apache.commons.collections4.map" ], [ "UnmodifiableMapEntry", "org.apache.commons.collections4.keyvalue" ], [ "MultiKey", "org.apache.commons.collections4.keyvalue" ], [ "DefaultMapEntry", "org.apache.commons.collections4.keyvalue" ], [ "DefaultKeyValue", "org.apache.commons.collections4.keyvalue" ], [ "AbstractMapEntryDecorator", "org.apache.commons.collections4.keyvalue" ], [ "AbstractKeyValue", "org.apache.commons.collections4.keyvalue" ], [ "TiedMapEntry", "org.apache.commons.collections4.keyvalue" ], [ "AbstractMapEntry", "org.apache.commons.collections4.keyvalue" ], [ "MultiSetUtils", "org.apache.commons.collections4" ], [ "MapIterator", "org.apache.commons.collections4" ], [ "AbstractMultiValuedMap", "org.apache.commons.collections4.multimap" ], [ "UnmodifiableMultiValuedMap", "org.apache.commons.collections4.multimap" ], [ "HashSetValuedHashMap", "org.apache.commons.collections4.multimap" ], [ "TransformedMultiValuedMap", "org.apache.commons.collections4.multimap" ], [ "AbstractSetValuedMap", "org.apache.commons.collections4.multimap" ], [ "AbstractListValuedMap", "org.apache.commons.collections4.multimap" ], [ "ArrayListValuedHashMap", "org.apache.commons.collections4.multimap" ], [ "AbstractMultiValuedMapDecorator", "org.apache.commons.collections4.multimap" ], [ "LazyList", "org.apache.commons.collections4.list" ], [ "AbstractSerializableListDecorator", "org.apache.commons.collections4.list" ], [ "TreeList", "org.apache.commons.collections4.list" ], [ "SetUniqueList", "org.apache.commons.collections4.list" ], [ "AbstractListDecorator", "org.apache.commons.collections4.list" ], [ "NodeCachingLinkedList", "org.apache.commons.collections4.list" ], [ "UnmodifiableList", "org.apache.commons.collections4.list" ], [ "FixedSizeList", "org.apache.commons.collections4.list" ], [ "TransformedList", "org.apache.commons.collections4.list" ], [ "GrowthList", "org.apache.commons.collections4.list" ], [ "AbstractLinkedList", "org.apache.commons.collections4.list" ], [ "CursorableLinkedList", "org.apache.commons.collections4.list" ], [ "PredicatedList", "org.apache.commons.collections4.list" ], [ "OrderedMap", "org.apache.commons.collections4" ], [ "AbstractQueueDecorator", "org.apache.commons.collections4.queue" ], [ "TransformedQueue", "org.apache.commons.collections4.queue" ], [ "UnmodifiableQueue", "org.apache.commons.collections4.queue" ], [ "CircularFifoQueue", "org.apache.commons.collections4.queue" ], [ "PredicatedQueue", "org.apache.commons.collections4.queue" ], [ "FluentIterable", "org.apache.commons.collections4" ], [ "TransformerUtils", "org.apache.commons.collections4" ], [ "PredicateUtils", "org.apache.commons.collections4" ], [ "ResettableIterator", "org.apache.commons.collections4" ], [ "MultiValuedMap", "org.apache.commons.collections4" ], [ "SetUtils", "org.apache.commons.collections4" ], [ "SortedBidiMap", "org.apache.commons.collections4" ], [ "ArrayStack", "org.apache.commons.collections4" ], [ "Put", "org.apache.commons.collections4" ], [ "OrderedMapIterator", "org.apache.commons.collections4" ], [ "TransformedSet", "org.apache.commons.collections4.set" ], [ "CompositeSet", "org.apache.commons.collections4.set" ], [ "TransformedNavigableSet", "org.apache.commons.collections4.set" ], [ "PredicatedNavigableSet", "org.apache.commons.collections4.set" ], [ "AbstractSetDecorator", "org.apache.commons.collections4.set" ], [ "ListOrderedSet", "org.apache.commons.collections4.set" ], [ "UnmodifiableSet", "org.apache.commons.collections4.set" ], [ "AbstractSerializableSetDecorator", "org.apache.commons.collections4.set" ], [ "MapBackedSet", "org.apache.commons.collections4.set" ], [ "UnmodifiableSortedSet", "org.apache.commons.collections4.set" ], [ "PredicatedSortedSet", "org.apache.commons.collections4.set" ], [ "AbstractSortedSetDecorator", "org.apache.commons.collections4.set" ], [ "PredicatedSet", "org.apache.commons.collections4.set" ], [ "AbstractNavigableSetDecorator", "org.apache.commons.collections4.set" ], [ "UnmodifiableNavigableSet", "org.apache.commons.collections4.set" ], [ "TransformedSortedSet", "org.apache.commons.collections4.set" ], [ "IterableMap", "org.apache.commons.collections4" ], [ "EnumerationUtils", "org.apache.commons.collections4" ], [ "DeleteCommand", "org.apache.commons.collections4.sequence" ], [ "ReplacementsHandler", "org.apache.commons.collections4.sequence" ], [ "InsertCommand", "org.apache.commons.collections4.sequence" ], [ "SequencesComparator", "org.apache.commons.collections4.sequence" ], [ "ReplacementsFinder", "org.apache.commons.collections4.sequence" ], [ "KeepCommand", "org.apache.commons.collections4.sequence" ], [ "EditCommand", "org.apache.commons.collections4.sequence" ], [ "CommandVisitor", "org.apache.commons.collections4.sequence" ], [ "EditScript", "org.apache.commons.collections4.sequence" ], [ "QueueUtils", "org.apache.commons.collections4" ], [ "SetValuedMap", "org.apache.commons.collections4" ], [ "SynchronizedBag", "org.apache.commons.collections4.bag" ], [ "AbstractMapBag", "org.apache.commons.collections4.bag" ], [ "CollectionBag", "org.apache.commons.collections4.bag" ], [ "UnmodifiableBag", "org.apache.commons.collections4.bag" ], [ "PredicatedSortedBag", "org.apache.commons.collections4.bag" ], [ "UnmodifiableSortedBag", "org.apache.commons.collections4.bag" ], [ "HashBag", "org.apache.commons.collections4.bag" ], [ "AbstractBagDecorator", "org.apache.commons.collections4.bag" ], [ "TransformedSortedBag", "org.apache.commons.collections4.bag" ], [ "TreeBag", "org.apache.commons.collections4.bag" ], [ "PredicatedBag", "org.apache.commons.collections4.bag" ], [ "SynchronizedSortedBag", "org.apache.commons.collections4.bag" ], [ "CollectionSortedBag", "org.apache.commons.collections4.bag" ], [ "TransformedBag", "org.apache.commons.collections4.bag" ], [ "AbstractSortedBagDecorator", "org.apache.commons.collections4.bag" ], [ "HashMultiSet", "org.apache.commons.collections4.multiset" ], [ "AbstractMultiSet", "org.apache.commons.collections4.multiset" ], [ "PredicatedMultiSet", "org.apache.commons.collections4.multiset" ], [ "AbstractMultiSetDecorator", "org.apache.commons.collections4.multiset" ], [ "AbstractMapMultiSet", "org.apache.commons.collections4.multiset" ], [ "UnmodifiableMultiSet", "org.apache.commons.collections4.multiset" ], [ "SynchronizedMultiSet", "org.apache.commons.collections4.multiset" ], [ "BagUtils", "org.apache.commons.collections4" ], [ "Unmodifiable", "org.apache.commons.collections4" ], [ "Get", "org.apache.commons.collections4" ], [ "Trie", "org.apache.commons.collections4" ], [ "MultiMap", "org.apache.commons.collections4" ], [ "KeyValue", "org.apache.commons.collections4" ], [ "IteratorChain", "org.apache.commons.collections4.iterators" ], [ "EmptyListIterator", "org.apache.commons.collections4.iterators" ], [ "UnmodifiableOrderedMapIterator", "org.apache.commons.collections4.iterators" ], [ "AbstractListIteratorDecorator", "org.apache.commons.collections4.iterators" ], [ "ZippingIterator", "org.apache.commons.collections4.iterators" ], [ "UnmodifiableIterator", "org.apache.commons.collections4.iterators" ], [ "CollatingIterator", "org.apache.commons.collections4.iterators" ], [ "UniqueFilterIterator", "org.apache.commons.collections4.iterators" ], [ "ReverseListIterator", "org.apache.commons.collections4.iterators" ], [ "BoundedIterator", "org.apache.commons.collections4.iterators" ], [ "AbstractIteratorDecorator", "org.apache.commons.collections4.iterators" ], [ "TransformIterator", "org.apache.commons.collections4.iterators" ], [ "AbstractEmptyIterator", "org.apache.commons.collections4.iterators" ], [ "NodeListIterator", "org.apache.commons.collections4.iterators" ], [ "ArrayListIterator", "org.apache.commons.collections4.iterators" ], [ "LazyIteratorChain", "org.apache.commons.collections4.iterators" ], [ "LoopingListIterator", "org.apache.commons.collections4.iterators" ], [ "PeekingIterator", "org.apache.commons.collections4.iterators" ], [ "ObjectGraphIterator", "org.apache.commons.collections4.iterators" ], [ "ArrayIterator", "org.apache.commons.collections4.iterators" ], [ "PermutationIterator", "org.apache.commons.collections4.iterators" ], [ "SingletonListIterator", "org.apache.commons.collections4.iterators" ], [ "EmptyMapIterator", "org.apache.commons.collections4.iterators" ], [ "ObjectArrayIterator", "org.apache.commons.collections4.iterators" ], [ "EnumerationIterator", "org.apache.commons.collections4.iterators" ], [ "IteratorIterable", "org.apache.commons.collections4.iterators" ], [ "AbstractEmptyMapIterator", "org.apache.commons.collections4.iterators" ], [ "LoopingIterator", "org.apache.commons.collections4.iterators" ], [ "IteratorEnumeration", "org.apache.commons.collections4.iterators" ], [ "SingletonIterator", "org.apache.commons.collections4.iterators" ], [ "ListIteratorWrapper", "org.apache.commons.collections4.iterators" ], [ "SkippingIterator", "org.apache.commons.collections4.iterators" ], [ "EmptyOrderedIterator", "org.apache.commons.collections4.iterators" ], [ "AbstractMapIteratorDecorator", "org.apache.commons.collections4.iterators" ], [ "ObjectArrayListIterator", "org.apache.commons.collections4.iterators" ], [ "UnmodifiableListIterator", "org.apache.commons.collections4.iterators" ], [ "EmptyOrderedMapIterator", "org.apache.commons.collections4.iterators" ], [ "UnmodifiableMapIterator", "org.apache.commons.collections4.iterators" ], [ "EmptyIterator", "org.apache.commons.collections4.iterators" ], [ "EntrySetMapIterator", "org.apache.commons.collections4.iterators" ], [ "PushbackIterator", "org.apache.commons.collections4.iterators" ], [ "FilterIterator", "org.apache.commons.collections4.iterators" ], [ "AbstractUntypedIteratorDecorator", "org.apache.commons.collections4.iterators" ], [ "AbstractOrderedMapIteratorDecorator", "org.apache.commons.collections4.iterators" ], [ "FilterListIterator", "org.apache.commons.collections4.iterators" ], [ "SplitMapUtils", "org.apache.commons.collections4" ], [ "BoundedMap", "org.apache.commons.collections4" ] ],
  "tokensProjectClassesNonPrivateStaticNonVoidMethods" : [ [ "emptyIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> emptyIterator()" ], [ "emptyListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> emptyListIterator()" ], [ "emptyOrderedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> OrderedIterator<E> emptyOrderedIterator()" ], [ "emptyMapIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <K, V> MapIterator<K, V> emptyMapIterator()" ], [ "emptyOrderedMapIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <K, V> OrderedMapIterator<K, V> emptyOrderedMapIterator()" ], [ "singletonIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> singletonIterator(final E object)" ], [ "singletonListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ListIterator<E> singletonListIterator(final E object)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final E... array)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final Object array)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final E[] array, final int start)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final Object array, final int start)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final E[] array, final int start, final int end)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final Object array, final int start, final int end)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final E... array)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final Object array)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final E[] array, final int start)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final Object array, final int start)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final E[] array, final int start, final int end)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final Object array, final int start, final int end)" ], [ "boundedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> BoundedIterator<E> boundedIterator(final Iterator<? extends E> iterator, long max)" ], [ "boundedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> BoundedIterator<E> boundedIterator(final Iterator<? extends E> iterator, long offset, long max)" ], [ "unmodifiableIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> unmodifiableIterator(final Iterator<E> iterator)" ], [ "unmodifiableListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ListIterator<E> unmodifiableListIterator(final ListIterator<E> listIterator)" ], [ "unmodifiableMapIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <K, V> MapIterator<K, V> unmodifiableMapIterator(final MapIterator<K, V> mapIterator)" ], [ "chainedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> chainedIterator(final Iterator<? extends E> iterator1, final Iterator<? extends E> iterator2)" ], [ "chainedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> chainedIterator(final Iterator<? extends E>... iterators)" ], [ "chainedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> chainedIterator(final Collection<Iterator<? extends E>> iterators)" ], [ "collatedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> collatedIterator(final Comparator<? super E> comparator, final Iterator<? extends E> iterator1, final Iterator<? extends E> iterator2)" ], [ "collatedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> collatedIterator(final Comparator<? super E> comparator, final Iterator<? extends E>... iterators)" ], [ "collatedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> collatedIterator(final Comparator<? super E> comparator, final Collection<Iterator<? extends E>> iterators)" ], [ "objectGraphIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> objectGraphIterator(final E root, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <I, O> Iterator<O> transformedIterator(final Iterator<? extends I> iterator, final Transformer<? super I, ? extends O> transform)" ], [ "filteredIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> filteredIterator(final Iterator<? extends E> iterator, final Predicate<? super E> predicate)" ], [ "filteredListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ListIterator<E> filteredListIterator(final ListIterator<? extends E> listIterator, final Predicate<? super E> predicate)" ], [ "loopingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> loopingIterator(final Collection<? extends E> coll)" ], [ "loopingListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> loopingListIterator(final List<E> list)" ], [ "nodeListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static NodeListIterator nodeListIterator(final NodeList nodeList)" ], [ "nodeListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static NodeListIterator nodeListIterator(final Node node)" ], [ "peekingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> peekingIterator(final Iterator<? extends E> iterator)" ], [ "pushbackIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> pushbackIterator(final Iterator<? extends E> iterator)" ], [ "skippingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> SkippingIterator<E> skippingIterator(final Iterator<E> iterator, long offset)" ], [ "zippingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ZippingIterator<E> zippingIterator(final Iterator<? extends E> a, final Iterator<? extends E> b)" ], [ "zippingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ZippingIterator<E> zippingIterator(final Iterator<? extends E> a, final Iterator<? extends E> b, final Iterator<? extends E> c)" ], [ "zippingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ZippingIterator<E> zippingIterator(final Iterator<? extends E>... iterators)" ], [ "asIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> asIterator(final Enumeration<? extends E> enumeration)" ], [ "asIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> asIterator(final Enumeration<? extends E> enumeration, final Collection<? super E> removeCollection)" ], [ "asEnumeration", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Enumeration<E> asEnumeration(final Iterator<? extends E> iterator)" ], [ "asIterable", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterable<E> asIterable(final Iterator<? extends E> iterator)" ], [ "asMultipleUseIterable", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterable<E> asMultipleUseIterable(final Iterator<? extends E> iterator)" ], [ "toListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ListIterator<E> toListIterator(final Iterator<? extends E> iterator)" ], [ "toArray", "org.apache.commons.collections4", "IteratorUtils", "public static Object[] toArray(final Iterator<?> iterator)" ], [ "toArray", "org.apache.commons.collections4", "IteratorUtils", "public static <E> E[] toArray(final Iterator<? extends E> iterator, final Class<E> arrayClass)" ], [ "toList", "org.apache.commons.collections4", "IteratorUtils", "public static <E> List<E> toList(final Iterator<? extends E> iterator)" ], [ "toList", "org.apache.commons.collections4", "IteratorUtils", "public static <E> List<E> toList(final Iterator<? extends E> iterator, final int estimatedSize)" ], [ "getIterator", "org.apache.commons.collections4", "IteratorUtils", "public static Iterator<?> getIterator(final Object obj)" ], [ "forEachButLast", "org.apache.commons.collections4", "IteratorUtils", "public static <E> E forEachButLast(final Iterator<E> iterator, final Closure<? super E> closure)" ], [ "find", "org.apache.commons.collections4", "IteratorUtils", "public static <E> E find(final Iterator<E> iterator, final Predicate<? super E> predicate)" ], [ "indexOf", "org.apache.commons.collections4", "IteratorUtils", "public static <E> int indexOf(final Iterator<E> iterator, final Predicate<? super E> predicate)" ], [ "matchesAny", "org.apache.commons.collections4", "IteratorUtils", "public static <E> boolean matchesAny(final Iterator<E> iterator, final Predicate<? super E> predicate)" ], [ "matchesAll", "org.apache.commons.collections4", "IteratorUtils", "public static <E> boolean matchesAll(final Iterator<E> iterator, final Predicate<? super E> predicate)" ], [ "isEmpty", "org.apache.commons.collections4", "IteratorUtils", "public static boolean isEmpty(final Iterator<?> iterator)" ], [ "contains", "org.apache.commons.collections4", "IteratorUtils", "public static <E> boolean contains(final Iterator<E> iterator, final Object object)" ], [ "get", "org.apache.commons.collections4", "IteratorUtils", "public static <E> E get(final Iterator<E> iterator, final int index)" ], [ "size", "org.apache.commons.collections4", "IteratorUtils", "public static int size(final Iterator<?> iterator)" ], [ "toString", "org.apache.commons.collections4", "IteratorUtils", "public static <E> String toString(final Iterator<E> iterator)" ], [ "toString", "org.apache.commons.collections4", "IteratorUtils", "public static <E> String toString(final Iterator<E> iterator, final Transformer<? super E, String> transformer)" ], [ "toString", "org.apache.commons.collections4", "IteratorUtils", "public static <E> String toString(final Iterator<E> iterator, final Transformer<? super E, String> transformer, final String delimiter, final String prefix, final String suffix)" ], [ "naturalComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E extends Comparable<? super E>> Comparator<E> naturalComparator()" ], [ "chainedComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> Comparator<E> chainedComparator(final Comparator<E>... comparators)" ], [ "chainedComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> Comparator<E> chainedComparator(final Collection<Comparator<E>> comparators)" ], [ "reversedComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> Comparator<E> reversedComparator(final Comparator<E> comparator)" ], [ "booleanComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static Comparator<Boolean> booleanComparator(final boolean trueFirst)" ], [ "nullLowComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> Comparator<E> nullLowComparator(Comparator<E> comparator)" ], [ "nullHighComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> Comparator<E> nullHighComparator(Comparator<E> comparator)" ], [ "transformedComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <I, O> Comparator<I> transformedComparator(Comparator<O> comparator, final Transformer<? super I, ? extends O> transformer)" ], [ "min", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> E min(final E o1, final E o2, Comparator<E> comparator)" ], [ "max", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> E max(final E o1, final E o2, Comparator<E> comparator)" ], [ "unmodifiableBidiMap", "org.apache.commons.collections4.bidimap", "UnmodifiableBidiMap", "public static <K, V> BidiMap<K, V> unmodifiableBidiMap(final BidiMap<? extends K, ? extends V> map)" ], [ "unmodifiableOrderedBidiMap", "org.apache.commons.collections4.bidimap", "UnmodifiableOrderedBidiMap", "public static <K, V> OrderedBidiMap<K, V> unmodifiableOrderedBidiMap(final OrderedBidiMap<? extends K, ? extends V> map)" ], [ "unmodifiableSortedBidiMap", "org.apache.commons.collections4.bidimap", "UnmodifiableSortedBidiMap", "public static <K, V> SortedBidiMap<K, V> unmodifiableSortedBidiMap(final SortedBidiMap<K, ? extends V> map)" ], [ "emptyMultiValuedMap", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> MultiValuedMap<K, V> emptyMultiValuedMap()" ], [ "emptyIfNull", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> MultiValuedMap<K, V> emptyIfNull(final MultiValuedMap<K, V> map)" ], [ "isEmpty", "org.apache.commons.collections4", "MultiMapUtils", "public static boolean isEmpty(final MultiValuedMap<?, ?> map)" ], [ "getCollection", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> Collection<V> getCollection(final MultiValuedMap<K, V> map, final K key)" ], [ "getValuesAsList", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> List<V> getValuesAsList(final MultiValuedMap<K, V> map, final K key)" ], [ "getValuesAsSet", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> Set<V> getValuesAsSet(final MultiValuedMap<K, V> map, final K key)" ], [ "getValuesAsBag", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> Bag<V> getValuesAsBag(final MultiValuedMap<K, V> map, final K key)" ], [ "newListValuedHashMap", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> ListValuedMap<K, V> newListValuedHashMap()" ], [ "newSetValuedHashMap", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> SetValuedMap<K, V> newSetValuedHashMap()" ], [ "unmodifiableMultiValuedMap", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> MultiValuedMap<K, V> unmodifiableMultiValuedMap(final MultiValuedMap<? extends K, ? extends V> map)" ], [ "transformedMultiValuedMap", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> MultiValuedMap<K, V> transformedMultiValuedMap(final MultiValuedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "unmodifiableBoundedCollection", "org.apache.commons.collections4.collection", "UnmodifiableBoundedCollection", "public static <E> BoundedCollection<E> unmodifiableBoundedCollection(final BoundedCollection<? extends E> coll)" ], [ "unmodifiableBoundedCollection", "org.apache.commons.collections4.collection", "UnmodifiableBoundedCollection", "public static <E> BoundedCollection<E> unmodifiableBoundedCollection(Collection<? extends E> coll)" ], [ "transformingCollection", "org.apache.commons.collections4.collection", "TransformedCollection", "public static <E> TransformedCollection<E> transformingCollection(final Collection<E> coll, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedCollection", "org.apache.commons.collections4.collection", "TransformedCollection", "public static <E> TransformedCollection<E> transformedCollection(final Collection<E> collection, final Transformer<? super E, ? extends E> transformer)" ], [ "builder", "org.apache.commons.collections4.collection", "PredicatedCollection", "public static <E> Builder<E> builder(final Predicate<? super E> predicate)" ], [ "notNullBuilder", "org.apache.commons.collections4.collection", "PredicatedCollection", "public static <E> Builder<E> notNullBuilder()" ], [ "predicatedCollection", "org.apache.commons.collections4.collection", "PredicatedCollection", "public static <T> PredicatedCollection<T> predicatedCollection(final Collection<T> coll, final Predicate<? super T> predicate)" ], [ "uniqueIndexedCollection", "org.apache.commons.collections4.collection", "IndexedCollection", "public static <K, C> IndexedCollection<K, C> uniqueIndexedCollection(final Collection<C> coll, final Transformer<C, K> keyTransformer)" ], [ "nonUniqueIndexedCollection", "org.apache.commons.collections4.collection", "IndexedCollection", "public static <K, C> IndexedCollection<K, C> nonUniqueIndexedCollection(final Collection<C> coll, final Transformer<C, K> keyTransformer)" ], [ "synchronizedCollection", "org.apache.commons.collections4.collection", "SynchronizedCollection", "public static <T> SynchronizedCollection<T> synchronizedCollection(final Collection<T> coll)" ], [ "unmodifiableCollection", "org.apache.commons.collections4.collection", "UnmodifiableCollection", "public static <T> Collection<T> unmodifiableCollection(final Collection<? extends T> coll)" ], [ "exceptionFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> exceptionFactory()" ], [ "nullFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> nullFactory()" ], [ "constantFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> constantFactory(final T constantToReturn)" ], [ "prototypeFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> prototypeFactory(final T prototype)" ], [ "instantiateFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> instantiateFactory(final Class<T> classToInstantiate)" ], [ "instantiateFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> instantiateFactory(final Class<T> classToInstantiate, final Class<?>[] paramTypes, final Object[] args)" ], [ "emptyIfNull", "org.apache.commons.collections4", "ListUtils", "public static <T> List<T> emptyIfNull(final List<T> list)" ], [ "defaultIfNull", "org.apache.commons.collections4", "ListUtils", "public static <T> List<T> defaultIfNull(final List<T> list, final List<T> defaultList)" ], [ "intersection", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> intersection(final List<? extends E> list1, final List<? extends E> list2)" ], [ "subtract", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> subtract(final List<E> list1, final List<? extends E> list2)" ], [ "sum", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> sum(final List<? extends E> list1, final List<? extends E> list2)" ], [ "union", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> union(final List<? extends E> list1, final List<? extends E> list2)" ], [ "select", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> select(final Collection<? extends E> inputCollection, final Predicate<? super E> predicate)" ], [ "selectRejected", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> selectRejected(final Collection<? extends E> inputCollection, final Predicate<? super E> predicate)" ], [ "isEqualList", "org.apache.commons.collections4", "ListUtils", "public static boolean isEqualList(final Collection<?> list1, final Collection<?> list2)" ], [ "hashCodeForList", "org.apache.commons.collections4", "ListUtils", "public static int hashCodeForList(final Collection<?> list)" ], [ "retainAll", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> retainAll(final Collection<E> collection, final Collection<?> retain)" ], [ "removeAll", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> removeAll(final Collection<E> collection, final Collection<?> remove)" ], [ "synchronizedList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> synchronizedList(final List<E> list)" ], [ "unmodifiableList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> unmodifiableList(final List<? extends E> list)" ], [ "predicatedList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> predicatedList(final List<E> list, final Predicate<E> predicate)" ], [ "transformedList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> transformedList(final List<E> list, final Transformer<? super E, ? extends E> transformer)" ], [ "lazyList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> lazyList(final List<E> list, final Factory<? extends E> factory)" ], [ "fixedSizeList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> fixedSizeList(final List<E> list)" ], [ "indexOf", "org.apache.commons.collections4", "ListUtils", "public static <E> int indexOf(final List<E> list, final Predicate<E> predicate)" ], [ "longestCommonSubsequence", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> longestCommonSubsequence(final List<E> a, final List<E> b)" ], [ "longestCommonSubsequence", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> longestCommonSubsequence(final List<E> a, final List<E> b, final Equator<? super E> equator)" ], [ "longestCommonSubsequence", "org.apache.commons.collections4", "ListUtils", "public static String longestCommonSubsequence(final CharSequence a, final CharSequence b)" ], [ "partition", "org.apache.commons.collections4", "ListUtils", "public static <T> List<List<T>> partition(final List<T> list, final int size)" ], [ "getObject", "org.apache.commons.collections4", "MapUtils", "public static <K, V> V getObject(final Map<? super K, V> map, final K key)" ], [ "getString", "org.apache.commons.collections4", "MapUtils", "public static <K> String getString(final Map<? super K, ?> map, final K key)" ], [ "getBoolean", "org.apache.commons.collections4", "MapUtils", "public static <K> Boolean getBoolean(final Map<? super K, ?> map, final K key)" ], [ "getNumber", "org.apache.commons.collections4", "MapUtils", "public static <K> Number getNumber(final Map<? super K, ?> map, final K key)" ], [ "getByte", "org.apache.commons.collections4", "MapUtils", "public static <K> Byte getByte(final Map<? super K, ?> map, final K key)" ], [ "getShort", "org.apache.commons.collections4", "MapUtils", "public static <K> Short getShort(final Map<? super K, ?> map, final K key)" ], [ "getInteger", "org.apache.commons.collections4", "MapUtils", "public static <K> Integer getInteger(final Map<? super K, ?> map, final K key)" ], [ "getLong", "org.apache.commons.collections4", "MapUtils", "public static <K> Long getLong(final Map<? super K, ?> map, final K key)" ], [ "getFloat", "org.apache.commons.collections4", "MapUtils", "public static <K> Float getFloat(final Map<? super K, ?> map, final K key)" ], [ "getDouble", "org.apache.commons.collections4", "MapUtils", "public static <K> Double getDouble(final Map<? super K, ?> map, final K key)" ], [ "getMap", "org.apache.commons.collections4", "MapUtils", "public static <K> Map<?, ?> getMap(final Map<? super K, ?> map, final K key)" ], [ "getObject", "org.apache.commons.collections4", "MapUtils", "public static <K, V> V getObject(final Map<K, V> map, final K key, final V defaultValue)" ], [ "getString", "org.apache.commons.collections4", "MapUtils", "public static <K> String getString(final Map<? super K, ?> map, final K key, final String defaultValue)" ], [ "getBoolean", "org.apache.commons.collections4", "MapUtils", "public static <K> Boolean getBoolean(final Map<? super K, ?> map, final K key, final Boolean defaultValue)" ], [ "getNumber", "org.apache.commons.collections4", "MapUtils", "public static <K> Number getNumber(final Map<? super K, ?> map, final K key, final Number defaultValue)" ], [ "getByte", "org.apache.commons.collections4", "MapUtils", "public static <K> Byte getByte(final Map<? super K, ?> map, final K key, final Byte defaultValue)" ], [ "getShort", "org.apache.commons.collections4", "MapUtils", "public static <K> Short getShort(final Map<? super K, ?> map, final K key, final Short defaultValue)" ], [ "getInteger", "org.apache.commons.collections4", "MapUtils", "public static <K> Integer getInteger(final Map<? super K, ?> map, final K key, final Integer defaultValue)" ], [ "getLong", "org.apache.commons.collections4", "MapUtils", "public static <K> Long getLong(final Map<? super K, ?> map, final K key, final Long defaultValue)" ], [ "getFloat", "org.apache.commons.collections4", "MapUtils", "public static <K> Float getFloat(final Map<? super K, ?> map, final K key, final Float defaultValue)" ], [ "getDouble", "org.apache.commons.collections4", "MapUtils", "public static <K> Double getDouble(final Map<? super K, ?> map, final K key, final Double defaultValue)" ], [ "getMap", "org.apache.commons.collections4", "MapUtils", "public static <K> Map<?, ?> getMap(final Map<? super K, ?> map, final K key, final Map<?, ?> defaultValue)" ], [ "getBooleanValue", "org.apache.commons.collections4", "MapUtils", "public static <K> boolean getBooleanValue(final Map<? super K, ?> map, final K key)" ], [ "getByteValue", "org.apache.commons.collections4", "MapUtils", "public static <K> byte getByteValue(final Map<? super K, ?> map, final K key)" ], [ "getShortValue", "org.apache.commons.collections4", "MapUtils", "public static <K> short getShortValue(final Map<? super K, ?> map, final K key)" ], [ "getIntValue", "org.apache.commons.collections4", "MapUtils", "public static <K> int getIntValue(final Map<? super K, ?> map, final K key)" ], [ "getLongValue", "org.apache.commons.collections4", "MapUtils", "public static <K> long getLongValue(final Map<? super K, ?> map, final K key)" ], [ "getFloatValue", "org.apache.commons.collections4", "MapUtils", "public static <K> float getFloatValue(final Map<? super K, ?> map, final K key)" ], [ "getDoubleValue", "org.apache.commons.collections4", "MapUtils", "public static <K> double getDoubleValue(final Map<? super K, ?> map, final K key)" ], [ "getBooleanValue", "org.apache.commons.collections4", "MapUtils", "public static <K> boolean getBooleanValue(final Map<? super K, ?> map, final K key, final boolean defaultValue)" ], [ "getByteValue", "org.apache.commons.collections4", "MapUtils", "public static <K> byte getByteValue(final Map<? super K, ?> map, final K key, final byte defaultValue)" ], [ "getShortValue", "org.apache.commons.collections4", "MapUtils", "public static <K> short getShortValue(final Map<? super K, ?> map, final K key, final short defaultValue)" ], [ "getIntValue", "org.apache.commons.collections4", "MapUtils", "public static <K> int getIntValue(final Map<? super K, ?> map, final K key, final int defaultValue)" ], [ "getLongValue", "org.apache.commons.collections4", "MapUtils", "public static <K> long getLongValue(final Map<? super K, ?> map, final K key, final long defaultValue)" ], [ "getFloatValue", "org.apache.commons.collections4", "MapUtils", "public static <K> float getFloatValue(final Map<? super K, ?> map, final K key, final float defaultValue)" ], [ "getDoubleValue", "org.apache.commons.collections4", "MapUtils", "public static <K> double getDoubleValue(final Map<? super K, ?> map, final K key, final double defaultValue)" ], [ "toProperties", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Properties toProperties(final Map<K, V> map)" ], [ "toMap", "org.apache.commons.collections4", "MapUtils", "public static Map<String, Object> toMap(final ResourceBundle resourceBundle)" ], [ "invertMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Map<V, K> invertMap(final Map<K, V> map)" ], [ "putAll", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Map<K, V> putAll(final Map<K, V> map, final Object[] array)" ], [ "emptyIfNull", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Map<K, V> emptyIfNull(final Map<K, V> map)" ], [ "isEmpty", "org.apache.commons.collections4", "MapUtils", "public static boolean isEmpty(final Map<?, ?> map)" ], [ "isNotEmpty", "org.apache.commons.collections4", "MapUtils", "public static boolean isNotEmpty(final Map<?, ?> map)" ], [ "synchronizedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Map<K, V> synchronizedMap(final Map<K, V> map)" ], [ "unmodifiableMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Map<K, V> unmodifiableMap(final Map<? extends K, ? extends V> map)" ], [ "predicatedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> predicatedMap(final Map<K, V> map, final Predicate<? super K> keyPred, final Predicate<? super V> valuePred)" ], [ "transformedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> transformedMap(final Map<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "fixedSizeMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> fixedSizeMap(final Map<K, V> map)" ], [ "lazyMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> lazyMap(final Map<K, V> map, final Factory<? extends V> factory)" ], [ "lazyMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> lazyMap(final Map<K, V> map, final Transformer<? super K, ? extends V> transformerFactory)" ], [ "orderedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> OrderedMap<K, V> orderedMap(final Map<K, V> map)" ], [ "multiValueMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> MultiValueMap<K, V> multiValueMap(final Map<K, ? super Collection<V>> map)" ], [ "multiValueMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V, C extends Collection<V>> MultiValueMap<K, V> multiValueMap(final Map<K, C> map, final Class<C> collectionClass)" ], [ "multiValueMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V, C extends Collection<V>> MultiValueMap<K, V> multiValueMap(final Map<K, C> map, final Factory<C> collectionFactory)" ], [ "synchronizedSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> synchronizedSortedMap(final SortedMap<K, V> map)" ], [ "unmodifiableSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> unmodifiableSortedMap(final SortedMap<K, ? extends V> map)" ], [ "predicatedSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> predicatedSortedMap(final SortedMap<K, V> map, final Predicate<? super K> keyPred, final Predicate<? super V> valuePred)" ], [ "transformedSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> transformedSortedMap(final SortedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "fixedSizeSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> fixedSizeSortedMap(final SortedMap<K, V> map)" ], [ "lazySortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> lazySortedMap(final SortedMap<K, V> map, final Factory<? extends V> factory)" ], [ "lazySortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> lazySortedMap(final SortedMap<K, V> map, final Transformer<? super K, ? extends V> transformerFactory)" ], [ "iterableMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> iterableMap(final Map<K, V> map)" ], [ "iterableSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableSortedMap<K, V> iterableSortedMap(final SortedMap<K, V> sortedMap)" ], [ "defaultEquator", "org.apache.commons.collections4.functors", "DefaultEquator", "public static <T> DefaultEquator<T> defaultEquator()" ], [ "stringValueTransformer", "org.apache.commons.collections4.functors", "StringValueTransformer", "public static <T> Transformer<T, String> stringValueTransformer()" ], [ "ifTransformer", "org.apache.commons.collections4.functors", "IfTransformer", "public static <I, O> Transformer<I, O> ifTransformer(final Predicate<? super I> predicate, final Transformer<? super I, ? extends O> trueTransformer, final Transformer<? super I, ? extends O> falseTransformer)" ], [ "ifTransformer", "org.apache.commons.collections4.functors", "IfTransformer", "public static <T> Transformer<T, T> ifTransformer(final Predicate<? super T> predicate, final Transformer<? super T, ? extends T> trueTransformer)" ], [ "identityPredicate", "org.apache.commons.collections4.functors", "IdentityPredicate", "public static <T> Predicate<T> identityPredicate(final T object)" ], [ "exceptionClosure", "org.apache.commons.collections4.functors", "ExceptionClosure", "public static <E> Closure<E> exceptionClosure()" ], [ "nopClosure", "org.apache.commons.collections4.functors", "NOPClosure", "public static <E> Closure<E> nopClosure()" ], [ "closureTransformer", "org.apache.commons.collections4.functors", "ClosureTransformer", "public static <T> Transformer<T, T> closureTransformer(final Closure<? super T> closure)" ], [ "copy", "org.apache.commons.collections4.functors", "FunctorUtils", "static <T> Predicate<T>[] copy(final Predicate<? super T>... predicates)" ], [ "coerce", "org.apache.commons.collections4.functors", "FunctorUtils", "static <T> Predicate<T> coerce(final Predicate<? super T> predicate)" ], [ "validate", "org.apache.commons.collections4.functors", "FunctorUtils", "static <T> Predicate<? super T>[] validate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "copy", "org.apache.commons.collections4.functors", "FunctorUtils", "static <E> Closure<E>[] copy(final Closure<? super E>... closures)" ], [ "coerce", "org.apache.commons.collections4.functors", "FunctorUtils", "static <T> Closure<T> coerce(final Closure<? super T> closure)" ], [ "copy", "org.apache.commons.collections4.functors", "FunctorUtils", "static <I, O> Transformer<I, O>[] copy(final Transformer<? super I, ? extends O>... transformers)" ], [ "coerce", "org.apache.commons.collections4.functors", "FunctorUtils", "static <I, O> Transformer<I, O> coerce(final Transformer<? super I, ? extends O> transformer)" ], [ "transformerPredicate", "org.apache.commons.collections4.functors", "TransformerPredicate", "public static <T> Predicate<T> transformerPredicate(final Transformer<? super T, Boolean> transformer)" ], [ "nullPredicate", "org.apache.commons.collections4.functors", "NullPredicate", "public static <T> Predicate<T> nullPredicate()" ], [ "nullTransformer", "org.apache.commons.collections4.functors", "ConstantTransformer", "public static <I, O> Transformer<I, O> nullTransformer()" ], [ "constantTransformer", "org.apache.commons.collections4.functors", "ConstantTransformer", "public static <I, O> Transformer<I, O> constantTransformer(final O constantToReturn)" ], [ "predicateTransformer", "org.apache.commons.collections4.functors", "PredicateTransformer", "public static <T> Transformer<T, Boolean> predicateTransformer(final Predicate<? super T> predicate)" ], [ "whileClosure", "org.apache.commons.collections4.functors", "WhileClosure", "public static <E> Closure<E> whileClosure(final Predicate<? super E> predicate, final Closure<? super E> closure, final boolean doLoop)" ], [ "forClosure", "org.apache.commons.collections4.functors", "ForClosure", "public static <E> Closure<E> forClosure(final int count, final Closure<? super E> closure)" ], [ "nullIsTruePredicate", "org.apache.commons.collections4.functors", "NullIsTruePredicate", "public static <T> Predicate<T> nullIsTruePredicate(final Predicate<? super T> predicate)" ], [ "transformedPredicate", "org.apache.commons.collections4.functors", "TransformedPredicate", "public static <T> Predicate<T> transformedPredicate(final Transformer<? super T, ? extends T> transformer, final Predicate<? super T> predicate)" ], [ "nonePredicate", "org.apache.commons.collections4.functors", "NonePredicate", "public static <T> Predicate<T> nonePredicate(final Predicate<? super T>... predicates)" ], [ "nonePredicate", "org.apache.commons.collections4.functors", "NonePredicate", "public static <T> Predicate<T> nonePredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "exceptionTransformer", "org.apache.commons.collections4.functors", "ExceptionTransformer", "public static <I, O> Transformer<I, O> exceptionTransformer()" ], [ "switchTransformer", "org.apache.commons.collections4.functors", "SwitchTransformer", "public static <I, O> Transformer<I, O> switchTransformer(final Predicate<? super I>[] predicates, final Transformer<? super I, ? extends O>[] transformers, final Transformer<? super I, ? extends O> defaultTransformer)" ], [ "switchTransformer", "org.apache.commons.collections4.functors", "SwitchTransformer", "public static <I, O> Transformer<I, O> switchTransformer(final Map<? extends Predicate<? super I>, ? extends Transformer<? super I, ? extends O>> map)" ], [ "transformerClosure", "org.apache.commons.collections4.functors", "TransformerClosure", "public static <E> Closure<E> transformerClosure(final Transformer<? super E, ?> transformer)" ], [ "orPredicate", "org.apache.commons.collections4.functors", "OrPredicate", "public static <T> Predicate<T> orPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "nopTransformer", "org.apache.commons.collections4.functors", "NOPTransformer", "public static <T> Transformer<T, T> nopTransformer()" ], [ "mapTransformer", "org.apache.commons.collections4.functors", "MapTransformer", "public static <I, O> Transformer<I, O> mapTransformer(final Map<? super I, ? extends O> map)" ], [ "exceptionFactory", "org.apache.commons.collections4.functors", "ExceptionFactory", "public static <T> Factory<T> exceptionFactory()" ], [ "chainedClosure", "org.apache.commons.collections4.functors", "ChainedClosure", "public static <E> Closure<E> chainedClosure(final Closure<? super E>... closures)" ], [ "chainedClosure", "org.apache.commons.collections4.functors", "ChainedClosure", "public static <E> Closure<E> chainedClosure(final Collection<? extends Closure<? super E>> closures)" ], [ "andPredicate", "org.apache.commons.collections4.functors", "AndPredicate", "public static <T> Predicate<T> andPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "prototypeFactory", "org.apache.commons.collections4.functors", "PrototypeFactory", "public static <T> Factory<T> prototypeFactory(final T prototype)" ], [ "exceptionPredicate", "org.apache.commons.collections4.functors", "ExceptionPredicate", "public static <T> Predicate<T> exceptionPredicate()" ], [ "instanceOfPredicate", "org.apache.commons.collections4.functors", "InstanceofPredicate", "public static Predicate<Object> instanceOfPredicate(final Class<?> type)" ], [ "invokerTransformer", "org.apache.commons.collections4.functors", "InvokerTransformer", "public static <I, O> Transformer<I, O> invokerTransformer(final String methodName)" ], [ "invokerTransformer", "org.apache.commons.collections4.functors", "InvokerTransformer", "public static <I, O> Transformer<I, O> invokerTransformer(final String methodName, final Class<?>[] paramTypes, final Object[] args)" ], [ "falsePredicate", "org.apache.commons.collections4.functors", "FalsePredicate", "public static <T> Predicate<T> falsePredicate()" ], [ "cloneTransformer", "org.apache.commons.collections4.functors", "CloneTransformer", "public static <T> Transformer<T, T> cloneTransformer()" ], [ "notPredicate", "org.apache.commons.collections4.functors", "NotPredicate", "public static <T> Predicate<T> notPredicate(final Predicate<? super T> predicate)" ], [ "constantFactory", "org.apache.commons.collections4.functors", "ConstantFactory", "public static <T> Factory<T> constantFactory(final T constantToReturn)" ], [ "chainedTransformer", "org.apache.commons.collections4.functors", "ChainedTransformer", "public static <T> Transformer<T, T> chainedTransformer(final Transformer<? super T, ? extends T>... transformers)" ], [ "chainedTransformer", "org.apache.commons.collections4.functors", "ChainedTransformer", "public static <T> Transformer<T, T> chainedTransformer(final Collection<? extends Transformer<? super T, ? extends T>> transformers)" ], [ "comparatorPredicate", "org.apache.commons.collections4.functors", "ComparatorPredicate", "public static <T> Predicate<T> comparatorPredicate(final T object, final Comparator<T> comparator)" ], [ "comparatorPredicate", "org.apache.commons.collections4.functors", "ComparatorPredicate", "public static <T> Predicate<T> comparatorPredicate(final T object, final Comparator<T> comparator, final Criterion criterion)" ], [ "allPredicate", "org.apache.commons.collections4.functors", "AllPredicate", "public static <T> Predicate<T> allPredicate(final Predicate<? super T>... predicates)" ], [ "allPredicate", "org.apache.commons.collections4.functors", "AllPredicate", "public static <T> Predicate<T> allPredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "nullIsFalsePredicate", "org.apache.commons.collections4.functors", "NullIsFalsePredicate", "public static <T> Predicate<T> nullIsFalsePredicate(final Predicate<? super T> predicate)" ], [ "nullIsExceptionPredicate", "org.apache.commons.collections4.functors", "NullIsExceptionPredicate", "public static <T> Predicate<T> nullIsExceptionPredicate(final Predicate<? super T> predicate)" ], [ "anyPredicate", "org.apache.commons.collections4.functors", "AnyPredicate", "public static <T> Predicate<T> anyPredicate(final Predicate<? super T>... predicates)" ], [ "anyPredicate", "org.apache.commons.collections4.functors", "AnyPredicate", "public static <T> Predicate<T> anyPredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "truePredicate", "org.apache.commons.collections4.functors", "TruePredicate", "public static <T> Predicate<T> truePredicate()" ], [ "factoryTransformer", "org.apache.commons.collections4.functors", "FactoryTransformer", "public static <I, O> Transformer<I, O> factoryTransformer(final Factory<? extends O> factory)" ], [ "notNullPredicate", "org.apache.commons.collections4.functors", "NotNullPredicate", "public static <T> Predicate<T> notNullPredicate()" ], [ "switchClosure", "org.apache.commons.collections4.functors", "SwitchClosure", "public static <E> Closure<E> switchClosure(final Predicate<? super E>[] predicates, final Closure<? super E>[] closures, final Closure<? super E> defaultClosure)" ], [ "switchClosure", "org.apache.commons.collections4.functors", "SwitchClosure", "public static <E> Closure<E> switchClosure(final Map<Predicate<E>, Closure<E>> predicatesAndClosures)" ], [ "uniquePredicate", "org.apache.commons.collections4.functors", "UniquePredicate", "public static <T> Predicate<T> uniquePredicate()" ], [ "instantiateTransformer", "org.apache.commons.collections4.functors", "InstantiateTransformer", "public static <T> Transformer<Class<? extends T>, T> instantiateTransformer()" ], [ "instantiateTransformer", "org.apache.commons.collections4.functors", "InstantiateTransformer", "public static <T> Transformer<Class<? extends T>, T> instantiateTransformer(final Class<?>[] paramTypes, final Object[] args)" ], [ "onePredicate", "org.apache.commons.collections4.functors", "OnePredicate", "public static <T> Predicate<T> onePredicate(final Predicate<? super T>... predicates)" ], [ "onePredicate", "org.apache.commons.collections4.functors", "OnePredicate", "public static <T> Predicate<T> onePredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "equalPredicate", "org.apache.commons.collections4.functors", "EqualPredicate", "public static <T> Predicate<T> equalPredicate(final T object)" ], [ "equalPredicate", "org.apache.commons.collections4.functors", "EqualPredicate", "public static <T> Predicate<T> equalPredicate(final T object, final Equator<T> equator)" ], [ "instantiateFactory", "org.apache.commons.collections4.functors", "InstantiateFactory", "public static <T> Factory<T> instantiateFactory(final Class<T> classToInstantiate, final Class<?>[] paramTypes, final Object[] args)" ], [ "ifClosure", "org.apache.commons.collections4.functors", "IfClosure", "public static <E> Closure<E> ifClosure(final Predicate<? super E> predicate, final Closure<? super E> trueClosure)" ], [ "ifClosure", "org.apache.commons.collections4.functors", "IfClosure", "public static <E> Closure<E> ifClosure(final Predicate<? super E> predicate, final Closure<? super E> trueClosure, final Closure<? super E> falseClosure)" ], [ "getTrueFirstComparator", "org.apache.commons.collections4.comparators", "BooleanComparator", "public static BooleanComparator getTrueFirstComparator()" ], [ "getFalseFirstComparator", "org.apache.commons.collections4.comparators", "BooleanComparator", "public static BooleanComparator getFalseFirstComparator()" ], [ "booleanComparator", "org.apache.commons.collections4.comparators", "BooleanComparator", "public static BooleanComparator booleanComparator(final boolean trueFirst)" ], [ "comparableComparator", "org.apache.commons.collections4.comparators", "ComparableComparator", "public static <E extends Comparable<? super E>> ComparableComparator<E> comparableComparator()" ], [ "emptyCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <T> Collection<T> emptyCollection()" ], [ "emptyIfNull", "org.apache.commons.collections4", "CollectionUtils", "public static <T> Collection<T> emptyIfNull(final Collection<T> collection)" ], [ "union", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> union(final Iterable<? extends O> a, final Iterable<? extends O> b)" ], [ "intersection", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> intersection(final Iterable<? extends O> a, final Iterable<? extends O> b)" ], [ "disjunction", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> disjunction(final Iterable<? extends O> a, final Iterable<? extends O> b)" ], [ "subtract", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> subtract(final Iterable<? extends O> a, final Iterable<? extends O> b)" ], [ "subtract", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> subtract(final Iterable<? extends O> a, final Iterable<? extends O> b, final Predicate<O> p)" ], [ "containsAll", "org.apache.commons.collections4", "CollectionUtils", "public static boolean containsAll(final Collection<?> coll1, final Collection<?> coll2)" ], [ "containsAny", "org.apache.commons.collections4", "CollectionUtils", "public static boolean containsAny(final Collection<?> coll1, final Collection<?> coll2)" ], [ "getCardinalityMap", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Map<O, Integer> getCardinalityMap(final Iterable<? extends O> coll)" ], [ "isSubCollection", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isSubCollection(final Collection<?> a, final Collection<?> b)" ], [ "isProperSubCollection", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isProperSubCollection(final Collection<?> a, final Collection<?> b)" ], [ "isEqualCollection", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isEqualCollection(final Collection<?> a, final Collection<?> b)" ], [ "isEqualCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <E> boolean isEqualCollection(final Collection<? extends E> a, final Collection<? extends E> b, final Equator<? super E> equator)" ], [ "cardinality", "org.apache.commons.collections4", "CollectionUtils", "public static <O> int cardinality(final O obj, final Iterable<? super O> coll)" ], [ "find", "org.apache.commons.collections4", "CollectionUtils", "public static <T> T find(final Iterable<T> collection, final Predicate<? super T> predicate)" ], [ "forAllDo", "org.apache.commons.collections4", "CollectionUtils", "public static <T, C extends Closure<? super T>> C forAllDo(final Iterable<T> collection, final C closure)" ], [ "forAllDo", "org.apache.commons.collections4", "CollectionUtils", "public static <T, C extends Closure<? super T>> C forAllDo(final Iterator<T> iterator, final C closure)" ], [ "forAllButLastDo", "org.apache.commons.collections4", "CollectionUtils", "public static <T, C extends Closure<? super T>> T forAllButLastDo(final Iterable<T> collection, final C closure)" ], [ "forAllButLastDo", "org.apache.commons.collections4", "CollectionUtils", "public static <T, C extends Closure<? super T>> T forAllButLastDo(final Iterator<T> iterator, final C closure)" ], [ "filter", "org.apache.commons.collections4", "CollectionUtils", "public static <T> boolean filter(final Iterable<T> collection, final Predicate<? super T> predicate)" ], [ "filterInverse", "org.apache.commons.collections4", "CollectionUtils", "public static <T> boolean filterInverse(final Iterable<T> collection, final Predicate<? super T> predicate)" ], [ "countMatches", "org.apache.commons.collections4", "CollectionUtils", "public static <C> int countMatches(final Iterable<C> input, final Predicate<? super C> predicate)" ], [ "exists", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean exists(final Iterable<C> input, final Predicate<? super C> predicate)" ], [ "matchesAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean matchesAll(final Iterable<C> input, final Predicate<? super C> predicate)" ], [ "select", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> select(final Iterable<? extends O> inputCollection, final Predicate<? super O> predicate)" ], [ "select", "org.apache.commons.collections4", "CollectionUtils", "public static <O, R extends Collection<? super O>> R select(final Iterable<? extends O> inputCollection, final Predicate<? super O> predicate, final R outputCollection)" ], [ "select", "org.apache.commons.collections4", "CollectionUtils", "public static <O, R extends Collection<? super O>> R select(final Iterable<? extends O> inputCollection, final Predicate<? super O> predicate, R outputCollection, R rejectedCollection)" ], [ "selectRejected", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> selectRejected(final Iterable<? extends O> inputCollection, final Predicate<? super O> predicate)" ], [ "selectRejected", "org.apache.commons.collections4", "CollectionUtils", "public static <O, R extends Collection<? super O>> R selectRejected(final Iterable<? extends O> inputCollection, final Predicate<? super O> predicate, final R outputCollection)" ], [ "collect", "org.apache.commons.collections4", "CollectionUtils", "public static <I, O> Collection<O> collect(final Iterable<I> inputCollection, final Transformer<? super I, ? extends O> transformer)" ], [ "collect", "org.apache.commons.collections4", "CollectionUtils", "public static <I, O> Collection<O> collect(final Iterator<I> inputIterator, final Transformer<? super I, ? extends O> transformer)" ], [ "collect", "org.apache.commons.collections4", "CollectionUtils", "public static <I, O, R extends Collection<? super O>> R collect(final Iterable<? extends I> inputCollection, final Transformer<? super I, ? extends O> transformer, final R outputCollection)" ], [ "collect", "org.apache.commons.collections4", "CollectionUtils", "public static <I, O, R extends Collection<? super O>> R collect(final Iterator<? extends I> inputIterator, final Transformer<? super I, ? extends O> transformer, final R outputCollection)" ], [ "addIgnoreNull", "org.apache.commons.collections4", "CollectionUtils", "public static <T> boolean addIgnoreNull(final Collection<T> collection, final T object)" ], [ "addAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean addAll(final Collection<C> collection, final Iterable<? extends C> iterable)" ], [ "addAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean addAll(final Collection<C> collection, final Iterator<? extends C> iterator)" ], [ "addAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean addAll(final Collection<C> collection, final Enumeration<? extends C> enumeration)" ], [ "addAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean addAll(final Collection<C> collection, final C[] elements)" ], [ "get", "org.apache.commons.collections4", "CollectionUtils", "public static <T> T get(final Iterator<T> iterator, final int index)" ], [ "get", "org.apache.commons.collections4", "CollectionUtils", "public static <T> T get(final Iterable<T> iterable, final int index)" ], [ "get", "org.apache.commons.collections4", "CollectionUtils", "public static Object get(final Object object, final int index)" ], [ "get", "org.apache.commons.collections4", "CollectionUtils", "public static <K, V> Map.Entry<K, V> get(final Map<K, V> map, final int index)" ], [ "size", "org.apache.commons.collections4", "CollectionUtils", "public static int size(final Object object)" ], [ "sizeIsEmpty", "org.apache.commons.collections4", "CollectionUtils", "public static boolean sizeIsEmpty(final Object object)" ], [ "isEmpty", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isEmpty(final Collection<?> coll)" ], [ "isNotEmpty", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isNotEmpty(final Collection<?> coll)" ], [ "isFull", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isFull(final Collection<? extends Object> coll)" ], [ "maxSize", "org.apache.commons.collections4", "CollectionUtils", "public static int maxSize(final Collection<? extends Object> coll)" ], [ "collate", "org.apache.commons.collections4", "CollectionUtils", "public static <O extends Comparable<? super O>> List<O> collate(Iterable<? extends O> a, Iterable<? extends O> b)" ], [ "collate", "org.apache.commons.collections4", "CollectionUtils", "public static <O extends Comparable<? super O>> List<O> collate(final Iterable<? extends O> a, final Iterable<? extends O> b, final boolean includeDuplicates)" ], [ "collate", "org.apache.commons.collections4", "CollectionUtils", "public static <O> List<O> collate(final Iterable<? extends O> a, final Iterable<? extends O> b, final Comparator<? super O> c)" ], [ "collate", "org.apache.commons.collections4", "CollectionUtils", "public static <O> List<O> collate(final Iterable<? extends O> a, final Iterable<? extends O> b, final Comparator<? super O> c, final boolean includeDuplicates)" ], [ "permutations", "org.apache.commons.collections4", "CollectionUtils", "public static <E> Collection<List<E>> permutations(final Collection<E> collection)" ], [ "retainAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> Collection<C> retainAll(final Collection<C> collection, final Collection<?> retain)" ], [ "retainAll", "org.apache.commons.collections4", "CollectionUtils", "public static <E> Collection<E> retainAll(final Iterable<E> collection, final Iterable<? extends E> retain, final Equator<? super E> equator)" ], [ "removeAll", "org.apache.commons.collections4", "CollectionUtils", "public static <E> Collection<E> removeAll(final Collection<E> collection, final Collection<?> remove)" ], [ "removeAll", "org.apache.commons.collections4", "CollectionUtils", "public static <E> Collection<E> removeAll(final Iterable<E> collection, final Iterable<? extends E> remove, final Equator<? super E> equator)" ], [ "synchronizedCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <C> Collection<C> synchronizedCollection(final Collection<C> collection)" ], [ "unmodifiableCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <C> Collection<C> unmodifiableCollection(final Collection<? extends C> collection)" ], [ "predicatedCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <C> Collection<C> predicatedCollection(final Collection<C> collection, final Predicate<? super C> predicate)" ], [ "transformingCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <E> Collection<E> transformingCollection(final Collection<E> collection, final Transformer<? super E, ? extends E> transformer)" ], [ "extractSingleton", "org.apache.commons.collections4", "CollectionUtils", "public static <E> E extractSingleton(final Collection<E> collection)" ], [ "transformingMap", "org.apache.commons.collections4.splitmap", "TransformedSplitMap", "public static <J, K, U, V> TransformedSplitMap<J, K, U, V> transformingMap(final Map<K, V> map, final Transformer<? super J, ? extends K> keyTransformer, final Transformer<? super U, ? extends V> valueTransformer)" ], [ "emptyIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> emptyIterable()" ], [ "chainedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> chainedIterable(final Iterable<? extends E> a, final Iterable<? extends E> b)" ], [ "chainedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> chainedIterable(final Iterable<? extends E> a, final Iterable<? extends E> b, final Iterable<? extends E> c)" ], [ "chainedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> chainedIterable(final Iterable<? extends E> a, final Iterable<? extends E> b, final Iterable<? extends E> c, final Iterable<? extends E> d)" ], [ "chainedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> chainedIterable(final Iterable<? extends E>... iterables)" ], [ "collatedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> collatedIterable(final Iterable<? extends E> a, final Iterable<? extends E> b)" ], [ "collatedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> collatedIterable(final Comparator<? super E> comparator, final Iterable<? extends E> a, final Iterable<? extends E> b)" ], [ "filteredIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> filteredIterable(final Iterable<E> iterable, final Predicate<? super E> predicate)" ], [ "boundedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> boundedIterable(final Iterable<E> iterable, final long maxSize)" ], [ "loopingIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> loopingIterable(final Iterable<E> iterable)" ], [ "reversedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> reversedIterable(final Iterable<E> iterable)" ], [ "skippingIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> skippingIterable(final Iterable<E> iterable, final long elementsToSkip)" ], [ "transformedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <I, O> Iterable<O> transformedIterable(final Iterable<I> iterable, final Transformer<? super I, ? extends O> transformer)" ], [ "uniqueIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> uniqueIterable(final Iterable<E> iterable)" ], [ "unmodifiableIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> unmodifiableIterable(final Iterable<E> iterable)" ], [ "zippingIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> zippingIterable(final Iterable<? extends E> a, final Iterable<? extends E> b)" ], [ "zippingIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> zippingIterable(final Iterable<? extends E> first, final Iterable<? extends E>... others)" ], [ "emptyIfNull", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> emptyIfNull(final Iterable<E> iterable)" ], [ "forEachButLast", "org.apache.commons.collections4", "IterableUtils", "public static <E> E forEachButLast(final Iterable<E> iterable, final Closure<? super E> closure)" ], [ "find", "org.apache.commons.collections4", "IterableUtils", "public static <E> E find(final Iterable<E> iterable, final Predicate<? super E> predicate)" ], [ "indexOf", "org.apache.commons.collections4", "IterableUtils", "public static <E> int indexOf(final Iterable<E> iterable, final Predicate<? super E> predicate)" ], [ "matchesAll", "org.apache.commons.collections4", "IterableUtils", "public static <E> boolean matchesAll(final Iterable<E> iterable, final Predicate<? super E> predicate)" ], [ "matchesAny", "org.apache.commons.collections4", "IterableUtils", "public static <E> boolean matchesAny(final Iterable<E> iterable, final Predicate<? super E> predicate)" ], [ "countMatches", "org.apache.commons.collections4", "IterableUtils", "public static <E> long countMatches(final Iterable<E> input, final Predicate<? super E> predicate)" ], [ "isEmpty", "org.apache.commons.collections4", "IterableUtils", "public static boolean isEmpty(final Iterable<?> iterable)" ], [ "contains", "org.apache.commons.collections4", "IterableUtils", "public static <E> boolean contains(final Iterable<E> iterable, final Object object)" ], [ "contains", "org.apache.commons.collections4", "IterableUtils", "public static <E> boolean contains(final Iterable<? extends E> iterable, final E object, final Equator<? super E> equator)" ], [ "frequency", "org.apache.commons.collections4", "IterableUtils", "public static <E, T extends E> int frequency(final Iterable<E> iterable, final T obj)" ], [ "get", "org.apache.commons.collections4", "IterableUtils", "public static <T> T get(final Iterable<T> iterable, final int index)" ], [ "size", "org.apache.commons.collections4", "IterableUtils", "public static int size(final Iterable<?> iterable)" ], [ "partition", "org.apache.commons.collections4", "IterableUtils", "public static <O> List<List<O>> partition(final Iterable<? extends O> iterable, final Predicate<? super O> predicate)" ], [ "partition", "org.apache.commons.collections4", "IterableUtils", "public static <O> List<List<O>> partition(final Iterable<? extends O> iterable, final Predicate<? super O>... predicates)" ], [ "partition", "org.apache.commons.collections4", "IterableUtils", "public static <O, R extends Collection<O>> List<R> partition(final Iterable<? extends O> iterable, final Factory<R> partitionFactory, final Predicate<? super O>... predicates)" ], [ "toList", "org.apache.commons.collections4", "IterableUtils", "public static <E> List<E> toList(final Iterable<E> iterable)" ], [ "toString", "org.apache.commons.collections4", "IterableUtils", "public static <E> String toString(final Iterable<E> iterable)" ], [ "toString", "org.apache.commons.collections4", "IterableUtils", "public static <E> String toString(final Iterable<E> iterable, final Transformer<? super E, String> transformer)" ], [ "toString", "org.apache.commons.collections4", "IterableUtils", "public static <E> String toString(final Iterable<E> iterable, final Transformer<? super E, String> transformer, final String delimiter, final String prefix, final String suffix)" ], [ "unmodifiableTrie", "org.apache.commons.collections4", "TrieUtils", "public static <K, V> Trie<K, V> unmodifiableTrie(final Trie<K, ? extends V> trie)" ], [ "exceptionClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> exceptionClosure()" ], [ "nopClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> nopClosure()" ], [ "asClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> asClosure(final Transformer<? super E, ?> transformer)" ], [ "forClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> forClosure(final int count, final Closure<? super E> closure)" ], [ "whileClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> whileClosure(final Predicate<? super E> predicate, final Closure<? super E> closure)" ], [ "doWhileClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> doWhileClosure(final Closure<? super E> closure, final Predicate<? super E> predicate)" ], [ "invokerClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> invokerClosure(final String methodName)" ], [ "invokerClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> invokerClosure(final String methodName, final Class<?>[] paramTypes, final Object[] args)" ], [ "chainedClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> chainedClosure(final Closure<? super E>... closures)" ], [ "chainedClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> chainedClosure(final Collection<? extends Closure<? super E>> closures)" ], [ "ifClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> ifClosure(final Predicate<? super E> predicate, final Closure<? super E> trueClosure)" ], [ "ifClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> ifClosure(final Predicate<? super E> predicate, final Closure<? super E> trueClosure, final Closure<? super E> falseClosure)" ], [ "switchClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> switchClosure(final Predicate<? super E>[] predicates, final Closure<? super E>[] closures)" ], [ "switchClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> switchClosure(final Predicate<? super E>[] predicates, final Closure<? super E>[] closures, final Closure<? super E> defaultClosure)" ], [ "switchClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> switchClosure(final Map<Predicate<E>, Closure<E>> predicatesAndClosures)" ], [ "switchMapClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> switchMapClosure(final Map<? extends E, Closure<E>> objectsAndClosures)" ], [ "unmodifiableTrie", "org.apache.commons.collections4.trie", "UnmodifiableTrie", "public static <K, V> Trie<K, V> unmodifiableTrie(final Trie<K, ? extends V> trie)" ], [ "isOutOfBoundsIndex", "org.apache.commons.collections4.trie", "KeyAnalyzer", "static boolean isOutOfBoundsIndex(final int bitIndex)" ], [ "isEqualBitKey", "org.apache.commons.collections4.trie", "KeyAnalyzer", "static boolean isEqualBitKey(final int bitIndex)" ], [ "isNullBitKey", "org.apache.commons.collections4.trie", "KeyAnalyzer", "static boolean isNullBitKey(final int bitIndex)" ], [ "isValidBitIndex", "org.apache.commons.collections4.trie", "KeyAnalyzer", "static boolean isValidBitIndex(final int bitIndex)" ], [ "isValidUplink", "org.apache.commons.collections4.trie", "AbstractPatriciaTrie", "static boolean isValidUplink(final TrieEntry<?, ?> next, final TrieEntry<?, ?> from)" ], [ "compare", "org.apache.commons.collections4.trie", "AbstractBitwiseTrie", "static boolean compare(final Object a, final Object b)" ], [ "transformingSortedMap", "org.apache.commons.collections4.map", "TransformedSortedMap", "public static <K, V> TransformedSortedMap<K, V> transformingSortedMap(final SortedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "transformedSortedMap", "org.apache.commons.collections4.map", "TransformedSortedMap", "public static <K, V> TransformedSortedMap<K, V> transformedSortedMap(final SortedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "predicatedMap", "org.apache.commons.collections4.map", "PredicatedMap", "public static <K, V> PredicatedMap<K, V> predicatedMap(final Map<K, V> map, final Predicate<? super K> keyPredicate, final Predicate<? super V> valuePredicate)" ], [ "fixedSizeSortedMap", "org.apache.commons.collections4.map", "FixedSizeSortedMap", "public static <K, V> FixedSizeSortedMap<K, V> fixedSizeSortedMap(final SortedMap<K, V> map)" ], [ "unmodifiableSortedMap", "org.apache.commons.collections4.map", "UnmodifiableSortedMap", "public static <K, V> SortedMap<K, V> unmodifiableSortedMap(final SortedMap<K, ? extends V> map)" ], [ "predicatedSortedMap", "org.apache.commons.collections4.map", "PredicatedSortedMap", "public static <K, V> PredicatedSortedMap<K, V> predicatedSortedMap(final SortedMap<K, V> map, final Predicate<? super K> keyPredicate, final Predicate<? super V> valuePredicate)" ], [ "defaultedMap", "org.apache.commons.collections4.map", "DefaultedMap", "public static <K, V> DefaultedMap<K, V> defaultedMap(final Map<K, V> map, final V defaultValue)" ], [ "defaultedMap", "org.apache.commons.collections4.map", "DefaultedMap", "public static <K, V> DefaultedMap<K, V> defaultedMap(final Map<K, V> map, final Factory<? extends V> factory)" ], [ "defaultedMap", "org.apache.commons.collections4.map", "DefaultedMap", "public static <K, V> Map<K, V> defaultedMap(final Map<K, V> map, final Transformer<? super K, ? extends V> transformer)" ], [ "fixedSizeMap", "org.apache.commons.collections4.map", "FixedSizeMap", "public static <K, V> FixedSizeMap<K, V> fixedSizeMap(final Map<K, V> map)" ], [ "lazySortedMap", "org.apache.commons.collections4.map", "LazySortedMap", "public static <K, V> LazySortedMap<K, V> lazySortedMap(final SortedMap<K, V> map, final Factory<? extends V> factory)" ], [ "lazySortedMap", "org.apache.commons.collections4.map", "LazySortedMap", "public static <K, V> LazySortedMap<K, V> lazySortedMap(final SortedMap<K, V> map, final Transformer<? super K, ? extends V> factory)" ], [ "unmodifiableOrderedMap", "org.apache.commons.collections4.map", "UnmodifiableOrderedMap", "public static <K, V> OrderedMap<K, V> unmodifiableOrderedMap(final OrderedMap<? extends K, ? extends V> map)" ], [ "unmodifiableMap", "org.apache.commons.collections4.map", "UnmodifiableMap", "public static <K, V> Map<K, V> unmodifiableMap(final Map<? extends K, ? extends V> map)" ], [ "listOrderedMap", "org.apache.commons.collections4.map", "ListOrderedMap", "public static <K, V> ListOrderedMap<K, V> listOrderedMap(final Map<K, V> map)" ], [ "unmodifiableEntrySet", "org.apache.commons.collections4.map", "UnmodifiableEntrySet", "public static <K, V> Set<Map.Entry<K, V>> unmodifiableEntrySet(final Set<Map.Entry<K, V>> set)" ], [ "resolve", "org.apache.commons.collections4.map", "AbstractReferenceMap", "public static ReferenceStrength resolve(final int value)" ], [ "resolve", "org.apache.commons.collections4.map", "ReferenceStrength", "public static ReferenceStrength resolve(final int value)" ], [ "multiKeyMap", "org.apache.commons.collections4.map", "MultiKeyMap", "public static <K, V> MultiKeyMap<K, V> multiKeyMap(final AbstractHashedMap<MultiKey<? extends K>, V> map)" ], [ "lazyMap", "org.apache.commons.collections4.map", "LazyMap", "public static <K, V> LazyMap<K, V> lazyMap(final Map<K, V> map, final Factory<? extends V> factory)" ], [ "lazyMap", "org.apache.commons.collections4.map", "LazyMap", "public static <V, K> LazyMap<K, V> lazyMap(final Map<K, V> map, final Transformer<? super K, ? extends V> factory)" ], [ "multiValueMap", "org.apache.commons.collections4.map", "MultiValueMap", "public static <K, V> MultiValueMap<K, V> multiValueMap(final Map<K, ? super Collection<V>> map)" ], [ "multiValueMap", "org.apache.commons.collections4.map", "MultiValueMap", "public static <K, V, C extends Collection<V>> MultiValueMap<K, V> multiValueMap(final Map<K, ? super C> map, final Class<C> collectionClass)" ], [ "multiValueMap", "org.apache.commons.collections4.map", "MultiValueMap", "public static <K, V, C extends Collection<V>> MultiValueMap<K, V> multiValueMap(final Map<K, ? super C> map, final Factory<C> collectionFactory)" ], [ "transformingMap", "org.apache.commons.collections4.map", "TransformedMap", "public static <K, V> TransformedMap<K, V> transformingMap(final Map<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "transformedMap", "org.apache.commons.collections4.map", "TransformedMap", "public static <K, V> TransformedMap<K, V> transformedMap(final Map<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "synchronizedMultiSet", "org.apache.commons.collections4", "MultiSetUtils", "public static <E> MultiSet<E> synchronizedMultiSet(final MultiSet<E> multiset)" ], [ "unmodifiableMultiSet", "org.apache.commons.collections4", "MultiSetUtils", "public static <E> MultiSet<E> unmodifiableMultiSet(final MultiSet<? extends E> multiset)" ], [ "predicatedMultiSet", "org.apache.commons.collections4", "MultiSetUtils", "public static <E> MultiSet<E> predicatedMultiSet(final MultiSet<E> multiset, final Predicate<? super E> predicate)" ], [ "emptyMultiSet", "org.apache.commons.collections4", "MultiSetUtils", "public static <E> MultiSet<E> emptyMultiSet()" ], [ "unmodifiableMultiValuedMap", "org.apache.commons.collections4.multimap", "UnmodifiableMultiValuedMap", "public static <K, V> UnmodifiableMultiValuedMap<K, V> unmodifiableMultiValuedMap(MultiValuedMap<? extends K, ? extends V> map)" ], [ "transformingMap", "org.apache.commons.collections4.multimap", "TransformedMultiValuedMap", "public static <K, V> TransformedMultiValuedMap<K, V> transformingMap(final MultiValuedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "transformedMap", "org.apache.commons.collections4.multimap", "TransformedMultiValuedMap", "public static <K, V> TransformedMultiValuedMap<K, V> transformedMap(final MultiValuedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "lazyList", "org.apache.commons.collections4.list", "LazyList", "public static <E> LazyList<E> lazyList(final List<E> list, final Factory<? extends E> factory)" ], [ "setUniqueList", "org.apache.commons.collections4.list", "SetUniqueList", "public static <E> SetUniqueList<E> setUniqueList(final List<E> list)" ], [ "unmodifiableList", "org.apache.commons.collections4.list", "UnmodifiableList", "public static <E> List<E> unmodifiableList(final List<? extends E> list)" ], [ "fixedSizeList", "org.apache.commons.collections4.list", "FixedSizeList", "public static <E> FixedSizeList<E> fixedSizeList(final List<E> list)" ], [ "transformingList", "org.apache.commons.collections4.list", "TransformedList", "public static <E> TransformedList<E> transformingList(final List<E> list, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedList", "org.apache.commons.collections4.list", "TransformedList", "public static <E> TransformedList<E> transformedList(final List<E> list, final Transformer<? super E, ? extends E> transformer)" ], [ "growthList", "org.apache.commons.collections4.list", "GrowthList", "public static <E> GrowthList<E> growthList(final List<E> list)" ], [ "predicatedList", "org.apache.commons.collections4.list", "PredicatedList", "public static <T> PredicatedList<T> predicatedList(final List<T> list, final Predicate<? super T> predicate)" ], [ "transformingQueue", "org.apache.commons.collections4.queue", "TransformedQueue", "public static <E> TransformedQueue<E> transformingQueue(final Queue<E> queue, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedQueue", "org.apache.commons.collections4.queue", "TransformedQueue", "public static <E> TransformedQueue<E> transformedQueue(final Queue<E> queue, final Transformer<? super E, ? extends E> transformer)" ], [ "unmodifiableQueue", "org.apache.commons.collections4.queue", "UnmodifiableQueue", "public static <E> Queue<E> unmodifiableQueue(final Queue<? extends E> queue)" ], [ "predicatedQueue", "org.apache.commons.collections4.queue", "PredicatedQueue", "public static <E> PredicatedQueue<E> predicatedQueue(final Queue<E> Queue, final Predicate<? super E> predicate)" ], [ "empty", "org.apache.commons.collections4", "FluentIterable", "public static <T> FluentIterable<T> empty()" ], [ "of", "org.apache.commons.collections4", "FluentIterable", "public static <T> FluentIterable<T> of(final T singleton)" ], [ "of", "org.apache.commons.collections4", "FluentIterable", "public static <T> FluentIterable<T> of(final T... elements)" ], [ "of", "org.apache.commons.collections4", "FluentIterable", "public static <T> FluentIterable<T> of(final Iterable<T> iterable)" ], [ "exceptionTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> exceptionTransformer()" ], [ "nullTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> nullTransformer()" ], [ "nopTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> nopTransformer()" ], [ "cloneTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> cloneTransformer()" ], [ "constantTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> constantTransformer(final O constantToReturn)" ], [ "asTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> asTransformer(final Closure<? super T> closure)" ], [ "asTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, Boolean> asTransformer(final Predicate<? super T> predicate)" ], [ "asTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> asTransformer(final Factory<? extends O> factory)" ], [ "chainedTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> chainedTransformer(final Transformer<? super T, ? extends T>... transformers)" ], [ "chainedTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> chainedTransformer(final Collection<? extends Transformer<? super T, ? extends T>> transformers)" ], [ "ifTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> ifTransformer(final Predicate<? super T> predicate, final Transformer<? super T, ? extends T> trueTransformer)" ], [ "ifTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> ifTransformer(final Predicate<? super I> predicate, final Transformer<? super I, ? extends O> trueTransformer, final Transformer<? super I, ? extends O> falseTransformer)" ], [ "switchTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> switchTransformer(final Predicate<? super I> predicate, final Transformer<? super I, ? extends O> trueTransformer, final Transformer<? super I, ? extends O> falseTransformer)" ], [ "switchTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> switchTransformer(final Predicate<? super I>[] predicates, final Transformer<? super I, ? extends O>[] transformers)" ], [ "switchTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> switchTransformer(final Predicate<? super I>[] predicates, final Transformer<? super I, ? extends O>[] transformers, final Transformer<? super I, ? extends O> defaultTransformer)" ], [ "switchTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> switchTransformer(final Map<Predicate<I>, Transformer<I, O>> predicatesAndTransformers)" ], [ "switchMapTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> switchMapTransformer(final Map<I, Transformer<I, O>> objectsAndTransformers)" ], [ "instantiateTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<Class<? extends T>, T> instantiateTransformer()" ], [ "instantiateTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<Class<? extends T>, T> instantiateTransformer(final Class<?>[] paramTypes, final Object[] args)" ], [ "mapTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> mapTransformer(final Map<? super I, ? extends O> map)" ], [ "invokerTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> invokerTransformer(final String methodName)" ], [ "invokerTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> invokerTransformer(final String methodName, final Class<?>[] paramTypes, final Object[] args)" ], [ "stringValueTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, String> stringValueTransformer()" ], [ "exceptionPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> exceptionPredicate()" ], [ "truePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> truePredicate()" ], [ "falsePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> falsePredicate()" ], [ "nullPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nullPredicate()" ], [ "notNullPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> notNullPredicate()" ], [ "equalPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> equalPredicate(final T value)" ], [ "identityPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> identityPredicate(final T value)" ], [ "instanceofPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static Predicate<Object> instanceofPredicate(final Class<?> type)" ], [ "uniquePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> uniquePredicate()" ], [ "invokerPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> invokerPredicate(final String methodName)" ], [ "invokerPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> invokerPredicate(final String methodName, final Class<?>[] paramTypes, final Object[] args)" ], [ "andPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> andPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "allPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> allPredicate(final Predicate<? super T>... predicates)" ], [ "allPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> allPredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "orPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> orPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "anyPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> anyPredicate(final Predicate<? super T>... predicates)" ], [ "anyPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> anyPredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "eitherPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> eitherPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "onePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> onePredicate(final Predicate<? super T>... predicates)" ], [ "onePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> onePredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "neitherPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> neitherPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "nonePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nonePredicate(final Predicate<? super T>... predicates)" ], [ "nonePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nonePredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "notPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> notPredicate(final Predicate<? super T> predicate)" ], [ "asPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> asPredicate(final Transformer<? super T, Boolean> transformer)" ], [ "nullIsExceptionPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nullIsExceptionPredicate(final Predicate<? super T> predicate)" ], [ "nullIsFalsePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nullIsFalsePredicate(final Predicate<? super T> predicate)" ], [ "nullIsTruePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nullIsTruePredicate(final Predicate<? super T> predicate)" ], [ "transformedPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> transformedPredicate(final Transformer<? super T, ? extends T> transformer, final Predicate<? super T> predicate)" ], [ "emptySet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> emptySet()" ], [ "emptySortedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> emptySortedSet()" ], [ "emptyIfNull", "org.apache.commons.collections4", "SetUtils", "public static <T> Set<T> emptyIfNull(final Set<T> set)" ], [ "isEqualSet", "org.apache.commons.collections4", "SetUtils", "public static boolean isEqualSet(final Collection<?> set1, final Collection<?> set2)" ], [ "hashCodeForSet", "org.apache.commons.collections4", "SetUtils", "public static <T> int hashCodeForSet(final Collection<T> set)" ], [ "newIdentityHashSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> newIdentityHashSet()" ], [ "synchronizedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> synchronizedSet(final Set<E> set)" ], [ "unmodifiableSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> unmodifiableSet(final Set<? extends E> set)" ], [ "predicatedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> predicatedSet(final Set<E> set, final Predicate<? super E> predicate)" ], [ "transformedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> transformedSet(final Set<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "orderedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> orderedSet(final Set<E> set)" ], [ "synchronizedSortedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> synchronizedSortedSet(final SortedSet<E> set)" ], [ "unmodifiableSortedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> unmodifiableSortedSet(final SortedSet<E> set)" ], [ "predicatedSortedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> predicatedSortedSet(final SortedSet<E> set, final Predicate<? super E> predicate)" ], [ "transformedSortedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> transformedSortedSet(final SortedSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "unmodifiableNavigableSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> unmodifiableNavigableSet(final NavigableSet<E> set)" ], [ "predicatedNavigableSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> predicatedNavigableSet(final NavigableSet<E> set, final Predicate<? super E> predicate)" ], [ "transformedNavigableSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> transformedNavigableSet(final NavigableSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "union", "org.apache.commons.collections4", "SetUtils", "public static <E> SetView<E> union(final Set<? extends E> a, final Set<? extends E> b)" ], [ "difference", "org.apache.commons.collections4", "SetUtils", "public static <E> SetView<E> difference(final Set<? extends E> a, final Set<? extends E> b)" ], [ "intersection", "org.apache.commons.collections4", "SetUtils", "public static <E> SetView<E> intersection(final Set<? extends E> a, final Set<? extends E> b)" ], [ "disjunction", "org.apache.commons.collections4", "SetUtils", "public static <E> SetView<E> disjunction(final Set<? extends E> a, final Set<? extends E> b)" ], [ "transformingSet", "org.apache.commons.collections4.set", "TransformedSet", "public static <E> TransformedSet<E> transformingSet(final Set<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedSet", "org.apache.commons.collections4.set", "TransformedSet", "public static <E> Set<E> transformedSet(final Set<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "transformingNavigableSet", "org.apache.commons.collections4.set", "TransformedNavigableSet", "public static <E> TransformedNavigableSet<E> transformingNavigableSet(final NavigableSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedNavigableSet", "org.apache.commons.collections4.set", "TransformedNavigableSet", "public static <E> TransformedNavigableSet<E> transformedNavigableSet(final NavigableSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "predicatedNavigableSet", "org.apache.commons.collections4.set", "PredicatedNavigableSet", "public static <E> PredicatedNavigableSet<E> predicatedNavigableSet(final NavigableSet<E> set, final Predicate<? super E> predicate)" ], [ "listOrderedSet", "org.apache.commons.collections4.set", "ListOrderedSet", "public static <E> ListOrderedSet<E> listOrderedSet(final Set<E> set, final List<E> list)" ], [ "listOrderedSet", "org.apache.commons.collections4.set", "ListOrderedSet", "public static <E> ListOrderedSet<E> listOrderedSet(final Set<E> set)" ], [ "listOrderedSet", "org.apache.commons.collections4.set", "ListOrderedSet", "public static <E> ListOrderedSet<E> listOrderedSet(final List<E> list)" ], [ "unmodifiableSet", "org.apache.commons.collections4.set", "UnmodifiableSet", "public static <E> Set<E> unmodifiableSet(final Set<? extends E> set)" ], [ "mapBackedSet", "org.apache.commons.collections4.set", "MapBackedSet", "public static <E, V> MapBackedSet<E, V> mapBackedSet(final Map<E, ? super V> map)" ], [ "mapBackedSet", "org.apache.commons.collections4.set", "MapBackedSet", "public static <E, V> MapBackedSet<E, V> mapBackedSet(final Map<E, ? super V> map, final V dummyValue)" ], [ "unmodifiableSortedSet", "org.apache.commons.collections4.set", "UnmodifiableSortedSet", "public static <E> SortedSet<E> unmodifiableSortedSet(final SortedSet<E> set)" ], [ "predicatedSortedSet", "org.apache.commons.collections4.set", "PredicatedSortedSet", "public static <E> PredicatedSortedSet<E> predicatedSortedSet(final SortedSet<E> set, final Predicate<? super E> predicate)" ], [ "predicatedSet", "org.apache.commons.collections4.set", "PredicatedSet", "public static <E> PredicatedSet<E> predicatedSet(final Set<E> set, final Predicate<? super E> predicate)" ], [ "unmodifiableNavigableSet", "org.apache.commons.collections4.set", "UnmodifiableNavigableSet", "public static <E> NavigableSet<E> unmodifiableNavigableSet(final NavigableSet<E> set)" ], [ "transformingSortedSet", "org.apache.commons.collections4.set", "TransformedSortedSet", "public static <E> TransformedSortedSet<E> transformingSortedSet(final SortedSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedSortedSet", "org.apache.commons.collections4.set", "TransformedSortedSet", "public static <E> TransformedSortedSet<E> transformedSortedSet(final SortedSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "get", "org.apache.commons.collections4", "EnumerationUtils", "public static <T> T get(final Enumeration<T> e, final int index)" ], [ "toList", "org.apache.commons.collections4", "EnumerationUtils", "public static <E> List<E> toList(final Enumeration<? extends E> enumeration)" ], [ "toList", "org.apache.commons.collections4", "EnumerationUtils", "public static List<String> toList(final StringTokenizer stringTokenizer)" ], [ "unmodifiableQueue", "org.apache.commons.collections4", "QueueUtils", "public static <E> Queue<E> unmodifiableQueue(final Queue<? extends E> queue)" ], [ "predicatedQueue", "org.apache.commons.collections4", "QueueUtils", "public static <E> Queue<E> predicatedQueue(final Queue<E> queue, final Predicate<? super E> predicate)" ], [ "transformingQueue", "org.apache.commons.collections4", "QueueUtils", "public static <E> Queue<E> transformingQueue(final Queue<E> queue, final Transformer<? super E, ? extends E> transformer)" ], [ "emptyQueue", "org.apache.commons.collections4", "QueueUtils", "public static <E> Queue<E> emptyQueue()" ], [ "synchronizedBag", "org.apache.commons.collections4.bag", "SynchronizedBag", "public static <E> SynchronizedBag<E> synchronizedBag(final Bag<E> bag)" ], [ "collectionBag", "org.apache.commons.collections4.bag", "CollectionBag", "public static <E> Bag<E> collectionBag(final Bag<E> bag)" ], [ "unmodifiableBag", "org.apache.commons.collections4.bag", "UnmodifiableBag", "public static <E> Bag<E> unmodifiableBag(final Bag<? extends E> bag)" ], [ "predicatedSortedBag", "org.apache.commons.collections4.bag", "PredicatedSortedBag", "public static <E> PredicatedSortedBag<E> predicatedSortedBag(final SortedBag<E> bag, final Predicate<? super E> predicate)" ], [ "unmodifiableSortedBag", "org.apache.commons.collections4.bag", "UnmodifiableSortedBag", "public static <E> SortedBag<E> unmodifiableSortedBag(final SortedBag<E> bag)" ], [ "transformingSortedBag", "org.apache.commons.collections4.bag", "TransformedSortedBag", "public static <E> TransformedSortedBag<E> transformingSortedBag(final SortedBag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedSortedBag", "org.apache.commons.collections4.bag", "TransformedSortedBag", "public static <E> TransformedSortedBag<E> transformedSortedBag(final SortedBag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "predicatedBag", "org.apache.commons.collections4.bag", "PredicatedBag", "public static <E> PredicatedBag<E> predicatedBag(final Bag<E> bag, final Predicate<? super E> predicate)" ], [ "synchronizedSortedBag", "org.apache.commons.collections4.bag", "SynchronizedSortedBag", "public static <E> SynchronizedSortedBag<E> synchronizedSortedBag(final SortedBag<E> bag)" ], [ "collectionSortedBag", "org.apache.commons.collections4.bag", "CollectionSortedBag", "public static <E> SortedBag<E> collectionSortedBag(final SortedBag<E> bag)" ], [ "transformingBag", "org.apache.commons.collections4.bag", "TransformedBag", "public static <E> Bag<E> transformingBag(final Bag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedBag", "org.apache.commons.collections4.bag", "TransformedBag", "public static <E> Bag<E> transformedBag(final Bag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "predicatedMultiSet", "org.apache.commons.collections4.multiset", "PredicatedMultiSet", "public static <E> PredicatedMultiSet<E> predicatedMultiSet(final MultiSet<E> multiset, final Predicate<? super E> predicate)" ], [ "unmodifiableMultiSet", "org.apache.commons.collections4.multiset", "UnmodifiableMultiSet", "public static <E> MultiSet<E> unmodifiableMultiSet(final MultiSet<? extends E> multiset)" ], [ "synchronizedMultiSet", "org.apache.commons.collections4.multiset", "SynchronizedMultiSet", "public static <E> SynchronizedMultiSet<E> synchronizedMultiSet(final MultiSet<E> multiset)" ], [ "synchronizedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> synchronizedBag(final Bag<E> bag)" ], [ "unmodifiableBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> unmodifiableBag(final Bag<? extends E> bag)" ], [ "predicatedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> predicatedBag(final Bag<E> bag, final Predicate<? super E> predicate)" ], [ "transformingBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> transformingBag(final Bag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "collectionBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> collectionBag(final Bag<E> bag)" ], [ "synchronizedSortedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> SortedBag<E> synchronizedSortedBag(final SortedBag<E> bag)" ], [ "unmodifiableSortedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> SortedBag<E> unmodifiableSortedBag(final SortedBag<E> bag)" ], [ "predicatedSortedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> SortedBag<E> predicatedSortedBag(final SortedBag<E> bag, final Predicate<? super E> predicate)" ], [ "transformingSortedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> SortedBag<E> transformingSortedBag(final SortedBag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "emptyBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> emptyBag()" ], [ "emptySortedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> SortedBag<E> emptySortedBag()" ], [ "resettableEmptyListIterator", "org.apache.commons.collections4.iterators", "EmptyListIterator", "public static <E> ResettableListIterator<E> resettableEmptyListIterator()" ], [ "emptyListIterator", "org.apache.commons.collections4.iterators", "EmptyListIterator", "public static <E> ListIterator<E> emptyListIterator()" ], [ "unmodifiableOrderedMapIterator", "org.apache.commons.collections4.iterators", "UnmodifiableOrderedMapIterator", "public static <K, V> OrderedMapIterator<K, V> unmodifiableOrderedMapIterator(final OrderedMapIterator<K, ? extends V> iterator)" ], [ "unmodifiableIterator", "org.apache.commons.collections4.iterators", "UnmodifiableIterator", "public static <E> Iterator<E> unmodifiableIterator(final Iterator<? extends E> iterator)" ], [ "peekingIterator", "org.apache.commons.collections4.iterators", "PeekingIterator", "public static <E> PeekingIterator<E> peekingIterator(final Iterator<? extends E> iterator)" ], [ "emptyMapIterator", "org.apache.commons.collections4.iterators", "EmptyMapIterator", "public static <K, V> MapIterator<K, V> emptyMapIterator()" ], [ "emptyOrderedIterator", "org.apache.commons.collections4.iterators", "EmptyOrderedIterator", "public static <E> OrderedIterator<E> emptyOrderedIterator()" ], [ "umodifiableListIterator", "org.apache.commons.collections4.iterators", "UnmodifiableListIterator", "public static <E> ListIterator<E> umodifiableListIterator(final ListIterator<? extends E> iterator)" ], [ "emptyOrderedMapIterator", "org.apache.commons.collections4.iterators", "EmptyOrderedMapIterator", "public static <K, V> OrderedMapIterator<K, V> emptyOrderedMapIterator()" ], [ "unmodifiableMapIterator", "org.apache.commons.collections4.iterators", "UnmodifiableMapIterator", "public static <K, V> MapIterator<K, V> unmodifiableMapIterator(final MapIterator<? extends K, ? extends V> iterator)" ], [ "resettableEmptyIterator", "org.apache.commons.collections4.iterators", "EmptyIterator", "public static <E> ResettableIterator<E> resettableEmptyIterator()" ], [ "emptyIterator", "org.apache.commons.collections4.iterators", "EmptyIterator", "public static <E> Iterator<E> emptyIterator()" ], [ "pushbackIterator", "org.apache.commons.collections4.iterators", "PushbackIterator", "public static <E> PushbackIterator<E> pushbackIterator(final Iterator<? extends E> iterator)" ], [ "readableMap", "org.apache.commons.collections4", "SplitMapUtils", "public static <K, V> IterableMap<K, V> readableMap(final Get<K, V> get)" ], [ "writableMap", "org.apache.commons.collections4", "SplitMapUtils", "public static <K, V> Map<K, V> writableMap(final Put<K, V> put)" ] ],
  "tokensProjectClassesNonPrivateStaticAttributes" : [ [ "EMPTY_ITERATOR", "org.apache.commons.collections4", "IteratorUtils", "public static final ResettableIterator EMPTY_ITERATOR = EmptyIterator.RESETTABLE_INSTANCE;" ], [ "EMPTY_LIST_ITERATOR", "org.apache.commons.collections4", "IteratorUtils", "public static final ResettableListIterator EMPTY_LIST_ITERATOR = EmptyListIterator.RESETTABLE_INSTANCE;" ], [ "EMPTY_ORDERED_ITERATOR", "org.apache.commons.collections4", "IteratorUtils", "public static final OrderedIterator EMPTY_ORDERED_ITERATOR = EmptyOrderedIterator.INSTANCE;" ], [ "EMPTY_MAP_ITERATOR", "org.apache.commons.collections4", "IteratorUtils", "public static final MapIterator EMPTY_MAP_ITERATOR = EmptyMapIterator.INSTANCE;" ], [ "EMPTY_ORDERED_MAP_ITERATOR", "org.apache.commons.collections4", "IteratorUtils", "public static final OrderedMapIterator EMPTY_ORDERED_MAP_ITERATOR = EmptyOrderedMapIterator.INSTANCE;" ], [ "NATURAL_COMPARATOR", "org.apache.commons.collections4", "ComparatorUtils", "public static final Comparator NATURAL_COMPARATOR = ComparableComparator.<Comparable>comparableComparator();" ], [ "EMPTY_MULTI_VALUED_MAP", "org.apache.commons.collections4", "MultiMapUtils", "public static final MultiValuedMap EMPTY_MULTI_VALUED_MAP = UnmodifiableMultiValuedMap.unmodifiableMultiValuedMap(new ArrayListValuedHashMap(0, 0));" ], [ "EMPTY_SORTED_MAP", "org.apache.commons.collections4", "MapUtils", "public static final SortedMap EMPTY_SORTED_MAP = UnmodifiableSortedMap.unmodifiableSortedMap(new TreeMap<Object, Object>());" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "DefaultEquator", "public static final DefaultEquator INSTANCE = new DefaultEquator<Object>();" ], [ "HASHCODE_NULL", "org.apache.commons.collections4.functors", "DefaultEquator", "public static final int HASHCODE_NULL = -1;" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "ExceptionClosure", "public static final Closure INSTANCE = new ExceptionClosure<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "NOPClosure", "public static final Closure INSTANCE = new NOPClosure<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "NullPredicate", "public static final Predicate INSTANCE = new NullPredicate<Object>();" ], [ "NULL_INSTANCE", "org.apache.commons.collections4.functors", "ConstantTransformer", "public static final Transformer NULL_INSTANCE = new ConstantTransformer<Object, Object>(null);" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "ExceptionTransformer", "public static final Transformer INSTANCE = new ExceptionTransformer<Object, Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "NOPTransformer", "public static final Transformer INSTANCE = new NOPTransformer<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "ExceptionFactory", "public static final Factory INSTANCE = new ExceptionFactory<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "ExceptionPredicate", "public static final Predicate INSTANCE = new ExceptionPredicate<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "FalsePredicate", "public static final Predicate INSTANCE = new FalsePredicate<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "CloneTransformer", "public static final Transformer INSTANCE = new CloneTransformer<Object>();" ], [ "NULL_INSTANCE", "org.apache.commons.collections4.functors", "ConstantFactory", "public static final Factory NULL_INSTANCE = new ConstantFactory<Object>(null);" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "TruePredicate", "public static final Predicate INSTANCE = new TruePredicate<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "NotNullPredicate", "public static final Predicate INSTANCE = new NotNullPredicate<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.comparators", "ComparableComparator", "public static final ComparableComparator INSTANCE = new ComparableComparator();" ], [ "EMPTY_COLLECTION", "org.apache.commons.collections4", "CollectionUtils", "public static final Collection EMPTY_COLLECTION = UnmodifiableCollection.unmodifiableCollection(new ArrayList<Object>());" ], [ "EMPTY_ITERABLE", "org.apache.commons.collections4", "IterableUtils", "static final FluentIterable EMPTY_ITERABLE = new FluentIterable<Object>() {\n\n    @Override\n    public Iterator<Object> iterator() {\n        return IteratorUtils.emptyIterator();\n    }\n};" ], [ "NULL_BIT_KEY", "org.apache.commons.collections4.trie", "KeyAnalyzer", "public static final int NULL_BIT_KEY = -1;" ], [ "EQUAL_BIT_KEY", "org.apache.commons.collections4.trie", "KeyAnalyzer", "public static final int EQUAL_BIT_KEY = -2;" ], [ "OUT_OF_BOUNDS_BIT_KEY", "org.apache.commons.collections4.trie", "KeyAnalyzer", "public static final int OUT_OF_BOUNDS_BIT_KEY = -3;" ], [ "INSTANCE", "org.apache.commons.collections4.trie.analyzer", "StringKeyAnalyzer", "public static final StringKeyAnalyzer INSTANCE = new StringKeyAnalyzer();" ], [ "LENGTH", "org.apache.commons.collections4.trie.analyzer", "StringKeyAnalyzer", "public static final int LENGTH = Character.SIZE;" ], [ "NO_NEXT_ENTRY", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String NO_NEXT_ENTRY = \"No next() entry in the iteration\";" ], [ "NO_PREVIOUS_ENTRY", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String NO_PREVIOUS_ENTRY = \"No previous() entry in the iteration\";" ], [ "REMOVE_INVALID", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String REMOVE_INVALID = \"remove() can only be called once after next()\";" ], [ "GETKEY_INVALID", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String GETKEY_INVALID = \"getKey() can only be called after next() and before remove()\";" ], [ "GETVALUE_INVALID", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String GETVALUE_INVALID = \"getValue() can only be called after next() and before remove()\";" ], [ "SETVALUE_INVALID", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String SETVALUE_INVALID = \"setValue() can only be called after next() and before remove()\";" ], [ "DEFAULT_CAPACITY", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final int DEFAULT_CAPACITY = 16;" ], [ "DEFAULT_THRESHOLD", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final int DEFAULT_THRESHOLD = 12;" ], [ "DEFAULT_LOAD_FACTOR", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final float DEFAULT_LOAD_FACTOR = 0.75f;" ], [ "MAXIMUM_CAPACITY", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final int MAXIMUM_CAPACITY = 1 << 30;" ], [ "NULL", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final Object NULL = new Object();" ], [ "DEFAULT_MAX_SIZE", "org.apache.commons.collections4.map", "LRUMap", "protected static final int DEFAULT_MAX_SIZE = 100;" ], [ "EMPTY_MULTISET", "org.apache.commons.collections4", "MultiSetUtils", "public static final MultiSet EMPTY_MULTISET = UnmodifiableMultiSet.unmodifiableMultiSet(new HashMultiSet<Object>());" ], [ "EMPTY_SORTED_SET", "org.apache.commons.collections4", "SetUtils", "public static final SortedSet EMPTY_SORTED_SET = UnmodifiableSortedSet.unmodifiableSortedSet(new TreeSet<Object>());" ], [ "EMPTY_QUEUE", "org.apache.commons.collections4", "QueueUtils", "public static final Queue EMPTY_QUEUE = UnmodifiableQueue.unmodifiableQueue(new LinkedList<Object>());" ], [ "EMPTY_BAG", "org.apache.commons.collections4", "BagUtils", "public static final Bag EMPTY_BAG = UnmodifiableBag.unmodifiableBag(new HashBag<Object>());" ], [ "EMPTY_SORTED_BAG", "org.apache.commons.collections4", "BagUtils", "public static final Bag EMPTY_SORTED_BAG = UnmodifiableSortedBag.unmodifiableSortedBag(new TreeBag<Object>());" ], [ "RESETTABLE_INSTANCE", "org.apache.commons.collections4.iterators", "EmptyListIterator", "public static final ResettableListIterator RESETTABLE_INSTANCE = new EmptyListIterator<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.iterators", "EmptyListIterator", "public static final ListIterator INSTANCE = RESETTABLE_INSTANCE;" ], [ "INSTANCE", "org.apache.commons.collections4.iterators", "EmptyMapIterator", "public static final MapIterator INSTANCE = new EmptyMapIterator<Object, Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.iterators", "EmptyOrderedIterator", "public static final OrderedIterator INSTANCE = new EmptyOrderedIterator<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.iterators", "EmptyOrderedMapIterator", "public static final OrderedMapIterator INSTANCE = new EmptyOrderedMapIterator<Object, Object>();" ], [ "RESETTABLE_INSTANCE", "org.apache.commons.collections4.iterators", "EmptyIterator", "public static final ResettableIterator RESETTABLE_INSTANCE = new EmptyIterator<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.iterators", "EmptyIterator", "public static final Iterator INSTANCE = RESETTABLE_INSTANCE;" ] ],
  "tokensMethodJavadocValues" : [ ],
  "tokensMethodArguments" : [ ],
  "tokensMethodVariablesNonPrivateNonStaticNonVoidMethods" : [ [ "hashCode", "java.lang", "Object", "public native int hashCode()" ], [ "toString", "java.lang", "Object", "public String toString()" ], [ "equals", "java.lang", "Object", "public boolean equals(Object arg0)" ], [ "clone", "java.lang", "Object", "protected native Object clone() throws CloneNotSupportedException" ], [ "getClass", "java.lang", "Object", "public final native Class<? extends Object> getClass()" ], [ "evaluate", "org.apache.commons.collections4", "Predicate", "public abstract boolean evaluate(T arg0)" ] ],
  "tokensMethodVariablesNonPrivateNonStaticAttributes" : [ ],
  "tokensOracleVariablesNonPrivateNonStaticNonVoidMethods" : [ ],
  "tokensOracleVariablesNonPrivateNonStaticAttributes" : [ ]
}, {
  "id" : 9021,
  "oracle" : ";",
  "oracleType" : "PRE",
  "projectName" : "commons-collections4-4.1",
  "packageName" : "org.apache.commons.collections4",
  "className" : "PredicateUtils",
  "javadocTag" : "@param paramTypes the parameter types",
  "methodJavadoc" : "    /**\n     * Creates a Predicate that invokes a method on the input object.\n     * The method must return either a boolean or a non-null Boolean,\n     * and have no parameters. If the input object is null, a\n     * PredicateException is thrown.\n     * <p>\n     * For example, <code>PredicateUtils.invokerPredicate(\"isEmpty\");</code>\n     * will call the <code>isEmpty</code> method on the input object to\n     * determine the predicate result.\n     *\n     * @param <T>  the type that the predicate queries\n     * @param methodName  the method name to call on the input object, may not be null\n     * @param paramTypes  the parameter types\n     * @param args  the arguments\n     * @return the predicate\n     * @throws NullPointerException if the method name is null\n     * @throws IllegalArgumentException if the paramTypes and args don't match\n     * @see InvokerTransformer\n     * @see TransformerPredicate\n     */",
  "methodSourceCode" : "public static <T> Predicate<T> invokerPredicate(final String methodName, final Class<?>[] paramTypes, final Object[] args){\n    // reuse transformer as it has caching - this is lazy really, should have inner class here\n    return asPredicate(InvokerTransformer.<Object, Boolean>invokerTransformer(methodName, paramTypes, args));\n}",
  "classJavadoc" : "/**\n * <code>PredicateUtils</code> provides reference implementations and utilities\n * for the Predicate functor interface. The supplied predicates are:\n * <ul>\n * <li>Invoker - returns the result of a method call on the input object\n * <li>InstanceOf - true if the object is an instanceof a class\n * <li>Equal - true if the object equals() a specified object\n * <li>Identity - true if the object == a specified object\n * <li>Null - true if the object is null\n * <li>NotNull - true if the object is not null\n * <li>Unique - true if the object has not already been evaluated\n * <li>And/All - true if all of the predicates are true\n * <li>Or/Any - true if any of the predicates is true\n * <li>Either/One - true if only one of the predicate is true\n * <li>Neither/None - true if none of the predicates are true\n * <li>Not - true if the predicate is false, and vice versa\n * <li>Transformer - wraps a Transformer as a Predicate\n * <li>True - always return true\n * <li>False - always return false\n * <li>Exception - always throws an exception\n * <li>NullIsException/NullIsFalse/NullIsTrue - check for null input\n * <li>Transformed - transforms the input before calling the predicate\n * </ul>\n * All the supplied predicates are Serializable.\n *\n * @since 3.0\n * @version $Id: PredicateUtils.java 1686855 2015-06-22 13:00:27Z tn $\n */",
  "classSourceCode" : "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.commons.collections4;\n\nimport java.util.Collection;\n\nimport org.apache.commons.collections4.functors.AllPredicate;\nimport org.apache.commons.collections4.functors.AndPredicate;\nimport org.apache.commons.collections4.functors.AnyPredicate;\nimport org.apache.commons.collections4.functors.EqualPredicate;\nimport org.apache.commons.collections4.functors.ExceptionPredicate;\nimport org.apache.commons.collections4.functors.FalsePredicate;\nimport org.apache.commons.collections4.functors.IdentityPredicate;\nimport org.apache.commons.collections4.functors.InstanceofPredicate;\nimport org.apache.commons.collections4.functors.InvokerTransformer;\nimport org.apache.commons.collections4.functors.NonePredicate;\nimport org.apache.commons.collections4.functors.NotNullPredicate;\nimport org.apache.commons.collections4.functors.NotPredicate;\nimport org.apache.commons.collections4.functors.NullIsExceptionPredicate;\nimport org.apache.commons.collections4.functors.NullIsFalsePredicate;\nimport org.apache.commons.collections4.functors.NullIsTruePredicate;\nimport org.apache.commons.collections4.functors.NullPredicate;\nimport org.apache.commons.collections4.functors.OnePredicate;\nimport org.apache.commons.collections4.functors.OrPredicate;\nimport org.apache.commons.collections4.functors.TransformedPredicate;\nimport org.apache.commons.collections4.functors.TransformerPredicate;\nimport org.apache.commons.collections4.functors.TruePredicate;\nimport org.apache.commons.collections4.functors.UniquePredicate;\n\n/**\n * <code>PredicateUtils</code> provides reference implementations and utilities\n * for the Predicate functor interface. The supplied predicates are:\n * <ul>\n * <li>Invoker - returns the result of a method call on the input object\n * <li>InstanceOf - true if the object is an instanceof a class\n * <li>Equal - true if the object equals() a specified object\n * <li>Identity - true if the object == a specified object\n * <li>Null - true if the object is null\n * <li>NotNull - true if the object is not null\n * <li>Unique - true if the object has not already been evaluated\n * <li>And/All - true if all of the predicates are true\n * <li>Or/Any - true if any of the predicates is true\n * <li>Either/One - true if only one of the predicate is true\n * <li>Neither/None - true if none of the predicates are true\n * <li>Not - true if the predicate is false, and vice versa\n * <li>Transformer - wraps a Transformer as a Predicate\n * <li>True - always return true\n * <li>False - always return false\n * <li>Exception - always throws an exception\n * <li>NullIsException/NullIsFalse/NullIsTrue - check for null input\n * <li>Transformed - transforms the input before calling the predicate\n * </ul>\n * All the supplied predicates are Serializable.\n *\n * @since 3.0\n * @version $Id: PredicateUtils.java 1686855 2015-06-22 13:00:27Z tn $\n */\npublic class PredicateUtils {\n\n    /**\n     * This class is not normally instantiated.\n     */\n    private PredicateUtils() {}\n\n    // Simple predicates\n    //-----------------------------------------------------------------------------\n\n    /**\n     * Gets a Predicate that always throws an exception.\n     * This could be useful during testing as a placeholder.\n     *\n     * @param <T>  the type that the predicate queries\n     * @return the predicate\n     * @see ExceptionPredicate\n     */\n    public static <T> Predicate<T> exceptionPredicate() {\n        return ExceptionPredicate.exceptionPredicate();\n    }\n\n    /**\n     * Gets a Predicate that always returns true.\n     *\n     * @param <T>  the type that the predicate queries\n     * @return the predicate\n     * @see TruePredicate\n     */\n    public static <T> Predicate<T> truePredicate() {\n        return TruePredicate.truePredicate();\n    }\n\n    /**\n     * Gets a Predicate that always returns false.\n     *\n     * @param <T>  the type that the predicate queries\n     * @return the predicate\n     * @see FalsePredicate\n     */\n    public static <T> Predicate<T> falsePredicate() {\n        return FalsePredicate.falsePredicate();\n    }\n\n    /**\n     * Gets a Predicate that checks if the input object passed in is null.\n     *\n     * @param <T>  the type that the predicate queries\n     * @return the predicate\n     * @see NullPredicate\n     */\n    public static <T> Predicate<T> nullPredicate() {\n        return NullPredicate.nullPredicate();\n    }\n\n    /**\n     * Gets a Predicate that checks if the input object passed in is not null.\n     *\n     * @param <T>  the type that the predicate queries\n     * @return the predicate\n     * @see NotNullPredicate\n     */\n    public static <T> Predicate<T> notNullPredicate() {\n        return NotNullPredicate.notNullPredicate();\n    }\n\n    /**\n     * Creates a Predicate that checks if the input object is equal to the\n     * specified object using equals().\n     *\n     * @param <T>  the type that the predicate queries\n     * @param value  the value to compare against\n     * @return the predicate\n     * @see EqualPredicate\n     */\n    public static <T> Predicate<T> equalPredicate(final T value) {\n        return EqualPredicate.equalPredicate(value);\n    }\n\n    /**\n     * Creates a Predicate that checks if the input object is equal to the\n     * specified object by identity.\n     *\n     * @param <T>  the type that the predicate queries\n     * @param value  the value to compare against\n     * @return the predicate\n     * @see IdentityPredicate\n     */\n    public static <T> Predicate<T> identityPredicate(final T value) {\n        return IdentityPredicate.identityPredicate(value);\n    }\n\n    /**\n     * Creates a Predicate that checks if the object passed in is of\n     * a particular type, using instanceof. A <code>null</code> input\n     * object will return <code>false</code>.\n     *\n     * @param type  the type to check for, may not be null\n     * @return the predicate\n     * @throws NullPointerException if the class is null\n     * @see InstanceofPredicate\n     */\n    public static Predicate<Object> instanceofPredicate(final Class<?> type) {\n        return InstanceofPredicate.instanceOfPredicate(type);\n    }\n\n    /**\n     * Creates a Predicate that returns true the first time an object is\n     * encountered, and false if the same object is received\n     * again. The comparison is by equals(). A <code>null</code> input object\n     * is accepted and will return true the first time, and false subsequently\n     * as well.\n     *\n     * @param <T>  the type that the predicate queries\n     * @return the predicate\n     * @see UniquePredicate\n     */\n    public static <T> Predicate<T> uniquePredicate() {\n        // must return new instance each time\n        return UniquePredicate.uniquePredicate();\n    }\n\n    /**\n     * Creates a Predicate that invokes a method on the input object.\n     * The method must return either a boolean or a non-null Boolean,\n     * and have no parameters. If the input object is null, a\n     * PredicateException is thrown.\n     * <p>\n     * For example, <code>PredicateUtils.invokerPredicate(\"isEmpty\");</code>\n     * will call the <code>isEmpty</code> method on the input object to\n     * determine the predicate result.\n     *\n     * @param <T>  the type that the predicate queries\n     * @param methodName  the method name to call on the input object, may not be null\n     * @return the predicate\n     * @throws NullPointerException if the methodName is null.\n     * @see InvokerTransformer\n     * @see TransformerPredicate\n     */\n    public static <T> Predicate<T> invokerPredicate(final String methodName) {\n        // reuse transformer as it has caching - this is lazy really, should have inner class here\n        return asPredicate(InvokerTransformer.<Object, Boolean>invokerTransformer(methodName));\n    }\n\n    /**\n     * Creates a Predicate that invokes a method on the input object.\n     * The method must return either a boolean or a non-null Boolean,\n     * and have no parameters. If the input object is null, a\n     * PredicateException is thrown.\n     * <p>\n     * For example, <code>PredicateUtils.invokerPredicate(\"isEmpty\");</code>\n     * will call the <code>isEmpty</code> method on the input object to\n     * determine the predicate result.\n     *\n     * @param <T>  the type that the predicate queries\n     * @param methodName  the method name to call on the input object, may not be null\n     * @param paramTypes  the parameter types\n     * @param args  the arguments\n     * @return the predicate\n     * @throws NullPointerException if the method name is null\n     * @throws IllegalArgumentException if the paramTypes and args don't match\n     * @see InvokerTransformer\n     * @see TransformerPredicate\n     */\n    public static <T> Predicate<T> invokerPredicate(final String methodName, final Class<?>[] paramTypes,\n                                                    final Object[] args) {\n        // reuse transformer as it has caching - this is lazy really, should have inner class here\n        return asPredicate(InvokerTransformer.<Object, Boolean>invokerTransformer(methodName, paramTypes, args));\n    }\n\n    // Boolean combinations\n    //-----------------------------------------------------------------------------\n\n    /**\n     * Create a new Predicate that returns true only if both of the specified\n     * predicates are true.\n     *\n     * @param <T>  the type that the predicate queries\n     * @param predicate1  the first predicate, may not be null\n     * @param predicate2  the second predicate, may not be null\n     * @return the <code>and</code> predicate\n     * @throws NullPointerException if either predicate is null\n     * @see AndPredicate\n     */\n    public static <T> Predicate<T> andPredicate(final Predicate<? super T> predicate1,\n                                                final Predicate<? super T> predicate2) {\n        return AndPredicate.andPredicate(predicate1, predicate2);\n    }\n\n    /**\n     * Create a new Predicate that returns true only if all of the specified\n     * predicates are true.\n     * If the array of predicates is empty, then this predicate returns true.\n     *\n     * @param <T>  the type that the predicate queries\n     * @param predicates  an array of predicates to check, may not be null\n     * @return the <code>all</code> predicate\n     * @throws NullPointerException if the predicates array is null\n     * @throws NullPointerException if any predicate in the array is null\n     * @see AllPredicate\n     */\n    public static <T> Predicate<T> allPredicate(final Predicate<? super T>... predicates) {\n        return AllPredicate.allPredicate(predicates);\n    }\n\n    /**\n     * Create a new Predicate that returns true only if all of the specified\n     * predicates are true. The predicates are checked in iterator order.\n     * If the collection of predicates is empty, then this predicate returns true.\n     *\n     * @param <T>  the type that the predicate queries\n     * @param predicates  a collection of predicates to check, may not be null\n     * @return the <code>all</code> predicate\n     * @throws NullPointerException if the predicates collection is null\n     * @throws NullPointerException if any predicate in the collection is null\n     * @see AllPredicate\n     */\n    public static <T> Predicate<T> allPredicate(final Collection<? extends Predicate<? super T>> predicates) {\n        return AllPredicate.allPredicate(predicates);\n    }\n\n    /**\n     * Create a new Predicate that returns true if either of the specified\n     * predicates are true.\n     *\n     * @param <T>  the type that the predicate queries\n     * @param predicate1  the first predicate, may not be null\n     * @param predicate2  the second predicate, may not be null\n     * @return the <code>or</code> predicate\n     * @throws NullPointerException if either predicate is null\n     * @see OrPredicate\n     */\n    public static <T> Predicate<T> orPredicate(final Predicate<? super T> predicate1,\n                                               final Predicate<? super T> predicate2) {\n        return OrPredicate.orPredicate(predicate1, predicate2);\n    }\n\n    /**\n     * Create a new Predicate that returns true if any of the specified\n     * predicates are true.\n     * If the array of predicates is empty, then this predicate returns false.\n     *\n     * @param <T>  the type that the predicate queries\n     * @param predicates  an array of predicates to check, may not be null\n     * @return the <code>any</code> predicate\n     * @throws NullPointerException if the predicates array is null\n     * @throws NullPointerException if any predicate in the array is null\n     * @see AnyPredicate\n     */\n    public static <T> Predicate<T> anyPredicate(final Predicate<? super T>... predicates) {\n        return AnyPredicate.anyPredicate(predicates);\n    }\n\n    /**\n     * Create a new Predicate that returns true if any of the specified\n     * predicates are true. The predicates are checked in iterator order.\n     * If the collection of predicates is empty, then this predicate returns false.\n     *\n     * @param <T>  the type that the predicate queries\n     * @param predicates  a collection of predicates to check, may not be null\n     * @return the <code>any</code> predicate\n     * @throws NullPointerException if the predicates collection is null\n     * @throws NullPointerException if any predicate in the collection is null\n     * @see AnyPredicate\n     */\n    public static <T> Predicate<T> anyPredicate(final Collection<? extends Predicate<? super T>> predicates) {\n        return AnyPredicate.anyPredicate(predicates);\n    }\n\n    /**\n     * Create a new Predicate that returns true if one, but not both, of the\n     * specified predicates are true. XOR\n     *\n     * @param <T>  the type that the predicate queries\n     * @param predicate1  the first predicate, may not be null\n     * @param predicate2  the second predicate, may not be null\n     * @return the <code>either</code> predicate\n     * @throws NullPointerException if either predicate is null\n     * @see OnePredicate\n     */\n    public static <T> Predicate<T> eitherPredicate(final Predicate<? super T> predicate1,\n                                                   final Predicate<? super T> predicate2) {\n        @SuppressWarnings(\"unchecked\")\n        final Predicate<T> onePredicate = PredicateUtils.onePredicate(predicate1, predicate2);\n        return onePredicate;\n    }\n\n    /**\n     * Create a new Predicate that returns true if only one of the specified\n     * predicates are true.\n     * If the array of predicates is empty, then this predicate returns false.\n     *\n     * @param <T>  the type that the predicate queries\n     * @param predicates  an array of predicates to check, may not be null\n     * @return the <code>one</code> predicate\n     * @throws NullPointerException if the predicates array is null\n     * @throws NullPointerException if any predicate in the array is null\n     * @see OnePredicate\n     */\n    public static <T> Predicate<T> onePredicate(final Predicate<? super T>... predicates) {\n        return OnePredicate.onePredicate(predicates);\n    }\n\n    /**\n     * Create a new Predicate that returns true if only one of the specified\n     * predicates are true. The predicates are checked in iterator order.\n     * If the collection of predicates is empty, then this predicate returns false.\n     *\n     * @param <T>  the type that the predicate queries\n     * @param predicates  a collection of predicates to check, may not be null\n     * @return the <code>one</code> predicate\n     * @throws NullPointerException if the predicates collection is null\n     * @throws NullPointerException if any predicate in the collection is null\n     * @see OnePredicate\n     */\n    public static <T> Predicate<T> onePredicate(final Collection<? extends Predicate<? super T>> predicates) {\n        return OnePredicate.onePredicate(predicates);\n    }\n\n    /**\n     * Create a new Predicate that returns true if neither of the specified\n     * predicates are true.\n     *\n     * @param <T>  the type that the predicate queries\n     * @param predicate1  the first predicate, may not be null\n     * @param predicate2  the second predicate, may not be null\n     * @return the <code>neither</code> predicate\n     * @throws NullPointerException if either predicate is null\n     * @see NonePredicate\n     */\n    public static <T> Predicate<T> neitherPredicate(final Predicate<? super T> predicate1,\n                                                    final Predicate<? super T> predicate2) {\n        @SuppressWarnings(\"unchecked\")\n        final Predicate<T> nonePredicate = PredicateUtils.nonePredicate(predicate1, predicate2);\n        return nonePredicate;\n    }\n\n    /**\n     * Create a new Predicate that returns true if none of the specified\n     * predicates are true.\n     * If the array of predicates is empty, then this predicate returns true.\n     *\n     * @param <T>  the type that the predicate queries\n     * @param predicates  an array of predicates to check, may not be null\n     * @return the <code>none</code> predicate\n     * @throws NullPointerException if the predicates array is null\n     * @throws NullPointerException if any predicate in the array is null\n     * @see NonePredicate\n     */\n    public static <T> Predicate<T> nonePredicate(final Predicate<? super T>... predicates) {\n        return NonePredicate.nonePredicate(predicates);\n    }\n\n    /**\n     * Create a new Predicate that returns true if none of the specified\n     * predicates are true. The predicates are checked in iterator order.\n     * If the collection of predicates is empty, then this predicate returns true.\n     *\n     * @param <T>  the type that the predicate queries\n     * @param predicates  a collection of predicates to check, may not be null\n     * @return the <code>none</code> predicate\n     * @throws NullPointerException if the predicates collection is null\n     * @throws NullPointerException if any predicate in the collection is null\n     * @see NonePredicate\n     */\n    public static <T> Predicate<T> nonePredicate(final Collection<? extends Predicate<? super T>> predicates) {\n        return NonePredicate.nonePredicate(predicates);\n    }\n\n    /**\n     * Create a new Predicate that returns true if the specified predicate\n     * returns false and vice versa.\n     *\n     * @param <T>  the type that the predicate queries\n     * @param predicate  the predicate to not\n     * @return the <code>not</code> predicate\n     * @throws NullPointerException if the predicate is null\n     * @see NotPredicate\n     */\n    public static <T> Predicate<T> notPredicate(final Predicate<? super T> predicate) {\n        return NotPredicate.notPredicate(predicate);\n    }\n\n    // Adaptors\n    //-----------------------------------------------------------------------------\n\n    /**\n     * Create a new Predicate that wraps a Transformer. The Transformer must\n     * return either Boolean.TRUE or Boolean.FALSE otherwise a PredicateException\n     * will be thrown.\n     *\n     * @param <T>  the type that the predicate queries\n     * @param transformer  the transformer to wrap, may not be null\n     * @return the transformer wrapping predicate\n     * @throws NullPointerException if the transformer is null\n     * @see TransformerPredicate\n     */\n    public static <T> Predicate<T> asPredicate(final Transformer<? super T, Boolean> transformer) {\n        return TransformerPredicate.transformerPredicate(transformer);\n    }\n\n    // Null handlers\n    //-----------------------------------------------------------------------------\n\n    /**\n     * Gets a Predicate that throws an exception if the input object is null,\n     * otherwise it calls the specified Predicate. This allows null handling\n     * behaviour to be added to Predicates that don't support nulls.\n     *\n     * @param <T>  the type that the predicate queries\n     * @param predicate  the predicate to wrap, may not be null\n     * @return the predicate\n     * @throws NullPointerException if the predicate is null.\n     * @see NullIsExceptionPredicate\n     */\n    public static <T> Predicate<T> nullIsExceptionPredicate(final Predicate<? super T> predicate){\n        return NullIsExceptionPredicate.nullIsExceptionPredicate(predicate);\n    }\n\n    /**\n     * Gets a Predicate that returns false if the input object is null, otherwise\n     * it calls the specified Predicate. This allows null handling behaviour to\n     * be added to Predicates that don't support nulls.\n     *\n     * @param <T>  the type that the predicate queries\n     * @param predicate  the predicate to wrap, may not be null\n     * @return the predicate\n     * @throws NullPointerException if the predicate is null.\n     * @see NullIsFalsePredicate\n     */\n    public static <T> Predicate<T> nullIsFalsePredicate(final Predicate<? super T> predicate){\n        return NullIsFalsePredicate.nullIsFalsePredicate(predicate);\n    }\n\n    /**\n     * Gets a Predicate that returns true if the input object is null, otherwise\n     * it calls the specified Predicate. This allows null handling behaviour to\n     * be added to Predicates that don't support nulls.\n     *\n     * @param <T>  the type that the predicate queries\n     * @param predicate  the predicate to wrap, may not be null\n     * @return the predicate\n     * @throws NullPointerException if the predicate is null.\n     * @see NullIsTruePredicate\n     */\n    public static <T> Predicate<T> nullIsTruePredicate(final Predicate<? super T> predicate){\n        return NullIsTruePredicate.nullIsTruePredicate(predicate);\n    }\n\n    // Transformed\n    //-----------------------------------------------------------------------\n    /**\n     * Creates a predicate that transforms the input object before passing it\n     * to the predicate.\n     *\n     * @param <T>  the type that the predicate queries\n     * @param transformer  the transformer to call first\n     * @param predicate  the predicate to call with the result of the transform\n     * @return the predicate\n     * @throws NullPointerException if the transformer or the predicate is null\n     * @see TransformedPredicate\n     * @since 3.1\n     */\n    public static <T> Predicate<T> transformedPredicate(\n            final Transformer<? super T, ? extends T> transformer, final Predicate<? super T> predicate) {\n        return TransformedPredicate.transformedPredicate(transformer, predicate);\n    }\n\n}\n",
  "tokensGeneralGrammar" : [ "null", "true", "false", ",", ".", ":", ";", "?", "(", ")", "jdVar", "stream", "Arrays", "allMatch", "noneMatch", "anyMatch", "~", ">>", "<<", ">>>", "|", "&", "^", "+", "-", "/", "*", "%", "&&", "||", ">=", "<=", ">", "<", "==", "!=", "instanceof", "class", "methodResultID", "this" ],
  "tokensGeneralValuesGlobalDictionary" : [ [ "0", "int" ], [ "1", "int" ], [ "-1", "int" ], [ "0.0", "double" ], [ "1.0", "double" ], [ "-1.0", "double" ], [ "\"\"", "String" ], [ "\" \"", "String" ] ],
  "tokensProjectClasses" : [ [ "BidiMap", "org.apache.commons.collections4" ], [ "Equator", "org.apache.commons.collections4" ], [ "MultiSet", "org.apache.commons.collections4" ], [ "IteratorUtils", "org.apache.commons.collections4" ], [ "ComparatorUtils", "org.apache.commons.collections4" ], [ "FunctorException", "org.apache.commons.collections4" ], [ "AbstractDualBidiMap", "org.apache.commons.collections4.bidimap" ], [ "UnmodifiableBidiMap", "org.apache.commons.collections4.bidimap" ], [ "AbstractOrderedBidiMapDecorator", "org.apache.commons.collections4.bidimap" ], [ "UnmodifiableOrderedBidiMap", "org.apache.commons.collections4.bidimap" ], [ "AbstractBidiMapDecorator", "org.apache.commons.collections4.bidimap" ], [ "DualLinkedHashBidiMap", "org.apache.commons.collections4.bidimap" ], [ "UnmodifiableSortedBidiMap", "org.apache.commons.collections4.bidimap" ], [ "AbstractSortedBidiMapDecorator", "org.apache.commons.collections4.bidimap" ], [ "DualHashBidiMap", "org.apache.commons.collections4.bidimap" ], [ "DualTreeBidiMap", "org.apache.commons.collections4.bidimap" ], [ "TreeBidiMap", "org.apache.commons.collections4.bidimap" ], [ "MultiMapUtils", "org.apache.commons.collections4" ], [ "BoundedCollection", "org.apache.commons.collections4" ], [ "UnmodifiableBoundedCollection", "org.apache.commons.collections4.collection" ], [ "CompositeCollection", "org.apache.commons.collections4.collection" ], [ "TransformedCollection", "org.apache.commons.collections4.collection" ], [ "PredicatedCollection", "org.apache.commons.collections4.collection" ], [ "IndexedCollection", "org.apache.commons.collections4.collection" ], [ "SynchronizedCollection", "org.apache.commons.collections4.collection" ], [ "UnmodifiableCollection", "org.apache.commons.collections4.collection" ], [ "AbstractCollectionDecorator", "org.apache.commons.collections4.collection" ], [ "OrderedBidiMap", "org.apache.commons.collections4" ], [ "FactoryUtils", "org.apache.commons.collections4" ], [ "IterableGet", "org.apache.commons.collections4" ], [ "ListUtils", "org.apache.commons.collections4" ], [ "Closure", "org.apache.commons.collections4" ], [ "IterableSortedMap", "org.apache.commons.collections4" ], [ "MapUtils", "org.apache.commons.collections4" ], [ "Transformer", "org.apache.commons.collections4" ], [ "DefaultEquator", "org.apache.commons.collections4.functors" ], [ "StringValueTransformer", "org.apache.commons.collections4.functors" ], [ "PredicateDecorator", "org.apache.commons.collections4.functors" ], [ "IfTransformer", "org.apache.commons.collections4.functors" ], [ "IdentityPredicate", "org.apache.commons.collections4.functors" ], [ "ExceptionClosure", "org.apache.commons.collections4.functors" ], [ "NOPClosure", "org.apache.commons.collections4.functors" ], [ "ClosureTransformer", "org.apache.commons.collections4.functors" ], [ "FunctorUtils", "org.apache.commons.collections4.functors" ], [ "TransformerPredicate", "org.apache.commons.collections4.functors" ], [ "NullPredicate", "org.apache.commons.collections4.functors" ], [ "ConstantTransformer", "org.apache.commons.collections4.functors" ], [ "PredicateTransformer", "org.apache.commons.collections4.functors" ], [ "WhileClosure", "org.apache.commons.collections4.functors" ], [ "ForClosure", "org.apache.commons.collections4.functors" ], [ "NullIsTruePredicate", "org.apache.commons.collections4.functors" ], [ "TransformedPredicate", "org.apache.commons.collections4.functors" ], [ "NonePredicate", "org.apache.commons.collections4.functors" ], [ "ExceptionTransformer", "org.apache.commons.collections4.functors" ], [ "SwitchTransformer", "org.apache.commons.collections4.functors" ], [ "TransformerClosure", "org.apache.commons.collections4.functors" ], [ "OrPredicate", "org.apache.commons.collections4.functors" ], [ "NOPTransformer", "org.apache.commons.collections4.functors" ], [ "MapTransformer", "org.apache.commons.collections4.functors" ], [ "ExceptionFactory", "org.apache.commons.collections4.functors" ], [ "ChainedClosure", "org.apache.commons.collections4.functors" ], [ "AndPredicate", "org.apache.commons.collections4.functors" ], [ "PrototypeFactory", "org.apache.commons.collections4.functors" ], [ "ExceptionPredicate", "org.apache.commons.collections4.functors" ], [ "AbstractQuantifierPredicate", "org.apache.commons.collections4.functors" ], [ "InstanceofPredicate", "org.apache.commons.collections4.functors" ], [ "InvokerTransformer", "org.apache.commons.collections4.functors" ], [ "FalsePredicate", "org.apache.commons.collections4.functors" ], [ "CloneTransformer", "org.apache.commons.collections4.functors" ], [ "NotPredicate", "org.apache.commons.collections4.functors" ], [ "ConstantFactory", "org.apache.commons.collections4.functors" ], [ "ChainedTransformer", "org.apache.commons.collections4.functors" ], [ "ComparatorPredicate", "org.apache.commons.collections4.functors" ], [ "CatchAndRethrowClosure", "org.apache.commons.collections4.functors" ], [ "AllPredicate", "org.apache.commons.collections4.functors" ], [ "NullIsFalsePredicate", "org.apache.commons.collections4.functors" ], [ "NullIsExceptionPredicate", "org.apache.commons.collections4.functors" ], [ "AnyPredicate", "org.apache.commons.collections4.functors" ], [ "TruePredicate", "org.apache.commons.collections4.functors" ], [ "FactoryTransformer", "org.apache.commons.collections4.functors" ], [ "NotNullPredicate", "org.apache.commons.collections4.functors" ], [ "SwitchClosure", "org.apache.commons.collections4.functors" ], [ "UniquePredicate", "org.apache.commons.collections4.functors" ], [ "InstantiateTransformer", "org.apache.commons.collections4.functors" ], [ "OnePredicate", "org.apache.commons.collections4.functors" ], [ "EqualPredicate", "org.apache.commons.collections4.functors" ], [ "InstantiateFactory", "org.apache.commons.collections4.functors" ], [ "IfClosure", "org.apache.commons.collections4.functors" ], [ "ResettableListIterator", "org.apache.commons.collections4" ], [ "OrderedIterator", "org.apache.commons.collections4" ], [ "ComparatorChain", "org.apache.commons.collections4.comparators" ], [ "BooleanComparator", "org.apache.commons.collections4.comparators" ], [ "ReverseComparator", "org.apache.commons.collections4.comparators" ], [ "ComparableComparator", "org.apache.commons.collections4.comparators" ], [ "TransformingComparator", "org.apache.commons.collections4.comparators" ], [ "FixedOrderComparator", "org.apache.commons.collections4.comparators" ], [ "NullComparator", "org.apache.commons.collections4.comparators" ], [ "CollectionUtils", "org.apache.commons.collections4" ], [ "ListValuedMap", "org.apache.commons.collections4" ], [ "AbstractIterableGetMapDecorator", "org.apache.commons.collections4.splitmap" ], [ "TransformedSplitMap", "org.apache.commons.collections4.splitmap" ], [ "Factory", "org.apache.commons.collections4" ], [ "IterableUtils", "org.apache.commons.collections4" ], [ "Bag", "org.apache.commons.collections4" ], [ "Predicate", "org.apache.commons.collections4" ], [ "SortedBag", "org.apache.commons.collections4" ], [ "TrieUtils", "org.apache.commons.collections4" ], [ "ClosureUtils", "org.apache.commons.collections4" ], [ "PatriciaTrie", "org.apache.commons.collections4.trie" ], [ "UnmodifiableTrie", "org.apache.commons.collections4.trie" ], [ "KeyAnalyzer", "org.apache.commons.collections4.trie" ], [ "AbstractPatriciaTrie", "org.apache.commons.collections4.trie" ], [ "AbstractBitwiseTrie", "org.apache.commons.collections4.trie" ], [ "StringKeyAnalyzer", "org.apache.commons.collections4.trie.analyzer" ], [ "TransformedSortedMap", "org.apache.commons.collections4.map" ], [ "AbstractLinkedMap", "org.apache.commons.collections4.map" ], [ "Flat3Map", "org.apache.commons.collections4.map" ], [ "PredicatedMap", "org.apache.commons.collections4.map" ], [ "FixedSizeSortedMap", "org.apache.commons.collections4.map" ], [ "UnmodifiableSortedMap", "org.apache.commons.collections4.map" ], [ "PredicatedSortedMap", "org.apache.commons.collections4.map" ], [ "DefaultedMap", "org.apache.commons.collections4.map" ], [ "ReferenceIdentityMap", "org.apache.commons.collections4.map" ], [ "AbstractSortedMapDecorator", "org.apache.commons.collections4.map" ], [ "AbstractInputCheckedMapDecorator", "org.apache.commons.collections4.map" ], [ "FixedSizeMap", "org.apache.commons.collections4.map" ], [ "LazySortedMap", "org.apache.commons.collections4.map" ], [ "UnmodifiableOrderedMap", "org.apache.commons.collections4.map" ], [ "CaseInsensitiveMap", "org.apache.commons.collections4.map" ], [ "AbstractHashedMap", "org.apache.commons.collections4.map" ], [ "AbstractOrderedMapDecorator", "org.apache.commons.collections4.map" ], [ "UnmodifiableMap", "org.apache.commons.collections4.map" ], [ "EntrySetToMapIteratorAdapter", "org.apache.commons.collections4.map" ], [ "AbstractIterableMap", "org.apache.commons.collections4.map" ], [ "ListOrderedMap", "org.apache.commons.collections4.map" ], [ "LinkedMap", "org.apache.commons.collections4.map" ], [ "SingletonMap", "org.apache.commons.collections4.map" ], [ "UnmodifiableEntrySet", "org.apache.commons.collections4.map" ], [ "StaticBucketMap", "org.apache.commons.collections4.map" ], [ "AbstractMapDecorator", "org.apache.commons.collections4.map" ], [ "AbstractReferenceMap", "org.apache.commons.collections4.map" ], [ "MultiKeyMap", "org.apache.commons.collections4.map" ], [ "HashedMap", "org.apache.commons.collections4.map" ], [ "LazyMap", "org.apache.commons.collections4.map" ], [ "PassiveExpiringMap", "org.apache.commons.collections4.map" ], [ "MultiValueMap", "org.apache.commons.collections4.map" ], [ "LRUMap", "org.apache.commons.collections4.map" ], [ "ReferenceMap", "org.apache.commons.collections4.map" ], [ "TransformedMap", "org.apache.commons.collections4.map" ], [ "CompositeMap", "org.apache.commons.collections4.map" ], [ "UnmodifiableMapEntry", "org.apache.commons.collections4.keyvalue" ], [ "MultiKey", "org.apache.commons.collections4.keyvalue" ], [ "DefaultMapEntry", "org.apache.commons.collections4.keyvalue" ], [ "DefaultKeyValue", "org.apache.commons.collections4.keyvalue" ], [ "AbstractMapEntryDecorator", "org.apache.commons.collections4.keyvalue" ], [ "AbstractKeyValue", "org.apache.commons.collections4.keyvalue" ], [ "TiedMapEntry", "org.apache.commons.collections4.keyvalue" ], [ "AbstractMapEntry", "org.apache.commons.collections4.keyvalue" ], [ "MultiSetUtils", "org.apache.commons.collections4" ], [ "MapIterator", "org.apache.commons.collections4" ], [ "AbstractMultiValuedMap", "org.apache.commons.collections4.multimap" ], [ "UnmodifiableMultiValuedMap", "org.apache.commons.collections4.multimap" ], [ "HashSetValuedHashMap", "org.apache.commons.collections4.multimap" ], [ "TransformedMultiValuedMap", "org.apache.commons.collections4.multimap" ], [ "AbstractSetValuedMap", "org.apache.commons.collections4.multimap" ], [ "AbstractListValuedMap", "org.apache.commons.collections4.multimap" ], [ "ArrayListValuedHashMap", "org.apache.commons.collections4.multimap" ], [ "AbstractMultiValuedMapDecorator", "org.apache.commons.collections4.multimap" ], [ "LazyList", "org.apache.commons.collections4.list" ], [ "AbstractSerializableListDecorator", "org.apache.commons.collections4.list" ], [ "TreeList", "org.apache.commons.collections4.list" ], [ "SetUniqueList", "org.apache.commons.collections4.list" ], [ "AbstractListDecorator", "org.apache.commons.collections4.list" ], [ "NodeCachingLinkedList", "org.apache.commons.collections4.list" ], [ "UnmodifiableList", "org.apache.commons.collections4.list" ], [ "FixedSizeList", "org.apache.commons.collections4.list" ], [ "TransformedList", "org.apache.commons.collections4.list" ], [ "GrowthList", "org.apache.commons.collections4.list" ], [ "AbstractLinkedList", "org.apache.commons.collections4.list" ], [ "CursorableLinkedList", "org.apache.commons.collections4.list" ], [ "PredicatedList", "org.apache.commons.collections4.list" ], [ "OrderedMap", "org.apache.commons.collections4" ], [ "AbstractQueueDecorator", "org.apache.commons.collections4.queue" ], [ "TransformedQueue", "org.apache.commons.collections4.queue" ], [ "UnmodifiableQueue", "org.apache.commons.collections4.queue" ], [ "CircularFifoQueue", "org.apache.commons.collections4.queue" ], [ "PredicatedQueue", "org.apache.commons.collections4.queue" ], [ "FluentIterable", "org.apache.commons.collections4" ], [ "TransformerUtils", "org.apache.commons.collections4" ], [ "PredicateUtils", "org.apache.commons.collections4" ], [ "ResettableIterator", "org.apache.commons.collections4" ], [ "MultiValuedMap", "org.apache.commons.collections4" ], [ "SetUtils", "org.apache.commons.collections4" ], [ "SortedBidiMap", "org.apache.commons.collections4" ], [ "ArrayStack", "org.apache.commons.collections4" ], [ "Put", "org.apache.commons.collections4" ], [ "OrderedMapIterator", "org.apache.commons.collections4" ], [ "TransformedSet", "org.apache.commons.collections4.set" ], [ "CompositeSet", "org.apache.commons.collections4.set" ], [ "TransformedNavigableSet", "org.apache.commons.collections4.set" ], [ "PredicatedNavigableSet", "org.apache.commons.collections4.set" ], [ "AbstractSetDecorator", "org.apache.commons.collections4.set" ], [ "ListOrderedSet", "org.apache.commons.collections4.set" ], [ "UnmodifiableSet", "org.apache.commons.collections4.set" ], [ "AbstractSerializableSetDecorator", "org.apache.commons.collections4.set" ], [ "MapBackedSet", "org.apache.commons.collections4.set" ], [ "UnmodifiableSortedSet", "org.apache.commons.collections4.set" ], [ "PredicatedSortedSet", "org.apache.commons.collections4.set" ], [ "AbstractSortedSetDecorator", "org.apache.commons.collections4.set" ], [ "PredicatedSet", "org.apache.commons.collections4.set" ], [ "AbstractNavigableSetDecorator", "org.apache.commons.collections4.set" ], [ "UnmodifiableNavigableSet", "org.apache.commons.collections4.set" ], [ "TransformedSortedSet", "org.apache.commons.collections4.set" ], [ "IterableMap", "org.apache.commons.collections4" ], [ "EnumerationUtils", "org.apache.commons.collections4" ], [ "DeleteCommand", "org.apache.commons.collections4.sequence" ], [ "ReplacementsHandler", "org.apache.commons.collections4.sequence" ], [ "InsertCommand", "org.apache.commons.collections4.sequence" ], [ "SequencesComparator", "org.apache.commons.collections4.sequence" ], [ "ReplacementsFinder", "org.apache.commons.collections4.sequence" ], [ "KeepCommand", "org.apache.commons.collections4.sequence" ], [ "EditCommand", "org.apache.commons.collections4.sequence" ], [ "CommandVisitor", "org.apache.commons.collections4.sequence" ], [ "EditScript", "org.apache.commons.collections4.sequence" ], [ "QueueUtils", "org.apache.commons.collections4" ], [ "SetValuedMap", "org.apache.commons.collections4" ], [ "SynchronizedBag", "org.apache.commons.collections4.bag" ], [ "AbstractMapBag", "org.apache.commons.collections4.bag" ], [ "CollectionBag", "org.apache.commons.collections4.bag" ], [ "UnmodifiableBag", "org.apache.commons.collections4.bag" ], [ "PredicatedSortedBag", "org.apache.commons.collections4.bag" ], [ "UnmodifiableSortedBag", "org.apache.commons.collections4.bag" ], [ "HashBag", "org.apache.commons.collections4.bag" ], [ "AbstractBagDecorator", "org.apache.commons.collections4.bag" ], [ "TransformedSortedBag", "org.apache.commons.collections4.bag" ], [ "TreeBag", "org.apache.commons.collections4.bag" ], [ "PredicatedBag", "org.apache.commons.collections4.bag" ], [ "SynchronizedSortedBag", "org.apache.commons.collections4.bag" ], [ "CollectionSortedBag", "org.apache.commons.collections4.bag" ], [ "TransformedBag", "org.apache.commons.collections4.bag" ], [ "AbstractSortedBagDecorator", "org.apache.commons.collections4.bag" ], [ "HashMultiSet", "org.apache.commons.collections4.multiset" ], [ "AbstractMultiSet", "org.apache.commons.collections4.multiset" ], [ "PredicatedMultiSet", "org.apache.commons.collections4.multiset" ], [ "AbstractMultiSetDecorator", "org.apache.commons.collections4.multiset" ], [ "AbstractMapMultiSet", "org.apache.commons.collections4.multiset" ], [ "UnmodifiableMultiSet", "org.apache.commons.collections4.multiset" ], [ "SynchronizedMultiSet", "org.apache.commons.collections4.multiset" ], [ "BagUtils", "org.apache.commons.collections4" ], [ "Unmodifiable", "org.apache.commons.collections4" ], [ "Get", "org.apache.commons.collections4" ], [ "Trie", "org.apache.commons.collections4" ], [ "MultiMap", "org.apache.commons.collections4" ], [ "KeyValue", "org.apache.commons.collections4" ], [ "IteratorChain", "org.apache.commons.collections4.iterators" ], [ "EmptyListIterator", "org.apache.commons.collections4.iterators" ], [ "UnmodifiableOrderedMapIterator", "org.apache.commons.collections4.iterators" ], [ "AbstractListIteratorDecorator", "org.apache.commons.collections4.iterators" ], [ "ZippingIterator", "org.apache.commons.collections4.iterators" ], [ "UnmodifiableIterator", "org.apache.commons.collections4.iterators" ], [ "CollatingIterator", "org.apache.commons.collections4.iterators" ], [ "UniqueFilterIterator", "org.apache.commons.collections4.iterators" ], [ "ReverseListIterator", "org.apache.commons.collections4.iterators" ], [ "BoundedIterator", "org.apache.commons.collections4.iterators" ], [ "AbstractIteratorDecorator", "org.apache.commons.collections4.iterators" ], [ "TransformIterator", "org.apache.commons.collections4.iterators" ], [ "AbstractEmptyIterator", "org.apache.commons.collections4.iterators" ], [ "NodeListIterator", "org.apache.commons.collections4.iterators" ], [ "ArrayListIterator", "org.apache.commons.collections4.iterators" ], [ "LazyIteratorChain", "org.apache.commons.collections4.iterators" ], [ "LoopingListIterator", "org.apache.commons.collections4.iterators" ], [ "PeekingIterator", "org.apache.commons.collections4.iterators" ], [ "ObjectGraphIterator", "org.apache.commons.collections4.iterators" ], [ "ArrayIterator", "org.apache.commons.collections4.iterators" ], [ "PermutationIterator", "org.apache.commons.collections4.iterators" ], [ "SingletonListIterator", "org.apache.commons.collections4.iterators" ], [ "EmptyMapIterator", "org.apache.commons.collections4.iterators" ], [ "ObjectArrayIterator", "org.apache.commons.collections4.iterators" ], [ "EnumerationIterator", "org.apache.commons.collections4.iterators" ], [ "IteratorIterable", "org.apache.commons.collections4.iterators" ], [ "AbstractEmptyMapIterator", "org.apache.commons.collections4.iterators" ], [ "LoopingIterator", "org.apache.commons.collections4.iterators" ], [ "IteratorEnumeration", "org.apache.commons.collections4.iterators" ], [ "SingletonIterator", "org.apache.commons.collections4.iterators" ], [ "ListIteratorWrapper", "org.apache.commons.collections4.iterators" ], [ "SkippingIterator", "org.apache.commons.collections4.iterators" ], [ "EmptyOrderedIterator", "org.apache.commons.collections4.iterators" ], [ "AbstractMapIteratorDecorator", "org.apache.commons.collections4.iterators" ], [ "ObjectArrayListIterator", "org.apache.commons.collections4.iterators" ], [ "UnmodifiableListIterator", "org.apache.commons.collections4.iterators" ], [ "EmptyOrderedMapIterator", "org.apache.commons.collections4.iterators" ], [ "UnmodifiableMapIterator", "org.apache.commons.collections4.iterators" ], [ "EmptyIterator", "org.apache.commons.collections4.iterators" ], [ "EntrySetMapIterator", "org.apache.commons.collections4.iterators" ], [ "PushbackIterator", "org.apache.commons.collections4.iterators" ], [ "FilterIterator", "org.apache.commons.collections4.iterators" ], [ "AbstractUntypedIteratorDecorator", "org.apache.commons.collections4.iterators" ], [ "AbstractOrderedMapIteratorDecorator", "org.apache.commons.collections4.iterators" ], [ "FilterListIterator", "org.apache.commons.collections4.iterators" ], [ "SplitMapUtils", "org.apache.commons.collections4" ], [ "BoundedMap", "org.apache.commons.collections4" ] ],
  "tokensProjectClassesNonPrivateStaticNonVoidMethods" : [ [ "emptyIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> emptyIterator()" ], [ "emptyListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> emptyListIterator()" ], [ "emptyOrderedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> OrderedIterator<E> emptyOrderedIterator()" ], [ "emptyMapIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <K, V> MapIterator<K, V> emptyMapIterator()" ], [ "emptyOrderedMapIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <K, V> OrderedMapIterator<K, V> emptyOrderedMapIterator()" ], [ "singletonIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> singletonIterator(final E object)" ], [ "singletonListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ListIterator<E> singletonListIterator(final E object)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final E... array)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final Object array)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final E[] array, final int start)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final Object array, final int start)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final E[] array, final int start, final int end)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final Object array, final int start, final int end)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final E... array)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final Object array)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final E[] array, final int start)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final Object array, final int start)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final E[] array, final int start, final int end)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final Object array, final int start, final int end)" ], [ "boundedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> BoundedIterator<E> boundedIterator(final Iterator<? extends E> iterator, long max)" ], [ "boundedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> BoundedIterator<E> boundedIterator(final Iterator<? extends E> iterator, long offset, long max)" ], [ "unmodifiableIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> unmodifiableIterator(final Iterator<E> iterator)" ], [ "unmodifiableListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ListIterator<E> unmodifiableListIterator(final ListIterator<E> listIterator)" ], [ "unmodifiableMapIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <K, V> MapIterator<K, V> unmodifiableMapIterator(final MapIterator<K, V> mapIterator)" ], [ "chainedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> chainedIterator(final Iterator<? extends E> iterator1, final Iterator<? extends E> iterator2)" ], [ "chainedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> chainedIterator(final Iterator<? extends E>... iterators)" ], [ "chainedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> chainedIterator(final Collection<Iterator<? extends E>> iterators)" ], [ "collatedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> collatedIterator(final Comparator<? super E> comparator, final Iterator<? extends E> iterator1, final Iterator<? extends E> iterator2)" ], [ "collatedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> collatedIterator(final Comparator<? super E> comparator, final Iterator<? extends E>... iterators)" ], [ "collatedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> collatedIterator(final Comparator<? super E> comparator, final Collection<Iterator<? extends E>> iterators)" ], [ "objectGraphIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> objectGraphIterator(final E root, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <I, O> Iterator<O> transformedIterator(final Iterator<? extends I> iterator, final Transformer<? super I, ? extends O> transform)" ], [ "filteredIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> filteredIterator(final Iterator<? extends E> iterator, final Predicate<? super E> predicate)" ], [ "filteredListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ListIterator<E> filteredListIterator(final ListIterator<? extends E> listIterator, final Predicate<? super E> predicate)" ], [ "loopingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> loopingIterator(final Collection<? extends E> coll)" ], [ "loopingListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> loopingListIterator(final List<E> list)" ], [ "nodeListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static NodeListIterator nodeListIterator(final NodeList nodeList)" ], [ "nodeListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static NodeListIterator nodeListIterator(final Node node)" ], [ "peekingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> peekingIterator(final Iterator<? extends E> iterator)" ], [ "pushbackIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> pushbackIterator(final Iterator<? extends E> iterator)" ], [ "skippingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> SkippingIterator<E> skippingIterator(final Iterator<E> iterator, long offset)" ], [ "zippingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ZippingIterator<E> zippingIterator(final Iterator<? extends E> a, final Iterator<? extends E> b)" ], [ "zippingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ZippingIterator<E> zippingIterator(final Iterator<? extends E> a, final Iterator<? extends E> b, final Iterator<? extends E> c)" ], [ "zippingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ZippingIterator<E> zippingIterator(final Iterator<? extends E>... iterators)" ], [ "asIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> asIterator(final Enumeration<? extends E> enumeration)" ], [ "asIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> asIterator(final Enumeration<? extends E> enumeration, final Collection<? super E> removeCollection)" ], [ "asEnumeration", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Enumeration<E> asEnumeration(final Iterator<? extends E> iterator)" ], [ "asIterable", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterable<E> asIterable(final Iterator<? extends E> iterator)" ], [ "asMultipleUseIterable", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterable<E> asMultipleUseIterable(final Iterator<? extends E> iterator)" ], [ "toListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ListIterator<E> toListIterator(final Iterator<? extends E> iterator)" ], [ "toArray", "org.apache.commons.collections4", "IteratorUtils", "public static Object[] toArray(final Iterator<?> iterator)" ], [ "toArray", "org.apache.commons.collections4", "IteratorUtils", "public static <E> E[] toArray(final Iterator<? extends E> iterator, final Class<E> arrayClass)" ], [ "toList", "org.apache.commons.collections4", "IteratorUtils", "public static <E> List<E> toList(final Iterator<? extends E> iterator)" ], [ "toList", "org.apache.commons.collections4", "IteratorUtils", "public static <E> List<E> toList(final Iterator<? extends E> iterator, final int estimatedSize)" ], [ "getIterator", "org.apache.commons.collections4", "IteratorUtils", "public static Iterator<?> getIterator(final Object obj)" ], [ "forEachButLast", "org.apache.commons.collections4", "IteratorUtils", "public static <E> E forEachButLast(final Iterator<E> iterator, final Closure<? super E> closure)" ], [ "find", "org.apache.commons.collections4", "IteratorUtils", "public static <E> E find(final Iterator<E> iterator, final Predicate<? super E> predicate)" ], [ "indexOf", "org.apache.commons.collections4", "IteratorUtils", "public static <E> int indexOf(final Iterator<E> iterator, final Predicate<? super E> predicate)" ], [ "matchesAny", "org.apache.commons.collections4", "IteratorUtils", "public static <E> boolean matchesAny(final Iterator<E> iterator, final Predicate<? super E> predicate)" ], [ "matchesAll", "org.apache.commons.collections4", "IteratorUtils", "public static <E> boolean matchesAll(final Iterator<E> iterator, final Predicate<? super E> predicate)" ], [ "isEmpty", "org.apache.commons.collections4", "IteratorUtils", "public static boolean isEmpty(final Iterator<?> iterator)" ], [ "contains", "org.apache.commons.collections4", "IteratorUtils", "public static <E> boolean contains(final Iterator<E> iterator, final Object object)" ], [ "get", "org.apache.commons.collections4", "IteratorUtils", "public static <E> E get(final Iterator<E> iterator, final int index)" ], [ "size", "org.apache.commons.collections4", "IteratorUtils", "public static int size(final Iterator<?> iterator)" ], [ "toString", "org.apache.commons.collections4", "IteratorUtils", "public static <E> String toString(final Iterator<E> iterator)" ], [ "toString", "org.apache.commons.collections4", "IteratorUtils", "public static <E> String toString(final Iterator<E> iterator, final Transformer<? super E, String> transformer)" ], [ "toString", "org.apache.commons.collections4", "IteratorUtils", "public static <E> String toString(final Iterator<E> iterator, final Transformer<? super E, String> transformer, final String delimiter, final String prefix, final String suffix)" ], [ "naturalComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E extends Comparable<? super E>> Comparator<E> naturalComparator()" ], [ "chainedComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> Comparator<E> chainedComparator(final Comparator<E>... comparators)" ], [ "chainedComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> Comparator<E> chainedComparator(final Collection<Comparator<E>> comparators)" ], [ "reversedComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> Comparator<E> reversedComparator(final Comparator<E> comparator)" ], [ "booleanComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static Comparator<Boolean> booleanComparator(final boolean trueFirst)" ], [ "nullLowComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> Comparator<E> nullLowComparator(Comparator<E> comparator)" ], [ "nullHighComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> Comparator<E> nullHighComparator(Comparator<E> comparator)" ], [ "transformedComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <I, O> Comparator<I> transformedComparator(Comparator<O> comparator, final Transformer<? super I, ? extends O> transformer)" ], [ "min", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> E min(final E o1, final E o2, Comparator<E> comparator)" ], [ "max", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> E max(final E o1, final E o2, Comparator<E> comparator)" ], [ "unmodifiableBidiMap", "org.apache.commons.collections4.bidimap", "UnmodifiableBidiMap", "public static <K, V> BidiMap<K, V> unmodifiableBidiMap(final BidiMap<? extends K, ? extends V> map)" ], [ "unmodifiableOrderedBidiMap", "org.apache.commons.collections4.bidimap", "UnmodifiableOrderedBidiMap", "public static <K, V> OrderedBidiMap<K, V> unmodifiableOrderedBidiMap(final OrderedBidiMap<? extends K, ? extends V> map)" ], [ "unmodifiableSortedBidiMap", "org.apache.commons.collections4.bidimap", "UnmodifiableSortedBidiMap", "public static <K, V> SortedBidiMap<K, V> unmodifiableSortedBidiMap(final SortedBidiMap<K, ? extends V> map)" ], [ "emptyMultiValuedMap", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> MultiValuedMap<K, V> emptyMultiValuedMap()" ], [ "emptyIfNull", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> MultiValuedMap<K, V> emptyIfNull(final MultiValuedMap<K, V> map)" ], [ "isEmpty", "org.apache.commons.collections4", "MultiMapUtils", "public static boolean isEmpty(final MultiValuedMap<?, ?> map)" ], [ "getCollection", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> Collection<V> getCollection(final MultiValuedMap<K, V> map, final K key)" ], [ "getValuesAsList", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> List<V> getValuesAsList(final MultiValuedMap<K, V> map, final K key)" ], [ "getValuesAsSet", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> Set<V> getValuesAsSet(final MultiValuedMap<K, V> map, final K key)" ], [ "getValuesAsBag", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> Bag<V> getValuesAsBag(final MultiValuedMap<K, V> map, final K key)" ], [ "newListValuedHashMap", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> ListValuedMap<K, V> newListValuedHashMap()" ], [ "newSetValuedHashMap", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> SetValuedMap<K, V> newSetValuedHashMap()" ], [ "unmodifiableMultiValuedMap", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> MultiValuedMap<K, V> unmodifiableMultiValuedMap(final MultiValuedMap<? extends K, ? extends V> map)" ], [ "transformedMultiValuedMap", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> MultiValuedMap<K, V> transformedMultiValuedMap(final MultiValuedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "unmodifiableBoundedCollection", "org.apache.commons.collections4.collection", "UnmodifiableBoundedCollection", "public static <E> BoundedCollection<E> unmodifiableBoundedCollection(final BoundedCollection<? extends E> coll)" ], [ "unmodifiableBoundedCollection", "org.apache.commons.collections4.collection", "UnmodifiableBoundedCollection", "public static <E> BoundedCollection<E> unmodifiableBoundedCollection(Collection<? extends E> coll)" ], [ "transformingCollection", "org.apache.commons.collections4.collection", "TransformedCollection", "public static <E> TransformedCollection<E> transformingCollection(final Collection<E> coll, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedCollection", "org.apache.commons.collections4.collection", "TransformedCollection", "public static <E> TransformedCollection<E> transformedCollection(final Collection<E> collection, final Transformer<? super E, ? extends E> transformer)" ], [ "builder", "org.apache.commons.collections4.collection", "PredicatedCollection", "public static <E> Builder<E> builder(final Predicate<? super E> predicate)" ], [ "notNullBuilder", "org.apache.commons.collections4.collection", "PredicatedCollection", "public static <E> Builder<E> notNullBuilder()" ], [ "predicatedCollection", "org.apache.commons.collections4.collection", "PredicatedCollection", "public static <T> PredicatedCollection<T> predicatedCollection(final Collection<T> coll, final Predicate<? super T> predicate)" ], [ "uniqueIndexedCollection", "org.apache.commons.collections4.collection", "IndexedCollection", "public static <K, C> IndexedCollection<K, C> uniqueIndexedCollection(final Collection<C> coll, final Transformer<C, K> keyTransformer)" ], [ "nonUniqueIndexedCollection", "org.apache.commons.collections4.collection", "IndexedCollection", "public static <K, C> IndexedCollection<K, C> nonUniqueIndexedCollection(final Collection<C> coll, final Transformer<C, K> keyTransformer)" ], [ "synchronizedCollection", "org.apache.commons.collections4.collection", "SynchronizedCollection", "public static <T> SynchronizedCollection<T> synchronizedCollection(final Collection<T> coll)" ], [ "unmodifiableCollection", "org.apache.commons.collections4.collection", "UnmodifiableCollection", "public static <T> Collection<T> unmodifiableCollection(final Collection<? extends T> coll)" ], [ "exceptionFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> exceptionFactory()" ], [ "nullFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> nullFactory()" ], [ "constantFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> constantFactory(final T constantToReturn)" ], [ "prototypeFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> prototypeFactory(final T prototype)" ], [ "instantiateFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> instantiateFactory(final Class<T> classToInstantiate)" ], [ "instantiateFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> instantiateFactory(final Class<T> classToInstantiate, final Class<?>[] paramTypes, final Object[] args)" ], [ "emptyIfNull", "org.apache.commons.collections4", "ListUtils", "public static <T> List<T> emptyIfNull(final List<T> list)" ], [ "defaultIfNull", "org.apache.commons.collections4", "ListUtils", "public static <T> List<T> defaultIfNull(final List<T> list, final List<T> defaultList)" ], [ "intersection", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> intersection(final List<? extends E> list1, final List<? extends E> list2)" ], [ "subtract", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> subtract(final List<E> list1, final List<? extends E> list2)" ], [ "sum", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> sum(final List<? extends E> list1, final List<? extends E> list2)" ], [ "union", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> union(final List<? extends E> list1, final List<? extends E> list2)" ], [ "select", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> select(final Collection<? extends E> inputCollection, final Predicate<? super E> predicate)" ], [ "selectRejected", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> selectRejected(final Collection<? extends E> inputCollection, final Predicate<? super E> predicate)" ], [ "isEqualList", "org.apache.commons.collections4", "ListUtils", "public static boolean isEqualList(final Collection<?> list1, final Collection<?> list2)" ], [ "hashCodeForList", "org.apache.commons.collections4", "ListUtils", "public static int hashCodeForList(final Collection<?> list)" ], [ "retainAll", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> retainAll(final Collection<E> collection, final Collection<?> retain)" ], [ "removeAll", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> removeAll(final Collection<E> collection, final Collection<?> remove)" ], [ "synchronizedList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> synchronizedList(final List<E> list)" ], [ "unmodifiableList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> unmodifiableList(final List<? extends E> list)" ], [ "predicatedList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> predicatedList(final List<E> list, final Predicate<E> predicate)" ], [ "transformedList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> transformedList(final List<E> list, final Transformer<? super E, ? extends E> transformer)" ], [ "lazyList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> lazyList(final List<E> list, final Factory<? extends E> factory)" ], [ "fixedSizeList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> fixedSizeList(final List<E> list)" ], [ "indexOf", "org.apache.commons.collections4", "ListUtils", "public static <E> int indexOf(final List<E> list, final Predicate<E> predicate)" ], [ "longestCommonSubsequence", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> longestCommonSubsequence(final List<E> a, final List<E> b)" ], [ "longestCommonSubsequence", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> longestCommonSubsequence(final List<E> a, final List<E> b, final Equator<? super E> equator)" ], [ "longestCommonSubsequence", "org.apache.commons.collections4", "ListUtils", "public static String longestCommonSubsequence(final CharSequence a, final CharSequence b)" ], [ "partition", "org.apache.commons.collections4", "ListUtils", "public static <T> List<List<T>> partition(final List<T> list, final int size)" ], [ "getObject", "org.apache.commons.collections4", "MapUtils", "public static <K, V> V getObject(final Map<? super K, V> map, final K key)" ], [ "getString", "org.apache.commons.collections4", "MapUtils", "public static <K> String getString(final Map<? super K, ?> map, final K key)" ], [ "getBoolean", "org.apache.commons.collections4", "MapUtils", "public static <K> Boolean getBoolean(final Map<? super K, ?> map, final K key)" ], [ "getNumber", "org.apache.commons.collections4", "MapUtils", "public static <K> Number getNumber(final Map<? super K, ?> map, final K key)" ], [ "getByte", "org.apache.commons.collections4", "MapUtils", "public static <K> Byte getByte(final Map<? super K, ?> map, final K key)" ], [ "getShort", "org.apache.commons.collections4", "MapUtils", "public static <K> Short getShort(final Map<? super K, ?> map, final K key)" ], [ "getInteger", "org.apache.commons.collections4", "MapUtils", "public static <K> Integer getInteger(final Map<? super K, ?> map, final K key)" ], [ "getLong", "org.apache.commons.collections4", "MapUtils", "public static <K> Long getLong(final Map<? super K, ?> map, final K key)" ], [ "getFloat", "org.apache.commons.collections4", "MapUtils", "public static <K> Float getFloat(final Map<? super K, ?> map, final K key)" ], [ "getDouble", "org.apache.commons.collections4", "MapUtils", "public static <K> Double getDouble(final Map<? super K, ?> map, final K key)" ], [ "getMap", "org.apache.commons.collections4", "MapUtils", "public static <K> Map<?, ?> getMap(final Map<? super K, ?> map, final K key)" ], [ "getObject", "org.apache.commons.collections4", "MapUtils", "public static <K, V> V getObject(final Map<K, V> map, final K key, final V defaultValue)" ], [ "getString", "org.apache.commons.collections4", "MapUtils", "public static <K> String getString(final Map<? super K, ?> map, final K key, final String defaultValue)" ], [ "getBoolean", "org.apache.commons.collections4", "MapUtils", "public static <K> Boolean getBoolean(final Map<? super K, ?> map, final K key, final Boolean defaultValue)" ], [ "getNumber", "org.apache.commons.collections4", "MapUtils", "public static <K> Number getNumber(final Map<? super K, ?> map, final K key, final Number defaultValue)" ], [ "getByte", "org.apache.commons.collections4", "MapUtils", "public static <K> Byte getByte(final Map<? super K, ?> map, final K key, final Byte defaultValue)" ], [ "getShort", "org.apache.commons.collections4", "MapUtils", "public static <K> Short getShort(final Map<? super K, ?> map, final K key, final Short defaultValue)" ], [ "getInteger", "org.apache.commons.collections4", "MapUtils", "public static <K> Integer getInteger(final Map<? super K, ?> map, final K key, final Integer defaultValue)" ], [ "getLong", "org.apache.commons.collections4", "MapUtils", "public static <K> Long getLong(final Map<? super K, ?> map, final K key, final Long defaultValue)" ], [ "getFloat", "org.apache.commons.collections4", "MapUtils", "public static <K> Float getFloat(final Map<? super K, ?> map, final K key, final Float defaultValue)" ], [ "getDouble", "org.apache.commons.collections4", "MapUtils", "public static <K> Double getDouble(final Map<? super K, ?> map, final K key, final Double defaultValue)" ], [ "getMap", "org.apache.commons.collections4", "MapUtils", "public static <K> Map<?, ?> getMap(final Map<? super K, ?> map, final K key, final Map<?, ?> defaultValue)" ], [ "getBooleanValue", "org.apache.commons.collections4", "MapUtils", "public static <K> boolean getBooleanValue(final Map<? super K, ?> map, final K key)" ], [ "getByteValue", "org.apache.commons.collections4", "MapUtils", "public static <K> byte getByteValue(final Map<? super K, ?> map, final K key)" ], [ "getShortValue", "org.apache.commons.collections4", "MapUtils", "public static <K> short getShortValue(final Map<? super K, ?> map, final K key)" ], [ "getIntValue", "org.apache.commons.collections4", "MapUtils", "public static <K> int getIntValue(final Map<? super K, ?> map, final K key)" ], [ "getLongValue", "org.apache.commons.collections4", "MapUtils", "public static <K> long getLongValue(final Map<? super K, ?> map, final K key)" ], [ "getFloatValue", "org.apache.commons.collections4", "MapUtils", "public static <K> float getFloatValue(final Map<? super K, ?> map, final K key)" ], [ "getDoubleValue", "org.apache.commons.collections4", "MapUtils", "public static <K> double getDoubleValue(final Map<? super K, ?> map, final K key)" ], [ "getBooleanValue", "org.apache.commons.collections4", "MapUtils", "public static <K> boolean getBooleanValue(final Map<? super K, ?> map, final K key, final boolean defaultValue)" ], [ "getByteValue", "org.apache.commons.collections4", "MapUtils", "public static <K> byte getByteValue(final Map<? super K, ?> map, final K key, final byte defaultValue)" ], [ "getShortValue", "org.apache.commons.collections4", "MapUtils", "public static <K> short getShortValue(final Map<? super K, ?> map, final K key, final short defaultValue)" ], [ "getIntValue", "org.apache.commons.collections4", "MapUtils", "public static <K> int getIntValue(final Map<? super K, ?> map, final K key, final int defaultValue)" ], [ "getLongValue", "org.apache.commons.collections4", "MapUtils", "public static <K> long getLongValue(final Map<? super K, ?> map, final K key, final long defaultValue)" ], [ "getFloatValue", "org.apache.commons.collections4", "MapUtils", "public static <K> float getFloatValue(final Map<? super K, ?> map, final K key, final float defaultValue)" ], [ "getDoubleValue", "org.apache.commons.collections4", "MapUtils", "public static <K> double getDoubleValue(final Map<? super K, ?> map, final K key, final double defaultValue)" ], [ "toProperties", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Properties toProperties(final Map<K, V> map)" ], [ "toMap", "org.apache.commons.collections4", "MapUtils", "public static Map<String, Object> toMap(final ResourceBundle resourceBundle)" ], [ "invertMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Map<V, K> invertMap(final Map<K, V> map)" ], [ "putAll", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Map<K, V> putAll(final Map<K, V> map, final Object[] array)" ], [ "emptyIfNull", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Map<K, V> emptyIfNull(final Map<K, V> map)" ], [ "isEmpty", "org.apache.commons.collections4", "MapUtils", "public static boolean isEmpty(final Map<?, ?> map)" ], [ "isNotEmpty", "org.apache.commons.collections4", "MapUtils", "public static boolean isNotEmpty(final Map<?, ?> map)" ], [ "synchronizedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Map<K, V> synchronizedMap(final Map<K, V> map)" ], [ "unmodifiableMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Map<K, V> unmodifiableMap(final Map<? extends K, ? extends V> map)" ], [ "predicatedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> predicatedMap(final Map<K, V> map, final Predicate<? super K> keyPred, final Predicate<? super V> valuePred)" ], [ "transformedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> transformedMap(final Map<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "fixedSizeMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> fixedSizeMap(final Map<K, V> map)" ], [ "lazyMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> lazyMap(final Map<K, V> map, final Factory<? extends V> factory)" ], [ "lazyMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> lazyMap(final Map<K, V> map, final Transformer<? super K, ? extends V> transformerFactory)" ], [ "orderedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> OrderedMap<K, V> orderedMap(final Map<K, V> map)" ], [ "multiValueMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> MultiValueMap<K, V> multiValueMap(final Map<K, ? super Collection<V>> map)" ], [ "multiValueMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V, C extends Collection<V>> MultiValueMap<K, V> multiValueMap(final Map<K, C> map, final Class<C> collectionClass)" ], [ "multiValueMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V, C extends Collection<V>> MultiValueMap<K, V> multiValueMap(final Map<K, C> map, final Factory<C> collectionFactory)" ], [ "synchronizedSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> synchronizedSortedMap(final SortedMap<K, V> map)" ], [ "unmodifiableSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> unmodifiableSortedMap(final SortedMap<K, ? extends V> map)" ], [ "predicatedSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> predicatedSortedMap(final SortedMap<K, V> map, final Predicate<? super K> keyPred, final Predicate<? super V> valuePred)" ], [ "transformedSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> transformedSortedMap(final SortedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "fixedSizeSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> fixedSizeSortedMap(final SortedMap<K, V> map)" ], [ "lazySortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> lazySortedMap(final SortedMap<K, V> map, final Factory<? extends V> factory)" ], [ "lazySortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> lazySortedMap(final SortedMap<K, V> map, final Transformer<? super K, ? extends V> transformerFactory)" ], [ "iterableMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> iterableMap(final Map<K, V> map)" ], [ "iterableSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableSortedMap<K, V> iterableSortedMap(final SortedMap<K, V> sortedMap)" ], [ "defaultEquator", "org.apache.commons.collections4.functors", "DefaultEquator", "public static <T> DefaultEquator<T> defaultEquator()" ], [ "stringValueTransformer", "org.apache.commons.collections4.functors", "StringValueTransformer", "public static <T> Transformer<T, String> stringValueTransformer()" ], [ "ifTransformer", "org.apache.commons.collections4.functors", "IfTransformer", "public static <I, O> Transformer<I, O> ifTransformer(final Predicate<? super I> predicate, final Transformer<? super I, ? extends O> trueTransformer, final Transformer<? super I, ? extends O> falseTransformer)" ], [ "ifTransformer", "org.apache.commons.collections4.functors", "IfTransformer", "public static <T> Transformer<T, T> ifTransformer(final Predicate<? super T> predicate, final Transformer<? super T, ? extends T> trueTransformer)" ], [ "identityPredicate", "org.apache.commons.collections4.functors", "IdentityPredicate", "public static <T> Predicate<T> identityPredicate(final T object)" ], [ "exceptionClosure", "org.apache.commons.collections4.functors", "ExceptionClosure", "public static <E> Closure<E> exceptionClosure()" ], [ "nopClosure", "org.apache.commons.collections4.functors", "NOPClosure", "public static <E> Closure<E> nopClosure()" ], [ "closureTransformer", "org.apache.commons.collections4.functors", "ClosureTransformer", "public static <T> Transformer<T, T> closureTransformer(final Closure<? super T> closure)" ], [ "copy", "org.apache.commons.collections4.functors", "FunctorUtils", "static <T> Predicate<T>[] copy(final Predicate<? super T>... predicates)" ], [ "coerce", "org.apache.commons.collections4.functors", "FunctorUtils", "static <T> Predicate<T> coerce(final Predicate<? super T> predicate)" ], [ "validate", "org.apache.commons.collections4.functors", "FunctorUtils", "static <T> Predicate<? super T>[] validate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "copy", "org.apache.commons.collections4.functors", "FunctorUtils", "static <E> Closure<E>[] copy(final Closure<? super E>... closures)" ], [ "coerce", "org.apache.commons.collections4.functors", "FunctorUtils", "static <T> Closure<T> coerce(final Closure<? super T> closure)" ], [ "copy", "org.apache.commons.collections4.functors", "FunctorUtils", "static <I, O> Transformer<I, O>[] copy(final Transformer<? super I, ? extends O>... transformers)" ], [ "coerce", "org.apache.commons.collections4.functors", "FunctorUtils", "static <I, O> Transformer<I, O> coerce(final Transformer<? super I, ? extends O> transformer)" ], [ "transformerPredicate", "org.apache.commons.collections4.functors", "TransformerPredicate", "public static <T> Predicate<T> transformerPredicate(final Transformer<? super T, Boolean> transformer)" ], [ "nullPredicate", "org.apache.commons.collections4.functors", "NullPredicate", "public static <T> Predicate<T> nullPredicate()" ], [ "nullTransformer", "org.apache.commons.collections4.functors", "ConstantTransformer", "public static <I, O> Transformer<I, O> nullTransformer()" ], [ "constantTransformer", "org.apache.commons.collections4.functors", "ConstantTransformer", "public static <I, O> Transformer<I, O> constantTransformer(final O constantToReturn)" ], [ "predicateTransformer", "org.apache.commons.collections4.functors", "PredicateTransformer", "public static <T> Transformer<T, Boolean> predicateTransformer(final Predicate<? super T> predicate)" ], [ "whileClosure", "org.apache.commons.collections4.functors", "WhileClosure", "public static <E> Closure<E> whileClosure(final Predicate<? super E> predicate, final Closure<? super E> closure, final boolean doLoop)" ], [ "forClosure", "org.apache.commons.collections4.functors", "ForClosure", "public static <E> Closure<E> forClosure(final int count, final Closure<? super E> closure)" ], [ "nullIsTruePredicate", "org.apache.commons.collections4.functors", "NullIsTruePredicate", "public static <T> Predicate<T> nullIsTruePredicate(final Predicate<? super T> predicate)" ], [ "transformedPredicate", "org.apache.commons.collections4.functors", "TransformedPredicate", "public static <T> Predicate<T> transformedPredicate(final Transformer<? super T, ? extends T> transformer, final Predicate<? super T> predicate)" ], [ "nonePredicate", "org.apache.commons.collections4.functors", "NonePredicate", "public static <T> Predicate<T> nonePredicate(final Predicate<? super T>... predicates)" ], [ "nonePredicate", "org.apache.commons.collections4.functors", "NonePredicate", "public static <T> Predicate<T> nonePredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "exceptionTransformer", "org.apache.commons.collections4.functors", "ExceptionTransformer", "public static <I, O> Transformer<I, O> exceptionTransformer()" ], [ "switchTransformer", "org.apache.commons.collections4.functors", "SwitchTransformer", "public static <I, O> Transformer<I, O> switchTransformer(final Predicate<? super I>[] predicates, final Transformer<? super I, ? extends O>[] transformers, final Transformer<? super I, ? extends O> defaultTransformer)" ], [ "switchTransformer", "org.apache.commons.collections4.functors", "SwitchTransformer", "public static <I, O> Transformer<I, O> switchTransformer(final Map<? extends Predicate<? super I>, ? extends Transformer<? super I, ? extends O>> map)" ], [ "transformerClosure", "org.apache.commons.collections4.functors", "TransformerClosure", "public static <E> Closure<E> transformerClosure(final Transformer<? super E, ?> transformer)" ], [ "orPredicate", "org.apache.commons.collections4.functors", "OrPredicate", "public static <T> Predicate<T> orPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "nopTransformer", "org.apache.commons.collections4.functors", "NOPTransformer", "public static <T> Transformer<T, T> nopTransformer()" ], [ "mapTransformer", "org.apache.commons.collections4.functors", "MapTransformer", "public static <I, O> Transformer<I, O> mapTransformer(final Map<? super I, ? extends O> map)" ], [ "exceptionFactory", "org.apache.commons.collections4.functors", "ExceptionFactory", "public static <T> Factory<T> exceptionFactory()" ], [ "chainedClosure", "org.apache.commons.collections4.functors", "ChainedClosure", "public static <E> Closure<E> chainedClosure(final Closure<? super E>... closures)" ], [ "chainedClosure", "org.apache.commons.collections4.functors", "ChainedClosure", "public static <E> Closure<E> chainedClosure(final Collection<? extends Closure<? super E>> closures)" ], [ "andPredicate", "org.apache.commons.collections4.functors", "AndPredicate", "public static <T> Predicate<T> andPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "prototypeFactory", "org.apache.commons.collections4.functors", "PrototypeFactory", "public static <T> Factory<T> prototypeFactory(final T prototype)" ], [ "exceptionPredicate", "org.apache.commons.collections4.functors", "ExceptionPredicate", "public static <T> Predicate<T> exceptionPredicate()" ], [ "instanceOfPredicate", "org.apache.commons.collections4.functors", "InstanceofPredicate", "public static Predicate<Object> instanceOfPredicate(final Class<?> type)" ], [ "invokerTransformer", "org.apache.commons.collections4.functors", "InvokerTransformer", "public static <I, O> Transformer<I, O> invokerTransformer(final String methodName)" ], [ "invokerTransformer", "org.apache.commons.collections4.functors", "InvokerTransformer", "public static <I, O> Transformer<I, O> invokerTransformer(final String methodName, final Class<?>[] paramTypes, final Object[] args)" ], [ "falsePredicate", "org.apache.commons.collections4.functors", "FalsePredicate", "public static <T> Predicate<T> falsePredicate()" ], [ "cloneTransformer", "org.apache.commons.collections4.functors", "CloneTransformer", "public static <T> Transformer<T, T> cloneTransformer()" ], [ "notPredicate", "org.apache.commons.collections4.functors", "NotPredicate", "public static <T> Predicate<T> notPredicate(final Predicate<? super T> predicate)" ], [ "constantFactory", "org.apache.commons.collections4.functors", "ConstantFactory", "public static <T> Factory<T> constantFactory(final T constantToReturn)" ], [ "chainedTransformer", "org.apache.commons.collections4.functors", "ChainedTransformer", "public static <T> Transformer<T, T> chainedTransformer(final Transformer<? super T, ? extends T>... transformers)" ], [ "chainedTransformer", "org.apache.commons.collections4.functors", "ChainedTransformer", "public static <T> Transformer<T, T> chainedTransformer(final Collection<? extends Transformer<? super T, ? extends T>> transformers)" ], [ "comparatorPredicate", "org.apache.commons.collections4.functors", "ComparatorPredicate", "public static <T> Predicate<T> comparatorPredicate(final T object, final Comparator<T> comparator)" ], [ "comparatorPredicate", "org.apache.commons.collections4.functors", "ComparatorPredicate", "public static <T> Predicate<T> comparatorPredicate(final T object, final Comparator<T> comparator, final Criterion criterion)" ], [ "allPredicate", "org.apache.commons.collections4.functors", "AllPredicate", "public static <T> Predicate<T> allPredicate(final Predicate<? super T>... predicates)" ], [ "allPredicate", "org.apache.commons.collections4.functors", "AllPredicate", "public static <T> Predicate<T> allPredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "nullIsFalsePredicate", "org.apache.commons.collections4.functors", "NullIsFalsePredicate", "public static <T> Predicate<T> nullIsFalsePredicate(final Predicate<? super T> predicate)" ], [ "nullIsExceptionPredicate", "org.apache.commons.collections4.functors", "NullIsExceptionPredicate", "public static <T> Predicate<T> nullIsExceptionPredicate(final Predicate<? super T> predicate)" ], [ "anyPredicate", "org.apache.commons.collections4.functors", "AnyPredicate", "public static <T> Predicate<T> anyPredicate(final Predicate<? super T>... predicates)" ], [ "anyPredicate", "org.apache.commons.collections4.functors", "AnyPredicate", "public static <T> Predicate<T> anyPredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "truePredicate", "org.apache.commons.collections4.functors", "TruePredicate", "public static <T> Predicate<T> truePredicate()" ], [ "factoryTransformer", "org.apache.commons.collections4.functors", "FactoryTransformer", "public static <I, O> Transformer<I, O> factoryTransformer(final Factory<? extends O> factory)" ], [ "notNullPredicate", "org.apache.commons.collections4.functors", "NotNullPredicate", "public static <T> Predicate<T> notNullPredicate()" ], [ "switchClosure", "org.apache.commons.collections4.functors", "SwitchClosure", "public static <E> Closure<E> switchClosure(final Predicate<? super E>[] predicates, final Closure<? super E>[] closures, final Closure<? super E> defaultClosure)" ], [ "switchClosure", "org.apache.commons.collections4.functors", "SwitchClosure", "public static <E> Closure<E> switchClosure(final Map<Predicate<E>, Closure<E>> predicatesAndClosures)" ], [ "uniquePredicate", "org.apache.commons.collections4.functors", "UniquePredicate", "public static <T> Predicate<T> uniquePredicate()" ], [ "instantiateTransformer", "org.apache.commons.collections4.functors", "InstantiateTransformer", "public static <T> Transformer<Class<? extends T>, T> instantiateTransformer()" ], [ "instantiateTransformer", "org.apache.commons.collections4.functors", "InstantiateTransformer", "public static <T> Transformer<Class<? extends T>, T> instantiateTransformer(final Class<?>[] paramTypes, final Object[] args)" ], [ "onePredicate", "org.apache.commons.collections4.functors", "OnePredicate", "public static <T> Predicate<T> onePredicate(final Predicate<? super T>... predicates)" ], [ "onePredicate", "org.apache.commons.collections4.functors", "OnePredicate", "public static <T> Predicate<T> onePredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "equalPredicate", "org.apache.commons.collections4.functors", "EqualPredicate", "public static <T> Predicate<T> equalPredicate(final T object)" ], [ "equalPredicate", "org.apache.commons.collections4.functors", "EqualPredicate", "public static <T> Predicate<T> equalPredicate(final T object, final Equator<T> equator)" ], [ "instantiateFactory", "org.apache.commons.collections4.functors", "InstantiateFactory", "public static <T> Factory<T> instantiateFactory(final Class<T> classToInstantiate, final Class<?>[] paramTypes, final Object[] args)" ], [ "ifClosure", "org.apache.commons.collections4.functors", "IfClosure", "public static <E> Closure<E> ifClosure(final Predicate<? super E> predicate, final Closure<? super E> trueClosure)" ], [ "ifClosure", "org.apache.commons.collections4.functors", "IfClosure", "public static <E> Closure<E> ifClosure(final Predicate<? super E> predicate, final Closure<? super E> trueClosure, final Closure<? super E> falseClosure)" ], [ "getTrueFirstComparator", "org.apache.commons.collections4.comparators", "BooleanComparator", "public static BooleanComparator getTrueFirstComparator()" ], [ "getFalseFirstComparator", "org.apache.commons.collections4.comparators", "BooleanComparator", "public static BooleanComparator getFalseFirstComparator()" ], [ "booleanComparator", "org.apache.commons.collections4.comparators", "BooleanComparator", "public static BooleanComparator booleanComparator(final boolean trueFirst)" ], [ "comparableComparator", "org.apache.commons.collections4.comparators", "ComparableComparator", "public static <E extends Comparable<? super E>> ComparableComparator<E> comparableComparator()" ], [ "emptyCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <T> Collection<T> emptyCollection()" ], [ "emptyIfNull", "org.apache.commons.collections4", "CollectionUtils", "public static <T> Collection<T> emptyIfNull(final Collection<T> collection)" ], [ "union", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> union(final Iterable<? extends O> a, final Iterable<? extends O> b)" ], [ "intersection", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> intersection(final Iterable<? extends O> a, final Iterable<? extends O> b)" ], [ "disjunction", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> disjunction(final Iterable<? extends O> a, final Iterable<? extends O> b)" ], [ "subtract", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> subtract(final Iterable<? extends O> a, final Iterable<? extends O> b)" ], [ "subtract", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> subtract(final Iterable<? extends O> a, final Iterable<? extends O> b, final Predicate<O> p)" ], [ "containsAll", "org.apache.commons.collections4", "CollectionUtils", "public static boolean containsAll(final Collection<?> coll1, final Collection<?> coll2)" ], [ "containsAny", "org.apache.commons.collections4", "CollectionUtils", "public static boolean containsAny(final Collection<?> coll1, final Collection<?> coll2)" ], [ "getCardinalityMap", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Map<O, Integer> getCardinalityMap(final Iterable<? extends O> coll)" ], [ "isSubCollection", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isSubCollection(final Collection<?> a, final Collection<?> b)" ], [ "isProperSubCollection", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isProperSubCollection(final Collection<?> a, final Collection<?> b)" ], [ "isEqualCollection", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isEqualCollection(final Collection<?> a, final Collection<?> b)" ], [ "isEqualCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <E> boolean isEqualCollection(final Collection<? extends E> a, final Collection<? extends E> b, final Equator<? super E> equator)" ], [ "cardinality", "org.apache.commons.collections4", "CollectionUtils", "public static <O> int cardinality(final O obj, final Iterable<? super O> coll)" ], [ "find", "org.apache.commons.collections4", "CollectionUtils", "public static <T> T find(final Iterable<T> collection, final Predicate<? super T> predicate)" ], [ "forAllDo", "org.apache.commons.collections4", "CollectionUtils", "public static <T, C extends Closure<? super T>> C forAllDo(final Iterable<T> collection, final C closure)" ], [ "forAllDo", "org.apache.commons.collections4", "CollectionUtils", "public static <T, C extends Closure<? super T>> C forAllDo(final Iterator<T> iterator, final C closure)" ], [ "forAllButLastDo", "org.apache.commons.collections4", "CollectionUtils", "public static <T, C extends Closure<? super T>> T forAllButLastDo(final Iterable<T> collection, final C closure)" ], [ "forAllButLastDo", "org.apache.commons.collections4", "CollectionUtils", "public static <T, C extends Closure<? super T>> T forAllButLastDo(final Iterator<T> iterator, final C closure)" ], [ "filter", "org.apache.commons.collections4", "CollectionUtils", "public static <T> boolean filter(final Iterable<T> collection, final Predicate<? super T> predicate)" ], [ "filterInverse", "org.apache.commons.collections4", "CollectionUtils", "public static <T> boolean filterInverse(final Iterable<T> collection, final Predicate<? super T> predicate)" ], [ "countMatches", "org.apache.commons.collections4", "CollectionUtils", "public static <C> int countMatches(final Iterable<C> input, final Predicate<? super C> predicate)" ], [ "exists", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean exists(final Iterable<C> input, final Predicate<? super C> predicate)" ], [ "matchesAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean matchesAll(final Iterable<C> input, final Predicate<? super C> predicate)" ], [ "select", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> select(final Iterable<? extends O> inputCollection, final Predicate<? super O> predicate)" ], [ "select", "org.apache.commons.collections4", "CollectionUtils", "public static <O, R extends Collection<? super O>> R select(final Iterable<? extends O> inputCollection, final Predicate<? super O> predicate, final R outputCollection)" ], [ "select", "org.apache.commons.collections4", "CollectionUtils", "public static <O, R extends Collection<? super O>> R select(final Iterable<? extends O> inputCollection, final Predicate<? super O> predicate, R outputCollection, R rejectedCollection)" ], [ "selectRejected", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> selectRejected(final Iterable<? extends O> inputCollection, final Predicate<? super O> predicate)" ], [ "selectRejected", "org.apache.commons.collections4", "CollectionUtils", "public static <O, R extends Collection<? super O>> R selectRejected(final Iterable<? extends O> inputCollection, final Predicate<? super O> predicate, final R outputCollection)" ], [ "collect", "org.apache.commons.collections4", "CollectionUtils", "public static <I, O> Collection<O> collect(final Iterable<I> inputCollection, final Transformer<? super I, ? extends O> transformer)" ], [ "collect", "org.apache.commons.collections4", "CollectionUtils", "public static <I, O> Collection<O> collect(final Iterator<I> inputIterator, final Transformer<? super I, ? extends O> transformer)" ], [ "collect", "org.apache.commons.collections4", "CollectionUtils", "public static <I, O, R extends Collection<? super O>> R collect(final Iterable<? extends I> inputCollection, final Transformer<? super I, ? extends O> transformer, final R outputCollection)" ], [ "collect", "org.apache.commons.collections4", "CollectionUtils", "public static <I, O, R extends Collection<? super O>> R collect(final Iterator<? extends I> inputIterator, final Transformer<? super I, ? extends O> transformer, final R outputCollection)" ], [ "addIgnoreNull", "org.apache.commons.collections4", "CollectionUtils", "public static <T> boolean addIgnoreNull(final Collection<T> collection, final T object)" ], [ "addAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean addAll(final Collection<C> collection, final Iterable<? extends C> iterable)" ], [ "addAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean addAll(final Collection<C> collection, final Iterator<? extends C> iterator)" ], [ "addAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean addAll(final Collection<C> collection, final Enumeration<? extends C> enumeration)" ], [ "addAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean addAll(final Collection<C> collection, final C[] elements)" ], [ "get", "org.apache.commons.collections4", "CollectionUtils", "public static <T> T get(final Iterator<T> iterator, final int index)" ], [ "get", "org.apache.commons.collections4", "CollectionUtils", "public static <T> T get(final Iterable<T> iterable, final int index)" ], [ "get", "org.apache.commons.collections4", "CollectionUtils", "public static Object get(final Object object, final int index)" ], [ "get", "org.apache.commons.collections4", "CollectionUtils", "public static <K, V> Map.Entry<K, V> get(final Map<K, V> map, final int index)" ], [ "size", "org.apache.commons.collections4", "CollectionUtils", "public static int size(final Object object)" ], [ "sizeIsEmpty", "org.apache.commons.collections4", "CollectionUtils", "public static boolean sizeIsEmpty(final Object object)" ], [ "isEmpty", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isEmpty(final Collection<?> coll)" ], [ "isNotEmpty", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isNotEmpty(final Collection<?> coll)" ], [ "isFull", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isFull(final Collection<? extends Object> coll)" ], [ "maxSize", "org.apache.commons.collections4", "CollectionUtils", "public static int maxSize(final Collection<? extends Object> coll)" ], [ "collate", "org.apache.commons.collections4", "CollectionUtils", "public static <O extends Comparable<? super O>> List<O> collate(Iterable<? extends O> a, Iterable<? extends O> b)" ], [ "collate", "org.apache.commons.collections4", "CollectionUtils", "public static <O extends Comparable<? super O>> List<O> collate(final Iterable<? extends O> a, final Iterable<? extends O> b, final boolean includeDuplicates)" ], [ "collate", "org.apache.commons.collections4", "CollectionUtils", "public static <O> List<O> collate(final Iterable<? extends O> a, final Iterable<? extends O> b, final Comparator<? super O> c)" ], [ "collate", "org.apache.commons.collections4", "CollectionUtils", "public static <O> List<O> collate(final Iterable<? extends O> a, final Iterable<? extends O> b, final Comparator<? super O> c, final boolean includeDuplicates)" ], [ "permutations", "org.apache.commons.collections4", "CollectionUtils", "public static <E> Collection<List<E>> permutations(final Collection<E> collection)" ], [ "retainAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> Collection<C> retainAll(final Collection<C> collection, final Collection<?> retain)" ], [ "retainAll", "org.apache.commons.collections4", "CollectionUtils", "public static <E> Collection<E> retainAll(final Iterable<E> collection, final Iterable<? extends E> retain, final Equator<? super E> equator)" ], [ "removeAll", "org.apache.commons.collections4", "CollectionUtils", "public static <E> Collection<E> removeAll(final Collection<E> collection, final Collection<?> remove)" ], [ "removeAll", "org.apache.commons.collections4", "CollectionUtils", "public static <E> Collection<E> removeAll(final Iterable<E> collection, final Iterable<? extends E> remove, final Equator<? super E> equator)" ], [ "synchronizedCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <C> Collection<C> synchronizedCollection(final Collection<C> collection)" ], [ "unmodifiableCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <C> Collection<C> unmodifiableCollection(final Collection<? extends C> collection)" ], [ "predicatedCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <C> Collection<C> predicatedCollection(final Collection<C> collection, final Predicate<? super C> predicate)" ], [ "transformingCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <E> Collection<E> transformingCollection(final Collection<E> collection, final Transformer<? super E, ? extends E> transformer)" ], [ "extractSingleton", "org.apache.commons.collections4", "CollectionUtils", "public static <E> E extractSingleton(final Collection<E> collection)" ], [ "transformingMap", "org.apache.commons.collections4.splitmap", "TransformedSplitMap", "public static <J, K, U, V> TransformedSplitMap<J, K, U, V> transformingMap(final Map<K, V> map, final Transformer<? super J, ? extends K> keyTransformer, final Transformer<? super U, ? extends V> valueTransformer)" ], [ "emptyIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> emptyIterable()" ], [ "chainedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> chainedIterable(final Iterable<? extends E> a, final Iterable<? extends E> b)" ], [ "chainedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> chainedIterable(final Iterable<? extends E> a, final Iterable<? extends E> b, final Iterable<? extends E> c)" ], [ "chainedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> chainedIterable(final Iterable<? extends E> a, final Iterable<? extends E> b, final Iterable<? extends E> c, final Iterable<? extends E> d)" ], [ "chainedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> chainedIterable(final Iterable<? extends E>... iterables)" ], [ "collatedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> collatedIterable(final Iterable<? extends E> a, final Iterable<? extends E> b)" ], [ "collatedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> collatedIterable(final Comparator<? super E> comparator, final Iterable<? extends E> a, final Iterable<? extends E> b)" ], [ "filteredIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> filteredIterable(final Iterable<E> iterable, final Predicate<? super E> predicate)" ], [ "boundedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> boundedIterable(final Iterable<E> iterable, final long maxSize)" ], [ "loopingIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> loopingIterable(final Iterable<E> iterable)" ], [ "reversedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> reversedIterable(final Iterable<E> iterable)" ], [ "skippingIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> skippingIterable(final Iterable<E> iterable, final long elementsToSkip)" ], [ "transformedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <I, O> Iterable<O> transformedIterable(final Iterable<I> iterable, final Transformer<? super I, ? extends O> transformer)" ], [ "uniqueIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> uniqueIterable(final Iterable<E> iterable)" ], [ "unmodifiableIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> unmodifiableIterable(final Iterable<E> iterable)" ], [ "zippingIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> zippingIterable(final Iterable<? extends E> a, final Iterable<? extends E> b)" ], [ "zippingIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> zippingIterable(final Iterable<? extends E> first, final Iterable<? extends E>... others)" ], [ "emptyIfNull", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> emptyIfNull(final Iterable<E> iterable)" ], [ "forEachButLast", "org.apache.commons.collections4", "IterableUtils", "public static <E> E forEachButLast(final Iterable<E> iterable, final Closure<? super E> closure)" ], [ "find", "org.apache.commons.collections4", "IterableUtils", "public static <E> E find(final Iterable<E> iterable, final Predicate<? super E> predicate)" ], [ "indexOf", "org.apache.commons.collections4", "IterableUtils", "public static <E> int indexOf(final Iterable<E> iterable, final Predicate<? super E> predicate)" ], [ "matchesAll", "org.apache.commons.collections4", "IterableUtils", "public static <E> boolean matchesAll(final Iterable<E> iterable, final Predicate<? super E> predicate)" ], [ "matchesAny", "org.apache.commons.collections4", "IterableUtils", "public static <E> boolean matchesAny(final Iterable<E> iterable, final Predicate<? super E> predicate)" ], [ "countMatches", "org.apache.commons.collections4", "IterableUtils", "public static <E> long countMatches(final Iterable<E> input, final Predicate<? super E> predicate)" ], [ "isEmpty", "org.apache.commons.collections4", "IterableUtils", "public static boolean isEmpty(final Iterable<?> iterable)" ], [ "contains", "org.apache.commons.collections4", "IterableUtils", "public static <E> boolean contains(final Iterable<E> iterable, final Object object)" ], [ "contains", "org.apache.commons.collections4", "IterableUtils", "public static <E> boolean contains(final Iterable<? extends E> iterable, final E object, final Equator<? super E> equator)" ], [ "frequency", "org.apache.commons.collections4", "IterableUtils", "public static <E, T extends E> int frequency(final Iterable<E> iterable, final T obj)" ], [ "get", "org.apache.commons.collections4", "IterableUtils", "public static <T> T get(final Iterable<T> iterable, final int index)" ], [ "size", "org.apache.commons.collections4", "IterableUtils", "public static int size(final Iterable<?> iterable)" ], [ "partition", "org.apache.commons.collections4", "IterableUtils", "public static <O> List<List<O>> partition(final Iterable<? extends O> iterable, final Predicate<? super O> predicate)" ], [ "partition", "org.apache.commons.collections4", "IterableUtils", "public static <O> List<List<O>> partition(final Iterable<? extends O> iterable, final Predicate<? super O>... predicates)" ], [ "partition", "org.apache.commons.collections4", "IterableUtils", "public static <O, R extends Collection<O>> List<R> partition(final Iterable<? extends O> iterable, final Factory<R> partitionFactory, final Predicate<? super O>... predicates)" ], [ "toList", "org.apache.commons.collections4", "IterableUtils", "public static <E> List<E> toList(final Iterable<E> iterable)" ], [ "toString", "org.apache.commons.collections4", "IterableUtils", "public static <E> String toString(final Iterable<E> iterable)" ], [ "toString", "org.apache.commons.collections4", "IterableUtils", "public static <E> String toString(final Iterable<E> iterable, final Transformer<? super E, String> transformer)" ], [ "toString", "org.apache.commons.collections4", "IterableUtils", "public static <E> String toString(final Iterable<E> iterable, final Transformer<? super E, String> transformer, final String delimiter, final String prefix, final String suffix)" ], [ "unmodifiableTrie", "org.apache.commons.collections4", "TrieUtils", "public static <K, V> Trie<K, V> unmodifiableTrie(final Trie<K, ? extends V> trie)" ], [ "exceptionClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> exceptionClosure()" ], [ "nopClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> nopClosure()" ], [ "asClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> asClosure(final Transformer<? super E, ?> transformer)" ], [ "forClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> forClosure(final int count, final Closure<? super E> closure)" ], [ "whileClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> whileClosure(final Predicate<? super E> predicate, final Closure<? super E> closure)" ], [ "doWhileClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> doWhileClosure(final Closure<? super E> closure, final Predicate<? super E> predicate)" ], [ "invokerClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> invokerClosure(final String methodName)" ], [ "invokerClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> invokerClosure(final String methodName, final Class<?>[] paramTypes, final Object[] args)" ], [ "chainedClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> chainedClosure(final Closure<? super E>... closures)" ], [ "chainedClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> chainedClosure(final Collection<? extends Closure<? super E>> closures)" ], [ "ifClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> ifClosure(final Predicate<? super E> predicate, final Closure<? super E> trueClosure)" ], [ "ifClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> ifClosure(final Predicate<? super E> predicate, final Closure<? super E> trueClosure, final Closure<? super E> falseClosure)" ], [ "switchClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> switchClosure(final Predicate<? super E>[] predicates, final Closure<? super E>[] closures)" ], [ "switchClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> switchClosure(final Predicate<? super E>[] predicates, final Closure<? super E>[] closures, final Closure<? super E> defaultClosure)" ], [ "switchClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> switchClosure(final Map<Predicate<E>, Closure<E>> predicatesAndClosures)" ], [ "switchMapClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> switchMapClosure(final Map<? extends E, Closure<E>> objectsAndClosures)" ], [ "unmodifiableTrie", "org.apache.commons.collections4.trie", "UnmodifiableTrie", "public static <K, V> Trie<K, V> unmodifiableTrie(final Trie<K, ? extends V> trie)" ], [ "isOutOfBoundsIndex", "org.apache.commons.collections4.trie", "KeyAnalyzer", "static boolean isOutOfBoundsIndex(final int bitIndex)" ], [ "isEqualBitKey", "org.apache.commons.collections4.trie", "KeyAnalyzer", "static boolean isEqualBitKey(final int bitIndex)" ], [ "isNullBitKey", "org.apache.commons.collections4.trie", "KeyAnalyzer", "static boolean isNullBitKey(final int bitIndex)" ], [ "isValidBitIndex", "org.apache.commons.collections4.trie", "KeyAnalyzer", "static boolean isValidBitIndex(final int bitIndex)" ], [ "isValidUplink", "org.apache.commons.collections4.trie", "AbstractPatriciaTrie", "static boolean isValidUplink(final TrieEntry<?, ?> next, final TrieEntry<?, ?> from)" ], [ "compare", "org.apache.commons.collections4.trie", "AbstractBitwiseTrie", "static boolean compare(final Object a, final Object b)" ], [ "transformingSortedMap", "org.apache.commons.collections4.map", "TransformedSortedMap", "public static <K, V> TransformedSortedMap<K, V> transformingSortedMap(final SortedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "transformedSortedMap", "org.apache.commons.collections4.map", "TransformedSortedMap", "public static <K, V> TransformedSortedMap<K, V> transformedSortedMap(final SortedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "predicatedMap", "org.apache.commons.collections4.map", "PredicatedMap", "public static <K, V> PredicatedMap<K, V> predicatedMap(final Map<K, V> map, final Predicate<? super K> keyPredicate, final Predicate<? super V> valuePredicate)" ], [ "fixedSizeSortedMap", "org.apache.commons.collections4.map", "FixedSizeSortedMap", "public static <K, V> FixedSizeSortedMap<K, V> fixedSizeSortedMap(final SortedMap<K, V> map)" ], [ "unmodifiableSortedMap", "org.apache.commons.collections4.map", "UnmodifiableSortedMap", "public static <K, V> SortedMap<K, V> unmodifiableSortedMap(final SortedMap<K, ? extends V> map)" ], [ "predicatedSortedMap", "org.apache.commons.collections4.map", "PredicatedSortedMap", "public static <K, V> PredicatedSortedMap<K, V> predicatedSortedMap(final SortedMap<K, V> map, final Predicate<? super K> keyPredicate, final Predicate<? super V> valuePredicate)" ], [ "defaultedMap", "org.apache.commons.collections4.map", "DefaultedMap", "public static <K, V> DefaultedMap<K, V> defaultedMap(final Map<K, V> map, final V defaultValue)" ], [ "defaultedMap", "org.apache.commons.collections4.map", "DefaultedMap", "public static <K, V> DefaultedMap<K, V> defaultedMap(final Map<K, V> map, final Factory<? extends V> factory)" ], [ "defaultedMap", "org.apache.commons.collections4.map", "DefaultedMap", "public static <K, V> Map<K, V> defaultedMap(final Map<K, V> map, final Transformer<? super K, ? extends V> transformer)" ], [ "fixedSizeMap", "org.apache.commons.collections4.map", "FixedSizeMap", "public static <K, V> FixedSizeMap<K, V> fixedSizeMap(final Map<K, V> map)" ], [ "lazySortedMap", "org.apache.commons.collections4.map", "LazySortedMap", "public static <K, V> LazySortedMap<K, V> lazySortedMap(final SortedMap<K, V> map, final Factory<? extends V> factory)" ], [ "lazySortedMap", "org.apache.commons.collections4.map", "LazySortedMap", "public static <K, V> LazySortedMap<K, V> lazySortedMap(final SortedMap<K, V> map, final Transformer<? super K, ? extends V> factory)" ], [ "unmodifiableOrderedMap", "org.apache.commons.collections4.map", "UnmodifiableOrderedMap", "public static <K, V> OrderedMap<K, V> unmodifiableOrderedMap(final OrderedMap<? extends K, ? extends V> map)" ], [ "unmodifiableMap", "org.apache.commons.collections4.map", "UnmodifiableMap", "public static <K, V> Map<K, V> unmodifiableMap(final Map<? extends K, ? extends V> map)" ], [ "listOrderedMap", "org.apache.commons.collections4.map", "ListOrderedMap", "public static <K, V> ListOrderedMap<K, V> listOrderedMap(final Map<K, V> map)" ], [ "unmodifiableEntrySet", "org.apache.commons.collections4.map", "UnmodifiableEntrySet", "public static <K, V> Set<Map.Entry<K, V>> unmodifiableEntrySet(final Set<Map.Entry<K, V>> set)" ], [ "resolve", "org.apache.commons.collections4.map", "AbstractReferenceMap", "public static ReferenceStrength resolve(final int value)" ], [ "resolve", "org.apache.commons.collections4.map", "ReferenceStrength", "public static ReferenceStrength resolve(final int value)" ], [ "multiKeyMap", "org.apache.commons.collections4.map", "MultiKeyMap", "public static <K, V> MultiKeyMap<K, V> multiKeyMap(final AbstractHashedMap<MultiKey<? extends K>, V> map)" ], [ "lazyMap", "org.apache.commons.collections4.map", "LazyMap", "public static <K, V> LazyMap<K, V> lazyMap(final Map<K, V> map, final Factory<? extends V> factory)" ], [ "lazyMap", "org.apache.commons.collections4.map", "LazyMap", "public static <V, K> LazyMap<K, V> lazyMap(final Map<K, V> map, final Transformer<? super K, ? extends V> factory)" ], [ "multiValueMap", "org.apache.commons.collections4.map", "MultiValueMap", "public static <K, V> MultiValueMap<K, V> multiValueMap(final Map<K, ? super Collection<V>> map)" ], [ "multiValueMap", "org.apache.commons.collections4.map", "MultiValueMap", "public static <K, V, C extends Collection<V>> MultiValueMap<K, V> multiValueMap(final Map<K, ? super C> map, final Class<C> collectionClass)" ], [ "multiValueMap", "org.apache.commons.collections4.map", "MultiValueMap", "public static <K, V, C extends Collection<V>> MultiValueMap<K, V> multiValueMap(final Map<K, ? super C> map, final Factory<C> collectionFactory)" ], [ "transformingMap", "org.apache.commons.collections4.map", "TransformedMap", "public static <K, V> TransformedMap<K, V> transformingMap(final Map<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "transformedMap", "org.apache.commons.collections4.map", "TransformedMap", "public static <K, V> TransformedMap<K, V> transformedMap(final Map<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "synchronizedMultiSet", "org.apache.commons.collections4", "MultiSetUtils", "public static <E> MultiSet<E> synchronizedMultiSet(final MultiSet<E> multiset)" ], [ "unmodifiableMultiSet", "org.apache.commons.collections4", "MultiSetUtils", "public static <E> MultiSet<E> unmodifiableMultiSet(final MultiSet<? extends E> multiset)" ], [ "predicatedMultiSet", "org.apache.commons.collections4", "MultiSetUtils", "public static <E> MultiSet<E> predicatedMultiSet(final MultiSet<E> multiset, final Predicate<? super E> predicate)" ], [ "emptyMultiSet", "org.apache.commons.collections4", "MultiSetUtils", "public static <E> MultiSet<E> emptyMultiSet()" ], [ "unmodifiableMultiValuedMap", "org.apache.commons.collections4.multimap", "UnmodifiableMultiValuedMap", "public static <K, V> UnmodifiableMultiValuedMap<K, V> unmodifiableMultiValuedMap(MultiValuedMap<? extends K, ? extends V> map)" ], [ "transformingMap", "org.apache.commons.collections4.multimap", "TransformedMultiValuedMap", "public static <K, V> TransformedMultiValuedMap<K, V> transformingMap(final MultiValuedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "transformedMap", "org.apache.commons.collections4.multimap", "TransformedMultiValuedMap", "public static <K, V> TransformedMultiValuedMap<K, V> transformedMap(final MultiValuedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "lazyList", "org.apache.commons.collections4.list", "LazyList", "public static <E> LazyList<E> lazyList(final List<E> list, final Factory<? extends E> factory)" ], [ "setUniqueList", "org.apache.commons.collections4.list", "SetUniqueList", "public static <E> SetUniqueList<E> setUniqueList(final List<E> list)" ], [ "unmodifiableList", "org.apache.commons.collections4.list", "UnmodifiableList", "public static <E> List<E> unmodifiableList(final List<? extends E> list)" ], [ "fixedSizeList", "org.apache.commons.collections4.list", "FixedSizeList", "public static <E> FixedSizeList<E> fixedSizeList(final List<E> list)" ], [ "transformingList", "org.apache.commons.collections4.list", "TransformedList", "public static <E> TransformedList<E> transformingList(final List<E> list, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedList", "org.apache.commons.collections4.list", "TransformedList", "public static <E> TransformedList<E> transformedList(final List<E> list, final Transformer<? super E, ? extends E> transformer)" ], [ "growthList", "org.apache.commons.collections4.list", "GrowthList", "public static <E> GrowthList<E> growthList(final List<E> list)" ], [ "predicatedList", "org.apache.commons.collections4.list", "PredicatedList", "public static <T> PredicatedList<T> predicatedList(final List<T> list, final Predicate<? super T> predicate)" ], [ "transformingQueue", "org.apache.commons.collections4.queue", "TransformedQueue", "public static <E> TransformedQueue<E> transformingQueue(final Queue<E> queue, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedQueue", "org.apache.commons.collections4.queue", "TransformedQueue", "public static <E> TransformedQueue<E> transformedQueue(final Queue<E> queue, final Transformer<? super E, ? extends E> transformer)" ], [ "unmodifiableQueue", "org.apache.commons.collections4.queue", "UnmodifiableQueue", "public static <E> Queue<E> unmodifiableQueue(final Queue<? extends E> queue)" ], [ "predicatedQueue", "org.apache.commons.collections4.queue", "PredicatedQueue", "public static <E> PredicatedQueue<E> predicatedQueue(final Queue<E> Queue, final Predicate<? super E> predicate)" ], [ "empty", "org.apache.commons.collections4", "FluentIterable", "public static <T> FluentIterable<T> empty()" ], [ "of", "org.apache.commons.collections4", "FluentIterable", "public static <T> FluentIterable<T> of(final T singleton)" ], [ "of", "org.apache.commons.collections4", "FluentIterable", "public static <T> FluentIterable<T> of(final T... elements)" ], [ "of", "org.apache.commons.collections4", "FluentIterable", "public static <T> FluentIterable<T> of(final Iterable<T> iterable)" ], [ "exceptionTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> exceptionTransformer()" ], [ "nullTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> nullTransformer()" ], [ "nopTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> nopTransformer()" ], [ "cloneTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> cloneTransformer()" ], [ "constantTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> constantTransformer(final O constantToReturn)" ], [ "asTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> asTransformer(final Closure<? super T> closure)" ], [ "asTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, Boolean> asTransformer(final Predicate<? super T> predicate)" ], [ "asTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> asTransformer(final Factory<? extends O> factory)" ], [ "chainedTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> chainedTransformer(final Transformer<? super T, ? extends T>... transformers)" ], [ "chainedTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> chainedTransformer(final Collection<? extends Transformer<? super T, ? extends T>> transformers)" ], [ "ifTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> ifTransformer(final Predicate<? super T> predicate, final Transformer<? super T, ? extends T> trueTransformer)" ], [ "ifTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> ifTransformer(final Predicate<? super I> predicate, final Transformer<? super I, ? extends O> trueTransformer, final Transformer<? super I, ? extends O> falseTransformer)" ], [ "switchTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> switchTransformer(final Predicate<? super I> predicate, final Transformer<? super I, ? extends O> trueTransformer, final Transformer<? super I, ? extends O> falseTransformer)" ], [ "switchTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> switchTransformer(final Predicate<? super I>[] predicates, final Transformer<? super I, ? extends O>[] transformers)" ], [ "switchTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> switchTransformer(final Predicate<? super I>[] predicates, final Transformer<? super I, ? extends O>[] transformers, final Transformer<? super I, ? extends O> defaultTransformer)" ], [ "switchTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> switchTransformer(final Map<Predicate<I>, Transformer<I, O>> predicatesAndTransformers)" ], [ "switchMapTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> switchMapTransformer(final Map<I, Transformer<I, O>> objectsAndTransformers)" ], [ "instantiateTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<Class<? extends T>, T> instantiateTransformer()" ], [ "instantiateTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<Class<? extends T>, T> instantiateTransformer(final Class<?>[] paramTypes, final Object[] args)" ], [ "mapTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> mapTransformer(final Map<? super I, ? extends O> map)" ], [ "invokerTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> invokerTransformer(final String methodName)" ], [ "invokerTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> invokerTransformer(final String methodName, final Class<?>[] paramTypes, final Object[] args)" ], [ "stringValueTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, String> stringValueTransformer()" ], [ "exceptionPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> exceptionPredicate()" ], [ "truePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> truePredicate()" ], [ "falsePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> falsePredicate()" ], [ "nullPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nullPredicate()" ], [ "notNullPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> notNullPredicate()" ], [ "equalPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> equalPredicate(final T value)" ], [ "identityPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> identityPredicate(final T value)" ], [ "instanceofPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static Predicate<Object> instanceofPredicate(final Class<?> type)" ], [ "uniquePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> uniquePredicate()" ], [ "invokerPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> invokerPredicate(final String methodName)" ], [ "invokerPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> invokerPredicate(final String methodName, final Class<?>[] paramTypes, final Object[] args)" ], [ "andPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> andPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "allPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> allPredicate(final Predicate<? super T>... predicates)" ], [ "allPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> allPredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "orPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> orPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "anyPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> anyPredicate(final Predicate<? super T>... predicates)" ], [ "anyPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> anyPredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "eitherPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> eitherPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "onePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> onePredicate(final Predicate<? super T>... predicates)" ], [ "onePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> onePredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "neitherPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> neitherPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "nonePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nonePredicate(final Predicate<? super T>... predicates)" ], [ "nonePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nonePredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "notPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> notPredicate(final Predicate<? super T> predicate)" ], [ "asPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> asPredicate(final Transformer<? super T, Boolean> transformer)" ], [ "nullIsExceptionPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nullIsExceptionPredicate(final Predicate<? super T> predicate)" ], [ "nullIsFalsePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nullIsFalsePredicate(final Predicate<? super T> predicate)" ], [ "nullIsTruePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nullIsTruePredicate(final Predicate<? super T> predicate)" ], [ "transformedPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> transformedPredicate(final Transformer<? super T, ? extends T> transformer, final Predicate<? super T> predicate)" ], [ "emptySet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> emptySet()" ], [ "emptySortedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> emptySortedSet()" ], [ "emptyIfNull", "org.apache.commons.collections4", "SetUtils", "public static <T> Set<T> emptyIfNull(final Set<T> set)" ], [ "isEqualSet", "org.apache.commons.collections4", "SetUtils", "public static boolean isEqualSet(final Collection<?> set1, final Collection<?> set2)" ], [ "hashCodeForSet", "org.apache.commons.collections4", "SetUtils", "public static <T> int hashCodeForSet(final Collection<T> set)" ], [ "newIdentityHashSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> newIdentityHashSet()" ], [ "synchronizedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> synchronizedSet(final Set<E> set)" ], [ "unmodifiableSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> unmodifiableSet(final Set<? extends E> set)" ], [ "predicatedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> predicatedSet(final Set<E> set, final Predicate<? super E> predicate)" ], [ "transformedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> transformedSet(final Set<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "orderedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> orderedSet(final Set<E> set)" ], [ "synchronizedSortedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> synchronizedSortedSet(final SortedSet<E> set)" ], [ "unmodifiableSortedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> unmodifiableSortedSet(final SortedSet<E> set)" ], [ "predicatedSortedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> predicatedSortedSet(final SortedSet<E> set, final Predicate<? super E> predicate)" ], [ "transformedSortedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> transformedSortedSet(final SortedSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "unmodifiableNavigableSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> unmodifiableNavigableSet(final NavigableSet<E> set)" ], [ "predicatedNavigableSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> predicatedNavigableSet(final NavigableSet<E> set, final Predicate<? super E> predicate)" ], [ "transformedNavigableSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> transformedNavigableSet(final NavigableSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "union", "org.apache.commons.collections4", "SetUtils", "public static <E> SetView<E> union(final Set<? extends E> a, final Set<? extends E> b)" ], [ "difference", "org.apache.commons.collections4", "SetUtils", "public static <E> SetView<E> difference(final Set<? extends E> a, final Set<? extends E> b)" ], [ "intersection", "org.apache.commons.collections4", "SetUtils", "public static <E> SetView<E> intersection(final Set<? extends E> a, final Set<? extends E> b)" ], [ "disjunction", "org.apache.commons.collections4", "SetUtils", "public static <E> SetView<E> disjunction(final Set<? extends E> a, final Set<? extends E> b)" ], [ "transformingSet", "org.apache.commons.collections4.set", "TransformedSet", "public static <E> TransformedSet<E> transformingSet(final Set<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedSet", "org.apache.commons.collections4.set", "TransformedSet", "public static <E> Set<E> transformedSet(final Set<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "transformingNavigableSet", "org.apache.commons.collections4.set", "TransformedNavigableSet", "public static <E> TransformedNavigableSet<E> transformingNavigableSet(final NavigableSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedNavigableSet", "org.apache.commons.collections4.set", "TransformedNavigableSet", "public static <E> TransformedNavigableSet<E> transformedNavigableSet(final NavigableSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "predicatedNavigableSet", "org.apache.commons.collections4.set", "PredicatedNavigableSet", "public static <E> PredicatedNavigableSet<E> predicatedNavigableSet(final NavigableSet<E> set, final Predicate<? super E> predicate)" ], [ "listOrderedSet", "org.apache.commons.collections4.set", "ListOrderedSet", "public static <E> ListOrderedSet<E> listOrderedSet(final Set<E> set, final List<E> list)" ], [ "listOrderedSet", "org.apache.commons.collections4.set", "ListOrderedSet", "public static <E> ListOrderedSet<E> listOrderedSet(final Set<E> set)" ], [ "listOrderedSet", "org.apache.commons.collections4.set", "ListOrderedSet", "public static <E> ListOrderedSet<E> listOrderedSet(final List<E> list)" ], [ "unmodifiableSet", "org.apache.commons.collections4.set", "UnmodifiableSet", "public static <E> Set<E> unmodifiableSet(final Set<? extends E> set)" ], [ "mapBackedSet", "org.apache.commons.collections4.set", "MapBackedSet", "public static <E, V> MapBackedSet<E, V> mapBackedSet(final Map<E, ? super V> map)" ], [ "mapBackedSet", "org.apache.commons.collections4.set", "MapBackedSet", "public static <E, V> MapBackedSet<E, V> mapBackedSet(final Map<E, ? super V> map, final V dummyValue)" ], [ "unmodifiableSortedSet", "org.apache.commons.collections4.set", "UnmodifiableSortedSet", "public static <E> SortedSet<E> unmodifiableSortedSet(final SortedSet<E> set)" ], [ "predicatedSortedSet", "org.apache.commons.collections4.set", "PredicatedSortedSet", "public static <E> PredicatedSortedSet<E> predicatedSortedSet(final SortedSet<E> set, final Predicate<? super E> predicate)" ], [ "predicatedSet", "org.apache.commons.collections4.set", "PredicatedSet", "public static <E> PredicatedSet<E> predicatedSet(final Set<E> set, final Predicate<? super E> predicate)" ], [ "unmodifiableNavigableSet", "org.apache.commons.collections4.set", "UnmodifiableNavigableSet", "public static <E> NavigableSet<E> unmodifiableNavigableSet(final NavigableSet<E> set)" ], [ "transformingSortedSet", "org.apache.commons.collections4.set", "TransformedSortedSet", "public static <E> TransformedSortedSet<E> transformingSortedSet(final SortedSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedSortedSet", "org.apache.commons.collections4.set", "TransformedSortedSet", "public static <E> TransformedSortedSet<E> transformedSortedSet(final SortedSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "get", "org.apache.commons.collections4", "EnumerationUtils", "public static <T> T get(final Enumeration<T> e, final int index)" ], [ "toList", "org.apache.commons.collections4", "EnumerationUtils", "public static <E> List<E> toList(final Enumeration<? extends E> enumeration)" ], [ "toList", "org.apache.commons.collections4", "EnumerationUtils", "public static List<String> toList(final StringTokenizer stringTokenizer)" ], [ "unmodifiableQueue", "org.apache.commons.collections4", "QueueUtils", "public static <E> Queue<E> unmodifiableQueue(final Queue<? extends E> queue)" ], [ "predicatedQueue", "org.apache.commons.collections4", "QueueUtils", "public static <E> Queue<E> predicatedQueue(final Queue<E> queue, final Predicate<? super E> predicate)" ], [ "transformingQueue", "org.apache.commons.collections4", "QueueUtils", "public static <E> Queue<E> transformingQueue(final Queue<E> queue, final Transformer<? super E, ? extends E> transformer)" ], [ "emptyQueue", "org.apache.commons.collections4", "QueueUtils", "public static <E> Queue<E> emptyQueue()" ], [ "synchronizedBag", "org.apache.commons.collections4.bag", "SynchronizedBag", "public static <E> SynchronizedBag<E> synchronizedBag(final Bag<E> bag)" ], [ "collectionBag", "org.apache.commons.collections4.bag", "CollectionBag", "public static <E> Bag<E> collectionBag(final Bag<E> bag)" ], [ "unmodifiableBag", "org.apache.commons.collections4.bag", "UnmodifiableBag", "public static <E> Bag<E> unmodifiableBag(final Bag<? extends E> bag)" ], [ "predicatedSortedBag", "org.apache.commons.collections4.bag", "PredicatedSortedBag", "public static <E> PredicatedSortedBag<E> predicatedSortedBag(final SortedBag<E> bag, final Predicate<? super E> predicate)" ], [ "unmodifiableSortedBag", "org.apache.commons.collections4.bag", "UnmodifiableSortedBag", "public static <E> SortedBag<E> unmodifiableSortedBag(final SortedBag<E> bag)" ], [ "transformingSortedBag", "org.apache.commons.collections4.bag", "TransformedSortedBag", "public static <E> TransformedSortedBag<E> transformingSortedBag(final SortedBag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedSortedBag", "org.apache.commons.collections4.bag", "TransformedSortedBag", "public static <E> TransformedSortedBag<E> transformedSortedBag(final SortedBag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "predicatedBag", "org.apache.commons.collections4.bag", "PredicatedBag", "public static <E> PredicatedBag<E> predicatedBag(final Bag<E> bag, final Predicate<? super E> predicate)" ], [ "synchronizedSortedBag", "org.apache.commons.collections4.bag", "SynchronizedSortedBag", "public static <E> SynchronizedSortedBag<E> synchronizedSortedBag(final SortedBag<E> bag)" ], [ "collectionSortedBag", "org.apache.commons.collections4.bag", "CollectionSortedBag", "public static <E> SortedBag<E> collectionSortedBag(final SortedBag<E> bag)" ], [ "transformingBag", "org.apache.commons.collections4.bag", "TransformedBag", "public static <E> Bag<E> transformingBag(final Bag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedBag", "org.apache.commons.collections4.bag", "TransformedBag", "public static <E> Bag<E> transformedBag(final Bag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "predicatedMultiSet", "org.apache.commons.collections4.multiset", "PredicatedMultiSet", "public static <E> PredicatedMultiSet<E> predicatedMultiSet(final MultiSet<E> multiset, final Predicate<? super E> predicate)" ], [ "unmodifiableMultiSet", "org.apache.commons.collections4.multiset", "UnmodifiableMultiSet", "public static <E> MultiSet<E> unmodifiableMultiSet(final MultiSet<? extends E> multiset)" ], [ "synchronizedMultiSet", "org.apache.commons.collections4.multiset", "SynchronizedMultiSet", "public static <E> SynchronizedMultiSet<E> synchronizedMultiSet(final MultiSet<E> multiset)" ], [ "synchronizedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> synchronizedBag(final Bag<E> bag)" ], [ "unmodifiableBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> unmodifiableBag(final Bag<? extends E> bag)" ], [ "predicatedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> predicatedBag(final Bag<E> bag, final Predicate<? super E> predicate)" ], [ "transformingBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> transformingBag(final Bag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "collectionBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> collectionBag(final Bag<E> bag)" ], [ "synchronizedSortedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> SortedBag<E> synchronizedSortedBag(final SortedBag<E> bag)" ], [ "unmodifiableSortedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> SortedBag<E> unmodifiableSortedBag(final SortedBag<E> bag)" ], [ "predicatedSortedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> SortedBag<E> predicatedSortedBag(final SortedBag<E> bag, final Predicate<? super E> predicate)" ], [ "transformingSortedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> SortedBag<E> transformingSortedBag(final SortedBag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "emptyBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> emptyBag()" ], [ "emptySortedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> SortedBag<E> emptySortedBag()" ], [ "resettableEmptyListIterator", "org.apache.commons.collections4.iterators", "EmptyListIterator", "public static <E> ResettableListIterator<E> resettableEmptyListIterator()" ], [ "emptyListIterator", "org.apache.commons.collections4.iterators", "EmptyListIterator", "public static <E> ListIterator<E> emptyListIterator()" ], [ "unmodifiableOrderedMapIterator", "org.apache.commons.collections4.iterators", "UnmodifiableOrderedMapIterator", "public static <K, V> OrderedMapIterator<K, V> unmodifiableOrderedMapIterator(final OrderedMapIterator<K, ? extends V> iterator)" ], [ "unmodifiableIterator", "org.apache.commons.collections4.iterators", "UnmodifiableIterator", "public static <E> Iterator<E> unmodifiableIterator(final Iterator<? extends E> iterator)" ], [ "peekingIterator", "org.apache.commons.collections4.iterators", "PeekingIterator", "public static <E> PeekingIterator<E> peekingIterator(final Iterator<? extends E> iterator)" ], [ "emptyMapIterator", "org.apache.commons.collections4.iterators", "EmptyMapIterator", "public static <K, V> MapIterator<K, V> emptyMapIterator()" ], [ "emptyOrderedIterator", "org.apache.commons.collections4.iterators", "EmptyOrderedIterator", "public static <E> OrderedIterator<E> emptyOrderedIterator()" ], [ "umodifiableListIterator", "org.apache.commons.collections4.iterators", "UnmodifiableListIterator", "public static <E> ListIterator<E> umodifiableListIterator(final ListIterator<? extends E> iterator)" ], [ "emptyOrderedMapIterator", "org.apache.commons.collections4.iterators", "EmptyOrderedMapIterator", "public static <K, V> OrderedMapIterator<K, V> emptyOrderedMapIterator()" ], [ "unmodifiableMapIterator", "org.apache.commons.collections4.iterators", "UnmodifiableMapIterator", "public static <K, V> MapIterator<K, V> unmodifiableMapIterator(final MapIterator<? extends K, ? extends V> iterator)" ], [ "resettableEmptyIterator", "org.apache.commons.collections4.iterators", "EmptyIterator", "public static <E> ResettableIterator<E> resettableEmptyIterator()" ], [ "emptyIterator", "org.apache.commons.collections4.iterators", "EmptyIterator", "public static <E> Iterator<E> emptyIterator()" ], [ "pushbackIterator", "org.apache.commons.collections4.iterators", "PushbackIterator", "public static <E> PushbackIterator<E> pushbackIterator(final Iterator<? extends E> iterator)" ], [ "readableMap", "org.apache.commons.collections4", "SplitMapUtils", "public static <K, V> IterableMap<K, V> readableMap(final Get<K, V> get)" ], [ "writableMap", "org.apache.commons.collections4", "SplitMapUtils", "public static <K, V> Map<K, V> writableMap(final Put<K, V> put)" ] ],
  "tokensProjectClassesNonPrivateStaticAttributes" : [ [ "EMPTY_ITERATOR", "org.apache.commons.collections4", "IteratorUtils", "public static final ResettableIterator EMPTY_ITERATOR = EmptyIterator.RESETTABLE_INSTANCE;" ], [ "EMPTY_LIST_ITERATOR", "org.apache.commons.collections4", "IteratorUtils", "public static final ResettableListIterator EMPTY_LIST_ITERATOR = EmptyListIterator.RESETTABLE_INSTANCE;" ], [ "EMPTY_ORDERED_ITERATOR", "org.apache.commons.collections4", "IteratorUtils", "public static final OrderedIterator EMPTY_ORDERED_ITERATOR = EmptyOrderedIterator.INSTANCE;" ], [ "EMPTY_MAP_ITERATOR", "org.apache.commons.collections4", "IteratorUtils", "public static final MapIterator EMPTY_MAP_ITERATOR = EmptyMapIterator.INSTANCE;" ], [ "EMPTY_ORDERED_MAP_ITERATOR", "org.apache.commons.collections4", "IteratorUtils", "public static final OrderedMapIterator EMPTY_ORDERED_MAP_ITERATOR = EmptyOrderedMapIterator.INSTANCE;" ], [ "NATURAL_COMPARATOR", "org.apache.commons.collections4", "ComparatorUtils", "public static final Comparator NATURAL_COMPARATOR = ComparableComparator.<Comparable>comparableComparator();" ], [ "EMPTY_MULTI_VALUED_MAP", "org.apache.commons.collections4", "MultiMapUtils", "public static final MultiValuedMap EMPTY_MULTI_VALUED_MAP = UnmodifiableMultiValuedMap.unmodifiableMultiValuedMap(new ArrayListValuedHashMap(0, 0));" ], [ "EMPTY_SORTED_MAP", "org.apache.commons.collections4", "MapUtils", "public static final SortedMap EMPTY_SORTED_MAP = UnmodifiableSortedMap.unmodifiableSortedMap(new TreeMap<Object, Object>());" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "DefaultEquator", "public static final DefaultEquator INSTANCE = new DefaultEquator<Object>();" ], [ "HASHCODE_NULL", "org.apache.commons.collections4.functors", "DefaultEquator", "public static final int HASHCODE_NULL = -1;" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "ExceptionClosure", "public static final Closure INSTANCE = new ExceptionClosure<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "NOPClosure", "public static final Closure INSTANCE = new NOPClosure<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "NullPredicate", "public static final Predicate INSTANCE = new NullPredicate<Object>();" ], [ "NULL_INSTANCE", "org.apache.commons.collections4.functors", "ConstantTransformer", "public static final Transformer NULL_INSTANCE = new ConstantTransformer<Object, Object>(null);" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "ExceptionTransformer", "public static final Transformer INSTANCE = new ExceptionTransformer<Object, Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "NOPTransformer", "public static final Transformer INSTANCE = new NOPTransformer<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "ExceptionFactory", "public static final Factory INSTANCE = new ExceptionFactory<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "ExceptionPredicate", "public static final Predicate INSTANCE = new ExceptionPredicate<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "FalsePredicate", "public static final Predicate INSTANCE = new FalsePredicate<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "CloneTransformer", "public static final Transformer INSTANCE = new CloneTransformer<Object>();" ], [ "NULL_INSTANCE", "org.apache.commons.collections4.functors", "ConstantFactory", "public static final Factory NULL_INSTANCE = new ConstantFactory<Object>(null);" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "TruePredicate", "public static final Predicate INSTANCE = new TruePredicate<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "NotNullPredicate", "public static final Predicate INSTANCE = new NotNullPredicate<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.comparators", "ComparableComparator", "public static final ComparableComparator INSTANCE = new ComparableComparator();" ], [ "EMPTY_COLLECTION", "org.apache.commons.collections4", "CollectionUtils", "public static final Collection EMPTY_COLLECTION = UnmodifiableCollection.unmodifiableCollection(new ArrayList<Object>());" ], [ "EMPTY_ITERABLE", "org.apache.commons.collections4", "IterableUtils", "static final FluentIterable EMPTY_ITERABLE = new FluentIterable<Object>() {\n\n    @Override\n    public Iterator<Object> iterator() {\n        return IteratorUtils.emptyIterator();\n    }\n};" ], [ "NULL_BIT_KEY", "org.apache.commons.collections4.trie", "KeyAnalyzer", "public static final int NULL_BIT_KEY = -1;" ], [ "EQUAL_BIT_KEY", "org.apache.commons.collections4.trie", "KeyAnalyzer", "public static final int EQUAL_BIT_KEY = -2;" ], [ "OUT_OF_BOUNDS_BIT_KEY", "org.apache.commons.collections4.trie", "KeyAnalyzer", "public static final int OUT_OF_BOUNDS_BIT_KEY = -3;" ], [ "INSTANCE", "org.apache.commons.collections4.trie.analyzer", "StringKeyAnalyzer", "public static final StringKeyAnalyzer INSTANCE = new StringKeyAnalyzer();" ], [ "LENGTH", "org.apache.commons.collections4.trie.analyzer", "StringKeyAnalyzer", "public static final int LENGTH = Character.SIZE;" ], [ "NO_NEXT_ENTRY", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String NO_NEXT_ENTRY = \"No next() entry in the iteration\";" ], [ "NO_PREVIOUS_ENTRY", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String NO_PREVIOUS_ENTRY = \"No previous() entry in the iteration\";" ], [ "REMOVE_INVALID", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String REMOVE_INVALID = \"remove() can only be called once after next()\";" ], [ "GETKEY_INVALID", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String GETKEY_INVALID = \"getKey() can only be called after next() and before remove()\";" ], [ "GETVALUE_INVALID", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String GETVALUE_INVALID = \"getValue() can only be called after next() and before remove()\";" ], [ "SETVALUE_INVALID", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String SETVALUE_INVALID = \"setValue() can only be called after next() and before remove()\";" ], [ "DEFAULT_CAPACITY", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final int DEFAULT_CAPACITY = 16;" ], [ "DEFAULT_THRESHOLD", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final int DEFAULT_THRESHOLD = 12;" ], [ "DEFAULT_LOAD_FACTOR", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final float DEFAULT_LOAD_FACTOR = 0.75f;" ], [ "MAXIMUM_CAPACITY", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final int MAXIMUM_CAPACITY = 1 << 30;" ], [ "NULL", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final Object NULL = new Object();" ], [ "DEFAULT_MAX_SIZE", "org.apache.commons.collections4.map", "LRUMap", "protected static final int DEFAULT_MAX_SIZE = 100;" ], [ "EMPTY_MULTISET", "org.apache.commons.collections4", "MultiSetUtils", "public static final MultiSet EMPTY_MULTISET = UnmodifiableMultiSet.unmodifiableMultiSet(new HashMultiSet<Object>());" ], [ "EMPTY_SORTED_SET", "org.apache.commons.collections4", "SetUtils", "public static final SortedSet EMPTY_SORTED_SET = UnmodifiableSortedSet.unmodifiableSortedSet(new TreeSet<Object>());" ], [ "EMPTY_QUEUE", "org.apache.commons.collections4", "QueueUtils", "public static final Queue EMPTY_QUEUE = UnmodifiableQueue.unmodifiableQueue(new LinkedList<Object>());" ], [ "EMPTY_BAG", "org.apache.commons.collections4", "BagUtils", "public static final Bag EMPTY_BAG = UnmodifiableBag.unmodifiableBag(new HashBag<Object>());" ], [ "EMPTY_SORTED_BAG", "org.apache.commons.collections4", "BagUtils", "public static final Bag EMPTY_SORTED_BAG = UnmodifiableSortedBag.unmodifiableSortedBag(new TreeBag<Object>());" ], [ "RESETTABLE_INSTANCE", "org.apache.commons.collections4.iterators", "EmptyListIterator", "public static final ResettableListIterator RESETTABLE_INSTANCE = new EmptyListIterator<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.iterators", "EmptyListIterator", "public static final ListIterator INSTANCE = RESETTABLE_INSTANCE;" ], [ "INSTANCE", "org.apache.commons.collections4.iterators", "EmptyMapIterator", "public static final MapIterator INSTANCE = new EmptyMapIterator<Object, Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.iterators", "EmptyOrderedIterator", "public static final OrderedIterator INSTANCE = new EmptyOrderedIterator<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.iterators", "EmptyOrderedMapIterator", "public static final OrderedMapIterator INSTANCE = new EmptyOrderedMapIterator<Object, Object>();" ], [ "RESETTABLE_INSTANCE", "org.apache.commons.collections4.iterators", "EmptyIterator", "public static final ResettableIterator RESETTABLE_INSTANCE = new EmptyIterator<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.iterators", "EmptyIterator", "public static final Iterator INSTANCE = RESETTABLE_INSTANCE;" ] ],
  "tokensMethodJavadocValues" : [ [ "\"isEmpty\"", "String" ] ],
  "tokensMethodArguments" : [ [ "methodName", "java.lang", "String" ], [ "paramTypes", "", "Class<?>[]" ], [ "args", "", "Object[]" ] ],
  "tokensMethodVariablesNonPrivateNonStaticNonVoidMethods" : [ [ "toString", "java.lang", "Object", "public String toString()" ], [ "getClass", "java.lang", "Object", "public final native Class<? extends Object> getClass()" ], [ "hashCode", "java.lang", "Object", "public native int hashCode()" ], [ "clone", "java.lang", "Object", "protected native Object clone() throws CloneNotSupportedException" ], [ "equals", "java.lang", "Object", "public boolean equals(Object arg0)" ], [ "regionMatches", "java.lang", "String", "public boolean regionMatches(int arg0, String arg1, int arg2, int arg3)" ], [ "indexOf", "java.lang", "String", "public int indexOf(String arg0)" ], [ "compareTo", "java.lang", "String", "public int compareTo(String arg0)" ], [ "chars", "java.lang", "String", "public IntStream chars()" ], [ "toUpperCase", "java.lang", "String", "public String toUpperCase()" ], [ "split", "java.lang", "String", "public String[] split(String arg0)" ], [ "replaceFirst", "java.lang", "String", "public String replaceFirst(String arg0, String arg1)" ], [ "codePointAt", "java.lang", "String", "public int codePointAt(int arg0)" ], [ "resolveConstantDesc", "java.lang", "String", "public String resolveConstantDesc(MethodHandles.Lookup arg0)" ], [ "toString", "java.lang", "String", "public String toString()" ], [ "getBytes", "java.lang", "String", "public byte[] getBytes(Charset arg0)" ], [ "stripIndent", "java.lang", "String", "public String stripIndent()" ], [ "split", "java.lang", "String", "public String[] split(String arg0, int arg1)" ], [ "equals", "java.lang", "String", "public boolean equals(Object arg0)" ], [ "lastIndexOf", "java.lang", "String", "public int lastIndexOf(String arg0, int arg1)" ], [ "isEmpty", "java.lang", "String", "public boolean isEmpty()" ], [ "codePointCount", "java.lang", "String", "public int codePointCount(int arg0, int arg1)" ], [ "stripTrailing", "java.lang", "String", "public String stripTrailing()" ], [ "equalsIgnoreCase", "java.lang", "String", "public boolean equalsIgnoreCase(String arg0)" ], [ "codePoints", "java.lang", "String", "public IntStream codePoints()" ], [ "stripLeading", "java.lang", "String", "public String stripLeading()" ], [ "intern", "java.lang", "String", "public native String intern()" ], [ "regionMatches", "java.lang", "String", "public boolean regionMatches(boolean arg0, int arg1, String arg2, int arg3, int arg4)" ], [ "toCharArray", "java.lang", "String", "public char[] toCharArray()" ], [ "lastIndexOf", "java.lang", "String", "public int lastIndexOf(int arg0)" ], [ "offsetByCodePoints", "java.lang", "String", "public int offsetByCodePoints(int arg0, int arg1)" ], [ "contentEquals", "java.lang", "String", "public boolean contentEquals(CharSequence arg0)" ], [ "toLowerCase", "java.lang", "String", "public String toLowerCase()" ], [ "toLowerCase", "java.lang", "String", "public String toLowerCase(Locale arg0)" ], [ "formatted", "java.lang", "String", "public String formatted(Object[] arg0)" ], [ "lastIndexOf", "java.lang", "String", "public int lastIndexOf(String arg0)" ], [ "charAt", "java.lang", "String", "public char charAt(int arg0)" ], [ "indent", "java.lang", "String", "public String indent(int arg0)" ], [ "indexOf", "java.lang", "String", "public int indexOf(int arg0)" ], [ "hashCode", "java.lang", "String", "public int hashCode()" ], [ "replace", "java.lang", "String", "public String replace(CharSequence arg0, CharSequence arg1)" ], [ "toUpperCase", "java.lang", "String", "public String toUpperCase(Locale arg0)" ], [ "codePointBefore", "java.lang", "String", "public int codePointBefore(int arg0)" ], [ "getBytes", "java.lang", "String", "public byte[] getBytes(String arg0) throws UnsupportedEncodingException" ], [ "matches", "java.lang", "String", "public boolean matches(String arg0)" ], [ "strip", "java.lang", "String", "public String strip()" ], [ "indexOf", "java.lang", "String", "public int indexOf(String arg0, int arg1)" ], [ "endsWith", "java.lang", "String", "public boolean endsWith(String arg0)" ], [ "value", "java.lang", "String", "byte[] value()" ], [ "trim", "java.lang", "String", "public String trim()" ], [ "compareToIgnoreCase", "java.lang", "String", "public int compareToIgnoreCase(String arg0)" ], [ "subSequence", "java.lang", "String", "public CharSequence subSequence(int arg0, int arg1)" ], [ "isBlank", "java.lang", "String", "public boolean isBlank()" ], [ "concat", "java.lang", "String", "public String concat(String arg0)" ], [ "replaceAll", "java.lang", "String", "public String replaceAll(String arg0, String arg1)" ], [ "indexOf", "java.lang", "String", "public int indexOf(int arg0, int arg1)" ], [ "describeConstable", "java.lang", "String", "public Optional<String> describeConstable()" ], [ "lastIndexOf", "java.lang", "String", "public int lastIndexOf(int arg0, int arg1)" ], [ "contentEquals", "java.lang", "String", "public boolean contentEquals(StringBuffer arg0)" ], [ "substring", "java.lang", "String", "public String substring(int arg0)" ], [ "getBytes", "java.lang", "String", "public byte[] getBytes()" ], [ "translateEscapes", "java.lang", "String", "public String translateEscapes()" ], [ "contains", "java.lang", "String", "public boolean contains(CharSequence arg0)" ], [ "coder", "java.lang", "String", "byte coder()" ], [ "isLatin1", "java.lang", "String", "boolean isLatin1()" ], [ "substring", "java.lang", "String", "public String substring(int arg0, int arg1)" ], [ "length", "java.lang", "String", "public int length()" ], [ "repeat", "java.lang", "String", "public String repeat(int arg0)" ], [ "startsWith", "java.lang", "String", "public boolean startsWith(String arg0, int arg1)" ], [ "replace", "java.lang", "String", "public String replace(char arg0, char arg1)" ], [ "transform", "java.lang", "String", "public <R> R transform(Function<? super String, ? extends R> arg0)" ], [ "startsWith", "java.lang", "String", "public boolean startsWith(String arg0)" ], [ "lines", "java.lang", "String", "public Stream<String> lines()" ], [ "compareTo", "java.lang", "Comparable", "public abstract int compareTo(T arg0)" ], [ "charAt", "java.lang", "CharSequence", "public abstract char charAt(int arg0)" ], [ "chars", "java.lang", "CharSequence", "public default IntStream chars()" ], [ "codePoints", "java.lang", "CharSequence", "public default IntStream codePoints()" ], [ "toString", "java.lang", "CharSequence", "public abstract String toString()" ], [ "isEmpty", "java.lang", "CharSequence", "public default boolean isEmpty()" ], [ "subSequence", "java.lang", "CharSequence", "public abstract CharSequence subSequence(int arg0, int arg1)" ], [ "length", "java.lang", "CharSequence", "public abstract int length()" ], [ "describeConstable", "java.lang.constant", "Constable", "public abstract Optional<? extends ConstantDesc> describeConstable()" ], [ "resolveConstantDesc", "java.lang.constant", "ConstantDesc", "public abstract Object resolveConstantDesc(MethodHandles.Lookup arg0) throws ReflectiveOperationException" ], [ "equals", "", "java.lang.Class<?>[]", "public boolean equals(Object);" ], [ "toString", "", "java.lang.Class<?>[]", "public String toString()" ], [ "hashCode", "", "java.lang.Class<?>[]", "public native int hashCode()" ], [ "getClass", "", "java.lang.Class<?>[]", "public final native Class getClass();" ], [ "clone", "", "java.lang.Class<?>[]", "public T[] clone();" ], [ "equals", "", "java.lang.Object[]", "public boolean equals(Object);" ], [ "toString", "", "java.lang.Object[]", "public String toString()" ], [ "hashCode", "", "java.lang.Object[]", "public native int hashCode()" ], [ "getClass", "", "java.lang.Object[]", "public final native Class getClass();" ], [ "clone", "", "java.lang.Object[]", "public T[] clone();" ], [ "evaluate", "org.apache.commons.collections4", "Predicate", "public abstract boolean evaluate(T arg0)" ] ],
  "tokensMethodVariablesNonPrivateNonStaticAttributes" : [ [ "length", "java.lang", "Class[]", "public final int length;" ], [ "length", "java.lang", "Object[]", "public final int length;" ] ],
  "tokensOracleVariablesNonPrivateNonStaticNonVoidMethods" : [ ],
  "tokensOracleVariablesNonPrivateNonStaticAttributes" : [ ]
}, {
  "id" : 9024,
  "oracle" : ";",
  "oracleType" : "EXCEPT_POST",
  "projectName" : "commons-collections4-4.1",
  "packageName" : "org.apache.commons.collections4",
  "className" : "PredicateUtils",
  "javadocTag" : "@throws IllegalArgumentException if the paramTypes and args don't match",
  "methodJavadoc" : "    /**\n     * Creates a Predicate that invokes a method on the input object.\n     * The method must return either a boolean or a non-null Boolean,\n     * and have no parameters. If the input object is null, a\n     * PredicateException is thrown.\n     * <p>\n     * For example, <code>PredicateUtils.invokerPredicate(\"isEmpty\");</code>\n     * will call the <code>isEmpty</code> method on the input object to\n     * determine the predicate result.\n     *\n     * @param <T>  the type that the predicate queries\n     * @param methodName  the method name to call on the input object, may not be null\n     * @param paramTypes  the parameter types\n     * @param args  the arguments\n     * @return the predicate\n     * @throws NullPointerException if the method name is null\n     * @throws IllegalArgumentException if the paramTypes and args don't match\n     * @see InvokerTransformer\n     * @see TransformerPredicate\n     */",
  "methodSourceCode" : "public static <T> Predicate<T> invokerPredicate(final String methodName, final Class<?>[] paramTypes, final Object[] args){\n    // reuse transformer as it has caching - this is lazy really, should have inner class here\n    return asPredicate(InvokerTransformer.<Object, Boolean>invokerTransformer(methodName, paramTypes, args));\n}",
  "classJavadoc" : "/**\n * <code>PredicateUtils</code> provides reference implementations and utilities\n * for the Predicate functor interface. The supplied predicates are:\n * <ul>\n * <li>Invoker - returns the result of a method call on the input object\n * <li>InstanceOf - true if the object is an instanceof a class\n * <li>Equal - true if the object equals() a specified object\n * <li>Identity - true if the object == a specified object\n * <li>Null - true if the object is null\n * <li>NotNull - true if the object is not null\n * <li>Unique - true if the object has not already been evaluated\n * <li>And/All - true if all of the predicates are true\n * <li>Or/Any - true if any of the predicates is true\n * <li>Either/One - true if only one of the predicate is true\n * <li>Neither/None - true if none of the predicates are true\n * <li>Not - true if the predicate is false, and vice versa\n * <li>Transformer - wraps a Transformer as a Predicate\n * <li>True - always return true\n * <li>False - always return false\n * <li>Exception - always throws an exception\n * <li>NullIsException/NullIsFalse/NullIsTrue - check for null input\n * <li>Transformed - transforms the input before calling the predicate\n * </ul>\n * All the supplied predicates are Serializable.\n *\n * @since 3.0\n * @version $Id: PredicateUtils.java 1686855 2015-06-22 13:00:27Z tn $\n */",
  "classSourceCode" : "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.commons.collections4;\n\nimport java.util.Collection;\n\nimport org.apache.commons.collections4.functors.AllPredicate;\nimport org.apache.commons.collections4.functors.AndPredicate;\nimport org.apache.commons.collections4.functors.AnyPredicate;\nimport org.apache.commons.collections4.functors.EqualPredicate;\nimport org.apache.commons.collections4.functors.ExceptionPredicate;\nimport org.apache.commons.collections4.functors.FalsePredicate;\nimport org.apache.commons.collections4.functors.IdentityPredicate;\nimport org.apache.commons.collections4.functors.InstanceofPredicate;\nimport org.apache.commons.collections4.functors.InvokerTransformer;\nimport org.apache.commons.collections4.functors.NonePredicate;\nimport org.apache.commons.collections4.functors.NotNullPredicate;\nimport org.apache.commons.collections4.functors.NotPredicate;\nimport org.apache.commons.collections4.functors.NullIsExceptionPredicate;\nimport org.apache.commons.collections4.functors.NullIsFalsePredicate;\nimport org.apache.commons.collections4.functors.NullIsTruePredicate;\nimport org.apache.commons.collections4.functors.NullPredicate;\nimport org.apache.commons.collections4.functors.OnePredicate;\nimport org.apache.commons.collections4.functors.OrPredicate;\nimport org.apache.commons.collections4.functors.TransformedPredicate;\nimport org.apache.commons.collections4.functors.TransformerPredicate;\nimport org.apache.commons.collections4.functors.TruePredicate;\nimport org.apache.commons.collections4.functors.UniquePredicate;\n\n/**\n * <code>PredicateUtils</code> provides reference implementations and utilities\n * for the Predicate functor interface. The supplied predicates are:\n * <ul>\n * <li>Invoker - returns the result of a method call on the input object\n * <li>InstanceOf - true if the object is an instanceof a class\n * <li>Equal - true if the object equals() a specified object\n * <li>Identity - true if the object == a specified object\n * <li>Null - true if the object is null\n * <li>NotNull - true if the object is not null\n * <li>Unique - true if the object has not already been evaluated\n * <li>And/All - true if all of the predicates are true\n * <li>Or/Any - true if any of the predicates is true\n * <li>Either/One - true if only one of the predicate is true\n * <li>Neither/None - true if none of the predicates are true\n * <li>Not - true if the predicate is false, and vice versa\n * <li>Transformer - wraps a Transformer as a Predicate\n * <li>True - always return true\n * <li>False - always return false\n * <li>Exception - always throws an exception\n * <li>NullIsException/NullIsFalse/NullIsTrue - check for null input\n * <li>Transformed - transforms the input before calling the predicate\n * </ul>\n * All the supplied predicates are Serializable.\n *\n * @since 3.0\n * @version $Id: PredicateUtils.java 1686855 2015-06-22 13:00:27Z tn $\n */\npublic class PredicateUtils {\n\n    /**\n     * This class is not normally instantiated.\n     */\n    private PredicateUtils() {}\n\n    // Simple predicates\n    //-----------------------------------------------------------------------------\n\n    /**\n     * Gets a Predicate that always throws an exception.\n     * This could be useful during testing as a placeholder.\n     *\n     * @param <T>  the type that the predicate queries\n     * @return the predicate\n     * @see ExceptionPredicate\n     */\n    public static <T> Predicate<T> exceptionPredicate() {\n        return ExceptionPredicate.exceptionPredicate();\n    }\n\n    /**\n     * Gets a Predicate that always returns true.\n     *\n     * @param <T>  the type that the predicate queries\n     * @return the predicate\n     * @see TruePredicate\n     */\n    public static <T> Predicate<T> truePredicate() {\n        return TruePredicate.truePredicate();\n    }\n\n    /**\n     * Gets a Predicate that always returns false.\n     *\n     * @param <T>  the type that the predicate queries\n     * @return the predicate\n     * @see FalsePredicate\n     */\n    public static <T> Predicate<T> falsePredicate() {\n        return FalsePredicate.falsePredicate();\n    }\n\n    /**\n     * Gets a Predicate that checks if the input object passed in is null.\n     *\n     * @param <T>  the type that the predicate queries\n     * @return the predicate\n     * @see NullPredicate\n     */\n    public static <T> Predicate<T> nullPredicate() {\n        return NullPredicate.nullPredicate();\n    }\n\n    /**\n     * Gets a Predicate that checks if the input object passed in is not null.\n     *\n     * @param <T>  the type that the predicate queries\n     * @return the predicate\n     * @see NotNullPredicate\n     */\n    public static <T> Predicate<T> notNullPredicate() {\n        return NotNullPredicate.notNullPredicate();\n    }\n\n    /**\n     * Creates a Predicate that checks if the input object is equal to the\n     * specified object using equals().\n     *\n     * @param <T>  the type that the predicate queries\n     * @param value  the value to compare against\n     * @return the predicate\n     * @see EqualPredicate\n     */\n    public static <T> Predicate<T> equalPredicate(final T value) {\n        return EqualPredicate.equalPredicate(value);\n    }\n\n    /**\n     * Creates a Predicate that checks if the input object is equal to the\n     * specified object by identity.\n     *\n     * @param <T>  the type that the predicate queries\n     * @param value  the value to compare against\n     * @return the predicate\n     * @see IdentityPredicate\n     */\n    public static <T> Predicate<T> identityPredicate(final T value) {\n        return IdentityPredicate.identityPredicate(value);\n    }\n\n    /**\n     * Creates a Predicate that checks if the object passed in is of\n     * a particular type, using instanceof. A <code>null</code> input\n     * object will return <code>false</code>.\n     *\n     * @param type  the type to check for, may not be null\n     * @return the predicate\n     * @throws NullPointerException if the class is null\n     * @see InstanceofPredicate\n     */\n    public static Predicate<Object> instanceofPredicate(final Class<?> type) {\n        return InstanceofPredicate.instanceOfPredicate(type);\n    }\n\n    /**\n     * Creates a Predicate that returns true the first time an object is\n     * encountered, and false if the same object is received\n     * again. The comparison is by equals(). A <code>null</code> input object\n     * is accepted and will return true the first time, and false subsequently\n     * as well.\n     *\n     * @param <T>  the type that the predicate queries\n     * @return the predicate\n     * @see UniquePredicate\n     */\n    public static <T> Predicate<T> uniquePredicate() {\n        // must return new instance each time\n        return UniquePredicate.uniquePredicate();\n    }\n\n    /**\n     * Creates a Predicate that invokes a method on the input object.\n     * The method must return either a boolean or a non-null Boolean,\n     * and have no parameters. If the input object is null, a\n     * PredicateException is thrown.\n     * <p>\n     * For example, <code>PredicateUtils.invokerPredicate(\"isEmpty\");</code>\n     * will call the <code>isEmpty</code> method on the input object to\n     * determine the predicate result.\n     *\n     * @param <T>  the type that the predicate queries\n     * @param methodName  the method name to call on the input object, may not be null\n     * @return the predicate\n     * @throws NullPointerException if the methodName is null.\n     * @see InvokerTransformer\n     * @see TransformerPredicate\n     */\n    public static <T> Predicate<T> invokerPredicate(final String methodName) {\n        // reuse transformer as it has caching - this is lazy really, should have inner class here\n        return asPredicate(InvokerTransformer.<Object, Boolean>invokerTransformer(methodName));\n    }\n\n    /**\n     * Creates a Predicate that invokes a method on the input object.\n     * The method must return either a boolean or a non-null Boolean,\n     * and have no parameters. If the input object is null, a\n     * PredicateException is thrown.\n     * <p>\n     * For example, <code>PredicateUtils.invokerPredicate(\"isEmpty\");</code>\n     * will call the <code>isEmpty</code> method on the input object to\n     * determine the predicate result.\n     *\n     * @param <T>  the type that the predicate queries\n     * @param methodName  the method name to call on the input object, may not be null\n     * @param paramTypes  the parameter types\n     * @param args  the arguments\n     * @return the predicate\n     * @throws NullPointerException if the method name is null\n     * @throws IllegalArgumentException if the paramTypes and args don't match\n     * @see InvokerTransformer\n     * @see TransformerPredicate\n     */\n    public static <T> Predicate<T> invokerPredicate(final String methodName, final Class<?>[] paramTypes,\n                                                    final Object[] args) {\n        // reuse transformer as it has caching - this is lazy really, should have inner class here\n        return asPredicate(InvokerTransformer.<Object, Boolean>invokerTransformer(methodName, paramTypes, args));\n    }\n\n    // Boolean combinations\n    //-----------------------------------------------------------------------------\n\n    /**\n     * Create a new Predicate that returns true only if both of the specified\n     * predicates are true.\n     *\n     * @param <T>  the type that the predicate queries\n     * @param predicate1  the first predicate, may not be null\n     * @param predicate2  the second predicate, may not be null\n     * @return the <code>and</code> predicate\n     * @throws NullPointerException if either predicate is null\n     * @see AndPredicate\n     */\n    public static <T> Predicate<T> andPredicate(final Predicate<? super T> predicate1,\n                                                final Predicate<? super T> predicate2) {\n        return AndPredicate.andPredicate(predicate1, predicate2);\n    }\n\n    /**\n     * Create a new Predicate that returns true only if all of the specified\n     * predicates are true.\n     * If the array of predicates is empty, then this predicate returns true.\n     *\n     * @param <T>  the type that the predicate queries\n     * @param predicates  an array of predicates to check, may not be null\n     * @return the <code>all</code> predicate\n     * @throws NullPointerException if the predicates array is null\n     * @throws NullPointerException if any predicate in the array is null\n     * @see AllPredicate\n     */\n    public static <T> Predicate<T> allPredicate(final Predicate<? super T>... predicates) {\n        return AllPredicate.allPredicate(predicates);\n    }\n\n    /**\n     * Create a new Predicate that returns true only if all of the specified\n     * predicates are true. The predicates are checked in iterator order.\n     * If the collection of predicates is empty, then this predicate returns true.\n     *\n     * @param <T>  the type that the predicate queries\n     * @param predicates  a collection of predicates to check, may not be null\n     * @return the <code>all</code> predicate\n     * @throws NullPointerException if the predicates collection is null\n     * @throws NullPointerException if any predicate in the collection is null\n     * @see AllPredicate\n     */\n    public static <T> Predicate<T> allPredicate(final Collection<? extends Predicate<? super T>> predicates) {\n        return AllPredicate.allPredicate(predicates);\n    }\n\n    /**\n     * Create a new Predicate that returns true if either of the specified\n     * predicates are true.\n     *\n     * @param <T>  the type that the predicate queries\n     * @param predicate1  the first predicate, may not be null\n     * @param predicate2  the second predicate, may not be null\n     * @return the <code>or</code> predicate\n     * @throws NullPointerException if either predicate is null\n     * @see OrPredicate\n     */\n    public static <T> Predicate<T> orPredicate(final Predicate<? super T> predicate1,\n                                               final Predicate<? super T> predicate2) {\n        return OrPredicate.orPredicate(predicate1, predicate2);\n    }\n\n    /**\n     * Create a new Predicate that returns true if any of the specified\n     * predicates are true.\n     * If the array of predicates is empty, then this predicate returns false.\n     *\n     * @param <T>  the type that the predicate queries\n     * @param predicates  an array of predicates to check, may not be null\n     * @return the <code>any</code> predicate\n     * @throws NullPointerException if the predicates array is null\n     * @throws NullPointerException if any predicate in the array is null\n     * @see AnyPredicate\n     */\n    public static <T> Predicate<T> anyPredicate(final Predicate<? super T>... predicates) {\n        return AnyPredicate.anyPredicate(predicates);\n    }\n\n    /**\n     * Create a new Predicate that returns true if any of the specified\n     * predicates are true. The predicates are checked in iterator order.\n     * If the collection of predicates is empty, then this predicate returns false.\n     *\n     * @param <T>  the type that the predicate queries\n     * @param predicates  a collection of predicates to check, may not be null\n     * @return the <code>any</code> predicate\n     * @throws NullPointerException if the predicates collection is null\n     * @throws NullPointerException if any predicate in the collection is null\n     * @see AnyPredicate\n     */\n    public static <T> Predicate<T> anyPredicate(final Collection<? extends Predicate<? super T>> predicates) {\n        return AnyPredicate.anyPredicate(predicates);\n    }\n\n    /**\n     * Create a new Predicate that returns true if one, but not both, of the\n     * specified predicates are true. XOR\n     *\n     * @param <T>  the type that the predicate queries\n     * @param predicate1  the first predicate, may not be null\n     * @param predicate2  the second predicate, may not be null\n     * @return the <code>either</code> predicate\n     * @throws NullPointerException if either predicate is null\n     * @see OnePredicate\n     */\n    public static <T> Predicate<T> eitherPredicate(final Predicate<? super T> predicate1,\n                                                   final Predicate<? super T> predicate2) {\n        @SuppressWarnings(\"unchecked\")\n        final Predicate<T> onePredicate = PredicateUtils.onePredicate(predicate1, predicate2);\n        return onePredicate;\n    }\n\n    /**\n     * Create a new Predicate that returns true if only one of the specified\n     * predicates are true.\n     * If the array of predicates is empty, then this predicate returns false.\n     *\n     * @param <T>  the type that the predicate queries\n     * @param predicates  an array of predicates to check, may not be null\n     * @return the <code>one</code> predicate\n     * @throws NullPointerException if the predicates array is null\n     * @throws NullPointerException if any predicate in the array is null\n     * @see OnePredicate\n     */\n    public static <T> Predicate<T> onePredicate(final Predicate<? super T>... predicates) {\n        return OnePredicate.onePredicate(predicates);\n    }\n\n    /**\n     * Create a new Predicate that returns true if only one of the specified\n     * predicates are true. The predicates are checked in iterator order.\n     * If the collection of predicates is empty, then this predicate returns false.\n     *\n     * @param <T>  the type that the predicate queries\n     * @param predicates  a collection of predicates to check, may not be null\n     * @return the <code>one</code> predicate\n     * @throws NullPointerException if the predicates collection is null\n     * @throws NullPointerException if any predicate in the collection is null\n     * @see OnePredicate\n     */\n    public static <T> Predicate<T> onePredicate(final Collection<? extends Predicate<? super T>> predicates) {\n        return OnePredicate.onePredicate(predicates);\n    }\n\n    /**\n     * Create a new Predicate that returns true if neither of the specified\n     * predicates are true.\n     *\n     * @param <T>  the type that the predicate queries\n     * @param predicate1  the first predicate, may not be null\n     * @param predicate2  the second predicate, may not be null\n     * @return the <code>neither</code> predicate\n     * @throws NullPointerException if either predicate is null\n     * @see NonePredicate\n     */\n    public static <T> Predicate<T> neitherPredicate(final Predicate<? super T> predicate1,\n                                                    final Predicate<? super T> predicate2) {\n        @SuppressWarnings(\"unchecked\")\n        final Predicate<T> nonePredicate = PredicateUtils.nonePredicate(predicate1, predicate2);\n        return nonePredicate;\n    }\n\n    /**\n     * Create a new Predicate that returns true if none of the specified\n     * predicates are true.\n     * If the array of predicates is empty, then this predicate returns true.\n     *\n     * @param <T>  the type that the predicate queries\n     * @param predicates  an array of predicates to check, may not be null\n     * @return the <code>none</code> predicate\n     * @throws NullPointerException if the predicates array is null\n     * @throws NullPointerException if any predicate in the array is null\n     * @see NonePredicate\n     */\n    public static <T> Predicate<T> nonePredicate(final Predicate<? super T>... predicates) {\n        return NonePredicate.nonePredicate(predicates);\n    }\n\n    /**\n     * Create a new Predicate that returns true if none of the specified\n     * predicates are true. The predicates are checked in iterator order.\n     * If the collection of predicates is empty, then this predicate returns true.\n     *\n     * @param <T>  the type that the predicate queries\n     * @param predicates  a collection of predicates to check, may not be null\n     * @return the <code>none</code> predicate\n     * @throws NullPointerException if the predicates collection is null\n     * @throws NullPointerException if any predicate in the collection is null\n     * @see NonePredicate\n     */\n    public static <T> Predicate<T> nonePredicate(final Collection<? extends Predicate<? super T>> predicates) {\n        return NonePredicate.nonePredicate(predicates);\n    }\n\n    /**\n     * Create a new Predicate that returns true if the specified predicate\n     * returns false and vice versa.\n     *\n     * @param <T>  the type that the predicate queries\n     * @param predicate  the predicate to not\n     * @return the <code>not</code> predicate\n     * @throws NullPointerException if the predicate is null\n     * @see NotPredicate\n     */\n    public static <T> Predicate<T> notPredicate(final Predicate<? super T> predicate) {\n        return NotPredicate.notPredicate(predicate);\n    }\n\n    // Adaptors\n    //-----------------------------------------------------------------------------\n\n    /**\n     * Create a new Predicate that wraps a Transformer. The Transformer must\n     * return either Boolean.TRUE or Boolean.FALSE otherwise a PredicateException\n     * will be thrown.\n     *\n     * @param <T>  the type that the predicate queries\n     * @param transformer  the transformer to wrap, may not be null\n     * @return the transformer wrapping predicate\n     * @throws NullPointerException if the transformer is null\n     * @see TransformerPredicate\n     */\n    public static <T> Predicate<T> asPredicate(final Transformer<? super T, Boolean> transformer) {\n        return TransformerPredicate.transformerPredicate(transformer);\n    }\n\n    // Null handlers\n    //-----------------------------------------------------------------------------\n\n    /**\n     * Gets a Predicate that throws an exception if the input object is null,\n     * otherwise it calls the specified Predicate. This allows null handling\n     * behaviour to be added to Predicates that don't support nulls.\n     *\n     * @param <T>  the type that the predicate queries\n     * @param predicate  the predicate to wrap, may not be null\n     * @return the predicate\n     * @throws NullPointerException if the predicate is null.\n     * @see NullIsExceptionPredicate\n     */\n    public static <T> Predicate<T> nullIsExceptionPredicate(final Predicate<? super T> predicate){\n        return NullIsExceptionPredicate.nullIsExceptionPredicate(predicate);\n    }\n\n    /**\n     * Gets a Predicate that returns false if the input object is null, otherwise\n     * it calls the specified Predicate. This allows null handling behaviour to\n     * be added to Predicates that don't support nulls.\n     *\n     * @param <T>  the type that the predicate queries\n     * @param predicate  the predicate to wrap, may not be null\n     * @return the predicate\n     * @throws NullPointerException if the predicate is null.\n     * @see NullIsFalsePredicate\n     */\n    public static <T> Predicate<T> nullIsFalsePredicate(final Predicate<? super T> predicate){\n        return NullIsFalsePredicate.nullIsFalsePredicate(predicate);\n    }\n\n    /**\n     * Gets a Predicate that returns true if the input object is null, otherwise\n     * it calls the specified Predicate. This allows null handling behaviour to\n     * be added to Predicates that don't support nulls.\n     *\n     * @param <T>  the type that the predicate queries\n     * @param predicate  the predicate to wrap, may not be null\n     * @return the predicate\n     * @throws NullPointerException if the predicate is null.\n     * @see NullIsTruePredicate\n     */\n    public static <T> Predicate<T> nullIsTruePredicate(final Predicate<? super T> predicate){\n        return NullIsTruePredicate.nullIsTruePredicate(predicate);\n    }\n\n    // Transformed\n    //-----------------------------------------------------------------------\n    /**\n     * Creates a predicate that transforms the input object before passing it\n     * to the predicate.\n     *\n     * @param <T>  the type that the predicate queries\n     * @param transformer  the transformer to call first\n     * @param predicate  the predicate to call with the result of the transform\n     * @return the predicate\n     * @throws NullPointerException if the transformer or the predicate is null\n     * @see TransformedPredicate\n     * @since 3.1\n     */\n    public static <T> Predicate<T> transformedPredicate(\n            final Transformer<? super T, ? extends T> transformer, final Predicate<? super T> predicate) {\n        return TransformedPredicate.transformedPredicate(transformer, predicate);\n    }\n\n}\n",
  "tokensGeneralGrammar" : [ "null", "true", "false", ",", ".", ":", ";", "?", "(", ")", "jdVar", "stream", "Arrays", "allMatch", "noneMatch", "anyMatch", "~", ">>", "<<", ">>>", "|", "&", "^", "+", "-", "/", "*", "%", "&&", "||", ">=", "<=", ">", "<", "==", "!=", "instanceof", "class", "methodResultID", "this" ],
  "tokensGeneralValuesGlobalDictionary" : [ [ "0", "int" ], [ "1", "int" ], [ "-1", "int" ], [ "0.0", "double" ], [ "1.0", "double" ], [ "-1.0", "double" ], [ "\"\"", "String" ], [ "\" \"", "String" ] ],
  "tokensProjectClasses" : [ [ "BidiMap", "org.apache.commons.collections4" ], [ "Equator", "org.apache.commons.collections4" ], [ "MultiSet", "org.apache.commons.collections4" ], [ "IteratorUtils", "org.apache.commons.collections4" ], [ "ComparatorUtils", "org.apache.commons.collections4" ], [ "FunctorException", "org.apache.commons.collections4" ], [ "AbstractDualBidiMap", "org.apache.commons.collections4.bidimap" ], [ "UnmodifiableBidiMap", "org.apache.commons.collections4.bidimap" ], [ "AbstractOrderedBidiMapDecorator", "org.apache.commons.collections4.bidimap" ], [ "UnmodifiableOrderedBidiMap", "org.apache.commons.collections4.bidimap" ], [ "AbstractBidiMapDecorator", "org.apache.commons.collections4.bidimap" ], [ "DualLinkedHashBidiMap", "org.apache.commons.collections4.bidimap" ], [ "UnmodifiableSortedBidiMap", "org.apache.commons.collections4.bidimap" ], [ "AbstractSortedBidiMapDecorator", "org.apache.commons.collections4.bidimap" ], [ "DualHashBidiMap", "org.apache.commons.collections4.bidimap" ], [ "DualTreeBidiMap", "org.apache.commons.collections4.bidimap" ], [ "TreeBidiMap", "org.apache.commons.collections4.bidimap" ], [ "MultiMapUtils", "org.apache.commons.collections4" ], [ "BoundedCollection", "org.apache.commons.collections4" ], [ "UnmodifiableBoundedCollection", "org.apache.commons.collections4.collection" ], [ "CompositeCollection", "org.apache.commons.collections4.collection" ], [ "TransformedCollection", "org.apache.commons.collections4.collection" ], [ "PredicatedCollection", "org.apache.commons.collections4.collection" ], [ "IndexedCollection", "org.apache.commons.collections4.collection" ], [ "SynchronizedCollection", "org.apache.commons.collections4.collection" ], [ "UnmodifiableCollection", "org.apache.commons.collections4.collection" ], [ "AbstractCollectionDecorator", "org.apache.commons.collections4.collection" ], [ "OrderedBidiMap", "org.apache.commons.collections4" ], [ "FactoryUtils", "org.apache.commons.collections4" ], [ "IterableGet", "org.apache.commons.collections4" ], [ "ListUtils", "org.apache.commons.collections4" ], [ "Closure", "org.apache.commons.collections4" ], [ "IterableSortedMap", "org.apache.commons.collections4" ], [ "MapUtils", "org.apache.commons.collections4" ], [ "Transformer", "org.apache.commons.collections4" ], [ "DefaultEquator", "org.apache.commons.collections4.functors" ], [ "StringValueTransformer", "org.apache.commons.collections4.functors" ], [ "PredicateDecorator", "org.apache.commons.collections4.functors" ], [ "IfTransformer", "org.apache.commons.collections4.functors" ], [ "IdentityPredicate", "org.apache.commons.collections4.functors" ], [ "ExceptionClosure", "org.apache.commons.collections4.functors" ], [ "NOPClosure", "org.apache.commons.collections4.functors" ], [ "ClosureTransformer", "org.apache.commons.collections4.functors" ], [ "FunctorUtils", "org.apache.commons.collections4.functors" ], [ "TransformerPredicate", "org.apache.commons.collections4.functors" ], [ "NullPredicate", "org.apache.commons.collections4.functors" ], [ "ConstantTransformer", "org.apache.commons.collections4.functors" ], [ "PredicateTransformer", "org.apache.commons.collections4.functors" ], [ "WhileClosure", "org.apache.commons.collections4.functors" ], [ "ForClosure", "org.apache.commons.collections4.functors" ], [ "NullIsTruePredicate", "org.apache.commons.collections4.functors" ], [ "TransformedPredicate", "org.apache.commons.collections4.functors" ], [ "NonePredicate", "org.apache.commons.collections4.functors" ], [ "ExceptionTransformer", "org.apache.commons.collections4.functors" ], [ "SwitchTransformer", "org.apache.commons.collections4.functors" ], [ "TransformerClosure", "org.apache.commons.collections4.functors" ], [ "OrPredicate", "org.apache.commons.collections4.functors" ], [ "NOPTransformer", "org.apache.commons.collections4.functors" ], [ "MapTransformer", "org.apache.commons.collections4.functors" ], [ "ExceptionFactory", "org.apache.commons.collections4.functors" ], [ "ChainedClosure", "org.apache.commons.collections4.functors" ], [ "AndPredicate", "org.apache.commons.collections4.functors" ], [ "PrototypeFactory", "org.apache.commons.collections4.functors" ], [ "ExceptionPredicate", "org.apache.commons.collections4.functors" ], [ "AbstractQuantifierPredicate", "org.apache.commons.collections4.functors" ], [ "InstanceofPredicate", "org.apache.commons.collections4.functors" ], [ "InvokerTransformer", "org.apache.commons.collections4.functors" ], [ "FalsePredicate", "org.apache.commons.collections4.functors" ], [ "CloneTransformer", "org.apache.commons.collections4.functors" ], [ "NotPredicate", "org.apache.commons.collections4.functors" ], [ "ConstantFactory", "org.apache.commons.collections4.functors" ], [ "ChainedTransformer", "org.apache.commons.collections4.functors" ], [ "ComparatorPredicate", "org.apache.commons.collections4.functors" ], [ "CatchAndRethrowClosure", "org.apache.commons.collections4.functors" ], [ "AllPredicate", "org.apache.commons.collections4.functors" ], [ "NullIsFalsePredicate", "org.apache.commons.collections4.functors" ], [ "NullIsExceptionPredicate", "org.apache.commons.collections4.functors" ], [ "AnyPredicate", "org.apache.commons.collections4.functors" ], [ "TruePredicate", "org.apache.commons.collections4.functors" ], [ "FactoryTransformer", "org.apache.commons.collections4.functors" ], [ "NotNullPredicate", "org.apache.commons.collections4.functors" ], [ "SwitchClosure", "org.apache.commons.collections4.functors" ], [ "UniquePredicate", "org.apache.commons.collections4.functors" ], [ "InstantiateTransformer", "org.apache.commons.collections4.functors" ], [ "OnePredicate", "org.apache.commons.collections4.functors" ], [ "EqualPredicate", "org.apache.commons.collections4.functors" ], [ "InstantiateFactory", "org.apache.commons.collections4.functors" ], [ "IfClosure", "org.apache.commons.collections4.functors" ], [ "ResettableListIterator", "org.apache.commons.collections4" ], [ "OrderedIterator", "org.apache.commons.collections4" ], [ "ComparatorChain", "org.apache.commons.collections4.comparators" ], [ "BooleanComparator", "org.apache.commons.collections4.comparators" ], [ "ReverseComparator", "org.apache.commons.collections4.comparators" ], [ "ComparableComparator", "org.apache.commons.collections4.comparators" ], [ "TransformingComparator", "org.apache.commons.collections4.comparators" ], [ "FixedOrderComparator", "org.apache.commons.collections4.comparators" ], [ "NullComparator", "org.apache.commons.collections4.comparators" ], [ "CollectionUtils", "org.apache.commons.collections4" ], [ "ListValuedMap", "org.apache.commons.collections4" ], [ "AbstractIterableGetMapDecorator", "org.apache.commons.collections4.splitmap" ], [ "TransformedSplitMap", "org.apache.commons.collections4.splitmap" ], [ "Factory", "org.apache.commons.collections4" ], [ "IterableUtils", "org.apache.commons.collections4" ], [ "Bag", "org.apache.commons.collections4" ], [ "Predicate", "org.apache.commons.collections4" ], [ "SortedBag", "org.apache.commons.collections4" ], [ "TrieUtils", "org.apache.commons.collections4" ], [ "ClosureUtils", "org.apache.commons.collections4" ], [ "PatriciaTrie", "org.apache.commons.collections4.trie" ], [ "UnmodifiableTrie", "org.apache.commons.collections4.trie" ], [ "KeyAnalyzer", "org.apache.commons.collections4.trie" ], [ "AbstractPatriciaTrie", "org.apache.commons.collections4.trie" ], [ "AbstractBitwiseTrie", "org.apache.commons.collections4.trie" ], [ "StringKeyAnalyzer", "org.apache.commons.collections4.trie.analyzer" ], [ "TransformedSortedMap", "org.apache.commons.collections4.map" ], [ "AbstractLinkedMap", "org.apache.commons.collections4.map" ], [ "Flat3Map", "org.apache.commons.collections4.map" ], [ "PredicatedMap", "org.apache.commons.collections4.map" ], [ "FixedSizeSortedMap", "org.apache.commons.collections4.map" ], [ "UnmodifiableSortedMap", "org.apache.commons.collections4.map" ], [ "PredicatedSortedMap", "org.apache.commons.collections4.map" ], [ "DefaultedMap", "org.apache.commons.collections4.map" ], [ "ReferenceIdentityMap", "org.apache.commons.collections4.map" ], [ "AbstractSortedMapDecorator", "org.apache.commons.collections4.map" ], [ "AbstractInputCheckedMapDecorator", "org.apache.commons.collections4.map" ], [ "FixedSizeMap", "org.apache.commons.collections4.map" ], [ "LazySortedMap", "org.apache.commons.collections4.map" ], [ "UnmodifiableOrderedMap", "org.apache.commons.collections4.map" ], [ "CaseInsensitiveMap", "org.apache.commons.collections4.map" ], [ "AbstractHashedMap", "org.apache.commons.collections4.map" ], [ "AbstractOrderedMapDecorator", "org.apache.commons.collections4.map" ], [ "UnmodifiableMap", "org.apache.commons.collections4.map" ], [ "EntrySetToMapIteratorAdapter", "org.apache.commons.collections4.map" ], [ "AbstractIterableMap", "org.apache.commons.collections4.map" ], [ "ListOrderedMap", "org.apache.commons.collections4.map" ], [ "LinkedMap", "org.apache.commons.collections4.map" ], [ "SingletonMap", "org.apache.commons.collections4.map" ], [ "UnmodifiableEntrySet", "org.apache.commons.collections4.map" ], [ "StaticBucketMap", "org.apache.commons.collections4.map" ], [ "AbstractMapDecorator", "org.apache.commons.collections4.map" ], [ "AbstractReferenceMap", "org.apache.commons.collections4.map" ], [ "MultiKeyMap", "org.apache.commons.collections4.map" ], [ "HashedMap", "org.apache.commons.collections4.map" ], [ "LazyMap", "org.apache.commons.collections4.map" ], [ "PassiveExpiringMap", "org.apache.commons.collections4.map" ], [ "MultiValueMap", "org.apache.commons.collections4.map" ], [ "LRUMap", "org.apache.commons.collections4.map" ], [ "ReferenceMap", "org.apache.commons.collections4.map" ], [ "TransformedMap", "org.apache.commons.collections4.map" ], [ "CompositeMap", "org.apache.commons.collections4.map" ], [ "UnmodifiableMapEntry", "org.apache.commons.collections4.keyvalue" ], [ "MultiKey", "org.apache.commons.collections4.keyvalue" ], [ "DefaultMapEntry", "org.apache.commons.collections4.keyvalue" ], [ "DefaultKeyValue", "org.apache.commons.collections4.keyvalue" ], [ "AbstractMapEntryDecorator", "org.apache.commons.collections4.keyvalue" ], [ "AbstractKeyValue", "org.apache.commons.collections4.keyvalue" ], [ "TiedMapEntry", "org.apache.commons.collections4.keyvalue" ], [ "AbstractMapEntry", "org.apache.commons.collections4.keyvalue" ], [ "MultiSetUtils", "org.apache.commons.collections4" ], [ "MapIterator", "org.apache.commons.collections4" ], [ "AbstractMultiValuedMap", "org.apache.commons.collections4.multimap" ], [ "UnmodifiableMultiValuedMap", "org.apache.commons.collections4.multimap" ], [ "HashSetValuedHashMap", "org.apache.commons.collections4.multimap" ], [ "TransformedMultiValuedMap", "org.apache.commons.collections4.multimap" ], [ "AbstractSetValuedMap", "org.apache.commons.collections4.multimap" ], [ "AbstractListValuedMap", "org.apache.commons.collections4.multimap" ], [ "ArrayListValuedHashMap", "org.apache.commons.collections4.multimap" ], [ "AbstractMultiValuedMapDecorator", "org.apache.commons.collections4.multimap" ], [ "LazyList", "org.apache.commons.collections4.list" ], [ "AbstractSerializableListDecorator", "org.apache.commons.collections4.list" ], [ "TreeList", "org.apache.commons.collections4.list" ], [ "SetUniqueList", "org.apache.commons.collections4.list" ], [ "AbstractListDecorator", "org.apache.commons.collections4.list" ], [ "NodeCachingLinkedList", "org.apache.commons.collections4.list" ], [ "UnmodifiableList", "org.apache.commons.collections4.list" ], [ "FixedSizeList", "org.apache.commons.collections4.list" ], [ "TransformedList", "org.apache.commons.collections4.list" ], [ "GrowthList", "org.apache.commons.collections4.list" ], [ "AbstractLinkedList", "org.apache.commons.collections4.list" ], [ "CursorableLinkedList", "org.apache.commons.collections4.list" ], [ "PredicatedList", "org.apache.commons.collections4.list" ], [ "OrderedMap", "org.apache.commons.collections4" ], [ "AbstractQueueDecorator", "org.apache.commons.collections4.queue" ], [ "TransformedQueue", "org.apache.commons.collections4.queue" ], [ "UnmodifiableQueue", "org.apache.commons.collections4.queue" ], [ "CircularFifoQueue", "org.apache.commons.collections4.queue" ], [ "PredicatedQueue", "org.apache.commons.collections4.queue" ], [ "FluentIterable", "org.apache.commons.collections4" ], [ "TransformerUtils", "org.apache.commons.collections4" ], [ "PredicateUtils", "org.apache.commons.collections4" ], [ "ResettableIterator", "org.apache.commons.collections4" ], [ "MultiValuedMap", "org.apache.commons.collections4" ], [ "SetUtils", "org.apache.commons.collections4" ], [ "SortedBidiMap", "org.apache.commons.collections4" ], [ "ArrayStack", "org.apache.commons.collections4" ], [ "Put", "org.apache.commons.collections4" ], [ "OrderedMapIterator", "org.apache.commons.collections4" ], [ "TransformedSet", "org.apache.commons.collections4.set" ], [ "CompositeSet", "org.apache.commons.collections4.set" ], [ "TransformedNavigableSet", "org.apache.commons.collections4.set" ], [ "PredicatedNavigableSet", "org.apache.commons.collections4.set" ], [ "AbstractSetDecorator", "org.apache.commons.collections4.set" ], [ "ListOrderedSet", "org.apache.commons.collections4.set" ], [ "UnmodifiableSet", "org.apache.commons.collections4.set" ], [ "AbstractSerializableSetDecorator", "org.apache.commons.collections4.set" ], [ "MapBackedSet", "org.apache.commons.collections4.set" ], [ "UnmodifiableSortedSet", "org.apache.commons.collections4.set" ], [ "PredicatedSortedSet", "org.apache.commons.collections4.set" ], [ "AbstractSortedSetDecorator", "org.apache.commons.collections4.set" ], [ "PredicatedSet", "org.apache.commons.collections4.set" ], [ "AbstractNavigableSetDecorator", "org.apache.commons.collections4.set" ], [ "UnmodifiableNavigableSet", "org.apache.commons.collections4.set" ], [ "TransformedSortedSet", "org.apache.commons.collections4.set" ], [ "IterableMap", "org.apache.commons.collections4" ], [ "EnumerationUtils", "org.apache.commons.collections4" ], [ "DeleteCommand", "org.apache.commons.collections4.sequence" ], [ "ReplacementsHandler", "org.apache.commons.collections4.sequence" ], [ "InsertCommand", "org.apache.commons.collections4.sequence" ], [ "SequencesComparator", "org.apache.commons.collections4.sequence" ], [ "ReplacementsFinder", "org.apache.commons.collections4.sequence" ], [ "KeepCommand", "org.apache.commons.collections4.sequence" ], [ "EditCommand", "org.apache.commons.collections4.sequence" ], [ "CommandVisitor", "org.apache.commons.collections4.sequence" ], [ "EditScript", "org.apache.commons.collections4.sequence" ], [ "QueueUtils", "org.apache.commons.collections4" ], [ "SetValuedMap", "org.apache.commons.collections4" ], [ "SynchronizedBag", "org.apache.commons.collections4.bag" ], [ "AbstractMapBag", "org.apache.commons.collections4.bag" ], [ "CollectionBag", "org.apache.commons.collections4.bag" ], [ "UnmodifiableBag", "org.apache.commons.collections4.bag" ], [ "PredicatedSortedBag", "org.apache.commons.collections4.bag" ], [ "UnmodifiableSortedBag", "org.apache.commons.collections4.bag" ], [ "HashBag", "org.apache.commons.collections4.bag" ], [ "AbstractBagDecorator", "org.apache.commons.collections4.bag" ], [ "TransformedSortedBag", "org.apache.commons.collections4.bag" ], [ "TreeBag", "org.apache.commons.collections4.bag" ], [ "PredicatedBag", "org.apache.commons.collections4.bag" ], [ "SynchronizedSortedBag", "org.apache.commons.collections4.bag" ], [ "CollectionSortedBag", "org.apache.commons.collections4.bag" ], [ "TransformedBag", "org.apache.commons.collections4.bag" ], [ "AbstractSortedBagDecorator", "org.apache.commons.collections4.bag" ], [ "HashMultiSet", "org.apache.commons.collections4.multiset" ], [ "AbstractMultiSet", "org.apache.commons.collections4.multiset" ], [ "PredicatedMultiSet", "org.apache.commons.collections4.multiset" ], [ "AbstractMultiSetDecorator", "org.apache.commons.collections4.multiset" ], [ "AbstractMapMultiSet", "org.apache.commons.collections4.multiset" ], [ "UnmodifiableMultiSet", "org.apache.commons.collections4.multiset" ], [ "SynchronizedMultiSet", "org.apache.commons.collections4.multiset" ], [ "BagUtils", "org.apache.commons.collections4" ], [ "Unmodifiable", "org.apache.commons.collections4" ], [ "Get", "org.apache.commons.collections4" ], [ "Trie", "org.apache.commons.collections4" ], [ "MultiMap", "org.apache.commons.collections4" ], [ "KeyValue", "org.apache.commons.collections4" ], [ "IteratorChain", "org.apache.commons.collections4.iterators" ], [ "EmptyListIterator", "org.apache.commons.collections4.iterators" ], [ "UnmodifiableOrderedMapIterator", "org.apache.commons.collections4.iterators" ], [ "AbstractListIteratorDecorator", "org.apache.commons.collections4.iterators" ], [ "ZippingIterator", "org.apache.commons.collections4.iterators" ], [ "UnmodifiableIterator", "org.apache.commons.collections4.iterators" ], [ "CollatingIterator", "org.apache.commons.collections4.iterators" ], [ "UniqueFilterIterator", "org.apache.commons.collections4.iterators" ], [ "ReverseListIterator", "org.apache.commons.collections4.iterators" ], [ "BoundedIterator", "org.apache.commons.collections4.iterators" ], [ "AbstractIteratorDecorator", "org.apache.commons.collections4.iterators" ], [ "TransformIterator", "org.apache.commons.collections4.iterators" ], [ "AbstractEmptyIterator", "org.apache.commons.collections4.iterators" ], [ "NodeListIterator", "org.apache.commons.collections4.iterators" ], [ "ArrayListIterator", "org.apache.commons.collections4.iterators" ], [ "LazyIteratorChain", "org.apache.commons.collections4.iterators" ], [ "LoopingListIterator", "org.apache.commons.collections4.iterators" ], [ "PeekingIterator", "org.apache.commons.collections4.iterators" ], [ "ObjectGraphIterator", "org.apache.commons.collections4.iterators" ], [ "ArrayIterator", "org.apache.commons.collections4.iterators" ], [ "PermutationIterator", "org.apache.commons.collections4.iterators" ], [ "SingletonListIterator", "org.apache.commons.collections4.iterators" ], [ "EmptyMapIterator", "org.apache.commons.collections4.iterators" ], [ "ObjectArrayIterator", "org.apache.commons.collections4.iterators" ], [ "EnumerationIterator", "org.apache.commons.collections4.iterators" ], [ "IteratorIterable", "org.apache.commons.collections4.iterators" ], [ "AbstractEmptyMapIterator", "org.apache.commons.collections4.iterators" ], [ "LoopingIterator", "org.apache.commons.collections4.iterators" ], [ "IteratorEnumeration", "org.apache.commons.collections4.iterators" ], [ "SingletonIterator", "org.apache.commons.collections4.iterators" ], [ "ListIteratorWrapper", "org.apache.commons.collections4.iterators" ], [ "SkippingIterator", "org.apache.commons.collections4.iterators" ], [ "EmptyOrderedIterator", "org.apache.commons.collections4.iterators" ], [ "AbstractMapIteratorDecorator", "org.apache.commons.collections4.iterators" ], [ "ObjectArrayListIterator", "org.apache.commons.collections4.iterators" ], [ "UnmodifiableListIterator", "org.apache.commons.collections4.iterators" ], [ "EmptyOrderedMapIterator", "org.apache.commons.collections4.iterators" ], [ "UnmodifiableMapIterator", "org.apache.commons.collections4.iterators" ], [ "EmptyIterator", "org.apache.commons.collections4.iterators" ], [ "EntrySetMapIterator", "org.apache.commons.collections4.iterators" ], [ "PushbackIterator", "org.apache.commons.collections4.iterators" ], [ "FilterIterator", "org.apache.commons.collections4.iterators" ], [ "AbstractUntypedIteratorDecorator", "org.apache.commons.collections4.iterators" ], [ "AbstractOrderedMapIteratorDecorator", "org.apache.commons.collections4.iterators" ], [ "FilterListIterator", "org.apache.commons.collections4.iterators" ], [ "SplitMapUtils", "org.apache.commons.collections4" ], [ "BoundedMap", "org.apache.commons.collections4" ] ],
  "tokensProjectClassesNonPrivateStaticNonVoidMethods" : [ [ "emptyIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> emptyIterator()" ], [ "emptyListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> emptyListIterator()" ], [ "emptyOrderedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> OrderedIterator<E> emptyOrderedIterator()" ], [ "emptyMapIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <K, V> MapIterator<K, V> emptyMapIterator()" ], [ "emptyOrderedMapIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <K, V> OrderedMapIterator<K, V> emptyOrderedMapIterator()" ], [ "singletonIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> singletonIterator(final E object)" ], [ "singletonListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ListIterator<E> singletonListIterator(final E object)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final E... array)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final Object array)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final E[] array, final int start)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final Object array, final int start)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final E[] array, final int start, final int end)" ], [ "arrayIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> arrayIterator(final Object array, final int start, final int end)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final E... array)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final Object array)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final E[] array, final int start)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final Object array, final int start)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final E[] array, final int start, final int end)" ], [ "arrayListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> arrayListIterator(final Object array, final int start, final int end)" ], [ "boundedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> BoundedIterator<E> boundedIterator(final Iterator<? extends E> iterator, long max)" ], [ "boundedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> BoundedIterator<E> boundedIterator(final Iterator<? extends E> iterator, long offset, long max)" ], [ "unmodifiableIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> unmodifiableIterator(final Iterator<E> iterator)" ], [ "unmodifiableListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ListIterator<E> unmodifiableListIterator(final ListIterator<E> listIterator)" ], [ "unmodifiableMapIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <K, V> MapIterator<K, V> unmodifiableMapIterator(final MapIterator<K, V> mapIterator)" ], [ "chainedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> chainedIterator(final Iterator<? extends E> iterator1, final Iterator<? extends E> iterator2)" ], [ "chainedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> chainedIterator(final Iterator<? extends E>... iterators)" ], [ "chainedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> chainedIterator(final Collection<Iterator<? extends E>> iterators)" ], [ "collatedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> collatedIterator(final Comparator<? super E> comparator, final Iterator<? extends E> iterator1, final Iterator<? extends E> iterator2)" ], [ "collatedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> collatedIterator(final Comparator<? super E> comparator, final Iterator<? extends E>... iterators)" ], [ "collatedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> collatedIterator(final Comparator<? super E> comparator, final Collection<Iterator<? extends E>> iterators)" ], [ "objectGraphIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> objectGraphIterator(final E root, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <I, O> Iterator<O> transformedIterator(final Iterator<? extends I> iterator, final Transformer<? super I, ? extends O> transform)" ], [ "filteredIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> filteredIterator(final Iterator<? extends E> iterator, final Predicate<? super E> predicate)" ], [ "filteredListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ListIterator<E> filteredListIterator(final ListIterator<? extends E> listIterator, final Predicate<? super E> predicate)" ], [ "loopingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableIterator<E> loopingIterator(final Collection<? extends E> coll)" ], [ "loopingListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ResettableListIterator<E> loopingListIterator(final List<E> list)" ], [ "nodeListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static NodeListIterator nodeListIterator(final NodeList nodeList)" ], [ "nodeListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static NodeListIterator nodeListIterator(final Node node)" ], [ "peekingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> peekingIterator(final Iterator<? extends E> iterator)" ], [ "pushbackIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> pushbackIterator(final Iterator<? extends E> iterator)" ], [ "skippingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> SkippingIterator<E> skippingIterator(final Iterator<E> iterator, long offset)" ], [ "zippingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ZippingIterator<E> zippingIterator(final Iterator<? extends E> a, final Iterator<? extends E> b)" ], [ "zippingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ZippingIterator<E> zippingIterator(final Iterator<? extends E> a, final Iterator<? extends E> b, final Iterator<? extends E> c)" ], [ "zippingIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ZippingIterator<E> zippingIterator(final Iterator<? extends E>... iterators)" ], [ "asIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> asIterator(final Enumeration<? extends E> enumeration)" ], [ "asIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterator<E> asIterator(final Enumeration<? extends E> enumeration, final Collection<? super E> removeCollection)" ], [ "asEnumeration", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Enumeration<E> asEnumeration(final Iterator<? extends E> iterator)" ], [ "asIterable", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterable<E> asIterable(final Iterator<? extends E> iterator)" ], [ "asMultipleUseIterable", "org.apache.commons.collections4", "IteratorUtils", "public static <E> Iterable<E> asMultipleUseIterable(final Iterator<? extends E> iterator)" ], [ "toListIterator", "org.apache.commons.collections4", "IteratorUtils", "public static <E> ListIterator<E> toListIterator(final Iterator<? extends E> iterator)" ], [ "toArray", "org.apache.commons.collections4", "IteratorUtils", "public static Object[] toArray(final Iterator<?> iterator)" ], [ "toArray", "org.apache.commons.collections4", "IteratorUtils", "public static <E> E[] toArray(final Iterator<? extends E> iterator, final Class<E> arrayClass)" ], [ "toList", "org.apache.commons.collections4", "IteratorUtils", "public static <E> List<E> toList(final Iterator<? extends E> iterator)" ], [ "toList", "org.apache.commons.collections4", "IteratorUtils", "public static <E> List<E> toList(final Iterator<? extends E> iterator, final int estimatedSize)" ], [ "getIterator", "org.apache.commons.collections4", "IteratorUtils", "public static Iterator<?> getIterator(final Object obj)" ], [ "forEachButLast", "org.apache.commons.collections4", "IteratorUtils", "public static <E> E forEachButLast(final Iterator<E> iterator, final Closure<? super E> closure)" ], [ "find", "org.apache.commons.collections4", "IteratorUtils", "public static <E> E find(final Iterator<E> iterator, final Predicate<? super E> predicate)" ], [ "indexOf", "org.apache.commons.collections4", "IteratorUtils", "public static <E> int indexOf(final Iterator<E> iterator, final Predicate<? super E> predicate)" ], [ "matchesAny", "org.apache.commons.collections4", "IteratorUtils", "public static <E> boolean matchesAny(final Iterator<E> iterator, final Predicate<? super E> predicate)" ], [ "matchesAll", "org.apache.commons.collections4", "IteratorUtils", "public static <E> boolean matchesAll(final Iterator<E> iterator, final Predicate<? super E> predicate)" ], [ "isEmpty", "org.apache.commons.collections4", "IteratorUtils", "public static boolean isEmpty(final Iterator<?> iterator)" ], [ "contains", "org.apache.commons.collections4", "IteratorUtils", "public static <E> boolean contains(final Iterator<E> iterator, final Object object)" ], [ "get", "org.apache.commons.collections4", "IteratorUtils", "public static <E> E get(final Iterator<E> iterator, final int index)" ], [ "size", "org.apache.commons.collections4", "IteratorUtils", "public static int size(final Iterator<?> iterator)" ], [ "toString", "org.apache.commons.collections4", "IteratorUtils", "public static <E> String toString(final Iterator<E> iterator)" ], [ "toString", "org.apache.commons.collections4", "IteratorUtils", "public static <E> String toString(final Iterator<E> iterator, final Transformer<? super E, String> transformer)" ], [ "toString", "org.apache.commons.collections4", "IteratorUtils", "public static <E> String toString(final Iterator<E> iterator, final Transformer<? super E, String> transformer, final String delimiter, final String prefix, final String suffix)" ], [ "naturalComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E extends Comparable<? super E>> Comparator<E> naturalComparator()" ], [ "chainedComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> Comparator<E> chainedComparator(final Comparator<E>... comparators)" ], [ "chainedComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> Comparator<E> chainedComparator(final Collection<Comparator<E>> comparators)" ], [ "reversedComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> Comparator<E> reversedComparator(final Comparator<E> comparator)" ], [ "booleanComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static Comparator<Boolean> booleanComparator(final boolean trueFirst)" ], [ "nullLowComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> Comparator<E> nullLowComparator(Comparator<E> comparator)" ], [ "nullHighComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> Comparator<E> nullHighComparator(Comparator<E> comparator)" ], [ "transformedComparator", "org.apache.commons.collections4", "ComparatorUtils", "public static <I, O> Comparator<I> transformedComparator(Comparator<O> comparator, final Transformer<? super I, ? extends O> transformer)" ], [ "min", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> E min(final E o1, final E o2, Comparator<E> comparator)" ], [ "max", "org.apache.commons.collections4", "ComparatorUtils", "public static <E> E max(final E o1, final E o2, Comparator<E> comparator)" ], [ "unmodifiableBidiMap", "org.apache.commons.collections4.bidimap", "UnmodifiableBidiMap", "public static <K, V> BidiMap<K, V> unmodifiableBidiMap(final BidiMap<? extends K, ? extends V> map)" ], [ "unmodifiableOrderedBidiMap", "org.apache.commons.collections4.bidimap", "UnmodifiableOrderedBidiMap", "public static <K, V> OrderedBidiMap<K, V> unmodifiableOrderedBidiMap(final OrderedBidiMap<? extends K, ? extends V> map)" ], [ "unmodifiableSortedBidiMap", "org.apache.commons.collections4.bidimap", "UnmodifiableSortedBidiMap", "public static <K, V> SortedBidiMap<K, V> unmodifiableSortedBidiMap(final SortedBidiMap<K, ? extends V> map)" ], [ "emptyMultiValuedMap", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> MultiValuedMap<K, V> emptyMultiValuedMap()" ], [ "emptyIfNull", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> MultiValuedMap<K, V> emptyIfNull(final MultiValuedMap<K, V> map)" ], [ "isEmpty", "org.apache.commons.collections4", "MultiMapUtils", "public static boolean isEmpty(final MultiValuedMap<?, ?> map)" ], [ "getCollection", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> Collection<V> getCollection(final MultiValuedMap<K, V> map, final K key)" ], [ "getValuesAsList", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> List<V> getValuesAsList(final MultiValuedMap<K, V> map, final K key)" ], [ "getValuesAsSet", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> Set<V> getValuesAsSet(final MultiValuedMap<K, V> map, final K key)" ], [ "getValuesAsBag", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> Bag<V> getValuesAsBag(final MultiValuedMap<K, V> map, final K key)" ], [ "newListValuedHashMap", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> ListValuedMap<K, V> newListValuedHashMap()" ], [ "newSetValuedHashMap", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> SetValuedMap<K, V> newSetValuedHashMap()" ], [ "unmodifiableMultiValuedMap", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> MultiValuedMap<K, V> unmodifiableMultiValuedMap(final MultiValuedMap<? extends K, ? extends V> map)" ], [ "transformedMultiValuedMap", "org.apache.commons.collections4", "MultiMapUtils", "public static <K, V> MultiValuedMap<K, V> transformedMultiValuedMap(final MultiValuedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "unmodifiableBoundedCollection", "org.apache.commons.collections4.collection", "UnmodifiableBoundedCollection", "public static <E> BoundedCollection<E> unmodifiableBoundedCollection(final BoundedCollection<? extends E> coll)" ], [ "unmodifiableBoundedCollection", "org.apache.commons.collections4.collection", "UnmodifiableBoundedCollection", "public static <E> BoundedCollection<E> unmodifiableBoundedCollection(Collection<? extends E> coll)" ], [ "transformingCollection", "org.apache.commons.collections4.collection", "TransformedCollection", "public static <E> TransformedCollection<E> transformingCollection(final Collection<E> coll, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedCollection", "org.apache.commons.collections4.collection", "TransformedCollection", "public static <E> TransformedCollection<E> transformedCollection(final Collection<E> collection, final Transformer<? super E, ? extends E> transformer)" ], [ "builder", "org.apache.commons.collections4.collection", "PredicatedCollection", "public static <E> Builder<E> builder(final Predicate<? super E> predicate)" ], [ "notNullBuilder", "org.apache.commons.collections4.collection", "PredicatedCollection", "public static <E> Builder<E> notNullBuilder()" ], [ "predicatedCollection", "org.apache.commons.collections4.collection", "PredicatedCollection", "public static <T> PredicatedCollection<T> predicatedCollection(final Collection<T> coll, final Predicate<? super T> predicate)" ], [ "uniqueIndexedCollection", "org.apache.commons.collections4.collection", "IndexedCollection", "public static <K, C> IndexedCollection<K, C> uniqueIndexedCollection(final Collection<C> coll, final Transformer<C, K> keyTransformer)" ], [ "nonUniqueIndexedCollection", "org.apache.commons.collections4.collection", "IndexedCollection", "public static <K, C> IndexedCollection<K, C> nonUniqueIndexedCollection(final Collection<C> coll, final Transformer<C, K> keyTransformer)" ], [ "synchronizedCollection", "org.apache.commons.collections4.collection", "SynchronizedCollection", "public static <T> SynchronizedCollection<T> synchronizedCollection(final Collection<T> coll)" ], [ "unmodifiableCollection", "org.apache.commons.collections4.collection", "UnmodifiableCollection", "public static <T> Collection<T> unmodifiableCollection(final Collection<? extends T> coll)" ], [ "exceptionFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> exceptionFactory()" ], [ "nullFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> nullFactory()" ], [ "constantFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> constantFactory(final T constantToReturn)" ], [ "prototypeFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> prototypeFactory(final T prototype)" ], [ "instantiateFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> instantiateFactory(final Class<T> classToInstantiate)" ], [ "instantiateFactory", "org.apache.commons.collections4", "FactoryUtils", "public static <T> Factory<T> instantiateFactory(final Class<T> classToInstantiate, final Class<?>[] paramTypes, final Object[] args)" ], [ "emptyIfNull", "org.apache.commons.collections4", "ListUtils", "public static <T> List<T> emptyIfNull(final List<T> list)" ], [ "defaultIfNull", "org.apache.commons.collections4", "ListUtils", "public static <T> List<T> defaultIfNull(final List<T> list, final List<T> defaultList)" ], [ "intersection", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> intersection(final List<? extends E> list1, final List<? extends E> list2)" ], [ "subtract", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> subtract(final List<E> list1, final List<? extends E> list2)" ], [ "sum", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> sum(final List<? extends E> list1, final List<? extends E> list2)" ], [ "union", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> union(final List<? extends E> list1, final List<? extends E> list2)" ], [ "select", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> select(final Collection<? extends E> inputCollection, final Predicate<? super E> predicate)" ], [ "selectRejected", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> selectRejected(final Collection<? extends E> inputCollection, final Predicate<? super E> predicate)" ], [ "isEqualList", "org.apache.commons.collections4", "ListUtils", "public static boolean isEqualList(final Collection<?> list1, final Collection<?> list2)" ], [ "hashCodeForList", "org.apache.commons.collections4", "ListUtils", "public static int hashCodeForList(final Collection<?> list)" ], [ "retainAll", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> retainAll(final Collection<E> collection, final Collection<?> retain)" ], [ "removeAll", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> removeAll(final Collection<E> collection, final Collection<?> remove)" ], [ "synchronizedList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> synchronizedList(final List<E> list)" ], [ "unmodifiableList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> unmodifiableList(final List<? extends E> list)" ], [ "predicatedList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> predicatedList(final List<E> list, final Predicate<E> predicate)" ], [ "transformedList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> transformedList(final List<E> list, final Transformer<? super E, ? extends E> transformer)" ], [ "lazyList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> lazyList(final List<E> list, final Factory<? extends E> factory)" ], [ "fixedSizeList", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> fixedSizeList(final List<E> list)" ], [ "indexOf", "org.apache.commons.collections4", "ListUtils", "public static <E> int indexOf(final List<E> list, final Predicate<E> predicate)" ], [ "longestCommonSubsequence", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> longestCommonSubsequence(final List<E> a, final List<E> b)" ], [ "longestCommonSubsequence", "org.apache.commons.collections4", "ListUtils", "public static <E> List<E> longestCommonSubsequence(final List<E> a, final List<E> b, final Equator<? super E> equator)" ], [ "longestCommonSubsequence", "org.apache.commons.collections4", "ListUtils", "public static String longestCommonSubsequence(final CharSequence a, final CharSequence b)" ], [ "partition", "org.apache.commons.collections4", "ListUtils", "public static <T> List<List<T>> partition(final List<T> list, final int size)" ], [ "getObject", "org.apache.commons.collections4", "MapUtils", "public static <K, V> V getObject(final Map<? super K, V> map, final K key)" ], [ "getString", "org.apache.commons.collections4", "MapUtils", "public static <K> String getString(final Map<? super K, ?> map, final K key)" ], [ "getBoolean", "org.apache.commons.collections4", "MapUtils", "public static <K> Boolean getBoolean(final Map<? super K, ?> map, final K key)" ], [ "getNumber", "org.apache.commons.collections4", "MapUtils", "public static <K> Number getNumber(final Map<? super K, ?> map, final K key)" ], [ "getByte", "org.apache.commons.collections4", "MapUtils", "public static <K> Byte getByte(final Map<? super K, ?> map, final K key)" ], [ "getShort", "org.apache.commons.collections4", "MapUtils", "public static <K> Short getShort(final Map<? super K, ?> map, final K key)" ], [ "getInteger", "org.apache.commons.collections4", "MapUtils", "public static <K> Integer getInteger(final Map<? super K, ?> map, final K key)" ], [ "getLong", "org.apache.commons.collections4", "MapUtils", "public static <K> Long getLong(final Map<? super K, ?> map, final K key)" ], [ "getFloat", "org.apache.commons.collections4", "MapUtils", "public static <K> Float getFloat(final Map<? super K, ?> map, final K key)" ], [ "getDouble", "org.apache.commons.collections4", "MapUtils", "public static <K> Double getDouble(final Map<? super K, ?> map, final K key)" ], [ "getMap", "org.apache.commons.collections4", "MapUtils", "public static <K> Map<?, ?> getMap(final Map<? super K, ?> map, final K key)" ], [ "getObject", "org.apache.commons.collections4", "MapUtils", "public static <K, V> V getObject(final Map<K, V> map, final K key, final V defaultValue)" ], [ "getString", "org.apache.commons.collections4", "MapUtils", "public static <K> String getString(final Map<? super K, ?> map, final K key, final String defaultValue)" ], [ "getBoolean", "org.apache.commons.collections4", "MapUtils", "public static <K> Boolean getBoolean(final Map<? super K, ?> map, final K key, final Boolean defaultValue)" ], [ "getNumber", "org.apache.commons.collections4", "MapUtils", "public static <K> Number getNumber(final Map<? super K, ?> map, final K key, final Number defaultValue)" ], [ "getByte", "org.apache.commons.collections4", "MapUtils", "public static <K> Byte getByte(final Map<? super K, ?> map, final K key, final Byte defaultValue)" ], [ "getShort", "org.apache.commons.collections4", "MapUtils", "public static <K> Short getShort(final Map<? super K, ?> map, final K key, final Short defaultValue)" ], [ "getInteger", "org.apache.commons.collections4", "MapUtils", "public static <K> Integer getInteger(final Map<? super K, ?> map, final K key, final Integer defaultValue)" ], [ "getLong", "org.apache.commons.collections4", "MapUtils", "public static <K> Long getLong(final Map<? super K, ?> map, final K key, final Long defaultValue)" ], [ "getFloat", "org.apache.commons.collections4", "MapUtils", "public static <K> Float getFloat(final Map<? super K, ?> map, final K key, final Float defaultValue)" ], [ "getDouble", "org.apache.commons.collections4", "MapUtils", "public static <K> Double getDouble(final Map<? super K, ?> map, final K key, final Double defaultValue)" ], [ "getMap", "org.apache.commons.collections4", "MapUtils", "public static <K> Map<?, ?> getMap(final Map<? super K, ?> map, final K key, final Map<?, ?> defaultValue)" ], [ "getBooleanValue", "org.apache.commons.collections4", "MapUtils", "public static <K> boolean getBooleanValue(final Map<? super K, ?> map, final K key)" ], [ "getByteValue", "org.apache.commons.collections4", "MapUtils", "public static <K> byte getByteValue(final Map<? super K, ?> map, final K key)" ], [ "getShortValue", "org.apache.commons.collections4", "MapUtils", "public static <K> short getShortValue(final Map<? super K, ?> map, final K key)" ], [ "getIntValue", "org.apache.commons.collections4", "MapUtils", "public static <K> int getIntValue(final Map<? super K, ?> map, final K key)" ], [ "getLongValue", "org.apache.commons.collections4", "MapUtils", "public static <K> long getLongValue(final Map<? super K, ?> map, final K key)" ], [ "getFloatValue", "org.apache.commons.collections4", "MapUtils", "public static <K> float getFloatValue(final Map<? super K, ?> map, final K key)" ], [ "getDoubleValue", "org.apache.commons.collections4", "MapUtils", "public static <K> double getDoubleValue(final Map<? super K, ?> map, final K key)" ], [ "getBooleanValue", "org.apache.commons.collections4", "MapUtils", "public static <K> boolean getBooleanValue(final Map<? super K, ?> map, final K key, final boolean defaultValue)" ], [ "getByteValue", "org.apache.commons.collections4", "MapUtils", "public static <K> byte getByteValue(final Map<? super K, ?> map, final K key, final byte defaultValue)" ], [ "getShortValue", "org.apache.commons.collections4", "MapUtils", "public static <K> short getShortValue(final Map<? super K, ?> map, final K key, final short defaultValue)" ], [ "getIntValue", "org.apache.commons.collections4", "MapUtils", "public static <K> int getIntValue(final Map<? super K, ?> map, final K key, final int defaultValue)" ], [ "getLongValue", "org.apache.commons.collections4", "MapUtils", "public static <K> long getLongValue(final Map<? super K, ?> map, final K key, final long defaultValue)" ], [ "getFloatValue", "org.apache.commons.collections4", "MapUtils", "public static <K> float getFloatValue(final Map<? super K, ?> map, final K key, final float defaultValue)" ], [ "getDoubleValue", "org.apache.commons.collections4", "MapUtils", "public static <K> double getDoubleValue(final Map<? super K, ?> map, final K key, final double defaultValue)" ], [ "toProperties", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Properties toProperties(final Map<K, V> map)" ], [ "toMap", "org.apache.commons.collections4", "MapUtils", "public static Map<String, Object> toMap(final ResourceBundle resourceBundle)" ], [ "invertMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Map<V, K> invertMap(final Map<K, V> map)" ], [ "putAll", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Map<K, V> putAll(final Map<K, V> map, final Object[] array)" ], [ "emptyIfNull", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Map<K, V> emptyIfNull(final Map<K, V> map)" ], [ "isEmpty", "org.apache.commons.collections4", "MapUtils", "public static boolean isEmpty(final Map<?, ?> map)" ], [ "isNotEmpty", "org.apache.commons.collections4", "MapUtils", "public static boolean isNotEmpty(final Map<?, ?> map)" ], [ "synchronizedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Map<K, V> synchronizedMap(final Map<K, V> map)" ], [ "unmodifiableMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> Map<K, V> unmodifiableMap(final Map<? extends K, ? extends V> map)" ], [ "predicatedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> predicatedMap(final Map<K, V> map, final Predicate<? super K> keyPred, final Predicate<? super V> valuePred)" ], [ "transformedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> transformedMap(final Map<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "fixedSizeMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> fixedSizeMap(final Map<K, V> map)" ], [ "lazyMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> lazyMap(final Map<K, V> map, final Factory<? extends V> factory)" ], [ "lazyMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> lazyMap(final Map<K, V> map, final Transformer<? super K, ? extends V> transformerFactory)" ], [ "orderedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> OrderedMap<K, V> orderedMap(final Map<K, V> map)" ], [ "multiValueMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> MultiValueMap<K, V> multiValueMap(final Map<K, ? super Collection<V>> map)" ], [ "multiValueMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V, C extends Collection<V>> MultiValueMap<K, V> multiValueMap(final Map<K, C> map, final Class<C> collectionClass)" ], [ "multiValueMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V, C extends Collection<V>> MultiValueMap<K, V> multiValueMap(final Map<K, C> map, final Factory<C> collectionFactory)" ], [ "synchronizedSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> synchronizedSortedMap(final SortedMap<K, V> map)" ], [ "unmodifiableSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> unmodifiableSortedMap(final SortedMap<K, ? extends V> map)" ], [ "predicatedSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> predicatedSortedMap(final SortedMap<K, V> map, final Predicate<? super K> keyPred, final Predicate<? super V> valuePred)" ], [ "transformedSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> transformedSortedMap(final SortedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "fixedSizeSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> fixedSizeSortedMap(final SortedMap<K, V> map)" ], [ "lazySortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> lazySortedMap(final SortedMap<K, V> map, final Factory<? extends V> factory)" ], [ "lazySortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> SortedMap<K, V> lazySortedMap(final SortedMap<K, V> map, final Transformer<? super K, ? extends V> transformerFactory)" ], [ "iterableMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableMap<K, V> iterableMap(final Map<K, V> map)" ], [ "iterableSortedMap", "org.apache.commons.collections4", "MapUtils", "public static <K, V> IterableSortedMap<K, V> iterableSortedMap(final SortedMap<K, V> sortedMap)" ], [ "defaultEquator", "org.apache.commons.collections4.functors", "DefaultEquator", "public static <T> DefaultEquator<T> defaultEquator()" ], [ "stringValueTransformer", "org.apache.commons.collections4.functors", "StringValueTransformer", "public static <T> Transformer<T, String> stringValueTransformer()" ], [ "ifTransformer", "org.apache.commons.collections4.functors", "IfTransformer", "public static <I, O> Transformer<I, O> ifTransformer(final Predicate<? super I> predicate, final Transformer<? super I, ? extends O> trueTransformer, final Transformer<? super I, ? extends O> falseTransformer)" ], [ "ifTransformer", "org.apache.commons.collections4.functors", "IfTransformer", "public static <T> Transformer<T, T> ifTransformer(final Predicate<? super T> predicate, final Transformer<? super T, ? extends T> trueTransformer)" ], [ "identityPredicate", "org.apache.commons.collections4.functors", "IdentityPredicate", "public static <T> Predicate<T> identityPredicate(final T object)" ], [ "exceptionClosure", "org.apache.commons.collections4.functors", "ExceptionClosure", "public static <E> Closure<E> exceptionClosure()" ], [ "nopClosure", "org.apache.commons.collections4.functors", "NOPClosure", "public static <E> Closure<E> nopClosure()" ], [ "closureTransformer", "org.apache.commons.collections4.functors", "ClosureTransformer", "public static <T> Transformer<T, T> closureTransformer(final Closure<? super T> closure)" ], [ "copy", "org.apache.commons.collections4.functors", "FunctorUtils", "static <T> Predicate<T>[] copy(final Predicate<? super T>... predicates)" ], [ "coerce", "org.apache.commons.collections4.functors", "FunctorUtils", "static <T> Predicate<T> coerce(final Predicate<? super T> predicate)" ], [ "validate", "org.apache.commons.collections4.functors", "FunctorUtils", "static <T> Predicate<? super T>[] validate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "copy", "org.apache.commons.collections4.functors", "FunctorUtils", "static <E> Closure<E>[] copy(final Closure<? super E>... closures)" ], [ "coerce", "org.apache.commons.collections4.functors", "FunctorUtils", "static <T> Closure<T> coerce(final Closure<? super T> closure)" ], [ "copy", "org.apache.commons.collections4.functors", "FunctorUtils", "static <I, O> Transformer<I, O>[] copy(final Transformer<? super I, ? extends O>... transformers)" ], [ "coerce", "org.apache.commons.collections4.functors", "FunctorUtils", "static <I, O> Transformer<I, O> coerce(final Transformer<? super I, ? extends O> transformer)" ], [ "transformerPredicate", "org.apache.commons.collections4.functors", "TransformerPredicate", "public static <T> Predicate<T> transformerPredicate(final Transformer<? super T, Boolean> transformer)" ], [ "nullPredicate", "org.apache.commons.collections4.functors", "NullPredicate", "public static <T> Predicate<T> nullPredicate()" ], [ "nullTransformer", "org.apache.commons.collections4.functors", "ConstantTransformer", "public static <I, O> Transformer<I, O> nullTransformer()" ], [ "constantTransformer", "org.apache.commons.collections4.functors", "ConstantTransformer", "public static <I, O> Transformer<I, O> constantTransformer(final O constantToReturn)" ], [ "predicateTransformer", "org.apache.commons.collections4.functors", "PredicateTransformer", "public static <T> Transformer<T, Boolean> predicateTransformer(final Predicate<? super T> predicate)" ], [ "whileClosure", "org.apache.commons.collections4.functors", "WhileClosure", "public static <E> Closure<E> whileClosure(final Predicate<? super E> predicate, final Closure<? super E> closure, final boolean doLoop)" ], [ "forClosure", "org.apache.commons.collections4.functors", "ForClosure", "public static <E> Closure<E> forClosure(final int count, final Closure<? super E> closure)" ], [ "nullIsTruePredicate", "org.apache.commons.collections4.functors", "NullIsTruePredicate", "public static <T> Predicate<T> nullIsTruePredicate(final Predicate<? super T> predicate)" ], [ "transformedPredicate", "org.apache.commons.collections4.functors", "TransformedPredicate", "public static <T> Predicate<T> transformedPredicate(final Transformer<? super T, ? extends T> transformer, final Predicate<? super T> predicate)" ], [ "nonePredicate", "org.apache.commons.collections4.functors", "NonePredicate", "public static <T> Predicate<T> nonePredicate(final Predicate<? super T>... predicates)" ], [ "nonePredicate", "org.apache.commons.collections4.functors", "NonePredicate", "public static <T> Predicate<T> nonePredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "exceptionTransformer", "org.apache.commons.collections4.functors", "ExceptionTransformer", "public static <I, O> Transformer<I, O> exceptionTransformer()" ], [ "switchTransformer", "org.apache.commons.collections4.functors", "SwitchTransformer", "public static <I, O> Transformer<I, O> switchTransformer(final Predicate<? super I>[] predicates, final Transformer<? super I, ? extends O>[] transformers, final Transformer<? super I, ? extends O> defaultTransformer)" ], [ "switchTransformer", "org.apache.commons.collections4.functors", "SwitchTransformer", "public static <I, O> Transformer<I, O> switchTransformer(final Map<? extends Predicate<? super I>, ? extends Transformer<? super I, ? extends O>> map)" ], [ "transformerClosure", "org.apache.commons.collections4.functors", "TransformerClosure", "public static <E> Closure<E> transformerClosure(final Transformer<? super E, ?> transformer)" ], [ "orPredicate", "org.apache.commons.collections4.functors", "OrPredicate", "public static <T> Predicate<T> orPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "nopTransformer", "org.apache.commons.collections4.functors", "NOPTransformer", "public static <T> Transformer<T, T> nopTransformer()" ], [ "mapTransformer", "org.apache.commons.collections4.functors", "MapTransformer", "public static <I, O> Transformer<I, O> mapTransformer(final Map<? super I, ? extends O> map)" ], [ "exceptionFactory", "org.apache.commons.collections4.functors", "ExceptionFactory", "public static <T> Factory<T> exceptionFactory()" ], [ "chainedClosure", "org.apache.commons.collections4.functors", "ChainedClosure", "public static <E> Closure<E> chainedClosure(final Closure<? super E>... closures)" ], [ "chainedClosure", "org.apache.commons.collections4.functors", "ChainedClosure", "public static <E> Closure<E> chainedClosure(final Collection<? extends Closure<? super E>> closures)" ], [ "andPredicate", "org.apache.commons.collections4.functors", "AndPredicate", "public static <T> Predicate<T> andPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "prototypeFactory", "org.apache.commons.collections4.functors", "PrototypeFactory", "public static <T> Factory<T> prototypeFactory(final T prototype)" ], [ "exceptionPredicate", "org.apache.commons.collections4.functors", "ExceptionPredicate", "public static <T> Predicate<T> exceptionPredicate()" ], [ "instanceOfPredicate", "org.apache.commons.collections4.functors", "InstanceofPredicate", "public static Predicate<Object> instanceOfPredicate(final Class<?> type)" ], [ "invokerTransformer", "org.apache.commons.collections4.functors", "InvokerTransformer", "public static <I, O> Transformer<I, O> invokerTransformer(final String methodName)" ], [ "invokerTransformer", "org.apache.commons.collections4.functors", "InvokerTransformer", "public static <I, O> Transformer<I, O> invokerTransformer(final String methodName, final Class<?>[] paramTypes, final Object[] args)" ], [ "falsePredicate", "org.apache.commons.collections4.functors", "FalsePredicate", "public static <T> Predicate<T> falsePredicate()" ], [ "cloneTransformer", "org.apache.commons.collections4.functors", "CloneTransformer", "public static <T> Transformer<T, T> cloneTransformer()" ], [ "notPredicate", "org.apache.commons.collections4.functors", "NotPredicate", "public static <T> Predicate<T> notPredicate(final Predicate<? super T> predicate)" ], [ "constantFactory", "org.apache.commons.collections4.functors", "ConstantFactory", "public static <T> Factory<T> constantFactory(final T constantToReturn)" ], [ "chainedTransformer", "org.apache.commons.collections4.functors", "ChainedTransformer", "public static <T> Transformer<T, T> chainedTransformer(final Transformer<? super T, ? extends T>... transformers)" ], [ "chainedTransformer", "org.apache.commons.collections4.functors", "ChainedTransformer", "public static <T> Transformer<T, T> chainedTransformer(final Collection<? extends Transformer<? super T, ? extends T>> transformers)" ], [ "comparatorPredicate", "org.apache.commons.collections4.functors", "ComparatorPredicate", "public static <T> Predicate<T> comparatorPredicate(final T object, final Comparator<T> comparator)" ], [ "comparatorPredicate", "org.apache.commons.collections4.functors", "ComparatorPredicate", "public static <T> Predicate<T> comparatorPredicate(final T object, final Comparator<T> comparator, final Criterion criterion)" ], [ "allPredicate", "org.apache.commons.collections4.functors", "AllPredicate", "public static <T> Predicate<T> allPredicate(final Predicate<? super T>... predicates)" ], [ "allPredicate", "org.apache.commons.collections4.functors", "AllPredicate", "public static <T> Predicate<T> allPredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "nullIsFalsePredicate", "org.apache.commons.collections4.functors", "NullIsFalsePredicate", "public static <T> Predicate<T> nullIsFalsePredicate(final Predicate<? super T> predicate)" ], [ "nullIsExceptionPredicate", "org.apache.commons.collections4.functors", "NullIsExceptionPredicate", "public static <T> Predicate<T> nullIsExceptionPredicate(final Predicate<? super T> predicate)" ], [ "anyPredicate", "org.apache.commons.collections4.functors", "AnyPredicate", "public static <T> Predicate<T> anyPredicate(final Predicate<? super T>... predicates)" ], [ "anyPredicate", "org.apache.commons.collections4.functors", "AnyPredicate", "public static <T> Predicate<T> anyPredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "truePredicate", "org.apache.commons.collections4.functors", "TruePredicate", "public static <T> Predicate<T> truePredicate()" ], [ "factoryTransformer", "org.apache.commons.collections4.functors", "FactoryTransformer", "public static <I, O> Transformer<I, O> factoryTransformer(final Factory<? extends O> factory)" ], [ "notNullPredicate", "org.apache.commons.collections4.functors", "NotNullPredicate", "public static <T> Predicate<T> notNullPredicate()" ], [ "switchClosure", "org.apache.commons.collections4.functors", "SwitchClosure", "public static <E> Closure<E> switchClosure(final Predicate<? super E>[] predicates, final Closure<? super E>[] closures, final Closure<? super E> defaultClosure)" ], [ "switchClosure", "org.apache.commons.collections4.functors", "SwitchClosure", "public static <E> Closure<E> switchClosure(final Map<Predicate<E>, Closure<E>> predicatesAndClosures)" ], [ "uniquePredicate", "org.apache.commons.collections4.functors", "UniquePredicate", "public static <T> Predicate<T> uniquePredicate()" ], [ "instantiateTransformer", "org.apache.commons.collections4.functors", "InstantiateTransformer", "public static <T> Transformer<Class<? extends T>, T> instantiateTransformer()" ], [ "instantiateTransformer", "org.apache.commons.collections4.functors", "InstantiateTransformer", "public static <T> Transformer<Class<? extends T>, T> instantiateTransformer(final Class<?>[] paramTypes, final Object[] args)" ], [ "onePredicate", "org.apache.commons.collections4.functors", "OnePredicate", "public static <T> Predicate<T> onePredicate(final Predicate<? super T>... predicates)" ], [ "onePredicate", "org.apache.commons.collections4.functors", "OnePredicate", "public static <T> Predicate<T> onePredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "equalPredicate", "org.apache.commons.collections4.functors", "EqualPredicate", "public static <T> Predicate<T> equalPredicate(final T object)" ], [ "equalPredicate", "org.apache.commons.collections4.functors", "EqualPredicate", "public static <T> Predicate<T> equalPredicate(final T object, final Equator<T> equator)" ], [ "instantiateFactory", "org.apache.commons.collections4.functors", "InstantiateFactory", "public static <T> Factory<T> instantiateFactory(final Class<T> classToInstantiate, final Class<?>[] paramTypes, final Object[] args)" ], [ "ifClosure", "org.apache.commons.collections4.functors", "IfClosure", "public static <E> Closure<E> ifClosure(final Predicate<? super E> predicate, final Closure<? super E> trueClosure)" ], [ "ifClosure", "org.apache.commons.collections4.functors", "IfClosure", "public static <E> Closure<E> ifClosure(final Predicate<? super E> predicate, final Closure<? super E> trueClosure, final Closure<? super E> falseClosure)" ], [ "getTrueFirstComparator", "org.apache.commons.collections4.comparators", "BooleanComparator", "public static BooleanComparator getTrueFirstComparator()" ], [ "getFalseFirstComparator", "org.apache.commons.collections4.comparators", "BooleanComparator", "public static BooleanComparator getFalseFirstComparator()" ], [ "booleanComparator", "org.apache.commons.collections4.comparators", "BooleanComparator", "public static BooleanComparator booleanComparator(final boolean trueFirst)" ], [ "comparableComparator", "org.apache.commons.collections4.comparators", "ComparableComparator", "public static <E extends Comparable<? super E>> ComparableComparator<E> comparableComparator()" ], [ "emptyCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <T> Collection<T> emptyCollection()" ], [ "emptyIfNull", "org.apache.commons.collections4", "CollectionUtils", "public static <T> Collection<T> emptyIfNull(final Collection<T> collection)" ], [ "union", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> union(final Iterable<? extends O> a, final Iterable<? extends O> b)" ], [ "intersection", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> intersection(final Iterable<? extends O> a, final Iterable<? extends O> b)" ], [ "disjunction", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> disjunction(final Iterable<? extends O> a, final Iterable<? extends O> b)" ], [ "subtract", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> subtract(final Iterable<? extends O> a, final Iterable<? extends O> b)" ], [ "subtract", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> subtract(final Iterable<? extends O> a, final Iterable<? extends O> b, final Predicate<O> p)" ], [ "containsAll", "org.apache.commons.collections4", "CollectionUtils", "public static boolean containsAll(final Collection<?> coll1, final Collection<?> coll2)" ], [ "containsAny", "org.apache.commons.collections4", "CollectionUtils", "public static boolean containsAny(final Collection<?> coll1, final Collection<?> coll2)" ], [ "getCardinalityMap", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Map<O, Integer> getCardinalityMap(final Iterable<? extends O> coll)" ], [ "isSubCollection", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isSubCollection(final Collection<?> a, final Collection<?> b)" ], [ "isProperSubCollection", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isProperSubCollection(final Collection<?> a, final Collection<?> b)" ], [ "isEqualCollection", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isEqualCollection(final Collection<?> a, final Collection<?> b)" ], [ "isEqualCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <E> boolean isEqualCollection(final Collection<? extends E> a, final Collection<? extends E> b, final Equator<? super E> equator)" ], [ "cardinality", "org.apache.commons.collections4", "CollectionUtils", "public static <O> int cardinality(final O obj, final Iterable<? super O> coll)" ], [ "find", "org.apache.commons.collections4", "CollectionUtils", "public static <T> T find(final Iterable<T> collection, final Predicate<? super T> predicate)" ], [ "forAllDo", "org.apache.commons.collections4", "CollectionUtils", "public static <T, C extends Closure<? super T>> C forAllDo(final Iterable<T> collection, final C closure)" ], [ "forAllDo", "org.apache.commons.collections4", "CollectionUtils", "public static <T, C extends Closure<? super T>> C forAllDo(final Iterator<T> iterator, final C closure)" ], [ "forAllButLastDo", "org.apache.commons.collections4", "CollectionUtils", "public static <T, C extends Closure<? super T>> T forAllButLastDo(final Iterable<T> collection, final C closure)" ], [ "forAllButLastDo", "org.apache.commons.collections4", "CollectionUtils", "public static <T, C extends Closure<? super T>> T forAllButLastDo(final Iterator<T> iterator, final C closure)" ], [ "filter", "org.apache.commons.collections4", "CollectionUtils", "public static <T> boolean filter(final Iterable<T> collection, final Predicate<? super T> predicate)" ], [ "filterInverse", "org.apache.commons.collections4", "CollectionUtils", "public static <T> boolean filterInverse(final Iterable<T> collection, final Predicate<? super T> predicate)" ], [ "countMatches", "org.apache.commons.collections4", "CollectionUtils", "public static <C> int countMatches(final Iterable<C> input, final Predicate<? super C> predicate)" ], [ "exists", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean exists(final Iterable<C> input, final Predicate<? super C> predicate)" ], [ "matchesAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean matchesAll(final Iterable<C> input, final Predicate<? super C> predicate)" ], [ "select", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> select(final Iterable<? extends O> inputCollection, final Predicate<? super O> predicate)" ], [ "select", "org.apache.commons.collections4", "CollectionUtils", "public static <O, R extends Collection<? super O>> R select(final Iterable<? extends O> inputCollection, final Predicate<? super O> predicate, final R outputCollection)" ], [ "select", "org.apache.commons.collections4", "CollectionUtils", "public static <O, R extends Collection<? super O>> R select(final Iterable<? extends O> inputCollection, final Predicate<? super O> predicate, R outputCollection, R rejectedCollection)" ], [ "selectRejected", "org.apache.commons.collections4", "CollectionUtils", "public static <O> Collection<O> selectRejected(final Iterable<? extends O> inputCollection, final Predicate<? super O> predicate)" ], [ "selectRejected", "org.apache.commons.collections4", "CollectionUtils", "public static <O, R extends Collection<? super O>> R selectRejected(final Iterable<? extends O> inputCollection, final Predicate<? super O> predicate, final R outputCollection)" ], [ "collect", "org.apache.commons.collections4", "CollectionUtils", "public static <I, O> Collection<O> collect(final Iterable<I> inputCollection, final Transformer<? super I, ? extends O> transformer)" ], [ "collect", "org.apache.commons.collections4", "CollectionUtils", "public static <I, O> Collection<O> collect(final Iterator<I> inputIterator, final Transformer<? super I, ? extends O> transformer)" ], [ "collect", "org.apache.commons.collections4", "CollectionUtils", "public static <I, O, R extends Collection<? super O>> R collect(final Iterable<? extends I> inputCollection, final Transformer<? super I, ? extends O> transformer, final R outputCollection)" ], [ "collect", "org.apache.commons.collections4", "CollectionUtils", "public static <I, O, R extends Collection<? super O>> R collect(final Iterator<? extends I> inputIterator, final Transformer<? super I, ? extends O> transformer, final R outputCollection)" ], [ "addIgnoreNull", "org.apache.commons.collections4", "CollectionUtils", "public static <T> boolean addIgnoreNull(final Collection<T> collection, final T object)" ], [ "addAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean addAll(final Collection<C> collection, final Iterable<? extends C> iterable)" ], [ "addAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean addAll(final Collection<C> collection, final Iterator<? extends C> iterator)" ], [ "addAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean addAll(final Collection<C> collection, final Enumeration<? extends C> enumeration)" ], [ "addAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> boolean addAll(final Collection<C> collection, final C[] elements)" ], [ "get", "org.apache.commons.collections4", "CollectionUtils", "public static <T> T get(final Iterator<T> iterator, final int index)" ], [ "get", "org.apache.commons.collections4", "CollectionUtils", "public static <T> T get(final Iterable<T> iterable, final int index)" ], [ "get", "org.apache.commons.collections4", "CollectionUtils", "public static Object get(final Object object, final int index)" ], [ "get", "org.apache.commons.collections4", "CollectionUtils", "public static <K, V> Map.Entry<K, V> get(final Map<K, V> map, final int index)" ], [ "size", "org.apache.commons.collections4", "CollectionUtils", "public static int size(final Object object)" ], [ "sizeIsEmpty", "org.apache.commons.collections4", "CollectionUtils", "public static boolean sizeIsEmpty(final Object object)" ], [ "isEmpty", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isEmpty(final Collection<?> coll)" ], [ "isNotEmpty", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isNotEmpty(final Collection<?> coll)" ], [ "isFull", "org.apache.commons.collections4", "CollectionUtils", "public static boolean isFull(final Collection<? extends Object> coll)" ], [ "maxSize", "org.apache.commons.collections4", "CollectionUtils", "public static int maxSize(final Collection<? extends Object> coll)" ], [ "collate", "org.apache.commons.collections4", "CollectionUtils", "public static <O extends Comparable<? super O>> List<O> collate(Iterable<? extends O> a, Iterable<? extends O> b)" ], [ "collate", "org.apache.commons.collections4", "CollectionUtils", "public static <O extends Comparable<? super O>> List<O> collate(final Iterable<? extends O> a, final Iterable<? extends O> b, final boolean includeDuplicates)" ], [ "collate", "org.apache.commons.collections4", "CollectionUtils", "public static <O> List<O> collate(final Iterable<? extends O> a, final Iterable<? extends O> b, final Comparator<? super O> c)" ], [ "collate", "org.apache.commons.collections4", "CollectionUtils", "public static <O> List<O> collate(final Iterable<? extends O> a, final Iterable<? extends O> b, final Comparator<? super O> c, final boolean includeDuplicates)" ], [ "permutations", "org.apache.commons.collections4", "CollectionUtils", "public static <E> Collection<List<E>> permutations(final Collection<E> collection)" ], [ "retainAll", "org.apache.commons.collections4", "CollectionUtils", "public static <C> Collection<C> retainAll(final Collection<C> collection, final Collection<?> retain)" ], [ "retainAll", "org.apache.commons.collections4", "CollectionUtils", "public static <E> Collection<E> retainAll(final Iterable<E> collection, final Iterable<? extends E> retain, final Equator<? super E> equator)" ], [ "removeAll", "org.apache.commons.collections4", "CollectionUtils", "public static <E> Collection<E> removeAll(final Collection<E> collection, final Collection<?> remove)" ], [ "removeAll", "org.apache.commons.collections4", "CollectionUtils", "public static <E> Collection<E> removeAll(final Iterable<E> collection, final Iterable<? extends E> remove, final Equator<? super E> equator)" ], [ "synchronizedCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <C> Collection<C> synchronizedCollection(final Collection<C> collection)" ], [ "unmodifiableCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <C> Collection<C> unmodifiableCollection(final Collection<? extends C> collection)" ], [ "predicatedCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <C> Collection<C> predicatedCollection(final Collection<C> collection, final Predicate<? super C> predicate)" ], [ "transformingCollection", "org.apache.commons.collections4", "CollectionUtils", "public static <E> Collection<E> transformingCollection(final Collection<E> collection, final Transformer<? super E, ? extends E> transformer)" ], [ "extractSingleton", "org.apache.commons.collections4", "CollectionUtils", "public static <E> E extractSingleton(final Collection<E> collection)" ], [ "transformingMap", "org.apache.commons.collections4.splitmap", "TransformedSplitMap", "public static <J, K, U, V> TransformedSplitMap<J, K, U, V> transformingMap(final Map<K, V> map, final Transformer<? super J, ? extends K> keyTransformer, final Transformer<? super U, ? extends V> valueTransformer)" ], [ "emptyIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> emptyIterable()" ], [ "chainedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> chainedIterable(final Iterable<? extends E> a, final Iterable<? extends E> b)" ], [ "chainedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> chainedIterable(final Iterable<? extends E> a, final Iterable<? extends E> b, final Iterable<? extends E> c)" ], [ "chainedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> chainedIterable(final Iterable<? extends E> a, final Iterable<? extends E> b, final Iterable<? extends E> c, final Iterable<? extends E> d)" ], [ "chainedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> chainedIterable(final Iterable<? extends E>... iterables)" ], [ "collatedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> collatedIterable(final Iterable<? extends E> a, final Iterable<? extends E> b)" ], [ "collatedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> collatedIterable(final Comparator<? super E> comparator, final Iterable<? extends E> a, final Iterable<? extends E> b)" ], [ "filteredIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> filteredIterable(final Iterable<E> iterable, final Predicate<? super E> predicate)" ], [ "boundedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> boundedIterable(final Iterable<E> iterable, final long maxSize)" ], [ "loopingIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> loopingIterable(final Iterable<E> iterable)" ], [ "reversedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> reversedIterable(final Iterable<E> iterable)" ], [ "skippingIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> skippingIterable(final Iterable<E> iterable, final long elementsToSkip)" ], [ "transformedIterable", "org.apache.commons.collections4", "IterableUtils", "public static <I, O> Iterable<O> transformedIterable(final Iterable<I> iterable, final Transformer<? super I, ? extends O> transformer)" ], [ "uniqueIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> uniqueIterable(final Iterable<E> iterable)" ], [ "unmodifiableIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> unmodifiableIterable(final Iterable<E> iterable)" ], [ "zippingIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> zippingIterable(final Iterable<? extends E> a, final Iterable<? extends E> b)" ], [ "zippingIterable", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> zippingIterable(final Iterable<? extends E> first, final Iterable<? extends E>... others)" ], [ "emptyIfNull", "org.apache.commons.collections4", "IterableUtils", "public static <E> Iterable<E> emptyIfNull(final Iterable<E> iterable)" ], [ "forEachButLast", "org.apache.commons.collections4", "IterableUtils", "public static <E> E forEachButLast(final Iterable<E> iterable, final Closure<? super E> closure)" ], [ "find", "org.apache.commons.collections4", "IterableUtils", "public static <E> E find(final Iterable<E> iterable, final Predicate<? super E> predicate)" ], [ "indexOf", "org.apache.commons.collections4", "IterableUtils", "public static <E> int indexOf(final Iterable<E> iterable, final Predicate<? super E> predicate)" ], [ "matchesAll", "org.apache.commons.collections4", "IterableUtils", "public static <E> boolean matchesAll(final Iterable<E> iterable, final Predicate<? super E> predicate)" ], [ "matchesAny", "org.apache.commons.collections4", "IterableUtils", "public static <E> boolean matchesAny(final Iterable<E> iterable, final Predicate<? super E> predicate)" ], [ "countMatches", "org.apache.commons.collections4", "IterableUtils", "public static <E> long countMatches(final Iterable<E> input, final Predicate<? super E> predicate)" ], [ "isEmpty", "org.apache.commons.collections4", "IterableUtils", "public static boolean isEmpty(final Iterable<?> iterable)" ], [ "contains", "org.apache.commons.collections4", "IterableUtils", "public static <E> boolean contains(final Iterable<E> iterable, final Object object)" ], [ "contains", "org.apache.commons.collections4", "IterableUtils", "public static <E> boolean contains(final Iterable<? extends E> iterable, final E object, final Equator<? super E> equator)" ], [ "frequency", "org.apache.commons.collections4", "IterableUtils", "public static <E, T extends E> int frequency(final Iterable<E> iterable, final T obj)" ], [ "get", "org.apache.commons.collections4", "IterableUtils", "public static <T> T get(final Iterable<T> iterable, final int index)" ], [ "size", "org.apache.commons.collections4", "IterableUtils", "public static int size(final Iterable<?> iterable)" ], [ "partition", "org.apache.commons.collections4", "IterableUtils", "public static <O> List<List<O>> partition(final Iterable<? extends O> iterable, final Predicate<? super O> predicate)" ], [ "partition", "org.apache.commons.collections4", "IterableUtils", "public static <O> List<List<O>> partition(final Iterable<? extends O> iterable, final Predicate<? super O>... predicates)" ], [ "partition", "org.apache.commons.collections4", "IterableUtils", "public static <O, R extends Collection<O>> List<R> partition(final Iterable<? extends O> iterable, final Factory<R> partitionFactory, final Predicate<? super O>... predicates)" ], [ "toList", "org.apache.commons.collections4", "IterableUtils", "public static <E> List<E> toList(final Iterable<E> iterable)" ], [ "toString", "org.apache.commons.collections4", "IterableUtils", "public static <E> String toString(final Iterable<E> iterable)" ], [ "toString", "org.apache.commons.collections4", "IterableUtils", "public static <E> String toString(final Iterable<E> iterable, final Transformer<? super E, String> transformer)" ], [ "toString", "org.apache.commons.collections4", "IterableUtils", "public static <E> String toString(final Iterable<E> iterable, final Transformer<? super E, String> transformer, final String delimiter, final String prefix, final String suffix)" ], [ "unmodifiableTrie", "org.apache.commons.collections4", "TrieUtils", "public static <K, V> Trie<K, V> unmodifiableTrie(final Trie<K, ? extends V> trie)" ], [ "exceptionClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> exceptionClosure()" ], [ "nopClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> nopClosure()" ], [ "asClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> asClosure(final Transformer<? super E, ?> transformer)" ], [ "forClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> forClosure(final int count, final Closure<? super E> closure)" ], [ "whileClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> whileClosure(final Predicate<? super E> predicate, final Closure<? super E> closure)" ], [ "doWhileClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> doWhileClosure(final Closure<? super E> closure, final Predicate<? super E> predicate)" ], [ "invokerClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> invokerClosure(final String methodName)" ], [ "invokerClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> invokerClosure(final String methodName, final Class<?>[] paramTypes, final Object[] args)" ], [ "chainedClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> chainedClosure(final Closure<? super E>... closures)" ], [ "chainedClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> chainedClosure(final Collection<? extends Closure<? super E>> closures)" ], [ "ifClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> ifClosure(final Predicate<? super E> predicate, final Closure<? super E> trueClosure)" ], [ "ifClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> ifClosure(final Predicate<? super E> predicate, final Closure<? super E> trueClosure, final Closure<? super E> falseClosure)" ], [ "switchClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> switchClosure(final Predicate<? super E>[] predicates, final Closure<? super E>[] closures)" ], [ "switchClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> switchClosure(final Predicate<? super E>[] predicates, final Closure<? super E>[] closures, final Closure<? super E> defaultClosure)" ], [ "switchClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> switchClosure(final Map<Predicate<E>, Closure<E>> predicatesAndClosures)" ], [ "switchMapClosure", "org.apache.commons.collections4", "ClosureUtils", "public static <E> Closure<E> switchMapClosure(final Map<? extends E, Closure<E>> objectsAndClosures)" ], [ "unmodifiableTrie", "org.apache.commons.collections4.trie", "UnmodifiableTrie", "public static <K, V> Trie<K, V> unmodifiableTrie(final Trie<K, ? extends V> trie)" ], [ "isOutOfBoundsIndex", "org.apache.commons.collections4.trie", "KeyAnalyzer", "static boolean isOutOfBoundsIndex(final int bitIndex)" ], [ "isEqualBitKey", "org.apache.commons.collections4.trie", "KeyAnalyzer", "static boolean isEqualBitKey(final int bitIndex)" ], [ "isNullBitKey", "org.apache.commons.collections4.trie", "KeyAnalyzer", "static boolean isNullBitKey(final int bitIndex)" ], [ "isValidBitIndex", "org.apache.commons.collections4.trie", "KeyAnalyzer", "static boolean isValidBitIndex(final int bitIndex)" ], [ "isValidUplink", "org.apache.commons.collections4.trie", "AbstractPatriciaTrie", "static boolean isValidUplink(final TrieEntry<?, ?> next, final TrieEntry<?, ?> from)" ], [ "compare", "org.apache.commons.collections4.trie", "AbstractBitwiseTrie", "static boolean compare(final Object a, final Object b)" ], [ "transformingSortedMap", "org.apache.commons.collections4.map", "TransformedSortedMap", "public static <K, V> TransformedSortedMap<K, V> transformingSortedMap(final SortedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "transformedSortedMap", "org.apache.commons.collections4.map", "TransformedSortedMap", "public static <K, V> TransformedSortedMap<K, V> transformedSortedMap(final SortedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "predicatedMap", "org.apache.commons.collections4.map", "PredicatedMap", "public static <K, V> PredicatedMap<K, V> predicatedMap(final Map<K, V> map, final Predicate<? super K> keyPredicate, final Predicate<? super V> valuePredicate)" ], [ "fixedSizeSortedMap", "org.apache.commons.collections4.map", "FixedSizeSortedMap", "public static <K, V> FixedSizeSortedMap<K, V> fixedSizeSortedMap(final SortedMap<K, V> map)" ], [ "unmodifiableSortedMap", "org.apache.commons.collections4.map", "UnmodifiableSortedMap", "public static <K, V> SortedMap<K, V> unmodifiableSortedMap(final SortedMap<K, ? extends V> map)" ], [ "predicatedSortedMap", "org.apache.commons.collections4.map", "PredicatedSortedMap", "public static <K, V> PredicatedSortedMap<K, V> predicatedSortedMap(final SortedMap<K, V> map, final Predicate<? super K> keyPredicate, final Predicate<? super V> valuePredicate)" ], [ "defaultedMap", "org.apache.commons.collections4.map", "DefaultedMap", "public static <K, V> DefaultedMap<K, V> defaultedMap(final Map<K, V> map, final V defaultValue)" ], [ "defaultedMap", "org.apache.commons.collections4.map", "DefaultedMap", "public static <K, V> DefaultedMap<K, V> defaultedMap(final Map<K, V> map, final Factory<? extends V> factory)" ], [ "defaultedMap", "org.apache.commons.collections4.map", "DefaultedMap", "public static <K, V> Map<K, V> defaultedMap(final Map<K, V> map, final Transformer<? super K, ? extends V> transformer)" ], [ "fixedSizeMap", "org.apache.commons.collections4.map", "FixedSizeMap", "public static <K, V> FixedSizeMap<K, V> fixedSizeMap(final Map<K, V> map)" ], [ "lazySortedMap", "org.apache.commons.collections4.map", "LazySortedMap", "public static <K, V> LazySortedMap<K, V> lazySortedMap(final SortedMap<K, V> map, final Factory<? extends V> factory)" ], [ "lazySortedMap", "org.apache.commons.collections4.map", "LazySortedMap", "public static <K, V> LazySortedMap<K, V> lazySortedMap(final SortedMap<K, V> map, final Transformer<? super K, ? extends V> factory)" ], [ "unmodifiableOrderedMap", "org.apache.commons.collections4.map", "UnmodifiableOrderedMap", "public static <K, V> OrderedMap<K, V> unmodifiableOrderedMap(final OrderedMap<? extends K, ? extends V> map)" ], [ "unmodifiableMap", "org.apache.commons.collections4.map", "UnmodifiableMap", "public static <K, V> Map<K, V> unmodifiableMap(final Map<? extends K, ? extends V> map)" ], [ "listOrderedMap", "org.apache.commons.collections4.map", "ListOrderedMap", "public static <K, V> ListOrderedMap<K, V> listOrderedMap(final Map<K, V> map)" ], [ "unmodifiableEntrySet", "org.apache.commons.collections4.map", "UnmodifiableEntrySet", "public static <K, V> Set<Map.Entry<K, V>> unmodifiableEntrySet(final Set<Map.Entry<K, V>> set)" ], [ "resolve", "org.apache.commons.collections4.map", "AbstractReferenceMap", "public static ReferenceStrength resolve(final int value)" ], [ "resolve", "org.apache.commons.collections4.map", "ReferenceStrength", "public static ReferenceStrength resolve(final int value)" ], [ "multiKeyMap", "org.apache.commons.collections4.map", "MultiKeyMap", "public static <K, V> MultiKeyMap<K, V> multiKeyMap(final AbstractHashedMap<MultiKey<? extends K>, V> map)" ], [ "lazyMap", "org.apache.commons.collections4.map", "LazyMap", "public static <K, V> LazyMap<K, V> lazyMap(final Map<K, V> map, final Factory<? extends V> factory)" ], [ "lazyMap", "org.apache.commons.collections4.map", "LazyMap", "public static <V, K> LazyMap<K, V> lazyMap(final Map<K, V> map, final Transformer<? super K, ? extends V> factory)" ], [ "multiValueMap", "org.apache.commons.collections4.map", "MultiValueMap", "public static <K, V> MultiValueMap<K, V> multiValueMap(final Map<K, ? super Collection<V>> map)" ], [ "multiValueMap", "org.apache.commons.collections4.map", "MultiValueMap", "public static <K, V, C extends Collection<V>> MultiValueMap<K, V> multiValueMap(final Map<K, ? super C> map, final Class<C> collectionClass)" ], [ "multiValueMap", "org.apache.commons.collections4.map", "MultiValueMap", "public static <K, V, C extends Collection<V>> MultiValueMap<K, V> multiValueMap(final Map<K, ? super C> map, final Factory<C> collectionFactory)" ], [ "transformingMap", "org.apache.commons.collections4.map", "TransformedMap", "public static <K, V> TransformedMap<K, V> transformingMap(final Map<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "transformedMap", "org.apache.commons.collections4.map", "TransformedMap", "public static <K, V> TransformedMap<K, V> transformedMap(final Map<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "synchronizedMultiSet", "org.apache.commons.collections4", "MultiSetUtils", "public static <E> MultiSet<E> synchronizedMultiSet(final MultiSet<E> multiset)" ], [ "unmodifiableMultiSet", "org.apache.commons.collections4", "MultiSetUtils", "public static <E> MultiSet<E> unmodifiableMultiSet(final MultiSet<? extends E> multiset)" ], [ "predicatedMultiSet", "org.apache.commons.collections4", "MultiSetUtils", "public static <E> MultiSet<E> predicatedMultiSet(final MultiSet<E> multiset, final Predicate<? super E> predicate)" ], [ "emptyMultiSet", "org.apache.commons.collections4", "MultiSetUtils", "public static <E> MultiSet<E> emptyMultiSet()" ], [ "unmodifiableMultiValuedMap", "org.apache.commons.collections4.multimap", "UnmodifiableMultiValuedMap", "public static <K, V> UnmodifiableMultiValuedMap<K, V> unmodifiableMultiValuedMap(MultiValuedMap<? extends K, ? extends V> map)" ], [ "transformingMap", "org.apache.commons.collections4.multimap", "TransformedMultiValuedMap", "public static <K, V> TransformedMultiValuedMap<K, V> transformingMap(final MultiValuedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "transformedMap", "org.apache.commons.collections4.multimap", "TransformedMultiValuedMap", "public static <K, V> TransformedMultiValuedMap<K, V> transformedMap(final MultiValuedMap<K, V> map, final Transformer<? super K, ? extends K> keyTransformer, final Transformer<? super V, ? extends V> valueTransformer)" ], [ "lazyList", "org.apache.commons.collections4.list", "LazyList", "public static <E> LazyList<E> lazyList(final List<E> list, final Factory<? extends E> factory)" ], [ "setUniqueList", "org.apache.commons.collections4.list", "SetUniqueList", "public static <E> SetUniqueList<E> setUniqueList(final List<E> list)" ], [ "unmodifiableList", "org.apache.commons.collections4.list", "UnmodifiableList", "public static <E> List<E> unmodifiableList(final List<? extends E> list)" ], [ "fixedSizeList", "org.apache.commons.collections4.list", "FixedSizeList", "public static <E> FixedSizeList<E> fixedSizeList(final List<E> list)" ], [ "transformingList", "org.apache.commons.collections4.list", "TransformedList", "public static <E> TransformedList<E> transformingList(final List<E> list, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedList", "org.apache.commons.collections4.list", "TransformedList", "public static <E> TransformedList<E> transformedList(final List<E> list, final Transformer<? super E, ? extends E> transformer)" ], [ "growthList", "org.apache.commons.collections4.list", "GrowthList", "public static <E> GrowthList<E> growthList(final List<E> list)" ], [ "predicatedList", "org.apache.commons.collections4.list", "PredicatedList", "public static <T> PredicatedList<T> predicatedList(final List<T> list, final Predicate<? super T> predicate)" ], [ "transformingQueue", "org.apache.commons.collections4.queue", "TransformedQueue", "public static <E> TransformedQueue<E> transformingQueue(final Queue<E> queue, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedQueue", "org.apache.commons.collections4.queue", "TransformedQueue", "public static <E> TransformedQueue<E> transformedQueue(final Queue<E> queue, final Transformer<? super E, ? extends E> transformer)" ], [ "unmodifiableQueue", "org.apache.commons.collections4.queue", "UnmodifiableQueue", "public static <E> Queue<E> unmodifiableQueue(final Queue<? extends E> queue)" ], [ "predicatedQueue", "org.apache.commons.collections4.queue", "PredicatedQueue", "public static <E> PredicatedQueue<E> predicatedQueue(final Queue<E> Queue, final Predicate<? super E> predicate)" ], [ "empty", "org.apache.commons.collections4", "FluentIterable", "public static <T> FluentIterable<T> empty()" ], [ "of", "org.apache.commons.collections4", "FluentIterable", "public static <T> FluentIterable<T> of(final T singleton)" ], [ "of", "org.apache.commons.collections4", "FluentIterable", "public static <T> FluentIterable<T> of(final T... elements)" ], [ "of", "org.apache.commons.collections4", "FluentIterable", "public static <T> FluentIterable<T> of(final Iterable<T> iterable)" ], [ "exceptionTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> exceptionTransformer()" ], [ "nullTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> nullTransformer()" ], [ "nopTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> nopTransformer()" ], [ "cloneTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> cloneTransformer()" ], [ "constantTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> constantTransformer(final O constantToReturn)" ], [ "asTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> asTransformer(final Closure<? super T> closure)" ], [ "asTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, Boolean> asTransformer(final Predicate<? super T> predicate)" ], [ "asTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> asTransformer(final Factory<? extends O> factory)" ], [ "chainedTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> chainedTransformer(final Transformer<? super T, ? extends T>... transformers)" ], [ "chainedTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> chainedTransformer(final Collection<? extends Transformer<? super T, ? extends T>> transformers)" ], [ "ifTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, T> ifTransformer(final Predicate<? super T> predicate, final Transformer<? super T, ? extends T> trueTransformer)" ], [ "ifTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> ifTransformer(final Predicate<? super I> predicate, final Transformer<? super I, ? extends O> trueTransformer, final Transformer<? super I, ? extends O> falseTransformer)" ], [ "switchTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> switchTransformer(final Predicate<? super I> predicate, final Transformer<? super I, ? extends O> trueTransformer, final Transformer<? super I, ? extends O> falseTransformer)" ], [ "switchTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> switchTransformer(final Predicate<? super I>[] predicates, final Transformer<? super I, ? extends O>[] transformers)" ], [ "switchTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> switchTransformer(final Predicate<? super I>[] predicates, final Transformer<? super I, ? extends O>[] transformers, final Transformer<? super I, ? extends O> defaultTransformer)" ], [ "switchTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> switchTransformer(final Map<Predicate<I>, Transformer<I, O>> predicatesAndTransformers)" ], [ "switchMapTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> switchMapTransformer(final Map<I, Transformer<I, O>> objectsAndTransformers)" ], [ "instantiateTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<Class<? extends T>, T> instantiateTransformer()" ], [ "instantiateTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<Class<? extends T>, T> instantiateTransformer(final Class<?>[] paramTypes, final Object[] args)" ], [ "mapTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> mapTransformer(final Map<? super I, ? extends O> map)" ], [ "invokerTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> invokerTransformer(final String methodName)" ], [ "invokerTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <I, O> Transformer<I, O> invokerTransformer(final String methodName, final Class<?>[] paramTypes, final Object[] args)" ], [ "stringValueTransformer", "org.apache.commons.collections4", "TransformerUtils", "public static <T> Transformer<T, String> stringValueTransformer()" ], [ "exceptionPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> exceptionPredicate()" ], [ "truePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> truePredicate()" ], [ "falsePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> falsePredicate()" ], [ "nullPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nullPredicate()" ], [ "notNullPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> notNullPredicate()" ], [ "equalPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> equalPredicate(final T value)" ], [ "identityPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> identityPredicate(final T value)" ], [ "instanceofPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static Predicate<Object> instanceofPredicate(final Class<?> type)" ], [ "uniquePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> uniquePredicate()" ], [ "invokerPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> invokerPredicate(final String methodName)" ], [ "invokerPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> invokerPredicate(final String methodName, final Class<?>[] paramTypes, final Object[] args)" ], [ "andPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> andPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "allPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> allPredicate(final Predicate<? super T>... predicates)" ], [ "allPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> allPredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "orPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> orPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "anyPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> anyPredicate(final Predicate<? super T>... predicates)" ], [ "anyPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> anyPredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "eitherPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> eitherPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "onePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> onePredicate(final Predicate<? super T>... predicates)" ], [ "onePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> onePredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "neitherPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> neitherPredicate(final Predicate<? super T> predicate1, final Predicate<? super T> predicate2)" ], [ "nonePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nonePredicate(final Predicate<? super T>... predicates)" ], [ "nonePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nonePredicate(final Collection<? extends Predicate<? super T>> predicates)" ], [ "notPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> notPredicate(final Predicate<? super T> predicate)" ], [ "asPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> asPredicate(final Transformer<? super T, Boolean> transformer)" ], [ "nullIsExceptionPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nullIsExceptionPredicate(final Predicate<? super T> predicate)" ], [ "nullIsFalsePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nullIsFalsePredicate(final Predicate<? super T> predicate)" ], [ "nullIsTruePredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> nullIsTruePredicate(final Predicate<? super T> predicate)" ], [ "transformedPredicate", "org.apache.commons.collections4", "PredicateUtils", "public static <T> Predicate<T> transformedPredicate(final Transformer<? super T, ? extends T> transformer, final Predicate<? super T> predicate)" ], [ "emptySet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> emptySet()" ], [ "emptySortedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> emptySortedSet()" ], [ "emptyIfNull", "org.apache.commons.collections4", "SetUtils", "public static <T> Set<T> emptyIfNull(final Set<T> set)" ], [ "isEqualSet", "org.apache.commons.collections4", "SetUtils", "public static boolean isEqualSet(final Collection<?> set1, final Collection<?> set2)" ], [ "hashCodeForSet", "org.apache.commons.collections4", "SetUtils", "public static <T> int hashCodeForSet(final Collection<T> set)" ], [ "newIdentityHashSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> newIdentityHashSet()" ], [ "synchronizedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> synchronizedSet(final Set<E> set)" ], [ "unmodifiableSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> unmodifiableSet(final Set<? extends E> set)" ], [ "predicatedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> predicatedSet(final Set<E> set, final Predicate<? super E> predicate)" ], [ "transformedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> transformedSet(final Set<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "orderedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> Set<E> orderedSet(final Set<E> set)" ], [ "synchronizedSortedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> synchronizedSortedSet(final SortedSet<E> set)" ], [ "unmodifiableSortedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> unmodifiableSortedSet(final SortedSet<E> set)" ], [ "predicatedSortedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> predicatedSortedSet(final SortedSet<E> set, final Predicate<? super E> predicate)" ], [ "transformedSortedSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> transformedSortedSet(final SortedSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "unmodifiableNavigableSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> unmodifiableNavigableSet(final NavigableSet<E> set)" ], [ "predicatedNavigableSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> predicatedNavigableSet(final NavigableSet<E> set, final Predicate<? super E> predicate)" ], [ "transformedNavigableSet", "org.apache.commons.collections4", "SetUtils", "public static <E> SortedSet<E> transformedNavigableSet(final NavigableSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "union", "org.apache.commons.collections4", "SetUtils", "public static <E> SetView<E> union(final Set<? extends E> a, final Set<? extends E> b)" ], [ "difference", "org.apache.commons.collections4", "SetUtils", "public static <E> SetView<E> difference(final Set<? extends E> a, final Set<? extends E> b)" ], [ "intersection", "org.apache.commons.collections4", "SetUtils", "public static <E> SetView<E> intersection(final Set<? extends E> a, final Set<? extends E> b)" ], [ "disjunction", "org.apache.commons.collections4", "SetUtils", "public static <E> SetView<E> disjunction(final Set<? extends E> a, final Set<? extends E> b)" ], [ "transformingSet", "org.apache.commons.collections4.set", "TransformedSet", "public static <E> TransformedSet<E> transformingSet(final Set<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedSet", "org.apache.commons.collections4.set", "TransformedSet", "public static <E> Set<E> transformedSet(final Set<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "transformingNavigableSet", "org.apache.commons.collections4.set", "TransformedNavigableSet", "public static <E> TransformedNavigableSet<E> transformingNavigableSet(final NavigableSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedNavigableSet", "org.apache.commons.collections4.set", "TransformedNavigableSet", "public static <E> TransformedNavigableSet<E> transformedNavigableSet(final NavigableSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "predicatedNavigableSet", "org.apache.commons.collections4.set", "PredicatedNavigableSet", "public static <E> PredicatedNavigableSet<E> predicatedNavigableSet(final NavigableSet<E> set, final Predicate<? super E> predicate)" ], [ "listOrderedSet", "org.apache.commons.collections4.set", "ListOrderedSet", "public static <E> ListOrderedSet<E> listOrderedSet(final Set<E> set, final List<E> list)" ], [ "listOrderedSet", "org.apache.commons.collections4.set", "ListOrderedSet", "public static <E> ListOrderedSet<E> listOrderedSet(final Set<E> set)" ], [ "listOrderedSet", "org.apache.commons.collections4.set", "ListOrderedSet", "public static <E> ListOrderedSet<E> listOrderedSet(final List<E> list)" ], [ "unmodifiableSet", "org.apache.commons.collections4.set", "UnmodifiableSet", "public static <E> Set<E> unmodifiableSet(final Set<? extends E> set)" ], [ "mapBackedSet", "org.apache.commons.collections4.set", "MapBackedSet", "public static <E, V> MapBackedSet<E, V> mapBackedSet(final Map<E, ? super V> map)" ], [ "mapBackedSet", "org.apache.commons.collections4.set", "MapBackedSet", "public static <E, V> MapBackedSet<E, V> mapBackedSet(final Map<E, ? super V> map, final V dummyValue)" ], [ "unmodifiableSortedSet", "org.apache.commons.collections4.set", "UnmodifiableSortedSet", "public static <E> SortedSet<E> unmodifiableSortedSet(final SortedSet<E> set)" ], [ "predicatedSortedSet", "org.apache.commons.collections4.set", "PredicatedSortedSet", "public static <E> PredicatedSortedSet<E> predicatedSortedSet(final SortedSet<E> set, final Predicate<? super E> predicate)" ], [ "predicatedSet", "org.apache.commons.collections4.set", "PredicatedSet", "public static <E> PredicatedSet<E> predicatedSet(final Set<E> set, final Predicate<? super E> predicate)" ], [ "unmodifiableNavigableSet", "org.apache.commons.collections4.set", "UnmodifiableNavigableSet", "public static <E> NavigableSet<E> unmodifiableNavigableSet(final NavigableSet<E> set)" ], [ "transformingSortedSet", "org.apache.commons.collections4.set", "TransformedSortedSet", "public static <E> TransformedSortedSet<E> transformingSortedSet(final SortedSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedSortedSet", "org.apache.commons.collections4.set", "TransformedSortedSet", "public static <E> TransformedSortedSet<E> transformedSortedSet(final SortedSet<E> set, final Transformer<? super E, ? extends E> transformer)" ], [ "get", "org.apache.commons.collections4", "EnumerationUtils", "public static <T> T get(final Enumeration<T> e, final int index)" ], [ "toList", "org.apache.commons.collections4", "EnumerationUtils", "public static <E> List<E> toList(final Enumeration<? extends E> enumeration)" ], [ "toList", "org.apache.commons.collections4", "EnumerationUtils", "public static List<String> toList(final StringTokenizer stringTokenizer)" ], [ "unmodifiableQueue", "org.apache.commons.collections4", "QueueUtils", "public static <E> Queue<E> unmodifiableQueue(final Queue<? extends E> queue)" ], [ "predicatedQueue", "org.apache.commons.collections4", "QueueUtils", "public static <E> Queue<E> predicatedQueue(final Queue<E> queue, final Predicate<? super E> predicate)" ], [ "transformingQueue", "org.apache.commons.collections4", "QueueUtils", "public static <E> Queue<E> transformingQueue(final Queue<E> queue, final Transformer<? super E, ? extends E> transformer)" ], [ "emptyQueue", "org.apache.commons.collections4", "QueueUtils", "public static <E> Queue<E> emptyQueue()" ], [ "synchronizedBag", "org.apache.commons.collections4.bag", "SynchronizedBag", "public static <E> SynchronizedBag<E> synchronizedBag(final Bag<E> bag)" ], [ "collectionBag", "org.apache.commons.collections4.bag", "CollectionBag", "public static <E> Bag<E> collectionBag(final Bag<E> bag)" ], [ "unmodifiableBag", "org.apache.commons.collections4.bag", "UnmodifiableBag", "public static <E> Bag<E> unmodifiableBag(final Bag<? extends E> bag)" ], [ "predicatedSortedBag", "org.apache.commons.collections4.bag", "PredicatedSortedBag", "public static <E> PredicatedSortedBag<E> predicatedSortedBag(final SortedBag<E> bag, final Predicate<? super E> predicate)" ], [ "unmodifiableSortedBag", "org.apache.commons.collections4.bag", "UnmodifiableSortedBag", "public static <E> SortedBag<E> unmodifiableSortedBag(final SortedBag<E> bag)" ], [ "transformingSortedBag", "org.apache.commons.collections4.bag", "TransformedSortedBag", "public static <E> TransformedSortedBag<E> transformingSortedBag(final SortedBag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedSortedBag", "org.apache.commons.collections4.bag", "TransformedSortedBag", "public static <E> TransformedSortedBag<E> transformedSortedBag(final SortedBag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "predicatedBag", "org.apache.commons.collections4.bag", "PredicatedBag", "public static <E> PredicatedBag<E> predicatedBag(final Bag<E> bag, final Predicate<? super E> predicate)" ], [ "synchronizedSortedBag", "org.apache.commons.collections4.bag", "SynchronizedSortedBag", "public static <E> SynchronizedSortedBag<E> synchronizedSortedBag(final SortedBag<E> bag)" ], [ "collectionSortedBag", "org.apache.commons.collections4.bag", "CollectionSortedBag", "public static <E> SortedBag<E> collectionSortedBag(final SortedBag<E> bag)" ], [ "transformingBag", "org.apache.commons.collections4.bag", "TransformedBag", "public static <E> Bag<E> transformingBag(final Bag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "transformedBag", "org.apache.commons.collections4.bag", "TransformedBag", "public static <E> Bag<E> transformedBag(final Bag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "predicatedMultiSet", "org.apache.commons.collections4.multiset", "PredicatedMultiSet", "public static <E> PredicatedMultiSet<E> predicatedMultiSet(final MultiSet<E> multiset, final Predicate<? super E> predicate)" ], [ "unmodifiableMultiSet", "org.apache.commons.collections4.multiset", "UnmodifiableMultiSet", "public static <E> MultiSet<E> unmodifiableMultiSet(final MultiSet<? extends E> multiset)" ], [ "synchronizedMultiSet", "org.apache.commons.collections4.multiset", "SynchronizedMultiSet", "public static <E> SynchronizedMultiSet<E> synchronizedMultiSet(final MultiSet<E> multiset)" ], [ "synchronizedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> synchronizedBag(final Bag<E> bag)" ], [ "unmodifiableBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> unmodifiableBag(final Bag<? extends E> bag)" ], [ "predicatedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> predicatedBag(final Bag<E> bag, final Predicate<? super E> predicate)" ], [ "transformingBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> transformingBag(final Bag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "collectionBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> collectionBag(final Bag<E> bag)" ], [ "synchronizedSortedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> SortedBag<E> synchronizedSortedBag(final SortedBag<E> bag)" ], [ "unmodifiableSortedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> SortedBag<E> unmodifiableSortedBag(final SortedBag<E> bag)" ], [ "predicatedSortedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> SortedBag<E> predicatedSortedBag(final SortedBag<E> bag, final Predicate<? super E> predicate)" ], [ "transformingSortedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> SortedBag<E> transformingSortedBag(final SortedBag<E> bag, final Transformer<? super E, ? extends E> transformer)" ], [ "emptyBag", "org.apache.commons.collections4", "BagUtils", "public static <E> Bag<E> emptyBag()" ], [ "emptySortedBag", "org.apache.commons.collections4", "BagUtils", "public static <E> SortedBag<E> emptySortedBag()" ], [ "resettableEmptyListIterator", "org.apache.commons.collections4.iterators", "EmptyListIterator", "public static <E> ResettableListIterator<E> resettableEmptyListIterator()" ], [ "emptyListIterator", "org.apache.commons.collections4.iterators", "EmptyListIterator", "public static <E> ListIterator<E> emptyListIterator()" ], [ "unmodifiableOrderedMapIterator", "org.apache.commons.collections4.iterators", "UnmodifiableOrderedMapIterator", "public static <K, V> OrderedMapIterator<K, V> unmodifiableOrderedMapIterator(final OrderedMapIterator<K, ? extends V> iterator)" ], [ "unmodifiableIterator", "org.apache.commons.collections4.iterators", "UnmodifiableIterator", "public static <E> Iterator<E> unmodifiableIterator(final Iterator<? extends E> iterator)" ], [ "peekingIterator", "org.apache.commons.collections4.iterators", "PeekingIterator", "public static <E> PeekingIterator<E> peekingIterator(final Iterator<? extends E> iterator)" ], [ "emptyMapIterator", "org.apache.commons.collections4.iterators", "EmptyMapIterator", "public static <K, V> MapIterator<K, V> emptyMapIterator()" ], [ "emptyOrderedIterator", "org.apache.commons.collections4.iterators", "EmptyOrderedIterator", "public static <E> OrderedIterator<E> emptyOrderedIterator()" ], [ "umodifiableListIterator", "org.apache.commons.collections4.iterators", "UnmodifiableListIterator", "public static <E> ListIterator<E> umodifiableListIterator(final ListIterator<? extends E> iterator)" ], [ "emptyOrderedMapIterator", "org.apache.commons.collections4.iterators", "EmptyOrderedMapIterator", "public static <K, V> OrderedMapIterator<K, V> emptyOrderedMapIterator()" ], [ "unmodifiableMapIterator", "org.apache.commons.collections4.iterators", "UnmodifiableMapIterator", "public static <K, V> MapIterator<K, V> unmodifiableMapIterator(final MapIterator<? extends K, ? extends V> iterator)" ], [ "resettableEmptyIterator", "org.apache.commons.collections4.iterators", "EmptyIterator", "public static <E> ResettableIterator<E> resettableEmptyIterator()" ], [ "emptyIterator", "org.apache.commons.collections4.iterators", "EmptyIterator", "public static <E> Iterator<E> emptyIterator()" ], [ "pushbackIterator", "org.apache.commons.collections4.iterators", "PushbackIterator", "public static <E> PushbackIterator<E> pushbackIterator(final Iterator<? extends E> iterator)" ], [ "readableMap", "org.apache.commons.collections4", "SplitMapUtils", "public static <K, V> IterableMap<K, V> readableMap(final Get<K, V> get)" ], [ "writableMap", "org.apache.commons.collections4", "SplitMapUtils", "public static <K, V> Map<K, V> writableMap(final Put<K, V> put)" ] ],
  "tokensProjectClassesNonPrivateStaticAttributes" : [ [ "EMPTY_ITERATOR", "org.apache.commons.collections4", "IteratorUtils", "public static final ResettableIterator EMPTY_ITERATOR = EmptyIterator.RESETTABLE_INSTANCE;" ], [ "EMPTY_LIST_ITERATOR", "org.apache.commons.collections4", "IteratorUtils", "public static final ResettableListIterator EMPTY_LIST_ITERATOR = EmptyListIterator.RESETTABLE_INSTANCE;" ], [ "EMPTY_ORDERED_ITERATOR", "org.apache.commons.collections4", "IteratorUtils", "public static final OrderedIterator EMPTY_ORDERED_ITERATOR = EmptyOrderedIterator.INSTANCE;" ], [ "EMPTY_MAP_ITERATOR", "org.apache.commons.collections4", "IteratorUtils", "public static final MapIterator EMPTY_MAP_ITERATOR = EmptyMapIterator.INSTANCE;" ], [ "EMPTY_ORDERED_MAP_ITERATOR", "org.apache.commons.collections4", "IteratorUtils", "public static final OrderedMapIterator EMPTY_ORDERED_MAP_ITERATOR = EmptyOrderedMapIterator.INSTANCE;" ], [ "NATURAL_COMPARATOR", "org.apache.commons.collections4", "ComparatorUtils", "public static final Comparator NATURAL_COMPARATOR = ComparableComparator.<Comparable>comparableComparator();" ], [ "EMPTY_MULTI_VALUED_MAP", "org.apache.commons.collections4", "MultiMapUtils", "public static final MultiValuedMap EMPTY_MULTI_VALUED_MAP = UnmodifiableMultiValuedMap.unmodifiableMultiValuedMap(new ArrayListValuedHashMap(0, 0));" ], [ "EMPTY_SORTED_MAP", "org.apache.commons.collections4", "MapUtils", "public static final SortedMap EMPTY_SORTED_MAP = UnmodifiableSortedMap.unmodifiableSortedMap(new TreeMap<Object, Object>());" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "DefaultEquator", "public static final DefaultEquator INSTANCE = new DefaultEquator<Object>();" ], [ "HASHCODE_NULL", "org.apache.commons.collections4.functors", "DefaultEquator", "public static final int HASHCODE_NULL = -1;" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "ExceptionClosure", "public static final Closure INSTANCE = new ExceptionClosure<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "NOPClosure", "public static final Closure INSTANCE = new NOPClosure<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "NullPredicate", "public static final Predicate INSTANCE = new NullPredicate<Object>();" ], [ "NULL_INSTANCE", "org.apache.commons.collections4.functors", "ConstantTransformer", "public static final Transformer NULL_INSTANCE = new ConstantTransformer<Object, Object>(null);" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "ExceptionTransformer", "public static final Transformer INSTANCE = new ExceptionTransformer<Object, Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "NOPTransformer", "public static final Transformer INSTANCE = new NOPTransformer<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "ExceptionFactory", "public static final Factory INSTANCE = new ExceptionFactory<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "ExceptionPredicate", "public static final Predicate INSTANCE = new ExceptionPredicate<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "FalsePredicate", "public static final Predicate INSTANCE = new FalsePredicate<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "CloneTransformer", "public static final Transformer INSTANCE = new CloneTransformer<Object>();" ], [ "NULL_INSTANCE", "org.apache.commons.collections4.functors", "ConstantFactory", "public static final Factory NULL_INSTANCE = new ConstantFactory<Object>(null);" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "TruePredicate", "public static final Predicate INSTANCE = new TruePredicate<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.functors", "NotNullPredicate", "public static final Predicate INSTANCE = new NotNullPredicate<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.comparators", "ComparableComparator", "public static final ComparableComparator INSTANCE = new ComparableComparator();" ], [ "EMPTY_COLLECTION", "org.apache.commons.collections4", "CollectionUtils", "public static final Collection EMPTY_COLLECTION = UnmodifiableCollection.unmodifiableCollection(new ArrayList<Object>());" ], [ "EMPTY_ITERABLE", "org.apache.commons.collections4", "IterableUtils", "static final FluentIterable EMPTY_ITERABLE = new FluentIterable<Object>() {\n\n    @Override\n    public Iterator<Object> iterator() {\n        return IteratorUtils.emptyIterator();\n    }\n};" ], [ "NULL_BIT_KEY", "org.apache.commons.collections4.trie", "KeyAnalyzer", "public static final int NULL_BIT_KEY = -1;" ], [ "EQUAL_BIT_KEY", "org.apache.commons.collections4.trie", "KeyAnalyzer", "public static final int EQUAL_BIT_KEY = -2;" ], [ "OUT_OF_BOUNDS_BIT_KEY", "org.apache.commons.collections4.trie", "KeyAnalyzer", "public static final int OUT_OF_BOUNDS_BIT_KEY = -3;" ], [ "INSTANCE", "org.apache.commons.collections4.trie.analyzer", "StringKeyAnalyzer", "public static final StringKeyAnalyzer INSTANCE = new StringKeyAnalyzer();" ], [ "LENGTH", "org.apache.commons.collections4.trie.analyzer", "StringKeyAnalyzer", "public static final int LENGTH = Character.SIZE;" ], [ "NO_NEXT_ENTRY", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String NO_NEXT_ENTRY = \"No next() entry in the iteration\";" ], [ "NO_PREVIOUS_ENTRY", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String NO_PREVIOUS_ENTRY = \"No previous() entry in the iteration\";" ], [ "REMOVE_INVALID", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String REMOVE_INVALID = \"remove() can only be called once after next()\";" ], [ "GETKEY_INVALID", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String GETKEY_INVALID = \"getKey() can only be called after next() and before remove()\";" ], [ "GETVALUE_INVALID", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String GETVALUE_INVALID = \"getValue() can only be called after next() and before remove()\";" ], [ "SETVALUE_INVALID", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final String SETVALUE_INVALID = \"setValue() can only be called after next() and before remove()\";" ], [ "DEFAULT_CAPACITY", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final int DEFAULT_CAPACITY = 16;" ], [ "DEFAULT_THRESHOLD", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final int DEFAULT_THRESHOLD = 12;" ], [ "DEFAULT_LOAD_FACTOR", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final float DEFAULT_LOAD_FACTOR = 0.75f;" ], [ "MAXIMUM_CAPACITY", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final int MAXIMUM_CAPACITY = 1 << 30;" ], [ "NULL", "org.apache.commons.collections4.map", "AbstractHashedMap", "protected static final Object NULL = new Object();" ], [ "DEFAULT_MAX_SIZE", "org.apache.commons.collections4.map", "LRUMap", "protected static final int DEFAULT_MAX_SIZE = 100;" ], [ "EMPTY_MULTISET", "org.apache.commons.collections4", "MultiSetUtils", "public static final MultiSet EMPTY_MULTISET = UnmodifiableMultiSet.unmodifiableMultiSet(new HashMultiSet<Object>());" ], [ "EMPTY_SORTED_SET", "org.apache.commons.collections4", "SetUtils", "public static final SortedSet EMPTY_SORTED_SET = UnmodifiableSortedSet.unmodifiableSortedSet(new TreeSet<Object>());" ], [ "EMPTY_QUEUE", "org.apache.commons.collections4", "QueueUtils", "public static final Queue EMPTY_QUEUE = UnmodifiableQueue.unmodifiableQueue(new LinkedList<Object>());" ], [ "EMPTY_BAG", "org.apache.commons.collections4", "BagUtils", "public static final Bag EMPTY_BAG = UnmodifiableBag.unmodifiableBag(new HashBag<Object>());" ], [ "EMPTY_SORTED_BAG", "org.apache.commons.collections4", "BagUtils", "public static final Bag EMPTY_SORTED_BAG = UnmodifiableSortedBag.unmodifiableSortedBag(new TreeBag<Object>());" ], [ "RESETTABLE_INSTANCE", "org.apache.commons.collections4.iterators", "EmptyListIterator", "public static final ResettableListIterator RESETTABLE_INSTANCE = new EmptyListIterator<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.iterators", "EmptyListIterator", "public static final ListIterator INSTANCE = RESETTABLE_INSTANCE;" ], [ "INSTANCE", "org.apache.commons.collections4.iterators", "EmptyMapIterator", "public static final MapIterator INSTANCE = new EmptyMapIterator<Object, Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.iterators", "EmptyOrderedIterator", "public static final OrderedIterator INSTANCE = new EmptyOrderedIterator<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.iterators", "EmptyOrderedMapIterator", "public static final OrderedMapIterator INSTANCE = new EmptyOrderedMapIterator<Object, Object>();" ], [ "RESETTABLE_INSTANCE", "org.apache.commons.collections4.iterators", "EmptyIterator", "public static final ResettableIterator RESETTABLE_INSTANCE = new EmptyIterator<Object>();" ], [ "INSTANCE", "org.apache.commons.collections4.iterators", "EmptyIterator", "public static final Iterator INSTANCE = RESETTABLE_INSTANCE;" ] ],
  "tokensMethodJavadocValues" : [ [ "\"isEmpty\"", "String" ] ],
  "tokensMethodArguments" : [ [ "methodName", "java.lang", "String" ], [ "paramTypes", "", "Class<?>[]" ], [ "args", "", "Object[]" ] ],
  "tokensMethodVariablesNonPrivateNonStaticNonVoidMethods" : [ [ "equals", "java.lang", "Object", "public boolean equals(Object arg0)" ], [ "getClass", "java.lang", "Object", "public final native Class<? extends Object> getClass()" ], [ "hashCode", "java.lang", "Object", "public native int hashCode()" ], [ "clone", "java.lang", "Object", "protected native Object clone() throws CloneNotSupportedException" ], [ "toString", "java.lang", "Object", "public String toString()" ], [ "codePointCount", "java.lang", "String", "public int codePointCount(int arg0, int arg1)" ], [ "indexOf", "java.lang", "String", "public int indexOf(int arg0)" ], [ "value", "java.lang", "String", "byte[] value()" ], [ "stripTrailing", "java.lang", "String", "public String stripTrailing()" ], [ "coder", "java.lang", "String", "byte coder()" ], [ "compareTo", "java.lang", "String", "public int compareTo(String arg0)" ], [ "compareToIgnoreCase", "java.lang", "String", "public int compareToIgnoreCase(String arg0)" ], [ "lines", "java.lang", "String", "public Stream<String> lines()" ], [ "concat", "java.lang", "String", "public String concat(String arg0)" ], [ "describeConstable", "java.lang", "String", "public Optional<String> describeConstable()" ], [ "equals", "java.lang", "String", "public boolean equals(Object arg0)" ], [ "replaceAll", "java.lang", "String", "public String replaceAll(String arg0, String arg1)" ], [ "isBlank", "java.lang", "String", "public boolean isBlank()" ], [ "indexOf", "java.lang", "String", "public int indexOf(String arg0, int arg1)" ], [ "chars", "java.lang", "String", "public IntStream chars()" ], [ "equalsIgnoreCase", "java.lang", "String", "public boolean equalsIgnoreCase(String arg0)" ], [ "resolveConstantDesc", "java.lang", "String", "public String resolveConstantDesc(MethodHandles.Lookup arg0)" ], [ "isLatin1", "java.lang", "String", "boolean isLatin1()" ], [ "strip", "java.lang", "String", "public String strip()" ], [ "split", "java.lang", "String", "public String[] split(String arg0)" ], [ "stripIndent", "java.lang", "String", "public String stripIndent()" ], [ "stripLeading", "java.lang", "String", "public String stripLeading()" ], [ "indexOf", "java.lang", "String", "public int indexOf(String arg0)" ], [ "replace", "java.lang", "String", "public String replace(CharSequence arg0, CharSequence arg1)" ], [ "split", "java.lang", "String", "public String[] split(String arg0, int arg1)" ], [ "toString", "java.lang", "String", "public String toString()" ], [ "getBytes", "java.lang", "String", "public byte[] getBytes(Charset arg0)" ], [ "regionMatches", "java.lang", "String", "public boolean regionMatches(boolean arg0, int arg1, String arg2, int arg3, int arg4)" ], [ "lastIndexOf", "java.lang", "String", "public int lastIndexOf(int arg0)" ], [ "toLowerCase", "java.lang", "String", "public String toLowerCase()" ], [ "codePointBefore", "java.lang", "String", "public int codePointBefore(int arg0)" ], [ "lastIndexOf", "java.lang", "String", "public int lastIndexOf(String arg0, int arg1)" ], [ "toCharArray", "java.lang", "String", "public char[] toCharArray()" ], [ "translateEscapes", "java.lang", "String", "public String translateEscapes()" ], [ "toUpperCase", "java.lang", "String", "public String toUpperCase()" ], [ "substring", "java.lang", "String", "public String substring(int arg0)" ], [ "isEmpty", "java.lang", "String", "public boolean isEmpty()" ], [ "charAt", "java.lang", "String", "public char charAt(int arg0)" ], [ "subSequence", "java.lang", "String", "public CharSequence subSequence(int arg0, int arg1)" ], [ "length", "java.lang", "String", "public int length()" ], [ "codePoints", "java.lang", "String", "public IntStream codePoints()" ], [ "startsWith", "java.lang", "String", "public boolean startsWith(String arg0)" ], [ "toLowerCase", "java.lang", "String", "public String toLowerCase(Locale arg0)" ], [ "indent", "java.lang", "String", "public String indent(int arg0)" ], [ "lastIndexOf", "java.lang", "String", "public int lastIndexOf(String arg0)" ], [ "codePointAt", "java.lang", "String", "public int codePointAt(int arg0)" ], [ "indexOf", "java.lang", "String", "public int indexOf(int arg0, int arg1)" ], [ "startsWith", "java.lang", "String", "public boolean startsWith(String arg0, int arg1)" ], [ "endsWith", "java.lang", "String", "public boolean endsWith(String arg0)" ], [ "getBytes", "java.lang", "String", "public byte[] getBytes(String arg0) throws UnsupportedEncodingException" ], [ "transform", "java.lang", "String", "public <R> R transform(Function<? super String, ? extends R> arg0)" ], [ "hashCode", "java.lang", "String", "public int hashCode()" ], [ "trim", "java.lang", "String", "public String trim()" ], [ "contentEquals", "java.lang", "String", "public boolean contentEquals(StringBuffer arg0)" ], [ "regionMatches", "java.lang", "String", "public boolean regionMatches(int arg0, String arg1, int arg2, int arg3)" ], [ "replace", "java.lang", "String", "public String replace(char arg0, char arg1)" ], [ "toUpperCase", "java.lang", "String", "public String toUpperCase(Locale arg0)" ], [ "offsetByCodePoints", "java.lang", "String", "public int offsetByCodePoints(int arg0, int arg1)" ], [ "replaceFirst", "java.lang", "String", "public String replaceFirst(String arg0, String arg1)" ], [ "matches", "java.lang", "String", "public boolean matches(String arg0)" ], [ "substring", "java.lang", "String", "public String substring(int arg0, int arg1)" ], [ "contains", "java.lang", "String", "public boolean contains(CharSequence arg0)" ], [ "contentEquals", "java.lang", "String", "public boolean contentEquals(CharSequence arg0)" ], [ "getBytes", "java.lang", "String", "public byte[] getBytes()" ], [ "repeat", "java.lang", "String", "public String repeat(int arg0)" ], [ "intern", "java.lang", "String", "public native String intern()" ], [ "formatted", "java.lang", "String", "public String formatted(Object[] arg0)" ], [ "lastIndexOf", "java.lang", "String", "public int lastIndexOf(int arg0, int arg1)" ], [ "compareTo", "java.lang", "Comparable", "public abstract int compareTo(T arg0)" ], [ "codePoints", "java.lang", "CharSequence", "public default IntStream codePoints()" ], [ "chars", "java.lang", "CharSequence", "public default IntStream chars()" ], [ "charAt", "java.lang", "CharSequence", "public abstract char charAt(int arg0)" ], [ "subSequence", "java.lang", "CharSequence", "public abstract CharSequence subSequence(int arg0, int arg1)" ], [ "length", "java.lang", "CharSequence", "public abstract int length()" ], [ "toString", "java.lang", "CharSequence", "public abstract String toString()" ], [ "isEmpty", "java.lang", "CharSequence", "public default boolean isEmpty()" ], [ "describeConstable", "java.lang.constant", "Constable", "public abstract Optional<? extends ConstantDesc> describeConstable()" ], [ "resolveConstantDesc", "java.lang.constant", "ConstantDesc", "public abstract Object resolveConstantDesc(MethodHandles.Lookup arg0) throws ReflectiveOperationException" ], [ "equals", "", "java.lang.Class<?>[]", "public boolean equals(Object);" ], [ "toString", "", "java.lang.Class<?>[]", "public String toString()" ], [ "hashCode", "", "java.lang.Class<?>[]", "public native int hashCode()" ], [ "getClass", "", "java.lang.Class<?>[]", "public final native Class getClass();" ], [ "clone", "", "java.lang.Class<?>[]", "public T[] clone();" ], [ "equals", "", "java.lang.Object[]", "public boolean equals(Object);" ], [ "toString", "", "java.lang.Object[]", "public String toString()" ], [ "hashCode", "", "java.lang.Object[]", "public native int hashCode()" ], [ "getClass", "", "java.lang.Object[]", "public final native Class getClass();" ], [ "clone", "", "java.lang.Object[]", "public T[] clone();" ], [ "evaluate", "org.apache.commons.collections4", "Predicate", "public abstract boolean evaluate(T arg0)" ] ],
  "tokensMethodVariablesNonPrivateNonStaticAttributes" : [ [ "length", "java.lang", "Class[]", "public final int length;" ], [ "length", "java.lang", "Object[]", "public final int length;" ] ],
  "tokensOracleVariablesNonPrivateNonStaticNonVoidMethods" : [ ],
  "tokensOracleVariablesNonPrivateNonStaticAttributes" : [ ]
} ]