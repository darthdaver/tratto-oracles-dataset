[ {
  "id" : 22740,
  "oracle" : ";",
  "oracleType" : "PRE",
  "projectName" : "commons-math3-3.6.1",
  "packageName" : "org.apache.commons.math3.dfp",
  "className" : "Dfp",
  "javadocTag" : "@param d instance to copy",
  "methodJavadoc" : "    /** Create an instance by copying an existing one.\n     * Use this internally in preference to constructors to facilitate subclasses.\n     * @param d instance to copy\n     * @return a new instance with the same value as d\n     */",
  "methodSourceCode" : "public Dfp newInstance(final Dfp d){\n    // make sure we don't mix number with different precision\n    if (field.getRadixDigits() != d.field.getRadixDigits()) {\n        field.setIEEEFlagsBits(DfpField.FLAG_INVALID);\n        final Dfp result = newInstance(getZero());\n        result.nans = QNAN;\n        return dotrap(DfpField.FLAG_INVALID, NEW_INSTANCE_TRAP, d, result);\n    }\n    return new Dfp(d);\n}",
  "classJavadoc" : "/**\n *  Decimal floating point library for Java\n *\n *  <p>Another floating point class.  This one is built using radix 10000\n *  which is 10<sup>4</sup>, so its almost decimal.</p>\n *\n *  <p>The design goals here are:\n *  <ol>\n *    <li>Decimal math, or close to it</li>\n *    <li>Settable precision (but no mix between numbers using different settings)</li>\n *    <li>Portability.  Code should be kept as portable as possible.</li>\n *    <li>Performance</li>\n *    <li>Accuracy  - Results should always be +/- 1 ULP for basic\n *         algebraic operation</li>\n *    <li>Comply with IEEE 854-1987 as much as possible.\n *         (See IEEE 854-1987 notes below)</li>\n *  </ol></p>\n *\n *  <p>Trade offs:\n *  <ol>\n *    <li>Memory foot print.  I'm using more memory than necessary to\n *         represent numbers to get better performance.</li>\n *    <li>Digits are bigger, so rounding is a greater loss.  So, if you\n *         really need 12 decimal digits, better use 4 base 10000 digits\n *         there can be one partially filled.</li>\n *  </ol></p>\n *\n *  <p>Numbers are represented  in the following form:\n *  <pre>\n *  n  =  sign &times; mant &times; (radix)<sup>exp</sup>;</p>\n *  </pre>\n *  where sign is &plusmn;1, mantissa represents a fractional number between\n *  zero and one.  mant[0] is the least significant digit.\n *  exp is in the range of -32767 to 32768</p>\n *\n *  <p>IEEE 854-1987  Notes and differences</p>\n *\n *  <p>IEEE 854 requires the radix to be either 2 or 10.  The radix here is\n *  10000, so that requirement is not met, but  it is possible that a\n *  subclassed can be made to make it behave as a radix 10\n *  number.  It is my opinion that if it looks and behaves as a radix\n *  10 number then it is one and that requirement would be met.</p>\n *\n *  <p>The radix of 10000 was chosen because it should be faster to operate\n *  on 4 decimal digits at once instead of one at a time.  Radix 10 behavior\n *  can be realized by adding an additional rounding step to ensure that\n *  the number of decimal digits represented is constant.</p>\n *\n *  <p>The IEEE standard specifically leaves out internal data encoding,\n *  so it is reasonable to conclude that such a subclass of this radix\n *  10000 system is merely an encoding of a radix 10 system.</p>\n *\n *  <p>IEEE 854 also specifies the existence of \"sub-normal\" numbers.  This\n *  class does not contain any such entities.  The most significant radix\n *  10000 digit is always non-zero.  Instead, we support \"gradual underflow\"\n *  by raising the underflow flag for numbers less with exponent less than\n *  expMin, but don't flush to zero until the exponent reaches MIN_EXP-digits.\n *  Thus the smallest number we can represent would be:\n *  1E(-(MIN_EXP-digits-1)*4),  eg, for digits=5, MIN_EXP=-32767, that would\n *  be 1e-131092.</p>\n *\n *  <p>IEEE 854 defines that the implied radix point lies just to the right\n *  of the most significant digit and to the left of the remaining digits.\n *  This implementation puts the implied radix point to the left of all\n *  digits including the most significant one.  The most significant digit\n *  here is the one just to the right of the radix point.  This is a fine\n *  detail and is really only a matter of definition.  Any side effects of\n *  this can be rendered invisible by a subclass.</p>\n * @see DfpField\n * @since 2.2\n */",
  "classSourceCode" : "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.commons.math3.dfp;\n\nimport java.util.Arrays;\n\nimport org.apache.commons.math3.RealFieldElement;\nimport org.apache.commons.math3.exception.DimensionMismatchException;\nimport org.apache.commons.math3.util.FastMath;\n\n/**\n *  Decimal floating point library for Java\n *\n *  <p>Another floating point class.  This one is built using radix 10000\n *  which is 10<sup>4</sup>, so its almost decimal.</p>\n *\n *  <p>The design goals here are:\n *  <ol>\n *    <li>Decimal math, or close to it</li>\n *    <li>Settable precision (but no mix between numbers using different settings)</li>\n *    <li>Portability.  Code should be kept as portable as possible.</li>\n *    <li>Performance</li>\n *    <li>Accuracy  - Results should always be +/- 1 ULP for basic\n *         algebraic operation</li>\n *    <li>Comply with IEEE 854-1987 as much as possible.\n *         (See IEEE 854-1987 notes below)</li>\n *  </ol></p>\n *\n *  <p>Trade offs:\n *  <ol>\n *    <li>Memory foot print.  I'm using more memory than necessary to\n *         represent numbers to get better performance.</li>\n *    <li>Digits are bigger, so rounding is a greater loss.  So, if you\n *         really need 12 decimal digits, better use 4 base 10000 digits\n *         there can be one partially filled.</li>\n *  </ol></p>\n *\n *  <p>Numbers are represented  in the following form:\n *  <pre>\n *  n  =  sign &times; mant &times; (radix)<sup>exp</sup>;</p>\n *  </pre>\n *  where sign is &plusmn;1, mantissa represents a fractional number between\n *  zero and one.  mant[0] is the least significant digit.\n *  exp is in the range of -32767 to 32768</p>\n *\n *  <p>IEEE 854-1987  Notes and differences</p>\n *\n *  <p>IEEE 854 requires the radix to be either 2 or 10.  The radix here is\n *  10000, so that requirement is not met, but  it is possible that a\n *  subclassed can be made to make it behave as a radix 10\n *  number.  It is my opinion that if it looks and behaves as a radix\n *  10 number then it is one and that requirement would be met.</p>\n *\n *  <p>The radix of 10000 was chosen because it should be faster to operate\n *  on 4 decimal digits at once instead of one at a time.  Radix 10 behavior\n *  can be realized by adding an additional rounding step to ensure that\n *  the number of decimal digits represented is constant.</p>\n *\n *  <p>The IEEE standard specifically leaves out internal data encoding,\n *  so it is reasonable to conclude that such a subclass of this radix\n *  10000 system is merely an encoding of a radix 10 system.</p>\n *\n *  <p>IEEE 854 also specifies the existence of \"sub-normal\" numbers.  This\n *  class does not contain any such entities.  The most significant radix\n *  10000 digit is always non-zero.  Instead, we support \"gradual underflow\"\n *  by raising the underflow flag for numbers less with exponent less than\n *  expMin, but don't flush to zero until the exponent reaches MIN_EXP-digits.\n *  Thus the smallest number we can represent would be:\n *  1E(-(MIN_EXP-digits-1)*4),  eg, for digits=5, MIN_EXP=-32767, that would\n *  be 1e-131092.</p>\n *\n *  <p>IEEE 854 defines that the implied radix point lies just to the right\n *  of the most significant digit and to the left of the remaining digits.\n *  This implementation puts the implied radix point to the left of all\n *  digits including the most significant one.  The most significant digit\n *  here is the one just to the right of the radix point.  This is a fine\n *  detail and is really only a matter of definition.  Any side effects of\n *  this can be rendered invisible by a subclass.</p>\n * @see DfpField\n * @since 2.2\n */\npublic class Dfp implements RealFieldElement<Dfp> {\n\n    /** The radix, or base of this system.  Set to 10000 */\n    public static final int RADIX = 10000;\n\n    /** The minimum exponent before underflow is signaled.  Flush to zero\n     *  occurs at minExp-DIGITS */\n    public static final int MIN_EXP = -32767;\n\n    /** The maximum exponent before overflow is signaled and results flushed\n     *  to infinity */\n    public static final int MAX_EXP =  32768;\n\n    /** The amount under/overflows are scaled by before going to trap handler */\n    public static final int ERR_SCALE = 32760;\n\n    /** Indicator value for normal finite numbers. */\n    public static final byte FINITE = 0;\n\n    /** Indicator value for Infinity. */\n    public static final byte INFINITE = 1;\n\n    /** Indicator value for signaling NaN. */\n    public static final byte SNAN = 2;\n\n    /** Indicator value for quiet NaN. */\n    public static final byte QNAN = 3;\n\n    /** String for NaN representation. */\n    private static final String NAN_STRING = \"NaN\";\n\n    /** String for positive infinity representation. */\n    private static final String POS_INFINITY_STRING = \"Infinity\";\n\n    /** String for negative infinity representation. */\n    private static final String NEG_INFINITY_STRING = \"-Infinity\";\n\n    /** Name for traps triggered by addition. */\n    private static final String ADD_TRAP = \"add\";\n\n    /** Name for traps triggered by multiplication. */\n    private static final String MULTIPLY_TRAP = \"multiply\";\n\n    /** Name for traps triggered by division. */\n    private static final String DIVIDE_TRAP = \"divide\";\n\n    /** Name for traps triggered by square root. */\n    private static final String SQRT_TRAP = \"sqrt\";\n\n    /** Name for traps triggered by alignment. */\n    private static final String ALIGN_TRAP = \"align\";\n\n    /** Name for traps triggered by truncation. */\n    private static final String TRUNC_TRAP = \"trunc\";\n\n    /** Name for traps triggered by nextAfter. */\n    private static final String NEXT_AFTER_TRAP = \"nextAfter\";\n\n    /** Name for traps triggered by lessThan. */\n    private static final String LESS_THAN_TRAP = \"lessThan\";\n\n    /** Name for traps triggered by greaterThan. */\n    private static final String GREATER_THAN_TRAP = \"greaterThan\";\n\n    /** Name for traps triggered by newInstance. */\n    private static final String NEW_INSTANCE_TRAP = \"newInstance\";\n\n    /** Mantissa. */\n    protected int[] mant;\n\n    /** Sign bit: 1 for positive, -1 for negative. */\n    protected byte sign;\n\n    /** Exponent. */\n    protected int exp;\n\n    /** Indicator for non-finite / non-number values. */\n    protected byte nans;\n\n    /** Factory building similar Dfp's. */\n    private final DfpField field;\n\n    /** Makes an instance with a value of zero.\n     * @param field field to which this instance belongs\n     */\n    protected Dfp(final DfpField field) {\n        mant = new int[field.getRadixDigits()];\n        sign = 1;\n        exp = 0;\n        nans = FINITE;\n        this.field = field;\n    }\n\n    /** Create an instance from a byte value.\n     * @param field field to which this instance belongs\n     * @param x value to convert to an instance\n     */\n    protected Dfp(final DfpField field, byte x) {\n        this(field, (long) x);\n    }\n\n    /** Create an instance from an int value.\n     * @param field field to which this instance belongs\n     * @param x value to convert to an instance\n     */\n    protected Dfp(final DfpField field, int x) {\n        this(field, (long) x);\n    }\n\n    /** Create an instance from a long value.\n     * @param field field to which this instance belongs\n     * @param x value to convert to an instance\n     */\n    protected Dfp(final DfpField field, long x) {\n\n        // initialize as if 0\n        mant = new int[field.getRadixDigits()];\n        nans = FINITE;\n        this.field = field;\n\n        boolean isLongMin = false;\n        if (x == Long.MIN_VALUE) {\n            // special case for Long.MIN_VALUE (-9223372036854775808)\n            // we must shift it before taking its absolute value\n            isLongMin = true;\n            ++x;\n        }\n\n        // set the sign\n        if (x < 0) {\n            sign = -1;\n            x = -x;\n        } else {\n            sign = 1;\n        }\n\n        exp = 0;\n        while (x != 0) {\n            System.arraycopy(mant, mant.length - exp, mant, mant.length - 1 - exp, exp);\n            mant[mant.length - 1] = (int) (x % RADIX);\n            x /= RADIX;\n            exp++;\n        }\n\n        if (isLongMin) {\n            // remove the shift added for Long.MIN_VALUE\n            // we know in this case that fixing the last digit is sufficient\n            for (int i = 0; i < mant.length - 1; i++) {\n                if (mant[i] != 0) {\n                    mant[i]++;\n                    break;\n                }\n            }\n        }\n    }\n\n    /** Create an instance from a double value.\n     * @param field field to which this instance belongs\n     * @param x value to convert to an instance\n     */\n    protected Dfp(final DfpField field, double x) {\n\n        // initialize as if 0\n        mant = new int[field.getRadixDigits()];\n        sign = 1;\n        exp = 0;\n        nans = FINITE;\n        this.field = field;\n\n        long bits = Double.doubleToLongBits(x);\n        long mantissa = bits & 0x000fffffffffffffL;\n        int exponent = (int) ((bits & 0x7ff0000000000000L) >> 52) - 1023;\n\n        if (exponent == -1023) {\n            // Zero or sub-normal\n            if (x == 0) {\n                // make sure 0 has the right sign\n                if ((bits & 0x8000000000000000L) != 0) {\n                    sign = -1;\n                }\n                return;\n            }\n\n            exponent++;\n\n            // Normalize the subnormal number\n            while ( (mantissa & 0x0010000000000000L) == 0) {\n                exponent--;\n                mantissa <<= 1;\n            }\n            mantissa &= 0x000fffffffffffffL;\n        }\n\n        if (exponent == 1024) {\n            // infinity or NAN\n            if (x != x) {\n                sign = (byte) 1;\n                nans = QNAN;\n            } else if (x < 0) {\n                sign = (byte) -1;\n                nans = INFINITE;\n            } else {\n                sign = (byte) 1;\n                nans = INFINITE;\n            }\n            return;\n        }\n\n        Dfp xdfp = new Dfp(field, mantissa);\n        xdfp = xdfp.divide(new Dfp(field, 4503599627370496l)).add(field.getOne());  // Divide by 2^52, then add one\n        xdfp = xdfp.multiply(DfpMath.pow(field.getTwo(), exponent));\n\n        if ((bits & 0x8000000000000000L) != 0) {\n            xdfp = xdfp.negate();\n        }\n\n        System.arraycopy(xdfp.mant, 0, mant, 0, mant.length);\n        sign = xdfp.sign;\n        exp  = xdfp.exp;\n        nans = xdfp.nans;\n\n    }\n\n    /** Copy constructor.\n     * @param d instance to copy\n     */\n    public Dfp(final Dfp d) {\n        mant  = d.mant.clone();\n        sign  = d.sign;\n        exp   = d.exp;\n        nans  = d.nans;\n        field = d.field;\n    }\n\n    /** Create an instance from a String representation.\n     * @param field field to which this instance belongs\n     * @param s string representation of the instance\n     */\n    protected Dfp(final DfpField field, final String s) {\n\n        // initialize as if 0\n        mant = new int[field.getRadixDigits()];\n        sign = 1;\n        exp = 0;\n        nans = FINITE;\n        this.field = field;\n\n        boolean decimalFound = false;\n        final int rsize = 4;   // size of radix in decimal digits\n        final int offset = 4;  // Starting offset into Striped\n        final char[] striped = new char[getRadixDigits() * rsize + offset * 2];\n\n        // Check some special cases\n        if (s.equals(POS_INFINITY_STRING)) {\n            sign = (byte) 1;\n            nans = INFINITE;\n            return;\n        }\n\n        if (s.equals(NEG_INFINITY_STRING)) {\n            sign = (byte) -1;\n            nans = INFINITE;\n            return;\n        }\n\n        if (s.equals(NAN_STRING)) {\n            sign = (byte) 1;\n            nans = QNAN;\n            return;\n        }\n\n        // Check for scientific notation\n        int p = s.indexOf(\"e\");\n        if (p == -1) { // try upper case?\n            p = s.indexOf(\"E\");\n        }\n\n        final String fpdecimal;\n        int sciexp = 0;\n        if (p != -1) {\n            // scientific notation\n            fpdecimal = s.substring(0, p);\n            String fpexp = s.substring(p+1);\n            boolean negative = false;\n\n            for (int i=0; i<fpexp.length(); i++)\n            {\n                if (fpexp.charAt(i) == '-')\n                {\n                    negative = true;\n                    continue;\n                }\n                if (fpexp.charAt(i) >= '0' && fpexp.charAt(i) <= '9') {\n                    sciexp = sciexp * 10 + fpexp.charAt(i) - '0';\n                }\n            }\n\n            if (negative) {\n                sciexp = -sciexp;\n            }\n        } else {\n            // normal case\n            fpdecimal = s;\n        }\n\n        // If there is a minus sign in the number then it is negative\n        if (fpdecimal.indexOf(\"-\") !=  -1) {\n            sign = -1;\n        }\n\n        // First off, find all of the leading zeros, trailing zeros, and significant digits\n        p = 0;\n\n        // Move p to first significant digit\n        int decimalPos = 0;\n        for (;;) {\n            if (fpdecimal.charAt(p) >= '1' && fpdecimal.charAt(p) <= '9') {\n                break;\n            }\n\n            if (decimalFound && fpdecimal.charAt(p) == '0') {\n                decimalPos--;\n            }\n\n            if (fpdecimal.charAt(p) == '.') {\n                decimalFound = true;\n            }\n\n            p++;\n\n            if (p == fpdecimal.length()) {\n                break;\n            }\n        }\n\n        // Copy the string onto Stripped\n        int q = offset;\n        striped[0] = '0';\n        striped[1] = '0';\n        striped[2] = '0';\n        striped[3] = '0';\n        int significantDigits=0;\n        for(;;) {\n            if (p == (fpdecimal.length())) {\n                break;\n            }\n\n            // Don't want to run pass the end of the array\n            if (q == mant.length*rsize+offset+1) {\n                break;\n            }\n\n            if (fpdecimal.charAt(p) == '.') {\n                decimalFound = true;\n                decimalPos = significantDigits;\n                p++;\n                continue;\n            }\n\n            if (fpdecimal.charAt(p) < '0' || fpdecimal.charAt(p) > '9') {\n                p++;\n                continue;\n            }\n\n            striped[q] = fpdecimal.charAt(p);\n            q++;\n            p++;\n            significantDigits++;\n        }\n\n\n        // If the decimal point has been found then get rid of trailing zeros.\n        if (decimalFound && q != offset) {\n            for (;;) {\n                q--;\n                if (q == offset) {\n                    break;\n                }\n                if (striped[q] == '0') {\n                    significantDigits--;\n                } else {\n                    break;\n                }\n            }\n        }\n\n        // special case of numbers like \"0.00000\"\n        if (decimalFound && significantDigits == 0) {\n            decimalPos = 0;\n        }\n\n        // Implicit decimal point at end of number if not present\n        if (!decimalFound) {\n            decimalPos = q-offset;\n        }\n\n        // Find the number of significant trailing zeros\n        q = offset;  // set q to point to first sig digit\n        p = significantDigits-1+offset;\n\n        while (p > q) {\n            if (striped[p] != '0') {\n                break;\n            }\n            p--;\n        }\n\n        // Make sure the decimal is on a mod 10000 boundary\n        int i = ((rsize * 100) - decimalPos - sciexp % rsize) % rsize;\n        q -= i;\n        decimalPos += i;\n\n        // Make the mantissa length right by adding zeros at the end if necessary\n        while ((p - q) < (mant.length * rsize)) {\n            for (i = 0; i < rsize; i++) {\n                striped[++p] = '0';\n            }\n        }\n\n        // Ok, now we know how many trailing zeros there are,\n        // and where the least significant digit is\n        for (i = mant.length - 1; i >= 0; i--) {\n            mant[i] = (striped[q]   - '0') * 1000 +\n                      (striped[q+1] - '0') * 100  +\n                      (striped[q+2] - '0') * 10   +\n                      (striped[q+3] - '0');\n            q += 4;\n        }\n\n\n        exp = (decimalPos+sciexp) / rsize;\n\n        if (q < striped.length) {\n            // Is there possible another digit?\n            round((striped[q] - '0')*1000);\n        }\n\n    }\n\n    /** Creates an instance with a non-finite value.\n     * @param field field to which this instance belongs\n     * @param sign sign of the Dfp to create\n     * @param nans code of the value, must be one of {@link #INFINITE},\n     * {@link #SNAN},  {@link #QNAN}\n     */\n    protected Dfp(final DfpField field, final byte sign, final byte nans) {\n        this.field = field;\n        this.mant    = new int[field.getRadixDigits()];\n        this.sign    = sign;\n        this.exp     = 0;\n        this.nans    = nans;\n    }\n\n    /** Create an instance with a value of 0.\n     * Use this internally in preference to constructors to facilitate subclasses\n     * @return a new instance with a value of 0\n     */\n    public Dfp newInstance() {\n        return new Dfp(getField());\n    }\n\n    /** Create an instance from a byte value.\n     * @param x value to convert to an instance\n     * @return a new instance with value x\n     */\n    public Dfp newInstance(final byte x) {\n        return new Dfp(getField(), x);\n    }\n\n    /** Create an instance from an int value.\n     * @param x value to convert to an instance\n     * @return a new instance with value x\n     */\n    public Dfp newInstance(final int x) {\n        return new Dfp(getField(), x);\n    }\n\n    /** Create an instance from a long value.\n     * @param x value to convert to an instance\n     * @return a new instance with value x\n     */\n    public Dfp newInstance(final long x) {\n        return new Dfp(getField(), x);\n    }\n\n    /** Create an instance from a double value.\n     * @param x value to convert to an instance\n     * @return a new instance with value x\n     */\n    public Dfp newInstance(final double x) {\n        return new Dfp(getField(), x);\n    }\n\n    /** Create an instance by copying an existing one.\n     * Use this internally in preference to constructors to facilitate subclasses.\n     * @param d instance to copy\n     * @return a new instance with the same value as d\n     */\n    public Dfp newInstance(final Dfp d) {\n\n        // make sure we don't mix number with different precision\n        if (field.getRadixDigits() != d.field.getRadixDigits()) {\n            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);\n            final Dfp result = newInstance(getZero());\n            result.nans = QNAN;\n            return dotrap(DfpField.FLAG_INVALID, NEW_INSTANCE_TRAP, d, result);\n        }\n\n        return new Dfp(d);\n\n    }\n\n    /** Create an instance from a String representation.\n     * Use this internally in preference to constructors to facilitate subclasses.\n     * @param s string representation of the instance\n     * @return a new instance parsed from specified string\n     */\n    public Dfp newInstance(final String s) {\n        return new Dfp(field, s);\n    }\n\n    /** Creates an instance with a non-finite value.\n     * @param sig sign of the Dfp to create\n     * @param code code of the value, must be one of {@link #INFINITE},\n     * {@link #SNAN},  {@link #QNAN}\n     * @return a new instance with a non-finite value\n     */\n    public Dfp newInstance(final byte sig, final byte code) {\n        return field.newDfp(sig, code);\n    }\n\n    /** Get the {@link org.apache.commons.math3.Field Field} (really a {@link DfpField}) to which the instance belongs.\n     * <p>\n     * The field is linked to the number of digits and acts as a factory\n     * for {@link Dfp} instances.\n     * </p>\n     * @return {@link org.apache.commons.math3.Field Field} (really a {@link DfpField}) to which the instance belongs\n     */\n    public DfpField getField() {\n        return field;\n    }\n\n    /** Get the number of radix digits of the instance.\n     * @return number of radix digits\n     */\n    public int getRadixDigits() {\n        return field.getRadixDigits();\n    }\n\n    /** Get the constant 0.\n     * @return a Dfp with value zero\n     */\n    public Dfp getZero() {\n        return field.getZero();\n    }\n\n    /** Get the constant 1.\n     * @return a Dfp with value one\n     */\n    public Dfp getOne() {\n        return field.getOne();\n    }\n\n    /** Get the constant 2.\n     * @return a Dfp with value two\n     */\n    public Dfp getTwo() {\n        return field.getTwo();\n    }\n\n    /** Shift the mantissa left, and adjust the exponent to compensate.\n     */\n    protected void shiftLeft() {\n        for (int i = mant.length - 1; i > 0; i--) {\n            mant[i] = mant[i-1];\n        }\n        mant[0] = 0;\n        exp--;\n    }\n\n    /* Note that shiftRight() does not call round() as that round() itself\n     uses shiftRight() */\n    /** Shift the mantissa right, and adjust the exponent to compensate.\n     */\n    protected void shiftRight() {\n        for (int i = 0; i < mant.length - 1; i++) {\n            mant[i] = mant[i+1];\n        }\n        mant[mant.length - 1] = 0;\n        exp++;\n    }\n\n    /** Make our exp equal to the supplied one, this may cause rounding.\n     *  Also causes de-normalized numbers.  These numbers are generally\n     *  dangerous because most routines assume normalized numbers.\n     *  Align doesn't round, so it will return the last digit destroyed\n     *  by shifting right.\n     *  @param e desired exponent\n     *  @return last digit destroyed by shifting right\n     */\n    protected int align(int e) {\n        int lostdigit = 0;\n        boolean inexact = false;\n\n        int diff = exp - e;\n\n        int adiff = diff;\n        if (adiff < 0) {\n            adiff = -adiff;\n        }\n\n        if (diff == 0) {\n            return 0;\n        }\n\n        if (adiff > (mant.length + 1)) {\n            // Special case\n            Arrays.fill(mant, 0);\n            exp = e;\n\n            field.setIEEEFlagsBits(DfpField.FLAG_INEXACT);\n            dotrap(DfpField.FLAG_INEXACT, ALIGN_TRAP, this, this);\n\n            return 0;\n        }\n\n        for (int i = 0; i < adiff; i++) {\n            if (diff < 0) {\n                /* Keep track of loss -- only signal inexact after losing 2 digits.\n                 * the first lost digit is returned to add() and may be incorporated\n                 * into the result.\n                 */\n                if (lostdigit != 0) {\n                    inexact = true;\n                }\n\n                lostdigit = mant[0];\n\n                shiftRight();\n            } else {\n                shiftLeft();\n            }\n        }\n\n        if (inexact) {\n            field.setIEEEFlagsBits(DfpField.FLAG_INEXACT);\n            dotrap(DfpField.FLAG_INEXACT, ALIGN_TRAP, this, this);\n        }\n\n        return lostdigit;\n\n    }\n\n    /** Check if instance is less than x.\n     * @param x number to check instance against\n     * @return true if instance is less than x and neither are NaN, false otherwise\n     */\n    public boolean lessThan(final Dfp x) {\n\n        // make sure we don't mix number with different precision\n        if (field.getRadixDigits() != x.field.getRadixDigits()) {\n            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);\n            final Dfp result = newInstance(getZero());\n            result.nans = QNAN;\n            dotrap(DfpField.FLAG_INVALID, LESS_THAN_TRAP, x, result);\n            return false;\n        }\n\n        /* if a nan is involved, signal invalid and return false */\n        if (isNaN() || x.isNaN()) {\n            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);\n            dotrap(DfpField.FLAG_INVALID, LESS_THAN_TRAP, x, newInstance(getZero()));\n            return false;\n        }\n\n        return compare(this, x) < 0;\n    }\n\n    /** Check if instance is greater than x.\n     * @param x number to check instance against\n     * @return true if instance is greater than x and neither are NaN, false otherwise\n     */\n    public boolean greaterThan(final Dfp x) {\n\n        // make sure we don't mix number with different precision\n        if (field.getRadixDigits() != x.field.getRadixDigits()) {\n            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);\n            final Dfp result = newInstance(getZero());\n            result.nans = QNAN;\n            dotrap(DfpField.FLAG_INVALID, GREATER_THAN_TRAP, x, result);\n            return false;\n        }\n\n        /* if a nan is involved, signal invalid and return false */\n        if (isNaN() || x.isNaN()) {\n            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);\n            dotrap(DfpField.FLAG_INVALID, GREATER_THAN_TRAP, x, newInstance(getZero()));\n            return false;\n        }\n\n        return compare(this, x) > 0;\n    }\n\n    /** Check if instance is less than or equal to 0.\n     * @return true if instance is not NaN and less than or equal to 0, false otherwise\n     */\n    public boolean negativeOrNull() {\n\n        if (isNaN()) {\n            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);\n            dotrap(DfpField.FLAG_INVALID, LESS_THAN_TRAP, this, newInstance(getZero()));\n            return false;\n        }\n\n        return (sign < 0) || ((mant[mant.length - 1] == 0) && !isInfinite());\n\n    }\n\n    /** Check if instance is strictly less than 0.\n     * @return true if instance is not NaN and less than or equal to 0, false otherwise\n     */\n    public boolean strictlyNegative() {\n\n        if (isNaN()) {\n            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);\n            dotrap(DfpField.FLAG_INVALID, LESS_THAN_TRAP, this, newInstance(getZero()));\n            return false;\n        }\n\n        return (sign < 0) && ((mant[mant.length - 1] != 0) || isInfinite());\n\n    }\n\n    /** Check if instance is greater than or equal to 0.\n     * @return true if instance is not NaN and greater than or equal to 0, false otherwise\n     */\n    public boolean positiveOrNull() {\n\n        if (isNaN()) {\n            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);\n            dotrap(DfpField.FLAG_INVALID, LESS_THAN_TRAP, this, newInstance(getZero()));\n            return false;\n        }\n\n        return (sign > 0) || ((mant[mant.length - 1] == 0) && !isInfinite());\n\n    }\n\n    /** Check if instance is strictly greater than 0.\n     * @return true if instance is not NaN and greater than or equal to 0, false otherwise\n     */\n    public boolean strictlyPositive() {\n\n        if (isNaN()) {\n            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);\n            dotrap(DfpField.FLAG_INVALID, LESS_THAN_TRAP, this, newInstance(getZero()));\n            return false;\n        }\n\n        return (sign > 0) && ((mant[mant.length - 1] != 0) || isInfinite());\n\n    }\n\n    /** Get the absolute value of instance.\n     * @return absolute value of instance\n     * @since 3.2\n     */\n    public Dfp abs() {\n        Dfp result = newInstance(this);\n        result.sign = 1;\n        return result;\n    }\n\n    /** Check if instance is infinite.\n     * @return true if instance is infinite\n     */\n    public boolean isInfinite() {\n        return nans == INFINITE;\n    }\n\n    /** Check if instance is not a number.\n     * @return true if instance is not a number\n     */\n    public boolean isNaN() {\n        return (nans == QNAN) || (nans == SNAN);\n    }\n\n    /** Check if instance is equal to zero.\n     * @return true if instance is equal to zero\n     */\n    public boolean isZero() {\n\n        if (isNaN()) {\n            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);\n            dotrap(DfpField.FLAG_INVALID, LESS_THAN_TRAP, this, newInstance(getZero()));\n            return false;\n        }\n\n        return (mant[mant.length - 1] == 0) && !isInfinite();\n\n    }\n\n    /** Check if instance is equal to x.\n     * @param other object to check instance against\n     * @return true if instance is equal to x and neither are NaN, false otherwise\n     */\n    @Override\n    public boolean equals(final Object other) {\n\n        if (other instanceof Dfp) {\n            final Dfp x = (Dfp) other;\n            if (isNaN() || x.isNaN() || field.getRadixDigits() != x.field.getRadixDigits()) {\n                return false;\n            }\n\n            return compare(this, x) == 0;\n        }\n\n        return false;\n\n    }\n\n    /**\n     * Gets a hashCode for the instance.\n     * @return a hash code value for this object\n     */\n    @Override\n    public int hashCode() {\n        return 17 + (isZero() ? 0 : (sign << 8)) + (nans << 16) + exp + Arrays.hashCode(mant);\n    }\n\n    /** Check if instance is not equal to x.\n     * @param x number to check instance against\n     * @return true if instance is not equal to x and neither are NaN, false otherwise\n     */\n    public boolean unequal(final Dfp x) {\n        if (isNaN() || x.isNaN() || field.getRadixDigits() != x.field.getRadixDigits()) {\n            return false;\n        }\n\n        return greaterThan(x) || lessThan(x);\n    }\n\n    /** Compare two instances.\n     * @param a first instance in comparison\n     * @param b second instance in comparison\n     * @return -1 if a<b, 1 if a>b and 0 if a==b\n     *  Note this method does not properly handle NaNs or numbers with different precision.\n     */\n    private static int compare(final Dfp a, final Dfp b) {\n        // Ignore the sign of zero\n        if (a.mant[a.mant.length - 1] == 0 && b.mant[b.mant.length - 1] == 0 &&\n            a.nans == FINITE && b.nans == FINITE) {\n            return 0;\n        }\n\n        if (a.sign != b.sign) {\n            if (a.sign == -1) {\n                return -1;\n            } else {\n                return 1;\n            }\n        }\n\n        // deal with the infinities\n        if (a.nans == INFINITE && b.nans == FINITE) {\n            return a.sign;\n        }\n\n        if (a.nans == FINITE && b.nans == INFINITE) {\n            return -b.sign;\n        }\n\n        if (a.nans == INFINITE && b.nans == INFINITE) {\n            return 0;\n        }\n\n        // Handle special case when a or b is zero, by ignoring the exponents\n        if (b.mant[b.mant.length-1] != 0 && a.mant[b.mant.length-1] != 0) {\n            if (a.exp < b.exp) {\n                return -a.sign;\n            }\n\n            if (a.exp > b.exp) {\n                return a.sign;\n            }\n        }\n\n        // compare the mantissas\n        for (int i = a.mant.length - 1; i >= 0; i--) {\n            if (a.mant[i] > b.mant[i]) {\n                return a.sign;\n            }\n\n            if (a.mant[i] < b.mant[i]) {\n                return -a.sign;\n            }\n        }\n\n        return 0;\n\n    }\n\n    /** Round to nearest integer using the round-half-even method.\n     *  That is round to nearest integer unless both are equidistant.\n     *  In which case round to the even one.\n     *  @return rounded value\n     * @since 3.2\n     */\n    public Dfp rint() {\n        return trunc(DfpField.RoundingMode.ROUND_HALF_EVEN);\n    }\n\n    /** Round to an integer using the round floor mode.\n     * That is, round toward -Infinity\n     *  @return rounded value\n     * @since 3.2\n     */\n    public Dfp floor() {\n        return trunc(DfpField.RoundingMode.ROUND_FLOOR);\n    }\n\n    /** Round to an integer using the round ceil mode.\n     * That is, round toward +Infinity\n     *  @return rounded value\n     * @since 3.2\n     */\n    public Dfp ceil() {\n        return trunc(DfpField.RoundingMode.ROUND_CEIL);\n    }\n\n    /** Returns the IEEE remainder.\n     * @param d divisor\n     * @return this less n &times; d, where n is the integer closest to this/d\n     * @since 3.2\n     */\n    public Dfp remainder(final Dfp d) {\n\n        final Dfp result = this.subtract(this.divide(d).rint().multiply(d));\n\n        // IEEE 854-1987 says that if the result is zero, then it carries the sign of this\n        if (result.mant[mant.length-1] == 0) {\n            result.sign = sign;\n        }\n\n        return result;\n\n    }\n\n    /** Does the integer conversions with the specified rounding.\n     * @param rmode rounding mode to use\n     * @return truncated value\n     */\n    protected Dfp trunc(final DfpField.RoundingMode rmode) {\n        boolean changed = false;\n\n        if (isNaN()) {\n            return newInstance(this);\n        }\n\n        if (nans == INFINITE) {\n            return newInstance(this);\n        }\n\n        if (mant[mant.length-1] == 0) {\n            // a is zero\n            return newInstance(this);\n        }\n\n        /* If the exponent is less than zero then we can certainly\n         * return zero */\n        if (exp < 0) {\n            field.setIEEEFlagsBits(DfpField.FLAG_INEXACT);\n            Dfp result = newInstance(getZero());\n            result = dotrap(DfpField.FLAG_INEXACT, TRUNC_TRAP, this, result);\n            return result;\n        }\n\n        /* If the exponent is greater than or equal to digits, then it\n         * must already be an integer since there is no precision left\n         * for any fractional part */\n\n        if (exp >= mant.length) {\n            return newInstance(this);\n        }\n\n        /* General case:  create another dfp, result, that contains the\n         * a with the fractional part lopped off.  */\n\n        Dfp result = newInstance(this);\n        for (int i = 0; i < mant.length-result.exp; i++) {\n            changed |= result.mant[i] != 0;\n            result.mant[i] = 0;\n        }\n\n        if (changed) {\n            switch (rmode) {\n                case ROUND_FLOOR:\n                    if (result.sign == -1) {\n                        // then we must increment the mantissa by one\n                        result = result.add(newInstance(-1));\n                    }\n                    break;\n\n                case ROUND_CEIL:\n                    if (result.sign == 1) {\n                        // then we must increment the mantissa by one\n                        result = result.add(getOne());\n                    }\n                    break;\n\n                case ROUND_HALF_EVEN:\n                default:\n                    final Dfp half = newInstance(\"0.5\");\n                    Dfp a = subtract(result);  // difference between this and result\n                    a.sign = 1;            // force positive (take abs)\n                    if (a.greaterThan(half)) {\n                        a = newInstance(getOne());\n                        a.sign = sign;\n                        result = result.add(a);\n                    }\n\n                    /** If exactly equal to 1/2 and odd then increment */\n                    if (a.equals(half) && result.exp > 0 && (result.mant[mant.length-result.exp]&1) != 0) {\n                        a = newInstance(getOne());\n                        a.sign = sign;\n                        result = result.add(a);\n                    }\n                    break;\n            }\n\n            field.setIEEEFlagsBits(DfpField.FLAG_INEXACT);  // signal inexact\n            result = dotrap(DfpField.FLAG_INEXACT, TRUNC_TRAP, this, result);\n            return result;\n        }\n\n        return result;\n    }\n\n    /** Convert this to an integer.\n     * If greater than 2147483647, it returns 2147483647. If less than -2147483648 it returns -2147483648.\n     * @return converted number\n     */\n    public int intValue() {\n        Dfp rounded;\n        int result = 0;\n\n        rounded = rint();\n\n        if (rounded.greaterThan(newInstance(2147483647))) {\n            return 2147483647;\n        }\n\n        if (rounded.lessThan(newInstance(-2147483648))) {\n            return -2147483648;\n        }\n\n        for (int i = mant.length - 1; i >= mant.length - rounded.exp; i--) {\n            result = result * RADIX + rounded.mant[i];\n        }\n\n        if (rounded.sign == -1) {\n            result = -result;\n        }\n\n        return result;\n    }\n\n    /** Get the exponent of the greatest power of 10000 that is\n     *  less than or equal to the absolute value of this.  I.E.  if\n     *  this is 10<sup>6</sup> then log10K would return 1.\n     *  @return integer base 10000 logarithm\n     */\n    public int log10K() {\n        return exp - 1;\n    }\n\n    /** Get the specified  power of 10000.\n     * @param e desired power\n     * @return 10000<sup>e</sup>\n     */\n    public Dfp power10K(final int e) {\n        Dfp d = newInstance(getOne());\n        d.exp = e + 1;\n        return d;\n    }\n\n    /** Get the exponent of the greatest power of 10 that is less than or equal to abs(this).\n     *  @return integer base 10 logarithm\n     * @since 3.2\n     */\n    public int intLog10()  {\n        if (mant[mant.length-1] > 1000) {\n            return exp * 4 - 1;\n        }\n        if (mant[mant.length-1] > 100) {\n            return exp * 4 - 2;\n        }\n        if (mant[mant.length-1] > 10) {\n            return exp * 4 - 3;\n        }\n        return exp * 4 - 4;\n    }\n\n    /** Return the specified  power of 10.\n     * @param e desired power\n     * @return 10<sup>e</sup>\n     */\n    public Dfp power10(final int e) {\n        Dfp d = newInstance(getOne());\n\n        if (e >= 0) {\n            d.exp = e / 4 + 1;\n        } else {\n            d.exp = (e + 1) / 4;\n        }\n\n        switch ((e % 4 + 4) % 4) {\n            case 0:\n                break;\n            case 1:\n                d = d.multiply(10);\n                break;\n            case 2:\n                d = d.multiply(100);\n                break;\n            default:\n                d = d.multiply(1000);\n        }\n\n        return d;\n    }\n\n    /** Negate the mantissa of this by computing the complement.\n     *  Leaves the sign bit unchanged, used internally by add.\n     *  Denormalized numbers are handled properly here.\n     *  @param extra ???\n     *  @return ???\n     */\n    protected int complement(int extra) {\n\n        extra = RADIX-extra;\n        for (int i = 0; i < mant.length; i++) {\n            mant[i] = RADIX-mant[i]-1;\n        }\n\n        int rh = extra / RADIX;\n        extra -= rh * RADIX;\n        for (int i = 0; i < mant.length; i++) {\n            final int r = mant[i] + rh;\n            rh = r / RADIX;\n            mant[i] = r - rh * RADIX;\n        }\n\n        return extra;\n    }\n\n    /** Add x to this.\n     * @param x number to add\n     * @return sum of this and x\n     */\n    public Dfp add(final Dfp x) {\n\n        // make sure we don't mix number with different precision\n        if (field.getRadixDigits() != x.field.getRadixDigits()) {\n            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);\n            final Dfp result = newInstance(getZero());\n            result.nans = QNAN;\n            return dotrap(DfpField.FLAG_INVALID, ADD_TRAP, x, result);\n        }\n\n        /* handle special cases */\n        if (nans != FINITE || x.nans != FINITE) {\n            if (isNaN()) {\n                return this;\n            }\n\n            if (x.isNaN()) {\n                return x;\n            }\n\n            if (nans == INFINITE && x.nans == FINITE) {\n                return this;\n            }\n\n            if (x.nans == INFINITE && nans == FINITE) {\n                return x;\n            }\n\n            if (x.nans == INFINITE && nans == INFINITE && sign == x.sign) {\n                return x;\n            }\n\n            if (x.nans == INFINITE && nans == INFINITE && sign != x.sign) {\n                field.setIEEEFlagsBits(DfpField.FLAG_INVALID);\n                Dfp result = newInstance(getZero());\n                result.nans = QNAN;\n                result = dotrap(DfpField.FLAG_INVALID, ADD_TRAP, x, result);\n                return result;\n            }\n        }\n\n        /* copy this and the arg */\n        Dfp a = newInstance(this);\n        Dfp b = newInstance(x);\n\n        /* initialize the result object */\n        Dfp result = newInstance(getZero());\n\n        /* Make all numbers positive, but remember their sign */\n        final byte asign = a.sign;\n        final byte bsign = b.sign;\n\n        a.sign = 1;\n        b.sign = 1;\n\n        /* The result will be signed like the arg with greatest magnitude */\n        byte rsign = bsign;\n        if (compare(a, b) > 0) {\n            rsign = asign;\n        }\n\n        /* Handle special case when a or b is zero, by setting the exponent\n       of the zero number equal to the other one.  This avoids an alignment\n       which would cause catastropic loss of precision */\n        if (b.mant[mant.length-1] == 0) {\n            b.exp = a.exp;\n        }\n\n        if (a.mant[mant.length-1] == 0) {\n            a.exp = b.exp;\n        }\n\n        /* align number with the smaller exponent */\n        int aextradigit = 0;\n        int bextradigit = 0;\n        if (a.exp < b.exp) {\n            aextradigit = a.align(b.exp);\n        } else {\n            bextradigit = b.align(a.exp);\n        }\n\n        /* complement the smaller of the two if the signs are different */\n        if (asign != bsign) {\n            if (asign == rsign) {\n                bextradigit = b.complement(bextradigit);\n            } else {\n                aextradigit = a.complement(aextradigit);\n            }\n        }\n\n        /* add the mantissas */\n        int rh = 0; /* acts as a carry */\n        for (int i = 0; i < mant.length; i++) {\n            final int r = a.mant[i]+b.mant[i]+rh;\n            rh = r / RADIX;\n            result.mant[i] = r - rh * RADIX;\n        }\n        result.exp = a.exp;\n        result.sign = rsign;\n\n        /* handle overflow -- note, when asign!=bsign an overflow is\n         * normal and should be ignored.  */\n\n        if (rh != 0 && (asign == bsign)) {\n            final int lostdigit = result.mant[0];\n            result.shiftRight();\n            result.mant[mant.length-1] = rh;\n            final int excp = result.round(lostdigit);\n            if (excp != 0) {\n                result = dotrap(excp, ADD_TRAP, x, result);\n            }\n        }\n\n        /* normalize the result */\n        for (int i = 0; i < mant.length; i++) {\n            if (result.mant[mant.length-1] != 0) {\n                break;\n            }\n            result.shiftLeft();\n            if (i == 0) {\n                result.mant[0] = aextradigit+bextradigit;\n                aextradigit = 0;\n                bextradigit = 0;\n            }\n        }\n\n        /* result is zero if after normalization the most sig. digit is zero */\n        if (result.mant[mant.length-1] == 0) {\n            result.exp = 0;\n\n            if (asign != bsign) {\n                // Unless adding 2 negative zeros, sign is positive\n                result.sign = 1;  // Per IEEE 854-1987 Section 6.3\n            }\n        }\n\n        /* Call round to test for over/under flows */\n        final int excp = result.round(aextradigit + bextradigit);\n        if (excp != 0) {\n            result = dotrap(excp, ADD_TRAP, x, result);\n        }\n\n        return result;\n    }\n\n    /** Returns a number that is this number with the sign bit reversed.\n     * @return the opposite of this\n     */\n    public Dfp negate() {\n        Dfp result = newInstance(this);\n        result.sign = (byte) - result.sign;\n        return result;\n    }\n\n    /** Subtract x from this.\n     * @param x number to subtract\n     * @return difference of this and a\n     */\n    public Dfp subtract(final Dfp x) {\n        return add(x.negate());\n    }\n\n    /** Round this given the next digit n using the current rounding mode.\n     * @param n ???\n     * @return the IEEE flag if an exception occurred\n     */\n    protected int round(int n) {\n        boolean inc = false;\n        switch (field.getRoundingMode()) {\n            case ROUND_DOWN:\n                inc = false;\n                break;\n\n            case ROUND_UP:\n                inc = n != 0;       // round up if n!=0\n                break;\n\n            case ROUND_HALF_UP:\n                inc = n >= 5000;  // round half up\n                break;\n\n            case ROUND_HALF_DOWN:\n                inc = n > 5000;  // round half down\n                break;\n\n            case ROUND_HALF_EVEN:\n                inc = n > 5000 || (n == 5000 && (mant[0] & 1) == 1);  // round half-even\n                break;\n\n            case ROUND_HALF_ODD:\n                inc = n > 5000 || (n == 5000 && (mant[0] & 1) == 0);  // round half-odd\n                break;\n\n            case ROUND_CEIL:\n                inc = sign == 1 && n != 0;  // round ceil\n                break;\n\n            case ROUND_FLOOR:\n            default:\n                inc = sign == -1 && n != 0;  // round floor\n                break;\n        }\n\n        if (inc) {\n            // increment if necessary\n            int rh = 1;\n            for (int i = 0; i < mant.length; i++) {\n                final int r = mant[i] + rh;\n                rh = r / RADIX;\n                mant[i] = r - rh * RADIX;\n            }\n\n            if (rh != 0) {\n                shiftRight();\n                mant[mant.length-1] = rh;\n            }\n        }\n\n        // check for exceptional cases and raise signals if necessary\n        if (exp < MIN_EXP) {\n            // Gradual Underflow\n            field.setIEEEFlagsBits(DfpField.FLAG_UNDERFLOW);\n            return DfpField.FLAG_UNDERFLOW;\n        }\n\n        if (exp > MAX_EXP) {\n            // Overflow\n            field.setIEEEFlagsBits(DfpField.FLAG_OVERFLOW);\n            return DfpField.FLAG_OVERFLOW;\n        }\n\n        if (n != 0) {\n            // Inexact\n            field.setIEEEFlagsBits(DfpField.FLAG_INEXACT);\n            return DfpField.FLAG_INEXACT;\n        }\n\n        return 0;\n\n    }\n\n    /** Multiply this by x.\n     * @param x multiplicand\n     * @return product of this and x\n     */\n    public Dfp multiply(final Dfp x) {\n\n        // make sure we don't mix number with different precision\n        if (field.getRadixDigits() != x.field.getRadixDigits()) {\n            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);\n            final Dfp result = newInstance(getZero());\n            result.nans = QNAN;\n            return dotrap(DfpField.FLAG_INVALID, MULTIPLY_TRAP, x, result);\n        }\n\n        Dfp result = newInstance(getZero());\n\n        /* handle special cases */\n        if (nans != FINITE || x.nans != FINITE) {\n            if (isNaN()) {\n                return this;\n            }\n\n            if (x.isNaN()) {\n                return x;\n            }\n\n            if (nans == INFINITE && x.nans == FINITE && x.mant[mant.length-1] != 0) {\n                result = newInstance(this);\n                result.sign = (byte) (sign * x.sign);\n                return result;\n            }\n\n            if (x.nans == INFINITE && nans == FINITE && mant[mant.length-1] != 0) {\n                result = newInstance(x);\n                result.sign = (byte) (sign * x.sign);\n                return result;\n            }\n\n            if (x.nans == INFINITE && nans == INFINITE) {\n                result = newInstance(this);\n                result.sign = (byte) (sign * x.sign);\n                return result;\n            }\n\n            if ( (x.nans == INFINITE && nans == FINITE && mant[mant.length-1] == 0) ||\n                    (nans == INFINITE && x.nans == FINITE && x.mant[mant.length-1] == 0) ) {\n                field.setIEEEFlagsBits(DfpField.FLAG_INVALID);\n                result = newInstance(getZero());\n                result.nans = QNAN;\n                result = dotrap(DfpField.FLAG_INVALID, MULTIPLY_TRAP, x, result);\n                return result;\n            }\n        }\n\n        int[] product = new int[mant.length*2];  // Big enough to hold even the largest result\n\n        for (int i = 0; i < mant.length; i++) {\n            int rh = 0;  // acts as a carry\n            for (int j=0; j<mant.length; j++) {\n                int r = mant[i] * x.mant[j];    // multiply the 2 digits\n                r += product[i+j] + rh;  // add to the product digit with carry in\n\n                rh = r / RADIX;\n                product[i+j] = r - rh * RADIX;\n            }\n            product[i+mant.length] = rh;\n        }\n\n        // Find the most sig digit\n        int md = mant.length * 2 - 1;  // default, in case result is zero\n        for (int i = mant.length * 2 - 1; i >= 0; i--) {\n            if (product[i] != 0) {\n                md = i;\n                break;\n            }\n        }\n\n        // Copy the digits into the result\n        for (int i = 0; i < mant.length; i++) {\n            result.mant[mant.length - i - 1] = product[md - i];\n        }\n\n        // Fixup the exponent.\n        result.exp = exp + x.exp + md - 2 * mant.length + 1;\n        result.sign = (byte)((sign == x.sign)?1:-1);\n\n        if (result.mant[mant.length-1] == 0) {\n            // if result is zero, set exp to zero\n            result.exp = 0;\n        }\n\n        final int excp;\n        if (md > (mant.length-1)) {\n            excp = result.round(product[md-mant.length]);\n        } else {\n            excp = result.round(0); // has no effect except to check status\n        }\n\n        if (excp != 0) {\n            result = dotrap(excp, MULTIPLY_TRAP, x, result);\n        }\n\n        return result;\n\n    }\n\n    /** Multiply this by a single digit x.\n     * @param x multiplicand\n     * @return product of this and x\n     */\n    public Dfp multiply(final int x) {\n        if (x >= 0 && x < RADIX) {\n            return multiplyFast(x);\n        } else {\n            return multiply(newInstance(x));\n        }\n    }\n\n    /** Multiply this by a single digit 0&lt;=x&lt;radix.\n     * There are speed advantages in this special case.\n     * @param x multiplicand\n     * @return product of this and x\n     */\n    private Dfp multiplyFast(final int x) {\n        Dfp result = newInstance(this);\n\n        /* handle special cases */\n        if (nans != FINITE) {\n            if (isNaN()) {\n                return this;\n            }\n\n            if (nans == INFINITE && x != 0) {\n                result = newInstance(this);\n                return result;\n            }\n\n            if (nans == INFINITE && x == 0) {\n                field.setIEEEFlagsBits(DfpField.FLAG_INVALID);\n                result = newInstance(getZero());\n                result.nans = QNAN;\n                result = dotrap(DfpField.FLAG_INVALID, MULTIPLY_TRAP, newInstance(getZero()), result);\n                return result;\n            }\n        }\n\n        /* range check x */\n        if (x < 0 || x >= RADIX) {\n            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);\n            result = newInstance(getZero());\n            result.nans = QNAN;\n            result = dotrap(DfpField.FLAG_INVALID, MULTIPLY_TRAP, result, result);\n            return result;\n        }\n\n        int rh = 0;\n        for (int i = 0; i < mant.length; i++) {\n            final int r = mant[i] * x + rh;\n            rh = r / RADIX;\n            result.mant[i] = r - rh * RADIX;\n        }\n\n        int lostdigit = 0;\n        if (rh != 0) {\n            lostdigit = result.mant[0];\n            result.shiftRight();\n            result.mant[mant.length-1] = rh;\n        }\n\n        if (result.mant[mant.length-1] == 0) { // if result is zero, set exp to zero\n            result.exp = 0;\n        }\n\n        final int excp = result.round(lostdigit);\n        if (excp != 0) {\n            result = dotrap(excp, MULTIPLY_TRAP, result, result);\n        }\n\n        return result;\n    }\n\n    /** Divide this by divisor.\n     * @param divisor divisor\n     * @return quotient of this by divisor\n     */\n    public Dfp divide(Dfp divisor) {\n        int dividend[]; // current status of the dividend\n        int quotient[]; // quotient\n        int remainder[];// remainder\n        int qd;         // current quotient digit we're working with\n        int nsqd;       // number of significant quotient digits we have\n        int trial=0;    // trial quotient digit\n        int minadj;     // minimum adjustment\n        boolean trialgood; // Flag to indicate a good trail digit\n        int md=0;       // most sig digit in result\n        int excp;       // exceptions\n\n        // make sure we don't mix number with different precision\n        if (field.getRadixDigits() != divisor.field.getRadixDigits()) {\n            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);\n            final Dfp result = newInstance(getZero());\n            result.nans = QNAN;\n            return dotrap(DfpField.FLAG_INVALID, DIVIDE_TRAP, divisor, result);\n        }\n\n        Dfp result = newInstance(getZero());\n\n        /* handle special cases */\n        if (nans != FINITE || divisor.nans != FINITE) {\n            if (isNaN()) {\n                return this;\n            }\n\n            if (divisor.isNaN()) {\n                return divisor;\n            }\n\n            if (nans == INFINITE && divisor.nans == FINITE) {\n                result = newInstance(this);\n                result.sign = (byte) (sign * divisor.sign);\n                return result;\n            }\n\n            if (divisor.nans == INFINITE && nans == FINITE) {\n                result = newInstance(getZero());\n                result.sign = (byte) (sign * divisor.sign);\n                return result;\n            }\n\n            if (divisor.nans == INFINITE && nans == INFINITE) {\n                field.setIEEEFlagsBits(DfpField.FLAG_INVALID);\n                result = newInstance(getZero());\n                result.nans = QNAN;\n                result = dotrap(DfpField.FLAG_INVALID, DIVIDE_TRAP, divisor, result);\n                return result;\n            }\n        }\n\n        /* Test for divide by zero */\n        if (divisor.mant[mant.length-1] == 0) {\n            field.setIEEEFlagsBits(DfpField.FLAG_DIV_ZERO);\n            result = newInstance(getZero());\n            result.sign = (byte) (sign * divisor.sign);\n            result.nans = INFINITE;\n            result = dotrap(DfpField.FLAG_DIV_ZERO, DIVIDE_TRAP, divisor, result);\n            return result;\n        }\n\n        dividend = new int[mant.length+1];  // one extra digit needed\n        quotient = new int[mant.length+2];  // two extra digits needed 1 for overflow, 1 for rounding\n        remainder = new int[mant.length+1]; // one extra digit needed\n\n        /* Initialize our most significant digits to zero */\n\n        dividend[mant.length] = 0;\n        quotient[mant.length] = 0;\n        quotient[mant.length+1] = 0;\n        remainder[mant.length] = 0;\n\n        /* copy our mantissa into the dividend, initialize the\n       quotient while we are at it */\n\n        for (int i = 0; i < mant.length; i++) {\n            dividend[i] = mant[i];\n            quotient[i] = 0;\n            remainder[i] = 0;\n        }\n\n        /* outer loop.  Once per quotient digit */\n        nsqd = 0;\n        for (qd = mant.length+1; qd >= 0; qd--) {\n            /* Determine outer limits of our quotient digit */\n\n            // r =  most sig 2 digits of dividend\n            final int divMsb = dividend[mant.length]*RADIX+dividend[mant.length-1];\n            int min = divMsb       / (divisor.mant[mant.length-1]+1);\n            int max = (divMsb + 1) / divisor.mant[mant.length-1];\n\n            trialgood = false;\n            while (!trialgood) {\n                // try the mean\n                trial = (min+max)/2;\n\n                /* Multiply by divisor and store as remainder */\n                int rh = 0;\n                for (int i = 0; i < mant.length + 1; i++) {\n                    int dm = (i<mant.length)?divisor.mant[i]:0;\n                    final int r = (dm * trial) + rh;\n                    rh = r / RADIX;\n                    remainder[i] = r - rh * RADIX;\n                }\n\n                /* subtract the remainder from the dividend */\n                rh = 1;  // carry in to aid the subtraction\n                for (int i = 0; i < mant.length + 1; i++) {\n                    final int r = ((RADIX-1) - remainder[i]) + dividend[i] + rh;\n                    rh = r / RADIX;\n                    remainder[i] = r - rh * RADIX;\n                }\n\n                /* Lets analyze what we have here */\n                if (rh == 0) {\n                    // trial is too big -- negative remainder\n                    max = trial-1;\n                    continue;\n                }\n\n                /* find out how far off the remainder is telling us we are */\n                minadj = (remainder[mant.length] * RADIX)+remainder[mant.length-1];\n                minadj /= divisor.mant[mant.length-1] + 1;\n\n                if (minadj >= 2) {\n                    min = trial+minadj;  // update the minimum\n                    continue;\n                }\n\n                /* May have a good one here, check more thoroughly.  Basically\n           its a good one if it is less than the divisor */\n                trialgood = false;  // assume false\n                for (int i = mant.length - 1; i >= 0; i--) {\n                    if (divisor.mant[i] > remainder[i]) {\n                        trialgood = true;\n                    }\n                    if (divisor.mant[i] < remainder[i]) {\n                        break;\n                    }\n                }\n\n                if (remainder[mant.length] != 0) {\n                    trialgood = false;\n                }\n\n                if (trialgood == false) {\n                    min = trial+1;\n                }\n            }\n\n            /* Great we have a digit! */\n            quotient[qd] = trial;\n            if (trial != 0 || nsqd != 0) {\n                nsqd++;\n            }\n\n            if (field.getRoundingMode() == DfpField.RoundingMode.ROUND_DOWN && nsqd == mant.length) {\n                // We have enough for this mode\n                break;\n            }\n\n            if (nsqd > mant.length) {\n                // We have enough digits\n                break;\n            }\n\n            /* move the remainder into the dividend while left shifting */\n            dividend[0] = 0;\n            for (int i = 0; i < mant.length; i++) {\n                dividend[i + 1] = remainder[i];\n            }\n        }\n\n        /* Find the most sig digit */\n        md = mant.length;  // default\n        for (int i = mant.length + 1; i >= 0; i--) {\n            if (quotient[i] != 0) {\n                md = i;\n                break;\n            }\n        }\n\n        /* Copy the digits into the result */\n        for (int i=0; i<mant.length; i++) {\n            result.mant[mant.length-i-1] = quotient[md-i];\n        }\n\n        /* Fixup the exponent. */\n        result.exp = exp - divisor.exp + md - mant.length;\n        result.sign = (byte) ((sign == divisor.sign) ? 1 : -1);\n\n        if (result.mant[mant.length-1] == 0) { // if result is zero, set exp to zero\n            result.exp = 0;\n        }\n\n        if (md > (mant.length-1)) {\n            excp = result.round(quotient[md-mant.length]);\n        } else {\n            excp = result.round(0);\n        }\n\n        if (excp != 0) {\n            result = dotrap(excp, DIVIDE_TRAP, divisor, result);\n        }\n\n        return result;\n    }\n\n    /** Divide by a single digit less than radix.\n     *  Special case, so there are speed advantages. 0 &lt;= divisor &lt; radix\n     * @param divisor divisor\n     * @return quotient of this by divisor\n     */\n    public Dfp divide(int divisor) {\n\n        // Handle special cases\n        if (nans != FINITE) {\n            if (isNaN()) {\n                return this;\n            }\n\n            if (nans == INFINITE) {\n                return newInstance(this);\n            }\n        }\n\n        // Test for divide by zero\n        if (divisor == 0) {\n            field.setIEEEFlagsBits(DfpField.FLAG_DIV_ZERO);\n            Dfp result = newInstance(getZero());\n            result.sign = sign;\n            result.nans = INFINITE;\n            result = dotrap(DfpField.FLAG_DIV_ZERO, DIVIDE_TRAP, getZero(), result);\n            return result;\n        }\n\n        // range check divisor\n        if (divisor < 0 || divisor >= RADIX) {\n            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);\n            Dfp result = newInstance(getZero());\n            result.nans = QNAN;\n            result = dotrap(DfpField.FLAG_INVALID, DIVIDE_TRAP, result, result);\n            return result;\n        }\n\n        Dfp result = newInstance(this);\n\n        int rl = 0;\n        for (int i = mant.length-1; i >= 0; i--) {\n            final int r = rl*RADIX + result.mant[i];\n            final int rh = r / divisor;\n            rl = r - rh * divisor;\n            result.mant[i] = rh;\n        }\n\n        if (result.mant[mant.length-1] == 0) {\n            // normalize\n            result.shiftLeft();\n            final int r = rl * RADIX;        // compute the next digit and put it in\n            final int rh = r / divisor;\n            rl = r - rh * divisor;\n            result.mant[0] = rh;\n        }\n\n        final int excp = result.round(rl * RADIX / divisor);  // do the rounding\n        if (excp != 0) {\n            result = dotrap(excp, DIVIDE_TRAP, result, result);\n        }\n\n        return result;\n\n    }\n\n    /** {@inheritDoc} */\n    public Dfp reciprocal() {\n        return field.getOne().divide(this);\n    }\n\n    /** Compute the square root.\n     * @return square root of the instance\n     * @since 3.2\n     */\n    public Dfp sqrt() {\n\n        // check for unusual cases\n        if (nans == FINITE && mant[mant.length-1] == 0) {\n            // if zero\n            return newInstance(this);\n        }\n\n        if (nans != FINITE) {\n            if (nans == INFINITE && sign == 1) {\n                // if positive infinity\n                return newInstance(this);\n            }\n\n            if (nans == QNAN) {\n                return newInstance(this);\n            }\n\n            if (nans == SNAN) {\n                Dfp result;\n\n                field.setIEEEFlagsBits(DfpField.FLAG_INVALID);\n                result = newInstance(this);\n                result = dotrap(DfpField.FLAG_INVALID, SQRT_TRAP, null, result);\n                return result;\n            }\n        }\n\n        if (sign == -1) {\n            // if negative\n            Dfp result;\n\n            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);\n            result = newInstance(this);\n            result.nans = QNAN;\n            result = dotrap(DfpField.FLAG_INVALID, SQRT_TRAP, null, result);\n            return result;\n        }\n\n        Dfp x = newInstance(this);\n\n        /* Lets make a reasonable guess as to the size of the square root */\n        if (x.exp < -1 || x.exp > 1) {\n            x.exp = this.exp / 2;\n        }\n\n        /* Coarsely estimate the mantissa */\n        switch (x.mant[mant.length-1] / 2000) {\n            case 0:\n                x.mant[mant.length-1] = x.mant[mant.length-1]/2+1;\n                break;\n            case 2:\n                x.mant[mant.length-1] = 1500;\n                break;\n            case 3:\n                x.mant[mant.length-1] = 2200;\n                break;\n            default:\n                x.mant[mant.length-1] = 3000;\n        }\n\n        Dfp dx = newInstance(x);\n\n        /* Now that we have the first pass estimate, compute the rest\n       by the formula dx = (y - x*x) / (2x); */\n\n        Dfp px  = getZero();\n        Dfp ppx = getZero();\n        while (x.unequal(px)) {\n            dx = newInstance(x);\n            dx.sign = -1;\n            dx = dx.add(this.divide(x));\n            dx = dx.divide(2);\n            ppx = px;\n            px = x;\n            x = x.add(dx);\n\n            if (x.equals(ppx)) {\n                // alternating between two values\n                break;\n            }\n\n            // if dx is zero, break.  Note testing the most sig digit\n            // is a sufficient test since dx is normalized\n            if (dx.mant[mant.length-1] == 0) {\n                break;\n            }\n        }\n\n        return x;\n\n    }\n\n    /** Get a string representation of the instance.\n     * @return string representation of the instance\n     */\n    @Override\n    public String toString() {\n        if (nans != FINITE) {\n            // if non-finite exceptional cases\n            if (nans == INFINITE) {\n                return (sign < 0) ? NEG_INFINITY_STRING : POS_INFINITY_STRING;\n            } else {\n                return NAN_STRING;\n            }\n        }\n\n        if (exp > mant.length || exp < -1) {\n            return dfp2sci();\n        }\n\n        return dfp2string();\n\n    }\n\n    /** Convert an instance to a string using scientific notation.\n     * @return string representation of the instance in scientific notation\n     */\n    protected String dfp2sci() {\n        char rawdigits[]    = new char[mant.length * 4];\n        char outputbuffer[] = new char[mant.length * 4 + 20];\n        int p;\n        int q;\n        int e;\n        int ae;\n        int shf;\n\n        // Get all the digits\n        p = 0;\n        for (int i = mant.length - 1; i >= 0; i--) {\n            rawdigits[p++] = (char) ((mant[i] / 1000) + '0');\n            rawdigits[p++] = (char) (((mant[i] / 100) %10) + '0');\n            rawdigits[p++] = (char) (((mant[i] / 10) % 10) + '0');\n            rawdigits[p++] = (char) (((mant[i]) % 10) + '0');\n        }\n\n        // Find the first non-zero one\n        for (p = 0; p < rawdigits.length; p++) {\n            if (rawdigits[p] != '0') {\n                break;\n            }\n        }\n        shf = p;\n\n        // Now do the conversion\n        q = 0;\n        if (sign == -1) {\n            outputbuffer[q++] = '-';\n        }\n\n        if (p != rawdigits.length) {\n            // there are non zero digits...\n            outputbuffer[q++] = rawdigits[p++];\n            outputbuffer[q++] = '.';\n\n            while (p<rawdigits.length) {\n                outputbuffer[q++] = rawdigits[p++];\n            }\n        } else {\n            outputbuffer[q++] = '0';\n            outputbuffer[q++] = '.';\n            outputbuffer[q++] = '0';\n            outputbuffer[q++] = 'e';\n            outputbuffer[q++] = '0';\n            return new String(outputbuffer, 0, 5);\n        }\n\n        outputbuffer[q++] = 'e';\n\n        // Find the msd of the exponent\n\n        e = exp * 4 - shf - 1;\n        ae = e;\n        if (e < 0) {\n            ae = -e;\n        }\n\n        // Find the largest p such that p < e\n        for (p = 1000000000; p > ae; p /= 10) {\n            // nothing to do\n        }\n\n        if (e < 0) {\n            outputbuffer[q++] = '-';\n        }\n\n        while (p > 0) {\n            outputbuffer[q++] = (char)(ae / p + '0');\n            ae %= p;\n            p /= 10;\n        }\n\n        return new String(outputbuffer, 0, q);\n\n    }\n\n    /** Convert an instance to a string using normal notation.\n     * @return string representation of the instance in normal notation\n     */\n    protected String dfp2string() {\n        char buffer[] = new char[mant.length*4 + 20];\n        int p = 1;\n        int q;\n        int e = exp;\n        boolean pointInserted = false;\n\n        buffer[0] = ' ';\n\n        if (e <= 0) {\n            buffer[p++] = '0';\n            buffer[p++] = '.';\n            pointInserted = true;\n        }\n\n        while (e < 0) {\n            buffer[p++] = '0';\n            buffer[p++] = '0';\n            buffer[p++] = '0';\n            buffer[p++] = '0';\n            e++;\n        }\n\n        for (int i = mant.length - 1; i >= 0; i--) {\n            buffer[p++] = (char) ((mant[i] / 1000) + '0');\n            buffer[p++] = (char) (((mant[i] / 100) % 10) + '0');\n            buffer[p++] = (char) (((mant[i] / 10) % 10) + '0');\n            buffer[p++] = (char) (((mant[i]) % 10) + '0');\n            if (--e == 0) {\n                buffer[p++] = '.';\n                pointInserted = true;\n            }\n        }\n\n        while (e > 0) {\n            buffer[p++] = '0';\n            buffer[p++] = '0';\n            buffer[p++] = '0';\n            buffer[p++] = '0';\n            e--;\n        }\n\n        if (!pointInserted) {\n            // Ensure we have a radix point!\n            buffer[p++] = '.';\n        }\n\n        // Suppress leading zeros\n        q = 1;\n        while (buffer[q] == '0') {\n            q++;\n        }\n        if (buffer[q] == '.') {\n            q--;\n        }\n\n        // Suppress trailing zeros\n        while (buffer[p-1] == '0') {\n            p--;\n        }\n\n        // Insert sign\n        if (sign < 0) {\n            buffer[--q] = '-';\n        }\n\n        return new String(buffer, q, p - q);\n\n    }\n\n    /** Raises a trap.  This does not set the corresponding flag however.\n     *  @param type the trap type\n     *  @param what - name of routine trap occurred in\n     *  @param oper - input operator to function\n     *  @param result - the result computed prior to the trap\n     *  @return The suggested return value from the trap handler\n     */\n    public Dfp dotrap(int type, String what, Dfp oper, Dfp result) {\n        Dfp def = result;\n\n        switch (type) {\n            case DfpField.FLAG_INVALID:\n                def = newInstance(getZero());\n                def.sign = result.sign;\n                def.nans = QNAN;\n                break;\n\n            case DfpField.FLAG_DIV_ZERO:\n                if (nans == FINITE && mant[mant.length-1] != 0) {\n                    // normal case, we are finite, non-zero\n                    def = newInstance(getZero());\n                    def.sign = (byte)(sign*oper.sign);\n                    def.nans = INFINITE;\n                }\n\n                if (nans == FINITE && mant[mant.length-1] == 0) {\n                    //  0/0\n                    def = newInstance(getZero());\n                    def.nans = QNAN;\n                }\n\n                if (nans == INFINITE || nans == QNAN) {\n                    def = newInstance(getZero());\n                    def.nans = QNAN;\n                }\n\n                if (nans == INFINITE || nans == SNAN) {\n                    def = newInstance(getZero());\n                    def.nans = QNAN;\n                }\n                break;\n\n            case DfpField.FLAG_UNDERFLOW:\n                if ( (result.exp+mant.length) < MIN_EXP) {\n                    def = newInstance(getZero());\n                    def.sign = result.sign;\n                } else {\n                    def = newInstance(result);  // gradual underflow\n                }\n                result.exp += ERR_SCALE;\n                break;\n\n            case DfpField.FLAG_OVERFLOW:\n                result.exp -= ERR_SCALE;\n                def = newInstance(getZero());\n                def.sign = result.sign;\n                def.nans = INFINITE;\n                break;\n\n            default: def = result; break;\n        }\n\n        return trap(type, what, oper, def, result);\n\n    }\n\n    /** Trap handler.  Subclasses may override this to provide trap\n     *  functionality per IEEE 854-1987.\n     *\n     *  @param type  The exception type - e.g. FLAG_OVERFLOW\n     *  @param what  The name of the routine we were in e.g. divide()\n     *  @param oper  An operand to this function if any\n     *  @param def   The default return value if trap not enabled\n     *  @param result    The result that is specified to be delivered per\n     *                   IEEE 854, if any\n     *  @return the value that should be return by the operation triggering the trap\n     */\n    protected Dfp trap(int type, String what, Dfp oper, Dfp def, Dfp result) {\n        return def;\n    }\n\n    /** Returns the type - one of FINITE, INFINITE, SNAN, QNAN.\n     * @return type of the number\n     */\n    public int classify() {\n        return nans;\n    }\n\n    /** Creates an instance that is the same as x except that it has the sign of y.\n     * abs(x) = dfp.copysign(x, dfp.one)\n     * @param x number to get the value from\n     * @param y number to get the sign from\n     * @return a number with the value of x and the sign of y\n     */\n    public static Dfp copysign(final Dfp x, final Dfp y) {\n        Dfp result = x.newInstance(x);\n        result.sign = y.sign;\n        return result;\n    }\n\n    /** Returns the next number greater than this one in the direction of x.\n     * If this==x then simply returns this.\n     * @param x direction where to look at\n     * @return closest number next to instance in the direction of x\n     */\n    public Dfp nextAfter(final Dfp x) {\n\n        // make sure we don't mix number with different precision\n        if (field.getRadixDigits() != x.field.getRadixDigits()) {\n            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);\n            final Dfp result = newInstance(getZero());\n            result.nans = QNAN;\n            return dotrap(DfpField.FLAG_INVALID, NEXT_AFTER_TRAP, x, result);\n        }\n\n        // if this is greater than x\n        boolean up = false;\n        if (this.lessThan(x)) {\n            up = true;\n        }\n\n        if (compare(this, x) == 0) {\n            return newInstance(x);\n        }\n\n        if (lessThan(getZero())) {\n            up = !up;\n        }\n\n        final Dfp inc;\n        Dfp result;\n        if (up) {\n            inc = newInstance(getOne());\n            inc.exp = this.exp-mant.length+1;\n            inc.sign = this.sign;\n\n            if (this.equals(getZero())) {\n                inc.exp = MIN_EXP-mant.length;\n            }\n\n            result = add(inc);\n        } else {\n            inc = newInstance(getOne());\n            inc.exp = this.exp;\n            inc.sign = this.sign;\n\n            if (this.equals(inc)) {\n                inc.exp = this.exp-mant.length;\n            } else {\n                inc.exp = this.exp-mant.length+1;\n            }\n\n            if (this.equals(getZero())) {\n                inc.exp = MIN_EXP-mant.length;\n            }\n\n            result = this.subtract(inc);\n        }\n\n        if (result.classify() == INFINITE && this.classify() != INFINITE) {\n            field.setIEEEFlagsBits(DfpField.FLAG_INEXACT);\n            result = dotrap(DfpField.FLAG_INEXACT, NEXT_AFTER_TRAP, x, result);\n        }\n\n        if (result.equals(getZero()) && this.equals(getZero()) == false) {\n            field.setIEEEFlagsBits(DfpField.FLAG_INEXACT);\n            result = dotrap(DfpField.FLAG_INEXACT, NEXT_AFTER_TRAP, x, result);\n        }\n\n        return result;\n\n    }\n\n    /** Convert the instance into a double.\n     * @return a double approximating the instance\n     * @see #toSplitDouble()\n     */\n    public double toDouble() {\n\n        if (isInfinite()) {\n            if (lessThan(getZero())) {\n                return Double.NEGATIVE_INFINITY;\n            } else {\n                return Double.POSITIVE_INFINITY;\n            }\n        }\n\n        if (isNaN()) {\n            return Double.NaN;\n        }\n\n        Dfp y = this;\n        boolean negate = false;\n        int cmp0 = compare(this, getZero());\n        if (cmp0 == 0) {\n            return sign < 0 ? -0.0 : +0.0;\n        } else if (cmp0 < 0) {\n            y = negate();\n            negate = true;\n        }\n\n        /* Find the exponent, first estimate by integer log10, then adjust.\n         Should be faster than doing a natural logarithm.  */\n        int exponent = (int)(y.intLog10() * 3.32);\n        if (exponent < 0) {\n            exponent--;\n        }\n\n        Dfp tempDfp = DfpMath.pow(getTwo(), exponent);\n        while (tempDfp.lessThan(y) || tempDfp.equals(y)) {\n            tempDfp = tempDfp.multiply(2);\n            exponent++;\n        }\n        exponent--;\n\n        /* We have the exponent, now work on the mantissa */\n\n        y = y.divide(DfpMath.pow(getTwo(), exponent));\n        if (exponent > -1023) {\n            y = y.subtract(getOne());\n        }\n\n        if (exponent < -1074) {\n            return 0;\n        }\n\n        if (exponent > 1023) {\n            return negate ? Double.NEGATIVE_INFINITY : Double.POSITIVE_INFINITY;\n        }\n\n\n        y = y.multiply(newInstance(4503599627370496l)).rint();\n        String str = y.toString();\n        str = str.substring(0, str.length()-1);\n        long mantissa = Long.parseLong(str);\n\n        if (mantissa == 4503599627370496L) {\n            // Handle special case where we round up to next power of two\n            mantissa = 0;\n            exponent++;\n        }\n\n        /* Its going to be subnormal, so make adjustments */\n        if (exponent <= -1023) {\n            exponent--;\n        }\n\n        while (exponent < -1023) {\n            exponent++;\n            mantissa >>>= 1;\n        }\n\n        long bits = mantissa | ((exponent + 1023L) << 52);\n        double x = Double.longBitsToDouble(bits);\n\n        if (negate) {\n            x = -x;\n        }\n\n        return x;\n\n    }\n\n    /** Convert the instance into a split double.\n     * @return an array of two doubles which sum represent the instance\n     * @see #toDouble()\n     */\n    public double[] toSplitDouble() {\n        double split[] = new double[2];\n        long mask = 0xffffffffc0000000L;\n\n        split[0] = Double.longBitsToDouble(Double.doubleToLongBits(toDouble()) & mask);\n        split[1] = subtract(newInstance(split[0])).toDouble();\n\n        return split;\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public double getReal() {\n        return toDouble();\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp add(final double a) {\n        return add(newInstance(a));\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp subtract(final double a) {\n        return subtract(newInstance(a));\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp multiply(final double a) {\n        return multiply(newInstance(a));\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp divide(final double a) {\n        return divide(newInstance(a));\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp remainder(final double a) {\n        return remainder(newInstance(a));\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public long round() {\n        return FastMath.round(toDouble());\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp signum() {\n        if (isNaN() || isZero()) {\n            return this;\n        } else {\n            return newInstance(sign > 0 ? +1 : -1);\n        }\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp copySign(final Dfp s) {\n        if ((sign >= 0 && s.sign >= 0) || (sign < 0 && s.sign < 0)) { // Sign is currently OK\n            return this;\n        }\n        return negate(); // flip sign\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp copySign(final double s) {\n        long sb = Double.doubleToLongBits(s);\n        if ((sign >= 0 && sb >= 0) || (sign < 0 && sb < 0)) { // Sign is currently OK\n            return this;\n        }\n        return negate(); // flip sign\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp scalb(final int n) {\n        return multiply(DfpMath.pow(getTwo(), n));\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp hypot(final Dfp y) {\n        return multiply(this).add(y.multiply(y)).sqrt();\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp cbrt() {\n        return rootN(3);\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp rootN(final int n) {\n        return (sign >= 0) ?\n               DfpMath.pow(this, getOne().divide(n)) :\n               DfpMath.pow(negate(), getOne().divide(n)).negate();\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp pow(final double p) {\n        return DfpMath.pow(this, newInstance(p));\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp pow(final int n) {\n        return DfpMath.pow(this, n);\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp pow(final Dfp e) {\n        return DfpMath.pow(this, e);\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp exp() {\n        return DfpMath.exp(this);\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp expm1() {\n        return DfpMath.exp(this).subtract(getOne());\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp log() {\n        return DfpMath.log(this);\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp log1p() {\n        return DfpMath.log(this.add(getOne()));\n    }\n\n//  TODO: deactivate this implementation (and return type) in 4.0\n    /** Get the exponent of the greatest power of 10 that is less than or equal to abs(this).\n     *  @return integer base 10 logarithm\n     *  @deprecated as of 3.2, replaced by {@link #intLog10()}, in 4.0 the return type\n     *  will be changed to Dfp\n     */\n    @Deprecated\n    public int log10()  {\n        return intLog10();\n    }\n\n//    TODO: activate this implementation (and return type) in 4.0\n//    /** {@inheritDoc}\n//     * @since 3.2\n//     */\n//    public Dfp log10() {\n//        return DfpMath.log(this).divide(DfpMath.log(newInstance(10)));\n//    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp cos() {\n        return DfpMath.cos(this);\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp sin() {\n        return DfpMath.sin(this);\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp tan() {\n        return DfpMath.tan(this);\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp acos() {\n        return DfpMath.acos(this);\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp asin() {\n        return DfpMath.asin(this);\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp atan() {\n        return DfpMath.atan(this);\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp atan2(final Dfp x)\n        throws DimensionMismatchException {\n\n        // compute r = sqrt(x^2+y^2)\n        final Dfp r = x.multiply(x).add(multiply(this)).sqrt();\n\n        if (x.sign >= 0) {\n\n            // compute atan2(y, x) = 2 atan(y / (r + x))\n            return getTwo().multiply(divide(r.add(x)).atan());\n\n        } else {\n\n            // compute atan2(y, x) = +/- pi - 2 atan(y / (r - x))\n            final Dfp tmp = getTwo().multiply(divide(r.subtract(x)).atan());\n            final Dfp pmPi = newInstance((tmp.sign <= 0) ? -FastMath.PI : FastMath.PI);\n            return pmPi.subtract(tmp);\n\n        }\n\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp cosh() {\n        return DfpMath.exp(this).add(DfpMath.exp(negate())).divide(2);\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp sinh() {\n        return DfpMath.exp(this).subtract(DfpMath.exp(negate())).divide(2);\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp tanh() {\n        final Dfp ePlus  = DfpMath.exp(this);\n        final Dfp eMinus = DfpMath.exp(negate());\n        return ePlus.subtract(eMinus).divide(ePlus.add(eMinus));\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp acosh() {\n        return multiply(this).subtract(getOne()).sqrt().add(this).log();\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp asinh() {\n        return multiply(this).add(getOne()).sqrt().add(this).log();\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp atanh() {\n        return getOne().add(this).divide(getOne().subtract(this)).log().divide(2);\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp linearCombination(final Dfp[] a, final Dfp[] b)\n        throws DimensionMismatchException {\n        if (a.length != b.length) {\n            throw new DimensionMismatchException(a.length, b.length);\n        }\n        Dfp r = getZero();\n        for (int i = 0; i < a.length; ++i) {\n            r = r.add(a[i].multiply(b[i]));\n        }\n        return r;\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp linearCombination(final double[] a, final Dfp[] b)\n        throws DimensionMismatchException {\n        if (a.length != b.length) {\n            throw new DimensionMismatchException(a.length, b.length);\n        }\n        Dfp r = getZero();\n        for (int i = 0; i < a.length; ++i) {\n            r = r.add(b[i].multiply(a[i]));\n        }\n        return r;\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp linearCombination(final Dfp a1, final Dfp b1, final Dfp a2, final Dfp b2) {\n        return a1.multiply(b1).add(a2.multiply(b2));\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp linearCombination(final double a1, final Dfp b1, final double a2, final Dfp b2) {\n        return b1.multiply(a1).add(b2.multiply(a2));\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp linearCombination(final Dfp a1, final Dfp b1,\n                                 final Dfp a2, final Dfp b2,\n                                 final Dfp a3, final Dfp b3) {\n        return a1.multiply(b1).add(a2.multiply(b2)).add(a3.multiply(b3));\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp linearCombination(final double a1, final Dfp b1,\n                                 final double a2, final Dfp b2,\n                                 final double a3, final Dfp b3) {\n        return b1.multiply(a1).add(b2.multiply(a2)).add(b3.multiply(a3));\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp linearCombination(final Dfp a1, final Dfp b1, final Dfp a2, final Dfp b2,\n                                 final Dfp a3, final Dfp b3, final Dfp a4, final Dfp b4) {\n        return a1.multiply(b1).add(a2.multiply(b2)).add(a3.multiply(b3)).add(a4.multiply(b4));\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp linearCombination(final double a1, final Dfp b1, final double a2, final Dfp b2,\n                                 final double a3, final Dfp b3, final double a4, final Dfp b4) {\n        return b1.multiply(a1).add(b2.multiply(a2)).add(b3.multiply(a3)).add(b4.multiply(a4));\n    }\n\n}\n",
  "tokensGeneralGrammar" : [ "null", "true", "false", ",", ".", ":", ";", "?", "(", ")", "jdVar", "stream", "Arrays", "allMatch", "noneMatch", "anyMatch", "~", ">>", "<<", ">>>", "|", "&", "^", "+", "-", "/", "*", "%", "&&", "||", ">=", "<=", ">", "<", "==", "!=", "instanceof", "class", "methodResultID", "this" ],
  "tokensGeneralValuesGlobalDictionary" : [ [ "0", "int" ], [ "1", "int" ], [ "-1", "int" ], [ "0.0", "double" ], [ "1.0", "double" ], [ "-1.0", "double" ], [ "\"\"", "String" ], [ "\" \"", "String" ] ],
  "tokensProjectClasses" : [ [ "RealFieldElement", "org.apache.commons.math3" ], [ "Primes", "org.apache.commons.math3.primes" ], [ "SmallPrimes", "org.apache.commons.math3.primes" ], [ "PollardRho", "org.apache.commons.math3.primes" ], [ "CurveFitter", "org.apache.commons.math3.fitting" ], [ "GaussianCurveFitter", "org.apache.commons.math3.fitting" ], [ "SimpleCurveFitter", "org.apache.commons.math3.fitting" ], [ "PolynomialFitter", "org.apache.commons.math3.fitting" ], [ "HarmonicFitter", "org.apache.commons.math3.fitting" ], [ "WeightedObservedPoint", "org.apache.commons.math3.fitting" ], [ "ParameterValidator", "org.apache.commons.math3.fitting.leastsquares" ], [ "LevenbergMarquardtOptimizer", "org.apache.commons.math3.fitting.leastsquares" ], [ "EvaluationRmsChecker", "org.apache.commons.math3.fitting.leastsquares" ], [ "OptimumImpl", "org.apache.commons.math3.fitting.leastsquares" ], [ "LeastSquaresAdapter", "org.apache.commons.math3.fitting.leastsquares" ], [ "DenseWeightedEvaluation", "org.apache.commons.math3.fitting.leastsquares" ], [ "LeastSquaresOptimizer", "org.apache.commons.math3.fitting.leastsquares" ], [ "AbstractEvaluation", "org.apache.commons.math3.fitting.leastsquares" ], [ "GaussNewtonOptimizer", "org.apache.commons.math3.fitting.leastsquares" ], [ "LeastSquaresFactory", "org.apache.commons.math3.fitting.leastsquares" ], [ "ValueAndJacobianFunction", "org.apache.commons.math3.fitting.leastsquares" ], [ "MultivariateJacobianFunction", "org.apache.commons.math3.fitting.leastsquares" ], [ "LeastSquaresBuilder", "org.apache.commons.math3.fitting.leastsquares" ], [ "LeastSquaresProblem", "org.apache.commons.math3.fitting.leastsquares" ], [ "WeightedObservedPoints", "org.apache.commons.math3.fitting" ], [ "GaussianFitter", "org.apache.commons.math3.fitting" ], [ "AbstractCurveFitter", "org.apache.commons.math3.fitting" ], [ "HarmonicCurveFitter", "org.apache.commons.math3.fitting" ], [ "PolynomialCurveFitter", "org.apache.commons.math3.fitting" ], [ "UnivariateMatrixFunction", "org.apache.commons.math3.analysis" ], [ "FunctionUtils", "org.apache.commons.math3.analysis" ], [ "DifferentiableUnivariateMatrixFunction", "org.apache.commons.math3.analysis" ], [ "IterativeLegendreGaussIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "LegendreGaussIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "MidPointIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "RombergIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "SimpsonIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "BaseRuleFactory", "org.apache.commons.math3.analysis.integration.gauss" ], [ "HermiteRuleFactory", "org.apache.commons.math3.analysis.integration.gauss" ], [ "GaussIntegratorFactory", "org.apache.commons.math3.analysis.integration.gauss" ], [ "LegendreRuleFactory", "org.apache.commons.math3.analysis.integration.gauss" ], [ "LegendreHighPrecisionRuleFactory", "org.apache.commons.math3.analysis.integration.gauss" ], [ "SymmetricGaussIntegrator", "org.apache.commons.math3.analysis.integration.gauss" ], [ "GaussIntegrator", "org.apache.commons.math3.analysis.integration.gauss" ], [ "BaseAbstractUnivariateIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "UnivariateIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "TrapezoidIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "BivariateFunction", "org.apache.commons.math3.analysis" ], [ "DifferentiableUnivariateFunction", "org.apache.commons.math3.analysis" ], [ "DifferentiableUnivariateVectorFunction", "org.apache.commons.math3.analysis" ], [ "UnivariateVectorFunction", "org.apache.commons.math3.analysis" ], [ "AbstractDifferentiableUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "AbstractUnivariateDifferentiableSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BaseUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "PegasusSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BracketedUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "UnivariateSolverUtils", "org.apache.commons.math3.analysis.solvers" ], [ "FieldBracketingNthOrderBrentSolver", "org.apache.commons.math3.analysis.solvers" ], [ "NewtonRaphsonSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BaseSecantSolver", "org.apache.commons.math3.analysis.solvers" ], [ "SecantSolver", "org.apache.commons.math3.analysis.solvers" ], [ "DifferentiableUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "UnivariateDifferentiableSolver", "org.apache.commons.math3.analysis.solvers" ], [ "MullerSolver2", "org.apache.commons.math3.analysis.solvers" ], [ "AbstractPolynomialSolver", "org.apache.commons.math3.analysis.solvers" ], [ "MullerSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BaseAbstractUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BrentSolver", "org.apache.commons.math3.analysis.solvers" ], [ "LaguerreSolver", "org.apache.commons.math3.analysis.solvers" ], [ "IllinoisSolver", "org.apache.commons.math3.analysis.solvers" ], [ "PolynomialSolver", "org.apache.commons.math3.analysis.solvers" ], [ "RegulaFalsiSolver", "org.apache.commons.math3.analysis.solvers" ], [ "AllowedSolution", "org.apache.commons.math3.analysis.solvers" ], [ "NewtonSolver", "org.apache.commons.math3.analysis.solvers" ], [ "RiddersSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BisectionSolver", "org.apache.commons.math3.analysis.solvers" ], [ "AbstractUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "UnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BracketingNthOrderBrentSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BracketedRealFieldUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "Asin", "org.apache.commons.math3.analysis.function" ], [ "Cosh", "org.apache.commons.math3.analysis.function" ], [ "Multiply", "org.apache.commons.math3.analysis.function" ], [ "Atan", "org.apache.commons.math3.analysis.function" ], [ "Asinh", "org.apache.commons.math3.analysis.function" ], [ "Rint", "org.apache.commons.math3.analysis.function" ], [ "Cos", "org.apache.commons.math3.analysis.function" ], [ "StepFunction", "org.apache.commons.math3.analysis.function" ], [ "Add", "org.apache.commons.math3.analysis.function" ], [ "Sqrt", "org.apache.commons.math3.analysis.function" ], [ "Inverse", "org.apache.commons.math3.analysis.function" ], [ "Gaussian", "org.apache.commons.math3.analysis.function" ], [ "Pow", "org.apache.commons.math3.analysis.function" ], [ "Exp", "org.apache.commons.math3.analysis.function" ], [ "Tanh", "org.apache.commons.math3.analysis.function" ], [ "Cbrt", "org.apache.commons.math3.analysis.function" ], [ "Log1p", "org.apache.commons.math3.analysis.function" ], [ "Constant", "org.apache.commons.math3.analysis.function" ], [ "Identity", "org.apache.commons.math3.analysis.function" ], [ "Signum", "org.apache.commons.math3.analysis.function" ], [ "Logit", "org.apache.commons.math3.analysis.function" ], [ "Ceil", "org.apache.commons.math3.analysis.function" ], [ "Subtract", "org.apache.commons.math3.analysis.function" ], [ "Sinh", "org.apache.commons.math3.analysis.function" ], [ "Max", "org.apache.commons.math3.analysis.function" ], [ "Acosh", "org.apache.commons.math3.analysis.function" ], [ "Min", "org.apache.commons.math3.analysis.function" ], [ "Expm1", "org.apache.commons.math3.analysis.function" ], [ "Abs", "org.apache.commons.math3.analysis.function" ], [ "Divide", "org.apache.commons.math3.analysis.function" ], [ "Log", "org.apache.commons.math3.analysis.function" ], [ "Ulp", "org.apache.commons.math3.analysis.function" ], [ "Log10", "org.apache.commons.math3.analysis.function" ], [ "Power", "org.apache.commons.math3.analysis.function" ], [ "Minus", "org.apache.commons.math3.analysis.function" ], [ "Atan2", "org.apache.commons.math3.analysis.function" ], [ "Logistic", "org.apache.commons.math3.analysis.function" ], [ "Acos", "org.apache.commons.math3.analysis.function" ], [ "Floor", "org.apache.commons.math3.analysis.function" ], [ "Sigmoid", "org.apache.commons.math3.analysis.function" ], [ "Sinc", "org.apache.commons.math3.analysis.function" ], [ "Atanh", "org.apache.commons.math3.analysis.function" ], [ "HarmonicOscillator", "org.apache.commons.math3.analysis.function" ], [ "Tan", "org.apache.commons.math3.analysis.function" ], [ "Sin", "org.apache.commons.math3.analysis.function" ], [ "MultivariateFunction", "org.apache.commons.math3.analysis" ], [ "DifferentiableMultivariateFunction", "org.apache.commons.math3.analysis" ], [ "UnivariateFunction", "org.apache.commons.math3.analysis" ], [ "TrivariateFunction", "org.apache.commons.math3.analysis" ], [ "MultivariateMatrixFunction", "org.apache.commons.math3.analysis" ], [ "ParametricUnivariateFunction", "org.apache.commons.math3.analysis" ], [ "UnivariateDifferentiableVectorFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "UnivariateDifferentiableMatrixFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "DSCompiler", "org.apache.commons.math3.analysis.differentiation" ], [ "SparseGradient", "org.apache.commons.math3.analysis.differentiation" ], [ "UnivariateFunctionDifferentiator", "org.apache.commons.math3.analysis.differentiation" ], [ "UnivariateMatrixFunctionDifferentiator", "org.apache.commons.math3.analysis.differentiation" ], [ "MultivariateDifferentiableFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "JacobianFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "GradientFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "DerivativeStructure", "org.apache.commons.math3.analysis.differentiation" ], [ "UnivariateVectorFunctionDifferentiator", "org.apache.commons.math3.analysis.differentiation" ], [ "FiniteDifferencesDifferentiator", "org.apache.commons.math3.analysis.differentiation" ], [ "MultivariateDifferentiableVectorFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "UnivariateDifferentiableFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "MultivariateVectorFunction", "org.apache.commons.math3.analysis" ], [ "DifferentiableMultivariateVectorFunction", "org.apache.commons.math3.analysis" ], [ "PolynomialFunctionNewtonForm", "org.apache.commons.math3.analysis.polynomials" ], [ "PolynomialFunctionLagrangeForm", "org.apache.commons.math3.analysis.polynomials" ], [ "PolynomialSplineFunction", "org.apache.commons.math3.analysis.polynomials" ], [ "PolynomialsUtils", "org.apache.commons.math3.analysis.polynomials" ], [ "PolynomialFunction", "org.apache.commons.math3.analysis.polynomials" ], [ "RealFieldUnivariateFunction", "org.apache.commons.math3.analysis" ], [ "TricubicInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "BicubicSplineInterpolatingFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "BicubicSplineFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "LoessInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "DividedDifferenceInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "HermiteInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "TricubicInterpolatingFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "TricubicFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "TrivariateGridInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "NevilleInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "MicrosphereProjectionInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "AkimaSplineInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "MultivariateInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "BicubicSplineInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "TricubicSplineInterpolatingFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "TricubicSplineFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "FieldHermiteInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "InterpolatingMicrosphere", "org.apache.commons.math3.analysis.interpolation" ], [ "LinearInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "BivariateGridInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "UnivariatePeriodicInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "BicubicInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "UnivariateInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "SmoothingPolynomialBicubicSplineInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "PiecewiseBicubicSplineInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "BicubicInterpolatingFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "BicubicFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "SplineInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "TricubicSplineInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "InterpolatingMicrosphere2D", "org.apache.commons.math3.analysis.interpolation" ], [ "PiecewiseBicubicSplineInterpolatingFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "MicrosphereInterpolatingFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "MicrosphereInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "Precision", "org.apache.commons.math3.util" ], [ "MultidimensionalCounter", "org.apache.commons.math3.util" ], [ "DoubleArray", "org.apache.commons.math3.util" ], [ "Incrementor", "org.apache.commons.math3.util" ], [ "OpenIntToDoubleHashMap", "org.apache.commons.math3.util" ], [ "OpenIntToFieldHashMap", "org.apache.commons.math3.util" ], [ "MathArrays", "org.apache.commons.math3.util" ], [ "Pair", "org.apache.commons.math3.util" ], [ "FastMathCalc", "org.apache.commons.math3.util" ], [ "FastMath", "org.apache.commons.math3.util" ], [ "ResizableDoubleArray", "org.apache.commons.math3.util" ], [ "BigRealField", "org.apache.commons.math3.util" ], [ "Decimal64Field", "org.apache.commons.math3.util" ], [ "Combinations", "org.apache.commons.math3.util" ], [ "MathUtils", "org.apache.commons.math3.util" ], [ "NumberTransformer", "org.apache.commons.math3.util" ], [ "ContinuedFraction", "org.apache.commons.math3.util" ], [ "RandomPivotingStrategy", "org.apache.commons.math3.util" ], [ "IterationManager", "org.apache.commons.math3.util" ], [ "CompositeFormat", "org.apache.commons.math3.util" ], [ "KthSelector", "org.apache.commons.math3.util" ], [ "IterationEvent", "org.apache.commons.math3.util" ], [ "TransformerMap", "org.apache.commons.math3.util" ], [ "IntegerSequence", "org.apache.commons.math3.util" ], [ "FastMathLiteralArrays", "org.apache.commons.math3.util" ], [ "CombinatoricsUtils", "org.apache.commons.math3.util" ], [ "IterationListener", "org.apache.commons.math3.util" ], [ "PivotingStrategyInterface", "org.apache.commons.math3.util" ], [ "CentralPivotingStrategy", "org.apache.commons.math3.util" ], [ "Decimal64", "org.apache.commons.math3.util" ], [ "DefaultTransformer", "org.apache.commons.math3.util" ], [ "BigReal", "org.apache.commons.math3.util" ], [ "ArithmeticUtils", "org.apache.commons.math3.util" ], [ "MedianOf3PivotingStrategy", "org.apache.commons.math3.util" ], [ "ComplexFormat", "org.apache.commons.math3.complex" ], [ "ComplexField", "org.apache.commons.math3.complex" ], [ "RootsOfUnity", "org.apache.commons.math3.complex" ], [ "Quaternion", "org.apache.commons.math3.complex" ], [ "Complex", "org.apache.commons.math3.complex" ], [ "ComplexUtils", "org.apache.commons.math3.complex" ], [ "DifferentiableMultivariateVectorOptimizer", "org.apache.commons.math3.optimization" ], [ "LeastSquaresConverter", "org.apache.commons.math3.optimization" ], [ "BaseMultivariateSimpleBoundsOptimizer", "org.apache.commons.math3.optimization" ], [ "PointValuePair", "org.apache.commons.math3.optimization" ], [ "DifferentiableMultivariateOptimizer", "org.apache.commons.math3.optimization" ], [ "SimpleValueChecker", "org.apache.commons.math3.optimization" ], [ "CurveFitter", "org.apache.commons.math3.optimization.fitting" ], [ "PolynomialFitter", "org.apache.commons.math3.optimization.fitting" ], [ "HarmonicFitter", "org.apache.commons.math3.optimization.fitting" ], [ "WeightedObservedPoint", "org.apache.commons.math3.optimization.fitting" ], [ "GaussianFitter", "org.apache.commons.math3.optimization.fitting" ], [ "AbstractConvergenceChecker", "org.apache.commons.math3.optimization" ], [ "AbstractSimplex", "org.apache.commons.math3.optimization.direct" ], [ "SimplexOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "BOBYQAOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "NelderMeadSimplex", "org.apache.commons.math3.optimization.direct" ], [ "MultivariateFunctionMappingAdapter", "org.apache.commons.math3.optimization.direct" ], [ "BaseAbstractMultivariateSimpleBoundsOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "BaseAbstractMultivariateVectorOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "CMAESOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "MultivariateFunctionPenaltyAdapter", "org.apache.commons.math3.optimization.direct" ], [ "BaseAbstractMultivariateOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "PowellOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "MultiDirectionalSimplex", "org.apache.commons.math3.optimization.direct" ], [ "InitialGuess", "org.apache.commons.math3.optimization" ], [ "Preconditioner", "org.apache.commons.math3.optimization.general" ], [ "LevenbergMarquardtOptimizer", "org.apache.commons.math3.optimization.general" ], [ "AbstractLeastSquaresOptimizer", "org.apache.commons.math3.optimization.general" ], [ "AbstractDifferentiableOptimizer", "org.apache.commons.math3.optimization.general" ], [ "GaussNewtonOptimizer", "org.apache.commons.math3.optimization.general" ], [ "AbstractScalarDifferentiableOptimizer", "org.apache.commons.math3.optimization.general" ], [ "NonLinearConjugateGradientOptimizer", "org.apache.commons.math3.optimization.general" ], [ "ConjugateGradientFormula", "org.apache.commons.math3.optimization.general" ], [ "BaseMultivariateVectorMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "NoFeasibleSolutionException", "org.apache.commons.math3.optimization.linear" ], [ "AbstractLinearOptimizer", "org.apache.commons.math3.optimization.linear" ], [ "LinearConstraint", "org.apache.commons.math3.optimization.linear" ], [ "SimplexSolver", "org.apache.commons.math3.optimization.linear" ], [ "LinearOptimizer", "org.apache.commons.math3.optimization.linear" ], [ "UnboundedSolutionException", "org.apache.commons.math3.optimization.linear" ], [ "SimplexTableau", "org.apache.commons.math3.optimization.linear" ], [ "LinearObjectiveFunction", "org.apache.commons.math3.optimization.linear" ], [ "Relationship", "org.apache.commons.math3.optimization.linear" ], [ "SimpleBounds", "org.apache.commons.math3.optimization" ], [ "PointVectorValuePair", "org.apache.commons.math3.optimization" ], [ "MultivariateDifferentiableVectorMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "DifferentiableMultivariateMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "SimplePointChecker", "org.apache.commons.math3.optimization" ], [ "SimpleVectorValueChecker", "org.apache.commons.math3.optimization" ], [ "BaseOptimizer", "org.apache.commons.math3.optimization" ], [ "MultivariateOptimizer", "org.apache.commons.math3.optimization" ], [ "GoalType", "org.apache.commons.math3.optimization" ], [ "BrentOptimizer", "org.apache.commons.math3.optimization.univariate" ], [ "UnivariateMultiStartOptimizer", "org.apache.commons.math3.optimization.univariate" ], [ "BaseUnivariateOptimizer", "org.apache.commons.math3.optimization.univariate" ], [ "BaseAbstractUnivariateOptimizer", "org.apache.commons.math3.optimization.univariate" ], [ "SimpleUnivariateValueChecker", "org.apache.commons.math3.optimization.univariate" ], [ "UnivariatePointValuePair", "org.apache.commons.math3.optimization.univariate" ], [ "BracketFinder", "org.apache.commons.math3.optimization.univariate" ], [ "UnivariateOptimizer", "org.apache.commons.math3.optimization.univariate" ], [ "BaseMultivariateOptimizer", "org.apache.commons.math3.optimization" ], [ "ConvergenceChecker", "org.apache.commons.math3.optimization" ], [ "BaseMultivariateMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "MultivariateDifferentiableOptimizer", "org.apache.commons.math3.optimization" ], [ "MultivariateDifferentiableVectorOptimizer", "org.apache.commons.math3.optimization" ], [ "Target", "org.apache.commons.math3.optimization" ], [ "Weight", "org.apache.commons.math3.optimization" ], [ "MultivariateMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "OptimizationData", "org.apache.commons.math3.optimization" ], [ "BaseMultivariateVectorOptimizer", "org.apache.commons.math3.optimization" ], [ "MultivariateDifferentiableMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "DifferentiableMultivariateVectorMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "NonSymmetricMatrixException", "org.apache.commons.math3.linear" ], [ "FieldVectorPreservingVisitor", "org.apache.commons.math3.linear" ], [ "FieldVector", "org.apache.commons.math3.linear" ], [ "AnyMatrix", "org.apache.commons.math3.linear" ], [ "NonSquareOperatorException", "org.apache.commons.math3.linear" ], [ "SingularValueDecomposition", "org.apache.commons.math3.linear" ], [ "EigenDecomposition", "org.apache.commons.math3.linear" ], [ "RealMatrixChangingVisitor", "org.apache.commons.math3.linear" ], [ "FieldLUDecomposition", "org.apache.commons.math3.linear" ], [ "NonPositiveDefiniteMatrixException", "org.apache.commons.math3.linear" ], [ "RealMatrixFormat", "org.apache.commons.math3.linear" ], [ "MatrixUtils", "org.apache.commons.math3.linear" ], [ "OpenMapRealVector", "org.apache.commons.math3.linear" ], [ "RealMatrixPreservingVisitor", "org.apache.commons.math3.linear" ], [ "SingularMatrixException", "org.apache.commons.math3.linear" ], [ "DefaultFieldMatrixPreservingVisitor", "org.apache.commons.math3.linear" ], [ "FieldVectorChangingVisitor", "org.apache.commons.math3.linear" ], [ "TriDiagonalTransformer", "org.apache.commons.math3.linear" ], [ "DefaultRealMatrixChangingVisitor", "org.apache.commons.math3.linear" ], [ "AbstractRealMatrix", "org.apache.commons.math3.linear" ], [ "Array2DRowRealMatrix", "org.apache.commons.math3.linear" ], [ "BlockFieldMatrix", "org.apache.commons.math3.linear" ], [ "Array2DRowFieldMatrix", "org.apache.commons.math3.linear" ], [ "FieldMatrix", "org.apache.commons.math3.linear" ], [ "IterativeLinearSolver", "org.apache.commons.math3.linear" ], [ "ArrayRealVector", "org.apache.commons.math3.linear" ], [ "MatrixDimensionMismatchException", "org.apache.commons.math3.linear" ], [ "ArrayFieldVector", "org.apache.commons.math3.linear" ], [ "DecompositionSolver", "org.apache.commons.math3.linear" ], [ "LUDecomposition", "org.apache.commons.math3.linear" ], [ "ConjugateGradient", "org.apache.commons.math3.linear" ], [ "NonPositiveDefiniteOperatorException", "org.apache.commons.math3.linear" ], [ "OpenMapRealMatrix", "org.apache.commons.math3.linear" ], [ "NonSelfAdjointOperatorException", "org.apache.commons.math3.linear" ], [ "BiDiagonalTransformer", "org.apache.commons.math3.linear" ], [ "CholeskyDecomposition", "org.apache.commons.math3.linear" ], [ "FieldDecompositionSolver", "org.apache.commons.math3.linear" ], [ "RealVectorPreservingVisitor", "org.apache.commons.math3.linear" ], [ "SingularOperatorException", "org.apache.commons.math3.linear" ], [ "BlockRealMatrix", "org.apache.commons.math3.linear" ], [ "SparseFieldMatrix", "org.apache.commons.math3.linear" ], [ "NonSquareMatrixException", "org.apache.commons.math3.linear" ], [ "SparseRealMatrix", "org.apache.commons.math3.linear" ], [ "RealVector", "org.apache.commons.math3.linear" ], [ "FieldMatrixPreservingVisitor", "org.apache.commons.math3.linear" ], [ "PreconditionedIterativeLinearSolver", "org.apache.commons.math3.linear" ], [ "QRDecomposition", "org.apache.commons.math3.linear" ], [ "SymmLQ", "org.apache.commons.math3.linear" ], [ "SparseFieldVector", "org.apache.commons.math3.linear" ], [ "RealVectorFormat", "org.apache.commons.math3.linear" ], [ "IllConditionedOperatorException", "org.apache.commons.math3.linear" ], [ "DefaultIterativeLinearSolverEvent", "org.apache.commons.math3.linear" ], [ "DefaultRealMatrixPreservingVisitor", "org.apache.commons.math3.linear" ], [ "IterativeLinearSolverEvent", "org.apache.commons.math3.linear" ], [ "DiagonalMatrix", "org.apache.commons.math3.linear" ], [ "HessenbergTransformer", "org.apache.commons.math3.linear" ], [ "RectangularCholeskyDecomposition", "org.apache.commons.math3.linear" ], [ "FieldMatrixChangingVisitor", "org.apache.commons.math3.linear" ], [ "DefaultFieldMatrixChangingVisitor", "org.apache.commons.math3.linear" ], [ "JacobiPreconditioner", "org.apache.commons.math3.linear" ], [ "RealLinearOperator", "org.apache.commons.math3.linear" ], [ "RRQRDecomposition", "org.apache.commons.math3.linear" ], [ "AbstractFieldMatrix", "org.apache.commons.math3.linear" ], [ "RealMatrix", "org.apache.commons.math3.linear" ], [ "SchurTransformer", "org.apache.commons.math3.linear" ], [ "RealVectorChangingVisitor", "org.apache.commons.math3.linear" ], [ "SparseRealVector", "org.apache.commons.math3.linear" ], [ "CauchyDistribution", "org.apache.commons.math3.distribution" ], [ "LaplaceDistribution", "org.apache.commons.math3.distribution" ], [ "AbstractRealDistribution", "org.apache.commons.math3.distribution" ], [ "HypergeometricDistribution", "org.apache.commons.math3.distribution" ], [ "TDistribution", "org.apache.commons.math3.distribution" ], [ "ChiSquaredDistribution", "org.apache.commons.math3.distribution" ], [ "TriangularDistribution", "org.apache.commons.math3.distribution" ], [ "MultivariateNormalMixtureExpectationMaximization", "org.apache.commons.math3.distribution.fitting" ], [ "BetaDistribution", "org.apache.commons.math3.distribution" ], [ "RealDistribution", "org.apache.commons.math3.distribution" ], [ "NormalDistribution", "org.apache.commons.math3.distribution" ], [ "SaddlePointExpansion", "org.apache.commons.math3.distribution" ], [ "MixtureMultivariateNormalDistribution", "org.apache.commons.math3.distribution" ], [ "UniformRealDistribution", "org.apache.commons.math3.distribution" ], [ "GumbelDistribution", "org.apache.commons.math3.distribution" ], [ "ZipfDistribution", "org.apache.commons.math3.distribution" ], [ "BinomialDistribution", "org.apache.commons.math3.distribution" ], [ "EnumeratedIntegerDistribution", "org.apache.commons.math3.distribution" ], [ "IntegerDistribution", "org.apache.commons.math3.distribution" ], [ "WeibullDistribution", "org.apache.commons.math3.distribution" ], [ "MultivariateRealDistribution", "org.apache.commons.math3.distribution" ], [ "NakagamiDistribution", "org.apache.commons.math3.distribution" ], [ "EnumeratedDistribution", "org.apache.commons.math3.distribution" ], [ "ConstantRealDistribution", "org.apache.commons.math3.distribution" ], [ "MultivariateNormalDistribution", "org.apache.commons.math3.distribution" ], [ "ExponentialDistribution", "org.apache.commons.math3.distribution" ], [ "UniformIntegerDistribution", "org.apache.commons.math3.distribution" ], [ "LogNormalDistribution", "org.apache.commons.math3.distribution" ], [ "PascalDistribution", "org.apache.commons.math3.distribution" ], [ "ParetoDistribution", "org.apache.commons.math3.distribution" ], [ "FDistribution", "org.apache.commons.math3.distribution" ], [ "GeometricDistribution", "org.apache.commons.math3.distribution" ], [ "AbstractMultivariateRealDistribution", "org.apache.commons.math3.distribution" ], [ "AbstractIntegerDistribution", "org.apache.commons.math3.distribution" ], [ "PoissonDistribution", "org.apache.commons.math3.distribution" ], [ "KolmogorovSmirnovDistribution", "org.apache.commons.math3.distribution" ], [ "MixtureMultivariateRealDistribution", "org.apache.commons.math3.distribution" ], [ "GammaDistribution", "org.apache.commons.math3.distribution" ], [ "EnumeratedRealDistribution", "org.apache.commons.math3.distribution" ], [ "LogisticDistribution", "org.apache.commons.math3.distribution" ], [ "LevyDistribution", "org.apache.commons.math3.distribution" ], [ "PointValuePair", "org.apache.commons.math3.optim" ], [ "SimpleValueChecker", "org.apache.commons.math3.optim" ], [ "AbstractConvergenceChecker", "org.apache.commons.math3.optim" ], [ "InitialGuess", "org.apache.commons.math3.optim" ], [ "MaxIter", "org.apache.commons.math3.optim" ], [ "NoFeasibleSolutionException", "org.apache.commons.math3.optim.linear" ], [ "LinearConstraintSet", "org.apache.commons.math3.optim.linear" ], [ "LinearConstraint", "org.apache.commons.math3.optim.linear" ], [ "PivotSelectionRule", "org.apache.commons.math3.optim.linear" ], [ "SimplexSolver", "org.apache.commons.math3.optim.linear" ], [ "LinearOptimizer", "org.apache.commons.math3.optim.linear" ], [ "UnboundedSolutionException", "org.apache.commons.math3.optim.linear" ], [ "SimplexTableau", "org.apache.commons.math3.optim.linear" ], [ "SolutionCallback", "org.apache.commons.math3.optim.linear" ], [ "LinearObjectiveFunction", "org.apache.commons.math3.optim.linear" ], [ "NonNegativeConstraint", "org.apache.commons.math3.optim.linear" ], [ "Relationship", "org.apache.commons.math3.optim.linear" ], [ "AbstractOptimizationProblem", "org.apache.commons.math3.optim" ], [ "SimpleBounds", "org.apache.commons.math3.optim" ], [ "PointVectorValuePair", "org.apache.commons.math3.optim" ], [ "SimplePointChecker", "org.apache.commons.math3.optim" ], [ "SimpleVectorValueChecker", "org.apache.commons.math3.optim" ], [ "BaseOptimizer", "org.apache.commons.math3.optim" ], [ "BaseMultiStartMultivariateOptimizer", "org.apache.commons.math3.optim" ], [ "MultiStartUnivariateOptimizer", "org.apache.commons.math3.optim.univariate" ], [ "BrentOptimizer", "org.apache.commons.math3.optim.univariate" ], [ "UnivariateObjectiveFunction", "org.apache.commons.math3.optim.univariate" ], [ "SimpleUnivariateValueChecker", "org.apache.commons.math3.optim.univariate" ], [ "SearchInterval", "org.apache.commons.math3.optim.univariate" ], [ "UnivariatePointValuePair", "org.apache.commons.math3.optim.univariate" ], [ "BracketFinder", "org.apache.commons.math3.optim.univariate" ], [ "UnivariateOptimizer", "org.apache.commons.math3.optim.univariate" ], [ "BaseMultivariateOptimizer", "org.apache.commons.math3.optim" ], [ "ConvergenceChecker", "org.apache.commons.math3.optim" ], [ "OptimizationProblem", "org.apache.commons.math3.optim" ], [ "MaxEval", "org.apache.commons.math3.optim" ], [ "OptimizationData", "org.apache.commons.math3.optim" ], [ "Preconditioner", "org.apache.commons.math3.optim.nonlinear.scalar.gradient" ], [ "NonLinearConjugateGradientOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar.gradient" ], [ "LeastSquaresConverter", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "GradientMultivariateOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "MultivariateFunctionMappingAdapter", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "LineSearch", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "ObjectiveFunction", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "MultivariateOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "GoalType", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "AbstractSimplex", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "SimplexOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "BOBYQAOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "NelderMeadSimplex", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "CMAESOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "PowellOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "MultiDirectionalSimplex", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "MultiStartMultivariateOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "MultivariateFunctionPenaltyAdapter", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "ObjectiveFunctionGradient", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "ModelFunction", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "LevenbergMarquardtOptimizer", "org.apache.commons.math3.optim.nonlinear.vector.jacobian" ], [ "AbstractLeastSquaresOptimizer", "org.apache.commons.math3.optim.nonlinear.vector.jacobian" ], [ "GaussNewtonOptimizer", "org.apache.commons.math3.optim.nonlinear.vector.jacobian" ], [ "ModelFunctionJacobian", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "JacobianMultivariateVectorOptimizer", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "MultivariateVectorOptimizer", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "Target", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "Weight", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "MultiStartMultivariateVectorOptimizer", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "Erf", "org.apache.commons.math3.special" ], [ "BesselJ", "org.apache.commons.math3.special" ], [ "Gamma", "org.apache.commons.math3.special" ], [ "Beta", "org.apache.commons.math3.special" ], [ "FieldODEState", "org.apache.commons.math3.ode" ], [ "FieldODEStateAndDerivative", "org.apache.commons.math3.ode" ], [ "FirstOrderFieldDifferentialEquations", "org.apache.commons.math3.ode" ], [ "MultistepFieldIntegrator", "org.apache.commons.math3.ode" ], [ "ODEIntegrator", "org.apache.commons.math3.ode" ], [ "ParameterConfiguration", "org.apache.commons.math3.ode" ], [ "ContinuousOutputFieldModel", "org.apache.commons.math3.ode" ], [ "FirstOrderConverter", "org.apache.commons.math3.ode" ], [ "ParameterJacobianProvider", "org.apache.commons.math3.ode" ], [ "SecondOrderIntegrator", "org.apache.commons.math3.ode" ], [ "AbstractFieldIntegrator", "org.apache.commons.math3.ode" ], [ "ExpandableStatefulODE", "org.apache.commons.math3.ode" ], [ "MultistepIntegrator", "org.apache.commons.math3.ode" ], [ "Parameterizable", "org.apache.commons.math3.ode" ], [ "JacobianMatrices", "org.apache.commons.math3.ode" ], [ "StepNormalizer", "org.apache.commons.math3.ode.sampling" ], [ "FixedStepHandler", "org.apache.commons.math3.ode.sampling" ], [ "StepHandler", "org.apache.commons.math3.ode.sampling" ], [ "DummyStepHandler", "org.apache.commons.math3.ode.sampling" ], [ "FieldStepInterpolator", "org.apache.commons.math3.ode.sampling" ], [ "StepInterpolator", "org.apache.commons.math3.ode.sampling" ], [ "AbstractFieldStepInterpolator", "org.apache.commons.math3.ode.sampling" ], [ "FieldFixedStepHandler", "org.apache.commons.math3.ode.sampling" ], [ "StepNormalizerMode", "org.apache.commons.math3.ode.sampling" ], [ "AbstractStepInterpolator", "org.apache.commons.math3.ode.sampling" ], [ "FieldStepHandler", "org.apache.commons.math3.ode.sampling" ], [ "StepNormalizerBounds", "org.apache.commons.math3.ode.sampling" ], [ "NordsieckStepInterpolator", "org.apache.commons.math3.ode.sampling" ], [ "FieldStepNormalizer", "org.apache.commons.math3.ode.sampling" ], [ "RungeKuttaFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "GillIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince853FieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "EmbeddedRungeKuttaFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "HighamHall54FieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince54FieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "EulerFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "EulerStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "HighamHall54Integrator", "org.apache.commons.math3.ode.nonstiff" ], [ "MidpointStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "GillStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "LutherFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "GraggBulirschStoerIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "EmbeddedRungeKuttaIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince853StepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "HighamHall54FieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince54FieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "MidpointFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "ThreeEighthesFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "ThreeEighthesIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "ClassicalRungeKuttaIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsNordsieckTransformer", "org.apache.commons.math3.ode.nonstiff" ], [ "MidpointFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "MidpointIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "RungeKuttaStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince54StepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "LutherFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince54Integrator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "GraggBulirschStoerStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "ClassicalRungeKuttaStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "LutherIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdaptiveStepsizeIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "ClassicalRungeKuttaFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "EulerIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince853FieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "FieldButcherArrayProvider", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsMoultonIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "RungeKuttaFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince853Integrator", "org.apache.commons.math3.ode.nonstiff" ], [ "ThreeEighthesStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "EulerFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsMoultonFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "LutherStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "HighamHall54StepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsNordsieckFieldTransformer", "org.apache.commons.math3.ode.nonstiff" ], [ "ThreeEighthesFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "RungeKuttaIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsBashforthFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "ClassicalRungeKuttaFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdaptiveStepsizeFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsBashforthIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "GillFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "GillFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "FieldSecondaryEquations", "org.apache.commons.math3.ode" ], [ "MainStateJacobianProvider", "org.apache.commons.math3.ode" ], [ "SecondaryEquations", "org.apache.commons.math3.ode" ], [ "FirstOrderFieldIntegrator", "org.apache.commons.math3.ode" ], [ "ParameterJacobianWrapper", "org.apache.commons.math3.ode" ], [ "FieldEquationsMapper", "org.apache.commons.math3.ode" ], [ "FieldExpandableODE", "org.apache.commons.math3.ode" ], [ "ParameterizedWrapper", "org.apache.commons.math3.ode" ], [ "AbstractIntegrator", "org.apache.commons.math3.ode" ], [ "SecondOrderDifferentialEquations", "org.apache.commons.math3.ode" ], [ "AbstractParameterizable", "org.apache.commons.math3.ode" ], [ "UnknownParameterException", "org.apache.commons.math3.ode" ], [ "ContinuousOutputModel", "org.apache.commons.math3.ode" ], [ "FirstOrderDifferentialEquations", "org.apache.commons.math3.ode" ], [ "EquationsMapper", "org.apache.commons.math3.ode" ], [ "Transformer", "org.apache.commons.math3.ode.events" ], [ "FieldEventState", "org.apache.commons.math3.ode.events" ], [ "FieldEventHandler", "org.apache.commons.math3.ode.events" ], [ "EventHandler", "org.apache.commons.math3.ode.events" ], [ "Action", "org.apache.commons.math3.ode.events" ], [ "EventState", "org.apache.commons.math3.ode.events" ], [ "EventFilter", "org.apache.commons.math3.ode.events" ], [ "FilterType", "org.apache.commons.math3.ode.events" ], [ "ParameterizedODE", "org.apache.commons.math3.ode" ], [ "FirstOrderIntegrator", "org.apache.commons.math3.ode" ], [ "NaNStrategy", "org.apache.commons.math3.stat.ranking" ], [ "NaturalRanking", "org.apache.commons.math3.stat.ranking" ], [ "TiesStrategy", "org.apache.commons.math3.stat.ranking" ], [ "RankingAlgorithm", "org.apache.commons.math3.stat.ranking" ], [ "StatUtils", "org.apache.commons.math3.stat" ], [ "IntervalUtils", "org.apache.commons.math3.stat.interval" ], [ "AgrestiCoullInterval", "org.apache.commons.math3.stat.interval" ], [ "ConfidenceInterval", "org.apache.commons.math3.stat.interval" ], [ "WilsonScoreInterval", "org.apache.commons.math3.stat.interval" ], [ "ClopperPearsonInterval", "org.apache.commons.math3.stat.interval" ], [ "NormalApproximationInterval", "org.apache.commons.math3.stat.interval" ], [ "BinomialConfidenceInterval", "org.apache.commons.math3.stat.interval" ], [ "StorelessCovariance", "org.apache.commons.math3.stat.correlation" ], [ "StorelessBivariateCovariance", "org.apache.commons.math3.stat.correlation" ], [ "KendallsCorrelation", "org.apache.commons.math3.stat.correlation" ], [ "Covariance", "org.apache.commons.math3.stat.correlation" ], [ "PearsonsCorrelation", "org.apache.commons.math3.stat.correlation" ], [ "SpearmansCorrelation", "org.apache.commons.math3.stat.correlation" ], [ "DBSCANClusterer", "org.apache.commons.math3.stat.clustering" ], [ "EuclideanIntegerPoint", "org.apache.commons.math3.stat.clustering" ], [ "Cluster", "org.apache.commons.math3.stat.clustering" ], [ "EuclideanDoublePoint", "org.apache.commons.math3.stat.clustering" ], [ "Clusterable", "org.apache.commons.math3.stat.clustering" ], [ "KMeansPlusPlusClusterer", "org.apache.commons.math3.stat.clustering" ], [ "TestUtils", "org.apache.commons.math3.stat.inference" ], [ "TTest", "org.apache.commons.math3.stat.inference" ], [ "GTest", "org.apache.commons.math3.stat.inference" ], [ "AlternativeHypothesis", "org.apache.commons.math3.stat.inference" ], [ "MannWhitneyUTest", "org.apache.commons.math3.stat.inference" ], [ "WilcoxonSignedRankTest", "org.apache.commons.math3.stat.inference" ], [ "OneWayAnova", "org.apache.commons.math3.stat.inference" ], [ "ChiSquareTest", "org.apache.commons.math3.stat.inference" ], [ "BinomialTest", "org.apache.commons.math3.stat.inference" ], [ "KolmogorovSmirnovTest", "org.apache.commons.math3.stat.inference" ], [ "AbstractUnivariateStatistic", "org.apache.commons.math3.stat.descriptive" ], [ "SummaryStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "DescriptiveStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "MultivariateSummaryStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "SecondMoment", "org.apache.commons.math3.stat.descriptive.moment" ], [ "Mean", "org.apache.commons.math3.stat.descriptive.moment" ], [ "FourthMoment", "org.apache.commons.math3.stat.descriptive.moment" ], [ "Variance", "org.apache.commons.math3.stat.descriptive.moment" ], [ "Kurtosis", "org.apache.commons.math3.stat.descriptive.moment" ], [ "GeometricMean", "org.apache.commons.math3.stat.descriptive.moment" ], [ "StandardDeviation", "org.apache.commons.math3.stat.descriptive.moment" ], [ "VectorialCovariance", "org.apache.commons.math3.stat.descriptive.moment" ], [ "ThirdMoment", "org.apache.commons.math3.stat.descriptive.moment" ], [ "SemiVariance", "org.apache.commons.math3.stat.descriptive.moment" ], [ "FirstMoment", "org.apache.commons.math3.stat.descriptive.moment" ], [ "Skewness", "org.apache.commons.math3.stat.descriptive.moment" ], [ "VectorialMean", "org.apache.commons.math3.stat.descriptive.moment" ], [ "StatisticalSummaryValues", "org.apache.commons.math3.stat.descriptive" ], [ "StatisticalSummary", "org.apache.commons.math3.stat.descriptive" ], [ "StorelessUnivariateStatistic", "org.apache.commons.math3.stat.descriptive" ], [ "StatisticalMultivariateSummary", "org.apache.commons.math3.stat.descriptive" ], [ "AggregateSummaryStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "WeightedEvaluation", "org.apache.commons.math3.stat.descriptive" ], [ "SynchronizedSummaryStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "UnivariateStatistic", "org.apache.commons.math3.stat.descriptive" ], [ "Percentile", "org.apache.commons.math3.stat.descriptive.rank" ], [ "Max", "org.apache.commons.math3.stat.descriptive.rank" ], [ "PSquarePercentile", "org.apache.commons.math3.stat.descriptive.rank" ], [ "Min", "org.apache.commons.math3.stat.descriptive.rank" ], [ "Median", "org.apache.commons.math3.stat.descriptive.rank" ], [ "SynchronizedDescriptiveStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "SynchronizedMultivariateSummaryStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "SumOfSquares", "org.apache.commons.math3.stat.descriptive.summary" ], [ "Product", "org.apache.commons.math3.stat.descriptive.summary" ], [ "Sum", "org.apache.commons.math3.stat.descriptive.summary" ], [ "SumOfLogs", "org.apache.commons.math3.stat.descriptive.summary" ], [ "AbstractStorelessUnivariateStatistic", "org.apache.commons.math3.stat.descriptive" ], [ "SimpleRegression", "org.apache.commons.math3.stat.regression" ], [ "UpdatingMultipleLinearRegression", "org.apache.commons.math3.stat.regression" ], [ "AbstractMultipleLinearRegression", "org.apache.commons.math3.stat.regression" ], [ "GLSMultipleLinearRegression", "org.apache.commons.math3.stat.regression" ], [ "ModelSpecificationException", "org.apache.commons.math3.stat.regression" ], [ "RegressionResults", "org.apache.commons.math3.stat.regression" ], [ "MillerUpdatingRegression", "org.apache.commons.math3.stat.regression" ], [ "OLSMultipleLinearRegression", "org.apache.commons.math3.stat.regression" ], [ "MultipleLinearRegression", "org.apache.commons.math3.stat.regression" ], [ "Frequency", "org.apache.commons.math3.stat" ], [ "ChebyshevDistance", "org.apache.commons.math3.ml.distance" ], [ "CanberraDistance", "org.apache.commons.math3.ml.distance" ], [ "EuclideanDistance", "org.apache.commons.math3.ml.distance" ], [ "ManhattanDistance", "org.apache.commons.math3.ml.distance" ], [ "EarthMoversDistance", "org.apache.commons.math3.ml.distance" ], [ "DistanceMeasure", "org.apache.commons.math3.ml.distance" ], [ "CentroidCluster", "org.apache.commons.math3.ml.clustering" ], [ "DBSCANClusterer", "org.apache.commons.math3.ml.clustering" ], [ "Cluster", "org.apache.commons.math3.ml.clustering" ], [ "MultiKMeansPlusPlusClusterer", "org.apache.commons.math3.ml.clustering" ], [ "Clusterable", "org.apache.commons.math3.ml.clustering" ], [ "FuzzyKMeansClusterer", "org.apache.commons.math3.ml.clustering" ], [ "KMeansPlusPlusClusterer", "org.apache.commons.math3.ml.clustering" ], [ "SumOfClusterVariances", "org.apache.commons.math3.ml.clustering.evaluation" ], [ "ClusterEvaluator", "org.apache.commons.math3.ml.clustering.evaluation" ], [ "Clusterer", "org.apache.commons.math3.ml.clustering" ], [ "DoublePoint", "org.apache.commons.math3.ml.clustering" ], [ "KohonenTrainingTask", "org.apache.commons.math3.ml.neuralnet.sofm" ], [ "KohonenUpdateAction", "org.apache.commons.math3.ml.neuralnet.sofm" ], [ "QuasiSigmoidDecayFunction", "org.apache.commons.math3.ml.neuralnet.sofm.util" ], [ "ExponentialDecayFunction", "org.apache.commons.math3.ml.neuralnet.sofm.util" ], [ "NeighbourhoodSizeFunctionFactory", "org.apache.commons.math3.ml.neuralnet.sofm" ], [ "LearningFactorFunctionFactory", "org.apache.commons.math3.ml.neuralnet.sofm" ], [ "NeighbourhoodSizeFunction", "org.apache.commons.math3.ml.neuralnet.sofm" ], [ "LearningFactorFunction", "org.apache.commons.math3.ml.neuralnet.sofm" ], [ "MapUtils", "org.apache.commons.math3.ml.neuralnet" ], [ "Network", "org.apache.commons.math3.ml.neuralnet" ], [ "FeatureInitializerFactory", "org.apache.commons.math3.ml.neuralnet" ], [ "Neuron", "org.apache.commons.math3.ml.neuralnet" ], [ "FeatureInitializer", "org.apache.commons.math3.ml.neuralnet" ], [ "NeuronString", "org.apache.commons.math3.ml.neuralnet.oned" ], [ "NeuronSquareMesh2D", "org.apache.commons.math3.ml.neuralnet.twod" ], [ "SmoothedDataHistogram", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "UnifiedDistanceMatrix", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "MapDataVisualization", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "MapVisualization", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "LocationFinder", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "HitHistogram", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "QuantizationError", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "TopographicErrorHistogram", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "SquareNeighbourhood", "org.apache.commons.math3.ml.neuralnet" ], [ "UpdateAction", "org.apache.commons.math3.ml.neuralnet" ], [ "BracketingNthOrderBrentSolverDFP", "org.apache.commons.math3.dfp" ], [ "UnivariateDfpFunction", "org.apache.commons.math3.dfp" ], [ "DfpDec", "org.apache.commons.math3.dfp" ], [ "DfpMath", "org.apache.commons.math3.dfp" ], [ "Dfp", "org.apache.commons.math3.dfp" ], [ "DfpField", "org.apache.commons.math3.dfp" ], [ "GeneticAlgorithm", "org.apache.commons.math3.genetics" ], [ "SelectionPolicy", "org.apache.commons.math3.genetics" ], [ "ListPopulation", "org.apache.commons.math3.genetics" ], [ "FixedGenerationCount", "org.apache.commons.math3.genetics" ], [ "AbstractListChromosome", "org.apache.commons.math3.genetics" ], [ "OnePointCrossover", "org.apache.commons.math3.genetics" ], [ "ElitisticListPopulation", "org.apache.commons.math3.genetics" ], [ "Chromosome", "org.apache.commons.math3.genetics" ], [ "OrderedCrossover", "org.apache.commons.math3.genetics" ], [ "InvalidRepresentationException", "org.apache.commons.math3.genetics" ], [ "RandomKey", "org.apache.commons.math3.genetics" ], [ "StoppingCondition", "org.apache.commons.math3.genetics" ], [ "PermutationChromosome", "org.apache.commons.math3.genetics" ], [ "ChromosomePair", "org.apache.commons.math3.genetics" ], [ "TournamentSelection", "org.apache.commons.math3.genetics" ], [ "NPointCrossover", "org.apache.commons.math3.genetics" ], [ "UniformCrossover", "org.apache.commons.math3.genetics" ], [ "MutationPolicy", "org.apache.commons.math3.genetics" ], [ "FixedElapsedTime", "org.apache.commons.math3.genetics" ], [ "CycleCrossover", "org.apache.commons.math3.genetics" ], [ "BinaryMutation", "org.apache.commons.math3.genetics" ], [ "BinaryChromosome", "org.apache.commons.math3.genetics" ], [ "Population", "org.apache.commons.math3.genetics" ], [ "RandomKeyMutation", "org.apache.commons.math3.genetics" ], [ "Fitness", "org.apache.commons.math3.genetics" ], [ "CrossoverPolicy", "org.apache.commons.math3.genetics" ], [ "Vector", "org.apache.commons.math3.geometry" ], [ "VectorFormat", "org.apache.commons.math3.geometry" ], [ "Point", "org.apache.commons.math3.geometry" ], [ "RotationConvention", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "SubPlane", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Vector3DFormat", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Segment", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "OutlineExtractor", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "PolyhedronsSet", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "RotationOrder", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "FieldVector3D", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Rotation", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Euclidean3D", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "SubLine", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "SphericalCoordinates", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "CardanEulerSingularityException", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "NotARotationMatrixException", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "FieldRotation", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Vector3D", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Plane", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "SphereGenerator", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Line", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "IntervalsSet", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "Interval", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "SubOrientedPoint", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "OrientedPoint", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "Euclidean1D", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "Vector1DFormat", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "Vector1D", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "Segment", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "AbstractConvexHullGenerator2D", "org.apache.commons.math3.geometry.euclidean.twod.hull" ], [ "AklToussaintHeuristic", "org.apache.commons.math3.geometry.euclidean.twod.hull" ], [ "ConvexHull2D", "org.apache.commons.math3.geometry.euclidean.twod.hull" ], [ "MonotoneChain", "org.apache.commons.math3.geometry.euclidean.twod.hull" ], [ "ConvexHullGenerator2D", "org.apache.commons.math3.geometry.euclidean.twod.hull" ], [ "Vector2DFormat", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "PolygonsSet", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "SubLine", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "DiskGenerator", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "Vector2D", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "NestedLoops", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "Euclidean2D", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "Line", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "ConvexHullGenerator", "org.apache.commons.math3.geometry.hull" ], [ "ConvexHull", "org.apache.commons.math3.geometry.hull" ], [ "ArcsSet", "org.apache.commons.math3.geometry.spherical.oned" ], [ "S1Point", "org.apache.commons.math3.geometry.spherical.oned" ], [ "Sphere1D", "org.apache.commons.math3.geometry.spherical.oned" ], [ "Arc", "org.apache.commons.math3.geometry.spherical.oned" ], [ "LimitAngle", "org.apache.commons.math3.geometry.spherical.oned" ], [ "SubLimitAngle", "org.apache.commons.math3.geometry.spherical.oned" ], [ "Sphere2D", "org.apache.commons.math3.geometry.spherical.twod" ], [ "SubCircle", "org.apache.commons.math3.geometry.spherical.twod" ], [ "Vertex", "org.apache.commons.math3.geometry.spherical.twod" ], [ "Circle", "org.apache.commons.math3.geometry.spherical.twod" ], [ "PropertiesComputer", "org.apache.commons.math3.geometry.spherical.twod" ], [ "SphericalPolygonsSet", "org.apache.commons.math3.geometry.spherical.twod" ], [ "Edge", "org.apache.commons.math3.geometry.spherical.twod" ], [ "EdgesBuilder", "org.apache.commons.math3.geometry.spherical.twod" ], [ "S2Point", "org.apache.commons.math3.geometry.spherical.twod" ], [ "SupportBallGenerator", "org.apache.commons.math3.geometry.enclosing" ], [ "EnclosingBall", "org.apache.commons.math3.geometry.enclosing" ], [ "WelzlEncloser", "org.apache.commons.math3.geometry.enclosing" ], [ "Encloser", "org.apache.commons.math3.geometry.enclosing" ], [ "InsideFinder", "org.apache.commons.math3.geometry.partitioning" ], [ "BoundaryProjection", "org.apache.commons.math3.geometry.partitioning" ], [ "BoundaryProjector", "org.apache.commons.math3.geometry.partitioning" ], [ "Region", "org.apache.commons.math3.geometry.partitioning" ], [ "Transform", "org.apache.commons.math3.geometry.partitioning" ], [ "NodesSet", "org.apache.commons.math3.geometry.partitioning" ], [ "AbstractRegion", "org.apache.commons.math3.geometry.partitioning" ], [ "Characterization", "org.apache.commons.math3.geometry.partitioning" ], [ "AbstractSubHyperplane", "org.apache.commons.math3.geometry.partitioning" ], [ "BSPTree", "org.apache.commons.math3.geometry.partitioning" ], [ "RegionFactory", "org.apache.commons.math3.geometry.partitioning" ], [ "Side", "org.apache.commons.math3.geometry.partitioning" ], [ "BoundarySizeVisitor", "org.apache.commons.math3.geometry.partitioning" ], [ "AVLTree", "org.apache.commons.math3.geometry.partitioning.utilities" ], [ "OrderedTuple", "org.apache.commons.math3.geometry.partitioning.utilities" ], [ "BSPTreeVisitor", "org.apache.commons.math3.geometry.partitioning" ], [ "Hyperplane", "org.apache.commons.math3.geometry.partitioning" ], [ "Embedding", "org.apache.commons.math3.geometry.partitioning" ], [ "BoundaryAttribute", "org.apache.commons.math3.geometry.partitioning" ], [ "SubHyperplane", "org.apache.commons.math3.geometry.partitioning" ], [ "BoundaryBuilder", "org.apache.commons.math3.geometry.partitioning" ], [ "Space", "org.apache.commons.math3.geometry" ], [ "Field", "org.apache.commons.math3" ], [ "ProcessModel", "org.apache.commons.math3.filter" ], [ "MeasurementModel", "org.apache.commons.math3.filter" ], [ "KalmanFilter", "org.apache.commons.math3.filter" ], [ "DefaultProcessModel", "org.apache.commons.math3.filter" ], [ "DefaultMeasurementModel", "org.apache.commons.math3.filter" ], [ "NormalizedRandomGenerator", "org.apache.commons.math3.random" ], [ "GaussianRandomGenerator", "org.apache.commons.math3.random" ], [ "RandomGenerator", "org.apache.commons.math3.random" ], [ "ISAACRandom", "org.apache.commons.math3.random" ], [ "CorrelatedRandomVectorGenerator", "org.apache.commons.math3.random" ], [ "Well19937a", "org.apache.commons.math3.random" ], [ "Well1024a", "org.apache.commons.math3.random" ], [ "UniformRandomGenerator", "org.apache.commons.math3.random" ], [ "Well44497a", "org.apache.commons.math3.random" ], [ "BitsStreamGenerator", "org.apache.commons.math3.random" ], [ "SynchronizedRandomGenerator", "org.apache.commons.math3.random" ], [ "UncorrelatedRandomVectorGenerator", "org.apache.commons.math3.random" ], [ "Well19937c", "org.apache.commons.math3.random" ], [ "ValueServer", "org.apache.commons.math3.random" ], [ "HaltonSequenceGenerator", "org.apache.commons.math3.random" ], [ "Well44497b", "org.apache.commons.math3.random" ], [ "RandomData", "org.apache.commons.math3.random" ], [ "RandomVectorGenerator", "org.apache.commons.math3.random" ], [ "RandomDataGenerator", "org.apache.commons.math3.random" ], [ "Well512a", "org.apache.commons.math3.random" ], [ "AbstractRandomGenerator", "org.apache.commons.math3.random" ], [ "JDKRandomGenerator", "org.apache.commons.math3.random" ], [ "StableRandomGenerator", "org.apache.commons.math3.random" ], [ "RandomAdaptor", "org.apache.commons.math3.random" ], [ "RandomGeneratorFactory", "org.apache.commons.math3.random" ], [ "AbstractWell", "org.apache.commons.math3.random" ], [ "RandomDataImpl", "org.apache.commons.math3.random" ], [ "EmpiricalDistribution", "org.apache.commons.math3.random" ], [ "SobolSequenceGenerator", "org.apache.commons.math3.random" ], [ "MersenneTwister", "org.apache.commons.math3.random" ], [ "UnitSphereRandomVectorGenerator", "org.apache.commons.math3.random" ], [ "FieldElement", "org.apache.commons.math3" ], [ "BigFractionFormat", "org.apache.commons.math3.fraction" ], [ "Fraction", "org.apache.commons.math3.fraction" ], [ "BigFraction", "org.apache.commons.math3.fraction" ], [ "AbstractFormat", "org.apache.commons.math3.fraction" ], [ "FractionFormat", "org.apache.commons.math3.fraction" ], [ "FractionField", "org.apache.commons.math3.fraction" ], [ "BigFractionField", "org.apache.commons.math3.fraction" ], [ "ProperFractionFormat", "org.apache.commons.math3.fraction" ], [ "FractionConversionException", "org.apache.commons.math3.fraction" ], [ "ProperBigFractionFormat", "org.apache.commons.math3.fraction" ], [ "NotFiniteNumberException", "org.apache.commons.math3.exception" ], [ "NoBracketingException", "org.apache.commons.math3.exception" ], [ "MathArithmeticException", "org.apache.commons.math3.exception" ], [ "InsufficientDataException", "org.apache.commons.math3.exception" ], [ "TooManyEvaluationsException", "org.apache.commons.math3.exception" ], [ "ExceptionContextProvider", "org.apache.commons.math3.exception.util" ], [ "ExceptionContext", "org.apache.commons.math3.exception.util" ], [ "ArgUtils", "org.apache.commons.math3.exception.util" ], [ "DummyLocalizable", "org.apache.commons.math3.exception.util" ], [ "Localizable", "org.apache.commons.math3.exception.util" ], [ "LocalizedFormats", "org.apache.commons.math3.exception.util" ], [ "NotANumberException", "org.apache.commons.math3.exception" ], [ "MultiDimensionMismatchException", "org.apache.commons.math3.exception" ], [ "OutOfRangeException", "org.apache.commons.math3.exception" ], [ "TooManyIterationsException", "org.apache.commons.math3.exception" ], [ "NullArgumentException", "org.apache.commons.math3.exception" ], [ "NumberIsTooLargeException", "org.apache.commons.math3.exception" ], [ "MathIllegalStateException", "org.apache.commons.math3.exception" ], [ "MathUnsupportedOperationException", "org.apache.commons.math3.exception" ], [ "NotStrictlyPositiveException", "org.apache.commons.math3.exception" ], [ "NonMonotonicSequenceException", "org.apache.commons.math3.exception" ], [ "ZeroException", "org.apache.commons.math3.exception" ], [ "MathIllegalArgumentException", "org.apache.commons.math3.exception" ], [ "DimensionMismatchException", "org.apache.commons.math3.exception" ], [ "MathRuntimeException", "org.apache.commons.math3.exception" ], [ "MathParseException", "org.apache.commons.math3.exception" ], [ "NoDataException", "org.apache.commons.math3.exception" ], [ "MathIllegalNumberException", "org.apache.commons.math3.exception" ], [ "NotPositiveException", "org.apache.commons.math3.exception" ], [ "MaxCountExceededException", "org.apache.commons.math3.exception" ], [ "NumberIsTooSmallException", "org.apache.commons.math3.exception" ], [ "ConvergenceException", "org.apache.commons.math3.exception" ], [ "MathInternalError", "org.apache.commons.math3.exception" ], [ "DftNormalization", "org.apache.commons.math3.transform" ], [ "RealTransformer", "org.apache.commons.math3.transform" ], [ "FastSineTransformer", "org.apache.commons.math3.transform" ], [ "DctNormalization", "org.apache.commons.math3.transform" ], [ "FastFourierTransformer", "org.apache.commons.math3.transform" ], [ "TransformType", "org.apache.commons.math3.transform" ], [ "FastCosineTransformer", "org.apache.commons.math3.transform" ], [ "TransformUtils", "org.apache.commons.math3.transform" ], [ "DstNormalization", "org.apache.commons.math3.transform" ], [ "FastHadamardTransformer", "org.apache.commons.math3.transform" ] ],
  "tokensProjectClassesNonPrivateStaticNonVoidMethods" : [ [ "isPrime", "org.apache.commons.math3.primes", "Primes", "public static boolean isPrime(int n)" ], [ "nextPrime", "org.apache.commons.math3.primes", "Primes", "public static int nextPrime(int n)" ], [ "primeFactors", "org.apache.commons.math3.primes", "Primes", "public static List<Integer> primeFactors(int n)" ], [ "smallTrialDivision", "org.apache.commons.math3.primes", "SmallPrimes", "public static int smallTrialDivision(int n, final List<Integer> factors)" ], [ "boundedTrialDivision", "org.apache.commons.math3.primes", "SmallPrimes", "public static int boundedTrialDivision(int n, int maxFactor, List<Integer> factors)" ], [ "trialDivision", "org.apache.commons.math3.primes", "SmallPrimes", "public static List<Integer> trialDivision(int n)" ], [ "millerRabinPrimeTest", "org.apache.commons.math3.primes", "SmallPrimes", "public static boolean millerRabinPrimeTest(final int n)" ], [ "primeFactors", "org.apache.commons.math3.primes", "PollardRho", "public static List<Integer> primeFactors(int n)" ], [ "rhoBrent", "org.apache.commons.math3.primes", "PollardRho", "static int rhoBrent(final int n)" ], [ "gcdPositive", "org.apache.commons.math3.primes", "PollardRho", "static int gcdPositive(int a, int b)" ], [ "create", "org.apache.commons.math3.fitting", "GaussianCurveFitter", "public static GaussianCurveFitter create()" ], [ "create", "org.apache.commons.math3.fitting", "SimpleCurveFitter", "public static SimpleCurveFitter create(ParametricUnivariateFunction f, double[] start)" ], [ "create", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem create(final MultivariateJacobianFunction model, final RealVector observed, final RealVector start, final RealMatrix weight, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations, final boolean lazyEvaluation, final ParameterValidator paramValidator)" ], [ "create", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem create(final MultivariateJacobianFunction model, final RealVector observed, final RealVector start, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations)" ], [ "create", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem create(final MultivariateJacobianFunction model, final RealVector observed, final RealVector start, final RealMatrix weight, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations)" ], [ "create", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem create(final MultivariateVectorFunction model, final MultivariateMatrixFunction jacobian, final double[] observed, final double[] start, final RealMatrix weight, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations)" ], [ "weightMatrix", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem weightMatrix(final LeastSquaresProblem problem, final RealMatrix weights)" ], [ "weightDiagonal", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem weightDiagonal(final LeastSquaresProblem problem, final RealVector weights)" ], [ "countEvaluations", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem countEvaluations(final LeastSquaresProblem problem, final Incrementor counter)" ], [ "evaluationChecker", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static ConvergenceChecker<Evaluation> evaluationChecker(final ConvergenceChecker<PointVectorValuePair> checker)" ], [ "model", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static MultivariateJacobianFunction model(final MultivariateVectorFunction value, final MultivariateMatrixFunction jacobian)" ], [ "create", "org.apache.commons.math3.fitting", "HarmonicCurveFitter", "public static HarmonicCurveFitter create()" ], [ "create", "org.apache.commons.math3.fitting", "PolynomialCurveFitter", "public static PolynomialCurveFitter create(int degree)" ], [ "compose", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateFunction compose(final UnivariateFunction... f)" ], [ "compose", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateDifferentiableFunction compose(final UnivariateDifferentiableFunction... f)" ], [ "compose", "org.apache.commons.math3.analysis", "FunctionUtils", "public static DifferentiableUnivariateFunction compose(final DifferentiableUnivariateFunction... f)" ], [ "add", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateFunction add(final UnivariateFunction... f)" ], [ "add", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateDifferentiableFunction add(final UnivariateDifferentiableFunction... f)" ], [ "add", "org.apache.commons.math3.analysis", "FunctionUtils", "public static DifferentiableUnivariateFunction add(final DifferentiableUnivariateFunction... f)" ], [ "multiply", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateFunction multiply(final UnivariateFunction... f)" ], [ "multiply", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateDifferentiableFunction multiply(final UnivariateDifferentiableFunction... f)" ], [ "multiply", "org.apache.commons.math3.analysis", "FunctionUtils", "public static DifferentiableUnivariateFunction multiply(final DifferentiableUnivariateFunction... f)" ], [ "combine", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateFunction combine(final BivariateFunction combiner, final UnivariateFunction f, final UnivariateFunction g)" ], [ "collector", "org.apache.commons.math3.analysis", "FunctionUtils", "public static MultivariateFunction collector(final BivariateFunction combiner, final UnivariateFunction f, final double initialValue)" ], [ "collector", "org.apache.commons.math3.analysis", "FunctionUtils", "public static MultivariateFunction collector(final BivariateFunction combiner, final double initialValue)" ], [ "fix1stArgument", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateFunction fix1stArgument(final BivariateFunction f, final double fixed)" ], [ "fix2ndArgument", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateFunction fix2ndArgument(final BivariateFunction f, final double fixed)" ], [ "sample", "org.apache.commons.math3.analysis", "FunctionUtils", "public static double[] sample(UnivariateFunction f, double min, double max, int n) throws NumberIsTooLargeException, NotStrictlyPositiveException" ], [ "toDifferentiableUnivariateFunction", "org.apache.commons.math3.analysis", "FunctionUtils", "public static DifferentiableUnivariateFunction toDifferentiableUnivariateFunction(final UnivariateDifferentiableFunction f)" ], [ "toUnivariateDifferential", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateDifferentiableFunction toUnivariateDifferential(final DifferentiableUnivariateFunction f)" ], [ "toDifferentiableMultivariateFunction", "org.apache.commons.math3.analysis", "FunctionUtils", "public static DifferentiableMultivariateFunction toDifferentiableMultivariateFunction(final MultivariateDifferentiableFunction f)" ], [ "toMultivariateDifferentiableFunction", "org.apache.commons.math3.analysis", "FunctionUtils", "public static MultivariateDifferentiableFunction toMultivariateDifferentiableFunction(final DifferentiableMultivariateFunction f)" ], [ "toDifferentiableMultivariateVectorFunction", "org.apache.commons.math3.analysis", "FunctionUtils", "public static DifferentiableMultivariateVectorFunction toDifferentiableMultivariateVectorFunction(final MultivariateDifferentiableVectorFunction f)" ], [ "toMultivariateDifferentiableVectorFunction", "org.apache.commons.math3.analysis", "FunctionUtils", "public static MultivariateDifferentiableVectorFunction toMultivariateDifferentiableVectorFunction(final DifferentiableMultivariateVectorFunction f)" ], [ "solve", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double solve(UnivariateFunction function, double x0, double x1) throws NullArgumentException, NoBracketingException" ], [ "solve", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double solve(UnivariateFunction function, double x0, double x1, double absoluteAccuracy) throws NullArgumentException, NoBracketingException" ], [ "forceSide", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double forceSide(final int maxEval, final UnivariateFunction f, final BracketedUnivariateSolver<UnivariateFunction> bracketing, final double baseRoot, final double min, final double max, final AllowedSolution allowedSolution) throws NoBracketingException" ], [ "bracket", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double[] bracket(UnivariateFunction function, double initial, double lowerBound, double upperBound) throws NullArgumentException, NotStrictlyPositiveException, NoBracketingException" ], [ "bracket", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double[] bracket(UnivariateFunction function, double initial, double lowerBound, double upperBound, int maximumIterations) throws NullArgumentException, NotStrictlyPositiveException, NoBracketingException" ], [ "bracket", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double[] bracket(final UnivariateFunction function, final double initial, final double lowerBound, final double upperBound, final double q, final double r, final int maximumIterations) throws NoBracketingException" ], [ "midpoint", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double midpoint(double a, double b)" ], [ "isBracketing", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static boolean isBracketing(UnivariateFunction function, final double lower, final double upper) throws NullArgumentException" ], [ "isSequence", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static boolean isSequence(final double start, final double mid, final double end)" ], [ "getCompiler", "org.apache.commons.math3.analysis.differentiation", "DSCompiler", "public static DSCompiler getCompiler(int parameters, int order) throws NumberIsTooLargeException" ], [ "createConstant", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public static SparseGradient createConstant(final double value)" ], [ "createVariable", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public static SparseGradient createVariable(final int idx, final double value)" ], [ "hypot", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public static SparseGradient hypot(final SparseGradient x, final SparseGradient y)" ], [ "pow", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public static SparseGradient pow(final double a, final SparseGradient x)" ], [ "atan2", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public static SparseGradient atan2(final SparseGradient y, final SparseGradient x)" ], [ "hypot", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public static DerivativeStructure hypot(final DerivativeStructure x, final DerivativeStructure y) throws DimensionMismatchException" ], [ "pow", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public static DerivativeStructure pow(final double a, final DerivativeStructure x)" ], [ "atan2", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public static DerivativeStructure atan2(final DerivativeStructure y, final DerivativeStructure x) throws DimensionMismatchException" ], [ "evaluate", "org.apache.commons.math3.analysis.polynomials", "PolynomialFunctionNewtonForm", "public static double evaluate(double[] a, double[] c, double z) throws NullArgumentException, DimensionMismatchException, NoDataException" ], [ "evaluate", "org.apache.commons.math3.analysis.polynomials", "PolynomialFunctionLagrangeForm", "public static double evaluate(double[] x, double[] y, double z) throws DimensionMismatchException, NumberIsTooSmallException, NonMonotonicSequenceException" ], [ "verifyInterpolationArray", "org.apache.commons.math3.analysis.polynomials", "PolynomialFunctionLagrangeForm", "public static boolean verifyInterpolationArray(double[] x, double[] y, boolean abort) throws DimensionMismatchException, NumberIsTooSmallException, NonMonotonicSequenceException" ], [ "createChebyshevPolynomial", "org.apache.commons.math3.analysis.polynomials", "PolynomialsUtils", "public static PolynomialFunction createChebyshevPolynomial(final int degree)" ], [ "createHermitePolynomial", "org.apache.commons.math3.analysis.polynomials", "PolynomialsUtils", "public static PolynomialFunction createHermitePolynomial(final int degree)" ], [ "createLaguerrePolynomial", "org.apache.commons.math3.analysis.polynomials", "PolynomialsUtils", "public static PolynomialFunction createLaguerrePolynomial(final int degree)" ], [ "createLegendrePolynomial", "org.apache.commons.math3.analysis.polynomials", "PolynomialsUtils", "public static PolynomialFunction createLegendrePolynomial(final int degree)" ], [ "createJacobiPolynomial", "org.apache.commons.math3.analysis.polynomials", "PolynomialsUtils", "public static PolynomialFunction createJacobiPolynomial(final int degree, final int v, final int w)" ], [ "shift", "org.apache.commons.math3.analysis.polynomials", "PolynomialsUtils", "public static double[] shift(final double[] coefficients, final double shift)" ], [ "evaluate", "org.apache.commons.math3.analysis.polynomials", "PolynomialFunction", "protected static double evaluate(double[] coefficients, double argument) throws NullArgumentException, NoDataException" ], [ "differentiate", "org.apache.commons.math3.analysis.polynomials", "PolynomialFunction", "protected static double[] differentiate(double[] coefficients) throws NullArgumentException, NoDataException" ], [ "computeDividedDifference", "org.apache.commons.math3.analysis.interpolation", "DividedDifferenceInterpolator", "protected static double[] computeDividedDifference(final double[] x, final double[] y) throws DimensionMismatchException, NumberIsTooSmallException, NonMonotonicSequenceException" ], [ "compareTo", "org.apache.commons.math3.util", "Precision", "public static int compareTo(double x, double y, double eps)" ], [ "compareTo", "org.apache.commons.math3.util", "Precision", "public static int compareTo(final double x, final double y, final int maxUlps)" ], [ "equals", "org.apache.commons.math3.util", "Precision", "public static boolean equals(float x, float y)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "Precision", "public static boolean equalsIncludingNaN(float x, float y)" ], [ "equals", "org.apache.commons.math3.util", "Precision", "public static boolean equals(float x, float y, float eps)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "Precision", "public static boolean equalsIncludingNaN(float x, float y, float eps)" ], [ "equals", "org.apache.commons.math3.util", "Precision", "public static boolean equals(final float x, final float y, final int maxUlps)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "Precision", "public static boolean equalsIncludingNaN(float x, float y, int maxUlps)" ], [ "equals", "org.apache.commons.math3.util", "Precision", "public static boolean equals(double x, double y)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "Precision", "public static boolean equalsIncludingNaN(double x, double y)" ], [ "equals", "org.apache.commons.math3.util", "Precision", "public static boolean equals(double x, double y, double eps)" ], [ "equalsWithRelativeTolerance", "org.apache.commons.math3.util", "Precision", "public static boolean equalsWithRelativeTolerance(double x, double y, double eps)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "Precision", "public static boolean equalsIncludingNaN(double x, double y, double eps)" ], [ "equals", "org.apache.commons.math3.util", "Precision", "public static boolean equals(final double x, final double y, final int maxUlps)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "Precision", "public static boolean equalsIncludingNaN(double x, double y, int maxUlps)" ], [ "round", "org.apache.commons.math3.util", "Precision", "public static double round(double x, int scale)" ], [ "round", "org.apache.commons.math3.util", "Precision", "public static double round(double x, int scale, int roundingMethod)" ], [ "round", "org.apache.commons.math3.util", "Precision", "public static float round(float x, int scale)" ], [ "round", "org.apache.commons.math3.util", "Precision", "public static float round(float x, int scale, int roundingMethod) throws MathArithmeticException, MathIllegalArgumentException" ], [ "representableDelta", "org.apache.commons.math3.util", "Precision", "public static double representableDelta(double x, double originalDelta)" ], [ "wrap", "org.apache.commons.math3.util", "Incrementor", "public static Incrementor wrap(final IntegerSequence.Incrementor incrementor)" ], [ "scale", "org.apache.commons.math3.util", "MathArrays", "public static double[] scale(double val, final double[] arr)" ], [ "ebeAdd", "org.apache.commons.math3.util", "MathArrays", "public static double[] ebeAdd(double[] a, double[] b) throws DimensionMismatchException" ], [ "ebeSubtract", "org.apache.commons.math3.util", "MathArrays", "public static double[] ebeSubtract(double[] a, double[] b) throws DimensionMismatchException" ], [ "ebeMultiply", "org.apache.commons.math3.util", "MathArrays", "public static double[] ebeMultiply(double[] a, double[] b) throws DimensionMismatchException" ], [ "ebeDivide", "org.apache.commons.math3.util", "MathArrays", "public static double[] ebeDivide(double[] a, double[] b) throws DimensionMismatchException" ], [ "distance1", "org.apache.commons.math3.util", "MathArrays", "public static double distance1(double[] p1, double[] p2) throws DimensionMismatchException" ], [ "distance1", "org.apache.commons.math3.util", "MathArrays", "public static int distance1(int[] p1, int[] p2) throws DimensionMismatchException" ], [ "distance", "org.apache.commons.math3.util", "MathArrays", "public static double distance(double[] p1, double[] p2) throws DimensionMismatchException" ], [ "cosAngle", "org.apache.commons.math3.util", "MathArrays", "public static double cosAngle(double[] v1, double[] v2)" ], [ "distance", "org.apache.commons.math3.util", "MathArrays", "public static double distance(int[] p1, int[] p2) throws DimensionMismatchException" ], [ "distanceInf", "org.apache.commons.math3.util", "MathArrays", "public static double distanceInf(double[] p1, double[] p2) throws DimensionMismatchException" ], [ "distanceInf", "org.apache.commons.math3.util", "MathArrays", "public static int distanceInf(int[] p1, int[] p2) throws DimensionMismatchException" ], [ "isMonotonic", "org.apache.commons.math3.util", "MathArrays", "public static <T extends Comparable<? super T>> boolean isMonotonic(T[] val, OrderDirection dir, boolean strict)" ], [ "isMonotonic", "org.apache.commons.math3.util", "MathArrays", "public static boolean isMonotonic(double[] val, OrderDirection dir, boolean strict)" ], [ "checkEqualLength", "org.apache.commons.math3.util", "MathArrays", "public static boolean checkEqualLength(double[] a, double[] b, boolean abort)" ], [ "checkEqualLength", "org.apache.commons.math3.util", "MathArrays", "public static boolean checkEqualLength(int[] a, int[] b, boolean abort)" ], [ "checkOrder", "org.apache.commons.math3.util", "MathArrays", "public static boolean checkOrder(double[] val, OrderDirection dir, boolean strict, boolean abort) throws NonMonotonicSequenceException" ], [ "safeNorm", "org.apache.commons.math3.util", "MathArrays", "public static double safeNorm(double[] v)" ], [ "copyOf", "org.apache.commons.math3.util", "MathArrays", "public static int[] copyOf(int[] source)" ], [ "copyOf", "org.apache.commons.math3.util", "MathArrays", "public static double[] copyOf(double[] source)" ], [ "copyOf", "org.apache.commons.math3.util", "MathArrays", "public static int[] copyOf(int[] source, int len)" ], [ "copyOf", "org.apache.commons.math3.util", "MathArrays", "public static double[] copyOf(double[] source, int len)" ], [ "copyOfRange", "org.apache.commons.math3.util", "MathArrays", "public static double[] copyOfRange(double[] source, int from, int to)" ], [ "linearCombination", "org.apache.commons.math3.util", "MathArrays", "public static double linearCombination(final double[] a, final double[] b) throws DimensionMismatchException" ], [ "linearCombination", "org.apache.commons.math3.util", "MathArrays", "public static double linearCombination(final double a1, final double b1, final double a2, final double b2)" ], [ "linearCombination", "org.apache.commons.math3.util", "MathArrays", "public static double linearCombination(final double a1, final double b1, final double a2, final double b2, final double a3, final double b3)" ], [ "linearCombination", "org.apache.commons.math3.util", "MathArrays", "public static double linearCombination(final double a1, final double b1, final double a2, final double b2, final double a3, final double b3, final double a4, final double b4)" ], [ "equals", "org.apache.commons.math3.util", "MathArrays", "public static boolean equals(float[] x, float[] y)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "MathArrays", "public static boolean equalsIncludingNaN(float[] x, float[] y)" ], [ "equals", "org.apache.commons.math3.util", "MathArrays", "public static boolean equals(double[] x, double[] y)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "MathArrays", "public static boolean equalsIncludingNaN(double[] x, double[] y)" ], [ "normalizeArray", "org.apache.commons.math3.util", "MathArrays", "public static double[] normalizeArray(double[] values, double normalizedSum) throws MathIllegalArgumentException, MathArithmeticException" ], [ "buildArray", "org.apache.commons.math3.util", "MathArrays", "public static <T> T[] buildArray(final Field<T> field, final int length)" ], [ "buildArray", "org.apache.commons.math3.util", "MathArrays", "public static <T> T[][] buildArray(final Field<T> field, final int rows, final int columns)" ], [ "convolve", "org.apache.commons.math3.util", "MathArrays", "public static double[] convolve(double[] x, double[] h) throws NullArgumentException, NoDataException" ], [ "natural", "org.apache.commons.math3.util", "MathArrays", "public static int[] natural(int n)" ], [ "sequence", "org.apache.commons.math3.util", "MathArrays", "public static int[] sequence(int size, int start, int stride)" ], [ "verifyValues", "org.apache.commons.math3.util", "MathArrays", "public static boolean verifyValues(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "verifyValues", "org.apache.commons.math3.util", "MathArrays", "public static boolean verifyValues(final double[] values, final int begin, final int length, final boolean allowEmpty) throws MathIllegalArgumentException" ], [ "verifyValues", "org.apache.commons.math3.util", "MathArrays", "public static boolean verifyValues(final double[] values, final double[] weights, final int begin, final int length) throws MathIllegalArgumentException" ], [ "verifyValues", "org.apache.commons.math3.util", "MathArrays", "public static boolean verifyValues(final double[] values, final double[] weights, final int begin, final int length, final boolean allowEmpty) throws MathIllegalArgumentException" ], [ "concatenate", "org.apache.commons.math3.util", "MathArrays", "public static double[] concatenate(double[]... x)" ], [ "unique", "org.apache.commons.math3.util", "MathArrays", "public static double[] unique(double[] data)" ], [ "create", "org.apache.commons.math3.util", "Pair", "public static <K, V> Pair<K, V> create(K k, V v)" ], [ "slowCos", "org.apache.commons.math3.util", "FastMathCalc", "static double slowCos(final double x, final double[] result)" ], [ "slowSin", "org.apache.commons.math3.util", "FastMathCalc", "static double slowSin(final double x, final double[] result)" ], [ "slowexp", "org.apache.commons.math3.util", "FastMathCalc", "static double slowexp(final double x, final double[] result)" ], [ "expint", "org.apache.commons.math3.util", "FastMathCalc", "static double expint(int p, final double[] result)" ], [ "slowLog", "org.apache.commons.math3.util", "FastMathCalc", "static double[] slowLog(double xi)" ], [ "format", "org.apache.commons.math3.util", "FastMathCalc", "static String format(double d)" ], [ "sqrt", "org.apache.commons.math3.util", "FastMath", "public static double sqrt(final double a)" ], [ "cosh", "org.apache.commons.math3.util", "FastMath", "public static double cosh(double x)" ], [ "sinh", "org.apache.commons.math3.util", "FastMath", "public static double sinh(double x)" ], [ "tanh", "org.apache.commons.math3.util", "FastMath", "public static double tanh(double x)" ], [ "acosh", "org.apache.commons.math3.util", "FastMath", "public static double acosh(final double a)" ], [ "asinh", "org.apache.commons.math3.util", "FastMath", "public static double asinh(double a)" ], [ "atanh", "org.apache.commons.math3.util", "FastMath", "public static double atanh(double a)" ], [ "signum", "org.apache.commons.math3.util", "FastMath", "public static double signum(final double a)" ], [ "signum", "org.apache.commons.math3.util", "FastMath", "public static float signum(final float a)" ], [ "nextUp", "org.apache.commons.math3.util", "FastMath", "public static double nextUp(final double a)" ], [ "nextUp", "org.apache.commons.math3.util", "FastMath", "public static float nextUp(final float a)" ], [ "nextDown", "org.apache.commons.math3.util", "FastMath", "public static double nextDown(final double a)" ], [ "nextDown", "org.apache.commons.math3.util", "FastMath", "public static float nextDown(final float a)" ], [ "random", "org.apache.commons.math3.util", "FastMath", "public static double random()" ], [ "exp", "org.apache.commons.math3.util", "FastMath", "public static double exp(double x)" ], [ "expm1", "org.apache.commons.math3.util", "FastMath", "public static double expm1(double x)" ], [ "log", "org.apache.commons.math3.util", "FastMath", "public static double log(final double x)" ], [ "log1p", "org.apache.commons.math3.util", "FastMath", "public static double log1p(final double x)" ], [ "log10", "org.apache.commons.math3.util", "FastMath", "public static double log10(final double x)" ], [ "log", "org.apache.commons.math3.util", "FastMath", "public static double log(double base, double x)" ], [ "pow", "org.apache.commons.math3.util", "FastMath", "public static double pow(final double x, final double y)" ], [ "pow", "org.apache.commons.math3.util", "FastMath", "public static double pow(double d, int e)" ], [ "pow", "org.apache.commons.math3.util", "FastMath", "public static double pow(double d, long e)" ], [ "sin", "org.apache.commons.math3.util", "FastMath", "public static double sin(double x)" ], [ "cos", "org.apache.commons.math3.util", "FastMath", "public static double cos(double x)" ], [ "tan", "org.apache.commons.math3.util", "FastMath", "public static double tan(double x)" ], [ "atan", "org.apache.commons.math3.util", "FastMath", "public static double atan(double x)" ], [ "atan2", "org.apache.commons.math3.util", "FastMath", "public static double atan2(double y, double x)" ], [ "asin", "org.apache.commons.math3.util", "FastMath", "public static double asin(double x)" ], [ "acos", "org.apache.commons.math3.util", "FastMath", "public static double acos(double x)" ], [ "cbrt", "org.apache.commons.math3.util", "FastMath", "public static double cbrt(double x)" ], [ "toRadians", "org.apache.commons.math3.util", "FastMath", "public static double toRadians(double x)" ], [ "toDegrees", "org.apache.commons.math3.util", "FastMath", "public static double toDegrees(double x)" ], [ "abs", "org.apache.commons.math3.util", "FastMath", "public static int abs(final int x)" ], [ "abs", "org.apache.commons.math3.util", "FastMath", "public static long abs(final long x)" ], [ "abs", "org.apache.commons.math3.util", "FastMath", "public static float abs(final float x)" ], [ "abs", "org.apache.commons.math3.util", "FastMath", "public static double abs(double x)" ], [ "ulp", "org.apache.commons.math3.util", "FastMath", "public static double ulp(double x)" ], [ "ulp", "org.apache.commons.math3.util", "FastMath", "public static float ulp(float x)" ], [ "scalb", "org.apache.commons.math3.util", "FastMath", "public static double scalb(final double d, final int n)" ], [ "scalb", "org.apache.commons.math3.util", "FastMath", "public static float scalb(final float f, final int n)" ], [ "nextAfter", "org.apache.commons.math3.util", "FastMath", "public static double nextAfter(double d, double direction)" ], [ "nextAfter", "org.apache.commons.math3.util", "FastMath", "public static float nextAfter(final float f, final double direction)" ], [ "floor", "org.apache.commons.math3.util", "FastMath", "public static double floor(double x)" ], [ "ceil", "org.apache.commons.math3.util", "FastMath", "public static double ceil(double x)" ], [ "rint", "org.apache.commons.math3.util", "FastMath", "public static double rint(double x)" ], [ "round", "org.apache.commons.math3.util", "FastMath", "public static long round(double x)" ], [ "round", "org.apache.commons.math3.util", "FastMath", "public static int round(final float x)" ], [ "min", "org.apache.commons.math3.util", "FastMath", "public static int min(final int a, final int b)" ], [ "min", "org.apache.commons.math3.util", "FastMath", "public static long min(final long a, final long b)" ], [ "min", "org.apache.commons.math3.util", "FastMath", "public static float min(final float a, final float b)" ], [ "min", "org.apache.commons.math3.util", "FastMath", "public static double min(final double a, final double b)" ], [ "max", "org.apache.commons.math3.util", "FastMath", "public static int max(final int a, final int b)" ], [ "max", "org.apache.commons.math3.util", "FastMath", "public static long max(final long a, final long b)" ], [ "max", "org.apache.commons.math3.util", "FastMath", "public static float max(final float a, final float b)" ], [ "max", "org.apache.commons.math3.util", "FastMath", "public static double max(final double a, final double b)" ], [ "hypot", "org.apache.commons.math3.util", "FastMath", "public static double hypot(final double x, final double y)" ], [ "IEEEremainder", "org.apache.commons.math3.util", "FastMath", "public static double IEEEremainder(double dividend, double divisor)" ], [ "toIntExact", "org.apache.commons.math3.util", "FastMath", "public static int toIntExact(final long n) throws MathArithmeticException" ], [ "incrementExact", "org.apache.commons.math3.util", "FastMath", "public static int incrementExact(final int n) throws MathArithmeticException" ], [ "incrementExact", "org.apache.commons.math3.util", "FastMath", "public static long incrementExact(final long n) throws MathArithmeticException" ], [ "decrementExact", "org.apache.commons.math3.util", "FastMath", "public static int decrementExact(final int n) throws MathArithmeticException" ], [ "decrementExact", "org.apache.commons.math3.util", "FastMath", "public static long decrementExact(final long n) throws MathArithmeticException" ], [ "addExact", "org.apache.commons.math3.util", "FastMath", "public static int addExact(final int a, final int b) throws MathArithmeticException" ], [ "addExact", "org.apache.commons.math3.util", "FastMath", "public static long addExact(final long a, final long b) throws MathArithmeticException" ], [ "subtractExact", "org.apache.commons.math3.util", "FastMath", "public static int subtractExact(final int a, final int b)" ], [ "subtractExact", "org.apache.commons.math3.util", "FastMath", "public static long subtractExact(final long a, final long b)" ], [ "multiplyExact", "org.apache.commons.math3.util", "FastMath", "public static int multiplyExact(final int a, final int b)" ], [ "multiplyExact", "org.apache.commons.math3.util", "FastMath", "public static long multiplyExact(final long a, final long b)" ], [ "floorDiv", "org.apache.commons.math3.util", "FastMath", "public static int floorDiv(final int a, final int b) throws MathArithmeticException" ], [ "floorDiv", "org.apache.commons.math3.util", "FastMath", "public static long floorDiv(final long a, final long b) throws MathArithmeticException" ], [ "floorMod", "org.apache.commons.math3.util", "FastMath", "public static int floorMod(final int a, final int b) throws MathArithmeticException" ], [ "floorMod", "org.apache.commons.math3.util", "FastMath", "public static long floorMod(final long a, final long b)" ], [ "copySign", "org.apache.commons.math3.util", "FastMath", "public static double copySign(double magnitude, double sign)" ], [ "copySign", "org.apache.commons.math3.util", "FastMath", "public static float copySign(float magnitude, float sign)" ], [ "getExponent", "org.apache.commons.math3.util", "FastMath", "public static int getExponent(final double d)" ], [ "getExponent", "org.apache.commons.math3.util", "FastMath", "public static int getExponent(final float f)" ], [ "getInstance", "org.apache.commons.math3.util", "BigRealField", "public static BigRealField getInstance()" ], [ "getInstance", "org.apache.commons.math3.util", "Decimal64Field", "public static final Decimal64Field getInstance()" ], [ "hash", "org.apache.commons.math3.util", "MathUtils", "public static int hash(double value)" ], [ "equals", "org.apache.commons.math3.util", "MathUtils", "public static boolean equals(double x, double y)" ], [ "hash", "org.apache.commons.math3.util", "MathUtils", "public static int hash(double[] value)" ], [ "normalizeAngle", "org.apache.commons.math3.util", "MathUtils", "public static double normalizeAngle(double a, double center)" ], [ "max", "org.apache.commons.math3.util", "MathUtils", "public static <T extends RealFieldElement<T>> T max(final T e1, final T e2)" ], [ "min", "org.apache.commons.math3.util", "MathUtils", "public static <T extends RealFieldElement<T>> T min(final T e1, final T e2)" ], [ "reduce", "org.apache.commons.math3.util", "MathUtils", "public static double reduce(double a, double period, double offset)" ], [ "copySign", "org.apache.commons.math3.util", "MathUtils", "public static byte copySign(byte magnitude, byte sign) throws MathArithmeticException" ], [ "copySign", "org.apache.commons.math3.util", "MathUtils", "public static short copySign(short magnitude, short sign) throws MathArithmeticException" ], [ "copySign", "org.apache.commons.math3.util", "MathUtils", "public static int copySign(int magnitude, int sign) throws MathArithmeticException" ], [ "copySign", "org.apache.commons.math3.util", "MathUtils", "public static long copySign(long magnitude, long sign) throws MathArithmeticException" ], [ "getDefaultNumberFormat", "org.apache.commons.math3.util", "CompositeFormat", "public static NumberFormat getDefaultNumberFormat()" ], [ "getDefaultNumberFormat", "org.apache.commons.math3.util", "CompositeFormat", "public static NumberFormat getDefaultNumberFormat(final Locale locale)" ], [ "parseNextCharacter", "org.apache.commons.math3.util", "CompositeFormat", "public static char parseNextCharacter(final String source, final ParsePosition pos)" ], [ "parseNumber", "org.apache.commons.math3.util", "CompositeFormat", "public static Number parseNumber(final String source, final NumberFormat format, final ParsePosition pos)" ], [ "parseFixedstring", "org.apache.commons.math3.util", "CompositeFormat", "public static boolean parseFixedstring(final String source, final String expected, final ParsePosition pos)" ], [ "formatDouble", "org.apache.commons.math3.util", "CompositeFormat", "public static StringBuffer formatDouble(final double value, final NumberFormat format, final StringBuffer toAppendTo, final FieldPosition pos)" ], [ "range", "org.apache.commons.math3.util", "IntegerSequence", "public static Range range(int start, int end)" ], [ "range", "org.apache.commons.math3.util", "IntegerSequence", "public static Range range(final int start, final int max, final int step)" ], [ "create", "org.apache.commons.math3.util", "IntegerSequence", "public static Incrementor create()" ], [ "create", "org.apache.commons.math3.util", "Incrementor", "public static Incrementor create()" ], [ "loadExpIntA", "org.apache.commons.math3.util", "FastMathLiteralArrays", "static double[] loadExpIntA()" ], [ "loadExpIntB", "org.apache.commons.math3.util", "FastMathLiteralArrays", "static double[] loadExpIntB()" ], [ "loadExpFracA", "org.apache.commons.math3.util", "FastMathLiteralArrays", "static double[] loadExpFracA()" ], [ "loadExpFracB", "org.apache.commons.math3.util", "FastMathLiteralArrays", "static double[] loadExpFracB()" ], [ "loadLnMant", "org.apache.commons.math3.util", "FastMathLiteralArrays", "static double[][] loadLnMant()" ], [ "binomialCoefficient", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static long binomialCoefficient(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "binomialCoefficientDouble", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static double binomialCoefficientDouble(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "binomialCoefficientLog", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static double binomialCoefficientLog(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "factorial", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static long factorial(final int n) throws NotPositiveException, MathArithmeticException" ], [ "factorialDouble", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static double factorialDouble(final int n) throws NotPositiveException" ], [ "factorialLog", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static double factorialLog(final int n) throws NotPositiveException" ], [ "stirlingS2", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static long stirlingS2(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "combinationsIterator", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static Iterator<int[]> combinationsIterator(int n, int k)" ], [ "addAndCheck", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int addAndCheck(int x, int y) throws MathArithmeticException" ], [ "addAndCheck", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long addAndCheck(long a, long b) throws MathArithmeticException" ], [ "binomialCoefficient", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long binomialCoefficient(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "binomialCoefficientDouble", "org.apache.commons.math3.util", "ArithmeticUtils", "public static double binomialCoefficientDouble(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "binomialCoefficientLog", "org.apache.commons.math3.util", "ArithmeticUtils", "public static double binomialCoefficientLog(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "factorial", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long factorial(final int n) throws NotPositiveException, MathArithmeticException" ], [ "factorialDouble", "org.apache.commons.math3.util", "ArithmeticUtils", "public static double factorialDouble(final int n) throws NotPositiveException" ], [ "factorialLog", "org.apache.commons.math3.util", "ArithmeticUtils", "public static double factorialLog(final int n) throws NotPositiveException" ], [ "gcd", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int gcd(int p, int q) throws MathArithmeticException" ], [ "gcd", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long gcd(final long p, final long q) throws MathArithmeticException" ], [ "lcm", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int lcm(int a, int b) throws MathArithmeticException" ], [ "lcm", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long lcm(long a, long b) throws MathArithmeticException" ], [ "mulAndCheck", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int mulAndCheck(int x, int y) throws MathArithmeticException" ], [ "mulAndCheck", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long mulAndCheck(long a, long b) throws MathArithmeticException" ], [ "subAndCheck", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int subAndCheck(int x, int y) throws MathArithmeticException" ], [ "subAndCheck", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long subAndCheck(long a, long b) throws MathArithmeticException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int pow(final int k, final int e) throws NotPositiveException, MathArithmeticException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int pow(final int k, long e) throws NotPositiveException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long pow(final long k, final int e) throws NotPositiveException, MathArithmeticException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long pow(final long k, long e) throws NotPositiveException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static BigInteger pow(final BigInteger k, int e) throws NotPositiveException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static BigInteger pow(final BigInteger k, long e) throws NotPositiveException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static BigInteger pow(final BigInteger k, BigInteger e) throws NotPositiveException" ], [ "stirlingS2", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long stirlingS2(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "isPowerOfTwo", "org.apache.commons.math3.util", "ArithmeticUtils", "public static boolean isPowerOfTwo(long n)" ], [ "getAvailableLocales", "org.apache.commons.math3.complex", "ComplexFormat", "public static Locale[] getAvailableLocales()" ], [ "getInstance", "org.apache.commons.math3.complex", "ComplexFormat", "public static ComplexFormat getInstance()" ], [ "getInstance", "org.apache.commons.math3.complex", "ComplexFormat", "public static ComplexFormat getInstance(Locale locale)" ], [ "getInstance", "org.apache.commons.math3.complex", "ComplexFormat", "public static ComplexFormat getInstance(String imaginaryCharacter, Locale locale) throws NullArgumentException, NoDataException" ], [ "getInstance", "org.apache.commons.math3.complex", "ComplexField", "public static ComplexField getInstance()" ], [ "multiply", "org.apache.commons.math3.complex", "Quaternion", "public static Quaternion multiply(final Quaternion q1, final Quaternion q2)" ], [ "add", "org.apache.commons.math3.complex", "Quaternion", "public static Quaternion add(final Quaternion q1, final Quaternion q2)" ], [ "subtract", "org.apache.commons.math3.complex", "Quaternion", "public static Quaternion subtract(final Quaternion q1, final Quaternion q2)" ], [ "dotProduct", "org.apache.commons.math3.complex", "Quaternion", "public static double dotProduct(final Quaternion q1, final Quaternion q2)" ], [ "equals", "org.apache.commons.math3.complex", "Complex", "public static boolean equals(Complex x, Complex y, int maxUlps)" ], [ "equals", "org.apache.commons.math3.complex", "Complex", "public static boolean equals(Complex x, Complex y)" ], [ "equals", "org.apache.commons.math3.complex", "Complex", "public static boolean equals(Complex x, Complex y, double eps)" ], [ "equalsWithRelativeTolerance", "org.apache.commons.math3.complex", "Complex", "public static boolean equalsWithRelativeTolerance(Complex x, Complex y, double eps)" ], [ "valueOf", "org.apache.commons.math3.complex", "Complex", "public static Complex valueOf(double realPart, double imaginaryPart)" ], [ "valueOf", "org.apache.commons.math3.complex", "Complex", "public static Complex valueOf(double realPart)" ], [ "polar2Complex", "org.apache.commons.math3.complex", "ComplexUtils", "public static Complex polar2Complex(double r, double theta) throws MathIllegalArgumentException" ], [ "convertToComplex", "org.apache.commons.math3.complex", "ComplexUtils", "public static Complex[] convertToComplex(double[] real)" ], [ "getInvertedCoefficientSum", "org.apache.commons.math3.optimization.linear", "SimplexTableau", "protected static double getInvertedCoefficientSum(final RealVector coefficients)" ], [ "getAvailableLocales", "org.apache.commons.math3.linear", "RealMatrixFormat", "public static Locale[] getAvailableLocales()" ], [ "getInstance", "org.apache.commons.math3.linear", "RealMatrixFormat", "public static RealMatrixFormat getInstance()" ], [ "getInstance", "org.apache.commons.math3.linear", "RealMatrixFormat", "public static RealMatrixFormat getInstance(final Locale locale)" ], [ "createRealMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix createRealMatrix(final int rows, final int columns)" ], [ "createFieldMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldMatrix(final Field<T> field, final int rows, final int columns)" ], [ "createRealMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix createRealMatrix(double[][] data) throws NullArgumentException, DimensionMismatchException, NoDataException" ], [ "createFieldMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldMatrix(T[][] data) throws DimensionMismatchException, NoDataException, NullArgumentException" ], [ "createRealIdentityMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix createRealIdentityMatrix(int dimension)" ], [ "createFieldIdentityMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldIdentityMatrix(final Field<T> field, final int dimension)" ], [ "createRealDiagonalMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix createRealDiagonalMatrix(final double[] diagonal)" ], [ "createFieldDiagonalMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldDiagonalMatrix(final T[] diagonal)" ], [ "createRealVector", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealVector createRealVector(double[] data) throws NoDataException, NullArgumentException" ], [ "createFieldVector", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldVector<T> createFieldVector(final T[] data) throws NoDataException, NullArgumentException, ZeroException" ], [ "createRowRealMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix createRowRealMatrix(double[] rowData) throws NoDataException, NullArgumentException" ], [ "createRowFieldMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldMatrix<T> createRowFieldMatrix(final T[] rowData) throws NoDataException, NullArgumentException" ], [ "createColumnRealMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix createColumnRealMatrix(double[] columnData) throws NoDataException, NullArgumentException" ], [ "createColumnFieldMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldMatrix<T> createColumnFieldMatrix(final T[] columnData) throws NoDataException, NullArgumentException" ], [ "isSymmetric", "org.apache.commons.math3.linear", "MatrixUtils", "public static boolean isSymmetric(RealMatrix matrix, double eps)" ], [ "fractionMatrixToRealMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static Array2DRowRealMatrix fractionMatrixToRealMatrix(final FieldMatrix<Fraction> m)" ], [ "bigFractionMatrixToRealMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static Array2DRowRealMatrix bigFractionMatrixToRealMatrix(final FieldMatrix<BigFraction> m)" ], [ "blockInverse", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix blockInverse(RealMatrix m, int splitIndex)" ], [ "inverse", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix inverse(RealMatrix matrix) throws NullArgumentException, SingularMatrixException, NonSquareMatrixException" ], [ "inverse", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix inverse(RealMatrix matrix, double threshold) throws NullArgumentException, SingularMatrixException, NonSquareMatrixException" ], [ "toBlocksLayout", "org.apache.commons.math3.linear", "BlockFieldMatrix", "public static <T extends FieldElement<T>> T[][] toBlocksLayout(final T[][] rawData) throws DimensionMismatchException" ], [ "createBlocksLayout", "org.apache.commons.math3.linear", "BlockFieldMatrix", "public static <T extends FieldElement<T>> T[][] createBlocksLayout(final Field<T> field, final int rows, final int columns)" ], [ "toBlocksLayout", "org.apache.commons.math3.linear", "BlockRealMatrix", "public static double[][] toBlocksLayout(final double[][] rawData) throws DimensionMismatchException" ], [ "createBlocksLayout", "org.apache.commons.math3.linear", "BlockRealMatrix", "public static double[][] createBlocksLayout(final int rows, final int columns)" ], [ "unmodifiableRealVector", "org.apache.commons.math3.linear", "RealVector", "public static RealVector unmodifiableRealVector(final RealVector v)" ], [ "getAvailableLocales", "org.apache.commons.math3.linear", "RealVectorFormat", "public static Locale[] getAvailableLocales()" ], [ "getInstance", "org.apache.commons.math3.linear", "RealVectorFormat", "public static RealVectorFormat getInstance()" ], [ "getInstance", "org.apache.commons.math3.linear", "RealVectorFormat", "public static RealVectorFormat getInstance(final Locale locale)" ], [ "create", "org.apache.commons.math3.linear", "JacobiPreconditioner", "public static JacobiPreconditioner create(final RealLinearOperator a) throws NonSquareOperatorException" ], [ "extractField", "org.apache.commons.math3.linear", "AbstractFieldMatrix", "protected static <T extends FieldElement<T>> Field<T> extractField(final T[][] d) throws NoDataException, NullArgumentException" ], [ "extractField", "org.apache.commons.math3.linear", "AbstractFieldMatrix", "protected static <T extends FieldElement<T>> Field<T> extractField(final T[] d) throws NoDataException" ], [ "buildArray", "org.apache.commons.math3.linear", "AbstractFieldMatrix", "protected static <T extends FieldElement<T>> T[][] buildArray(final Field<T> field, final int rows, final int columns)" ], [ "buildArray", "org.apache.commons.math3.linear", "AbstractFieldMatrix", "protected static <T extends FieldElement<T>> T[] buildArray(final Field<T> field, final int length)" ], [ "estimate", "org.apache.commons.math3.distribution.fitting", "MultivariateNormalMixtureExpectationMaximization", "public static MixtureMultivariateNormalDistribution estimate(final double[][] data, final int numComponents) throws NotStrictlyPositiveException, DimensionMismatchException" ], [ "sample", "org.apache.commons.math3.distribution", "BetaDistribution", "static double sample(RandomGenerator random, final double alpha, final double beta)" ], [ "sample", "org.apache.commons.math3.distribution", "ChengBetaSampler", "static double sample(RandomGenerator random, final double alpha, final double beta)" ], [ "getStirlingError", "org.apache.commons.math3.distribution", "SaddlePointExpansion", "static double getStirlingError(double z)" ], [ "getDeviancePart", "org.apache.commons.math3.distribution", "SaddlePointExpansion", "static double getDeviancePart(double x, double mu)" ], [ "logBinomialProbability", "org.apache.commons.math3.distribution", "SaddlePointExpansion", "static double logBinomialProbability(int x, int n, double p, double q)" ], [ "helper1", "org.apache.commons.math3.distribution", "ZipfDistribution", "static double helper1(final double x)" ], [ "helper2", "org.apache.commons.math3.distribution", "ZipfDistribution", "static double helper2(final double x)" ], [ "helper1", "org.apache.commons.math3.distribution", "ZipfRejectionInversionSampler", "static double helper1(final double x)" ], [ "helper2", "org.apache.commons.math3.distribution", "ZipfRejectionInversionSampler", "static double helper2(final double x)" ], [ "unlimited", "org.apache.commons.math3.optim", "MaxIter", "public static MaxIter unlimited()" ], [ "getInvertedCoefficientSum", "org.apache.commons.math3.optim.linear", "SimplexTableau", "protected static double getInvertedCoefficientSum(final RealVector coefficients)" ], [ "unbounded", "org.apache.commons.math3.optim", "SimpleBounds", "public static SimpleBounds unbounded(int dim)" ], [ "unlimited", "org.apache.commons.math3.optim", "MaxEval", "public static MaxEval unlimited()" ], [ "erf", "org.apache.commons.math3.special", "Erf", "public static double erf(double x)" ], [ "erfc", "org.apache.commons.math3.special", "Erf", "public static double erfc(double x)" ], [ "erf", "org.apache.commons.math3.special", "Erf", "public static double erf(double x1, double x2)" ], [ "erfInv", "org.apache.commons.math3.special", "Erf", "public static double erfInv(final double x)" ], [ "erfcInv", "org.apache.commons.math3.special", "Erf", "public static double erfcInv(final double x)" ], [ "value", "org.apache.commons.math3.special", "BesselJ", "public static double value(double order, double x) throws MathIllegalArgumentException, ConvergenceException" ], [ "rjBesl", "org.apache.commons.math3.special", "BesselJ", "public static BesselJResult rjBesl(double x, double alpha, int nb)" ], [ "logGamma", "org.apache.commons.math3.special", "Gamma", "public static double logGamma(double x)" ], [ "regularizedGammaP", "org.apache.commons.math3.special", "Gamma", "public static double regularizedGammaP(double a, double x)" ], [ "regularizedGammaP", "org.apache.commons.math3.special", "Gamma", "public static double regularizedGammaP(double a, double x, double epsilon, int maxIterations)" ], [ "regularizedGammaQ", "org.apache.commons.math3.special", "Gamma", "public static double regularizedGammaQ(double a, double x)" ], [ "regularizedGammaQ", "org.apache.commons.math3.special", "Gamma", "public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations)" ], [ "digamma", "org.apache.commons.math3.special", "Gamma", "public static double digamma(double x)" ], [ "trigamma", "org.apache.commons.math3.special", "Gamma", "public static double trigamma(double x)" ], [ "lanczos", "org.apache.commons.math3.special", "Gamma", "public static double lanczos(final double x)" ], [ "invGamma1pm1", "org.apache.commons.math3.special", "Gamma", "public static double invGamma1pm1(final double x)" ], [ "logGamma1p", "org.apache.commons.math3.special", "Gamma", "public static double logGamma1p(final double x) throws NumberIsTooSmallException, NumberIsTooLargeException" ], [ "gamma", "org.apache.commons.math3.special", "Gamma", "public static double gamma(final double x)" ], [ "regularizedBeta", "org.apache.commons.math3.special", "Beta", "public static double regularizedBeta(double x, double a, double b)" ], [ "regularizedBeta", "org.apache.commons.math3.special", "Beta", "public static double regularizedBeta(double x, double a, double b, double epsilon)" ], [ "regularizedBeta", "org.apache.commons.math3.special", "Beta", "public static double regularizedBeta(double x, double a, double b, int maxIterations)" ], [ "regularizedBeta", "org.apache.commons.math3.special", "Beta", "public static double regularizedBeta(double x, final double a, final double b, double epsilon, int maxIterations)" ], [ "logBeta", "org.apache.commons.math3.special", "Beta", "public static double logBeta(double a, double b, double epsilon, int maxIterations)" ], [ "logBeta", "org.apache.commons.math3.special", "Beta", "public static double logBeta(final double p, final double q)" ], [ "getInstance", "org.apache.commons.math3.ode.sampling", "DummyStepHandler", "public static DummyStepHandler getInstance()" ], [ "getInstance", "org.apache.commons.math3.ode.nonstiff", "AdamsNordsieckTransformer", "public static AdamsNordsieckTransformer getInstance(final int nSteps)" ], [ "taylor", "org.apache.commons.math3.ode.nonstiff", "AdamsFieldStepInterpolator", "public static <S extends RealFieldElement<S>> FieldODEStateAndDerivative<S> taylor(final FieldODEStateAndDerivative<S> reference, final S time, final S stepSize, final S[] scaled, final Array2DRowFieldMatrix<S> nordsieck)" ], [ "getInstance", "org.apache.commons.math3.ode.nonstiff", "AdamsNordsieckFieldTransformer", "public static <T extends RealFieldElement<T>> AdamsNordsieckFieldTransformer<T> getInstance(final Field<T> field, final int nSteps)" ], [ "sum", "org.apache.commons.math3.stat", "StatUtils", "public static double sum(final double[] values) throws MathIllegalArgumentException" ], [ "sum", "org.apache.commons.math3.stat", "StatUtils", "public static double sum(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "sumSq", "org.apache.commons.math3.stat", "StatUtils", "public static double sumSq(final double[] values) throws MathIllegalArgumentException" ], [ "sumSq", "org.apache.commons.math3.stat", "StatUtils", "public static double sumSq(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "product", "org.apache.commons.math3.stat", "StatUtils", "public static double product(final double[] values) throws MathIllegalArgumentException" ], [ "product", "org.apache.commons.math3.stat", "StatUtils", "public static double product(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "sumLog", "org.apache.commons.math3.stat", "StatUtils", "public static double sumLog(final double[] values) throws MathIllegalArgumentException" ], [ "sumLog", "org.apache.commons.math3.stat", "StatUtils", "public static double sumLog(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "mean", "org.apache.commons.math3.stat", "StatUtils", "public static double mean(final double[] values) throws MathIllegalArgumentException" ], [ "mean", "org.apache.commons.math3.stat", "StatUtils", "public static double mean(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "geometricMean", "org.apache.commons.math3.stat", "StatUtils", "public static double geometricMean(final double[] values) throws MathIllegalArgumentException" ], [ "geometricMean", "org.apache.commons.math3.stat", "StatUtils", "public static double geometricMean(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "variance", "org.apache.commons.math3.stat", "StatUtils", "public static double variance(final double[] values) throws MathIllegalArgumentException" ], [ "variance", "org.apache.commons.math3.stat", "StatUtils", "public static double variance(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "variance", "org.apache.commons.math3.stat", "StatUtils", "public static double variance(final double[] values, final double mean, final int begin, final int length) throws MathIllegalArgumentException" ], [ "variance", "org.apache.commons.math3.stat", "StatUtils", "public static double variance(final double[] values, final double mean) throws MathIllegalArgumentException" ], [ "populationVariance", "org.apache.commons.math3.stat", "StatUtils", "public static double populationVariance(final double[] values) throws MathIllegalArgumentException" ], [ "populationVariance", "org.apache.commons.math3.stat", "StatUtils", "public static double populationVariance(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "populationVariance", "org.apache.commons.math3.stat", "StatUtils", "public static double populationVariance(final double[] values, final double mean, final int begin, final int length) throws MathIllegalArgumentException" ], [ "populationVariance", "org.apache.commons.math3.stat", "StatUtils", "public static double populationVariance(final double[] values, final double mean) throws MathIllegalArgumentException" ], [ "max", "org.apache.commons.math3.stat", "StatUtils", "public static double max(final double[] values) throws MathIllegalArgumentException" ], [ "max", "org.apache.commons.math3.stat", "StatUtils", "public static double max(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "min", "org.apache.commons.math3.stat", "StatUtils", "public static double min(final double[] values) throws MathIllegalArgumentException" ], [ "min", "org.apache.commons.math3.stat", "StatUtils", "public static double min(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "percentile", "org.apache.commons.math3.stat", "StatUtils", "public static double percentile(final double[] values, final double p) throws MathIllegalArgumentException" ], [ "percentile", "org.apache.commons.math3.stat", "StatUtils", "public static double percentile(final double[] values, final int begin, final int length, final double p) throws MathIllegalArgumentException" ], [ "sumDifference", "org.apache.commons.math3.stat", "StatUtils", "public static double sumDifference(final double[] sample1, final double[] sample2) throws DimensionMismatchException, NoDataException" ], [ "meanDifference", "org.apache.commons.math3.stat", "StatUtils", "public static double meanDifference(final double[] sample1, final double[] sample2) throws DimensionMismatchException, NoDataException" ], [ "varianceDifference", "org.apache.commons.math3.stat", "StatUtils", "public static double varianceDifference(final double[] sample1, final double[] sample2, double meanDifference) throws DimensionMismatchException, NumberIsTooSmallException" ], [ "normalize", "org.apache.commons.math3.stat", "StatUtils", "public static double[] normalize(final double[] sample)" ], [ "mode", "org.apache.commons.math3.stat", "StatUtils", "public static double[] mode(double[] sample) throws MathIllegalArgumentException" ], [ "mode", "org.apache.commons.math3.stat", "StatUtils", "public static double[] mode(double[] sample, final int begin, final int length)" ], [ "getAgrestiCoullInterval", "org.apache.commons.math3.stat.interval", "IntervalUtils", "public static ConfidenceInterval getAgrestiCoullInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)" ], [ "getClopperPearsonInterval", "org.apache.commons.math3.stat.interval", "IntervalUtils", "public static ConfidenceInterval getClopperPearsonInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)" ], [ "getNormalApproximationInterval", "org.apache.commons.math3.stat.interval", "IntervalUtils", "public static ConfidenceInterval getNormalApproximationInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)" ], [ "getWilsonScoreInterval", "org.apache.commons.math3.stat.interval", "IntervalUtils", "public static ConfidenceInterval getWilsonScoreInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)" ], [ "homoscedasticT", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double homoscedasticT(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException" ], [ "homoscedasticT", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double homoscedasticT(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException" ], [ "homoscedasticTTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean homoscedasticTTest(final double[] sample1, final double[] sample2, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException" ], [ "homoscedasticTTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double homoscedasticTTest(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException" ], [ "homoscedasticTTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double homoscedasticTTest(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException" ], [ "pairedT", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double pairedT(final double[] sample1, final double[] sample2) throws NullArgumentException, NoDataException, DimensionMismatchException, NumberIsTooSmallException" ], [ "pairedTTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean pairedTTest(final double[] sample1, final double[] sample2, final double alpha) throws NullArgumentException, NoDataException, DimensionMismatchException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException" ], [ "pairedTTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double pairedTTest(final double[] sample1, final double[] sample2) throws NullArgumentException, NoDataException, DimensionMismatchException, NumberIsTooSmallException, MaxCountExceededException" ], [ "t", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double t(final double mu, final double[] observed) throws NullArgumentException, NumberIsTooSmallException" ], [ "t", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double t(final double mu, final StatisticalSummary sampleStats) throws NullArgumentException, NumberIsTooSmallException" ], [ "t", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double t(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException" ], [ "t", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double t(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean tTest(final double mu, final double[] sample, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double tTest(final double mu, final double[] sample) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean tTest(final double mu, final StatisticalSummary sampleStats, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double tTest(final double mu, final StatisticalSummary sampleStats) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean tTest(final double[] sample1, final double[] sample2, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double tTest(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean tTest(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double tTest(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException" ], [ "chiSquare", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double chiSquare(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException" ], [ "chiSquare", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double chiSquare(final long[][] counts) throws NullArgumentException, NotPositiveException, DimensionMismatchException" ], [ "chiSquareTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean chiSquareTest(final double[] expected, final long[] observed, final double alpha) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, OutOfRangeException, MaxCountExceededException" ], [ "chiSquareTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double chiSquareTest(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, MaxCountExceededException" ], [ "chiSquareTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean chiSquareTest(final long[][] counts, final double alpha) throws NullArgumentException, DimensionMismatchException, NotPositiveException, OutOfRangeException, MaxCountExceededException" ], [ "chiSquareTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double chiSquareTest(final long[][] counts) throws NullArgumentException, DimensionMismatchException, NotPositiveException, MaxCountExceededException" ], [ "chiSquareDataSetsComparison", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double chiSquareDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException" ], [ "chiSquareTestDataSetsComparison", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double chiSquareTestDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException, MaxCountExceededException" ], [ "chiSquareTestDataSetsComparison", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean chiSquareTestDataSetsComparison(final long[] observed1, final long[] observed2, final double alpha) throws DimensionMismatchException, NotPositiveException, ZeroException, OutOfRangeException, MaxCountExceededException" ], [ "oneWayAnovaFValue", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double oneWayAnovaFValue(final Collection<double[]> categoryData) throws NullArgumentException, DimensionMismatchException" ], [ "oneWayAnovaPValue", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double oneWayAnovaPValue(final Collection<double[]> categoryData) throws NullArgumentException, DimensionMismatchException, ConvergenceException, MaxCountExceededException" ], [ "oneWayAnovaTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean oneWayAnovaTest(final Collection<double[]> categoryData, final double alpha) throws NullArgumentException, DimensionMismatchException, OutOfRangeException, ConvergenceException, MaxCountExceededException" ], [ "g", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double g(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException" ], [ "gTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double gTest(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, MaxCountExceededException" ], [ "gTestIntrinsic", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double gTestIntrinsic(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, MaxCountExceededException" ], [ "gTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean gTest(final double[] expected, final long[] observed, final double alpha) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, OutOfRangeException, MaxCountExceededException" ], [ "gDataSetsComparison", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double gDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException" ], [ "rootLogLikelihoodRatio", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double rootLogLikelihoodRatio(final long k11, final long k12, final long k21, final long k22) throws DimensionMismatchException, NotPositiveException, ZeroException" ], [ "gTestDataSetsComparison", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double gTestDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException, MaxCountExceededException" ], [ "gTestDataSetsComparison", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean gTestDataSetsComparison(final long[] observed1, final long[] observed2, final double alpha) throws DimensionMismatchException, NotPositiveException, ZeroException, OutOfRangeException, MaxCountExceededException" ], [ "kolmogorovSmirnovStatistic", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double kolmogorovSmirnovStatistic(RealDistribution dist, double[] data) throws InsufficientDataException, NullArgumentException" ], [ "kolmogorovSmirnovTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double kolmogorovSmirnovTest(RealDistribution dist, double[] data) throws InsufficientDataException, NullArgumentException" ], [ "kolmogorovSmirnovTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double kolmogorovSmirnovTest(RealDistribution dist, double[] data, boolean strict) throws InsufficientDataException, NullArgumentException" ], [ "kolmogorovSmirnovTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean kolmogorovSmirnovTest(RealDistribution dist, double[] data, double alpha) throws InsufficientDataException, NullArgumentException" ], [ "kolmogorovSmirnovStatistic", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double kolmogorovSmirnovStatistic(double[] x, double[] y) throws InsufficientDataException, NullArgumentException" ], [ "kolmogorovSmirnovTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double kolmogorovSmirnovTest(double[] x, double[] y) throws InsufficientDataException, NullArgumentException" ], [ "kolmogorovSmirnovTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double kolmogorovSmirnovTest(double[] x, double[] y, boolean strict) throws InsufficientDataException, NullArgumentException" ], [ "exactP", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double exactP(double d, int m, int n, boolean strict)" ], [ "approximateP", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double approximateP(double d, int n, int m)" ], [ "monteCarloP", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double monteCarloP(double d, int n, int m, boolean strict, int iterations)" ], [ "aggregate", "org.apache.commons.math3.stat.descriptive", "AggregateSummaryStatistics", "public static StatisticalSummaryValues aggregate(Collection<? extends StatisticalSummary> statistics)" ], [ "newMarkers", "org.apache.commons.math3.stat.descriptive.rank", "PSquarePercentile", "public static PSquareMarkers newMarkers(final List<Double> initialFive, final double p)" ], [ "exponentialDecay", "org.apache.commons.math3.ml.neuralnet.sofm", "NeighbourhoodSizeFunctionFactory", "public static NeighbourhoodSizeFunction exponentialDecay(final double initValue, final double valueAtNumCall, final long numCall)" ], [ "quasiSigmoidDecay", "org.apache.commons.math3.ml.neuralnet.sofm", "NeighbourhoodSizeFunctionFactory", "public static NeighbourhoodSizeFunction quasiSigmoidDecay(final double initValue, final double slope, final long numCall)" ], [ "exponentialDecay", "org.apache.commons.math3.ml.neuralnet.sofm", "LearningFactorFunctionFactory", "public static LearningFactorFunction exponentialDecay(final double initValue, final double valueAtNumCall, final long numCall)" ], [ "quasiSigmoidDecay", "org.apache.commons.math3.ml.neuralnet.sofm", "LearningFactorFunctionFactory", "public static LearningFactorFunction quasiSigmoidDecay(final double initValue, final double slope, final long numCall)" ], [ "findBest", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static Neuron findBest(double[] features, Iterable<Neuron> neurons, DistanceMeasure distance)" ], [ "findBestAndSecondBest", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static Pair<Neuron, Neuron> findBestAndSecondBest(double[] features, Iterable<Neuron> neurons, DistanceMeasure distance)" ], [ "sort", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static Neuron[] sort(double[] features, Iterable<Neuron> neurons, DistanceMeasure distance)" ], [ "computeU", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static double[][] computeU(NeuronSquareMesh2D map, DistanceMeasure distance)" ], [ "computeHitHistogram", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static int[][] computeHitHistogram(Iterable<double[]> data, NeuronSquareMesh2D map, DistanceMeasure distance)" ], [ "computeQuantizationError", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static double computeQuantizationError(Iterable<double[]> data, Iterable<Neuron> neurons, DistanceMeasure distance)" ], [ "computeTopographicError", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static double computeTopographicError(Iterable<double[]> data, Network net, DistanceMeasure distance)" ], [ "uniform", "org.apache.commons.math3.ml.neuralnet", "FeatureInitializerFactory", "public static FeatureInitializer uniform(final RandomGenerator rng, final double min, final double max)" ], [ "uniform", "org.apache.commons.math3.ml.neuralnet", "FeatureInitializerFactory", "public static FeatureInitializer uniform(final double min, final double max)" ], [ "function", "org.apache.commons.math3.ml.neuralnet", "FeatureInitializerFactory", "public static FeatureInitializer function(final UnivariateFunction f, final double init, final double inc)" ], [ "randomize", "org.apache.commons.math3.ml.neuralnet", "FeatureInitializerFactory", "public static FeatureInitializer randomize(final RealDistribution random, final FeatureInitializer orig)" ], [ "split", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp[] split(final DfpField field, final String a)" ], [ "split", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp[] split(final Dfp a)" ], [ "splitMult", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp[] splitMult(final Dfp[] a, final Dfp[] b)" ], [ "splitDiv", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp[] splitDiv(final Dfp[] a, final Dfp[] b)" ], [ "splitPow", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp splitPow(final Dfp[] base, int a)" ], [ "pow", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp pow(Dfp base, int a)" ], [ "exp", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp exp(final Dfp a)" ], [ "expInternal", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp expInternal(final Dfp a)" ], [ "log", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp log(Dfp a)" ], [ "logInternal", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp[] logInternal(final Dfp[] a)" ], [ "pow", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp pow(Dfp x, final Dfp y)" ], [ "sinInternal", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp sinInternal(Dfp[] a)" ], [ "cosInternal", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp cosInternal(Dfp[] a)" ], [ "sin", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp sin(final Dfp a)" ], [ "cos", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp cos(Dfp a)" ], [ "tan", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp tan(final Dfp a)" ], [ "atanInternal", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp atanInternal(final Dfp a)" ], [ "atan", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp atan(final Dfp a)" ], [ "asin", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp asin(final Dfp a)" ], [ "acos", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp acos(Dfp a)" ], [ "copysign", "org.apache.commons.math3.dfp", "Dfp", "public static Dfp copysign(final Dfp x, final Dfp y)" ], [ "computeExp", "org.apache.commons.math3.dfp", "DfpField", "public static Dfp computeExp(final Dfp a, final Dfp one)" ], [ "computeLn", "org.apache.commons.math3.dfp", "DfpField", "public static Dfp computeLn(final Dfp a, final Dfp one, final Dfp two)" ], [ "getRandomGenerator", "org.apache.commons.math3.genetics", "GeneticAlgorithm", "public static synchronized RandomGenerator getRandomGenerator()" ], [ "randomPermutation", "org.apache.commons.math3.genetics", "RandomKey", "public static final List<Double> randomPermutation(final int l)" ], [ "identityPermutation", "org.apache.commons.math3.genetics", "RandomKey", "public static final List<Double> identityPermutation(final int l)" ], [ "comparatorPermutation", "org.apache.commons.math3.genetics", "RandomKey", "public static <S> List<Double> comparatorPermutation(final List<S> data, final Comparator<S> comparator)" ], [ "inducedPermutation", "org.apache.commons.math3.genetics", "RandomKey", "public static <S> List<Double> inducedPermutation(final List<S> originalData, final List<S> permutedData) throws DimensionMismatchException, MathIllegalArgumentException" ], [ "randomBinaryRepresentation", "org.apache.commons.math3.genetics", "BinaryChromosome", "public static List<Integer> randomBinaryRepresentation(int length)" ], [ "getAvailableLocales", "org.apache.commons.math3.geometry", "VectorFormat", "public static Locale[] getAvailableLocales()" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3DFormat", "public static Vector3DFormat getInstance()" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3DFormat", "public static Vector3DFormat getInstance(final Locale locale)" ], [ "angle", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T angle(final FieldVector3D<T> v1, final FieldVector3D<T> v2) throws MathArithmeticException" ], [ "angle", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T angle(final FieldVector3D<T> v1, final Vector3D v2) throws MathArithmeticException" ], [ "angle", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T angle(final Vector3D v1, final FieldVector3D<T> v2) throws MathArithmeticException" ], [ "dotProduct", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T dotProduct(final FieldVector3D<T> v1, final FieldVector3D<T> v2)" ], [ "dotProduct", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T dotProduct(final FieldVector3D<T> v1, final Vector3D v2)" ], [ "dotProduct", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T dotProduct(final Vector3D v1, final FieldVector3D<T> v2)" ], [ "crossProduct", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> FieldVector3D<T> crossProduct(final FieldVector3D<T> v1, final FieldVector3D<T> v2)" ], [ "crossProduct", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> FieldVector3D<T> crossProduct(final FieldVector3D<T> v1, final Vector3D v2)" ], [ "crossProduct", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> FieldVector3D<T> crossProduct(final Vector3D v1, final FieldVector3D<T> v2)" ], [ "distance1", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distance1(final FieldVector3D<T> v1, final FieldVector3D<T> v2)" ], [ "distance1", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distance1(final FieldVector3D<T> v1, final Vector3D v2)" ], [ "distance1", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distance1(final Vector3D v1, final FieldVector3D<T> v2)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distance(final FieldVector3D<T> v1, final FieldVector3D<T> v2)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distance(final FieldVector3D<T> v1, final Vector3D v2)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distance(final Vector3D v1, final FieldVector3D<T> v2)" ], [ "distanceInf", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distanceInf(final FieldVector3D<T> v1, final FieldVector3D<T> v2)" ], [ "distanceInf", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distanceInf(final FieldVector3D<T> v1, final Vector3D v2)" ], [ "distanceInf", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distanceInf(final Vector3D v1, final FieldVector3D<T> v2)" ], [ "distanceSq", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distanceSq(final FieldVector3D<T> v1, final FieldVector3D<T> v2)" ], [ "distanceSq", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distanceSq(final FieldVector3D<T> v1, final Vector3D v2)" ], [ "distanceSq", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distanceSq(final Vector3D v1, final FieldVector3D<T> v2)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.threed", "Rotation", "public static double distance(Rotation r1, Rotation r2)" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.threed", "Euclidean3D", "public static Euclidean3D getInstance()" ], [ "applyTo", "org.apache.commons.math3.geometry.euclidean.threed", "FieldRotation", "public static <T extends RealFieldElement<T>> FieldVector3D<T> applyTo(final Rotation r, final FieldVector3D<T> u)" ], [ "applyInverseTo", "org.apache.commons.math3.geometry.euclidean.threed", "FieldRotation", "public static <T extends RealFieldElement<T>> FieldVector3D<T> applyInverseTo(final Rotation r, final FieldVector3D<T> u)" ], [ "applyTo", "org.apache.commons.math3.geometry.euclidean.threed", "FieldRotation", "public static <T extends RealFieldElement<T>> FieldRotation<T> applyTo(final Rotation r1, final FieldRotation<T> rInner)" ], [ "applyInverseTo", "org.apache.commons.math3.geometry.euclidean.threed", "FieldRotation", "public static <T extends RealFieldElement<T>> FieldRotation<T> applyInverseTo(final Rotation rOuter, final FieldRotation<T> rInner)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.threed", "FieldRotation", "public static <T extends RealFieldElement<T>> T distance(final FieldRotation<T> r1, final FieldRotation<T> r2)" ], [ "angle", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static double angle(Vector3D v1, Vector3D v2) throws MathArithmeticException" ], [ "dotProduct", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static double dotProduct(Vector3D v1, Vector3D v2)" ], [ "crossProduct", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2)" ], [ "distance1", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static double distance1(Vector3D v1, Vector3D v2)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static double distance(Vector3D v1, Vector3D v2)" ], [ "distanceInf", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static double distanceInf(Vector3D v1, Vector3D v2)" ], [ "distanceSq", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static double distanceSq(Vector3D v1, Vector3D v2)" ], [ "intersection", "org.apache.commons.math3.geometry.euclidean.threed", "Plane", "public static Vector3D intersection(final Plane plane1, final Plane plane2, final Plane plane3)" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.oned", "Euclidean1D", "public static Euclidean1D getInstance()" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1DFormat", "public static Vector1DFormat getInstance()" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1DFormat", "public static Vector1DFormat getInstance(final Locale locale)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static double distance(Vector1D p1, Vector1D p2)" ], [ "distanceInf", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static double distanceInf(Vector1D p1, Vector1D p2)" ], [ "distanceSq", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static double distanceSq(Vector1D p1, Vector1D p2)" ], [ "reducePoints", "org.apache.commons.math3.geometry.euclidean.twod.hull", "AklToussaintHeuristic", "public static Collection<Vector2D> reducePoints(final Collection<Vector2D> points)" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2DFormat", "public static Vector2DFormat getInstance()" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2DFormat", "public static Vector2DFormat getInstance(final Locale locale)" ], [ "angle", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static double angle(Vector2D v1, Vector2D v2) throws MathArithmeticException" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static double distance(Vector2D p1, Vector2D p2)" ], [ "distanceInf", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static double distanceInf(Vector2D p1, Vector2D p2)" ], [ "distanceSq", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static double distanceSq(Vector2D p1, Vector2D p2)" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.twod", "Euclidean2D", "public static Euclidean2D getInstance()" ], [ "getTransform", "org.apache.commons.math3.geometry.euclidean.twod", "Line", "public static Transform<Euclidean2D, Euclidean1D> getTransform(final AffineTransform transform) throws MathIllegalArgumentException" ], [ "getTransform", "org.apache.commons.math3.geometry.euclidean.twod", "Line", "public static Transform<Euclidean2D, Euclidean1D> getTransform(final double cXX, final double cYX, final double cXY, final double cYY, final double cX1, final double cY1) throws MathIllegalArgumentException" ], [ "distance", "org.apache.commons.math3.geometry.spherical.oned", "S1Point", "public static double distance(S1Point p1, S1Point p2)" ], [ "getInstance", "org.apache.commons.math3.geometry.spherical.oned", "Sphere1D", "public static Sphere1D getInstance()" ], [ "getInstance", "org.apache.commons.math3.geometry.spherical.twod", "Sphere2D", "public static Sphere2D getInstance()" ], [ "getTransform", "org.apache.commons.math3.geometry.spherical.twod", "Circle", "public static Transform<Sphere2D, Sphere1D> getTransform(final Rotation rotation)" ], [ "distance", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static double distance(S2Point p1, S2Point p2)" ], [ "createAdaptor", "org.apache.commons.math3.random", "RandomAdaptor", "public static Random createAdaptor(RandomGenerator randomGenerator)" ], [ "createRandomGenerator", "org.apache.commons.math3.random", "RandomGeneratorFactory", "public static RandomGenerator createRandomGenerator(final Random rng)" ], [ "convertToLong", "org.apache.commons.math3.random", "RandomGeneratorFactory", "public static long convertToLong(int[] seed)" ], [ "getAvailableLocales", "org.apache.commons.math3.fraction", "BigFractionFormat", "public static Locale[] getAvailableLocales()" ], [ "formatBigFraction", "org.apache.commons.math3.fraction", "BigFractionFormat", "public static String formatBigFraction(final BigFraction f)" ], [ "getImproperInstance", "org.apache.commons.math3.fraction", "BigFractionFormat", "public static BigFractionFormat getImproperInstance()" ], [ "getImproperInstance", "org.apache.commons.math3.fraction", "BigFractionFormat", "public static BigFractionFormat getImproperInstance(final Locale locale)" ], [ "getProperInstance", "org.apache.commons.math3.fraction", "BigFractionFormat", "public static BigFractionFormat getProperInstance()" ], [ "getProperInstance", "org.apache.commons.math3.fraction", "BigFractionFormat", "public static BigFractionFormat getProperInstance(final Locale locale)" ], [ "getReducedFraction", "org.apache.commons.math3.fraction", "Fraction", "public static Fraction getReducedFraction(int numerator, int denominator)" ], [ "getReducedFraction", "org.apache.commons.math3.fraction", "BigFraction", "public static BigFraction getReducedFraction(final int numerator, final int denominator)" ], [ "getDefaultNumberFormat", "org.apache.commons.math3.fraction", "AbstractFormat", "protected static NumberFormat getDefaultNumberFormat()" ], [ "getDefaultNumberFormat", "org.apache.commons.math3.fraction", "AbstractFormat", "protected static NumberFormat getDefaultNumberFormat(final Locale locale)" ], [ "parseNextCharacter", "org.apache.commons.math3.fraction", "AbstractFormat", "protected static char parseNextCharacter(final String source, final ParsePosition pos)" ], [ "getAvailableLocales", "org.apache.commons.math3.fraction", "FractionFormat", "public static Locale[] getAvailableLocales()" ], [ "formatFraction", "org.apache.commons.math3.fraction", "FractionFormat", "public static String formatFraction(Fraction f)" ], [ "getImproperInstance", "org.apache.commons.math3.fraction", "FractionFormat", "public static FractionFormat getImproperInstance()" ], [ "getImproperInstance", "org.apache.commons.math3.fraction", "FractionFormat", "public static FractionFormat getImproperInstance(final Locale locale)" ], [ "getProperInstance", "org.apache.commons.math3.fraction", "FractionFormat", "public static FractionFormat getProperInstance()" ], [ "getProperInstance", "org.apache.commons.math3.fraction", "FractionFormat", "public static FractionFormat getProperInstance(final Locale locale)" ], [ "getDefaultNumberFormat", "org.apache.commons.math3.fraction", "FractionFormat", "protected static NumberFormat getDefaultNumberFormat()" ], [ "getInstance", "org.apache.commons.math3.fraction", "FractionField", "public static FractionField getInstance()" ], [ "getInstance", "org.apache.commons.math3.fraction", "BigFractionField", "public static BigFractionField getInstance()" ], [ "flatten", "org.apache.commons.math3.exception.util", "ArgUtils", "public static Object[] flatten(Object[] array)" ], [ "scaleArray", "org.apache.commons.math3.transform", "TransformUtils", "public static double[] scaleArray(double[] f, double d)" ], [ "scaleArray", "org.apache.commons.math3.transform", "TransformUtils", "public static Complex[] scaleArray(Complex[] f, double d)" ], [ "createRealImaginaryArray", "org.apache.commons.math3.transform", "TransformUtils", "public static double[][] createRealImaginaryArray(final Complex[] dataC)" ], [ "createComplexArray", "org.apache.commons.math3.transform", "TransformUtils", "public static Complex[] createComplexArray(final double[][] dataRI) throws DimensionMismatchException" ], [ "exactLog2", "org.apache.commons.math3.transform", "TransformUtils", "public static int exactLog2(final int n) throws MathIllegalArgumentException" ] ],
  "tokensProjectClassesNonPrivateStaticAttributes" : [ [ "PRIMES", "org.apache.commons.math3.primes", "SmallPrimes", "public static final int[] PRIMES = { 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171, 1181, 1187, 1193, 1201, 1213, 1217, 1223, 1229, 1231, 1237, 1249, 1259, 1277, 1279, 1283, 1289, 1291, 1297, 1301, 1303, 1307, 1319, 1321, 1327, 1361, 1367, 1373, 1381, 1399, 1409, 1423, 1427, 1429, 1433, 1439, 1447, 1451, 1453, 1459, 1471, 1481, 1483, 1487, 1489, 1493, 1499, 1511, 1523, 1531, 1543, 1549, 1553, 1559, 1567, 1571, 1579, 1583, 1597, 1601, 1607, 1609, 1613, 1619, 1621, 1627, 1637, 1657, 1663, 1667, 1669, 1693, 1697, 1699, 1709, 1721, 1723, 1733, 1741, 1747, 1753, 1759, 1777, 1783, 1787, 1789, 1801, 1811, 1823, 1831, 1847, 1861, 1867, 1871, 1873, 1877, 1879, 1889, 1901, 1907, 1913, 1931, 1933, 1949, 1951, 1973, 1979, 1987, 1993, 1997, 1999, 2003, 2011, 2017, 2027, 2029, 2039, 2053, 2063, 2069, 2081, 2083, 2087, 2089, 2099, 2111, 2113, 2129, 2131, 2137, 2141, 2143, 2153, 2161, 2179, 2203, 2207, 2213, 2221, 2237, 2239, 2243, 2251, 2267, 2269, 2273, 2281, 2287, 2293, 2297, 2309, 2311, 2333, 2339, 2341, 2347, 2351, 2357, 2371, 2377, 2381, 2383, 2389, 2393, 2399, 2411, 2417, 2423, 2437, 2441, 2447, 2459, 2467, 2473, 2477, 2503, 2521, 2531, 2539, 2543, 2549, 2551, 2557, 2579, 2591, 2593, 2609, 2617, 2621, 2633, 2647, 2657, 2659, 2663, 2671, 2677, 2683, 2687, 2689, 2693, 2699, 2707, 2711, 2713, 2719, 2729, 2731, 2741, 2749, 2753, 2767, 2777, 2789, 2791, 2797, 2801, 2803, 2819, 2833, 2837, 2843, 2851, 2857, 2861, 2879, 2887, 2897, 2903, 2909, 2917, 2927, 2939, 2953, 2957, 2963, 2969, 2971, 2999, 3001, 3011, 3019, 3023, 3037, 3041, 3049, 3061, 3067, 3079, 3083, 3089, 3109, 3119, 3121, 3137, 3163, 3167, 3169, 3181, 3187, 3191, 3203, 3209, 3217, 3221, 3229, 3251, 3253, 3257, 3259, 3271, 3299, 3301, 3307, 3313, 3319, 3323, 3329, 3331, 3343, 3347, 3359, 3361, 3371, 3373, 3389, 3391, 3407, 3413, 3433, 3449, 3457, 3461, 3463, 3467, 3469, 3491, 3499, 3511, 3517, 3527, 3529, 3533, 3539, 3541, 3547, 3557, 3559, 3571, 3581, 3583, 3593, 3607, 3613, 3617, 3623, 3631, 3637, 3643, 3659, 3671 };" ], [ "PRIMES_LAST", "org.apache.commons.math3.primes", "SmallPrimes", "public static final int PRIMES_LAST = PRIMES[PRIMES.length - 1];" ], [ "MIDPOINT_MAX_ITERATIONS_COUNT", "org.apache.commons.math3.analysis.integration", "MidPointIntegrator", "public static final int MIDPOINT_MAX_ITERATIONS_COUNT = 64;" ], [ "ROMBERG_MAX_ITERATIONS_COUNT", "org.apache.commons.math3.analysis.integration", "RombergIntegrator", "public static final int ROMBERG_MAX_ITERATIONS_COUNT = 32;" ], [ "SIMPSON_MAX_ITERATIONS_COUNT", "org.apache.commons.math3.analysis.integration", "SimpsonIntegrator", "public static final int SIMPSON_MAX_ITERATIONS_COUNT = 64;" ], [ "DEFAULT_ABSOLUTE_ACCURACY", "org.apache.commons.math3.analysis.integration", "BaseAbstractUnivariateIntegrator", "public static final double DEFAULT_ABSOLUTE_ACCURACY = 1.0e-15;" ], [ "DEFAULT_RELATIVE_ACCURACY", "org.apache.commons.math3.analysis.integration", "BaseAbstractUnivariateIntegrator", "public static final double DEFAULT_RELATIVE_ACCURACY = 1.0e-6;" ], [ "DEFAULT_MIN_ITERATIONS_COUNT", "org.apache.commons.math3.analysis.integration", "BaseAbstractUnivariateIntegrator", "public static final int DEFAULT_MIN_ITERATIONS_COUNT = 3;" ], [ "DEFAULT_MAX_ITERATIONS_COUNT", "org.apache.commons.math3.analysis.integration", "BaseAbstractUnivariateIntegrator", "public static final int DEFAULT_MAX_ITERATIONS_COUNT = Integer.MAX_VALUE;" ], [ "TRAPEZOID_MAX_ITERATIONS_COUNT", "org.apache.commons.math3.analysis.integration", "TrapezoidIntegrator", "public static final int TRAPEZOID_MAX_ITERATIONS_COUNT = 64;" ], [ "DEFAULT_ABSOLUTE_ACCURACY", "org.apache.commons.math3.analysis.solvers", "BaseSecantSolver", "protected static final double DEFAULT_ABSOLUTE_ACCURACY = 1e-6;" ], [ "DEFAULT_ABSOLUTE_ACCURACY", "org.apache.commons.math3.analysis.solvers", "SecantSolver", "protected static final double DEFAULT_ABSOLUTE_ACCURACY = 1e-6;" ], [ "DEFAULT_BANDWIDTH", "org.apache.commons.math3.analysis.interpolation", "LoessInterpolator", "public static final double DEFAULT_BANDWIDTH = 0.3;" ], [ "DEFAULT_ROBUSTNESS_ITERS", "org.apache.commons.math3.analysis.interpolation", "LoessInterpolator", "public static final int DEFAULT_ROBUSTNESS_ITERS = 2;" ], [ "DEFAULT_ACCURACY", "org.apache.commons.math3.analysis.interpolation", "LoessInterpolator", "public static final double DEFAULT_ACCURACY = 1e-12;" ], [ "serialVersionUID", "org.apache.commons.math3.analysis.interpolation", "NevilleInterpolator", "static final long serialVersionUID = 3003707660147873733L;" ], [ "DEFAULT_EXTEND", "org.apache.commons.math3.analysis.interpolation", "UnivariatePeriodicInterpolator", "public static final int DEFAULT_EXTEND = 5;" ], [ "DEFAULT_MICROSPHERE_ELEMENTS", "org.apache.commons.math3.analysis.interpolation", "MicrosphereInterpolator", "public static final int DEFAULT_MICROSPHERE_ELEMENTS = 2000;" ], [ "DEFAULT_BRIGHTNESS_EXPONENT", "org.apache.commons.math3.analysis.interpolation", "MicrosphereInterpolator", "public static final int DEFAULT_BRIGHTNESS_EXPONENT = 2;" ], [ "EPSILON", "org.apache.commons.math3.util", "Precision", "public static final double EPSILON;" ], [ "SAFE_MIN", "org.apache.commons.math3.util", "Precision", "public static final double SAFE_MIN;" ], [ "FREE", "org.apache.commons.math3.util", "OpenIntToDoubleHashMap", "protected static final byte FREE = 0;" ], [ "FULL", "org.apache.commons.math3.util", "OpenIntToDoubleHashMap", "protected static final byte FULL = 1;" ], [ "REMOVED", "org.apache.commons.math3.util", "OpenIntToDoubleHashMap", "protected static final byte REMOVED = 2;" ], [ "FREE", "org.apache.commons.math3.util", "OpenIntToFieldHashMap", "protected static final byte FREE = 0;" ], [ "FULL", "org.apache.commons.math3.util", "OpenIntToFieldHashMap", "protected static final byte FULL = 1;" ], [ "REMOVED", "org.apache.commons.math3.util", "OpenIntToFieldHashMap", "protected static final byte REMOVED = 2;" ], [ "PI", "org.apache.commons.math3.util", "FastMath", "public static final double PI = 105414357.0 / 33554432.0 + 1.984187159361080883e-9;" ], [ "E", "org.apache.commons.math3.util", "FastMath", "public static final double E = 2850325.0 / 1048576.0 + 8.254840070411028747e-8;" ], [ "EXP_INT_TABLE_MAX_INDEX", "org.apache.commons.math3.util", "FastMath", "static final int EXP_INT_TABLE_MAX_INDEX = 750;" ], [ "EXP_INT_TABLE_LEN", "org.apache.commons.math3.util", "FastMath", "static final int EXP_INT_TABLE_LEN = EXP_INT_TABLE_MAX_INDEX * 2;" ], [ "LN_MANT_LEN", "org.apache.commons.math3.util", "FastMath", "static final int LN_MANT_LEN = 1024;" ], [ "EXP_FRAC_TABLE_LEN", "org.apache.commons.math3.util", "FastMath", "static final int EXP_FRAC_TABLE_LEN = 1025;" ], [ "NAN", "org.apache.commons.math3.util", "FastMath", "public static final Split NAN = new Split(Double.NaN, 0);" ], [ "POSITIVE_INFINITY", "org.apache.commons.math3.util", "FastMath", "public static final Split POSITIVE_INFINITY = new Split(Double.POSITIVE_INFINITY, 0);" ], [ "NEGATIVE_INFINITY", "org.apache.commons.math3.util", "FastMath", "public static final Split NEGATIVE_INFINITY = new Split(Double.NEGATIVE_INFINITY, 0);" ], [ "NAN", "org.apache.commons.math3.util", "Split", "public static final Split NAN = new Split(Double.NaN, 0);" ], [ "POSITIVE_INFINITY", "org.apache.commons.math3.util", "Split", "public static final Split POSITIVE_INFINITY = new Split(Double.POSITIVE_INFINITY, 0);" ], [ "NEGATIVE_INFINITY", "org.apache.commons.math3.util", "Split", "public static final Split NEGATIVE_INFINITY = new Split(Double.NEGATIVE_INFINITY, 0);" ], [ "ADDITIVE_MODE", "org.apache.commons.math3.util", "ResizableDoubleArray", "public static final int ADDITIVE_MODE = 1;" ], [ "MULTIPLICATIVE_MODE", "org.apache.commons.math3.util", "ResizableDoubleArray", "public static final int MULTIPLICATIVE_MODE = 0;" ], [ "TWO_PI", "org.apache.commons.math3.util", "MathUtils", "public static final double TWO_PI = 2 * FastMath.PI;" ], [ "PI_SQUARED", "org.apache.commons.math3.util", "MathUtils", "public static final double PI_SQUARED = FastMath.PI * FastMath.PI;" ], [ "FACTORIALS", "org.apache.commons.math3.util", "CombinatoricsUtils", "static final long[] FACTORIALS = new long[] { 1l, 1l, 2l, 6l, 24l, 120l, 720l, 5040l, 40320l, 362880l, 3628800l, 39916800l, 479001600l, 6227020800l, 87178291200l, 1307674368000l, 20922789888000l, 355687428096000l, 6402373705728000l, 121645100408832000l, 2432902008176640000l };" ], [ "STIRLING_S2", "org.apache.commons.math3.util", "CombinatoricsUtils", "static final AtomicReference<long[][]> STIRLING_S2 = new AtomicReference<long[][]>(null);" ], [ "ZERO", "org.apache.commons.math3.util", "Decimal64", "public static final Decimal64 ZERO;" ], [ "ONE", "org.apache.commons.math3.util", "Decimal64", "public static final Decimal64 ONE;" ], [ "NEGATIVE_INFINITY", "org.apache.commons.math3.util", "Decimal64", "public static final Decimal64 NEGATIVE_INFINITY;" ], [ "POSITIVE_INFINITY", "org.apache.commons.math3.util", "Decimal64", "public static final Decimal64 POSITIVE_INFINITY;" ], [ "NAN", "org.apache.commons.math3.util", "Decimal64", "public static final Decimal64 NAN;" ], [ "ZERO", "org.apache.commons.math3.util", "BigReal", "public static final BigReal ZERO = new BigReal(BigDecimal.ZERO);" ], [ "ONE", "org.apache.commons.math3.util", "BigReal", "public static final BigReal ONE = new BigReal(BigDecimal.ONE);" ], [ "IDENTITY", "org.apache.commons.math3.complex", "Quaternion", "public static final Quaternion IDENTITY = new Quaternion(1, 0, 0, 0);" ], [ "ZERO", "org.apache.commons.math3.complex", "Quaternion", "public static final Quaternion ZERO = new Quaternion(0, 0, 0, 0);" ], [ "I", "org.apache.commons.math3.complex", "Quaternion", "public static final Quaternion I = new Quaternion(0, 1, 0, 0);" ], [ "J", "org.apache.commons.math3.complex", "Quaternion", "public static final Quaternion J = new Quaternion(0, 0, 1, 0);" ], [ "K", "org.apache.commons.math3.complex", "Quaternion", "public static final Quaternion K = new Quaternion(0, 0, 0, 1);" ], [ "I", "org.apache.commons.math3.complex", "Complex", "public static final Complex I = new Complex(0.0, 1.0);" ], [ "NaN", "org.apache.commons.math3.complex", "Complex", "public static final Complex NaN = new Complex(Double.NaN, Double.NaN);" ], [ "INF", "org.apache.commons.math3.complex", "Complex", "public static final Complex INF = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);" ], [ "ONE", "org.apache.commons.math3.complex", "Complex", "public static final Complex ONE = new Complex(1.0, 0.0);" ], [ "ZERO", "org.apache.commons.math3.complex", "Complex", "public static final Complex ZERO = new Complex(0.0, 0.0);" ], [ "MINIMUM_PROBLEM_DIMENSION", "org.apache.commons.math3.optimization.direct", "BOBYQAOptimizer", "public static final int MINIMUM_PROBLEM_DIMENSION = 2;" ], [ "DEFAULT_INITIAL_RADIUS", "org.apache.commons.math3.optimization.direct", "BOBYQAOptimizer", "public static final double DEFAULT_INITIAL_RADIUS = 10.0;" ], [ "DEFAULT_STOPPING_RADIUS", "org.apache.commons.math3.optimization.direct", "BOBYQAOptimizer", "public static final double DEFAULT_STOPPING_RADIUS = 1E-8;" ], [ "DEFAULT_CHECKFEASABLECOUNT", "org.apache.commons.math3.optimization.direct", "CMAESOptimizer", "public static final int DEFAULT_CHECKFEASABLECOUNT = 0;" ], [ "DEFAULT_STOPFITNESS", "org.apache.commons.math3.optimization.direct", "CMAESOptimizer", "public static final double DEFAULT_STOPFITNESS = 0;" ], [ "DEFAULT_ISACTIVECMA", "org.apache.commons.math3.optimization.direct", "CMAESOptimizer", "public static final boolean DEFAULT_ISACTIVECMA = true;" ], [ "DEFAULT_MAXITERATIONS", "org.apache.commons.math3.optimization.direct", "CMAESOptimizer", "public static final int DEFAULT_MAXITERATIONS = 30000;" ], [ "DEFAULT_DIAGONALONLY", "org.apache.commons.math3.optimization.direct", "CMAESOptimizer", "public static final int DEFAULT_DIAGONALONLY = 0;" ], [ "DEFAULT_RANDOMGENERATOR", "org.apache.commons.math3.optimization.direct", "CMAESOptimizer", "public static final RandomGenerator DEFAULT_RANDOMGENERATOR = new MersenneTwister();" ], [ "DEFAULT_MAX_ITERATIONS", "org.apache.commons.math3.optimization.linear", "AbstractLinearOptimizer", "public static final int DEFAULT_MAX_ITERATIONS = 100;" ], [ "DEFAULT_FORMAT", "org.apache.commons.math3.linear", "MatrixUtils", "public static final RealMatrixFormat DEFAULT_FORMAT = RealMatrixFormat.getInstance();" ], [ "OCTAVE_FORMAT", "org.apache.commons.math3.linear", "MatrixUtils", "public static final RealMatrixFormat OCTAVE_FORMAT = new RealMatrixFormat(\"[\", \"]\", \"\", \"\", \"; \", \", \");" ], [ "DEFAULT_ZERO_TOLERANCE", "org.apache.commons.math3.linear", "OpenMapRealVector", "public static final double DEFAULT_ZERO_TOLERANCE = 1.0e-12;" ], [ "BLOCK_SIZE", "org.apache.commons.math3.linear", "BlockFieldMatrix", "public static final int BLOCK_SIZE = 36;" ], [ "OPERATOR", "org.apache.commons.math3.linear", "ConjugateGradient", "public static final String OPERATOR = \"operator\";" ], [ "VECTOR", "org.apache.commons.math3.linear", "ConjugateGradient", "public static final String VECTOR = \"vector\";" ], [ "DEFAULT_RELATIVE_SYMMETRY_THRESHOLD", "org.apache.commons.math3.linear", "CholeskyDecomposition", "public static final double DEFAULT_RELATIVE_SYMMETRY_THRESHOLD = 1.0e-15;" ], [ "DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD", "org.apache.commons.math3.linear", "CholeskyDecomposition", "public static final double DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD = 1.0e-10;" ], [ "BLOCK_SIZE", "org.apache.commons.math3.linear", "BlockRealMatrix", "public static final int BLOCK_SIZE = 52;" ], [ "CBRT_MACH_PREC", "org.apache.commons.math3.linear", "SymmLQ", "static final double CBRT_MACH_PREC;" ], [ "MACH_PREC", "org.apache.commons.math3.linear", "SymmLQ", "static final double MACH_PREC;" ], [ "CBRT_MACH_PREC", "org.apache.commons.math3.linear", "State", "static final double CBRT_MACH_PREC;" ], [ "MACH_PREC", "org.apache.commons.math3.linear", "State", "static final double MACH_PREC;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "CauchyDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "SOLVER_DEFAULT_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "AbstractRealDistribution", "public static final double SOLVER_DEFAULT_ABSOLUTE_ACCURACY = 1e-6;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "TDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "ChiSquaredDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "BetaDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "NormalDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "UniformRealDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "WeibullDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "NakagamiDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "ExponentialDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "LogNormalDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "ParetoDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "FDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_MAX_ITERATIONS", "org.apache.commons.math3.distribution", "PoissonDistribution", "public static final int DEFAULT_MAX_ITERATIONS = 10000000;" ], [ "DEFAULT_EPSILON", "org.apache.commons.math3.distribution", "PoissonDistribution", "public static final double DEFAULT_EPSILON = 1e-12;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "GammaDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_ULPS", "org.apache.commons.math3.optim.linear", "SimplexSolver", "static final int DEFAULT_ULPS = 10;" ], [ "DEFAULT_CUT_OFF", "org.apache.commons.math3.optim.linear", "SimplexSolver", "static final double DEFAULT_CUT_OFF = 1e-10;" ], [ "MINIMUM_PROBLEM_DIMENSION", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv", "BOBYQAOptimizer", "public static final int MINIMUM_PROBLEM_DIMENSION = 2;" ], [ "DEFAULT_INITIAL_RADIUS", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv", "BOBYQAOptimizer", "public static final double DEFAULT_INITIAL_RADIUS = 10.0;" ], [ "DEFAULT_STOPPING_RADIUS", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv", "BOBYQAOptimizer", "public static final double DEFAULT_STOPPING_RADIUS = 1E-8;" ], [ "GAMMA", "org.apache.commons.math3.special", "Gamma", "public static final double GAMMA = 0.577215664901532860606512090082;" ], [ "LANCZOS_G", "org.apache.commons.math3.special", "Gamma", "public static final double LANCZOS_G = 607.0 / 128.0;" ], [ "DEFAULT_NAN_STRATEGY", "org.apache.commons.math3.stat.ranking", "NaturalRanking", "public static final NaNStrategy DEFAULT_NAN_STRATEGY = NaNStrategy.FAILED;" ], [ "DEFAULT_TIES_STRATEGY", "org.apache.commons.math3.stat.ranking", "NaturalRanking", "public static final TiesStrategy DEFAULT_TIES_STRATEGY = TiesStrategy.AVERAGE;" ], [ "MAXIMUM_PARTIAL_SUM_COUNT", "org.apache.commons.math3.stat.inference", "KolmogorovSmirnovTest", "protected static final int MAXIMUM_PARTIAL_SUM_COUNT = 100000;" ], [ "KS_SUM_CAUCHY_CRITERION", "org.apache.commons.math3.stat.inference", "KolmogorovSmirnovTest", "protected static final double KS_SUM_CAUCHY_CRITERION = 1E-20;" ], [ "PG_SUM_RELATIVE_ERROR", "org.apache.commons.math3.stat.inference", "KolmogorovSmirnovTest", "protected static final double PG_SUM_RELATIVE_ERROR = 1.0e-10;" ], [ "SMALL_SAMPLE_PRODUCT", "org.apache.commons.math3.stat.inference", "KolmogorovSmirnovTest", "protected static final int SMALL_SAMPLE_PRODUCT = 200;" ], [ "LARGE_SAMPLE_PRODUCT", "org.apache.commons.math3.stat.inference", "KolmogorovSmirnovTest", "protected static final int LARGE_SAMPLE_PRODUCT = 10000;" ], [ "MONTE_CARLO_ITERATIONS", "org.apache.commons.math3.stat.inference", "KolmogorovSmirnovTest", "protected static final int MONTE_CARLO_ITERATIONS = 1000000;" ], [ "INFINITE_WINDOW", "org.apache.commons.math3.stat.descriptive", "DescriptiveStatistics", "public static final int INFINITE_WINDOW = -1;" ], [ "UPSIDE_VARIANCE", "org.apache.commons.math3.stat.descriptive.moment", "SemiVariance", "public static final Direction UPSIDE_VARIANCE = Direction.UPSIDE;" ], [ "DOWNSIDE_VARIANCE", "org.apache.commons.math3.stat.descriptive.moment", "SemiVariance", "public static final Direction DOWNSIDE_VARIANCE = Direction.DOWNSIDE;" ], [ "COMPARATOR", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "static final Comparator<PairNeuronDouble> COMPARATOR = new Comparator<PairNeuronDouble>() {\n\n    /**\n     * {@inheritDoc}\n     */\n    public int compare(PairNeuronDouble o1, PairNeuronDouble o2) {\n        return Double.compare(o1.value, o2.value);\n    }\n};" ], [ "COMPARATOR", "org.apache.commons.math3.ml.neuralnet", "PairNeuronDouble", "static final Comparator<PairNeuronDouble> COMPARATOR = new Comparator<PairNeuronDouble>() {\n\n    /**\n     * {@inheritDoc}\n     */\n    public int compare(PairNeuronDouble o1, PairNeuronDouble o2) {\n        return Double.compare(o1.value, o2.value);\n    }\n};" ], [ "RADIX", "org.apache.commons.math3.dfp", "Dfp", "public static final int RADIX = 10000;" ], [ "MIN_EXP", "org.apache.commons.math3.dfp", "Dfp", "public static final int MIN_EXP = -32767;" ], [ "MAX_EXP", "org.apache.commons.math3.dfp", "Dfp", "public static final int MAX_EXP = 32768;" ], [ "ERR_SCALE", "org.apache.commons.math3.dfp", "Dfp", "public static final int ERR_SCALE = 32760;" ], [ "FINITE", "org.apache.commons.math3.dfp", "Dfp", "public static final byte FINITE = 0;" ], [ "INFINITE", "org.apache.commons.math3.dfp", "Dfp", "public static final byte INFINITE = 1;" ], [ "SNAN", "org.apache.commons.math3.dfp", "Dfp", "public static final byte SNAN = 2;" ], [ "QNAN", "org.apache.commons.math3.dfp", "Dfp", "public static final byte QNAN = 3;" ], [ "FLAG_INVALID", "org.apache.commons.math3.dfp", "DfpField", "public static final int FLAG_INVALID = 1;" ], [ "FLAG_DIV_ZERO", "org.apache.commons.math3.dfp", "DfpField", "public static final int FLAG_DIV_ZERO = 2;" ], [ "FLAG_OVERFLOW", "org.apache.commons.math3.dfp", "DfpField", "public static final int FLAG_OVERFLOW = 4;" ], [ "FLAG_UNDERFLOW", "org.apache.commons.math3.dfp", "DfpField", "public static final int FLAG_UNDERFLOW = 8;" ], [ "FLAG_INEXACT", "org.apache.commons.math3.dfp", "DfpField", "public static final int FLAG_INEXACT = 16;" ], [ "DEFAULT_PREFIX", "org.apache.commons.math3.geometry", "VectorFormat", "public static final String DEFAULT_PREFIX = \"{\";" ], [ "DEFAULT_SUFFIX", "org.apache.commons.math3.geometry", "VectorFormat", "public static final String DEFAULT_SUFFIX = \"}\";" ], [ "DEFAULT_SEPARATOR", "org.apache.commons.math3.geometry", "VectorFormat", "public static final String DEFAULT_SEPARATOR = \"; \";" ], [ "XYZ", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder XYZ = new RotationOrder(\"XYZ\", Vector3D.PLUS_I, Vector3D.PLUS_J, Vector3D.PLUS_K);" ], [ "XZY", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder XZY = new RotationOrder(\"XZY\", Vector3D.PLUS_I, Vector3D.PLUS_K, Vector3D.PLUS_J);" ], [ "YXZ", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder YXZ = new RotationOrder(\"YXZ\", Vector3D.PLUS_J, Vector3D.PLUS_I, Vector3D.PLUS_K);" ], [ "YZX", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder YZX = new RotationOrder(\"YZX\", Vector3D.PLUS_J, Vector3D.PLUS_K, Vector3D.PLUS_I);" ], [ "ZXY", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder ZXY = new RotationOrder(\"ZXY\", Vector3D.PLUS_K, Vector3D.PLUS_I, Vector3D.PLUS_J);" ], [ "ZYX", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder ZYX = new RotationOrder(\"ZYX\", Vector3D.PLUS_K, Vector3D.PLUS_J, Vector3D.PLUS_I);" ], [ "XYX", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder XYX = new RotationOrder(\"XYX\", Vector3D.PLUS_I, Vector3D.PLUS_J, Vector3D.PLUS_I);" ], [ "XZX", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder XZX = new RotationOrder(\"XZX\", Vector3D.PLUS_I, Vector3D.PLUS_K, Vector3D.PLUS_I);" ], [ "YXY", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder YXY = new RotationOrder(\"YXY\", Vector3D.PLUS_J, Vector3D.PLUS_I, Vector3D.PLUS_J);" ], [ "YZY", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder YZY = new RotationOrder(\"YZY\", Vector3D.PLUS_J, Vector3D.PLUS_K, Vector3D.PLUS_J);" ], [ "ZXZ", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder ZXZ = new RotationOrder(\"ZXZ\", Vector3D.PLUS_K, Vector3D.PLUS_I, Vector3D.PLUS_K);" ], [ "ZYZ", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder ZYZ = new RotationOrder(\"ZYZ\", Vector3D.PLUS_K, Vector3D.PLUS_J, Vector3D.PLUS_K);" ], [ "IDENTITY", "org.apache.commons.math3.geometry.euclidean.threed", "Rotation", "public static final Rotation IDENTITY = new Rotation(1.0, 0.0, 0.0, 0.0, false);" ], [ "ZERO", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D ZERO = new Vector3D(0, 0, 0);" ], [ "PLUS_I", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D PLUS_I = new Vector3D(1, 0, 0);" ], [ "MINUS_I", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D MINUS_I = new Vector3D(-1, 0, 0);" ], [ "PLUS_J", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D PLUS_J = new Vector3D(0, 1, 0);" ], [ "MINUS_J", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D MINUS_J = new Vector3D(0, -1, 0);" ], [ "PLUS_K", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D PLUS_K = new Vector3D(0, 0, 1);" ], [ "MINUS_K", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D MINUS_K = new Vector3D(0, 0, -1);" ], [ "NaN", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D NaN = new Vector3D(Double.NaN, Double.NaN, Double.NaN);" ], [ "POSITIVE_INFINITY", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D POSITIVE_INFINITY = new Vector3D(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);" ], [ "NEGATIVE_INFINITY", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D NEGATIVE_INFINITY = new Vector3D(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);" ], [ "ZERO", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static final Vector1D ZERO = new Vector1D(0.0);" ], [ "ONE", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static final Vector1D ONE = new Vector1D(1.0);" ], [ "NaN", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static final Vector1D NaN = new Vector1D(Double.NaN);" ], [ "POSITIVE_INFINITY", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static final Vector1D POSITIVE_INFINITY = new Vector1D(Double.POSITIVE_INFINITY);" ], [ "NEGATIVE_INFINITY", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static final Vector1D NEGATIVE_INFINITY = new Vector1D(Double.NEGATIVE_INFINITY);" ], [ "ZERO", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static final Vector2D ZERO = new Vector2D(0, 0);" ], [ "NaN", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static final Vector2D NaN = new Vector2D(Double.NaN, Double.NaN);" ], [ "POSITIVE_INFINITY", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static final Vector2D POSITIVE_INFINITY = new Vector2D(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);" ], [ "NEGATIVE_INFINITY", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static final Vector2D NEGATIVE_INFINITY = new Vector2D(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);" ], [ "NaN", "org.apache.commons.math3.geometry.spherical.oned", "S1Point", "public static final S1Point NaN = new S1Point(Double.NaN, Vector2D.NaN);" ], [ "PLUS_I", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point PLUS_I = new S2Point(0, 0.5 * FastMath.PI, Vector3D.PLUS_I);" ], [ "PLUS_J", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point PLUS_J = new S2Point(0.5 * FastMath.PI, 0.5 * FastMath.PI, Vector3D.PLUS_J);" ], [ "PLUS_K", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point PLUS_K = new S2Point(0, 0, Vector3D.PLUS_K);" ], [ "MINUS_I", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point MINUS_I = new S2Point(FastMath.PI, 0.5 * FastMath.PI, Vector3D.MINUS_I);" ], [ "MINUS_J", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point MINUS_J = new S2Point(1.5 * FastMath.PI, 0.5 * FastMath.PI, Vector3D.MINUS_J);" ], [ "MINUS_K", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point MINUS_K = new S2Point(0, FastMath.PI, Vector3D.MINUS_K);" ], [ "NaN", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point NaN = new S2Point(Double.NaN, Double.NaN, Vector3D.NaN);" ], [ "DIGEST_MODE", "org.apache.commons.math3.random", "ValueServer", "public static final int DIGEST_MODE = 0;" ], [ "REPLAY_MODE", "org.apache.commons.math3.random", "ValueServer", "public static final int REPLAY_MODE = 1;" ], [ "UNIFORM_MODE", "org.apache.commons.math3.random", "ValueServer", "public static final int UNIFORM_MODE = 2;" ], [ "EXPONENTIAL_MODE", "org.apache.commons.math3.random", "ValueServer", "public static final int EXPONENTIAL_MODE = 3;" ], [ "GAUSSIAN_MODE", "org.apache.commons.math3.random", "ValueServer", "public static final int GAUSSIAN_MODE = 4;" ], [ "CONSTANT_MODE", "org.apache.commons.math3.random", "ValueServer", "public static final int CONSTANT_MODE = 5;" ], [ "DEFAULT_BIN_COUNT", "org.apache.commons.math3.random", "EmpiricalDistribution", "public static final int DEFAULT_BIN_COUNT = 1000;" ], [ "TWO", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction TWO = new Fraction(2, 1);" ], [ "ONE", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction ONE = new Fraction(1, 1);" ], [ "ZERO", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction ZERO = new Fraction(0, 1);" ], [ "FOUR_FIFTHS", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction FOUR_FIFTHS = new Fraction(4, 5);" ], [ "ONE_FIFTH", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction ONE_FIFTH = new Fraction(1, 5);" ], [ "ONE_HALF", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction ONE_HALF = new Fraction(1, 2);" ], [ "ONE_QUARTER", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction ONE_QUARTER = new Fraction(1, 4);" ], [ "ONE_THIRD", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction ONE_THIRD = new Fraction(1, 3);" ], [ "THREE_FIFTHS", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction THREE_FIFTHS = new Fraction(3, 5);" ], [ "THREE_QUARTERS", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction THREE_QUARTERS = new Fraction(3, 4);" ], [ "TWO_FIFTHS", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction TWO_FIFTHS = new Fraction(2, 5);" ], [ "TWO_QUARTERS", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction TWO_QUARTERS = new Fraction(2, 4);" ], [ "TWO_THIRDS", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction TWO_THIRDS = new Fraction(2, 3);" ], [ "MINUS_ONE", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction MINUS_ONE = new Fraction(-1, 1);" ], [ "TWO", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction TWO = new BigFraction(2);" ], [ "ONE", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction ONE = new BigFraction(1);" ], [ "ZERO", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction ZERO = new BigFraction(0);" ], [ "MINUS_ONE", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction MINUS_ONE = new BigFraction(-1);" ], [ "FOUR_FIFTHS", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction FOUR_FIFTHS = new BigFraction(4, 5);" ], [ "ONE_FIFTH", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction ONE_FIFTH = new BigFraction(1, 5);" ], [ "ONE_HALF", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction ONE_HALF = new BigFraction(1, 2);" ], [ "ONE_QUARTER", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction ONE_QUARTER = new BigFraction(1, 4);" ], [ "ONE_THIRD", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction ONE_THIRD = new BigFraction(1, 3);" ], [ "THREE_FIFTHS", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction THREE_FIFTHS = new BigFraction(3, 5);" ], [ "THREE_QUARTERS", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction THREE_QUARTERS = new BigFraction(3, 4);" ], [ "TWO_FIFTHS", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction TWO_FIFTHS = new BigFraction(2, 5);" ], [ "TWO_QUARTERS", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction TWO_QUARTERS = new BigFraction(2, 4);" ], [ "TWO_THIRDS", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction TWO_THIRDS = new BigFraction(2, 3);" ], [ "INTEGER_ZERO", "org.apache.commons.math3.exception", "MathIllegalNumberException", "protected static final Integer INTEGER_ZERO = Integer.valueOf(0);" ], [ "serialVersionUID", "org.apache.commons.math3.transform", "FastSineTransformer", "static final long serialVersionUID = 20120211L;" ], [ "serialVersionUID", "org.apache.commons.math3.transform", "FastFourierTransformer", "static final long serialVersionUID = 20120210L;" ], [ "serialVersionUID", "org.apache.commons.math3.transform", "FastCosineTransformer", "static final long serialVersionUID = 20120212L;" ], [ "serialVersionUID", "org.apache.commons.math3.transform", "FastHadamardTransformer", "static final long serialVersionUID = 20120211L;" ] ],
  "tokensMethodJavadocValues" : [ ],
  "tokensMethodArguments" : [ [ "d", "org.apache.commons.math3.dfp", "Dfp" ] ],
  "tokensMethodVariablesNonPrivateNonStaticNonVoidMethods" : [ [ "linearCombination", "org.apache.commons.math3.dfp", "Dfp", "public Dfp linearCombination(final double a1, final Dfp b1, final double a2, final Dfp b2, final double a3, final Dfp b3)" ], [ "abs", "org.apache.commons.math3", "RealFieldElement", "public abstract T abs()" ], [ "round", "org.apache.commons.math3.dfp", "Dfp", "public long round()" ], [ "getRadixDigits", "org.apache.commons.math3.dfp", "Dfp", "public int getRadixDigits()" ], [ "copySign", "org.apache.commons.math3", "RealFieldElement", "public abstract T copySign(double arg0)" ], [ "exp", "org.apache.commons.math3", "RealFieldElement", "public abstract T exp()" ], [ "rootN", "org.apache.commons.math3.dfp", "Dfp", "public Dfp rootN(final int n)" ], [ "newInstance", "org.apache.commons.math3.dfp", "Dfp", "public Dfp newInstance(final String s)" ], [ "cbrt", "org.apache.commons.math3", "RealFieldElement", "public abstract T cbrt()" ], [ "acos", "org.apache.commons.math3", "RealFieldElement", "public abstract T acos()" ], [ "isZero", "org.apache.commons.math3.dfp", "Dfp", "public boolean isZero()" ], [ "floor", "org.apache.commons.math3.dfp", "Dfp", "public Dfp floor()" ], [ "linearCombination", "org.apache.commons.math3.dfp", "Dfp", "public Dfp linearCombination(final double a1, final Dfp b1, final double a2, final Dfp b2)" ], [ "log1p", "org.apache.commons.math3", "RealFieldElement", "public abstract T log1p()" ], [ "remainder", "org.apache.commons.math3.dfp", "Dfp", "public Dfp remainder(final Dfp d)" ], [ "align", "org.apache.commons.math3.dfp", "Dfp", "protected int align(int e)" ], [ "divide", "org.apache.commons.math3", "RealFieldElement", "public abstract T divide(double arg0)" ], [ "getClass", "java.lang", "Object", "public final native Class<? extends Object> getClass()" ], [ "ceil", "org.apache.commons.math3.dfp", "Dfp", "public Dfp ceil()" ], [ "negativeOrNull", "org.apache.commons.math3.dfp", "Dfp", "public boolean negativeOrNull()" ], [ "unequal", "org.apache.commons.math3.dfp", "Dfp", "public boolean unequal(final Dfp x)" ], [ "newInstance", "org.apache.commons.math3.dfp", "Dfp", "public Dfp newInstance(final Dfp d)" ], [ "linearCombination", "org.apache.commons.math3", "RealFieldElement", "public abstract T linearCombination(T arg0, T arg1, T arg2, T arg3, T arg4, T arg5, T arg6, T arg7)" ], [ "remainder", "org.apache.commons.math3.dfp", "Dfp", "public Dfp remainder(final double a)" ], [ "acos", "org.apache.commons.math3.dfp", "Dfp", "public Dfp acos()" ], [ "atanh", "org.apache.commons.math3", "RealFieldElement", "public abstract T atanh()" ], [ "greaterThan", "org.apache.commons.math3.dfp", "Dfp", "public boolean greaterThan(final Dfp x)" ], [ "linearCombination", "org.apache.commons.math3", "RealFieldElement", "public abstract T linearCombination(T arg0, T arg1, T arg2, T arg3)" ], [ "atan", "org.apache.commons.math3.dfp", "Dfp", "public Dfp atan()" ], [ "asin", "org.apache.commons.math3", "RealFieldElement", "public abstract T asin()" ], [ "log10K", "org.apache.commons.math3.dfp", "Dfp", "public int log10K()" ], [ "isInfinite", "org.apache.commons.math3.dfp", "Dfp", "public boolean isInfinite()" ], [ "linearCombination", "org.apache.commons.math3.dfp", "Dfp", "public Dfp linearCombination(final Dfp a1, final Dfp b1, final Dfp a2, final Dfp b2, final Dfp a3, final Dfp b3, final Dfp a4, final Dfp b4)" ], [ "tanh", "org.apache.commons.math3", "RealFieldElement", "public abstract T tanh()" ], [ "linearCombination", "org.apache.commons.math3", "RealFieldElement", "public abstract T linearCombination(double arg0, T arg1, double arg2, T arg3)" ], [ "signum", "org.apache.commons.math3", "RealFieldElement", "public abstract T signum()" ], [ "asinh", "org.apache.commons.math3.dfp", "Dfp", "public Dfp asinh()" ], [ "pow", "org.apache.commons.math3.dfp", "Dfp", "public Dfp pow(final Dfp e)" ], [ "acosh", "org.apache.commons.math3", "RealFieldElement", "public abstract T acosh()" ], [ "tan", "org.apache.commons.math3", "RealFieldElement", "public abstract T tan()" ], [ "cos", "org.apache.commons.math3", "RealFieldElement", "public abstract T cos()" ], [ "negate", "org.apache.commons.math3.dfp", "Dfp", "public Dfp negate()" ], [ "newInstance", "org.apache.commons.math3.dfp", "Dfp", "public Dfp newInstance(final byte x)" ], [ "expm1", "org.apache.commons.math3.dfp", "Dfp", "public Dfp expm1()" ], [ "multiply", "org.apache.commons.math3.dfp", "Dfp", "public Dfp multiply(final Dfp x)" ], [ "atan2", "org.apache.commons.math3.dfp", "Dfp", "public Dfp atan2(final Dfp x) throws DimensionMismatchException" ], [ "pow", "org.apache.commons.math3", "RealFieldElement", "public abstract T pow(T arg0) throws DimensionMismatchException" ], [ "classify", "org.apache.commons.math3.dfp", "Dfp", "public int classify()" ], [ "exp", "org.apache.commons.math3.dfp", "Dfp", "public Dfp exp()" ], [ "multiply", "org.apache.commons.math3.dfp", "Dfp", "public Dfp multiply(final double a)" ], [ "signum", "org.apache.commons.math3.dfp", "Dfp", "public Dfp signum()" ], [ "pow", "org.apache.commons.math3.dfp", "Dfp", "public Dfp pow(final double p)" ], [ "sinh", "org.apache.commons.math3", "RealFieldElement", "public abstract T sinh()" ], [ "trunc", "org.apache.commons.math3.dfp", "Dfp", "protected Dfp trunc(final DfpField.RoundingMode rmode)" ], [ "tanh", "org.apache.commons.math3.dfp", "Dfp", "public Dfp tanh()" ], [ "equals", "org.apache.commons.math3.dfp", "Dfp", "public boolean equals(final Object other)" ], [ "add", "org.apache.commons.math3.dfp", "Dfp", "public Dfp add(final Dfp x)" ], [ "linearCombination", "org.apache.commons.math3.dfp", "Dfp", "public Dfp linearCombination(final double a1, final Dfp b1, final double a2, final Dfp b2, final double a3, final Dfp b3, final double a4, final Dfp b4)" ], [ "subtract", "org.apache.commons.math3", "RealFieldElement", "public abstract T subtract(double arg0)" ], [ "complement", "org.apache.commons.math3.dfp", "Dfp", "protected int complement(int extra)" ], [ "linearCombination", "org.apache.commons.math3", "RealFieldElement", "public abstract T linearCombination(double arg0, T arg1, double arg2, T arg3, double arg4, T arg5, double arg6, T arg7)" ], [ "divide", "org.apache.commons.math3.dfp", "Dfp", "public Dfp divide(int divisor)" ], [ "getOne", "org.apache.commons.math3.dfp", "Dfp", "public Dfp getOne()" ], [ "power10", "org.apache.commons.math3.dfp", "Dfp", "public Dfp power10(final int e)" ], [ "multiply", "org.apache.commons.math3", "RealFieldElement", "public abstract T multiply(double arg0)" ], [ "getTwo", "org.apache.commons.math3.dfp", "Dfp", "public Dfp getTwo()" ], [ "cosh", "org.apache.commons.math3", "RealFieldElement", "public abstract T cosh()" ], [ "linearCombination", "org.apache.commons.math3.dfp", "Dfp", "public Dfp linearCombination(final double[] a, final Dfp[] b) throws DimensionMismatchException" ], [ "log", "org.apache.commons.math3.dfp", "Dfp", "public Dfp log()" ], [ "newInstance", "org.apache.commons.math3.dfp", "Dfp", "public Dfp newInstance(final long x)" ], [ "rint", "org.apache.commons.math3", "RealFieldElement", "public abstract T rint()" ], [ "ceil", "org.apache.commons.math3", "RealFieldElement", "public abstract T ceil()" ], [ "subtract", "org.apache.commons.math3.dfp", "Dfp", "public Dfp subtract(final double a)" ], [ "hypot", "org.apache.commons.math3.dfp", "Dfp", "public Dfp hypot(final Dfp y)" ], [ "add", "org.apache.commons.math3.dfp", "Dfp", "public Dfp add(final double a)" ], [ "cbrt", "org.apache.commons.math3.dfp", "Dfp", "public Dfp cbrt()" ], [ "linearCombination", "org.apache.commons.math3", "RealFieldElement", "public abstract T linearCombination(T arg0, T arg1, T arg2, T arg3, T arg4, T arg5)" ], [ "toDouble", "org.apache.commons.math3.dfp", "Dfp", "public double toDouble()" ], [ "copySign", "org.apache.commons.math3.dfp", "Dfp", "public Dfp copySign(final Dfp s)" ], [ "strictlyPositive", "org.apache.commons.math3.dfp", "Dfp", "public boolean strictlyPositive()" ], [ "log1p", "org.apache.commons.math3.dfp", "Dfp", "public Dfp log1p()" ], [ "round", "org.apache.commons.math3.dfp", "Dfp", "protected int round(int n)" ], [ "strictlyNegative", "org.apache.commons.math3.dfp", "Dfp", "public boolean strictlyNegative()" ], [ "subtract", "org.apache.commons.math3.dfp", "Dfp", "public Dfp subtract(final Dfp x)" ], [ "cosh", "org.apache.commons.math3.dfp", "Dfp", "public Dfp cosh()" ], [ "newInstance", "org.apache.commons.math3.dfp", "Dfp", "public Dfp newInstance()" ], [ "multiply", "org.apache.commons.math3", "FieldElement", "public abstract T multiply(T arg0) throws NullArgumentException" ], [ "scalb", "org.apache.commons.math3", "RealFieldElement", "public abstract T scalb(int arg0)" ], [ "log10", "org.apache.commons.math3.dfp", "Dfp", "public int log10()" ], [ "multiply", "org.apache.commons.math3", "FieldElement", "public abstract T multiply(int arg0)" ], [ "add", "org.apache.commons.math3", "FieldElement", "public abstract T add(T arg0) throws NullArgumentException" ], [ "asinh", "org.apache.commons.math3", "RealFieldElement", "public abstract T asinh()" ], [ "sqrt", "org.apache.commons.math3", "RealFieldElement", "public abstract T sqrt()" ], [ "add", "org.apache.commons.math3", "RealFieldElement", "public abstract T add(double arg0)" ], [ "rootN", "org.apache.commons.math3", "RealFieldElement", "public abstract T rootN(int arg0)" ], [ "acosh", "org.apache.commons.math3.dfp", "Dfp", "public Dfp acosh()" ], [ "rint", "org.apache.commons.math3.dfp", "Dfp", "public Dfp rint()" ], [ "atan2", "org.apache.commons.math3", "RealFieldElement", "public abstract T atan2(T arg0) throws DimensionMismatchException" ], [ "positiveOrNull", "org.apache.commons.math3.dfp", "Dfp", "public boolean positiveOrNull()" ], [ "remainder", "org.apache.commons.math3", "RealFieldElement", "public abstract T remainder(T arg0) throws DimensionMismatchException" ], [ "getZero", "org.apache.commons.math3.dfp", "Dfp", "public Dfp getZero()" ], [ "dotrap", "org.apache.commons.math3.dfp", "Dfp", "public Dfp dotrap(int type, String what, Dfp oper, Dfp result)" ], [ "dfp2sci", "org.apache.commons.math3.dfp", "Dfp", "protected String dfp2sci()" ], [ "divide", "org.apache.commons.math3.dfp", "Dfp", "public Dfp divide(Dfp divisor)" ], [ "tan", "org.apache.commons.math3.dfp", "Dfp", "public Dfp tan()" ], [ "getField", "org.apache.commons.math3", "FieldElement", "public abstract Field<T> getField()" ], [ "asin", "org.apache.commons.math3.dfp", "Dfp", "public Dfp asin()" ], [ "pow", "org.apache.commons.math3", "RealFieldElement", "public abstract T pow(double arg0)" ], [ "linearCombination", "org.apache.commons.math3", "RealFieldElement", "public abstract T linearCombination(double[] arg0, T[] arg1) throws DimensionMismatchException" ], [ "copySign", "org.apache.commons.math3", "RealFieldElement", "public abstract T copySign(T arg0)" ], [ "copySign", "org.apache.commons.math3.dfp", "Dfp", "public Dfp copySign(final double s)" ], [ "reciprocal", "org.apache.commons.math3.dfp", "Dfp", "public Dfp reciprocal()" ], [ "divide", "org.apache.commons.math3", "FieldElement", "public abstract T divide(T arg0) throws NullArgumentException, MathArithmeticException" ], [ "intValue", "org.apache.commons.math3.dfp", "Dfp", "public int intValue()" ], [ "dfp2string", "org.apache.commons.math3.dfp", "Dfp", "protected String dfp2string()" ], [ "hypot", "org.apache.commons.math3", "RealFieldElement", "public abstract T hypot(T arg0) throws DimensionMismatchException" ], [ "toSplitDouble", "org.apache.commons.math3.dfp", "Dfp", "public double[] toSplitDouble()" ], [ "atanh", "org.apache.commons.math3.dfp", "Dfp", "public Dfp atanh()" ], [ "atan", "org.apache.commons.math3", "RealFieldElement", "public abstract T atan()" ], [ "pow", "org.apache.commons.math3.dfp", "Dfp", "public Dfp pow(final int n)" ], [ "nextAfter", "org.apache.commons.math3.dfp", "Dfp", "public Dfp nextAfter(final Dfp x)" ], [ "scalb", "org.apache.commons.math3.dfp", "Dfp", "public Dfp scalb(final int n)" ], [ "sinh", "org.apache.commons.math3.dfp", "Dfp", "public Dfp sinh()" ], [ "lessThan", "org.apache.commons.math3.dfp", "Dfp", "public boolean lessThan(final Dfp x)" ], [ "power10K", "org.apache.commons.math3.dfp", "Dfp", "public Dfp power10K(final int e)" ], [ "newInstance", "org.apache.commons.math3.dfp", "Dfp", "public Dfp newInstance(final double x)" ], [ "linearCombination", "org.apache.commons.math3.dfp", "Dfp", "public Dfp linearCombination(final Dfp a1, final Dfp b1, final Dfp a2, final Dfp b2, final Dfp a3, final Dfp b3)" ], [ "pow", "org.apache.commons.math3", "RealFieldElement", "public abstract T pow(int arg0)" ], [ "sin", "org.apache.commons.math3.dfp", "Dfp", "public Dfp sin()" ], [ "floor", "org.apache.commons.math3", "RealFieldElement", "public abstract T floor()" ], [ "linearCombination", "org.apache.commons.math3", "RealFieldElement", "public abstract T linearCombination(T[] arg0, T[] arg1) throws DimensionMismatchException" ], [ "intLog10", "org.apache.commons.math3.dfp", "Dfp", "public int intLog10()" ], [ "cos", "org.apache.commons.math3.dfp", "Dfp", "public Dfp cos()" ], [ "linearCombination", "org.apache.commons.math3", "RealFieldElement", "public abstract T linearCombination(double arg0, T arg1, double arg2, T arg3, double arg4, T arg5)" ], [ "hashCode", "org.apache.commons.math3.dfp", "Dfp", "public int hashCode()" ], [ "newInstance", "org.apache.commons.math3.dfp", "Dfp", "public Dfp newInstance(final int x)" ], [ "multiply", "org.apache.commons.math3.dfp", "Dfp", "public Dfp multiply(final int x)" ], [ "isNaN", "org.apache.commons.math3.dfp", "Dfp", "public boolean isNaN()" ], [ "remainder", "org.apache.commons.math3", "RealFieldElement", "public abstract T remainder(double arg0)" ], [ "expm1", "org.apache.commons.math3", "RealFieldElement", "public abstract T expm1()" ], [ "linearCombination", "org.apache.commons.math3.dfp", "Dfp", "public Dfp linearCombination(final Dfp a1, final Dfp b1, final Dfp a2, final Dfp b2)" ], [ "getReal", "org.apache.commons.math3.dfp", "Dfp", "public double getReal()" ], [ "clone", "java.lang", "Object", "protected native Object clone() throws CloneNotSupportedException" ], [ "getField", "org.apache.commons.math3.dfp", "Dfp", "public DfpField getField()" ], [ "abs", "org.apache.commons.math3.dfp", "Dfp", "public Dfp abs()" ], [ "toString", "org.apache.commons.math3.dfp", "Dfp", "public String toString()" ], [ "sqrt", "org.apache.commons.math3.dfp", "Dfp", "public Dfp sqrt()" ], [ "reciprocal", "org.apache.commons.math3", "RealFieldElement", "public abstract T reciprocal()" ], [ "divide", "org.apache.commons.math3.dfp", "Dfp", "public Dfp divide(final double a)" ], [ "newInstance", "org.apache.commons.math3.dfp", "Dfp", "public Dfp newInstance(final byte sig, final byte code)" ], [ "sin", "org.apache.commons.math3", "RealFieldElement", "public abstract T sin()" ], [ "negate", "org.apache.commons.math3", "FieldElement", "public abstract T negate()" ], [ "log", "org.apache.commons.math3", "RealFieldElement", "public abstract T log()" ], [ "linearCombination", "org.apache.commons.math3.dfp", "Dfp", "public Dfp linearCombination(final Dfp[] a, final Dfp[] b) throws DimensionMismatchException" ], [ "subtract", "org.apache.commons.math3", "FieldElement", "public abstract T subtract(T arg0) throws NullArgumentException" ], [ "trap", "org.apache.commons.math3.dfp", "Dfp", "protected Dfp trap(int type, String what, Dfp oper, Dfp def, Dfp result)" ], [ "hashCode", "java.lang", "Object", "public native int hashCode()" ], [ "equals", "java.lang", "Object", "public boolean equals(Object arg0)" ], [ "toString", "java.lang", "Object", "public String toString()" ], [ "getReal", "org.apache.commons.math3", "RealFieldElement", "public abstract double getReal()" ], [ "round", "org.apache.commons.math3", "RealFieldElement", "public abstract long round()" ], [ "reciprocal", "org.apache.commons.math3", "FieldElement", "public abstract T reciprocal() throws MathArithmeticException" ] ],
  "tokensMethodVariablesNonPrivateNonStaticAttributes" : [ [ "mant", "org.apache.commons.math3.dfp", "Dfp", "protected int[] mant;" ], [ "sign", "org.apache.commons.math3.dfp", "Dfp", "protected byte sign;" ], [ "exp", "org.apache.commons.math3.dfp", "Dfp", "protected int exp;" ], [ "nans", "org.apache.commons.math3.dfp", "Dfp", "protected byte nans;" ] ],
  "tokensOracleVariablesNonPrivateNonStaticNonVoidMethods" : [ ],
  "tokensOracleVariablesNonPrivateNonStaticAttributes" : [ ]
}, {
  "id" : 22744,
  "oracle" : ";",
  "oracleType" : "PRE",
  "projectName" : "commons-math3-3.6.1",
  "packageName" : "org.apache.commons.math3.dfp",
  "className" : "Dfp",
  "javadocTag" : "@param sig sign of the Dfp to create",
  "methodJavadoc" : "    /** Creates an instance with a non-finite value.\n     * @param sig sign of the Dfp to create\n     * @param code code of the value, must be one of {@link #INFINITE},\n     * {@link #SNAN},  {@link #QNAN}\n     * @return a new instance with a non-finite value\n     */",
  "methodSourceCode" : "public Dfp newInstance(final byte sig, final byte code){\n    return field.newDfp(sig, code);\n}",
  "classJavadoc" : "/**\n *  Decimal floating point library for Java\n *\n *  <p>Another floating point class.  This one is built using radix 10000\n *  which is 10<sup>4</sup>, so its almost decimal.</p>\n *\n *  <p>The design goals here are:\n *  <ol>\n *    <li>Decimal math, or close to it</li>\n *    <li>Settable precision (but no mix between numbers using different settings)</li>\n *    <li>Portability.  Code should be kept as portable as possible.</li>\n *    <li>Performance</li>\n *    <li>Accuracy  - Results should always be +/- 1 ULP for basic\n *         algebraic operation</li>\n *    <li>Comply with IEEE 854-1987 as much as possible.\n *         (See IEEE 854-1987 notes below)</li>\n *  </ol></p>\n *\n *  <p>Trade offs:\n *  <ol>\n *    <li>Memory foot print.  I'm using more memory than necessary to\n *         represent numbers to get better performance.</li>\n *    <li>Digits are bigger, so rounding is a greater loss.  So, if you\n *         really need 12 decimal digits, better use 4 base 10000 digits\n *         there can be one partially filled.</li>\n *  </ol></p>\n *\n *  <p>Numbers are represented  in the following form:\n *  <pre>\n *  n  =  sign &times; mant &times; (radix)<sup>exp</sup>;</p>\n *  </pre>\n *  where sign is &plusmn;1, mantissa represents a fractional number between\n *  zero and one.  mant[0] is the least significant digit.\n *  exp is in the range of -32767 to 32768</p>\n *\n *  <p>IEEE 854-1987  Notes and differences</p>\n *\n *  <p>IEEE 854 requires the radix to be either 2 or 10.  The radix here is\n *  10000, so that requirement is not met, but  it is possible that a\n *  subclassed can be made to make it behave as a radix 10\n *  number.  It is my opinion that if it looks and behaves as a radix\n *  10 number then it is one and that requirement would be met.</p>\n *\n *  <p>The radix of 10000 was chosen because it should be faster to operate\n *  on 4 decimal digits at once instead of one at a time.  Radix 10 behavior\n *  can be realized by adding an additional rounding step to ensure that\n *  the number of decimal digits represented is constant.</p>\n *\n *  <p>The IEEE standard specifically leaves out internal data encoding,\n *  so it is reasonable to conclude that such a subclass of this radix\n *  10000 system is merely an encoding of a radix 10 system.</p>\n *\n *  <p>IEEE 854 also specifies the existence of \"sub-normal\" numbers.  This\n *  class does not contain any such entities.  The most significant radix\n *  10000 digit is always non-zero.  Instead, we support \"gradual underflow\"\n *  by raising the underflow flag for numbers less with exponent less than\n *  expMin, but don't flush to zero until the exponent reaches MIN_EXP-digits.\n *  Thus the smallest number we can represent would be:\n *  1E(-(MIN_EXP-digits-1)*4),  eg, for digits=5, MIN_EXP=-32767, that would\n *  be 1e-131092.</p>\n *\n *  <p>IEEE 854 defines that the implied radix point lies just to the right\n *  of the most significant digit and to the left of the remaining digits.\n *  This implementation puts the implied radix point to the left of all\n *  digits including the most significant one.  The most significant digit\n *  here is the one just to the right of the radix point.  This is a fine\n *  detail and is really only a matter of definition.  Any side effects of\n *  this can be rendered invisible by a subclass.</p>\n * @see DfpField\n * @since 2.2\n */",
  "classSourceCode" : "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.commons.math3.dfp;\n\nimport java.util.Arrays;\n\nimport org.apache.commons.math3.RealFieldElement;\nimport org.apache.commons.math3.exception.DimensionMismatchException;\nimport org.apache.commons.math3.util.FastMath;\n\n/**\n *  Decimal floating point library for Java\n *\n *  <p>Another floating point class.  This one is built using radix 10000\n *  which is 10<sup>4</sup>, so its almost decimal.</p>\n *\n *  <p>The design goals here are:\n *  <ol>\n *    <li>Decimal math, or close to it</li>\n *    <li>Settable precision (but no mix between numbers using different settings)</li>\n *    <li>Portability.  Code should be kept as portable as possible.</li>\n *    <li>Performance</li>\n *    <li>Accuracy  - Results should always be +/- 1 ULP for basic\n *         algebraic operation</li>\n *    <li>Comply with IEEE 854-1987 as much as possible.\n *         (See IEEE 854-1987 notes below)</li>\n *  </ol></p>\n *\n *  <p>Trade offs:\n *  <ol>\n *    <li>Memory foot print.  I'm using more memory than necessary to\n *         represent numbers to get better performance.</li>\n *    <li>Digits are bigger, so rounding is a greater loss.  So, if you\n *         really need 12 decimal digits, better use 4 base 10000 digits\n *         there can be one partially filled.</li>\n *  </ol></p>\n *\n *  <p>Numbers are represented  in the following form:\n *  <pre>\n *  n  =  sign &times; mant &times; (radix)<sup>exp</sup>;</p>\n *  </pre>\n *  where sign is &plusmn;1, mantissa represents a fractional number between\n *  zero and one.  mant[0] is the least significant digit.\n *  exp is in the range of -32767 to 32768</p>\n *\n *  <p>IEEE 854-1987  Notes and differences</p>\n *\n *  <p>IEEE 854 requires the radix to be either 2 or 10.  The radix here is\n *  10000, so that requirement is not met, but  it is possible that a\n *  subclassed can be made to make it behave as a radix 10\n *  number.  It is my opinion that if it looks and behaves as a radix\n *  10 number then it is one and that requirement would be met.</p>\n *\n *  <p>The radix of 10000 was chosen because it should be faster to operate\n *  on 4 decimal digits at once instead of one at a time.  Radix 10 behavior\n *  can be realized by adding an additional rounding step to ensure that\n *  the number of decimal digits represented is constant.</p>\n *\n *  <p>The IEEE standard specifically leaves out internal data encoding,\n *  so it is reasonable to conclude that such a subclass of this radix\n *  10000 system is merely an encoding of a radix 10 system.</p>\n *\n *  <p>IEEE 854 also specifies the existence of \"sub-normal\" numbers.  This\n *  class does not contain any such entities.  The most significant radix\n *  10000 digit is always non-zero.  Instead, we support \"gradual underflow\"\n *  by raising the underflow flag for numbers less with exponent less than\n *  expMin, but don't flush to zero until the exponent reaches MIN_EXP-digits.\n *  Thus the smallest number we can represent would be:\n *  1E(-(MIN_EXP-digits-1)*4),  eg, for digits=5, MIN_EXP=-32767, that would\n *  be 1e-131092.</p>\n *\n *  <p>IEEE 854 defines that the implied radix point lies just to the right\n *  of the most significant digit and to the left of the remaining digits.\n *  This implementation puts the implied radix point to the left of all\n *  digits including the most significant one.  The most significant digit\n *  here is the one just to the right of the radix point.  This is a fine\n *  detail and is really only a matter of definition.  Any side effects of\n *  this can be rendered invisible by a subclass.</p>\n * @see DfpField\n * @since 2.2\n */\npublic class Dfp implements RealFieldElement<Dfp> {\n\n    /** The radix, or base of this system.  Set to 10000 */\n    public static final int RADIX = 10000;\n\n    /** The minimum exponent before underflow is signaled.  Flush to zero\n     *  occurs at minExp-DIGITS */\n    public static final int MIN_EXP = -32767;\n\n    /** The maximum exponent before overflow is signaled and results flushed\n     *  to infinity */\n    public static final int MAX_EXP =  32768;\n\n    /** The amount under/overflows are scaled by before going to trap handler */\n    public static final int ERR_SCALE = 32760;\n\n    /** Indicator value for normal finite numbers. */\n    public static final byte FINITE = 0;\n\n    /** Indicator value for Infinity. */\n    public static final byte INFINITE = 1;\n\n    /** Indicator value for signaling NaN. */\n    public static final byte SNAN = 2;\n\n    /** Indicator value for quiet NaN. */\n    public static final byte QNAN = 3;\n\n    /** String for NaN representation. */\n    private static final String NAN_STRING = \"NaN\";\n\n    /** String for positive infinity representation. */\n    private static final String POS_INFINITY_STRING = \"Infinity\";\n\n    /** String for negative infinity representation. */\n    private static final String NEG_INFINITY_STRING = \"-Infinity\";\n\n    /** Name for traps triggered by addition. */\n    private static final String ADD_TRAP = \"add\";\n\n    /** Name for traps triggered by multiplication. */\n    private static final String MULTIPLY_TRAP = \"multiply\";\n\n    /** Name for traps triggered by division. */\n    private static final String DIVIDE_TRAP = \"divide\";\n\n    /** Name for traps triggered by square root. */\n    private static final String SQRT_TRAP = \"sqrt\";\n\n    /** Name for traps triggered by alignment. */\n    private static final String ALIGN_TRAP = \"align\";\n\n    /** Name for traps triggered by truncation. */\n    private static final String TRUNC_TRAP = \"trunc\";\n\n    /** Name for traps triggered by nextAfter. */\n    private static final String NEXT_AFTER_TRAP = \"nextAfter\";\n\n    /** Name for traps triggered by lessThan. */\n    private static final String LESS_THAN_TRAP = \"lessThan\";\n\n    /** Name for traps triggered by greaterThan. */\n    private static final String GREATER_THAN_TRAP = \"greaterThan\";\n\n    /** Name for traps triggered by newInstance. */\n    private static final String NEW_INSTANCE_TRAP = \"newInstance\";\n\n    /** Mantissa. */\n    protected int[] mant;\n\n    /** Sign bit: 1 for positive, -1 for negative. */\n    protected byte sign;\n\n    /** Exponent. */\n    protected int exp;\n\n    /** Indicator for non-finite / non-number values. */\n    protected byte nans;\n\n    /** Factory building similar Dfp's. */\n    private final DfpField field;\n\n    /** Makes an instance with a value of zero.\n     * @param field field to which this instance belongs\n     */\n    protected Dfp(final DfpField field) {\n        mant = new int[field.getRadixDigits()];\n        sign = 1;\n        exp = 0;\n        nans = FINITE;\n        this.field = field;\n    }\n\n    /** Create an instance from a byte value.\n     * @param field field to which this instance belongs\n     * @param x value to convert to an instance\n     */\n    protected Dfp(final DfpField field, byte x) {\n        this(field, (long) x);\n    }\n\n    /** Create an instance from an int value.\n     * @param field field to which this instance belongs\n     * @param x value to convert to an instance\n     */\n    protected Dfp(final DfpField field, int x) {\n        this(field, (long) x);\n    }\n\n    /** Create an instance from a long value.\n     * @param field field to which this instance belongs\n     * @param x value to convert to an instance\n     */\n    protected Dfp(final DfpField field, long x) {\n\n        // initialize as if 0\n        mant = new int[field.getRadixDigits()];\n        nans = FINITE;\n        this.field = field;\n\n        boolean isLongMin = false;\n        if (x == Long.MIN_VALUE) {\n            // special case for Long.MIN_VALUE (-9223372036854775808)\n            // we must shift it before taking its absolute value\n            isLongMin = true;\n            ++x;\n        }\n\n        // set the sign\n        if (x < 0) {\n            sign = -1;\n            x = -x;\n        } else {\n            sign = 1;\n        }\n\n        exp = 0;\n        while (x != 0) {\n            System.arraycopy(mant, mant.length - exp, mant, mant.length - 1 - exp, exp);\n            mant[mant.length - 1] = (int) (x % RADIX);\n            x /= RADIX;\n            exp++;\n        }\n\n        if (isLongMin) {\n            // remove the shift added for Long.MIN_VALUE\n            // we know in this case that fixing the last digit is sufficient\n            for (int i = 0; i < mant.length - 1; i++) {\n                if (mant[i] != 0) {\n                    mant[i]++;\n                    break;\n                }\n            }\n        }\n    }\n\n    /** Create an instance from a double value.\n     * @param field field to which this instance belongs\n     * @param x value to convert to an instance\n     */\n    protected Dfp(final DfpField field, double x) {\n\n        // initialize as if 0\n        mant = new int[field.getRadixDigits()];\n        sign = 1;\n        exp = 0;\n        nans = FINITE;\n        this.field = field;\n\n        long bits = Double.doubleToLongBits(x);\n        long mantissa = bits & 0x000fffffffffffffL;\n        int exponent = (int) ((bits & 0x7ff0000000000000L) >> 52) - 1023;\n\n        if (exponent == -1023) {\n            // Zero or sub-normal\n            if (x == 0) {\n                // make sure 0 has the right sign\n                if ((bits & 0x8000000000000000L) != 0) {\n                    sign = -1;\n                }\n                return;\n            }\n\n            exponent++;\n\n            // Normalize the subnormal number\n            while ( (mantissa & 0x0010000000000000L) == 0) {\n                exponent--;\n                mantissa <<= 1;\n            }\n            mantissa &= 0x000fffffffffffffL;\n        }\n\n        if (exponent == 1024) {\n            // infinity or NAN\n            if (x != x) {\n                sign = (byte) 1;\n                nans = QNAN;\n            } else if (x < 0) {\n                sign = (byte) -1;\n                nans = INFINITE;\n            } else {\n                sign = (byte) 1;\n                nans = INFINITE;\n            }\n            return;\n        }\n\n        Dfp xdfp = new Dfp(field, mantissa);\n        xdfp = xdfp.divide(new Dfp(field, 4503599627370496l)).add(field.getOne());  // Divide by 2^52, then add one\n        xdfp = xdfp.multiply(DfpMath.pow(field.getTwo(), exponent));\n\n        if ((bits & 0x8000000000000000L) != 0) {\n            xdfp = xdfp.negate();\n        }\n\n        System.arraycopy(xdfp.mant, 0, mant, 0, mant.length);\n        sign = xdfp.sign;\n        exp  = xdfp.exp;\n        nans = xdfp.nans;\n\n    }\n\n    /** Copy constructor.\n     * @param d instance to copy\n     */\n    public Dfp(final Dfp d) {\n        mant  = d.mant.clone();\n        sign  = d.sign;\n        exp   = d.exp;\n        nans  = d.nans;\n        field = d.field;\n    }\n\n    /** Create an instance from a String representation.\n     * @param field field to which this instance belongs\n     * @param s string representation of the instance\n     */\n    protected Dfp(final DfpField field, final String s) {\n\n        // initialize as if 0\n        mant = new int[field.getRadixDigits()];\n        sign = 1;\n        exp = 0;\n        nans = FINITE;\n        this.field = field;\n\n        boolean decimalFound = false;\n        final int rsize = 4;   // size of radix in decimal digits\n        final int offset = 4;  // Starting offset into Striped\n        final char[] striped = new char[getRadixDigits() * rsize + offset * 2];\n\n        // Check some special cases\n        if (s.equals(POS_INFINITY_STRING)) {\n            sign = (byte) 1;\n            nans = INFINITE;\n            return;\n        }\n\n        if (s.equals(NEG_INFINITY_STRING)) {\n            sign = (byte) -1;\n            nans = INFINITE;\n            return;\n        }\n\n        if (s.equals(NAN_STRING)) {\n            sign = (byte) 1;\n            nans = QNAN;\n            return;\n        }\n\n        // Check for scientific notation\n        int p = s.indexOf(\"e\");\n        if (p == -1) { // try upper case?\n            p = s.indexOf(\"E\");\n        }\n\n        final String fpdecimal;\n        int sciexp = 0;\n        if (p != -1) {\n            // scientific notation\n            fpdecimal = s.substring(0, p);\n            String fpexp = s.substring(p+1);\n            boolean negative = false;\n\n            for (int i=0; i<fpexp.length(); i++)\n            {\n                if (fpexp.charAt(i) == '-')\n                {\n                    negative = true;\n                    continue;\n                }\n                if (fpexp.charAt(i) >= '0' && fpexp.charAt(i) <= '9') {\n                    sciexp = sciexp * 10 + fpexp.charAt(i) - '0';\n                }\n            }\n\n            if (negative) {\n                sciexp = -sciexp;\n            }\n        } else {\n            // normal case\n            fpdecimal = s;\n        }\n\n        // If there is a minus sign in the number then it is negative\n        if (fpdecimal.indexOf(\"-\") !=  -1) {\n            sign = -1;\n        }\n\n        // First off, find all of the leading zeros, trailing zeros, and significant digits\n        p = 0;\n\n        // Move p to first significant digit\n        int decimalPos = 0;\n        for (;;) {\n            if (fpdecimal.charAt(p) >= '1' && fpdecimal.charAt(p) <= '9') {\n                break;\n            }\n\n            if (decimalFound && fpdecimal.charAt(p) == '0') {\n                decimalPos--;\n            }\n\n            if (fpdecimal.charAt(p) == '.') {\n                decimalFound = true;\n            }\n\n            p++;\n\n            if (p == fpdecimal.length()) {\n                break;\n            }\n        }\n\n        // Copy the string onto Stripped\n        int q = offset;\n        striped[0] = '0';\n        striped[1] = '0';\n        striped[2] = '0';\n        striped[3] = '0';\n        int significantDigits=0;\n        for(;;) {\n            if (p == (fpdecimal.length())) {\n                break;\n            }\n\n            // Don't want to run pass the end of the array\n            if (q == mant.length*rsize+offset+1) {\n                break;\n            }\n\n            if (fpdecimal.charAt(p) == '.') {\n                decimalFound = true;\n                decimalPos = significantDigits;\n                p++;\n                continue;\n            }\n\n            if (fpdecimal.charAt(p) < '0' || fpdecimal.charAt(p) > '9') {\n                p++;\n                continue;\n            }\n\n            striped[q] = fpdecimal.charAt(p);\n            q++;\n            p++;\n            significantDigits++;\n        }\n\n\n        // If the decimal point has been found then get rid of trailing zeros.\n        if (decimalFound && q != offset) {\n            for (;;) {\n                q--;\n                if (q == offset) {\n                    break;\n                }\n                if (striped[q] == '0') {\n                    significantDigits--;\n                } else {\n                    break;\n                }\n            }\n        }\n\n        // special case of numbers like \"0.00000\"\n        if (decimalFound && significantDigits == 0) {\n            decimalPos = 0;\n        }\n\n        // Implicit decimal point at end of number if not present\n        if (!decimalFound) {\n            decimalPos = q-offset;\n        }\n\n        // Find the number of significant trailing zeros\n        q = offset;  // set q to point to first sig digit\n        p = significantDigits-1+offset;\n\n        while (p > q) {\n            if (striped[p] != '0') {\n                break;\n            }\n            p--;\n        }\n\n        // Make sure the decimal is on a mod 10000 boundary\n        int i = ((rsize * 100) - decimalPos - sciexp % rsize) % rsize;\n        q -= i;\n        decimalPos += i;\n\n        // Make the mantissa length right by adding zeros at the end if necessary\n        while ((p - q) < (mant.length * rsize)) {\n            for (i = 0; i < rsize; i++) {\n                striped[++p] = '0';\n            }\n        }\n\n        // Ok, now we know how many trailing zeros there are,\n        // and where the least significant digit is\n        for (i = mant.length - 1; i >= 0; i--) {\n            mant[i] = (striped[q]   - '0') * 1000 +\n                      (striped[q+1] - '0') * 100  +\n                      (striped[q+2] - '0') * 10   +\n                      (striped[q+3] - '0');\n            q += 4;\n        }\n\n\n        exp = (decimalPos+sciexp) / rsize;\n\n        if (q < striped.length) {\n            // Is there possible another digit?\n            round((striped[q] - '0')*1000);\n        }\n\n    }\n\n    /** Creates an instance with a non-finite value.\n     * @param field field to which this instance belongs\n     * @param sign sign of the Dfp to create\n     * @param nans code of the value, must be one of {@link #INFINITE},\n     * {@link #SNAN},  {@link #QNAN}\n     */\n    protected Dfp(final DfpField field, final byte sign, final byte nans) {\n        this.field = field;\n        this.mant    = new int[field.getRadixDigits()];\n        this.sign    = sign;\n        this.exp     = 0;\n        this.nans    = nans;\n    }\n\n    /** Create an instance with a value of 0.\n     * Use this internally in preference to constructors to facilitate subclasses\n     * @return a new instance with a value of 0\n     */\n    public Dfp newInstance() {\n        return new Dfp(getField());\n    }\n\n    /** Create an instance from a byte value.\n     * @param x value to convert to an instance\n     * @return a new instance with value x\n     */\n    public Dfp newInstance(final byte x) {\n        return new Dfp(getField(), x);\n    }\n\n    /** Create an instance from an int value.\n     * @param x value to convert to an instance\n     * @return a new instance with value x\n     */\n    public Dfp newInstance(final int x) {\n        return new Dfp(getField(), x);\n    }\n\n    /** Create an instance from a long value.\n     * @param x value to convert to an instance\n     * @return a new instance with value x\n     */\n    public Dfp newInstance(final long x) {\n        return new Dfp(getField(), x);\n    }\n\n    /** Create an instance from a double value.\n     * @param x value to convert to an instance\n     * @return a new instance with value x\n     */\n    public Dfp newInstance(final double x) {\n        return new Dfp(getField(), x);\n    }\n\n    /** Create an instance by copying an existing one.\n     * Use this internally in preference to constructors to facilitate subclasses.\n     * @param d instance to copy\n     * @return a new instance with the same value as d\n     */\n    public Dfp newInstance(final Dfp d) {\n\n        // make sure we don't mix number with different precision\n        if (field.getRadixDigits() != d.field.getRadixDigits()) {\n            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);\n            final Dfp result = newInstance(getZero());\n            result.nans = QNAN;\n            return dotrap(DfpField.FLAG_INVALID, NEW_INSTANCE_TRAP, d, result);\n        }\n\n        return new Dfp(d);\n\n    }\n\n    /** Create an instance from a String representation.\n     * Use this internally in preference to constructors to facilitate subclasses.\n     * @param s string representation of the instance\n     * @return a new instance parsed from specified string\n     */\n    public Dfp newInstance(final String s) {\n        return new Dfp(field, s);\n    }\n\n    /** Creates an instance with a non-finite value.\n     * @param sig sign of the Dfp to create\n     * @param code code of the value, must be one of {@link #INFINITE},\n     * {@link #SNAN},  {@link #QNAN}\n     * @return a new instance with a non-finite value\n     */\n    public Dfp newInstance(final byte sig, final byte code) {\n        return field.newDfp(sig, code);\n    }\n\n    /** Get the {@link org.apache.commons.math3.Field Field} (really a {@link DfpField}) to which the instance belongs.\n     * <p>\n     * The field is linked to the number of digits and acts as a factory\n     * for {@link Dfp} instances.\n     * </p>\n     * @return {@link org.apache.commons.math3.Field Field} (really a {@link DfpField}) to which the instance belongs\n     */\n    public DfpField getField() {\n        return field;\n    }\n\n    /** Get the number of radix digits of the instance.\n     * @return number of radix digits\n     */\n    public int getRadixDigits() {\n        return field.getRadixDigits();\n    }\n\n    /** Get the constant 0.\n     * @return a Dfp with value zero\n     */\n    public Dfp getZero() {\n        return field.getZero();\n    }\n\n    /** Get the constant 1.\n     * @return a Dfp with value one\n     */\n    public Dfp getOne() {\n        return field.getOne();\n    }\n\n    /** Get the constant 2.\n     * @return a Dfp with value two\n     */\n    public Dfp getTwo() {\n        return field.getTwo();\n    }\n\n    /** Shift the mantissa left, and adjust the exponent to compensate.\n     */\n    protected void shiftLeft() {\n        for (int i = mant.length - 1; i > 0; i--) {\n            mant[i] = mant[i-1];\n        }\n        mant[0] = 0;\n        exp--;\n    }\n\n    /* Note that shiftRight() does not call round() as that round() itself\n     uses shiftRight() */\n    /** Shift the mantissa right, and adjust the exponent to compensate.\n     */\n    protected void shiftRight() {\n        for (int i = 0; i < mant.length - 1; i++) {\n            mant[i] = mant[i+1];\n        }\n        mant[mant.length - 1] = 0;\n        exp++;\n    }\n\n    /** Make our exp equal to the supplied one, this may cause rounding.\n     *  Also causes de-normalized numbers.  These numbers are generally\n     *  dangerous because most routines assume normalized numbers.\n     *  Align doesn't round, so it will return the last digit destroyed\n     *  by shifting right.\n     *  @param e desired exponent\n     *  @return last digit destroyed by shifting right\n     */\n    protected int align(int e) {\n        int lostdigit = 0;\n        boolean inexact = false;\n\n        int diff = exp - e;\n\n        int adiff = diff;\n        if (adiff < 0) {\n            adiff = -adiff;\n        }\n\n        if (diff == 0) {\n            return 0;\n        }\n\n        if (adiff > (mant.length + 1)) {\n            // Special case\n            Arrays.fill(mant, 0);\n            exp = e;\n\n            field.setIEEEFlagsBits(DfpField.FLAG_INEXACT);\n            dotrap(DfpField.FLAG_INEXACT, ALIGN_TRAP, this, this);\n\n            return 0;\n        }\n\n        for (int i = 0; i < adiff; i++) {\n            if (diff < 0) {\n                /* Keep track of loss -- only signal inexact after losing 2 digits.\n                 * the first lost digit is returned to add() and may be incorporated\n                 * into the result.\n                 */\n                if (lostdigit != 0) {\n                    inexact = true;\n                }\n\n                lostdigit = mant[0];\n\n                shiftRight();\n            } else {\n                shiftLeft();\n            }\n        }\n\n        if (inexact) {\n            field.setIEEEFlagsBits(DfpField.FLAG_INEXACT);\n            dotrap(DfpField.FLAG_INEXACT, ALIGN_TRAP, this, this);\n        }\n\n        return lostdigit;\n\n    }\n\n    /** Check if instance is less than x.\n     * @param x number to check instance against\n     * @return true if instance is less than x and neither are NaN, false otherwise\n     */\n    public boolean lessThan(final Dfp x) {\n\n        // make sure we don't mix number with different precision\n        if (field.getRadixDigits() != x.field.getRadixDigits()) {\n            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);\n            final Dfp result = newInstance(getZero());\n            result.nans = QNAN;\n            dotrap(DfpField.FLAG_INVALID, LESS_THAN_TRAP, x, result);\n            return false;\n        }\n\n        /* if a nan is involved, signal invalid and return false */\n        if (isNaN() || x.isNaN()) {\n            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);\n            dotrap(DfpField.FLAG_INVALID, LESS_THAN_TRAP, x, newInstance(getZero()));\n            return false;\n        }\n\n        return compare(this, x) < 0;\n    }\n\n    /** Check if instance is greater than x.\n     * @param x number to check instance against\n     * @return true if instance is greater than x and neither are NaN, false otherwise\n     */\n    public boolean greaterThan(final Dfp x) {\n\n        // make sure we don't mix number with different precision\n        if (field.getRadixDigits() != x.field.getRadixDigits()) {\n            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);\n            final Dfp result = newInstance(getZero());\n            result.nans = QNAN;\n            dotrap(DfpField.FLAG_INVALID, GREATER_THAN_TRAP, x, result);\n            return false;\n        }\n\n        /* if a nan is involved, signal invalid and return false */\n        if (isNaN() || x.isNaN()) {\n            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);\n            dotrap(DfpField.FLAG_INVALID, GREATER_THAN_TRAP, x, newInstance(getZero()));\n            return false;\n        }\n\n        return compare(this, x) > 0;\n    }\n\n    /** Check if instance is less than or equal to 0.\n     * @return true if instance is not NaN and less than or equal to 0, false otherwise\n     */\n    public boolean negativeOrNull() {\n\n        if (isNaN()) {\n            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);\n            dotrap(DfpField.FLAG_INVALID, LESS_THAN_TRAP, this, newInstance(getZero()));\n            return false;\n        }\n\n        return (sign < 0) || ((mant[mant.length - 1] == 0) && !isInfinite());\n\n    }\n\n    /** Check if instance is strictly less than 0.\n     * @return true if instance is not NaN and less than or equal to 0, false otherwise\n     */\n    public boolean strictlyNegative() {\n\n        if (isNaN()) {\n            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);\n            dotrap(DfpField.FLAG_INVALID, LESS_THAN_TRAP, this, newInstance(getZero()));\n            return false;\n        }\n\n        return (sign < 0) && ((mant[mant.length - 1] != 0) || isInfinite());\n\n    }\n\n    /** Check if instance is greater than or equal to 0.\n     * @return true if instance is not NaN and greater than or equal to 0, false otherwise\n     */\n    public boolean positiveOrNull() {\n\n        if (isNaN()) {\n            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);\n            dotrap(DfpField.FLAG_INVALID, LESS_THAN_TRAP, this, newInstance(getZero()));\n            return false;\n        }\n\n        return (sign > 0) || ((mant[mant.length - 1] == 0) && !isInfinite());\n\n    }\n\n    /** Check if instance is strictly greater than 0.\n     * @return true if instance is not NaN and greater than or equal to 0, false otherwise\n     */\n    public boolean strictlyPositive() {\n\n        if (isNaN()) {\n            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);\n            dotrap(DfpField.FLAG_INVALID, LESS_THAN_TRAP, this, newInstance(getZero()));\n            return false;\n        }\n\n        return (sign > 0) && ((mant[mant.length - 1] != 0) || isInfinite());\n\n    }\n\n    /** Get the absolute value of instance.\n     * @return absolute value of instance\n     * @since 3.2\n     */\n    public Dfp abs() {\n        Dfp result = newInstance(this);\n        result.sign = 1;\n        return result;\n    }\n\n    /** Check if instance is infinite.\n     * @return true if instance is infinite\n     */\n    public boolean isInfinite() {\n        return nans == INFINITE;\n    }\n\n    /** Check if instance is not a number.\n     * @return true if instance is not a number\n     */\n    public boolean isNaN() {\n        return (nans == QNAN) || (nans == SNAN);\n    }\n\n    /** Check if instance is equal to zero.\n     * @return true if instance is equal to zero\n     */\n    public boolean isZero() {\n\n        if (isNaN()) {\n            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);\n            dotrap(DfpField.FLAG_INVALID, LESS_THAN_TRAP, this, newInstance(getZero()));\n            return false;\n        }\n\n        return (mant[mant.length - 1] == 0) && !isInfinite();\n\n    }\n\n    /** Check if instance is equal to x.\n     * @param other object to check instance against\n     * @return true if instance is equal to x and neither are NaN, false otherwise\n     */\n    @Override\n    public boolean equals(final Object other) {\n\n        if (other instanceof Dfp) {\n            final Dfp x = (Dfp) other;\n            if (isNaN() || x.isNaN() || field.getRadixDigits() != x.field.getRadixDigits()) {\n                return false;\n            }\n\n            return compare(this, x) == 0;\n        }\n\n        return false;\n\n    }\n\n    /**\n     * Gets a hashCode for the instance.\n     * @return a hash code value for this object\n     */\n    @Override\n    public int hashCode() {\n        return 17 + (isZero() ? 0 : (sign << 8)) + (nans << 16) + exp + Arrays.hashCode(mant);\n    }\n\n    /** Check if instance is not equal to x.\n     * @param x number to check instance against\n     * @return true if instance is not equal to x and neither are NaN, false otherwise\n     */\n    public boolean unequal(final Dfp x) {\n        if (isNaN() || x.isNaN() || field.getRadixDigits() != x.field.getRadixDigits()) {\n            return false;\n        }\n\n        return greaterThan(x) || lessThan(x);\n    }\n\n    /** Compare two instances.\n     * @param a first instance in comparison\n     * @param b second instance in comparison\n     * @return -1 if a<b, 1 if a>b and 0 if a==b\n     *  Note this method does not properly handle NaNs or numbers with different precision.\n     */\n    private static int compare(final Dfp a, final Dfp b) {\n        // Ignore the sign of zero\n        if (a.mant[a.mant.length - 1] == 0 && b.mant[b.mant.length - 1] == 0 &&\n            a.nans == FINITE && b.nans == FINITE) {\n            return 0;\n        }\n\n        if (a.sign != b.sign) {\n            if (a.sign == -1) {\n                return -1;\n            } else {\n                return 1;\n            }\n        }\n\n        // deal with the infinities\n        if (a.nans == INFINITE && b.nans == FINITE) {\n            return a.sign;\n        }\n\n        if (a.nans == FINITE && b.nans == INFINITE) {\n            return -b.sign;\n        }\n\n        if (a.nans == INFINITE && b.nans == INFINITE) {\n            return 0;\n        }\n\n        // Handle special case when a or b is zero, by ignoring the exponents\n        if (b.mant[b.mant.length-1] != 0 && a.mant[b.mant.length-1] != 0) {\n            if (a.exp < b.exp) {\n                return -a.sign;\n            }\n\n            if (a.exp > b.exp) {\n                return a.sign;\n            }\n        }\n\n        // compare the mantissas\n        for (int i = a.mant.length - 1; i >= 0; i--) {\n            if (a.mant[i] > b.mant[i]) {\n                return a.sign;\n            }\n\n            if (a.mant[i] < b.mant[i]) {\n                return -a.sign;\n            }\n        }\n\n        return 0;\n\n    }\n\n    /** Round to nearest integer using the round-half-even method.\n     *  That is round to nearest integer unless both are equidistant.\n     *  In which case round to the even one.\n     *  @return rounded value\n     * @since 3.2\n     */\n    public Dfp rint() {\n        return trunc(DfpField.RoundingMode.ROUND_HALF_EVEN);\n    }\n\n    /** Round to an integer using the round floor mode.\n     * That is, round toward -Infinity\n     *  @return rounded value\n     * @since 3.2\n     */\n    public Dfp floor() {\n        return trunc(DfpField.RoundingMode.ROUND_FLOOR);\n    }\n\n    /** Round to an integer using the round ceil mode.\n     * That is, round toward +Infinity\n     *  @return rounded value\n     * @since 3.2\n     */\n    public Dfp ceil() {\n        return trunc(DfpField.RoundingMode.ROUND_CEIL);\n    }\n\n    /** Returns the IEEE remainder.\n     * @param d divisor\n     * @return this less n &times; d, where n is the integer closest to this/d\n     * @since 3.2\n     */\n    public Dfp remainder(final Dfp d) {\n\n        final Dfp result = this.subtract(this.divide(d).rint().multiply(d));\n\n        // IEEE 854-1987 says that if the result is zero, then it carries the sign of this\n        if (result.mant[mant.length-1] == 0) {\n            result.sign = sign;\n        }\n\n        return result;\n\n    }\n\n    /** Does the integer conversions with the specified rounding.\n     * @param rmode rounding mode to use\n     * @return truncated value\n     */\n    protected Dfp trunc(final DfpField.RoundingMode rmode) {\n        boolean changed = false;\n\n        if (isNaN()) {\n            return newInstance(this);\n        }\n\n        if (nans == INFINITE) {\n            return newInstance(this);\n        }\n\n        if (mant[mant.length-1] == 0) {\n            // a is zero\n            return newInstance(this);\n        }\n\n        /* If the exponent is less than zero then we can certainly\n         * return zero */\n        if (exp < 0) {\n            field.setIEEEFlagsBits(DfpField.FLAG_INEXACT);\n            Dfp result = newInstance(getZero());\n            result = dotrap(DfpField.FLAG_INEXACT, TRUNC_TRAP, this, result);\n            return result;\n        }\n\n        /* If the exponent is greater than or equal to digits, then it\n         * must already be an integer since there is no precision left\n         * for any fractional part */\n\n        if (exp >= mant.length) {\n            return newInstance(this);\n        }\n\n        /* General case:  create another dfp, result, that contains the\n         * a with the fractional part lopped off.  */\n\n        Dfp result = newInstance(this);\n        for (int i = 0; i < mant.length-result.exp; i++) {\n            changed |= result.mant[i] != 0;\n            result.mant[i] = 0;\n        }\n\n        if (changed) {\n            switch (rmode) {\n                case ROUND_FLOOR:\n                    if (result.sign == -1) {\n                        // then we must increment the mantissa by one\n                        result = result.add(newInstance(-1));\n                    }\n                    break;\n\n                case ROUND_CEIL:\n                    if (result.sign == 1) {\n                        // then we must increment the mantissa by one\n                        result = result.add(getOne());\n                    }\n                    break;\n\n                case ROUND_HALF_EVEN:\n                default:\n                    final Dfp half = newInstance(\"0.5\");\n                    Dfp a = subtract(result);  // difference between this and result\n                    a.sign = 1;            // force positive (take abs)\n                    if (a.greaterThan(half)) {\n                        a = newInstance(getOne());\n                        a.sign = sign;\n                        result = result.add(a);\n                    }\n\n                    /** If exactly equal to 1/2 and odd then increment */\n                    if (a.equals(half) && result.exp > 0 && (result.mant[mant.length-result.exp]&1) != 0) {\n                        a = newInstance(getOne());\n                        a.sign = sign;\n                        result = result.add(a);\n                    }\n                    break;\n            }\n\n            field.setIEEEFlagsBits(DfpField.FLAG_INEXACT);  // signal inexact\n            result = dotrap(DfpField.FLAG_INEXACT, TRUNC_TRAP, this, result);\n            return result;\n        }\n\n        return result;\n    }\n\n    /** Convert this to an integer.\n     * If greater than 2147483647, it returns 2147483647. If less than -2147483648 it returns -2147483648.\n     * @return converted number\n     */\n    public int intValue() {\n        Dfp rounded;\n        int result = 0;\n\n        rounded = rint();\n\n        if (rounded.greaterThan(newInstance(2147483647))) {\n            return 2147483647;\n        }\n\n        if (rounded.lessThan(newInstance(-2147483648))) {\n            return -2147483648;\n        }\n\n        for (int i = mant.length - 1; i >= mant.length - rounded.exp; i--) {\n            result = result * RADIX + rounded.mant[i];\n        }\n\n        if (rounded.sign == -1) {\n            result = -result;\n        }\n\n        return result;\n    }\n\n    /** Get the exponent of the greatest power of 10000 that is\n     *  less than or equal to the absolute value of this.  I.E.  if\n     *  this is 10<sup>6</sup> then log10K would return 1.\n     *  @return integer base 10000 logarithm\n     */\n    public int log10K() {\n        return exp - 1;\n    }\n\n    /** Get the specified  power of 10000.\n     * @param e desired power\n     * @return 10000<sup>e</sup>\n     */\n    public Dfp power10K(final int e) {\n        Dfp d = newInstance(getOne());\n        d.exp = e + 1;\n        return d;\n    }\n\n    /** Get the exponent of the greatest power of 10 that is less than or equal to abs(this).\n     *  @return integer base 10 logarithm\n     * @since 3.2\n     */\n    public int intLog10()  {\n        if (mant[mant.length-1] > 1000) {\n            return exp * 4 - 1;\n        }\n        if (mant[mant.length-1] > 100) {\n            return exp * 4 - 2;\n        }\n        if (mant[mant.length-1] > 10) {\n            return exp * 4 - 3;\n        }\n        return exp * 4 - 4;\n    }\n\n    /** Return the specified  power of 10.\n     * @param e desired power\n     * @return 10<sup>e</sup>\n     */\n    public Dfp power10(final int e) {\n        Dfp d = newInstance(getOne());\n\n        if (e >= 0) {\n            d.exp = e / 4 + 1;\n        } else {\n            d.exp = (e + 1) / 4;\n        }\n\n        switch ((e % 4 + 4) % 4) {\n            case 0:\n                break;\n            case 1:\n                d = d.multiply(10);\n                break;\n            case 2:\n                d = d.multiply(100);\n                break;\n            default:\n                d = d.multiply(1000);\n        }\n\n        return d;\n    }\n\n    /** Negate the mantissa of this by computing the complement.\n     *  Leaves the sign bit unchanged, used internally by add.\n     *  Denormalized numbers are handled properly here.\n     *  @param extra ???\n     *  @return ???\n     */\n    protected int complement(int extra) {\n\n        extra = RADIX-extra;\n        for (int i = 0; i < mant.length; i++) {\n            mant[i] = RADIX-mant[i]-1;\n        }\n\n        int rh = extra / RADIX;\n        extra -= rh * RADIX;\n        for (int i = 0; i < mant.length; i++) {\n            final int r = mant[i] + rh;\n            rh = r / RADIX;\n            mant[i] = r - rh * RADIX;\n        }\n\n        return extra;\n    }\n\n    /** Add x to this.\n     * @param x number to add\n     * @return sum of this and x\n     */\n    public Dfp add(final Dfp x) {\n\n        // make sure we don't mix number with different precision\n        if (field.getRadixDigits() != x.field.getRadixDigits()) {\n            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);\n            final Dfp result = newInstance(getZero());\n            result.nans = QNAN;\n            return dotrap(DfpField.FLAG_INVALID, ADD_TRAP, x, result);\n        }\n\n        /* handle special cases */\n        if (nans != FINITE || x.nans != FINITE) {\n            if (isNaN()) {\n                return this;\n            }\n\n            if (x.isNaN()) {\n                return x;\n            }\n\n            if (nans == INFINITE && x.nans == FINITE) {\n                return this;\n            }\n\n            if (x.nans == INFINITE && nans == FINITE) {\n                return x;\n            }\n\n            if (x.nans == INFINITE && nans == INFINITE && sign == x.sign) {\n                return x;\n            }\n\n            if (x.nans == INFINITE && nans == INFINITE && sign != x.sign) {\n                field.setIEEEFlagsBits(DfpField.FLAG_INVALID);\n                Dfp result = newInstance(getZero());\n                result.nans = QNAN;\n                result = dotrap(DfpField.FLAG_INVALID, ADD_TRAP, x, result);\n                return result;\n            }\n        }\n\n        /* copy this and the arg */\n        Dfp a = newInstance(this);\n        Dfp b = newInstance(x);\n\n        /* initialize the result object */\n        Dfp result = newInstance(getZero());\n\n        /* Make all numbers positive, but remember their sign */\n        final byte asign = a.sign;\n        final byte bsign = b.sign;\n\n        a.sign = 1;\n        b.sign = 1;\n\n        /* The result will be signed like the arg with greatest magnitude */\n        byte rsign = bsign;\n        if (compare(a, b) > 0) {\n            rsign = asign;\n        }\n\n        /* Handle special case when a or b is zero, by setting the exponent\n       of the zero number equal to the other one.  This avoids an alignment\n       which would cause catastropic loss of precision */\n        if (b.mant[mant.length-1] == 0) {\n            b.exp = a.exp;\n        }\n\n        if (a.mant[mant.length-1] == 0) {\n            a.exp = b.exp;\n        }\n\n        /* align number with the smaller exponent */\n        int aextradigit = 0;\n        int bextradigit = 0;\n        if (a.exp < b.exp) {\n            aextradigit = a.align(b.exp);\n        } else {\n            bextradigit = b.align(a.exp);\n        }\n\n        /* complement the smaller of the two if the signs are different */\n        if (asign != bsign) {\n            if (asign == rsign) {\n                bextradigit = b.complement(bextradigit);\n            } else {\n                aextradigit = a.complement(aextradigit);\n            }\n        }\n\n        /* add the mantissas */\n        int rh = 0; /* acts as a carry */\n        for (int i = 0; i < mant.length; i++) {\n            final int r = a.mant[i]+b.mant[i]+rh;\n            rh = r / RADIX;\n            result.mant[i] = r - rh * RADIX;\n        }\n        result.exp = a.exp;\n        result.sign = rsign;\n\n        /* handle overflow -- note, when asign!=bsign an overflow is\n         * normal and should be ignored.  */\n\n        if (rh != 0 && (asign == bsign)) {\n            final int lostdigit = result.mant[0];\n            result.shiftRight();\n            result.mant[mant.length-1] = rh;\n            final int excp = result.round(lostdigit);\n            if (excp != 0) {\n                result = dotrap(excp, ADD_TRAP, x, result);\n            }\n        }\n\n        /* normalize the result */\n        for (int i = 0; i < mant.length; i++) {\n            if (result.mant[mant.length-1] != 0) {\n                break;\n            }\n            result.shiftLeft();\n            if (i == 0) {\n                result.mant[0] = aextradigit+bextradigit;\n                aextradigit = 0;\n                bextradigit = 0;\n            }\n        }\n\n        /* result is zero if after normalization the most sig. digit is zero */\n        if (result.mant[mant.length-1] == 0) {\n            result.exp = 0;\n\n            if (asign != bsign) {\n                // Unless adding 2 negative zeros, sign is positive\n                result.sign = 1;  // Per IEEE 854-1987 Section 6.3\n            }\n        }\n\n        /* Call round to test for over/under flows */\n        final int excp = result.round(aextradigit + bextradigit);\n        if (excp != 0) {\n            result = dotrap(excp, ADD_TRAP, x, result);\n        }\n\n        return result;\n    }\n\n    /** Returns a number that is this number with the sign bit reversed.\n     * @return the opposite of this\n     */\n    public Dfp negate() {\n        Dfp result = newInstance(this);\n        result.sign = (byte) - result.sign;\n        return result;\n    }\n\n    /** Subtract x from this.\n     * @param x number to subtract\n     * @return difference of this and a\n     */\n    public Dfp subtract(final Dfp x) {\n        return add(x.negate());\n    }\n\n    /** Round this given the next digit n using the current rounding mode.\n     * @param n ???\n     * @return the IEEE flag if an exception occurred\n     */\n    protected int round(int n) {\n        boolean inc = false;\n        switch (field.getRoundingMode()) {\n            case ROUND_DOWN:\n                inc = false;\n                break;\n\n            case ROUND_UP:\n                inc = n != 0;       // round up if n!=0\n                break;\n\n            case ROUND_HALF_UP:\n                inc = n >= 5000;  // round half up\n                break;\n\n            case ROUND_HALF_DOWN:\n                inc = n > 5000;  // round half down\n                break;\n\n            case ROUND_HALF_EVEN:\n                inc = n > 5000 || (n == 5000 && (mant[0] & 1) == 1);  // round half-even\n                break;\n\n            case ROUND_HALF_ODD:\n                inc = n > 5000 || (n == 5000 && (mant[0] & 1) == 0);  // round half-odd\n                break;\n\n            case ROUND_CEIL:\n                inc = sign == 1 && n != 0;  // round ceil\n                break;\n\n            case ROUND_FLOOR:\n            default:\n                inc = sign == -1 && n != 0;  // round floor\n                break;\n        }\n\n        if (inc) {\n            // increment if necessary\n            int rh = 1;\n            for (int i = 0; i < mant.length; i++) {\n                final int r = mant[i] + rh;\n                rh = r / RADIX;\n                mant[i] = r - rh * RADIX;\n            }\n\n            if (rh != 0) {\n                shiftRight();\n                mant[mant.length-1] = rh;\n            }\n        }\n\n        // check for exceptional cases and raise signals if necessary\n        if (exp < MIN_EXP) {\n            // Gradual Underflow\n            field.setIEEEFlagsBits(DfpField.FLAG_UNDERFLOW);\n            return DfpField.FLAG_UNDERFLOW;\n        }\n\n        if (exp > MAX_EXP) {\n            // Overflow\n            field.setIEEEFlagsBits(DfpField.FLAG_OVERFLOW);\n            return DfpField.FLAG_OVERFLOW;\n        }\n\n        if (n != 0) {\n            // Inexact\n            field.setIEEEFlagsBits(DfpField.FLAG_INEXACT);\n            return DfpField.FLAG_INEXACT;\n        }\n\n        return 0;\n\n    }\n\n    /** Multiply this by x.\n     * @param x multiplicand\n     * @return product of this and x\n     */\n    public Dfp multiply(final Dfp x) {\n\n        // make sure we don't mix number with different precision\n        if (field.getRadixDigits() != x.field.getRadixDigits()) {\n            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);\n            final Dfp result = newInstance(getZero());\n            result.nans = QNAN;\n            return dotrap(DfpField.FLAG_INVALID, MULTIPLY_TRAP, x, result);\n        }\n\n        Dfp result = newInstance(getZero());\n\n        /* handle special cases */\n        if (nans != FINITE || x.nans != FINITE) {\n            if (isNaN()) {\n                return this;\n            }\n\n            if (x.isNaN()) {\n                return x;\n            }\n\n            if (nans == INFINITE && x.nans == FINITE && x.mant[mant.length-1] != 0) {\n                result = newInstance(this);\n                result.sign = (byte) (sign * x.sign);\n                return result;\n            }\n\n            if (x.nans == INFINITE && nans == FINITE && mant[mant.length-1] != 0) {\n                result = newInstance(x);\n                result.sign = (byte) (sign * x.sign);\n                return result;\n            }\n\n            if (x.nans == INFINITE && nans == INFINITE) {\n                result = newInstance(this);\n                result.sign = (byte) (sign * x.sign);\n                return result;\n            }\n\n            if ( (x.nans == INFINITE && nans == FINITE && mant[mant.length-1] == 0) ||\n                    (nans == INFINITE && x.nans == FINITE && x.mant[mant.length-1] == 0) ) {\n                field.setIEEEFlagsBits(DfpField.FLAG_INVALID);\n                result = newInstance(getZero());\n                result.nans = QNAN;\n                result = dotrap(DfpField.FLAG_INVALID, MULTIPLY_TRAP, x, result);\n                return result;\n            }\n        }\n\n        int[] product = new int[mant.length*2];  // Big enough to hold even the largest result\n\n        for (int i = 0; i < mant.length; i++) {\n            int rh = 0;  // acts as a carry\n            for (int j=0; j<mant.length; j++) {\n                int r = mant[i] * x.mant[j];    // multiply the 2 digits\n                r += product[i+j] + rh;  // add to the product digit with carry in\n\n                rh = r / RADIX;\n                product[i+j] = r - rh * RADIX;\n            }\n            product[i+mant.length] = rh;\n        }\n\n        // Find the most sig digit\n        int md = mant.length * 2 - 1;  // default, in case result is zero\n        for (int i = mant.length * 2 - 1; i >= 0; i--) {\n            if (product[i] != 0) {\n                md = i;\n                break;\n            }\n        }\n\n        // Copy the digits into the result\n        for (int i = 0; i < mant.length; i++) {\n            result.mant[mant.length - i - 1] = product[md - i];\n        }\n\n        // Fixup the exponent.\n        result.exp = exp + x.exp + md - 2 * mant.length + 1;\n        result.sign = (byte)((sign == x.sign)?1:-1);\n\n        if (result.mant[mant.length-1] == 0) {\n            // if result is zero, set exp to zero\n            result.exp = 0;\n        }\n\n        final int excp;\n        if (md > (mant.length-1)) {\n            excp = result.round(product[md-mant.length]);\n        } else {\n            excp = result.round(0); // has no effect except to check status\n        }\n\n        if (excp != 0) {\n            result = dotrap(excp, MULTIPLY_TRAP, x, result);\n        }\n\n        return result;\n\n    }\n\n    /** Multiply this by a single digit x.\n     * @param x multiplicand\n     * @return product of this and x\n     */\n    public Dfp multiply(final int x) {\n        if (x >= 0 && x < RADIX) {\n            return multiplyFast(x);\n        } else {\n            return multiply(newInstance(x));\n        }\n    }\n\n    /** Multiply this by a single digit 0&lt;=x&lt;radix.\n     * There are speed advantages in this special case.\n     * @param x multiplicand\n     * @return product of this and x\n     */\n    private Dfp multiplyFast(final int x) {\n        Dfp result = newInstance(this);\n\n        /* handle special cases */\n        if (nans != FINITE) {\n            if (isNaN()) {\n                return this;\n            }\n\n            if (nans == INFINITE && x != 0) {\n                result = newInstance(this);\n                return result;\n            }\n\n            if (nans == INFINITE && x == 0) {\n                field.setIEEEFlagsBits(DfpField.FLAG_INVALID);\n                result = newInstance(getZero());\n                result.nans = QNAN;\n                result = dotrap(DfpField.FLAG_INVALID, MULTIPLY_TRAP, newInstance(getZero()), result);\n                return result;\n            }\n        }\n\n        /* range check x */\n        if (x < 0 || x >= RADIX) {\n            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);\n            result = newInstance(getZero());\n            result.nans = QNAN;\n            result = dotrap(DfpField.FLAG_INVALID, MULTIPLY_TRAP, result, result);\n            return result;\n        }\n\n        int rh = 0;\n        for (int i = 0; i < mant.length; i++) {\n            final int r = mant[i] * x + rh;\n            rh = r / RADIX;\n            result.mant[i] = r - rh * RADIX;\n        }\n\n        int lostdigit = 0;\n        if (rh != 0) {\n            lostdigit = result.mant[0];\n            result.shiftRight();\n            result.mant[mant.length-1] = rh;\n        }\n\n        if (result.mant[mant.length-1] == 0) { // if result is zero, set exp to zero\n            result.exp = 0;\n        }\n\n        final int excp = result.round(lostdigit);\n        if (excp != 0) {\n            result = dotrap(excp, MULTIPLY_TRAP, result, result);\n        }\n\n        return result;\n    }\n\n    /** Divide this by divisor.\n     * @param divisor divisor\n     * @return quotient of this by divisor\n     */\n    public Dfp divide(Dfp divisor) {\n        int dividend[]; // current status of the dividend\n        int quotient[]; // quotient\n        int remainder[];// remainder\n        int qd;         // current quotient digit we're working with\n        int nsqd;       // number of significant quotient digits we have\n        int trial=0;    // trial quotient digit\n        int minadj;     // minimum adjustment\n        boolean trialgood; // Flag to indicate a good trail digit\n        int md=0;       // most sig digit in result\n        int excp;       // exceptions\n\n        // make sure we don't mix number with different precision\n        if (field.getRadixDigits() != divisor.field.getRadixDigits()) {\n            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);\n            final Dfp result = newInstance(getZero());\n            result.nans = QNAN;\n            return dotrap(DfpField.FLAG_INVALID, DIVIDE_TRAP, divisor, result);\n        }\n\n        Dfp result = newInstance(getZero());\n\n        /* handle special cases */\n        if (nans != FINITE || divisor.nans != FINITE) {\n            if (isNaN()) {\n                return this;\n            }\n\n            if (divisor.isNaN()) {\n                return divisor;\n            }\n\n            if (nans == INFINITE && divisor.nans == FINITE) {\n                result = newInstance(this);\n                result.sign = (byte) (sign * divisor.sign);\n                return result;\n            }\n\n            if (divisor.nans == INFINITE && nans == FINITE) {\n                result = newInstance(getZero());\n                result.sign = (byte) (sign * divisor.sign);\n                return result;\n            }\n\n            if (divisor.nans == INFINITE && nans == INFINITE) {\n                field.setIEEEFlagsBits(DfpField.FLAG_INVALID);\n                result = newInstance(getZero());\n                result.nans = QNAN;\n                result = dotrap(DfpField.FLAG_INVALID, DIVIDE_TRAP, divisor, result);\n                return result;\n            }\n        }\n\n        /* Test for divide by zero */\n        if (divisor.mant[mant.length-1] == 0) {\n            field.setIEEEFlagsBits(DfpField.FLAG_DIV_ZERO);\n            result = newInstance(getZero());\n            result.sign = (byte) (sign * divisor.sign);\n            result.nans = INFINITE;\n            result = dotrap(DfpField.FLAG_DIV_ZERO, DIVIDE_TRAP, divisor, result);\n            return result;\n        }\n\n        dividend = new int[mant.length+1];  // one extra digit needed\n        quotient = new int[mant.length+2];  // two extra digits needed 1 for overflow, 1 for rounding\n        remainder = new int[mant.length+1]; // one extra digit needed\n\n        /* Initialize our most significant digits to zero */\n\n        dividend[mant.length] = 0;\n        quotient[mant.length] = 0;\n        quotient[mant.length+1] = 0;\n        remainder[mant.length] = 0;\n\n        /* copy our mantissa into the dividend, initialize the\n       quotient while we are at it */\n\n        for (int i = 0; i < mant.length; i++) {\n            dividend[i] = mant[i];\n            quotient[i] = 0;\n            remainder[i] = 0;\n        }\n\n        /* outer loop.  Once per quotient digit */\n        nsqd = 0;\n        for (qd = mant.length+1; qd >= 0; qd--) {\n            /* Determine outer limits of our quotient digit */\n\n            // r =  most sig 2 digits of dividend\n            final int divMsb = dividend[mant.length]*RADIX+dividend[mant.length-1];\n            int min = divMsb       / (divisor.mant[mant.length-1]+1);\n            int max = (divMsb + 1) / divisor.mant[mant.length-1];\n\n            trialgood = false;\n            while (!trialgood) {\n                // try the mean\n                trial = (min+max)/2;\n\n                /* Multiply by divisor and store as remainder */\n                int rh = 0;\n                for (int i = 0; i < mant.length + 1; i++) {\n                    int dm = (i<mant.length)?divisor.mant[i]:0;\n                    final int r = (dm * trial) + rh;\n                    rh = r / RADIX;\n                    remainder[i] = r - rh * RADIX;\n                }\n\n                /* subtract the remainder from the dividend */\n                rh = 1;  // carry in to aid the subtraction\n                for (int i = 0; i < mant.length + 1; i++) {\n                    final int r = ((RADIX-1) - remainder[i]) + dividend[i] + rh;\n                    rh = r / RADIX;\n                    remainder[i] = r - rh * RADIX;\n                }\n\n                /* Lets analyze what we have here */\n                if (rh == 0) {\n                    // trial is too big -- negative remainder\n                    max = trial-1;\n                    continue;\n                }\n\n                /* find out how far off the remainder is telling us we are */\n                minadj = (remainder[mant.length] * RADIX)+remainder[mant.length-1];\n                minadj /= divisor.mant[mant.length-1] + 1;\n\n                if (minadj >= 2) {\n                    min = trial+minadj;  // update the minimum\n                    continue;\n                }\n\n                /* May have a good one here, check more thoroughly.  Basically\n           its a good one if it is less than the divisor */\n                trialgood = false;  // assume false\n                for (int i = mant.length - 1; i >= 0; i--) {\n                    if (divisor.mant[i] > remainder[i]) {\n                        trialgood = true;\n                    }\n                    if (divisor.mant[i] < remainder[i]) {\n                        break;\n                    }\n                }\n\n                if (remainder[mant.length] != 0) {\n                    trialgood = false;\n                }\n\n                if (trialgood == false) {\n                    min = trial+1;\n                }\n            }\n\n            /* Great we have a digit! */\n            quotient[qd] = trial;\n            if (trial != 0 || nsqd != 0) {\n                nsqd++;\n            }\n\n            if (field.getRoundingMode() == DfpField.RoundingMode.ROUND_DOWN && nsqd == mant.length) {\n                // We have enough for this mode\n                break;\n            }\n\n            if (nsqd > mant.length) {\n                // We have enough digits\n                break;\n            }\n\n            /* move the remainder into the dividend while left shifting */\n            dividend[0] = 0;\n            for (int i = 0; i < mant.length; i++) {\n                dividend[i + 1] = remainder[i];\n            }\n        }\n\n        /* Find the most sig digit */\n        md = mant.length;  // default\n        for (int i = mant.length + 1; i >= 0; i--) {\n            if (quotient[i] != 0) {\n                md = i;\n                break;\n            }\n        }\n\n        /* Copy the digits into the result */\n        for (int i=0; i<mant.length; i++) {\n            result.mant[mant.length-i-1] = quotient[md-i];\n        }\n\n        /* Fixup the exponent. */\n        result.exp = exp - divisor.exp + md - mant.length;\n        result.sign = (byte) ((sign == divisor.sign) ? 1 : -1);\n\n        if (result.mant[mant.length-1] == 0) { // if result is zero, set exp to zero\n            result.exp = 0;\n        }\n\n        if (md > (mant.length-1)) {\n            excp = result.round(quotient[md-mant.length]);\n        } else {\n            excp = result.round(0);\n        }\n\n        if (excp != 0) {\n            result = dotrap(excp, DIVIDE_TRAP, divisor, result);\n        }\n\n        return result;\n    }\n\n    /** Divide by a single digit less than radix.\n     *  Special case, so there are speed advantages. 0 &lt;= divisor &lt; radix\n     * @param divisor divisor\n     * @return quotient of this by divisor\n     */\n    public Dfp divide(int divisor) {\n\n        // Handle special cases\n        if (nans != FINITE) {\n            if (isNaN()) {\n                return this;\n            }\n\n            if (nans == INFINITE) {\n                return newInstance(this);\n            }\n        }\n\n        // Test for divide by zero\n        if (divisor == 0) {\n            field.setIEEEFlagsBits(DfpField.FLAG_DIV_ZERO);\n            Dfp result = newInstance(getZero());\n            result.sign = sign;\n            result.nans = INFINITE;\n            result = dotrap(DfpField.FLAG_DIV_ZERO, DIVIDE_TRAP, getZero(), result);\n            return result;\n        }\n\n        // range check divisor\n        if (divisor < 0 || divisor >= RADIX) {\n            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);\n            Dfp result = newInstance(getZero());\n            result.nans = QNAN;\n            result = dotrap(DfpField.FLAG_INVALID, DIVIDE_TRAP, result, result);\n            return result;\n        }\n\n        Dfp result = newInstance(this);\n\n        int rl = 0;\n        for (int i = mant.length-1; i >= 0; i--) {\n            final int r = rl*RADIX + result.mant[i];\n            final int rh = r / divisor;\n            rl = r - rh * divisor;\n            result.mant[i] = rh;\n        }\n\n        if (result.mant[mant.length-1] == 0) {\n            // normalize\n            result.shiftLeft();\n            final int r = rl * RADIX;        // compute the next digit and put it in\n            final int rh = r / divisor;\n            rl = r - rh * divisor;\n            result.mant[0] = rh;\n        }\n\n        final int excp = result.round(rl * RADIX / divisor);  // do the rounding\n        if (excp != 0) {\n            result = dotrap(excp, DIVIDE_TRAP, result, result);\n        }\n\n        return result;\n\n    }\n\n    /** {@inheritDoc} */\n    public Dfp reciprocal() {\n        return field.getOne().divide(this);\n    }\n\n    /** Compute the square root.\n     * @return square root of the instance\n     * @since 3.2\n     */\n    public Dfp sqrt() {\n\n        // check for unusual cases\n        if (nans == FINITE && mant[mant.length-1] == 0) {\n            // if zero\n            return newInstance(this);\n        }\n\n        if (nans != FINITE) {\n            if (nans == INFINITE && sign == 1) {\n                // if positive infinity\n                return newInstance(this);\n            }\n\n            if (nans == QNAN) {\n                return newInstance(this);\n            }\n\n            if (nans == SNAN) {\n                Dfp result;\n\n                field.setIEEEFlagsBits(DfpField.FLAG_INVALID);\n                result = newInstance(this);\n                result = dotrap(DfpField.FLAG_INVALID, SQRT_TRAP, null, result);\n                return result;\n            }\n        }\n\n        if (sign == -1) {\n            // if negative\n            Dfp result;\n\n            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);\n            result = newInstance(this);\n            result.nans = QNAN;\n            result = dotrap(DfpField.FLAG_INVALID, SQRT_TRAP, null, result);\n            return result;\n        }\n\n        Dfp x = newInstance(this);\n\n        /* Lets make a reasonable guess as to the size of the square root */\n        if (x.exp < -1 || x.exp > 1) {\n            x.exp = this.exp / 2;\n        }\n\n        /* Coarsely estimate the mantissa */\n        switch (x.mant[mant.length-1] / 2000) {\n            case 0:\n                x.mant[mant.length-1] = x.mant[mant.length-1]/2+1;\n                break;\n            case 2:\n                x.mant[mant.length-1] = 1500;\n                break;\n            case 3:\n                x.mant[mant.length-1] = 2200;\n                break;\n            default:\n                x.mant[mant.length-1] = 3000;\n        }\n\n        Dfp dx = newInstance(x);\n\n        /* Now that we have the first pass estimate, compute the rest\n       by the formula dx = (y - x*x) / (2x); */\n\n        Dfp px  = getZero();\n        Dfp ppx = getZero();\n        while (x.unequal(px)) {\n            dx = newInstance(x);\n            dx.sign = -1;\n            dx = dx.add(this.divide(x));\n            dx = dx.divide(2);\n            ppx = px;\n            px = x;\n            x = x.add(dx);\n\n            if (x.equals(ppx)) {\n                // alternating between two values\n                break;\n            }\n\n            // if dx is zero, break.  Note testing the most sig digit\n            // is a sufficient test since dx is normalized\n            if (dx.mant[mant.length-1] == 0) {\n                break;\n            }\n        }\n\n        return x;\n\n    }\n\n    /** Get a string representation of the instance.\n     * @return string representation of the instance\n     */\n    @Override\n    public String toString() {\n        if (nans != FINITE) {\n            // if non-finite exceptional cases\n            if (nans == INFINITE) {\n                return (sign < 0) ? NEG_INFINITY_STRING : POS_INFINITY_STRING;\n            } else {\n                return NAN_STRING;\n            }\n        }\n\n        if (exp > mant.length || exp < -1) {\n            return dfp2sci();\n        }\n\n        return dfp2string();\n\n    }\n\n    /** Convert an instance to a string using scientific notation.\n     * @return string representation of the instance in scientific notation\n     */\n    protected String dfp2sci() {\n        char rawdigits[]    = new char[mant.length * 4];\n        char outputbuffer[] = new char[mant.length * 4 + 20];\n        int p;\n        int q;\n        int e;\n        int ae;\n        int shf;\n\n        // Get all the digits\n        p = 0;\n        for (int i = mant.length - 1; i >= 0; i--) {\n            rawdigits[p++] = (char) ((mant[i] / 1000) + '0');\n            rawdigits[p++] = (char) (((mant[i] / 100) %10) + '0');\n            rawdigits[p++] = (char) (((mant[i] / 10) % 10) + '0');\n            rawdigits[p++] = (char) (((mant[i]) % 10) + '0');\n        }\n\n        // Find the first non-zero one\n        for (p = 0; p < rawdigits.length; p++) {\n            if (rawdigits[p] != '0') {\n                break;\n            }\n        }\n        shf = p;\n\n        // Now do the conversion\n        q = 0;\n        if (sign == -1) {\n            outputbuffer[q++] = '-';\n        }\n\n        if (p != rawdigits.length) {\n            // there are non zero digits...\n            outputbuffer[q++] = rawdigits[p++];\n            outputbuffer[q++] = '.';\n\n            while (p<rawdigits.length) {\n                outputbuffer[q++] = rawdigits[p++];\n            }\n        } else {\n            outputbuffer[q++] = '0';\n            outputbuffer[q++] = '.';\n            outputbuffer[q++] = '0';\n            outputbuffer[q++] = 'e';\n            outputbuffer[q++] = '0';\n            return new String(outputbuffer, 0, 5);\n        }\n\n        outputbuffer[q++] = 'e';\n\n        // Find the msd of the exponent\n\n        e = exp * 4 - shf - 1;\n        ae = e;\n        if (e < 0) {\n            ae = -e;\n        }\n\n        // Find the largest p such that p < e\n        for (p = 1000000000; p > ae; p /= 10) {\n            // nothing to do\n        }\n\n        if (e < 0) {\n            outputbuffer[q++] = '-';\n        }\n\n        while (p > 0) {\n            outputbuffer[q++] = (char)(ae / p + '0');\n            ae %= p;\n            p /= 10;\n        }\n\n        return new String(outputbuffer, 0, q);\n\n    }\n\n    /** Convert an instance to a string using normal notation.\n     * @return string representation of the instance in normal notation\n     */\n    protected String dfp2string() {\n        char buffer[] = new char[mant.length*4 + 20];\n        int p = 1;\n        int q;\n        int e = exp;\n        boolean pointInserted = false;\n\n        buffer[0] = ' ';\n\n        if (e <= 0) {\n            buffer[p++] = '0';\n            buffer[p++] = '.';\n            pointInserted = true;\n        }\n\n        while (e < 0) {\n            buffer[p++] = '0';\n            buffer[p++] = '0';\n            buffer[p++] = '0';\n            buffer[p++] = '0';\n            e++;\n        }\n\n        for (int i = mant.length - 1; i >= 0; i--) {\n            buffer[p++] = (char) ((mant[i] / 1000) + '0');\n            buffer[p++] = (char) (((mant[i] / 100) % 10) + '0');\n            buffer[p++] = (char) (((mant[i] / 10) % 10) + '0');\n            buffer[p++] = (char) (((mant[i]) % 10) + '0');\n            if (--e == 0) {\n                buffer[p++] = '.';\n                pointInserted = true;\n            }\n        }\n\n        while (e > 0) {\n            buffer[p++] = '0';\n            buffer[p++] = '0';\n            buffer[p++] = '0';\n            buffer[p++] = '0';\n            e--;\n        }\n\n        if (!pointInserted) {\n            // Ensure we have a radix point!\n            buffer[p++] = '.';\n        }\n\n        // Suppress leading zeros\n        q = 1;\n        while (buffer[q] == '0') {\n            q++;\n        }\n        if (buffer[q] == '.') {\n            q--;\n        }\n\n        // Suppress trailing zeros\n        while (buffer[p-1] == '0') {\n            p--;\n        }\n\n        // Insert sign\n        if (sign < 0) {\n            buffer[--q] = '-';\n        }\n\n        return new String(buffer, q, p - q);\n\n    }\n\n    /** Raises a trap.  This does not set the corresponding flag however.\n     *  @param type the trap type\n     *  @param what - name of routine trap occurred in\n     *  @param oper - input operator to function\n     *  @param result - the result computed prior to the trap\n     *  @return The suggested return value from the trap handler\n     */\n    public Dfp dotrap(int type, String what, Dfp oper, Dfp result) {\n        Dfp def = result;\n\n        switch (type) {\n            case DfpField.FLAG_INVALID:\n                def = newInstance(getZero());\n                def.sign = result.sign;\n                def.nans = QNAN;\n                break;\n\n            case DfpField.FLAG_DIV_ZERO:\n                if (nans == FINITE && mant[mant.length-1] != 0) {\n                    // normal case, we are finite, non-zero\n                    def = newInstance(getZero());\n                    def.sign = (byte)(sign*oper.sign);\n                    def.nans = INFINITE;\n                }\n\n                if (nans == FINITE && mant[mant.length-1] == 0) {\n                    //  0/0\n                    def = newInstance(getZero());\n                    def.nans = QNAN;\n                }\n\n                if (nans == INFINITE || nans == QNAN) {\n                    def = newInstance(getZero());\n                    def.nans = QNAN;\n                }\n\n                if (nans == INFINITE || nans == SNAN) {\n                    def = newInstance(getZero());\n                    def.nans = QNAN;\n                }\n                break;\n\n            case DfpField.FLAG_UNDERFLOW:\n                if ( (result.exp+mant.length) < MIN_EXP) {\n                    def = newInstance(getZero());\n                    def.sign = result.sign;\n                } else {\n                    def = newInstance(result);  // gradual underflow\n                }\n                result.exp += ERR_SCALE;\n                break;\n\n            case DfpField.FLAG_OVERFLOW:\n                result.exp -= ERR_SCALE;\n                def = newInstance(getZero());\n                def.sign = result.sign;\n                def.nans = INFINITE;\n                break;\n\n            default: def = result; break;\n        }\n\n        return trap(type, what, oper, def, result);\n\n    }\n\n    /** Trap handler.  Subclasses may override this to provide trap\n     *  functionality per IEEE 854-1987.\n     *\n     *  @param type  The exception type - e.g. FLAG_OVERFLOW\n     *  @param what  The name of the routine we were in e.g. divide()\n     *  @param oper  An operand to this function if any\n     *  @param def   The default return value if trap not enabled\n     *  @param result    The result that is specified to be delivered per\n     *                   IEEE 854, if any\n     *  @return the value that should be return by the operation triggering the trap\n     */\n    protected Dfp trap(int type, String what, Dfp oper, Dfp def, Dfp result) {\n        return def;\n    }\n\n    /** Returns the type - one of FINITE, INFINITE, SNAN, QNAN.\n     * @return type of the number\n     */\n    public int classify() {\n        return nans;\n    }\n\n    /** Creates an instance that is the same as x except that it has the sign of y.\n     * abs(x) = dfp.copysign(x, dfp.one)\n     * @param x number to get the value from\n     * @param y number to get the sign from\n     * @return a number with the value of x and the sign of y\n     */\n    public static Dfp copysign(final Dfp x, final Dfp y) {\n        Dfp result = x.newInstance(x);\n        result.sign = y.sign;\n        return result;\n    }\n\n    /** Returns the next number greater than this one in the direction of x.\n     * If this==x then simply returns this.\n     * @param x direction where to look at\n     * @return closest number next to instance in the direction of x\n     */\n    public Dfp nextAfter(final Dfp x) {\n\n        // make sure we don't mix number with different precision\n        if (field.getRadixDigits() != x.field.getRadixDigits()) {\n            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);\n            final Dfp result = newInstance(getZero());\n            result.nans = QNAN;\n            return dotrap(DfpField.FLAG_INVALID, NEXT_AFTER_TRAP, x, result);\n        }\n\n        // if this is greater than x\n        boolean up = false;\n        if (this.lessThan(x)) {\n            up = true;\n        }\n\n        if (compare(this, x) == 0) {\n            return newInstance(x);\n        }\n\n        if (lessThan(getZero())) {\n            up = !up;\n        }\n\n        final Dfp inc;\n        Dfp result;\n        if (up) {\n            inc = newInstance(getOne());\n            inc.exp = this.exp-mant.length+1;\n            inc.sign = this.sign;\n\n            if (this.equals(getZero())) {\n                inc.exp = MIN_EXP-mant.length;\n            }\n\n            result = add(inc);\n        } else {\n            inc = newInstance(getOne());\n            inc.exp = this.exp;\n            inc.sign = this.sign;\n\n            if (this.equals(inc)) {\n                inc.exp = this.exp-mant.length;\n            } else {\n                inc.exp = this.exp-mant.length+1;\n            }\n\n            if (this.equals(getZero())) {\n                inc.exp = MIN_EXP-mant.length;\n            }\n\n            result = this.subtract(inc);\n        }\n\n        if (result.classify() == INFINITE && this.classify() != INFINITE) {\n            field.setIEEEFlagsBits(DfpField.FLAG_INEXACT);\n            result = dotrap(DfpField.FLAG_INEXACT, NEXT_AFTER_TRAP, x, result);\n        }\n\n        if (result.equals(getZero()) && this.equals(getZero()) == false) {\n            field.setIEEEFlagsBits(DfpField.FLAG_INEXACT);\n            result = dotrap(DfpField.FLAG_INEXACT, NEXT_AFTER_TRAP, x, result);\n        }\n\n        return result;\n\n    }\n\n    /** Convert the instance into a double.\n     * @return a double approximating the instance\n     * @see #toSplitDouble()\n     */\n    public double toDouble() {\n\n        if (isInfinite()) {\n            if (lessThan(getZero())) {\n                return Double.NEGATIVE_INFINITY;\n            } else {\n                return Double.POSITIVE_INFINITY;\n            }\n        }\n\n        if (isNaN()) {\n            return Double.NaN;\n        }\n\n        Dfp y = this;\n        boolean negate = false;\n        int cmp0 = compare(this, getZero());\n        if (cmp0 == 0) {\n            return sign < 0 ? -0.0 : +0.0;\n        } else if (cmp0 < 0) {\n            y = negate();\n            negate = true;\n        }\n\n        /* Find the exponent, first estimate by integer log10, then adjust.\n         Should be faster than doing a natural logarithm.  */\n        int exponent = (int)(y.intLog10() * 3.32);\n        if (exponent < 0) {\n            exponent--;\n        }\n\n        Dfp tempDfp = DfpMath.pow(getTwo(), exponent);\n        while (tempDfp.lessThan(y) || tempDfp.equals(y)) {\n            tempDfp = tempDfp.multiply(2);\n            exponent++;\n        }\n        exponent--;\n\n        /* We have the exponent, now work on the mantissa */\n\n        y = y.divide(DfpMath.pow(getTwo(), exponent));\n        if (exponent > -1023) {\n            y = y.subtract(getOne());\n        }\n\n        if (exponent < -1074) {\n            return 0;\n        }\n\n        if (exponent > 1023) {\n            return negate ? Double.NEGATIVE_INFINITY : Double.POSITIVE_INFINITY;\n        }\n\n\n        y = y.multiply(newInstance(4503599627370496l)).rint();\n        String str = y.toString();\n        str = str.substring(0, str.length()-1);\n        long mantissa = Long.parseLong(str);\n\n        if (mantissa == 4503599627370496L) {\n            // Handle special case where we round up to next power of two\n            mantissa = 0;\n            exponent++;\n        }\n\n        /* Its going to be subnormal, so make adjustments */\n        if (exponent <= -1023) {\n            exponent--;\n        }\n\n        while (exponent < -1023) {\n            exponent++;\n            mantissa >>>= 1;\n        }\n\n        long bits = mantissa | ((exponent + 1023L) << 52);\n        double x = Double.longBitsToDouble(bits);\n\n        if (negate) {\n            x = -x;\n        }\n\n        return x;\n\n    }\n\n    /** Convert the instance into a split double.\n     * @return an array of two doubles which sum represent the instance\n     * @see #toDouble()\n     */\n    public double[] toSplitDouble() {\n        double split[] = new double[2];\n        long mask = 0xffffffffc0000000L;\n\n        split[0] = Double.longBitsToDouble(Double.doubleToLongBits(toDouble()) & mask);\n        split[1] = subtract(newInstance(split[0])).toDouble();\n\n        return split;\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public double getReal() {\n        return toDouble();\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp add(final double a) {\n        return add(newInstance(a));\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp subtract(final double a) {\n        return subtract(newInstance(a));\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp multiply(final double a) {\n        return multiply(newInstance(a));\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp divide(final double a) {\n        return divide(newInstance(a));\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp remainder(final double a) {\n        return remainder(newInstance(a));\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public long round() {\n        return FastMath.round(toDouble());\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp signum() {\n        if (isNaN() || isZero()) {\n            return this;\n        } else {\n            return newInstance(sign > 0 ? +1 : -1);\n        }\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp copySign(final Dfp s) {\n        if ((sign >= 0 && s.sign >= 0) || (sign < 0 && s.sign < 0)) { // Sign is currently OK\n            return this;\n        }\n        return negate(); // flip sign\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp copySign(final double s) {\n        long sb = Double.doubleToLongBits(s);\n        if ((sign >= 0 && sb >= 0) || (sign < 0 && sb < 0)) { // Sign is currently OK\n            return this;\n        }\n        return negate(); // flip sign\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp scalb(final int n) {\n        return multiply(DfpMath.pow(getTwo(), n));\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp hypot(final Dfp y) {\n        return multiply(this).add(y.multiply(y)).sqrt();\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp cbrt() {\n        return rootN(3);\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp rootN(final int n) {\n        return (sign >= 0) ?\n               DfpMath.pow(this, getOne().divide(n)) :\n               DfpMath.pow(negate(), getOne().divide(n)).negate();\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp pow(final double p) {\n        return DfpMath.pow(this, newInstance(p));\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp pow(final int n) {\n        return DfpMath.pow(this, n);\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp pow(final Dfp e) {\n        return DfpMath.pow(this, e);\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp exp() {\n        return DfpMath.exp(this);\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp expm1() {\n        return DfpMath.exp(this).subtract(getOne());\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp log() {\n        return DfpMath.log(this);\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp log1p() {\n        return DfpMath.log(this.add(getOne()));\n    }\n\n//  TODO: deactivate this implementation (and return type) in 4.0\n    /** Get the exponent of the greatest power of 10 that is less than or equal to abs(this).\n     *  @return integer base 10 logarithm\n     *  @deprecated as of 3.2, replaced by {@link #intLog10()}, in 4.0 the return type\n     *  will be changed to Dfp\n     */\n    @Deprecated\n    public int log10()  {\n        return intLog10();\n    }\n\n//    TODO: activate this implementation (and return type) in 4.0\n//    /** {@inheritDoc}\n//     * @since 3.2\n//     */\n//    public Dfp log10() {\n//        return DfpMath.log(this).divide(DfpMath.log(newInstance(10)));\n//    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp cos() {\n        return DfpMath.cos(this);\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp sin() {\n        return DfpMath.sin(this);\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp tan() {\n        return DfpMath.tan(this);\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp acos() {\n        return DfpMath.acos(this);\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp asin() {\n        return DfpMath.asin(this);\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp atan() {\n        return DfpMath.atan(this);\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp atan2(final Dfp x)\n        throws DimensionMismatchException {\n\n        // compute r = sqrt(x^2+y^2)\n        final Dfp r = x.multiply(x).add(multiply(this)).sqrt();\n\n        if (x.sign >= 0) {\n\n            // compute atan2(y, x) = 2 atan(y / (r + x))\n            return getTwo().multiply(divide(r.add(x)).atan());\n\n        } else {\n\n            // compute atan2(y, x) = +/- pi - 2 atan(y / (r - x))\n            final Dfp tmp = getTwo().multiply(divide(r.subtract(x)).atan());\n            final Dfp pmPi = newInstance((tmp.sign <= 0) ? -FastMath.PI : FastMath.PI);\n            return pmPi.subtract(tmp);\n\n        }\n\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp cosh() {\n        return DfpMath.exp(this).add(DfpMath.exp(negate())).divide(2);\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp sinh() {\n        return DfpMath.exp(this).subtract(DfpMath.exp(negate())).divide(2);\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp tanh() {\n        final Dfp ePlus  = DfpMath.exp(this);\n        final Dfp eMinus = DfpMath.exp(negate());\n        return ePlus.subtract(eMinus).divide(ePlus.add(eMinus));\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp acosh() {\n        return multiply(this).subtract(getOne()).sqrt().add(this).log();\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp asinh() {\n        return multiply(this).add(getOne()).sqrt().add(this).log();\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp atanh() {\n        return getOne().add(this).divide(getOne().subtract(this)).log().divide(2);\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp linearCombination(final Dfp[] a, final Dfp[] b)\n        throws DimensionMismatchException {\n        if (a.length != b.length) {\n            throw new DimensionMismatchException(a.length, b.length);\n        }\n        Dfp r = getZero();\n        for (int i = 0; i < a.length; ++i) {\n            r = r.add(a[i].multiply(b[i]));\n        }\n        return r;\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp linearCombination(final double[] a, final Dfp[] b)\n        throws DimensionMismatchException {\n        if (a.length != b.length) {\n            throw new DimensionMismatchException(a.length, b.length);\n        }\n        Dfp r = getZero();\n        for (int i = 0; i < a.length; ++i) {\n            r = r.add(b[i].multiply(a[i]));\n        }\n        return r;\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp linearCombination(final Dfp a1, final Dfp b1, final Dfp a2, final Dfp b2) {\n        return a1.multiply(b1).add(a2.multiply(b2));\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp linearCombination(final double a1, final Dfp b1, final double a2, final Dfp b2) {\n        return b1.multiply(a1).add(b2.multiply(a2));\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp linearCombination(final Dfp a1, final Dfp b1,\n                                 final Dfp a2, final Dfp b2,\n                                 final Dfp a3, final Dfp b3) {\n        return a1.multiply(b1).add(a2.multiply(b2)).add(a3.multiply(b3));\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp linearCombination(final double a1, final Dfp b1,\n                                 final double a2, final Dfp b2,\n                                 final double a3, final Dfp b3) {\n        return b1.multiply(a1).add(b2.multiply(a2)).add(b3.multiply(a3));\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp linearCombination(final Dfp a1, final Dfp b1, final Dfp a2, final Dfp b2,\n                                 final Dfp a3, final Dfp b3, final Dfp a4, final Dfp b4) {\n        return a1.multiply(b1).add(a2.multiply(b2)).add(a3.multiply(b3)).add(a4.multiply(b4));\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp linearCombination(final double a1, final Dfp b1, final double a2, final Dfp b2,\n                                 final double a3, final Dfp b3, final double a4, final Dfp b4) {\n        return b1.multiply(a1).add(b2.multiply(a2)).add(b3.multiply(a3)).add(b4.multiply(a4));\n    }\n\n}\n",
  "tokensGeneralGrammar" : [ "null", "true", "false", ",", ".", ":", ";", "?", "(", ")", "jdVar", "stream", "Arrays", "allMatch", "noneMatch", "anyMatch", "~", ">>", "<<", ">>>", "|", "&", "^", "+", "-", "/", "*", "%", "&&", "||", ">=", "<=", ">", "<", "==", "!=", "instanceof", "class", "methodResultID", "this" ],
  "tokensGeneralValuesGlobalDictionary" : [ [ "0", "int" ], [ "1", "int" ], [ "-1", "int" ], [ "0.0", "double" ], [ "1.0", "double" ], [ "-1.0", "double" ], [ "\"\"", "String" ], [ "\" \"", "String" ] ],
  "tokensProjectClasses" : [ [ "RealFieldElement", "org.apache.commons.math3" ], [ "Primes", "org.apache.commons.math3.primes" ], [ "SmallPrimes", "org.apache.commons.math3.primes" ], [ "PollardRho", "org.apache.commons.math3.primes" ], [ "CurveFitter", "org.apache.commons.math3.fitting" ], [ "GaussianCurveFitter", "org.apache.commons.math3.fitting" ], [ "SimpleCurveFitter", "org.apache.commons.math3.fitting" ], [ "PolynomialFitter", "org.apache.commons.math3.fitting" ], [ "HarmonicFitter", "org.apache.commons.math3.fitting" ], [ "WeightedObservedPoint", "org.apache.commons.math3.fitting" ], [ "ParameterValidator", "org.apache.commons.math3.fitting.leastsquares" ], [ "LevenbergMarquardtOptimizer", "org.apache.commons.math3.fitting.leastsquares" ], [ "EvaluationRmsChecker", "org.apache.commons.math3.fitting.leastsquares" ], [ "OptimumImpl", "org.apache.commons.math3.fitting.leastsquares" ], [ "LeastSquaresAdapter", "org.apache.commons.math3.fitting.leastsquares" ], [ "DenseWeightedEvaluation", "org.apache.commons.math3.fitting.leastsquares" ], [ "LeastSquaresOptimizer", "org.apache.commons.math3.fitting.leastsquares" ], [ "AbstractEvaluation", "org.apache.commons.math3.fitting.leastsquares" ], [ "GaussNewtonOptimizer", "org.apache.commons.math3.fitting.leastsquares" ], [ "LeastSquaresFactory", "org.apache.commons.math3.fitting.leastsquares" ], [ "ValueAndJacobianFunction", "org.apache.commons.math3.fitting.leastsquares" ], [ "MultivariateJacobianFunction", "org.apache.commons.math3.fitting.leastsquares" ], [ "LeastSquaresBuilder", "org.apache.commons.math3.fitting.leastsquares" ], [ "LeastSquaresProblem", "org.apache.commons.math3.fitting.leastsquares" ], [ "WeightedObservedPoints", "org.apache.commons.math3.fitting" ], [ "GaussianFitter", "org.apache.commons.math3.fitting" ], [ "AbstractCurveFitter", "org.apache.commons.math3.fitting" ], [ "HarmonicCurveFitter", "org.apache.commons.math3.fitting" ], [ "PolynomialCurveFitter", "org.apache.commons.math3.fitting" ], [ "UnivariateMatrixFunction", "org.apache.commons.math3.analysis" ], [ "FunctionUtils", "org.apache.commons.math3.analysis" ], [ "DifferentiableUnivariateMatrixFunction", "org.apache.commons.math3.analysis" ], [ "IterativeLegendreGaussIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "LegendreGaussIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "MidPointIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "RombergIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "SimpsonIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "BaseRuleFactory", "org.apache.commons.math3.analysis.integration.gauss" ], [ "HermiteRuleFactory", "org.apache.commons.math3.analysis.integration.gauss" ], [ "GaussIntegratorFactory", "org.apache.commons.math3.analysis.integration.gauss" ], [ "LegendreRuleFactory", "org.apache.commons.math3.analysis.integration.gauss" ], [ "LegendreHighPrecisionRuleFactory", "org.apache.commons.math3.analysis.integration.gauss" ], [ "SymmetricGaussIntegrator", "org.apache.commons.math3.analysis.integration.gauss" ], [ "GaussIntegrator", "org.apache.commons.math3.analysis.integration.gauss" ], [ "BaseAbstractUnivariateIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "UnivariateIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "TrapezoidIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "BivariateFunction", "org.apache.commons.math3.analysis" ], [ "DifferentiableUnivariateFunction", "org.apache.commons.math3.analysis" ], [ "DifferentiableUnivariateVectorFunction", "org.apache.commons.math3.analysis" ], [ "UnivariateVectorFunction", "org.apache.commons.math3.analysis" ], [ "AbstractDifferentiableUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "AbstractUnivariateDifferentiableSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BaseUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "PegasusSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BracketedUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "UnivariateSolverUtils", "org.apache.commons.math3.analysis.solvers" ], [ "FieldBracketingNthOrderBrentSolver", "org.apache.commons.math3.analysis.solvers" ], [ "NewtonRaphsonSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BaseSecantSolver", "org.apache.commons.math3.analysis.solvers" ], [ "SecantSolver", "org.apache.commons.math3.analysis.solvers" ], [ "DifferentiableUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "UnivariateDifferentiableSolver", "org.apache.commons.math3.analysis.solvers" ], [ "MullerSolver2", "org.apache.commons.math3.analysis.solvers" ], [ "AbstractPolynomialSolver", "org.apache.commons.math3.analysis.solvers" ], [ "MullerSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BaseAbstractUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BrentSolver", "org.apache.commons.math3.analysis.solvers" ], [ "LaguerreSolver", "org.apache.commons.math3.analysis.solvers" ], [ "IllinoisSolver", "org.apache.commons.math3.analysis.solvers" ], [ "PolynomialSolver", "org.apache.commons.math3.analysis.solvers" ], [ "RegulaFalsiSolver", "org.apache.commons.math3.analysis.solvers" ], [ "AllowedSolution", "org.apache.commons.math3.analysis.solvers" ], [ "NewtonSolver", "org.apache.commons.math3.analysis.solvers" ], [ "RiddersSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BisectionSolver", "org.apache.commons.math3.analysis.solvers" ], [ "AbstractUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "UnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BracketingNthOrderBrentSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BracketedRealFieldUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "Asin", "org.apache.commons.math3.analysis.function" ], [ "Cosh", "org.apache.commons.math3.analysis.function" ], [ "Multiply", "org.apache.commons.math3.analysis.function" ], [ "Atan", "org.apache.commons.math3.analysis.function" ], [ "Asinh", "org.apache.commons.math3.analysis.function" ], [ "Rint", "org.apache.commons.math3.analysis.function" ], [ "Cos", "org.apache.commons.math3.analysis.function" ], [ "StepFunction", "org.apache.commons.math3.analysis.function" ], [ "Add", "org.apache.commons.math3.analysis.function" ], [ "Sqrt", "org.apache.commons.math3.analysis.function" ], [ "Inverse", "org.apache.commons.math3.analysis.function" ], [ "Gaussian", "org.apache.commons.math3.analysis.function" ], [ "Pow", "org.apache.commons.math3.analysis.function" ], [ "Exp", "org.apache.commons.math3.analysis.function" ], [ "Tanh", "org.apache.commons.math3.analysis.function" ], [ "Cbrt", "org.apache.commons.math3.analysis.function" ], [ "Log1p", "org.apache.commons.math3.analysis.function" ], [ "Constant", "org.apache.commons.math3.analysis.function" ], [ "Identity", "org.apache.commons.math3.analysis.function" ], [ "Signum", "org.apache.commons.math3.analysis.function" ], [ "Logit", "org.apache.commons.math3.analysis.function" ], [ "Ceil", "org.apache.commons.math3.analysis.function" ], [ "Subtract", "org.apache.commons.math3.analysis.function" ], [ "Sinh", "org.apache.commons.math3.analysis.function" ], [ "Max", "org.apache.commons.math3.analysis.function" ], [ "Acosh", "org.apache.commons.math3.analysis.function" ], [ "Min", "org.apache.commons.math3.analysis.function" ], [ "Expm1", "org.apache.commons.math3.analysis.function" ], [ "Abs", "org.apache.commons.math3.analysis.function" ], [ "Divide", "org.apache.commons.math3.analysis.function" ], [ "Log", "org.apache.commons.math3.analysis.function" ], [ "Ulp", "org.apache.commons.math3.analysis.function" ], [ "Log10", "org.apache.commons.math3.analysis.function" ], [ "Power", "org.apache.commons.math3.analysis.function" ], [ "Minus", "org.apache.commons.math3.analysis.function" ], [ "Atan2", "org.apache.commons.math3.analysis.function" ], [ "Logistic", "org.apache.commons.math3.analysis.function" ], [ "Acos", "org.apache.commons.math3.analysis.function" ], [ "Floor", "org.apache.commons.math3.analysis.function" ], [ "Sigmoid", "org.apache.commons.math3.analysis.function" ], [ "Sinc", "org.apache.commons.math3.analysis.function" ], [ "Atanh", "org.apache.commons.math3.analysis.function" ], [ "HarmonicOscillator", "org.apache.commons.math3.analysis.function" ], [ "Tan", "org.apache.commons.math3.analysis.function" ], [ "Sin", "org.apache.commons.math3.analysis.function" ], [ "MultivariateFunction", "org.apache.commons.math3.analysis" ], [ "DifferentiableMultivariateFunction", "org.apache.commons.math3.analysis" ], [ "UnivariateFunction", "org.apache.commons.math3.analysis" ], [ "TrivariateFunction", "org.apache.commons.math3.analysis" ], [ "MultivariateMatrixFunction", "org.apache.commons.math3.analysis" ], [ "ParametricUnivariateFunction", "org.apache.commons.math3.analysis" ], [ "UnivariateDifferentiableVectorFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "UnivariateDifferentiableMatrixFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "DSCompiler", "org.apache.commons.math3.analysis.differentiation" ], [ "SparseGradient", "org.apache.commons.math3.analysis.differentiation" ], [ "UnivariateFunctionDifferentiator", "org.apache.commons.math3.analysis.differentiation" ], [ "UnivariateMatrixFunctionDifferentiator", "org.apache.commons.math3.analysis.differentiation" ], [ "MultivariateDifferentiableFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "JacobianFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "GradientFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "DerivativeStructure", "org.apache.commons.math3.analysis.differentiation" ], [ "UnivariateVectorFunctionDifferentiator", "org.apache.commons.math3.analysis.differentiation" ], [ "FiniteDifferencesDifferentiator", "org.apache.commons.math3.analysis.differentiation" ], [ "MultivariateDifferentiableVectorFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "UnivariateDifferentiableFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "MultivariateVectorFunction", "org.apache.commons.math3.analysis" ], [ "DifferentiableMultivariateVectorFunction", "org.apache.commons.math3.analysis" ], [ "PolynomialFunctionNewtonForm", "org.apache.commons.math3.analysis.polynomials" ], [ "PolynomialFunctionLagrangeForm", "org.apache.commons.math3.analysis.polynomials" ], [ "PolynomialSplineFunction", "org.apache.commons.math3.analysis.polynomials" ], [ "PolynomialsUtils", "org.apache.commons.math3.analysis.polynomials" ], [ "PolynomialFunction", "org.apache.commons.math3.analysis.polynomials" ], [ "RealFieldUnivariateFunction", "org.apache.commons.math3.analysis" ], [ "TricubicInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "BicubicSplineInterpolatingFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "BicubicSplineFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "LoessInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "DividedDifferenceInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "HermiteInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "TricubicInterpolatingFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "TricubicFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "TrivariateGridInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "NevilleInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "MicrosphereProjectionInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "AkimaSplineInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "MultivariateInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "BicubicSplineInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "TricubicSplineInterpolatingFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "TricubicSplineFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "FieldHermiteInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "InterpolatingMicrosphere", "org.apache.commons.math3.analysis.interpolation" ], [ "LinearInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "BivariateGridInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "UnivariatePeriodicInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "BicubicInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "UnivariateInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "SmoothingPolynomialBicubicSplineInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "PiecewiseBicubicSplineInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "BicubicInterpolatingFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "BicubicFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "SplineInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "TricubicSplineInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "InterpolatingMicrosphere2D", "org.apache.commons.math3.analysis.interpolation" ], [ "PiecewiseBicubicSplineInterpolatingFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "MicrosphereInterpolatingFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "MicrosphereInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "Precision", "org.apache.commons.math3.util" ], [ "MultidimensionalCounter", "org.apache.commons.math3.util" ], [ "DoubleArray", "org.apache.commons.math3.util" ], [ "Incrementor", "org.apache.commons.math3.util" ], [ "OpenIntToDoubleHashMap", "org.apache.commons.math3.util" ], [ "OpenIntToFieldHashMap", "org.apache.commons.math3.util" ], [ "MathArrays", "org.apache.commons.math3.util" ], [ "Pair", "org.apache.commons.math3.util" ], [ "FastMathCalc", "org.apache.commons.math3.util" ], [ "FastMath", "org.apache.commons.math3.util" ], [ "ResizableDoubleArray", "org.apache.commons.math3.util" ], [ "BigRealField", "org.apache.commons.math3.util" ], [ "Decimal64Field", "org.apache.commons.math3.util" ], [ "Combinations", "org.apache.commons.math3.util" ], [ "MathUtils", "org.apache.commons.math3.util" ], [ "NumberTransformer", "org.apache.commons.math3.util" ], [ "ContinuedFraction", "org.apache.commons.math3.util" ], [ "RandomPivotingStrategy", "org.apache.commons.math3.util" ], [ "IterationManager", "org.apache.commons.math3.util" ], [ "CompositeFormat", "org.apache.commons.math3.util" ], [ "KthSelector", "org.apache.commons.math3.util" ], [ "IterationEvent", "org.apache.commons.math3.util" ], [ "TransformerMap", "org.apache.commons.math3.util" ], [ "IntegerSequence", "org.apache.commons.math3.util" ], [ "FastMathLiteralArrays", "org.apache.commons.math3.util" ], [ "CombinatoricsUtils", "org.apache.commons.math3.util" ], [ "IterationListener", "org.apache.commons.math3.util" ], [ "PivotingStrategyInterface", "org.apache.commons.math3.util" ], [ "CentralPivotingStrategy", "org.apache.commons.math3.util" ], [ "Decimal64", "org.apache.commons.math3.util" ], [ "DefaultTransformer", "org.apache.commons.math3.util" ], [ "BigReal", "org.apache.commons.math3.util" ], [ "ArithmeticUtils", "org.apache.commons.math3.util" ], [ "MedianOf3PivotingStrategy", "org.apache.commons.math3.util" ], [ "ComplexFormat", "org.apache.commons.math3.complex" ], [ "ComplexField", "org.apache.commons.math3.complex" ], [ "RootsOfUnity", "org.apache.commons.math3.complex" ], [ "Quaternion", "org.apache.commons.math3.complex" ], [ "Complex", "org.apache.commons.math3.complex" ], [ "ComplexUtils", "org.apache.commons.math3.complex" ], [ "DifferentiableMultivariateVectorOptimizer", "org.apache.commons.math3.optimization" ], [ "LeastSquaresConverter", "org.apache.commons.math3.optimization" ], [ "BaseMultivariateSimpleBoundsOptimizer", "org.apache.commons.math3.optimization" ], [ "PointValuePair", "org.apache.commons.math3.optimization" ], [ "DifferentiableMultivariateOptimizer", "org.apache.commons.math3.optimization" ], [ "SimpleValueChecker", "org.apache.commons.math3.optimization" ], [ "CurveFitter", "org.apache.commons.math3.optimization.fitting" ], [ "PolynomialFitter", "org.apache.commons.math3.optimization.fitting" ], [ "HarmonicFitter", "org.apache.commons.math3.optimization.fitting" ], [ "WeightedObservedPoint", "org.apache.commons.math3.optimization.fitting" ], [ "GaussianFitter", "org.apache.commons.math3.optimization.fitting" ], [ "AbstractConvergenceChecker", "org.apache.commons.math3.optimization" ], [ "AbstractSimplex", "org.apache.commons.math3.optimization.direct" ], [ "SimplexOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "BOBYQAOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "NelderMeadSimplex", "org.apache.commons.math3.optimization.direct" ], [ "MultivariateFunctionMappingAdapter", "org.apache.commons.math3.optimization.direct" ], [ "BaseAbstractMultivariateSimpleBoundsOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "BaseAbstractMultivariateVectorOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "CMAESOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "MultivariateFunctionPenaltyAdapter", "org.apache.commons.math3.optimization.direct" ], [ "BaseAbstractMultivariateOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "PowellOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "MultiDirectionalSimplex", "org.apache.commons.math3.optimization.direct" ], [ "InitialGuess", "org.apache.commons.math3.optimization" ], [ "Preconditioner", "org.apache.commons.math3.optimization.general" ], [ "LevenbergMarquardtOptimizer", "org.apache.commons.math3.optimization.general" ], [ "AbstractLeastSquaresOptimizer", "org.apache.commons.math3.optimization.general" ], [ "AbstractDifferentiableOptimizer", "org.apache.commons.math3.optimization.general" ], [ "GaussNewtonOptimizer", "org.apache.commons.math3.optimization.general" ], [ "AbstractScalarDifferentiableOptimizer", "org.apache.commons.math3.optimization.general" ], [ "NonLinearConjugateGradientOptimizer", "org.apache.commons.math3.optimization.general" ], [ "ConjugateGradientFormula", "org.apache.commons.math3.optimization.general" ], [ "BaseMultivariateVectorMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "NoFeasibleSolutionException", "org.apache.commons.math3.optimization.linear" ], [ "AbstractLinearOptimizer", "org.apache.commons.math3.optimization.linear" ], [ "LinearConstraint", "org.apache.commons.math3.optimization.linear" ], [ "SimplexSolver", "org.apache.commons.math3.optimization.linear" ], [ "LinearOptimizer", "org.apache.commons.math3.optimization.linear" ], [ "UnboundedSolutionException", "org.apache.commons.math3.optimization.linear" ], [ "SimplexTableau", "org.apache.commons.math3.optimization.linear" ], [ "LinearObjectiveFunction", "org.apache.commons.math3.optimization.linear" ], [ "Relationship", "org.apache.commons.math3.optimization.linear" ], [ "SimpleBounds", "org.apache.commons.math3.optimization" ], [ "PointVectorValuePair", "org.apache.commons.math3.optimization" ], [ "MultivariateDifferentiableVectorMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "DifferentiableMultivariateMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "SimplePointChecker", "org.apache.commons.math3.optimization" ], [ "SimpleVectorValueChecker", "org.apache.commons.math3.optimization" ], [ "BaseOptimizer", "org.apache.commons.math3.optimization" ], [ "MultivariateOptimizer", "org.apache.commons.math3.optimization" ], [ "GoalType", "org.apache.commons.math3.optimization" ], [ "BrentOptimizer", "org.apache.commons.math3.optimization.univariate" ], [ "UnivariateMultiStartOptimizer", "org.apache.commons.math3.optimization.univariate" ], [ "BaseUnivariateOptimizer", "org.apache.commons.math3.optimization.univariate" ], [ "BaseAbstractUnivariateOptimizer", "org.apache.commons.math3.optimization.univariate" ], [ "SimpleUnivariateValueChecker", "org.apache.commons.math3.optimization.univariate" ], [ "UnivariatePointValuePair", "org.apache.commons.math3.optimization.univariate" ], [ "BracketFinder", "org.apache.commons.math3.optimization.univariate" ], [ "UnivariateOptimizer", "org.apache.commons.math3.optimization.univariate" ], [ "BaseMultivariateOptimizer", "org.apache.commons.math3.optimization" ], [ "ConvergenceChecker", "org.apache.commons.math3.optimization" ], [ "BaseMultivariateMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "MultivariateDifferentiableOptimizer", "org.apache.commons.math3.optimization" ], [ "MultivariateDifferentiableVectorOptimizer", "org.apache.commons.math3.optimization" ], [ "Target", "org.apache.commons.math3.optimization" ], [ "Weight", "org.apache.commons.math3.optimization" ], [ "MultivariateMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "OptimizationData", "org.apache.commons.math3.optimization" ], [ "BaseMultivariateVectorOptimizer", "org.apache.commons.math3.optimization" ], [ "MultivariateDifferentiableMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "DifferentiableMultivariateVectorMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "NonSymmetricMatrixException", "org.apache.commons.math3.linear" ], [ "FieldVectorPreservingVisitor", "org.apache.commons.math3.linear" ], [ "FieldVector", "org.apache.commons.math3.linear" ], [ "AnyMatrix", "org.apache.commons.math3.linear" ], [ "NonSquareOperatorException", "org.apache.commons.math3.linear" ], [ "SingularValueDecomposition", "org.apache.commons.math3.linear" ], [ "EigenDecomposition", "org.apache.commons.math3.linear" ], [ "RealMatrixChangingVisitor", "org.apache.commons.math3.linear" ], [ "FieldLUDecomposition", "org.apache.commons.math3.linear" ], [ "NonPositiveDefiniteMatrixException", "org.apache.commons.math3.linear" ], [ "RealMatrixFormat", "org.apache.commons.math3.linear" ], [ "MatrixUtils", "org.apache.commons.math3.linear" ], [ "OpenMapRealVector", "org.apache.commons.math3.linear" ], [ "RealMatrixPreservingVisitor", "org.apache.commons.math3.linear" ], [ "SingularMatrixException", "org.apache.commons.math3.linear" ], [ "DefaultFieldMatrixPreservingVisitor", "org.apache.commons.math3.linear" ], [ "FieldVectorChangingVisitor", "org.apache.commons.math3.linear" ], [ "TriDiagonalTransformer", "org.apache.commons.math3.linear" ], [ "DefaultRealMatrixChangingVisitor", "org.apache.commons.math3.linear" ], [ "AbstractRealMatrix", "org.apache.commons.math3.linear" ], [ "Array2DRowRealMatrix", "org.apache.commons.math3.linear" ], [ "BlockFieldMatrix", "org.apache.commons.math3.linear" ], [ "Array2DRowFieldMatrix", "org.apache.commons.math3.linear" ], [ "FieldMatrix", "org.apache.commons.math3.linear" ], [ "IterativeLinearSolver", "org.apache.commons.math3.linear" ], [ "ArrayRealVector", "org.apache.commons.math3.linear" ], [ "MatrixDimensionMismatchException", "org.apache.commons.math3.linear" ], [ "ArrayFieldVector", "org.apache.commons.math3.linear" ], [ "DecompositionSolver", "org.apache.commons.math3.linear" ], [ "LUDecomposition", "org.apache.commons.math3.linear" ], [ "ConjugateGradient", "org.apache.commons.math3.linear" ], [ "NonPositiveDefiniteOperatorException", "org.apache.commons.math3.linear" ], [ "OpenMapRealMatrix", "org.apache.commons.math3.linear" ], [ "NonSelfAdjointOperatorException", "org.apache.commons.math3.linear" ], [ "BiDiagonalTransformer", "org.apache.commons.math3.linear" ], [ "CholeskyDecomposition", "org.apache.commons.math3.linear" ], [ "FieldDecompositionSolver", "org.apache.commons.math3.linear" ], [ "RealVectorPreservingVisitor", "org.apache.commons.math3.linear" ], [ "SingularOperatorException", "org.apache.commons.math3.linear" ], [ "BlockRealMatrix", "org.apache.commons.math3.linear" ], [ "SparseFieldMatrix", "org.apache.commons.math3.linear" ], [ "NonSquareMatrixException", "org.apache.commons.math3.linear" ], [ "SparseRealMatrix", "org.apache.commons.math3.linear" ], [ "RealVector", "org.apache.commons.math3.linear" ], [ "FieldMatrixPreservingVisitor", "org.apache.commons.math3.linear" ], [ "PreconditionedIterativeLinearSolver", "org.apache.commons.math3.linear" ], [ "QRDecomposition", "org.apache.commons.math3.linear" ], [ "SymmLQ", "org.apache.commons.math3.linear" ], [ "SparseFieldVector", "org.apache.commons.math3.linear" ], [ "RealVectorFormat", "org.apache.commons.math3.linear" ], [ "IllConditionedOperatorException", "org.apache.commons.math3.linear" ], [ "DefaultIterativeLinearSolverEvent", "org.apache.commons.math3.linear" ], [ "DefaultRealMatrixPreservingVisitor", "org.apache.commons.math3.linear" ], [ "IterativeLinearSolverEvent", "org.apache.commons.math3.linear" ], [ "DiagonalMatrix", "org.apache.commons.math3.linear" ], [ "HessenbergTransformer", "org.apache.commons.math3.linear" ], [ "RectangularCholeskyDecomposition", "org.apache.commons.math3.linear" ], [ "FieldMatrixChangingVisitor", "org.apache.commons.math3.linear" ], [ "DefaultFieldMatrixChangingVisitor", "org.apache.commons.math3.linear" ], [ "JacobiPreconditioner", "org.apache.commons.math3.linear" ], [ "RealLinearOperator", "org.apache.commons.math3.linear" ], [ "RRQRDecomposition", "org.apache.commons.math3.linear" ], [ "AbstractFieldMatrix", "org.apache.commons.math3.linear" ], [ "RealMatrix", "org.apache.commons.math3.linear" ], [ "SchurTransformer", "org.apache.commons.math3.linear" ], [ "RealVectorChangingVisitor", "org.apache.commons.math3.linear" ], [ "SparseRealVector", "org.apache.commons.math3.linear" ], [ "CauchyDistribution", "org.apache.commons.math3.distribution" ], [ "LaplaceDistribution", "org.apache.commons.math3.distribution" ], [ "AbstractRealDistribution", "org.apache.commons.math3.distribution" ], [ "HypergeometricDistribution", "org.apache.commons.math3.distribution" ], [ "TDistribution", "org.apache.commons.math3.distribution" ], [ "ChiSquaredDistribution", "org.apache.commons.math3.distribution" ], [ "TriangularDistribution", "org.apache.commons.math3.distribution" ], [ "MultivariateNormalMixtureExpectationMaximization", "org.apache.commons.math3.distribution.fitting" ], [ "BetaDistribution", "org.apache.commons.math3.distribution" ], [ "RealDistribution", "org.apache.commons.math3.distribution" ], [ "NormalDistribution", "org.apache.commons.math3.distribution" ], [ "SaddlePointExpansion", "org.apache.commons.math3.distribution" ], [ "MixtureMultivariateNormalDistribution", "org.apache.commons.math3.distribution" ], [ "UniformRealDistribution", "org.apache.commons.math3.distribution" ], [ "GumbelDistribution", "org.apache.commons.math3.distribution" ], [ "ZipfDistribution", "org.apache.commons.math3.distribution" ], [ "BinomialDistribution", "org.apache.commons.math3.distribution" ], [ "EnumeratedIntegerDistribution", "org.apache.commons.math3.distribution" ], [ "IntegerDistribution", "org.apache.commons.math3.distribution" ], [ "WeibullDistribution", "org.apache.commons.math3.distribution" ], [ "MultivariateRealDistribution", "org.apache.commons.math3.distribution" ], [ "NakagamiDistribution", "org.apache.commons.math3.distribution" ], [ "EnumeratedDistribution", "org.apache.commons.math3.distribution" ], [ "ConstantRealDistribution", "org.apache.commons.math3.distribution" ], [ "MultivariateNormalDistribution", "org.apache.commons.math3.distribution" ], [ "ExponentialDistribution", "org.apache.commons.math3.distribution" ], [ "UniformIntegerDistribution", "org.apache.commons.math3.distribution" ], [ "LogNormalDistribution", "org.apache.commons.math3.distribution" ], [ "PascalDistribution", "org.apache.commons.math3.distribution" ], [ "ParetoDistribution", "org.apache.commons.math3.distribution" ], [ "FDistribution", "org.apache.commons.math3.distribution" ], [ "GeometricDistribution", "org.apache.commons.math3.distribution" ], [ "AbstractMultivariateRealDistribution", "org.apache.commons.math3.distribution" ], [ "AbstractIntegerDistribution", "org.apache.commons.math3.distribution" ], [ "PoissonDistribution", "org.apache.commons.math3.distribution" ], [ "KolmogorovSmirnovDistribution", "org.apache.commons.math3.distribution" ], [ "MixtureMultivariateRealDistribution", "org.apache.commons.math3.distribution" ], [ "GammaDistribution", "org.apache.commons.math3.distribution" ], [ "EnumeratedRealDistribution", "org.apache.commons.math3.distribution" ], [ "LogisticDistribution", "org.apache.commons.math3.distribution" ], [ "LevyDistribution", "org.apache.commons.math3.distribution" ], [ "PointValuePair", "org.apache.commons.math3.optim" ], [ "SimpleValueChecker", "org.apache.commons.math3.optim" ], [ "AbstractConvergenceChecker", "org.apache.commons.math3.optim" ], [ "InitialGuess", "org.apache.commons.math3.optim" ], [ "MaxIter", "org.apache.commons.math3.optim" ], [ "NoFeasibleSolutionException", "org.apache.commons.math3.optim.linear" ], [ "LinearConstraintSet", "org.apache.commons.math3.optim.linear" ], [ "LinearConstraint", "org.apache.commons.math3.optim.linear" ], [ "PivotSelectionRule", "org.apache.commons.math3.optim.linear" ], [ "SimplexSolver", "org.apache.commons.math3.optim.linear" ], [ "LinearOptimizer", "org.apache.commons.math3.optim.linear" ], [ "UnboundedSolutionException", "org.apache.commons.math3.optim.linear" ], [ "SimplexTableau", "org.apache.commons.math3.optim.linear" ], [ "SolutionCallback", "org.apache.commons.math3.optim.linear" ], [ "LinearObjectiveFunction", "org.apache.commons.math3.optim.linear" ], [ "NonNegativeConstraint", "org.apache.commons.math3.optim.linear" ], [ "Relationship", "org.apache.commons.math3.optim.linear" ], [ "AbstractOptimizationProblem", "org.apache.commons.math3.optim" ], [ "SimpleBounds", "org.apache.commons.math3.optim" ], [ "PointVectorValuePair", "org.apache.commons.math3.optim" ], [ "SimplePointChecker", "org.apache.commons.math3.optim" ], [ "SimpleVectorValueChecker", "org.apache.commons.math3.optim" ], [ "BaseOptimizer", "org.apache.commons.math3.optim" ], [ "BaseMultiStartMultivariateOptimizer", "org.apache.commons.math3.optim" ], [ "MultiStartUnivariateOptimizer", "org.apache.commons.math3.optim.univariate" ], [ "BrentOptimizer", "org.apache.commons.math3.optim.univariate" ], [ "UnivariateObjectiveFunction", "org.apache.commons.math3.optim.univariate" ], [ "SimpleUnivariateValueChecker", "org.apache.commons.math3.optim.univariate" ], [ "SearchInterval", "org.apache.commons.math3.optim.univariate" ], [ "UnivariatePointValuePair", "org.apache.commons.math3.optim.univariate" ], [ "BracketFinder", "org.apache.commons.math3.optim.univariate" ], [ "UnivariateOptimizer", "org.apache.commons.math3.optim.univariate" ], [ "BaseMultivariateOptimizer", "org.apache.commons.math3.optim" ], [ "ConvergenceChecker", "org.apache.commons.math3.optim" ], [ "OptimizationProblem", "org.apache.commons.math3.optim" ], [ "MaxEval", "org.apache.commons.math3.optim" ], [ "OptimizationData", "org.apache.commons.math3.optim" ], [ "Preconditioner", "org.apache.commons.math3.optim.nonlinear.scalar.gradient" ], [ "NonLinearConjugateGradientOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar.gradient" ], [ "LeastSquaresConverter", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "GradientMultivariateOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "MultivariateFunctionMappingAdapter", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "LineSearch", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "ObjectiveFunction", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "MultivariateOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "GoalType", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "AbstractSimplex", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "SimplexOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "BOBYQAOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "NelderMeadSimplex", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "CMAESOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "PowellOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "MultiDirectionalSimplex", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "MultiStartMultivariateOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "MultivariateFunctionPenaltyAdapter", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "ObjectiveFunctionGradient", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "ModelFunction", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "LevenbergMarquardtOptimizer", "org.apache.commons.math3.optim.nonlinear.vector.jacobian" ], [ "AbstractLeastSquaresOptimizer", "org.apache.commons.math3.optim.nonlinear.vector.jacobian" ], [ "GaussNewtonOptimizer", "org.apache.commons.math3.optim.nonlinear.vector.jacobian" ], [ "ModelFunctionJacobian", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "JacobianMultivariateVectorOptimizer", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "MultivariateVectorOptimizer", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "Target", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "Weight", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "MultiStartMultivariateVectorOptimizer", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "Erf", "org.apache.commons.math3.special" ], [ "BesselJ", "org.apache.commons.math3.special" ], [ "Gamma", "org.apache.commons.math3.special" ], [ "Beta", "org.apache.commons.math3.special" ], [ "FieldODEState", "org.apache.commons.math3.ode" ], [ "FieldODEStateAndDerivative", "org.apache.commons.math3.ode" ], [ "FirstOrderFieldDifferentialEquations", "org.apache.commons.math3.ode" ], [ "MultistepFieldIntegrator", "org.apache.commons.math3.ode" ], [ "ODEIntegrator", "org.apache.commons.math3.ode" ], [ "ParameterConfiguration", "org.apache.commons.math3.ode" ], [ "ContinuousOutputFieldModel", "org.apache.commons.math3.ode" ], [ "FirstOrderConverter", "org.apache.commons.math3.ode" ], [ "ParameterJacobianProvider", "org.apache.commons.math3.ode" ], [ "SecondOrderIntegrator", "org.apache.commons.math3.ode" ], [ "AbstractFieldIntegrator", "org.apache.commons.math3.ode" ], [ "ExpandableStatefulODE", "org.apache.commons.math3.ode" ], [ "MultistepIntegrator", "org.apache.commons.math3.ode" ], [ "Parameterizable", "org.apache.commons.math3.ode" ], [ "JacobianMatrices", "org.apache.commons.math3.ode" ], [ "StepNormalizer", "org.apache.commons.math3.ode.sampling" ], [ "FixedStepHandler", "org.apache.commons.math3.ode.sampling" ], [ "StepHandler", "org.apache.commons.math3.ode.sampling" ], [ "DummyStepHandler", "org.apache.commons.math3.ode.sampling" ], [ "FieldStepInterpolator", "org.apache.commons.math3.ode.sampling" ], [ "StepInterpolator", "org.apache.commons.math3.ode.sampling" ], [ "AbstractFieldStepInterpolator", "org.apache.commons.math3.ode.sampling" ], [ "FieldFixedStepHandler", "org.apache.commons.math3.ode.sampling" ], [ "StepNormalizerMode", "org.apache.commons.math3.ode.sampling" ], [ "AbstractStepInterpolator", "org.apache.commons.math3.ode.sampling" ], [ "FieldStepHandler", "org.apache.commons.math3.ode.sampling" ], [ "StepNormalizerBounds", "org.apache.commons.math3.ode.sampling" ], [ "NordsieckStepInterpolator", "org.apache.commons.math3.ode.sampling" ], [ "FieldStepNormalizer", "org.apache.commons.math3.ode.sampling" ], [ "RungeKuttaFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "GillIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince853FieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "EmbeddedRungeKuttaFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "HighamHall54FieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince54FieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "EulerFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "EulerStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "HighamHall54Integrator", "org.apache.commons.math3.ode.nonstiff" ], [ "MidpointStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "GillStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "LutherFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "GraggBulirschStoerIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "EmbeddedRungeKuttaIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince853StepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "HighamHall54FieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince54FieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "MidpointFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "ThreeEighthesFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "ThreeEighthesIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "ClassicalRungeKuttaIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsNordsieckTransformer", "org.apache.commons.math3.ode.nonstiff" ], [ "MidpointFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "MidpointIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "RungeKuttaStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince54StepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "LutherFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince54Integrator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "GraggBulirschStoerStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "ClassicalRungeKuttaStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "LutherIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdaptiveStepsizeIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "ClassicalRungeKuttaFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "EulerIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince853FieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "FieldButcherArrayProvider", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsMoultonIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "RungeKuttaFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince853Integrator", "org.apache.commons.math3.ode.nonstiff" ], [ "ThreeEighthesStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "EulerFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsMoultonFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "LutherStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "HighamHall54StepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsNordsieckFieldTransformer", "org.apache.commons.math3.ode.nonstiff" ], [ "ThreeEighthesFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "RungeKuttaIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsBashforthFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "ClassicalRungeKuttaFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdaptiveStepsizeFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsBashforthIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "GillFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "GillFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "FieldSecondaryEquations", "org.apache.commons.math3.ode" ], [ "MainStateJacobianProvider", "org.apache.commons.math3.ode" ], [ "SecondaryEquations", "org.apache.commons.math3.ode" ], [ "FirstOrderFieldIntegrator", "org.apache.commons.math3.ode" ], [ "ParameterJacobianWrapper", "org.apache.commons.math3.ode" ], [ "FieldEquationsMapper", "org.apache.commons.math3.ode" ], [ "FieldExpandableODE", "org.apache.commons.math3.ode" ], [ "ParameterizedWrapper", "org.apache.commons.math3.ode" ], [ "AbstractIntegrator", "org.apache.commons.math3.ode" ], [ "SecondOrderDifferentialEquations", "org.apache.commons.math3.ode" ], [ "AbstractParameterizable", "org.apache.commons.math3.ode" ], [ "UnknownParameterException", "org.apache.commons.math3.ode" ], [ "ContinuousOutputModel", "org.apache.commons.math3.ode" ], [ "FirstOrderDifferentialEquations", "org.apache.commons.math3.ode" ], [ "EquationsMapper", "org.apache.commons.math3.ode" ], [ "Transformer", "org.apache.commons.math3.ode.events" ], [ "FieldEventState", "org.apache.commons.math3.ode.events" ], [ "FieldEventHandler", "org.apache.commons.math3.ode.events" ], [ "EventHandler", "org.apache.commons.math3.ode.events" ], [ "Action", "org.apache.commons.math3.ode.events" ], [ "EventState", "org.apache.commons.math3.ode.events" ], [ "EventFilter", "org.apache.commons.math3.ode.events" ], [ "FilterType", "org.apache.commons.math3.ode.events" ], [ "ParameterizedODE", "org.apache.commons.math3.ode" ], [ "FirstOrderIntegrator", "org.apache.commons.math3.ode" ], [ "NaNStrategy", "org.apache.commons.math3.stat.ranking" ], [ "NaturalRanking", "org.apache.commons.math3.stat.ranking" ], [ "TiesStrategy", "org.apache.commons.math3.stat.ranking" ], [ "RankingAlgorithm", "org.apache.commons.math3.stat.ranking" ], [ "StatUtils", "org.apache.commons.math3.stat" ], [ "IntervalUtils", "org.apache.commons.math3.stat.interval" ], [ "AgrestiCoullInterval", "org.apache.commons.math3.stat.interval" ], [ "ConfidenceInterval", "org.apache.commons.math3.stat.interval" ], [ "WilsonScoreInterval", "org.apache.commons.math3.stat.interval" ], [ "ClopperPearsonInterval", "org.apache.commons.math3.stat.interval" ], [ "NormalApproximationInterval", "org.apache.commons.math3.stat.interval" ], [ "BinomialConfidenceInterval", "org.apache.commons.math3.stat.interval" ], [ "StorelessCovariance", "org.apache.commons.math3.stat.correlation" ], [ "StorelessBivariateCovariance", "org.apache.commons.math3.stat.correlation" ], [ "KendallsCorrelation", "org.apache.commons.math3.stat.correlation" ], [ "Covariance", "org.apache.commons.math3.stat.correlation" ], [ "PearsonsCorrelation", "org.apache.commons.math3.stat.correlation" ], [ "SpearmansCorrelation", "org.apache.commons.math3.stat.correlation" ], [ "DBSCANClusterer", "org.apache.commons.math3.stat.clustering" ], [ "EuclideanIntegerPoint", "org.apache.commons.math3.stat.clustering" ], [ "Cluster", "org.apache.commons.math3.stat.clustering" ], [ "EuclideanDoublePoint", "org.apache.commons.math3.stat.clustering" ], [ "Clusterable", "org.apache.commons.math3.stat.clustering" ], [ "KMeansPlusPlusClusterer", "org.apache.commons.math3.stat.clustering" ], [ "TestUtils", "org.apache.commons.math3.stat.inference" ], [ "TTest", "org.apache.commons.math3.stat.inference" ], [ "GTest", "org.apache.commons.math3.stat.inference" ], [ "AlternativeHypothesis", "org.apache.commons.math3.stat.inference" ], [ "MannWhitneyUTest", "org.apache.commons.math3.stat.inference" ], [ "WilcoxonSignedRankTest", "org.apache.commons.math3.stat.inference" ], [ "OneWayAnova", "org.apache.commons.math3.stat.inference" ], [ "ChiSquareTest", "org.apache.commons.math3.stat.inference" ], [ "BinomialTest", "org.apache.commons.math3.stat.inference" ], [ "KolmogorovSmirnovTest", "org.apache.commons.math3.stat.inference" ], [ "AbstractUnivariateStatistic", "org.apache.commons.math3.stat.descriptive" ], [ "SummaryStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "DescriptiveStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "MultivariateSummaryStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "SecondMoment", "org.apache.commons.math3.stat.descriptive.moment" ], [ "Mean", "org.apache.commons.math3.stat.descriptive.moment" ], [ "FourthMoment", "org.apache.commons.math3.stat.descriptive.moment" ], [ "Variance", "org.apache.commons.math3.stat.descriptive.moment" ], [ "Kurtosis", "org.apache.commons.math3.stat.descriptive.moment" ], [ "GeometricMean", "org.apache.commons.math3.stat.descriptive.moment" ], [ "StandardDeviation", "org.apache.commons.math3.stat.descriptive.moment" ], [ "VectorialCovariance", "org.apache.commons.math3.stat.descriptive.moment" ], [ "ThirdMoment", "org.apache.commons.math3.stat.descriptive.moment" ], [ "SemiVariance", "org.apache.commons.math3.stat.descriptive.moment" ], [ "FirstMoment", "org.apache.commons.math3.stat.descriptive.moment" ], [ "Skewness", "org.apache.commons.math3.stat.descriptive.moment" ], [ "VectorialMean", "org.apache.commons.math3.stat.descriptive.moment" ], [ "StatisticalSummaryValues", "org.apache.commons.math3.stat.descriptive" ], [ "StatisticalSummary", "org.apache.commons.math3.stat.descriptive" ], [ "StorelessUnivariateStatistic", "org.apache.commons.math3.stat.descriptive" ], [ "StatisticalMultivariateSummary", "org.apache.commons.math3.stat.descriptive" ], [ "AggregateSummaryStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "WeightedEvaluation", "org.apache.commons.math3.stat.descriptive" ], [ "SynchronizedSummaryStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "UnivariateStatistic", "org.apache.commons.math3.stat.descriptive" ], [ "Percentile", "org.apache.commons.math3.stat.descriptive.rank" ], [ "Max", "org.apache.commons.math3.stat.descriptive.rank" ], [ "PSquarePercentile", "org.apache.commons.math3.stat.descriptive.rank" ], [ "Min", "org.apache.commons.math3.stat.descriptive.rank" ], [ "Median", "org.apache.commons.math3.stat.descriptive.rank" ], [ "SynchronizedDescriptiveStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "SynchronizedMultivariateSummaryStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "SumOfSquares", "org.apache.commons.math3.stat.descriptive.summary" ], [ "Product", "org.apache.commons.math3.stat.descriptive.summary" ], [ "Sum", "org.apache.commons.math3.stat.descriptive.summary" ], [ "SumOfLogs", "org.apache.commons.math3.stat.descriptive.summary" ], [ "AbstractStorelessUnivariateStatistic", "org.apache.commons.math3.stat.descriptive" ], [ "SimpleRegression", "org.apache.commons.math3.stat.regression" ], [ "UpdatingMultipleLinearRegression", "org.apache.commons.math3.stat.regression" ], [ "AbstractMultipleLinearRegression", "org.apache.commons.math3.stat.regression" ], [ "GLSMultipleLinearRegression", "org.apache.commons.math3.stat.regression" ], [ "ModelSpecificationException", "org.apache.commons.math3.stat.regression" ], [ "RegressionResults", "org.apache.commons.math3.stat.regression" ], [ "MillerUpdatingRegression", "org.apache.commons.math3.stat.regression" ], [ "OLSMultipleLinearRegression", "org.apache.commons.math3.stat.regression" ], [ "MultipleLinearRegression", "org.apache.commons.math3.stat.regression" ], [ "Frequency", "org.apache.commons.math3.stat" ], [ "ChebyshevDistance", "org.apache.commons.math3.ml.distance" ], [ "CanberraDistance", "org.apache.commons.math3.ml.distance" ], [ "EuclideanDistance", "org.apache.commons.math3.ml.distance" ], [ "ManhattanDistance", "org.apache.commons.math3.ml.distance" ], [ "EarthMoversDistance", "org.apache.commons.math3.ml.distance" ], [ "DistanceMeasure", "org.apache.commons.math3.ml.distance" ], [ "CentroidCluster", "org.apache.commons.math3.ml.clustering" ], [ "DBSCANClusterer", "org.apache.commons.math3.ml.clustering" ], [ "Cluster", "org.apache.commons.math3.ml.clustering" ], [ "MultiKMeansPlusPlusClusterer", "org.apache.commons.math3.ml.clustering" ], [ "Clusterable", "org.apache.commons.math3.ml.clustering" ], [ "FuzzyKMeansClusterer", "org.apache.commons.math3.ml.clustering" ], [ "KMeansPlusPlusClusterer", "org.apache.commons.math3.ml.clustering" ], [ "SumOfClusterVariances", "org.apache.commons.math3.ml.clustering.evaluation" ], [ "ClusterEvaluator", "org.apache.commons.math3.ml.clustering.evaluation" ], [ "Clusterer", "org.apache.commons.math3.ml.clustering" ], [ "DoublePoint", "org.apache.commons.math3.ml.clustering" ], [ "KohonenTrainingTask", "org.apache.commons.math3.ml.neuralnet.sofm" ], [ "KohonenUpdateAction", "org.apache.commons.math3.ml.neuralnet.sofm" ], [ "QuasiSigmoidDecayFunction", "org.apache.commons.math3.ml.neuralnet.sofm.util" ], [ "ExponentialDecayFunction", "org.apache.commons.math3.ml.neuralnet.sofm.util" ], [ "NeighbourhoodSizeFunctionFactory", "org.apache.commons.math3.ml.neuralnet.sofm" ], [ "LearningFactorFunctionFactory", "org.apache.commons.math3.ml.neuralnet.sofm" ], [ "NeighbourhoodSizeFunction", "org.apache.commons.math3.ml.neuralnet.sofm" ], [ "LearningFactorFunction", "org.apache.commons.math3.ml.neuralnet.sofm" ], [ "MapUtils", "org.apache.commons.math3.ml.neuralnet" ], [ "Network", "org.apache.commons.math3.ml.neuralnet" ], [ "FeatureInitializerFactory", "org.apache.commons.math3.ml.neuralnet" ], [ "Neuron", "org.apache.commons.math3.ml.neuralnet" ], [ "FeatureInitializer", "org.apache.commons.math3.ml.neuralnet" ], [ "NeuronString", "org.apache.commons.math3.ml.neuralnet.oned" ], [ "NeuronSquareMesh2D", "org.apache.commons.math3.ml.neuralnet.twod" ], [ "SmoothedDataHistogram", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "UnifiedDistanceMatrix", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "MapDataVisualization", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "MapVisualization", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "LocationFinder", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "HitHistogram", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "QuantizationError", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "TopographicErrorHistogram", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "SquareNeighbourhood", "org.apache.commons.math3.ml.neuralnet" ], [ "UpdateAction", "org.apache.commons.math3.ml.neuralnet" ], [ "BracketingNthOrderBrentSolverDFP", "org.apache.commons.math3.dfp" ], [ "UnivariateDfpFunction", "org.apache.commons.math3.dfp" ], [ "DfpDec", "org.apache.commons.math3.dfp" ], [ "DfpMath", "org.apache.commons.math3.dfp" ], [ "Dfp", "org.apache.commons.math3.dfp" ], [ "DfpField", "org.apache.commons.math3.dfp" ], [ "GeneticAlgorithm", "org.apache.commons.math3.genetics" ], [ "SelectionPolicy", "org.apache.commons.math3.genetics" ], [ "ListPopulation", "org.apache.commons.math3.genetics" ], [ "FixedGenerationCount", "org.apache.commons.math3.genetics" ], [ "AbstractListChromosome", "org.apache.commons.math3.genetics" ], [ "OnePointCrossover", "org.apache.commons.math3.genetics" ], [ "ElitisticListPopulation", "org.apache.commons.math3.genetics" ], [ "Chromosome", "org.apache.commons.math3.genetics" ], [ "OrderedCrossover", "org.apache.commons.math3.genetics" ], [ "InvalidRepresentationException", "org.apache.commons.math3.genetics" ], [ "RandomKey", "org.apache.commons.math3.genetics" ], [ "StoppingCondition", "org.apache.commons.math3.genetics" ], [ "PermutationChromosome", "org.apache.commons.math3.genetics" ], [ "ChromosomePair", "org.apache.commons.math3.genetics" ], [ "TournamentSelection", "org.apache.commons.math3.genetics" ], [ "NPointCrossover", "org.apache.commons.math3.genetics" ], [ "UniformCrossover", "org.apache.commons.math3.genetics" ], [ "MutationPolicy", "org.apache.commons.math3.genetics" ], [ "FixedElapsedTime", "org.apache.commons.math3.genetics" ], [ "CycleCrossover", "org.apache.commons.math3.genetics" ], [ "BinaryMutation", "org.apache.commons.math3.genetics" ], [ "BinaryChromosome", "org.apache.commons.math3.genetics" ], [ "Population", "org.apache.commons.math3.genetics" ], [ "RandomKeyMutation", "org.apache.commons.math3.genetics" ], [ "Fitness", "org.apache.commons.math3.genetics" ], [ "CrossoverPolicy", "org.apache.commons.math3.genetics" ], [ "Vector", "org.apache.commons.math3.geometry" ], [ "VectorFormat", "org.apache.commons.math3.geometry" ], [ "Point", "org.apache.commons.math3.geometry" ], [ "RotationConvention", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "SubPlane", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Vector3DFormat", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Segment", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "OutlineExtractor", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "PolyhedronsSet", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "RotationOrder", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "FieldVector3D", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Rotation", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Euclidean3D", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "SubLine", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "SphericalCoordinates", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "CardanEulerSingularityException", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "NotARotationMatrixException", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "FieldRotation", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Vector3D", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Plane", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "SphereGenerator", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Line", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "IntervalsSet", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "Interval", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "SubOrientedPoint", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "OrientedPoint", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "Euclidean1D", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "Vector1DFormat", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "Vector1D", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "Segment", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "AbstractConvexHullGenerator2D", "org.apache.commons.math3.geometry.euclidean.twod.hull" ], [ "AklToussaintHeuristic", "org.apache.commons.math3.geometry.euclidean.twod.hull" ], [ "ConvexHull2D", "org.apache.commons.math3.geometry.euclidean.twod.hull" ], [ "MonotoneChain", "org.apache.commons.math3.geometry.euclidean.twod.hull" ], [ "ConvexHullGenerator2D", "org.apache.commons.math3.geometry.euclidean.twod.hull" ], [ "Vector2DFormat", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "PolygonsSet", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "SubLine", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "DiskGenerator", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "Vector2D", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "NestedLoops", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "Euclidean2D", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "Line", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "ConvexHullGenerator", "org.apache.commons.math3.geometry.hull" ], [ "ConvexHull", "org.apache.commons.math3.geometry.hull" ], [ "ArcsSet", "org.apache.commons.math3.geometry.spherical.oned" ], [ "S1Point", "org.apache.commons.math3.geometry.spherical.oned" ], [ "Sphere1D", "org.apache.commons.math3.geometry.spherical.oned" ], [ "Arc", "org.apache.commons.math3.geometry.spherical.oned" ], [ "LimitAngle", "org.apache.commons.math3.geometry.spherical.oned" ], [ "SubLimitAngle", "org.apache.commons.math3.geometry.spherical.oned" ], [ "Sphere2D", "org.apache.commons.math3.geometry.spherical.twod" ], [ "SubCircle", "org.apache.commons.math3.geometry.spherical.twod" ], [ "Vertex", "org.apache.commons.math3.geometry.spherical.twod" ], [ "Circle", "org.apache.commons.math3.geometry.spherical.twod" ], [ "PropertiesComputer", "org.apache.commons.math3.geometry.spherical.twod" ], [ "SphericalPolygonsSet", "org.apache.commons.math3.geometry.spherical.twod" ], [ "Edge", "org.apache.commons.math3.geometry.spherical.twod" ], [ "EdgesBuilder", "org.apache.commons.math3.geometry.spherical.twod" ], [ "S2Point", "org.apache.commons.math3.geometry.spherical.twod" ], [ "SupportBallGenerator", "org.apache.commons.math3.geometry.enclosing" ], [ "EnclosingBall", "org.apache.commons.math3.geometry.enclosing" ], [ "WelzlEncloser", "org.apache.commons.math3.geometry.enclosing" ], [ "Encloser", "org.apache.commons.math3.geometry.enclosing" ], [ "InsideFinder", "org.apache.commons.math3.geometry.partitioning" ], [ "BoundaryProjection", "org.apache.commons.math3.geometry.partitioning" ], [ "BoundaryProjector", "org.apache.commons.math3.geometry.partitioning" ], [ "Region", "org.apache.commons.math3.geometry.partitioning" ], [ "Transform", "org.apache.commons.math3.geometry.partitioning" ], [ "NodesSet", "org.apache.commons.math3.geometry.partitioning" ], [ "AbstractRegion", "org.apache.commons.math3.geometry.partitioning" ], [ "Characterization", "org.apache.commons.math3.geometry.partitioning" ], [ "AbstractSubHyperplane", "org.apache.commons.math3.geometry.partitioning" ], [ "BSPTree", "org.apache.commons.math3.geometry.partitioning" ], [ "RegionFactory", "org.apache.commons.math3.geometry.partitioning" ], [ "Side", "org.apache.commons.math3.geometry.partitioning" ], [ "BoundarySizeVisitor", "org.apache.commons.math3.geometry.partitioning" ], [ "AVLTree", "org.apache.commons.math3.geometry.partitioning.utilities" ], [ "OrderedTuple", "org.apache.commons.math3.geometry.partitioning.utilities" ], [ "BSPTreeVisitor", "org.apache.commons.math3.geometry.partitioning" ], [ "Hyperplane", "org.apache.commons.math3.geometry.partitioning" ], [ "Embedding", "org.apache.commons.math3.geometry.partitioning" ], [ "BoundaryAttribute", "org.apache.commons.math3.geometry.partitioning" ], [ "SubHyperplane", "org.apache.commons.math3.geometry.partitioning" ], [ "BoundaryBuilder", "org.apache.commons.math3.geometry.partitioning" ], [ "Space", "org.apache.commons.math3.geometry" ], [ "Field", "org.apache.commons.math3" ], [ "ProcessModel", "org.apache.commons.math3.filter" ], [ "MeasurementModel", "org.apache.commons.math3.filter" ], [ "KalmanFilter", "org.apache.commons.math3.filter" ], [ "DefaultProcessModel", "org.apache.commons.math3.filter" ], [ "DefaultMeasurementModel", "org.apache.commons.math3.filter" ], [ "NormalizedRandomGenerator", "org.apache.commons.math3.random" ], [ "GaussianRandomGenerator", "org.apache.commons.math3.random" ], [ "RandomGenerator", "org.apache.commons.math3.random" ], [ "ISAACRandom", "org.apache.commons.math3.random" ], [ "CorrelatedRandomVectorGenerator", "org.apache.commons.math3.random" ], [ "Well19937a", "org.apache.commons.math3.random" ], [ "Well1024a", "org.apache.commons.math3.random" ], [ "UniformRandomGenerator", "org.apache.commons.math3.random" ], [ "Well44497a", "org.apache.commons.math3.random" ], [ "BitsStreamGenerator", "org.apache.commons.math3.random" ], [ "SynchronizedRandomGenerator", "org.apache.commons.math3.random" ], [ "UncorrelatedRandomVectorGenerator", "org.apache.commons.math3.random" ], [ "Well19937c", "org.apache.commons.math3.random" ], [ "ValueServer", "org.apache.commons.math3.random" ], [ "HaltonSequenceGenerator", "org.apache.commons.math3.random" ], [ "Well44497b", "org.apache.commons.math3.random" ], [ "RandomData", "org.apache.commons.math3.random" ], [ "RandomVectorGenerator", "org.apache.commons.math3.random" ], [ "RandomDataGenerator", "org.apache.commons.math3.random" ], [ "Well512a", "org.apache.commons.math3.random" ], [ "AbstractRandomGenerator", "org.apache.commons.math3.random" ], [ "JDKRandomGenerator", "org.apache.commons.math3.random" ], [ "StableRandomGenerator", "org.apache.commons.math3.random" ], [ "RandomAdaptor", "org.apache.commons.math3.random" ], [ "RandomGeneratorFactory", "org.apache.commons.math3.random" ], [ "AbstractWell", "org.apache.commons.math3.random" ], [ "RandomDataImpl", "org.apache.commons.math3.random" ], [ "EmpiricalDistribution", "org.apache.commons.math3.random" ], [ "SobolSequenceGenerator", "org.apache.commons.math3.random" ], [ "MersenneTwister", "org.apache.commons.math3.random" ], [ "UnitSphereRandomVectorGenerator", "org.apache.commons.math3.random" ], [ "FieldElement", "org.apache.commons.math3" ], [ "BigFractionFormat", "org.apache.commons.math3.fraction" ], [ "Fraction", "org.apache.commons.math3.fraction" ], [ "BigFraction", "org.apache.commons.math3.fraction" ], [ "AbstractFormat", "org.apache.commons.math3.fraction" ], [ "FractionFormat", "org.apache.commons.math3.fraction" ], [ "FractionField", "org.apache.commons.math3.fraction" ], [ "BigFractionField", "org.apache.commons.math3.fraction" ], [ "ProperFractionFormat", "org.apache.commons.math3.fraction" ], [ "FractionConversionException", "org.apache.commons.math3.fraction" ], [ "ProperBigFractionFormat", "org.apache.commons.math3.fraction" ], [ "NotFiniteNumberException", "org.apache.commons.math3.exception" ], [ "NoBracketingException", "org.apache.commons.math3.exception" ], [ "MathArithmeticException", "org.apache.commons.math3.exception" ], [ "InsufficientDataException", "org.apache.commons.math3.exception" ], [ "TooManyEvaluationsException", "org.apache.commons.math3.exception" ], [ "ExceptionContextProvider", "org.apache.commons.math3.exception.util" ], [ "ExceptionContext", "org.apache.commons.math3.exception.util" ], [ "ArgUtils", "org.apache.commons.math3.exception.util" ], [ "DummyLocalizable", "org.apache.commons.math3.exception.util" ], [ "Localizable", "org.apache.commons.math3.exception.util" ], [ "LocalizedFormats", "org.apache.commons.math3.exception.util" ], [ "NotANumberException", "org.apache.commons.math3.exception" ], [ "MultiDimensionMismatchException", "org.apache.commons.math3.exception" ], [ "OutOfRangeException", "org.apache.commons.math3.exception" ], [ "TooManyIterationsException", "org.apache.commons.math3.exception" ], [ "NullArgumentException", "org.apache.commons.math3.exception" ], [ "NumberIsTooLargeException", "org.apache.commons.math3.exception" ], [ "MathIllegalStateException", "org.apache.commons.math3.exception" ], [ "MathUnsupportedOperationException", "org.apache.commons.math3.exception" ], [ "NotStrictlyPositiveException", "org.apache.commons.math3.exception" ], [ "NonMonotonicSequenceException", "org.apache.commons.math3.exception" ], [ "ZeroException", "org.apache.commons.math3.exception" ], [ "MathIllegalArgumentException", "org.apache.commons.math3.exception" ], [ "DimensionMismatchException", "org.apache.commons.math3.exception" ], [ "MathRuntimeException", "org.apache.commons.math3.exception" ], [ "MathParseException", "org.apache.commons.math3.exception" ], [ "NoDataException", "org.apache.commons.math3.exception" ], [ "MathIllegalNumberException", "org.apache.commons.math3.exception" ], [ "NotPositiveException", "org.apache.commons.math3.exception" ], [ "MaxCountExceededException", "org.apache.commons.math3.exception" ], [ "NumberIsTooSmallException", "org.apache.commons.math3.exception" ], [ "ConvergenceException", "org.apache.commons.math3.exception" ], [ "MathInternalError", "org.apache.commons.math3.exception" ], [ "DftNormalization", "org.apache.commons.math3.transform" ], [ "RealTransformer", "org.apache.commons.math3.transform" ], [ "FastSineTransformer", "org.apache.commons.math3.transform" ], [ "DctNormalization", "org.apache.commons.math3.transform" ], [ "FastFourierTransformer", "org.apache.commons.math3.transform" ], [ "TransformType", "org.apache.commons.math3.transform" ], [ "FastCosineTransformer", "org.apache.commons.math3.transform" ], [ "TransformUtils", "org.apache.commons.math3.transform" ], [ "DstNormalization", "org.apache.commons.math3.transform" ], [ "FastHadamardTransformer", "org.apache.commons.math3.transform" ] ],
  "tokensProjectClassesNonPrivateStaticNonVoidMethods" : [ [ "isPrime", "org.apache.commons.math3.primes", "Primes", "public static boolean isPrime(int n)" ], [ "nextPrime", "org.apache.commons.math3.primes", "Primes", "public static int nextPrime(int n)" ], [ "primeFactors", "org.apache.commons.math3.primes", "Primes", "public static List<Integer> primeFactors(int n)" ], [ "smallTrialDivision", "org.apache.commons.math3.primes", "SmallPrimes", "public static int smallTrialDivision(int n, final List<Integer> factors)" ], [ "boundedTrialDivision", "org.apache.commons.math3.primes", "SmallPrimes", "public static int boundedTrialDivision(int n, int maxFactor, List<Integer> factors)" ], [ "trialDivision", "org.apache.commons.math3.primes", "SmallPrimes", "public static List<Integer> trialDivision(int n)" ], [ "millerRabinPrimeTest", "org.apache.commons.math3.primes", "SmallPrimes", "public static boolean millerRabinPrimeTest(final int n)" ], [ "primeFactors", "org.apache.commons.math3.primes", "PollardRho", "public static List<Integer> primeFactors(int n)" ], [ "rhoBrent", "org.apache.commons.math3.primes", "PollardRho", "static int rhoBrent(final int n)" ], [ "gcdPositive", "org.apache.commons.math3.primes", "PollardRho", "static int gcdPositive(int a, int b)" ], [ "create", "org.apache.commons.math3.fitting", "GaussianCurveFitter", "public static GaussianCurveFitter create()" ], [ "create", "org.apache.commons.math3.fitting", "SimpleCurveFitter", "public static SimpleCurveFitter create(ParametricUnivariateFunction f, double[] start)" ], [ "create", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem create(final MultivariateJacobianFunction model, final RealVector observed, final RealVector start, final RealMatrix weight, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations, final boolean lazyEvaluation, final ParameterValidator paramValidator)" ], [ "create", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem create(final MultivariateJacobianFunction model, final RealVector observed, final RealVector start, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations)" ], [ "create", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem create(final MultivariateJacobianFunction model, final RealVector observed, final RealVector start, final RealMatrix weight, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations)" ], [ "create", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem create(final MultivariateVectorFunction model, final MultivariateMatrixFunction jacobian, final double[] observed, final double[] start, final RealMatrix weight, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations)" ], [ "weightMatrix", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem weightMatrix(final LeastSquaresProblem problem, final RealMatrix weights)" ], [ "weightDiagonal", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem weightDiagonal(final LeastSquaresProblem problem, final RealVector weights)" ], [ "countEvaluations", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem countEvaluations(final LeastSquaresProblem problem, final Incrementor counter)" ], [ "evaluationChecker", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static ConvergenceChecker<Evaluation> evaluationChecker(final ConvergenceChecker<PointVectorValuePair> checker)" ], [ "model", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static MultivariateJacobianFunction model(final MultivariateVectorFunction value, final MultivariateMatrixFunction jacobian)" ], [ "create", "org.apache.commons.math3.fitting", "HarmonicCurveFitter", "public static HarmonicCurveFitter create()" ], [ "create", "org.apache.commons.math3.fitting", "PolynomialCurveFitter", "public static PolynomialCurveFitter create(int degree)" ], [ "compose", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateFunction compose(final UnivariateFunction... f)" ], [ "compose", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateDifferentiableFunction compose(final UnivariateDifferentiableFunction... f)" ], [ "compose", "org.apache.commons.math3.analysis", "FunctionUtils", "public static DifferentiableUnivariateFunction compose(final DifferentiableUnivariateFunction... f)" ], [ "add", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateFunction add(final UnivariateFunction... f)" ], [ "add", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateDifferentiableFunction add(final UnivariateDifferentiableFunction... f)" ], [ "add", "org.apache.commons.math3.analysis", "FunctionUtils", "public static DifferentiableUnivariateFunction add(final DifferentiableUnivariateFunction... f)" ], [ "multiply", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateFunction multiply(final UnivariateFunction... f)" ], [ "multiply", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateDifferentiableFunction multiply(final UnivariateDifferentiableFunction... f)" ], [ "multiply", "org.apache.commons.math3.analysis", "FunctionUtils", "public static DifferentiableUnivariateFunction multiply(final DifferentiableUnivariateFunction... f)" ], [ "combine", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateFunction combine(final BivariateFunction combiner, final UnivariateFunction f, final UnivariateFunction g)" ], [ "collector", "org.apache.commons.math3.analysis", "FunctionUtils", "public static MultivariateFunction collector(final BivariateFunction combiner, final UnivariateFunction f, final double initialValue)" ], [ "collector", "org.apache.commons.math3.analysis", "FunctionUtils", "public static MultivariateFunction collector(final BivariateFunction combiner, final double initialValue)" ], [ "fix1stArgument", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateFunction fix1stArgument(final BivariateFunction f, final double fixed)" ], [ "fix2ndArgument", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateFunction fix2ndArgument(final BivariateFunction f, final double fixed)" ], [ "sample", "org.apache.commons.math3.analysis", "FunctionUtils", "public static double[] sample(UnivariateFunction f, double min, double max, int n) throws NumberIsTooLargeException, NotStrictlyPositiveException" ], [ "toDifferentiableUnivariateFunction", "org.apache.commons.math3.analysis", "FunctionUtils", "public static DifferentiableUnivariateFunction toDifferentiableUnivariateFunction(final UnivariateDifferentiableFunction f)" ], [ "toUnivariateDifferential", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateDifferentiableFunction toUnivariateDifferential(final DifferentiableUnivariateFunction f)" ], [ "toDifferentiableMultivariateFunction", "org.apache.commons.math3.analysis", "FunctionUtils", "public static DifferentiableMultivariateFunction toDifferentiableMultivariateFunction(final MultivariateDifferentiableFunction f)" ], [ "toMultivariateDifferentiableFunction", "org.apache.commons.math3.analysis", "FunctionUtils", "public static MultivariateDifferentiableFunction toMultivariateDifferentiableFunction(final DifferentiableMultivariateFunction f)" ], [ "toDifferentiableMultivariateVectorFunction", "org.apache.commons.math3.analysis", "FunctionUtils", "public static DifferentiableMultivariateVectorFunction toDifferentiableMultivariateVectorFunction(final MultivariateDifferentiableVectorFunction f)" ], [ "toMultivariateDifferentiableVectorFunction", "org.apache.commons.math3.analysis", "FunctionUtils", "public static MultivariateDifferentiableVectorFunction toMultivariateDifferentiableVectorFunction(final DifferentiableMultivariateVectorFunction f)" ], [ "solve", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double solve(UnivariateFunction function, double x0, double x1) throws NullArgumentException, NoBracketingException" ], [ "solve", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double solve(UnivariateFunction function, double x0, double x1, double absoluteAccuracy) throws NullArgumentException, NoBracketingException" ], [ "forceSide", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double forceSide(final int maxEval, final UnivariateFunction f, final BracketedUnivariateSolver<UnivariateFunction> bracketing, final double baseRoot, final double min, final double max, final AllowedSolution allowedSolution) throws NoBracketingException" ], [ "bracket", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double[] bracket(UnivariateFunction function, double initial, double lowerBound, double upperBound) throws NullArgumentException, NotStrictlyPositiveException, NoBracketingException" ], [ "bracket", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double[] bracket(UnivariateFunction function, double initial, double lowerBound, double upperBound, int maximumIterations) throws NullArgumentException, NotStrictlyPositiveException, NoBracketingException" ], [ "bracket", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double[] bracket(final UnivariateFunction function, final double initial, final double lowerBound, final double upperBound, final double q, final double r, final int maximumIterations) throws NoBracketingException" ], [ "midpoint", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double midpoint(double a, double b)" ], [ "isBracketing", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static boolean isBracketing(UnivariateFunction function, final double lower, final double upper) throws NullArgumentException" ], [ "isSequence", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static boolean isSequence(final double start, final double mid, final double end)" ], [ "getCompiler", "org.apache.commons.math3.analysis.differentiation", "DSCompiler", "public static DSCompiler getCompiler(int parameters, int order) throws NumberIsTooLargeException" ], [ "createConstant", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public static SparseGradient createConstant(final double value)" ], [ "createVariable", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public static SparseGradient createVariable(final int idx, final double value)" ], [ "hypot", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public static SparseGradient hypot(final SparseGradient x, final SparseGradient y)" ], [ "pow", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public static SparseGradient pow(final double a, final SparseGradient x)" ], [ "atan2", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public static SparseGradient atan2(final SparseGradient y, final SparseGradient x)" ], [ "hypot", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public static DerivativeStructure hypot(final DerivativeStructure x, final DerivativeStructure y) throws DimensionMismatchException" ], [ "pow", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public static DerivativeStructure pow(final double a, final DerivativeStructure x)" ], [ "atan2", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public static DerivativeStructure atan2(final DerivativeStructure y, final DerivativeStructure x) throws DimensionMismatchException" ], [ "evaluate", "org.apache.commons.math3.analysis.polynomials", "PolynomialFunctionNewtonForm", "public static double evaluate(double[] a, double[] c, double z) throws NullArgumentException, DimensionMismatchException, NoDataException" ], [ "evaluate", "org.apache.commons.math3.analysis.polynomials", "PolynomialFunctionLagrangeForm", "public static double evaluate(double[] x, double[] y, double z) throws DimensionMismatchException, NumberIsTooSmallException, NonMonotonicSequenceException" ], [ "verifyInterpolationArray", "org.apache.commons.math3.analysis.polynomials", "PolynomialFunctionLagrangeForm", "public static boolean verifyInterpolationArray(double[] x, double[] y, boolean abort) throws DimensionMismatchException, NumberIsTooSmallException, NonMonotonicSequenceException" ], [ "createChebyshevPolynomial", "org.apache.commons.math3.analysis.polynomials", "PolynomialsUtils", "public static PolynomialFunction createChebyshevPolynomial(final int degree)" ], [ "createHermitePolynomial", "org.apache.commons.math3.analysis.polynomials", "PolynomialsUtils", "public static PolynomialFunction createHermitePolynomial(final int degree)" ], [ "createLaguerrePolynomial", "org.apache.commons.math3.analysis.polynomials", "PolynomialsUtils", "public static PolynomialFunction createLaguerrePolynomial(final int degree)" ], [ "createLegendrePolynomial", "org.apache.commons.math3.analysis.polynomials", "PolynomialsUtils", "public static PolynomialFunction createLegendrePolynomial(final int degree)" ], [ "createJacobiPolynomial", "org.apache.commons.math3.analysis.polynomials", "PolynomialsUtils", "public static PolynomialFunction createJacobiPolynomial(final int degree, final int v, final int w)" ], [ "shift", "org.apache.commons.math3.analysis.polynomials", "PolynomialsUtils", "public static double[] shift(final double[] coefficients, final double shift)" ], [ "evaluate", "org.apache.commons.math3.analysis.polynomials", "PolynomialFunction", "protected static double evaluate(double[] coefficients, double argument) throws NullArgumentException, NoDataException" ], [ "differentiate", "org.apache.commons.math3.analysis.polynomials", "PolynomialFunction", "protected static double[] differentiate(double[] coefficients) throws NullArgumentException, NoDataException" ], [ "computeDividedDifference", "org.apache.commons.math3.analysis.interpolation", "DividedDifferenceInterpolator", "protected static double[] computeDividedDifference(final double[] x, final double[] y) throws DimensionMismatchException, NumberIsTooSmallException, NonMonotonicSequenceException" ], [ "compareTo", "org.apache.commons.math3.util", "Precision", "public static int compareTo(double x, double y, double eps)" ], [ "compareTo", "org.apache.commons.math3.util", "Precision", "public static int compareTo(final double x, final double y, final int maxUlps)" ], [ "equals", "org.apache.commons.math3.util", "Precision", "public static boolean equals(float x, float y)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "Precision", "public static boolean equalsIncludingNaN(float x, float y)" ], [ "equals", "org.apache.commons.math3.util", "Precision", "public static boolean equals(float x, float y, float eps)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "Precision", "public static boolean equalsIncludingNaN(float x, float y, float eps)" ], [ "equals", "org.apache.commons.math3.util", "Precision", "public static boolean equals(final float x, final float y, final int maxUlps)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "Precision", "public static boolean equalsIncludingNaN(float x, float y, int maxUlps)" ], [ "equals", "org.apache.commons.math3.util", "Precision", "public static boolean equals(double x, double y)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "Precision", "public static boolean equalsIncludingNaN(double x, double y)" ], [ "equals", "org.apache.commons.math3.util", "Precision", "public static boolean equals(double x, double y, double eps)" ], [ "equalsWithRelativeTolerance", "org.apache.commons.math3.util", "Precision", "public static boolean equalsWithRelativeTolerance(double x, double y, double eps)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "Precision", "public static boolean equalsIncludingNaN(double x, double y, double eps)" ], [ "equals", "org.apache.commons.math3.util", "Precision", "public static boolean equals(final double x, final double y, final int maxUlps)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "Precision", "public static boolean equalsIncludingNaN(double x, double y, int maxUlps)" ], [ "round", "org.apache.commons.math3.util", "Precision", "public static double round(double x, int scale)" ], [ "round", "org.apache.commons.math3.util", "Precision", "public static double round(double x, int scale, int roundingMethod)" ], [ "round", "org.apache.commons.math3.util", "Precision", "public static float round(float x, int scale)" ], [ "round", "org.apache.commons.math3.util", "Precision", "public static float round(float x, int scale, int roundingMethod) throws MathArithmeticException, MathIllegalArgumentException" ], [ "representableDelta", "org.apache.commons.math3.util", "Precision", "public static double representableDelta(double x, double originalDelta)" ], [ "wrap", "org.apache.commons.math3.util", "Incrementor", "public static Incrementor wrap(final IntegerSequence.Incrementor incrementor)" ], [ "scale", "org.apache.commons.math3.util", "MathArrays", "public static double[] scale(double val, final double[] arr)" ], [ "ebeAdd", "org.apache.commons.math3.util", "MathArrays", "public static double[] ebeAdd(double[] a, double[] b) throws DimensionMismatchException" ], [ "ebeSubtract", "org.apache.commons.math3.util", "MathArrays", "public static double[] ebeSubtract(double[] a, double[] b) throws DimensionMismatchException" ], [ "ebeMultiply", "org.apache.commons.math3.util", "MathArrays", "public static double[] ebeMultiply(double[] a, double[] b) throws DimensionMismatchException" ], [ "ebeDivide", "org.apache.commons.math3.util", "MathArrays", "public static double[] ebeDivide(double[] a, double[] b) throws DimensionMismatchException" ], [ "distance1", "org.apache.commons.math3.util", "MathArrays", "public static double distance1(double[] p1, double[] p2) throws DimensionMismatchException" ], [ "distance1", "org.apache.commons.math3.util", "MathArrays", "public static int distance1(int[] p1, int[] p2) throws DimensionMismatchException" ], [ "distance", "org.apache.commons.math3.util", "MathArrays", "public static double distance(double[] p1, double[] p2) throws DimensionMismatchException" ], [ "cosAngle", "org.apache.commons.math3.util", "MathArrays", "public static double cosAngle(double[] v1, double[] v2)" ], [ "distance", "org.apache.commons.math3.util", "MathArrays", "public static double distance(int[] p1, int[] p2) throws DimensionMismatchException" ], [ "distanceInf", "org.apache.commons.math3.util", "MathArrays", "public static double distanceInf(double[] p1, double[] p2) throws DimensionMismatchException" ], [ "distanceInf", "org.apache.commons.math3.util", "MathArrays", "public static int distanceInf(int[] p1, int[] p2) throws DimensionMismatchException" ], [ "isMonotonic", "org.apache.commons.math3.util", "MathArrays", "public static <T extends Comparable<? super T>> boolean isMonotonic(T[] val, OrderDirection dir, boolean strict)" ], [ "isMonotonic", "org.apache.commons.math3.util", "MathArrays", "public static boolean isMonotonic(double[] val, OrderDirection dir, boolean strict)" ], [ "checkEqualLength", "org.apache.commons.math3.util", "MathArrays", "public static boolean checkEqualLength(double[] a, double[] b, boolean abort)" ], [ "checkEqualLength", "org.apache.commons.math3.util", "MathArrays", "public static boolean checkEqualLength(int[] a, int[] b, boolean abort)" ], [ "checkOrder", "org.apache.commons.math3.util", "MathArrays", "public static boolean checkOrder(double[] val, OrderDirection dir, boolean strict, boolean abort) throws NonMonotonicSequenceException" ], [ "safeNorm", "org.apache.commons.math3.util", "MathArrays", "public static double safeNorm(double[] v)" ], [ "copyOf", "org.apache.commons.math3.util", "MathArrays", "public static int[] copyOf(int[] source)" ], [ "copyOf", "org.apache.commons.math3.util", "MathArrays", "public static double[] copyOf(double[] source)" ], [ "copyOf", "org.apache.commons.math3.util", "MathArrays", "public static int[] copyOf(int[] source, int len)" ], [ "copyOf", "org.apache.commons.math3.util", "MathArrays", "public static double[] copyOf(double[] source, int len)" ], [ "copyOfRange", "org.apache.commons.math3.util", "MathArrays", "public static double[] copyOfRange(double[] source, int from, int to)" ], [ "linearCombination", "org.apache.commons.math3.util", "MathArrays", "public static double linearCombination(final double[] a, final double[] b) throws DimensionMismatchException" ], [ "linearCombination", "org.apache.commons.math3.util", "MathArrays", "public static double linearCombination(final double a1, final double b1, final double a2, final double b2)" ], [ "linearCombination", "org.apache.commons.math3.util", "MathArrays", "public static double linearCombination(final double a1, final double b1, final double a2, final double b2, final double a3, final double b3)" ], [ "linearCombination", "org.apache.commons.math3.util", "MathArrays", "public static double linearCombination(final double a1, final double b1, final double a2, final double b2, final double a3, final double b3, final double a4, final double b4)" ], [ "equals", "org.apache.commons.math3.util", "MathArrays", "public static boolean equals(float[] x, float[] y)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "MathArrays", "public static boolean equalsIncludingNaN(float[] x, float[] y)" ], [ "equals", "org.apache.commons.math3.util", "MathArrays", "public static boolean equals(double[] x, double[] y)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "MathArrays", "public static boolean equalsIncludingNaN(double[] x, double[] y)" ], [ "normalizeArray", "org.apache.commons.math3.util", "MathArrays", "public static double[] normalizeArray(double[] values, double normalizedSum) throws MathIllegalArgumentException, MathArithmeticException" ], [ "buildArray", "org.apache.commons.math3.util", "MathArrays", "public static <T> T[] buildArray(final Field<T> field, final int length)" ], [ "buildArray", "org.apache.commons.math3.util", "MathArrays", "public static <T> T[][] buildArray(final Field<T> field, final int rows, final int columns)" ], [ "convolve", "org.apache.commons.math3.util", "MathArrays", "public static double[] convolve(double[] x, double[] h) throws NullArgumentException, NoDataException" ], [ "natural", "org.apache.commons.math3.util", "MathArrays", "public static int[] natural(int n)" ], [ "sequence", "org.apache.commons.math3.util", "MathArrays", "public static int[] sequence(int size, int start, int stride)" ], [ "verifyValues", "org.apache.commons.math3.util", "MathArrays", "public static boolean verifyValues(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "verifyValues", "org.apache.commons.math3.util", "MathArrays", "public static boolean verifyValues(final double[] values, final int begin, final int length, final boolean allowEmpty) throws MathIllegalArgumentException" ], [ "verifyValues", "org.apache.commons.math3.util", "MathArrays", "public static boolean verifyValues(final double[] values, final double[] weights, final int begin, final int length) throws MathIllegalArgumentException" ], [ "verifyValues", "org.apache.commons.math3.util", "MathArrays", "public static boolean verifyValues(final double[] values, final double[] weights, final int begin, final int length, final boolean allowEmpty) throws MathIllegalArgumentException" ], [ "concatenate", "org.apache.commons.math3.util", "MathArrays", "public static double[] concatenate(double[]... x)" ], [ "unique", "org.apache.commons.math3.util", "MathArrays", "public static double[] unique(double[] data)" ], [ "create", "org.apache.commons.math3.util", "Pair", "public static <K, V> Pair<K, V> create(K k, V v)" ], [ "slowCos", "org.apache.commons.math3.util", "FastMathCalc", "static double slowCos(final double x, final double[] result)" ], [ "slowSin", "org.apache.commons.math3.util", "FastMathCalc", "static double slowSin(final double x, final double[] result)" ], [ "slowexp", "org.apache.commons.math3.util", "FastMathCalc", "static double slowexp(final double x, final double[] result)" ], [ "expint", "org.apache.commons.math3.util", "FastMathCalc", "static double expint(int p, final double[] result)" ], [ "slowLog", "org.apache.commons.math3.util", "FastMathCalc", "static double[] slowLog(double xi)" ], [ "format", "org.apache.commons.math3.util", "FastMathCalc", "static String format(double d)" ], [ "sqrt", "org.apache.commons.math3.util", "FastMath", "public static double sqrt(final double a)" ], [ "cosh", "org.apache.commons.math3.util", "FastMath", "public static double cosh(double x)" ], [ "sinh", "org.apache.commons.math3.util", "FastMath", "public static double sinh(double x)" ], [ "tanh", "org.apache.commons.math3.util", "FastMath", "public static double tanh(double x)" ], [ "acosh", "org.apache.commons.math3.util", "FastMath", "public static double acosh(final double a)" ], [ "asinh", "org.apache.commons.math3.util", "FastMath", "public static double asinh(double a)" ], [ "atanh", "org.apache.commons.math3.util", "FastMath", "public static double atanh(double a)" ], [ "signum", "org.apache.commons.math3.util", "FastMath", "public static double signum(final double a)" ], [ "signum", "org.apache.commons.math3.util", "FastMath", "public static float signum(final float a)" ], [ "nextUp", "org.apache.commons.math3.util", "FastMath", "public static double nextUp(final double a)" ], [ "nextUp", "org.apache.commons.math3.util", "FastMath", "public static float nextUp(final float a)" ], [ "nextDown", "org.apache.commons.math3.util", "FastMath", "public static double nextDown(final double a)" ], [ "nextDown", "org.apache.commons.math3.util", "FastMath", "public static float nextDown(final float a)" ], [ "random", "org.apache.commons.math3.util", "FastMath", "public static double random()" ], [ "exp", "org.apache.commons.math3.util", "FastMath", "public static double exp(double x)" ], [ "expm1", "org.apache.commons.math3.util", "FastMath", "public static double expm1(double x)" ], [ "log", "org.apache.commons.math3.util", "FastMath", "public static double log(final double x)" ], [ "log1p", "org.apache.commons.math3.util", "FastMath", "public static double log1p(final double x)" ], [ "log10", "org.apache.commons.math3.util", "FastMath", "public static double log10(final double x)" ], [ "log", "org.apache.commons.math3.util", "FastMath", "public static double log(double base, double x)" ], [ "pow", "org.apache.commons.math3.util", "FastMath", "public static double pow(final double x, final double y)" ], [ "pow", "org.apache.commons.math3.util", "FastMath", "public static double pow(double d, int e)" ], [ "pow", "org.apache.commons.math3.util", "FastMath", "public static double pow(double d, long e)" ], [ "sin", "org.apache.commons.math3.util", "FastMath", "public static double sin(double x)" ], [ "cos", "org.apache.commons.math3.util", "FastMath", "public static double cos(double x)" ], [ "tan", "org.apache.commons.math3.util", "FastMath", "public static double tan(double x)" ], [ "atan", "org.apache.commons.math3.util", "FastMath", "public static double atan(double x)" ], [ "atan2", "org.apache.commons.math3.util", "FastMath", "public static double atan2(double y, double x)" ], [ "asin", "org.apache.commons.math3.util", "FastMath", "public static double asin(double x)" ], [ "acos", "org.apache.commons.math3.util", "FastMath", "public static double acos(double x)" ], [ "cbrt", "org.apache.commons.math3.util", "FastMath", "public static double cbrt(double x)" ], [ "toRadians", "org.apache.commons.math3.util", "FastMath", "public static double toRadians(double x)" ], [ "toDegrees", "org.apache.commons.math3.util", "FastMath", "public static double toDegrees(double x)" ], [ "abs", "org.apache.commons.math3.util", "FastMath", "public static int abs(final int x)" ], [ "abs", "org.apache.commons.math3.util", "FastMath", "public static long abs(final long x)" ], [ "abs", "org.apache.commons.math3.util", "FastMath", "public static float abs(final float x)" ], [ "abs", "org.apache.commons.math3.util", "FastMath", "public static double abs(double x)" ], [ "ulp", "org.apache.commons.math3.util", "FastMath", "public static double ulp(double x)" ], [ "ulp", "org.apache.commons.math3.util", "FastMath", "public static float ulp(float x)" ], [ "scalb", "org.apache.commons.math3.util", "FastMath", "public static double scalb(final double d, final int n)" ], [ "scalb", "org.apache.commons.math3.util", "FastMath", "public static float scalb(final float f, final int n)" ], [ "nextAfter", "org.apache.commons.math3.util", "FastMath", "public static double nextAfter(double d, double direction)" ], [ "nextAfter", "org.apache.commons.math3.util", "FastMath", "public static float nextAfter(final float f, final double direction)" ], [ "floor", "org.apache.commons.math3.util", "FastMath", "public static double floor(double x)" ], [ "ceil", "org.apache.commons.math3.util", "FastMath", "public static double ceil(double x)" ], [ "rint", "org.apache.commons.math3.util", "FastMath", "public static double rint(double x)" ], [ "round", "org.apache.commons.math3.util", "FastMath", "public static long round(double x)" ], [ "round", "org.apache.commons.math3.util", "FastMath", "public static int round(final float x)" ], [ "min", "org.apache.commons.math3.util", "FastMath", "public static int min(final int a, final int b)" ], [ "min", "org.apache.commons.math3.util", "FastMath", "public static long min(final long a, final long b)" ], [ "min", "org.apache.commons.math3.util", "FastMath", "public static float min(final float a, final float b)" ], [ "min", "org.apache.commons.math3.util", "FastMath", "public static double min(final double a, final double b)" ], [ "max", "org.apache.commons.math3.util", "FastMath", "public static int max(final int a, final int b)" ], [ "max", "org.apache.commons.math3.util", "FastMath", "public static long max(final long a, final long b)" ], [ "max", "org.apache.commons.math3.util", "FastMath", "public static float max(final float a, final float b)" ], [ "max", "org.apache.commons.math3.util", "FastMath", "public static double max(final double a, final double b)" ], [ "hypot", "org.apache.commons.math3.util", "FastMath", "public static double hypot(final double x, final double y)" ], [ "IEEEremainder", "org.apache.commons.math3.util", "FastMath", "public static double IEEEremainder(double dividend, double divisor)" ], [ "toIntExact", "org.apache.commons.math3.util", "FastMath", "public static int toIntExact(final long n) throws MathArithmeticException" ], [ "incrementExact", "org.apache.commons.math3.util", "FastMath", "public static int incrementExact(final int n) throws MathArithmeticException" ], [ "incrementExact", "org.apache.commons.math3.util", "FastMath", "public static long incrementExact(final long n) throws MathArithmeticException" ], [ "decrementExact", "org.apache.commons.math3.util", "FastMath", "public static int decrementExact(final int n) throws MathArithmeticException" ], [ "decrementExact", "org.apache.commons.math3.util", "FastMath", "public static long decrementExact(final long n) throws MathArithmeticException" ], [ "addExact", "org.apache.commons.math3.util", "FastMath", "public static int addExact(final int a, final int b) throws MathArithmeticException" ], [ "addExact", "org.apache.commons.math3.util", "FastMath", "public static long addExact(final long a, final long b) throws MathArithmeticException" ], [ "subtractExact", "org.apache.commons.math3.util", "FastMath", "public static int subtractExact(final int a, final int b)" ], [ "subtractExact", "org.apache.commons.math3.util", "FastMath", "public static long subtractExact(final long a, final long b)" ], [ "multiplyExact", "org.apache.commons.math3.util", "FastMath", "public static int multiplyExact(final int a, final int b)" ], [ "multiplyExact", "org.apache.commons.math3.util", "FastMath", "public static long multiplyExact(final long a, final long b)" ], [ "floorDiv", "org.apache.commons.math3.util", "FastMath", "public static int floorDiv(final int a, final int b) throws MathArithmeticException" ], [ "floorDiv", "org.apache.commons.math3.util", "FastMath", "public static long floorDiv(final long a, final long b) throws MathArithmeticException" ], [ "floorMod", "org.apache.commons.math3.util", "FastMath", "public static int floorMod(final int a, final int b) throws MathArithmeticException" ], [ "floorMod", "org.apache.commons.math3.util", "FastMath", "public static long floorMod(final long a, final long b)" ], [ "copySign", "org.apache.commons.math3.util", "FastMath", "public static double copySign(double magnitude, double sign)" ], [ "copySign", "org.apache.commons.math3.util", "FastMath", "public static float copySign(float magnitude, float sign)" ], [ "getExponent", "org.apache.commons.math3.util", "FastMath", "public static int getExponent(final double d)" ], [ "getExponent", "org.apache.commons.math3.util", "FastMath", "public static int getExponent(final float f)" ], [ "getInstance", "org.apache.commons.math3.util", "BigRealField", "public static BigRealField getInstance()" ], [ "getInstance", "org.apache.commons.math3.util", "Decimal64Field", "public static final Decimal64Field getInstance()" ], [ "hash", "org.apache.commons.math3.util", "MathUtils", "public static int hash(double value)" ], [ "equals", "org.apache.commons.math3.util", "MathUtils", "public static boolean equals(double x, double y)" ], [ "hash", "org.apache.commons.math3.util", "MathUtils", "public static int hash(double[] value)" ], [ "normalizeAngle", "org.apache.commons.math3.util", "MathUtils", "public static double normalizeAngle(double a, double center)" ], [ "max", "org.apache.commons.math3.util", "MathUtils", "public static <T extends RealFieldElement<T>> T max(final T e1, final T e2)" ], [ "min", "org.apache.commons.math3.util", "MathUtils", "public static <T extends RealFieldElement<T>> T min(final T e1, final T e2)" ], [ "reduce", "org.apache.commons.math3.util", "MathUtils", "public static double reduce(double a, double period, double offset)" ], [ "copySign", "org.apache.commons.math3.util", "MathUtils", "public static byte copySign(byte magnitude, byte sign) throws MathArithmeticException" ], [ "copySign", "org.apache.commons.math3.util", "MathUtils", "public static short copySign(short magnitude, short sign) throws MathArithmeticException" ], [ "copySign", "org.apache.commons.math3.util", "MathUtils", "public static int copySign(int magnitude, int sign) throws MathArithmeticException" ], [ "copySign", "org.apache.commons.math3.util", "MathUtils", "public static long copySign(long magnitude, long sign) throws MathArithmeticException" ], [ "getDefaultNumberFormat", "org.apache.commons.math3.util", "CompositeFormat", "public static NumberFormat getDefaultNumberFormat()" ], [ "getDefaultNumberFormat", "org.apache.commons.math3.util", "CompositeFormat", "public static NumberFormat getDefaultNumberFormat(final Locale locale)" ], [ "parseNextCharacter", "org.apache.commons.math3.util", "CompositeFormat", "public static char parseNextCharacter(final String source, final ParsePosition pos)" ], [ "parseNumber", "org.apache.commons.math3.util", "CompositeFormat", "public static Number parseNumber(final String source, final NumberFormat format, final ParsePosition pos)" ], [ "parseFixedstring", "org.apache.commons.math3.util", "CompositeFormat", "public static boolean parseFixedstring(final String source, final String expected, final ParsePosition pos)" ], [ "formatDouble", "org.apache.commons.math3.util", "CompositeFormat", "public static StringBuffer formatDouble(final double value, final NumberFormat format, final StringBuffer toAppendTo, final FieldPosition pos)" ], [ "range", "org.apache.commons.math3.util", "IntegerSequence", "public static Range range(int start, int end)" ], [ "range", "org.apache.commons.math3.util", "IntegerSequence", "public static Range range(final int start, final int max, final int step)" ], [ "create", "org.apache.commons.math3.util", "IntegerSequence", "public static Incrementor create()" ], [ "create", "org.apache.commons.math3.util", "Incrementor", "public static Incrementor create()" ], [ "loadExpIntA", "org.apache.commons.math3.util", "FastMathLiteralArrays", "static double[] loadExpIntA()" ], [ "loadExpIntB", "org.apache.commons.math3.util", "FastMathLiteralArrays", "static double[] loadExpIntB()" ], [ "loadExpFracA", "org.apache.commons.math3.util", "FastMathLiteralArrays", "static double[] loadExpFracA()" ], [ "loadExpFracB", "org.apache.commons.math3.util", "FastMathLiteralArrays", "static double[] loadExpFracB()" ], [ "loadLnMant", "org.apache.commons.math3.util", "FastMathLiteralArrays", "static double[][] loadLnMant()" ], [ "binomialCoefficient", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static long binomialCoefficient(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "binomialCoefficientDouble", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static double binomialCoefficientDouble(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "binomialCoefficientLog", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static double binomialCoefficientLog(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "factorial", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static long factorial(final int n) throws NotPositiveException, MathArithmeticException" ], [ "factorialDouble", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static double factorialDouble(final int n) throws NotPositiveException" ], [ "factorialLog", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static double factorialLog(final int n) throws NotPositiveException" ], [ "stirlingS2", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static long stirlingS2(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "combinationsIterator", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static Iterator<int[]> combinationsIterator(int n, int k)" ], [ "addAndCheck", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int addAndCheck(int x, int y) throws MathArithmeticException" ], [ "addAndCheck", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long addAndCheck(long a, long b) throws MathArithmeticException" ], [ "binomialCoefficient", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long binomialCoefficient(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "binomialCoefficientDouble", "org.apache.commons.math3.util", "ArithmeticUtils", "public static double binomialCoefficientDouble(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "binomialCoefficientLog", "org.apache.commons.math3.util", "ArithmeticUtils", "public static double binomialCoefficientLog(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "factorial", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long factorial(final int n) throws NotPositiveException, MathArithmeticException" ], [ "factorialDouble", "org.apache.commons.math3.util", "ArithmeticUtils", "public static double factorialDouble(final int n) throws NotPositiveException" ], [ "factorialLog", "org.apache.commons.math3.util", "ArithmeticUtils", "public static double factorialLog(final int n) throws NotPositiveException" ], [ "gcd", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int gcd(int p, int q) throws MathArithmeticException" ], [ "gcd", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long gcd(final long p, final long q) throws MathArithmeticException" ], [ "lcm", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int lcm(int a, int b) throws MathArithmeticException" ], [ "lcm", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long lcm(long a, long b) throws MathArithmeticException" ], [ "mulAndCheck", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int mulAndCheck(int x, int y) throws MathArithmeticException" ], [ "mulAndCheck", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long mulAndCheck(long a, long b) throws MathArithmeticException" ], [ "subAndCheck", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int subAndCheck(int x, int y) throws MathArithmeticException" ], [ "subAndCheck", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long subAndCheck(long a, long b) throws MathArithmeticException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int pow(final int k, final int e) throws NotPositiveException, MathArithmeticException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int pow(final int k, long e) throws NotPositiveException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long pow(final long k, final int e) throws NotPositiveException, MathArithmeticException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long pow(final long k, long e) throws NotPositiveException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static BigInteger pow(final BigInteger k, int e) throws NotPositiveException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static BigInteger pow(final BigInteger k, long e) throws NotPositiveException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static BigInteger pow(final BigInteger k, BigInteger e) throws NotPositiveException" ], [ "stirlingS2", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long stirlingS2(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "isPowerOfTwo", "org.apache.commons.math3.util", "ArithmeticUtils", "public static boolean isPowerOfTwo(long n)" ], [ "getAvailableLocales", "org.apache.commons.math3.complex", "ComplexFormat", "public static Locale[] getAvailableLocales()" ], [ "getInstance", "org.apache.commons.math3.complex", "ComplexFormat", "public static ComplexFormat getInstance()" ], [ "getInstance", "org.apache.commons.math3.complex", "ComplexFormat", "public static ComplexFormat getInstance(Locale locale)" ], [ "getInstance", "org.apache.commons.math3.complex", "ComplexFormat", "public static ComplexFormat getInstance(String imaginaryCharacter, Locale locale) throws NullArgumentException, NoDataException" ], [ "getInstance", "org.apache.commons.math3.complex", "ComplexField", "public static ComplexField getInstance()" ], [ "multiply", "org.apache.commons.math3.complex", "Quaternion", "public static Quaternion multiply(final Quaternion q1, final Quaternion q2)" ], [ "add", "org.apache.commons.math3.complex", "Quaternion", "public static Quaternion add(final Quaternion q1, final Quaternion q2)" ], [ "subtract", "org.apache.commons.math3.complex", "Quaternion", "public static Quaternion subtract(final Quaternion q1, final Quaternion q2)" ], [ "dotProduct", "org.apache.commons.math3.complex", "Quaternion", "public static double dotProduct(final Quaternion q1, final Quaternion q2)" ], [ "equals", "org.apache.commons.math3.complex", "Complex", "public static boolean equals(Complex x, Complex y, int maxUlps)" ], [ "equals", "org.apache.commons.math3.complex", "Complex", "public static boolean equals(Complex x, Complex y)" ], [ "equals", "org.apache.commons.math3.complex", "Complex", "public static boolean equals(Complex x, Complex y, double eps)" ], [ "equalsWithRelativeTolerance", "org.apache.commons.math3.complex", "Complex", "public static boolean equalsWithRelativeTolerance(Complex x, Complex y, double eps)" ], [ "valueOf", "org.apache.commons.math3.complex", "Complex", "public static Complex valueOf(double realPart, double imaginaryPart)" ], [ "valueOf", "org.apache.commons.math3.complex", "Complex", "public static Complex valueOf(double realPart)" ], [ "polar2Complex", "org.apache.commons.math3.complex", "ComplexUtils", "public static Complex polar2Complex(double r, double theta) throws MathIllegalArgumentException" ], [ "convertToComplex", "org.apache.commons.math3.complex", "ComplexUtils", "public static Complex[] convertToComplex(double[] real)" ], [ "getInvertedCoefficientSum", "org.apache.commons.math3.optimization.linear", "SimplexTableau", "protected static double getInvertedCoefficientSum(final RealVector coefficients)" ], [ "getAvailableLocales", "org.apache.commons.math3.linear", "RealMatrixFormat", "public static Locale[] getAvailableLocales()" ], [ "getInstance", "org.apache.commons.math3.linear", "RealMatrixFormat", "public static RealMatrixFormat getInstance()" ], [ "getInstance", "org.apache.commons.math3.linear", "RealMatrixFormat", "public static RealMatrixFormat getInstance(final Locale locale)" ], [ "createRealMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix createRealMatrix(final int rows, final int columns)" ], [ "createFieldMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldMatrix(final Field<T> field, final int rows, final int columns)" ], [ "createRealMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix createRealMatrix(double[][] data) throws NullArgumentException, DimensionMismatchException, NoDataException" ], [ "createFieldMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldMatrix(T[][] data) throws DimensionMismatchException, NoDataException, NullArgumentException" ], [ "createRealIdentityMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix createRealIdentityMatrix(int dimension)" ], [ "createFieldIdentityMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldIdentityMatrix(final Field<T> field, final int dimension)" ], [ "createRealDiagonalMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix createRealDiagonalMatrix(final double[] diagonal)" ], [ "createFieldDiagonalMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldDiagonalMatrix(final T[] diagonal)" ], [ "createRealVector", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealVector createRealVector(double[] data) throws NoDataException, NullArgumentException" ], [ "createFieldVector", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldVector<T> createFieldVector(final T[] data) throws NoDataException, NullArgumentException, ZeroException" ], [ "createRowRealMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix createRowRealMatrix(double[] rowData) throws NoDataException, NullArgumentException" ], [ "createRowFieldMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldMatrix<T> createRowFieldMatrix(final T[] rowData) throws NoDataException, NullArgumentException" ], [ "createColumnRealMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix createColumnRealMatrix(double[] columnData) throws NoDataException, NullArgumentException" ], [ "createColumnFieldMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldMatrix<T> createColumnFieldMatrix(final T[] columnData) throws NoDataException, NullArgumentException" ], [ "isSymmetric", "org.apache.commons.math3.linear", "MatrixUtils", "public static boolean isSymmetric(RealMatrix matrix, double eps)" ], [ "fractionMatrixToRealMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static Array2DRowRealMatrix fractionMatrixToRealMatrix(final FieldMatrix<Fraction> m)" ], [ "bigFractionMatrixToRealMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static Array2DRowRealMatrix bigFractionMatrixToRealMatrix(final FieldMatrix<BigFraction> m)" ], [ "blockInverse", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix blockInverse(RealMatrix m, int splitIndex)" ], [ "inverse", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix inverse(RealMatrix matrix) throws NullArgumentException, SingularMatrixException, NonSquareMatrixException" ], [ "inverse", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix inverse(RealMatrix matrix, double threshold) throws NullArgumentException, SingularMatrixException, NonSquareMatrixException" ], [ "toBlocksLayout", "org.apache.commons.math3.linear", "BlockFieldMatrix", "public static <T extends FieldElement<T>> T[][] toBlocksLayout(final T[][] rawData) throws DimensionMismatchException" ], [ "createBlocksLayout", "org.apache.commons.math3.linear", "BlockFieldMatrix", "public static <T extends FieldElement<T>> T[][] createBlocksLayout(final Field<T> field, final int rows, final int columns)" ], [ "toBlocksLayout", "org.apache.commons.math3.linear", "BlockRealMatrix", "public static double[][] toBlocksLayout(final double[][] rawData) throws DimensionMismatchException" ], [ "createBlocksLayout", "org.apache.commons.math3.linear", "BlockRealMatrix", "public static double[][] createBlocksLayout(final int rows, final int columns)" ], [ "unmodifiableRealVector", "org.apache.commons.math3.linear", "RealVector", "public static RealVector unmodifiableRealVector(final RealVector v)" ], [ "getAvailableLocales", "org.apache.commons.math3.linear", "RealVectorFormat", "public static Locale[] getAvailableLocales()" ], [ "getInstance", "org.apache.commons.math3.linear", "RealVectorFormat", "public static RealVectorFormat getInstance()" ], [ "getInstance", "org.apache.commons.math3.linear", "RealVectorFormat", "public static RealVectorFormat getInstance(final Locale locale)" ], [ "create", "org.apache.commons.math3.linear", "JacobiPreconditioner", "public static JacobiPreconditioner create(final RealLinearOperator a) throws NonSquareOperatorException" ], [ "extractField", "org.apache.commons.math3.linear", "AbstractFieldMatrix", "protected static <T extends FieldElement<T>> Field<T> extractField(final T[][] d) throws NoDataException, NullArgumentException" ], [ "extractField", "org.apache.commons.math3.linear", "AbstractFieldMatrix", "protected static <T extends FieldElement<T>> Field<T> extractField(final T[] d) throws NoDataException" ], [ "buildArray", "org.apache.commons.math3.linear", "AbstractFieldMatrix", "protected static <T extends FieldElement<T>> T[][] buildArray(final Field<T> field, final int rows, final int columns)" ], [ "buildArray", "org.apache.commons.math3.linear", "AbstractFieldMatrix", "protected static <T extends FieldElement<T>> T[] buildArray(final Field<T> field, final int length)" ], [ "estimate", "org.apache.commons.math3.distribution.fitting", "MultivariateNormalMixtureExpectationMaximization", "public static MixtureMultivariateNormalDistribution estimate(final double[][] data, final int numComponents) throws NotStrictlyPositiveException, DimensionMismatchException" ], [ "sample", "org.apache.commons.math3.distribution", "BetaDistribution", "static double sample(RandomGenerator random, final double alpha, final double beta)" ], [ "sample", "org.apache.commons.math3.distribution", "ChengBetaSampler", "static double sample(RandomGenerator random, final double alpha, final double beta)" ], [ "getStirlingError", "org.apache.commons.math3.distribution", "SaddlePointExpansion", "static double getStirlingError(double z)" ], [ "getDeviancePart", "org.apache.commons.math3.distribution", "SaddlePointExpansion", "static double getDeviancePart(double x, double mu)" ], [ "logBinomialProbability", "org.apache.commons.math3.distribution", "SaddlePointExpansion", "static double logBinomialProbability(int x, int n, double p, double q)" ], [ "helper1", "org.apache.commons.math3.distribution", "ZipfDistribution", "static double helper1(final double x)" ], [ "helper2", "org.apache.commons.math3.distribution", "ZipfDistribution", "static double helper2(final double x)" ], [ "helper1", "org.apache.commons.math3.distribution", "ZipfRejectionInversionSampler", "static double helper1(final double x)" ], [ "helper2", "org.apache.commons.math3.distribution", "ZipfRejectionInversionSampler", "static double helper2(final double x)" ], [ "unlimited", "org.apache.commons.math3.optim", "MaxIter", "public static MaxIter unlimited()" ], [ "getInvertedCoefficientSum", "org.apache.commons.math3.optim.linear", "SimplexTableau", "protected static double getInvertedCoefficientSum(final RealVector coefficients)" ], [ "unbounded", "org.apache.commons.math3.optim", "SimpleBounds", "public static SimpleBounds unbounded(int dim)" ], [ "unlimited", "org.apache.commons.math3.optim", "MaxEval", "public static MaxEval unlimited()" ], [ "erf", "org.apache.commons.math3.special", "Erf", "public static double erf(double x)" ], [ "erfc", "org.apache.commons.math3.special", "Erf", "public static double erfc(double x)" ], [ "erf", "org.apache.commons.math3.special", "Erf", "public static double erf(double x1, double x2)" ], [ "erfInv", "org.apache.commons.math3.special", "Erf", "public static double erfInv(final double x)" ], [ "erfcInv", "org.apache.commons.math3.special", "Erf", "public static double erfcInv(final double x)" ], [ "value", "org.apache.commons.math3.special", "BesselJ", "public static double value(double order, double x) throws MathIllegalArgumentException, ConvergenceException" ], [ "rjBesl", "org.apache.commons.math3.special", "BesselJ", "public static BesselJResult rjBesl(double x, double alpha, int nb)" ], [ "logGamma", "org.apache.commons.math3.special", "Gamma", "public static double logGamma(double x)" ], [ "regularizedGammaP", "org.apache.commons.math3.special", "Gamma", "public static double regularizedGammaP(double a, double x)" ], [ "regularizedGammaP", "org.apache.commons.math3.special", "Gamma", "public static double regularizedGammaP(double a, double x, double epsilon, int maxIterations)" ], [ "regularizedGammaQ", "org.apache.commons.math3.special", "Gamma", "public static double regularizedGammaQ(double a, double x)" ], [ "regularizedGammaQ", "org.apache.commons.math3.special", "Gamma", "public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations)" ], [ "digamma", "org.apache.commons.math3.special", "Gamma", "public static double digamma(double x)" ], [ "trigamma", "org.apache.commons.math3.special", "Gamma", "public static double trigamma(double x)" ], [ "lanczos", "org.apache.commons.math3.special", "Gamma", "public static double lanczos(final double x)" ], [ "invGamma1pm1", "org.apache.commons.math3.special", "Gamma", "public static double invGamma1pm1(final double x)" ], [ "logGamma1p", "org.apache.commons.math3.special", "Gamma", "public static double logGamma1p(final double x) throws NumberIsTooSmallException, NumberIsTooLargeException" ], [ "gamma", "org.apache.commons.math3.special", "Gamma", "public static double gamma(final double x)" ], [ "regularizedBeta", "org.apache.commons.math3.special", "Beta", "public static double regularizedBeta(double x, double a, double b)" ], [ "regularizedBeta", "org.apache.commons.math3.special", "Beta", "public static double regularizedBeta(double x, double a, double b, double epsilon)" ], [ "regularizedBeta", "org.apache.commons.math3.special", "Beta", "public static double regularizedBeta(double x, double a, double b, int maxIterations)" ], [ "regularizedBeta", "org.apache.commons.math3.special", "Beta", "public static double regularizedBeta(double x, final double a, final double b, double epsilon, int maxIterations)" ], [ "logBeta", "org.apache.commons.math3.special", "Beta", "public static double logBeta(double a, double b, double epsilon, int maxIterations)" ], [ "logBeta", "org.apache.commons.math3.special", "Beta", "public static double logBeta(final double p, final double q)" ], [ "getInstance", "org.apache.commons.math3.ode.sampling", "DummyStepHandler", "public static DummyStepHandler getInstance()" ], [ "getInstance", "org.apache.commons.math3.ode.nonstiff", "AdamsNordsieckTransformer", "public static AdamsNordsieckTransformer getInstance(final int nSteps)" ], [ "taylor", "org.apache.commons.math3.ode.nonstiff", "AdamsFieldStepInterpolator", "public static <S extends RealFieldElement<S>> FieldODEStateAndDerivative<S> taylor(final FieldODEStateAndDerivative<S> reference, final S time, final S stepSize, final S[] scaled, final Array2DRowFieldMatrix<S> nordsieck)" ], [ "getInstance", "org.apache.commons.math3.ode.nonstiff", "AdamsNordsieckFieldTransformer", "public static <T extends RealFieldElement<T>> AdamsNordsieckFieldTransformer<T> getInstance(final Field<T> field, final int nSteps)" ], [ "sum", "org.apache.commons.math3.stat", "StatUtils", "public static double sum(final double[] values) throws MathIllegalArgumentException" ], [ "sum", "org.apache.commons.math3.stat", "StatUtils", "public static double sum(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "sumSq", "org.apache.commons.math3.stat", "StatUtils", "public static double sumSq(final double[] values) throws MathIllegalArgumentException" ], [ "sumSq", "org.apache.commons.math3.stat", "StatUtils", "public static double sumSq(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "product", "org.apache.commons.math3.stat", "StatUtils", "public static double product(final double[] values) throws MathIllegalArgumentException" ], [ "product", "org.apache.commons.math3.stat", "StatUtils", "public static double product(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "sumLog", "org.apache.commons.math3.stat", "StatUtils", "public static double sumLog(final double[] values) throws MathIllegalArgumentException" ], [ "sumLog", "org.apache.commons.math3.stat", "StatUtils", "public static double sumLog(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "mean", "org.apache.commons.math3.stat", "StatUtils", "public static double mean(final double[] values) throws MathIllegalArgumentException" ], [ "mean", "org.apache.commons.math3.stat", "StatUtils", "public static double mean(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "geometricMean", "org.apache.commons.math3.stat", "StatUtils", "public static double geometricMean(final double[] values) throws MathIllegalArgumentException" ], [ "geometricMean", "org.apache.commons.math3.stat", "StatUtils", "public static double geometricMean(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "variance", "org.apache.commons.math3.stat", "StatUtils", "public static double variance(final double[] values) throws MathIllegalArgumentException" ], [ "variance", "org.apache.commons.math3.stat", "StatUtils", "public static double variance(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "variance", "org.apache.commons.math3.stat", "StatUtils", "public static double variance(final double[] values, final double mean, final int begin, final int length) throws MathIllegalArgumentException" ], [ "variance", "org.apache.commons.math3.stat", "StatUtils", "public static double variance(final double[] values, final double mean) throws MathIllegalArgumentException" ], [ "populationVariance", "org.apache.commons.math3.stat", "StatUtils", "public static double populationVariance(final double[] values) throws MathIllegalArgumentException" ], [ "populationVariance", "org.apache.commons.math3.stat", "StatUtils", "public static double populationVariance(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "populationVariance", "org.apache.commons.math3.stat", "StatUtils", "public static double populationVariance(final double[] values, final double mean, final int begin, final int length) throws MathIllegalArgumentException" ], [ "populationVariance", "org.apache.commons.math3.stat", "StatUtils", "public static double populationVariance(final double[] values, final double mean) throws MathIllegalArgumentException" ], [ "max", "org.apache.commons.math3.stat", "StatUtils", "public static double max(final double[] values) throws MathIllegalArgumentException" ], [ "max", "org.apache.commons.math3.stat", "StatUtils", "public static double max(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "min", "org.apache.commons.math3.stat", "StatUtils", "public static double min(final double[] values) throws MathIllegalArgumentException" ], [ "min", "org.apache.commons.math3.stat", "StatUtils", "public static double min(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "percentile", "org.apache.commons.math3.stat", "StatUtils", "public static double percentile(final double[] values, final double p) throws MathIllegalArgumentException" ], [ "percentile", "org.apache.commons.math3.stat", "StatUtils", "public static double percentile(final double[] values, final int begin, final int length, final double p) throws MathIllegalArgumentException" ], [ "sumDifference", "org.apache.commons.math3.stat", "StatUtils", "public static double sumDifference(final double[] sample1, final double[] sample2) throws DimensionMismatchException, NoDataException" ], [ "meanDifference", "org.apache.commons.math3.stat", "StatUtils", "public static double meanDifference(final double[] sample1, final double[] sample2) throws DimensionMismatchException, NoDataException" ], [ "varianceDifference", "org.apache.commons.math3.stat", "StatUtils", "public static double varianceDifference(final double[] sample1, final double[] sample2, double meanDifference) throws DimensionMismatchException, NumberIsTooSmallException" ], [ "normalize", "org.apache.commons.math3.stat", "StatUtils", "public static double[] normalize(final double[] sample)" ], [ "mode", "org.apache.commons.math3.stat", "StatUtils", "public static double[] mode(double[] sample) throws MathIllegalArgumentException" ], [ "mode", "org.apache.commons.math3.stat", "StatUtils", "public static double[] mode(double[] sample, final int begin, final int length)" ], [ "getAgrestiCoullInterval", "org.apache.commons.math3.stat.interval", "IntervalUtils", "public static ConfidenceInterval getAgrestiCoullInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)" ], [ "getClopperPearsonInterval", "org.apache.commons.math3.stat.interval", "IntervalUtils", "public static ConfidenceInterval getClopperPearsonInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)" ], [ "getNormalApproximationInterval", "org.apache.commons.math3.stat.interval", "IntervalUtils", "public static ConfidenceInterval getNormalApproximationInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)" ], [ "getWilsonScoreInterval", "org.apache.commons.math3.stat.interval", "IntervalUtils", "public static ConfidenceInterval getWilsonScoreInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)" ], [ "homoscedasticT", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double homoscedasticT(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException" ], [ "homoscedasticT", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double homoscedasticT(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException" ], [ "homoscedasticTTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean homoscedasticTTest(final double[] sample1, final double[] sample2, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException" ], [ "homoscedasticTTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double homoscedasticTTest(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException" ], [ "homoscedasticTTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double homoscedasticTTest(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException" ], [ "pairedT", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double pairedT(final double[] sample1, final double[] sample2) throws NullArgumentException, NoDataException, DimensionMismatchException, NumberIsTooSmallException" ], [ "pairedTTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean pairedTTest(final double[] sample1, final double[] sample2, final double alpha) throws NullArgumentException, NoDataException, DimensionMismatchException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException" ], [ "pairedTTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double pairedTTest(final double[] sample1, final double[] sample2) throws NullArgumentException, NoDataException, DimensionMismatchException, NumberIsTooSmallException, MaxCountExceededException" ], [ "t", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double t(final double mu, final double[] observed) throws NullArgumentException, NumberIsTooSmallException" ], [ "t", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double t(final double mu, final StatisticalSummary sampleStats) throws NullArgumentException, NumberIsTooSmallException" ], [ "t", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double t(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException" ], [ "t", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double t(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean tTest(final double mu, final double[] sample, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double tTest(final double mu, final double[] sample) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean tTest(final double mu, final StatisticalSummary sampleStats, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double tTest(final double mu, final StatisticalSummary sampleStats) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean tTest(final double[] sample1, final double[] sample2, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double tTest(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean tTest(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double tTest(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException" ], [ "chiSquare", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double chiSquare(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException" ], [ "chiSquare", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double chiSquare(final long[][] counts) throws NullArgumentException, NotPositiveException, DimensionMismatchException" ], [ "chiSquareTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean chiSquareTest(final double[] expected, final long[] observed, final double alpha) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, OutOfRangeException, MaxCountExceededException" ], [ "chiSquareTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double chiSquareTest(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, MaxCountExceededException" ], [ "chiSquareTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean chiSquareTest(final long[][] counts, final double alpha) throws NullArgumentException, DimensionMismatchException, NotPositiveException, OutOfRangeException, MaxCountExceededException" ], [ "chiSquareTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double chiSquareTest(final long[][] counts) throws NullArgumentException, DimensionMismatchException, NotPositiveException, MaxCountExceededException" ], [ "chiSquareDataSetsComparison", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double chiSquareDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException" ], [ "chiSquareTestDataSetsComparison", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double chiSquareTestDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException, MaxCountExceededException" ], [ "chiSquareTestDataSetsComparison", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean chiSquareTestDataSetsComparison(final long[] observed1, final long[] observed2, final double alpha) throws DimensionMismatchException, NotPositiveException, ZeroException, OutOfRangeException, MaxCountExceededException" ], [ "oneWayAnovaFValue", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double oneWayAnovaFValue(final Collection<double[]> categoryData) throws NullArgumentException, DimensionMismatchException" ], [ "oneWayAnovaPValue", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double oneWayAnovaPValue(final Collection<double[]> categoryData) throws NullArgumentException, DimensionMismatchException, ConvergenceException, MaxCountExceededException" ], [ "oneWayAnovaTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean oneWayAnovaTest(final Collection<double[]> categoryData, final double alpha) throws NullArgumentException, DimensionMismatchException, OutOfRangeException, ConvergenceException, MaxCountExceededException" ], [ "g", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double g(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException" ], [ "gTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double gTest(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, MaxCountExceededException" ], [ "gTestIntrinsic", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double gTestIntrinsic(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, MaxCountExceededException" ], [ "gTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean gTest(final double[] expected, final long[] observed, final double alpha) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, OutOfRangeException, MaxCountExceededException" ], [ "gDataSetsComparison", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double gDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException" ], [ "rootLogLikelihoodRatio", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double rootLogLikelihoodRatio(final long k11, final long k12, final long k21, final long k22) throws DimensionMismatchException, NotPositiveException, ZeroException" ], [ "gTestDataSetsComparison", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double gTestDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException, MaxCountExceededException" ], [ "gTestDataSetsComparison", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean gTestDataSetsComparison(final long[] observed1, final long[] observed2, final double alpha) throws DimensionMismatchException, NotPositiveException, ZeroException, OutOfRangeException, MaxCountExceededException" ], [ "kolmogorovSmirnovStatistic", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double kolmogorovSmirnovStatistic(RealDistribution dist, double[] data) throws InsufficientDataException, NullArgumentException" ], [ "kolmogorovSmirnovTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double kolmogorovSmirnovTest(RealDistribution dist, double[] data) throws InsufficientDataException, NullArgumentException" ], [ "kolmogorovSmirnovTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double kolmogorovSmirnovTest(RealDistribution dist, double[] data, boolean strict) throws InsufficientDataException, NullArgumentException" ], [ "kolmogorovSmirnovTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean kolmogorovSmirnovTest(RealDistribution dist, double[] data, double alpha) throws InsufficientDataException, NullArgumentException" ], [ "kolmogorovSmirnovStatistic", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double kolmogorovSmirnovStatistic(double[] x, double[] y) throws InsufficientDataException, NullArgumentException" ], [ "kolmogorovSmirnovTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double kolmogorovSmirnovTest(double[] x, double[] y) throws InsufficientDataException, NullArgumentException" ], [ "kolmogorovSmirnovTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double kolmogorovSmirnovTest(double[] x, double[] y, boolean strict) throws InsufficientDataException, NullArgumentException" ], [ "exactP", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double exactP(double d, int m, int n, boolean strict)" ], [ "approximateP", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double approximateP(double d, int n, int m)" ], [ "monteCarloP", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double monteCarloP(double d, int n, int m, boolean strict, int iterations)" ], [ "aggregate", "org.apache.commons.math3.stat.descriptive", "AggregateSummaryStatistics", "public static StatisticalSummaryValues aggregate(Collection<? extends StatisticalSummary> statistics)" ], [ "newMarkers", "org.apache.commons.math3.stat.descriptive.rank", "PSquarePercentile", "public static PSquareMarkers newMarkers(final List<Double> initialFive, final double p)" ], [ "exponentialDecay", "org.apache.commons.math3.ml.neuralnet.sofm", "NeighbourhoodSizeFunctionFactory", "public static NeighbourhoodSizeFunction exponentialDecay(final double initValue, final double valueAtNumCall, final long numCall)" ], [ "quasiSigmoidDecay", "org.apache.commons.math3.ml.neuralnet.sofm", "NeighbourhoodSizeFunctionFactory", "public static NeighbourhoodSizeFunction quasiSigmoidDecay(final double initValue, final double slope, final long numCall)" ], [ "exponentialDecay", "org.apache.commons.math3.ml.neuralnet.sofm", "LearningFactorFunctionFactory", "public static LearningFactorFunction exponentialDecay(final double initValue, final double valueAtNumCall, final long numCall)" ], [ "quasiSigmoidDecay", "org.apache.commons.math3.ml.neuralnet.sofm", "LearningFactorFunctionFactory", "public static LearningFactorFunction quasiSigmoidDecay(final double initValue, final double slope, final long numCall)" ], [ "findBest", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static Neuron findBest(double[] features, Iterable<Neuron> neurons, DistanceMeasure distance)" ], [ "findBestAndSecondBest", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static Pair<Neuron, Neuron> findBestAndSecondBest(double[] features, Iterable<Neuron> neurons, DistanceMeasure distance)" ], [ "sort", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static Neuron[] sort(double[] features, Iterable<Neuron> neurons, DistanceMeasure distance)" ], [ "computeU", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static double[][] computeU(NeuronSquareMesh2D map, DistanceMeasure distance)" ], [ "computeHitHistogram", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static int[][] computeHitHistogram(Iterable<double[]> data, NeuronSquareMesh2D map, DistanceMeasure distance)" ], [ "computeQuantizationError", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static double computeQuantizationError(Iterable<double[]> data, Iterable<Neuron> neurons, DistanceMeasure distance)" ], [ "computeTopographicError", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static double computeTopographicError(Iterable<double[]> data, Network net, DistanceMeasure distance)" ], [ "uniform", "org.apache.commons.math3.ml.neuralnet", "FeatureInitializerFactory", "public static FeatureInitializer uniform(final RandomGenerator rng, final double min, final double max)" ], [ "uniform", "org.apache.commons.math3.ml.neuralnet", "FeatureInitializerFactory", "public static FeatureInitializer uniform(final double min, final double max)" ], [ "function", "org.apache.commons.math3.ml.neuralnet", "FeatureInitializerFactory", "public static FeatureInitializer function(final UnivariateFunction f, final double init, final double inc)" ], [ "randomize", "org.apache.commons.math3.ml.neuralnet", "FeatureInitializerFactory", "public static FeatureInitializer randomize(final RealDistribution random, final FeatureInitializer orig)" ], [ "split", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp[] split(final DfpField field, final String a)" ], [ "split", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp[] split(final Dfp a)" ], [ "splitMult", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp[] splitMult(final Dfp[] a, final Dfp[] b)" ], [ "splitDiv", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp[] splitDiv(final Dfp[] a, final Dfp[] b)" ], [ "splitPow", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp splitPow(final Dfp[] base, int a)" ], [ "pow", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp pow(Dfp base, int a)" ], [ "exp", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp exp(final Dfp a)" ], [ "expInternal", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp expInternal(final Dfp a)" ], [ "log", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp log(Dfp a)" ], [ "logInternal", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp[] logInternal(final Dfp[] a)" ], [ "pow", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp pow(Dfp x, final Dfp y)" ], [ "sinInternal", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp sinInternal(Dfp[] a)" ], [ "cosInternal", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp cosInternal(Dfp[] a)" ], [ "sin", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp sin(final Dfp a)" ], [ "cos", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp cos(Dfp a)" ], [ "tan", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp tan(final Dfp a)" ], [ "atanInternal", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp atanInternal(final Dfp a)" ], [ "atan", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp atan(final Dfp a)" ], [ "asin", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp asin(final Dfp a)" ], [ "acos", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp acos(Dfp a)" ], [ "copysign", "org.apache.commons.math3.dfp", "Dfp", "public static Dfp copysign(final Dfp x, final Dfp y)" ], [ "computeExp", "org.apache.commons.math3.dfp", "DfpField", "public static Dfp computeExp(final Dfp a, final Dfp one)" ], [ "computeLn", "org.apache.commons.math3.dfp", "DfpField", "public static Dfp computeLn(final Dfp a, final Dfp one, final Dfp two)" ], [ "getRandomGenerator", "org.apache.commons.math3.genetics", "GeneticAlgorithm", "public static synchronized RandomGenerator getRandomGenerator()" ], [ "randomPermutation", "org.apache.commons.math3.genetics", "RandomKey", "public static final List<Double> randomPermutation(final int l)" ], [ "identityPermutation", "org.apache.commons.math3.genetics", "RandomKey", "public static final List<Double> identityPermutation(final int l)" ], [ "comparatorPermutation", "org.apache.commons.math3.genetics", "RandomKey", "public static <S> List<Double> comparatorPermutation(final List<S> data, final Comparator<S> comparator)" ], [ "inducedPermutation", "org.apache.commons.math3.genetics", "RandomKey", "public static <S> List<Double> inducedPermutation(final List<S> originalData, final List<S> permutedData) throws DimensionMismatchException, MathIllegalArgumentException" ], [ "randomBinaryRepresentation", "org.apache.commons.math3.genetics", "BinaryChromosome", "public static List<Integer> randomBinaryRepresentation(int length)" ], [ "getAvailableLocales", "org.apache.commons.math3.geometry", "VectorFormat", "public static Locale[] getAvailableLocales()" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3DFormat", "public static Vector3DFormat getInstance()" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3DFormat", "public static Vector3DFormat getInstance(final Locale locale)" ], [ "angle", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T angle(final FieldVector3D<T> v1, final FieldVector3D<T> v2) throws MathArithmeticException" ], [ "angle", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T angle(final FieldVector3D<T> v1, final Vector3D v2) throws MathArithmeticException" ], [ "angle", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T angle(final Vector3D v1, final FieldVector3D<T> v2) throws MathArithmeticException" ], [ "dotProduct", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T dotProduct(final FieldVector3D<T> v1, final FieldVector3D<T> v2)" ], [ "dotProduct", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T dotProduct(final FieldVector3D<T> v1, final Vector3D v2)" ], [ "dotProduct", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T dotProduct(final Vector3D v1, final FieldVector3D<T> v2)" ], [ "crossProduct", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> FieldVector3D<T> crossProduct(final FieldVector3D<T> v1, final FieldVector3D<T> v2)" ], [ "crossProduct", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> FieldVector3D<T> crossProduct(final FieldVector3D<T> v1, final Vector3D v2)" ], [ "crossProduct", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> FieldVector3D<T> crossProduct(final Vector3D v1, final FieldVector3D<T> v2)" ], [ "distance1", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distance1(final FieldVector3D<T> v1, final FieldVector3D<T> v2)" ], [ "distance1", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distance1(final FieldVector3D<T> v1, final Vector3D v2)" ], [ "distance1", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distance1(final Vector3D v1, final FieldVector3D<T> v2)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distance(final FieldVector3D<T> v1, final FieldVector3D<T> v2)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distance(final FieldVector3D<T> v1, final Vector3D v2)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distance(final Vector3D v1, final FieldVector3D<T> v2)" ], [ "distanceInf", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distanceInf(final FieldVector3D<T> v1, final FieldVector3D<T> v2)" ], [ "distanceInf", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distanceInf(final FieldVector3D<T> v1, final Vector3D v2)" ], [ "distanceInf", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distanceInf(final Vector3D v1, final FieldVector3D<T> v2)" ], [ "distanceSq", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distanceSq(final FieldVector3D<T> v1, final FieldVector3D<T> v2)" ], [ "distanceSq", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distanceSq(final FieldVector3D<T> v1, final Vector3D v2)" ], [ "distanceSq", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distanceSq(final Vector3D v1, final FieldVector3D<T> v2)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.threed", "Rotation", "public static double distance(Rotation r1, Rotation r2)" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.threed", "Euclidean3D", "public static Euclidean3D getInstance()" ], [ "applyTo", "org.apache.commons.math3.geometry.euclidean.threed", "FieldRotation", "public static <T extends RealFieldElement<T>> FieldVector3D<T> applyTo(final Rotation r, final FieldVector3D<T> u)" ], [ "applyInverseTo", "org.apache.commons.math3.geometry.euclidean.threed", "FieldRotation", "public static <T extends RealFieldElement<T>> FieldVector3D<T> applyInverseTo(final Rotation r, final FieldVector3D<T> u)" ], [ "applyTo", "org.apache.commons.math3.geometry.euclidean.threed", "FieldRotation", "public static <T extends RealFieldElement<T>> FieldRotation<T> applyTo(final Rotation r1, final FieldRotation<T> rInner)" ], [ "applyInverseTo", "org.apache.commons.math3.geometry.euclidean.threed", "FieldRotation", "public static <T extends RealFieldElement<T>> FieldRotation<T> applyInverseTo(final Rotation rOuter, final FieldRotation<T> rInner)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.threed", "FieldRotation", "public static <T extends RealFieldElement<T>> T distance(final FieldRotation<T> r1, final FieldRotation<T> r2)" ], [ "angle", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static double angle(Vector3D v1, Vector3D v2) throws MathArithmeticException" ], [ "dotProduct", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static double dotProduct(Vector3D v1, Vector3D v2)" ], [ "crossProduct", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2)" ], [ "distance1", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static double distance1(Vector3D v1, Vector3D v2)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static double distance(Vector3D v1, Vector3D v2)" ], [ "distanceInf", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static double distanceInf(Vector3D v1, Vector3D v2)" ], [ "distanceSq", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static double distanceSq(Vector3D v1, Vector3D v2)" ], [ "intersection", "org.apache.commons.math3.geometry.euclidean.threed", "Plane", "public static Vector3D intersection(final Plane plane1, final Plane plane2, final Plane plane3)" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.oned", "Euclidean1D", "public static Euclidean1D getInstance()" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1DFormat", "public static Vector1DFormat getInstance()" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1DFormat", "public static Vector1DFormat getInstance(final Locale locale)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static double distance(Vector1D p1, Vector1D p2)" ], [ "distanceInf", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static double distanceInf(Vector1D p1, Vector1D p2)" ], [ "distanceSq", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static double distanceSq(Vector1D p1, Vector1D p2)" ], [ "reducePoints", "org.apache.commons.math3.geometry.euclidean.twod.hull", "AklToussaintHeuristic", "public static Collection<Vector2D> reducePoints(final Collection<Vector2D> points)" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2DFormat", "public static Vector2DFormat getInstance()" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2DFormat", "public static Vector2DFormat getInstance(final Locale locale)" ], [ "angle", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static double angle(Vector2D v1, Vector2D v2) throws MathArithmeticException" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static double distance(Vector2D p1, Vector2D p2)" ], [ "distanceInf", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static double distanceInf(Vector2D p1, Vector2D p2)" ], [ "distanceSq", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static double distanceSq(Vector2D p1, Vector2D p2)" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.twod", "Euclidean2D", "public static Euclidean2D getInstance()" ], [ "getTransform", "org.apache.commons.math3.geometry.euclidean.twod", "Line", "public static Transform<Euclidean2D, Euclidean1D> getTransform(final AffineTransform transform) throws MathIllegalArgumentException" ], [ "getTransform", "org.apache.commons.math3.geometry.euclidean.twod", "Line", "public static Transform<Euclidean2D, Euclidean1D> getTransform(final double cXX, final double cYX, final double cXY, final double cYY, final double cX1, final double cY1) throws MathIllegalArgumentException" ], [ "distance", "org.apache.commons.math3.geometry.spherical.oned", "S1Point", "public static double distance(S1Point p1, S1Point p2)" ], [ "getInstance", "org.apache.commons.math3.geometry.spherical.oned", "Sphere1D", "public static Sphere1D getInstance()" ], [ "getInstance", "org.apache.commons.math3.geometry.spherical.twod", "Sphere2D", "public static Sphere2D getInstance()" ], [ "getTransform", "org.apache.commons.math3.geometry.spherical.twod", "Circle", "public static Transform<Sphere2D, Sphere1D> getTransform(final Rotation rotation)" ], [ "distance", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static double distance(S2Point p1, S2Point p2)" ], [ "createAdaptor", "org.apache.commons.math3.random", "RandomAdaptor", "public static Random createAdaptor(RandomGenerator randomGenerator)" ], [ "createRandomGenerator", "org.apache.commons.math3.random", "RandomGeneratorFactory", "public static RandomGenerator createRandomGenerator(final Random rng)" ], [ "convertToLong", "org.apache.commons.math3.random", "RandomGeneratorFactory", "public static long convertToLong(int[] seed)" ], [ "getAvailableLocales", "org.apache.commons.math3.fraction", "BigFractionFormat", "public static Locale[] getAvailableLocales()" ], [ "formatBigFraction", "org.apache.commons.math3.fraction", "BigFractionFormat", "public static String formatBigFraction(final BigFraction f)" ], [ "getImproperInstance", "org.apache.commons.math3.fraction", "BigFractionFormat", "public static BigFractionFormat getImproperInstance()" ], [ "getImproperInstance", "org.apache.commons.math3.fraction", "BigFractionFormat", "public static BigFractionFormat getImproperInstance(final Locale locale)" ], [ "getProperInstance", "org.apache.commons.math3.fraction", "BigFractionFormat", "public static BigFractionFormat getProperInstance()" ], [ "getProperInstance", "org.apache.commons.math3.fraction", "BigFractionFormat", "public static BigFractionFormat getProperInstance(final Locale locale)" ], [ "getReducedFraction", "org.apache.commons.math3.fraction", "Fraction", "public static Fraction getReducedFraction(int numerator, int denominator)" ], [ "getReducedFraction", "org.apache.commons.math3.fraction", "BigFraction", "public static BigFraction getReducedFraction(final int numerator, final int denominator)" ], [ "getDefaultNumberFormat", "org.apache.commons.math3.fraction", "AbstractFormat", "protected static NumberFormat getDefaultNumberFormat()" ], [ "getDefaultNumberFormat", "org.apache.commons.math3.fraction", "AbstractFormat", "protected static NumberFormat getDefaultNumberFormat(final Locale locale)" ], [ "parseNextCharacter", "org.apache.commons.math3.fraction", "AbstractFormat", "protected static char parseNextCharacter(final String source, final ParsePosition pos)" ], [ "getAvailableLocales", "org.apache.commons.math3.fraction", "FractionFormat", "public static Locale[] getAvailableLocales()" ], [ "formatFraction", "org.apache.commons.math3.fraction", "FractionFormat", "public static String formatFraction(Fraction f)" ], [ "getImproperInstance", "org.apache.commons.math3.fraction", "FractionFormat", "public static FractionFormat getImproperInstance()" ], [ "getImproperInstance", "org.apache.commons.math3.fraction", "FractionFormat", "public static FractionFormat getImproperInstance(final Locale locale)" ], [ "getProperInstance", "org.apache.commons.math3.fraction", "FractionFormat", "public static FractionFormat getProperInstance()" ], [ "getProperInstance", "org.apache.commons.math3.fraction", "FractionFormat", "public static FractionFormat getProperInstance(final Locale locale)" ], [ "getDefaultNumberFormat", "org.apache.commons.math3.fraction", "FractionFormat", "protected static NumberFormat getDefaultNumberFormat()" ], [ "getInstance", "org.apache.commons.math3.fraction", "FractionField", "public static FractionField getInstance()" ], [ "getInstance", "org.apache.commons.math3.fraction", "BigFractionField", "public static BigFractionField getInstance()" ], [ "flatten", "org.apache.commons.math3.exception.util", "ArgUtils", "public static Object[] flatten(Object[] array)" ], [ "scaleArray", "org.apache.commons.math3.transform", "TransformUtils", "public static double[] scaleArray(double[] f, double d)" ], [ "scaleArray", "org.apache.commons.math3.transform", "TransformUtils", "public static Complex[] scaleArray(Complex[] f, double d)" ], [ "createRealImaginaryArray", "org.apache.commons.math3.transform", "TransformUtils", "public static double[][] createRealImaginaryArray(final Complex[] dataC)" ], [ "createComplexArray", "org.apache.commons.math3.transform", "TransformUtils", "public static Complex[] createComplexArray(final double[][] dataRI) throws DimensionMismatchException" ], [ "exactLog2", "org.apache.commons.math3.transform", "TransformUtils", "public static int exactLog2(final int n) throws MathIllegalArgumentException" ] ],
  "tokensProjectClassesNonPrivateStaticAttributes" : [ [ "PRIMES", "org.apache.commons.math3.primes", "SmallPrimes", "public static final int[] PRIMES = { 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171, 1181, 1187, 1193, 1201, 1213, 1217, 1223, 1229, 1231, 1237, 1249, 1259, 1277, 1279, 1283, 1289, 1291, 1297, 1301, 1303, 1307, 1319, 1321, 1327, 1361, 1367, 1373, 1381, 1399, 1409, 1423, 1427, 1429, 1433, 1439, 1447, 1451, 1453, 1459, 1471, 1481, 1483, 1487, 1489, 1493, 1499, 1511, 1523, 1531, 1543, 1549, 1553, 1559, 1567, 1571, 1579, 1583, 1597, 1601, 1607, 1609, 1613, 1619, 1621, 1627, 1637, 1657, 1663, 1667, 1669, 1693, 1697, 1699, 1709, 1721, 1723, 1733, 1741, 1747, 1753, 1759, 1777, 1783, 1787, 1789, 1801, 1811, 1823, 1831, 1847, 1861, 1867, 1871, 1873, 1877, 1879, 1889, 1901, 1907, 1913, 1931, 1933, 1949, 1951, 1973, 1979, 1987, 1993, 1997, 1999, 2003, 2011, 2017, 2027, 2029, 2039, 2053, 2063, 2069, 2081, 2083, 2087, 2089, 2099, 2111, 2113, 2129, 2131, 2137, 2141, 2143, 2153, 2161, 2179, 2203, 2207, 2213, 2221, 2237, 2239, 2243, 2251, 2267, 2269, 2273, 2281, 2287, 2293, 2297, 2309, 2311, 2333, 2339, 2341, 2347, 2351, 2357, 2371, 2377, 2381, 2383, 2389, 2393, 2399, 2411, 2417, 2423, 2437, 2441, 2447, 2459, 2467, 2473, 2477, 2503, 2521, 2531, 2539, 2543, 2549, 2551, 2557, 2579, 2591, 2593, 2609, 2617, 2621, 2633, 2647, 2657, 2659, 2663, 2671, 2677, 2683, 2687, 2689, 2693, 2699, 2707, 2711, 2713, 2719, 2729, 2731, 2741, 2749, 2753, 2767, 2777, 2789, 2791, 2797, 2801, 2803, 2819, 2833, 2837, 2843, 2851, 2857, 2861, 2879, 2887, 2897, 2903, 2909, 2917, 2927, 2939, 2953, 2957, 2963, 2969, 2971, 2999, 3001, 3011, 3019, 3023, 3037, 3041, 3049, 3061, 3067, 3079, 3083, 3089, 3109, 3119, 3121, 3137, 3163, 3167, 3169, 3181, 3187, 3191, 3203, 3209, 3217, 3221, 3229, 3251, 3253, 3257, 3259, 3271, 3299, 3301, 3307, 3313, 3319, 3323, 3329, 3331, 3343, 3347, 3359, 3361, 3371, 3373, 3389, 3391, 3407, 3413, 3433, 3449, 3457, 3461, 3463, 3467, 3469, 3491, 3499, 3511, 3517, 3527, 3529, 3533, 3539, 3541, 3547, 3557, 3559, 3571, 3581, 3583, 3593, 3607, 3613, 3617, 3623, 3631, 3637, 3643, 3659, 3671 };" ], [ "PRIMES_LAST", "org.apache.commons.math3.primes", "SmallPrimes", "public static final int PRIMES_LAST = PRIMES[PRIMES.length - 1];" ], [ "MIDPOINT_MAX_ITERATIONS_COUNT", "org.apache.commons.math3.analysis.integration", "MidPointIntegrator", "public static final int MIDPOINT_MAX_ITERATIONS_COUNT = 64;" ], [ "ROMBERG_MAX_ITERATIONS_COUNT", "org.apache.commons.math3.analysis.integration", "RombergIntegrator", "public static final int ROMBERG_MAX_ITERATIONS_COUNT = 32;" ], [ "SIMPSON_MAX_ITERATIONS_COUNT", "org.apache.commons.math3.analysis.integration", "SimpsonIntegrator", "public static final int SIMPSON_MAX_ITERATIONS_COUNT = 64;" ], [ "DEFAULT_ABSOLUTE_ACCURACY", "org.apache.commons.math3.analysis.integration", "BaseAbstractUnivariateIntegrator", "public static final double DEFAULT_ABSOLUTE_ACCURACY = 1.0e-15;" ], [ "DEFAULT_RELATIVE_ACCURACY", "org.apache.commons.math3.analysis.integration", "BaseAbstractUnivariateIntegrator", "public static final double DEFAULT_RELATIVE_ACCURACY = 1.0e-6;" ], [ "DEFAULT_MIN_ITERATIONS_COUNT", "org.apache.commons.math3.analysis.integration", "BaseAbstractUnivariateIntegrator", "public static final int DEFAULT_MIN_ITERATIONS_COUNT = 3;" ], [ "DEFAULT_MAX_ITERATIONS_COUNT", "org.apache.commons.math3.analysis.integration", "BaseAbstractUnivariateIntegrator", "public static final int DEFAULT_MAX_ITERATIONS_COUNT = Integer.MAX_VALUE;" ], [ "TRAPEZOID_MAX_ITERATIONS_COUNT", "org.apache.commons.math3.analysis.integration", "TrapezoidIntegrator", "public static final int TRAPEZOID_MAX_ITERATIONS_COUNT = 64;" ], [ "DEFAULT_ABSOLUTE_ACCURACY", "org.apache.commons.math3.analysis.solvers", "BaseSecantSolver", "protected static final double DEFAULT_ABSOLUTE_ACCURACY = 1e-6;" ], [ "DEFAULT_ABSOLUTE_ACCURACY", "org.apache.commons.math3.analysis.solvers", "SecantSolver", "protected static final double DEFAULT_ABSOLUTE_ACCURACY = 1e-6;" ], [ "DEFAULT_BANDWIDTH", "org.apache.commons.math3.analysis.interpolation", "LoessInterpolator", "public static final double DEFAULT_BANDWIDTH = 0.3;" ], [ "DEFAULT_ROBUSTNESS_ITERS", "org.apache.commons.math3.analysis.interpolation", "LoessInterpolator", "public static final int DEFAULT_ROBUSTNESS_ITERS = 2;" ], [ "DEFAULT_ACCURACY", "org.apache.commons.math3.analysis.interpolation", "LoessInterpolator", "public static final double DEFAULT_ACCURACY = 1e-12;" ], [ "serialVersionUID", "org.apache.commons.math3.analysis.interpolation", "NevilleInterpolator", "static final long serialVersionUID = 3003707660147873733L;" ], [ "DEFAULT_EXTEND", "org.apache.commons.math3.analysis.interpolation", "UnivariatePeriodicInterpolator", "public static final int DEFAULT_EXTEND = 5;" ], [ "DEFAULT_MICROSPHERE_ELEMENTS", "org.apache.commons.math3.analysis.interpolation", "MicrosphereInterpolator", "public static final int DEFAULT_MICROSPHERE_ELEMENTS = 2000;" ], [ "DEFAULT_BRIGHTNESS_EXPONENT", "org.apache.commons.math3.analysis.interpolation", "MicrosphereInterpolator", "public static final int DEFAULT_BRIGHTNESS_EXPONENT = 2;" ], [ "EPSILON", "org.apache.commons.math3.util", "Precision", "public static final double EPSILON;" ], [ "SAFE_MIN", "org.apache.commons.math3.util", "Precision", "public static final double SAFE_MIN;" ], [ "FREE", "org.apache.commons.math3.util", "OpenIntToDoubleHashMap", "protected static final byte FREE = 0;" ], [ "FULL", "org.apache.commons.math3.util", "OpenIntToDoubleHashMap", "protected static final byte FULL = 1;" ], [ "REMOVED", "org.apache.commons.math3.util", "OpenIntToDoubleHashMap", "protected static final byte REMOVED = 2;" ], [ "FREE", "org.apache.commons.math3.util", "OpenIntToFieldHashMap", "protected static final byte FREE = 0;" ], [ "FULL", "org.apache.commons.math3.util", "OpenIntToFieldHashMap", "protected static final byte FULL = 1;" ], [ "REMOVED", "org.apache.commons.math3.util", "OpenIntToFieldHashMap", "protected static final byte REMOVED = 2;" ], [ "PI", "org.apache.commons.math3.util", "FastMath", "public static final double PI = 105414357.0 / 33554432.0 + 1.984187159361080883e-9;" ], [ "E", "org.apache.commons.math3.util", "FastMath", "public static final double E = 2850325.0 / 1048576.0 + 8.254840070411028747e-8;" ], [ "EXP_INT_TABLE_MAX_INDEX", "org.apache.commons.math3.util", "FastMath", "static final int EXP_INT_TABLE_MAX_INDEX = 750;" ], [ "EXP_INT_TABLE_LEN", "org.apache.commons.math3.util", "FastMath", "static final int EXP_INT_TABLE_LEN = EXP_INT_TABLE_MAX_INDEX * 2;" ], [ "LN_MANT_LEN", "org.apache.commons.math3.util", "FastMath", "static final int LN_MANT_LEN = 1024;" ], [ "EXP_FRAC_TABLE_LEN", "org.apache.commons.math3.util", "FastMath", "static final int EXP_FRAC_TABLE_LEN = 1025;" ], [ "NAN", "org.apache.commons.math3.util", "FastMath", "public static final Split NAN = new Split(Double.NaN, 0);" ], [ "POSITIVE_INFINITY", "org.apache.commons.math3.util", "FastMath", "public static final Split POSITIVE_INFINITY = new Split(Double.POSITIVE_INFINITY, 0);" ], [ "NEGATIVE_INFINITY", "org.apache.commons.math3.util", "FastMath", "public static final Split NEGATIVE_INFINITY = new Split(Double.NEGATIVE_INFINITY, 0);" ], [ "NAN", "org.apache.commons.math3.util", "Split", "public static final Split NAN = new Split(Double.NaN, 0);" ], [ "POSITIVE_INFINITY", "org.apache.commons.math3.util", "Split", "public static final Split POSITIVE_INFINITY = new Split(Double.POSITIVE_INFINITY, 0);" ], [ "NEGATIVE_INFINITY", "org.apache.commons.math3.util", "Split", "public static final Split NEGATIVE_INFINITY = new Split(Double.NEGATIVE_INFINITY, 0);" ], [ "ADDITIVE_MODE", "org.apache.commons.math3.util", "ResizableDoubleArray", "public static final int ADDITIVE_MODE = 1;" ], [ "MULTIPLICATIVE_MODE", "org.apache.commons.math3.util", "ResizableDoubleArray", "public static final int MULTIPLICATIVE_MODE = 0;" ], [ "TWO_PI", "org.apache.commons.math3.util", "MathUtils", "public static final double TWO_PI = 2 * FastMath.PI;" ], [ "PI_SQUARED", "org.apache.commons.math3.util", "MathUtils", "public static final double PI_SQUARED = FastMath.PI * FastMath.PI;" ], [ "FACTORIALS", "org.apache.commons.math3.util", "CombinatoricsUtils", "static final long[] FACTORIALS = new long[] { 1l, 1l, 2l, 6l, 24l, 120l, 720l, 5040l, 40320l, 362880l, 3628800l, 39916800l, 479001600l, 6227020800l, 87178291200l, 1307674368000l, 20922789888000l, 355687428096000l, 6402373705728000l, 121645100408832000l, 2432902008176640000l };" ], [ "STIRLING_S2", "org.apache.commons.math3.util", "CombinatoricsUtils", "static final AtomicReference<long[][]> STIRLING_S2 = new AtomicReference<long[][]>(null);" ], [ "ZERO", "org.apache.commons.math3.util", "Decimal64", "public static final Decimal64 ZERO;" ], [ "ONE", "org.apache.commons.math3.util", "Decimal64", "public static final Decimal64 ONE;" ], [ "NEGATIVE_INFINITY", "org.apache.commons.math3.util", "Decimal64", "public static final Decimal64 NEGATIVE_INFINITY;" ], [ "POSITIVE_INFINITY", "org.apache.commons.math3.util", "Decimal64", "public static final Decimal64 POSITIVE_INFINITY;" ], [ "NAN", "org.apache.commons.math3.util", "Decimal64", "public static final Decimal64 NAN;" ], [ "ZERO", "org.apache.commons.math3.util", "BigReal", "public static final BigReal ZERO = new BigReal(BigDecimal.ZERO);" ], [ "ONE", "org.apache.commons.math3.util", "BigReal", "public static final BigReal ONE = new BigReal(BigDecimal.ONE);" ], [ "IDENTITY", "org.apache.commons.math3.complex", "Quaternion", "public static final Quaternion IDENTITY = new Quaternion(1, 0, 0, 0);" ], [ "ZERO", "org.apache.commons.math3.complex", "Quaternion", "public static final Quaternion ZERO = new Quaternion(0, 0, 0, 0);" ], [ "I", "org.apache.commons.math3.complex", "Quaternion", "public static final Quaternion I = new Quaternion(0, 1, 0, 0);" ], [ "J", "org.apache.commons.math3.complex", "Quaternion", "public static final Quaternion J = new Quaternion(0, 0, 1, 0);" ], [ "K", "org.apache.commons.math3.complex", "Quaternion", "public static final Quaternion K = new Quaternion(0, 0, 0, 1);" ], [ "I", "org.apache.commons.math3.complex", "Complex", "public static final Complex I = new Complex(0.0, 1.0);" ], [ "NaN", "org.apache.commons.math3.complex", "Complex", "public static final Complex NaN = new Complex(Double.NaN, Double.NaN);" ], [ "INF", "org.apache.commons.math3.complex", "Complex", "public static final Complex INF = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);" ], [ "ONE", "org.apache.commons.math3.complex", "Complex", "public static final Complex ONE = new Complex(1.0, 0.0);" ], [ "ZERO", "org.apache.commons.math3.complex", "Complex", "public static final Complex ZERO = new Complex(0.0, 0.0);" ], [ "MINIMUM_PROBLEM_DIMENSION", "org.apache.commons.math3.optimization.direct", "BOBYQAOptimizer", "public static final int MINIMUM_PROBLEM_DIMENSION = 2;" ], [ "DEFAULT_INITIAL_RADIUS", "org.apache.commons.math3.optimization.direct", "BOBYQAOptimizer", "public static final double DEFAULT_INITIAL_RADIUS = 10.0;" ], [ "DEFAULT_STOPPING_RADIUS", "org.apache.commons.math3.optimization.direct", "BOBYQAOptimizer", "public static final double DEFAULT_STOPPING_RADIUS = 1E-8;" ], [ "DEFAULT_CHECKFEASABLECOUNT", "org.apache.commons.math3.optimization.direct", "CMAESOptimizer", "public static final int DEFAULT_CHECKFEASABLECOUNT = 0;" ], [ "DEFAULT_STOPFITNESS", "org.apache.commons.math3.optimization.direct", "CMAESOptimizer", "public static final double DEFAULT_STOPFITNESS = 0;" ], [ "DEFAULT_ISACTIVECMA", "org.apache.commons.math3.optimization.direct", "CMAESOptimizer", "public static final boolean DEFAULT_ISACTIVECMA = true;" ], [ "DEFAULT_MAXITERATIONS", "org.apache.commons.math3.optimization.direct", "CMAESOptimizer", "public static final int DEFAULT_MAXITERATIONS = 30000;" ], [ "DEFAULT_DIAGONALONLY", "org.apache.commons.math3.optimization.direct", "CMAESOptimizer", "public static final int DEFAULT_DIAGONALONLY = 0;" ], [ "DEFAULT_RANDOMGENERATOR", "org.apache.commons.math3.optimization.direct", "CMAESOptimizer", "public static final RandomGenerator DEFAULT_RANDOMGENERATOR = new MersenneTwister();" ], [ "DEFAULT_MAX_ITERATIONS", "org.apache.commons.math3.optimization.linear", "AbstractLinearOptimizer", "public static final int DEFAULT_MAX_ITERATIONS = 100;" ], [ "DEFAULT_FORMAT", "org.apache.commons.math3.linear", "MatrixUtils", "public static final RealMatrixFormat DEFAULT_FORMAT = RealMatrixFormat.getInstance();" ], [ "OCTAVE_FORMAT", "org.apache.commons.math3.linear", "MatrixUtils", "public static final RealMatrixFormat OCTAVE_FORMAT = new RealMatrixFormat(\"[\", \"]\", \"\", \"\", \"; \", \", \");" ], [ "DEFAULT_ZERO_TOLERANCE", "org.apache.commons.math3.linear", "OpenMapRealVector", "public static final double DEFAULT_ZERO_TOLERANCE = 1.0e-12;" ], [ "BLOCK_SIZE", "org.apache.commons.math3.linear", "BlockFieldMatrix", "public static final int BLOCK_SIZE = 36;" ], [ "OPERATOR", "org.apache.commons.math3.linear", "ConjugateGradient", "public static final String OPERATOR = \"operator\";" ], [ "VECTOR", "org.apache.commons.math3.linear", "ConjugateGradient", "public static final String VECTOR = \"vector\";" ], [ "DEFAULT_RELATIVE_SYMMETRY_THRESHOLD", "org.apache.commons.math3.linear", "CholeskyDecomposition", "public static final double DEFAULT_RELATIVE_SYMMETRY_THRESHOLD = 1.0e-15;" ], [ "DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD", "org.apache.commons.math3.linear", "CholeskyDecomposition", "public static final double DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD = 1.0e-10;" ], [ "BLOCK_SIZE", "org.apache.commons.math3.linear", "BlockRealMatrix", "public static final int BLOCK_SIZE = 52;" ], [ "CBRT_MACH_PREC", "org.apache.commons.math3.linear", "SymmLQ", "static final double CBRT_MACH_PREC;" ], [ "MACH_PREC", "org.apache.commons.math3.linear", "SymmLQ", "static final double MACH_PREC;" ], [ "CBRT_MACH_PREC", "org.apache.commons.math3.linear", "State", "static final double CBRT_MACH_PREC;" ], [ "MACH_PREC", "org.apache.commons.math3.linear", "State", "static final double MACH_PREC;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "CauchyDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "SOLVER_DEFAULT_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "AbstractRealDistribution", "public static final double SOLVER_DEFAULT_ABSOLUTE_ACCURACY = 1e-6;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "TDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "ChiSquaredDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "BetaDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "NormalDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "UniformRealDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "WeibullDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "NakagamiDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "ExponentialDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "LogNormalDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "ParetoDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "FDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_MAX_ITERATIONS", "org.apache.commons.math3.distribution", "PoissonDistribution", "public static final int DEFAULT_MAX_ITERATIONS = 10000000;" ], [ "DEFAULT_EPSILON", "org.apache.commons.math3.distribution", "PoissonDistribution", "public static final double DEFAULT_EPSILON = 1e-12;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "GammaDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_ULPS", "org.apache.commons.math3.optim.linear", "SimplexSolver", "static final int DEFAULT_ULPS = 10;" ], [ "DEFAULT_CUT_OFF", "org.apache.commons.math3.optim.linear", "SimplexSolver", "static final double DEFAULT_CUT_OFF = 1e-10;" ], [ "MINIMUM_PROBLEM_DIMENSION", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv", "BOBYQAOptimizer", "public static final int MINIMUM_PROBLEM_DIMENSION = 2;" ], [ "DEFAULT_INITIAL_RADIUS", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv", "BOBYQAOptimizer", "public static final double DEFAULT_INITIAL_RADIUS = 10.0;" ], [ "DEFAULT_STOPPING_RADIUS", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv", "BOBYQAOptimizer", "public static final double DEFAULT_STOPPING_RADIUS = 1E-8;" ], [ "GAMMA", "org.apache.commons.math3.special", "Gamma", "public static final double GAMMA = 0.577215664901532860606512090082;" ], [ "LANCZOS_G", "org.apache.commons.math3.special", "Gamma", "public static final double LANCZOS_G = 607.0 / 128.0;" ], [ "DEFAULT_NAN_STRATEGY", "org.apache.commons.math3.stat.ranking", "NaturalRanking", "public static final NaNStrategy DEFAULT_NAN_STRATEGY = NaNStrategy.FAILED;" ], [ "DEFAULT_TIES_STRATEGY", "org.apache.commons.math3.stat.ranking", "NaturalRanking", "public static final TiesStrategy DEFAULT_TIES_STRATEGY = TiesStrategy.AVERAGE;" ], [ "MAXIMUM_PARTIAL_SUM_COUNT", "org.apache.commons.math3.stat.inference", "KolmogorovSmirnovTest", "protected static final int MAXIMUM_PARTIAL_SUM_COUNT = 100000;" ], [ "KS_SUM_CAUCHY_CRITERION", "org.apache.commons.math3.stat.inference", "KolmogorovSmirnovTest", "protected static final double KS_SUM_CAUCHY_CRITERION = 1E-20;" ], [ "PG_SUM_RELATIVE_ERROR", "org.apache.commons.math3.stat.inference", "KolmogorovSmirnovTest", "protected static final double PG_SUM_RELATIVE_ERROR = 1.0e-10;" ], [ "SMALL_SAMPLE_PRODUCT", "org.apache.commons.math3.stat.inference", "KolmogorovSmirnovTest", "protected static final int SMALL_SAMPLE_PRODUCT = 200;" ], [ "LARGE_SAMPLE_PRODUCT", "org.apache.commons.math3.stat.inference", "KolmogorovSmirnovTest", "protected static final int LARGE_SAMPLE_PRODUCT = 10000;" ], [ "MONTE_CARLO_ITERATIONS", "org.apache.commons.math3.stat.inference", "KolmogorovSmirnovTest", "protected static final int MONTE_CARLO_ITERATIONS = 1000000;" ], [ "INFINITE_WINDOW", "org.apache.commons.math3.stat.descriptive", "DescriptiveStatistics", "public static final int INFINITE_WINDOW = -1;" ], [ "UPSIDE_VARIANCE", "org.apache.commons.math3.stat.descriptive.moment", "SemiVariance", "public static final Direction UPSIDE_VARIANCE = Direction.UPSIDE;" ], [ "DOWNSIDE_VARIANCE", "org.apache.commons.math3.stat.descriptive.moment", "SemiVariance", "public static final Direction DOWNSIDE_VARIANCE = Direction.DOWNSIDE;" ], [ "COMPARATOR", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "static final Comparator<PairNeuronDouble> COMPARATOR = new Comparator<PairNeuronDouble>() {\n\n    /**\n     * {@inheritDoc}\n     */\n    public int compare(PairNeuronDouble o1, PairNeuronDouble o2) {\n        return Double.compare(o1.value, o2.value);\n    }\n};" ], [ "COMPARATOR", "org.apache.commons.math3.ml.neuralnet", "PairNeuronDouble", "static final Comparator<PairNeuronDouble> COMPARATOR = new Comparator<PairNeuronDouble>() {\n\n    /**\n     * {@inheritDoc}\n     */\n    public int compare(PairNeuronDouble o1, PairNeuronDouble o2) {\n        return Double.compare(o1.value, o2.value);\n    }\n};" ], [ "RADIX", "org.apache.commons.math3.dfp", "Dfp", "public static final int RADIX = 10000;" ], [ "MIN_EXP", "org.apache.commons.math3.dfp", "Dfp", "public static final int MIN_EXP = -32767;" ], [ "MAX_EXP", "org.apache.commons.math3.dfp", "Dfp", "public static final int MAX_EXP = 32768;" ], [ "ERR_SCALE", "org.apache.commons.math3.dfp", "Dfp", "public static final int ERR_SCALE = 32760;" ], [ "FINITE", "org.apache.commons.math3.dfp", "Dfp", "public static final byte FINITE = 0;" ], [ "INFINITE", "org.apache.commons.math3.dfp", "Dfp", "public static final byte INFINITE = 1;" ], [ "SNAN", "org.apache.commons.math3.dfp", "Dfp", "public static final byte SNAN = 2;" ], [ "QNAN", "org.apache.commons.math3.dfp", "Dfp", "public static final byte QNAN = 3;" ], [ "FLAG_INVALID", "org.apache.commons.math3.dfp", "DfpField", "public static final int FLAG_INVALID = 1;" ], [ "FLAG_DIV_ZERO", "org.apache.commons.math3.dfp", "DfpField", "public static final int FLAG_DIV_ZERO = 2;" ], [ "FLAG_OVERFLOW", "org.apache.commons.math3.dfp", "DfpField", "public static final int FLAG_OVERFLOW = 4;" ], [ "FLAG_UNDERFLOW", "org.apache.commons.math3.dfp", "DfpField", "public static final int FLAG_UNDERFLOW = 8;" ], [ "FLAG_INEXACT", "org.apache.commons.math3.dfp", "DfpField", "public static final int FLAG_INEXACT = 16;" ], [ "DEFAULT_PREFIX", "org.apache.commons.math3.geometry", "VectorFormat", "public static final String DEFAULT_PREFIX = \"{\";" ], [ "DEFAULT_SUFFIX", "org.apache.commons.math3.geometry", "VectorFormat", "public static final String DEFAULT_SUFFIX = \"}\";" ], [ "DEFAULT_SEPARATOR", "org.apache.commons.math3.geometry", "VectorFormat", "public static final String DEFAULT_SEPARATOR = \"; \";" ], [ "XYZ", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder XYZ = new RotationOrder(\"XYZ\", Vector3D.PLUS_I, Vector3D.PLUS_J, Vector3D.PLUS_K);" ], [ "XZY", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder XZY = new RotationOrder(\"XZY\", Vector3D.PLUS_I, Vector3D.PLUS_K, Vector3D.PLUS_J);" ], [ "YXZ", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder YXZ = new RotationOrder(\"YXZ\", Vector3D.PLUS_J, Vector3D.PLUS_I, Vector3D.PLUS_K);" ], [ "YZX", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder YZX = new RotationOrder(\"YZX\", Vector3D.PLUS_J, Vector3D.PLUS_K, Vector3D.PLUS_I);" ], [ "ZXY", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder ZXY = new RotationOrder(\"ZXY\", Vector3D.PLUS_K, Vector3D.PLUS_I, Vector3D.PLUS_J);" ], [ "ZYX", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder ZYX = new RotationOrder(\"ZYX\", Vector3D.PLUS_K, Vector3D.PLUS_J, Vector3D.PLUS_I);" ], [ "XYX", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder XYX = new RotationOrder(\"XYX\", Vector3D.PLUS_I, Vector3D.PLUS_J, Vector3D.PLUS_I);" ], [ "XZX", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder XZX = new RotationOrder(\"XZX\", Vector3D.PLUS_I, Vector3D.PLUS_K, Vector3D.PLUS_I);" ], [ "YXY", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder YXY = new RotationOrder(\"YXY\", Vector3D.PLUS_J, Vector3D.PLUS_I, Vector3D.PLUS_J);" ], [ "YZY", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder YZY = new RotationOrder(\"YZY\", Vector3D.PLUS_J, Vector3D.PLUS_K, Vector3D.PLUS_J);" ], [ "ZXZ", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder ZXZ = new RotationOrder(\"ZXZ\", Vector3D.PLUS_K, Vector3D.PLUS_I, Vector3D.PLUS_K);" ], [ "ZYZ", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder ZYZ = new RotationOrder(\"ZYZ\", Vector3D.PLUS_K, Vector3D.PLUS_J, Vector3D.PLUS_K);" ], [ "IDENTITY", "org.apache.commons.math3.geometry.euclidean.threed", "Rotation", "public static final Rotation IDENTITY = new Rotation(1.0, 0.0, 0.0, 0.0, false);" ], [ "ZERO", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D ZERO = new Vector3D(0, 0, 0);" ], [ "PLUS_I", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D PLUS_I = new Vector3D(1, 0, 0);" ], [ "MINUS_I", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D MINUS_I = new Vector3D(-1, 0, 0);" ], [ "PLUS_J", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D PLUS_J = new Vector3D(0, 1, 0);" ], [ "MINUS_J", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D MINUS_J = new Vector3D(0, -1, 0);" ], [ "PLUS_K", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D PLUS_K = new Vector3D(0, 0, 1);" ], [ "MINUS_K", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D MINUS_K = new Vector3D(0, 0, -1);" ], [ "NaN", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D NaN = new Vector3D(Double.NaN, Double.NaN, Double.NaN);" ], [ "POSITIVE_INFINITY", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D POSITIVE_INFINITY = new Vector3D(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);" ], [ "NEGATIVE_INFINITY", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D NEGATIVE_INFINITY = new Vector3D(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);" ], [ "ZERO", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static final Vector1D ZERO = new Vector1D(0.0);" ], [ "ONE", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static final Vector1D ONE = new Vector1D(1.0);" ], [ "NaN", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static final Vector1D NaN = new Vector1D(Double.NaN);" ], [ "POSITIVE_INFINITY", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static final Vector1D POSITIVE_INFINITY = new Vector1D(Double.POSITIVE_INFINITY);" ], [ "NEGATIVE_INFINITY", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static final Vector1D NEGATIVE_INFINITY = new Vector1D(Double.NEGATIVE_INFINITY);" ], [ "ZERO", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static final Vector2D ZERO = new Vector2D(0, 0);" ], [ "NaN", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static final Vector2D NaN = new Vector2D(Double.NaN, Double.NaN);" ], [ "POSITIVE_INFINITY", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static final Vector2D POSITIVE_INFINITY = new Vector2D(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);" ], [ "NEGATIVE_INFINITY", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static final Vector2D NEGATIVE_INFINITY = new Vector2D(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);" ], [ "NaN", "org.apache.commons.math3.geometry.spherical.oned", "S1Point", "public static final S1Point NaN = new S1Point(Double.NaN, Vector2D.NaN);" ], [ "PLUS_I", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point PLUS_I = new S2Point(0, 0.5 * FastMath.PI, Vector3D.PLUS_I);" ], [ "PLUS_J", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point PLUS_J = new S2Point(0.5 * FastMath.PI, 0.5 * FastMath.PI, Vector3D.PLUS_J);" ], [ "PLUS_K", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point PLUS_K = new S2Point(0, 0, Vector3D.PLUS_K);" ], [ "MINUS_I", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point MINUS_I = new S2Point(FastMath.PI, 0.5 * FastMath.PI, Vector3D.MINUS_I);" ], [ "MINUS_J", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point MINUS_J = new S2Point(1.5 * FastMath.PI, 0.5 * FastMath.PI, Vector3D.MINUS_J);" ], [ "MINUS_K", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point MINUS_K = new S2Point(0, FastMath.PI, Vector3D.MINUS_K);" ], [ "NaN", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point NaN = new S2Point(Double.NaN, Double.NaN, Vector3D.NaN);" ], [ "DIGEST_MODE", "org.apache.commons.math3.random", "ValueServer", "public static final int DIGEST_MODE = 0;" ], [ "REPLAY_MODE", "org.apache.commons.math3.random", "ValueServer", "public static final int REPLAY_MODE = 1;" ], [ "UNIFORM_MODE", "org.apache.commons.math3.random", "ValueServer", "public static final int UNIFORM_MODE = 2;" ], [ "EXPONENTIAL_MODE", "org.apache.commons.math3.random", "ValueServer", "public static final int EXPONENTIAL_MODE = 3;" ], [ "GAUSSIAN_MODE", "org.apache.commons.math3.random", "ValueServer", "public static final int GAUSSIAN_MODE = 4;" ], [ "CONSTANT_MODE", "org.apache.commons.math3.random", "ValueServer", "public static final int CONSTANT_MODE = 5;" ], [ "DEFAULT_BIN_COUNT", "org.apache.commons.math3.random", "EmpiricalDistribution", "public static final int DEFAULT_BIN_COUNT = 1000;" ], [ "TWO", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction TWO = new Fraction(2, 1);" ], [ "ONE", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction ONE = new Fraction(1, 1);" ], [ "ZERO", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction ZERO = new Fraction(0, 1);" ], [ "FOUR_FIFTHS", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction FOUR_FIFTHS = new Fraction(4, 5);" ], [ "ONE_FIFTH", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction ONE_FIFTH = new Fraction(1, 5);" ], [ "ONE_HALF", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction ONE_HALF = new Fraction(1, 2);" ], [ "ONE_QUARTER", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction ONE_QUARTER = new Fraction(1, 4);" ], [ "ONE_THIRD", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction ONE_THIRD = new Fraction(1, 3);" ], [ "THREE_FIFTHS", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction THREE_FIFTHS = new Fraction(3, 5);" ], [ "THREE_QUARTERS", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction THREE_QUARTERS = new Fraction(3, 4);" ], [ "TWO_FIFTHS", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction TWO_FIFTHS = new Fraction(2, 5);" ], [ "TWO_QUARTERS", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction TWO_QUARTERS = new Fraction(2, 4);" ], [ "TWO_THIRDS", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction TWO_THIRDS = new Fraction(2, 3);" ], [ "MINUS_ONE", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction MINUS_ONE = new Fraction(-1, 1);" ], [ "TWO", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction TWO = new BigFraction(2);" ], [ "ONE", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction ONE = new BigFraction(1);" ], [ "ZERO", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction ZERO = new BigFraction(0);" ], [ "MINUS_ONE", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction MINUS_ONE = new BigFraction(-1);" ], [ "FOUR_FIFTHS", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction FOUR_FIFTHS = new BigFraction(4, 5);" ], [ "ONE_FIFTH", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction ONE_FIFTH = new BigFraction(1, 5);" ], [ "ONE_HALF", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction ONE_HALF = new BigFraction(1, 2);" ], [ "ONE_QUARTER", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction ONE_QUARTER = new BigFraction(1, 4);" ], [ "ONE_THIRD", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction ONE_THIRD = new BigFraction(1, 3);" ], [ "THREE_FIFTHS", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction THREE_FIFTHS = new BigFraction(3, 5);" ], [ "THREE_QUARTERS", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction THREE_QUARTERS = new BigFraction(3, 4);" ], [ "TWO_FIFTHS", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction TWO_FIFTHS = new BigFraction(2, 5);" ], [ "TWO_QUARTERS", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction TWO_QUARTERS = new BigFraction(2, 4);" ], [ "TWO_THIRDS", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction TWO_THIRDS = new BigFraction(2, 3);" ], [ "INTEGER_ZERO", "org.apache.commons.math3.exception", "MathIllegalNumberException", "protected static final Integer INTEGER_ZERO = Integer.valueOf(0);" ], [ "serialVersionUID", "org.apache.commons.math3.transform", "FastSineTransformer", "static final long serialVersionUID = 20120211L;" ], [ "serialVersionUID", "org.apache.commons.math3.transform", "FastFourierTransformer", "static final long serialVersionUID = 20120210L;" ], [ "serialVersionUID", "org.apache.commons.math3.transform", "FastCosineTransformer", "static final long serialVersionUID = 20120212L;" ], [ "serialVersionUID", "org.apache.commons.math3.transform", "FastHadamardTransformer", "static final long serialVersionUID = 20120211L;" ] ],
  "tokensMethodJavadocValues" : [ ],
  "tokensMethodArguments" : [ [ "sig", "", "byte" ], [ "code", "", "byte" ] ],
  "tokensMethodVariablesNonPrivateNonStaticNonVoidMethods" : [ [ "align", "org.apache.commons.math3.dfp", "Dfp", "protected int align(int e)" ], [ "log10", "org.apache.commons.math3.dfp", "Dfp", "public int log10()" ], [ "acos", "org.apache.commons.math3", "RealFieldElement", "public abstract T acos()" ], [ "add", "org.apache.commons.math3.dfp", "Dfp", "public Dfp add(final Dfp x)" ], [ "dfp2string", "org.apache.commons.math3.dfp", "Dfp", "protected String dfp2string()" ], [ "atan", "org.apache.commons.math3", "RealFieldElement", "public abstract T atan()" ], [ "rootN", "org.apache.commons.math3.dfp", "Dfp", "public Dfp rootN(final int n)" ], [ "asinh", "org.apache.commons.math3", "RealFieldElement", "public abstract T asinh()" ], [ "subtract", "org.apache.commons.math3", "RealFieldElement", "public abstract T subtract(double arg0)" ], [ "newInstance", "org.apache.commons.math3.dfp", "Dfp", "public Dfp newInstance()" ], [ "ceil", "org.apache.commons.math3", "RealFieldElement", "public abstract T ceil()" ], [ "tanh", "org.apache.commons.math3", "RealFieldElement", "public abstract T tanh()" ], [ "getField", "org.apache.commons.math3", "FieldElement", "public abstract Field<T> getField()" ], [ "copySign", "org.apache.commons.math3.dfp", "Dfp", "public Dfp copySign(final double s)" ], [ "exp", "org.apache.commons.math3", "RealFieldElement", "public abstract T exp()" ], [ "multiply", "org.apache.commons.math3", "RealFieldElement", "public abstract T multiply(double arg0)" ], [ "acos", "org.apache.commons.math3.dfp", "Dfp", "public Dfp acos()" ], [ "round", "org.apache.commons.math3.dfp", "Dfp", "public long round()" ], [ "floor", "org.apache.commons.math3", "RealFieldElement", "public abstract T floor()" ], [ "abs", "org.apache.commons.math3.dfp", "Dfp", "public Dfp abs()" ], [ "getRadixDigits", "org.apache.commons.math3.dfp", "Dfp", "public int getRadixDigits()" ], [ "negate", "org.apache.commons.math3", "FieldElement", "public abstract T negate()" ], [ "divide", "org.apache.commons.math3.dfp", "Dfp", "public Dfp divide(Dfp divisor)" ], [ "rint", "org.apache.commons.math3.dfp", "Dfp", "public Dfp rint()" ], [ "atanh", "org.apache.commons.math3", "RealFieldElement", "public abstract T atanh()" ], [ "dfp2sci", "org.apache.commons.math3.dfp", "Dfp", "protected String dfp2sci()" ], [ "copySign", "org.apache.commons.math3", "RealFieldElement", "public abstract T copySign(double arg0)" ], [ "copySign", "org.apache.commons.math3.dfp", "Dfp", "public Dfp copySign(final Dfp s)" ], [ "sinh", "org.apache.commons.math3", "RealFieldElement", "public abstract T sinh()" ], [ "remainder", "org.apache.commons.math3", "RealFieldElement", "public abstract T remainder(T arg0) throws DimensionMismatchException" ], [ "scalb", "org.apache.commons.math3", "RealFieldElement", "public abstract T scalb(int arg0)" ], [ "cbrt", "org.apache.commons.math3", "RealFieldElement", "public abstract T cbrt()" ], [ "reciprocal", "org.apache.commons.math3.dfp", "Dfp", "public Dfp reciprocal()" ], [ "exp", "org.apache.commons.math3.dfp", "Dfp", "public Dfp exp()" ], [ "tan", "org.apache.commons.math3", "RealFieldElement", "public abstract T tan()" ], [ "newInstance", "org.apache.commons.math3.dfp", "Dfp", "public Dfp newInstance(final byte sig, final byte code)" ], [ "expm1", "org.apache.commons.math3.dfp", "Dfp", "public Dfp expm1()" ], [ "pow", "org.apache.commons.math3.dfp", "Dfp", "public Dfp pow(final Dfp e)" ], [ "multiply", "org.apache.commons.math3", "FieldElement", "public abstract T multiply(int arg0)" ], [ "asinh", "org.apache.commons.math3.dfp", "Dfp", "public Dfp asinh()" ], [ "cosh", "org.apache.commons.math3", "RealFieldElement", "public abstract T cosh()" ], [ "tan", "org.apache.commons.math3.dfp", "Dfp", "public Dfp tan()" ], [ "greaterThan", "org.apache.commons.math3.dfp", "Dfp", "public boolean greaterThan(final Dfp x)" ], [ "clone", "java.lang", "Object", "protected native Object clone() throws CloneNotSupportedException" ], [ "acosh", "org.apache.commons.math3.dfp", "Dfp", "public Dfp acosh()" ], [ "intValue", "org.apache.commons.math3.dfp", "Dfp", "public int intValue()" ], [ "subtract", "org.apache.commons.math3", "FieldElement", "public abstract T subtract(T arg0) throws NullArgumentException" ], [ "classify", "org.apache.commons.math3.dfp", "Dfp", "public int classify()" ], [ "log10K", "org.apache.commons.math3.dfp", "Dfp", "public int log10K()" ], [ "multiply", "org.apache.commons.math3", "FieldElement", "public abstract T multiply(T arg0) throws NullArgumentException" ], [ "acosh", "org.apache.commons.math3", "RealFieldElement", "public abstract T acosh()" ], [ "getClass", "java.lang", "Object", "public final native Class<? extends Object> getClass()" ], [ "pow", "org.apache.commons.math3", "RealFieldElement", "public abstract T pow(double arg0)" ], [ "pow", "org.apache.commons.math3.dfp", "Dfp", "public Dfp pow(final double p)" ], [ "linearCombination", "org.apache.commons.math3", "RealFieldElement", "public abstract T linearCombination(T[] arg0, T[] arg1) throws DimensionMismatchException" ], [ "sqrt", "org.apache.commons.math3", "RealFieldElement", "public abstract T sqrt()" ], [ "nextAfter", "org.apache.commons.math3.dfp", "Dfp", "public Dfp nextAfter(final Dfp x)" ], [ "isInfinite", "org.apache.commons.math3.dfp", "Dfp", "public boolean isInfinite()" ], [ "newInstance", "org.apache.commons.math3.dfp", "Dfp", "public Dfp newInstance(final int x)" ], [ "round", "org.apache.commons.math3.dfp", "Dfp", "protected int round(int n)" ], [ "divide", "org.apache.commons.math3.dfp", "Dfp", "public Dfp divide(final double a)" ], [ "linearCombination", "org.apache.commons.math3", "RealFieldElement", "public abstract T linearCombination(double arg0, T arg1, double arg2, T arg3)" ], [ "sqrt", "org.apache.commons.math3.dfp", "Dfp", "public Dfp sqrt()" ], [ "cos", "org.apache.commons.math3", "RealFieldElement", "public abstract T cos()" ], [ "log", "org.apache.commons.math3", "RealFieldElement", "public abstract T log()" ], [ "linearCombination", "org.apache.commons.math3", "RealFieldElement", "public abstract T linearCombination(double[] arg0, T[] arg1) throws DimensionMismatchException" ], [ "newInstance", "org.apache.commons.math3.dfp", "Dfp", "public Dfp newInstance(final byte x)" ], [ "toDouble", "org.apache.commons.math3.dfp", "Dfp", "public double toDouble()" ], [ "negativeOrNull", "org.apache.commons.math3.dfp", "Dfp", "public boolean negativeOrNull()" ], [ "floor", "org.apache.commons.math3.dfp", "Dfp", "public Dfp floor()" ], [ "dotrap", "org.apache.commons.math3.dfp", "Dfp", "public Dfp dotrap(int type, String what, Dfp oper, Dfp result)" ], [ "cbrt", "org.apache.commons.math3.dfp", "Dfp", "public Dfp cbrt()" ], [ "remainder", "org.apache.commons.math3.dfp", "Dfp", "public Dfp remainder(final double a)" ], [ "divide", "org.apache.commons.math3", "FieldElement", "public abstract T divide(T arg0) throws NullArgumentException, MathArithmeticException" ], [ "signum", "org.apache.commons.math3.dfp", "Dfp", "public Dfp signum()" ], [ "subtract", "org.apache.commons.math3.dfp", "Dfp", "public Dfp subtract(final double a)" ], [ "copySign", "org.apache.commons.math3", "RealFieldElement", "public abstract T copySign(T arg0)" ], [ "asin", "org.apache.commons.math3", "RealFieldElement", "public abstract T asin()" ], [ "asin", "org.apache.commons.math3.dfp", "Dfp", "public Dfp asin()" ], [ "strictlyNegative", "org.apache.commons.math3.dfp", "Dfp", "public boolean strictlyNegative()" ], [ "rootN", "org.apache.commons.math3", "RealFieldElement", "public abstract T rootN(int arg0)" ], [ "ceil", "org.apache.commons.math3.dfp", "Dfp", "public Dfp ceil()" ], [ "linearCombination", "org.apache.commons.math3.dfp", "Dfp", "public Dfp linearCombination(final double a1, final Dfp b1, final double a2, final Dfp b2)" ], [ "complement", "org.apache.commons.math3.dfp", "Dfp", "protected int complement(int extra)" ], [ "atan2", "org.apache.commons.math3", "RealFieldElement", "public abstract T atan2(T arg0) throws DimensionMismatchException" ], [ "scalb", "org.apache.commons.math3.dfp", "Dfp", "public Dfp scalb(final int n)" ], [ "toString", "org.apache.commons.math3.dfp", "Dfp", "public String toString()" ], [ "divide", "org.apache.commons.math3", "RealFieldElement", "public abstract T divide(double arg0)" ], [ "negate", "org.apache.commons.math3.dfp", "Dfp", "public Dfp negate()" ], [ "getField", "org.apache.commons.math3.dfp", "Dfp", "public DfpField getField()" ], [ "isNaN", "org.apache.commons.math3.dfp", "Dfp", "public boolean isNaN()" ], [ "getOne", "org.apache.commons.math3.dfp", "Dfp", "public Dfp getOne()" ], [ "linearCombination", "org.apache.commons.math3.dfp", "Dfp", "public Dfp linearCombination(final double a1, final Dfp b1, final double a2, final Dfp b2, final double a3, final Dfp b3, final double a4, final Dfp b4)" ], [ "trap", "org.apache.commons.math3.dfp", "Dfp", "protected Dfp trap(int type, String what, Dfp oper, Dfp def, Dfp result)" ], [ "pow", "org.apache.commons.math3.dfp", "Dfp", "public Dfp pow(final int n)" ], [ "positiveOrNull", "org.apache.commons.math3.dfp", "Dfp", "public boolean positiveOrNull()" ], [ "log", "org.apache.commons.math3.dfp", "Dfp", "public Dfp log()" ], [ "add", "org.apache.commons.math3.dfp", "Dfp", "public Dfp add(final double a)" ], [ "newInstance", "org.apache.commons.math3.dfp", "Dfp", "public Dfp newInstance(final long x)" ], [ "multiply", "org.apache.commons.math3.dfp", "Dfp", "public Dfp multiply(final double a)" ], [ "linearCombination", "org.apache.commons.math3.dfp", "Dfp", "public Dfp linearCombination(final Dfp[] a, final Dfp[] b) throws DimensionMismatchException" ], [ "sin", "org.apache.commons.math3.dfp", "Dfp", "public Dfp sin()" ], [ "log1p", "org.apache.commons.math3.dfp", "Dfp", "public Dfp log1p()" ], [ "newInstance", "org.apache.commons.math3.dfp", "Dfp", "public Dfp newInstance(final String s)" ], [ "power10", "org.apache.commons.math3.dfp", "Dfp", "public Dfp power10(final int e)" ], [ "atan", "org.apache.commons.math3.dfp", "Dfp", "public Dfp atan()" ], [ "multiply", "org.apache.commons.math3.dfp", "Dfp", "public Dfp multiply(final Dfp x)" ], [ "linearCombination", "org.apache.commons.math3.dfp", "Dfp", "public Dfp linearCombination(final Dfp a1, final Dfp b1, final Dfp a2, final Dfp b2)" ], [ "cosh", "org.apache.commons.math3.dfp", "Dfp", "public Dfp cosh()" ], [ "divide", "org.apache.commons.math3.dfp", "Dfp", "public Dfp divide(int divisor)" ], [ "intLog10", "org.apache.commons.math3.dfp", "Dfp", "public int intLog10()" ], [ "hypot", "org.apache.commons.math3", "RealFieldElement", "public abstract T hypot(T arg0) throws DimensionMismatchException" ], [ "atanh", "org.apache.commons.math3.dfp", "Dfp", "public Dfp atanh()" ], [ "rint", "org.apache.commons.math3", "RealFieldElement", "public abstract T rint()" ], [ "abs", "org.apache.commons.math3", "RealFieldElement", "public abstract T abs()" ], [ "pow", "org.apache.commons.math3", "RealFieldElement", "public abstract T pow(int arg0)" ], [ "multiply", "org.apache.commons.math3.dfp", "Dfp", "public Dfp multiply(final int x)" ], [ "lessThan", "org.apache.commons.math3.dfp", "Dfp", "public boolean lessThan(final Dfp x)" ], [ "linearCombination", "org.apache.commons.math3.dfp", "Dfp", "public Dfp linearCombination(final Dfp a1, final Dfp b1, final Dfp a2, final Dfp b2, final Dfp a3, final Dfp b3)" ], [ "hypot", "org.apache.commons.math3.dfp", "Dfp", "public Dfp hypot(final Dfp y)" ], [ "pow", "org.apache.commons.math3", "RealFieldElement", "public abstract T pow(T arg0) throws DimensionMismatchException" ], [ "signum", "org.apache.commons.math3", "RealFieldElement", "public abstract T signum()" ], [ "equals", "org.apache.commons.math3.dfp", "Dfp", "public boolean equals(final Object other)" ], [ "remainder", "org.apache.commons.math3.dfp", "Dfp", "public Dfp remainder(final Dfp d)" ], [ "add", "org.apache.commons.math3", "FieldElement", "public abstract T add(T arg0) throws NullArgumentException" ], [ "cos", "org.apache.commons.math3.dfp", "Dfp", "public Dfp cos()" ], [ "toSplitDouble", "org.apache.commons.math3.dfp", "Dfp", "public double[] toSplitDouble()" ], [ "linearCombination", "org.apache.commons.math3", "RealFieldElement", "public abstract T linearCombination(double arg0, T arg1, double arg2, T arg3, double arg4, T arg5)" ], [ "remainder", "org.apache.commons.math3", "RealFieldElement", "public abstract T remainder(double arg0)" ], [ "linearCombination", "org.apache.commons.math3", "RealFieldElement", "public abstract T linearCombination(double arg0, T arg1, double arg2, T arg3, double arg4, T arg5, double arg6, T arg7)" ], [ "atan2", "org.apache.commons.math3.dfp", "Dfp", "public Dfp atan2(final Dfp x) throws DimensionMismatchException" ], [ "getZero", "org.apache.commons.math3.dfp", "Dfp", "public Dfp getZero()" ], [ "strictlyPositive", "org.apache.commons.math3.dfp", "Dfp", "public boolean strictlyPositive()" ], [ "trunc", "org.apache.commons.math3.dfp", "Dfp", "protected Dfp trunc(final DfpField.RoundingMode rmode)" ], [ "sinh", "org.apache.commons.math3.dfp", "Dfp", "public Dfp sinh()" ], [ "getTwo", "org.apache.commons.math3.dfp", "Dfp", "public Dfp getTwo()" ], [ "linearCombination", "org.apache.commons.math3.dfp", "Dfp", "public Dfp linearCombination(final Dfp a1, final Dfp b1, final Dfp a2, final Dfp b2, final Dfp a3, final Dfp b3, final Dfp a4, final Dfp b4)" ], [ "add", "org.apache.commons.math3", "RealFieldElement", "public abstract T add(double arg0)" ], [ "linearCombination", "org.apache.commons.math3", "RealFieldElement", "public abstract T linearCombination(T arg0, T arg1, T arg2, T arg3, T arg4, T arg5, T arg6, T arg7)" ], [ "linearCombination", "org.apache.commons.math3.dfp", "Dfp", "public Dfp linearCombination(final double[] a, final Dfp[] b) throws DimensionMismatchException" ], [ "linearCombination", "org.apache.commons.math3", "RealFieldElement", "public abstract T linearCombination(T arg0, T arg1, T arg2, T arg3)" ], [ "power10K", "org.apache.commons.math3.dfp", "Dfp", "public Dfp power10K(final int e)" ], [ "reciprocal", "org.apache.commons.math3", "RealFieldElement", "public abstract T reciprocal()" ], [ "subtract", "org.apache.commons.math3.dfp", "Dfp", "public Dfp subtract(final Dfp x)" ], [ "linearCombination", "org.apache.commons.math3.dfp", "Dfp", "public Dfp linearCombination(final double a1, final Dfp b1, final double a2, final Dfp b2, final double a3, final Dfp b3)" ], [ "expm1", "org.apache.commons.math3", "RealFieldElement", "public abstract T expm1()" ], [ "isZero", "org.apache.commons.math3.dfp", "Dfp", "public boolean isZero()" ], [ "log1p", "org.apache.commons.math3", "RealFieldElement", "public abstract T log1p()" ], [ "newInstance", "org.apache.commons.math3.dfp", "Dfp", "public Dfp newInstance(final Dfp d)" ], [ "tanh", "org.apache.commons.math3.dfp", "Dfp", "public Dfp tanh()" ], [ "getReal", "org.apache.commons.math3.dfp", "Dfp", "public double getReal()" ], [ "sin", "org.apache.commons.math3", "RealFieldElement", "public abstract T sin()" ], [ "newInstance", "org.apache.commons.math3.dfp", "Dfp", "public Dfp newInstance(final double x)" ], [ "linearCombination", "org.apache.commons.math3", "RealFieldElement", "public abstract T linearCombination(T arg0, T arg1, T arg2, T arg3, T arg4, T arg5)" ], [ "hashCode", "org.apache.commons.math3.dfp", "Dfp", "public int hashCode()" ], [ "unequal", "org.apache.commons.math3.dfp", "Dfp", "public boolean unequal(final Dfp x)" ], [ "hashCode", "java.lang", "Object", "public native int hashCode()" ], [ "toString", "java.lang", "Object", "public String toString()" ], [ "equals", "java.lang", "Object", "public boolean equals(Object arg0)" ], [ "round", "org.apache.commons.math3", "RealFieldElement", "public abstract long round()" ], [ "getReal", "org.apache.commons.math3", "RealFieldElement", "public abstract double getReal()" ], [ "reciprocal", "org.apache.commons.math3", "FieldElement", "public abstract T reciprocal() throws MathArithmeticException" ] ],
  "tokensMethodVariablesNonPrivateNonStaticAttributes" : [ [ "mant", "org.apache.commons.math3.dfp", "Dfp", "protected int[] mant;" ], [ "sign", "org.apache.commons.math3.dfp", "Dfp", "protected byte sign;" ], [ "exp", "org.apache.commons.math3.dfp", "Dfp", "protected int exp;" ], [ "nans", "org.apache.commons.math3.dfp", "Dfp", "protected byte nans;" ] ],
  "tokensOracleVariablesNonPrivateNonStaticNonVoidMethods" : [ ],
  "tokensOracleVariablesNonPrivateNonStaticAttributes" : [ ]
}, {
  "id" : 22763,
  "oracle" : ";",
  "oracleType" : "NORMAL_POST",
  "projectName" : "commons-math3-3.6.1",
  "packageName" : "org.apache.commons.math3.dfp",
  "className" : "Dfp",
  "javadocTag" : "@return true if instance is not a number",
  "methodJavadoc" : "    /** Check if instance is not a number.\n     * @return true if instance is not a number\n     */",
  "methodSourceCode" : "public boolean isNaN(){\n    return (nans == QNAN) || (nans == SNAN);\n}",
  "classJavadoc" : "/**\n *  Decimal floating point library for Java\n *\n *  <p>Another floating point class.  This one is built using radix 10000\n *  which is 10<sup>4</sup>, so its almost decimal.</p>\n *\n *  <p>The design goals here are:\n *  <ol>\n *    <li>Decimal math, or close to it</li>\n *    <li>Settable precision (but no mix between numbers using different settings)</li>\n *    <li>Portability.  Code should be kept as portable as possible.</li>\n *    <li>Performance</li>\n *    <li>Accuracy  - Results should always be +/- 1 ULP for basic\n *         algebraic operation</li>\n *    <li>Comply with IEEE 854-1987 as much as possible.\n *         (See IEEE 854-1987 notes below)</li>\n *  </ol></p>\n *\n *  <p>Trade offs:\n *  <ol>\n *    <li>Memory foot print.  I'm using more memory than necessary to\n *         represent numbers to get better performance.</li>\n *    <li>Digits are bigger, so rounding is a greater loss.  So, if you\n *         really need 12 decimal digits, better use 4 base 10000 digits\n *         there can be one partially filled.</li>\n *  </ol></p>\n *\n *  <p>Numbers are represented  in the following form:\n *  <pre>\n *  n  =  sign &times; mant &times; (radix)<sup>exp</sup>;</p>\n *  </pre>\n *  where sign is &plusmn;1, mantissa represents a fractional number between\n *  zero and one.  mant[0] is the least significant digit.\n *  exp is in the range of -32767 to 32768</p>\n *\n *  <p>IEEE 854-1987  Notes and differences</p>\n *\n *  <p>IEEE 854 requires the radix to be either 2 or 10.  The radix here is\n *  10000, so that requirement is not met, but  it is possible that a\n *  subclassed can be made to make it behave as a radix 10\n *  number.  It is my opinion that if it looks and behaves as a radix\n *  10 number then it is one and that requirement would be met.</p>\n *\n *  <p>The radix of 10000 was chosen because it should be faster to operate\n *  on 4 decimal digits at once instead of one at a time.  Radix 10 behavior\n *  can be realized by adding an additional rounding step to ensure that\n *  the number of decimal digits represented is constant.</p>\n *\n *  <p>The IEEE standard specifically leaves out internal data encoding,\n *  so it is reasonable to conclude that such a subclass of this radix\n *  10000 system is merely an encoding of a radix 10 system.</p>\n *\n *  <p>IEEE 854 also specifies the existence of \"sub-normal\" numbers.  This\n *  class does not contain any such entities.  The most significant radix\n *  10000 digit is always non-zero.  Instead, we support \"gradual underflow\"\n *  by raising the underflow flag for numbers less with exponent less than\n *  expMin, but don't flush to zero until the exponent reaches MIN_EXP-digits.\n *  Thus the smallest number we can represent would be:\n *  1E(-(MIN_EXP-digits-1)*4),  eg, for digits=5, MIN_EXP=-32767, that would\n *  be 1e-131092.</p>\n *\n *  <p>IEEE 854 defines that the implied radix point lies just to the right\n *  of the most significant digit and to the left of the remaining digits.\n *  This implementation puts the implied radix point to the left of all\n *  digits including the most significant one.  The most significant digit\n *  here is the one just to the right of the radix point.  This is a fine\n *  detail and is really only a matter of definition.  Any side effects of\n *  this can be rendered invisible by a subclass.</p>\n * @see DfpField\n * @since 2.2\n */",
  "classSourceCode" : "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.commons.math3.dfp;\n\nimport java.util.Arrays;\n\nimport org.apache.commons.math3.RealFieldElement;\nimport org.apache.commons.math3.exception.DimensionMismatchException;\nimport org.apache.commons.math3.util.FastMath;\n\n/**\n *  Decimal floating point library for Java\n *\n *  <p>Another floating point class.  This one is built using radix 10000\n *  which is 10<sup>4</sup>, so its almost decimal.</p>\n *\n *  <p>The design goals here are:\n *  <ol>\n *    <li>Decimal math, or close to it</li>\n *    <li>Settable precision (but no mix between numbers using different settings)</li>\n *    <li>Portability.  Code should be kept as portable as possible.</li>\n *    <li>Performance</li>\n *    <li>Accuracy  - Results should always be +/- 1 ULP for basic\n *         algebraic operation</li>\n *    <li>Comply with IEEE 854-1987 as much as possible.\n *         (See IEEE 854-1987 notes below)</li>\n *  </ol></p>\n *\n *  <p>Trade offs:\n *  <ol>\n *    <li>Memory foot print.  I'm using more memory than necessary to\n *         represent numbers to get better performance.</li>\n *    <li>Digits are bigger, so rounding is a greater loss.  So, if you\n *         really need 12 decimal digits, better use 4 base 10000 digits\n *         there can be one partially filled.</li>\n *  </ol></p>\n *\n *  <p>Numbers are represented  in the following form:\n *  <pre>\n *  n  =  sign &times; mant &times; (radix)<sup>exp</sup>;</p>\n *  </pre>\n *  where sign is &plusmn;1, mantissa represents a fractional number between\n *  zero and one.  mant[0] is the least significant digit.\n *  exp is in the range of -32767 to 32768</p>\n *\n *  <p>IEEE 854-1987  Notes and differences</p>\n *\n *  <p>IEEE 854 requires the radix to be either 2 or 10.  The radix here is\n *  10000, so that requirement is not met, but  it is possible that a\n *  subclassed can be made to make it behave as a radix 10\n *  number.  It is my opinion that if it looks and behaves as a radix\n *  10 number then it is one and that requirement would be met.</p>\n *\n *  <p>The radix of 10000 was chosen because it should be faster to operate\n *  on 4 decimal digits at once instead of one at a time.  Radix 10 behavior\n *  can be realized by adding an additional rounding step to ensure that\n *  the number of decimal digits represented is constant.</p>\n *\n *  <p>The IEEE standard specifically leaves out internal data encoding,\n *  so it is reasonable to conclude that such a subclass of this radix\n *  10000 system is merely an encoding of a radix 10 system.</p>\n *\n *  <p>IEEE 854 also specifies the existence of \"sub-normal\" numbers.  This\n *  class does not contain any such entities.  The most significant radix\n *  10000 digit is always non-zero.  Instead, we support \"gradual underflow\"\n *  by raising the underflow flag for numbers less with exponent less than\n *  expMin, but don't flush to zero until the exponent reaches MIN_EXP-digits.\n *  Thus the smallest number we can represent would be:\n *  1E(-(MIN_EXP-digits-1)*4),  eg, for digits=5, MIN_EXP=-32767, that would\n *  be 1e-131092.</p>\n *\n *  <p>IEEE 854 defines that the implied radix point lies just to the right\n *  of the most significant digit and to the left of the remaining digits.\n *  This implementation puts the implied radix point to the left of all\n *  digits including the most significant one.  The most significant digit\n *  here is the one just to the right of the radix point.  This is a fine\n *  detail and is really only a matter of definition.  Any side effects of\n *  this can be rendered invisible by a subclass.</p>\n * @see DfpField\n * @since 2.2\n */\npublic class Dfp implements RealFieldElement<Dfp> {\n\n    /** The radix, or base of this system.  Set to 10000 */\n    public static final int RADIX = 10000;\n\n    /** The minimum exponent before underflow is signaled.  Flush to zero\n     *  occurs at minExp-DIGITS */\n    public static final int MIN_EXP = -32767;\n\n    /** The maximum exponent before overflow is signaled and results flushed\n     *  to infinity */\n    public static final int MAX_EXP =  32768;\n\n    /** The amount under/overflows are scaled by before going to trap handler */\n    public static final int ERR_SCALE = 32760;\n\n    /** Indicator value for normal finite numbers. */\n    public static final byte FINITE = 0;\n\n    /** Indicator value for Infinity. */\n    public static final byte INFINITE = 1;\n\n    /** Indicator value for signaling NaN. */\n    public static final byte SNAN = 2;\n\n    /** Indicator value for quiet NaN. */\n    public static final byte QNAN = 3;\n\n    /** String for NaN representation. */\n    private static final String NAN_STRING = \"NaN\";\n\n    /** String for positive infinity representation. */\n    private static final String POS_INFINITY_STRING = \"Infinity\";\n\n    /** String for negative infinity representation. */\n    private static final String NEG_INFINITY_STRING = \"-Infinity\";\n\n    /** Name for traps triggered by addition. */\n    private static final String ADD_TRAP = \"add\";\n\n    /** Name for traps triggered by multiplication. */\n    private static final String MULTIPLY_TRAP = \"multiply\";\n\n    /** Name for traps triggered by division. */\n    private static final String DIVIDE_TRAP = \"divide\";\n\n    /** Name for traps triggered by square root. */\n    private static final String SQRT_TRAP = \"sqrt\";\n\n    /** Name for traps triggered by alignment. */\n    private static final String ALIGN_TRAP = \"align\";\n\n    /** Name for traps triggered by truncation. */\n    private static final String TRUNC_TRAP = \"trunc\";\n\n    /** Name for traps triggered by nextAfter. */\n    private static final String NEXT_AFTER_TRAP = \"nextAfter\";\n\n    /** Name for traps triggered by lessThan. */\n    private static final String LESS_THAN_TRAP = \"lessThan\";\n\n    /** Name for traps triggered by greaterThan. */\n    private static final String GREATER_THAN_TRAP = \"greaterThan\";\n\n    /** Name for traps triggered by newInstance. */\n    private static final String NEW_INSTANCE_TRAP = \"newInstance\";\n\n    /** Mantissa. */\n    protected int[] mant;\n\n    /** Sign bit: 1 for positive, -1 for negative. */\n    protected byte sign;\n\n    /** Exponent. */\n    protected int exp;\n\n    /** Indicator for non-finite / non-number values. */\n    protected byte nans;\n\n    /** Factory building similar Dfp's. */\n    private final DfpField field;\n\n    /** Makes an instance with a value of zero.\n     * @param field field to which this instance belongs\n     */\n    protected Dfp(final DfpField field) {\n        mant = new int[field.getRadixDigits()];\n        sign = 1;\n        exp = 0;\n        nans = FINITE;\n        this.field = field;\n    }\n\n    /** Create an instance from a byte value.\n     * @param field field to which this instance belongs\n     * @param x value to convert to an instance\n     */\n    protected Dfp(final DfpField field, byte x) {\n        this(field, (long) x);\n    }\n\n    /** Create an instance from an int value.\n     * @param field field to which this instance belongs\n     * @param x value to convert to an instance\n     */\n    protected Dfp(final DfpField field, int x) {\n        this(field, (long) x);\n    }\n\n    /** Create an instance from a long value.\n     * @param field field to which this instance belongs\n     * @param x value to convert to an instance\n     */\n    protected Dfp(final DfpField field, long x) {\n\n        // initialize as if 0\n        mant = new int[field.getRadixDigits()];\n        nans = FINITE;\n        this.field = field;\n\n        boolean isLongMin = false;\n        if (x == Long.MIN_VALUE) {\n            // special case for Long.MIN_VALUE (-9223372036854775808)\n            // we must shift it before taking its absolute value\n            isLongMin = true;\n            ++x;\n        }\n\n        // set the sign\n        if (x < 0) {\n            sign = -1;\n            x = -x;\n        } else {\n            sign = 1;\n        }\n\n        exp = 0;\n        while (x != 0) {\n            System.arraycopy(mant, mant.length - exp, mant, mant.length - 1 - exp, exp);\n            mant[mant.length - 1] = (int) (x % RADIX);\n            x /= RADIX;\n            exp++;\n        }\n\n        if (isLongMin) {\n            // remove the shift added for Long.MIN_VALUE\n            // we know in this case that fixing the last digit is sufficient\n            for (int i = 0; i < mant.length - 1; i++) {\n                if (mant[i] != 0) {\n                    mant[i]++;\n                    break;\n                }\n            }\n        }\n    }\n\n    /** Create an instance from a double value.\n     * @param field field to which this instance belongs\n     * @param x value to convert to an instance\n     */\n    protected Dfp(final DfpField field, double x) {\n\n        // initialize as if 0\n        mant = new int[field.getRadixDigits()];\n        sign = 1;\n        exp = 0;\n        nans = FINITE;\n        this.field = field;\n\n        long bits = Double.doubleToLongBits(x);\n        long mantissa = bits & 0x000fffffffffffffL;\n        int exponent = (int) ((bits & 0x7ff0000000000000L) >> 52) - 1023;\n\n        if (exponent == -1023) {\n            // Zero or sub-normal\n            if (x == 0) {\n                // make sure 0 has the right sign\n                if ((bits & 0x8000000000000000L) != 0) {\n                    sign = -1;\n                }\n                return;\n            }\n\n            exponent++;\n\n            // Normalize the subnormal number\n            while ( (mantissa & 0x0010000000000000L) == 0) {\n                exponent--;\n                mantissa <<= 1;\n            }\n            mantissa &= 0x000fffffffffffffL;\n        }\n\n        if (exponent == 1024) {\n            // infinity or NAN\n            if (x != x) {\n                sign = (byte) 1;\n                nans = QNAN;\n            } else if (x < 0) {\n                sign = (byte) -1;\n                nans = INFINITE;\n            } else {\n                sign = (byte) 1;\n                nans = INFINITE;\n            }\n            return;\n        }\n\n        Dfp xdfp = new Dfp(field, mantissa);\n        xdfp = xdfp.divide(new Dfp(field, 4503599627370496l)).add(field.getOne());  // Divide by 2^52, then add one\n        xdfp = xdfp.multiply(DfpMath.pow(field.getTwo(), exponent));\n\n        if ((bits & 0x8000000000000000L) != 0) {\n            xdfp = xdfp.negate();\n        }\n\n        System.arraycopy(xdfp.mant, 0, mant, 0, mant.length);\n        sign = xdfp.sign;\n        exp  = xdfp.exp;\n        nans = xdfp.nans;\n\n    }\n\n    /** Copy constructor.\n     * @param d instance to copy\n     */\n    public Dfp(final Dfp d) {\n        mant  = d.mant.clone();\n        sign  = d.sign;\n        exp   = d.exp;\n        nans  = d.nans;\n        field = d.field;\n    }\n\n    /** Create an instance from a String representation.\n     * @param field field to which this instance belongs\n     * @param s string representation of the instance\n     */\n    protected Dfp(final DfpField field, final String s) {\n\n        // initialize as if 0\n        mant = new int[field.getRadixDigits()];\n        sign = 1;\n        exp = 0;\n        nans = FINITE;\n        this.field = field;\n\n        boolean decimalFound = false;\n        final int rsize = 4;   // size of radix in decimal digits\n        final int offset = 4;  // Starting offset into Striped\n        final char[] striped = new char[getRadixDigits() * rsize + offset * 2];\n\n        // Check some special cases\n        if (s.equals(POS_INFINITY_STRING)) {\n            sign = (byte) 1;\n            nans = INFINITE;\n            return;\n        }\n\n        if (s.equals(NEG_INFINITY_STRING)) {\n            sign = (byte) -1;\n            nans = INFINITE;\n            return;\n        }\n\n        if (s.equals(NAN_STRING)) {\n            sign = (byte) 1;\n            nans = QNAN;\n            return;\n        }\n\n        // Check for scientific notation\n        int p = s.indexOf(\"e\");\n        if (p == -1) { // try upper case?\n            p = s.indexOf(\"E\");\n        }\n\n        final String fpdecimal;\n        int sciexp = 0;\n        if (p != -1) {\n            // scientific notation\n            fpdecimal = s.substring(0, p);\n            String fpexp = s.substring(p+1);\n            boolean negative = false;\n\n            for (int i=0; i<fpexp.length(); i++)\n            {\n                if (fpexp.charAt(i) == '-')\n                {\n                    negative = true;\n                    continue;\n                }\n                if (fpexp.charAt(i) >= '0' && fpexp.charAt(i) <= '9') {\n                    sciexp = sciexp * 10 + fpexp.charAt(i) - '0';\n                }\n            }\n\n            if (negative) {\n                sciexp = -sciexp;\n            }\n        } else {\n            // normal case\n            fpdecimal = s;\n        }\n\n        // If there is a minus sign in the number then it is negative\n        if (fpdecimal.indexOf(\"-\") !=  -1) {\n            sign = -1;\n        }\n\n        // First off, find all of the leading zeros, trailing zeros, and significant digits\n        p = 0;\n\n        // Move p to first significant digit\n        int decimalPos = 0;\n        for (;;) {\n            if (fpdecimal.charAt(p) >= '1' && fpdecimal.charAt(p) <= '9') {\n                break;\n            }\n\n            if (decimalFound && fpdecimal.charAt(p) == '0') {\n                decimalPos--;\n            }\n\n            if (fpdecimal.charAt(p) == '.') {\n                decimalFound = true;\n            }\n\n            p++;\n\n            if (p == fpdecimal.length()) {\n                break;\n            }\n        }\n\n        // Copy the string onto Stripped\n        int q = offset;\n        striped[0] = '0';\n        striped[1] = '0';\n        striped[2] = '0';\n        striped[3] = '0';\n        int significantDigits=0;\n        for(;;) {\n            if (p == (fpdecimal.length())) {\n                break;\n            }\n\n            // Don't want to run pass the end of the array\n            if (q == mant.length*rsize+offset+1) {\n                break;\n            }\n\n            if (fpdecimal.charAt(p) == '.') {\n                decimalFound = true;\n                decimalPos = significantDigits;\n                p++;\n                continue;\n            }\n\n            if (fpdecimal.charAt(p) < '0' || fpdecimal.charAt(p) > '9') {\n                p++;\n                continue;\n            }\n\n            striped[q] = fpdecimal.charAt(p);\n            q++;\n            p++;\n            significantDigits++;\n        }\n\n\n        // If the decimal point has been found then get rid of trailing zeros.\n        if (decimalFound && q != offset) {\n            for (;;) {\n                q--;\n                if (q == offset) {\n                    break;\n                }\n                if (striped[q] == '0') {\n                    significantDigits--;\n                } else {\n                    break;\n                }\n            }\n        }\n\n        // special case of numbers like \"0.00000\"\n        if (decimalFound && significantDigits == 0) {\n            decimalPos = 0;\n        }\n\n        // Implicit decimal point at end of number if not present\n        if (!decimalFound) {\n            decimalPos = q-offset;\n        }\n\n        // Find the number of significant trailing zeros\n        q = offset;  // set q to point to first sig digit\n        p = significantDigits-1+offset;\n\n        while (p > q) {\n            if (striped[p] != '0') {\n                break;\n            }\n            p--;\n        }\n\n        // Make sure the decimal is on a mod 10000 boundary\n        int i = ((rsize * 100) - decimalPos - sciexp % rsize) % rsize;\n        q -= i;\n        decimalPos += i;\n\n        // Make the mantissa length right by adding zeros at the end if necessary\n        while ((p - q) < (mant.length * rsize)) {\n            for (i = 0; i < rsize; i++) {\n                striped[++p] = '0';\n            }\n        }\n\n        // Ok, now we know how many trailing zeros there are,\n        // and where the least significant digit is\n        for (i = mant.length - 1; i >= 0; i--) {\n            mant[i] = (striped[q]   - '0') * 1000 +\n                      (striped[q+1] - '0') * 100  +\n                      (striped[q+2] - '0') * 10   +\n                      (striped[q+3] - '0');\n            q += 4;\n        }\n\n\n        exp = (decimalPos+sciexp) / rsize;\n\n        if (q < striped.length) {\n            // Is there possible another digit?\n            round((striped[q] - '0')*1000);\n        }\n\n    }\n\n    /** Creates an instance with a non-finite value.\n     * @param field field to which this instance belongs\n     * @param sign sign of the Dfp to create\n     * @param nans code of the value, must be one of {@link #INFINITE},\n     * {@link #SNAN},  {@link #QNAN}\n     */\n    protected Dfp(final DfpField field, final byte sign, final byte nans) {\n        this.field = field;\n        this.mant    = new int[field.getRadixDigits()];\n        this.sign    = sign;\n        this.exp     = 0;\n        this.nans    = nans;\n    }\n\n    /** Create an instance with a value of 0.\n     * Use this internally in preference to constructors to facilitate subclasses\n     * @return a new instance with a value of 0\n     */\n    public Dfp newInstance() {\n        return new Dfp(getField());\n    }\n\n    /** Create an instance from a byte value.\n     * @param x value to convert to an instance\n     * @return a new instance with value x\n     */\n    public Dfp newInstance(final byte x) {\n        return new Dfp(getField(), x);\n    }\n\n    /** Create an instance from an int value.\n     * @param x value to convert to an instance\n     * @return a new instance with value x\n     */\n    public Dfp newInstance(final int x) {\n        return new Dfp(getField(), x);\n    }\n\n    /** Create an instance from a long value.\n     * @param x value to convert to an instance\n     * @return a new instance with value x\n     */\n    public Dfp newInstance(final long x) {\n        return new Dfp(getField(), x);\n    }\n\n    /** Create an instance from a double value.\n     * @param x value to convert to an instance\n     * @return a new instance with value x\n     */\n    public Dfp newInstance(final double x) {\n        return new Dfp(getField(), x);\n    }\n\n    /** Create an instance by copying an existing one.\n     * Use this internally in preference to constructors to facilitate subclasses.\n     * @param d instance to copy\n     * @return a new instance with the same value as d\n     */\n    public Dfp newInstance(final Dfp d) {\n\n        // make sure we don't mix number with different precision\n        if (field.getRadixDigits() != d.field.getRadixDigits()) {\n            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);\n            final Dfp result = newInstance(getZero());\n            result.nans = QNAN;\n            return dotrap(DfpField.FLAG_INVALID, NEW_INSTANCE_TRAP, d, result);\n        }\n\n        return new Dfp(d);\n\n    }\n\n    /** Create an instance from a String representation.\n     * Use this internally in preference to constructors to facilitate subclasses.\n     * @param s string representation of the instance\n     * @return a new instance parsed from specified string\n     */\n    public Dfp newInstance(final String s) {\n        return new Dfp(field, s);\n    }\n\n    /** Creates an instance with a non-finite value.\n     * @param sig sign of the Dfp to create\n     * @param code code of the value, must be one of {@link #INFINITE},\n     * {@link #SNAN},  {@link #QNAN}\n     * @return a new instance with a non-finite value\n     */\n    public Dfp newInstance(final byte sig, final byte code) {\n        return field.newDfp(sig, code);\n    }\n\n    /** Get the {@link org.apache.commons.math3.Field Field} (really a {@link DfpField}) to which the instance belongs.\n     * <p>\n     * The field is linked to the number of digits and acts as a factory\n     * for {@link Dfp} instances.\n     * </p>\n     * @return {@link org.apache.commons.math3.Field Field} (really a {@link DfpField}) to which the instance belongs\n     */\n    public DfpField getField() {\n        return field;\n    }\n\n    /** Get the number of radix digits of the instance.\n     * @return number of radix digits\n     */\n    public int getRadixDigits() {\n        return field.getRadixDigits();\n    }\n\n    /** Get the constant 0.\n     * @return a Dfp with value zero\n     */\n    public Dfp getZero() {\n        return field.getZero();\n    }\n\n    /** Get the constant 1.\n     * @return a Dfp with value one\n     */\n    public Dfp getOne() {\n        return field.getOne();\n    }\n\n    /** Get the constant 2.\n     * @return a Dfp with value two\n     */\n    public Dfp getTwo() {\n        return field.getTwo();\n    }\n\n    /** Shift the mantissa left, and adjust the exponent to compensate.\n     */\n    protected void shiftLeft() {\n        for (int i = mant.length - 1; i > 0; i--) {\n            mant[i] = mant[i-1];\n        }\n        mant[0] = 0;\n        exp--;\n    }\n\n    /* Note that shiftRight() does not call round() as that round() itself\n     uses shiftRight() */\n    /** Shift the mantissa right, and adjust the exponent to compensate.\n     */\n    protected void shiftRight() {\n        for (int i = 0; i < mant.length - 1; i++) {\n            mant[i] = mant[i+1];\n        }\n        mant[mant.length - 1] = 0;\n        exp++;\n    }\n\n    /** Make our exp equal to the supplied one, this may cause rounding.\n     *  Also causes de-normalized numbers.  These numbers are generally\n     *  dangerous because most routines assume normalized numbers.\n     *  Align doesn't round, so it will return the last digit destroyed\n     *  by shifting right.\n     *  @param e desired exponent\n     *  @return last digit destroyed by shifting right\n     */\n    protected int align(int e) {\n        int lostdigit = 0;\n        boolean inexact = false;\n\n        int diff = exp - e;\n\n        int adiff = diff;\n        if (adiff < 0) {\n            adiff = -adiff;\n        }\n\n        if (diff == 0) {\n            return 0;\n        }\n\n        if (adiff > (mant.length + 1)) {\n            // Special case\n            Arrays.fill(mant, 0);\n            exp = e;\n\n            field.setIEEEFlagsBits(DfpField.FLAG_INEXACT);\n            dotrap(DfpField.FLAG_INEXACT, ALIGN_TRAP, this, this);\n\n            return 0;\n        }\n\n        for (int i = 0; i < adiff; i++) {\n            if (diff < 0) {\n                /* Keep track of loss -- only signal inexact after losing 2 digits.\n                 * the first lost digit is returned to add() and may be incorporated\n                 * into the result.\n                 */\n                if (lostdigit != 0) {\n                    inexact = true;\n                }\n\n                lostdigit = mant[0];\n\n                shiftRight();\n            } else {\n                shiftLeft();\n            }\n        }\n\n        if (inexact) {\n            field.setIEEEFlagsBits(DfpField.FLAG_INEXACT);\n            dotrap(DfpField.FLAG_INEXACT, ALIGN_TRAP, this, this);\n        }\n\n        return lostdigit;\n\n    }\n\n    /** Check if instance is less than x.\n     * @param x number to check instance against\n     * @return true if instance is less than x and neither are NaN, false otherwise\n     */\n    public boolean lessThan(final Dfp x) {\n\n        // make sure we don't mix number with different precision\n        if (field.getRadixDigits() != x.field.getRadixDigits()) {\n            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);\n            final Dfp result = newInstance(getZero());\n            result.nans = QNAN;\n            dotrap(DfpField.FLAG_INVALID, LESS_THAN_TRAP, x, result);\n            return false;\n        }\n\n        /* if a nan is involved, signal invalid and return false */\n        if (isNaN() || x.isNaN()) {\n            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);\n            dotrap(DfpField.FLAG_INVALID, LESS_THAN_TRAP, x, newInstance(getZero()));\n            return false;\n        }\n\n        return compare(this, x) < 0;\n    }\n\n    /** Check if instance is greater than x.\n     * @param x number to check instance against\n     * @return true if instance is greater than x and neither are NaN, false otherwise\n     */\n    public boolean greaterThan(final Dfp x) {\n\n        // make sure we don't mix number with different precision\n        if (field.getRadixDigits() != x.field.getRadixDigits()) {\n            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);\n            final Dfp result = newInstance(getZero());\n            result.nans = QNAN;\n            dotrap(DfpField.FLAG_INVALID, GREATER_THAN_TRAP, x, result);\n            return false;\n        }\n\n        /* if a nan is involved, signal invalid and return false */\n        if (isNaN() || x.isNaN()) {\n            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);\n            dotrap(DfpField.FLAG_INVALID, GREATER_THAN_TRAP, x, newInstance(getZero()));\n            return false;\n        }\n\n        return compare(this, x) > 0;\n    }\n\n    /** Check if instance is less than or equal to 0.\n     * @return true if instance is not NaN and less than or equal to 0, false otherwise\n     */\n    public boolean negativeOrNull() {\n\n        if (isNaN()) {\n            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);\n            dotrap(DfpField.FLAG_INVALID, LESS_THAN_TRAP, this, newInstance(getZero()));\n            return false;\n        }\n\n        return (sign < 0) || ((mant[mant.length - 1] == 0) && !isInfinite());\n\n    }\n\n    /** Check if instance is strictly less than 0.\n     * @return true if instance is not NaN and less than or equal to 0, false otherwise\n     */\n    public boolean strictlyNegative() {\n\n        if (isNaN()) {\n            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);\n            dotrap(DfpField.FLAG_INVALID, LESS_THAN_TRAP, this, newInstance(getZero()));\n            return false;\n        }\n\n        return (sign < 0) && ((mant[mant.length - 1] != 0) || isInfinite());\n\n    }\n\n    /** Check if instance is greater than or equal to 0.\n     * @return true if instance is not NaN and greater than or equal to 0, false otherwise\n     */\n    public boolean positiveOrNull() {\n\n        if (isNaN()) {\n            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);\n            dotrap(DfpField.FLAG_INVALID, LESS_THAN_TRAP, this, newInstance(getZero()));\n            return false;\n        }\n\n        return (sign > 0) || ((mant[mant.length - 1] == 0) && !isInfinite());\n\n    }\n\n    /** Check if instance is strictly greater than 0.\n     * @return true if instance is not NaN and greater than or equal to 0, false otherwise\n     */\n    public boolean strictlyPositive() {\n\n        if (isNaN()) {\n            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);\n            dotrap(DfpField.FLAG_INVALID, LESS_THAN_TRAP, this, newInstance(getZero()));\n            return false;\n        }\n\n        return (sign > 0) && ((mant[mant.length - 1] != 0) || isInfinite());\n\n    }\n\n    /** Get the absolute value of instance.\n     * @return absolute value of instance\n     * @since 3.2\n     */\n    public Dfp abs() {\n        Dfp result = newInstance(this);\n        result.sign = 1;\n        return result;\n    }\n\n    /** Check if instance is infinite.\n     * @return true if instance is infinite\n     */\n    public boolean isInfinite() {\n        return nans == INFINITE;\n    }\n\n    /** Check if instance is not a number.\n     * @return true if instance is not a number\n     */\n    public boolean isNaN() {\n        return (nans == QNAN) || (nans == SNAN);\n    }\n\n    /** Check if instance is equal to zero.\n     * @return true if instance is equal to zero\n     */\n    public boolean isZero() {\n\n        if (isNaN()) {\n            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);\n            dotrap(DfpField.FLAG_INVALID, LESS_THAN_TRAP, this, newInstance(getZero()));\n            return false;\n        }\n\n        return (mant[mant.length - 1] == 0) && !isInfinite();\n\n    }\n\n    /** Check if instance is equal to x.\n     * @param other object to check instance against\n     * @return true if instance is equal to x and neither are NaN, false otherwise\n     */\n    @Override\n    public boolean equals(final Object other) {\n\n        if (other instanceof Dfp) {\n            final Dfp x = (Dfp) other;\n            if (isNaN() || x.isNaN() || field.getRadixDigits() != x.field.getRadixDigits()) {\n                return false;\n            }\n\n            return compare(this, x) == 0;\n        }\n\n        return false;\n\n    }\n\n    /**\n     * Gets a hashCode for the instance.\n     * @return a hash code value for this object\n     */\n    @Override\n    public int hashCode() {\n        return 17 + (isZero() ? 0 : (sign << 8)) + (nans << 16) + exp + Arrays.hashCode(mant);\n    }\n\n    /** Check if instance is not equal to x.\n     * @param x number to check instance against\n     * @return true if instance is not equal to x and neither are NaN, false otherwise\n     */\n    public boolean unequal(final Dfp x) {\n        if (isNaN() || x.isNaN() || field.getRadixDigits() != x.field.getRadixDigits()) {\n            return false;\n        }\n\n        return greaterThan(x) || lessThan(x);\n    }\n\n    /** Compare two instances.\n     * @param a first instance in comparison\n     * @param b second instance in comparison\n     * @return -1 if a<b, 1 if a>b and 0 if a==b\n     *  Note this method does not properly handle NaNs or numbers with different precision.\n     */\n    private static int compare(final Dfp a, final Dfp b) {\n        // Ignore the sign of zero\n        if (a.mant[a.mant.length - 1] == 0 && b.mant[b.mant.length - 1] == 0 &&\n            a.nans == FINITE && b.nans == FINITE) {\n            return 0;\n        }\n\n        if (a.sign != b.sign) {\n            if (a.sign == -1) {\n                return -1;\n            } else {\n                return 1;\n            }\n        }\n\n        // deal with the infinities\n        if (a.nans == INFINITE && b.nans == FINITE) {\n            return a.sign;\n        }\n\n        if (a.nans == FINITE && b.nans == INFINITE) {\n            return -b.sign;\n        }\n\n        if (a.nans == INFINITE && b.nans == INFINITE) {\n            return 0;\n        }\n\n        // Handle special case when a or b is zero, by ignoring the exponents\n        if (b.mant[b.mant.length-1] != 0 && a.mant[b.mant.length-1] != 0) {\n            if (a.exp < b.exp) {\n                return -a.sign;\n            }\n\n            if (a.exp > b.exp) {\n                return a.sign;\n            }\n        }\n\n        // compare the mantissas\n        for (int i = a.mant.length - 1; i >= 0; i--) {\n            if (a.mant[i] > b.mant[i]) {\n                return a.sign;\n            }\n\n            if (a.mant[i] < b.mant[i]) {\n                return -a.sign;\n            }\n        }\n\n        return 0;\n\n    }\n\n    /** Round to nearest integer using the round-half-even method.\n     *  That is round to nearest integer unless both are equidistant.\n     *  In which case round to the even one.\n     *  @return rounded value\n     * @since 3.2\n     */\n    public Dfp rint() {\n        return trunc(DfpField.RoundingMode.ROUND_HALF_EVEN);\n    }\n\n    /** Round to an integer using the round floor mode.\n     * That is, round toward -Infinity\n     *  @return rounded value\n     * @since 3.2\n     */\n    public Dfp floor() {\n        return trunc(DfpField.RoundingMode.ROUND_FLOOR);\n    }\n\n    /** Round to an integer using the round ceil mode.\n     * That is, round toward +Infinity\n     *  @return rounded value\n     * @since 3.2\n     */\n    public Dfp ceil() {\n        return trunc(DfpField.RoundingMode.ROUND_CEIL);\n    }\n\n    /** Returns the IEEE remainder.\n     * @param d divisor\n     * @return this less n &times; d, where n is the integer closest to this/d\n     * @since 3.2\n     */\n    public Dfp remainder(final Dfp d) {\n\n        final Dfp result = this.subtract(this.divide(d).rint().multiply(d));\n\n        // IEEE 854-1987 says that if the result is zero, then it carries the sign of this\n        if (result.mant[mant.length-1] == 0) {\n            result.sign = sign;\n        }\n\n        return result;\n\n    }\n\n    /** Does the integer conversions with the specified rounding.\n     * @param rmode rounding mode to use\n     * @return truncated value\n     */\n    protected Dfp trunc(final DfpField.RoundingMode rmode) {\n        boolean changed = false;\n\n        if (isNaN()) {\n            return newInstance(this);\n        }\n\n        if (nans == INFINITE) {\n            return newInstance(this);\n        }\n\n        if (mant[mant.length-1] == 0) {\n            // a is zero\n            return newInstance(this);\n        }\n\n        /* If the exponent is less than zero then we can certainly\n         * return zero */\n        if (exp < 0) {\n            field.setIEEEFlagsBits(DfpField.FLAG_INEXACT);\n            Dfp result = newInstance(getZero());\n            result = dotrap(DfpField.FLAG_INEXACT, TRUNC_TRAP, this, result);\n            return result;\n        }\n\n        /* If the exponent is greater than or equal to digits, then it\n         * must already be an integer since there is no precision left\n         * for any fractional part */\n\n        if (exp >= mant.length) {\n            return newInstance(this);\n        }\n\n        /* General case:  create another dfp, result, that contains the\n         * a with the fractional part lopped off.  */\n\n        Dfp result = newInstance(this);\n        for (int i = 0; i < mant.length-result.exp; i++) {\n            changed |= result.mant[i] != 0;\n            result.mant[i] = 0;\n        }\n\n        if (changed) {\n            switch (rmode) {\n                case ROUND_FLOOR:\n                    if (result.sign == -1) {\n                        // then we must increment the mantissa by one\n                        result = result.add(newInstance(-1));\n                    }\n                    break;\n\n                case ROUND_CEIL:\n                    if (result.sign == 1) {\n                        // then we must increment the mantissa by one\n                        result = result.add(getOne());\n                    }\n                    break;\n\n                case ROUND_HALF_EVEN:\n                default:\n                    final Dfp half = newInstance(\"0.5\");\n                    Dfp a = subtract(result);  // difference between this and result\n                    a.sign = 1;            // force positive (take abs)\n                    if (a.greaterThan(half)) {\n                        a = newInstance(getOne());\n                        a.sign = sign;\n                        result = result.add(a);\n                    }\n\n                    /** If exactly equal to 1/2 and odd then increment */\n                    if (a.equals(half) && result.exp > 0 && (result.mant[mant.length-result.exp]&1) != 0) {\n                        a = newInstance(getOne());\n                        a.sign = sign;\n                        result = result.add(a);\n                    }\n                    break;\n            }\n\n            field.setIEEEFlagsBits(DfpField.FLAG_INEXACT);  // signal inexact\n            result = dotrap(DfpField.FLAG_INEXACT, TRUNC_TRAP, this, result);\n            return result;\n        }\n\n        return result;\n    }\n\n    /** Convert this to an integer.\n     * If greater than 2147483647, it returns 2147483647. If less than -2147483648 it returns -2147483648.\n     * @return converted number\n     */\n    public int intValue() {\n        Dfp rounded;\n        int result = 0;\n\n        rounded = rint();\n\n        if (rounded.greaterThan(newInstance(2147483647))) {\n            return 2147483647;\n        }\n\n        if (rounded.lessThan(newInstance(-2147483648))) {\n            return -2147483648;\n        }\n\n        for (int i = mant.length - 1; i >= mant.length - rounded.exp; i--) {\n            result = result * RADIX + rounded.mant[i];\n        }\n\n        if (rounded.sign == -1) {\n            result = -result;\n        }\n\n        return result;\n    }\n\n    /** Get the exponent of the greatest power of 10000 that is\n     *  less than or equal to the absolute value of this.  I.E.  if\n     *  this is 10<sup>6</sup> then log10K would return 1.\n     *  @return integer base 10000 logarithm\n     */\n    public int log10K() {\n        return exp - 1;\n    }\n\n    /** Get the specified  power of 10000.\n     * @param e desired power\n     * @return 10000<sup>e</sup>\n     */\n    public Dfp power10K(final int e) {\n        Dfp d = newInstance(getOne());\n        d.exp = e + 1;\n        return d;\n    }\n\n    /** Get the exponent of the greatest power of 10 that is less than or equal to abs(this).\n     *  @return integer base 10 logarithm\n     * @since 3.2\n     */\n    public int intLog10()  {\n        if (mant[mant.length-1] > 1000) {\n            return exp * 4 - 1;\n        }\n        if (mant[mant.length-1] > 100) {\n            return exp * 4 - 2;\n        }\n        if (mant[mant.length-1] > 10) {\n            return exp * 4 - 3;\n        }\n        return exp * 4 - 4;\n    }\n\n    /** Return the specified  power of 10.\n     * @param e desired power\n     * @return 10<sup>e</sup>\n     */\n    public Dfp power10(final int e) {\n        Dfp d = newInstance(getOne());\n\n        if (e >= 0) {\n            d.exp = e / 4 + 1;\n        } else {\n            d.exp = (e + 1) / 4;\n        }\n\n        switch ((e % 4 + 4) % 4) {\n            case 0:\n                break;\n            case 1:\n                d = d.multiply(10);\n                break;\n            case 2:\n                d = d.multiply(100);\n                break;\n            default:\n                d = d.multiply(1000);\n        }\n\n        return d;\n    }\n\n    /** Negate the mantissa of this by computing the complement.\n     *  Leaves the sign bit unchanged, used internally by add.\n     *  Denormalized numbers are handled properly here.\n     *  @param extra ???\n     *  @return ???\n     */\n    protected int complement(int extra) {\n\n        extra = RADIX-extra;\n        for (int i = 0; i < mant.length; i++) {\n            mant[i] = RADIX-mant[i]-1;\n        }\n\n        int rh = extra / RADIX;\n        extra -= rh * RADIX;\n        for (int i = 0; i < mant.length; i++) {\n            final int r = mant[i] + rh;\n            rh = r / RADIX;\n            mant[i] = r - rh * RADIX;\n        }\n\n        return extra;\n    }\n\n    /** Add x to this.\n     * @param x number to add\n     * @return sum of this and x\n     */\n    public Dfp add(final Dfp x) {\n\n        // make sure we don't mix number with different precision\n        if (field.getRadixDigits() != x.field.getRadixDigits()) {\n            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);\n            final Dfp result = newInstance(getZero());\n            result.nans = QNAN;\n            return dotrap(DfpField.FLAG_INVALID, ADD_TRAP, x, result);\n        }\n\n        /* handle special cases */\n        if (nans != FINITE || x.nans != FINITE) {\n            if (isNaN()) {\n                return this;\n            }\n\n            if (x.isNaN()) {\n                return x;\n            }\n\n            if (nans == INFINITE && x.nans == FINITE) {\n                return this;\n            }\n\n            if (x.nans == INFINITE && nans == FINITE) {\n                return x;\n            }\n\n            if (x.nans == INFINITE && nans == INFINITE && sign == x.sign) {\n                return x;\n            }\n\n            if (x.nans == INFINITE && nans == INFINITE && sign != x.sign) {\n                field.setIEEEFlagsBits(DfpField.FLAG_INVALID);\n                Dfp result = newInstance(getZero());\n                result.nans = QNAN;\n                result = dotrap(DfpField.FLAG_INVALID, ADD_TRAP, x, result);\n                return result;\n            }\n        }\n\n        /* copy this and the arg */\n        Dfp a = newInstance(this);\n        Dfp b = newInstance(x);\n\n        /* initialize the result object */\n        Dfp result = newInstance(getZero());\n\n        /* Make all numbers positive, but remember their sign */\n        final byte asign = a.sign;\n        final byte bsign = b.sign;\n\n        a.sign = 1;\n        b.sign = 1;\n\n        /* The result will be signed like the arg with greatest magnitude */\n        byte rsign = bsign;\n        if (compare(a, b) > 0) {\n            rsign = asign;\n        }\n\n        /* Handle special case when a or b is zero, by setting the exponent\n       of the zero number equal to the other one.  This avoids an alignment\n       which would cause catastropic loss of precision */\n        if (b.mant[mant.length-1] == 0) {\n            b.exp = a.exp;\n        }\n\n        if (a.mant[mant.length-1] == 0) {\n            a.exp = b.exp;\n        }\n\n        /* align number with the smaller exponent */\n        int aextradigit = 0;\n        int bextradigit = 0;\n        if (a.exp < b.exp) {\n            aextradigit = a.align(b.exp);\n        } else {\n            bextradigit = b.align(a.exp);\n        }\n\n        /* complement the smaller of the two if the signs are different */\n        if (asign != bsign) {\n            if (asign == rsign) {\n                bextradigit = b.complement(bextradigit);\n            } else {\n                aextradigit = a.complement(aextradigit);\n            }\n        }\n\n        /* add the mantissas */\n        int rh = 0; /* acts as a carry */\n        for (int i = 0; i < mant.length; i++) {\n            final int r = a.mant[i]+b.mant[i]+rh;\n            rh = r / RADIX;\n            result.mant[i] = r - rh * RADIX;\n        }\n        result.exp = a.exp;\n        result.sign = rsign;\n\n        /* handle overflow -- note, when asign!=bsign an overflow is\n         * normal and should be ignored.  */\n\n        if (rh != 0 && (asign == bsign)) {\n            final int lostdigit = result.mant[0];\n            result.shiftRight();\n            result.mant[mant.length-1] = rh;\n            final int excp = result.round(lostdigit);\n            if (excp != 0) {\n                result = dotrap(excp, ADD_TRAP, x, result);\n            }\n        }\n\n        /* normalize the result */\n        for (int i = 0; i < mant.length; i++) {\n            if (result.mant[mant.length-1] != 0) {\n                break;\n            }\n            result.shiftLeft();\n            if (i == 0) {\n                result.mant[0] = aextradigit+bextradigit;\n                aextradigit = 0;\n                bextradigit = 0;\n            }\n        }\n\n        /* result is zero if after normalization the most sig. digit is zero */\n        if (result.mant[mant.length-1] == 0) {\n            result.exp = 0;\n\n            if (asign != bsign) {\n                // Unless adding 2 negative zeros, sign is positive\n                result.sign = 1;  // Per IEEE 854-1987 Section 6.3\n            }\n        }\n\n        /* Call round to test for over/under flows */\n        final int excp = result.round(aextradigit + bextradigit);\n        if (excp != 0) {\n            result = dotrap(excp, ADD_TRAP, x, result);\n        }\n\n        return result;\n    }\n\n    /** Returns a number that is this number with the sign bit reversed.\n     * @return the opposite of this\n     */\n    public Dfp negate() {\n        Dfp result = newInstance(this);\n        result.sign = (byte) - result.sign;\n        return result;\n    }\n\n    /** Subtract x from this.\n     * @param x number to subtract\n     * @return difference of this and a\n     */\n    public Dfp subtract(final Dfp x) {\n        return add(x.negate());\n    }\n\n    /** Round this given the next digit n using the current rounding mode.\n     * @param n ???\n     * @return the IEEE flag if an exception occurred\n     */\n    protected int round(int n) {\n        boolean inc = false;\n        switch (field.getRoundingMode()) {\n            case ROUND_DOWN:\n                inc = false;\n                break;\n\n            case ROUND_UP:\n                inc = n != 0;       // round up if n!=0\n                break;\n\n            case ROUND_HALF_UP:\n                inc = n >= 5000;  // round half up\n                break;\n\n            case ROUND_HALF_DOWN:\n                inc = n > 5000;  // round half down\n                break;\n\n            case ROUND_HALF_EVEN:\n                inc = n > 5000 || (n == 5000 && (mant[0] & 1) == 1);  // round half-even\n                break;\n\n            case ROUND_HALF_ODD:\n                inc = n > 5000 || (n == 5000 && (mant[0] & 1) == 0);  // round half-odd\n                break;\n\n            case ROUND_CEIL:\n                inc = sign == 1 && n != 0;  // round ceil\n                break;\n\n            case ROUND_FLOOR:\n            default:\n                inc = sign == -1 && n != 0;  // round floor\n                break;\n        }\n\n        if (inc) {\n            // increment if necessary\n            int rh = 1;\n            for (int i = 0; i < mant.length; i++) {\n                final int r = mant[i] + rh;\n                rh = r / RADIX;\n                mant[i] = r - rh * RADIX;\n            }\n\n            if (rh != 0) {\n                shiftRight();\n                mant[mant.length-1] = rh;\n            }\n        }\n\n        // check for exceptional cases and raise signals if necessary\n        if (exp < MIN_EXP) {\n            // Gradual Underflow\n            field.setIEEEFlagsBits(DfpField.FLAG_UNDERFLOW);\n            return DfpField.FLAG_UNDERFLOW;\n        }\n\n        if (exp > MAX_EXP) {\n            // Overflow\n            field.setIEEEFlagsBits(DfpField.FLAG_OVERFLOW);\n            return DfpField.FLAG_OVERFLOW;\n        }\n\n        if (n != 0) {\n            // Inexact\n            field.setIEEEFlagsBits(DfpField.FLAG_INEXACT);\n            return DfpField.FLAG_INEXACT;\n        }\n\n        return 0;\n\n    }\n\n    /** Multiply this by x.\n     * @param x multiplicand\n     * @return product of this and x\n     */\n    public Dfp multiply(final Dfp x) {\n\n        // make sure we don't mix number with different precision\n        if (field.getRadixDigits() != x.field.getRadixDigits()) {\n            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);\n            final Dfp result = newInstance(getZero());\n            result.nans = QNAN;\n            return dotrap(DfpField.FLAG_INVALID, MULTIPLY_TRAP, x, result);\n        }\n\n        Dfp result = newInstance(getZero());\n\n        /* handle special cases */\n        if (nans != FINITE || x.nans != FINITE) {\n            if (isNaN()) {\n                return this;\n            }\n\n            if (x.isNaN()) {\n                return x;\n            }\n\n            if (nans == INFINITE && x.nans == FINITE && x.mant[mant.length-1] != 0) {\n                result = newInstance(this);\n                result.sign = (byte) (sign * x.sign);\n                return result;\n            }\n\n            if (x.nans == INFINITE && nans == FINITE && mant[mant.length-1] != 0) {\n                result = newInstance(x);\n                result.sign = (byte) (sign * x.sign);\n                return result;\n            }\n\n            if (x.nans == INFINITE && nans == INFINITE) {\n                result = newInstance(this);\n                result.sign = (byte) (sign * x.sign);\n                return result;\n            }\n\n            if ( (x.nans == INFINITE && nans == FINITE && mant[mant.length-1] == 0) ||\n                    (nans == INFINITE && x.nans == FINITE && x.mant[mant.length-1] == 0) ) {\n                field.setIEEEFlagsBits(DfpField.FLAG_INVALID);\n                result = newInstance(getZero());\n                result.nans = QNAN;\n                result = dotrap(DfpField.FLAG_INVALID, MULTIPLY_TRAP, x, result);\n                return result;\n            }\n        }\n\n        int[] product = new int[mant.length*2];  // Big enough to hold even the largest result\n\n        for (int i = 0; i < mant.length; i++) {\n            int rh = 0;  // acts as a carry\n            for (int j=0; j<mant.length; j++) {\n                int r = mant[i] * x.mant[j];    // multiply the 2 digits\n                r += product[i+j] + rh;  // add to the product digit with carry in\n\n                rh = r / RADIX;\n                product[i+j] = r - rh * RADIX;\n            }\n            product[i+mant.length] = rh;\n        }\n\n        // Find the most sig digit\n        int md = mant.length * 2 - 1;  // default, in case result is zero\n        for (int i = mant.length * 2 - 1; i >= 0; i--) {\n            if (product[i] != 0) {\n                md = i;\n                break;\n            }\n        }\n\n        // Copy the digits into the result\n        for (int i = 0; i < mant.length; i++) {\n            result.mant[mant.length - i - 1] = product[md - i];\n        }\n\n        // Fixup the exponent.\n        result.exp = exp + x.exp + md - 2 * mant.length + 1;\n        result.sign = (byte)((sign == x.sign)?1:-1);\n\n        if (result.mant[mant.length-1] == 0) {\n            // if result is zero, set exp to zero\n            result.exp = 0;\n        }\n\n        final int excp;\n        if (md > (mant.length-1)) {\n            excp = result.round(product[md-mant.length]);\n        } else {\n            excp = result.round(0); // has no effect except to check status\n        }\n\n        if (excp != 0) {\n            result = dotrap(excp, MULTIPLY_TRAP, x, result);\n        }\n\n        return result;\n\n    }\n\n    /** Multiply this by a single digit x.\n     * @param x multiplicand\n     * @return product of this and x\n     */\n    public Dfp multiply(final int x) {\n        if (x >= 0 && x < RADIX) {\n            return multiplyFast(x);\n        } else {\n            return multiply(newInstance(x));\n        }\n    }\n\n    /** Multiply this by a single digit 0&lt;=x&lt;radix.\n     * There are speed advantages in this special case.\n     * @param x multiplicand\n     * @return product of this and x\n     */\n    private Dfp multiplyFast(final int x) {\n        Dfp result = newInstance(this);\n\n        /* handle special cases */\n        if (nans != FINITE) {\n            if (isNaN()) {\n                return this;\n            }\n\n            if (nans == INFINITE && x != 0) {\n                result = newInstance(this);\n                return result;\n            }\n\n            if (nans == INFINITE && x == 0) {\n                field.setIEEEFlagsBits(DfpField.FLAG_INVALID);\n                result = newInstance(getZero());\n                result.nans = QNAN;\n                result = dotrap(DfpField.FLAG_INVALID, MULTIPLY_TRAP, newInstance(getZero()), result);\n                return result;\n            }\n        }\n\n        /* range check x */\n        if (x < 0 || x >= RADIX) {\n            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);\n            result = newInstance(getZero());\n            result.nans = QNAN;\n            result = dotrap(DfpField.FLAG_INVALID, MULTIPLY_TRAP, result, result);\n            return result;\n        }\n\n        int rh = 0;\n        for (int i = 0; i < mant.length; i++) {\n            final int r = mant[i] * x + rh;\n            rh = r / RADIX;\n            result.mant[i] = r - rh * RADIX;\n        }\n\n        int lostdigit = 0;\n        if (rh != 0) {\n            lostdigit = result.mant[0];\n            result.shiftRight();\n            result.mant[mant.length-1] = rh;\n        }\n\n        if (result.mant[mant.length-1] == 0) { // if result is zero, set exp to zero\n            result.exp = 0;\n        }\n\n        final int excp = result.round(lostdigit);\n        if (excp != 0) {\n            result = dotrap(excp, MULTIPLY_TRAP, result, result);\n        }\n\n        return result;\n    }\n\n    /** Divide this by divisor.\n     * @param divisor divisor\n     * @return quotient of this by divisor\n     */\n    public Dfp divide(Dfp divisor) {\n        int dividend[]; // current status of the dividend\n        int quotient[]; // quotient\n        int remainder[];// remainder\n        int qd;         // current quotient digit we're working with\n        int nsqd;       // number of significant quotient digits we have\n        int trial=0;    // trial quotient digit\n        int minadj;     // minimum adjustment\n        boolean trialgood; // Flag to indicate a good trail digit\n        int md=0;       // most sig digit in result\n        int excp;       // exceptions\n\n        // make sure we don't mix number with different precision\n        if (field.getRadixDigits() != divisor.field.getRadixDigits()) {\n            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);\n            final Dfp result = newInstance(getZero());\n            result.nans = QNAN;\n            return dotrap(DfpField.FLAG_INVALID, DIVIDE_TRAP, divisor, result);\n        }\n\n        Dfp result = newInstance(getZero());\n\n        /* handle special cases */\n        if (nans != FINITE || divisor.nans != FINITE) {\n            if (isNaN()) {\n                return this;\n            }\n\n            if (divisor.isNaN()) {\n                return divisor;\n            }\n\n            if (nans == INFINITE && divisor.nans == FINITE) {\n                result = newInstance(this);\n                result.sign = (byte) (sign * divisor.sign);\n                return result;\n            }\n\n            if (divisor.nans == INFINITE && nans == FINITE) {\n                result = newInstance(getZero());\n                result.sign = (byte) (sign * divisor.sign);\n                return result;\n            }\n\n            if (divisor.nans == INFINITE && nans == INFINITE) {\n                field.setIEEEFlagsBits(DfpField.FLAG_INVALID);\n                result = newInstance(getZero());\n                result.nans = QNAN;\n                result = dotrap(DfpField.FLAG_INVALID, DIVIDE_TRAP, divisor, result);\n                return result;\n            }\n        }\n\n        /* Test for divide by zero */\n        if (divisor.mant[mant.length-1] == 0) {\n            field.setIEEEFlagsBits(DfpField.FLAG_DIV_ZERO);\n            result = newInstance(getZero());\n            result.sign = (byte) (sign * divisor.sign);\n            result.nans = INFINITE;\n            result = dotrap(DfpField.FLAG_DIV_ZERO, DIVIDE_TRAP, divisor, result);\n            return result;\n        }\n\n        dividend = new int[mant.length+1];  // one extra digit needed\n        quotient = new int[mant.length+2];  // two extra digits needed 1 for overflow, 1 for rounding\n        remainder = new int[mant.length+1]; // one extra digit needed\n\n        /* Initialize our most significant digits to zero */\n\n        dividend[mant.length] = 0;\n        quotient[mant.length] = 0;\n        quotient[mant.length+1] = 0;\n        remainder[mant.length] = 0;\n\n        /* copy our mantissa into the dividend, initialize the\n       quotient while we are at it */\n\n        for (int i = 0; i < mant.length; i++) {\n            dividend[i] = mant[i];\n            quotient[i] = 0;\n            remainder[i] = 0;\n        }\n\n        /* outer loop.  Once per quotient digit */\n        nsqd = 0;\n        for (qd = mant.length+1; qd >= 0; qd--) {\n            /* Determine outer limits of our quotient digit */\n\n            // r =  most sig 2 digits of dividend\n            final int divMsb = dividend[mant.length]*RADIX+dividend[mant.length-1];\n            int min = divMsb       / (divisor.mant[mant.length-1]+1);\n            int max = (divMsb + 1) / divisor.mant[mant.length-1];\n\n            trialgood = false;\n            while (!trialgood) {\n                // try the mean\n                trial = (min+max)/2;\n\n                /* Multiply by divisor and store as remainder */\n                int rh = 0;\n                for (int i = 0; i < mant.length + 1; i++) {\n                    int dm = (i<mant.length)?divisor.mant[i]:0;\n                    final int r = (dm * trial) + rh;\n                    rh = r / RADIX;\n                    remainder[i] = r - rh * RADIX;\n                }\n\n                /* subtract the remainder from the dividend */\n                rh = 1;  // carry in to aid the subtraction\n                for (int i = 0; i < mant.length + 1; i++) {\n                    final int r = ((RADIX-1) - remainder[i]) + dividend[i] + rh;\n                    rh = r / RADIX;\n                    remainder[i] = r - rh * RADIX;\n                }\n\n                /* Lets analyze what we have here */\n                if (rh == 0) {\n                    // trial is too big -- negative remainder\n                    max = trial-1;\n                    continue;\n                }\n\n                /* find out how far off the remainder is telling us we are */\n                minadj = (remainder[mant.length] * RADIX)+remainder[mant.length-1];\n                minadj /= divisor.mant[mant.length-1] + 1;\n\n                if (minadj >= 2) {\n                    min = trial+minadj;  // update the minimum\n                    continue;\n                }\n\n                /* May have a good one here, check more thoroughly.  Basically\n           its a good one if it is less than the divisor */\n                trialgood = false;  // assume false\n                for (int i = mant.length - 1; i >= 0; i--) {\n                    if (divisor.mant[i] > remainder[i]) {\n                        trialgood = true;\n                    }\n                    if (divisor.mant[i] < remainder[i]) {\n                        break;\n                    }\n                }\n\n                if (remainder[mant.length] != 0) {\n                    trialgood = false;\n                }\n\n                if (trialgood == false) {\n                    min = trial+1;\n                }\n            }\n\n            /* Great we have a digit! */\n            quotient[qd] = trial;\n            if (trial != 0 || nsqd != 0) {\n                nsqd++;\n            }\n\n            if (field.getRoundingMode() == DfpField.RoundingMode.ROUND_DOWN && nsqd == mant.length) {\n                // We have enough for this mode\n                break;\n            }\n\n            if (nsqd > mant.length) {\n                // We have enough digits\n                break;\n            }\n\n            /* move the remainder into the dividend while left shifting */\n            dividend[0] = 0;\n            for (int i = 0; i < mant.length; i++) {\n                dividend[i + 1] = remainder[i];\n            }\n        }\n\n        /* Find the most sig digit */\n        md = mant.length;  // default\n        for (int i = mant.length + 1; i >= 0; i--) {\n            if (quotient[i] != 0) {\n                md = i;\n                break;\n            }\n        }\n\n        /* Copy the digits into the result */\n        for (int i=0; i<mant.length; i++) {\n            result.mant[mant.length-i-1] = quotient[md-i];\n        }\n\n        /* Fixup the exponent. */\n        result.exp = exp - divisor.exp + md - mant.length;\n        result.sign = (byte) ((sign == divisor.sign) ? 1 : -1);\n\n        if (result.mant[mant.length-1] == 0) { // if result is zero, set exp to zero\n            result.exp = 0;\n        }\n\n        if (md > (mant.length-1)) {\n            excp = result.round(quotient[md-mant.length]);\n        } else {\n            excp = result.round(0);\n        }\n\n        if (excp != 0) {\n            result = dotrap(excp, DIVIDE_TRAP, divisor, result);\n        }\n\n        return result;\n    }\n\n    /** Divide by a single digit less than radix.\n     *  Special case, so there are speed advantages. 0 &lt;= divisor &lt; radix\n     * @param divisor divisor\n     * @return quotient of this by divisor\n     */\n    public Dfp divide(int divisor) {\n\n        // Handle special cases\n        if (nans != FINITE) {\n            if (isNaN()) {\n                return this;\n            }\n\n            if (nans == INFINITE) {\n                return newInstance(this);\n            }\n        }\n\n        // Test for divide by zero\n        if (divisor == 0) {\n            field.setIEEEFlagsBits(DfpField.FLAG_DIV_ZERO);\n            Dfp result = newInstance(getZero());\n            result.sign = sign;\n            result.nans = INFINITE;\n            result = dotrap(DfpField.FLAG_DIV_ZERO, DIVIDE_TRAP, getZero(), result);\n            return result;\n        }\n\n        // range check divisor\n        if (divisor < 0 || divisor >= RADIX) {\n            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);\n            Dfp result = newInstance(getZero());\n            result.nans = QNAN;\n            result = dotrap(DfpField.FLAG_INVALID, DIVIDE_TRAP, result, result);\n            return result;\n        }\n\n        Dfp result = newInstance(this);\n\n        int rl = 0;\n        for (int i = mant.length-1; i >= 0; i--) {\n            final int r = rl*RADIX + result.mant[i];\n            final int rh = r / divisor;\n            rl = r - rh * divisor;\n            result.mant[i] = rh;\n        }\n\n        if (result.mant[mant.length-1] == 0) {\n            // normalize\n            result.shiftLeft();\n            final int r = rl * RADIX;        // compute the next digit and put it in\n            final int rh = r / divisor;\n            rl = r - rh * divisor;\n            result.mant[0] = rh;\n        }\n\n        final int excp = result.round(rl * RADIX / divisor);  // do the rounding\n        if (excp != 0) {\n            result = dotrap(excp, DIVIDE_TRAP, result, result);\n        }\n\n        return result;\n\n    }\n\n    /** {@inheritDoc} */\n    public Dfp reciprocal() {\n        return field.getOne().divide(this);\n    }\n\n    /** Compute the square root.\n     * @return square root of the instance\n     * @since 3.2\n     */\n    public Dfp sqrt() {\n\n        // check for unusual cases\n        if (nans == FINITE && mant[mant.length-1] == 0) {\n            // if zero\n            return newInstance(this);\n        }\n\n        if (nans != FINITE) {\n            if (nans == INFINITE && sign == 1) {\n                // if positive infinity\n                return newInstance(this);\n            }\n\n            if (nans == QNAN) {\n                return newInstance(this);\n            }\n\n            if (nans == SNAN) {\n                Dfp result;\n\n                field.setIEEEFlagsBits(DfpField.FLAG_INVALID);\n                result = newInstance(this);\n                result = dotrap(DfpField.FLAG_INVALID, SQRT_TRAP, null, result);\n                return result;\n            }\n        }\n\n        if (sign == -1) {\n            // if negative\n            Dfp result;\n\n            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);\n            result = newInstance(this);\n            result.nans = QNAN;\n            result = dotrap(DfpField.FLAG_INVALID, SQRT_TRAP, null, result);\n            return result;\n        }\n\n        Dfp x = newInstance(this);\n\n        /* Lets make a reasonable guess as to the size of the square root */\n        if (x.exp < -1 || x.exp > 1) {\n            x.exp = this.exp / 2;\n        }\n\n        /* Coarsely estimate the mantissa */\n        switch (x.mant[mant.length-1] / 2000) {\n            case 0:\n                x.mant[mant.length-1] = x.mant[mant.length-1]/2+1;\n                break;\n            case 2:\n                x.mant[mant.length-1] = 1500;\n                break;\n            case 3:\n                x.mant[mant.length-1] = 2200;\n                break;\n            default:\n                x.mant[mant.length-1] = 3000;\n        }\n\n        Dfp dx = newInstance(x);\n\n        /* Now that we have the first pass estimate, compute the rest\n       by the formula dx = (y - x*x) / (2x); */\n\n        Dfp px  = getZero();\n        Dfp ppx = getZero();\n        while (x.unequal(px)) {\n            dx = newInstance(x);\n            dx.sign = -1;\n            dx = dx.add(this.divide(x));\n            dx = dx.divide(2);\n            ppx = px;\n            px = x;\n            x = x.add(dx);\n\n            if (x.equals(ppx)) {\n                // alternating between two values\n                break;\n            }\n\n            // if dx is zero, break.  Note testing the most sig digit\n            // is a sufficient test since dx is normalized\n            if (dx.mant[mant.length-1] == 0) {\n                break;\n            }\n        }\n\n        return x;\n\n    }\n\n    /** Get a string representation of the instance.\n     * @return string representation of the instance\n     */\n    @Override\n    public String toString() {\n        if (nans != FINITE) {\n            // if non-finite exceptional cases\n            if (nans == INFINITE) {\n                return (sign < 0) ? NEG_INFINITY_STRING : POS_INFINITY_STRING;\n            } else {\n                return NAN_STRING;\n            }\n        }\n\n        if (exp > mant.length || exp < -1) {\n            return dfp2sci();\n        }\n\n        return dfp2string();\n\n    }\n\n    /** Convert an instance to a string using scientific notation.\n     * @return string representation of the instance in scientific notation\n     */\n    protected String dfp2sci() {\n        char rawdigits[]    = new char[mant.length * 4];\n        char outputbuffer[] = new char[mant.length * 4 + 20];\n        int p;\n        int q;\n        int e;\n        int ae;\n        int shf;\n\n        // Get all the digits\n        p = 0;\n        for (int i = mant.length - 1; i >= 0; i--) {\n            rawdigits[p++] = (char) ((mant[i] / 1000) + '0');\n            rawdigits[p++] = (char) (((mant[i] / 100) %10) + '0');\n            rawdigits[p++] = (char) (((mant[i] / 10) % 10) + '0');\n            rawdigits[p++] = (char) (((mant[i]) % 10) + '0');\n        }\n\n        // Find the first non-zero one\n        for (p = 0; p < rawdigits.length; p++) {\n            if (rawdigits[p] != '0') {\n                break;\n            }\n        }\n        shf = p;\n\n        // Now do the conversion\n        q = 0;\n        if (sign == -1) {\n            outputbuffer[q++] = '-';\n        }\n\n        if (p != rawdigits.length) {\n            // there are non zero digits...\n            outputbuffer[q++] = rawdigits[p++];\n            outputbuffer[q++] = '.';\n\n            while (p<rawdigits.length) {\n                outputbuffer[q++] = rawdigits[p++];\n            }\n        } else {\n            outputbuffer[q++] = '0';\n            outputbuffer[q++] = '.';\n            outputbuffer[q++] = '0';\n            outputbuffer[q++] = 'e';\n            outputbuffer[q++] = '0';\n            return new String(outputbuffer, 0, 5);\n        }\n\n        outputbuffer[q++] = 'e';\n\n        // Find the msd of the exponent\n\n        e = exp * 4 - shf - 1;\n        ae = e;\n        if (e < 0) {\n            ae = -e;\n        }\n\n        // Find the largest p such that p < e\n        for (p = 1000000000; p > ae; p /= 10) {\n            // nothing to do\n        }\n\n        if (e < 0) {\n            outputbuffer[q++] = '-';\n        }\n\n        while (p > 0) {\n            outputbuffer[q++] = (char)(ae / p + '0');\n            ae %= p;\n            p /= 10;\n        }\n\n        return new String(outputbuffer, 0, q);\n\n    }\n\n    /** Convert an instance to a string using normal notation.\n     * @return string representation of the instance in normal notation\n     */\n    protected String dfp2string() {\n        char buffer[] = new char[mant.length*4 + 20];\n        int p = 1;\n        int q;\n        int e = exp;\n        boolean pointInserted = false;\n\n        buffer[0] = ' ';\n\n        if (e <= 0) {\n            buffer[p++] = '0';\n            buffer[p++] = '.';\n            pointInserted = true;\n        }\n\n        while (e < 0) {\n            buffer[p++] = '0';\n            buffer[p++] = '0';\n            buffer[p++] = '0';\n            buffer[p++] = '0';\n            e++;\n        }\n\n        for (int i = mant.length - 1; i >= 0; i--) {\n            buffer[p++] = (char) ((mant[i] / 1000) + '0');\n            buffer[p++] = (char) (((mant[i] / 100) % 10) + '0');\n            buffer[p++] = (char) (((mant[i] / 10) % 10) + '0');\n            buffer[p++] = (char) (((mant[i]) % 10) + '0');\n            if (--e == 0) {\n                buffer[p++] = '.';\n                pointInserted = true;\n            }\n        }\n\n        while (e > 0) {\n            buffer[p++] = '0';\n            buffer[p++] = '0';\n            buffer[p++] = '0';\n            buffer[p++] = '0';\n            e--;\n        }\n\n        if (!pointInserted) {\n            // Ensure we have a radix point!\n            buffer[p++] = '.';\n        }\n\n        // Suppress leading zeros\n        q = 1;\n        while (buffer[q] == '0') {\n            q++;\n        }\n        if (buffer[q] == '.') {\n            q--;\n        }\n\n        // Suppress trailing zeros\n        while (buffer[p-1] == '0') {\n            p--;\n        }\n\n        // Insert sign\n        if (sign < 0) {\n            buffer[--q] = '-';\n        }\n\n        return new String(buffer, q, p - q);\n\n    }\n\n    /** Raises a trap.  This does not set the corresponding flag however.\n     *  @param type the trap type\n     *  @param what - name of routine trap occurred in\n     *  @param oper - input operator to function\n     *  @param result - the result computed prior to the trap\n     *  @return The suggested return value from the trap handler\n     */\n    public Dfp dotrap(int type, String what, Dfp oper, Dfp result) {\n        Dfp def = result;\n\n        switch (type) {\n            case DfpField.FLAG_INVALID:\n                def = newInstance(getZero());\n                def.sign = result.sign;\n                def.nans = QNAN;\n                break;\n\n            case DfpField.FLAG_DIV_ZERO:\n                if (nans == FINITE && mant[mant.length-1] != 0) {\n                    // normal case, we are finite, non-zero\n                    def = newInstance(getZero());\n                    def.sign = (byte)(sign*oper.sign);\n                    def.nans = INFINITE;\n                }\n\n                if (nans == FINITE && mant[mant.length-1] == 0) {\n                    //  0/0\n                    def = newInstance(getZero());\n                    def.nans = QNAN;\n                }\n\n                if (nans == INFINITE || nans == QNAN) {\n                    def = newInstance(getZero());\n                    def.nans = QNAN;\n                }\n\n                if (nans == INFINITE || nans == SNAN) {\n                    def = newInstance(getZero());\n                    def.nans = QNAN;\n                }\n                break;\n\n            case DfpField.FLAG_UNDERFLOW:\n                if ( (result.exp+mant.length) < MIN_EXP) {\n                    def = newInstance(getZero());\n                    def.sign = result.sign;\n                } else {\n                    def = newInstance(result);  // gradual underflow\n                }\n                result.exp += ERR_SCALE;\n                break;\n\n            case DfpField.FLAG_OVERFLOW:\n                result.exp -= ERR_SCALE;\n                def = newInstance(getZero());\n                def.sign = result.sign;\n                def.nans = INFINITE;\n                break;\n\n            default: def = result; break;\n        }\n\n        return trap(type, what, oper, def, result);\n\n    }\n\n    /** Trap handler.  Subclasses may override this to provide trap\n     *  functionality per IEEE 854-1987.\n     *\n     *  @param type  The exception type - e.g. FLAG_OVERFLOW\n     *  @param what  The name of the routine we were in e.g. divide()\n     *  @param oper  An operand to this function if any\n     *  @param def   The default return value if trap not enabled\n     *  @param result    The result that is specified to be delivered per\n     *                   IEEE 854, if any\n     *  @return the value that should be return by the operation triggering the trap\n     */\n    protected Dfp trap(int type, String what, Dfp oper, Dfp def, Dfp result) {\n        return def;\n    }\n\n    /** Returns the type - one of FINITE, INFINITE, SNAN, QNAN.\n     * @return type of the number\n     */\n    public int classify() {\n        return nans;\n    }\n\n    /** Creates an instance that is the same as x except that it has the sign of y.\n     * abs(x) = dfp.copysign(x, dfp.one)\n     * @param x number to get the value from\n     * @param y number to get the sign from\n     * @return a number with the value of x and the sign of y\n     */\n    public static Dfp copysign(final Dfp x, final Dfp y) {\n        Dfp result = x.newInstance(x);\n        result.sign = y.sign;\n        return result;\n    }\n\n    /** Returns the next number greater than this one in the direction of x.\n     * If this==x then simply returns this.\n     * @param x direction where to look at\n     * @return closest number next to instance in the direction of x\n     */\n    public Dfp nextAfter(final Dfp x) {\n\n        // make sure we don't mix number with different precision\n        if (field.getRadixDigits() != x.field.getRadixDigits()) {\n            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);\n            final Dfp result = newInstance(getZero());\n            result.nans = QNAN;\n            return dotrap(DfpField.FLAG_INVALID, NEXT_AFTER_TRAP, x, result);\n        }\n\n        // if this is greater than x\n        boolean up = false;\n        if (this.lessThan(x)) {\n            up = true;\n        }\n\n        if (compare(this, x) == 0) {\n            return newInstance(x);\n        }\n\n        if (lessThan(getZero())) {\n            up = !up;\n        }\n\n        final Dfp inc;\n        Dfp result;\n        if (up) {\n            inc = newInstance(getOne());\n            inc.exp = this.exp-mant.length+1;\n            inc.sign = this.sign;\n\n            if (this.equals(getZero())) {\n                inc.exp = MIN_EXP-mant.length;\n            }\n\n            result = add(inc);\n        } else {\n            inc = newInstance(getOne());\n            inc.exp = this.exp;\n            inc.sign = this.sign;\n\n            if (this.equals(inc)) {\n                inc.exp = this.exp-mant.length;\n            } else {\n                inc.exp = this.exp-mant.length+1;\n            }\n\n            if (this.equals(getZero())) {\n                inc.exp = MIN_EXP-mant.length;\n            }\n\n            result = this.subtract(inc);\n        }\n\n        if (result.classify() == INFINITE && this.classify() != INFINITE) {\n            field.setIEEEFlagsBits(DfpField.FLAG_INEXACT);\n            result = dotrap(DfpField.FLAG_INEXACT, NEXT_AFTER_TRAP, x, result);\n        }\n\n        if (result.equals(getZero()) && this.equals(getZero()) == false) {\n            field.setIEEEFlagsBits(DfpField.FLAG_INEXACT);\n            result = dotrap(DfpField.FLAG_INEXACT, NEXT_AFTER_TRAP, x, result);\n        }\n\n        return result;\n\n    }\n\n    /** Convert the instance into a double.\n     * @return a double approximating the instance\n     * @see #toSplitDouble()\n     */\n    public double toDouble() {\n\n        if (isInfinite()) {\n            if (lessThan(getZero())) {\n                return Double.NEGATIVE_INFINITY;\n            } else {\n                return Double.POSITIVE_INFINITY;\n            }\n        }\n\n        if (isNaN()) {\n            return Double.NaN;\n        }\n\n        Dfp y = this;\n        boolean negate = false;\n        int cmp0 = compare(this, getZero());\n        if (cmp0 == 0) {\n            return sign < 0 ? -0.0 : +0.0;\n        } else if (cmp0 < 0) {\n            y = negate();\n            negate = true;\n        }\n\n        /* Find the exponent, first estimate by integer log10, then adjust.\n         Should be faster than doing a natural logarithm.  */\n        int exponent = (int)(y.intLog10() * 3.32);\n        if (exponent < 0) {\n            exponent--;\n        }\n\n        Dfp tempDfp = DfpMath.pow(getTwo(), exponent);\n        while (tempDfp.lessThan(y) || tempDfp.equals(y)) {\n            tempDfp = tempDfp.multiply(2);\n            exponent++;\n        }\n        exponent--;\n\n        /* We have the exponent, now work on the mantissa */\n\n        y = y.divide(DfpMath.pow(getTwo(), exponent));\n        if (exponent > -1023) {\n            y = y.subtract(getOne());\n        }\n\n        if (exponent < -1074) {\n            return 0;\n        }\n\n        if (exponent > 1023) {\n            return negate ? Double.NEGATIVE_INFINITY : Double.POSITIVE_INFINITY;\n        }\n\n\n        y = y.multiply(newInstance(4503599627370496l)).rint();\n        String str = y.toString();\n        str = str.substring(0, str.length()-1);\n        long mantissa = Long.parseLong(str);\n\n        if (mantissa == 4503599627370496L) {\n            // Handle special case where we round up to next power of two\n            mantissa = 0;\n            exponent++;\n        }\n\n        /* Its going to be subnormal, so make adjustments */\n        if (exponent <= -1023) {\n            exponent--;\n        }\n\n        while (exponent < -1023) {\n            exponent++;\n            mantissa >>>= 1;\n        }\n\n        long bits = mantissa | ((exponent + 1023L) << 52);\n        double x = Double.longBitsToDouble(bits);\n\n        if (negate) {\n            x = -x;\n        }\n\n        return x;\n\n    }\n\n    /** Convert the instance into a split double.\n     * @return an array of two doubles which sum represent the instance\n     * @see #toDouble()\n     */\n    public double[] toSplitDouble() {\n        double split[] = new double[2];\n        long mask = 0xffffffffc0000000L;\n\n        split[0] = Double.longBitsToDouble(Double.doubleToLongBits(toDouble()) & mask);\n        split[1] = subtract(newInstance(split[0])).toDouble();\n\n        return split;\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public double getReal() {\n        return toDouble();\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp add(final double a) {\n        return add(newInstance(a));\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp subtract(final double a) {\n        return subtract(newInstance(a));\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp multiply(final double a) {\n        return multiply(newInstance(a));\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp divide(final double a) {\n        return divide(newInstance(a));\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp remainder(final double a) {\n        return remainder(newInstance(a));\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public long round() {\n        return FastMath.round(toDouble());\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp signum() {\n        if (isNaN() || isZero()) {\n            return this;\n        } else {\n            return newInstance(sign > 0 ? +1 : -1);\n        }\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp copySign(final Dfp s) {\n        if ((sign >= 0 && s.sign >= 0) || (sign < 0 && s.sign < 0)) { // Sign is currently OK\n            return this;\n        }\n        return negate(); // flip sign\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp copySign(final double s) {\n        long sb = Double.doubleToLongBits(s);\n        if ((sign >= 0 && sb >= 0) || (sign < 0 && sb < 0)) { // Sign is currently OK\n            return this;\n        }\n        return negate(); // flip sign\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp scalb(final int n) {\n        return multiply(DfpMath.pow(getTwo(), n));\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp hypot(final Dfp y) {\n        return multiply(this).add(y.multiply(y)).sqrt();\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp cbrt() {\n        return rootN(3);\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp rootN(final int n) {\n        return (sign >= 0) ?\n               DfpMath.pow(this, getOne().divide(n)) :\n               DfpMath.pow(negate(), getOne().divide(n)).negate();\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp pow(final double p) {\n        return DfpMath.pow(this, newInstance(p));\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp pow(final int n) {\n        return DfpMath.pow(this, n);\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp pow(final Dfp e) {\n        return DfpMath.pow(this, e);\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp exp() {\n        return DfpMath.exp(this);\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp expm1() {\n        return DfpMath.exp(this).subtract(getOne());\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp log() {\n        return DfpMath.log(this);\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp log1p() {\n        return DfpMath.log(this.add(getOne()));\n    }\n\n//  TODO: deactivate this implementation (and return type) in 4.0\n    /** Get the exponent of the greatest power of 10 that is less than or equal to abs(this).\n     *  @return integer base 10 logarithm\n     *  @deprecated as of 3.2, replaced by {@link #intLog10()}, in 4.0 the return type\n     *  will be changed to Dfp\n     */\n    @Deprecated\n    public int log10()  {\n        return intLog10();\n    }\n\n//    TODO: activate this implementation (and return type) in 4.0\n//    /** {@inheritDoc}\n//     * @since 3.2\n//     */\n//    public Dfp log10() {\n//        return DfpMath.log(this).divide(DfpMath.log(newInstance(10)));\n//    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp cos() {\n        return DfpMath.cos(this);\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp sin() {\n        return DfpMath.sin(this);\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp tan() {\n        return DfpMath.tan(this);\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp acos() {\n        return DfpMath.acos(this);\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp asin() {\n        return DfpMath.asin(this);\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp atan() {\n        return DfpMath.atan(this);\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp atan2(final Dfp x)\n        throws DimensionMismatchException {\n\n        // compute r = sqrt(x^2+y^2)\n        final Dfp r = x.multiply(x).add(multiply(this)).sqrt();\n\n        if (x.sign >= 0) {\n\n            // compute atan2(y, x) = 2 atan(y / (r + x))\n            return getTwo().multiply(divide(r.add(x)).atan());\n\n        } else {\n\n            // compute atan2(y, x) = +/- pi - 2 atan(y / (r - x))\n            final Dfp tmp = getTwo().multiply(divide(r.subtract(x)).atan());\n            final Dfp pmPi = newInstance((tmp.sign <= 0) ? -FastMath.PI : FastMath.PI);\n            return pmPi.subtract(tmp);\n\n        }\n\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp cosh() {\n        return DfpMath.exp(this).add(DfpMath.exp(negate())).divide(2);\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp sinh() {\n        return DfpMath.exp(this).subtract(DfpMath.exp(negate())).divide(2);\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp tanh() {\n        final Dfp ePlus  = DfpMath.exp(this);\n        final Dfp eMinus = DfpMath.exp(negate());\n        return ePlus.subtract(eMinus).divide(ePlus.add(eMinus));\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp acosh() {\n        return multiply(this).subtract(getOne()).sqrt().add(this).log();\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp asinh() {\n        return multiply(this).add(getOne()).sqrt().add(this).log();\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp atanh() {\n        return getOne().add(this).divide(getOne().subtract(this)).log().divide(2);\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp linearCombination(final Dfp[] a, final Dfp[] b)\n        throws DimensionMismatchException {\n        if (a.length != b.length) {\n            throw new DimensionMismatchException(a.length, b.length);\n        }\n        Dfp r = getZero();\n        for (int i = 0; i < a.length; ++i) {\n            r = r.add(a[i].multiply(b[i]));\n        }\n        return r;\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp linearCombination(final double[] a, final Dfp[] b)\n        throws DimensionMismatchException {\n        if (a.length != b.length) {\n            throw new DimensionMismatchException(a.length, b.length);\n        }\n        Dfp r = getZero();\n        for (int i = 0; i < a.length; ++i) {\n            r = r.add(b[i].multiply(a[i]));\n        }\n        return r;\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp linearCombination(final Dfp a1, final Dfp b1, final Dfp a2, final Dfp b2) {\n        return a1.multiply(b1).add(a2.multiply(b2));\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp linearCombination(final double a1, final Dfp b1, final double a2, final Dfp b2) {\n        return b1.multiply(a1).add(b2.multiply(a2));\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp linearCombination(final Dfp a1, final Dfp b1,\n                                 final Dfp a2, final Dfp b2,\n                                 final Dfp a3, final Dfp b3) {\n        return a1.multiply(b1).add(a2.multiply(b2)).add(a3.multiply(b3));\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp linearCombination(final double a1, final Dfp b1,\n                                 final double a2, final Dfp b2,\n                                 final double a3, final Dfp b3) {\n        return b1.multiply(a1).add(b2.multiply(a2)).add(b3.multiply(a3));\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp linearCombination(final Dfp a1, final Dfp b1, final Dfp a2, final Dfp b2,\n                                 final Dfp a3, final Dfp b3, final Dfp a4, final Dfp b4) {\n        return a1.multiply(b1).add(a2.multiply(b2)).add(a3.multiply(b3)).add(a4.multiply(b4));\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp linearCombination(final double a1, final Dfp b1, final double a2, final Dfp b2,\n                                 final double a3, final Dfp b3, final double a4, final Dfp b4) {\n        return b1.multiply(a1).add(b2.multiply(a2)).add(b3.multiply(a3)).add(b4.multiply(a4));\n    }\n\n}\n",
  "tokensGeneralGrammar" : [ "null", "true", "false", ",", ".", ":", ";", "?", "(", ")", "jdVar", "stream", "Arrays", "allMatch", "noneMatch", "anyMatch", "~", ">>", "<<", ">>>", "|", "&", "^", "+", "-", "/", "*", "%", "&&", "||", ">=", "<=", ">", "<", "==", "!=", "instanceof", "class", "methodResultID", "this" ],
  "tokensGeneralValuesGlobalDictionary" : [ [ "0", "int" ], [ "1", "int" ], [ "-1", "int" ], [ "0.0", "double" ], [ "1.0", "double" ], [ "-1.0", "double" ], [ "\"\"", "String" ], [ "\" \"", "String" ] ],
  "tokensProjectClasses" : [ [ "RealFieldElement", "org.apache.commons.math3" ], [ "Primes", "org.apache.commons.math3.primes" ], [ "SmallPrimes", "org.apache.commons.math3.primes" ], [ "PollardRho", "org.apache.commons.math3.primes" ], [ "CurveFitter", "org.apache.commons.math3.fitting" ], [ "GaussianCurveFitter", "org.apache.commons.math3.fitting" ], [ "SimpleCurveFitter", "org.apache.commons.math3.fitting" ], [ "PolynomialFitter", "org.apache.commons.math3.fitting" ], [ "HarmonicFitter", "org.apache.commons.math3.fitting" ], [ "WeightedObservedPoint", "org.apache.commons.math3.fitting" ], [ "ParameterValidator", "org.apache.commons.math3.fitting.leastsquares" ], [ "LevenbergMarquardtOptimizer", "org.apache.commons.math3.fitting.leastsquares" ], [ "EvaluationRmsChecker", "org.apache.commons.math3.fitting.leastsquares" ], [ "OptimumImpl", "org.apache.commons.math3.fitting.leastsquares" ], [ "LeastSquaresAdapter", "org.apache.commons.math3.fitting.leastsquares" ], [ "DenseWeightedEvaluation", "org.apache.commons.math3.fitting.leastsquares" ], [ "LeastSquaresOptimizer", "org.apache.commons.math3.fitting.leastsquares" ], [ "AbstractEvaluation", "org.apache.commons.math3.fitting.leastsquares" ], [ "GaussNewtonOptimizer", "org.apache.commons.math3.fitting.leastsquares" ], [ "LeastSquaresFactory", "org.apache.commons.math3.fitting.leastsquares" ], [ "ValueAndJacobianFunction", "org.apache.commons.math3.fitting.leastsquares" ], [ "MultivariateJacobianFunction", "org.apache.commons.math3.fitting.leastsquares" ], [ "LeastSquaresBuilder", "org.apache.commons.math3.fitting.leastsquares" ], [ "LeastSquaresProblem", "org.apache.commons.math3.fitting.leastsquares" ], [ "WeightedObservedPoints", "org.apache.commons.math3.fitting" ], [ "GaussianFitter", "org.apache.commons.math3.fitting" ], [ "AbstractCurveFitter", "org.apache.commons.math3.fitting" ], [ "HarmonicCurveFitter", "org.apache.commons.math3.fitting" ], [ "PolynomialCurveFitter", "org.apache.commons.math3.fitting" ], [ "UnivariateMatrixFunction", "org.apache.commons.math3.analysis" ], [ "FunctionUtils", "org.apache.commons.math3.analysis" ], [ "DifferentiableUnivariateMatrixFunction", "org.apache.commons.math3.analysis" ], [ "IterativeLegendreGaussIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "LegendreGaussIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "MidPointIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "RombergIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "SimpsonIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "BaseRuleFactory", "org.apache.commons.math3.analysis.integration.gauss" ], [ "HermiteRuleFactory", "org.apache.commons.math3.analysis.integration.gauss" ], [ "GaussIntegratorFactory", "org.apache.commons.math3.analysis.integration.gauss" ], [ "LegendreRuleFactory", "org.apache.commons.math3.analysis.integration.gauss" ], [ "LegendreHighPrecisionRuleFactory", "org.apache.commons.math3.analysis.integration.gauss" ], [ "SymmetricGaussIntegrator", "org.apache.commons.math3.analysis.integration.gauss" ], [ "GaussIntegrator", "org.apache.commons.math3.analysis.integration.gauss" ], [ "BaseAbstractUnivariateIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "UnivariateIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "TrapezoidIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "BivariateFunction", "org.apache.commons.math3.analysis" ], [ "DifferentiableUnivariateFunction", "org.apache.commons.math3.analysis" ], [ "DifferentiableUnivariateVectorFunction", "org.apache.commons.math3.analysis" ], [ "UnivariateVectorFunction", "org.apache.commons.math3.analysis" ], [ "AbstractDifferentiableUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "AbstractUnivariateDifferentiableSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BaseUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "PegasusSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BracketedUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "UnivariateSolverUtils", "org.apache.commons.math3.analysis.solvers" ], [ "FieldBracketingNthOrderBrentSolver", "org.apache.commons.math3.analysis.solvers" ], [ "NewtonRaphsonSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BaseSecantSolver", "org.apache.commons.math3.analysis.solvers" ], [ "SecantSolver", "org.apache.commons.math3.analysis.solvers" ], [ "DifferentiableUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "UnivariateDifferentiableSolver", "org.apache.commons.math3.analysis.solvers" ], [ "MullerSolver2", "org.apache.commons.math3.analysis.solvers" ], [ "AbstractPolynomialSolver", "org.apache.commons.math3.analysis.solvers" ], [ "MullerSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BaseAbstractUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BrentSolver", "org.apache.commons.math3.analysis.solvers" ], [ "LaguerreSolver", "org.apache.commons.math3.analysis.solvers" ], [ "IllinoisSolver", "org.apache.commons.math3.analysis.solvers" ], [ "PolynomialSolver", "org.apache.commons.math3.analysis.solvers" ], [ "RegulaFalsiSolver", "org.apache.commons.math3.analysis.solvers" ], [ "AllowedSolution", "org.apache.commons.math3.analysis.solvers" ], [ "NewtonSolver", "org.apache.commons.math3.analysis.solvers" ], [ "RiddersSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BisectionSolver", "org.apache.commons.math3.analysis.solvers" ], [ "AbstractUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "UnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BracketingNthOrderBrentSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BracketedRealFieldUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "Asin", "org.apache.commons.math3.analysis.function" ], [ "Cosh", "org.apache.commons.math3.analysis.function" ], [ "Multiply", "org.apache.commons.math3.analysis.function" ], [ "Atan", "org.apache.commons.math3.analysis.function" ], [ "Asinh", "org.apache.commons.math3.analysis.function" ], [ "Rint", "org.apache.commons.math3.analysis.function" ], [ "Cos", "org.apache.commons.math3.analysis.function" ], [ "StepFunction", "org.apache.commons.math3.analysis.function" ], [ "Add", "org.apache.commons.math3.analysis.function" ], [ "Sqrt", "org.apache.commons.math3.analysis.function" ], [ "Inverse", "org.apache.commons.math3.analysis.function" ], [ "Gaussian", "org.apache.commons.math3.analysis.function" ], [ "Pow", "org.apache.commons.math3.analysis.function" ], [ "Exp", "org.apache.commons.math3.analysis.function" ], [ "Tanh", "org.apache.commons.math3.analysis.function" ], [ "Cbrt", "org.apache.commons.math3.analysis.function" ], [ "Log1p", "org.apache.commons.math3.analysis.function" ], [ "Constant", "org.apache.commons.math3.analysis.function" ], [ "Identity", "org.apache.commons.math3.analysis.function" ], [ "Signum", "org.apache.commons.math3.analysis.function" ], [ "Logit", "org.apache.commons.math3.analysis.function" ], [ "Ceil", "org.apache.commons.math3.analysis.function" ], [ "Subtract", "org.apache.commons.math3.analysis.function" ], [ "Sinh", "org.apache.commons.math3.analysis.function" ], [ "Max", "org.apache.commons.math3.analysis.function" ], [ "Acosh", "org.apache.commons.math3.analysis.function" ], [ "Min", "org.apache.commons.math3.analysis.function" ], [ "Expm1", "org.apache.commons.math3.analysis.function" ], [ "Abs", "org.apache.commons.math3.analysis.function" ], [ "Divide", "org.apache.commons.math3.analysis.function" ], [ "Log", "org.apache.commons.math3.analysis.function" ], [ "Ulp", "org.apache.commons.math3.analysis.function" ], [ "Log10", "org.apache.commons.math3.analysis.function" ], [ "Power", "org.apache.commons.math3.analysis.function" ], [ "Minus", "org.apache.commons.math3.analysis.function" ], [ "Atan2", "org.apache.commons.math3.analysis.function" ], [ "Logistic", "org.apache.commons.math3.analysis.function" ], [ "Acos", "org.apache.commons.math3.analysis.function" ], [ "Floor", "org.apache.commons.math3.analysis.function" ], [ "Sigmoid", "org.apache.commons.math3.analysis.function" ], [ "Sinc", "org.apache.commons.math3.analysis.function" ], [ "Atanh", "org.apache.commons.math3.analysis.function" ], [ "HarmonicOscillator", "org.apache.commons.math3.analysis.function" ], [ "Tan", "org.apache.commons.math3.analysis.function" ], [ "Sin", "org.apache.commons.math3.analysis.function" ], [ "MultivariateFunction", "org.apache.commons.math3.analysis" ], [ "DifferentiableMultivariateFunction", "org.apache.commons.math3.analysis" ], [ "UnivariateFunction", "org.apache.commons.math3.analysis" ], [ "TrivariateFunction", "org.apache.commons.math3.analysis" ], [ "MultivariateMatrixFunction", "org.apache.commons.math3.analysis" ], [ "ParametricUnivariateFunction", "org.apache.commons.math3.analysis" ], [ "UnivariateDifferentiableVectorFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "UnivariateDifferentiableMatrixFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "DSCompiler", "org.apache.commons.math3.analysis.differentiation" ], [ "SparseGradient", "org.apache.commons.math3.analysis.differentiation" ], [ "UnivariateFunctionDifferentiator", "org.apache.commons.math3.analysis.differentiation" ], [ "UnivariateMatrixFunctionDifferentiator", "org.apache.commons.math3.analysis.differentiation" ], [ "MultivariateDifferentiableFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "JacobianFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "GradientFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "DerivativeStructure", "org.apache.commons.math3.analysis.differentiation" ], [ "UnivariateVectorFunctionDifferentiator", "org.apache.commons.math3.analysis.differentiation" ], [ "FiniteDifferencesDifferentiator", "org.apache.commons.math3.analysis.differentiation" ], [ "MultivariateDifferentiableVectorFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "UnivariateDifferentiableFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "MultivariateVectorFunction", "org.apache.commons.math3.analysis" ], [ "DifferentiableMultivariateVectorFunction", "org.apache.commons.math3.analysis" ], [ "PolynomialFunctionNewtonForm", "org.apache.commons.math3.analysis.polynomials" ], [ "PolynomialFunctionLagrangeForm", "org.apache.commons.math3.analysis.polynomials" ], [ "PolynomialSplineFunction", "org.apache.commons.math3.analysis.polynomials" ], [ "PolynomialsUtils", "org.apache.commons.math3.analysis.polynomials" ], [ "PolynomialFunction", "org.apache.commons.math3.analysis.polynomials" ], [ "RealFieldUnivariateFunction", "org.apache.commons.math3.analysis" ], [ "TricubicInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "BicubicSplineInterpolatingFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "BicubicSplineFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "LoessInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "DividedDifferenceInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "HermiteInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "TricubicInterpolatingFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "TricubicFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "TrivariateGridInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "NevilleInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "MicrosphereProjectionInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "AkimaSplineInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "MultivariateInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "BicubicSplineInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "TricubicSplineInterpolatingFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "TricubicSplineFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "FieldHermiteInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "InterpolatingMicrosphere", "org.apache.commons.math3.analysis.interpolation" ], [ "LinearInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "BivariateGridInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "UnivariatePeriodicInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "BicubicInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "UnivariateInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "SmoothingPolynomialBicubicSplineInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "PiecewiseBicubicSplineInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "BicubicInterpolatingFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "BicubicFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "SplineInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "TricubicSplineInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "InterpolatingMicrosphere2D", "org.apache.commons.math3.analysis.interpolation" ], [ "PiecewiseBicubicSplineInterpolatingFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "MicrosphereInterpolatingFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "MicrosphereInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "Precision", "org.apache.commons.math3.util" ], [ "MultidimensionalCounter", "org.apache.commons.math3.util" ], [ "DoubleArray", "org.apache.commons.math3.util" ], [ "Incrementor", "org.apache.commons.math3.util" ], [ "OpenIntToDoubleHashMap", "org.apache.commons.math3.util" ], [ "OpenIntToFieldHashMap", "org.apache.commons.math3.util" ], [ "MathArrays", "org.apache.commons.math3.util" ], [ "Pair", "org.apache.commons.math3.util" ], [ "FastMathCalc", "org.apache.commons.math3.util" ], [ "FastMath", "org.apache.commons.math3.util" ], [ "ResizableDoubleArray", "org.apache.commons.math3.util" ], [ "BigRealField", "org.apache.commons.math3.util" ], [ "Decimal64Field", "org.apache.commons.math3.util" ], [ "Combinations", "org.apache.commons.math3.util" ], [ "MathUtils", "org.apache.commons.math3.util" ], [ "NumberTransformer", "org.apache.commons.math3.util" ], [ "ContinuedFraction", "org.apache.commons.math3.util" ], [ "RandomPivotingStrategy", "org.apache.commons.math3.util" ], [ "IterationManager", "org.apache.commons.math3.util" ], [ "CompositeFormat", "org.apache.commons.math3.util" ], [ "KthSelector", "org.apache.commons.math3.util" ], [ "IterationEvent", "org.apache.commons.math3.util" ], [ "TransformerMap", "org.apache.commons.math3.util" ], [ "IntegerSequence", "org.apache.commons.math3.util" ], [ "FastMathLiteralArrays", "org.apache.commons.math3.util" ], [ "CombinatoricsUtils", "org.apache.commons.math3.util" ], [ "IterationListener", "org.apache.commons.math3.util" ], [ "PivotingStrategyInterface", "org.apache.commons.math3.util" ], [ "CentralPivotingStrategy", "org.apache.commons.math3.util" ], [ "Decimal64", "org.apache.commons.math3.util" ], [ "DefaultTransformer", "org.apache.commons.math3.util" ], [ "BigReal", "org.apache.commons.math3.util" ], [ "ArithmeticUtils", "org.apache.commons.math3.util" ], [ "MedianOf3PivotingStrategy", "org.apache.commons.math3.util" ], [ "ComplexFormat", "org.apache.commons.math3.complex" ], [ "ComplexField", "org.apache.commons.math3.complex" ], [ "RootsOfUnity", "org.apache.commons.math3.complex" ], [ "Quaternion", "org.apache.commons.math3.complex" ], [ "Complex", "org.apache.commons.math3.complex" ], [ "ComplexUtils", "org.apache.commons.math3.complex" ], [ "DifferentiableMultivariateVectorOptimizer", "org.apache.commons.math3.optimization" ], [ "LeastSquaresConverter", "org.apache.commons.math3.optimization" ], [ "BaseMultivariateSimpleBoundsOptimizer", "org.apache.commons.math3.optimization" ], [ "PointValuePair", "org.apache.commons.math3.optimization" ], [ "DifferentiableMultivariateOptimizer", "org.apache.commons.math3.optimization" ], [ "SimpleValueChecker", "org.apache.commons.math3.optimization" ], [ "CurveFitter", "org.apache.commons.math3.optimization.fitting" ], [ "PolynomialFitter", "org.apache.commons.math3.optimization.fitting" ], [ "HarmonicFitter", "org.apache.commons.math3.optimization.fitting" ], [ "WeightedObservedPoint", "org.apache.commons.math3.optimization.fitting" ], [ "GaussianFitter", "org.apache.commons.math3.optimization.fitting" ], [ "AbstractConvergenceChecker", "org.apache.commons.math3.optimization" ], [ "AbstractSimplex", "org.apache.commons.math3.optimization.direct" ], [ "SimplexOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "BOBYQAOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "NelderMeadSimplex", "org.apache.commons.math3.optimization.direct" ], [ "MultivariateFunctionMappingAdapter", "org.apache.commons.math3.optimization.direct" ], [ "BaseAbstractMultivariateSimpleBoundsOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "BaseAbstractMultivariateVectorOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "CMAESOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "MultivariateFunctionPenaltyAdapter", "org.apache.commons.math3.optimization.direct" ], [ "BaseAbstractMultivariateOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "PowellOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "MultiDirectionalSimplex", "org.apache.commons.math3.optimization.direct" ], [ "InitialGuess", "org.apache.commons.math3.optimization" ], [ "Preconditioner", "org.apache.commons.math3.optimization.general" ], [ "LevenbergMarquardtOptimizer", "org.apache.commons.math3.optimization.general" ], [ "AbstractLeastSquaresOptimizer", "org.apache.commons.math3.optimization.general" ], [ "AbstractDifferentiableOptimizer", "org.apache.commons.math3.optimization.general" ], [ "GaussNewtonOptimizer", "org.apache.commons.math3.optimization.general" ], [ "AbstractScalarDifferentiableOptimizer", "org.apache.commons.math3.optimization.general" ], [ "NonLinearConjugateGradientOptimizer", "org.apache.commons.math3.optimization.general" ], [ "ConjugateGradientFormula", "org.apache.commons.math3.optimization.general" ], [ "BaseMultivariateVectorMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "NoFeasibleSolutionException", "org.apache.commons.math3.optimization.linear" ], [ "AbstractLinearOptimizer", "org.apache.commons.math3.optimization.linear" ], [ "LinearConstraint", "org.apache.commons.math3.optimization.linear" ], [ "SimplexSolver", "org.apache.commons.math3.optimization.linear" ], [ "LinearOptimizer", "org.apache.commons.math3.optimization.linear" ], [ "UnboundedSolutionException", "org.apache.commons.math3.optimization.linear" ], [ "SimplexTableau", "org.apache.commons.math3.optimization.linear" ], [ "LinearObjectiveFunction", "org.apache.commons.math3.optimization.linear" ], [ "Relationship", "org.apache.commons.math3.optimization.linear" ], [ "SimpleBounds", "org.apache.commons.math3.optimization" ], [ "PointVectorValuePair", "org.apache.commons.math3.optimization" ], [ "MultivariateDifferentiableVectorMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "DifferentiableMultivariateMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "SimplePointChecker", "org.apache.commons.math3.optimization" ], [ "SimpleVectorValueChecker", "org.apache.commons.math3.optimization" ], [ "BaseOptimizer", "org.apache.commons.math3.optimization" ], [ "MultivariateOptimizer", "org.apache.commons.math3.optimization" ], [ "GoalType", "org.apache.commons.math3.optimization" ], [ "BrentOptimizer", "org.apache.commons.math3.optimization.univariate" ], [ "UnivariateMultiStartOptimizer", "org.apache.commons.math3.optimization.univariate" ], [ "BaseUnivariateOptimizer", "org.apache.commons.math3.optimization.univariate" ], [ "BaseAbstractUnivariateOptimizer", "org.apache.commons.math3.optimization.univariate" ], [ "SimpleUnivariateValueChecker", "org.apache.commons.math3.optimization.univariate" ], [ "UnivariatePointValuePair", "org.apache.commons.math3.optimization.univariate" ], [ "BracketFinder", "org.apache.commons.math3.optimization.univariate" ], [ "UnivariateOptimizer", "org.apache.commons.math3.optimization.univariate" ], [ "BaseMultivariateOptimizer", "org.apache.commons.math3.optimization" ], [ "ConvergenceChecker", "org.apache.commons.math3.optimization" ], [ "BaseMultivariateMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "MultivariateDifferentiableOptimizer", "org.apache.commons.math3.optimization" ], [ "MultivariateDifferentiableVectorOptimizer", "org.apache.commons.math3.optimization" ], [ "Target", "org.apache.commons.math3.optimization" ], [ "Weight", "org.apache.commons.math3.optimization" ], [ "MultivariateMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "OptimizationData", "org.apache.commons.math3.optimization" ], [ "BaseMultivariateVectorOptimizer", "org.apache.commons.math3.optimization" ], [ "MultivariateDifferentiableMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "DifferentiableMultivariateVectorMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "NonSymmetricMatrixException", "org.apache.commons.math3.linear" ], [ "FieldVectorPreservingVisitor", "org.apache.commons.math3.linear" ], [ "FieldVector", "org.apache.commons.math3.linear" ], [ "AnyMatrix", "org.apache.commons.math3.linear" ], [ "NonSquareOperatorException", "org.apache.commons.math3.linear" ], [ "SingularValueDecomposition", "org.apache.commons.math3.linear" ], [ "EigenDecomposition", "org.apache.commons.math3.linear" ], [ "RealMatrixChangingVisitor", "org.apache.commons.math3.linear" ], [ "FieldLUDecomposition", "org.apache.commons.math3.linear" ], [ "NonPositiveDefiniteMatrixException", "org.apache.commons.math3.linear" ], [ "RealMatrixFormat", "org.apache.commons.math3.linear" ], [ "MatrixUtils", "org.apache.commons.math3.linear" ], [ "OpenMapRealVector", "org.apache.commons.math3.linear" ], [ "RealMatrixPreservingVisitor", "org.apache.commons.math3.linear" ], [ "SingularMatrixException", "org.apache.commons.math3.linear" ], [ "DefaultFieldMatrixPreservingVisitor", "org.apache.commons.math3.linear" ], [ "FieldVectorChangingVisitor", "org.apache.commons.math3.linear" ], [ "TriDiagonalTransformer", "org.apache.commons.math3.linear" ], [ "DefaultRealMatrixChangingVisitor", "org.apache.commons.math3.linear" ], [ "AbstractRealMatrix", "org.apache.commons.math3.linear" ], [ "Array2DRowRealMatrix", "org.apache.commons.math3.linear" ], [ "BlockFieldMatrix", "org.apache.commons.math3.linear" ], [ "Array2DRowFieldMatrix", "org.apache.commons.math3.linear" ], [ "FieldMatrix", "org.apache.commons.math3.linear" ], [ "IterativeLinearSolver", "org.apache.commons.math3.linear" ], [ "ArrayRealVector", "org.apache.commons.math3.linear" ], [ "MatrixDimensionMismatchException", "org.apache.commons.math3.linear" ], [ "ArrayFieldVector", "org.apache.commons.math3.linear" ], [ "DecompositionSolver", "org.apache.commons.math3.linear" ], [ "LUDecomposition", "org.apache.commons.math3.linear" ], [ "ConjugateGradient", "org.apache.commons.math3.linear" ], [ "NonPositiveDefiniteOperatorException", "org.apache.commons.math3.linear" ], [ "OpenMapRealMatrix", "org.apache.commons.math3.linear" ], [ "NonSelfAdjointOperatorException", "org.apache.commons.math3.linear" ], [ "BiDiagonalTransformer", "org.apache.commons.math3.linear" ], [ "CholeskyDecomposition", "org.apache.commons.math3.linear" ], [ "FieldDecompositionSolver", "org.apache.commons.math3.linear" ], [ "RealVectorPreservingVisitor", "org.apache.commons.math3.linear" ], [ "SingularOperatorException", "org.apache.commons.math3.linear" ], [ "BlockRealMatrix", "org.apache.commons.math3.linear" ], [ "SparseFieldMatrix", "org.apache.commons.math3.linear" ], [ "NonSquareMatrixException", "org.apache.commons.math3.linear" ], [ "SparseRealMatrix", "org.apache.commons.math3.linear" ], [ "RealVector", "org.apache.commons.math3.linear" ], [ "FieldMatrixPreservingVisitor", "org.apache.commons.math3.linear" ], [ "PreconditionedIterativeLinearSolver", "org.apache.commons.math3.linear" ], [ "QRDecomposition", "org.apache.commons.math3.linear" ], [ "SymmLQ", "org.apache.commons.math3.linear" ], [ "SparseFieldVector", "org.apache.commons.math3.linear" ], [ "RealVectorFormat", "org.apache.commons.math3.linear" ], [ "IllConditionedOperatorException", "org.apache.commons.math3.linear" ], [ "DefaultIterativeLinearSolverEvent", "org.apache.commons.math3.linear" ], [ "DefaultRealMatrixPreservingVisitor", "org.apache.commons.math3.linear" ], [ "IterativeLinearSolverEvent", "org.apache.commons.math3.linear" ], [ "DiagonalMatrix", "org.apache.commons.math3.linear" ], [ "HessenbergTransformer", "org.apache.commons.math3.linear" ], [ "RectangularCholeskyDecomposition", "org.apache.commons.math3.linear" ], [ "FieldMatrixChangingVisitor", "org.apache.commons.math3.linear" ], [ "DefaultFieldMatrixChangingVisitor", "org.apache.commons.math3.linear" ], [ "JacobiPreconditioner", "org.apache.commons.math3.linear" ], [ "RealLinearOperator", "org.apache.commons.math3.linear" ], [ "RRQRDecomposition", "org.apache.commons.math3.linear" ], [ "AbstractFieldMatrix", "org.apache.commons.math3.linear" ], [ "RealMatrix", "org.apache.commons.math3.linear" ], [ "SchurTransformer", "org.apache.commons.math3.linear" ], [ "RealVectorChangingVisitor", "org.apache.commons.math3.linear" ], [ "SparseRealVector", "org.apache.commons.math3.linear" ], [ "CauchyDistribution", "org.apache.commons.math3.distribution" ], [ "LaplaceDistribution", "org.apache.commons.math3.distribution" ], [ "AbstractRealDistribution", "org.apache.commons.math3.distribution" ], [ "HypergeometricDistribution", "org.apache.commons.math3.distribution" ], [ "TDistribution", "org.apache.commons.math3.distribution" ], [ "ChiSquaredDistribution", "org.apache.commons.math3.distribution" ], [ "TriangularDistribution", "org.apache.commons.math3.distribution" ], [ "MultivariateNormalMixtureExpectationMaximization", "org.apache.commons.math3.distribution.fitting" ], [ "BetaDistribution", "org.apache.commons.math3.distribution" ], [ "RealDistribution", "org.apache.commons.math3.distribution" ], [ "NormalDistribution", "org.apache.commons.math3.distribution" ], [ "SaddlePointExpansion", "org.apache.commons.math3.distribution" ], [ "MixtureMultivariateNormalDistribution", "org.apache.commons.math3.distribution" ], [ "UniformRealDistribution", "org.apache.commons.math3.distribution" ], [ "GumbelDistribution", "org.apache.commons.math3.distribution" ], [ "ZipfDistribution", "org.apache.commons.math3.distribution" ], [ "BinomialDistribution", "org.apache.commons.math3.distribution" ], [ "EnumeratedIntegerDistribution", "org.apache.commons.math3.distribution" ], [ "IntegerDistribution", "org.apache.commons.math3.distribution" ], [ "WeibullDistribution", "org.apache.commons.math3.distribution" ], [ "MultivariateRealDistribution", "org.apache.commons.math3.distribution" ], [ "NakagamiDistribution", "org.apache.commons.math3.distribution" ], [ "EnumeratedDistribution", "org.apache.commons.math3.distribution" ], [ "ConstantRealDistribution", "org.apache.commons.math3.distribution" ], [ "MultivariateNormalDistribution", "org.apache.commons.math3.distribution" ], [ "ExponentialDistribution", "org.apache.commons.math3.distribution" ], [ "UniformIntegerDistribution", "org.apache.commons.math3.distribution" ], [ "LogNormalDistribution", "org.apache.commons.math3.distribution" ], [ "PascalDistribution", "org.apache.commons.math3.distribution" ], [ "ParetoDistribution", "org.apache.commons.math3.distribution" ], [ "FDistribution", "org.apache.commons.math3.distribution" ], [ "GeometricDistribution", "org.apache.commons.math3.distribution" ], [ "AbstractMultivariateRealDistribution", "org.apache.commons.math3.distribution" ], [ "AbstractIntegerDistribution", "org.apache.commons.math3.distribution" ], [ "PoissonDistribution", "org.apache.commons.math3.distribution" ], [ "KolmogorovSmirnovDistribution", "org.apache.commons.math3.distribution" ], [ "MixtureMultivariateRealDistribution", "org.apache.commons.math3.distribution" ], [ "GammaDistribution", "org.apache.commons.math3.distribution" ], [ "EnumeratedRealDistribution", "org.apache.commons.math3.distribution" ], [ "LogisticDistribution", "org.apache.commons.math3.distribution" ], [ "LevyDistribution", "org.apache.commons.math3.distribution" ], [ "PointValuePair", "org.apache.commons.math3.optim" ], [ "SimpleValueChecker", "org.apache.commons.math3.optim" ], [ "AbstractConvergenceChecker", "org.apache.commons.math3.optim" ], [ "InitialGuess", "org.apache.commons.math3.optim" ], [ "MaxIter", "org.apache.commons.math3.optim" ], [ "NoFeasibleSolutionException", "org.apache.commons.math3.optim.linear" ], [ "LinearConstraintSet", "org.apache.commons.math3.optim.linear" ], [ "LinearConstraint", "org.apache.commons.math3.optim.linear" ], [ "PivotSelectionRule", "org.apache.commons.math3.optim.linear" ], [ "SimplexSolver", "org.apache.commons.math3.optim.linear" ], [ "LinearOptimizer", "org.apache.commons.math3.optim.linear" ], [ "UnboundedSolutionException", "org.apache.commons.math3.optim.linear" ], [ "SimplexTableau", "org.apache.commons.math3.optim.linear" ], [ "SolutionCallback", "org.apache.commons.math3.optim.linear" ], [ "LinearObjectiveFunction", "org.apache.commons.math3.optim.linear" ], [ "NonNegativeConstraint", "org.apache.commons.math3.optim.linear" ], [ "Relationship", "org.apache.commons.math3.optim.linear" ], [ "AbstractOptimizationProblem", "org.apache.commons.math3.optim" ], [ "SimpleBounds", "org.apache.commons.math3.optim" ], [ "PointVectorValuePair", "org.apache.commons.math3.optim" ], [ "SimplePointChecker", "org.apache.commons.math3.optim" ], [ "SimpleVectorValueChecker", "org.apache.commons.math3.optim" ], [ "BaseOptimizer", "org.apache.commons.math3.optim" ], [ "BaseMultiStartMultivariateOptimizer", "org.apache.commons.math3.optim" ], [ "MultiStartUnivariateOptimizer", "org.apache.commons.math3.optim.univariate" ], [ "BrentOptimizer", "org.apache.commons.math3.optim.univariate" ], [ "UnivariateObjectiveFunction", "org.apache.commons.math3.optim.univariate" ], [ "SimpleUnivariateValueChecker", "org.apache.commons.math3.optim.univariate" ], [ "SearchInterval", "org.apache.commons.math3.optim.univariate" ], [ "UnivariatePointValuePair", "org.apache.commons.math3.optim.univariate" ], [ "BracketFinder", "org.apache.commons.math3.optim.univariate" ], [ "UnivariateOptimizer", "org.apache.commons.math3.optim.univariate" ], [ "BaseMultivariateOptimizer", "org.apache.commons.math3.optim" ], [ "ConvergenceChecker", "org.apache.commons.math3.optim" ], [ "OptimizationProblem", "org.apache.commons.math3.optim" ], [ "MaxEval", "org.apache.commons.math3.optim" ], [ "OptimizationData", "org.apache.commons.math3.optim" ], [ "Preconditioner", "org.apache.commons.math3.optim.nonlinear.scalar.gradient" ], [ "NonLinearConjugateGradientOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar.gradient" ], [ "LeastSquaresConverter", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "GradientMultivariateOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "MultivariateFunctionMappingAdapter", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "LineSearch", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "ObjectiveFunction", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "MultivariateOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "GoalType", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "AbstractSimplex", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "SimplexOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "BOBYQAOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "NelderMeadSimplex", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "CMAESOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "PowellOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "MultiDirectionalSimplex", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "MultiStartMultivariateOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "MultivariateFunctionPenaltyAdapter", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "ObjectiveFunctionGradient", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "ModelFunction", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "LevenbergMarquardtOptimizer", "org.apache.commons.math3.optim.nonlinear.vector.jacobian" ], [ "AbstractLeastSquaresOptimizer", "org.apache.commons.math3.optim.nonlinear.vector.jacobian" ], [ "GaussNewtonOptimizer", "org.apache.commons.math3.optim.nonlinear.vector.jacobian" ], [ "ModelFunctionJacobian", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "JacobianMultivariateVectorOptimizer", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "MultivariateVectorOptimizer", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "Target", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "Weight", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "MultiStartMultivariateVectorOptimizer", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "Erf", "org.apache.commons.math3.special" ], [ "BesselJ", "org.apache.commons.math3.special" ], [ "Gamma", "org.apache.commons.math3.special" ], [ "Beta", "org.apache.commons.math3.special" ], [ "FieldODEState", "org.apache.commons.math3.ode" ], [ "FieldODEStateAndDerivative", "org.apache.commons.math3.ode" ], [ "FirstOrderFieldDifferentialEquations", "org.apache.commons.math3.ode" ], [ "MultistepFieldIntegrator", "org.apache.commons.math3.ode" ], [ "ODEIntegrator", "org.apache.commons.math3.ode" ], [ "ParameterConfiguration", "org.apache.commons.math3.ode" ], [ "ContinuousOutputFieldModel", "org.apache.commons.math3.ode" ], [ "FirstOrderConverter", "org.apache.commons.math3.ode" ], [ "ParameterJacobianProvider", "org.apache.commons.math3.ode" ], [ "SecondOrderIntegrator", "org.apache.commons.math3.ode" ], [ "AbstractFieldIntegrator", "org.apache.commons.math3.ode" ], [ "ExpandableStatefulODE", "org.apache.commons.math3.ode" ], [ "MultistepIntegrator", "org.apache.commons.math3.ode" ], [ "Parameterizable", "org.apache.commons.math3.ode" ], [ "JacobianMatrices", "org.apache.commons.math3.ode" ], [ "StepNormalizer", "org.apache.commons.math3.ode.sampling" ], [ "FixedStepHandler", "org.apache.commons.math3.ode.sampling" ], [ "StepHandler", "org.apache.commons.math3.ode.sampling" ], [ "DummyStepHandler", "org.apache.commons.math3.ode.sampling" ], [ "FieldStepInterpolator", "org.apache.commons.math3.ode.sampling" ], [ "StepInterpolator", "org.apache.commons.math3.ode.sampling" ], [ "AbstractFieldStepInterpolator", "org.apache.commons.math3.ode.sampling" ], [ "FieldFixedStepHandler", "org.apache.commons.math3.ode.sampling" ], [ "StepNormalizerMode", "org.apache.commons.math3.ode.sampling" ], [ "AbstractStepInterpolator", "org.apache.commons.math3.ode.sampling" ], [ "FieldStepHandler", "org.apache.commons.math3.ode.sampling" ], [ "StepNormalizerBounds", "org.apache.commons.math3.ode.sampling" ], [ "NordsieckStepInterpolator", "org.apache.commons.math3.ode.sampling" ], [ "FieldStepNormalizer", "org.apache.commons.math3.ode.sampling" ], [ "RungeKuttaFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "GillIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince853FieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "EmbeddedRungeKuttaFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "HighamHall54FieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince54FieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "EulerFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "EulerStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "HighamHall54Integrator", "org.apache.commons.math3.ode.nonstiff" ], [ "MidpointStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "GillStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "LutherFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "GraggBulirschStoerIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "EmbeddedRungeKuttaIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince853StepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "HighamHall54FieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince54FieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "MidpointFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "ThreeEighthesFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "ThreeEighthesIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "ClassicalRungeKuttaIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsNordsieckTransformer", "org.apache.commons.math3.ode.nonstiff" ], [ "MidpointFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "MidpointIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "RungeKuttaStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince54StepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "LutherFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince54Integrator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "GraggBulirschStoerStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "ClassicalRungeKuttaStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "LutherIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdaptiveStepsizeIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "ClassicalRungeKuttaFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "EulerIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince853FieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "FieldButcherArrayProvider", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsMoultonIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "RungeKuttaFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince853Integrator", "org.apache.commons.math3.ode.nonstiff" ], [ "ThreeEighthesStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "EulerFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsMoultonFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "LutherStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "HighamHall54StepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsNordsieckFieldTransformer", "org.apache.commons.math3.ode.nonstiff" ], [ "ThreeEighthesFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "RungeKuttaIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsBashforthFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "ClassicalRungeKuttaFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdaptiveStepsizeFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsBashforthIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "GillFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "GillFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "FieldSecondaryEquations", "org.apache.commons.math3.ode" ], [ "MainStateJacobianProvider", "org.apache.commons.math3.ode" ], [ "SecondaryEquations", "org.apache.commons.math3.ode" ], [ "FirstOrderFieldIntegrator", "org.apache.commons.math3.ode" ], [ "ParameterJacobianWrapper", "org.apache.commons.math3.ode" ], [ "FieldEquationsMapper", "org.apache.commons.math3.ode" ], [ "FieldExpandableODE", "org.apache.commons.math3.ode" ], [ "ParameterizedWrapper", "org.apache.commons.math3.ode" ], [ "AbstractIntegrator", "org.apache.commons.math3.ode" ], [ "SecondOrderDifferentialEquations", "org.apache.commons.math3.ode" ], [ "AbstractParameterizable", "org.apache.commons.math3.ode" ], [ "UnknownParameterException", "org.apache.commons.math3.ode" ], [ "ContinuousOutputModel", "org.apache.commons.math3.ode" ], [ "FirstOrderDifferentialEquations", "org.apache.commons.math3.ode" ], [ "EquationsMapper", "org.apache.commons.math3.ode" ], [ "Transformer", "org.apache.commons.math3.ode.events" ], [ "FieldEventState", "org.apache.commons.math3.ode.events" ], [ "FieldEventHandler", "org.apache.commons.math3.ode.events" ], [ "EventHandler", "org.apache.commons.math3.ode.events" ], [ "Action", "org.apache.commons.math3.ode.events" ], [ "EventState", "org.apache.commons.math3.ode.events" ], [ "EventFilter", "org.apache.commons.math3.ode.events" ], [ "FilterType", "org.apache.commons.math3.ode.events" ], [ "ParameterizedODE", "org.apache.commons.math3.ode" ], [ "FirstOrderIntegrator", "org.apache.commons.math3.ode" ], [ "NaNStrategy", "org.apache.commons.math3.stat.ranking" ], [ "NaturalRanking", "org.apache.commons.math3.stat.ranking" ], [ "TiesStrategy", "org.apache.commons.math3.stat.ranking" ], [ "RankingAlgorithm", "org.apache.commons.math3.stat.ranking" ], [ "StatUtils", "org.apache.commons.math3.stat" ], [ "IntervalUtils", "org.apache.commons.math3.stat.interval" ], [ "AgrestiCoullInterval", "org.apache.commons.math3.stat.interval" ], [ "ConfidenceInterval", "org.apache.commons.math3.stat.interval" ], [ "WilsonScoreInterval", "org.apache.commons.math3.stat.interval" ], [ "ClopperPearsonInterval", "org.apache.commons.math3.stat.interval" ], [ "NormalApproximationInterval", "org.apache.commons.math3.stat.interval" ], [ "BinomialConfidenceInterval", "org.apache.commons.math3.stat.interval" ], [ "StorelessCovariance", "org.apache.commons.math3.stat.correlation" ], [ "StorelessBivariateCovariance", "org.apache.commons.math3.stat.correlation" ], [ "KendallsCorrelation", "org.apache.commons.math3.stat.correlation" ], [ "Covariance", "org.apache.commons.math3.stat.correlation" ], [ "PearsonsCorrelation", "org.apache.commons.math3.stat.correlation" ], [ "SpearmansCorrelation", "org.apache.commons.math3.stat.correlation" ], [ "DBSCANClusterer", "org.apache.commons.math3.stat.clustering" ], [ "EuclideanIntegerPoint", "org.apache.commons.math3.stat.clustering" ], [ "Cluster", "org.apache.commons.math3.stat.clustering" ], [ "EuclideanDoublePoint", "org.apache.commons.math3.stat.clustering" ], [ "Clusterable", "org.apache.commons.math3.stat.clustering" ], [ "KMeansPlusPlusClusterer", "org.apache.commons.math3.stat.clustering" ], [ "TestUtils", "org.apache.commons.math3.stat.inference" ], [ "TTest", "org.apache.commons.math3.stat.inference" ], [ "GTest", "org.apache.commons.math3.stat.inference" ], [ "AlternativeHypothesis", "org.apache.commons.math3.stat.inference" ], [ "MannWhitneyUTest", "org.apache.commons.math3.stat.inference" ], [ "WilcoxonSignedRankTest", "org.apache.commons.math3.stat.inference" ], [ "OneWayAnova", "org.apache.commons.math3.stat.inference" ], [ "ChiSquareTest", "org.apache.commons.math3.stat.inference" ], [ "BinomialTest", "org.apache.commons.math3.stat.inference" ], [ "KolmogorovSmirnovTest", "org.apache.commons.math3.stat.inference" ], [ "AbstractUnivariateStatistic", "org.apache.commons.math3.stat.descriptive" ], [ "SummaryStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "DescriptiveStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "MultivariateSummaryStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "SecondMoment", "org.apache.commons.math3.stat.descriptive.moment" ], [ "Mean", "org.apache.commons.math3.stat.descriptive.moment" ], [ "FourthMoment", "org.apache.commons.math3.stat.descriptive.moment" ], [ "Variance", "org.apache.commons.math3.stat.descriptive.moment" ], [ "Kurtosis", "org.apache.commons.math3.stat.descriptive.moment" ], [ "GeometricMean", "org.apache.commons.math3.stat.descriptive.moment" ], [ "StandardDeviation", "org.apache.commons.math3.stat.descriptive.moment" ], [ "VectorialCovariance", "org.apache.commons.math3.stat.descriptive.moment" ], [ "ThirdMoment", "org.apache.commons.math3.stat.descriptive.moment" ], [ "SemiVariance", "org.apache.commons.math3.stat.descriptive.moment" ], [ "FirstMoment", "org.apache.commons.math3.stat.descriptive.moment" ], [ "Skewness", "org.apache.commons.math3.stat.descriptive.moment" ], [ "VectorialMean", "org.apache.commons.math3.stat.descriptive.moment" ], [ "StatisticalSummaryValues", "org.apache.commons.math3.stat.descriptive" ], [ "StatisticalSummary", "org.apache.commons.math3.stat.descriptive" ], [ "StorelessUnivariateStatistic", "org.apache.commons.math3.stat.descriptive" ], [ "StatisticalMultivariateSummary", "org.apache.commons.math3.stat.descriptive" ], [ "AggregateSummaryStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "WeightedEvaluation", "org.apache.commons.math3.stat.descriptive" ], [ "SynchronizedSummaryStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "UnivariateStatistic", "org.apache.commons.math3.stat.descriptive" ], [ "Percentile", "org.apache.commons.math3.stat.descriptive.rank" ], [ "Max", "org.apache.commons.math3.stat.descriptive.rank" ], [ "PSquarePercentile", "org.apache.commons.math3.stat.descriptive.rank" ], [ "Min", "org.apache.commons.math3.stat.descriptive.rank" ], [ "Median", "org.apache.commons.math3.stat.descriptive.rank" ], [ "SynchronizedDescriptiveStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "SynchronizedMultivariateSummaryStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "SumOfSquares", "org.apache.commons.math3.stat.descriptive.summary" ], [ "Product", "org.apache.commons.math3.stat.descriptive.summary" ], [ "Sum", "org.apache.commons.math3.stat.descriptive.summary" ], [ "SumOfLogs", "org.apache.commons.math3.stat.descriptive.summary" ], [ "AbstractStorelessUnivariateStatistic", "org.apache.commons.math3.stat.descriptive" ], [ "SimpleRegression", "org.apache.commons.math3.stat.regression" ], [ "UpdatingMultipleLinearRegression", "org.apache.commons.math3.stat.regression" ], [ "AbstractMultipleLinearRegression", "org.apache.commons.math3.stat.regression" ], [ "GLSMultipleLinearRegression", "org.apache.commons.math3.stat.regression" ], [ "ModelSpecificationException", "org.apache.commons.math3.stat.regression" ], [ "RegressionResults", "org.apache.commons.math3.stat.regression" ], [ "MillerUpdatingRegression", "org.apache.commons.math3.stat.regression" ], [ "OLSMultipleLinearRegression", "org.apache.commons.math3.stat.regression" ], [ "MultipleLinearRegression", "org.apache.commons.math3.stat.regression" ], [ "Frequency", "org.apache.commons.math3.stat" ], [ "ChebyshevDistance", "org.apache.commons.math3.ml.distance" ], [ "CanberraDistance", "org.apache.commons.math3.ml.distance" ], [ "EuclideanDistance", "org.apache.commons.math3.ml.distance" ], [ "ManhattanDistance", "org.apache.commons.math3.ml.distance" ], [ "EarthMoversDistance", "org.apache.commons.math3.ml.distance" ], [ "DistanceMeasure", "org.apache.commons.math3.ml.distance" ], [ "CentroidCluster", "org.apache.commons.math3.ml.clustering" ], [ "DBSCANClusterer", "org.apache.commons.math3.ml.clustering" ], [ "Cluster", "org.apache.commons.math3.ml.clustering" ], [ "MultiKMeansPlusPlusClusterer", "org.apache.commons.math3.ml.clustering" ], [ "Clusterable", "org.apache.commons.math3.ml.clustering" ], [ "FuzzyKMeansClusterer", "org.apache.commons.math3.ml.clustering" ], [ "KMeansPlusPlusClusterer", "org.apache.commons.math3.ml.clustering" ], [ "SumOfClusterVariances", "org.apache.commons.math3.ml.clustering.evaluation" ], [ "ClusterEvaluator", "org.apache.commons.math3.ml.clustering.evaluation" ], [ "Clusterer", "org.apache.commons.math3.ml.clustering" ], [ "DoublePoint", "org.apache.commons.math3.ml.clustering" ], [ "KohonenTrainingTask", "org.apache.commons.math3.ml.neuralnet.sofm" ], [ "KohonenUpdateAction", "org.apache.commons.math3.ml.neuralnet.sofm" ], [ "QuasiSigmoidDecayFunction", "org.apache.commons.math3.ml.neuralnet.sofm.util" ], [ "ExponentialDecayFunction", "org.apache.commons.math3.ml.neuralnet.sofm.util" ], [ "NeighbourhoodSizeFunctionFactory", "org.apache.commons.math3.ml.neuralnet.sofm" ], [ "LearningFactorFunctionFactory", "org.apache.commons.math3.ml.neuralnet.sofm" ], [ "NeighbourhoodSizeFunction", "org.apache.commons.math3.ml.neuralnet.sofm" ], [ "LearningFactorFunction", "org.apache.commons.math3.ml.neuralnet.sofm" ], [ "MapUtils", "org.apache.commons.math3.ml.neuralnet" ], [ "Network", "org.apache.commons.math3.ml.neuralnet" ], [ "FeatureInitializerFactory", "org.apache.commons.math3.ml.neuralnet" ], [ "Neuron", "org.apache.commons.math3.ml.neuralnet" ], [ "FeatureInitializer", "org.apache.commons.math3.ml.neuralnet" ], [ "NeuronString", "org.apache.commons.math3.ml.neuralnet.oned" ], [ "NeuronSquareMesh2D", "org.apache.commons.math3.ml.neuralnet.twod" ], [ "SmoothedDataHistogram", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "UnifiedDistanceMatrix", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "MapDataVisualization", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "MapVisualization", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "LocationFinder", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "HitHistogram", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "QuantizationError", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "TopographicErrorHistogram", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "SquareNeighbourhood", "org.apache.commons.math3.ml.neuralnet" ], [ "UpdateAction", "org.apache.commons.math3.ml.neuralnet" ], [ "BracketingNthOrderBrentSolverDFP", "org.apache.commons.math3.dfp" ], [ "UnivariateDfpFunction", "org.apache.commons.math3.dfp" ], [ "DfpDec", "org.apache.commons.math3.dfp" ], [ "DfpMath", "org.apache.commons.math3.dfp" ], [ "Dfp", "org.apache.commons.math3.dfp" ], [ "DfpField", "org.apache.commons.math3.dfp" ], [ "GeneticAlgorithm", "org.apache.commons.math3.genetics" ], [ "SelectionPolicy", "org.apache.commons.math3.genetics" ], [ "ListPopulation", "org.apache.commons.math3.genetics" ], [ "FixedGenerationCount", "org.apache.commons.math3.genetics" ], [ "AbstractListChromosome", "org.apache.commons.math3.genetics" ], [ "OnePointCrossover", "org.apache.commons.math3.genetics" ], [ "ElitisticListPopulation", "org.apache.commons.math3.genetics" ], [ "Chromosome", "org.apache.commons.math3.genetics" ], [ "OrderedCrossover", "org.apache.commons.math3.genetics" ], [ "InvalidRepresentationException", "org.apache.commons.math3.genetics" ], [ "RandomKey", "org.apache.commons.math3.genetics" ], [ "StoppingCondition", "org.apache.commons.math3.genetics" ], [ "PermutationChromosome", "org.apache.commons.math3.genetics" ], [ "ChromosomePair", "org.apache.commons.math3.genetics" ], [ "TournamentSelection", "org.apache.commons.math3.genetics" ], [ "NPointCrossover", "org.apache.commons.math3.genetics" ], [ "UniformCrossover", "org.apache.commons.math3.genetics" ], [ "MutationPolicy", "org.apache.commons.math3.genetics" ], [ "FixedElapsedTime", "org.apache.commons.math3.genetics" ], [ "CycleCrossover", "org.apache.commons.math3.genetics" ], [ "BinaryMutation", "org.apache.commons.math3.genetics" ], [ "BinaryChromosome", "org.apache.commons.math3.genetics" ], [ "Population", "org.apache.commons.math3.genetics" ], [ "RandomKeyMutation", "org.apache.commons.math3.genetics" ], [ "Fitness", "org.apache.commons.math3.genetics" ], [ "CrossoverPolicy", "org.apache.commons.math3.genetics" ], [ "Vector", "org.apache.commons.math3.geometry" ], [ "VectorFormat", "org.apache.commons.math3.geometry" ], [ "Point", "org.apache.commons.math3.geometry" ], [ "RotationConvention", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "SubPlane", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Vector3DFormat", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Segment", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "OutlineExtractor", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "PolyhedronsSet", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "RotationOrder", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "FieldVector3D", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Rotation", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Euclidean3D", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "SubLine", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "SphericalCoordinates", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "CardanEulerSingularityException", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "NotARotationMatrixException", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "FieldRotation", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Vector3D", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Plane", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "SphereGenerator", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Line", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "IntervalsSet", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "Interval", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "SubOrientedPoint", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "OrientedPoint", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "Euclidean1D", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "Vector1DFormat", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "Vector1D", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "Segment", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "AbstractConvexHullGenerator2D", "org.apache.commons.math3.geometry.euclidean.twod.hull" ], [ "AklToussaintHeuristic", "org.apache.commons.math3.geometry.euclidean.twod.hull" ], [ "ConvexHull2D", "org.apache.commons.math3.geometry.euclidean.twod.hull" ], [ "MonotoneChain", "org.apache.commons.math3.geometry.euclidean.twod.hull" ], [ "ConvexHullGenerator2D", "org.apache.commons.math3.geometry.euclidean.twod.hull" ], [ "Vector2DFormat", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "PolygonsSet", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "SubLine", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "DiskGenerator", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "Vector2D", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "NestedLoops", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "Euclidean2D", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "Line", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "ConvexHullGenerator", "org.apache.commons.math3.geometry.hull" ], [ "ConvexHull", "org.apache.commons.math3.geometry.hull" ], [ "ArcsSet", "org.apache.commons.math3.geometry.spherical.oned" ], [ "S1Point", "org.apache.commons.math3.geometry.spherical.oned" ], [ "Sphere1D", "org.apache.commons.math3.geometry.spherical.oned" ], [ "Arc", "org.apache.commons.math3.geometry.spherical.oned" ], [ "LimitAngle", "org.apache.commons.math3.geometry.spherical.oned" ], [ "SubLimitAngle", "org.apache.commons.math3.geometry.spherical.oned" ], [ "Sphere2D", "org.apache.commons.math3.geometry.spherical.twod" ], [ "SubCircle", "org.apache.commons.math3.geometry.spherical.twod" ], [ "Vertex", "org.apache.commons.math3.geometry.spherical.twod" ], [ "Circle", "org.apache.commons.math3.geometry.spherical.twod" ], [ "PropertiesComputer", "org.apache.commons.math3.geometry.spherical.twod" ], [ "SphericalPolygonsSet", "org.apache.commons.math3.geometry.spherical.twod" ], [ "Edge", "org.apache.commons.math3.geometry.spherical.twod" ], [ "EdgesBuilder", "org.apache.commons.math3.geometry.spherical.twod" ], [ "S2Point", "org.apache.commons.math3.geometry.spherical.twod" ], [ "SupportBallGenerator", "org.apache.commons.math3.geometry.enclosing" ], [ "EnclosingBall", "org.apache.commons.math3.geometry.enclosing" ], [ "WelzlEncloser", "org.apache.commons.math3.geometry.enclosing" ], [ "Encloser", "org.apache.commons.math3.geometry.enclosing" ], [ "InsideFinder", "org.apache.commons.math3.geometry.partitioning" ], [ "BoundaryProjection", "org.apache.commons.math3.geometry.partitioning" ], [ "BoundaryProjector", "org.apache.commons.math3.geometry.partitioning" ], [ "Region", "org.apache.commons.math3.geometry.partitioning" ], [ "Transform", "org.apache.commons.math3.geometry.partitioning" ], [ "NodesSet", "org.apache.commons.math3.geometry.partitioning" ], [ "AbstractRegion", "org.apache.commons.math3.geometry.partitioning" ], [ "Characterization", "org.apache.commons.math3.geometry.partitioning" ], [ "AbstractSubHyperplane", "org.apache.commons.math3.geometry.partitioning" ], [ "BSPTree", "org.apache.commons.math3.geometry.partitioning" ], [ "RegionFactory", "org.apache.commons.math3.geometry.partitioning" ], [ "Side", "org.apache.commons.math3.geometry.partitioning" ], [ "BoundarySizeVisitor", "org.apache.commons.math3.geometry.partitioning" ], [ "AVLTree", "org.apache.commons.math3.geometry.partitioning.utilities" ], [ "OrderedTuple", "org.apache.commons.math3.geometry.partitioning.utilities" ], [ "BSPTreeVisitor", "org.apache.commons.math3.geometry.partitioning" ], [ "Hyperplane", "org.apache.commons.math3.geometry.partitioning" ], [ "Embedding", "org.apache.commons.math3.geometry.partitioning" ], [ "BoundaryAttribute", "org.apache.commons.math3.geometry.partitioning" ], [ "SubHyperplane", "org.apache.commons.math3.geometry.partitioning" ], [ "BoundaryBuilder", "org.apache.commons.math3.geometry.partitioning" ], [ "Space", "org.apache.commons.math3.geometry" ], [ "Field", "org.apache.commons.math3" ], [ "ProcessModel", "org.apache.commons.math3.filter" ], [ "MeasurementModel", "org.apache.commons.math3.filter" ], [ "KalmanFilter", "org.apache.commons.math3.filter" ], [ "DefaultProcessModel", "org.apache.commons.math3.filter" ], [ "DefaultMeasurementModel", "org.apache.commons.math3.filter" ], [ "NormalizedRandomGenerator", "org.apache.commons.math3.random" ], [ "GaussianRandomGenerator", "org.apache.commons.math3.random" ], [ "RandomGenerator", "org.apache.commons.math3.random" ], [ "ISAACRandom", "org.apache.commons.math3.random" ], [ "CorrelatedRandomVectorGenerator", "org.apache.commons.math3.random" ], [ "Well19937a", "org.apache.commons.math3.random" ], [ "Well1024a", "org.apache.commons.math3.random" ], [ "UniformRandomGenerator", "org.apache.commons.math3.random" ], [ "Well44497a", "org.apache.commons.math3.random" ], [ "BitsStreamGenerator", "org.apache.commons.math3.random" ], [ "SynchronizedRandomGenerator", "org.apache.commons.math3.random" ], [ "UncorrelatedRandomVectorGenerator", "org.apache.commons.math3.random" ], [ "Well19937c", "org.apache.commons.math3.random" ], [ "ValueServer", "org.apache.commons.math3.random" ], [ "HaltonSequenceGenerator", "org.apache.commons.math3.random" ], [ "Well44497b", "org.apache.commons.math3.random" ], [ "RandomData", "org.apache.commons.math3.random" ], [ "RandomVectorGenerator", "org.apache.commons.math3.random" ], [ "RandomDataGenerator", "org.apache.commons.math3.random" ], [ "Well512a", "org.apache.commons.math3.random" ], [ "AbstractRandomGenerator", "org.apache.commons.math3.random" ], [ "JDKRandomGenerator", "org.apache.commons.math3.random" ], [ "StableRandomGenerator", "org.apache.commons.math3.random" ], [ "RandomAdaptor", "org.apache.commons.math3.random" ], [ "RandomGeneratorFactory", "org.apache.commons.math3.random" ], [ "AbstractWell", "org.apache.commons.math3.random" ], [ "RandomDataImpl", "org.apache.commons.math3.random" ], [ "EmpiricalDistribution", "org.apache.commons.math3.random" ], [ "SobolSequenceGenerator", "org.apache.commons.math3.random" ], [ "MersenneTwister", "org.apache.commons.math3.random" ], [ "UnitSphereRandomVectorGenerator", "org.apache.commons.math3.random" ], [ "FieldElement", "org.apache.commons.math3" ], [ "BigFractionFormat", "org.apache.commons.math3.fraction" ], [ "Fraction", "org.apache.commons.math3.fraction" ], [ "BigFraction", "org.apache.commons.math3.fraction" ], [ "AbstractFormat", "org.apache.commons.math3.fraction" ], [ "FractionFormat", "org.apache.commons.math3.fraction" ], [ "FractionField", "org.apache.commons.math3.fraction" ], [ "BigFractionField", "org.apache.commons.math3.fraction" ], [ "ProperFractionFormat", "org.apache.commons.math3.fraction" ], [ "FractionConversionException", "org.apache.commons.math3.fraction" ], [ "ProperBigFractionFormat", "org.apache.commons.math3.fraction" ], [ "NotFiniteNumberException", "org.apache.commons.math3.exception" ], [ "NoBracketingException", "org.apache.commons.math3.exception" ], [ "MathArithmeticException", "org.apache.commons.math3.exception" ], [ "InsufficientDataException", "org.apache.commons.math3.exception" ], [ "TooManyEvaluationsException", "org.apache.commons.math3.exception" ], [ "ExceptionContextProvider", "org.apache.commons.math3.exception.util" ], [ "ExceptionContext", "org.apache.commons.math3.exception.util" ], [ "ArgUtils", "org.apache.commons.math3.exception.util" ], [ "DummyLocalizable", "org.apache.commons.math3.exception.util" ], [ "Localizable", "org.apache.commons.math3.exception.util" ], [ "LocalizedFormats", "org.apache.commons.math3.exception.util" ], [ "NotANumberException", "org.apache.commons.math3.exception" ], [ "MultiDimensionMismatchException", "org.apache.commons.math3.exception" ], [ "OutOfRangeException", "org.apache.commons.math3.exception" ], [ "TooManyIterationsException", "org.apache.commons.math3.exception" ], [ "NullArgumentException", "org.apache.commons.math3.exception" ], [ "NumberIsTooLargeException", "org.apache.commons.math3.exception" ], [ "MathIllegalStateException", "org.apache.commons.math3.exception" ], [ "MathUnsupportedOperationException", "org.apache.commons.math3.exception" ], [ "NotStrictlyPositiveException", "org.apache.commons.math3.exception" ], [ "NonMonotonicSequenceException", "org.apache.commons.math3.exception" ], [ "ZeroException", "org.apache.commons.math3.exception" ], [ "MathIllegalArgumentException", "org.apache.commons.math3.exception" ], [ "DimensionMismatchException", "org.apache.commons.math3.exception" ], [ "MathRuntimeException", "org.apache.commons.math3.exception" ], [ "MathParseException", "org.apache.commons.math3.exception" ], [ "NoDataException", "org.apache.commons.math3.exception" ], [ "MathIllegalNumberException", "org.apache.commons.math3.exception" ], [ "NotPositiveException", "org.apache.commons.math3.exception" ], [ "MaxCountExceededException", "org.apache.commons.math3.exception" ], [ "NumberIsTooSmallException", "org.apache.commons.math3.exception" ], [ "ConvergenceException", "org.apache.commons.math3.exception" ], [ "MathInternalError", "org.apache.commons.math3.exception" ], [ "DftNormalization", "org.apache.commons.math3.transform" ], [ "RealTransformer", "org.apache.commons.math3.transform" ], [ "FastSineTransformer", "org.apache.commons.math3.transform" ], [ "DctNormalization", "org.apache.commons.math3.transform" ], [ "FastFourierTransformer", "org.apache.commons.math3.transform" ], [ "TransformType", "org.apache.commons.math3.transform" ], [ "FastCosineTransformer", "org.apache.commons.math3.transform" ], [ "TransformUtils", "org.apache.commons.math3.transform" ], [ "DstNormalization", "org.apache.commons.math3.transform" ], [ "FastHadamardTransformer", "org.apache.commons.math3.transform" ] ],
  "tokensProjectClassesNonPrivateStaticNonVoidMethods" : [ [ "isPrime", "org.apache.commons.math3.primes", "Primes", "public static boolean isPrime(int n)" ], [ "nextPrime", "org.apache.commons.math3.primes", "Primes", "public static int nextPrime(int n)" ], [ "primeFactors", "org.apache.commons.math3.primes", "Primes", "public static List<Integer> primeFactors(int n)" ], [ "smallTrialDivision", "org.apache.commons.math3.primes", "SmallPrimes", "public static int smallTrialDivision(int n, final List<Integer> factors)" ], [ "boundedTrialDivision", "org.apache.commons.math3.primes", "SmallPrimes", "public static int boundedTrialDivision(int n, int maxFactor, List<Integer> factors)" ], [ "trialDivision", "org.apache.commons.math3.primes", "SmallPrimes", "public static List<Integer> trialDivision(int n)" ], [ "millerRabinPrimeTest", "org.apache.commons.math3.primes", "SmallPrimes", "public static boolean millerRabinPrimeTest(final int n)" ], [ "primeFactors", "org.apache.commons.math3.primes", "PollardRho", "public static List<Integer> primeFactors(int n)" ], [ "rhoBrent", "org.apache.commons.math3.primes", "PollardRho", "static int rhoBrent(final int n)" ], [ "gcdPositive", "org.apache.commons.math3.primes", "PollardRho", "static int gcdPositive(int a, int b)" ], [ "create", "org.apache.commons.math3.fitting", "GaussianCurveFitter", "public static GaussianCurveFitter create()" ], [ "create", "org.apache.commons.math3.fitting", "SimpleCurveFitter", "public static SimpleCurveFitter create(ParametricUnivariateFunction f, double[] start)" ], [ "create", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem create(final MultivariateJacobianFunction model, final RealVector observed, final RealVector start, final RealMatrix weight, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations, final boolean lazyEvaluation, final ParameterValidator paramValidator)" ], [ "create", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem create(final MultivariateJacobianFunction model, final RealVector observed, final RealVector start, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations)" ], [ "create", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem create(final MultivariateJacobianFunction model, final RealVector observed, final RealVector start, final RealMatrix weight, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations)" ], [ "create", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem create(final MultivariateVectorFunction model, final MultivariateMatrixFunction jacobian, final double[] observed, final double[] start, final RealMatrix weight, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations)" ], [ "weightMatrix", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem weightMatrix(final LeastSquaresProblem problem, final RealMatrix weights)" ], [ "weightDiagonal", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem weightDiagonal(final LeastSquaresProblem problem, final RealVector weights)" ], [ "countEvaluations", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem countEvaluations(final LeastSquaresProblem problem, final Incrementor counter)" ], [ "evaluationChecker", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static ConvergenceChecker<Evaluation> evaluationChecker(final ConvergenceChecker<PointVectorValuePair> checker)" ], [ "model", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static MultivariateJacobianFunction model(final MultivariateVectorFunction value, final MultivariateMatrixFunction jacobian)" ], [ "create", "org.apache.commons.math3.fitting", "HarmonicCurveFitter", "public static HarmonicCurveFitter create()" ], [ "create", "org.apache.commons.math3.fitting", "PolynomialCurveFitter", "public static PolynomialCurveFitter create(int degree)" ], [ "compose", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateFunction compose(final UnivariateFunction... f)" ], [ "compose", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateDifferentiableFunction compose(final UnivariateDifferentiableFunction... f)" ], [ "compose", "org.apache.commons.math3.analysis", "FunctionUtils", "public static DifferentiableUnivariateFunction compose(final DifferentiableUnivariateFunction... f)" ], [ "add", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateFunction add(final UnivariateFunction... f)" ], [ "add", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateDifferentiableFunction add(final UnivariateDifferentiableFunction... f)" ], [ "add", "org.apache.commons.math3.analysis", "FunctionUtils", "public static DifferentiableUnivariateFunction add(final DifferentiableUnivariateFunction... f)" ], [ "multiply", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateFunction multiply(final UnivariateFunction... f)" ], [ "multiply", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateDifferentiableFunction multiply(final UnivariateDifferentiableFunction... f)" ], [ "multiply", "org.apache.commons.math3.analysis", "FunctionUtils", "public static DifferentiableUnivariateFunction multiply(final DifferentiableUnivariateFunction... f)" ], [ "combine", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateFunction combine(final BivariateFunction combiner, final UnivariateFunction f, final UnivariateFunction g)" ], [ "collector", "org.apache.commons.math3.analysis", "FunctionUtils", "public static MultivariateFunction collector(final BivariateFunction combiner, final UnivariateFunction f, final double initialValue)" ], [ "collector", "org.apache.commons.math3.analysis", "FunctionUtils", "public static MultivariateFunction collector(final BivariateFunction combiner, final double initialValue)" ], [ "fix1stArgument", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateFunction fix1stArgument(final BivariateFunction f, final double fixed)" ], [ "fix2ndArgument", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateFunction fix2ndArgument(final BivariateFunction f, final double fixed)" ], [ "sample", "org.apache.commons.math3.analysis", "FunctionUtils", "public static double[] sample(UnivariateFunction f, double min, double max, int n) throws NumberIsTooLargeException, NotStrictlyPositiveException" ], [ "toDifferentiableUnivariateFunction", "org.apache.commons.math3.analysis", "FunctionUtils", "public static DifferentiableUnivariateFunction toDifferentiableUnivariateFunction(final UnivariateDifferentiableFunction f)" ], [ "toUnivariateDifferential", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateDifferentiableFunction toUnivariateDifferential(final DifferentiableUnivariateFunction f)" ], [ "toDifferentiableMultivariateFunction", "org.apache.commons.math3.analysis", "FunctionUtils", "public static DifferentiableMultivariateFunction toDifferentiableMultivariateFunction(final MultivariateDifferentiableFunction f)" ], [ "toMultivariateDifferentiableFunction", "org.apache.commons.math3.analysis", "FunctionUtils", "public static MultivariateDifferentiableFunction toMultivariateDifferentiableFunction(final DifferentiableMultivariateFunction f)" ], [ "toDifferentiableMultivariateVectorFunction", "org.apache.commons.math3.analysis", "FunctionUtils", "public static DifferentiableMultivariateVectorFunction toDifferentiableMultivariateVectorFunction(final MultivariateDifferentiableVectorFunction f)" ], [ "toMultivariateDifferentiableVectorFunction", "org.apache.commons.math3.analysis", "FunctionUtils", "public static MultivariateDifferentiableVectorFunction toMultivariateDifferentiableVectorFunction(final DifferentiableMultivariateVectorFunction f)" ], [ "solve", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double solve(UnivariateFunction function, double x0, double x1) throws NullArgumentException, NoBracketingException" ], [ "solve", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double solve(UnivariateFunction function, double x0, double x1, double absoluteAccuracy) throws NullArgumentException, NoBracketingException" ], [ "forceSide", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double forceSide(final int maxEval, final UnivariateFunction f, final BracketedUnivariateSolver<UnivariateFunction> bracketing, final double baseRoot, final double min, final double max, final AllowedSolution allowedSolution) throws NoBracketingException" ], [ "bracket", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double[] bracket(UnivariateFunction function, double initial, double lowerBound, double upperBound) throws NullArgumentException, NotStrictlyPositiveException, NoBracketingException" ], [ "bracket", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double[] bracket(UnivariateFunction function, double initial, double lowerBound, double upperBound, int maximumIterations) throws NullArgumentException, NotStrictlyPositiveException, NoBracketingException" ], [ "bracket", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double[] bracket(final UnivariateFunction function, final double initial, final double lowerBound, final double upperBound, final double q, final double r, final int maximumIterations) throws NoBracketingException" ], [ "midpoint", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double midpoint(double a, double b)" ], [ "isBracketing", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static boolean isBracketing(UnivariateFunction function, final double lower, final double upper) throws NullArgumentException" ], [ "isSequence", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static boolean isSequence(final double start, final double mid, final double end)" ], [ "getCompiler", "org.apache.commons.math3.analysis.differentiation", "DSCompiler", "public static DSCompiler getCompiler(int parameters, int order) throws NumberIsTooLargeException" ], [ "createConstant", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public static SparseGradient createConstant(final double value)" ], [ "createVariable", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public static SparseGradient createVariable(final int idx, final double value)" ], [ "hypot", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public static SparseGradient hypot(final SparseGradient x, final SparseGradient y)" ], [ "pow", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public static SparseGradient pow(final double a, final SparseGradient x)" ], [ "atan2", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public static SparseGradient atan2(final SparseGradient y, final SparseGradient x)" ], [ "hypot", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public static DerivativeStructure hypot(final DerivativeStructure x, final DerivativeStructure y) throws DimensionMismatchException" ], [ "pow", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public static DerivativeStructure pow(final double a, final DerivativeStructure x)" ], [ "atan2", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public static DerivativeStructure atan2(final DerivativeStructure y, final DerivativeStructure x) throws DimensionMismatchException" ], [ "evaluate", "org.apache.commons.math3.analysis.polynomials", "PolynomialFunctionNewtonForm", "public static double evaluate(double[] a, double[] c, double z) throws NullArgumentException, DimensionMismatchException, NoDataException" ], [ "evaluate", "org.apache.commons.math3.analysis.polynomials", "PolynomialFunctionLagrangeForm", "public static double evaluate(double[] x, double[] y, double z) throws DimensionMismatchException, NumberIsTooSmallException, NonMonotonicSequenceException" ], [ "verifyInterpolationArray", "org.apache.commons.math3.analysis.polynomials", "PolynomialFunctionLagrangeForm", "public static boolean verifyInterpolationArray(double[] x, double[] y, boolean abort) throws DimensionMismatchException, NumberIsTooSmallException, NonMonotonicSequenceException" ], [ "createChebyshevPolynomial", "org.apache.commons.math3.analysis.polynomials", "PolynomialsUtils", "public static PolynomialFunction createChebyshevPolynomial(final int degree)" ], [ "createHermitePolynomial", "org.apache.commons.math3.analysis.polynomials", "PolynomialsUtils", "public static PolynomialFunction createHermitePolynomial(final int degree)" ], [ "createLaguerrePolynomial", "org.apache.commons.math3.analysis.polynomials", "PolynomialsUtils", "public static PolynomialFunction createLaguerrePolynomial(final int degree)" ], [ "createLegendrePolynomial", "org.apache.commons.math3.analysis.polynomials", "PolynomialsUtils", "public static PolynomialFunction createLegendrePolynomial(final int degree)" ], [ "createJacobiPolynomial", "org.apache.commons.math3.analysis.polynomials", "PolynomialsUtils", "public static PolynomialFunction createJacobiPolynomial(final int degree, final int v, final int w)" ], [ "shift", "org.apache.commons.math3.analysis.polynomials", "PolynomialsUtils", "public static double[] shift(final double[] coefficients, final double shift)" ], [ "evaluate", "org.apache.commons.math3.analysis.polynomials", "PolynomialFunction", "protected static double evaluate(double[] coefficients, double argument) throws NullArgumentException, NoDataException" ], [ "differentiate", "org.apache.commons.math3.analysis.polynomials", "PolynomialFunction", "protected static double[] differentiate(double[] coefficients) throws NullArgumentException, NoDataException" ], [ "computeDividedDifference", "org.apache.commons.math3.analysis.interpolation", "DividedDifferenceInterpolator", "protected static double[] computeDividedDifference(final double[] x, final double[] y) throws DimensionMismatchException, NumberIsTooSmallException, NonMonotonicSequenceException" ], [ "compareTo", "org.apache.commons.math3.util", "Precision", "public static int compareTo(double x, double y, double eps)" ], [ "compareTo", "org.apache.commons.math3.util", "Precision", "public static int compareTo(final double x, final double y, final int maxUlps)" ], [ "equals", "org.apache.commons.math3.util", "Precision", "public static boolean equals(float x, float y)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "Precision", "public static boolean equalsIncludingNaN(float x, float y)" ], [ "equals", "org.apache.commons.math3.util", "Precision", "public static boolean equals(float x, float y, float eps)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "Precision", "public static boolean equalsIncludingNaN(float x, float y, float eps)" ], [ "equals", "org.apache.commons.math3.util", "Precision", "public static boolean equals(final float x, final float y, final int maxUlps)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "Precision", "public static boolean equalsIncludingNaN(float x, float y, int maxUlps)" ], [ "equals", "org.apache.commons.math3.util", "Precision", "public static boolean equals(double x, double y)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "Precision", "public static boolean equalsIncludingNaN(double x, double y)" ], [ "equals", "org.apache.commons.math3.util", "Precision", "public static boolean equals(double x, double y, double eps)" ], [ "equalsWithRelativeTolerance", "org.apache.commons.math3.util", "Precision", "public static boolean equalsWithRelativeTolerance(double x, double y, double eps)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "Precision", "public static boolean equalsIncludingNaN(double x, double y, double eps)" ], [ "equals", "org.apache.commons.math3.util", "Precision", "public static boolean equals(final double x, final double y, final int maxUlps)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "Precision", "public static boolean equalsIncludingNaN(double x, double y, int maxUlps)" ], [ "round", "org.apache.commons.math3.util", "Precision", "public static double round(double x, int scale)" ], [ "round", "org.apache.commons.math3.util", "Precision", "public static double round(double x, int scale, int roundingMethod)" ], [ "round", "org.apache.commons.math3.util", "Precision", "public static float round(float x, int scale)" ], [ "round", "org.apache.commons.math3.util", "Precision", "public static float round(float x, int scale, int roundingMethod) throws MathArithmeticException, MathIllegalArgumentException" ], [ "representableDelta", "org.apache.commons.math3.util", "Precision", "public static double representableDelta(double x, double originalDelta)" ], [ "wrap", "org.apache.commons.math3.util", "Incrementor", "public static Incrementor wrap(final IntegerSequence.Incrementor incrementor)" ], [ "scale", "org.apache.commons.math3.util", "MathArrays", "public static double[] scale(double val, final double[] arr)" ], [ "ebeAdd", "org.apache.commons.math3.util", "MathArrays", "public static double[] ebeAdd(double[] a, double[] b) throws DimensionMismatchException" ], [ "ebeSubtract", "org.apache.commons.math3.util", "MathArrays", "public static double[] ebeSubtract(double[] a, double[] b) throws DimensionMismatchException" ], [ "ebeMultiply", "org.apache.commons.math3.util", "MathArrays", "public static double[] ebeMultiply(double[] a, double[] b) throws DimensionMismatchException" ], [ "ebeDivide", "org.apache.commons.math3.util", "MathArrays", "public static double[] ebeDivide(double[] a, double[] b) throws DimensionMismatchException" ], [ "distance1", "org.apache.commons.math3.util", "MathArrays", "public static double distance1(double[] p1, double[] p2) throws DimensionMismatchException" ], [ "distance1", "org.apache.commons.math3.util", "MathArrays", "public static int distance1(int[] p1, int[] p2) throws DimensionMismatchException" ], [ "distance", "org.apache.commons.math3.util", "MathArrays", "public static double distance(double[] p1, double[] p2) throws DimensionMismatchException" ], [ "cosAngle", "org.apache.commons.math3.util", "MathArrays", "public static double cosAngle(double[] v1, double[] v2)" ], [ "distance", "org.apache.commons.math3.util", "MathArrays", "public static double distance(int[] p1, int[] p2) throws DimensionMismatchException" ], [ "distanceInf", "org.apache.commons.math3.util", "MathArrays", "public static double distanceInf(double[] p1, double[] p2) throws DimensionMismatchException" ], [ "distanceInf", "org.apache.commons.math3.util", "MathArrays", "public static int distanceInf(int[] p1, int[] p2) throws DimensionMismatchException" ], [ "isMonotonic", "org.apache.commons.math3.util", "MathArrays", "public static <T extends Comparable<? super T>> boolean isMonotonic(T[] val, OrderDirection dir, boolean strict)" ], [ "isMonotonic", "org.apache.commons.math3.util", "MathArrays", "public static boolean isMonotonic(double[] val, OrderDirection dir, boolean strict)" ], [ "checkEqualLength", "org.apache.commons.math3.util", "MathArrays", "public static boolean checkEqualLength(double[] a, double[] b, boolean abort)" ], [ "checkEqualLength", "org.apache.commons.math3.util", "MathArrays", "public static boolean checkEqualLength(int[] a, int[] b, boolean abort)" ], [ "checkOrder", "org.apache.commons.math3.util", "MathArrays", "public static boolean checkOrder(double[] val, OrderDirection dir, boolean strict, boolean abort) throws NonMonotonicSequenceException" ], [ "safeNorm", "org.apache.commons.math3.util", "MathArrays", "public static double safeNorm(double[] v)" ], [ "copyOf", "org.apache.commons.math3.util", "MathArrays", "public static int[] copyOf(int[] source)" ], [ "copyOf", "org.apache.commons.math3.util", "MathArrays", "public static double[] copyOf(double[] source)" ], [ "copyOf", "org.apache.commons.math3.util", "MathArrays", "public static int[] copyOf(int[] source, int len)" ], [ "copyOf", "org.apache.commons.math3.util", "MathArrays", "public static double[] copyOf(double[] source, int len)" ], [ "copyOfRange", "org.apache.commons.math3.util", "MathArrays", "public static double[] copyOfRange(double[] source, int from, int to)" ], [ "linearCombination", "org.apache.commons.math3.util", "MathArrays", "public static double linearCombination(final double[] a, final double[] b) throws DimensionMismatchException" ], [ "linearCombination", "org.apache.commons.math3.util", "MathArrays", "public static double linearCombination(final double a1, final double b1, final double a2, final double b2)" ], [ "linearCombination", "org.apache.commons.math3.util", "MathArrays", "public static double linearCombination(final double a1, final double b1, final double a2, final double b2, final double a3, final double b3)" ], [ "linearCombination", "org.apache.commons.math3.util", "MathArrays", "public static double linearCombination(final double a1, final double b1, final double a2, final double b2, final double a3, final double b3, final double a4, final double b4)" ], [ "equals", "org.apache.commons.math3.util", "MathArrays", "public static boolean equals(float[] x, float[] y)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "MathArrays", "public static boolean equalsIncludingNaN(float[] x, float[] y)" ], [ "equals", "org.apache.commons.math3.util", "MathArrays", "public static boolean equals(double[] x, double[] y)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "MathArrays", "public static boolean equalsIncludingNaN(double[] x, double[] y)" ], [ "normalizeArray", "org.apache.commons.math3.util", "MathArrays", "public static double[] normalizeArray(double[] values, double normalizedSum) throws MathIllegalArgumentException, MathArithmeticException" ], [ "buildArray", "org.apache.commons.math3.util", "MathArrays", "public static <T> T[] buildArray(final Field<T> field, final int length)" ], [ "buildArray", "org.apache.commons.math3.util", "MathArrays", "public static <T> T[][] buildArray(final Field<T> field, final int rows, final int columns)" ], [ "convolve", "org.apache.commons.math3.util", "MathArrays", "public static double[] convolve(double[] x, double[] h) throws NullArgumentException, NoDataException" ], [ "natural", "org.apache.commons.math3.util", "MathArrays", "public static int[] natural(int n)" ], [ "sequence", "org.apache.commons.math3.util", "MathArrays", "public static int[] sequence(int size, int start, int stride)" ], [ "verifyValues", "org.apache.commons.math3.util", "MathArrays", "public static boolean verifyValues(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "verifyValues", "org.apache.commons.math3.util", "MathArrays", "public static boolean verifyValues(final double[] values, final int begin, final int length, final boolean allowEmpty) throws MathIllegalArgumentException" ], [ "verifyValues", "org.apache.commons.math3.util", "MathArrays", "public static boolean verifyValues(final double[] values, final double[] weights, final int begin, final int length) throws MathIllegalArgumentException" ], [ "verifyValues", "org.apache.commons.math3.util", "MathArrays", "public static boolean verifyValues(final double[] values, final double[] weights, final int begin, final int length, final boolean allowEmpty) throws MathIllegalArgumentException" ], [ "concatenate", "org.apache.commons.math3.util", "MathArrays", "public static double[] concatenate(double[]... x)" ], [ "unique", "org.apache.commons.math3.util", "MathArrays", "public static double[] unique(double[] data)" ], [ "create", "org.apache.commons.math3.util", "Pair", "public static <K, V> Pair<K, V> create(K k, V v)" ], [ "slowCos", "org.apache.commons.math3.util", "FastMathCalc", "static double slowCos(final double x, final double[] result)" ], [ "slowSin", "org.apache.commons.math3.util", "FastMathCalc", "static double slowSin(final double x, final double[] result)" ], [ "slowexp", "org.apache.commons.math3.util", "FastMathCalc", "static double slowexp(final double x, final double[] result)" ], [ "expint", "org.apache.commons.math3.util", "FastMathCalc", "static double expint(int p, final double[] result)" ], [ "slowLog", "org.apache.commons.math3.util", "FastMathCalc", "static double[] slowLog(double xi)" ], [ "format", "org.apache.commons.math3.util", "FastMathCalc", "static String format(double d)" ], [ "sqrt", "org.apache.commons.math3.util", "FastMath", "public static double sqrt(final double a)" ], [ "cosh", "org.apache.commons.math3.util", "FastMath", "public static double cosh(double x)" ], [ "sinh", "org.apache.commons.math3.util", "FastMath", "public static double sinh(double x)" ], [ "tanh", "org.apache.commons.math3.util", "FastMath", "public static double tanh(double x)" ], [ "acosh", "org.apache.commons.math3.util", "FastMath", "public static double acosh(final double a)" ], [ "asinh", "org.apache.commons.math3.util", "FastMath", "public static double asinh(double a)" ], [ "atanh", "org.apache.commons.math3.util", "FastMath", "public static double atanh(double a)" ], [ "signum", "org.apache.commons.math3.util", "FastMath", "public static double signum(final double a)" ], [ "signum", "org.apache.commons.math3.util", "FastMath", "public static float signum(final float a)" ], [ "nextUp", "org.apache.commons.math3.util", "FastMath", "public static double nextUp(final double a)" ], [ "nextUp", "org.apache.commons.math3.util", "FastMath", "public static float nextUp(final float a)" ], [ "nextDown", "org.apache.commons.math3.util", "FastMath", "public static double nextDown(final double a)" ], [ "nextDown", "org.apache.commons.math3.util", "FastMath", "public static float nextDown(final float a)" ], [ "random", "org.apache.commons.math3.util", "FastMath", "public static double random()" ], [ "exp", "org.apache.commons.math3.util", "FastMath", "public static double exp(double x)" ], [ "expm1", "org.apache.commons.math3.util", "FastMath", "public static double expm1(double x)" ], [ "log", "org.apache.commons.math3.util", "FastMath", "public static double log(final double x)" ], [ "log1p", "org.apache.commons.math3.util", "FastMath", "public static double log1p(final double x)" ], [ "log10", "org.apache.commons.math3.util", "FastMath", "public static double log10(final double x)" ], [ "log", "org.apache.commons.math3.util", "FastMath", "public static double log(double base, double x)" ], [ "pow", "org.apache.commons.math3.util", "FastMath", "public static double pow(final double x, final double y)" ], [ "pow", "org.apache.commons.math3.util", "FastMath", "public static double pow(double d, int e)" ], [ "pow", "org.apache.commons.math3.util", "FastMath", "public static double pow(double d, long e)" ], [ "sin", "org.apache.commons.math3.util", "FastMath", "public static double sin(double x)" ], [ "cos", "org.apache.commons.math3.util", "FastMath", "public static double cos(double x)" ], [ "tan", "org.apache.commons.math3.util", "FastMath", "public static double tan(double x)" ], [ "atan", "org.apache.commons.math3.util", "FastMath", "public static double atan(double x)" ], [ "atan2", "org.apache.commons.math3.util", "FastMath", "public static double atan2(double y, double x)" ], [ "asin", "org.apache.commons.math3.util", "FastMath", "public static double asin(double x)" ], [ "acos", "org.apache.commons.math3.util", "FastMath", "public static double acos(double x)" ], [ "cbrt", "org.apache.commons.math3.util", "FastMath", "public static double cbrt(double x)" ], [ "toRadians", "org.apache.commons.math3.util", "FastMath", "public static double toRadians(double x)" ], [ "toDegrees", "org.apache.commons.math3.util", "FastMath", "public static double toDegrees(double x)" ], [ "abs", "org.apache.commons.math3.util", "FastMath", "public static int abs(final int x)" ], [ "abs", "org.apache.commons.math3.util", "FastMath", "public static long abs(final long x)" ], [ "abs", "org.apache.commons.math3.util", "FastMath", "public static float abs(final float x)" ], [ "abs", "org.apache.commons.math3.util", "FastMath", "public static double abs(double x)" ], [ "ulp", "org.apache.commons.math3.util", "FastMath", "public static double ulp(double x)" ], [ "ulp", "org.apache.commons.math3.util", "FastMath", "public static float ulp(float x)" ], [ "scalb", "org.apache.commons.math3.util", "FastMath", "public static double scalb(final double d, final int n)" ], [ "scalb", "org.apache.commons.math3.util", "FastMath", "public static float scalb(final float f, final int n)" ], [ "nextAfter", "org.apache.commons.math3.util", "FastMath", "public static double nextAfter(double d, double direction)" ], [ "nextAfter", "org.apache.commons.math3.util", "FastMath", "public static float nextAfter(final float f, final double direction)" ], [ "floor", "org.apache.commons.math3.util", "FastMath", "public static double floor(double x)" ], [ "ceil", "org.apache.commons.math3.util", "FastMath", "public static double ceil(double x)" ], [ "rint", "org.apache.commons.math3.util", "FastMath", "public static double rint(double x)" ], [ "round", "org.apache.commons.math3.util", "FastMath", "public static long round(double x)" ], [ "round", "org.apache.commons.math3.util", "FastMath", "public static int round(final float x)" ], [ "min", "org.apache.commons.math3.util", "FastMath", "public static int min(final int a, final int b)" ], [ "min", "org.apache.commons.math3.util", "FastMath", "public static long min(final long a, final long b)" ], [ "min", "org.apache.commons.math3.util", "FastMath", "public static float min(final float a, final float b)" ], [ "min", "org.apache.commons.math3.util", "FastMath", "public static double min(final double a, final double b)" ], [ "max", "org.apache.commons.math3.util", "FastMath", "public static int max(final int a, final int b)" ], [ "max", "org.apache.commons.math3.util", "FastMath", "public static long max(final long a, final long b)" ], [ "max", "org.apache.commons.math3.util", "FastMath", "public static float max(final float a, final float b)" ], [ "max", "org.apache.commons.math3.util", "FastMath", "public static double max(final double a, final double b)" ], [ "hypot", "org.apache.commons.math3.util", "FastMath", "public static double hypot(final double x, final double y)" ], [ "IEEEremainder", "org.apache.commons.math3.util", "FastMath", "public static double IEEEremainder(double dividend, double divisor)" ], [ "toIntExact", "org.apache.commons.math3.util", "FastMath", "public static int toIntExact(final long n) throws MathArithmeticException" ], [ "incrementExact", "org.apache.commons.math3.util", "FastMath", "public static int incrementExact(final int n) throws MathArithmeticException" ], [ "incrementExact", "org.apache.commons.math3.util", "FastMath", "public static long incrementExact(final long n) throws MathArithmeticException" ], [ "decrementExact", "org.apache.commons.math3.util", "FastMath", "public static int decrementExact(final int n) throws MathArithmeticException" ], [ "decrementExact", "org.apache.commons.math3.util", "FastMath", "public static long decrementExact(final long n) throws MathArithmeticException" ], [ "addExact", "org.apache.commons.math3.util", "FastMath", "public static int addExact(final int a, final int b) throws MathArithmeticException" ], [ "addExact", "org.apache.commons.math3.util", "FastMath", "public static long addExact(final long a, final long b) throws MathArithmeticException" ], [ "subtractExact", "org.apache.commons.math3.util", "FastMath", "public static int subtractExact(final int a, final int b)" ], [ "subtractExact", "org.apache.commons.math3.util", "FastMath", "public static long subtractExact(final long a, final long b)" ], [ "multiplyExact", "org.apache.commons.math3.util", "FastMath", "public static int multiplyExact(final int a, final int b)" ], [ "multiplyExact", "org.apache.commons.math3.util", "FastMath", "public static long multiplyExact(final long a, final long b)" ], [ "floorDiv", "org.apache.commons.math3.util", "FastMath", "public static int floorDiv(final int a, final int b) throws MathArithmeticException" ], [ "floorDiv", "org.apache.commons.math3.util", "FastMath", "public static long floorDiv(final long a, final long b) throws MathArithmeticException" ], [ "floorMod", "org.apache.commons.math3.util", "FastMath", "public static int floorMod(final int a, final int b) throws MathArithmeticException" ], [ "floorMod", "org.apache.commons.math3.util", "FastMath", "public static long floorMod(final long a, final long b)" ], [ "copySign", "org.apache.commons.math3.util", "FastMath", "public static double copySign(double magnitude, double sign)" ], [ "copySign", "org.apache.commons.math3.util", "FastMath", "public static float copySign(float magnitude, float sign)" ], [ "getExponent", "org.apache.commons.math3.util", "FastMath", "public static int getExponent(final double d)" ], [ "getExponent", "org.apache.commons.math3.util", "FastMath", "public static int getExponent(final float f)" ], [ "getInstance", "org.apache.commons.math3.util", "BigRealField", "public static BigRealField getInstance()" ], [ "getInstance", "org.apache.commons.math3.util", "Decimal64Field", "public static final Decimal64Field getInstance()" ], [ "hash", "org.apache.commons.math3.util", "MathUtils", "public static int hash(double value)" ], [ "equals", "org.apache.commons.math3.util", "MathUtils", "public static boolean equals(double x, double y)" ], [ "hash", "org.apache.commons.math3.util", "MathUtils", "public static int hash(double[] value)" ], [ "normalizeAngle", "org.apache.commons.math3.util", "MathUtils", "public static double normalizeAngle(double a, double center)" ], [ "max", "org.apache.commons.math3.util", "MathUtils", "public static <T extends RealFieldElement<T>> T max(final T e1, final T e2)" ], [ "min", "org.apache.commons.math3.util", "MathUtils", "public static <T extends RealFieldElement<T>> T min(final T e1, final T e2)" ], [ "reduce", "org.apache.commons.math3.util", "MathUtils", "public static double reduce(double a, double period, double offset)" ], [ "copySign", "org.apache.commons.math3.util", "MathUtils", "public static byte copySign(byte magnitude, byte sign) throws MathArithmeticException" ], [ "copySign", "org.apache.commons.math3.util", "MathUtils", "public static short copySign(short magnitude, short sign) throws MathArithmeticException" ], [ "copySign", "org.apache.commons.math3.util", "MathUtils", "public static int copySign(int magnitude, int sign) throws MathArithmeticException" ], [ "copySign", "org.apache.commons.math3.util", "MathUtils", "public static long copySign(long magnitude, long sign) throws MathArithmeticException" ], [ "getDefaultNumberFormat", "org.apache.commons.math3.util", "CompositeFormat", "public static NumberFormat getDefaultNumberFormat()" ], [ "getDefaultNumberFormat", "org.apache.commons.math3.util", "CompositeFormat", "public static NumberFormat getDefaultNumberFormat(final Locale locale)" ], [ "parseNextCharacter", "org.apache.commons.math3.util", "CompositeFormat", "public static char parseNextCharacter(final String source, final ParsePosition pos)" ], [ "parseNumber", "org.apache.commons.math3.util", "CompositeFormat", "public static Number parseNumber(final String source, final NumberFormat format, final ParsePosition pos)" ], [ "parseFixedstring", "org.apache.commons.math3.util", "CompositeFormat", "public static boolean parseFixedstring(final String source, final String expected, final ParsePosition pos)" ], [ "formatDouble", "org.apache.commons.math3.util", "CompositeFormat", "public static StringBuffer formatDouble(final double value, final NumberFormat format, final StringBuffer toAppendTo, final FieldPosition pos)" ], [ "range", "org.apache.commons.math3.util", "IntegerSequence", "public static Range range(int start, int end)" ], [ "range", "org.apache.commons.math3.util", "IntegerSequence", "public static Range range(final int start, final int max, final int step)" ], [ "create", "org.apache.commons.math3.util", "IntegerSequence", "public static Incrementor create()" ], [ "create", "org.apache.commons.math3.util", "Incrementor", "public static Incrementor create()" ], [ "loadExpIntA", "org.apache.commons.math3.util", "FastMathLiteralArrays", "static double[] loadExpIntA()" ], [ "loadExpIntB", "org.apache.commons.math3.util", "FastMathLiteralArrays", "static double[] loadExpIntB()" ], [ "loadExpFracA", "org.apache.commons.math3.util", "FastMathLiteralArrays", "static double[] loadExpFracA()" ], [ "loadExpFracB", "org.apache.commons.math3.util", "FastMathLiteralArrays", "static double[] loadExpFracB()" ], [ "loadLnMant", "org.apache.commons.math3.util", "FastMathLiteralArrays", "static double[][] loadLnMant()" ], [ "binomialCoefficient", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static long binomialCoefficient(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "binomialCoefficientDouble", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static double binomialCoefficientDouble(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "binomialCoefficientLog", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static double binomialCoefficientLog(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "factorial", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static long factorial(final int n) throws NotPositiveException, MathArithmeticException" ], [ "factorialDouble", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static double factorialDouble(final int n) throws NotPositiveException" ], [ "factorialLog", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static double factorialLog(final int n) throws NotPositiveException" ], [ "stirlingS2", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static long stirlingS2(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "combinationsIterator", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static Iterator<int[]> combinationsIterator(int n, int k)" ], [ "addAndCheck", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int addAndCheck(int x, int y) throws MathArithmeticException" ], [ "addAndCheck", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long addAndCheck(long a, long b) throws MathArithmeticException" ], [ "binomialCoefficient", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long binomialCoefficient(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "binomialCoefficientDouble", "org.apache.commons.math3.util", "ArithmeticUtils", "public static double binomialCoefficientDouble(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "binomialCoefficientLog", "org.apache.commons.math3.util", "ArithmeticUtils", "public static double binomialCoefficientLog(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "factorial", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long factorial(final int n) throws NotPositiveException, MathArithmeticException" ], [ "factorialDouble", "org.apache.commons.math3.util", "ArithmeticUtils", "public static double factorialDouble(final int n) throws NotPositiveException" ], [ "factorialLog", "org.apache.commons.math3.util", "ArithmeticUtils", "public static double factorialLog(final int n) throws NotPositiveException" ], [ "gcd", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int gcd(int p, int q) throws MathArithmeticException" ], [ "gcd", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long gcd(final long p, final long q) throws MathArithmeticException" ], [ "lcm", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int lcm(int a, int b) throws MathArithmeticException" ], [ "lcm", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long lcm(long a, long b) throws MathArithmeticException" ], [ "mulAndCheck", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int mulAndCheck(int x, int y) throws MathArithmeticException" ], [ "mulAndCheck", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long mulAndCheck(long a, long b) throws MathArithmeticException" ], [ "subAndCheck", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int subAndCheck(int x, int y) throws MathArithmeticException" ], [ "subAndCheck", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long subAndCheck(long a, long b) throws MathArithmeticException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int pow(final int k, final int e) throws NotPositiveException, MathArithmeticException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int pow(final int k, long e) throws NotPositiveException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long pow(final long k, final int e) throws NotPositiveException, MathArithmeticException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long pow(final long k, long e) throws NotPositiveException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static BigInteger pow(final BigInteger k, int e) throws NotPositiveException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static BigInteger pow(final BigInteger k, long e) throws NotPositiveException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static BigInteger pow(final BigInteger k, BigInteger e) throws NotPositiveException" ], [ "stirlingS2", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long stirlingS2(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "isPowerOfTwo", "org.apache.commons.math3.util", "ArithmeticUtils", "public static boolean isPowerOfTwo(long n)" ], [ "getAvailableLocales", "org.apache.commons.math3.complex", "ComplexFormat", "public static Locale[] getAvailableLocales()" ], [ "getInstance", "org.apache.commons.math3.complex", "ComplexFormat", "public static ComplexFormat getInstance()" ], [ "getInstance", "org.apache.commons.math3.complex", "ComplexFormat", "public static ComplexFormat getInstance(Locale locale)" ], [ "getInstance", "org.apache.commons.math3.complex", "ComplexFormat", "public static ComplexFormat getInstance(String imaginaryCharacter, Locale locale) throws NullArgumentException, NoDataException" ], [ "getInstance", "org.apache.commons.math3.complex", "ComplexField", "public static ComplexField getInstance()" ], [ "multiply", "org.apache.commons.math3.complex", "Quaternion", "public static Quaternion multiply(final Quaternion q1, final Quaternion q2)" ], [ "add", "org.apache.commons.math3.complex", "Quaternion", "public static Quaternion add(final Quaternion q1, final Quaternion q2)" ], [ "subtract", "org.apache.commons.math3.complex", "Quaternion", "public static Quaternion subtract(final Quaternion q1, final Quaternion q2)" ], [ "dotProduct", "org.apache.commons.math3.complex", "Quaternion", "public static double dotProduct(final Quaternion q1, final Quaternion q2)" ], [ "equals", "org.apache.commons.math3.complex", "Complex", "public static boolean equals(Complex x, Complex y, int maxUlps)" ], [ "equals", "org.apache.commons.math3.complex", "Complex", "public static boolean equals(Complex x, Complex y)" ], [ "equals", "org.apache.commons.math3.complex", "Complex", "public static boolean equals(Complex x, Complex y, double eps)" ], [ "equalsWithRelativeTolerance", "org.apache.commons.math3.complex", "Complex", "public static boolean equalsWithRelativeTolerance(Complex x, Complex y, double eps)" ], [ "valueOf", "org.apache.commons.math3.complex", "Complex", "public static Complex valueOf(double realPart, double imaginaryPart)" ], [ "valueOf", "org.apache.commons.math3.complex", "Complex", "public static Complex valueOf(double realPart)" ], [ "polar2Complex", "org.apache.commons.math3.complex", "ComplexUtils", "public static Complex polar2Complex(double r, double theta) throws MathIllegalArgumentException" ], [ "convertToComplex", "org.apache.commons.math3.complex", "ComplexUtils", "public static Complex[] convertToComplex(double[] real)" ], [ "getInvertedCoefficientSum", "org.apache.commons.math3.optimization.linear", "SimplexTableau", "protected static double getInvertedCoefficientSum(final RealVector coefficients)" ], [ "getAvailableLocales", "org.apache.commons.math3.linear", "RealMatrixFormat", "public static Locale[] getAvailableLocales()" ], [ "getInstance", "org.apache.commons.math3.linear", "RealMatrixFormat", "public static RealMatrixFormat getInstance()" ], [ "getInstance", "org.apache.commons.math3.linear", "RealMatrixFormat", "public static RealMatrixFormat getInstance(final Locale locale)" ], [ "createRealMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix createRealMatrix(final int rows, final int columns)" ], [ "createFieldMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldMatrix(final Field<T> field, final int rows, final int columns)" ], [ "createRealMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix createRealMatrix(double[][] data) throws NullArgumentException, DimensionMismatchException, NoDataException" ], [ "createFieldMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldMatrix(T[][] data) throws DimensionMismatchException, NoDataException, NullArgumentException" ], [ "createRealIdentityMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix createRealIdentityMatrix(int dimension)" ], [ "createFieldIdentityMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldIdentityMatrix(final Field<T> field, final int dimension)" ], [ "createRealDiagonalMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix createRealDiagonalMatrix(final double[] diagonal)" ], [ "createFieldDiagonalMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldDiagonalMatrix(final T[] diagonal)" ], [ "createRealVector", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealVector createRealVector(double[] data) throws NoDataException, NullArgumentException" ], [ "createFieldVector", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldVector<T> createFieldVector(final T[] data) throws NoDataException, NullArgumentException, ZeroException" ], [ "createRowRealMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix createRowRealMatrix(double[] rowData) throws NoDataException, NullArgumentException" ], [ "createRowFieldMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldMatrix<T> createRowFieldMatrix(final T[] rowData) throws NoDataException, NullArgumentException" ], [ "createColumnRealMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix createColumnRealMatrix(double[] columnData) throws NoDataException, NullArgumentException" ], [ "createColumnFieldMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldMatrix<T> createColumnFieldMatrix(final T[] columnData) throws NoDataException, NullArgumentException" ], [ "isSymmetric", "org.apache.commons.math3.linear", "MatrixUtils", "public static boolean isSymmetric(RealMatrix matrix, double eps)" ], [ "fractionMatrixToRealMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static Array2DRowRealMatrix fractionMatrixToRealMatrix(final FieldMatrix<Fraction> m)" ], [ "bigFractionMatrixToRealMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static Array2DRowRealMatrix bigFractionMatrixToRealMatrix(final FieldMatrix<BigFraction> m)" ], [ "blockInverse", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix blockInverse(RealMatrix m, int splitIndex)" ], [ "inverse", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix inverse(RealMatrix matrix) throws NullArgumentException, SingularMatrixException, NonSquareMatrixException" ], [ "inverse", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix inverse(RealMatrix matrix, double threshold) throws NullArgumentException, SingularMatrixException, NonSquareMatrixException" ], [ "toBlocksLayout", "org.apache.commons.math3.linear", "BlockFieldMatrix", "public static <T extends FieldElement<T>> T[][] toBlocksLayout(final T[][] rawData) throws DimensionMismatchException" ], [ "createBlocksLayout", "org.apache.commons.math3.linear", "BlockFieldMatrix", "public static <T extends FieldElement<T>> T[][] createBlocksLayout(final Field<T> field, final int rows, final int columns)" ], [ "toBlocksLayout", "org.apache.commons.math3.linear", "BlockRealMatrix", "public static double[][] toBlocksLayout(final double[][] rawData) throws DimensionMismatchException" ], [ "createBlocksLayout", "org.apache.commons.math3.linear", "BlockRealMatrix", "public static double[][] createBlocksLayout(final int rows, final int columns)" ], [ "unmodifiableRealVector", "org.apache.commons.math3.linear", "RealVector", "public static RealVector unmodifiableRealVector(final RealVector v)" ], [ "getAvailableLocales", "org.apache.commons.math3.linear", "RealVectorFormat", "public static Locale[] getAvailableLocales()" ], [ "getInstance", "org.apache.commons.math3.linear", "RealVectorFormat", "public static RealVectorFormat getInstance()" ], [ "getInstance", "org.apache.commons.math3.linear", "RealVectorFormat", "public static RealVectorFormat getInstance(final Locale locale)" ], [ "create", "org.apache.commons.math3.linear", "JacobiPreconditioner", "public static JacobiPreconditioner create(final RealLinearOperator a) throws NonSquareOperatorException" ], [ "extractField", "org.apache.commons.math3.linear", "AbstractFieldMatrix", "protected static <T extends FieldElement<T>> Field<T> extractField(final T[][] d) throws NoDataException, NullArgumentException" ], [ "extractField", "org.apache.commons.math3.linear", "AbstractFieldMatrix", "protected static <T extends FieldElement<T>> Field<T> extractField(final T[] d) throws NoDataException" ], [ "buildArray", "org.apache.commons.math3.linear", "AbstractFieldMatrix", "protected static <T extends FieldElement<T>> T[][] buildArray(final Field<T> field, final int rows, final int columns)" ], [ "buildArray", "org.apache.commons.math3.linear", "AbstractFieldMatrix", "protected static <T extends FieldElement<T>> T[] buildArray(final Field<T> field, final int length)" ], [ "estimate", "org.apache.commons.math3.distribution.fitting", "MultivariateNormalMixtureExpectationMaximization", "public static MixtureMultivariateNormalDistribution estimate(final double[][] data, final int numComponents) throws NotStrictlyPositiveException, DimensionMismatchException" ], [ "sample", "org.apache.commons.math3.distribution", "BetaDistribution", "static double sample(RandomGenerator random, final double alpha, final double beta)" ], [ "sample", "org.apache.commons.math3.distribution", "ChengBetaSampler", "static double sample(RandomGenerator random, final double alpha, final double beta)" ], [ "getStirlingError", "org.apache.commons.math3.distribution", "SaddlePointExpansion", "static double getStirlingError(double z)" ], [ "getDeviancePart", "org.apache.commons.math3.distribution", "SaddlePointExpansion", "static double getDeviancePart(double x, double mu)" ], [ "logBinomialProbability", "org.apache.commons.math3.distribution", "SaddlePointExpansion", "static double logBinomialProbability(int x, int n, double p, double q)" ], [ "helper1", "org.apache.commons.math3.distribution", "ZipfDistribution", "static double helper1(final double x)" ], [ "helper2", "org.apache.commons.math3.distribution", "ZipfDistribution", "static double helper2(final double x)" ], [ "helper1", "org.apache.commons.math3.distribution", "ZipfRejectionInversionSampler", "static double helper1(final double x)" ], [ "helper2", "org.apache.commons.math3.distribution", "ZipfRejectionInversionSampler", "static double helper2(final double x)" ], [ "unlimited", "org.apache.commons.math3.optim", "MaxIter", "public static MaxIter unlimited()" ], [ "getInvertedCoefficientSum", "org.apache.commons.math3.optim.linear", "SimplexTableau", "protected static double getInvertedCoefficientSum(final RealVector coefficients)" ], [ "unbounded", "org.apache.commons.math3.optim", "SimpleBounds", "public static SimpleBounds unbounded(int dim)" ], [ "unlimited", "org.apache.commons.math3.optim", "MaxEval", "public static MaxEval unlimited()" ], [ "erf", "org.apache.commons.math3.special", "Erf", "public static double erf(double x)" ], [ "erfc", "org.apache.commons.math3.special", "Erf", "public static double erfc(double x)" ], [ "erf", "org.apache.commons.math3.special", "Erf", "public static double erf(double x1, double x2)" ], [ "erfInv", "org.apache.commons.math3.special", "Erf", "public static double erfInv(final double x)" ], [ "erfcInv", "org.apache.commons.math3.special", "Erf", "public static double erfcInv(final double x)" ], [ "value", "org.apache.commons.math3.special", "BesselJ", "public static double value(double order, double x) throws MathIllegalArgumentException, ConvergenceException" ], [ "rjBesl", "org.apache.commons.math3.special", "BesselJ", "public static BesselJResult rjBesl(double x, double alpha, int nb)" ], [ "logGamma", "org.apache.commons.math3.special", "Gamma", "public static double logGamma(double x)" ], [ "regularizedGammaP", "org.apache.commons.math3.special", "Gamma", "public static double regularizedGammaP(double a, double x)" ], [ "regularizedGammaP", "org.apache.commons.math3.special", "Gamma", "public static double regularizedGammaP(double a, double x, double epsilon, int maxIterations)" ], [ "regularizedGammaQ", "org.apache.commons.math3.special", "Gamma", "public static double regularizedGammaQ(double a, double x)" ], [ "regularizedGammaQ", "org.apache.commons.math3.special", "Gamma", "public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations)" ], [ "digamma", "org.apache.commons.math3.special", "Gamma", "public static double digamma(double x)" ], [ "trigamma", "org.apache.commons.math3.special", "Gamma", "public static double trigamma(double x)" ], [ "lanczos", "org.apache.commons.math3.special", "Gamma", "public static double lanczos(final double x)" ], [ "invGamma1pm1", "org.apache.commons.math3.special", "Gamma", "public static double invGamma1pm1(final double x)" ], [ "logGamma1p", "org.apache.commons.math3.special", "Gamma", "public static double logGamma1p(final double x) throws NumberIsTooSmallException, NumberIsTooLargeException" ], [ "gamma", "org.apache.commons.math3.special", "Gamma", "public static double gamma(final double x)" ], [ "regularizedBeta", "org.apache.commons.math3.special", "Beta", "public static double regularizedBeta(double x, double a, double b)" ], [ "regularizedBeta", "org.apache.commons.math3.special", "Beta", "public static double regularizedBeta(double x, double a, double b, double epsilon)" ], [ "regularizedBeta", "org.apache.commons.math3.special", "Beta", "public static double regularizedBeta(double x, double a, double b, int maxIterations)" ], [ "regularizedBeta", "org.apache.commons.math3.special", "Beta", "public static double regularizedBeta(double x, final double a, final double b, double epsilon, int maxIterations)" ], [ "logBeta", "org.apache.commons.math3.special", "Beta", "public static double logBeta(double a, double b, double epsilon, int maxIterations)" ], [ "logBeta", "org.apache.commons.math3.special", "Beta", "public static double logBeta(final double p, final double q)" ], [ "getInstance", "org.apache.commons.math3.ode.sampling", "DummyStepHandler", "public static DummyStepHandler getInstance()" ], [ "getInstance", "org.apache.commons.math3.ode.nonstiff", "AdamsNordsieckTransformer", "public static AdamsNordsieckTransformer getInstance(final int nSteps)" ], [ "taylor", "org.apache.commons.math3.ode.nonstiff", "AdamsFieldStepInterpolator", "public static <S extends RealFieldElement<S>> FieldODEStateAndDerivative<S> taylor(final FieldODEStateAndDerivative<S> reference, final S time, final S stepSize, final S[] scaled, final Array2DRowFieldMatrix<S> nordsieck)" ], [ "getInstance", "org.apache.commons.math3.ode.nonstiff", "AdamsNordsieckFieldTransformer", "public static <T extends RealFieldElement<T>> AdamsNordsieckFieldTransformer<T> getInstance(final Field<T> field, final int nSteps)" ], [ "sum", "org.apache.commons.math3.stat", "StatUtils", "public static double sum(final double[] values) throws MathIllegalArgumentException" ], [ "sum", "org.apache.commons.math3.stat", "StatUtils", "public static double sum(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "sumSq", "org.apache.commons.math3.stat", "StatUtils", "public static double sumSq(final double[] values) throws MathIllegalArgumentException" ], [ "sumSq", "org.apache.commons.math3.stat", "StatUtils", "public static double sumSq(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "product", "org.apache.commons.math3.stat", "StatUtils", "public static double product(final double[] values) throws MathIllegalArgumentException" ], [ "product", "org.apache.commons.math3.stat", "StatUtils", "public static double product(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "sumLog", "org.apache.commons.math3.stat", "StatUtils", "public static double sumLog(final double[] values) throws MathIllegalArgumentException" ], [ "sumLog", "org.apache.commons.math3.stat", "StatUtils", "public static double sumLog(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "mean", "org.apache.commons.math3.stat", "StatUtils", "public static double mean(final double[] values) throws MathIllegalArgumentException" ], [ "mean", "org.apache.commons.math3.stat", "StatUtils", "public static double mean(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "geometricMean", "org.apache.commons.math3.stat", "StatUtils", "public static double geometricMean(final double[] values) throws MathIllegalArgumentException" ], [ "geometricMean", "org.apache.commons.math3.stat", "StatUtils", "public static double geometricMean(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "variance", "org.apache.commons.math3.stat", "StatUtils", "public static double variance(final double[] values) throws MathIllegalArgumentException" ], [ "variance", "org.apache.commons.math3.stat", "StatUtils", "public static double variance(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "variance", "org.apache.commons.math3.stat", "StatUtils", "public static double variance(final double[] values, final double mean, final int begin, final int length) throws MathIllegalArgumentException" ], [ "variance", "org.apache.commons.math3.stat", "StatUtils", "public static double variance(final double[] values, final double mean) throws MathIllegalArgumentException" ], [ "populationVariance", "org.apache.commons.math3.stat", "StatUtils", "public static double populationVariance(final double[] values) throws MathIllegalArgumentException" ], [ "populationVariance", "org.apache.commons.math3.stat", "StatUtils", "public static double populationVariance(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "populationVariance", "org.apache.commons.math3.stat", "StatUtils", "public static double populationVariance(final double[] values, final double mean, final int begin, final int length) throws MathIllegalArgumentException" ], [ "populationVariance", "org.apache.commons.math3.stat", "StatUtils", "public static double populationVariance(final double[] values, final double mean) throws MathIllegalArgumentException" ], [ "max", "org.apache.commons.math3.stat", "StatUtils", "public static double max(final double[] values) throws MathIllegalArgumentException" ], [ "max", "org.apache.commons.math3.stat", "StatUtils", "public static double max(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "min", "org.apache.commons.math3.stat", "StatUtils", "public static double min(final double[] values) throws MathIllegalArgumentException" ], [ "min", "org.apache.commons.math3.stat", "StatUtils", "public static double min(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "percentile", "org.apache.commons.math3.stat", "StatUtils", "public static double percentile(final double[] values, final double p) throws MathIllegalArgumentException" ], [ "percentile", "org.apache.commons.math3.stat", "StatUtils", "public static double percentile(final double[] values, final int begin, final int length, final double p) throws MathIllegalArgumentException" ], [ "sumDifference", "org.apache.commons.math3.stat", "StatUtils", "public static double sumDifference(final double[] sample1, final double[] sample2) throws DimensionMismatchException, NoDataException" ], [ "meanDifference", "org.apache.commons.math3.stat", "StatUtils", "public static double meanDifference(final double[] sample1, final double[] sample2) throws DimensionMismatchException, NoDataException" ], [ "varianceDifference", "org.apache.commons.math3.stat", "StatUtils", "public static double varianceDifference(final double[] sample1, final double[] sample2, double meanDifference) throws DimensionMismatchException, NumberIsTooSmallException" ], [ "normalize", "org.apache.commons.math3.stat", "StatUtils", "public static double[] normalize(final double[] sample)" ], [ "mode", "org.apache.commons.math3.stat", "StatUtils", "public static double[] mode(double[] sample) throws MathIllegalArgumentException" ], [ "mode", "org.apache.commons.math3.stat", "StatUtils", "public static double[] mode(double[] sample, final int begin, final int length)" ], [ "getAgrestiCoullInterval", "org.apache.commons.math3.stat.interval", "IntervalUtils", "public static ConfidenceInterval getAgrestiCoullInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)" ], [ "getClopperPearsonInterval", "org.apache.commons.math3.stat.interval", "IntervalUtils", "public static ConfidenceInterval getClopperPearsonInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)" ], [ "getNormalApproximationInterval", "org.apache.commons.math3.stat.interval", "IntervalUtils", "public static ConfidenceInterval getNormalApproximationInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)" ], [ "getWilsonScoreInterval", "org.apache.commons.math3.stat.interval", "IntervalUtils", "public static ConfidenceInterval getWilsonScoreInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)" ], [ "homoscedasticT", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double homoscedasticT(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException" ], [ "homoscedasticT", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double homoscedasticT(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException" ], [ "homoscedasticTTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean homoscedasticTTest(final double[] sample1, final double[] sample2, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException" ], [ "homoscedasticTTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double homoscedasticTTest(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException" ], [ "homoscedasticTTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double homoscedasticTTest(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException" ], [ "pairedT", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double pairedT(final double[] sample1, final double[] sample2) throws NullArgumentException, NoDataException, DimensionMismatchException, NumberIsTooSmallException" ], [ "pairedTTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean pairedTTest(final double[] sample1, final double[] sample2, final double alpha) throws NullArgumentException, NoDataException, DimensionMismatchException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException" ], [ "pairedTTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double pairedTTest(final double[] sample1, final double[] sample2) throws NullArgumentException, NoDataException, DimensionMismatchException, NumberIsTooSmallException, MaxCountExceededException" ], [ "t", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double t(final double mu, final double[] observed) throws NullArgumentException, NumberIsTooSmallException" ], [ "t", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double t(final double mu, final StatisticalSummary sampleStats) throws NullArgumentException, NumberIsTooSmallException" ], [ "t", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double t(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException" ], [ "t", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double t(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean tTest(final double mu, final double[] sample, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double tTest(final double mu, final double[] sample) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean tTest(final double mu, final StatisticalSummary sampleStats, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double tTest(final double mu, final StatisticalSummary sampleStats) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean tTest(final double[] sample1, final double[] sample2, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double tTest(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean tTest(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double tTest(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException" ], [ "chiSquare", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double chiSquare(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException" ], [ "chiSquare", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double chiSquare(final long[][] counts) throws NullArgumentException, NotPositiveException, DimensionMismatchException" ], [ "chiSquareTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean chiSquareTest(final double[] expected, final long[] observed, final double alpha) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, OutOfRangeException, MaxCountExceededException" ], [ "chiSquareTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double chiSquareTest(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, MaxCountExceededException" ], [ "chiSquareTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean chiSquareTest(final long[][] counts, final double alpha) throws NullArgumentException, DimensionMismatchException, NotPositiveException, OutOfRangeException, MaxCountExceededException" ], [ "chiSquareTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double chiSquareTest(final long[][] counts) throws NullArgumentException, DimensionMismatchException, NotPositiveException, MaxCountExceededException" ], [ "chiSquareDataSetsComparison", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double chiSquareDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException" ], [ "chiSquareTestDataSetsComparison", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double chiSquareTestDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException, MaxCountExceededException" ], [ "chiSquareTestDataSetsComparison", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean chiSquareTestDataSetsComparison(final long[] observed1, final long[] observed2, final double alpha) throws DimensionMismatchException, NotPositiveException, ZeroException, OutOfRangeException, MaxCountExceededException" ], [ "oneWayAnovaFValue", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double oneWayAnovaFValue(final Collection<double[]> categoryData) throws NullArgumentException, DimensionMismatchException" ], [ "oneWayAnovaPValue", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double oneWayAnovaPValue(final Collection<double[]> categoryData) throws NullArgumentException, DimensionMismatchException, ConvergenceException, MaxCountExceededException" ], [ "oneWayAnovaTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean oneWayAnovaTest(final Collection<double[]> categoryData, final double alpha) throws NullArgumentException, DimensionMismatchException, OutOfRangeException, ConvergenceException, MaxCountExceededException" ], [ "g", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double g(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException" ], [ "gTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double gTest(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, MaxCountExceededException" ], [ "gTestIntrinsic", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double gTestIntrinsic(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, MaxCountExceededException" ], [ "gTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean gTest(final double[] expected, final long[] observed, final double alpha) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, OutOfRangeException, MaxCountExceededException" ], [ "gDataSetsComparison", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double gDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException" ], [ "rootLogLikelihoodRatio", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double rootLogLikelihoodRatio(final long k11, final long k12, final long k21, final long k22) throws DimensionMismatchException, NotPositiveException, ZeroException" ], [ "gTestDataSetsComparison", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double gTestDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException, MaxCountExceededException" ], [ "gTestDataSetsComparison", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean gTestDataSetsComparison(final long[] observed1, final long[] observed2, final double alpha) throws DimensionMismatchException, NotPositiveException, ZeroException, OutOfRangeException, MaxCountExceededException" ], [ "kolmogorovSmirnovStatistic", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double kolmogorovSmirnovStatistic(RealDistribution dist, double[] data) throws InsufficientDataException, NullArgumentException" ], [ "kolmogorovSmirnovTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double kolmogorovSmirnovTest(RealDistribution dist, double[] data) throws InsufficientDataException, NullArgumentException" ], [ "kolmogorovSmirnovTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double kolmogorovSmirnovTest(RealDistribution dist, double[] data, boolean strict) throws InsufficientDataException, NullArgumentException" ], [ "kolmogorovSmirnovTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean kolmogorovSmirnovTest(RealDistribution dist, double[] data, double alpha) throws InsufficientDataException, NullArgumentException" ], [ "kolmogorovSmirnovStatistic", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double kolmogorovSmirnovStatistic(double[] x, double[] y) throws InsufficientDataException, NullArgumentException" ], [ "kolmogorovSmirnovTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double kolmogorovSmirnovTest(double[] x, double[] y) throws InsufficientDataException, NullArgumentException" ], [ "kolmogorovSmirnovTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double kolmogorovSmirnovTest(double[] x, double[] y, boolean strict) throws InsufficientDataException, NullArgumentException" ], [ "exactP", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double exactP(double d, int m, int n, boolean strict)" ], [ "approximateP", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double approximateP(double d, int n, int m)" ], [ "monteCarloP", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double monteCarloP(double d, int n, int m, boolean strict, int iterations)" ], [ "aggregate", "org.apache.commons.math3.stat.descriptive", "AggregateSummaryStatistics", "public static StatisticalSummaryValues aggregate(Collection<? extends StatisticalSummary> statistics)" ], [ "newMarkers", "org.apache.commons.math3.stat.descriptive.rank", "PSquarePercentile", "public static PSquareMarkers newMarkers(final List<Double> initialFive, final double p)" ], [ "exponentialDecay", "org.apache.commons.math3.ml.neuralnet.sofm", "NeighbourhoodSizeFunctionFactory", "public static NeighbourhoodSizeFunction exponentialDecay(final double initValue, final double valueAtNumCall, final long numCall)" ], [ "quasiSigmoidDecay", "org.apache.commons.math3.ml.neuralnet.sofm", "NeighbourhoodSizeFunctionFactory", "public static NeighbourhoodSizeFunction quasiSigmoidDecay(final double initValue, final double slope, final long numCall)" ], [ "exponentialDecay", "org.apache.commons.math3.ml.neuralnet.sofm", "LearningFactorFunctionFactory", "public static LearningFactorFunction exponentialDecay(final double initValue, final double valueAtNumCall, final long numCall)" ], [ "quasiSigmoidDecay", "org.apache.commons.math3.ml.neuralnet.sofm", "LearningFactorFunctionFactory", "public static LearningFactorFunction quasiSigmoidDecay(final double initValue, final double slope, final long numCall)" ], [ "findBest", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static Neuron findBest(double[] features, Iterable<Neuron> neurons, DistanceMeasure distance)" ], [ "findBestAndSecondBest", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static Pair<Neuron, Neuron> findBestAndSecondBest(double[] features, Iterable<Neuron> neurons, DistanceMeasure distance)" ], [ "sort", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static Neuron[] sort(double[] features, Iterable<Neuron> neurons, DistanceMeasure distance)" ], [ "computeU", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static double[][] computeU(NeuronSquareMesh2D map, DistanceMeasure distance)" ], [ "computeHitHistogram", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static int[][] computeHitHistogram(Iterable<double[]> data, NeuronSquareMesh2D map, DistanceMeasure distance)" ], [ "computeQuantizationError", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static double computeQuantizationError(Iterable<double[]> data, Iterable<Neuron> neurons, DistanceMeasure distance)" ], [ "computeTopographicError", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static double computeTopographicError(Iterable<double[]> data, Network net, DistanceMeasure distance)" ], [ "uniform", "org.apache.commons.math3.ml.neuralnet", "FeatureInitializerFactory", "public static FeatureInitializer uniform(final RandomGenerator rng, final double min, final double max)" ], [ "uniform", "org.apache.commons.math3.ml.neuralnet", "FeatureInitializerFactory", "public static FeatureInitializer uniform(final double min, final double max)" ], [ "function", "org.apache.commons.math3.ml.neuralnet", "FeatureInitializerFactory", "public static FeatureInitializer function(final UnivariateFunction f, final double init, final double inc)" ], [ "randomize", "org.apache.commons.math3.ml.neuralnet", "FeatureInitializerFactory", "public static FeatureInitializer randomize(final RealDistribution random, final FeatureInitializer orig)" ], [ "split", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp[] split(final DfpField field, final String a)" ], [ "split", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp[] split(final Dfp a)" ], [ "splitMult", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp[] splitMult(final Dfp[] a, final Dfp[] b)" ], [ "splitDiv", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp[] splitDiv(final Dfp[] a, final Dfp[] b)" ], [ "splitPow", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp splitPow(final Dfp[] base, int a)" ], [ "pow", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp pow(Dfp base, int a)" ], [ "exp", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp exp(final Dfp a)" ], [ "expInternal", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp expInternal(final Dfp a)" ], [ "log", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp log(Dfp a)" ], [ "logInternal", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp[] logInternal(final Dfp[] a)" ], [ "pow", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp pow(Dfp x, final Dfp y)" ], [ "sinInternal", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp sinInternal(Dfp[] a)" ], [ "cosInternal", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp cosInternal(Dfp[] a)" ], [ "sin", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp sin(final Dfp a)" ], [ "cos", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp cos(Dfp a)" ], [ "tan", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp tan(final Dfp a)" ], [ "atanInternal", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp atanInternal(final Dfp a)" ], [ "atan", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp atan(final Dfp a)" ], [ "asin", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp asin(final Dfp a)" ], [ "acos", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp acos(Dfp a)" ], [ "copysign", "org.apache.commons.math3.dfp", "Dfp", "public static Dfp copysign(final Dfp x, final Dfp y)" ], [ "computeExp", "org.apache.commons.math3.dfp", "DfpField", "public static Dfp computeExp(final Dfp a, final Dfp one)" ], [ "computeLn", "org.apache.commons.math3.dfp", "DfpField", "public static Dfp computeLn(final Dfp a, final Dfp one, final Dfp two)" ], [ "getRandomGenerator", "org.apache.commons.math3.genetics", "GeneticAlgorithm", "public static synchronized RandomGenerator getRandomGenerator()" ], [ "randomPermutation", "org.apache.commons.math3.genetics", "RandomKey", "public static final List<Double> randomPermutation(final int l)" ], [ "identityPermutation", "org.apache.commons.math3.genetics", "RandomKey", "public static final List<Double> identityPermutation(final int l)" ], [ "comparatorPermutation", "org.apache.commons.math3.genetics", "RandomKey", "public static <S> List<Double> comparatorPermutation(final List<S> data, final Comparator<S> comparator)" ], [ "inducedPermutation", "org.apache.commons.math3.genetics", "RandomKey", "public static <S> List<Double> inducedPermutation(final List<S> originalData, final List<S> permutedData) throws DimensionMismatchException, MathIllegalArgumentException" ], [ "randomBinaryRepresentation", "org.apache.commons.math3.genetics", "BinaryChromosome", "public static List<Integer> randomBinaryRepresentation(int length)" ], [ "getAvailableLocales", "org.apache.commons.math3.geometry", "VectorFormat", "public static Locale[] getAvailableLocales()" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3DFormat", "public static Vector3DFormat getInstance()" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3DFormat", "public static Vector3DFormat getInstance(final Locale locale)" ], [ "angle", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T angle(final FieldVector3D<T> v1, final FieldVector3D<T> v2) throws MathArithmeticException" ], [ "angle", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T angle(final FieldVector3D<T> v1, final Vector3D v2) throws MathArithmeticException" ], [ "angle", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T angle(final Vector3D v1, final FieldVector3D<T> v2) throws MathArithmeticException" ], [ "dotProduct", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T dotProduct(final FieldVector3D<T> v1, final FieldVector3D<T> v2)" ], [ "dotProduct", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T dotProduct(final FieldVector3D<T> v1, final Vector3D v2)" ], [ "dotProduct", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T dotProduct(final Vector3D v1, final FieldVector3D<T> v2)" ], [ "crossProduct", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> FieldVector3D<T> crossProduct(final FieldVector3D<T> v1, final FieldVector3D<T> v2)" ], [ "crossProduct", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> FieldVector3D<T> crossProduct(final FieldVector3D<T> v1, final Vector3D v2)" ], [ "crossProduct", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> FieldVector3D<T> crossProduct(final Vector3D v1, final FieldVector3D<T> v2)" ], [ "distance1", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distance1(final FieldVector3D<T> v1, final FieldVector3D<T> v2)" ], [ "distance1", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distance1(final FieldVector3D<T> v1, final Vector3D v2)" ], [ "distance1", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distance1(final Vector3D v1, final FieldVector3D<T> v2)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distance(final FieldVector3D<T> v1, final FieldVector3D<T> v2)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distance(final FieldVector3D<T> v1, final Vector3D v2)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distance(final Vector3D v1, final FieldVector3D<T> v2)" ], [ "distanceInf", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distanceInf(final FieldVector3D<T> v1, final FieldVector3D<T> v2)" ], [ "distanceInf", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distanceInf(final FieldVector3D<T> v1, final Vector3D v2)" ], [ "distanceInf", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distanceInf(final Vector3D v1, final FieldVector3D<T> v2)" ], [ "distanceSq", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distanceSq(final FieldVector3D<T> v1, final FieldVector3D<T> v2)" ], [ "distanceSq", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distanceSq(final FieldVector3D<T> v1, final Vector3D v2)" ], [ "distanceSq", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distanceSq(final Vector3D v1, final FieldVector3D<T> v2)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.threed", "Rotation", "public static double distance(Rotation r1, Rotation r2)" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.threed", "Euclidean3D", "public static Euclidean3D getInstance()" ], [ "applyTo", "org.apache.commons.math3.geometry.euclidean.threed", "FieldRotation", "public static <T extends RealFieldElement<T>> FieldVector3D<T> applyTo(final Rotation r, final FieldVector3D<T> u)" ], [ "applyInverseTo", "org.apache.commons.math3.geometry.euclidean.threed", "FieldRotation", "public static <T extends RealFieldElement<T>> FieldVector3D<T> applyInverseTo(final Rotation r, final FieldVector3D<T> u)" ], [ "applyTo", "org.apache.commons.math3.geometry.euclidean.threed", "FieldRotation", "public static <T extends RealFieldElement<T>> FieldRotation<T> applyTo(final Rotation r1, final FieldRotation<T> rInner)" ], [ "applyInverseTo", "org.apache.commons.math3.geometry.euclidean.threed", "FieldRotation", "public static <T extends RealFieldElement<T>> FieldRotation<T> applyInverseTo(final Rotation rOuter, final FieldRotation<T> rInner)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.threed", "FieldRotation", "public static <T extends RealFieldElement<T>> T distance(final FieldRotation<T> r1, final FieldRotation<T> r2)" ], [ "angle", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static double angle(Vector3D v1, Vector3D v2) throws MathArithmeticException" ], [ "dotProduct", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static double dotProduct(Vector3D v1, Vector3D v2)" ], [ "crossProduct", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2)" ], [ "distance1", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static double distance1(Vector3D v1, Vector3D v2)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static double distance(Vector3D v1, Vector3D v2)" ], [ "distanceInf", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static double distanceInf(Vector3D v1, Vector3D v2)" ], [ "distanceSq", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static double distanceSq(Vector3D v1, Vector3D v2)" ], [ "intersection", "org.apache.commons.math3.geometry.euclidean.threed", "Plane", "public static Vector3D intersection(final Plane plane1, final Plane plane2, final Plane plane3)" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.oned", "Euclidean1D", "public static Euclidean1D getInstance()" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1DFormat", "public static Vector1DFormat getInstance()" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1DFormat", "public static Vector1DFormat getInstance(final Locale locale)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static double distance(Vector1D p1, Vector1D p2)" ], [ "distanceInf", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static double distanceInf(Vector1D p1, Vector1D p2)" ], [ "distanceSq", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static double distanceSq(Vector1D p1, Vector1D p2)" ], [ "reducePoints", "org.apache.commons.math3.geometry.euclidean.twod.hull", "AklToussaintHeuristic", "public static Collection<Vector2D> reducePoints(final Collection<Vector2D> points)" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2DFormat", "public static Vector2DFormat getInstance()" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2DFormat", "public static Vector2DFormat getInstance(final Locale locale)" ], [ "angle", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static double angle(Vector2D v1, Vector2D v2) throws MathArithmeticException" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static double distance(Vector2D p1, Vector2D p2)" ], [ "distanceInf", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static double distanceInf(Vector2D p1, Vector2D p2)" ], [ "distanceSq", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static double distanceSq(Vector2D p1, Vector2D p2)" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.twod", "Euclidean2D", "public static Euclidean2D getInstance()" ], [ "getTransform", "org.apache.commons.math3.geometry.euclidean.twod", "Line", "public static Transform<Euclidean2D, Euclidean1D> getTransform(final AffineTransform transform) throws MathIllegalArgumentException" ], [ "getTransform", "org.apache.commons.math3.geometry.euclidean.twod", "Line", "public static Transform<Euclidean2D, Euclidean1D> getTransform(final double cXX, final double cYX, final double cXY, final double cYY, final double cX1, final double cY1) throws MathIllegalArgumentException" ], [ "distance", "org.apache.commons.math3.geometry.spherical.oned", "S1Point", "public static double distance(S1Point p1, S1Point p2)" ], [ "getInstance", "org.apache.commons.math3.geometry.spherical.oned", "Sphere1D", "public static Sphere1D getInstance()" ], [ "getInstance", "org.apache.commons.math3.geometry.spherical.twod", "Sphere2D", "public static Sphere2D getInstance()" ], [ "getTransform", "org.apache.commons.math3.geometry.spherical.twod", "Circle", "public static Transform<Sphere2D, Sphere1D> getTransform(final Rotation rotation)" ], [ "distance", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static double distance(S2Point p1, S2Point p2)" ], [ "createAdaptor", "org.apache.commons.math3.random", "RandomAdaptor", "public static Random createAdaptor(RandomGenerator randomGenerator)" ], [ "createRandomGenerator", "org.apache.commons.math3.random", "RandomGeneratorFactory", "public static RandomGenerator createRandomGenerator(final Random rng)" ], [ "convertToLong", "org.apache.commons.math3.random", "RandomGeneratorFactory", "public static long convertToLong(int[] seed)" ], [ "getAvailableLocales", "org.apache.commons.math3.fraction", "BigFractionFormat", "public static Locale[] getAvailableLocales()" ], [ "formatBigFraction", "org.apache.commons.math3.fraction", "BigFractionFormat", "public static String formatBigFraction(final BigFraction f)" ], [ "getImproperInstance", "org.apache.commons.math3.fraction", "BigFractionFormat", "public static BigFractionFormat getImproperInstance()" ], [ "getImproperInstance", "org.apache.commons.math3.fraction", "BigFractionFormat", "public static BigFractionFormat getImproperInstance(final Locale locale)" ], [ "getProperInstance", "org.apache.commons.math3.fraction", "BigFractionFormat", "public static BigFractionFormat getProperInstance()" ], [ "getProperInstance", "org.apache.commons.math3.fraction", "BigFractionFormat", "public static BigFractionFormat getProperInstance(final Locale locale)" ], [ "getReducedFraction", "org.apache.commons.math3.fraction", "Fraction", "public static Fraction getReducedFraction(int numerator, int denominator)" ], [ "getReducedFraction", "org.apache.commons.math3.fraction", "BigFraction", "public static BigFraction getReducedFraction(final int numerator, final int denominator)" ], [ "getDefaultNumberFormat", "org.apache.commons.math3.fraction", "AbstractFormat", "protected static NumberFormat getDefaultNumberFormat()" ], [ "getDefaultNumberFormat", "org.apache.commons.math3.fraction", "AbstractFormat", "protected static NumberFormat getDefaultNumberFormat(final Locale locale)" ], [ "parseNextCharacter", "org.apache.commons.math3.fraction", "AbstractFormat", "protected static char parseNextCharacter(final String source, final ParsePosition pos)" ], [ "getAvailableLocales", "org.apache.commons.math3.fraction", "FractionFormat", "public static Locale[] getAvailableLocales()" ], [ "formatFraction", "org.apache.commons.math3.fraction", "FractionFormat", "public static String formatFraction(Fraction f)" ], [ "getImproperInstance", "org.apache.commons.math3.fraction", "FractionFormat", "public static FractionFormat getImproperInstance()" ], [ "getImproperInstance", "org.apache.commons.math3.fraction", "FractionFormat", "public static FractionFormat getImproperInstance(final Locale locale)" ], [ "getProperInstance", "org.apache.commons.math3.fraction", "FractionFormat", "public static FractionFormat getProperInstance()" ], [ "getProperInstance", "org.apache.commons.math3.fraction", "FractionFormat", "public static FractionFormat getProperInstance(final Locale locale)" ], [ "getDefaultNumberFormat", "org.apache.commons.math3.fraction", "FractionFormat", "protected static NumberFormat getDefaultNumberFormat()" ], [ "getInstance", "org.apache.commons.math3.fraction", "FractionField", "public static FractionField getInstance()" ], [ "getInstance", "org.apache.commons.math3.fraction", "BigFractionField", "public static BigFractionField getInstance()" ], [ "flatten", "org.apache.commons.math3.exception.util", "ArgUtils", "public static Object[] flatten(Object[] array)" ], [ "scaleArray", "org.apache.commons.math3.transform", "TransformUtils", "public static double[] scaleArray(double[] f, double d)" ], [ "scaleArray", "org.apache.commons.math3.transform", "TransformUtils", "public static Complex[] scaleArray(Complex[] f, double d)" ], [ "createRealImaginaryArray", "org.apache.commons.math3.transform", "TransformUtils", "public static double[][] createRealImaginaryArray(final Complex[] dataC)" ], [ "createComplexArray", "org.apache.commons.math3.transform", "TransformUtils", "public static Complex[] createComplexArray(final double[][] dataRI) throws DimensionMismatchException" ], [ "exactLog2", "org.apache.commons.math3.transform", "TransformUtils", "public static int exactLog2(final int n) throws MathIllegalArgumentException" ] ],
  "tokensProjectClassesNonPrivateStaticAttributes" : [ [ "PRIMES", "org.apache.commons.math3.primes", "SmallPrimes", "public static final int[] PRIMES = { 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171, 1181, 1187, 1193, 1201, 1213, 1217, 1223, 1229, 1231, 1237, 1249, 1259, 1277, 1279, 1283, 1289, 1291, 1297, 1301, 1303, 1307, 1319, 1321, 1327, 1361, 1367, 1373, 1381, 1399, 1409, 1423, 1427, 1429, 1433, 1439, 1447, 1451, 1453, 1459, 1471, 1481, 1483, 1487, 1489, 1493, 1499, 1511, 1523, 1531, 1543, 1549, 1553, 1559, 1567, 1571, 1579, 1583, 1597, 1601, 1607, 1609, 1613, 1619, 1621, 1627, 1637, 1657, 1663, 1667, 1669, 1693, 1697, 1699, 1709, 1721, 1723, 1733, 1741, 1747, 1753, 1759, 1777, 1783, 1787, 1789, 1801, 1811, 1823, 1831, 1847, 1861, 1867, 1871, 1873, 1877, 1879, 1889, 1901, 1907, 1913, 1931, 1933, 1949, 1951, 1973, 1979, 1987, 1993, 1997, 1999, 2003, 2011, 2017, 2027, 2029, 2039, 2053, 2063, 2069, 2081, 2083, 2087, 2089, 2099, 2111, 2113, 2129, 2131, 2137, 2141, 2143, 2153, 2161, 2179, 2203, 2207, 2213, 2221, 2237, 2239, 2243, 2251, 2267, 2269, 2273, 2281, 2287, 2293, 2297, 2309, 2311, 2333, 2339, 2341, 2347, 2351, 2357, 2371, 2377, 2381, 2383, 2389, 2393, 2399, 2411, 2417, 2423, 2437, 2441, 2447, 2459, 2467, 2473, 2477, 2503, 2521, 2531, 2539, 2543, 2549, 2551, 2557, 2579, 2591, 2593, 2609, 2617, 2621, 2633, 2647, 2657, 2659, 2663, 2671, 2677, 2683, 2687, 2689, 2693, 2699, 2707, 2711, 2713, 2719, 2729, 2731, 2741, 2749, 2753, 2767, 2777, 2789, 2791, 2797, 2801, 2803, 2819, 2833, 2837, 2843, 2851, 2857, 2861, 2879, 2887, 2897, 2903, 2909, 2917, 2927, 2939, 2953, 2957, 2963, 2969, 2971, 2999, 3001, 3011, 3019, 3023, 3037, 3041, 3049, 3061, 3067, 3079, 3083, 3089, 3109, 3119, 3121, 3137, 3163, 3167, 3169, 3181, 3187, 3191, 3203, 3209, 3217, 3221, 3229, 3251, 3253, 3257, 3259, 3271, 3299, 3301, 3307, 3313, 3319, 3323, 3329, 3331, 3343, 3347, 3359, 3361, 3371, 3373, 3389, 3391, 3407, 3413, 3433, 3449, 3457, 3461, 3463, 3467, 3469, 3491, 3499, 3511, 3517, 3527, 3529, 3533, 3539, 3541, 3547, 3557, 3559, 3571, 3581, 3583, 3593, 3607, 3613, 3617, 3623, 3631, 3637, 3643, 3659, 3671 };" ], [ "PRIMES_LAST", "org.apache.commons.math3.primes", "SmallPrimes", "public static final int PRIMES_LAST = PRIMES[PRIMES.length - 1];" ], [ "MIDPOINT_MAX_ITERATIONS_COUNT", "org.apache.commons.math3.analysis.integration", "MidPointIntegrator", "public static final int MIDPOINT_MAX_ITERATIONS_COUNT = 64;" ], [ "ROMBERG_MAX_ITERATIONS_COUNT", "org.apache.commons.math3.analysis.integration", "RombergIntegrator", "public static final int ROMBERG_MAX_ITERATIONS_COUNT = 32;" ], [ "SIMPSON_MAX_ITERATIONS_COUNT", "org.apache.commons.math3.analysis.integration", "SimpsonIntegrator", "public static final int SIMPSON_MAX_ITERATIONS_COUNT = 64;" ], [ "DEFAULT_ABSOLUTE_ACCURACY", "org.apache.commons.math3.analysis.integration", "BaseAbstractUnivariateIntegrator", "public static final double DEFAULT_ABSOLUTE_ACCURACY = 1.0e-15;" ], [ "DEFAULT_RELATIVE_ACCURACY", "org.apache.commons.math3.analysis.integration", "BaseAbstractUnivariateIntegrator", "public static final double DEFAULT_RELATIVE_ACCURACY = 1.0e-6;" ], [ "DEFAULT_MIN_ITERATIONS_COUNT", "org.apache.commons.math3.analysis.integration", "BaseAbstractUnivariateIntegrator", "public static final int DEFAULT_MIN_ITERATIONS_COUNT = 3;" ], [ "DEFAULT_MAX_ITERATIONS_COUNT", "org.apache.commons.math3.analysis.integration", "BaseAbstractUnivariateIntegrator", "public static final int DEFAULT_MAX_ITERATIONS_COUNT = Integer.MAX_VALUE;" ], [ "TRAPEZOID_MAX_ITERATIONS_COUNT", "org.apache.commons.math3.analysis.integration", "TrapezoidIntegrator", "public static final int TRAPEZOID_MAX_ITERATIONS_COUNT = 64;" ], [ "DEFAULT_ABSOLUTE_ACCURACY", "org.apache.commons.math3.analysis.solvers", "BaseSecantSolver", "protected static final double DEFAULT_ABSOLUTE_ACCURACY = 1e-6;" ], [ "DEFAULT_ABSOLUTE_ACCURACY", "org.apache.commons.math3.analysis.solvers", "SecantSolver", "protected static final double DEFAULT_ABSOLUTE_ACCURACY = 1e-6;" ], [ "DEFAULT_BANDWIDTH", "org.apache.commons.math3.analysis.interpolation", "LoessInterpolator", "public static final double DEFAULT_BANDWIDTH = 0.3;" ], [ "DEFAULT_ROBUSTNESS_ITERS", "org.apache.commons.math3.analysis.interpolation", "LoessInterpolator", "public static final int DEFAULT_ROBUSTNESS_ITERS = 2;" ], [ "DEFAULT_ACCURACY", "org.apache.commons.math3.analysis.interpolation", "LoessInterpolator", "public static final double DEFAULT_ACCURACY = 1e-12;" ], [ "serialVersionUID", "org.apache.commons.math3.analysis.interpolation", "NevilleInterpolator", "static final long serialVersionUID = 3003707660147873733L;" ], [ "DEFAULT_EXTEND", "org.apache.commons.math3.analysis.interpolation", "UnivariatePeriodicInterpolator", "public static final int DEFAULT_EXTEND = 5;" ], [ "DEFAULT_MICROSPHERE_ELEMENTS", "org.apache.commons.math3.analysis.interpolation", "MicrosphereInterpolator", "public static final int DEFAULT_MICROSPHERE_ELEMENTS = 2000;" ], [ "DEFAULT_BRIGHTNESS_EXPONENT", "org.apache.commons.math3.analysis.interpolation", "MicrosphereInterpolator", "public static final int DEFAULT_BRIGHTNESS_EXPONENT = 2;" ], [ "EPSILON", "org.apache.commons.math3.util", "Precision", "public static final double EPSILON;" ], [ "SAFE_MIN", "org.apache.commons.math3.util", "Precision", "public static final double SAFE_MIN;" ], [ "FREE", "org.apache.commons.math3.util", "OpenIntToDoubleHashMap", "protected static final byte FREE = 0;" ], [ "FULL", "org.apache.commons.math3.util", "OpenIntToDoubleHashMap", "protected static final byte FULL = 1;" ], [ "REMOVED", "org.apache.commons.math3.util", "OpenIntToDoubleHashMap", "protected static final byte REMOVED = 2;" ], [ "FREE", "org.apache.commons.math3.util", "OpenIntToFieldHashMap", "protected static final byte FREE = 0;" ], [ "FULL", "org.apache.commons.math3.util", "OpenIntToFieldHashMap", "protected static final byte FULL = 1;" ], [ "REMOVED", "org.apache.commons.math3.util", "OpenIntToFieldHashMap", "protected static final byte REMOVED = 2;" ], [ "PI", "org.apache.commons.math3.util", "FastMath", "public static final double PI = 105414357.0 / 33554432.0 + 1.984187159361080883e-9;" ], [ "E", "org.apache.commons.math3.util", "FastMath", "public static final double E = 2850325.0 / 1048576.0 + 8.254840070411028747e-8;" ], [ "EXP_INT_TABLE_MAX_INDEX", "org.apache.commons.math3.util", "FastMath", "static final int EXP_INT_TABLE_MAX_INDEX = 750;" ], [ "EXP_INT_TABLE_LEN", "org.apache.commons.math3.util", "FastMath", "static final int EXP_INT_TABLE_LEN = EXP_INT_TABLE_MAX_INDEX * 2;" ], [ "LN_MANT_LEN", "org.apache.commons.math3.util", "FastMath", "static final int LN_MANT_LEN = 1024;" ], [ "EXP_FRAC_TABLE_LEN", "org.apache.commons.math3.util", "FastMath", "static final int EXP_FRAC_TABLE_LEN = 1025;" ], [ "NAN", "org.apache.commons.math3.util", "FastMath", "public static final Split NAN = new Split(Double.NaN, 0);" ], [ "POSITIVE_INFINITY", "org.apache.commons.math3.util", "FastMath", "public static final Split POSITIVE_INFINITY = new Split(Double.POSITIVE_INFINITY, 0);" ], [ "NEGATIVE_INFINITY", "org.apache.commons.math3.util", "FastMath", "public static final Split NEGATIVE_INFINITY = new Split(Double.NEGATIVE_INFINITY, 0);" ], [ "NAN", "org.apache.commons.math3.util", "Split", "public static final Split NAN = new Split(Double.NaN, 0);" ], [ "POSITIVE_INFINITY", "org.apache.commons.math3.util", "Split", "public static final Split POSITIVE_INFINITY = new Split(Double.POSITIVE_INFINITY, 0);" ], [ "NEGATIVE_INFINITY", "org.apache.commons.math3.util", "Split", "public static final Split NEGATIVE_INFINITY = new Split(Double.NEGATIVE_INFINITY, 0);" ], [ "ADDITIVE_MODE", "org.apache.commons.math3.util", "ResizableDoubleArray", "public static final int ADDITIVE_MODE = 1;" ], [ "MULTIPLICATIVE_MODE", "org.apache.commons.math3.util", "ResizableDoubleArray", "public static final int MULTIPLICATIVE_MODE = 0;" ], [ "TWO_PI", "org.apache.commons.math3.util", "MathUtils", "public static final double TWO_PI = 2 * FastMath.PI;" ], [ "PI_SQUARED", "org.apache.commons.math3.util", "MathUtils", "public static final double PI_SQUARED = FastMath.PI * FastMath.PI;" ], [ "FACTORIALS", "org.apache.commons.math3.util", "CombinatoricsUtils", "static final long[] FACTORIALS = new long[] { 1l, 1l, 2l, 6l, 24l, 120l, 720l, 5040l, 40320l, 362880l, 3628800l, 39916800l, 479001600l, 6227020800l, 87178291200l, 1307674368000l, 20922789888000l, 355687428096000l, 6402373705728000l, 121645100408832000l, 2432902008176640000l };" ], [ "STIRLING_S2", "org.apache.commons.math3.util", "CombinatoricsUtils", "static final AtomicReference<long[][]> STIRLING_S2 = new AtomicReference<long[][]>(null);" ], [ "ZERO", "org.apache.commons.math3.util", "Decimal64", "public static final Decimal64 ZERO;" ], [ "ONE", "org.apache.commons.math3.util", "Decimal64", "public static final Decimal64 ONE;" ], [ "NEGATIVE_INFINITY", "org.apache.commons.math3.util", "Decimal64", "public static final Decimal64 NEGATIVE_INFINITY;" ], [ "POSITIVE_INFINITY", "org.apache.commons.math3.util", "Decimal64", "public static final Decimal64 POSITIVE_INFINITY;" ], [ "NAN", "org.apache.commons.math3.util", "Decimal64", "public static final Decimal64 NAN;" ], [ "ZERO", "org.apache.commons.math3.util", "BigReal", "public static final BigReal ZERO = new BigReal(BigDecimal.ZERO);" ], [ "ONE", "org.apache.commons.math3.util", "BigReal", "public static final BigReal ONE = new BigReal(BigDecimal.ONE);" ], [ "IDENTITY", "org.apache.commons.math3.complex", "Quaternion", "public static final Quaternion IDENTITY = new Quaternion(1, 0, 0, 0);" ], [ "ZERO", "org.apache.commons.math3.complex", "Quaternion", "public static final Quaternion ZERO = new Quaternion(0, 0, 0, 0);" ], [ "I", "org.apache.commons.math3.complex", "Quaternion", "public static final Quaternion I = new Quaternion(0, 1, 0, 0);" ], [ "J", "org.apache.commons.math3.complex", "Quaternion", "public static final Quaternion J = new Quaternion(0, 0, 1, 0);" ], [ "K", "org.apache.commons.math3.complex", "Quaternion", "public static final Quaternion K = new Quaternion(0, 0, 0, 1);" ], [ "I", "org.apache.commons.math3.complex", "Complex", "public static final Complex I = new Complex(0.0, 1.0);" ], [ "NaN", "org.apache.commons.math3.complex", "Complex", "public static final Complex NaN = new Complex(Double.NaN, Double.NaN);" ], [ "INF", "org.apache.commons.math3.complex", "Complex", "public static final Complex INF = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);" ], [ "ONE", "org.apache.commons.math3.complex", "Complex", "public static final Complex ONE = new Complex(1.0, 0.0);" ], [ "ZERO", "org.apache.commons.math3.complex", "Complex", "public static final Complex ZERO = new Complex(0.0, 0.0);" ], [ "MINIMUM_PROBLEM_DIMENSION", "org.apache.commons.math3.optimization.direct", "BOBYQAOptimizer", "public static final int MINIMUM_PROBLEM_DIMENSION = 2;" ], [ "DEFAULT_INITIAL_RADIUS", "org.apache.commons.math3.optimization.direct", "BOBYQAOptimizer", "public static final double DEFAULT_INITIAL_RADIUS = 10.0;" ], [ "DEFAULT_STOPPING_RADIUS", "org.apache.commons.math3.optimization.direct", "BOBYQAOptimizer", "public static final double DEFAULT_STOPPING_RADIUS = 1E-8;" ], [ "DEFAULT_CHECKFEASABLECOUNT", "org.apache.commons.math3.optimization.direct", "CMAESOptimizer", "public static final int DEFAULT_CHECKFEASABLECOUNT = 0;" ], [ "DEFAULT_STOPFITNESS", "org.apache.commons.math3.optimization.direct", "CMAESOptimizer", "public static final double DEFAULT_STOPFITNESS = 0;" ], [ "DEFAULT_ISACTIVECMA", "org.apache.commons.math3.optimization.direct", "CMAESOptimizer", "public static final boolean DEFAULT_ISACTIVECMA = true;" ], [ "DEFAULT_MAXITERATIONS", "org.apache.commons.math3.optimization.direct", "CMAESOptimizer", "public static final int DEFAULT_MAXITERATIONS = 30000;" ], [ "DEFAULT_DIAGONALONLY", "org.apache.commons.math3.optimization.direct", "CMAESOptimizer", "public static final int DEFAULT_DIAGONALONLY = 0;" ], [ "DEFAULT_RANDOMGENERATOR", "org.apache.commons.math3.optimization.direct", "CMAESOptimizer", "public static final RandomGenerator DEFAULT_RANDOMGENERATOR = new MersenneTwister();" ], [ "DEFAULT_MAX_ITERATIONS", "org.apache.commons.math3.optimization.linear", "AbstractLinearOptimizer", "public static final int DEFAULT_MAX_ITERATIONS = 100;" ], [ "DEFAULT_FORMAT", "org.apache.commons.math3.linear", "MatrixUtils", "public static final RealMatrixFormat DEFAULT_FORMAT = RealMatrixFormat.getInstance();" ], [ "OCTAVE_FORMAT", "org.apache.commons.math3.linear", "MatrixUtils", "public static final RealMatrixFormat OCTAVE_FORMAT = new RealMatrixFormat(\"[\", \"]\", \"\", \"\", \"; \", \", \");" ], [ "DEFAULT_ZERO_TOLERANCE", "org.apache.commons.math3.linear", "OpenMapRealVector", "public static final double DEFAULT_ZERO_TOLERANCE = 1.0e-12;" ], [ "BLOCK_SIZE", "org.apache.commons.math3.linear", "BlockFieldMatrix", "public static final int BLOCK_SIZE = 36;" ], [ "OPERATOR", "org.apache.commons.math3.linear", "ConjugateGradient", "public static final String OPERATOR = \"operator\";" ], [ "VECTOR", "org.apache.commons.math3.linear", "ConjugateGradient", "public static final String VECTOR = \"vector\";" ], [ "DEFAULT_RELATIVE_SYMMETRY_THRESHOLD", "org.apache.commons.math3.linear", "CholeskyDecomposition", "public static final double DEFAULT_RELATIVE_SYMMETRY_THRESHOLD = 1.0e-15;" ], [ "DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD", "org.apache.commons.math3.linear", "CholeskyDecomposition", "public static final double DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD = 1.0e-10;" ], [ "BLOCK_SIZE", "org.apache.commons.math3.linear", "BlockRealMatrix", "public static final int BLOCK_SIZE = 52;" ], [ "CBRT_MACH_PREC", "org.apache.commons.math3.linear", "SymmLQ", "static final double CBRT_MACH_PREC;" ], [ "MACH_PREC", "org.apache.commons.math3.linear", "SymmLQ", "static final double MACH_PREC;" ], [ "CBRT_MACH_PREC", "org.apache.commons.math3.linear", "State", "static final double CBRT_MACH_PREC;" ], [ "MACH_PREC", "org.apache.commons.math3.linear", "State", "static final double MACH_PREC;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "CauchyDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "SOLVER_DEFAULT_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "AbstractRealDistribution", "public static final double SOLVER_DEFAULT_ABSOLUTE_ACCURACY = 1e-6;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "TDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "ChiSquaredDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "BetaDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "NormalDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "UniformRealDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "WeibullDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "NakagamiDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "ExponentialDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "LogNormalDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "ParetoDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "FDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_MAX_ITERATIONS", "org.apache.commons.math3.distribution", "PoissonDistribution", "public static final int DEFAULT_MAX_ITERATIONS = 10000000;" ], [ "DEFAULT_EPSILON", "org.apache.commons.math3.distribution", "PoissonDistribution", "public static final double DEFAULT_EPSILON = 1e-12;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "GammaDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_ULPS", "org.apache.commons.math3.optim.linear", "SimplexSolver", "static final int DEFAULT_ULPS = 10;" ], [ "DEFAULT_CUT_OFF", "org.apache.commons.math3.optim.linear", "SimplexSolver", "static final double DEFAULT_CUT_OFF = 1e-10;" ], [ "MINIMUM_PROBLEM_DIMENSION", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv", "BOBYQAOptimizer", "public static final int MINIMUM_PROBLEM_DIMENSION = 2;" ], [ "DEFAULT_INITIAL_RADIUS", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv", "BOBYQAOptimizer", "public static final double DEFAULT_INITIAL_RADIUS = 10.0;" ], [ "DEFAULT_STOPPING_RADIUS", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv", "BOBYQAOptimizer", "public static final double DEFAULT_STOPPING_RADIUS = 1E-8;" ], [ "GAMMA", "org.apache.commons.math3.special", "Gamma", "public static final double GAMMA = 0.577215664901532860606512090082;" ], [ "LANCZOS_G", "org.apache.commons.math3.special", "Gamma", "public static final double LANCZOS_G = 607.0 / 128.0;" ], [ "DEFAULT_NAN_STRATEGY", "org.apache.commons.math3.stat.ranking", "NaturalRanking", "public static final NaNStrategy DEFAULT_NAN_STRATEGY = NaNStrategy.FAILED;" ], [ "DEFAULT_TIES_STRATEGY", "org.apache.commons.math3.stat.ranking", "NaturalRanking", "public static final TiesStrategy DEFAULT_TIES_STRATEGY = TiesStrategy.AVERAGE;" ], [ "MAXIMUM_PARTIAL_SUM_COUNT", "org.apache.commons.math3.stat.inference", "KolmogorovSmirnovTest", "protected static final int MAXIMUM_PARTIAL_SUM_COUNT = 100000;" ], [ "KS_SUM_CAUCHY_CRITERION", "org.apache.commons.math3.stat.inference", "KolmogorovSmirnovTest", "protected static final double KS_SUM_CAUCHY_CRITERION = 1E-20;" ], [ "PG_SUM_RELATIVE_ERROR", "org.apache.commons.math3.stat.inference", "KolmogorovSmirnovTest", "protected static final double PG_SUM_RELATIVE_ERROR = 1.0e-10;" ], [ "SMALL_SAMPLE_PRODUCT", "org.apache.commons.math3.stat.inference", "KolmogorovSmirnovTest", "protected static final int SMALL_SAMPLE_PRODUCT = 200;" ], [ "LARGE_SAMPLE_PRODUCT", "org.apache.commons.math3.stat.inference", "KolmogorovSmirnovTest", "protected static final int LARGE_SAMPLE_PRODUCT = 10000;" ], [ "MONTE_CARLO_ITERATIONS", "org.apache.commons.math3.stat.inference", "KolmogorovSmirnovTest", "protected static final int MONTE_CARLO_ITERATIONS = 1000000;" ], [ "INFINITE_WINDOW", "org.apache.commons.math3.stat.descriptive", "DescriptiveStatistics", "public static final int INFINITE_WINDOW = -1;" ], [ "UPSIDE_VARIANCE", "org.apache.commons.math3.stat.descriptive.moment", "SemiVariance", "public static final Direction UPSIDE_VARIANCE = Direction.UPSIDE;" ], [ "DOWNSIDE_VARIANCE", "org.apache.commons.math3.stat.descriptive.moment", "SemiVariance", "public static final Direction DOWNSIDE_VARIANCE = Direction.DOWNSIDE;" ], [ "COMPARATOR", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "static final Comparator<PairNeuronDouble> COMPARATOR = new Comparator<PairNeuronDouble>() {\n\n    /**\n     * {@inheritDoc}\n     */\n    public int compare(PairNeuronDouble o1, PairNeuronDouble o2) {\n        return Double.compare(o1.value, o2.value);\n    }\n};" ], [ "COMPARATOR", "org.apache.commons.math3.ml.neuralnet", "PairNeuronDouble", "static final Comparator<PairNeuronDouble> COMPARATOR = new Comparator<PairNeuronDouble>() {\n\n    /**\n     * {@inheritDoc}\n     */\n    public int compare(PairNeuronDouble o1, PairNeuronDouble o2) {\n        return Double.compare(o1.value, o2.value);\n    }\n};" ], [ "RADIX", "org.apache.commons.math3.dfp", "Dfp", "public static final int RADIX = 10000;" ], [ "MIN_EXP", "org.apache.commons.math3.dfp", "Dfp", "public static final int MIN_EXP = -32767;" ], [ "MAX_EXP", "org.apache.commons.math3.dfp", "Dfp", "public static final int MAX_EXP = 32768;" ], [ "ERR_SCALE", "org.apache.commons.math3.dfp", "Dfp", "public static final int ERR_SCALE = 32760;" ], [ "FINITE", "org.apache.commons.math3.dfp", "Dfp", "public static final byte FINITE = 0;" ], [ "INFINITE", "org.apache.commons.math3.dfp", "Dfp", "public static final byte INFINITE = 1;" ], [ "SNAN", "org.apache.commons.math3.dfp", "Dfp", "public static final byte SNAN = 2;" ], [ "QNAN", "org.apache.commons.math3.dfp", "Dfp", "public static final byte QNAN = 3;" ], [ "FLAG_INVALID", "org.apache.commons.math3.dfp", "DfpField", "public static final int FLAG_INVALID = 1;" ], [ "FLAG_DIV_ZERO", "org.apache.commons.math3.dfp", "DfpField", "public static final int FLAG_DIV_ZERO = 2;" ], [ "FLAG_OVERFLOW", "org.apache.commons.math3.dfp", "DfpField", "public static final int FLAG_OVERFLOW = 4;" ], [ "FLAG_UNDERFLOW", "org.apache.commons.math3.dfp", "DfpField", "public static final int FLAG_UNDERFLOW = 8;" ], [ "FLAG_INEXACT", "org.apache.commons.math3.dfp", "DfpField", "public static final int FLAG_INEXACT = 16;" ], [ "DEFAULT_PREFIX", "org.apache.commons.math3.geometry", "VectorFormat", "public static final String DEFAULT_PREFIX = \"{\";" ], [ "DEFAULT_SUFFIX", "org.apache.commons.math3.geometry", "VectorFormat", "public static final String DEFAULT_SUFFIX = \"}\";" ], [ "DEFAULT_SEPARATOR", "org.apache.commons.math3.geometry", "VectorFormat", "public static final String DEFAULT_SEPARATOR = \"; \";" ], [ "XYZ", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder XYZ = new RotationOrder(\"XYZ\", Vector3D.PLUS_I, Vector3D.PLUS_J, Vector3D.PLUS_K);" ], [ "XZY", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder XZY = new RotationOrder(\"XZY\", Vector3D.PLUS_I, Vector3D.PLUS_K, Vector3D.PLUS_J);" ], [ "YXZ", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder YXZ = new RotationOrder(\"YXZ\", Vector3D.PLUS_J, Vector3D.PLUS_I, Vector3D.PLUS_K);" ], [ "YZX", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder YZX = new RotationOrder(\"YZX\", Vector3D.PLUS_J, Vector3D.PLUS_K, Vector3D.PLUS_I);" ], [ "ZXY", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder ZXY = new RotationOrder(\"ZXY\", Vector3D.PLUS_K, Vector3D.PLUS_I, Vector3D.PLUS_J);" ], [ "ZYX", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder ZYX = new RotationOrder(\"ZYX\", Vector3D.PLUS_K, Vector3D.PLUS_J, Vector3D.PLUS_I);" ], [ "XYX", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder XYX = new RotationOrder(\"XYX\", Vector3D.PLUS_I, Vector3D.PLUS_J, Vector3D.PLUS_I);" ], [ "XZX", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder XZX = new RotationOrder(\"XZX\", Vector3D.PLUS_I, Vector3D.PLUS_K, Vector3D.PLUS_I);" ], [ "YXY", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder YXY = new RotationOrder(\"YXY\", Vector3D.PLUS_J, Vector3D.PLUS_I, Vector3D.PLUS_J);" ], [ "YZY", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder YZY = new RotationOrder(\"YZY\", Vector3D.PLUS_J, Vector3D.PLUS_K, Vector3D.PLUS_J);" ], [ "ZXZ", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder ZXZ = new RotationOrder(\"ZXZ\", Vector3D.PLUS_K, Vector3D.PLUS_I, Vector3D.PLUS_K);" ], [ "ZYZ", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder ZYZ = new RotationOrder(\"ZYZ\", Vector3D.PLUS_K, Vector3D.PLUS_J, Vector3D.PLUS_K);" ], [ "IDENTITY", "org.apache.commons.math3.geometry.euclidean.threed", "Rotation", "public static final Rotation IDENTITY = new Rotation(1.0, 0.0, 0.0, 0.0, false);" ], [ "ZERO", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D ZERO = new Vector3D(0, 0, 0);" ], [ "PLUS_I", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D PLUS_I = new Vector3D(1, 0, 0);" ], [ "MINUS_I", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D MINUS_I = new Vector3D(-1, 0, 0);" ], [ "PLUS_J", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D PLUS_J = new Vector3D(0, 1, 0);" ], [ "MINUS_J", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D MINUS_J = new Vector3D(0, -1, 0);" ], [ "PLUS_K", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D PLUS_K = new Vector3D(0, 0, 1);" ], [ "MINUS_K", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D MINUS_K = new Vector3D(0, 0, -1);" ], [ "NaN", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D NaN = new Vector3D(Double.NaN, Double.NaN, Double.NaN);" ], [ "POSITIVE_INFINITY", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D POSITIVE_INFINITY = new Vector3D(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);" ], [ "NEGATIVE_INFINITY", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D NEGATIVE_INFINITY = new Vector3D(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);" ], [ "ZERO", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static final Vector1D ZERO = new Vector1D(0.0);" ], [ "ONE", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static final Vector1D ONE = new Vector1D(1.0);" ], [ "NaN", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static final Vector1D NaN = new Vector1D(Double.NaN);" ], [ "POSITIVE_INFINITY", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static final Vector1D POSITIVE_INFINITY = new Vector1D(Double.POSITIVE_INFINITY);" ], [ "NEGATIVE_INFINITY", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static final Vector1D NEGATIVE_INFINITY = new Vector1D(Double.NEGATIVE_INFINITY);" ], [ "ZERO", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static final Vector2D ZERO = new Vector2D(0, 0);" ], [ "NaN", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static final Vector2D NaN = new Vector2D(Double.NaN, Double.NaN);" ], [ "POSITIVE_INFINITY", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static final Vector2D POSITIVE_INFINITY = new Vector2D(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);" ], [ "NEGATIVE_INFINITY", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static final Vector2D NEGATIVE_INFINITY = new Vector2D(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);" ], [ "NaN", "org.apache.commons.math3.geometry.spherical.oned", "S1Point", "public static final S1Point NaN = new S1Point(Double.NaN, Vector2D.NaN);" ], [ "PLUS_I", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point PLUS_I = new S2Point(0, 0.5 * FastMath.PI, Vector3D.PLUS_I);" ], [ "PLUS_J", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point PLUS_J = new S2Point(0.5 * FastMath.PI, 0.5 * FastMath.PI, Vector3D.PLUS_J);" ], [ "PLUS_K", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point PLUS_K = new S2Point(0, 0, Vector3D.PLUS_K);" ], [ "MINUS_I", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point MINUS_I = new S2Point(FastMath.PI, 0.5 * FastMath.PI, Vector3D.MINUS_I);" ], [ "MINUS_J", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point MINUS_J = new S2Point(1.5 * FastMath.PI, 0.5 * FastMath.PI, Vector3D.MINUS_J);" ], [ "MINUS_K", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point MINUS_K = new S2Point(0, FastMath.PI, Vector3D.MINUS_K);" ], [ "NaN", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point NaN = new S2Point(Double.NaN, Double.NaN, Vector3D.NaN);" ], [ "DIGEST_MODE", "org.apache.commons.math3.random", "ValueServer", "public static final int DIGEST_MODE = 0;" ], [ "REPLAY_MODE", "org.apache.commons.math3.random", "ValueServer", "public static final int REPLAY_MODE = 1;" ], [ "UNIFORM_MODE", "org.apache.commons.math3.random", "ValueServer", "public static final int UNIFORM_MODE = 2;" ], [ "EXPONENTIAL_MODE", "org.apache.commons.math3.random", "ValueServer", "public static final int EXPONENTIAL_MODE = 3;" ], [ "GAUSSIAN_MODE", "org.apache.commons.math3.random", "ValueServer", "public static final int GAUSSIAN_MODE = 4;" ], [ "CONSTANT_MODE", "org.apache.commons.math3.random", "ValueServer", "public static final int CONSTANT_MODE = 5;" ], [ "DEFAULT_BIN_COUNT", "org.apache.commons.math3.random", "EmpiricalDistribution", "public static final int DEFAULT_BIN_COUNT = 1000;" ], [ "TWO", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction TWO = new Fraction(2, 1);" ], [ "ONE", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction ONE = new Fraction(1, 1);" ], [ "ZERO", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction ZERO = new Fraction(0, 1);" ], [ "FOUR_FIFTHS", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction FOUR_FIFTHS = new Fraction(4, 5);" ], [ "ONE_FIFTH", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction ONE_FIFTH = new Fraction(1, 5);" ], [ "ONE_HALF", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction ONE_HALF = new Fraction(1, 2);" ], [ "ONE_QUARTER", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction ONE_QUARTER = new Fraction(1, 4);" ], [ "ONE_THIRD", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction ONE_THIRD = new Fraction(1, 3);" ], [ "THREE_FIFTHS", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction THREE_FIFTHS = new Fraction(3, 5);" ], [ "THREE_QUARTERS", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction THREE_QUARTERS = new Fraction(3, 4);" ], [ "TWO_FIFTHS", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction TWO_FIFTHS = new Fraction(2, 5);" ], [ "TWO_QUARTERS", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction TWO_QUARTERS = new Fraction(2, 4);" ], [ "TWO_THIRDS", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction TWO_THIRDS = new Fraction(2, 3);" ], [ "MINUS_ONE", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction MINUS_ONE = new Fraction(-1, 1);" ], [ "TWO", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction TWO = new BigFraction(2);" ], [ "ONE", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction ONE = new BigFraction(1);" ], [ "ZERO", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction ZERO = new BigFraction(0);" ], [ "MINUS_ONE", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction MINUS_ONE = new BigFraction(-1);" ], [ "FOUR_FIFTHS", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction FOUR_FIFTHS = new BigFraction(4, 5);" ], [ "ONE_FIFTH", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction ONE_FIFTH = new BigFraction(1, 5);" ], [ "ONE_HALF", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction ONE_HALF = new BigFraction(1, 2);" ], [ "ONE_QUARTER", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction ONE_QUARTER = new BigFraction(1, 4);" ], [ "ONE_THIRD", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction ONE_THIRD = new BigFraction(1, 3);" ], [ "THREE_FIFTHS", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction THREE_FIFTHS = new BigFraction(3, 5);" ], [ "THREE_QUARTERS", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction THREE_QUARTERS = new BigFraction(3, 4);" ], [ "TWO_FIFTHS", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction TWO_FIFTHS = new BigFraction(2, 5);" ], [ "TWO_QUARTERS", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction TWO_QUARTERS = new BigFraction(2, 4);" ], [ "TWO_THIRDS", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction TWO_THIRDS = new BigFraction(2, 3);" ], [ "INTEGER_ZERO", "org.apache.commons.math3.exception", "MathIllegalNumberException", "protected static final Integer INTEGER_ZERO = Integer.valueOf(0);" ], [ "serialVersionUID", "org.apache.commons.math3.transform", "FastSineTransformer", "static final long serialVersionUID = 20120211L;" ], [ "serialVersionUID", "org.apache.commons.math3.transform", "FastFourierTransformer", "static final long serialVersionUID = 20120210L;" ], [ "serialVersionUID", "org.apache.commons.math3.transform", "FastCosineTransformer", "static final long serialVersionUID = 20120212L;" ], [ "serialVersionUID", "org.apache.commons.math3.transform", "FastHadamardTransformer", "static final long serialVersionUID = 20120211L;" ] ],
  "tokensMethodJavadocValues" : [ ],
  "tokensMethodArguments" : [ ],
  "tokensMethodVariablesNonPrivateNonStaticNonVoidMethods" : [ [ "copySign", "org.apache.commons.math3", "RealFieldElement", "public abstract T copySign(double arg0)" ], [ "getField", "org.apache.commons.math3", "FieldElement", "public abstract Field<T> getField()" ], [ "sin", "org.apache.commons.math3", "RealFieldElement", "public abstract T sin()" ], [ "linearCombination", "org.apache.commons.math3", "RealFieldElement", "public abstract T linearCombination(double arg0, T arg1, double arg2, T arg3)" ], [ "divide", "org.apache.commons.math3", "FieldElement", "public abstract T divide(T arg0) throws NullArgumentException, MathArithmeticException" ], [ "atan2", "org.apache.commons.math3.dfp", "Dfp", "public Dfp atan2(final Dfp x) throws DimensionMismatchException" ], [ "linearCombination", "org.apache.commons.math3.dfp", "Dfp", "public Dfp linearCombination(final Dfp a1, final Dfp b1, final Dfp a2, final Dfp b2)" ], [ "rint", "org.apache.commons.math3", "RealFieldElement", "public abstract T rint()" ], [ "power10K", "org.apache.commons.math3.dfp", "Dfp", "public Dfp power10K(final int e)" ], [ "getReal", "org.apache.commons.math3.dfp", "Dfp", "public double getReal()" ], [ "abs", "org.apache.commons.math3", "RealFieldElement", "public abstract T abs()" ], [ "linearCombination", "org.apache.commons.math3", "RealFieldElement", "public abstract T linearCombination(double arg0, T arg1, double arg2, T arg3, double arg4, T arg5, double arg6, T arg7)" ], [ "pow", "org.apache.commons.math3.dfp", "Dfp", "public Dfp pow(final double p)" ], [ "expm1", "org.apache.commons.math3.dfp", "Dfp", "public Dfp expm1()" ], [ "tan", "org.apache.commons.math3.dfp", "Dfp", "public Dfp tan()" ], [ "scalb", "org.apache.commons.math3", "RealFieldElement", "public abstract T scalb(int arg0)" ], [ "multiply", "org.apache.commons.math3.dfp", "Dfp", "public Dfp multiply(final int x)" ], [ "add", "org.apache.commons.math3.dfp", "Dfp", "public Dfp add(final double a)" ], [ "cos", "org.apache.commons.math3.dfp", "Dfp", "public Dfp cos()" ], [ "abs", "org.apache.commons.math3.dfp", "Dfp", "public Dfp abs()" ], [ "remainder", "org.apache.commons.math3", "RealFieldElement", "public abstract T remainder(double arg0)" ], [ "power10", "org.apache.commons.math3.dfp", "Dfp", "public Dfp power10(final int e)" ], [ "intValue", "org.apache.commons.math3.dfp", "Dfp", "public int intValue()" ], [ "log", "org.apache.commons.math3.dfp", "Dfp", "public Dfp log()" ], [ "isNaN", "org.apache.commons.math3.dfp", "Dfp", "public boolean isNaN()" ], [ "classify", "org.apache.commons.math3.dfp", "Dfp", "public int classify()" ], [ "clone", "java.lang", "Object", "protected native Object clone() throws CloneNotSupportedException" ], [ "copySign", "org.apache.commons.math3.dfp", "Dfp", "public Dfp copySign(final Dfp s)" ], [ "ceil", "org.apache.commons.math3.dfp", "Dfp", "public Dfp ceil()" ], [ "add", "org.apache.commons.math3", "FieldElement", "public abstract T add(T arg0) throws NullArgumentException" ], [ "unequal", "org.apache.commons.math3.dfp", "Dfp", "public boolean unequal(final Dfp x)" ], [ "multiply", "org.apache.commons.math3.dfp", "Dfp", "public Dfp multiply(final Dfp x)" ], [ "newInstance", "org.apache.commons.math3.dfp", "Dfp", "public Dfp newInstance(final String s)" ], [ "atanh", "org.apache.commons.math3.dfp", "Dfp", "public Dfp atanh()" ], [ "positiveOrNull", "org.apache.commons.math3.dfp", "Dfp", "public boolean positiveOrNull()" ], [ "sinh", "org.apache.commons.math3", "RealFieldElement", "public abstract T sinh()" ], [ "nextAfter", "org.apache.commons.math3.dfp", "Dfp", "public Dfp nextAfter(final Dfp x)" ], [ "linearCombination", "org.apache.commons.math3.dfp", "Dfp", "public Dfp linearCombination(final Dfp a1, final Dfp b1, final Dfp a2, final Dfp b2, final Dfp a3, final Dfp b3, final Dfp a4, final Dfp b4)" ], [ "tanh", "org.apache.commons.math3.dfp", "Dfp", "public Dfp tanh()" ], [ "remainder", "org.apache.commons.math3", "RealFieldElement", "public abstract T remainder(T arg0) throws DimensionMismatchException" ], [ "cbrt", "org.apache.commons.math3.dfp", "Dfp", "public Dfp cbrt()" ], [ "hypot", "org.apache.commons.math3", "RealFieldElement", "public abstract T hypot(T arg0) throws DimensionMismatchException" ], [ "linearCombination", "org.apache.commons.math3.dfp", "Dfp", "public Dfp linearCombination(final double a1, final Dfp b1, final double a2, final Dfp b2, final double a3, final Dfp b3)" ], [ "newInstance", "org.apache.commons.math3.dfp", "Dfp", "public Dfp newInstance(final long x)" ], [ "getRadixDigits", "org.apache.commons.math3.dfp", "Dfp", "public int getRadixDigits()" ], [ "asinh", "org.apache.commons.math3.dfp", "Dfp", "public Dfp asinh()" ], [ "strictlyPositive", "org.apache.commons.math3.dfp", "Dfp", "public boolean strictlyPositive()" ], [ "log", "org.apache.commons.math3", "RealFieldElement", "public abstract T log()" ], [ "cosh", "org.apache.commons.math3.dfp", "Dfp", "public Dfp cosh()" ], [ "pow", "org.apache.commons.math3", "RealFieldElement", "public abstract T pow(double arg0)" ], [ "toSplitDouble", "org.apache.commons.math3.dfp", "Dfp", "public double[] toSplitDouble()" ], [ "multiply", "org.apache.commons.math3", "RealFieldElement", "public abstract T multiply(double arg0)" ], [ "getField", "org.apache.commons.math3.dfp", "Dfp", "public DfpField getField()" ], [ "toDouble", "org.apache.commons.math3.dfp", "Dfp", "public double toDouble()" ], [ "round", "org.apache.commons.math3.dfp", "Dfp", "protected int round(int n)" ], [ "linearCombination", "org.apache.commons.math3", "RealFieldElement", "public abstract T linearCombination(T arg0, T arg1, T arg2, T arg3, T arg4, T arg5, T arg6, T arg7)" ], [ "multiply", "org.apache.commons.math3", "FieldElement", "public abstract T multiply(T arg0) throws NullArgumentException" ], [ "acosh", "org.apache.commons.math3.dfp", "Dfp", "public Dfp acosh()" ], [ "cos", "org.apache.commons.math3", "RealFieldElement", "public abstract T cos()" ], [ "dotrap", "org.apache.commons.math3.dfp", "Dfp", "public Dfp dotrap(int type, String what, Dfp oper, Dfp result)" ], [ "asin", "org.apache.commons.math3", "RealFieldElement", "public abstract T asin()" ], [ "newInstance", "org.apache.commons.math3.dfp", "Dfp", "public Dfp newInstance(final byte sig, final byte code)" ], [ "copySign", "org.apache.commons.math3.dfp", "Dfp", "public Dfp copySign(final double s)" ], [ "atan", "org.apache.commons.math3", "RealFieldElement", "public abstract T atan()" ], [ "atan2", "org.apache.commons.math3", "RealFieldElement", "public abstract T atan2(T arg0) throws DimensionMismatchException" ], [ "remainder", "org.apache.commons.math3.dfp", "Dfp", "public Dfp remainder(final Dfp d)" ], [ "linearCombination", "org.apache.commons.math3", "RealFieldElement", "public abstract T linearCombination(T arg0, T arg1, T arg2, T arg3)" ], [ "pow", "org.apache.commons.math3.dfp", "Dfp", "public Dfp pow(final int n)" ], [ "log1p", "org.apache.commons.math3.dfp", "Dfp", "public Dfp log1p()" ], [ "divide", "org.apache.commons.math3.dfp", "Dfp", "public Dfp divide(int divisor)" ], [ "sqrt", "org.apache.commons.math3.dfp", "Dfp", "public Dfp sqrt()" ], [ "getOne", "org.apache.commons.math3.dfp", "Dfp", "public Dfp getOne()" ], [ "atanh", "org.apache.commons.math3", "RealFieldElement", "public abstract T atanh()" ], [ "negativeOrNull", "org.apache.commons.math3.dfp", "Dfp", "public boolean negativeOrNull()" ], [ "pow", "org.apache.commons.math3", "RealFieldElement", "public abstract T pow(T arg0) throws DimensionMismatchException" ], [ "isZero", "org.apache.commons.math3.dfp", "Dfp", "public boolean isZero()" ], [ "align", "org.apache.commons.math3.dfp", "Dfp", "protected int align(int e)" ], [ "scalb", "org.apache.commons.math3.dfp", "Dfp", "public Dfp scalb(final int n)" ], [ "rootN", "org.apache.commons.math3", "RealFieldElement", "public abstract T rootN(int arg0)" ], [ "newInstance", "org.apache.commons.math3.dfp", "Dfp", "public Dfp newInstance(final double x)" ], [ "reciprocal", "org.apache.commons.math3.dfp", "Dfp", "public Dfp reciprocal()" ], [ "trunc", "org.apache.commons.math3.dfp", "Dfp", "protected Dfp trunc(final DfpField.RoundingMode rmode)" ], [ "intLog10", "org.apache.commons.math3.dfp", "Dfp", "public int intLog10()" ], [ "expm1", "org.apache.commons.math3", "RealFieldElement", "public abstract T expm1()" ], [ "log10", "org.apache.commons.math3.dfp", "Dfp", "public int log10()" ], [ "linearCombination", "org.apache.commons.math3.dfp", "Dfp", "public Dfp linearCombination(final Dfp[] a, final Dfp[] b) throws DimensionMismatchException" ], [ "cosh", "org.apache.commons.math3", "RealFieldElement", "public abstract T cosh()" ], [ "rint", "org.apache.commons.math3.dfp", "Dfp", "public Dfp rint()" ], [ "floor", "org.apache.commons.math3", "RealFieldElement", "public abstract T floor()" ], [ "cbrt", "org.apache.commons.math3", "RealFieldElement", "public abstract T cbrt()" ], [ "floor", "org.apache.commons.math3.dfp", "Dfp", "public Dfp floor()" ], [ "strictlyNegative", "org.apache.commons.math3.dfp", "Dfp", "public boolean strictlyNegative()" ], [ "negate", "org.apache.commons.math3", "FieldElement", "public abstract T negate()" ], [ "trap", "org.apache.commons.math3.dfp", "Dfp", "protected Dfp trap(int type, String what, Dfp oper, Dfp def, Dfp result)" ], [ "dfp2string", "org.apache.commons.math3.dfp", "Dfp", "protected String dfp2string()" ], [ "lessThan", "org.apache.commons.math3.dfp", "Dfp", "public boolean lessThan(final Dfp x)" ], [ "dfp2sci", "org.apache.commons.math3.dfp", "Dfp", "protected String dfp2sci()" ], [ "hashCode", "org.apache.commons.math3.dfp", "Dfp", "public int hashCode()" ], [ "multiply", "org.apache.commons.math3", "FieldElement", "public abstract T multiply(int arg0)" ], [ "isInfinite", "org.apache.commons.math3.dfp", "Dfp", "public boolean isInfinite()" ], [ "sin", "org.apache.commons.math3.dfp", "Dfp", "public Dfp sin()" ], [ "linearCombination", "org.apache.commons.math3", "RealFieldElement", "public abstract T linearCombination(T arg0, T arg1, T arg2, T arg3, T arg4, T arg5)" ], [ "subtract", "org.apache.commons.math3", "FieldElement", "public abstract T subtract(T arg0) throws NullArgumentException" ], [ "signum", "org.apache.commons.math3.dfp", "Dfp", "public Dfp signum()" ], [ "getZero", "org.apache.commons.math3.dfp", "Dfp", "public Dfp getZero()" ], [ "round", "org.apache.commons.math3.dfp", "Dfp", "public long round()" ], [ "signum", "org.apache.commons.math3", "RealFieldElement", "public abstract T signum()" ], [ "linearCombination", "org.apache.commons.math3", "RealFieldElement", "public abstract T linearCombination(T[] arg0, T[] arg1) throws DimensionMismatchException" ], [ "log1p", "org.apache.commons.math3", "RealFieldElement", "public abstract T log1p()" ], [ "newInstance", "org.apache.commons.math3.dfp", "Dfp", "public Dfp newInstance(final Dfp d)" ], [ "atan", "org.apache.commons.math3.dfp", "Dfp", "public Dfp atan()" ], [ "add", "org.apache.commons.math3.dfp", "Dfp", "public Dfp add(final Dfp x)" ], [ "greaterThan", "org.apache.commons.math3.dfp", "Dfp", "public boolean greaterThan(final Dfp x)" ], [ "linearCombination", "org.apache.commons.math3.dfp", "Dfp", "public Dfp linearCombination(final Dfp a1, final Dfp b1, final Dfp a2, final Dfp b2, final Dfp a3, final Dfp b3)" ], [ "newInstance", "org.apache.commons.math3.dfp", "Dfp", "public Dfp newInstance(final byte x)" ], [ "newInstance", "org.apache.commons.math3.dfp", "Dfp", "public Dfp newInstance()" ], [ "ceil", "org.apache.commons.math3", "RealFieldElement", "public abstract T ceil()" ], [ "hypot", "org.apache.commons.math3.dfp", "Dfp", "public Dfp hypot(final Dfp y)" ], [ "asinh", "org.apache.commons.math3", "RealFieldElement", "public abstract T asinh()" ], [ "acos", "org.apache.commons.math3", "RealFieldElement", "public abstract T acos()" ], [ "getTwo", "org.apache.commons.math3.dfp", "Dfp", "public Dfp getTwo()" ], [ "divide", "org.apache.commons.math3", "RealFieldElement", "public abstract T divide(double arg0)" ], [ "equals", "org.apache.commons.math3.dfp", "Dfp", "public boolean equals(final Object other)" ], [ "asin", "org.apache.commons.math3.dfp", "Dfp", "public Dfp asin()" ], [ "tan", "org.apache.commons.math3", "RealFieldElement", "public abstract T tan()" ], [ "subtract", "org.apache.commons.math3.dfp", "Dfp", "public Dfp subtract(final double a)" ], [ "sqrt", "org.apache.commons.math3", "RealFieldElement", "public abstract T sqrt()" ], [ "exp", "org.apache.commons.math3", "RealFieldElement", "public abstract T exp()" ], [ "pow", "org.apache.commons.math3", "RealFieldElement", "public abstract T pow(int arg0)" ], [ "divide", "org.apache.commons.math3.dfp", "Dfp", "public Dfp divide(Dfp divisor)" ], [ "divide", "org.apache.commons.math3.dfp", "Dfp", "public Dfp divide(final double a)" ], [ "linearCombination", "org.apache.commons.math3.dfp", "Dfp", "public Dfp linearCombination(final double a1, final Dfp b1, final double a2, final Dfp b2)" ], [ "log10K", "org.apache.commons.math3.dfp", "Dfp", "public int log10K()" ], [ "subtract", "org.apache.commons.math3", "RealFieldElement", "public abstract T subtract(double arg0)" ], [ "complement", "org.apache.commons.math3.dfp", "Dfp", "protected int complement(int extra)" ], [ "toString", "org.apache.commons.math3.dfp", "Dfp", "public String toString()" ], [ "linearCombination", "org.apache.commons.math3", "RealFieldElement", "public abstract T linearCombination(double[] arg0, T[] arg1) throws DimensionMismatchException" ], [ "negate", "org.apache.commons.math3.dfp", "Dfp", "public Dfp negate()" ], [ "sinh", "org.apache.commons.math3.dfp", "Dfp", "public Dfp sinh()" ], [ "subtract", "org.apache.commons.math3.dfp", "Dfp", "public Dfp subtract(final Dfp x)" ], [ "rootN", "org.apache.commons.math3.dfp", "Dfp", "public Dfp rootN(final int n)" ], [ "newInstance", "org.apache.commons.math3.dfp", "Dfp", "public Dfp newInstance(final int x)" ], [ "linearCombination", "org.apache.commons.math3", "RealFieldElement", "public abstract T linearCombination(double arg0, T arg1, double arg2, T arg3, double arg4, T arg5)" ], [ "pow", "org.apache.commons.math3.dfp", "Dfp", "public Dfp pow(final Dfp e)" ], [ "remainder", "org.apache.commons.math3.dfp", "Dfp", "public Dfp remainder(final double a)" ], [ "tanh", "org.apache.commons.math3", "RealFieldElement", "public abstract T tanh()" ], [ "add", "org.apache.commons.math3", "RealFieldElement", "public abstract T add(double arg0)" ], [ "linearCombination", "org.apache.commons.math3.dfp", "Dfp", "public Dfp linearCombination(final double a1, final Dfp b1, final double a2, final Dfp b2, final double a3, final Dfp b3, final double a4, final Dfp b4)" ], [ "linearCombination", "org.apache.commons.math3.dfp", "Dfp", "public Dfp linearCombination(final double[] a, final Dfp[] b) throws DimensionMismatchException" ], [ "copySign", "org.apache.commons.math3", "RealFieldElement", "public abstract T copySign(T arg0)" ], [ "acos", "org.apache.commons.math3.dfp", "Dfp", "public Dfp acos()" ], [ "multiply", "org.apache.commons.math3.dfp", "Dfp", "public Dfp multiply(final double a)" ], [ "reciprocal", "org.apache.commons.math3", "RealFieldElement", "public abstract T reciprocal()" ], [ "acosh", "org.apache.commons.math3", "RealFieldElement", "public abstract T acosh()" ], [ "getClass", "java.lang", "Object", "public final native Class<? extends Object> getClass()" ], [ "exp", "org.apache.commons.math3.dfp", "Dfp", "public Dfp exp()" ], [ "equals", "java.lang", "Object", "public boolean equals(Object arg0)" ], [ "hashCode", "java.lang", "Object", "public native int hashCode()" ], [ "toString", "java.lang", "Object", "public String toString()" ] ],
  "tokensMethodVariablesNonPrivateNonStaticAttributes" : [ [ "mant", "org.apache.commons.math3.dfp", "Dfp", "protected int[] mant;" ], [ "sign", "org.apache.commons.math3.dfp", "Dfp", "protected byte sign;" ], [ "exp", "org.apache.commons.math3.dfp", "Dfp", "protected int exp;" ], [ "nans", "org.apache.commons.math3.dfp", "Dfp", "protected byte nans;" ] ],
  "tokensOracleVariablesNonPrivateNonStaticNonVoidMethods" : [ ],
  "tokensOracleVariablesNonPrivateNonStaticAttributes" : [ ]
}, {
  "id" : 22765,
  "oracle" : ";",
  "oracleType" : "PRE",
  "projectName" : "commons-math3-3.6.1",
  "packageName" : "org.apache.commons.math3.dfp",
  "className" : "Dfp",
  "javadocTag" : "@param other object to check instance against",
  "methodJavadoc" : "    /** Check if instance is equal to x.\n     * @param other object to check instance against\n     * @return true if instance is equal to x and neither are NaN, false otherwise\n     */",
  "methodSourceCode" : "public boolean equals(final Object other){\n    if (other instanceof Dfp) {\n        final Dfp x = (Dfp) other;\n        if (isNaN() || x.isNaN() || field.getRadixDigits() != x.field.getRadixDigits()) {\n            return false;\n        }\n        return compare(this, x) == 0;\n    }\n    return false;\n}",
  "classJavadoc" : "/**\n *  Decimal floating point library for Java\n *\n *  <p>Another floating point class.  This one is built using radix 10000\n *  which is 10<sup>4</sup>, so its almost decimal.</p>\n *\n *  <p>The design goals here are:\n *  <ol>\n *    <li>Decimal math, or close to it</li>\n *    <li>Settable precision (but no mix between numbers using different settings)</li>\n *    <li>Portability.  Code should be kept as portable as possible.</li>\n *    <li>Performance</li>\n *    <li>Accuracy  - Results should always be +/- 1 ULP for basic\n *         algebraic operation</li>\n *    <li>Comply with IEEE 854-1987 as much as possible.\n *         (See IEEE 854-1987 notes below)</li>\n *  </ol></p>\n *\n *  <p>Trade offs:\n *  <ol>\n *    <li>Memory foot print.  I'm using more memory than necessary to\n *         represent numbers to get better performance.</li>\n *    <li>Digits are bigger, so rounding is a greater loss.  So, if you\n *         really need 12 decimal digits, better use 4 base 10000 digits\n *         there can be one partially filled.</li>\n *  </ol></p>\n *\n *  <p>Numbers are represented  in the following form:\n *  <pre>\n *  n  =  sign &times; mant &times; (radix)<sup>exp</sup>;</p>\n *  </pre>\n *  where sign is &plusmn;1, mantissa represents a fractional number between\n *  zero and one.  mant[0] is the least significant digit.\n *  exp is in the range of -32767 to 32768</p>\n *\n *  <p>IEEE 854-1987  Notes and differences</p>\n *\n *  <p>IEEE 854 requires the radix to be either 2 or 10.  The radix here is\n *  10000, so that requirement is not met, but  it is possible that a\n *  subclassed can be made to make it behave as a radix 10\n *  number.  It is my opinion that if it looks and behaves as a radix\n *  10 number then it is one and that requirement would be met.</p>\n *\n *  <p>The radix of 10000 was chosen because it should be faster to operate\n *  on 4 decimal digits at once instead of one at a time.  Radix 10 behavior\n *  can be realized by adding an additional rounding step to ensure that\n *  the number of decimal digits represented is constant.</p>\n *\n *  <p>The IEEE standard specifically leaves out internal data encoding,\n *  so it is reasonable to conclude that such a subclass of this radix\n *  10000 system is merely an encoding of a radix 10 system.</p>\n *\n *  <p>IEEE 854 also specifies the existence of \"sub-normal\" numbers.  This\n *  class does not contain any such entities.  The most significant radix\n *  10000 digit is always non-zero.  Instead, we support \"gradual underflow\"\n *  by raising the underflow flag for numbers less with exponent less than\n *  expMin, but don't flush to zero until the exponent reaches MIN_EXP-digits.\n *  Thus the smallest number we can represent would be:\n *  1E(-(MIN_EXP-digits-1)*4),  eg, for digits=5, MIN_EXP=-32767, that would\n *  be 1e-131092.</p>\n *\n *  <p>IEEE 854 defines that the implied radix point lies just to the right\n *  of the most significant digit and to the left of the remaining digits.\n *  This implementation puts the implied radix point to the left of all\n *  digits including the most significant one.  The most significant digit\n *  here is the one just to the right of the radix point.  This is a fine\n *  detail and is really only a matter of definition.  Any side effects of\n *  this can be rendered invisible by a subclass.</p>\n * @see DfpField\n * @since 2.2\n */",
  "classSourceCode" : "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.commons.math3.dfp;\n\nimport java.util.Arrays;\n\nimport org.apache.commons.math3.RealFieldElement;\nimport org.apache.commons.math3.exception.DimensionMismatchException;\nimport org.apache.commons.math3.util.FastMath;\n\n/**\n *  Decimal floating point library for Java\n *\n *  <p>Another floating point class.  This one is built using radix 10000\n *  which is 10<sup>4</sup>, so its almost decimal.</p>\n *\n *  <p>The design goals here are:\n *  <ol>\n *    <li>Decimal math, or close to it</li>\n *    <li>Settable precision (but no mix between numbers using different settings)</li>\n *    <li>Portability.  Code should be kept as portable as possible.</li>\n *    <li>Performance</li>\n *    <li>Accuracy  - Results should always be +/- 1 ULP for basic\n *         algebraic operation</li>\n *    <li>Comply with IEEE 854-1987 as much as possible.\n *         (See IEEE 854-1987 notes below)</li>\n *  </ol></p>\n *\n *  <p>Trade offs:\n *  <ol>\n *    <li>Memory foot print.  I'm using more memory than necessary to\n *         represent numbers to get better performance.</li>\n *    <li>Digits are bigger, so rounding is a greater loss.  So, if you\n *         really need 12 decimal digits, better use 4 base 10000 digits\n *         there can be one partially filled.</li>\n *  </ol></p>\n *\n *  <p>Numbers are represented  in the following form:\n *  <pre>\n *  n  =  sign &times; mant &times; (radix)<sup>exp</sup>;</p>\n *  </pre>\n *  where sign is &plusmn;1, mantissa represents a fractional number between\n *  zero and one.  mant[0] is the least significant digit.\n *  exp is in the range of -32767 to 32768</p>\n *\n *  <p>IEEE 854-1987  Notes and differences</p>\n *\n *  <p>IEEE 854 requires the radix to be either 2 or 10.  The radix here is\n *  10000, so that requirement is not met, but  it is possible that a\n *  subclassed can be made to make it behave as a radix 10\n *  number.  It is my opinion that if it looks and behaves as a radix\n *  10 number then it is one and that requirement would be met.</p>\n *\n *  <p>The radix of 10000 was chosen because it should be faster to operate\n *  on 4 decimal digits at once instead of one at a time.  Radix 10 behavior\n *  can be realized by adding an additional rounding step to ensure that\n *  the number of decimal digits represented is constant.</p>\n *\n *  <p>The IEEE standard specifically leaves out internal data encoding,\n *  so it is reasonable to conclude that such a subclass of this radix\n *  10000 system is merely an encoding of a radix 10 system.</p>\n *\n *  <p>IEEE 854 also specifies the existence of \"sub-normal\" numbers.  This\n *  class does not contain any such entities.  The most significant radix\n *  10000 digit is always non-zero.  Instead, we support \"gradual underflow\"\n *  by raising the underflow flag for numbers less with exponent less than\n *  expMin, but don't flush to zero until the exponent reaches MIN_EXP-digits.\n *  Thus the smallest number we can represent would be:\n *  1E(-(MIN_EXP-digits-1)*4),  eg, for digits=5, MIN_EXP=-32767, that would\n *  be 1e-131092.</p>\n *\n *  <p>IEEE 854 defines that the implied radix point lies just to the right\n *  of the most significant digit and to the left of the remaining digits.\n *  This implementation puts the implied radix point to the left of all\n *  digits including the most significant one.  The most significant digit\n *  here is the one just to the right of the radix point.  This is a fine\n *  detail and is really only a matter of definition.  Any side effects of\n *  this can be rendered invisible by a subclass.</p>\n * @see DfpField\n * @since 2.2\n */\npublic class Dfp implements RealFieldElement<Dfp> {\n\n    /** The radix, or base of this system.  Set to 10000 */\n    public static final int RADIX = 10000;\n\n    /** The minimum exponent before underflow is signaled.  Flush to zero\n     *  occurs at minExp-DIGITS */\n    public static final int MIN_EXP = -32767;\n\n    /** The maximum exponent before overflow is signaled and results flushed\n     *  to infinity */\n    public static final int MAX_EXP =  32768;\n\n    /** The amount under/overflows are scaled by before going to trap handler */\n    public static final int ERR_SCALE = 32760;\n\n    /** Indicator value for normal finite numbers. */\n    public static final byte FINITE = 0;\n\n    /** Indicator value for Infinity. */\n    public static final byte INFINITE = 1;\n\n    /** Indicator value for signaling NaN. */\n    public static final byte SNAN = 2;\n\n    /** Indicator value for quiet NaN. */\n    public static final byte QNAN = 3;\n\n    /** String for NaN representation. */\n    private static final String NAN_STRING = \"NaN\";\n\n    /** String for positive infinity representation. */\n    private static final String POS_INFINITY_STRING = \"Infinity\";\n\n    /** String for negative infinity representation. */\n    private static final String NEG_INFINITY_STRING = \"-Infinity\";\n\n    /** Name for traps triggered by addition. */\n    private static final String ADD_TRAP = \"add\";\n\n    /** Name for traps triggered by multiplication. */\n    private static final String MULTIPLY_TRAP = \"multiply\";\n\n    /** Name for traps triggered by division. */\n    private static final String DIVIDE_TRAP = \"divide\";\n\n    /** Name for traps triggered by square root. */\n    private static final String SQRT_TRAP = \"sqrt\";\n\n    /** Name for traps triggered by alignment. */\n    private static final String ALIGN_TRAP = \"align\";\n\n    /** Name for traps triggered by truncation. */\n    private static final String TRUNC_TRAP = \"trunc\";\n\n    /** Name for traps triggered by nextAfter. */\n    private static final String NEXT_AFTER_TRAP = \"nextAfter\";\n\n    /** Name for traps triggered by lessThan. */\n    private static final String LESS_THAN_TRAP = \"lessThan\";\n\n    /** Name for traps triggered by greaterThan. */\n    private static final String GREATER_THAN_TRAP = \"greaterThan\";\n\n    /** Name for traps triggered by newInstance. */\n    private static final String NEW_INSTANCE_TRAP = \"newInstance\";\n\n    /** Mantissa. */\n    protected int[] mant;\n\n    /** Sign bit: 1 for positive, -1 for negative. */\n    protected byte sign;\n\n    /** Exponent. */\n    protected int exp;\n\n    /** Indicator for non-finite / non-number values. */\n    protected byte nans;\n\n    /** Factory building similar Dfp's. */\n    private final DfpField field;\n\n    /** Makes an instance with a value of zero.\n     * @param field field to which this instance belongs\n     */\n    protected Dfp(final DfpField field) {\n        mant = new int[field.getRadixDigits()];\n        sign = 1;\n        exp = 0;\n        nans = FINITE;\n        this.field = field;\n    }\n\n    /** Create an instance from a byte value.\n     * @param field field to which this instance belongs\n     * @param x value to convert to an instance\n     */\n    protected Dfp(final DfpField field, byte x) {\n        this(field, (long) x);\n    }\n\n    /** Create an instance from an int value.\n     * @param field field to which this instance belongs\n     * @param x value to convert to an instance\n     */\n    protected Dfp(final DfpField field, int x) {\n        this(field, (long) x);\n    }\n\n    /** Create an instance from a long value.\n     * @param field field to which this instance belongs\n     * @param x value to convert to an instance\n     */\n    protected Dfp(final DfpField field, long x) {\n\n        // initialize as if 0\n        mant = new int[field.getRadixDigits()];\n        nans = FINITE;\n        this.field = field;\n\n        boolean isLongMin = false;\n        if (x == Long.MIN_VALUE) {\n            // special case for Long.MIN_VALUE (-9223372036854775808)\n            // we must shift it before taking its absolute value\n            isLongMin = true;\n            ++x;\n        }\n\n        // set the sign\n        if (x < 0) {\n            sign = -1;\n            x = -x;\n        } else {\n            sign = 1;\n        }\n\n        exp = 0;\n        while (x != 0) {\n            System.arraycopy(mant, mant.length - exp, mant, mant.length - 1 - exp, exp);\n            mant[mant.length - 1] = (int) (x % RADIX);\n            x /= RADIX;\n            exp++;\n        }\n\n        if (isLongMin) {\n            // remove the shift added for Long.MIN_VALUE\n            // we know in this case that fixing the last digit is sufficient\n            for (int i = 0; i < mant.length - 1; i++) {\n                if (mant[i] != 0) {\n                    mant[i]++;\n                    break;\n                }\n            }\n        }\n    }\n\n    /** Create an instance from a double value.\n     * @param field field to which this instance belongs\n     * @param x value to convert to an instance\n     */\n    protected Dfp(final DfpField field, double x) {\n\n        // initialize as if 0\n        mant = new int[field.getRadixDigits()];\n        sign = 1;\n        exp = 0;\n        nans = FINITE;\n        this.field = field;\n\n        long bits = Double.doubleToLongBits(x);\n        long mantissa = bits & 0x000fffffffffffffL;\n        int exponent = (int) ((bits & 0x7ff0000000000000L) >> 52) - 1023;\n\n        if (exponent == -1023) {\n            // Zero or sub-normal\n            if (x == 0) {\n                // make sure 0 has the right sign\n                if ((bits & 0x8000000000000000L) != 0) {\n                    sign = -1;\n                }\n                return;\n            }\n\n            exponent++;\n\n            // Normalize the subnormal number\n            while ( (mantissa & 0x0010000000000000L) == 0) {\n                exponent--;\n                mantissa <<= 1;\n            }\n            mantissa &= 0x000fffffffffffffL;\n        }\n\n        if (exponent == 1024) {\n            // infinity or NAN\n            if (x != x) {\n                sign = (byte) 1;\n                nans = QNAN;\n            } else if (x < 0) {\n                sign = (byte) -1;\n                nans = INFINITE;\n            } else {\n                sign = (byte) 1;\n                nans = INFINITE;\n            }\n            return;\n        }\n\n        Dfp xdfp = new Dfp(field, mantissa);\n        xdfp = xdfp.divide(new Dfp(field, 4503599627370496l)).add(field.getOne());  // Divide by 2^52, then add one\n        xdfp = xdfp.multiply(DfpMath.pow(field.getTwo(), exponent));\n\n        if ((bits & 0x8000000000000000L) != 0) {\n            xdfp = xdfp.negate();\n        }\n\n        System.arraycopy(xdfp.mant, 0, mant, 0, mant.length);\n        sign = xdfp.sign;\n        exp  = xdfp.exp;\n        nans = xdfp.nans;\n\n    }\n\n    /** Copy constructor.\n     * @param d instance to copy\n     */\n    public Dfp(final Dfp d) {\n        mant  = d.mant.clone();\n        sign  = d.sign;\n        exp   = d.exp;\n        nans  = d.nans;\n        field = d.field;\n    }\n\n    /** Create an instance from a String representation.\n     * @param field field to which this instance belongs\n     * @param s string representation of the instance\n     */\n    protected Dfp(final DfpField field, final String s) {\n\n        // initialize as if 0\n        mant = new int[field.getRadixDigits()];\n        sign = 1;\n        exp = 0;\n        nans = FINITE;\n        this.field = field;\n\n        boolean decimalFound = false;\n        final int rsize = 4;   // size of radix in decimal digits\n        final int offset = 4;  // Starting offset into Striped\n        final char[] striped = new char[getRadixDigits() * rsize + offset * 2];\n\n        // Check some special cases\n        if (s.equals(POS_INFINITY_STRING)) {\n            sign = (byte) 1;\n            nans = INFINITE;\n            return;\n        }\n\n        if (s.equals(NEG_INFINITY_STRING)) {\n            sign = (byte) -1;\n            nans = INFINITE;\n            return;\n        }\n\n        if (s.equals(NAN_STRING)) {\n            sign = (byte) 1;\n            nans = QNAN;\n            return;\n        }\n\n        // Check for scientific notation\n        int p = s.indexOf(\"e\");\n        if (p == -1) { // try upper case?\n            p = s.indexOf(\"E\");\n        }\n\n        final String fpdecimal;\n        int sciexp = 0;\n        if (p != -1) {\n            // scientific notation\n            fpdecimal = s.substring(0, p);\n            String fpexp = s.substring(p+1);\n            boolean negative = false;\n\n            for (int i=0; i<fpexp.length(); i++)\n            {\n                if (fpexp.charAt(i) == '-')\n                {\n                    negative = true;\n                    continue;\n                }\n                if (fpexp.charAt(i) >= '0' && fpexp.charAt(i) <= '9') {\n                    sciexp = sciexp * 10 + fpexp.charAt(i) - '0';\n                }\n            }\n\n            if (negative) {\n                sciexp = -sciexp;\n            }\n        } else {\n            // normal case\n            fpdecimal = s;\n        }\n\n        // If there is a minus sign in the number then it is negative\n        if (fpdecimal.indexOf(\"-\") !=  -1) {\n            sign = -1;\n        }\n\n        // First off, find all of the leading zeros, trailing zeros, and significant digits\n        p = 0;\n\n        // Move p to first significant digit\n        int decimalPos = 0;\n        for (;;) {\n            if (fpdecimal.charAt(p) >= '1' && fpdecimal.charAt(p) <= '9') {\n                break;\n            }\n\n            if (decimalFound && fpdecimal.charAt(p) == '0') {\n                decimalPos--;\n            }\n\n            if (fpdecimal.charAt(p) == '.') {\n                decimalFound = true;\n            }\n\n            p++;\n\n            if (p == fpdecimal.length()) {\n                break;\n            }\n        }\n\n        // Copy the string onto Stripped\n        int q = offset;\n        striped[0] = '0';\n        striped[1] = '0';\n        striped[2] = '0';\n        striped[3] = '0';\n        int significantDigits=0;\n        for(;;) {\n            if (p == (fpdecimal.length())) {\n                break;\n            }\n\n            // Don't want to run pass the end of the array\n            if (q == mant.length*rsize+offset+1) {\n                break;\n            }\n\n            if (fpdecimal.charAt(p) == '.') {\n                decimalFound = true;\n                decimalPos = significantDigits;\n                p++;\n                continue;\n            }\n\n            if (fpdecimal.charAt(p) < '0' || fpdecimal.charAt(p) > '9') {\n                p++;\n                continue;\n            }\n\n            striped[q] = fpdecimal.charAt(p);\n            q++;\n            p++;\n            significantDigits++;\n        }\n\n\n        // If the decimal point has been found then get rid of trailing zeros.\n        if (decimalFound && q != offset) {\n            for (;;) {\n                q--;\n                if (q == offset) {\n                    break;\n                }\n                if (striped[q] == '0') {\n                    significantDigits--;\n                } else {\n                    break;\n                }\n            }\n        }\n\n        // special case of numbers like \"0.00000\"\n        if (decimalFound && significantDigits == 0) {\n            decimalPos = 0;\n        }\n\n        // Implicit decimal point at end of number if not present\n        if (!decimalFound) {\n            decimalPos = q-offset;\n        }\n\n        // Find the number of significant trailing zeros\n        q = offset;  // set q to point to first sig digit\n        p = significantDigits-1+offset;\n\n        while (p > q) {\n            if (striped[p] != '0') {\n                break;\n            }\n            p--;\n        }\n\n        // Make sure the decimal is on a mod 10000 boundary\n        int i = ((rsize * 100) - decimalPos - sciexp % rsize) % rsize;\n        q -= i;\n        decimalPos += i;\n\n        // Make the mantissa length right by adding zeros at the end if necessary\n        while ((p - q) < (mant.length * rsize)) {\n            for (i = 0; i < rsize; i++) {\n                striped[++p] = '0';\n            }\n        }\n\n        // Ok, now we know how many trailing zeros there are,\n        // and where the least significant digit is\n        for (i = mant.length - 1; i >= 0; i--) {\n            mant[i] = (striped[q]   - '0') * 1000 +\n                      (striped[q+1] - '0') * 100  +\n                      (striped[q+2] - '0') * 10   +\n                      (striped[q+3] - '0');\n            q += 4;\n        }\n\n\n        exp = (decimalPos+sciexp) / rsize;\n\n        if (q < striped.length) {\n            // Is there possible another digit?\n            round((striped[q] - '0')*1000);\n        }\n\n    }\n\n    /** Creates an instance with a non-finite value.\n     * @param field field to which this instance belongs\n     * @param sign sign of the Dfp to create\n     * @param nans code of the value, must be one of {@link #INFINITE},\n     * {@link #SNAN},  {@link #QNAN}\n     */\n    protected Dfp(final DfpField field, final byte sign, final byte nans) {\n        this.field = field;\n        this.mant    = new int[field.getRadixDigits()];\n        this.sign    = sign;\n        this.exp     = 0;\n        this.nans    = nans;\n    }\n\n    /** Create an instance with a value of 0.\n     * Use this internally in preference to constructors to facilitate subclasses\n     * @return a new instance with a value of 0\n     */\n    public Dfp newInstance() {\n        return new Dfp(getField());\n    }\n\n    /** Create an instance from a byte value.\n     * @param x value to convert to an instance\n     * @return a new instance with value x\n     */\n    public Dfp newInstance(final byte x) {\n        return new Dfp(getField(), x);\n    }\n\n    /** Create an instance from an int value.\n     * @param x value to convert to an instance\n     * @return a new instance with value x\n     */\n    public Dfp newInstance(final int x) {\n        return new Dfp(getField(), x);\n    }\n\n    /** Create an instance from a long value.\n     * @param x value to convert to an instance\n     * @return a new instance with value x\n     */\n    public Dfp newInstance(final long x) {\n        return new Dfp(getField(), x);\n    }\n\n    /** Create an instance from a double value.\n     * @param x value to convert to an instance\n     * @return a new instance with value x\n     */\n    public Dfp newInstance(final double x) {\n        return new Dfp(getField(), x);\n    }\n\n    /** Create an instance by copying an existing one.\n     * Use this internally in preference to constructors to facilitate subclasses.\n     * @param d instance to copy\n     * @return a new instance with the same value as d\n     */\n    public Dfp newInstance(final Dfp d) {\n\n        // make sure we don't mix number with different precision\n        if (field.getRadixDigits() != d.field.getRadixDigits()) {\n            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);\n            final Dfp result = newInstance(getZero());\n            result.nans = QNAN;\n            return dotrap(DfpField.FLAG_INVALID, NEW_INSTANCE_TRAP, d, result);\n        }\n\n        return new Dfp(d);\n\n    }\n\n    /** Create an instance from a String representation.\n     * Use this internally in preference to constructors to facilitate subclasses.\n     * @param s string representation of the instance\n     * @return a new instance parsed from specified string\n     */\n    public Dfp newInstance(final String s) {\n        return new Dfp(field, s);\n    }\n\n    /** Creates an instance with a non-finite value.\n     * @param sig sign of the Dfp to create\n     * @param code code of the value, must be one of {@link #INFINITE},\n     * {@link #SNAN},  {@link #QNAN}\n     * @return a new instance with a non-finite value\n     */\n    public Dfp newInstance(final byte sig, final byte code) {\n        return field.newDfp(sig, code);\n    }\n\n    /** Get the {@link org.apache.commons.math3.Field Field} (really a {@link DfpField}) to which the instance belongs.\n     * <p>\n     * The field is linked to the number of digits and acts as a factory\n     * for {@link Dfp} instances.\n     * </p>\n     * @return {@link org.apache.commons.math3.Field Field} (really a {@link DfpField}) to which the instance belongs\n     */\n    public DfpField getField() {\n        return field;\n    }\n\n    /** Get the number of radix digits of the instance.\n     * @return number of radix digits\n     */\n    public int getRadixDigits() {\n        return field.getRadixDigits();\n    }\n\n    /** Get the constant 0.\n     * @return a Dfp with value zero\n     */\n    public Dfp getZero() {\n        return field.getZero();\n    }\n\n    /** Get the constant 1.\n     * @return a Dfp with value one\n     */\n    public Dfp getOne() {\n        return field.getOne();\n    }\n\n    /** Get the constant 2.\n     * @return a Dfp with value two\n     */\n    public Dfp getTwo() {\n        return field.getTwo();\n    }\n\n    /** Shift the mantissa left, and adjust the exponent to compensate.\n     */\n    protected void shiftLeft() {\n        for (int i = mant.length - 1; i > 0; i--) {\n            mant[i] = mant[i-1];\n        }\n        mant[0] = 0;\n        exp--;\n    }\n\n    /* Note that shiftRight() does not call round() as that round() itself\n     uses shiftRight() */\n    /** Shift the mantissa right, and adjust the exponent to compensate.\n     */\n    protected void shiftRight() {\n        for (int i = 0; i < mant.length - 1; i++) {\n            mant[i] = mant[i+1];\n        }\n        mant[mant.length - 1] = 0;\n        exp++;\n    }\n\n    /** Make our exp equal to the supplied one, this may cause rounding.\n     *  Also causes de-normalized numbers.  These numbers are generally\n     *  dangerous because most routines assume normalized numbers.\n     *  Align doesn't round, so it will return the last digit destroyed\n     *  by shifting right.\n     *  @param e desired exponent\n     *  @return last digit destroyed by shifting right\n     */\n    protected int align(int e) {\n        int lostdigit = 0;\n        boolean inexact = false;\n\n        int diff = exp - e;\n\n        int adiff = diff;\n        if (adiff < 0) {\n            adiff = -adiff;\n        }\n\n        if (diff == 0) {\n            return 0;\n        }\n\n        if (adiff > (mant.length + 1)) {\n            // Special case\n            Arrays.fill(mant, 0);\n            exp = e;\n\n            field.setIEEEFlagsBits(DfpField.FLAG_INEXACT);\n            dotrap(DfpField.FLAG_INEXACT, ALIGN_TRAP, this, this);\n\n            return 0;\n        }\n\n        for (int i = 0; i < adiff; i++) {\n            if (diff < 0) {\n                /* Keep track of loss -- only signal inexact after losing 2 digits.\n                 * the first lost digit is returned to add() and may be incorporated\n                 * into the result.\n                 */\n                if (lostdigit != 0) {\n                    inexact = true;\n                }\n\n                lostdigit = mant[0];\n\n                shiftRight();\n            } else {\n                shiftLeft();\n            }\n        }\n\n        if (inexact) {\n            field.setIEEEFlagsBits(DfpField.FLAG_INEXACT);\n            dotrap(DfpField.FLAG_INEXACT, ALIGN_TRAP, this, this);\n        }\n\n        return lostdigit;\n\n    }\n\n    /** Check if instance is less than x.\n     * @param x number to check instance against\n     * @return true if instance is less than x and neither are NaN, false otherwise\n     */\n    public boolean lessThan(final Dfp x) {\n\n        // make sure we don't mix number with different precision\n        if (field.getRadixDigits() != x.field.getRadixDigits()) {\n            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);\n            final Dfp result = newInstance(getZero());\n            result.nans = QNAN;\n            dotrap(DfpField.FLAG_INVALID, LESS_THAN_TRAP, x, result);\n            return false;\n        }\n\n        /* if a nan is involved, signal invalid and return false */\n        if (isNaN() || x.isNaN()) {\n            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);\n            dotrap(DfpField.FLAG_INVALID, LESS_THAN_TRAP, x, newInstance(getZero()));\n            return false;\n        }\n\n        return compare(this, x) < 0;\n    }\n\n    /** Check if instance is greater than x.\n     * @param x number to check instance against\n     * @return true if instance is greater than x and neither are NaN, false otherwise\n     */\n    public boolean greaterThan(final Dfp x) {\n\n        // make sure we don't mix number with different precision\n        if (field.getRadixDigits() != x.field.getRadixDigits()) {\n            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);\n            final Dfp result = newInstance(getZero());\n            result.nans = QNAN;\n            dotrap(DfpField.FLAG_INVALID, GREATER_THAN_TRAP, x, result);\n            return false;\n        }\n\n        /* if a nan is involved, signal invalid and return false */\n        if (isNaN() || x.isNaN()) {\n            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);\n            dotrap(DfpField.FLAG_INVALID, GREATER_THAN_TRAP, x, newInstance(getZero()));\n            return false;\n        }\n\n        return compare(this, x) > 0;\n    }\n\n    /** Check if instance is less than or equal to 0.\n     * @return true if instance is not NaN and less than or equal to 0, false otherwise\n     */\n    public boolean negativeOrNull() {\n\n        if (isNaN()) {\n            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);\n            dotrap(DfpField.FLAG_INVALID, LESS_THAN_TRAP, this, newInstance(getZero()));\n            return false;\n        }\n\n        return (sign < 0) || ((mant[mant.length - 1] == 0) && !isInfinite());\n\n    }\n\n    /** Check if instance is strictly less than 0.\n     * @return true if instance is not NaN and less than or equal to 0, false otherwise\n     */\n    public boolean strictlyNegative() {\n\n        if (isNaN()) {\n            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);\n            dotrap(DfpField.FLAG_INVALID, LESS_THAN_TRAP, this, newInstance(getZero()));\n            return false;\n        }\n\n        return (sign < 0) && ((mant[mant.length - 1] != 0) || isInfinite());\n\n    }\n\n    /** Check if instance is greater than or equal to 0.\n     * @return true if instance is not NaN and greater than or equal to 0, false otherwise\n     */\n    public boolean positiveOrNull() {\n\n        if (isNaN()) {\n            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);\n            dotrap(DfpField.FLAG_INVALID, LESS_THAN_TRAP, this, newInstance(getZero()));\n            return false;\n        }\n\n        return (sign > 0) || ((mant[mant.length - 1] == 0) && !isInfinite());\n\n    }\n\n    /** Check if instance is strictly greater than 0.\n     * @return true if instance is not NaN and greater than or equal to 0, false otherwise\n     */\n    public boolean strictlyPositive() {\n\n        if (isNaN()) {\n            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);\n            dotrap(DfpField.FLAG_INVALID, LESS_THAN_TRAP, this, newInstance(getZero()));\n            return false;\n        }\n\n        return (sign > 0) && ((mant[mant.length - 1] != 0) || isInfinite());\n\n    }\n\n    /** Get the absolute value of instance.\n     * @return absolute value of instance\n     * @since 3.2\n     */\n    public Dfp abs() {\n        Dfp result = newInstance(this);\n        result.sign = 1;\n        return result;\n    }\n\n    /** Check if instance is infinite.\n     * @return true if instance is infinite\n     */\n    public boolean isInfinite() {\n        return nans == INFINITE;\n    }\n\n    /** Check if instance is not a number.\n     * @return true if instance is not a number\n     */\n    public boolean isNaN() {\n        return (nans == QNAN) || (nans == SNAN);\n    }\n\n    /** Check if instance is equal to zero.\n     * @return true if instance is equal to zero\n     */\n    public boolean isZero() {\n\n        if (isNaN()) {\n            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);\n            dotrap(DfpField.FLAG_INVALID, LESS_THAN_TRAP, this, newInstance(getZero()));\n            return false;\n        }\n\n        return (mant[mant.length - 1] == 0) && !isInfinite();\n\n    }\n\n    /** Check if instance is equal to x.\n     * @param other object to check instance against\n     * @return true if instance is equal to x and neither are NaN, false otherwise\n     */\n    @Override\n    public boolean equals(final Object other) {\n\n        if (other instanceof Dfp) {\n            final Dfp x = (Dfp) other;\n            if (isNaN() || x.isNaN() || field.getRadixDigits() != x.field.getRadixDigits()) {\n                return false;\n            }\n\n            return compare(this, x) == 0;\n        }\n\n        return false;\n\n    }\n\n    /**\n     * Gets a hashCode for the instance.\n     * @return a hash code value for this object\n     */\n    @Override\n    public int hashCode() {\n        return 17 + (isZero() ? 0 : (sign << 8)) + (nans << 16) + exp + Arrays.hashCode(mant);\n    }\n\n    /** Check if instance is not equal to x.\n     * @param x number to check instance against\n     * @return true if instance is not equal to x and neither are NaN, false otherwise\n     */\n    public boolean unequal(final Dfp x) {\n        if (isNaN() || x.isNaN() || field.getRadixDigits() != x.field.getRadixDigits()) {\n            return false;\n        }\n\n        return greaterThan(x) || lessThan(x);\n    }\n\n    /** Compare two instances.\n     * @param a first instance in comparison\n     * @param b second instance in comparison\n     * @return -1 if a<b, 1 if a>b and 0 if a==b\n     *  Note this method does not properly handle NaNs or numbers with different precision.\n     */\n    private static int compare(final Dfp a, final Dfp b) {\n        // Ignore the sign of zero\n        if (a.mant[a.mant.length - 1] == 0 && b.mant[b.mant.length - 1] == 0 &&\n            a.nans == FINITE && b.nans == FINITE) {\n            return 0;\n        }\n\n        if (a.sign != b.sign) {\n            if (a.sign == -1) {\n                return -1;\n            } else {\n                return 1;\n            }\n        }\n\n        // deal with the infinities\n        if (a.nans == INFINITE && b.nans == FINITE) {\n            return a.sign;\n        }\n\n        if (a.nans == FINITE && b.nans == INFINITE) {\n            return -b.sign;\n        }\n\n        if (a.nans == INFINITE && b.nans == INFINITE) {\n            return 0;\n        }\n\n        // Handle special case when a or b is zero, by ignoring the exponents\n        if (b.mant[b.mant.length-1] != 0 && a.mant[b.mant.length-1] != 0) {\n            if (a.exp < b.exp) {\n                return -a.sign;\n            }\n\n            if (a.exp > b.exp) {\n                return a.sign;\n            }\n        }\n\n        // compare the mantissas\n        for (int i = a.mant.length - 1; i >= 0; i--) {\n            if (a.mant[i] > b.mant[i]) {\n                return a.sign;\n            }\n\n            if (a.mant[i] < b.mant[i]) {\n                return -a.sign;\n            }\n        }\n\n        return 0;\n\n    }\n\n    /** Round to nearest integer using the round-half-even method.\n     *  That is round to nearest integer unless both are equidistant.\n     *  In which case round to the even one.\n     *  @return rounded value\n     * @since 3.2\n     */\n    public Dfp rint() {\n        return trunc(DfpField.RoundingMode.ROUND_HALF_EVEN);\n    }\n\n    /** Round to an integer using the round floor mode.\n     * That is, round toward -Infinity\n     *  @return rounded value\n     * @since 3.2\n     */\n    public Dfp floor() {\n        return trunc(DfpField.RoundingMode.ROUND_FLOOR);\n    }\n\n    /** Round to an integer using the round ceil mode.\n     * That is, round toward +Infinity\n     *  @return rounded value\n     * @since 3.2\n     */\n    public Dfp ceil() {\n        return trunc(DfpField.RoundingMode.ROUND_CEIL);\n    }\n\n    /** Returns the IEEE remainder.\n     * @param d divisor\n     * @return this less n &times; d, where n is the integer closest to this/d\n     * @since 3.2\n     */\n    public Dfp remainder(final Dfp d) {\n\n        final Dfp result = this.subtract(this.divide(d).rint().multiply(d));\n\n        // IEEE 854-1987 says that if the result is zero, then it carries the sign of this\n        if (result.mant[mant.length-1] == 0) {\n            result.sign = sign;\n        }\n\n        return result;\n\n    }\n\n    /** Does the integer conversions with the specified rounding.\n     * @param rmode rounding mode to use\n     * @return truncated value\n     */\n    protected Dfp trunc(final DfpField.RoundingMode rmode) {\n        boolean changed = false;\n\n        if (isNaN()) {\n            return newInstance(this);\n        }\n\n        if (nans == INFINITE) {\n            return newInstance(this);\n        }\n\n        if (mant[mant.length-1] == 0) {\n            // a is zero\n            return newInstance(this);\n        }\n\n        /* If the exponent is less than zero then we can certainly\n         * return zero */\n        if (exp < 0) {\n            field.setIEEEFlagsBits(DfpField.FLAG_INEXACT);\n            Dfp result = newInstance(getZero());\n            result = dotrap(DfpField.FLAG_INEXACT, TRUNC_TRAP, this, result);\n            return result;\n        }\n\n        /* If the exponent is greater than or equal to digits, then it\n         * must already be an integer since there is no precision left\n         * for any fractional part */\n\n        if (exp >= mant.length) {\n            return newInstance(this);\n        }\n\n        /* General case:  create another dfp, result, that contains the\n         * a with the fractional part lopped off.  */\n\n        Dfp result = newInstance(this);\n        for (int i = 0; i < mant.length-result.exp; i++) {\n            changed |= result.mant[i] != 0;\n            result.mant[i] = 0;\n        }\n\n        if (changed) {\n            switch (rmode) {\n                case ROUND_FLOOR:\n                    if (result.sign == -1) {\n                        // then we must increment the mantissa by one\n                        result = result.add(newInstance(-1));\n                    }\n                    break;\n\n                case ROUND_CEIL:\n                    if (result.sign == 1) {\n                        // then we must increment the mantissa by one\n                        result = result.add(getOne());\n                    }\n                    break;\n\n                case ROUND_HALF_EVEN:\n                default:\n                    final Dfp half = newInstance(\"0.5\");\n                    Dfp a = subtract(result);  // difference between this and result\n                    a.sign = 1;            // force positive (take abs)\n                    if (a.greaterThan(half)) {\n                        a = newInstance(getOne());\n                        a.sign = sign;\n                        result = result.add(a);\n                    }\n\n                    /** If exactly equal to 1/2 and odd then increment */\n                    if (a.equals(half) && result.exp > 0 && (result.mant[mant.length-result.exp]&1) != 0) {\n                        a = newInstance(getOne());\n                        a.sign = sign;\n                        result = result.add(a);\n                    }\n                    break;\n            }\n\n            field.setIEEEFlagsBits(DfpField.FLAG_INEXACT);  // signal inexact\n            result = dotrap(DfpField.FLAG_INEXACT, TRUNC_TRAP, this, result);\n            return result;\n        }\n\n        return result;\n    }\n\n    /** Convert this to an integer.\n     * If greater than 2147483647, it returns 2147483647. If less than -2147483648 it returns -2147483648.\n     * @return converted number\n     */\n    public int intValue() {\n        Dfp rounded;\n        int result = 0;\n\n        rounded = rint();\n\n        if (rounded.greaterThan(newInstance(2147483647))) {\n            return 2147483647;\n        }\n\n        if (rounded.lessThan(newInstance(-2147483648))) {\n            return -2147483648;\n        }\n\n        for (int i = mant.length - 1; i >= mant.length - rounded.exp; i--) {\n            result = result * RADIX + rounded.mant[i];\n        }\n\n        if (rounded.sign == -1) {\n            result = -result;\n        }\n\n        return result;\n    }\n\n    /** Get the exponent of the greatest power of 10000 that is\n     *  less than or equal to the absolute value of this.  I.E.  if\n     *  this is 10<sup>6</sup> then log10K would return 1.\n     *  @return integer base 10000 logarithm\n     */\n    public int log10K() {\n        return exp - 1;\n    }\n\n    /** Get the specified  power of 10000.\n     * @param e desired power\n     * @return 10000<sup>e</sup>\n     */\n    public Dfp power10K(final int e) {\n        Dfp d = newInstance(getOne());\n        d.exp = e + 1;\n        return d;\n    }\n\n    /** Get the exponent of the greatest power of 10 that is less than or equal to abs(this).\n     *  @return integer base 10 logarithm\n     * @since 3.2\n     */\n    public int intLog10()  {\n        if (mant[mant.length-1] > 1000) {\n            return exp * 4 - 1;\n        }\n        if (mant[mant.length-1] > 100) {\n            return exp * 4 - 2;\n        }\n        if (mant[mant.length-1] > 10) {\n            return exp * 4 - 3;\n        }\n        return exp * 4 - 4;\n    }\n\n    /** Return the specified  power of 10.\n     * @param e desired power\n     * @return 10<sup>e</sup>\n     */\n    public Dfp power10(final int e) {\n        Dfp d = newInstance(getOne());\n\n        if (e >= 0) {\n            d.exp = e / 4 + 1;\n        } else {\n            d.exp = (e + 1) / 4;\n        }\n\n        switch ((e % 4 + 4) % 4) {\n            case 0:\n                break;\n            case 1:\n                d = d.multiply(10);\n                break;\n            case 2:\n                d = d.multiply(100);\n                break;\n            default:\n                d = d.multiply(1000);\n        }\n\n        return d;\n    }\n\n    /** Negate the mantissa of this by computing the complement.\n     *  Leaves the sign bit unchanged, used internally by add.\n     *  Denormalized numbers are handled properly here.\n     *  @param extra ???\n     *  @return ???\n     */\n    protected int complement(int extra) {\n\n        extra = RADIX-extra;\n        for (int i = 0; i < mant.length; i++) {\n            mant[i] = RADIX-mant[i]-1;\n        }\n\n        int rh = extra / RADIX;\n        extra -= rh * RADIX;\n        for (int i = 0; i < mant.length; i++) {\n            final int r = mant[i] + rh;\n            rh = r / RADIX;\n            mant[i] = r - rh * RADIX;\n        }\n\n        return extra;\n    }\n\n    /** Add x to this.\n     * @param x number to add\n     * @return sum of this and x\n     */\n    public Dfp add(final Dfp x) {\n\n        // make sure we don't mix number with different precision\n        if (field.getRadixDigits() != x.field.getRadixDigits()) {\n            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);\n            final Dfp result = newInstance(getZero());\n            result.nans = QNAN;\n            return dotrap(DfpField.FLAG_INVALID, ADD_TRAP, x, result);\n        }\n\n        /* handle special cases */\n        if (nans != FINITE || x.nans != FINITE) {\n            if (isNaN()) {\n                return this;\n            }\n\n            if (x.isNaN()) {\n                return x;\n            }\n\n            if (nans == INFINITE && x.nans == FINITE) {\n                return this;\n            }\n\n            if (x.nans == INFINITE && nans == FINITE) {\n                return x;\n            }\n\n            if (x.nans == INFINITE && nans == INFINITE && sign == x.sign) {\n                return x;\n            }\n\n            if (x.nans == INFINITE && nans == INFINITE && sign != x.sign) {\n                field.setIEEEFlagsBits(DfpField.FLAG_INVALID);\n                Dfp result = newInstance(getZero());\n                result.nans = QNAN;\n                result = dotrap(DfpField.FLAG_INVALID, ADD_TRAP, x, result);\n                return result;\n            }\n        }\n\n        /* copy this and the arg */\n        Dfp a = newInstance(this);\n        Dfp b = newInstance(x);\n\n        /* initialize the result object */\n        Dfp result = newInstance(getZero());\n\n        /* Make all numbers positive, but remember their sign */\n        final byte asign = a.sign;\n        final byte bsign = b.sign;\n\n        a.sign = 1;\n        b.sign = 1;\n\n        /* The result will be signed like the arg with greatest magnitude */\n        byte rsign = bsign;\n        if (compare(a, b) > 0) {\n            rsign = asign;\n        }\n\n        /* Handle special case when a or b is zero, by setting the exponent\n       of the zero number equal to the other one.  This avoids an alignment\n       which would cause catastropic loss of precision */\n        if (b.mant[mant.length-1] == 0) {\n            b.exp = a.exp;\n        }\n\n        if (a.mant[mant.length-1] == 0) {\n            a.exp = b.exp;\n        }\n\n        /* align number with the smaller exponent */\n        int aextradigit = 0;\n        int bextradigit = 0;\n        if (a.exp < b.exp) {\n            aextradigit = a.align(b.exp);\n        } else {\n            bextradigit = b.align(a.exp);\n        }\n\n        /* complement the smaller of the two if the signs are different */\n        if (asign != bsign) {\n            if (asign == rsign) {\n                bextradigit = b.complement(bextradigit);\n            } else {\n                aextradigit = a.complement(aextradigit);\n            }\n        }\n\n        /* add the mantissas */\n        int rh = 0; /* acts as a carry */\n        for (int i = 0; i < mant.length; i++) {\n            final int r = a.mant[i]+b.mant[i]+rh;\n            rh = r / RADIX;\n            result.mant[i] = r - rh * RADIX;\n        }\n        result.exp = a.exp;\n        result.sign = rsign;\n\n        /* handle overflow -- note, when asign!=bsign an overflow is\n         * normal and should be ignored.  */\n\n        if (rh != 0 && (asign == bsign)) {\n            final int lostdigit = result.mant[0];\n            result.shiftRight();\n            result.mant[mant.length-1] = rh;\n            final int excp = result.round(lostdigit);\n            if (excp != 0) {\n                result = dotrap(excp, ADD_TRAP, x, result);\n            }\n        }\n\n        /* normalize the result */\n        for (int i = 0; i < mant.length; i++) {\n            if (result.mant[mant.length-1] != 0) {\n                break;\n            }\n            result.shiftLeft();\n            if (i == 0) {\n                result.mant[0] = aextradigit+bextradigit;\n                aextradigit = 0;\n                bextradigit = 0;\n            }\n        }\n\n        /* result is zero if after normalization the most sig. digit is zero */\n        if (result.mant[mant.length-1] == 0) {\n            result.exp = 0;\n\n            if (asign != bsign) {\n                // Unless adding 2 negative zeros, sign is positive\n                result.sign = 1;  // Per IEEE 854-1987 Section 6.3\n            }\n        }\n\n        /* Call round to test for over/under flows */\n        final int excp = result.round(aextradigit + bextradigit);\n        if (excp != 0) {\n            result = dotrap(excp, ADD_TRAP, x, result);\n        }\n\n        return result;\n    }\n\n    /** Returns a number that is this number with the sign bit reversed.\n     * @return the opposite of this\n     */\n    public Dfp negate() {\n        Dfp result = newInstance(this);\n        result.sign = (byte) - result.sign;\n        return result;\n    }\n\n    /** Subtract x from this.\n     * @param x number to subtract\n     * @return difference of this and a\n     */\n    public Dfp subtract(final Dfp x) {\n        return add(x.negate());\n    }\n\n    /** Round this given the next digit n using the current rounding mode.\n     * @param n ???\n     * @return the IEEE flag if an exception occurred\n     */\n    protected int round(int n) {\n        boolean inc = false;\n        switch (field.getRoundingMode()) {\n            case ROUND_DOWN:\n                inc = false;\n                break;\n\n            case ROUND_UP:\n                inc = n != 0;       // round up if n!=0\n                break;\n\n            case ROUND_HALF_UP:\n                inc = n >= 5000;  // round half up\n                break;\n\n            case ROUND_HALF_DOWN:\n                inc = n > 5000;  // round half down\n                break;\n\n            case ROUND_HALF_EVEN:\n                inc = n > 5000 || (n == 5000 && (mant[0] & 1) == 1);  // round half-even\n                break;\n\n            case ROUND_HALF_ODD:\n                inc = n > 5000 || (n == 5000 && (mant[0] & 1) == 0);  // round half-odd\n                break;\n\n            case ROUND_CEIL:\n                inc = sign == 1 && n != 0;  // round ceil\n                break;\n\n            case ROUND_FLOOR:\n            default:\n                inc = sign == -1 && n != 0;  // round floor\n                break;\n        }\n\n        if (inc) {\n            // increment if necessary\n            int rh = 1;\n            for (int i = 0; i < mant.length; i++) {\n                final int r = mant[i] + rh;\n                rh = r / RADIX;\n                mant[i] = r - rh * RADIX;\n            }\n\n            if (rh != 0) {\n                shiftRight();\n                mant[mant.length-1] = rh;\n            }\n        }\n\n        // check for exceptional cases and raise signals if necessary\n        if (exp < MIN_EXP) {\n            // Gradual Underflow\n            field.setIEEEFlagsBits(DfpField.FLAG_UNDERFLOW);\n            return DfpField.FLAG_UNDERFLOW;\n        }\n\n        if (exp > MAX_EXP) {\n            // Overflow\n            field.setIEEEFlagsBits(DfpField.FLAG_OVERFLOW);\n            return DfpField.FLAG_OVERFLOW;\n        }\n\n        if (n != 0) {\n            // Inexact\n            field.setIEEEFlagsBits(DfpField.FLAG_INEXACT);\n            return DfpField.FLAG_INEXACT;\n        }\n\n        return 0;\n\n    }\n\n    /** Multiply this by x.\n     * @param x multiplicand\n     * @return product of this and x\n     */\n    public Dfp multiply(final Dfp x) {\n\n        // make sure we don't mix number with different precision\n        if (field.getRadixDigits() != x.field.getRadixDigits()) {\n            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);\n            final Dfp result = newInstance(getZero());\n            result.nans = QNAN;\n            return dotrap(DfpField.FLAG_INVALID, MULTIPLY_TRAP, x, result);\n        }\n\n        Dfp result = newInstance(getZero());\n\n        /* handle special cases */\n        if (nans != FINITE || x.nans != FINITE) {\n            if (isNaN()) {\n                return this;\n            }\n\n            if (x.isNaN()) {\n                return x;\n            }\n\n            if (nans == INFINITE && x.nans == FINITE && x.mant[mant.length-1] != 0) {\n                result = newInstance(this);\n                result.sign = (byte) (sign * x.sign);\n                return result;\n            }\n\n            if (x.nans == INFINITE && nans == FINITE && mant[mant.length-1] != 0) {\n                result = newInstance(x);\n                result.sign = (byte) (sign * x.sign);\n                return result;\n            }\n\n            if (x.nans == INFINITE && nans == INFINITE) {\n                result = newInstance(this);\n                result.sign = (byte) (sign * x.sign);\n                return result;\n            }\n\n            if ( (x.nans == INFINITE && nans == FINITE && mant[mant.length-1] == 0) ||\n                    (nans == INFINITE && x.nans == FINITE && x.mant[mant.length-1] == 0) ) {\n                field.setIEEEFlagsBits(DfpField.FLAG_INVALID);\n                result = newInstance(getZero());\n                result.nans = QNAN;\n                result = dotrap(DfpField.FLAG_INVALID, MULTIPLY_TRAP, x, result);\n                return result;\n            }\n        }\n\n        int[] product = new int[mant.length*2];  // Big enough to hold even the largest result\n\n        for (int i = 0; i < mant.length; i++) {\n            int rh = 0;  // acts as a carry\n            for (int j=0; j<mant.length; j++) {\n                int r = mant[i] * x.mant[j];    // multiply the 2 digits\n                r += product[i+j] + rh;  // add to the product digit with carry in\n\n                rh = r / RADIX;\n                product[i+j] = r - rh * RADIX;\n            }\n            product[i+mant.length] = rh;\n        }\n\n        // Find the most sig digit\n        int md = mant.length * 2 - 1;  // default, in case result is zero\n        for (int i = mant.length * 2 - 1; i >= 0; i--) {\n            if (product[i] != 0) {\n                md = i;\n                break;\n            }\n        }\n\n        // Copy the digits into the result\n        for (int i = 0; i < mant.length; i++) {\n            result.mant[mant.length - i - 1] = product[md - i];\n        }\n\n        // Fixup the exponent.\n        result.exp = exp + x.exp + md - 2 * mant.length + 1;\n        result.sign = (byte)((sign == x.sign)?1:-1);\n\n        if (result.mant[mant.length-1] == 0) {\n            // if result is zero, set exp to zero\n            result.exp = 0;\n        }\n\n        final int excp;\n        if (md > (mant.length-1)) {\n            excp = result.round(product[md-mant.length]);\n        } else {\n            excp = result.round(0); // has no effect except to check status\n        }\n\n        if (excp != 0) {\n            result = dotrap(excp, MULTIPLY_TRAP, x, result);\n        }\n\n        return result;\n\n    }\n\n    /** Multiply this by a single digit x.\n     * @param x multiplicand\n     * @return product of this and x\n     */\n    public Dfp multiply(final int x) {\n        if (x >= 0 && x < RADIX) {\n            return multiplyFast(x);\n        } else {\n            return multiply(newInstance(x));\n        }\n    }\n\n    /** Multiply this by a single digit 0&lt;=x&lt;radix.\n     * There are speed advantages in this special case.\n     * @param x multiplicand\n     * @return product of this and x\n     */\n    private Dfp multiplyFast(final int x) {\n        Dfp result = newInstance(this);\n\n        /* handle special cases */\n        if (nans != FINITE) {\n            if (isNaN()) {\n                return this;\n            }\n\n            if (nans == INFINITE && x != 0) {\n                result = newInstance(this);\n                return result;\n            }\n\n            if (nans == INFINITE && x == 0) {\n                field.setIEEEFlagsBits(DfpField.FLAG_INVALID);\n                result = newInstance(getZero());\n                result.nans = QNAN;\n                result = dotrap(DfpField.FLAG_INVALID, MULTIPLY_TRAP, newInstance(getZero()), result);\n                return result;\n            }\n        }\n\n        /* range check x */\n        if (x < 0 || x >= RADIX) {\n            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);\n            result = newInstance(getZero());\n            result.nans = QNAN;\n            result = dotrap(DfpField.FLAG_INVALID, MULTIPLY_TRAP, result, result);\n            return result;\n        }\n\n        int rh = 0;\n        for (int i = 0; i < mant.length; i++) {\n            final int r = mant[i] * x + rh;\n            rh = r / RADIX;\n            result.mant[i] = r - rh * RADIX;\n        }\n\n        int lostdigit = 0;\n        if (rh != 0) {\n            lostdigit = result.mant[0];\n            result.shiftRight();\n            result.mant[mant.length-1] = rh;\n        }\n\n        if (result.mant[mant.length-1] == 0) { // if result is zero, set exp to zero\n            result.exp = 0;\n        }\n\n        final int excp = result.round(lostdigit);\n        if (excp != 0) {\n            result = dotrap(excp, MULTIPLY_TRAP, result, result);\n        }\n\n        return result;\n    }\n\n    /** Divide this by divisor.\n     * @param divisor divisor\n     * @return quotient of this by divisor\n     */\n    public Dfp divide(Dfp divisor) {\n        int dividend[]; // current status of the dividend\n        int quotient[]; // quotient\n        int remainder[];// remainder\n        int qd;         // current quotient digit we're working with\n        int nsqd;       // number of significant quotient digits we have\n        int trial=0;    // trial quotient digit\n        int minadj;     // minimum adjustment\n        boolean trialgood; // Flag to indicate a good trail digit\n        int md=0;       // most sig digit in result\n        int excp;       // exceptions\n\n        // make sure we don't mix number with different precision\n        if (field.getRadixDigits() != divisor.field.getRadixDigits()) {\n            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);\n            final Dfp result = newInstance(getZero());\n            result.nans = QNAN;\n            return dotrap(DfpField.FLAG_INVALID, DIVIDE_TRAP, divisor, result);\n        }\n\n        Dfp result = newInstance(getZero());\n\n        /* handle special cases */\n        if (nans != FINITE || divisor.nans != FINITE) {\n            if (isNaN()) {\n                return this;\n            }\n\n            if (divisor.isNaN()) {\n                return divisor;\n            }\n\n            if (nans == INFINITE && divisor.nans == FINITE) {\n                result = newInstance(this);\n                result.sign = (byte) (sign * divisor.sign);\n                return result;\n            }\n\n            if (divisor.nans == INFINITE && nans == FINITE) {\n                result = newInstance(getZero());\n                result.sign = (byte) (sign * divisor.sign);\n                return result;\n            }\n\n            if (divisor.nans == INFINITE && nans == INFINITE) {\n                field.setIEEEFlagsBits(DfpField.FLAG_INVALID);\n                result = newInstance(getZero());\n                result.nans = QNAN;\n                result = dotrap(DfpField.FLAG_INVALID, DIVIDE_TRAP, divisor, result);\n                return result;\n            }\n        }\n\n        /* Test for divide by zero */\n        if (divisor.mant[mant.length-1] == 0) {\n            field.setIEEEFlagsBits(DfpField.FLAG_DIV_ZERO);\n            result = newInstance(getZero());\n            result.sign = (byte) (sign * divisor.sign);\n            result.nans = INFINITE;\n            result = dotrap(DfpField.FLAG_DIV_ZERO, DIVIDE_TRAP, divisor, result);\n            return result;\n        }\n\n        dividend = new int[mant.length+1];  // one extra digit needed\n        quotient = new int[mant.length+2];  // two extra digits needed 1 for overflow, 1 for rounding\n        remainder = new int[mant.length+1]; // one extra digit needed\n\n        /* Initialize our most significant digits to zero */\n\n        dividend[mant.length] = 0;\n        quotient[mant.length] = 0;\n        quotient[mant.length+1] = 0;\n        remainder[mant.length] = 0;\n\n        /* copy our mantissa into the dividend, initialize the\n       quotient while we are at it */\n\n        for (int i = 0; i < mant.length; i++) {\n            dividend[i] = mant[i];\n            quotient[i] = 0;\n            remainder[i] = 0;\n        }\n\n        /* outer loop.  Once per quotient digit */\n        nsqd = 0;\n        for (qd = mant.length+1; qd >= 0; qd--) {\n            /* Determine outer limits of our quotient digit */\n\n            // r =  most sig 2 digits of dividend\n            final int divMsb = dividend[mant.length]*RADIX+dividend[mant.length-1];\n            int min = divMsb       / (divisor.mant[mant.length-1]+1);\n            int max = (divMsb + 1) / divisor.mant[mant.length-1];\n\n            trialgood = false;\n            while (!trialgood) {\n                // try the mean\n                trial = (min+max)/2;\n\n                /* Multiply by divisor and store as remainder */\n                int rh = 0;\n                for (int i = 0; i < mant.length + 1; i++) {\n                    int dm = (i<mant.length)?divisor.mant[i]:0;\n                    final int r = (dm * trial) + rh;\n                    rh = r / RADIX;\n                    remainder[i] = r - rh * RADIX;\n                }\n\n                /* subtract the remainder from the dividend */\n                rh = 1;  // carry in to aid the subtraction\n                for (int i = 0; i < mant.length + 1; i++) {\n                    final int r = ((RADIX-1) - remainder[i]) + dividend[i] + rh;\n                    rh = r / RADIX;\n                    remainder[i] = r - rh * RADIX;\n                }\n\n                /* Lets analyze what we have here */\n                if (rh == 0) {\n                    // trial is too big -- negative remainder\n                    max = trial-1;\n                    continue;\n                }\n\n                /* find out how far off the remainder is telling us we are */\n                minadj = (remainder[mant.length] * RADIX)+remainder[mant.length-1];\n                minadj /= divisor.mant[mant.length-1] + 1;\n\n                if (minadj >= 2) {\n                    min = trial+minadj;  // update the minimum\n                    continue;\n                }\n\n                /* May have a good one here, check more thoroughly.  Basically\n           its a good one if it is less than the divisor */\n                trialgood = false;  // assume false\n                for (int i = mant.length - 1; i >= 0; i--) {\n                    if (divisor.mant[i] > remainder[i]) {\n                        trialgood = true;\n                    }\n                    if (divisor.mant[i] < remainder[i]) {\n                        break;\n                    }\n                }\n\n                if (remainder[mant.length] != 0) {\n                    trialgood = false;\n                }\n\n                if (trialgood == false) {\n                    min = trial+1;\n                }\n            }\n\n            /* Great we have a digit! */\n            quotient[qd] = trial;\n            if (trial != 0 || nsqd != 0) {\n                nsqd++;\n            }\n\n            if (field.getRoundingMode() == DfpField.RoundingMode.ROUND_DOWN && nsqd == mant.length) {\n                // We have enough for this mode\n                break;\n            }\n\n            if (nsqd > mant.length) {\n                // We have enough digits\n                break;\n            }\n\n            /* move the remainder into the dividend while left shifting */\n            dividend[0] = 0;\n            for (int i = 0; i < mant.length; i++) {\n                dividend[i + 1] = remainder[i];\n            }\n        }\n\n        /* Find the most sig digit */\n        md = mant.length;  // default\n        for (int i = mant.length + 1; i >= 0; i--) {\n            if (quotient[i] != 0) {\n                md = i;\n                break;\n            }\n        }\n\n        /* Copy the digits into the result */\n        for (int i=0; i<mant.length; i++) {\n            result.mant[mant.length-i-1] = quotient[md-i];\n        }\n\n        /* Fixup the exponent. */\n        result.exp = exp - divisor.exp + md - mant.length;\n        result.sign = (byte) ((sign == divisor.sign) ? 1 : -1);\n\n        if (result.mant[mant.length-1] == 0) { // if result is zero, set exp to zero\n            result.exp = 0;\n        }\n\n        if (md > (mant.length-1)) {\n            excp = result.round(quotient[md-mant.length]);\n        } else {\n            excp = result.round(0);\n        }\n\n        if (excp != 0) {\n            result = dotrap(excp, DIVIDE_TRAP, divisor, result);\n        }\n\n        return result;\n    }\n\n    /** Divide by a single digit less than radix.\n     *  Special case, so there are speed advantages. 0 &lt;= divisor &lt; radix\n     * @param divisor divisor\n     * @return quotient of this by divisor\n     */\n    public Dfp divide(int divisor) {\n\n        // Handle special cases\n        if (nans != FINITE) {\n            if (isNaN()) {\n                return this;\n            }\n\n            if (nans == INFINITE) {\n                return newInstance(this);\n            }\n        }\n\n        // Test for divide by zero\n        if (divisor == 0) {\n            field.setIEEEFlagsBits(DfpField.FLAG_DIV_ZERO);\n            Dfp result = newInstance(getZero());\n            result.sign = sign;\n            result.nans = INFINITE;\n            result = dotrap(DfpField.FLAG_DIV_ZERO, DIVIDE_TRAP, getZero(), result);\n            return result;\n        }\n\n        // range check divisor\n        if (divisor < 0 || divisor >= RADIX) {\n            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);\n            Dfp result = newInstance(getZero());\n            result.nans = QNAN;\n            result = dotrap(DfpField.FLAG_INVALID, DIVIDE_TRAP, result, result);\n            return result;\n        }\n\n        Dfp result = newInstance(this);\n\n        int rl = 0;\n        for (int i = mant.length-1; i >= 0; i--) {\n            final int r = rl*RADIX + result.mant[i];\n            final int rh = r / divisor;\n            rl = r - rh * divisor;\n            result.mant[i] = rh;\n        }\n\n        if (result.mant[mant.length-1] == 0) {\n            // normalize\n            result.shiftLeft();\n            final int r = rl * RADIX;        // compute the next digit and put it in\n            final int rh = r / divisor;\n            rl = r - rh * divisor;\n            result.mant[0] = rh;\n        }\n\n        final int excp = result.round(rl * RADIX / divisor);  // do the rounding\n        if (excp != 0) {\n            result = dotrap(excp, DIVIDE_TRAP, result, result);\n        }\n\n        return result;\n\n    }\n\n    /** {@inheritDoc} */\n    public Dfp reciprocal() {\n        return field.getOne().divide(this);\n    }\n\n    /** Compute the square root.\n     * @return square root of the instance\n     * @since 3.2\n     */\n    public Dfp sqrt() {\n\n        // check for unusual cases\n        if (nans == FINITE && mant[mant.length-1] == 0) {\n            // if zero\n            return newInstance(this);\n        }\n\n        if (nans != FINITE) {\n            if (nans == INFINITE && sign == 1) {\n                // if positive infinity\n                return newInstance(this);\n            }\n\n            if (nans == QNAN) {\n                return newInstance(this);\n            }\n\n            if (nans == SNAN) {\n                Dfp result;\n\n                field.setIEEEFlagsBits(DfpField.FLAG_INVALID);\n                result = newInstance(this);\n                result = dotrap(DfpField.FLAG_INVALID, SQRT_TRAP, null, result);\n                return result;\n            }\n        }\n\n        if (sign == -1) {\n            // if negative\n            Dfp result;\n\n            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);\n            result = newInstance(this);\n            result.nans = QNAN;\n            result = dotrap(DfpField.FLAG_INVALID, SQRT_TRAP, null, result);\n            return result;\n        }\n\n        Dfp x = newInstance(this);\n\n        /* Lets make a reasonable guess as to the size of the square root */\n        if (x.exp < -1 || x.exp > 1) {\n            x.exp = this.exp / 2;\n        }\n\n        /* Coarsely estimate the mantissa */\n        switch (x.mant[mant.length-1] / 2000) {\n            case 0:\n                x.mant[mant.length-1] = x.mant[mant.length-1]/2+1;\n                break;\n            case 2:\n                x.mant[mant.length-1] = 1500;\n                break;\n            case 3:\n                x.mant[mant.length-1] = 2200;\n                break;\n            default:\n                x.mant[mant.length-1] = 3000;\n        }\n\n        Dfp dx = newInstance(x);\n\n        /* Now that we have the first pass estimate, compute the rest\n       by the formula dx = (y - x*x) / (2x); */\n\n        Dfp px  = getZero();\n        Dfp ppx = getZero();\n        while (x.unequal(px)) {\n            dx = newInstance(x);\n            dx.sign = -1;\n            dx = dx.add(this.divide(x));\n            dx = dx.divide(2);\n            ppx = px;\n            px = x;\n            x = x.add(dx);\n\n            if (x.equals(ppx)) {\n                // alternating between two values\n                break;\n            }\n\n            // if dx is zero, break.  Note testing the most sig digit\n            // is a sufficient test since dx is normalized\n            if (dx.mant[mant.length-1] == 0) {\n                break;\n            }\n        }\n\n        return x;\n\n    }\n\n    /** Get a string representation of the instance.\n     * @return string representation of the instance\n     */\n    @Override\n    public String toString() {\n        if (nans != FINITE) {\n            // if non-finite exceptional cases\n            if (nans == INFINITE) {\n                return (sign < 0) ? NEG_INFINITY_STRING : POS_INFINITY_STRING;\n            } else {\n                return NAN_STRING;\n            }\n        }\n\n        if (exp > mant.length || exp < -1) {\n            return dfp2sci();\n        }\n\n        return dfp2string();\n\n    }\n\n    /** Convert an instance to a string using scientific notation.\n     * @return string representation of the instance in scientific notation\n     */\n    protected String dfp2sci() {\n        char rawdigits[]    = new char[mant.length * 4];\n        char outputbuffer[] = new char[mant.length * 4 + 20];\n        int p;\n        int q;\n        int e;\n        int ae;\n        int shf;\n\n        // Get all the digits\n        p = 0;\n        for (int i = mant.length - 1; i >= 0; i--) {\n            rawdigits[p++] = (char) ((mant[i] / 1000) + '0');\n            rawdigits[p++] = (char) (((mant[i] / 100) %10) + '0');\n            rawdigits[p++] = (char) (((mant[i] / 10) % 10) + '0');\n            rawdigits[p++] = (char) (((mant[i]) % 10) + '0');\n        }\n\n        // Find the first non-zero one\n        for (p = 0; p < rawdigits.length; p++) {\n            if (rawdigits[p] != '0') {\n                break;\n            }\n        }\n        shf = p;\n\n        // Now do the conversion\n        q = 0;\n        if (sign == -1) {\n            outputbuffer[q++] = '-';\n        }\n\n        if (p != rawdigits.length) {\n            // there are non zero digits...\n            outputbuffer[q++] = rawdigits[p++];\n            outputbuffer[q++] = '.';\n\n            while (p<rawdigits.length) {\n                outputbuffer[q++] = rawdigits[p++];\n            }\n        } else {\n            outputbuffer[q++] = '0';\n            outputbuffer[q++] = '.';\n            outputbuffer[q++] = '0';\n            outputbuffer[q++] = 'e';\n            outputbuffer[q++] = '0';\n            return new String(outputbuffer, 0, 5);\n        }\n\n        outputbuffer[q++] = 'e';\n\n        // Find the msd of the exponent\n\n        e = exp * 4 - shf - 1;\n        ae = e;\n        if (e < 0) {\n            ae = -e;\n        }\n\n        // Find the largest p such that p < e\n        for (p = 1000000000; p > ae; p /= 10) {\n            // nothing to do\n        }\n\n        if (e < 0) {\n            outputbuffer[q++] = '-';\n        }\n\n        while (p > 0) {\n            outputbuffer[q++] = (char)(ae / p + '0');\n            ae %= p;\n            p /= 10;\n        }\n\n        return new String(outputbuffer, 0, q);\n\n    }\n\n    /** Convert an instance to a string using normal notation.\n     * @return string representation of the instance in normal notation\n     */\n    protected String dfp2string() {\n        char buffer[] = new char[mant.length*4 + 20];\n        int p = 1;\n        int q;\n        int e = exp;\n        boolean pointInserted = false;\n\n        buffer[0] = ' ';\n\n        if (e <= 0) {\n            buffer[p++] = '0';\n            buffer[p++] = '.';\n            pointInserted = true;\n        }\n\n        while (e < 0) {\n            buffer[p++] = '0';\n            buffer[p++] = '0';\n            buffer[p++] = '0';\n            buffer[p++] = '0';\n            e++;\n        }\n\n        for (int i = mant.length - 1; i >= 0; i--) {\n            buffer[p++] = (char) ((mant[i] / 1000) + '0');\n            buffer[p++] = (char) (((mant[i] / 100) % 10) + '0');\n            buffer[p++] = (char) (((mant[i] / 10) % 10) + '0');\n            buffer[p++] = (char) (((mant[i]) % 10) + '0');\n            if (--e == 0) {\n                buffer[p++] = '.';\n                pointInserted = true;\n            }\n        }\n\n        while (e > 0) {\n            buffer[p++] = '0';\n            buffer[p++] = '0';\n            buffer[p++] = '0';\n            buffer[p++] = '0';\n            e--;\n        }\n\n        if (!pointInserted) {\n            // Ensure we have a radix point!\n            buffer[p++] = '.';\n        }\n\n        // Suppress leading zeros\n        q = 1;\n        while (buffer[q] == '0') {\n            q++;\n        }\n        if (buffer[q] == '.') {\n            q--;\n        }\n\n        // Suppress trailing zeros\n        while (buffer[p-1] == '0') {\n            p--;\n        }\n\n        // Insert sign\n        if (sign < 0) {\n            buffer[--q] = '-';\n        }\n\n        return new String(buffer, q, p - q);\n\n    }\n\n    /** Raises a trap.  This does not set the corresponding flag however.\n     *  @param type the trap type\n     *  @param what - name of routine trap occurred in\n     *  @param oper - input operator to function\n     *  @param result - the result computed prior to the trap\n     *  @return The suggested return value from the trap handler\n     */\n    public Dfp dotrap(int type, String what, Dfp oper, Dfp result) {\n        Dfp def = result;\n\n        switch (type) {\n            case DfpField.FLAG_INVALID:\n                def = newInstance(getZero());\n                def.sign = result.sign;\n                def.nans = QNAN;\n                break;\n\n            case DfpField.FLAG_DIV_ZERO:\n                if (nans == FINITE && mant[mant.length-1] != 0) {\n                    // normal case, we are finite, non-zero\n                    def = newInstance(getZero());\n                    def.sign = (byte)(sign*oper.sign);\n                    def.nans = INFINITE;\n                }\n\n                if (nans == FINITE && mant[mant.length-1] == 0) {\n                    //  0/0\n                    def = newInstance(getZero());\n                    def.nans = QNAN;\n                }\n\n                if (nans == INFINITE || nans == QNAN) {\n                    def = newInstance(getZero());\n                    def.nans = QNAN;\n                }\n\n                if (nans == INFINITE || nans == SNAN) {\n                    def = newInstance(getZero());\n                    def.nans = QNAN;\n                }\n                break;\n\n            case DfpField.FLAG_UNDERFLOW:\n                if ( (result.exp+mant.length) < MIN_EXP) {\n                    def = newInstance(getZero());\n                    def.sign = result.sign;\n                } else {\n                    def = newInstance(result);  // gradual underflow\n                }\n                result.exp += ERR_SCALE;\n                break;\n\n            case DfpField.FLAG_OVERFLOW:\n                result.exp -= ERR_SCALE;\n                def = newInstance(getZero());\n                def.sign = result.sign;\n                def.nans = INFINITE;\n                break;\n\n            default: def = result; break;\n        }\n\n        return trap(type, what, oper, def, result);\n\n    }\n\n    /** Trap handler.  Subclasses may override this to provide trap\n     *  functionality per IEEE 854-1987.\n     *\n     *  @param type  The exception type - e.g. FLAG_OVERFLOW\n     *  @param what  The name of the routine we were in e.g. divide()\n     *  @param oper  An operand to this function if any\n     *  @param def   The default return value if trap not enabled\n     *  @param result    The result that is specified to be delivered per\n     *                   IEEE 854, if any\n     *  @return the value that should be return by the operation triggering the trap\n     */\n    protected Dfp trap(int type, String what, Dfp oper, Dfp def, Dfp result) {\n        return def;\n    }\n\n    /** Returns the type - one of FINITE, INFINITE, SNAN, QNAN.\n     * @return type of the number\n     */\n    public int classify() {\n        return nans;\n    }\n\n    /** Creates an instance that is the same as x except that it has the sign of y.\n     * abs(x) = dfp.copysign(x, dfp.one)\n     * @param x number to get the value from\n     * @param y number to get the sign from\n     * @return a number with the value of x and the sign of y\n     */\n    public static Dfp copysign(final Dfp x, final Dfp y) {\n        Dfp result = x.newInstance(x);\n        result.sign = y.sign;\n        return result;\n    }\n\n    /** Returns the next number greater than this one in the direction of x.\n     * If this==x then simply returns this.\n     * @param x direction where to look at\n     * @return closest number next to instance in the direction of x\n     */\n    public Dfp nextAfter(final Dfp x) {\n\n        // make sure we don't mix number with different precision\n        if (field.getRadixDigits() != x.field.getRadixDigits()) {\n            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);\n            final Dfp result = newInstance(getZero());\n            result.nans = QNAN;\n            return dotrap(DfpField.FLAG_INVALID, NEXT_AFTER_TRAP, x, result);\n        }\n\n        // if this is greater than x\n        boolean up = false;\n        if (this.lessThan(x)) {\n            up = true;\n        }\n\n        if (compare(this, x) == 0) {\n            return newInstance(x);\n        }\n\n        if (lessThan(getZero())) {\n            up = !up;\n        }\n\n        final Dfp inc;\n        Dfp result;\n        if (up) {\n            inc = newInstance(getOne());\n            inc.exp = this.exp-mant.length+1;\n            inc.sign = this.sign;\n\n            if (this.equals(getZero())) {\n                inc.exp = MIN_EXP-mant.length;\n            }\n\n            result = add(inc);\n        } else {\n            inc = newInstance(getOne());\n            inc.exp = this.exp;\n            inc.sign = this.sign;\n\n            if (this.equals(inc)) {\n                inc.exp = this.exp-mant.length;\n            } else {\n                inc.exp = this.exp-mant.length+1;\n            }\n\n            if (this.equals(getZero())) {\n                inc.exp = MIN_EXP-mant.length;\n            }\n\n            result = this.subtract(inc);\n        }\n\n        if (result.classify() == INFINITE && this.classify() != INFINITE) {\n            field.setIEEEFlagsBits(DfpField.FLAG_INEXACT);\n            result = dotrap(DfpField.FLAG_INEXACT, NEXT_AFTER_TRAP, x, result);\n        }\n\n        if (result.equals(getZero()) && this.equals(getZero()) == false) {\n            field.setIEEEFlagsBits(DfpField.FLAG_INEXACT);\n            result = dotrap(DfpField.FLAG_INEXACT, NEXT_AFTER_TRAP, x, result);\n        }\n\n        return result;\n\n    }\n\n    /** Convert the instance into a double.\n     * @return a double approximating the instance\n     * @see #toSplitDouble()\n     */\n    public double toDouble() {\n\n        if (isInfinite()) {\n            if (lessThan(getZero())) {\n                return Double.NEGATIVE_INFINITY;\n            } else {\n                return Double.POSITIVE_INFINITY;\n            }\n        }\n\n        if (isNaN()) {\n            return Double.NaN;\n        }\n\n        Dfp y = this;\n        boolean negate = false;\n        int cmp0 = compare(this, getZero());\n        if (cmp0 == 0) {\n            return sign < 0 ? -0.0 : +0.0;\n        } else if (cmp0 < 0) {\n            y = negate();\n            negate = true;\n        }\n\n        /* Find the exponent, first estimate by integer log10, then adjust.\n         Should be faster than doing a natural logarithm.  */\n        int exponent = (int)(y.intLog10() * 3.32);\n        if (exponent < 0) {\n            exponent--;\n        }\n\n        Dfp tempDfp = DfpMath.pow(getTwo(), exponent);\n        while (tempDfp.lessThan(y) || tempDfp.equals(y)) {\n            tempDfp = tempDfp.multiply(2);\n            exponent++;\n        }\n        exponent--;\n\n        /* We have the exponent, now work on the mantissa */\n\n        y = y.divide(DfpMath.pow(getTwo(), exponent));\n        if (exponent > -1023) {\n            y = y.subtract(getOne());\n        }\n\n        if (exponent < -1074) {\n            return 0;\n        }\n\n        if (exponent > 1023) {\n            return negate ? Double.NEGATIVE_INFINITY : Double.POSITIVE_INFINITY;\n        }\n\n\n        y = y.multiply(newInstance(4503599627370496l)).rint();\n        String str = y.toString();\n        str = str.substring(0, str.length()-1);\n        long mantissa = Long.parseLong(str);\n\n        if (mantissa == 4503599627370496L) {\n            // Handle special case where we round up to next power of two\n            mantissa = 0;\n            exponent++;\n        }\n\n        /* Its going to be subnormal, so make adjustments */\n        if (exponent <= -1023) {\n            exponent--;\n        }\n\n        while (exponent < -1023) {\n            exponent++;\n            mantissa >>>= 1;\n        }\n\n        long bits = mantissa | ((exponent + 1023L) << 52);\n        double x = Double.longBitsToDouble(bits);\n\n        if (negate) {\n            x = -x;\n        }\n\n        return x;\n\n    }\n\n    /** Convert the instance into a split double.\n     * @return an array of two doubles which sum represent the instance\n     * @see #toDouble()\n     */\n    public double[] toSplitDouble() {\n        double split[] = new double[2];\n        long mask = 0xffffffffc0000000L;\n\n        split[0] = Double.longBitsToDouble(Double.doubleToLongBits(toDouble()) & mask);\n        split[1] = subtract(newInstance(split[0])).toDouble();\n\n        return split;\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public double getReal() {\n        return toDouble();\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp add(final double a) {\n        return add(newInstance(a));\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp subtract(final double a) {\n        return subtract(newInstance(a));\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp multiply(final double a) {\n        return multiply(newInstance(a));\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp divide(final double a) {\n        return divide(newInstance(a));\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp remainder(final double a) {\n        return remainder(newInstance(a));\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public long round() {\n        return FastMath.round(toDouble());\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp signum() {\n        if (isNaN() || isZero()) {\n            return this;\n        } else {\n            return newInstance(sign > 0 ? +1 : -1);\n        }\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp copySign(final Dfp s) {\n        if ((sign >= 0 && s.sign >= 0) || (sign < 0 && s.sign < 0)) { // Sign is currently OK\n            return this;\n        }\n        return negate(); // flip sign\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp copySign(final double s) {\n        long sb = Double.doubleToLongBits(s);\n        if ((sign >= 0 && sb >= 0) || (sign < 0 && sb < 0)) { // Sign is currently OK\n            return this;\n        }\n        return negate(); // flip sign\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp scalb(final int n) {\n        return multiply(DfpMath.pow(getTwo(), n));\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp hypot(final Dfp y) {\n        return multiply(this).add(y.multiply(y)).sqrt();\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp cbrt() {\n        return rootN(3);\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp rootN(final int n) {\n        return (sign >= 0) ?\n               DfpMath.pow(this, getOne().divide(n)) :\n               DfpMath.pow(negate(), getOne().divide(n)).negate();\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp pow(final double p) {\n        return DfpMath.pow(this, newInstance(p));\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp pow(final int n) {\n        return DfpMath.pow(this, n);\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp pow(final Dfp e) {\n        return DfpMath.pow(this, e);\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp exp() {\n        return DfpMath.exp(this);\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp expm1() {\n        return DfpMath.exp(this).subtract(getOne());\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp log() {\n        return DfpMath.log(this);\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp log1p() {\n        return DfpMath.log(this.add(getOne()));\n    }\n\n//  TODO: deactivate this implementation (and return type) in 4.0\n    /** Get the exponent of the greatest power of 10 that is less than or equal to abs(this).\n     *  @return integer base 10 logarithm\n     *  @deprecated as of 3.2, replaced by {@link #intLog10()}, in 4.0 the return type\n     *  will be changed to Dfp\n     */\n    @Deprecated\n    public int log10()  {\n        return intLog10();\n    }\n\n//    TODO: activate this implementation (and return type) in 4.0\n//    /** {@inheritDoc}\n//     * @since 3.2\n//     */\n//    public Dfp log10() {\n//        return DfpMath.log(this).divide(DfpMath.log(newInstance(10)));\n//    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp cos() {\n        return DfpMath.cos(this);\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp sin() {\n        return DfpMath.sin(this);\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp tan() {\n        return DfpMath.tan(this);\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp acos() {\n        return DfpMath.acos(this);\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp asin() {\n        return DfpMath.asin(this);\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp atan() {\n        return DfpMath.atan(this);\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp atan2(final Dfp x)\n        throws DimensionMismatchException {\n\n        // compute r = sqrt(x^2+y^2)\n        final Dfp r = x.multiply(x).add(multiply(this)).sqrt();\n\n        if (x.sign >= 0) {\n\n            // compute atan2(y, x) = 2 atan(y / (r + x))\n            return getTwo().multiply(divide(r.add(x)).atan());\n\n        } else {\n\n            // compute atan2(y, x) = +/- pi - 2 atan(y / (r - x))\n            final Dfp tmp = getTwo().multiply(divide(r.subtract(x)).atan());\n            final Dfp pmPi = newInstance((tmp.sign <= 0) ? -FastMath.PI : FastMath.PI);\n            return pmPi.subtract(tmp);\n\n        }\n\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp cosh() {\n        return DfpMath.exp(this).add(DfpMath.exp(negate())).divide(2);\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp sinh() {\n        return DfpMath.exp(this).subtract(DfpMath.exp(negate())).divide(2);\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp tanh() {\n        final Dfp ePlus  = DfpMath.exp(this);\n        final Dfp eMinus = DfpMath.exp(negate());\n        return ePlus.subtract(eMinus).divide(ePlus.add(eMinus));\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp acosh() {\n        return multiply(this).subtract(getOne()).sqrt().add(this).log();\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp asinh() {\n        return multiply(this).add(getOne()).sqrt().add(this).log();\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp atanh() {\n        return getOne().add(this).divide(getOne().subtract(this)).log().divide(2);\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp linearCombination(final Dfp[] a, final Dfp[] b)\n        throws DimensionMismatchException {\n        if (a.length != b.length) {\n            throw new DimensionMismatchException(a.length, b.length);\n        }\n        Dfp r = getZero();\n        for (int i = 0; i < a.length; ++i) {\n            r = r.add(a[i].multiply(b[i]));\n        }\n        return r;\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp linearCombination(final double[] a, final Dfp[] b)\n        throws DimensionMismatchException {\n        if (a.length != b.length) {\n            throw new DimensionMismatchException(a.length, b.length);\n        }\n        Dfp r = getZero();\n        for (int i = 0; i < a.length; ++i) {\n            r = r.add(b[i].multiply(a[i]));\n        }\n        return r;\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp linearCombination(final Dfp a1, final Dfp b1, final Dfp a2, final Dfp b2) {\n        return a1.multiply(b1).add(a2.multiply(b2));\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp linearCombination(final double a1, final Dfp b1, final double a2, final Dfp b2) {\n        return b1.multiply(a1).add(b2.multiply(a2));\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp linearCombination(final Dfp a1, final Dfp b1,\n                                 final Dfp a2, final Dfp b2,\n                                 final Dfp a3, final Dfp b3) {\n        return a1.multiply(b1).add(a2.multiply(b2)).add(a3.multiply(b3));\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp linearCombination(final double a1, final Dfp b1,\n                                 final double a2, final Dfp b2,\n                                 final double a3, final Dfp b3) {\n        return b1.multiply(a1).add(b2.multiply(a2)).add(b3.multiply(a3));\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp linearCombination(final Dfp a1, final Dfp b1, final Dfp a2, final Dfp b2,\n                                 final Dfp a3, final Dfp b3, final Dfp a4, final Dfp b4) {\n        return a1.multiply(b1).add(a2.multiply(b2)).add(a3.multiply(b3)).add(a4.multiply(b4));\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp linearCombination(final double a1, final Dfp b1, final double a2, final Dfp b2,\n                                 final double a3, final Dfp b3, final double a4, final Dfp b4) {\n        return b1.multiply(a1).add(b2.multiply(a2)).add(b3.multiply(a3)).add(b4.multiply(a4));\n    }\n\n}\n",
  "tokensGeneralGrammar" : [ "null", "true", "false", ",", ".", ":", ";", "?", "(", ")", "jdVar", "stream", "Arrays", "allMatch", "noneMatch", "anyMatch", "~", ">>", "<<", ">>>", "|", "&", "^", "+", "-", "/", "*", "%", "&&", "||", ">=", "<=", ">", "<", "==", "!=", "instanceof", "class", "methodResultID", "this" ],
  "tokensGeneralValuesGlobalDictionary" : [ [ "0", "int" ], [ "1", "int" ], [ "-1", "int" ], [ "0.0", "double" ], [ "1.0", "double" ], [ "-1.0", "double" ], [ "\"\"", "String" ], [ "\" \"", "String" ] ],
  "tokensProjectClasses" : [ [ "RealFieldElement", "org.apache.commons.math3" ], [ "Primes", "org.apache.commons.math3.primes" ], [ "SmallPrimes", "org.apache.commons.math3.primes" ], [ "PollardRho", "org.apache.commons.math3.primes" ], [ "CurveFitter", "org.apache.commons.math3.fitting" ], [ "GaussianCurveFitter", "org.apache.commons.math3.fitting" ], [ "SimpleCurveFitter", "org.apache.commons.math3.fitting" ], [ "PolynomialFitter", "org.apache.commons.math3.fitting" ], [ "HarmonicFitter", "org.apache.commons.math3.fitting" ], [ "WeightedObservedPoint", "org.apache.commons.math3.fitting" ], [ "ParameterValidator", "org.apache.commons.math3.fitting.leastsquares" ], [ "LevenbergMarquardtOptimizer", "org.apache.commons.math3.fitting.leastsquares" ], [ "EvaluationRmsChecker", "org.apache.commons.math3.fitting.leastsquares" ], [ "OptimumImpl", "org.apache.commons.math3.fitting.leastsquares" ], [ "LeastSquaresAdapter", "org.apache.commons.math3.fitting.leastsquares" ], [ "DenseWeightedEvaluation", "org.apache.commons.math3.fitting.leastsquares" ], [ "LeastSquaresOptimizer", "org.apache.commons.math3.fitting.leastsquares" ], [ "AbstractEvaluation", "org.apache.commons.math3.fitting.leastsquares" ], [ "GaussNewtonOptimizer", "org.apache.commons.math3.fitting.leastsquares" ], [ "LeastSquaresFactory", "org.apache.commons.math3.fitting.leastsquares" ], [ "ValueAndJacobianFunction", "org.apache.commons.math3.fitting.leastsquares" ], [ "MultivariateJacobianFunction", "org.apache.commons.math3.fitting.leastsquares" ], [ "LeastSquaresBuilder", "org.apache.commons.math3.fitting.leastsquares" ], [ "LeastSquaresProblem", "org.apache.commons.math3.fitting.leastsquares" ], [ "WeightedObservedPoints", "org.apache.commons.math3.fitting" ], [ "GaussianFitter", "org.apache.commons.math3.fitting" ], [ "AbstractCurveFitter", "org.apache.commons.math3.fitting" ], [ "HarmonicCurveFitter", "org.apache.commons.math3.fitting" ], [ "PolynomialCurveFitter", "org.apache.commons.math3.fitting" ], [ "UnivariateMatrixFunction", "org.apache.commons.math3.analysis" ], [ "FunctionUtils", "org.apache.commons.math3.analysis" ], [ "DifferentiableUnivariateMatrixFunction", "org.apache.commons.math3.analysis" ], [ "IterativeLegendreGaussIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "LegendreGaussIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "MidPointIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "RombergIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "SimpsonIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "BaseRuleFactory", "org.apache.commons.math3.analysis.integration.gauss" ], [ "HermiteRuleFactory", "org.apache.commons.math3.analysis.integration.gauss" ], [ "GaussIntegratorFactory", "org.apache.commons.math3.analysis.integration.gauss" ], [ "LegendreRuleFactory", "org.apache.commons.math3.analysis.integration.gauss" ], [ "LegendreHighPrecisionRuleFactory", "org.apache.commons.math3.analysis.integration.gauss" ], [ "SymmetricGaussIntegrator", "org.apache.commons.math3.analysis.integration.gauss" ], [ "GaussIntegrator", "org.apache.commons.math3.analysis.integration.gauss" ], [ "BaseAbstractUnivariateIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "UnivariateIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "TrapezoidIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "BivariateFunction", "org.apache.commons.math3.analysis" ], [ "DifferentiableUnivariateFunction", "org.apache.commons.math3.analysis" ], [ "DifferentiableUnivariateVectorFunction", "org.apache.commons.math3.analysis" ], [ "UnivariateVectorFunction", "org.apache.commons.math3.analysis" ], [ "AbstractDifferentiableUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "AbstractUnivariateDifferentiableSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BaseUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "PegasusSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BracketedUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "UnivariateSolverUtils", "org.apache.commons.math3.analysis.solvers" ], [ "FieldBracketingNthOrderBrentSolver", "org.apache.commons.math3.analysis.solvers" ], [ "NewtonRaphsonSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BaseSecantSolver", "org.apache.commons.math3.analysis.solvers" ], [ "SecantSolver", "org.apache.commons.math3.analysis.solvers" ], [ "DifferentiableUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "UnivariateDifferentiableSolver", "org.apache.commons.math3.analysis.solvers" ], [ "MullerSolver2", "org.apache.commons.math3.analysis.solvers" ], [ "AbstractPolynomialSolver", "org.apache.commons.math3.analysis.solvers" ], [ "MullerSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BaseAbstractUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BrentSolver", "org.apache.commons.math3.analysis.solvers" ], [ "LaguerreSolver", "org.apache.commons.math3.analysis.solvers" ], [ "IllinoisSolver", "org.apache.commons.math3.analysis.solvers" ], [ "PolynomialSolver", "org.apache.commons.math3.analysis.solvers" ], [ "RegulaFalsiSolver", "org.apache.commons.math3.analysis.solvers" ], [ "AllowedSolution", "org.apache.commons.math3.analysis.solvers" ], [ "NewtonSolver", "org.apache.commons.math3.analysis.solvers" ], [ "RiddersSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BisectionSolver", "org.apache.commons.math3.analysis.solvers" ], [ "AbstractUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "UnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BracketingNthOrderBrentSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BracketedRealFieldUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "Asin", "org.apache.commons.math3.analysis.function" ], [ "Cosh", "org.apache.commons.math3.analysis.function" ], [ "Multiply", "org.apache.commons.math3.analysis.function" ], [ "Atan", "org.apache.commons.math3.analysis.function" ], [ "Asinh", "org.apache.commons.math3.analysis.function" ], [ "Rint", "org.apache.commons.math3.analysis.function" ], [ "Cos", "org.apache.commons.math3.analysis.function" ], [ "StepFunction", "org.apache.commons.math3.analysis.function" ], [ "Add", "org.apache.commons.math3.analysis.function" ], [ "Sqrt", "org.apache.commons.math3.analysis.function" ], [ "Inverse", "org.apache.commons.math3.analysis.function" ], [ "Gaussian", "org.apache.commons.math3.analysis.function" ], [ "Pow", "org.apache.commons.math3.analysis.function" ], [ "Exp", "org.apache.commons.math3.analysis.function" ], [ "Tanh", "org.apache.commons.math3.analysis.function" ], [ "Cbrt", "org.apache.commons.math3.analysis.function" ], [ "Log1p", "org.apache.commons.math3.analysis.function" ], [ "Constant", "org.apache.commons.math3.analysis.function" ], [ "Identity", "org.apache.commons.math3.analysis.function" ], [ "Signum", "org.apache.commons.math3.analysis.function" ], [ "Logit", "org.apache.commons.math3.analysis.function" ], [ "Ceil", "org.apache.commons.math3.analysis.function" ], [ "Subtract", "org.apache.commons.math3.analysis.function" ], [ "Sinh", "org.apache.commons.math3.analysis.function" ], [ "Max", "org.apache.commons.math3.analysis.function" ], [ "Acosh", "org.apache.commons.math3.analysis.function" ], [ "Min", "org.apache.commons.math3.analysis.function" ], [ "Expm1", "org.apache.commons.math3.analysis.function" ], [ "Abs", "org.apache.commons.math3.analysis.function" ], [ "Divide", "org.apache.commons.math3.analysis.function" ], [ "Log", "org.apache.commons.math3.analysis.function" ], [ "Ulp", "org.apache.commons.math3.analysis.function" ], [ "Log10", "org.apache.commons.math3.analysis.function" ], [ "Power", "org.apache.commons.math3.analysis.function" ], [ "Minus", "org.apache.commons.math3.analysis.function" ], [ "Atan2", "org.apache.commons.math3.analysis.function" ], [ "Logistic", "org.apache.commons.math3.analysis.function" ], [ "Acos", "org.apache.commons.math3.analysis.function" ], [ "Floor", "org.apache.commons.math3.analysis.function" ], [ "Sigmoid", "org.apache.commons.math3.analysis.function" ], [ "Sinc", "org.apache.commons.math3.analysis.function" ], [ "Atanh", "org.apache.commons.math3.analysis.function" ], [ "HarmonicOscillator", "org.apache.commons.math3.analysis.function" ], [ "Tan", "org.apache.commons.math3.analysis.function" ], [ "Sin", "org.apache.commons.math3.analysis.function" ], [ "MultivariateFunction", "org.apache.commons.math3.analysis" ], [ "DifferentiableMultivariateFunction", "org.apache.commons.math3.analysis" ], [ "UnivariateFunction", "org.apache.commons.math3.analysis" ], [ "TrivariateFunction", "org.apache.commons.math3.analysis" ], [ "MultivariateMatrixFunction", "org.apache.commons.math3.analysis" ], [ "ParametricUnivariateFunction", "org.apache.commons.math3.analysis" ], [ "UnivariateDifferentiableVectorFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "UnivariateDifferentiableMatrixFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "DSCompiler", "org.apache.commons.math3.analysis.differentiation" ], [ "SparseGradient", "org.apache.commons.math3.analysis.differentiation" ], [ "UnivariateFunctionDifferentiator", "org.apache.commons.math3.analysis.differentiation" ], [ "UnivariateMatrixFunctionDifferentiator", "org.apache.commons.math3.analysis.differentiation" ], [ "MultivariateDifferentiableFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "JacobianFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "GradientFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "DerivativeStructure", "org.apache.commons.math3.analysis.differentiation" ], [ "UnivariateVectorFunctionDifferentiator", "org.apache.commons.math3.analysis.differentiation" ], [ "FiniteDifferencesDifferentiator", "org.apache.commons.math3.analysis.differentiation" ], [ "MultivariateDifferentiableVectorFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "UnivariateDifferentiableFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "MultivariateVectorFunction", "org.apache.commons.math3.analysis" ], [ "DifferentiableMultivariateVectorFunction", "org.apache.commons.math3.analysis" ], [ "PolynomialFunctionNewtonForm", "org.apache.commons.math3.analysis.polynomials" ], [ "PolynomialFunctionLagrangeForm", "org.apache.commons.math3.analysis.polynomials" ], [ "PolynomialSplineFunction", "org.apache.commons.math3.analysis.polynomials" ], [ "PolynomialsUtils", "org.apache.commons.math3.analysis.polynomials" ], [ "PolynomialFunction", "org.apache.commons.math3.analysis.polynomials" ], [ "RealFieldUnivariateFunction", "org.apache.commons.math3.analysis" ], [ "TricubicInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "BicubicSplineInterpolatingFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "BicubicSplineFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "LoessInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "DividedDifferenceInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "HermiteInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "TricubicInterpolatingFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "TricubicFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "TrivariateGridInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "NevilleInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "MicrosphereProjectionInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "AkimaSplineInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "MultivariateInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "BicubicSplineInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "TricubicSplineInterpolatingFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "TricubicSplineFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "FieldHermiteInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "InterpolatingMicrosphere", "org.apache.commons.math3.analysis.interpolation" ], [ "LinearInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "BivariateGridInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "UnivariatePeriodicInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "BicubicInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "UnivariateInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "SmoothingPolynomialBicubicSplineInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "PiecewiseBicubicSplineInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "BicubicInterpolatingFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "BicubicFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "SplineInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "TricubicSplineInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "InterpolatingMicrosphere2D", "org.apache.commons.math3.analysis.interpolation" ], [ "PiecewiseBicubicSplineInterpolatingFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "MicrosphereInterpolatingFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "MicrosphereInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "Precision", "org.apache.commons.math3.util" ], [ "MultidimensionalCounter", "org.apache.commons.math3.util" ], [ "DoubleArray", "org.apache.commons.math3.util" ], [ "Incrementor", "org.apache.commons.math3.util" ], [ "OpenIntToDoubleHashMap", "org.apache.commons.math3.util" ], [ "OpenIntToFieldHashMap", "org.apache.commons.math3.util" ], [ "MathArrays", "org.apache.commons.math3.util" ], [ "Pair", "org.apache.commons.math3.util" ], [ "FastMathCalc", "org.apache.commons.math3.util" ], [ "FastMath", "org.apache.commons.math3.util" ], [ "ResizableDoubleArray", "org.apache.commons.math3.util" ], [ "BigRealField", "org.apache.commons.math3.util" ], [ "Decimal64Field", "org.apache.commons.math3.util" ], [ "Combinations", "org.apache.commons.math3.util" ], [ "MathUtils", "org.apache.commons.math3.util" ], [ "NumberTransformer", "org.apache.commons.math3.util" ], [ "ContinuedFraction", "org.apache.commons.math3.util" ], [ "RandomPivotingStrategy", "org.apache.commons.math3.util" ], [ "IterationManager", "org.apache.commons.math3.util" ], [ "CompositeFormat", "org.apache.commons.math3.util" ], [ "KthSelector", "org.apache.commons.math3.util" ], [ "IterationEvent", "org.apache.commons.math3.util" ], [ "TransformerMap", "org.apache.commons.math3.util" ], [ "IntegerSequence", "org.apache.commons.math3.util" ], [ "FastMathLiteralArrays", "org.apache.commons.math3.util" ], [ "CombinatoricsUtils", "org.apache.commons.math3.util" ], [ "IterationListener", "org.apache.commons.math3.util" ], [ "PivotingStrategyInterface", "org.apache.commons.math3.util" ], [ "CentralPivotingStrategy", "org.apache.commons.math3.util" ], [ "Decimal64", "org.apache.commons.math3.util" ], [ "DefaultTransformer", "org.apache.commons.math3.util" ], [ "BigReal", "org.apache.commons.math3.util" ], [ "ArithmeticUtils", "org.apache.commons.math3.util" ], [ "MedianOf3PivotingStrategy", "org.apache.commons.math3.util" ], [ "ComplexFormat", "org.apache.commons.math3.complex" ], [ "ComplexField", "org.apache.commons.math3.complex" ], [ "RootsOfUnity", "org.apache.commons.math3.complex" ], [ "Quaternion", "org.apache.commons.math3.complex" ], [ "Complex", "org.apache.commons.math3.complex" ], [ "ComplexUtils", "org.apache.commons.math3.complex" ], [ "DifferentiableMultivariateVectorOptimizer", "org.apache.commons.math3.optimization" ], [ "LeastSquaresConverter", "org.apache.commons.math3.optimization" ], [ "BaseMultivariateSimpleBoundsOptimizer", "org.apache.commons.math3.optimization" ], [ "PointValuePair", "org.apache.commons.math3.optimization" ], [ "DifferentiableMultivariateOptimizer", "org.apache.commons.math3.optimization" ], [ "SimpleValueChecker", "org.apache.commons.math3.optimization" ], [ "CurveFitter", "org.apache.commons.math3.optimization.fitting" ], [ "PolynomialFitter", "org.apache.commons.math3.optimization.fitting" ], [ "HarmonicFitter", "org.apache.commons.math3.optimization.fitting" ], [ "WeightedObservedPoint", "org.apache.commons.math3.optimization.fitting" ], [ "GaussianFitter", "org.apache.commons.math3.optimization.fitting" ], [ "AbstractConvergenceChecker", "org.apache.commons.math3.optimization" ], [ "AbstractSimplex", "org.apache.commons.math3.optimization.direct" ], [ "SimplexOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "BOBYQAOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "NelderMeadSimplex", "org.apache.commons.math3.optimization.direct" ], [ "MultivariateFunctionMappingAdapter", "org.apache.commons.math3.optimization.direct" ], [ "BaseAbstractMultivariateSimpleBoundsOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "BaseAbstractMultivariateVectorOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "CMAESOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "MultivariateFunctionPenaltyAdapter", "org.apache.commons.math3.optimization.direct" ], [ "BaseAbstractMultivariateOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "PowellOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "MultiDirectionalSimplex", "org.apache.commons.math3.optimization.direct" ], [ "InitialGuess", "org.apache.commons.math3.optimization" ], [ "Preconditioner", "org.apache.commons.math3.optimization.general" ], [ "LevenbergMarquardtOptimizer", "org.apache.commons.math3.optimization.general" ], [ "AbstractLeastSquaresOptimizer", "org.apache.commons.math3.optimization.general" ], [ "AbstractDifferentiableOptimizer", "org.apache.commons.math3.optimization.general" ], [ "GaussNewtonOptimizer", "org.apache.commons.math3.optimization.general" ], [ "AbstractScalarDifferentiableOptimizer", "org.apache.commons.math3.optimization.general" ], [ "NonLinearConjugateGradientOptimizer", "org.apache.commons.math3.optimization.general" ], [ "ConjugateGradientFormula", "org.apache.commons.math3.optimization.general" ], [ "BaseMultivariateVectorMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "NoFeasibleSolutionException", "org.apache.commons.math3.optimization.linear" ], [ "AbstractLinearOptimizer", "org.apache.commons.math3.optimization.linear" ], [ "LinearConstraint", "org.apache.commons.math3.optimization.linear" ], [ "SimplexSolver", "org.apache.commons.math3.optimization.linear" ], [ "LinearOptimizer", "org.apache.commons.math3.optimization.linear" ], [ "UnboundedSolutionException", "org.apache.commons.math3.optimization.linear" ], [ "SimplexTableau", "org.apache.commons.math3.optimization.linear" ], [ "LinearObjectiveFunction", "org.apache.commons.math3.optimization.linear" ], [ "Relationship", "org.apache.commons.math3.optimization.linear" ], [ "SimpleBounds", "org.apache.commons.math3.optimization" ], [ "PointVectorValuePair", "org.apache.commons.math3.optimization" ], [ "MultivariateDifferentiableVectorMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "DifferentiableMultivariateMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "SimplePointChecker", "org.apache.commons.math3.optimization" ], [ "SimpleVectorValueChecker", "org.apache.commons.math3.optimization" ], [ "BaseOptimizer", "org.apache.commons.math3.optimization" ], [ "MultivariateOptimizer", "org.apache.commons.math3.optimization" ], [ "GoalType", "org.apache.commons.math3.optimization" ], [ "BrentOptimizer", "org.apache.commons.math3.optimization.univariate" ], [ "UnivariateMultiStartOptimizer", "org.apache.commons.math3.optimization.univariate" ], [ "BaseUnivariateOptimizer", "org.apache.commons.math3.optimization.univariate" ], [ "BaseAbstractUnivariateOptimizer", "org.apache.commons.math3.optimization.univariate" ], [ "SimpleUnivariateValueChecker", "org.apache.commons.math3.optimization.univariate" ], [ "UnivariatePointValuePair", "org.apache.commons.math3.optimization.univariate" ], [ "BracketFinder", "org.apache.commons.math3.optimization.univariate" ], [ "UnivariateOptimizer", "org.apache.commons.math3.optimization.univariate" ], [ "BaseMultivariateOptimizer", "org.apache.commons.math3.optimization" ], [ "ConvergenceChecker", "org.apache.commons.math3.optimization" ], [ "BaseMultivariateMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "MultivariateDifferentiableOptimizer", "org.apache.commons.math3.optimization" ], [ "MultivariateDifferentiableVectorOptimizer", "org.apache.commons.math3.optimization" ], [ "Target", "org.apache.commons.math3.optimization" ], [ "Weight", "org.apache.commons.math3.optimization" ], [ "MultivariateMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "OptimizationData", "org.apache.commons.math3.optimization" ], [ "BaseMultivariateVectorOptimizer", "org.apache.commons.math3.optimization" ], [ "MultivariateDifferentiableMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "DifferentiableMultivariateVectorMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "NonSymmetricMatrixException", "org.apache.commons.math3.linear" ], [ "FieldVectorPreservingVisitor", "org.apache.commons.math3.linear" ], [ "FieldVector", "org.apache.commons.math3.linear" ], [ "AnyMatrix", "org.apache.commons.math3.linear" ], [ "NonSquareOperatorException", "org.apache.commons.math3.linear" ], [ "SingularValueDecomposition", "org.apache.commons.math3.linear" ], [ "EigenDecomposition", "org.apache.commons.math3.linear" ], [ "RealMatrixChangingVisitor", "org.apache.commons.math3.linear" ], [ "FieldLUDecomposition", "org.apache.commons.math3.linear" ], [ "NonPositiveDefiniteMatrixException", "org.apache.commons.math3.linear" ], [ "RealMatrixFormat", "org.apache.commons.math3.linear" ], [ "MatrixUtils", "org.apache.commons.math3.linear" ], [ "OpenMapRealVector", "org.apache.commons.math3.linear" ], [ "RealMatrixPreservingVisitor", "org.apache.commons.math3.linear" ], [ "SingularMatrixException", "org.apache.commons.math3.linear" ], [ "DefaultFieldMatrixPreservingVisitor", "org.apache.commons.math3.linear" ], [ "FieldVectorChangingVisitor", "org.apache.commons.math3.linear" ], [ "TriDiagonalTransformer", "org.apache.commons.math3.linear" ], [ "DefaultRealMatrixChangingVisitor", "org.apache.commons.math3.linear" ], [ "AbstractRealMatrix", "org.apache.commons.math3.linear" ], [ "Array2DRowRealMatrix", "org.apache.commons.math3.linear" ], [ "BlockFieldMatrix", "org.apache.commons.math3.linear" ], [ "Array2DRowFieldMatrix", "org.apache.commons.math3.linear" ], [ "FieldMatrix", "org.apache.commons.math3.linear" ], [ "IterativeLinearSolver", "org.apache.commons.math3.linear" ], [ "ArrayRealVector", "org.apache.commons.math3.linear" ], [ "MatrixDimensionMismatchException", "org.apache.commons.math3.linear" ], [ "ArrayFieldVector", "org.apache.commons.math3.linear" ], [ "DecompositionSolver", "org.apache.commons.math3.linear" ], [ "LUDecomposition", "org.apache.commons.math3.linear" ], [ "ConjugateGradient", "org.apache.commons.math3.linear" ], [ "NonPositiveDefiniteOperatorException", "org.apache.commons.math3.linear" ], [ "OpenMapRealMatrix", "org.apache.commons.math3.linear" ], [ "NonSelfAdjointOperatorException", "org.apache.commons.math3.linear" ], [ "BiDiagonalTransformer", "org.apache.commons.math3.linear" ], [ "CholeskyDecomposition", "org.apache.commons.math3.linear" ], [ "FieldDecompositionSolver", "org.apache.commons.math3.linear" ], [ "RealVectorPreservingVisitor", "org.apache.commons.math3.linear" ], [ "SingularOperatorException", "org.apache.commons.math3.linear" ], [ "BlockRealMatrix", "org.apache.commons.math3.linear" ], [ "SparseFieldMatrix", "org.apache.commons.math3.linear" ], [ "NonSquareMatrixException", "org.apache.commons.math3.linear" ], [ "SparseRealMatrix", "org.apache.commons.math3.linear" ], [ "RealVector", "org.apache.commons.math3.linear" ], [ "FieldMatrixPreservingVisitor", "org.apache.commons.math3.linear" ], [ "PreconditionedIterativeLinearSolver", "org.apache.commons.math3.linear" ], [ "QRDecomposition", "org.apache.commons.math3.linear" ], [ "SymmLQ", "org.apache.commons.math3.linear" ], [ "SparseFieldVector", "org.apache.commons.math3.linear" ], [ "RealVectorFormat", "org.apache.commons.math3.linear" ], [ "IllConditionedOperatorException", "org.apache.commons.math3.linear" ], [ "DefaultIterativeLinearSolverEvent", "org.apache.commons.math3.linear" ], [ "DefaultRealMatrixPreservingVisitor", "org.apache.commons.math3.linear" ], [ "IterativeLinearSolverEvent", "org.apache.commons.math3.linear" ], [ "DiagonalMatrix", "org.apache.commons.math3.linear" ], [ "HessenbergTransformer", "org.apache.commons.math3.linear" ], [ "RectangularCholeskyDecomposition", "org.apache.commons.math3.linear" ], [ "FieldMatrixChangingVisitor", "org.apache.commons.math3.linear" ], [ "DefaultFieldMatrixChangingVisitor", "org.apache.commons.math3.linear" ], [ "JacobiPreconditioner", "org.apache.commons.math3.linear" ], [ "RealLinearOperator", "org.apache.commons.math3.linear" ], [ "RRQRDecomposition", "org.apache.commons.math3.linear" ], [ "AbstractFieldMatrix", "org.apache.commons.math3.linear" ], [ "RealMatrix", "org.apache.commons.math3.linear" ], [ "SchurTransformer", "org.apache.commons.math3.linear" ], [ "RealVectorChangingVisitor", "org.apache.commons.math3.linear" ], [ "SparseRealVector", "org.apache.commons.math3.linear" ], [ "CauchyDistribution", "org.apache.commons.math3.distribution" ], [ "LaplaceDistribution", "org.apache.commons.math3.distribution" ], [ "AbstractRealDistribution", "org.apache.commons.math3.distribution" ], [ "HypergeometricDistribution", "org.apache.commons.math3.distribution" ], [ "TDistribution", "org.apache.commons.math3.distribution" ], [ "ChiSquaredDistribution", "org.apache.commons.math3.distribution" ], [ "TriangularDistribution", "org.apache.commons.math3.distribution" ], [ "MultivariateNormalMixtureExpectationMaximization", "org.apache.commons.math3.distribution.fitting" ], [ "BetaDistribution", "org.apache.commons.math3.distribution" ], [ "RealDistribution", "org.apache.commons.math3.distribution" ], [ "NormalDistribution", "org.apache.commons.math3.distribution" ], [ "SaddlePointExpansion", "org.apache.commons.math3.distribution" ], [ "MixtureMultivariateNormalDistribution", "org.apache.commons.math3.distribution" ], [ "UniformRealDistribution", "org.apache.commons.math3.distribution" ], [ "GumbelDistribution", "org.apache.commons.math3.distribution" ], [ "ZipfDistribution", "org.apache.commons.math3.distribution" ], [ "BinomialDistribution", "org.apache.commons.math3.distribution" ], [ "EnumeratedIntegerDistribution", "org.apache.commons.math3.distribution" ], [ "IntegerDistribution", "org.apache.commons.math3.distribution" ], [ "WeibullDistribution", "org.apache.commons.math3.distribution" ], [ "MultivariateRealDistribution", "org.apache.commons.math3.distribution" ], [ "NakagamiDistribution", "org.apache.commons.math3.distribution" ], [ "EnumeratedDistribution", "org.apache.commons.math3.distribution" ], [ "ConstantRealDistribution", "org.apache.commons.math3.distribution" ], [ "MultivariateNormalDistribution", "org.apache.commons.math3.distribution" ], [ "ExponentialDistribution", "org.apache.commons.math3.distribution" ], [ "UniformIntegerDistribution", "org.apache.commons.math3.distribution" ], [ "LogNormalDistribution", "org.apache.commons.math3.distribution" ], [ "PascalDistribution", "org.apache.commons.math3.distribution" ], [ "ParetoDistribution", "org.apache.commons.math3.distribution" ], [ "FDistribution", "org.apache.commons.math3.distribution" ], [ "GeometricDistribution", "org.apache.commons.math3.distribution" ], [ "AbstractMultivariateRealDistribution", "org.apache.commons.math3.distribution" ], [ "AbstractIntegerDistribution", "org.apache.commons.math3.distribution" ], [ "PoissonDistribution", "org.apache.commons.math3.distribution" ], [ "KolmogorovSmirnovDistribution", "org.apache.commons.math3.distribution" ], [ "MixtureMultivariateRealDistribution", "org.apache.commons.math3.distribution" ], [ "GammaDistribution", "org.apache.commons.math3.distribution" ], [ "EnumeratedRealDistribution", "org.apache.commons.math3.distribution" ], [ "LogisticDistribution", "org.apache.commons.math3.distribution" ], [ "LevyDistribution", "org.apache.commons.math3.distribution" ], [ "PointValuePair", "org.apache.commons.math3.optim" ], [ "SimpleValueChecker", "org.apache.commons.math3.optim" ], [ "AbstractConvergenceChecker", "org.apache.commons.math3.optim" ], [ "InitialGuess", "org.apache.commons.math3.optim" ], [ "MaxIter", "org.apache.commons.math3.optim" ], [ "NoFeasibleSolutionException", "org.apache.commons.math3.optim.linear" ], [ "LinearConstraintSet", "org.apache.commons.math3.optim.linear" ], [ "LinearConstraint", "org.apache.commons.math3.optim.linear" ], [ "PivotSelectionRule", "org.apache.commons.math3.optim.linear" ], [ "SimplexSolver", "org.apache.commons.math3.optim.linear" ], [ "LinearOptimizer", "org.apache.commons.math3.optim.linear" ], [ "UnboundedSolutionException", "org.apache.commons.math3.optim.linear" ], [ "SimplexTableau", "org.apache.commons.math3.optim.linear" ], [ "SolutionCallback", "org.apache.commons.math3.optim.linear" ], [ "LinearObjectiveFunction", "org.apache.commons.math3.optim.linear" ], [ "NonNegativeConstraint", "org.apache.commons.math3.optim.linear" ], [ "Relationship", "org.apache.commons.math3.optim.linear" ], [ "AbstractOptimizationProblem", "org.apache.commons.math3.optim" ], [ "SimpleBounds", "org.apache.commons.math3.optim" ], [ "PointVectorValuePair", "org.apache.commons.math3.optim" ], [ "SimplePointChecker", "org.apache.commons.math3.optim" ], [ "SimpleVectorValueChecker", "org.apache.commons.math3.optim" ], [ "BaseOptimizer", "org.apache.commons.math3.optim" ], [ "BaseMultiStartMultivariateOptimizer", "org.apache.commons.math3.optim" ], [ "MultiStartUnivariateOptimizer", "org.apache.commons.math3.optim.univariate" ], [ "BrentOptimizer", "org.apache.commons.math3.optim.univariate" ], [ "UnivariateObjectiveFunction", "org.apache.commons.math3.optim.univariate" ], [ "SimpleUnivariateValueChecker", "org.apache.commons.math3.optim.univariate" ], [ "SearchInterval", "org.apache.commons.math3.optim.univariate" ], [ "UnivariatePointValuePair", "org.apache.commons.math3.optim.univariate" ], [ "BracketFinder", "org.apache.commons.math3.optim.univariate" ], [ "UnivariateOptimizer", "org.apache.commons.math3.optim.univariate" ], [ "BaseMultivariateOptimizer", "org.apache.commons.math3.optim" ], [ "ConvergenceChecker", "org.apache.commons.math3.optim" ], [ "OptimizationProblem", "org.apache.commons.math3.optim" ], [ "MaxEval", "org.apache.commons.math3.optim" ], [ "OptimizationData", "org.apache.commons.math3.optim" ], [ "Preconditioner", "org.apache.commons.math3.optim.nonlinear.scalar.gradient" ], [ "NonLinearConjugateGradientOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar.gradient" ], [ "LeastSquaresConverter", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "GradientMultivariateOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "MultivariateFunctionMappingAdapter", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "LineSearch", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "ObjectiveFunction", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "MultivariateOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "GoalType", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "AbstractSimplex", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "SimplexOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "BOBYQAOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "NelderMeadSimplex", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "CMAESOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "PowellOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "MultiDirectionalSimplex", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "MultiStartMultivariateOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "MultivariateFunctionPenaltyAdapter", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "ObjectiveFunctionGradient", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "ModelFunction", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "LevenbergMarquardtOptimizer", "org.apache.commons.math3.optim.nonlinear.vector.jacobian" ], [ "AbstractLeastSquaresOptimizer", "org.apache.commons.math3.optim.nonlinear.vector.jacobian" ], [ "GaussNewtonOptimizer", "org.apache.commons.math3.optim.nonlinear.vector.jacobian" ], [ "ModelFunctionJacobian", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "JacobianMultivariateVectorOptimizer", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "MultivariateVectorOptimizer", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "Target", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "Weight", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "MultiStartMultivariateVectorOptimizer", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "Erf", "org.apache.commons.math3.special" ], [ "BesselJ", "org.apache.commons.math3.special" ], [ "Gamma", "org.apache.commons.math3.special" ], [ "Beta", "org.apache.commons.math3.special" ], [ "FieldODEState", "org.apache.commons.math3.ode" ], [ "FieldODEStateAndDerivative", "org.apache.commons.math3.ode" ], [ "FirstOrderFieldDifferentialEquations", "org.apache.commons.math3.ode" ], [ "MultistepFieldIntegrator", "org.apache.commons.math3.ode" ], [ "ODEIntegrator", "org.apache.commons.math3.ode" ], [ "ParameterConfiguration", "org.apache.commons.math3.ode" ], [ "ContinuousOutputFieldModel", "org.apache.commons.math3.ode" ], [ "FirstOrderConverter", "org.apache.commons.math3.ode" ], [ "ParameterJacobianProvider", "org.apache.commons.math3.ode" ], [ "SecondOrderIntegrator", "org.apache.commons.math3.ode" ], [ "AbstractFieldIntegrator", "org.apache.commons.math3.ode" ], [ "ExpandableStatefulODE", "org.apache.commons.math3.ode" ], [ "MultistepIntegrator", "org.apache.commons.math3.ode" ], [ "Parameterizable", "org.apache.commons.math3.ode" ], [ "JacobianMatrices", "org.apache.commons.math3.ode" ], [ "StepNormalizer", "org.apache.commons.math3.ode.sampling" ], [ "FixedStepHandler", "org.apache.commons.math3.ode.sampling" ], [ "StepHandler", "org.apache.commons.math3.ode.sampling" ], [ "DummyStepHandler", "org.apache.commons.math3.ode.sampling" ], [ "FieldStepInterpolator", "org.apache.commons.math3.ode.sampling" ], [ "StepInterpolator", "org.apache.commons.math3.ode.sampling" ], [ "AbstractFieldStepInterpolator", "org.apache.commons.math3.ode.sampling" ], [ "FieldFixedStepHandler", "org.apache.commons.math3.ode.sampling" ], [ "StepNormalizerMode", "org.apache.commons.math3.ode.sampling" ], [ "AbstractStepInterpolator", "org.apache.commons.math3.ode.sampling" ], [ "FieldStepHandler", "org.apache.commons.math3.ode.sampling" ], [ "StepNormalizerBounds", "org.apache.commons.math3.ode.sampling" ], [ "NordsieckStepInterpolator", "org.apache.commons.math3.ode.sampling" ], [ "FieldStepNormalizer", "org.apache.commons.math3.ode.sampling" ], [ "RungeKuttaFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "GillIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince853FieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "EmbeddedRungeKuttaFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "HighamHall54FieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince54FieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "EulerFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "EulerStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "HighamHall54Integrator", "org.apache.commons.math3.ode.nonstiff" ], [ "MidpointStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "GillStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "LutherFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "GraggBulirschStoerIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "EmbeddedRungeKuttaIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince853StepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "HighamHall54FieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince54FieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "MidpointFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "ThreeEighthesFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "ThreeEighthesIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "ClassicalRungeKuttaIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsNordsieckTransformer", "org.apache.commons.math3.ode.nonstiff" ], [ "MidpointFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "MidpointIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "RungeKuttaStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince54StepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "LutherFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince54Integrator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "GraggBulirschStoerStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "ClassicalRungeKuttaStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "LutherIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdaptiveStepsizeIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "ClassicalRungeKuttaFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "EulerIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince853FieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "FieldButcherArrayProvider", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsMoultonIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "RungeKuttaFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince853Integrator", "org.apache.commons.math3.ode.nonstiff" ], [ "ThreeEighthesStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "EulerFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsMoultonFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "LutherStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "HighamHall54StepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsNordsieckFieldTransformer", "org.apache.commons.math3.ode.nonstiff" ], [ "ThreeEighthesFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "RungeKuttaIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsBashforthFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "ClassicalRungeKuttaFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdaptiveStepsizeFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsBashforthIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "GillFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "GillFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "FieldSecondaryEquations", "org.apache.commons.math3.ode" ], [ "MainStateJacobianProvider", "org.apache.commons.math3.ode" ], [ "SecondaryEquations", "org.apache.commons.math3.ode" ], [ "FirstOrderFieldIntegrator", "org.apache.commons.math3.ode" ], [ "ParameterJacobianWrapper", "org.apache.commons.math3.ode" ], [ "FieldEquationsMapper", "org.apache.commons.math3.ode" ], [ "FieldExpandableODE", "org.apache.commons.math3.ode" ], [ "ParameterizedWrapper", "org.apache.commons.math3.ode" ], [ "AbstractIntegrator", "org.apache.commons.math3.ode" ], [ "SecondOrderDifferentialEquations", "org.apache.commons.math3.ode" ], [ "AbstractParameterizable", "org.apache.commons.math3.ode" ], [ "UnknownParameterException", "org.apache.commons.math3.ode" ], [ "ContinuousOutputModel", "org.apache.commons.math3.ode" ], [ "FirstOrderDifferentialEquations", "org.apache.commons.math3.ode" ], [ "EquationsMapper", "org.apache.commons.math3.ode" ], [ "Transformer", "org.apache.commons.math3.ode.events" ], [ "FieldEventState", "org.apache.commons.math3.ode.events" ], [ "FieldEventHandler", "org.apache.commons.math3.ode.events" ], [ "EventHandler", "org.apache.commons.math3.ode.events" ], [ "Action", "org.apache.commons.math3.ode.events" ], [ "EventState", "org.apache.commons.math3.ode.events" ], [ "EventFilter", "org.apache.commons.math3.ode.events" ], [ "FilterType", "org.apache.commons.math3.ode.events" ], [ "ParameterizedODE", "org.apache.commons.math3.ode" ], [ "FirstOrderIntegrator", "org.apache.commons.math3.ode" ], [ "NaNStrategy", "org.apache.commons.math3.stat.ranking" ], [ "NaturalRanking", "org.apache.commons.math3.stat.ranking" ], [ "TiesStrategy", "org.apache.commons.math3.stat.ranking" ], [ "RankingAlgorithm", "org.apache.commons.math3.stat.ranking" ], [ "StatUtils", "org.apache.commons.math3.stat" ], [ "IntervalUtils", "org.apache.commons.math3.stat.interval" ], [ "AgrestiCoullInterval", "org.apache.commons.math3.stat.interval" ], [ "ConfidenceInterval", "org.apache.commons.math3.stat.interval" ], [ "WilsonScoreInterval", "org.apache.commons.math3.stat.interval" ], [ "ClopperPearsonInterval", "org.apache.commons.math3.stat.interval" ], [ "NormalApproximationInterval", "org.apache.commons.math3.stat.interval" ], [ "BinomialConfidenceInterval", "org.apache.commons.math3.stat.interval" ], [ "StorelessCovariance", "org.apache.commons.math3.stat.correlation" ], [ "StorelessBivariateCovariance", "org.apache.commons.math3.stat.correlation" ], [ "KendallsCorrelation", "org.apache.commons.math3.stat.correlation" ], [ "Covariance", "org.apache.commons.math3.stat.correlation" ], [ "PearsonsCorrelation", "org.apache.commons.math3.stat.correlation" ], [ "SpearmansCorrelation", "org.apache.commons.math3.stat.correlation" ], [ "DBSCANClusterer", "org.apache.commons.math3.stat.clustering" ], [ "EuclideanIntegerPoint", "org.apache.commons.math3.stat.clustering" ], [ "Cluster", "org.apache.commons.math3.stat.clustering" ], [ "EuclideanDoublePoint", "org.apache.commons.math3.stat.clustering" ], [ "Clusterable", "org.apache.commons.math3.stat.clustering" ], [ "KMeansPlusPlusClusterer", "org.apache.commons.math3.stat.clustering" ], [ "TestUtils", "org.apache.commons.math3.stat.inference" ], [ "TTest", "org.apache.commons.math3.stat.inference" ], [ "GTest", "org.apache.commons.math3.stat.inference" ], [ "AlternativeHypothesis", "org.apache.commons.math3.stat.inference" ], [ "MannWhitneyUTest", "org.apache.commons.math3.stat.inference" ], [ "WilcoxonSignedRankTest", "org.apache.commons.math3.stat.inference" ], [ "OneWayAnova", "org.apache.commons.math3.stat.inference" ], [ "ChiSquareTest", "org.apache.commons.math3.stat.inference" ], [ "BinomialTest", "org.apache.commons.math3.stat.inference" ], [ "KolmogorovSmirnovTest", "org.apache.commons.math3.stat.inference" ], [ "AbstractUnivariateStatistic", "org.apache.commons.math3.stat.descriptive" ], [ "SummaryStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "DescriptiveStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "MultivariateSummaryStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "SecondMoment", "org.apache.commons.math3.stat.descriptive.moment" ], [ "Mean", "org.apache.commons.math3.stat.descriptive.moment" ], [ "FourthMoment", "org.apache.commons.math3.stat.descriptive.moment" ], [ "Variance", "org.apache.commons.math3.stat.descriptive.moment" ], [ "Kurtosis", "org.apache.commons.math3.stat.descriptive.moment" ], [ "GeometricMean", "org.apache.commons.math3.stat.descriptive.moment" ], [ "StandardDeviation", "org.apache.commons.math3.stat.descriptive.moment" ], [ "VectorialCovariance", "org.apache.commons.math3.stat.descriptive.moment" ], [ "ThirdMoment", "org.apache.commons.math3.stat.descriptive.moment" ], [ "SemiVariance", "org.apache.commons.math3.stat.descriptive.moment" ], [ "FirstMoment", "org.apache.commons.math3.stat.descriptive.moment" ], [ "Skewness", "org.apache.commons.math3.stat.descriptive.moment" ], [ "VectorialMean", "org.apache.commons.math3.stat.descriptive.moment" ], [ "StatisticalSummaryValues", "org.apache.commons.math3.stat.descriptive" ], [ "StatisticalSummary", "org.apache.commons.math3.stat.descriptive" ], [ "StorelessUnivariateStatistic", "org.apache.commons.math3.stat.descriptive" ], [ "StatisticalMultivariateSummary", "org.apache.commons.math3.stat.descriptive" ], [ "AggregateSummaryStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "WeightedEvaluation", "org.apache.commons.math3.stat.descriptive" ], [ "SynchronizedSummaryStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "UnivariateStatistic", "org.apache.commons.math3.stat.descriptive" ], [ "Percentile", "org.apache.commons.math3.stat.descriptive.rank" ], [ "Max", "org.apache.commons.math3.stat.descriptive.rank" ], [ "PSquarePercentile", "org.apache.commons.math3.stat.descriptive.rank" ], [ "Min", "org.apache.commons.math3.stat.descriptive.rank" ], [ "Median", "org.apache.commons.math3.stat.descriptive.rank" ], [ "SynchronizedDescriptiveStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "SynchronizedMultivariateSummaryStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "SumOfSquares", "org.apache.commons.math3.stat.descriptive.summary" ], [ "Product", "org.apache.commons.math3.stat.descriptive.summary" ], [ "Sum", "org.apache.commons.math3.stat.descriptive.summary" ], [ "SumOfLogs", "org.apache.commons.math3.stat.descriptive.summary" ], [ "AbstractStorelessUnivariateStatistic", "org.apache.commons.math3.stat.descriptive" ], [ "SimpleRegression", "org.apache.commons.math3.stat.regression" ], [ "UpdatingMultipleLinearRegression", "org.apache.commons.math3.stat.regression" ], [ "AbstractMultipleLinearRegression", "org.apache.commons.math3.stat.regression" ], [ "GLSMultipleLinearRegression", "org.apache.commons.math3.stat.regression" ], [ "ModelSpecificationException", "org.apache.commons.math3.stat.regression" ], [ "RegressionResults", "org.apache.commons.math3.stat.regression" ], [ "MillerUpdatingRegression", "org.apache.commons.math3.stat.regression" ], [ "OLSMultipleLinearRegression", "org.apache.commons.math3.stat.regression" ], [ "MultipleLinearRegression", "org.apache.commons.math3.stat.regression" ], [ "Frequency", "org.apache.commons.math3.stat" ], [ "ChebyshevDistance", "org.apache.commons.math3.ml.distance" ], [ "CanberraDistance", "org.apache.commons.math3.ml.distance" ], [ "EuclideanDistance", "org.apache.commons.math3.ml.distance" ], [ "ManhattanDistance", "org.apache.commons.math3.ml.distance" ], [ "EarthMoversDistance", "org.apache.commons.math3.ml.distance" ], [ "DistanceMeasure", "org.apache.commons.math3.ml.distance" ], [ "CentroidCluster", "org.apache.commons.math3.ml.clustering" ], [ "DBSCANClusterer", "org.apache.commons.math3.ml.clustering" ], [ "Cluster", "org.apache.commons.math3.ml.clustering" ], [ "MultiKMeansPlusPlusClusterer", "org.apache.commons.math3.ml.clustering" ], [ "Clusterable", "org.apache.commons.math3.ml.clustering" ], [ "FuzzyKMeansClusterer", "org.apache.commons.math3.ml.clustering" ], [ "KMeansPlusPlusClusterer", "org.apache.commons.math3.ml.clustering" ], [ "SumOfClusterVariances", "org.apache.commons.math3.ml.clustering.evaluation" ], [ "ClusterEvaluator", "org.apache.commons.math3.ml.clustering.evaluation" ], [ "Clusterer", "org.apache.commons.math3.ml.clustering" ], [ "DoublePoint", "org.apache.commons.math3.ml.clustering" ], [ "KohonenTrainingTask", "org.apache.commons.math3.ml.neuralnet.sofm" ], [ "KohonenUpdateAction", "org.apache.commons.math3.ml.neuralnet.sofm" ], [ "QuasiSigmoidDecayFunction", "org.apache.commons.math3.ml.neuralnet.sofm.util" ], [ "ExponentialDecayFunction", "org.apache.commons.math3.ml.neuralnet.sofm.util" ], [ "NeighbourhoodSizeFunctionFactory", "org.apache.commons.math3.ml.neuralnet.sofm" ], [ "LearningFactorFunctionFactory", "org.apache.commons.math3.ml.neuralnet.sofm" ], [ "NeighbourhoodSizeFunction", "org.apache.commons.math3.ml.neuralnet.sofm" ], [ "LearningFactorFunction", "org.apache.commons.math3.ml.neuralnet.sofm" ], [ "MapUtils", "org.apache.commons.math3.ml.neuralnet" ], [ "Network", "org.apache.commons.math3.ml.neuralnet" ], [ "FeatureInitializerFactory", "org.apache.commons.math3.ml.neuralnet" ], [ "Neuron", "org.apache.commons.math3.ml.neuralnet" ], [ "FeatureInitializer", "org.apache.commons.math3.ml.neuralnet" ], [ "NeuronString", "org.apache.commons.math3.ml.neuralnet.oned" ], [ "NeuronSquareMesh2D", "org.apache.commons.math3.ml.neuralnet.twod" ], [ "SmoothedDataHistogram", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "UnifiedDistanceMatrix", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "MapDataVisualization", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "MapVisualization", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "LocationFinder", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "HitHistogram", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "QuantizationError", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "TopographicErrorHistogram", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "SquareNeighbourhood", "org.apache.commons.math3.ml.neuralnet" ], [ "UpdateAction", "org.apache.commons.math3.ml.neuralnet" ], [ "BracketingNthOrderBrentSolverDFP", "org.apache.commons.math3.dfp" ], [ "UnivariateDfpFunction", "org.apache.commons.math3.dfp" ], [ "DfpDec", "org.apache.commons.math3.dfp" ], [ "DfpMath", "org.apache.commons.math3.dfp" ], [ "Dfp", "org.apache.commons.math3.dfp" ], [ "DfpField", "org.apache.commons.math3.dfp" ], [ "GeneticAlgorithm", "org.apache.commons.math3.genetics" ], [ "SelectionPolicy", "org.apache.commons.math3.genetics" ], [ "ListPopulation", "org.apache.commons.math3.genetics" ], [ "FixedGenerationCount", "org.apache.commons.math3.genetics" ], [ "AbstractListChromosome", "org.apache.commons.math3.genetics" ], [ "OnePointCrossover", "org.apache.commons.math3.genetics" ], [ "ElitisticListPopulation", "org.apache.commons.math3.genetics" ], [ "Chromosome", "org.apache.commons.math3.genetics" ], [ "OrderedCrossover", "org.apache.commons.math3.genetics" ], [ "InvalidRepresentationException", "org.apache.commons.math3.genetics" ], [ "RandomKey", "org.apache.commons.math3.genetics" ], [ "StoppingCondition", "org.apache.commons.math3.genetics" ], [ "PermutationChromosome", "org.apache.commons.math3.genetics" ], [ "ChromosomePair", "org.apache.commons.math3.genetics" ], [ "TournamentSelection", "org.apache.commons.math3.genetics" ], [ "NPointCrossover", "org.apache.commons.math3.genetics" ], [ "UniformCrossover", "org.apache.commons.math3.genetics" ], [ "MutationPolicy", "org.apache.commons.math3.genetics" ], [ "FixedElapsedTime", "org.apache.commons.math3.genetics" ], [ "CycleCrossover", "org.apache.commons.math3.genetics" ], [ "BinaryMutation", "org.apache.commons.math3.genetics" ], [ "BinaryChromosome", "org.apache.commons.math3.genetics" ], [ "Population", "org.apache.commons.math3.genetics" ], [ "RandomKeyMutation", "org.apache.commons.math3.genetics" ], [ "Fitness", "org.apache.commons.math3.genetics" ], [ "CrossoverPolicy", "org.apache.commons.math3.genetics" ], [ "Vector", "org.apache.commons.math3.geometry" ], [ "VectorFormat", "org.apache.commons.math3.geometry" ], [ "Point", "org.apache.commons.math3.geometry" ], [ "RotationConvention", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "SubPlane", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Vector3DFormat", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Segment", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "OutlineExtractor", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "PolyhedronsSet", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "RotationOrder", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "FieldVector3D", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Rotation", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Euclidean3D", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "SubLine", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "SphericalCoordinates", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "CardanEulerSingularityException", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "NotARotationMatrixException", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "FieldRotation", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Vector3D", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Plane", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "SphereGenerator", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Line", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "IntervalsSet", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "Interval", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "SubOrientedPoint", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "OrientedPoint", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "Euclidean1D", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "Vector1DFormat", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "Vector1D", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "Segment", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "AbstractConvexHullGenerator2D", "org.apache.commons.math3.geometry.euclidean.twod.hull" ], [ "AklToussaintHeuristic", "org.apache.commons.math3.geometry.euclidean.twod.hull" ], [ "ConvexHull2D", "org.apache.commons.math3.geometry.euclidean.twod.hull" ], [ "MonotoneChain", "org.apache.commons.math3.geometry.euclidean.twod.hull" ], [ "ConvexHullGenerator2D", "org.apache.commons.math3.geometry.euclidean.twod.hull" ], [ "Vector2DFormat", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "PolygonsSet", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "SubLine", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "DiskGenerator", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "Vector2D", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "NestedLoops", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "Euclidean2D", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "Line", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "ConvexHullGenerator", "org.apache.commons.math3.geometry.hull" ], [ "ConvexHull", "org.apache.commons.math3.geometry.hull" ], [ "ArcsSet", "org.apache.commons.math3.geometry.spherical.oned" ], [ "S1Point", "org.apache.commons.math3.geometry.spherical.oned" ], [ "Sphere1D", "org.apache.commons.math3.geometry.spherical.oned" ], [ "Arc", "org.apache.commons.math3.geometry.spherical.oned" ], [ "LimitAngle", "org.apache.commons.math3.geometry.spherical.oned" ], [ "SubLimitAngle", "org.apache.commons.math3.geometry.spherical.oned" ], [ "Sphere2D", "org.apache.commons.math3.geometry.spherical.twod" ], [ "SubCircle", "org.apache.commons.math3.geometry.spherical.twod" ], [ "Vertex", "org.apache.commons.math3.geometry.spherical.twod" ], [ "Circle", "org.apache.commons.math3.geometry.spherical.twod" ], [ "PropertiesComputer", "org.apache.commons.math3.geometry.spherical.twod" ], [ "SphericalPolygonsSet", "org.apache.commons.math3.geometry.spherical.twod" ], [ "Edge", "org.apache.commons.math3.geometry.spherical.twod" ], [ "EdgesBuilder", "org.apache.commons.math3.geometry.spherical.twod" ], [ "S2Point", "org.apache.commons.math3.geometry.spherical.twod" ], [ "SupportBallGenerator", "org.apache.commons.math3.geometry.enclosing" ], [ "EnclosingBall", "org.apache.commons.math3.geometry.enclosing" ], [ "WelzlEncloser", "org.apache.commons.math3.geometry.enclosing" ], [ "Encloser", "org.apache.commons.math3.geometry.enclosing" ], [ "InsideFinder", "org.apache.commons.math3.geometry.partitioning" ], [ "BoundaryProjection", "org.apache.commons.math3.geometry.partitioning" ], [ "BoundaryProjector", "org.apache.commons.math3.geometry.partitioning" ], [ "Region", "org.apache.commons.math3.geometry.partitioning" ], [ "Transform", "org.apache.commons.math3.geometry.partitioning" ], [ "NodesSet", "org.apache.commons.math3.geometry.partitioning" ], [ "AbstractRegion", "org.apache.commons.math3.geometry.partitioning" ], [ "Characterization", "org.apache.commons.math3.geometry.partitioning" ], [ "AbstractSubHyperplane", "org.apache.commons.math3.geometry.partitioning" ], [ "BSPTree", "org.apache.commons.math3.geometry.partitioning" ], [ "RegionFactory", "org.apache.commons.math3.geometry.partitioning" ], [ "Side", "org.apache.commons.math3.geometry.partitioning" ], [ "BoundarySizeVisitor", "org.apache.commons.math3.geometry.partitioning" ], [ "AVLTree", "org.apache.commons.math3.geometry.partitioning.utilities" ], [ "OrderedTuple", "org.apache.commons.math3.geometry.partitioning.utilities" ], [ "BSPTreeVisitor", "org.apache.commons.math3.geometry.partitioning" ], [ "Hyperplane", "org.apache.commons.math3.geometry.partitioning" ], [ "Embedding", "org.apache.commons.math3.geometry.partitioning" ], [ "BoundaryAttribute", "org.apache.commons.math3.geometry.partitioning" ], [ "SubHyperplane", "org.apache.commons.math3.geometry.partitioning" ], [ "BoundaryBuilder", "org.apache.commons.math3.geometry.partitioning" ], [ "Space", "org.apache.commons.math3.geometry" ], [ "Field", "org.apache.commons.math3" ], [ "ProcessModel", "org.apache.commons.math3.filter" ], [ "MeasurementModel", "org.apache.commons.math3.filter" ], [ "KalmanFilter", "org.apache.commons.math3.filter" ], [ "DefaultProcessModel", "org.apache.commons.math3.filter" ], [ "DefaultMeasurementModel", "org.apache.commons.math3.filter" ], [ "NormalizedRandomGenerator", "org.apache.commons.math3.random" ], [ "GaussianRandomGenerator", "org.apache.commons.math3.random" ], [ "RandomGenerator", "org.apache.commons.math3.random" ], [ "ISAACRandom", "org.apache.commons.math3.random" ], [ "CorrelatedRandomVectorGenerator", "org.apache.commons.math3.random" ], [ "Well19937a", "org.apache.commons.math3.random" ], [ "Well1024a", "org.apache.commons.math3.random" ], [ "UniformRandomGenerator", "org.apache.commons.math3.random" ], [ "Well44497a", "org.apache.commons.math3.random" ], [ "BitsStreamGenerator", "org.apache.commons.math3.random" ], [ "SynchronizedRandomGenerator", "org.apache.commons.math3.random" ], [ "UncorrelatedRandomVectorGenerator", "org.apache.commons.math3.random" ], [ "Well19937c", "org.apache.commons.math3.random" ], [ "ValueServer", "org.apache.commons.math3.random" ], [ "HaltonSequenceGenerator", "org.apache.commons.math3.random" ], [ "Well44497b", "org.apache.commons.math3.random" ], [ "RandomData", "org.apache.commons.math3.random" ], [ "RandomVectorGenerator", "org.apache.commons.math3.random" ], [ "RandomDataGenerator", "org.apache.commons.math3.random" ], [ "Well512a", "org.apache.commons.math3.random" ], [ "AbstractRandomGenerator", "org.apache.commons.math3.random" ], [ "JDKRandomGenerator", "org.apache.commons.math3.random" ], [ "StableRandomGenerator", "org.apache.commons.math3.random" ], [ "RandomAdaptor", "org.apache.commons.math3.random" ], [ "RandomGeneratorFactory", "org.apache.commons.math3.random" ], [ "AbstractWell", "org.apache.commons.math3.random" ], [ "RandomDataImpl", "org.apache.commons.math3.random" ], [ "EmpiricalDistribution", "org.apache.commons.math3.random" ], [ "SobolSequenceGenerator", "org.apache.commons.math3.random" ], [ "MersenneTwister", "org.apache.commons.math3.random" ], [ "UnitSphereRandomVectorGenerator", "org.apache.commons.math3.random" ], [ "FieldElement", "org.apache.commons.math3" ], [ "BigFractionFormat", "org.apache.commons.math3.fraction" ], [ "Fraction", "org.apache.commons.math3.fraction" ], [ "BigFraction", "org.apache.commons.math3.fraction" ], [ "AbstractFormat", "org.apache.commons.math3.fraction" ], [ "FractionFormat", "org.apache.commons.math3.fraction" ], [ "FractionField", "org.apache.commons.math3.fraction" ], [ "BigFractionField", "org.apache.commons.math3.fraction" ], [ "ProperFractionFormat", "org.apache.commons.math3.fraction" ], [ "FractionConversionException", "org.apache.commons.math3.fraction" ], [ "ProperBigFractionFormat", "org.apache.commons.math3.fraction" ], [ "NotFiniteNumberException", "org.apache.commons.math3.exception" ], [ "NoBracketingException", "org.apache.commons.math3.exception" ], [ "MathArithmeticException", "org.apache.commons.math3.exception" ], [ "InsufficientDataException", "org.apache.commons.math3.exception" ], [ "TooManyEvaluationsException", "org.apache.commons.math3.exception" ], [ "ExceptionContextProvider", "org.apache.commons.math3.exception.util" ], [ "ExceptionContext", "org.apache.commons.math3.exception.util" ], [ "ArgUtils", "org.apache.commons.math3.exception.util" ], [ "DummyLocalizable", "org.apache.commons.math3.exception.util" ], [ "Localizable", "org.apache.commons.math3.exception.util" ], [ "LocalizedFormats", "org.apache.commons.math3.exception.util" ], [ "NotANumberException", "org.apache.commons.math3.exception" ], [ "MultiDimensionMismatchException", "org.apache.commons.math3.exception" ], [ "OutOfRangeException", "org.apache.commons.math3.exception" ], [ "TooManyIterationsException", "org.apache.commons.math3.exception" ], [ "NullArgumentException", "org.apache.commons.math3.exception" ], [ "NumberIsTooLargeException", "org.apache.commons.math3.exception" ], [ "MathIllegalStateException", "org.apache.commons.math3.exception" ], [ "MathUnsupportedOperationException", "org.apache.commons.math3.exception" ], [ "NotStrictlyPositiveException", "org.apache.commons.math3.exception" ], [ "NonMonotonicSequenceException", "org.apache.commons.math3.exception" ], [ "ZeroException", "org.apache.commons.math3.exception" ], [ "MathIllegalArgumentException", "org.apache.commons.math3.exception" ], [ "DimensionMismatchException", "org.apache.commons.math3.exception" ], [ "MathRuntimeException", "org.apache.commons.math3.exception" ], [ "MathParseException", "org.apache.commons.math3.exception" ], [ "NoDataException", "org.apache.commons.math3.exception" ], [ "MathIllegalNumberException", "org.apache.commons.math3.exception" ], [ "NotPositiveException", "org.apache.commons.math3.exception" ], [ "MaxCountExceededException", "org.apache.commons.math3.exception" ], [ "NumberIsTooSmallException", "org.apache.commons.math3.exception" ], [ "ConvergenceException", "org.apache.commons.math3.exception" ], [ "MathInternalError", "org.apache.commons.math3.exception" ], [ "DftNormalization", "org.apache.commons.math3.transform" ], [ "RealTransformer", "org.apache.commons.math3.transform" ], [ "FastSineTransformer", "org.apache.commons.math3.transform" ], [ "DctNormalization", "org.apache.commons.math3.transform" ], [ "FastFourierTransformer", "org.apache.commons.math3.transform" ], [ "TransformType", "org.apache.commons.math3.transform" ], [ "FastCosineTransformer", "org.apache.commons.math3.transform" ], [ "TransformUtils", "org.apache.commons.math3.transform" ], [ "DstNormalization", "org.apache.commons.math3.transform" ], [ "FastHadamardTransformer", "org.apache.commons.math3.transform" ] ],
  "tokensProjectClassesNonPrivateStaticNonVoidMethods" : [ [ "isPrime", "org.apache.commons.math3.primes", "Primes", "public static boolean isPrime(int n)" ], [ "nextPrime", "org.apache.commons.math3.primes", "Primes", "public static int nextPrime(int n)" ], [ "primeFactors", "org.apache.commons.math3.primes", "Primes", "public static List<Integer> primeFactors(int n)" ], [ "smallTrialDivision", "org.apache.commons.math3.primes", "SmallPrimes", "public static int smallTrialDivision(int n, final List<Integer> factors)" ], [ "boundedTrialDivision", "org.apache.commons.math3.primes", "SmallPrimes", "public static int boundedTrialDivision(int n, int maxFactor, List<Integer> factors)" ], [ "trialDivision", "org.apache.commons.math3.primes", "SmallPrimes", "public static List<Integer> trialDivision(int n)" ], [ "millerRabinPrimeTest", "org.apache.commons.math3.primes", "SmallPrimes", "public static boolean millerRabinPrimeTest(final int n)" ], [ "primeFactors", "org.apache.commons.math3.primes", "PollardRho", "public static List<Integer> primeFactors(int n)" ], [ "rhoBrent", "org.apache.commons.math3.primes", "PollardRho", "static int rhoBrent(final int n)" ], [ "gcdPositive", "org.apache.commons.math3.primes", "PollardRho", "static int gcdPositive(int a, int b)" ], [ "create", "org.apache.commons.math3.fitting", "GaussianCurveFitter", "public static GaussianCurveFitter create()" ], [ "create", "org.apache.commons.math3.fitting", "SimpleCurveFitter", "public static SimpleCurveFitter create(ParametricUnivariateFunction f, double[] start)" ], [ "create", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem create(final MultivariateJacobianFunction model, final RealVector observed, final RealVector start, final RealMatrix weight, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations, final boolean lazyEvaluation, final ParameterValidator paramValidator)" ], [ "create", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem create(final MultivariateJacobianFunction model, final RealVector observed, final RealVector start, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations)" ], [ "create", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem create(final MultivariateJacobianFunction model, final RealVector observed, final RealVector start, final RealMatrix weight, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations)" ], [ "create", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem create(final MultivariateVectorFunction model, final MultivariateMatrixFunction jacobian, final double[] observed, final double[] start, final RealMatrix weight, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations)" ], [ "weightMatrix", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem weightMatrix(final LeastSquaresProblem problem, final RealMatrix weights)" ], [ "weightDiagonal", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem weightDiagonal(final LeastSquaresProblem problem, final RealVector weights)" ], [ "countEvaluations", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem countEvaluations(final LeastSquaresProblem problem, final Incrementor counter)" ], [ "evaluationChecker", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static ConvergenceChecker<Evaluation> evaluationChecker(final ConvergenceChecker<PointVectorValuePair> checker)" ], [ "model", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static MultivariateJacobianFunction model(final MultivariateVectorFunction value, final MultivariateMatrixFunction jacobian)" ], [ "create", "org.apache.commons.math3.fitting", "HarmonicCurveFitter", "public static HarmonicCurveFitter create()" ], [ "create", "org.apache.commons.math3.fitting", "PolynomialCurveFitter", "public static PolynomialCurveFitter create(int degree)" ], [ "compose", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateFunction compose(final UnivariateFunction... f)" ], [ "compose", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateDifferentiableFunction compose(final UnivariateDifferentiableFunction... f)" ], [ "compose", "org.apache.commons.math3.analysis", "FunctionUtils", "public static DifferentiableUnivariateFunction compose(final DifferentiableUnivariateFunction... f)" ], [ "add", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateFunction add(final UnivariateFunction... f)" ], [ "add", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateDifferentiableFunction add(final UnivariateDifferentiableFunction... f)" ], [ "add", "org.apache.commons.math3.analysis", "FunctionUtils", "public static DifferentiableUnivariateFunction add(final DifferentiableUnivariateFunction... f)" ], [ "multiply", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateFunction multiply(final UnivariateFunction... f)" ], [ "multiply", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateDifferentiableFunction multiply(final UnivariateDifferentiableFunction... f)" ], [ "multiply", "org.apache.commons.math3.analysis", "FunctionUtils", "public static DifferentiableUnivariateFunction multiply(final DifferentiableUnivariateFunction... f)" ], [ "combine", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateFunction combine(final BivariateFunction combiner, final UnivariateFunction f, final UnivariateFunction g)" ], [ "collector", "org.apache.commons.math3.analysis", "FunctionUtils", "public static MultivariateFunction collector(final BivariateFunction combiner, final UnivariateFunction f, final double initialValue)" ], [ "collector", "org.apache.commons.math3.analysis", "FunctionUtils", "public static MultivariateFunction collector(final BivariateFunction combiner, final double initialValue)" ], [ "fix1stArgument", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateFunction fix1stArgument(final BivariateFunction f, final double fixed)" ], [ "fix2ndArgument", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateFunction fix2ndArgument(final BivariateFunction f, final double fixed)" ], [ "sample", "org.apache.commons.math3.analysis", "FunctionUtils", "public static double[] sample(UnivariateFunction f, double min, double max, int n) throws NumberIsTooLargeException, NotStrictlyPositiveException" ], [ "toDifferentiableUnivariateFunction", "org.apache.commons.math3.analysis", "FunctionUtils", "public static DifferentiableUnivariateFunction toDifferentiableUnivariateFunction(final UnivariateDifferentiableFunction f)" ], [ "toUnivariateDifferential", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateDifferentiableFunction toUnivariateDifferential(final DifferentiableUnivariateFunction f)" ], [ "toDifferentiableMultivariateFunction", "org.apache.commons.math3.analysis", "FunctionUtils", "public static DifferentiableMultivariateFunction toDifferentiableMultivariateFunction(final MultivariateDifferentiableFunction f)" ], [ "toMultivariateDifferentiableFunction", "org.apache.commons.math3.analysis", "FunctionUtils", "public static MultivariateDifferentiableFunction toMultivariateDifferentiableFunction(final DifferentiableMultivariateFunction f)" ], [ "toDifferentiableMultivariateVectorFunction", "org.apache.commons.math3.analysis", "FunctionUtils", "public static DifferentiableMultivariateVectorFunction toDifferentiableMultivariateVectorFunction(final MultivariateDifferentiableVectorFunction f)" ], [ "toMultivariateDifferentiableVectorFunction", "org.apache.commons.math3.analysis", "FunctionUtils", "public static MultivariateDifferentiableVectorFunction toMultivariateDifferentiableVectorFunction(final DifferentiableMultivariateVectorFunction f)" ], [ "solve", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double solve(UnivariateFunction function, double x0, double x1) throws NullArgumentException, NoBracketingException" ], [ "solve", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double solve(UnivariateFunction function, double x0, double x1, double absoluteAccuracy) throws NullArgumentException, NoBracketingException" ], [ "forceSide", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double forceSide(final int maxEval, final UnivariateFunction f, final BracketedUnivariateSolver<UnivariateFunction> bracketing, final double baseRoot, final double min, final double max, final AllowedSolution allowedSolution) throws NoBracketingException" ], [ "bracket", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double[] bracket(UnivariateFunction function, double initial, double lowerBound, double upperBound) throws NullArgumentException, NotStrictlyPositiveException, NoBracketingException" ], [ "bracket", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double[] bracket(UnivariateFunction function, double initial, double lowerBound, double upperBound, int maximumIterations) throws NullArgumentException, NotStrictlyPositiveException, NoBracketingException" ], [ "bracket", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double[] bracket(final UnivariateFunction function, final double initial, final double lowerBound, final double upperBound, final double q, final double r, final int maximumIterations) throws NoBracketingException" ], [ "midpoint", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double midpoint(double a, double b)" ], [ "isBracketing", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static boolean isBracketing(UnivariateFunction function, final double lower, final double upper) throws NullArgumentException" ], [ "isSequence", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static boolean isSequence(final double start, final double mid, final double end)" ], [ "getCompiler", "org.apache.commons.math3.analysis.differentiation", "DSCompiler", "public static DSCompiler getCompiler(int parameters, int order) throws NumberIsTooLargeException" ], [ "createConstant", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public static SparseGradient createConstant(final double value)" ], [ "createVariable", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public static SparseGradient createVariable(final int idx, final double value)" ], [ "hypot", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public static SparseGradient hypot(final SparseGradient x, final SparseGradient y)" ], [ "pow", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public static SparseGradient pow(final double a, final SparseGradient x)" ], [ "atan2", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public static SparseGradient atan2(final SparseGradient y, final SparseGradient x)" ], [ "hypot", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public static DerivativeStructure hypot(final DerivativeStructure x, final DerivativeStructure y) throws DimensionMismatchException" ], [ "pow", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public static DerivativeStructure pow(final double a, final DerivativeStructure x)" ], [ "atan2", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public static DerivativeStructure atan2(final DerivativeStructure y, final DerivativeStructure x) throws DimensionMismatchException" ], [ "evaluate", "org.apache.commons.math3.analysis.polynomials", "PolynomialFunctionNewtonForm", "public static double evaluate(double[] a, double[] c, double z) throws NullArgumentException, DimensionMismatchException, NoDataException" ], [ "evaluate", "org.apache.commons.math3.analysis.polynomials", "PolynomialFunctionLagrangeForm", "public static double evaluate(double[] x, double[] y, double z) throws DimensionMismatchException, NumberIsTooSmallException, NonMonotonicSequenceException" ], [ "verifyInterpolationArray", "org.apache.commons.math3.analysis.polynomials", "PolynomialFunctionLagrangeForm", "public static boolean verifyInterpolationArray(double[] x, double[] y, boolean abort) throws DimensionMismatchException, NumberIsTooSmallException, NonMonotonicSequenceException" ], [ "createChebyshevPolynomial", "org.apache.commons.math3.analysis.polynomials", "PolynomialsUtils", "public static PolynomialFunction createChebyshevPolynomial(final int degree)" ], [ "createHermitePolynomial", "org.apache.commons.math3.analysis.polynomials", "PolynomialsUtils", "public static PolynomialFunction createHermitePolynomial(final int degree)" ], [ "createLaguerrePolynomial", "org.apache.commons.math3.analysis.polynomials", "PolynomialsUtils", "public static PolynomialFunction createLaguerrePolynomial(final int degree)" ], [ "createLegendrePolynomial", "org.apache.commons.math3.analysis.polynomials", "PolynomialsUtils", "public static PolynomialFunction createLegendrePolynomial(final int degree)" ], [ "createJacobiPolynomial", "org.apache.commons.math3.analysis.polynomials", "PolynomialsUtils", "public static PolynomialFunction createJacobiPolynomial(final int degree, final int v, final int w)" ], [ "shift", "org.apache.commons.math3.analysis.polynomials", "PolynomialsUtils", "public static double[] shift(final double[] coefficients, final double shift)" ], [ "evaluate", "org.apache.commons.math3.analysis.polynomials", "PolynomialFunction", "protected static double evaluate(double[] coefficients, double argument) throws NullArgumentException, NoDataException" ], [ "differentiate", "org.apache.commons.math3.analysis.polynomials", "PolynomialFunction", "protected static double[] differentiate(double[] coefficients) throws NullArgumentException, NoDataException" ], [ "computeDividedDifference", "org.apache.commons.math3.analysis.interpolation", "DividedDifferenceInterpolator", "protected static double[] computeDividedDifference(final double[] x, final double[] y) throws DimensionMismatchException, NumberIsTooSmallException, NonMonotonicSequenceException" ], [ "compareTo", "org.apache.commons.math3.util", "Precision", "public static int compareTo(double x, double y, double eps)" ], [ "compareTo", "org.apache.commons.math3.util", "Precision", "public static int compareTo(final double x, final double y, final int maxUlps)" ], [ "equals", "org.apache.commons.math3.util", "Precision", "public static boolean equals(float x, float y)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "Precision", "public static boolean equalsIncludingNaN(float x, float y)" ], [ "equals", "org.apache.commons.math3.util", "Precision", "public static boolean equals(float x, float y, float eps)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "Precision", "public static boolean equalsIncludingNaN(float x, float y, float eps)" ], [ "equals", "org.apache.commons.math3.util", "Precision", "public static boolean equals(final float x, final float y, final int maxUlps)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "Precision", "public static boolean equalsIncludingNaN(float x, float y, int maxUlps)" ], [ "equals", "org.apache.commons.math3.util", "Precision", "public static boolean equals(double x, double y)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "Precision", "public static boolean equalsIncludingNaN(double x, double y)" ], [ "equals", "org.apache.commons.math3.util", "Precision", "public static boolean equals(double x, double y, double eps)" ], [ "equalsWithRelativeTolerance", "org.apache.commons.math3.util", "Precision", "public static boolean equalsWithRelativeTolerance(double x, double y, double eps)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "Precision", "public static boolean equalsIncludingNaN(double x, double y, double eps)" ], [ "equals", "org.apache.commons.math3.util", "Precision", "public static boolean equals(final double x, final double y, final int maxUlps)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "Precision", "public static boolean equalsIncludingNaN(double x, double y, int maxUlps)" ], [ "round", "org.apache.commons.math3.util", "Precision", "public static double round(double x, int scale)" ], [ "round", "org.apache.commons.math3.util", "Precision", "public static double round(double x, int scale, int roundingMethod)" ], [ "round", "org.apache.commons.math3.util", "Precision", "public static float round(float x, int scale)" ], [ "round", "org.apache.commons.math3.util", "Precision", "public static float round(float x, int scale, int roundingMethod) throws MathArithmeticException, MathIllegalArgumentException" ], [ "representableDelta", "org.apache.commons.math3.util", "Precision", "public static double representableDelta(double x, double originalDelta)" ], [ "wrap", "org.apache.commons.math3.util", "Incrementor", "public static Incrementor wrap(final IntegerSequence.Incrementor incrementor)" ], [ "scale", "org.apache.commons.math3.util", "MathArrays", "public static double[] scale(double val, final double[] arr)" ], [ "ebeAdd", "org.apache.commons.math3.util", "MathArrays", "public static double[] ebeAdd(double[] a, double[] b) throws DimensionMismatchException" ], [ "ebeSubtract", "org.apache.commons.math3.util", "MathArrays", "public static double[] ebeSubtract(double[] a, double[] b) throws DimensionMismatchException" ], [ "ebeMultiply", "org.apache.commons.math3.util", "MathArrays", "public static double[] ebeMultiply(double[] a, double[] b) throws DimensionMismatchException" ], [ "ebeDivide", "org.apache.commons.math3.util", "MathArrays", "public static double[] ebeDivide(double[] a, double[] b) throws DimensionMismatchException" ], [ "distance1", "org.apache.commons.math3.util", "MathArrays", "public static double distance1(double[] p1, double[] p2) throws DimensionMismatchException" ], [ "distance1", "org.apache.commons.math3.util", "MathArrays", "public static int distance1(int[] p1, int[] p2) throws DimensionMismatchException" ], [ "distance", "org.apache.commons.math3.util", "MathArrays", "public static double distance(double[] p1, double[] p2) throws DimensionMismatchException" ], [ "cosAngle", "org.apache.commons.math3.util", "MathArrays", "public static double cosAngle(double[] v1, double[] v2)" ], [ "distance", "org.apache.commons.math3.util", "MathArrays", "public static double distance(int[] p1, int[] p2) throws DimensionMismatchException" ], [ "distanceInf", "org.apache.commons.math3.util", "MathArrays", "public static double distanceInf(double[] p1, double[] p2) throws DimensionMismatchException" ], [ "distanceInf", "org.apache.commons.math3.util", "MathArrays", "public static int distanceInf(int[] p1, int[] p2) throws DimensionMismatchException" ], [ "isMonotonic", "org.apache.commons.math3.util", "MathArrays", "public static <T extends Comparable<? super T>> boolean isMonotonic(T[] val, OrderDirection dir, boolean strict)" ], [ "isMonotonic", "org.apache.commons.math3.util", "MathArrays", "public static boolean isMonotonic(double[] val, OrderDirection dir, boolean strict)" ], [ "checkEqualLength", "org.apache.commons.math3.util", "MathArrays", "public static boolean checkEqualLength(double[] a, double[] b, boolean abort)" ], [ "checkEqualLength", "org.apache.commons.math3.util", "MathArrays", "public static boolean checkEqualLength(int[] a, int[] b, boolean abort)" ], [ "checkOrder", "org.apache.commons.math3.util", "MathArrays", "public static boolean checkOrder(double[] val, OrderDirection dir, boolean strict, boolean abort) throws NonMonotonicSequenceException" ], [ "safeNorm", "org.apache.commons.math3.util", "MathArrays", "public static double safeNorm(double[] v)" ], [ "copyOf", "org.apache.commons.math3.util", "MathArrays", "public static int[] copyOf(int[] source)" ], [ "copyOf", "org.apache.commons.math3.util", "MathArrays", "public static double[] copyOf(double[] source)" ], [ "copyOf", "org.apache.commons.math3.util", "MathArrays", "public static int[] copyOf(int[] source, int len)" ], [ "copyOf", "org.apache.commons.math3.util", "MathArrays", "public static double[] copyOf(double[] source, int len)" ], [ "copyOfRange", "org.apache.commons.math3.util", "MathArrays", "public static double[] copyOfRange(double[] source, int from, int to)" ], [ "linearCombination", "org.apache.commons.math3.util", "MathArrays", "public static double linearCombination(final double[] a, final double[] b) throws DimensionMismatchException" ], [ "linearCombination", "org.apache.commons.math3.util", "MathArrays", "public static double linearCombination(final double a1, final double b1, final double a2, final double b2)" ], [ "linearCombination", "org.apache.commons.math3.util", "MathArrays", "public static double linearCombination(final double a1, final double b1, final double a2, final double b2, final double a3, final double b3)" ], [ "linearCombination", "org.apache.commons.math3.util", "MathArrays", "public static double linearCombination(final double a1, final double b1, final double a2, final double b2, final double a3, final double b3, final double a4, final double b4)" ], [ "equals", "org.apache.commons.math3.util", "MathArrays", "public static boolean equals(float[] x, float[] y)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "MathArrays", "public static boolean equalsIncludingNaN(float[] x, float[] y)" ], [ "equals", "org.apache.commons.math3.util", "MathArrays", "public static boolean equals(double[] x, double[] y)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "MathArrays", "public static boolean equalsIncludingNaN(double[] x, double[] y)" ], [ "normalizeArray", "org.apache.commons.math3.util", "MathArrays", "public static double[] normalizeArray(double[] values, double normalizedSum) throws MathIllegalArgumentException, MathArithmeticException" ], [ "buildArray", "org.apache.commons.math3.util", "MathArrays", "public static <T> T[] buildArray(final Field<T> field, final int length)" ], [ "buildArray", "org.apache.commons.math3.util", "MathArrays", "public static <T> T[][] buildArray(final Field<T> field, final int rows, final int columns)" ], [ "convolve", "org.apache.commons.math3.util", "MathArrays", "public static double[] convolve(double[] x, double[] h) throws NullArgumentException, NoDataException" ], [ "natural", "org.apache.commons.math3.util", "MathArrays", "public static int[] natural(int n)" ], [ "sequence", "org.apache.commons.math3.util", "MathArrays", "public static int[] sequence(int size, int start, int stride)" ], [ "verifyValues", "org.apache.commons.math3.util", "MathArrays", "public static boolean verifyValues(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "verifyValues", "org.apache.commons.math3.util", "MathArrays", "public static boolean verifyValues(final double[] values, final int begin, final int length, final boolean allowEmpty) throws MathIllegalArgumentException" ], [ "verifyValues", "org.apache.commons.math3.util", "MathArrays", "public static boolean verifyValues(final double[] values, final double[] weights, final int begin, final int length) throws MathIllegalArgumentException" ], [ "verifyValues", "org.apache.commons.math3.util", "MathArrays", "public static boolean verifyValues(final double[] values, final double[] weights, final int begin, final int length, final boolean allowEmpty) throws MathIllegalArgumentException" ], [ "concatenate", "org.apache.commons.math3.util", "MathArrays", "public static double[] concatenate(double[]... x)" ], [ "unique", "org.apache.commons.math3.util", "MathArrays", "public static double[] unique(double[] data)" ], [ "create", "org.apache.commons.math3.util", "Pair", "public static <K, V> Pair<K, V> create(K k, V v)" ], [ "slowCos", "org.apache.commons.math3.util", "FastMathCalc", "static double slowCos(final double x, final double[] result)" ], [ "slowSin", "org.apache.commons.math3.util", "FastMathCalc", "static double slowSin(final double x, final double[] result)" ], [ "slowexp", "org.apache.commons.math3.util", "FastMathCalc", "static double slowexp(final double x, final double[] result)" ], [ "expint", "org.apache.commons.math3.util", "FastMathCalc", "static double expint(int p, final double[] result)" ], [ "slowLog", "org.apache.commons.math3.util", "FastMathCalc", "static double[] slowLog(double xi)" ], [ "format", "org.apache.commons.math3.util", "FastMathCalc", "static String format(double d)" ], [ "sqrt", "org.apache.commons.math3.util", "FastMath", "public static double sqrt(final double a)" ], [ "cosh", "org.apache.commons.math3.util", "FastMath", "public static double cosh(double x)" ], [ "sinh", "org.apache.commons.math3.util", "FastMath", "public static double sinh(double x)" ], [ "tanh", "org.apache.commons.math3.util", "FastMath", "public static double tanh(double x)" ], [ "acosh", "org.apache.commons.math3.util", "FastMath", "public static double acosh(final double a)" ], [ "asinh", "org.apache.commons.math3.util", "FastMath", "public static double asinh(double a)" ], [ "atanh", "org.apache.commons.math3.util", "FastMath", "public static double atanh(double a)" ], [ "signum", "org.apache.commons.math3.util", "FastMath", "public static double signum(final double a)" ], [ "signum", "org.apache.commons.math3.util", "FastMath", "public static float signum(final float a)" ], [ "nextUp", "org.apache.commons.math3.util", "FastMath", "public static double nextUp(final double a)" ], [ "nextUp", "org.apache.commons.math3.util", "FastMath", "public static float nextUp(final float a)" ], [ "nextDown", "org.apache.commons.math3.util", "FastMath", "public static double nextDown(final double a)" ], [ "nextDown", "org.apache.commons.math3.util", "FastMath", "public static float nextDown(final float a)" ], [ "random", "org.apache.commons.math3.util", "FastMath", "public static double random()" ], [ "exp", "org.apache.commons.math3.util", "FastMath", "public static double exp(double x)" ], [ "expm1", "org.apache.commons.math3.util", "FastMath", "public static double expm1(double x)" ], [ "log", "org.apache.commons.math3.util", "FastMath", "public static double log(final double x)" ], [ "log1p", "org.apache.commons.math3.util", "FastMath", "public static double log1p(final double x)" ], [ "log10", "org.apache.commons.math3.util", "FastMath", "public static double log10(final double x)" ], [ "log", "org.apache.commons.math3.util", "FastMath", "public static double log(double base, double x)" ], [ "pow", "org.apache.commons.math3.util", "FastMath", "public static double pow(final double x, final double y)" ], [ "pow", "org.apache.commons.math3.util", "FastMath", "public static double pow(double d, int e)" ], [ "pow", "org.apache.commons.math3.util", "FastMath", "public static double pow(double d, long e)" ], [ "sin", "org.apache.commons.math3.util", "FastMath", "public static double sin(double x)" ], [ "cos", "org.apache.commons.math3.util", "FastMath", "public static double cos(double x)" ], [ "tan", "org.apache.commons.math3.util", "FastMath", "public static double tan(double x)" ], [ "atan", "org.apache.commons.math3.util", "FastMath", "public static double atan(double x)" ], [ "atan2", "org.apache.commons.math3.util", "FastMath", "public static double atan2(double y, double x)" ], [ "asin", "org.apache.commons.math3.util", "FastMath", "public static double asin(double x)" ], [ "acos", "org.apache.commons.math3.util", "FastMath", "public static double acos(double x)" ], [ "cbrt", "org.apache.commons.math3.util", "FastMath", "public static double cbrt(double x)" ], [ "toRadians", "org.apache.commons.math3.util", "FastMath", "public static double toRadians(double x)" ], [ "toDegrees", "org.apache.commons.math3.util", "FastMath", "public static double toDegrees(double x)" ], [ "abs", "org.apache.commons.math3.util", "FastMath", "public static int abs(final int x)" ], [ "abs", "org.apache.commons.math3.util", "FastMath", "public static long abs(final long x)" ], [ "abs", "org.apache.commons.math3.util", "FastMath", "public static float abs(final float x)" ], [ "abs", "org.apache.commons.math3.util", "FastMath", "public static double abs(double x)" ], [ "ulp", "org.apache.commons.math3.util", "FastMath", "public static double ulp(double x)" ], [ "ulp", "org.apache.commons.math3.util", "FastMath", "public static float ulp(float x)" ], [ "scalb", "org.apache.commons.math3.util", "FastMath", "public static double scalb(final double d, final int n)" ], [ "scalb", "org.apache.commons.math3.util", "FastMath", "public static float scalb(final float f, final int n)" ], [ "nextAfter", "org.apache.commons.math3.util", "FastMath", "public static double nextAfter(double d, double direction)" ], [ "nextAfter", "org.apache.commons.math3.util", "FastMath", "public static float nextAfter(final float f, final double direction)" ], [ "floor", "org.apache.commons.math3.util", "FastMath", "public static double floor(double x)" ], [ "ceil", "org.apache.commons.math3.util", "FastMath", "public static double ceil(double x)" ], [ "rint", "org.apache.commons.math3.util", "FastMath", "public static double rint(double x)" ], [ "round", "org.apache.commons.math3.util", "FastMath", "public static long round(double x)" ], [ "round", "org.apache.commons.math3.util", "FastMath", "public static int round(final float x)" ], [ "min", "org.apache.commons.math3.util", "FastMath", "public static int min(final int a, final int b)" ], [ "min", "org.apache.commons.math3.util", "FastMath", "public static long min(final long a, final long b)" ], [ "min", "org.apache.commons.math3.util", "FastMath", "public static float min(final float a, final float b)" ], [ "min", "org.apache.commons.math3.util", "FastMath", "public static double min(final double a, final double b)" ], [ "max", "org.apache.commons.math3.util", "FastMath", "public static int max(final int a, final int b)" ], [ "max", "org.apache.commons.math3.util", "FastMath", "public static long max(final long a, final long b)" ], [ "max", "org.apache.commons.math3.util", "FastMath", "public static float max(final float a, final float b)" ], [ "max", "org.apache.commons.math3.util", "FastMath", "public static double max(final double a, final double b)" ], [ "hypot", "org.apache.commons.math3.util", "FastMath", "public static double hypot(final double x, final double y)" ], [ "IEEEremainder", "org.apache.commons.math3.util", "FastMath", "public static double IEEEremainder(double dividend, double divisor)" ], [ "toIntExact", "org.apache.commons.math3.util", "FastMath", "public static int toIntExact(final long n) throws MathArithmeticException" ], [ "incrementExact", "org.apache.commons.math3.util", "FastMath", "public static int incrementExact(final int n) throws MathArithmeticException" ], [ "incrementExact", "org.apache.commons.math3.util", "FastMath", "public static long incrementExact(final long n) throws MathArithmeticException" ], [ "decrementExact", "org.apache.commons.math3.util", "FastMath", "public static int decrementExact(final int n) throws MathArithmeticException" ], [ "decrementExact", "org.apache.commons.math3.util", "FastMath", "public static long decrementExact(final long n) throws MathArithmeticException" ], [ "addExact", "org.apache.commons.math3.util", "FastMath", "public static int addExact(final int a, final int b) throws MathArithmeticException" ], [ "addExact", "org.apache.commons.math3.util", "FastMath", "public static long addExact(final long a, final long b) throws MathArithmeticException" ], [ "subtractExact", "org.apache.commons.math3.util", "FastMath", "public static int subtractExact(final int a, final int b)" ], [ "subtractExact", "org.apache.commons.math3.util", "FastMath", "public static long subtractExact(final long a, final long b)" ], [ "multiplyExact", "org.apache.commons.math3.util", "FastMath", "public static int multiplyExact(final int a, final int b)" ], [ "multiplyExact", "org.apache.commons.math3.util", "FastMath", "public static long multiplyExact(final long a, final long b)" ], [ "floorDiv", "org.apache.commons.math3.util", "FastMath", "public static int floorDiv(final int a, final int b) throws MathArithmeticException" ], [ "floorDiv", "org.apache.commons.math3.util", "FastMath", "public static long floorDiv(final long a, final long b) throws MathArithmeticException" ], [ "floorMod", "org.apache.commons.math3.util", "FastMath", "public static int floorMod(final int a, final int b) throws MathArithmeticException" ], [ "floorMod", "org.apache.commons.math3.util", "FastMath", "public static long floorMod(final long a, final long b)" ], [ "copySign", "org.apache.commons.math3.util", "FastMath", "public static double copySign(double magnitude, double sign)" ], [ "copySign", "org.apache.commons.math3.util", "FastMath", "public static float copySign(float magnitude, float sign)" ], [ "getExponent", "org.apache.commons.math3.util", "FastMath", "public static int getExponent(final double d)" ], [ "getExponent", "org.apache.commons.math3.util", "FastMath", "public static int getExponent(final float f)" ], [ "getInstance", "org.apache.commons.math3.util", "BigRealField", "public static BigRealField getInstance()" ], [ "getInstance", "org.apache.commons.math3.util", "Decimal64Field", "public static final Decimal64Field getInstance()" ], [ "hash", "org.apache.commons.math3.util", "MathUtils", "public static int hash(double value)" ], [ "equals", "org.apache.commons.math3.util", "MathUtils", "public static boolean equals(double x, double y)" ], [ "hash", "org.apache.commons.math3.util", "MathUtils", "public static int hash(double[] value)" ], [ "normalizeAngle", "org.apache.commons.math3.util", "MathUtils", "public static double normalizeAngle(double a, double center)" ], [ "max", "org.apache.commons.math3.util", "MathUtils", "public static <T extends RealFieldElement<T>> T max(final T e1, final T e2)" ], [ "min", "org.apache.commons.math3.util", "MathUtils", "public static <T extends RealFieldElement<T>> T min(final T e1, final T e2)" ], [ "reduce", "org.apache.commons.math3.util", "MathUtils", "public static double reduce(double a, double period, double offset)" ], [ "copySign", "org.apache.commons.math3.util", "MathUtils", "public static byte copySign(byte magnitude, byte sign) throws MathArithmeticException" ], [ "copySign", "org.apache.commons.math3.util", "MathUtils", "public static short copySign(short magnitude, short sign) throws MathArithmeticException" ], [ "copySign", "org.apache.commons.math3.util", "MathUtils", "public static int copySign(int magnitude, int sign) throws MathArithmeticException" ], [ "copySign", "org.apache.commons.math3.util", "MathUtils", "public static long copySign(long magnitude, long sign) throws MathArithmeticException" ], [ "getDefaultNumberFormat", "org.apache.commons.math3.util", "CompositeFormat", "public static NumberFormat getDefaultNumberFormat()" ], [ "getDefaultNumberFormat", "org.apache.commons.math3.util", "CompositeFormat", "public static NumberFormat getDefaultNumberFormat(final Locale locale)" ], [ "parseNextCharacter", "org.apache.commons.math3.util", "CompositeFormat", "public static char parseNextCharacter(final String source, final ParsePosition pos)" ], [ "parseNumber", "org.apache.commons.math3.util", "CompositeFormat", "public static Number parseNumber(final String source, final NumberFormat format, final ParsePosition pos)" ], [ "parseFixedstring", "org.apache.commons.math3.util", "CompositeFormat", "public static boolean parseFixedstring(final String source, final String expected, final ParsePosition pos)" ], [ "formatDouble", "org.apache.commons.math3.util", "CompositeFormat", "public static StringBuffer formatDouble(final double value, final NumberFormat format, final StringBuffer toAppendTo, final FieldPosition pos)" ], [ "range", "org.apache.commons.math3.util", "IntegerSequence", "public static Range range(int start, int end)" ], [ "range", "org.apache.commons.math3.util", "IntegerSequence", "public static Range range(final int start, final int max, final int step)" ], [ "create", "org.apache.commons.math3.util", "IntegerSequence", "public static Incrementor create()" ], [ "create", "org.apache.commons.math3.util", "Incrementor", "public static Incrementor create()" ], [ "loadExpIntA", "org.apache.commons.math3.util", "FastMathLiteralArrays", "static double[] loadExpIntA()" ], [ "loadExpIntB", "org.apache.commons.math3.util", "FastMathLiteralArrays", "static double[] loadExpIntB()" ], [ "loadExpFracA", "org.apache.commons.math3.util", "FastMathLiteralArrays", "static double[] loadExpFracA()" ], [ "loadExpFracB", "org.apache.commons.math3.util", "FastMathLiteralArrays", "static double[] loadExpFracB()" ], [ "loadLnMant", "org.apache.commons.math3.util", "FastMathLiteralArrays", "static double[][] loadLnMant()" ], [ "binomialCoefficient", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static long binomialCoefficient(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "binomialCoefficientDouble", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static double binomialCoefficientDouble(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "binomialCoefficientLog", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static double binomialCoefficientLog(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "factorial", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static long factorial(final int n) throws NotPositiveException, MathArithmeticException" ], [ "factorialDouble", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static double factorialDouble(final int n) throws NotPositiveException" ], [ "factorialLog", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static double factorialLog(final int n) throws NotPositiveException" ], [ "stirlingS2", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static long stirlingS2(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "combinationsIterator", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static Iterator<int[]> combinationsIterator(int n, int k)" ], [ "addAndCheck", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int addAndCheck(int x, int y) throws MathArithmeticException" ], [ "addAndCheck", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long addAndCheck(long a, long b) throws MathArithmeticException" ], [ "binomialCoefficient", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long binomialCoefficient(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "binomialCoefficientDouble", "org.apache.commons.math3.util", "ArithmeticUtils", "public static double binomialCoefficientDouble(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "binomialCoefficientLog", "org.apache.commons.math3.util", "ArithmeticUtils", "public static double binomialCoefficientLog(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "factorial", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long factorial(final int n) throws NotPositiveException, MathArithmeticException" ], [ "factorialDouble", "org.apache.commons.math3.util", "ArithmeticUtils", "public static double factorialDouble(final int n) throws NotPositiveException" ], [ "factorialLog", "org.apache.commons.math3.util", "ArithmeticUtils", "public static double factorialLog(final int n) throws NotPositiveException" ], [ "gcd", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int gcd(int p, int q) throws MathArithmeticException" ], [ "gcd", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long gcd(final long p, final long q) throws MathArithmeticException" ], [ "lcm", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int lcm(int a, int b) throws MathArithmeticException" ], [ "lcm", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long lcm(long a, long b) throws MathArithmeticException" ], [ "mulAndCheck", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int mulAndCheck(int x, int y) throws MathArithmeticException" ], [ "mulAndCheck", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long mulAndCheck(long a, long b) throws MathArithmeticException" ], [ "subAndCheck", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int subAndCheck(int x, int y) throws MathArithmeticException" ], [ "subAndCheck", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long subAndCheck(long a, long b) throws MathArithmeticException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int pow(final int k, final int e) throws NotPositiveException, MathArithmeticException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int pow(final int k, long e) throws NotPositiveException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long pow(final long k, final int e) throws NotPositiveException, MathArithmeticException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long pow(final long k, long e) throws NotPositiveException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static BigInteger pow(final BigInteger k, int e) throws NotPositiveException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static BigInteger pow(final BigInteger k, long e) throws NotPositiveException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static BigInteger pow(final BigInteger k, BigInteger e) throws NotPositiveException" ], [ "stirlingS2", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long stirlingS2(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "isPowerOfTwo", "org.apache.commons.math3.util", "ArithmeticUtils", "public static boolean isPowerOfTwo(long n)" ], [ "getAvailableLocales", "org.apache.commons.math3.complex", "ComplexFormat", "public static Locale[] getAvailableLocales()" ], [ "getInstance", "org.apache.commons.math3.complex", "ComplexFormat", "public static ComplexFormat getInstance()" ], [ "getInstance", "org.apache.commons.math3.complex", "ComplexFormat", "public static ComplexFormat getInstance(Locale locale)" ], [ "getInstance", "org.apache.commons.math3.complex", "ComplexFormat", "public static ComplexFormat getInstance(String imaginaryCharacter, Locale locale) throws NullArgumentException, NoDataException" ], [ "getInstance", "org.apache.commons.math3.complex", "ComplexField", "public static ComplexField getInstance()" ], [ "multiply", "org.apache.commons.math3.complex", "Quaternion", "public static Quaternion multiply(final Quaternion q1, final Quaternion q2)" ], [ "add", "org.apache.commons.math3.complex", "Quaternion", "public static Quaternion add(final Quaternion q1, final Quaternion q2)" ], [ "subtract", "org.apache.commons.math3.complex", "Quaternion", "public static Quaternion subtract(final Quaternion q1, final Quaternion q2)" ], [ "dotProduct", "org.apache.commons.math3.complex", "Quaternion", "public static double dotProduct(final Quaternion q1, final Quaternion q2)" ], [ "equals", "org.apache.commons.math3.complex", "Complex", "public static boolean equals(Complex x, Complex y, int maxUlps)" ], [ "equals", "org.apache.commons.math3.complex", "Complex", "public static boolean equals(Complex x, Complex y)" ], [ "equals", "org.apache.commons.math3.complex", "Complex", "public static boolean equals(Complex x, Complex y, double eps)" ], [ "equalsWithRelativeTolerance", "org.apache.commons.math3.complex", "Complex", "public static boolean equalsWithRelativeTolerance(Complex x, Complex y, double eps)" ], [ "valueOf", "org.apache.commons.math3.complex", "Complex", "public static Complex valueOf(double realPart, double imaginaryPart)" ], [ "valueOf", "org.apache.commons.math3.complex", "Complex", "public static Complex valueOf(double realPart)" ], [ "polar2Complex", "org.apache.commons.math3.complex", "ComplexUtils", "public static Complex polar2Complex(double r, double theta) throws MathIllegalArgumentException" ], [ "convertToComplex", "org.apache.commons.math3.complex", "ComplexUtils", "public static Complex[] convertToComplex(double[] real)" ], [ "getInvertedCoefficientSum", "org.apache.commons.math3.optimization.linear", "SimplexTableau", "protected static double getInvertedCoefficientSum(final RealVector coefficients)" ], [ "getAvailableLocales", "org.apache.commons.math3.linear", "RealMatrixFormat", "public static Locale[] getAvailableLocales()" ], [ "getInstance", "org.apache.commons.math3.linear", "RealMatrixFormat", "public static RealMatrixFormat getInstance()" ], [ "getInstance", "org.apache.commons.math3.linear", "RealMatrixFormat", "public static RealMatrixFormat getInstance(final Locale locale)" ], [ "createRealMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix createRealMatrix(final int rows, final int columns)" ], [ "createFieldMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldMatrix(final Field<T> field, final int rows, final int columns)" ], [ "createRealMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix createRealMatrix(double[][] data) throws NullArgumentException, DimensionMismatchException, NoDataException" ], [ "createFieldMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldMatrix(T[][] data) throws DimensionMismatchException, NoDataException, NullArgumentException" ], [ "createRealIdentityMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix createRealIdentityMatrix(int dimension)" ], [ "createFieldIdentityMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldIdentityMatrix(final Field<T> field, final int dimension)" ], [ "createRealDiagonalMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix createRealDiagonalMatrix(final double[] diagonal)" ], [ "createFieldDiagonalMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldDiagonalMatrix(final T[] diagonal)" ], [ "createRealVector", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealVector createRealVector(double[] data) throws NoDataException, NullArgumentException" ], [ "createFieldVector", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldVector<T> createFieldVector(final T[] data) throws NoDataException, NullArgumentException, ZeroException" ], [ "createRowRealMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix createRowRealMatrix(double[] rowData) throws NoDataException, NullArgumentException" ], [ "createRowFieldMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldMatrix<T> createRowFieldMatrix(final T[] rowData) throws NoDataException, NullArgumentException" ], [ "createColumnRealMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix createColumnRealMatrix(double[] columnData) throws NoDataException, NullArgumentException" ], [ "createColumnFieldMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldMatrix<T> createColumnFieldMatrix(final T[] columnData) throws NoDataException, NullArgumentException" ], [ "isSymmetric", "org.apache.commons.math3.linear", "MatrixUtils", "public static boolean isSymmetric(RealMatrix matrix, double eps)" ], [ "fractionMatrixToRealMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static Array2DRowRealMatrix fractionMatrixToRealMatrix(final FieldMatrix<Fraction> m)" ], [ "bigFractionMatrixToRealMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static Array2DRowRealMatrix bigFractionMatrixToRealMatrix(final FieldMatrix<BigFraction> m)" ], [ "blockInverse", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix blockInverse(RealMatrix m, int splitIndex)" ], [ "inverse", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix inverse(RealMatrix matrix) throws NullArgumentException, SingularMatrixException, NonSquareMatrixException" ], [ "inverse", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix inverse(RealMatrix matrix, double threshold) throws NullArgumentException, SingularMatrixException, NonSquareMatrixException" ], [ "toBlocksLayout", "org.apache.commons.math3.linear", "BlockFieldMatrix", "public static <T extends FieldElement<T>> T[][] toBlocksLayout(final T[][] rawData) throws DimensionMismatchException" ], [ "createBlocksLayout", "org.apache.commons.math3.linear", "BlockFieldMatrix", "public static <T extends FieldElement<T>> T[][] createBlocksLayout(final Field<T> field, final int rows, final int columns)" ], [ "toBlocksLayout", "org.apache.commons.math3.linear", "BlockRealMatrix", "public static double[][] toBlocksLayout(final double[][] rawData) throws DimensionMismatchException" ], [ "createBlocksLayout", "org.apache.commons.math3.linear", "BlockRealMatrix", "public static double[][] createBlocksLayout(final int rows, final int columns)" ], [ "unmodifiableRealVector", "org.apache.commons.math3.linear", "RealVector", "public static RealVector unmodifiableRealVector(final RealVector v)" ], [ "getAvailableLocales", "org.apache.commons.math3.linear", "RealVectorFormat", "public static Locale[] getAvailableLocales()" ], [ "getInstance", "org.apache.commons.math3.linear", "RealVectorFormat", "public static RealVectorFormat getInstance()" ], [ "getInstance", "org.apache.commons.math3.linear", "RealVectorFormat", "public static RealVectorFormat getInstance(final Locale locale)" ], [ "create", "org.apache.commons.math3.linear", "JacobiPreconditioner", "public static JacobiPreconditioner create(final RealLinearOperator a) throws NonSquareOperatorException" ], [ "extractField", "org.apache.commons.math3.linear", "AbstractFieldMatrix", "protected static <T extends FieldElement<T>> Field<T> extractField(final T[][] d) throws NoDataException, NullArgumentException" ], [ "extractField", "org.apache.commons.math3.linear", "AbstractFieldMatrix", "protected static <T extends FieldElement<T>> Field<T> extractField(final T[] d) throws NoDataException" ], [ "buildArray", "org.apache.commons.math3.linear", "AbstractFieldMatrix", "protected static <T extends FieldElement<T>> T[][] buildArray(final Field<T> field, final int rows, final int columns)" ], [ "buildArray", "org.apache.commons.math3.linear", "AbstractFieldMatrix", "protected static <T extends FieldElement<T>> T[] buildArray(final Field<T> field, final int length)" ], [ "estimate", "org.apache.commons.math3.distribution.fitting", "MultivariateNormalMixtureExpectationMaximization", "public static MixtureMultivariateNormalDistribution estimate(final double[][] data, final int numComponents) throws NotStrictlyPositiveException, DimensionMismatchException" ], [ "sample", "org.apache.commons.math3.distribution", "BetaDistribution", "static double sample(RandomGenerator random, final double alpha, final double beta)" ], [ "sample", "org.apache.commons.math3.distribution", "ChengBetaSampler", "static double sample(RandomGenerator random, final double alpha, final double beta)" ], [ "getStirlingError", "org.apache.commons.math3.distribution", "SaddlePointExpansion", "static double getStirlingError(double z)" ], [ "getDeviancePart", "org.apache.commons.math3.distribution", "SaddlePointExpansion", "static double getDeviancePart(double x, double mu)" ], [ "logBinomialProbability", "org.apache.commons.math3.distribution", "SaddlePointExpansion", "static double logBinomialProbability(int x, int n, double p, double q)" ], [ "helper1", "org.apache.commons.math3.distribution", "ZipfDistribution", "static double helper1(final double x)" ], [ "helper2", "org.apache.commons.math3.distribution", "ZipfDistribution", "static double helper2(final double x)" ], [ "helper1", "org.apache.commons.math3.distribution", "ZipfRejectionInversionSampler", "static double helper1(final double x)" ], [ "helper2", "org.apache.commons.math3.distribution", "ZipfRejectionInversionSampler", "static double helper2(final double x)" ], [ "unlimited", "org.apache.commons.math3.optim", "MaxIter", "public static MaxIter unlimited()" ], [ "getInvertedCoefficientSum", "org.apache.commons.math3.optim.linear", "SimplexTableau", "protected static double getInvertedCoefficientSum(final RealVector coefficients)" ], [ "unbounded", "org.apache.commons.math3.optim", "SimpleBounds", "public static SimpleBounds unbounded(int dim)" ], [ "unlimited", "org.apache.commons.math3.optim", "MaxEval", "public static MaxEval unlimited()" ], [ "erf", "org.apache.commons.math3.special", "Erf", "public static double erf(double x)" ], [ "erfc", "org.apache.commons.math3.special", "Erf", "public static double erfc(double x)" ], [ "erf", "org.apache.commons.math3.special", "Erf", "public static double erf(double x1, double x2)" ], [ "erfInv", "org.apache.commons.math3.special", "Erf", "public static double erfInv(final double x)" ], [ "erfcInv", "org.apache.commons.math3.special", "Erf", "public static double erfcInv(final double x)" ], [ "value", "org.apache.commons.math3.special", "BesselJ", "public static double value(double order, double x) throws MathIllegalArgumentException, ConvergenceException" ], [ "rjBesl", "org.apache.commons.math3.special", "BesselJ", "public static BesselJResult rjBesl(double x, double alpha, int nb)" ], [ "logGamma", "org.apache.commons.math3.special", "Gamma", "public static double logGamma(double x)" ], [ "regularizedGammaP", "org.apache.commons.math3.special", "Gamma", "public static double regularizedGammaP(double a, double x)" ], [ "regularizedGammaP", "org.apache.commons.math3.special", "Gamma", "public static double regularizedGammaP(double a, double x, double epsilon, int maxIterations)" ], [ "regularizedGammaQ", "org.apache.commons.math3.special", "Gamma", "public static double regularizedGammaQ(double a, double x)" ], [ "regularizedGammaQ", "org.apache.commons.math3.special", "Gamma", "public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations)" ], [ "digamma", "org.apache.commons.math3.special", "Gamma", "public static double digamma(double x)" ], [ "trigamma", "org.apache.commons.math3.special", "Gamma", "public static double trigamma(double x)" ], [ "lanczos", "org.apache.commons.math3.special", "Gamma", "public static double lanczos(final double x)" ], [ "invGamma1pm1", "org.apache.commons.math3.special", "Gamma", "public static double invGamma1pm1(final double x)" ], [ "logGamma1p", "org.apache.commons.math3.special", "Gamma", "public static double logGamma1p(final double x) throws NumberIsTooSmallException, NumberIsTooLargeException" ], [ "gamma", "org.apache.commons.math3.special", "Gamma", "public static double gamma(final double x)" ], [ "regularizedBeta", "org.apache.commons.math3.special", "Beta", "public static double regularizedBeta(double x, double a, double b)" ], [ "regularizedBeta", "org.apache.commons.math3.special", "Beta", "public static double regularizedBeta(double x, double a, double b, double epsilon)" ], [ "regularizedBeta", "org.apache.commons.math3.special", "Beta", "public static double regularizedBeta(double x, double a, double b, int maxIterations)" ], [ "regularizedBeta", "org.apache.commons.math3.special", "Beta", "public static double regularizedBeta(double x, final double a, final double b, double epsilon, int maxIterations)" ], [ "logBeta", "org.apache.commons.math3.special", "Beta", "public static double logBeta(double a, double b, double epsilon, int maxIterations)" ], [ "logBeta", "org.apache.commons.math3.special", "Beta", "public static double logBeta(final double p, final double q)" ], [ "getInstance", "org.apache.commons.math3.ode.sampling", "DummyStepHandler", "public static DummyStepHandler getInstance()" ], [ "getInstance", "org.apache.commons.math3.ode.nonstiff", "AdamsNordsieckTransformer", "public static AdamsNordsieckTransformer getInstance(final int nSteps)" ], [ "taylor", "org.apache.commons.math3.ode.nonstiff", "AdamsFieldStepInterpolator", "public static <S extends RealFieldElement<S>> FieldODEStateAndDerivative<S> taylor(final FieldODEStateAndDerivative<S> reference, final S time, final S stepSize, final S[] scaled, final Array2DRowFieldMatrix<S> nordsieck)" ], [ "getInstance", "org.apache.commons.math3.ode.nonstiff", "AdamsNordsieckFieldTransformer", "public static <T extends RealFieldElement<T>> AdamsNordsieckFieldTransformer<T> getInstance(final Field<T> field, final int nSteps)" ], [ "sum", "org.apache.commons.math3.stat", "StatUtils", "public static double sum(final double[] values) throws MathIllegalArgumentException" ], [ "sum", "org.apache.commons.math3.stat", "StatUtils", "public static double sum(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "sumSq", "org.apache.commons.math3.stat", "StatUtils", "public static double sumSq(final double[] values) throws MathIllegalArgumentException" ], [ "sumSq", "org.apache.commons.math3.stat", "StatUtils", "public static double sumSq(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "product", "org.apache.commons.math3.stat", "StatUtils", "public static double product(final double[] values) throws MathIllegalArgumentException" ], [ "product", "org.apache.commons.math3.stat", "StatUtils", "public static double product(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "sumLog", "org.apache.commons.math3.stat", "StatUtils", "public static double sumLog(final double[] values) throws MathIllegalArgumentException" ], [ "sumLog", "org.apache.commons.math3.stat", "StatUtils", "public static double sumLog(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "mean", "org.apache.commons.math3.stat", "StatUtils", "public static double mean(final double[] values) throws MathIllegalArgumentException" ], [ "mean", "org.apache.commons.math3.stat", "StatUtils", "public static double mean(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "geometricMean", "org.apache.commons.math3.stat", "StatUtils", "public static double geometricMean(final double[] values) throws MathIllegalArgumentException" ], [ "geometricMean", "org.apache.commons.math3.stat", "StatUtils", "public static double geometricMean(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "variance", "org.apache.commons.math3.stat", "StatUtils", "public static double variance(final double[] values) throws MathIllegalArgumentException" ], [ "variance", "org.apache.commons.math3.stat", "StatUtils", "public static double variance(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "variance", "org.apache.commons.math3.stat", "StatUtils", "public static double variance(final double[] values, final double mean, final int begin, final int length) throws MathIllegalArgumentException" ], [ "variance", "org.apache.commons.math3.stat", "StatUtils", "public static double variance(final double[] values, final double mean) throws MathIllegalArgumentException" ], [ "populationVariance", "org.apache.commons.math3.stat", "StatUtils", "public static double populationVariance(final double[] values) throws MathIllegalArgumentException" ], [ "populationVariance", "org.apache.commons.math3.stat", "StatUtils", "public static double populationVariance(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "populationVariance", "org.apache.commons.math3.stat", "StatUtils", "public static double populationVariance(final double[] values, final double mean, final int begin, final int length) throws MathIllegalArgumentException" ], [ "populationVariance", "org.apache.commons.math3.stat", "StatUtils", "public static double populationVariance(final double[] values, final double mean) throws MathIllegalArgumentException" ], [ "max", "org.apache.commons.math3.stat", "StatUtils", "public static double max(final double[] values) throws MathIllegalArgumentException" ], [ "max", "org.apache.commons.math3.stat", "StatUtils", "public static double max(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "min", "org.apache.commons.math3.stat", "StatUtils", "public static double min(final double[] values) throws MathIllegalArgumentException" ], [ "min", "org.apache.commons.math3.stat", "StatUtils", "public static double min(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "percentile", "org.apache.commons.math3.stat", "StatUtils", "public static double percentile(final double[] values, final double p) throws MathIllegalArgumentException" ], [ "percentile", "org.apache.commons.math3.stat", "StatUtils", "public static double percentile(final double[] values, final int begin, final int length, final double p) throws MathIllegalArgumentException" ], [ "sumDifference", "org.apache.commons.math3.stat", "StatUtils", "public static double sumDifference(final double[] sample1, final double[] sample2) throws DimensionMismatchException, NoDataException" ], [ "meanDifference", "org.apache.commons.math3.stat", "StatUtils", "public static double meanDifference(final double[] sample1, final double[] sample2) throws DimensionMismatchException, NoDataException" ], [ "varianceDifference", "org.apache.commons.math3.stat", "StatUtils", "public static double varianceDifference(final double[] sample1, final double[] sample2, double meanDifference) throws DimensionMismatchException, NumberIsTooSmallException" ], [ "normalize", "org.apache.commons.math3.stat", "StatUtils", "public static double[] normalize(final double[] sample)" ], [ "mode", "org.apache.commons.math3.stat", "StatUtils", "public static double[] mode(double[] sample) throws MathIllegalArgumentException" ], [ "mode", "org.apache.commons.math3.stat", "StatUtils", "public static double[] mode(double[] sample, final int begin, final int length)" ], [ "getAgrestiCoullInterval", "org.apache.commons.math3.stat.interval", "IntervalUtils", "public static ConfidenceInterval getAgrestiCoullInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)" ], [ "getClopperPearsonInterval", "org.apache.commons.math3.stat.interval", "IntervalUtils", "public static ConfidenceInterval getClopperPearsonInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)" ], [ "getNormalApproximationInterval", "org.apache.commons.math3.stat.interval", "IntervalUtils", "public static ConfidenceInterval getNormalApproximationInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)" ], [ "getWilsonScoreInterval", "org.apache.commons.math3.stat.interval", "IntervalUtils", "public static ConfidenceInterval getWilsonScoreInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)" ], [ "homoscedasticT", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double homoscedasticT(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException" ], [ "homoscedasticT", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double homoscedasticT(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException" ], [ "homoscedasticTTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean homoscedasticTTest(final double[] sample1, final double[] sample2, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException" ], [ "homoscedasticTTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double homoscedasticTTest(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException" ], [ "homoscedasticTTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double homoscedasticTTest(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException" ], [ "pairedT", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double pairedT(final double[] sample1, final double[] sample2) throws NullArgumentException, NoDataException, DimensionMismatchException, NumberIsTooSmallException" ], [ "pairedTTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean pairedTTest(final double[] sample1, final double[] sample2, final double alpha) throws NullArgumentException, NoDataException, DimensionMismatchException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException" ], [ "pairedTTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double pairedTTest(final double[] sample1, final double[] sample2) throws NullArgumentException, NoDataException, DimensionMismatchException, NumberIsTooSmallException, MaxCountExceededException" ], [ "t", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double t(final double mu, final double[] observed) throws NullArgumentException, NumberIsTooSmallException" ], [ "t", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double t(final double mu, final StatisticalSummary sampleStats) throws NullArgumentException, NumberIsTooSmallException" ], [ "t", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double t(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException" ], [ "t", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double t(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean tTest(final double mu, final double[] sample, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double tTest(final double mu, final double[] sample) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean tTest(final double mu, final StatisticalSummary sampleStats, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double tTest(final double mu, final StatisticalSummary sampleStats) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean tTest(final double[] sample1, final double[] sample2, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double tTest(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean tTest(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double tTest(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException" ], [ "chiSquare", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double chiSquare(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException" ], [ "chiSquare", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double chiSquare(final long[][] counts) throws NullArgumentException, NotPositiveException, DimensionMismatchException" ], [ "chiSquareTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean chiSquareTest(final double[] expected, final long[] observed, final double alpha) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, OutOfRangeException, MaxCountExceededException" ], [ "chiSquareTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double chiSquareTest(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, MaxCountExceededException" ], [ "chiSquareTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean chiSquareTest(final long[][] counts, final double alpha) throws NullArgumentException, DimensionMismatchException, NotPositiveException, OutOfRangeException, MaxCountExceededException" ], [ "chiSquareTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double chiSquareTest(final long[][] counts) throws NullArgumentException, DimensionMismatchException, NotPositiveException, MaxCountExceededException" ], [ "chiSquareDataSetsComparison", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double chiSquareDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException" ], [ "chiSquareTestDataSetsComparison", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double chiSquareTestDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException, MaxCountExceededException" ], [ "chiSquareTestDataSetsComparison", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean chiSquareTestDataSetsComparison(final long[] observed1, final long[] observed2, final double alpha) throws DimensionMismatchException, NotPositiveException, ZeroException, OutOfRangeException, MaxCountExceededException" ], [ "oneWayAnovaFValue", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double oneWayAnovaFValue(final Collection<double[]> categoryData) throws NullArgumentException, DimensionMismatchException" ], [ "oneWayAnovaPValue", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double oneWayAnovaPValue(final Collection<double[]> categoryData) throws NullArgumentException, DimensionMismatchException, ConvergenceException, MaxCountExceededException" ], [ "oneWayAnovaTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean oneWayAnovaTest(final Collection<double[]> categoryData, final double alpha) throws NullArgumentException, DimensionMismatchException, OutOfRangeException, ConvergenceException, MaxCountExceededException" ], [ "g", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double g(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException" ], [ "gTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double gTest(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, MaxCountExceededException" ], [ "gTestIntrinsic", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double gTestIntrinsic(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, MaxCountExceededException" ], [ "gTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean gTest(final double[] expected, final long[] observed, final double alpha) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, OutOfRangeException, MaxCountExceededException" ], [ "gDataSetsComparison", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double gDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException" ], [ "rootLogLikelihoodRatio", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double rootLogLikelihoodRatio(final long k11, final long k12, final long k21, final long k22) throws DimensionMismatchException, NotPositiveException, ZeroException" ], [ "gTestDataSetsComparison", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double gTestDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException, MaxCountExceededException" ], [ "gTestDataSetsComparison", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean gTestDataSetsComparison(final long[] observed1, final long[] observed2, final double alpha) throws DimensionMismatchException, NotPositiveException, ZeroException, OutOfRangeException, MaxCountExceededException" ], [ "kolmogorovSmirnovStatistic", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double kolmogorovSmirnovStatistic(RealDistribution dist, double[] data) throws InsufficientDataException, NullArgumentException" ], [ "kolmogorovSmirnovTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double kolmogorovSmirnovTest(RealDistribution dist, double[] data) throws InsufficientDataException, NullArgumentException" ], [ "kolmogorovSmirnovTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double kolmogorovSmirnovTest(RealDistribution dist, double[] data, boolean strict) throws InsufficientDataException, NullArgumentException" ], [ "kolmogorovSmirnovTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean kolmogorovSmirnovTest(RealDistribution dist, double[] data, double alpha) throws InsufficientDataException, NullArgumentException" ], [ "kolmogorovSmirnovStatistic", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double kolmogorovSmirnovStatistic(double[] x, double[] y) throws InsufficientDataException, NullArgumentException" ], [ "kolmogorovSmirnovTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double kolmogorovSmirnovTest(double[] x, double[] y) throws InsufficientDataException, NullArgumentException" ], [ "kolmogorovSmirnovTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double kolmogorovSmirnovTest(double[] x, double[] y, boolean strict) throws InsufficientDataException, NullArgumentException" ], [ "exactP", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double exactP(double d, int m, int n, boolean strict)" ], [ "approximateP", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double approximateP(double d, int n, int m)" ], [ "monteCarloP", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double monteCarloP(double d, int n, int m, boolean strict, int iterations)" ], [ "aggregate", "org.apache.commons.math3.stat.descriptive", "AggregateSummaryStatistics", "public static StatisticalSummaryValues aggregate(Collection<? extends StatisticalSummary> statistics)" ], [ "newMarkers", "org.apache.commons.math3.stat.descriptive.rank", "PSquarePercentile", "public static PSquareMarkers newMarkers(final List<Double> initialFive, final double p)" ], [ "exponentialDecay", "org.apache.commons.math3.ml.neuralnet.sofm", "NeighbourhoodSizeFunctionFactory", "public static NeighbourhoodSizeFunction exponentialDecay(final double initValue, final double valueAtNumCall, final long numCall)" ], [ "quasiSigmoidDecay", "org.apache.commons.math3.ml.neuralnet.sofm", "NeighbourhoodSizeFunctionFactory", "public static NeighbourhoodSizeFunction quasiSigmoidDecay(final double initValue, final double slope, final long numCall)" ], [ "exponentialDecay", "org.apache.commons.math3.ml.neuralnet.sofm", "LearningFactorFunctionFactory", "public static LearningFactorFunction exponentialDecay(final double initValue, final double valueAtNumCall, final long numCall)" ], [ "quasiSigmoidDecay", "org.apache.commons.math3.ml.neuralnet.sofm", "LearningFactorFunctionFactory", "public static LearningFactorFunction quasiSigmoidDecay(final double initValue, final double slope, final long numCall)" ], [ "findBest", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static Neuron findBest(double[] features, Iterable<Neuron> neurons, DistanceMeasure distance)" ], [ "findBestAndSecondBest", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static Pair<Neuron, Neuron> findBestAndSecondBest(double[] features, Iterable<Neuron> neurons, DistanceMeasure distance)" ], [ "sort", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static Neuron[] sort(double[] features, Iterable<Neuron> neurons, DistanceMeasure distance)" ], [ "computeU", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static double[][] computeU(NeuronSquareMesh2D map, DistanceMeasure distance)" ], [ "computeHitHistogram", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static int[][] computeHitHistogram(Iterable<double[]> data, NeuronSquareMesh2D map, DistanceMeasure distance)" ], [ "computeQuantizationError", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static double computeQuantizationError(Iterable<double[]> data, Iterable<Neuron> neurons, DistanceMeasure distance)" ], [ "computeTopographicError", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static double computeTopographicError(Iterable<double[]> data, Network net, DistanceMeasure distance)" ], [ "uniform", "org.apache.commons.math3.ml.neuralnet", "FeatureInitializerFactory", "public static FeatureInitializer uniform(final RandomGenerator rng, final double min, final double max)" ], [ "uniform", "org.apache.commons.math3.ml.neuralnet", "FeatureInitializerFactory", "public static FeatureInitializer uniform(final double min, final double max)" ], [ "function", "org.apache.commons.math3.ml.neuralnet", "FeatureInitializerFactory", "public static FeatureInitializer function(final UnivariateFunction f, final double init, final double inc)" ], [ "randomize", "org.apache.commons.math3.ml.neuralnet", "FeatureInitializerFactory", "public static FeatureInitializer randomize(final RealDistribution random, final FeatureInitializer orig)" ], [ "split", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp[] split(final DfpField field, final String a)" ], [ "split", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp[] split(final Dfp a)" ], [ "splitMult", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp[] splitMult(final Dfp[] a, final Dfp[] b)" ], [ "splitDiv", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp[] splitDiv(final Dfp[] a, final Dfp[] b)" ], [ "splitPow", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp splitPow(final Dfp[] base, int a)" ], [ "pow", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp pow(Dfp base, int a)" ], [ "exp", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp exp(final Dfp a)" ], [ "expInternal", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp expInternal(final Dfp a)" ], [ "log", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp log(Dfp a)" ], [ "logInternal", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp[] logInternal(final Dfp[] a)" ], [ "pow", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp pow(Dfp x, final Dfp y)" ], [ "sinInternal", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp sinInternal(Dfp[] a)" ], [ "cosInternal", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp cosInternal(Dfp[] a)" ], [ "sin", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp sin(final Dfp a)" ], [ "cos", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp cos(Dfp a)" ], [ "tan", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp tan(final Dfp a)" ], [ "atanInternal", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp atanInternal(final Dfp a)" ], [ "atan", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp atan(final Dfp a)" ], [ "asin", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp asin(final Dfp a)" ], [ "acos", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp acos(Dfp a)" ], [ "copysign", "org.apache.commons.math3.dfp", "Dfp", "public static Dfp copysign(final Dfp x, final Dfp y)" ], [ "computeExp", "org.apache.commons.math3.dfp", "DfpField", "public static Dfp computeExp(final Dfp a, final Dfp one)" ], [ "computeLn", "org.apache.commons.math3.dfp", "DfpField", "public static Dfp computeLn(final Dfp a, final Dfp one, final Dfp two)" ], [ "getRandomGenerator", "org.apache.commons.math3.genetics", "GeneticAlgorithm", "public static synchronized RandomGenerator getRandomGenerator()" ], [ "randomPermutation", "org.apache.commons.math3.genetics", "RandomKey", "public static final List<Double> randomPermutation(final int l)" ], [ "identityPermutation", "org.apache.commons.math3.genetics", "RandomKey", "public static final List<Double> identityPermutation(final int l)" ], [ "comparatorPermutation", "org.apache.commons.math3.genetics", "RandomKey", "public static <S> List<Double> comparatorPermutation(final List<S> data, final Comparator<S> comparator)" ], [ "inducedPermutation", "org.apache.commons.math3.genetics", "RandomKey", "public static <S> List<Double> inducedPermutation(final List<S> originalData, final List<S> permutedData) throws DimensionMismatchException, MathIllegalArgumentException" ], [ "randomBinaryRepresentation", "org.apache.commons.math3.genetics", "BinaryChromosome", "public static List<Integer> randomBinaryRepresentation(int length)" ], [ "getAvailableLocales", "org.apache.commons.math3.geometry", "VectorFormat", "public static Locale[] getAvailableLocales()" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3DFormat", "public static Vector3DFormat getInstance()" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3DFormat", "public static Vector3DFormat getInstance(final Locale locale)" ], [ "angle", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T angle(final FieldVector3D<T> v1, final FieldVector3D<T> v2) throws MathArithmeticException" ], [ "angle", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T angle(final FieldVector3D<T> v1, final Vector3D v2) throws MathArithmeticException" ], [ "angle", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T angle(final Vector3D v1, final FieldVector3D<T> v2) throws MathArithmeticException" ], [ "dotProduct", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T dotProduct(final FieldVector3D<T> v1, final FieldVector3D<T> v2)" ], [ "dotProduct", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T dotProduct(final FieldVector3D<T> v1, final Vector3D v2)" ], [ "dotProduct", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T dotProduct(final Vector3D v1, final FieldVector3D<T> v2)" ], [ "crossProduct", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> FieldVector3D<T> crossProduct(final FieldVector3D<T> v1, final FieldVector3D<T> v2)" ], [ "crossProduct", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> FieldVector3D<T> crossProduct(final FieldVector3D<T> v1, final Vector3D v2)" ], [ "crossProduct", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> FieldVector3D<T> crossProduct(final Vector3D v1, final FieldVector3D<T> v2)" ], [ "distance1", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distance1(final FieldVector3D<T> v1, final FieldVector3D<T> v2)" ], [ "distance1", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distance1(final FieldVector3D<T> v1, final Vector3D v2)" ], [ "distance1", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distance1(final Vector3D v1, final FieldVector3D<T> v2)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distance(final FieldVector3D<T> v1, final FieldVector3D<T> v2)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distance(final FieldVector3D<T> v1, final Vector3D v2)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distance(final Vector3D v1, final FieldVector3D<T> v2)" ], [ "distanceInf", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distanceInf(final FieldVector3D<T> v1, final FieldVector3D<T> v2)" ], [ "distanceInf", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distanceInf(final FieldVector3D<T> v1, final Vector3D v2)" ], [ "distanceInf", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distanceInf(final Vector3D v1, final FieldVector3D<T> v2)" ], [ "distanceSq", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distanceSq(final FieldVector3D<T> v1, final FieldVector3D<T> v2)" ], [ "distanceSq", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distanceSq(final FieldVector3D<T> v1, final Vector3D v2)" ], [ "distanceSq", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distanceSq(final Vector3D v1, final FieldVector3D<T> v2)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.threed", "Rotation", "public static double distance(Rotation r1, Rotation r2)" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.threed", "Euclidean3D", "public static Euclidean3D getInstance()" ], [ "applyTo", "org.apache.commons.math3.geometry.euclidean.threed", "FieldRotation", "public static <T extends RealFieldElement<T>> FieldVector3D<T> applyTo(final Rotation r, final FieldVector3D<T> u)" ], [ "applyInverseTo", "org.apache.commons.math3.geometry.euclidean.threed", "FieldRotation", "public static <T extends RealFieldElement<T>> FieldVector3D<T> applyInverseTo(final Rotation r, final FieldVector3D<T> u)" ], [ "applyTo", "org.apache.commons.math3.geometry.euclidean.threed", "FieldRotation", "public static <T extends RealFieldElement<T>> FieldRotation<T> applyTo(final Rotation r1, final FieldRotation<T> rInner)" ], [ "applyInverseTo", "org.apache.commons.math3.geometry.euclidean.threed", "FieldRotation", "public static <T extends RealFieldElement<T>> FieldRotation<T> applyInverseTo(final Rotation rOuter, final FieldRotation<T> rInner)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.threed", "FieldRotation", "public static <T extends RealFieldElement<T>> T distance(final FieldRotation<T> r1, final FieldRotation<T> r2)" ], [ "angle", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static double angle(Vector3D v1, Vector3D v2) throws MathArithmeticException" ], [ "dotProduct", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static double dotProduct(Vector3D v1, Vector3D v2)" ], [ "crossProduct", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2)" ], [ "distance1", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static double distance1(Vector3D v1, Vector3D v2)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static double distance(Vector3D v1, Vector3D v2)" ], [ "distanceInf", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static double distanceInf(Vector3D v1, Vector3D v2)" ], [ "distanceSq", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static double distanceSq(Vector3D v1, Vector3D v2)" ], [ "intersection", "org.apache.commons.math3.geometry.euclidean.threed", "Plane", "public static Vector3D intersection(final Plane plane1, final Plane plane2, final Plane plane3)" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.oned", "Euclidean1D", "public static Euclidean1D getInstance()" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1DFormat", "public static Vector1DFormat getInstance()" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1DFormat", "public static Vector1DFormat getInstance(final Locale locale)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static double distance(Vector1D p1, Vector1D p2)" ], [ "distanceInf", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static double distanceInf(Vector1D p1, Vector1D p2)" ], [ "distanceSq", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static double distanceSq(Vector1D p1, Vector1D p2)" ], [ "reducePoints", "org.apache.commons.math3.geometry.euclidean.twod.hull", "AklToussaintHeuristic", "public static Collection<Vector2D> reducePoints(final Collection<Vector2D> points)" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2DFormat", "public static Vector2DFormat getInstance()" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2DFormat", "public static Vector2DFormat getInstance(final Locale locale)" ], [ "angle", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static double angle(Vector2D v1, Vector2D v2) throws MathArithmeticException" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static double distance(Vector2D p1, Vector2D p2)" ], [ "distanceInf", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static double distanceInf(Vector2D p1, Vector2D p2)" ], [ "distanceSq", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static double distanceSq(Vector2D p1, Vector2D p2)" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.twod", "Euclidean2D", "public static Euclidean2D getInstance()" ], [ "getTransform", "org.apache.commons.math3.geometry.euclidean.twod", "Line", "public static Transform<Euclidean2D, Euclidean1D> getTransform(final AffineTransform transform) throws MathIllegalArgumentException" ], [ "getTransform", "org.apache.commons.math3.geometry.euclidean.twod", "Line", "public static Transform<Euclidean2D, Euclidean1D> getTransform(final double cXX, final double cYX, final double cXY, final double cYY, final double cX1, final double cY1) throws MathIllegalArgumentException" ], [ "distance", "org.apache.commons.math3.geometry.spherical.oned", "S1Point", "public static double distance(S1Point p1, S1Point p2)" ], [ "getInstance", "org.apache.commons.math3.geometry.spherical.oned", "Sphere1D", "public static Sphere1D getInstance()" ], [ "getInstance", "org.apache.commons.math3.geometry.spherical.twod", "Sphere2D", "public static Sphere2D getInstance()" ], [ "getTransform", "org.apache.commons.math3.geometry.spherical.twod", "Circle", "public static Transform<Sphere2D, Sphere1D> getTransform(final Rotation rotation)" ], [ "distance", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static double distance(S2Point p1, S2Point p2)" ], [ "createAdaptor", "org.apache.commons.math3.random", "RandomAdaptor", "public static Random createAdaptor(RandomGenerator randomGenerator)" ], [ "createRandomGenerator", "org.apache.commons.math3.random", "RandomGeneratorFactory", "public static RandomGenerator createRandomGenerator(final Random rng)" ], [ "convertToLong", "org.apache.commons.math3.random", "RandomGeneratorFactory", "public static long convertToLong(int[] seed)" ], [ "getAvailableLocales", "org.apache.commons.math3.fraction", "BigFractionFormat", "public static Locale[] getAvailableLocales()" ], [ "formatBigFraction", "org.apache.commons.math3.fraction", "BigFractionFormat", "public static String formatBigFraction(final BigFraction f)" ], [ "getImproperInstance", "org.apache.commons.math3.fraction", "BigFractionFormat", "public static BigFractionFormat getImproperInstance()" ], [ "getImproperInstance", "org.apache.commons.math3.fraction", "BigFractionFormat", "public static BigFractionFormat getImproperInstance(final Locale locale)" ], [ "getProperInstance", "org.apache.commons.math3.fraction", "BigFractionFormat", "public static BigFractionFormat getProperInstance()" ], [ "getProperInstance", "org.apache.commons.math3.fraction", "BigFractionFormat", "public static BigFractionFormat getProperInstance(final Locale locale)" ], [ "getReducedFraction", "org.apache.commons.math3.fraction", "Fraction", "public static Fraction getReducedFraction(int numerator, int denominator)" ], [ "getReducedFraction", "org.apache.commons.math3.fraction", "BigFraction", "public static BigFraction getReducedFraction(final int numerator, final int denominator)" ], [ "getDefaultNumberFormat", "org.apache.commons.math3.fraction", "AbstractFormat", "protected static NumberFormat getDefaultNumberFormat()" ], [ "getDefaultNumberFormat", "org.apache.commons.math3.fraction", "AbstractFormat", "protected static NumberFormat getDefaultNumberFormat(final Locale locale)" ], [ "parseNextCharacter", "org.apache.commons.math3.fraction", "AbstractFormat", "protected static char parseNextCharacter(final String source, final ParsePosition pos)" ], [ "getAvailableLocales", "org.apache.commons.math3.fraction", "FractionFormat", "public static Locale[] getAvailableLocales()" ], [ "formatFraction", "org.apache.commons.math3.fraction", "FractionFormat", "public static String formatFraction(Fraction f)" ], [ "getImproperInstance", "org.apache.commons.math3.fraction", "FractionFormat", "public static FractionFormat getImproperInstance()" ], [ "getImproperInstance", "org.apache.commons.math3.fraction", "FractionFormat", "public static FractionFormat getImproperInstance(final Locale locale)" ], [ "getProperInstance", "org.apache.commons.math3.fraction", "FractionFormat", "public static FractionFormat getProperInstance()" ], [ "getProperInstance", "org.apache.commons.math3.fraction", "FractionFormat", "public static FractionFormat getProperInstance(final Locale locale)" ], [ "getDefaultNumberFormat", "org.apache.commons.math3.fraction", "FractionFormat", "protected static NumberFormat getDefaultNumberFormat()" ], [ "getInstance", "org.apache.commons.math3.fraction", "FractionField", "public static FractionField getInstance()" ], [ "getInstance", "org.apache.commons.math3.fraction", "BigFractionField", "public static BigFractionField getInstance()" ], [ "flatten", "org.apache.commons.math3.exception.util", "ArgUtils", "public static Object[] flatten(Object[] array)" ], [ "scaleArray", "org.apache.commons.math3.transform", "TransformUtils", "public static double[] scaleArray(double[] f, double d)" ], [ "scaleArray", "org.apache.commons.math3.transform", "TransformUtils", "public static Complex[] scaleArray(Complex[] f, double d)" ], [ "createRealImaginaryArray", "org.apache.commons.math3.transform", "TransformUtils", "public static double[][] createRealImaginaryArray(final Complex[] dataC)" ], [ "createComplexArray", "org.apache.commons.math3.transform", "TransformUtils", "public static Complex[] createComplexArray(final double[][] dataRI) throws DimensionMismatchException" ], [ "exactLog2", "org.apache.commons.math3.transform", "TransformUtils", "public static int exactLog2(final int n) throws MathIllegalArgumentException" ] ],
  "tokensProjectClassesNonPrivateStaticAttributes" : [ [ "PRIMES", "org.apache.commons.math3.primes", "SmallPrimes", "public static final int[] PRIMES = { 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171, 1181, 1187, 1193, 1201, 1213, 1217, 1223, 1229, 1231, 1237, 1249, 1259, 1277, 1279, 1283, 1289, 1291, 1297, 1301, 1303, 1307, 1319, 1321, 1327, 1361, 1367, 1373, 1381, 1399, 1409, 1423, 1427, 1429, 1433, 1439, 1447, 1451, 1453, 1459, 1471, 1481, 1483, 1487, 1489, 1493, 1499, 1511, 1523, 1531, 1543, 1549, 1553, 1559, 1567, 1571, 1579, 1583, 1597, 1601, 1607, 1609, 1613, 1619, 1621, 1627, 1637, 1657, 1663, 1667, 1669, 1693, 1697, 1699, 1709, 1721, 1723, 1733, 1741, 1747, 1753, 1759, 1777, 1783, 1787, 1789, 1801, 1811, 1823, 1831, 1847, 1861, 1867, 1871, 1873, 1877, 1879, 1889, 1901, 1907, 1913, 1931, 1933, 1949, 1951, 1973, 1979, 1987, 1993, 1997, 1999, 2003, 2011, 2017, 2027, 2029, 2039, 2053, 2063, 2069, 2081, 2083, 2087, 2089, 2099, 2111, 2113, 2129, 2131, 2137, 2141, 2143, 2153, 2161, 2179, 2203, 2207, 2213, 2221, 2237, 2239, 2243, 2251, 2267, 2269, 2273, 2281, 2287, 2293, 2297, 2309, 2311, 2333, 2339, 2341, 2347, 2351, 2357, 2371, 2377, 2381, 2383, 2389, 2393, 2399, 2411, 2417, 2423, 2437, 2441, 2447, 2459, 2467, 2473, 2477, 2503, 2521, 2531, 2539, 2543, 2549, 2551, 2557, 2579, 2591, 2593, 2609, 2617, 2621, 2633, 2647, 2657, 2659, 2663, 2671, 2677, 2683, 2687, 2689, 2693, 2699, 2707, 2711, 2713, 2719, 2729, 2731, 2741, 2749, 2753, 2767, 2777, 2789, 2791, 2797, 2801, 2803, 2819, 2833, 2837, 2843, 2851, 2857, 2861, 2879, 2887, 2897, 2903, 2909, 2917, 2927, 2939, 2953, 2957, 2963, 2969, 2971, 2999, 3001, 3011, 3019, 3023, 3037, 3041, 3049, 3061, 3067, 3079, 3083, 3089, 3109, 3119, 3121, 3137, 3163, 3167, 3169, 3181, 3187, 3191, 3203, 3209, 3217, 3221, 3229, 3251, 3253, 3257, 3259, 3271, 3299, 3301, 3307, 3313, 3319, 3323, 3329, 3331, 3343, 3347, 3359, 3361, 3371, 3373, 3389, 3391, 3407, 3413, 3433, 3449, 3457, 3461, 3463, 3467, 3469, 3491, 3499, 3511, 3517, 3527, 3529, 3533, 3539, 3541, 3547, 3557, 3559, 3571, 3581, 3583, 3593, 3607, 3613, 3617, 3623, 3631, 3637, 3643, 3659, 3671 };" ], [ "PRIMES_LAST", "org.apache.commons.math3.primes", "SmallPrimes", "public static final int PRIMES_LAST = PRIMES[PRIMES.length - 1];" ], [ "MIDPOINT_MAX_ITERATIONS_COUNT", "org.apache.commons.math3.analysis.integration", "MidPointIntegrator", "public static final int MIDPOINT_MAX_ITERATIONS_COUNT = 64;" ], [ "ROMBERG_MAX_ITERATIONS_COUNT", "org.apache.commons.math3.analysis.integration", "RombergIntegrator", "public static final int ROMBERG_MAX_ITERATIONS_COUNT = 32;" ], [ "SIMPSON_MAX_ITERATIONS_COUNT", "org.apache.commons.math3.analysis.integration", "SimpsonIntegrator", "public static final int SIMPSON_MAX_ITERATIONS_COUNT = 64;" ], [ "DEFAULT_ABSOLUTE_ACCURACY", "org.apache.commons.math3.analysis.integration", "BaseAbstractUnivariateIntegrator", "public static final double DEFAULT_ABSOLUTE_ACCURACY = 1.0e-15;" ], [ "DEFAULT_RELATIVE_ACCURACY", "org.apache.commons.math3.analysis.integration", "BaseAbstractUnivariateIntegrator", "public static final double DEFAULT_RELATIVE_ACCURACY = 1.0e-6;" ], [ "DEFAULT_MIN_ITERATIONS_COUNT", "org.apache.commons.math3.analysis.integration", "BaseAbstractUnivariateIntegrator", "public static final int DEFAULT_MIN_ITERATIONS_COUNT = 3;" ], [ "DEFAULT_MAX_ITERATIONS_COUNT", "org.apache.commons.math3.analysis.integration", "BaseAbstractUnivariateIntegrator", "public static final int DEFAULT_MAX_ITERATIONS_COUNT = Integer.MAX_VALUE;" ], [ "TRAPEZOID_MAX_ITERATIONS_COUNT", "org.apache.commons.math3.analysis.integration", "TrapezoidIntegrator", "public static final int TRAPEZOID_MAX_ITERATIONS_COUNT = 64;" ], [ "DEFAULT_ABSOLUTE_ACCURACY", "org.apache.commons.math3.analysis.solvers", "BaseSecantSolver", "protected static final double DEFAULT_ABSOLUTE_ACCURACY = 1e-6;" ], [ "DEFAULT_ABSOLUTE_ACCURACY", "org.apache.commons.math3.analysis.solvers", "SecantSolver", "protected static final double DEFAULT_ABSOLUTE_ACCURACY = 1e-6;" ], [ "DEFAULT_BANDWIDTH", "org.apache.commons.math3.analysis.interpolation", "LoessInterpolator", "public static final double DEFAULT_BANDWIDTH = 0.3;" ], [ "DEFAULT_ROBUSTNESS_ITERS", "org.apache.commons.math3.analysis.interpolation", "LoessInterpolator", "public static final int DEFAULT_ROBUSTNESS_ITERS = 2;" ], [ "DEFAULT_ACCURACY", "org.apache.commons.math3.analysis.interpolation", "LoessInterpolator", "public static final double DEFAULT_ACCURACY = 1e-12;" ], [ "serialVersionUID", "org.apache.commons.math3.analysis.interpolation", "NevilleInterpolator", "static final long serialVersionUID = 3003707660147873733L;" ], [ "DEFAULT_EXTEND", "org.apache.commons.math3.analysis.interpolation", "UnivariatePeriodicInterpolator", "public static final int DEFAULT_EXTEND = 5;" ], [ "DEFAULT_MICROSPHERE_ELEMENTS", "org.apache.commons.math3.analysis.interpolation", "MicrosphereInterpolator", "public static final int DEFAULT_MICROSPHERE_ELEMENTS = 2000;" ], [ "DEFAULT_BRIGHTNESS_EXPONENT", "org.apache.commons.math3.analysis.interpolation", "MicrosphereInterpolator", "public static final int DEFAULT_BRIGHTNESS_EXPONENT = 2;" ], [ "EPSILON", "org.apache.commons.math3.util", "Precision", "public static final double EPSILON;" ], [ "SAFE_MIN", "org.apache.commons.math3.util", "Precision", "public static final double SAFE_MIN;" ], [ "FREE", "org.apache.commons.math3.util", "OpenIntToDoubleHashMap", "protected static final byte FREE = 0;" ], [ "FULL", "org.apache.commons.math3.util", "OpenIntToDoubleHashMap", "protected static final byte FULL = 1;" ], [ "REMOVED", "org.apache.commons.math3.util", "OpenIntToDoubleHashMap", "protected static final byte REMOVED = 2;" ], [ "FREE", "org.apache.commons.math3.util", "OpenIntToFieldHashMap", "protected static final byte FREE = 0;" ], [ "FULL", "org.apache.commons.math3.util", "OpenIntToFieldHashMap", "protected static final byte FULL = 1;" ], [ "REMOVED", "org.apache.commons.math3.util", "OpenIntToFieldHashMap", "protected static final byte REMOVED = 2;" ], [ "PI", "org.apache.commons.math3.util", "FastMath", "public static final double PI = 105414357.0 / 33554432.0 + 1.984187159361080883e-9;" ], [ "E", "org.apache.commons.math3.util", "FastMath", "public static final double E = 2850325.0 / 1048576.0 + 8.254840070411028747e-8;" ], [ "EXP_INT_TABLE_MAX_INDEX", "org.apache.commons.math3.util", "FastMath", "static final int EXP_INT_TABLE_MAX_INDEX = 750;" ], [ "EXP_INT_TABLE_LEN", "org.apache.commons.math3.util", "FastMath", "static final int EXP_INT_TABLE_LEN = EXP_INT_TABLE_MAX_INDEX * 2;" ], [ "LN_MANT_LEN", "org.apache.commons.math3.util", "FastMath", "static final int LN_MANT_LEN = 1024;" ], [ "EXP_FRAC_TABLE_LEN", "org.apache.commons.math3.util", "FastMath", "static final int EXP_FRAC_TABLE_LEN = 1025;" ], [ "NAN", "org.apache.commons.math3.util", "FastMath", "public static final Split NAN = new Split(Double.NaN, 0);" ], [ "POSITIVE_INFINITY", "org.apache.commons.math3.util", "FastMath", "public static final Split POSITIVE_INFINITY = new Split(Double.POSITIVE_INFINITY, 0);" ], [ "NEGATIVE_INFINITY", "org.apache.commons.math3.util", "FastMath", "public static final Split NEGATIVE_INFINITY = new Split(Double.NEGATIVE_INFINITY, 0);" ], [ "NAN", "org.apache.commons.math3.util", "Split", "public static final Split NAN = new Split(Double.NaN, 0);" ], [ "POSITIVE_INFINITY", "org.apache.commons.math3.util", "Split", "public static final Split POSITIVE_INFINITY = new Split(Double.POSITIVE_INFINITY, 0);" ], [ "NEGATIVE_INFINITY", "org.apache.commons.math3.util", "Split", "public static final Split NEGATIVE_INFINITY = new Split(Double.NEGATIVE_INFINITY, 0);" ], [ "ADDITIVE_MODE", "org.apache.commons.math3.util", "ResizableDoubleArray", "public static final int ADDITIVE_MODE = 1;" ], [ "MULTIPLICATIVE_MODE", "org.apache.commons.math3.util", "ResizableDoubleArray", "public static final int MULTIPLICATIVE_MODE = 0;" ], [ "TWO_PI", "org.apache.commons.math3.util", "MathUtils", "public static final double TWO_PI = 2 * FastMath.PI;" ], [ "PI_SQUARED", "org.apache.commons.math3.util", "MathUtils", "public static final double PI_SQUARED = FastMath.PI * FastMath.PI;" ], [ "FACTORIALS", "org.apache.commons.math3.util", "CombinatoricsUtils", "static final long[] FACTORIALS = new long[] { 1l, 1l, 2l, 6l, 24l, 120l, 720l, 5040l, 40320l, 362880l, 3628800l, 39916800l, 479001600l, 6227020800l, 87178291200l, 1307674368000l, 20922789888000l, 355687428096000l, 6402373705728000l, 121645100408832000l, 2432902008176640000l };" ], [ "STIRLING_S2", "org.apache.commons.math3.util", "CombinatoricsUtils", "static final AtomicReference<long[][]> STIRLING_S2 = new AtomicReference<long[][]>(null);" ], [ "ZERO", "org.apache.commons.math3.util", "Decimal64", "public static final Decimal64 ZERO;" ], [ "ONE", "org.apache.commons.math3.util", "Decimal64", "public static final Decimal64 ONE;" ], [ "NEGATIVE_INFINITY", "org.apache.commons.math3.util", "Decimal64", "public static final Decimal64 NEGATIVE_INFINITY;" ], [ "POSITIVE_INFINITY", "org.apache.commons.math3.util", "Decimal64", "public static final Decimal64 POSITIVE_INFINITY;" ], [ "NAN", "org.apache.commons.math3.util", "Decimal64", "public static final Decimal64 NAN;" ], [ "ZERO", "org.apache.commons.math3.util", "BigReal", "public static final BigReal ZERO = new BigReal(BigDecimal.ZERO);" ], [ "ONE", "org.apache.commons.math3.util", "BigReal", "public static final BigReal ONE = new BigReal(BigDecimal.ONE);" ], [ "IDENTITY", "org.apache.commons.math3.complex", "Quaternion", "public static final Quaternion IDENTITY = new Quaternion(1, 0, 0, 0);" ], [ "ZERO", "org.apache.commons.math3.complex", "Quaternion", "public static final Quaternion ZERO = new Quaternion(0, 0, 0, 0);" ], [ "I", "org.apache.commons.math3.complex", "Quaternion", "public static final Quaternion I = new Quaternion(0, 1, 0, 0);" ], [ "J", "org.apache.commons.math3.complex", "Quaternion", "public static final Quaternion J = new Quaternion(0, 0, 1, 0);" ], [ "K", "org.apache.commons.math3.complex", "Quaternion", "public static final Quaternion K = new Quaternion(0, 0, 0, 1);" ], [ "I", "org.apache.commons.math3.complex", "Complex", "public static final Complex I = new Complex(0.0, 1.0);" ], [ "NaN", "org.apache.commons.math3.complex", "Complex", "public static final Complex NaN = new Complex(Double.NaN, Double.NaN);" ], [ "INF", "org.apache.commons.math3.complex", "Complex", "public static final Complex INF = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);" ], [ "ONE", "org.apache.commons.math3.complex", "Complex", "public static final Complex ONE = new Complex(1.0, 0.0);" ], [ "ZERO", "org.apache.commons.math3.complex", "Complex", "public static final Complex ZERO = new Complex(0.0, 0.0);" ], [ "MINIMUM_PROBLEM_DIMENSION", "org.apache.commons.math3.optimization.direct", "BOBYQAOptimizer", "public static final int MINIMUM_PROBLEM_DIMENSION = 2;" ], [ "DEFAULT_INITIAL_RADIUS", "org.apache.commons.math3.optimization.direct", "BOBYQAOptimizer", "public static final double DEFAULT_INITIAL_RADIUS = 10.0;" ], [ "DEFAULT_STOPPING_RADIUS", "org.apache.commons.math3.optimization.direct", "BOBYQAOptimizer", "public static final double DEFAULT_STOPPING_RADIUS = 1E-8;" ], [ "DEFAULT_CHECKFEASABLECOUNT", "org.apache.commons.math3.optimization.direct", "CMAESOptimizer", "public static final int DEFAULT_CHECKFEASABLECOUNT = 0;" ], [ "DEFAULT_STOPFITNESS", "org.apache.commons.math3.optimization.direct", "CMAESOptimizer", "public static final double DEFAULT_STOPFITNESS = 0;" ], [ "DEFAULT_ISACTIVECMA", "org.apache.commons.math3.optimization.direct", "CMAESOptimizer", "public static final boolean DEFAULT_ISACTIVECMA = true;" ], [ "DEFAULT_MAXITERATIONS", "org.apache.commons.math3.optimization.direct", "CMAESOptimizer", "public static final int DEFAULT_MAXITERATIONS = 30000;" ], [ "DEFAULT_DIAGONALONLY", "org.apache.commons.math3.optimization.direct", "CMAESOptimizer", "public static final int DEFAULT_DIAGONALONLY = 0;" ], [ "DEFAULT_RANDOMGENERATOR", "org.apache.commons.math3.optimization.direct", "CMAESOptimizer", "public static final RandomGenerator DEFAULT_RANDOMGENERATOR = new MersenneTwister();" ], [ "DEFAULT_MAX_ITERATIONS", "org.apache.commons.math3.optimization.linear", "AbstractLinearOptimizer", "public static final int DEFAULT_MAX_ITERATIONS = 100;" ], [ "DEFAULT_FORMAT", "org.apache.commons.math3.linear", "MatrixUtils", "public static final RealMatrixFormat DEFAULT_FORMAT = RealMatrixFormat.getInstance();" ], [ "OCTAVE_FORMAT", "org.apache.commons.math3.linear", "MatrixUtils", "public static final RealMatrixFormat OCTAVE_FORMAT = new RealMatrixFormat(\"[\", \"]\", \"\", \"\", \"; \", \", \");" ], [ "DEFAULT_ZERO_TOLERANCE", "org.apache.commons.math3.linear", "OpenMapRealVector", "public static final double DEFAULT_ZERO_TOLERANCE = 1.0e-12;" ], [ "BLOCK_SIZE", "org.apache.commons.math3.linear", "BlockFieldMatrix", "public static final int BLOCK_SIZE = 36;" ], [ "OPERATOR", "org.apache.commons.math3.linear", "ConjugateGradient", "public static final String OPERATOR = \"operator\";" ], [ "VECTOR", "org.apache.commons.math3.linear", "ConjugateGradient", "public static final String VECTOR = \"vector\";" ], [ "DEFAULT_RELATIVE_SYMMETRY_THRESHOLD", "org.apache.commons.math3.linear", "CholeskyDecomposition", "public static final double DEFAULT_RELATIVE_SYMMETRY_THRESHOLD = 1.0e-15;" ], [ "DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD", "org.apache.commons.math3.linear", "CholeskyDecomposition", "public static final double DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD = 1.0e-10;" ], [ "BLOCK_SIZE", "org.apache.commons.math3.linear", "BlockRealMatrix", "public static final int BLOCK_SIZE = 52;" ], [ "CBRT_MACH_PREC", "org.apache.commons.math3.linear", "SymmLQ", "static final double CBRT_MACH_PREC;" ], [ "MACH_PREC", "org.apache.commons.math3.linear", "SymmLQ", "static final double MACH_PREC;" ], [ "CBRT_MACH_PREC", "org.apache.commons.math3.linear", "State", "static final double CBRT_MACH_PREC;" ], [ "MACH_PREC", "org.apache.commons.math3.linear", "State", "static final double MACH_PREC;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "CauchyDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "SOLVER_DEFAULT_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "AbstractRealDistribution", "public static final double SOLVER_DEFAULT_ABSOLUTE_ACCURACY = 1e-6;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "TDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "ChiSquaredDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "BetaDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "NormalDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "UniformRealDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "WeibullDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "NakagamiDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "ExponentialDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "LogNormalDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "ParetoDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "FDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_MAX_ITERATIONS", "org.apache.commons.math3.distribution", "PoissonDistribution", "public static final int DEFAULT_MAX_ITERATIONS = 10000000;" ], [ "DEFAULT_EPSILON", "org.apache.commons.math3.distribution", "PoissonDistribution", "public static final double DEFAULT_EPSILON = 1e-12;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "GammaDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_ULPS", "org.apache.commons.math3.optim.linear", "SimplexSolver", "static final int DEFAULT_ULPS = 10;" ], [ "DEFAULT_CUT_OFF", "org.apache.commons.math3.optim.linear", "SimplexSolver", "static final double DEFAULT_CUT_OFF = 1e-10;" ], [ "MINIMUM_PROBLEM_DIMENSION", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv", "BOBYQAOptimizer", "public static final int MINIMUM_PROBLEM_DIMENSION = 2;" ], [ "DEFAULT_INITIAL_RADIUS", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv", "BOBYQAOptimizer", "public static final double DEFAULT_INITIAL_RADIUS = 10.0;" ], [ "DEFAULT_STOPPING_RADIUS", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv", "BOBYQAOptimizer", "public static final double DEFAULT_STOPPING_RADIUS = 1E-8;" ], [ "GAMMA", "org.apache.commons.math3.special", "Gamma", "public static final double GAMMA = 0.577215664901532860606512090082;" ], [ "LANCZOS_G", "org.apache.commons.math3.special", "Gamma", "public static final double LANCZOS_G = 607.0 / 128.0;" ], [ "DEFAULT_NAN_STRATEGY", "org.apache.commons.math3.stat.ranking", "NaturalRanking", "public static final NaNStrategy DEFAULT_NAN_STRATEGY = NaNStrategy.FAILED;" ], [ "DEFAULT_TIES_STRATEGY", "org.apache.commons.math3.stat.ranking", "NaturalRanking", "public static final TiesStrategy DEFAULT_TIES_STRATEGY = TiesStrategy.AVERAGE;" ], [ "MAXIMUM_PARTIAL_SUM_COUNT", "org.apache.commons.math3.stat.inference", "KolmogorovSmirnovTest", "protected static final int MAXIMUM_PARTIAL_SUM_COUNT = 100000;" ], [ "KS_SUM_CAUCHY_CRITERION", "org.apache.commons.math3.stat.inference", "KolmogorovSmirnovTest", "protected static final double KS_SUM_CAUCHY_CRITERION = 1E-20;" ], [ "PG_SUM_RELATIVE_ERROR", "org.apache.commons.math3.stat.inference", "KolmogorovSmirnovTest", "protected static final double PG_SUM_RELATIVE_ERROR = 1.0e-10;" ], [ "SMALL_SAMPLE_PRODUCT", "org.apache.commons.math3.stat.inference", "KolmogorovSmirnovTest", "protected static final int SMALL_SAMPLE_PRODUCT = 200;" ], [ "LARGE_SAMPLE_PRODUCT", "org.apache.commons.math3.stat.inference", "KolmogorovSmirnovTest", "protected static final int LARGE_SAMPLE_PRODUCT = 10000;" ], [ "MONTE_CARLO_ITERATIONS", "org.apache.commons.math3.stat.inference", "KolmogorovSmirnovTest", "protected static final int MONTE_CARLO_ITERATIONS = 1000000;" ], [ "INFINITE_WINDOW", "org.apache.commons.math3.stat.descriptive", "DescriptiveStatistics", "public static final int INFINITE_WINDOW = -1;" ], [ "UPSIDE_VARIANCE", "org.apache.commons.math3.stat.descriptive.moment", "SemiVariance", "public static final Direction UPSIDE_VARIANCE = Direction.UPSIDE;" ], [ "DOWNSIDE_VARIANCE", "org.apache.commons.math3.stat.descriptive.moment", "SemiVariance", "public static final Direction DOWNSIDE_VARIANCE = Direction.DOWNSIDE;" ], [ "COMPARATOR", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "static final Comparator<PairNeuronDouble> COMPARATOR = new Comparator<PairNeuronDouble>() {\n\n    /**\n     * {@inheritDoc}\n     */\n    public int compare(PairNeuronDouble o1, PairNeuronDouble o2) {\n        return Double.compare(o1.value, o2.value);\n    }\n};" ], [ "COMPARATOR", "org.apache.commons.math3.ml.neuralnet", "PairNeuronDouble", "static final Comparator<PairNeuronDouble> COMPARATOR = new Comparator<PairNeuronDouble>() {\n\n    /**\n     * {@inheritDoc}\n     */\n    public int compare(PairNeuronDouble o1, PairNeuronDouble o2) {\n        return Double.compare(o1.value, o2.value);\n    }\n};" ], [ "RADIX", "org.apache.commons.math3.dfp", "Dfp", "public static final int RADIX = 10000;" ], [ "MIN_EXP", "org.apache.commons.math3.dfp", "Dfp", "public static final int MIN_EXP = -32767;" ], [ "MAX_EXP", "org.apache.commons.math3.dfp", "Dfp", "public static final int MAX_EXP = 32768;" ], [ "ERR_SCALE", "org.apache.commons.math3.dfp", "Dfp", "public static final int ERR_SCALE = 32760;" ], [ "FINITE", "org.apache.commons.math3.dfp", "Dfp", "public static final byte FINITE = 0;" ], [ "INFINITE", "org.apache.commons.math3.dfp", "Dfp", "public static final byte INFINITE = 1;" ], [ "SNAN", "org.apache.commons.math3.dfp", "Dfp", "public static final byte SNAN = 2;" ], [ "QNAN", "org.apache.commons.math3.dfp", "Dfp", "public static final byte QNAN = 3;" ], [ "FLAG_INVALID", "org.apache.commons.math3.dfp", "DfpField", "public static final int FLAG_INVALID = 1;" ], [ "FLAG_DIV_ZERO", "org.apache.commons.math3.dfp", "DfpField", "public static final int FLAG_DIV_ZERO = 2;" ], [ "FLAG_OVERFLOW", "org.apache.commons.math3.dfp", "DfpField", "public static final int FLAG_OVERFLOW = 4;" ], [ "FLAG_UNDERFLOW", "org.apache.commons.math3.dfp", "DfpField", "public static final int FLAG_UNDERFLOW = 8;" ], [ "FLAG_INEXACT", "org.apache.commons.math3.dfp", "DfpField", "public static final int FLAG_INEXACT = 16;" ], [ "DEFAULT_PREFIX", "org.apache.commons.math3.geometry", "VectorFormat", "public static final String DEFAULT_PREFIX = \"{\";" ], [ "DEFAULT_SUFFIX", "org.apache.commons.math3.geometry", "VectorFormat", "public static final String DEFAULT_SUFFIX = \"}\";" ], [ "DEFAULT_SEPARATOR", "org.apache.commons.math3.geometry", "VectorFormat", "public static final String DEFAULT_SEPARATOR = \"; \";" ], [ "XYZ", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder XYZ = new RotationOrder(\"XYZ\", Vector3D.PLUS_I, Vector3D.PLUS_J, Vector3D.PLUS_K);" ], [ "XZY", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder XZY = new RotationOrder(\"XZY\", Vector3D.PLUS_I, Vector3D.PLUS_K, Vector3D.PLUS_J);" ], [ "YXZ", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder YXZ = new RotationOrder(\"YXZ\", Vector3D.PLUS_J, Vector3D.PLUS_I, Vector3D.PLUS_K);" ], [ "YZX", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder YZX = new RotationOrder(\"YZX\", Vector3D.PLUS_J, Vector3D.PLUS_K, Vector3D.PLUS_I);" ], [ "ZXY", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder ZXY = new RotationOrder(\"ZXY\", Vector3D.PLUS_K, Vector3D.PLUS_I, Vector3D.PLUS_J);" ], [ "ZYX", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder ZYX = new RotationOrder(\"ZYX\", Vector3D.PLUS_K, Vector3D.PLUS_J, Vector3D.PLUS_I);" ], [ "XYX", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder XYX = new RotationOrder(\"XYX\", Vector3D.PLUS_I, Vector3D.PLUS_J, Vector3D.PLUS_I);" ], [ "XZX", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder XZX = new RotationOrder(\"XZX\", Vector3D.PLUS_I, Vector3D.PLUS_K, Vector3D.PLUS_I);" ], [ "YXY", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder YXY = new RotationOrder(\"YXY\", Vector3D.PLUS_J, Vector3D.PLUS_I, Vector3D.PLUS_J);" ], [ "YZY", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder YZY = new RotationOrder(\"YZY\", Vector3D.PLUS_J, Vector3D.PLUS_K, Vector3D.PLUS_J);" ], [ "ZXZ", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder ZXZ = new RotationOrder(\"ZXZ\", Vector3D.PLUS_K, Vector3D.PLUS_I, Vector3D.PLUS_K);" ], [ "ZYZ", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder ZYZ = new RotationOrder(\"ZYZ\", Vector3D.PLUS_K, Vector3D.PLUS_J, Vector3D.PLUS_K);" ], [ "IDENTITY", "org.apache.commons.math3.geometry.euclidean.threed", "Rotation", "public static final Rotation IDENTITY = new Rotation(1.0, 0.0, 0.0, 0.0, false);" ], [ "ZERO", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D ZERO = new Vector3D(0, 0, 0);" ], [ "PLUS_I", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D PLUS_I = new Vector3D(1, 0, 0);" ], [ "MINUS_I", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D MINUS_I = new Vector3D(-1, 0, 0);" ], [ "PLUS_J", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D PLUS_J = new Vector3D(0, 1, 0);" ], [ "MINUS_J", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D MINUS_J = new Vector3D(0, -1, 0);" ], [ "PLUS_K", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D PLUS_K = new Vector3D(0, 0, 1);" ], [ "MINUS_K", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D MINUS_K = new Vector3D(0, 0, -1);" ], [ "NaN", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D NaN = new Vector3D(Double.NaN, Double.NaN, Double.NaN);" ], [ "POSITIVE_INFINITY", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D POSITIVE_INFINITY = new Vector3D(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);" ], [ "NEGATIVE_INFINITY", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D NEGATIVE_INFINITY = new Vector3D(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);" ], [ "ZERO", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static final Vector1D ZERO = new Vector1D(0.0);" ], [ "ONE", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static final Vector1D ONE = new Vector1D(1.0);" ], [ "NaN", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static final Vector1D NaN = new Vector1D(Double.NaN);" ], [ "POSITIVE_INFINITY", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static final Vector1D POSITIVE_INFINITY = new Vector1D(Double.POSITIVE_INFINITY);" ], [ "NEGATIVE_INFINITY", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static final Vector1D NEGATIVE_INFINITY = new Vector1D(Double.NEGATIVE_INFINITY);" ], [ "ZERO", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static final Vector2D ZERO = new Vector2D(0, 0);" ], [ "NaN", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static final Vector2D NaN = new Vector2D(Double.NaN, Double.NaN);" ], [ "POSITIVE_INFINITY", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static final Vector2D POSITIVE_INFINITY = new Vector2D(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);" ], [ "NEGATIVE_INFINITY", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static final Vector2D NEGATIVE_INFINITY = new Vector2D(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);" ], [ "NaN", "org.apache.commons.math3.geometry.spherical.oned", "S1Point", "public static final S1Point NaN = new S1Point(Double.NaN, Vector2D.NaN);" ], [ "PLUS_I", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point PLUS_I = new S2Point(0, 0.5 * FastMath.PI, Vector3D.PLUS_I);" ], [ "PLUS_J", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point PLUS_J = new S2Point(0.5 * FastMath.PI, 0.5 * FastMath.PI, Vector3D.PLUS_J);" ], [ "PLUS_K", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point PLUS_K = new S2Point(0, 0, Vector3D.PLUS_K);" ], [ "MINUS_I", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point MINUS_I = new S2Point(FastMath.PI, 0.5 * FastMath.PI, Vector3D.MINUS_I);" ], [ "MINUS_J", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point MINUS_J = new S2Point(1.5 * FastMath.PI, 0.5 * FastMath.PI, Vector3D.MINUS_J);" ], [ "MINUS_K", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point MINUS_K = new S2Point(0, FastMath.PI, Vector3D.MINUS_K);" ], [ "NaN", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point NaN = new S2Point(Double.NaN, Double.NaN, Vector3D.NaN);" ], [ "DIGEST_MODE", "org.apache.commons.math3.random", "ValueServer", "public static final int DIGEST_MODE = 0;" ], [ "REPLAY_MODE", "org.apache.commons.math3.random", "ValueServer", "public static final int REPLAY_MODE = 1;" ], [ "UNIFORM_MODE", "org.apache.commons.math3.random", "ValueServer", "public static final int UNIFORM_MODE = 2;" ], [ "EXPONENTIAL_MODE", "org.apache.commons.math3.random", "ValueServer", "public static final int EXPONENTIAL_MODE = 3;" ], [ "GAUSSIAN_MODE", "org.apache.commons.math3.random", "ValueServer", "public static final int GAUSSIAN_MODE = 4;" ], [ "CONSTANT_MODE", "org.apache.commons.math3.random", "ValueServer", "public static final int CONSTANT_MODE = 5;" ], [ "DEFAULT_BIN_COUNT", "org.apache.commons.math3.random", "EmpiricalDistribution", "public static final int DEFAULT_BIN_COUNT = 1000;" ], [ "TWO", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction TWO = new Fraction(2, 1);" ], [ "ONE", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction ONE = new Fraction(1, 1);" ], [ "ZERO", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction ZERO = new Fraction(0, 1);" ], [ "FOUR_FIFTHS", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction FOUR_FIFTHS = new Fraction(4, 5);" ], [ "ONE_FIFTH", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction ONE_FIFTH = new Fraction(1, 5);" ], [ "ONE_HALF", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction ONE_HALF = new Fraction(1, 2);" ], [ "ONE_QUARTER", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction ONE_QUARTER = new Fraction(1, 4);" ], [ "ONE_THIRD", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction ONE_THIRD = new Fraction(1, 3);" ], [ "THREE_FIFTHS", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction THREE_FIFTHS = new Fraction(3, 5);" ], [ "THREE_QUARTERS", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction THREE_QUARTERS = new Fraction(3, 4);" ], [ "TWO_FIFTHS", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction TWO_FIFTHS = new Fraction(2, 5);" ], [ "TWO_QUARTERS", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction TWO_QUARTERS = new Fraction(2, 4);" ], [ "TWO_THIRDS", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction TWO_THIRDS = new Fraction(2, 3);" ], [ "MINUS_ONE", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction MINUS_ONE = new Fraction(-1, 1);" ], [ "TWO", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction TWO = new BigFraction(2);" ], [ "ONE", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction ONE = new BigFraction(1);" ], [ "ZERO", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction ZERO = new BigFraction(0);" ], [ "MINUS_ONE", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction MINUS_ONE = new BigFraction(-1);" ], [ "FOUR_FIFTHS", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction FOUR_FIFTHS = new BigFraction(4, 5);" ], [ "ONE_FIFTH", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction ONE_FIFTH = new BigFraction(1, 5);" ], [ "ONE_HALF", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction ONE_HALF = new BigFraction(1, 2);" ], [ "ONE_QUARTER", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction ONE_QUARTER = new BigFraction(1, 4);" ], [ "ONE_THIRD", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction ONE_THIRD = new BigFraction(1, 3);" ], [ "THREE_FIFTHS", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction THREE_FIFTHS = new BigFraction(3, 5);" ], [ "THREE_QUARTERS", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction THREE_QUARTERS = new BigFraction(3, 4);" ], [ "TWO_FIFTHS", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction TWO_FIFTHS = new BigFraction(2, 5);" ], [ "TWO_QUARTERS", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction TWO_QUARTERS = new BigFraction(2, 4);" ], [ "TWO_THIRDS", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction TWO_THIRDS = new BigFraction(2, 3);" ], [ "INTEGER_ZERO", "org.apache.commons.math3.exception", "MathIllegalNumberException", "protected static final Integer INTEGER_ZERO = Integer.valueOf(0);" ], [ "serialVersionUID", "org.apache.commons.math3.transform", "FastSineTransformer", "static final long serialVersionUID = 20120211L;" ], [ "serialVersionUID", "org.apache.commons.math3.transform", "FastFourierTransformer", "static final long serialVersionUID = 20120210L;" ], [ "serialVersionUID", "org.apache.commons.math3.transform", "FastCosineTransformer", "static final long serialVersionUID = 20120212L;" ], [ "serialVersionUID", "org.apache.commons.math3.transform", "FastHadamardTransformer", "static final long serialVersionUID = 20120211L;" ] ],
  "tokensMethodJavadocValues" : [ ],
  "tokensMethodArguments" : [ [ "other", "java.lang", "Object" ] ],
  "tokensMethodVariablesNonPrivateNonStaticNonVoidMethods" : [ [ "add", "org.apache.commons.math3", "FieldElement", "public abstract T add(T arg0) throws NullArgumentException" ], [ "toDouble", "org.apache.commons.math3.dfp", "Dfp", "public double toDouble()" ], [ "newInstance", "org.apache.commons.math3.dfp", "Dfp", "public Dfp newInstance()" ], [ "lessThan", "org.apache.commons.math3.dfp", "Dfp", "public boolean lessThan(final Dfp x)" ], [ "exp", "org.apache.commons.math3", "RealFieldElement", "public abstract T exp()" ], [ "dotrap", "org.apache.commons.math3.dfp", "Dfp", "public Dfp dotrap(int type, String what, Dfp oper, Dfp result)" ], [ "complement", "org.apache.commons.math3.dfp", "Dfp", "protected int complement(int extra)" ], [ "log10", "org.apache.commons.math3.dfp", "Dfp", "public int log10()" ], [ "newInstance", "org.apache.commons.math3.dfp", "Dfp", "public Dfp newInstance(final int x)" ], [ "abs", "org.apache.commons.math3", "RealFieldElement", "public abstract T abs()" ], [ "newInstance", "org.apache.commons.math3.dfp", "Dfp", "public Dfp newInstance(final long x)" ], [ "atan", "org.apache.commons.math3.dfp", "Dfp", "public Dfp atan()" ], [ "align", "org.apache.commons.math3.dfp", "Dfp", "protected int align(int e)" ], [ "cbrt", "org.apache.commons.math3", "RealFieldElement", "public abstract T cbrt()" ], [ "newInstance", "org.apache.commons.math3.dfp", "Dfp", "public Dfp newInstance(final String s)" ], [ "pow", "org.apache.commons.math3.dfp", "Dfp", "public Dfp pow(final int n)" ], [ "scalb", "org.apache.commons.math3", "RealFieldElement", "public abstract T scalb(int arg0)" ], [ "multiply", "org.apache.commons.math3.dfp", "Dfp", "public Dfp multiply(final int x)" ], [ "round", "org.apache.commons.math3.dfp", "Dfp", "public long round()" ], [ "isNaN", "org.apache.commons.math3.dfp", "Dfp", "public boolean isNaN()" ], [ "isInfinite", "org.apache.commons.math3.dfp", "Dfp", "public boolean isInfinite()" ], [ "linearCombination", "org.apache.commons.math3.dfp", "Dfp", "public Dfp linearCombination(final double a1, final Dfp b1, final double a2, final Dfp b2, final double a3, final Dfp b3, final double a4, final Dfp b4)" ], [ "signum", "org.apache.commons.math3", "RealFieldElement", "public abstract T signum()" ], [ "nextAfter", "org.apache.commons.math3.dfp", "Dfp", "public Dfp nextAfter(final Dfp x)" ], [ "negate", "org.apache.commons.math3.dfp", "Dfp", "public Dfp negate()" ], [ "pow", "org.apache.commons.math3", "RealFieldElement", "public abstract T pow(double arg0)" ], [ "multiply", "org.apache.commons.math3.dfp", "Dfp", "public Dfp multiply(final double a)" ], [ "rootN", "org.apache.commons.math3.dfp", "Dfp", "public Dfp rootN(final int n)" ], [ "pow", "org.apache.commons.math3.dfp", "Dfp", "public Dfp pow(final double p)" ], [ "log10K", "org.apache.commons.math3.dfp", "Dfp", "public int log10K()" ], [ "copySign", "org.apache.commons.math3.dfp", "Dfp", "public Dfp copySign(final double s)" ], [ "rint", "org.apache.commons.math3.dfp", "Dfp", "public Dfp rint()" ], [ "isZero", "org.apache.commons.math3.dfp", "Dfp", "public boolean isZero()" ], [ "ceil", "org.apache.commons.math3", "RealFieldElement", "public abstract T ceil()" ], [ "getField", "org.apache.commons.math3.dfp", "Dfp", "public DfpField getField()" ], [ "cosh", "org.apache.commons.math3.dfp", "Dfp", "public Dfp cosh()" ], [ "sqrt", "org.apache.commons.math3", "RealFieldElement", "public abstract T sqrt()" ], [ "divide", "org.apache.commons.math3", "FieldElement", "public abstract T divide(T arg0) throws NullArgumentException, MathArithmeticException" ], [ "multiply", "org.apache.commons.math3", "RealFieldElement", "public abstract T multiply(double arg0)" ], [ "linearCombination", "org.apache.commons.math3", "RealFieldElement", "public abstract T linearCombination(double arg0, T arg1, double arg2, T arg3, double arg4, T arg5, double arg6, T arg7)" ], [ "linearCombination", "org.apache.commons.math3", "RealFieldElement", "public abstract T linearCombination(T arg0, T arg1, T arg2, T arg3, T arg4, T arg5, T arg6, T arg7)" ], [ "subtract", "org.apache.commons.math3.dfp", "Dfp", "public Dfp subtract(final double a)" ], [ "add", "org.apache.commons.math3.dfp", "Dfp", "public Dfp add(final Dfp x)" ], [ "pow", "org.apache.commons.math3", "RealFieldElement", "public abstract T pow(int arg0)" ], [ "linearCombination", "org.apache.commons.math3", "RealFieldElement", "public abstract T linearCombination(T[] arg0, T[] arg1) throws DimensionMismatchException" ], [ "tanh", "org.apache.commons.math3", "RealFieldElement", "public abstract T tanh()" ], [ "linearCombination", "org.apache.commons.math3", "RealFieldElement", "public abstract T linearCombination(double arg0, T arg1, double arg2, T arg3, double arg4, T arg5)" ], [ "asinh", "org.apache.commons.math3.dfp", "Dfp", "public Dfp asinh()" ], [ "linearCombination", "org.apache.commons.math3.dfp", "Dfp", "public Dfp linearCombination(final Dfp a1, final Dfp b1, final Dfp a2, final Dfp b2, final Dfp a3, final Dfp b3, final Dfp a4, final Dfp b4)" ], [ "linearCombination", "org.apache.commons.math3.dfp", "Dfp", "public Dfp linearCombination(final double a1, final Dfp b1, final double a2, final Dfp b2, final double a3, final Dfp b3)" ], [ "linearCombination", "org.apache.commons.math3.dfp", "Dfp", "public Dfp linearCombination(final double a1, final Dfp b1, final double a2, final Dfp b2)" ], [ "acos", "org.apache.commons.math3.dfp", "Dfp", "public Dfp acos()" ], [ "asin", "org.apache.commons.math3.dfp", "Dfp", "public Dfp asin()" ], [ "expm1", "org.apache.commons.math3.dfp", "Dfp", "public Dfp expm1()" ], [ "atanh", "org.apache.commons.math3", "RealFieldElement", "public abstract T atanh()" ], [ "linearCombination", "org.apache.commons.math3", "RealFieldElement", "public abstract T linearCombination(double arg0, T arg1, double arg2, T arg3)" ], [ "linearCombination", "org.apache.commons.math3.dfp", "Dfp", "public Dfp linearCombination(final Dfp[] a, final Dfp[] b) throws DimensionMismatchException" ], [ "getField", "org.apache.commons.math3", "FieldElement", "public abstract Field<T> getField()" ], [ "sin", "org.apache.commons.math3", "RealFieldElement", "public abstract T sin()" ], [ "power10K", "org.apache.commons.math3.dfp", "Dfp", "public Dfp power10K(final int e)" ], [ "atan2", "org.apache.commons.math3", "RealFieldElement", "public abstract T atan2(T arg0) throws DimensionMismatchException" ], [ "newInstance", "org.apache.commons.math3.dfp", "Dfp", "public Dfp newInstance(final byte x)" ], [ "asinh", "org.apache.commons.math3", "RealFieldElement", "public abstract T asinh()" ], [ "intLog10", "org.apache.commons.math3.dfp", "Dfp", "public int intLog10()" ], [ "remainder", "org.apache.commons.math3", "RealFieldElement", "public abstract T remainder(T arg0) throws DimensionMismatchException" ], [ "atanh", "org.apache.commons.math3.dfp", "Dfp", "public Dfp atanh()" ], [ "linearCombination", "org.apache.commons.math3", "RealFieldElement", "public abstract T linearCombination(T arg0, T arg1, T arg2, T arg3)" ], [ "asin", "org.apache.commons.math3", "RealFieldElement", "public abstract T asin()" ], [ "reciprocal", "org.apache.commons.math3.dfp", "Dfp", "public Dfp reciprocal()" ], [ "negate", "org.apache.commons.math3", "FieldElement", "public abstract T negate()" ], [ "rint", "org.apache.commons.math3", "RealFieldElement", "public abstract T rint()" ], [ "power10", "org.apache.commons.math3.dfp", "Dfp", "public Dfp power10(final int e)" ], [ "hashCode", "org.apache.commons.math3.dfp", "Dfp", "public int hashCode()" ], [ "greaterThan", "org.apache.commons.math3.dfp", "Dfp", "public boolean greaterThan(final Dfp x)" ], [ "sqrt", "org.apache.commons.math3.dfp", "Dfp", "public Dfp sqrt()" ], [ "ceil", "org.apache.commons.math3.dfp", "Dfp", "public Dfp ceil()" ], [ "subtract", "org.apache.commons.math3", "RealFieldElement", "public abstract T subtract(double arg0)" ], [ "remainder", "org.apache.commons.math3", "RealFieldElement", "public abstract T remainder(double arg0)" ], [ "hypot", "org.apache.commons.math3", "RealFieldElement", "public abstract T hypot(T arg0) throws DimensionMismatchException" ], [ "acosh", "org.apache.commons.math3", "RealFieldElement", "public abstract T acosh()" ], [ "cos", "org.apache.commons.math3", "RealFieldElement", "public abstract T cos()" ], [ "sin", "org.apache.commons.math3.dfp", "Dfp", "public Dfp sin()" ], [ "divide", "org.apache.commons.math3.dfp", "Dfp", "public Dfp divide(final double a)" ], [ "negativeOrNull", "org.apache.commons.math3.dfp", "Dfp", "public boolean negativeOrNull()" ], [ "round", "org.apache.commons.math3.dfp", "Dfp", "protected int round(int n)" ], [ "divide", "org.apache.commons.math3.dfp", "Dfp", "public Dfp divide(Dfp divisor)" ], [ "linearCombination", "org.apache.commons.math3.dfp", "Dfp", "public Dfp linearCombination(final double[] a, final Dfp[] b) throws DimensionMismatchException" ], [ "remainder", "org.apache.commons.math3.dfp", "Dfp", "public Dfp remainder(final Dfp d)" ], [ "log1p", "org.apache.commons.math3", "RealFieldElement", "public abstract T log1p()" ], [ "pow", "org.apache.commons.math3", "RealFieldElement", "public abstract T pow(T arg0) throws DimensionMismatchException" ], [ "toSplitDouble", "org.apache.commons.math3.dfp", "Dfp", "public double[] toSplitDouble()" ], [ "rootN", "org.apache.commons.math3", "RealFieldElement", "public abstract T rootN(int arg0)" ], [ "cos", "org.apache.commons.math3.dfp", "Dfp", "public Dfp cos()" ], [ "intValue", "org.apache.commons.math3.dfp", "Dfp", "public int intValue()" ], [ "floor", "org.apache.commons.math3", "RealFieldElement", "public abstract T floor()" ], [ "trunc", "org.apache.commons.math3.dfp", "Dfp", "protected Dfp trunc(final DfpField.RoundingMode rmode)" ], [ "sinh", "org.apache.commons.math3", "RealFieldElement", "public abstract T sinh()" ], [ "linearCombination", "org.apache.commons.math3.dfp", "Dfp", "public Dfp linearCombination(final Dfp a1, final Dfp b1, final Dfp a2, final Dfp b2, final Dfp a3, final Dfp b3)" ], [ "acos", "org.apache.commons.math3", "RealFieldElement", "public abstract T acos()" ], [ "copySign", "org.apache.commons.math3", "RealFieldElement", "public abstract T copySign(T arg0)" ], [ "tan", "org.apache.commons.math3", "RealFieldElement", "public abstract T tan()" ], [ "copySign", "org.apache.commons.math3.dfp", "Dfp", "public Dfp copySign(final Dfp s)" ], [ "getRadixDigits", "org.apache.commons.math3.dfp", "Dfp", "public int getRadixDigits()" ], [ "tanh", "org.apache.commons.math3.dfp", "Dfp", "public Dfp tanh()" ], [ "strictlyPositive", "org.apache.commons.math3.dfp", "Dfp", "public boolean strictlyPositive()" ], [ "dfp2sci", "org.apache.commons.math3.dfp", "Dfp", "protected String dfp2sci()" ], [ "copySign", "org.apache.commons.math3", "RealFieldElement", "public abstract T copySign(double arg0)" ], [ "equals", "org.apache.commons.math3.dfp", "Dfp", "public boolean equals(final Object other)" ], [ "linearCombination", "org.apache.commons.math3", "RealFieldElement", "public abstract T linearCombination(T arg0, T arg1, T arg2, T arg3, T arg4, T arg5)" ], [ "log", "org.apache.commons.math3", "RealFieldElement", "public abstract T log()" ], [ "signum", "org.apache.commons.math3.dfp", "Dfp", "public Dfp signum()" ], [ "unequal", "org.apache.commons.math3.dfp", "Dfp", "public boolean unequal(final Dfp x)" ], [ "acosh", "org.apache.commons.math3.dfp", "Dfp", "public Dfp acosh()" ], [ "positiveOrNull", "org.apache.commons.math3.dfp", "Dfp", "public boolean positiveOrNull()" ], [ "getReal", "org.apache.commons.math3.dfp", "Dfp", "public double getReal()" ], [ "classify", "org.apache.commons.math3.dfp", "Dfp", "public int classify()" ], [ "cbrt", "org.apache.commons.math3.dfp", "Dfp", "public Dfp cbrt()" ], [ "getClass", "java.lang", "Object", "public final native Class<? extends Object> getClass()" ], [ "clone", "java.lang", "Object", "protected native Object clone() throws CloneNotSupportedException" ], [ "sinh", "org.apache.commons.math3.dfp", "Dfp", "public Dfp sinh()" ], [ "getOne", "org.apache.commons.math3.dfp", "Dfp", "public Dfp getOne()" ], [ "atan2", "org.apache.commons.math3.dfp", "Dfp", "public Dfp atan2(final Dfp x) throws DimensionMismatchException" ], [ "exp", "org.apache.commons.math3.dfp", "Dfp", "public Dfp exp()" ], [ "getTwo", "org.apache.commons.math3.dfp", "Dfp", "public Dfp getTwo()" ], [ "trap", "org.apache.commons.math3.dfp", "Dfp", "protected Dfp trap(int type, String what, Dfp oper, Dfp def, Dfp result)" ], [ "floor", "org.apache.commons.math3.dfp", "Dfp", "public Dfp floor()" ], [ "abs", "org.apache.commons.math3.dfp", "Dfp", "public Dfp abs()" ], [ "divide", "org.apache.commons.math3", "RealFieldElement", "public abstract T divide(double arg0)" ], [ "hypot", "org.apache.commons.math3.dfp", "Dfp", "public Dfp hypot(final Dfp y)" ], [ "linearCombination", "org.apache.commons.math3.dfp", "Dfp", "public Dfp linearCombination(final Dfp a1, final Dfp b1, final Dfp a2, final Dfp b2)" ], [ "add", "org.apache.commons.math3", "RealFieldElement", "public abstract T add(double arg0)" ], [ "divide", "org.apache.commons.math3.dfp", "Dfp", "public Dfp divide(int divisor)" ], [ "linearCombination", "org.apache.commons.math3", "RealFieldElement", "public abstract T linearCombination(double[] arg0, T[] arg1) throws DimensionMismatchException" ], [ "atan", "org.apache.commons.math3", "RealFieldElement", "public abstract T atan()" ], [ "add", "org.apache.commons.math3.dfp", "Dfp", "public Dfp add(final double a)" ], [ "multiply", "org.apache.commons.math3", "FieldElement", "public abstract T multiply(int arg0)" ], [ "scalb", "org.apache.commons.math3.dfp", "Dfp", "public Dfp scalb(final int n)" ], [ "strictlyNegative", "org.apache.commons.math3.dfp", "Dfp", "public boolean strictlyNegative()" ], [ "log", "org.apache.commons.math3.dfp", "Dfp", "public Dfp log()" ], [ "subtract", "org.apache.commons.math3", "FieldElement", "public abstract T subtract(T arg0) throws NullArgumentException" ], [ "toString", "org.apache.commons.math3.dfp", "Dfp", "public String toString()" ], [ "subtract", "org.apache.commons.math3.dfp", "Dfp", "public Dfp subtract(final Dfp x)" ], [ "log1p", "org.apache.commons.math3.dfp", "Dfp", "public Dfp log1p()" ], [ "pow", "org.apache.commons.math3.dfp", "Dfp", "public Dfp pow(final Dfp e)" ], [ "newInstance", "org.apache.commons.math3.dfp", "Dfp", "public Dfp newInstance(final double x)" ], [ "multiply", "org.apache.commons.math3.dfp", "Dfp", "public Dfp multiply(final Dfp x)" ], [ "remainder", "org.apache.commons.math3.dfp", "Dfp", "public Dfp remainder(final double a)" ], [ "newInstance", "org.apache.commons.math3.dfp", "Dfp", "public Dfp newInstance(final byte sig, final byte code)" ], [ "newInstance", "org.apache.commons.math3.dfp", "Dfp", "public Dfp newInstance(final Dfp d)" ], [ "expm1", "org.apache.commons.math3", "RealFieldElement", "public abstract T expm1()" ], [ "multiply", "org.apache.commons.math3", "FieldElement", "public abstract T multiply(T arg0) throws NullArgumentException" ], [ "tan", "org.apache.commons.math3.dfp", "Dfp", "public Dfp tan()" ], [ "reciprocal", "org.apache.commons.math3", "RealFieldElement", "public abstract T reciprocal()" ], [ "cosh", "org.apache.commons.math3", "RealFieldElement", "public abstract T cosh()" ], [ "dfp2string", "org.apache.commons.math3.dfp", "Dfp", "protected String dfp2string()" ], [ "getZero", "org.apache.commons.math3.dfp", "Dfp", "public Dfp getZero()" ], [ "toString", "java.lang", "Object", "public String toString()" ], [ "equals", "java.lang", "Object", "public boolean equals(Object arg0)" ], [ "hashCode", "java.lang", "Object", "public native int hashCode()" ] ],
  "tokensMethodVariablesNonPrivateNonStaticAttributes" : [ [ "mant", "org.apache.commons.math3.dfp", "Dfp", "protected int[] mant;" ], [ "sign", "org.apache.commons.math3.dfp", "Dfp", "protected byte sign;" ], [ "exp", "org.apache.commons.math3.dfp", "Dfp", "protected int exp;" ], [ "nans", "org.apache.commons.math3.dfp", "Dfp", "protected byte nans;" ] ],
  "tokensOracleVariablesNonPrivateNonStaticNonVoidMethods" : [ ],
  "tokensOracleVariablesNonPrivateNonStaticAttributes" : [ ]
}, {
  "id" : 22771,
  "oracle" : ";",
  "oracleType" : "PRE",
  "projectName" : "commons-math3-3.6.1",
  "packageName" : "org.apache.commons.math3.dfp",
  "className" : "Dfp",
  "javadocTag" : "@param b second instance in comparison",
  "methodJavadoc" : "    /** Compare two instances.\n     * @param a first instance in comparison\n     * @param b second instance in comparison\n     * @return -1 if a<b, 1 if a>b and 0 if a==b\n     *  Note this method does not properly handle NaNs or numbers with different precision.\n     */",
  "methodSourceCode" : "private static int compare(final Dfp a, final Dfp b){\n    // Ignore the sign of zero\n    if (a.mant[a.mant.length - 1] == 0 && b.mant[b.mant.length - 1] == 0 && a.nans == FINITE && b.nans == FINITE) {\n        return 0;\n    }\n    if (a.sign != b.sign) {\n        if (a.sign == -1) {\n            return -1;\n        } else {\n            return 1;\n        }\n    }\n    // deal with the infinities\n    if (a.nans == INFINITE && b.nans == FINITE) {\n        return a.sign;\n    }\n    if (a.nans == FINITE && b.nans == INFINITE) {\n        return -b.sign;\n    }\n    if (a.nans == INFINITE && b.nans == INFINITE) {\n        return 0;\n    }\n    // Handle special case when a or b is zero, by ignoring the exponents\n    if (b.mant[b.mant.length - 1] != 0 && a.mant[b.mant.length - 1] != 0) {\n        if (a.exp < b.exp) {\n            return -a.sign;\n        }\n        if (a.exp > b.exp) {\n            return a.sign;\n        }\n    }\n    // compare the mantissas\n    for (int i = a.mant.length - 1; i >= 0; i--) {\n        if (a.mant[i] > b.mant[i]) {\n            return a.sign;\n        }\n        if (a.mant[i] < b.mant[i]) {\n            return -a.sign;\n        }\n    }\n    return 0;\n}",
  "classJavadoc" : "/**\n *  Decimal floating point library for Java\n *\n *  <p>Another floating point class.  This one is built using radix 10000\n *  which is 10<sup>4</sup>, so its almost decimal.</p>\n *\n *  <p>The design goals here are:\n *  <ol>\n *    <li>Decimal math, or close to it</li>\n *    <li>Settable precision (but no mix between numbers using different settings)</li>\n *    <li>Portability.  Code should be kept as portable as possible.</li>\n *    <li>Performance</li>\n *    <li>Accuracy  - Results should always be +/- 1 ULP for basic\n *         algebraic operation</li>\n *    <li>Comply with IEEE 854-1987 as much as possible.\n *         (See IEEE 854-1987 notes below)</li>\n *  </ol></p>\n *\n *  <p>Trade offs:\n *  <ol>\n *    <li>Memory foot print.  I'm using more memory than necessary to\n *         represent numbers to get better performance.</li>\n *    <li>Digits are bigger, so rounding is a greater loss.  So, if you\n *         really need 12 decimal digits, better use 4 base 10000 digits\n *         there can be one partially filled.</li>\n *  </ol></p>\n *\n *  <p>Numbers are represented  in the following form:\n *  <pre>\n *  n  =  sign &times; mant &times; (radix)<sup>exp</sup>;</p>\n *  </pre>\n *  where sign is &plusmn;1, mantissa represents a fractional number between\n *  zero and one.  mant[0] is the least significant digit.\n *  exp is in the range of -32767 to 32768</p>\n *\n *  <p>IEEE 854-1987  Notes and differences</p>\n *\n *  <p>IEEE 854 requires the radix to be either 2 or 10.  The radix here is\n *  10000, so that requirement is not met, but  it is possible that a\n *  subclassed can be made to make it behave as a radix 10\n *  number.  It is my opinion that if it looks and behaves as a radix\n *  10 number then it is one and that requirement would be met.</p>\n *\n *  <p>The radix of 10000 was chosen because it should be faster to operate\n *  on 4 decimal digits at once instead of one at a time.  Radix 10 behavior\n *  can be realized by adding an additional rounding step to ensure that\n *  the number of decimal digits represented is constant.</p>\n *\n *  <p>The IEEE standard specifically leaves out internal data encoding,\n *  so it is reasonable to conclude that such a subclass of this radix\n *  10000 system is merely an encoding of a radix 10 system.</p>\n *\n *  <p>IEEE 854 also specifies the existence of \"sub-normal\" numbers.  This\n *  class does not contain any such entities.  The most significant radix\n *  10000 digit is always non-zero.  Instead, we support \"gradual underflow\"\n *  by raising the underflow flag for numbers less with exponent less than\n *  expMin, but don't flush to zero until the exponent reaches MIN_EXP-digits.\n *  Thus the smallest number we can represent would be:\n *  1E(-(MIN_EXP-digits-1)*4),  eg, for digits=5, MIN_EXP=-32767, that would\n *  be 1e-131092.</p>\n *\n *  <p>IEEE 854 defines that the implied radix point lies just to the right\n *  of the most significant digit and to the left of the remaining digits.\n *  This implementation puts the implied radix point to the left of all\n *  digits including the most significant one.  The most significant digit\n *  here is the one just to the right of the radix point.  This is a fine\n *  detail and is really only a matter of definition.  Any side effects of\n *  this can be rendered invisible by a subclass.</p>\n * @see DfpField\n * @since 2.2\n */",
  "classSourceCode" : "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.commons.math3.dfp;\n\nimport java.util.Arrays;\n\nimport org.apache.commons.math3.RealFieldElement;\nimport org.apache.commons.math3.exception.DimensionMismatchException;\nimport org.apache.commons.math3.util.FastMath;\n\n/**\n *  Decimal floating point library for Java\n *\n *  <p>Another floating point class.  This one is built using radix 10000\n *  which is 10<sup>4</sup>, so its almost decimal.</p>\n *\n *  <p>The design goals here are:\n *  <ol>\n *    <li>Decimal math, or close to it</li>\n *    <li>Settable precision (but no mix between numbers using different settings)</li>\n *    <li>Portability.  Code should be kept as portable as possible.</li>\n *    <li>Performance</li>\n *    <li>Accuracy  - Results should always be +/- 1 ULP for basic\n *         algebraic operation</li>\n *    <li>Comply with IEEE 854-1987 as much as possible.\n *         (See IEEE 854-1987 notes below)</li>\n *  </ol></p>\n *\n *  <p>Trade offs:\n *  <ol>\n *    <li>Memory foot print.  I'm using more memory than necessary to\n *         represent numbers to get better performance.</li>\n *    <li>Digits are bigger, so rounding is a greater loss.  So, if you\n *         really need 12 decimal digits, better use 4 base 10000 digits\n *         there can be one partially filled.</li>\n *  </ol></p>\n *\n *  <p>Numbers are represented  in the following form:\n *  <pre>\n *  n  =  sign &times; mant &times; (radix)<sup>exp</sup>;</p>\n *  </pre>\n *  where sign is &plusmn;1, mantissa represents a fractional number between\n *  zero and one.  mant[0] is the least significant digit.\n *  exp is in the range of -32767 to 32768</p>\n *\n *  <p>IEEE 854-1987  Notes and differences</p>\n *\n *  <p>IEEE 854 requires the radix to be either 2 or 10.  The radix here is\n *  10000, so that requirement is not met, but  it is possible that a\n *  subclassed can be made to make it behave as a radix 10\n *  number.  It is my opinion that if it looks and behaves as a radix\n *  10 number then it is one and that requirement would be met.</p>\n *\n *  <p>The radix of 10000 was chosen because it should be faster to operate\n *  on 4 decimal digits at once instead of one at a time.  Radix 10 behavior\n *  can be realized by adding an additional rounding step to ensure that\n *  the number of decimal digits represented is constant.</p>\n *\n *  <p>The IEEE standard specifically leaves out internal data encoding,\n *  so it is reasonable to conclude that such a subclass of this radix\n *  10000 system is merely an encoding of a radix 10 system.</p>\n *\n *  <p>IEEE 854 also specifies the existence of \"sub-normal\" numbers.  This\n *  class does not contain any such entities.  The most significant radix\n *  10000 digit is always non-zero.  Instead, we support \"gradual underflow\"\n *  by raising the underflow flag for numbers less with exponent less than\n *  expMin, but don't flush to zero until the exponent reaches MIN_EXP-digits.\n *  Thus the smallest number we can represent would be:\n *  1E(-(MIN_EXP-digits-1)*4),  eg, for digits=5, MIN_EXP=-32767, that would\n *  be 1e-131092.</p>\n *\n *  <p>IEEE 854 defines that the implied radix point lies just to the right\n *  of the most significant digit and to the left of the remaining digits.\n *  This implementation puts the implied radix point to the left of all\n *  digits including the most significant one.  The most significant digit\n *  here is the one just to the right of the radix point.  This is a fine\n *  detail and is really only a matter of definition.  Any side effects of\n *  this can be rendered invisible by a subclass.</p>\n * @see DfpField\n * @since 2.2\n */\npublic class Dfp implements RealFieldElement<Dfp> {\n\n    /** The radix, or base of this system.  Set to 10000 */\n    public static final int RADIX = 10000;\n\n    /** The minimum exponent before underflow is signaled.  Flush to zero\n     *  occurs at minExp-DIGITS */\n    public static final int MIN_EXP = -32767;\n\n    /** The maximum exponent before overflow is signaled and results flushed\n     *  to infinity */\n    public static final int MAX_EXP =  32768;\n\n    /** The amount under/overflows are scaled by before going to trap handler */\n    public static final int ERR_SCALE = 32760;\n\n    /** Indicator value for normal finite numbers. */\n    public static final byte FINITE = 0;\n\n    /** Indicator value for Infinity. */\n    public static final byte INFINITE = 1;\n\n    /** Indicator value for signaling NaN. */\n    public static final byte SNAN = 2;\n\n    /** Indicator value for quiet NaN. */\n    public static final byte QNAN = 3;\n\n    /** String for NaN representation. */\n    private static final String NAN_STRING = \"NaN\";\n\n    /** String for positive infinity representation. */\n    private static final String POS_INFINITY_STRING = \"Infinity\";\n\n    /** String for negative infinity representation. */\n    private static final String NEG_INFINITY_STRING = \"-Infinity\";\n\n    /** Name for traps triggered by addition. */\n    private static final String ADD_TRAP = \"add\";\n\n    /** Name for traps triggered by multiplication. */\n    private static final String MULTIPLY_TRAP = \"multiply\";\n\n    /** Name for traps triggered by division. */\n    private static final String DIVIDE_TRAP = \"divide\";\n\n    /** Name for traps triggered by square root. */\n    private static final String SQRT_TRAP = \"sqrt\";\n\n    /** Name for traps triggered by alignment. */\n    private static final String ALIGN_TRAP = \"align\";\n\n    /** Name for traps triggered by truncation. */\n    private static final String TRUNC_TRAP = \"trunc\";\n\n    /** Name for traps triggered by nextAfter. */\n    private static final String NEXT_AFTER_TRAP = \"nextAfter\";\n\n    /** Name for traps triggered by lessThan. */\n    private static final String LESS_THAN_TRAP = \"lessThan\";\n\n    /** Name for traps triggered by greaterThan. */\n    private static final String GREATER_THAN_TRAP = \"greaterThan\";\n\n    /** Name for traps triggered by newInstance. */\n    private static final String NEW_INSTANCE_TRAP = \"newInstance\";\n\n    /** Mantissa. */\n    protected int[] mant;\n\n    /** Sign bit: 1 for positive, -1 for negative. */\n    protected byte sign;\n\n    /** Exponent. */\n    protected int exp;\n\n    /** Indicator for non-finite / non-number values. */\n    protected byte nans;\n\n    /** Factory building similar Dfp's. */\n    private final DfpField field;\n\n    /** Makes an instance with a value of zero.\n     * @param field field to which this instance belongs\n     */\n    protected Dfp(final DfpField field) {\n        mant = new int[field.getRadixDigits()];\n        sign = 1;\n        exp = 0;\n        nans = FINITE;\n        this.field = field;\n    }\n\n    /** Create an instance from a byte value.\n     * @param field field to which this instance belongs\n     * @param x value to convert to an instance\n     */\n    protected Dfp(final DfpField field, byte x) {\n        this(field, (long) x);\n    }\n\n    /** Create an instance from an int value.\n     * @param field field to which this instance belongs\n     * @param x value to convert to an instance\n     */\n    protected Dfp(final DfpField field, int x) {\n        this(field, (long) x);\n    }\n\n    /** Create an instance from a long value.\n     * @param field field to which this instance belongs\n     * @param x value to convert to an instance\n     */\n    protected Dfp(final DfpField field, long x) {\n\n        // initialize as if 0\n        mant = new int[field.getRadixDigits()];\n        nans = FINITE;\n        this.field = field;\n\n        boolean isLongMin = false;\n        if (x == Long.MIN_VALUE) {\n            // special case for Long.MIN_VALUE (-9223372036854775808)\n            // we must shift it before taking its absolute value\n            isLongMin = true;\n            ++x;\n        }\n\n        // set the sign\n        if (x < 0) {\n            sign = -1;\n            x = -x;\n        } else {\n            sign = 1;\n        }\n\n        exp = 0;\n        while (x != 0) {\n            System.arraycopy(mant, mant.length - exp, mant, mant.length - 1 - exp, exp);\n            mant[mant.length - 1] = (int) (x % RADIX);\n            x /= RADIX;\n            exp++;\n        }\n\n        if (isLongMin) {\n            // remove the shift added for Long.MIN_VALUE\n            // we know in this case that fixing the last digit is sufficient\n            for (int i = 0; i < mant.length - 1; i++) {\n                if (mant[i] != 0) {\n                    mant[i]++;\n                    break;\n                }\n            }\n        }\n    }\n\n    /** Create an instance from a double value.\n     * @param field field to which this instance belongs\n     * @param x value to convert to an instance\n     */\n    protected Dfp(final DfpField field, double x) {\n\n        // initialize as if 0\n        mant = new int[field.getRadixDigits()];\n        sign = 1;\n        exp = 0;\n        nans = FINITE;\n        this.field = field;\n\n        long bits = Double.doubleToLongBits(x);\n        long mantissa = bits & 0x000fffffffffffffL;\n        int exponent = (int) ((bits & 0x7ff0000000000000L) >> 52) - 1023;\n\n        if (exponent == -1023) {\n            // Zero or sub-normal\n            if (x == 0) {\n                // make sure 0 has the right sign\n                if ((bits & 0x8000000000000000L) != 0) {\n                    sign = -1;\n                }\n                return;\n            }\n\n            exponent++;\n\n            // Normalize the subnormal number\n            while ( (mantissa & 0x0010000000000000L) == 0) {\n                exponent--;\n                mantissa <<= 1;\n            }\n            mantissa &= 0x000fffffffffffffL;\n        }\n\n        if (exponent == 1024) {\n            // infinity or NAN\n            if (x != x) {\n                sign = (byte) 1;\n                nans = QNAN;\n            } else if (x < 0) {\n                sign = (byte) -1;\n                nans = INFINITE;\n            } else {\n                sign = (byte) 1;\n                nans = INFINITE;\n            }\n            return;\n        }\n\n        Dfp xdfp = new Dfp(field, mantissa);\n        xdfp = xdfp.divide(new Dfp(field, 4503599627370496l)).add(field.getOne());  // Divide by 2^52, then add one\n        xdfp = xdfp.multiply(DfpMath.pow(field.getTwo(), exponent));\n\n        if ((bits & 0x8000000000000000L) != 0) {\n            xdfp = xdfp.negate();\n        }\n\n        System.arraycopy(xdfp.mant, 0, mant, 0, mant.length);\n        sign = xdfp.sign;\n        exp  = xdfp.exp;\n        nans = xdfp.nans;\n\n    }\n\n    /** Copy constructor.\n     * @param d instance to copy\n     */\n    public Dfp(final Dfp d) {\n        mant  = d.mant.clone();\n        sign  = d.sign;\n        exp   = d.exp;\n        nans  = d.nans;\n        field = d.field;\n    }\n\n    /** Create an instance from a String representation.\n     * @param field field to which this instance belongs\n     * @param s string representation of the instance\n     */\n    protected Dfp(final DfpField field, final String s) {\n\n        // initialize as if 0\n        mant = new int[field.getRadixDigits()];\n        sign = 1;\n        exp = 0;\n        nans = FINITE;\n        this.field = field;\n\n        boolean decimalFound = false;\n        final int rsize = 4;   // size of radix in decimal digits\n        final int offset = 4;  // Starting offset into Striped\n        final char[] striped = new char[getRadixDigits() * rsize + offset * 2];\n\n        // Check some special cases\n        if (s.equals(POS_INFINITY_STRING)) {\n            sign = (byte) 1;\n            nans = INFINITE;\n            return;\n        }\n\n        if (s.equals(NEG_INFINITY_STRING)) {\n            sign = (byte) -1;\n            nans = INFINITE;\n            return;\n        }\n\n        if (s.equals(NAN_STRING)) {\n            sign = (byte) 1;\n            nans = QNAN;\n            return;\n        }\n\n        // Check for scientific notation\n        int p = s.indexOf(\"e\");\n        if (p == -1) { // try upper case?\n            p = s.indexOf(\"E\");\n        }\n\n        final String fpdecimal;\n        int sciexp = 0;\n        if (p != -1) {\n            // scientific notation\n            fpdecimal = s.substring(0, p);\n            String fpexp = s.substring(p+1);\n            boolean negative = false;\n\n            for (int i=0; i<fpexp.length(); i++)\n            {\n                if (fpexp.charAt(i) == '-')\n                {\n                    negative = true;\n                    continue;\n                }\n                if (fpexp.charAt(i) >= '0' && fpexp.charAt(i) <= '9') {\n                    sciexp = sciexp * 10 + fpexp.charAt(i) - '0';\n                }\n            }\n\n            if (negative) {\n                sciexp = -sciexp;\n            }\n        } else {\n            // normal case\n            fpdecimal = s;\n        }\n\n        // If there is a minus sign in the number then it is negative\n        if (fpdecimal.indexOf(\"-\") !=  -1) {\n            sign = -1;\n        }\n\n        // First off, find all of the leading zeros, trailing zeros, and significant digits\n        p = 0;\n\n        // Move p to first significant digit\n        int decimalPos = 0;\n        for (;;) {\n            if (fpdecimal.charAt(p) >= '1' && fpdecimal.charAt(p) <= '9') {\n                break;\n            }\n\n            if (decimalFound && fpdecimal.charAt(p) == '0') {\n                decimalPos--;\n            }\n\n            if (fpdecimal.charAt(p) == '.') {\n                decimalFound = true;\n            }\n\n            p++;\n\n            if (p == fpdecimal.length()) {\n                break;\n            }\n        }\n\n        // Copy the string onto Stripped\n        int q = offset;\n        striped[0] = '0';\n        striped[1] = '0';\n        striped[2] = '0';\n        striped[3] = '0';\n        int significantDigits=0;\n        for(;;) {\n            if (p == (fpdecimal.length())) {\n                break;\n            }\n\n            // Don't want to run pass the end of the array\n            if (q == mant.length*rsize+offset+1) {\n                break;\n            }\n\n            if (fpdecimal.charAt(p) == '.') {\n                decimalFound = true;\n                decimalPos = significantDigits;\n                p++;\n                continue;\n            }\n\n            if (fpdecimal.charAt(p) < '0' || fpdecimal.charAt(p) > '9') {\n                p++;\n                continue;\n            }\n\n            striped[q] = fpdecimal.charAt(p);\n            q++;\n            p++;\n            significantDigits++;\n        }\n\n\n        // If the decimal point has been found then get rid of trailing zeros.\n        if (decimalFound && q != offset) {\n            for (;;) {\n                q--;\n                if (q == offset) {\n                    break;\n                }\n                if (striped[q] == '0') {\n                    significantDigits--;\n                } else {\n                    break;\n                }\n            }\n        }\n\n        // special case of numbers like \"0.00000\"\n        if (decimalFound && significantDigits == 0) {\n            decimalPos = 0;\n        }\n\n        // Implicit decimal point at end of number if not present\n        if (!decimalFound) {\n            decimalPos = q-offset;\n        }\n\n        // Find the number of significant trailing zeros\n        q = offset;  // set q to point to first sig digit\n        p = significantDigits-1+offset;\n\n        while (p > q) {\n            if (striped[p] != '0') {\n                break;\n            }\n            p--;\n        }\n\n        // Make sure the decimal is on a mod 10000 boundary\n        int i = ((rsize * 100) - decimalPos - sciexp % rsize) % rsize;\n        q -= i;\n        decimalPos += i;\n\n        // Make the mantissa length right by adding zeros at the end if necessary\n        while ((p - q) < (mant.length * rsize)) {\n            for (i = 0; i < rsize; i++) {\n                striped[++p] = '0';\n            }\n        }\n\n        // Ok, now we know how many trailing zeros there are,\n        // and where the least significant digit is\n        for (i = mant.length - 1; i >= 0; i--) {\n            mant[i] = (striped[q]   - '0') * 1000 +\n                      (striped[q+1] - '0') * 100  +\n                      (striped[q+2] - '0') * 10   +\n                      (striped[q+3] - '0');\n            q += 4;\n        }\n\n\n        exp = (decimalPos+sciexp) / rsize;\n\n        if (q < striped.length) {\n            // Is there possible another digit?\n            round((striped[q] - '0')*1000);\n        }\n\n    }\n\n    /** Creates an instance with a non-finite value.\n     * @param field field to which this instance belongs\n     * @param sign sign of the Dfp to create\n     * @param nans code of the value, must be one of {@link #INFINITE},\n     * {@link #SNAN},  {@link #QNAN}\n     */\n    protected Dfp(final DfpField field, final byte sign, final byte nans) {\n        this.field = field;\n        this.mant    = new int[field.getRadixDigits()];\n        this.sign    = sign;\n        this.exp     = 0;\n        this.nans    = nans;\n    }\n\n    /** Create an instance with a value of 0.\n     * Use this internally in preference to constructors to facilitate subclasses\n     * @return a new instance with a value of 0\n     */\n    public Dfp newInstance() {\n        return new Dfp(getField());\n    }\n\n    /** Create an instance from a byte value.\n     * @param x value to convert to an instance\n     * @return a new instance with value x\n     */\n    public Dfp newInstance(final byte x) {\n        return new Dfp(getField(), x);\n    }\n\n    /** Create an instance from an int value.\n     * @param x value to convert to an instance\n     * @return a new instance with value x\n     */\n    public Dfp newInstance(final int x) {\n        return new Dfp(getField(), x);\n    }\n\n    /** Create an instance from a long value.\n     * @param x value to convert to an instance\n     * @return a new instance with value x\n     */\n    public Dfp newInstance(final long x) {\n        return new Dfp(getField(), x);\n    }\n\n    /** Create an instance from a double value.\n     * @param x value to convert to an instance\n     * @return a new instance with value x\n     */\n    public Dfp newInstance(final double x) {\n        return new Dfp(getField(), x);\n    }\n\n    /** Create an instance by copying an existing one.\n     * Use this internally in preference to constructors to facilitate subclasses.\n     * @param d instance to copy\n     * @return a new instance with the same value as d\n     */\n    public Dfp newInstance(final Dfp d) {\n\n        // make sure we don't mix number with different precision\n        if (field.getRadixDigits() != d.field.getRadixDigits()) {\n            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);\n            final Dfp result = newInstance(getZero());\n            result.nans = QNAN;\n            return dotrap(DfpField.FLAG_INVALID, NEW_INSTANCE_TRAP, d, result);\n        }\n\n        return new Dfp(d);\n\n    }\n\n    /** Create an instance from a String representation.\n     * Use this internally in preference to constructors to facilitate subclasses.\n     * @param s string representation of the instance\n     * @return a new instance parsed from specified string\n     */\n    public Dfp newInstance(final String s) {\n        return new Dfp(field, s);\n    }\n\n    /** Creates an instance with a non-finite value.\n     * @param sig sign of the Dfp to create\n     * @param code code of the value, must be one of {@link #INFINITE},\n     * {@link #SNAN},  {@link #QNAN}\n     * @return a new instance with a non-finite value\n     */\n    public Dfp newInstance(final byte sig, final byte code) {\n        return field.newDfp(sig, code);\n    }\n\n    /** Get the {@link org.apache.commons.math3.Field Field} (really a {@link DfpField}) to which the instance belongs.\n     * <p>\n     * The field is linked to the number of digits and acts as a factory\n     * for {@link Dfp} instances.\n     * </p>\n     * @return {@link org.apache.commons.math3.Field Field} (really a {@link DfpField}) to which the instance belongs\n     */\n    public DfpField getField() {\n        return field;\n    }\n\n    /** Get the number of radix digits of the instance.\n     * @return number of radix digits\n     */\n    public int getRadixDigits() {\n        return field.getRadixDigits();\n    }\n\n    /** Get the constant 0.\n     * @return a Dfp with value zero\n     */\n    public Dfp getZero() {\n        return field.getZero();\n    }\n\n    /** Get the constant 1.\n     * @return a Dfp with value one\n     */\n    public Dfp getOne() {\n        return field.getOne();\n    }\n\n    /** Get the constant 2.\n     * @return a Dfp with value two\n     */\n    public Dfp getTwo() {\n        return field.getTwo();\n    }\n\n    /** Shift the mantissa left, and adjust the exponent to compensate.\n     */\n    protected void shiftLeft() {\n        for (int i = mant.length - 1; i > 0; i--) {\n            mant[i] = mant[i-1];\n        }\n        mant[0] = 0;\n        exp--;\n    }\n\n    /* Note that shiftRight() does not call round() as that round() itself\n     uses shiftRight() */\n    /** Shift the mantissa right, and adjust the exponent to compensate.\n     */\n    protected void shiftRight() {\n        for (int i = 0; i < mant.length - 1; i++) {\n            mant[i] = mant[i+1];\n        }\n        mant[mant.length - 1] = 0;\n        exp++;\n    }\n\n    /** Make our exp equal to the supplied one, this may cause rounding.\n     *  Also causes de-normalized numbers.  These numbers are generally\n     *  dangerous because most routines assume normalized numbers.\n     *  Align doesn't round, so it will return the last digit destroyed\n     *  by shifting right.\n     *  @param e desired exponent\n     *  @return last digit destroyed by shifting right\n     */\n    protected int align(int e) {\n        int lostdigit = 0;\n        boolean inexact = false;\n\n        int diff = exp - e;\n\n        int adiff = diff;\n        if (adiff < 0) {\n            adiff = -adiff;\n        }\n\n        if (diff == 0) {\n            return 0;\n        }\n\n        if (adiff > (mant.length + 1)) {\n            // Special case\n            Arrays.fill(mant, 0);\n            exp = e;\n\n            field.setIEEEFlagsBits(DfpField.FLAG_INEXACT);\n            dotrap(DfpField.FLAG_INEXACT, ALIGN_TRAP, this, this);\n\n            return 0;\n        }\n\n        for (int i = 0; i < adiff; i++) {\n            if (diff < 0) {\n                /* Keep track of loss -- only signal inexact after losing 2 digits.\n                 * the first lost digit is returned to add() and may be incorporated\n                 * into the result.\n                 */\n                if (lostdigit != 0) {\n                    inexact = true;\n                }\n\n                lostdigit = mant[0];\n\n                shiftRight();\n            } else {\n                shiftLeft();\n            }\n        }\n\n        if (inexact) {\n            field.setIEEEFlagsBits(DfpField.FLAG_INEXACT);\n            dotrap(DfpField.FLAG_INEXACT, ALIGN_TRAP, this, this);\n        }\n\n        return lostdigit;\n\n    }\n\n    /** Check if instance is less than x.\n     * @param x number to check instance against\n     * @return true if instance is less than x and neither are NaN, false otherwise\n     */\n    public boolean lessThan(final Dfp x) {\n\n        // make sure we don't mix number with different precision\n        if (field.getRadixDigits() != x.field.getRadixDigits()) {\n            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);\n            final Dfp result = newInstance(getZero());\n            result.nans = QNAN;\n            dotrap(DfpField.FLAG_INVALID, LESS_THAN_TRAP, x, result);\n            return false;\n        }\n\n        /* if a nan is involved, signal invalid and return false */\n        if (isNaN() || x.isNaN()) {\n            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);\n            dotrap(DfpField.FLAG_INVALID, LESS_THAN_TRAP, x, newInstance(getZero()));\n            return false;\n        }\n\n        return compare(this, x) < 0;\n    }\n\n    /** Check if instance is greater than x.\n     * @param x number to check instance against\n     * @return true if instance is greater than x and neither are NaN, false otherwise\n     */\n    public boolean greaterThan(final Dfp x) {\n\n        // make sure we don't mix number with different precision\n        if (field.getRadixDigits() != x.field.getRadixDigits()) {\n            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);\n            final Dfp result = newInstance(getZero());\n            result.nans = QNAN;\n            dotrap(DfpField.FLAG_INVALID, GREATER_THAN_TRAP, x, result);\n            return false;\n        }\n\n        /* if a nan is involved, signal invalid and return false */\n        if (isNaN() || x.isNaN()) {\n            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);\n            dotrap(DfpField.FLAG_INVALID, GREATER_THAN_TRAP, x, newInstance(getZero()));\n            return false;\n        }\n\n        return compare(this, x) > 0;\n    }\n\n    /** Check if instance is less than or equal to 0.\n     * @return true if instance is not NaN and less than or equal to 0, false otherwise\n     */\n    public boolean negativeOrNull() {\n\n        if (isNaN()) {\n            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);\n            dotrap(DfpField.FLAG_INVALID, LESS_THAN_TRAP, this, newInstance(getZero()));\n            return false;\n        }\n\n        return (sign < 0) || ((mant[mant.length - 1] == 0) && !isInfinite());\n\n    }\n\n    /** Check if instance is strictly less than 0.\n     * @return true if instance is not NaN and less than or equal to 0, false otherwise\n     */\n    public boolean strictlyNegative() {\n\n        if (isNaN()) {\n            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);\n            dotrap(DfpField.FLAG_INVALID, LESS_THAN_TRAP, this, newInstance(getZero()));\n            return false;\n        }\n\n        return (sign < 0) && ((mant[mant.length - 1] != 0) || isInfinite());\n\n    }\n\n    /** Check if instance is greater than or equal to 0.\n     * @return true if instance is not NaN and greater than or equal to 0, false otherwise\n     */\n    public boolean positiveOrNull() {\n\n        if (isNaN()) {\n            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);\n            dotrap(DfpField.FLAG_INVALID, LESS_THAN_TRAP, this, newInstance(getZero()));\n            return false;\n        }\n\n        return (sign > 0) || ((mant[mant.length - 1] == 0) && !isInfinite());\n\n    }\n\n    /** Check if instance is strictly greater than 0.\n     * @return true if instance is not NaN and greater than or equal to 0, false otherwise\n     */\n    public boolean strictlyPositive() {\n\n        if (isNaN()) {\n            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);\n            dotrap(DfpField.FLAG_INVALID, LESS_THAN_TRAP, this, newInstance(getZero()));\n            return false;\n        }\n\n        return (sign > 0) && ((mant[mant.length - 1] != 0) || isInfinite());\n\n    }\n\n    /** Get the absolute value of instance.\n     * @return absolute value of instance\n     * @since 3.2\n     */\n    public Dfp abs() {\n        Dfp result = newInstance(this);\n        result.sign = 1;\n        return result;\n    }\n\n    /** Check if instance is infinite.\n     * @return true if instance is infinite\n     */\n    public boolean isInfinite() {\n        return nans == INFINITE;\n    }\n\n    /** Check if instance is not a number.\n     * @return true if instance is not a number\n     */\n    public boolean isNaN() {\n        return (nans == QNAN) || (nans == SNAN);\n    }\n\n    /** Check if instance is equal to zero.\n     * @return true if instance is equal to zero\n     */\n    public boolean isZero() {\n\n        if (isNaN()) {\n            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);\n            dotrap(DfpField.FLAG_INVALID, LESS_THAN_TRAP, this, newInstance(getZero()));\n            return false;\n        }\n\n        return (mant[mant.length - 1] == 0) && !isInfinite();\n\n    }\n\n    /** Check if instance is equal to x.\n     * @param other object to check instance against\n     * @return true if instance is equal to x and neither are NaN, false otherwise\n     */\n    @Override\n    public boolean equals(final Object other) {\n\n        if (other instanceof Dfp) {\n            final Dfp x = (Dfp) other;\n            if (isNaN() || x.isNaN() || field.getRadixDigits() != x.field.getRadixDigits()) {\n                return false;\n            }\n\n            return compare(this, x) == 0;\n        }\n\n        return false;\n\n    }\n\n    /**\n     * Gets a hashCode for the instance.\n     * @return a hash code value for this object\n     */\n    @Override\n    public int hashCode() {\n        return 17 + (isZero() ? 0 : (sign << 8)) + (nans << 16) + exp + Arrays.hashCode(mant);\n    }\n\n    /** Check if instance is not equal to x.\n     * @param x number to check instance against\n     * @return true if instance is not equal to x and neither are NaN, false otherwise\n     */\n    public boolean unequal(final Dfp x) {\n        if (isNaN() || x.isNaN() || field.getRadixDigits() != x.field.getRadixDigits()) {\n            return false;\n        }\n\n        return greaterThan(x) || lessThan(x);\n    }\n\n    /** Compare two instances.\n     * @param a first instance in comparison\n     * @param b second instance in comparison\n     * @return -1 if a<b, 1 if a>b and 0 if a==b\n     *  Note this method does not properly handle NaNs or numbers with different precision.\n     */\n    private static int compare(final Dfp a, final Dfp b) {\n        // Ignore the sign of zero\n        if (a.mant[a.mant.length - 1] == 0 && b.mant[b.mant.length - 1] == 0 &&\n            a.nans == FINITE && b.nans == FINITE) {\n            return 0;\n        }\n\n        if (a.sign != b.sign) {\n            if (a.sign == -1) {\n                return -1;\n            } else {\n                return 1;\n            }\n        }\n\n        // deal with the infinities\n        if (a.nans == INFINITE && b.nans == FINITE) {\n            return a.sign;\n        }\n\n        if (a.nans == FINITE && b.nans == INFINITE) {\n            return -b.sign;\n        }\n\n        if (a.nans == INFINITE && b.nans == INFINITE) {\n            return 0;\n        }\n\n        // Handle special case when a or b is zero, by ignoring the exponents\n        if (b.mant[b.mant.length-1] != 0 && a.mant[b.mant.length-1] != 0) {\n            if (a.exp < b.exp) {\n                return -a.sign;\n            }\n\n            if (a.exp > b.exp) {\n                return a.sign;\n            }\n        }\n\n        // compare the mantissas\n        for (int i = a.mant.length - 1; i >= 0; i--) {\n            if (a.mant[i] > b.mant[i]) {\n                return a.sign;\n            }\n\n            if (a.mant[i] < b.mant[i]) {\n                return -a.sign;\n            }\n        }\n\n        return 0;\n\n    }\n\n    /** Round to nearest integer using the round-half-even method.\n     *  That is round to nearest integer unless both are equidistant.\n     *  In which case round to the even one.\n     *  @return rounded value\n     * @since 3.2\n     */\n    public Dfp rint() {\n        return trunc(DfpField.RoundingMode.ROUND_HALF_EVEN);\n    }\n\n    /** Round to an integer using the round floor mode.\n     * That is, round toward -Infinity\n     *  @return rounded value\n     * @since 3.2\n     */\n    public Dfp floor() {\n        return trunc(DfpField.RoundingMode.ROUND_FLOOR);\n    }\n\n    /** Round to an integer using the round ceil mode.\n     * That is, round toward +Infinity\n     *  @return rounded value\n     * @since 3.2\n     */\n    public Dfp ceil() {\n        return trunc(DfpField.RoundingMode.ROUND_CEIL);\n    }\n\n    /** Returns the IEEE remainder.\n     * @param d divisor\n     * @return this less n &times; d, where n is the integer closest to this/d\n     * @since 3.2\n     */\n    public Dfp remainder(final Dfp d) {\n\n        final Dfp result = this.subtract(this.divide(d).rint().multiply(d));\n\n        // IEEE 854-1987 says that if the result is zero, then it carries the sign of this\n        if (result.mant[mant.length-1] == 0) {\n            result.sign = sign;\n        }\n\n        return result;\n\n    }\n\n    /** Does the integer conversions with the specified rounding.\n     * @param rmode rounding mode to use\n     * @return truncated value\n     */\n    protected Dfp trunc(final DfpField.RoundingMode rmode) {\n        boolean changed = false;\n\n        if (isNaN()) {\n            return newInstance(this);\n        }\n\n        if (nans == INFINITE) {\n            return newInstance(this);\n        }\n\n        if (mant[mant.length-1] == 0) {\n            // a is zero\n            return newInstance(this);\n        }\n\n        /* If the exponent is less than zero then we can certainly\n         * return zero */\n        if (exp < 0) {\n            field.setIEEEFlagsBits(DfpField.FLAG_INEXACT);\n            Dfp result = newInstance(getZero());\n            result = dotrap(DfpField.FLAG_INEXACT, TRUNC_TRAP, this, result);\n            return result;\n        }\n\n        /* If the exponent is greater than or equal to digits, then it\n         * must already be an integer since there is no precision left\n         * for any fractional part */\n\n        if (exp >= mant.length) {\n            return newInstance(this);\n        }\n\n        /* General case:  create another dfp, result, that contains the\n         * a with the fractional part lopped off.  */\n\n        Dfp result = newInstance(this);\n        for (int i = 0; i < mant.length-result.exp; i++) {\n            changed |= result.mant[i] != 0;\n            result.mant[i] = 0;\n        }\n\n        if (changed) {\n            switch (rmode) {\n                case ROUND_FLOOR:\n                    if (result.sign == -1) {\n                        // then we must increment the mantissa by one\n                        result = result.add(newInstance(-1));\n                    }\n                    break;\n\n                case ROUND_CEIL:\n                    if (result.sign == 1) {\n                        // then we must increment the mantissa by one\n                        result = result.add(getOne());\n                    }\n                    break;\n\n                case ROUND_HALF_EVEN:\n                default:\n                    final Dfp half = newInstance(\"0.5\");\n                    Dfp a = subtract(result);  // difference between this and result\n                    a.sign = 1;            // force positive (take abs)\n                    if (a.greaterThan(half)) {\n                        a = newInstance(getOne());\n                        a.sign = sign;\n                        result = result.add(a);\n                    }\n\n                    /** If exactly equal to 1/2 and odd then increment */\n                    if (a.equals(half) && result.exp > 0 && (result.mant[mant.length-result.exp]&1) != 0) {\n                        a = newInstance(getOne());\n                        a.sign = sign;\n                        result = result.add(a);\n                    }\n                    break;\n            }\n\n            field.setIEEEFlagsBits(DfpField.FLAG_INEXACT);  // signal inexact\n            result = dotrap(DfpField.FLAG_INEXACT, TRUNC_TRAP, this, result);\n            return result;\n        }\n\n        return result;\n    }\n\n    /** Convert this to an integer.\n     * If greater than 2147483647, it returns 2147483647. If less than -2147483648 it returns -2147483648.\n     * @return converted number\n     */\n    public int intValue() {\n        Dfp rounded;\n        int result = 0;\n\n        rounded = rint();\n\n        if (rounded.greaterThan(newInstance(2147483647))) {\n            return 2147483647;\n        }\n\n        if (rounded.lessThan(newInstance(-2147483648))) {\n            return -2147483648;\n        }\n\n        for (int i = mant.length - 1; i >= mant.length - rounded.exp; i--) {\n            result = result * RADIX + rounded.mant[i];\n        }\n\n        if (rounded.sign == -1) {\n            result = -result;\n        }\n\n        return result;\n    }\n\n    /** Get the exponent of the greatest power of 10000 that is\n     *  less than or equal to the absolute value of this.  I.E.  if\n     *  this is 10<sup>6</sup> then log10K would return 1.\n     *  @return integer base 10000 logarithm\n     */\n    public int log10K() {\n        return exp - 1;\n    }\n\n    /** Get the specified  power of 10000.\n     * @param e desired power\n     * @return 10000<sup>e</sup>\n     */\n    public Dfp power10K(final int e) {\n        Dfp d = newInstance(getOne());\n        d.exp = e + 1;\n        return d;\n    }\n\n    /** Get the exponent of the greatest power of 10 that is less than or equal to abs(this).\n     *  @return integer base 10 logarithm\n     * @since 3.2\n     */\n    public int intLog10()  {\n        if (mant[mant.length-1] > 1000) {\n            return exp * 4 - 1;\n        }\n        if (mant[mant.length-1] > 100) {\n            return exp * 4 - 2;\n        }\n        if (mant[mant.length-1] > 10) {\n            return exp * 4 - 3;\n        }\n        return exp * 4 - 4;\n    }\n\n    /** Return the specified  power of 10.\n     * @param e desired power\n     * @return 10<sup>e</sup>\n     */\n    public Dfp power10(final int e) {\n        Dfp d = newInstance(getOne());\n\n        if (e >= 0) {\n            d.exp = e / 4 + 1;\n        } else {\n            d.exp = (e + 1) / 4;\n        }\n\n        switch ((e % 4 + 4) % 4) {\n            case 0:\n                break;\n            case 1:\n                d = d.multiply(10);\n                break;\n            case 2:\n                d = d.multiply(100);\n                break;\n            default:\n                d = d.multiply(1000);\n        }\n\n        return d;\n    }\n\n    /** Negate the mantissa of this by computing the complement.\n     *  Leaves the sign bit unchanged, used internally by add.\n     *  Denormalized numbers are handled properly here.\n     *  @param extra ???\n     *  @return ???\n     */\n    protected int complement(int extra) {\n\n        extra = RADIX-extra;\n        for (int i = 0; i < mant.length; i++) {\n            mant[i] = RADIX-mant[i]-1;\n        }\n\n        int rh = extra / RADIX;\n        extra -= rh * RADIX;\n        for (int i = 0; i < mant.length; i++) {\n            final int r = mant[i] + rh;\n            rh = r / RADIX;\n            mant[i] = r - rh * RADIX;\n        }\n\n        return extra;\n    }\n\n    /** Add x to this.\n     * @param x number to add\n     * @return sum of this and x\n     */\n    public Dfp add(final Dfp x) {\n\n        // make sure we don't mix number with different precision\n        if (field.getRadixDigits() != x.field.getRadixDigits()) {\n            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);\n            final Dfp result = newInstance(getZero());\n            result.nans = QNAN;\n            return dotrap(DfpField.FLAG_INVALID, ADD_TRAP, x, result);\n        }\n\n        /* handle special cases */\n        if (nans != FINITE || x.nans != FINITE) {\n            if (isNaN()) {\n                return this;\n            }\n\n            if (x.isNaN()) {\n                return x;\n            }\n\n            if (nans == INFINITE && x.nans == FINITE) {\n                return this;\n            }\n\n            if (x.nans == INFINITE && nans == FINITE) {\n                return x;\n            }\n\n            if (x.nans == INFINITE && nans == INFINITE && sign == x.sign) {\n                return x;\n            }\n\n            if (x.nans == INFINITE && nans == INFINITE && sign != x.sign) {\n                field.setIEEEFlagsBits(DfpField.FLAG_INVALID);\n                Dfp result = newInstance(getZero());\n                result.nans = QNAN;\n                result = dotrap(DfpField.FLAG_INVALID, ADD_TRAP, x, result);\n                return result;\n            }\n        }\n\n        /* copy this and the arg */\n        Dfp a = newInstance(this);\n        Dfp b = newInstance(x);\n\n        /* initialize the result object */\n        Dfp result = newInstance(getZero());\n\n        /* Make all numbers positive, but remember their sign */\n        final byte asign = a.sign;\n        final byte bsign = b.sign;\n\n        a.sign = 1;\n        b.sign = 1;\n\n        /* The result will be signed like the arg with greatest magnitude */\n        byte rsign = bsign;\n        if (compare(a, b) > 0) {\n            rsign = asign;\n        }\n\n        /* Handle special case when a or b is zero, by setting the exponent\n       of the zero number equal to the other one.  This avoids an alignment\n       which would cause catastropic loss of precision */\n        if (b.mant[mant.length-1] == 0) {\n            b.exp = a.exp;\n        }\n\n        if (a.mant[mant.length-1] == 0) {\n            a.exp = b.exp;\n        }\n\n        /* align number with the smaller exponent */\n        int aextradigit = 0;\n        int bextradigit = 0;\n        if (a.exp < b.exp) {\n            aextradigit = a.align(b.exp);\n        } else {\n            bextradigit = b.align(a.exp);\n        }\n\n        /* complement the smaller of the two if the signs are different */\n        if (asign != bsign) {\n            if (asign == rsign) {\n                bextradigit = b.complement(bextradigit);\n            } else {\n                aextradigit = a.complement(aextradigit);\n            }\n        }\n\n        /* add the mantissas */\n        int rh = 0; /* acts as a carry */\n        for (int i = 0; i < mant.length; i++) {\n            final int r = a.mant[i]+b.mant[i]+rh;\n            rh = r / RADIX;\n            result.mant[i] = r - rh * RADIX;\n        }\n        result.exp = a.exp;\n        result.sign = rsign;\n\n        /* handle overflow -- note, when asign!=bsign an overflow is\n         * normal and should be ignored.  */\n\n        if (rh != 0 && (asign == bsign)) {\n            final int lostdigit = result.mant[0];\n            result.shiftRight();\n            result.mant[mant.length-1] = rh;\n            final int excp = result.round(lostdigit);\n            if (excp != 0) {\n                result = dotrap(excp, ADD_TRAP, x, result);\n            }\n        }\n\n        /* normalize the result */\n        for (int i = 0; i < mant.length; i++) {\n            if (result.mant[mant.length-1] != 0) {\n                break;\n            }\n            result.shiftLeft();\n            if (i == 0) {\n                result.mant[0] = aextradigit+bextradigit;\n                aextradigit = 0;\n                bextradigit = 0;\n            }\n        }\n\n        /* result is zero if after normalization the most sig. digit is zero */\n        if (result.mant[mant.length-1] == 0) {\n            result.exp = 0;\n\n            if (asign != bsign) {\n                // Unless adding 2 negative zeros, sign is positive\n                result.sign = 1;  // Per IEEE 854-1987 Section 6.3\n            }\n        }\n\n        /* Call round to test for over/under flows */\n        final int excp = result.round(aextradigit + bextradigit);\n        if (excp != 0) {\n            result = dotrap(excp, ADD_TRAP, x, result);\n        }\n\n        return result;\n    }\n\n    /** Returns a number that is this number with the sign bit reversed.\n     * @return the opposite of this\n     */\n    public Dfp negate() {\n        Dfp result = newInstance(this);\n        result.sign = (byte) - result.sign;\n        return result;\n    }\n\n    /** Subtract x from this.\n     * @param x number to subtract\n     * @return difference of this and a\n     */\n    public Dfp subtract(final Dfp x) {\n        return add(x.negate());\n    }\n\n    /** Round this given the next digit n using the current rounding mode.\n     * @param n ???\n     * @return the IEEE flag if an exception occurred\n     */\n    protected int round(int n) {\n        boolean inc = false;\n        switch (field.getRoundingMode()) {\n            case ROUND_DOWN:\n                inc = false;\n                break;\n\n            case ROUND_UP:\n                inc = n != 0;       // round up if n!=0\n                break;\n\n            case ROUND_HALF_UP:\n                inc = n >= 5000;  // round half up\n                break;\n\n            case ROUND_HALF_DOWN:\n                inc = n > 5000;  // round half down\n                break;\n\n            case ROUND_HALF_EVEN:\n                inc = n > 5000 || (n == 5000 && (mant[0] & 1) == 1);  // round half-even\n                break;\n\n            case ROUND_HALF_ODD:\n                inc = n > 5000 || (n == 5000 && (mant[0] & 1) == 0);  // round half-odd\n                break;\n\n            case ROUND_CEIL:\n                inc = sign == 1 && n != 0;  // round ceil\n                break;\n\n            case ROUND_FLOOR:\n            default:\n                inc = sign == -1 && n != 0;  // round floor\n                break;\n        }\n\n        if (inc) {\n            // increment if necessary\n            int rh = 1;\n            for (int i = 0; i < mant.length; i++) {\n                final int r = mant[i] + rh;\n                rh = r / RADIX;\n                mant[i] = r - rh * RADIX;\n            }\n\n            if (rh != 0) {\n                shiftRight();\n                mant[mant.length-1] = rh;\n            }\n        }\n\n        // check for exceptional cases and raise signals if necessary\n        if (exp < MIN_EXP) {\n            // Gradual Underflow\n            field.setIEEEFlagsBits(DfpField.FLAG_UNDERFLOW);\n            return DfpField.FLAG_UNDERFLOW;\n        }\n\n        if (exp > MAX_EXP) {\n            // Overflow\n            field.setIEEEFlagsBits(DfpField.FLAG_OVERFLOW);\n            return DfpField.FLAG_OVERFLOW;\n        }\n\n        if (n != 0) {\n            // Inexact\n            field.setIEEEFlagsBits(DfpField.FLAG_INEXACT);\n            return DfpField.FLAG_INEXACT;\n        }\n\n        return 0;\n\n    }\n\n    /** Multiply this by x.\n     * @param x multiplicand\n     * @return product of this and x\n     */\n    public Dfp multiply(final Dfp x) {\n\n        // make sure we don't mix number with different precision\n        if (field.getRadixDigits() != x.field.getRadixDigits()) {\n            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);\n            final Dfp result = newInstance(getZero());\n            result.nans = QNAN;\n            return dotrap(DfpField.FLAG_INVALID, MULTIPLY_TRAP, x, result);\n        }\n\n        Dfp result = newInstance(getZero());\n\n        /* handle special cases */\n        if (nans != FINITE || x.nans != FINITE) {\n            if (isNaN()) {\n                return this;\n            }\n\n            if (x.isNaN()) {\n                return x;\n            }\n\n            if (nans == INFINITE && x.nans == FINITE && x.mant[mant.length-1] != 0) {\n                result = newInstance(this);\n                result.sign = (byte) (sign * x.sign);\n                return result;\n            }\n\n            if (x.nans == INFINITE && nans == FINITE && mant[mant.length-1] != 0) {\n                result = newInstance(x);\n                result.sign = (byte) (sign * x.sign);\n                return result;\n            }\n\n            if (x.nans == INFINITE && nans == INFINITE) {\n                result = newInstance(this);\n                result.sign = (byte) (sign * x.sign);\n                return result;\n            }\n\n            if ( (x.nans == INFINITE && nans == FINITE && mant[mant.length-1] == 0) ||\n                    (nans == INFINITE && x.nans == FINITE && x.mant[mant.length-1] == 0) ) {\n                field.setIEEEFlagsBits(DfpField.FLAG_INVALID);\n                result = newInstance(getZero());\n                result.nans = QNAN;\n                result = dotrap(DfpField.FLAG_INVALID, MULTIPLY_TRAP, x, result);\n                return result;\n            }\n        }\n\n        int[] product = new int[mant.length*2];  // Big enough to hold even the largest result\n\n        for (int i = 0; i < mant.length; i++) {\n            int rh = 0;  // acts as a carry\n            for (int j=0; j<mant.length; j++) {\n                int r = mant[i] * x.mant[j];    // multiply the 2 digits\n                r += product[i+j] + rh;  // add to the product digit with carry in\n\n                rh = r / RADIX;\n                product[i+j] = r - rh * RADIX;\n            }\n            product[i+mant.length] = rh;\n        }\n\n        // Find the most sig digit\n        int md = mant.length * 2 - 1;  // default, in case result is zero\n        for (int i = mant.length * 2 - 1; i >= 0; i--) {\n            if (product[i] != 0) {\n                md = i;\n                break;\n            }\n        }\n\n        // Copy the digits into the result\n        for (int i = 0; i < mant.length; i++) {\n            result.mant[mant.length - i - 1] = product[md - i];\n        }\n\n        // Fixup the exponent.\n        result.exp = exp + x.exp + md - 2 * mant.length + 1;\n        result.sign = (byte)((sign == x.sign)?1:-1);\n\n        if (result.mant[mant.length-1] == 0) {\n            // if result is zero, set exp to zero\n            result.exp = 0;\n        }\n\n        final int excp;\n        if (md > (mant.length-1)) {\n            excp = result.round(product[md-mant.length]);\n        } else {\n            excp = result.round(0); // has no effect except to check status\n        }\n\n        if (excp != 0) {\n            result = dotrap(excp, MULTIPLY_TRAP, x, result);\n        }\n\n        return result;\n\n    }\n\n    /** Multiply this by a single digit x.\n     * @param x multiplicand\n     * @return product of this and x\n     */\n    public Dfp multiply(final int x) {\n        if (x >= 0 && x < RADIX) {\n            return multiplyFast(x);\n        } else {\n            return multiply(newInstance(x));\n        }\n    }\n\n    /** Multiply this by a single digit 0&lt;=x&lt;radix.\n     * There are speed advantages in this special case.\n     * @param x multiplicand\n     * @return product of this and x\n     */\n    private Dfp multiplyFast(final int x) {\n        Dfp result = newInstance(this);\n\n        /* handle special cases */\n        if (nans != FINITE) {\n            if (isNaN()) {\n                return this;\n            }\n\n            if (nans == INFINITE && x != 0) {\n                result = newInstance(this);\n                return result;\n            }\n\n            if (nans == INFINITE && x == 0) {\n                field.setIEEEFlagsBits(DfpField.FLAG_INVALID);\n                result = newInstance(getZero());\n                result.nans = QNAN;\n                result = dotrap(DfpField.FLAG_INVALID, MULTIPLY_TRAP, newInstance(getZero()), result);\n                return result;\n            }\n        }\n\n        /* range check x */\n        if (x < 0 || x >= RADIX) {\n            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);\n            result = newInstance(getZero());\n            result.nans = QNAN;\n            result = dotrap(DfpField.FLAG_INVALID, MULTIPLY_TRAP, result, result);\n            return result;\n        }\n\n        int rh = 0;\n        for (int i = 0; i < mant.length; i++) {\n            final int r = mant[i] * x + rh;\n            rh = r / RADIX;\n            result.mant[i] = r - rh * RADIX;\n        }\n\n        int lostdigit = 0;\n        if (rh != 0) {\n            lostdigit = result.mant[0];\n            result.shiftRight();\n            result.mant[mant.length-1] = rh;\n        }\n\n        if (result.mant[mant.length-1] == 0) { // if result is zero, set exp to zero\n            result.exp = 0;\n        }\n\n        final int excp = result.round(lostdigit);\n        if (excp != 0) {\n            result = dotrap(excp, MULTIPLY_TRAP, result, result);\n        }\n\n        return result;\n    }\n\n    /** Divide this by divisor.\n     * @param divisor divisor\n     * @return quotient of this by divisor\n     */\n    public Dfp divide(Dfp divisor) {\n        int dividend[]; // current status of the dividend\n        int quotient[]; // quotient\n        int remainder[];// remainder\n        int qd;         // current quotient digit we're working with\n        int nsqd;       // number of significant quotient digits we have\n        int trial=0;    // trial quotient digit\n        int minadj;     // minimum adjustment\n        boolean trialgood; // Flag to indicate a good trail digit\n        int md=0;       // most sig digit in result\n        int excp;       // exceptions\n\n        // make sure we don't mix number with different precision\n        if (field.getRadixDigits() != divisor.field.getRadixDigits()) {\n            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);\n            final Dfp result = newInstance(getZero());\n            result.nans = QNAN;\n            return dotrap(DfpField.FLAG_INVALID, DIVIDE_TRAP, divisor, result);\n        }\n\n        Dfp result = newInstance(getZero());\n\n        /* handle special cases */\n        if (nans != FINITE || divisor.nans != FINITE) {\n            if (isNaN()) {\n                return this;\n            }\n\n            if (divisor.isNaN()) {\n                return divisor;\n            }\n\n            if (nans == INFINITE && divisor.nans == FINITE) {\n                result = newInstance(this);\n                result.sign = (byte) (sign * divisor.sign);\n                return result;\n            }\n\n            if (divisor.nans == INFINITE && nans == FINITE) {\n                result = newInstance(getZero());\n                result.sign = (byte) (sign * divisor.sign);\n                return result;\n            }\n\n            if (divisor.nans == INFINITE && nans == INFINITE) {\n                field.setIEEEFlagsBits(DfpField.FLAG_INVALID);\n                result = newInstance(getZero());\n                result.nans = QNAN;\n                result = dotrap(DfpField.FLAG_INVALID, DIVIDE_TRAP, divisor, result);\n                return result;\n            }\n        }\n\n        /* Test for divide by zero */\n        if (divisor.mant[mant.length-1] == 0) {\n            field.setIEEEFlagsBits(DfpField.FLAG_DIV_ZERO);\n            result = newInstance(getZero());\n            result.sign = (byte) (sign * divisor.sign);\n            result.nans = INFINITE;\n            result = dotrap(DfpField.FLAG_DIV_ZERO, DIVIDE_TRAP, divisor, result);\n            return result;\n        }\n\n        dividend = new int[mant.length+1];  // one extra digit needed\n        quotient = new int[mant.length+2];  // two extra digits needed 1 for overflow, 1 for rounding\n        remainder = new int[mant.length+1]; // one extra digit needed\n\n        /* Initialize our most significant digits to zero */\n\n        dividend[mant.length] = 0;\n        quotient[mant.length] = 0;\n        quotient[mant.length+1] = 0;\n        remainder[mant.length] = 0;\n\n        /* copy our mantissa into the dividend, initialize the\n       quotient while we are at it */\n\n        for (int i = 0; i < mant.length; i++) {\n            dividend[i] = mant[i];\n            quotient[i] = 0;\n            remainder[i] = 0;\n        }\n\n        /* outer loop.  Once per quotient digit */\n        nsqd = 0;\n        for (qd = mant.length+1; qd >= 0; qd--) {\n            /* Determine outer limits of our quotient digit */\n\n            // r =  most sig 2 digits of dividend\n            final int divMsb = dividend[mant.length]*RADIX+dividend[mant.length-1];\n            int min = divMsb       / (divisor.mant[mant.length-1]+1);\n            int max = (divMsb + 1) / divisor.mant[mant.length-1];\n\n            trialgood = false;\n            while (!trialgood) {\n                // try the mean\n                trial = (min+max)/2;\n\n                /* Multiply by divisor and store as remainder */\n                int rh = 0;\n                for (int i = 0; i < mant.length + 1; i++) {\n                    int dm = (i<mant.length)?divisor.mant[i]:0;\n                    final int r = (dm * trial) + rh;\n                    rh = r / RADIX;\n                    remainder[i] = r - rh * RADIX;\n                }\n\n                /* subtract the remainder from the dividend */\n                rh = 1;  // carry in to aid the subtraction\n                for (int i = 0; i < mant.length + 1; i++) {\n                    final int r = ((RADIX-1) - remainder[i]) + dividend[i] + rh;\n                    rh = r / RADIX;\n                    remainder[i] = r - rh * RADIX;\n                }\n\n                /* Lets analyze what we have here */\n                if (rh == 0) {\n                    // trial is too big -- negative remainder\n                    max = trial-1;\n                    continue;\n                }\n\n                /* find out how far off the remainder is telling us we are */\n                minadj = (remainder[mant.length] * RADIX)+remainder[mant.length-1];\n                minadj /= divisor.mant[mant.length-1] + 1;\n\n                if (minadj >= 2) {\n                    min = trial+minadj;  // update the minimum\n                    continue;\n                }\n\n                /* May have a good one here, check more thoroughly.  Basically\n           its a good one if it is less than the divisor */\n                trialgood = false;  // assume false\n                for (int i = mant.length - 1; i >= 0; i--) {\n                    if (divisor.mant[i] > remainder[i]) {\n                        trialgood = true;\n                    }\n                    if (divisor.mant[i] < remainder[i]) {\n                        break;\n                    }\n                }\n\n                if (remainder[mant.length] != 0) {\n                    trialgood = false;\n                }\n\n                if (trialgood == false) {\n                    min = trial+1;\n                }\n            }\n\n            /* Great we have a digit! */\n            quotient[qd] = trial;\n            if (trial != 0 || nsqd != 0) {\n                nsqd++;\n            }\n\n            if (field.getRoundingMode() == DfpField.RoundingMode.ROUND_DOWN && nsqd == mant.length) {\n                // We have enough for this mode\n                break;\n            }\n\n            if (nsqd > mant.length) {\n                // We have enough digits\n                break;\n            }\n\n            /* move the remainder into the dividend while left shifting */\n            dividend[0] = 0;\n            for (int i = 0; i < mant.length; i++) {\n                dividend[i + 1] = remainder[i];\n            }\n        }\n\n        /* Find the most sig digit */\n        md = mant.length;  // default\n        for (int i = mant.length + 1; i >= 0; i--) {\n            if (quotient[i] != 0) {\n                md = i;\n                break;\n            }\n        }\n\n        /* Copy the digits into the result */\n        for (int i=0; i<mant.length; i++) {\n            result.mant[mant.length-i-1] = quotient[md-i];\n        }\n\n        /* Fixup the exponent. */\n        result.exp = exp - divisor.exp + md - mant.length;\n        result.sign = (byte) ((sign == divisor.sign) ? 1 : -1);\n\n        if (result.mant[mant.length-1] == 0) { // if result is zero, set exp to zero\n            result.exp = 0;\n        }\n\n        if (md > (mant.length-1)) {\n            excp = result.round(quotient[md-mant.length]);\n        } else {\n            excp = result.round(0);\n        }\n\n        if (excp != 0) {\n            result = dotrap(excp, DIVIDE_TRAP, divisor, result);\n        }\n\n        return result;\n    }\n\n    /** Divide by a single digit less than radix.\n     *  Special case, so there are speed advantages. 0 &lt;= divisor &lt; radix\n     * @param divisor divisor\n     * @return quotient of this by divisor\n     */\n    public Dfp divide(int divisor) {\n\n        // Handle special cases\n        if (nans != FINITE) {\n            if (isNaN()) {\n                return this;\n            }\n\n            if (nans == INFINITE) {\n                return newInstance(this);\n            }\n        }\n\n        // Test for divide by zero\n        if (divisor == 0) {\n            field.setIEEEFlagsBits(DfpField.FLAG_DIV_ZERO);\n            Dfp result = newInstance(getZero());\n            result.sign = sign;\n            result.nans = INFINITE;\n            result = dotrap(DfpField.FLAG_DIV_ZERO, DIVIDE_TRAP, getZero(), result);\n            return result;\n        }\n\n        // range check divisor\n        if (divisor < 0 || divisor >= RADIX) {\n            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);\n            Dfp result = newInstance(getZero());\n            result.nans = QNAN;\n            result = dotrap(DfpField.FLAG_INVALID, DIVIDE_TRAP, result, result);\n            return result;\n        }\n\n        Dfp result = newInstance(this);\n\n        int rl = 0;\n        for (int i = mant.length-1; i >= 0; i--) {\n            final int r = rl*RADIX + result.mant[i];\n            final int rh = r / divisor;\n            rl = r - rh * divisor;\n            result.mant[i] = rh;\n        }\n\n        if (result.mant[mant.length-1] == 0) {\n            // normalize\n            result.shiftLeft();\n            final int r = rl * RADIX;        // compute the next digit and put it in\n            final int rh = r / divisor;\n            rl = r - rh * divisor;\n            result.mant[0] = rh;\n        }\n\n        final int excp = result.round(rl * RADIX / divisor);  // do the rounding\n        if (excp != 0) {\n            result = dotrap(excp, DIVIDE_TRAP, result, result);\n        }\n\n        return result;\n\n    }\n\n    /** {@inheritDoc} */\n    public Dfp reciprocal() {\n        return field.getOne().divide(this);\n    }\n\n    /** Compute the square root.\n     * @return square root of the instance\n     * @since 3.2\n     */\n    public Dfp sqrt() {\n\n        // check for unusual cases\n        if (nans == FINITE && mant[mant.length-1] == 0) {\n            // if zero\n            return newInstance(this);\n        }\n\n        if (nans != FINITE) {\n            if (nans == INFINITE && sign == 1) {\n                // if positive infinity\n                return newInstance(this);\n            }\n\n            if (nans == QNAN) {\n                return newInstance(this);\n            }\n\n            if (nans == SNAN) {\n                Dfp result;\n\n                field.setIEEEFlagsBits(DfpField.FLAG_INVALID);\n                result = newInstance(this);\n                result = dotrap(DfpField.FLAG_INVALID, SQRT_TRAP, null, result);\n                return result;\n            }\n        }\n\n        if (sign == -1) {\n            // if negative\n            Dfp result;\n\n            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);\n            result = newInstance(this);\n            result.nans = QNAN;\n            result = dotrap(DfpField.FLAG_INVALID, SQRT_TRAP, null, result);\n            return result;\n        }\n\n        Dfp x = newInstance(this);\n\n        /* Lets make a reasonable guess as to the size of the square root */\n        if (x.exp < -1 || x.exp > 1) {\n            x.exp = this.exp / 2;\n        }\n\n        /* Coarsely estimate the mantissa */\n        switch (x.mant[mant.length-1] / 2000) {\n            case 0:\n                x.mant[mant.length-1] = x.mant[mant.length-1]/2+1;\n                break;\n            case 2:\n                x.mant[mant.length-1] = 1500;\n                break;\n            case 3:\n                x.mant[mant.length-1] = 2200;\n                break;\n            default:\n                x.mant[mant.length-1] = 3000;\n        }\n\n        Dfp dx = newInstance(x);\n\n        /* Now that we have the first pass estimate, compute the rest\n       by the formula dx = (y - x*x) / (2x); */\n\n        Dfp px  = getZero();\n        Dfp ppx = getZero();\n        while (x.unequal(px)) {\n            dx = newInstance(x);\n            dx.sign = -1;\n            dx = dx.add(this.divide(x));\n            dx = dx.divide(2);\n            ppx = px;\n            px = x;\n            x = x.add(dx);\n\n            if (x.equals(ppx)) {\n                // alternating between two values\n                break;\n            }\n\n            // if dx is zero, break.  Note testing the most sig digit\n            // is a sufficient test since dx is normalized\n            if (dx.mant[mant.length-1] == 0) {\n                break;\n            }\n        }\n\n        return x;\n\n    }\n\n    /** Get a string representation of the instance.\n     * @return string representation of the instance\n     */\n    @Override\n    public String toString() {\n        if (nans != FINITE) {\n            // if non-finite exceptional cases\n            if (nans == INFINITE) {\n                return (sign < 0) ? NEG_INFINITY_STRING : POS_INFINITY_STRING;\n            } else {\n                return NAN_STRING;\n            }\n        }\n\n        if (exp > mant.length || exp < -1) {\n            return dfp2sci();\n        }\n\n        return dfp2string();\n\n    }\n\n    /** Convert an instance to a string using scientific notation.\n     * @return string representation of the instance in scientific notation\n     */\n    protected String dfp2sci() {\n        char rawdigits[]    = new char[mant.length * 4];\n        char outputbuffer[] = new char[mant.length * 4 + 20];\n        int p;\n        int q;\n        int e;\n        int ae;\n        int shf;\n\n        // Get all the digits\n        p = 0;\n        for (int i = mant.length - 1; i >= 0; i--) {\n            rawdigits[p++] = (char) ((mant[i] / 1000) + '0');\n            rawdigits[p++] = (char) (((mant[i] / 100) %10) + '0');\n            rawdigits[p++] = (char) (((mant[i] / 10) % 10) + '0');\n            rawdigits[p++] = (char) (((mant[i]) % 10) + '0');\n        }\n\n        // Find the first non-zero one\n        for (p = 0; p < rawdigits.length; p++) {\n            if (rawdigits[p] != '0') {\n                break;\n            }\n        }\n        shf = p;\n\n        // Now do the conversion\n        q = 0;\n        if (sign == -1) {\n            outputbuffer[q++] = '-';\n        }\n\n        if (p != rawdigits.length) {\n            // there are non zero digits...\n            outputbuffer[q++] = rawdigits[p++];\n            outputbuffer[q++] = '.';\n\n            while (p<rawdigits.length) {\n                outputbuffer[q++] = rawdigits[p++];\n            }\n        } else {\n            outputbuffer[q++] = '0';\n            outputbuffer[q++] = '.';\n            outputbuffer[q++] = '0';\n            outputbuffer[q++] = 'e';\n            outputbuffer[q++] = '0';\n            return new String(outputbuffer, 0, 5);\n        }\n\n        outputbuffer[q++] = 'e';\n\n        // Find the msd of the exponent\n\n        e = exp * 4 - shf - 1;\n        ae = e;\n        if (e < 0) {\n            ae = -e;\n        }\n\n        // Find the largest p such that p < e\n        for (p = 1000000000; p > ae; p /= 10) {\n            // nothing to do\n        }\n\n        if (e < 0) {\n            outputbuffer[q++] = '-';\n        }\n\n        while (p > 0) {\n            outputbuffer[q++] = (char)(ae / p + '0');\n            ae %= p;\n            p /= 10;\n        }\n\n        return new String(outputbuffer, 0, q);\n\n    }\n\n    /** Convert an instance to a string using normal notation.\n     * @return string representation of the instance in normal notation\n     */\n    protected String dfp2string() {\n        char buffer[] = new char[mant.length*4 + 20];\n        int p = 1;\n        int q;\n        int e = exp;\n        boolean pointInserted = false;\n\n        buffer[0] = ' ';\n\n        if (e <= 0) {\n            buffer[p++] = '0';\n            buffer[p++] = '.';\n            pointInserted = true;\n        }\n\n        while (e < 0) {\n            buffer[p++] = '0';\n            buffer[p++] = '0';\n            buffer[p++] = '0';\n            buffer[p++] = '0';\n            e++;\n        }\n\n        for (int i = mant.length - 1; i >= 0; i--) {\n            buffer[p++] = (char) ((mant[i] / 1000) + '0');\n            buffer[p++] = (char) (((mant[i] / 100) % 10) + '0');\n            buffer[p++] = (char) (((mant[i] / 10) % 10) + '0');\n            buffer[p++] = (char) (((mant[i]) % 10) + '0');\n            if (--e == 0) {\n                buffer[p++] = '.';\n                pointInserted = true;\n            }\n        }\n\n        while (e > 0) {\n            buffer[p++] = '0';\n            buffer[p++] = '0';\n            buffer[p++] = '0';\n            buffer[p++] = '0';\n            e--;\n        }\n\n        if (!pointInserted) {\n            // Ensure we have a radix point!\n            buffer[p++] = '.';\n        }\n\n        // Suppress leading zeros\n        q = 1;\n        while (buffer[q] == '0') {\n            q++;\n        }\n        if (buffer[q] == '.') {\n            q--;\n        }\n\n        // Suppress trailing zeros\n        while (buffer[p-1] == '0') {\n            p--;\n        }\n\n        // Insert sign\n        if (sign < 0) {\n            buffer[--q] = '-';\n        }\n\n        return new String(buffer, q, p - q);\n\n    }\n\n    /** Raises a trap.  This does not set the corresponding flag however.\n     *  @param type the trap type\n     *  @param what - name of routine trap occurred in\n     *  @param oper - input operator to function\n     *  @param result - the result computed prior to the trap\n     *  @return The suggested return value from the trap handler\n     */\n    public Dfp dotrap(int type, String what, Dfp oper, Dfp result) {\n        Dfp def = result;\n\n        switch (type) {\n            case DfpField.FLAG_INVALID:\n                def = newInstance(getZero());\n                def.sign = result.sign;\n                def.nans = QNAN;\n                break;\n\n            case DfpField.FLAG_DIV_ZERO:\n                if (nans == FINITE && mant[mant.length-1] != 0) {\n                    // normal case, we are finite, non-zero\n                    def = newInstance(getZero());\n                    def.sign = (byte)(sign*oper.sign);\n                    def.nans = INFINITE;\n                }\n\n                if (nans == FINITE && mant[mant.length-1] == 0) {\n                    //  0/0\n                    def = newInstance(getZero());\n                    def.nans = QNAN;\n                }\n\n                if (nans == INFINITE || nans == QNAN) {\n                    def = newInstance(getZero());\n                    def.nans = QNAN;\n                }\n\n                if (nans == INFINITE || nans == SNAN) {\n                    def = newInstance(getZero());\n                    def.nans = QNAN;\n                }\n                break;\n\n            case DfpField.FLAG_UNDERFLOW:\n                if ( (result.exp+mant.length) < MIN_EXP) {\n                    def = newInstance(getZero());\n                    def.sign = result.sign;\n                } else {\n                    def = newInstance(result);  // gradual underflow\n                }\n                result.exp += ERR_SCALE;\n                break;\n\n            case DfpField.FLAG_OVERFLOW:\n                result.exp -= ERR_SCALE;\n                def = newInstance(getZero());\n                def.sign = result.sign;\n                def.nans = INFINITE;\n                break;\n\n            default: def = result; break;\n        }\n\n        return trap(type, what, oper, def, result);\n\n    }\n\n    /** Trap handler.  Subclasses may override this to provide trap\n     *  functionality per IEEE 854-1987.\n     *\n     *  @param type  The exception type - e.g. FLAG_OVERFLOW\n     *  @param what  The name of the routine we were in e.g. divide()\n     *  @param oper  An operand to this function if any\n     *  @param def   The default return value if trap not enabled\n     *  @param result    The result that is specified to be delivered per\n     *                   IEEE 854, if any\n     *  @return the value that should be return by the operation triggering the trap\n     */\n    protected Dfp trap(int type, String what, Dfp oper, Dfp def, Dfp result) {\n        return def;\n    }\n\n    /** Returns the type - one of FINITE, INFINITE, SNAN, QNAN.\n     * @return type of the number\n     */\n    public int classify() {\n        return nans;\n    }\n\n    /** Creates an instance that is the same as x except that it has the sign of y.\n     * abs(x) = dfp.copysign(x, dfp.one)\n     * @param x number to get the value from\n     * @param y number to get the sign from\n     * @return a number with the value of x and the sign of y\n     */\n    public static Dfp copysign(final Dfp x, final Dfp y) {\n        Dfp result = x.newInstance(x);\n        result.sign = y.sign;\n        return result;\n    }\n\n    /** Returns the next number greater than this one in the direction of x.\n     * If this==x then simply returns this.\n     * @param x direction where to look at\n     * @return closest number next to instance in the direction of x\n     */\n    public Dfp nextAfter(final Dfp x) {\n\n        // make sure we don't mix number with different precision\n        if (field.getRadixDigits() != x.field.getRadixDigits()) {\n            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);\n            final Dfp result = newInstance(getZero());\n            result.nans = QNAN;\n            return dotrap(DfpField.FLAG_INVALID, NEXT_AFTER_TRAP, x, result);\n        }\n\n        // if this is greater than x\n        boolean up = false;\n        if (this.lessThan(x)) {\n            up = true;\n        }\n\n        if (compare(this, x) == 0) {\n            return newInstance(x);\n        }\n\n        if (lessThan(getZero())) {\n            up = !up;\n        }\n\n        final Dfp inc;\n        Dfp result;\n        if (up) {\n            inc = newInstance(getOne());\n            inc.exp = this.exp-mant.length+1;\n            inc.sign = this.sign;\n\n            if (this.equals(getZero())) {\n                inc.exp = MIN_EXP-mant.length;\n            }\n\n            result = add(inc);\n        } else {\n            inc = newInstance(getOne());\n            inc.exp = this.exp;\n            inc.sign = this.sign;\n\n            if (this.equals(inc)) {\n                inc.exp = this.exp-mant.length;\n            } else {\n                inc.exp = this.exp-mant.length+1;\n            }\n\n            if (this.equals(getZero())) {\n                inc.exp = MIN_EXP-mant.length;\n            }\n\n            result = this.subtract(inc);\n        }\n\n        if (result.classify() == INFINITE && this.classify() != INFINITE) {\n            field.setIEEEFlagsBits(DfpField.FLAG_INEXACT);\n            result = dotrap(DfpField.FLAG_INEXACT, NEXT_AFTER_TRAP, x, result);\n        }\n\n        if (result.equals(getZero()) && this.equals(getZero()) == false) {\n            field.setIEEEFlagsBits(DfpField.FLAG_INEXACT);\n            result = dotrap(DfpField.FLAG_INEXACT, NEXT_AFTER_TRAP, x, result);\n        }\n\n        return result;\n\n    }\n\n    /** Convert the instance into a double.\n     * @return a double approximating the instance\n     * @see #toSplitDouble()\n     */\n    public double toDouble() {\n\n        if (isInfinite()) {\n            if (lessThan(getZero())) {\n                return Double.NEGATIVE_INFINITY;\n            } else {\n                return Double.POSITIVE_INFINITY;\n            }\n        }\n\n        if (isNaN()) {\n            return Double.NaN;\n        }\n\n        Dfp y = this;\n        boolean negate = false;\n        int cmp0 = compare(this, getZero());\n        if (cmp0 == 0) {\n            return sign < 0 ? -0.0 : +0.0;\n        } else if (cmp0 < 0) {\n            y = negate();\n            negate = true;\n        }\n\n        /* Find the exponent, first estimate by integer log10, then adjust.\n         Should be faster than doing a natural logarithm.  */\n        int exponent = (int)(y.intLog10() * 3.32);\n        if (exponent < 0) {\n            exponent--;\n        }\n\n        Dfp tempDfp = DfpMath.pow(getTwo(), exponent);\n        while (tempDfp.lessThan(y) || tempDfp.equals(y)) {\n            tempDfp = tempDfp.multiply(2);\n            exponent++;\n        }\n        exponent--;\n\n        /* We have the exponent, now work on the mantissa */\n\n        y = y.divide(DfpMath.pow(getTwo(), exponent));\n        if (exponent > -1023) {\n            y = y.subtract(getOne());\n        }\n\n        if (exponent < -1074) {\n            return 0;\n        }\n\n        if (exponent > 1023) {\n            return negate ? Double.NEGATIVE_INFINITY : Double.POSITIVE_INFINITY;\n        }\n\n\n        y = y.multiply(newInstance(4503599627370496l)).rint();\n        String str = y.toString();\n        str = str.substring(0, str.length()-1);\n        long mantissa = Long.parseLong(str);\n\n        if (mantissa == 4503599627370496L) {\n            // Handle special case where we round up to next power of two\n            mantissa = 0;\n            exponent++;\n        }\n\n        /* Its going to be subnormal, so make adjustments */\n        if (exponent <= -1023) {\n            exponent--;\n        }\n\n        while (exponent < -1023) {\n            exponent++;\n            mantissa >>>= 1;\n        }\n\n        long bits = mantissa | ((exponent + 1023L) << 52);\n        double x = Double.longBitsToDouble(bits);\n\n        if (negate) {\n            x = -x;\n        }\n\n        return x;\n\n    }\n\n    /** Convert the instance into a split double.\n     * @return an array of two doubles which sum represent the instance\n     * @see #toDouble()\n     */\n    public double[] toSplitDouble() {\n        double split[] = new double[2];\n        long mask = 0xffffffffc0000000L;\n\n        split[0] = Double.longBitsToDouble(Double.doubleToLongBits(toDouble()) & mask);\n        split[1] = subtract(newInstance(split[0])).toDouble();\n\n        return split;\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public double getReal() {\n        return toDouble();\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp add(final double a) {\n        return add(newInstance(a));\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp subtract(final double a) {\n        return subtract(newInstance(a));\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp multiply(final double a) {\n        return multiply(newInstance(a));\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp divide(final double a) {\n        return divide(newInstance(a));\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp remainder(final double a) {\n        return remainder(newInstance(a));\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public long round() {\n        return FastMath.round(toDouble());\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp signum() {\n        if (isNaN() || isZero()) {\n            return this;\n        } else {\n            return newInstance(sign > 0 ? +1 : -1);\n        }\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp copySign(final Dfp s) {\n        if ((sign >= 0 && s.sign >= 0) || (sign < 0 && s.sign < 0)) { // Sign is currently OK\n            return this;\n        }\n        return negate(); // flip sign\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp copySign(final double s) {\n        long sb = Double.doubleToLongBits(s);\n        if ((sign >= 0 && sb >= 0) || (sign < 0 && sb < 0)) { // Sign is currently OK\n            return this;\n        }\n        return negate(); // flip sign\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp scalb(final int n) {\n        return multiply(DfpMath.pow(getTwo(), n));\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp hypot(final Dfp y) {\n        return multiply(this).add(y.multiply(y)).sqrt();\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp cbrt() {\n        return rootN(3);\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp rootN(final int n) {\n        return (sign >= 0) ?\n               DfpMath.pow(this, getOne().divide(n)) :\n               DfpMath.pow(negate(), getOne().divide(n)).negate();\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp pow(final double p) {\n        return DfpMath.pow(this, newInstance(p));\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp pow(final int n) {\n        return DfpMath.pow(this, n);\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp pow(final Dfp e) {\n        return DfpMath.pow(this, e);\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp exp() {\n        return DfpMath.exp(this);\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp expm1() {\n        return DfpMath.exp(this).subtract(getOne());\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp log() {\n        return DfpMath.log(this);\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp log1p() {\n        return DfpMath.log(this.add(getOne()));\n    }\n\n//  TODO: deactivate this implementation (and return type) in 4.0\n    /** Get the exponent of the greatest power of 10 that is less than or equal to abs(this).\n     *  @return integer base 10 logarithm\n     *  @deprecated as of 3.2, replaced by {@link #intLog10()}, in 4.0 the return type\n     *  will be changed to Dfp\n     */\n    @Deprecated\n    public int log10()  {\n        return intLog10();\n    }\n\n//    TODO: activate this implementation (and return type) in 4.0\n//    /** {@inheritDoc}\n//     * @since 3.2\n//     */\n//    public Dfp log10() {\n//        return DfpMath.log(this).divide(DfpMath.log(newInstance(10)));\n//    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp cos() {\n        return DfpMath.cos(this);\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp sin() {\n        return DfpMath.sin(this);\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp tan() {\n        return DfpMath.tan(this);\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp acos() {\n        return DfpMath.acos(this);\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp asin() {\n        return DfpMath.asin(this);\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp atan() {\n        return DfpMath.atan(this);\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp atan2(final Dfp x)\n        throws DimensionMismatchException {\n\n        // compute r = sqrt(x^2+y^2)\n        final Dfp r = x.multiply(x).add(multiply(this)).sqrt();\n\n        if (x.sign >= 0) {\n\n            // compute atan2(y, x) = 2 atan(y / (r + x))\n            return getTwo().multiply(divide(r.add(x)).atan());\n\n        } else {\n\n            // compute atan2(y, x) = +/- pi - 2 atan(y / (r - x))\n            final Dfp tmp = getTwo().multiply(divide(r.subtract(x)).atan());\n            final Dfp pmPi = newInstance((tmp.sign <= 0) ? -FastMath.PI : FastMath.PI);\n            return pmPi.subtract(tmp);\n\n        }\n\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp cosh() {\n        return DfpMath.exp(this).add(DfpMath.exp(negate())).divide(2);\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp sinh() {\n        return DfpMath.exp(this).subtract(DfpMath.exp(negate())).divide(2);\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp tanh() {\n        final Dfp ePlus  = DfpMath.exp(this);\n        final Dfp eMinus = DfpMath.exp(negate());\n        return ePlus.subtract(eMinus).divide(ePlus.add(eMinus));\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp acosh() {\n        return multiply(this).subtract(getOne()).sqrt().add(this).log();\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp asinh() {\n        return multiply(this).add(getOne()).sqrt().add(this).log();\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp atanh() {\n        return getOne().add(this).divide(getOne().subtract(this)).log().divide(2);\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp linearCombination(final Dfp[] a, final Dfp[] b)\n        throws DimensionMismatchException {\n        if (a.length != b.length) {\n            throw new DimensionMismatchException(a.length, b.length);\n        }\n        Dfp r = getZero();\n        for (int i = 0; i < a.length; ++i) {\n            r = r.add(a[i].multiply(b[i]));\n        }\n        return r;\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp linearCombination(final double[] a, final Dfp[] b)\n        throws DimensionMismatchException {\n        if (a.length != b.length) {\n            throw new DimensionMismatchException(a.length, b.length);\n        }\n        Dfp r = getZero();\n        for (int i = 0; i < a.length; ++i) {\n            r = r.add(b[i].multiply(a[i]));\n        }\n        return r;\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp linearCombination(final Dfp a1, final Dfp b1, final Dfp a2, final Dfp b2) {\n        return a1.multiply(b1).add(a2.multiply(b2));\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp linearCombination(final double a1, final Dfp b1, final double a2, final Dfp b2) {\n        return b1.multiply(a1).add(b2.multiply(a2));\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp linearCombination(final Dfp a1, final Dfp b1,\n                                 final Dfp a2, final Dfp b2,\n                                 final Dfp a3, final Dfp b3) {\n        return a1.multiply(b1).add(a2.multiply(b2)).add(a3.multiply(b3));\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp linearCombination(final double a1, final Dfp b1,\n                                 final double a2, final Dfp b2,\n                                 final double a3, final Dfp b3) {\n        return b1.multiply(a1).add(b2.multiply(a2)).add(b3.multiply(a3));\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp linearCombination(final Dfp a1, final Dfp b1, final Dfp a2, final Dfp b2,\n                                 final Dfp a3, final Dfp b3, final Dfp a4, final Dfp b4) {\n        return a1.multiply(b1).add(a2.multiply(b2)).add(a3.multiply(b3)).add(a4.multiply(b4));\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp linearCombination(final double a1, final Dfp b1, final double a2, final Dfp b2,\n                                 final double a3, final Dfp b3, final double a4, final Dfp b4) {\n        return b1.multiply(a1).add(b2.multiply(a2)).add(b3.multiply(a3)).add(b4.multiply(a4));\n    }\n\n}\n",
  "tokensGeneralGrammar" : [ "null", "true", "false", ",", ".", ":", ";", "?", "(", ")", "jdVar", "stream", "Arrays", "allMatch", "noneMatch", "anyMatch", "~", ">>", "<<", ">>>", "|", "&", "^", "+", "-", "/", "*", "%", "&&", "||", ">=", "<=", ">", "<", "==", "!=", "instanceof", "class", "methodResultID", "this" ],
  "tokensGeneralValuesGlobalDictionary" : [ [ "0", "int" ], [ "1", "int" ], [ "-1", "int" ], [ "0.0", "double" ], [ "1.0", "double" ], [ "-1.0", "double" ], [ "\"\"", "String" ], [ "\" \"", "String" ] ],
  "tokensProjectClasses" : [ [ "RealFieldElement", "org.apache.commons.math3" ], [ "Primes", "org.apache.commons.math3.primes" ], [ "SmallPrimes", "org.apache.commons.math3.primes" ], [ "PollardRho", "org.apache.commons.math3.primes" ], [ "CurveFitter", "org.apache.commons.math3.fitting" ], [ "GaussianCurveFitter", "org.apache.commons.math3.fitting" ], [ "SimpleCurveFitter", "org.apache.commons.math3.fitting" ], [ "PolynomialFitter", "org.apache.commons.math3.fitting" ], [ "HarmonicFitter", "org.apache.commons.math3.fitting" ], [ "WeightedObservedPoint", "org.apache.commons.math3.fitting" ], [ "ParameterValidator", "org.apache.commons.math3.fitting.leastsquares" ], [ "LevenbergMarquardtOptimizer", "org.apache.commons.math3.fitting.leastsquares" ], [ "EvaluationRmsChecker", "org.apache.commons.math3.fitting.leastsquares" ], [ "OptimumImpl", "org.apache.commons.math3.fitting.leastsquares" ], [ "LeastSquaresAdapter", "org.apache.commons.math3.fitting.leastsquares" ], [ "DenseWeightedEvaluation", "org.apache.commons.math3.fitting.leastsquares" ], [ "LeastSquaresOptimizer", "org.apache.commons.math3.fitting.leastsquares" ], [ "AbstractEvaluation", "org.apache.commons.math3.fitting.leastsquares" ], [ "GaussNewtonOptimizer", "org.apache.commons.math3.fitting.leastsquares" ], [ "LeastSquaresFactory", "org.apache.commons.math3.fitting.leastsquares" ], [ "ValueAndJacobianFunction", "org.apache.commons.math3.fitting.leastsquares" ], [ "MultivariateJacobianFunction", "org.apache.commons.math3.fitting.leastsquares" ], [ "LeastSquaresBuilder", "org.apache.commons.math3.fitting.leastsquares" ], [ "LeastSquaresProblem", "org.apache.commons.math3.fitting.leastsquares" ], [ "WeightedObservedPoints", "org.apache.commons.math3.fitting" ], [ "GaussianFitter", "org.apache.commons.math3.fitting" ], [ "AbstractCurveFitter", "org.apache.commons.math3.fitting" ], [ "HarmonicCurveFitter", "org.apache.commons.math3.fitting" ], [ "PolynomialCurveFitter", "org.apache.commons.math3.fitting" ], [ "UnivariateMatrixFunction", "org.apache.commons.math3.analysis" ], [ "FunctionUtils", "org.apache.commons.math3.analysis" ], [ "DifferentiableUnivariateMatrixFunction", "org.apache.commons.math3.analysis" ], [ "IterativeLegendreGaussIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "LegendreGaussIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "MidPointIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "RombergIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "SimpsonIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "BaseRuleFactory", "org.apache.commons.math3.analysis.integration.gauss" ], [ "HermiteRuleFactory", "org.apache.commons.math3.analysis.integration.gauss" ], [ "GaussIntegratorFactory", "org.apache.commons.math3.analysis.integration.gauss" ], [ "LegendreRuleFactory", "org.apache.commons.math3.analysis.integration.gauss" ], [ "LegendreHighPrecisionRuleFactory", "org.apache.commons.math3.analysis.integration.gauss" ], [ "SymmetricGaussIntegrator", "org.apache.commons.math3.analysis.integration.gauss" ], [ "GaussIntegrator", "org.apache.commons.math3.analysis.integration.gauss" ], [ "BaseAbstractUnivariateIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "UnivariateIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "TrapezoidIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "BivariateFunction", "org.apache.commons.math3.analysis" ], [ "DifferentiableUnivariateFunction", "org.apache.commons.math3.analysis" ], [ "DifferentiableUnivariateVectorFunction", "org.apache.commons.math3.analysis" ], [ "UnivariateVectorFunction", "org.apache.commons.math3.analysis" ], [ "AbstractDifferentiableUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "AbstractUnivariateDifferentiableSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BaseUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "PegasusSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BracketedUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "UnivariateSolverUtils", "org.apache.commons.math3.analysis.solvers" ], [ "FieldBracketingNthOrderBrentSolver", "org.apache.commons.math3.analysis.solvers" ], [ "NewtonRaphsonSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BaseSecantSolver", "org.apache.commons.math3.analysis.solvers" ], [ "SecantSolver", "org.apache.commons.math3.analysis.solvers" ], [ "DifferentiableUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "UnivariateDifferentiableSolver", "org.apache.commons.math3.analysis.solvers" ], [ "MullerSolver2", "org.apache.commons.math3.analysis.solvers" ], [ "AbstractPolynomialSolver", "org.apache.commons.math3.analysis.solvers" ], [ "MullerSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BaseAbstractUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BrentSolver", "org.apache.commons.math3.analysis.solvers" ], [ "LaguerreSolver", "org.apache.commons.math3.analysis.solvers" ], [ "IllinoisSolver", "org.apache.commons.math3.analysis.solvers" ], [ "PolynomialSolver", "org.apache.commons.math3.analysis.solvers" ], [ "RegulaFalsiSolver", "org.apache.commons.math3.analysis.solvers" ], [ "AllowedSolution", "org.apache.commons.math3.analysis.solvers" ], [ "NewtonSolver", "org.apache.commons.math3.analysis.solvers" ], [ "RiddersSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BisectionSolver", "org.apache.commons.math3.analysis.solvers" ], [ "AbstractUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "UnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BracketingNthOrderBrentSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BracketedRealFieldUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "Asin", "org.apache.commons.math3.analysis.function" ], [ "Cosh", "org.apache.commons.math3.analysis.function" ], [ "Multiply", "org.apache.commons.math3.analysis.function" ], [ "Atan", "org.apache.commons.math3.analysis.function" ], [ "Asinh", "org.apache.commons.math3.analysis.function" ], [ "Rint", "org.apache.commons.math3.analysis.function" ], [ "Cos", "org.apache.commons.math3.analysis.function" ], [ "StepFunction", "org.apache.commons.math3.analysis.function" ], [ "Add", "org.apache.commons.math3.analysis.function" ], [ "Sqrt", "org.apache.commons.math3.analysis.function" ], [ "Inverse", "org.apache.commons.math3.analysis.function" ], [ "Gaussian", "org.apache.commons.math3.analysis.function" ], [ "Pow", "org.apache.commons.math3.analysis.function" ], [ "Exp", "org.apache.commons.math3.analysis.function" ], [ "Tanh", "org.apache.commons.math3.analysis.function" ], [ "Cbrt", "org.apache.commons.math3.analysis.function" ], [ "Log1p", "org.apache.commons.math3.analysis.function" ], [ "Constant", "org.apache.commons.math3.analysis.function" ], [ "Identity", "org.apache.commons.math3.analysis.function" ], [ "Signum", "org.apache.commons.math3.analysis.function" ], [ "Logit", "org.apache.commons.math3.analysis.function" ], [ "Ceil", "org.apache.commons.math3.analysis.function" ], [ "Subtract", "org.apache.commons.math3.analysis.function" ], [ "Sinh", "org.apache.commons.math3.analysis.function" ], [ "Max", "org.apache.commons.math3.analysis.function" ], [ "Acosh", "org.apache.commons.math3.analysis.function" ], [ "Min", "org.apache.commons.math3.analysis.function" ], [ "Expm1", "org.apache.commons.math3.analysis.function" ], [ "Abs", "org.apache.commons.math3.analysis.function" ], [ "Divide", "org.apache.commons.math3.analysis.function" ], [ "Log", "org.apache.commons.math3.analysis.function" ], [ "Ulp", "org.apache.commons.math3.analysis.function" ], [ "Log10", "org.apache.commons.math3.analysis.function" ], [ "Power", "org.apache.commons.math3.analysis.function" ], [ "Minus", "org.apache.commons.math3.analysis.function" ], [ "Atan2", "org.apache.commons.math3.analysis.function" ], [ "Logistic", "org.apache.commons.math3.analysis.function" ], [ "Acos", "org.apache.commons.math3.analysis.function" ], [ "Floor", "org.apache.commons.math3.analysis.function" ], [ "Sigmoid", "org.apache.commons.math3.analysis.function" ], [ "Sinc", "org.apache.commons.math3.analysis.function" ], [ "Atanh", "org.apache.commons.math3.analysis.function" ], [ "HarmonicOscillator", "org.apache.commons.math3.analysis.function" ], [ "Tan", "org.apache.commons.math3.analysis.function" ], [ "Sin", "org.apache.commons.math3.analysis.function" ], [ "MultivariateFunction", "org.apache.commons.math3.analysis" ], [ "DifferentiableMultivariateFunction", "org.apache.commons.math3.analysis" ], [ "UnivariateFunction", "org.apache.commons.math3.analysis" ], [ "TrivariateFunction", "org.apache.commons.math3.analysis" ], [ "MultivariateMatrixFunction", "org.apache.commons.math3.analysis" ], [ "ParametricUnivariateFunction", "org.apache.commons.math3.analysis" ], [ "UnivariateDifferentiableVectorFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "UnivariateDifferentiableMatrixFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "DSCompiler", "org.apache.commons.math3.analysis.differentiation" ], [ "SparseGradient", "org.apache.commons.math3.analysis.differentiation" ], [ "UnivariateFunctionDifferentiator", "org.apache.commons.math3.analysis.differentiation" ], [ "UnivariateMatrixFunctionDifferentiator", "org.apache.commons.math3.analysis.differentiation" ], [ "MultivariateDifferentiableFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "JacobianFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "GradientFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "DerivativeStructure", "org.apache.commons.math3.analysis.differentiation" ], [ "UnivariateVectorFunctionDifferentiator", "org.apache.commons.math3.analysis.differentiation" ], [ "FiniteDifferencesDifferentiator", "org.apache.commons.math3.analysis.differentiation" ], [ "MultivariateDifferentiableVectorFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "UnivariateDifferentiableFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "MultivariateVectorFunction", "org.apache.commons.math3.analysis" ], [ "DifferentiableMultivariateVectorFunction", "org.apache.commons.math3.analysis" ], [ "PolynomialFunctionNewtonForm", "org.apache.commons.math3.analysis.polynomials" ], [ "PolynomialFunctionLagrangeForm", "org.apache.commons.math3.analysis.polynomials" ], [ "PolynomialSplineFunction", "org.apache.commons.math3.analysis.polynomials" ], [ "PolynomialsUtils", "org.apache.commons.math3.analysis.polynomials" ], [ "PolynomialFunction", "org.apache.commons.math3.analysis.polynomials" ], [ "RealFieldUnivariateFunction", "org.apache.commons.math3.analysis" ], [ "TricubicInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "BicubicSplineInterpolatingFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "BicubicSplineFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "LoessInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "DividedDifferenceInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "HermiteInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "TricubicInterpolatingFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "TricubicFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "TrivariateGridInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "NevilleInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "MicrosphereProjectionInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "AkimaSplineInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "MultivariateInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "BicubicSplineInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "TricubicSplineInterpolatingFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "TricubicSplineFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "FieldHermiteInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "InterpolatingMicrosphere", "org.apache.commons.math3.analysis.interpolation" ], [ "LinearInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "BivariateGridInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "UnivariatePeriodicInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "BicubicInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "UnivariateInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "SmoothingPolynomialBicubicSplineInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "PiecewiseBicubicSplineInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "BicubicInterpolatingFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "BicubicFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "SplineInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "TricubicSplineInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "InterpolatingMicrosphere2D", "org.apache.commons.math3.analysis.interpolation" ], [ "PiecewiseBicubicSplineInterpolatingFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "MicrosphereInterpolatingFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "MicrosphereInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "Precision", "org.apache.commons.math3.util" ], [ "MultidimensionalCounter", "org.apache.commons.math3.util" ], [ "DoubleArray", "org.apache.commons.math3.util" ], [ "Incrementor", "org.apache.commons.math3.util" ], [ "OpenIntToDoubleHashMap", "org.apache.commons.math3.util" ], [ "OpenIntToFieldHashMap", "org.apache.commons.math3.util" ], [ "MathArrays", "org.apache.commons.math3.util" ], [ "Pair", "org.apache.commons.math3.util" ], [ "FastMathCalc", "org.apache.commons.math3.util" ], [ "FastMath", "org.apache.commons.math3.util" ], [ "ResizableDoubleArray", "org.apache.commons.math3.util" ], [ "BigRealField", "org.apache.commons.math3.util" ], [ "Decimal64Field", "org.apache.commons.math3.util" ], [ "Combinations", "org.apache.commons.math3.util" ], [ "MathUtils", "org.apache.commons.math3.util" ], [ "NumberTransformer", "org.apache.commons.math3.util" ], [ "ContinuedFraction", "org.apache.commons.math3.util" ], [ "RandomPivotingStrategy", "org.apache.commons.math3.util" ], [ "IterationManager", "org.apache.commons.math3.util" ], [ "CompositeFormat", "org.apache.commons.math3.util" ], [ "KthSelector", "org.apache.commons.math3.util" ], [ "IterationEvent", "org.apache.commons.math3.util" ], [ "TransformerMap", "org.apache.commons.math3.util" ], [ "IntegerSequence", "org.apache.commons.math3.util" ], [ "FastMathLiteralArrays", "org.apache.commons.math3.util" ], [ "CombinatoricsUtils", "org.apache.commons.math3.util" ], [ "IterationListener", "org.apache.commons.math3.util" ], [ "PivotingStrategyInterface", "org.apache.commons.math3.util" ], [ "CentralPivotingStrategy", "org.apache.commons.math3.util" ], [ "Decimal64", "org.apache.commons.math3.util" ], [ "DefaultTransformer", "org.apache.commons.math3.util" ], [ "BigReal", "org.apache.commons.math3.util" ], [ "ArithmeticUtils", "org.apache.commons.math3.util" ], [ "MedianOf3PivotingStrategy", "org.apache.commons.math3.util" ], [ "ComplexFormat", "org.apache.commons.math3.complex" ], [ "ComplexField", "org.apache.commons.math3.complex" ], [ "RootsOfUnity", "org.apache.commons.math3.complex" ], [ "Quaternion", "org.apache.commons.math3.complex" ], [ "Complex", "org.apache.commons.math3.complex" ], [ "ComplexUtils", "org.apache.commons.math3.complex" ], [ "DifferentiableMultivariateVectorOptimizer", "org.apache.commons.math3.optimization" ], [ "LeastSquaresConverter", "org.apache.commons.math3.optimization" ], [ "BaseMultivariateSimpleBoundsOptimizer", "org.apache.commons.math3.optimization" ], [ "PointValuePair", "org.apache.commons.math3.optimization" ], [ "DifferentiableMultivariateOptimizer", "org.apache.commons.math3.optimization" ], [ "SimpleValueChecker", "org.apache.commons.math3.optimization" ], [ "CurveFitter", "org.apache.commons.math3.optimization.fitting" ], [ "PolynomialFitter", "org.apache.commons.math3.optimization.fitting" ], [ "HarmonicFitter", "org.apache.commons.math3.optimization.fitting" ], [ "WeightedObservedPoint", "org.apache.commons.math3.optimization.fitting" ], [ "GaussianFitter", "org.apache.commons.math3.optimization.fitting" ], [ "AbstractConvergenceChecker", "org.apache.commons.math3.optimization" ], [ "AbstractSimplex", "org.apache.commons.math3.optimization.direct" ], [ "SimplexOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "BOBYQAOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "NelderMeadSimplex", "org.apache.commons.math3.optimization.direct" ], [ "MultivariateFunctionMappingAdapter", "org.apache.commons.math3.optimization.direct" ], [ "BaseAbstractMultivariateSimpleBoundsOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "BaseAbstractMultivariateVectorOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "CMAESOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "MultivariateFunctionPenaltyAdapter", "org.apache.commons.math3.optimization.direct" ], [ "BaseAbstractMultivariateOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "PowellOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "MultiDirectionalSimplex", "org.apache.commons.math3.optimization.direct" ], [ "InitialGuess", "org.apache.commons.math3.optimization" ], [ "Preconditioner", "org.apache.commons.math3.optimization.general" ], [ "LevenbergMarquardtOptimizer", "org.apache.commons.math3.optimization.general" ], [ "AbstractLeastSquaresOptimizer", "org.apache.commons.math3.optimization.general" ], [ "AbstractDifferentiableOptimizer", "org.apache.commons.math3.optimization.general" ], [ "GaussNewtonOptimizer", "org.apache.commons.math3.optimization.general" ], [ "AbstractScalarDifferentiableOptimizer", "org.apache.commons.math3.optimization.general" ], [ "NonLinearConjugateGradientOptimizer", "org.apache.commons.math3.optimization.general" ], [ "ConjugateGradientFormula", "org.apache.commons.math3.optimization.general" ], [ "BaseMultivariateVectorMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "NoFeasibleSolutionException", "org.apache.commons.math3.optimization.linear" ], [ "AbstractLinearOptimizer", "org.apache.commons.math3.optimization.linear" ], [ "LinearConstraint", "org.apache.commons.math3.optimization.linear" ], [ "SimplexSolver", "org.apache.commons.math3.optimization.linear" ], [ "LinearOptimizer", "org.apache.commons.math3.optimization.linear" ], [ "UnboundedSolutionException", "org.apache.commons.math3.optimization.linear" ], [ "SimplexTableau", "org.apache.commons.math3.optimization.linear" ], [ "LinearObjectiveFunction", "org.apache.commons.math3.optimization.linear" ], [ "Relationship", "org.apache.commons.math3.optimization.linear" ], [ "SimpleBounds", "org.apache.commons.math3.optimization" ], [ "PointVectorValuePair", "org.apache.commons.math3.optimization" ], [ "MultivariateDifferentiableVectorMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "DifferentiableMultivariateMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "SimplePointChecker", "org.apache.commons.math3.optimization" ], [ "SimpleVectorValueChecker", "org.apache.commons.math3.optimization" ], [ "BaseOptimizer", "org.apache.commons.math3.optimization" ], [ "MultivariateOptimizer", "org.apache.commons.math3.optimization" ], [ "GoalType", "org.apache.commons.math3.optimization" ], [ "BrentOptimizer", "org.apache.commons.math3.optimization.univariate" ], [ "UnivariateMultiStartOptimizer", "org.apache.commons.math3.optimization.univariate" ], [ "BaseUnivariateOptimizer", "org.apache.commons.math3.optimization.univariate" ], [ "BaseAbstractUnivariateOptimizer", "org.apache.commons.math3.optimization.univariate" ], [ "SimpleUnivariateValueChecker", "org.apache.commons.math3.optimization.univariate" ], [ "UnivariatePointValuePair", "org.apache.commons.math3.optimization.univariate" ], [ "BracketFinder", "org.apache.commons.math3.optimization.univariate" ], [ "UnivariateOptimizer", "org.apache.commons.math3.optimization.univariate" ], [ "BaseMultivariateOptimizer", "org.apache.commons.math3.optimization" ], [ "ConvergenceChecker", "org.apache.commons.math3.optimization" ], [ "BaseMultivariateMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "MultivariateDifferentiableOptimizer", "org.apache.commons.math3.optimization" ], [ "MultivariateDifferentiableVectorOptimizer", "org.apache.commons.math3.optimization" ], [ "Target", "org.apache.commons.math3.optimization" ], [ "Weight", "org.apache.commons.math3.optimization" ], [ "MultivariateMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "OptimizationData", "org.apache.commons.math3.optimization" ], [ "BaseMultivariateVectorOptimizer", "org.apache.commons.math3.optimization" ], [ "MultivariateDifferentiableMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "DifferentiableMultivariateVectorMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "NonSymmetricMatrixException", "org.apache.commons.math3.linear" ], [ "FieldVectorPreservingVisitor", "org.apache.commons.math3.linear" ], [ "FieldVector", "org.apache.commons.math3.linear" ], [ "AnyMatrix", "org.apache.commons.math3.linear" ], [ "NonSquareOperatorException", "org.apache.commons.math3.linear" ], [ "SingularValueDecomposition", "org.apache.commons.math3.linear" ], [ "EigenDecomposition", "org.apache.commons.math3.linear" ], [ "RealMatrixChangingVisitor", "org.apache.commons.math3.linear" ], [ "FieldLUDecomposition", "org.apache.commons.math3.linear" ], [ "NonPositiveDefiniteMatrixException", "org.apache.commons.math3.linear" ], [ "RealMatrixFormat", "org.apache.commons.math3.linear" ], [ "MatrixUtils", "org.apache.commons.math3.linear" ], [ "OpenMapRealVector", "org.apache.commons.math3.linear" ], [ "RealMatrixPreservingVisitor", "org.apache.commons.math3.linear" ], [ "SingularMatrixException", "org.apache.commons.math3.linear" ], [ "DefaultFieldMatrixPreservingVisitor", "org.apache.commons.math3.linear" ], [ "FieldVectorChangingVisitor", "org.apache.commons.math3.linear" ], [ "TriDiagonalTransformer", "org.apache.commons.math3.linear" ], [ "DefaultRealMatrixChangingVisitor", "org.apache.commons.math3.linear" ], [ "AbstractRealMatrix", "org.apache.commons.math3.linear" ], [ "Array2DRowRealMatrix", "org.apache.commons.math3.linear" ], [ "BlockFieldMatrix", "org.apache.commons.math3.linear" ], [ "Array2DRowFieldMatrix", "org.apache.commons.math3.linear" ], [ "FieldMatrix", "org.apache.commons.math3.linear" ], [ "IterativeLinearSolver", "org.apache.commons.math3.linear" ], [ "ArrayRealVector", "org.apache.commons.math3.linear" ], [ "MatrixDimensionMismatchException", "org.apache.commons.math3.linear" ], [ "ArrayFieldVector", "org.apache.commons.math3.linear" ], [ "DecompositionSolver", "org.apache.commons.math3.linear" ], [ "LUDecomposition", "org.apache.commons.math3.linear" ], [ "ConjugateGradient", "org.apache.commons.math3.linear" ], [ "NonPositiveDefiniteOperatorException", "org.apache.commons.math3.linear" ], [ "OpenMapRealMatrix", "org.apache.commons.math3.linear" ], [ "NonSelfAdjointOperatorException", "org.apache.commons.math3.linear" ], [ "BiDiagonalTransformer", "org.apache.commons.math3.linear" ], [ "CholeskyDecomposition", "org.apache.commons.math3.linear" ], [ "FieldDecompositionSolver", "org.apache.commons.math3.linear" ], [ "RealVectorPreservingVisitor", "org.apache.commons.math3.linear" ], [ "SingularOperatorException", "org.apache.commons.math3.linear" ], [ "BlockRealMatrix", "org.apache.commons.math3.linear" ], [ "SparseFieldMatrix", "org.apache.commons.math3.linear" ], [ "NonSquareMatrixException", "org.apache.commons.math3.linear" ], [ "SparseRealMatrix", "org.apache.commons.math3.linear" ], [ "RealVector", "org.apache.commons.math3.linear" ], [ "FieldMatrixPreservingVisitor", "org.apache.commons.math3.linear" ], [ "PreconditionedIterativeLinearSolver", "org.apache.commons.math3.linear" ], [ "QRDecomposition", "org.apache.commons.math3.linear" ], [ "SymmLQ", "org.apache.commons.math3.linear" ], [ "SparseFieldVector", "org.apache.commons.math3.linear" ], [ "RealVectorFormat", "org.apache.commons.math3.linear" ], [ "IllConditionedOperatorException", "org.apache.commons.math3.linear" ], [ "DefaultIterativeLinearSolverEvent", "org.apache.commons.math3.linear" ], [ "DefaultRealMatrixPreservingVisitor", "org.apache.commons.math3.linear" ], [ "IterativeLinearSolverEvent", "org.apache.commons.math3.linear" ], [ "DiagonalMatrix", "org.apache.commons.math3.linear" ], [ "HessenbergTransformer", "org.apache.commons.math3.linear" ], [ "RectangularCholeskyDecomposition", "org.apache.commons.math3.linear" ], [ "FieldMatrixChangingVisitor", "org.apache.commons.math3.linear" ], [ "DefaultFieldMatrixChangingVisitor", "org.apache.commons.math3.linear" ], [ "JacobiPreconditioner", "org.apache.commons.math3.linear" ], [ "RealLinearOperator", "org.apache.commons.math3.linear" ], [ "RRQRDecomposition", "org.apache.commons.math3.linear" ], [ "AbstractFieldMatrix", "org.apache.commons.math3.linear" ], [ "RealMatrix", "org.apache.commons.math3.linear" ], [ "SchurTransformer", "org.apache.commons.math3.linear" ], [ "RealVectorChangingVisitor", "org.apache.commons.math3.linear" ], [ "SparseRealVector", "org.apache.commons.math3.linear" ], [ "CauchyDistribution", "org.apache.commons.math3.distribution" ], [ "LaplaceDistribution", "org.apache.commons.math3.distribution" ], [ "AbstractRealDistribution", "org.apache.commons.math3.distribution" ], [ "HypergeometricDistribution", "org.apache.commons.math3.distribution" ], [ "TDistribution", "org.apache.commons.math3.distribution" ], [ "ChiSquaredDistribution", "org.apache.commons.math3.distribution" ], [ "TriangularDistribution", "org.apache.commons.math3.distribution" ], [ "MultivariateNormalMixtureExpectationMaximization", "org.apache.commons.math3.distribution.fitting" ], [ "BetaDistribution", "org.apache.commons.math3.distribution" ], [ "RealDistribution", "org.apache.commons.math3.distribution" ], [ "NormalDistribution", "org.apache.commons.math3.distribution" ], [ "SaddlePointExpansion", "org.apache.commons.math3.distribution" ], [ "MixtureMultivariateNormalDistribution", "org.apache.commons.math3.distribution" ], [ "UniformRealDistribution", "org.apache.commons.math3.distribution" ], [ "GumbelDistribution", "org.apache.commons.math3.distribution" ], [ "ZipfDistribution", "org.apache.commons.math3.distribution" ], [ "BinomialDistribution", "org.apache.commons.math3.distribution" ], [ "EnumeratedIntegerDistribution", "org.apache.commons.math3.distribution" ], [ "IntegerDistribution", "org.apache.commons.math3.distribution" ], [ "WeibullDistribution", "org.apache.commons.math3.distribution" ], [ "MultivariateRealDistribution", "org.apache.commons.math3.distribution" ], [ "NakagamiDistribution", "org.apache.commons.math3.distribution" ], [ "EnumeratedDistribution", "org.apache.commons.math3.distribution" ], [ "ConstantRealDistribution", "org.apache.commons.math3.distribution" ], [ "MultivariateNormalDistribution", "org.apache.commons.math3.distribution" ], [ "ExponentialDistribution", "org.apache.commons.math3.distribution" ], [ "UniformIntegerDistribution", "org.apache.commons.math3.distribution" ], [ "LogNormalDistribution", "org.apache.commons.math3.distribution" ], [ "PascalDistribution", "org.apache.commons.math3.distribution" ], [ "ParetoDistribution", "org.apache.commons.math3.distribution" ], [ "FDistribution", "org.apache.commons.math3.distribution" ], [ "GeometricDistribution", "org.apache.commons.math3.distribution" ], [ "AbstractMultivariateRealDistribution", "org.apache.commons.math3.distribution" ], [ "AbstractIntegerDistribution", "org.apache.commons.math3.distribution" ], [ "PoissonDistribution", "org.apache.commons.math3.distribution" ], [ "KolmogorovSmirnovDistribution", "org.apache.commons.math3.distribution" ], [ "MixtureMultivariateRealDistribution", "org.apache.commons.math3.distribution" ], [ "GammaDistribution", "org.apache.commons.math3.distribution" ], [ "EnumeratedRealDistribution", "org.apache.commons.math3.distribution" ], [ "LogisticDistribution", "org.apache.commons.math3.distribution" ], [ "LevyDistribution", "org.apache.commons.math3.distribution" ], [ "PointValuePair", "org.apache.commons.math3.optim" ], [ "SimpleValueChecker", "org.apache.commons.math3.optim" ], [ "AbstractConvergenceChecker", "org.apache.commons.math3.optim" ], [ "InitialGuess", "org.apache.commons.math3.optim" ], [ "MaxIter", "org.apache.commons.math3.optim" ], [ "NoFeasibleSolutionException", "org.apache.commons.math3.optim.linear" ], [ "LinearConstraintSet", "org.apache.commons.math3.optim.linear" ], [ "LinearConstraint", "org.apache.commons.math3.optim.linear" ], [ "PivotSelectionRule", "org.apache.commons.math3.optim.linear" ], [ "SimplexSolver", "org.apache.commons.math3.optim.linear" ], [ "LinearOptimizer", "org.apache.commons.math3.optim.linear" ], [ "UnboundedSolutionException", "org.apache.commons.math3.optim.linear" ], [ "SimplexTableau", "org.apache.commons.math3.optim.linear" ], [ "SolutionCallback", "org.apache.commons.math3.optim.linear" ], [ "LinearObjectiveFunction", "org.apache.commons.math3.optim.linear" ], [ "NonNegativeConstraint", "org.apache.commons.math3.optim.linear" ], [ "Relationship", "org.apache.commons.math3.optim.linear" ], [ "AbstractOptimizationProblem", "org.apache.commons.math3.optim" ], [ "SimpleBounds", "org.apache.commons.math3.optim" ], [ "PointVectorValuePair", "org.apache.commons.math3.optim" ], [ "SimplePointChecker", "org.apache.commons.math3.optim" ], [ "SimpleVectorValueChecker", "org.apache.commons.math3.optim" ], [ "BaseOptimizer", "org.apache.commons.math3.optim" ], [ "BaseMultiStartMultivariateOptimizer", "org.apache.commons.math3.optim" ], [ "MultiStartUnivariateOptimizer", "org.apache.commons.math3.optim.univariate" ], [ "BrentOptimizer", "org.apache.commons.math3.optim.univariate" ], [ "UnivariateObjectiveFunction", "org.apache.commons.math3.optim.univariate" ], [ "SimpleUnivariateValueChecker", "org.apache.commons.math3.optim.univariate" ], [ "SearchInterval", "org.apache.commons.math3.optim.univariate" ], [ "UnivariatePointValuePair", "org.apache.commons.math3.optim.univariate" ], [ "BracketFinder", "org.apache.commons.math3.optim.univariate" ], [ "UnivariateOptimizer", "org.apache.commons.math3.optim.univariate" ], [ "BaseMultivariateOptimizer", "org.apache.commons.math3.optim" ], [ "ConvergenceChecker", "org.apache.commons.math3.optim" ], [ "OptimizationProblem", "org.apache.commons.math3.optim" ], [ "MaxEval", "org.apache.commons.math3.optim" ], [ "OptimizationData", "org.apache.commons.math3.optim" ], [ "Preconditioner", "org.apache.commons.math3.optim.nonlinear.scalar.gradient" ], [ "NonLinearConjugateGradientOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar.gradient" ], [ "LeastSquaresConverter", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "GradientMultivariateOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "MultivariateFunctionMappingAdapter", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "LineSearch", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "ObjectiveFunction", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "MultivariateOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "GoalType", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "AbstractSimplex", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "SimplexOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "BOBYQAOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "NelderMeadSimplex", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "CMAESOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "PowellOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "MultiDirectionalSimplex", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "MultiStartMultivariateOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "MultivariateFunctionPenaltyAdapter", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "ObjectiveFunctionGradient", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "ModelFunction", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "LevenbergMarquardtOptimizer", "org.apache.commons.math3.optim.nonlinear.vector.jacobian" ], [ "AbstractLeastSquaresOptimizer", "org.apache.commons.math3.optim.nonlinear.vector.jacobian" ], [ "GaussNewtonOptimizer", "org.apache.commons.math3.optim.nonlinear.vector.jacobian" ], [ "ModelFunctionJacobian", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "JacobianMultivariateVectorOptimizer", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "MultivariateVectorOptimizer", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "Target", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "Weight", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "MultiStartMultivariateVectorOptimizer", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "Erf", "org.apache.commons.math3.special" ], [ "BesselJ", "org.apache.commons.math3.special" ], [ "Gamma", "org.apache.commons.math3.special" ], [ "Beta", "org.apache.commons.math3.special" ], [ "FieldODEState", "org.apache.commons.math3.ode" ], [ "FieldODEStateAndDerivative", "org.apache.commons.math3.ode" ], [ "FirstOrderFieldDifferentialEquations", "org.apache.commons.math3.ode" ], [ "MultistepFieldIntegrator", "org.apache.commons.math3.ode" ], [ "ODEIntegrator", "org.apache.commons.math3.ode" ], [ "ParameterConfiguration", "org.apache.commons.math3.ode" ], [ "ContinuousOutputFieldModel", "org.apache.commons.math3.ode" ], [ "FirstOrderConverter", "org.apache.commons.math3.ode" ], [ "ParameterJacobianProvider", "org.apache.commons.math3.ode" ], [ "SecondOrderIntegrator", "org.apache.commons.math3.ode" ], [ "AbstractFieldIntegrator", "org.apache.commons.math3.ode" ], [ "ExpandableStatefulODE", "org.apache.commons.math3.ode" ], [ "MultistepIntegrator", "org.apache.commons.math3.ode" ], [ "Parameterizable", "org.apache.commons.math3.ode" ], [ "JacobianMatrices", "org.apache.commons.math3.ode" ], [ "StepNormalizer", "org.apache.commons.math3.ode.sampling" ], [ "FixedStepHandler", "org.apache.commons.math3.ode.sampling" ], [ "StepHandler", "org.apache.commons.math3.ode.sampling" ], [ "DummyStepHandler", "org.apache.commons.math3.ode.sampling" ], [ "FieldStepInterpolator", "org.apache.commons.math3.ode.sampling" ], [ "StepInterpolator", "org.apache.commons.math3.ode.sampling" ], [ "AbstractFieldStepInterpolator", "org.apache.commons.math3.ode.sampling" ], [ "FieldFixedStepHandler", "org.apache.commons.math3.ode.sampling" ], [ "StepNormalizerMode", "org.apache.commons.math3.ode.sampling" ], [ "AbstractStepInterpolator", "org.apache.commons.math3.ode.sampling" ], [ "FieldStepHandler", "org.apache.commons.math3.ode.sampling" ], [ "StepNormalizerBounds", "org.apache.commons.math3.ode.sampling" ], [ "NordsieckStepInterpolator", "org.apache.commons.math3.ode.sampling" ], [ "FieldStepNormalizer", "org.apache.commons.math3.ode.sampling" ], [ "RungeKuttaFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "GillIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince853FieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "EmbeddedRungeKuttaFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "HighamHall54FieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince54FieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "EulerFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "EulerStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "HighamHall54Integrator", "org.apache.commons.math3.ode.nonstiff" ], [ "MidpointStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "GillStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "LutherFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "GraggBulirschStoerIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "EmbeddedRungeKuttaIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince853StepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "HighamHall54FieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince54FieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "MidpointFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "ThreeEighthesFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "ThreeEighthesIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "ClassicalRungeKuttaIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsNordsieckTransformer", "org.apache.commons.math3.ode.nonstiff" ], [ "MidpointFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "MidpointIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "RungeKuttaStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince54StepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "LutherFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince54Integrator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "GraggBulirschStoerStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "ClassicalRungeKuttaStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "LutherIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdaptiveStepsizeIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "ClassicalRungeKuttaFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "EulerIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince853FieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "FieldButcherArrayProvider", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsMoultonIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "RungeKuttaFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince853Integrator", "org.apache.commons.math3.ode.nonstiff" ], [ "ThreeEighthesStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "EulerFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsMoultonFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "LutherStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "HighamHall54StepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsNordsieckFieldTransformer", "org.apache.commons.math3.ode.nonstiff" ], [ "ThreeEighthesFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "RungeKuttaIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsBashforthFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "ClassicalRungeKuttaFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdaptiveStepsizeFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsBashforthIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "GillFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "GillFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "FieldSecondaryEquations", "org.apache.commons.math3.ode" ], [ "MainStateJacobianProvider", "org.apache.commons.math3.ode" ], [ "SecondaryEquations", "org.apache.commons.math3.ode" ], [ "FirstOrderFieldIntegrator", "org.apache.commons.math3.ode" ], [ "ParameterJacobianWrapper", "org.apache.commons.math3.ode" ], [ "FieldEquationsMapper", "org.apache.commons.math3.ode" ], [ "FieldExpandableODE", "org.apache.commons.math3.ode" ], [ "ParameterizedWrapper", "org.apache.commons.math3.ode" ], [ "AbstractIntegrator", "org.apache.commons.math3.ode" ], [ "SecondOrderDifferentialEquations", "org.apache.commons.math3.ode" ], [ "AbstractParameterizable", "org.apache.commons.math3.ode" ], [ "UnknownParameterException", "org.apache.commons.math3.ode" ], [ "ContinuousOutputModel", "org.apache.commons.math3.ode" ], [ "FirstOrderDifferentialEquations", "org.apache.commons.math3.ode" ], [ "EquationsMapper", "org.apache.commons.math3.ode" ], [ "Transformer", "org.apache.commons.math3.ode.events" ], [ "FieldEventState", "org.apache.commons.math3.ode.events" ], [ "FieldEventHandler", "org.apache.commons.math3.ode.events" ], [ "EventHandler", "org.apache.commons.math3.ode.events" ], [ "Action", "org.apache.commons.math3.ode.events" ], [ "EventState", "org.apache.commons.math3.ode.events" ], [ "EventFilter", "org.apache.commons.math3.ode.events" ], [ "FilterType", "org.apache.commons.math3.ode.events" ], [ "ParameterizedODE", "org.apache.commons.math3.ode" ], [ "FirstOrderIntegrator", "org.apache.commons.math3.ode" ], [ "NaNStrategy", "org.apache.commons.math3.stat.ranking" ], [ "NaturalRanking", "org.apache.commons.math3.stat.ranking" ], [ "TiesStrategy", "org.apache.commons.math3.stat.ranking" ], [ "RankingAlgorithm", "org.apache.commons.math3.stat.ranking" ], [ "StatUtils", "org.apache.commons.math3.stat" ], [ "IntervalUtils", "org.apache.commons.math3.stat.interval" ], [ "AgrestiCoullInterval", "org.apache.commons.math3.stat.interval" ], [ "ConfidenceInterval", "org.apache.commons.math3.stat.interval" ], [ "WilsonScoreInterval", "org.apache.commons.math3.stat.interval" ], [ "ClopperPearsonInterval", "org.apache.commons.math3.stat.interval" ], [ "NormalApproximationInterval", "org.apache.commons.math3.stat.interval" ], [ "BinomialConfidenceInterval", "org.apache.commons.math3.stat.interval" ], [ "StorelessCovariance", "org.apache.commons.math3.stat.correlation" ], [ "StorelessBivariateCovariance", "org.apache.commons.math3.stat.correlation" ], [ "KendallsCorrelation", "org.apache.commons.math3.stat.correlation" ], [ "Covariance", "org.apache.commons.math3.stat.correlation" ], [ "PearsonsCorrelation", "org.apache.commons.math3.stat.correlation" ], [ "SpearmansCorrelation", "org.apache.commons.math3.stat.correlation" ], [ "DBSCANClusterer", "org.apache.commons.math3.stat.clustering" ], [ "EuclideanIntegerPoint", "org.apache.commons.math3.stat.clustering" ], [ "Cluster", "org.apache.commons.math3.stat.clustering" ], [ "EuclideanDoublePoint", "org.apache.commons.math3.stat.clustering" ], [ "Clusterable", "org.apache.commons.math3.stat.clustering" ], [ "KMeansPlusPlusClusterer", "org.apache.commons.math3.stat.clustering" ], [ "TestUtils", "org.apache.commons.math3.stat.inference" ], [ "TTest", "org.apache.commons.math3.stat.inference" ], [ "GTest", "org.apache.commons.math3.stat.inference" ], [ "AlternativeHypothesis", "org.apache.commons.math3.stat.inference" ], [ "MannWhitneyUTest", "org.apache.commons.math3.stat.inference" ], [ "WilcoxonSignedRankTest", "org.apache.commons.math3.stat.inference" ], [ "OneWayAnova", "org.apache.commons.math3.stat.inference" ], [ "ChiSquareTest", "org.apache.commons.math3.stat.inference" ], [ "BinomialTest", "org.apache.commons.math3.stat.inference" ], [ "KolmogorovSmirnovTest", "org.apache.commons.math3.stat.inference" ], [ "AbstractUnivariateStatistic", "org.apache.commons.math3.stat.descriptive" ], [ "SummaryStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "DescriptiveStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "MultivariateSummaryStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "SecondMoment", "org.apache.commons.math3.stat.descriptive.moment" ], [ "Mean", "org.apache.commons.math3.stat.descriptive.moment" ], [ "FourthMoment", "org.apache.commons.math3.stat.descriptive.moment" ], [ "Variance", "org.apache.commons.math3.stat.descriptive.moment" ], [ "Kurtosis", "org.apache.commons.math3.stat.descriptive.moment" ], [ "GeometricMean", "org.apache.commons.math3.stat.descriptive.moment" ], [ "StandardDeviation", "org.apache.commons.math3.stat.descriptive.moment" ], [ "VectorialCovariance", "org.apache.commons.math3.stat.descriptive.moment" ], [ "ThirdMoment", "org.apache.commons.math3.stat.descriptive.moment" ], [ "SemiVariance", "org.apache.commons.math3.stat.descriptive.moment" ], [ "FirstMoment", "org.apache.commons.math3.stat.descriptive.moment" ], [ "Skewness", "org.apache.commons.math3.stat.descriptive.moment" ], [ "VectorialMean", "org.apache.commons.math3.stat.descriptive.moment" ], [ "StatisticalSummaryValues", "org.apache.commons.math3.stat.descriptive" ], [ "StatisticalSummary", "org.apache.commons.math3.stat.descriptive" ], [ "StorelessUnivariateStatistic", "org.apache.commons.math3.stat.descriptive" ], [ "StatisticalMultivariateSummary", "org.apache.commons.math3.stat.descriptive" ], [ "AggregateSummaryStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "WeightedEvaluation", "org.apache.commons.math3.stat.descriptive" ], [ "SynchronizedSummaryStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "UnivariateStatistic", "org.apache.commons.math3.stat.descriptive" ], [ "Percentile", "org.apache.commons.math3.stat.descriptive.rank" ], [ "Max", "org.apache.commons.math3.stat.descriptive.rank" ], [ "PSquarePercentile", "org.apache.commons.math3.stat.descriptive.rank" ], [ "Min", "org.apache.commons.math3.stat.descriptive.rank" ], [ "Median", "org.apache.commons.math3.stat.descriptive.rank" ], [ "SynchronizedDescriptiveStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "SynchronizedMultivariateSummaryStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "SumOfSquares", "org.apache.commons.math3.stat.descriptive.summary" ], [ "Product", "org.apache.commons.math3.stat.descriptive.summary" ], [ "Sum", "org.apache.commons.math3.stat.descriptive.summary" ], [ "SumOfLogs", "org.apache.commons.math3.stat.descriptive.summary" ], [ "AbstractStorelessUnivariateStatistic", "org.apache.commons.math3.stat.descriptive" ], [ "SimpleRegression", "org.apache.commons.math3.stat.regression" ], [ "UpdatingMultipleLinearRegression", "org.apache.commons.math3.stat.regression" ], [ "AbstractMultipleLinearRegression", "org.apache.commons.math3.stat.regression" ], [ "GLSMultipleLinearRegression", "org.apache.commons.math3.stat.regression" ], [ "ModelSpecificationException", "org.apache.commons.math3.stat.regression" ], [ "RegressionResults", "org.apache.commons.math3.stat.regression" ], [ "MillerUpdatingRegression", "org.apache.commons.math3.stat.regression" ], [ "OLSMultipleLinearRegression", "org.apache.commons.math3.stat.regression" ], [ "MultipleLinearRegression", "org.apache.commons.math3.stat.regression" ], [ "Frequency", "org.apache.commons.math3.stat" ], [ "ChebyshevDistance", "org.apache.commons.math3.ml.distance" ], [ "CanberraDistance", "org.apache.commons.math3.ml.distance" ], [ "EuclideanDistance", "org.apache.commons.math3.ml.distance" ], [ "ManhattanDistance", "org.apache.commons.math3.ml.distance" ], [ "EarthMoversDistance", "org.apache.commons.math3.ml.distance" ], [ "DistanceMeasure", "org.apache.commons.math3.ml.distance" ], [ "CentroidCluster", "org.apache.commons.math3.ml.clustering" ], [ "DBSCANClusterer", "org.apache.commons.math3.ml.clustering" ], [ "Cluster", "org.apache.commons.math3.ml.clustering" ], [ "MultiKMeansPlusPlusClusterer", "org.apache.commons.math3.ml.clustering" ], [ "Clusterable", "org.apache.commons.math3.ml.clustering" ], [ "FuzzyKMeansClusterer", "org.apache.commons.math3.ml.clustering" ], [ "KMeansPlusPlusClusterer", "org.apache.commons.math3.ml.clustering" ], [ "SumOfClusterVariances", "org.apache.commons.math3.ml.clustering.evaluation" ], [ "ClusterEvaluator", "org.apache.commons.math3.ml.clustering.evaluation" ], [ "Clusterer", "org.apache.commons.math3.ml.clustering" ], [ "DoublePoint", "org.apache.commons.math3.ml.clustering" ], [ "KohonenTrainingTask", "org.apache.commons.math3.ml.neuralnet.sofm" ], [ "KohonenUpdateAction", "org.apache.commons.math3.ml.neuralnet.sofm" ], [ "QuasiSigmoidDecayFunction", "org.apache.commons.math3.ml.neuralnet.sofm.util" ], [ "ExponentialDecayFunction", "org.apache.commons.math3.ml.neuralnet.sofm.util" ], [ "NeighbourhoodSizeFunctionFactory", "org.apache.commons.math3.ml.neuralnet.sofm" ], [ "LearningFactorFunctionFactory", "org.apache.commons.math3.ml.neuralnet.sofm" ], [ "NeighbourhoodSizeFunction", "org.apache.commons.math3.ml.neuralnet.sofm" ], [ "LearningFactorFunction", "org.apache.commons.math3.ml.neuralnet.sofm" ], [ "MapUtils", "org.apache.commons.math3.ml.neuralnet" ], [ "Network", "org.apache.commons.math3.ml.neuralnet" ], [ "FeatureInitializerFactory", "org.apache.commons.math3.ml.neuralnet" ], [ "Neuron", "org.apache.commons.math3.ml.neuralnet" ], [ "FeatureInitializer", "org.apache.commons.math3.ml.neuralnet" ], [ "NeuronString", "org.apache.commons.math3.ml.neuralnet.oned" ], [ "NeuronSquareMesh2D", "org.apache.commons.math3.ml.neuralnet.twod" ], [ "SmoothedDataHistogram", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "UnifiedDistanceMatrix", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "MapDataVisualization", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "MapVisualization", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "LocationFinder", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "HitHistogram", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "QuantizationError", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "TopographicErrorHistogram", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "SquareNeighbourhood", "org.apache.commons.math3.ml.neuralnet" ], [ "UpdateAction", "org.apache.commons.math3.ml.neuralnet" ], [ "BracketingNthOrderBrentSolverDFP", "org.apache.commons.math3.dfp" ], [ "UnivariateDfpFunction", "org.apache.commons.math3.dfp" ], [ "DfpDec", "org.apache.commons.math3.dfp" ], [ "DfpMath", "org.apache.commons.math3.dfp" ], [ "Dfp", "org.apache.commons.math3.dfp" ], [ "DfpField", "org.apache.commons.math3.dfp" ], [ "GeneticAlgorithm", "org.apache.commons.math3.genetics" ], [ "SelectionPolicy", "org.apache.commons.math3.genetics" ], [ "ListPopulation", "org.apache.commons.math3.genetics" ], [ "FixedGenerationCount", "org.apache.commons.math3.genetics" ], [ "AbstractListChromosome", "org.apache.commons.math3.genetics" ], [ "OnePointCrossover", "org.apache.commons.math3.genetics" ], [ "ElitisticListPopulation", "org.apache.commons.math3.genetics" ], [ "Chromosome", "org.apache.commons.math3.genetics" ], [ "OrderedCrossover", "org.apache.commons.math3.genetics" ], [ "InvalidRepresentationException", "org.apache.commons.math3.genetics" ], [ "RandomKey", "org.apache.commons.math3.genetics" ], [ "StoppingCondition", "org.apache.commons.math3.genetics" ], [ "PermutationChromosome", "org.apache.commons.math3.genetics" ], [ "ChromosomePair", "org.apache.commons.math3.genetics" ], [ "TournamentSelection", "org.apache.commons.math3.genetics" ], [ "NPointCrossover", "org.apache.commons.math3.genetics" ], [ "UniformCrossover", "org.apache.commons.math3.genetics" ], [ "MutationPolicy", "org.apache.commons.math3.genetics" ], [ "FixedElapsedTime", "org.apache.commons.math3.genetics" ], [ "CycleCrossover", "org.apache.commons.math3.genetics" ], [ "BinaryMutation", "org.apache.commons.math3.genetics" ], [ "BinaryChromosome", "org.apache.commons.math3.genetics" ], [ "Population", "org.apache.commons.math3.genetics" ], [ "RandomKeyMutation", "org.apache.commons.math3.genetics" ], [ "Fitness", "org.apache.commons.math3.genetics" ], [ "CrossoverPolicy", "org.apache.commons.math3.genetics" ], [ "Vector", "org.apache.commons.math3.geometry" ], [ "VectorFormat", "org.apache.commons.math3.geometry" ], [ "Point", "org.apache.commons.math3.geometry" ], [ "RotationConvention", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "SubPlane", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Vector3DFormat", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Segment", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "OutlineExtractor", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "PolyhedronsSet", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "RotationOrder", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "FieldVector3D", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Rotation", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Euclidean3D", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "SubLine", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "SphericalCoordinates", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "CardanEulerSingularityException", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "NotARotationMatrixException", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "FieldRotation", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Vector3D", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Plane", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "SphereGenerator", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Line", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "IntervalsSet", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "Interval", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "SubOrientedPoint", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "OrientedPoint", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "Euclidean1D", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "Vector1DFormat", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "Vector1D", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "Segment", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "AbstractConvexHullGenerator2D", "org.apache.commons.math3.geometry.euclidean.twod.hull" ], [ "AklToussaintHeuristic", "org.apache.commons.math3.geometry.euclidean.twod.hull" ], [ "ConvexHull2D", "org.apache.commons.math3.geometry.euclidean.twod.hull" ], [ "MonotoneChain", "org.apache.commons.math3.geometry.euclidean.twod.hull" ], [ "ConvexHullGenerator2D", "org.apache.commons.math3.geometry.euclidean.twod.hull" ], [ "Vector2DFormat", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "PolygonsSet", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "SubLine", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "DiskGenerator", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "Vector2D", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "NestedLoops", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "Euclidean2D", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "Line", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "ConvexHullGenerator", "org.apache.commons.math3.geometry.hull" ], [ "ConvexHull", "org.apache.commons.math3.geometry.hull" ], [ "ArcsSet", "org.apache.commons.math3.geometry.spherical.oned" ], [ "S1Point", "org.apache.commons.math3.geometry.spherical.oned" ], [ "Sphere1D", "org.apache.commons.math3.geometry.spherical.oned" ], [ "Arc", "org.apache.commons.math3.geometry.spherical.oned" ], [ "LimitAngle", "org.apache.commons.math3.geometry.spherical.oned" ], [ "SubLimitAngle", "org.apache.commons.math3.geometry.spherical.oned" ], [ "Sphere2D", "org.apache.commons.math3.geometry.spherical.twod" ], [ "SubCircle", "org.apache.commons.math3.geometry.spherical.twod" ], [ "Vertex", "org.apache.commons.math3.geometry.spherical.twod" ], [ "Circle", "org.apache.commons.math3.geometry.spherical.twod" ], [ "PropertiesComputer", "org.apache.commons.math3.geometry.spherical.twod" ], [ "SphericalPolygonsSet", "org.apache.commons.math3.geometry.spherical.twod" ], [ "Edge", "org.apache.commons.math3.geometry.spherical.twod" ], [ "EdgesBuilder", "org.apache.commons.math3.geometry.spherical.twod" ], [ "S2Point", "org.apache.commons.math3.geometry.spherical.twod" ], [ "SupportBallGenerator", "org.apache.commons.math3.geometry.enclosing" ], [ "EnclosingBall", "org.apache.commons.math3.geometry.enclosing" ], [ "WelzlEncloser", "org.apache.commons.math3.geometry.enclosing" ], [ "Encloser", "org.apache.commons.math3.geometry.enclosing" ], [ "InsideFinder", "org.apache.commons.math3.geometry.partitioning" ], [ "BoundaryProjection", "org.apache.commons.math3.geometry.partitioning" ], [ "BoundaryProjector", "org.apache.commons.math3.geometry.partitioning" ], [ "Region", "org.apache.commons.math3.geometry.partitioning" ], [ "Transform", "org.apache.commons.math3.geometry.partitioning" ], [ "NodesSet", "org.apache.commons.math3.geometry.partitioning" ], [ "AbstractRegion", "org.apache.commons.math3.geometry.partitioning" ], [ "Characterization", "org.apache.commons.math3.geometry.partitioning" ], [ "AbstractSubHyperplane", "org.apache.commons.math3.geometry.partitioning" ], [ "BSPTree", "org.apache.commons.math3.geometry.partitioning" ], [ "RegionFactory", "org.apache.commons.math3.geometry.partitioning" ], [ "Side", "org.apache.commons.math3.geometry.partitioning" ], [ "BoundarySizeVisitor", "org.apache.commons.math3.geometry.partitioning" ], [ "AVLTree", "org.apache.commons.math3.geometry.partitioning.utilities" ], [ "OrderedTuple", "org.apache.commons.math3.geometry.partitioning.utilities" ], [ "BSPTreeVisitor", "org.apache.commons.math3.geometry.partitioning" ], [ "Hyperplane", "org.apache.commons.math3.geometry.partitioning" ], [ "Embedding", "org.apache.commons.math3.geometry.partitioning" ], [ "BoundaryAttribute", "org.apache.commons.math3.geometry.partitioning" ], [ "SubHyperplane", "org.apache.commons.math3.geometry.partitioning" ], [ "BoundaryBuilder", "org.apache.commons.math3.geometry.partitioning" ], [ "Space", "org.apache.commons.math3.geometry" ], [ "Field", "org.apache.commons.math3" ], [ "ProcessModel", "org.apache.commons.math3.filter" ], [ "MeasurementModel", "org.apache.commons.math3.filter" ], [ "KalmanFilter", "org.apache.commons.math3.filter" ], [ "DefaultProcessModel", "org.apache.commons.math3.filter" ], [ "DefaultMeasurementModel", "org.apache.commons.math3.filter" ], [ "NormalizedRandomGenerator", "org.apache.commons.math3.random" ], [ "GaussianRandomGenerator", "org.apache.commons.math3.random" ], [ "RandomGenerator", "org.apache.commons.math3.random" ], [ "ISAACRandom", "org.apache.commons.math3.random" ], [ "CorrelatedRandomVectorGenerator", "org.apache.commons.math3.random" ], [ "Well19937a", "org.apache.commons.math3.random" ], [ "Well1024a", "org.apache.commons.math3.random" ], [ "UniformRandomGenerator", "org.apache.commons.math3.random" ], [ "Well44497a", "org.apache.commons.math3.random" ], [ "BitsStreamGenerator", "org.apache.commons.math3.random" ], [ "SynchronizedRandomGenerator", "org.apache.commons.math3.random" ], [ "UncorrelatedRandomVectorGenerator", "org.apache.commons.math3.random" ], [ "Well19937c", "org.apache.commons.math3.random" ], [ "ValueServer", "org.apache.commons.math3.random" ], [ "HaltonSequenceGenerator", "org.apache.commons.math3.random" ], [ "Well44497b", "org.apache.commons.math3.random" ], [ "RandomData", "org.apache.commons.math3.random" ], [ "RandomVectorGenerator", "org.apache.commons.math3.random" ], [ "RandomDataGenerator", "org.apache.commons.math3.random" ], [ "Well512a", "org.apache.commons.math3.random" ], [ "AbstractRandomGenerator", "org.apache.commons.math3.random" ], [ "JDKRandomGenerator", "org.apache.commons.math3.random" ], [ "StableRandomGenerator", "org.apache.commons.math3.random" ], [ "RandomAdaptor", "org.apache.commons.math3.random" ], [ "RandomGeneratorFactory", "org.apache.commons.math3.random" ], [ "AbstractWell", "org.apache.commons.math3.random" ], [ "RandomDataImpl", "org.apache.commons.math3.random" ], [ "EmpiricalDistribution", "org.apache.commons.math3.random" ], [ "SobolSequenceGenerator", "org.apache.commons.math3.random" ], [ "MersenneTwister", "org.apache.commons.math3.random" ], [ "UnitSphereRandomVectorGenerator", "org.apache.commons.math3.random" ], [ "FieldElement", "org.apache.commons.math3" ], [ "BigFractionFormat", "org.apache.commons.math3.fraction" ], [ "Fraction", "org.apache.commons.math3.fraction" ], [ "BigFraction", "org.apache.commons.math3.fraction" ], [ "AbstractFormat", "org.apache.commons.math3.fraction" ], [ "FractionFormat", "org.apache.commons.math3.fraction" ], [ "FractionField", "org.apache.commons.math3.fraction" ], [ "BigFractionField", "org.apache.commons.math3.fraction" ], [ "ProperFractionFormat", "org.apache.commons.math3.fraction" ], [ "FractionConversionException", "org.apache.commons.math3.fraction" ], [ "ProperBigFractionFormat", "org.apache.commons.math3.fraction" ], [ "NotFiniteNumberException", "org.apache.commons.math3.exception" ], [ "NoBracketingException", "org.apache.commons.math3.exception" ], [ "MathArithmeticException", "org.apache.commons.math3.exception" ], [ "InsufficientDataException", "org.apache.commons.math3.exception" ], [ "TooManyEvaluationsException", "org.apache.commons.math3.exception" ], [ "ExceptionContextProvider", "org.apache.commons.math3.exception.util" ], [ "ExceptionContext", "org.apache.commons.math3.exception.util" ], [ "ArgUtils", "org.apache.commons.math3.exception.util" ], [ "DummyLocalizable", "org.apache.commons.math3.exception.util" ], [ "Localizable", "org.apache.commons.math3.exception.util" ], [ "LocalizedFormats", "org.apache.commons.math3.exception.util" ], [ "NotANumberException", "org.apache.commons.math3.exception" ], [ "MultiDimensionMismatchException", "org.apache.commons.math3.exception" ], [ "OutOfRangeException", "org.apache.commons.math3.exception" ], [ "TooManyIterationsException", "org.apache.commons.math3.exception" ], [ "NullArgumentException", "org.apache.commons.math3.exception" ], [ "NumberIsTooLargeException", "org.apache.commons.math3.exception" ], [ "MathIllegalStateException", "org.apache.commons.math3.exception" ], [ "MathUnsupportedOperationException", "org.apache.commons.math3.exception" ], [ "NotStrictlyPositiveException", "org.apache.commons.math3.exception" ], [ "NonMonotonicSequenceException", "org.apache.commons.math3.exception" ], [ "ZeroException", "org.apache.commons.math3.exception" ], [ "MathIllegalArgumentException", "org.apache.commons.math3.exception" ], [ "DimensionMismatchException", "org.apache.commons.math3.exception" ], [ "MathRuntimeException", "org.apache.commons.math3.exception" ], [ "MathParseException", "org.apache.commons.math3.exception" ], [ "NoDataException", "org.apache.commons.math3.exception" ], [ "MathIllegalNumberException", "org.apache.commons.math3.exception" ], [ "NotPositiveException", "org.apache.commons.math3.exception" ], [ "MaxCountExceededException", "org.apache.commons.math3.exception" ], [ "NumberIsTooSmallException", "org.apache.commons.math3.exception" ], [ "ConvergenceException", "org.apache.commons.math3.exception" ], [ "MathInternalError", "org.apache.commons.math3.exception" ], [ "DftNormalization", "org.apache.commons.math3.transform" ], [ "RealTransformer", "org.apache.commons.math3.transform" ], [ "FastSineTransformer", "org.apache.commons.math3.transform" ], [ "DctNormalization", "org.apache.commons.math3.transform" ], [ "FastFourierTransformer", "org.apache.commons.math3.transform" ], [ "TransformType", "org.apache.commons.math3.transform" ], [ "FastCosineTransformer", "org.apache.commons.math3.transform" ], [ "TransformUtils", "org.apache.commons.math3.transform" ], [ "DstNormalization", "org.apache.commons.math3.transform" ], [ "FastHadamardTransformer", "org.apache.commons.math3.transform" ] ],
  "tokensProjectClassesNonPrivateStaticNonVoidMethods" : [ [ "isPrime", "org.apache.commons.math3.primes", "Primes", "public static boolean isPrime(int n)" ], [ "nextPrime", "org.apache.commons.math3.primes", "Primes", "public static int nextPrime(int n)" ], [ "primeFactors", "org.apache.commons.math3.primes", "Primes", "public static List<Integer> primeFactors(int n)" ], [ "smallTrialDivision", "org.apache.commons.math3.primes", "SmallPrimes", "public static int smallTrialDivision(int n, final List<Integer> factors)" ], [ "boundedTrialDivision", "org.apache.commons.math3.primes", "SmallPrimes", "public static int boundedTrialDivision(int n, int maxFactor, List<Integer> factors)" ], [ "trialDivision", "org.apache.commons.math3.primes", "SmallPrimes", "public static List<Integer> trialDivision(int n)" ], [ "millerRabinPrimeTest", "org.apache.commons.math3.primes", "SmallPrimes", "public static boolean millerRabinPrimeTest(final int n)" ], [ "primeFactors", "org.apache.commons.math3.primes", "PollardRho", "public static List<Integer> primeFactors(int n)" ], [ "rhoBrent", "org.apache.commons.math3.primes", "PollardRho", "static int rhoBrent(final int n)" ], [ "gcdPositive", "org.apache.commons.math3.primes", "PollardRho", "static int gcdPositive(int a, int b)" ], [ "create", "org.apache.commons.math3.fitting", "GaussianCurveFitter", "public static GaussianCurveFitter create()" ], [ "create", "org.apache.commons.math3.fitting", "SimpleCurveFitter", "public static SimpleCurveFitter create(ParametricUnivariateFunction f, double[] start)" ], [ "create", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem create(final MultivariateJacobianFunction model, final RealVector observed, final RealVector start, final RealMatrix weight, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations, final boolean lazyEvaluation, final ParameterValidator paramValidator)" ], [ "create", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem create(final MultivariateJacobianFunction model, final RealVector observed, final RealVector start, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations)" ], [ "create", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem create(final MultivariateJacobianFunction model, final RealVector observed, final RealVector start, final RealMatrix weight, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations)" ], [ "create", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem create(final MultivariateVectorFunction model, final MultivariateMatrixFunction jacobian, final double[] observed, final double[] start, final RealMatrix weight, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations)" ], [ "weightMatrix", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem weightMatrix(final LeastSquaresProblem problem, final RealMatrix weights)" ], [ "weightDiagonal", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem weightDiagonal(final LeastSquaresProblem problem, final RealVector weights)" ], [ "countEvaluations", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem countEvaluations(final LeastSquaresProblem problem, final Incrementor counter)" ], [ "evaluationChecker", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static ConvergenceChecker<Evaluation> evaluationChecker(final ConvergenceChecker<PointVectorValuePair> checker)" ], [ "model", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static MultivariateJacobianFunction model(final MultivariateVectorFunction value, final MultivariateMatrixFunction jacobian)" ], [ "create", "org.apache.commons.math3.fitting", "HarmonicCurveFitter", "public static HarmonicCurveFitter create()" ], [ "create", "org.apache.commons.math3.fitting", "PolynomialCurveFitter", "public static PolynomialCurveFitter create(int degree)" ], [ "compose", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateFunction compose(final UnivariateFunction... f)" ], [ "compose", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateDifferentiableFunction compose(final UnivariateDifferentiableFunction... f)" ], [ "compose", "org.apache.commons.math3.analysis", "FunctionUtils", "public static DifferentiableUnivariateFunction compose(final DifferentiableUnivariateFunction... f)" ], [ "add", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateFunction add(final UnivariateFunction... f)" ], [ "add", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateDifferentiableFunction add(final UnivariateDifferentiableFunction... f)" ], [ "add", "org.apache.commons.math3.analysis", "FunctionUtils", "public static DifferentiableUnivariateFunction add(final DifferentiableUnivariateFunction... f)" ], [ "multiply", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateFunction multiply(final UnivariateFunction... f)" ], [ "multiply", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateDifferentiableFunction multiply(final UnivariateDifferentiableFunction... f)" ], [ "multiply", "org.apache.commons.math3.analysis", "FunctionUtils", "public static DifferentiableUnivariateFunction multiply(final DifferentiableUnivariateFunction... f)" ], [ "combine", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateFunction combine(final BivariateFunction combiner, final UnivariateFunction f, final UnivariateFunction g)" ], [ "collector", "org.apache.commons.math3.analysis", "FunctionUtils", "public static MultivariateFunction collector(final BivariateFunction combiner, final UnivariateFunction f, final double initialValue)" ], [ "collector", "org.apache.commons.math3.analysis", "FunctionUtils", "public static MultivariateFunction collector(final BivariateFunction combiner, final double initialValue)" ], [ "fix1stArgument", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateFunction fix1stArgument(final BivariateFunction f, final double fixed)" ], [ "fix2ndArgument", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateFunction fix2ndArgument(final BivariateFunction f, final double fixed)" ], [ "sample", "org.apache.commons.math3.analysis", "FunctionUtils", "public static double[] sample(UnivariateFunction f, double min, double max, int n) throws NumberIsTooLargeException, NotStrictlyPositiveException" ], [ "toDifferentiableUnivariateFunction", "org.apache.commons.math3.analysis", "FunctionUtils", "public static DifferentiableUnivariateFunction toDifferentiableUnivariateFunction(final UnivariateDifferentiableFunction f)" ], [ "toUnivariateDifferential", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateDifferentiableFunction toUnivariateDifferential(final DifferentiableUnivariateFunction f)" ], [ "toDifferentiableMultivariateFunction", "org.apache.commons.math3.analysis", "FunctionUtils", "public static DifferentiableMultivariateFunction toDifferentiableMultivariateFunction(final MultivariateDifferentiableFunction f)" ], [ "toMultivariateDifferentiableFunction", "org.apache.commons.math3.analysis", "FunctionUtils", "public static MultivariateDifferentiableFunction toMultivariateDifferentiableFunction(final DifferentiableMultivariateFunction f)" ], [ "toDifferentiableMultivariateVectorFunction", "org.apache.commons.math3.analysis", "FunctionUtils", "public static DifferentiableMultivariateVectorFunction toDifferentiableMultivariateVectorFunction(final MultivariateDifferentiableVectorFunction f)" ], [ "toMultivariateDifferentiableVectorFunction", "org.apache.commons.math3.analysis", "FunctionUtils", "public static MultivariateDifferentiableVectorFunction toMultivariateDifferentiableVectorFunction(final DifferentiableMultivariateVectorFunction f)" ], [ "solve", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double solve(UnivariateFunction function, double x0, double x1) throws NullArgumentException, NoBracketingException" ], [ "solve", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double solve(UnivariateFunction function, double x0, double x1, double absoluteAccuracy) throws NullArgumentException, NoBracketingException" ], [ "forceSide", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double forceSide(final int maxEval, final UnivariateFunction f, final BracketedUnivariateSolver<UnivariateFunction> bracketing, final double baseRoot, final double min, final double max, final AllowedSolution allowedSolution) throws NoBracketingException" ], [ "bracket", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double[] bracket(UnivariateFunction function, double initial, double lowerBound, double upperBound) throws NullArgumentException, NotStrictlyPositiveException, NoBracketingException" ], [ "bracket", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double[] bracket(UnivariateFunction function, double initial, double lowerBound, double upperBound, int maximumIterations) throws NullArgumentException, NotStrictlyPositiveException, NoBracketingException" ], [ "bracket", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double[] bracket(final UnivariateFunction function, final double initial, final double lowerBound, final double upperBound, final double q, final double r, final int maximumIterations) throws NoBracketingException" ], [ "midpoint", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double midpoint(double a, double b)" ], [ "isBracketing", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static boolean isBracketing(UnivariateFunction function, final double lower, final double upper) throws NullArgumentException" ], [ "isSequence", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static boolean isSequence(final double start, final double mid, final double end)" ], [ "getCompiler", "org.apache.commons.math3.analysis.differentiation", "DSCompiler", "public static DSCompiler getCompiler(int parameters, int order) throws NumberIsTooLargeException" ], [ "createConstant", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public static SparseGradient createConstant(final double value)" ], [ "createVariable", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public static SparseGradient createVariable(final int idx, final double value)" ], [ "hypot", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public static SparseGradient hypot(final SparseGradient x, final SparseGradient y)" ], [ "pow", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public static SparseGradient pow(final double a, final SparseGradient x)" ], [ "atan2", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public static SparseGradient atan2(final SparseGradient y, final SparseGradient x)" ], [ "hypot", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public static DerivativeStructure hypot(final DerivativeStructure x, final DerivativeStructure y) throws DimensionMismatchException" ], [ "pow", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public static DerivativeStructure pow(final double a, final DerivativeStructure x)" ], [ "atan2", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public static DerivativeStructure atan2(final DerivativeStructure y, final DerivativeStructure x) throws DimensionMismatchException" ], [ "evaluate", "org.apache.commons.math3.analysis.polynomials", "PolynomialFunctionNewtonForm", "public static double evaluate(double[] a, double[] c, double z) throws NullArgumentException, DimensionMismatchException, NoDataException" ], [ "evaluate", "org.apache.commons.math3.analysis.polynomials", "PolynomialFunctionLagrangeForm", "public static double evaluate(double[] x, double[] y, double z) throws DimensionMismatchException, NumberIsTooSmallException, NonMonotonicSequenceException" ], [ "verifyInterpolationArray", "org.apache.commons.math3.analysis.polynomials", "PolynomialFunctionLagrangeForm", "public static boolean verifyInterpolationArray(double[] x, double[] y, boolean abort) throws DimensionMismatchException, NumberIsTooSmallException, NonMonotonicSequenceException" ], [ "createChebyshevPolynomial", "org.apache.commons.math3.analysis.polynomials", "PolynomialsUtils", "public static PolynomialFunction createChebyshevPolynomial(final int degree)" ], [ "createHermitePolynomial", "org.apache.commons.math3.analysis.polynomials", "PolynomialsUtils", "public static PolynomialFunction createHermitePolynomial(final int degree)" ], [ "createLaguerrePolynomial", "org.apache.commons.math3.analysis.polynomials", "PolynomialsUtils", "public static PolynomialFunction createLaguerrePolynomial(final int degree)" ], [ "createLegendrePolynomial", "org.apache.commons.math3.analysis.polynomials", "PolynomialsUtils", "public static PolynomialFunction createLegendrePolynomial(final int degree)" ], [ "createJacobiPolynomial", "org.apache.commons.math3.analysis.polynomials", "PolynomialsUtils", "public static PolynomialFunction createJacobiPolynomial(final int degree, final int v, final int w)" ], [ "shift", "org.apache.commons.math3.analysis.polynomials", "PolynomialsUtils", "public static double[] shift(final double[] coefficients, final double shift)" ], [ "evaluate", "org.apache.commons.math3.analysis.polynomials", "PolynomialFunction", "protected static double evaluate(double[] coefficients, double argument) throws NullArgumentException, NoDataException" ], [ "differentiate", "org.apache.commons.math3.analysis.polynomials", "PolynomialFunction", "protected static double[] differentiate(double[] coefficients) throws NullArgumentException, NoDataException" ], [ "computeDividedDifference", "org.apache.commons.math3.analysis.interpolation", "DividedDifferenceInterpolator", "protected static double[] computeDividedDifference(final double[] x, final double[] y) throws DimensionMismatchException, NumberIsTooSmallException, NonMonotonicSequenceException" ], [ "compareTo", "org.apache.commons.math3.util", "Precision", "public static int compareTo(double x, double y, double eps)" ], [ "compareTo", "org.apache.commons.math3.util", "Precision", "public static int compareTo(final double x, final double y, final int maxUlps)" ], [ "equals", "org.apache.commons.math3.util", "Precision", "public static boolean equals(float x, float y)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "Precision", "public static boolean equalsIncludingNaN(float x, float y)" ], [ "equals", "org.apache.commons.math3.util", "Precision", "public static boolean equals(float x, float y, float eps)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "Precision", "public static boolean equalsIncludingNaN(float x, float y, float eps)" ], [ "equals", "org.apache.commons.math3.util", "Precision", "public static boolean equals(final float x, final float y, final int maxUlps)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "Precision", "public static boolean equalsIncludingNaN(float x, float y, int maxUlps)" ], [ "equals", "org.apache.commons.math3.util", "Precision", "public static boolean equals(double x, double y)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "Precision", "public static boolean equalsIncludingNaN(double x, double y)" ], [ "equals", "org.apache.commons.math3.util", "Precision", "public static boolean equals(double x, double y, double eps)" ], [ "equalsWithRelativeTolerance", "org.apache.commons.math3.util", "Precision", "public static boolean equalsWithRelativeTolerance(double x, double y, double eps)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "Precision", "public static boolean equalsIncludingNaN(double x, double y, double eps)" ], [ "equals", "org.apache.commons.math3.util", "Precision", "public static boolean equals(final double x, final double y, final int maxUlps)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "Precision", "public static boolean equalsIncludingNaN(double x, double y, int maxUlps)" ], [ "round", "org.apache.commons.math3.util", "Precision", "public static double round(double x, int scale)" ], [ "round", "org.apache.commons.math3.util", "Precision", "public static double round(double x, int scale, int roundingMethod)" ], [ "round", "org.apache.commons.math3.util", "Precision", "public static float round(float x, int scale)" ], [ "round", "org.apache.commons.math3.util", "Precision", "public static float round(float x, int scale, int roundingMethod) throws MathArithmeticException, MathIllegalArgumentException" ], [ "representableDelta", "org.apache.commons.math3.util", "Precision", "public static double representableDelta(double x, double originalDelta)" ], [ "wrap", "org.apache.commons.math3.util", "Incrementor", "public static Incrementor wrap(final IntegerSequence.Incrementor incrementor)" ], [ "scale", "org.apache.commons.math3.util", "MathArrays", "public static double[] scale(double val, final double[] arr)" ], [ "ebeAdd", "org.apache.commons.math3.util", "MathArrays", "public static double[] ebeAdd(double[] a, double[] b) throws DimensionMismatchException" ], [ "ebeSubtract", "org.apache.commons.math3.util", "MathArrays", "public static double[] ebeSubtract(double[] a, double[] b) throws DimensionMismatchException" ], [ "ebeMultiply", "org.apache.commons.math3.util", "MathArrays", "public static double[] ebeMultiply(double[] a, double[] b) throws DimensionMismatchException" ], [ "ebeDivide", "org.apache.commons.math3.util", "MathArrays", "public static double[] ebeDivide(double[] a, double[] b) throws DimensionMismatchException" ], [ "distance1", "org.apache.commons.math3.util", "MathArrays", "public static double distance1(double[] p1, double[] p2) throws DimensionMismatchException" ], [ "distance1", "org.apache.commons.math3.util", "MathArrays", "public static int distance1(int[] p1, int[] p2) throws DimensionMismatchException" ], [ "distance", "org.apache.commons.math3.util", "MathArrays", "public static double distance(double[] p1, double[] p2) throws DimensionMismatchException" ], [ "cosAngle", "org.apache.commons.math3.util", "MathArrays", "public static double cosAngle(double[] v1, double[] v2)" ], [ "distance", "org.apache.commons.math3.util", "MathArrays", "public static double distance(int[] p1, int[] p2) throws DimensionMismatchException" ], [ "distanceInf", "org.apache.commons.math3.util", "MathArrays", "public static double distanceInf(double[] p1, double[] p2) throws DimensionMismatchException" ], [ "distanceInf", "org.apache.commons.math3.util", "MathArrays", "public static int distanceInf(int[] p1, int[] p2) throws DimensionMismatchException" ], [ "isMonotonic", "org.apache.commons.math3.util", "MathArrays", "public static <T extends Comparable<? super T>> boolean isMonotonic(T[] val, OrderDirection dir, boolean strict)" ], [ "isMonotonic", "org.apache.commons.math3.util", "MathArrays", "public static boolean isMonotonic(double[] val, OrderDirection dir, boolean strict)" ], [ "checkEqualLength", "org.apache.commons.math3.util", "MathArrays", "public static boolean checkEqualLength(double[] a, double[] b, boolean abort)" ], [ "checkEqualLength", "org.apache.commons.math3.util", "MathArrays", "public static boolean checkEqualLength(int[] a, int[] b, boolean abort)" ], [ "checkOrder", "org.apache.commons.math3.util", "MathArrays", "public static boolean checkOrder(double[] val, OrderDirection dir, boolean strict, boolean abort) throws NonMonotonicSequenceException" ], [ "safeNorm", "org.apache.commons.math3.util", "MathArrays", "public static double safeNorm(double[] v)" ], [ "copyOf", "org.apache.commons.math3.util", "MathArrays", "public static int[] copyOf(int[] source)" ], [ "copyOf", "org.apache.commons.math3.util", "MathArrays", "public static double[] copyOf(double[] source)" ], [ "copyOf", "org.apache.commons.math3.util", "MathArrays", "public static int[] copyOf(int[] source, int len)" ], [ "copyOf", "org.apache.commons.math3.util", "MathArrays", "public static double[] copyOf(double[] source, int len)" ], [ "copyOfRange", "org.apache.commons.math3.util", "MathArrays", "public static double[] copyOfRange(double[] source, int from, int to)" ], [ "linearCombination", "org.apache.commons.math3.util", "MathArrays", "public static double linearCombination(final double[] a, final double[] b) throws DimensionMismatchException" ], [ "linearCombination", "org.apache.commons.math3.util", "MathArrays", "public static double linearCombination(final double a1, final double b1, final double a2, final double b2)" ], [ "linearCombination", "org.apache.commons.math3.util", "MathArrays", "public static double linearCombination(final double a1, final double b1, final double a2, final double b2, final double a3, final double b3)" ], [ "linearCombination", "org.apache.commons.math3.util", "MathArrays", "public static double linearCombination(final double a1, final double b1, final double a2, final double b2, final double a3, final double b3, final double a4, final double b4)" ], [ "equals", "org.apache.commons.math3.util", "MathArrays", "public static boolean equals(float[] x, float[] y)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "MathArrays", "public static boolean equalsIncludingNaN(float[] x, float[] y)" ], [ "equals", "org.apache.commons.math3.util", "MathArrays", "public static boolean equals(double[] x, double[] y)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "MathArrays", "public static boolean equalsIncludingNaN(double[] x, double[] y)" ], [ "normalizeArray", "org.apache.commons.math3.util", "MathArrays", "public static double[] normalizeArray(double[] values, double normalizedSum) throws MathIllegalArgumentException, MathArithmeticException" ], [ "buildArray", "org.apache.commons.math3.util", "MathArrays", "public static <T> T[] buildArray(final Field<T> field, final int length)" ], [ "buildArray", "org.apache.commons.math3.util", "MathArrays", "public static <T> T[][] buildArray(final Field<T> field, final int rows, final int columns)" ], [ "convolve", "org.apache.commons.math3.util", "MathArrays", "public static double[] convolve(double[] x, double[] h) throws NullArgumentException, NoDataException" ], [ "natural", "org.apache.commons.math3.util", "MathArrays", "public static int[] natural(int n)" ], [ "sequence", "org.apache.commons.math3.util", "MathArrays", "public static int[] sequence(int size, int start, int stride)" ], [ "verifyValues", "org.apache.commons.math3.util", "MathArrays", "public static boolean verifyValues(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "verifyValues", "org.apache.commons.math3.util", "MathArrays", "public static boolean verifyValues(final double[] values, final int begin, final int length, final boolean allowEmpty) throws MathIllegalArgumentException" ], [ "verifyValues", "org.apache.commons.math3.util", "MathArrays", "public static boolean verifyValues(final double[] values, final double[] weights, final int begin, final int length) throws MathIllegalArgumentException" ], [ "verifyValues", "org.apache.commons.math3.util", "MathArrays", "public static boolean verifyValues(final double[] values, final double[] weights, final int begin, final int length, final boolean allowEmpty) throws MathIllegalArgumentException" ], [ "concatenate", "org.apache.commons.math3.util", "MathArrays", "public static double[] concatenate(double[]... x)" ], [ "unique", "org.apache.commons.math3.util", "MathArrays", "public static double[] unique(double[] data)" ], [ "create", "org.apache.commons.math3.util", "Pair", "public static <K, V> Pair<K, V> create(K k, V v)" ], [ "slowCos", "org.apache.commons.math3.util", "FastMathCalc", "static double slowCos(final double x, final double[] result)" ], [ "slowSin", "org.apache.commons.math3.util", "FastMathCalc", "static double slowSin(final double x, final double[] result)" ], [ "slowexp", "org.apache.commons.math3.util", "FastMathCalc", "static double slowexp(final double x, final double[] result)" ], [ "expint", "org.apache.commons.math3.util", "FastMathCalc", "static double expint(int p, final double[] result)" ], [ "slowLog", "org.apache.commons.math3.util", "FastMathCalc", "static double[] slowLog(double xi)" ], [ "format", "org.apache.commons.math3.util", "FastMathCalc", "static String format(double d)" ], [ "sqrt", "org.apache.commons.math3.util", "FastMath", "public static double sqrt(final double a)" ], [ "cosh", "org.apache.commons.math3.util", "FastMath", "public static double cosh(double x)" ], [ "sinh", "org.apache.commons.math3.util", "FastMath", "public static double sinh(double x)" ], [ "tanh", "org.apache.commons.math3.util", "FastMath", "public static double tanh(double x)" ], [ "acosh", "org.apache.commons.math3.util", "FastMath", "public static double acosh(final double a)" ], [ "asinh", "org.apache.commons.math3.util", "FastMath", "public static double asinh(double a)" ], [ "atanh", "org.apache.commons.math3.util", "FastMath", "public static double atanh(double a)" ], [ "signum", "org.apache.commons.math3.util", "FastMath", "public static double signum(final double a)" ], [ "signum", "org.apache.commons.math3.util", "FastMath", "public static float signum(final float a)" ], [ "nextUp", "org.apache.commons.math3.util", "FastMath", "public static double nextUp(final double a)" ], [ "nextUp", "org.apache.commons.math3.util", "FastMath", "public static float nextUp(final float a)" ], [ "nextDown", "org.apache.commons.math3.util", "FastMath", "public static double nextDown(final double a)" ], [ "nextDown", "org.apache.commons.math3.util", "FastMath", "public static float nextDown(final float a)" ], [ "random", "org.apache.commons.math3.util", "FastMath", "public static double random()" ], [ "exp", "org.apache.commons.math3.util", "FastMath", "public static double exp(double x)" ], [ "expm1", "org.apache.commons.math3.util", "FastMath", "public static double expm1(double x)" ], [ "log", "org.apache.commons.math3.util", "FastMath", "public static double log(final double x)" ], [ "log1p", "org.apache.commons.math3.util", "FastMath", "public static double log1p(final double x)" ], [ "log10", "org.apache.commons.math3.util", "FastMath", "public static double log10(final double x)" ], [ "log", "org.apache.commons.math3.util", "FastMath", "public static double log(double base, double x)" ], [ "pow", "org.apache.commons.math3.util", "FastMath", "public static double pow(final double x, final double y)" ], [ "pow", "org.apache.commons.math3.util", "FastMath", "public static double pow(double d, int e)" ], [ "pow", "org.apache.commons.math3.util", "FastMath", "public static double pow(double d, long e)" ], [ "sin", "org.apache.commons.math3.util", "FastMath", "public static double sin(double x)" ], [ "cos", "org.apache.commons.math3.util", "FastMath", "public static double cos(double x)" ], [ "tan", "org.apache.commons.math3.util", "FastMath", "public static double tan(double x)" ], [ "atan", "org.apache.commons.math3.util", "FastMath", "public static double atan(double x)" ], [ "atan2", "org.apache.commons.math3.util", "FastMath", "public static double atan2(double y, double x)" ], [ "asin", "org.apache.commons.math3.util", "FastMath", "public static double asin(double x)" ], [ "acos", "org.apache.commons.math3.util", "FastMath", "public static double acos(double x)" ], [ "cbrt", "org.apache.commons.math3.util", "FastMath", "public static double cbrt(double x)" ], [ "toRadians", "org.apache.commons.math3.util", "FastMath", "public static double toRadians(double x)" ], [ "toDegrees", "org.apache.commons.math3.util", "FastMath", "public static double toDegrees(double x)" ], [ "abs", "org.apache.commons.math3.util", "FastMath", "public static int abs(final int x)" ], [ "abs", "org.apache.commons.math3.util", "FastMath", "public static long abs(final long x)" ], [ "abs", "org.apache.commons.math3.util", "FastMath", "public static float abs(final float x)" ], [ "abs", "org.apache.commons.math3.util", "FastMath", "public static double abs(double x)" ], [ "ulp", "org.apache.commons.math3.util", "FastMath", "public static double ulp(double x)" ], [ "ulp", "org.apache.commons.math3.util", "FastMath", "public static float ulp(float x)" ], [ "scalb", "org.apache.commons.math3.util", "FastMath", "public static double scalb(final double d, final int n)" ], [ "scalb", "org.apache.commons.math3.util", "FastMath", "public static float scalb(final float f, final int n)" ], [ "nextAfter", "org.apache.commons.math3.util", "FastMath", "public static double nextAfter(double d, double direction)" ], [ "nextAfter", "org.apache.commons.math3.util", "FastMath", "public static float nextAfter(final float f, final double direction)" ], [ "floor", "org.apache.commons.math3.util", "FastMath", "public static double floor(double x)" ], [ "ceil", "org.apache.commons.math3.util", "FastMath", "public static double ceil(double x)" ], [ "rint", "org.apache.commons.math3.util", "FastMath", "public static double rint(double x)" ], [ "round", "org.apache.commons.math3.util", "FastMath", "public static long round(double x)" ], [ "round", "org.apache.commons.math3.util", "FastMath", "public static int round(final float x)" ], [ "min", "org.apache.commons.math3.util", "FastMath", "public static int min(final int a, final int b)" ], [ "min", "org.apache.commons.math3.util", "FastMath", "public static long min(final long a, final long b)" ], [ "min", "org.apache.commons.math3.util", "FastMath", "public static float min(final float a, final float b)" ], [ "min", "org.apache.commons.math3.util", "FastMath", "public static double min(final double a, final double b)" ], [ "max", "org.apache.commons.math3.util", "FastMath", "public static int max(final int a, final int b)" ], [ "max", "org.apache.commons.math3.util", "FastMath", "public static long max(final long a, final long b)" ], [ "max", "org.apache.commons.math3.util", "FastMath", "public static float max(final float a, final float b)" ], [ "max", "org.apache.commons.math3.util", "FastMath", "public static double max(final double a, final double b)" ], [ "hypot", "org.apache.commons.math3.util", "FastMath", "public static double hypot(final double x, final double y)" ], [ "IEEEremainder", "org.apache.commons.math3.util", "FastMath", "public static double IEEEremainder(double dividend, double divisor)" ], [ "toIntExact", "org.apache.commons.math3.util", "FastMath", "public static int toIntExact(final long n) throws MathArithmeticException" ], [ "incrementExact", "org.apache.commons.math3.util", "FastMath", "public static int incrementExact(final int n) throws MathArithmeticException" ], [ "incrementExact", "org.apache.commons.math3.util", "FastMath", "public static long incrementExact(final long n) throws MathArithmeticException" ], [ "decrementExact", "org.apache.commons.math3.util", "FastMath", "public static int decrementExact(final int n) throws MathArithmeticException" ], [ "decrementExact", "org.apache.commons.math3.util", "FastMath", "public static long decrementExact(final long n) throws MathArithmeticException" ], [ "addExact", "org.apache.commons.math3.util", "FastMath", "public static int addExact(final int a, final int b) throws MathArithmeticException" ], [ "addExact", "org.apache.commons.math3.util", "FastMath", "public static long addExact(final long a, final long b) throws MathArithmeticException" ], [ "subtractExact", "org.apache.commons.math3.util", "FastMath", "public static int subtractExact(final int a, final int b)" ], [ "subtractExact", "org.apache.commons.math3.util", "FastMath", "public static long subtractExact(final long a, final long b)" ], [ "multiplyExact", "org.apache.commons.math3.util", "FastMath", "public static int multiplyExact(final int a, final int b)" ], [ "multiplyExact", "org.apache.commons.math3.util", "FastMath", "public static long multiplyExact(final long a, final long b)" ], [ "floorDiv", "org.apache.commons.math3.util", "FastMath", "public static int floorDiv(final int a, final int b) throws MathArithmeticException" ], [ "floorDiv", "org.apache.commons.math3.util", "FastMath", "public static long floorDiv(final long a, final long b) throws MathArithmeticException" ], [ "floorMod", "org.apache.commons.math3.util", "FastMath", "public static int floorMod(final int a, final int b) throws MathArithmeticException" ], [ "floorMod", "org.apache.commons.math3.util", "FastMath", "public static long floorMod(final long a, final long b)" ], [ "copySign", "org.apache.commons.math3.util", "FastMath", "public static double copySign(double magnitude, double sign)" ], [ "copySign", "org.apache.commons.math3.util", "FastMath", "public static float copySign(float magnitude, float sign)" ], [ "getExponent", "org.apache.commons.math3.util", "FastMath", "public static int getExponent(final double d)" ], [ "getExponent", "org.apache.commons.math3.util", "FastMath", "public static int getExponent(final float f)" ], [ "getInstance", "org.apache.commons.math3.util", "BigRealField", "public static BigRealField getInstance()" ], [ "getInstance", "org.apache.commons.math3.util", "Decimal64Field", "public static final Decimal64Field getInstance()" ], [ "hash", "org.apache.commons.math3.util", "MathUtils", "public static int hash(double value)" ], [ "equals", "org.apache.commons.math3.util", "MathUtils", "public static boolean equals(double x, double y)" ], [ "hash", "org.apache.commons.math3.util", "MathUtils", "public static int hash(double[] value)" ], [ "normalizeAngle", "org.apache.commons.math3.util", "MathUtils", "public static double normalizeAngle(double a, double center)" ], [ "max", "org.apache.commons.math3.util", "MathUtils", "public static <T extends RealFieldElement<T>> T max(final T e1, final T e2)" ], [ "min", "org.apache.commons.math3.util", "MathUtils", "public static <T extends RealFieldElement<T>> T min(final T e1, final T e2)" ], [ "reduce", "org.apache.commons.math3.util", "MathUtils", "public static double reduce(double a, double period, double offset)" ], [ "copySign", "org.apache.commons.math3.util", "MathUtils", "public static byte copySign(byte magnitude, byte sign) throws MathArithmeticException" ], [ "copySign", "org.apache.commons.math3.util", "MathUtils", "public static short copySign(short magnitude, short sign) throws MathArithmeticException" ], [ "copySign", "org.apache.commons.math3.util", "MathUtils", "public static int copySign(int magnitude, int sign) throws MathArithmeticException" ], [ "copySign", "org.apache.commons.math3.util", "MathUtils", "public static long copySign(long magnitude, long sign) throws MathArithmeticException" ], [ "getDefaultNumberFormat", "org.apache.commons.math3.util", "CompositeFormat", "public static NumberFormat getDefaultNumberFormat()" ], [ "getDefaultNumberFormat", "org.apache.commons.math3.util", "CompositeFormat", "public static NumberFormat getDefaultNumberFormat(final Locale locale)" ], [ "parseNextCharacter", "org.apache.commons.math3.util", "CompositeFormat", "public static char parseNextCharacter(final String source, final ParsePosition pos)" ], [ "parseNumber", "org.apache.commons.math3.util", "CompositeFormat", "public static Number parseNumber(final String source, final NumberFormat format, final ParsePosition pos)" ], [ "parseFixedstring", "org.apache.commons.math3.util", "CompositeFormat", "public static boolean parseFixedstring(final String source, final String expected, final ParsePosition pos)" ], [ "formatDouble", "org.apache.commons.math3.util", "CompositeFormat", "public static StringBuffer formatDouble(final double value, final NumberFormat format, final StringBuffer toAppendTo, final FieldPosition pos)" ], [ "range", "org.apache.commons.math3.util", "IntegerSequence", "public static Range range(int start, int end)" ], [ "range", "org.apache.commons.math3.util", "IntegerSequence", "public static Range range(final int start, final int max, final int step)" ], [ "create", "org.apache.commons.math3.util", "IntegerSequence", "public static Incrementor create()" ], [ "create", "org.apache.commons.math3.util", "Incrementor", "public static Incrementor create()" ], [ "loadExpIntA", "org.apache.commons.math3.util", "FastMathLiteralArrays", "static double[] loadExpIntA()" ], [ "loadExpIntB", "org.apache.commons.math3.util", "FastMathLiteralArrays", "static double[] loadExpIntB()" ], [ "loadExpFracA", "org.apache.commons.math3.util", "FastMathLiteralArrays", "static double[] loadExpFracA()" ], [ "loadExpFracB", "org.apache.commons.math3.util", "FastMathLiteralArrays", "static double[] loadExpFracB()" ], [ "loadLnMant", "org.apache.commons.math3.util", "FastMathLiteralArrays", "static double[][] loadLnMant()" ], [ "binomialCoefficient", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static long binomialCoefficient(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "binomialCoefficientDouble", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static double binomialCoefficientDouble(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "binomialCoefficientLog", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static double binomialCoefficientLog(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "factorial", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static long factorial(final int n) throws NotPositiveException, MathArithmeticException" ], [ "factorialDouble", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static double factorialDouble(final int n) throws NotPositiveException" ], [ "factorialLog", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static double factorialLog(final int n) throws NotPositiveException" ], [ "stirlingS2", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static long stirlingS2(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "combinationsIterator", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static Iterator<int[]> combinationsIterator(int n, int k)" ], [ "addAndCheck", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int addAndCheck(int x, int y) throws MathArithmeticException" ], [ "addAndCheck", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long addAndCheck(long a, long b) throws MathArithmeticException" ], [ "binomialCoefficient", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long binomialCoefficient(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "binomialCoefficientDouble", "org.apache.commons.math3.util", "ArithmeticUtils", "public static double binomialCoefficientDouble(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "binomialCoefficientLog", "org.apache.commons.math3.util", "ArithmeticUtils", "public static double binomialCoefficientLog(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "factorial", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long factorial(final int n) throws NotPositiveException, MathArithmeticException" ], [ "factorialDouble", "org.apache.commons.math3.util", "ArithmeticUtils", "public static double factorialDouble(final int n) throws NotPositiveException" ], [ "factorialLog", "org.apache.commons.math3.util", "ArithmeticUtils", "public static double factorialLog(final int n) throws NotPositiveException" ], [ "gcd", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int gcd(int p, int q) throws MathArithmeticException" ], [ "gcd", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long gcd(final long p, final long q) throws MathArithmeticException" ], [ "lcm", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int lcm(int a, int b) throws MathArithmeticException" ], [ "lcm", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long lcm(long a, long b) throws MathArithmeticException" ], [ "mulAndCheck", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int mulAndCheck(int x, int y) throws MathArithmeticException" ], [ "mulAndCheck", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long mulAndCheck(long a, long b) throws MathArithmeticException" ], [ "subAndCheck", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int subAndCheck(int x, int y) throws MathArithmeticException" ], [ "subAndCheck", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long subAndCheck(long a, long b) throws MathArithmeticException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int pow(final int k, final int e) throws NotPositiveException, MathArithmeticException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int pow(final int k, long e) throws NotPositiveException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long pow(final long k, final int e) throws NotPositiveException, MathArithmeticException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long pow(final long k, long e) throws NotPositiveException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static BigInteger pow(final BigInteger k, int e) throws NotPositiveException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static BigInteger pow(final BigInteger k, long e) throws NotPositiveException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static BigInteger pow(final BigInteger k, BigInteger e) throws NotPositiveException" ], [ "stirlingS2", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long stirlingS2(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "isPowerOfTwo", "org.apache.commons.math3.util", "ArithmeticUtils", "public static boolean isPowerOfTwo(long n)" ], [ "getAvailableLocales", "org.apache.commons.math3.complex", "ComplexFormat", "public static Locale[] getAvailableLocales()" ], [ "getInstance", "org.apache.commons.math3.complex", "ComplexFormat", "public static ComplexFormat getInstance()" ], [ "getInstance", "org.apache.commons.math3.complex", "ComplexFormat", "public static ComplexFormat getInstance(Locale locale)" ], [ "getInstance", "org.apache.commons.math3.complex", "ComplexFormat", "public static ComplexFormat getInstance(String imaginaryCharacter, Locale locale) throws NullArgumentException, NoDataException" ], [ "getInstance", "org.apache.commons.math3.complex", "ComplexField", "public static ComplexField getInstance()" ], [ "multiply", "org.apache.commons.math3.complex", "Quaternion", "public static Quaternion multiply(final Quaternion q1, final Quaternion q2)" ], [ "add", "org.apache.commons.math3.complex", "Quaternion", "public static Quaternion add(final Quaternion q1, final Quaternion q2)" ], [ "subtract", "org.apache.commons.math3.complex", "Quaternion", "public static Quaternion subtract(final Quaternion q1, final Quaternion q2)" ], [ "dotProduct", "org.apache.commons.math3.complex", "Quaternion", "public static double dotProduct(final Quaternion q1, final Quaternion q2)" ], [ "equals", "org.apache.commons.math3.complex", "Complex", "public static boolean equals(Complex x, Complex y, int maxUlps)" ], [ "equals", "org.apache.commons.math3.complex", "Complex", "public static boolean equals(Complex x, Complex y)" ], [ "equals", "org.apache.commons.math3.complex", "Complex", "public static boolean equals(Complex x, Complex y, double eps)" ], [ "equalsWithRelativeTolerance", "org.apache.commons.math3.complex", "Complex", "public static boolean equalsWithRelativeTolerance(Complex x, Complex y, double eps)" ], [ "valueOf", "org.apache.commons.math3.complex", "Complex", "public static Complex valueOf(double realPart, double imaginaryPart)" ], [ "valueOf", "org.apache.commons.math3.complex", "Complex", "public static Complex valueOf(double realPart)" ], [ "polar2Complex", "org.apache.commons.math3.complex", "ComplexUtils", "public static Complex polar2Complex(double r, double theta) throws MathIllegalArgumentException" ], [ "convertToComplex", "org.apache.commons.math3.complex", "ComplexUtils", "public static Complex[] convertToComplex(double[] real)" ], [ "getInvertedCoefficientSum", "org.apache.commons.math3.optimization.linear", "SimplexTableau", "protected static double getInvertedCoefficientSum(final RealVector coefficients)" ], [ "getAvailableLocales", "org.apache.commons.math3.linear", "RealMatrixFormat", "public static Locale[] getAvailableLocales()" ], [ "getInstance", "org.apache.commons.math3.linear", "RealMatrixFormat", "public static RealMatrixFormat getInstance()" ], [ "getInstance", "org.apache.commons.math3.linear", "RealMatrixFormat", "public static RealMatrixFormat getInstance(final Locale locale)" ], [ "createRealMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix createRealMatrix(final int rows, final int columns)" ], [ "createFieldMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldMatrix(final Field<T> field, final int rows, final int columns)" ], [ "createRealMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix createRealMatrix(double[][] data) throws NullArgumentException, DimensionMismatchException, NoDataException" ], [ "createFieldMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldMatrix(T[][] data) throws DimensionMismatchException, NoDataException, NullArgumentException" ], [ "createRealIdentityMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix createRealIdentityMatrix(int dimension)" ], [ "createFieldIdentityMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldIdentityMatrix(final Field<T> field, final int dimension)" ], [ "createRealDiagonalMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix createRealDiagonalMatrix(final double[] diagonal)" ], [ "createFieldDiagonalMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldDiagonalMatrix(final T[] diagonal)" ], [ "createRealVector", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealVector createRealVector(double[] data) throws NoDataException, NullArgumentException" ], [ "createFieldVector", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldVector<T> createFieldVector(final T[] data) throws NoDataException, NullArgumentException, ZeroException" ], [ "createRowRealMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix createRowRealMatrix(double[] rowData) throws NoDataException, NullArgumentException" ], [ "createRowFieldMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldMatrix<T> createRowFieldMatrix(final T[] rowData) throws NoDataException, NullArgumentException" ], [ "createColumnRealMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix createColumnRealMatrix(double[] columnData) throws NoDataException, NullArgumentException" ], [ "createColumnFieldMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldMatrix<T> createColumnFieldMatrix(final T[] columnData) throws NoDataException, NullArgumentException" ], [ "isSymmetric", "org.apache.commons.math3.linear", "MatrixUtils", "public static boolean isSymmetric(RealMatrix matrix, double eps)" ], [ "fractionMatrixToRealMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static Array2DRowRealMatrix fractionMatrixToRealMatrix(final FieldMatrix<Fraction> m)" ], [ "bigFractionMatrixToRealMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static Array2DRowRealMatrix bigFractionMatrixToRealMatrix(final FieldMatrix<BigFraction> m)" ], [ "blockInverse", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix blockInverse(RealMatrix m, int splitIndex)" ], [ "inverse", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix inverse(RealMatrix matrix) throws NullArgumentException, SingularMatrixException, NonSquareMatrixException" ], [ "inverse", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix inverse(RealMatrix matrix, double threshold) throws NullArgumentException, SingularMatrixException, NonSquareMatrixException" ], [ "toBlocksLayout", "org.apache.commons.math3.linear", "BlockFieldMatrix", "public static <T extends FieldElement<T>> T[][] toBlocksLayout(final T[][] rawData) throws DimensionMismatchException" ], [ "createBlocksLayout", "org.apache.commons.math3.linear", "BlockFieldMatrix", "public static <T extends FieldElement<T>> T[][] createBlocksLayout(final Field<T> field, final int rows, final int columns)" ], [ "toBlocksLayout", "org.apache.commons.math3.linear", "BlockRealMatrix", "public static double[][] toBlocksLayout(final double[][] rawData) throws DimensionMismatchException" ], [ "createBlocksLayout", "org.apache.commons.math3.linear", "BlockRealMatrix", "public static double[][] createBlocksLayout(final int rows, final int columns)" ], [ "unmodifiableRealVector", "org.apache.commons.math3.linear", "RealVector", "public static RealVector unmodifiableRealVector(final RealVector v)" ], [ "getAvailableLocales", "org.apache.commons.math3.linear", "RealVectorFormat", "public static Locale[] getAvailableLocales()" ], [ "getInstance", "org.apache.commons.math3.linear", "RealVectorFormat", "public static RealVectorFormat getInstance()" ], [ "getInstance", "org.apache.commons.math3.linear", "RealVectorFormat", "public static RealVectorFormat getInstance(final Locale locale)" ], [ "create", "org.apache.commons.math3.linear", "JacobiPreconditioner", "public static JacobiPreconditioner create(final RealLinearOperator a) throws NonSquareOperatorException" ], [ "extractField", "org.apache.commons.math3.linear", "AbstractFieldMatrix", "protected static <T extends FieldElement<T>> Field<T> extractField(final T[][] d) throws NoDataException, NullArgumentException" ], [ "extractField", "org.apache.commons.math3.linear", "AbstractFieldMatrix", "protected static <T extends FieldElement<T>> Field<T> extractField(final T[] d) throws NoDataException" ], [ "buildArray", "org.apache.commons.math3.linear", "AbstractFieldMatrix", "protected static <T extends FieldElement<T>> T[][] buildArray(final Field<T> field, final int rows, final int columns)" ], [ "buildArray", "org.apache.commons.math3.linear", "AbstractFieldMatrix", "protected static <T extends FieldElement<T>> T[] buildArray(final Field<T> field, final int length)" ], [ "estimate", "org.apache.commons.math3.distribution.fitting", "MultivariateNormalMixtureExpectationMaximization", "public static MixtureMultivariateNormalDistribution estimate(final double[][] data, final int numComponents) throws NotStrictlyPositiveException, DimensionMismatchException" ], [ "sample", "org.apache.commons.math3.distribution", "BetaDistribution", "static double sample(RandomGenerator random, final double alpha, final double beta)" ], [ "sample", "org.apache.commons.math3.distribution", "ChengBetaSampler", "static double sample(RandomGenerator random, final double alpha, final double beta)" ], [ "getStirlingError", "org.apache.commons.math3.distribution", "SaddlePointExpansion", "static double getStirlingError(double z)" ], [ "getDeviancePart", "org.apache.commons.math3.distribution", "SaddlePointExpansion", "static double getDeviancePart(double x, double mu)" ], [ "logBinomialProbability", "org.apache.commons.math3.distribution", "SaddlePointExpansion", "static double logBinomialProbability(int x, int n, double p, double q)" ], [ "helper1", "org.apache.commons.math3.distribution", "ZipfDistribution", "static double helper1(final double x)" ], [ "helper2", "org.apache.commons.math3.distribution", "ZipfDistribution", "static double helper2(final double x)" ], [ "helper1", "org.apache.commons.math3.distribution", "ZipfRejectionInversionSampler", "static double helper1(final double x)" ], [ "helper2", "org.apache.commons.math3.distribution", "ZipfRejectionInversionSampler", "static double helper2(final double x)" ], [ "unlimited", "org.apache.commons.math3.optim", "MaxIter", "public static MaxIter unlimited()" ], [ "getInvertedCoefficientSum", "org.apache.commons.math3.optim.linear", "SimplexTableau", "protected static double getInvertedCoefficientSum(final RealVector coefficients)" ], [ "unbounded", "org.apache.commons.math3.optim", "SimpleBounds", "public static SimpleBounds unbounded(int dim)" ], [ "unlimited", "org.apache.commons.math3.optim", "MaxEval", "public static MaxEval unlimited()" ], [ "erf", "org.apache.commons.math3.special", "Erf", "public static double erf(double x)" ], [ "erfc", "org.apache.commons.math3.special", "Erf", "public static double erfc(double x)" ], [ "erf", "org.apache.commons.math3.special", "Erf", "public static double erf(double x1, double x2)" ], [ "erfInv", "org.apache.commons.math3.special", "Erf", "public static double erfInv(final double x)" ], [ "erfcInv", "org.apache.commons.math3.special", "Erf", "public static double erfcInv(final double x)" ], [ "value", "org.apache.commons.math3.special", "BesselJ", "public static double value(double order, double x) throws MathIllegalArgumentException, ConvergenceException" ], [ "rjBesl", "org.apache.commons.math3.special", "BesselJ", "public static BesselJResult rjBesl(double x, double alpha, int nb)" ], [ "logGamma", "org.apache.commons.math3.special", "Gamma", "public static double logGamma(double x)" ], [ "regularizedGammaP", "org.apache.commons.math3.special", "Gamma", "public static double regularizedGammaP(double a, double x)" ], [ "regularizedGammaP", "org.apache.commons.math3.special", "Gamma", "public static double regularizedGammaP(double a, double x, double epsilon, int maxIterations)" ], [ "regularizedGammaQ", "org.apache.commons.math3.special", "Gamma", "public static double regularizedGammaQ(double a, double x)" ], [ "regularizedGammaQ", "org.apache.commons.math3.special", "Gamma", "public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations)" ], [ "digamma", "org.apache.commons.math3.special", "Gamma", "public static double digamma(double x)" ], [ "trigamma", "org.apache.commons.math3.special", "Gamma", "public static double trigamma(double x)" ], [ "lanczos", "org.apache.commons.math3.special", "Gamma", "public static double lanczos(final double x)" ], [ "invGamma1pm1", "org.apache.commons.math3.special", "Gamma", "public static double invGamma1pm1(final double x)" ], [ "logGamma1p", "org.apache.commons.math3.special", "Gamma", "public static double logGamma1p(final double x) throws NumberIsTooSmallException, NumberIsTooLargeException" ], [ "gamma", "org.apache.commons.math3.special", "Gamma", "public static double gamma(final double x)" ], [ "regularizedBeta", "org.apache.commons.math3.special", "Beta", "public static double regularizedBeta(double x, double a, double b)" ], [ "regularizedBeta", "org.apache.commons.math3.special", "Beta", "public static double regularizedBeta(double x, double a, double b, double epsilon)" ], [ "regularizedBeta", "org.apache.commons.math3.special", "Beta", "public static double regularizedBeta(double x, double a, double b, int maxIterations)" ], [ "regularizedBeta", "org.apache.commons.math3.special", "Beta", "public static double regularizedBeta(double x, final double a, final double b, double epsilon, int maxIterations)" ], [ "logBeta", "org.apache.commons.math3.special", "Beta", "public static double logBeta(double a, double b, double epsilon, int maxIterations)" ], [ "logBeta", "org.apache.commons.math3.special", "Beta", "public static double logBeta(final double p, final double q)" ], [ "getInstance", "org.apache.commons.math3.ode.sampling", "DummyStepHandler", "public static DummyStepHandler getInstance()" ], [ "getInstance", "org.apache.commons.math3.ode.nonstiff", "AdamsNordsieckTransformer", "public static AdamsNordsieckTransformer getInstance(final int nSteps)" ], [ "taylor", "org.apache.commons.math3.ode.nonstiff", "AdamsFieldStepInterpolator", "public static <S extends RealFieldElement<S>> FieldODEStateAndDerivative<S> taylor(final FieldODEStateAndDerivative<S> reference, final S time, final S stepSize, final S[] scaled, final Array2DRowFieldMatrix<S> nordsieck)" ], [ "getInstance", "org.apache.commons.math3.ode.nonstiff", "AdamsNordsieckFieldTransformer", "public static <T extends RealFieldElement<T>> AdamsNordsieckFieldTransformer<T> getInstance(final Field<T> field, final int nSteps)" ], [ "sum", "org.apache.commons.math3.stat", "StatUtils", "public static double sum(final double[] values) throws MathIllegalArgumentException" ], [ "sum", "org.apache.commons.math3.stat", "StatUtils", "public static double sum(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "sumSq", "org.apache.commons.math3.stat", "StatUtils", "public static double sumSq(final double[] values) throws MathIllegalArgumentException" ], [ "sumSq", "org.apache.commons.math3.stat", "StatUtils", "public static double sumSq(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "product", "org.apache.commons.math3.stat", "StatUtils", "public static double product(final double[] values) throws MathIllegalArgumentException" ], [ "product", "org.apache.commons.math3.stat", "StatUtils", "public static double product(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "sumLog", "org.apache.commons.math3.stat", "StatUtils", "public static double sumLog(final double[] values) throws MathIllegalArgumentException" ], [ "sumLog", "org.apache.commons.math3.stat", "StatUtils", "public static double sumLog(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "mean", "org.apache.commons.math3.stat", "StatUtils", "public static double mean(final double[] values) throws MathIllegalArgumentException" ], [ "mean", "org.apache.commons.math3.stat", "StatUtils", "public static double mean(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "geometricMean", "org.apache.commons.math3.stat", "StatUtils", "public static double geometricMean(final double[] values) throws MathIllegalArgumentException" ], [ "geometricMean", "org.apache.commons.math3.stat", "StatUtils", "public static double geometricMean(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "variance", "org.apache.commons.math3.stat", "StatUtils", "public static double variance(final double[] values) throws MathIllegalArgumentException" ], [ "variance", "org.apache.commons.math3.stat", "StatUtils", "public static double variance(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "variance", "org.apache.commons.math3.stat", "StatUtils", "public static double variance(final double[] values, final double mean, final int begin, final int length) throws MathIllegalArgumentException" ], [ "variance", "org.apache.commons.math3.stat", "StatUtils", "public static double variance(final double[] values, final double mean) throws MathIllegalArgumentException" ], [ "populationVariance", "org.apache.commons.math3.stat", "StatUtils", "public static double populationVariance(final double[] values) throws MathIllegalArgumentException" ], [ "populationVariance", "org.apache.commons.math3.stat", "StatUtils", "public static double populationVariance(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "populationVariance", "org.apache.commons.math3.stat", "StatUtils", "public static double populationVariance(final double[] values, final double mean, final int begin, final int length) throws MathIllegalArgumentException" ], [ "populationVariance", "org.apache.commons.math3.stat", "StatUtils", "public static double populationVariance(final double[] values, final double mean) throws MathIllegalArgumentException" ], [ "max", "org.apache.commons.math3.stat", "StatUtils", "public static double max(final double[] values) throws MathIllegalArgumentException" ], [ "max", "org.apache.commons.math3.stat", "StatUtils", "public static double max(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "min", "org.apache.commons.math3.stat", "StatUtils", "public static double min(final double[] values) throws MathIllegalArgumentException" ], [ "min", "org.apache.commons.math3.stat", "StatUtils", "public static double min(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "percentile", "org.apache.commons.math3.stat", "StatUtils", "public static double percentile(final double[] values, final double p) throws MathIllegalArgumentException" ], [ "percentile", "org.apache.commons.math3.stat", "StatUtils", "public static double percentile(final double[] values, final int begin, final int length, final double p) throws MathIllegalArgumentException" ], [ "sumDifference", "org.apache.commons.math3.stat", "StatUtils", "public static double sumDifference(final double[] sample1, final double[] sample2) throws DimensionMismatchException, NoDataException" ], [ "meanDifference", "org.apache.commons.math3.stat", "StatUtils", "public static double meanDifference(final double[] sample1, final double[] sample2) throws DimensionMismatchException, NoDataException" ], [ "varianceDifference", "org.apache.commons.math3.stat", "StatUtils", "public static double varianceDifference(final double[] sample1, final double[] sample2, double meanDifference) throws DimensionMismatchException, NumberIsTooSmallException" ], [ "normalize", "org.apache.commons.math3.stat", "StatUtils", "public static double[] normalize(final double[] sample)" ], [ "mode", "org.apache.commons.math3.stat", "StatUtils", "public static double[] mode(double[] sample) throws MathIllegalArgumentException" ], [ "mode", "org.apache.commons.math3.stat", "StatUtils", "public static double[] mode(double[] sample, final int begin, final int length)" ], [ "getAgrestiCoullInterval", "org.apache.commons.math3.stat.interval", "IntervalUtils", "public static ConfidenceInterval getAgrestiCoullInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)" ], [ "getClopperPearsonInterval", "org.apache.commons.math3.stat.interval", "IntervalUtils", "public static ConfidenceInterval getClopperPearsonInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)" ], [ "getNormalApproximationInterval", "org.apache.commons.math3.stat.interval", "IntervalUtils", "public static ConfidenceInterval getNormalApproximationInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)" ], [ "getWilsonScoreInterval", "org.apache.commons.math3.stat.interval", "IntervalUtils", "public static ConfidenceInterval getWilsonScoreInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)" ], [ "homoscedasticT", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double homoscedasticT(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException" ], [ "homoscedasticT", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double homoscedasticT(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException" ], [ "homoscedasticTTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean homoscedasticTTest(final double[] sample1, final double[] sample2, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException" ], [ "homoscedasticTTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double homoscedasticTTest(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException" ], [ "homoscedasticTTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double homoscedasticTTest(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException" ], [ "pairedT", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double pairedT(final double[] sample1, final double[] sample2) throws NullArgumentException, NoDataException, DimensionMismatchException, NumberIsTooSmallException" ], [ "pairedTTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean pairedTTest(final double[] sample1, final double[] sample2, final double alpha) throws NullArgumentException, NoDataException, DimensionMismatchException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException" ], [ "pairedTTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double pairedTTest(final double[] sample1, final double[] sample2) throws NullArgumentException, NoDataException, DimensionMismatchException, NumberIsTooSmallException, MaxCountExceededException" ], [ "t", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double t(final double mu, final double[] observed) throws NullArgumentException, NumberIsTooSmallException" ], [ "t", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double t(final double mu, final StatisticalSummary sampleStats) throws NullArgumentException, NumberIsTooSmallException" ], [ "t", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double t(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException" ], [ "t", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double t(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean tTest(final double mu, final double[] sample, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double tTest(final double mu, final double[] sample) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean tTest(final double mu, final StatisticalSummary sampleStats, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double tTest(final double mu, final StatisticalSummary sampleStats) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean tTest(final double[] sample1, final double[] sample2, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double tTest(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean tTest(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double tTest(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException" ], [ "chiSquare", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double chiSquare(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException" ], [ "chiSquare", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double chiSquare(final long[][] counts) throws NullArgumentException, NotPositiveException, DimensionMismatchException" ], [ "chiSquareTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean chiSquareTest(final double[] expected, final long[] observed, final double alpha) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, OutOfRangeException, MaxCountExceededException" ], [ "chiSquareTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double chiSquareTest(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, MaxCountExceededException" ], [ "chiSquareTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean chiSquareTest(final long[][] counts, final double alpha) throws NullArgumentException, DimensionMismatchException, NotPositiveException, OutOfRangeException, MaxCountExceededException" ], [ "chiSquareTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double chiSquareTest(final long[][] counts) throws NullArgumentException, DimensionMismatchException, NotPositiveException, MaxCountExceededException" ], [ "chiSquareDataSetsComparison", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double chiSquareDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException" ], [ "chiSquareTestDataSetsComparison", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double chiSquareTestDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException, MaxCountExceededException" ], [ "chiSquareTestDataSetsComparison", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean chiSquareTestDataSetsComparison(final long[] observed1, final long[] observed2, final double alpha) throws DimensionMismatchException, NotPositiveException, ZeroException, OutOfRangeException, MaxCountExceededException" ], [ "oneWayAnovaFValue", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double oneWayAnovaFValue(final Collection<double[]> categoryData) throws NullArgumentException, DimensionMismatchException" ], [ "oneWayAnovaPValue", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double oneWayAnovaPValue(final Collection<double[]> categoryData) throws NullArgumentException, DimensionMismatchException, ConvergenceException, MaxCountExceededException" ], [ "oneWayAnovaTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean oneWayAnovaTest(final Collection<double[]> categoryData, final double alpha) throws NullArgumentException, DimensionMismatchException, OutOfRangeException, ConvergenceException, MaxCountExceededException" ], [ "g", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double g(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException" ], [ "gTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double gTest(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, MaxCountExceededException" ], [ "gTestIntrinsic", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double gTestIntrinsic(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, MaxCountExceededException" ], [ "gTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean gTest(final double[] expected, final long[] observed, final double alpha) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, OutOfRangeException, MaxCountExceededException" ], [ "gDataSetsComparison", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double gDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException" ], [ "rootLogLikelihoodRatio", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double rootLogLikelihoodRatio(final long k11, final long k12, final long k21, final long k22) throws DimensionMismatchException, NotPositiveException, ZeroException" ], [ "gTestDataSetsComparison", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double gTestDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException, MaxCountExceededException" ], [ "gTestDataSetsComparison", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean gTestDataSetsComparison(final long[] observed1, final long[] observed2, final double alpha) throws DimensionMismatchException, NotPositiveException, ZeroException, OutOfRangeException, MaxCountExceededException" ], [ "kolmogorovSmirnovStatistic", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double kolmogorovSmirnovStatistic(RealDistribution dist, double[] data) throws InsufficientDataException, NullArgumentException" ], [ "kolmogorovSmirnovTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double kolmogorovSmirnovTest(RealDistribution dist, double[] data) throws InsufficientDataException, NullArgumentException" ], [ "kolmogorovSmirnovTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double kolmogorovSmirnovTest(RealDistribution dist, double[] data, boolean strict) throws InsufficientDataException, NullArgumentException" ], [ "kolmogorovSmirnovTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean kolmogorovSmirnovTest(RealDistribution dist, double[] data, double alpha) throws InsufficientDataException, NullArgumentException" ], [ "kolmogorovSmirnovStatistic", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double kolmogorovSmirnovStatistic(double[] x, double[] y) throws InsufficientDataException, NullArgumentException" ], [ "kolmogorovSmirnovTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double kolmogorovSmirnovTest(double[] x, double[] y) throws InsufficientDataException, NullArgumentException" ], [ "kolmogorovSmirnovTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double kolmogorovSmirnovTest(double[] x, double[] y, boolean strict) throws InsufficientDataException, NullArgumentException" ], [ "exactP", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double exactP(double d, int m, int n, boolean strict)" ], [ "approximateP", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double approximateP(double d, int n, int m)" ], [ "monteCarloP", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double monteCarloP(double d, int n, int m, boolean strict, int iterations)" ], [ "aggregate", "org.apache.commons.math3.stat.descriptive", "AggregateSummaryStatistics", "public static StatisticalSummaryValues aggregate(Collection<? extends StatisticalSummary> statistics)" ], [ "newMarkers", "org.apache.commons.math3.stat.descriptive.rank", "PSquarePercentile", "public static PSquareMarkers newMarkers(final List<Double> initialFive, final double p)" ], [ "exponentialDecay", "org.apache.commons.math3.ml.neuralnet.sofm", "NeighbourhoodSizeFunctionFactory", "public static NeighbourhoodSizeFunction exponentialDecay(final double initValue, final double valueAtNumCall, final long numCall)" ], [ "quasiSigmoidDecay", "org.apache.commons.math3.ml.neuralnet.sofm", "NeighbourhoodSizeFunctionFactory", "public static NeighbourhoodSizeFunction quasiSigmoidDecay(final double initValue, final double slope, final long numCall)" ], [ "exponentialDecay", "org.apache.commons.math3.ml.neuralnet.sofm", "LearningFactorFunctionFactory", "public static LearningFactorFunction exponentialDecay(final double initValue, final double valueAtNumCall, final long numCall)" ], [ "quasiSigmoidDecay", "org.apache.commons.math3.ml.neuralnet.sofm", "LearningFactorFunctionFactory", "public static LearningFactorFunction quasiSigmoidDecay(final double initValue, final double slope, final long numCall)" ], [ "findBest", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static Neuron findBest(double[] features, Iterable<Neuron> neurons, DistanceMeasure distance)" ], [ "findBestAndSecondBest", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static Pair<Neuron, Neuron> findBestAndSecondBest(double[] features, Iterable<Neuron> neurons, DistanceMeasure distance)" ], [ "sort", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static Neuron[] sort(double[] features, Iterable<Neuron> neurons, DistanceMeasure distance)" ], [ "computeU", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static double[][] computeU(NeuronSquareMesh2D map, DistanceMeasure distance)" ], [ "computeHitHistogram", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static int[][] computeHitHistogram(Iterable<double[]> data, NeuronSquareMesh2D map, DistanceMeasure distance)" ], [ "computeQuantizationError", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static double computeQuantizationError(Iterable<double[]> data, Iterable<Neuron> neurons, DistanceMeasure distance)" ], [ "computeTopographicError", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static double computeTopographicError(Iterable<double[]> data, Network net, DistanceMeasure distance)" ], [ "uniform", "org.apache.commons.math3.ml.neuralnet", "FeatureInitializerFactory", "public static FeatureInitializer uniform(final RandomGenerator rng, final double min, final double max)" ], [ "uniform", "org.apache.commons.math3.ml.neuralnet", "FeatureInitializerFactory", "public static FeatureInitializer uniform(final double min, final double max)" ], [ "function", "org.apache.commons.math3.ml.neuralnet", "FeatureInitializerFactory", "public static FeatureInitializer function(final UnivariateFunction f, final double init, final double inc)" ], [ "randomize", "org.apache.commons.math3.ml.neuralnet", "FeatureInitializerFactory", "public static FeatureInitializer randomize(final RealDistribution random, final FeatureInitializer orig)" ], [ "split", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp[] split(final DfpField field, final String a)" ], [ "split", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp[] split(final Dfp a)" ], [ "splitMult", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp[] splitMult(final Dfp[] a, final Dfp[] b)" ], [ "splitDiv", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp[] splitDiv(final Dfp[] a, final Dfp[] b)" ], [ "splitPow", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp splitPow(final Dfp[] base, int a)" ], [ "pow", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp pow(Dfp base, int a)" ], [ "exp", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp exp(final Dfp a)" ], [ "expInternal", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp expInternal(final Dfp a)" ], [ "log", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp log(Dfp a)" ], [ "logInternal", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp[] logInternal(final Dfp[] a)" ], [ "pow", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp pow(Dfp x, final Dfp y)" ], [ "sinInternal", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp sinInternal(Dfp[] a)" ], [ "cosInternal", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp cosInternal(Dfp[] a)" ], [ "sin", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp sin(final Dfp a)" ], [ "cos", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp cos(Dfp a)" ], [ "tan", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp tan(final Dfp a)" ], [ "atanInternal", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp atanInternal(final Dfp a)" ], [ "atan", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp atan(final Dfp a)" ], [ "asin", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp asin(final Dfp a)" ], [ "acos", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp acos(Dfp a)" ], [ "copysign", "org.apache.commons.math3.dfp", "Dfp", "public static Dfp copysign(final Dfp x, final Dfp y)" ], [ "computeExp", "org.apache.commons.math3.dfp", "DfpField", "public static Dfp computeExp(final Dfp a, final Dfp one)" ], [ "computeLn", "org.apache.commons.math3.dfp", "DfpField", "public static Dfp computeLn(final Dfp a, final Dfp one, final Dfp two)" ], [ "getRandomGenerator", "org.apache.commons.math3.genetics", "GeneticAlgorithm", "public static synchronized RandomGenerator getRandomGenerator()" ], [ "randomPermutation", "org.apache.commons.math3.genetics", "RandomKey", "public static final List<Double> randomPermutation(final int l)" ], [ "identityPermutation", "org.apache.commons.math3.genetics", "RandomKey", "public static final List<Double> identityPermutation(final int l)" ], [ "comparatorPermutation", "org.apache.commons.math3.genetics", "RandomKey", "public static <S> List<Double> comparatorPermutation(final List<S> data, final Comparator<S> comparator)" ], [ "inducedPermutation", "org.apache.commons.math3.genetics", "RandomKey", "public static <S> List<Double> inducedPermutation(final List<S> originalData, final List<S> permutedData) throws DimensionMismatchException, MathIllegalArgumentException" ], [ "randomBinaryRepresentation", "org.apache.commons.math3.genetics", "BinaryChromosome", "public static List<Integer> randomBinaryRepresentation(int length)" ], [ "getAvailableLocales", "org.apache.commons.math3.geometry", "VectorFormat", "public static Locale[] getAvailableLocales()" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3DFormat", "public static Vector3DFormat getInstance()" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3DFormat", "public static Vector3DFormat getInstance(final Locale locale)" ], [ "angle", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T angle(final FieldVector3D<T> v1, final FieldVector3D<T> v2) throws MathArithmeticException" ], [ "angle", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T angle(final FieldVector3D<T> v1, final Vector3D v2) throws MathArithmeticException" ], [ "angle", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T angle(final Vector3D v1, final FieldVector3D<T> v2) throws MathArithmeticException" ], [ "dotProduct", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T dotProduct(final FieldVector3D<T> v1, final FieldVector3D<T> v2)" ], [ "dotProduct", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T dotProduct(final FieldVector3D<T> v1, final Vector3D v2)" ], [ "dotProduct", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T dotProduct(final Vector3D v1, final FieldVector3D<T> v2)" ], [ "crossProduct", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> FieldVector3D<T> crossProduct(final FieldVector3D<T> v1, final FieldVector3D<T> v2)" ], [ "crossProduct", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> FieldVector3D<T> crossProduct(final FieldVector3D<T> v1, final Vector3D v2)" ], [ "crossProduct", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> FieldVector3D<T> crossProduct(final Vector3D v1, final FieldVector3D<T> v2)" ], [ "distance1", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distance1(final FieldVector3D<T> v1, final FieldVector3D<T> v2)" ], [ "distance1", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distance1(final FieldVector3D<T> v1, final Vector3D v2)" ], [ "distance1", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distance1(final Vector3D v1, final FieldVector3D<T> v2)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distance(final FieldVector3D<T> v1, final FieldVector3D<T> v2)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distance(final FieldVector3D<T> v1, final Vector3D v2)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distance(final Vector3D v1, final FieldVector3D<T> v2)" ], [ "distanceInf", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distanceInf(final FieldVector3D<T> v1, final FieldVector3D<T> v2)" ], [ "distanceInf", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distanceInf(final FieldVector3D<T> v1, final Vector3D v2)" ], [ "distanceInf", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distanceInf(final Vector3D v1, final FieldVector3D<T> v2)" ], [ "distanceSq", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distanceSq(final FieldVector3D<T> v1, final FieldVector3D<T> v2)" ], [ "distanceSq", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distanceSq(final FieldVector3D<T> v1, final Vector3D v2)" ], [ "distanceSq", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distanceSq(final Vector3D v1, final FieldVector3D<T> v2)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.threed", "Rotation", "public static double distance(Rotation r1, Rotation r2)" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.threed", "Euclidean3D", "public static Euclidean3D getInstance()" ], [ "applyTo", "org.apache.commons.math3.geometry.euclidean.threed", "FieldRotation", "public static <T extends RealFieldElement<T>> FieldVector3D<T> applyTo(final Rotation r, final FieldVector3D<T> u)" ], [ "applyInverseTo", "org.apache.commons.math3.geometry.euclidean.threed", "FieldRotation", "public static <T extends RealFieldElement<T>> FieldVector3D<T> applyInverseTo(final Rotation r, final FieldVector3D<T> u)" ], [ "applyTo", "org.apache.commons.math3.geometry.euclidean.threed", "FieldRotation", "public static <T extends RealFieldElement<T>> FieldRotation<T> applyTo(final Rotation r1, final FieldRotation<T> rInner)" ], [ "applyInverseTo", "org.apache.commons.math3.geometry.euclidean.threed", "FieldRotation", "public static <T extends RealFieldElement<T>> FieldRotation<T> applyInverseTo(final Rotation rOuter, final FieldRotation<T> rInner)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.threed", "FieldRotation", "public static <T extends RealFieldElement<T>> T distance(final FieldRotation<T> r1, final FieldRotation<T> r2)" ], [ "angle", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static double angle(Vector3D v1, Vector3D v2) throws MathArithmeticException" ], [ "dotProduct", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static double dotProduct(Vector3D v1, Vector3D v2)" ], [ "crossProduct", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2)" ], [ "distance1", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static double distance1(Vector3D v1, Vector3D v2)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static double distance(Vector3D v1, Vector3D v2)" ], [ "distanceInf", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static double distanceInf(Vector3D v1, Vector3D v2)" ], [ "distanceSq", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static double distanceSq(Vector3D v1, Vector3D v2)" ], [ "intersection", "org.apache.commons.math3.geometry.euclidean.threed", "Plane", "public static Vector3D intersection(final Plane plane1, final Plane plane2, final Plane plane3)" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.oned", "Euclidean1D", "public static Euclidean1D getInstance()" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1DFormat", "public static Vector1DFormat getInstance()" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1DFormat", "public static Vector1DFormat getInstance(final Locale locale)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static double distance(Vector1D p1, Vector1D p2)" ], [ "distanceInf", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static double distanceInf(Vector1D p1, Vector1D p2)" ], [ "distanceSq", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static double distanceSq(Vector1D p1, Vector1D p2)" ], [ "reducePoints", "org.apache.commons.math3.geometry.euclidean.twod.hull", "AklToussaintHeuristic", "public static Collection<Vector2D> reducePoints(final Collection<Vector2D> points)" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2DFormat", "public static Vector2DFormat getInstance()" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2DFormat", "public static Vector2DFormat getInstance(final Locale locale)" ], [ "angle", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static double angle(Vector2D v1, Vector2D v2) throws MathArithmeticException" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static double distance(Vector2D p1, Vector2D p2)" ], [ "distanceInf", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static double distanceInf(Vector2D p1, Vector2D p2)" ], [ "distanceSq", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static double distanceSq(Vector2D p1, Vector2D p2)" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.twod", "Euclidean2D", "public static Euclidean2D getInstance()" ], [ "getTransform", "org.apache.commons.math3.geometry.euclidean.twod", "Line", "public static Transform<Euclidean2D, Euclidean1D> getTransform(final AffineTransform transform) throws MathIllegalArgumentException" ], [ "getTransform", "org.apache.commons.math3.geometry.euclidean.twod", "Line", "public static Transform<Euclidean2D, Euclidean1D> getTransform(final double cXX, final double cYX, final double cXY, final double cYY, final double cX1, final double cY1) throws MathIllegalArgumentException" ], [ "distance", "org.apache.commons.math3.geometry.spherical.oned", "S1Point", "public static double distance(S1Point p1, S1Point p2)" ], [ "getInstance", "org.apache.commons.math3.geometry.spherical.oned", "Sphere1D", "public static Sphere1D getInstance()" ], [ "getInstance", "org.apache.commons.math3.geometry.spherical.twod", "Sphere2D", "public static Sphere2D getInstance()" ], [ "getTransform", "org.apache.commons.math3.geometry.spherical.twod", "Circle", "public static Transform<Sphere2D, Sphere1D> getTransform(final Rotation rotation)" ], [ "distance", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static double distance(S2Point p1, S2Point p2)" ], [ "createAdaptor", "org.apache.commons.math3.random", "RandomAdaptor", "public static Random createAdaptor(RandomGenerator randomGenerator)" ], [ "createRandomGenerator", "org.apache.commons.math3.random", "RandomGeneratorFactory", "public static RandomGenerator createRandomGenerator(final Random rng)" ], [ "convertToLong", "org.apache.commons.math3.random", "RandomGeneratorFactory", "public static long convertToLong(int[] seed)" ], [ "getAvailableLocales", "org.apache.commons.math3.fraction", "BigFractionFormat", "public static Locale[] getAvailableLocales()" ], [ "formatBigFraction", "org.apache.commons.math3.fraction", "BigFractionFormat", "public static String formatBigFraction(final BigFraction f)" ], [ "getImproperInstance", "org.apache.commons.math3.fraction", "BigFractionFormat", "public static BigFractionFormat getImproperInstance()" ], [ "getImproperInstance", "org.apache.commons.math3.fraction", "BigFractionFormat", "public static BigFractionFormat getImproperInstance(final Locale locale)" ], [ "getProperInstance", "org.apache.commons.math3.fraction", "BigFractionFormat", "public static BigFractionFormat getProperInstance()" ], [ "getProperInstance", "org.apache.commons.math3.fraction", "BigFractionFormat", "public static BigFractionFormat getProperInstance(final Locale locale)" ], [ "getReducedFraction", "org.apache.commons.math3.fraction", "Fraction", "public static Fraction getReducedFraction(int numerator, int denominator)" ], [ "getReducedFraction", "org.apache.commons.math3.fraction", "BigFraction", "public static BigFraction getReducedFraction(final int numerator, final int denominator)" ], [ "getDefaultNumberFormat", "org.apache.commons.math3.fraction", "AbstractFormat", "protected static NumberFormat getDefaultNumberFormat()" ], [ "getDefaultNumberFormat", "org.apache.commons.math3.fraction", "AbstractFormat", "protected static NumberFormat getDefaultNumberFormat(final Locale locale)" ], [ "parseNextCharacter", "org.apache.commons.math3.fraction", "AbstractFormat", "protected static char parseNextCharacter(final String source, final ParsePosition pos)" ], [ "getAvailableLocales", "org.apache.commons.math3.fraction", "FractionFormat", "public static Locale[] getAvailableLocales()" ], [ "formatFraction", "org.apache.commons.math3.fraction", "FractionFormat", "public static String formatFraction(Fraction f)" ], [ "getImproperInstance", "org.apache.commons.math3.fraction", "FractionFormat", "public static FractionFormat getImproperInstance()" ], [ "getImproperInstance", "org.apache.commons.math3.fraction", "FractionFormat", "public static FractionFormat getImproperInstance(final Locale locale)" ], [ "getProperInstance", "org.apache.commons.math3.fraction", "FractionFormat", "public static FractionFormat getProperInstance()" ], [ "getProperInstance", "org.apache.commons.math3.fraction", "FractionFormat", "public static FractionFormat getProperInstance(final Locale locale)" ], [ "getDefaultNumberFormat", "org.apache.commons.math3.fraction", "FractionFormat", "protected static NumberFormat getDefaultNumberFormat()" ], [ "getInstance", "org.apache.commons.math3.fraction", "FractionField", "public static FractionField getInstance()" ], [ "getInstance", "org.apache.commons.math3.fraction", "BigFractionField", "public static BigFractionField getInstance()" ], [ "flatten", "org.apache.commons.math3.exception.util", "ArgUtils", "public static Object[] flatten(Object[] array)" ], [ "scaleArray", "org.apache.commons.math3.transform", "TransformUtils", "public static double[] scaleArray(double[] f, double d)" ], [ "scaleArray", "org.apache.commons.math3.transform", "TransformUtils", "public static Complex[] scaleArray(Complex[] f, double d)" ], [ "createRealImaginaryArray", "org.apache.commons.math3.transform", "TransformUtils", "public static double[][] createRealImaginaryArray(final Complex[] dataC)" ], [ "createComplexArray", "org.apache.commons.math3.transform", "TransformUtils", "public static Complex[] createComplexArray(final double[][] dataRI) throws DimensionMismatchException" ], [ "exactLog2", "org.apache.commons.math3.transform", "TransformUtils", "public static int exactLog2(final int n) throws MathIllegalArgumentException" ] ],
  "tokensProjectClassesNonPrivateStaticAttributes" : [ [ "PRIMES", "org.apache.commons.math3.primes", "SmallPrimes", "public static final int[] PRIMES = { 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171, 1181, 1187, 1193, 1201, 1213, 1217, 1223, 1229, 1231, 1237, 1249, 1259, 1277, 1279, 1283, 1289, 1291, 1297, 1301, 1303, 1307, 1319, 1321, 1327, 1361, 1367, 1373, 1381, 1399, 1409, 1423, 1427, 1429, 1433, 1439, 1447, 1451, 1453, 1459, 1471, 1481, 1483, 1487, 1489, 1493, 1499, 1511, 1523, 1531, 1543, 1549, 1553, 1559, 1567, 1571, 1579, 1583, 1597, 1601, 1607, 1609, 1613, 1619, 1621, 1627, 1637, 1657, 1663, 1667, 1669, 1693, 1697, 1699, 1709, 1721, 1723, 1733, 1741, 1747, 1753, 1759, 1777, 1783, 1787, 1789, 1801, 1811, 1823, 1831, 1847, 1861, 1867, 1871, 1873, 1877, 1879, 1889, 1901, 1907, 1913, 1931, 1933, 1949, 1951, 1973, 1979, 1987, 1993, 1997, 1999, 2003, 2011, 2017, 2027, 2029, 2039, 2053, 2063, 2069, 2081, 2083, 2087, 2089, 2099, 2111, 2113, 2129, 2131, 2137, 2141, 2143, 2153, 2161, 2179, 2203, 2207, 2213, 2221, 2237, 2239, 2243, 2251, 2267, 2269, 2273, 2281, 2287, 2293, 2297, 2309, 2311, 2333, 2339, 2341, 2347, 2351, 2357, 2371, 2377, 2381, 2383, 2389, 2393, 2399, 2411, 2417, 2423, 2437, 2441, 2447, 2459, 2467, 2473, 2477, 2503, 2521, 2531, 2539, 2543, 2549, 2551, 2557, 2579, 2591, 2593, 2609, 2617, 2621, 2633, 2647, 2657, 2659, 2663, 2671, 2677, 2683, 2687, 2689, 2693, 2699, 2707, 2711, 2713, 2719, 2729, 2731, 2741, 2749, 2753, 2767, 2777, 2789, 2791, 2797, 2801, 2803, 2819, 2833, 2837, 2843, 2851, 2857, 2861, 2879, 2887, 2897, 2903, 2909, 2917, 2927, 2939, 2953, 2957, 2963, 2969, 2971, 2999, 3001, 3011, 3019, 3023, 3037, 3041, 3049, 3061, 3067, 3079, 3083, 3089, 3109, 3119, 3121, 3137, 3163, 3167, 3169, 3181, 3187, 3191, 3203, 3209, 3217, 3221, 3229, 3251, 3253, 3257, 3259, 3271, 3299, 3301, 3307, 3313, 3319, 3323, 3329, 3331, 3343, 3347, 3359, 3361, 3371, 3373, 3389, 3391, 3407, 3413, 3433, 3449, 3457, 3461, 3463, 3467, 3469, 3491, 3499, 3511, 3517, 3527, 3529, 3533, 3539, 3541, 3547, 3557, 3559, 3571, 3581, 3583, 3593, 3607, 3613, 3617, 3623, 3631, 3637, 3643, 3659, 3671 };" ], [ "PRIMES_LAST", "org.apache.commons.math3.primes", "SmallPrimes", "public static final int PRIMES_LAST = PRIMES[PRIMES.length - 1];" ], [ "MIDPOINT_MAX_ITERATIONS_COUNT", "org.apache.commons.math3.analysis.integration", "MidPointIntegrator", "public static final int MIDPOINT_MAX_ITERATIONS_COUNT = 64;" ], [ "ROMBERG_MAX_ITERATIONS_COUNT", "org.apache.commons.math3.analysis.integration", "RombergIntegrator", "public static final int ROMBERG_MAX_ITERATIONS_COUNT = 32;" ], [ "SIMPSON_MAX_ITERATIONS_COUNT", "org.apache.commons.math3.analysis.integration", "SimpsonIntegrator", "public static final int SIMPSON_MAX_ITERATIONS_COUNT = 64;" ], [ "DEFAULT_ABSOLUTE_ACCURACY", "org.apache.commons.math3.analysis.integration", "BaseAbstractUnivariateIntegrator", "public static final double DEFAULT_ABSOLUTE_ACCURACY = 1.0e-15;" ], [ "DEFAULT_RELATIVE_ACCURACY", "org.apache.commons.math3.analysis.integration", "BaseAbstractUnivariateIntegrator", "public static final double DEFAULT_RELATIVE_ACCURACY = 1.0e-6;" ], [ "DEFAULT_MIN_ITERATIONS_COUNT", "org.apache.commons.math3.analysis.integration", "BaseAbstractUnivariateIntegrator", "public static final int DEFAULT_MIN_ITERATIONS_COUNT = 3;" ], [ "DEFAULT_MAX_ITERATIONS_COUNT", "org.apache.commons.math3.analysis.integration", "BaseAbstractUnivariateIntegrator", "public static final int DEFAULT_MAX_ITERATIONS_COUNT = Integer.MAX_VALUE;" ], [ "TRAPEZOID_MAX_ITERATIONS_COUNT", "org.apache.commons.math3.analysis.integration", "TrapezoidIntegrator", "public static final int TRAPEZOID_MAX_ITERATIONS_COUNT = 64;" ], [ "DEFAULT_ABSOLUTE_ACCURACY", "org.apache.commons.math3.analysis.solvers", "BaseSecantSolver", "protected static final double DEFAULT_ABSOLUTE_ACCURACY = 1e-6;" ], [ "DEFAULT_ABSOLUTE_ACCURACY", "org.apache.commons.math3.analysis.solvers", "SecantSolver", "protected static final double DEFAULT_ABSOLUTE_ACCURACY = 1e-6;" ], [ "DEFAULT_BANDWIDTH", "org.apache.commons.math3.analysis.interpolation", "LoessInterpolator", "public static final double DEFAULT_BANDWIDTH = 0.3;" ], [ "DEFAULT_ROBUSTNESS_ITERS", "org.apache.commons.math3.analysis.interpolation", "LoessInterpolator", "public static final int DEFAULT_ROBUSTNESS_ITERS = 2;" ], [ "DEFAULT_ACCURACY", "org.apache.commons.math3.analysis.interpolation", "LoessInterpolator", "public static final double DEFAULT_ACCURACY = 1e-12;" ], [ "serialVersionUID", "org.apache.commons.math3.analysis.interpolation", "NevilleInterpolator", "static final long serialVersionUID = 3003707660147873733L;" ], [ "DEFAULT_EXTEND", "org.apache.commons.math3.analysis.interpolation", "UnivariatePeriodicInterpolator", "public static final int DEFAULT_EXTEND = 5;" ], [ "DEFAULT_MICROSPHERE_ELEMENTS", "org.apache.commons.math3.analysis.interpolation", "MicrosphereInterpolator", "public static final int DEFAULT_MICROSPHERE_ELEMENTS = 2000;" ], [ "DEFAULT_BRIGHTNESS_EXPONENT", "org.apache.commons.math3.analysis.interpolation", "MicrosphereInterpolator", "public static final int DEFAULT_BRIGHTNESS_EXPONENT = 2;" ], [ "EPSILON", "org.apache.commons.math3.util", "Precision", "public static final double EPSILON;" ], [ "SAFE_MIN", "org.apache.commons.math3.util", "Precision", "public static final double SAFE_MIN;" ], [ "FREE", "org.apache.commons.math3.util", "OpenIntToDoubleHashMap", "protected static final byte FREE = 0;" ], [ "FULL", "org.apache.commons.math3.util", "OpenIntToDoubleHashMap", "protected static final byte FULL = 1;" ], [ "REMOVED", "org.apache.commons.math3.util", "OpenIntToDoubleHashMap", "protected static final byte REMOVED = 2;" ], [ "FREE", "org.apache.commons.math3.util", "OpenIntToFieldHashMap", "protected static final byte FREE = 0;" ], [ "FULL", "org.apache.commons.math3.util", "OpenIntToFieldHashMap", "protected static final byte FULL = 1;" ], [ "REMOVED", "org.apache.commons.math3.util", "OpenIntToFieldHashMap", "protected static final byte REMOVED = 2;" ], [ "PI", "org.apache.commons.math3.util", "FastMath", "public static final double PI = 105414357.0 / 33554432.0 + 1.984187159361080883e-9;" ], [ "E", "org.apache.commons.math3.util", "FastMath", "public static final double E = 2850325.0 / 1048576.0 + 8.254840070411028747e-8;" ], [ "EXP_INT_TABLE_MAX_INDEX", "org.apache.commons.math3.util", "FastMath", "static final int EXP_INT_TABLE_MAX_INDEX = 750;" ], [ "EXP_INT_TABLE_LEN", "org.apache.commons.math3.util", "FastMath", "static final int EXP_INT_TABLE_LEN = EXP_INT_TABLE_MAX_INDEX * 2;" ], [ "LN_MANT_LEN", "org.apache.commons.math3.util", "FastMath", "static final int LN_MANT_LEN = 1024;" ], [ "EXP_FRAC_TABLE_LEN", "org.apache.commons.math3.util", "FastMath", "static final int EXP_FRAC_TABLE_LEN = 1025;" ], [ "NAN", "org.apache.commons.math3.util", "FastMath", "public static final Split NAN = new Split(Double.NaN, 0);" ], [ "POSITIVE_INFINITY", "org.apache.commons.math3.util", "FastMath", "public static final Split POSITIVE_INFINITY = new Split(Double.POSITIVE_INFINITY, 0);" ], [ "NEGATIVE_INFINITY", "org.apache.commons.math3.util", "FastMath", "public static final Split NEGATIVE_INFINITY = new Split(Double.NEGATIVE_INFINITY, 0);" ], [ "NAN", "org.apache.commons.math3.util", "Split", "public static final Split NAN = new Split(Double.NaN, 0);" ], [ "POSITIVE_INFINITY", "org.apache.commons.math3.util", "Split", "public static final Split POSITIVE_INFINITY = new Split(Double.POSITIVE_INFINITY, 0);" ], [ "NEGATIVE_INFINITY", "org.apache.commons.math3.util", "Split", "public static final Split NEGATIVE_INFINITY = new Split(Double.NEGATIVE_INFINITY, 0);" ], [ "ADDITIVE_MODE", "org.apache.commons.math3.util", "ResizableDoubleArray", "public static final int ADDITIVE_MODE = 1;" ], [ "MULTIPLICATIVE_MODE", "org.apache.commons.math3.util", "ResizableDoubleArray", "public static final int MULTIPLICATIVE_MODE = 0;" ], [ "TWO_PI", "org.apache.commons.math3.util", "MathUtils", "public static final double TWO_PI = 2 * FastMath.PI;" ], [ "PI_SQUARED", "org.apache.commons.math3.util", "MathUtils", "public static final double PI_SQUARED = FastMath.PI * FastMath.PI;" ], [ "FACTORIALS", "org.apache.commons.math3.util", "CombinatoricsUtils", "static final long[] FACTORIALS = new long[] { 1l, 1l, 2l, 6l, 24l, 120l, 720l, 5040l, 40320l, 362880l, 3628800l, 39916800l, 479001600l, 6227020800l, 87178291200l, 1307674368000l, 20922789888000l, 355687428096000l, 6402373705728000l, 121645100408832000l, 2432902008176640000l };" ], [ "STIRLING_S2", "org.apache.commons.math3.util", "CombinatoricsUtils", "static final AtomicReference<long[][]> STIRLING_S2 = new AtomicReference<long[][]>(null);" ], [ "ZERO", "org.apache.commons.math3.util", "Decimal64", "public static final Decimal64 ZERO;" ], [ "ONE", "org.apache.commons.math3.util", "Decimal64", "public static final Decimal64 ONE;" ], [ "NEGATIVE_INFINITY", "org.apache.commons.math3.util", "Decimal64", "public static final Decimal64 NEGATIVE_INFINITY;" ], [ "POSITIVE_INFINITY", "org.apache.commons.math3.util", "Decimal64", "public static final Decimal64 POSITIVE_INFINITY;" ], [ "NAN", "org.apache.commons.math3.util", "Decimal64", "public static final Decimal64 NAN;" ], [ "ZERO", "org.apache.commons.math3.util", "BigReal", "public static final BigReal ZERO = new BigReal(BigDecimal.ZERO);" ], [ "ONE", "org.apache.commons.math3.util", "BigReal", "public static final BigReal ONE = new BigReal(BigDecimal.ONE);" ], [ "IDENTITY", "org.apache.commons.math3.complex", "Quaternion", "public static final Quaternion IDENTITY = new Quaternion(1, 0, 0, 0);" ], [ "ZERO", "org.apache.commons.math3.complex", "Quaternion", "public static final Quaternion ZERO = new Quaternion(0, 0, 0, 0);" ], [ "I", "org.apache.commons.math3.complex", "Quaternion", "public static final Quaternion I = new Quaternion(0, 1, 0, 0);" ], [ "J", "org.apache.commons.math3.complex", "Quaternion", "public static final Quaternion J = new Quaternion(0, 0, 1, 0);" ], [ "K", "org.apache.commons.math3.complex", "Quaternion", "public static final Quaternion K = new Quaternion(0, 0, 0, 1);" ], [ "I", "org.apache.commons.math3.complex", "Complex", "public static final Complex I = new Complex(0.0, 1.0);" ], [ "NaN", "org.apache.commons.math3.complex", "Complex", "public static final Complex NaN = new Complex(Double.NaN, Double.NaN);" ], [ "INF", "org.apache.commons.math3.complex", "Complex", "public static final Complex INF = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);" ], [ "ONE", "org.apache.commons.math3.complex", "Complex", "public static final Complex ONE = new Complex(1.0, 0.0);" ], [ "ZERO", "org.apache.commons.math3.complex", "Complex", "public static final Complex ZERO = new Complex(0.0, 0.0);" ], [ "MINIMUM_PROBLEM_DIMENSION", "org.apache.commons.math3.optimization.direct", "BOBYQAOptimizer", "public static final int MINIMUM_PROBLEM_DIMENSION = 2;" ], [ "DEFAULT_INITIAL_RADIUS", "org.apache.commons.math3.optimization.direct", "BOBYQAOptimizer", "public static final double DEFAULT_INITIAL_RADIUS = 10.0;" ], [ "DEFAULT_STOPPING_RADIUS", "org.apache.commons.math3.optimization.direct", "BOBYQAOptimizer", "public static final double DEFAULT_STOPPING_RADIUS = 1E-8;" ], [ "DEFAULT_CHECKFEASABLECOUNT", "org.apache.commons.math3.optimization.direct", "CMAESOptimizer", "public static final int DEFAULT_CHECKFEASABLECOUNT = 0;" ], [ "DEFAULT_STOPFITNESS", "org.apache.commons.math3.optimization.direct", "CMAESOptimizer", "public static final double DEFAULT_STOPFITNESS = 0;" ], [ "DEFAULT_ISACTIVECMA", "org.apache.commons.math3.optimization.direct", "CMAESOptimizer", "public static final boolean DEFAULT_ISACTIVECMA = true;" ], [ "DEFAULT_MAXITERATIONS", "org.apache.commons.math3.optimization.direct", "CMAESOptimizer", "public static final int DEFAULT_MAXITERATIONS = 30000;" ], [ "DEFAULT_DIAGONALONLY", "org.apache.commons.math3.optimization.direct", "CMAESOptimizer", "public static final int DEFAULT_DIAGONALONLY = 0;" ], [ "DEFAULT_RANDOMGENERATOR", "org.apache.commons.math3.optimization.direct", "CMAESOptimizer", "public static final RandomGenerator DEFAULT_RANDOMGENERATOR = new MersenneTwister();" ], [ "DEFAULT_MAX_ITERATIONS", "org.apache.commons.math3.optimization.linear", "AbstractLinearOptimizer", "public static final int DEFAULT_MAX_ITERATIONS = 100;" ], [ "DEFAULT_FORMAT", "org.apache.commons.math3.linear", "MatrixUtils", "public static final RealMatrixFormat DEFAULT_FORMAT = RealMatrixFormat.getInstance();" ], [ "OCTAVE_FORMAT", "org.apache.commons.math3.linear", "MatrixUtils", "public static final RealMatrixFormat OCTAVE_FORMAT = new RealMatrixFormat(\"[\", \"]\", \"\", \"\", \"; \", \", \");" ], [ "DEFAULT_ZERO_TOLERANCE", "org.apache.commons.math3.linear", "OpenMapRealVector", "public static final double DEFAULT_ZERO_TOLERANCE = 1.0e-12;" ], [ "BLOCK_SIZE", "org.apache.commons.math3.linear", "BlockFieldMatrix", "public static final int BLOCK_SIZE = 36;" ], [ "OPERATOR", "org.apache.commons.math3.linear", "ConjugateGradient", "public static final String OPERATOR = \"operator\";" ], [ "VECTOR", "org.apache.commons.math3.linear", "ConjugateGradient", "public static final String VECTOR = \"vector\";" ], [ "DEFAULT_RELATIVE_SYMMETRY_THRESHOLD", "org.apache.commons.math3.linear", "CholeskyDecomposition", "public static final double DEFAULT_RELATIVE_SYMMETRY_THRESHOLD = 1.0e-15;" ], [ "DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD", "org.apache.commons.math3.linear", "CholeskyDecomposition", "public static final double DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD = 1.0e-10;" ], [ "BLOCK_SIZE", "org.apache.commons.math3.linear", "BlockRealMatrix", "public static final int BLOCK_SIZE = 52;" ], [ "CBRT_MACH_PREC", "org.apache.commons.math3.linear", "SymmLQ", "static final double CBRT_MACH_PREC;" ], [ "MACH_PREC", "org.apache.commons.math3.linear", "SymmLQ", "static final double MACH_PREC;" ], [ "CBRT_MACH_PREC", "org.apache.commons.math3.linear", "State", "static final double CBRT_MACH_PREC;" ], [ "MACH_PREC", "org.apache.commons.math3.linear", "State", "static final double MACH_PREC;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "CauchyDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "SOLVER_DEFAULT_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "AbstractRealDistribution", "public static final double SOLVER_DEFAULT_ABSOLUTE_ACCURACY = 1e-6;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "TDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "ChiSquaredDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "BetaDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "NormalDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "UniformRealDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "WeibullDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "NakagamiDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "ExponentialDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "LogNormalDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "ParetoDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "FDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_MAX_ITERATIONS", "org.apache.commons.math3.distribution", "PoissonDistribution", "public static final int DEFAULT_MAX_ITERATIONS = 10000000;" ], [ "DEFAULT_EPSILON", "org.apache.commons.math3.distribution", "PoissonDistribution", "public static final double DEFAULT_EPSILON = 1e-12;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "GammaDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_ULPS", "org.apache.commons.math3.optim.linear", "SimplexSolver", "static final int DEFAULT_ULPS = 10;" ], [ "DEFAULT_CUT_OFF", "org.apache.commons.math3.optim.linear", "SimplexSolver", "static final double DEFAULT_CUT_OFF = 1e-10;" ], [ "MINIMUM_PROBLEM_DIMENSION", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv", "BOBYQAOptimizer", "public static final int MINIMUM_PROBLEM_DIMENSION = 2;" ], [ "DEFAULT_INITIAL_RADIUS", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv", "BOBYQAOptimizer", "public static final double DEFAULT_INITIAL_RADIUS = 10.0;" ], [ "DEFAULT_STOPPING_RADIUS", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv", "BOBYQAOptimizer", "public static final double DEFAULT_STOPPING_RADIUS = 1E-8;" ], [ "GAMMA", "org.apache.commons.math3.special", "Gamma", "public static final double GAMMA = 0.577215664901532860606512090082;" ], [ "LANCZOS_G", "org.apache.commons.math3.special", "Gamma", "public static final double LANCZOS_G = 607.0 / 128.0;" ], [ "DEFAULT_NAN_STRATEGY", "org.apache.commons.math3.stat.ranking", "NaturalRanking", "public static final NaNStrategy DEFAULT_NAN_STRATEGY = NaNStrategy.FAILED;" ], [ "DEFAULT_TIES_STRATEGY", "org.apache.commons.math3.stat.ranking", "NaturalRanking", "public static final TiesStrategy DEFAULT_TIES_STRATEGY = TiesStrategy.AVERAGE;" ], [ "MAXIMUM_PARTIAL_SUM_COUNT", "org.apache.commons.math3.stat.inference", "KolmogorovSmirnovTest", "protected static final int MAXIMUM_PARTIAL_SUM_COUNT = 100000;" ], [ "KS_SUM_CAUCHY_CRITERION", "org.apache.commons.math3.stat.inference", "KolmogorovSmirnovTest", "protected static final double KS_SUM_CAUCHY_CRITERION = 1E-20;" ], [ "PG_SUM_RELATIVE_ERROR", "org.apache.commons.math3.stat.inference", "KolmogorovSmirnovTest", "protected static final double PG_SUM_RELATIVE_ERROR = 1.0e-10;" ], [ "SMALL_SAMPLE_PRODUCT", "org.apache.commons.math3.stat.inference", "KolmogorovSmirnovTest", "protected static final int SMALL_SAMPLE_PRODUCT = 200;" ], [ "LARGE_SAMPLE_PRODUCT", "org.apache.commons.math3.stat.inference", "KolmogorovSmirnovTest", "protected static final int LARGE_SAMPLE_PRODUCT = 10000;" ], [ "MONTE_CARLO_ITERATIONS", "org.apache.commons.math3.stat.inference", "KolmogorovSmirnovTest", "protected static final int MONTE_CARLO_ITERATIONS = 1000000;" ], [ "INFINITE_WINDOW", "org.apache.commons.math3.stat.descriptive", "DescriptiveStatistics", "public static final int INFINITE_WINDOW = -1;" ], [ "UPSIDE_VARIANCE", "org.apache.commons.math3.stat.descriptive.moment", "SemiVariance", "public static final Direction UPSIDE_VARIANCE = Direction.UPSIDE;" ], [ "DOWNSIDE_VARIANCE", "org.apache.commons.math3.stat.descriptive.moment", "SemiVariance", "public static final Direction DOWNSIDE_VARIANCE = Direction.DOWNSIDE;" ], [ "COMPARATOR", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "static final Comparator<PairNeuronDouble> COMPARATOR = new Comparator<PairNeuronDouble>() {\n\n    /**\n     * {@inheritDoc}\n     */\n    public int compare(PairNeuronDouble o1, PairNeuronDouble o2) {\n        return Double.compare(o1.value, o2.value);\n    }\n};" ], [ "COMPARATOR", "org.apache.commons.math3.ml.neuralnet", "PairNeuronDouble", "static final Comparator<PairNeuronDouble> COMPARATOR = new Comparator<PairNeuronDouble>() {\n\n    /**\n     * {@inheritDoc}\n     */\n    public int compare(PairNeuronDouble o1, PairNeuronDouble o2) {\n        return Double.compare(o1.value, o2.value);\n    }\n};" ], [ "RADIX", "org.apache.commons.math3.dfp", "Dfp", "public static final int RADIX = 10000;" ], [ "MIN_EXP", "org.apache.commons.math3.dfp", "Dfp", "public static final int MIN_EXP = -32767;" ], [ "MAX_EXP", "org.apache.commons.math3.dfp", "Dfp", "public static final int MAX_EXP = 32768;" ], [ "ERR_SCALE", "org.apache.commons.math3.dfp", "Dfp", "public static final int ERR_SCALE = 32760;" ], [ "FINITE", "org.apache.commons.math3.dfp", "Dfp", "public static final byte FINITE = 0;" ], [ "INFINITE", "org.apache.commons.math3.dfp", "Dfp", "public static final byte INFINITE = 1;" ], [ "SNAN", "org.apache.commons.math3.dfp", "Dfp", "public static final byte SNAN = 2;" ], [ "QNAN", "org.apache.commons.math3.dfp", "Dfp", "public static final byte QNAN = 3;" ], [ "FLAG_INVALID", "org.apache.commons.math3.dfp", "DfpField", "public static final int FLAG_INVALID = 1;" ], [ "FLAG_DIV_ZERO", "org.apache.commons.math3.dfp", "DfpField", "public static final int FLAG_DIV_ZERO = 2;" ], [ "FLAG_OVERFLOW", "org.apache.commons.math3.dfp", "DfpField", "public static final int FLAG_OVERFLOW = 4;" ], [ "FLAG_UNDERFLOW", "org.apache.commons.math3.dfp", "DfpField", "public static final int FLAG_UNDERFLOW = 8;" ], [ "FLAG_INEXACT", "org.apache.commons.math3.dfp", "DfpField", "public static final int FLAG_INEXACT = 16;" ], [ "DEFAULT_PREFIX", "org.apache.commons.math3.geometry", "VectorFormat", "public static final String DEFAULT_PREFIX = \"{\";" ], [ "DEFAULT_SUFFIX", "org.apache.commons.math3.geometry", "VectorFormat", "public static final String DEFAULT_SUFFIX = \"}\";" ], [ "DEFAULT_SEPARATOR", "org.apache.commons.math3.geometry", "VectorFormat", "public static final String DEFAULT_SEPARATOR = \"; \";" ], [ "XYZ", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder XYZ = new RotationOrder(\"XYZ\", Vector3D.PLUS_I, Vector3D.PLUS_J, Vector3D.PLUS_K);" ], [ "XZY", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder XZY = new RotationOrder(\"XZY\", Vector3D.PLUS_I, Vector3D.PLUS_K, Vector3D.PLUS_J);" ], [ "YXZ", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder YXZ = new RotationOrder(\"YXZ\", Vector3D.PLUS_J, Vector3D.PLUS_I, Vector3D.PLUS_K);" ], [ "YZX", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder YZX = new RotationOrder(\"YZX\", Vector3D.PLUS_J, Vector3D.PLUS_K, Vector3D.PLUS_I);" ], [ "ZXY", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder ZXY = new RotationOrder(\"ZXY\", Vector3D.PLUS_K, Vector3D.PLUS_I, Vector3D.PLUS_J);" ], [ "ZYX", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder ZYX = new RotationOrder(\"ZYX\", Vector3D.PLUS_K, Vector3D.PLUS_J, Vector3D.PLUS_I);" ], [ "XYX", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder XYX = new RotationOrder(\"XYX\", Vector3D.PLUS_I, Vector3D.PLUS_J, Vector3D.PLUS_I);" ], [ "XZX", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder XZX = new RotationOrder(\"XZX\", Vector3D.PLUS_I, Vector3D.PLUS_K, Vector3D.PLUS_I);" ], [ "YXY", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder YXY = new RotationOrder(\"YXY\", Vector3D.PLUS_J, Vector3D.PLUS_I, Vector3D.PLUS_J);" ], [ "YZY", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder YZY = new RotationOrder(\"YZY\", Vector3D.PLUS_J, Vector3D.PLUS_K, Vector3D.PLUS_J);" ], [ "ZXZ", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder ZXZ = new RotationOrder(\"ZXZ\", Vector3D.PLUS_K, Vector3D.PLUS_I, Vector3D.PLUS_K);" ], [ "ZYZ", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder ZYZ = new RotationOrder(\"ZYZ\", Vector3D.PLUS_K, Vector3D.PLUS_J, Vector3D.PLUS_K);" ], [ "IDENTITY", "org.apache.commons.math3.geometry.euclidean.threed", "Rotation", "public static final Rotation IDENTITY = new Rotation(1.0, 0.0, 0.0, 0.0, false);" ], [ "ZERO", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D ZERO = new Vector3D(0, 0, 0);" ], [ "PLUS_I", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D PLUS_I = new Vector3D(1, 0, 0);" ], [ "MINUS_I", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D MINUS_I = new Vector3D(-1, 0, 0);" ], [ "PLUS_J", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D PLUS_J = new Vector3D(0, 1, 0);" ], [ "MINUS_J", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D MINUS_J = new Vector3D(0, -1, 0);" ], [ "PLUS_K", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D PLUS_K = new Vector3D(0, 0, 1);" ], [ "MINUS_K", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D MINUS_K = new Vector3D(0, 0, -1);" ], [ "NaN", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D NaN = new Vector3D(Double.NaN, Double.NaN, Double.NaN);" ], [ "POSITIVE_INFINITY", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D POSITIVE_INFINITY = new Vector3D(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);" ], [ "NEGATIVE_INFINITY", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D NEGATIVE_INFINITY = new Vector3D(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);" ], [ "ZERO", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static final Vector1D ZERO = new Vector1D(0.0);" ], [ "ONE", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static final Vector1D ONE = new Vector1D(1.0);" ], [ "NaN", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static final Vector1D NaN = new Vector1D(Double.NaN);" ], [ "POSITIVE_INFINITY", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static final Vector1D POSITIVE_INFINITY = new Vector1D(Double.POSITIVE_INFINITY);" ], [ "NEGATIVE_INFINITY", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static final Vector1D NEGATIVE_INFINITY = new Vector1D(Double.NEGATIVE_INFINITY);" ], [ "ZERO", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static final Vector2D ZERO = new Vector2D(0, 0);" ], [ "NaN", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static final Vector2D NaN = new Vector2D(Double.NaN, Double.NaN);" ], [ "POSITIVE_INFINITY", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static final Vector2D POSITIVE_INFINITY = new Vector2D(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);" ], [ "NEGATIVE_INFINITY", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static final Vector2D NEGATIVE_INFINITY = new Vector2D(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);" ], [ "NaN", "org.apache.commons.math3.geometry.spherical.oned", "S1Point", "public static final S1Point NaN = new S1Point(Double.NaN, Vector2D.NaN);" ], [ "PLUS_I", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point PLUS_I = new S2Point(0, 0.5 * FastMath.PI, Vector3D.PLUS_I);" ], [ "PLUS_J", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point PLUS_J = new S2Point(0.5 * FastMath.PI, 0.5 * FastMath.PI, Vector3D.PLUS_J);" ], [ "PLUS_K", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point PLUS_K = new S2Point(0, 0, Vector3D.PLUS_K);" ], [ "MINUS_I", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point MINUS_I = new S2Point(FastMath.PI, 0.5 * FastMath.PI, Vector3D.MINUS_I);" ], [ "MINUS_J", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point MINUS_J = new S2Point(1.5 * FastMath.PI, 0.5 * FastMath.PI, Vector3D.MINUS_J);" ], [ "MINUS_K", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point MINUS_K = new S2Point(0, FastMath.PI, Vector3D.MINUS_K);" ], [ "NaN", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point NaN = new S2Point(Double.NaN, Double.NaN, Vector3D.NaN);" ], [ "DIGEST_MODE", "org.apache.commons.math3.random", "ValueServer", "public static final int DIGEST_MODE = 0;" ], [ "REPLAY_MODE", "org.apache.commons.math3.random", "ValueServer", "public static final int REPLAY_MODE = 1;" ], [ "UNIFORM_MODE", "org.apache.commons.math3.random", "ValueServer", "public static final int UNIFORM_MODE = 2;" ], [ "EXPONENTIAL_MODE", "org.apache.commons.math3.random", "ValueServer", "public static final int EXPONENTIAL_MODE = 3;" ], [ "GAUSSIAN_MODE", "org.apache.commons.math3.random", "ValueServer", "public static final int GAUSSIAN_MODE = 4;" ], [ "CONSTANT_MODE", "org.apache.commons.math3.random", "ValueServer", "public static final int CONSTANT_MODE = 5;" ], [ "DEFAULT_BIN_COUNT", "org.apache.commons.math3.random", "EmpiricalDistribution", "public static final int DEFAULT_BIN_COUNT = 1000;" ], [ "TWO", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction TWO = new Fraction(2, 1);" ], [ "ONE", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction ONE = new Fraction(1, 1);" ], [ "ZERO", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction ZERO = new Fraction(0, 1);" ], [ "FOUR_FIFTHS", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction FOUR_FIFTHS = new Fraction(4, 5);" ], [ "ONE_FIFTH", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction ONE_FIFTH = new Fraction(1, 5);" ], [ "ONE_HALF", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction ONE_HALF = new Fraction(1, 2);" ], [ "ONE_QUARTER", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction ONE_QUARTER = new Fraction(1, 4);" ], [ "ONE_THIRD", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction ONE_THIRD = new Fraction(1, 3);" ], [ "THREE_FIFTHS", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction THREE_FIFTHS = new Fraction(3, 5);" ], [ "THREE_QUARTERS", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction THREE_QUARTERS = new Fraction(3, 4);" ], [ "TWO_FIFTHS", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction TWO_FIFTHS = new Fraction(2, 5);" ], [ "TWO_QUARTERS", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction TWO_QUARTERS = new Fraction(2, 4);" ], [ "TWO_THIRDS", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction TWO_THIRDS = new Fraction(2, 3);" ], [ "MINUS_ONE", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction MINUS_ONE = new Fraction(-1, 1);" ], [ "TWO", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction TWO = new BigFraction(2);" ], [ "ONE", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction ONE = new BigFraction(1);" ], [ "ZERO", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction ZERO = new BigFraction(0);" ], [ "MINUS_ONE", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction MINUS_ONE = new BigFraction(-1);" ], [ "FOUR_FIFTHS", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction FOUR_FIFTHS = new BigFraction(4, 5);" ], [ "ONE_FIFTH", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction ONE_FIFTH = new BigFraction(1, 5);" ], [ "ONE_HALF", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction ONE_HALF = new BigFraction(1, 2);" ], [ "ONE_QUARTER", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction ONE_QUARTER = new BigFraction(1, 4);" ], [ "ONE_THIRD", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction ONE_THIRD = new BigFraction(1, 3);" ], [ "THREE_FIFTHS", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction THREE_FIFTHS = new BigFraction(3, 5);" ], [ "THREE_QUARTERS", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction THREE_QUARTERS = new BigFraction(3, 4);" ], [ "TWO_FIFTHS", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction TWO_FIFTHS = new BigFraction(2, 5);" ], [ "TWO_QUARTERS", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction TWO_QUARTERS = new BigFraction(2, 4);" ], [ "TWO_THIRDS", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction TWO_THIRDS = new BigFraction(2, 3);" ], [ "INTEGER_ZERO", "org.apache.commons.math3.exception", "MathIllegalNumberException", "protected static final Integer INTEGER_ZERO = Integer.valueOf(0);" ], [ "serialVersionUID", "org.apache.commons.math3.transform", "FastSineTransformer", "static final long serialVersionUID = 20120211L;" ], [ "serialVersionUID", "org.apache.commons.math3.transform", "FastFourierTransformer", "static final long serialVersionUID = 20120210L;" ], [ "serialVersionUID", "org.apache.commons.math3.transform", "FastCosineTransformer", "static final long serialVersionUID = 20120212L;" ], [ "serialVersionUID", "org.apache.commons.math3.transform", "FastHadamardTransformer", "static final long serialVersionUID = 20120211L;" ] ],
  "tokensMethodJavadocValues" : [ [ "-1", "int" ], [ "1", "int" ], [ "0", "int" ] ],
  "tokensMethodArguments" : [ [ "a", "org.apache.commons.math3.dfp", "Dfp" ], [ "b", "org.apache.commons.math3.dfp", "Dfp" ] ],
  "tokensMethodVariablesNonPrivateNonStaticNonVoidMethods" : [ [ "toDouble", "org.apache.commons.math3.dfp", "Dfp", "public double toDouble()" ], [ "abs", "org.apache.commons.math3.dfp", "Dfp", "public Dfp abs()" ], [ "pow", "org.apache.commons.math3", "RealFieldElement", "public abstract T pow(int arg0)" ], [ "divide", "org.apache.commons.math3", "FieldElement", "public abstract T divide(T arg0) throws NullArgumentException, MathArithmeticException" ], [ "reciprocal", "org.apache.commons.math3", "RealFieldElement", "public abstract T reciprocal()" ], [ "atan", "org.apache.commons.math3", "RealFieldElement", "public abstract T atan()" ], [ "isInfinite", "org.apache.commons.math3.dfp", "Dfp", "public boolean isInfinite()" ], [ "asin", "org.apache.commons.math3.dfp", "Dfp", "public Dfp asin()" ], [ "clone", "java.lang", "Object", "protected native Object clone() throws CloneNotSupportedException" ], [ "floor", "org.apache.commons.math3.dfp", "Dfp", "public Dfp floor()" ], [ "intValue", "org.apache.commons.math3.dfp", "Dfp", "public int intValue()" ], [ "trap", "org.apache.commons.math3.dfp", "Dfp", "protected Dfp trap(int type, String what, Dfp oper, Dfp def, Dfp result)" ], [ "rint", "org.apache.commons.math3", "RealFieldElement", "public abstract T rint()" ], [ "copySign", "org.apache.commons.math3", "RealFieldElement", "public abstract T copySign(T arg0)" ], [ "multiply", "org.apache.commons.math3", "FieldElement", "public abstract T multiply(T arg0) throws NullArgumentException" ], [ "sinh", "org.apache.commons.math3", "RealFieldElement", "public abstract T sinh()" ], [ "multiply", "org.apache.commons.math3", "RealFieldElement", "public abstract T multiply(double arg0)" ], [ "newInstance", "org.apache.commons.math3.dfp", "Dfp", "public Dfp newInstance(final String s)" ], [ "divide", "org.apache.commons.math3.dfp", "Dfp", "public Dfp divide(final double a)" ], [ "acosh", "org.apache.commons.math3", "RealFieldElement", "public abstract T acosh()" ], [ "log10", "org.apache.commons.math3.dfp", "Dfp", "public int log10()" ], [ "rootN", "org.apache.commons.math3", "RealFieldElement", "public abstract T rootN(int arg0)" ], [ "negativeOrNull", "org.apache.commons.math3.dfp", "Dfp", "public boolean negativeOrNull()" ], [ "add", "org.apache.commons.math3", "FieldElement", "public abstract T add(T arg0) throws NullArgumentException" ], [ "newInstance", "org.apache.commons.math3.dfp", "Dfp", "public Dfp newInstance(final byte sig, final byte code)" ], [ "atanh", "org.apache.commons.math3.dfp", "Dfp", "public Dfp atanh()" ], [ "copySign", "org.apache.commons.math3", "RealFieldElement", "public abstract T copySign(double arg0)" ], [ "round", "org.apache.commons.math3.dfp", "Dfp", "protected int round(int n)" ], [ "toString", "org.apache.commons.math3.dfp", "Dfp", "public String toString()" ], [ "toSplitDouble", "org.apache.commons.math3.dfp", "Dfp", "public double[] toSplitDouble()" ], [ "align", "org.apache.commons.math3.dfp", "Dfp", "protected int align(int e)" ], [ "linearCombination", "org.apache.commons.math3.dfp", "Dfp", "public Dfp linearCombination(final double a1, final Dfp b1, final double a2, final Dfp b2, final double a3, final Dfp b3)" ], [ "newInstance", "org.apache.commons.math3.dfp", "Dfp", "public Dfp newInstance(final byte x)" ], [ "intLog10", "org.apache.commons.math3.dfp", "Dfp", "public int intLog10()" ], [ "scalb", "org.apache.commons.math3.dfp", "Dfp", "public Dfp scalb(final int n)" ], [ "hypot", "org.apache.commons.math3", "RealFieldElement", "public abstract T hypot(T arg0) throws DimensionMismatchException" ], [ "divide", "org.apache.commons.math3.dfp", "Dfp", "public Dfp divide(Dfp divisor)" ], [ "asinh", "org.apache.commons.math3.dfp", "Dfp", "public Dfp asinh()" ], [ "atan2", "org.apache.commons.math3.dfp", "Dfp", "public Dfp atan2(final Dfp x) throws DimensionMismatchException" ], [ "pow", "org.apache.commons.math3", "RealFieldElement", "public abstract T pow(T arg0) throws DimensionMismatchException" ], [ "cbrt", "org.apache.commons.math3.dfp", "Dfp", "public Dfp cbrt()" ], [ "asin", "org.apache.commons.math3", "RealFieldElement", "public abstract T asin()" ], [ "sinh", "org.apache.commons.math3.dfp", "Dfp", "public Dfp sinh()" ], [ "copySign", "org.apache.commons.math3.dfp", "Dfp", "public Dfp copySign(final double s)" ], [ "remainder", "org.apache.commons.math3", "RealFieldElement", "public abstract T remainder(double arg0)" ], [ "linearCombination", "org.apache.commons.math3", "RealFieldElement", "public abstract T linearCombination(T arg0, T arg1, T arg2, T arg3)" ], [ "subtract", "org.apache.commons.math3", "RealFieldElement", "public abstract T subtract(double arg0)" ], [ "strictlyPositive", "org.apache.commons.math3.dfp", "Dfp", "public boolean strictlyPositive()" ], [ "multiply", "org.apache.commons.math3.dfp", "Dfp", "public Dfp multiply(final int x)" ], [ "cbrt", "org.apache.commons.math3", "RealFieldElement", "public abstract T cbrt()" ], [ "rint", "org.apache.commons.math3.dfp", "Dfp", "public Dfp rint()" ], [ "remainder", "org.apache.commons.math3", "RealFieldElement", "public abstract T remainder(T arg0) throws DimensionMismatchException" ], [ "signum", "org.apache.commons.math3.dfp", "Dfp", "public Dfp signum()" ], [ "sqrt", "org.apache.commons.math3", "RealFieldElement", "public abstract T sqrt()" ], [ "tanh", "org.apache.commons.math3.dfp", "Dfp", "public Dfp tanh()" ], [ "power10", "org.apache.commons.math3.dfp", "Dfp", "public Dfp power10(final int e)" ], [ "getField", "org.apache.commons.math3", "FieldElement", "public abstract Field<T> getField()" ], [ "round", "org.apache.commons.math3.dfp", "Dfp", "public long round()" ], [ "linearCombination", "org.apache.commons.math3", "RealFieldElement", "public abstract T linearCombination(double arg0, T arg1, double arg2, T arg3, double arg4, T arg5)" ], [ "atanh", "org.apache.commons.math3", "RealFieldElement", "public abstract T atanh()" ], [ "getZero", "org.apache.commons.math3.dfp", "Dfp", "public Dfp getZero()" ], [ "sin", "org.apache.commons.math3.dfp", "Dfp", "public Dfp sin()" ], [ "ceil", "org.apache.commons.math3.dfp", "Dfp", "public Dfp ceil()" ], [ "newInstance", "org.apache.commons.math3.dfp", "Dfp", "public Dfp newInstance(final Dfp d)" ], [ "linearCombination", "org.apache.commons.math3.dfp", "Dfp", "public Dfp linearCombination(final double[] a, final Dfp[] b) throws DimensionMismatchException" ], [ "multiply", "org.apache.commons.math3.dfp", "Dfp", "public Dfp multiply(final double a)" ], [ "linearCombination", "org.apache.commons.math3", "RealFieldElement", "public abstract T linearCombination(T[] arg0, T[] arg1) throws DimensionMismatchException" ], [ "positiveOrNull", "org.apache.commons.math3.dfp", "Dfp", "public boolean positiveOrNull()" ], [ "negate", "org.apache.commons.math3.dfp", "Dfp", "public Dfp negate()" ], [ "trunc", "org.apache.commons.math3.dfp", "Dfp", "protected Dfp trunc(final DfpField.RoundingMode rmode)" ], [ "power10K", "org.apache.commons.math3.dfp", "Dfp", "public Dfp power10K(final int e)" ], [ "log", "org.apache.commons.math3.dfp", "Dfp", "public Dfp log()" ], [ "cos", "org.apache.commons.math3", "RealFieldElement", "public abstract T cos()" ], [ "tan", "org.apache.commons.math3.dfp", "Dfp", "public Dfp tan()" ], [ "multiply", "org.apache.commons.math3", "FieldElement", "public abstract T multiply(int arg0)" ], [ "abs", "org.apache.commons.math3", "RealFieldElement", "public abstract T abs()" ], [ "divide", "org.apache.commons.math3.dfp", "Dfp", "public Dfp divide(int divisor)" ], [ "signum", "org.apache.commons.math3", "RealFieldElement", "public abstract T signum()" ], [ "asinh", "org.apache.commons.math3", "RealFieldElement", "public abstract T asinh()" ], [ "strictlyNegative", "org.apache.commons.math3.dfp", "Dfp", "public boolean strictlyNegative()" ], [ "isZero", "org.apache.commons.math3.dfp", "Dfp", "public boolean isZero()" ], [ "acosh", "org.apache.commons.math3.dfp", "Dfp", "public Dfp acosh()" ], [ "remainder", "org.apache.commons.math3.dfp", "Dfp", "public Dfp remainder(final double a)" ], [ "linearCombination", "org.apache.commons.math3.dfp", "Dfp", "public Dfp linearCombination(final Dfp a1, final Dfp b1, final Dfp a2, final Dfp b2)" ], [ "complement", "org.apache.commons.math3.dfp", "Dfp", "protected int complement(int extra)" ], [ "subtract", "org.apache.commons.math3.dfp", "Dfp", "public Dfp subtract(final Dfp x)" ], [ "getReal", "org.apache.commons.math3.dfp", "Dfp", "public double getReal()" ], [ "hypot", "org.apache.commons.math3.dfp", "Dfp", "public Dfp hypot(final Dfp y)" ], [ "greaterThan", "org.apache.commons.math3.dfp", "Dfp", "public boolean greaterThan(final Dfp x)" ], [ "ceil", "org.apache.commons.math3", "RealFieldElement", "public abstract T ceil()" ], [ "exp", "org.apache.commons.math3.dfp", "Dfp", "public Dfp exp()" ], [ "linearCombination", "org.apache.commons.math3.dfp", "Dfp", "public Dfp linearCombination(final double a1, final Dfp b1, final double a2, final Dfp b2)" ], [ "hashCode", "org.apache.commons.math3.dfp", "Dfp", "public int hashCode()" ], [ "log10K", "org.apache.commons.math3.dfp", "Dfp", "public int log10K()" ], [ "dfp2string", "org.apache.commons.math3.dfp", "Dfp", "protected String dfp2string()" ], [ "isNaN", "org.apache.commons.math3.dfp", "Dfp", "public boolean isNaN()" ], [ "sin", "org.apache.commons.math3", "RealFieldElement", "public abstract T sin()" ], [ "floor", "org.apache.commons.math3", "RealFieldElement", "public abstract T floor()" ], [ "acos", "org.apache.commons.math3", "RealFieldElement", "public abstract T acos()" ], [ "rootN", "org.apache.commons.math3.dfp", "Dfp", "public Dfp rootN(final int n)" ], [ "multiply", "org.apache.commons.math3.dfp", "Dfp", "public Dfp multiply(final Dfp x)" ], [ "cosh", "org.apache.commons.math3.dfp", "Dfp", "public Dfp cosh()" ], [ "exp", "org.apache.commons.math3", "RealFieldElement", "public abstract T exp()" ], [ "subtract", "org.apache.commons.math3", "FieldElement", "public abstract T subtract(T arg0) throws NullArgumentException" ], [ "getRadixDigits", "org.apache.commons.math3.dfp", "Dfp", "public int getRadixDigits()" ], [ "equals", "org.apache.commons.math3.dfp", "Dfp", "public boolean equals(final Object other)" ], [ "subtract", "org.apache.commons.math3.dfp", "Dfp", "public Dfp subtract(final double a)" ], [ "linearCombination", "org.apache.commons.math3", "RealFieldElement", "public abstract T linearCombination(double[] arg0, T[] arg1) throws DimensionMismatchException" ], [ "linearCombination", "org.apache.commons.math3.dfp", "Dfp", "public Dfp linearCombination(final Dfp a1, final Dfp b1, final Dfp a2, final Dfp b2, final Dfp a3, final Dfp b3, final Dfp a4, final Dfp b4)" ], [ "pow", "org.apache.commons.math3.dfp", "Dfp", "public Dfp pow(final double p)" ], [ "pow", "org.apache.commons.math3.dfp", "Dfp", "public Dfp pow(final Dfp e)" ], [ "nextAfter", "org.apache.commons.math3.dfp", "Dfp", "public Dfp nextAfter(final Dfp x)" ], [ "lessThan", "org.apache.commons.math3.dfp", "Dfp", "public boolean lessThan(final Dfp x)" ], [ "newInstance", "org.apache.commons.math3.dfp", "Dfp", "public Dfp newInstance(final int x)" ], [ "add", "org.apache.commons.math3.dfp", "Dfp", "public Dfp add(final Dfp x)" ], [ "getClass", "java.lang", "Object", "public final native Class<? extends Object> getClass()" ], [ "negate", "org.apache.commons.math3", "FieldElement", "public abstract T negate()" ], [ "cos", "org.apache.commons.math3.dfp", "Dfp", "public Dfp cos()" ], [ "reciprocal", "org.apache.commons.math3.dfp", "Dfp", "public Dfp reciprocal()" ], [ "remainder", "org.apache.commons.math3.dfp", "Dfp", "public Dfp remainder(final Dfp d)" ], [ "tan", "org.apache.commons.math3", "RealFieldElement", "public abstract T tan()" ], [ "linearCombination", "org.apache.commons.math3.dfp", "Dfp", "public Dfp linearCombination(final Dfp[] a, final Dfp[] b) throws DimensionMismatchException" ], [ "tanh", "org.apache.commons.math3", "RealFieldElement", "public abstract T tanh()" ], [ "pow", "org.apache.commons.math3", "RealFieldElement", "public abstract T pow(double arg0)" ], [ "newInstance", "org.apache.commons.math3.dfp", "Dfp", "public Dfp newInstance()" ], [ "newInstance", "org.apache.commons.math3.dfp", "Dfp", "public Dfp newInstance(final long x)" ], [ "dfp2sci", "org.apache.commons.math3.dfp", "Dfp", "protected String dfp2sci()" ], [ "expm1", "org.apache.commons.math3.dfp", "Dfp", "public Dfp expm1()" ], [ "getTwo", "org.apache.commons.math3.dfp", "Dfp", "public Dfp getTwo()" ], [ "scalb", "org.apache.commons.math3", "RealFieldElement", "public abstract T scalb(int arg0)" ], [ "acos", "org.apache.commons.math3.dfp", "Dfp", "public Dfp acos()" ], [ "copySign", "org.apache.commons.math3.dfp", "Dfp", "public Dfp copySign(final Dfp s)" ], [ "unequal", "org.apache.commons.math3.dfp", "Dfp", "public boolean unequal(final Dfp x)" ], [ "sqrt", "org.apache.commons.math3.dfp", "Dfp", "public Dfp sqrt()" ], [ "atan", "org.apache.commons.math3.dfp", "Dfp", "public Dfp atan()" ], [ "linearCombination", "org.apache.commons.math3", "RealFieldElement", "public abstract T linearCombination(T arg0, T arg1, T arg2, T arg3, T arg4, T arg5, T arg6, T arg7)" ], [ "newInstance", "org.apache.commons.math3.dfp", "Dfp", "public Dfp newInstance(final double x)" ], [ "linearCombination", "org.apache.commons.math3", "RealFieldElement", "public abstract T linearCombination(T arg0, T arg1, T arg2, T arg3, T arg4, T arg5)" ], [ "linearCombination", "org.apache.commons.math3", "RealFieldElement", "public abstract T linearCombination(double arg0, T arg1, double arg2, T arg3)" ], [ "add", "org.apache.commons.math3.dfp", "Dfp", "public Dfp add(final double a)" ], [ "linearCombination", "org.apache.commons.math3.dfp", "Dfp", "public Dfp linearCombination(final double a1, final Dfp b1, final double a2, final Dfp b2, final double a3, final Dfp b3, final double a4, final Dfp b4)" ], [ "log", "org.apache.commons.math3", "RealFieldElement", "public abstract T log()" ], [ "divide", "org.apache.commons.math3", "RealFieldElement", "public abstract T divide(double arg0)" ], [ "linearCombination", "org.apache.commons.math3.dfp", "Dfp", "public Dfp linearCombination(final Dfp a1, final Dfp b1, final Dfp a2, final Dfp b2, final Dfp a3, final Dfp b3)" ], [ "add", "org.apache.commons.math3", "RealFieldElement", "public abstract T add(double arg0)" ], [ "pow", "org.apache.commons.math3.dfp", "Dfp", "public Dfp pow(final int n)" ], [ "classify", "org.apache.commons.math3.dfp", "Dfp", "public int classify()" ], [ "atan2", "org.apache.commons.math3", "RealFieldElement", "public abstract T atan2(T arg0) throws DimensionMismatchException" ], [ "getField", "org.apache.commons.math3.dfp", "Dfp", "public DfpField getField()" ], [ "dotrap", "org.apache.commons.math3.dfp", "Dfp", "public Dfp dotrap(int type, String what, Dfp oper, Dfp result)" ], [ "cosh", "org.apache.commons.math3", "RealFieldElement", "public abstract T cosh()" ], [ "getOne", "org.apache.commons.math3.dfp", "Dfp", "public Dfp getOne()" ], [ "linearCombination", "org.apache.commons.math3", "RealFieldElement", "public abstract T linearCombination(double arg0, T arg1, double arg2, T arg3, double arg4, T arg5, double arg6, T arg7)" ], [ "expm1", "org.apache.commons.math3", "RealFieldElement", "public abstract T expm1()" ], [ "log1p", "org.apache.commons.math3.dfp", "Dfp", "public Dfp log1p()" ], [ "log1p", "org.apache.commons.math3", "RealFieldElement", "public abstract T log1p()" ], [ "toString", "java.lang", "Object", "public String toString()" ], [ "equals", "java.lang", "Object", "public boolean equals(Object arg0)" ], [ "hashCode", "java.lang", "Object", "public native int hashCode()" ], [ "round", "org.apache.commons.math3", "RealFieldElement", "public abstract long round()" ], [ "getReal", "org.apache.commons.math3", "RealFieldElement", "public abstract double getReal()" ], [ "reciprocal", "org.apache.commons.math3", "FieldElement", "public abstract T reciprocal() throws MathArithmeticException" ] ],
  "tokensMethodVariablesNonPrivateNonStaticAttributes" : [ [ "mant", "org.apache.commons.math3.dfp", "Dfp", "protected int[] mant;" ], [ "sign", "org.apache.commons.math3.dfp", "Dfp", "protected byte sign;" ], [ "exp", "org.apache.commons.math3.dfp", "Dfp", "protected int exp;" ], [ "nans", "org.apache.commons.math3.dfp", "Dfp", "protected byte nans;" ] ],
  "tokensOracleVariablesNonPrivateNonStaticNonVoidMethods" : [ ],
  "tokensOracleVariablesNonPrivateNonStaticAttributes" : [ ]
}, {
  "id" : 22824,
  "oracle" : ";",
  "oracleType" : "NORMAL_POST",
  "projectName" : "commons-math3-3.6.1",
  "packageName" : "org.apache.commons.math3.dfp",
  "className" : "Dfp",
  "javadocTag" : "@return a number with the value of x and the sign of y",
  "methodJavadoc" : "    /** Creates an instance that is the same as x except that it has the sign of y.\n     * abs(x) = dfp.copysign(x, dfp.one)\n     * @param x number to get the value from\n     * @param y number to get the sign from\n     * @return a number with the value of x and the sign of y\n     */",
  "methodSourceCode" : "public static Dfp copysign(final Dfp x, final Dfp y){\n    Dfp result = x.newInstance(x);\n    result.sign = y.sign;\n    return result;\n}",
  "classJavadoc" : "/**\n *  Decimal floating point library for Java\n *\n *  <p>Another floating point class.  This one is built using radix 10000\n *  which is 10<sup>4</sup>, so its almost decimal.</p>\n *\n *  <p>The design goals here are:\n *  <ol>\n *    <li>Decimal math, or close to it</li>\n *    <li>Settable precision (but no mix between numbers using different settings)</li>\n *    <li>Portability.  Code should be kept as portable as possible.</li>\n *    <li>Performance</li>\n *    <li>Accuracy  - Results should always be +/- 1 ULP for basic\n *         algebraic operation</li>\n *    <li>Comply with IEEE 854-1987 as much as possible.\n *         (See IEEE 854-1987 notes below)</li>\n *  </ol></p>\n *\n *  <p>Trade offs:\n *  <ol>\n *    <li>Memory foot print.  I'm using more memory than necessary to\n *         represent numbers to get better performance.</li>\n *    <li>Digits are bigger, so rounding is a greater loss.  So, if you\n *         really need 12 decimal digits, better use 4 base 10000 digits\n *         there can be one partially filled.</li>\n *  </ol></p>\n *\n *  <p>Numbers are represented  in the following form:\n *  <pre>\n *  n  =  sign &times; mant &times; (radix)<sup>exp</sup>;</p>\n *  </pre>\n *  where sign is &plusmn;1, mantissa represents a fractional number between\n *  zero and one.  mant[0] is the least significant digit.\n *  exp is in the range of -32767 to 32768</p>\n *\n *  <p>IEEE 854-1987  Notes and differences</p>\n *\n *  <p>IEEE 854 requires the radix to be either 2 or 10.  The radix here is\n *  10000, so that requirement is not met, but  it is possible that a\n *  subclassed can be made to make it behave as a radix 10\n *  number.  It is my opinion that if it looks and behaves as a radix\n *  10 number then it is one and that requirement would be met.</p>\n *\n *  <p>The radix of 10000 was chosen because it should be faster to operate\n *  on 4 decimal digits at once instead of one at a time.  Radix 10 behavior\n *  can be realized by adding an additional rounding step to ensure that\n *  the number of decimal digits represented is constant.</p>\n *\n *  <p>The IEEE standard specifically leaves out internal data encoding,\n *  so it is reasonable to conclude that such a subclass of this radix\n *  10000 system is merely an encoding of a radix 10 system.</p>\n *\n *  <p>IEEE 854 also specifies the existence of \"sub-normal\" numbers.  This\n *  class does not contain any such entities.  The most significant radix\n *  10000 digit is always non-zero.  Instead, we support \"gradual underflow\"\n *  by raising the underflow flag for numbers less with exponent less than\n *  expMin, but don't flush to zero until the exponent reaches MIN_EXP-digits.\n *  Thus the smallest number we can represent would be:\n *  1E(-(MIN_EXP-digits-1)*4),  eg, for digits=5, MIN_EXP=-32767, that would\n *  be 1e-131092.</p>\n *\n *  <p>IEEE 854 defines that the implied radix point lies just to the right\n *  of the most significant digit and to the left of the remaining digits.\n *  This implementation puts the implied radix point to the left of all\n *  digits including the most significant one.  The most significant digit\n *  here is the one just to the right of the radix point.  This is a fine\n *  detail and is really only a matter of definition.  Any side effects of\n *  this can be rendered invisible by a subclass.</p>\n * @see DfpField\n * @since 2.2\n */",
  "classSourceCode" : "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.commons.math3.dfp;\n\nimport java.util.Arrays;\n\nimport org.apache.commons.math3.RealFieldElement;\nimport org.apache.commons.math3.exception.DimensionMismatchException;\nimport org.apache.commons.math3.util.FastMath;\n\n/**\n *  Decimal floating point library for Java\n *\n *  <p>Another floating point class.  This one is built using radix 10000\n *  which is 10<sup>4</sup>, so its almost decimal.</p>\n *\n *  <p>The design goals here are:\n *  <ol>\n *    <li>Decimal math, or close to it</li>\n *    <li>Settable precision (but no mix between numbers using different settings)</li>\n *    <li>Portability.  Code should be kept as portable as possible.</li>\n *    <li>Performance</li>\n *    <li>Accuracy  - Results should always be +/- 1 ULP for basic\n *         algebraic operation</li>\n *    <li>Comply with IEEE 854-1987 as much as possible.\n *         (See IEEE 854-1987 notes below)</li>\n *  </ol></p>\n *\n *  <p>Trade offs:\n *  <ol>\n *    <li>Memory foot print.  I'm using more memory than necessary to\n *         represent numbers to get better performance.</li>\n *    <li>Digits are bigger, so rounding is a greater loss.  So, if you\n *         really need 12 decimal digits, better use 4 base 10000 digits\n *         there can be one partially filled.</li>\n *  </ol></p>\n *\n *  <p>Numbers are represented  in the following form:\n *  <pre>\n *  n  =  sign &times; mant &times; (radix)<sup>exp</sup>;</p>\n *  </pre>\n *  where sign is &plusmn;1, mantissa represents a fractional number between\n *  zero and one.  mant[0] is the least significant digit.\n *  exp is in the range of -32767 to 32768</p>\n *\n *  <p>IEEE 854-1987  Notes and differences</p>\n *\n *  <p>IEEE 854 requires the radix to be either 2 or 10.  The radix here is\n *  10000, so that requirement is not met, but  it is possible that a\n *  subclassed can be made to make it behave as a radix 10\n *  number.  It is my opinion that if it looks and behaves as a radix\n *  10 number then it is one and that requirement would be met.</p>\n *\n *  <p>The radix of 10000 was chosen because it should be faster to operate\n *  on 4 decimal digits at once instead of one at a time.  Radix 10 behavior\n *  can be realized by adding an additional rounding step to ensure that\n *  the number of decimal digits represented is constant.</p>\n *\n *  <p>The IEEE standard specifically leaves out internal data encoding,\n *  so it is reasonable to conclude that such a subclass of this radix\n *  10000 system is merely an encoding of a radix 10 system.</p>\n *\n *  <p>IEEE 854 also specifies the existence of \"sub-normal\" numbers.  This\n *  class does not contain any such entities.  The most significant radix\n *  10000 digit is always non-zero.  Instead, we support \"gradual underflow\"\n *  by raising the underflow flag for numbers less with exponent less than\n *  expMin, but don't flush to zero until the exponent reaches MIN_EXP-digits.\n *  Thus the smallest number we can represent would be:\n *  1E(-(MIN_EXP-digits-1)*4),  eg, for digits=5, MIN_EXP=-32767, that would\n *  be 1e-131092.</p>\n *\n *  <p>IEEE 854 defines that the implied radix point lies just to the right\n *  of the most significant digit and to the left of the remaining digits.\n *  This implementation puts the implied radix point to the left of all\n *  digits including the most significant one.  The most significant digit\n *  here is the one just to the right of the radix point.  This is a fine\n *  detail and is really only a matter of definition.  Any side effects of\n *  this can be rendered invisible by a subclass.</p>\n * @see DfpField\n * @since 2.2\n */\npublic class Dfp implements RealFieldElement<Dfp> {\n\n    /** The radix, or base of this system.  Set to 10000 */\n    public static final int RADIX = 10000;\n\n    /** The minimum exponent before underflow is signaled.  Flush to zero\n     *  occurs at minExp-DIGITS */\n    public static final int MIN_EXP = -32767;\n\n    /** The maximum exponent before overflow is signaled and results flushed\n     *  to infinity */\n    public static final int MAX_EXP =  32768;\n\n    /** The amount under/overflows are scaled by before going to trap handler */\n    public static final int ERR_SCALE = 32760;\n\n    /** Indicator value for normal finite numbers. */\n    public static final byte FINITE = 0;\n\n    /** Indicator value for Infinity. */\n    public static final byte INFINITE = 1;\n\n    /** Indicator value for signaling NaN. */\n    public static final byte SNAN = 2;\n\n    /** Indicator value for quiet NaN. */\n    public static final byte QNAN = 3;\n\n    /** String for NaN representation. */\n    private static final String NAN_STRING = \"NaN\";\n\n    /** String for positive infinity representation. */\n    private static final String POS_INFINITY_STRING = \"Infinity\";\n\n    /** String for negative infinity representation. */\n    private static final String NEG_INFINITY_STRING = \"-Infinity\";\n\n    /** Name for traps triggered by addition. */\n    private static final String ADD_TRAP = \"add\";\n\n    /** Name for traps triggered by multiplication. */\n    private static final String MULTIPLY_TRAP = \"multiply\";\n\n    /** Name for traps triggered by division. */\n    private static final String DIVIDE_TRAP = \"divide\";\n\n    /** Name for traps triggered by square root. */\n    private static final String SQRT_TRAP = \"sqrt\";\n\n    /** Name for traps triggered by alignment. */\n    private static final String ALIGN_TRAP = \"align\";\n\n    /** Name for traps triggered by truncation. */\n    private static final String TRUNC_TRAP = \"trunc\";\n\n    /** Name for traps triggered by nextAfter. */\n    private static final String NEXT_AFTER_TRAP = \"nextAfter\";\n\n    /** Name for traps triggered by lessThan. */\n    private static final String LESS_THAN_TRAP = \"lessThan\";\n\n    /** Name for traps triggered by greaterThan. */\n    private static final String GREATER_THAN_TRAP = \"greaterThan\";\n\n    /** Name for traps triggered by newInstance. */\n    private static final String NEW_INSTANCE_TRAP = \"newInstance\";\n\n    /** Mantissa. */\n    protected int[] mant;\n\n    /** Sign bit: 1 for positive, -1 for negative. */\n    protected byte sign;\n\n    /** Exponent. */\n    protected int exp;\n\n    /** Indicator for non-finite / non-number values. */\n    protected byte nans;\n\n    /** Factory building similar Dfp's. */\n    private final DfpField field;\n\n    /** Makes an instance with a value of zero.\n     * @param field field to which this instance belongs\n     */\n    protected Dfp(final DfpField field) {\n        mant = new int[field.getRadixDigits()];\n        sign = 1;\n        exp = 0;\n        nans = FINITE;\n        this.field = field;\n    }\n\n    /** Create an instance from a byte value.\n     * @param field field to which this instance belongs\n     * @param x value to convert to an instance\n     */\n    protected Dfp(final DfpField field, byte x) {\n        this(field, (long) x);\n    }\n\n    /** Create an instance from an int value.\n     * @param field field to which this instance belongs\n     * @param x value to convert to an instance\n     */\n    protected Dfp(final DfpField field, int x) {\n        this(field, (long) x);\n    }\n\n    /** Create an instance from a long value.\n     * @param field field to which this instance belongs\n     * @param x value to convert to an instance\n     */\n    protected Dfp(final DfpField field, long x) {\n\n        // initialize as if 0\n        mant = new int[field.getRadixDigits()];\n        nans = FINITE;\n        this.field = field;\n\n        boolean isLongMin = false;\n        if (x == Long.MIN_VALUE) {\n            // special case for Long.MIN_VALUE (-9223372036854775808)\n            // we must shift it before taking its absolute value\n            isLongMin = true;\n            ++x;\n        }\n\n        // set the sign\n        if (x < 0) {\n            sign = -1;\n            x = -x;\n        } else {\n            sign = 1;\n        }\n\n        exp = 0;\n        while (x != 0) {\n            System.arraycopy(mant, mant.length - exp, mant, mant.length - 1 - exp, exp);\n            mant[mant.length - 1] = (int) (x % RADIX);\n            x /= RADIX;\n            exp++;\n        }\n\n        if (isLongMin) {\n            // remove the shift added for Long.MIN_VALUE\n            // we know in this case that fixing the last digit is sufficient\n            for (int i = 0; i < mant.length - 1; i++) {\n                if (mant[i] != 0) {\n                    mant[i]++;\n                    break;\n                }\n            }\n        }\n    }\n\n    /** Create an instance from a double value.\n     * @param field field to which this instance belongs\n     * @param x value to convert to an instance\n     */\n    protected Dfp(final DfpField field, double x) {\n\n        // initialize as if 0\n        mant = new int[field.getRadixDigits()];\n        sign = 1;\n        exp = 0;\n        nans = FINITE;\n        this.field = field;\n\n        long bits = Double.doubleToLongBits(x);\n        long mantissa = bits & 0x000fffffffffffffL;\n        int exponent = (int) ((bits & 0x7ff0000000000000L) >> 52) - 1023;\n\n        if (exponent == -1023) {\n            // Zero or sub-normal\n            if (x == 0) {\n                // make sure 0 has the right sign\n                if ((bits & 0x8000000000000000L) != 0) {\n                    sign = -1;\n                }\n                return;\n            }\n\n            exponent++;\n\n            // Normalize the subnormal number\n            while ( (mantissa & 0x0010000000000000L) == 0) {\n                exponent--;\n                mantissa <<= 1;\n            }\n            mantissa &= 0x000fffffffffffffL;\n        }\n\n        if (exponent == 1024) {\n            // infinity or NAN\n            if (x != x) {\n                sign = (byte) 1;\n                nans = QNAN;\n            } else if (x < 0) {\n                sign = (byte) -1;\n                nans = INFINITE;\n            } else {\n                sign = (byte) 1;\n                nans = INFINITE;\n            }\n            return;\n        }\n\n        Dfp xdfp = new Dfp(field, mantissa);\n        xdfp = xdfp.divide(new Dfp(field, 4503599627370496l)).add(field.getOne());  // Divide by 2^52, then add one\n        xdfp = xdfp.multiply(DfpMath.pow(field.getTwo(), exponent));\n\n        if ((bits & 0x8000000000000000L) != 0) {\n            xdfp = xdfp.negate();\n        }\n\n        System.arraycopy(xdfp.mant, 0, mant, 0, mant.length);\n        sign = xdfp.sign;\n        exp  = xdfp.exp;\n        nans = xdfp.nans;\n\n    }\n\n    /** Copy constructor.\n     * @param d instance to copy\n     */\n    public Dfp(final Dfp d) {\n        mant  = d.mant.clone();\n        sign  = d.sign;\n        exp   = d.exp;\n        nans  = d.nans;\n        field = d.field;\n    }\n\n    /** Create an instance from a String representation.\n     * @param field field to which this instance belongs\n     * @param s string representation of the instance\n     */\n    protected Dfp(final DfpField field, final String s) {\n\n        // initialize as if 0\n        mant = new int[field.getRadixDigits()];\n        sign = 1;\n        exp = 0;\n        nans = FINITE;\n        this.field = field;\n\n        boolean decimalFound = false;\n        final int rsize = 4;   // size of radix in decimal digits\n        final int offset = 4;  // Starting offset into Striped\n        final char[] striped = new char[getRadixDigits() * rsize + offset * 2];\n\n        // Check some special cases\n        if (s.equals(POS_INFINITY_STRING)) {\n            sign = (byte) 1;\n            nans = INFINITE;\n            return;\n        }\n\n        if (s.equals(NEG_INFINITY_STRING)) {\n            sign = (byte) -1;\n            nans = INFINITE;\n            return;\n        }\n\n        if (s.equals(NAN_STRING)) {\n            sign = (byte) 1;\n            nans = QNAN;\n            return;\n        }\n\n        // Check for scientific notation\n        int p = s.indexOf(\"e\");\n        if (p == -1) { // try upper case?\n            p = s.indexOf(\"E\");\n        }\n\n        final String fpdecimal;\n        int sciexp = 0;\n        if (p != -1) {\n            // scientific notation\n            fpdecimal = s.substring(0, p);\n            String fpexp = s.substring(p+1);\n            boolean negative = false;\n\n            for (int i=0; i<fpexp.length(); i++)\n            {\n                if (fpexp.charAt(i) == '-')\n                {\n                    negative = true;\n                    continue;\n                }\n                if (fpexp.charAt(i) >= '0' && fpexp.charAt(i) <= '9') {\n                    sciexp = sciexp * 10 + fpexp.charAt(i) - '0';\n                }\n            }\n\n            if (negative) {\n                sciexp = -sciexp;\n            }\n        } else {\n            // normal case\n            fpdecimal = s;\n        }\n\n        // If there is a minus sign in the number then it is negative\n        if (fpdecimal.indexOf(\"-\") !=  -1) {\n            sign = -1;\n        }\n\n        // First off, find all of the leading zeros, trailing zeros, and significant digits\n        p = 0;\n\n        // Move p to first significant digit\n        int decimalPos = 0;\n        for (;;) {\n            if (fpdecimal.charAt(p) >= '1' && fpdecimal.charAt(p) <= '9') {\n                break;\n            }\n\n            if (decimalFound && fpdecimal.charAt(p) == '0') {\n                decimalPos--;\n            }\n\n            if (fpdecimal.charAt(p) == '.') {\n                decimalFound = true;\n            }\n\n            p++;\n\n            if (p == fpdecimal.length()) {\n                break;\n            }\n        }\n\n        // Copy the string onto Stripped\n        int q = offset;\n        striped[0] = '0';\n        striped[1] = '0';\n        striped[2] = '0';\n        striped[3] = '0';\n        int significantDigits=0;\n        for(;;) {\n            if (p == (fpdecimal.length())) {\n                break;\n            }\n\n            // Don't want to run pass the end of the array\n            if (q == mant.length*rsize+offset+1) {\n                break;\n            }\n\n            if (fpdecimal.charAt(p) == '.') {\n                decimalFound = true;\n                decimalPos = significantDigits;\n                p++;\n                continue;\n            }\n\n            if (fpdecimal.charAt(p) < '0' || fpdecimal.charAt(p) > '9') {\n                p++;\n                continue;\n            }\n\n            striped[q] = fpdecimal.charAt(p);\n            q++;\n            p++;\n            significantDigits++;\n        }\n\n\n        // If the decimal point has been found then get rid of trailing zeros.\n        if (decimalFound && q != offset) {\n            for (;;) {\n                q--;\n                if (q == offset) {\n                    break;\n                }\n                if (striped[q] == '0') {\n                    significantDigits--;\n                } else {\n                    break;\n                }\n            }\n        }\n\n        // special case of numbers like \"0.00000\"\n        if (decimalFound && significantDigits == 0) {\n            decimalPos = 0;\n        }\n\n        // Implicit decimal point at end of number if not present\n        if (!decimalFound) {\n            decimalPos = q-offset;\n        }\n\n        // Find the number of significant trailing zeros\n        q = offset;  // set q to point to first sig digit\n        p = significantDigits-1+offset;\n\n        while (p > q) {\n            if (striped[p] != '0') {\n                break;\n            }\n            p--;\n        }\n\n        // Make sure the decimal is on a mod 10000 boundary\n        int i = ((rsize * 100) - decimalPos - sciexp % rsize) % rsize;\n        q -= i;\n        decimalPos += i;\n\n        // Make the mantissa length right by adding zeros at the end if necessary\n        while ((p - q) < (mant.length * rsize)) {\n            for (i = 0; i < rsize; i++) {\n                striped[++p] = '0';\n            }\n        }\n\n        // Ok, now we know how many trailing zeros there are,\n        // and where the least significant digit is\n        for (i = mant.length - 1; i >= 0; i--) {\n            mant[i] = (striped[q]   - '0') * 1000 +\n                      (striped[q+1] - '0') * 100  +\n                      (striped[q+2] - '0') * 10   +\n                      (striped[q+3] - '0');\n            q += 4;\n        }\n\n\n        exp = (decimalPos+sciexp) / rsize;\n\n        if (q < striped.length) {\n            // Is there possible another digit?\n            round((striped[q] - '0')*1000);\n        }\n\n    }\n\n    /** Creates an instance with a non-finite value.\n     * @param field field to which this instance belongs\n     * @param sign sign of the Dfp to create\n     * @param nans code of the value, must be one of {@link #INFINITE},\n     * {@link #SNAN},  {@link #QNAN}\n     */\n    protected Dfp(final DfpField field, final byte sign, final byte nans) {\n        this.field = field;\n        this.mant    = new int[field.getRadixDigits()];\n        this.sign    = sign;\n        this.exp     = 0;\n        this.nans    = nans;\n    }\n\n    /** Create an instance with a value of 0.\n     * Use this internally in preference to constructors to facilitate subclasses\n     * @return a new instance with a value of 0\n     */\n    public Dfp newInstance() {\n        return new Dfp(getField());\n    }\n\n    /** Create an instance from a byte value.\n     * @param x value to convert to an instance\n     * @return a new instance with value x\n     */\n    public Dfp newInstance(final byte x) {\n        return new Dfp(getField(), x);\n    }\n\n    /** Create an instance from an int value.\n     * @param x value to convert to an instance\n     * @return a new instance with value x\n     */\n    public Dfp newInstance(final int x) {\n        return new Dfp(getField(), x);\n    }\n\n    /** Create an instance from a long value.\n     * @param x value to convert to an instance\n     * @return a new instance with value x\n     */\n    public Dfp newInstance(final long x) {\n        return new Dfp(getField(), x);\n    }\n\n    /** Create an instance from a double value.\n     * @param x value to convert to an instance\n     * @return a new instance with value x\n     */\n    public Dfp newInstance(final double x) {\n        return new Dfp(getField(), x);\n    }\n\n    /** Create an instance by copying an existing one.\n     * Use this internally in preference to constructors to facilitate subclasses.\n     * @param d instance to copy\n     * @return a new instance with the same value as d\n     */\n    public Dfp newInstance(final Dfp d) {\n\n        // make sure we don't mix number with different precision\n        if (field.getRadixDigits() != d.field.getRadixDigits()) {\n            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);\n            final Dfp result = newInstance(getZero());\n            result.nans = QNAN;\n            return dotrap(DfpField.FLAG_INVALID, NEW_INSTANCE_TRAP, d, result);\n        }\n\n        return new Dfp(d);\n\n    }\n\n    /** Create an instance from a String representation.\n     * Use this internally in preference to constructors to facilitate subclasses.\n     * @param s string representation of the instance\n     * @return a new instance parsed from specified string\n     */\n    public Dfp newInstance(final String s) {\n        return new Dfp(field, s);\n    }\n\n    /** Creates an instance with a non-finite value.\n     * @param sig sign of the Dfp to create\n     * @param code code of the value, must be one of {@link #INFINITE},\n     * {@link #SNAN},  {@link #QNAN}\n     * @return a new instance with a non-finite value\n     */\n    public Dfp newInstance(final byte sig, final byte code) {\n        return field.newDfp(sig, code);\n    }\n\n    /** Get the {@link org.apache.commons.math3.Field Field} (really a {@link DfpField}) to which the instance belongs.\n     * <p>\n     * The field is linked to the number of digits and acts as a factory\n     * for {@link Dfp} instances.\n     * </p>\n     * @return {@link org.apache.commons.math3.Field Field} (really a {@link DfpField}) to which the instance belongs\n     */\n    public DfpField getField() {\n        return field;\n    }\n\n    /** Get the number of radix digits of the instance.\n     * @return number of radix digits\n     */\n    public int getRadixDigits() {\n        return field.getRadixDigits();\n    }\n\n    /** Get the constant 0.\n     * @return a Dfp with value zero\n     */\n    public Dfp getZero() {\n        return field.getZero();\n    }\n\n    /** Get the constant 1.\n     * @return a Dfp with value one\n     */\n    public Dfp getOne() {\n        return field.getOne();\n    }\n\n    /** Get the constant 2.\n     * @return a Dfp with value two\n     */\n    public Dfp getTwo() {\n        return field.getTwo();\n    }\n\n    /** Shift the mantissa left, and adjust the exponent to compensate.\n     */\n    protected void shiftLeft() {\n        for (int i = mant.length - 1; i > 0; i--) {\n            mant[i] = mant[i-1];\n        }\n        mant[0] = 0;\n        exp--;\n    }\n\n    /* Note that shiftRight() does not call round() as that round() itself\n     uses shiftRight() */\n    /** Shift the mantissa right, and adjust the exponent to compensate.\n     */\n    protected void shiftRight() {\n        for (int i = 0; i < mant.length - 1; i++) {\n            mant[i] = mant[i+1];\n        }\n        mant[mant.length - 1] = 0;\n        exp++;\n    }\n\n    /** Make our exp equal to the supplied one, this may cause rounding.\n     *  Also causes de-normalized numbers.  These numbers are generally\n     *  dangerous because most routines assume normalized numbers.\n     *  Align doesn't round, so it will return the last digit destroyed\n     *  by shifting right.\n     *  @param e desired exponent\n     *  @return last digit destroyed by shifting right\n     */\n    protected int align(int e) {\n        int lostdigit = 0;\n        boolean inexact = false;\n\n        int diff = exp - e;\n\n        int adiff = diff;\n        if (adiff < 0) {\n            adiff = -adiff;\n        }\n\n        if (diff == 0) {\n            return 0;\n        }\n\n        if (adiff > (mant.length + 1)) {\n            // Special case\n            Arrays.fill(mant, 0);\n            exp = e;\n\n            field.setIEEEFlagsBits(DfpField.FLAG_INEXACT);\n            dotrap(DfpField.FLAG_INEXACT, ALIGN_TRAP, this, this);\n\n            return 0;\n        }\n\n        for (int i = 0; i < adiff; i++) {\n            if (diff < 0) {\n                /* Keep track of loss -- only signal inexact after losing 2 digits.\n                 * the first lost digit is returned to add() and may be incorporated\n                 * into the result.\n                 */\n                if (lostdigit != 0) {\n                    inexact = true;\n                }\n\n                lostdigit = mant[0];\n\n                shiftRight();\n            } else {\n                shiftLeft();\n            }\n        }\n\n        if (inexact) {\n            field.setIEEEFlagsBits(DfpField.FLAG_INEXACT);\n            dotrap(DfpField.FLAG_INEXACT, ALIGN_TRAP, this, this);\n        }\n\n        return lostdigit;\n\n    }\n\n    /** Check if instance is less than x.\n     * @param x number to check instance against\n     * @return true if instance is less than x and neither are NaN, false otherwise\n     */\n    public boolean lessThan(final Dfp x) {\n\n        // make sure we don't mix number with different precision\n        if (field.getRadixDigits() != x.field.getRadixDigits()) {\n            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);\n            final Dfp result = newInstance(getZero());\n            result.nans = QNAN;\n            dotrap(DfpField.FLAG_INVALID, LESS_THAN_TRAP, x, result);\n            return false;\n        }\n\n        /* if a nan is involved, signal invalid and return false */\n        if (isNaN() || x.isNaN()) {\n            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);\n            dotrap(DfpField.FLAG_INVALID, LESS_THAN_TRAP, x, newInstance(getZero()));\n            return false;\n        }\n\n        return compare(this, x) < 0;\n    }\n\n    /** Check if instance is greater than x.\n     * @param x number to check instance against\n     * @return true if instance is greater than x and neither are NaN, false otherwise\n     */\n    public boolean greaterThan(final Dfp x) {\n\n        // make sure we don't mix number with different precision\n        if (field.getRadixDigits() != x.field.getRadixDigits()) {\n            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);\n            final Dfp result = newInstance(getZero());\n            result.nans = QNAN;\n            dotrap(DfpField.FLAG_INVALID, GREATER_THAN_TRAP, x, result);\n            return false;\n        }\n\n        /* if a nan is involved, signal invalid and return false */\n        if (isNaN() || x.isNaN()) {\n            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);\n            dotrap(DfpField.FLAG_INVALID, GREATER_THAN_TRAP, x, newInstance(getZero()));\n            return false;\n        }\n\n        return compare(this, x) > 0;\n    }\n\n    /** Check if instance is less than or equal to 0.\n     * @return true if instance is not NaN and less than or equal to 0, false otherwise\n     */\n    public boolean negativeOrNull() {\n\n        if (isNaN()) {\n            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);\n            dotrap(DfpField.FLAG_INVALID, LESS_THAN_TRAP, this, newInstance(getZero()));\n            return false;\n        }\n\n        return (sign < 0) || ((mant[mant.length - 1] == 0) && !isInfinite());\n\n    }\n\n    /** Check if instance is strictly less than 0.\n     * @return true if instance is not NaN and less than or equal to 0, false otherwise\n     */\n    public boolean strictlyNegative() {\n\n        if (isNaN()) {\n            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);\n            dotrap(DfpField.FLAG_INVALID, LESS_THAN_TRAP, this, newInstance(getZero()));\n            return false;\n        }\n\n        return (sign < 0) && ((mant[mant.length - 1] != 0) || isInfinite());\n\n    }\n\n    /** Check if instance is greater than or equal to 0.\n     * @return true if instance is not NaN and greater than or equal to 0, false otherwise\n     */\n    public boolean positiveOrNull() {\n\n        if (isNaN()) {\n            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);\n            dotrap(DfpField.FLAG_INVALID, LESS_THAN_TRAP, this, newInstance(getZero()));\n            return false;\n        }\n\n        return (sign > 0) || ((mant[mant.length - 1] == 0) && !isInfinite());\n\n    }\n\n    /** Check if instance is strictly greater than 0.\n     * @return true if instance is not NaN and greater than or equal to 0, false otherwise\n     */\n    public boolean strictlyPositive() {\n\n        if (isNaN()) {\n            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);\n            dotrap(DfpField.FLAG_INVALID, LESS_THAN_TRAP, this, newInstance(getZero()));\n            return false;\n        }\n\n        return (sign > 0) && ((mant[mant.length - 1] != 0) || isInfinite());\n\n    }\n\n    /** Get the absolute value of instance.\n     * @return absolute value of instance\n     * @since 3.2\n     */\n    public Dfp abs() {\n        Dfp result = newInstance(this);\n        result.sign = 1;\n        return result;\n    }\n\n    /** Check if instance is infinite.\n     * @return true if instance is infinite\n     */\n    public boolean isInfinite() {\n        return nans == INFINITE;\n    }\n\n    /** Check if instance is not a number.\n     * @return true if instance is not a number\n     */\n    public boolean isNaN() {\n        return (nans == QNAN) || (nans == SNAN);\n    }\n\n    /** Check if instance is equal to zero.\n     * @return true if instance is equal to zero\n     */\n    public boolean isZero() {\n\n        if (isNaN()) {\n            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);\n            dotrap(DfpField.FLAG_INVALID, LESS_THAN_TRAP, this, newInstance(getZero()));\n            return false;\n        }\n\n        return (mant[mant.length - 1] == 0) && !isInfinite();\n\n    }\n\n    /** Check if instance is equal to x.\n     * @param other object to check instance against\n     * @return true if instance is equal to x and neither are NaN, false otherwise\n     */\n    @Override\n    public boolean equals(final Object other) {\n\n        if (other instanceof Dfp) {\n            final Dfp x = (Dfp) other;\n            if (isNaN() || x.isNaN() || field.getRadixDigits() != x.field.getRadixDigits()) {\n                return false;\n            }\n\n            return compare(this, x) == 0;\n        }\n\n        return false;\n\n    }\n\n    /**\n     * Gets a hashCode for the instance.\n     * @return a hash code value for this object\n     */\n    @Override\n    public int hashCode() {\n        return 17 + (isZero() ? 0 : (sign << 8)) + (nans << 16) + exp + Arrays.hashCode(mant);\n    }\n\n    /** Check if instance is not equal to x.\n     * @param x number to check instance against\n     * @return true if instance is not equal to x and neither are NaN, false otherwise\n     */\n    public boolean unequal(final Dfp x) {\n        if (isNaN() || x.isNaN() || field.getRadixDigits() != x.field.getRadixDigits()) {\n            return false;\n        }\n\n        return greaterThan(x) || lessThan(x);\n    }\n\n    /** Compare two instances.\n     * @param a first instance in comparison\n     * @param b second instance in comparison\n     * @return -1 if a<b, 1 if a>b and 0 if a==b\n     *  Note this method does not properly handle NaNs or numbers with different precision.\n     */\n    private static int compare(final Dfp a, final Dfp b) {\n        // Ignore the sign of zero\n        if (a.mant[a.mant.length - 1] == 0 && b.mant[b.mant.length - 1] == 0 &&\n            a.nans == FINITE && b.nans == FINITE) {\n            return 0;\n        }\n\n        if (a.sign != b.sign) {\n            if (a.sign == -1) {\n                return -1;\n            } else {\n                return 1;\n            }\n        }\n\n        // deal with the infinities\n        if (a.nans == INFINITE && b.nans == FINITE) {\n            return a.sign;\n        }\n\n        if (a.nans == FINITE && b.nans == INFINITE) {\n            return -b.sign;\n        }\n\n        if (a.nans == INFINITE && b.nans == INFINITE) {\n            return 0;\n        }\n\n        // Handle special case when a or b is zero, by ignoring the exponents\n        if (b.mant[b.mant.length-1] != 0 && a.mant[b.mant.length-1] != 0) {\n            if (a.exp < b.exp) {\n                return -a.sign;\n            }\n\n            if (a.exp > b.exp) {\n                return a.sign;\n            }\n        }\n\n        // compare the mantissas\n        for (int i = a.mant.length - 1; i >= 0; i--) {\n            if (a.mant[i] > b.mant[i]) {\n                return a.sign;\n            }\n\n            if (a.mant[i] < b.mant[i]) {\n                return -a.sign;\n            }\n        }\n\n        return 0;\n\n    }\n\n    /** Round to nearest integer using the round-half-even method.\n     *  That is round to nearest integer unless both are equidistant.\n     *  In which case round to the even one.\n     *  @return rounded value\n     * @since 3.2\n     */\n    public Dfp rint() {\n        return trunc(DfpField.RoundingMode.ROUND_HALF_EVEN);\n    }\n\n    /** Round to an integer using the round floor mode.\n     * That is, round toward -Infinity\n     *  @return rounded value\n     * @since 3.2\n     */\n    public Dfp floor() {\n        return trunc(DfpField.RoundingMode.ROUND_FLOOR);\n    }\n\n    /** Round to an integer using the round ceil mode.\n     * That is, round toward +Infinity\n     *  @return rounded value\n     * @since 3.2\n     */\n    public Dfp ceil() {\n        return trunc(DfpField.RoundingMode.ROUND_CEIL);\n    }\n\n    /** Returns the IEEE remainder.\n     * @param d divisor\n     * @return this less n &times; d, where n is the integer closest to this/d\n     * @since 3.2\n     */\n    public Dfp remainder(final Dfp d) {\n\n        final Dfp result = this.subtract(this.divide(d).rint().multiply(d));\n\n        // IEEE 854-1987 says that if the result is zero, then it carries the sign of this\n        if (result.mant[mant.length-1] == 0) {\n            result.sign = sign;\n        }\n\n        return result;\n\n    }\n\n    /** Does the integer conversions with the specified rounding.\n     * @param rmode rounding mode to use\n     * @return truncated value\n     */\n    protected Dfp trunc(final DfpField.RoundingMode rmode) {\n        boolean changed = false;\n\n        if (isNaN()) {\n            return newInstance(this);\n        }\n\n        if (nans == INFINITE) {\n            return newInstance(this);\n        }\n\n        if (mant[mant.length-1] == 0) {\n            // a is zero\n            return newInstance(this);\n        }\n\n        /* If the exponent is less than zero then we can certainly\n         * return zero */\n        if (exp < 0) {\n            field.setIEEEFlagsBits(DfpField.FLAG_INEXACT);\n            Dfp result = newInstance(getZero());\n            result = dotrap(DfpField.FLAG_INEXACT, TRUNC_TRAP, this, result);\n            return result;\n        }\n\n        /* If the exponent is greater than or equal to digits, then it\n         * must already be an integer since there is no precision left\n         * for any fractional part */\n\n        if (exp >= mant.length) {\n            return newInstance(this);\n        }\n\n        /* General case:  create another dfp, result, that contains the\n         * a with the fractional part lopped off.  */\n\n        Dfp result = newInstance(this);\n        for (int i = 0; i < mant.length-result.exp; i++) {\n            changed |= result.mant[i] != 0;\n            result.mant[i] = 0;\n        }\n\n        if (changed) {\n            switch (rmode) {\n                case ROUND_FLOOR:\n                    if (result.sign == -1) {\n                        // then we must increment the mantissa by one\n                        result = result.add(newInstance(-1));\n                    }\n                    break;\n\n                case ROUND_CEIL:\n                    if (result.sign == 1) {\n                        // then we must increment the mantissa by one\n                        result = result.add(getOne());\n                    }\n                    break;\n\n                case ROUND_HALF_EVEN:\n                default:\n                    final Dfp half = newInstance(\"0.5\");\n                    Dfp a = subtract(result);  // difference between this and result\n                    a.sign = 1;            // force positive (take abs)\n                    if (a.greaterThan(half)) {\n                        a = newInstance(getOne());\n                        a.sign = sign;\n                        result = result.add(a);\n                    }\n\n                    /** If exactly equal to 1/2 and odd then increment */\n                    if (a.equals(half) && result.exp > 0 && (result.mant[mant.length-result.exp]&1) != 0) {\n                        a = newInstance(getOne());\n                        a.sign = sign;\n                        result = result.add(a);\n                    }\n                    break;\n            }\n\n            field.setIEEEFlagsBits(DfpField.FLAG_INEXACT);  // signal inexact\n            result = dotrap(DfpField.FLAG_INEXACT, TRUNC_TRAP, this, result);\n            return result;\n        }\n\n        return result;\n    }\n\n    /** Convert this to an integer.\n     * If greater than 2147483647, it returns 2147483647. If less than -2147483648 it returns -2147483648.\n     * @return converted number\n     */\n    public int intValue() {\n        Dfp rounded;\n        int result = 0;\n\n        rounded = rint();\n\n        if (rounded.greaterThan(newInstance(2147483647))) {\n            return 2147483647;\n        }\n\n        if (rounded.lessThan(newInstance(-2147483648))) {\n            return -2147483648;\n        }\n\n        for (int i = mant.length - 1; i >= mant.length - rounded.exp; i--) {\n            result = result * RADIX + rounded.mant[i];\n        }\n\n        if (rounded.sign == -1) {\n            result = -result;\n        }\n\n        return result;\n    }\n\n    /** Get the exponent of the greatest power of 10000 that is\n     *  less than or equal to the absolute value of this.  I.E.  if\n     *  this is 10<sup>6</sup> then log10K would return 1.\n     *  @return integer base 10000 logarithm\n     */\n    public int log10K() {\n        return exp - 1;\n    }\n\n    /** Get the specified  power of 10000.\n     * @param e desired power\n     * @return 10000<sup>e</sup>\n     */\n    public Dfp power10K(final int e) {\n        Dfp d = newInstance(getOne());\n        d.exp = e + 1;\n        return d;\n    }\n\n    /** Get the exponent of the greatest power of 10 that is less than or equal to abs(this).\n     *  @return integer base 10 logarithm\n     * @since 3.2\n     */\n    public int intLog10()  {\n        if (mant[mant.length-1] > 1000) {\n            return exp * 4 - 1;\n        }\n        if (mant[mant.length-1] > 100) {\n            return exp * 4 - 2;\n        }\n        if (mant[mant.length-1] > 10) {\n            return exp * 4 - 3;\n        }\n        return exp * 4 - 4;\n    }\n\n    /** Return the specified  power of 10.\n     * @param e desired power\n     * @return 10<sup>e</sup>\n     */\n    public Dfp power10(final int e) {\n        Dfp d = newInstance(getOne());\n\n        if (e >= 0) {\n            d.exp = e / 4 + 1;\n        } else {\n            d.exp = (e + 1) / 4;\n        }\n\n        switch ((e % 4 + 4) % 4) {\n            case 0:\n                break;\n            case 1:\n                d = d.multiply(10);\n                break;\n            case 2:\n                d = d.multiply(100);\n                break;\n            default:\n                d = d.multiply(1000);\n        }\n\n        return d;\n    }\n\n    /** Negate the mantissa of this by computing the complement.\n     *  Leaves the sign bit unchanged, used internally by add.\n     *  Denormalized numbers are handled properly here.\n     *  @param extra ???\n     *  @return ???\n     */\n    protected int complement(int extra) {\n\n        extra = RADIX-extra;\n        for (int i = 0; i < mant.length; i++) {\n            mant[i] = RADIX-mant[i]-1;\n        }\n\n        int rh = extra / RADIX;\n        extra -= rh * RADIX;\n        for (int i = 0; i < mant.length; i++) {\n            final int r = mant[i] + rh;\n            rh = r / RADIX;\n            mant[i] = r - rh * RADIX;\n        }\n\n        return extra;\n    }\n\n    /** Add x to this.\n     * @param x number to add\n     * @return sum of this and x\n     */\n    public Dfp add(final Dfp x) {\n\n        // make sure we don't mix number with different precision\n        if (field.getRadixDigits() != x.field.getRadixDigits()) {\n            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);\n            final Dfp result = newInstance(getZero());\n            result.nans = QNAN;\n            return dotrap(DfpField.FLAG_INVALID, ADD_TRAP, x, result);\n        }\n\n        /* handle special cases */\n        if (nans != FINITE || x.nans != FINITE) {\n            if (isNaN()) {\n                return this;\n            }\n\n            if (x.isNaN()) {\n                return x;\n            }\n\n            if (nans == INFINITE && x.nans == FINITE) {\n                return this;\n            }\n\n            if (x.nans == INFINITE && nans == FINITE) {\n                return x;\n            }\n\n            if (x.nans == INFINITE && nans == INFINITE && sign == x.sign) {\n                return x;\n            }\n\n            if (x.nans == INFINITE && nans == INFINITE && sign != x.sign) {\n                field.setIEEEFlagsBits(DfpField.FLAG_INVALID);\n                Dfp result = newInstance(getZero());\n                result.nans = QNAN;\n                result = dotrap(DfpField.FLAG_INVALID, ADD_TRAP, x, result);\n                return result;\n            }\n        }\n\n        /* copy this and the arg */\n        Dfp a = newInstance(this);\n        Dfp b = newInstance(x);\n\n        /* initialize the result object */\n        Dfp result = newInstance(getZero());\n\n        /* Make all numbers positive, but remember their sign */\n        final byte asign = a.sign;\n        final byte bsign = b.sign;\n\n        a.sign = 1;\n        b.sign = 1;\n\n        /* The result will be signed like the arg with greatest magnitude */\n        byte rsign = bsign;\n        if (compare(a, b) > 0) {\n            rsign = asign;\n        }\n\n        /* Handle special case when a or b is zero, by setting the exponent\n       of the zero number equal to the other one.  This avoids an alignment\n       which would cause catastropic loss of precision */\n        if (b.mant[mant.length-1] == 0) {\n            b.exp = a.exp;\n        }\n\n        if (a.mant[mant.length-1] == 0) {\n            a.exp = b.exp;\n        }\n\n        /* align number with the smaller exponent */\n        int aextradigit = 0;\n        int bextradigit = 0;\n        if (a.exp < b.exp) {\n            aextradigit = a.align(b.exp);\n        } else {\n            bextradigit = b.align(a.exp);\n        }\n\n        /* complement the smaller of the two if the signs are different */\n        if (asign != bsign) {\n            if (asign == rsign) {\n                bextradigit = b.complement(bextradigit);\n            } else {\n                aextradigit = a.complement(aextradigit);\n            }\n        }\n\n        /* add the mantissas */\n        int rh = 0; /* acts as a carry */\n        for (int i = 0; i < mant.length; i++) {\n            final int r = a.mant[i]+b.mant[i]+rh;\n            rh = r / RADIX;\n            result.mant[i] = r - rh * RADIX;\n        }\n        result.exp = a.exp;\n        result.sign = rsign;\n\n        /* handle overflow -- note, when asign!=bsign an overflow is\n         * normal and should be ignored.  */\n\n        if (rh != 0 && (asign == bsign)) {\n            final int lostdigit = result.mant[0];\n            result.shiftRight();\n            result.mant[mant.length-1] = rh;\n            final int excp = result.round(lostdigit);\n            if (excp != 0) {\n                result = dotrap(excp, ADD_TRAP, x, result);\n            }\n        }\n\n        /* normalize the result */\n        for (int i = 0; i < mant.length; i++) {\n            if (result.mant[mant.length-1] != 0) {\n                break;\n            }\n            result.shiftLeft();\n            if (i == 0) {\n                result.mant[0] = aextradigit+bextradigit;\n                aextradigit = 0;\n                bextradigit = 0;\n            }\n        }\n\n        /* result is zero if after normalization the most sig. digit is zero */\n        if (result.mant[mant.length-1] == 0) {\n            result.exp = 0;\n\n            if (asign != bsign) {\n                // Unless adding 2 negative zeros, sign is positive\n                result.sign = 1;  // Per IEEE 854-1987 Section 6.3\n            }\n        }\n\n        /* Call round to test for over/under flows */\n        final int excp = result.round(aextradigit + bextradigit);\n        if (excp != 0) {\n            result = dotrap(excp, ADD_TRAP, x, result);\n        }\n\n        return result;\n    }\n\n    /** Returns a number that is this number with the sign bit reversed.\n     * @return the opposite of this\n     */\n    public Dfp negate() {\n        Dfp result = newInstance(this);\n        result.sign = (byte) - result.sign;\n        return result;\n    }\n\n    /** Subtract x from this.\n     * @param x number to subtract\n     * @return difference of this and a\n     */\n    public Dfp subtract(final Dfp x) {\n        return add(x.negate());\n    }\n\n    /** Round this given the next digit n using the current rounding mode.\n     * @param n ???\n     * @return the IEEE flag if an exception occurred\n     */\n    protected int round(int n) {\n        boolean inc = false;\n        switch (field.getRoundingMode()) {\n            case ROUND_DOWN:\n                inc = false;\n                break;\n\n            case ROUND_UP:\n                inc = n != 0;       // round up if n!=0\n                break;\n\n            case ROUND_HALF_UP:\n                inc = n >= 5000;  // round half up\n                break;\n\n            case ROUND_HALF_DOWN:\n                inc = n > 5000;  // round half down\n                break;\n\n            case ROUND_HALF_EVEN:\n                inc = n > 5000 || (n == 5000 && (mant[0] & 1) == 1);  // round half-even\n                break;\n\n            case ROUND_HALF_ODD:\n                inc = n > 5000 || (n == 5000 && (mant[0] & 1) == 0);  // round half-odd\n                break;\n\n            case ROUND_CEIL:\n                inc = sign == 1 && n != 0;  // round ceil\n                break;\n\n            case ROUND_FLOOR:\n            default:\n                inc = sign == -1 && n != 0;  // round floor\n                break;\n        }\n\n        if (inc) {\n            // increment if necessary\n            int rh = 1;\n            for (int i = 0; i < mant.length; i++) {\n                final int r = mant[i] + rh;\n                rh = r / RADIX;\n                mant[i] = r - rh * RADIX;\n            }\n\n            if (rh != 0) {\n                shiftRight();\n                mant[mant.length-1] = rh;\n            }\n        }\n\n        // check for exceptional cases and raise signals if necessary\n        if (exp < MIN_EXP) {\n            // Gradual Underflow\n            field.setIEEEFlagsBits(DfpField.FLAG_UNDERFLOW);\n            return DfpField.FLAG_UNDERFLOW;\n        }\n\n        if (exp > MAX_EXP) {\n            // Overflow\n            field.setIEEEFlagsBits(DfpField.FLAG_OVERFLOW);\n            return DfpField.FLAG_OVERFLOW;\n        }\n\n        if (n != 0) {\n            // Inexact\n            field.setIEEEFlagsBits(DfpField.FLAG_INEXACT);\n            return DfpField.FLAG_INEXACT;\n        }\n\n        return 0;\n\n    }\n\n    /** Multiply this by x.\n     * @param x multiplicand\n     * @return product of this and x\n     */\n    public Dfp multiply(final Dfp x) {\n\n        // make sure we don't mix number with different precision\n        if (field.getRadixDigits() != x.field.getRadixDigits()) {\n            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);\n            final Dfp result = newInstance(getZero());\n            result.nans = QNAN;\n            return dotrap(DfpField.FLAG_INVALID, MULTIPLY_TRAP, x, result);\n        }\n\n        Dfp result = newInstance(getZero());\n\n        /* handle special cases */\n        if (nans != FINITE || x.nans != FINITE) {\n            if (isNaN()) {\n                return this;\n            }\n\n            if (x.isNaN()) {\n                return x;\n            }\n\n            if (nans == INFINITE && x.nans == FINITE && x.mant[mant.length-1] != 0) {\n                result = newInstance(this);\n                result.sign = (byte) (sign * x.sign);\n                return result;\n            }\n\n            if (x.nans == INFINITE && nans == FINITE && mant[mant.length-1] != 0) {\n                result = newInstance(x);\n                result.sign = (byte) (sign * x.sign);\n                return result;\n            }\n\n            if (x.nans == INFINITE && nans == INFINITE) {\n                result = newInstance(this);\n                result.sign = (byte) (sign * x.sign);\n                return result;\n            }\n\n            if ( (x.nans == INFINITE && nans == FINITE && mant[mant.length-1] == 0) ||\n                    (nans == INFINITE && x.nans == FINITE && x.mant[mant.length-1] == 0) ) {\n                field.setIEEEFlagsBits(DfpField.FLAG_INVALID);\n                result = newInstance(getZero());\n                result.nans = QNAN;\n                result = dotrap(DfpField.FLAG_INVALID, MULTIPLY_TRAP, x, result);\n                return result;\n            }\n        }\n\n        int[] product = new int[mant.length*2];  // Big enough to hold even the largest result\n\n        for (int i = 0; i < mant.length; i++) {\n            int rh = 0;  // acts as a carry\n            for (int j=0; j<mant.length; j++) {\n                int r = mant[i] * x.mant[j];    // multiply the 2 digits\n                r += product[i+j] + rh;  // add to the product digit with carry in\n\n                rh = r / RADIX;\n                product[i+j] = r - rh * RADIX;\n            }\n            product[i+mant.length] = rh;\n        }\n\n        // Find the most sig digit\n        int md = mant.length * 2 - 1;  // default, in case result is zero\n        for (int i = mant.length * 2 - 1; i >= 0; i--) {\n            if (product[i] != 0) {\n                md = i;\n                break;\n            }\n        }\n\n        // Copy the digits into the result\n        for (int i = 0; i < mant.length; i++) {\n            result.mant[mant.length - i - 1] = product[md - i];\n        }\n\n        // Fixup the exponent.\n        result.exp = exp + x.exp + md - 2 * mant.length + 1;\n        result.sign = (byte)((sign == x.sign)?1:-1);\n\n        if (result.mant[mant.length-1] == 0) {\n            // if result is zero, set exp to zero\n            result.exp = 0;\n        }\n\n        final int excp;\n        if (md > (mant.length-1)) {\n            excp = result.round(product[md-mant.length]);\n        } else {\n            excp = result.round(0); // has no effect except to check status\n        }\n\n        if (excp != 0) {\n            result = dotrap(excp, MULTIPLY_TRAP, x, result);\n        }\n\n        return result;\n\n    }\n\n    /** Multiply this by a single digit x.\n     * @param x multiplicand\n     * @return product of this and x\n     */\n    public Dfp multiply(final int x) {\n        if (x >= 0 && x < RADIX) {\n            return multiplyFast(x);\n        } else {\n            return multiply(newInstance(x));\n        }\n    }\n\n    /** Multiply this by a single digit 0&lt;=x&lt;radix.\n     * There are speed advantages in this special case.\n     * @param x multiplicand\n     * @return product of this and x\n     */\n    private Dfp multiplyFast(final int x) {\n        Dfp result = newInstance(this);\n\n        /* handle special cases */\n        if (nans != FINITE) {\n            if (isNaN()) {\n                return this;\n            }\n\n            if (nans == INFINITE && x != 0) {\n                result = newInstance(this);\n                return result;\n            }\n\n            if (nans == INFINITE && x == 0) {\n                field.setIEEEFlagsBits(DfpField.FLAG_INVALID);\n                result = newInstance(getZero());\n                result.nans = QNAN;\n                result = dotrap(DfpField.FLAG_INVALID, MULTIPLY_TRAP, newInstance(getZero()), result);\n                return result;\n            }\n        }\n\n        /* range check x */\n        if (x < 0 || x >= RADIX) {\n            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);\n            result = newInstance(getZero());\n            result.nans = QNAN;\n            result = dotrap(DfpField.FLAG_INVALID, MULTIPLY_TRAP, result, result);\n            return result;\n        }\n\n        int rh = 0;\n        for (int i = 0; i < mant.length; i++) {\n            final int r = mant[i] * x + rh;\n            rh = r / RADIX;\n            result.mant[i] = r - rh * RADIX;\n        }\n\n        int lostdigit = 0;\n        if (rh != 0) {\n            lostdigit = result.mant[0];\n            result.shiftRight();\n            result.mant[mant.length-1] = rh;\n        }\n\n        if (result.mant[mant.length-1] == 0) { // if result is zero, set exp to zero\n            result.exp = 0;\n        }\n\n        final int excp = result.round(lostdigit);\n        if (excp != 0) {\n            result = dotrap(excp, MULTIPLY_TRAP, result, result);\n        }\n\n        return result;\n    }\n\n    /** Divide this by divisor.\n     * @param divisor divisor\n     * @return quotient of this by divisor\n     */\n    public Dfp divide(Dfp divisor) {\n        int dividend[]; // current status of the dividend\n        int quotient[]; // quotient\n        int remainder[];// remainder\n        int qd;         // current quotient digit we're working with\n        int nsqd;       // number of significant quotient digits we have\n        int trial=0;    // trial quotient digit\n        int minadj;     // minimum adjustment\n        boolean trialgood; // Flag to indicate a good trail digit\n        int md=0;       // most sig digit in result\n        int excp;       // exceptions\n\n        // make sure we don't mix number with different precision\n        if (field.getRadixDigits() != divisor.field.getRadixDigits()) {\n            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);\n            final Dfp result = newInstance(getZero());\n            result.nans = QNAN;\n            return dotrap(DfpField.FLAG_INVALID, DIVIDE_TRAP, divisor, result);\n        }\n\n        Dfp result = newInstance(getZero());\n\n        /* handle special cases */\n        if (nans != FINITE || divisor.nans != FINITE) {\n            if (isNaN()) {\n                return this;\n            }\n\n            if (divisor.isNaN()) {\n                return divisor;\n            }\n\n            if (nans == INFINITE && divisor.nans == FINITE) {\n                result = newInstance(this);\n                result.sign = (byte) (sign * divisor.sign);\n                return result;\n            }\n\n            if (divisor.nans == INFINITE && nans == FINITE) {\n                result = newInstance(getZero());\n                result.sign = (byte) (sign * divisor.sign);\n                return result;\n            }\n\n            if (divisor.nans == INFINITE && nans == INFINITE) {\n                field.setIEEEFlagsBits(DfpField.FLAG_INVALID);\n                result = newInstance(getZero());\n                result.nans = QNAN;\n                result = dotrap(DfpField.FLAG_INVALID, DIVIDE_TRAP, divisor, result);\n                return result;\n            }\n        }\n\n        /* Test for divide by zero */\n        if (divisor.mant[mant.length-1] == 0) {\n            field.setIEEEFlagsBits(DfpField.FLAG_DIV_ZERO);\n            result = newInstance(getZero());\n            result.sign = (byte) (sign * divisor.sign);\n            result.nans = INFINITE;\n            result = dotrap(DfpField.FLAG_DIV_ZERO, DIVIDE_TRAP, divisor, result);\n            return result;\n        }\n\n        dividend = new int[mant.length+1];  // one extra digit needed\n        quotient = new int[mant.length+2];  // two extra digits needed 1 for overflow, 1 for rounding\n        remainder = new int[mant.length+1]; // one extra digit needed\n\n        /* Initialize our most significant digits to zero */\n\n        dividend[mant.length] = 0;\n        quotient[mant.length] = 0;\n        quotient[mant.length+1] = 0;\n        remainder[mant.length] = 0;\n\n        /* copy our mantissa into the dividend, initialize the\n       quotient while we are at it */\n\n        for (int i = 0; i < mant.length; i++) {\n            dividend[i] = mant[i];\n            quotient[i] = 0;\n            remainder[i] = 0;\n        }\n\n        /* outer loop.  Once per quotient digit */\n        nsqd = 0;\n        for (qd = mant.length+1; qd >= 0; qd--) {\n            /* Determine outer limits of our quotient digit */\n\n            // r =  most sig 2 digits of dividend\n            final int divMsb = dividend[mant.length]*RADIX+dividend[mant.length-1];\n            int min = divMsb       / (divisor.mant[mant.length-1]+1);\n            int max = (divMsb + 1) / divisor.mant[mant.length-1];\n\n            trialgood = false;\n            while (!trialgood) {\n                // try the mean\n                trial = (min+max)/2;\n\n                /* Multiply by divisor and store as remainder */\n                int rh = 0;\n                for (int i = 0; i < mant.length + 1; i++) {\n                    int dm = (i<mant.length)?divisor.mant[i]:0;\n                    final int r = (dm * trial) + rh;\n                    rh = r / RADIX;\n                    remainder[i] = r - rh * RADIX;\n                }\n\n                /* subtract the remainder from the dividend */\n                rh = 1;  // carry in to aid the subtraction\n                for (int i = 0; i < mant.length + 1; i++) {\n                    final int r = ((RADIX-1) - remainder[i]) + dividend[i] + rh;\n                    rh = r / RADIX;\n                    remainder[i] = r - rh * RADIX;\n                }\n\n                /* Lets analyze what we have here */\n                if (rh == 0) {\n                    // trial is too big -- negative remainder\n                    max = trial-1;\n                    continue;\n                }\n\n                /* find out how far off the remainder is telling us we are */\n                minadj = (remainder[mant.length] * RADIX)+remainder[mant.length-1];\n                minadj /= divisor.mant[mant.length-1] + 1;\n\n                if (minadj >= 2) {\n                    min = trial+minadj;  // update the minimum\n                    continue;\n                }\n\n                /* May have a good one here, check more thoroughly.  Basically\n           its a good one if it is less than the divisor */\n                trialgood = false;  // assume false\n                for (int i = mant.length - 1; i >= 0; i--) {\n                    if (divisor.mant[i] > remainder[i]) {\n                        trialgood = true;\n                    }\n                    if (divisor.mant[i] < remainder[i]) {\n                        break;\n                    }\n                }\n\n                if (remainder[mant.length] != 0) {\n                    trialgood = false;\n                }\n\n                if (trialgood == false) {\n                    min = trial+1;\n                }\n            }\n\n            /* Great we have a digit! */\n            quotient[qd] = trial;\n            if (trial != 0 || nsqd != 0) {\n                nsqd++;\n            }\n\n            if (field.getRoundingMode() == DfpField.RoundingMode.ROUND_DOWN && nsqd == mant.length) {\n                // We have enough for this mode\n                break;\n            }\n\n            if (nsqd > mant.length) {\n                // We have enough digits\n                break;\n            }\n\n            /* move the remainder into the dividend while left shifting */\n            dividend[0] = 0;\n            for (int i = 0; i < mant.length; i++) {\n                dividend[i + 1] = remainder[i];\n            }\n        }\n\n        /* Find the most sig digit */\n        md = mant.length;  // default\n        for (int i = mant.length + 1; i >= 0; i--) {\n            if (quotient[i] != 0) {\n                md = i;\n                break;\n            }\n        }\n\n        /* Copy the digits into the result */\n        for (int i=0; i<mant.length; i++) {\n            result.mant[mant.length-i-1] = quotient[md-i];\n        }\n\n        /* Fixup the exponent. */\n        result.exp = exp - divisor.exp + md - mant.length;\n        result.sign = (byte) ((sign == divisor.sign) ? 1 : -1);\n\n        if (result.mant[mant.length-1] == 0) { // if result is zero, set exp to zero\n            result.exp = 0;\n        }\n\n        if (md > (mant.length-1)) {\n            excp = result.round(quotient[md-mant.length]);\n        } else {\n            excp = result.round(0);\n        }\n\n        if (excp != 0) {\n            result = dotrap(excp, DIVIDE_TRAP, divisor, result);\n        }\n\n        return result;\n    }\n\n    /** Divide by a single digit less than radix.\n     *  Special case, so there are speed advantages. 0 &lt;= divisor &lt; radix\n     * @param divisor divisor\n     * @return quotient of this by divisor\n     */\n    public Dfp divide(int divisor) {\n\n        // Handle special cases\n        if (nans != FINITE) {\n            if (isNaN()) {\n                return this;\n            }\n\n            if (nans == INFINITE) {\n                return newInstance(this);\n            }\n        }\n\n        // Test for divide by zero\n        if (divisor == 0) {\n            field.setIEEEFlagsBits(DfpField.FLAG_DIV_ZERO);\n            Dfp result = newInstance(getZero());\n            result.sign = sign;\n            result.nans = INFINITE;\n            result = dotrap(DfpField.FLAG_DIV_ZERO, DIVIDE_TRAP, getZero(), result);\n            return result;\n        }\n\n        // range check divisor\n        if (divisor < 0 || divisor >= RADIX) {\n            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);\n            Dfp result = newInstance(getZero());\n            result.nans = QNAN;\n            result = dotrap(DfpField.FLAG_INVALID, DIVIDE_TRAP, result, result);\n            return result;\n        }\n\n        Dfp result = newInstance(this);\n\n        int rl = 0;\n        for (int i = mant.length-1; i >= 0; i--) {\n            final int r = rl*RADIX + result.mant[i];\n            final int rh = r / divisor;\n            rl = r - rh * divisor;\n            result.mant[i] = rh;\n        }\n\n        if (result.mant[mant.length-1] == 0) {\n            // normalize\n            result.shiftLeft();\n            final int r = rl * RADIX;        // compute the next digit and put it in\n            final int rh = r / divisor;\n            rl = r - rh * divisor;\n            result.mant[0] = rh;\n        }\n\n        final int excp = result.round(rl * RADIX / divisor);  // do the rounding\n        if (excp != 0) {\n            result = dotrap(excp, DIVIDE_TRAP, result, result);\n        }\n\n        return result;\n\n    }\n\n    /** {@inheritDoc} */\n    public Dfp reciprocal() {\n        return field.getOne().divide(this);\n    }\n\n    /** Compute the square root.\n     * @return square root of the instance\n     * @since 3.2\n     */\n    public Dfp sqrt() {\n\n        // check for unusual cases\n        if (nans == FINITE && mant[mant.length-1] == 0) {\n            // if zero\n            return newInstance(this);\n        }\n\n        if (nans != FINITE) {\n            if (nans == INFINITE && sign == 1) {\n                // if positive infinity\n                return newInstance(this);\n            }\n\n            if (nans == QNAN) {\n                return newInstance(this);\n            }\n\n            if (nans == SNAN) {\n                Dfp result;\n\n                field.setIEEEFlagsBits(DfpField.FLAG_INVALID);\n                result = newInstance(this);\n                result = dotrap(DfpField.FLAG_INVALID, SQRT_TRAP, null, result);\n                return result;\n            }\n        }\n\n        if (sign == -1) {\n            // if negative\n            Dfp result;\n\n            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);\n            result = newInstance(this);\n            result.nans = QNAN;\n            result = dotrap(DfpField.FLAG_INVALID, SQRT_TRAP, null, result);\n            return result;\n        }\n\n        Dfp x = newInstance(this);\n\n        /* Lets make a reasonable guess as to the size of the square root */\n        if (x.exp < -1 || x.exp > 1) {\n            x.exp = this.exp / 2;\n        }\n\n        /* Coarsely estimate the mantissa */\n        switch (x.mant[mant.length-1] / 2000) {\n            case 0:\n                x.mant[mant.length-1] = x.mant[mant.length-1]/2+1;\n                break;\n            case 2:\n                x.mant[mant.length-1] = 1500;\n                break;\n            case 3:\n                x.mant[mant.length-1] = 2200;\n                break;\n            default:\n                x.mant[mant.length-1] = 3000;\n        }\n\n        Dfp dx = newInstance(x);\n\n        /* Now that we have the first pass estimate, compute the rest\n       by the formula dx = (y - x*x) / (2x); */\n\n        Dfp px  = getZero();\n        Dfp ppx = getZero();\n        while (x.unequal(px)) {\n            dx = newInstance(x);\n            dx.sign = -1;\n            dx = dx.add(this.divide(x));\n            dx = dx.divide(2);\n            ppx = px;\n            px = x;\n            x = x.add(dx);\n\n            if (x.equals(ppx)) {\n                // alternating between two values\n                break;\n            }\n\n            // if dx is zero, break.  Note testing the most sig digit\n            // is a sufficient test since dx is normalized\n            if (dx.mant[mant.length-1] == 0) {\n                break;\n            }\n        }\n\n        return x;\n\n    }\n\n    /** Get a string representation of the instance.\n     * @return string representation of the instance\n     */\n    @Override\n    public String toString() {\n        if (nans != FINITE) {\n            // if non-finite exceptional cases\n            if (nans == INFINITE) {\n                return (sign < 0) ? NEG_INFINITY_STRING : POS_INFINITY_STRING;\n            } else {\n                return NAN_STRING;\n            }\n        }\n\n        if (exp > mant.length || exp < -1) {\n            return dfp2sci();\n        }\n\n        return dfp2string();\n\n    }\n\n    /** Convert an instance to a string using scientific notation.\n     * @return string representation of the instance in scientific notation\n     */\n    protected String dfp2sci() {\n        char rawdigits[]    = new char[mant.length * 4];\n        char outputbuffer[] = new char[mant.length * 4 + 20];\n        int p;\n        int q;\n        int e;\n        int ae;\n        int shf;\n\n        // Get all the digits\n        p = 0;\n        for (int i = mant.length - 1; i >= 0; i--) {\n            rawdigits[p++] = (char) ((mant[i] / 1000) + '0');\n            rawdigits[p++] = (char) (((mant[i] / 100) %10) + '0');\n            rawdigits[p++] = (char) (((mant[i] / 10) % 10) + '0');\n            rawdigits[p++] = (char) (((mant[i]) % 10) + '0');\n        }\n\n        // Find the first non-zero one\n        for (p = 0; p < rawdigits.length; p++) {\n            if (rawdigits[p] != '0') {\n                break;\n            }\n        }\n        shf = p;\n\n        // Now do the conversion\n        q = 0;\n        if (sign == -1) {\n            outputbuffer[q++] = '-';\n        }\n\n        if (p != rawdigits.length) {\n            // there are non zero digits...\n            outputbuffer[q++] = rawdigits[p++];\n            outputbuffer[q++] = '.';\n\n            while (p<rawdigits.length) {\n                outputbuffer[q++] = rawdigits[p++];\n            }\n        } else {\n            outputbuffer[q++] = '0';\n            outputbuffer[q++] = '.';\n            outputbuffer[q++] = '0';\n            outputbuffer[q++] = 'e';\n            outputbuffer[q++] = '0';\n            return new String(outputbuffer, 0, 5);\n        }\n\n        outputbuffer[q++] = 'e';\n\n        // Find the msd of the exponent\n\n        e = exp * 4 - shf - 1;\n        ae = e;\n        if (e < 0) {\n            ae = -e;\n        }\n\n        // Find the largest p such that p < e\n        for (p = 1000000000; p > ae; p /= 10) {\n            // nothing to do\n        }\n\n        if (e < 0) {\n            outputbuffer[q++] = '-';\n        }\n\n        while (p > 0) {\n            outputbuffer[q++] = (char)(ae / p + '0');\n            ae %= p;\n            p /= 10;\n        }\n\n        return new String(outputbuffer, 0, q);\n\n    }\n\n    /** Convert an instance to a string using normal notation.\n     * @return string representation of the instance in normal notation\n     */\n    protected String dfp2string() {\n        char buffer[] = new char[mant.length*4 + 20];\n        int p = 1;\n        int q;\n        int e = exp;\n        boolean pointInserted = false;\n\n        buffer[0] = ' ';\n\n        if (e <= 0) {\n            buffer[p++] = '0';\n            buffer[p++] = '.';\n            pointInserted = true;\n        }\n\n        while (e < 0) {\n            buffer[p++] = '0';\n            buffer[p++] = '0';\n            buffer[p++] = '0';\n            buffer[p++] = '0';\n            e++;\n        }\n\n        for (int i = mant.length - 1; i >= 0; i--) {\n            buffer[p++] = (char) ((mant[i] / 1000) + '0');\n            buffer[p++] = (char) (((mant[i] / 100) % 10) + '0');\n            buffer[p++] = (char) (((mant[i] / 10) % 10) + '0');\n            buffer[p++] = (char) (((mant[i]) % 10) + '0');\n            if (--e == 0) {\n                buffer[p++] = '.';\n                pointInserted = true;\n            }\n        }\n\n        while (e > 0) {\n            buffer[p++] = '0';\n            buffer[p++] = '0';\n            buffer[p++] = '0';\n            buffer[p++] = '0';\n            e--;\n        }\n\n        if (!pointInserted) {\n            // Ensure we have a radix point!\n            buffer[p++] = '.';\n        }\n\n        // Suppress leading zeros\n        q = 1;\n        while (buffer[q] == '0') {\n            q++;\n        }\n        if (buffer[q] == '.') {\n            q--;\n        }\n\n        // Suppress trailing zeros\n        while (buffer[p-1] == '0') {\n            p--;\n        }\n\n        // Insert sign\n        if (sign < 0) {\n            buffer[--q] = '-';\n        }\n\n        return new String(buffer, q, p - q);\n\n    }\n\n    /** Raises a trap.  This does not set the corresponding flag however.\n     *  @param type the trap type\n     *  @param what - name of routine trap occurred in\n     *  @param oper - input operator to function\n     *  @param result - the result computed prior to the trap\n     *  @return The suggested return value from the trap handler\n     */\n    public Dfp dotrap(int type, String what, Dfp oper, Dfp result) {\n        Dfp def = result;\n\n        switch (type) {\n            case DfpField.FLAG_INVALID:\n                def = newInstance(getZero());\n                def.sign = result.sign;\n                def.nans = QNAN;\n                break;\n\n            case DfpField.FLAG_DIV_ZERO:\n                if (nans == FINITE && mant[mant.length-1] != 0) {\n                    // normal case, we are finite, non-zero\n                    def = newInstance(getZero());\n                    def.sign = (byte)(sign*oper.sign);\n                    def.nans = INFINITE;\n                }\n\n                if (nans == FINITE && mant[mant.length-1] == 0) {\n                    //  0/0\n                    def = newInstance(getZero());\n                    def.nans = QNAN;\n                }\n\n                if (nans == INFINITE || nans == QNAN) {\n                    def = newInstance(getZero());\n                    def.nans = QNAN;\n                }\n\n                if (nans == INFINITE || nans == SNAN) {\n                    def = newInstance(getZero());\n                    def.nans = QNAN;\n                }\n                break;\n\n            case DfpField.FLAG_UNDERFLOW:\n                if ( (result.exp+mant.length) < MIN_EXP) {\n                    def = newInstance(getZero());\n                    def.sign = result.sign;\n                } else {\n                    def = newInstance(result);  // gradual underflow\n                }\n                result.exp += ERR_SCALE;\n                break;\n\n            case DfpField.FLAG_OVERFLOW:\n                result.exp -= ERR_SCALE;\n                def = newInstance(getZero());\n                def.sign = result.sign;\n                def.nans = INFINITE;\n                break;\n\n            default: def = result; break;\n        }\n\n        return trap(type, what, oper, def, result);\n\n    }\n\n    /** Trap handler.  Subclasses may override this to provide trap\n     *  functionality per IEEE 854-1987.\n     *\n     *  @param type  The exception type - e.g. FLAG_OVERFLOW\n     *  @param what  The name of the routine we were in e.g. divide()\n     *  @param oper  An operand to this function if any\n     *  @param def   The default return value if trap not enabled\n     *  @param result    The result that is specified to be delivered per\n     *                   IEEE 854, if any\n     *  @return the value that should be return by the operation triggering the trap\n     */\n    protected Dfp trap(int type, String what, Dfp oper, Dfp def, Dfp result) {\n        return def;\n    }\n\n    /** Returns the type - one of FINITE, INFINITE, SNAN, QNAN.\n     * @return type of the number\n     */\n    public int classify() {\n        return nans;\n    }\n\n    /** Creates an instance that is the same as x except that it has the sign of y.\n     * abs(x) = dfp.copysign(x, dfp.one)\n     * @param x number to get the value from\n     * @param y number to get the sign from\n     * @return a number with the value of x and the sign of y\n     */\n    public static Dfp copysign(final Dfp x, final Dfp y) {\n        Dfp result = x.newInstance(x);\n        result.sign = y.sign;\n        return result;\n    }\n\n    /** Returns the next number greater than this one in the direction of x.\n     * If this==x then simply returns this.\n     * @param x direction where to look at\n     * @return closest number next to instance in the direction of x\n     */\n    public Dfp nextAfter(final Dfp x) {\n\n        // make sure we don't mix number with different precision\n        if (field.getRadixDigits() != x.field.getRadixDigits()) {\n            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);\n            final Dfp result = newInstance(getZero());\n            result.nans = QNAN;\n            return dotrap(DfpField.FLAG_INVALID, NEXT_AFTER_TRAP, x, result);\n        }\n\n        // if this is greater than x\n        boolean up = false;\n        if (this.lessThan(x)) {\n            up = true;\n        }\n\n        if (compare(this, x) == 0) {\n            return newInstance(x);\n        }\n\n        if (lessThan(getZero())) {\n            up = !up;\n        }\n\n        final Dfp inc;\n        Dfp result;\n        if (up) {\n            inc = newInstance(getOne());\n            inc.exp = this.exp-mant.length+1;\n            inc.sign = this.sign;\n\n            if (this.equals(getZero())) {\n                inc.exp = MIN_EXP-mant.length;\n            }\n\n            result = add(inc);\n        } else {\n            inc = newInstance(getOne());\n            inc.exp = this.exp;\n            inc.sign = this.sign;\n\n            if (this.equals(inc)) {\n                inc.exp = this.exp-mant.length;\n            } else {\n                inc.exp = this.exp-mant.length+1;\n            }\n\n            if (this.equals(getZero())) {\n                inc.exp = MIN_EXP-mant.length;\n            }\n\n            result = this.subtract(inc);\n        }\n\n        if (result.classify() == INFINITE && this.classify() != INFINITE) {\n            field.setIEEEFlagsBits(DfpField.FLAG_INEXACT);\n            result = dotrap(DfpField.FLAG_INEXACT, NEXT_AFTER_TRAP, x, result);\n        }\n\n        if (result.equals(getZero()) && this.equals(getZero()) == false) {\n            field.setIEEEFlagsBits(DfpField.FLAG_INEXACT);\n            result = dotrap(DfpField.FLAG_INEXACT, NEXT_AFTER_TRAP, x, result);\n        }\n\n        return result;\n\n    }\n\n    /** Convert the instance into a double.\n     * @return a double approximating the instance\n     * @see #toSplitDouble()\n     */\n    public double toDouble() {\n\n        if (isInfinite()) {\n            if (lessThan(getZero())) {\n                return Double.NEGATIVE_INFINITY;\n            } else {\n                return Double.POSITIVE_INFINITY;\n            }\n        }\n\n        if (isNaN()) {\n            return Double.NaN;\n        }\n\n        Dfp y = this;\n        boolean negate = false;\n        int cmp0 = compare(this, getZero());\n        if (cmp0 == 0) {\n            return sign < 0 ? -0.0 : +0.0;\n        } else if (cmp0 < 0) {\n            y = negate();\n            negate = true;\n        }\n\n        /* Find the exponent, first estimate by integer log10, then adjust.\n         Should be faster than doing a natural logarithm.  */\n        int exponent = (int)(y.intLog10() * 3.32);\n        if (exponent < 0) {\n            exponent--;\n        }\n\n        Dfp tempDfp = DfpMath.pow(getTwo(), exponent);\n        while (tempDfp.lessThan(y) || tempDfp.equals(y)) {\n            tempDfp = tempDfp.multiply(2);\n            exponent++;\n        }\n        exponent--;\n\n        /* We have the exponent, now work on the mantissa */\n\n        y = y.divide(DfpMath.pow(getTwo(), exponent));\n        if (exponent > -1023) {\n            y = y.subtract(getOne());\n        }\n\n        if (exponent < -1074) {\n            return 0;\n        }\n\n        if (exponent > 1023) {\n            return negate ? Double.NEGATIVE_INFINITY : Double.POSITIVE_INFINITY;\n        }\n\n\n        y = y.multiply(newInstance(4503599627370496l)).rint();\n        String str = y.toString();\n        str = str.substring(0, str.length()-1);\n        long mantissa = Long.parseLong(str);\n\n        if (mantissa == 4503599627370496L) {\n            // Handle special case where we round up to next power of two\n            mantissa = 0;\n            exponent++;\n        }\n\n        /* Its going to be subnormal, so make adjustments */\n        if (exponent <= -1023) {\n            exponent--;\n        }\n\n        while (exponent < -1023) {\n            exponent++;\n            mantissa >>>= 1;\n        }\n\n        long bits = mantissa | ((exponent + 1023L) << 52);\n        double x = Double.longBitsToDouble(bits);\n\n        if (negate) {\n            x = -x;\n        }\n\n        return x;\n\n    }\n\n    /** Convert the instance into a split double.\n     * @return an array of two doubles which sum represent the instance\n     * @see #toDouble()\n     */\n    public double[] toSplitDouble() {\n        double split[] = new double[2];\n        long mask = 0xffffffffc0000000L;\n\n        split[0] = Double.longBitsToDouble(Double.doubleToLongBits(toDouble()) & mask);\n        split[1] = subtract(newInstance(split[0])).toDouble();\n\n        return split;\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public double getReal() {\n        return toDouble();\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp add(final double a) {\n        return add(newInstance(a));\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp subtract(final double a) {\n        return subtract(newInstance(a));\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp multiply(final double a) {\n        return multiply(newInstance(a));\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp divide(final double a) {\n        return divide(newInstance(a));\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp remainder(final double a) {\n        return remainder(newInstance(a));\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public long round() {\n        return FastMath.round(toDouble());\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp signum() {\n        if (isNaN() || isZero()) {\n            return this;\n        } else {\n            return newInstance(sign > 0 ? +1 : -1);\n        }\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp copySign(final Dfp s) {\n        if ((sign >= 0 && s.sign >= 0) || (sign < 0 && s.sign < 0)) { // Sign is currently OK\n            return this;\n        }\n        return negate(); // flip sign\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp copySign(final double s) {\n        long sb = Double.doubleToLongBits(s);\n        if ((sign >= 0 && sb >= 0) || (sign < 0 && sb < 0)) { // Sign is currently OK\n            return this;\n        }\n        return negate(); // flip sign\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp scalb(final int n) {\n        return multiply(DfpMath.pow(getTwo(), n));\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp hypot(final Dfp y) {\n        return multiply(this).add(y.multiply(y)).sqrt();\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp cbrt() {\n        return rootN(3);\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp rootN(final int n) {\n        return (sign >= 0) ?\n               DfpMath.pow(this, getOne().divide(n)) :\n               DfpMath.pow(negate(), getOne().divide(n)).negate();\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp pow(final double p) {\n        return DfpMath.pow(this, newInstance(p));\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp pow(final int n) {\n        return DfpMath.pow(this, n);\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp pow(final Dfp e) {\n        return DfpMath.pow(this, e);\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp exp() {\n        return DfpMath.exp(this);\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp expm1() {\n        return DfpMath.exp(this).subtract(getOne());\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp log() {\n        return DfpMath.log(this);\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp log1p() {\n        return DfpMath.log(this.add(getOne()));\n    }\n\n//  TODO: deactivate this implementation (and return type) in 4.0\n    /** Get the exponent of the greatest power of 10 that is less than or equal to abs(this).\n     *  @return integer base 10 logarithm\n     *  @deprecated as of 3.2, replaced by {@link #intLog10()}, in 4.0 the return type\n     *  will be changed to Dfp\n     */\n    @Deprecated\n    public int log10()  {\n        return intLog10();\n    }\n\n//    TODO: activate this implementation (and return type) in 4.0\n//    /** {@inheritDoc}\n//     * @since 3.2\n//     */\n//    public Dfp log10() {\n//        return DfpMath.log(this).divide(DfpMath.log(newInstance(10)));\n//    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp cos() {\n        return DfpMath.cos(this);\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp sin() {\n        return DfpMath.sin(this);\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp tan() {\n        return DfpMath.tan(this);\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp acos() {\n        return DfpMath.acos(this);\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp asin() {\n        return DfpMath.asin(this);\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp atan() {\n        return DfpMath.atan(this);\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp atan2(final Dfp x)\n        throws DimensionMismatchException {\n\n        // compute r = sqrt(x^2+y^2)\n        final Dfp r = x.multiply(x).add(multiply(this)).sqrt();\n\n        if (x.sign >= 0) {\n\n            // compute atan2(y, x) = 2 atan(y / (r + x))\n            return getTwo().multiply(divide(r.add(x)).atan());\n\n        } else {\n\n            // compute atan2(y, x) = +/- pi - 2 atan(y / (r - x))\n            final Dfp tmp = getTwo().multiply(divide(r.subtract(x)).atan());\n            final Dfp pmPi = newInstance((tmp.sign <= 0) ? -FastMath.PI : FastMath.PI);\n            return pmPi.subtract(tmp);\n\n        }\n\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp cosh() {\n        return DfpMath.exp(this).add(DfpMath.exp(negate())).divide(2);\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp sinh() {\n        return DfpMath.exp(this).subtract(DfpMath.exp(negate())).divide(2);\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp tanh() {\n        final Dfp ePlus  = DfpMath.exp(this);\n        final Dfp eMinus = DfpMath.exp(negate());\n        return ePlus.subtract(eMinus).divide(ePlus.add(eMinus));\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp acosh() {\n        return multiply(this).subtract(getOne()).sqrt().add(this).log();\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp asinh() {\n        return multiply(this).add(getOne()).sqrt().add(this).log();\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp atanh() {\n        return getOne().add(this).divide(getOne().subtract(this)).log().divide(2);\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp linearCombination(final Dfp[] a, final Dfp[] b)\n        throws DimensionMismatchException {\n        if (a.length != b.length) {\n            throw new DimensionMismatchException(a.length, b.length);\n        }\n        Dfp r = getZero();\n        for (int i = 0; i < a.length; ++i) {\n            r = r.add(a[i].multiply(b[i]));\n        }\n        return r;\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp linearCombination(final double[] a, final Dfp[] b)\n        throws DimensionMismatchException {\n        if (a.length != b.length) {\n            throw new DimensionMismatchException(a.length, b.length);\n        }\n        Dfp r = getZero();\n        for (int i = 0; i < a.length; ++i) {\n            r = r.add(b[i].multiply(a[i]));\n        }\n        return r;\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp linearCombination(final Dfp a1, final Dfp b1, final Dfp a2, final Dfp b2) {\n        return a1.multiply(b1).add(a2.multiply(b2));\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp linearCombination(final double a1, final Dfp b1, final double a2, final Dfp b2) {\n        return b1.multiply(a1).add(b2.multiply(a2));\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp linearCombination(final Dfp a1, final Dfp b1,\n                                 final Dfp a2, final Dfp b2,\n                                 final Dfp a3, final Dfp b3) {\n        return a1.multiply(b1).add(a2.multiply(b2)).add(a3.multiply(b3));\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp linearCombination(final double a1, final Dfp b1,\n                                 final double a2, final Dfp b2,\n                                 final double a3, final Dfp b3) {\n        return b1.multiply(a1).add(b2.multiply(a2)).add(b3.multiply(a3));\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp linearCombination(final Dfp a1, final Dfp b1, final Dfp a2, final Dfp b2,\n                                 final Dfp a3, final Dfp b3, final Dfp a4, final Dfp b4) {\n        return a1.multiply(b1).add(a2.multiply(b2)).add(a3.multiply(b3)).add(a4.multiply(b4));\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp linearCombination(final double a1, final Dfp b1, final double a2, final Dfp b2,\n                                 final double a3, final Dfp b3, final double a4, final Dfp b4) {\n        return b1.multiply(a1).add(b2.multiply(a2)).add(b3.multiply(a3)).add(b4.multiply(a4));\n    }\n\n}\n",
  "tokensGeneralGrammar" : [ "null", "true", "false", ",", ".", ":", ";", "?", "(", ")", "jdVar", "stream", "Arrays", "allMatch", "noneMatch", "anyMatch", "~", ">>", "<<", ">>>", "|", "&", "^", "+", "-", "/", "*", "%", "&&", "||", ">=", "<=", ">", "<", "==", "!=", "instanceof", "class", "methodResultID", "this" ],
  "tokensGeneralValuesGlobalDictionary" : [ [ "0", "int" ], [ "1", "int" ], [ "-1", "int" ], [ "0.0", "double" ], [ "1.0", "double" ], [ "-1.0", "double" ], [ "\"\"", "String" ], [ "\" \"", "String" ] ],
  "tokensProjectClasses" : [ [ "RealFieldElement", "org.apache.commons.math3" ], [ "Primes", "org.apache.commons.math3.primes" ], [ "SmallPrimes", "org.apache.commons.math3.primes" ], [ "PollardRho", "org.apache.commons.math3.primes" ], [ "CurveFitter", "org.apache.commons.math3.fitting" ], [ "GaussianCurveFitter", "org.apache.commons.math3.fitting" ], [ "SimpleCurveFitter", "org.apache.commons.math3.fitting" ], [ "PolynomialFitter", "org.apache.commons.math3.fitting" ], [ "HarmonicFitter", "org.apache.commons.math3.fitting" ], [ "WeightedObservedPoint", "org.apache.commons.math3.fitting" ], [ "ParameterValidator", "org.apache.commons.math3.fitting.leastsquares" ], [ "LevenbergMarquardtOptimizer", "org.apache.commons.math3.fitting.leastsquares" ], [ "EvaluationRmsChecker", "org.apache.commons.math3.fitting.leastsquares" ], [ "OptimumImpl", "org.apache.commons.math3.fitting.leastsquares" ], [ "LeastSquaresAdapter", "org.apache.commons.math3.fitting.leastsquares" ], [ "DenseWeightedEvaluation", "org.apache.commons.math3.fitting.leastsquares" ], [ "LeastSquaresOptimizer", "org.apache.commons.math3.fitting.leastsquares" ], [ "AbstractEvaluation", "org.apache.commons.math3.fitting.leastsquares" ], [ "GaussNewtonOptimizer", "org.apache.commons.math3.fitting.leastsquares" ], [ "LeastSquaresFactory", "org.apache.commons.math3.fitting.leastsquares" ], [ "ValueAndJacobianFunction", "org.apache.commons.math3.fitting.leastsquares" ], [ "MultivariateJacobianFunction", "org.apache.commons.math3.fitting.leastsquares" ], [ "LeastSquaresBuilder", "org.apache.commons.math3.fitting.leastsquares" ], [ "LeastSquaresProblem", "org.apache.commons.math3.fitting.leastsquares" ], [ "WeightedObservedPoints", "org.apache.commons.math3.fitting" ], [ "GaussianFitter", "org.apache.commons.math3.fitting" ], [ "AbstractCurveFitter", "org.apache.commons.math3.fitting" ], [ "HarmonicCurveFitter", "org.apache.commons.math3.fitting" ], [ "PolynomialCurveFitter", "org.apache.commons.math3.fitting" ], [ "UnivariateMatrixFunction", "org.apache.commons.math3.analysis" ], [ "FunctionUtils", "org.apache.commons.math3.analysis" ], [ "DifferentiableUnivariateMatrixFunction", "org.apache.commons.math3.analysis" ], [ "IterativeLegendreGaussIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "LegendreGaussIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "MidPointIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "RombergIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "SimpsonIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "BaseRuleFactory", "org.apache.commons.math3.analysis.integration.gauss" ], [ "HermiteRuleFactory", "org.apache.commons.math3.analysis.integration.gauss" ], [ "GaussIntegratorFactory", "org.apache.commons.math3.analysis.integration.gauss" ], [ "LegendreRuleFactory", "org.apache.commons.math3.analysis.integration.gauss" ], [ "LegendreHighPrecisionRuleFactory", "org.apache.commons.math3.analysis.integration.gauss" ], [ "SymmetricGaussIntegrator", "org.apache.commons.math3.analysis.integration.gauss" ], [ "GaussIntegrator", "org.apache.commons.math3.analysis.integration.gauss" ], [ "BaseAbstractUnivariateIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "UnivariateIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "TrapezoidIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "BivariateFunction", "org.apache.commons.math3.analysis" ], [ "DifferentiableUnivariateFunction", "org.apache.commons.math3.analysis" ], [ "DifferentiableUnivariateVectorFunction", "org.apache.commons.math3.analysis" ], [ "UnivariateVectorFunction", "org.apache.commons.math3.analysis" ], [ "AbstractDifferentiableUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "AbstractUnivariateDifferentiableSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BaseUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "PegasusSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BracketedUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "UnivariateSolverUtils", "org.apache.commons.math3.analysis.solvers" ], [ "FieldBracketingNthOrderBrentSolver", "org.apache.commons.math3.analysis.solvers" ], [ "NewtonRaphsonSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BaseSecantSolver", "org.apache.commons.math3.analysis.solvers" ], [ "SecantSolver", "org.apache.commons.math3.analysis.solvers" ], [ "DifferentiableUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "UnivariateDifferentiableSolver", "org.apache.commons.math3.analysis.solvers" ], [ "MullerSolver2", "org.apache.commons.math3.analysis.solvers" ], [ "AbstractPolynomialSolver", "org.apache.commons.math3.analysis.solvers" ], [ "MullerSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BaseAbstractUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BrentSolver", "org.apache.commons.math3.analysis.solvers" ], [ "LaguerreSolver", "org.apache.commons.math3.analysis.solvers" ], [ "IllinoisSolver", "org.apache.commons.math3.analysis.solvers" ], [ "PolynomialSolver", "org.apache.commons.math3.analysis.solvers" ], [ "RegulaFalsiSolver", "org.apache.commons.math3.analysis.solvers" ], [ "AllowedSolution", "org.apache.commons.math3.analysis.solvers" ], [ "NewtonSolver", "org.apache.commons.math3.analysis.solvers" ], [ "RiddersSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BisectionSolver", "org.apache.commons.math3.analysis.solvers" ], [ "AbstractUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "UnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BracketingNthOrderBrentSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BracketedRealFieldUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "Asin", "org.apache.commons.math3.analysis.function" ], [ "Cosh", "org.apache.commons.math3.analysis.function" ], [ "Multiply", "org.apache.commons.math3.analysis.function" ], [ "Atan", "org.apache.commons.math3.analysis.function" ], [ "Asinh", "org.apache.commons.math3.analysis.function" ], [ "Rint", "org.apache.commons.math3.analysis.function" ], [ "Cos", "org.apache.commons.math3.analysis.function" ], [ "StepFunction", "org.apache.commons.math3.analysis.function" ], [ "Add", "org.apache.commons.math3.analysis.function" ], [ "Sqrt", "org.apache.commons.math3.analysis.function" ], [ "Inverse", "org.apache.commons.math3.analysis.function" ], [ "Gaussian", "org.apache.commons.math3.analysis.function" ], [ "Pow", "org.apache.commons.math3.analysis.function" ], [ "Exp", "org.apache.commons.math3.analysis.function" ], [ "Tanh", "org.apache.commons.math3.analysis.function" ], [ "Cbrt", "org.apache.commons.math3.analysis.function" ], [ "Log1p", "org.apache.commons.math3.analysis.function" ], [ "Constant", "org.apache.commons.math3.analysis.function" ], [ "Identity", "org.apache.commons.math3.analysis.function" ], [ "Signum", "org.apache.commons.math3.analysis.function" ], [ "Logit", "org.apache.commons.math3.analysis.function" ], [ "Ceil", "org.apache.commons.math3.analysis.function" ], [ "Subtract", "org.apache.commons.math3.analysis.function" ], [ "Sinh", "org.apache.commons.math3.analysis.function" ], [ "Max", "org.apache.commons.math3.analysis.function" ], [ "Acosh", "org.apache.commons.math3.analysis.function" ], [ "Min", "org.apache.commons.math3.analysis.function" ], [ "Expm1", "org.apache.commons.math3.analysis.function" ], [ "Abs", "org.apache.commons.math3.analysis.function" ], [ "Divide", "org.apache.commons.math3.analysis.function" ], [ "Log", "org.apache.commons.math3.analysis.function" ], [ "Ulp", "org.apache.commons.math3.analysis.function" ], [ "Log10", "org.apache.commons.math3.analysis.function" ], [ "Power", "org.apache.commons.math3.analysis.function" ], [ "Minus", "org.apache.commons.math3.analysis.function" ], [ "Atan2", "org.apache.commons.math3.analysis.function" ], [ "Logistic", "org.apache.commons.math3.analysis.function" ], [ "Acos", "org.apache.commons.math3.analysis.function" ], [ "Floor", "org.apache.commons.math3.analysis.function" ], [ "Sigmoid", "org.apache.commons.math3.analysis.function" ], [ "Sinc", "org.apache.commons.math3.analysis.function" ], [ "Atanh", "org.apache.commons.math3.analysis.function" ], [ "HarmonicOscillator", "org.apache.commons.math3.analysis.function" ], [ "Tan", "org.apache.commons.math3.analysis.function" ], [ "Sin", "org.apache.commons.math3.analysis.function" ], [ "MultivariateFunction", "org.apache.commons.math3.analysis" ], [ "DifferentiableMultivariateFunction", "org.apache.commons.math3.analysis" ], [ "UnivariateFunction", "org.apache.commons.math3.analysis" ], [ "TrivariateFunction", "org.apache.commons.math3.analysis" ], [ "MultivariateMatrixFunction", "org.apache.commons.math3.analysis" ], [ "ParametricUnivariateFunction", "org.apache.commons.math3.analysis" ], [ "UnivariateDifferentiableVectorFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "UnivariateDifferentiableMatrixFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "DSCompiler", "org.apache.commons.math3.analysis.differentiation" ], [ "SparseGradient", "org.apache.commons.math3.analysis.differentiation" ], [ "UnivariateFunctionDifferentiator", "org.apache.commons.math3.analysis.differentiation" ], [ "UnivariateMatrixFunctionDifferentiator", "org.apache.commons.math3.analysis.differentiation" ], [ "MultivariateDifferentiableFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "JacobianFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "GradientFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "DerivativeStructure", "org.apache.commons.math3.analysis.differentiation" ], [ "UnivariateVectorFunctionDifferentiator", "org.apache.commons.math3.analysis.differentiation" ], [ "FiniteDifferencesDifferentiator", "org.apache.commons.math3.analysis.differentiation" ], [ "MultivariateDifferentiableVectorFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "UnivariateDifferentiableFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "MultivariateVectorFunction", "org.apache.commons.math3.analysis" ], [ "DifferentiableMultivariateVectorFunction", "org.apache.commons.math3.analysis" ], [ "PolynomialFunctionNewtonForm", "org.apache.commons.math3.analysis.polynomials" ], [ "PolynomialFunctionLagrangeForm", "org.apache.commons.math3.analysis.polynomials" ], [ "PolynomialSplineFunction", "org.apache.commons.math3.analysis.polynomials" ], [ "PolynomialsUtils", "org.apache.commons.math3.analysis.polynomials" ], [ "PolynomialFunction", "org.apache.commons.math3.analysis.polynomials" ], [ "RealFieldUnivariateFunction", "org.apache.commons.math3.analysis" ], [ "TricubicInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "BicubicSplineInterpolatingFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "BicubicSplineFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "LoessInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "DividedDifferenceInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "HermiteInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "TricubicInterpolatingFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "TricubicFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "TrivariateGridInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "NevilleInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "MicrosphereProjectionInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "AkimaSplineInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "MultivariateInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "BicubicSplineInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "TricubicSplineInterpolatingFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "TricubicSplineFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "FieldHermiteInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "InterpolatingMicrosphere", "org.apache.commons.math3.analysis.interpolation" ], [ "LinearInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "BivariateGridInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "UnivariatePeriodicInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "BicubicInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "UnivariateInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "SmoothingPolynomialBicubicSplineInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "PiecewiseBicubicSplineInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "BicubicInterpolatingFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "BicubicFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "SplineInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "TricubicSplineInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "InterpolatingMicrosphere2D", "org.apache.commons.math3.analysis.interpolation" ], [ "PiecewiseBicubicSplineInterpolatingFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "MicrosphereInterpolatingFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "MicrosphereInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "Precision", "org.apache.commons.math3.util" ], [ "MultidimensionalCounter", "org.apache.commons.math3.util" ], [ "DoubleArray", "org.apache.commons.math3.util" ], [ "Incrementor", "org.apache.commons.math3.util" ], [ "OpenIntToDoubleHashMap", "org.apache.commons.math3.util" ], [ "OpenIntToFieldHashMap", "org.apache.commons.math3.util" ], [ "MathArrays", "org.apache.commons.math3.util" ], [ "Pair", "org.apache.commons.math3.util" ], [ "FastMathCalc", "org.apache.commons.math3.util" ], [ "FastMath", "org.apache.commons.math3.util" ], [ "ResizableDoubleArray", "org.apache.commons.math3.util" ], [ "BigRealField", "org.apache.commons.math3.util" ], [ "Decimal64Field", "org.apache.commons.math3.util" ], [ "Combinations", "org.apache.commons.math3.util" ], [ "MathUtils", "org.apache.commons.math3.util" ], [ "NumberTransformer", "org.apache.commons.math3.util" ], [ "ContinuedFraction", "org.apache.commons.math3.util" ], [ "RandomPivotingStrategy", "org.apache.commons.math3.util" ], [ "IterationManager", "org.apache.commons.math3.util" ], [ "CompositeFormat", "org.apache.commons.math3.util" ], [ "KthSelector", "org.apache.commons.math3.util" ], [ "IterationEvent", "org.apache.commons.math3.util" ], [ "TransformerMap", "org.apache.commons.math3.util" ], [ "IntegerSequence", "org.apache.commons.math3.util" ], [ "FastMathLiteralArrays", "org.apache.commons.math3.util" ], [ "CombinatoricsUtils", "org.apache.commons.math3.util" ], [ "IterationListener", "org.apache.commons.math3.util" ], [ "PivotingStrategyInterface", "org.apache.commons.math3.util" ], [ "CentralPivotingStrategy", "org.apache.commons.math3.util" ], [ "Decimal64", "org.apache.commons.math3.util" ], [ "DefaultTransformer", "org.apache.commons.math3.util" ], [ "BigReal", "org.apache.commons.math3.util" ], [ "ArithmeticUtils", "org.apache.commons.math3.util" ], [ "MedianOf3PivotingStrategy", "org.apache.commons.math3.util" ], [ "ComplexFormat", "org.apache.commons.math3.complex" ], [ "ComplexField", "org.apache.commons.math3.complex" ], [ "RootsOfUnity", "org.apache.commons.math3.complex" ], [ "Quaternion", "org.apache.commons.math3.complex" ], [ "Complex", "org.apache.commons.math3.complex" ], [ "ComplexUtils", "org.apache.commons.math3.complex" ], [ "DifferentiableMultivariateVectorOptimizer", "org.apache.commons.math3.optimization" ], [ "LeastSquaresConverter", "org.apache.commons.math3.optimization" ], [ "BaseMultivariateSimpleBoundsOptimizer", "org.apache.commons.math3.optimization" ], [ "PointValuePair", "org.apache.commons.math3.optimization" ], [ "DifferentiableMultivariateOptimizer", "org.apache.commons.math3.optimization" ], [ "SimpleValueChecker", "org.apache.commons.math3.optimization" ], [ "CurveFitter", "org.apache.commons.math3.optimization.fitting" ], [ "PolynomialFitter", "org.apache.commons.math3.optimization.fitting" ], [ "HarmonicFitter", "org.apache.commons.math3.optimization.fitting" ], [ "WeightedObservedPoint", "org.apache.commons.math3.optimization.fitting" ], [ "GaussianFitter", "org.apache.commons.math3.optimization.fitting" ], [ "AbstractConvergenceChecker", "org.apache.commons.math3.optimization" ], [ "AbstractSimplex", "org.apache.commons.math3.optimization.direct" ], [ "SimplexOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "BOBYQAOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "NelderMeadSimplex", "org.apache.commons.math3.optimization.direct" ], [ "MultivariateFunctionMappingAdapter", "org.apache.commons.math3.optimization.direct" ], [ "BaseAbstractMultivariateSimpleBoundsOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "BaseAbstractMultivariateVectorOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "CMAESOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "MultivariateFunctionPenaltyAdapter", "org.apache.commons.math3.optimization.direct" ], [ "BaseAbstractMultivariateOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "PowellOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "MultiDirectionalSimplex", "org.apache.commons.math3.optimization.direct" ], [ "InitialGuess", "org.apache.commons.math3.optimization" ], [ "Preconditioner", "org.apache.commons.math3.optimization.general" ], [ "LevenbergMarquardtOptimizer", "org.apache.commons.math3.optimization.general" ], [ "AbstractLeastSquaresOptimizer", "org.apache.commons.math3.optimization.general" ], [ "AbstractDifferentiableOptimizer", "org.apache.commons.math3.optimization.general" ], [ "GaussNewtonOptimizer", "org.apache.commons.math3.optimization.general" ], [ "AbstractScalarDifferentiableOptimizer", "org.apache.commons.math3.optimization.general" ], [ "NonLinearConjugateGradientOptimizer", "org.apache.commons.math3.optimization.general" ], [ "ConjugateGradientFormula", "org.apache.commons.math3.optimization.general" ], [ "BaseMultivariateVectorMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "NoFeasibleSolutionException", "org.apache.commons.math3.optimization.linear" ], [ "AbstractLinearOptimizer", "org.apache.commons.math3.optimization.linear" ], [ "LinearConstraint", "org.apache.commons.math3.optimization.linear" ], [ "SimplexSolver", "org.apache.commons.math3.optimization.linear" ], [ "LinearOptimizer", "org.apache.commons.math3.optimization.linear" ], [ "UnboundedSolutionException", "org.apache.commons.math3.optimization.linear" ], [ "SimplexTableau", "org.apache.commons.math3.optimization.linear" ], [ "LinearObjectiveFunction", "org.apache.commons.math3.optimization.linear" ], [ "Relationship", "org.apache.commons.math3.optimization.linear" ], [ "SimpleBounds", "org.apache.commons.math3.optimization" ], [ "PointVectorValuePair", "org.apache.commons.math3.optimization" ], [ "MultivariateDifferentiableVectorMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "DifferentiableMultivariateMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "SimplePointChecker", "org.apache.commons.math3.optimization" ], [ "SimpleVectorValueChecker", "org.apache.commons.math3.optimization" ], [ "BaseOptimizer", "org.apache.commons.math3.optimization" ], [ "MultivariateOptimizer", "org.apache.commons.math3.optimization" ], [ "GoalType", "org.apache.commons.math3.optimization" ], [ "BrentOptimizer", "org.apache.commons.math3.optimization.univariate" ], [ "UnivariateMultiStartOptimizer", "org.apache.commons.math3.optimization.univariate" ], [ "BaseUnivariateOptimizer", "org.apache.commons.math3.optimization.univariate" ], [ "BaseAbstractUnivariateOptimizer", "org.apache.commons.math3.optimization.univariate" ], [ "SimpleUnivariateValueChecker", "org.apache.commons.math3.optimization.univariate" ], [ "UnivariatePointValuePair", "org.apache.commons.math3.optimization.univariate" ], [ "BracketFinder", "org.apache.commons.math3.optimization.univariate" ], [ "UnivariateOptimizer", "org.apache.commons.math3.optimization.univariate" ], [ "BaseMultivariateOptimizer", "org.apache.commons.math3.optimization" ], [ "ConvergenceChecker", "org.apache.commons.math3.optimization" ], [ "BaseMultivariateMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "MultivariateDifferentiableOptimizer", "org.apache.commons.math3.optimization" ], [ "MultivariateDifferentiableVectorOptimizer", "org.apache.commons.math3.optimization" ], [ "Target", "org.apache.commons.math3.optimization" ], [ "Weight", "org.apache.commons.math3.optimization" ], [ "MultivariateMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "OptimizationData", "org.apache.commons.math3.optimization" ], [ "BaseMultivariateVectorOptimizer", "org.apache.commons.math3.optimization" ], [ "MultivariateDifferentiableMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "DifferentiableMultivariateVectorMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "NonSymmetricMatrixException", "org.apache.commons.math3.linear" ], [ "FieldVectorPreservingVisitor", "org.apache.commons.math3.linear" ], [ "FieldVector", "org.apache.commons.math3.linear" ], [ "AnyMatrix", "org.apache.commons.math3.linear" ], [ "NonSquareOperatorException", "org.apache.commons.math3.linear" ], [ "SingularValueDecomposition", "org.apache.commons.math3.linear" ], [ "EigenDecomposition", "org.apache.commons.math3.linear" ], [ "RealMatrixChangingVisitor", "org.apache.commons.math3.linear" ], [ "FieldLUDecomposition", "org.apache.commons.math3.linear" ], [ "NonPositiveDefiniteMatrixException", "org.apache.commons.math3.linear" ], [ "RealMatrixFormat", "org.apache.commons.math3.linear" ], [ "MatrixUtils", "org.apache.commons.math3.linear" ], [ "OpenMapRealVector", "org.apache.commons.math3.linear" ], [ "RealMatrixPreservingVisitor", "org.apache.commons.math3.linear" ], [ "SingularMatrixException", "org.apache.commons.math3.linear" ], [ "DefaultFieldMatrixPreservingVisitor", "org.apache.commons.math3.linear" ], [ "FieldVectorChangingVisitor", "org.apache.commons.math3.linear" ], [ "TriDiagonalTransformer", "org.apache.commons.math3.linear" ], [ "DefaultRealMatrixChangingVisitor", "org.apache.commons.math3.linear" ], [ "AbstractRealMatrix", "org.apache.commons.math3.linear" ], [ "Array2DRowRealMatrix", "org.apache.commons.math3.linear" ], [ "BlockFieldMatrix", "org.apache.commons.math3.linear" ], [ "Array2DRowFieldMatrix", "org.apache.commons.math3.linear" ], [ "FieldMatrix", "org.apache.commons.math3.linear" ], [ "IterativeLinearSolver", "org.apache.commons.math3.linear" ], [ "ArrayRealVector", "org.apache.commons.math3.linear" ], [ "MatrixDimensionMismatchException", "org.apache.commons.math3.linear" ], [ "ArrayFieldVector", "org.apache.commons.math3.linear" ], [ "DecompositionSolver", "org.apache.commons.math3.linear" ], [ "LUDecomposition", "org.apache.commons.math3.linear" ], [ "ConjugateGradient", "org.apache.commons.math3.linear" ], [ "NonPositiveDefiniteOperatorException", "org.apache.commons.math3.linear" ], [ "OpenMapRealMatrix", "org.apache.commons.math3.linear" ], [ "NonSelfAdjointOperatorException", "org.apache.commons.math3.linear" ], [ "BiDiagonalTransformer", "org.apache.commons.math3.linear" ], [ "CholeskyDecomposition", "org.apache.commons.math3.linear" ], [ "FieldDecompositionSolver", "org.apache.commons.math3.linear" ], [ "RealVectorPreservingVisitor", "org.apache.commons.math3.linear" ], [ "SingularOperatorException", "org.apache.commons.math3.linear" ], [ "BlockRealMatrix", "org.apache.commons.math3.linear" ], [ "SparseFieldMatrix", "org.apache.commons.math3.linear" ], [ "NonSquareMatrixException", "org.apache.commons.math3.linear" ], [ "SparseRealMatrix", "org.apache.commons.math3.linear" ], [ "RealVector", "org.apache.commons.math3.linear" ], [ "FieldMatrixPreservingVisitor", "org.apache.commons.math3.linear" ], [ "PreconditionedIterativeLinearSolver", "org.apache.commons.math3.linear" ], [ "QRDecomposition", "org.apache.commons.math3.linear" ], [ "SymmLQ", "org.apache.commons.math3.linear" ], [ "SparseFieldVector", "org.apache.commons.math3.linear" ], [ "RealVectorFormat", "org.apache.commons.math3.linear" ], [ "IllConditionedOperatorException", "org.apache.commons.math3.linear" ], [ "DefaultIterativeLinearSolverEvent", "org.apache.commons.math3.linear" ], [ "DefaultRealMatrixPreservingVisitor", "org.apache.commons.math3.linear" ], [ "IterativeLinearSolverEvent", "org.apache.commons.math3.linear" ], [ "DiagonalMatrix", "org.apache.commons.math3.linear" ], [ "HessenbergTransformer", "org.apache.commons.math3.linear" ], [ "RectangularCholeskyDecomposition", "org.apache.commons.math3.linear" ], [ "FieldMatrixChangingVisitor", "org.apache.commons.math3.linear" ], [ "DefaultFieldMatrixChangingVisitor", "org.apache.commons.math3.linear" ], [ "JacobiPreconditioner", "org.apache.commons.math3.linear" ], [ "RealLinearOperator", "org.apache.commons.math3.linear" ], [ "RRQRDecomposition", "org.apache.commons.math3.linear" ], [ "AbstractFieldMatrix", "org.apache.commons.math3.linear" ], [ "RealMatrix", "org.apache.commons.math3.linear" ], [ "SchurTransformer", "org.apache.commons.math3.linear" ], [ "RealVectorChangingVisitor", "org.apache.commons.math3.linear" ], [ "SparseRealVector", "org.apache.commons.math3.linear" ], [ "CauchyDistribution", "org.apache.commons.math3.distribution" ], [ "LaplaceDistribution", "org.apache.commons.math3.distribution" ], [ "AbstractRealDistribution", "org.apache.commons.math3.distribution" ], [ "HypergeometricDistribution", "org.apache.commons.math3.distribution" ], [ "TDistribution", "org.apache.commons.math3.distribution" ], [ "ChiSquaredDistribution", "org.apache.commons.math3.distribution" ], [ "TriangularDistribution", "org.apache.commons.math3.distribution" ], [ "MultivariateNormalMixtureExpectationMaximization", "org.apache.commons.math3.distribution.fitting" ], [ "BetaDistribution", "org.apache.commons.math3.distribution" ], [ "RealDistribution", "org.apache.commons.math3.distribution" ], [ "NormalDistribution", "org.apache.commons.math3.distribution" ], [ "SaddlePointExpansion", "org.apache.commons.math3.distribution" ], [ "MixtureMultivariateNormalDistribution", "org.apache.commons.math3.distribution" ], [ "UniformRealDistribution", "org.apache.commons.math3.distribution" ], [ "GumbelDistribution", "org.apache.commons.math3.distribution" ], [ "ZipfDistribution", "org.apache.commons.math3.distribution" ], [ "BinomialDistribution", "org.apache.commons.math3.distribution" ], [ "EnumeratedIntegerDistribution", "org.apache.commons.math3.distribution" ], [ "IntegerDistribution", "org.apache.commons.math3.distribution" ], [ "WeibullDistribution", "org.apache.commons.math3.distribution" ], [ "MultivariateRealDistribution", "org.apache.commons.math3.distribution" ], [ "NakagamiDistribution", "org.apache.commons.math3.distribution" ], [ "EnumeratedDistribution", "org.apache.commons.math3.distribution" ], [ "ConstantRealDistribution", "org.apache.commons.math3.distribution" ], [ "MultivariateNormalDistribution", "org.apache.commons.math3.distribution" ], [ "ExponentialDistribution", "org.apache.commons.math3.distribution" ], [ "UniformIntegerDistribution", "org.apache.commons.math3.distribution" ], [ "LogNormalDistribution", "org.apache.commons.math3.distribution" ], [ "PascalDistribution", "org.apache.commons.math3.distribution" ], [ "ParetoDistribution", "org.apache.commons.math3.distribution" ], [ "FDistribution", "org.apache.commons.math3.distribution" ], [ "GeometricDistribution", "org.apache.commons.math3.distribution" ], [ "AbstractMultivariateRealDistribution", "org.apache.commons.math3.distribution" ], [ "AbstractIntegerDistribution", "org.apache.commons.math3.distribution" ], [ "PoissonDistribution", "org.apache.commons.math3.distribution" ], [ "KolmogorovSmirnovDistribution", "org.apache.commons.math3.distribution" ], [ "MixtureMultivariateRealDistribution", "org.apache.commons.math3.distribution" ], [ "GammaDistribution", "org.apache.commons.math3.distribution" ], [ "EnumeratedRealDistribution", "org.apache.commons.math3.distribution" ], [ "LogisticDistribution", "org.apache.commons.math3.distribution" ], [ "LevyDistribution", "org.apache.commons.math3.distribution" ], [ "PointValuePair", "org.apache.commons.math3.optim" ], [ "SimpleValueChecker", "org.apache.commons.math3.optim" ], [ "AbstractConvergenceChecker", "org.apache.commons.math3.optim" ], [ "InitialGuess", "org.apache.commons.math3.optim" ], [ "MaxIter", "org.apache.commons.math3.optim" ], [ "NoFeasibleSolutionException", "org.apache.commons.math3.optim.linear" ], [ "LinearConstraintSet", "org.apache.commons.math3.optim.linear" ], [ "LinearConstraint", "org.apache.commons.math3.optim.linear" ], [ "PivotSelectionRule", "org.apache.commons.math3.optim.linear" ], [ "SimplexSolver", "org.apache.commons.math3.optim.linear" ], [ "LinearOptimizer", "org.apache.commons.math3.optim.linear" ], [ "UnboundedSolutionException", "org.apache.commons.math3.optim.linear" ], [ "SimplexTableau", "org.apache.commons.math3.optim.linear" ], [ "SolutionCallback", "org.apache.commons.math3.optim.linear" ], [ "LinearObjectiveFunction", "org.apache.commons.math3.optim.linear" ], [ "NonNegativeConstraint", "org.apache.commons.math3.optim.linear" ], [ "Relationship", "org.apache.commons.math3.optim.linear" ], [ "AbstractOptimizationProblem", "org.apache.commons.math3.optim" ], [ "SimpleBounds", "org.apache.commons.math3.optim" ], [ "PointVectorValuePair", "org.apache.commons.math3.optim" ], [ "SimplePointChecker", "org.apache.commons.math3.optim" ], [ "SimpleVectorValueChecker", "org.apache.commons.math3.optim" ], [ "BaseOptimizer", "org.apache.commons.math3.optim" ], [ "BaseMultiStartMultivariateOptimizer", "org.apache.commons.math3.optim" ], [ "MultiStartUnivariateOptimizer", "org.apache.commons.math3.optim.univariate" ], [ "BrentOptimizer", "org.apache.commons.math3.optim.univariate" ], [ "UnivariateObjectiveFunction", "org.apache.commons.math3.optim.univariate" ], [ "SimpleUnivariateValueChecker", "org.apache.commons.math3.optim.univariate" ], [ "SearchInterval", "org.apache.commons.math3.optim.univariate" ], [ "UnivariatePointValuePair", "org.apache.commons.math3.optim.univariate" ], [ "BracketFinder", "org.apache.commons.math3.optim.univariate" ], [ "UnivariateOptimizer", "org.apache.commons.math3.optim.univariate" ], [ "BaseMultivariateOptimizer", "org.apache.commons.math3.optim" ], [ "ConvergenceChecker", "org.apache.commons.math3.optim" ], [ "OptimizationProblem", "org.apache.commons.math3.optim" ], [ "MaxEval", "org.apache.commons.math3.optim" ], [ "OptimizationData", "org.apache.commons.math3.optim" ], [ "Preconditioner", "org.apache.commons.math3.optim.nonlinear.scalar.gradient" ], [ "NonLinearConjugateGradientOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar.gradient" ], [ "LeastSquaresConverter", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "GradientMultivariateOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "MultivariateFunctionMappingAdapter", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "LineSearch", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "ObjectiveFunction", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "MultivariateOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "GoalType", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "AbstractSimplex", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "SimplexOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "BOBYQAOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "NelderMeadSimplex", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "CMAESOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "PowellOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "MultiDirectionalSimplex", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "MultiStartMultivariateOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "MultivariateFunctionPenaltyAdapter", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "ObjectiveFunctionGradient", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "ModelFunction", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "LevenbergMarquardtOptimizer", "org.apache.commons.math3.optim.nonlinear.vector.jacobian" ], [ "AbstractLeastSquaresOptimizer", "org.apache.commons.math3.optim.nonlinear.vector.jacobian" ], [ "GaussNewtonOptimizer", "org.apache.commons.math3.optim.nonlinear.vector.jacobian" ], [ "ModelFunctionJacobian", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "JacobianMultivariateVectorOptimizer", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "MultivariateVectorOptimizer", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "Target", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "Weight", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "MultiStartMultivariateVectorOptimizer", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "Erf", "org.apache.commons.math3.special" ], [ "BesselJ", "org.apache.commons.math3.special" ], [ "Gamma", "org.apache.commons.math3.special" ], [ "Beta", "org.apache.commons.math3.special" ], [ "FieldODEState", "org.apache.commons.math3.ode" ], [ "FieldODEStateAndDerivative", "org.apache.commons.math3.ode" ], [ "FirstOrderFieldDifferentialEquations", "org.apache.commons.math3.ode" ], [ "MultistepFieldIntegrator", "org.apache.commons.math3.ode" ], [ "ODEIntegrator", "org.apache.commons.math3.ode" ], [ "ParameterConfiguration", "org.apache.commons.math3.ode" ], [ "ContinuousOutputFieldModel", "org.apache.commons.math3.ode" ], [ "FirstOrderConverter", "org.apache.commons.math3.ode" ], [ "ParameterJacobianProvider", "org.apache.commons.math3.ode" ], [ "SecondOrderIntegrator", "org.apache.commons.math3.ode" ], [ "AbstractFieldIntegrator", "org.apache.commons.math3.ode" ], [ "ExpandableStatefulODE", "org.apache.commons.math3.ode" ], [ "MultistepIntegrator", "org.apache.commons.math3.ode" ], [ "Parameterizable", "org.apache.commons.math3.ode" ], [ "JacobianMatrices", "org.apache.commons.math3.ode" ], [ "StepNormalizer", "org.apache.commons.math3.ode.sampling" ], [ "FixedStepHandler", "org.apache.commons.math3.ode.sampling" ], [ "StepHandler", "org.apache.commons.math3.ode.sampling" ], [ "DummyStepHandler", "org.apache.commons.math3.ode.sampling" ], [ "FieldStepInterpolator", "org.apache.commons.math3.ode.sampling" ], [ "StepInterpolator", "org.apache.commons.math3.ode.sampling" ], [ "AbstractFieldStepInterpolator", "org.apache.commons.math3.ode.sampling" ], [ "FieldFixedStepHandler", "org.apache.commons.math3.ode.sampling" ], [ "StepNormalizerMode", "org.apache.commons.math3.ode.sampling" ], [ "AbstractStepInterpolator", "org.apache.commons.math3.ode.sampling" ], [ "FieldStepHandler", "org.apache.commons.math3.ode.sampling" ], [ "StepNormalizerBounds", "org.apache.commons.math3.ode.sampling" ], [ "NordsieckStepInterpolator", "org.apache.commons.math3.ode.sampling" ], [ "FieldStepNormalizer", "org.apache.commons.math3.ode.sampling" ], [ "RungeKuttaFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "GillIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince853FieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "EmbeddedRungeKuttaFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "HighamHall54FieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince54FieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "EulerFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "EulerStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "HighamHall54Integrator", "org.apache.commons.math3.ode.nonstiff" ], [ "MidpointStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "GillStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "LutherFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "GraggBulirschStoerIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "EmbeddedRungeKuttaIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince853StepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "HighamHall54FieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince54FieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "MidpointFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "ThreeEighthesFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "ThreeEighthesIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "ClassicalRungeKuttaIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsNordsieckTransformer", "org.apache.commons.math3.ode.nonstiff" ], [ "MidpointFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "MidpointIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "RungeKuttaStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince54StepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "LutherFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince54Integrator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "GraggBulirschStoerStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "ClassicalRungeKuttaStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "LutherIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdaptiveStepsizeIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "ClassicalRungeKuttaFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "EulerIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince853FieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "FieldButcherArrayProvider", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsMoultonIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "RungeKuttaFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince853Integrator", "org.apache.commons.math3.ode.nonstiff" ], [ "ThreeEighthesStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "EulerFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsMoultonFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "LutherStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "HighamHall54StepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsNordsieckFieldTransformer", "org.apache.commons.math3.ode.nonstiff" ], [ "ThreeEighthesFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "RungeKuttaIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsBashforthFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "ClassicalRungeKuttaFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdaptiveStepsizeFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsBashforthIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "GillFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "GillFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "FieldSecondaryEquations", "org.apache.commons.math3.ode" ], [ "MainStateJacobianProvider", "org.apache.commons.math3.ode" ], [ "SecondaryEquations", "org.apache.commons.math3.ode" ], [ "FirstOrderFieldIntegrator", "org.apache.commons.math3.ode" ], [ "ParameterJacobianWrapper", "org.apache.commons.math3.ode" ], [ "FieldEquationsMapper", "org.apache.commons.math3.ode" ], [ "FieldExpandableODE", "org.apache.commons.math3.ode" ], [ "ParameterizedWrapper", "org.apache.commons.math3.ode" ], [ "AbstractIntegrator", "org.apache.commons.math3.ode" ], [ "SecondOrderDifferentialEquations", "org.apache.commons.math3.ode" ], [ "AbstractParameterizable", "org.apache.commons.math3.ode" ], [ "UnknownParameterException", "org.apache.commons.math3.ode" ], [ "ContinuousOutputModel", "org.apache.commons.math3.ode" ], [ "FirstOrderDifferentialEquations", "org.apache.commons.math3.ode" ], [ "EquationsMapper", "org.apache.commons.math3.ode" ], [ "Transformer", "org.apache.commons.math3.ode.events" ], [ "FieldEventState", "org.apache.commons.math3.ode.events" ], [ "FieldEventHandler", "org.apache.commons.math3.ode.events" ], [ "EventHandler", "org.apache.commons.math3.ode.events" ], [ "Action", "org.apache.commons.math3.ode.events" ], [ "EventState", "org.apache.commons.math3.ode.events" ], [ "EventFilter", "org.apache.commons.math3.ode.events" ], [ "FilterType", "org.apache.commons.math3.ode.events" ], [ "ParameterizedODE", "org.apache.commons.math3.ode" ], [ "FirstOrderIntegrator", "org.apache.commons.math3.ode" ], [ "NaNStrategy", "org.apache.commons.math3.stat.ranking" ], [ "NaturalRanking", "org.apache.commons.math3.stat.ranking" ], [ "TiesStrategy", "org.apache.commons.math3.stat.ranking" ], [ "RankingAlgorithm", "org.apache.commons.math3.stat.ranking" ], [ "StatUtils", "org.apache.commons.math3.stat" ], [ "IntervalUtils", "org.apache.commons.math3.stat.interval" ], [ "AgrestiCoullInterval", "org.apache.commons.math3.stat.interval" ], [ "ConfidenceInterval", "org.apache.commons.math3.stat.interval" ], [ "WilsonScoreInterval", "org.apache.commons.math3.stat.interval" ], [ "ClopperPearsonInterval", "org.apache.commons.math3.stat.interval" ], [ "NormalApproximationInterval", "org.apache.commons.math3.stat.interval" ], [ "BinomialConfidenceInterval", "org.apache.commons.math3.stat.interval" ], [ "StorelessCovariance", "org.apache.commons.math3.stat.correlation" ], [ "StorelessBivariateCovariance", "org.apache.commons.math3.stat.correlation" ], [ "KendallsCorrelation", "org.apache.commons.math3.stat.correlation" ], [ "Covariance", "org.apache.commons.math3.stat.correlation" ], [ "PearsonsCorrelation", "org.apache.commons.math3.stat.correlation" ], [ "SpearmansCorrelation", "org.apache.commons.math3.stat.correlation" ], [ "DBSCANClusterer", "org.apache.commons.math3.stat.clustering" ], [ "EuclideanIntegerPoint", "org.apache.commons.math3.stat.clustering" ], [ "Cluster", "org.apache.commons.math3.stat.clustering" ], [ "EuclideanDoublePoint", "org.apache.commons.math3.stat.clustering" ], [ "Clusterable", "org.apache.commons.math3.stat.clustering" ], [ "KMeansPlusPlusClusterer", "org.apache.commons.math3.stat.clustering" ], [ "TestUtils", "org.apache.commons.math3.stat.inference" ], [ "TTest", "org.apache.commons.math3.stat.inference" ], [ "GTest", "org.apache.commons.math3.stat.inference" ], [ "AlternativeHypothesis", "org.apache.commons.math3.stat.inference" ], [ "MannWhitneyUTest", "org.apache.commons.math3.stat.inference" ], [ "WilcoxonSignedRankTest", "org.apache.commons.math3.stat.inference" ], [ "OneWayAnova", "org.apache.commons.math3.stat.inference" ], [ "ChiSquareTest", "org.apache.commons.math3.stat.inference" ], [ "BinomialTest", "org.apache.commons.math3.stat.inference" ], [ "KolmogorovSmirnovTest", "org.apache.commons.math3.stat.inference" ], [ "AbstractUnivariateStatistic", "org.apache.commons.math3.stat.descriptive" ], [ "SummaryStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "DescriptiveStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "MultivariateSummaryStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "SecondMoment", "org.apache.commons.math3.stat.descriptive.moment" ], [ "Mean", "org.apache.commons.math3.stat.descriptive.moment" ], [ "FourthMoment", "org.apache.commons.math3.stat.descriptive.moment" ], [ "Variance", "org.apache.commons.math3.stat.descriptive.moment" ], [ "Kurtosis", "org.apache.commons.math3.stat.descriptive.moment" ], [ "GeometricMean", "org.apache.commons.math3.stat.descriptive.moment" ], [ "StandardDeviation", "org.apache.commons.math3.stat.descriptive.moment" ], [ "VectorialCovariance", "org.apache.commons.math3.stat.descriptive.moment" ], [ "ThirdMoment", "org.apache.commons.math3.stat.descriptive.moment" ], [ "SemiVariance", "org.apache.commons.math3.stat.descriptive.moment" ], [ "FirstMoment", "org.apache.commons.math3.stat.descriptive.moment" ], [ "Skewness", "org.apache.commons.math3.stat.descriptive.moment" ], [ "VectorialMean", "org.apache.commons.math3.stat.descriptive.moment" ], [ "StatisticalSummaryValues", "org.apache.commons.math3.stat.descriptive" ], [ "StatisticalSummary", "org.apache.commons.math3.stat.descriptive" ], [ "StorelessUnivariateStatistic", "org.apache.commons.math3.stat.descriptive" ], [ "StatisticalMultivariateSummary", "org.apache.commons.math3.stat.descriptive" ], [ "AggregateSummaryStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "WeightedEvaluation", "org.apache.commons.math3.stat.descriptive" ], [ "SynchronizedSummaryStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "UnivariateStatistic", "org.apache.commons.math3.stat.descriptive" ], [ "Percentile", "org.apache.commons.math3.stat.descriptive.rank" ], [ "Max", "org.apache.commons.math3.stat.descriptive.rank" ], [ "PSquarePercentile", "org.apache.commons.math3.stat.descriptive.rank" ], [ "Min", "org.apache.commons.math3.stat.descriptive.rank" ], [ "Median", "org.apache.commons.math3.stat.descriptive.rank" ], [ "SynchronizedDescriptiveStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "SynchronizedMultivariateSummaryStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "SumOfSquares", "org.apache.commons.math3.stat.descriptive.summary" ], [ "Product", "org.apache.commons.math3.stat.descriptive.summary" ], [ "Sum", "org.apache.commons.math3.stat.descriptive.summary" ], [ "SumOfLogs", "org.apache.commons.math3.stat.descriptive.summary" ], [ "AbstractStorelessUnivariateStatistic", "org.apache.commons.math3.stat.descriptive" ], [ "SimpleRegression", "org.apache.commons.math3.stat.regression" ], [ "UpdatingMultipleLinearRegression", "org.apache.commons.math3.stat.regression" ], [ "AbstractMultipleLinearRegression", "org.apache.commons.math3.stat.regression" ], [ "GLSMultipleLinearRegression", "org.apache.commons.math3.stat.regression" ], [ "ModelSpecificationException", "org.apache.commons.math3.stat.regression" ], [ "RegressionResults", "org.apache.commons.math3.stat.regression" ], [ "MillerUpdatingRegression", "org.apache.commons.math3.stat.regression" ], [ "OLSMultipleLinearRegression", "org.apache.commons.math3.stat.regression" ], [ "MultipleLinearRegression", "org.apache.commons.math3.stat.regression" ], [ "Frequency", "org.apache.commons.math3.stat" ], [ "ChebyshevDistance", "org.apache.commons.math3.ml.distance" ], [ "CanberraDistance", "org.apache.commons.math3.ml.distance" ], [ "EuclideanDistance", "org.apache.commons.math3.ml.distance" ], [ "ManhattanDistance", "org.apache.commons.math3.ml.distance" ], [ "EarthMoversDistance", "org.apache.commons.math3.ml.distance" ], [ "DistanceMeasure", "org.apache.commons.math3.ml.distance" ], [ "CentroidCluster", "org.apache.commons.math3.ml.clustering" ], [ "DBSCANClusterer", "org.apache.commons.math3.ml.clustering" ], [ "Cluster", "org.apache.commons.math3.ml.clustering" ], [ "MultiKMeansPlusPlusClusterer", "org.apache.commons.math3.ml.clustering" ], [ "Clusterable", "org.apache.commons.math3.ml.clustering" ], [ "FuzzyKMeansClusterer", "org.apache.commons.math3.ml.clustering" ], [ "KMeansPlusPlusClusterer", "org.apache.commons.math3.ml.clustering" ], [ "SumOfClusterVariances", "org.apache.commons.math3.ml.clustering.evaluation" ], [ "ClusterEvaluator", "org.apache.commons.math3.ml.clustering.evaluation" ], [ "Clusterer", "org.apache.commons.math3.ml.clustering" ], [ "DoublePoint", "org.apache.commons.math3.ml.clustering" ], [ "KohonenTrainingTask", "org.apache.commons.math3.ml.neuralnet.sofm" ], [ "KohonenUpdateAction", "org.apache.commons.math3.ml.neuralnet.sofm" ], [ "QuasiSigmoidDecayFunction", "org.apache.commons.math3.ml.neuralnet.sofm.util" ], [ "ExponentialDecayFunction", "org.apache.commons.math3.ml.neuralnet.sofm.util" ], [ "NeighbourhoodSizeFunctionFactory", "org.apache.commons.math3.ml.neuralnet.sofm" ], [ "LearningFactorFunctionFactory", "org.apache.commons.math3.ml.neuralnet.sofm" ], [ "NeighbourhoodSizeFunction", "org.apache.commons.math3.ml.neuralnet.sofm" ], [ "LearningFactorFunction", "org.apache.commons.math3.ml.neuralnet.sofm" ], [ "MapUtils", "org.apache.commons.math3.ml.neuralnet" ], [ "Network", "org.apache.commons.math3.ml.neuralnet" ], [ "FeatureInitializerFactory", "org.apache.commons.math3.ml.neuralnet" ], [ "Neuron", "org.apache.commons.math3.ml.neuralnet" ], [ "FeatureInitializer", "org.apache.commons.math3.ml.neuralnet" ], [ "NeuronString", "org.apache.commons.math3.ml.neuralnet.oned" ], [ "NeuronSquareMesh2D", "org.apache.commons.math3.ml.neuralnet.twod" ], [ "SmoothedDataHistogram", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "UnifiedDistanceMatrix", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "MapDataVisualization", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "MapVisualization", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "LocationFinder", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "HitHistogram", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "QuantizationError", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "TopographicErrorHistogram", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "SquareNeighbourhood", "org.apache.commons.math3.ml.neuralnet" ], [ "UpdateAction", "org.apache.commons.math3.ml.neuralnet" ], [ "BracketingNthOrderBrentSolverDFP", "org.apache.commons.math3.dfp" ], [ "UnivariateDfpFunction", "org.apache.commons.math3.dfp" ], [ "DfpDec", "org.apache.commons.math3.dfp" ], [ "DfpMath", "org.apache.commons.math3.dfp" ], [ "Dfp", "org.apache.commons.math3.dfp" ], [ "DfpField", "org.apache.commons.math3.dfp" ], [ "GeneticAlgorithm", "org.apache.commons.math3.genetics" ], [ "SelectionPolicy", "org.apache.commons.math3.genetics" ], [ "ListPopulation", "org.apache.commons.math3.genetics" ], [ "FixedGenerationCount", "org.apache.commons.math3.genetics" ], [ "AbstractListChromosome", "org.apache.commons.math3.genetics" ], [ "OnePointCrossover", "org.apache.commons.math3.genetics" ], [ "ElitisticListPopulation", "org.apache.commons.math3.genetics" ], [ "Chromosome", "org.apache.commons.math3.genetics" ], [ "OrderedCrossover", "org.apache.commons.math3.genetics" ], [ "InvalidRepresentationException", "org.apache.commons.math3.genetics" ], [ "RandomKey", "org.apache.commons.math3.genetics" ], [ "StoppingCondition", "org.apache.commons.math3.genetics" ], [ "PermutationChromosome", "org.apache.commons.math3.genetics" ], [ "ChromosomePair", "org.apache.commons.math3.genetics" ], [ "TournamentSelection", "org.apache.commons.math3.genetics" ], [ "NPointCrossover", "org.apache.commons.math3.genetics" ], [ "UniformCrossover", "org.apache.commons.math3.genetics" ], [ "MutationPolicy", "org.apache.commons.math3.genetics" ], [ "FixedElapsedTime", "org.apache.commons.math3.genetics" ], [ "CycleCrossover", "org.apache.commons.math3.genetics" ], [ "BinaryMutation", "org.apache.commons.math3.genetics" ], [ "BinaryChromosome", "org.apache.commons.math3.genetics" ], [ "Population", "org.apache.commons.math3.genetics" ], [ "RandomKeyMutation", "org.apache.commons.math3.genetics" ], [ "Fitness", "org.apache.commons.math3.genetics" ], [ "CrossoverPolicy", "org.apache.commons.math3.genetics" ], [ "Vector", "org.apache.commons.math3.geometry" ], [ "VectorFormat", "org.apache.commons.math3.geometry" ], [ "Point", "org.apache.commons.math3.geometry" ], [ "RotationConvention", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "SubPlane", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Vector3DFormat", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Segment", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "OutlineExtractor", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "PolyhedronsSet", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "RotationOrder", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "FieldVector3D", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Rotation", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Euclidean3D", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "SubLine", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "SphericalCoordinates", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "CardanEulerSingularityException", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "NotARotationMatrixException", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "FieldRotation", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Vector3D", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Plane", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "SphereGenerator", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Line", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "IntervalsSet", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "Interval", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "SubOrientedPoint", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "OrientedPoint", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "Euclidean1D", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "Vector1DFormat", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "Vector1D", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "Segment", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "AbstractConvexHullGenerator2D", "org.apache.commons.math3.geometry.euclidean.twod.hull" ], [ "AklToussaintHeuristic", "org.apache.commons.math3.geometry.euclidean.twod.hull" ], [ "ConvexHull2D", "org.apache.commons.math3.geometry.euclidean.twod.hull" ], [ "MonotoneChain", "org.apache.commons.math3.geometry.euclidean.twod.hull" ], [ "ConvexHullGenerator2D", "org.apache.commons.math3.geometry.euclidean.twod.hull" ], [ "Vector2DFormat", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "PolygonsSet", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "SubLine", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "DiskGenerator", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "Vector2D", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "NestedLoops", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "Euclidean2D", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "Line", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "ConvexHullGenerator", "org.apache.commons.math3.geometry.hull" ], [ "ConvexHull", "org.apache.commons.math3.geometry.hull" ], [ "ArcsSet", "org.apache.commons.math3.geometry.spherical.oned" ], [ "S1Point", "org.apache.commons.math3.geometry.spherical.oned" ], [ "Sphere1D", "org.apache.commons.math3.geometry.spherical.oned" ], [ "Arc", "org.apache.commons.math3.geometry.spherical.oned" ], [ "LimitAngle", "org.apache.commons.math3.geometry.spherical.oned" ], [ "SubLimitAngle", "org.apache.commons.math3.geometry.spherical.oned" ], [ "Sphere2D", "org.apache.commons.math3.geometry.spherical.twod" ], [ "SubCircle", "org.apache.commons.math3.geometry.spherical.twod" ], [ "Vertex", "org.apache.commons.math3.geometry.spherical.twod" ], [ "Circle", "org.apache.commons.math3.geometry.spherical.twod" ], [ "PropertiesComputer", "org.apache.commons.math3.geometry.spherical.twod" ], [ "SphericalPolygonsSet", "org.apache.commons.math3.geometry.spherical.twod" ], [ "Edge", "org.apache.commons.math3.geometry.spherical.twod" ], [ "EdgesBuilder", "org.apache.commons.math3.geometry.spherical.twod" ], [ "S2Point", "org.apache.commons.math3.geometry.spherical.twod" ], [ "SupportBallGenerator", "org.apache.commons.math3.geometry.enclosing" ], [ "EnclosingBall", "org.apache.commons.math3.geometry.enclosing" ], [ "WelzlEncloser", "org.apache.commons.math3.geometry.enclosing" ], [ "Encloser", "org.apache.commons.math3.geometry.enclosing" ], [ "InsideFinder", "org.apache.commons.math3.geometry.partitioning" ], [ "BoundaryProjection", "org.apache.commons.math3.geometry.partitioning" ], [ "BoundaryProjector", "org.apache.commons.math3.geometry.partitioning" ], [ "Region", "org.apache.commons.math3.geometry.partitioning" ], [ "Transform", "org.apache.commons.math3.geometry.partitioning" ], [ "NodesSet", "org.apache.commons.math3.geometry.partitioning" ], [ "AbstractRegion", "org.apache.commons.math3.geometry.partitioning" ], [ "Characterization", "org.apache.commons.math3.geometry.partitioning" ], [ "AbstractSubHyperplane", "org.apache.commons.math3.geometry.partitioning" ], [ "BSPTree", "org.apache.commons.math3.geometry.partitioning" ], [ "RegionFactory", "org.apache.commons.math3.geometry.partitioning" ], [ "Side", "org.apache.commons.math3.geometry.partitioning" ], [ "BoundarySizeVisitor", "org.apache.commons.math3.geometry.partitioning" ], [ "AVLTree", "org.apache.commons.math3.geometry.partitioning.utilities" ], [ "OrderedTuple", "org.apache.commons.math3.geometry.partitioning.utilities" ], [ "BSPTreeVisitor", "org.apache.commons.math3.geometry.partitioning" ], [ "Hyperplane", "org.apache.commons.math3.geometry.partitioning" ], [ "Embedding", "org.apache.commons.math3.geometry.partitioning" ], [ "BoundaryAttribute", "org.apache.commons.math3.geometry.partitioning" ], [ "SubHyperplane", "org.apache.commons.math3.geometry.partitioning" ], [ "BoundaryBuilder", "org.apache.commons.math3.geometry.partitioning" ], [ "Space", "org.apache.commons.math3.geometry" ], [ "Field", "org.apache.commons.math3" ], [ "ProcessModel", "org.apache.commons.math3.filter" ], [ "MeasurementModel", "org.apache.commons.math3.filter" ], [ "KalmanFilter", "org.apache.commons.math3.filter" ], [ "DefaultProcessModel", "org.apache.commons.math3.filter" ], [ "DefaultMeasurementModel", "org.apache.commons.math3.filter" ], [ "NormalizedRandomGenerator", "org.apache.commons.math3.random" ], [ "GaussianRandomGenerator", "org.apache.commons.math3.random" ], [ "RandomGenerator", "org.apache.commons.math3.random" ], [ "ISAACRandom", "org.apache.commons.math3.random" ], [ "CorrelatedRandomVectorGenerator", "org.apache.commons.math3.random" ], [ "Well19937a", "org.apache.commons.math3.random" ], [ "Well1024a", "org.apache.commons.math3.random" ], [ "UniformRandomGenerator", "org.apache.commons.math3.random" ], [ "Well44497a", "org.apache.commons.math3.random" ], [ "BitsStreamGenerator", "org.apache.commons.math3.random" ], [ "SynchronizedRandomGenerator", "org.apache.commons.math3.random" ], [ "UncorrelatedRandomVectorGenerator", "org.apache.commons.math3.random" ], [ "Well19937c", "org.apache.commons.math3.random" ], [ "ValueServer", "org.apache.commons.math3.random" ], [ "HaltonSequenceGenerator", "org.apache.commons.math3.random" ], [ "Well44497b", "org.apache.commons.math3.random" ], [ "RandomData", "org.apache.commons.math3.random" ], [ "RandomVectorGenerator", "org.apache.commons.math3.random" ], [ "RandomDataGenerator", "org.apache.commons.math3.random" ], [ "Well512a", "org.apache.commons.math3.random" ], [ "AbstractRandomGenerator", "org.apache.commons.math3.random" ], [ "JDKRandomGenerator", "org.apache.commons.math3.random" ], [ "StableRandomGenerator", "org.apache.commons.math3.random" ], [ "RandomAdaptor", "org.apache.commons.math3.random" ], [ "RandomGeneratorFactory", "org.apache.commons.math3.random" ], [ "AbstractWell", "org.apache.commons.math3.random" ], [ "RandomDataImpl", "org.apache.commons.math3.random" ], [ "EmpiricalDistribution", "org.apache.commons.math3.random" ], [ "SobolSequenceGenerator", "org.apache.commons.math3.random" ], [ "MersenneTwister", "org.apache.commons.math3.random" ], [ "UnitSphereRandomVectorGenerator", "org.apache.commons.math3.random" ], [ "FieldElement", "org.apache.commons.math3" ], [ "BigFractionFormat", "org.apache.commons.math3.fraction" ], [ "Fraction", "org.apache.commons.math3.fraction" ], [ "BigFraction", "org.apache.commons.math3.fraction" ], [ "AbstractFormat", "org.apache.commons.math3.fraction" ], [ "FractionFormat", "org.apache.commons.math3.fraction" ], [ "FractionField", "org.apache.commons.math3.fraction" ], [ "BigFractionField", "org.apache.commons.math3.fraction" ], [ "ProperFractionFormat", "org.apache.commons.math3.fraction" ], [ "FractionConversionException", "org.apache.commons.math3.fraction" ], [ "ProperBigFractionFormat", "org.apache.commons.math3.fraction" ], [ "NotFiniteNumberException", "org.apache.commons.math3.exception" ], [ "NoBracketingException", "org.apache.commons.math3.exception" ], [ "MathArithmeticException", "org.apache.commons.math3.exception" ], [ "InsufficientDataException", "org.apache.commons.math3.exception" ], [ "TooManyEvaluationsException", "org.apache.commons.math3.exception" ], [ "ExceptionContextProvider", "org.apache.commons.math3.exception.util" ], [ "ExceptionContext", "org.apache.commons.math3.exception.util" ], [ "ArgUtils", "org.apache.commons.math3.exception.util" ], [ "DummyLocalizable", "org.apache.commons.math3.exception.util" ], [ "Localizable", "org.apache.commons.math3.exception.util" ], [ "LocalizedFormats", "org.apache.commons.math3.exception.util" ], [ "NotANumberException", "org.apache.commons.math3.exception" ], [ "MultiDimensionMismatchException", "org.apache.commons.math3.exception" ], [ "OutOfRangeException", "org.apache.commons.math3.exception" ], [ "TooManyIterationsException", "org.apache.commons.math3.exception" ], [ "NullArgumentException", "org.apache.commons.math3.exception" ], [ "NumberIsTooLargeException", "org.apache.commons.math3.exception" ], [ "MathIllegalStateException", "org.apache.commons.math3.exception" ], [ "MathUnsupportedOperationException", "org.apache.commons.math3.exception" ], [ "NotStrictlyPositiveException", "org.apache.commons.math3.exception" ], [ "NonMonotonicSequenceException", "org.apache.commons.math3.exception" ], [ "ZeroException", "org.apache.commons.math3.exception" ], [ "MathIllegalArgumentException", "org.apache.commons.math3.exception" ], [ "DimensionMismatchException", "org.apache.commons.math3.exception" ], [ "MathRuntimeException", "org.apache.commons.math3.exception" ], [ "MathParseException", "org.apache.commons.math3.exception" ], [ "NoDataException", "org.apache.commons.math3.exception" ], [ "MathIllegalNumberException", "org.apache.commons.math3.exception" ], [ "NotPositiveException", "org.apache.commons.math3.exception" ], [ "MaxCountExceededException", "org.apache.commons.math3.exception" ], [ "NumberIsTooSmallException", "org.apache.commons.math3.exception" ], [ "ConvergenceException", "org.apache.commons.math3.exception" ], [ "MathInternalError", "org.apache.commons.math3.exception" ], [ "DftNormalization", "org.apache.commons.math3.transform" ], [ "RealTransformer", "org.apache.commons.math3.transform" ], [ "FastSineTransformer", "org.apache.commons.math3.transform" ], [ "DctNormalization", "org.apache.commons.math3.transform" ], [ "FastFourierTransformer", "org.apache.commons.math3.transform" ], [ "TransformType", "org.apache.commons.math3.transform" ], [ "FastCosineTransformer", "org.apache.commons.math3.transform" ], [ "TransformUtils", "org.apache.commons.math3.transform" ], [ "DstNormalization", "org.apache.commons.math3.transform" ], [ "FastHadamardTransformer", "org.apache.commons.math3.transform" ] ],
  "tokensProjectClassesNonPrivateStaticNonVoidMethods" : [ [ "isPrime", "org.apache.commons.math3.primes", "Primes", "public static boolean isPrime(int n)" ], [ "nextPrime", "org.apache.commons.math3.primes", "Primes", "public static int nextPrime(int n)" ], [ "primeFactors", "org.apache.commons.math3.primes", "Primes", "public static List<Integer> primeFactors(int n)" ], [ "smallTrialDivision", "org.apache.commons.math3.primes", "SmallPrimes", "public static int smallTrialDivision(int n, final List<Integer> factors)" ], [ "boundedTrialDivision", "org.apache.commons.math3.primes", "SmallPrimes", "public static int boundedTrialDivision(int n, int maxFactor, List<Integer> factors)" ], [ "trialDivision", "org.apache.commons.math3.primes", "SmallPrimes", "public static List<Integer> trialDivision(int n)" ], [ "millerRabinPrimeTest", "org.apache.commons.math3.primes", "SmallPrimes", "public static boolean millerRabinPrimeTest(final int n)" ], [ "primeFactors", "org.apache.commons.math3.primes", "PollardRho", "public static List<Integer> primeFactors(int n)" ], [ "rhoBrent", "org.apache.commons.math3.primes", "PollardRho", "static int rhoBrent(final int n)" ], [ "gcdPositive", "org.apache.commons.math3.primes", "PollardRho", "static int gcdPositive(int a, int b)" ], [ "create", "org.apache.commons.math3.fitting", "GaussianCurveFitter", "public static GaussianCurveFitter create()" ], [ "create", "org.apache.commons.math3.fitting", "SimpleCurveFitter", "public static SimpleCurveFitter create(ParametricUnivariateFunction f, double[] start)" ], [ "create", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem create(final MultivariateJacobianFunction model, final RealVector observed, final RealVector start, final RealMatrix weight, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations, final boolean lazyEvaluation, final ParameterValidator paramValidator)" ], [ "create", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem create(final MultivariateJacobianFunction model, final RealVector observed, final RealVector start, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations)" ], [ "create", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem create(final MultivariateJacobianFunction model, final RealVector observed, final RealVector start, final RealMatrix weight, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations)" ], [ "create", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem create(final MultivariateVectorFunction model, final MultivariateMatrixFunction jacobian, final double[] observed, final double[] start, final RealMatrix weight, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations)" ], [ "weightMatrix", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem weightMatrix(final LeastSquaresProblem problem, final RealMatrix weights)" ], [ "weightDiagonal", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem weightDiagonal(final LeastSquaresProblem problem, final RealVector weights)" ], [ "countEvaluations", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem countEvaluations(final LeastSquaresProblem problem, final Incrementor counter)" ], [ "evaluationChecker", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static ConvergenceChecker<Evaluation> evaluationChecker(final ConvergenceChecker<PointVectorValuePair> checker)" ], [ "model", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static MultivariateJacobianFunction model(final MultivariateVectorFunction value, final MultivariateMatrixFunction jacobian)" ], [ "create", "org.apache.commons.math3.fitting", "HarmonicCurveFitter", "public static HarmonicCurveFitter create()" ], [ "create", "org.apache.commons.math3.fitting", "PolynomialCurveFitter", "public static PolynomialCurveFitter create(int degree)" ], [ "compose", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateFunction compose(final UnivariateFunction... f)" ], [ "compose", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateDifferentiableFunction compose(final UnivariateDifferentiableFunction... f)" ], [ "compose", "org.apache.commons.math3.analysis", "FunctionUtils", "public static DifferentiableUnivariateFunction compose(final DifferentiableUnivariateFunction... f)" ], [ "add", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateFunction add(final UnivariateFunction... f)" ], [ "add", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateDifferentiableFunction add(final UnivariateDifferentiableFunction... f)" ], [ "add", "org.apache.commons.math3.analysis", "FunctionUtils", "public static DifferentiableUnivariateFunction add(final DifferentiableUnivariateFunction... f)" ], [ "multiply", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateFunction multiply(final UnivariateFunction... f)" ], [ "multiply", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateDifferentiableFunction multiply(final UnivariateDifferentiableFunction... f)" ], [ "multiply", "org.apache.commons.math3.analysis", "FunctionUtils", "public static DifferentiableUnivariateFunction multiply(final DifferentiableUnivariateFunction... f)" ], [ "combine", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateFunction combine(final BivariateFunction combiner, final UnivariateFunction f, final UnivariateFunction g)" ], [ "collector", "org.apache.commons.math3.analysis", "FunctionUtils", "public static MultivariateFunction collector(final BivariateFunction combiner, final UnivariateFunction f, final double initialValue)" ], [ "collector", "org.apache.commons.math3.analysis", "FunctionUtils", "public static MultivariateFunction collector(final BivariateFunction combiner, final double initialValue)" ], [ "fix1stArgument", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateFunction fix1stArgument(final BivariateFunction f, final double fixed)" ], [ "fix2ndArgument", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateFunction fix2ndArgument(final BivariateFunction f, final double fixed)" ], [ "sample", "org.apache.commons.math3.analysis", "FunctionUtils", "public static double[] sample(UnivariateFunction f, double min, double max, int n) throws NumberIsTooLargeException, NotStrictlyPositiveException" ], [ "toDifferentiableUnivariateFunction", "org.apache.commons.math3.analysis", "FunctionUtils", "public static DifferentiableUnivariateFunction toDifferentiableUnivariateFunction(final UnivariateDifferentiableFunction f)" ], [ "toUnivariateDifferential", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateDifferentiableFunction toUnivariateDifferential(final DifferentiableUnivariateFunction f)" ], [ "toDifferentiableMultivariateFunction", "org.apache.commons.math3.analysis", "FunctionUtils", "public static DifferentiableMultivariateFunction toDifferentiableMultivariateFunction(final MultivariateDifferentiableFunction f)" ], [ "toMultivariateDifferentiableFunction", "org.apache.commons.math3.analysis", "FunctionUtils", "public static MultivariateDifferentiableFunction toMultivariateDifferentiableFunction(final DifferentiableMultivariateFunction f)" ], [ "toDifferentiableMultivariateVectorFunction", "org.apache.commons.math3.analysis", "FunctionUtils", "public static DifferentiableMultivariateVectorFunction toDifferentiableMultivariateVectorFunction(final MultivariateDifferentiableVectorFunction f)" ], [ "toMultivariateDifferentiableVectorFunction", "org.apache.commons.math3.analysis", "FunctionUtils", "public static MultivariateDifferentiableVectorFunction toMultivariateDifferentiableVectorFunction(final DifferentiableMultivariateVectorFunction f)" ], [ "solve", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double solve(UnivariateFunction function, double x0, double x1) throws NullArgumentException, NoBracketingException" ], [ "solve", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double solve(UnivariateFunction function, double x0, double x1, double absoluteAccuracy) throws NullArgumentException, NoBracketingException" ], [ "forceSide", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double forceSide(final int maxEval, final UnivariateFunction f, final BracketedUnivariateSolver<UnivariateFunction> bracketing, final double baseRoot, final double min, final double max, final AllowedSolution allowedSolution) throws NoBracketingException" ], [ "bracket", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double[] bracket(UnivariateFunction function, double initial, double lowerBound, double upperBound) throws NullArgumentException, NotStrictlyPositiveException, NoBracketingException" ], [ "bracket", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double[] bracket(UnivariateFunction function, double initial, double lowerBound, double upperBound, int maximumIterations) throws NullArgumentException, NotStrictlyPositiveException, NoBracketingException" ], [ "bracket", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double[] bracket(final UnivariateFunction function, final double initial, final double lowerBound, final double upperBound, final double q, final double r, final int maximumIterations) throws NoBracketingException" ], [ "midpoint", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double midpoint(double a, double b)" ], [ "isBracketing", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static boolean isBracketing(UnivariateFunction function, final double lower, final double upper) throws NullArgumentException" ], [ "isSequence", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static boolean isSequence(final double start, final double mid, final double end)" ], [ "getCompiler", "org.apache.commons.math3.analysis.differentiation", "DSCompiler", "public static DSCompiler getCompiler(int parameters, int order) throws NumberIsTooLargeException" ], [ "createConstant", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public static SparseGradient createConstant(final double value)" ], [ "createVariable", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public static SparseGradient createVariable(final int idx, final double value)" ], [ "hypot", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public static SparseGradient hypot(final SparseGradient x, final SparseGradient y)" ], [ "pow", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public static SparseGradient pow(final double a, final SparseGradient x)" ], [ "atan2", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public static SparseGradient atan2(final SparseGradient y, final SparseGradient x)" ], [ "hypot", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public static DerivativeStructure hypot(final DerivativeStructure x, final DerivativeStructure y) throws DimensionMismatchException" ], [ "pow", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public static DerivativeStructure pow(final double a, final DerivativeStructure x)" ], [ "atan2", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public static DerivativeStructure atan2(final DerivativeStructure y, final DerivativeStructure x) throws DimensionMismatchException" ], [ "evaluate", "org.apache.commons.math3.analysis.polynomials", "PolynomialFunctionNewtonForm", "public static double evaluate(double[] a, double[] c, double z) throws NullArgumentException, DimensionMismatchException, NoDataException" ], [ "evaluate", "org.apache.commons.math3.analysis.polynomials", "PolynomialFunctionLagrangeForm", "public static double evaluate(double[] x, double[] y, double z) throws DimensionMismatchException, NumberIsTooSmallException, NonMonotonicSequenceException" ], [ "verifyInterpolationArray", "org.apache.commons.math3.analysis.polynomials", "PolynomialFunctionLagrangeForm", "public static boolean verifyInterpolationArray(double[] x, double[] y, boolean abort) throws DimensionMismatchException, NumberIsTooSmallException, NonMonotonicSequenceException" ], [ "createChebyshevPolynomial", "org.apache.commons.math3.analysis.polynomials", "PolynomialsUtils", "public static PolynomialFunction createChebyshevPolynomial(final int degree)" ], [ "createHermitePolynomial", "org.apache.commons.math3.analysis.polynomials", "PolynomialsUtils", "public static PolynomialFunction createHermitePolynomial(final int degree)" ], [ "createLaguerrePolynomial", "org.apache.commons.math3.analysis.polynomials", "PolynomialsUtils", "public static PolynomialFunction createLaguerrePolynomial(final int degree)" ], [ "createLegendrePolynomial", "org.apache.commons.math3.analysis.polynomials", "PolynomialsUtils", "public static PolynomialFunction createLegendrePolynomial(final int degree)" ], [ "createJacobiPolynomial", "org.apache.commons.math3.analysis.polynomials", "PolynomialsUtils", "public static PolynomialFunction createJacobiPolynomial(final int degree, final int v, final int w)" ], [ "shift", "org.apache.commons.math3.analysis.polynomials", "PolynomialsUtils", "public static double[] shift(final double[] coefficients, final double shift)" ], [ "evaluate", "org.apache.commons.math3.analysis.polynomials", "PolynomialFunction", "protected static double evaluate(double[] coefficients, double argument) throws NullArgumentException, NoDataException" ], [ "differentiate", "org.apache.commons.math3.analysis.polynomials", "PolynomialFunction", "protected static double[] differentiate(double[] coefficients) throws NullArgumentException, NoDataException" ], [ "computeDividedDifference", "org.apache.commons.math3.analysis.interpolation", "DividedDifferenceInterpolator", "protected static double[] computeDividedDifference(final double[] x, final double[] y) throws DimensionMismatchException, NumberIsTooSmallException, NonMonotonicSequenceException" ], [ "compareTo", "org.apache.commons.math3.util", "Precision", "public static int compareTo(double x, double y, double eps)" ], [ "compareTo", "org.apache.commons.math3.util", "Precision", "public static int compareTo(final double x, final double y, final int maxUlps)" ], [ "equals", "org.apache.commons.math3.util", "Precision", "public static boolean equals(float x, float y)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "Precision", "public static boolean equalsIncludingNaN(float x, float y)" ], [ "equals", "org.apache.commons.math3.util", "Precision", "public static boolean equals(float x, float y, float eps)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "Precision", "public static boolean equalsIncludingNaN(float x, float y, float eps)" ], [ "equals", "org.apache.commons.math3.util", "Precision", "public static boolean equals(final float x, final float y, final int maxUlps)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "Precision", "public static boolean equalsIncludingNaN(float x, float y, int maxUlps)" ], [ "equals", "org.apache.commons.math3.util", "Precision", "public static boolean equals(double x, double y)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "Precision", "public static boolean equalsIncludingNaN(double x, double y)" ], [ "equals", "org.apache.commons.math3.util", "Precision", "public static boolean equals(double x, double y, double eps)" ], [ "equalsWithRelativeTolerance", "org.apache.commons.math3.util", "Precision", "public static boolean equalsWithRelativeTolerance(double x, double y, double eps)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "Precision", "public static boolean equalsIncludingNaN(double x, double y, double eps)" ], [ "equals", "org.apache.commons.math3.util", "Precision", "public static boolean equals(final double x, final double y, final int maxUlps)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "Precision", "public static boolean equalsIncludingNaN(double x, double y, int maxUlps)" ], [ "round", "org.apache.commons.math3.util", "Precision", "public static double round(double x, int scale)" ], [ "round", "org.apache.commons.math3.util", "Precision", "public static double round(double x, int scale, int roundingMethod)" ], [ "round", "org.apache.commons.math3.util", "Precision", "public static float round(float x, int scale)" ], [ "round", "org.apache.commons.math3.util", "Precision", "public static float round(float x, int scale, int roundingMethod) throws MathArithmeticException, MathIllegalArgumentException" ], [ "representableDelta", "org.apache.commons.math3.util", "Precision", "public static double representableDelta(double x, double originalDelta)" ], [ "wrap", "org.apache.commons.math3.util", "Incrementor", "public static Incrementor wrap(final IntegerSequence.Incrementor incrementor)" ], [ "scale", "org.apache.commons.math3.util", "MathArrays", "public static double[] scale(double val, final double[] arr)" ], [ "ebeAdd", "org.apache.commons.math3.util", "MathArrays", "public static double[] ebeAdd(double[] a, double[] b) throws DimensionMismatchException" ], [ "ebeSubtract", "org.apache.commons.math3.util", "MathArrays", "public static double[] ebeSubtract(double[] a, double[] b) throws DimensionMismatchException" ], [ "ebeMultiply", "org.apache.commons.math3.util", "MathArrays", "public static double[] ebeMultiply(double[] a, double[] b) throws DimensionMismatchException" ], [ "ebeDivide", "org.apache.commons.math3.util", "MathArrays", "public static double[] ebeDivide(double[] a, double[] b) throws DimensionMismatchException" ], [ "distance1", "org.apache.commons.math3.util", "MathArrays", "public static double distance1(double[] p1, double[] p2) throws DimensionMismatchException" ], [ "distance1", "org.apache.commons.math3.util", "MathArrays", "public static int distance1(int[] p1, int[] p2) throws DimensionMismatchException" ], [ "distance", "org.apache.commons.math3.util", "MathArrays", "public static double distance(double[] p1, double[] p2) throws DimensionMismatchException" ], [ "cosAngle", "org.apache.commons.math3.util", "MathArrays", "public static double cosAngle(double[] v1, double[] v2)" ], [ "distance", "org.apache.commons.math3.util", "MathArrays", "public static double distance(int[] p1, int[] p2) throws DimensionMismatchException" ], [ "distanceInf", "org.apache.commons.math3.util", "MathArrays", "public static double distanceInf(double[] p1, double[] p2) throws DimensionMismatchException" ], [ "distanceInf", "org.apache.commons.math3.util", "MathArrays", "public static int distanceInf(int[] p1, int[] p2) throws DimensionMismatchException" ], [ "isMonotonic", "org.apache.commons.math3.util", "MathArrays", "public static <T extends Comparable<? super T>> boolean isMonotonic(T[] val, OrderDirection dir, boolean strict)" ], [ "isMonotonic", "org.apache.commons.math3.util", "MathArrays", "public static boolean isMonotonic(double[] val, OrderDirection dir, boolean strict)" ], [ "checkEqualLength", "org.apache.commons.math3.util", "MathArrays", "public static boolean checkEqualLength(double[] a, double[] b, boolean abort)" ], [ "checkEqualLength", "org.apache.commons.math3.util", "MathArrays", "public static boolean checkEqualLength(int[] a, int[] b, boolean abort)" ], [ "checkOrder", "org.apache.commons.math3.util", "MathArrays", "public static boolean checkOrder(double[] val, OrderDirection dir, boolean strict, boolean abort) throws NonMonotonicSequenceException" ], [ "safeNorm", "org.apache.commons.math3.util", "MathArrays", "public static double safeNorm(double[] v)" ], [ "copyOf", "org.apache.commons.math3.util", "MathArrays", "public static int[] copyOf(int[] source)" ], [ "copyOf", "org.apache.commons.math3.util", "MathArrays", "public static double[] copyOf(double[] source)" ], [ "copyOf", "org.apache.commons.math3.util", "MathArrays", "public static int[] copyOf(int[] source, int len)" ], [ "copyOf", "org.apache.commons.math3.util", "MathArrays", "public static double[] copyOf(double[] source, int len)" ], [ "copyOfRange", "org.apache.commons.math3.util", "MathArrays", "public static double[] copyOfRange(double[] source, int from, int to)" ], [ "linearCombination", "org.apache.commons.math3.util", "MathArrays", "public static double linearCombination(final double[] a, final double[] b) throws DimensionMismatchException" ], [ "linearCombination", "org.apache.commons.math3.util", "MathArrays", "public static double linearCombination(final double a1, final double b1, final double a2, final double b2)" ], [ "linearCombination", "org.apache.commons.math3.util", "MathArrays", "public static double linearCombination(final double a1, final double b1, final double a2, final double b2, final double a3, final double b3)" ], [ "linearCombination", "org.apache.commons.math3.util", "MathArrays", "public static double linearCombination(final double a1, final double b1, final double a2, final double b2, final double a3, final double b3, final double a4, final double b4)" ], [ "equals", "org.apache.commons.math3.util", "MathArrays", "public static boolean equals(float[] x, float[] y)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "MathArrays", "public static boolean equalsIncludingNaN(float[] x, float[] y)" ], [ "equals", "org.apache.commons.math3.util", "MathArrays", "public static boolean equals(double[] x, double[] y)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "MathArrays", "public static boolean equalsIncludingNaN(double[] x, double[] y)" ], [ "normalizeArray", "org.apache.commons.math3.util", "MathArrays", "public static double[] normalizeArray(double[] values, double normalizedSum) throws MathIllegalArgumentException, MathArithmeticException" ], [ "buildArray", "org.apache.commons.math3.util", "MathArrays", "public static <T> T[] buildArray(final Field<T> field, final int length)" ], [ "buildArray", "org.apache.commons.math3.util", "MathArrays", "public static <T> T[][] buildArray(final Field<T> field, final int rows, final int columns)" ], [ "convolve", "org.apache.commons.math3.util", "MathArrays", "public static double[] convolve(double[] x, double[] h) throws NullArgumentException, NoDataException" ], [ "natural", "org.apache.commons.math3.util", "MathArrays", "public static int[] natural(int n)" ], [ "sequence", "org.apache.commons.math3.util", "MathArrays", "public static int[] sequence(int size, int start, int stride)" ], [ "verifyValues", "org.apache.commons.math3.util", "MathArrays", "public static boolean verifyValues(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "verifyValues", "org.apache.commons.math3.util", "MathArrays", "public static boolean verifyValues(final double[] values, final int begin, final int length, final boolean allowEmpty) throws MathIllegalArgumentException" ], [ "verifyValues", "org.apache.commons.math3.util", "MathArrays", "public static boolean verifyValues(final double[] values, final double[] weights, final int begin, final int length) throws MathIllegalArgumentException" ], [ "verifyValues", "org.apache.commons.math3.util", "MathArrays", "public static boolean verifyValues(final double[] values, final double[] weights, final int begin, final int length, final boolean allowEmpty) throws MathIllegalArgumentException" ], [ "concatenate", "org.apache.commons.math3.util", "MathArrays", "public static double[] concatenate(double[]... x)" ], [ "unique", "org.apache.commons.math3.util", "MathArrays", "public static double[] unique(double[] data)" ], [ "create", "org.apache.commons.math3.util", "Pair", "public static <K, V> Pair<K, V> create(K k, V v)" ], [ "slowCos", "org.apache.commons.math3.util", "FastMathCalc", "static double slowCos(final double x, final double[] result)" ], [ "slowSin", "org.apache.commons.math3.util", "FastMathCalc", "static double slowSin(final double x, final double[] result)" ], [ "slowexp", "org.apache.commons.math3.util", "FastMathCalc", "static double slowexp(final double x, final double[] result)" ], [ "expint", "org.apache.commons.math3.util", "FastMathCalc", "static double expint(int p, final double[] result)" ], [ "slowLog", "org.apache.commons.math3.util", "FastMathCalc", "static double[] slowLog(double xi)" ], [ "format", "org.apache.commons.math3.util", "FastMathCalc", "static String format(double d)" ], [ "sqrt", "org.apache.commons.math3.util", "FastMath", "public static double sqrt(final double a)" ], [ "cosh", "org.apache.commons.math3.util", "FastMath", "public static double cosh(double x)" ], [ "sinh", "org.apache.commons.math3.util", "FastMath", "public static double sinh(double x)" ], [ "tanh", "org.apache.commons.math3.util", "FastMath", "public static double tanh(double x)" ], [ "acosh", "org.apache.commons.math3.util", "FastMath", "public static double acosh(final double a)" ], [ "asinh", "org.apache.commons.math3.util", "FastMath", "public static double asinh(double a)" ], [ "atanh", "org.apache.commons.math3.util", "FastMath", "public static double atanh(double a)" ], [ "signum", "org.apache.commons.math3.util", "FastMath", "public static double signum(final double a)" ], [ "signum", "org.apache.commons.math3.util", "FastMath", "public static float signum(final float a)" ], [ "nextUp", "org.apache.commons.math3.util", "FastMath", "public static double nextUp(final double a)" ], [ "nextUp", "org.apache.commons.math3.util", "FastMath", "public static float nextUp(final float a)" ], [ "nextDown", "org.apache.commons.math3.util", "FastMath", "public static double nextDown(final double a)" ], [ "nextDown", "org.apache.commons.math3.util", "FastMath", "public static float nextDown(final float a)" ], [ "random", "org.apache.commons.math3.util", "FastMath", "public static double random()" ], [ "exp", "org.apache.commons.math3.util", "FastMath", "public static double exp(double x)" ], [ "expm1", "org.apache.commons.math3.util", "FastMath", "public static double expm1(double x)" ], [ "log", "org.apache.commons.math3.util", "FastMath", "public static double log(final double x)" ], [ "log1p", "org.apache.commons.math3.util", "FastMath", "public static double log1p(final double x)" ], [ "log10", "org.apache.commons.math3.util", "FastMath", "public static double log10(final double x)" ], [ "log", "org.apache.commons.math3.util", "FastMath", "public static double log(double base, double x)" ], [ "pow", "org.apache.commons.math3.util", "FastMath", "public static double pow(final double x, final double y)" ], [ "pow", "org.apache.commons.math3.util", "FastMath", "public static double pow(double d, int e)" ], [ "pow", "org.apache.commons.math3.util", "FastMath", "public static double pow(double d, long e)" ], [ "sin", "org.apache.commons.math3.util", "FastMath", "public static double sin(double x)" ], [ "cos", "org.apache.commons.math3.util", "FastMath", "public static double cos(double x)" ], [ "tan", "org.apache.commons.math3.util", "FastMath", "public static double tan(double x)" ], [ "atan", "org.apache.commons.math3.util", "FastMath", "public static double atan(double x)" ], [ "atan2", "org.apache.commons.math3.util", "FastMath", "public static double atan2(double y, double x)" ], [ "asin", "org.apache.commons.math3.util", "FastMath", "public static double asin(double x)" ], [ "acos", "org.apache.commons.math3.util", "FastMath", "public static double acos(double x)" ], [ "cbrt", "org.apache.commons.math3.util", "FastMath", "public static double cbrt(double x)" ], [ "toRadians", "org.apache.commons.math3.util", "FastMath", "public static double toRadians(double x)" ], [ "toDegrees", "org.apache.commons.math3.util", "FastMath", "public static double toDegrees(double x)" ], [ "abs", "org.apache.commons.math3.util", "FastMath", "public static int abs(final int x)" ], [ "abs", "org.apache.commons.math3.util", "FastMath", "public static long abs(final long x)" ], [ "abs", "org.apache.commons.math3.util", "FastMath", "public static float abs(final float x)" ], [ "abs", "org.apache.commons.math3.util", "FastMath", "public static double abs(double x)" ], [ "ulp", "org.apache.commons.math3.util", "FastMath", "public static double ulp(double x)" ], [ "ulp", "org.apache.commons.math3.util", "FastMath", "public static float ulp(float x)" ], [ "scalb", "org.apache.commons.math3.util", "FastMath", "public static double scalb(final double d, final int n)" ], [ "scalb", "org.apache.commons.math3.util", "FastMath", "public static float scalb(final float f, final int n)" ], [ "nextAfter", "org.apache.commons.math3.util", "FastMath", "public static double nextAfter(double d, double direction)" ], [ "nextAfter", "org.apache.commons.math3.util", "FastMath", "public static float nextAfter(final float f, final double direction)" ], [ "floor", "org.apache.commons.math3.util", "FastMath", "public static double floor(double x)" ], [ "ceil", "org.apache.commons.math3.util", "FastMath", "public static double ceil(double x)" ], [ "rint", "org.apache.commons.math3.util", "FastMath", "public static double rint(double x)" ], [ "round", "org.apache.commons.math3.util", "FastMath", "public static long round(double x)" ], [ "round", "org.apache.commons.math3.util", "FastMath", "public static int round(final float x)" ], [ "min", "org.apache.commons.math3.util", "FastMath", "public static int min(final int a, final int b)" ], [ "min", "org.apache.commons.math3.util", "FastMath", "public static long min(final long a, final long b)" ], [ "min", "org.apache.commons.math3.util", "FastMath", "public static float min(final float a, final float b)" ], [ "min", "org.apache.commons.math3.util", "FastMath", "public static double min(final double a, final double b)" ], [ "max", "org.apache.commons.math3.util", "FastMath", "public static int max(final int a, final int b)" ], [ "max", "org.apache.commons.math3.util", "FastMath", "public static long max(final long a, final long b)" ], [ "max", "org.apache.commons.math3.util", "FastMath", "public static float max(final float a, final float b)" ], [ "max", "org.apache.commons.math3.util", "FastMath", "public static double max(final double a, final double b)" ], [ "hypot", "org.apache.commons.math3.util", "FastMath", "public static double hypot(final double x, final double y)" ], [ "IEEEremainder", "org.apache.commons.math3.util", "FastMath", "public static double IEEEremainder(double dividend, double divisor)" ], [ "toIntExact", "org.apache.commons.math3.util", "FastMath", "public static int toIntExact(final long n) throws MathArithmeticException" ], [ "incrementExact", "org.apache.commons.math3.util", "FastMath", "public static int incrementExact(final int n) throws MathArithmeticException" ], [ "incrementExact", "org.apache.commons.math3.util", "FastMath", "public static long incrementExact(final long n) throws MathArithmeticException" ], [ "decrementExact", "org.apache.commons.math3.util", "FastMath", "public static int decrementExact(final int n) throws MathArithmeticException" ], [ "decrementExact", "org.apache.commons.math3.util", "FastMath", "public static long decrementExact(final long n) throws MathArithmeticException" ], [ "addExact", "org.apache.commons.math3.util", "FastMath", "public static int addExact(final int a, final int b) throws MathArithmeticException" ], [ "addExact", "org.apache.commons.math3.util", "FastMath", "public static long addExact(final long a, final long b) throws MathArithmeticException" ], [ "subtractExact", "org.apache.commons.math3.util", "FastMath", "public static int subtractExact(final int a, final int b)" ], [ "subtractExact", "org.apache.commons.math3.util", "FastMath", "public static long subtractExact(final long a, final long b)" ], [ "multiplyExact", "org.apache.commons.math3.util", "FastMath", "public static int multiplyExact(final int a, final int b)" ], [ "multiplyExact", "org.apache.commons.math3.util", "FastMath", "public static long multiplyExact(final long a, final long b)" ], [ "floorDiv", "org.apache.commons.math3.util", "FastMath", "public static int floorDiv(final int a, final int b) throws MathArithmeticException" ], [ "floorDiv", "org.apache.commons.math3.util", "FastMath", "public static long floorDiv(final long a, final long b) throws MathArithmeticException" ], [ "floorMod", "org.apache.commons.math3.util", "FastMath", "public static int floorMod(final int a, final int b) throws MathArithmeticException" ], [ "floorMod", "org.apache.commons.math3.util", "FastMath", "public static long floorMod(final long a, final long b)" ], [ "copySign", "org.apache.commons.math3.util", "FastMath", "public static double copySign(double magnitude, double sign)" ], [ "copySign", "org.apache.commons.math3.util", "FastMath", "public static float copySign(float magnitude, float sign)" ], [ "getExponent", "org.apache.commons.math3.util", "FastMath", "public static int getExponent(final double d)" ], [ "getExponent", "org.apache.commons.math3.util", "FastMath", "public static int getExponent(final float f)" ], [ "getInstance", "org.apache.commons.math3.util", "BigRealField", "public static BigRealField getInstance()" ], [ "getInstance", "org.apache.commons.math3.util", "Decimal64Field", "public static final Decimal64Field getInstance()" ], [ "hash", "org.apache.commons.math3.util", "MathUtils", "public static int hash(double value)" ], [ "equals", "org.apache.commons.math3.util", "MathUtils", "public static boolean equals(double x, double y)" ], [ "hash", "org.apache.commons.math3.util", "MathUtils", "public static int hash(double[] value)" ], [ "normalizeAngle", "org.apache.commons.math3.util", "MathUtils", "public static double normalizeAngle(double a, double center)" ], [ "max", "org.apache.commons.math3.util", "MathUtils", "public static <T extends RealFieldElement<T>> T max(final T e1, final T e2)" ], [ "min", "org.apache.commons.math3.util", "MathUtils", "public static <T extends RealFieldElement<T>> T min(final T e1, final T e2)" ], [ "reduce", "org.apache.commons.math3.util", "MathUtils", "public static double reduce(double a, double period, double offset)" ], [ "copySign", "org.apache.commons.math3.util", "MathUtils", "public static byte copySign(byte magnitude, byte sign) throws MathArithmeticException" ], [ "copySign", "org.apache.commons.math3.util", "MathUtils", "public static short copySign(short magnitude, short sign) throws MathArithmeticException" ], [ "copySign", "org.apache.commons.math3.util", "MathUtils", "public static int copySign(int magnitude, int sign) throws MathArithmeticException" ], [ "copySign", "org.apache.commons.math3.util", "MathUtils", "public static long copySign(long magnitude, long sign) throws MathArithmeticException" ], [ "getDefaultNumberFormat", "org.apache.commons.math3.util", "CompositeFormat", "public static NumberFormat getDefaultNumberFormat()" ], [ "getDefaultNumberFormat", "org.apache.commons.math3.util", "CompositeFormat", "public static NumberFormat getDefaultNumberFormat(final Locale locale)" ], [ "parseNextCharacter", "org.apache.commons.math3.util", "CompositeFormat", "public static char parseNextCharacter(final String source, final ParsePosition pos)" ], [ "parseNumber", "org.apache.commons.math3.util", "CompositeFormat", "public static Number parseNumber(final String source, final NumberFormat format, final ParsePosition pos)" ], [ "parseFixedstring", "org.apache.commons.math3.util", "CompositeFormat", "public static boolean parseFixedstring(final String source, final String expected, final ParsePosition pos)" ], [ "formatDouble", "org.apache.commons.math3.util", "CompositeFormat", "public static StringBuffer formatDouble(final double value, final NumberFormat format, final StringBuffer toAppendTo, final FieldPosition pos)" ], [ "range", "org.apache.commons.math3.util", "IntegerSequence", "public static Range range(int start, int end)" ], [ "range", "org.apache.commons.math3.util", "IntegerSequence", "public static Range range(final int start, final int max, final int step)" ], [ "create", "org.apache.commons.math3.util", "IntegerSequence", "public static Incrementor create()" ], [ "create", "org.apache.commons.math3.util", "Incrementor", "public static Incrementor create()" ], [ "loadExpIntA", "org.apache.commons.math3.util", "FastMathLiteralArrays", "static double[] loadExpIntA()" ], [ "loadExpIntB", "org.apache.commons.math3.util", "FastMathLiteralArrays", "static double[] loadExpIntB()" ], [ "loadExpFracA", "org.apache.commons.math3.util", "FastMathLiteralArrays", "static double[] loadExpFracA()" ], [ "loadExpFracB", "org.apache.commons.math3.util", "FastMathLiteralArrays", "static double[] loadExpFracB()" ], [ "loadLnMant", "org.apache.commons.math3.util", "FastMathLiteralArrays", "static double[][] loadLnMant()" ], [ "binomialCoefficient", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static long binomialCoefficient(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "binomialCoefficientDouble", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static double binomialCoefficientDouble(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "binomialCoefficientLog", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static double binomialCoefficientLog(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "factorial", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static long factorial(final int n) throws NotPositiveException, MathArithmeticException" ], [ "factorialDouble", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static double factorialDouble(final int n) throws NotPositiveException" ], [ "factorialLog", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static double factorialLog(final int n) throws NotPositiveException" ], [ "stirlingS2", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static long stirlingS2(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "combinationsIterator", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static Iterator<int[]> combinationsIterator(int n, int k)" ], [ "addAndCheck", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int addAndCheck(int x, int y) throws MathArithmeticException" ], [ "addAndCheck", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long addAndCheck(long a, long b) throws MathArithmeticException" ], [ "binomialCoefficient", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long binomialCoefficient(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "binomialCoefficientDouble", "org.apache.commons.math3.util", "ArithmeticUtils", "public static double binomialCoefficientDouble(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "binomialCoefficientLog", "org.apache.commons.math3.util", "ArithmeticUtils", "public static double binomialCoefficientLog(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "factorial", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long factorial(final int n) throws NotPositiveException, MathArithmeticException" ], [ "factorialDouble", "org.apache.commons.math3.util", "ArithmeticUtils", "public static double factorialDouble(final int n) throws NotPositiveException" ], [ "factorialLog", "org.apache.commons.math3.util", "ArithmeticUtils", "public static double factorialLog(final int n) throws NotPositiveException" ], [ "gcd", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int gcd(int p, int q) throws MathArithmeticException" ], [ "gcd", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long gcd(final long p, final long q) throws MathArithmeticException" ], [ "lcm", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int lcm(int a, int b) throws MathArithmeticException" ], [ "lcm", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long lcm(long a, long b) throws MathArithmeticException" ], [ "mulAndCheck", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int mulAndCheck(int x, int y) throws MathArithmeticException" ], [ "mulAndCheck", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long mulAndCheck(long a, long b) throws MathArithmeticException" ], [ "subAndCheck", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int subAndCheck(int x, int y) throws MathArithmeticException" ], [ "subAndCheck", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long subAndCheck(long a, long b) throws MathArithmeticException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int pow(final int k, final int e) throws NotPositiveException, MathArithmeticException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int pow(final int k, long e) throws NotPositiveException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long pow(final long k, final int e) throws NotPositiveException, MathArithmeticException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long pow(final long k, long e) throws NotPositiveException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static BigInteger pow(final BigInteger k, int e) throws NotPositiveException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static BigInteger pow(final BigInteger k, long e) throws NotPositiveException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static BigInteger pow(final BigInteger k, BigInteger e) throws NotPositiveException" ], [ "stirlingS2", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long stirlingS2(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "isPowerOfTwo", "org.apache.commons.math3.util", "ArithmeticUtils", "public static boolean isPowerOfTwo(long n)" ], [ "getAvailableLocales", "org.apache.commons.math3.complex", "ComplexFormat", "public static Locale[] getAvailableLocales()" ], [ "getInstance", "org.apache.commons.math3.complex", "ComplexFormat", "public static ComplexFormat getInstance()" ], [ "getInstance", "org.apache.commons.math3.complex", "ComplexFormat", "public static ComplexFormat getInstance(Locale locale)" ], [ "getInstance", "org.apache.commons.math3.complex", "ComplexFormat", "public static ComplexFormat getInstance(String imaginaryCharacter, Locale locale) throws NullArgumentException, NoDataException" ], [ "getInstance", "org.apache.commons.math3.complex", "ComplexField", "public static ComplexField getInstance()" ], [ "multiply", "org.apache.commons.math3.complex", "Quaternion", "public static Quaternion multiply(final Quaternion q1, final Quaternion q2)" ], [ "add", "org.apache.commons.math3.complex", "Quaternion", "public static Quaternion add(final Quaternion q1, final Quaternion q2)" ], [ "subtract", "org.apache.commons.math3.complex", "Quaternion", "public static Quaternion subtract(final Quaternion q1, final Quaternion q2)" ], [ "dotProduct", "org.apache.commons.math3.complex", "Quaternion", "public static double dotProduct(final Quaternion q1, final Quaternion q2)" ], [ "equals", "org.apache.commons.math3.complex", "Complex", "public static boolean equals(Complex x, Complex y, int maxUlps)" ], [ "equals", "org.apache.commons.math3.complex", "Complex", "public static boolean equals(Complex x, Complex y)" ], [ "equals", "org.apache.commons.math3.complex", "Complex", "public static boolean equals(Complex x, Complex y, double eps)" ], [ "equalsWithRelativeTolerance", "org.apache.commons.math3.complex", "Complex", "public static boolean equalsWithRelativeTolerance(Complex x, Complex y, double eps)" ], [ "valueOf", "org.apache.commons.math3.complex", "Complex", "public static Complex valueOf(double realPart, double imaginaryPart)" ], [ "valueOf", "org.apache.commons.math3.complex", "Complex", "public static Complex valueOf(double realPart)" ], [ "polar2Complex", "org.apache.commons.math3.complex", "ComplexUtils", "public static Complex polar2Complex(double r, double theta) throws MathIllegalArgumentException" ], [ "convertToComplex", "org.apache.commons.math3.complex", "ComplexUtils", "public static Complex[] convertToComplex(double[] real)" ], [ "getInvertedCoefficientSum", "org.apache.commons.math3.optimization.linear", "SimplexTableau", "protected static double getInvertedCoefficientSum(final RealVector coefficients)" ], [ "getAvailableLocales", "org.apache.commons.math3.linear", "RealMatrixFormat", "public static Locale[] getAvailableLocales()" ], [ "getInstance", "org.apache.commons.math3.linear", "RealMatrixFormat", "public static RealMatrixFormat getInstance()" ], [ "getInstance", "org.apache.commons.math3.linear", "RealMatrixFormat", "public static RealMatrixFormat getInstance(final Locale locale)" ], [ "createRealMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix createRealMatrix(final int rows, final int columns)" ], [ "createFieldMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldMatrix(final Field<T> field, final int rows, final int columns)" ], [ "createRealMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix createRealMatrix(double[][] data) throws NullArgumentException, DimensionMismatchException, NoDataException" ], [ "createFieldMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldMatrix(T[][] data) throws DimensionMismatchException, NoDataException, NullArgumentException" ], [ "createRealIdentityMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix createRealIdentityMatrix(int dimension)" ], [ "createFieldIdentityMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldIdentityMatrix(final Field<T> field, final int dimension)" ], [ "createRealDiagonalMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix createRealDiagonalMatrix(final double[] diagonal)" ], [ "createFieldDiagonalMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldDiagonalMatrix(final T[] diagonal)" ], [ "createRealVector", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealVector createRealVector(double[] data) throws NoDataException, NullArgumentException" ], [ "createFieldVector", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldVector<T> createFieldVector(final T[] data) throws NoDataException, NullArgumentException, ZeroException" ], [ "createRowRealMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix createRowRealMatrix(double[] rowData) throws NoDataException, NullArgumentException" ], [ "createRowFieldMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldMatrix<T> createRowFieldMatrix(final T[] rowData) throws NoDataException, NullArgumentException" ], [ "createColumnRealMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix createColumnRealMatrix(double[] columnData) throws NoDataException, NullArgumentException" ], [ "createColumnFieldMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldMatrix<T> createColumnFieldMatrix(final T[] columnData) throws NoDataException, NullArgumentException" ], [ "isSymmetric", "org.apache.commons.math3.linear", "MatrixUtils", "public static boolean isSymmetric(RealMatrix matrix, double eps)" ], [ "fractionMatrixToRealMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static Array2DRowRealMatrix fractionMatrixToRealMatrix(final FieldMatrix<Fraction> m)" ], [ "bigFractionMatrixToRealMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static Array2DRowRealMatrix bigFractionMatrixToRealMatrix(final FieldMatrix<BigFraction> m)" ], [ "blockInverse", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix blockInverse(RealMatrix m, int splitIndex)" ], [ "inverse", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix inverse(RealMatrix matrix) throws NullArgumentException, SingularMatrixException, NonSquareMatrixException" ], [ "inverse", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix inverse(RealMatrix matrix, double threshold) throws NullArgumentException, SingularMatrixException, NonSquareMatrixException" ], [ "toBlocksLayout", "org.apache.commons.math3.linear", "BlockFieldMatrix", "public static <T extends FieldElement<T>> T[][] toBlocksLayout(final T[][] rawData) throws DimensionMismatchException" ], [ "createBlocksLayout", "org.apache.commons.math3.linear", "BlockFieldMatrix", "public static <T extends FieldElement<T>> T[][] createBlocksLayout(final Field<T> field, final int rows, final int columns)" ], [ "toBlocksLayout", "org.apache.commons.math3.linear", "BlockRealMatrix", "public static double[][] toBlocksLayout(final double[][] rawData) throws DimensionMismatchException" ], [ "createBlocksLayout", "org.apache.commons.math3.linear", "BlockRealMatrix", "public static double[][] createBlocksLayout(final int rows, final int columns)" ], [ "unmodifiableRealVector", "org.apache.commons.math3.linear", "RealVector", "public static RealVector unmodifiableRealVector(final RealVector v)" ], [ "getAvailableLocales", "org.apache.commons.math3.linear", "RealVectorFormat", "public static Locale[] getAvailableLocales()" ], [ "getInstance", "org.apache.commons.math3.linear", "RealVectorFormat", "public static RealVectorFormat getInstance()" ], [ "getInstance", "org.apache.commons.math3.linear", "RealVectorFormat", "public static RealVectorFormat getInstance(final Locale locale)" ], [ "create", "org.apache.commons.math3.linear", "JacobiPreconditioner", "public static JacobiPreconditioner create(final RealLinearOperator a) throws NonSquareOperatorException" ], [ "extractField", "org.apache.commons.math3.linear", "AbstractFieldMatrix", "protected static <T extends FieldElement<T>> Field<T> extractField(final T[][] d) throws NoDataException, NullArgumentException" ], [ "extractField", "org.apache.commons.math3.linear", "AbstractFieldMatrix", "protected static <T extends FieldElement<T>> Field<T> extractField(final T[] d) throws NoDataException" ], [ "buildArray", "org.apache.commons.math3.linear", "AbstractFieldMatrix", "protected static <T extends FieldElement<T>> T[][] buildArray(final Field<T> field, final int rows, final int columns)" ], [ "buildArray", "org.apache.commons.math3.linear", "AbstractFieldMatrix", "protected static <T extends FieldElement<T>> T[] buildArray(final Field<T> field, final int length)" ], [ "estimate", "org.apache.commons.math3.distribution.fitting", "MultivariateNormalMixtureExpectationMaximization", "public static MixtureMultivariateNormalDistribution estimate(final double[][] data, final int numComponents) throws NotStrictlyPositiveException, DimensionMismatchException" ], [ "sample", "org.apache.commons.math3.distribution", "BetaDistribution", "static double sample(RandomGenerator random, final double alpha, final double beta)" ], [ "sample", "org.apache.commons.math3.distribution", "ChengBetaSampler", "static double sample(RandomGenerator random, final double alpha, final double beta)" ], [ "getStirlingError", "org.apache.commons.math3.distribution", "SaddlePointExpansion", "static double getStirlingError(double z)" ], [ "getDeviancePart", "org.apache.commons.math3.distribution", "SaddlePointExpansion", "static double getDeviancePart(double x, double mu)" ], [ "logBinomialProbability", "org.apache.commons.math3.distribution", "SaddlePointExpansion", "static double logBinomialProbability(int x, int n, double p, double q)" ], [ "helper1", "org.apache.commons.math3.distribution", "ZipfDistribution", "static double helper1(final double x)" ], [ "helper2", "org.apache.commons.math3.distribution", "ZipfDistribution", "static double helper2(final double x)" ], [ "helper1", "org.apache.commons.math3.distribution", "ZipfRejectionInversionSampler", "static double helper1(final double x)" ], [ "helper2", "org.apache.commons.math3.distribution", "ZipfRejectionInversionSampler", "static double helper2(final double x)" ], [ "unlimited", "org.apache.commons.math3.optim", "MaxIter", "public static MaxIter unlimited()" ], [ "getInvertedCoefficientSum", "org.apache.commons.math3.optim.linear", "SimplexTableau", "protected static double getInvertedCoefficientSum(final RealVector coefficients)" ], [ "unbounded", "org.apache.commons.math3.optim", "SimpleBounds", "public static SimpleBounds unbounded(int dim)" ], [ "unlimited", "org.apache.commons.math3.optim", "MaxEval", "public static MaxEval unlimited()" ], [ "erf", "org.apache.commons.math3.special", "Erf", "public static double erf(double x)" ], [ "erfc", "org.apache.commons.math3.special", "Erf", "public static double erfc(double x)" ], [ "erf", "org.apache.commons.math3.special", "Erf", "public static double erf(double x1, double x2)" ], [ "erfInv", "org.apache.commons.math3.special", "Erf", "public static double erfInv(final double x)" ], [ "erfcInv", "org.apache.commons.math3.special", "Erf", "public static double erfcInv(final double x)" ], [ "value", "org.apache.commons.math3.special", "BesselJ", "public static double value(double order, double x) throws MathIllegalArgumentException, ConvergenceException" ], [ "rjBesl", "org.apache.commons.math3.special", "BesselJ", "public static BesselJResult rjBesl(double x, double alpha, int nb)" ], [ "logGamma", "org.apache.commons.math3.special", "Gamma", "public static double logGamma(double x)" ], [ "regularizedGammaP", "org.apache.commons.math3.special", "Gamma", "public static double regularizedGammaP(double a, double x)" ], [ "regularizedGammaP", "org.apache.commons.math3.special", "Gamma", "public static double regularizedGammaP(double a, double x, double epsilon, int maxIterations)" ], [ "regularizedGammaQ", "org.apache.commons.math3.special", "Gamma", "public static double regularizedGammaQ(double a, double x)" ], [ "regularizedGammaQ", "org.apache.commons.math3.special", "Gamma", "public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations)" ], [ "digamma", "org.apache.commons.math3.special", "Gamma", "public static double digamma(double x)" ], [ "trigamma", "org.apache.commons.math3.special", "Gamma", "public static double trigamma(double x)" ], [ "lanczos", "org.apache.commons.math3.special", "Gamma", "public static double lanczos(final double x)" ], [ "invGamma1pm1", "org.apache.commons.math3.special", "Gamma", "public static double invGamma1pm1(final double x)" ], [ "logGamma1p", "org.apache.commons.math3.special", "Gamma", "public static double logGamma1p(final double x) throws NumberIsTooSmallException, NumberIsTooLargeException" ], [ "gamma", "org.apache.commons.math3.special", "Gamma", "public static double gamma(final double x)" ], [ "regularizedBeta", "org.apache.commons.math3.special", "Beta", "public static double regularizedBeta(double x, double a, double b)" ], [ "regularizedBeta", "org.apache.commons.math3.special", "Beta", "public static double regularizedBeta(double x, double a, double b, double epsilon)" ], [ "regularizedBeta", "org.apache.commons.math3.special", "Beta", "public static double regularizedBeta(double x, double a, double b, int maxIterations)" ], [ "regularizedBeta", "org.apache.commons.math3.special", "Beta", "public static double regularizedBeta(double x, final double a, final double b, double epsilon, int maxIterations)" ], [ "logBeta", "org.apache.commons.math3.special", "Beta", "public static double logBeta(double a, double b, double epsilon, int maxIterations)" ], [ "logBeta", "org.apache.commons.math3.special", "Beta", "public static double logBeta(final double p, final double q)" ], [ "getInstance", "org.apache.commons.math3.ode.sampling", "DummyStepHandler", "public static DummyStepHandler getInstance()" ], [ "getInstance", "org.apache.commons.math3.ode.nonstiff", "AdamsNordsieckTransformer", "public static AdamsNordsieckTransformer getInstance(final int nSteps)" ], [ "taylor", "org.apache.commons.math3.ode.nonstiff", "AdamsFieldStepInterpolator", "public static <S extends RealFieldElement<S>> FieldODEStateAndDerivative<S> taylor(final FieldODEStateAndDerivative<S> reference, final S time, final S stepSize, final S[] scaled, final Array2DRowFieldMatrix<S> nordsieck)" ], [ "getInstance", "org.apache.commons.math3.ode.nonstiff", "AdamsNordsieckFieldTransformer", "public static <T extends RealFieldElement<T>> AdamsNordsieckFieldTransformer<T> getInstance(final Field<T> field, final int nSteps)" ], [ "sum", "org.apache.commons.math3.stat", "StatUtils", "public static double sum(final double[] values) throws MathIllegalArgumentException" ], [ "sum", "org.apache.commons.math3.stat", "StatUtils", "public static double sum(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "sumSq", "org.apache.commons.math3.stat", "StatUtils", "public static double sumSq(final double[] values) throws MathIllegalArgumentException" ], [ "sumSq", "org.apache.commons.math3.stat", "StatUtils", "public static double sumSq(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "product", "org.apache.commons.math3.stat", "StatUtils", "public static double product(final double[] values) throws MathIllegalArgumentException" ], [ "product", "org.apache.commons.math3.stat", "StatUtils", "public static double product(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "sumLog", "org.apache.commons.math3.stat", "StatUtils", "public static double sumLog(final double[] values) throws MathIllegalArgumentException" ], [ "sumLog", "org.apache.commons.math3.stat", "StatUtils", "public static double sumLog(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "mean", "org.apache.commons.math3.stat", "StatUtils", "public static double mean(final double[] values) throws MathIllegalArgumentException" ], [ "mean", "org.apache.commons.math3.stat", "StatUtils", "public static double mean(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "geometricMean", "org.apache.commons.math3.stat", "StatUtils", "public static double geometricMean(final double[] values) throws MathIllegalArgumentException" ], [ "geometricMean", "org.apache.commons.math3.stat", "StatUtils", "public static double geometricMean(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "variance", "org.apache.commons.math3.stat", "StatUtils", "public static double variance(final double[] values) throws MathIllegalArgumentException" ], [ "variance", "org.apache.commons.math3.stat", "StatUtils", "public static double variance(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "variance", "org.apache.commons.math3.stat", "StatUtils", "public static double variance(final double[] values, final double mean, final int begin, final int length) throws MathIllegalArgumentException" ], [ "variance", "org.apache.commons.math3.stat", "StatUtils", "public static double variance(final double[] values, final double mean) throws MathIllegalArgumentException" ], [ "populationVariance", "org.apache.commons.math3.stat", "StatUtils", "public static double populationVariance(final double[] values) throws MathIllegalArgumentException" ], [ "populationVariance", "org.apache.commons.math3.stat", "StatUtils", "public static double populationVariance(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "populationVariance", "org.apache.commons.math3.stat", "StatUtils", "public static double populationVariance(final double[] values, final double mean, final int begin, final int length) throws MathIllegalArgumentException" ], [ "populationVariance", "org.apache.commons.math3.stat", "StatUtils", "public static double populationVariance(final double[] values, final double mean) throws MathIllegalArgumentException" ], [ "max", "org.apache.commons.math3.stat", "StatUtils", "public static double max(final double[] values) throws MathIllegalArgumentException" ], [ "max", "org.apache.commons.math3.stat", "StatUtils", "public static double max(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "min", "org.apache.commons.math3.stat", "StatUtils", "public static double min(final double[] values) throws MathIllegalArgumentException" ], [ "min", "org.apache.commons.math3.stat", "StatUtils", "public static double min(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "percentile", "org.apache.commons.math3.stat", "StatUtils", "public static double percentile(final double[] values, final double p) throws MathIllegalArgumentException" ], [ "percentile", "org.apache.commons.math3.stat", "StatUtils", "public static double percentile(final double[] values, final int begin, final int length, final double p) throws MathIllegalArgumentException" ], [ "sumDifference", "org.apache.commons.math3.stat", "StatUtils", "public static double sumDifference(final double[] sample1, final double[] sample2) throws DimensionMismatchException, NoDataException" ], [ "meanDifference", "org.apache.commons.math3.stat", "StatUtils", "public static double meanDifference(final double[] sample1, final double[] sample2) throws DimensionMismatchException, NoDataException" ], [ "varianceDifference", "org.apache.commons.math3.stat", "StatUtils", "public static double varianceDifference(final double[] sample1, final double[] sample2, double meanDifference) throws DimensionMismatchException, NumberIsTooSmallException" ], [ "normalize", "org.apache.commons.math3.stat", "StatUtils", "public static double[] normalize(final double[] sample)" ], [ "mode", "org.apache.commons.math3.stat", "StatUtils", "public static double[] mode(double[] sample) throws MathIllegalArgumentException" ], [ "mode", "org.apache.commons.math3.stat", "StatUtils", "public static double[] mode(double[] sample, final int begin, final int length)" ], [ "getAgrestiCoullInterval", "org.apache.commons.math3.stat.interval", "IntervalUtils", "public static ConfidenceInterval getAgrestiCoullInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)" ], [ "getClopperPearsonInterval", "org.apache.commons.math3.stat.interval", "IntervalUtils", "public static ConfidenceInterval getClopperPearsonInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)" ], [ "getNormalApproximationInterval", "org.apache.commons.math3.stat.interval", "IntervalUtils", "public static ConfidenceInterval getNormalApproximationInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)" ], [ "getWilsonScoreInterval", "org.apache.commons.math3.stat.interval", "IntervalUtils", "public static ConfidenceInterval getWilsonScoreInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)" ], [ "homoscedasticT", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double homoscedasticT(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException" ], [ "homoscedasticT", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double homoscedasticT(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException" ], [ "homoscedasticTTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean homoscedasticTTest(final double[] sample1, final double[] sample2, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException" ], [ "homoscedasticTTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double homoscedasticTTest(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException" ], [ "homoscedasticTTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double homoscedasticTTest(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException" ], [ "pairedT", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double pairedT(final double[] sample1, final double[] sample2) throws NullArgumentException, NoDataException, DimensionMismatchException, NumberIsTooSmallException" ], [ "pairedTTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean pairedTTest(final double[] sample1, final double[] sample2, final double alpha) throws NullArgumentException, NoDataException, DimensionMismatchException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException" ], [ "pairedTTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double pairedTTest(final double[] sample1, final double[] sample2) throws NullArgumentException, NoDataException, DimensionMismatchException, NumberIsTooSmallException, MaxCountExceededException" ], [ "t", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double t(final double mu, final double[] observed) throws NullArgumentException, NumberIsTooSmallException" ], [ "t", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double t(final double mu, final StatisticalSummary sampleStats) throws NullArgumentException, NumberIsTooSmallException" ], [ "t", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double t(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException" ], [ "t", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double t(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean tTest(final double mu, final double[] sample, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double tTest(final double mu, final double[] sample) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean tTest(final double mu, final StatisticalSummary sampleStats, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double tTest(final double mu, final StatisticalSummary sampleStats) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean tTest(final double[] sample1, final double[] sample2, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double tTest(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean tTest(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double tTest(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException" ], [ "chiSquare", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double chiSquare(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException" ], [ "chiSquare", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double chiSquare(final long[][] counts) throws NullArgumentException, NotPositiveException, DimensionMismatchException" ], [ "chiSquareTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean chiSquareTest(final double[] expected, final long[] observed, final double alpha) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, OutOfRangeException, MaxCountExceededException" ], [ "chiSquareTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double chiSquareTest(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, MaxCountExceededException" ], [ "chiSquareTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean chiSquareTest(final long[][] counts, final double alpha) throws NullArgumentException, DimensionMismatchException, NotPositiveException, OutOfRangeException, MaxCountExceededException" ], [ "chiSquareTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double chiSquareTest(final long[][] counts) throws NullArgumentException, DimensionMismatchException, NotPositiveException, MaxCountExceededException" ], [ "chiSquareDataSetsComparison", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double chiSquareDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException" ], [ "chiSquareTestDataSetsComparison", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double chiSquareTestDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException, MaxCountExceededException" ], [ "chiSquareTestDataSetsComparison", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean chiSquareTestDataSetsComparison(final long[] observed1, final long[] observed2, final double alpha) throws DimensionMismatchException, NotPositiveException, ZeroException, OutOfRangeException, MaxCountExceededException" ], [ "oneWayAnovaFValue", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double oneWayAnovaFValue(final Collection<double[]> categoryData) throws NullArgumentException, DimensionMismatchException" ], [ "oneWayAnovaPValue", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double oneWayAnovaPValue(final Collection<double[]> categoryData) throws NullArgumentException, DimensionMismatchException, ConvergenceException, MaxCountExceededException" ], [ "oneWayAnovaTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean oneWayAnovaTest(final Collection<double[]> categoryData, final double alpha) throws NullArgumentException, DimensionMismatchException, OutOfRangeException, ConvergenceException, MaxCountExceededException" ], [ "g", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double g(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException" ], [ "gTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double gTest(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, MaxCountExceededException" ], [ "gTestIntrinsic", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double gTestIntrinsic(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, MaxCountExceededException" ], [ "gTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean gTest(final double[] expected, final long[] observed, final double alpha) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, OutOfRangeException, MaxCountExceededException" ], [ "gDataSetsComparison", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double gDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException" ], [ "rootLogLikelihoodRatio", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double rootLogLikelihoodRatio(final long k11, final long k12, final long k21, final long k22) throws DimensionMismatchException, NotPositiveException, ZeroException" ], [ "gTestDataSetsComparison", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double gTestDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException, MaxCountExceededException" ], [ "gTestDataSetsComparison", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean gTestDataSetsComparison(final long[] observed1, final long[] observed2, final double alpha) throws DimensionMismatchException, NotPositiveException, ZeroException, OutOfRangeException, MaxCountExceededException" ], [ "kolmogorovSmirnovStatistic", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double kolmogorovSmirnovStatistic(RealDistribution dist, double[] data) throws InsufficientDataException, NullArgumentException" ], [ "kolmogorovSmirnovTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double kolmogorovSmirnovTest(RealDistribution dist, double[] data) throws InsufficientDataException, NullArgumentException" ], [ "kolmogorovSmirnovTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double kolmogorovSmirnovTest(RealDistribution dist, double[] data, boolean strict) throws InsufficientDataException, NullArgumentException" ], [ "kolmogorovSmirnovTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean kolmogorovSmirnovTest(RealDistribution dist, double[] data, double alpha) throws InsufficientDataException, NullArgumentException" ], [ "kolmogorovSmirnovStatistic", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double kolmogorovSmirnovStatistic(double[] x, double[] y) throws InsufficientDataException, NullArgumentException" ], [ "kolmogorovSmirnovTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double kolmogorovSmirnovTest(double[] x, double[] y) throws InsufficientDataException, NullArgumentException" ], [ "kolmogorovSmirnovTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double kolmogorovSmirnovTest(double[] x, double[] y, boolean strict) throws InsufficientDataException, NullArgumentException" ], [ "exactP", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double exactP(double d, int m, int n, boolean strict)" ], [ "approximateP", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double approximateP(double d, int n, int m)" ], [ "monteCarloP", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double monteCarloP(double d, int n, int m, boolean strict, int iterations)" ], [ "aggregate", "org.apache.commons.math3.stat.descriptive", "AggregateSummaryStatistics", "public static StatisticalSummaryValues aggregate(Collection<? extends StatisticalSummary> statistics)" ], [ "newMarkers", "org.apache.commons.math3.stat.descriptive.rank", "PSquarePercentile", "public static PSquareMarkers newMarkers(final List<Double> initialFive, final double p)" ], [ "exponentialDecay", "org.apache.commons.math3.ml.neuralnet.sofm", "NeighbourhoodSizeFunctionFactory", "public static NeighbourhoodSizeFunction exponentialDecay(final double initValue, final double valueAtNumCall, final long numCall)" ], [ "quasiSigmoidDecay", "org.apache.commons.math3.ml.neuralnet.sofm", "NeighbourhoodSizeFunctionFactory", "public static NeighbourhoodSizeFunction quasiSigmoidDecay(final double initValue, final double slope, final long numCall)" ], [ "exponentialDecay", "org.apache.commons.math3.ml.neuralnet.sofm", "LearningFactorFunctionFactory", "public static LearningFactorFunction exponentialDecay(final double initValue, final double valueAtNumCall, final long numCall)" ], [ "quasiSigmoidDecay", "org.apache.commons.math3.ml.neuralnet.sofm", "LearningFactorFunctionFactory", "public static LearningFactorFunction quasiSigmoidDecay(final double initValue, final double slope, final long numCall)" ], [ "findBest", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static Neuron findBest(double[] features, Iterable<Neuron> neurons, DistanceMeasure distance)" ], [ "findBestAndSecondBest", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static Pair<Neuron, Neuron> findBestAndSecondBest(double[] features, Iterable<Neuron> neurons, DistanceMeasure distance)" ], [ "sort", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static Neuron[] sort(double[] features, Iterable<Neuron> neurons, DistanceMeasure distance)" ], [ "computeU", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static double[][] computeU(NeuronSquareMesh2D map, DistanceMeasure distance)" ], [ "computeHitHistogram", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static int[][] computeHitHistogram(Iterable<double[]> data, NeuronSquareMesh2D map, DistanceMeasure distance)" ], [ "computeQuantizationError", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static double computeQuantizationError(Iterable<double[]> data, Iterable<Neuron> neurons, DistanceMeasure distance)" ], [ "computeTopographicError", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static double computeTopographicError(Iterable<double[]> data, Network net, DistanceMeasure distance)" ], [ "uniform", "org.apache.commons.math3.ml.neuralnet", "FeatureInitializerFactory", "public static FeatureInitializer uniform(final RandomGenerator rng, final double min, final double max)" ], [ "uniform", "org.apache.commons.math3.ml.neuralnet", "FeatureInitializerFactory", "public static FeatureInitializer uniform(final double min, final double max)" ], [ "function", "org.apache.commons.math3.ml.neuralnet", "FeatureInitializerFactory", "public static FeatureInitializer function(final UnivariateFunction f, final double init, final double inc)" ], [ "randomize", "org.apache.commons.math3.ml.neuralnet", "FeatureInitializerFactory", "public static FeatureInitializer randomize(final RealDistribution random, final FeatureInitializer orig)" ], [ "split", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp[] split(final DfpField field, final String a)" ], [ "split", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp[] split(final Dfp a)" ], [ "splitMult", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp[] splitMult(final Dfp[] a, final Dfp[] b)" ], [ "splitDiv", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp[] splitDiv(final Dfp[] a, final Dfp[] b)" ], [ "splitPow", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp splitPow(final Dfp[] base, int a)" ], [ "pow", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp pow(Dfp base, int a)" ], [ "exp", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp exp(final Dfp a)" ], [ "expInternal", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp expInternal(final Dfp a)" ], [ "log", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp log(Dfp a)" ], [ "logInternal", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp[] logInternal(final Dfp[] a)" ], [ "pow", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp pow(Dfp x, final Dfp y)" ], [ "sinInternal", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp sinInternal(Dfp[] a)" ], [ "cosInternal", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp cosInternal(Dfp[] a)" ], [ "sin", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp sin(final Dfp a)" ], [ "cos", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp cos(Dfp a)" ], [ "tan", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp tan(final Dfp a)" ], [ "atanInternal", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp atanInternal(final Dfp a)" ], [ "atan", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp atan(final Dfp a)" ], [ "asin", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp asin(final Dfp a)" ], [ "acos", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp acos(Dfp a)" ], [ "copysign", "org.apache.commons.math3.dfp", "Dfp", "public static Dfp copysign(final Dfp x, final Dfp y)" ], [ "computeExp", "org.apache.commons.math3.dfp", "DfpField", "public static Dfp computeExp(final Dfp a, final Dfp one)" ], [ "computeLn", "org.apache.commons.math3.dfp", "DfpField", "public static Dfp computeLn(final Dfp a, final Dfp one, final Dfp two)" ], [ "getRandomGenerator", "org.apache.commons.math3.genetics", "GeneticAlgorithm", "public static synchronized RandomGenerator getRandomGenerator()" ], [ "randomPermutation", "org.apache.commons.math3.genetics", "RandomKey", "public static final List<Double> randomPermutation(final int l)" ], [ "identityPermutation", "org.apache.commons.math3.genetics", "RandomKey", "public static final List<Double> identityPermutation(final int l)" ], [ "comparatorPermutation", "org.apache.commons.math3.genetics", "RandomKey", "public static <S> List<Double> comparatorPermutation(final List<S> data, final Comparator<S> comparator)" ], [ "inducedPermutation", "org.apache.commons.math3.genetics", "RandomKey", "public static <S> List<Double> inducedPermutation(final List<S> originalData, final List<S> permutedData) throws DimensionMismatchException, MathIllegalArgumentException" ], [ "randomBinaryRepresentation", "org.apache.commons.math3.genetics", "BinaryChromosome", "public static List<Integer> randomBinaryRepresentation(int length)" ], [ "getAvailableLocales", "org.apache.commons.math3.geometry", "VectorFormat", "public static Locale[] getAvailableLocales()" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3DFormat", "public static Vector3DFormat getInstance()" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3DFormat", "public static Vector3DFormat getInstance(final Locale locale)" ], [ "angle", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T angle(final FieldVector3D<T> v1, final FieldVector3D<T> v2) throws MathArithmeticException" ], [ "angle", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T angle(final FieldVector3D<T> v1, final Vector3D v2) throws MathArithmeticException" ], [ "angle", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T angle(final Vector3D v1, final FieldVector3D<T> v2) throws MathArithmeticException" ], [ "dotProduct", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T dotProduct(final FieldVector3D<T> v1, final FieldVector3D<T> v2)" ], [ "dotProduct", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T dotProduct(final FieldVector3D<T> v1, final Vector3D v2)" ], [ "dotProduct", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T dotProduct(final Vector3D v1, final FieldVector3D<T> v2)" ], [ "crossProduct", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> FieldVector3D<T> crossProduct(final FieldVector3D<T> v1, final FieldVector3D<T> v2)" ], [ "crossProduct", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> FieldVector3D<T> crossProduct(final FieldVector3D<T> v1, final Vector3D v2)" ], [ "crossProduct", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> FieldVector3D<T> crossProduct(final Vector3D v1, final FieldVector3D<T> v2)" ], [ "distance1", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distance1(final FieldVector3D<T> v1, final FieldVector3D<T> v2)" ], [ "distance1", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distance1(final FieldVector3D<T> v1, final Vector3D v2)" ], [ "distance1", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distance1(final Vector3D v1, final FieldVector3D<T> v2)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distance(final FieldVector3D<T> v1, final FieldVector3D<T> v2)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distance(final FieldVector3D<T> v1, final Vector3D v2)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distance(final Vector3D v1, final FieldVector3D<T> v2)" ], [ "distanceInf", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distanceInf(final FieldVector3D<T> v1, final FieldVector3D<T> v2)" ], [ "distanceInf", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distanceInf(final FieldVector3D<T> v1, final Vector3D v2)" ], [ "distanceInf", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distanceInf(final Vector3D v1, final FieldVector3D<T> v2)" ], [ "distanceSq", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distanceSq(final FieldVector3D<T> v1, final FieldVector3D<T> v2)" ], [ "distanceSq", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distanceSq(final FieldVector3D<T> v1, final Vector3D v2)" ], [ "distanceSq", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distanceSq(final Vector3D v1, final FieldVector3D<T> v2)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.threed", "Rotation", "public static double distance(Rotation r1, Rotation r2)" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.threed", "Euclidean3D", "public static Euclidean3D getInstance()" ], [ "applyTo", "org.apache.commons.math3.geometry.euclidean.threed", "FieldRotation", "public static <T extends RealFieldElement<T>> FieldVector3D<T> applyTo(final Rotation r, final FieldVector3D<T> u)" ], [ "applyInverseTo", "org.apache.commons.math3.geometry.euclidean.threed", "FieldRotation", "public static <T extends RealFieldElement<T>> FieldVector3D<T> applyInverseTo(final Rotation r, final FieldVector3D<T> u)" ], [ "applyTo", "org.apache.commons.math3.geometry.euclidean.threed", "FieldRotation", "public static <T extends RealFieldElement<T>> FieldRotation<T> applyTo(final Rotation r1, final FieldRotation<T> rInner)" ], [ "applyInverseTo", "org.apache.commons.math3.geometry.euclidean.threed", "FieldRotation", "public static <T extends RealFieldElement<T>> FieldRotation<T> applyInverseTo(final Rotation rOuter, final FieldRotation<T> rInner)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.threed", "FieldRotation", "public static <T extends RealFieldElement<T>> T distance(final FieldRotation<T> r1, final FieldRotation<T> r2)" ], [ "angle", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static double angle(Vector3D v1, Vector3D v2) throws MathArithmeticException" ], [ "dotProduct", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static double dotProduct(Vector3D v1, Vector3D v2)" ], [ "crossProduct", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2)" ], [ "distance1", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static double distance1(Vector3D v1, Vector3D v2)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static double distance(Vector3D v1, Vector3D v2)" ], [ "distanceInf", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static double distanceInf(Vector3D v1, Vector3D v2)" ], [ "distanceSq", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static double distanceSq(Vector3D v1, Vector3D v2)" ], [ "intersection", "org.apache.commons.math3.geometry.euclidean.threed", "Plane", "public static Vector3D intersection(final Plane plane1, final Plane plane2, final Plane plane3)" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.oned", "Euclidean1D", "public static Euclidean1D getInstance()" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1DFormat", "public static Vector1DFormat getInstance()" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1DFormat", "public static Vector1DFormat getInstance(final Locale locale)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static double distance(Vector1D p1, Vector1D p2)" ], [ "distanceInf", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static double distanceInf(Vector1D p1, Vector1D p2)" ], [ "distanceSq", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static double distanceSq(Vector1D p1, Vector1D p2)" ], [ "reducePoints", "org.apache.commons.math3.geometry.euclidean.twod.hull", "AklToussaintHeuristic", "public static Collection<Vector2D> reducePoints(final Collection<Vector2D> points)" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2DFormat", "public static Vector2DFormat getInstance()" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2DFormat", "public static Vector2DFormat getInstance(final Locale locale)" ], [ "angle", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static double angle(Vector2D v1, Vector2D v2) throws MathArithmeticException" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static double distance(Vector2D p1, Vector2D p2)" ], [ "distanceInf", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static double distanceInf(Vector2D p1, Vector2D p2)" ], [ "distanceSq", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static double distanceSq(Vector2D p1, Vector2D p2)" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.twod", "Euclidean2D", "public static Euclidean2D getInstance()" ], [ "getTransform", "org.apache.commons.math3.geometry.euclidean.twod", "Line", "public static Transform<Euclidean2D, Euclidean1D> getTransform(final AffineTransform transform) throws MathIllegalArgumentException" ], [ "getTransform", "org.apache.commons.math3.geometry.euclidean.twod", "Line", "public static Transform<Euclidean2D, Euclidean1D> getTransform(final double cXX, final double cYX, final double cXY, final double cYY, final double cX1, final double cY1) throws MathIllegalArgumentException" ], [ "distance", "org.apache.commons.math3.geometry.spherical.oned", "S1Point", "public static double distance(S1Point p1, S1Point p2)" ], [ "getInstance", "org.apache.commons.math3.geometry.spherical.oned", "Sphere1D", "public static Sphere1D getInstance()" ], [ "getInstance", "org.apache.commons.math3.geometry.spherical.twod", "Sphere2D", "public static Sphere2D getInstance()" ], [ "getTransform", "org.apache.commons.math3.geometry.spherical.twod", "Circle", "public static Transform<Sphere2D, Sphere1D> getTransform(final Rotation rotation)" ], [ "distance", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static double distance(S2Point p1, S2Point p2)" ], [ "createAdaptor", "org.apache.commons.math3.random", "RandomAdaptor", "public static Random createAdaptor(RandomGenerator randomGenerator)" ], [ "createRandomGenerator", "org.apache.commons.math3.random", "RandomGeneratorFactory", "public static RandomGenerator createRandomGenerator(final Random rng)" ], [ "convertToLong", "org.apache.commons.math3.random", "RandomGeneratorFactory", "public static long convertToLong(int[] seed)" ], [ "getAvailableLocales", "org.apache.commons.math3.fraction", "BigFractionFormat", "public static Locale[] getAvailableLocales()" ], [ "formatBigFraction", "org.apache.commons.math3.fraction", "BigFractionFormat", "public static String formatBigFraction(final BigFraction f)" ], [ "getImproperInstance", "org.apache.commons.math3.fraction", "BigFractionFormat", "public static BigFractionFormat getImproperInstance()" ], [ "getImproperInstance", "org.apache.commons.math3.fraction", "BigFractionFormat", "public static BigFractionFormat getImproperInstance(final Locale locale)" ], [ "getProperInstance", "org.apache.commons.math3.fraction", "BigFractionFormat", "public static BigFractionFormat getProperInstance()" ], [ "getProperInstance", "org.apache.commons.math3.fraction", "BigFractionFormat", "public static BigFractionFormat getProperInstance(final Locale locale)" ], [ "getReducedFraction", "org.apache.commons.math3.fraction", "Fraction", "public static Fraction getReducedFraction(int numerator, int denominator)" ], [ "getReducedFraction", "org.apache.commons.math3.fraction", "BigFraction", "public static BigFraction getReducedFraction(final int numerator, final int denominator)" ], [ "getDefaultNumberFormat", "org.apache.commons.math3.fraction", "AbstractFormat", "protected static NumberFormat getDefaultNumberFormat()" ], [ "getDefaultNumberFormat", "org.apache.commons.math3.fraction", "AbstractFormat", "protected static NumberFormat getDefaultNumberFormat(final Locale locale)" ], [ "parseNextCharacter", "org.apache.commons.math3.fraction", "AbstractFormat", "protected static char parseNextCharacter(final String source, final ParsePosition pos)" ], [ "getAvailableLocales", "org.apache.commons.math3.fraction", "FractionFormat", "public static Locale[] getAvailableLocales()" ], [ "formatFraction", "org.apache.commons.math3.fraction", "FractionFormat", "public static String formatFraction(Fraction f)" ], [ "getImproperInstance", "org.apache.commons.math3.fraction", "FractionFormat", "public static FractionFormat getImproperInstance()" ], [ "getImproperInstance", "org.apache.commons.math3.fraction", "FractionFormat", "public static FractionFormat getImproperInstance(final Locale locale)" ], [ "getProperInstance", "org.apache.commons.math3.fraction", "FractionFormat", "public static FractionFormat getProperInstance()" ], [ "getProperInstance", "org.apache.commons.math3.fraction", "FractionFormat", "public static FractionFormat getProperInstance(final Locale locale)" ], [ "getDefaultNumberFormat", "org.apache.commons.math3.fraction", "FractionFormat", "protected static NumberFormat getDefaultNumberFormat()" ], [ "getInstance", "org.apache.commons.math3.fraction", "FractionField", "public static FractionField getInstance()" ], [ "getInstance", "org.apache.commons.math3.fraction", "BigFractionField", "public static BigFractionField getInstance()" ], [ "flatten", "org.apache.commons.math3.exception.util", "ArgUtils", "public static Object[] flatten(Object[] array)" ], [ "scaleArray", "org.apache.commons.math3.transform", "TransformUtils", "public static double[] scaleArray(double[] f, double d)" ], [ "scaleArray", "org.apache.commons.math3.transform", "TransformUtils", "public static Complex[] scaleArray(Complex[] f, double d)" ], [ "createRealImaginaryArray", "org.apache.commons.math3.transform", "TransformUtils", "public static double[][] createRealImaginaryArray(final Complex[] dataC)" ], [ "createComplexArray", "org.apache.commons.math3.transform", "TransformUtils", "public static Complex[] createComplexArray(final double[][] dataRI) throws DimensionMismatchException" ], [ "exactLog2", "org.apache.commons.math3.transform", "TransformUtils", "public static int exactLog2(final int n) throws MathIllegalArgumentException" ] ],
  "tokensProjectClassesNonPrivateStaticAttributes" : [ [ "PRIMES", "org.apache.commons.math3.primes", "SmallPrimes", "public static final int[] PRIMES = { 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171, 1181, 1187, 1193, 1201, 1213, 1217, 1223, 1229, 1231, 1237, 1249, 1259, 1277, 1279, 1283, 1289, 1291, 1297, 1301, 1303, 1307, 1319, 1321, 1327, 1361, 1367, 1373, 1381, 1399, 1409, 1423, 1427, 1429, 1433, 1439, 1447, 1451, 1453, 1459, 1471, 1481, 1483, 1487, 1489, 1493, 1499, 1511, 1523, 1531, 1543, 1549, 1553, 1559, 1567, 1571, 1579, 1583, 1597, 1601, 1607, 1609, 1613, 1619, 1621, 1627, 1637, 1657, 1663, 1667, 1669, 1693, 1697, 1699, 1709, 1721, 1723, 1733, 1741, 1747, 1753, 1759, 1777, 1783, 1787, 1789, 1801, 1811, 1823, 1831, 1847, 1861, 1867, 1871, 1873, 1877, 1879, 1889, 1901, 1907, 1913, 1931, 1933, 1949, 1951, 1973, 1979, 1987, 1993, 1997, 1999, 2003, 2011, 2017, 2027, 2029, 2039, 2053, 2063, 2069, 2081, 2083, 2087, 2089, 2099, 2111, 2113, 2129, 2131, 2137, 2141, 2143, 2153, 2161, 2179, 2203, 2207, 2213, 2221, 2237, 2239, 2243, 2251, 2267, 2269, 2273, 2281, 2287, 2293, 2297, 2309, 2311, 2333, 2339, 2341, 2347, 2351, 2357, 2371, 2377, 2381, 2383, 2389, 2393, 2399, 2411, 2417, 2423, 2437, 2441, 2447, 2459, 2467, 2473, 2477, 2503, 2521, 2531, 2539, 2543, 2549, 2551, 2557, 2579, 2591, 2593, 2609, 2617, 2621, 2633, 2647, 2657, 2659, 2663, 2671, 2677, 2683, 2687, 2689, 2693, 2699, 2707, 2711, 2713, 2719, 2729, 2731, 2741, 2749, 2753, 2767, 2777, 2789, 2791, 2797, 2801, 2803, 2819, 2833, 2837, 2843, 2851, 2857, 2861, 2879, 2887, 2897, 2903, 2909, 2917, 2927, 2939, 2953, 2957, 2963, 2969, 2971, 2999, 3001, 3011, 3019, 3023, 3037, 3041, 3049, 3061, 3067, 3079, 3083, 3089, 3109, 3119, 3121, 3137, 3163, 3167, 3169, 3181, 3187, 3191, 3203, 3209, 3217, 3221, 3229, 3251, 3253, 3257, 3259, 3271, 3299, 3301, 3307, 3313, 3319, 3323, 3329, 3331, 3343, 3347, 3359, 3361, 3371, 3373, 3389, 3391, 3407, 3413, 3433, 3449, 3457, 3461, 3463, 3467, 3469, 3491, 3499, 3511, 3517, 3527, 3529, 3533, 3539, 3541, 3547, 3557, 3559, 3571, 3581, 3583, 3593, 3607, 3613, 3617, 3623, 3631, 3637, 3643, 3659, 3671 };" ], [ "PRIMES_LAST", "org.apache.commons.math3.primes", "SmallPrimes", "public static final int PRIMES_LAST = PRIMES[PRIMES.length - 1];" ], [ "MIDPOINT_MAX_ITERATIONS_COUNT", "org.apache.commons.math3.analysis.integration", "MidPointIntegrator", "public static final int MIDPOINT_MAX_ITERATIONS_COUNT = 64;" ], [ "ROMBERG_MAX_ITERATIONS_COUNT", "org.apache.commons.math3.analysis.integration", "RombergIntegrator", "public static final int ROMBERG_MAX_ITERATIONS_COUNT = 32;" ], [ "SIMPSON_MAX_ITERATIONS_COUNT", "org.apache.commons.math3.analysis.integration", "SimpsonIntegrator", "public static final int SIMPSON_MAX_ITERATIONS_COUNT = 64;" ], [ "DEFAULT_ABSOLUTE_ACCURACY", "org.apache.commons.math3.analysis.integration", "BaseAbstractUnivariateIntegrator", "public static final double DEFAULT_ABSOLUTE_ACCURACY = 1.0e-15;" ], [ "DEFAULT_RELATIVE_ACCURACY", "org.apache.commons.math3.analysis.integration", "BaseAbstractUnivariateIntegrator", "public static final double DEFAULT_RELATIVE_ACCURACY = 1.0e-6;" ], [ "DEFAULT_MIN_ITERATIONS_COUNT", "org.apache.commons.math3.analysis.integration", "BaseAbstractUnivariateIntegrator", "public static final int DEFAULT_MIN_ITERATIONS_COUNT = 3;" ], [ "DEFAULT_MAX_ITERATIONS_COUNT", "org.apache.commons.math3.analysis.integration", "BaseAbstractUnivariateIntegrator", "public static final int DEFAULT_MAX_ITERATIONS_COUNT = Integer.MAX_VALUE;" ], [ "TRAPEZOID_MAX_ITERATIONS_COUNT", "org.apache.commons.math3.analysis.integration", "TrapezoidIntegrator", "public static final int TRAPEZOID_MAX_ITERATIONS_COUNT = 64;" ], [ "DEFAULT_ABSOLUTE_ACCURACY", "org.apache.commons.math3.analysis.solvers", "BaseSecantSolver", "protected static final double DEFAULT_ABSOLUTE_ACCURACY = 1e-6;" ], [ "DEFAULT_ABSOLUTE_ACCURACY", "org.apache.commons.math3.analysis.solvers", "SecantSolver", "protected static final double DEFAULT_ABSOLUTE_ACCURACY = 1e-6;" ], [ "DEFAULT_BANDWIDTH", "org.apache.commons.math3.analysis.interpolation", "LoessInterpolator", "public static final double DEFAULT_BANDWIDTH = 0.3;" ], [ "DEFAULT_ROBUSTNESS_ITERS", "org.apache.commons.math3.analysis.interpolation", "LoessInterpolator", "public static final int DEFAULT_ROBUSTNESS_ITERS = 2;" ], [ "DEFAULT_ACCURACY", "org.apache.commons.math3.analysis.interpolation", "LoessInterpolator", "public static final double DEFAULT_ACCURACY = 1e-12;" ], [ "serialVersionUID", "org.apache.commons.math3.analysis.interpolation", "NevilleInterpolator", "static final long serialVersionUID = 3003707660147873733L;" ], [ "DEFAULT_EXTEND", "org.apache.commons.math3.analysis.interpolation", "UnivariatePeriodicInterpolator", "public static final int DEFAULT_EXTEND = 5;" ], [ "DEFAULT_MICROSPHERE_ELEMENTS", "org.apache.commons.math3.analysis.interpolation", "MicrosphereInterpolator", "public static final int DEFAULT_MICROSPHERE_ELEMENTS = 2000;" ], [ "DEFAULT_BRIGHTNESS_EXPONENT", "org.apache.commons.math3.analysis.interpolation", "MicrosphereInterpolator", "public static final int DEFAULT_BRIGHTNESS_EXPONENT = 2;" ], [ "EPSILON", "org.apache.commons.math3.util", "Precision", "public static final double EPSILON;" ], [ "SAFE_MIN", "org.apache.commons.math3.util", "Precision", "public static final double SAFE_MIN;" ], [ "FREE", "org.apache.commons.math3.util", "OpenIntToDoubleHashMap", "protected static final byte FREE = 0;" ], [ "FULL", "org.apache.commons.math3.util", "OpenIntToDoubleHashMap", "protected static final byte FULL = 1;" ], [ "REMOVED", "org.apache.commons.math3.util", "OpenIntToDoubleHashMap", "protected static final byte REMOVED = 2;" ], [ "FREE", "org.apache.commons.math3.util", "OpenIntToFieldHashMap", "protected static final byte FREE = 0;" ], [ "FULL", "org.apache.commons.math3.util", "OpenIntToFieldHashMap", "protected static final byte FULL = 1;" ], [ "REMOVED", "org.apache.commons.math3.util", "OpenIntToFieldHashMap", "protected static final byte REMOVED = 2;" ], [ "PI", "org.apache.commons.math3.util", "FastMath", "public static final double PI = 105414357.0 / 33554432.0 + 1.984187159361080883e-9;" ], [ "E", "org.apache.commons.math3.util", "FastMath", "public static final double E = 2850325.0 / 1048576.0 + 8.254840070411028747e-8;" ], [ "EXP_INT_TABLE_MAX_INDEX", "org.apache.commons.math3.util", "FastMath", "static final int EXP_INT_TABLE_MAX_INDEX = 750;" ], [ "EXP_INT_TABLE_LEN", "org.apache.commons.math3.util", "FastMath", "static final int EXP_INT_TABLE_LEN = EXP_INT_TABLE_MAX_INDEX * 2;" ], [ "LN_MANT_LEN", "org.apache.commons.math3.util", "FastMath", "static final int LN_MANT_LEN = 1024;" ], [ "EXP_FRAC_TABLE_LEN", "org.apache.commons.math3.util", "FastMath", "static final int EXP_FRAC_TABLE_LEN = 1025;" ], [ "NAN", "org.apache.commons.math3.util", "FastMath", "public static final Split NAN = new Split(Double.NaN, 0);" ], [ "POSITIVE_INFINITY", "org.apache.commons.math3.util", "FastMath", "public static final Split POSITIVE_INFINITY = new Split(Double.POSITIVE_INFINITY, 0);" ], [ "NEGATIVE_INFINITY", "org.apache.commons.math3.util", "FastMath", "public static final Split NEGATIVE_INFINITY = new Split(Double.NEGATIVE_INFINITY, 0);" ], [ "NAN", "org.apache.commons.math3.util", "Split", "public static final Split NAN = new Split(Double.NaN, 0);" ], [ "POSITIVE_INFINITY", "org.apache.commons.math3.util", "Split", "public static final Split POSITIVE_INFINITY = new Split(Double.POSITIVE_INFINITY, 0);" ], [ "NEGATIVE_INFINITY", "org.apache.commons.math3.util", "Split", "public static final Split NEGATIVE_INFINITY = new Split(Double.NEGATIVE_INFINITY, 0);" ], [ "ADDITIVE_MODE", "org.apache.commons.math3.util", "ResizableDoubleArray", "public static final int ADDITIVE_MODE = 1;" ], [ "MULTIPLICATIVE_MODE", "org.apache.commons.math3.util", "ResizableDoubleArray", "public static final int MULTIPLICATIVE_MODE = 0;" ], [ "TWO_PI", "org.apache.commons.math3.util", "MathUtils", "public static final double TWO_PI = 2 * FastMath.PI;" ], [ "PI_SQUARED", "org.apache.commons.math3.util", "MathUtils", "public static final double PI_SQUARED = FastMath.PI * FastMath.PI;" ], [ "FACTORIALS", "org.apache.commons.math3.util", "CombinatoricsUtils", "static final long[] FACTORIALS = new long[] { 1l, 1l, 2l, 6l, 24l, 120l, 720l, 5040l, 40320l, 362880l, 3628800l, 39916800l, 479001600l, 6227020800l, 87178291200l, 1307674368000l, 20922789888000l, 355687428096000l, 6402373705728000l, 121645100408832000l, 2432902008176640000l };" ], [ "STIRLING_S2", "org.apache.commons.math3.util", "CombinatoricsUtils", "static final AtomicReference<long[][]> STIRLING_S2 = new AtomicReference<long[][]>(null);" ], [ "ZERO", "org.apache.commons.math3.util", "Decimal64", "public static final Decimal64 ZERO;" ], [ "ONE", "org.apache.commons.math3.util", "Decimal64", "public static final Decimal64 ONE;" ], [ "NEGATIVE_INFINITY", "org.apache.commons.math3.util", "Decimal64", "public static final Decimal64 NEGATIVE_INFINITY;" ], [ "POSITIVE_INFINITY", "org.apache.commons.math3.util", "Decimal64", "public static final Decimal64 POSITIVE_INFINITY;" ], [ "NAN", "org.apache.commons.math3.util", "Decimal64", "public static final Decimal64 NAN;" ], [ "ZERO", "org.apache.commons.math3.util", "BigReal", "public static final BigReal ZERO = new BigReal(BigDecimal.ZERO);" ], [ "ONE", "org.apache.commons.math3.util", "BigReal", "public static final BigReal ONE = new BigReal(BigDecimal.ONE);" ], [ "IDENTITY", "org.apache.commons.math3.complex", "Quaternion", "public static final Quaternion IDENTITY = new Quaternion(1, 0, 0, 0);" ], [ "ZERO", "org.apache.commons.math3.complex", "Quaternion", "public static final Quaternion ZERO = new Quaternion(0, 0, 0, 0);" ], [ "I", "org.apache.commons.math3.complex", "Quaternion", "public static final Quaternion I = new Quaternion(0, 1, 0, 0);" ], [ "J", "org.apache.commons.math3.complex", "Quaternion", "public static final Quaternion J = new Quaternion(0, 0, 1, 0);" ], [ "K", "org.apache.commons.math3.complex", "Quaternion", "public static final Quaternion K = new Quaternion(0, 0, 0, 1);" ], [ "I", "org.apache.commons.math3.complex", "Complex", "public static final Complex I = new Complex(0.0, 1.0);" ], [ "NaN", "org.apache.commons.math3.complex", "Complex", "public static final Complex NaN = new Complex(Double.NaN, Double.NaN);" ], [ "INF", "org.apache.commons.math3.complex", "Complex", "public static final Complex INF = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);" ], [ "ONE", "org.apache.commons.math3.complex", "Complex", "public static final Complex ONE = new Complex(1.0, 0.0);" ], [ "ZERO", "org.apache.commons.math3.complex", "Complex", "public static final Complex ZERO = new Complex(0.0, 0.0);" ], [ "MINIMUM_PROBLEM_DIMENSION", "org.apache.commons.math3.optimization.direct", "BOBYQAOptimizer", "public static final int MINIMUM_PROBLEM_DIMENSION = 2;" ], [ "DEFAULT_INITIAL_RADIUS", "org.apache.commons.math3.optimization.direct", "BOBYQAOptimizer", "public static final double DEFAULT_INITIAL_RADIUS = 10.0;" ], [ "DEFAULT_STOPPING_RADIUS", "org.apache.commons.math3.optimization.direct", "BOBYQAOptimizer", "public static final double DEFAULT_STOPPING_RADIUS = 1E-8;" ], [ "DEFAULT_CHECKFEASABLECOUNT", "org.apache.commons.math3.optimization.direct", "CMAESOptimizer", "public static final int DEFAULT_CHECKFEASABLECOUNT = 0;" ], [ "DEFAULT_STOPFITNESS", "org.apache.commons.math3.optimization.direct", "CMAESOptimizer", "public static final double DEFAULT_STOPFITNESS = 0;" ], [ "DEFAULT_ISACTIVECMA", "org.apache.commons.math3.optimization.direct", "CMAESOptimizer", "public static final boolean DEFAULT_ISACTIVECMA = true;" ], [ "DEFAULT_MAXITERATIONS", "org.apache.commons.math3.optimization.direct", "CMAESOptimizer", "public static final int DEFAULT_MAXITERATIONS = 30000;" ], [ "DEFAULT_DIAGONALONLY", "org.apache.commons.math3.optimization.direct", "CMAESOptimizer", "public static final int DEFAULT_DIAGONALONLY = 0;" ], [ "DEFAULT_RANDOMGENERATOR", "org.apache.commons.math3.optimization.direct", "CMAESOptimizer", "public static final RandomGenerator DEFAULT_RANDOMGENERATOR = new MersenneTwister();" ], [ "DEFAULT_MAX_ITERATIONS", "org.apache.commons.math3.optimization.linear", "AbstractLinearOptimizer", "public static final int DEFAULT_MAX_ITERATIONS = 100;" ], [ "DEFAULT_FORMAT", "org.apache.commons.math3.linear", "MatrixUtils", "public static final RealMatrixFormat DEFAULT_FORMAT = RealMatrixFormat.getInstance();" ], [ "OCTAVE_FORMAT", "org.apache.commons.math3.linear", "MatrixUtils", "public static final RealMatrixFormat OCTAVE_FORMAT = new RealMatrixFormat(\"[\", \"]\", \"\", \"\", \"; \", \", \");" ], [ "DEFAULT_ZERO_TOLERANCE", "org.apache.commons.math3.linear", "OpenMapRealVector", "public static final double DEFAULT_ZERO_TOLERANCE = 1.0e-12;" ], [ "BLOCK_SIZE", "org.apache.commons.math3.linear", "BlockFieldMatrix", "public static final int BLOCK_SIZE = 36;" ], [ "OPERATOR", "org.apache.commons.math3.linear", "ConjugateGradient", "public static final String OPERATOR = \"operator\";" ], [ "VECTOR", "org.apache.commons.math3.linear", "ConjugateGradient", "public static final String VECTOR = \"vector\";" ], [ "DEFAULT_RELATIVE_SYMMETRY_THRESHOLD", "org.apache.commons.math3.linear", "CholeskyDecomposition", "public static final double DEFAULT_RELATIVE_SYMMETRY_THRESHOLD = 1.0e-15;" ], [ "DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD", "org.apache.commons.math3.linear", "CholeskyDecomposition", "public static final double DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD = 1.0e-10;" ], [ "BLOCK_SIZE", "org.apache.commons.math3.linear", "BlockRealMatrix", "public static final int BLOCK_SIZE = 52;" ], [ "CBRT_MACH_PREC", "org.apache.commons.math3.linear", "SymmLQ", "static final double CBRT_MACH_PREC;" ], [ "MACH_PREC", "org.apache.commons.math3.linear", "SymmLQ", "static final double MACH_PREC;" ], [ "CBRT_MACH_PREC", "org.apache.commons.math3.linear", "State", "static final double CBRT_MACH_PREC;" ], [ "MACH_PREC", "org.apache.commons.math3.linear", "State", "static final double MACH_PREC;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "CauchyDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "SOLVER_DEFAULT_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "AbstractRealDistribution", "public static final double SOLVER_DEFAULT_ABSOLUTE_ACCURACY = 1e-6;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "TDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "ChiSquaredDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "BetaDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "NormalDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "UniformRealDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "WeibullDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "NakagamiDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "ExponentialDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "LogNormalDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "ParetoDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "FDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_MAX_ITERATIONS", "org.apache.commons.math3.distribution", "PoissonDistribution", "public static final int DEFAULT_MAX_ITERATIONS = 10000000;" ], [ "DEFAULT_EPSILON", "org.apache.commons.math3.distribution", "PoissonDistribution", "public static final double DEFAULT_EPSILON = 1e-12;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "GammaDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_ULPS", "org.apache.commons.math3.optim.linear", "SimplexSolver", "static final int DEFAULT_ULPS = 10;" ], [ "DEFAULT_CUT_OFF", "org.apache.commons.math3.optim.linear", "SimplexSolver", "static final double DEFAULT_CUT_OFF = 1e-10;" ], [ "MINIMUM_PROBLEM_DIMENSION", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv", "BOBYQAOptimizer", "public static final int MINIMUM_PROBLEM_DIMENSION = 2;" ], [ "DEFAULT_INITIAL_RADIUS", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv", "BOBYQAOptimizer", "public static final double DEFAULT_INITIAL_RADIUS = 10.0;" ], [ "DEFAULT_STOPPING_RADIUS", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv", "BOBYQAOptimizer", "public static final double DEFAULT_STOPPING_RADIUS = 1E-8;" ], [ "GAMMA", "org.apache.commons.math3.special", "Gamma", "public static final double GAMMA = 0.577215664901532860606512090082;" ], [ "LANCZOS_G", "org.apache.commons.math3.special", "Gamma", "public static final double LANCZOS_G = 607.0 / 128.0;" ], [ "DEFAULT_NAN_STRATEGY", "org.apache.commons.math3.stat.ranking", "NaturalRanking", "public static final NaNStrategy DEFAULT_NAN_STRATEGY = NaNStrategy.FAILED;" ], [ "DEFAULT_TIES_STRATEGY", "org.apache.commons.math3.stat.ranking", "NaturalRanking", "public static final TiesStrategy DEFAULT_TIES_STRATEGY = TiesStrategy.AVERAGE;" ], [ "MAXIMUM_PARTIAL_SUM_COUNT", "org.apache.commons.math3.stat.inference", "KolmogorovSmirnovTest", "protected static final int MAXIMUM_PARTIAL_SUM_COUNT = 100000;" ], [ "KS_SUM_CAUCHY_CRITERION", "org.apache.commons.math3.stat.inference", "KolmogorovSmirnovTest", "protected static final double KS_SUM_CAUCHY_CRITERION = 1E-20;" ], [ "PG_SUM_RELATIVE_ERROR", "org.apache.commons.math3.stat.inference", "KolmogorovSmirnovTest", "protected static final double PG_SUM_RELATIVE_ERROR = 1.0e-10;" ], [ "SMALL_SAMPLE_PRODUCT", "org.apache.commons.math3.stat.inference", "KolmogorovSmirnovTest", "protected static final int SMALL_SAMPLE_PRODUCT = 200;" ], [ "LARGE_SAMPLE_PRODUCT", "org.apache.commons.math3.stat.inference", "KolmogorovSmirnovTest", "protected static final int LARGE_SAMPLE_PRODUCT = 10000;" ], [ "MONTE_CARLO_ITERATIONS", "org.apache.commons.math3.stat.inference", "KolmogorovSmirnovTest", "protected static final int MONTE_CARLO_ITERATIONS = 1000000;" ], [ "INFINITE_WINDOW", "org.apache.commons.math3.stat.descriptive", "DescriptiveStatistics", "public static final int INFINITE_WINDOW = -1;" ], [ "UPSIDE_VARIANCE", "org.apache.commons.math3.stat.descriptive.moment", "SemiVariance", "public static final Direction UPSIDE_VARIANCE = Direction.UPSIDE;" ], [ "DOWNSIDE_VARIANCE", "org.apache.commons.math3.stat.descriptive.moment", "SemiVariance", "public static final Direction DOWNSIDE_VARIANCE = Direction.DOWNSIDE;" ], [ "COMPARATOR", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "static final Comparator<PairNeuronDouble> COMPARATOR = new Comparator<PairNeuronDouble>() {\n\n    /**\n     * {@inheritDoc}\n     */\n    public int compare(PairNeuronDouble o1, PairNeuronDouble o2) {\n        return Double.compare(o1.value, o2.value);\n    }\n};" ], [ "COMPARATOR", "org.apache.commons.math3.ml.neuralnet", "PairNeuronDouble", "static final Comparator<PairNeuronDouble> COMPARATOR = new Comparator<PairNeuronDouble>() {\n\n    /**\n     * {@inheritDoc}\n     */\n    public int compare(PairNeuronDouble o1, PairNeuronDouble o2) {\n        return Double.compare(o1.value, o2.value);\n    }\n};" ], [ "RADIX", "org.apache.commons.math3.dfp", "Dfp", "public static final int RADIX = 10000;" ], [ "MIN_EXP", "org.apache.commons.math3.dfp", "Dfp", "public static final int MIN_EXP = -32767;" ], [ "MAX_EXP", "org.apache.commons.math3.dfp", "Dfp", "public static final int MAX_EXP = 32768;" ], [ "ERR_SCALE", "org.apache.commons.math3.dfp", "Dfp", "public static final int ERR_SCALE = 32760;" ], [ "FINITE", "org.apache.commons.math3.dfp", "Dfp", "public static final byte FINITE = 0;" ], [ "INFINITE", "org.apache.commons.math3.dfp", "Dfp", "public static final byte INFINITE = 1;" ], [ "SNAN", "org.apache.commons.math3.dfp", "Dfp", "public static final byte SNAN = 2;" ], [ "QNAN", "org.apache.commons.math3.dfp", "Dfp", "public static final byte QNAN = 3;" ], [ "FLAG_INVALID", "org.apache.commons.math3.dfp", "DfpField", "public static final int FLAG_INVALID = 1;" ], [ "FLAG_DIV_ZERO", "org.apache.commons.math3.dfp", "DfpField", "public static final int FLAG_DIV_ZERO = 2;" ], [ "FLAG_OVERFLOW", "org.apache.commons.math3.dfp", "DfpField", "public static final int FLAG_OVERFLOW = 4;" ], [ "FLAG_UNDERFLOW", "org.apache.commons.math3.dfp", "DfpField", "public static final int FLAG_UNDERFLOW = 8;" ], [ "FLAG_INEXACT", "org.apache.commons.math3.dfp", "DfpField", "public static final int FLAG_INEXACT = 16;" ], [ "DEFAULT_PREFIX", "org.apache.commons.math3.geometry", "VectorFormat", "public static final String DEFAULT_PREFIX = \"{\";" ], [ "DEFAULT_SUFFIX", "org.apache.commons.math3.geometry", "VectorFormat", "public static final String DEFAULT_SUFFIX = \"}\";" ], [ "DEFAULT_SEPARATOR", "org.apache.commons.math3.geometry", "VectorFormat", "public static final String DEFAULT_SEPARATOR = \"; \";" ], [ "XYZ", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder XYZ = new RotationOrder(\"XYZ\", Vector3D.PLUS_I, Vector3D.PLUS_J, Vector3D.PLUS_K);" ], [ "XZY", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder XZY = new RotationOrder(\"XZY\", Vector3D.PLUS_I, Vector3D.PLUS_K, Vector3D.PLUS_J);" ], [ "YXZ", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder YXZ = new RotationOrder(\"YXZ\", Vector3D.PLUS_J, Vector3D.PLUS_I, Vector3D.PLUS_K);" ], [ "YZX", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder YZX = new RotationOrder(\"YZX\", Vector3D.PLUS_J, Vector3D.PLUS_K, Vector3D.PLUS_I);" ], [ "ZXY", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder ZXY = new RotationOrder(\"ZXY\", Vector3D.PLUS_K, Vector3D.PLUS_I, Vector3D.PLUS_J);" ], [ "ZYX", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder ZYX = new RotationOrder(\"ZYX\", Vector3D.PLUS_K, Vector3D.PLUS_J, Vector3D.PLUS_I);" ], [ "XYX", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder XYX = new RotationOrder(\"XYX\", Vector3D.PLUS_I, Vector3D.PLUS_J, Vector3D.PLUS_I);" ], [ "XZX", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder XZX = new RotationOrder(\"XZX\", Vector3D.PLUS_I, Vector3D.PLUS_K, Vector3D.PLUS_I);" ], [ "YXY", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder YXY = new RotationOrder(\"YXY\", Vector3D.PLUS_J, Vector3D.PLUS_I, Vector3D.PLUS_J);" ], [ "YZY", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder YZY = new RotationOrder(\"YZY\", Vector3D.PLUS_J, Vector3D.PLUS_K, Vector3D.PLUS_J);" ], [ "ZXZ", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder ZXZ = new RotationOrder(\"ZXZ\", Vector3D.PLUS_K, Vector3D.PLUS_I, Vector3D.PLUS_K);" ], [ "ZYZ", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder ZYZ = new RotationOrder(\"ZYZ\", Vector3D.PLUS_K, Vector3D.PLUS_J, Vector3D.PLUS_K);" ], [ "IDENTITY", "org.apache.commons.math3.geometry.euclidean.threed", "Rotation", "public static final Rotation IDENTITY = new Rotation(1.0, 0.0, 0.0, 0.0, false);" ], [ "ZERO", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D ZERO = new Vector3D(0, 0, 0);" ], [ "PLUS_I", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D PLUS_I = new Vector3D(1, 0, 0);" ], [ "MINUS_I", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D MINUS_I = new Vector3D(-1, 0, 0);" ], [ "PLUS_J", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D PLUS_J = new Vector3D(0, 1, 0);" ], [ "MINUS_J", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D MINUS_J = new Vector3D(0, -1, 0);" ], [ "PLUS_K", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D PLUS_K = new Vector3D(0, 0, 1);" ], [ "MINUS_K", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D MINUS_K = new Vector3D(0, 0, -1);" ], [ "NaN", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D NaN = new Vector3D(Double.NaN, Double.NaN, Double.NaN);" ], [ "POSITIVE_INFINITY", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D POSITIVE_INFINITY = new Vector3D(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);" ], [ "NEGATIVE_INFINITY", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D NEGATIVE_INFINITY = new Vector3D(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);" ], [ "ZERO", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static final Vector1D ZERO = new Vector1D(0.0);" ], [ "ONE", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static final Vector1D ONE = new Vector1D(1.0);" ], [ "NaN", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static final Vector1D NaN = new Vector1D(Double.NaN);" ], [ "POSITIVE_INFINITY", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static final Vector1D POSITIVE_INFINITY = new Vector1D(Double.POSITIVE_INFINITY);" ], [ "NEGATIVE_INFINITY", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static final Vector1D NEGATIVE_INFINITY = new Vector1D(Double.NEGATIVE_INFINITY);" ], [ "ZERO", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static final Vector2D ZERO = new Vector2D(0, 0);" ], [ "NaN", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static final Vector2D NaN = new Vector2D(Double.NaN, Double.NaN);" ], [ "POSITIVE_INFINITY", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static final Vector2D POSITIVE_INFINITY = new Vector2D(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);" ], [ "NEGATIVE_INFINITY", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static final Vector2D NEGATIVE_INFINITY = new Vector2D(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);" ], [ "NaN", "org.apache.commons.math3.geometry.spherical.oned", "S1Point", "public static final S1Point NaN = new S1Point(Double.NaN, Vector2D.NaN);" ], [ "PLUS_I", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point PLUS_I = new S2Point(0, 0.5 * FastMath.PI, Vector3D.PLUS_I);" ], [ "PLUS_J", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point PLUS_J = new S2Point(0.5 * FastMath.PI, 0.5 * FastMath.PI, Vector3D.PLUS_J);" ], [ "PLUS_K", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point PLUS_K = new S2Point(0, 0, Vector3D.PLUS_K);" ], [ "MINUS_I", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point MINUS_I = new S2Point(FastMath.PI, 0.5 * FastMath.PI, Vector3D.MINUS_I);" ], [ "MINUS_J", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point MINUS_J = new S2Point(1.5 * FastMath.PI, 0.5 * FastMath.PI, Vector3D.MINUS_J);" ], [ "MINUS_K", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point MINUS_K = new S2Point(0, FastMath.PI, Vector3D.MINUS_K);" ], [ "NaN", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point NaN = new S2Point(Double.NaN, Double.NaN, Vector3D.NaN);" ], [ "DIGEST_MODE", "org.apache.commons.math3.random", "ValueServer", "public static final int DIGEST_MODE = 0;" ], [ "REPLAY_MODE", "org.apache.commons.math3.random", "ValueServer", "public static final int REPLAY_MODE = 1;" ], [ "UNIFORM_MODE", "org.apache.commons.math3.random", "ValueServer", "public static final int UNIFORM_MODE = 2;" ], [ "EXPONENTIAL_MODE", "org.apache.commons.math3.random", "ValueServer", "public static final int EXPONENTIAL_MODE = 3;" ], [ "GAUSSIAN_MODE", "org.apache.commons.math3.random", "ValueServer", "public static final int GAUSSIAN_MODE = 4;" ], [ "CONSTANT_MODE", "org.apache.commons.math3.random", "ValueServer", "public static final int CONSTANT_MODE = 5;" ], [ "DEFAULT_BIN_COUNT", "org.apache.commons.math3.random", "EmpiricalDistribution", "public static final int DEFAULT_BIN_COUNT = 1000;" ], [ "TWO", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction TWO = new Fraction(2, 1);" ], [ "ONE", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction ONE = new Fraction(1, 1);" ], [ "ZERO", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction ZERO = new Fraction(0, 1);" ], [ "FOUR_FIFTHS", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction FOUR_FIFTHS = new Fraction(4, 5);" ], [ "ONE_FIFTH", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction ONE_FIFTH = new Fraction(1, 5);" ], [ "ONE_HALF", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction ONE_HALF = new Fraction(1, 2);" ], [ "ONE_QUARTER", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction ONE_QUARTER = new Fraction(1, 4);" ], [ "ONE_THIRD", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction ONE_THIRD = new Fraction(1, 3);" ], [ "THREE_FIFTHS", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction THREE_FIFTHS = new Fraction(3, 5);" ], [ "THREE_QUARTERS", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction THREE_QUARTERS = new Fraction(3, 4);" ], [ "TWO_FIFTHS", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction TWO_FIFTHS = new Fraction(2, 5);" ], [ "TWO_QUARTERS", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction TWO_QUARTERS = new Fraction(2, 4);" ], [ "TWO_THIRDS", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction TWO_THIRDS = new Fraction(2, 3);" ], [ "MINUS_ONE", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction MINUS_ONE = new Fraction(-1, 1);" ], [ "TWO", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction TWO = new BigFraction(2);" ], [ "ONE", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction ONE = new BigFraction(1);" ], [ "ZERO", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction ZERO = new BigFraction(0);" ], [ "MINUS_ONE", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction MINUS_ONE = new BigFraction(-1);" ], [ "FOUR_FIFTHS", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction FOUR_FIFTHS = new BigFraction(4, 5);" ], [ "ONE_FIFTH", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction ONE_FIFTH = new BigFraction(1, 5);" ], [ "ONE_HALF", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction ONE_HALF = new BigFraction(1, 2);" ], [ "ONE_QUARTER", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction ONE_QUARTER = new BigFraction(1, 4);" ], [ "ONE_THIRD", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction ONE_THIRD = new BigFraction(1, 3);" ], [ "THREE_FIFTHS", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction THREE_FIFTHS = new BigFraction(3, 5);" ], [ "THREE_QUARTERS", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction THREE_QUARTERS = new BigFraction(3, 4);" ], [ "TWO_FIFTHS", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction TWO_FIFTHS = new BigFraction(2, 5);" ], [ "TWO_QUARTERS", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction TWO_QUARTERS = new BigFraction(2, 4);" ], [ "TWO_THIRDS", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction TWO_THIRDS = new BigFraction(2, 3);" ], [ "INTEGER_ZERO", "org.apache.commons.math3.exception", "MathIllegalNumberException", "protected static final Integer INTEGER_ZERO = Integer.valueOf(0);" ], [ "serialVersionUID", "org.apache.commons.math3.transform", "FastSineTransformer", "static final long serialVersionUID = 20120211L;" ], [ "serialVersionUID", "org.apache.commons.math3.transform", "FastFourierTransformer", "static final long serialVersionUID = 20120210L;" ], [ "serialVersionUID", "org.apache.commons.math3.transform", "FastCosineTransformer", "static final long serialVersionUID = 20120212L;" ], [ "serialVersionUID", "org.apache.commons.math3.transform", "FastHadamardTransformer", "static final long serialVersionUID = 20120211L;" ] ],
  "tokensMethodJavadocValues" : [ ],
  "tokensMethodArguments" : [ [ "x", "org.apache.commons.math3.dfp", "Dfp" ], [ "y", "org.apache.commons.math3.dfp", "Dfp" ] ],
  "tokensMethodVariablesNonPrivateNonStaticNonVoidMethods" : [ [ "pow", "org.apache.commons.math3.dfp", "Dfp", "public Dfp pow(final Dfp e)" ], [ "dfp2sci", "org.apache.commons.math3.dfp", "Dfp", "protected String dfp2sci()" ], [ "strictlyNegative", "org.apache.commons.math3.dfp", "Dfp", "public boolean strictlyNegative()" ], [ "hypot", "org.apache.commons.math3", "RealFieldElement", "public abstract T hypot(T arg0) throws DimensionMismatchException" ], [ "dotrap", "org.apache.commons.math3.dfp", "Dfp", "public Dfp dotrap(int type, String what, Dfp oper, Dfp result)" ], [ "newInstance", "org.apache.commons.math3.dfp", "Dfp", "public Dfp newInstance(final String s)" ], [ "clone", "java.lang", "Object", "protected native Object clone() throws CloneNotSupportedException" ], [ "log10K", "org.apache.commons.math3.dfp", "Dfp", "public int log10K()" ], [ "signum", "org.apache.commons.math3.dfp", "Dfp", "public Dfp signum()" ], [ "tanh", "org.apache.commons.math3", "RealFieldElement", "public abstract T tanh()" ], [ "isNaN", "org.apache.commons.math3.dfp", "Dfp", "public boolean isNaN()" ], [ "sin", "org.apache.commons.math3", "RealFieldElement", "public abstract T sin()" ], [ "align", "org.apache.commons.math3.dfp", "Dfp", "protected int align(int e)" ], [ "rint", "org.apache.commons.math3", "RealFieldElement", "public abstract T rint()" ], [ "rootN", "org.apache.commons.math3.dfp", "Dfp", "public Dfp rootN(final int n)" ], [ "remainder", "org.apache.commons.math3", "RealFieldElement", "public abstract T remainder(double arg0)" ], [ "copySign", "org.apache.commons.math3", "RealFieldElement", "public abstract T copySign(T arg0)" ], [ "subtract", "org.apache.commons.math3", "FieldElement", "public abstract T subtract(T arg0) throws NullArgumentException" ], [ "newInstance", "org.apache.commons.math3.dfp", "Dfp", "public Dfp newInstance(final byte x)" ], [ "rint", "org.apache.commons.math3.dfp", "Dfp", "public Dfp rint()" ], [ "linearCombination", "org.apache.commons.math3.dfp", "Dfp", "public Dfp linearCombination(final Dfp a1, final Dfp b1, final Dfp a2, final Dfp b2, final Dfp a3, final Dfp b3, final Dfp a4, final Dfp b4)" ], [ "reciprocal", "org.apache.commons.math3.dfp", "Dfp", "public Dfp reciprocal()" ], [ "abs", "org.apache.commons.math3.dfp", "Dfp", "public Dfp abs()" ], [ "exp", "org.apache.commons.math3.dfp", "Dfp", "public Dfp exp()" ], [ "linearCombination", "org.apache.commons.math3.dfp", "Dfp", "public Dfp linearCombination(final Dfp a1, final Dfp b1, final Dfp a2, final Dfp b2)" ], [ "subtract", "org.apache.commons.math3.dfp", "Dfp", "public Dfp subtract(final Dfp x)" ], [ "cbrt", "org.apache.commons.math3.dfp", "Dfp", "public Dfp cbrt()" ], [ "linearCombination", "org.apache.commons.math3", "RealFieldElement", "public abstract T linearCombination(double[] arg0, T[] arg1) throws DimensionMismatchException" ], [ "reciprocal", "org.apache.commons.math3", "RealFieldElement", "public abstract T reciprocal()" ], [ "acos", "org.apache.commons.math3", "RealFieldElement", "public abstract T acos()" ], [ "expm1", "org.apache.commons.math3", "RealFieldElement", "public abstract T expm1()" ], [ "sin", "org.apache.commons.math3.dfp", "Dfp", "public Dfp sin()" ], [ "newInstance", "org.apache.commons.math3.dfp", "Dfp", "public Dfp newInstance(final int x)" ], [ "greaterThan", "org.apache.commons.math3.dfp", "Dfp", "public boolean greaterThan(final Dfp x)" ], [ "remainder", "org.apache.commons.math3.dfp", "Dfp", "public Dfp remainder(final Dfp d)" ], [ "hypot", "org.apache.commons.math3.dfp", "Dfp", "public Dfp hypot(final Dfp y)" ], [ "cosh", "org.apache.commons.math3", "RealFieldElement", "public abstract T cosh()" ], [ "toDouble", "org.apache.commons.math3.dfp", "Dfp", "public double toDouble()" ], [ "linearCombination", "org.apache.commons.math3.dfp", "Dfp", "public Dfp linearCombination(final double a1, final Dfp b1, final double a2, final Dfp b2, final double a3, final Dfp b3, final double a4, final Dfp b4)" ], [ "positiveOrNull", "org.apache.commons.math3.dfp", "Dfp", "public boolean positiveOrNull()" ], [ "linearCombination", "org.apache.commons.math3", "RealFieldElement", "public abstract T linearCombination(T arg0, T arg1, T arg2, T arg3, T arg4, T arg5)" ], [ "rootN", "org.apache.commons.math3", "RealFieldElement", "public abstract T rootN(int arg0)" ], [ "linearCombination", "org.apache.commons.math3.dfp", "Dfp", "public Dfp linearCombination(final double a1, final Dfp b1, final double a2, final Dfp b2)" ], [ "linearCombination", "org.apache.commons.math3", "RealFieldElement", "public abstract T linearCombination(T arg0, T arg1, T arg2, T arg3)" ], [ "multiply", "org.apache.commons.math3.dfp", "Dfp", "public Dfp multiply(final double a)" ], [ "divide", "org.apache.commons.math3.dfp", "Dfp", "public Dfp divide(final double a)" ], [ "remainder", "org.apache.commons.math3.dfp", "Dfp", "public Dfp remainder(final double a)" ], [ "newInstance", "org.apache.commons.math3.dfp", "Dfp", "public Dfp newInstance()" ], [ "power10K", "org.apache.commons.math3.dfp", "Dfp", "public Dfp power10K(final int e)" ], [ "acos", "org.apache.commons.math3.dfp", "Dfp", "public Dfp acos()" ], [ "scalb", "org.apache.commons.math3.dfp", "Dfp", "public Dfp scalb(final int n)" ], [ "linearCombination", "org.apache.commons.math3", "RealFieldElement", "public abstract T linearCombination(double arg0, T arg1, double arg2, T arg3, double arg4, T arg5)" ], [ "power10", "org.apache.commons.math3.dfp", "Dfp", "public Dfp power10(final int e)" ], [ "getZero", "org.apache.commons.math3.dfp", "Dfp", "public Dfp getZero()" ], [ "classify", "org.apache.commons.math3.dfp", "Dfp", "public int classify()" ], [ "cos", "org.apache.commons.math3.dfp", "Dfp", "public Dfp cos()" ], [ "unequal", "org.apache.commons.math3.dfp", "Dfp", "public boolean unequal(final Dfp x)" ], [ "newInstance", "org.apache.commons.math3.dfp", "Dfp", "public Dfp newInstance(final Dfp d)" ], [ "pow", "org.apache.commons.math3", "RealFieldElement", "public abstract T pow(T arg0) throws DimensionMismatchException" ], [ "divide", "org.apache.commons.math3.dfp", "Dfp", "public Dfp divide(int divisor)" ], [ "intLog10", "org.apache.commons.math3.dfp", "Dfp", "public int intLog10()" ], [ "pow", "org.apache.commons.math3.dfp", "Dfp", "public Dfp pow(final double p)" ], [ "linearCombination", "org.apache.commons.math3", "RealFieldElement", "public abstract T linearCombination(T arg0, T arg1, T arg2, T arg3, T arg4, T arg5, T arg6, T arg7)" ], [ "getClass", "java.lang", "Object", "public final native Class<? extends Object> getClass()" ], [ "toSplitDouble", "org.apache.commons.math3.dfp", "Dfp", "public double[] toSplitDouble()" ], [ "expm1", "org.apache.commons.math3.dfp", "Dfp", "public Dfp expm1()" ], [ "ceil", "org.apache.commons.math3.dfp", "Dfp", "public Dfp ceil()" ], [ "sinh", "org.apache.commons.math3.dfp", "Dfp", "public Dfp sinh()" ], [ "equals", "org.apache.commons.math3.dfp", "Dfp", "public boolean equals(final Object other)" ], [ "ceil", "org.apache.commons.math3", "RealFieldElement", "public abstract T ceil()" ], [ "asin", "org.apache.commons.math3.dfp", "Dfp", "public Dfp asin()" ], [ "signum", "org.apache.commons.math3", "RealFieldElement", "public abstract T signum()" ], [ "copySign", "org.apache.commons.math3.dfp", "Dfp", "public Dfp copySign(final Dfp s)" ], [ "add", "org.apache.commons.math3", "RealFieldElement", "public abstract T add(double arg0)" ], [ "negativeOrNull", "org.apache.commons.math3.dfp", "Dfp", "public boolean negativeOrNull()" ], [ "add", "org.apache.commons.math3.dfp", "Dfp", "public Dfp add(final Dfp x)" ], [ "newInstance", "org.apache.commons.math3.dfp", "Dfp", "public Dfp newInstance(final byte sig, final byte code)" ], [ "copySign", "org.apache.commons.math3", "RealFieldElement", "public abstract T copySign(double arg0)" ], [ "round", "org.apache.commons.math3.dfp", "Dfp", "protected int round(int n)" ], [ "log1p", "org.apache.commons.math3", "RealFieldElement", "public abstract T log1p()" ], [ "cbrt", "org.apache.commons.math3", "RealFieldElement", "public abstract T cbrt()" ], [ "getField", "org.apache.commons.math3.dfp", "Dfp", "public DfpField getField()" ], [ "asinh", "org.apache.commons.math3.dfp", "Dfp", "public Dfp asinh()" ], [ "copySign", "org.apache.commons.math3.dfp", "Dfp", "public Dfp copySign(final double s)" ], [ "pow", "org.apache.commons.math3", "RealFieldElement", "public abstract T pow(int arg0)" ], [ "sqrt", "org.apache.commons.math3.dfp", "Dfp", "public Dfp sqrt()" ], [ "tanh", "org.apache.commons.math3.dfp", "Dfp", "public Dfp tanh()" ], [ "getOne", "org.apache.commons.math3.dfp", "Dfp", "public Dfp getOne()" ], [ "getReal", "org.apache.commons.math3.dfp", "Dfp", "public double getReal()" ], [ "linearCombination", "org.apache.commons.math3.dfp", "Dfp", "public Dfp linearCombination(final Dfp[] a, final Dfp[] b) throws DimensionMismatchException" ], [ "isInfinite", "org.apache.commons.math3.dfp", "Dfp", "public boolean isInfinite()" ], [ "toString", "org.apache.commons.math3.dfp", "Dfp", "public String toString()" ], [ "newInstance", "org.apache.commons.math3.dfp", "Dfp", "public Dfp newInstance(final double x)" ], [ "round", "org.apache.commons.math3.dfp", "Dfp", "public long round()" ], [ "negate", "org.apache.commons.math3.dfp", "Dfp", "public Dfp negate()" ], [ "log10", "org.apache.commons.math3.dfp", "Dfp", "public int log10()" ], [ "multiply", "org.apache.commons.math3", "RealFieldElement", "public abstract T multiply(double arg0)" ], [ "getTwo", "org.apache.commons.math3.dfp", "Dfp", "public Dfp getTwo()" ], [ "getField", "org.apache.commons.math3", "FieldElement", "public abstract Field<T> getField()" ], [ "atan", "org.apache.commons.math3.dfp", "Dfp", "public Dfp atan()" ], [ "divide", "org.apache.commons.math3", "RealFieldElement", "public abstract T divide(double arg0)" ], [ "log", "org.apache.commons.math3", "RealFieldElement", "public abstract T log()" ], [ "asin", "org.apache.commons.math3", "RealFieldElement", "public abstract T asin()" ], [ "complement", "org.apache.commons.math3.dfp", "Dfp", "protected int complement(int extra)" ], [ "linearCombination", "org.apache.commons.math3.dfp", "Dfp", "public Dfp linearCombination(final double a1, final Dfp b1, final double a2, final Dfp b2, final double a3, final Dfp b3)" ], [ "isZero", "org.apache.commons.math3.dfp", "Dfp", "public boolean isZero()" ], [ "log1p", "org.apache.commons.math3.dfp", "Dfp", "public Dfp log1p()" ], [ "trap", "org.apache.commons.math3.dfp", "Dfp", "protected Dfp trap(int type, String what, Dfp oper, Dfp def, Dfp result)" ], [ "linearCombination", "org.apache.commons.math3", "RealFieldElement", "public abstract T linearCombination(double arg0, T arg1, double arg2, T arg3, double arg4, T arg5, double arg6, T arg7)" ], [ "cos", "org.apache.commons.math3", "RealFieldElement", "public abstract T cos()" ], [ "atan2", "org.apache.commons.math3.dfp", "Dfp", "public Dfp atan2(final Dfp x) throws DimensionMismatchException" ], [ "exp", "org.apache.commons.math3", "RealFieldElement", "public abstract T exp()" ], [ "sinh", "org.apache.commons.math3", "RealFieldElement", "public abstract T sinh()" ], [ "divide", "org.apache.commons.math3.dfp", "Dfp", "public Dfp divide(Dfp divisor)" ], [ "linearCombination", "org.apache.commons.math3.dfp", "Dfp", "public Dfp linearCombination(final double[] a, final Dfp[] b) throws DimensionMismatchException" ], [ "linearCombination", "org.apache.commons.math3", "RealFieldElement", "public abstract T linearCombination(double arg0, T arg1, double arg2, T arg3)" ], [ "add", "org.apache.commons.math3", "FieldElement", "public abstract T add(T arg0) throws NullArgumentException" ], [ "floor", "org.apache.commons.math3.dfp", "Dfp", "public Dfp floor()" ], [ "hashCode", "org.apache.commons.math3.dfp", "Dfp", "public int hashCode()" ], [ "getRadixDigits", "org.apache.commons.math3.dfp", "Dfp", "public int getRadixDigits()" ], [ "floor", "org.apache.commons.math3", "RealFieldElement", "public abstract T floor()" ], [ "negate", "org.apache.commons.math3", "FieldElement", "public abstract T negate()" ], [ "cosh", "org.apache.commons.math3.dfp", "Dfp", "public Dfp cosh()" ], [ "multiply", "org.apache.commons.math3.dfp", "Dfp", "public Dfp multiply(final int x)" ], [ "nextAfter", "org.apache.commons.math3.dfp", "Dfp", "public Dfp nextAfter(final Dfp x)" ], [ "divide", "org.apache.commons.math3", "FieldElement", "public abstract T divide(T arg0) throws NullArgumentException, MathArithmeticException" ], [ "abs", "org.apache.commons.math3", "RealFieldElement", "public abstract T abs()" ], [ "subtract", "org.apache.commons.math3", "RealFieldElement", "public abstract T subtract(double arg0)" ], [ "lessThan", "org.apache.commons.math3.dfp", "Dfp", "public boolean lessThan(final Dfp x)" ], [ "tan", "org.apache.commons.math3", "RealFieldElement", "public abstract T tan()" ], [ "scalb", "org.apache.commons.math3", "RealFieldElement", "public abstract T scalb(int arg0)" ], [ "atan2", "org.apache.commons.math3", "RealFieldElement", "public abstract T atan2(T arg0) throws DimensionMismatchException" ], [ "linearCombination", "org.apache.commons.math3", "RealFieldElement", "public abstract T linearCombination(T[] arg0, T[] arg1) throws DimensionMismatchException" ], [ "add", "org.apache.commons.math3.dfp", "Dfp", "public Dfp add(final double a)" ], [ "acosh", "org.apache.commons.math3", "RealFieldElement", "public abstract T acosh()" ], [ "pow", "org.apache.commons.math3.dfp", "Dfp", "public Dfp pow(final int n)" ], [ "asinh", "org.apache.commons.math3", "RealFieldElement", "public abstract T asinh()" ], [ "dfp2string", "org.apache.commons.math3.dfp", "Dfp", "protected String dfp2string()" ], [ "newInstance", "org.apache.commons.math3.dfp", "Dfp", "public Dfp newInstance(final long x)" ], [ "remainder", "org.apache.commons.math3", "RealFieldElement", "public abstract T remainder(T arg0) throws DimensionMismatchException" ], [ "atanh", "org.apache.commons.math3", "RealFieldElement", "public abstract T atanh()" ], [ "strictlyPositive", "org.apache.commons.math3.dfp", "Dfp", "public boolean strictlyPositive()" ], [ "trunc", "org.apache.commons.math3.dfp", "Dfp", "protected Dfp trunc(final DfpField.RoundingMode rmode)" ], [ "linearCombination", "org.apache.commons.math3.dfp", "Dfp", "public Dfp linearCombination(final Dfp a1, final Dfp b1, final Dfp a2, final Dfp b2, final Dfp a3, final Dfp b3)" ], [ "multiply", "org.apache.commons.math3.dfp", "Dfp", "public Dfp multiply(final Dfp x)" ], [ "pow", "org.apache.commons.math3", "RealFieldElement", "public abstract T pow(double arg0)" ], [ "atan", "org.apache.commons.math3", "RealFieldElement", "public abstract T atan()" ], [ "log", "org.apache.commons.math3.dfp", "Dfp", "public Dfp log()" ], [ "acosh", "org.apache.commons.math3.dfp", "Dfp", "public Dfp acosh()" ], [ "subtract", "org.apache.commons.math3.dfp", "Dfp", "public Dfp subtract(final double a)" ], [ "sqrt", "org.apache.commons.math3", "RealFieldElement", "public abstract T sqrt()" ], [ "multiply", "org.apache.commons.math3", "FieldElement", "public abstract T multiply(T arg0) throws NullArgumentException" ], [ "tan", "org.apache.commons.math3.dfp", "Dfp", "public Dfp tan()" ], [ "multiply", "org.apache.commons.math3", "FieldElement", "public abstract T multiply(int arg0)" ], [ "intValue", "org.apache.commons.math3.dfp", "Dfp", "public int intValue()" ], [ "atanh", "org.apache.commons.math3.dfp", "Dfp", "public Dfp atanh()" ], [ "equals", "java.lang", "Object", "public boolean equals(Object arg0)" ], [ "toString", "java.lang", "Object", "public String toString()" ], [ "hashCode", "java.lang", "Object", "public native int hashCode()" ], [ "round", "org.apache.commons.math3", "RealFieldElement", "public abstract long round()" ], [ "getReal", "org.apache.commons.math3", "RealFieldElement", "public abstract double getReal()" ], [ "reciprocal", "org.apache.commons.math3", "FieldElement", "public abstract T reciprocal() throws MathArithmeticException" ] ],
  "tokensMethodVariablesNonPrivateNonStaticAttributes" : [ [ "mant", "org.apache.commons.math3.dfp", "Dfp", "protected int[] mant;" ], [ "sign", "org.apache.commons.math3.dfp", "Dfp", "protected byte sign;" ], [ "exp", "org.apache.commons.math3.dfp", "Dfp", "protected int exp;" ], [ "nans", "org.apache.commons.math3.dfp", "Dfp", "protected byte nans;" ] ],
  "tokensOracleVariablesNonPrivateNonStaticNonVoidMethods" : [ ],
  "tokensOracleVariablesNonPrivateNonStaticAttributes" : [ ]
}, {
  "id" : 22827,
  "oracle" : ";",
  "oracleType" : "NORMAL_POST",
  "projectName" : "commons-math3-3.6.1",
  "packageName" : "org.apache.commons.math3.dfp",
  "className" : "Dfp",
  "javadocTag" : "@return a double approximating the instance",
  "methodJavadoc" : "    /** Convert the instance into a double.\n     * @return a double approximating the instance\n     * @see #toSplitDouble()\n     */",
  "methodSourceCode" : "public double toDouble(){\n    if (isInfinite()) {\n        if (lessThan(getZero())) {\n            return Double.NEGATIVE_INFINITY;\n        } else {\n            return Double.POSITIVE_INFINITY;\n        }\n    }\n    if (isNaN()) {\n        return Double.NaN;\n    }\n    Dfp y = this;\n    boolean negate = false;\n    int cmp0 = compare(this, getZero());\n    if (cmp0 == 0) {\n        return sign < 0 ? -0.0 : +0.0;\n    } else if (cmp0 < 0) {\n        y = negate();\n        negate = true;\n    }\n    /* Find the exponent, first estimate by integer log10, then adjust.\n         Should be faster than doing a natural logarithm.  */\n    int exponent = (int) (y.intLog10() * 3.32);\n    if (exponent < 0) {\n        exponent--;\n    }\n    Dfp tempDfp = DfpMath.pow(getTwo(), exponent);\n    while (tempDfp.lessThan(y) || tempDfp.equals(y)) {\n        tempDfp = tempDfp.multiply(2);\n        exponent++;\n    }\n    exponent--;\n    /* We have the exponent, now work on the mantissa */\n    y = y.divide(DfpMath.pow(getTwo(), exponent));\n    if (exponent > -1023) {\n        y = y.subtract(getOne());\n    }\n    if (exponent < -1074) {\n        return 0;\n    }\n    if (exponent > 1023) {\n        return negate ? Double.NEGATIVE_INFINITY : Double.POSITIVE_INFINITY;\n    }\n    y = y.multiply(newInstance(4503599627370496l)).rint();\n    String str = y.toString();\n    str = str.substring(0, str.length() - 1);\n    long mantissa = Long.parseLong(str);\n    if (mantissa == 4503599627370496L) {\n        // Handle special case where we round up to next power of two\n        mantissa = 0;\n        exponent++;\n    }\n    /* Its going to be subnormal, so make adjustments */\n    if (exponent <= -1023) {\n        exponent--;\n    }\n    while (exponent < -1023) {\n        exponent++;\n        mantissa >>>= 1;\n    }\n    long bits = mantissa | ((exponent + 1023L) << 52);\n    double x = Double.longBitsToDouble(bits);\n    if (negate) {\n        x = -x;\n    }\n    return x;\n}",
  "classJavadoc" : "/**\n *  Decimal floating point library for Java\n *\n *  <p>Another floating point class.  This one is built using radix 10000\n *  which is 10<sup>4</sup>, so its almost decimal.</p>\n *\n *  <p>The design goals here are:\n *  <ol>\n *    <li>Decimal math, or close to it</li>\n *    <li>Settable precision (but no mix between numbers using different settings)</li>\n *    <li>Portability.  Code should be kept as portable as possible.</li>\n *    <li>Performance</li>\n *    <li>Accuracy  - Results should always be +/- 1 ULP for basic\n *         algebraic operation</li>\n *    <li>Comply with IEEE 854-1987 as much as possible.\n *         (See IEEE 854-1987 notes below)</li>\n *  </ol></p>\n *\n *  <p>Trade offs:\n *  <ol>\n *    <li>Memory foot print.  I'm using more memory than necessary to\n *         represent numbers to get better performance.</li>\n *    <li>Digits are bigger, so rounding is a greater loss.  So, if you\n *         really need 12 decimal digits, better use 4 base 10000 digits\n *         there can be one partially filled.</li>\n *  </ol></p>\n *\n *  <p>Numbers are represented  in the following form:\n *  <pre>\n *  n  =  sign &times; mant &times; (radix)<sup>exp</sup>;</p>\n *  </pre>\n *  where sign is &plusmn;1, mantissa represents a fractional number between\n *  zero and one.  mant[0] is the least significant digit.\n *  exp is in the range of -32767 to 32768</p>\n *\n *  <p>IEEE 854-1987  Notes and differences</p>\n *\n *  <p>IEEE 854 requires the radix to be either 2 or 10.  The radix here is\n *  10000, so that requirement is not met, but  it is possible that a\n *  subclassed can be made to make it behave as a radix 10\n *  number.  It is my opinion that if it looks and behaves as a radix\n *  10 number then it is one and that requirement would be met.</p>\n *\n *  <p>The radix of 10000 was chosen because it should be faster to operate\n *  on 4 decimal digits at once instead of one at a time.  Radix 10 behavior\n *  can be realized by adding an additional rounding step to ensure that\n *  the number of decimal digits represented is constant.</p>\n *\n *  <p>The IEEE standard specifically leaves out internal data encoding,\n *  so it is reasonable to conclude that such a subclass of this radix\n *  10000 system is merely an encoding of a radix 10 system.</p>\n *\n *  <p>IEEE 854 also specifies the existence of \"sub-normal\" numbers.  This\n *  class does not contain any such entities.  The most significant radix\n *  10000 digit is always non-zero.  Instead, we support \"gradual underflow\"\n *  by raising the underflow flag for numbers less with exponent less than\n *  expMin, but don't flush to zero until the exponent reaches MIN_EXP-digits.\n *  Thus the smallest number we can represent would be:\n *  1E(-(MIN_EXP-digits-1)*4),  eg, for digits=5, MIN_EXP=-32767, that would\n *  be 1e-131092.</p>\n *\n *  <p>IEEE 854 defines that the implied radix point lies just to the right\n *  of the most significant digit and to the left of the remaining digits.\n *  This implementation puts the implied radix point to the left of all\n *  digits including the most significant one.  The most significant digit\n *  here is the one just to the right of the radix point.  This is a fine\n *  detail and is really only a matter of definition.  Any side effects of\n *  this can be rendered invisible by a subclass.</p>\n * @see DfpField\n * @since 2.2\n */",
  "classSourceCode" : "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.commons.math3.dfp;\n\nimport java.util.Arrays;\n\nimport org.apache.commons.math3.RealFieldElement;\nimport org.apache.commons.math3.exception.DimensionMismatchException;\nimport org.apache.commons.math3.util.FastMath;\n\n/**\n *  Decimal floating point library for Java\n *\n *  <p>Another floating point class.  This one is built using radix 10000\n *  which is 10<sup>4</sup>, so its almost decimal.</p>\n *\n *  <p>The design goals here are:\n *  <ol>\n *    <li>Decimal math, or close to it</li>\n *    <li>Settable precision (but no mix between numbers using different settings)</li>\n *    <li>Portability.  Code should be kept as portable as possible.</li>\n *    <li>Performance</li>\n *    <li>Accuracy  - Results should always be +/- 1 ULP for basic\n *         algebraic operation</li>\n *    <li>Comply with IEEE 854-1987 as much as possible.\n *         (See IEEE 854-1987 notes below)</li>\n *  </ol></p>\n *\n *  <p>Trade offs:\n *  <ol>\n *    <li>Memory foot print.  I'm using more memory than necessary to\n *         represent numbers to get better performance.</li>\n *    <li>Digits are bigger, so rounding is a greater loss.  So, if you\n *         really need 12 decimal digits, better use 4 base 10000 digits\n *         there can be one partially filled.</li>\n *  </ol></p>\n *\n *  <p>Numbers are represented  in the following form:\n *  <pre>\n *  n  =  sign &times; mant &times; (radix)<sup>exp</sup>;</p>\n *  </pre>\n *  where sign is &plusmn;1, mantissa represents a fractional number between\n *  zero and one.  mant[0] is the least significant digit.\n *  exp is in the range of -32767 to 32768</p>\n *\n *  <p>IEEE 854-1987  Notes and differences</p>\n *\n *  <p>IEEE 854 requires the radix to be either 2 or 10.  The radix here is\n *  10000, so that requirement is not met, but  it is possible that a\n *  subclassed can be made to make it behave as a radix 10\n *  number.  It is my opinion that if it looks and behaves as a radix\n *  10 number then it is one and that requirement would be met.</p>\n *\n *  <p>The radix of 10000 was chosen because it should be faster to operate\n *  on 4 decimal digits at once instead of one at a time.  Radix 10 behavior\n *  can be realized by adding an additional rounding step to ensure that\n *  the number of decimal digits represented is constant.</p>\n *\n *  <p>The IEEE standard specifically leaves out internal data encoding,\n *  so it is reasonable to conclude that such a subclass of this radix\n *  10000 system is merely an encoding of a radix 10 system.</p>\n *\n *  <p>IEEE 854 also specifies the existence of \"sub-normal\" numbers.  This\n *  class does not contain any such entities.  The most significant radix\n *  10000 digit is always non-zero.  Instead, we support \"gradual underflow\"\n *  by raising the underflow flag for numbers less with exponent less than\n *  expMin, but don't flush to zero until the exponent reaches MIN_EXP-digits.\n *  Thus the smallest number we can represent would be:\n *  1E(-(MIN_EXP-digits-1)*4),  eg, for digits=5, MIN_EXP=-32767, that would\n *  be 1e-131092.</p>\n *\n *  <p>IEEE 854 defines that the implied radix point lies just to the right\n *  of the most significant digit and to the left of the remaining digits.\n *  This implementation puts the implied radix point to the left of all\n *  digits including the most significant one.  The most significant digit\n *  here is the one just to the right of the radix point.  This is a fine\n *  detail and is really only a matter of definition.  Any side effects of\n *  this can be rendered invisible by a subclass.</p>\n * @see DfpField\n * @since 2.2\n */\npublic class Dfp implements RealFieldElement<Dfp> {\n\n    /** The radix, or base of this system.  Set to 10000 */\n    public static final int RADIX = 10000;\n\n    /** The minimum exponent before underflow is signaled.  Flush to zero\n     *  occurs at minExp-DIGITS */\n    public static final int MIN_EXP = -32767;\n\n    /** The maximum exponent before overflow is signaled and results flushed\n     *  to infinity */\n    public static final int MAX_EXP =  32768;\n\n    /** The amount under/overflows are scaled by before going to trap handler */\n    public static final int ERR_SCALE = 32760;\n\n    /** Indicator value for normal finite numbers. */\n    public static final byte FINITE = 0;\n\n    /** Indicator value for Infinity. */\n    public static final byte INFINITE = 1;\n\n    /** Indicator value for signaling NaN. */\n    public static final byte SNAN = 2;\n\n    /** Indicator value for quiet NaN. */\n    public static final byte QNAN = 3;\n\n    /** String for NaN representation. */\n    private static final String NAN_STRING = \"NaN\";\n\n    /** String for positive infinity representation. */\n    private static final String POS_INFINITY_STRING = \"Infinity\";\n\n    /** String for negative infinity representation. */\n    private static final String NEG_INFINITY_STRING = \"-Infinity\";\n\n    /** Name for traps triggered by addition. */\n    private static final String ADD_TRAP = \"add\";\n\n    /** Name for traps triggered by multiplication. */\n    private static final String MULTIPLY_TRAP = \"multiply\";\n\n    /** Name for traps triggered by division. */\n    private static final String DIVIDE_TRAP = \"divide\";\n\n    /** Name for traps triggered by square root. */\n    private static final String SQRT_TRAP = \"sqrt\";\n\n    /** Name for traps triggered by alignment. */\n    private static final String ALIGN_TRAP = \"align\";\n\n    /** Name for traps triggered by truncation. */\n    private static final String TRUNC_TRAP = \"trunc\";\n\n    /** Name for traps triggered by nextAfter. */\n    private static final String NEXT_AFTER_TRAP = \"nextAfter\";\n\n    /** Name for traps triggered by lessThan. */\n    private static final String LESS_THAN_TRAP = \"lessThan\";\n\n    /** Name for traps triggered by greaterThan. */\n    private static final String GREATER_THAN_TRAP = \"greaterThan\";\n\n    /** Name for traps triggered by newInstance. */\n    private static final String NEW_INSTANCE_TRAP = \"newInstance\";\n\n    /** Mantissa. */\n    protected int[] mant;\n\n    /** Sign bit: 1 for positive, -1 for negative. */\n    protected byte sign;\n\n    /** Exponent. */\n    protected int exp;\n\n    /** Indicator for non-finite / non-number values. */\n    protected byte nans;\n\n    /** Factory building similar Dfp's. */\n    private final DfpField field;\n\n    /** Makes an instance with a value of zero.\n     * @param field field to which this instance belongs\n     */\n    protected Dfp(final DfpField field) {\n        mant = new int[field.getRadixDigits()];\n        sign = 1;\n        exp = 0;\n        nans = FINITE;\n        this.field = field;\n    }\n\n    /** Create an instance from a byte value.\n     * @param field field to which this instance belongs\n     * @param x value to convert to an instance\n     */\n    protected Dfp(final DfpField field, byte x) {\n        this(field, (long) x);\n    }\n\n    /** Create an instance from an int value.\n     * @param field field to which this instance belongs\n     * @param x value to convert to an instance\n     */\n    protected Dfp(final DfpField field, int x) {\n        this(field, (long) x);\n    }\n\n    /** Create an instance from a long value.\n     * @param field field to which this instance belongs\n     * @param x value to convert to an instance\n     */\n    protected Dfp(final DfpField field, long x) {\n\n        // initialize as if 0\n        mant = new int[field.getRadixDigits()];\n        nans = FINITE;\n        this.field = field;\n\n        boolean isLongMin = false;\n        if (x == Long.MIN_VALUE) {\n            // special case for Long.MIN_VALUE (-9223372036854775808)\n            // we must shift it before taking its absolute value\n            isLongMin = true;\n            ++x;\n        }\n\n        // set the sign\n        if (x < 0) {\n            sign = -1;\n            x = -x;\n        } else {\n            sign = 1;\n        }\n\n        exp = 0;\n        while (x != 0) {\n            System.arraycopy(mant, mant.length - exp, mant, mant.length - 1 - exp, exp);\n            mant[mant.length - 1] = (int) (x % RADIX);\n            x /= RADIX;\n            exp++;\n        }\n\n        if (isLongMin) {\n            // remove the shift added for Long.MIN_VALUE\n            // we know in this case that fixing the last digit is sufficient\n            for (int i = 0; i < mant.length - 1; i++) {\n                if (mant[i] != 0) {\n                    mant[i]++;\n                    break;\n                }\n            }\n        }\n    }\n\n    /** Create an instance from a double value.\n     * @param field field to which this instance belongs\n     * @param x value to convert to an instance\n     */\n    protected Dfp(final DfpField field, double x) {\n\n        // initialize as if 0\n        mant = new int[field.getRadixDigits()];\n        sign = 1;\n        exp = 0;\n        nans = FINITE;\n        this.field = field;\n\n        long bits = Double.doubleToLongBits(x);\n        long mantissa = bits & 0x000fffffffffffffL;\n        int exponent = (int) ((bits & 0x7ff0000000000000L) >> 52) - 1023;\n\n        if (exponent == -1023) {\n            // Zero or sub-normal\n            if (x == 0) {\n                // make sure 0 has the right sign\n                if ((bits & 0x8000000000000000L) != 0) {\n                    sign = -1;\n                }\n                return;\n            }\n\n            exponent++;\n\n            // Normalize the subnormal number\n            while ( (mantissa & 0x0010000000000000L) == 0) {\n                exponent--;\n                mantissa <<= 1;\n            }\n            mantissa &= 0x000fffffffffffffL;\n        }\n\n        if (exponent == 1024) {\n            // infinity or NAN\n            if (x != x) {\n                sign = (byte) 1;\n                nans = QNAN;\n            } else if (x < 0) {\n                sign = (byte) -1;\n                nans = INFINITE;\n            } else {\n                sign = (byte) 1;\n                nans = INFINITE;\n            }\n            return;\n        }\n\n        Dfp xdfp = new Dfp(field, mantissa);\n        xdfp = xdfp.divide(new Dfp(field, 4503599627370496l)).add(field.getOne());  // Divide by 2^52, then add one\n        xdfp = xdfp.multiply(DfpMath.pow(field.getTwo(), exponent));\n\n        if ((bits & 0x8000000000000000L) != 0) {\n            xdfp = xdfp.negate();\n        }\n\n        System.arraycopy(xdfp.mant, 0, mant, 0, mant.length);\n        sign = xdfp.sign;\n        exp  = xdfp.exp;\n        nans = xdfp.nans;\n\n    }\n\n    /** Copy constructor.\n     * @param d instance to copy\n     */\n    public Dfp(final Dfp d) {\n        mant  = d.mant.clone();\n        sign  = d.sign;\n        exp   = d.exp;\n        nans  = d.nans;\n        field = d.field;\n    }\n\n    /** Create an instance from a String representation.\n     * @param field field to which this instance belongs\n     * @param s string representation of the instance\n     */\n    protected Dfp(final DfpField field, final String s) {\n\n        // initialize as if 0\n        mant = new int[field.getRadixDigits()];\n        sign = 1;\n        exp = 0;\n        nans = FINITE;\n        this.field = field;\n\n        boolean decimalFound = false;\n        final int rsize = 4;   // size of radix in decimal digits\n        final int offset = 4;  // Starting offset into Striped\n        final char[] striped = new char[getRadixDigits() * rsize + offset * 2];\n\n        // Check some special cases\n        if (s.equals(POS_INFINITY_STRING)) {\n            sign = (byte) 1;\n            nans = INFINITE;\n            return;\n        }\n\n        if (s.equals(NEG_INFINITY_STRING)) {\n            sign = (byte) -1;\n            nans = INFINITE;\n            return;\n        }\n\n        if (s.equals(NAN_STRING)) {\n            sign = (byte) 1;\n            nans = QNAN;\n            return;\n        }\n\n        // Check for scientific notation\n        int p = s.indexOf(\"e\");\n        if (p == -1) { // try upper case?\n            p = s.indexOf(\"E\");\n        }\n\n        final String fpdecimal;\n        int sciexp = 0;\n        if (p != -1) {\n            // scientific notation\n            fpdecimal = s.substring(0, p);\n            String fpexp = s.substring(p+1);\n            boolean negative = false;\n\n            for (int i=0; i<fpexp.length(); i++)\n            {\n                if (fpexp.charAt(i) == '-')\n                {\n                    negative = true;\n                    continue;\n                }\n                if (fpexp.charAt(i) >= '0' && fpexp.charAt(i) <= '9') {\n                    sciexp = sciexp * 10 + fpexp.charAt(i) - '0';\n                }\n            }\n\n            if (negative) {\n                sciexp = -sciexp;\n            }\n        } else {\n            // normal case\n            fpdecimal = s;\n        }\n\n        // If there is a minus sign in the number then it is negative\n        if (fpdecimal.indexOf(\"-\") !=  -1) {\n            sign = -1;\n        }\n\n        // First off, find all of the leading zeros, trailing zeros, and significant digits\n        p = 0;\n\n        // Move p to first significant digit\n        int decimalPos = 0;\n        for (;;) {\n            if (fpdecimal.charAt(p) >= '1' && fpdecimal.charAt(p) <= '9') {\n                break;\n            }\n\n            if (decimalFound && fpdecimal.charAt(p) == '0') {\n                decimalPos--;\n            }\n\n            if (fpdecimal.charAt(p) == '.') {\n                decimalFound = true;\n            }\n\n            p++;\n\n            if (p == fpdecimal.length()) {\n                break;\n            }\n        }\n\n        // Copy the string onto Stripped\n        int q = offset;\n        striped[0] = '0';\n        striped[1] = '0';\n        striped[2] = '0';\n        striped[3] = '0';\n        int significantDigits=0;\n        for(;;) {\n            if (p == (fpdecimal.length())) {\n                break;\n            }\n\n            // Don't want to run pass the end of the array\n            if (q == mant.length*rsize+offset+1) {\n                break;\n            }\n\n            if (fpdecimal.charAt(p) == '.') {\n                decimalFound = true;\n                decimalPos = significantDigits;\n                p++;\n                continue;\n            }\n\n            if (fpdecimal.charAt(p) < '0' || fpdecimal.charAt(p) > '9') {\n                p++;\n                continue;\n            }\n\n            striped[q] = fpdecimal.charAt(p);\n            q++;\n            p++;\n            significantDigits++;\n        }\n\n\n        // If the decimal point has been found then get rid of trailing zeros.\n        if (decimalFound && q != offset) {\n            for (;;) {\n                q--;\n                if (q == offset) {\n                    break;\n                }\n                if (striped[q] == '0') {\n                    significantDigits--;\n                } else {\n                    break;\n                }\n            }\n        }\n\n        // special case of numbers like \"0.00000\"\n        if (decimalFound && significantDigits == 0) {\n            decimalPos = 0;\n        }\n\n        // Implicit decimal point at end of number if not present\n        if (!decimalFound) {\n            decimalPos = q-offset;\n        }\n\n        // Find the number of significant trailing zeros\n        q = offset;  // set q to point to first sig digit\n        p = significantDigits-1+offset;\n\n        while (p > q) {\n            if (striped[p] != '0') {\n                break;\n            }\n            p--;\n        }\n\n        // Make sure the decimal is on a mod 10000 boundary\n        int i = ((rsize * 100) - decimalPos - sciexp % rsize) % rsize;\n        q -= i;\n        decimalPos += i;\n\n        // Make the mantissa length right by adding zeros at the end if necessary\n        while ((p - q) < (mant.length * rsize)) {\n            for (i = 0; i < rsize; i++) {\n                striped[++p] = '0';\n            }\n        }\n\n        // Ok, now we know how many trailing zeros there are,\n        // and where the least significant digit is\n        for (i = mant.length - 1; i >= 0; i--) {\n            mant[i] = (striped[q]   - '0') * 1000 +\n                      (striped[q+1] - '0') * 100  +\n                      (striped[q+2] - '0') * 10   +\n                      (striped[q+3] - '0');\n            q += 4;\n        }\n\n\n        exp = (decimalPos+sciexp) / rsize;\n\n        if (q < striped.length) {\n            // Is there possible another digit?\n            round((striped[q] - '0')*1000);\n        }\n\n    }\n\n    /** Creates an instance with a non-finite value.\n     * @param field field to which this instance belongs\n     * @param sign sign of the Dfp to create\n     * @param nans code of the value, must be one of {@link #INFINITE},\n     * {@link #SNAN},  {@link #QNAN}\n     */\n    protected Dfp(final DfpField field, final byte sign, final byte nans) {\n        this.field = field;\n        this.mant    = new int[field.getRadixDigits()];\n        this.sign    = sign;\n        this.exp     = 0;\n        this.nans    = nans;\n    }\n\n    /** Create an instance with a value of 0.\n     * Use this internally in preference to constructors to facilitate subclasses\n     * @return a new instance with a value of 0\n     */\n    public Dfp newInstance() {\n        return new Dfp(getField());\n    }\n\n    /** Create an instance from a byte value.\n     * @param x value to convert to an instance\n     * @return a new instance with value x\n     */\n    public Dfp newInstance(final byte x) {\n        return new Dfp(getField(), x);\n    }\n\n    /** Create an instance from an int value.\n     * @param x value to convert to an instance\n     * @return a new instance with value x\n     */\n    public Dfp newInstance(final int x) {\n        return new Dfp(getField(), x);\n    }\n\n    /** Create an instance from a long value.\n     * @param x value to convert to an instance\n     * @return a new instance with value x\n     */\n    public Dfp newInstance(final long x) {\n        return new Dfp(getField(), x);\n    }\n\n    /** Create an instance from a double value.\n     * @param x value to convert to an instance\n     * @return a new instance with value x\n     */\n    public Dfp newInstance(final double x) {\n        return new Dfp(getField(), x);\n    }\n\n    /** Create an instance by copying an existing one.\n     * Use this internally in preference to constructors to facilitate subclasses.\n     * @param d instance to copy\n     * @return a new instance with the same value as d\n     */\n    public Dfp newInstance(final Dfp d) {\n\n        // make sure we don't mix number with different precision\n        if (field.getRadixDigits() != d.field.getRadixDigits()) {\n            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);\n            final Dfp result = newInstance(getZero());\n            result.nans = QNAN;\n            return dotrap(DfpField.FLAG_INVALID, NEW_INSTANCE_TRAP, d, result);\n        }\n\n        return new Dfp(d);\n\n    }\n\n    /** Create an instance from a String representation.\n     * Use this internally in preference to constructors to facilitate subclasses.\n     * @param s string representation of the instance\n     * @return a new instance parsed from specified string\n     */\n    public Dfp newInstance(final String s) {\n        return new Dfp(field, s);\n    }\n\n    /** Creates an instance with a non-finite value.\n     * @param sig sign of the Dfp to create\n     * @param code code of the value, must be one of {@link #INFINITE},\n     * {@link #SNAN},  {@link #QNAN}\n     * @return a new instance with a non-finite value\n     */\n    public Dfp newInstance(final byte sig, final byte code) {\n        return field.newDfp(sig, code);\n    }\n\n    /** Get the {@link org.apache.commons.math3.Field Field} (really a {@link DfpField}) to which the instance belongs.\n     * <p>\n     * The field is linked to the number of digits and acts as a factory\n     * for {@link Dfp} instances.\n     * </p>\n     * @return {@link org.apache.commons.math3.Field Field} (really a {@link DfpField}) to which the instance belongs\n     */\n    public DfpField getField() {\n        return field;\n    }\n\n    /** Get the number of radix digits of the instance.\n     * @return number of radix digits\n     */\n    public int getRadixDigits() {\n        return field.getRadixDigits();\n    }\n\n    /** Get the constant 0.\n     * @return a Dfp with value zero\n     */\n    public Dfp getZero() {\n        return field.getZero();\n    }\n\n    /** Get the constant 1.\n     * @return a Dfp with value one\n     */\n    public Dfp getOne() {\n        return field.getOne();\n    }\n\n    /** Get the constant 2.\n     * @return a Dfp with value two\n     */\n    public Dfp getTwo() {\n        return field.getTwo();\n    }\n\n    /** Shift the mantissa left, and adjust the exponent to compensate.\n     */\n    protected void shiftLeft() {\n        for (int i = mant.length - 1; i > 0; i--) {\n            mant[i] = mant[i-1];\n        }\n        mant[0] = 0;\n        exp--;\n    }\n\n    /* Note that shiftRight() does not call round() as that round() itself\n     uses shiftRight() */\n    /** Shift the mantissa right, and adjust the exponent to compensate.\n     */\n    protected void shiftRight() {\n        for (int i = 0; i < mant.length - 1; i++) {\n            mant[i] = mant[i+1];\n        }\n        mant[mant.length - 1] = 0;\n        exp++;\n    }\n\n    /** Make our exp equal to the supplied one, this may cause rounding.\n     *  Also causes de-normalized numbers.  These numbers are generally\n     *  dangerous because most routines assume normalized numbers.\n     *  Align doesn't round, so it will return the last digit destroyed\n     *  by shifting right.\n     *  @param e desired exponent\n     *  @return last digit destroyed by shifting right\n     */\n    protected int align(int e) {\n        int lostdigit = 0;\n        boolean inexact = false;\n\n        int diff = exp - e;\n\n        int adiff = diff;\n        if (adiff < 0) {\n            adiff = -adiff;\n        }\n\n        if (diff == 0) {\n            return 0;\n        }\n\n        if (adiff > (mant.length + 1)) {\n            // Special case\n            Arrays.fill(mant, 0);\n            exp = e;\n\n            field.setIEEEFlagsBits(DfpField.FLAG_INEXACT);\n            dotrap(DfpField.FLAG_INEXACT, ALIGN_TRAP, this, this);\n\n            return 0;\n        }\n\n        for (int i = 0; i < adiff; i++) {\n            if (diff < 0) {\n                /* Keep track of loss -- only signal inexact after losing 2 digits.\n                 * the first lost digit is returned to add() and may be incorporated\n                 * into the result.\n                 */\n                if (lostdigit != 0) {\n                    inexact = true;\n                }\n\n                lostdigit = mant[0];\n\n                shiftRight();\n            } else {\n                shiftLeft();\n            }\n        }\n\n        if (inexact) {\n            field.setIEEEFlagsBits(DfpField.FLAG_INEXACT);\n            dotrap(DfpField.FLAG_INEXACT, ALIGN_TRAP, this, this);\n        }\n\n        return lostdigit;\n\n    }\n\n    /** Check if instance is less than x.\n     * @param x number to check instance against\n     * @return true if instance is less than x and neither are NaN, false otherwise\n     */\n    public boolean lessThan(final Dfp x) {\n\n        // make sure we don't mix number with different precision\n        if (field.getRadixDigits() != x.field.getRadixDigits()) {\n            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);\n            final Dfp result = newInstance(getZero());\n            result.nans = QNAN;\n            dotrap(DfpField.FLAG_INVALID, LESS_THAN_TRAP, x, result);\n            return false;\n        }\n\n        /* if a nan is involved, signal invalid and return false */\n        if (isNaN() || x.isNaN()) {\n            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);\n            dotrap(DfpField.FLAG_INVALID, LESS_THAN_TRAP, x, newInstance(getZero()));\n            return false;\n        }\n\n        return compare(this, x) < 0;\n    }\n\n    /** Check if instance is greater than x.\n     * @param x number to check instance against\n     * @return true if instance is greater than x and neither are NaN, false otherwise\n     */\n    public boolean greaterThan(final Dfp x) {\n\n        // make sure we don't mix number with different precision\n        if (field.getRadixDigits() != x.field.getRadixDigits()) {\n            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);\n            final Dfp result = newInstance(getZero());\n            result.nans = QNAN;\n            dotrap(DfpField.FLAG_INVALID, GREATER_THAN_TRAP, x, result);\n            return false;\n        }\n\n        /* if a nan is involved, signal invalid and return false */\n        if (isNaN() || x.isNaN()) {\n            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);\n            dotrap(DfpField.FLAG_INVALID, GREATER_THAN_TRAP, x, newInstance(getZero()));\n            return false;\n        }\n\n        return compare(this, x) > 0;\n    }\n\n    /** Check if instance is less than or equal to 0.\n     * @return true if instance is not NaN and less than or equal to 0, false otherwise\n     */\n    public boolean negativeOrNull() {\n\n        if (isNaN()) {\n            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);\n            dotrap(DfpField.FLAG_INVALID, LESS_THAN_TRAP, this, newInstance(getZero()));\n            return false;\n        }\n\n        return (sign < 0) || ((mant[mant.length - 1] == 0) && !isInfinite());\n\n    }\n\n    /** Check if instance is strictly less than 0.\n     * @return true if instance is not NaN and less than or equal to 0, false otherwise\n     */\n    public boolean strictlyNegative() {\n\n        if (isNaN()) {\n            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);\n            dotrap(DfpField.FLAG_INVALID, LESS_THAN_TRAP, this, newInstance(getZero()));\n            return false;\n        }\n\n        return (sign < 0) && ((mant[mant.length - 1] != 0) || isInfinite());\n\n    }\n\n    /** Check if instance is greater than or equal to 0.\n     * @return true if instance is not NaN and greater than or equal to 0, false otherwise\n     */\n    public boolean positiveOrNull() {\n\n        if (isNaN()) {\n            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);\n            dotrap(DfpField.FLAG_INVALID, LESS_THAN_TRAP, this, newInstance(getZero()));\n            return false;\n        }\n\n        return (sign > 0) || ((mant[mant.length - 1] == 0) && !isInfinite());\n\n    }\n\n    /** Check if instance is strictly greater than 0.\n     * @return true if instance is not NaN and greater than or equal to 0, false otherwise\n     */\n    public boolean strictlyPositive() {\n\n        if (isNaN()) {\n            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);\n            dotrap(DfpField.FLAG_INVALID, LESS_THAN_TRAP, this, newInstance(getZero()));\n            return false;\n        }\n\n        return (sign > 0) && ((mant[mant.length - 1] != 0) || isInfinite());\n\n    }\n\n    /** Get the absolute value of instance.\n     * @return absolute value of instance\n     * @since 3.2\n     */\n    public Dfp abs() {\n        Dfp result = newInstance(this);\n        result.sign = 1;\n        return result;\n    }\n\n    /** Check if instance is infinite.\n     * @return true if instance is infinite\n     */\n    public boolean isInfinite() {\n        return nans == INFINITE;\n    }\n\n    /** Check if instance is not a number.\n     * @return true if instance is not a number\n     */\n    public boolean isNaN() {\n        return (nans == QNAN) || (nans == SNAN);\n    }\n\n    /** Check if instance is equal to zero.\n     * @return true if instance is equal to zero\n     */\n    public boolean isZero() {\n\n        if (isNaN()) {\n            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);\n            dotrap(DfpField.FLAG_INVALID, LESS_THAN_TRAP, this, newInstance(getZero()));\n            return false;\n        }\n\n        return (mant[mant.length - 1] == 0) && !isInfinite();\n\n    }\n\n    /** Check if instance is equal to x.\n     * @param other object to check instance against\n     * @return true if instance is equal to x and neither are NaN, false otherwise\n     */\n    @Override\n    public boolean equals(final Object other) {\n\n        if (other instanceof Dfp) {\n            final Dfp x = (Dfp) other;\n            if (isNaN() || x.isNaN() || field.getRadixDigits() != x.field.getRadixDigits()) {\n                return false;\n            }\n\n            return compare(this, x) == 0;\n        }\n\n        return false;\n\n    }\n\n    /**\n     * Gets a hashCode for the instance.\n     * @return a hash code value for this object\n     */\n    @Override\n    public int hashCode() {\n        return 17 + (isZero() ? 0 : (sign << 8)) + (nans << 16) + exp + Arrays.hashCode(mant);\n    }\n\n    /** Check if instance is not equal to x.\n     * @param x number to check instance against\n     * @return true if instance is not equal to x and neither are NaN, false otherwise\n     */\n    public boolean unequal(final Dfp x) {\n        if (isNaN() || x.isNaN() || field.getRadixDigits() != x.field.getRadixDigits()) {\n            return false;\n        }\n\n        return greaterThan(x) || lessThan(x);\n    }\n\n    /** Compare two instances.\n     * @param a first instance in comparison\n     * @param b second instance in comparison\n     * @return -1 if a<b, 1 if a>b and 0 if a==b\n     *  Note this method does not properly handle NaNs or numbers with different precision.\n     */\n    private static int compare(final Dfp a, final Dfp b) {\n        // Ignore the sign of zero\n        if (a.mant[a.mant.length - 1] == 0 && b.mant[b.mant.length - 1] == 0 &&\n            a.nans == FINITE && b.nans == FINITE) {\n            return 0;\n        }\n\n        if (a.sign != b.sign) {\n            if (a.sign == -1) {\n                return -1;\n            } else {\n                return 1;\n            }\n        }\n\n        // deal with the infinities\n        if (a.nans == INFINITE && b.nans == FINITE) {\n            return a.sign;\n        }\n\n        if (a.nans == FINITE && b.nans == INFINITE) {\n            return -b.sign;\n        }\n\n        if (a.nans == INFINITE && b.nans == INFINITE) {\n            return 0;\n        }\n\n        // Handle special case when a or b is zero, by ignoring the exponents\n        if (b.mant[b.mant.length-1] != 0 && a.mant[b.mant.length-1] != 0) {\n            if (a.exp < b.exp) {\n                return -a.sign;\n            }\n\n            if (a.exp > b.exp) {\n                return a.sign;\n            }\n        }\n\n        // compare the mantissas\n        for (int i = a.mant.length - 1; i >= 0; i--) {\n            if (a.mant[i] > b.mant[i]) {\n                return a.sign;\n            }\n\n            if (a.mant[i] < b.mant[i]) {\n                return -a.sign;\n            }\n        }\n\n        return 0;\n\n    }\n\n    /** Round to nearest integer using the round-half-even method.\n     *  That is round to nearest integer unless both are equidistant.\n     *  In which case round to the even one.\n     *  @return rounded value\n     * @since 3.2\n     */\n    public Dfp rint() {\n        return trunc(DfpField.RoundingMode.ROUND_HALF_EVEN);\n    }\n\n    /** Round to an integer using the round floor mode.\n     * That is, round toward -Infinity\n     *  @return rounded value\n     * @since 3.2\n     */\n    public Dfp floor() {\n        return trunc(DfpField.RoundingMode.ROUND_FLOOR);\n    }\n\n    /** Round to an integer using the round ceil mode.\n     * That is, round toward +Infinity\n     *  @return rounded value\n     * @since 3.2\n     */\n    public Dfp ceil() {\n        return trunc(DfpField.RoundingMode.ROUND_CEIL);\n    }\n\n    /** Returns the IEEE remainder.\n     * @param d divisor\n     * @return this less n &times; d, where n is the integer closest to this/d\n     * @since 3.2\n     */\n    public Dfp remainder(final Dfp d) {\n\n        final Dfp result = this.subtract(this.divide(d).rint().multiply(d));\n\n        // IEEE 854-1987 says that if the result is zero, then it carries the sign of this\n        if (result.mant[mant.length-1] == 0) {\n            result.sign = sign;\n        }\n\n        return result;\n\n    }\n\n    /** Does the integer conversions with the specified rounding.\n     * @param rmode rounding mode to use\n     * @return truncated value\n     */\n    protected Dfp trunc(final DfpField.RoundingMode rmode) {\n        boolean changed = false;\n\n        if (isNaN()) {\n            return newInstance(this);\n        }\n\n        if (nans == INFINITE) {\n            return newInstance(this);\n        }\n\n        if (mant[mant.length-1] == 0) {\n            // a is zero\n            return newInstance(this);\n        }\n\n        /* If the exponent is less than zero then we can certainly\n         * return zero */\n        if (exp < 0) {\n            field.setIEEEFlagsBits(DfpField.FLAG_INEXACT);\n            Dfp result = newInstance(getZero());\n            result = dotrap(DfpField.FLAG_INEXACT, TRUNC_TRAP, this, result);\n            return result;\n        }\n\n        /* If the exponent is greater than or equal to digits, then it\n         * must already be an integer since there is no precision left\n         * for any fractional part */\n\n        if (exp >= mant.length) {\n            return newInstance(this);\n        }\n\n        /* General case:  create another dfp, result, that contains the\n         * a with the fractional part lopped off.  */\n\n        Dfp result = newInstance(this);\n        for (int i = 0; i < mant.length-result.exp; i++) {\n            changed |= result.mant[i] != 0;\n            result.mant[i] = 0;\n        }\n\n        if (changed) {\n            switch (rmode) {\n                case ROUND_FLOOR:\n                    if (result.sign == -1) {\n                        // then we must increment the mantissa by one\n                        result = result.add(newInstance(-1));\n                    }\n                    break;\n\n                case ROUND_CEIL:\n                    if (result.sign == 1) {\n                        // then we must increment the mantissa by one\n                        result = result.add(getOne());\n                    }\n                    break;\n\n                case ROUND_HALF_EVEN:\n                default:\n                    final Dfp half = newInstance(\"0.5\");\n                    Dfp a = subtract(result);  // difference between this and result\n                    a.sign = 1;            // force positive (take abs)\n                    if (a.greaterThan(half)) {\n                        a = newInstance(getOne());\n                        a.sign = sign;\n                        result = result.add(a);\n                    }\n\n                    /** If exactly equal to 1/2 and odd then increment */\n                    if (a.equals(half) && result.exp > 0 && (result.mant[mant.length-result.exp]&1) != 0) {\n                        a = newInstance(getOne());\n                        a.sign = sign;\n                        result = result.add(a);\n                    }\n                    break;\n            }\n\n            field.setIEEEFlagsBits(DfpField.FLAG_INEXACT);  // signal inexact\n            result = dotrap(DfpField.FLAG_INEXACT, TRUNC_TRAP, this, result);\n            return result;\n        }\n\n        return result;\n    }\n\n    /** Convert this to an integer.\n     * If greater than 2147483647, it returns 2147483647. If less than -2147483648 it returns -2147483648.\n     * @return converted number\n     */\n    public int intValue() {\n        Dfp rounded;\n        int result = 0;\n\n        rounded = rint();\n\n        if (rounded.greaterThan(newInstance(2147483647))) {\n            return 2147483647;\n        }\n\n        if (rounded.lessThan(newInstance(-2147483648))) {\n            return -2147483648;\n        }\n\n        for (int i = mant.length - 1; i >= mant.length - rounded.exp; i--) {\n            result = result * RADIX + rounded.mant[i];\n        }\n\n        if (rounded.sign == -1) {\n            result = -result;\n        }\n\n        return result;\n    }\n\n    /** Get the exponent of the greatest power of 10000 that is\n     *  less than or equal to the absolute value of this.  I.E.  if\n     *  this is 10<sup>6</sup> then log10K would return 1.\n     *  @return integer base 10000 logarithm\n     */\n    public int log10K() {\n        return exp - 1;\n    }\n\n    /** Get the specified  power of 10000.\n     * @param e desired power\n     * @return 10000<sup>e</sup>\n     */\n    public Dfp power10K(final int e) {\n        Dfp d = newInstance(getOne());\n        d.exp = e + 1;\n        return d;\n    }\n\n    /** Get the exponent of the greatest power of 10 that is less than or equal to abs(this).\n     *  @return integer base 10 logarithm\n     * @since 3.2\n     */\n    public int intLog10()  {\n        if (mant[mant.length-1] > 1000) {\n            return exp * 4 - 1;\n        }\n        if (mant[mant.length-1] > 100) {\n            return exp * 4 - 2;\n        }\n        if (mant[mant.length-1] > 10) {\n            return exp * 4 - 3;\n        }\n        return exp * 4 - 4;\n    }\n\n    /** Return the specified  power of 10.\n     * @param e desired power\n     * @return 10<sup>e</sup>\n     */\n    public Dfp power10(final int e) {\n        Dfp d = newInstance(getOne());\n\n        if (e >= 0) {\n            d.exp = e / 4 + 1;\n        } else {\n            d.exp = (e + 1) / 4;\n        }\n\n        switch ((e % 4 + 4) % 4) {\n            case 0:\n                break;\n            case 1:\n                d = d.multiply(10);\n                break;\n            case 2:\n                d = d.multiply(100);\n                break;\n            default:\n                d = d.multiply(1000);\n        }\n\n        return d;\n    }\n\n    /** Negate the mantissa of this by computing the complement.\n     *  Leaves the sign bit unchanged, used internally by add.\n     *  Denormalized numbers are handled properly here.\n     *  @param extra ???\n     *  @return ???\n     */\n    protected int complement(int extra) {\n\n        extra = RADIX-extra;\n        for (int i = 0; i < mant.length; i++) {\n            mant[i] = RADIX-mant[i]-1;\n        }\n\n        int rh = extra / RADIX;\n        extra -= rh * RADIX;\n        for (int i = 0; i < mant.length; i++) {\n            final int r = mant[i] + rh;\n            rh = r / RADIX;\n            mant[i] = r - rh * RADIX;\n        }\n\n        return extra;\n    }\n\n    /** Add x to this.\n     * @param x number to add\n     * @return sum of this and x\n     */\n    public Dfp add(final Dfp x) {\n\n        // make sure we don't mix number with different precision\n        if (field.getRadixDigits() != x.field.getRadixDigits()) {\n            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);\n            final Dfp result = newInstance(getZero());\n            result.nans = QNAN;\n            return dotrap(DfpField.FLAG_INVALID, ADD_TRAP, x, result);\n        }\n\n        /* handle special cases */\n        if (nans != FINITE || x.nans != FINITE) {\n            if (isNaN()) {\n                return this;\n            }\n\n            if (x.isNaN()) {\n                return x;\n            }\n\n            if (nans == INFINITE && x.nans == FINITE) {\n                return this;\n            }\n\n            if (x.nans == INFINITE && nans == FINITE) {\n                return x;\n            }\n\n            if (x.nans == INFINITE && nans == INFINITE && sign == x.sign) {\n                return x;\n            }\n\n            if (x.nans == INFINITE && nans == INFINITE && sign != x.sign) {\n                field.setIEEEFlagsBits(DfpField.FLAG_INVALID);\n                Dfp result = newInstance(getZero());\n                result.nans = QNAN;\n                result = dotrap(DfpField.FLAG_INVALID, ADD_TRAP, x, result);\n                return result;\n            }\n        }\n\n        /* copy this and the arg */\n        Dfp a = newInstance(this);\n        Dfp b = newInstance(x);\n\n        /* initialize the result object */\n        Dfp result = newInstance(getZero());\n\n        /* Make all numbers positive, but remember their sign */\n        final byte asign = a.sign;\n        final byte bsign = b.sign;\n\n        a.sign = 1;\n        b.sign = 1;\n\n        /* The result will be signed like the arg with greatest magnitude */\n        byte rsign = bsign;\n        if (compare(a, b) > 0) {\n            rsign = asign;\n        }\n\n        /* Handle special case when a or b is zero, by setting the exponent\n       of the zero number equal to the other one.  This avoids an alignment\n       which would cause catastropic loss of precision */\n        if (b.mant[mant.length-1] == 0) {\n            b.exp = a.exp;\n        }\n\n        if (a.mant[mant.length-1] == 0) {\n            a.exp = b.exp;\n        }\n\n        /* align number with the smaller exponent */\n        int aextradigit = 0;\n        int bextradigit = 0;\n        if (a.exp < b.exp) {\n            aextradigit = a.align(b.exp);\n        } else {\n            bextradigit = b.align(a.exp);\n        }\n\n        /* complement the smaller of the two if the signs are different */\n        if (asign != bsign) {\n            if (asign == rsign) {\n                bextradigit = b.complement(bextradigit);\n            } else {\n                aextradigit = a.complement(aextradigit);\n            }\n        }\n\n        /* add the mantissas */\n        int rh = 0; /* acts as a carry */\n        for (int i = 0; i < mant.length; i++) {\n            final int r = a.mant[i]+b.mant[i]+rh;\n            rh = r / RADIX;\n            result.mant[i] = r - rh * RADIX;\n        }\n        result.exp = a.exp;\n        result.sign = rsign;\n\n        /* handle overflow -- note, when asign!=bsign an overflow is\n         * normal and should be ignored.  */\n\n        if (rh != 0 && (asign == bsign)) {\n            final int lostdigit = result.mant[0];\n            result.shiftRight();\n            result.mant[mant.length-1] = rh;\n            final int excp = result.round(lostdigit);\n            if (excp != 0) {\n                result = dotrap(excp, ADD_TRAP, x, result);\n            }\n        }\n\n        /* normalize the result */\n        for (int i = 0; i < mant.length; i++) {\n            if (result.mant[mant.length-1] != 0) {\n                break;\n            }\n            result.shiftLeft();\n            if (i == 0) {\n                result.mant[0] = aextradigit+bextradigit;\n                aextradigit = 0;\n                bextradigit = 0;\n            }\n        }\n\n        /* result is zero if after normalization the most sig. digit is zero */\n        if (result.mant[mant.length-1] == 0) {\n            result.exp = 0;\n\n            if (asign != bsign) {\n                // Unless adding 2 negative zeros, sign is positive\n                result.sign = 1;  // Per IEEE 854-1987 Section 6.3\n            }\n        }\n\n        /* Call round to test for over/under flows */\n        final int excp = result.round(aextradigit + bextradigit);\n        if (excp != 0) {\n            result = dotrap(excp, ADD_TRAP, x, result);\n        }\n\n        return result;\n    }\n\n    /** Returns a number that is this number with the sign bit reversed.\n     * @return the opposite of this\n     */\n    public Dfp negate() {\n        Dfp result = newInstance(this);\n        result.sign = (byte) - result.sign;\n        return result;\n    }\n\n    /** Subtract x from this.\n     * @param x number to subtract\n     * @return difference of this and a\n     */\n    public Dfp subtract(final Dfp x) {\n        return add(x.negate());\n    }\n\n    /** Round this given the next digit n using the current rounding mode.\n     * @param n ???\n     * @return the IEEE flag if an exception occurred\n     */\n    protected int round(int n) {\n        boolean inc = false;\n        switch (field.getRoundingMode()) {\n            case ROUND_DOWN:\n                inc = false;\n                break;\n\n            case ROUND_UP:\n                inc = n != 0;       // round up if n!=0\n                break;\n\n            case ROUND_HALF_UP:\n                inc = n >= 5000;  // round half up\n                break;\n\n            case ROUND_HALF_DOWN:\n                inc = n > 5000;  // round half down\n                break;\n\n            case ROUND_HALF_EVEN:\n                inc = n > 5000 || (n == 5000 && (mant[0] & 1) == 1);  // round half-even\n                break;\n\n            case ROUND_HALF_ODD:\n                inc = n > 5000 || (n == 5000 && (mant[0] & 1) == 0);  // round half-odd\n                break;\n\n            case ROUND_CEIL:\n                inc = sign == 1 && n != 0;  // round ceil\n                break;\n\n            case ROUND_FLOOR:\n            default:\n                inc = sign == -1 && n != 0;  // round floor\n                break;\n        }\n\n        if (inc) {\n            // increment if necessary\n            int rh = 1;\n            for (int i = 0; i < mant.length; i++) {\n                final int r = mant[i] + rh;\n                rh = r / RADIX;\n                mant[i] = r - rh * RADIX;\n            }\n\n            if (rh != 0) {\n                shiftRight();\n                mant[mant.length-1] = rh;\n            }\n        }\n\n        // check for exceptional cases and raise signals if necessary\n        if (exp < MIN_EXP) {\n            // Gradual Underflow\n            field.setIEEEFlagsBits(DfpField.FLAG_UNDERFLOW);\n            return DfpField.FLAG_UNDERFLOW;\n        }\n\n        if (exp > MAX_EXP) {\n            // Overflow\n            field.setIEEEFlagsBits(DfpField.FLAG_OVERFLOW);\n            return DfpField.FLAG_OVERFLOW;\n        }\n\n        if (n != 0) {\n            // Inexact\n            field.setIEEEFlagsBits(DfpField.FLAG_INEXACT);\n            return DfpField.FLAG_INEXACT;\n        }\n\n        return 0;\n\n    }\n\n    /** Multiply this by x.\n     * @param x multiplicand\n     * @return product of this and x\n     */\n    public Dfp multiply(final Dfp x) {\n\n        // make sure we don't mix number with different precision\n        if (field.getRadixDigits() != x.field.getRadixDigits()) {\n            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);\n            final Dfp result = newInstance(getZero());\n            result.nans = QNAN;\n            return dotrap(DfpField.FLAG_INVALID, MULTIPLY_TRAP, x, result);\n        }\n\n        Dfp result = newInstance(getZero());\n\n        /* handle special cases */\n        if (nans != FINITE || x.nans != FINITE) {\n            if (isNaN()) {\n                return this;\n            }\n\n            if (x.isNaN()) {\n                return x;\n            }\n\n            if (nans == INFINITE && x.nans == FINITE && x.mant[mant.length-1] != 0) {\n                result = newInstance(this);\n                result.sign = (byte) (sign * x.sign);\n                return result;\n            }\n\n            if (x.nans == INFINITE && nans == FINITE && mant[mant.length-1] != 0) {\n                result = newInstance(x);\n                result.sign = (byte) (sign * x.sign);\n                return result;\n            }\n\n            if (x.nans == INFINITE && nans == INFINITE) {\n                result = newInstance(this);\n                result.sign = (byte) (sign * x.sign);\n                return result;\n            }\n\n            if ( (x.nans == INFINITE && nans == FINITE && mant[mant.length-1] == 0) ||\n                    (nans == INFINITE && x.nans == FINITE && x.mant[mant.length-1] == 0) ) {\n                field.setIEEEFlagsBits(DfpField.FLAG_INVALID);\n                result = newInstance(getZero());\n                result.nans = QNAN;\n                result = dotrap(DfpField.FLAG_INVALID, MULTIPLY_TRAP, x, result);\n                return result;\n            }\n        }\n\n        int[] product = new int[mant.length*2];  // Big enough to hold even the largest result\n\n        for (int i = 0; i < mant.length; i++) {\n            int rh = 0;  // acts as a carry\n            for (int j=0; j<mant.length; j++) {\n                int r = mant[i] * x.mant[j];    // multiply the 2 digits\n                r += product[i+j] + rh;  // add to the product digit with carry in\n\n                rh = r / RADIX;\n                product[i+j] = r - rh * RADIX;\n            }\n            product[i+mant.length] = rh;\n        }\n\n        // Find the most sig digit\n        int md = mant.length * 2 - 1;  // default, in case result is zero\n        for (int i = mant.length * 2 - 1; i >= 0; i--) {\n            if (product[i] != 0) {\n                md = i;\n                break;\n            }\n        }\n\n        // Copy the digits into the result\n        for (int i = 0; i < mant.length; i++) {\n            result.mant[mant.length - i - 1] = product[md - i];\n        }\n\n        // Fixup the exponent.\n        result.exp = exp + x.exp + md - 2 * mant.length + 1;\n        result.sign = (byte)((sign == x.sign)?1:-1);\n\n        if (result.mant[mant.length-1] == 0) {\n            // if result is zero, set exp to zero\n            result.exp = 0;\n        }\n\n        final int excp;\n        if (md > (mant.length-1)) {\n            excp = result.round(product[md-mant.length]);\n        } else {\n            excp = result.round(0); // has no effect except to check status\n        }\n\n        if (excp != 0) {\n            result = dotrap(excp, MULTIPLY_TRAP, x, result);\n        }\n\n        return result;\n\n    }\n\n    /** Multiply this by a single digit x.\n     * @param x multiplicand\n     * @return product of this and x\n     */\n    public Dfp multiply(final int x) {\n        if (x >= 0 && x < RADIX) {\n            return multiplyFast(x);\n        } else {\n            return multiply(newInstance(x));\n        }\n    }\n\n    /** Multiply this by a single digit 0&lt;=x&lt;radix.\n     * There are speed advantages in this special case.\n     * @param x multiplicand\n     * @return product of this and x\n     */\n    private Dfp multiplyFast(final int x) {\n        Dfp result = newInstance(this);\n\n        /* handle special cases */\n        if (nans != FINITE) {\n            if (isNaN()) {\n                return this;\n            }\n\n            if (nans == INFINITE && x != 0) {\n                result = newInstance(this);\n                return result;\n            }\n\n            if (nans == INFINITE && x == 0) {\n                field.setIEEEFlagsBits(DfpField.FLAG_INVALID);\n                result = newInstance(getZero());\n                result.nans = QNAN;\n                result = dotrap(DfpField.FLAG_INVALID, MULTIPLY_TRAP, newInstance(getZero()), result);\n                return result;\n            }\n        }\n\n        /* range check x */\n        if (x < 0 || x >= RADIX) {\n            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);\n            result = newInstance(getZero());\n            result.nans = QNAN;\n            result = dotrap(DfpField.FLAG_INVALID, MULTIPLY_TRAP, result, result);\n            return result;\n        }\n\n        int rh = 0;\n        for (int i = 0; i < mant.length; i++) {\n            final int r = mant[i] * x + rh;\n            rh = r / RADIX;\n            result.mant[i] = r - rh * RADIX;\n        }\n\n        int lostdigit = 0;\n        if (rh != 0) {\n            lostdigit = result.mant[0];\n            result.shiftRight();\n            result.mant[mant.length-1] = rh;\n        }\n\n        if (result.mant[mant.length-1] == 0) { // if result is zero, set exp to zero\n            result.exp = 0;\n        }\n\n        final int excp = result.round(lostdigit);\n        if (excp != 0) {\n            result = dotrap(excp, MULTIPLY_TRAP, result, result);\n        }\n\n        return result;\n    }\n\n    /** Divide this by divisor.\n     * @param divisor divisor\n     * @return quotient of this by divisor\n     */\n    public Dfp divide(Dfp divisor) {\n        int dividend[]; // current status of the dividend\n        int quotient[]; // quotient\n        int remainder[];// remainder\n        int qd;         // current quotient digit we're working with\n        int nsqd;       // number of significant quotient digits we have\n        int trial=0;    // trial quotient digit\n        int minadj;     // minimum adjustment\n        boolean trialgood; // Flag to indicate a good trail digit\n        int md=0;       // most sig digit in result\n        int excp;       // exceptions\n\n        // make sure we don't mix number with different precision\n        if (field.getRadixDigits() != divisor.field.getRadixDigits()) {\n            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);\n            final Dfp result = newInstance(getZero());\n            result.nans = QNAN;\n            return dotrap(DfpField.FLAG_INVALID, DIVIDE_TRAP, divisor, result);\n        }\n\n        Dfp result = newInstance(getZero());\n\n        /* handle special cases */\n        if (nans != FINITE || divisor.nans != FINITE) {\n            if (isNaN()) {\n                return this;\n            }\n\n            if (divisor.isNaN()) {\n                return divisor;\n            }\n\n            if (nans == INFINITE && divisor.nans == FINITE) {\n                result = newInstance(this);\n                result.sign = (byte) (sign * divisor.sign);\n                return result;\n            }\n\n            if (divisor.nans == INFINITE && nans == FINITE) {\n                result = newInstance(getZero());\n                result.sign = (byte) (sign * divisor.sign);\n                return result;\n            }\n\n            if (divisor.nans == INFINITE && nans == INFINITE) {\n                field.setIEEEFlagsBits(DfpField.FLAG_INVALID);\n                result = newInstance(getZero());\n                result.nans = QNAN;\n                result = dotrap(DfpField.FLAG_INVALID, DIVIDE_TRAP, divisor, result);\n                return result;\n            }\n        }\n\n        /* Test for divide by zero */\n        if (divisor.mant[mant.length-1] == 0) {\n            field.setIEEEFlagsBits(DfpField.FLAG_DIV_ZERO);\n            result = newInstance(getZero());\n            result.sign = (byte) (sign * divisor.sign);\n            result.nans = INFINITE;\n            result = dotrap(DfpField.FLAG_DIV_ZERO, DIVIDE_TRAP, divisor, result);\n            return result;\n        }\n\n        dividend = new int[mant.length+1];  // one extra digit needed\n        quotient = new int[mant.length+2];  // two extra digits needed 1 for overflow, 1 for rounding\n        remainder = new int[mant.length+1]; // one extra digit needed\n\n        /* Initialize our most significant digits to zero */\n\n        dividend[mant.length] = 0;\n        quotient[mant.length] = 0;\n        quotient[mant.length+1] = 0;\n        remainder[mant.length] = 0;\n\n        /* copy our mantissa into the dividend, initialize the\n       quotient while we are at it */\n\n        for (int i = 0; i < mant.length; i++) {\n            dividend[i] = mant[i];\n            quotient[i] = 0;\n            remainder[i] = 0;\n        }\n\n        /* outer loop.  Once per quotient digit */\n        nsqd = 0;\n        for (qd = mant.length+1; qd >= 0; qd--) {\n            /* Determine outer limits of our quotient digit */\n\n            // r =  most sig 2 digits of dividend\n            final int divMsb = dividend[mant.length]*RADIX+dividend[mant.length-1];\n            int min = divMsb       / (divisor.mant[mant.length-1]+1);\n            int max = (divMsb + 1) / divisor.mant[mant.length-1];\n\n            trialgood = false;\n            while (!trialgood) {\n                // try the mean\n                trial = (min+max)/2;\n\n                /* Multiply by divisor and store as remainder */\n                int rh = 0;\n                for (int i = 0; i < mant.length + 1; i++) {\n                    int dm = (i<mant.length)?divisor.mant[i]:0;\n                    final int r = (dm * trial) + rh;\n                    rh = r / RADIX;\n                    remainder[i] = r - rh * RADIX;\n                }\n\n                /* subtract the remainder from the dividend */\n                rh = 1;  // carry in to aid the subtraction\n                for (int i = 0; i < mant.length + 1; i++) {\n                    final int r = ((RADIX-1) - remainder[i]) + dividend[i] + rh;\n                    rh = r / RADIX;\n                    remainder[i] = r - rh * RADIX;\n                }\n\n                /* Lets analyze what we have here */\n                if (rh == 0) {\n                    // trial is too big -- negative remainder\n                    max = trial-1;\n                    continue;\n                }\n\n                /* find out how far off the remainder is telling us we are */\n                minadj = (remainder[mant.length] * RADIX)+remainder[mant.length-1];\n                minadj /= divisor.mant[mant.length-1] + 1;\n\n                if (minadj >= 2) {\n                    min = trial+minadj;  // update the minimum\n                    continue;\n                }\n\n                /* May have a good one here, check more thoroughly.  Basically\n           its a good one if it is less than the divisor */\n                trialgood = false;  // assume false\n                for (int i = mant.length - 1; i >= 0; i--) {\n                    if (divisor.mant[i] > remainder[i]) {\n                        trialgood = true;\n                    }\n                    if (divisor.mant[i] < remainder[i]) {\n                        break;\n                    }\n                }\n\n                if (remainder[mant.length] != 0) {\n                    trialgood = false;\n                }\n\n                if (trialgood == false) {\n                    min = trial+1;\n                }\n            }\n\n            /* Great we have a digit! */\n            quotient[qd] = trial;\n            if (trial != 0 || nsqd != 0) {\n                nsqd++;\n            }\n\n            if (field.getRoundingMode() == DfpField.RoundingMode.ROUND_DOWN && nsqd == mant.length) {\n                // We have enough for this mode\n                break;\n            }\n\n            if (nsqd > mant.length) {\n                // We have enough digits\n                break;\n            }\n\n            /* move the remainder into the dividend while left shifting */\n            dividend[0] = 0;\n            for (int i = 0; i < mant.length; i++) {\n                dividend[i + 1] = remainder[i];\n            }\n        }\n\n        /* Find the most sig digit */\n        md = mant.length;  // default\n        for (int i = mant.length + 1; i >= 0; i--) {\n            if (quotient[i] != 0) {\n                md = i;\n                break;\n            }\n        }\n\n        /* Copy the digits into the result */\n        for (int i=0; i<mant.length; i++) {\n            result.mant[mant.length-i-1] = quotient[md-i];\n        }\n\n        /* Fixup the exponent. */\n        result.exp = exp - divisor.exp + md - mant.length;\n        result.sign = (byte) ((sign == divisor.sign) ? 1 : -1);\n\n        if (result.mant[mant.length-1] == 0) { // if result is zero, set exp to zero\n            result.exp = 0;\n        }\n\n        if (md > (mant.length-1)) {\n            excp = result.round(quotient[md-mant.length]);\n        } else {\n            excp = result.round(0);\n        }\n\n        if (excp != 0) {\n            result = dotrap(excp, DIVIDE_TRAP, divisor, result);\n        }\n\n        return result;\n    }\n\n    /** Divide by a single digit less than radix.\n     *  Special case, so there are speed advantages. 0 &lt;= divisor &lt; radix\n     * @param divisor divisor\n     * @return quotient of this by divisor\n     */\n    public Dfp divide(int divisor) {\n\n        // Handle special cases\n        if (nans != FINITE) {\n            if (isNaN()) {\n                return this;\n            }\n\n            if (nans == INFINITE) {\n                return newInstance(this);\n            }\n        }\n\n        // Test for divide by zero\n        if (divisor == 0) {\n            field.setIEEEFlagsBits(DfpField.FLAG_DIV_ZERO);\n            Dfp result = newInstance(getZero());\n            result.sign = sign;\n            result.nans = INFINITE;\n            result = dotrap(DfpField.FLAG_DIV_ZERO, DIVIDE_TRAP, getZero(), result);\n            return result;\n        }\n\n        // range check divisor\n        if (divisor < 0 || divisor >= RADIX) {\n            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);\n            Dfp result = newInstance(getZero());\n            result.nans = QNAN;\n            result = dotrap(DfpField.FLAG_INVALID, DIVIDE_TRAP, result, result);\n            return result;\n        }\n\n        Dfp result = newInstance(this);\n\n        int rl = 0;\n        for (int i = mant.length-1; i >= 0; i--) {\n            final int r = rl*RADIX + result.mant[i];\n            final int rh = r / divisor;\n            rl = r - rh * divisor;\n            result.mant[i] = rh;\n        }\n\n        if (result.mant[mant.length-1] == 0) {\n            // normalize\n            result.shiftLeft();\n            final int r = rl * RADIX;        // compute the next digit and put it in\n            final int rh = r / divisor;\n            rl = r - rh * divisor;\n            result.mant[0] = rh;\n        }\n\n        final int excp = result.round(rl * RADIX / divisor);  // do the rounding\n        if (excp != 0) {\n            result = dotrap(excp, DIVIDE_TRAP, result, result);\n        }\n\n        return result;\n\n    }\n\n    /** {@inheritDoc} */\n    public Dfp reciprocal() {\n        return field.getOne().divide(this);\n    }\n\n    /** Compute the square root.\n     * @return square root of the instance\n     * @since 3.2\n     */\n    public Dfp sqrt() {\n\n        // check for unusual cases\n        if (nans == FINITE && mant[mant.length-1] == 0) {\n            // if zero\n            return newInstance(this);\n        }\n\n        if (nans != FINITE) {\n            if (nans == INFINITE && sign == 1) {\n                // if positive infinity\n                return newInstance(this);\n            }\n\n            if (nans == QNAN) {\n                return newInstance(this);\n            }\n\n            if (nans == SNAN) {\n                Dfp result;\n\n                field.setIEEEFlagsBits(DfpField.FLAG_INVALID);\n                result = newInstance(this);\n                result = dotrap(DfpField.FLAG_INVALID, SQRT_TRAP, null, result);\n                return result;\n            }\n        }\n\n        if (sign == -1) {\n            // if negative\n            Dfp result;\n\n            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);\n            result = newInstance(this);\n            result.nans = QNAN;\n            result = dotrap(DfpField.FLAG_INVALID, SQRT_TRAP, null, result);\n            return result;\n        }\n\n        Dfp x = newInstance(this);\n\n        /* Lets make a reasonable guess as to the size of the square root */\n        if (x.exp < -1 || x.exp > 1) {\n            x.exp = this.exp / 2;\n        }\n\n        /* Coarsely estimate the mantissa */\n        switch (x.mant[mant.length-1] / 2000) {\n            case 0:\n                x.mant[mant.length-1] = x.mant[mant.length-1]/2+1;\n                break;\n            case 2:\n                x.mant[mant.length-1] = 1500;\n                break;\n            case 3:\n                x.mant[mant.length-1] = 2200;\n                break;\n            default:\n                x.mant[mant.length-1] = 3000;\n        }\n\n        Dfp dx = newInstance(x);\n\n        /* Now that we have the first pass estimate, compute the rest\n       by the formula dx = (y - x*x) / (2x); */\n\n        Dfp px  = getZero();\n        Dfp ppx = getZero();\n        while (x.unequal(px)) {\n            dx = newInstance(x);\n            dx.sign = -1;\n            dx = dx.add(this.divide(x));\n            dx = dx.divide(2);\n            ppx = px;\n            px = x;\n            x = x.add(dx);\n\n            if (x.equals(ppx)) {\n                // alternating between two values\n                break;\n            }\n\n            // if dx is zero, break.  Note testing the most sig digit\n            // is a sufficient test since dx is normalized\n            if (dx.mant[mant.length-1] == 0) {\n                break;\n            }\n        }\n\n        return x;\n\n    }\n\n    /** Get a string representation of the instance.\n     * @return string representation of the instance\n     */\n    @Override\n    public String toString() {\n        if (nans != FINITE) {\n            // if non-finite exceptional cases\n            if (nans == INFINITE) {\n                return (sign < 0) ? NEG_INFINITY_STRING : POS_INFINITY_STRING;\n            } else {\n                return NAN_STRING;\n            }\n        }\n\n        if (exp > mant.length || exp < -1) {\n            return dfp2sci();\n        }\n\n        return dfp2string();\n\n    }\n\n    /** Convert an instance to a string using scientific notation.\n     * @return string representation of the instance in scientific notation\n     */\n    protected String dfp2sci() {\n        char rawdigits[]    = new char[mant.length * 4];\n        char outputbuffer[] = new char[mant.length * 4 + 20];\n        int p;\n        int q;\n        int e;\n        int ae;\n        int shf;\n\n        // Get all the digits\n        p = 0;\n        for (int i = mant.length - 1; i >= 0; i--) {\n            rawdigits[p++] = (char) ((mant[i] / 1000) + '0');\n            rawdigits[p++] = (char) (((mant[i] / 100) %10) + '0');\n            rawdigits[p++] = (char) (((mant[i] / 10) % 10) + '0');\n            rawdigits[p++] = (char) (((mant[i]) % 10) + '0');\n        }\n\n        // Find the first non-zero one\n        for (p = 0; p < rawdigits.length; p++) {\n            if (rawdigits[p] != '0') {\n                break;\n            }\n        }\n        shf = p;\n\n        // Now do the conversion\n        q = 0;\n        if (sign == -1) {\n            outputbuffer[q++] = '-';\n        }\n\n        if (p != rawdigits.length) {\n            // there are non zero digits...\n            outputbuffer[q++] = rawdigits[p++];\n            outputbuffer[q++] = '.';\n\n            while (p<rawdigits.length) {\n                outputbuffer[q++] = rawdigits[p++];\n            }\n        } else {\n            outputbuffer[q++] = '0';\n            outputbuffer[q++] = '.';\n            outputbuffer[q++] = '0';\n            outputbuffer[q++] = 'e';\n            outputbuffer[q++] = '0';\n            return new String(outputbuffer, 0, 5);\n        }\n\n        outputbuffer[q++] = 'e';\n\n        // Find the msd of the exponent\n\n        e = exp * 4 - shf - 1;\n        ae = e;\n        if (e < 0) {\n            ae = -e;\n        }\n\n        // Find the largest p such that p < e\n        for (p = 1000000000; p > ae; p /= 10) {\n            // nothing to do\n        }\n\n        if (e < 0) {\n            outputbuffer[q++] = '-';\n        }\n\n        while (p > 0) {\n            outputbuffer[q++] = (char)(ae / p + '0');\n            ae %= p;\n            p /= 10;\n        }\n\n        return new String(outputbuffer, 0, q);\n\n    }\n\n    /** Convert an instance to a string using normal notation.\n     * @return string representation of the instance in normal notation\n     */\n    protected String dfp2string() {\n        char buffer[] = new char[mant.length*4 + 20];\n        int p = 1;\n        int q;\n        int e = exp;\n        boolean pointInserted = false;\n\n        buffer[0] = ' ';\n\n        if (e <= 0) {\n            buffer[p++] = '0';\n            buffer[p++] = '.';\n            pointInserted = true;\n        }\n\n        while (e < 0) {\n            buffer[p++] = '0';\n            buffer[p++] = '0';\n            buffer[p++] = '0';\n            buffer[p++] = '0';\n            e++;\n        }\n\n        for (int i = mant.length - 1; i >= 0; i--) {\n            buffer[p++] = (char) ((mant[i] / 1000) + '0');\n            buffer[p++] = (char) (((mant[i] / 100) % 10) + '0');\n            buffer[p++] = (char) (((mant[i] / 10) % 10) + '0');\n            buffer[p++] = (char) (((mant[i]) % 10) + '0');\n            if (--e == 0) {\n                buffer[p++] = '.';\n                pointInserted = true;\n            }\n        }\n\n        while (e > 0) {\n            buffer[p++] = '0';\n            buffer[p++] = '0';\n            buffer[p++] = '0';\n            buffer[p++] = '0';\n            e--;\n        }\n\n        if (!pointInserted) {\n            // Ensure we have a radix point!\n            buffer[p++] = '.';\n        }\n\n        // Suppress leading zeros\n        q = 1;\n        while (buffer[q] == '0') {\n            q++;\n        }\n        if (buffer[q] == '.') {\n            q--;\n        }\n\n        // Suppress trailing zeros\n        while (buffer[p-1] == '0') {\n            p--;\n        }\n\n        // Insert sign\n        if (sign < 0) {\n            buffer[--q] = '-';\n        }\n\n        return new String(buffer, q, p - q);\n\n    }\n\n    /** Raises a trap.  This does not set the corresponding flag however.\n     *  @param type the trap type\n     *  @param what - name of routine trap occurred in\n     *  @param oper - input operator to function\n     *  @param result - the result computed prior to the trap\n     *  @return The suggested return value from the trap handler\n     */\n    public Dfp dotrap(int type, String what, Dfp oper, Dfp result) {\n        Dfp def = result;\n\n        switch (type) {\n            case DfpField.FLAG_INVALID:\n                def = newInstance(getZero());\n                def.sign = result.sign;\n                def.nans = QNAN;\n                break;\n\n            case DfpField.FLAG_DIV_ZERO:\n                if (nans == FINITE && mant[mant.length-1] != 0) {\n                    // normal case, we are finite, non-zero\n                    def = newInstance(getZero());\n                    def.sign = (byte)(sign*oper.sign);\n                    def.nans = INFINITE;\n                }\n\n                if (nans == FINITE && mant[mant.length-1] == 0) {\n                    //  0/0\n                    def = newInstance(getZero());\n                    def.nans = QNAN;\n                }\n\n                if (nans == INFINITE || nans == QNAN) {\n                    def = newInstance(getZero());\n                    def.nans = QNAN;\n                }\n\n                if (nans == INFINITE || nans == SNAN) {\n                    def = newInstance(getZero());\n                    def.nans = QNAN;\n                }\n                break;\n\n            case DfpField.FLAG_UNDERFLOW:\n                if ( (result.exp+mant.length) < MIN_EXP) {\n                    def = newInstance(getZero());\n                    def.sign = result.sign;\n                } else {\n                    def = newInstance(result);  // gradual underflow\n                }\n                result.exp += ERR_SCALE;\n                break;\n\n            case DfpField.FLAG_OVERFLOW:\n                result.exp -= ERR_SCALE;\n                def = newInstance(getZero());\n                def.sign = result.sign;\n                def.nans = INFINITE;\n                break;\n\n            default: def = result; break;\n        }\n\n        return trap(type, what, oper, def, result);\n\n    }\n\n    /** Trap handler.  Subclasses may override this to provide trap\n     *  functionality per IEEE 854-1987.\n     *\n     *  @param type  The exception type - e.g. FLAG_OVERFLOW\n     *  @param what  The name of the routine we were in e.g. divide()\n     *  @param oper  An operand to this function if any\n     *  @param def   The default return value if trap not enabled\n     *  @param result    The result that is specified to be delivered per\n     *                   IEEE 854, if any\n     *  @return the value that should be return by the operation triggering the trap\n     */\n    protected Dfp trap(int type, String what, Dfp oper, Dfp def, Dfp result) {\n        return def;\n    }\n\n    /** Returns the type - one of FINITE, INFINITE, SNAN, QNAN.\n     * @return type of the number\n     */\n    public int classify() {\n        return nans;\n    }\n\n    /** Creates an instance that is the same as x except that it has the sign of y.\n     * abs(x) = dfp.copysign(x, dfp.one)\n     * @param x number to get the value from\n     * @param y number to get the sign from\n     * @return a number with the value of x and the sign of y\n     */\n    public static Dfp copysign(final Dfp x, final Dfp y) {\n        Dfp result = x.newInstance(x);\n        result.sign = y.sign;\n        return result;\n    }\n\n    /** Returns the next number greater than this one in the direction of x.\n     * If this==x then simply returns this.\n     * @param x direction where to look at\n     * @return closest number next to instance in the direction of x\n     */\n    public Dfp nextAfter(final Dfp x) {\n\n        // make sure we don't mix number with different precision\n        if (field.getRadixDigits() != x.field.getRadixDigits()) {\n            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);\n            final Dfp result = newInstance(getZero());\n            result.nans = QNAN;\n            return dotrap(DfpField.FLAG_INVALID, NEXT_AFTER_TRAP, x, result);\n        }\n\n        // if this is greater than x\n        boolean up = false;\n        if (this.lessThan(x)) {\n            up = true;\n        }\n\n        if (compare(this, x) == 0) {\n            return newInstance(x);\n        }\n\n        if (lessThan(getZero())) {\n            up = !up;\n        }\n\n        final Dfp inc;\n        Dfp result;\n        if (up) {\n            inc = newInstance(getOne());\n            inc.exp = this.exp-mant.length+1;\n            inc.sign = this.sign;\n\n            if (this.equals(getZero())) {\n                inc.exp = MIN_EXP-mant.length;\n            }\n\n            result = add(inc);\n        } else {\n            inc = newInstance(getOne());\n            inc.exp = this.exp;\n            inc.sign = this.sign;\n\n            if (this.equals(inc)) {\n                inc.exp = this.exp-mant.length;\n            } else {\n                inc.exp = this.exp-mant.length+1;\n            }\n\n            if (this.equals(getZero())) {\n                inc.exp = MIN_EXP-mant.length;\n            }\n\n            result = this.subtract(inc);\n        }\n\n        if (result.classify() == INFINITE && this.classify() != INFINITE) {\n            field.setIEEEFlagsBits(DfpField.FLAG_INEXACT);\n            result = dotrap(DfpField.FLAG_INEXACT, NEXT_AFTER_TRAP, x, result);\n        }\n\n        if (result.equals(getZero()) && this.equals(getZero()) == false) {\n            field.setIEEEFlagsBits(DfpField.FLAG_INEXACT);\n            result = dotrap(DfpField.FLAG_INEXACT, NEXT_AFTER_TRAP, x, result);\n        }\n\n        return result;\n\n    }\n\n    /** Convert the instance into a double.\n     * @return a double approximating the instance\n     * @see #toSplitDouble()\n     */\n    public double toDouble() {\n\n        if (isInfinite()) {\n            if (lessThan(getZero())) {\n                return Double.NEGATIVE_INFINITY;\n            } else {\n                return Double.POSITIVE_INFINITY;\n            }\n        }\n\n        if (isNaN()) {\n            return Double.NaN;\n        }\n\n        Dfp y = this;\n        boolean negate = false;\n        int cmp0 = compare(this, getZero());\n        if (cmp0 == 0) {\n            return sign < 0 ? -0.0 : +0.0;\n        } else if (cmp0 < 0) {\n            y = negate();\n            negate = true;\n        }\n\n        /* Find the exponent, first estimate by integer log10, then adjust.\n         Should be faster than doing a natural logarithm.  */\n        int exponent = (int)(y.intLog10() * 3.32);\n        if (exponent < 0) {\n            exponent--;\n        }\n\n        Dfp tempDfp = DfpMath.pow(getTwo(), exponent);\n        while (tempDfp.lessThan(y) || tempDfp.equals(y)) {\n            tempDfp = tempDfp.multiply(2);\n            exponent++;\n        }\n        exponent--;\n\n        /* We have the exponent, now work on the mantissa */\n\n        y = y.divide(DfpMath.pow(getTwo(), exponent));\n        if (exponent > -1023) {\n            y = y.subtract(getOne());\n        }\n\n        if (exponent < -1074) {\n            return 0;\n        }\n\n        if (exponent > 1023) {\n            return negate ? Double.NEGATIVE_INFINITY : Double.POSITIVE_INFINITY;\n        }\n\n\n        y = y.multiply(newInstance(4503599627370496l)).rint();\n        String str = y.toString();\n        str = str.substring(0, str.length()-1);\n        long mantissa = Long.parseLong(str);\n\n        if (mantissa == 4503599627370496L) {\n            // Handle special case where we round up to next power of two\n            mantissa = 0;\n            exponent++;\n        }\n\n        /* Its going to be subnormal, so make adjustments */\n        if (exponent <= -1023) {\n            exponent--;\n        }\n\n        while (exponent < -1023) {\n            exponent++;\n            mantissa >>>= 1;\n        }\n\n        long bits = mantissa | ((exponent + 1023L) << 52);\n        double x = Double.longBitsToDouble(bits);\n\n        if (negate) {\n            x = -x;\n        }\n\n        return x;\n\n    }\n\n    /** Convert the instance into a split double.\n     * @return an array of two doubles which sum represent the instance\n     * @see #toDouble()\n     */\n    public double[] toSplitDouble() {\n        double split[] = new double[2];\n        long mask = 0xffffffffc0000000L;\n\n        split[0] = Double.longBitsToDouble(Double.doubleToLongBits(toDouble()) & mask);\n        split[1] = subtract(newInstance(split[0])).toDouble();\n\n        return split;\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public double getReal() {\n        return toDouble();\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp add(final double a) {\n        return add(newInstance(a));\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp subtract(final double a) {\n        return subtract(newInstance(a));\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp multiply(final double a) {\n        return multiply(newInstance(a));\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp divide(final double a) {\n        return divide(newInstance(a));\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp remainder(final double a) {\n        return remainder(newInstance(a));\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public long round() {\n        return FastMath.round(toDouble());\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp signum() {\n        if (isNaN() || isZero()) {\n            return this;\n        } else {\n            return newInstance(sign > 0 ? +1 : -1);\n        }\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp copySign(final Dfp s) {\n        if ((sign >= 0 && s.sign >= 0) || (sign < 0 && s.sign < 0)) { // Sign is currently OK\n            return this;\n        }\n        return negate(); // flip sign\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp copySign(final double s) {\n        long sb = Double.doubleToLongBits(s);\n        if ((sign >= 0 && sb >= 0) || (sign < 0 && sb < 0)) { // Sign is currently OK\n            return this;\n        }\n        return negate(); // flip sign\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp scalb(final int n) {\n        return multiply(DfpMath.pow(getTwo(), n));\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp hypot(final Dfp y) {\n        return multiply(this).add(y.multiply(y)).sqrt();\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp cbrt() {\n        return rootN(3);\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp rootN(final int n) {\n        return (sign >= 0) ?\n               DfpMath.pow(this, getOne().divide(n)) :\n               DfpMath.pow(negate(), getOne().divide(n)).negate();\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp pow(final double p) {\n        return DfpMath.pow(this, newInstance(p));\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp pow(final int n) {\n        return DfpMath.pow(this, n);\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp pow(final Dfp e) {\n        return DfpMath.pow(this, e);\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp exp() {\n        return DfpMath.exp(this);\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp expm1() {\n        return DfpMath.exp(this).subtract(getOne());\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp log() {\n        return DfpMath.log(this);\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp log1p() {\n        return DfpMath.log(this.add(getOne()));\n    }\n\n//  TODO: deactivate this implementation (and return type) in 4.0\n    /** Get the exponent of the greatest power of 10 that is less than or equal to abs(this).\n     *  @return integer base 10 logarithm\n     *  @deprecated as of 3.2, replaced by {@link #intLog10()}, in 4.0 the return type\n     *  will be changed to Dfp\n     */\n    @Deprecated\n    public int log10()  {\n        return intLog10();\n    }\n\n//    TODO: activate this implementation (and return type) in 4.0\n//    /** {@inheritDoc}\n//     * @since 3.2\n//     */\n//    public Dfp log10() {\n//        return DfpMath.log(this).divide(DfpMath.log(newInstance(10)));\n//    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp cos() {\n        return DfpMath.cos(this);\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp sin() {\n        return DfpMath.sin(this);\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp tan() {\n        return DfpMath.tan(this);\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp acos() {\n        return DfpMath.acos(this);\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp asin() {\n        return DfpMath.asin(this);\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp atan() {\n        return DfpMath.atan(this);\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp atan2(final Dfp x)\n        throws DimensionMismatchException {\n\n        // compute r = sqrt(x^2+y^2)\n        final Dfp r = x.multiply(x).add(multiply(this)).sqrt();\n\n        if (x.sign >= 0) {\n\n            // compute atan2(y, x) = 2 atan(y / (r + x))\n            return getTwo().multiply(divide(r.add(x)).atan());\n\n        } else {\n\n            // compute atan2(y, x) = +/- pi - 2 atan(y / (r - x))\n            final Dfp tmp = getTwo().multiply(divide(r.subtract(x)).atan());\n            final Dfp pmPi = newInstance((tmp.sign <= 0) ? -FastMath.PI : FastMath.PI);\n            return pmPi.subtract(tmp);\n\n        }\n\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp cosh() {\n        return DfpMath.exp(this).add(DfpMath.exp(negate())).divide(2);\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp sinh() {\n        return DfpMath.exp(this).subtract(DfpMath.exp(negate())).divide(2);\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp tanh() {\n        final Dfp ePlus  = DfpMath.exp(this);\n        final Dfp eMinus = DfpMath.exp(negate());\n        return ePlus.subtract(eMinus).divide(ePlus.add(eMinus));\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp acosh() {\n        return multiply(this).subtract(getOne()).sqrt().add(this).log();\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp asinh() {\n        return multiply(this).add(getOne()).sqrt().add(this).log();\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp atanh() {\n        return getOne().add(this).divide(getOne().subtract(this)).log().divide(2);\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp linearCombination(final Dfp[] a, final Dfp[] b)\n        throws DimensionMismatchException {\n        if (a.length != b.length) {\n            throw new DimensionMismatchException(a.length, b.length);\n        }\n        Dfp r = getZero();\n        for (int i = 0; i < a.length; ++i) {\n            r = r.add(a[i].multiply(b[i]));\n        }\n        return r;\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp linearCombination(final double[] a, final Dfp[] b)\n        throws DimensionMismatchException {\n        if (a.length != b.length) {\n            throw new DimensionMismatchException(a.length, b.length);\n        }\n        Dfp r = getZero();\n        for (int i = 0; i < a.length; ++i) {\n            r = r.add(b[i].multiply(a[i]));\n        }\n        return r;\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp linearCombination(final Dfp a1, final Dfp b1, final Dfp a2, final Dfp b2) {\n        return a1.multiply(b1).add(a2.multiply(b2));\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp linearCombination(final double a1, final Dfp b1, final double a2, final Dfp b2) {\n        return b1.multiply(a1).add(b2.multiply(a2));\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp linearCombination(final Dfp a1, final Dfp b1,\n                                 final Dfp a2, final Dfp b2,\n                                 final Dfp a3, final Dfp b3) {\n        return a1.multiply(b1).add(a2.multiply(b2)).add(a3.multiply(b3));\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp linearCombination(final double a1, final Dfp b1,\n                                 final double a2, final Dfp b2,\n                                 final double a3, final Dfp b3) {\n        return b1.multiply(a1).add(b2.multiply(a2)).add(b3.multiply(a3));\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp linearCombination(final Dfp a1, final Dfp b1, final Dfp a2, final Dfp b2,\n                                 final Dfp a3, final Dfp b3, final Dfp a4, final Dfp b4) {\n        return a1.multiply(b1).add(a2.multiply(b2)).add(a3.multiply(b3)).add(a4.multiply(b4));\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp linearCombination(final double a1, final Dfp b1, final double a2, final Dfp b2,\n                                 final double a3, final Dfp b3, final double a4, final Dfp b4) {\n        return b1.multiply(a1).add(b2.multiply(a2)).add(b3.multiply(a3)).add(b4.multiply(a4));\n    }\n\n}\n",
  "tokensGeneralGrammar" : [ "null", "true", "false", ",", ".", ":", ";", "?", "(", ")", "jdVar", "stream", "Arrays", "allMatch", "noneMatch", "anyMatch", "~", ">>", "<<", ">>>", "|", "&", "^", "+", "-", "/", "*", "%", "&&", "||", ">=", "<=", ">", "<", "==", "!=", "instanceof", "class", "methodResultID", "this" ],
  "tokensGeneralValuesGlobalDictionary" : [ [ "0", "int" ], [ "1", "int" ], [ "-1", "int" ], [ "0.0", "double" ], [ "1.0", "double" ], [ "-1.0", "double" ], [ "\"\"", "String" ], [ "\" \"", "String" ] ],
  "tokensProjectClasses" : [ [ "RealFieldElement", "org.apache.commons.math3" ], [ "Primes", "org.apache.commons.math3.primes" ], [ "SmallPrimes", "org.apache.commons.math3.primes" ], [ "PollardRho", "org.apache.commons.math3.primes" ], [ "CurveFitter", "org.apache.commons.math3.fitting" ], [ "GaussianCurveFitter", "org.apache.commons.math3.fitting" ], [ "SimpleCurveFitter", "org.apache.commons.math3.fitting" ], [ "PolynomialFitter", "org.apache.commons.math3.fitting" ], [ "HarmonicFitter", "org.apache.commons.math3.fitting" ], [ "WeightedObservedPoint", "org.apache.commons.math3.fitting" ], [ "ParameterValidator", "org.apache.commons.math3.fitting.leastsquares" ], [ "LevenbergMarquardtOptimizer", "org.apache.commons.math3.fitting.leastsquares" ], [ "EvaluationRmsChecker", "org.apache.commons.math3.fitting.leastsquares" ], [ "OptimumImpl", "org.apache.commons.math3.fitting.leastsquares" ], [ "LeastSquaresAdapter", "org.apache.commons.math3.fitting.leastsquares" ], [ "DenseWeightedEvaluation", "org.apache.commons.math3.fitting.leastsquares" ], [ "LeastSquaresOptimizer", "org.apache.commons.math3.fitting.leastsquares" ], [ "AbstractEvaluation", "org.apache.commons.math3.fitting.leastsquares" ], [ "GaussNewtonOptimizer", "org.apache.commons.math3.fitting.leastsquares" ], [ "LeastSquaresFactory", "org.apache.commons.math3.fitting.leastsquares" ], [ "ValueAndJacobianFunction", "org.apache.commons.math3.fitting.leastsquares" ], [ "MultivariateJacobianFunction", "org.apache.commons.math3.fitting.leastsquares" ], [ "LeastSquaresBuilder", "org.apache.commons.math3.fitting.leastsquares" ], [ "LeastSquaresProblem", "org.apache.commons.math3.fitting.leastsquares" ], [ "WeightedObservedPoints", "org.apache.commons.math3.fitting" ], [ "GaussianFitter", "org.apache.commons.math3.fitting" ], [ "AbstractCurveFitter", "org.apache.commons.math3.fitting" ], [ "HarmonicCurveFitter", "org.apache.commons.math3.fitting" ], [ "PolynomialCurveFitter", "org.apache.commons.math3.fitting" ], [ "UnivariateMatrixFunction", "org.apache.commons.math3.analysis" ], [ "FunctionUtils", "org.apache.commons.math3.analysis" ], [ "DifferentiableUnivariateMatrixFunction", "org.apache.commons.math3.analysis" ], [ "IterativeLegendreGaussIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "LegendreGaussIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "MidPointIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "RombergIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "SimpsonIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "BaseRuleFactory", "org.apache.commons.math3.analysis.integration.gauss" ], [ "HermiteRuleFactory", "org.apache.commons.math3.analysis.integration.gauss" ], [ "GaussIntegratorFactory", "org.apache.commons.math3.analysis.integration.gauss" ], [ "LegendreRuleFactory", "org.apache.commons.math3.analysis.integration.gauss" ], [ "LegendreHighPrecisionRuleFactory", "org.apache.commons.math3.analysis.integration.gauss" ], [ "SymmetricGaussIntegrator", "org.apache.commons.math3.analysis.integration.gauss" ], [ "GaussIntegrator", "org.apache.commons.math3.analysis.integration.gauss" ], [ "BaseAbstractUnivariateIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "UnivariateIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "TrapezoidIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "BivariateFunction", "org.apache.commons.math3.analysis" ], [ "DifferentiableUnivariateFunction", "org.apache.commons.math3.analysis" ], [ "DifferentiableUnivariateVectorFunction", "org.apache.commons.math3.analysis" ], [ "UnivariateVectorFunction", "org.apache.commons.math3.analysis" ], [ "AbstractDifferentiableUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "AbstractUnivariateDifferentiableSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BaseUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "PegasusSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BracketedUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "UnivariateSolverUtils", "org.apache.commons.math3.analysis.solvers" ], [ "FieldBracketingNthOrderBrentSolver", "org.apache.commons.math3.analysis.solvers" ], [ "NewtonRaphsonSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BaseSecantSolver", "org.apache.commons.math3.analysis.solvers" ], [ "SecantSolver", "org.apache.commons.math3.analysis.solvers" ], [ "DifferentiableUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "UnivariateDifferentiableSolver", "org.apache.commons.math3.analysis.solvers" ], [ "MullerSolver2", "org.apache.commons.math3.analysis.solvers" ], [ "AbstractPolynomialSolver", "org.apache.commons.math3.analysis.solvers" ], [ "MullerSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BaseAbstractUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BrentSolver", "org.apache.commons.math3.analysis.solvers" ], [ "LaguerreSolver", "org.apache.commons.math3.analysis.solvers" ], [ "IllinoisSolver", "org.apache.commons.math3.analysis.solvers" ], [ "PolynomialSolver", "org.apache.commons.math3.analysis.solvers" ], [ "RegulaFalsiSolver", "org.apache.commons.math3.analysis.solvers" ], [ "AllowedSolution", "org.apache.commons.math3.analysis.solvers" ], [ "NewtonSolver", "org.apache.commons.math3.analysis.solvers" ], [ "RiddersSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BisectionSolver", "org.apache.commons.math3.analysis.solvers" ], [ "AbstractUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "UnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BracketingNthOrderBrentSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BracketedRealFieldUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "Asin", "org.apache.commons.math3.analysis.function" ], [ "Cosh", "org.apache.commons.math3.analysis.function" ], [ "Multiply", "org.apache.commons.math3.analysis.function" ], [ "Atan", "org.apache.commons.math3.analysis.function" ], [ "Asinh", "org.apache.commons.math3.analysis.function" ], [ "Rint", "org.apache.commons.math3.analysis.function" ], [ "Cos", "org.apache.commons.math3.analysis.function" ], [ "StepFunction", "org.apache.commons.math3.analysis.function" ], [ "Add", "org.apache.commons.math3.analysis.function" ], [ "Sqrt", "org.apache.commons.math3.analysis.function" ], [ "Inverse", "org.apache.commons.math3.analysis.function" ], [ "Gaussian", "org.apache.commons.math3.analysis.function" ], [ "Pow", "org.apache.commons.math3.analysis.function" ], [ "Exp", "org.apache.commons.math3.analysis.function" ], [ "Tanh", "org.apache.commons.math3.analysis.function" ], [ "Cbrt", "org.apache.commons.math3.analysis.function" ], [ "Log1p", "org.apache.commons.math3.analysis.function" ], [ "Constant", "org.apache.commons.math3.analysis.function" ], [ "Identity", "org.apache.commons.math3.analysis.function" ], [ "Signum", "org.apache.commons.math3.analysis.function" ], [ "Logit", "org.apache.commons.math3.analysis.function" ], [ "Ceil", "org.apache.commons.math3.analysis.function" ], [ "Subtract", "org.apache.commons.math3.analysis.function" ], [ "Sinh", "org.apache.commons.math3.analysis.function" ], [ "Max", "org.apache.commons.math3.analysis.function" ], [ "Acosh", "org.apache.commons.math3.analysis.function" ], [ "Min", "org.apache.commons.math3.analysis.function" ], [ "Expm1", "org.apache.commons.math3.analysis.function" ], [ "Abs", "org.apache.commons.math3.analysis.function" ], [ "Divide", "org.apache.commons.math3.analysis.function" ], [ "Log", "org.apache.commons.math3.analysis.function" ], [ "Ulp", "org.apache.commons.math3.analysis.function" ], [ "Log10", "org.apache.commons.math3.analysis.function" ], [ "Power", "org.apache.commons.math3.analysis.function" ], [ "Minus", "org.apache.commons.math3.analysis.function" ], [ "Atan2", "org.apache.commons.math3.analysis.function" ], [ "Logistic", "org.apache.commons.math3.analysis.function" ], [ "Acos", "org.apache.commons.math3.analysis.function" ], [ "Floor", "org.apache.commons.math3.analysis.function" ], [ "Sigmoid", "org.apache.commons.math3.analysis.function" ], [ "Sinc", "org.apache.commons.math3.analysis.function" ], [ "Atanh", "org.apache.commons.math3.analysis.function" ], [ "HarmonicOscillator", "org.apache.commons.math3.analysis.function" ], [ "Tan", "org.apache.commons.math3.analysis.function" ], [ "Sin", "org.apache.commons.math3.analysis.function" ], [ "MultivariateFunction", "org.apache.commons.math3.analysis" ], [ "DifferentiableMultivariateFunction", "org.apache.commons.math3.analysis" ], [ "UnivariateFunction", "org.apache.commons.math3.analysis" ], [ "TrivariateFunction", "org.apache.commons.math3.analysis" ], [ "MultivariateMatrixFunction", "org.apache.commons.math3.analysis" ], [ "ParametricUnivariateFunction", "org.apache.commons.math3.analysis" ], [ "UnivariateDifferentiableVectorFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "UnivariateDifferentiableMatrixFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "DSCompiler", "org.apache.commons.math3.analysis.differentiation" ], [ "SparseGradient", "org.apache.commons.math3.analysis.differentiation" ], [ "UnivariateFunctionDifferentiator", "org.apache.commons.math3.analysis.differentiation" ], [ "UnivariateMatrixFunctionDifferentiator", "org.apache.commons.math3.analysis.differentiation" ], [ "MultivariateDifferentiableFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "JacobianFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "GradientFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "DerivativeStructure", "org.apache.commons.math3.analysis.differentiation" ], [ "UnivariateVectorFunctionDifferentiator", "org.apache.commons.math3.analysis.differentiation" ], [ "FiniteDifferencesDifferentiator", "org.apache.commons.math3.analysis.differentiation" ], [ "MultivariateDifferentiableVectorFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "UnivariateDifferentiableFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "MultivariateVectorFunction", "org.apache.commons.math3.analysis" ], [ "DifferentiableMultivariateVectorFunction", "org.apache.commons.math3.analysis" ], [ "PolynomialFunctionNewtonForm", "org.apache.commons.math3.analysis.polynomials" ], [ "PolynomialFunctionLagrangeForm", "org.apache.commons.math3.analysis.polynomials" ], [ "PolynomialSplineFunction", "org.apache.commons.math3.analysis.polynomials" ], [ "PolynomialsUtils", "org.apache.commons.math3.analysis.polynomials" ], [ "PolynomialFunction", "org.apache.commons.math3.analysis.polynomials" ], [ "RealFieldUnivariateFunction", "org.apache.commons.math3.analysis" ], [ "TricubicInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "BicubicSplineInterpolatingFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "BicubicSplineFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "LoessInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "DividedDifferenceInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "HermiteInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "TricubicInterpolatingFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "TricubicFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "TrivariateGridInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "NevilleInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "MicrosphereProjectionInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "AkimaSplineInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "MultivariateInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "BicubicSplineInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "TricubicSplineInterpolatingFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "TricubicSplineFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "FieldHermiteInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "InterpolatingMicrosphere", "org.apache.commons.math3.analysis.interpolation" ], [ "LinearInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "BivariateGridInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "UnivariatePeriodicInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "BicubicInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "UnivariateInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "SmoothingPolynomialBicubicSplineInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "PiecewiseBicubicSplineInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "BicubicInterpolatingFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "BicubicFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "SplineInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "TricubicSplineInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "InterpolatingMicrosphere2D", "org.apache.commons.math3.analysis.interpolation" ], [ "PiecewiseBicubicSplineInterpolatingFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "MicrosphereInterpolatingFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "MicrosphereInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "Precision", "org.apache.commons.math3.util" ], [ "MultidimensionalCounter", "org.apache.commons.math3.util" ], [ "DoubleArray", "org.apache.commons.math3.util" ], [ "Incrementor", "org.apache.commons.math3.util" ], [ "OpenIntToDoubleHashMap", "org.apache.commons.math3.util" ], [ "OpenIntToFieldHashMap", "org.apache.commons.math3.util" ], [ "MathArrays", "org.apache.commons.math3.util" ], [ "Pair", "org.apache.commons.math3.util" ], [ "FastMathCalc", "org.apache.commons.math3.util" ], [ "FastMath", "org.apache.commons.math3.util" ], [ "ResizableDoubleArray", "org.apache.commons.math3.util" ], [ "BigRealField", "org.apache.commons.math3.util" ], [ "Decimal64Field", "org.apache.commons.math3.util" ], [ "Combinations", "org.apache.commons.math3.util" ], [ "MathUtils", "org.apache.commons.math3.util" ], [ "NumberTransformer", "org.apache.commons.math3.util" ], [ "ContinuedFraction", "org.apache.commons.math3.util" ], [ "RandomPivotingStrategy", "org.apache.commons.math3.util" ], [ "IterationManager", "org.apache.commons.math3.util" ], [ "CompositeFormat", "org.apache.commons.math3.util" ], [ "KthSelector", "org.apache.commons.math3.util" ], [ "IterationEvent", "org.apache.commons.math3.util" ], [ "TransformerMap", "org.apache.commons.math3.util" ], [ "IntegerSequence", "org.apache.commons.math3.util" ], [ "FastMathLiteralArrays", "org.apache.commons.math3.util" ], [ "CombinatoricsUtils", "org.apache.commons.math3.util" ], [ "IterationListener", "org.apache.commons.math3.util" ], [ "PivotingStrategyInterface", "org.apache.commons.math3.util" ], [ "CentralPivotingStrategy", "org.apache.commons.math3.util" ], [ "Decimal64", "org.apache.commons.math3.util" ], [ "DefaultTransformer", "org.apache.commons.math3.util" ], [ "BigReal", "org.apache.commons.math3.util" ], [ "ArithmeticUtils", "org.apache.commons.math3.util" ], [ "MedianOf3PivotingStrategy", "org.apache.commons.math3.util" ], [ "ComplexFormat", "org.apache.commons.math3.complex" ], [ "ComplexField", "org.apache.commons.math3.complex" ], [ "RootsOfUnity", "org.apache.commons.math3.complex" ], [ "Quaternion", "org.apache.commons.math3.complex" ], [ "Complex", "org.apache.commons.math3.complex" ], [ "ComplexUtils", "org.apache.commons.math3.complex" ], [ "DifferentiableMultivariateVectorOptimizer", "org.apache.commons.math3.optimization" ], [ "LeastSquaresConverter", "org.apache.commons.math3.optimization" ], [ "BaseMultivariateSimpleBoundsOptimizer", "org.apache.commons.math3.optimization" ], [ "PointValuePair", "org.apache.commons.math3.optimization" ], [ "DifferentiableMultivariateOptimizer", "org.apache.commons.math3.optimization" ], [ "SimpleValueChecker", "org.apache.commons.math3.optimization" ], [ "CurveFitter", "org.apache.commons.math3.optimization.fitting" ], [ "PolynomialFitter", "org.apache.commons.math3.optimization.fitting" ], [ "HarmonicFitter", "org.apache.commons.math3.optimization.fitting" ], [ "WeightedObservedPoint", "org.apache.commons.math3.optimization.fitting" ], [ "GaussianFitter", "org.apache.commons.math3.optimization.fitting" ], [ "AbstractConvergenceChecker", "org.apache.commons.math3.optimization" ], [ "AbstractSimplex", "org.apache.commons.math3.optimization.direct" ], [ "SimplexOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "BOBYQAOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "NelderMeadSimplex", "org.apache.commons.math3.optimization.direct" ], [ "MultivariateFunctionMappingAdapter", "org.apache.commons.math3.optimization.direct" ], [ "BaseAbstractMultivariateSimpleBoundsOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "BaseAbstractMultivariateVectorOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "CMAESOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "MultivariateFunctionPenaltyAdapter", "org.apache.commons.math3.optimization.direct" ], [ "BaseAbstractMultivariateOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "PowellOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "MultiDirectionalSimplex", "org.apache.commons.math3.optimization.direct" ], [ "InitialGuess", "org.apache.commons.math3.optimization" ], [ "Preconditioner", "org.apache.commons.math3.optimization.general" ], [ "LevenbergMarquardtOptimizer", "org.apache.commons.math3.optimization.general" ], [ "AbstractLeastSquaresOptimizer", "org.apache.commons.math3.optimization.general" ], [ "AbstractDifferentiableOptimizer", "org.apache.commons.math3.optimization.general" ], [ "GaussNewtonOptimizer", "org.apache.commons.math3.optimization.general" ], [ "AbstractScalarDifferentiableOptimizer", "org.apache.commons.math3.optimization.general" ], [ "NonLinearConjugateGradientOptimizer", "org.apache.commons.math3.optimization.general" ], [ "ConjugateGradientFormula", "org.apache.commons.math3.optimization.general" ], [ "BaseMultivariateVectorMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "NoFeasibleSolutionException", "org.apache.commons.math3.optimization.linear" ], [ "AbstractLinearOptimizer", "org.apache.commons.math3.optimization.linear" ], [ "LinearConstraint", "org.apache.commons.math3.optimization.linear" ], [ "SimplexSolver", "org.apache.commons.math3.optimization.linear" ], [ "LinearOptimizer", "org.apache.commons.math3.optimization.linear" ], [ "UnboundedSolutionException", "org.apache.commons.math3.optimization.linear" ], [ "SimplexTableau", "org.apache.commons.math3.optimization.linear" ], [ "LinearObjectiveFunction", "org.apache.commons.math3.optimization.linear" ], [ "Relationship", "org.apache.commons.math3.optimization.linear" ], [ "SimpleBounds", "org.apache.commons.math3.optimization" ], [ "PointVectorValuePair", "org.apache.commons.math3.optimization" ], [ "MultivariateDifferentiableVectorMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "DifferentiableMultivariateMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "SimplePointChecker", "org.apache.commons.math3.optimization" ], [ "SimpleVectorValueChecker", "org.apache.commons.math3.optimization" ], [ "BaseOptimizer", "org.apache.commons.math3.optimization" ], [ "MultivariateOptimizer", "org.apache.commons.math3.optimization" ], [ "GoalType", "org.apache.commons.math3.optimization" ], [ "BrentOptimizer", "org.apache.commons.math3.optimization.univariate" ], [ "UnivariateMultiStartOptimizer", "org.apache.commons.math3.optimization.univariate" ], [ "BaseUnivariateOptimizer", "org.apache.commons.math3.optimization.univariate" ], [ "BaseAbstractUnivariateOptimizer", "org.apache.commons.math3.optimization.univariate" ], [ "SimpleUnivariateValueChecker", "org.apache.commons.math3.optimization.univariate" ], [ "UnivariatePointValuePair", "org.apache.commons.math3.optimization.univariate" ], [ "BracketFinder", "org.apache.commons.math3.optimization.univariate" ], [ "UnivariateOptimizer", "org.apache.commons.math3.optimization.univariate" ], [ "BaseMultivariateOptimizer", "org.apache.commons.math3.optimization" ], [ "ConvergenceChecker", "org.apache.commons.math3.optimization" ], [ "BaseMultivariateMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "MultivariateDifferentiableOptimizer", "org.apache.commons.math3.optimization" ], [ "MultivariateDifferentiableVectorOptimizer", "org.apache.commons.math3.optimization" ], [ "Target", "org.apache.commons.math3.optimization" ], [ "Weight", "org.apache.commons.math3.optimization" ], [ "MultivariateMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "OptimizationData", "org.apache.commons.math3.optimization" ], [ "BaseMultivariateVectorOptimizer", "org.apache.commons.math3.optimization" ], [ "MultivariateDifferentiableMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "DifferentiableMultivariateVectorMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "NonSymmetricMatrixException", "org.apache.commons.math3.linear" ], [ "FieldVectorPreservingVisitor", "org.apache.commons.math3.linear" ], [ "FieldVector", "org.apache.commons.math3.linear" ], [ "AnyMatrix", "org.apache.commons.math3.linear" ], [ "NonSquareOperatorException", "org.apache.commons.math3.linear" ], [ "SingularValueDecomposition", "org.apache.commons.math3.linear" ], [ "EigenDecomposition", "org.apache.commons.math3.linear" ], [ "RealMatrixChangingVisitor", "org.apache.commons.math3.linear" ], [ "FieldLUDecomposition", "org.apache.commons.math3.linear" ], [ "NonPositiveDefiniteMatrixException", "org.apache.commons.math3.linear" ], [ "RealMatrixFormat", "org.apache.commons.math3.linear" ], [ "MatrixUtils", "org.apache.commons.math3.linear" ], [ "OpenMapRealVector", "org.apache.commons.math3.linear" ], [ "RealMatrixPreservingVisitor", "org.apache.commons.math3.linear" ], [ "SingularMatrixException", "org.apache.commons.math3.linear" ], [ "DefaultFieldMatrixPreservingVisitor", "org.apache.commons.math3.linear" ], [ "FieldVectorChangingVisitor", "org.apache.commons.math3.linear" ], [ "TriDiagonalTransformer", "org.apache.commons.math3.linear" ], [ "DefaultRealMatrixChangingVisitor", "org.apache.commons.math3.linear" ], [ "AbstractRealMatrix", "org.apache.commons.math3.linear" ], [ "Array2DRowRealMatrix", "org.apache.commons.math3.linear" ], [ "BlockFieldMatrix", "org.apache.commons.math3.linear" ], [ "Array2DRowFieldMatrix", "org.apache.commons.math3.linear" ], [ "FieldMatrix", "org.apache.commons.math3.linear" ], [ "IterativeLinearSolver", "org.apache.commons.math3.linear" ], [ "ArrayRealVector", "org.apache.commons.math3.linear" ], [ "MatrixDimensionMismatchException", "org.apache.commons.math3.linear" ], [ "ArrayFieldVector", "org.apache.commons.math3.linear" ], [ "DecompositionSolver", "org.apache.commons.math3.linear" ], [ "LUDecomposition", "org.apache.commons.math3.linear" ], [ "ConjugateGradient", "org.apache.commons.math3.linear" ], [ "NonPositiveDefiniteOperatorException", "org.apache.commons.math3.linear" ], [ "OpenMapRealMatrix", "org.apache.commons.math3.linear" ], [ "NonSelfAdjointOperatorException", "org.apache.commons.math3.linear" ], [ "BiDiagonalTransformer", "org.apache.commons.math3.linear" ], [ "CholeskyDecomposition", "org.apache.commons.math3.linear" ], [ "FieldDecompositionSolver", "org.apache.commons.math3.linear" ], [ "RealVectorPreservingVisitor", "org.apache.commons.math3.linear" ], [ "SingularOperatorException", "org.apache.commons.math3.linear" ], [ "BlockRealMatrix", "org.apache.commons.math3.linear" ], [ "SparseFieldMatrix", "org.apache.commons.math3.linear" ], [ "NonSquareMatrixException", "org.apache.commons.math3.linear" ], [ "SparseRealMatrix", "org.apache.commons.math3.linear" ], [ "RealVector", "org.apache.commons.math3.linear" ], [ "FieldMatrixPreservingVisitor", "org.apache.commons.math3.linear" ], [ "PreconditionedIterativeLinearSolver", "org.apache.commons.math3.linear" ], [ "QRDecomposition", "org.apache.commons.math3.linear" ], [ "SymmLQ", "org.apache.commons.math3.linear" ], [ "SparseFieldVector", "org.apache.commons.math3.linear" ], [ "RealVectorFormat", "org.apache.commons.math3.linear" ], [ "IllConditionedOperatorException", "org.apache.commons.math3.linear" ], [ "DefaultIterativeLinearSolverEvent", "org.apache.commons.math3.linear" ], [ "DefaultRealMatrixPreservingVisitor", "org.apache.commons.math3.linear" ], [ "IterativeLinearSolverEvent", "org.apache.commons.math3.linear" ], [ "DiagonalMatrix", "org.apache.commons.math3.linear" ], [ "HessenbergTransformer", "org.apache.commons.math3.linear" ], [ "RectangularCholeskyDecomposition", "org.apache.commons.math3.linear" ], [ "FieldMatrixChangingVisitor", "org.apache.commons.math3.linear" ], [ "DefaultFieldMatrixChangingVisitor", "org.apache.commons.math3.linear" ], [ "JacobiPreconditioner", "org.apache.commons.math3.linear" ], [ "RealLinearOperator", "org.apache.commons.math3.linear" ], [ "RRQRDecomposition", "org.apache.commons.math3.linear" ], [ "AbstractFieldMatrix", "org.apache.commons.math3.linear" ], [ "RealMatrix", "org.apache.commons.math3.linear" ], [ "SchurTransformer", "org.apache.commons.math3.linear" ], [ "RealVectorChangingVisitor", "org.apache.commons.math3.linear" ], [ "SparseRealVector", "org.apache.commons.math3.linear" ], [ "CauchyDistribution", "org.apache.commons.math3.distribution" ], [ "LaplaceDistribution", "org.apache.commons.math3.distribution" ], [ "AbstractRealDistribution", "org.apache.commons.math3.distribution" ], [ "HypergeometricDistribution", "org.apache.commons.math3.distribution" ], [ "TDistribution", "org.apache.commons.math3.distribution" ], [ "ChiSquaredDistribution", "org.apache.commons.math3.distribution" ], [ "TriangularDistribution", "org.apache.commons.math3.distribution" ], [ "MultivariateNormalMixtureExpectationMaximization", "org.apache.commons.math3.distribution.fitting" ], [ "BetaDistribution", "org.apache.commons.math3.distribution" ], [ "RealDistribution", "org.apache.commons.math3.distribution" ], [ "NormalDistribution", "org.apache.commons.math3.distribution" ], [ "SaddlePointExpansion", "org.apache.commons.math3.distribution" ], [ "MixtureMultivariateNormalDistribution", "org.apache.commons.math3.distribution" ], [ "UniformRealDistribution", "org.apache.commons.math3.distribution" ], [ "GumbelDistribution", "org.apache.commons.math3.distribution" ], [ "ZipfDistribution", "org.apache.commons.math3.distribution" ], [ "BinomialDistribution", "org.apache.commons.math3.distribution" ], [ "EnumeratedIntegerDistribution", "org.apache.commons.math3.distribution" ], [ "IntegerDistribution", "org.apache.commons.math3.distribution" ], [ "WeibullDistribution", "org.apache.commons.math3.distribution" ], [ "MultivariateRealDistribution", "org.apache.commons.math3.distribution" ], [ "NakagamiDistribution", "org.apache.commons.math3.distribution" ], [ "EnumeratedDistribution", "org.apache.commons.math3.distribution" ], [ "ConstantRealDistribution", "org.apache.commons.math3.distribution" ], [ "MultivariateNormalDistribution", "org.apache.commons.math3.distribution" ], [ "ExponentialDistribution", "org.apache.commons.math3.distribution" ], [ "UniformIntegerDistribution", "org.apache.commons.math3.distribution" ], [ "LogNormalDistribution", "org.apache.commons.math3.distribution" ], [ "PascalDistribution", "org.apache.commons.math3.distribution" ], [ "ParetoDistribution", "org.apache.commons.math3.distribution" ], [ "FDistribution", "org.apache.commons.math3.distribution" ], [ "GeometricDistribution", "org.apache.commons.math3.distribution" ], [ "AbstractMultivariateRealDistribution", "org.apache.commons.math3.distribution" ], [ "AbstractIntegerDistribution", "org.apache.commons.math3.distribution" ], [ "PoissonDistribution", "org.apache.commons.math3.distribution" ], [ "KolmogorovSmirnovDistribution", "org.apache.commons.math3.distribution" ], [ "MixtureMultivariateRealDistribution", "org.apache.commons.math3.distribution" ], [ "GammaDistribution", "org.apache.commons.math3.distribution" ], [ "EnumeratedRealDistribution", "org.apache.commons.math3.distribution" ], [ "LogisticDistribution", "org.apache.commons.math3.distribution" ], [ "LevyDistribution", "org.apache.commons.math3.distribution" ], [ "PointValuePair", "org.apache.commons.math3.optim" ], [ "SimpleValueChecker", "org.apache.commons.math3.optim" ], [ "AbstractConvergenceChecker", "org.apache.commons.math3.optim" ], [ "InitialGuess", "org.apache.commons.math3.optim" ], [ "MaxIter", "org.apache.commons.math3.optim" ], [ "NoFeasibleSolutionException", "org.apache.commons.math3.optim.linear" ], [ "LinearConstraintSet", "org.apache.commons.math3.optim.linear" ], [ "LinearConstraint", "org.apache.commons.math3.optim.linear" ], [ "PivotSelectionRule", "org.apache.commons.math3.optim.linear" ], [ "SimplexSolver", "org.apache.commons.math3.optim.linear" ], [ "LinearOptimizer", "org.apache.commons.math3.optim.linear" ], [ "UnboundedSolutionException", "org.apache.commons.math3.optim.linear" ], [ "SimplexTableau", "org.apache.commons.math3.optim.linear" ], [ "SolutionCallback", "org.apache.commons.math3.optim.linear" ], [ "LinearObjectiveFunction", "org.apache.commons.math3.optim.linear" ], [ "NonNegativeConstraint", "org.apache.commons.math3.optim.linear" ], [ "Relationship", "org.apache.commons.math3.optim.linear" ], [ "AbstractOptimizationProblem", "org.apache.commons.math3.optim" ], [ "SimpleBounds", "org.apache.commons.math3.optim" ], [ "PointVectorValuePair", "org.apache.commons.math3.optim" ], [ "SimplePointChecker", "org.apache.commons.math3.optim" ], [ "SimpleVectorValueChecker", "org.apache.commons.math3.optim" ], [ "BaseOptimizer", "org.apache.commons.math3.optim" ], [ "BaseMultiStartMultivariateOptimizer", "org.apache.commons.math3.optim" ], [ "MultiStartUnivariateOptimizer", "org.apache.commons.math3.optim.univariate" ], [ "BrentOptimizer", "org.apache.commons.math3.optim.univariate" ], [ "UnivariateObjectiveFunction", "org.apache.commons.math3.optim.univariate" ], [ "SimpleUnivariateValueChecker", "org.apache.commons.math3.optim.univariate" ], [ "SearchInterval", "org.apache.commons.math3.optim.univariate" ], [ "UnivariatePointValuePair", "org.apache.commons.math3.optim.univariate" ], [ "BracketFinder", "org.apache.commons.math3.optim.univariate" ], [ "UnivariateOptimizer", "org.apache.commons.math3.optim.univariate" ], [ "BaseMultivariateOptimizer", "org.apache.commons.math3.optim" ], [ "ConvergenceChecker", "org.apache.commons.math3.optim" ], [ "OptimizationProblem", "org.apache.commons.math3.optim" ], [ "MaxEval", "org.apache.commons.math3.optim" ], [ "OptimizationData", "org.apache.commons.math3.optim" ], [ "Preconditioner", "org.apache.commons.math3.optim.nonlinear.scalar.gradient" ], [ "NonLinearConjugateGradientOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar.gradient" ], [ "LeastSquaresConverter", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "GradientMultivariateOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "MultivariateFunctionMappingAdapter", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "LineSearch", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "ObjectiveFunction", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "MultivariateOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "GoalType", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "AbstractSimplex", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "SimplexOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "BOBYQAOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "NelderMeadSimplex", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "CMAESOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "PowellOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "MultiDirectionalSimplex", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "MultiStartMultivariateOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "MultivariateFunctionPenaltyAdapter", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "ObjectiveFunctionGradient", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "ModelFunction", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "LevenbergMarquardtOptimizer", "org.apache.commons.math3.optim.nonlinear.vector.jacobian" ], [ "AbstractLeastSquaresOptimizer", "org.apache.commons.math3.optim.nonlinear.vector.jacobian" ], [ "GaussNewtonOptimizer", "org.apache.commons.math3.optim.nonlinear.vector.jacobian" ], [ "ModelFunctionJacobian", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "JacobianMultivariateVectorOptimizer", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "MultivariateVectorOptimizer", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "Target", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "Weight", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "MultiStartMultivariateVectorOptimizer", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "Erf", "org.apache.commons.math3.special" ], [ "BesselJ", "org.apache.commons.math3.special" ], [ "Gamma", "org.apache.commons.math3.special" ], [ "Beta", "org.apache.commons.math3.special" ], [ "FieldODEState", "org.apache.commons.math3.ode" ], [ "FieldODEStateAndDerivative", "org.apache.commons.math3.ode" ], [ "FirstOrderFieldDifferentialEquations", "org.apache.commons.math3.ode" ], [ "MultistepFieldIntegrator", "org.apache.commons.math3.ode" ], [ "ODEIntegrator", "org.apache.commons.math3.ode" ], [ "ParameterConfiguration", "org.apache.commons.math3.ode" ], [ "ContinuousOutputFieldModel", "org.apache.commons.math3.ode" ], [ "FirstOrderConverter", "org.apache.commons.math3.ode" ], [ "ParameterJacobianProvider", "org.apache.commons.math3.ode" ], [ "SecondOrderIntegrator", "org.apache.commons.math3.ode" ], [ "AbstractFieldIntegrator", "org.apache.commons.math3.ode" ], [ "ExpandableStatefulODE", "org.apache.commons.math3.ode" ], [ "MultistepIntegrator", "org.apache.commons.math3.ode" ], [ "Parameterizable", "org.apache.commons.math3.ode" ], [ "JacobianMatrices", "org.apache.commons.math3.ode" ], [ "StepNormalizer", "org.apache.commons.math3.ode.sampling" ], [ "FixedStepHandler", "org.apache.commons.math3.ode.sampling" ], [ "StepHandler", "org.apache.commons.math3.ode.sampling" ], [ "DummyStepHandler", "org.apache.commons.math3.ode.sampling" ], [ "FieldStepInterpolator", "org.apache.commons.math3.ode.sampling" ], [ "StepInterpolator", "org.apache.commons.math3.ode.sampling" ], [ "AbstractFieldStepInterpolator", "org.apache.commons.math3.ode.sampling" ], [ "FieldFixedStepHandler", "org.apache.commons.math3.ode.sampling" ], [ "StepNormalizerMode", "org.apache.commons.math3.ode.sampling" ], [ "AbstractStepInterpolator", "org.apache.commons.math3.ode.sampling" ], [ "FieldStepHandler", "org.apache.commons.math3.ode.sampling" ], [ "StepNormalizerBounds", "org.apache.commons.math3.ode.sampling" ], [ "NordsieckStepInterpolator", "org.apache.commons.math3.ode.sampling" ], [ "FieldStepNormalizer", "org.apache.commons.math3.ode.sampling" ], [ "RungeKuttaFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "GillIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince853FieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "EmbeddedRungeKuttaFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "HighamHall54FieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince54FieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "EulerFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "EulerStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "HighamHall54Integrator", "org.apache.commons.math3.ode.nonstiff" ], [ "MidpointStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "GillStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "LutherFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "GraggBulirschStoerIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "EmbeddedRungeKuttaIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince853StepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "HighamHall54FieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince54FieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "MidpointFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "ThreeEighthesFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "ThreeEighthesIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "ClassicalRungeKuttaIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsNordsieckTransformer", "org.apache.commons.math3.ode.nonstiff" ], [ "MidpointFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "MidpointIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "RungeKuttaStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince54StepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "LutherFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince54Integrator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "GraggBulirschStoerStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "ClassicalRungeKuttaStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "LutherIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdaptiveStepsizeIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "ClassicalRungeKuttaFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "EulerIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince853FieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "FieldButcherArrayProvider", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsMoultonIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "RungeKuttaFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince853Integrator", "org.apache.commons.math3.ode.nonstiff" ], [ "ThreeEighthesStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "EulerFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsMoultonFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "LutherStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "HighamHall54StepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsNordsieckFieldTransformer", "org.apache.commons.math3.ode.nonstiff" ], [ "ThreeEighthesFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "RungeKuttaIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsBashforthFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "ClassicalRungeKuttaFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdaptiveStepsizeFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsBashforthIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "GillFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "GillFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "FieldSecondaryEquations", "org.apache.commons.math3.ode" ], [ "MainStateJacobianProvider", "org.apache.commons.math3.ode" ], [ "SecondaryEquations", "org.apache.commons.math3.ode" ], [ "FirstOrderFieldIntegrator", "org.apache.commons.math3.ode" ], [ "ParameterJacobianWrapper", "org.apache.commons.math3.ode" ], [ "FieldEquationsMapper", "org.apache.commons.math3.ode" ], [ "FieldExpandableODE", "org.apache.commons.math3.ode" ], [ "ParameterizedWrapper", "org.apache.commons.math3.ode" ], [ "AbstractIntegrator", "org.apache.commons.math3.ode" ], [ "SecondOrderDifferentialEquations", "org.apache.commons.math3.ode" ], [ "AbstractParameterizable", "org.apache.commons.math3.ode" ], [ "UnknownParameterException", "org.apache.commons.math3.ode" ], [ "ContinuousOutputModel", "org.apache.commons.math3.ode" ], [ "FirstOrderDifferentialEquations", "org.apache.commons.math3.ode" ], [ "EquationsMapper", "org.apache.commons.math3.ode" ], [ "Transformer", "org.apache.commons.math3.ode.events" ], [ "FieldEventState", "org.apache.commons.math3.ode.events" ], [ "FieldEventHandler", "org.apache.commons.math3.ode.events" ], [ "EventHandler", "org.apache.commons.math3.ode.events" ], [ "Action", "org.apache.commons.math3.ode.events" ], [ "EventState", "org.apache.commons.math3.ode.events" ], [ "EventFilter", "org.apache.commons.math3.ode.events" ], [ "FilterType", "org.apache.commons.math3.ode.events" ], [ "ParameterizedODE", "org.apache.commons.math3.ode" ], [ "FirstOrderIntegrator", "org.apache.commons.math3.ode" ], [ "NaNStrategy", "org.apache.commons.math3.stat.ranking" ], [ "NaturalRanking", "org.apache.commons.math3.stat.ranking" ], [ "TiesStrategy", "org.apache.commons.math3.stat.ranking" ], [ "RankingAlgorithm", "org.apache.commons.math3.stat.ranking" ], [ "StatUtils", "org.apache.commons.math3.stat" ], [ "IntervalUtils", "org.apache.commons.math3.stat.interval" ], [ "AgrestiCoullInterval", "org.apache.commons.math3.stat.interval" ], [ "ConfidenceInterval", "org.apache.commons.math3.stat.interval" ], [ "WilsonScoreInterval", "org.apache.commons.math3.stat.interval" ], [ "ClopperPearsonInterval", "org.apache.commons.math3.stat.interval" ], [ "NormalApproximationInterval", "org.apache.commons.math3.stat.interval" ], [ "BinomialConfidenceInterval", "org.apache.commons.math3.stat.interval" ], [ "StorelessCovariance", "org.apache.commons.math3.stat.correlation" ], [ "StorelessBivariateCovariance", "org.apache.commons.math3.stat.correlation" ], [ "KendallsCorrelation", "org.apache.commons.math3.stat.correlation" ], [ "Covariance", "org.apache.commons.math3.stat.correlation" ], [ "PearsonsCorrelation", "org.apache.commons.math3.stat.correlation" ], [ "SpearmansCorrelation", "org.apache.commons.math3.stat.correlation" ], [ "DBSCANClusterer", "org.apache.commons.math3.stat.clustering" ], [ "EuclideanIntegerPoint", "org.apache.commons.math3.stat.clustering" ], [ "Cluster", "org.apache.commons.math3.stat.clustering" ], [ "EuclideanDoublePoint", "org.apache.commons.math3.stat.clustering" ], [ "Clusterable", "org.apache.commons.math3.stat.clustering" ], [ "KMeansPlusPlusClusterer", "org.apache.commons.math3.stat.clustering" ], [ "TestUtils", "org.apache.commons.math3.stat.inference" ], [ "TTest", "org.apache.commons.math3.stat.inference" ], [ "GTest", "org.apache.commons.math3.stat.inference" ], [ "AlternativeHypothesis", "org.apache.commons.math3.stat.inference" ], [ "MannWhitneyUTest", "org.apache.commons.math3.stat.inference" ], [ "WilcoxonSignedRankTest", "org.apache.commons.math3.stat.inference" ], [ "OneWayAnova", "org.apache.commons.math3.stat.inference" ], [ "ChiSquareTest", "org.apache.commons.math3.stat.inference" ], [ "BinomialTest", "org.apache.commons.math3.stat.inference" ], [ "KolmogorovSmirnovTest", "org.apache.commons.math3.stat.inference" ], [ "AbstractUnivariateStatistic", "org.apache.commons.math3.stat.descriptive" ], [ "SummaryStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "DescriptiveStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "MultivariateSummaryStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "SecondMoment", "org.apache.commons.math3.stat.descriptive.moment" ], [ "Mean", "org.apache.commons.math3.stat.descriptive.moment" ], [ "FourthMoment", "org.apache.commons.math3.stat.descriptive.moment" ], [ "Variance", "org.apache.commons.math3.stat.descriptive.moment" ], [ "Kurtosis", "org.apache.commons.math3.stat.descriptive.moment" ], [ "GeometricMean", "org.apache.commons.math3.stat.descriptive.moment" ], [ "StandardDeviation", "org.apache.commons.math3.stat.descriptive.moment" ], [ "VectorialCovariance", "org.apache.commons.math3.stat.descriptive.moment" ], [ "ThirdMoment", "org.apache.commons.math3.stat.descriptive.moment" ], [ "SemiVariance", "org.apache.commons.math3.stat.descriptive.moment" ], [ "FirstMoment", "org.apache.commons.math3.stat.descriptive.moment" ], [ "Skewness", "org.apache.commons.math3.stat.descriptive.moment" ], [ "VectorialMean", "org.apache.commons.math3.stat.descriptive.moment" ], [ "StatisticalSummaryValues", "org.apache.commons.math3.stat.descriptive" ], [ "StatisticalSummary", "org.apache.commons.math3.stat.descriptive" ], [ "StorelessUnivariateStatistic", "org.apache.commons.math3.stat.descriptive" ], [ "StatisticalMultivariateSummary", "org.apache.commons.math3.stat.descriptive" ], [ "AggregateSummaryStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "WeightedEvaluation", "org.apache.commons.math3.stat.descriptive" ], [ "SynchronizedSummaryStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "UnivariateStatistic", "org.apache.commons.math3.stat.descriptive" ], [ "Percentile", "org.apache.commons.math3.stat.descriptive.rank" ], [ "Max", "org.apache.commons.math3.stat.descriptive.rank" ], [ "PSquarePercentile", "org.apache.commons.math3.stat.descriptive.rank" ], [ "Min", "org.apache.commons.math3.stat.descriptive.rank" ], [ "Median", "org.apache.commons.math3.stat.descriptive.rank" ], [ "SynchronizedDescriptiveStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "SynchronizedMultivariateSummaryStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "SumOfSquares", "org.apache.commons.math3.stat.descriptive.summary" ], [ "Product", "org.apache.commons.math3.stat.descriptive.summary" ], [ "Sum", "org.apache.commons.math3.stat.descriptive.summary" ], [ "SumOfLogs", "org.apache.commons.math3.stat.descriptive.summary" ], [ "AbstractStorelessUnivariateStatistic", "org.apache.commons.math3.stat.descriptive" ], [ "SimpleRegression", "org.apache.commons.math3.stat.regression" ], [ "UpdatingMultipleLinearRegression", "org.apache.commons.math3.stat.regression" ], [ "AbstractMultipleLinearRegression", "org.apache.commons.math3.stat.regression" ], [ "GLSMultipleLinearRegression", "org.apache.commons.math3.stat.regression" ], [ "ModelSpecificationException", "org.apache.commons.math3.stat.regression" ], [ "RegressionResults", "org.apache.commons.math3.stat.regression" ], [ "MillerUpdatingRegression", "org.apache.commons.math3.stat.regression" ], [ "OLSMultipleLinearRegression", "org.apache.commons.math3.stat.regression" ], [ "MultipleLinearRegression", "org.apache.commons.math3.stat.regression" ], [ "Frequency", "org.apache.commons.math3.stat" ], [ "ChebyshevDistance", "org.apache.commons.math3.ml.distance" ], [ "CanberraDistance", "org.apache.commons.math3.ml.distance" ], [ "EuclideanDistance", "org.apache.commons.math3.ml.distance" ], [ "ManhattanDistance", "org.apache.commons.math3.ml.distance" ], [ "EarthMoversDistance", "org.apache.commons.math3.ml.distance" ], [ "DistanceMeasure", "org.apache.commons.math3.ml.distance" ], [ "CentroidCluster", "org.apache.commons.math3.ml.clustering" ], [ "DBSCANClusterer", "org.apache.commons.math3.ml.clustering" ], [ "Cluster", "org.apache.commons.math3.ml.clustering" ], [ "MultiKMeansPlusPlusClusterer", "org.apache.commons.math3.ml.clustering" ], [ "Clusterable", "org.apache.commons.math3.ml.clustering" ], [ "FuzzyKMeansClusterer", "org.apache.commons.math3.ml.clustering" ], [ "KMeansPlusPlusClusterer", "org.apache.commons.math3.ml.clustering" ], [ "SumOfClusterVariances", "org.apache.commons.math3.ml.clustering.evaluation" ], [ "ClusterEvaluator", "org.apache.commons.math3.ml.clustering.evaluation" ], [ "Clusterer", "org.apache.commons.math3.ml.clustering" ], [ "DoublePoint", "org.apache.commons.math3.ml.clustering" ], [ "KohonenTrainingTask", "org.apache.commons.math3.ml.neuralnet.sofm" ], [ "KohonenUpdateAction", "org.apache.commons.math3.ml.neuralnet.sofm" ], [ "QuasiSigmoidDecayFunction", "org.apache.commons.math3.ml.neuralnet.sofm.util" ], [ "ExponentialDecayFunction", "org.apache.commons.math3.ml.neuralnet.sofm.util" ], [ "NeighbourhoodSizeFunctionFactory", "org.apache.commons.math3.ml.neuralnet.sofm" ], [ "LearningFactorFunctionFactory", "org.apache.commons.math3.ml.neuralnet.sofm" ], [ "NeighbourhoodSizeFunction", "org.apache.commons.math3.ml.neuralnet.sofm" ], [ "LearningFactorFunction", "org.apache.commons.math3.ml.neuralnet.sofm" ], [ "MapUtils", "org.apache.commons.math3.ml.neuralnet" ], [ "Network", "org.apache.commons.math3.ml.neuralnet" ], [ "FeatureInitializerFactory", "org.apache.commons.math3.ml.neuralnet" ], [ "Neuron", "org.apache.commons.math3.ml.neuralnet" ], [ "FeatureInitializer", "org.apache.commons.math3.ml.neuralnet" ], [ "NeuronString", "org.apache.commons.math3.ml.neuralnet.oned" ], [ "NeuronSquareMesh2D", "org.apache.commons.math3.ml.neuralnet.twod" ], [ "SmoothedDataHistogram", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "UnifiedDistanceMatrix", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "MapDataVisualization", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "MapVisualization", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "LocationFinder", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "HitHistogram", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "QuantizationError", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "TopographicErrorHistogram", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "SquareNeighbourhood", "org.apache.commons.math3.ml.neuralnet" ], [ "UpdateAction", "org.apache.commons.math3.ml.neuralnet" ], [ "BracketingNthOrderBrentSolverDFP", "org.apache.commons.math3.dfp" ], [ "UnivariateDfpFunction", "org.apache.commons.math3.dfp" ], [ "DfpDec", "org.apache.commons.math3.dfp" ], [ "DfpMath", "org.apache.commons.math3.dfp" ], [ "Dfp", "org.apache.commons.math3.dfp" ], [ "DfpField", "org.apache.commons.math3.dfp" ], [ "GeneticAlgorithm", "org.apache.commons.math3.genetics" ], [ "SelectionPolicy", "org.apache.commons.math3.genetics" ], [ "ListPopulation", "org.apache.commons.math3.genetics" ], [ "FixedGenerationCount", "org.apache.commons.math3.genetics" ], [ "AbstractListChromosome", "org.apache.commons.math3.genetics" ], [ "OnePointCrossover", "org.apache.commons.math3.genetics" ], [ "ElitisticListPopulation", "org.apache.commons.math3.genetics" ], [ "Chromosome", "org.apache.commons.math3.genetics" ], [ "OrderedCrossover", "org.apache.commons.math3.genetics" ], [ "InvalidRepresentationException", "org.apache.commons.math3.genetics" ], [ "RandomKey", "org.apache.commons.math3.genetics" ], [ "StoppingCondition", "org.apache.commons.math3.genetics" ], [ "PermutationChromosome", "org.apache.commons.math3.genetics" ], [ "ChromosomePair", "org.apache.commons.math3.genetics" ], [ "TournamentSelection", "org.apache.commons.math3.genetics" ], [ "NPointCrossover", "org.apache.commons.math3.genetics" ], [ "UniformCrossover", "org.apache.commons.math3.genetics" ], [ "MutationPolicy", "org.apache.commons.math3.genetics" ], [ "FixedElapsedTime", "org.apache.commons.math3.genetics" ], [ "CycleCrossover", "org.apache.commons.math3.genetics" ], [ "BinaryMutation", "org.apache.commons.math3.genetics" ], [ "BinaryChromosome", "org.apache.commons.math3.genetics" ], [ "Population", "org.apache.commons.math3.genetics" ], [ "RandomKeyMutation", "org.apache.commons.math3.genetics" ], [ "Fitness", "org.apache.commons.math3.genetics" ], [ "CrossoverPolicy", "org.apache.commons.math3.genetics" ], [ "Vector", "org.apache.commons.math3.geometry" ], [ "VectorFormat", "org.apache.commons.math3.geometry" ], [ "Point", "org.apache.commons.math3.geometry" ], [ "RotationConvention", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "SubPlane", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Vector3DFormat", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Segment", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "OutlineExtractor", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "PolyhedronsSet", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "RotationOrder", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "FieldVector3D", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Rotation", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Euclidean3D", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "SubLine", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "SphericalCoordinates", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "CardanEulerSingularityException", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "NotARotationMatrixException", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "FieldRotation", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Vector3D", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Plane", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "SphereGenerator", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Line", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "IntervalsSet", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "Interval", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "SubOrientedPoint", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "OrientedPoint", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "Euclidean1D", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "Vector1DFormat", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "Vector1D", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "Segment", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "AbstractConvexHullGenerator2D", "org.apache.commons.math3.geometry.euclidean.twod.hull" ], [ "AklToussaintHeuristic", "org.apache.commons.math3.geometry.euclidean.twod.hull" ], [ "ConvexHull2D", "org.apache.commons.math3.geometry.euclidean.twod.hull" ], [ "MonotoneChain", "org.apache.commons.math3.geometry.euclidean.twod.hull" ], [ "ConvexHullGenerator2D", "org.apache.commons.math3.geometry.euclidean.twod.hull" ], [ "Vector2DFormat", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "PolygonsSet", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "SubLine", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "DiskGenerator", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "Vector2D", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "NestedLoops", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "Euclidean2D", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "Line", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "ConvexHullGenerator", "org.apache.commons.math3.geometry.hull" ], [ "ConvexHull", "org.apache.commons.math3.geometry.hull" ], [ "ArcsSet", "org.apache.commons.math3.geometry.spherical.oned" ], [ "S1Point", "org.apache.commons.math3.geometry.spherical.oned" ], [ "Sphere1D", "org.apache.commons.math3.geometry.spherical.oned" ], [ "Arc", "org.apache.commons.math3.geometry.spherical.oned" ], [ "LimitAngle", "org.apache.commons.math3.geometry.spherical.oned" ], [ "SubLimitAngle", "org.apache.commons.math3.geometry.spherical.oned" ], [ "Sphere2D", "org.apache.commons.math3.geometry.spherical.twod" ], [ "SubCircle", "org.apache.commons.math3.geometry.spherical.twod" ], [ "Vertex", "org.apache.commons.math3.geometry.spherical.twod" ], [ "Circle", "org.apache.commons.math3.geometry.spherical.twod" ], [ "PropertiesComputer", "org.apache.commons.math3.geometry.spherical.twod" ], [ "SphericalPolygonsSet", "org.apache.commons.math3.geometry.spherical.twod" ], [ "Edge", "org.apache.commons.math3.geometry.spherical.twod" ], [ "EdgesBuilder", "org.apache.commons.math3.geometry.spherical.twod" ], [ "S2Point", "org.apache.commons.math3.geometry.spherical.twod" ], [ "SupportBallGenerator", "org.apache.commons.math3.geometry.enclosing" ], [ "EnclosingBall", "org.apache.commons.math3.geometry.enclosing" ], [ "WelzlEncloser", "org.apache.commons.math3.geometry.enclosing" ], [ "Encloser", "org.apache.commons.math3.geometry.enclosing" ], [ "InsideFinder", "org.apache.commons.math3.geometry.partitioning" ], [ "BoundaryProjection", "org.apache.commons.math3.geometry.partitioning" ], [ "BoundaryProjector", "org.apache.commons.math3.geometry.partitioning" ], [ "Region", "org.apache.commons.math3.geometry.partitioning" ], [ "Transform", "org.apache.commons.math3.geometry.partitioning" ], [ "NodesSet", "org.apache.commons.math3.geometry.partitioning" ], [ "AbstractRegion", "org.apache.commons.math3.geometry.partitioning" ], [ "Characterization", "org.apache.commons.math3.geometry.partitioning" ], [ "AbstractSubHyperplane", "org.apache.commons.math3.geometry.partitioning" ], [ "BSPTree", "org.apache.commons.math3.geometry.partitioning" ], [ "RegionFactory", "org.apache.commons.math3.geometry.partitioning" ], [ "Side", "org.apache.commons.math3.geometry.partitioning" ], [ "BoundarySizeVisitor", "org.apache.commons.math3.geometry.partitioning" ], [ "AVLTree", "org.apache.commons.math3.geometry.partitioning.utilities" ], [ "OrderedTuple", "org.apache.commons.math3.geometry.partitioning.utilities" ], [ "BSPTreeVisitor", "org.apache.commons.math3.geometry.partitioning" ], [ "Hyperplane", "org.apache.commons.math3.geometry.partitioning" ], [ "Embedding", "org.apache.commons.math3.geometry.partitioning" ], [ "BoundaryAttribute", "org.apache.commons.math3.geometry.partitioning" ], [ "SubHyperplane", "org.apache.commons.math3.geometry.partitioning" ], [ "BoundaryBuilder", "org.apache.commons.math3.geometry.partitioning" ], [ "Space", "org.apache.commons.math3.geometry" ], [ "Field", "org.apache.commons.math3" ], [ "ProcessModel", "org.apache.commons.math3.filter" ], [ "MeasurementModel", "org.apache.commons.math3.filter" ], [ "KalmanFilter", "org.apache.commons.math3.filter" ], [ "DefaultProcessModel", "org.apache.commons.math3.filter" ], [ "DefaultMeasurementModel", "org.apache.commons.math3.filter" ], [ "NormalizedRandomGenerator", "org.apache.commons.math3.random" ], [ "GaussianRandomGenerator", "org.apache.commons.math3.random" ], [ "RandomGenerator", "org.apache.commons.math3.random" ], [ "ISAACRandom", "org.apache.commons.math3.random" ], [ "CorrelatedRandomVectorGenerator", "org.apache.commons.math3.random" ], [ "Well19937a", "org.apache.commons.math3.random" ], [ "Well1024a", "org.apache.commons.math3.random" ], [ "UniformRandomGenerator", "org.apache.commons.math3.random" ], [ "Well44497a", "org.apache.commons.math3.random" ], [ "BitsStreamGenerator", "org.apache.commons.math3.random" ], [ "SynchronizedRandomGenerator", "org.apache.commons.math3.random" ], [ "UncorrelatedRandomVectorGenerator", "org.apache.commons.math3.random" ], [ "Well19937c", "org.apache.commons.math3.random" ], [ "ValueServer", "org.apache.commons.math3.random" ], [ "HaltonSequenceGenerator", "org.apache.commons.math3.random" ], [ "Well44497b", "org.apache.commons.math3.random" ], [ "RandomData", "org.apache.commons.math3.random" ], [ "RandomVectorGenerator", "org.apache.commons.math3.random" ], [ "RandomDataGenerator", "org.apache.commons.math3.random" ], [ "Well512a", "org.apache.commons.math3.random" ], [ "AbstractRandomGenerator", "org.apache.commons.math3.random" ], [ "JDKRandomGenerator", "org.apache.commons.math3.random" ], [ "StableRandomGenerator", "org.apache.commons.math3.random" ], [ "RandomAdaptor", "org.apache.commons.math3.random" ], [ "RandomGeneratorFactory", "org.apache.commons.math3.random" ], [ "AbstractWell", "org.apache.commons.math3.random" ], [ "RandomDataImpl", "org.apache.commons.math3.random" ], [ "EmpiricalDistribution", "org.apache.commons.math3.random" ], [ "SobolSequenceGenerator", "org.apache.commons.math3.random" ], [ "MersenneTwister", "org.apache.commons.math3.random" ], [ "UnitSphereRandomVectorGenerator", "org.apache.commons.math3.random" ], [ "FieldElement", "org.apache.commons.math3" ], [ "BigFractionFormat", "org.apache.commons.math3.fraction" ], [ "Fraction", "org.apache.commons.math3.fraction" ], [ "BigFraction", "org.apache.commons.math3.fraction" ], [ "AbstractFormat", "org.apache.commons.math3.fraction" ], [ "FractionFormat", "org.apache.commons.math3.fraction" ], [ "FractionField", "org.apache.commons.math3.fraction" ], [ "BigFractionField", "org.apache.commons.math3.fraction" ], [ "ProperFractionFormat", "org.apache.commons.math3.fraction" ], [ "FractionConversionException", "org.apache.commons.math3.fraction" ], [ "ProperBigFractionFormat", "org.apache.commons.math3.fraction" ], [ "NotFiniteNumberException", "org.apache.commons.math3.exception" ], [ "NoBracketingException", "org.apache.commons.math3.exception" ], [ "MathArithmeticException", "org.apache.commons.math3.exception" ], [ "InsufficientDataException", "org.apache.commons.math3.exception" ], [ "TooManyEvaluationsException", "org.apache.commons.math3.exception" ], [ "ExceptionContextProvider", "org.apache.commons.math3.exception.util" ], [ "ExceptionContext", "org.apache.commons.math3.exception.util" ], [ "ArgUtils", "org.apache.commons.math3.exception.util" ], [ "DummyLocalizable", "org.apache.commons.math3.exception.util" ], [ "Localizable", "org.apache.commons.math3.exception.util" ], [ "LocalizedFormats", "org.apache.commons.math3.exception.util" ], [ "NotANumberException", "org.apache.commons.math3.exception" ], [ "MultiDimensionMismatchException", "org.apache.commons.math3.exception" ], [ "OutOfRangeException", "org.apache.commons.math3.exception" ], [ "TooManyIterationsException", "org.apache.commons.math3.exception" ], [ "NullArgumentException", "org.apache.commons.math3.exception" ], [ "NumberIsTooLargeException", "org.apache.commons.math3.exception" ], [ "MathIllegalStateException", "org.apache.commons.math3.exception" ], [ "MathUnsupportedOperationException", "org.apache.commons.math3.exception" ], [ "NotStrictlyPositiveException", "org.apache.commons.math3.exception" ], [ "NonMonotonicSequenceException", "org.apache.commons.math3.exception" ], [ "ZeroException", "org.apache.commons.math3.exception" ], [ "MathIllegalArgumentException", "org.apache.commons.math3.exception" ], [ "DimensionMismatchException", "org.apache.commons.math3.exception" ], [ "MathRuntimeException", "org.apache.commons.math3.exception" ], [ "MathParseException", "org.apache.commons.math3.exception" ], [ "NoDataException", "org.apache.commons.math3.exception" ], [ "MathIllegalNumberException", "org.apache.commons.math3.exception" ], [ "NotPositiveException", "org.apache.commons.math3.exception" ], [ "MaxCountExceededException", "org.apache.commons.math3.exception" ], [ "NumberIsTooSmallException", "org.apache.commons.math3.exception" ], [ "ConvergenceException", "org.apache.commons.math3.exception" ], [ "MathInternalError", "org.apache.commons.math3.exception" ], [ "DftNormalization", "org.apache.commons.math3.transform" ], [ "RealTransformer", "org.apache.commons.math3.transform" ], [ "FastSineTransformer", "org.apache.commons.math3.transform" ], [ "DctNormalization", "org.apache.commons.math3.transform" ], [ "FastFourierTransformer", "org.apache.commons.math3.transform" ], [ "TransformType", "org.apache.commons.math3.transform" ], [ "FastCosineTransformer", "org.apache.commons.math3.transform" ], [ "TransformUtils", "org.apache.commons.math3.transform" ], [ "DstNormalization", "org.apache.commons.math3.transform" ], [ "FastHadamardTransformer", "org.apache.commons.math3.transform" ] ],
  "tokensProjectClassesNonPrivateStaticNonVoidMethods" : [ [ "isPrime", "org.apache.commons.math3.primes", "Primes", "public static boolean isPrime(int n)" ], [ "nextPrime", "org.apache.commons.math3.primes", "Primes", "public static int nextPrime(int n)" ], [ "primeFactors", "org.apache.commons.math3.primes", "Primes", "public static List<Integer> primeFactors(int n)" ], [ "smallTrialDivision", "org.apache.commons.math3.primes", "SmallPrimes", "public static int smallTrialDivision(int n, final List<Integer> factors)" ], [ "boundedTrialDivision", "org.apache.commons.math3.primes", "SmallPrimes", "public static int boundedTrialDivision(int n, int maxFactor, List<Integer> factors)" ], [ "trialDivision", "org.apache.commons.math3.primes", "SmallPrimes", "public static List<Integer> trialDivision(int n)" ], [ "millerRabinPrimeTest", "org.apache.commons.math3.primes", "SmallPrimes", "public static boolean millerRabinPrimeTest(final int n)" ], [ "primeFactors", "org.apache.commons.math3.primes", "PollardRho", "public static List<Integer> primeFactors(int n)" ], [ "rhoBrent", "org.apache.commons.math3.primes", "PollardRho", "static int rhoBrent(final int n)" ], [ "gcdPositive", "org.apache.commons.math3.primes", "PollardRho", "static int gcdPositive(int a, int b)" ], [ "create", "org.apache.commons.math3.fitting", "GaussianCurveFitter", "public static GaussianCurveFitter create()" ], [ "create", "org.apache.commons.math3.fitting", "SimpleCurveFitter", "public static SimpleCurveFitter create(ParametricUnivariateFunction f, double[] start)" ], [ "create", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem create(final MultivariateJacobianFunction model, final RealVector observed, final RealVector start, final RealMatrix weight, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations, final boolean lazyEvaluation, final ParameterValidator paramValidator)" ], [ "create", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem create(final MultivariateJacobianFunction model, final RealVector observed, final RealVector start, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations)" ], [ "create", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem create(final MultivariateJacobianFunction model, final RealVector observed, final RealVector start, final RealMatrix weight, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations)" ], [ "create", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem create(final MultivariateVectorFunction model, final MultivariateMatrixFunction jacobian, final double[] observed, final double[] start, final RealMatrix weight, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations)" ], [ "weightMatrix", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem weightMatrix(final LeastSquaresProblem problem, final RealMatrix weights)" ], [ "weightDiagonal", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem weightDiagonal(final LeastSquaresProblem problem, final RealVector weights)" ], [ "countEvaluations", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem countEvaluations(final LeastSquaresProblem problem, final Incrementor counter)" ], [ "evaluationChecker", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static ConvergenceChecker<Evaluation> evaluationChecker(final ConvergenceChecker<PointVectorValuePair> checker)" ], [ "model", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static MultivariateJacobianFunction model(final MultivariateVectorFunction value, final MultivariateMatrixFunction jacobian)" ], [ "create", "org.apache.commons.math3.fitting", "HarmonicCurveFitter", "public static HarmonicCurveFitter create()" ], [ "create", "org.apache.commons.math3.fitting", "PolynomialCurveFitter", "public static PolynomialCurveFitter create(int degree)" ], [ "compose", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateFunction compose(final UnivariateFunction... f)" ], [ "compose", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateDifferentiableFunction compose(final UnivariateDifferentiableFunction... f)" ], [ "compose", "org.apache.commons.math3.analysis", "FunctionUtils", "public static DifferentiableUnivariateFunction compose(final DifferentiableUnivariateFunction... f)" ], [ "add", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateFunction add(final UnivariateFunction... f)" ], [ "add", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateDifferentiableFunction add(final UnivariateDifferentiableFunction... f)" ], [ "add", "org.apache.commons.math3.analysis", "FunctionUtils", "public static DifferentiableUnivariateFunction add(final DifferentiableUnivariateFunction... f)" ], [ "multiply", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateFunction multiply(final UnivariateFunction... f)" ], [ "multiply", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateDifferentiableFunction multiply(final UnivariateDifferentiableFunction... f)" ], [ "multiply", "org.apache.commons.math3.analysis", "FunctionUtils", "public static DifferentiableUnivariateFunction multiply(final DifferentiableUnivariateFunction... f)" ], [ "combine", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateFunction combine(final BivariateFunction combiner, final UnivariateFunction f, final UnivariateFunction g)" ], [ "collector", "org.apache.commons.math3.analysis", "FunctionUtils", "public static MultivariateFunction collector(final BivariateFunction combiner, final UnivariateFunction f, final double initialValue)" ], [ "collector", "org.apache.commons.math3.analysis", "FunctionUtils", "public static MultivariateFunction collector(final BivariateFunction combiner, final double initialValue)" ], [ "fix1stArgument", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateFunction fix1stArgument(final BivariateFunction f, final double fixed)" ], [ "fix2ndArgument", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateFunction fix2ndArgument(final BivariateFunction f, final double fixed)" ], [ "sample", "org.apache.commons.math3.analysis", "FunctionUtils", "public static double[] sample(UnivariateFunction f, double min, double max, int n) throws NumberIsTooLargeException, NotStrictlyPositiveException" ], [ "toDifferentiableUnivariateFunction", "org.apache.commons.math3.analysis", "FunctionUtils", "public static DifferentiableUnivariateFunction toDifferentiableUnivariateFunction(final UnivariateDifferentiableFunction f)" ], [ "toUnivariateDifferential", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateDifferentiableFunction toUnivariateDifferential(final DifferentiableUnivariateFunction f)" ], [ "toDifferentiableMultivariateFunction", "org.apache.commons.math3.analysis", "FunctionUtils", "public static DifferentiableMultivariateFunction toDifferentiableMultivariateFunction(final MultivariateDifferentiableFunction f)" ], [ "toMultivariateDifferentiableFunction", "org.apache.commons.math3.analysis", "FunctionUtils", "public static MultivariateDifferentiableFunction toMultivariateDifferentiableFunction(final DifferentiableMultivariateFunction f)" ], [ "toDifferentiableMultivariateVectorFunction", "org.apache.commons.math3.analysis", "FunctionUtils", "public static DifferentiableMultivariateVectorFunction toDifferentiableMultivariateVectorFunction(final MultivariateDifferentiableVectorFunction f)" ], [ "toMultivariateDifferentiableVectorFunction", "org.apache.commons.math3.analysis", "FunctionUtils", "public static MultivariateDifferentiableVectorFunction toMultivariateDifferentiableVectorFunction(final DifferentiableMultivariateVectorFunction f)" ], [ "solve", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double solve(UnivariateFunction function, double x0, double x1) throws NullArgumentException, NoBracketingException" ], [ "solve", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double solve(UnivariateFunction function, double x0, double x1, double absoluteAccuracy) throws NullArgumentException, NoBracketingException" ], [ "forceSide", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double forceSide(final int maxEval, final UnivariateFunction f, final BracketedUnivariateSolver<UnivariateFunction> bracketing, final double baseRoot, final double min, final double max, final AllowedSolution allowedSolution) throws NoBracketingException" ], [ "bracket", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double[] bracket(UnivariateFunction function, double initial, double lowerBound, double upperBound) throws NullArgumentException, NotStrictlyPositiveException, NoBracketingException" ], [ "bracket", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double[] bracket(UnivariateFunction function, double initial, double lowerBound, double upperBound, int maximumIterations) throws NullArgumentException, NotStrictlyPositiveException, NoBracketingException" ], [ "bracket", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double[] bracket(final UnivariateFunction function, final double initial, final double lowerBound, final double upperBound, final double q, final double r, final int maximumIterations) throws NoBracketingException" ], [ "midpoint", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double midpoint(double a, double b)" ], [ "isBracketing", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static boolean isBracketing(UnivariateFunction function, final double lower, final double upper) throws NullArgumentException" ], [ "isSequence", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static boolean isSequence(final double start, final double mid, final double end)" ], [ "getCompiler", "org.apache.commons.math3.analysis.differentiation", "DSCompiler", "public static DSCompiler getCompiler(int parameters, int order) throws NumberIsTooLargeException" ], [ "createConstant", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public static SparseGradient createConstant(final double value)" ], [ "createVariable", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public static SparseGradient createVariable(final int idx, final double value)" ], [ "hypot", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public static SparseGradient hypot(final SparseGradient x, final SparseGradient y)" ], [ "pow", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public static SparseGradient pow(final double a, final SparseGradient x)" ], [ "atan2", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public static SparseGradient atan2(final SparseGradient y, final SparseGradient x)" ], [ "hypot", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public static DerivativeStructure hypot(final DerivativeStructure x, final DerivativeStructure y) throws DimensionMismatchException" ], [ "pow", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public static DerivativeStructure pow(final double a, final DerivativeStructure x)" ], [ "atan2", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public static DerivativeStructure atan2(final DerivativeStructure y, final DerivativeStructure x) throws DimensionMismatchException" ], [ "evaluate", "org.apache.commons.math3.analysis.polynomials", "PolynomialFunctionNewtonForm", "public static double evaluate(double[] a, double[] c, double z) throws NullArgumentException, DimensionMismatchException, NoDataException" ], [ "evaluate", "org.apache.commons.math3.analysis.polynomials", "PolynomialFunctionLagrangeForm", "public static double evaluate(double[] x, double[] y, double z) throws DimensionMismatchException, NumberIsTooSmallException, NonMonotonicSequenceException" ], [ "verifyInterpolationArray", "org.apache.commons.math3.analysis.polynomials", "PolynomialFunctionLagrangeForm", "public static boolean verifyInterpolationArray(double[] x, double[] y, boolean abort) throws DimensionMismatchException, NumberIsTooSmallException, NonMonotonicSequenceException" ], [ "createChebyshevPolynomial", "org.apache.commons.math3.analysis.polynomials", "PolynomialsUtils", "public static PolynomialFunction createChebyshevPolynomial(final int degree)" ], [ "createHermitePolynomial", "org.apache.commons.math3.analysis.polynomials", "PolynomialsUtils", "public static PolynomialFunction createHermitePolynomial(final int degree)" ], [ "createLaguerrePolynomial", "org.apache.commons.math3.analysis.polynomials", "PolynomialsUtils", "public static PolynomialFunction createLaguerrePolynomial(final int degree)" ], [ "createLegendrePolynomial", "org.apache.commons.math3.analysis.polynomials", "PolynomialsUtils", "public static PolynomialFunction createLegendrePolynomial(final int degree)" ], [ "createJacobiPolynomial", "org.apache.commons.math3.analysis.polynomials", "PolynomialsUtils", "public static PolynomialFunction createJacobiPolynomial(final int degree, final int v, final int w)" ], [ "shift", "org.apache.commons.math3.analysis.polynomials", "PolynomialsUtils", "public static double[] shift(final double[] coefficients, final double shift)" ], [ "evaluate", "org.apache.commons.math3.analysis.polynomials", "PolynomialFunction", "protected static double evaluate(double[] coefficients, double argument) throws NullArgumentException, NoDataException" ], [ "differentiate", "org.apache.commons.math3.analysis.polynomials", "PolynomialFunction", "protected static double[] differentiate(double[] coefficients) throws NullArgumentException, NoDataException" ], [ "computeDividedDifference", "org.apache.commons.math3.analysis.interpolation", "DividedDifferenceInterpolator", "protected static double[] computeDividedDifference(final double[] x, final double[] y) throws DimensionMismatchException, NumberIsTooSmallException, NonMonotonicSequenceException" ], [ "compareTo", "org.apache.commons.math3.util", "Precision", "public static int compareTo(double x, double y, double eps)" ], [ "compareTo", "org.apache.commons.math3.util", "Precision", "public static int compareTo(final double x, final double y, final int maxUlps)" ], [ "equals", "org.apache.commons.math3.util", "Precision", "public static boolean equals(float x, float y)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "Precision", "public static boolean equalsIncludingNaN(float x, float y)" ], [ "equals", "org.apache.commons.math3.util", "Precision", "public static boolean equals(float x, float y, float eps)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "Precision", "public static boolean equalsIncludingNaN(float x, float y, float eps)" ], [ "equals", "org.apache.commons.math3.util", "Precision", "public static boolean equals(final float x, final float y, final int maxUlps)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "Precision", "public static boolean equalsIncludingNaN(float x, float y, int maxUlps)" ], [ "equals", "org.apache.commons.math3.util", "Precision", "public static boolean equals(double x, double y)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "Precision", "public static boolean equalsIncludingNaN(double x, double y)" ], [ "equals", "org.apache.commons.math3.util", "Precision", "public static boolean equals(double x, double y, double eps)" ], [ "equalsWithRelativeTolerance", "org.apache.commons.math3.util", "Precision", "public static boolean equalsWithRelativeTolerance(double x, double y, double eps)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "Precision", "public static boolean equalsIncludingNaN(double x, double y, double eps)" ], [ "equals", "org.apache.commons.math3.util", "Precision", "public static boolean equals(final double x, final double y, final int maxUlps)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "Precision", "public static boolean equalsIncludingNaN(double x, double y, int maxUlps)" ], [ "round", "org.apache.commons.math3.util", "Precision", "public static double round(double x, int scale)" ], [ "round", "org.apache.commons.math3.util", "Precision", "public static double round(double x, int scale, int roundingMethod)" ], [ "round", "org.apache.commons.math3.util", "Precision", "public static float round(float x, int scale)" ], [ "round", "org.apache.commons.math3.util", "Precision", "public static float round(float x, int scale, int roundingMethod) throws MathArithmeticException, MathIllegalArgumentException" ], [ "representableDelta", "org.apache.commons.math3.util", "Precision", "public static double representableDelta(double x, double originalDelta)" ], [ "wrap", "org.apache.commons.math3.util", "Incrementor", "public static Incrementor wrap(final IntegerSequence.Incrementor incrementor)" ], [ "scale", "org.apache.commons.math3.util", "MathArrays", "public static double[] scale(double val, final double[] arr)" ], [ "ebeAdd", "org.apache.commons.math3.util", "MathArrays", "public static double[] ebeAdd(double[] a, double[] b) throws DimensionMismatchException" ], [ "ebeSubtract", "org.apache.commons.math3.util", "MathArrays", "public static double[] ebeSubtract(double[] a, double[] b) throws DimensionMismatchException" ], [ "ebeMultiply", "org.apache.commons.math3.util", "MathArrays", "public static double[] ebeMultiply(double[] a, double[] b) throws DimensionMismatchException" ], [ "ebeDivide", "org.apache.commons.math3.util", "MathArrays", "public static double[] ebeDivide(double[] a, double[] b) throws DimensionMismatchException" ], [ "distance1", "org.apache.commons.math3.util", "MathArrays", "public static double distance1(double[] p1, double[] p2) throws DimensionMismatchException" ], [ "distance1", "org.apache.commons.math3.util", "MathArrays", "public static int distance1(int[] p1, int[] p2) throws DimensionMismatchException" ], [ "distance", "org.apache.commons.math3.util", "MathArrays", "public static double distance(double[] p1, double[] p2) throws DimensionMismatchException" ], [ "cosAngle", "org.apache.commons.math3.util", "MathArrays", "public static double cosAngle(double[] v1, double[] v2)" ], [ "distance", "org.apache.commons.math3.util", "MathArrays", "public static double distance(int[] p1, int[] p2) throws DimensionMismatchException" ], [ "distanceInf", "org.apache.commons.math3.util", "MathArrays", "public static double distanceInf(double[] p1, double[] p2) throws DimensionMismatchException" ], [ "distanceInf", "org.apache.commons.math3.util", "MathArrays", "public static int distanceInf(int[] p1, int[] p2) throws DimensionMismatchException" ], [ "isMonotonic", "org.apache.commons.math3.util", "MathArrays", "public static <T extends Comparable<? super T>> boolean isMonotonic(T[] val, OrderDirection dir, boolean strict)" ], [ "isMonotonic", "org.apache.commons.math3.util", "MathArrays", "public static boolean isMonotonic(double[] val, OrderDirection dir, boolean strict)" ], [ "checkEqualLength", "org.apache.commons.math3.util", "MathArrays", "public static boolean checkEqualLength(double[] a, double[] b, boolean abort)" ], [ "checkEqualLength", "org.apache.commons.math3.util", "MathArrays", "public static boolean checkEqualLength(int[] a, int[] b, boolean abort)" ], [ "checkOrder", "org.apache.commons.math3.util", "MathArrays", "public static boolean checkOrder(double[] val, OrderDirection dir, boolean strict, boolean abort) throws NonMonotonicSequenceException" ], [ "safeNorm", "org.apache.commons.math3.util", "MathArrays", "public static double safeNorm(double[] v)" ], [ "copyOf", "org.apache.commons.math3.util", "MathArrays", "public static int[] copyOf(int[] source)" ], [ "copyOf", "org.apache.commons.math3.util", "MathArrays", "public static double[] copyOf(double[] source)" ], [ "copyOf", "org.apache.commons.math3.util", "MathArrays", "public static int[] copyOf(int[] source, int len)" ], [ "copyOf", "org.apache.commons.math3.util", "MathArrays", "public static double[] copyOf(double[] source, int len)" ], [ "copyOfRange", "org.apache.commons.math3.util", "MathArrays", "public static double[] copyOfRange(double[] source, int from, int to)" ], [ "linearCombination", "org.apache.commons.math3.util", "MathArrays", "public static double linearCombination(final double[] a, final double[] b) throws DimensionMismatchException" ], [ "linearCombination", "org.apache.commons.math3.util", "MathArrays", "public static double linearCombination(final double a1, final double b1, final double a2, final double b2)" ], [ "linearCombination", "org.apache.commons.math3.util", "MathArrays", "public static double linearCombination(final double a1, final double b1, final double a2, final double b2, final double a3, final double b3)" ], [ "linearCombination", "org.apache.commons.math3.util", "MathArrays", "public static double linearCombination(final double a1, final double b1, final double a2, final double b2, final double a3, final double b3, final double a4, final double b4)" ], [ "equals", "org.apache.commons.math3.util", "MathArrays", "public static boolean equals(float[] x, float[] y)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "MathArrays", "public static boolean equalsIncludingNaN(float[] x, float[] y)" ], [ "equals", "org.apache.commons.math3.util", "MathArrays", "public static boolean equals(double[] x, double[] y)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "MathArrays", "public static boolean equalsIncludingNaN(double[] x, double[] y)" ], [ "normalizeArray", "org.apache.commons.math3.util", "MathArrays", "public static double[] normalizeArray(double[] values, double normalizedSum) throws MathIllegalArgumentException, MathArithmeticException" ], [ "buildArray", "org.apache.commons.math3.util", "MathArrays", "public static <T> T[] buildArray(final Field<T> field, final int length)" ], [ "buildArray", "org.apache.commons.math3.util", "MathArrays", "public static <T> T[][] buildArray(final Field<T> field, final int rows, final int columns)" ], [ "convolve", "org.apache.commons.math3.util", "MathArrays", "public static double[] convolve(double[] x, double[] h) throws NullArgumentException, NoDataException" ], [ "natural", "org.apache.commons.math3.util", "MathArrays", "public static int[] natural(int n)" ], [ "sequence", "org.apache.commons.math3.util", "MathArrays", "public static int[] sequence(int size, int start, int stride)" ], [ "verifyValues", "org.apache.commons.math3.util", "MathArrays", "public static boolean verifyValues(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "verifyValues", "org.apache.commons.math3.util", "MathArrays", "public static boolean verifyValues(final double[] values, final int begin, final int length, final boolean allowEmpty) throws MathIllegalArgumentException" ], [ "verifyValues", "org.apache.commons.math3.util", "MathArrays", "public static boolean verifyValues(final double[] values, final double[] weights, final int begin, final int length) throws MathIllegalArgumentException" ], [ "verifyValues", "org.apache.commons.math3.util", "MathArrays", "public static boolean verifyValues(final double[] values, final double[] weights, final int begin, final int length, final boolean allowEmpty) throws MathIllegalArgumentException" ], [ "concatenate", "org.apache.commons.math3.util", "MathArrays", "public static double[] concatenate(double[]... x)" ], [ "unique", "org.apache.commons.math3.util", "MathArrays", "public static double[] unique(double[] data)" ], [ "create", "org.apache.commons.math3.util", "Pair", "public static <K, V> Pair<K, V> create(K k, V v)" ], [ "slowCos", "org.apache.commons.math3.util", "FastMathCalc", "static double slowCos(final double x, final double[] result)" ], [ "slowSin", "org.apache.commons.math3.util", "FastMathCalc", "static double slowSin(final double x, final double[] result)" ], [ "slowexp", "org.apache.commons.math3.util", "FastMathCalc", "static double slowexp(final double x, final double[] result)" ], [ "expint", "org.apache.commons.math3.util", "FastMathCalc", "static double expint(int p, final double[] result)" ], [ "slowLog", "org.apache.commons.math3.util", "FastMathCalc", "static double[] slowLog(double xi)" ], [ "format", "org.apache.commons.math3.util", "FastMathCalc", "static String format(double d)" ], [ "sqrt", "org.apache.commons.math3.util", "FastMath", "public static double sqrt(final double a)" ], [ "cosh", "org.apache.commons.math3.util", "FastMath", "public static double cosh(double x)" ], [ "sinh", "org.apache.commons.math3.util", "FastMath", "public static double sinh(double x)" ], [ "tanh", "org.apache.commons.math3.util", "FastMath", "public static double tanh(double x)" ], [ "acosh", "org.apache.commons.math3.util", "FastMath", "public static double acosh(final double a)" ], [ "asinh", "org.apache.commons.math3.util", "FastMath", "public static double asinh(double a)" ], [ "atanh", "org.apache.commons.math3.util", "FastMath", "public static double atanh(double a)" ], [ "signum", "org.apache.commons.math3.util", "FastMath", "public static double signum(final double a)" ], [ "signum", "org.apache.commons.math3.util", "FastMath", "public static float signum(final float a)" ], [ "nextUp", "org.apache.commons.math3.util", "FastMath", "public static double nextUp(final double a)" ], [ "nextUp", "org.apache.commons.math3.util", "FastMath", "public static float nextUp(final float a)" ], [ "nextDown", "org.apache.commons.math3.util", "FastMath", "public static double nextDown(final double a)" ], [ "nextDown", "org.apache.commons.math3.util", "FastMath", "public static float nextDown(final float a)" ], [ "random", "org.apache.commons.math3.util", "FastMath", "public static double random()" ], [ "exp", "org.apache.commons.math3.util", "FastMath", "public static double exp(double x)" ], [ "expm1", "org.apache.commons.math3.util", "FastMath", "public static double expm1(double x)" ], [ "log", "org.apache.commons.math3.util", "FastMath", "public static double log(final double x)" ], [ "log1p", "org.apache.commons.math3.util", "FastMath", "public static double log1p(final double x)" ], [ "log10", "org.apache.commons.math3.util", "FastMath", "public static double log10(final double x)" ], [ "log", "org.apache.commons.math3.util", "FastMath", "public static double log(double base, double x)" ], [ "pow", "org.apache.commons.math3.util", "FastMath", "public static double pow(final double x, final double y)" ], [ "pow", "org.apache.commons.math3.util", "FastMath", "public static double pow(double d, int e)" ], [ "pow", "org.apache.commons.math3.util", "FastMath", "public static double pow(double d, long e)" ], [ "sin", "org.apache.commons.math3.util", "FastMath", "public static double sin(double x)" ], [ "cos", "org.apache.commons.math3.util", "FastMath", "public static double cos(double x)" ], [ "tan", "org.apache.commons.math3.util", "FastMath", "public static double tan(double x)" ], [ "atan", "org.apache.commons.math3.util", "FastMath", "public static double atan(double x)" ], [ "atan2", "org.apache.commons.math3.util", "FastMath", "public static double atan2(double y, double x)" ], [ "asin", "org.apache.commons.math3.util", "FastMath", "public static double asin(double x)" ], [ "acos", "org.apache.commons.math3.util", "FastMath", "public static double acos(double x)" ], [ "cbrt", "org.apache.commons.math3.util", "FastMath", "public static double cbrt(double x)" ], [ "toRadians", "org.apache.commons.math3.util", "FastMath", "public static double toRadians(double x)" ], [ "toDegrees", "org.apache.commons.math3.util", "FastMath", "public static double toDegrees(double x)" ], [ "abs", "org.apache.commons.math3.util", "FastMath", "public static int abs(final int x)" ], [ "abs", "org.apache.commons.math3.util", "FastMath", "public static long abs(final long x)" ], [ "abs", "org.apache.commons.math3.util", "FastMath", "public static float abs(final float x)" ], [ "abs", "org.apache.commons.math3.util", "FastMath", "public static double abs(double x)" ], [ "ulp", "org.apache.commons.math3.util", "FastMath", "public static double ulp(double x)" ], [ "ulp", "org.apache.commons.math3.util", "FastMath", "public static float ulp(float x)" ], [ "scalb", "org.apache.commons.math3.util", "FastMath", "public static double scalb(final double d, final int n)" ], [ "scalb", "org.apache.commons.math3.util", "FastMath", "public static float scalb(final float f, final int n)" ], [ "nextAfter", "org.apache.commons.math3.util", "FastMath", "public static double nextAfter(double d, double direction)" ], [ "nextAfter", "org.apache.commons.math3.util", "FastMath", "public static float nextAfter(final float f, final double direction)" ], [ "floor", "org.apache.commons.math3.util", "FastMath", "public static double floor(double x)" ], [ "ceil", "org.apache.commons.math3.util", "FastMath", "public static double ceil(double x)" ], [ "rint", "org.apache.commons.math3.util", "FastMath", "public static double rint(double x)" ], [ "round", "org.apache.commons.math3.util", "FastMath", "public static long round(double x)" ], [ "round", "org.apache.commons.math3.util", "FastMath", "public static int round(final float x)" ], [ "min", "org.apache.commons.math3.util", "FastMath", "public static int min(final int a, final int b)" ], [ "min", "org.apache.commons.math3.util", "FastMath", "public static long min(final long a, final long b)" ], [ "min", "org.apache.commons.math3.util", "FastMath", "public static float min(final float a, final float b)" ], [ "min", "org.apache.commons.math3.util", "FastMath", "public static double min(final double a, final double b)" ], [ "max", "org.apache.commons.math3.util", "FastMath", "public static int max(final int a, final int b)" ], [ "max", "org.apache.commons.math3.util", "FastMath", "public static long max(final long a, final long b)" ], [ "max", "org.apache.commons.math3.util", "FastMath", "public static float max(final float a, final float b)" ], [ "max", "org.apache.commons.math3.util", "FastMath", "public static double max(final double a, final double b)" ], [ "hypot", "org.apache.commons.math3.util", "FastMath", "public static double hypot(final double x, final double y)" ], [ "IEEEremainder", "org.apache.commons.math3.util", "FastMath", "public static double IEEEremainder(double dividend, double divisor)" ], [ "toIntExact", "org.apache.commons.math3.util", "FastMath", "public static int toIntExact(final long n) throws MathArithmeticException" ], [ "incrementExact", "org.apache.commons.math3.util", "FastMath", "public static int incrementExact(final int n) throws MathArithmeticException" ], [ "incrementExact", "org.apache.commons.math3.util", "FastMath", "public static long incrementExact(final long n) throws MathArithmeticException" ], [ "decrementExact", "org.apache.commons.math3.util", "FastMath", "public static int decrementExact(final int n) throws MathArithmeticException" ], [ "decrementExact", "org.apache.commons.math3.util", "FastMath", "public static long decrementExact(final long n) throws MathArithmeticException" ], [ "addExact", "org.apache.commons.math3.util", "FastMath", "public static int addExact(final int a, final int b) throws MathArithmeticException" ], [ "addExact", "org.apache.commons.math3.util", "FastMath", "public static long addExact(final long a, final long b) throws MathArithmeticException" ], [ "subtractExact", "org.apache.commons.math3.util", "FastMath", "public static int subtractExact(final int a, final int b)" ], [ "subtractExact", "org.apache.commons.math3.util", "FastMath", "public static long subtractExact(final long a, final long b)" ], [ "multiplyExact", "org.apache.commons.math3.util", "FastMath", "public static int multiplyExact(final int a, final int b)" ], [ "multiplyExact", "org.apache.commons.math3.util", "FastMath", "public static long multiplyExact(final long a, final long b)" ], [ "floorDiv", "org.apache.commons.math3.util", "FastMath", "public static int floorDiv(final int a, final int b) throws MathArithmeticException" ], [ "floorDiv", "org.apache.commons.math3.util", "FastMath", "public static long floorDiv(final long a, final long b) throws MathArithmeticException" ], [ "floorMod", "org.apache.commons.math3.util", "FastMath", "public static int floorMod(final int a, final int b) throws MathArithmeticException" ], [ "floorMod", "org.apache.commons.math3.util", "FastMath", "public static long floorMod(final long a, final long b)" ], [ "copySign", "org.apache.commons.math3.util", "FastMath", "public static double copySign(double magnitude, double sign)" ], [ "copySign", "org.apache.commons.math3.util", "FastMath", "public static float copySign(float magnitude, float sign)" ], [ "getExponent", "org.apache.commons.math3.util", "FastMath", "public static int getExponent(final double d)" ], [ "getExponent", "org.apache.commons.math3.util", "FastMath", "public static int getExponent(final float f)" ], [ "getInstance", "org.apache.commons.math3.util", "BigRealField", "public static BigRealField getInstance()" ], [ "getInstance", "org.apache.commons.math3.util", "Decimal64Field", "public static final Decimal64Field getInstance()" ], [ "hash", "org.apache.commons.math3.util", "MathUtils", "public static int hash(double value)" ], [ "equals", "org.apache.commons.math3.util", "MathUtils", "public static boolean equals(double x, double y)" ], [ "hash", "org.apache.commons.math3.util", "MathUtils", "public static int hash(double[] value)" ], [ "normalizeAngle", "org.apache.commons.math3.util", "MathUtils", "public static double normalizeAngle(double a, double center)" ], [ "max", "org.apache.commons.math3.util", "MathUtils", "public static <T extends RealFieldElement<T>> T max(final T e1, final T e2)" ], [ "min", "org.apache.commons.math3.util", "MathUtils", "public static <T extends RealFieldElement<T>> T min(final T e1, final T e2)" ], [ "reduce", "org.apache.commons.math3.util", "MathUtils", "public static double reduce(double a, double period, double offset)" ], [ "copySign", "org.apache.commons.math3.util", "MathUtils", "public static byte copySign(byte magnitude, byte sign) throws MathArithmeticException" ], [ "copySign", "org.apache.commons.math3.util", "MathUtils", "public static short copySign(short magnitude, short sign) throws MathArithmeticException" ], [ "copySign", "org.apache.commons.math3.util", "MathUtils", "public static int copySign(int magnitude, int sign) throws MathArithmeticException" ], [ "copySign", "org.apache.commons.math3.util", "MathUtils", "public static long copySign(long magnitude, long sign) throws MathArithmeticException" ], [ "getDefaultNumberFormat", "org.apache.commons.math3.util", "CompositeFormat", "public static NumberFormat getDefaultNumberFormat()" ], [ "getDefaultNumberFormat", "org.apache.commons.math3.util", "CompositeFormat", "public static NumberFormat getDefaultNumberFormat(final Locale locale)" ], [ "parseNextCharacter", "org.apache.commons.math3.util", "CompositeFormat", "public static char parseNextCharacter(final String source, final ParsePosition pos)" ], [ "parseNumber", "org.apache.commons.math3.util", "CompositeFormat", "public static Number parseNumber(final String source, final NumberFormat format, final ParsePosition pos)" ], [ "parseFixedstring", "org.apache.commons.math3.util", "CompositeFormat", "public static boolean parseFixedstring(final String source, final String expected, final ParsePosition pos)" ], [ "formatDouble", "org.apache.commons.math3.util", "CompositeFormat", "public static StringBuffer formatDouble(final double value, final NumberFormat format, final StringBuffer toAppendTo, final FieldPosition pos)" ], [ "range", "org.apache.commons.math3.util", "IntegerSequence", "public static Range range(int start, int end)" ], [ "range", "org.apache.commons.math3.util", "IntegerSequence", "public static Range range(final int start, final int max, final int step)" ], [ "create", "org.apache.commons.math3.util", "IntegerSequence", "public static Incrementor create()" ], [ "create", "org.apache.commons.math3.util", "Incrementor", "public static Incrementor create()" ], [ "loadExpIntA", "org.apache.commons.math3.util", "FastMathLiteralArrays", "static double[] loadExpIntA()" ], [ "loadExpIntB", "org.apache.commons.math3.util", "FastMathLiteralArrays", "static double[] loadExpIntB()" ], [ "loadExpFracA", "org.apache.commons.math3.util", "FastMathLiteralArrays", "static double[] loadExpFracA()" ], [ "loadExpFracB", "org.apache.commons.math3.util", "FastMathLiteralArrays", "static double[] loadExpFracB()" ], [ "loadLnMant", "org.apache.commons.math3.util", "FastMathLiteralArrays", "static double[][] loadLnMant()" ], [ "binomialCoefficient", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static long binomialCoefficient(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "binomialCoefficientDouble", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static double binomialCoefficientDouble(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "binomialCoefficientLog", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static double binomialCoefficientLog(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "factorial", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static long factorial(final int n) throws NotPositiveException, MathArithmeticException" ], [ "factorialDouble", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static double factorialDouble(final int n) throws NotPositiveException" ], [ "factorialLog", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static double factorialLog(final int n) throws NotPositiveException" ], [ "stirlingS2", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static long stirlingS2(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "combinationsIterator", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static Iterator<int[]> combinationsIterator(int n, int k)" ], [ "addAndCheck", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int addAndCheck(int x, int y) throws MathArithmeticException" ], [ "addAndCheck", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long addAndCheck(long a, long b) throws MathArithmeticException" ], [ "binomialCoefficient", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long binomialCoefficient(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "binomialCoefficientDouble", "org.apache.commons.math3.util", "ArithmeticUtils", "public static double binomialCoefficientDouble(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "binomialCoefficientLog", "org.apache.commons.math3.util", "ArithmeticUtils", "public static double binomialCoefficientLog(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "factorial", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long factorial(final int n) throws NotPositiveException, MathArithmeticException" ], [ "factorialDouble", "org.apache.commons.math3.util", "ArithmeticUtils", "public static double factorialDouble(final int n) throws NotPositiveException" ], [ "factorialLog", "org.apache.commons.math3.util", "ArithmeticUtils", "public static double factorialLog(final int n) throws NotPositiveException" ], [ "gcd", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int gcd(int p, int q) throws MathArithmeticException" ], [ "gcd", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long gcd(final long p, final long q) throws MathArithmeticException" ], [ "lcm", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int lcm(int a, int b) throws MathArithmeticException" ], [ "lcm", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long lcm(long a, long b) throws MathArithmeticException" ], [ "mulAndCheck", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int mulAndCheck(int x, int y) throws MathArithmeticException" ], [ "mulAndCheck", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long mulAndCheck(long a, long b) throws MathArithmeticException" ], [ "subAndCheck", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int subAndCheck(int x, int y) throws MathArithmeticException" ], [ "subAndCheck", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long subAndCheck(long a, long b) throws MathArithmeticException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int pow(final int k, final int e) throws NotPositiveException, MathArithmeticException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int pow(final int k, long e) throws NotPositiveException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long pow(final long k, final int e) throws NotPositiveException, MathArithmeticException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long pow(final long k, long e) throws NotPositiveException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static BigInteger pow(final BigInteger k, int e) throws NotPositiveException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static BigInteger pow(final BigInteger k, long e) throws NotPositiveException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static BigInteger pow(final BigInteger k, BigInteger e) throws NotPositiveException" ], [ "stirlingS2", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long stirlingS2(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "isPowerOfTwo", "org.apache.commons.math3.util", "ArithmeticUtils", "public static boolean isPowerOfTwo(long n)" ], [ "getAvailableLocales", "org.apache.commons.math3.complex", "ComplexFormat", "public static Locale[] getAvailableLocales()" ], [ "getInstance", "org.apache.commons.math3.complex", "ComplexFormat", "public static ComplexFormat getInstance()" ], [ "getInstance", "org.apache.commons.math3.complex", "ComplexFormat", "public static ComplexFormat getInstance(Locale locale)" ], [ "getInstance", "org.apache.commons.math3.complex", "ComplexFormat", "public static ComplexFormat getInstance(String imaginaryCharacter, Locale locale) throws NullArgumentException, NoDataException" ], [ "getInstance", "org.apache.commons.math3.complex", "ComplexField", "public static ComplexField getInstance()" ], [ "multiply", "org.apache.commons.math3.complex", "Quaternion", "public static Quaternion multiply(final Quaternion q1, final Quaternion q2)" ], [ "add", "org.apache.commons.math3.complex", "Quaternion", "public static Quaternion add(final Quaternion q1, final Quaternion q2)" ], [ "subtract", "org.apache.commons.math3.complex", "Quaternion", "public static Quaternion subtract(final Quaternion q1, final Quaternion q2)" ], [ "dotProduct", "org.apache.commons.math3.complex", "Quaternion", "public static double dotProduct(final Quaternion q1, final Quaternion q2)" ], [ "equals", "org.apache.commons.math3.complex", "Complex", "public static boolean equals(Complex x, Complex y, int maxUlps)" ], [ "equals", "org.apache.commons.math3.complex", "Complex", "public static boolean equals(Complex x, Complex y)" ], [ "equals", "org.apache.commons.math3.complex", "Complex", "public static boolean equals(Complex x, Complex y, double eps)" ], [ "equalsWithRelativeTolerance", "org.apache.commons.math3.complex", "Complex", "public static boolean equalsWithRelativeTolerance(Complex x, Complex y, double eps)" ], [ "valueOf", "org.apache.commons.math3.complex", "Complex", "public static Complex valueOf(double realPart, double imaginaryPart)" ], [ "valueOf", "org.apache.commons.math3.complex", "Complex", "public static Complex valueOf(double realPart)" ], [ "polar2Complex", "org.apache.commons.math3.complex", "ComplexUtils", "public static Complex polar2Complex(double r, double theta) throws MathIllegalArgumentException" ], [ "convertToComplex", "org.apache.commons.math3.complex", "ComplexUtils", "public static Complex[] convertToComplex(double[] real)" ], [ "getInvertedCoefficientSum", "org.apache.commons.math3.optimization.linear", "SimplexTableau", "protected static double getInvertedCoefficientSum(final RealVector coefficients)" ], [ "getAvailableLocales", "org.apache.commons.math3.linear", "RealMatrixFormat", "public static Locale[] getAvailableLocales()" ], [ "getInstance", "org.apache.commons.math3.linear", "RealMatrixFormat", "public static RealMatrixFormat getInstance()" ], [ "getInstance", "org.apache.commons.math3.linear", "RealMatrixFormat", "public static RealMatrixFormat getInstance(final Locale locale)" ], [ "createRealMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix createRealMatrix(final int rows, final int columns)" ], [ "createFieldMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldMatrix(final Field<T> field, final int rows, final int columns)" ], [ "createRealMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix createRealMatrix(double[][] data) throws NullArgumentException, DimensionMismatchException, NoDataException" ], [ "createFieldMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldMatrix(T[][] data) throws DimensionMismatchException, NoDataException, NullArgumentException" ], [ "createRealIdentityMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix createRealIdentityMatrix(int dimension)" ], [ "createFieldIdentityMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldIdentityMatrix(final Field<T> field, final int dimension)" ], [ "createRealDiagonalMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix createRealDiagonalMatrix(final double[] diagonal)" ], [ "createFieldDiagonalMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldDiagonalMatrix(final T[] diagonal)" ], [ "createRealVector", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealVector createRealVector(double[] data) throws NoDataException, NullArgumentException" ], [ "createFieldVector", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldVector<T> createFieldVector(final T[] data) throws NoDataException, NullArgumentException, ZeroException" ], [ "createRowRealMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix createRowRealMatrix(double[] rowData) throws NoDataException, NullArgumentException" ], [ "createRowFieldMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldMatrix<T> createRowFieldMatrix(final T[] rowData) throws NoDataException, NullArgumentException" ], [ "createColumnRealMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix createColumnRealMatrix(double[] columnData) throws NoDataException, NullArgumentException" ], [ "createColumnFieldMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldMatrix<T> createColumnFieldMatrix(final T[] columnData) throws NoDataException, NullArgumentException" ], [ "isSymmetric", "org.apache.commons.math3.linear", "MatrixUtils", "public static boolean isSymmetric(RealMatrix matrix, double eps)" ], [ "fractionMatrixToRealMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static Array2DRowRealMatrix fractionMatrixToRealMatrix(final FieldMatrix<Fraction> m)" ], [ "bigFractionMatrixToRealMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static Array2DRowRealMatrix bigFractionMatrixToRealMatrix(final FieldMatrix<BigFraction> m)" ], [ "blockInverse", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix blockInverse(RealMatrix m, int splitIndex)" ], [ "inverse", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix inverse(RealMatrix matrix) throws NullArgumentException, SingularMatrixException, NonSquareMatrixException" ], [ "inverse", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix inverse(RealMatrix matrix, double threshold) throws NullArgumentException, SingularMatrixException, NonSquareMatrixException" ], [ "toBlocksLayout", "org.apache.commons.math3.linear", "BlockFieldMatrix", "public static <T extends FieldElement<T>> T[][] toBlocksLayout(final T[][] rawData) throws DimensionMismatchException" ], [ "createBlocksLayout", "org.apache.commons.math3.linear", "BlockFieldMatrix", "public static <T extends FieldElement<T>> T[][] createBlocksLayout(final Field<T> field, final int rows, final int columns)" ], [ "toBlocksLayout", "org.apache.commons.math3.linear", "BlockRealMatrix", "public static double[][] toBlocksLayout(final double[][] rawData) throws DimensionMismatchException" ], [ "createBlocksLayout", "org.apache.commons.math3.linear", "BlockRealMatrix", "public static double[][] createBlocksLayout(final int rows, final int columns)" ], [ "unmodifiableRealVector", "org.apache.commons.math3.linear", "RealVector", "public static RealVector unmodifiableRealVector(final RealVector v)" ], [ "getAvailableLocales", "org.apache.commons.math3.linear", "RealVectorFormat", "public static Locale[] getAvailableLocales()" ], [ "getInstance", "org.apache.commons.math3.linear", "RealVectorFormat", "public static RealVectorFormat getInstance()" ], [ "getInstance", "org.apache.commons.math3.linear", "RealVectorFormat", "public static RealVectorFormat getInstance(final Locale locale)" ], [ "create", "org.apache.commons.math3.linear", "JacobiPreconditioner", "public static JacobiPreconditioner create(final RealLinearOperator a) throws NonSquareOperatorException" ], [ "extractField", "org.apache.commons.math3.linear", "AbstractFieldMatrix", "protected static <T extends FieldElement<T>> Field<T> extractField(final T[][] d) throws NoDataException, NullArgumentException" ], [ "extractField", "org.apache.commons.math3.linear", "AbstractFieldMatrix", "protected static <T extends FieldElement<T>> Field<T> extractField(final T[] d) throws NoDataException" ], [ "buildArray", "org.apache.commons.math3.linear", "AbstractFieldMatrix", "protected static <T extends FieldElement<T>> T[][] buildArray(final Field<T> field, final int rows, final int columns)" ], [ "buildArray", "org.apache.commons.math3.linear", "AbstractFieldMatrix", "protected static <T extends FieldElement<T>> T[] buildArray(final Field<T> field, final int length)" ], [ "estimate", "org.apache.commons.math3.distribution.fitting", "MultivariateNormalMixtureExpectationMaximization", "public static MixtureMultivariateNormalDistribution estimate(final double[][] data, final int numComponents) throws NotStrictlyPositiveException, DimensionMismatchException" ], [ "sample", "org.apache.commons.math3.distribution", "BetaDistribution", "static double sample(RandomGenerator random, final double alpha, final double beta)" ], [ "sample", "org.apache.commons.math3.distribution", "ChengBetaSampler", "static double sample(RandomGenerator random, final double alpha, final double beta)" ], [ "getStirlingError", "org.apache.commons.math3.distribution", "SaddlePointExpansion", "static double getStirlingError(double z)" ], [ "getDeviancePart", "org.apache.commons.math3.distribution", "SaddlePointExpansion", "static double getDeviancePart(double x, double mu)" ], [ "logBinomialProbability", "org.apache.commons.math3.distribution", "SaddlePointExpansion", "static double logBinomialProbability(int x, int n, double p, double q)" ], [ "helper1", "org.apache.commons.math3.distribution", "ZipfDistribution", "static double helper1(final double x)" ], [ "helper2", "org.apache.commons.math3.distribution", "ZipfDistribution", "static double helper2(final double x)" ], [ "helper1", "org.apache.commons.math3.distribution", "ZipfRejectionInversionSampler", "static double helper1(final double x)" ], [ "helper2", "org.apache.commons.math3.distribution", "ZipfRejectionInversionSampler", "static double helper2(final double x)" ], [ "unlimited", "org.apache.commons.math3.optim", "MaxIter", "public static MaxIter unlimited()" ], [ "getInvertedCoefficientSum", "org.apache.commons.math3.optim.linear", "SimplexTableau", "protected static double getInvertedCoefficientSum(final RealVector coefficients)" ], [ "unbounded", "org.apache.commons.math3.optim", "SimpleBounds", "public static SimpleBounds unbounded(int dim)" ], [ "unlimited", "org.apache.commons.math3.optim", "MaxEval", "public static MaxEval unlimited()" ], [ "erf", "org.apache.commons.math3.special", "Erf", "public static double erf(double x)" ], [ "erfc", "org.apache.commons.math3.special", "Erf", "public static double erfc(double x)" ], [ "erf", "org.apache.commons.math3.special", "Erf", "public static double erf(double x1, double x2)" ], [ "erfInv", "org.apache.commons.math3.special", "Erf", "public static double erfInv(final double x)" ], [ "erfcInv", "org.apache.commons.math3.special", "Erf", "public static double erfcInv(final double x)" ], [ "value", "org.apache.commons.math3.special", "BesselJ", "public static double value(double order, double x) throws MathIllegalArgumentException, ConvergenceException" ], [ "rjBesl", "org.apache.commons.math3.special", "BesselJ", "public static BesselJResult rjBesl(double x, double alpha, int nb)" ], [ "logGamma", "org.apache.commons.math3.special", "Gamma", "public static double logGamma(double x)" ], [ "regularizedGammaP", "org.apache.commons.math3.special", "Gamma", "public static double regularizedGammaP(double a, double x)" ], [ "regularizedGammaP", "org.apache.commons.math3.special", "Gamma", "public static double regularizedGammaP(double a, double x, double epsilon, int maxIterations)" ], [ "regularizedGammaQ", "org.apache.commons.math3.special", "Gamma", "public static double regularizedGammaQ(double a, double x)" ], [ "regularizedGammaQ", "org.apache.commons.math3.special", "Gamma", "public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations)" ], [ "digamma", "org.apache.commons.math3.special", "Gamma", "public static double digamma(double x)" ], [ "trigamma", "org.apache.commons.math3.special", "Gamma", "public static double trigamma(double x)" ], [ "lanczos", "org.apache.commons.math3.special", "Gamma", "public static double lanczos(final double x)" ], [ "invGamma1pm1", "org.apache.commons.math3.special", "Gamma", "public static double invGamma1pm1(final double x)" ], [ "logGamma1p", "org.apache.commons.math3.special", "Gamma", "public static double logGamma1p(final double x) throws NumberIsTooSmallException, NumberIsTooLargeException" ], [ "gamma", "org.apache.commons.math3.special", "Gamma", "public static double gamma(final double x)" ], [ "regularizedBeta", "org.apache.commons.math3.special", "Beta", "public static double regularizedBeta(double x, double a, double b)" ], [ "regularizedBeta", "org.apache.commons.math3.special", "Beta", "public static double regularizedBeta(double x, double a, double b, double epsilon)" ], [ "regularizedBeta", "org.apache.commons.math3.special", "Beta", "public static double regularizedBeta(double x, double a, double b, int maxIterations)" ], [ "regularizedBeta", "org.apache.commons.math3.special", "Beta", "public static double regularizedBeta(double x, final double a, final double b, double epsilon, int maxIterations)" ], [ "logBeta", "org.apache.commons.math3.special", "Beta", "public static double logBeta(double a, double b, double epsilon, int maxIterations)" ], [ "logBeta", "org.apache.commons.math3.special", "Beta", "public static double logBeta(final double p, final double q)" ], [ "getInstance", "org.apache.commons.math3.ode.sampling", "DummyStepHandler", "public static DummyStepHandler getInstance()" ], [ "getInstance", "org.apache.commons.math3.ode.nonstiff", "AdamsNordsieckTransformer", "public static AdamsNordsieckTransformer getInstance(final int nSteps)" ], [ "taylor", "org.apache.commons.math3.ode.nonstiff", "AdamsFieldStepInterpolator", "public static <S extends RealFieldElement<S>> FieldODEStateAndDerivative<S> taylor(final FieldODEStateAndDerivative<S> reference, final S time, final S stepSize, final S[] scaled, final Array2DRowFieldMatrix<S> nordsieck)" ], [ "getInstance", "org.apache.commons.math3.ode.nonstiff", "AdamsNordsieckFieldTransformer", "public static <T extends RealFieldElement<T>> AdamsNordsieckFieldTransformer<T> getInstance(final Field<T> field, final int nSteps)" ], [ "sum", "org.apache.commons.math3.stat", "StatUtils", "public static double sum(final double[] values) throws MathIllegalArgumentException" ], [ "sum", "org.apache.commons.math3.stat", "StatUtils", "public static double sum(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "sumSq", "org.apache.commons.math3.stat", "StatUtils", "public static double sumSq(final double[] values) throws MathIllegalArgumentException" ], [ "sumSq", "org.apache.commons.math3.stat", "StatUtils", "public static double sumSq(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "product", "org.apache.commons.math3.stat", "StatUtils", "public static double product(final double[] values) throws MathIllegalArgumentException" ], [ "product", "org.apache.commons.math3.stat", "StatUtils", "public static double product(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "sumLog", "org.apache.commons.math3.stat", "StatUtils", "public static double sumLog(final double[] values) throws MathIllegalArgumentException" ], [ "sumLog", "org.apache.commons.math3.stat", "StatUtils", "public static double sumLog(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "mean", "org.apache.commons.math3.stat", "StatUtils", "public static double mean(final double[] values) throws MathIllegalArgumentException" ], [ "mean", "org.apache.commons.math3.stat", "StatUtils", "public static double mean(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "geometricMean", "org.apache.commons.math3.stat", "StatUtils", "public static double geometricMean(final double[] values) throws MathIllegalArgumentException" ], [ "geometricMean", "org.apache.commons.math3.stat", "StatUtils", "public static double geometricMean(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "variance", "org.apache.commons.math3.stat", "StatUtils", "public static double variance(final double[] values) throws MathIllegalArgumentException" ], [ "variance", "org.apache.commons.math3.stat", "StatUtils", "public static double variance(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "variance", "org.apache.commons.math3.stat", "StatUtils", "public static double variance(final double[] values, final double mean, final int begin, final int length) throws MathIllegalArgumentException" ], [ "variance", "org.apache.commons.math3.stat", "StatUtils", "public static double variance(final double[] values, final double mean) throws MathIllegalArgumentException" ], [ "populationVariance", "org.apache.commons.math3.stat", "StatUtils", "public static double populationVariance(final double[] values) throws MathIllegalArgumentException" ], [ "populationVariance", "org.apache.commons.math3.stat", "StatUtils", "public static double populationVariance(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "populationVariance", "org.apache.commons.math3.stat", "StatUtils", "public static double populationVariance(final double[] values, final double mean, final int begin, final int length) throws MathIllegalArgumentException" ], [ "populationVariance", "org.apache.commons.math3.stat", "StatUtils", "public static double populationVariance(final double[] values, final double mean) throws MathIllegalArgumentException" ], [ "max", "org.apache.commons.math3.stat", "StatUtils", "public static double max(final double[] values) throws MathIllegalArgumentException" ], [ "max", "org.apache.commons.math3.stat", "StatUtils", "public static double max(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "min", "org.apache.commons.math3.stat", "StatUtils", "public static double min(final double[] values) throws MathIllegalArgumentException" ], [ "min", "org.apache.commons.math3.stat", "StatUtils", "public static double min(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "percentile", "org.apache.commons.math3.stat", "StatUtils", "public static double percentile(final double[] values, final double p) throws MathIllegalArgumentException" ], [ "percentile", "org.apache.commons.math3.stat", "StatUtils", "public static double percentile(final double[] values, final int begin, final int length, final double p) throws MathIllegalArgumentException" ], [ "sumDifference", "org.apache.commons.math3.stat", "StatUtils", "public static double sumDifference(final double[] sample1, final double[] sample2) throws DimensionMismatchException, NoDataException" ], [ "meanDifference", "org.apache.commons.math3.stat", "StatUtils", "public static double meanDifference(final double[] sample1, final double[] sample2) throws DimensionMismatchException, NoDataException" ], [ "varianceDifference", "org.apache.commons.math3.stat", "StatUtils", "public static double varianceDifference(final double[] sample1, final double[] sample2, double meanDifference) throws DimensionMismatchException, NumberIsTooSmallException" ], [ "normalize", "org.apache.commons.math3.stat", "StatUtils", "public static double[] normalize(final double[] sample)" ], [ "mode", "org.apache.commons.math3.stat", "StatUtils", "public static double[] mode(double[] sample) throws MathIllegalArgumentException" ], [ "mode", "org.apache.commons.math3.stat", "StatUtils", "public static double[] mode(double[] sample, final int begin, final int length)" ], [ "getAgrestiCoullInterval", "org.apache.commons.math3.stat.interval", "IntervalUtils", "public static ConfidenceInterval getAgrestiCoullInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)" ], [ "getClopperPearsonInterval", "org.apache.commons.math3.stat.interval", "IntervalUtils", "public static ConfidenceInterval getClopperPearsonInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)" ], [ "getNormalApproximationInterval", "org.apache.commons.math3.stat.interval", "IntervalUtils", "public static ConfidenceInterval getNormalApproximationInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)" ], [ "getWilsonScoreInterval", "org.apache.commons.math3.stat.interval", "IntervalUtils", "public static ConfidenceInterval getWilsonScoreInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)" ], [ "homoscedasticT", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double homoscedasticT(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException" ], [ "homoscedasticT", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double homoscedasticT(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException" ], [ "homoscedasticTTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean homoscedasticTTest(final double[] sample1, final double[] sample2, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException" ], [ "homoscedasticTTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double homoscedasticTTest(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException" ], [ "homoscedasticTTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double homoscedasticTTest(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException" ], [ "pairedT", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double pairedT(final double[] sample1, final double[] sample2) throws NullArgumentException, NoDataException, DimensionMismatchException, NumberIsTooSmallException" ], [ "pairedTTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean pairedTTest(final double[] sample1, final double[] sample2, final double alpha) throws NullArgumentException, NoDataException, DimensionMismatchException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException" ], [ "pairedTTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double pairedTTest(final double[] sample1, final double[] sample2) throws NullArgumentException, NoDataException, DimensionMismatchException, NumberIsTooSmallException, MaxCountExceededException" ], [ "t", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double t(final double mu, final double[] observed) throws NullArgumentException, NumberIsTooSmallException" ], [ "t", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double t(final double mu, final StatisticalSummary sampleStats) throws NullArgumentException, NumberIsTooSmallException" ], [ "t", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double t(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException" ], [ "t", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double t(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean tTest(final double mu, final double[] sample, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double tTest(final double mu, final double[] sample) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean tTest(final double mu, final StatisticalSummary sampleStats, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double tTest(final double mu, final StatisticalSummary sampleStats) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean tTest(final double[] sample1, final double[] sample2, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double tTest(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean tTest(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double tTest(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException" ], [ "chiSquare", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double chiSquare(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException" ], [ "chiSquare", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double chiSquare(final long[][] counts) throws NullArgumentException, NotPositiveException, DimensionMismatchException" ], [ "chiSquareTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean chiSquareTest(final double[] expected, final long[] observed, final double alpha) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, OutOfRangeException, MaxCountExceededException" ], [ "chiSquareTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double chiSquareTest(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, MaxCountExceededException" ], [ "chiSquareTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean chiSquareTest(final long[][] counts, final double alpha) throws NullArgumentException, DimensionMismatchException, NotPositiveException, OutOfRangeException, MaxCountExceededException" ], [ "chiSquareTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double chiSquareTest(final long[][] counts) throws NullArgumentException, DimensionMismatchException, NotPositiveException, MaxCountExceededException" ], [ "chiSquareDataSetsComparison", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double chiSquareDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException" ], [ "chiSquareTestDataSetsComparison", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double chiSquareTestDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException, MaxCountExceededException" ], [ "chiSquareTestDataSetsComparison", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean chiSquareTestDataSetsComparison(final long[] observed1, final long[] observed2, final double alpha) throws DimensionMismatchException, NotPositiveException, ZeroException, OutOfRangeException, MaxCountExceededException" ], [ "oneWayAnovaFValue", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double oneWayAnovaFValue(final Collection<double[]> categoryData) throws NullArgumentException, DimensionMismatchException" ], [ "oneWayAnovaPValue", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double oneWayAnovaPValue(final Collection<double[]> categoryData) throws NullArgumentException, DimensionMismatchException, ConvergenceException, MaxCountExceededException" ], [ "oneWayAnovaTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean oneWayAnovaTest(final Collection<double[]> categoryData, final double alpha) throws NullArgumentException, DimensionMismatchException, OutOfRangeException, ConvergenceException, MaxCountExceededException" ], [ "g", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double g(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException" ], [ "gTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double gTest(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, MaxCountExceededException" ], [ "gTestIntrinsic", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double gTestIntrinsic(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, MaxCountExceededException" ], [ "gTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean gTest(final double[] expected, final long[] observed, final double alpha) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, OutOfRangeException, MaxCountExceededException" ], [ "gDataSetsComparison", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double gDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException" ], [ "rootLogLikelihoodRatio", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double rootLogLikelihoodRatio(final long k11, final long k12, final long k21, final long k22) throws DimensionMismatchException, NotPositiveException, ZeroException" ], [ "gTestDataSetsComparison", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double gTestDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException, MaxCountExceededException" ], [ "gTestDataSetsComparison", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean gTestDataSetsComparison(final long[] observed1, final long[] observed2, final double alpha) throws DimensionMismatchException, NotPositiveException, ZeroException, OutOfRangeException, MaxCountExceededException" ], [ "kolmogorovSmirnovStatistic", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double kolmogorovSmirnovStatistic(RealDistribution dist, double[] data) throws InsufficientDataException, NullArgumentException" ], [ "kolmogorovSmirnovTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double kolmogorovSmirnovTest(RealDistribution dist, double[] data) throws InsufficientDataException, NullArgumentException" ], [ "kolmogorovSmirnovTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double kolmogorovSmirnovTest(RealDistribution dist, double[] data, boolean strict) throws InsufficientDataException, NullArgumentException" ], [ "kolmogorovSmirnovTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean kolmogorovSmirnovTest(RealDistribution dist, double[] data, double alpha) throws InsufficientDataException, NullArgumentException" ], [ "kolmogorovSmirnovStatistic", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double kolmogorovSmirnovStatistic(double[] x, double[] y) throws InsufficientDataException, NullArgumentException" ], [ "kolmogorovSmirnovTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double kolmogorovSmirnovTest(double[] x, double[] y) throws InsufficientDataException, NullArgumentException" ], [ "kolmogorovSmirnovTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double kolmogorovSmirnovTest(double[] x, double[] y, boolean strict) throws InsufficientDataException, NullArgumentException" ], [ "exactP", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double exactP(double d, int m, int n, boolean strict)" ], [ "approximateP", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double approximateP(double d, int n, int m)" ], [ "monteCarloP", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double monteCarloP(double d, int n, int m, boolean strict, int iterations)" ], [ "aggregate", "org.apache.commons.math3.stat.descriptive", "AggregateSummaryStatistics", "public static StatisticalSummaryValues aggregate(Collection<? extends StatisticalSummary> statistics)" ], [ "newMarkers", "org.apache.commons.math3.stat.descriptive.rank", "PSquarePercentile", "public static PSquareMarkers newMarkers(final List<Double> initialFive, final double p)" ], [ "exponentialDecay", "org.apache.commons.math3.ml.neuralnet.sofm", "NeighbourhoodSizeFunctionFactory", "public static NeighbourhoodSizeFunction exponentialDecay(final double initValue, final double valueAtNumCall, final long numCall)" ], [ "quasiSigmoidDecay", "org.apache.commons.math3.ml.neuralnet.sofm", "NeighbourhoodSizeFunctionFactory", "public static NeighbourhoodSizeFunction quasiSigmoidDecay(final double initValue, final double slope, final long numCall)" ], [ "exponentialDecay", "org.apache.commons.math3.ml.neuralnet.sofm", "LearningFactorFunctionFactory", "public static LearningFactorFunction exponentialDecay(final double initValue, final double valueAtNumCall, final long numCall)" ], [ "quasiSigmoidDecay", "org.apache.commons.math3.ml.neuralnet.sofm", "LearningFactorFunctionFactory", "public static LearningFactorFunction quasiSigmoidDecay(final double initValue, final double slope, final long numCall)" ], [ "findBest", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static Neuron findBest(double[] features, Iterable<Neuron> neurons, DistanceMeasure distance)" ], [ "findBestAndSecondBest", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static Pair<Neuron, Neuron> findBestAndSecondBest(double[] features, Iterable<Neuron> neurons, DistanceMeasure distance)" ], [ "sort", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static Neuron[] sort(double[] features, Iterable<Neuron> neurons, DistanceMeasure distance)" ], [ "computeU", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static double[][] computeU(NeuronSquareMesh2D map, DistanceMeasure distance)" ], [ "computeHitHistogram", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static int[][] computeHitHistogram(Iterable<double[]> data, NeuronSquareMesh2D map, DistanceMeasure distance)" ], [ "computeQuantizationError", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static double computeQuantizationError(Iterable<double[]> data, Iterable<Neuron> neurons, DistanceMeasure distance)" ], [ "computeTopographicError", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static double computeTopographicError(Iterable<double[]> data, Network net, DistanceMeasure distance)" ], [ "uniform", "org.apache.commons.math3.ml.neuralnet", "FeatureInitializerFactory", "public static FeatureInitializer uniform(final RandomGenerator rng, final double min, final double max)" ], [ "uniform", "org.apache.commons.math3.ml.neuralnet", "FeatureInitializerFactory", "public static FeatureInitializer uniform(final double min, final double max)" ], [ "function", "org.apache.commons.math3.ml.neuralnet", "FeatureInitializerFactory", "public static FeatureInitializer function(final UnivariateFunction f, final double init, final double inc)" ], [ "randomize", "org.apache.commons.math3.ml.neuralnet", "FeatureInitializerFactory", "public static FeatureInitializer randomize(final RealDistribution random, final FeatureInitializer orig)" ], [ "split", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp[] split(final DfpField field, final String a)" ], [ "split", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp[] split(final Dfp a)" ], [ "splitMult", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp[] splitMult(final Dfp[] a, final Dfp[] b)" ], [ "splitDiv", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp[] splitDiv(final Dfp[] a, final Dfp[] b)" ], [ "splitPow", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp splitPow(final Dfp[] base, int a)" ], [ "pow", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp pow(Dfp base, int a)" ], [ "exp", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp exp(final Dfp a)" ], [ "expInternal", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp expInternal(final Dfp a)" ], [ "log", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp log(Dfp a)" ], [ "logInternal", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp[] logInternal(final Dfp[] a)" ], [ "pow", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp pow(Dfp x, final Dfp y)" ], [ "sinInternal", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp sinInternal(Dfp[] a)" ], [ "cosInternal", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp cosInternal(Dfp[] a)" ], [ "sin", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp sin(final Dfp a)" ], [ "cos", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp cos(Dfp a)" ], [ "tan", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp tan(final Dfp a)" ], [ "atanInternal", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp atanInternal(final Dfp a)" ], [ "atan", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp atan(final Dfp a)" ], [ "asin", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp asin(final Dfp a)" ], [ "acos", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp acos(Dfp a)" ], [ "copysign", "org.apache.commons.math3.dfp", "Dfp", "public static Dfp copysign(final Dfp x, final Dfp y)" ], [ "computeExp", "org.apache.commons.math3.dfp", "DfpField", "public static Dfp computeExp(final Dfp a, final Dfp one)" ], [ "computeLn", "org.apache.commons.math3.dfp", "DfpField", "public static Dfp computeLn(final Dfp a, final Dfp one, final Dfp two)" ], [ "getRandomGenerator", "org.apache.commons.math3.genetics", "GeneticAlgorithm", "public static synchronized RandomGenerator getRandomGenerator()" ], [ "randomPermutation", "org.apache.commons.math3.genetics", "RandomKey", "public static final List<Double> randomPermutation(final int l)" ], [ "identityPermutation", "org.apache.commons.math3.genetics", "RandomKey", "public static final List<Double> identityPermutation(final int l)" ], [ "comparatorPermutation", "org.apache.commons.math3.genetics", "RandomKey", "public static <S> List<Double> comparatorPermutation(final List<S> data, final Comparator<S> comparator)" ], [ "inducedPermutation", "org.apache.commons.math3.genetics", "RandomKey", "public static <S> List<Double> inducedPermutation(final List<S> originalData, final List<S> permutedData) throws DimensionMismatchException, MathIllegalArgumentException" ], [ "randomBinaryRepresentation", "org.apache.commons.math3.genetics", "BinaryChromosome", "public static List<Integer> randomBinaryRepresentation(int length)" ], [ "getAvailableLocales", "org.apache.commons.math3.geometry", "VectorFormat", "public static Locale[] getAvailableLocales()" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3DFormat", "public static Vector3DFormat getInstance()" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3DFormat", "public static Vector3DFormat getInstance(final Locale locale)" ], [ "angle", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T angle(final FieldVector3D<T> v1, final FieldVector3D<T> v2) throws MathArithmeticException" ], [ "angle", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T angle(final FieldVector3D<T> v1, final Vector3D v2) throws MathArithmeticException" ], [ "angle", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T angle(final Vector3D v1, final FieldVector3D<T> v2) throws MathArithmeticException" ], [ "dotProduct", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T dotProduct(final FieldVector3D<T> v1, final FieldVector3D<T> v2)" ], [ "dotProduct", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T dotProduct(final FieldVector3D<T> v1, final Vector3D v2)" ], [ "dotProduct", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T dotProduct(final Vector3D v1, final FieldVector3D<T> v2)" ], [ "crossProduct", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> FieldVector3D<T> crossProduct(final FieldVector3D<T> v1, final FieldVector3D<T> v2)" ], [ "crossProduct", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> FieldVector3D<T> crossProduct(final FieldVector3D<T> v1, final Vector3D v2)" ], [ "crossProduct", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> FieldVector3D<T> crossProduct(final Vector3D v1, final FieldVector3D<T> v2)" ], [ "distance1", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distance1(final FieldVector3D<T> v1, final FieldVector3D<T> v2)" ], [ "distance1", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distance1(final FieldVector3D<T> v1, final Vector3D v2)" ], [ "distance1", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distance1(final Vector3D v1, final FieldVector3D<T> v2)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distance(final FieldVector3D<T> v1, final FieldVector3D<T> v2)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distance(final FieldVector3D<T> v1, final Vector3D v2)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distance(final Vector3D v1, final FieldVector3D<T> v2)" ], [ "distanceInf", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distanceInf(final FieldVector3D<T> v1, final FieldVector3D<T> v2)" ], [ "distanceInf", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distanceInf(final FieldVector3D<T> v1, final Vector3D v2)" ], [ "distanceInf", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distanceInf(final Vector3D v1, final FieldVector3D<T> v2)" ], [ "distanceSq", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distanceSq(final FieldVector3D<T> v1, final FieldVector3D<T> v2)" ], [ "distanceSq", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distanceSq(final FieldVector3D<T> v1, final Vector3D v2)" ], [ "distanceSq", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distanceSq(final Vector3D v1, final FieldVector3D<T> v2)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.threed", "Rotation", "public static double distance(Rotation r1, Rotation r2)" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.threed", "Euclidean3D", "public static Euclidean3D getInstance()" ], [ "applyTo", "org.apache.commons.math3.geometry.euclidean.threed", "FieldRotation", "public static <T extends RealFieldElement<T>> FieldVector3D<T> applyTo(final Rotation r, final FieldVector3D<T> u)" ], [ "applyInverseTo", "org.apache.commons.math3.geometry.euclidean.threed", "FieldRotation", "public static <T extends RealFieldElement<T>> FieldVector3D<T> applyInverseTo(final Rotation r, final FieldVector3D<T> u)" ], [ "applyTo", "org.apache.commons.math3.geometry.euclidean.threed", "FieldRotation", "public static <T extends RealFieldElement<T>> FieldRotation<T> applyTo(final Rotation r1, final FieldRotation<T> rInner)" ], [ "applyInverseTo", "org.apache.commons.math3.geometry.euclidean.threed", "FieldRotation", "public static <T extends RealFieldElement<T>> FieldRotation<T> applyInverseTo(final Rotation rOuter, final FieldRotation<T> rInner)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.threed", "FieldRotation", "public static <T extends RealFieldElement<T>> T distance(final FieldRotation<T> r1, final FieldRotation<T> r2)" ], [ "angle", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static double angle(Vector3D v1, Vector3D v2) throws MathArithmeticException" ], [ "dotProduct", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static double dotProduct(Vector3D v1, Vector3D v2)" ], [ "crossProduct", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2)" ], [ "distance1", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static double distance1(Vector3D v1, Vector3D v2)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static double distance(Vector3D v1, Vector3D v2)" ], [ "distanceInf", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static double distanceInf(Vector3D v1, Vector3D v2)" ], [ "distanceSq", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static double distanceSq(Vector3D v1, Vector3D v2)" ], [ "intersection", "org.apache.commons.math3.geometry.euclidean.threed", "Plane", "public static Vector3D intersection(final Plane plane1, final Plane plane2, final Plane plane3)" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.oned", "Euclidean1D", "public static Euclidean1D getInstance()" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1DFormat", "public static Vector1DFormat getInstance()" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1DFormat", "public static Vector1DFormat getInstance(final Locale locale)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static double distance(Vector1D p1, Vector1D p2)" ], [ "distanceInf", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static double distanceInf(Vector1D p1, Vector1D p2)" ], [ "distanceSq", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static double distanceSq(Vector1D p1, Vector1D p2)" ], [ "reducePoints", "org.apache.commons.math3.geometry.euclidean.twod.hull", "AklToussaintHeuristic", "public static Collection<Vector2D> reducePoints(final Collection<Vector2D> points)" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2DFormat", "public static Vector2DFormat getInstance()" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2DFormat", "public static Vector2DFormat getInstance(final Locale locale)" ], [ "angle", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static double angle(Vector2D v1, Vector2D v2) throws MathArithmeticException" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static double distance(Vector2D p1, Vector2D p2)" ], [ "distanceInf", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static double distanceInf(Vector2D p1, Vector2D p2)" ], [ "distanceSq", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static double distanceSq(Vector2D p1, Vector2D p2)" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.twod", "Euclidean2D", "public static Euclidean2D getInstance()" ], [ "getTransform", "org.apache.commons.math3.geometry.euclidean.twod", "Line", "public static Transform<Euclidean2D, Euclidean1D> getTransform(final AffineTransform transform) throws MathIllegalArgumentException" ], [ "getTransform", "org.apache.commons.math3.geometry.euclidean.twod", "Line", "public static Transform<Euclidean2D, Euclidean1D> getTransform(final double cXX, final double cYX, final double cXY, final double cYY, final double cX1, final double cY1) throws MathIllegalArgumentException" ], [ "distance", "org.apache.commons.math3.geometry.spherical.oned", "S1Point", "public static double distance(S1Point p1, S1Point p2)" ], [ "getInstance", "org.apache.commons.math3.geometry.spherical.oned", "Sphere1D", "public static Sphere1D getInstance()" ], [ "getInstance", "org.apache.commons.math3.geometry.spherical.twod", "Sphere2D", "public static Sphere2D getInstance()" ], [ "getTransform", "org.apache.commons.math3.geometry.spherical.twod", "Circle", "public static Transform<Sphere2D, Sphere1D> getTransform(final Rotation rotation)" ], [ "distance", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static double distance(S2Point p1, S2Point p2)" ], [ "createAdaptor", "org.apache.commons.math3.random", "RandomAdaptor", "public static Random createAdaptor(RandomGenerator randomGenerator)" ], [ "createRandomGenerator", "org.apache.commons.math3.random", "RandomGeneratorFactory", "public static RandomGenerator createRandomGenerator(final Random rng)" ], [ "convertToLong", "org.apache.commons.math3.random", "RandomGeneratorFactory", "public static long convertToLong(int[] seed)" ], [ "getAvailableLocales", "org.apache.commons.math3.fraction", "BigFractionFormat", "public static Locale[] getAvailableLocales()" ], [ "formatBigFraction", "org.apache.commons.math3.fraction", "BigFractionFormat", "public static String formatBigFraction(final BigFraction f)" ], [ "getImproperInstance", "org.apache.commons.math3.fraction", "BigFractionFormat", "public static BigFractionFormat getImproperInstance()" ], [ "getImproperInstance", "org.apache.commons.math3.fraction", "BigFractionFormat", "public static BigFractionFormat getImproperInstance(final Locale locale)" ], [ "getProperInstance", "org.apache.commons.math3.fraction", "BigFractionFormat", "public static BigFractionFormat getProperInstance()" ], [ "getProperInstance", "org.apache.commons.math3.fraction", "BigFractionFormat", "public static BigFractionFormat getProperInstance(final Locale locale)" ], [ "getReducedFraction", "org.apache.commons.math3.fraction", "Fraction", "public static Fraction getReducedFraction(int numerator, int denominator)" ], [ "getReducedFraction", "org.apache.commons.math3.fraction", "BigFraction", "public static BigFraction getReducedFraction(final int numerator, final int denominator)" ], [ "getDefaultNumberFormat", "org.apache.commons.math3.fraction", "AbstractFormat", "protected static NumberFormat getDefaultNumberFormat()" ], [ "getDefaultNumberFormat", "org.apache.commons.math3.fraction", "AbstractFormat", "protected static NumberFormat getDefaultNumberFormat(final Locale locale)" ], [ "parseNextCharacter", "org.apache.commons.math3.fraction", "AbstractFormat", "protected static char parseNextCharacter(final String source, final ParsePosition pos)" ], [ "getAvailableLocales", "org.apache.commons.math3.fraction", "FractionFormat", "public static Locale[] getAvailableLocales()" ], [ "formatFraction", "org.apache.commons.math3.fraction", "FractionFormat", "public static String formatFraction(Fraction f)" ], [ "getImproperInstance", "org.apache.commons.math3.fraction", "FractionFormat", "public static FractionFormat getImproperInstance()" ], [ "getImproperInstance", "org.apache.commons.math3.fraction", "FractionFormat", "public static FractionFormat getImproperInstance(final Locale locale)" ], [ "getProperInstance", "org.apache.commons.math3.fraction", "FractionFormat", "public static FractionFormat getProperInstance()" ], [ "getProperInstance", "org.apache.commons.math3.fraction", "FractionFormat", "public static FractionFormat getProperInstance(final Locale locale)" ], [ "getDefaultNumberFormat", "org.apache.commons.math3.fraction", "FractionFormat", "protected static NumberFormat getDefaultNumberFormat()" ], [ "getInstance", "org.apache.commons.math3.fraction", "FractionField", "public static FractionField getInstance()" ], [ "getInstance", "org.apache.commons.math3.fraction", "BigFractionField", "public static BigFractionField getInstance()" ], [ "flatten", "org.apache.commons.math3.exception.util", "ArgUtils", "public static Object[] flatten(Object[] array)" ], [ "scaleArray", "org.apache.commons.math3.transform", "TransformUtils", "public static double[] scaleArray(double[] f, double d)" ], [ "scaleArray", "org.apache.commons.math3.transform", "TransformUtils", "public static Complex[] scaleArray(Complex[] f, double d)" ], [ "createRealImaginaryArray", "org.apache.commons.math3.transform", "TransformUtils", "public static double[][] createRealImaginaryArray(final Complex[] dataC)" ], [ "createComplexArray", "org.apache.commons.math3.transform", "TransformUtils", "public static Complex[] createComplexArray(final double[][] dataRI) throws DimensionMismatchException" ], [ "exactLog2", "org.apache.commons.math3.transform", "TransformUtils", "public static int exactLog2(final int n) throws MathIllegalArgumentException" ] ],
  "tokensProjectClassesNonPrivateStaticAttributes" : [ [ "PRIMES", "org.apache.commons.math3.primes", "SmallPrimes", "public static final int[] PRIMES = { 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171, 1181, 1187, 1193, 1201, 1213, 1217, 1223, 1229, 1231, 1237, 1249, 1259, 1277, 1279, 1283, 1289, 1291, 1297, 1301, 1303, 1307, 1319, 1321, 1327, 1361, 1367, 1373, 1381, 1399, 1409, 1423, 1427, 1429, 1433, 1439, 1447, 1451, 1453, 1459, 1471, 1481, 1483, 1487, 1489, 1493, 1499, 1511, 1523, 1531, 1543, 1549, 1553, 1559, 1567, 1571, 1579, 1583, 1597, 1601, 1607, 1609, 1613, 1619, 1621, 1627, 1637, 1657, 1663, 1667, 1669, 1693, 1697, 1699, 1709, 1721, 1723, 1733, 1741, 1747, 1753, 1759, 1777, 1783, 1787, 1789, 1801, 1811, 1823, 1831, 1847, 1861, 1867, 1871, 1873, 1877, 1879, 1889, 1901, 1907, 1913, 1931, 1933, 1949, 1951, 1973, 1979, 1987, 1993, 1997, 1999, 2003, 2011, 2017, 2027, 2029, 2039, 2053, 2063, 2069, 2081, 2083, 2087, 2089, 2099, 2111, 2113, 2129, 2131, 2137, 2141, 2143, 2153, 2161, 2179, 2203, 2207, 2213, 2221, 2237, 2239, 2243, 2251, 2267, 2269, 2273, 2281, 2287, 2293, 2297, 2309, 2311, 2333, 2339, 2341, 2347, 2351, 2357, 2371, 2377, 2381, 2383, 2389, 2393, 2399, 2411, 2417, 2423, 2437, 2441, 2447, 2459, 2467, 2473, 2477, 2503, 2521, 2531, 2539, 2543, 2549, 2551, 2557, 2579, 2591, 2593, 2609, 2617, 2621, 2633, 2647, 2657, 2659, 2663, 2671, 2677, 2683, 2687, 2689, 2693, 2699, 2707, 2711, 2713, 2719, 2729, 2731, 2741, 2749, 2753, 2767, 2777, 2789, 2791, 2797, 2801, 2803, 2819, 2833, 2837, 2843, 2851, 2857, 2861, 2879, 2887, 2897, 2903, 2909, 2917, 2927, 2939, 2953, 2957, 2963, 2969, 2971, 2999, 3001, 3011, 3019, 3023, 3037, 3041, 3049, 3061, 3067, 3079, 3083, 3089, 3109, 3119, 3121, 3137, 3163, 3167, 3169, 3181, 3187, 3191, 3203, 3209, 3217, 3221, 3229, 3251, 3253, 3257, 3259, 3271, 3299, 3301, 3307, 3313, 3319, 3323, 3329, 3331, 3343, 3347, 3359, 3361, 3371, 3373, 3389, 3391, 3407, 3413, 3433, 3449, 3457, 3461, 3463, 3467, 3469, 3491, 3499, 3511, 3517, 3527, 3529, 3533, 3539, 3541, 3547, 3557, 3559, 3571, 3581, 3583, 3593, 3607, 3613, 3617, 3623, 3631, 3637, 3643, 3659, 3671 };" ], [ "PRIMES_LAST", "org.apache.commons.math3.primes", "SmallPrimes", "public static final int PRIMES_LAST = PRIMES[PRIMES.length - 1];" ], [ "MIDPOINT_MAX_ITERATIONS_COUNT", "org.apache.commons.math3.analysis.integration", "MidPointIntegrator", "public static final int MIDPOINT_MAX_ITERATIONS_COUNT = 64;" ], [ "ROMBERG_MAX_ITERATIONS_COUNT", "org.apache.commons.math3.analysis.integration", "RombergIntegrator", "public static final int ROMBERG_MAX_ITERATIONS_COUNT = 32;" ], [ "SIMPSON_MAX_ITERATIONS_COUNT", "org.apache.commons.math3.analysis.integration", "SimpsonIntegrator", "public static final int SIMPSON_MAX_ITERATIONS_COUNT = 64;" ], [ "DEFAULT_ABSOLUTE_ACCURACY", "org.apache.commons.math3.analysis.integration", "BaseAbstractUnivariateIntegrator", "public static final double DEFAULT_ABSOLUTE_ACCURACY = 1.0e-15;" ], [ "DEFAULT_RELATIVE_ACCURACY", "org.apache.commons.math3.analysis.integration", "BaseAbstractUnivariateIntegrator", "public static final double DEFAULT_RELATIVE_ACCURACY = 1.0e-6;" ], [ "DEFAULT_MIN_ITERATIONS_COUNT", "org.apache.commons.math3.analysis.integration", "BaseAbstractUnivariateIntegrator", "public static final int DEFAULT_MIN_ITERATIONS_COUNT = 3;" ], [ "DEFAULT_MAX_ITERATIONS_COUNT", "org.apache.commons.math3.analysis.integration", "BaseAbstractUnivariateIntegrator", "public static final int DEFAULT_MAX_ITERATIONS_COUNT = Integer.MAX_VALUE;" ], [ "TRAPEZOID_MAX_ITERATIONS_COUNT", "org.apache.commons.math3.analysis.integration", "TrapezoidIntegrator", "public static final int TRAPEZOID_MAX_ITERATIONS_COUNT = 64;" ], [ "DEFAULT_ABSOLUTE_ACCURACY", "org.apache.commons.math3.analysis.solvers", "BaseSecantSolver", "protected static final double DEFAULT_ABSOLUTE_ACCURACY = 1e-6;" ], [ "DEFAULT_ABSOLUTE_ACCURACY", "org.apache.commons.math3.analysis.solvers", "SecantSolver", "protected static final double DEFAULT_ABSOLUTE_ACCURACY = 1e-6;" ], [ "DEFAULT_BANDWIDTH", "org.apache.commons.math3.analysis.interpolation", "LoessInterpolator", "public static final double DEFAULT_BANDWIDTH = 0.3;" ], [ "DEFAULT_ROBUSTNESS_ITERS", "org.apache.commons.math3.analysis.interpolation", "LoessInterpolator", "public static final int DEFAULT_ROBUSTNESS_ITERS = 2;" ], [ "DEFAULT_ACCURACY", "org.apache.commons.math3.analysis.interpolation", "LoessInterpolator", "public static final double DEFAULT_ACCURACY = 1e-12;" ], [ "serialVersionUID", "org.apache.commons.math3.analysis.interpolation", "NevilleInterpolator", "static final long serialVersionUID = 3003707660147873733L;" ], [ "DEFAULT_EXTEND", "org.apache.commons.math3.analysis.interpolation", "UnivariatePeriodicInterpolator", "public static final int DEFAULT_EXTEND = 5;" ], [ "DEFAULT_MICROSPHERE_ELEMENTS", "org.apache.commons.math3.analysis.interpolation", "MicrosphereInterpolator", "public static final int DEFAULT_MICROSPHERE_ELEMENTS = 2000;" ], [ "DEFAULT_BRIGHTNESS_EXPONENT", "org.apache.commons.math3.analysis.interpolation", "MicrosphereInterpolator", "public static final int DEFAULT_BRIGHTNESS_EXPONENT = 2;" ], [ "EPSILON", "org.apache.commons.math3.util", "Precision", "public static final double EPSILON;" ], [ "SAFE_MIN", "org.apache.commons.math3.util", "Precision", "public static final double SAFE_MIN;" ], [ "FREE", "org.apache.commons.math3.util", "OpenIntToDoubleHashMap", "protected static final byte FREE = 0;" ], [ "FULL", "org.apache.commons.math3.util", "OpenIntToDoubleHashMap", "protected static final byte FULL = 1;" ], [ "REMOVED", "org.apache.commons.math3.util", "OpenIntToDoubleHashMap", "protected static final byte REMOVED = 2;" ], [ "FREE", "org.apache.commons.math3.util", "OpenIntToFieldHashMap", "protected static final byte FREE = 0;" ], [ "FULL", "org.apache.commons.math3.util", "OpenIntToFieldHashMap", "protected static final byte FULL = 1;" ], [ "REMOVED", "org.apache.commons.math3.util", "OpenIntToFieldHashMap", "protected static final byte REMOVED = 2;" ], [ "PI", "org.apache.commons.math3.util", "FastMath", "public static final double PI = 105414357.0 / 33554432.0 + 1.984187159361080883e-9;" ], [ "E", "org.apache.commons.math3.util", "FastMath", "public static final double E = 2850325.0 / 1048576.0 + 8.254840070411028747e-8;" ], [ "EXP_INT_TABLE_MAX_INDEX", "org.apache.commons.math3.util", "FastMath", "static final int EXP_INT_TABLE_MAX_INDEX = 750;" ], [ "EXP_INT_TABLE_LEN", "org.apache.commons.math3.util", "FastMath", "static final int EXP_INT_TABLE_LEN = EXP_INT_TABLE_MAX_INDEX * 2;" ], [ "LN_MANT_LEN", "org.apache.commons.math3.util", "FastMath", "static final int LN_MANT_LEN = 1024;" ], [ "EXP_FRAC_TABLE_LEN", "org.apache.commons.math3.util", "FastMath", "static final int EXP_FRAC_TABLE_LEN = 1025;" ], [ "NAN", "org.apache.commons.math3.util", "FastMath", "public static final Split NAN = new Split(Double.NaN, 0);" ], [ "POSITIVE_INFINITY", "org.apache.commons.math3.util", "FastMath", "public static final Split POSITIVE_INFINITY = new Split(Double.POSITIVE_INFINITY, 0);" ], [ "NEGATIVE_INFINITY", "org.apache.commons.math3.util", "FastMath", "public static final Split NEGATIVE_INFINITY = new Split(Double.NEGATIVE_INFINITY, 0);" ], [ "NAN", "org.apache.commons.math3.util", "Split", "public static final Split NAN = new Split(Double.NaN, 0);" ], [ "POSITIVE_INFINITY", "org.apache.commons.math3.util", "Split", "public static final Split POSITIVE_INFINITY = new Split(Double.POSITIVE_INFINITY, 0);" ], [ "NEGATIVE_INFINITY", "org.apache.commons.math3.util", "Split", "public static final Split NEGATIVE_INFINITY = new Split(Double.NEGATIVE_INFINITY, 0);" ], [ "ADDITIVE_MODE", "org.apache.commons.math3.util", "ResizableDoubleArray", "public static final int ADDITIVE_MODE = 1;" ], [ "MULTIPLICATIVE_MODE", "org.apache.commons.math3.util", "ResizableDoubleArray", "public static final int MULTIPLICATIVE_MODE = 0;" ], [ "TWO_PI", "org.apache.commons.math3.util", "MathUtils", "public static final double TWO_PI = 2 * FastMath.PI;" ], [ "PI_SQUARED", "org.apache.commons.math3.util", "MathUtils", "public static final double PI_SQUARED = FastMath.PI * FastMath.PI;" ], [ "FACTORIALS", "org.apache.commons.math3.util", "CombinatoricsUtils", "static final long[] FACTORIALS = new long[] { 1l, 1l, 2l, 6l, 24l, 120l, 720l, 5040l, 40320l, 362880l, 3628800l, 39916800l, 479001600l, 6227020800l, 87178291200l, 1307674368000l, 20922789888000l, 355687428096000l, 6402373705728000l, 121645100408832000l, 2432902008176640000l };" ], [ "STIRLING_S2", "org.apache.commons.math3.util", "CombinatoricsUtils", "static final AtomicReference<long[][]> STIRLING_S2 = new AtomicReference<long[][]>(null);" ], [ "ZERO", "org.apache.commons.math3.util", "Decimal64", "public static final Decimal64 ZERO;" ], [ "ONE", "org.apache.commons.math3.util", "Decimal64", "public static final Decimal64 ONE;" ], [ "NEGATIVE_INFINITY", "org.apache.commons.math3.util", "Decimal64", "public static final Decimal64 NEGATIVE_INFINITY;" ], [ "POSITIVE_INFINITY", "org.apache.commons.math3.util", "Decimal64", "public static final Decimal64 POSITIVE_INFINITY;" ], [ "NAN", "org.apache.commons.math3.util", "Decimal64", "public static final Decimal64 NAN;" ], [ "ZERO", "org.apache.commons.math3.util", "BigReal", "public static final BigReal ZERO = new BigReal(BigDecimal.ZERO);" ], [ "ONE", "org.apache.commons.math3.util", "BigReal", "public static final BigReal ONE = new BigReal(BigDecimal.ONE);" ], [ "IDENTITY", "org.apache.commons.math3.complex", "Quaternion", "public static final Quaternion IDENTITY = new Quaternion(1, 0, 0, 0);" ], [ "ZERO", "org.apache.commons.math3.complex", "Quaternion", "public static final Quaternion ZERO = new Quaternion(0, 0, 0, 0);" ], [ "I", "org.apache.commons.math3.complex", "Quaternion", "public static final Quaternion I = new Quaternion(0, 1, 0, 0);" ], [ "J", "org.apache.commons.math3.complex", "Quaternion", "public static final Quaternion J = new Quaternion(0, 0, 1, 0);" ], [ "K", "org.apache.commons.math3.complex", "Quaternion", "public static final Quaternion K = new Quaternion(0, 0, 0, 1);" ], [ "I", "org.apache.commons.math3.complex", "Complex", "public static final Complex I = new Complex(0.0, 1.0);" ], [ "NaN", "org.apache.commons.math3.complex", "Complex", "public static final Complex NaN = new Complex(Double.NaN, Double.NaN);" ], [ "INF", "org.apache.commons.math3.complex", "Complex", "public static final Complex INF = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);" ], [ "ONE", "org.apache.commons.math3.complex", "Complex", "public static final Complex ONE = new Complex(1.0, 0.0);" ], [ "ZERO", "org.apache.commons.math3.complex", "Complex", "public static final Complex ZERO = new Complex(0.0, 0.0);" ], [ "MINIMUM_PROBLEM_DIMENSION", "org.apache.commons.math3.optimization.direct", "BOBYQAOptimizer", "public static final int MINIMUM_PROBLEM_DIMENSION = 2;" ], [ "DEFAULT_INITIAL_RADIUS", "org.apache.commons.math3.optimization.direct", "BOBYQAOptimizer", "public static final double DEFAULT_INITIAL_RADIUS = 10.0;" ], [ "DEFAULT_STOPPING_RADIUS", "org.apache.commons.math3.optimization.direct", "BOBYQAOptimizer", "public static final double DEFAULT_STOPPING_RADIUS = 1E-8;" ], [ "DEFAULT_CHECKFEASABLECOUNT", "org.apache.commons.math3.optimization.direct", "CMAESOptimizer", "public static final int DEFAULT_CHECKFEASABLECOUNT = 0;" ], [ "DEFAULT_STOPFITNESS", "org.apache.commons.math3.optimization.direct", "CMAESOptimizer", "public static final double DEFAULT_STOPFITNESS = 0;" ], [ "DEFAULT_ISACTIVECMA", "org.apache.commons.math3.optimization.direct", "CMAESOptimizer", "public static final boolean DEFAULT_ISACTIVECMA = true;" ], [ "DEFAULT_MAXITERATIONS", "org.apache.commons.math3.optimization.direct", "CMAESOptimizer", "public static final int DEFAULT_MAXITERATIONS = 30000;" ], [ "DEFAULT_DIAGONALONLY", "org.apache.commons.math3.optimization.direct", "CMAESOptimizer", "public static final int DEFAULT_DIAGONALONLY = 0;" ], [ "DEFAULT_RANDOMGENERATOR", "org.apache.commons.math3.optimization.direct", "CMAESOptimizer", "public static final RandomGenerator DEFAULT_RANDOMGENERATOR = new MersenneTwister();" ], [ "DEFAULT_MAX_ITERATIONS", "org.apache.commons.math3.optimization.linear", "AbstractLinearOptimizer", "public static final int DEFAULT_MAX_ITERATIONS = 100;" ], [ "DEFAULT_FORMAT", "org.apache.commons.math3.linear", "MatrixUtils", "public static final RealMatrixFormat DEFAULT_FORMAT = RealMatrixFormat.getInstance();" ], [ "OCTAVE_FORMAT", "org.apache.commons.math3.linear", "MatrixUtils", "public static final RealMatrixFormat OCTAVE_FORMAT = new RealMatrixFormat(\"[\", \"]\", \"\", \"\", \"; \", \", \");" ], [ "DEFAULT_ZERO_TOLERANCE", "org.apache.commons.math3.linear", "OpenMapRealVector", "public static final double DEFAULT_ZERO_TOLERANCE = 1.0e-12;" ], [ "BLOCK_SIZE", "org.apache.commons.math3.linear", "BlockFieldMatrix", "public static final int BLOCK_SIZE = 36;" ], [ "OPERATOR", "org.apache.commons.math3.linear", "ConjugateGradient", "public static final String OPERATOR = \"operator\";" ], [ "VECTOR", "org.apache.commons.math3.linear", "ConjugateGradient", "public static final String VECTOR = \"vector\";" ], [ "DEFAULT_RELATIVE_SYMMETRY_THRESHOLD", "org.apache.commons.math3.linear", "CholeskyDecomposition", "public static final double DEFAULT_RELATIVE_SYMMETRY_THRESHOLD = 1.0e-15;" ], [ "DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD", "org.apache.commons.math3.linear", "CholeskyDecomposition", "public static final double DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD = 1.0e-10;" ], [ "BLOCK_SIZE", "org.apache.commons.math3.linear", "BlockRealMatrix", "public static final int BLOCK_SIZE = 52;" ], [ "CBRT_MACH_PREC", "org.apache.commons.math3.linear", "SymmLQ", "static final double CBRT_MACH_PREC;" ], [ "MACH_PREC", "org.apache.commons.math3.linear", "SymmLQ", "static final double MACH_PREC;" ], [ "CBRT_MACH_PREC", "org.apache.commons.math3.linear", "State", "static final double CBRT_MACH_PREC;" ], [ "MACH_PREC", "org.apache.commons.math3.linear", "State", "static final double MACH_PREC;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "CauchyDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "SOLVER_DEFAULT_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "AbstractRealDistribution", "public static final double SOLVER_DEFAULT_ABSOLUTE_ACCURACY = 1e-6;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "TDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "ChiSquaredDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "BetaDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "NormalDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "UniformRealDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "WeibullDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "NakagamiDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "ExponentialDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "LogNormalDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "ParetoDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "FDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_MAX_ITERATIONS", "org.apache.commons.math3.distribution", "PoissonDistribution", "public static final int DEFAULT_MAX_ITERATIONS = 10000000;" ], [ "DEFAULT_EPSILON", "org.apache.commons.math3.distribution", "PoissonDistribution", "public static final double DEFAULT_EPSILON = 1e-12;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "GammaDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_ULPS", "org.apache.commons.math3.optim.linear", "SimplexSolver", "static final int DEFAULT_ULPS = 10;" ], [ "DEFAULT_CUT_OFF", "org.apache.commons.math3.optim.linear", "SimplexSolver", "static final double DEFAULT_CUT_OFF = 1e-10;" ], [ "MINIMUM_PROBLEM_DIMENSION", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv", "BOBYQAOptimizer", "public static final int MINIMUM_PROBLEM_DIMENSION = 2;" ], [ "DEFAULT_INITIAL_RADIUS", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv", "BOBYQAOptimizer", "public static final double DEFAULT_INITIAL_RADIUS = 10.0;" ], [ "DEFAULT_STOPPING_RADIUS", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv", "BOBYQAOptimizer", "public static final double DEFAULT_STOPPING_RADIUS = 1E-8;" ], [ "GAMMA", "org.apache.commons.math3.special", "Gamma", "public static final double GAMMA = 0.577215664901532860606512090082;" ], [ "LANCZOS_G", "org.apache.commons.math3.special", "Gamma", "public static final double LANCZOS_G = 607.0 / 128.0;" ], [ "DEFAULT_NAN_STRATEGY", "org.apache.commons.math3.stat.ranking", "NaturalRanking", "public static final NaNStrategy DEFAULT_NAN_STRATEGY = NaNStrategy.FAILED;" ], [ "DEFAULT_TIES_STRATEGY", "org.apache.commons.math3.stat.ranking", "NaturalRanking", "public static final TiesStrategy DEFAULT_TIES_STRATEGY = TiesStrategy.AVERAGE;" ], [ "MAXIMUM_PARTIAL_SUM_COUNT", "org.apache.commons.math3.stat.inference", "KolmogorovSmirnovTest", "protected static final int MAXIMUM_PARTIAL_SUM_COUNT = 100000;" ], [ "KS_SUM_CAUCHY_CRITERION", "org.apache.commons.math3.stat.inference", "KolmogorovSmirnovTest", "protected static final double KS_SUM_CAUCHY_CRITERION = 1E-20;" ], [ "PG_SUM_RELATIVE_ERROR", "org.apache.commons.math3.stat.inference", "KolmogorovSmirnovTest", "protected static final double PG_SUM_RELATIVE_ERROR = 1.0e-10;" ], [ "SMALL_SAMPLE_PRODUCT", "org.apache.commons.math3.stat.inference", "KolmogorovSmirnovTest", "protected static final int SMALL_SAMPLE_PRODUCT = 200;" ], [ "LARGE_SAMPLE_PRODUCT", "org.apache.commons.math3.stat.inference", "KolmogorovSmirnovTest", "protected static final int LARGE_SAMPLE_PRODUCT = 10000;" ], [ "MONTE_CARLO_ITERATIONS", "org.apache.commons.math3.stat.inference", "KolmogorovSmirnovTest", "protected static final int MONTE_CARLO_ITERATIONS = 1000000;" ], [ "INFINITE_WINDOW", "org.apache.commons.math3.stat.descriptive", "DescriptiveStatistics", "public static final int INFINITE_WINDOW = -1;" ], [ "UPSIDE_VARIANCE", "org.apache.commons.math3.stat.descriptive.moment", "SemiVariance", "public static final Direction UPSIDE_VARIANCE = Direction.UPSIDE;" ], [ "DOWNSIDE_VARIANCE", "org.apache.commons.math3.stat.descriptive.moment", "SemiVariance", "public static final Direction DOWNSIDE_VARIANCE = Direction.DOWNSIDE;" ], [ "COMPARATOR", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "static final Comparator<PairNeuronDouble> COMPARATOR = new Comparator<PairNeuronDouble>() {\n\n    /**\n     * {@inheritDoc}\n     */\n    public int compare(PairNeuronDouble o1, PairNeuronDouble o2) {\n        return Double.compare(o1.value, o2.value);\n    }\n};" ], [ "COMPARATOR", "org.apache.commons.math3.ml.neuralnet", "PairNeuronDouble", "static final Comparator<PairNeuronDouble> COMPARATOR = new Comparator<PairNeuronDouble>() {\n\n    /**\n     * {@inheritDoc}\n     */\n    public int compare(PairNeuronDouble o1, PairNeuronDouble o2) {\n        return Double.compare(o1.value, o2.value);\n    }\n};" ], [ "RADIX", "org.apache.commons.math3.dfp", "Dfp", "public static final int RADIX = 10000;" ], [ "MIN_EXP", "org.apache.commons.math3.dfp", "Dfp", "public static final int MIN_EXP = -32767;" ], [ "MAX_EXP", "org.apache.commons.math3.dfp", "Dfp", "public static final int MAX_EXP = 32768;" ], [ "ERR_SCALE", "org.apache.commons.math3.dfp", "Dfp", "public static final int ERR_SCALE = 32760;" ], [ "FINITE", "org.apache.commons.math3.dfp", "Dfp", "public static final byte FINITE = 0;" ], [ "INFINITE", "org.apache.commons.math3.dfp", "Dfp", "public static final byte INFINITE = 1;" ], [ "SNAN", "org.apache.commons.math3.dfp", "Dfp", "public static final byte SNAN = 2;" ], [ "QNAN", "org.apache.commons.math3.dfp", "Dfp", "public static final byte QNAN = 3;" ], [ "FLAG_INVALID", "org.apache.commons.math3.dfp", "DfpField", "public static final int FLAG_INVALID = 1;" ], [ "FLAG_DIV_ZERO", "org.apache.commons.math3.dfp", "DfpField", "public static final int FLAG_DIV_ZERO = 2;" ], [ "FLAG_OVERFLOW", "org.apache.commons.math3.dfp", "DfpField", "public static final int FLAG_OVERFLOW = 4;" ], [ "FLAG_UNDERFLOW", "org.apache.commons.math3.dfp", "DfpField", "public static final int FLAG_UNDERFLOW = 8;" ], [ "FLAG_INEXACT", "org.apache.commons.math3.dfp", "DfpField", "public static final int FLAG_INEXACT = 16;" ], [ "DEFAULT_PREFIX", "org.apache.commons.math3.geometry", "VectorFormat", "public static final String DEFAULT_PREFIX = \"{\";" ], [ "DEFAULT_SUFFIX", "org.apache.commons.math3.geometry", "VectorFormat", "public static final String DEFAULT_SUFFIX = \"}\";" ], [ "DEFAULT_SEPARATOR", "org.apache.commons.math3.geometry", "VectorFormat", "public static final String DEFAULT_SEPARATOR = \"; \";" ], [ "XYZ", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder XYZ = new RotationOrder(\"XYZ\", Vector3D.PLUS_I, Vector3D.PLUS_J, Vector3D.PLUS_K);" ], [ "XZY", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder XZY = new RotationOrder(\"XZY\", Vector3D.PLUS_I, Vector3D.PLUS_K, Vector3D.PLUS_J);" ], [ "YXZ", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder YXZ = new RotationOrder(\"YXZ\", Vector3D.PLUS_J, Vector3D.PLUS_I, Vector3D.PLUS_K);" ], [ "YZX", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder YZX = new RotationOrder(\"YZX\", Vector3D.PLUS_J, Vector3D.PLUS_K, Vector3D.PLUS_I);" ], [ "ZXY", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder ZXY = new RotationOrder(\"ZXY\", Vector3D.PLUS_K, Vector3D.PLUS_I, Vector3D.PLUS_J);" ], [ "ZYX", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder ZYX = new RotationOrder(\"ZYX\", Vector3D.PLUS_K, Vector3D.PLUS_J, Vector3D.PLUS_I);" ], [ "XYX", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder XYX = new RotationOrder(\"XYX\", Vector3D.PLUS_I, Vector3D.PLUS_J, Vector3D.PLUS_I);" ], [ "XZX", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder XZX = new RotationOrder(\"XZX\", Vector3D.PLUS_I, Vector3D.PLUS_K, Vector3D.PLUS_I);" ], [ "YXY", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder YXY = new RotationOrder(\"YXY\", Vector3D.PLUS_J, Vector3D.PLUS_I, Vector3D.PLUS_J);" ], [ "YZY", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder YZY = new RotationOrder(\"YZY\", Vector3D.PLUS_J, Vector3D.PLUS_K, Vector3D.PLUS_J);" ], [ "ZXZ", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder ZXZ = new RotationOrder(\"ZXZ\", Vector3D.PLUS_K, Vector3D.PLUS_I, Vector3D.PLUS_K);" ], [ "ZYZ", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder ZYZ = new RotationOrder(\"ZYZ\", Vector3D.PLUS_K, Vector3D.PLUS_J, Vector3D.PLUS_K);" ], [ "IDENTITY", "org.apache.commons.math3.geometry.euclidean.threed", "Rotation", "public static final Rotation IDENTITY = new Rotation(1.0, 0.0, 0.0, 0.0, false);" ], [ "ZERO", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D ZERO = new Vector3D(0, 0, 0);" ], [ "PLUS_I", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D PLUS_I = new Vector3D(1, 0, 0);" ], [ "MINUS_I", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D MINUS_I = new Vector3D(-1, 0, 0);" ], [ "PLUS_J", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D PLUS_J = new Vector3D(0, 1, 0);" ], [ "MINUS_J", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D MINUS_J = new Vector3D(0, -1, 0);" ], [ "PLUS_K", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D PLUS_K = new Vector3D(0, 0, 1);" ], [ "MINUS_K", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D MINUS_K = new Vector3D(0, 0, -1);" ], [ "NaN", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D NaN = new Vector3D(Double.NaN, Double.NaN, Double.NaN);" ], [ "POSITIVE_INFINITY", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D POSITIVE_INFINITY = new Vector3D(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);" ], [ "NEGATIVE_INFINITY", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D NEGATIVE_INFINITY = new Vector3D(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);" ], [ "ZERO", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static final Vector1D ZERO = new Vector1D(0.0);" ], [ "ONE", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static final Vector1D ONE = new Vector1D(1.0);" ], [ "NaN", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static final Vector1D NaN = new Vector1D(Double.NaN);" ], [ "POSITIVE_INFINITY", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static final Vector1D POSITIVE_INFINITY = new Vector1D(Double.POSITIVE_INFINITY);" ], [ "NEGATIVE_INFINITY", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static final Vector1D NEGATIVE_INFINITY = new Vector1D(Double.NEGATIVE_INFINITY);" ], [ "ZERO", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static final Vector2D ZERO = new Vector2D(0, 0);" ], [ "NaN", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static final Vector2D NaN = new Vector2D(Double.NaN, Double.NaN);" ], [ "POSITIVE_INFINITY", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static final Vector2D POSITIVE_INFINITY = new Vector2D(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);" ], [ "NEGATIVE_INFINITY", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static final Vector2D NEGATIVE_INFINITY = new Vector2D(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);" ], [ "NaN", "org.apache.commons.math3.geometry.spherical.oned", "S1Point", "public static final S1Point NaN = new S1Point(Double.NaN, Vector2D.NaN);" ], [ "PLUS_I", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point PLUS_I = new S2Point(0, 0.5 * FastMath.PI, Vector3D.PLUS_I);" ], [ "PLUS_J", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point PLUS_J = new S2Point(0.5 * FastMath.PI, 0.5 * FastMath.PI, Vector3D.PLUS_J);" ], [ "PLUS_K", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point PLUS_K = new S2Point(0, 0, Vector3D.PLUS_K);" ], [ "MINUS_I", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point MINUS_I = new S2Point(FastMath.PI, 0.5 * FastMath.PI, Vector3D.MINUS_I);" ], [ "MINUS_J", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point MINUS_J = new S2Point(1.5 * FastMath.PI, 0.5 * FastMath.PI, Vector3D.MINUS_J);" ], [ "MINUS_K", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point MINUS_K = new S2Point(0, FastMath.PI, Vector3D.MINUS_K);" ], [ "NaN", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point NaN = new S2Point(Double.NaN, Double.NaN, Vector3D.NaN);" ], [ "DIGEST_MODE", "org.apache.commons.math3.random", "ValueServer", "public static final int DIGEST_MODE = 0;" ], [ "REPLAY_MODE", "org.apache.commons.math3.random", "ValueServer", "public static final int REPLAY_MODE = 1;" ], [ "UNIFORM_MODE", "org.apache.commons.math3.random", "ValueServer", "public static final int UNIFORM_MODE = 2;" ], [ "EXPONENTIAL_MODE", "org.apache.commons.math3.random", "ValueServer", "public static final int EXPONENTIAL_MODE = 3;" ], [ "GAUSSIAN_MODE", "org.apache.commons.math3.random", "ValueServer", "public static final int GAUSSIAN_MODE = 4;" ], [ "CONSTANT_MODE", "org.apache.commons.math3.random", "ValueServer", "public static final int CONSTANT_MODE = 5;" ], [ "DEFAULT_BIN_COUNT", "org.apache.commons.math3.random", "EmpiricalDistribution", "public static final int DEFAULT_BIN_COUNT = 1000;" ], [ "TWO", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction TWO = new Fraction(2, 1);" ], [ "ONE", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction ONE = new Fraction(1, 1);" ], [ "ZERO", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction ZERO = new Fraction(0, 1);" ], [ "FOUR_FIFTHS", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction FOUR_FIFTHS = new Fraction(4, 5);" ], [ "ONE_FIFTH", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction ONE_FIFTH = new Fraction(1, 5);" ], [ "ONE_HALF", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction ONE_HALF = new Fraction(1, 2);" ], [ "ONE_QUARTER", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction ONE_QUARTER = new Fraction(1, 4);" ], [ "ONE_THIRD", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction ONE_THIRD = new Fraction(1, 3);" ], [ "THREE_FIFTHS", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction THREE_FIFTHS = new Fraction(3, 5);" ], [ "THREE_QUARTERS", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction THREE_QUARTERS = new Fraction(3, 4);" ], [ "TWO_FIFTHS", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction TWO_FIFTHS = new Fraction(2, 5);" ], [ "TWO_QUARTERS", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction TWO_QUARTERS = new Fraction(2, 4);" ], [ "TWO_THIRDS", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction TWO_THIRDS = new Fraction(2, 3);" ], [ "MINUS_ONE", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction MINUS_ONE = new Fraction(-1, 1);" ], [ "TWO", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction TWO = new BigFraction(2);" ], [ "ONE", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction ONE = new BigFraction(1);" ], [ "ZERO", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction ZERO = new BigFraction(0);" ], [ "MINUS_ONE", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction MINUS_ONE = new BigFraction(-1);" ], [ "FOUR_FIFTHS", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction FOUR_FIFTHS = new BigFraction(4, 5);" ], [ "ONE_FIFTH", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction ONE_FIFTH = new BigFraction(1, 5);" ], [ "ONE_HALF", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction ONE_HALF = new BigFraction(1, 2);" ], [ "ONE_QUARTER", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction ONE_QUARTER = new BigFraction(1, 4);" ], [ "ONE_THIRD", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction ONE_THIRD = new BigFraction(1, 3);" ], [ "THREE_FIFTHS", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction THREE_FIFTHS = new BigFraction(3, 5);" ], [ "THREE_QUARTERS", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction THREE_QUARTERS = new BigFraction(3, 4);" ], [ "TWO_FIFTHS", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction TWO_FIFTHS = new BigFraction(2, 5);" ], [ "TWO_QUARTERS", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction TWO_QUARTERS = new BigFraction(2, 4);" ], [ "TWO_THIRDS", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction TWO_THIRDS = new BigFraction(2, 3);" ], [ "INTEGER_ZERO", "org.apache.commons.math3.exception", "MathIllegalNumberException", "protected static final Integer INTEGER_ZERO = Integer.valueOf(0);" ], [ "serialVersionUID", "org.apache.commons.math3.transform", "FastSineTransformer", "static final long serialVersionUID = 20120211L;" ], [ "serialVersionUID", "org.apache.commons.math3.transform", "FastFourierTransformer", "static final long serialVersionUID = 20120210L;" ], [ "serialVersionUID", "org.apache.commons.math3.transform", "FastCosineTransformer", "static final long serialVersionUID = 20120212L;" ], [ "serialVersionUID", "org.apache.commons.math3.transform", "FastHadamardTransformer", "static final long serialVersionUID = 20120211L;" ] ],
  "tokensMethodJavadocValues" : [ ],
  "tokensMethodArguments" : [ ],
  "tokensMethodVariablesNonPrivateNonStaticNonVoidMethods" : [ [ "scalb", "org.apache.commons.math3.dfp", "Dfp", "public Dfp scalb(final int n)" ], [ "copySign", "org.apache.commons.math3.dfp", "Dfp", "public Dfp copySign(final double s)" ], [ "multiply", "org.apache.commons.math3.dfp", "Dfp", "public Dfp multiply(final Dfp x)" ], [ "strictlyPositive", "org.apache.commons.math3.dfp", "Dfp", "public boolean strictlyPositive()" ], [ "multiply", "org.apache.commons.math3.dfp", "Dfp", "public Dfp multiply(final double a)" ], [ "divide", "org.apache.commons.math3", "RealFieldElement", "public abstract T divide(double arg0)" ], [ "round", "org.apache.commons.math3.dfp", "Dfp", "protected int round(int n)" ], [ "newInstance", "org.apache.commons.math3.dfp", "Dfp", "public Dfp newInstance(final double x)" ], [ "clone", "java.lang", "Object", "protected native Object clone() throws CloneNotSupportedException" ], [ "log", "org.apache.commons.math3.dfp", "Dfp", "public Dfp log()" ], [ "log1p", "org.apache.commons.math3", "RealFieldElement", "public abstract T log1p()" ], [ "linearCombination", "org.apache.commons.math3.dfp", "Dfp", "public Dfp linearCombination(final double a1, final Dfp b1, final double a2, final Dfp b2, final double a3, final Dfp b3, final double a4, final Dfp b4)" ], [ "sinh", "org.apache.commons.math3", "RealFieldElement", "public abstract T sinh()" ], [ "unequal", "org.apache.commons.math3.dfp", "Dfp", "public boolean unequal(final Dfp x)" ], [ "multiply", "org.apache.commons.math3", "FieldElement", "public abstract T multiply(int arg0)" ], [ "dfp2string", "org.apache.commons.math3.dfp", "Dfp", "protected String dfp2string()" ], [ "signum", "org.apache.commons.math3.dfp", "Dfp", "public Dfp signum()" ], [ "toDouble", "org.apache.commons.math3.dfp", "Dfp", "public double toDouble()" ], [ "log10K", "org.apache.commons.math3.dfp", "Dfp", "public int log10K()" ], [ "linearCombination", "org.apache.commons.math3.dfp", "Dfp", "public Dfp linearCombination(final Dfp[] a, final Dfp[] b) throws DimensionMismatchException" ], [ "remainder", "org.apache.commons.math3", "RealFieldElement", "public abstract T remainder(double arg0)" ], [ "isInfinite", "org.apache.commons.math3.dfp", "Dfp", "public boolean isInfinite()" ], [ "linearCombination", "org.apache.commons.math3", "RealFieldElement", "public abstract T linearCombination(double arg0, T arg1, double arg2, T arg3, double arg4, T arg5, double arg6, T arg7)" ], [ "rint", "org.apache.commons.math3", "RealFieldElement", "public abstract T rint()" ], [ "linearCombination", "org.apache.commons.math3.dfp", "Dfp", "public Dfp linearCombination(final Dfp a1, final Dfp b1, final Dfp a2, final Dfp b2, final Dfp a3, final Dfp b3)" ], [ "signum", "org.apache.commons.math3", "RealFieldElement", "public abstract T signum()" ], [ "log1p", "org.apache.commons.math3.dfp", "Dfp", "public Dfp log1p()" ], [ "atan2", "org.apache.commons.math3", "RealFieldElement", "public abstract T atan2(T arg0) throws DimensionMismatchException" ], [ "ceil", "org.apache.commons.math3", "RealFieldElement", "public abstract T ceil()" ], [ "acosh", "org.apache.commons.math3", "RealFieldElement", "public abstract T acosh()" ], [ "linearCombination", "org.apache.commons.math3.dfp", "Dfp", "public Dfp linearCombination(final double a1, final Dfp b1, final double a2, final Dfp b2)" ], [ "acosh", "org.apache.commons.math3.dfp", "Dfp", "public Dfp acosh()" ], [ "toSplitDouble", "org.apache.commons.math3.dfp", "Dfp", "public double[] toSplitDouble()" ], [ "asinh", "org.apache.commons.math3", "RealFieldElement", "public abstract T asinh()" ], [ "expm1", "org.apache.commons.math3.dfp", "Dfp", "public Dfp expm1()" ], [ "sqrt", "org.apache.commons.math3", "RealFieldElement", "public abstract T sqrt()" ], [ "getClass", "java.lang", "Object", "public final native Class<? extends Object> getClass()" ], [ "pow", "org.apache.commons.math3.dfp", "Dfp", "public Dfp pow(final int n)" ], [ "negativeOrNull", "org.apache.commons.math3.dfp", "Dfp", "public boolean negativeOrNull()" ], [ "linearCombination", "org.apache.commons.math3", "RealFieldElement", "public abstract T linearCombination(T[] arg0, T[] arg1) throws DimensionMismatchException" ], [ "copySign", "org.apache.commons.math3", "RealFieldElement", "public abstract T copySign(T arg0)" ], [ "trap", "org.apache.commons.math3.dfp", "Dfp", "protected Dfp trap(int type, String what, Dfp oper, Dfp def, Dfp result)" ], [ "tan", "org.apache.commons.math3", "RealFieldElement", "public abstract T tan()" ], [ "subtract", "org.apache.commons.math3", "FieldElement", "public abstract T subtract(T arg0) throws NullArgumentException" ], [ "equals", "org.apache.commons.math3.dfp", "Dfp", "public boolean equals(final Object other)" ], [ "newInstance", "org.apache.commons.math3.dfp", "Dfp", "public Dfp newInstance(final long x)" ], [ "copySign", "org.apache.commons.math3.dfp", "Dfp", "public Dfp copySign(final Dfp s)" ], [ "round", "org.apache.commons.math3.dfp", "Dfp", "public long round()" ], [ "multiply", "org.apache.commons.math3.dfp", "Dfp", "public Dfp multiply(final int x)" ], [ "newInstance", "org.apache.commons.math3.dfp", "Dfp", "public Dfp newInstance(final byte sig, final byte code)" ], [ "pow", "org.apache.commons.math3", "RealFieldElement", "public abstract T pow(int arg0)" ], [ "dotrap", "org.apache.commons.math3.dfp", "Dfp", "public Dfp dotrap(int type, String what, Dfp oper, Dfp result)" ], [ "positiveOrNull", "org.apache.commons.math3.dfp", "Dfp", "public boolean positiveOrNull()" ], [ "copySign", "org.apache.commons.math3", "RealFieldElement", "public abstract T copySign(double arg0)" ], [ "toString", "org.apache.commons.math3.dfp", "Dfp", "public String toString()" ], [ "divide", "org.apache.commons.math3", "FieldElement", "public abstract T divide(T arg0) throws NullArgumentException, MathArithmeticException" ], [ "add", "org.apache.commons.math3", "FieldElement", "public abstract T add(T arg0) throws NullArgumentException" ], [ "log10", "org.apache.commons.math3.dfp", "Dfp", "public int log10()" ], [ "linearCombination", "org.apache.commons.math3", "RealFieldElement", "public abstract T linearCombination(double[] arg0, T[] arg1) throws DimensionMismatchException" ], [ "newInstance", "org.apache.commons.math3.dfp", "Dfp", "public Dfp newInstance(final String s)" ], [ "pow", "org.apache.commons.math3.dfp", "Dfp", "public Dfp pow(final double p)" ], [ "ceil", "org.apache.commons.math3.dfp", "Dfp", "public Dfp ceil()" ], [ "subtract", "org.apache.commons.math3.dfp", "Dfp", "public Dfp subtract(final double a)" ], [ "linearCombination", "org.apache.commons.math3", "RealFieldElement", "public abstract T linearCombination(T arg0, T arg1, T arg2, T arg3, T arg4, T arg5)" ], [ "newInstance", "org.apache.commons.math3.dfp", "Dfp", "public Dfp newInstance()" ], [ "negate", "org.apache.commons.math3", "FieldElement", "public abstract T negate()" ], [ "getField", "org.apache.commons.math3", "FieldElement", "public abstract Field<T> getField()" ], [ "scalb", "org.apache.commons.math3", "RealFieldElement", "public abstract T scalb(int arg0)" ], [ "exp", "org.apache.commons.math3.dfp", "Dfp", "public Dfp exp()" ], [ "dfp2sci", "org.apache.commons.math3.dfp", "Dfp", "protected String dfp2sci()" ], [ "pow", "org.apache.commons.math3", "RealFieldElement", "public abstract T pow(double arg0)" ], [ "rootN", "org.apache.commons.math3.dfp", "Dfp", "public Dfp rootN(final int n)" ], [ "getTwo", "org.apache.commons.math3.dfp", "Dfp", "public Dfp getTwo()" ], [ "cos", "org.apache.commons.math3", "RealFieldElement", "public abstract T cos()" ], [ "newInstance", "org.apache.commons.math3.dfp", "Dfp", "public Dfp newInstance(final byte x)" ], [ "cbrt", "org.apache.commons.math3", "RealFieldElement", "public abstract T cbrt()" ], [ "align", "org.apache.commons.math3.dfp", "Dfp", "protected int align(int e)" ], [ "multiply", "org.apache.commons.math3", "FieldElement", "public abstract T multiply(T arg0) throws NullArgumentException" ], [ "divide", "org.apache.commons.math3.dfp", "Dfp", "public Dfp divide(final double a)" ], [ "add", "org.apache.commons.math3.dfp", "Dfp", "public Dfp add(final Dfp x)" ], [ "linearCombination", "org.apache.commons.math3", "RealFieldElement", "public abstract T linearCombination(double arg0, T arg1, double arg2, T arg3, double arg4, T arg5)" ], [ "tan", "org.apache.commons.math3.dfp", "Dfp", "public Dfp tan()" ], [ "floor", "org.apache.commons.math3", "RealFieldElement", "public abstract T floor()" ], [ "tanh", "org.apache.commons.math3", "RealFieldElement", "public abstract T tanh()" ], [ "subtract", "org.apache.commons.math3", "RealFieldElement", "public abstract T subtract(double arg0)" ], [ "classify", "org.apache.commons.math3.dfp", "Dfp", "public int classify()" ], [ "acos", "org.apache.commons.math3.dfp", "Dfp", "public Dfp acos()" ], [ "atanh", "org.apache.commons.math3.dfp", "Dfp", "public Dfp atanh()" ], [ "add", "org.apache.commons.math3.dfp", "Dfp", "public Dfp add(final double a)" ], [ "floor", "org.apache.commons.math3.dfp", "Dfp", "public Dfp floor()" ], [ "reciprocal", "org.apache.commons.math3", "RealFieldElement", "public abstract T reciprocal()" ], [ "sqrt", "org.apache.commons.math3.dfp", "Dfp", "public Dfp sqrt()" ], [ "tanh", "org.apache.commons.math3.dfp", "Dfp", "public Dfp tanh()" ], [ "atan2", "org.apache.commons.math3.dfp", "Dfp", "public Dfp atan2(final Dfp x) throws DimensionMismatchException" ], [ "getOne", "org.apache.commons.math3.dfp", "Dfp", "public Dfp getOne()" ], [ "abs", "org.apache.commons.math3", "RealFieldElement", "public abstract T abs()" ], [ "rootN", "org.apache.commons.math3", "RealFieldElement", "public abstract T rootN(int arg0)" ], [ "asin", "org.apache.commons.math3.dfp", "Dfp", "public Dfp asin()" ], [ "linearCombination", "org.apache.commons.math3", "RealFieldElement", "public abstract T linearCombination(T arg0, T arg1, T arg2, T arg3)" ], [ "add", "org.apache.commons.math3", "RealFieldElement", "public abstract T add(double arg0)" ], [ "linearCombination", "org.apache.commons.math3.dfp", "Dfp", "public Dfp linearCombination(final Dfp a1, final Dfp b1, final Dfp a2, final Dfp b2, final Dfp a3, final Dfp b3, final Dfp a4, final Dfp b4)" ], [ "nextAfter", "org.apache.commons.math3.dfp", "Dfp", "public Dfp nextAfter(final Dfp x)" ], [ "sin", "org.apache.commons.math3", "RealFieldElement", "public abstract T sin()" ], [ "trunc", "org.apache.commons.math3.dfp", "Dfp", "protected Dfp trunc(final DfpField.RoundingMode rmode)" ], [ "linearCombination", "org.apache.commons.math3", "RealFieldElement", "public abstract T linearCombination(T arg0, T arg1, T arg2, T arg3, T arg4, T arg5, T arg6, T arg7)" ], [ "divide", "org.apache.commons.math3.dfp", "Dfp", "public Dfp divide(int divisor)" ], [ "hashCode", "org.apache.commons.math3.dfp", "Dfp", "public int hashCode()" ], [ "reciprocal", "org.apache.commons.math3.dfp", "Dfp", "public Dfp reciprocal()" ], [ "getRadixDigits", "org.apache.commons.math3.dfp", "Dfp", "public int getRadixDigits()" ], [ "pow", "org.apache.commons.math3.dfp", "Dfp", "public Dfp pow(final Dfp e)" ], [ "atan", "org.apache.commons.math3", "RealFieldElement", "public abstract T atan()" ], [ "expm1", "org.apache.commons.math3", "RealFieldElement", "public abstract T expm1()" ], [ "sinh", "org.apache.commons.math3.dfp", "Dfp", "public Dfp sinh()" ], [ "abs", "org.apache.commons.math3.dfp", "Dfp", "public Dfp abs()" ], [ "isZero", "org.apache.commons.math3.dfp", "Dfp", "public boolean isZero()" ], [ "linearCombination", "org.apache.commons.math3.dfp", "Dfp", "public Dfp linearCombination(final Dfp a1, final Dfp b1, final Dfp a2, final Dfp b2)" ], [ "atanh", "org.apache.commons.math3", "RealFieldElement", "public abstract T atanh()" ], [ "greaterThan", "org.apache.commons.math3.dfp", "Dfp", "public boolean greaterThan(final Dfp x)" ], [ "subtract", "org.apache.commons.math3.dfp", "Dfp", "public Dfp subtract(final Dfp x)" ], [ "strictlyNegative", "org.apache.commons.math3.dfp", "Dfp", "public boolean strictlyNegative()" ], [ "power10", "org.apache.commons.math3.dfp", "Dfp", "public Dfp power10(final int e)" ], [ "acos", "org.apache.commons.math3", "RealFieldElement", "public abstract T acos()" ], [ "lessThan", "org.apache.commons.math3.dfp", "Dfp", "public boolean lessThan(final Dfp x)" ], [ "divide", "org.apache.commons.math3.dfp", "Dfp", "public Dfp divide(Dfp divisor)" ], [ "getReal", "org.apache.commons.math3.dfp", "Dfp", "public double getReal()" ], [ "multiply", "org.apache.commons.math3", "RealFieldElement", "public abstract T multiply(double arg0)" ], [ "newInstance", "org.apache.commons.math3.dfp", "Dfp", "public Dfp newInstance(final int x)" ], [ "rint", "org.apache.commons.math3.dfp", "Dfp", "public Dfp rint()" ], [ "intLog10", "org.apache.commons.math3.dfp", "Dfp", "public int intLog10()" ], [ "pow", "org.apache.commons.math3", "RealFieldElement", "public abstract T pow(T arg0) throws DimensionMismatchException" ], [ "cbrt", "org.apache.commons.math3.dfp", "Dfp", "public Dfp cbrt()" ], [ "asinh", "org.apache.commons.math3.dfp", "Dfp", "public Dfp asinh()" ], [ "intValue", "org.apache.commons.math3.dfp", "Dfp", "public int intValue()" ], [ "remainder", "org.apache.commons.math3", "RealFieldElement", "public abstract T remainder(T arg0) throws DimensionMismatchException" ], [ "remainder", "org.apache.commons.math3.dfp", "Dfp", "public Dfp remainder(final double a)" ], [ "cos", "org.apache.commons.math3.dfp", "Dfp", "public Dfp cos()" ], [ "linearCombination", "org.apache.commons.math3.dfp", "Dfp", "public Dfp linearCombination(final double[] a, final Dfp[] b) throws DimensionMismatchException" ], [ "remainder", "org.apache.commons.math3.dfp", "Dfp", "public Dfp remainder(final Dfp d)" ], [ "sin", "org.apache.commons.math3.dfp", "Dfp", "public Dfp sin()" ], [ "hypot", "org.apache.commons.math3.dfp", "Dfp", "public Dfp hypot(final Dfp y)" ], [ "linearCombination", "org.apache.commons.math3.dfp", "Dfp", "public Dfp linearCombination(final double a1, final Dfp b1, final double a2, final Dfp b2, final double a3, final Dfp b3)" ], [ "power10K", "org.apache.commons.math3.dfp", "Dfp", "public Dfp power10K(final int e)" ], [ "linearCombination", "org.apache.commons.math3", "RealFieldElement", "public abstract T linearCombination(double arg0, T arg1, double arg2, T arg3)" ], [ "atan", "org.apache.commons.math3.dfp", "Dfp", "public Dfp atan()" ], [ "cosh", "org.apache.commons.math3.dfp", "Dfp", "public Dfp cosh()" ], [ "newInstance", "org.apache.commons.math3.dfp", "Dfp", "public Dfp newInstance(final Dfp d)" ], [ "exp", "org.apache.commons.math3", "RealFieldElement", "public abstract T exp()" ], [ "getField", "org.apache.commons.math3.dfp", "Dfp", "public DfpField getField()" ], [ "complement", "org.apache.commons.math3.dfp", "Dfp", "protected int complement(int extra)" ], [ "negate", "org.apache.commons.math3.dfp", "Dfp", "public Dfp negate()" ], [ "hypot", "org.apache.commons.math3", "RealFieldElement", "public abstract T hypot(T arg0) throws DimensionMismatchException" ], [ "isNaN", "org.apache.commons.math3.dfp", "Dfp", "public boolean isNaN()" ], [ "log", "org.apache.commons.math3", "RealFieldElement", "public abstract T log()" ], [ "cosh", "org.apache.commons.math3", "RealFieldElement", "public abstract T cosh()" ], [ "getZero", "org.apache.commons.math3.dfp", "Dfp", "public Dfp getZero()" ], [ "asin", "org.apache.commons.math3", "RealFieldElement", "public abstract T asin()" ], [ "toString", "java.lang", "Object", "public String toString()" ], [ "hashCode", "java.lang", "Object", "public native int hashCode()" ], [ "equals", "java.lang", "Object", "public boolean equals(Object arg0)" ] ],
  "tokensMethodVariablesNonPrivateNonStaticAttributes" : [ [ "mant", "org.apache.commons.math3.dfp", "Dfp", "protected int[] mant;" ], [ "sign", "org.apache.commons.math3.dfp", "Dfp", "protected byte sign;" ], [ "exp", "org.apache.commons.math3.dfp", "Dfp", "protected int exp;" ], [ "nans", "org.apache.commons.math3.dfp", "Dfp", "protected byte nans;" ] ],
  "tokensOracleVariablesNonPrivateNonStaticNonVoidMethods" : [ ],
  "tokensOracleVariablesNonPrivateNonStaticAttributes" : [ ]
}, {
  "id" : 22831,
  "oracle" : ";",
  "oracleType" : "PRE",
  "projectName" : "commons-math3-3.6.1",
  "packageName" : "org.apache.commons.math3.dfp",
  "className" : "Dfp",
  "javadocTag" : "@param field field to which this instance belongs",
  "methodJavadoc" : "    /** Create an instance from a byte value.\n     * @param field field to which this instance belongs\n     * @param x value to convert to an instance\n     */",
  "methodSourceCode" : "protected Dfp(final DfpField field, byte x){\n    this(field, (long) x);\n}",
  "classJavadoc" : "/**\n *  Decimal floating point library for Java\n *\n *  <p>Another floating point class.  This one is built using radix 10000\n *  which is 10<sup>4</sup>, so its almost decimal.</p>\n *\n *  <p>The design goals here are:\n *  <ol>\n *    <li>Decimal math, or close to it</li>\n *    <li>Settable precision (but no mix between numbers using different settings)</li>\n *    <li>Portability.  Code should be kept as portable as possible.</li>\n *    <li>Performance</li>\n *    <li>Accuracy  - Results should always be +/- 1 ULP for basic\n *         algebraic operation</li>\n *    <li>Comply with IEEE 854-1987 as much as possible.\n *         (See IEEE 854-1987 notes below)</li>\n *  </ol></p>\n *\n *  <p>Trade offs:\n *  <ol>\n *    <li>Memory foot print.  I'm using more memory than necessary to\n *         represent numbers to get better performance.</li>\n *    <li>Digits are bigger, so rounding is a greater loss.  So, if you\n *         really need 12 decimal digits, better use 4 base 10000 digits\n *         there can be one partially filled.</li>\n *  </ol></p>\n *\n *  <p>Numbers are represented  in the following form:\n *  <pre>\n *  n  =  sign &times; mant &times; (radix)<sup>exp</sup>;</p>\n *  </pre>\n *  where sign is &plusmn;1, mantissa represents a fractional number between\n *  zero and one.  mant[0] is the least significant digit.\n *  exp is in the range of -32767 to 32768</p>\n *\n *  <p>IEEE 854-1987  Notes and differences</p>\n *\n *  <p>IEEE 854 requires the radix to be either 2 or 10.  The radix here is\n *  10000, so that requirement is not met, but  it is possible that a\n *  subclassed can be made to make it behave as a radix 10\n *  number.  It is my opinion that if it looks and behaves as a radix\n *  10 number then it is one and that requirement would be met.</p>\n *\n *  <p>The radix of 10000 was chosen because it should be faster to operate\n *  on 4 decimal digits at once instead of one at a time.  Radix 10 behavior\n *  can be realized by adding an additional rounding step to ensure that\n *  the number of decimal digits represented is constant.</p>\n *\n *  <p>The IEEE standard specifically leaves out internal data encoding,\n *  so it is reasonable to conclude that such a subclass of this radix\n *  10000 system is merely an encoding of a radix 10 system.</p>\n *\n *  <p>IEEE 854 also specifies the existence of \"sub-normal\" numbers.  This\n *  class does not contain any such entities.  The most significant radix\n *  10000 digit is always non-zero.  Instead, we support \"gradual underflow\"\n *  by raising the underflow flag for numbers less with exponent less than\n *  expMin, but don't flush to zero until the exponent reaches MIN_EXP-digits.\n *  Thus the smallest number we can represent would be:\n *  1E(-(MIN_EXP-digits-1)*4),  eg, for digits=5, MIN_EXP=-32767, that would\n *  be 1e-131092.</p>\n *\n *  <p>IEEE 854 defines that the implied radix point lies just to the right\n *  of the most significant digit and to the left of the remaining digits.\n *  This implementation puts the implied radix point to the left of all\n *  digits including the most significant one.  The most significant digit\n *  here is the one just to the right of the radix point.  This is a fine\n *  detail and is really only a matter of definition.  Any side effects of\n *  this can be rendered invisible by a subclass.</p>\n * @see DfpField\n * @since 2.2\n */",
  "classSourceCode" : "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.commons.math3.dfp;\n\nimport java.util.Arrays;\n\nimport org.apache.commons.math3.RealFieldElement;\nimport org.apache.commons.math3.exception.DimensionMismatchException;\nimport org.apache.commons.math3.util.FastMath;\n\n/**\n *  Decimal floating point library for Java\n *\n *  <p>Another floating point class.  This one is built using radix 10000\n *  which is 10<sup>4</sup>, so its almost decimal.</p>\n *\n *  <p>The design goals here are:\n *  <ol>\n *    <li>Decimal math, or close to it</li>\n *    <li>Settable precision (but no mix between numbers using different settings)</li>\n *    <li>Portability.  Code should be kept as portable as possible.</li>\n *    <li>Performance</li>\n *    <li>Accuracy  - Results should always be +/- 1 ULP for basic\n *         algebraic operation</li>\n *    <li>Comply with IEEE 854-1987 as much as possible.\n *         (See IEEE 854-1987 notes below)</li>\n *  </ol></p>\n *\n *  <p>Trade offs:\n *  <ol>\n *    <li>Memory foot print.  I'm using more memory than necessary to\n *         represent numbers to get better performance.</li>\n *    <li>Digits are bigger, so rounding is a greater loss.  So, if you\n *         really need 12 decimal digits, better use 4 base 10000 digits\n *         there can be one partially filled.</li>\n *  </ol></p>\n *\n *  <p>Numbers are represented  in the following form:\n *  <pre>\n *  n  =  sign &times; mant &times; (radix)<sup>exp</sup>;</p>\n *  </pre>\n *  where sign is &plusmn;1, mantissa represents a fractional number between\n *  zero and one.  mant[0] is the least significant digit.\n *  exp is in the range of -32767 to 32768</p>\n *\n *  <p>IEEE 854-1987  Notes and differences</p>\n *\n *  <p>IEEE 854 requires the radix to be either 2 or 10.  The radix here is\n *  10000, so that requirement is not met, but  it is possible that a\n *  subclassed can be made to make it behave as a radix 10\n *  number.  It is my opinion that if it looks and behaves as a radix\n *  10 number then it is one and that requirement would be met.</p>\n *\n *  <p>The radix of 10000 was chosen because it should be faster to operate\n *  on 4 decimal digits at once instead of one at a time.  Radix 10 behavior\n *  can be realized by adding an additional rounding step to ensure that\n *  the number of decimal digits represented is constant.</p>\n *\n *  <p>The IEEE standard specifically leaves out internal data encoding,\n *  so it is reasonable to conclude that such a subclass of this radix\n *  10000 system is merely an encoding of a radix 10 system.</p>\n *\n *  <p>IEEE 854 also specifies the existence of \"sub-normal\" numbers.  This\n *  class does not contain any such entities.  The most significant radix\n *  10000 digit is always non-zero.  Instead, we support \"gradual underflow\"\n *  by raising the underflow flag for numbers less with exponent less than\n *  expMin, but don't flush to zero until the exponent reaches MIN_EXP-digits.\n *  Thus the smallest number we can represent would be:\n *  1E(-(MIN_EXP-digits-1)*4),  eg, for digits=5, MIN_EXP=-32767, that would\n *  be 1e-131092.</p>\n *\n *  <p>IEEE 854 defines that the implied radix point lies just to the right\n *  of the most significant digit and to the left of the remaining digits.\n *  This implementation puts the implied radix point to the left of all\n *  digits including the most significant one.  The most significant digit\n *  here is the one just to the right of the radix point.  This is a fine\n *  detail and is really only a matter of definition.  Any side effects of\n *  this can be rendered invisible by a subclass.</p>\n * @see DfpField\n * @since 2.2\n */\npublic class Dfp implements RealFieldElement<Dfp> {\n\n    /** The radix, or base of this system.  Set to 10000 */\n    public static final int RADIX = 10000;\n\n    /** The minimum exponent before underflow is signaled.  Flush to zero\n     *  occurs at minExp-DIGITS */\n    public static final int MIN_EXP = -32767;\n\n    /** The maximum exponent before overflow is signaled and results flushed\n     *  to infinity */\n    public static final int MAX_EXP =  32768;\n\n    /** The amount under/overflows are scaled by before going to trap handler */\n    public static final int ERR_SCALE = 32760;\n\n    /** Indicator value for normal finite numbers. */\n    public static final byte FINITE = 0;\n\n    /** Indicator value for Infinity. */\n    public static final byte INFINITE = 1;\n\n    /** Indicator value for signaling NaN. */\n    public static final byte SNAN = 2;\n\n    /** Indicator value for quiet NaN. */\n    public static final byte QNAN = 3;\n\n    /** String for NaN representation. */\n    private static final String NAN_STRING = \"NaN\";\n\n    /** String for positive infinity representation. */\n    private static final String POS_INFINITY_STRING = \"Infinity\";\n\n    /** String for negative infinity representation. */\n    private static final String NEG_INFINITY_STRING = \"-Infinity\";\n\n    /** Name for traps triggered by addition. */\n    private static final String ADD_TRAP = \"add\";\n\n    /** Name for traps triggered by multiplication. */\n    private static final String MULTIPLY_TRAP = \"multiply\";\n\n    /** Name for traps triggered by division. */\n    private static final String DIVIDE_TRAP = \"divide\";\n\n    /** Name for traps triggered by square root. */\n    private static final String SQRT_TRAP = \"sqrt\";\n\n    /** Name for traps triggered by alignment. */\n    private static final String ALIGN_TRAP = \"align\";\n\n    /** Name for traps triggered by truncation. */\n    private static final String TRUNC_TRAP = \"trunc\";\n\n    /** Name for traps triggered by nextAfter. */\n    private static final String NEXT_AFTER_TRAP = \"nextAfter\";\n\n    /** Name for traps triggered by lessThan. */\n    private static final String LESS_THAN_TRAP = \"lessThan\";\n\n    /** Name for traps triggered by greaterThan. */\n    private static final String GREATER_THAN_TRAP = \"greaterThan\";\n\n    /** Name for traps triggered by newInstance. */\n    private static final String NEW_INSTANCE_TRAP = \"newInstance\";\n\n    /** Mantissa. */\n    protected int[] mant;\n\n    /** Sign bit: 1 for positive, -1 for negative. */\n    protected byte sign;\n\n    /** Exponent. */\n    protected int exp;\n\n    /** Indicator for non-finite / non-number values. */\n    protected byte nans;\n\n    /** Factory building similar Dfp's. */\n    private final DfpField field;\n\n    /** Makes an instance with a value of zero.\n     * @param field field to which this instance belongs\n     */\n    protected Dfp(final DfpField field) {\n        mant = new int[field.getRadixDigits()];\n        sign = 1;\n        exp = 0;\n        nans = FINITE;\n        this.field = field;\n    }\n\n    /** Create an instance from a byte value.\n     * @param field field to which this instance belongs\n     * @param x value to convert to an instance\n     */\n    protected Dfp(final DfpField field, byte x) {\n        this(field, (long) x);\n    }\n\n    /** Create an instance from an int value.\n     * @param field field to which this instance belongs\n     * @param x value to convert to an instance\n     */\n    protected Dfp(final DfpField field, int x) {\n        this(field, (long) x);\n    }\n\n    /** Create an instance from a long value.\n     * @param field field to which this instance belongs\n     * @param x value to convert to an instance\n     */\n    protected Dfp(final DfpField field, long x) {\n\n        // initialize as if 0\n        mant = new int[field.getRadixDigits()];\n        nans = FINITE;\n        this.field = field;\n\n        boolean isLongMin = false;\n        if (x == Long.MIN_VALUE) {\n            // special case for Long.MIN_VALUE (-9223372036854775808)\n            // we must shift it before taking its absolute value\n            isLongMin = true;\n            ++x;\n        }\n\n        // set the sign\n        if (x < 0) {\n            sign = -1;\n            x = -x;\n        } else {\n            sign = 1;\n        }\n\n        exp = 0;\n        while (x != 0) {\n            System.arraycopy(mant, mant.length - exp, mant, mant.length - 1 - exp, exp);\n            mant[mant.length - 1] = (int) (x % RADIX);\n            x /= RADIX;\n            exp++;\n        }\n\n        if (isLongMin) {\n            // remove the shift added for Long.MIN_VALUE\n            // we know in this case that fixing the last digit is sufficient\n            for (int i = 0; i < mant.length - 1; i++) {\n                if (mant[i] != 0) {\n                    mant[i]++;\n                    break;\n                }\n            }\n        }\n    }\n\n    /** Create an instance from a double value.\n     * @param field field to which this instance belongs\n     * @param x value to convert to an instance\n     */\n    protected Dfp(final DfpField field, double x) {\n\n        // initialize as if 0\n        mant = new int[field.getRadixDigits()];\n        sign = 1;\n        exp = 0;\n        nans = FINITE;\n        this.field = field;\n\n        long bits = Double.doubleToLongBits(x);\n        long mantissa = bits & 0x000fffffffffffffL;\n        int exponent = (int) ((bits & 0x7ff0000000000000L) >> 52) - 1023;\n\n        if (exponent == -1023) {\n            // Zero or sub-normal\n            if (x == 0) {\n                // make sure 0 has the right sign\n                if ((bits & 0x8000000000000000L) != 0) {\n                    sign = -1;\n                }\n                return;\n            }\n\n            exponent++;\n\n            // Normalize the subnormal number\n            while ( (mantissa & 0x0010000000000000L) == 0) {\n                exponent--;\n                mantissa <<= 1;\n            }\n            mantissa &= 0x000fffffffffffffL;\n        }\n\n        if (exponent == 1024) {\n            // infinity or NAN\n            if (x != x) {\n                sign = (byte) 1;\n                nans = QNAN;\n            } else if (x < 0) {\n                sign = (byte) -1;\n                nans = INFINITE;\n            } else {\n                sign = (byte) 1;\n                nans = INFINITE;\n            }\n            return;\n        }\n\n        Dfp xdfp = new Dfp(field, mantissa);\n        xdfp = xdfp.divide(new Dfp(field, 4503599627370496l)).add(field.getOne());  // Divide by 2^52, then add one\n        xdfp = xdfp.multiply(DfpMath.pow(field.getTwo(), exponent));\n\n        if ((bits & 0x8000000000000000L) != 0) {\n            xdfp = xdfp.negate();\n        }\n\n        System.arraycopy(xdfp.mant, 0, mant, 0, mant.length);\n        sign = xdfp.sign;\n        exp  = xdfp.exp;\n        nans = xdfp.nans;\n\n    }\n\n    /** Copy constructor.\n     * @param d instance to copy\n     */\n    public Dfp(final Dfp d) {\n        mant  = d.mant.clone();\n        sign  = d.sign;\n        exp   = d.exp;\n        nans  = d.nans;\n        field = d.field;\n    }\n\n    /** Create an instance from a String representation.\n     * @param field field to which this instance belongs\n     * @param s string representation of the instance\n     */\n    protected Dfp(final DfpField field, final String s) {\n\n        // initialize as if 0\n        mant = new int[field.getRadixDigits()];\n        sign = 1;\n        exp = 0;\n        nans = FINITE;\n        this.field = field;\n\n        boolean decimalFound = false;\n        final int rsize = 4;   // size of radix in decimal digits\n        final int offset = 4;  // Starting offset into Striped\n        final char[] striped = new char[getRadixDigits() * rsize + offset * 2];\n\n        // Check some special cases\n        if (s.equals(POS_INFINITY_STRING)) {\n            sign = (byte) 1;\n            nans = INFINITE;\n            return;\n        }\n\n        if (s.equals(NEG_INFINITY_STRING)) {\n            sign = (byte) -1;\n            nans = INFINITE;\n            return;\n        }\n\n        if (s.equals(NAN_STRING)) {\n            sign = (byte) 1;\n            nans = QNAN;\n            return;\n        }\n\n        // Check for scientific notation\n        int p = s.indexOf(\"e\");\n        if (p == -1) { // try upper case?\n            p = s.indexOf(\"E\");\n        }\n\n        final String fpdecimal;\n        int sciexp = 0;\n        if (p != -1) {\n            // scientific notation\n            fpdecimal = s.substring(0, p);\n            String fpexp = s.substring(p+1);\n            boolean negative = false;\n\n            for (int i=0; i<fpexp.length(); i++)\n            {\n                if (fpexp.charAt(i) == '-')\n                {\n                    negative = true;\n                    continue;\n                }\n                if (fpexp.charAt(i) >= '0' && fpexp.charAt(i) <= '9') {\n                    sciexp = sciexp * 10 + fpexp.charAt(i) - '0';\n                }\n            }\n\n            if (negative) {\n                sciexp = -sciexp;\n            }\n        } else {\n            // normal case\n            fpdecimal = s;\n        }\n\n        // If there is a minus sign in the number then it is negative\n        if (fpdecimal.indexOf(\"-\") !=  -1) {\n            sign = -1;\n        }\n\n        // First off, find all of the leading zeros, trailing zeros, and significant digits\n        p = 0;\n\n        // Move p to first significant digit\n        int decimalPos = 0;\n        for (;;) {\n            if (fpdecimal.charAt(p) >= '1' && fpdecimal.charAt(p) <= '9') {\n                break;\n            }\n\n            if (decimalFound && fpdecimal.charAt(p) == '0') {\n                decimalPos--;\n            }\n\n            if (fpdecimal.charAt(p) == '.') {\n                decimalFound = true;\n            }\n\n            p++;\n\n            if (p == fpdecimal.length()) {\n                break;\n            }\n        }\n\n        // Copy the string onto Stripped\n        int q = offset;\n        striped[0] = '0';\n        striped[1] = '0';\n        striped[2] = '0';\n        striped[3] = '0';\n        int significantDigits=0;\n        for(;;) {\n            if (p == (fpdecimal.length())) {\n                break;\n            }\n\n            // Don't want to run pass the end of the array\n            if (q == mant.length*rsize+offset+1) {\n                break;\n            }\n\n            if (fpdecimal.charAt(p) == '.') {\n                decimalFound = true;\n                decimalPos = significantDigits;\n                p++;\n                continue;\n            }\n\n            if (fpdecimal.charAt(p) < '0' || fpdecimal.charAt(p) > '9') {\n                p++;\n                continue;\n            }\n\n            striped[q] = fpdecimal.charAt(p);\n            q++;\n            p++;\n            significantDigits++;\n        }\n\n\n        // If the decimal point has been found then get rid of trailing zeros.\n        if (decimalFound && q != offset) {\n            for (;;) {\n                q--;\n                if (q == offset) {\n                    break;\n                }\n                if (striped[q] == '0') {\n                    significantDigits--;\n                } else {\n                    break;\n                }\n            }\n        }\n\n        // special case of numbers like \"0.00000\"\n        if (decimalFound && significantDigits == 0) {\n            decimalPos = 0;\n        }\n\n        // Implicit decimal point at end of number if not present\n        if (!decimalFound) {\n            decimalPos = q-offset;\n        }\n\n        // Find the number of significant trailing zeros\n        q = offset;  // set q to point to first sig digit\n        p = significantDigits-1+offset;\n\n        while (p > q) {\n            if (striped[p] != '0') {\n                break;\n            }\n            p--;\n        }\n\n        // Make sure the decimal is on a mod 10000 boundary\n        int i = ((rsize * 100) - decimalPos - sciexp % rsize) % rsize;\n        q -= i;\n        decimalPos += i;\n\n        // Make the mantissa length right by adding zeros at the end if necessary\n        while ((p - q) < (mant.length * rsize)) {\n            for (i = 0; i < rsize; i++) {\n                striped[++p] = '0';\n            }\n        }\n\n        // Ok, now we know how many trailing zeros there are,\n        // and where the least significant digit is\n        for (i = mant.length - 1; i >= 0; i--) {\n            mant[i] = (striped[q]   - '0') * 1000 +\n                      (striped[q+1] - '0') * 100  +\n                      (striped[q+2] - '0') * 10   +\n                      (striped[q+3] - '0');\n            q += 4;\n        }\n\n\n        exp = (decimalPos+sciexp) / rsize;\n\n        if (q < striped.length) {\n            // Is there possible another digit?\n            round((striped[q] - '0')*1000);\n        }\n\n    }\n\n    /** Creates an instance with a non-finite value.\n     * @param field field to which this instance belongs\n     * @param sign sign of the Dfp to create\n     * @param nans code of the value, must be one of {@link #INFINITE},\n     * {@link #SNAN},  {@link #QNAN}\n     */\n    protected Dfp(final DfpField field, final byte sign, final byte nans) {\n        this.field = field;\n        this.mant    = new int[field.getRadixDigits()];\n        this.sign    = sign;\n        this.exp     = 0;\n        this.nans    = nans;\n    }\n\n    /** Create an instance with a value of 0.\n     * Use this internally in preference to constructors to facilitate subclasses\n     * @return a new instance with a value of 0\n     */\n    public Dfp newInstance() {\n        return new Dfp(getField());\n    }\n\n    /** Create an instance from a byte value.\n     * @param x value to convert to an instance\n     * @return a new instance with value x\n     */\n    public Dfp newInstance(final byte x) {\n        return new Dfp(getField(), x);\n    }\n\n    /** Create an instance from an int value.\n     * @param x value to convert to an instance\n     * @return a new instance with value x\n     */\n    public Dfp newInstance(final int x) {\n        return new Dfp(getField(), x);\n    }\n\n    /** Create an instance from a long value.\n     * @param x value to convert to an instance\n     * @return a new instance with value x\n     */\n    public Dfp newInstance(final long x) {\n        return new Dfp(getField(), x);\n    }\n\n    /** Create an instance from a double value.\n     * @param x value to convert to an instance\n     * @return a new instance with value x\n     */\n    public Dfp newInstance(final double x) {\n        return new Dfp(getField(), x);\n    }\n\n    /** Create an instance by copying an existing one.\n     * Use this internally in preference to constructors to facilitate subclasses.\n     * @param d instance to copy\n     * @return a new instance with the same value as d\n     */\n    public Dfp newInstance(final Dfp d) {\n\n        // make sure we don't mix number with different precision\n        if (field.getRadixDigits() != d.field.getRadixDigits()) {\n            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);\n            final Dfp result = newInstance(getZero());\n            result.nans = QNAN;\n            return dotrap(DfpField.FLAG_INVALID, NEW_INSTANCE_TRAP, d, result);\n        }\n\n        return new Dfp(d);\n\n    }\n\n    /** Create an instance from a String representation.\n     * Use this internally in preference to constructors to facilitate subclasses.\n     * @param s string representation of the instance\n     * @return a new instance parsed from specified string\n     */\n    public Dfp newInstance(final String s) {\n        return new Dfp(field, s);\n    }\n\n    /** Creates an instance with a non-finite value.\n     * @param sig sign of the Dfp to create\n     * @param code code of the value, must be one of {@link #INFINITE},\n     * {@link #SNAN},  {@link #QNAN}\n     * @return a new instance with a non-finite value\n     */\n    public Dfp newInstance(final byte sig, final byte code) {\n        return field.newDfp(sig, code);\n    }\n\n    /** Get the {@link org.apache.commons.math3.Field Field} (really a {@link DfpField}) to which the instance belongs.\n     * <p>\n     * The field is linked to the number of digits and acts as a factory\n     * for {@link Dfp} instances.\n     * </p>\n     * @return {@link org.apache.commons.math3.Field Field} (really a {@link DfpField}) to which the instance belongs\n     */\n    public DfpField getField() {\n        return field;\n    }\n\n    /** Get the number of radix digits of the instance.\n     * @return number of radix digits\n     */\n    public int getRadixDigits() {\n        return field.getRadixDigits();\n    }\n\n    /** Get the constant 0.\n     * @return a Dfp with value zero\n     */\n    public Dfp getZero() {\n        return field.getZero();\n    }\n\n    /** Get the constant 1.\n     * @return a Dfp with value one\n     */\n    public Dfp getOne() {\n        return field.getOne();\n    }\n\n    /** Get the constant 2.\n     * @return a Dfp with value two\n     */\n    public Dfp getTwo() {\n        return field.getTwo();\n    }\n\n    /** Shift the mantissa left, and adjust the exponent to compensate.\n     */\n    protected void shiftLeft() {\n        for (int i = mant.length - 1; i > 0; i--) {\n            mant[i] = mant[i-1];\n        }\n        mant[0] = 0;\n        exp--;\n    }\n\n    /* Note that shiftRight() does not call round() as that round() itself\n     uses shiftRight() */\n    /** Shift the mantissa right, and adjust the exponent to compensate.\n     */\n    protected void shiftRight() {\n        for (int i = 0; i < mant.length - 1; i++) {\n            mant[i] = mant[i+1];\n        }\n        mant[mant.length - 1] = 0;\n        exp++;\n    }\n\n    /** Make our exp equal to the supplied one, this may cause rounding.\n     *  Also causes de-normalized numbers.  These numbers are generally\n     *  dangerous because most routines assume normalized numbers.\n     *  Align doesn't round, so it will return the last digit destroyed\n     *  by shifting right.\n     *  @param e desired exponent\n     *  @return last digit destroyed by shifting right\n     */\n    protected int align(int e) {\n        int lostdigit = 0;\n        boolean inexact = false;\n\n        int diff = exp - e;\n\n        int adiff = diff;\n        if (adiff < 0) {\n            adiff = -adiff;\n        }\n\n        if (diff == 0) {\n            return 0;\n        }\n\n        if (adiff > (mant.length + 1)) {\n            // Special case\n            Arrays.fill(mant, 0);\n            exp = e;\n\n            field.setIEEEFlagsBits(DfpField.FLAG_INEXACT);\n            dotrap(DfpField.FLAG_INEXACT, ALIGN_TRAP, this, this);\n\n            return 0;\n        }\n\n        for (int i = 0; i < adiff; i++) {\n            if (diff < 0) {\n                /* Keep track of loss -- only signal inexact after losing 2 digits.\n                 * the first lost digit is returned to add() and may be incorporated\n                 * into the result.\n                 */\n                if (lostdigit != 0) {\n                    inexact = true;\n                }\n\n                lostdigit = mant[0];\n\n                shiftRight();\n            } else {\n                shiftLeft();\n            }\n        }\n\n        if (inexact) {\n            field.setIEEEFlagsBits(DfpField.FLAG_INEXACT);\n            dotrap(DfpField.FLAG_INEXACT, ALIGN_TRAP, this, this);\n        }\n\n        return lostdigit;\n\n    }\n\n    /** Check if instance is less than x.\n     * @param x number to check instance against\n     * @return true if instance is less than x and neither are NaN, false otherwise\n     */\n    public boolean lessThan(final Dfp x) {\n\n        // make sure we don't mix number with different precision\n        if (field.getRadixDigits() != x.field.getRadixDigits()) {\n            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);\n            final Dfp result = newInstance(getZero());\n            result.nans = QNAN;\n            dotrap(DfpField.FLAG_INVALID, LESS_THAN_TRAP, x, result);\n            return false;\n        }\n\n        /* if a nan is involved, signal invalid and return false */\n        if (isNaN() || x.isNaN()) {\n            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);\n            dotrap(DfpField.FLAG_INVALID, LESS_THAN_TRAP, x, newInstance(getZero()));\n            return false;\n        }\n\n        return compare(this, x) < 0;\n    }\n\n    /** Check if instance is greater than x.\n     * @param x number to check instance against\n     * @return true if instance is greater than x and neither are NaN, false otherwise\n     */\n    public boolean greaterThan(final Dfp x) {\n\n        // make sure we don't mix number with different precision\n        if (field.getRadixDigits() != x.field.getRadixDigits()) {\n            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);\n            final Dfp result = newInstance(getZero());\n            result.nans = QNAN;\n            dotrap(DfpField.FLAG_INVALID, GREATER_THAN_TRAP, x, result);\n            return false;\n        }\n\n        /* if a nan is involved, signal invalid and return false */\n        if (isNaN() || x.isNaN()) {\n            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);\n            dotrap(DfpField.FLAG_INVALID, GREATER_THAN_TRAP, x, newInstance(getZero()));\n            return false;\n        }\n\n        return compare(this, x) > 0;\n    }\n\n    /** Check if instance is less than or equal to 0.\n     * @return true if instance is not NaN and less than or equal to 0, false otherwise\n     */\n    public boolean negativeOrNull() {\n\n        if (isNaN()) {\n            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);\n            dotrap(DfpField.FLAG_INVALID, LESS_THAN_TRAP, this, newInstance(getZero()));\n            return false;\n        }\n\n        return (sign < 0) || ((mant[mant.length - 1] == 0) && !isInfinite());\n\n    }\n\n    /** Check if instance is strictly less than 0.\n     * @return true if instance is not NaN and less than or equal to 0, false otherwise\n     */\n    public boolean strictlyNegative() {\n\n        if (isNaN()) {\n            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);\n            dotrap(DfpField.FLAG_INVALID, LESS_THAN_TRAP, this, newInstance(getZero()));\n            return false;\n        }\n\n        return (sign < 0) && ((mant[mant.length - 1] != 0) || isInfinite());\n\n    }\n\n    /** Check if instance is greater than or equal to 0.\n     * @return true if instance is not NaN and greater than or equal to 0, false otherwise\n     */\n    public boolean positiveOrNull() {\n\n        if (isNaN()) {\n            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);\n            dotrap(DfpField.FLAG_INVALID, LESS_THAN_TRAP, this, newInstance(getZero()));\n            return false;\n        }\n\n        return (sign > 0) || ((mant[mant.length - 1] == 0) && !isInfinite());\n\n    }\n\n    /** Check if instance is strictly greater than 0.\n     * @return true if instance is not NaN and greater than or equal to 0, false otherwise\n     */\n    public boolean strictlyPositive() {\n\n        if (isNaN()) {\n            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);\n            dotrap(DfpField.FLAG_INVALID, LESS_THAN_TRAP, this, newInstance(getZero()));\n            return false;\n        }\n\n        return (sign > 0) && ((mant[mant.length - 1] != 0) || isInfinite());\n\n    }\n\n    /** Get the absolute value of instance.\n     * @return absolute value of instance\n     * @since 3.2\n     */\n    public Dfp abs() {\n        Dfp result = newInstance(this);\n        result.sign = 1;\n        return result;\n    }\n\n    /** Check if instance is infinite.\n     * @return true if instance is infinite\n     */\n    public boolean isInfinite() {\n        return nans == INFINITE;\n    }\n\n    /** Check if instance is not a number.\n     * @return true if instance is not a number\n     */\n    public boolean isNaN() {\n        return (nans == QNAN) || (nans == SNAN);\n    }\n\n    /** Check if instance is equal to zero.\n     * @return true if instance is equal to zero\n     */\n    public boolean isZero() {\n\n        if (isNaN()) {\n            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);\n            dotrap(DfpField.FLAG_INVALID, LESS_THAN_TRAP, this, newInstance(getZero()));\n            return false;\n        }\n\n        return (mant[mant.length - 1] == 0) && !isInfinite();\n\n    }\n\n    /** Check if instance is equal to x.\n     * @param other object to check instance against\n     * @return true if instance is equal to x and neither are NaN, false otherwise\n     */\n    @Override\n    public boolean equals(final Object other) {\n\n        if (other instanceof Dfp) {\n            final Dfp x = (Dfp) other;\n            if (isNaN() || x.isNaN() || field.getRadixDigits() != x.field.getRadixDigits()) {\n                return false;\n            }\n\n            return compare(this, x) == 0;\n        }\n\n        return false;\n\n    }\n\n    /**\n     * Gets a hashCode for the instance.\n     * @return a hash code value for this object\n     */\n    @Override\n    public int hashCode() {\n        return 17 + (isZero() ? 0 : (sign << 8)) + (nans << 16) + exp + Arrays.hashCode(mant);\n    }\n\n    /** Check if instance is not equal to x.\n     * @param x number to check instance against\n     * @return true if instance is not equal to x and neither are NaN, false otherwise\n     */\n    public boolean unequal(final Dfp x) {\n        if (isNaN() || x.isNaN() || field.getRadixDigits() != x.field.getRadixDigits()) {\n            return false;\n        }\n\n        return greaterThan(x) || lessThan(x);\n    }\n\n    /** Compare two instances.\n     * @param a first instance in comparison\n     * @param b second instance in comparison\n     * @return -1 if a<b, 1 if a>b and 0 if a==b\n     *  Note this method does not properly handle NaNs or numbers with different precision.\n     */\n    private static int compare(final Dfp a, final Dfp b) {\n        // Ignore the sign of zero\n        if (a.mant[a.mant.length - 1] == 0 && b.mant[b.mant.length - 1] == 0 &&\n            a.nans == FINITE && b.nans == FINITE) {\n            return 0;\n        }\n\n        if (a.sign != b.sign) {\n            if (a.sign == -1) {\n                return -1;\n            } else {\n                return 1;\n            }\n        }\n\n        // deal with the infinities\n        if (a.nans == INFINITE && b.nans == FINITE) {\n            return a.sign;\n        }\n\n        if (a.nans == FINITE && b.nans == INFINITE) {\n            return -b.sign;\n        }\n\n        if (a.nans == INFINITE && b.nans == INFINITE) {\n            return 0;\n        }\n\n        // Handle special case when a or b is zero, by ignoring the exponents\n        if (b.mant[b.mant.length-1] != 0 && a.mant[b.mant.length-1] != 0) {\n            if (a.exp < b.exp) {\n                return -a.sign;\n            }\n\n            if (a.exp > b.exp) {\n                return a.sign;\n            }\n        }\n\n        // compare the mantissas\n        for (int i = a.mant.length - 1; i >= 0; i--) {\n            if (a.mant[i] > b.mant[i]) {\n                return a.sign;\n            }\n\n            if (a.mant[i] < b.mant[i]) {\n                return -a.sign;\n            }\n        }\n\n        return 0;\n\n    }\n\n    /** Round to nearest integer using the round-half-even method.\n     *  That is round to nearest integer unless both are equidistant.\n     *  In which case round to the even one.\n     *  @return rounded value\n     * @since 3.2\n     */\n    public Dfp rint() {\n        return trunc(DfpField.RoundingMode.ROUND_HALF_EVEN);\n    }\n\n    /** Round to an integer using the round floor mode.\n     * That is, round toward -Infinity\n     *  @return rounded value\n     * @since 3.2\n     */\n    public Dfp floor() {\n        return trunc(DfpField.RoundingMode.ROUND_FLOOR);\n    }\n\n    /** Round to an integer using the round ceil mode.\n     * That is, round toward +Infinity\n     *  @return rounded value\n     * @since 3.2\n     */\n    public Dfp ceil() {\n        return trunc(DfpField.RoundingMode.ROUND_CEIL);\n    }\n\n    /** Returns the IEEE remainder.\n     * @param d divisor\n     * @return this less n &times; d, where n is the integer closest to this/d\n     * @since 3.2\n     */\n    public Dfp remainder(final Dfp d) {\n\n        final Dfp result = this.subtract(this.divide(d).rint().multiply(d));\n\n        // IEEE 854-1987 says that if the result is zero, then it carries the sign of this\n        if (result.mant[mant.length-1] == 0) {\n            result.sign = sign;\n        }\n\n        return result;\n\n    }\n\n    /** Does the integer conversions with the specified rounding.\n     * @param rmode rounding mode to use\n     * @return truncated value\n     */\n    protected Dfp trunc(final DfpField.RoundingMode rmode) {\n        boolean changed = false;\n\n        if (isNaN()) {\n            return newInstance(this);\n        }\n\n        if (nans == INFINITE) {\n            return newInstance(this);\n        }\n\n        if (mant[mant.length-1] == 0) {\n            // a is zero\n            return newInstance(this);\n        }\n\n        /* If the exponent is less than zero then we can certainly\n         * return zero */\n        if (exp < 0) {\n            field.setIEEEFlagsBits(DfpField.FLAG_INEXACT);\n            Dfp result = newInstance(getZero());\n            result = dotrap(DfpField.FLAG_INEXACT, TRUNC_TRAP, this, result);\n            return result;\n        }\n\n        /* If the exponent is greater than or equal to digits, then it\n         * must already be an integer since there is no precision left\n         * for any fractional part */\n\n        if (exp >= mant.length) {\n            return newInstance(this);\n        }\n\n        /* General case:  create another dfp, result, that contains the\n         * a with the fractional part lopped off.  */\n\n        Dfp result = newInstance(this);\n        for (int i = 0; i < mant.length-result.exp; i++) {\n            changed |= result.mant[i] != 0;\n            result.mant[i] = 0;\n        }\n\n        if (changed) {\n            switch (rmode) {\n                case ROUND_FLOOR:\n                    if (result.sign == -1) {\n                        // then we must increment the mantissa by one\n                        result = result.add(newInstance(-1));\n                    }\n                    break;\n\n                case ROUND_CEIL:\n                    if (result.sign == 1) {\n                        // then we must increment the mantissa by one\n                        result = result.add(getOne());\n                    }\n                    break;\n\n                case ROUND_HALF_EVEN:\n                default:\n                    final Dfp half = newInstance(\"0.5\");\n                    Dfp a = subtract(result);  // difference between this and result\n                    a.sign = 1;            // force positive (take abs)\n                    if (a.greaterThan(half)) {\n                        a = newInstance(getOne());\n                        a.sign = sign;\n                        result = result.add(a);\n                    }\n\n                    /** If exactly equal to 1/2 and odd then increment */\n                    if (a.equals(half) && result.exp > 0 && (result.mant[mant.length-result.exp]&1) != 0) {\n                        a = newInstance(getOne());\n                        a.sign = sign;\n                        result = result.add(a);\n                    }\n                    break;\n            }\n\n            field.setIEEEFlagsBits(DfpField.FLAG_INEXACT);  // signal inexact\n            result = dotrap(DfpField.FLAG_INEXACT, TRUNC_TRAP, this, result);\n            return result;\n        }\n\n        return result;\n    }\n\n    /** Convert this to an integer.\n     * If greater than 2147483647, it returns 2147483647. If less than -2147483648 it returns -2147483648.\n     * @return converted number\n     */\n    public int intValue() {\n        Dfp rounded;\n        int result = 0;\n\n        rounded = rint();\n\n        if (rounded.greaterThan(newInstance(2147483647))) {\n            return 2147483647;\n        }\n\n        if (rounded.lessThan(newInstance(-2147483648))) {\n            return -2147483648;\n        }\n\n        for (int i = mant.length - 1; i >= mant.length - rounded.exp; i--) {\n            result = result * RADIX + rounded.mant[i];\n        }\n\n        if (rounded.sign == -1) {\n            result = -result;\n        }\n\n        return result;\n    }\n\n    /** Get the exponent of the greatest power of 10000 that is\n     *  less than or equal to the absolute value of this.  I.E.  if\n     *  this is 10<sup>6</sup> then log10K would return 1.\n     *  @return integer base 10000 logarithm\n     */\n    public int log10K() {\n        return exp - 1;\n    }\n\n    /** Get the specified  power of 10000.\n     * @param e desired power\n     * @return 10000<sup>e</sup>\n     */\n    public Dfp power10K(final int e) {\n        Dfp d = newInstance(getOne());\n        d.exp = e + 1;\n        return d;\n    }\n\n    /** Get the exponent of the greatest power of 10 that is less than or equal to abs(this).\n     *  @return integer base 10 logarithm\n     * @since 3.2\n     */\n    public int intLog10()  {\n        if (mant[mant.length-1] > 1000) {\n            return exp * 4 - 1;\n        }\n        if (mant[mant.length-1] > 100) {\n            return exp * 4 - 2;\n        }\n        if (mant[mant.length-1] > 10) {\n            return exp * 4 - 3;\n        }\n        return exp * 4 - 4;\n    }\n\n    /** Return the specified  power of 10.\n     * @param e desired power\n     * @return 10<sup>e</sup>\n     */\n    public Dfp power10(final int e) {\n        Dfp d = newInstance(getOne());\n\n        if (e >= 0) {\n            d.exp = e / 4 + 1;\n        } else {\n            d.exp = (e + 1) / 4;\n        }\n\n        switch ((e % 4 + 4) % 4) {\n            case 0:\n                break;\n            case 1:\n                d = d.multiply(10);\n                break;\n            case 2:\n                d = d.multiply(100);\n                break;\n            default:\n                d = d.multiply(1000);\n        }\n\n        return d;\n    }\n\n    /** Negate the mantissa of this by computing the complement.\n     *  Leaves the sign bit unchanged, used internally by add.\n     *  Denormalized numbers are handled properly here.\n     *  @param extra ???\n     *  @return ???\n     */\n    protected int complement(int extra) {\n\n        extra = RADIX-extra;\n        for (int i = 0; i < mant.length; i++) {\n            mant[i] = RADIX-mant[i]-1;\n        }\n\n        int rh = extra / RADIX;\n        extra -= rh * RADIX;\n        for (int i = 0; i < mant.length; i++) {\n            final int r = mant[i] + rh;\n            rh = r / RADIX;\n            mant[i] = r - rh * RADIX;\n        }\n\n        return extra;\n    }\n\n    /** Add x to this.\n     * @param x number to add\n     * @return sum of this and x\n     */\n    public Dfp add(final Dfp x) {\n\n        // make sure we don't mix number with different precision\n        if (field.getRadixDigits() != x.field.getRadixDigits()) {\n            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);\n            final Dfp result = newInstance(getZero());\n            result.nans = QNAN;\n            return dotrap(DfpField.FLAG_INVALID, ADD_TRAP, x, result);\n        }\n\n        /* handle special cases */\n        if (nans != FINITE || x.nans != FINITE) {\n            if (isNaN()) {\n                return this;\n            }\n\n            if (x.isNaN()) {\n                return x;\n            }\n\n            if (nans == INFINITE && x.nans == FINITE) {\n                return this;\n            }\n\n            if (x.nans == INFINITE && nans == FINITE) {\n                return x;\n            }\n\n            if (x.nans == INFINITE && nans == INFINITE && sign == x.sign) {\n                return x;\n            }\n\n            if (x.nans == INFINITE && nans == INFINITE && sign != x.sign) {\n                field.setIEEEFlagsBits(DfpField.FLAG_INVALID);\n                Dfp result = newInstance(getZero());\n                result.nans = QNAN;\n                result = dotrap(DfpField.FLAG_INVALID, ADD_TRAP, x, result);\n                return result;\n            }\n        }\n\n        /* copy this and the arg */\n        Dfp a = newInstance(this);\n        Dfp b = newInstance(x);\n\n        /* initialize the result object */\n        Dfp result = newInstance(getZero());\n\n        /* Make all numbers positive, but remember their sign */\n        final byte asign = a.sign;\n        final byte bsign = b.sign;\n\n        a.sign = 1;\n        b.sign = 1;\n\n        /* The result will be signed like the arg with greatest magnitude */\n        byte rsign = bsign;\n        if (compare(a, b) > 0) {\n            rsign = asign;\n        }\n\n        /* Handle special case when a or b is zero, by setting the exponent\n       of the zero number equal to the other one.  This avoids an alignment\n       which would cause catastropic loss of precision */\n        if (b.mant[mant.length-1] == 0) {\n            b.exp = a.exp;\n        }\n\n        if (a.mant[mant.length-1] == 0) {\n            a.exp = b.exp;\n        }\n\n        /* align number with the smaller exponent */\n        int aextradigit = 0;\n        int bextradigit = 0;\n        if (a.exp < b.exp) {\n            aextradigit = a.align(b.exp);\n        } else {\n            bextradigit = b.align(a.exp);\n        }\n\n        /* complement the smaller of the two if the signs are different */\n        if (asign != bsign) {\n            if (asign == rsign) {\n                bextradigit = b.complement(bextradigit);\n            } else {\n                aextradigit = a.complement(aextradigit);\n            }\n        }\n\n        /* add the mantissas */\n        int rh = 0; /* acts as a carry */\n        for (int i = 0; i < mant.length; i++) {\n            final int r = a.mant[i]+b.mant[i]+rh;\n            rh = r / RADIX;\n            result.mant[i] = r - rh * RADIX;\n        }\n        result.exp = a.exp;\n        result.sign = rsign;\n\n        /* handle overflow -- note, when asign!=bsign an overflow is\n         * normal and should be ignored.  */\n\n        if (rh != 0 && (asign == bsign)) {\n            final int lostdigit = result.mant[0];\n            result.shiftRight();\n            result.mant[mant.length-1] = rh;\n            final int excp = result.round(lostdigit);\n            if (excp != 0) {\n                result = dotrap(excp, ADD_TRAP, x, result);\n            }\n        }\n\n        /* normalize the result */\n        for (int i = 0; i < mant.length; i++) {\n            if (result.mant[mant.length-1] != 0) {\n                break;\n            }\n            result.shiftLeft();\n            if (i == 0) {\n                result.mant[0] = aextradigit+bextradigit;\n                aextradigit = 0;\n                bextradigit = 0;\n            }\n        }\n\n        /* result is zero if after normalization the most sig. digit is zero */\n        if (result.mant[mant.length-1] == 0) {\n            result.exp = 0;\n\n            if (asign != bsign) {\n                // Unless adding 2 negative zeros, sign is positive\n                result.sign = 1;  // Per IEEE 854-1987 Section 6.3\n            }\n        }\n\n        /* Call round to test for over/under flows */\n        final int excp = result.round(aextradigit + bextradigit);\n        if (excp != 0) {\n            result = dotrap(excp, ADD_TRAP, x, result);\n        }\n\n        return result;\n    }\n\n    /** Returns a number that is this number with the sign bit reversed.\n     * @return the opposite of this\n     */\n    public Dfp negate() {\n        Dfp result = newInstance(this);\n        result.sign = (byte) - result.sign;\n        return result;\n    }\n\n    /** Subtract x from this.\n     * @param x number to subtract\n     * @return difference of this and a\n     */\n    public Dfp subtract(final Dfp x) {\n        return add(x.negate());\n    }\n\n    /** Round this given the next digit n using the current rounding mode.\n     * @param n ???\n     * @return the IEEE flag if an exception occurred\n     */\n    protected int round(int n) {\n        boolean inc = false;\n        switch (field.getRoundingMode()) {\n            case ROUND_DOWN:\n                inc = false;\n                break;\n\n            case ROUND_UP:\n                inc = n != 0;       // round up if n!=0\n                break;\n\n            case ROUND_HALF_UP:\n                inc = n >= 5000;  // round half up\n                break;\n\n            case ROUND_HALF_DOWN:\n                inc = n > 5000;  // round half down\n                break;\n\n            case ROUND_HALF_EVEN:\n                inc = n > 5000 || (n == 5000 && (mant[0] & 1) == 1);  // round half-even\n                break;\n\n            case ROUND_HALF_ODD:\n                inc = n > 5000 || (n == 5000 && (mant[0] & 1) == 0);  // round half-odd\n                break;\n\n            case ROUND_CEIL:\n                inc = sign == 1 && n != 0;  // round ceil\n                break;\n\n            case ROUND_FLOOR:\n            default:\n                inc = sign == -1 && n != 0;  // round floor\n                break;\n        }\n\n        if (inc) {\n            // increment if necessary\n            int rh = 1;\n            for (int i = 0; i < mant.length; i++) {\n                final int r = mant[i] + rh;\n                rh = r / RADIX;\n                mant[i] = r - rh * RADIX;\n            }\n\n            if (rh != 0) {\n                shiftRight();\n                mant[mant.length-1] = rh;\n            }\n        }\n\n        // check for exceptional cases and raise signals if necessary\n        if (exp < MIN_EXP) {\n            // Gradual Underflow\n            field.setIEEEFlagsBits(DfpField.FLAG_UNDERFLOW);\n            return DfpField.FLAG_UNDERFLOW;\n        }\n\n        if (exp > MAX_EXP) {\n            // Overflow\n            field.setIEEEFlagsBits(DfpField.FLAG_OVERFLOW);\n            return DfpField.FLAG_OVERFLOW;\n        }\n\n        if (n != 0) {\n            // Inexact\n            field.setIEEEFlagsBits(DfpField.FLAG_INEXACT);\n            return DfpField.FLAG_INEXACT;\n        }\n\n        return 0;\n\n    }\n\n    /** Multiply this by x.\n     * @param x multiplicand\n     * @return product of this and x\n     */\n    public Dfp multiply(final Dfp x) {\n\n        // make sure we don't mix number with different precision\n        if (field.getRadixDigits() != x.field.getRadixDigits()) {\n            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);\n            final Dfp result = newInstance(getZero());\n            result.nans = QNAN;\n            return dotrap(DfpField.FLAG_INVALID, MULTIPLY_TRAP, x, result);\n        }\n\n        Dfp result = newInstance(getZero());\n\n        /* handle special cases */\n        if (nans != FINITE || x.nans != FINITE) {\n            if (isNaN()) {\n                return this;\n            }\n\n            if (x.isNaN()) {\n                return x;\n            }\n\n            if (nans == INFINITE && x.nans == FINITE && x.mant[mant.length-1] != 0) {\n                result = newInstance(this);\n                result.sign = (byte) (sign * x.sign);\n                return result;\n            }\n\n            if (x.nans == INFINITE && nans == FINITE && mant[mant.length-1] != 0) {\n                result = newInstance(x);\n                result.sign = (byte) (sign * x.sign);\n                return result;\n            }\n\n            if (x.nans == INFINITE && nans == INFINITE) {\n                result = newInstance(this);\n                result.sign = (byte) (sign * x.sign);\n                return result;\n            }\n\n            if ( (x.nans == INFINITE && nans == FINITE && mant[mant.length-1] == 0) ||\n                    (nans == INFINITE && x.nans == FINITE && x.mant[mant.length-1] == 0) ) {\n                field.setIEEEFlagsBits(DfpField.FLAG_INVALID);\n                result = newInstance(getZero());\n                result.nans = QNAN;\n                result = dotrap(DfpField.FLAG_INVALID, MULTIPLY_TRAP, x, result);\n                return result;\n            }\n        }\n\n        int[] product = new int[mant.length*2];  // Big enough to hold even the largest result\n\n        for (int i = 0; i < mant.length; i++) {\n            int rh = 0;  // acts as a carry\n            for (int j=0; j<mant.length; j++) {\n                int r = mant[i] * x.mant[j];    // multiply the 2 digits\n                r += product[i+j] + rh;  // add to the product digit with carry in\n\n                rh = r / RADIX;\n                product[i+j] = r - rh * RADIX;\n            }\n            product[i+mant.length] = rh;\n        }\n\n        // Find the most sig digit\n        int md = mant.length * 2 - 1;  // default, in case result is zero\n        for (int i = mant.length * 2 - 1; i >= 0; i--) {\n            if (product[i] != 0) {\n                md = i;\n                break;\n            }\n        }\n\n        // Copy the digits into the result\n        for (int i = 0; i < mant.length; i++) {\n            result.mant[mant.length - i - 1] = product[md - i];\n        }\n\n        // Fixup the exponent.\n        result.exp = exp + x.exp + md - 2 * mant.length + 1;\n        result.sign = (byte)((sign == x.sign)?1:-1);\n\n        if (result.mant[mant.length-1] == 0) {\n            // if result is zero, set exp to zero\n            result.exp = 0;\n        }\n\n        final int excp;\n        if (md > (mant.length-1)) {\n            excp = result.round(product[md-mant.length]);\n        } else {\n            excp = result.round(0); // has no effect except to check status\n        }\n\n        if (excp != 0) {\n            result = dotrap(excp, MULTIPLY_TRAP, x, result);\n        }\n\n        return result;\n\n    }\n\n    /** Multiply this by a single digit x.\n     * @param x multiplicand\n     * @return product of this and x\n     */\n    public Dfp multiply(final int x) {\n        if (x >= 0 && x < RADIX) {\n            return multiplyFast(x);\n        } else {\n            return multiply(newInstance(x));\n        }\n    }\n\n    /** Multiply this by a single digit 0&lt;=x&lt;radix.\n     * There are speed advantages in this special case.\n     * @param x multiplicand\n     * @return product of this and x\n     */\n    private Dfp multiplyFast(final int x) {\n        Dfp result = newInstance(this);\n\n        /* handle special cases */\n        if (nans != FINITE) {\n            if (isNaN()) {\n                return this;\n            }\n\n            if (nans == INFINITE && x != 0) {\n                result = newInstance(this);\n                return result;\n            }\n\n            if (nans == INFINITE && x == 0) {\n                field.setIEEEFlagsBits(DfpField.FLAG_INVALID);\n                result = newInstance(getZero());\n                result.nans = QNAN;\n                result = dotrap(DfpField.FLAG_INVALID, MULTIPLY_TRAP, newInstance(getZero()), result);\n                return result;\n            }\n        }\n\n        /* range check x */\n        if (x < 0 || x >= RADIX) {\n            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);\n            result = newInstance(getZero());\n            result.nans = QNAN;\n            result = dotrap(DfpField.FLAG_INVALID, MULTIPLY_TRAP, result, result);\n            return result;\n        }\n\n        int rh = 0;\n        for (int i = 0; i < mant.length; i++) {\n            final int r = mant[i] * x + rh;\n            rh = r / RADIX;\n            result.mant[i] = r - rh * RADIX;\n        }\n\n        int lostdigit = 0;\n        if (rh != 0) {\n            lostdigit = result.mant[0];\n            result.shiftRight();\n            result.mant[mant.length-1] = rh;\n        }\n\n        if (result.mant[mant.length-1] == 0) { // if result is zero, set exp to zero\n            result.exp = 0;\n        }\n\n        final int excp = result.round(lostdigit);\n        if (excp != 0) {\n            result = dotrap(excp, MULTIPLY_TRAP, result, result);\n        }\n\n        return result;\n    }\n\n    /** Divide this by divisor.\n     * @param divisor divisor\n     * @return quotient of this by divisor\n     */\n    public Dfp divide(Dfp divisor) {\n        int dividend[]; // current status of the dividend\n        int quotient[]; // quotient\n        int remainder[];// remainder\n        int qd;         // current quotient digit we're working with\n        int nsqd;       // number of significant quotient digits we have\n        int trial=0;    // trial quotient digit\n        int minadj;     // minimum adjustment\n        boolean trialgood; // Flag to indicate a good trail digit\n        int md=0;       // most sig digit in result\n        int excp;       // exceptions\n\n        // make sure we don't mix number with different precision\n        if (field.getRadixDigits() != divisor.field.getRadixDigits()) {\n            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);\n            final Dfp result = newInstance(getZero());\n            result.nans = QNAN;\n            return dotrap(DfpField.FLAG_INVALID, DIVIDE_TRAP, divisor, result);\n        }\n\n        Dfp result = newInstance(getZero());\n\n        /* handle special cases */\n        if (nans != FINITE || divisor.nans != FINITE) {\n            if (isNaN()) {\n                return this;\n            }\n\n            if (divisor.isNaN()) {\n                return divisor;\n            }\n\n            if (nans == INFINITE && divisor.nans == FINITE) {\n                result = newInstance(this);\n                result.sign = (byte) (sign * divisor.sign);\n                return result;\n            }\n\n            if (divisor.nans == INFINITE && nans == FINITE) {\n                result = newInstance(getZero());\n                result.sign = (byte) (sign * divisor.sign);\n                return result;\n            }\n\n            if (divisor.nans == INFINITE && nans == INFINITE) {\n                field.setIEEEFlagsBits(DfpField.FLAG_INVALID);\n                result = newInstance(getZero());\n                result.nans = QNAN;\n                result = dotrap(DfpField.FLAG_INVALID, DIVIDE_TRAP, divisor, result);\n                return result;\n            }\n        }\n\n        /* Test for divide by zero */\n        if (divisor.mant[mant.length-1] == 0) {\n            field.setIEEEFlagsBits(DfpField.FLAG_DIV_ZERO);\n            result = newInstance(getZero());\n            result.sign = (byte) (sign * divisor.sign);\n            result.nans = INFINITE;\n            result = dotrap(DfpField.FLAG_DIV_ZERO, DIVIDE_TRAP, divisor, result);\n            return result;\n        }\n\n        dividend = new int[mant.length+1];  // one extra digit needed\n        quotient = new int[mant.length+2];  // two extra digits needed 1 for overflow, 1 for rounding\n        remainder = new int[mant.length+1]; // one extra digit needed\n\n        /* Initialize our most significant digits to zero */\n\n        dividend[mant.length] = 0;\n        quotient[mant.length] = 0;\n        quotient[mant.length+1] = 0;\n        remainder[mant.length] = 0;\n\n        /* copy our mantissa into the dividend, initialize the\n       quotient while we are at it */\n\n        for (int i = 0; i < mant.length; i++) {\n            dividend[i] = mant[i];\n            quotient[i] = 0;\n            remainder[i] = 0;\n        }\n\n        /* outer loop.  Once per quotient digit */\n        nsqd = 0;\n        for (qd = mant.length+1; qd >= 0; qd--) {\n            /* Determine outer limits of our quotient digit */\n\n            // r =  most sig 2 digits of dividend\n            final int divMsb = dividend[mant.length]*RADIX+dividend[mant.length-1];\n            int min = divMsb       / (divisor.mant[mant.length-1]+1);\n            int max = (divMsb + 1) / divisor.mant[mant.length-1];\n\n            trialgood = false;\n            while (!trialgood) {\n                // try the mean\n                trial = (min+max)/2;\n\n                /* Multiply by divisor and store as remainder */\n                int rh = 0;\n                for (int i = 0; i < mant.length + 1; i++) {\n                    int dm = (i<mant.length)?divisor.mant[i]:0;\n                    final int r = (dm * trial) + rh;\n                    rh = r / RADIX;\n                    remainder[i] = r - rh * RADIX;\n                }\n\n                /* subtract the remainder from the dividend */\n                rh = 1;  // carry in to aid the subtraction\n                for (int i = 0; i < mant.length + 1; i++) {\n                    final int r = ((RADIX-1) - remainder[i]) + dividend[i] + rh;\n                    rh = r / RADIX;\n                    remainder[i] = r - rh * RADIX;\n                }\n\n                /* Lets analyze what we have here */\n                if (rh == 0) {\n                    // trial is too big -- negative remainder\n                    max = trial-1;\n                    continue;\n                }\n\n                /* find out how far off the remainder is telling us we are */\n                minadj = (remainder[mant.length] * RADIX)+remainder[mant.length-1];\n                minadj /= divisor.mant[mant.length-1] + 1;\n\n                if (minadj >= 2) {\n                    min = trial+minadj;  // update the minimum\n                    continue;\n                }\n\n                /* May have a good one here, check more thoroughly.  Basically\n           its a good one if it is less than the divisor */\n                trialgood = false;  // assume false\n                for (int i = mant.length - 1; i >= 0; i--) {\n                    if (divisor.mant[i] > remainder[i]) {\n                        trialgood = true;\n                    }\n                    if (divisor.mant[i] < remainder[i]) {\n                        break;\n                    }\n                }\n\n                if (remainder[mant.length] != 0) {\n                    trialgood = false;\n                }\n\n                if (trialgood == false) {\n                    min = trial+1;\n                }\n            }\n\n            /* Great we have a digit! */\n            quotient[qd] = trial;\n            if (trial != 0 || nsqd != 0) {\n                nsqd++;\n            }\n\n            if (field.getRoundingMode() == DfpField.RoundingMode.ROUND_DOWN && nsqd == mant.length) {\n                // We have enough for this mode\n                break;\n            }\n\n            if (nsqd > mant.length) {\n                // We have enough digits\n                break;\n            }\n\n            /* move the remainder into the dividend while left shifting */\n            dividend[0] = 0;\n            for (int i = 0; i < mant.length; i++) {\n                dividend[i + 1] = remainder[i];\n            }\n        }\n\n        /* Find the most sig digit */\n        md = mant.length;  // default\n        for (int i = mant.length + 1; i >= 0; i--) {\n            if (quotient[i] != 0) {\n                md = i;\n                break;\n            }\n        }\n\n        /* Copy the digits into the result */\n        for (int i=0; i<mant.length; i++) {\n            result.mant[mant.length-i-1] = quotient[md-i];\n        }\n\n        /* Fixup the exponent. */\n        result.exp = exp - divisor.exp + md - mant.length;\n        result.sign = (byte) ((sign == divisor.sign) ? 1 : -1);\n\n        if (result.mant[mant.length-1] == 0) { // if result is zero, set exp to zero\n            result.exp = 0;\n        }\n\n        if (md > (mant.length-1)) {\n            excp = result.round(quotient[md-mant.length]);\n        } else {\n            excp = result.round(0);\n        }\n\n        if (excp != 0) {\n            result = dotrap(excp, DIVIDE_TRAP, divisor, result);\n        }\n\n        return result;\n    }\n\n    /** Divide by a single digit less than radix.\n     *  Special case, so there are speed advantages. 0 &lt;= divisor &lt; radix\n     * @param divisor divisor\n     * @return quotient of this by divisor\n     */\n    public Dfp divide(int divisor) {\n\n        // Handle special cases\n        if (nans != FINITE) {\n            if (isNaN()) {\n                return this;\n            }\n\n            if (nans == INFINITE) {\n                return newInstance(this);\n            }\n        }\n\n        // Test for divide by zero\n        if (divisor == 0) {\n            field.setIEEEFlagsBits(DfpField.FLAG_DIV_ZERO);\n            Dfp result = newInstance(getZero());\n            result.sign = sign;\n            result.nans = INFINITE;\n            result = dotrap(DfpField.FLAG_DIV_ZERO, DIVIDE_TRAP, getZero(), result);\n            return result;\n        }\n\n        // range check divisor\n        if (divisor < 0 || divisor >= RADIX) {\n            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);\n            Dfp result = newInstance(getZero());\n            result.nans = QNAN;\n            result = dotrap(DfpField.FLAG_INVALID, DIVIDE_TRAP, result, result);\n            return result;\n        }\n\n        Dfp result = newInstance(this);\n\n        int rl = 0;\n        for (int i = mant.length-1; i >= 0; i--) {\n            final int r = rl*RADIX + result.mant[i];\n            final int rh = r / divisor;\n            rl = r - rh * divisor;\n            result.mant[i] = rh;\n        }\n\n        if (result.mant[mant.length-1] == 0) {\n            // normalize\n            result.shiftLeft();\n            final int r = rl * RADIX;        // compute the next digit and put it in\n            final int rh = r / divisor;\n            rl = r - rh * divisor;\n            result.mant[0] = rh;\n        }\n\n        final int excp = result.round(rl * RADIX / divisor);  // do the rounding\n        if (excp != 0) {\n            result = dotrap(excp, DIVIDE_TRAP, result, result);\n        }\n\n        return result;\n\n    }\n\n    /** {@inheritDoc} */\n    public Dfp reciprocal() {\n        return field.getOne().divide(this);\n    }\n\n    /** Compute the square root.\n     * @return square root of the instance\n     * @since 3.2\n     */\n    public Dfp sqrt() {\n\n        // check for unusual cases\n        if (nans == FINITE && mant[mant.length-1] == 0) {\n            // if zero\n            return newInstance(this);\n        }\n\n        if (nans != FINITE) {\n            if (nans == INFINITE && sign == 1) {\n                // if positive infinity\n                return newInstance(this);\n            }\n\n            if (nans == QNAN) {\n                return newInstance(this);\n            }\n\n            if (nans == SNAN) {\n                Dfp result;\n\n                field.setIEEEFlagsBits(DfpField.FLAG_INVALID);\n                result = newInstance(this);\n                result = dotrap(DfpField.FLAG_INVALID, SQRT_TRAP, null, result);\n                return result;\n            }\n        }\n\n        if (sign == -1) {\n            // if negative\n            Dfp result;\n\n            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);\n            result = newInstance(this);\n            result.nans = QNAN;\n            result = dotrap(DfpField.FLAG_INVALID, SQRT_TRAP, null, result);\n            return result;\n        }\n\n        Dfp x = newInstance(this);\n\n        /* Lets make a reasonable guess as to the size of the square root */\n        if (x.exp < -1 || x.exp > 1) {\n            x.exp = this.exp / 2;\n        }\n\n        /* Coarsely estimate the mantissa */\n        switch (x.mant[mant.length-1] / 2000) {\n            case 0:\n                x.mant[mant.length-1] = x.mant[mant.length-1]/2+1;\n                break;\n            case 2:\n                x.mant[mant.length-1] = 1500;\n                break;\n            case 3:\n                x.mant[mant.length-1] = 2200;\n                break;\n            default:\n                x.mant[mant.length-1] = 3000;\n        }\n\n        Dfp dx = newInstance(x);\n\n        /* Now that we have the first pass estimate, compute the rest\n       by the formula dx = (y - x*x) / (2x); */\n\n        Dfp px  = getZero();\n        Dfp ppx = getZero();\n        while (x.unequal(px)) {\n            dx = newInstance(x);\n            dx.sign = -1;\n            dx = dx.add(this.divide(x));\n            dx = dx.divide(2);\n            ppx = px;\n            px = x;\n            x = x.add(dx);\n\n            if (x.equals(ppx)) {\n                // alternating between two values\n                break;\n            }\n\n            // if dx is zero, break.  Note testing the most sig digit\n            // is a sufficient test since dx is normalized\n            if (dx.mant[mant.length-1] == 0) {\n                break;\n            }\n        }\n\n        return x;\n\n    }\n\n    /** Get a string representation of the instance.\n     * @return string representation of the instance\n     */\n    @Override\n    public String toString() {\n        if (nans != FINITE) {\n            // if non-finite exceptional cases\n            if (nans == INFINITE) {\n                return (sign < 0) ? NEG_INFINITY_STRING : POS_INFINITY_STRING;\n            } else {\n                return NAN_STRING;\n            }\n        }\n\n        if (exp > mant.length || exp < -1) {\n            return dfp2sci();\n        }\n\n        return dfp2string();\n\n    }\n\n    /** Convert an instance to a string using scientific notation.\n     * @return string representation of the instance in scientific notation\n     */\n    protected String dfp2sci() {\n        char rawdigits[]    = new char[mant.length * 4];\n        char outputbuffer[] = new char[mant.length * 4 + 20];\n        int p;\n        int q;\n        int e;\n        int ae;\n        int shf;\n\n        // Get all the digits\n        p = 0;\n        for (int i = mant.length - 1; i >= 0; i--) {\n            rawdigits[p++] = (char) ((mant[i] / 1000) + '0');\n            rawdigits[p++] = (char) (((mant[i] / 100) %10) + '0');\n            rawdigits[p++] = (char) (((mant[i] / 10) % 10) + '0');\n            rawdigits[p++] = (char) (((mant[i]) % 10) + '0');\n        }\n\n        // Find the first non-zero one\n        for (p = 0; p < rawdigits.length; p++) {\n            if (rawdigits[p] != '0') {\n                break;\n            }\n        }\n        shf = p;\n\n        // Now do the conversion\n        q = 0;\n        if (sign == -1) {\n            outputbuffer[q++] = '-';\n        }\n\n        if (p != rawdigits.length) {\n            // there are non zero digits...\n            outputbuffer[q++] = rawdigits[p++];\n            outputbuffer[q++] = '.';\n\n            while (p<rawdigits.length) {\n                outputbuffer[q++] = rawdigits[p++];\n            }\n        } else {\n            outputbuffer[q++] = '0';\n            outputbuffer[q++] = '.';\n            outputbuffer[q++] = '0';\n            outputbuffer[q++] = 'e';\n            outputbuffer[q++] = '0';\n            return new String(outputbuffer, 0, 5);\n        }\n\n        outputbuffer[q++] = 'e';\n\n        // Find the msd of the exponent\n\n        e = exp * 4 - shf - 1;\n        ae = e;\n        if (e < 0) {\n            ae = -e;\n        }\n\n        // Find the largest p such that p < e\n        for (p = 1000000000; p > ae; p /= 10) {\n            // nothing to do\n        }\n\n        if (e < 0) {\n            outputbuffer[q++] = '-';\n        }\n\n        while (p > 0) {\n            outputbuffer[q++] = (char)(ae / p + '0');\n            ae %= p;\n            p /= 10;\n        }\n\n        return new String(outputbuffer, 0, q);\n\n    }\n\n    /** Convert an instance to a string using normal notation.\n     * @return string representation of the instance in normal notation\n     */\n    protected String dfp2string() {\n        char buffer[] = new char[mant.length*4 + 20];\n        int p = 1;\n        int q;\n        int e = exp;\n        boolean pointInserted = false;\n\n        buffer[0] = ' ';\n\n        if (e <= 0) {\n            buffer[p++] = '0';\n            buffer[p++] = '.';\n            pointInserted = true;\n        }\n\n        while (e < 0) {\n            buffer[p++] = '0';\n            buffer[p++] = '0';\n            buffer[p++] = '0';\n            buffer[p++] = '0';\n            e++;\n        }\n\n        for (int i = mant.length - 1; i >= 0; i--) {\n            buffer[p++] = (char) ((mant[i] / 1000) + '0');\n            buffer[p++] = (char) (((mant[i] / 100) % 10) + '0');\n            buffer[p++] = (char) (((mant[i] / 10) % 10) + '0');\n            buffer[p++] = (char) (((mant[i]) % 10) + '0');\n            if (--e == 0) {\n                buffer[p++] = '.';\n                pointInserted = true;\n            }\n        }\n\n        while (e > 0) {\n            buffer[p++] = '0';\n            buffer[p++] = '0';\n            buffer[p++] = '0';\n            buffer[p++] = '0';\n            e--;\n        }\n\n        if (!pointInserted) {\n            // Ensure we have a radix point!\n            buffer[p++] = '.';\n        }\n\n        // Suppress leading zeros\n        q = 1;\n        while (buffer[q] == '0') {\n            q++;\n        }\n        if (buffer[q] == '.') {\n            q--;\n        }\n\n        // Suppress trailing zeros\n        while (buffer[p-1] == '0') {\n            p--;\n        }\n\n        // Insert sign\n        if (sign < 0) {\n            buffer[--q] = '-';\n        }\n\n        return new String(buffer, q, p - q);\n\n    }\n\n    /** Raises a trap.  This does not set the corresponding flag however.\n     *  @param type the trap type\n     *  @param what - name of routine trap occurred in\n     *  @param oper - input operator to function\n     *  @param result - the result computed prior to the trap\n     *  @return The suggested return value from the trap handler\n     */\n    public Dfp dotrap(int type, String what, Dfp oper, Dfp result) {\n        Dfp def = result;\n\n        switch (type) {\n            case DfpField.FLAG_INVALID:\n                def = newInstance(getZero());\n                def.sign = result.sign;\n                def.nans = QNAN;\n                break;\n\n            case DfpField.FLAG_DIV_ZERO:\n                if (nans == FINITE && mant[mant.length-1] != 0) {\n                    // normal case, we are finite, non-zero\n                    def = newInstance(getZero());\n                    def.sign = (byte)(sign*oper.sign);\n                    def.nans = INFINITE;\n                }\n\n                if (nans == FINITE && mant[mant.length-1] == 0) {\n                    //  0/0\n                    def = newInstance(getZero());\n                    def.nans = QNAN;\n                }\n\n                if (nans == INFINITE || nans == QNAN) {\n                    def = newInstance(getZero());\n                    def.nans = QNAN;\n                }\n\n                if (nans == INFINITE || nans == SNAN) {\n                    def = newInstance(getZero());\n                    def.nans = QNAN;\n                }\n                break;\n\n            case DfpField.FLAG_UNDERFLOW:\n                if ( (result.exp+mant.length) < MIN_EXP) {\n                    def = newInstance(getZero());\n                    def.sign = result.sign;\n                } else {\n                    def = newInstance(result);  // gradual underflow\n                }\n                result.exp += ERR_SCALE;\n                break;\n\n            case DfpField.FLAG_OVERFLOW:\n                result.exp -= ERR_SCALE;\n                def = newInstance(getZero());\n                def.sign = result.sign;\n                def.nans = INFINITE;\n                break;\n\n            default: def = result; break;\n        }\n\n        return trap(type, what, oper, def, result);\n\n    }\n\n    /** Trap handler.  Subclasses may override this to provide trap\n     *  functionality per IEEE 854-1987.\n     *\n     *  @param type  The exception type - e.g. FLAG_OVERFLOW\n     *  @param what  The name of the routine we were in e.g. divide()\n     *  @param oper  An operand to this function if any\n     *  @param def   The default return value if trap not enabled\n     *  @param result    The result that is specified to be delivered per\n     *                   IEEE 854, if any\n     *  @return the value that should be return by the operation triggering the trap\n     */\n    protected Dfp trap(int type, String what, Dfp oper, Dfp def, Dfp result) {\n        return def;\n    }\n\n    /** Returns the type - one of FINITE, INFINITE, SNAN, QNAN.\n     * @return type of the number\n     */\n    public int classify() {\n        return nans;\n    }\n\n    /** Creates an instance that is the same as x except that it has the sign of y.\n     * abs(x) = dfp.copysign(x, dfp.one)\n     * @param x number to get the value from\n     * @param y number to get the sign from\n     * @return a number with the value of x and the sign of y\n     */\n    public static Dfp copysign(final Dfp x, final Dfp y) {\n        Dfp result = x.newInstance(x);\n        result.sign = y.sign;\n        return result;\n    }\n\n    /** Returns the next number greater than this one in the direction of x.\n     * If this==x then simply returns this.\n     * @param x direction where to look at\n     * @return closest number next to instance in the direction of x\n     */\n    public Dfp nextAfter(final Dfp x) {\n\n        // make sure we don't mix number with different precision\n        if (field.getRadixDigits() != x.field.getRadixDigits()) {\n            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);\n            final Dfp result = newInstance(getZero());\n            result.nans = QNAN;\n            return dotrap(DfpField.FLAG_INVALID, NEXT_AFTER_TRAP, x, result);\n        }\n\n        // if this is greater than x\n        boolean up = false;\n        if (this.lessThan(x)) {\n            up = true;\n        }\n\n        if (compare(this, x) == 0) {\n            return newInstance(x);\n        }\n\n        if (lessThan(getZero())) {\n            up = !up;\n        }\n\n        final Dfp inc;\n        Dfp result;\n        if (up) {\n            inc = newInstance(getOne());\n            inc.exp = this.exp-mant.length+1;\n            inc.sign = this.sign;\n\n            if (this.equals(getZero())) {\n                inc.exp = MIN_EXP-mant.length;\n            }\n\n            result = add(inc);\n        } else {\n            inc = newInstance(getOne());\n            inc.exp = this.exp;\n            inc.sign = this.sign;\n\n            if (this.equals(inc)) {\n                inc.exp = this.exp-mant.length;\n            } else {\n                inc.exp = this.exp-mant.length+1;\n            }\n\n            if (this.equals(getZero())) {\n                inc.exp = MIN_EXP-mant.length;\n            }\n\n            result = this.subtract(inc);\n        }\n\n        if (result.classify() == INFINITE && this.classify() != INFINITE) {\n            field.setIEEEFlagsBits(DfpField.FLAG_INEXACT);\n            result = dotrap(DfpField.FLAG_INEXACT, NEXT_AFTER_TRAP, x, result);\n        }\n\n        if (result.equals(getZero()) && this.equals(getZero()) == false) {\n            field.setIEEEFlagsBits(DfpField.FLAG_INEXACT);\n            result = dotrap(DfpField.FLAG_INEXACT, NEXT_AFTER_TRAP, x, result);\n        }\n\n        return result;\n\n    }\n\n    /** Convert the instance into a double.\n     * @return a double approximating the instance\n     * @see #toSplitDouble()\n     */\n    public double toDouble() {\n\n        if (isInfinite()) {\n            if (lessThan(getZero())) {\n                return Double.NEGATIVE_INFINITY;\n            } else {\n                return Double.POSITIVE_INFINITY;\n            }\n        }\n\n        if (isNaN()) {\n            return Double.NaN;\n        }\n\n        Dfp y = this;\n        boolean negate = false;\n        int cmp0 = compare(this, getZero());\n        if (cmp0 == 0) {\n            return sign < 0 ? -0.0 : +0.0;\n        } else if (cmp0 < 0) {\n            y = negate();\n            negate = true;\n        }\n\n        /* Find the exponent, first estimate by integer log10, then adjust.\n         Should be faster than doing a natural logarithm.  */\n        int exponent = (int)(y.intLog10() * 3.32);\n        if (exponent < 0) {\n            exponent--;\n        }\n\n        Dfp tempDfp = DfpMath.pow(getTwo(), exponent);\n        while (tempDfp.lessThan(y) || tempDfp.equals(y)) {\n            tempDfp = tempDfp.multiply(2);\n            exponent++;\n        }\n        exponent--;\n\n        /* We have the exponent, now work on the mantissa */\n\n        y = y.divide(DfpMath.pow(getTwo(), exponent));\n        if (exponent > -1023) {\n            y = y.subtract(getOne());\n        }\n\n        if (exponent < -1074) {\n            return 0;\n        }\n\n        if (exponent > 1023) {\n            return negate ? Double.NEGATIVE_INFINITY : Double.POSITIVE_INFINITY;\n        }\n\n\n        y = y.multiply(newInstance(4503599627370496l)).rint();\n        String str = y.toString();\n        str = str.substring(0, str.length()-1);\n        long mantissa = Long.parseLong(str);\n\n        if (mantissa == 4503599627370496L) {\n            // Handle special case where we round up to next power of two\n            mantissa = 0;\n            exponent++;\n        }\n\n        /* Its going to be subnormal, so make adjustments */\n        if (exponent <= -1023) {\n            exponent--;\n        }\n\n        while (exponent < -1023) {\n            exponent++;\n            mantissa >>>= 1;\n        }\n\n        long bits = mantissa | ((exponent + 1023L) << 52);\n        double x = Double.longBitsToDouble(bits);\n\n        if (negate) {\n            x = -x;\n        }\n\n        return x;\n\n    }\n\n    /** Convert the instance into a split double.\n     * @return an array of two doubles which sum represent the instance\n     * @see #toDouble()\n     */\n    public double[] toSplitDouble() {\n        double split[] = new double[2];\n        long mask = 0xffffffffc0000000L;\n\n        split[0] = Double.longBitsToDouble(Double.doubleToLongBits(toDouble()) & mask);\n        split[1] = subtract(newInstance(split[0])).toDouble();\n\n        return split;\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public double getReal() {\n        return toDouble();\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp add(final double a) {\n        return add(newInstance(a));\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp subtract(final double a) {\n        return subtract(newInstance(a));\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp multiply(final double a) {\n        return multiply(newInstance(a));\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp divide(final double a) {\n        return divide(newInstance(a));\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp remainder(final double a) {\n        return remainder(newInstance(a));\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public long round() {\n        return FastMath.round(toDouble());\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp signum() {\n        if (isNaN() || isZero()) {\n            return this;\n        } else {\n            return newInstance(sign > 0 ? +1 : -1);\n        }\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp copySign(final Dfp s) {\n        if ((sign >= 0 && s.sign >= 0) || (sign < 0 && s.sign < 0)) { // Sign is currently OK\n            return this;\n        }\n        return negate(); // flip sign\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp copySign(final double s) {\n        long sb = Double.doubleToLongBits(s);\n        if ((sign >= 0 && sb >= 0) || (sign < 0 && sb < 0)) { // Sign is currently OK\n            return this;\n        }\n        return negate(); // flip sign\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp scalb(final int n) {\n        return multiply(DfpMath.pow(getTwo(), n));\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp hypot(final Dfp y) {\n        return multiply(this).add(y.multiply(y)).sqrt();\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp cbrt() {\n        return rootN(3);\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp rootN(final int n) {\n        return (sign >= 0) ?\n               DfpMath.pow(this, getOne().divide(n)) :\n               DfpMath.pow(negate(), getOne().divide(n)).negate();\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp pow(final double p) {\n        return DfpMath.pow(this, newInstance(p));\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp pow(final int n) {\n        return DfpMath.pow(this, n);\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp pow(final Dfp e) {\n        return DfpMath.pow(this, e);\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp exp() {\n        return DfpMath.exp(this);\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp expm1() {\n        return DfpMath.exp(this).subtract(getOne());\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp log() {\n        return DfpMath.log(this);\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp log1p() {\n        return DfpMath.log(this.add(getOne()));\n    }\n\n//  TODO: deactivate this implementation (and return type) in 4.0\n    /** Get the exponent of the greatest power of 10 that is less than or equal to abs(this).\n     *  @return integer base 10 logarithm\n     *  @deprecated as of 3.2, replaced by {@link #intLog10()}, in 4.0 the return type\n     *  will be changed to Dfp\n     */\n    @Deprecated\n    public int log10()  {\n        return intLog10();\n    }\n\n//    TODO: activate this implementation (and return type) in 4.0\n//    /** {@inheritDoc}\n//     * @since 3.2\n//     */\n//    public Dfp log10() {\n//        return DfpMath.log(this).divide(DfpMath.log(newInstance(10)));\n//    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp cos() {\n        return DfpMath.cos(this);\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp sin() {\n        return DfpMath.sin(this);\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp tan() {\n        return DfpMath.tan(this);\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp acos() {\n        return DfpMath.acos(this);\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp asin() {\n        return DfpMath.asin(this);\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp atan() {\n        return DfpMath.atan(this);\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp atan2(final Dfp x)\n        throws DimensionMismatchException {\n\n        // compute r = sqrt(x^2+y^2)\n        final Dfp r = x.multiply(x).add(multiply(this)).sqrt();\n\n        if (x.sign >= 0) {\n\n            // compute atan2(y, x) = 2 atan(y / (r + x))\n            return getTwo().multiply(divide(r.add(x)).atan());\n\n        } else {\n\n            // compute atan2(y, x) = +/- pi - 2 atan(y / (r - x))\n            final Dfp tmp = getTwo().multiply(divide(r.subtract(x)).atan());\n            final Dfp pmPi = newInstance((tmp.sign <= 0) ? -FastMath.PI : FastMath.PI);\n            return pmPi.subtract(tmp);\n\n        }\n\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp cosh() {\n        return DfpMath.exp(this).add(DfpMath.exp(negate())).divide(2);\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp sinh() {\n        return DfpMath.exp(this).subtract(DfpMath.exp(negate())).divide(2);\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp tanh() {\n        final Dfp ePlus  = DfpMath.exp(this);\n        final Dfp eMinus = DfpMath.exp(negate());\n        return ePlus.subtract(eMinus).divide(ePlus.add(eMinus));\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp acosh() {\n        return multiply(this).subtract(getOne()).sqrt().add(this).log();\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp asinh() {\n        return multiply(this).add(getOne()).sqrt().add(this).log();\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp atanh() {\n        return getOne().add(this).divide(getOne().subtract(this)).log().divide(2);\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp linearCombination(final Dfp[] a, final Dfp[] b)\n        throws DimensionMismatchException {\n        if (a.length != b.length) {\n            throw new DimensionMismatchException(a.length, b.length);\n        }\n        Dfp r = getZero();\n        for (int i = 0; i < a.length; ++i) {\n            r = r.add(a[i].multiply(b[i]));\n        }\n        return r;\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp linearCombination(final double[] a, final Dfp[] b)\n        throws DimensionMismatchException {\n        if (a.length != b.length) {\n            throw new DimensionMismatchException(a.length, b.length);\n        }\n        Dfp r = getZero();\n        for (int i = 0; i < a.length; ++i) {\n            r = r.add(b[i].multiply(a[i]));\n        }\n        return r;\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp linearCombination(final Dfp a1, final Dfp b1, final Dfp a2, final Dfp b2) {\n        return a1.multiply(b1).add(a2.multiply(b2));\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp linearCombination(final double a1, final Dfp b1, final double a2, final Dfp b2) {\n        return b1.multiply(a1).add(b2.multiply(a2));\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp linearCombination(final Dfp a1, final Dfp b1,\n                                 final Dfp a2, final Dfp b2,\n                                 final Dfp a3, final Dfp b3) {\n        return a1.multiply(b1).add(a2.multiply(b2)).add(a3.multiply(b3));\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp linearCombination(final double a1, final Dfp b1,\n                                 final double a2, final Dfp b2,\n                                 final double a3, final Dfp b3) {\n        return b1.multiply(a1).add(b2.multiply(a2)).add(b3.multiply(a3));\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp linearCombination(final Dfp a1, final Dfp b1, final Dfp a2, final Dfp b2,\n                                 final Dfp a3, final Dfp b3, final Dfp a4, final Dfp b4) {\n        return a1.multiply(b1).add(a2.multiply(b2)).add(a3.multiply(b3)).add(a4.multiply(b4));\n    }\n\n    /** {@inheritDoc}\n     * @since 3.2\n     */\n    public Dfp linearCombination(final double a1, final Dfp b1, final double a2, final Dfp b2,\n                                 final double a3, final Dfp b3, final double a4, final Dfp b4) {\n        return b1.multiply(a1).add(b2.multiply(a2)).add(b3.multiply(a3)).add(b4.multiply(a4));\n    }\n\n}\n",
  "tokensGeneralGrammar" : [ "null", "true", "false", ",", ".", ":", ";", "?", "(", ")", "jdVar", "stream", "Arrays", "allMatch", "noneMatch", "anyMatch", "~", ">>", "<<", ">>>", "|", "&", "^", "+", "-", "/", "*", "%", "&&", "||", ">=", "<=", ">", "<", "==", "!=", "instanceof", "class", "methodResultID", "this" ],
  "tokensGeneralValuesGlobalDictionary" : [ [ "0", "int" ], [ "1", "int" ], [ "-1", "int" ], [ "0.0", "double" ], [ "1.0", "double" ], [ "-1.0", "double" ], [ "\"\"", "String" ], [ "\" \"", "String" ] ],
  "tokensProjectClasses" : [ [ "RealFieldElement", "org.apache.commons.math3" ], [ "Primes", "org.apache.commons.math3.primes" ], [ "SmallPrimes", "org.apache.commons.math3.primes" ], [ "PollardRho", "org.apache.commons.math3.primes" ], [ "CurveFitter", "org.apache.commons.math3.fitting" ], [ "GaussianCurveFitter", "org.apache.commons.math3.fitting" ], [ "SimpleCurveFitter", "org.apache.commons.math3.fitting" ], [ "PolynomialFitter", "org.apache.commons.math3.fitting" ], [ "HarmonicFitter", "org.apache.commons.math3.fitting" ], [ "WeightedObservedPoint", "org.apache.commons.math3.fitting" ], [ "ParameterValidator", "org.apache.commons.math3.fitting.leastsquares" ], [ "LevenbergMarquardtOptimizer", "org.apache.commons.math3.fitting.leastsquares" ], [ "EvaluationRmsChecker", "org.apache.commons.math3.fitting.leastsquares" ], [ "OptimumImpl", "org.apache.commons.math3.fitting.leastsquares" ], [ "LeastSquaresAdapter", "org.apache.commons.math3.fitting.leastsquares" ], [ "DenseWeightedEvaluation", "org.apache.commons.math3.fitting.leastsquares" ], [ "LeastSquaresOptimizer", "org.apache.commons.math3.fitting.leastsquares" ], [ "AbstractEvaluation", "org.apache.commons.math3.fitting.leastsquares" ], [ "GaussNewtonOptimizer", "org.apache.commons.math3.fitting.leastsquares" ], [ "LeastSquaresFactory", "org.apache.commons.math3.fitting.leastsquares" ], [ "ValueAndJacobianFunction", "org.apache.commons.math3.fitting.leastsquares" ], [ "MultivariateJacobianFunction", "org.apache.commons.math3.fitting.leastsquares" ], [ "LeastSquaresBuilder", "org.apache.commons.math3.fitting.leastsquares" ], [ "LeastSquaresProblem", "org.apache.commons.math3.fitting.leastsquares" ], [ "WeightedObservedPoints", "org.apache.commons.math3.fitting" ], [ "GaussianFitter", "org.apache.commons.math3.fitting" ], [ "AbstractCurveFitter", "org.apache.commons.math3.fitting" ], [ "HarmonicCurveFitter", "org.apache.commons.math3.fitting" ], [ "PolynomialCurveFitter", "org.apache.commons.math3.fitting" ], [ "UnivariateMatrixFunction", "org.apache.commons.math3.analysis" ], [ "FunctionUtils", "org.apache.commons.math3.analysis" ], [ "DifferentiableUnivariateMatrixFunction", "org.apache.commons.math3.analysis" ], [ "IterativeLegendreGaussIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "LegendreGaussIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "MidPointIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "RombergIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "SimpsonIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "BaseRuleFactory", "org.apache.commons.math3.analysis.integration.gauss" ], [ "HermiteRuleFactory", "org.apache.commons.math3.analysis.integration.gauss" ], [ "GaussIntegratorFactory", "org.apache.commons.math3.analysis.integration.gauss" ], [ "LegendreRuleFactory", "org.apache.commons.math3.analysis.integration.gauss" ], [ "LegendreHighPrecisionRuleFactory", "org.apache.commons.math3.analysis.integration.gauss" ], [ "SymmetricGaussIntegrator", "org.apache.commons.math3.analysis.integration.gauss" ], [ "GaussIntegrator", "org.apache.commons.math3.analysis.integration.gauss" ], [ "BaseAbstractUnivariateIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "UnivariateIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "TrapezoidIntegrator", "org.apache.commons.math3.analysis.integration" ], [ "BivariateFunction", "org.apache.commons.math3.analysis" ], [ "DifferentiableUnivariateFunction", "org.apache.commons.math3.analysis" ], [ "DifferentiableUnivariateVectorFunction", "org.apache.commons.math3.analysis" ], [ "UnivariateVectorFunction", "org.apache.commons.math3.analysis" ], [ "AbstractDifferentiableUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "AbstractUnivariateDifferentiableSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BaseUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "PegasusSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BracketedUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "UnivariateSolverUtils", "org.apache.commons.math3.analysis.solvers" ], [ "FieldBracketingNthOrderBrentSolver", "org.apache.commons.math3.analysis.solvers" ], [ "NewtonRaphsonSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BaseSecantSolver", "org.apache.commons.math3.analysis.solvers" ], [ "SecantSolver", "org.apache.commons.math3.analysis.solvers" ], [ "DifferentiableUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "UnivariateDifferentiableSolver", "org.apache.commons.math3.analysis.solvers" ], [ "MullerSolver2", "org.apache.commons.math3.analysis.solvers" ], [ "AbstractPolynomialSolver", "org.apache.commons.math3.analysis.solvers" ], [ "MullerSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BaseAbstractUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BrentSolver", "org.apache.commons.math3.analysis.solvers" ], [ "LaguerreSolver", "org.apache.commons.math3.analysis.solvers" ], [ "IllinoisSolver", "org.apache.commons.math3.analysis.solvers" ], [ "PolynomialSolver", "org.apache.commons.math3.analysis.solvers" ], [ "RegulaFalsiSolver", "org.apache.commons.math3.analysis.solvers" ], [ "AllowedSolution", "org.apache.commons.math3.analysis.solvers" ], [ "NewtonSolver", "org.apache.commons.math3.analysis.solvers" ], [ "RiddersSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BisectionSolver", "org.apache.commons.math3.analysis.solvers" ], [ "AbstractUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "UnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BracketingNthOrderBrentSolver", "org.apache.commons.math3.analysis.solvers" ], [ "BracketedRealFieldUnivariateSolver", "org.apache.commons.math3.analysis.solvers" ], [ "Asin", "org.apache.commons.math3.analysis.function" ], [ "Cosh", "org.apache.commons.math3.analysis.function" ], [ "Multiply", "org.apache.commons.math3.analysis.function" ], [ "Atan", "org.apache.commons.math3.analysis.function" ], [ "Asinh", "org.apache.commons.math3.analysis.function" ], [ "Rint", "org.apache.commons.math3.analysis.function" ], [ "Cos", "org.apache.commons.math3.analysis.function" ], [ "StepFunction", "org.apache.commons.math3.analysis.function" ], [ "Add", "org.apache.commons.math3.analysis.function" ], [ "Sqrt", "org.apache.commons.math3.analysis.function" ], [ "Inverse", "org.apache.commons.math3.analysis.function" ], [ "Gaussian", "org.apache.commons.math3.analysis.function" ], [ "Pow", "org.apache.commons.math3.analysis.function" ], [ "Exp", "org.apache.commons.math3.analysis.function" ], [ "Tanh", "org.apache.commons.math3.analysis.function" ], [ "Cbrt", "org.apache.commons.math3.analysis.function" ], [ "Log1p", "org.apache.commons.math3.analysis.function" ], [ "Constant", "org.apache.commons.math3.analysis.function" ], [ "Identity", "org.apache.commons.math3.analysis.function" ], [ "Signum", "org.apache.commons.math3.analysis.function" ], [ "Logit", "org.apache.commons.math3.analysis.function" ], [ "Ceil", "org.apache.commons.math3.analysis.function" ], [ "Subtract", "org.apache.commons.math3.analysis.function" ], [ "Sinh", "org.apache.commons.math3.analysis.function" ], [ "Max", "org.apache.commons.math3.analysis.function" ], [ "Acosh", "org.apache.commons.math3.analysis.function" ], [ "Min", "org.apache.commons.math3.analysis.function" ], [ "Expm1", "org.apache.commons.math3.analysis.function" ], [ "Abs", "org.apache.commons.math3.analysis.function" ], [ "Divide", "org.apache.commons.math3.analysis.function" ], [ "Log", "org.apache.commons.math3.analysis.function" ], [ "Ulp", "org.apache.commons.math3.analysis.function" ], [ "Log10", "org.apache.commons.math3.analysis.function" ], [ "Power", "org.apache.commons.math3.analysis.function" ], [ "Minus", "org.apache.commons.math3.analysis.function" ], [ "Atan2", "org.apache.commons.math3.analysis.function" ], [ "Logistic", "org.apache.commons.math3.analysis.function" ], [ "Acos", "org.apache.commons.math3.analysis.function" ], [ "Floor", "org.apache.commons.math3.analysis.function" ], [ "Sigmoid", "org.apache.commons.math3.analysis.function" ], [ "Sinc", "org.apache.commons.math3.analysis.function" ], [ "Atanh", "org.apache.commons.math3.analysis.function" ], [ "HarmonicOscillator", "org.apache.commons.math3.analysis.function" ], [ "Tan", "org.apache.commons.math3.analysis.function" ], [ "Sin", "org.apache.commons.math3.analysis.function" ], [ "MultivariateFunction", "org.apache.commons.math3.analysis" ], [ "DifferentiableMultivariateFunction", "org.apache.commons.math3.analysis" ], [ "UnivariateFunction", "org.apache.commons.math3.analysis" ], [ "TrivariateFunction", "org.apache.commons.math3.analysis" ], [ "MultivariateMatrixFunction", "org.apache.commons.math3.analysis" ], [ "ParametricUnivariateFunction", "org.apache.commons.math3.analysis" ], [ "UnivariateDifferentiableVectorFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "UnivariateDifferentiableMatrixFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "DSCompiler", "org.apache.commons.math3.analysis.differentiation" ], [ "SparseGradient", "org.apache.commons.math3.analysis.differentiation" ], [ "UnivariateFunctionDifferentiator", "org.apache.commons.math3.analysis.differentiation" ], [ "UnivariateMatrixFunctionDifferentiator", "org.apache.commons.math3.analysis.differentiation" ], [ "MultivariateDifferentiableFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "JacobianFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "GradientFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "DerivativeStructure", "org.apache.commons.math3.analysis.differentiation" ], [ "UnivariateVectorFunctionDifferentiator", "org.apache.commons.math3.analysis.differentiation" ], [ "FiniteDifferencesDifferentiator", "org.apache.commons.math3.analysis.differentiation" ], [ "MultivariateDifferentiableVectorFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "UnivariateDifferentiableFunction", "org.apache.commons.math3.analysis.differentiation" ], [ "MultivariateVectorFunction", "org.apache.commons.math3.analysis" ], [ "DifferentiableMultivariateVectorFunction", "org.apache.commons.math3.analysis" ], [ "PolynomialFunctionNewtonForm", "org.apache.commons.math3.analysis.polynomials" ], [ "PolynomialFunctionLagrangeForm", "org.apache.commons.math3.analysis.polynomials" ], [ "PolynomialSplineFunction", "org.apache.commons.math3.analysis.polynomials" ], [ "PolynomialsUtils", "org.apache.commons.math3.analysis.polynomials" ], [ "PolynomialFunction", "org.apache.commons.math3.analysis.polynomials" ], [ "RealFieldUnivariateFunction", "org.apache.commons.math3.analysis" ], [ "TricubicInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "BicubicSplineInterpolatingFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "BicubicSplineFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "LoessInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "DividedDifferenceInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "HermiteInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "TricubicInterpolatingFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "TricubicFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "TrivariateGridInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "NevilleInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "MicrosphereProjectionInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "AkimaSplineInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "MultivariateInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "BicubicSplineInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "TricubicSplineInterpolatingFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "TricubicSplineFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "FieldHermiteInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "InterpolatingMicrosphere", "org.apache.commons.math3.analysis.interpolation" ], [ "LinearInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "BivariateGridInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "UnivariatePeriodicInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "BicubicInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "UnivariateInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "SmoothingPolynomialBicubicSplineInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "PiecewiseBicubicSplineInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "BicubicInterpolatingFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "BicubicFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "SplineInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "TricubicSplineInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "InterpolatingMicrosphere2D", "org.apache.commons.math3.analysis.interpolation" ], [ "PiecewiseBicubicSplineInterpolatingFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "MicrosphereInterpolatingFunction", "org.apache.commons.math3.analysis.interpolation" ], [ "MicrosphereInterpolator", "org.apache.commons.math3.analysis.interpolation" ], [ "Precision", "org.apache.commons.math3.util" ], [ "MultidimensionalCounter", "org.apache.commons.math3.util" ], [ "DoubleArray", "org.apache.commons.math3.util" ], [ "Incrementor", "org.apache.commons.math3.util" ], [ "OpenIntToDoubleHashMap", "org.apache.commons.math3.util" ], [ "OpenIntToFieldHashMap", "org.apache.commons.math3.util" ], [ "MathArrays", "org.apache.commons.math3.util" ], [ "Pair", "org.apache.commons.math3.util" ], [ "FastMathCalc", "org.apache.commons.math3.util" ], [ "FastMath", "org.apache.commons.math3.util" ], [ "ResizableDoubleArray", "org.apache.commons.math3.util" ], [ "BigRealField", "org.apache.commons.math3.util" ], [ "Decimal64Field", "org.apache.commons.math3.util" ], [ "Combinations", "org.apache.commons.math3.util" ], [ "MathUtils", "org.apache.commons.math3.util" ], [ "NumberTransformer", "org.apache.commons.math3.util" ], [ "ContinuedFraction", "org.apache.commons.math3.util" ], [ "RandomPivotingStrategy", "org.apache.commons.math3.util" ], [ "IterationManager", "org.apache.commons.math3.util" ], [ "CompositeFormat", "org.apache.commons.math3.util" ], [ "KthSelector", "org.apache.commons.math3.util" ], [ "IterationEvent", "org.apache.commons.math3.util" ], [ "TransformerMap", "org.apache.commons.math3.util" ], [ "IntegerSequence", "org.apache.commons.math3.util" ], [ "FastMathLiteralArrays", "org.apache.commons.math3.util" ], [ "CombinatoricsUtils", "org.apache.commons.math3.util" ], [ "IterationListener", "org.apache.commons.math3.util" ], [ "PivotingStrategyInterface", "org.apache.commons.math3.util" ], [ "CentralPivotingStrategy", "org.apache.commons.math3.util" ], [ "Decimal64", "org.apache.commons.math3.util" ], [ "DefaultTransformer", "org.apache.commons.math3.util" ], [ "BigReal", "org.apache.commons.math3.util" ], [ "ArithmeticUtils", "org.apache.commons.math3.util" ], [ "MedianOf3PivotingStrategy", "org.apache.commons.math3.util" ], [ "ComplexFormat", "org.apache.commons.math3.complex" ], [ "ComplexField", "org.apache.commons.math3.complex" ], [ "RootsOfUnity", "org.apache.commons.math3.complex" ], [ "Quaternion", "org.apache.commons.math3.complex" ], [ "Complex", "org.apache.commons.math3.complex" ], [ "ComplexUtils", "org.apache.commons.math3.complex" ], [ "DifferentiableMultivariateVectorOptimizer", "org.apache.commons.math3.optimization" ], [ "LeastSquaresConverter", "org.apache.commons.math3.optimization" ], [ "BaseMultivariateSimpleBoundsOptimizer", "org.apache.commons.math3.optimization" ], [ "PointValuePair", "org.apache.commons.math3.optimization" ], [ "DifferentiableMultivariateOptimizer", "org.apache.commons.math3.optimization" ], [ "SimpleValueChecker", "org.apache.commons.math3.optimization" ], [ "CurveFitter", "org.apache.commons.math3.optimization.fitting" ], [ "PolynomialFitter", "org.apache.commons.math3.optimization.fitting" ], [ "HarmonicFitter", "org.apache.commons.math3.optimization.fitting" ], [ "WeightedObservedPoint", "org.apache.commons.math3.optimization.fitting" ], [ "GaussianFitter", "org.apache.commons.math3.optimization.fitting" ], [ "AbstractConvergenceChecker", "org.apache.commons.math3.optimization" ], [ "AbstractSimplex", "org.apache.commons.math3.optimization.direct" ], [ "SimplexOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "BOBYQAOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "NelderMeadSimplex", "org.apache.commons.math3.optimization.direct" ], [ "MultivariateFunctionMappingAdapter", "org.apache.commons.math3.optimization.direct" ], [ "BaseAbstractMultivariateSimpleBoundsOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "BaseAbstractMultivariateVectorOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "CMAESOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "MultivariateFunctionPenaltyAdapter", "org.apache.commons.math3.optimization.direct" ], [ "BaseAbstractMultivariateOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "PowellOptimizer", "org.apache.commons.math3.optimization.direct" ], [ "MultiDirectionalSimplex", "org.apache.commons.math3.optimization.direct" ], [ "InitialGuess", "org.apache.commons.math3.optimization" ], [ "Preconditioner", "org.apache.commons.math3.optimization.general" ], [ "LevenbergMarquardtOptimizer", "org.apache.commons.math3.optimization.general" ], [ "AbstractLeastSquaresOptimizer", "org.apache.commons.math3.optimization.general" ], [ "AbstractDifferentiableOptimizer", "org.apache.commons.math3.optimization.general" ], [ "GaussNewtonOptimizer", "org.apache.commons.math3.optimization.general" ], [ "AbstractScalarDifferentiableOptimizer", "org.apache.commons.math3.optimization.general" ], [ "NonLinearConjugateGradientOptimizer", "org.apache.commons.math3.optimization.general" ], [ "ConjugateGradientFormula", "org.apache.commons.math3.optimization.general" ], [ "BaseMultivariateVectorMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "NoFeasibleSolutionException", "org.apache.commons.math3.optimization.linear" ], [ "AbstractLinearOptimizer", "org.apache.commons.math3.optimization.linear" ], [ "LinearConstraint", "org.apache.commons.math3.optimization.linear" ], [ "SimplexSolver", "org.apache.commons.math3.optimization.linear" ], [ "LinearOptimizer", "org.apache.commons.math3.optimization.linear" ], [ "UnboundedSolutionException", "org.apache.commons.math3.optimization.linear" ], [ "SimplexTableau", "org.apache.commons.math3.optimization.linear" ], [ "LinearObjectiveFunction", "org.apache.commons.math3.optimization.linear" ], [ "Relationship", "org.apache.commons.math3.optimization.linear" ], [ "SimpleBounds", "org.apache.commons.math3.optimization" ], [ "PointVectorValuePair", "org.apache.commons.math3.optimization" ], [ "MultivariateDifferentiableVectorMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "DifferentiableMultivariateMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "SimplePointChecker", "org.apache.commons.math3.optimization" ], [ "SimpleVectorValueChecker", "org.apache.commons.math3.optimization" ], [ "BaseOptimizer", "org.apache.commons.math3.optimization" ], [ "MultivariateOptimizer", "org.apache.commons.math3.optimization" ], [ "GoalType", "org.apache.commons.math3.optimization" ], [ "BrentOptimizer", "org.apache.commons.math3.optimization.univariate" ], [ "UnivariateMultiStartOptimizer", "org.apache.commons.math3.optimization.univariate" ], [ "BaseUnivariateOptimizer", "org.apache.commons.math3.optimization.univariate" ], [ "BaseAbstractUnivariateOptimizer", "org.apache.commons.math3.optimization.univariate" ], [ "SimpleUnivariateValueChecker", "org.apache.commons.math3.optimization.univariate" ], [ "UnivariatePointValuePair", "org.apache.commons.math3.optimization.univariate" ], [ "BracketFinder", "org.apache.commons.math3.optimization.univariate" ], [ "UnivariateOptimizer", "org.apache.commons.math3.optimization.univariate" ], [ "BaseMultivariateOptimizer", "org.apache.commons.math3.optimization" ], [ "ConvergenceChecker", "org.apache.commons.math3.optimization" ], [ "BaseMultivariateMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "MultivariateDifferentiableOptimizer", "org.apache.commons.math3.optimization" ], [ "MultivariateDifferentiableVectorOptimizer", "org.apache.commons.math3.optimization" ], [ "Target", "org.apache.commons.math3.optimization" ], [ "Weight", "org.apache.commons.math3.optimization" ], [ "MultivariateMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "OptimizationData", "org.apache.commons.math3.optimization" ], [ "BaseMultivariateVectorOptimizer", "org.apache.commons.math3.optimization" ], [ "MultivariateDifferentiableMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "DifferentiableMultivariateVectorMultiStartOptimizer", "org.apache.commons.math3.optimization" ], [ "NonSymmetricMatrixException", "org.apache.commons.math3.linear" ], [ "FieldVectorPreservingVisitor", "org.apache.commons.math3.linear" ], [ "FieldVector", "org.apache.commons.math3.linear" ], [ "AnyMatrix", "org.apache.commons.math3.linear" ], [ "NonSquareOperatorException", "org.apache.commons.math3.linear" ], [ "SingularValueDecomposition", "org.apache.commons.math3.linear" ], [ "EigenDecomposition", "org.apache.commons.math3.linear" ], [ "RealMatrixChangingVisitor", "org.apache.commons.math3.linear" ], [ "FieldLUDecomposition", "org.apache.commons.math3.linear" ], [ "NonPositiveDefiniteMatrixException", "org.apache.commons.math3.linear" ], [ "RealMatrixFormat", "org.apache.commons.math3.linear" ], [ "MatrixUtils", "org.apache.commons.math3.linear" ], [ "OpenMapRealVector", "org.apache.commons.math3.linear" ], [ "RealMatrixPreservingVisitor", "org.apache.commons.math3.linear" ], [ "SingularMatrixException", "org.apache.commons.math3.linear" ], [ "DefaultFieldMatrixPreservingVisitor", "org.apache.commons.math3.linear" ], [ "FieldVectorChangingVisitor", "org.apache.commons.math3.linear" ], [ "TriDiagonalTransformer", "org.apache.commons.math3.linear" ], [ "DefaultRealMatrixChangingVisitor", "org.apache.commons.math3.linear" ], [ "AbstractRealMatrix", "org.apache.commons.math3.linear" ], [ "Array2DRowRealMatrix", "org.apache.commons.math3.linear" ], [ "BlockFieldMatrix", "org.apache.commons.math3.linear" ], [ "Array2DRowFieldMatrix", "org.apache.commons.math3.linear" ], [ "FieldMatrix", "org.apache.commons.math3.linear" ], [ "IterativeLinearSolver", "org.apache.commons.math3.linear" ], [ "ArrayRealVector", "org.apache.commons.math3.linear" ], [ "MatrixDimensionMismatchException", "org.apache.commons.math3.linear" ], [ "ArrayFieldVector", "org.apache.commons.math3.linear" ], [ "DecompositionSolver", "org.apache.commons.math3.linear" ], [ "LUDecomposition", "org.apache.commons.math3.linear" ], [ "ConjugateGradient", "org.apache.commons.math3.linear" ], [ "NonPositiveDefiniteOperatorException", "org.apache.commons.math3.linear" ], [ "OpenMapRealMatrix", "org.apache.commons.math3.linear" ], [ "NonSelfAdjointOperatorException", "org.apache.commons.math3.linear" ], [ "BiDiagonalTransformer", "org.apache.commons.math3.linear" ], [ "CholeskyDecomposition", "org.apache.commons.math3.linear" ], [ "FieldDecompositionSolver", "org.apache.commons.math3.linear" ], [ "RealVectorPreservingVisitor", "org.apache.commons.math3.linear" ], [ "SingularOperatorException", "org.apache.commons.math3.linear" ], [ "BlockRealMatrix", "org.apache.commons.math3.linear" ], [ "SparseFieldMatrix", "org.apache.commons.math3.linear" ], [ "NonSquareMatrixException", "org.apache.commons.math3.linear" ], [ "SparseRealMatrix", "org.apache.commons.math3.linear" ], [ "RealVector", "org.apache.commons.math3.linear" ], [ "FieldMatrixPreservingVisitor", "org.apache.commons.math3.linear" ], [ "PreconditionedIterativeLinearSolver", "org.apache.commons.math3.linear" ], [ "QRDecomposition", "org.apache.commons.math3.linear" ], [ "SymmLQ", "org.apache.commons.math3.linear" ], [ "SparseFieldVector", "org.apache.commons.math3.linear" ], [ "RealVectorFormat", "org.apache.commons.math3.linear" ], [ "IllConditionedOperatorException", "org.apache.commons.math3.linear" ], [ "DefaultIterativeLinearSolverEvent", "org.apache.commons.math3.linear" ], [ "DefaultRealMatrixPreservingVisitor", "org.apache.commons.math3.linear" ], [ "IterativeLinearSolverEvent", "org.apache.commons.math3.linear" ], [ "DiagonalMatrix", "org.apache.commons.math3.linear" ], [ "HessenbergTransformer", "org.apache.commons.math3.linear" ], [ "RectangularCholeskyDecomposition", "org.apache.commons.math3.linear" ], [ "FieldMatrixChangingVisitor", "org.apache.commons.math3.linear" ], [ "DefaultFieldMatrixChangingVisitor", "org.apache.commons.math3.linear" ], [ "JacobiPreconditioner", "org.apache.commons.math3.linear" ], [ "RealLinearOperator", "org.apache.commons.math3.linear" ], [ "RRQRDecomposition", "org.apache.commons.math3.linear" ], [ "AbstractFieldMatrix", "org.apache.commons.math3.linear" ], [ "RealMatrix", "org.apache.commons.math3.linear" ], [ "SchurTransformer", "org.apache.commons.math3.linear" ], [ "RealVectorChangingVisitor", "org.apache.commons.math3.linear" ], [ "SparseRealVector", "org.apache.commons.math3.linear" ], [ "CauchyDistribution", "org.apache.commons.math3.distribution" ], [ "LaplaceDistribution", "org.apache.commons.math3.distribution" ], [ "AbstractRealDistribution", "org.apache.commons.math3.distribution" ], [ "HypergeometricDistribution", "org.apache.commons.math3.distribution" ], [ "TDistribution", "org.apache.commons.math3.distribution" ], [ "ChiSquaredDistribution", "org.apache.commons.math3.distribution" ], [ "TriangularDistribution", "org.apache.commons.math3.distribution" ], [ "MultivariateNormalMixtureExpectationMaximization", "org.apache.commons.math3.distribution.fitting" ], [ "BetaDistribution", "org.apache.commons.math3.distribution" ], [ "RealDistribution", "org.apache.commons.math3.distribution" ], [ "NormalDistribution", "org.apache.commons.math3.distribution" ], [ "SaddlePointExpansion", "org.apache.commons.math3.distribution" ], [ "MixtureMultivariateNormalDistribution", "org.apache.commons.math3.distribution" ], [ "UniformRealDistribution", "org.apache.commons.math3.distribution" ], [ "GumbelDistribution", "org.apache.commons.math3.distribution" ], [ "ZipfDistribution", "org.apache.commons.math3.distribution" ], [ "BinomialDistribution", "org.apache.commons.math3.distribution" ], [ "EnumeratedIntegerDistribution", "org.apache.commons.math3.distribution" ], [ "IntegerDistribution", "org.apache.commons.math3.distribution" ], [ "WeibullDistribution", "org.apache.commons.math3.distribution" ], [ "MultivariateRealDistribution", "org.apache.commons.math3.distribution" ], [ "NakagamiDistribution", "org.apache.commons.math3.distribution" ], [ "EnumeratedDistribution", "org.apache.commons.math3.distribution" ], [ "ConstantRealDistribution", "org.apache.commons.math3.distribution" ], [ "MultivariateNormalDistribution", "org.apache.commons.math3.distribution" ], [ "ExponentialDistribution", "org.apache.commons.math3.distribution" ], [ "UniformIntegerDistribution", "org.apache.commons.math3.distribution" ], [ "LogNormalDistribution", "org.apache.commons.math3.distribution" ], [ "PascalDistribution", "org.apache.commons.math3.distribution" ], [ "ParetoDistribution", "org.apache.commons.math3.distribution" ], [ "FDistribution", "org.apache.commons.math3.distribution" ], [ "GeometricDistribution", "org.apache.commons.math3.distribution" ], [ "AbstractMultivariateRealDistribution", "org.apache.commons.math3.distribution" ], [ "AbstractIntegerDistribution", "org.apache.commons.math3.distribution" ], [ "PoissonDistribution", "org.apache.commons.math3.distribution" ], [ "KolmogorovSmirnovDistribution", "org.apache.commons.math3.distribution" ], [ "MixtureMultivariateRealDistribution", "org.apache.commons.math3.distribution" ], [ "GammaDistribution", "org.apache.commons.math3.distribution" ], [ "EnumeratedRealDistribution", "org.apache.commons.math3.distribution" ], [ "LogisticDistribution", "org.apache.commons.math3.distribution" ], [ "LevyDistribution", "org.apache.commons.math3.distribution" ], [ "PointValuePair", "org.apache.commons.math3.optim" ], [ "SimpleValueChecker", "org.apache.commons.math3.optim" ], [ "AbstractConvergenceChecker", "org.apache.commons.math3.optim" ], [ "InitialGuess", "org.apache.commons.math3.optim" ], [ "MaxIter", "org.apache.commons.math3.optim" ], [ "NoFeasibleSolutionException", "org.apache.commons.math3.optim.linear" ], [ "LinearConstraintSet", "org.apache.commons.math3.optim.linear" ], [ "LinearConstraint", "org.apache.commons.math3.optim.linear" ], [ "PivotSelectionRule", "org.apache.commons.math3.optim.linear" ], [ "SimplexSolver", "org.apache.commons.math3.optim.linear" ], [ "LinearOptimizer", "org.apache.commons.math3.optim.linear" ], [ "UnboundedSolutionException", "org.apache.commons.math3.optim.linear" ], [ "SimplexTableau", "org.apache.commons.math3.optim.linear" ], [ "SolutionCallback", "org.apache.commons.math3.optim.linear" ], [ "LinearObjectiveFunction", "org.apache.commons.math3.optim.linear" ], [ "NonNegativeConstraint", "org.apache.commons.math3.optim.linear" ], [ "Relationship", "org.apache.commons.math3.optim.linear" ], [ "AbstractOptimizationProblem", "org.apache.commons.math3.optim" ], [ "SimpleBounds", "org.apache.commons.math3.optim" ], [ "PointVectorValuePair", "org.apache.commons.math3.optim" ], [ "SimplePointChecker", "org.apache.commons.math3.optim" ], [ "SimpleVectorValueChecker", "org.apache.commons.math3.optim" ], [ "BaseOptimizer", "org.apache.commons.math3.optim" ], [ "BaseMultiStartMultivariateOptimizer", "org.apache.commons.math3.optim" ], [ "MultiStartUnivariateOptimizer", "org.apache.commons.math3.optim.univariate" ], [ "BrentOptimizer", "org.apache.commons.math3.optim.univariate" ], [ "UnivariateObjectiveFunction", "org.apache.commons.math3.optim.univariate" ], [ "SimpleUnivariateValueChecker", "org.apache.commons.math3.optim.univariate" ], [ "SearchInterval", "org.apache.commons.math3.optim.univariate" ], [ "UnivariatePointValuePair", "org.apache.commons.math3.optim.univariate" ], [ "BracketFinder", "org.apache.commons.math3.optim.univariate" ], [ "UnivariateOptimizer", "org.apache.commons.math3.optim.univariate" ], [ "BaseMultivariateOptimizer", "org.apache.commons.math3.optim" ], [ "ConvergenceChecker", "org.apache.commons.math3.optim" ], [ "OptimizationProblem", "org.apache.commons.math3.optim" ], [ "MaxEval", "org.apache.commons.math3.optim" ], [ "OptimizationData", "org.apache.commons.math3.optim" ], [ "Preconditioner", "org.apache.commons.math3.optim.nonlinear.scalar.gradient" ], [ "NonLinearConjugateGradientOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar.gradient" ], [ "LeastSquaresConverter", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "GradientMultivariateOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "MultivariateFunctionMappingAdapter", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "LineSearch", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "ObjectiveFunction", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "MultivariateOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "GoalType", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "AbstractSimplex", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "SimplexOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "BOBYQAOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "NelderMeadSimplex", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "CMAESOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "PowellOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "MultiDirectionalSimplex", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv" ], [ "MultiStartMultivariateOptimizer", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "MultivariateFunctionPenaltyAdapter", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "ObjectiveFunctionGradient", "org.apache.commons.math3.optim.nonlinear.scalar" ], [ "ModelFunction", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "LevenbergMarquardtOptimizer", "org.apache.commons.math3.optim.nonlinear.vector.jacobian" ], [ "AbstractLeastSquaresOptimizer", "org.apache.commons.math3.optim.nonlinear.vector.jacobian" ], [ "GaussNewtonOptimizer", "org.apache.commons.math3.optim.nonlinear.vector.jacobian" ], [ "ModelFunctionJacobian", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "JacobianMultivariateVectorOptimizer", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "MultivariateVectorOptimizer", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "Target", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "Weight", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "MultiStartMultivariateVectorOptimizer", "org.apache.commons.math3.optim.nonlinear.vector" ], [ "Erf", "org.apache.commons.math3.special" ], [ "BesselJ", "org.apache.commons.math3.special" ], [ "Gamma", "org.apache.commons.math3.special" ], [ "Beta", "org.apache.commons.math3.special" ], [ "FieldODEState", "org.apache.commons.math3.ode" ], [ "FieldODEStateAndDerivative", "org.apache.commons.math3.ode" ], [ "FirstOrderFieldDifferentialEquations", "org.apache.commons.math3.ode" ], [ "MultistepFieldIntegrator", "org.apache.commons.math3.ode" ], [ "ODEIntegrator", "org.apache.commons.math3.ode" ], [ "ParameterConfiguration", "org.apache.commons.math3.ode" ], [ "ContinuousOutputFieldModel", "org.apache.commons.math3.ode" ], [ "FirstOrderConverter", "org.apache.commons.math3.ode" ], [ "ParameterJacobianProvider", "org.apache.commons.math3.ode" ], [ "SecondOrderIntegrator", "org.apache.commons.math3.ode" ], [ "AbstractFieldIntegrator", "org.apache.commons.math3.ode" ], [ "ExpandableStatefulODE", "org.apache.commons.math3.ode" ], [ "MultistepIntegrator", "org.apache.commons.math3.ode" ], [ "Parameterizable", "org.apache.commons.math3.ode" ], [ "JacobianMatrices", "org.apache.commons.math3.ode" ], [ "StepNormalizer", "org.apache.commons.math3.ode.sampling" ], [ "FixedStepHandler", "org.apache.commons.math3.ode.sampling" ], [ "StepHandler", "org.apache.commons.math3.ode.sampling" ], [ "DummyStepHandler", "org.apache.commons.math3.ode.sampling" ], [ "FieldStepInterpolator", "org.apache.commons.math3.ode.sampling" ], [ "StepInterpolator", "org.apache.commons.math3.ode.sampling" ], [ "AbstractFieldStepInterpolator", "org.apache.commons.math3.ode.sampling" ], [ "FieldFixedStepHandler", "org.apache.commons.math3.ode.sampling" ], [ "StepNormalizerMode", "org.apache.commons.math3.ode.sampling" ], [ "AbstractStepInterpolator", "org.apache.commons.math3.ode.sampling" ], [ "FieldStepHandler", "org.apache.commons.math3.ode.sampling" ], [ "StepNormalizerBounds", "org.apache.commons.math3.ode.sampling" ], [ "NordsieckStepInterpolator", "org.apache.commons.math3.ode.sampling" ], [ "FieldStepNormalizer", "org.apache.commons.math3.ode.sampling" ], [ "RungeKuttaFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "GillIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince853FieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "EmbeddedRungeKuttaFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "HighamHall54FieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince54FieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "EulerFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "EulerStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "HighamHall54Integrator", "org.apache.commons.math3.ode.nonstiff" ], [ "MidpointStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "GillStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "LutherFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "GraggBulirschStoerIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "EmbeddedRungeKuttaIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince853StepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "HighamHall54FieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince54FieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "MidpointFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "ThreeEighthesFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "ThreeEighthesIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "ClassicalRungeKuttaIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsNordsieckTransformer", "org.apache.commons.math3.ode.nonstiff" ], [ "MidpointFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "MidpointIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "RungeKuttaStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince54StepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "LutherFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince54Integrator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "GraggBulirschStoerStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "ClassicalRungeKuttaStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "LutherIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdaptiveStepsizeIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "ClassicalRungeKuttaFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "EulerIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince853FieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "FieldButcherArrayProvider", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsMoultonIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "RungeKuttaFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "DormandPrince853Integrator", "org.apache.commons.math3.ode.nonstiff" ], [ "ThreeEighthesStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "EulerFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsMoultonFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "LutherStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "HighamHall54StepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsNordsieckFieldTransformer", "org.apache.commons.math3.ode.nonstiff" ], [ "ThreeEighthesFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "RungeKuttaIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsBashforthFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "ClassicalRungeKuttaFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdaptiveStepsizeFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "AdamsBashforthIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "GillFieldIntegrator", "org.apache.commons.math3.ode.nonstiff" ], [ "GillFieldStepInterpolator", "org.apache.commons.math3.ode.nonstiff" ], [ "FieldSecondaryEquations", "org.apache.commons.math3.ode" ], [ "MainStateJacobianProvider", "org.apache.commons.math3.ode" ], [ "SecondaryEquations", "org.apache.commons.math3.ode" ], [ "FirstOrderFieldIntegrator", "org.apache.commons.math3.ode" ], [ "ParameterJacobianWrapper", "org.apache.commons.math3.ode" ], [ "FieldEquationsMapper", "org.apache.commons.math3.ode" ], [ "FieldExpandableODE", "org.apache.commons.math3.ode" ], [ "ParameterizedWrapper", "org.apache.commons.math3.ode" ], [ "AbstractIntegrator", "org.apache.commons.math3.ode" ], [ "SecondOrderDifferentialEquations", "org.apache.commons.math3.ode" ], [ "AbstractParameterizable", "org.apache.commons.math3.ode" ], [ "UnknownParameterException", "org.apache.commons.math3.ode" ], [ "ContinuousOutputModel", "org.apache.commons.math3.ode" ], [ "FirstOrderDifferentialEquations", "org.apache.commons.math3.ode" ], [ "EquationsMapper", "org.apache.commons.math3.ode" ], [ "Transformer", "org.apache.commons.math3.ode.events" ], [ "FieldEventState", "org.apache.commons.math3.ode.events" ], [ "FieldEventHandler", "org.apache.commons.math3.ode.events" ], [ "EventHandler", "org.apache.commons.math3.ode.events" ], [ "Action", "org.apache.commons.math3.ode.events" ], [ "EventState", "org.apache.commons.math3.ode.events" ], [ "EventFilter", "org.apache.commons.math3.ode.events" ], [ "FilterType", "org.apache.commons.math3.ode.events" ], [ "ParameterizedODE", "org.apache.commons.math3.ode" ], [ "FirstOrderIntegrator", "org.apache.commons.math3.ode" ], [ "NaNStrategy", "org.apache.commons.math3.stat.ranking" ], [ "NaturalRanking", "org.apache.commons.math3.stat.ranking" ], [ "TiesStrategy", "org.apache.commons.math3.stat.ranking" ], [ "RankingAlgorithm", "org.apache.commons.math3.stat.ranking" ], [ "StatUtils", "org.apache.commons.math3.stat" ], [ "IntervalUtils", "org.apache.commons.math3.stat.interval" ], [ "AgrestiCoullInterval", "org.apache.commons.math3.stat.interval" ], [ "ConfidenceInterval", "org.apache.commons.math3.stat.interval" ], [ "WilsonScoreInterval", "org.apache.commons.math3.stat.interval" ], [ "ClopperPearsonInterval", "org.apache.commons.math3.stat.interval" ], [ "NormalApproximationInterval", "org.apache.commons.math3.stat.interval" ], [ "BinomialConfidenceInterval", "org.apache.commons.math3.stat.interval" ], [ "StorelessCovariance", "org.apache.commons.math3.stat.correlation" ], [ "StorelessBivariateCovariance", "org.apache.commons.math3.stat.correlation" ], [ "KendallsCorrelation", "org.apache.commons.math3.stat.correlation" ], [ "Covariance", "org.apache.commons.math3.stat.correlation" ], [ "PearsonsCorrelation", "org.apache.commons.math3.stat.correlation" ], [ "SpearmansCorrelation", "org.apache.commons.math3.stat.correlation" ], [ "DBSCANClusterer", "org.apache.commons.math3.stat.clustering" ], [ "EuclideanIntegerPoint", "org.apache.commons.math3.stat.clustering" ], [ "Cluster", "org.apache.commons.math3.stat.clustering" ], [ "EuclideanDoublePoint", "org.apache.commons.math3.stat.clustering" ], [ "Clusterable", "org.apache.commons.math3.stat.clustering" ], [ "KMeansPlusPlusClusterer", "org.apache.commons.math3.stat.clustering" ], [ "TestUtils", "org.apache.commons.math3.stat.inference" ], [ "TTest", "org.apache.commons.math3.stat.inference" ], [ "GTest", "org.apache.commons.math3.stat.inference" ], [ "AlternativeHypothesis", "org.apache.commons.math3.stat.inference" ], [ "MannWhitneyUTest", "org.apache.commons.math3.stat.inference" ], [ "WilcoxonSignedRankTest", "org.apache.commons.math3.stat.inference" ], [ "OneWayAnova", "org.apache.commons.math3.stat.inference" ], [ "ChiSquareTest", "org.apache.commons.math3.stat.inference" ], [ "BinomialTest", "org.apache.commons.math3.stat.inference" ], [ "KolmogorovSmirnovTest", "org.apache.commons.math3.stat.inference" ], [ "AbstractUnivariateStatistic", "org.apache.commons.math3.stat.descriptive" ], [ "SummaryStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "DescriptiveStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "MultivariateSummaryStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "SecondMoment", "org.apache.commons.math3.stat.descriptive.moment" ], [ "Mean", "org.apache.commons.math3.stat.descriptive.moment" ], [ "FourthMoment", "org.apache.commons.math3.stat.descriptive.moment" ], [ "Variance", "org.apache.commons.math3.stat.descriptive.moment" ], [ "Kurtosis", "org.apache.commons.math3.stat.descriptive.moment" ], [ "GeometricMean", "org.apache.commons.math3.stat.descriptive.moment" ], [ "StandardDeviation", "org.apache.commons.math3.stat.descriptive.moment" ], [ "VectorialCovariance", "org.apache.commons.math3.stat.descriptive.moment" ], [ "ThirdMoment", "org.apache.commons.math3.stat.descriptive.moment" ], [ "SemiVariance", "org.apache.commons.math3.stat.descriptive.moment" ], [ "FirstMoment", "org.apache.commons.math3.stat.descriptive.moment" ], [ "Skewness", "org.apache.commons.math3.stat.descriptive.moment" ], [ "VectorialMean", "org.apache.commons.math3.stat.descriptive.moment" ], [ "StatisticalSummaryValues", "org.apache.commons.math3.stat.descriptive" ], [ "StatisticalSummary", "org.apache.commons.math3.stat.descriptive" ], [ "StorelessUnivariateStatistic", "org.apache.commons.math3.stat.descriptive" ], [ "StatisticalMultivariateSummary", "org.apache.commons.math3.stat.descriptive" ], [ "AggregateSummaryStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "WeightedEvaluation", "org.apache.commons.math3.stat.descriptive" ], [ "SynchronizedSummaryStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "UnivariateStatistic", "org.apache.commons.math3.stat.descriptive" ], [ "Percentile", "org.apache.commons.math3.stat.descriptive.rank" ], [ "Max", "org.apache.commons.math3.stat.descriptive.rank" ], [ "PSquarePercentile", "org.apache.commons.math3.stat.descriptive.rank" ], [ "Min", "org.apache.commons.math3.stat.descriptive.rank" ], [ "Median", "org.apache.commons.math3.stat.descriptive.rank" ], [ "SynchronizedDescriptiveStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "SynchronizedMultivariateSummaryStatistics", "org.apache.commons.math3.stat.descriptive" ], [ "SumOfSquares", "org.apache.commons.math3.stat.descriptive.summary" ], [ "Product", "org.apache.commons.math3.stat.descriptive.summary" ], [ "Sum", "org.apache.commons.math3.stat.descriptive.summary" ], [ "SumOfLogs", "org.apache.commons.math3.stat.descriptive.summary" ], [ "AbstractStorelessUnivariateStatistic", "org.apache.commons.math3.stat.descriptive" ], [ "SimpleRegression", "org.apache.commons.math3.stat.regression" ], [ "UpdatingMultipleLinearRegression", "org.apache.commons.math3.stat.regression" ], [ "AbstractMultipleLinearRegression", "org.apache.commons.math3.stat.regression" ], [ "GLSMultipleLinearRegression", "org.apache.commons.math3.stat.regression" ], [ "ModelSpecificationException", "org.apache.commons.math3.stat.regression" ], [ "RegressionResults", "org.apache.commons.math3.stat.regression" ], [ "MillerUpdatingRegression", "org.apache.commons.math3.stat.regression" ], [ "OLSMultipleLinearRegression", "org.apache.commons.math3.stat.regression" ], [ "MultipleLinearRegression", "org.apache.commons.math3.stat.regression" ], [ "Frequency", "org.apache.commons.math3.stat" ], [ "ChebyshevDistance", "org.apache.commons.math3.ml.distance" ], [ "CanberraDistance", "org.apache.commons.math3.ml.distance" ], [ "EuclideanDistance", "org.apache.commons.math3.ml.distance" ], [ "ManhattanDistance", "org.apache.commons.math3.ml.distance" ], [ "EarthMoversDistance", "org.apache.commons.math3.ml.distance" ], [ "DistanceMeasure", "org.apache.commons.math3.ml.distance" ], [ "CentroidCluster", "org.apache.commons.math3.ml.clustering" ], [ "DBSCANClusterer", "org.apache.commons.math3.ml.clustering" ], [ "Cluster", "org.apache.commons.math3.ml.clustering" ], [ "MultiKMeansPlusPlusClusterer", "org.apache.commons.math3.ml.clustering" ], [ "Clusterable", "org.apache.commons.math3.ml.clustering" ], [ "FuzzyKMeansClusterer", "org.apache.commons.math3.ml.clustering" ], [ "KMeansPlusPlusClusterer", "org.apache.commons.math3.ml.clustering" ], [ "SumOfClusterVariances", "org.apache.commons.math3.ml.clustering.evaluation" ], [ "ClusterEvaluator", "org.apache.commons.math3.ml.clustering.evaluation" ], [ "Clusterer", "org.apache.commons.math3.ml.clustering" ], [ "DoublePoint", "org.apache.commons.math3.ml.clustering" ], [ "KohonenTrainingTask", "org.apache.commons.math3.ml.neuralnet.sofm" ], [ "KohonenUpdateAction", "org.apache.commons.math3.ml.neuralnet.sofm" ], [ "QuasiSigmoidDecayFunction", "org.apache.commons.math3.ml.neuralnet.sofm.util" ], [ "ExponentialDecayFunction", "org.apache.commons.math3.ml.neuralnet.sofm.util" ], [ "NeighbourhoodSizeFunctionFactory", "org.apache.commons.math3.ml.neuralnet.sofm" ], [ "LearningFactorFunctionFactory", "org.apache.commons.math3.ml.neuralnet.sofm" ], [ "NeighbourhoodSizeFunction", "org.apache.commons.math3.ml.neuralnet.sofm" ], [ "LearningFactorFunction", "org.apache.commons.math3.ml.neuralnet.sofm" ], [ "MapUtils", "org.apache.commons.math3.ml.neuralnet" ], [ "Network", "org.apache.commons.math3.ml.neuralnet" ], [ "FeatureInitializerFactory", "org.apache.commons.math3.ml.neuralnet" ], [ "Neuron", "org.apache.commons.math3.ml.neuralnet" ], [ "FeatureInitializer", "org.apache.commons.math3.ml.neuralnet" ], [ "NeuronString", "org.apache.commons.math3.ml.neuralnet.oned" ], [ "NeuronSquareMesh2D", "org.apache.commons.math3.ml.neuralnet.twod" ], [ "SmoothedDataHistogram", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "UnifiedDistanceMatrix", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "MapDataVisualization", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "MapVisualization", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "LocationFinder", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "HitHistogram", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "QuantizationError", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "TopographicErrorHistogram", "org.apache.commons.math3.ml.neuralnet.twod.util" ], [ "SquareNeighbourhood", "org.apache.commons.math3.ml.neuralnet" ], [ "UpdateAction", "org.apache.commons.math3.ml.neuralnet" ], [ "BracketingNthOrderBrentSolverDFP", "org.apache.commons.math3.dfp" ], [ "UnivariateDfpFunction", "org.apache.commons.math3.dfp" ], [ "DfpDec", "org.apache.commons.math3.dfp" ], [ "DfpMath", "org.apache.commons.math3.dfp" ], [ "Dfp", "org.apache.commons.math3.dfp" ], [ "DfpField", "org.apache.commons.math3.dfp" ], [ "GeneticAlgorithm", "org.apache.commons.math3.genetics" ], [ "SelectionPolicy", "org.apache.commons.math3.genetics" ], [ "ListPopulation", "org.apache.commons.math3.genetics" ], [ "FixedGenerationCount", "org.apache.commons.math3.genetics" ], [ "AbstractListChromosome", "org.apache.commons.math3.genetics" ], [ "OnePointCrossover", "org.apache.commons.math3.genetics" ], [ "ElitisticListPopulation", "org.apache.commons.math3.genetics" ], [ "Chromosome", "org.apache.commons.math3.genetics" ], [ "OrderedCrossover", "org.apache.commons.math3.genetics" ], [ "InvalidRepresentationException", "org.apache.commons.math3.genetics" ], [ "RandomKey", "org.apache.commons.math3.genetics" ], [ "StoppingCondition", "org.apache.commons.math3.genetics" ], [ "PermutationChromosome", "org.apache.commons.math3.genetics" ], [ "ChromosomePair", "org.apache.commons.math3.genetics" ], [ "TournamentSelection", "org.apache.commons.math3.genetics" ], [ "NPointCrossover", "org.apache.commons.math3.genetics" ], [ "UniformCrossover", "org.apache.commons.math3.genetics" ], [ "MutationPolicy", "org.apache.commons.math3.genetics" ], [ "FixedElapsedTime", "org.apache.commons.math3.genetics" ], [ "CycleCrossover", "org.apache.commons.math3.genetics" ], [ "BinaryMutation", "org.apache.commons.math3.genetics" ], [ "BinaryChromosome", "org.apache.commons.math3.genetics" ], [ "Population", "org.apache.commons.math3.genetics" ], [ "RandomKeyMutation", "org.apache.commons.math3.genetics" ], [ "Fitness", "org.apache.commons.math3.genetics" ], [ "CrossoverPolicy", "org.apache.commons.math3.genetics" ], [ "Vector", "org.apache.commons.math3.geometry" ], [ "VectorFormat", "org.apache.commons.math3.geometry" ], [ "Point", "org.apache.commons.math3.geometry" ], [ "RotationConvention", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "SubPlane", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Vector3DFormat", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Segment", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "OutlineExtractor", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "PolyhedronsSet", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "RotationOrder", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "FieldVector3D", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Rotation", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Euclidean3D", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "SubLine", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "SphericalCoordinates", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "CardanEulerSingularityException", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "NotARotationMatrixException", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "FieldRotation", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Vector3D", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Plane", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "SphereGenerator", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "Line", "org.apache.commons.math3.geometry.euclidean.threed" ], [ "IntervalsSet", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "Interval", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "SubOrientedPoint", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "OrientedPoint", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "Euclidean1D", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "Vector1DFormat", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "Vector1D", "org.apache.commons.math3.geometry.euclidean.oned" ], [ "Segment", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "AbstractConvexHullGenerator2D", "org.apache.commons.math3.geometry.euclidean.twod.hull" ], [ "AklToussaintHeuristic", "org.apache.commons.math3.geometry.euclidean.twod.hull" ], [ "ConvexHull2D", "org.apache.commons.math3.geometry.euclidean.twod.hull" ], [ "MonotoneChain", "org.apache.commons.math3.geometry.euclidean.twod.hull" ], [ "ConvexHullGenerator2D", "org.apache.commons.math3.geometry.euclidean.twod.hull" ], [ "Vector2DFormat", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "PolygonsSet", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "SubLine", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "DiskGenerator", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "Vector2D", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "NestedLoops", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "Euclidean2D", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "Line", "org.apache.commons.math3.geometry.euclidean.twod" ], [ "ConvexHullGenerator", "org.apache.commons.math3.geometry.hull" ], [ "ConvexHull", "org.apache.commons.math3.geometry.hull" ], [ "ArcsSet", "org.apache.commons.math3.geometry.spherical.oned" ], [ "S1Point", "org.apache.commons.math3.geometry.spherical.oned" ], [ "Sphere1D", "org.apache.commons.math3.geometry.spherical.oned" ], [ "Arc", "org.apache.commons.math3.geometry.spherical.oned" ], [ "LimitAngle", "org.apache.commons.math3.geometry.spherical.oned" ], [ "SubLimitAngle", "org.apache.commons.math3.geometry.spherical.oned" ], [ "Sphere2D", "org.apache.commons.math3.geometry.spherical.twod" ], [ "SubCircle", "org.apache.commons.math3.geometry.spherical.twod" ], [ "Vertex", "org.apache.commons.math3.geometry.spherical.twod" ], [ "Circle", "org.apache.commons.math3.geometry.spherical.twod" ], [ "PropertiesComputer", "org.apache.commons.math3.geometry.spherical.twod" ], [ "SphericalPolygonsSet", "org.apache.commons.math3.geometry.spherical.twod" ], [ "Edge", "org.apache.commons.math3.geometry.spherical.twod" ], [ "EdgesBuilder", "org.apache.commons.math3.geometry.spherical.twod" ], [ "S2Point", "org.apache.commons.math3.geometry.spherical.twod" ], [ "SupportBallGenerator", "org.apache.commons.math3.geometry.enclosing" ], [ "EnclosingBall", "org.apache.commons.math3.geometry.enclosing" ], [ "WelzlEncloser", "org.apache.commons.math3.geometry.enclosing" ], [ "Encloser", "org.apache.commons.math3.geometry.enclosing" ], [ "InsideFinder", "org.apache.commons.math3.geometry.partitioning" ], [ "BoundaryProjection", "org.apache.commons.math3.geometry.partitioning" ], [ "BoundaryProjector", "org.apache.commons.math3.geometry.partitioning" ], [ "Region", "org.apache.commons.math3.geometry.partitioning" ], [ "Transform", "org.apache.commons.math3.geometry.partitioning" ], [ "NodesSet", "org.apache.commons.math3.geometry.partitioning" ], [ "AbstractRegion", "org.apache.commons.math3.geometry.partitioning" ], [ "Characterization", "org.apache.commons.math3.geometry.partitioning" ], [ "AbstractSubHyperplane", "org.apache.commons.math3.geometry.partitioning" ], [ "BSPTree", "org.apache.commons.math3.geometry.partitioning" ], [ "RegionFactory", "org.apache.commons.math3.geometry.partitioning" ], [ "Side", "org.apache.commons.math3.geometry.partitioning" ], [ "BoundarySizeVisitor", "org.apache.commons.math3.geometry.partitioning" ], [ "AVLTree", "org.apache.commons.math3.geometry.partitioning.utilities" ], [ "OrderedTuple", "org.apache.commons.math3.geometry.partitioning.utilities" ], [ "BSPTreeVisitor", "org.apache.commons.math3.geometry.partitioning" ], [ "Hyperplane", "org.apache.commons.math3.geometry.partitioning" ], [ "Embedding", "org.apache.commons.math3.geometry.partitioning" ], [ "BoundaryAttribute", "org.apache.commons.math3.geometry.partitioning" ], [ "SubHyperplane", "org.apache.commons.math3.geometry.partitioning" ], [ "BoundaryBuilder", "org.apache.commons.math3.geometry.partitioning" ], [ "Space", "org.apache.commons.math3.geometry" ], [ "Field", "org.apache.commons.math3" ], [ "ProcessModel", "org.apache.commons.math3.filter" ], [ "MeasurementModel", "org.apache.commons.math3.filter" ], [ "KalmanFilter", "org.apache.commons.math3.filter" ], [ "DefaultProcessModel", "org.apache.commons.math3.filter" ], [ "DefaultMeasurementModel", "org.apache.commons.math3.filter" ], [ "NormalizedRandomGenerator", "org.apache.commons.math3.random" ], [ "GaussianRandomGenerator", "org.apache.commons.math3.random" ], [ "RandomGenerator", "org.apache.commons.math3.random" ], [ "ISAACRandom", "org.apache.commons.math3.random" ], [ "CorrelatedRandomVectorGenerator", "org.apache.commons.math3.random" ], [ "Well19937a", "org.apache.commons.math3.random" ], [ "Well1024a", "org.apache.commons.math3.random" ], [ "UniformRandomGenerator", "org.apache.commons.math3.random" ], [ "Well44497a", "org.apache.commons.math3.random" ], [ "BitsStreamGenerator", "org.apache.commons.math3.random" ], [ "SynchronizedRandomGenerator", "org.apache.commons.math3.random" ], [ "UncorrelatedRandomVectorGenerator", "org.apache.commons.math3.random" ], [ "Well19937c", "org.apache.commons.math3.random" ], [ "ValueServer", "org.apache.commons.math3.random" ], [ "HaltonSequenceGenerator", "org.apache.commons.math3.random" ], [ "Well44497b", "org.apache.commons.math3.random" ], [ "RandomData", "org.apache.commons.math3.random" ], [ "RandomVectorGenerator", "org.apache.commons.math3.random" ], [ "RandomDataGenerator", "org.apache.commons.math3.random" ], [ "Well512a", "org.apache.commons.math3.random" ], [ "AbstractRandomGenerator", "org.apache.commons.math3.random" ], [ "JDKRandomGenerator", "org.apache.commons.math3.random" ], [ "StableRandomGenerator", "org.apache.commons.math3.random" ], [ "RandomAdaptor", "org.apache.commons.math3.random" ], [ "RandomGeneratorFactory", "org.apache.commons.math3.random" ], [ "AbstractWell", "org.apache.commons.math3.random" ], [ "RandomDataImpl", "org.apache.commons.math3.random" ], [ "EmpiricalDistribution", "org.apache.commons.math3.random" ], [ "SobolSequenceGenerator", "org.apache.commons.math3.random" ], [ "MersenneTwister", "org.apache.commons.math3.random" ], [ "UnitSphereRandomVectorGenerator", "org.apache.commons.math3.random" ], [ "FieldElement", "org.apache.commons.math3" ], [ "BigFractionFormat", "org.apache.commons.math3.fraction" ], [ "Fraction", "org.apache.commons.math3.fraction" ], [ "BigFraction", "org.apache.commons.math3.fraction" ], [ "AbstractFormat", "org.apache.commons.math3.fraction" ], [ "FractionFormat", "org.apache.commons.math3.fraction" ], [ "FractionField", "org.apache.commons.math3.fraction" ], [ "BigFractionField", "org.apache.commons.math3.fraction" ], [ "ProperFractionFormat", "org.apache.commons.math3.fraction" ], [ "FractionConversionException", "org.apache.commons.math3.fraction" ], [ "ProperBigFractionFormat", "org.apache.commons.math3.fraction" ], [ "NotFiniteNumberException", "org.apache.commons.math3.exception" ], [ "NoBracketingException", "org.apache.commons.math3.exception" ], [ "MathArithmeticException", "org.apache.commons.math3.exception" ], [ "InsufficientDataException", "org.apache.commons.math3.exception" ], [ "TooManyEvaluationsException", "org.apache.commons.math3.exception" ], [ "ExceptionContextProvider", "org.apache.commons.math3.exception.util" ], [ "ExceptionContext", "org.apache.commons.math3.exception.util" ], [ "ArgUtils", "org.apache.commons.math3.exception.util" ], [ "DummyLocalizable", "org.apache.commons.math3.exception.util" ], [ "Localizable", "org.apache.commons.math3.exception.util" ], [ "LocalizedFormats", "org.apache.commons.math3.exception.util" ], [ "NotANumberException", "org.apache.commons.math3.exception" ], [ "MultiDimensionMismatchException", "org.apache.commons.math3.exception" ], [ "OutOfRangeException", "org.apache.commons.math3.exception" ], [ "TooManyIterationsException", "org.apache.commons.math3.exception" ], [ "NullArgumentException", "org.apache.commons.math3.exception" ], [ "NumberIsTooLargeException", "org.apache.commons.math3.exception" ], [ "MathIllegalStateException", "org.apache.commons.math3.exception" ], [ "MathUnsupportedOperationException", "org.apache.commons.math3.exception" ], [ "NotStrictlyPositiveException", "org.apache.commons.math3.exception" ], [ "NonMonotonicSequenceException", "org.apache.commons.math3.exception" ], [ "ZeroException", "org.apache.commons.math3.exception" ], [ "MathIllegalArgumentException", "org.apache.commons.math3.exception" ], [ "DimensionMismatchException", "org.apache.commons.math3.exception" ], [ "MathRuntimeException", "org.apache.commons.math3.exception" ], [ "MathParseException", "org.apache.commons.math3.exception" ], [ "NoDataException", "org.apache.commons.math3.exception" ], [ "MathIllegalNumberException", "org.apache.commons.math3.exception" ], [ "NotPositiveException", "org.apache.commons.math3.exception" ], [ "MaxCountExceededException", "org.apache.commons.math3.exception" ], [ "NumberIsTooSmallException", "org.apache.commons.math3.exception" ], [ "ConvergenceException", "org.apache.commons.math3.exception" ], [ "MathInternalError", "org.apache.commons.math3.exception" ], [ "DftNormalization", "org.apache.commons.math3.transform" ], [ "RealTransformer", "org.apache.commons.math3.transform" ], [ "FastSineTransformer", "org.apache.commons.math3.transform" ], [ "DctNormalization", "org.apache.commons.math3.transform" ], [ "FastFourierTransformer", "org.apache.commons.math3.transform" ], [ "TransformType", "org.apache.commons.math3.transform" ], [ "FastCosineTransformer", "org.apache.commons.math3.transform" ], [ "TransformUtils", "org.apache.commons.math3.transform" ], [ "DstNormalization", "org.apache.commons.math3.transform" ], [ "FastHadamardTransformer", "org.apache.commons.math3.transform" ] ],
  "tokensProjectClassesNonPrivateStaticNonVoidMethods" : [ [ "isPrime", "org.apache.commons.math3.primes", "Primes", "public static boolean isPrime(int n)" ], [ "nextPrime", "org.apache.commons.math3.primes", "Primes", "public static int nextPrime(int n)" ], [ "primeFactors", "org.apache.commons.math3.primes", "Primes", "public static List<Integer> primeFactors(int n)" ], [ "smallTrialDivision", "org.apache.commons.math3.primes", "SmallPrimes", "public static int smallTrialDivision(int n, final List<Integer> factors)" ], [ "boundedTrialDivision", "org.apache.commons.math3.primes", "SmallPrimes", "public static int boundedTrialDivision(int n, int maxFactor, List<Integer> factors)" ], [ "trialDivision", "org.apache.commons.math3.primes", "SmallPrimes", "public static List<Integer> trialDivision(int n)" ], [ "millerRabinPrimeTest", "org.apache.commons.math3.primes", "SmallPrimes", "public static boolean millerRabinPrimeTest(final int n)" ], [ "primeFactors", "org.apache.commons.math3.primes", "PollardRho", "public static List<Integer> primeFactors(int n)" ], [ "rhoBrent", "org.apache.commons.math3.primes", "PollardRho", "static int rhoBrent(final int n)" ], [ "gcdPositive", "org.apache.commons.math3.primes", "PollardRho", "static int gcdPositive(int a, int b)" ], [ "create", "org.apache.commons.math3.fitting", "GaussianCurveFitter", "public static GaussianCurveFitter create()" ], [ "create", "org.apache.commons.math3.fitting", "SimpleCurveFitter", "public static SimpleCurveFitter create(ParametricUnivariateFunction f, double[] start)" ], [ "create", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem create(final MultivariateJacobianFunction model, final RealVector observed, final RealVector start, final RealMatrix weight, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations, final boolean lazyEvaluation, final ParameterValidator paramValidator)" ], [ "create", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem create(final MultivariateJacobianFunction model, final RealVector observed, final RealVector start, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations)" ], [ "create", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem create(final MultivariateJacobianFunction model, final RealVector observed, final RealVector start, final RealMatrix weight, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations)" ], [ "create", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem create(final MultivariateVectorFunction model, final MultivariateMatrixFunction jacobian, final double[] observed, final double[] start, final RealMatrix weight, final ConvergenceChecker<Evaluation> checker, final int maxEvaluations, final int maxIterations)" ], [ "weightMatrix", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem weightMatrix(final LeastSquaresProblem problem, final RealMatrix weights)" ], [ "weightDiagonal", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem weightDiagonal(final LeastSquaresProblem problem, final RealVector weights)" ], [ "countEvaluations", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static LeastSquaresProblem countEvaluations(final LeastSquaresProblem problem, final Incrementor counter)" ], [ "evaluationChecker", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static ConvergenceChecker<Evaluation> evaluationChecker(final ConvergenceChecker<PointVectorValuePair> checker)" ], [ "model", "org.apache.commons.math3.fitting.leastsquares", "LeastSquaresFactory", "public static MultivariateJacobianFunction model(final MultivariateVectorFunction value, final MultivariateMatrixFunction jacobian)" ], [ "create", "org.apache.commons.math3.fitting", "HarmonicCurveFitter", "public static HarmonicCurveFitter create()" ], [ "create", "org.apache.commons.math3.fitting", "PolynomialCurveFitter", "public static PolynomialCurveFitter create(int degree)" ], [ "compose", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateFunction compose(final UnivariateFunction... f)" ], [ "compose", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateDifferentiableFunction compose(final UnivariateDifferentiableFunction... f)" ], [ "compose", "org.apache.commons.math3.analysis", "FunctionUtils", "public static DifferentiableUnivariateFunction compose(final DifferentiableUnivariateFunction... f)" ], [ "add", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateFunction add(final UnivariateFunction... f)" ], [ "add", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateDifferentiableFunction add(final UnivariateDifferentiableFunction... f)" ], [ "add", "org.apache.commons.math3.analysis", "FunctionUtils", "public static DifferentiableUnivariateFunction add(final DifferentiableUnivariateFunction... f)" ], [ "multiply", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateFunction multiply(final UnivariateFunction... f)" ], [ "multiply", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateDifferentiableFunction multiply(final UnivariateDifferentiableFunction... f)" ], [ "multiply", "org.apache.commons.math3.analysis", "FunctionUtils", "public static DifferentiableUnivariateFunction multiply(final DifferentiableUnivariateFunction... f)" ], [ "combine", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateFunction combine(final BivariateFunction combiner, final UnivariateFunction f, final UnivariateFunction g)" ], [ "collector", "org.apache.commons.math3.analysis", "FunctionUtils", "public static MultivariateFunction collector(final BivariateFunction combiner, final UnivariateFunction f, final double initialValue)" ], [ "collector", "org.apache.commons.math3.analysis", "FunctionUtils", "public static MultivariateFunction collector(final BivariateFunction combiner, final double initialValue)" ], [ "fix1stArgument", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateFunction fix1stArgument(final BivariateFunction f, final double fixed)" ], [ "fix2ndArgument", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateFunction fix2ndArgument(final BivariateFunction f, final double fixed)" ], [ "sample", "org.apache.commons.math3.analysis", "FunctionUtils", "public static double[] sample(UnivariateFunction f, double min, double max, int n) throws NumberIsTooLargeException, NotStrictlyPositiveException" ], [ "toDifferentiableUnivariateFunction", "org.apache.commons.math3.analysis", "FunctionUtils", "public static DifferentiableUnivariateFunction toDifferentiableUnivariateFunction(final UnivariateDifferentiableFunction f)" ], [ "toUnivariateDifferential", "org.apache.commons.math3.analysis", "FunctionUtils", "public static UnivariateDifferentiableFunction toUnivariateDifferential(final DifferentiableUnivariateFunction f)" ], [ "toDifferentiableMultivariateFunction", "org.apache.commons.math3.analysis", "FunctionUtils", "public static DifferentiableMultivariateFunction toDifferentiableMultivariateFunction(final MultivariateDifferentiableFunction f)" ], [ "toMultivariateDifferentiableFunction", "org.apache.commons.math3.analysis", "FunctionUtils", "public static MultivariateDifferentiableFunction toMultivariateDifferentiableFunction(final DifferentiableMultivariateFunction f)" ], [ "toDifferentiableMultivariateVectorFunction", "org.apache.commons.math3.analysis", "FunctionUtils", "public static DifferentiableMultivariateVectorFunction toDifferentiableMultivariateVectorFunction(final MultivariateDifferentiableVectorFunction f)" ], [ "toMultivariateDifferentiableVectorFunction", "org.apache.commons.math3.analysis", "FunctionUtils", "public static MultivariateDifferentiableVectorFunction toMultivariateDifferentiableVectorFunction(final DifferentiableMultivariateVectorFunction f)" ], [ "solve", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double solve(UnivariateFunction function, double x0, double x1) throws NullArgumentException, NoBracketingException" ], [ "solve", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double solve(UnivariateFunction function, double x0, double x1, double absoluteAccuracy) throws NullArgumentException, NoBracketingException" ], [ "forceSide", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double forceSide(final int maxEval, final UnivariateFunction f, final BracketedUnivariateSolver<UnivariateFunction> bracketing, final double baseRoot, final double min, final double max, final AllowedSolution allowedSolution) throws NoBracketingException" ], [ "bracket", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double[] bracket(UnivariateFunction function, double initial, double lowerBound, double upperBound) throws NullArgumentException, NotStrictlyPositiveException, NoBracketingException" ], [ "bracket", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double[] bracket(UnivariateFunction function, double initial, double lowerBound, double upperBound, int maximumIterations) throws NullArgumentException, NotStrictlyPositiveException, NoBracketingException" ], [ "bracket", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double[] bracket(final UnivariateFunction function, final double initial, final double lowerBound, final double upperBound, final double q, final double r, final int maximumIterations) throws NoBracketingException" ], [ "midpoint", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static double midpoint(double a, double b)" ], [ "isBracketing", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static boolean isBracketing(UnivariateFunction function, final double lower, final double upper) throws NullArgumentException" ], [ "isSequence", "org.apache.commons.math3.analysis.solvers", "UnivariateSolverUtils", "public static boolean isSequence(final double start, final double mid, final double end)" ], [ "getCompiler", "org.apache.commons.math3.analysis.differentiation", "DSCompiler", "public static DSCompiler getCompiler(int parameters, int order) throws NumberIsTooLargeException" ], [ "createConstant", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public static SparseGradient createConstant(final double value)" ], [ "createVariable", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public static SparseGradient createVariable(final int idx, final double value)" ], [ "hypot", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public static SparseGradient hypot(final SparseGradient x, final SparseGradient y)" ], [ "pow", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public static SparseGradient pow(final double a, final SparseGradient x)" ], [ "atan2", "org.apache.commons.math3.analysis.differentiation", "SparseGradient", "public static SparseGradient atan2(final SparseGradient y, final SparseGradient x)" ], [ "hypot", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public static DerivativeStructure hypot(final DerivativeStructure x, final DerivativeStructure y) throws DimensionMismatchException" ], [ "pow", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public static DerivativeStructure pow(final double a, final DerivativeStructure x)" ], [ "atan2", "org.apache.commons.math3.analysis.differentiation", "DerivativeStructure", "public static DerivativeStructure atan2(final DerivativeStructure y, final DerivativeStructure x) throws DimensionMismatchException" ], [ "evaluate", "org.apache.commons.math3.analysis.polynomials", "PolynomialFunctionNewtonForm", "public static double evaluate(double[] a, double[] c, double z) throws NullArgumentException, DimensionMismatchException, NoDataException" ], [ "evaluate", "org.apache.commons.math3.analysis.polynomials", "PolynomialFunctionLagrangeForm", "public static double evaluate(double[] x, double[] y, double z) throws DimensionMismatchException, NumberIsTooSmallException, NonMonotonicSequenceException" ], [ "verifyInterpolationArray", "org.apache.commons.math3.analysis.polynomials", "PolynomialFunctionLagrangeForm", "public static boolean verifyInterpolationArray(double[] x, double[] y, boolean abort) throws DimensionMismatchException, NumberIsTooSmallException, NonMonotonicSequenceException" ], [ "createChebyshevPolynomial", "org.apache.commons.math3.analysis.polynomials", "PolynomialsUtils", "public static PolynomialFunction createChebyshevPolynomial(final int degree)" ], [ "createHermitePolynomial", "org.apache.commons.math3.analysis.polynomials", "PolynomialsUtils", "public static PolynomialFunction createHermitePolynomial(final int degree)" ], [ "createLaguerrePolynomial", "org.apache.commons.math3.analysis.polynomials", "PolynomialsUtils", "public static PolynomialFunction createLaguerrePolynomial(final int degree)" ], [ "createLegendrePolynomial", "org.apache.commons.math3.analysis.polynomials", "PolynomialsUtils", "public static PolynomialFunction createLegendrePolynomial(final int degree)" ], [ "createJacobiPolynomial", "org.apache.commons.math3.analysis.polynomials", "PolynomialsUtils", "public static PolynomialFunction createJacobiPolynomial(final int degree, final int v, final int w)" ], [ "shift", "org.apache.commons.math3.analysis.polynomials", "PolynomialsUtils", "public static double[] shift(final double[] coefficients, final double shift)" ], [ "evaluate", "org.apache.commons.math3.analysis.polynomials", "PolynomialFunction", "protected static double evaluate(double[] coefficients, double argument) throws NullArgumentException, NoDataException" ], [ "differentiate", "org.apache.commons.math3.analysis.polynomials", "PolynomialFunction", "protected static double[] differentiate(double[] coefficients) throws NullArgumentException, NoDataException" ], [ "computeDividedDifference", "org.apache.commons.math3.analysis.interpolation", "DividedDifferenceInterpolator", "protected static double[] computeDividedDifference(final double[] x, final double[] y) throws DimensionMismatchException, NumberIsTooSmallException, NonMonotonicSequenceException" ], [ "compareTo", "org.apache.commons.math3.util", "Precision", "public static int compareTo(double x, double y, double eps)" ], [ "compareTo", "org.apache.commons.math3.util", "Precision", "public static int compareTo(final double x, final double y, final int maxUlps)" ], [ "equals", "org.apache.commons.math3.util", "Precision", "public static boolean equals(float x, float y)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "Precision", "public static boolean equalsIncludingNaN(float x, float y)" ], [ "equals", "org.apache.commons.math3.util", "Precision", "public static boolean equals(float x, float y, float eps)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "Precision", "public static boolean equalsIncludingNaN(float x, float y, float eps)" ], [ "equals", "org.apache.commons.math3.util", "Precision", "public static boolean equals(final float x, final float y, final int maxUlps)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "Precision", "public static boolean equalsIncludingNaN(float x, float y, int maxUlps)" ], [ "equals", "org.apache.commons.math3.util", "Precision", "public static boolean equals(double x, double y)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "Precision", "public static boolean equalsIncludingNaN(double x, double y)" ], [ "equals", "org.apache.commons.math3.util", "Precision", "public static boolean equals(double x, double y, double eps)" ], [ "equalsWithRelativeTolerance", "org.apache.commons.math3.util", "Precision", "public static boolean equalsWithRelativeTolerance(double x, double y, double eps)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "Precision", "public static boolean equalsIncludingNaN(double x, double y, double eps)" ], [ "equals", "org.apache.commons.math3.util", "Precision", "public static boolean equals(final double x, final double y, final int maxUlps)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "Precision", "public static boolean equalsIncludingNaN(double x, double y, int maxUlps)" ], [ "round", "org.apache.commons.math3.util", "Precision", "public static double round(double x, int scale)" ], [ "round", "org.apache.commons.math3.util", "Precision", "public static double round(double x, int scale, int roundingMethod)" ], [ "round", "org.apache.commons.math3.util", "Precision", "public static float round(float x, int scale)" ], [ "round", "org.apache.commons.math3.util", "Precision", "public static float round(float x, int scale, int roundingMethod) throws MathArithmeticException, MathIllegalArgumentException" ], [ "representableDelta", "org.apache.commons.math3.util", "Precision", "public static double representableDelta(double x, double originalDelta)" ], [ "wrap", "org.apache.commons.math3.util", "Incrementor", "public static Incrementor wrap(final IntegerSequence.Incrementor incrementor)" ], [ "scale", "org.apache.commons.math3.util", "MathArrays", "public static double[] scale(double val, final double[] arr)" ], [ "ebeAdd", "org.apache.commons.math3.util", "MathArrays", "public static double[] ebeAdd(double[] a, double[] b) throws DimensionMismatchException" ], [ "ebeSubtract", "org.apache.commons.math3.util", "MathArrays", "public static double[] ebeSubtract(double[] a, double[] b) throws DimensionMismatchException" ], [ "ebeMultiply", "org.apache.commons.math3.util", "MathArrays", "public static double[] ebeMultiply(double[] a, double[] b) throws DimensionMismatchException" ], [ "ebeDivide", "org.apache.commons.math3.util", "MathArrays", "public static double[] ebeDivide(double[] a, double[] b) throws DimensionMismatchException" ], [ "distance1", "org.apache.commons.math3.util", "MathArrays", "public static double distance1(double[] p1, double[] p2) throws DimensionMismatchException" ], [ "distance1", "org.apache.commons.math3.util", "MathArrays", "public static int distance1(int[] p1, int[] p2) throws DimensionMismatchException" ], [ "distance", "org.apache.commons.math3.util", "MathArrays", "public static double distance(double[] p1, double[] p2) throws DimensionMismatchException" ], [ "cosAngle", "org.apache.commons.math3.util", "MathArrays", "public static double cosAngle(double[] v1, double[] v2)" ], [ "distance", "org.apache.commons.math3.util", "MathArrays", "public static double distance(int[] p1, int[] p2) throws DimensionMismatchException" ], [ "distanceInf", "org.apache.commons.math3.util", "MathArrays", "public static double distanceInf(double[] p1, double[] p2) throws DimensionMismatchException" ], [ "distanceInf", "org.apache.commons.math3.util", "MathArrays", "public static int distanceInf(int[] p1, int[] p2) throws DimensionMismatchException" ], [ "isMonotonic", "org.apache.commons.math3.util", "MathArrays", "public static <T extends Comparable<? super T>> boolean isMonotonic(T[] val, OrderDirection dir, boolean strict)" ], [ "isMonotonic", "org.apache.commons.math3.util", "MathArrays", "public static boolean isMonotonic(double[] val, OrderDirection dir, boolean strict)" ], [ "checkEqualLength", "org.apache.commons.math3.util", "MathArrays", "public static boolean checkEqualLength(double[] a, double[] b, boolean abort)" ], [ "checkEqualLength", "org.apache.commons.math3.util", "MathArrays", "public static boolean checkEqualLength(int[] a, int[] b, boolean abort)" ], [ "checkOrder", "org.apache.commons.math3.util", "MathArrays", "public static boolean checkOrder(double[] val, OrderDirection dir, boolean strict, boolean abort) throws NonMonotonicSequenceException" ], [ "safeNorm", "org.apache.commons.math3.util", "MathArrays", "public static double safeNorm(double[] v)" ], [ "copyOf", "org.apache.commons.math3.util", "MathArrays", "public static int[] copyOf(int[] source)" ], [ "copyOf", "org.apache.commons.math3.util", "MathArrays", "public static double[] copyOf(double[] source)" ], [ "copyOf", "org.apache.commons.math3.util", "MathArrays", "public static int[] copyOf(int[] source, int len)" ], [ "copyOf", "org.apache.commons.math3.util", "MathArrays", "public static double[] copyOf(double[] source, int len)" ], [ "copyOfRange", "org.apache.commons.math3.util", "MathArrays", "public static double[] copyOfRange(double[] source, int from, int to)" ], [ "linearCombination", "org.apache.commons.math3.util", "MathArrays", "public static double linearCombination(final double[] a, final double[] b) throws DimensionMismatchException" ], [ "linearCombination", "org.apache.commons.math3.util", "MathArrays", "public static double linearCombination(final double a1, final double b1, final double a2, final double b2)" ], [ "linearCombination", "org.apache.commons.math3.util", "MathArrays", "public static double linearCombination(final double a1, final double b1, final double a2, final double b2, final double a3, final double b3)" ], [ "linearCombination", "org.apache.commons.math3.util", "MathArrays", "public static double linearCombination(final double a1, final double b1, final double a2, final double b2, final double a3, final double b3, final double a4, final double b4)" ], [ "equals", "org.apache.commons.math3.util", "MathArrays", "public static boolean equals(float[] x, float[] y)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "MathArrays", "public static boolean equalsIncludingNaN(float[] x, float[] y)" ], [ "equals", "org.apache.commons.math3.util", "MathArrays", "public static boolean equals(double[] x, double[] y)" ], [ "equalsIncludingNaN", "org.apache.commons.math3.util", "MathArrays", "public static boolean equalsIncludingNaN(double[] x, double[] y)" ], [ "normalizeArray", "org.apache.commons.math3.util", "MathArrays", "public static double[] normalizeArray(double[] values, double normalizedSum) throws MathIllegalArgumentException, MathArithmeticException" ], [ "buildArray", "org.apache.commons.math3.util", "MathArrays", "public static <T> T[] buildArray(final Field<T> field, final int length)" ], [ "buildArray", "org.apache.commons.math3.util", "MathArrays", "public static <T> T[][] buildArray(final Field<T> field, final int rows, final int columns)" ], [ "convolve", "org.apache.commons.math3.util", "MathArrays", "public static double[] convolve(double[] x, double[] h) throws NullArgumentException, NoDataException" ], [ "natural", "org.apache.commons.math3.util", "MathArrays", "public static int[] natural(int n)" ], [ "sequence", "org.apache.commons.math3.util", "MathArrays", "public static int[] sequence(int size, int start, int stride)" ], [ "verifyValues", "org.apache.commons.math3.util", "MathArrays", "public static boolean verifyValues(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "verifyValues", "org.apache.commons.math3.util", "MathArrays", "public static boolean verifyValues(final double[] values, final int begin, final int length, final boolean allowEmpty) throws MathIllegalArgumentException" ], [ "verifyValues", "org.apache.commons.math3.util", "MathArrays", "public static boolean verifyValues(final double[] values, final double[] weights, final int begin, final int length) throws MathIllegalArgumentException" ], [ "verifyValues", "org.apache.commons.math3.util", "MathArrays", "public static boolean verifyValues(final double[] values, final double[] weights, final int begin, final int length, final boolean allowEmpty) throws MathIllegalArgumentException" ], [ "concatenate", "org.apache.commons.math3.util", "MathArrays", "public static double[] concatenate(double[]... x)" ], [ "unique", "org.apache.commons.math3.util", "MathArrays", "public static double[] unique(double[] data)" ], [ "create", "org.apache.commons.math3.util", "Pair", "public static <K, V> Pair<K, V> create(K k, V v)" ], [ "slowCos", "org.apache.commons.math3.util", "FastMathCalc", "static double slowCos(final double x, final double[] result)" ], [ "slowSin", "org.apache.commons.math3.util", "FastMathCalc", "static double slowSin(final double x, final double[] result)" ], [ "slowexp", "org.apache.commons.math3.util", "FastMathCalc", "static double slowexp(final double x, final double[] result)" ], [ "expint", "org.apache.commons.math3.util", "FastMathCalc", "static double expint(int p, final double[] result)" ], [ "slowLog", "org.apache.commons.math3.util", "FastMathCalc", "static double[] slowLog(double xi)" ], [ "format", "org.apache.commons.math3.util", "FastMathCalc", "static String format(double d)" ], [ "sqrt", "org.apache.commons.math3.util", "FastMath", "public static double sqrt(final double a)" ], [ "cosh", "org.apache.commons.math3.util", "FastMath", "public static double cosh(double x)" ], [ "sinh", "org.apache.commons.math3.util", "FastMath", "public static double sinh(double x)" ], [ "tanh", "org.apache.commons.math3.util", "FastMath", "public static double tanh(double x)" ], [ "acosh", "org.apache.commons.math3.util", "FastMath", "public static double acosh(final double a)" ], [ "asinh", "org.apache.commons.math3.util", "FastMath", "public static double asinh(double a)" ], [ "atanh", "org.apache.commons.math3.util", "FastMath", "public static double atanh(double a)" ], [ "signum", "org.apache.commons.math3.util", "FastMath", "public static double signum(final double a)" ], [ "signum", "org.apache.commons.math3.util", "FastMath", "public static float signum(final float a)" ], [ "nextUp", "org.apache.commons.math3.util", "FastMath", "public static double nextUp(final double a)" ], [ "nextUp", "org.apache.commons.math3.util", "FastMath", "public static float nextUp(final float a)" ], [ "nextDown", "org.apache.commons.math3.util", "FastMath", "public static double nextDown(final double a)" ], [ "nextDown", "org.apache.commons.math3.util", "FastMath", "public static float nextDown(final float a)" ], [ "random", "org.apache.commons.math3.util", "FastMath", "public static double random()" ], [ "exp", "org.apache.commons.math3.util", "FastMath", "public static double exp(double x)" ], [ "expm1", "org.apache.commons.math3.util", "FastMath", "public static double expm1(double x)" ], [ "log", "org.apache.commons.math3.util", "FastMath", "public static double log(final double x)" ], [ "log1p", "org.apache.commons.math3.util", "FastMath", "public static double log1p(final double x)" ], [ "log10", "org.apache.commons.math3.util", "FastMath", "public static double log10(final double x)" ], [ "log", "org.apache.commons.math3.util", "FastMath", "public static double log(double base, double x)" ], [ "pow", "org.apache.commons.math3.util", "FastMath", "public static double pow(final double x, final double y)" ], [ "pow", "org.apache.commons.math3.util", "FastMath", "public static double pow(double d, int e)" ], [ "pow", "org.apache.commons.math3.util", "FastMath", "public static double pow(double d, long e)" ], [ "sin", "org.apache.commons.math3.util", "FastMath", "public static double sin(double x)" ], [ "cos", "org.apache.commons.math3.util", "FastMath", "public static double cos(double x)" ], [ "tan", "org.apache.commons.math3.util", "FastMath", "public static double tan(double x)" ], [ "atan", "org.apache.commons.math3.util", "FastMath", "public static double atan(double x)" ], [ "atan2", "org.apache.commons.math3.util", "FastMath", "public static double atan2(double y, double x)" ], [ "asin", "org.apache.commons.math3.util", "FastMath", "public static double asin(double x)" ], [ "acos", "org.apache.commons.math3.util", "FastMath", "public static double acos(double x)" ], [ "cbrt", "org.apache.commons.math3.util", "FastMath", "public static double cbrt(double x)" ], [ "toRadians", "org.apache.commons.math3.util", "FastMath", "public static double toRadians(double x)" ], [ "toDegrees", "org.apache.commons.math3.util", "FastMath", "public static double toDegrees(double x)" ], [ "abs", "org.apache.commons.math3.util", "FastMath", "public static int abs(final int x)" ], [ "abs", "org.apache.commons.math3.util", "FastMath", "public static long abs(final long x)" ], [ "abs", "org.apache.commons.math3.util", "FastMath", "public static float abs(final float x)" ], [ "abs", "org.apache.commons.math3.util", "FastMath", "public static double abs(double x)" ], [ "ulp", "org.apache.commons.math3.util", "FastMath", "public static double ulp(double x)" ], [ "ulp", "org.apache.commons.math3.util", "FastMath", "public static float ulp(float x)" ], [ "scalb", "org.apache.commons.math3.util", "FastMath", "public static double scalb(final double d, final int n)" ], [ "scalb", "org.apache.commons.math3.util", "FastMath", "public static float scalb(final float f, final int n)" ], [ "nextAfter", "org.apache.commons.math3.util", "FastMath", "public static double nextAfter(double d, double direction)" ], [ "nextAfter", "org.apache.commons.math3.util", "FastMath", "public static float nextAfter(final float f, final double direction)" ], [ "floor", "org.apache.commons.math3.util", "FastMath", "public static double floor(double x)" ], [ "ceil", "org.apache.commons.math3.util", "FastMath", "public static double ceil(double x)" ], [ "rint", "org.apache.commons.math3.util", "FastMath", "public static double rint(double x)" ], [ "round", "org.apache.commons.math3.util", "FastMath", "public static long round(double x)" ], [ "round", "org.apache.commons.math3.util", "FastMath", "public static int round(final float x)" ], [ "min", "org.apache.commons.math3.util", "FastMath", "public static int min(final int a, final int b)" ], [ "min", "org.apache.commons.math3.util", "FastMath", "public static long min(final long a, final long b)" ], [ "min", "org.apache.commons.math3.util", "FastMath", "public static float min(final float a, final float b)" ], [ "min", "org.apache.commons.math3.util", "FastMath", "public static double min(final double a, final double b)" ], [ "max", "org.apache.commons.math3.util", "FastMath", "public static int max(final int a, final int b)" ], [ "max", "org.apache.commons.math3.util", "FastMath", "public static long max(final long a, final long b)" ], [ "max", "org.apache.commons.math3.util", "FastMath", "public static float max(final float a, final float b)" ], [ "max", "org.apache.commons.math3.util", "FastMath", "public static double max(final double a, final double b)" ], [ "hypot", "org.apache.commons.math3.util", "FastMath", "public static double hypot(final double x, final double y)" ], [ "IEEEremainder", "org.apache.commons.math3.util", "FastMath", "public static double IEEEremainder(double dividend, double divisor)" ], [ "toIntExact", "org.apache.commons.math3.util", "FastMath", "public static int toIntExact(final long n) throws MathArithmeticException" ], [ "incrementExact", "org.apache.commons.math3.util", "FastMath", "public static int incrementExact(final int n) throws MathArithmeticException" ], [ "incrementExact", "org.apache.commons.math3.util", "FastMath", "public static long incrementExact(final long n) throws MathArithmeticException" ], [ "decrementExact", "org.apache.commons.math3.util", "FastMath", "public static int decrementExact(final int n) throws MathArithmeticException" ], [ "decrementExact", "org.apache.commons.math3.util", "FastMath", "public static long decrementExact(final long n) throws MathArithmeticException" ], [ "addExact", "org.apache.commons.math3.util", "FastMath", "public static int addExact(final int a, final int b) throws MathArithmeticException" ], [ "addExact", "org.apache.commons.math3.util", "FastMath", "public static long addExact(final long a, final long b) throws MathArithmeticException" ], [ "subtractExact", "org.apache.commons.math3.util", "FastMath", "public static int subtractExact(final int a, final int b)" ], [ "subtractExact", "org.apache.commons.math3.util", "FastMath", "public static long subtractExact(final long a, final long b)" ], [ "multiplyExact", "org.apache.commons.math3.util", "FastMath", "public static int multiplyExact(final int a, final int b)" ], [ "multiplyExact", "org.apache.commons.math3.util", "FastMath", "public static long multiplyExact(final long a, final long b)" ], [ "floorDiv", "org.apache.commons.math3.util", "FastMath", "public static int floorDiv(final int a, final int b) throws MathArithmeticException" ], [ "floorDiv", "org.apache.commons.math3.util", "FastMath", "public static long floorDiv(final long a, final long b) throws MathArithmeticException" ], [ "floorMod", "org.apache.commons.math3.util", "FastMath", "public static int floorMod(final int a, final int b) throws MathArithmeticException" ], [ "floorMod", "org.apache.commons.math3.util", "FastMath", "public static long floorMod(final long a, final long b)" ], [ "copySign", "org.apache.commons.math3.util", "FastMath", "public static double copySign(double magnitude, double sign)" ], [ "copySign", "org.apache.commons.math3.util", "FastMath", "public static float copySign(float magnitude, float sign)" ], [ "getExponent", "org.apache.commons.math3.util", "FastMath", "public static int getExponent(final double d)" ], [ "getExponent", "org.apache.commons.math3.util", "FastMath", "public static int getExponent(final float f)" ], [ "getInstance", "org.apache.commons.math3.util", "BigRealField", "public static BigRealField getInstance()" ], [ "getInstance", "org.apache.commons.math3.util", "Decimal64Field", "public static final Decimal64Field getInstance()" ], [ "hash", "org.apache.commons.math3.util", "MathUtils", "public static int hash(double value)" ], [ "equals", "org.apache.commons.math3.util", "MathUtils", "public static boolean equals(double x, double y)" ], [ "hash", "org.apache.commons.math3.util", "MathUtils", "public static int hash(double[] value)" ], [ "normalizeAngle", "org.apache.commons.math3.util", "MathUtils", "public static double normalizeAngle(double a, double center)" ], [ "max", "org.apache.commons.math3.util", "MathUtils", "public static <T extends RealFieldElement<T>> T max(final T e1, final T e2)" ], [ "min", "org.apache.commons.math3.util", "MathUtils", "public static <T extends RealFieldElement<T>> T min(final T e1, final T e2)" ], [ "reduce", "org.apache.commons.math3.util", "MathUtils", "public static double reduce(double a, double period, double offset)" ], [ "copySign", "org.apache.commons.math3.util", "MathUtils", "public static byte copySign(byte magnitude, byte sign) throws MathArithmeticException" ], [ "copySign", "org.apache.commons.math3.util", "MathUtils", "public static short copySign(short magnitude, short sign) throws MathArithmeticException" ], [ "copySign", "org.apache.commons.math3.util", "MathUtils", "public static int copySign(int magnitude, int sign) throws MathArithmeticException" ], [ "copySign", "org.apache.commons.math3.util", "MathUtils", "public static long copySign(long magnitude, long sign) throws MathArithmeticException" ], [ "getDefaultNumberFormat", "org.apache.commons.math3.util", "CompositeFormat", "public static NumberFormat getDefaultNumberFormat()" ], [ "getDefaultNumberFormat", "org.apache.commons.math3.util", "CompositeFormat", "public static NumberFormat getDefaultNumberFormat(final Locale locale)" ], [ "parseNextCharacter", "org.apache.commons.math3.util", "CompositeFormat", "public static char parseNextCharacter(final String source, final ParsePosition pos)" ], [ "parseNumber", "org.apache.commons.math3.util", "CompositeFormat", "public static Number parseNumber(final String source, final NumberFormat format, final ParsePosition pos)" ], [ "parseFixedstring", "org.apache.commons.math3.util", "CompositeFormat", "public static boolean parseFixedstring(final String source, final String expected, final ParsePosition pos)" ], [ "formatDouble", "org.apache.commons.math3.util", "CompositeFormat", "public static StringBuffer formatDouble(final double value, final NumberFormat format, final StringBuffer toAppendTo, final FieldPosition pos)" ], [ "range", "org.apache.commons.math3.util", "IntegerSequence", "public static Range range(int start, int end)" ], [ "range", "org.apache.commons.math3.util", "IntegerSequence", "public static Range range(final int start, final int max, final int step)" ], [ "create", "org.apache.commons.math3.util", "IntegerSequence", "public static Incrementor create()" ], [ "create", "org.apache.commons.math3.util", "Incrementor", "public static Incrementor create()" ], [ "loadExpIntA", "org.apache.commons.math3.util", "FastMathLiteralArrays", "static double[] loadExpIntA()" ], [ "loadExpIntB", "org.apache.commons.math3.util", "FastMathLiteralArrays", "static double[] loadExpIntB()" ], [ "loadExpFracA", "org.apache.commons.math3.util", "FastMathLiteralArrays", "static double[] loadExpFracA()" ], [ "loadExpFracB", "org.apache.commons.math3.util", "FastMathLiteralArrays", "static double[] loadExpFracB()" ], [ "loadLnMant", "org.apache.commons.math3.util", "FastMathLiteralArrays", "static double[][] loadLnMant()" ], [ "binomialCoefficient", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static long binomialCoefficient(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "binomialCoefficientDouble", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static double binomialCoefficientDouble(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "binomialCoefficientLog", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static double binomialCoefficientLog(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "factorial", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static long factorial(final int n) throws NotPositiveException, MathArithmeticException" ], [ "factorialDouble", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static double factorialDouble(final int n) throws NotPositiveException" ], [ "factorialLog", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static double factorialLog(final int n) throws NotPositiveException" ], [ "stirlingS2", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static long stirlingS2(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "combinationsIterator", "org.apache.commons.math3.util", "CombinatoricsUtils", "public static Iterator<int[]> combinationsIterator(int n, int k)" ], [ "addAndCheck", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int addAndCheck(int x, int y) throws MathArithmeticException" ], [ "addAndCheck", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long addAndCheck(long a, long b) throws MathArithmeticException" ], [ "binomialCoefficient", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long binomialCoefficient(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "binomialCoefficientDouble", "org.apache.commons.math3.util", "ArithmeticUtils", "public static double binomialCoefficientDouble(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "binomialCoefficientLog", "org.apache.commons.math3.util", "ArithmeticUtils", "public static double binomialCoefficientLog(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "factorial", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long factorial(final int n) throws NotPositiveException, MathArithmeticException" ], [ "factorialDouble", "org.apache.commons.math3.util", "ArithmeticUtils", "public static double factorialDouble(final int n) throws NotPositiveException" ], [ "factorialLog", "org.apache.commons.math3.util", "ArithmeticUtils", "public static double factorialLog(final int n) throws NotPositiveException" ], [ "gcd", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int gcd(int p, int q) throws MathArithmeticException" ], [ "gcd", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long gcd(final long p, final long q) throws MathArithmeticException" ], [ "lcm", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int lcm(int a, int b) throws MathArithmeticException" ], [ "lcm", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long lcm(long a, long b) throws MathArithmeticException" ], [ "mulAndCheck", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int mulAndCheck(int x, int y) throws MathArithmeticException" ], [ "mulAndCheck", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long mulAndCheck(long a, long b) throws MathArithmeticException" ], [ "subAndCheck", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int subAndCheck(int x, int y) throws MathArithmeticException" ], [ "subAndCheck", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long subAndCheck(long a, long b) throws MathArithmeticException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int pow(final int k, final int e) throws NotPositiveException, MathArithmeticException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static int pow(final int k, long e) throws NotPositiveException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long pow(final long k, final int e) throws NotPositiveException, MathArithmeticException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long pow(final long k, long e) throws NotPositiveException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static BigInteger pow(final BigInteger k, int e) throws NotPositiveException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static BigInteger pow(final BigInteger k, long e) throws NotPositiveException" ], [ "pow", "org.apache.commons.math3.util", "ArithmeticUtils", "public static BigInteger pow(final BigInteger k, BigInteger e) throws NotPositiveException" ], [ "stirlingS2", "org.apache.commons.math3.util", "ArithmeticUtils", "public static long stirlingS2(final int n, final int k) throws NotPositiveException, NumberIsTooLargeException, MathArithmeticException" ], [ "isPowerOfTwo", "org.apache.commons.math3.util", "ArithmeticUtils", "public static boolean isPowerOfTwo(long n)" ], [ "getAvailableLocales", "org.apache.commons.math3.complex", "ComplexFormat", "public static Locale[] getAvailableLocales()" ], [ "getInstance", "org.apache.commons.math3.complex", "ComplexFormat", "public static ComplexFormat getInstance()" ], [ "getInstance", "org.apache.commons.math3.complex", "ComplexFormat", "public static ComplexFormat getInstance(Locale locale)" ], [ "getInstance", "org.apache.commons.math3.complex", "ComplexFormat", "public static ComplexFormat getInstance(String imaginaryCharacter, Locale locale) throws NullArgumentException, NoDataException" ], [ "getInstance", "org.apache.commons.math3.complex", "ComplexField", "public static ComplexField getInstance()" ], [ "multiply", "org.apache.commons.math3.complex", "Quaternion", "public static Quaternion multiply(final Quaternion q1, final Quaternion q2)" ], [ "add", "org.apache.commons.math3.complex", "Quaternion", "public static Quaternion add(final Quaternion q1, final Quaternion q2)" ], [ "subtract", "org.apache.commons.math3.complex", "Quaternion", "public static Quaternion subtract(final Quaternion q1, final Quaternion q2)" ], [ "dotProduct", "org.apache.commons.math3.complex", "Quaternion", "public static double dotProduct(final Quaternion q1, final Quaternion q2)" ], [ "equals", "org.apache.commons.math3.complex", "Complex", "public static boolean equals(Complex x, Complex y, int maxUlps)" ], [ "equals", "org.apache.commons.math3.complex", "Complex", "public static boolean equals(Complex x, Complex y)" ], [ "equals", "org.apache.commons.math3.complex", "Complex", "public static boolean equals(Complex x, Complex y, double eps)" ], [ "equalsWithRelativeTolerance", "org.apache.commons.math3.complex", "Complex", "public static boolean equalsWithRelativeTolerance(Complex x, Complex y, double eps)" ], [ "valueOf", "org.apache.commons.math3.complex", "Complex", "public static Complex valueOf(double realPart, double imaginaryPart)" ], [ "valueOf", "org.apache.commons.math3.complex", "Complex", "public static Complex valueOf(double realPart)" ], [ "polar2Complex", "org.apache.commons.math3.complex", "ComplexUtils", "public static Complex polar2Complex(double r, double theta) throws MathIllegalArgumentException" ], [ "convertToComplex", "org.apache.commons.math3.complex", "ComplexUtils", "public static Complex[] convertToComplex(double[] real)" ], [ "getInvertedCoefficientSum", "org.apache.commons.math3.optimization.linear", "SimplexTableau", "protected static double getInvertedCoefficientSum(final RealVector coefficients)" ], [ "getAvailableLocales", "org.apache.commons.math3.linear", "RealMatrixFormat", "public static Locale[] getAvailableLocales()" ], [ "getInstance", "org.apache.commons.math3.linear", "RealMatrixFormat", "public static RealMatrixFormat getInstance()" ], [ "getInstance", "org.apache.commons.math3.linear", "RealMatrixFormat", "public static RealMatrixFormat getInstance(final Locale locale)" ], [ "createRealMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix createRealMatrix(final int rows, final int columns)" ], [ "createFieldMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldMatrix(final Field<T> field, final int rows, final int columns)" ], [ "createRealMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix createRealMatrix(double[][] data) throws NullArgumentException, DimensionMismatchException, NoDataException" ], [ "createFieldMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldMatrix(T[][] data) throws DimensionMismatchException, NoDataException, NullArgumentException" ], [ "createRealIdentityMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix createRealIdentityMatrix(int dimension)" ], [ "createFieldIdentityMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldIdentityMatrix(final Field<T> field, final int dimension)" ], [ "createRealDiagonalMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix createRealDiagonalMatrix(final double[] diagonal)" ], [ "createFieldDiagonalMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldMatrix<T> createFieldDiagonalMatrix(final T[] diagonal)" ], [ "createRealVector", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealVector createRealVector(double[] data) throws NoDataException, NullArgumentException" ], [ "createFieldVector", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldVector<T> createFieldVector(final T[] data) throws NoDataException, NullArgumentException, ZeroException" ], [ "createRowRealMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix createRowRealMatrix(double[] rowData) throws NoDataException, NullArgumentException" ], [ "createRowFieldMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldMatrix<T> createRowFieldMatrix(final T[] rowData) throws NoDataException, NullArgumentException" ], [ "createColumnRealMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix createColumnRealMatrix(double[] columnData) throws NoDataException, NullArgumentException" ], [ "createColumnFieldMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static <T extends FieldElement<T>> FieldMatrix<T> createColumnFieldMatrix(final T[] columnData) throws NoDataException, NullArgumentException" ], [ "isSymmetric", "org.apache.commons.math3.linear", "MatrixUtils", "public static boolean isSymmetric(RealMatrix matrix, double eps)" ], [ "fractionMatrixToRealMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static Array2DRowRealMatrix fractionMatrixToRealMatrix(final FieldMatrix<Fraction> m)" ], [ "bigFractionMatrixToRealMatrix", "org.apache.commons.math3.linear", "MatrixUtils", "public static Array2DRowRealMatrix bigFractionMatrixToRealMatrix(final FieldMatrix<BigFraction> m)" ], [ "blockInverse", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix blockInverse(RealMatrix m, int splitIndex)" ], [ "inverse", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix inverse(RealMatrix matrix) throws NullArgumentException, SingularMatrixException, NonSquareMatrixException" ], [ "inverse", "org.apache.commons.math3.linear", "MatrixUtils", "public static RealMatrix inverse(RealMatrix matrix, double threshold) throws NullArgumentException, SingularMatrixException, NonSquareMatrixException" ], [ "toBlocksLayout", "org.apache.commons.math3.linear", "BlockFieldMatrix", "public static <T extends FieldElement<T>> T[][] toBlocksLayout(final T[][] rawData) throws DimensionMismatchException" ], [ "createBlocksLayout", "org.apache.commons.math3.linear", "BlockFieldMatrix", "public static <T extends FieldElement<T>> T[][] createBlocksLayout(final Field<T> field, final int rows, final int columns)" ], [ "toBlocksLayout", "org.apache.commons.math3.linear", "BlockRealMatrix", "public static double[][] toBlocksLayout(final double[][] rawData) throws DimensionMismatchException" ], [ "createBlocksLayout", "org.apache.commons.math3.linear", "BlockRealMatrix", "public static double[][] createBlocksLayout(final int rows, final int columns)" ], [ "unmodifiableRealVector", "org.apache.commons.math3.linear", "RealVector", "public static RealVector unmodifiableRealVector(final RealVector v)" ], [ "getAvailableLocales", "org.apache.commons.math3.linear", "RealVectorFormat", "public static Locale[] getAvailableLocales()" ], [ "getInstance", "org.apache.commons.math3.linear", "RealVectorFormat", "public static RealVectorFormat getInstance()" ], [ "getInstance", "org.apache.commons.math3.linear", "RealVectorFormat", "public static RealVectorFormat getInstance(final Locale locale)" ], [ "create", "org.apache.commons.math3.linear", "JacobiPreconditioner", "public static JacobiPreconditioner create(final RealLinearOperator a) throws NonSquareOperatorException" ], [ "extractField", "org.apache.commons.math3.linear", "AbstractFieldMatrix", "protected static <T extends FieldElement<T>> Field<T> extractField(final T[][] d) throws NoDataException, NullArgumentException" ], [ "extractField", "org.apache.commons.math3.linear", "AbstractFieldMatrix", "protected static <T extends FieldElement<T>> Field<T> extractField(final T[] d) throws NoDataException" ], [ "buildArray", "org.apache.commons.math3.linear", "AbstractFieldMatrix", "protected static <T extends FieldElement<T>> T[][] buildArray(final Field<T> field, final int rows, final int columns)" ], [ "buildArray", "org.apache.commons.math3.linear", "AbstractFieldMatrix", "protected static <T extends FieldElement<T>> T[] buildArray(final Field<T> field, final int length)" ], [ "estimate", "org.apache.commons.math3.distribution.fitting", "MultivariateNormalMixtureExpectationMaximization", "public static MixtureMultivariateNormalDistribution estimate(final double[][] data, final int numComponents) throws NotStrictlyPositiveException, DimensionMismatchException" ], [ "sample", "org.apache.commons.math3.distribution", "BetaDistribution", "static double sample(RandomGenerator random, final double alpha, final double beta)" ], [ "sample", "org.apache.commons.math3.distribution", "ChengBetaSampler", "static double sample(RandomGenerator random, final double alpha, final double beta)" ], [ "getStirlingError", "org.apache.commons.math3.distribution", "SaddlePointExpansion", "static double getStirlingError(double z)" ], [ "getDeviancePart", "org.apache.commons.math3.distribution", "SaddlePointExpansion", "static double getDeviancePart(double x, double mu)" ], [ "logBinomialProbability", "org.apache.commons.math3.distribution", "SaddlePointExpansion", "static double logBinomialProbability(int x, int n, double p, double q)" ], [ "helper1", "org.apache.commons.math3.distribution", "ZipfDistribution", "static double helper1(final double x)" ], [ "helper2", "org.apache.commons.math3.distribution", "ZipfDistribution", "static double helper2(final double x)" ], [ "helper1", "org.apache.commons.math3.distribution", "ZipfRejectionInversionSampler", "static double helper1(final double x)" ], [ "helper2", "org.apache.commons.math3.distribution", "ZipfRejectionInversionSampler", "static double helper2(final double x)" ], [ "unlimited", "org.apache.commons.math3.optim", "MaxIter", "public static MaxIter unlimited()" ], [ "getInvertedCoefficientSum", "org.apache.commons.math3.optim.linear", "SimplexTableau", "protected static double getInvertedCoefficientSum(final RealVector coefficients)" ], [ "unbounded", "org.apache.commons.math3.optim", "SimpleBounds", "public static SimpleBounds unbounded(int dim)" ], [ "unlimited", "org.apache.commons.math3.optim", "MaxEval", "public static MaxEval unlimited()" ], [ "erf", "org.apache.commons.math3.special", "Erf", "public static double erf(double x)" ], [ "erfc", "org.apache.commons.math3.special", "Erf", "public static double erfc(double x)" ], [ "erf", "org.apache.commons.math3.special", "Erf", "public static double erf(double x1, double x2)" ], [ "erfInv", "org.apache.commons.math3.special", "Erf", "public static double erfInv(final double x)" ], [ "erfcInv", "org.apache.commons.math3.special", "Erf", "public static double erfcInv(final double x)" ], [ "value", "org.apache.commons.math3.special", "BesselJ", "public static double value(double order, double x) throws MathIllegalArgumentException, ConvergenceException" ], [ "rjBesl", "org.apache.commons.math3.special", "BesselJ", "public static BesselJResult rjBesl(double x, double alpha, int nb)" ], [ "logGamma", "org.apache.commons.math3.special", "Gamma", "public static double logGamma(double x)" ], [ "regularizedGammaP", "org.apache.commons.math3.special", "Gamma", "public static double regularizedGammaP(double a, double x)" ], [ "regularizedGammaP", "org.apache.commons.math3.special", "Gamma", "public static double regularizedGammaP(double a, double x, double epsilon, int maxIterations)" ], [ "regularizedGammaQ", "org.apache.commons.math3.special", "Gamma", "public static double regularizedGammaQ(double a, double x)" ], [ "regularizedGammaQ", "org.apache.commons.math3.special", "Gamma", "public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations)" ], [ "digamma", "org.apache.commons.math3.special", "Gamma", "public static double digamma(double x)" ], [ "trigamma", "org.apache.commons.math3.special", "Gamma", "public static double trigamma(double x)" ], [ "lanczos", "org.apache.commons.math3.special", "Gamma", "public static double lanczos(final double x)" ], [ "invGamma1pm1", "org.apache.commons.math3.special", "Gamma", "public static double invGamma1pm1(final double x)" ], [ "logGamma1p", "org.apache.commons.math3.special", "Gamma", "public static double logGamma1p(final double x) throws NumberIsTooSmallException, NumberIsTooLargeException" ], [ "gamma", "org.apache.commons.math3.special", "Gamma", "public static double gamma(final double x)" ], [ "regularizedBeta", "org.apache.commons.math3.special", "Beta", "public static double regularizedBeta(double x, double a, double b)" ], [ "regularizedBeta", "org.apache.commons.math3.special", "Beta", "public static double regularizedBeta(double x, double a, double b, double epsilon)" ], [ "regularizedBeta", "org.apache.commons.math3.special", "Beta", "public static double regularizedBeta(double x, double a, double b, int maxIterations)" ], [ "regularizedBeta", "org.apache.commons.math3.special", "Beta", "public static double regularizedBeta(double x, final double a, final double b, double epsilon, int maxIterations)" ], [ "logBeta", "org.apache.commons.math3.special", "Beta", "public static double logBeta(double a, double b, double epsilon, int maxIterations)" ], [ "logBeta", "org.apache.commons.math3.special", "Beta", "public static double logBeta(final double p, final double q)" ], [ "getInstance", "org.apache.commons.math3.ode.sampling", "DummyStepHandler", "public static DummyStepHandler getInstance()" ], [ "getInstance", "org.apache.commons.math3.ode.nonstiff", "AdamsNordsieckTransformer", "public static AdamsNordsieckTransformer getInstance(final int nSteps)" ], [ "taylor", "org.apache.commons.math3.ode.nonstiff", "AdamsFieldStepInterpolator", "public static <S extends RealFieldElement<S>> FieldODEStateAndDerivative<S> taylor(final FieldODEStateAndDerivative<S> reference, final S time, final S stepSize, final S[] scaled, final Array2DRowFieldMatrix<S> nordsieck)" ], [ "getInstance", "org.apache.commons.math3.ode.nonstiff", "AdamsNordsieckFieldTransformer", "public static <T extends RealFieldElement<T>> AdamsNordsieckFieldTransformer<T> getInstance(final Field<T> field, final int nSteps)" ], [ "sum", "org.apache.commons.math3.stat", "StatUtils", "public static double sum(final double[] values) throws MathIllegalArgumentException" ], [ "sum", "org.apache.commons.math3.stat", "StatUtils", "public static double sum(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "sumSq", "org.apache.commons.math3.stat", "StatUtils", "public static double sumSq(final double[] values) throws MathIllegalArgumentException" ], [ "sumSq", "org.apache.commons.math3.stat", "StatUtils", "public static double sumSq(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "product", "org.apache.commons.math3.stat", "StatUtils", "public static double product(final double[] values) throws MathIllegalArgumentException" ], [ "product", "org.apache.commons.math3.stat", "StatUtils", "public static double product(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "sumLog", "org.apache.commons.math3.stat", "StatUtils", "public static double sumLog(final double[] values) throws MathIllegalArgumentException" ], [ "sumLog", "org.apache.commons.math3.stat", "StatUtils", "public static double sumLog(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "mean", "org.apache.commons.math3.stat", "StatUtils", "public static double mean(final double[] values) throws MathIllegalArgumentException" ], [ "mean", "org.apache.commons.math3.stat", "StatUtils", "public static double mean(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "geometricMean", "org.apache.commons.math3.stat", "StatUtils", "public static double geometricMean(final double[] values) throws MathIllegalArgumentException" ], [ "geometricMean", "org.apache.commons.math3.stat", "StatUtils", "public static double geometricMean(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "variance", "org.apache.commons.math3.stat", "StatUtils", "public static double variance(final double[] values) throws MathIllegalArgumentException" ], [ "variance", "org.apache.commons.math3.stat", "StatUtils", "public static double variance(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "variance", "org.apache.commons.math3.stat", "StatUtils", "public static double variance(final double[] values, final double mean, final int begin, final int length) throws MathIllegalArgumentException" ], [ "variance", "org.apache.commons.math3.stat", "StatUtils", "public static double variance(final double[] values, final double mean) throws MathIllegalArgumentException" ], [ "populationVariance", "org.apache.commons.math3.stat", "StatUtils", "public static double populationVariance(final double[] values) throws MathIllegalArgumentException" ], [ "populationVariance", "org.apache.commons.math3.stat", "StatUtils", "public static double populationVariance(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "populationVariance", "org.apache.commons.math3.stat", "StatUtils", "public static double populationVariance(final double[] values, final double mean, final int begin, final int length) throws MathIllegalArgumentException" ], [ "populationVariance", "org.apache.commons.math3.stat", "StatUtils", "public static double populationVariance(final double[] values, final double mean) throws MathIllegalArgumentException" ], [ "max", "org.apache.commons.math3.stat", "StatUtils", "public static double max(final double[] values) throws MathIllegalArgumentException" ], [ "max", "org.apache.commons.math3.stat", "StatUtils", "public static double max(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "min", "org.apache.commons.math3.stat", "StatUtils", "public static double min(final double[] values) throws MathIllegalArgumentException" ], [ "min", "org.apache.commons.math3.stat", "StatUtils", "public static double min(final double[] values, final int begin, final int length) throws MathIllegalArgumentException" ], [ "percentile", "org.apache.commons.math3.stat", "StatUtils", "public static double percentile(final double[] values, final double p) throws MathIllegalArgumentException" ], [ "percentile", "org.apache.commons.math3.stat", "StatUtils", "public static double percentile(final double[] values, final int begin, final int length, final double p) throws MathIllegalArgumentException" ], [ "sumDifference", "org.apache.commons.math3.stat", "StatUtils", "public static double sumDifference(final double[] sample1, final double[] sample2) throws DimensionMismatchException, NoDataException" ], [ "meanDifference", "org.apache.commons.math3.stat", "StatUtils", "public static double meanDifference(final double[] sample1, final double[] sample2) throws DimensionMismatchException, NoDataException" ], [ "varianceDifference", "org.apache.commons.math3.stat", "StatUtils", "public static double varianceDifference(final double[] sample1, final double[] sample2, double meanDifference) throws DimensionMismatchException, NumberIsTooSmallException" ], [ "normalize", "org.apache.commons.math3.stat", "StatUtils", "public static double[] normalize(final double[] sample)" ], [ "mode", "org.apache.commons.math3.stat", "StatUtils", "public static double[] mode(double[] sample) throws MathIllegalArgumentException" ], [ "mode", "org.apache.commons.math3.stat", "StatUtils", "public static double[] mode(double[] sample, final int begin, final int length)" ], [ "getAgrestiCoullInterval", "org.apache.commons.math3.stat.interval", "IntervalUtils", "public static ConfidenceInterval getAgrestiCoullInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)" ], [ "getClopperPearsonInterval", "org.apache.commons.math3.stat.interval", "IntervalUtils", "public static ConfidenceInterval getClopperPearsonInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)" ], [ "getNormalApproximationInterval", "org.apache.commons.math3.stat.interval", "IntervalUtils", "public static ConfidenceInterval getNormalApproximationInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)" ], [ "getWilsonScoreInterval", "org.apache.commons.math3.stat.interval", "IntervalUtils", "public static ConfidenceInterval getWilsonScoreInterval(int numberOfTrials, int numberOfSuccesses, double confidenceLevel)" ], [ "homoscedasticT", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double homoscedasticT(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException" ], [ "homoscedasticT", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double homoscedasticT(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException" ], [ "homoscedasticTTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean homoscedasticTTest(final double[] sample1, final double[] sample2, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException" ], [ "homoscedasticTTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double homoscedasticTTest(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException" ], [ "homoscedasticTTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double homoscedasticTTest(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException" ], [ "pairedT", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double pairedT(final double[] sample1, final double[] sample2) throws NullArgumentException, NoDataException, DimensionMismatchException, NumberIsTooSmallException" ], [ "pairedTTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean pairedTTest(final double[] sample1, final double[] sample2, final double alpha) throws NullArgumentException, NoDataException, DimensionMismatchException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException" ], [ "pairedTTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double pairedTTest(final double[] sample1, final double[] sample2) throws NullArgumentException, NoDataException, DimensionMismatchException, NumberIsTooSmallException, MaxCountExceededException" ], [ "t", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double t(final double mu, final double[] observed) throws NullArgumentException, NumberIsTooSmallException" ], [ "t", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double t(final double mu, final StatisticalSummary sampleStats) throws NullArgumentException, NumberIsTooSmallException" ], [ "t", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double t(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException" ], [ "t", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double t(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean tTest(final double mu, final double[] sample, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double tTest(final double mu, final double[] sample) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean tTest(final double mu, final StatisticalSummary sampleStats, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double tTest(final double mu, final StatisticalSummary sampleStats) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean tTest(final double[] sample1, final double[] sample2, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double tTest(final double[] sample1, final double[] sample2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean tTest(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2, final double alpha) throws NullArgumentException, NumberIsTooSmallException, OutOfRangeException, MaxCountExceededException" ], [ "tTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double tTest(final StatisticalSummary sampleStats1, final StatisticalSummary sampleStats2) throws NullArgumentException, NumberIsTooSmallException, MaxCountExceededException" ], [ "chiSquare", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double chiSquare(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException" ], [ "chiSquare", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double chiSquare(final long[][] counts) throws NullArgumentException, NotPositiveException, DimensionMismatchException" ], [ "chiSquareTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean chiSquareTest(final double[] expected, final long[] observed, final double alpha) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, OutOfRangeException, MaxCountExceededException" ], [ "chiSquareTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double chiSquareTest(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, MaxCountExceededException" ], [ "chiSquareTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean chiSquareTest(final long[][] counts, final double alpha) throws NullArgumentException, DimensionMismatchException, NotPositiveException, OutOfRangeException, MaxCountExceededException" ], [ "chiSquareTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double chiSquareTest(final long[][] counts) throws NullArgumentException, DimensionMismatchException, NotPositiveException, MaxCountExceededException" ], [ "chiSquareDataSetsComparison", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double chiSquareDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException" ], [ "chiSquareTestDataSetsComparison", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double chiSquareTestDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException, MaxCountExceededException" ], [ "chiSquareTestDataSetsComparison", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean chiSquareTestDataSetsComparison(final long[] observed1, final long[] observed2, final double alpha) throws DimensionMismatchException, NotPositiveException, ZeroException, OutOfRangeException, MaxCountExceededException" ], [ "oneWayAnovaFValue", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double oneWayAnovaFValue(final Collection<double[]> categoryData) throws NullArgumentException, DimensionMismatchException" ], [ "oneWayAnovaPValue", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double oneWayAnovaPValue(final Collection<double[]> categoryData) throws NullArgumentException, DimensionMismatchException, ConvergenceException, MaxCountExceededException" ], [ "oneWayAnovaTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean oneWayAnovaTest(final Collection<double[]> categoryData, final double alpha) throws NullArgumentException, DimensionMismatchException, OutOfRangeException, ConvergenceException, MaxCountExceededException" ], [ "g", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double g(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException" ], [ "gTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double gTest(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, MaxCountExceededException" ], [ "gTestIntrinsic", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double gTestIntrinsic(final double[] expected, final long[] observed) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, MaxCountExceededException" ], [ "gTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean gTest(final double[] expected, final long[] observed, final double alpha) throws NotPositiveException, NotStrictlyPositiveException, DimensionMismatchException, OutOfRangeException, MaxCountExceededException" ], [ "gDataSetsComparison", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double gDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException" ], [ "rootLogLikelihoodRatio", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double rootLogLikelihoodRatio(final long k11, final long k12, final long k21, final long k22) throws DimensionMismatchException, NotPositiveException, ZeroException" ], [ "gTestDataSetsComparison", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double gTestDataSetsComparison(final long[] observed1, final long[] observed2) throws DimensionMismatchException, NotPositiveException, ZeroException, MaxCountExceededException" ], [ "gTestDataSetsComparison", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean gTestDataSetsComparison(final long[] observed1, final long[] observed2, final double alpha) throws DimensionMismatchException, NotPositiveException, ZeroException, OutOfRangeException, MaxCountExceededException" ], [ "kolmogorovSmirnovStatistic", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double kolmogorovSmirnovStatistic(RealDistribution dist, double[] data) throws InsufficientDataException, NullArgumentException" ], [ "kolmogorovSmirnovTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double kolmogorovSmirnovTest(RealDistribution dist, double[] data) throws InsufficientDataException, NullArgumentException" ], [ "kolmogorovSmirnovTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double kolmogorovSmirnovTest(RealDistribution dist, double[] data, boolean strict) throws InsufficientDataException, NullArgumentException" ], [ "kolmogorovSmirnovTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static boolean kolmogorovSmirnovTest(RealDistribution dist, double[] data, double alpha) throws InsufficientDataException, NullArgumentException" ], [ "kolmogorovSmirnovStatistic", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double kolmogorovSmirnovStatistic(double[] x, double[] y) throws InsufficientDataException, NullArgumentException" ], [ "kolmogorovSmirnovTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double kolmogorovSmirnovTest(double[] x, double[] y) throws InsufficientDataException, NullArgumentException" ], [ "kolmogorovSmirnovTest", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double kolmogorovSmirnovTest(double[] x, double[] y, boolean strict) throws InsufficientDataException, NullArgumentException" ], [ "exactP", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double exactP(double d, int m, int n, boolean strict)" ], [ "approximateP", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double approximateP(double d, int n, int m)" ], [ "monteCarloP", "org.apache.commons.math3.stat.inference", "TestUtils", "public static double monteCarloP(double d, int n, int m, boolean strict, int iterations)" ], [ "aggregate", "org.apache.commons.math3.stat.descriptive", "AggregateSummaryStatistics", "public static StatisticalSummaryValues aggregate(Collection<? extends StatisticalSummary> statistics)" ], [ "newMarkers", "org.apache.commons.math3.stat.descriptive.rank", "PSquarePercentile", "public static PSquareMarkers newMarkers(final List<Double> initialFive, final double p)" ], [ "exponentialDecay", "org.apache.commons.math3.ml.neuralnet.sofm", "NeighbourhoodSizeFunctionFactory", "public static NeighbourhoodSizeFunction exponentialDecay(final double initValue, final double valueAtNumCall, final long numCall)" ], [ "quasiSigmoidDecay", "org.apache.commons.math3.ml.neuralnet.sofm", "NeighbourhoodSizeFunctionFactory", "public static NeighbourhoodSizeFunction quasiSigmoidDecay(final double initValue, final double slope, final long numCall)" ], [ "exponentialDecay", "org.apache.commons.math3.ml.neuralnet.sofm", "LearningFactorFunctionFactory", "public static LearningFactorFunction exponentialDecay(final double initValue, final double valueAtNumCall, final long numCall)" ], [ "quasiSigmoidDecay", "org.apache.commons.math3.ml.neuralnet.sofm", "LearningFactorFunctionFactory", "public static LearningFactorFunction quasiSigmoidDecay(final double initValue, final double slope, final long numCall)" ], [ "findBest", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static Neuron findBest(double[] features, Iterable<Neuron> neurons, DistanceMeasure distance)" ], [ "findBestAndSecondBest", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static Pair<Neuron, Neuron> findBestAndSecondBest(double[] features, Iterable<Neuron> neurons, DistanceMeasure distance)" ], [ "sort", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static Neuron[] sort(double[] features, Iterable<Neuron> neurons, DistanceMeasure distance)" ], [ "computeU", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static double[][] computeU(NeuronSquareMesh2D map, DistanceMeasure distance)" ], [ "computeHitHistogram", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static int[][] computeHitHistogram(Iterable<double[]> data, NeuronSquareMesh2D map, DistanceMeasure distance)" ], [ "computeQuantizationError", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static double computeQuantizationError(Iterable<double[]> data, Iterable<Neuron> neurons, DistanceMeasure distance)" ], [ "computeTopographicError", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "public static double computeTopographicError(Iterable<double[]> data, Network net, DistanceMeasure distance)" ], [ "uniform", "org.apache.commons.math3.ml.neuralnet", "FeatureInitializerFactory", "public static FeatureInitializer uniform(final RandomGenerator rng, final double min, final double max)" ], [ "uniform", "org.apache.commons.math3.ml.neuralnet", "FeatureInitializerFactory", "public static FeatureInitializer uniform(final double min, final double max)" ], [ "function", "org.apache.commons.math3.ml.neuralnet", "FeatureInitializerFactory", "public static FeatureInitializer function(final UnivariateFunction f, final double init, final double inc)" ], [ "randomize", "org.apache.commons.math3.ml.neuralnet", "FeatureInitializerFactory", "public static FeatureInitializer randomize(final RealDistribution random, final FeatureInitializer orig)" ], [ "split", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp[] split(final DfpField field, final String a)" ], [ "split", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp[] split(final Dfp a)" ], [ "splitMult", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp[] splitMult(final Dfp[] a, final Dfp[] b)" ], [ "splitDiv", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp[] splitDiv(final Dfp[] a, final Dfp[] b)" ], [ "splitPow", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp splitPow(final Dfp[] base, int a)" ], [ "pow", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp pow(Dfp base, int a)" ], [ "exp", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp exp(final Dfp a)" ], [ "expInternal", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp expInternal(final Dfp a)" ], [ "log", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp log(Dfp a)" ], [ "logInternal", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp[] logInternal(final Dfp[] a)" ], [ "pow", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp pow(Dfp x, final Dfp y)" ], [ "sinInternal", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp sinInternal(Dfp[] a)" ], [ "cosInternal", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp cosInternal(Dfp[] a)" ], [ "sin", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp sin(final Dfp a)" ], [ "cos", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp cos(Dfp a)" ], [ "tan", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp tan(final Dfp a)" ], [ "atanInternal", "org.apache.commons.math3.dfp", "DfpMath", "protected static Dfp atanInternal(final Dfp a)" ], [ "atan", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp atan(final Dfp a)" ], [ "asin", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp asin(final Dfp a)" ], [ "acos", "org.apache.commons.math3.dfp", "DfpMath", "public static Dfp acos(Dfp a)" ], [ "copysign", "org.apache.commons.math3.dfp", "Dfp", "public static Dfp copysign(final Dfp x, final Dfp y)" ], [ "computeExp", "org.apache.commons.math3.dfp", "DfpField", "public static Dfp computeExp(final Dfp a, final Dfp one)" ], [ "computeLn", "org.apache.commons.math3.dfp", "DfpField", "public static Dfp computeLn(final Dfp a, final Dfp one, final Dfp two)" ], [ "getRandomGenerator", "org.apache.commons.math3.genetics", "GeneticAlgorithm", "public static synchronized RandomGenerator getRandomGenerator()" ], [ "randomPermutation", "org.apache.commons.math3.genetics", "RandomKey", "public static final List<Double> randomPermutation(final int l)" ], [ "identityPermutation", "org.apache.commons.math3.genetics", "RandomKey", "public static final List<Double> identityPermutation(final int l)" ], [ "comparatorPermutation", "org.apache.commons.math3.genetics", "RandomKey", "public static <S> List<Double> comparatorPermutation(final List<S> data, final Comparator<S> comparator)" ], [ "inducedPermutation", "org.apache.commons.math3.genetics", "RandomKey", "public static <S> List<Double> inducedPermutation(final List<S> originalData, final List<S> permutedData) throws DimensionMismatchException, MathIllegalArgumentException" ], [ "randomBinaryRepresentation", "org.apache.commons.math3.genetics", "BinaryChromosome", "public static List<Integer> randomBinaryRepresentation(int length)" ], [ "getAvailableLocales", "org.apache.commons.math3.geometry", "VectorFormat", "public static Locale[] getAvailableLocales()" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3DFormat", "public static Vector3DFormat getInstance()" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3DFormat", "public static Vector3DFormat getInstance(final Locale locale)" ], [ "angle", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T angle(final FieldVector3D<T> v1, final FieldVector3D<T> v2) throws MathArithmeticException" ], [ "angle", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T angle(final FieldVector3D<T> v1, final Vector3D v2) throws MathArithmeticException" ], [ "angle", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T angle(final Vector3D v1, final FieldVector3D<T> v2) throws MathArithmeticException" ], [ "dotProduct", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T dotProduct(final FieldVector3D<T> v1, final FieldVector3D<T> v2)" ], [ "dotProduct", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T dotProduct(final FieldVector3D<T> v1, final Vector3D v2)" ], [ "dotProduct", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T dotProduct(final Vector3D v1, final FieldVector3D<T> v2)" ], [ "crossProduct", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> FieldVector3D<T> crossProduct(final FieldVector3D<T> v1, final FieldVector3D<T> v2)" ], [ "crossProduct", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> FieldVector3D<T> crossProduct(final FieldVector3D<T> v1, final Vector3D v2)" ], [ "crossProduct", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> FieldVector3D<T> crossProduct(final Vector3D v1, final FieldVector3D<T> v2)" ], [ "distance1", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distance1(final FieldVector3D<T> v1, final FieldVector3D<T> v2)" ], [ "distance1", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distance1(final FieldVector3D<T> v1, final Vector3D v2)" ], [ "distance1", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distance1(final Vector3D v1, final FieldVector3D<T> v2)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distance(final FieldVector3D<T> v1, final FieldVector3D<T> v2)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distance(final FieldVector3D<T> v1, final Vector3D v2)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distance(final Vector3D v1, final FieldVector3D<T> v2)" ], [ "distanceInf", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distanceInf(final FieldVector3D<T> v1, final FieldVector3D<T> v2)" ], [ "distanceInf", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distanceInf(final FieldVector3D<T> v1, final Vector3D v2)" ], [ "distanceInf", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distanceInf(final Vector3D v1, final FieldVector3D<T> v2)" ], [ "distanceSq", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distanceSq(final FieldVector3D<T> v1, final FieldVector3D<T> v2)" ], [ "distanceSq", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distanceSq(final FieldVector3D<T> v1, final Vector3D v2)" ], [ "distanceSq", "org.apache.commons.math3.geometry.euclidean.threed", "FieldVector3D", "public static <T extends RealFieldElement<T>> T distanceSq(final Vector3D v1, final FieldVector3D<T> v2)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.threed", "Rotation", "public static double distance(Rotation r1, Rotation r2)" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.threed", "Euclidean3D", "public static Euclidean3D getInstance()" ], [ "applyTo", "org.apache.commons.math3.geometry.euclidean.threed", "FieldRotation", "public static <T extends RealFieldElement<T>> FieldVector3D<T> applyTo(final Rotation r, final FieldVector3D<T> u)" ], [ "applyInverseTo", "org.apache.commons.math3.geometry.euclidean.threed", "FieldRotation", "public static <T extends RealFieldElement<T>> FieldVector3D<T> applyInverseTo(final Rotation r, final FieldVector3D<T> u)" ], [ "applyTo", "org.apache.commons.math3.geometry.euclidean.threed", "FieldRotation", "public static <T extends RealFieldElement<T>> FieldRotation<T> applyTo(final Rotation r1, final FieldRotation<T> rInner)" ], [ "applyInverseTo", "org.apache.commons.math3.geometry.euclidean.threed", "FieldRotation", "public static <T extends RealFieldElement<T>> FieldRotation<T> applyInverseTo(final Rotation rOuter, final FieldRotation<T> rInner)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.threed", "FieldRotation", "public static <T extends RealFieldElement<T>> T distance(final FieldRotation<T> r1, final FieldRotation<T> r2)" ], [ "angle", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static double angle(Vector3D v1, Vector3D v2) throws MathArithmeticException" ], [ "dotProduct", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static double dotProduct(Vector3D v1, Vector3D v2)" ], [ "crossProduct", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2)" ], [ "distance1", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static double distance1(Vector3D v1, Vector3D v2)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static double distance(Vector3D v1, Vector3D v2)" ], [ "distanceInf", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static double distanceInf(Vector3D v1, Vector3D v2)" ], [ "distanceSq", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static double distanceSq(Vector3D v1, Vector3D v2)" ], [ "intersection", "org.apache.commons.math3.geometry.euclidean.threed", "Plane", "public static Vector3D intersection(final Plane plane1, final Plane plane2, final Plane plane3)" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.oned", "Euclidean1D", "public static Euclidean1D getInstance()" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1DFormat", "public static Vector1DFormat getInstance()" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1DFormat", "public static Vector1DFormat getInstance(final Locale locale)" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static double distance(Vector1D p1, Vector1D p2)" ], [ "distanceInf", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static double distanceInf(Vector1D p1, Vector1D p2)" ], [ "distanceSq", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static double distanceSq(Vector1D p1, Vector1D p2)" ], [ "reducePoints", "org.apache.commons.math3.geometry.euclidean.twod.hull", "AklToussaintHeuristic", "public static Collection<Vector2D> reducePoints(final Collection<Vector2D> points)" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2DFormat", "public static Vector2DFormat getInstance()" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2DFormat", "public static Vector2DFormat getInstance(final Locale locale)" ], [ "angle", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static double angle(Vector2D v1, Vector2D v2) throws MathArithmeticException" ], [ "distance", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static double distance(Vector2D p1, Vector2D p2)" ], [ "distanceInf", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static double distanceInf(Vector2D p1, Vector2D p2)" ], [ "distanceSq", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static double distanceSq(Vector2D p1, Vector2D p2)" ], [ "getInstance", "org.apache.commons.math3.geometry.euclidean.twod", "Euclidean2D", "public static Euclidean2D getInstance()" ], [ "getTransform", "org.apache.commons.math3.geometry.euclidean.twod", "Line", "public static Transform<Euclidean2D, Euclidean1D> getTransform(final AffineTransform transform) throws MathIllegalArgumentException" ], [ "getTransform", "org.apache.commons.math3.geometry.euclidean.twod", "Line", "public static Transform<Euclidean2D, Euclidean1D> getTransform(final double cXX, final double cYX, final double cXY, final double cYY, final double cX1, final double cY1) throws MathIllegalArgumentException" ], [ "distance", "org.apache.commons.math3.geometry.spherical.oned", "S1Point", "public static double distance(S1Point p1, S1Point p2)" ], [ "getInstance", "org.apache.commons.math3.geometry.spherical.oned", "Sphere1D", "public static Sphere1D getInstance()" ], [ "getInstance", "org.apache.commons.math3.geometry.spherical.twod", "Sphere2D", "public static Sphere2D getInstance()" ], [ "getTransform", "org.apache.commons.math3.geometry.spherical.twod", "Circle", "public static Transform<Sphere2D, Sphere1D> getTransform(final Rotation rotation)" ], [ "distance", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static double distance(S2Point p1, S2Point p2)" ], [ "createAdaptor", "org.apache.commons.math3.random", "RandomAdaptor", "public static Random createAdaptor(RandomGenerator randomGenerator)" ], [ "createRandomGenerator", "org.apache.commons.math3.random", "RandomGeneratorFactory", "public static RandomGenerator createRandomGenerator(final Random rng)" ], [ "convertToLong", "org.apache.commons.math3.random", "RandomGeneratorFactory", "public static long convertToLong(int[] seed)" ], [ "getAvailableLocales", "org.apache.commons.math3.fraction", "BigFractionFormat", "public static Locale[] getAvailableLocales()" ], [ "formatBigFraction", "org.apache.commons.math3.fraction", "BigFractionFormat", "public static String formatBigFraction(final BigFraction f)" ], [ "getImproperInstance", "org.apache.commons.math3.fraction", "BigFractionFormat", "public static BigFractionFormat getImproperInstance()" ], [ "getImproperInstance", "org.apache.commons.math3.fraction", "BigFractionFormat", "public static BigFractionFormat getImproperInstance(final Locale locale)" ], [ "getProperInstance", "org.apache.commons.math3.fraction", "BigFractionFormat", "public static BigFractionFormat getProperInstance()" ], [ "getProperInstance", "org.apache.commons.math3.fraction", "BigFractionFormat", "public static BigFractionFormat getProperInstance(final Locale locale)" ], [ "getReducedFraction", "org.apache.commons.math3.fraction", "Fraction", "public static Fraction getReducedFraction(int numerator, int denominator)" ], [ "getReducedFraction", "org.apache.commons.math3.fraction", "BigFraction", "public static BigFraction getReducedFraction(final int numerator, final int denominator)" ], [ "getDefaultNumberFormat", "org.apache.commons.math3.fraction", "AbstractFormat", "protected static NumberFormat getDefaultNumberFormat()" ], [ "getDefaultNumberFormat", "org.apache.commons.math3.fraction", "AbstractFormat", "protected static NumberFormat getDefaultNumberFormat(final Locale locale)" ], [ "parseNextCharacter", "org.apache.commons.math3.fraction", "AbstractFormat", "protected static char parseNextCharacter(final String source, final ParsePosition pos)" ], [ "getAvailableLocales", "org.apache.commons.math3.fraction", "FractionFormat", "public static Locale[] getAvailableLocales()" ], [ "formatFraction", "org.apache.commons.math3.fraction", "FractionFormat", "public static String formatFraction(Fraction f)" ], [ "getImproperInstance", "org.apache.commons.math3.fraction", "FractionFormat", "public static FractionFormat getImproperInstance()" ], [ "getImproperInstance", "org.apache.commons.math3.fraction", "FractionFormat", "public static FractionFormat getImproperInstance(final Locale locale)" ], [ "getProperInstance", "org.apache.commons.math3.fraction", "FractionFormat", "public static FractionFormat getProperInstance()" ], [ "getProperInstance", "org.apache.commons.math3.fraction", "FractionFormat", "public static FractionFormat getProperInstance(final Locale locale)" ], [ "getDefaultNumberFormat", "org.apache.commons.math3.fraction", "FractionFormat", "protected static NumberFormat getDefaultNumberFormat()" ], [ "getInstance", "org.apache.commons.math3.fraction", "FractionField", "public static FractionField getInstance()" ], [ "getInstance", "org.apache.commons.math3.fraction", "BigFractionField", "public static BigFractionField getInstance()" ], [ "flatten", "org.apache.commons.math3.exception.util", "ArgUtils", "public static Object[] flatten(Object[] array)" ], [ "scaleArray", "org.apache.commons.math3.transform", "TransformUtils", "public static double[] scaleArray(double[] f, double d)" ], [ "scaleArray", "org.apache.commons.math3.transform", "TransformUtils", "public static Complex[] scaleArray(Complex[] f, double d)" ], [ "createRealImaginaryArray", "org.apache.commons.math3.transform", "TransformUtils", "public static double[][] createRealImaginaryArray(final Complex[] dataC)" ], [ "createComplexArray", "org.apache.commons.math3.transform", "TransformUtils", "public static Complex[] createComplexArray(final double[][] dataRI) throws DimensionMismatchException" ], [ "exactLog2", "org.apache.commons.math3.transform", "TransformUtils", "public static int exactLog2(final int n) throws MathIllegalArgumentException" ] ],
  "tokensProjectClassesNonPrivateStaticAttributes" : [ [ "PRIMES", "org.apache.commons.math3.primes", "SmallPrimes", "public static final int[] PRIMES = { 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171, 1181, 1187, 1193, 1201, 1213, 1217, 1223, 1229, 1231, 1237, 1249, 1259, 1277, 1279, 1283, 1289, 1291, 1297, 1301, 1303, 1307, 1319, 1321, 1327, 1361, 1367, 1373, 1381, 1399, 1409, 1423, 1427, 1429, 1433, 1439, 1447, 1451, 1453, 1459, 1471, 1481, 1483, 1487, 1489, 1493, 1499, 1511, 1523, 1531, 1543, 1549, 1553, 1559, 1567, 1571, 1579, 1583, 1597, 1601, 1607, 1609, 1613, 1619, 1621, 1627, 1637, 1657, 1663, 1667, 1669, 1693, 1697, 1699, 1709, 1721, 1723, 1733, 1741, 1747, 1753, 1759, 1777, 1783, 1787, 1789, 1801, 1811, 1823, 1831, 1847, 1861, 1867, 1871, 1873, 1877, 1879, 1889, 1901, 1907, 1913, 1931, 1933, 1949, 1951, 1973, 1979, 1987, 1993, 1997, 1999, 2003, 2011, 2017, 2027, 2029, 2039, 2053, 2063, 2069, 2081, 2083, 2087, 2089, 2099, 2111, 2113, 2129, 2131, 2137, 2141, 2143, 2153, 2161, 2179, 2203, 2207, 2213, 2221, 2237, 2239, 2243, 2251, 2267, 2269, 2273, 2281, 2287, 2293, 2297, 2309, 2311, 2333, 2339, 2341, 2347, 2351, 2357, 2371, 2377, 2381, 2383, 2389, 2393, 2399, 2411, 2417, 2423, 2437, 2441, 2447, 2459, 2467, 2473, 2477, 2503, 2521, 2531, 2539, 2543, 2549, 2551, 2557, 2579, 2591, 2593, 2609, 2617, 2621, 2633, 2647, 2657, 2659, 2663, 2671, 2677, 2683, 2687, 2689, 2693, 2699, 2707, 2711, 2713, 2719, 2729, 2731, 2741, 2749, 2753, 2767, 2777, 2789, 2791, 2797, 2801, 2803, 2819, 2833, 2837, 2843, 2851, 2857, 2861, 2879, 2887, 2897, 2903, 2909, 2917, 2927, 2939, 2953, 2957, 2963, 2969, 2971, 2999, 3001, 3011, 3019, 3023, 3037, 3041, 3049, 3061, 3067, 3079, 3083, 3089, 3109, 3119, 3121, 3137, 3163, 3167, 3169, 3181, 3187, 3191, 3203, 3209, 3217, 3221, 3229, 3251, 3253, 3257, 3259, 3271, 3299, 3301, 3307, 3313, 3319, 3323, 3329, 3331, 3343, 3347, 3359, 3361, 3371, 3373, 3389, 3391, 3407, 3413, 3433, 3449, 3457, 3461, 3463, 3467, 3469, 3491, 3499, 3511, 3517, 3527, 3529, 3533, 3539, 3541, 3547, 3557, 3559, 3571, 3581, 3583, 3593, 3607, 3613, 3617, 3623, 3631, 3637, 3643, 3659, 3671 };" ], [ "PRIMES_LAST", "org.apache.commons.math3.primes", "SmallPrimes", "public static final int PRIMES_LAST = PRIMES[PRIMES.length - 1];" ], [ "MIDPOINT_MAX_ITERATIONS_COUNT", "org.apache.commons.math3.analysis.integration", "MidPointIntegrator", "public static final int MIDPOINT_MAX_ITERATIONS_COUNT = 64;" ], [ "ROMBERG_MAX_ITERATIONS_COUNT", "org.apache.commons.math3.analysis.integration", "RombergIntegrator", "public static final int ROMBERG_MAX_ITERATIONS_COUNT = 32;" ], [ "SIMPSON_MAX_ITERATIONS_COUNT", "org.apache.commons.math3.analysis.integration", "SimpsonIntegrator", "public static final int SIMPSON_MAX_ITERATIONS_COUNT = 64;" ], [ "DEFAULT_ABSOLUTE_ACCURACY", "org.apache.commons.math3.analysis.integration", "BaseAbstractUnivariateIntegrator", "public static final double DEFAULT_ABSOLUTE_ACCURACY = 1.0e-15;" ], [ "DEFAULT_RELATIVE_ACCURACY", "org.apache.commons.math3.analysis.integration", "BaseAbstractUnivariateIntegrator", "public static final double DEFAULT_RELATIVE_ACCURACY = 1.0e-6;" ], [ "DEFAULT_MIN_ITERATIONS_COUNT", "org.apache.commons.math3.analysis.integration", "BaseAbstractUnivariateIntegrator", "public static final int DEFAULT_MIN_ITERATIONS_COUNT = 3;" ], [ "DEFAULT_MAX_ITERATIONS_COUNT", "org.apache.commons.math3.analysis.integration", "BaseAbstractUnivariateIntegrator", "public static final int DEFAULT_MAX_ITERATIONS_COUNT = Integer.MAX_VALUE;" ], [ "TRAPEZOID_MAX_ITERATIONS_COUNT", "org.apache.commons.math3.analysis.integration", "TrapezoidIntegrator", "public static final int TRAPEZOID_MAX_ITERATIONS_COUNT = 64;" ], [ "DEFAULT_ABSOLUTE_ACCURACY", "org.apache.commons.math3.analysis.solvers", "BaseSecantSolver", "protected static final double DEFAULT_ABSOLUTE_ACCURACY = 1e-6;" ], [ "DEFAULT_ABSOLUTE_ACCURACY", "org.apache.commons.math3.analysis.solvers", "SecantSolver", "protected static final double DEFAULT_ABSOLUTE_ACCURACY = 1e-6;" ], [ "DEFAULT_BANDWIDTH", "org.apache.commons.math3.analysis.interpolation", "LoessInterpolator", "public static final double DEFAULT_BANDWIDTH = 0.3;" ], [ "DEFAULT_ROBUSTNESS_ITERS", "org.apache.commons.math3.analysis.interpolation", "LoessInterpolator", "public static final int DEFAULT_ROBUSTNESS_ITERS = 2;" ], [ "DEFAULT_ACCURACY", "org.apache.commons.math3.analysis.interpolation", "LoessInterpolator", "public static final double DEFAULT_ACCURACY = 1e-12;" ], [ "serialVersionUID", "org.apache.commons.math3.analysis.interpolation", "NevilleInterpolator", "static final long serialVersionUID = 3003707660147873733L;" ], [ "DEFAULT_EXTEND", "org.apache.commons.math3.analysis.interpolation", "UnivariatePeriodicInterpolator", "public static final int DEFAULT_EXTEND = 5;" ], [ "DEFAULT_MICROSPHERE_ELEMENTS", "org.apache.commons.math3.analysis.interpolation", "MicrosphereInterpolator", "public static final int DEFAULT_MICROSPHERE_ELEMENTS = 2000;" ], [ "DEFAULT_BRIGHTNESS_EXPONENT", "org.apache.commons.math3.analysis.interpolation", "MicrosphereInterpolator", "public static final int DEFAULT_BRIGHTNESS_EXPONENT = 2;" ], [ "EPSILON", "org.apache.commons.math3.util", "Precision", "public static final double EPSILON;" ], [ "SAFE_MIN", "org.apache.commons.math3.util", "Precision", "public static final double SAFE_MIN;" ], [ "FREE", "org.apache.commons.math3.util", "OpenIntToDoubleHashMap", "protected static final byte FREE = 0;" ], [ "FULL", "org.apache.commons.math3.util", "OpenIntToDoubleHashMap", "protected static final byte FULL = 1;" ], [ "REMOVED", "org.apache.commons.math3.util", "OpenIntToDoubleHashMap", "protected static final byte REMOVED = 2;" ], [ "FREE", "org.apache.commons.math3.util", "OpenIntToFieldHashMap", "protected static final byte FREE = 0;" ], [ "FULL", "org.apache.commons.math3.util", "OpenIntToFieldHashMap", "protected static final byte FULL = 1;" ], [ "REMOVED", "org.apache.commons.math3.util", "OpenIntToFieldHashMap", "protected static final byte REMOVED = 2;" ], [ "PI", "org.apache.commons.math3.util", "FastMath", "public static final double PI = 105414357.0 / 33554432.0 + 1.984187159361080883e-9;" ], [ "E", "org.apache.commons.math3.util", "FastMath", "public static final double E = 2850325.0 / 1048576.0 + 8.254840070411028747e-8;" ], [ "EXP_INT_TABLE_MAX_INDEX", "org.apache.commons.math3.util", "FastMath", "static final int EXP_INT_TABLE_MAX_INDEX = 750;" ], [ "EXP_INT_TABLE_LEN", "org.apache.commons.math3.util", "FastMath", "static final int EXP_INT_TABLE_LEN = EXP_INT_TABLE_MAX_INDEX * 2;" ], [ "LN_MANT_LEN", "org.apache.commons.math3.util", "FastMath", "static final int LN_MANT_LEN = 1024;" ], [ "EXP_FRAC_TABLE_LEN", "org.apache.commons.math3.util", "FastMath", "static final int EXP_FRAC_TABLE_LEN = 1025;" ], [ "NAN", "org.apache.commons.math3.util", "FastMath", "public static final Split NAN = new Split(Double.NaN, 0);" ], [ "POSITIVE_INFINITY", "org.apache.commons.math3.util", "FastMath", "public static final Split POSITIVE_INFINITY = new Split(Double.POSITIVE_INFINITY, 0);" ], [ "NEGATIVE_INFINITY", "org.apache.commons.math3.util", "FastMath", "public static final Split NEGATIVE_INFINITY = new Split(Double.NEGATIVE_INFINITY, 0);" ], [ "NAN", "org.apache.commons.math3.util", "Split", "public static final Split NAN = new Split(Double.NaN, 0);" ], [ "POSITIVE_INFINITY", "org.apache.commons.math3.util", "Split", "public static final Split POSITIVE_INFINITY = new Split(Double.POSITIVE_INFINITY, 0);" ], [ "NEGATIVE_INFINITY", "org.apache.commons.math3.util", "Split", "public static final Split NEGATIVE_INFINITY = new Split(Double.NEGATIVE_INFINITY, 0);" ], [ "ADDITIVE_MODE", "org.apache.commons.math3.util", "ResizableDoubleArray", "public static final int ADDITIVE_MODE = 1;" ], [ "MULTIPLICATIVE_MODE", "org.apache.commons.math3.util", "ResizableDoubleArray", "public static final int MULTIPLICATIVE_MODE = 0;" ], [ "TWO_PI", "org.apache.commons.math3.util", "MathUtils", "public static final double TWO_PI = 2 * FastMath.PI;" ], [ "PI_SQUARED", "org.apache.commons.math3.util", "MathUtils", "public static final double PI_SQUARED = FastMath.PI * FastMath.PI;" ], [ "FACTORIALS", "org.apache.commons.math3.util", "CombinatoricsUtils", "static final long[] FACTORIALS = new long[] { 1l, 1l, 2l, 6l, 24l, 120l, 720l, 5040l, 40320l, 362880l, 3628800l, 39916800l, 479001600l, 6227020800l, 87178291200l, 1307674368000l, 20922789888000l, 355687428096000l, 6402373705728000l, 121645100408832000l, 2432902008176640000l };" ], [ "STIRLING_S2", "org.apache.commons.math3.util", "CombinatoricsUtils", "static final AtomicReference<long[][]> STIRLING_S2 = new AtomicReference<long[][]>(null);" ], [ "ZERO", "org.apache.commons.math3.util", "Decimal64", "public static final Decimal64 ZERO;" ], [ "ONE", "org.apache.commons.math3.util", "Decimal64", "public static final Decimal64 ONE;" ], [ "NEGATIVE_INFINITY", "org.apache.commons.math3.util", "Decimal64", "public static final Decimal64 NEGATIVE_INFINITY;" ], [ "POSITIVE_INFINITY", "org.apache.commons.math3.util", "Decimal64", "public static final Decimal64 POSITIVE_INFINITY;" ], [ "NAN", "org.apache.commons.math3.util", "Decimal64", "public static final Decimal64 NAN;" ], [ "ZERO", "org.apache.commons.math3.util", "BigReal", "public static final BigReal ZERO = new BigReal(BigDecimal.ZERO);" ], [ "ONE", "org.apache.commons.math3.util", "BigReal", "public static final BigReal ONE = new BigReal(BigDecimal.ONE);" ], [ "IDENTITY", "org.apache.commons.math3.complex", "Quaternion", "public static final Quaternion IDENTITY = new Quaternion(1, 0, 0, 0);" ], [ "ZERO", "org.apache.commons.math3.complex", "Quaternion", "public static final Quaternion ZERO = new Quaternion(0, 0, 0, 0);" ], [ "I", "org.apache.commons.math3.complex", "Quaternion", "public static final Quaternion I = new Quaternion(0, 1, 0, 0);" ], [ "J", "org.apache.commons.math3.complex", "Quaternion", "public static final Quaternion J = new Quaternion(0, 0, 1, 0);" ], [ "K", "org.apache.commons.math3.complex", "Quaternion", "public static final Quaternion K = new Quaternion(0, 0, 0, 1);" ], [ "I", "org.apache.commons.math3.complex", "Complex", "public static final Complex I = new Complex(0.0, 1.0);" ], [ "NaN", "org.apache.commons.math3.complex", "Complex", "public static final Complex NaN = new Complex(Double.NaN, Double.NaN);" ], [ "INF", "org.apache.commons.math3.complex", "Complex", "public static final Complex INF = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);" ], [ "ONE", "org.apache.commons.math3.complex", "Complex", "public static final Complex ONE = new Complex(1.0, 0.0);" ], [ "ZERO", "org.apache.commons.math3.complex", "Complex", "public static final Complex ZERO = new Complex(0.0, 0.0);" ], [ "MINIMUM_PROBLEM_DIMENSION", "org.apache.commons.math3.optimization.direct", "BOBYQAOptimizer", "public static final int MINIMUM_PROBLEM_DIMENSION = 2;" ], [ "DEFAULT_INITIAL_RADIUS", "org.apache.commons.math3.optimization.direct", "BOBYQAOptimizer", "public static final double DEFAULT_INITIAL_RADIUS = 10.0;" ], [ "DEFAULT_STOPPING_RADIUS", "org.apache.commons.math3.optimization.direct", "BOBYQAOptimizer", "public static final double DEFAULT_STOPPING_RADIUS = 1E-8;" ], [ "DEFAULT_CHECKFEASABLECOUNT", "org.apache.commons.math3.optimization.direct", "CMAESOptimizer", "public static final int DEFAULT_CHECKFEASABLECOUNT = 0;" ], [ "DEFAULT_STOPFITNESS", "org.apache.commons.math3.optimization.direct", "CMAESOptimizer", "public static final double DEFAULT_STOPFITNESS = 0;" ], [ "DEFAULT_ISACTIVECMA", "org.apache.commons.math3.optimization.direct", "CMAESOptimizer", "public static final boolean DEFAULT_ISACTIVECMA = true;" ], [ "DEFAULT_MAXITERATIONS", "org.apache.commons.math3.optimization.direct", "CMAESOptimizer", "public static final int DEFAULT_MAXITERATIONS = 30000;" ], [ "DEFAULT_DIAGONALONLY", "org.apache.commons.math3.optimization.direct", "CMAESOptimizer", "public static final int DEFAULT_DIAGONALONLY = 0;" ], [ "DEFAULT_RANDOMGENERATOR", "org.apache.commons.math3.optimization.direct", "CMAESOptimizer", "public static final RandomGenerator DEFAULT_RANDOMGENERATOR = new MersenneTwister();" ], [ "DEFAULT_MAX_ITERATIONS", "org.apache.commons.math3.optimization.linear", "AbstractLinearOptimizer", "public static final int DEFAULT_MAX_ITERATIONS = 100;" ], [ "DEFAULT_FORMAT", "org.apache.commons.math3.linear", "MatrixUtils", "public static final RealMatrixFormat DEFAULT_FORMAT = RealMatrixFormat.getInstance();" ], [ "OCTAVE_FORMAT", "org.apache.commons.math3.linear", "MatrixUtils", "public static final RealMatrixFormat OCTAVE_FORMAT = new RealMatrixFormat(\"[\", \"]\", \"\", \"\", \"; \", \", \");" ], [ "DEFAULT_ZERO_TOLERANCE", "org.apache.commons.math3.linear", "OpenMapRealVector", "public static final double DEFAULT_ZERO_TOLERANCE = 1.0e-12;" ], [ "BLOCK_SIZE", "org.apache.commons.math3.linear", "BlockFieldMatrix", "public static final int BLOCK_SIZE = 36;" ], [ "OPERATOR", "org.apache.commons.math3.linear", "ConjugateGradient", "public static final String OPERATOR = \"operator\";" ], [ "VECTOR", "org.apache.commons.math3.linear", "ConjugateGradient", "public static final String VECTOR = \"vector\";" ], [ "DEFAULT_RELATIVE_SYMMETRY_THRESHOLD", "org.apache.commons.math3.linear", "CholeskyDecomposition", "public static final double DEFAULT_RELATIVE_SYMMETRY_THRESHOLD = 1.0e-15;" ], [ "DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD", "org.apache.commons.math3.linear", "CholeskyDecomposition", "public static final double DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD = 1.0e-10;" ], [ "BLOCK_SIZE", "org.apache.commons.math3.linear", "BlockRealMatrix", "public static final int BLOCK_SIZE = 52;" ], [ "CBRT_MACH_PREC", "org.apache.commons.math3.linear", "SymmLQ", "static final double CBRT_MACH_PREC;" ], [ "MACH_PREC", "org.apache.commons.math3.linear", "SymmLQ", "static final double MACH_PREC;" ], [ "CBRT_MACH_PREC", "org.apache.commons.math3.linear", "State", "static final double CBRT_MACH_PREC;" ], [ "MACH_PREC", "org.apache.commons.math3.linear", "State", "static final double MACH_PREC;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "CauchyDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "SOLVER_DEFAULT_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "AbstractRealDistribution", "public static final double SOLVER_DEFAULT_ABSOLUTE_ACCURACY = 1e-6;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "TDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "ChiSquaredDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "BetaDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "NormalDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "UniformRealDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "WeibullDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "NakagamiDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "ExponentialDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "LogNormalDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "ParetoDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "FDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_MAX_ITERATIONS", "org.apache.commons.math3.distribution", "PoissonDistribution", "public static final int DEFAULT_MAX_ITERATIONS = 10000000;" ], [ "DEFAULT_EPSILON", "org.apache.commons.math3.distribution", "PoissonDistribution", "public static final double DEFAULT_EPSILON = 1e-12;" ], [ "DEFAULT_INVERSE_ABSOLUTE_ACCURACY", "org.apache.commons.math3.distribution", "GammaDistribution", "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;" ], [ "DEFAULT_ULPS", "org.apache.commons.math3.optim.linear", "SimplexSolver", "static final int DEFAULT_ULPS = 10;" ], [ "DEFAULT_CUT_OFF", "org.apache.commons.math3.optim.linear", "SimplexSolver", "static final double DEFAULT_CUT_OFF = 1e-10;" ], [ "MINIMUM_PROBLEM_DIMENSION", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv", "BOBYQAOptimizer", "public static final int MINIMUM_PROBLEM_DIMENSION = 2;" ], [ "DEFAULT_INITIAL_RADIUS", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv", "BOBYQAOptimizer", "public static final double DEFAULT_INITIAL_RADIUS = 10.0;" ], [ "DEFAULT_STOPPING_RADIUS", "org.apache.commons.math3.optim.nonlinear.scalar.noderiv", "BOBYQAOptimizer", "public static final double DEFAULT_STOPPING_RADIUS = 1E-8;" ], [ "GAMMA", "org.apache.commons.math3.special", "Gamma", "public static final double GAMMA = 0.577215664901532860606512090082;" ], [ "LANCZOS_G", "org.apache.commons.math3.special", "Gamma", "public static final double LANCZOS_G = 607.0 / 128.0;" ], [ "DEFAULT_NAN_STRATEGY", "org.apache.commons.math3.stat.ranking", "NaturalRanking", "public static final NaNStrategy DEFAULT_NAN_STRATEGY = NaNStrategy.FAILED;" ], [ "DEFAULT_TIES_STRATEGY", "org.apache.commons.math3.stat.ranking", "NaturalRanking", "public static final TiesStrategy DEFAULT_TIES_STRATEGY = TiesStrategy.AVERAGE;" ], [ "MAXIMUM_PARTIAL_SUM_COUNT", "org.apache.commons.math3.stat.inference", "KolmogorovSmirnovTest", "protected static final int MAXIMUM_PARTIAL_SUM_COUNT = 100000;" ], [ "KS_SUM_CAUCHY_CRITERION", "org.apache.commons.math3.stat.inference", "KolmogorovSmirnovTest", "protected static final double KS_SUM_CAUCHY_CRITERION = 1E-20;" ], [ "PG_SUM_RELATIVE_ERROR", "org.apache.commons.math3.stat.inference", "KolmogorovSmirnovTest", "protected static final double PG_SUM_RELATIVE_ERROR = 1.0e-10;" ], [ "SMALL_SAMPLE_PRODUCT", "org.apache.commons.math3.stat.inference", "KolmogorovSmirnovTest", "protected static final int SMALL_SAMPLE_PRODUCT = 200;" ], [ "LARGE_SAMPLE_PRODUCT", "org.apache.commons.math3.stat.inference", "KolmogorovSmirnovTest", "protected static final int LARGE_SAMPLE_PRODUCT = 10000;" ], [ "MONTE_CARLO_ITERATIONS", "org.apache.commons.math3.stat.inference", "KolmogorovSmirnovTest", "protected static final int MONTE_CARLO_ITERATIONS = 1000000;" ], [ "INFINITE_WINDOW", "org.apache.commons.math3.stat.descriptive", "DescriptiveStatistics", "public static final int INFINITE_WINDOW = -1;" ], [ "UPSIDE_VARIANCE", "org.apache.commons.math3.stat.descriptive.moment", "SemiVariance", "public static final Direction UPSIDE_VARIANCE = Direction.UPSIDE;" ], [ "DOWNSIDE_VARIANCE", "org.apache.commons.math3.stat.descriptive.moment", "SemiVariance", "public static final Direction DOWNSIDE_VARIANCE = Direction.DOWNSIDE;" ], [ "COMPARATOR", "org.apache.commons.math3.ml.neuralnet", "MapUtils", "static final Comparator<PairNeuronDouble> COMPARATOR = new Comparator<PairNeuronDouble>() {\n\n    /**\n     * {@inheritDoc}\n     */\n    public int compare(PairNeuronDouble o1, PairNeuronDouble o2) {\n        return Double.compare(o1.value, o2.value);\n    }\n};" ], [ "COMPARATOR", "org.apache.commons.math3.ml.neuralnet", "PairNeuronDouble", "static final Comparator<PairNeuronDouble> COMPARATOR = new Comparator<PairNeuronDouble>() {\n\n    /**\n     * {@inheritDoc}\n     */\n    public int compare(PairNeuronDouble o1, PairNeuronDouble o2) {\n        return Double.compare(o1.value, o2.value);\n    }\n};" ], [ "RADIX", "org.apache.commons.math3.dfp", "Dfp", "public static final int RADIX = 10000;" ], [ "MIN_EXP", "org.apache.commons.math3.dfp", "Dfp", "public static final int MIN_EXP = -32767;" ], [ "MAX_EXP", "org.apache.commons.math3.dfp", "Dfp", "public static final int MAX_EXP = 32768;" ], [ "ERR_SCALE", "org.apache.commons.math3.dfp", "Dfp", "public static final int ERR_SCALE = 32760;" ], [ "FINITE", "org.apache.commons.math3.dfp", "Dfp", "public static final byte FINITE = 0;" ], [ "INFINITE", "org.apache.commons.math3.dfp", "Dfp", "public static final byte INFINITE = 1;" ], [ "SNAN", "org.apache.commons.math3.dfp", "Dfp", "public static final byte SNAN = 2;" ], [ "QNAN", "org.apache.commons.math3.dfp", "Dfp", "public static final byte QNAN = 3;" ], [ "FLAG_INVALID", "org.apache.commons.math3.dfp", "DfpField", "public static final int FLAG_INVALID = 1;" ], [ "FLAG_DIV_ZERO", "org.apache.commons.math3.dfp", "DfpField", "public static final int FLAG_DIV_ZERO = 2;" ], [ "FLAG_OVERFLOW", "org.apache.commons.math3.dfp", "DfpField", "public static final int FLAG_OVERFLOW = 4;" ], [ "FLAG_UNDERFLOW", "org.apache.commons.math3.dfp", "DfpField", "public static final int FLAG_UNDERFLOW = 8;" ], [ "FLAG_INEXACT", "org.apache.commons.math3.dfp", "DfpField", "public static final int FLAG_INEXACT = 16;" ], [ "DEFAULT_PREFIX", "org.apache.commons.math3.geometry", "VectorFormat", "public static final String DEFAULT_PREFIX = \"{\";" ], [ "DEFAULT_SUFFIX", "org.apache.commons.math3.geometry", "VectorFormat", "public static final String DEFAULT_SUFFIX = \"}\";" ], [ "DEFAULT_SEPARATOR", "org.apache.commons.math3.geometry", "VectorFormat", "public static final String DEFAULT_SEPARATOR = \"; \";" ], [ "XYZ", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder XYZ = new RotationOrder(\"XYZ\", Vector3D.PLUS_I, Vector3D.PLUS_J, Vector3D.PLUS_K);" ], [ "XZY", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder XZY = new RotationOrder(\"XZY\", Vector3D.PLUS_I, Vector3D.PLUS_K, Vector3D.PLUS_J);" ], [ "YXZ", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder YXZ = new RotationOrder(\"YXZ\", Vector3D.PLUS_J, Vector3D.PLUS_I, Vector3D.PLUS_K);" ], [ "YZX", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder YZX = new RotationOrder(\"YZX\", Vector3D.PLUS_J, Vector3D.PLUS_K, Vector3D.PLUS_I);" ], [ "ZXY", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder ZXY = new RotationOrder(\"ZXY\", Vector3D.PLUS_K, Vector3D.PLUS_I, Vector3D.PLUS_J);" ], [ "ZYX", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder ZYX = new RotationOrder(\"ZYX\", Vector3D.PLUS_K, Vector3D.PLUS_J, Vector3D.PLUS_I);" ], [ "XYX", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder XYX = new RotationOrder(\"XYX\", Vector3D.PLUS_I, Vector3D.PLUS_J, Vector3D.PLUS_I);" ], [ "XZX", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder XZX = new RotationOrder(\"XZX\", Vector3D.PLUS_I, Vector3D.PLUS_K, Vector3D.PLUS_I);" ], [ "YXY", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder YXY = new RotationOrder(\"YXY\", Vector3D.PLUS_J, Vector3D.PLUS_I, Vector3D.PLUS_J);" ], [ "YZY", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder YZY = new RotationOrder(\"YZY\", Vector3D.PLUS_J, Vector3D.PLUS_K, Vector3D.PLUS_J);" ], [ "ZXZ", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder ZXZ = new RotationOrder(\"ZXZ\", Vector3D.PLUS_K, Vector3D.PLUS_I, Vector3D.PLUS_K);" ], [ "ZYZ", "org.apache.commons.math3.geometry.euclidean.threed", "RotationOrder", "public static final RotationOrder ZYZ = new RotationOrder(\"ZYZ\", Vector3D.PLUS_K, Vector3D.PLUS_J, Vector3D.PLUS_K);" ], [ "IDENTITY", "org.apache.commons.math3.geometry.euclidean.threed", "Rotation", "public static final Rotation IDENTITY = new Rotation(1.0, 0.0, 0.0, 0.0, false);" ], [ "ZERO", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D ZERO = new Vector3D(0, 0, 0);" ], [ "PLUS_I", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D PLUS_I = new Vector3D(1, 0, 0);" ], [ "MINUS_I", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D MINUS_I = new Vector3D(-1, 0, 0);" ], [ "PLUS_J", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D PLUS_J = new Vector3D(0, 1, 0);" ], [ "MINUS_J", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D MINUS_J = new Vector3D(0, -1, 0);" ], [ "PLUS_K", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D PLUS_K = new Vector3D(0, 0, 1);" ], [ "MINUS_K", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D MINUS_K = new Vector3D(0, 0, -1);" ], [ "NaN", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D NaN = new Vector3D(Double.NaN, Double.NaN, Double.NaN);" ], [ "POSITIVE_INFINITY", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D POSITIVE_INFINITY = new Vector3D(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);" ], [ "NEGATIVE_INFINITY", "org.apache.commons.math3.geometry.euclidean.threed", "Vector3D", "public static final Vector3D NEGATIVE_INFINITY = new Vector3D(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);" ], [ "ZERO", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static final Vector1D ZERO = new Vector1D(0.0);" ], [ "ONE", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static final Vector1D ONE = new Vector1D(1.0);" ], [ "NaN", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static final Vector1D NaN = new Vector1D(Double.NaN);" ], [ "POSITIVE_INFINITY", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static final Vector1D POSITIVE_INFINITY = new Vector1D(Double.POSITIVE_INFINITY);" ], [ "NEGATIVE_INFINITY", "org.apache.commons.math3.geometry.euclidean.oned", "Vector1D", "public static final Vector1D NEGATIVE_INFINITY = new Vector1D(Double.NEGATIVE_INFINITY);" ], [ "ZERO", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static final Vector2D ZERO = new Vector2D(0, 0);" ], [ "NaN", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static final Vector2D NaN = new Vector2D(Double.NaN, Double.NaN);" ], [ "POSITIVE_INFINITY", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static final Vector2D POSITIVE_INFINITY = new Vector2D(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);" ], [ "NEGATIVE_INFINITY", "org.apache.commons.math3.geometry.euclidean.twod", "Vector2D", "public static final Vector2D NEGATIVE_INFINITY = new Vector2D(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);" ], [ "NaN", "org.apache.commons.math3.geometry.spherical.oned", "S1Point", "public static final S1Point NaN = new S1Point(Double.NaN, Vector2D.NaN);" ], [ "PLUS_I", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point PLUS_I = new S2Point(0, 0.5 * FastMath.PI, Vector3D.PLUS_I);" ], [ "PLUS_J", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point PLUS_J = new S2Point(0.5 * FastMath.PI, 0.5 * FastMath.PI, Vector3D.PLUS_J);" ], [ "PLUS_K", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point PLUS_K = new S2Point(0, 0, Vector3D.PLUS_K);" ], [ "MINUS_I", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point MINUS_I = new S2Point(FastMath.PI, 0.5 * FastMath.PI, Vector3D.MINUS_I);" ], [ "MINUS_J", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point MINUS_J = new S2Point(1.5 * FastMath.PI, 0.5 * FastMath.PI, Vector3D.MINUS_J);" ], [ "MINUS_K", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point MINUS_K = new S2Point(0, FastMath.PI, Vector3D.MINUS_K);" ], [ "NaN", "org.apache.commons.math3.geometry.spherical.twod", "S2Point", "public static final S2Point NaN = new S2Point(Double.NaN, Double.NaN, Vector3D.NaN);" ], [ "DIGEST_MODE", "org.apache.commons.math3.random", "ValueServer", "public static final int DIGEST_MODE = 0;" ], [ "REPLAY_MODE", "org.apache.commons.math3.random", "ValueServer", "public static final int REPLAY_MODE = 1;" ], [ "UNIFORM_MODE", "org.apache.commons.math3.random", "ValueServer", "public static final int UNIFORM_MODE = 2;" ], [ "EXPONENTIAL_MODE", "org.apache.commons.math3.random", "ValueServer", "public static final int EXPONENTIAL_MODE = 3;" ], [ "GAUSSIAN_MODE", "org.apache.commons.math3.random", "ValueServer", "public static final int GAUSSIAN_MODE = 4;" ], [ "CONSTANT_MODE", "org.apache.commons.math3.random", "ValueServer", "public static final int CONSTANT_MODE = 5;" ], [ "DEFAULT_BIN_COUNT", "org.apache.commons.math3.random", "EmpiricalDistribution", "public static final int DEFAULT_BIN_COUNT = 1000;" ], [ "TWO", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction TWO = new Fraction(2, 1);" ], [ "ONE", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction ONE = new Fraction(1, 1);" ], [ "ZERO", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction ZERO = new Fraction(0, 1);" ], [ "FOUR_FIFTHS", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction FOUR_FIFTHS = new Fraction(4, 5);" ], [ "ONE_FIFTH", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction ONE_FIFTH = new Fraction(1, 5);" ], [ "ONE_HALF", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction ONE_HALF = new Fraction(1, 2);" ], [ "ONE_QUARTER", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction ONE_QUARTER = new Fraction(1, 4);" ], [ "ONE_THIRD", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction ONE_THIRD = new Fraction(1, 3);" ], [ "THREE_FIFTHS", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction THREE_FIFTHS = new Fraction(3, 5);" ], [ "THREE_QUARTERS", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction THREE_QUARTERS = new Fraction(3, 4);" ], [ "TWO_FIFTHS", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction TWO_FIFTHS = new Fraction(2, 5);" ], [ "TWO_QUARTERS", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction TWO_QUARTERS = new Fraction(2, 4);" ], [ "TWO_THIRDS", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction TWO_THIRDS = new Fraction(2, 3);" ], [ "MINUS_ONE", "org.apache.commons.math3.fraction", "Fraction", "public static final Fraction MINUS_ONE = new Fraction(-1, 1);" ], [ "TWO", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction TWO = new BigFraction(2);" ], [ "ONE", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction ONE = new BigFraction(1);" ], [ "ZERO", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction ZERO = new BigFraction(0);" ], [ "MINUS_ONE", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction MINUS_ONE = new BigFraction(-1);" ], [ "FOUR_FIFTHS", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction FOUR_FIFTHS = new BigFraction(4, 5);" ], [ "ONE_FIFTH", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction ONE_FIFTH = new BigFraction(1, 5);" ], [ "ONE_HALF", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction ONE_HALF = new BigFraction(1, 2);" ], [ "ONE_QUARTER", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction ONE_QUARTER = new BigFraction(1, 4);" ], [ "ONE_THIRD", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction ONE_THIRD = new BigFraction(1, 3);" ], [ "THREE_FIFTHS", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction THREE_FIFTHS = new BigFraction(3, 5);" ], [ "THREE_QUARTERS", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction THREE_QUARTERS = new BigFraction(3, 4);" ], [ "TWO_FIFTHS", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction TWO_FIFTHS = new BigFraction(2, 5);" ], [ "TWO_QUARTERS", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction TWO_QUARTERS = new BigFraction(2, 4);" ], [ "TWO_THIRDS", "org.apache.commons.math3.fraction", "BigFraction", "public static final BigFraction TWO_THIRDS = new BigFraction(2, 3);" ], [ "INTEGER_ZERO", "org.apache.commons.math3.exception", "MathIllegalNumberException", "protected static final Integer INTEGER_ZERO = Integer.valueOf(0);" ], [ "serialVersionUID", "org.apache.commons.math3.transform", "FastSineTransformer", "static final long serialVersionUID = 20120211L;" ], [ "serialVersionUID", "org.apache.commons.math3.transform", "FastFourierTransformer", "static final long serialVersionUID = 20120210L;" ], [ "serialVersionUID", "org.apache.commons.math3.transform", "FastCosineTransformer", "static final long serialVersionUID = 20120212L;" ], [ "serialVersionUID", "org.apache.commons.math3.transform", "FastHadamardTransformer", "static final long serialVersionUID = 20120211L;" ] ],
  "tokensMethodJavadocValues" : [ ],
  "tokensMethodArguments" : [ [ "field", "org.apache.commons.math3.dfp", "DfpField" ], [ "x", "", "byte" ] ],
  "tokensMethodVariablesNonPrivateNonStaticNonVoidMethods" : [ [ "remainder", "org.apache.commons.math3.dfp", "Dfp", "public Dfp remainder(final Dfp d)" ], [ "linearCombination", "org.apache.commons.math3.dfp", "Dfp", "public Dfp linearCombination(final Dfp a1, final Dfp b1, final Dfp a2, final Dfp b2, final Dfp a3, final Dfp b3, final Dfp a4, final Dfp b4)" ], [ "ceil", "org.apache.commons.math3.dfp", "Dfp", "public Dfp ceil()" ], [ "tan", "org.apache.commons.math3", "RealFieldElement", "public abstract T tan()" ], [ "linearCombination", "org.apache.commons.math3", "RealFieldElement", "public abstract T linearCombination(T arg0, T arg1, T arg2, T arg3, T arg4, T arg5)" ], [ "abs", "org.apache.commons.math3", "RealFieldElement", "public abstract T abs()" ], [ "linearCombination", "org.apache.commons.math3.dfp", "Dfp", "public Dfp linearCombination(final double a1, final Dfp b1, final double a2, final Dfp b2)" ], [ "getField", "org.apache.commons.math3.dfp", "Dfp", "public DfpField getField()" ], [ "cos", "org.apache.commons.math3.dfp", "Dfp", "public Dfp cos()" ], [ "newInstance", "org.apache.commons.math3.dfp", "Dfp", "public Dfp newInstance(final String s)" ], [ "add", "org.apache.commons.math3.dfp", "Dfp", "public Dfp add(final double a)" ], [ "acos", "org.apache.commons.math3.dfp", "Dfp", "public Dfp acos()" ], [ "exp", "org.apache.commons.math3.dfp", "Dfp", "public Dfp exp()" ], [ "newInstance", "org.apache.commons.math3.dfp", "Dfp", "public Dfp newInstance(final byte x)" ], [ "getClass", "java.lang", "Object", "public final native Class<? extends Object> getClass()" ], [ "linearCombination", "org.apache.commons.math3", "RealFieldElement", "public abstract T linearCombination(T arg0, T arg1, T arg2, T arg3, T arg4, T arg5, T arg6, T arg7)" ], [ "linearCombination", "org.apache.commons.math3", "RealFieldElement", "public abstract T linearCombination(double[] arg0, T[] arg1) throws DimensionMismatchException" ], [ "atan2", "org.apache.commons.math3.dfp", "Dfp", "public Dfp atan2(final Dfp x) throws DimensionMismatchException" ], [ "pow", "org.apache.commons.math3.dfp", "Dfp", "public Dfp pow(final Dfp e)" ], [ "tan", "org.apache.commons.math3.dfp", "Dfp", "public Dfp tan()" ], [ "sqrt", "org.apache.commons.math3", "RealFieldElement", "public abstract T sqrt()" ], [ "signum", "org.apache.commons.math3", "RealFieldElement", "public abstract T signum()" ], [ "linearCombination", "org.apache.commons.math3.dfp", "Dfp", "public Dfp linearCombination(final Dfp a1, final Dfp b1, final Dfp a2, final Dfp b2)" ], [ "power10K", "org.apache.commons.math3.dfp", "Dfp", "public Dfp power10K(final int e)" ], [ "atan", "org.apache.commons.math3.dfp", "Dfp", "public Dfp atan()" ], [ "acosh", "org.apache.commons.math3.dfp", "Dfp", "public Dfp acosh()" ], [ "align", "org.apache.commons.math3.dfp", "Dfp", "protected int align(int e)" ], [ "linearCombination", "org.apache.commons.math3", "RealFieldElement", "public abstract T linearCombination(double arg0, T arg1, double arg2, T arg3, double arg4, T arg5, double arg6, T arg7)" ], [ "copySign", "org.apache.commons.math3", "RealFieldElement", "public abstract T copySign(double arg0)" ], [ "newInstance", "org.apache.commons.math3.dfp", "Dfp", "public Dfp newInstance(final long x)" ], [ "pow", "org.apache.commons.math3", "RealFieldElement", "public abstract T pow(double arg0)" ], [ "negate", "org.apache.commons.math3.dfp", "Dfp", "public Dfp negate()" ], [ "hypot", "org.apache.commons.math3.dfp", "Dfp", "public Dfp hypot(final Dfp y)" ], [ "lessThan", "org.apache.commons.math3.dfp", "Dfp", "public boolean lessThan(final Dfp x)" ], [ "asin", "org.apache.commons.math3.dfp", "Dfp", "public Dfp asin()" ], [ "subtract", "org.apache.commons.math3.dfp", "Dfp", "public Dfp subtract(final double a)" ], [ "abs", "org.apache.commons.math3.dfp", "Dfp", "public Dfp abs()" ], [ "getRadixDigits", "org.apache.commons.math3.dfp", "Dfp", "public int getRadixDigits()" ], [ "equals", "org.apache.commons.math3.dfp", "Dfp", "public boolean equals(final Object other)" ], [ "pow", "org.apache.commons.math3.dfp", "Dfp", "public Dfp pow(final double p)" ], [ "newInstance", "org.apache.commons.math3.dfp", "Dfp", "public Dfp newInstance(final byte sig, final byte code)" ], [ "linearCombination", "org.apache.commons.math3.dfp", "Dfp", "public Dfp linearCombination(final double a1, final Dfp b1, final double a2, final Dfp b2, final double a3, final Dfp b3)" ], [ "strictlyNegative", "org.apache.commons.math3.dfp", "Dfp", "public boolean strictlyNegative()" ], [ "isInfinite", "org.apache.commons.math3.dfp", "Dfp", "public boolean isInfinite()" ], [ "nextAfter", "org.apache.commons.math3.dfp", "Dfp", "public Dfp nextAfter(final Dfp x)" ], [ "toSplitDouble", "org.apache.commons.math3.dfp", "Dfp", "public double[] toSplitDouble()" ], [ "subtract", "org.apache.commons.math3", "FieldElement", "public abstract T subtract(T arg0) throws NullArgumentException" ], [ "rootN", "org.apache.commons.math3.dfp", "Dfp", "public Dfp rootN(final int n)" ], [ "divide", "org.apache.commons.math3.dfp", "Dfp", "public Dfp divide(int divisor)" ], [ "newInstance", "org.apache.commons.math3.dfp", "Dfp", "public Dfp newInstance(final int x)" ], [ "tanh", "org.apache.commons.math3.dfp", "Dfp", "public Dfp tanh()" ], [ "greaterThan", "org.apache.commons.math3.dfp", "Dfp", "public boolean greaterThan(final Dfp x)" ], [ "trunc", "org.apache.commons.math3.dfp", "Dfp", "protected Dfp trunc(final DfpField.RoundingMode rmode)" ], [ "reciprocal", "org.apache.commons.math3.dfp", "Dfp", "public Dfp reciprocal()" ], [ "toDouble", "org.apache.commons.math3.dfp", "Dfp", "public double toDouble()" ], [ "multiply", "org.apache.commons.math3.dfp", "Dfp", "public Dfp multiply(final Dfp x)" ], [ "signum", "org.apache.commons.math3.dfp", "Dfp", "public Dfp signum()" ], [ "isZero", "org.apache.commons.math3.dfp", "Dfp", "public boolean isZero()" ], [ "linearCombination", "org.apache.commons.math3.dfp", "Dfp", "public Dfp linearCombination(final double a1, final Dfp b1, final double a2, final Dfp b2, final double a3, final Dfp b3, final double a4, final Dfp b4)" ], [ "asin", "org.apache.commons.math3", "RealFieldElement", "public abstract T asin()" ], [ "dotrap", "org.apache.commons.math3.dfp", "Dfp", "public Dfp dotrap(int type, String what, Dfp oper, Dfp result)" ], [ "reciprocal", "org.apache.commons.math3", "RealFieldElement", "public abstract T reciprocal()" ], [ "getZero", "org.apache.commons.math3.dfp", "Dfp", "public Dfp getZero()" ], [ "ceil", "org.apache.commons.math3", "RealFieldElement", "public abstract T ceil()" ], [ "asinh", "org.apache.commons.math3.dfp", "Dfp", "public Dfp asinh()" ], [ "newInstance", "org.apache.commons.math3.dfp", "Dfp", "public Dfp newInstance(final double x)" ], [ "divide", "org.apache.commons.math3", "FieldElement", "public abstract T divide(T arg0) throws NullArgumentException, MathArithmeticException" ], [ "copySign", "org.apache.commons.math3", "RealFieldElement", "public abstract T copySign(T arg0)" ], [ "rint", "org.apache.commons.math3", "RealFieldElement", "public abstract T rint()" ], [ "newInstance", "org.apache.commons.math3.dfp", "Dfp", "public Dfp newInstance()" ], [ "linearCombination", "org.apache.commons.math3", "RealFieldElement", "public abstract T linearCombination(double arg0, T arg1, double arg2, T arg3)" ], [ "linearCombination", "org.apache.commons.math3.dfp", "Dfp", "public Dfp linearCombination(final Dfp[] a, final Dfp[] b) throws DimensionMismatchException" ], [ "linearCombination", "org.apache.commons.math3", "RealFieldElement", "public abstract T linearCombination(T[] arg0, T[] arg1) throws DimensionMismatchException" ], [ "cosh", "org.apache.commons.math3", "RealFieldElement", "public abstract T cosh()" ], [ "trap", "org.apache.commons.math3.dfp", "Dfp", "protected Dfp trap(int type, String what, Dfp oper, Dfp def, Dfp result)" ], [ "cbrt", "org.apache.commons.math3", "RealFieldElement", "public abstract T cbrt()" ], [ "linearCombination", "org.apache.commons.math3.dfp", "Dfp", "public Dfp linearCombination(final Dfp a1, final Dfp b1, final Dfp a2, final Dfp b2, final Dfp a3, final Dfp b3)" ], [ "dfp2sci", "org.apache.commons.math3.dfp", "Dfp", "protected String dfp2sci()" ], [ "rootN", "org.apache.commons.math3", "RealFieldElement", "public abstract T rootN(int arg0)" ], [ "getTwo", "org.apache.commons.math3.dfp", "Dfp", "public Dfp getTwo()" ], [ "acosh", "org.apache.commons.math3", "RealFieldElement", "public abstract T acosh()" ], [ "isNaN", "org.apache.commons.math3.dfp", "Dfp", "public boolean isNaN()" ], [ "floor", "org.apache.commons.math3.dfp", "Dfp", "public Dfp floor()" ], [ "toString", "org.apache.commons.math3.dfp", "Dfp", "public String toString()" ], [ "scalb", "org.apache.commons.math3", "RealFieldElement", "public abstract T scalb(int arg0)" ], [ "negativeOrNull", "org.apache.commons.math3.dfp", "Dfp", "public boolean negativeOrNull()" ], [ "cosh", "org.apache.commons.math3.dfp", "Dfp", "public Dfp cosh()" ], [ "hashCode", "org.apache.commons.math3.dfp", "Dfp", "public int hashCode()" ], [ "atan", "org.apache.commons.math3", "RealFieldElement", "public abstract T atan()" ], [ "expm1", "org.apache.commons.math3", "RealFieldElement", "public abstract T expm1()" ], [ "intValue", "org.apache.commons.math3.dfp", "Dfp", "public int intValue()" ], [ "copySign", "org.apache.commons.math3.dfp", "Dfp", "public Dfp copySign(final Dfp s)" ], [ "divide", "org.apache.commons.math3", "RealFieldElement", "public abstract T divide(double arg0)" ], [ "rint", "org.apache.commons.math3.dfp", "Dfp", "public Dfp rint()" ], [ "hypot", "org.apache.commons.math3", "RealFieldElement", "public abstract T hypot(T arg0) throws DimensionMismatchException" ], [ "atan2", "org.apache.commons.math3", "RealFieldElement", "public abstract T atan2(T arg0) throws DimensionMismatchException" ], [ "multiply", "org.apache.commons.math3.dfp", "Dfp", "public Dfp multiply(final int x)" ], [ "expm1", "org.apache.commons.math3.dfp", "Dfp", "public Dfp expm1()" ], [ "complement", "org.apache.commons.math3.dfp", "Dfp", "protected int complement(int extra)" ], [ "power10", "org.apache.commons.math3.dfp", "Dfp", "public Dfp power10(final int e)" ], [ "round", "org.apache.commons.math3.dfp", "Dfp", "public long round()" ], [ "linearCombination", "org.apache.commons.math3", "RealFieldElement", "public abstract T linearCombination(double arg0, T arg1, double arg2, T arg3, double arg4, T arg5)" ], [ "floor", "org.apache.commons.math3", "RealFieldElement", "public abstract T floor()" ], [ "getField", "org.apache.commons.math3", "FieldElement", "public abstract Field<T> getField()" ], [ "multiply", "org.apache.commons.math3.dfp", "Dfp", "public Dfp multiply(final double a)" ], [ "sin", "org.apache.commons.math3.dfp", "Dfp", "public Dfp sin()" ], [ "subtract", "org.apache.commons.math3.dfp", "Dfp", "public Dfp subtract(final Dfp x)" ], [ "add", "org.apache.commons.math3", "RealFieldElement", "public abstract T add(double arg0)" ], [ "log", "org.apache.commons.math3", "RealFieldElement", "public abstract T log()" ], [ "divide", "org.apache.commons.math3.dfp", "Dfp", "public Dfp divide(final double a)" ], [ "subtract", "org.apache.commons.math3", "RealFieldElement", "public abstract T subtract(double arg0)" ], [ "strictlyPositive", "org.apache.commons.math3.dfp", "Dfp", "public boolean strictlyPositive()" ], [ "sin", "org.apache.commons.math3", "RealFieldElement", "public abstract T sin()" ], [ "multiply", "org.apache.commons.math3", "FieldElement", "public abstract T multiply(int arg0)" ], [ "remainder", "org.apache.commons.math3.dfp", "Dfp", "public Dfp remainder(final double a)" ], [ "exp", "org.apache.commons.math3", "RealFieldElement", "public abstract T exp()" ], [ "log", "org.apache.commons.math3.dfp", "Dfp", "public Dfp log()" ], [ "log10K", "org.apache.commons.math3.dfp", "Dfp", "public int log10K()" ], [ "log10", "org.apache.commons.math3.dfp", "Dfp", "public int log10()" ], [ "tanh", "org.apache.commons.math3", "RealFieldElement", "public abstract T tanh()" ], [ "linearCombination", "org.apache.commons.math3", "RealFieldElement", "public abstract T linearCombination(T arg0, T arg1, T arg2, T arg3)" ], [ "multiply", "org.apache.commons.math3", "RealFieldElement", "public abstract T multiply(double arg0)" ], [ "log1p", "org.apache.commons.math3.dfp", "Dfp", "public Dfp log1p()" ], [ "newInstance", "org.apache.commons.math3.dfp", "Dfp", "public Dfp newInstance(final Dfp d)" ], [ "atanh", "org.apache.commons.math3.dfp", "Dfp", "public Dfp atanh()" ], [ "getOne", "org.apache.commons.math3.dfp", "Dfp", "public Dfp getOne()" ], [ "remainder", "org.apache.commons.math3", "RealFieldElement", "public abstract T remainder(T arg0) throws DimensionMismatchException" ], [ "pow", "org.apache.commons.math3.dfp", "Dfp", "public Dfp pow(final int n)" ], [ "negate", "org.apache.commons.math3", "FieldElement", "public abstract T negate()" ], [ "log1p", "org.apache.commons.math3", "RealFieldElement", "public abstract T log1p()" ], [ "scalb", "org.apache.commons.math3.dfp", "Dfp", "public Dfp scalb(final int n)" ], [ "pow", "org.apache.commons.math3", "RealFieldElement", "public abstract T pow(int arg0)" ], [ "linearCombination", "org.apache.commons.math3.dfp", "Dfp", "public Dfp linearCombination(final double[] a, final Dfp[] b) throws DimensionMismatchException" ], [ "cbrt", "org.apache.commons.math3.dfp", "Dfp", "public Dfp cbrt()" ], [ "divide", "org.apache.commons.math3.dfp", "Dfp", "public Dfp divide(Dfp divisor)" ], [ "copySign", "org.apache.commons.math3.dfp", "Dfp", "public Dfp copySign(final double s)" ], [ "dfp2string", "org.apache.commons.math3.dfp", "Dfp", "protected String dfp2string()" ], [ "classify", "org.apache.commons.math3.dfp", "Dfp", "public int classify()" ], [ "add", "org.apache.commons.math3.dfp", "Dfp", "public Dfp add(final Dfp x)" ], [ "sqrt", "org.apache.commons.math3.dfp", "Dfp", "public Dfp sqrt()" ], [ "positiveOrNull", "org.apache.commons.math3.dfp", "Dfp", "public boolean positiveOrNull()" ], [ "pow", "org.apache.commons.math3", "RealFieldElement", "public abstract T pow(T arg0) throws DimensionMismatchException" ], [ "multiply", "org.apache.commons.math3", "FieldElement", "public abstract T multiply(T arg0) throws NullArgumentException" ], [ "intLog10", "org.apache.commons.math3.dfp", "Dfp", "public int intLog10()" ], [ "remainder", "org.apache.commons.math3", "RealFieldElement", "public abstract T remainder(double arg0)" ], [ "acos", "org.apache.commons.math3", "RealFieldElement", "public abstract T acos()" ], [ "round", "org.apache.commons.math3.dfp", "Dfp", "protected int round(int n)" ], [ "sinh", "org.apache.commons.math3.dfp", "Dfp", "public Dfp sinh()" ], [ "unequal", "org.apache.commons.math3.dfp", "Dfp", "public boolean unequal(final Dfp x)" ], [ "add", "org.apache.commons.math3", "FieldElement", "public abstract T add(T arg0) throws NullArgumentException" ], [ "cos", "org.apache.commons.math3", "RealFieldElement", "public abstract T cos()" ], [ "getReal", "org.apache.commons.math3.dfp", "Dfp", "public double getReal()" ], [ "asinh", "org.apache.commons.math3", "RealFieldElement", "public abstract T asinh()" ], [ "clone", "java.lang", "Object", "protected native Object clone() throws CloneNotSupportedException" ], [ "atanh", "org.apache.commons.math3", "RealFieldElement", "public abstract T atanh()" ], [ "sinh", "org.apache.commons.math3", "RealFieldElement", "public abstract T sinh()" ], [ "getSqr2Split", "org.apache.commons.math3.dfp", "DfpField", "public Dfp[] getSqr2Split()" ], [ "getOne", "org.apache.commons.math3.dfp", "DfpField", "public Dfp getOne()" ], [ "getLn2Split", "org.apache.commons.math3.dfp", "DfpField", "public Dfp[] getLn2Split()" ], [ "getRoundingMode", "org.apache.commons.math3.dfp", "DfpField", "public DfpField.RoundingMode getRoundingMode()" ], [ "newDfp", "org.apache.commons.math3.dfp", "DfpField", "public Dfp newDfp(Dfp arg0)" ], [ "getLn5Split", "org.apache.commons.math3.dfp", "DfpField", "public Dfp[] getLn5Split()" ], [ "getLn2", "org.apache.commons.math3.dfp", "DfpField", "public Dfp getLn2()" ], [ "getIEEEFlags", "org.apache.commons.math3.dfp", "DfpField", "public int getIEEEFlags()" ], [ "newDfp", "org.apache.commons.math3.dfp", "DfpField", "public Dfp newDfp(byte arg0)" ], [ "newDfp", "org.apache.commons.math3.dfp", "DfpField", "public Dfp newDfp(byte arg0, byte arg1)" ], [ "newDfp", "org.apache.commons.math3.dfp", "DfpField", "public Dfp newDfp(double arg0)" ], [ "getLn10", "org.apache.commons.math3.dfp", "DfpField", "public Dfp getLn10()" ], [ "getTwo", "org.apache.commons.math3.dfp", "DfpField", "public Dfp getTwo()" ], [ "getSqr2Reciprocal", "org.apache.commons.math3.dfp", "DfpField", "public Dfp getSqr2Reciprocal()" ], [ "getESplit", "org.apache.commons.math3.dfp", "DfpField", "public Dfp[] getESplit()" ], [ "newDfp", "org.apache.commons.math3.dfp", "DfpField", "public Dfp newDfp(long arg0)" ], [ "getRuntimeClass", "org.apache.commons.math3.dfp", "DfpField", "public Class<? extends FieldElement<Dfp>> getRuntimeClass()" ], [ "getSqr3", "org.apache.commons.math3.dfp", "DfpField", "public Dfp getSqr3()" ], [ "getE", "org.apache.commons.math3.dfp", "DfpField", "public Dfp getE()" ], [ "newDfp", "org.apache.commons.math3.dfp", "DfpField", "public Dfp newDfp(String arg0)" ], [ "getPiSplit", "org.apache.commons.math3.dfp", "DfpField", "public Dfp[] getPiSplit()" ], [ "getSqr3Reciprocal", "org.apache.commons.math3.dfp", "DfpField", "public Dfp getSqr3Reciprocal()" ], [ "getRadixDigits", "org.apache.commons.math3.dfp", "DfpField", "public int getRadixDigits()" ], [ "getSqr2", "org.apache.commons.math3.dfp", "DfpField", "public Dfp getSqr2()" ], [ "newDfp", "org.apache.commons.math3.dfp", "DfpField", "public Dfp newDfp()" ], [ "getPi", "org.apache.commons.math3.dfp", "DfpField", "public Dfp getPi()" ], [ "newDfp", "org.apache.commons.math3.dfp", "DfpField", "public Dfp newDfp(int arg0)" ], [ "getLn5", "org.apache.commons.math3.dfp", "DfpField", "public Dfp getLn5()" ], [ "getZero", "org.apache.commons.math3.dfp", "DfpField", "public Dfp getZero()" ], [ "hashCode", "java.lang", "Object", "public native int hashCode()" ], [ "equals", "java.lang", "Object", "public boolean equals(Object arg0)" ], [ "toString", "java.lang", "Object", "public String toString()" ], [ "getZero", "org.apache.commons.math3", "Field", "public abstract T getZero()" ], [ "getOne", "org.apache.commons.math3", "Field", "public abstract T getOne()" ], [ "getRuntimeClass", "org.apache.commons.math3", "Field", "public abstract Class<? extends FieldElement<T>> getRuntimeClass()" ] ],
  "tokensMethodVariablesNonPrivateNonStaticAttributes" : [ [ "mant", "org.apache.commons.math3.dfp", "Dfp", "protected int[] mant;" ], [ "sign", "org.apache.commons.math3.dfp", "Dfp", "protected byte sign;" ], [ "exp", "org.apache.commons.math3.dfp", "Dfp", "protected int exp;" ], [ "nans", "org.apache.commons.math3.dfp", "Dfp", "protected byte nans;" ] ],
  "tokensOracleVariablesNonPrivateNonStaticNonVoidMethods" : [ ],
  "tokensOracleVariablesNonPrivateNonStaticAttributes" : [ ]
} ]