[
    {
        "id": 2997,
        "oracle": "maxy >= miny;",
        "oracleType": "PRE",
        "projectName": "gs-core-1.3",
        "packageName": "org.graphstream.ui.view",
        "className": "Camera",
        "javadocTag": "@param maxy Highest ordinate.",
        "methodJavadoc": "    /**\n\t * Set the bounds of the graphic graph in GU. Called by the Viewer.\n\t * \n\t * @param minx\n\t *            Lowest abscissa.\n\t * @param miny\n\t *            Lowest ordinate.\n\t * @param minz\n\t *            Lowest depth.\n\t * @param maxx\n\t *            Highest abscissa.\n\t * @param maxy\n\t *            Highest ordinate.\n\t * @param maxz\n\t *            Highest depth.\n\t */",
        "methodSourceCode": "void setBounds(double minx, double miny, double minz, double maxx, double maxy, double maxz);",
        "classJavadoc": "/**\n     * The view centre (a point in graph units).\n     *\n     * @return The view centre.\n     */",
        "classSourceCode": "/*\n * Copyright 2006 - 2015\n *     Stefan Balev     <stefan.balev@graphstream-project.org>\n *     Julien Baudry    <julien.baudry@graphstream-project.org>\n *     Antoine Dutot    <antoine.dutot@graphstream-project.org>\n *     Yoann Pign\u00e9      <yoann.pigne@graphstream-project.org>\n *     Guilhelm Savin   <guilhelm.savin@graphstream-project.org>\n * \n * This file is part of GraphStream <http://graphstream-project.org>.\n * \n * GraphStream is a library whose purpose is to handle static or dynamic\n * graph, create them from scratch, file or any source and display them.\n * \n * This program is free software distributed under the terms of two licenses, the\n * CeCILL-C license that fits European law, and the GNU Lesser General Public\n * License. You can  use, modify and/ or redistribute the software under the terms\n * of the CeCILL-C license as circulated by CEA, CNRS and INRIA at the following\n * URL <http://www.cecill.info> or under the terms of the GNU LGPL as published by\n * the Free Software Foundation, either version 3 of the License, or (at your\n * option) any later version.\n * \n * This program is distributed in the hope that it will be useful, but WITHOUT ANY\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A\n * PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more details.\n * \n * You should have received a copy of the GNU Lesser General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n * \n * The fact that you are presently reading this means that you have had\n * knowledge of the CeCILL-C and LGPL licenses and that you accept their terms.\n */\npackage org.graphstream.ui.view;\n\nimport org.graphstream.ui.geom.Point3;\nimport org.graphstream.ui.graphicGraph.GraphicElement;\nimport org.graphstream.ui.swingViewer.util.GraphMetrics;\n\npublic interface Camera {\n\t/**\n\t * The view centre (a point in graph units).\n\t * \n\t * @return The view centre.\n\t */\n\tPoint3 getViewCenter();\n\n\t/**\n\t * Change the view centre.\n\t * \n\t * @param x\n\t *            The new abscissa.\n\t * @param y\n\t *            The new ordinate.\n\t * @param z\n\t *            The new depth.\n\t */\n\tvoid setViewCenter(double x, double y, double z);\n\n\t/**\n\t * The portion of the graph visible.\n\t * \n\t * @return A real for which value 1 means the graph is fully visible and\n\t *         uses the whole view port.\n\t */\n\tdouble getViewPercent();\n\n\t/**\n\t * Zoom the view.\n\t * \n\t * @param percent\n\t *            Percent of the graph visible.\n\t */\n\tvoid setViewPercent(double percent);\n\n\t/**\n\t * The current rotation angle.\n\t * \n\t * @return The rotation angle in degrees.\n\t */\n\tdouble getViewRotation();\n\n\t/**\n\t * Rotate the view around its centre point by a given theta angles (in\n\t * degrees).\n\t * \n\t * @param theta\n\t *            The rotation angle in degrees.\n\t */\n\tvoid setViewRotation(double theta);\n\n\t/**\n\t * A number in GU that gives the approximate graph size (often the diagonal\n\t * of the graph). This allows to compute displacements in the graph as\n\t * percent of its overall size. For example this can be used to move the\n\t * view centre.\n\t * \n\t * @return The graph estimated size in graph units.\n\t */\n\tdouble getGraphDimension();\n\n\t/**\n\t * Remove the specified graph view port.\n\t * \n\t * @see #setGraphViewport(double, double, double, double)\n\t */\n\tvoid removeGraphViewport();\n\n\t/**\n\t * Specify exactly the minimum and maximum points in GU that are visible\n\t * (more points may be visible due to aspect-ratio constraints).\n\t * \n\t * @param minx\n\t *            The minimum abscissa visible.\n\t * @param miny\n\t *            The minimum ordinate visible.\n\t * @param maxx\n\t *            The maximum abscissa visible.\n\t * @param maxy\n\t *            The maximum abscissa visible.\n\t * @see #removeGraphViewport()\n\t */\n\tvoid setGraphViewport(double minx, double miny, double maxx, double maxy);\n\n\t/**\n\t * Reset the view to the automatic mode.\n\t */\n\tvoid resetView();\n\n\t/**\n\t * Set the bounds of the graphic graph in GU. Called by the Viewer.\n\t * \n\t * @param minx\n\t *            Lowest abscissa.\n\t * @param miny\n\t *            Lowest ordinate.\n\t * @param minz\n\t *            Lowest depth.\n\t * @param maxx\n\t *            Highest abscissa.\n\t * @param maxy\n\t *            Highest ordinate.\n\t * @param maxz\n\t *            Highest depth.\n\t */\n\tvoid setBounds(double minx, double miny, double minz, double maxx,\n\t\t\tdouble maxy, double maxz);\n\n\t/**\n\t * Get the {@link org.graphstream.ui.swingViewer.util.GraphMetrics} object linked to this Camera. It can be used\n\t * to convert pixels to graphic units and vice versa.\n\t * \n\t * @return a GraphMetrics instance\n\t */\n\tGraphMetrics getMetrics();\n\t\n\t/**\n\t * Enable or disable automatic adjustment of the view to see the entire\n\t * graph.\n\t * \n\t * @param on\n\t *            If true, automatic adjustment is enabled.\n\t */\n\tvoid setAutoFitView(boolean on);\n\n\t/**\n\t * Transform a point in graph units into pixels.\n\t * \n\t * @return The transformed point.\n\t */\n\tPoint3 transformGuToPx(double x, double y, double z);\n\t\n\t/**\n\t * Return the given point in pixels converted in graph units (GU) using the\n\t * inverse transformation of the current projection matrix. The inverse\n\t * matrix is computed only once each time a new projection matrix is\n\t * created.\n\t * \n\t * @param x\n\t *            The source point abscissa in pixels.\n\t * @param y\n\t *            The source point ordinate in pixels.\n\t * @return The resulting points in graph units.\n\t */\n\tPoint3 transformPxToGu(double x, double y);\n\t\n\t/**\n\t * True if the element would be visible on screen. The method used is to\n\t * transform the center of the element (which is always in graph units)\n\t * using the camera actual transformation to put it in pixel units. Then to\n\t * look in the style sheet the size of the element and to test if its\n\t * enclosing rectangle intersects the view port. For edges, its two nodes\n\t * are used.\n\t * \n\t * @param element\n\t *            The element to test.\n\t * @return True if the element is visible and therefore must be rendered.\n\t */\n\tboolean isVisible(GraphicElement element);\n}",
        "tokensGeneralGrammar": [
            "null",
            "true",
            "false",
            ",",
            ".",
            ":",
            ";",
            "?",
            "(",
            ")",
            "jdVar",
            "stream",
            "Arrays",
            "allMatch",
            "noneMatch",
            "anyMatch",
            "~",
            ">>",
            "<<",
            ">>>",
            "|",
            "&",
            "^",
            "+",
            "-",
            "/",
            "*",
            "%",
            "&&",
            "||",
            ">=",
            "<=",
            ">",
            "<",
            "==",
            "!=",
            "instanceof",
            "class",
            "methodResultID",
            "this"
        ],
        "tokensGeneralValuesGlobalDictionary": [
            [
                "0",
                "int"
            ],
            [
                "1",
                "int"
            ],
            [
                "-1",
                "int"
            ],
            [
                "0.0",
                "double"
            ],
            [
                "1.0",
                "double"
            ],
            [
                "-1.0",
                "double"
            ],
            [
                "\"\"",
                "String"
            ],
            [
                "\" \"",
                "String"
            ]
        ],
        "tokensProjectClasses": [
            [
                "DefaultCamera",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "GradientFactory",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "GraphMetrics",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "Graphics2DOutput",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "ImageCache",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "StrokeFactory",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "FontCache",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "FontSlot",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "DefaultView",
                "org.graphstream.ui.swingViewer"
            ],
            [
                "SpriteRenderer",
                "org.graphstream.ui.swingViewer.basicRenderer"
            ],
            [
                "ElementRenderer",
                "org.graphstream.ui.swingViewer.basicRenderer"
            ],
            [
                "NodeRenderer",
                "org.graphstream.ui.swingViewer.basicRenderer"
            ],
            [
                "Arrow",
                "org.graphstream.ui.swingViewer.basicRenderer.shapes"
            ],
            [
                "Shape",
                "org.graphstream.ui.swingViewer.basicRenderer.shapes"
            ],
            [
                "EdgeRenderer",
                "org.graphstream.ui.swingViewer.basicRenderer"
            ],
            [
                "SwingBasicGraphRenderer",
                "org.graphstream.ui.swingViewer.basicRenderer"
            ],
            [
                "GraphRendererBase",
                "org.graphstream.ui.swingViewer"
            ],
            [
                "GraphRenderer",
                "org.graphstream.ui.swingViewer"
            ],
            [
                "LayerRenderer",
                "org.graphstream.ui.swingViewer"
            ],
            [
                "ViewPanel",
                "org.graphstream.ui.swingViewer"
            ],
            [
                "Layouts",
                "org.graphstream.ui.layout"
            ],
            [
                "Layout",
                "org.graphstream.ui.layout"
            ],
            [
                "LayoutRunner",
                "org.graphstream.ui.layout"
            ],
            [
                "NodeParticle",
                "org.graphstream.ui.layout.springbox"
            ],
            [
                "GraphCellData",
                "org.graphstream.ui.layout.springbox"
            ],
            [
                "EdgeSpring",
                "org.graphstream.ui.layout.springbox"
            ],
            [
                "Energies",
                "org.graphstream.ui.layout.springbox"
            ],
            [
                "BarnesHutLayout",
                "org.graphstream.ui.layout.springbox"
            ],
            [
                "LinLog",
                "org.graphstream.ui.layout.springbox.implementations"
            ],
            [
                "LinLogNodeParticle",
                "org.graphstream.ui.layout.springbox.implementations"
            ],
            [
                "SpringBoxNodeParticle",
                "org.graphstream.ui.layout.springbox.implementations"
            ],
            [
                "SpringBox",
                "org.graphstream.ui.layout.springbox.implementations"
            ],
            [
                "Point2",
                "org.graphstream.ui.geom"
            ],
            [
                "Vector2",
                "org.graphstream.ui.geom"
            ],
            [
                "Vector3",
                "org.graphstream.ui.geom"
            ],
            [
                "Point3",
                "org.graphstream.ui.geom"
            ],
            [
                "ViewerListener",
                "org.graphstream.ui.view"
            ],
            [
                "MouseManager",
                "org.graphstream.ui.view.util"
            ],
            [
                "ShortcutManager",
                "org.graphstream.ui.view.util"
            ],
            [
                "DefaultShortcutManager",
                "org.graphstream.ui.view.util"
            ],
            [
                "FpsCounter",
                "org.graphstream.ui.view.util"
            ],
            [
                "CubicCurve",
                "org.graphstream.ui.view.util"
            ],
            [
                "DefaultMouseManager",
                "org.graphstream.ui.view.util"
            ],
            [
                "Selection",
                "org.graphstream.ui.view"
            ],
            [
                "ViewerPipe",
                "org.graphstream.ui.view"
            ],
            [
                "Viewer",
                "org.graphstream.ui.view"
            ],
            [
                "View",
                "org.graphstream.ui.view"
            ],
            [
                "Camera",
                "org.graphstream.ui.view"
            ],
            [
                "Sprite",
                "org.graphstream.ui.spriteManager"
            ],
            [
                "InvalidSpriteIDException",
                "org.graphstream.ui.spriteManager"
            ],
            [
                "SpriteManager",
                "org.graphstream.ui.spriteManager"
            ],
            [
                "SpriteFactory",
                "org.graphstream.ui.spriteManager"
            ],
            [
                "StyleGroupListener",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "Colors",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "Values",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "StyleSheetListener",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "StyleSheetParserTokenManager",
                "org.graphstream.ui.graphicGraph.stylesheet.parser"
            ],
            [
                "StyleSheetParserConstants",
                "org.graphstream.ui.graphicGraph.stylesheet.parser"
            ],
            [
                "StyleSheetParser",
                "org.graphstream.ui.graphicGraph.stylesheet.parser"
            ],
            [
                "Style",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "StyleSheet",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "StyleConstants",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "Selector",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "Value",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "Rule",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "GraphicNode",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "StyleGroup",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphPosLengthUtils",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphicEdge",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphicElementChangeListener",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphicGraph",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "StyleGroupSet",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphicSprite",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphicElement",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "VerboseSink",
                "org.graphstream.util"
            ],
            [
                "GraphListeners",
                "org.graphstream.util"
            ],
            [
                "Environment",
                "org.graphstream.util"
            ],
            [
                "GraphDiff",
                "org.graphstream.util"
            ],
            [
                "Filters",
                "org.graphstream.util"
            ],
            [
                "FilteredEdgeIterator",
                "org.graphstream.util"
            ],
            [
                "Parser",
                "org.graphstream.util.parser"
            ],
            [
                "ParserFactory",
                "org.graphstream.util.parser"
            ],
            [
                "TokenMgrError",
                "org.graphstream.util.parser"
            ],
            [
                "ParseException",
                "org.graphstream.util.parser"
            ],
            [
                "SimpleCharStream",
                "org.graphstream.util.parser"
            ],
            [
                "Token",
                "org.graphstream.util.parser"
            ],
            [
                "ISODateIO",
                "org.graphstream.util.time"
            ],
            [
                "ISODateComponent",
                "org.graphstream.util.time"
            ],
            [
                "FilteredNodeIterator",
                "org.graphstream.util"
            ],
            [
                "FixedArrayList",
                "org.graphstream.util.set"
            ],
            [
                "StepCounter",
                "org.graphstream.util"
            ],
            [
                "GraphSpells",
                "org.graphstream.util.cumulative"
            ],
            [
                "CumulativeAttributes",
                "org.graphstream.util.cumulative"
            ],
            [
                "CumulativeSpells",
                "org.graphstream.util.cumulative"
            ],
            [
                "Filter",
                "org.graphstream.util"
            ],
            [
                "PipeAdapter",
                "org.graphstream.stream"
            ],
            [
                "GraphParseException",
                "org.graphstream.stream"
            ],
            [
                "ElementSink",
                "org.graphstream.stream"
            ],
            [
                "URLSource",
                "org.graphstream.stream.net"
            ],
            [
                "HTTPSource",
                "org.graphstream.stream.net"
            ],
            [
                "SourceAdapter",
                "org.graphstream.stream"
            ],
            [
                "AttributeSink",
                "org.graphstream.stream"
            ],
            [
                "GMLParserConstants",
                "org.graphstream.stream.file.gml"
            ],
            [
                "GMLParserTokenManager",
                "org.graphstream.stream.file.gml"
            ],
            [
                "GMLContext",
                "org.graphstream.stream.file.gml"
            ],
            [
                "Graphics",
                "org.graphstream.stream.file.gml"
            ],
            [
                "KeyValues",
                "org.graphstream.stream.file.gml"
            ],
            [
                "GMLParser",
                "org.graphstream.stream.file.gml"
            ],
            [
                "FileSinkGraphML",
                "org.graphstream.stream.file"
            ],
            [
                "TLPParserConstants",
                "org.graphstream.stream.file.tlp"
            ],
            [
                "TLPParser",
                "org.graphstream.stream.file.tlp"
            ],
            [
                "TLPParserTokenManager",
                "org.graphstream.stream.file.tlp"
            ],
            [
                "FileSinkFactory",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceEdge",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkBase",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkTikZ",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceGEXF",
                "org.graphstream.stream.file"
            ],
            [
                "DOTParser",
                "org.graphstream.stream.file.dot"
            ],
            [
                "DOTParserConstants",
                "org.graphstream.stream.file.dot"
            ],
            [
                "DOTParserTokenManager",
                "org.graphstream.stream.file.dot"
            ],
            [
                "FileSink",
                "org.graphstream.stream.file"
            ],
            [
                "PajekContext",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "Graphics",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "NodeGraphics",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "EdgeGraphics",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "EdgeMatrix",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "PajekParserTokenManager",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "PajekParserConstants",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "FileSourceXML",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkBaseFiltered",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkDOT",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceParser",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkDGSFiltered",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceDOT",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceDGS1And2",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceGraphML",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceFactory",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkImages",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkDynamicGML",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkSVG",
                "org.graphstream.stream.file"
            ],
            [
                "GEXFSpell",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "SmartXMLWriter",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFElement",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFEdges",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFAttValues",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFEdge",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFSpells",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFAttValue",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFNodes",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFNode",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFMeta",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFAttributes",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXF",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFGraph",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFAttribute",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "OldFileSourceDGS",
                "org.graphstream.stream.file.dgs"
            ],
            [
                "DGSParser",
                "org.graphstream.stream.file.dgs"
            ],
            [
                "FileSourceBase",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkGML",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceDGS",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkDGSUtility",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceTLP",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkSVG2",
                "org.graphstream.stream.file"
            ],
            [
                "FileSource",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceNCol",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourcePajek",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceGPX",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceLGL",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkGEXF2",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceGML",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkGEXF",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkDGS",
                "org.graphstream.stream.file"
            ],
            [
                "ProxyPipe",
                "org.graphstream.stream"
            ],
            [
                "Sink",
                "org.graphstream.stream"
            ],
            [
                "Timeline",
                "org.graphstream.stream"
            ],
            [
                "Pipe",
                "org.graphstream.stream"
            ],
            [
                "SinkAdapter",
                "org.graphstream.stream"
            ],
            [
                "Replayable",
                "org.graphstream.stream"
            ],
            [
                "Source",
                "org.graphstream.stream"
            ],
            [
                "AnnotatedSink",
                "org.graphstream.stream"
            ],
            [
                "GraphReplay",
                "org.graphstream.stream"
            ],
            [
                "AttributePipe",
                "org.graphstream.stream"
            ],
            [
                "SinkTime",
                "org.graphstream.stream.sync"
            ],
            [
                "SourceTime",
                "org.graphstream.stream.sync"
            ],
            [
                "PipeBase",
                "org.graphstream.stream"
            ],
            [
                "ThreadProxyPipe",
                "org.graphstream.stream.thread"
            ],
            [
                "ThreadProxyPipeOld",
                "org.graphstream.stream.thread"
            ],
            [
                "RMISource",
                "org.graphstream.stream.rmi"
            ],
            [
                "RMIAdapterOut",
                "org.graphstream.stream.rmi"
            ],
            [
                "RMISink",
                "org.graphstream.stream.rmi"
            ],
            [
                "RMIAdapterIn",
                "org.graphstream.stream.rmi"
            ],
            [
                "SourceBase",
                "org.graphstream.stream"
            ],
            [
                "NetStreamDecoder",
                "org.graphstream.stream.netstream"
            ],
            [
                "NetStreamReceiver",
                "org.graphstream.stream.netstream"
            ],
            [
                "NetStreamConstants",
                "org.graphstream.stream.netstream"
            ],
            [
                "NetStreamSender",
                "org.graphstream.stream.netstream"
            ],
            [
                "DefaultNetStreamDecoder",
                "org.graphstream.stream.netstream"
            ],
            [
                "Base64",
                "org.graphstream.stream.netstream.packing"
            ],
            [
                "NetStreamUnpacker",
                "org.graphstream.stream.netstream.packing"
            ],
            [
                "Base64Packer",
                "org.graphstream.stream.netstream.packing"
            ],
            [
                "Base64Unpacker",
                "org.graphstream.stream.netstream.packing"
            ],
            [
                "NetStreamPacker",
                "org.graphstream.stream.netstream.packing"
            ],
            [
                "AttributePredicate",
                "org.graphstream.stream"
            ],
            [
                "Element",
                "org.graphstream.graph"
            ],
            [
                "Node",
                "org.graphstream.graph"
            ],
            [
                "BreadthFirstIterator",
                "org.graphstream.graph"
            ],
            [
                "Graph",
                "org.graphstream.graph"
            ],
            [
                "EdgeRejectedException",
                "org.graphstream.graph"
            ],
            [
                "CompoundAttribute",
                "org.graphstream.graph"
            ],
            [
                "Structure",
                "org.graphstream.graph"
            ],
            [
                "DepthFirstIterator",
                "org.graphstream.graph"
            ],
            [
                "NullAttributeException",
                "org.graphstream.graph"
            ],
            [
                "IdAlreadyInUseException",
                "org.graphstream.graph"
            ],
            [
                "EdgeFactory",
                "org.graphstream.graph"
            ],
            [
                "ElementNotFoundException",
                "org.graphstream.graph"
            ],
            [
                "OneAttributeElement",
                "org.graphstream.graph.implementations"
            ],
            [
                "AdjacencyListNode",
                "org.graphstream.graph.implementations"
            ],
            [
                "SingleNode",
                "org.graphstream.graph.implementations"
            ],
            [
                "AbstractElement",
                "org.graphstream.graph.implementations"
            ],
            [
                "AdjacencyListGraph",
                "org.graphstream.graph.implementations"
            ],
            [
                "AbstractNode",
                "org.graphstream.graph.implementations"
            ],
            [
                "DefaultGraph",
                "org.graphstream.graph.implementations"
            ],
            [
                "MultiGraph",
                "org.graphstream.graph.implementations"
            ],
            [
                "Graphs",
                "org.graphstream.graph.implementations"
            ],
            [
                "SingleGraph",
                "org.graphstream.graph.implementations"
            ],
            [
                "MultiNode",
                "org.graphstream.graph.implementations"
            ],
            [
                "AbstractGraph",
                "org.graphstream.graph.implementations"
            ],
            [
                "AbstractEdge",
                "org.graphstream.graph.implementations"
            ],
            [
                "GraphFactory",
                "org.graphstream.graph"
            ],
            [
                "NodeFactory",
                "org.graphstream.graph"
            ],
            [
                "Edge",
                "org.graphstream.graph"
            ],
            [
                "Path",
                "org.graphstream.graph"
            ]
        ],
        "tokensProjectClassesNonPrivateStaticNonVoidMethods": [
            [
                "gradientInArea",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static Paint gradientInArea(int x0, int y0, int width, int height, Style style)"
            ],
            [
                "linearGradientFromStyle",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static Paint linearGradientFromStyle(float x0, float y0, float x1, float y1, Style style)"
            ],
            [
                "radialGradientFromStyle",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static Paint radialGradientFromStyle(float cx, float cy, float radius, Style style)"
            ],
            [
                "radialGradientFromStyle",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static Paint radialGradientFromStyle(float cx, float cy, float radius, float fx, float fy, Style style)"
            ],
            [
                "createFractions",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "protected static float[] createFractions(Style style)"
            ],
            [
                "createColors",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "protected static Color[] createColors(Style style)"
            ],
            [
                "defaultImageCache",
                "org.graphstream.ui.swingViewer.util",
                "ImageCache",
                "public static ImageCache defaultImageCache()"
            ],
            [
                "generateStroke",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "public static Stroke generateStroke(Style style, GraphMetrics metrics)"
            ],
            [
                "generatePlainStroke",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "protected static Stroke generatePlainStroke(Style style, GraphMetrics metrics)"
            ],
            [
                "generateDotsStroke",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "protected static Stroke generateDotsStroke(Style style, GraphMetrics metrics)"
            ],
            [
                "generateDashesStroke",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "protected static Stroke generateDashesStroke(Style style, GraphMetrics metrics)"
            ],
            [
                "defaultFontCache",
                "org.graphstream.ui.swingViewer.util",
                "FontCache",
                "public static FontCache defaultFontCache()"
            ],
            [
                "newLayoutAlgorithm",
                "org.graphstream.ui.layout",
                "Layouts",
                "public static Layout newLayoutAlgorithm()"
            ],
            [
                "eval",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "public static double eval(double x0, double x1, double x2, double x3, double t)"
            ],
            [
                "eval",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "public static Point2 eval(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t)"
            ],
            [
                "eval",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "public static Point2D.Double eval(Point2D.Double p0, Point2D.Double p1, Point2D.Double p2, Point2D.Double p3, double t)"
            ],
            [
                "eval",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "public static Point2 eval(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t, Point2 result)"
            ],
            [
                "derivative",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "public static double derivative(double x0, double x1, double x2, double x3, double t)"
            ],
            [
                "derivative",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "public static Point2 derivative(Point2 p0, Point2 p1, Point2 p2, Point3 p3, double t)"
            ],
            [
                "derivative",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "public static Point2 derivative(Point2 p0, Point2 p1, Point2 p2, Point3 p3, double t, Point2 result)"
            ],
            [
                "perpendicular",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "public static Vector2 perpendicular(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t)"
            ],
            [
                "perpendicular",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "public static Vector2 perpendicular(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t, Vector2 result)"
            ],
            [
                "perpendicular",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "public static Point2D.Double perpendicular(Point2D.Double p0, Point2D.Double p1, Point2D.Double p2, Point2D.Double p3, double t)"
            ],
            [
                "newGraphRenderer",
                "org.graphstream.ui.view",
                "Viewer",
                "public static GraphRenderer newGraphRenderer()"
            ],
            [
                "getPositionValue",
                "org.graphstream.ui.spriteManager",
                "SpriteManager",
                "protected static Values getPositionValue(Object value)"
            ],
            [
                "convertColor",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "public static Color convertColor(Object anyValue)"
            ],
            [
                "convertLabel",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "public static String convertLabel(Object value)"
            ],
            [
                "convertWidth",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "public static float convertWidth(Object value)"
            ],
            [
                "convertValue",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "public static Value convertValue(Object value)"
            ],
            [
                "convertUnit",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "protected static Units convertUnit(String unit)"
            ],
            [
                "nodePosition",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "public static double[] nodePosition(Graph graph, String id)"
            ],
            [
                "nodePointPosition",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "public static Point3 nodePointPosition(Graph graph, String id)"
            ],
            [
                "nodePosition",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "public static double[] nodePosition(Node node)"
            ],
            [
                "nodePointPosition",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "public static Point3 nodePointPosition(Node node)"
            ],
            [
                "edgeLength",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "public static double edgeLength(Graph graph, String id)"
            ],
            [
                "edgeLength",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "public static double edgeLength(Edge edge)"
            ],
            [
                "getGlobalEnvironment",
                "org.graphstream.util",
                "Environment",
                "public static Environment getGlobalEnvironment()"
            ],
            [
                "falseFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> falseFilter()"
            ],
            [
                "trueFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> trueFilter()"
            ],
            [
                "byAttributeFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> byAttributeFilter(String key, Object expectedValue)"
            ],
            [
                "separateNodeAndEdgeFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element, U extends Element> Filter<Element> separateNodeAndEdgeFilter(Filter<T> nodeFilter, Filter<U> edgeFilter)"
            ],
            [
                "byExtremitiesFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element, U extends Element> Filter<T> byExtremitiesFilter(Filter<U> f)"
            ],
            [
                "byIdFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> byIdFilter(String idPattern)"
            ],
            [
                "isContained",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> isContained(final Collection<? extends T> set)"
            ],
            [
                "isIdContained",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> isIdContained(final Collection<String> set)"
            ],
            [
                "and",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> and(Filter<T> f1, Filter<T> f2)"
            ],
            [
                "or",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> or(Filter<T> f1, Filter<T> f2)"
            ],
            [
                "xor",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> xor(Filter<T> f1, Filter<T> f2)"
            ],
            [
                "not",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> not(Filter<T> f)"
            ],
            [
                "addEscapes",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "protected static final String addEscapes(String str)"
            ],
            [
                "LexicalError",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "protected static String LexicalError(boolean EOFSeen, int lexState, int errorLine, int errorColumn, String errorAfter, char curChar)"
            ],
            [
                "add_escapes",
                "org.graphstream.util.parser",
                "ParseException",
                "static String add_escapes(String str)"
            ],
            [
                "newToken",
                "org.graphstream.util.parser",
                "Token",
                "public static Token newToken(int ofKind, String image)"
            ],
            [
                "newToken",
                "org.graphstream.util.parser",
                "Token",
                "public static Token newToken(int ofKind)"
            ],
            [
                "countStepInFile",
                "org.graphstream.util",
                "StepCounter",
                "public static int countStepInFile(String path) throws IOException"
            ],
            [
                "GET",
                "org.graphstream.stream.net",
                "HTTPSource",
                "protected static HashMap<String, Object> GET(HttpExchange ex)"
            ],
            [
                "sinkFor",
                "org.graphstream.stream.file",
                "FileSinkFactory",
                "public static FileSink sinkFor(String filename)"
            ],
            [
                "formatId",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "protected static String formatId(String id)"
            ],
            [
                "getInt",
                "org.graphstream.stream.file.pajek",
                "PajekContext",
                "protected static int getInt(Token nb) throws ParseException"
            ],
            [
                "getReal",
                "org.graphstream.stream.file.pajek",
                "PajekContext",
                "protected static double getReal(Token nb) throws ParseException"
            ],
            [
                "toColorValue",
                "org.graphstream.stream.file.pajek",
                "PajekContext",
                "public static String toColorValue(Token R, Token G, Token B) throws ParseException"
            ],
            [
                "sourceFor",
                "org.graphstream.stream.file",
                "FileSourceFactory",
                "public static FileSource sourceFor(String fileName) throws IOException"
            ],
            [
                "getXMLRootElement",
                "org.graphstream.stream.file",
                "FileSourceFactory",
                "public static String getXMLRootElement(String fileName) throws IOException"
            ],
            [
                "formatStringForQuoting",
                "org.graphstream.stream.file",
                "FileSinkDGSUtility",
                "protected static String formatStringForQuoting(String str)"
            ],
            [
                "attributeString",
                "org.graphstream.stream.file",
                "FileSinkDGSUtility",
                "protected static String attributeString(String key, Object value, boolean remove)"
            ],
            [
                "arrayString",
                "org.graphstream.stream.file",
                "FileSinkDGSUtility",
                "protected static String arrayString(Object value)"
            ],
            [
                "valueString",
                "org.graphstream.stream.file",
                "FileSinkDGSUtility",
                "protected static String valueString(Object value)"
            ],
            [
                "hashToString",
                "org.graphstream.stream.file",
                "FileSinkDGSUtility",
                "protected static String hashToString(HashMap<?, ?> hash)"
            ],
            [
                "encodeObject",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public static String encodeObject(java.io.Serializable serializableObject) throws java.io.IOException"
            ],
            [
                "encodeObject",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public static String encodeObject(java.io.Serializable serializableObject, int options) throws java.io.IOException"
            ],
            [
                "encodeBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public static String encodeBytes(byte[] source)"
            ],
            [
                "encodeBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public static String encodeBytes(byte[] source, int options) throws java.io.IOException"
            ],
            [
                "encodeBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public static String encodeBytes(byte[] source, int off, int len)"
            ],
            [
                "encodeBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public static String encodeBytes(byte[] source, int off, int len, int options) throws java.io.IOException"
            ],
            [
                "encodeBytesToBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public static byte[] encodeBytesToBytes(byte[] source)"
            ],
            [
                "encodeBytesToBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public static byte[] encodeBytesToBytes(byte[] source, int off, int len, int options) throws java.io.IOException"
            ],
            [
                "decode",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public static byte[] decode(byte[] source) throws java.io.IOException"
            ],
            [
                "decode",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public static byte[] decode(byte[] source, int off, int len, int options) throws java.io.IOException"
            ],
            [
                "decode",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public static byte[] decode(String s) throws java.io.IOException"
            ],
            [
                "decode",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public static byte[] decode(String s, int options) throws java.io.IOException"
            ],
            [
                "decodeToObject",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public static Object decodeToObject(String encodedObject) throws java.io.IOException, java.lang.ClassNotFoundException"
            ],
            [
                "decodeToObject",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public static Object decodeToObject(String encodedObject, int options, final ClassLoader loader) throws java.io.IOException, java.lang.ClassNotFoundException"
            ],
            [
                "decodeFromFile",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public static byte[] decodeFromFile(String filename) throws java.io.IOException"
            ],
            [
                "encodeFromFile",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public static String encodeFromFile(String filename) throws java.io.IOException"
            ],
            [
                "unmutableGraph",
                "org.graphstream.graph.implementations",
                "Graphs",
                "public static Graph unmutableGraph(Graph g)"
            ],
            [
                "synchronizedGraph",
                "org.graphstream.graph.implementations",
                "Graphs",
                "public static Graph synchronizedGraph(Graph g)"
            ],
            [
                "merge",
                "org.graphstream.graph.implementations",
                "Graphs",
                "public static Graph merge(Graph... graphs)"
            ],
            [
                "clone",
                "org.graphstream.graph.implementations",
                "Graphs",
                "public static Graph clone(Graph g)"
            ]
        ],
        "tokensProjectClassesNonPrivateStaticAttributes": [
            [
                "version16",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static boolean version16 = false;"
            ],
            [
                "predefFractions",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[][] predefFractions = new float[11][];"
            ],
            [
                "predefFractions2",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions2 = { 0f, 1f };"
            ],
            [
                "predefFractions3",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions3 = { 0f, 0.5f, 1f };"
            ],
            [
                "predefFractions4",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions4 = { 0f, 0.33f, 0.66f, 1f };"
            ],
            [
                "predefFractions5",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions5 = { 0f, 0.25f, 0.5f, 0.75f, 1f };"
            ],
            [
                "predefFractions6",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions6 = { 0f, 0.2f, 0.4f, 0.6f, 0.8f, 1f };"
            ],
            [
                "predefFractions7",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions7 = { 0f, 0.1666f, 0.3333f, 0.4999f, 0.6666f, 0.8333f, 1f };"
            ],
            [
                "predefFractions8",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions8 = { 0f, 0.1428f, 0.2856f, 0.4284f, 0.5712f, 0.7140f, 0.8568f, 1f };"
            ],
            [
                "predefFractions9",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions9 = { 0f, 0.125f, 0.25f, 0.375f, 0.5f, 0.625f, .75f, 0.875f, 1f };"
            ],
            [
                "predefFractions10",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions10 = { 0f, 0.1111f, 0.2222f, 0.3333f, 0.4444f, 0.5555f, 0.6666f, 0.7777f, 0.8888f, 1f };"
            ],
            [
                "defaultImageCache",
                "org.graphstream.ui.swingViewer.util",
                "ImageCache",
                "protected static ImageCache defaultImageCache;"
            ],
            [
                "dots",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "protected static float[] dots = { 1f, 1f };"
            ],
            [
                "dashes",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "protected static float[] dashes = { 3f, 3f };"
            ],
            [
                "defaultFontCache",
                "org.graphstream.ui.swingViewer.util",
                "FontCache",
                "public static FontCache defaultFontCache;"
            ],
            [
                "NULL_POINT2",
                "org.graphstream.ui.geom",
                "Point2",
                "public static final Point2 NULL_POINT2 = new Point2(0, 0);"
            ],
            [
                "NULL_POINT3",
                "org.graphstream.ui.geom",
                "Point3",
                "public static final Point3 NULL_POINT3 = new Point3(0, 0, 0);"
            ],
            [
                "DEFAULT_VIEW_ID",
                "org.graphstream.ui.view",
                "Viewer",
                "public static String DEFAULT_VIEW_ID = \"defaultView\";"
            ],
            [
                "jjbitVec0",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };"
            ],
            [
                "jjnextStates",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "static final int[] jjnextStates = { 48, 49, 52, 54, 55, 65, 69, 2, 4, 6, 10, 16, 23, 33, 50, 52, 54, 55, 57, 58, 60, 61, 66, 68, 70, 71 };"
            ],
            [
                "jjstrLiteralImages",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "public static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, \"\\56\", \"\\173\", \"\\175\", \"\\50\", \"\\51\", \"\\43\", \"\\72\", \"\\73\", \"\\54\", \"\\162\\147\\142\\141\", \"\\162\\147\\142\", null, null, null, \"\\165\\162\\154\", \"\\147\\162\\141\\160\\150\", \"\\145\\144\\147\\145\", \"\\156\\157\\144\\145\", \"\\163\\160\\162\\151\\164\\145\", \"\\146\\151\\154\\154\\55\\155\\157\\144\\145\", \"\\146\\151\\154\\154\\55\\143\\157\\154\\157\\162\", \"\\146\\151\\154\\154\\55\\151\\155\\141\\147\\145\", \"\\163\\164\\162\\157\\153\\145\\55\\155\\157\\144\\145\", \"\\163\\164\\162\\157\\153\\145\\55\\143\\157\\154\\157\\162\", \"\\163\\164\\162\\157\\153\\145\\55\\167\\151\\144\\164\\150\", \"\\163\\150\\141\\144\\157\\167\\55\\155\\157\\144\\145\", \"\\163\\150\\141\\144\\157\\167\\55\\143\\157\\154\\157\\162\", \"\\163\\150\\141\\144\\157\\167\\55\\167\\151\\144\\164\\150\", \"\\163\\150\\141\\144\\157\\167\\55\\157\\146\\146\\163\\145\\164\", \"\\164\\145\\170\\164\\55\\155\\157\\144\\145\", \"\\164\\145\\170\\164\\55\\143\\157\\154\\157\\162\", \"\\164\\145\\170\\164\\55\\163\\164\\171\\154\\145\", \"\\164\\145\\170\\164\\55\\146\\157\\156\\164\", \"\\164\\145\\170\\164\\55\\163\\151\\172\\145\", \"\\164\\145\\170\\164\\55\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\\55\\155\\157\\144\\145\", \"\\164\\145\\170\\164\\55\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\", \"\\164\\145\\170\\164\\55\\142\\141\\143\\153\\147\\162\\157\\165\\156\\144\\55\\155\\157\\144\\145\", \"\\164\\145\\170\\164\\55\\142\\141\\143\\153\\147\\162\\157\\165\\156\\144\\55\\143\\157\\154\\157\\162\", \"\\164\\145\\170\\164\\55\\157\\146\\146\\163\\145\\164\", \"\\164\\145\\170\\164\\55\\160\\141\\144\\144\\151\\156\\147\", \"\\151\\143\\157\\156\\55\\155\\157\\144\\145\", \"\\151\\143\\157\\156\", \"\\160\\141\\144\\144\\151\\156\\147\", \"\\172\\55\\151\\156\\144\\145\\170\", \"\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\\55\\155\\157\\144\\145\", \"\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\", \"\\163\\150\\141\\160\\145\", \"\\163\\151\\172\\145\", \"\\163\\151\\172\\145\\55\\155\\157\\144\\145\", \"\\163\\150\\141\\160\\145\\55\\160\\157\\151\\156\\164\\163\", \"\\164\\145\\170\\164\\55\\141\\154\\151\\147\\156\\155\\145\\156\\164\", \"\\152\\143\\157\\155\\160\\157\\156\\145\\156\\164\", \"\\141\\162\\162\\157\\167\\55\\151\\155\\141\\147\\145\", \"\\141\\162\\162\\157\\167\\55\\163\\151\\172\\145\", \"\\141\\162\\162\\157\\167\\55\\163\\150\\141\\160\\145\", \"\\163\\160\\162\\151\\164\\145\\55\\157\\162\\151\\145\\156\\164\\141\\164\\151\\157\\156\", \"\\143\\141\\156\\166\\141\\163\\55\\143\\157\\154\\157\\162\", \"\\160\\154\\141\\151\\156\", \"\\144\\171\\156\\55\\160\\154\\141\\151\\156\", \"\\144\\171\\156\\55\\163\\151\\172\\145\", \"\\144\\171\\156\\55\\151\\143\\157\\156\", \"\\144\\141\\163\\150\\145\\163\", \"\\144\\157\\164\\163\", \"\\144\\157\\165\\142\\154\\145\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\144\\151\\141\\147\\157\\156\\141\\154\\61\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\144\\151\\141\\147\\157\\156\\141\\154\\62\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\150\\157\\162\\151\\172\\157\\156\\164\\141\\154\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\162\\141\\144\\151\\141\\154\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\166\\145\\162\\164\\151\\143\\141\\154\", \"\\150\\151\\144\\144\\145\\156\", \"\\151\\155\\141\\147\\145\\55\\164\\151\\154\\145\\144\", \"\\151\\155\\141\\147\\145\\55\\163\\143\\141\\154\\145\\144\", \"\\151\\155\\141\\147\\145\\55\\163\\143\\141\\154\\145\\144\\55\\162\\141\\164\\151\\157\\55\\155\\141\\170\", \"\\151\\155\\141\\147\\145\\55\\163\\143\\141\\154\\145\\144\\55\\162\\141\\164\\151\\157\\55\\155\\151\\156\", \"\\156\\157\\156\\145\", \"\\156\\157\\162\\155\\141\\154\", \"\\164\\162\\165\\156\\143\\141\\164\\145\\144\", \"\\172\\157\\157\\155\\55\\162\\141\\156\\147\\145\", \"\\141\\164\\55\\172\\157\\157\\155\", \"\\165\\156\\144\\145\\162\\55\\172\\157\\157\\155\", \"\\157\\166\\145\\162\\55\\172\\157\\157\\155\", \"\\172\\157\\157\\155\\163\", \"\\146\\151\\164\", \"\\142\\157\\154\\144\", \"\\142\\157\\154\\144\\55\\151\\164\\141\\154\\151\\143\", \"\\151\\164\\141\\154\\151\\143\", \"\\141\\154\\157\\156\\147\", \"\\141\\164\\55\\154\\145\\146\\164\", \"\\141\\164\\55\\162\\151\\147\\150\\164\", \"\\143\\145\\156\\164\\145\\162\", \"\\154\\145\\146\\164\", \"\\162\\151\\147\\150\\164\", \"\\165\\156\\144\\145\\162\", \"\\141\\142\\157\\166\\145\", \"\\152\\165\\163\\164\\151\\146\\171\", \"\\143\\151\\162\\143\\154\\145\", \"\\164\\162\\151\\141\\156\\147\\154\\145\", \"\\146\\162\\145\\145\\160\\154\\141\\156\\145\", \"\\164\\145\\170\\164\\55\\142\\157\\170\", \"\\164\\145\\170\\164\\55\\162\\157\\165\\156\\144\\145\\144\\55\\142\\157\\170\", \"\\164\\145\\170\\164\\55\\143\\151\\162\\143\\154\\145\", \"\\164\\145\\170\\164\\55\\144\\151\\141\\155\\157\\156\\144\", \"\\164\\145\\170\\164\\55\\160\\141\\162\\141\\147\\162\\141\\160\\150\", \"\\142\\157\\170\", \"\\162\\157\\165\\156\\144\\145\\144\\55\\142\\157\\170\", \"\\143\\162\\157\\163\\163\", \"\\144\\151\\141\\155\\157\\156\\144\", \"\\160\\157\\154\\171\\147\\157\\156\", \"\\142\\165\\164\\164\\157\\156\", \"\\164\\145\\170\\164\\55\\146\\151\\145\\154\\144\", \"\\160\\141\\156\\145\\154\", \"\\154\\151\\156\\145\", \"\\160\\157\\154\\171\\154\\151\\156\\145\", \"\\160\\157\\154\\171\\154\\151\\156\\145\\55\\163\\143\\141\\154\\145\\144\", \"\\141\\156\\147\\154\\145\", \"\\143\\165\\142\\151\\143\\55\\143\\165\\162\\166\\145\", \"\\142\\154\\157\\142\", \"\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\114\\55\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\150\\157\\162\\151\\172\\157\\156\\164\\141\\154\\55\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\166\\145\\162\\164\\151\\143\\141\\154\\55\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\141\\162\\162\\157\\167\", \"\\146\\154\\157\\167\", \"\\160\\151\\145\\55\\143\\150\\141\\162\\164\", \"\\151\\155\\141\\147\\145\", \"\\151\\155\\141\\147\\145\\163\", \"\\146\\162\\157\\155\", \"\\156\\157\\144\\145\\60\", \"\\164\\157\", \"\\156\\157\\144\\145\\61\", \"\\160\\162\\157\\152\\145\\143\\164\\151\\157\\156\", \"\\143\\154\\151\\143\\153\\145\\144\", \"\\163\\145\\154\\145\\143\\164\\145\\144\", null, null };"
            ],
            [
                "lexStateNames",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "public static final String[] lexStateNames = { \"DEFAULT\" };"
            ],
            [
                "jjtoToken",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "static final long[] jjtoToken = { 0xfffffffffffffe01L, 0xffffffffffffffffL, 0xffffL };"
            ],
            [
                "jjtoSkip",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "static final long[] jjtoSkip = { 0x1eL, 0x0L, 0x0L };"
            ],
            [
                "colorMap",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "protected static HashMap<String,Color> colorMap;"
            ],
            [
                "sharpColor1",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "protected static Pattern sharpColor1;"
            ],
            [
                "sharpColor2",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "protected static Pattern sharpColor2;"
            ],
            [
                "cssColor",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "protected static Pattern cssColor;"
            ],
            [
                "cssColorA",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "protected static Pattern cssColorA;"
            ],
            [
                "awtColor",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "protected static Pattern awtColor;"
            ],
            [
                "hexaColor",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "protected static Pattern hexaColor;"
            ],
            [
                "numberUnit",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "protected static Pattern numberUnit;"
            ],
            [
                "number",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "protected static Pattern number;"
            ],
            [
                "acceptedAttribute",
                "org.graphstream.ui.graphicGraph",
                "GraphicElement",
                "protected static Pattern acceptedAttribute;"
            ],
            [
                "DEFAULT_AN_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_AN_FORMAT = \"%prefix%[%sourceId%:%timeId%] add node \\\"%nodeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_CNA_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CNA_FORMAT = \"%prefix%[%sourceId%:%timeId%] set node \\\"%nodeId%\\\" +\\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CNC_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CNC_FORMAT = \"%prefix%[%sourceId%:%timeId%] set node \\\"%nodeId%\\\" \\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CNR_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CNR_FORMAT = \"%prefix%[%sourceId%:%timeId%] set node \\\"%nodeId%\\\" -\\\"%attributeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_DN_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_DN_FORMAT = \"%prefix%[%sourceId%:%timeId%] remove node \\\"%nodeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_AE_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_AE_FORMAT = \"%prefix%[%sourceId%:%timeId%] add edge \\\"%edgeId%\\\" : \\\"%source%\\\" -- \\\"%target%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_CEA_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CEA_FORMAT = \"%prefix%[%sourceId%:%timeId%] set edge \\\"%edgeId%\\\" +\\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CEC_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CEC_FORMAT = \"%prefix%[%sourceId%:%timeId%] set edge \\\"%edgeId%\\\" \\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CER_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CER_FORMAT = \"%prefix%[%sourceId%:%timeId%] set edge \\\"%edgeId%\\\" -\\\"%attributeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_DE_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_DE_FORMAT = \"%prefix%[%sourceId%:%timeId%] remove edge \\\"%edgeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_CGA_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CGA_FORMAT = \"%prefix%[%sourceId%:%timeId%] set +\\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CGC_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CGC_FORMAT = \"%prefix%[%sourceId%:%timeId%] set \\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CGR_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CGR_FORMAT = \"%prefix%[%sourceId%:%timeId%] set -\\\"%attributeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_CL_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CL_FORMAT = \"%prefix%[%sourceId%:%timeId%] clear%suffix%\";"
            ],
            [
                "DEFAULT_ST_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_ST_FORMAT = \"%prefix%[%sourceId%:%timeId%] step %step% begins%suffix%\";"
            ],
            [
                "GLOBAL_ENV",
                "org.graphstream.util",
                "Environment",
                "public static Environment GLOBAL_ENV;"
            ],
            [
                "LEXICAL_ERROR",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "public static final int LEXICAL_ERROR = 0;"
            ],
            [
                "STATIC_LEXER_ERROR",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "public static final int STATIC_LEXER_ERROR = 1;"
            ],
            [
                "INVALID_LEXICAL_STATE",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "public static final int INVALID_LEXICAL_STATE = 2;"
            ],
            [
                "LOOP_DETECTED",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "public static final int LOOP_DETECTED = 3;"
            ],
            [
                "staticFlag",
                "org.graphstream.util.parser",
                "SimpleCharStream",
                "public static final boolean staticFlag = false;"
            ],
            [
                "ABBREVIATED_WEEKDAY_NAME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent ABBREVIATED_WEEKDAY_NAME = new NotImplementedComponent(\"%a\", \"\\\\w+[.]\");"
            ],
            [
                "FULL_WEEKDAY_NAME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent FULL_WEEKDAY_NAME = new NotImplementedComponent(\"%A\", \"\\\\w+\");"
            ],
            [
                "ABBREVIATED_MONTH_NAME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent ABBREVIATED_MONTH_NAME = new NotImplementedComponent(\"%b\", \"\\\\w+[.]\");"
            ],
            [
                "FULL_MONTH_NAME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent FULL_MONTH_NAME = new NotImplementedComponent(\"%B\", \"\\\\w+\");"
            ],
            [
                "LOCALE_DATE_AND_TIME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent LOCALE_DATE_AND_TIME = new NotImplementedComponent(\"%c\", null);"
            ],
            [
                "CENTURY",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent CENTURY = new NotImplementedComponent(\"%C\", \"\\\\d\\\\d\");"
            ],
            [
                "DAY_OF_MONTH_2_DIGITS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DAY_OF_MONTH_2_DIGITS = new FieldComponent(\"%d\", \"[012]\\\\d|3[01]\", Calendar.DAY_OF_MONTH, \"%02d\");"
            ],
            [
                "DATE",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DATE = new AliasComponent(\"%D\", \"%m/%d/%y\");"
            ],
            [
                "DAY_OF_MONTH",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DAY_OF_MONTH = new FieldComponent(\"%e\", \"\\\\d|[12]\\\\d|3[01]\", Calendar.DAY_OF_MONTH, \"%2d\");"
            ],
            [
                "DATE_ISO8601",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DATE_ISO8601 = new AliasComponent(\"%F\", \"%Y-%m-%d\");"
            ],
            [
                "WEEK_BASED_YEAR_2_DIGITS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent WEEK_BASED_YEAR_2_DIGITS = new FieldComponent(\"%g\", \"\\\\d\\\\d\", Calendar.YEAR, \"%02d\");"
            ],
            [
                "WEEK_BASED_YEAR_4_DIGITS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent WEEK_BASED_YEAR_4_DIGITS = new FieldComponent(\"%G\", \"\\\\d{4}\", Calendar.YEAR, \"%04d\");"
            ],
            [
                "ABBREVIATED_MONTH_NAME_ALIAS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent ABBREVIATED_MONTH_NAME_ALIAS = new AliasComponent(\"%h\", \"%b\");"
            ],
            [
                "HOUR_OF_DAY",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent HOUR_OF_DAY = new FieldComponent(\"%H\", \"[01]\\\\d|2[0123]\", Calendar.HOUR_OF_DAY, \"%02d\");"
            ],
            [
                "HOUR",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent HOUR = new FieldComponent(\"%I\", \"0\\\\d|1[012]\", Calendar.HOUR, \"%02d\");"
            ],
            [
                "DAY_OF_YEAR",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DAY_OF_YEAR = new FieldComponent(\"%j\", \"[012]\\\\d\\\\d|3[0-5]\\\\d|36[0-6]\", Calendar.DAY_OF_YEAR, \"%03d\");"
            ],
            [
                "MILLISECOND",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent MILLISECOND = new FieldComponent(\"%k\", \"\\\\d{3}\", Calendar.MILLISECOND, \"%03d\");"
            ],
            [
                "EPOCH",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent EPOCH = new EpochComponent();"
            ],
            [
                "MONTH",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent MONTH = new FieldComponent(\"%m\", \"0[1-9]|1[012]\", Calendar.MONTH, -1, \"%02d\");"
            ],
            [
                "MINUTE",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent MINUTE = new FieldComponent(\"%M\", \"[0-5]\\\\d\", Calendar.MINUTE, \"%02d\");"
            ],
            [
                "NEW_LINE",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent NEW_LINE = new AliasComponent(\"%n\", \"\\n\");"
            ],
            [
                "AM_PM",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent AM_PM = new AMPMComponent();"
            ],
            [
                "LOCALE_CLOCK_TIME_12_HOUR",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent LOCALE_CLOCK_TIME_12_HOUR = new NotImplementedComponent(\"%r\", \"\");"
            ],
            [
                "HOUR_AND_MINUTE",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent HOUR_AND_MINUTE = new AliasComponent(\"%R\", \"%H:%M\");"
            ],
            [
                "SECOND",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent SECOND = new FieldComponent(\"%S\", \"[0-5]\\\\d|60\", Calendar.SECOND, \"%02d\");"
            ],
            [
                "TABULATION",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent TABULATION = new AliasComponent(\"%t\", \"\\t\");"
            ],
            [
                "TIME_ISO8601",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent TIME_ISO8601 = new AliasComponent(\"%T\", \"%H:%M:%S\");"
            ],
            [
                "DAY_OF_WEEK_1_7",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DAY_OF_WEEK_1_7 = new FieldComponent(\"%u\", \"[1-7]\", Calendar.DAY_OF_WEEK, -1, \"%1d\");"
            ],
            [
                "WEEK_OF_YEAR_FROM_SUNDAY",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent WEEK_OF_YEAR_FROM_SUNDAY = new FieldComponent(\"%U\", \"[0-4]\\\\d|5[0123]\", Calendar.WEEK_OF_YEAR, 1, \"%2d\");"
            ],
            [
                "WEEK_NUMBER_ISO8601",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent WEEK_NUMBER_ISO8601 = new NotImplementedComponent(\"%V\", \"0[1-9]|[2-4]\\\\d|5[0123]\");"
            ],
            [
                "DAY_OF_WEEK_0_6",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DAY_OF_WEEK_0_6 = new FieldComponent(\"%w\", \"[0-6]\", Calendar.DAY_OF_WEEK, \"%01d\");"
            ],
            [
                "WEEK_OF_YEAR_FROM_MONDAY",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent WEEK_OF_YEAR_FROM_MONDAY = new FieldComponent(\"%W\", \"[0-4]\\\\d|5[0123]\", Calendar.WEEK_OF_YEAR, \"%02d\");"
            ],
            [
                "LOCALE_DATE_REPRESENTATION",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent LOCALE_DATE_REPRESENTATION = new NotImplementedComponent(\"%x\", \"\");"
            ],
            [
                "LOCALE_TIME_REPRESENTATION",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent LOCALE_TIME_REPRESENTATION = new NotImplementedComponent(\"%X\", \"\");"
            ],
            [
                "YEAR_2_DIGITS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent YEAR_2_DIGITS = new FieldComponent(\"%y\", \"\\\\d\\\\d\", Calendar.YEAR, \"%02d\");"
            ],
            [
                "YEAR_4_DIGITS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent YEAR_4_DIGITS = new FieldComponent(\"%Y\", \"\\\\d{4}\", Calendar.YEAR, \"%04d\");"
            ],
            [
                "UTC_OFFSET",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent UTC_OFFSET = new UTCOffsetComponent();"
            ],
            [
                "LOCALE_TIME_ZONE_NAME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent LOCALE_TIME_ZONE_NAME = new NotImplementedComponent(\"%Z\", \"\\\\w*\");"
            ],
            [
                "PERCENT",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent PERCENT = new AliasComponent(\"%%\", \"%\");"
            ],
            [
                "jjbitVec0",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };"
            ],
            [
                "jjnextStates",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "static final int[] jjnextStates = { 5, 6, 8, 9, 13, 14 };"
            ],
            [
                "jjstrLiteralImages",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "public static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, \"\\133\", \"\\135\", null, null, null, null, null, null };"
            ],
            [
                "lexStateNames",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "public static final String[] lexStateNames = { \"DEFAULT\" };"
            ],
            [
                "jjtoToken",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "static final long[] jjtoToken = { 0xff01L };"
            ],
            [
                "jjtoSkip",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "static final long[] jjtoSkip = { 0x1eL };"
            ],
            [
                "jjbitVec0",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };"
            ],
            [
                "jjnextStates",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "static final int[] jjnextStates = { 54, 11, 12, 15, 17, 18, 1, 2, 5, 47, 52, 8, 9, 20, 21 };"
            ],
            [
                "jjstrLiteralImages",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "public static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, null, \"\\50\", \"\\51\", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null };"
            ],
            [
                "lexStateNames",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "public static final String[] lexStateNames = { \"DEFAULT\" };"
            ],
            [
                "jjtoToken",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "static final long[] jjtoToken = { 0xffffc01L };"
            ],
            [
                "jjtoSkip",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "static final long[] jjtoSkip = { 0x7eL };"
            ],
            [
                "XYZ_ATTR",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "public static final String XYZ_ATTR = \"xyz\";"
            ],
            [
                "WIDTH_ATTR",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "public static final String WIDTH_ATTR = \"ui.tikz.width\";"
            ],
            [
                "HEIGHT_ATTR",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "public static final String HEIGHT_ATTR = \"ui.tikz.height\";"
            ],
            [
                "DEFAULT_WIDTH",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "public static final double DEFAULT_WIDTH = 10;"
            ],
            [
                "DEFAULT_HEIGHT",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "public static final double DEFAULT_HEIGHT = 10;"
            ],
            [
                "DISPLAY_MIN_SIZE_IN_MM",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "public static final double DISPLAY_MIN_SIZE_IN_MM = 2;"
            ],
            [
                "DISPLAY_MAX_SIZE_IN_MM",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "public static final double DISPLAY_MAX_SIZE_IN_MM = 10;"
            ],
            [
                "jjbitVec0",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };"
            ],
            [
                "jjnextStates",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "static final int[] jjnextStates = { 21, 27, 8, 10, 11, 18, 19, 22, 23, 26, 1, 2, 13, 14 };"
            ],
            [
                "jjstrLiteralImages",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "public static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, null, \"\\133\", \"\\135\", \"\\173\", \"\\175\", \"\\72\", \"\\54\", \"\\75\", null, null, null, null, null, null, null, null, null, null, \"\\73\", null, null, null, null, null, null, null, null, null, \"\\137\" };"
            ],
            [
                "lexStateNames",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "public static final String[] lexStateNames = { \"DEFAULT\" };"
            ],
            [
                "jjtoToken",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "static final long[] jjtoToken = { 0x3ffffffc01L };"
            ],
            [
                "jjtoSkip",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "static final long[] jjtoSkip = { 0x7eL };"
            ],
            [
                "jjbitVec0",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };"
            ],
            [
                "jjnextStates",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "static final int[] jjnextStates = { 21, 22, 23, 17, 19, 2, 3, 5, 6, 8, 9 };"
            ],
            [
                "jjstrLiteralImages",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "public static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null };"
            ],
            [
                "lexStateNames",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "public static final String[] lexStateNames = { \"DEFAULT\" };"
            ],
            [
                "jjtoToken",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "static final long[] jjtoToken = { 0x3fffffffffffc9L };"
            ],
            [
                "jjtoSkip",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "static final long[] jjtoSkip = { 0x6L };"
            ],
            [
                "XMLNS",
                "org.graphstream.stream.file.gexf",
                "GEXF",
                "public static final String XMLNS = \"http://www.gexf.net/1.2draft\";"
            ],
            [
                "XMLNS_XSI",
                "org.graphstream.stream.file.gexf",
                "GEXF",
                "public static final String XMLNS_XSI = \"http://www.w3.org/2001/XMLSchema-instance\";"
            ],
            [
                "XMLNS_SL",
                "org.graphstream.stream.file.gexf",
                "GEXF",
                "public static final String XMLNS_SL = \"http://www.gexf.net/1.2draft http://www.gexf.net/1.2draft/gexf.xsd\";"
            ],
            [
                "XMLNS_VIZ",
                "org.graphstream.stream.file.gexf",
                "GEXF",
                "public static final String XMLNS_VIZ = \"http://www.gexf.net/1.2draft/viz\";"
            ],
            [
                "VERSION",
                "org.graphstream.stream.file.gexf",
                "GEXF",
                "public static final String VERSION = \"1.2\";"
            ],
            [
                "BUFFER_SIZE",
                "org.graphstream.stream.file.dgs",
                "DGSParser",
                "protected static final int BUFFER_SIZE = 4096;"
            ],
            [
                "ARRAY_OPEN",
                "org.graphstream.stream.file.dgs",
                "DGSParser",
                "public static final int ARRAY_OPEN = '{';"
            ],
            [
                "ARRAY_CLOSE",
                "org.graphstream.stream.file.dgs",
                "DGSParser",
                "public static final int ARRAY_CLOSE = '}';"
            ],
            [
                "MAP_OPEN",
                "org.graphstream.stream.file.dgs",
                "DGSParser",
                "public static final int MAP_OPEN = '[';"
            ],
            [
                "MAP_CLOSE",
                "org.graphstream.stream.file.dgs",
                "DGSParser",
                "public static final int MAP_CLOSE = ']';"
            ],
            [
                "gradientId",
                "org.graphstream.stream.file",
                "FileSinkSVG2",
                "static int gradientId = 0;"
            ],
            [
                "gradientId",
                "org.graphstream.stream.file",
                "SVGStyle",
                "static int gradientId = 0;"
            ],
            [
                "TIME_PREFIX",
                "org.graphstream.stream",
                "Timeline",
                "public static final String TIME_PREFIX = \"time\";"
            ],
            [
                "SYNC_DISABLE_KEY",
                "org.graphstream.stream.sync",
                "SinkTime",
                "public static final String SYNC_DISABLE_KEY = \"org.graphstream.stream.sync.disable\";"
            ],
            [
                "disableSync",
                "org.graphstream.stream.sync",
                "SinkTime",
                "protected static final boolean disableSync;"
            ],
            [
                "LIGHT_YELLOW",
                "org.graphstream.stream.netstream",
                "NetStreamReceiver",
                "protected static final String LIGHT_YELLOW = \"\u001b[33;1m\";"
            ],
            [
                "RESET",
                "org.graphstream.stream.netstream",
                "NetStreamReceiver",
                "protected static final String RESET = \"\u001b[0m\";"
            ],
            [
                "BUFFER_INITIAL_SIZE",
                "org.graphstream.stream.netstream",
                "NetStreamReceiver",
                "protected static final int BUFFER_INITIAL_SIZE = 8192;"
            ],
            [
                "BUFFER_INITIAL_SIZE",
                "org.graphstream.stream.netstream",
                "IncomingBuffer",
                "protected static final int BUFFER_INITIAL_SIZE = 8192;"
            ],
            [
                "EVENT_GETVERSION",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_GETVERSION = 0x00;"
            ],
            [
                "EVENT_START",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_START = 0x01;"
            ],
            [
                "EVENT_END",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_END = 0x02;"
            ],
            [
                "EVENT_ADD_NODE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_ADD_NODE = 0x10;"
            ],
            [
                "EVENT_DEL_NODE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_DEL_NODE = 0x11;"
            ],
            [
                "EVENT_ADD_EDGE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_ADD_EDGE = 0x12;"
            ],
            [
                "EVENT_DEL_EDGE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_DEL_EDGE = 0x13;"
            ],
            [
                "EVENT_STEP",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_STEP = 0x14;"
            ],
            [
                "EVENT_CLEARED",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_CLEARED = 0x15;"
            ],
            [
                "EVENT_ADD_GRAPH_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_ADD_GRAPH_ATTR = 0x16;"
            ],
            [
                "EVENT_CHG_GRAPH_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_CHG_GRAPH_ATTR = 0x17;"
            ],
            [
                "EVENT_DEL_GRAPH_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_DEL_GRAPH_ATTR = 0x18;"
            ],
            [
                "EVENT_ADD_NODE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_ADD_NODE_ATTR = 0x19;"
            ],
            [
                "EVENT_CHG_NODE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_CHG_NODE_ATTR = 0x1a;"
            ],
            [
                "EVENT_DEL_NODE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_DEL_NODE_ATTR = 0x1b;"
            ],
            [
                "EVENT_ADD_EDGE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_ADD_EDGE_ATTR = 0x1c;"
            ],
            [
                "EVENT_CHG_EDGE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_CHG_EDGE_ATTR = 0x1d;"
            ],
            [
                "EVENT_DEL_EDGE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_DEL_EDGE_ATTR = 0x1e;"
            ],
            [
                "TYPE_UNKNOWN",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_UNKNOWN = 0x00;"
            ],
            [
                "TYPE_BOOLEAN",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_BOOLEAN = 0x50;"
            ],
            [
                "TYPE_BOOLEAN_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_BOOLEAN_ARRAY = 0x51;"
            ],
            [
                "TYPE_BYTE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_BYTE = 0x52;"
            ],
            [
                "TYPE_BYTE_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_BYTE_ARRAY = 0x53;"
            ],
            [
                "TYPE_SHORT",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_SHORT = 0x54;"
            ],
            [
                "TYPE_SHORT_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_SHORT_ARRAY = 0x55;"
            ],
            [
                "TYPE_INT",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_INT = 0x56;"
            ],
            [
                "TYPE_INT_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_INT_ARRAY = 0x57;"
            ],
            [
                "TYPE_LONG",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_LONG = 0x58;"
            ],
            [
                "TYPE_LONG_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_LONG_ARRAY = 0x59;"
            ],
            [
                "TYPE_FLOAT",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_FLOAT = 0x5a;"
            ],
            [
                "TYPE_FLOAT_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_FLOAT_ARRAY = 0x5b;"
            ],
            [
                "TYPE_DOUBLE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_DOUBLE = 0x5c;"
            ],
            [
                "TYPE_DOUBLE_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_DOUBLE_ARRAY = 0x5d;"
            ],
            [
                "TYPE_STRING",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_STRING = 0x5e;"
            ],
            [
                "TYPE_RAW",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_RAW = 0x5f;"
            ],
            [
                "TYPE_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static byte TYPE_ARRAY = 0x60;"
            ],
            [
                "TYPE_NULL",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_NULL = 0x61;"
            ],
            [
                "COMMAND",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int COMMAND = 0x70;"
            ],
            [
                "NO_OPTIONS",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public final static int NO_OPTIONS = 0;"
            ],
            [
                "ENCODE",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public final static int ENCODE = 1;"
            ],
            [
                "DECODE",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public final static int DECODE = 0;"
            ],
            [
                "GZIP",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public final static int GZIP = 2;"
            ],
            [
                "DONT_GUNZIP",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public final static int DONT_GUNZIP = 4;"
            ],
            [
                "DO_BREAK_LINES",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public final static int DO_BREAK_LINES = 8;"
            ],
            [
                "URL_SAFE",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public final static int URL_SAFE = 16;"
            ],
            [
                "ORDERED",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public final static int ORDERED = 32;"
            ],
            [
                "INITIAL_EDGE_CAPACITY",
                "org.graphstream.graph.implementations",
                "AdjacencyListNode",
                "protected static final int INITIAL_EDGE_CAPACITY;"
            ],
            [
                "GROWTH_FACTOR",
                "org.graphstream.graph.implementations",
                "AdjacencyListNode",
                "protected static final double GROWTH_FACTOR = 1.1;"
            ],
            [
                "I_EDGE",
                "org.graphstream.graph.implementations",
                "AdjacencyListNode",
                "protected static final char I_EDGE = 0;"
            ],
            [
                "IO_EDGE",
                "org.graphstream.graph.implementations",
                "AdjacencyListNode",
                "protected static final char IO_EDGE = 1;"
            ],
            [
                "O_EDGE",
                "org.graphstream.graph.implementations",
                "AdjacencyListNode",
                "protected static final char O_EDGE = 2;"
            ],
            [
                "GROW_FACTOR",
                "org.graphstream.graph.implementations",
                "AdjacencyListGraph",
                "public static final double GROW_FACTOR = 1.1;"
            ],
            [
                "DEFAULT_NODE_CAPACITY",
                "org.graphstream.graph.implementations",
                "AdjacencyListGraph",
                "public static final int DEFAULT_NODE_CAPACITY = 128;"
            ],
            [
                "DEFAULT_EDGE_CAPACITY",
                "org.graphstream.graph.implementations",
                "AdjacencyListGraph",
                "public static final int DEFAULT_EDGE_CAPACITY = 1024;"
            ]
        ],
        "tokensMethodJavadocValues": [],
        "tokensMethodArguments": [
            [
                "minx",
                "",
                "double"
            ],
            [
                "miny",
                "",
                "double"
            ],
            [
                "minz",
                "",
                "double"
            ],
            [
                "maxx",
                "",
                "double"
            ],
            [
                "maxy",
                "",
                "double"
            ],
            [
                "maxz",
                "",
                "double"
            ]
        ],
        "tokensMethodVariablesNonPrivateNonStaticNonVoidMethods": [
            [
                "transformGuToPx",
                "org.graphstream.ui.view",
                "Camera",
                "Point3 transformGuToPx(double x, double y, double z)"
            ],
            [
                "getViewCenter",
                "org.graphstream.ui.view",
                "Camera",
                "Point3 getViewCenter()"
            ],
            [
                "getMetrics",
                "org.graphstream.ui.view",
                "Camera",
                "GraphMetrics getMetrics()"
            ],
            [
                "getViewRotation",
                "org.graphstream.ui.view",
                "Camera",
                "double getViewRotation()"
            ],
            [
                "getGraphDimension",
                "org.graphstream.ui.view",
                "Camera",
                "double getGraphDimension()"
            ],
            [
                "transformPxToGu",
                "org.graphstream.ui.view",
                "Camera",
                "Point3 transformPxToGu(double x, double y)"
            ],
            [
                "getViewPercent",
                "org.graphstream.ui.view",
                "Camera",
                "double getViewPercent()"
            ],
            [
                "isVisible",
                "org.graphstream.ui.view",
                "Camera",
                "boolean isVisible(GraphicElement element)"
            ],
            [
                "hashCode",
                "java.lang",
                "Object",
                "public native int hashCode()"
            ],
            [
                "toString",
                "java.lang",
                "Object",
                "public String toString()"
            ],
            [
                "equals",
                "java.lang",
                "Object",
                "public boolean equals(Object arg0)"
            ],
            [
                "getClass",
                "java.lang",
                "Object",
                "public final native Class<? extends Object> getClass()"
            ],
            [
                "clone",
                "java.lang",
                "Object",
                "protected native Object clone() throws CloneNotSupportedException"
            ]
        ],
        "tokensMethodVariablesNonPrivateNonStaticAttributes": [],
        "tokensOracleVariablesNonPrivateNonStaticNonVoidMethods": [],
        "tokensOracleVariablesNonPrivateNonStaticAttributes": []
    },
    {
        "id": 3003,
        "oracle": ";",
        "oracleType": "PRE",
        "projectName": "gs-core-1.3",
        "packageName": "org.graphstream.ui.view",
        "className": "Camera",
        "javadocTag": "@param y The source point ordinate in pixels.",
        "methodJavadoc": "    /**\n\t * Return the given point in pixels converted in graph units (GU) using the\n\t * inverse transformation of the current projection matrix. The inverse\n\t * matrix is computed only once each time a new projection matrix is\n\t * created.\n\t * \n\t * @param x\n\t *            The source point abscissa in pixels.\n\t * @param y\n\t *            The source point ordinate in pixels.\n\t * @return The resulting points in graph units.\n\t */",
        "methodSourceCode": "Point3 transformPxToGu(double x, double y);",
        "classJavadoc": "/**\n     * The view centre (a point in graph units).\n     *\n     * @return The view centre.\n     */",
        "classSourceCode": "/*\n * Copyright 2006 - 2015\n *     Stefan Balev     <stefan.balev@graphstream-project.org>\n *     Julien Baudry    <julien.baudry@graphstream-project.org>\n *     Antoine Dutot    <antoine.dutot@graphstream-project.org>\n *     Yoann Pign\u00e9      <yoann.pigne@graphstream-project.org>\n *     Guilhelm Savin   <guilhelm.savin@graphstream-project.org>\n * \n * This file is part of GraphStream <http://graphstream-project.org>.\n * \n * GraphStream is a library whose purpose is to handle static or dynamic\n * graph, create them from scratch, file or any source and display them.\n * \n * This program is free software distributed under the terms of two licenses, the\n * CeCILL-C license that fits European law, and the GNU Lesser General Public\n * License. You can  use, modify and/ or redistribute the software under the terms\n * of the CeCILL-C license as circulated by CEA, CNRS and INRIA at the following\n * URL <http://www.cecill.info> or under the terms of the GNU LGPL as published by\n * the Free Software Foundation, either version 3 of the License, or (at your\n * option) any later version.\n * \n * This program is distributed in the hope that it will be useful, but WITHOUT ANY\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A\n * PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more details.\n * \n * You should have received a copy of the GNU Lesser General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n * \n * The fact that you are presently reading this means that you have had\n * knowledge of the CeCILL-C and LGPL licenses and that you accept their terms.\n */\npackage org.graphstream.ui.view;\n\nimport org.graphstream.ui.geom.Point3;\nimport org.graphstream.ui.graphicGraph.GraphicElement;\nimport org.graphstream.ui.swingViewer.util.GraphMetrics;\n\npublic interface Camera {\n\t/**\n\t * The view centre (a point in graph units).\n\t * \n\t * @return The view centre.\n\t */\n\tPoint3 getViewCenter();\n\n\t/**\n\t * Change the view centre.\n\t * \n\t * @param x\n\t *            The new abscissa.\n\t * @param y\n\t *            The new ordinate.\n\t * @param z\n\t *            The new depth.\n\t */\n\tvoid setViewCenter(double x, double y, double z);\n\n\t/**\n\t * The portion of the graph visible.\n\t * \n\t * @return A real for which value 1 means the graph is fully visible and\n\t *         uses the whole view port.\n\t */\n\tdouble getViewPercent();\n\n\t/**\n\t * Zoom the view.\n\t * \n\t * @param percent\n\t *            Percent of the graph visible.\n\t */\n\tvoid setViewPercent(double percent);\n\n\t/**\n\t * The current rotation angle.\n\t * \n\t * @return The rotation angle in degrees.\n\t */\n\tdouble getViewRotation();\n\n\t/**\n\t * Rotate the view around its centre point by a given theta angles (in\n\t * degrees).\n\t * \n\t * @param theta\n\t *            The rotation angle in degrees.\n\t */\n\tvoid setViewRotation(double theta);\n\n\t/**\n\t * A number in GU that gives the approximate graph size (often the diagonal\n\t * of the graph). This allows to compute displacements in the graph as\n\t * percent of its overall size. For example this can be used to move the\n\t * view centre.\n\t * \n\t * @return The graph estimated size in graph units.\n\t */\n\tdouble getGraphDimension();\n\n\t/**\n\t * Remove the specified graph view port.\n\t * \n\t * @see #setGraphViewport(double, double, double, double)\n\t */\n\tvoid removeGraphViewport();\n\n\t/**\n\t * Specify exactly the minimum and maximum points in GU that are visible\n\t * (more points may be visible due to aspect-ratio constraints).\n\t * \n\t * @param minx\n\t *            The minimum abscissa visible.\n\t * @param miny\n\t *            The minimum ordinate visible.\n\t * @param maxx\n\t *            The maximum abscissa visible.\n\t * @param maxy\n\t *            The maximum abscissa visible.\n\t * @see #removeGraphViewport()\n\t */\n\tvoid setGraphViewport(double minx, double miny, double maxx, double maxy);\n\n\t/**\n\t * Reset the view to the automatic mode.\n\t */\n\tvoid resetView();\n\n\t/**\n\t * Set the bounds of the graphic graph in GU. Called by the Viewer.\n\t * \n\t * @param minx\n\t *            Lowest abscissa.\n\t * @param miny\n\t *            Lowest ordinate.\n\t * @param minz\n\t *            Lowest depth.\n\t * @param maxx\n\t *            Highest abscissa.\n\t * @param maxy\n\t *            Highest ordinate.\n\t * @param maxz\n\t *            Highest depth.\n\t */\n\tvoid setBounds(double minx, double miny, double minz, double maxx,\n\t\t\tdouble maxy, double maxz);\n\n\t/**\n\t * Get the {@link org.graphstream.ui.swingViewer.util.GraphMetrics} object linked to this Camera. It can be used\n\t * to convert pixels to graphic units and vice versa.\n\t * \n\t * @return a GraphMetrics instance\n\t */\n\tGraphMetrics getMetrics();\n\t\n\t/**\n\t * Enable or disable automatic adjustment of the view to see the entire\n\t * graph.\n\t * \n\t * @param on\n\t *            If true, automatic adjustment is enabled.\n\t */\n\tvoid setAutoFitView(boolean on);\n\n\t/**\n\t * Transform a point in graph units into pixels.\n\t * \n\t * @return The transformed point.\n\t */\n\tPoint3 transformGuToPx(double x, double y, double z);\n\t\n\t/**\n\t * Return the given point in pixels converted in graph units (GU) using the\n\t * inverse transformation of the current projection matrix. The inverse\n\t * matrix is computed only once each time a new projection matrix is\n\t * created.\n\t * \n\t * @param x\n\t *            The source point abscissa in pixels.\n\t * @param y\n\t *            The source point ordinate in pixels.\n\t * @return The resulting points in graph units.\n\t */\n\tPoint3 transformPxToGu(double x, double y);\n\t\n\t/**\n\t * True if the element would be visible on screen. The method used is to\n\t * transform the center of the element (which is always in graph units)\n\t * using the camera actual transformation to put it in pixel units. Then to\n\t * look in the style sheet the size of the element and to test if its\n\t * enclosing rectangle intersects the view port. For edges, its two nodes\n\t * are used.\n\t * \n\t * @param element\n\t *            The element to test.\n\t * @return True if the element is visible and therefore must be rendered.\n\t */\n\tboolean isVisible(GraphicElement element);\n}",
        "tokensGeneralGrammar": [
            "null",
            "true",
            "false",
            ",",
            ".",
            ":",
            ";",
            "?",
            "(",
            ")",
            "jdVar",
            "stream",
            "Arrays",
            "allMatch",
            "noneMatch",
            "anyMatch",
            "~",
            ">>",
            "<<",
            ">>>",
            "|",
            "&",
            "^",
            "+",
            "-",
            "/",
            "*",
            "%",
            "&&",
            "||",
            ">=",
            "<=",
            ">",
            "<",
            "==",
            "!=",
            "instanceof",
            "class",
            "methodResultID",
            "this"
        ],
        "tokensGeneralValuesGlobalDictionary": [
            [
                "0",
                "int"
            ],
            [
                "1",
                "int"
            ],
            [
                "-1",
                "int"
            ],
            [
                "0.0",
                "double"
            ],
            [
                "1.0",
                "double"
            ],
            [
                "-1.0",
                "double"
            ],
            [
                "\"\"",
                "String"
            ],
            [
                "\" \"",
                "String"
            ]
        ],
        "tokensProjectClasses": [
            [
                "DefaultCamera",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "GradientFactory",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "GraphMetrics",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "Graphics2DOutput",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "ImageCache",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "StrokeFactory",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "FontCache",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "FontSlot",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "DefaultView",
                "org.graphstream.ui.swingViewer"
            ],
            [
                "SpriteRenderer",
                "org.graphstream.ui.swingViewer.basicRenderer"
            ],
            [
                "ElementRenderer",
                "org.graphstream.ui.swingViewer.basicRenderer"
            ],
            [
                "NodeRenderer",
                "org.graphstream.ui.swingViewer.basicRenderer"
            ],
            [
                "Arrow",
                "org.graphstream.ui.swingViewer.basicRenderer.shapes"
            ],
            [
                "Shape",
                "org.graphstream.ui.swingViewer.basicRenderer.shapes"
            ],
            [
                "EdgeRenderer",
                "org.graphstream.ui.swingViewer.basicRenderer"
            ],
            [
                "SwingBasicGraphRenderer",
                "org.graphstream.ui.swingViewer.basicRenderer"
            ],
            [
                "GraphRendererBase",
                "org.graphstream.ui.swingViewer"
            ],
            [
                "GraphRenderer",
                "org.graphstream.ui.swingViewer"
            ],
            [
                "LayerRenderer",
                "org.graphstream.ui.swingViewer"
            ],
            [
                "ViewPanel",
                "org.graphstream.ui.swingViewer"
            ],
            [
                "Layouts",
                "org.graphstream.ui.layout"
            ],
            [
                "Layout",
                "org.graphstream.ui.layout"
            ],
            [
                "LayoutRunner",
                "org.graphstream.ui.layout"
            ],
            [
                "NodeParticle",
                "org.graphstream.ui.layout.springbox"
            ],
            [
                "GraphCellData",
                "org.graphstream.ui.layout.springbox"
            ],
            [
                "EdgeSpring",
                "org.graphstream.ui.layout.springbox"
            ],
            [
                "Energies",
                "org.graphstream.ui.layout.springbox"
            ],
            [
                "BarnesHutLayout",
                "org.graphstream.ui.layout.springbox"
            ],
            [
                "LinLog",
                "org.graphstream.ui.layout.springbox.implementations"
            ],
            [
                "LinLogNodeParticle",
                "org.graphstream.ui.layout.springbox.implementations"
            ],
            [
                "SpringBoxNodeParticle",
                "org.graphstream.ui.layout.springbox.implementations"
            ],
            [
                "SpringBox",
                "org.graphstream.ui.layout.springbox.implementations"
            ],
            [
                "Point2",
                "org.graphstream.ui.geom"
            ],
            [
                "Vector2",
                "org.graphstream.ui.geom"
            ],
            [
                "Vector3",
                "org.graphstream.ui.geom"
            ],
            [
                "Point3",
                "org.graphstream.ui.geom"
            ],
            [
                "ViewerListener",
                "org.graphstream.ui.view"
            ],
            [
                "MouseManager",
                "org.graphstream.ui.view.util"
            ],
            [
                "ShortcutManager",
                "org.graphstream.ui.view.util"
            ],
            [
                "DefaultShortcutManager",
                "org.graphstream.ui.view.util"
            ],
            [
                "FpsCounter",
                "org.graphstream.ui.view.util"
            ],
            [
                "CubicCurve",
                "org.graphstream.ui.view.util"
            ],
            [
                "DefaultMouseManager",
                "org.graphstream.ui.view.util"
            ],
            [
                "Selection",
                "org.graphstream.ui.view"
            ],
            [
                "ViewerPipe",
                "org.graphstream.ui.view"
            ],
            [
                "Viewer",
                "org.graphstream.ui.view"
            ],
            [
                "View",
                "org.graphstream.ui.view"
            ],
            [
                "Camera",
                "org.graphstream.ui.view"
            ],
            [
                "Sprite",
                "org.graphstream.ui.spriteManager"
            ],
            [
                "InvalidSpriteIDException",
                "org.graphstream.ui.spriteManager"
            ],
            [
                "SpriteManager",
                "org.graphstream.ui.spriteManager"
            ],
            [
                "SpriteFactory",
                "org.graphstream.ui.spriteManager"
            ],
            [
                "StyleGroupListener",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "Colors",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "Values",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "StyleSheetListener",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "StyleSheetParserTokenManager",
                "org.graphstream.ui.graphicGraph.stylesheet.parser"
            ],
            [
                "StyleSheetParserConstants",
                "org.graphstream.ui.graphicGraph.stylesheet.parser"
            ],
            [
                "StyleSheetParser",
                "org.graphstream.ui.graphicGraph.stylesheet.parser"
            ],
            [
                "Style",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "StyleSheet",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "StyleConstants",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "Selector",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "Value",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "Rule",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "GraphicNode",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "StyleGroup",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphPosLengthUtils",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphicEdge",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphicElementChangeListener",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphicGraph",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "StyleGroupSet",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphicSprite",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphicElement",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "VerboseSink",
                "org.graphstream.util"
            ],
            [
                "GraphListeners",
                "org.graphstream.util"
            ],
            [
                "Environment",
                "org.graphstream.util"
            ],
            [
                "GraphDiff",
                "org.graphstream.util"
            ],
            [
                "Filters",
                "org.graphstream.util"
            ],
            [
                "FilteredEdgeIterator",
                "org.graphstream.util"
            ],
            [
                "Parser",
                "org.graphstream.util.parser"
            ],
            [
                "ParserFactory",
                "org.graphstream.util.parser"
            ],
            [
                "TokenMgrError",
                "org.graphstream.util.parser"
            ],
            [
                "ParseException",
                "org.graphstream.util.parser"
            ],
            [
                "SimpleCharStream",
                "org.graphstream.util.parser"
            ],
            [
                "Token",
                "org.graphstream.util.parser"
            ],
            [
                "ISODateIO",
                "org.graphstream.util.time"
            ],
            [
                "ISODateComponent",
                "org.graphstream.util.time"
            ],
            [
                "FilteredNodeIterator",
                "org.graphstream.util"
            ],
            [
                "FixedArrayList",
                "org.graphstream.util.set"
            ],
            [
                "StepCounter",
                "org.graphstream.util"
            ],
            [
                "GraphSpells",
                "org.graphstream.util.cumulative"
            ],
            [
                "CumulativeAttributes",
                "org.graphstream.util.cumulative"
            ],
            [
                "CumulativeSpells",
                "org.graphstream.util.cumulative"
            ],
            [
                "Filter",
                "org.graphstream.util"
            ],
            [
                "PipeAdapter",
                "org.graphstream.stream"
            ],
            [
                "GraphParseException",
                "org.graphstream.stream"
            ],
            [
                "ElementSink",
                "org.graphstream.stream"
            ],
            [
                "URLSource",
                "org.graphstream.stream.net"
            ],
            [
                "HTTPSource",
                "org.graphstream.stream.net"
            ],
            [
                "SourceAdapter",
                "org.graphstream.stream"
            ],
            [
                "AttributeSink",
                "org.graphstream.stream"
            ],
            [
                "GMLParserConstants",
                "org.graphstream.stream.file.gml"
            ],
            [
                "GMLParserTokenManager",
                "org.graphstream.stream.file.gml"
            ],
            [
                "GMLContext",
                "org.graphstream.stream.file.gml"
            ],
            [
                "Graphics",
                "org.graphstream.stream.file.gml"
            ],
            [
                "KeyValues",
                "org.graphstream.stream.file.gml"
            ],
            [
                "GMLParser",
                "org.graphstream.stream.file.gml"
            ],
            [
                "FileSinkGraphML",
                "org.graphstream.stream.file"
            ],
            [
                "TLPParserConstants",
                "org.graphstream.stream.file.tlp"
            ],
            [
                "TLPParser",
                "org.graphstream.stream.file.tlp"
            ],
            [
                "TLPParserTokenManager",
                "org.graphstream.stream.file.tlp"
            ],
            [
                "FileSinkFactory",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceEdge",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkBase",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkTikZ",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceGEXF",
                "org.graphstream.stream.file"
            ],
            [
                "DOTParser",
                "org.graphstream.stream.file.dot"
            ],
            [
                "DOTParserConstants",
                "org.graphstream.stream.file.dot"
            ],
            [
                "DOTParserTokenManager",
                "org.graphstream.stream.file.dot"
            ],
            [
                "FileSink",
                "org.graphstream.stream.file"
            ],
            [
                "PajekContext",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "Graphics",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "NodeGraphics",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "EdgeGraphics",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "EdgeMatrix",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "PajekParserTokenManager",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "PajekParserConstants",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "FileSourceXML",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkBaseFiltered",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkDOT",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceParser",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkDGSFiltered",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceDOT",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceDGS1And2",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceGraphML",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceFactory",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkImages",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkDynamicGML",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkSVG",
                "org.graphstream.stream.file"
            ],
            [
                "GEXFSpell",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "SmartXMLWriter",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFElement",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFEdges",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFAttValues",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFEdge",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFSpells",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFAttValue",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFNodes",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFNode",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFMeta",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFAttributes",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXF",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFGraph",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFAttribute",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "OldFileSourceDGS",
                "org.graphstream.stream.file.dgs"
            ],
            [
                "DGSParser",
                "org.graphstream.stream.file.dgs"
            ],
            [
                "FileSourceBase",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkGML",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceDGS",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkDGSUtility",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceTLP",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkSVG2",
                "org.graphstream.stream.file"
            ],
            [
                "FileSource",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceNCol",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourcePajek",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceGPX",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceLGL",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkGEXF2",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceGML",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkGEXF",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkDGS",
                "org.graphstream.stream.file"
            ],
            [
                "ProxyPipe",
                "org.graphstream.stream"
            ],
            [
                "Sink",
                "org.graphstream.stream"
            ],
            [
                "Timeline",
                "org.graphstream.stream"
            ],
            [
                "Pipe",
                "org.graphstream.stream"
            ],
            [
                "SinkAdapter",
                "org.graphstream.stream"
            ],
            [
                "Replayable",
                "org.graphstream.stream"
            ],
            [
                "Source",
                "org.graphstream.stream"
            ],
            [
                "AnnotatedSink",
                "org.graphstream.stream"
            ],
            [
                "GraphReplay",
                "org.graphstream.stream"
            ],
            [
                "AttributePipe",
                "org.graphstream.stream"
            ],
            [
                "SinkTime",
                "org.graphstream.stream.sync"
            ],
            [
                "SourceTime",
                "org.graphstream.stream.sync"
            ],
            [
                "PipeBase",
                "org.graphstream.stream"
            ],
            [
                "ThreadProxyPipe",
                "org.graphstream.stream.thread"
            ],
            [
                "ThreadProxyPipeOld",
                "org.graphstream.stream.thread"
            ],
            [
                "RMISource",
                "org.graphstream.stream.rmi"
            ],
            [
                "RMIAdapterOut",
                "org.graphstream.stream.rmi"
            ],
            [
                "RMISink",
                "org.graphstream.stream.rmi"
            ],
            [
                "RMIAdapterIn",
                "org.graphstream.stream.rmi"
            ],
            [
                "SourceBase",
                "org.graphstream.stream"
            ],
            [
                "NetStreamDecoder",
                "org.graphstream.stream.netstream"
            ],
            [
                "NetStreamReceiver",
                "org.graphstream.stream.netstream"
            ],
            [
                "NetStreamConstants",
                "org.graphstream.stream.netstream"
            ],
            [
                "NetStreamSender",
                "org.graphstream.stream.netstream"
            ],
            [
                "DefaultNetStreamDecoder",
                "org.graphstream.stream.netstream"
            ],
            [
                "Base64",
                "org.graphstream.stream.netstream.packing"
            ],
            [
                "NetStreamUnpacker",
                "org.graphstream.stream.netstream.packing"
            ],
            [
                "Base64Packer",
                "org.graphstream.stream.netstream.packing"
            ],
            [
                "Base64Unpacker",
                "org.graphstream.stream.netstream.packing"
            ],
            [
                "NetStreamPacker",
                "org.graphstream.stream.netstream.packing"
            ],
            [
                "AttributePredicate",
                "org.graphstream.stream"
            ],
            [
                "Element",
                "org.graphstream.graph"
            ],
            [
                "Node",
                "org.graphstream.graph"
            ],
            [
                "BreadthFirstIterator",
                "org.graphstream.graph"
            ],
            [
                "Graph",
                "org.graphstream.graph"
            ],
            [
                "EdgeRejectedException",
                "org.graphstream.graph"
            ],
            [
                "CompoundAttribute",
                "org.graphstream.graph"
            ],
            [
                "Structure",
                "org.graphstream.graph"
            ],
            [
                "DepthFirstIterator",
                "org.graphstream.graph"
            ],
            [
                "NullAttributeException",
                "org.graphstream.graph"
            ],
            [
                "IdAlreadyInUseException",
                "org.graphstream.graph"
            ],
            [
                "EdgeFactory",
                "org.graphstream.graph"
            ],
            [
                "ElementNotFoundException",
                "org.graphstream.graph"
            ],
            [
                "OneAttributeElement",
                "org.graphstream.graph.implementations"
            ],
            [
                "AdjacencyListNode",
                "org.graphstream.graph.implementations"
            ],
            [
                "SingleNode",
                "org.graphstream.graph.implementations"
            ],
            [
                "AbstractElement",
                "org.graphstream.graph.implementations"
            ],
            [
                "AdjacencyListGraph",
                "org.graphstream.graph.implementations"
            ],
            [
                "AbstractNode",
                "org.graphstream.graph.implementations"
            ],
            [
                "DefaultGraph",
                "org.graphstream.graph.implementations"
            ],
            [
                "MultiGraph",
                "org.graphstream.graph.implementations"
            ],
            [
                "Graphs",
                "org.graphstream.graph.implementations"
            ],
            [
                "SingleGraph",
                "org.graphstream.graph.implementations"
            ],
            [
                "MultiNode",
                "org.graphstream.graph.implementations"
            ],
            [
                "AbstractGraph",
                "org.graphstream.graph.implementations"
            ],
            [
                "AbstractEdge",
                "org.graphstream.graph.implementations"
            ],
            [
                "GraphFactory",
                "org.graphstream.graph"
            ],
            [
                "NodeFactory",
                "org.graphstream.graph"
            ],
            [
                "Edge",
                "org.graphstream.graph"
            ],
            [
                "Path",
                "org.graphstream.graph"
            ]
        ],
        "tokensProjectClassesNonPrivateStaticNonVoidMethods": [
            [
                "gradientInArea",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static Paint gradientInArea(int x0, int y0, int width, int height, Style style)"
            ],
            [
                "linearGradientFromStyle",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static Paint linearGradientFromStyle(float x0, float y0, float x1, float y1, Style style)"
            ],
            [
                "radialGradientFromStyle",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static Paint radialGradientFromStyle(float cx, float cy, float radius, Style style)"
            ],
            [
                "radialGradientFromStyle",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static Paint radialGradientFromStyle(float cx, float cy, float radius, float fx, float fy, Style style)"
            ],
            [
                "createFractions",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "protected static float[] createFractions(Style style)"
            ],
            [
                "createColors",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "protected static Color[] createColors(Style style)"
            ],
            [
                "defaultImageCache",
                "org.graphstream.ui.swingViewer.util",
                "ImageCache",
                "public static ImageCache defaultImageCache()"
            ],
            [
                "generateStroke",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "public static Stroke generateStroke(Style style, GraphMetrics metrics)"
            ],
            [
                "generatePlainStroke",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "protected static Stroke generatePlainStroke(Style style, GraphMetrics metrics)"
            ],
            [
                "generateDotsStroke",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "protected static Stroke generateDotsStroke(Style style, GraphMetrics metrics)"
            ],
            [
                "generateDashesStroke",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "protected static Stroke generateDashesStroke(Style style, GraphMetrics metrics)"
            ],
            [
                "defaultFontCache",
                "org.graphstream.ui.swingViewer.util",
                "FontCache",
                "public static FontCache defaultFontCache()"
            ],
            [
                "newLayoutAlgorithm",
                "org.graphstream.ui.layout",
                "Layouts",
                "public static Layout newLayoutAlgorithm()"
            ],
            [
                "eval",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "public static double eval(double x0, double x1, double x2, double x3, double t)"
            ],
            [
                "eval",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "public static Point2 eval(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t)"
            ],
            [
                "eval",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "public static Point2D.Double eval(Point2D.Double p0, Point2D.Double p1, Point2D.Double p2, Point2D.Double p3, double t)"
            ],
            [
                "eval",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "public static Point2 eval(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t, Point2 result)"
            ],
            [
                "derivative",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "public static double derivative(double x0, double x1, double x2, double x3, double t)"
            ],
            [
                "derivative",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "public static Point2 derivative(Point2 p0, Point2 p1, Point2 p2, Point3 p3, double t)"
            ],
            [
                "derivative",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "public static Point2 derivative(Point2 p0, Point2 p1, Point2 p2, Point3 p3, double t, Point2 result)"
            ],
            [
                "perpendicular",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "public static Vector2 perpendicular(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t)"
            ],
            [
                "perpendicular",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "public static Vector2 perpendicular(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t, Vector2 result)"
            ],
            [
                "perpendicular",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "public static Point2D.Double perpendicular(Point2D.Double p0, Point2D.Double p1, Point2D.Double p2, Point2D.Double p3, double t)"
            ],
            [
                "newGraphRenderer",
                "org.graphstream.ui.view",
                "Viewer",
                "public static GraphRenderer newGraphRenderer()"
            ],
            [
                "getPositionValue",
                "org.graphstream.ui.spriteManager",
                "SpriteManager",
                "protected static Values getPositionValue(Object value)"
            ],
            [
                "convertColor",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "public static Color convertColor(Object anyValue)"
            ],
            [
                "convertLabel",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "public static String convertLabel(Object value)"
            ],
            [
                "convertWidth",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "public static float convertWidth(Object value)"
            ],
            [
                "convertValue",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "public static Value convertValue(Object value)"
            ],
            [
                "convertUnit",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "protected static Units convertUnit(String unit)"
            ],
            [
                "nodePosition",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "public static double[] nodePosition(Graph graph, String id)"
            ],
            [
                "nodePointPosition",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "public static Point3 nodePointPosition(Graph graph, String id)"
            ],
            [
                "nodePosition",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "public static double[] nodePosition(Node node)"
            ],
            [
                "nodePointPosition",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "public static Point3 nodePointPosition(Node node)"
            ],
            [
                "edgeLength",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "public static double edgeLength(Graph graph, String id)"
            ],
            [
                "edgeLength",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "public static double edgeLength(Edge edge)"
            ],
            [
                "getGlobalEnvironment",
                "org.graphstream.util",
                "Environment",
                "public static Environment getGlobalEnvironment()"
            ],
            [
                "falseFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> falseFilter()"
            ],
            [
                "trueFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> trueFilter()"
            ],
            [
                "byAttributeFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> byAttributeFilter(String key, Object expectedValue)"
            ],
            [
                "separateNodeAndEdgeFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element, U extends Element> Filter<Element> separateNodeAndEdgeFilter(Filter<T> nodeFilter, Filter<U> edgeFilter)"
            ],
            [
                "byExtremitiesFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element, U extends Element> Filter<T> byExtremitiesFilter(Filter<U> f)"
            ],
            [
                "byIdFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> byIdFilter(String idPattern)"
            ],
            [
                "isContained",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> isContained(final Collection<? extends T> set)"
            ],
            [
                "isIdContained",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> isIdContained(final Collection<String> set)"
            ],
            [
                "and",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> and(Filter<T> f1, Filter<T> f2)"
            ],
            [
                "or",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> or(Filter<T> f1, Filter<T> f2)"
            ],
            [
                "xor",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> xor(Filter<T> f1, Filter<T> f2)"
            ],
            [
                "not",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> not(Filter<T> f)"
            ],
            [
                "addEscapes",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "protected static final String addEscapes(String str)"
            ],
            [
                "LexicalError",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "protected static String LexicalError(boolean EOFSeen, int lexState, int errorLine, int errorColumn, String errorAfter, char curChar)"
            ],
            [
                "add_escapes",
                "org.graphstream.util.parser",
                "ParseException",
                "static String add_escapes(String str)"
            ],
            [
                "newToken",
                "org.graphstream.util.parser",
                "Token",
                "public static Token newToken(int ofKind, String image)"
            ],
            [
                "newToken",
                "org.graphstream.util.parser",
                "Token",
                "public static Token newToken(int ofKind)"
            ],
            [
                "countStepInFile",
                "org.graphstream.util",
                "StepCounter",
                "public static int countStepInFile(String path) throws IOException"
            ],
            [
                "GET",
                "org.graphstream.stream.net",
                "HTTPSource",
                "protected static HashMap<String, Object> GET(HttpExchange ex)"
            ],
            [
                "sinkFor",
                "org.graphstream.stream.file",
                "FileSinkFactory",
                "public static FileSink sinkFor(String filename)"
            ],
            [
                "formatId",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "protected static String formatId(String id)"
            ],
            [
                "getInt",
                "org.graphstream.stream.file.pajek",
                "PajekContext",
                "protected static int getInt(Token nb) throws ParseException"
            ],
            [
                "getReal",
                "org.graphstream.stream.file.pajek",
                "PajekContext",
                "protected static double getReal(Token nb) throws ParseException"
            ],
            [
                "toColorValue",
                "org.graphstream.stream.file.pajek",
                "PajekContext",
                "public static String toColorValue(Token R, Token G, Token B) throws ParseException"
            ],
            [
                "sourceFor",
                "org.graphstream.stream.file",
                "FileSourceFactory",
                "public static FileSource sourceFor(String fileName) throws IOException"
            ],
            [
                "getXMLRootElement",
                "org.graphstream.stream.file",
                "FileSourceFactory",
                "public static String getXMLRootElement(String fileName) throws IOException"
            ],
            [
                "formatStringForQuoting",
                "org.graphstream.stream.file",
                "FileSinkDGSUtility",
                "protected static String formatStringForQuoting(String str)"
            ],
            [
                "attributeString",
                "org.graphstream.stream.file",
                "FileSinkDGSUtility",
                "protected static String attributeString(String key, Object value, boolean remove)"
            ],
            [
                "arrayString",
                "org.graphstream.stream.file",
                "FileSinkDGSUtility",
                "protected static String arrayString(Object value)"
            ],
            [
                "valueString",
                "org.graphstream.stream.file",
                "FileSinkDGSUtility",
                "protected static String valueString(Object value)"
            ],
            [
                "hashToString",
                "org.graphstream.stream.file",
                "FileSinkDGSUtility",
                "protected static String hashToString(HashMap<?, ?> hash)"
            ],
            [
                "encodeObject",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public static String encodeObject(java.io.Serializable serializableObject) throws java.io.IOException"
            ],
            [
                "encodeObject",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public static String encodeObject(java.io.Serializable serializableObject, int options) throws java.io.IOException"
            ],
            [
                "encodeBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public static String encodeBytes(byte[] source)"
            ],
            [
                "encodeBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public static String encodeBytes(byte[] source, int options) throws java.io.IOException"
            ],
            [
                "encodeBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public static String encodeBytes(byte[] source, int off, int len)"
            ],
            [
                "encodeBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public static String encodeBytes(byte[] source, int off, int len, int options) throws java.io.IOException"
            ],
            [
                "encodeBytesToBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public static byte[] encodeBytesToBytes(byte[] source)"
            ],
            [
                "encodeBytesToBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public static byte[] encodeBytesToBytes(byte[] source, int off, int len, int options) throws java.io.IOException"
            ],
            [
                "decode",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public static byte[] decode(byte[] source) throws java.io.IOException"
            ],
            [
                "decode",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public static byte[] decode(byte[] source, int off, int len, int options) throws java.io.IOException"
            ],
            [
                "decode",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public static byte[] decode(String s) throws java.io.IOException"
            ],
            [
                "decode",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public static byte[] decode(String s, int options) throws java.io.IOException"
            ],
            [
                "decodeToObject",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public static Object decodeToObject(String encodedObject) throws java.io.IOException, java.lang.ClassNotFoundException"
            ],
            [
                "decodeToObject",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public static Object decodeToObject(String encodedObject, int options, final ClassLoader loader) throws java.io.IOException, java.lang.ClassNotFoundException"
            ],
            [
                "decodeFromFile",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public static byte[] decodeFromFile(String filename) throws java.io.IOException"
            ],
            [
                "encodeFromFile",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public static String encodeFromFile(String filename) throws java.io.IOException"
            ],
            [
                "unmutableGraph",
                "org.graphstream.graph.implementations",
                "Graphs",
                "public static Graph unmutableGraph(Graph g)"
            ],
            [
                "synchronizedGraph",
                "org.graphstream.graph.implementations",
                "Graphs",
                "public static Graph synchronizedGraph(Graph g)"
            ],
            [
                "merge",
                "org.graphstream.graph.implementations",
                "Graphs",
                "public static Graph merge(Graph... graphs)"
            ],
            [
                "clone",
                "org.graphstream.graph.implementations",
                "Graphs",
                "public static Graph clone(Graph g)"
            ]
        ],
        "tokensProjectClassesNonPrivateStaticAttributes": [
            [
                "version16",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static boolean version16 = false;"
            ],
            [
                "predefFractions",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[][] predefFractions = new float[11][];"
            ],
            [
                "predefFractions2",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions2 = { 0f, 1f };"
            ],
            [
                "predefFractions3",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions3 = { 0f, 0.5f, 1f };"
            ],
            [
                "predefFractions4",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions4 = { 0f, 0.33f, 0.66f, 1f };"
            ],
            [
                "predefFractions5",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions5 = { 0f, 0.25f, 0.5f, 0.75f, 1f };"
            ],
            [
                "predefFractions6",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions6 = { 0f, 0.2f, 0.4f, 0.6f, 0.8f, 1f };"
            ],
            [
                "predefFractions7",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions7 = { 0f, 0.1666f, 0.3333f, 0.4999f, 0.6666f, 0.8333f, 1f };"
            ],
            [
                "predefFractions8",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions8 = { 0f, 0.1428f, 0.2856f, 0.4284f, 0.5712f, 0.7140f, 0.8568f, 1f };"
            ],
            [
                "predefFractions9",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions9 = { 0f, 0.125f, 0.25f, 0.375f, 0.5f, 0.625f, .75f, 0.875f, 1f };"
            ],
            [
                "predefFractions10",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions10 = { 0f, 0.1111f, 0.2222f, 0.3333f, 0.4444f, 0.5555f, 0.6666f, 0.7777f, 0.8888f, 1f };"
            ],
            [
                "defaultImageCache",
                "org.graphstream.ui.swingViewer.util",
                "ImageCache",
                "protected static ImageCache defaultImageCache;"
            ],
            [
                "dots",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "protected static float[] dots = { 1f, 1f };"
            ],
            [
                "dashes",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "protected static float[] dashes = { 3f, 3f };"
            ],
            [
                "defaultFontCache",
                "org.graphstream.ui.swingViewer.util",
                "FontCache",
                "public static FontCache defaultFontCache;"
            ],
            [
                "NULL_POINT2",
                "org.graphstream.ui.geom",
                "Point2",
                "public static final Point2 NULL_POINT2 = new Point2(0, 0);"
            ],
            [
                "NULL_POINT3",
                "org.graphstream.ui.geom",
                "Point3",
                "public static final Point3 NULL_POINT3 = new Point3(0, 0, 0);"
            ],
            [
                "DEFAULT_VIEW_ID",
                "org.graphstream.ui.view",
                "Viewer",
                "public static String DEFAULT_VIEW_ID = \"defaultView\";"
            ],
            [
                "jjbitVec0",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };"
            ],
            [
                "jjnextStates",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "static final int[] jjnextStates = { 48, 49, 52, 54, 55, 65, 69, 2, 4, 6, 10, 16, 23, 33, 50, 52, 54, 55, 57, 58, 60, 61, 66, 68, 70, 71 };"
            ],
            [
                "jjstrLiteralImages",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "public static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, \"\\56\", \"\\173\", \"\\175\", \"\\50\", \"\\51\", \"\\43\", \"\\72\", \"\\73\", \"\\54\", \"\\162\\147\\142\\141\", \"\\162\\147\\142\", null, null, null, \"\\165\\162\\154\", \"\\147\\162\\141\\160\\150\", \"\\145\\144\\147\\145\", \"\\156\\157\\144\\145\", \"\\163\\160\\162\\151\\164\\145\", \"\\146\\151\\154\\154\\55\\155\\157\\144\\145\", \"\\146\\151\\154\\154\\55\\143\\157\\154\\157\\162\", \"\\146\\151\\154\\154\\55\\151\\155\\141\\147\\145\", \"\\163\\164\\162\\157\\153\\145\\55\\155\\157\\144\\145\", \"\\163\\164\\162\\157\\153\\145\\55\\143\\157\\154\\157\\162\", \"\\163\\164\\162\\157\\153\\145\\55\\167\\151\\144\\164\\150\", \"\\163\\150\\141\\144\\157\\167\\55\\155\\157\\144\\145\", \"\\163\\150\\141\\144\\157\\167\\55\\143\\157\\154\\157\\162\", \"\\163\\150\\141\\144\\157\\167\\55\\167\\151\\144\\164\\150\", \"\\163\\150\\141\\144\\157\\167\\55\\157\\146\\146\\163\\145\\164\", \"\\164\\145\\170\\164\\55\\155\\157\\144\\145\", \"\\164\\145\\170\\164\\55\\143\\157\\154\\157\\162\", \"\\164\\145\\170\\164\\55\\163\\164\\171\\154\\145\", \"\\164\\145\\170\\164\\55\\146\\157\\156\\164\", \"\\164\\145\\170\\164\\55\\163\\151\\172\\145\", \"\\164\\145\\170\\164\\55\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\\55\\155\\157\\144\\145\", \"\\164\\145\\170\\164\\55\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\", \"\\164\\145\\170\\164\\55\\142\\141\\143\\153\\147\\162\\157\\165\\156\\144\\55\\155\\157\\144\\145\", \"\\164\\145\\170\\164\\55\\142\\141\\143\\153\\147\\162\\157\\165\\156\\144\\55\\143\\157\\154\\157\\162\", \"\\164\\145\\170\\164\\55\\157\\146\\146\\163\\145\\164\", \"\\164\\145\\170\\164\\55\\160\\141\\144\\144\\151\\156\\147\", \"\\151\\143\\157\\156\\55\\155\\157\\144\\145\", \"\\151\\143\\157\\156\", \"\\160\\141\\144\\144\\151\\156\\147\", \"\\172\\55\\151\\156\\144\\145\\170\", \"\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\\55\\155\\157\\144\\145\", \"\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\", \"\\163\\150\\141\\160\\145\", \"\\163\\151\\172\\145\", \"\\163\\151\\172\\145\\55\\155\\157\\144\\145\", \"\\163\\150\\141\\160\\145\\55\\160\\157\\151\\156\\164\\163\", \"\\164\\145\\170\\164\\55\\141\\154\\151\\147\\156\\155\\145\\156\\164\", \"\\152\\143\\157\\155\\160\\157\\156\\145\\156\\164\", \"\\141\\162\\162\\157\\167\\55\\151\\155\\141\\147\\145\", \"\\141\\162\\162\\157\\167\\55\\163\\151\\172\\145\", \"\\141\\162\\162\\157\\167\\55\\163\\150\\141\\160\\145\", \"\\163\\160\\162\\151\\164\\145\\55\\157\\162\\151\\145\\156\\164\\141\\164\\151\\157\\156\", \"\\143\\141\\156\\166\\141\\163\\55\\143\\157\\154\\157\\162\", \"\\160\\154\\141\\151\\156\", \"\\144\\171\\156\\55\\160\\154\\141\\151\\156\", \"\\144\\171\\156\\55\\163\\151\\172\\145\", \"\\144\\171\\156\\55\\151\\143\\157\\156\", \"\\144\\141\\163\\150\\145\\163\", \"\\144\\157\\164\\163\", \"\\144\\157\\165\\142\\154\\145\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\144\\151\\141\\147\\157\\156\\141\\154\\61\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\144\\151\\141\\147\\157\\156\\141\\154\\62\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\150\\157\\162\\151\\172\\157\\156\\164\\141\\154\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\162\\141\\144\\151\\141\\154\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\166\\145\\162\\164\\151\\143\\141\\154\", \"\\150\\151\\144\\144\\145\\156\", \"\\151\\155\\141\\147\\145\\55\\164\\151\\154\\145\\144\", \"\\151\\155\\141\\147\\145\\55\\163\\143\\141\\154\\145\\144\", \"\\151\\155\\141\\147\\145\\55\\163\\143\\141\\154\\145\\144\\55\\162\\141\\164\\151\\157\\55\\155\\141\\170\", \"\\151\\155\\141\\147\\145\\55\\163\\143\\141\\154\\145\\144\\55\\162\\141\\164\\151\\157\\55\\155\\151\\156\", \"\\156\\157\\156\\145\", \"\\156\\157\\162\\155\\141\\154\", \"\\164\\162\\165\\156\\143\\141\\164\\145\\144\", \"\\172\\157\\157\\155\\55\\162\\141\\156\\147\\145\", \"\\141\\164\\55\\172\\157\\157\\155\", \"\\165\\156\\144\\145\\162\\55\\172\\157\\157\\155\", \"\\157\\166\\145\\162\\55\\172\\157\\157\\155\", \"\\172\\157\\157\\155\\163\", \"\\146\\151\\164\", \"\\142\\157\\154\\144\", \"\\142\\157\\154\\144\\55\\151\\164\\141\\154\\151\\143\", \"\\151\\164\\141\\154\\151\\143\", \"\\141\\154\\157\\156\\147\", \"\\141\\164\\55\\154\\145\\146\\164\", \"\\141\\164\\55\\162\\151\\147\\150\\164\", \"\\143\\145\\156\\164\\145\\162\", \"\\154\\145\\146\\164\", \"\\162\\151\\147\\150\\164\", \"\\165\\156\\144\\145\\162\", \"\\141\\142\\157\\166\\145\", \"\\152\\165\\163\\164\\151\\146\\171\", \"\\143\\151\\162\\143\\154\\145\", \"\\164\\162\\151\\141\\156\\147\\154\\145\", \"\\146\\162\\145\\145\\160\\154\\141\\156\\145\", \"\\164\\145\\170\\164\\55\\142\\157\\170\", \"\\164\\145\\170\\164\\55\\162\\157\\165\\156\\144\\145\\144\\55\\142\\157\\170\", \"\\164\\145\\170\\164\\55\\143\\151\\162\\143\\154\\145\", \"\\164\\145\\170\\164\\55\\144\\151\\141\\155\\157\\156\\144\", \"\\164\\145\\170\\164\\55\\160\\141\\162\\141\\147\\162\\141\\160\\150\", \"\\142\\157\\170\", \"\\162\\157\\165\\156\\144\\145\\144\\55\\142\\157\\170\", \"\\143\\162\\157\\163\\163\", \"\\144\\151\\141\\155\\157\\156\\144\", \"\\160\\157\\154\\171\\147\\157\\156\", \"\\142\\165\\164\\164\\157\\156\", \"\\164\\145\\170\\164\\55\\146\\151\\145\\154\\144\", \"\\160\\141\\156\\145\\154\", \"\\154\\151\\156\\145\", \"\\160\\157\\154\\171\\154\\151\\156\\145\", \"\\160\\157\\154\\171\\154\\151\\156\\145\\55\\163\\143\\141\\154\\145\\144\", \"\\141\\156\\147\\154\\145\", \"\\143\\165\\142\\151\\143\\55\\143\\165\\162\\166\\145\", \"\\142\\154\\157\\142\", \"\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\114\\55\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\150\\157\\162\\151\\172\\157\\156\\164\\141\\154\\55\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\166\\145\\162\\164\\151\\143\\141\\154\\55\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\141\\162\\162\\157\\167\", \"\\146\\154\\157\\167\", \"\\160\\151\\145\\55\\143\\150\\141\\162\\164\", \"\\151\\155\\141\\147\\145\", \"\\151\\155\\141\\147\\145\\163\", \"\\146\\162\\157\\155\", \"\\156\\157\\144\\145\\60\", \"\\164\\157\", \"\\156\\157\\144\\145\\61\", \"\\160\\162\\157\\152\\145\\143\\164\\151\\157\\156\", \"\\143\\154\\151\\143\\153\\145\\144\", \"\\163\\145\\154\\145\\143\\164\\145\\144\", null, null };"
            ],
            [
                "lexStateNames",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "public static final String[] lexStateNames = { \"DEFAULT\" };"
            ],
            [
                "jjtoToken",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "static final long[] jjtoToken = { 0xfffffffffffffe01L, 0xffffffffffffffffL, 0xffffL };"
            ],
            [
                "jjtoSkip",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "static final long[] jjtoSkip = { 0x1eL, 0x0L, 0x0L };"
            ],
            [
                "colorMap",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "protected static HashMap<String,Color> colorMap;"
            ],
            [
                "sharpColor1",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "protected static Pattern sharpColor1;"
            ],
            [
                "sharpColor2",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "protected static Pattern sharpColor2;"
            ],
            [
                "cssColor",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "protected static Pattern cssColor;"
            ],
            [
                "cssColorA",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "protected static Pattern cssColorA;"
            ],
            [
                "awtColor",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "protected static Pattern awtColor;"
            ],
            [
                "hexaColor",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "protected static Pattern hexaColor;"
            ],
            [
                "numberUnit",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "protected static Pattern numberUnit;"
            ],
            [
                "number",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "protected static Pattern number;"
            ],
            [
                "acceptedAttribute",
                "org.graphstream.ui.graphicGraph",
                "GraphicElement",
                "protected static Pattern acceptedAttribute;"
            ],
            [
                "DEFAULT_AN_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_AN_FORMAT = \"%prefix%[%sourceId%:%timeId%] add node \\\"%nodeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_CNA_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CNA_FORMAT = \"%prefix%[%sourceId%:%timeId%] set node \\\"%nodeId%\\\" +\\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CNC_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CNC_FORMAT = \"%prefix%[%sourceId%:%timeId%] set node \\\"%nodeId%\\\" \\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CNR_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CNR_FORMAT = \"%prefix%[%sourceId%:%timeId%] set node \\\"%nodeId%\\\" -\\\"%attributeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_DN_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_DN_FORMAT = \"%prefix%[%sourceId%:%timeId%] remove node \\\"%nodeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_AE_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_AE_FORMAT = \"%prefix%[%sourceId%:%timeId%] add edge \\\"%edgeId%\\\" : \\\"%source%\\\" -- \\\"%target%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_CEA_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CEA_FORMAT = \"%prefix%[%sourceId%:%timeId%] set edge \\\"%edgeId%\\\" +\\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CEC_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CEC_FORMAT = \"%prefix%[%sourceId%:%timeId%] set edge \\\"%edgeId%\\\" \\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CER_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CER_FORMAT = \"%prefix%[%sourceId%:%timeId%] set edge \\\"%edgeId%\\\" -\\\"%attributeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_DE_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_DE_FORMAT = \"%prefix%[%sourceId%:%timeId%] remove edge \\\"%edgeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_CGA_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CGA_FORMAT = \"%prefix%[%sourceId%:%timeId%] set +\\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CGC_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CGC_FORMAT = \"%prefix%[%sourceId%:%timeId%] set \\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CGR_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CGR_FORMAT = \"%prefix%[%sourceId%:%timeId%] set -\\\"%attributeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_CL_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CL_FORMAT = \"%prefix%[%sourceId%:%timeId%] clear%suffix%\";"
            ],
            [
                "DEFAULT_ST_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_ST_FORMAT = \"%prefix%[%sourceId%:%timeId%] step %step% begins%suffix%\";"
            ],
            [
                "GLOBAL_ENV",
                "org.graphstream.util",
                "Environment",
                "public static Environment GLOBAL_ENV;"
            ],
            [
                "LEXICAL_ERROR",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "public static final int LEXICAL_ERROR = 0;"
            ],
            [
                "STATIC_LEXER_ERROR",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "public static final int STATIC_LEXER_ERROR = 1;"
            ],
            [
                "INVALID_LEXICAL_STATE",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "public static final int INVALID_LEXICAL_STATE = 2;"
            ],
            [
                "LOOP_DETECTED",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "public static final int LOOP_DETECTED = 3;"
            ],
            [
                "staticFlag",
                "org.graphstream.util.parser",
                "SimpleCharStream",
                "public static final boolean staticFlag = false;"
            ],
            [
                "ABBREVIATED_WEEKDAY_NAME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent ABBREVIATED_WEEKDAY_NAME = new NotImplementedComponent(\"%a\", \"\\\\w+[.]\");"
            ],
            [
                "FULL_WEEKDAY_NAME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent FULL_WEEKDAY_NAME = new NotImplementedComponent(\"%A\", \"\\\\w+\");"
            ],
            [
                "ABBREVIATED_MONTH_NAME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent ABBREVIATED_MONTH_NAME = new NotImplementedComponent(\"%b\", \"\\\\w+[.]\");"
            ],
            [
                "FULL_MONTH_NAME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent FULL_MONTH_NAME = new NotImplementedComponent(\"%B\", \"\\\\w+\");"
            ],
            [
                "LOCALE_DATE_AND_TIME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent LOCALE_DATE_AND_TIME = new NotImplementedComponent(\"%c\", null);"
            ],
            [
                "CENTURY",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent CENTURY = new NotImplementedComponent(\"%C\", \"\\\\d\\\\d\");"
            ],
            [
                "DAY_OF_MONTH_2_DIGITS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DAY_OF_MONTH_2_DIGITS = new FieldComponent(\"%d\", \"[012]\\\\d|3[01]\", Calendar.DAY_OF_MONTH, \"%02d\");"
            ],
            [
                "DATE",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DATE = new AliasComponent(\"%D\", \"%m/%d/%y\");"
            ],
            [
                "DAY_OF_MONTH",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DAY_OF_MONTH = new FieldComponent(\"%e\", \"\\\\d|[12]\\\\d|3[01]\", Calendar.DAY_OF_MONTH, \"%2d\");"
            ],
            [
                "DATE_ISO8601",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DATE_ISO8601 = new AliasComponent(\"%F\", \"%Y-%m-%d\");"
            ],
            [
                "WEEK_BASED_YEAR_2_DIGITS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent WEEK_BASED_YEAR_2_DIGITS = new FieldComponent(\"%g\", \"\\\\d\\\\d\", Calendar.YEAR, \"%02d\");"
            ],
            [
                "WEEK_BASED_YEAR_4_DIGITS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent WEEK_BASED_YEAR_4_DIGITS = new FieldComponent(\"%G\", \"\\\\d{4}\", Calendar.YEAR, \"%04d\");"
            ],
            [
                "ABBREVIATED_MONTH_NAME_ALIAS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent ABBREVIATED_MONTH_NAME_ALIAS = new AliasComponent(\"%h\", \"%b\");"
            ],
            [
                "HOUR_OF_DAY",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent HOUR_OF_DAY = new FieldComponent(\"%H\", \"[01]\\\\d|2[0123]\", Calendar.HOUR_OF_DAY, \"%02d\");"
            ],
            [
                "HOUR",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent HOUR = new FieldComponent(\"%I\", \"0\\\\d|1[012]\", Calendar.HOUR, \"%02d\");"
            ],
            [
                "DAY_OF_YEAR",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DAY_OF_YEAR = new FieldComponent(\"%j\", \"[012]\\\\d\\\\d|3[0-5]\\\\d|36[0-6]\", Calendar.DAY_OF_YEAR, \"%03d\");"
            ],
            [
                "MILLISECOND",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent MILLISECOND = new FieldComponent(\"%k\", \"\\\\d{3}\", Calendar.MILLISECOND, \"%03d\");"
            ],
            [
                "EPOCH",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent EPOCH = new EpochComponent();"
            ],
            [
                "MONTH",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent MONTH = new FieldComponent(\"%m\", \"0[1-9]|1[012]\", Calendar.MONTH, -1, \"%02d\");"
            ],
            [
                "MINUTE",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent MINUTE = new FieldComponent(\"%M\", \"[0-5]\\\\d\", Calendar.MINUTE, \"%02d\");"
            ],
            [
                "NEW_LINE",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent NEW_LINE = new AliasComponent(\"%n\", \"\\n\");"
            ],
            [
                "AM_PM",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent AM_PM = new AMPMComponent();"
            ],
            [
                "LOCALE_CLOCK_TIME_12_HOUR",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent LOCALE_CLOCK_TIME_12_HOUR = new NotImplementedComponent(\"%r\", \"\");"
            ],
            [
                "HOUR_AND_MINUTE",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent HOUR_AND_MINUTE = new AliasComponent(\"%R\", \"%H:%M\");"
            ],
            [
                "SECOND",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent SECOND = new FieldComponent(\"%S\", \"[0-5]\\\\d|60\", Calendar.SECOND, \"%02d\");"
            ],
            [
                "TABULATION",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent TABULATION = new AliasComponent(\"%t\", \"\\t\");"
            ],
            [
                "TIME_ISO8601",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent TIME_ISO8601 = new AliasComponent(\"%T\", \"%H:%M:%S\");"
            ],
            [
                "DAY_OF_WEEK_1_7",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DAY_OF_WEEK_1_7 = new FieldComponent(\"%u\", \"[1-7]\", Calendar.DAY_OF_WEEK, -1, \"%1d\");"
            ],
            [
                "WEEK_OF_YEAR_FROM_SUNDAY",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent WEEK_OF_YEAR_FROM_SUNDAY = new FieldComponent(\"%U\", \"[0-4]\\\\d|5[0123]\", Calendar.WEEK_OF_YEAR, 1, \"%2d\");"
            ],
            [
                "WEEK_NUMBER_ISO8601",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent WEEK_NUMBER_ISO8601 = new NotImplementedComponent(\"%V\", \"0[1-9]|[2-4]\\\\d|5[0123]\");"
            ],
            [
                "DAY_OF_WEEK_0_6",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DAY_OF_WEEK_0_6 = new FieldComponent(\"%w\", \"[0-6]\", Calendar.DAY_OF_WEEK, \"%01d\");"
            ],
            [
                "WEEK_OF_YEAR_FROM_MONDAY",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent WEEK_OF_YEAR_FROM_MONDAY = new FieldComponent(\"%W\", \"[0-4]\\\\d|5[0123]\", Calendar.WEEK_OF_YEAR, \"%02d\");"
            ],
            [
                "LOCALE_DATE_REPRESENTATION",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent LOCALE_DATE_REPRESENTATION = new NotImplementedComponent(\"%x\", \"\");"
            ],
            [
                "LOCALE_TIME_REPRESENTATION",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent LOCALE_TIME_REPRESENTATION = new NotImplementedComponent(\"%X\", \"\");"
            ],
            [
                "YEAR_2_DIGITS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent YEAR_2_DIGITS = new FieldComponent(\"%y\", \"\\\\d\\\\d\", Calendar.YEAR, \"%02d\");"
            ],
            [
                "YEAR_4_DIGITS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent YEAR_4_DIGITS = new FieldComponent(\"%Y\", \"\\\\d{4}\", Calendar.YEAR, \"%04d\");"
            ],
            [
                "UTC_OFFSET",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent UTC_OFFSET = new UTCOffsetComponent();"
            ],
            [
                "LOCALE_TIME_ZONE_NAME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent LOCALE_TIME_ZONE_NAME = new NotImplementedComponent(\"%Z\", \"\\\\w*\");"
            ],
            [
                "PERCENT",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent PERCENT = new AliasComponent(\"%%\", \"%\");"
            ],
            [
                "jjbitVec0",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };"
            ],
            [
                "jjnextStates",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "static final int[] jjnextStates = { 5, 6, 8, 9, 13, 14 };"
            ],
            [
                "jjstrLiteralImages",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "public static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, \"\\133\", \"\\135\", null, null, null, null, null, null };"
            ],
            [
                "lexStateNames",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "public static final String[] lexStateNames = { \"DEFAULT\" };"
            ],
            [
                "jjtoToken",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "static final long[] jjtoToken = { 0xff01L };"
            ],
            [
                "jjtoSkip",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "static final long[] jjtoSkip = { 0x1eL };"
            ],
            [
                "jjbitVec0",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };"
            ],
            [
                "jjnextStates",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "static final int[] jjnextStates = { 54, 11, 12, 15, 17, 18, 1, 2, 5, 47, 52, 8, 9, 20, 21 };"
            ],
            [
                "jjstrLiteralImages",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "public static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, null, \"\\50\", \"\\51\", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null };"
            ],
            [
                "lexStateNames",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "public static final String[] lexStateNames = { \"DEFAULT\" };"
            ],
            [
                "jjtoToken",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "static final long[] jjtoToken = { 0xffffc01L };"
            ],
            [
                "jjtoSkip",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "static final long[] jjtoSkip = { 0x7eL };"
            ],
            [
                "XYZ_ATTR",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "public static final String XYZ_ATTR = \"xyz\";"
            ],
            [
                "WIDTH_ATTR",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "public static final String WIDTH_ATTR = \"ui.tikz.width\";"
            ],
            [
                "HEIGHT_ATTR",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "public static final String HEIGHT_ATTR = \"ui.tikz.height\";"
            ],
            [
                "DEFAULT_WIDTH",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "public static final double DEFAULT_WIDTH = 10;"
            ],
            [
                "DEFAULT_HEIGHT",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "public static final double DEFAULT_HEIGHT = 10;"
            ],
            [
                "DISPLAY_MIN_SIZE_IN_MM",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "public static final double DISPLAY_MIN_SIZE_IN_MM = 2;"
            ],
            [
                "DISPLAY_MAX_SIZE_IN_MM",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "public static final double DISPLAY_MAX_SIZE_IN_MM = 10;"
            ],
            [
                "jjbitVec0",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };"
            ],
            [
                "jjnextStates",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "static final int[] jjnextStates = { 21, 27, 8, 10, 11, 18, 19, 22, 23, 26, 1, 2, 13, 14 };"
            ],
            [
                "jjstrLiteralImages",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "public static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, null, \"\\133\", \"\\135\", \"\\173\", \"\\175\", \"\\72\", \"\\54\", \"\\75\", null, null, null, null, null, null, null, null, null, null, \"\\73\", null, null, null, null, null, null, null, null, null, \"\\137\" };"
            ],
            [
                "lexStateNames",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "public static final String[] lexStateNames = { \"DEFAULT\" };"
            ],
            [
                "jjtoToken",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "static final long[] jjtoToken = { 0x3ffffffc01L };"
            ],
            [
                "jjtoSkip",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "static final long[] jjtoSkip = { 0x7eL };"
            ],
            [
                "jjbitVec0",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };"
            ],
            [
                "jjnextStates",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "static final int[] jjnextStates = { 21, 22, 23, 17, 19, 2, 3, 5, 6, 8, 9 };"
            ],
            [
                "jjstrLiteralImages",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "public static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null };"
            ],
            [
                "lexStateNames",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "public static final String[] lexStateNames = { \"DEFAULT\" };"
            ],
            [
                "jjtoToken",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "static final long[] jjtoToken = { 0x3fffffffffffc9L };"
            ],
            [
                "jjtoSkip",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "static final long[] jjtoSkip = { 0x6L };"
            ],
            [
                "XMLNS",
                "org.graphstream.stream.file.gexf",
                "GEXF",
                "public static final String XMLNS = \"http://www.gexf.net/1.2draft\";"
            ],
            [
                "XMLNS_XSI",
                "org.graphstream.stream.file.gexf",
                "GEXF",
                "public static final String XMLNS_XSI = \"http://www.w3.org/2001/XMLSchema-instance\";"
            ],
            [
                "XMLNS_SL",
                "org.graphstream.stream.file.gexf",
                "GEXF",
                "public static final String XMLNS_SL = \"http://www.gexf.net/1.2draft http://www.gexf.net/1.2draft/gexf.xsd\";"
            ],
            [
                "XMLNS_VIZ",
                "org.graphstream.stream.file.gexf",
                "GEXF",
                "public static final String XMLNS_VIZ = \"http://www.gexf.net/1.2draft/viz\";"
            ],
            [
                "VERSION",
                "org.graphstream.stream.file.gexf",
                "GEXF",
                "public static final String VERSION = \"1.2\";"
            ],
            [
                "BUFFER_SIZE",
                "org.graphstream.stream.file.dgs",
                "DGSParser",
                "protected static final int BUFFER_SIZE = 4096;"
            ],
            [
                "ARRAY_OPEN",
                "org.graphstream.stream.file.dgs",
                "DGSParser",
                "public static final int ARRAY_OPEN = '{';"
            ],
            [
                "ARRAY_CLOSE",
                "org.graphstream.stream.file.dgs",
                "DGSParser",
                "public static final int ARRAY_CLOSE = '}';"
            ],
            [
                "MAP_OPEN",
                "org.graphstream.stream.file.dgs",
                "DGSParser",
                "public static final int MAP_OPEN = '[';"
            ],
            [
                "MAP_CLOSE",
                "org.graphstream.stream.file.dgs",
                "DGSParser",
                "public static final int MAP_CLOSE = ']';"
            ],
            [
                "gradientId",
                "org.graphstream.stream.file",
                "FileSinkSVG2",
                "static int gradientId = 0;"
            ],
            [
                "gradientId",
                "org.graphstream.stream.file",
                "SVGStyle",
                "static int gradientId = 0;"
            ],
            [
                "TIME_PREFIX",
                "org.graphstream.stream",
                "Timeline",
                "public static final String TIME_PREFIX = \"time\";"
            ],
            [
                "SYNC_DISABLE_KEY",
                "org.graphstream.stream.sync",
                "SinkTime",
                "public static final String SYNC_DISABLE_KEY = \"org.graphstream.stream.sync.disable\";"
            ],
            [
                "disableSync",
                "org.graphstream.stream.sync",
                "SinkTime",
                "protected static final boolean disableSync;"
            ],
            [
                "LIGHT_YELLOW",
                "org.graphstream.stream.netstream",
                "NetStreamReceiver",
                "protected static final String LIGHT_YELLOW = \"\u001b[33;1m\";"
            ],
            [
                "RESET",
                "org.graphstream.stream.netstream",
                "NetStreamReceiver",
                "protected static final String RESET = \"\u001b[0m\";"
            ],
            [
                "BUFFER_INITIAL_SIZE",
                "org.graphstream.stream.netstream",
                "NetStreamReceiver",
                "protected static final int BUFFER_INITIAL_SIZE = 8192;"
            ],
            [
                "BUFFER_INITIAL_SIZE",
                "org.graphstream.stream.netstream",
                "IncomingBuffer",
                "protected static final int BUFFER_INITIAL_SIZE = 8192;"
            ],
            [
                "EVENT_GETVERSION",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_GETVERSION = 0x00;"
            ],
            [
                "EVENT_START",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_START = 0x01;"
            ],
            [
                "EVENT_END",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_END = 0x02;"
            ],
            [
                "EVENT_ADD_NODE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_ADD_NODE = 0x10;"
            ],
            [
                "EVENT_DEL_NODE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_DEL_NODE = 0x11;"
            ],
            [
                "EVENT_ADD_EDGE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_ADD_EDGE = 0x12;"
            ],
            [
                "EVENT_DEL_EDGE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_DEL_EDGE = 0x13;"
            ],
            [
                "EVENT_STEP",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_STEP = 0x14;"
            ],
            [
                "EVENT_CLEARED",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_CLEARED = 0x15;"
            ],
            [
                "EVENT_ADD_GRAPH_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_ADD_GRAPH_ATTR = 0x16;"
            ],
            [
                "EVENT_CHG_GRAPH_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_CHG_GRAPH_ATTR = 0x17;"
            ],
            [
                "EVENT_DEL_GRAPH_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_DEL_GRAPH_ATTR = 0x18;"
            ],
            [
                "EVENT_ADD_NODE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_ADD_NODE_ATTR = 0x19;"
            ],
            [
                "EVENT_CHG_NODE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_CHG_NODE_ATTR = 0x1a;"
            ],
            [
                "EVENT_DEL_NODE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_DEL_NODE_ATTR = 0x1b;"
            ],
            [
                "EVENT_ADD_EDGE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_ADD_EDGE_ATTR = 0x1c;"
            ],
            [
                "EVENT_CHG_EDGE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_CHG_EDGE_ATTR = 0x1d;"
            ],
            [
                "EVENT_DEL_EDGE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_DEL_EDGE_ATTR = 0x1e;"
            ],
            [
                "TYPE_UNKNOWN",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_UNKNOWN = 0x00;"
            ],
            [
                "TYPE_BOOLEAN",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_BOOLEAN = 0x50;"
            ],
            [
                "TYPE_BOOLEAN_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_BOOLEAN_ARRAY = 0x51;"
            ],
            [
                "TYPE_BYTE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_BYTE = 0x52;"
            ],
            [
                "TYPE_BYTE_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_BYTE_ARRAY = 0x53;"
            ],
            [
                "TYPE_SHORT",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_SHORT = 0x54;"
            ],
            [
                "TYPE_SHORT_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_SHORT_ARRAY = 0x55;"
            ],
            [
                "TYPE_INT",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_INT = 0x56;"
            ],
            [
                "TYPE_INT_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_INT_ARRAY = 0x57;"
            ],
            [
                "TYPE_LONG",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_LONG = 0x58;"
            ],
            [
                "TYPE_LONG_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_LONG_ARRAY = 0x59;"
            ],
            [
                "TYPE_FLOAT",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_FLOAT = 0x5a;"
            ],
            [
                "TYPE_FLOAT_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_FLOAT_ARRAY = 0x5b;"
            ],
            [
                "TYPE_DOUBLE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_DOUBLE = 0x5c;"
            ],
            [
                "TYPE_DOUBLE_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_DOUBLE_ARRAY = 0x5d;"
            ],
            [
                "TYPE_STRING",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_STRING = 0x5e;"
            ],
            [
                "TYPE_RAW",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_RAW = 0x5f;"
            ],
            [
                "TYPE_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static byte TYPE_ARRAY = 0x60;"
            ],
            [
                "TYPE_NULL",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_NULL = 0x61;"
            ],
            [
                "COMMAND",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int COMMAND = 0x70;"
            ],
            [
                "NO_OPTIONS",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public final static int NO_OPTIONS = 0;"
            ],
            [
                "ENCODE",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public final static int ENCODE = 1;"
            ],
            [
                "DECODE",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public final static int DECODE = 0;"
            ],
            [
                "GZIP",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public final static int GZIP = 2;"
            ],
            [
                "DONT_GUNZIP",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public final static int DONT_GUNZIP = 4;"
            ],
            [
                "DO_BREAK_LINES",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public final static int DO_BREAK_LINES = 8;"
            ],
            [
                "URL_SAFE",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public final static int URL_SAFE = 16;"
            ],
            [
                "ORDERED",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public final static int ORDERED = 32;"
            ],
            [
                "INITIAL_EDGE_CAPACITY",
                "org.graphstream.graph.implementations",
                "AdjacencyListNode",
                "protected static final int INITIAL_EDGE_CAPACITY;"
            ],
            [
                "GROWTH_FACTOR",
                "org.graphstream.graph.implementations",
                "AdjacencyListNode",
                "protected static final double GROWTH_FACTOR = 1.1;"
            ],
            [
                "I_EDGE",
                "org.graphstream.graph.implementations",
                "AdjacencyListNode",
                "protected static final char I_EDGE = 0;"
            ],
            [
                "IO_EDGE",
                "org.graphstream.graph.implementations",
                "AdjacencyListNode",
                "protected static final char IO_EDGE = 1;"
            ],
            [
                "O_EDGE",
                "org.graphstream.graph.implementations",
                "AdjacencyListNode",
                "protected static final char O_EDGE = 2;"
            ],
            [
                "GROW_FACTOR",
                "org.graphstream.graph.implementations",
                "AdjacencyListGraph",
                "public static final double GROW_FACTOR = 1.1;"
            ],
            [
                "DEFAULT_NODE_CAPACITY",
                "org.graphstream.graph.implementations",
                "AdjacencyListGraph",
                "public static final int DEFAULT_NODE_CAPACITY = 128;"
            ],
            [
                "DEFAULT_EDGE_CAPACITY",
                "org.graphstream.graph.implementations",
                "AdjacencyListGraph",
                "public static final int DEFAULT_EDGE_CAPACITY = 1024;"
            ]
        ],
        "tokensMethodJavadocValues": [],
        "tokensMethodArguments": [
            [
                "x",
                "",
                "double"
            ],
            [
                "y",
                "",
                "double"
            ]
        ],
        "tokensMethodVariablesNonPrivateNonStaticNonVoidMethods": [
            [
                "transformPxToGu",
                "org.graphstream.ui.view",
                "Camera",
                "Point3 transformPxToGu(double x, double y)"
            ],
            [
                "getMetrics",
                "org.graphstream.ui.view",
                "Camera",
                "GraphMetrics getMetrics()"
            ],
            [
                "getViewCenter",
                "org.graphstream.ui.view",
                "Camera",
                "Point3 getViewCenter()"
            ],
            [
                "getViewPercent",
                "org.graphstream.ui.view",
                "Camera",
                "double getViewPercent()"
            ],
            [
                "getViewRotation",
                "org.graphstream.ui.view",
                "Camera",
                "double getViewRotation()"
            ],
            [
                "isVisible",
                "org.graphstream.ui.view",
                "Camera",
                "boolean isVisible(GraphicElement element)"
            ],
            [
                "getGraphDimension",
                "org.graphstream.ui.view",
                "Camera",
                "double getGraphDimension()"
            ],
            [
                "transformGuToPx",
                "org.graphstream.ui.view",
                "Camera",
                "Point3 transformGuToPx(double x, double y, double z)"
            ],
            [
                "equals",
                "org.graphstream.ui.geom",
                "Point3",
                "public boolean equals(Object arg0)"
            ],
            [
                "isZero",
                "org.graphstream.ui.geom",
                "Point3",
                "public boolean isZero()"
            ],
            [
                "distance",
                "org.graphstream.ui.geom",
                "Point3",
                "public double distance(Point3 arg0)"
            ],
            [
                "interpolate",
                "org.graphstream.ui.geom",
                "Point3",
                "public Point3 interpolate(Point3 arg0, double arg1)"
            ],
            [
                "distance",
                "org.graphstream.ui.geom",
                "Point3",
                "public double distance(double arg0, double arg1, double arg2)"
            ],
            [
                "hashCode",
                "org.graphstream.ui.geom",
                "Point3",
                "public int hashCode()"
            ],
            [
                "toString",
                "org.graphstream.ui.geom",
                "Point3",
                "public String toString()"
            ],
            [
                "isZero",
                "org.graphstream.ui.geom",
                "Point2",
                "public boolean isZero()"
            ],
            [
                "hashCode",
                "org.graphstream.ui.geom",
                "Point2",
                "public int hashCode()"
            ],
            [
                "interpolate",
                "org.graphstream.ui.geom",
                "Point2",
                "public Point2 interpolate(Point2 arg0, double arg1)"
            ],
            [
                "toString",
                "org.graphstream.ui.geom",
                "Point2",
                "public String toString()"
            ],
            [
                "equals",
                "org.graphstream.ui.geom",
                "Point2",
                "public boolean equals(Object arg0)"
            ],
            [
                "distance",
                "org.graphstream.ui.geom",
                "Point2",
                "public double distance(Point2 arg0)"
            ],
            [
                "clone",
                "java.lang",
                "Object",
                "protected native Object clone() throws CloneNotSupportedException"
            ],
            [
                "getClass",
                "java.lang",
                "Object",
                "public final native Class<? extends Object> getClass()"
            ],
            [
                "toString",
                "java.lang",
                "Object",
                "public String toString()"
            ],
            [
                "equals",
                "java.lang",
                "Object",
                "public boolean equals(Object arg0)"
            ],
            [
                "hashCode",
                "java.lang",
                "Object",
                "public native int hashCode()"
            ]
        ],
        "tokensMethodVariablesNonPrivateNonStaticAttributes": [
            [
                "z",
                "org.graphstream.ui.geom",
                "Point3",
                "public double z;"
            ],
            [
                "x",
                "org.graphstream.ui.geom",
                "Point2",
                "public double x;"
            ],
            [
                "y",
                "org.graphstream.ui.geom",
                "Point2",
                "public double y;"
            ]
        ],
        "tokensOracleVariablesNonPrivateNonStaticNonVoidMethods": [],
        "tokensOracleVariablesNonPrivateNonStaticAttributes": []
    },
    {
        "id": 3004,
        "oracle": ";",
        "oracleType": "NORMAL_POST",
        "projectName": "gs-core-1.3",
        "packageName": "org.graphstream.ui.view",
        "className": "Camera",
        "javadocTag": "@return The resulting points in graph units.",
        "methodJavadoc": "    /**\n\t * Return the given point in pixels converted in graph units (GU) using the\n\t * inverse transformation of the current projection matrix. The inverse\n\t * matrix is computed only once each time a new projection matrix is\n\t * created.\n\t * \n\t * @param x\n\t *            The source point abscissa in pixels.\n\t * @param y\n\t *            The source point ordinate in pixels.\n\t * @return The resulting points in graph units.\n\t */",
        "methodSourceCode": "Point3 transformPxToGu(double x, double y);",
        "classJavadoc": "/**\n     * The view centre (a point in graph units).\n     *\n     * @return The view centre.\n     */",
        "classSourceCode": "/*\n * Copyright 2006 - 2015\n *     Stefan Balev     <stefan.balev@graphstream-project.org>\n *     Julien Baudry    <julien.baudry@graphstream-project.org>\n *     Antoine Dutot    <antoine.dutot@graphstream-project.org>\n *     Yoann Pign\u00e9      <yoann.pigne@graphstream-project.org>\n *     Guilhelm Savin   <guilhelm.savin@graphstream-project.org>\n * \n * This file is part of GraphStream <http://graphstream-project.org>.\n * \n * GraphStream is a library whose purpose is to handle static or dynamic\n * graph, create them from scratch, file or any source and display them.\n * \n * This program is free software distributed under the terms of two licenses, the\n * CeCILL-C license that fits European law, and the GNU Lesser General Public\n * License. You can  use, modify and/ or redistribute the software under the terms\n * of the CeCILL-C license as circulated by CEA, CNRS and INRIA at the following\n * URL <http://www.cecill.info> or under the terms of the GNU LGPL as published by\n * the Free Software Foundation, either version 3 of the License, or (at your\n * option) any later version.\n * \n * This program is distributed in the hope that it will be useful, but WITHOUT ANY\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A\n * PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more details.\n * \n * You should have received a copy of the GNU Lesser General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n * \n * The fact that you are presently reading this means that you have had\n * knowledge of the CeCILL-C and LGPL licenses and that you accept their terms.\n */\npackage org.graphstream.ui.view;\n\nimport org.graphstream.ui.geom.Point3;\nimport org.graphstream.ui.graphicGraph.GraphicElement;\nimport org.graphstream.ui.swingViewer.util.GraphMetrics;\n\npublic interface Camera {\n\t/**\n\t * The view centre (a point in graph units).\n\t * \n\t * @return The view centre.\n\t */\n\tPoint3 getViewCenter();\n\n\t/**\n\t * Change the view centre.\n\t * \n\t * @param x\n\t *            The new abscissa.\n\t * @param y\n\t *            The new ordinate.\n\t * @param z\n\t *            The new depth.\n\t */\n\tvoid setViewCenter(double x, double y, double z);\n\n\t/**\n\t * The portion of the graph visible.\n\t * \n\t * @return A real for which value 1 means the graph is fully visible and\n\t *         uses the whole view port.\n\t */\n\tdouble getViewPercent();\n\n\t/**\n\t * Zoom the view.\n\t * \n\t * @param percent\n\t *            Percent of the graph visible.\n\t */\n\tvoid setViewPercent(double percent);\n\n\t/**\n\t * The current rotation angle.\n\t * \n\t * @return The rotation angle in degrees.\n\t */\n\tdouble getViewRotation();\n\n\t/**\n\t * Rotate the view around its centre point by a given theta angles (in\n\t * degrees).\n\t * \n\t * @param theta\n\t *            The rotation angle in degrees.\n\t */\n\tvoid setViewRotation(double theta);\n\n\t/**\n\t * A number in GU that gives the approximate graph size (often the diagonal\n\t * of the graph). This allows to compute displacements in the graph as\n\t * percent of its overall size. For example this can be used to move the\n\t * view centre.\n\t * \n\t * @return The graph estimated size in graph units.\n\t */\n\tdouble getGraphDimension();\n\n\t/**\n\t * Remove the specified graph view port.\n\t * \n\t * @see #setGraphViewport(double, double, double, double)\n\t */\n\tvoid removeGraphViewport();\n\n\t/**\n\t * Specify exactly the minimum and maximum points in GU that are visible\n\t * (more points may be visible due to aspect-ratio constraints).\n\t * \n\t * @param minx\n\t *            The minimum abscissa visible.\n\t * @param miny\n\t *            The minimum ordinate visible.\n\t * @param maxx\n\t *            The maximum abscissa visible.\n\t * @param maxy\n\t *            The maximum abscissa visible.\n\t * @see #removeGraphViewport()\n\t */\n\tvoid setGraphViewport(double minx, double miny, double maxx, double maxy);\n\n\t/**\n\t * Reset the view to the automatic mode.\n\t */\n\tvoid resetView();\n\n\t/**\n\t * Set the bounds of the graphic graph in GU. Called by the Viewer.\n\t * \n\t * @param minx\n\t *            Lowest abscissa.\n\t * @param miny\n\t *            Lowest ordinate.\n\t * @param minz\n\t *            Lowest depth.\n\t * @param maxx\n\t *            Highest abscissa.\n\t * @param maxy\n\t *            Highest ordinate.\n\t * @param maxz\n\t *            Highest depth.\n\t */\n\tvoid setBounds(double minx, double miny, double minz, double maxx,\n\t\t\tdouble maxy, double maxz);\n\n\t/**\n\t * Get the {@link org.graphstream.ui.swingViewer.util.GraphMetrics} object linked to this Camera. It can be used\n\t * to convert pixels to graphic units and vice versa.\n\t * \n\t * @return a GraphMetrics instance\n\t */\n\tGraphMetrics getMetrics();\n\t\n\t/**\n\t * Enable or disable automatic adjustment of the view to see the entire\n\t * graph.\n\t * \n\t * @param on\n\t *            If true, automatic adjustment is enabled.\n\t */\n\tvoid setAutoFitView(boolean on);\n\n\t/**\n\t * Transform a point in graph units into pixels.\n\t * \n\t * @return The transformed point.\n\t */\n\tPoint3 transformGuToPx(double x, double y, double z);\n\t\n\t/**\n\t * Return the given point in pixels converted in graph units (GU) using the\n\t * inverse transformation of the current projection matrix. The inverse\n\t * matrix is computed only once each time a new projection matrix is\n\t * created.\n\t * \n\t * @param x\n\t *            The source point abscissa in pixels.\n\t * @param y\n\t *            The source point ordinate in pixels.\n\t * @return The resulting points in graph units.\n\t */\n\tPoint3 transformPxToGu(double x, double y);\n\t\n\t/**\n\t * True if the element would be visible on screen. The method used is to\n\t * transform the center of the element (which is always in graph units)\n\t * using the camera actual transformation to put it in pixel units. Then to\n\t * look in the style sheet the size of the element and to test if its\n\t * enclosing rectangle intersects the view port. For edges, its two nodes\n\t * are used.\n\t * \n\t * @param element\n\t *            The element to test.\n\t * @return True if the element is visible and therefore must be rendered.\n\t */\n\tboolean isVisible(GraphicElement element);\n}",
        "tokensGeneralGrammar": [
            "null",
            "true",
            "false",
            ",",
            ".",
            ":",
            ";",
            "?",
            "(",
            ")",
            "jdVar",
            "stream",
            "Arrays",
            "allMatch",
            "noneMatch",
            "anyMatch",
            "~",
            ">>",
            "<<",
            ">>>",
            "|",
            "&",
            "^",
            "+",
            "-",
            "/",
            "*",
            "%",
            "&&",
            "||",
            ">=",
            "<=",
            ">",
            "<",
            "==",
            "!=",
            "instanceof",
            "class",
            "methodResultID",
            "this"
        ],
        "tokensGeneralValuesGlobalDictionary": [
            [
                "0",
                "int"
            ],
            [
                "1",
                "int"
            ],
            [
                "-1",
                "int"
            ],
            [
                "0.0",
                "double"
            ],
            [
                "1.0",
                "double"
            ],
            [
                "-1.0",
                "double"
            ],
            [
                "\"\"",
                "String"
            ],
            [
                "\" \"",
                "String"
            ]
        ],
        "tokensProjectClasses": [
            [
                "DefaultCamera",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "GradientFactory",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "GraphMetrics",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "Graphics2DOutput",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "ImageCache",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "StrokeFactory",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "FontCache",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "FontSlot",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "DefaultView",
                "org.graphstream.ui.swingViewer"
            ],
            [
                "SpriteRenderer",
                "org.graphstream.ui.swingViewer.basicRenderer"
            ],
            [
                "ElementRenderer",
                "org.graphstream.ui.swingViewer.basicRenderer"
            ],
            [
                "NodeRenderer",
                "org.graphstream.ui.swingViewer.basicRenderer"
            ],
            [
                "Arrow",
                "org.graphstream.ui.swingViewer.basicRenderer.shapes"
            ],
            [
                "Shape",
                "org.graphstream.ui.swingViewer.basicRenderer.shapes"
            ],
            [
                "EdgeRenderer",
                "org.graphstream.ui.swingViewer.basicRenderer"
            ],
            [
                "SwingBasicGraphRenderer",
                "org.graphstream.ui.swingViewer.basicRenderer"
            ],
            [
                "GraphRendererBase",
                "org.graphstream.ui.swingViewer"
            ],
            [
                "GraphRenderer",
                "org.graphstream.ui.swingViewer"
            ],
            [
                "LayerRenderer",
                "org.graphstream.ui.swingViewer"
            ],
            [
                "ViewPanel",
                "org.graphstream.ui.swingViewer"
            ],
            [
                "Layouts",
                "org.graphstream.ui.layout"
            ],
            [
                "Layout",
                "org.graphstream.ui.layout"
            ],
            [
                "LayoutRunner",
                "org.graphstream.ui.layout"
            ],
            [
                "NodeParticle",
                "org.graphstream.ui.layout.springbox"
            ],
            [
                "GraphCellData",
                "org.graphstream.ui.layout.springbox"
            ],
            [
                "EdgeSpring",
                "org.graphstream.ui.layout.springbox"
            ],
            [
                "Energies",
                "org.graphstream.ui.layout.springbox"
            ],
            [
                "BarnesHutLayout",
                "org.graphstream.ui.layout.springbox"
            ],
            [
                "LinLog",
                "org.graphstream.ui.layout.springbox.implementations"
            ],
            [
                "LinLogNodeParticle",
                "org.graphstream.ui.layout.springbox.implementations"
            ],
            [
                "SpringBoxNodeParticle",
                "org.graphstream.ui.layout.springbox.implementations"
            ],
            [
                "SpringBox",
                "org.graphstream.ui.layout.springbox.implementations"
            ],
            [
                "Point2",
                "org.graphstream.ui.geom"
            ],
            [
                "Vector2",
                "org.graphstream.ui.geom"
            ],
            [
                "Vector3",
                "org.graphstream.ui.geom"
            ],
            [
                "Point3",
                "org.graphstream.ui.geom"
            ],
            [
                "ViewerListener",
                "org.graphstream.ui.view"
            ],
            [
                "MouseManager",
                "org.graphstream.ui.view.util"
            ],
            [
                "ShortcutManager",
                "org.graphstream.ui.view.util"
            ],
            [
                "DefaultShortcutManager",
                "org.graphstream.ui.view.util"
            ],
            [
                "FpsCounter",
                "org.graphstream.ui.view.util"
            ],
            [
                "CubicCurve",
                "org.graphstream.ui.view.util"
            ],
            [
                "DefaultMouseManager",
                "org.graphstream.ui.view.util"
            ],
            [
                "Selection",
                "org.graphstream.ui.view"
            ],
            [
                "ViewerPipe",
                "org.graphstream.ui.view"
            ],
            [
                "Viewer",
                "org.graphstream.ui.view"
            ],
            [
                "View",
                "org.graphstream.ui.view"
            ],
            [
                "Camera",
                "org.graphstream.ui.view"
            ],
            [
                "Sprite",
                "org.graphstream.ui.spriteManager"
            ],
            [
                "InvalidSpriteIDException",
                "org.graphstream.ui.spriteManager"
            ],
            [
                "SpriteManager",
                "org.graphstream.ui.spriteManager"
            ],
            [
                "SpriteFactory",
                "org.graphstream.ui.spriteManager"
            ],
            [
                "StyleGroupListener",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "Colors",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "Values",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "StyleSheetListener",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "StyleSheetParserTokenManager",
                "org.graphstream.ui.graphicGraph.stylesheet.parser"
            ],
            [
                "StyleSheetParserConstants",
                "org.graphstream.ui.graphicGraph.stylesheet.parser"
            ],
            [
                "StyleSheetParser",
                "org.graphstream.ui.graphicGraph.stylesheet.parser"
            ],
            [
                "Style",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "StyleSheet",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "StyleConstants",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "Selector",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "Value",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "Rule",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "GraphicNode",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "StyleGroup",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphPosLengthUtils",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphicEdge",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphicElementChangeListener",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphicGraph",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "StyleGroupSet",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphicSprite",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphicElement",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "VerboseSink",
                "org.graphstream.util"
            ],
            [
                "GraphListeners",
                "org.graphstream.util"
            ],
            [
                "Environment",
                "org.graphstream.util"
            ],
            [
                "GraphDiff",
                "org.graphstream.util"
            ],
            [
                "Filters",
                "org.graphstream.util"
            ],
            [
                "FilteredEdgeIterator",
                "org.graphstream.util"
            ],
            [
                "Parser",
                "org.graphstream.util.parser"
            ],
            [
                "ParserFactory",
                "org.graphstream.util.parser"
            ],
            [
                "TokenMgrError",
                "org.graphstream.util.parser"
            ],
            [
                "ParseException",
                "org.graphstream.util.parser"
            ],
            [
                "SimpleCharStream",
                "org.graphstream.util.parser"
            ],
            [
                "Token",
                "org.graphstream.util.parser"
            ],
            [
                "ISODateIO",
                "org.graphstream.util.time"
            ],
            [
                "ISODateComponent",
                "org.graphstream.util.time"
            ],
            [
                "FilteredNodeIterator",
                "org.graphstream.util"
            ],
            [
                "FixedArrayList",
                "org.graphstream.util.set"
            ],
            [
                "StepCounter",
                "org.graphstream.util"
            ],
            [
                "GraphSpells",
                "org.graphstream.util.cumulative"
            ],
            [
                "CumulativeAttributes",
                "org.graphstream.util.cumulative"
            ],
            [
                "CumulativeSpells",
                "org.graphstream.util.cumulative"
            ],
            [
                "Filter",
                "org.graphstream.util"
            ],
            [
                "PipeAdapter",
                "org.graphstream.stream"
            ],
            [
                "GraphParseException",
                "org.graphstream.stream"
            ],
            [
                "ElementSink",
                "org.graphstream.stream"
            ],
            [
                "URLSource",
                "org.graphstream.stream.net"
            ],
            [
                "HTTPSource",
                "org.graphstream.stream.net"
            ],
            [
                "SourceAdapter",
                "org.graphstream.stream"
            ],
            [
                "AttributeSink",
                "org.graphstream.stream"
            ],
            [
                "GMLParserConstants",
                "org.graphstream.stream.file.gml"
            ],
            [
                "GMLParserTokenManager",
                "org.graphstream.stream.file.gml"
            ],
            [
                "GMLContext",
                "org.graphstream.stream.file.gml"
            ],
            [
                "Graphics",
                "org.graphstream.stream.file.gml"
            ],
            [
                "KeyValues",
                "org.graphstream.stream.file.gml"
            ],
            [
                "GMLParser",
                "org.graphstream.stream.file.gml"
            ],
            [
                "FileSinkGraphML",
                "org.graphstream.stream.file"
            ],
            [
                "TLPParserConstants",
                "org.graphstream.stream.file.tlp"
            ],
            [
                "TLPParser",
                "org.graphstream.stream.file.tlp"
            ],
            [
                "TLPParserTokenManager",
                "org.graphstream.stream.file.tlp"
            ],
            [
                "FileSinkFactory",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceEdge",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkBase",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkTikZ",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceGEXF",
                "org.graphstream.stream.file"
            ],
            [
                "DOTParser",
                "org.graphstream.stream.file.dot"
            ],
            [
                "DOTParserConstants",
                "org.graphstream.stream.file.dot"
            ],
            [
                "DOTParserTokenManager",
                "org.graphstream.stream.file.dot"
            ],
            [
                "FileSink",
                "org.graphstream.stream.file"
            ],
            [
                "PajekContext",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "Graphics",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "NodeGraphics",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "EdgeGraphics",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "EdgeMatrix",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "PajekParserTokenManager",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "PajekParserConstants",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "FileSourceXML",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkBaseFiltered",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkDOT",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceParser",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkDGSFiltered",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceDOT",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceDGS1And2",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceGraphML",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceFactory",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkImages",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkDynamicGML",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkSVG",
                "org.graphstream.stream.file"
            ],
            [
                "GEXFSpell",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "SmartXMLWriter",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFElement",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFEdges",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFAttValues",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFEdge",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFSpells",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFAttValue",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFNodes",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFNode",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFMeta",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFAttributes",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXF",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFGraph",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFAttribute",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "OldFileSourceDGS",
                "org.graphstream.stream.file.dgs"
            ],
            [
                "DGSParser",
                "org.graphstream.stream.file.dgs"
            ],
            [
                "FileSourceBase",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkGML",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceDGS",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkDGSUtility",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceTLP",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkSVG2",
                "org.graphstream.stream.file"
            ],
            [
                "FileSource",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceNCol",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourcePajek",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceGPX",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceLGL",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkGEXF2",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceGML",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkGEXF",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkDGS",
                "org.graphstream.stream.file"
            ],
            [
                "ProxyPipe",
                "org.graphstream.stream"
            ],
            [
                "Sink",
                "org.graphstream.stream"
            ],
            [
                "Timeline",
                "org.graphstream.stream"
            ],
            [
                "Pipe",
                "org.graphstream.stream"
            ],
            [
                "SinkAdapter",
                "org.graphstream.stream"
            ],
            [
                "Replayable",
                "org.graphstream.stream"
            ],
            [
                "Source",
                "org.graphstream.stream"
            ],
            [
                "AnnotatedSink",
                "org.graphstream.stream"
            ],
            [
                "GraphReplay",
                "org.graphstream.stream"
            ],
            [
                "AttributePipe",
                "org.graphstream.stream"
            ],
            [
                "SinkTime",
                "org.graphstream.stream.sync"
            ],
            [
                "SourceTime",
                "org.graphstream.stream.sync"
            ],
            [
                "PipeBase",
                "org.graphstream.stream"
            ],
            [
                "ThreadProxyPipe",
                "org.graphstream.stream.thread"
            ],
            [
                "ThreadProxyPipeOld",
                "org.graphstream.stream.thread"
            ],
            [
                "RMISource",
                "org.graphstream.stream.rmi"
            ],
            [
                "RMIAdapterOut",
                "org.graphstream.stream.rmi"
            ],
            [
                "RMISink",
                "org.graphstream.stream.rmi"
            ],
            [
                "RMIAdapterIn",
                "org.graphstream.stream.rmi"
            ],
            [
                "SourceBase",
                "org.graphstream.stream"
            ],
            [
                "NetStreamDecoder",
                "org.graphstream.stream.netstream"
            ],
            [
                "NetStreamReceiver",
                "org.graphstream.stream.netstream"
            ],
            [
                "NetStreamConstants",
                "org.graphstream.stream.netstream"
            ],
            [
                "NetStreamSender",
                "org.graphstream.stream.netstream"
            ],
            [
                "DefaultNetStreamDecoder",
                "org.graphstream.stream.netstream"
            ],
            [
                "Base64",
                "org.graphstream.stream.netstream.packing"
            ],
            [
                "NetStreamUnpacker",
                "org.graphstream.stream.netstream.packing"
            ],
            [
                "Base64Packer",
                "org.graphstream.stream.netstream.packing"
            ],
            [
                "Base64Unpacker",
                "org.graphstream.stream.netstream.packing"
            ],
            [
                "NetStreamPacker",
                "org.graphstream.stream.netstream.packing"
            ],
            [
                "AttributePredicate",
                "org.graphstream.stream"
            ],
            [
                "Element",
                "org.graphstream.graph"
            ],
            [
                "Node",
                "org.graphstream.graph"
            ],
            [
                "BreadthFirstIterator",
                "org.graphstream.graph"
            ],
            [
                "Graph",
                "org.graphstream.graph"
            ],
            [
                "EdgeRejectedException",
                "org.graphstream.graph"
            ],
            [
                "CompoundAttribute",
                "org.graphstream.graph"
            ],
            [
                "Structure",
                "org.graphstream.graph"
            ],
            [
                "DepthFirstIterator",
                "org.graphstream.graph"
            ],
            [
                "NullAttributeException",
                "org.graphstream.graph"
            ],
            [
                "IdAlreadyInUseException",
                "org.graphstream.graph"
            ],
            [
                "EdgeFactory",
                "org.graphstream.graph"
            ],
            [
                "ElementNotFoundException",
                "org.graphstream.graph"
            ],
            [
                "OneAttributeElement",
                "org.graphstream.graph.implementations"
            ],
            [
                "AdjacencyListNode",
                "org.graphstream.graph.implementations"
            ],
            [
                "SingleNode",
                "org.graphstream.graph.implementations"
            ],
            [
                "AbstractElement",
                "org.graphstream.graph.implementations"
            ],
            [
                "AdjacencyListGraph",
                "org.graphstream.graph.implementations"
            ],
            [
                "AbstractNode",
                "org.graphstream.graph.implementations"
            ],
            [
                "DefaultGraph",
                "org.graphstream.graph.implementations"
            ],
            [
                "MultiGraph",
                "org.graphstream.graph.implementations"
            ],
            [
                "Graphs",
                "org.graphstream.graph.implementations"
            ],
            [
                "SingleGraph",
                "org.graphstream.graph.implementations"
            ],
            [
                "MultiNode",
                "org.graphstream.graph.implementations"
            ],
            [
                "AbstractGraph",
                "org.graphstream.graph.implementations"
            ],
            [
                "AbstractEdge",
                "org.graphstream.graph.implementations"
            ],
            [
                "GraphFactory",
                "org.graphstream.graph"
            ],
            [
                "NodeFactory",
                "org.graphstream.graph"
            ],
            [
                "Edge",
                "org.graphstream.graph"
            ],
            [
                "Path",
                "org.graphstream.graph"
            ]
        ],
        "tokensProjectClassesNonPrivateStaticNonVoidMethods": [
            [
                "gradientInArea",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static Paint gradientInArea(int x0, int y0, int width, int height, Style style)"
            ],
            [
                "linearGradientFromStyle",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static Paint linearGradientFromStyle(float x0, float y0, float x1, float y1, Style style)"
            ],
            [
                "radialGradientFromStyle",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static Paint radialGradientFromStyle(float cx, float cy, float radius, Style style)"
            ],
            [
                "radialGradientFromStyle",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static Paint radialGradientFromStyle(float cx, float cy, float radius, float fx, float fy, Style style)"
            ],
            [
                "createFractions",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "protected static float[] createFractions(Style style)"
            ],
            [
                "createColors",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "protected static Color[] createColors(Style style)"
            ],
            [
                "defaultImageCache",
                "org.graphstream.ui.swingViewer.util",
                "ImageCache",
                "public static ImageCache defaultImageCache()"
            ],
            [
                "generateStroke",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "public static Stroke generateStroke(Style style, GraphMetrics metrics)"
            ],
            [
                "generatePlainStroke",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "protected static Stroke generatePlainStroke(Style style, GraphMetrics metrics)"
            ],
            [
                "generateDotsStroke",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "protected static Stroke generateDotsStroke(Style style, GraphMetrics metrics)"
            ],
            [
                "generateDashesStroke",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "protected static Stroke generateDashesStroke(Style style, GraphMetrics metrics)"
            ],
            [
                "defaultFontCache",
                "org.graphstream.ui.swingViewer.util",
                "FontCache",
                "public static FontCache defaultFontCache()"
            ],
            [
                "newLayoutAlgorithm",
                "org.graphstream.ui.layout",
                "Layouts",
                "public static Layout newLayoutAlgorithm()"
            ],
            [
                "eval",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "public static double eval(double x0, double x1, double x2, double x3, double t)"
            ],
            [
                "eval",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "public static Point2 eval(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t)"
            ],
            [
                "eval",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "public static Point2D.Double eval(Point2D.Double p0, Point2D.Double p1, Point2D.Double p2, Point2D.Double p3, double t)"
            ],
            [
                "eval",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "public static Point2 eval(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t, Point2 result)"
            ],
            [
                "derivative",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "public static double derivative(double x0, double x1, double x2, double x3, double t)"
            ],
            [
                "derivative",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "public static Point2 derivative(Point2 p0, Point2 p1, Point2 p2, Point3 p3, double t)"
            ],
            [
                "derivative",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "public static Point2 derivative(Point2 p0, Point2 p1, Point2 p2, Point3 p3, double t, Point2 result)"
            ],
            [
                "perpendicular",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "public static Vector2 perpendicular(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t)"
            ],
            [
                "perpendicular",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "public static Vector2 perpendicular(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t, Vector2 result)"
            ],
            [
                "perpendicular",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "public static Point2D.Double perpendicular(Point2D.Double p0, Point2D.Double p1, Point2D.Double p2, Point2D.Double p3, double t)"
            ],
            [
                "newGraphRenderer",
                "org.graphstream.ui.view",
                "Viewer",
                "public static GraphRenderer newGraphRenderer()"
            ],
            [
                "getPositionValue",
                "org.graphstream.ui.spriteManager",
                "SpriteManager",
                "protected static Values getPositionValue(Object value)"
            ],
            [
                "convertColor",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "public static Color convertColor(Object anyValue)"
            ],
            [
                "convertLabel",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "public static String convertLabel(Object value)"
            ],
            [
                "convertWidth",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "public static float convertWidth(Object value)"
            ],
            [
                "convertValue",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "public static Value convertValue(Object value)"
            ],
            [
                "convertUnit",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "protected static Units convertUnit(String unit)"
            ],
            [
                "nodePosition",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "public static double[] nodePosition(Graph graph, String id)"
            ],
            [
                "nodePointPosition",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "public static Point3 nodePointPosition(Graph graph, String id)"
            ],
            [
                "nodePosition",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "public static double[] nodePosition(Node node)"
            ],
            [
                "nodePointPosition",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "public static Point3 nodePointPosition(Node node)"
            ],
            [
                "edgeLength",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "public static double edgeLength(Graph graph, String id)"
            ],
            [
                "edgeLength",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "public static double edgeLength(Edge edge)"
            ],
            [
                "getGlobalEnvironment",
                "org.graphstream.util",
                "Environment",
                "public static Environment getGlobalEnvironment()"
            ],
            [
                "falseFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> falseFilter()"
            ],
            [
                "trueFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> trueFilter()"
            ],
            [
                "byAttributeFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> byAttributeFilter(String key, Object expectedValue)"
            ],
            [
                "separateNodeAndEdgeFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element, U extends Element> Filter<Element> separateNodeAndEdgeFilter(Filter<T> nodeFilter, Filter<U> edgeFilter)"
            ],
            [
                "byExtremitiesFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element, U extends Element> Filter<T> byExtremitiesFilter(Filter<U> f)"
            ],
            [
                "byIdFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> byIdFilter(String idPattern)"
            ],
            [
                "isContained",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> isContained(final Collection<? extends T> set)"
            ],
            [
                "isIdContained",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> isIdContained(final Collection<String> set)"
            ],
            [
                "and",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> and(Filter<T> f1, Filter<T> f2)"
            ],
            [
                "or",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> or(Filter<T> f1, Filter<T> f2)"
            ],
            [
                "xor",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> xor(Filter<T> f1, Filter<T> f2)"
            ],
            [
                "not",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> not(Filter<T> f)"
            ],
            [
                "addEscapes",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "protected static final String addEscapes(String str)"
            ],
            [
                "LexicalError",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "protected static String LexicalError(boolean EOFSeen, int lexState, int errorLine, int errorColumn, String errorAfter, char curChar)"
            ],
            [
                "add_escapes",
                "org.graphstream.util.parser",
                "ParseException",
                "static String add_escapes(String str)"
            ],
            [
                "newToken",
                "org.graphstream.util.parser",
                "Token",
                "public static Token newToken(int ofKind, String image)"
            ],
            [
                "newToken",
                "org.graphstream.util.parser",
                "Token",
                "public static Token newToken(int ofKind)"
            ],
            [
                "countStepInFile",
                "org.graphstream.util",
                "StepCounter",
                "public static int countStepInFile(String path) throws IOException"
            ],
            [
                "GET",
                "org.graphstream.stream.net",
                "HTTPSource",
                "protected static HashMap<String, Object> GET(HttpExchange ex)"
            ],
            [
                "sinkFor",
                "org.graphstream.stream.file",
                "FileSinkFactory",
                "public static FileSink sinkFor(String filename)"
            ],
            [
                "formatId",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "protected static String formatId(String id)"
            ],
            [
                "getInt",
                "org.graphstream.stream.file.pajek",
                "PajekContext",
                "protected static int getInt(Token nb) throws ParseException"
            ],
            [
                "getReal",
                "org.graphstream.stream.file.pajek",
                "PajekContext",
                "protected static double getReal(Token nb) throws ParseException"
            ],
            [
                "toColorValue",
                "org.graphstream.stream.file.pajek",
                "PajekContext",
                "public static String toColorValue(Token R, Token G, Token B) throws ParseException"
            ],
            [
                "sourceFor",
                "org.graphstream.stream.file",
                "FileSourceFactory",
                "public static FileSource sourceFor(String fileName) throws IOException"
            ],
            [
                "getXMLRootElement",
                "org.graphstream.stream.file",
                "FileSourceFactory",
                "public static String getXMLRootElement(String fileName) throws IOException"
            ],
            [
                "formatStringForQuoting",
                "org.graphstream.stream.file",
                "FileSinkDGSUtility",
                "protected static String formatStringForQuoting(String str)"
            ],
            [
                "attributeString",
                "org.graphstream.stream.file",
                "FileSinkDGSUtility",
                "protected static String attributeString(String key, Object value, boolean remove)"
            ],
            [
                "arrayString",
                "org.graphstream.stream.file",
                "FileSinkDGSUtility",
                "protected static String arrayString(Object value)"
            ],
            [
                "valueString",
                "org.graphstream.stream.file",
                "FileSinkDGSUtility",
                "protected static String valueString(Object value)"
            ],
            [
                "hashToString",
                "org.graphstream.stream.file",
                "FileSinkDGSUtility",
                "protected static String hashToString(HashMap<?, ?> hash)"
            ],
            [
                "encodeObject",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public static String encodeObject(java.io.Serializable serializableObject) throws java.io.IOException"
            ],
            [
                "encodeObject",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public static String encodeObject(java.io.Serializable serializableObject, int options) throws java.io.IOException"
            ],
            [
                "encodeBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public static String encodeBytes(byte[] source)"
            ],
            [
                "encodeBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public static String encodeBytes(byte[] source, int options) throws java.io.IOException"
            ],
            [
                "encodeBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public static String encodeBytes(byte[] source, int off, int len)"
            ],
            [
                "encodeBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public static String encodeBytes(byte[] source, int off, int len, int options) throws java.io.IOException"
            ],
            [
                "encodeBytesToBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public static byte[] encodeBytesToBytes(byte[] source)"
            ],
            [
                "encodeBytesToBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public static byte[] encodeBytesToBytes(byte[] source, int off, int len, int options) throws java.io.IOException"
            ],
            [
                "decode",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public static byte[] decode(byte[] source) throws java.io.IOException"
            ],
            [
                "decode",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public static byte[] decode(byte[] source, int off, int len, int options) throws java.io.IOException"
            ],
            [
                "decode",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public static byte[] decode(String s) throws java.io.IOException"
            ],
            [
                "decode",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public static byte[] decode(String s, int options) throws java.io.IOException"
            ],
            [
                "decodeToObject",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public static Object decodeToObject(String encodedObject) throws java.io.IOException, java.lang.ClassNotFoundException"
            ],
            [
                "decodeToObject",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public static Object decodeToObject(String encodedObject, int options, final ClassLoader loader) throws java.io.IOException, java.lang.ClassNotFoundException"
            ],
            [
                "decodeFromFile",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public static byte[] decodeFromFile(String filename) throws java.io.IOException"
            ],
            [
                "encodeFromFile",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public static String encodeFromFile(String filename) throws java.io.IOException"
            ],
            [
                "unmutableGraph",
                "org.graphstream.graph.implementations",
                "Graphs",
                "public static Graph unmutableGraph(Graph g)"
            ],
            [
                "synchronizedGraph",
                "org.graphstream.graph.implementations",
                "Graphs",
                "public static Graph synchronizedGraph(Graph g)"
            ],
            [
                "merge",
                "org.graphstream.graph.implementations",
                "Graphs",
                "public static Graph merge(Graph... graphs)"
            ],
            [
                "clone",
                "org.graphstream.graph.implementations",
                "Graphs",
                "public static Graph clone(Graph g)"
            ]
        ],
        "tokensProjectClassesNonPrivateStaticAttributes": [
            [
                "version16",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static boolean version16 = false;"
            ],
            [
                "predefFractions",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[][] predefFractions = new float[11][];"
            ],
            [
                "predefFractions2",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions2 = { 0f, 1f };"
            ],
            [
                "predefFractions3",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions3 = { 0f, 0.5f, 1f };"
            ],
            [
                "predefFractions4",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions4 = { 0f, 0.33f, 0.66f, 1f };"
            ],
            [
                "predefFractions5",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions5 = { 0f, 0.25f, 0.5f, 0.75f, 1f };"
            ],
            [
                "predefFractions6",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions6 = { 0f, 0.2f, 0.4f, 0.6f, 0.8f, 1f };"
            ],
            [
                "predefFractions7",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions7 = { 0f, 0.1666f, 0.3333f, 0.4999f, 0.6666f, 0.8333f, 1f };"
            ],
            [
                "predefFractions8",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions8 = { 0f, 0.1428f, 0.2856f, 0.4284f, 0.5712f, 0.7140f, 0.8568f, 1f };"
            ],
            [
                "predefFractions9",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions9 = { 0f, 0.125f, 0.25f, 0.375f, 0.5f, 0.625f, .75f, 0.875f, 1f };"
            ],
            [
                "predefFractions10",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions10 = { 0f, 0.1111f, 0.2222f, 0.3333f, 0.4444f, 0.5555f, 0.6666f, 0.7777f, 0.8888f, 1f };"
            ],
            [
                "defaultImageCache",
                "org.graphstream.ui.swingViewer.util",
                "ImageCache",
                "protected static ImageCache defaultImageCache;"
            ],
            [
                "dots",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "protected static float[] dots = { 1f, 1f };"
            ],
            [
                "dashes",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "protected static float[] dashes = { 3f, 3f };"
            ],
            [
                "defaultFontCache",
                "org.graphstream.ui.swingViewer.util",
                "FontCache",
                "public static FontCache defaultFontCache;"
            ],
            [
                "NULL_POINT2",
                "org.graphstream.ui.geom",
                "Point2",
                "public static final Point2 NULL_POINT2 = new Point2(0, 0);"
            ],
            [
                "NULL_POINT3",
                "org.graphstream.ui.geom",
                "Point3",
                "public static final Point3 NULL_POINT3 = new Point3(0, 0, 0);"
            ],
            [
                "DEFAULT_VIEW_ID",
                "org.graphstream.ui.view",
                "Viewer",
                "public static String DEFAULT_VIEW_ID = \"defaultView\";"
            ],
            [
                "jjbitVec0",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };"
            ],
            [
                "jjnextStates",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "static final int[] jjnextStates = { 48, 49, 52, 54, 55, 65, 69, 2, 4, 6, 10, 16, 23, 33, 50, 52, 54, 55, 57, 58, 60, 61, 66, 68, 70, 71 };"
            ],
            [
                "jjstrLiteralImages",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "public static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, \"\\56\", \"\\173\", \"\\175\", \"\\50\", \"\\51\", \"\\43\", \"\\72\", \"\\73\", \"\\54\", \"\\162\\147\\142\\141\", \"\\162\\147\\142\", null, null, null, \"\\165\\162\\154\", \"\\147\\162\\141\\160\\150\", \"\\145\\144\\147\\145\", \"\\156\\157\\144\\145\", \"\\163\\160\\162\\151\\164\\145\", \"\\146\\151\\154\\154\\55\\155\\157\\144\\145\", \"\\146\\151\\154\\154\\55\\143\\157\\154\\157\\162\", \"\\146\\151\\154\\154\\55\\151\\155\\141\\147\\145\", \"\\163\\164\\162\\157\\153\\145\\55\\155\\157\\144\\145\", \"\\163\\164\\162\\157\\153\\145\\55\\143\\157\\154\\157\\162\", \"\\163\\164\\162\\157\\153\\145\\55\\167\\151\\144\\164\\150\", \"\\163\\150\\141\\144\\157\\167\\55\\155\\157\\144\\145\", \"\\163\\150\\141\\144\\157\\167\\55\\143\\157\\154\\157\\162\", \"\\163\\150\\141\\144\\157\\167\\55\\167\\151\\144\\164\\150\", \"\\163\\150\\141\\144\\157\\167\\55\\157\\146\\146\\163\\145\\164\", \"\\164\\145\\170\\164\\55\\155\\157\\144\\145\", \"\\164\\145\\170\\164\\55\\143\\157\\154\\157\\162\", \"\\164\\145\\170\\164\\55\\163\\164\\171\\154\\145\", \"\\164\\145\\170\\164\\55\\146\\157\\156\\164\", \"\\164\\145\\170\\164\\55\\163\\151\\172\\145\", \"\\164\\145\\170\\164\\55\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\\55\\155\\157\\144\\145\", \"\\164\\145\\170\\164\\55\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\", \"\\164\\145\\170\\164\\55\\142\\141\\143\\153\\147\\162\\157\\165\\156\\144\\55\\155\\157\\144\\145\", \"\\164\\145\\170\\164\\55\\142\\141\\143\\153\\147\\162\\157\\165\\156\\144\\55\\143\\157\\154\\157\\162\", \"\\164\\145\\170\\164\\55\\157\\146\\146\\163\\145\\164\", \"\\164\\145\\170\\164\\55\\160\\141\\144\\144\\151\\156\\147\", \"\\151\\143\\157\\156\\55\\155\\157\\144\\145\", \"\\151\\143\\157\\156\", \"\\160\\141\\144\\144\\151\\156\\147\", \"\\172\\55\\151\\156\\144\\145\\170\", \"\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\\55\\155\\157\\144\\145\", \"\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\", \"\\163\\150\\141\\160\\145\", \"\\163\\151\\172\\145\", \"\\163\\151\\172\\145\\55\\155\\157\\144\\145\", \"\\163\\150\\141\\160\\145\\55\\160\\157\\151\\156\\164\\163\", \"\\164\\145\\170\\164\\55\\141\\154\\151\\147\\156\\155\\145\\156\\164\", \"\\152\\143\\157\\155\\160\\157\\156\\145\\156\\164\", \"\\141\\162\\162\\157\\167\\55\\151\\155\\141\\147\\145\", \"\\141\\162\\162\\157\\167\\55\\163\\151\\172\\145\", \"\\141\\162\\162\\157\\167\\55\\163\\150\\141\\160\\145\", \"\\163\\160\\162\\151\\164\\145\\55\\157\\162\\151\\145\\156\\164\\141\\164\\151\\157\\156\", \"\\143\\141\\156\\166\\141\\163\\55\\143\\157\\154\\157\\162\", \"\\160\\154\\141\\151\\156\", \"\\144\\171\\156\\55\\160\\154\\141\\151\\156\", \"\\144\\171\\156\\55\\163\\151\\172\\145\", \"\\144\\171\\156\\55\\151\\143\\157\\156\", \"\\144\\141\\163\\150\\145\\163\", \"\\144\\157\\164\\163\", \"\\144\\157\\165\\142\\154\\145\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\144\\151\\141\\147\\157\\156\\141\\154\\61\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\144\\151\\141\\147\\157\\156\\141\\154\\62\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\150\\157\\162\\151\\172\\157\\156\\164\\141\\154\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\162\\141\\144\\151\\141\\154\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\166\\145\\162\\164\\151\\143\\141\\154\", \"\\150\\151\\144\\144\\145\\156\", \"\\151\\155\\141\\147\\145\\55\\164\\151\\154\\145\\144\", \"\\151\\155\\141\\147\\145\\55\\163\\143\\141\\154\\145\\144\", \"\\151\\155\\141\\147\\145\\55\\163\\143\\141\\154\\145\\144\\55\\162\\141\\164\\151\\157\\55\\155\\141\\170\", \"\\151\\155\\141\\147\\145\\55\\163\\143\\141\\154\\145\\144\\55\\162\\141\\164\\151\\157\\55\\155\\151\\156\", \"\\156\\157\\156\\145\", \"\\156\\157\\162\\155\\141\\154\", \"\\164\\162\\165\\156\\143\\141\\164\\145\\144\", \"\\172\\157\\157\\155\\55\\162\\141\\156\\147\\145\", \"\\141\\164\\55\\172\\157\\157\\155\", \"\\165\\156\\144\\145\\162\\55\\172\\157\\157\\155\", \"\\157\\166\\145\\162\\55\\172\\157\\157\\155\", \"\\172\\157\\157\\155\\163\", \"\\146\\151\\164\", \"\\142\\157\\154\\144\", \"\\142\\157\\154\\144\\55\\151\\164\\141\\154\\151\\143\", \"\\151\\164\\141\\154\\151\\143\", \"\\141\\154\\157\\156\\147\", \"\\141\\164\\55\\154\\145\\146\\164\", \"\\141\\164\\55\\162\\151\\147\\150\\164\", \"\\143\\145\\156\\164\\145\\162\", \"\\154\\145\\146\\164\", \"\\162\\151\\147\\150\\164\", \"\\165\\156\\144\\145\\162\", \"\\141\\142\\157\\166\\145\", \"\\152\\165\\163\\164\\151\\146\\171\", \"\\143\\151\\162\\143\\154\\145\", \"\\164\\162\\151\\141\\156\\147\\154\\145\", \"\\146\\162\\145\\145\\160\\154\\141\\156\\145\", \"\\164\\145\\170\\164\\55\\142\\157\\170\", \"\\164\\145\\170\\164\\55\\162\\157\\165\\156\\144\\145\\144\\55\\142\\157\\170\", \"\\164\\145\\170\\164\\55\\143\\151\\162\\143\\154\\145\", \"\\164\\145\\170\\164\\55\\144\\151\\141\\155\\157\\156\\144\", \"\\164\\145\\170\\164\\55\\160\\141\\162\\141\\147\\162\\141\\160\\150\", \"\\142\\157\\170\", \"\\162\\157\\165\\156\\144\\145\\144\\55\\142\\157\\170\", \"\\143\\162\\157\\163\\163\", \"\\144\\151\\141\\155\\157\\156\\144\", \"\\160\\157\\154\\171\\147\\157\\156\", \"\\142\\165\\164\\164\\157\\156\", \"\\164\\145\\170\\164\\55\\146\\151\\145\\154\\144\", \"\\160\\141\\156\\145\\154\", \"\\154\\151\\156\\145\", \"\\160\\157\\154\\171\\154\\151\\156\\145\", \"\\160\\157\\154\\171\\154\\151\\156\\145\\55\\163\\143\\141\\154\\145\\144\", \"\\141\\156\\147\\154\\145\", \"\\143\\165\\142\\151\\143\\55\\143\\165\\162\\166\\145\", \"\\142\\154\\157\\142\", \"\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\114\\55\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\150\\157\\162\\151\\172\\157\\156\\164\\141\\154\\55\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\166\\145\\162\\164\\151\\143\\141\\154\\55\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\141\\162\\162\\157\\167\", \"\\146\\154\\157\\167\", \"\\160\\151\\145\\55\\143\\150\\141\\162\\164\", \"\\151\\155\\141\\147\\145\", \"\\151\\155\\141\\147\\145\\163\", \"\\146\\162\\157\\155\", \"\\156\\157\\144\\145\\60\", \"\\164\\157\", \"\\156\\157\\144\\145\\61\", \"\\160\\162\\157\\152\\145\\143\\164\\151\\157\\156\", \"\\143\\154\\151\\143\\153\\145\\144\", \"\\163\\145\\154\\145\\143\\164\\145\\144\", null, null };"
            ],
            [
                "lexStateNames",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "public static final String[] lexStateNames = { \"DEFAULT\" };"
            ],
            [
                "jjtoToken",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "static final long[] jjtoToken = { 0xfffffffffffffe01L, 0xffffffffffffffffL, 0xffffL };"
            ],
            [
                "jjtoSkip",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "static final long[] jjtoSkip = { 0x1eL, 0x0L, 0x0L };"
            ],
            [
                "colorMap",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "protected static HashMap<String,Color> colorMap;"
            ],
            [
                "sharpColor1",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "protected static Pattern sharpColor1;"
            ],
            [
                "sharpColor2",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "protected static Pattern sharpColor2;"
            ],
            [
                "cssColor",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "protected static Pattern cssColor;"
            ],
            [
                "cssColorA",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "protected static Pattern cssColorA;"
            ],
            [
                "awtColor",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "protected static Pattern awtColor;"
            ],
            [
                "hexaColor",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "protected static Pattern hexaColor;"
            ],
            [
                "numberUnit",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "protected static Pattern numberUnit;"
            ],
            [
                "number",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "protected static Pattern number;"
            ],
            [
                "acceptedAttribute",
                "org.graphstream.ui.graphicGraph",
                "GraphicElement",
                "protected static Pattern acceptedAttribute;"
            ],
            [
                "DEFAULT_AN_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_AN_FORMAT = \"%prefix%[%sourceId%:%timeId%] add node \\\"%nodeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_CNA_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CNA_FORMAT = \"%prefix%[%sourceId%:%timeId%] set node \\\"%nodeId%\\\" +\\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CNC_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CNC_FORMAT = \"%prefix%[%sourceId%:%timeId%] set node \\\"%nodeId%\\\" \\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CNR_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CNR_FORMAT = \"%prefix%[%sourceId%:%timeId%] set node \\\"%nodeId%\\\" -\\\"%attributeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_DN_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_DN_FORMAT = \"%prefix%[%sourceId%:%timeId%] remove node \\\"%nodeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_AE_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_AE_FORMAT = \"%prefix%[%sourceId%:%timeId%] add edge \\\"%edgeId%\\\" : \\\"%source%\\\" -- \\\"%target%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_CEA_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CEA_FORMAT = \"%prefix%[%sourceId%:%timeId%] set edge \\\"%edgeId%\\\" +\\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CEC_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CEC_FORMAT = \"%prefix%[%sourceId%:%timeId%] set edge \\\"%edgeId%\\\" \\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CER_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CER_FORMAT = \"%prefix%[%sourceId%:%timeId%] set edge \\\"%edgeId%\\\" -\\\"%attributeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_DE_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_DE_FORMAT = \"%prefix%[%sourceId%:%timeId%] remove edge \\\"%edgeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_CGA_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CGA_FORMAT = \"%prefix%[%sourceId%:%timeId%] set +\\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CGC_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CGC_FORMAT = \"%prefix%[%sourceId%:%timeId%] set \\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CGR_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CGR_FORMAT = \"%prefix%[%sourceId%:%timeId%] set -\\\"%attributeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_CL_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CL_FORMAT = \"%prefix%[%sourceId%:%timeId%] clear%suffix%\";"
            ],
            [
                "DEFAULT_ST_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_ST_FORMAT = \"%prefix%[%sourceId%:%timeId%] step %step% begins%suffix%\";"
            ],
            [
                "GLOBAL_ENV",
                "org.graphstream.util",
                "Environment",
                "public static Environment GLOBAL_ENV;"
            ],
            [
                "LEXICAL_ERROR",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "public static final int LEXICAL_ERROR = 0;"
            ],
            [
                "STATIC_LEXER_ERROR",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "public static final int STATIC_LEXER_ERROR = 1;"
            ],
            [
                "INVALID_LEXICAL_STATE",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "public static final int INVALID_LEXICAL_STATE = 2;"
            ],
            [
                "LOOP_DETECTED",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "public static final int LOOP_DETECTED = 3;"
            ],
            [
                "staticFlag",
                "org.graphstream.util.parser",
                "SimpleCharStream",
                "public static final boolean staticFlag = false;"
            ],
            [
                "ABBREVIATED_WEEKDAY_NAME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent ABBREVIATED_WEEKDAY_NAME = new NotImplementedComponent(\"%a\", \"\\\\w+[.]\");"
            ],
            [
                "FULL_WEEKDAY_NAME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent FULL_WEEKDAY_NAME = new NotImplementedComponent(\"%A\", \"\\\\w+\");"
            ],
            [
                "ABBREVIATED_MONTH_NAME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent ABBREVIATED_MONTH_NAME = new NotImplementedComponent(\"%b\", \"\\\\w+[.]\");"
            ],
            [
                "FULL_MONTH_NAME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent FULL_MONTH_NAME = new NotImplementedComponent(\"%B\", \"\\\\w+\");"
            ],
            [
                "LOCALE_DATE_AND_TIME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent LOCALE_DATE_AND_TIME = new NotImplementedComponent(\"%c\", null);"
            ],
            [
                "CENTURY",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent CENTURY = new NotImplementedComponent(\"%C\", \"\\\\d\\\\d\");"
            ],
            [
                "DAY_OF_MONTH_2_DIGITS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DAY_OF_MONTH_2_DIGITS = new FieldComponent(\"%d\", \"[012]\\\\d|3[01]\", Calendar.DAY_OF_MONTH, \"%02d\");"
            ],
            [
                "DATE",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DATE = new AliasComponent(\"%D\", \"%m/%d/%y\");"
            ],
            [
                "DAY_OF_MONTH",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DAY_OF_MONTH = new FieldComponent(\"%e\", \"\\\\d|[12]\\\\d|3[01]\", Calendar.DAY_OF_MONTH, \"%2d\");"
            ],
            [
                "DATE_ISO8601",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DATE_ISO8601 = new AliasComponent(\"%F\", \"%Y-%m-%d\");"
            ],
            [
                "WEEK_BASED_YEAR_2_DIGITS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent WEEK_BASED_YEAR_2_DIGITS = new FieldComponent(\"%g\", \"\\\\d\\\\d\", Calendar.YEAR, \"%02d\");"
            ],
            [
                "WEEK_BASED_YEAR_4_DIGITS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent WEEK_BASED_YEAR_4_DIGITS = new FieldComponent(\"%G\", \"\\\\d{4}\", Calendar.YEAR, \"%04d\");"
            ],
            [
                "ABBREVIATED_MONTH_NAME_ALIAS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent ABBREVIATED_MONTH_NAME_ALIAS = new AliasComponent(\"%h\", \"%b\");"
            ],
            [
                "HOUR_OF_DAY",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent HOUR_OF_DAY = new FieldComponent(\"%H\", \"[01]\\\\d|2[0123]\", Calendar.HOUR_OF_DAY, \"%02d\");"
            ],
            [
                "HOUR",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent HOUR = new FieldComponent(\"%I\", \"0\\\\d|1[012]\", Calendar.HOUR, \"%02d\");"
            ],
            [
                "DAY_OF_YEAR",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DAY_OF_YEAR = new FieldComponent(\"%j\", \"[012]\\\\d\\\\d|3[0-5]\\\\d|36[0-6]\", Calendar.DAY_OF_YEAR, \"%03d\");"
            ],
            [
                "MILLISECOND",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent MILLISECOND = new FieldComponent(\"%k\", \"\\\\d{3}\", Calendar.MILLISECOND, \"%03d\");"
            ],
            [
                "EPOCH",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent EPOCH = new EpochComponent();"
            ],
            [
                "MONTH",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent MONTH = new FieldComponent(\"%m\", \"0[1-9]|1[012]\", Calendar.MONTH, -1, \"%02d\");"
            ],
            [
                "MINUTE",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent MINUTE = new FieldComponent(\"%M\", \"[0-5]\\\\d\", Calendar.MINUTE, \"%02d\");"
            ],
            [
                "NEW_LINE",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent NEW_LINE = new AliasComponent(\"%n\", \"\\n\");"
            ],
            [
                "AM_PM",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent AM_PM = new AMPMComponent();"
            ],
            [
                "LOCALE_CLOCK_TIME_12_HOUR",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent LOCALE_CLOCK_TIME_12_HOUR = new NotImplementedComponent(\"%r\", \"\");"
            ],
            [
                "HOUR_AND_MINUTE",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent HOUR_AND_MINUTE = new AliasComponent(\"%R\", \"%H:%M\");"
            ],
            [
                "SECOND",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent SECOND = new FieldComponent(\"%S\", \"[0-5]\\\\d|60\", Calendar.SECOND, \"%02d\");"
            ],
            [
                "TABULATION",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent TABULATION = new AliasComponent(\"%t\", \"\\t\");"
            ],
            [
                "TIME_ISO8601",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent TIME_ISO8601 = new AliasComponent(\"%T\", \"%H:%M:%S\");"
            ],
            [
                "DAY_OF_WEEK_1_7",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DAY_OF_WEEK_1_7 = new FieldComponent(\"%u\", \"[1-7]\", Calendar.DAY_OF_WEEK, -1, \"%1d\");"
            ],
            [
                "WEEK_OF_YEAR_FROM_SUNDAY",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent WEEK_OF_YEAR_FROM_SUNDAY = new FieldComponent(\"%U\", \"[0-4]\\\\d|5[0123]\", Calendar.WEEK_OF_YEAR, 1, \"%2d\");"
            ],
            [
                "WEEK_NUMBER_ISO8601",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent WEEK_NUMBER_ISO8601 = new NotImplementedComponent(\"%V\", \"0[1-9]|[2-4]\\\\d|5[0123]\");"
            ],
            [
                "DAY_OF_WEEK_0_6",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DAY_OF_WEEK_0_6 = new FieldComponent(\"%w\", \"[0-6]\", Calendar.DAY_OF_WEEK, \"%01d\");"
            ],
            [
                "WEEK_OF_YEAR_FROM_MONDAY",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent WEEK_OF_YEAR_FROM_MONDAY = new FieldComponent(\"%W\", \"[0-4]\\\\d|5[0123]\", Calendar.WEEK_OF_YEAR, \"%02d\");"
            ],
            [
                "LOCALE_DATE_REPRESENTATION",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent LOCALE_DATE_REPRESENTATION = new NotImplementedComponent(\"%x\", \"\");"
            ],
            [
                "LOCALE_TIME_REPRESENTATION",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent LOCALE_TIME_REPRESENTATION = new NotImplementedComponent(\"%X\", \"\");"
            ],
            [
                "YEAR_2_DIGITS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent YEAR_2_DIGITS = new FieldComponent(\"%y\", \"\\\\d\\\\d\", Calendar.YEAR, \"%02d\");"
            ],
            [
                "YEAR_4_DIGITS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent YEAR_4_DIGITS = new FieldComponent(\"%Y\", \"\\\\d{4}\", Calendar.YEAR, \"%04d\");"
            ],
            [
                "UTC_OFFSET",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent UTC_OFFSET = new UTCOffsetComponent();"
            ],
            [
                "LOCALE_TIME_ZONE_NAME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent LOCALE_TIME_ZONE_NAME = new NotImplementedComponent(\"%Z\", \"\\\\w*\");"
            ],
            [
                "PERCENT",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent PERCENT = new AliasComponent(\"%%\", \"%\");"
            ],
            [
                "jjbitVec0",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };"
            ],
            [
                "jjnextStates",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "static final int[] jjnextStates = { 5, 6, 8, 9, 13, 14 };"
            ],
            [
                "jjstrLiteralImages",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "public static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, \"\\133\", \"\\135\", null, null, null, null, null, null };"
            ],
            [
                "lexStateNames",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "public static final String[] lexStateNames = { \"DEFAULT\" };"
            ],
            [
                "jjtoToken",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "static final long[] jjtoToken = { 0xff01L };"
            ],
            [
                "jjtoSkip",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "static final long[] jjtoSkip = { 0x1eL };"
            ],
            [
                "jjbitVec0",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };"
            ],
            [
                "jjnextStates",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "static final int[] jjnextStates = { 54, 11, 12, 15, 17, 18, 1, 2, 5, 47, 52, 8, 9, 20, 21 };"
            ],
            [
                "jjstrLiteralImages",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "public static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, null, \"\\50\", \"\\51\", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null };"
            ],
            [
                "lexStateNames",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "public static final String[] lexStateNames = { \"DEFAULT\" };"
            ],
            [
                "jjtoToken",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "static final long[] jjtoToken = { 0xffffc01L };"
            ],
            [
                "jjtoSkip",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "static final long[] jjtoSkip = { 0x7eL };"
            ],
            [
                "XYZ_ATTR",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "public static final String XYZ_ATTR = \"xyz\";"
            ],
            [
                "WIDTH_ATTR",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "public static final String WIDTH_ATTR = \"ui.tikz.width\";"
            ],
            [
                "HEIGHT_ATTR",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "public static final String HEIGHT_ATTR = \"ui.tikz.height\";"
            ],
            [
                "DEFAULT_WIDTH",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "public static final double DEFAULT_WIDTH = 10;"
            ],
            [
                "DEFAULT_HEIGHT",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "public static final double DEFAULT_HEIGHT = 10;"
            ],
            [
                "DISPLAY_MIN_SIZE_IN_MM",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "public static final double DISPLAY_MIN_SIZE_IN_MM = 2;"
            ],
            [
                "DISPLAY_MAX_SIZE_IN_MM",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "public static final double DISPLAY_MAX_SIZE_IN_MM = 10;"
            ],
            [
                "jjbitVec0",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };"
            ],
            [
                "jjnextStates",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "static final int[] jjnextStates = { 21, 27, 8, 10, 11, 18, 19, 22, 23, 26, 1, 2, 13, 14 };"
            ],
            [
                "jjstrLiteralImages",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "public static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, null, \"\\133\", \"\\135\", \"\\173\", \"\\175\", \"\\72\", \"\\54\", \"\\75\", null, null, null, null, null, null, null, null, null, null, \"\\73\", null, null, null, null, null, null, null, null, null, \"\\137\" };"
            ],
            [
                "lexStateNames",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "public static final String[] lexStateNames = { \"DEFAULT\" };"
            ],
            [
                "jjtoToken",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "static final long[] jjtoToken = { 0x3ffffffc01L };"
            ],
            [
                "jjtoSkip",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "static final long[] jjtoSkip = { 0x7eL };"
            ],
            [
                "jjbitVec0",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };"
            ],
            [
                "jjnextStates",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "static final int[] jjnextStates = { 21, 22, 23, 17, 19, 2, 3, 5, 6, 8, 9 };"
            ],
            [
                "jjstrLiteralImages",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "public static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null };"
            ],
            [
                "lexStateNames",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "public static final String[] lexStateNames = { \"DEFAULT\" };"
            ],
            [
                "jjtoToken",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "static final long[] jjtoToken = { 0x3fffffffffffc9L };"
            ],
            [
                "jjtoSkip",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "static final long[] jjtoSkip = { 0x6L };"
            ],
            [
                "XMLNS",
                "org.graphstream.stream.file.gexf",
                "GEXF",
                "public static final String XMLNS = \"http://www.gexf.net/1.2draft\";"
            ],
            [
                "XMLNS_XSI",
                "org.graphstream.stream.file.gexf",
                "GEXF",
                "public static final String XMLNS_XSI = \"http://www.w3.org/2001/XMLSchema-instance\";"
            ],
            [
                "XMLNS_SL",
                "org.graphstream.stream.file.gexf",
                "GEXF",
                "public static final String XMLNS_SL = \"http://www.gexf.net/1.2draft http://www.gexf.net/1.2draft/gexf.xsd\";"
            ],
            [
                "XMLNS_VIZ",
                "org.graphstream.stream.file.gexf",
                "GEXF",
                "public static final String XMLNS_VIZ = \"http://www.gexf.net/1.2draft/viz\";"
            ],
            [
                "VERSION",
                "org.graphstream.stream.file.gexf",
                "GEXF",
                "public static final String VERSION = \"1.2\";"
            ],
            [
                "BUFFER_SIZE",
                "org.graphstream.stream.file.dgs",
                "DGSParser",
                "protected static final int BUFFER_SIZE = 4096;"
            ],
            [
                "ARRAY_OPEN",
                "org.graphstream.stream.file.dgs",
                "DGSParser",
                "public static final int ARRAY_OPEN = '{';"
            ],
            [
                "ARRAY_CLOSE",
                "org.graphstream.stream.file.dgs",
                "DGSParser",
                "public static final int ARRAY_CLOSE = '}';"
            ],
            [
                "MAP_OPEN",
                "org.graphstream.stream.file.dgs",
                "DGSParser",
                "public static final int MAP_OPEN = '[';"
            ],
            [
                "MAP_CLOSE",
                "org.graphstream.stream.file.dgs",
                "DGSParser",
                "public static final int MAP_CLOSE = ']';"
            ],
            [
                "gradientId",
                "org.graphstream.stream.file",
                "FileSinkSVG2",
                "static int gradientId = 0;"
            ],
            [
                "gradientId",
                "org.graphstream.stream.file",
                "SVGStyle",
                "static int gradientId = 0;"
            ],
            [
                "TIME_PREFIX",
                "org.graphstream.stream",
                "Timeline",
                "public static final String TIME_PREFIX = \"time\";"
            ],
            [
                "SYNC_DISABLE_KEY",
                "org.graphstream.stream.sync",
                "SinkTime",
                "public static final String SYNC_DISABLE_KEY = \"org.graphstream.stream.sync.disable\";"
            ],
            [
                "disableSync",
                "org.graphstream.stream.sync",
                "SinkTime",
                "protected static final boolean disableSync;"
            ],
            [
                "LIGHT_YELLOW",
                "org.graphstream.stream.netstream",
                "NetStreamReceiver",
                "protected static final String LIGHT_YELLOW = \"\u001b[33;1m\";"
            ],
            [
                "RESET",
                "org.graphstream.stream.netstream",
                "NetStreamReceiver",
                "protected static final String RESET = \"\u001b[0m\";"
            ],
            [
                "BUFFER_INITIAL_SIZE",
                "org.graphstream.stream.netstream",
                "NetStreamReceiver",
                "protected static final int BUFFER_INITIAL_SIZE = 8192;"
            ],
            [
                "BUFFER_INITIAL_SIZE",
                "org.graphstream.stream.netstream",
                "IncomingBuffer",
                "protected static final int BUFFER_INITIAL_SIZE = 8192;"
            ],
            [
                "EVENT_GETVERSION",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_GETVERSION = 0x00;"
            ],
            [
                "EVENT_START",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_START = 0x01;"
            ],
            [
                "EVENT_END",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_END = 0x02;"
            ],
            [
                "EVENT_ADD_NODE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_ADD_NODE = 0x10;"
            ],
            [
                "EVENT_DEL_NODE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_DEL_NODE = 0x11;"
            ],
            [
                "EVENT_ADD_EDGE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_ADD_EDGE = 0x12;"
            ],
            [
                "EVENT_DEL_EDGE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_DEL_EDGE = 0x13;"
            ],
            [
                "EVENT_STEP",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_STEP = 0x14;"
            ],
            [
                "EVENT_CLEARED",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_CLEARED = 0x15;"
            ],
            [
                "EVENT_ADD_GRAPH_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_ADD_GRAPH_ATTR = 0x16;"
            ],
            [
                "EVENT_CHG_GRAPH_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_CHG_GRAPH_ATTR = 0x17;"
            ],
            [
                "EVENT_DEL_GRAPH_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_DEL_GRAPH_ATTR = 0x18;"
            ],
            [
                "EVENT_ADD_NODE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_ADD_NODE_ATTR = 0x19;"
            ],
            [
                "EVENT_CHG_NODE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_CHG_NODE_ATTR = 0x1a;"
            ],
            [
                "EVENT_DEL_NODE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_DEL_NODE_ATTR = 0x1b;"
            ],
            [
                "EVENT_ADD_EDGE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_ADD_EDGE_ATTR = 0x1c;"
            ],
            [
                "EVENT_CHG_EDGE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_CHG_EDGE_ATTR = 0x1d;"
            ],
            [
                "EVENT_DEL_EDGE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_DEL_EDGE_ATTR = 0x1e;"
            ],
            [
                "TYPE_UNKNOWN",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_UNKNOWN = 0x00;"
            ],
            [
                "TYPE_BOOLEAN",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_BOOLEAN = 0x50;"
            ],
            [
                "TYPE_BOOLEAN_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_BOOLEAN_ARRAY = 0x51;"
            ],
            [
                "TYPE_BYTE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_BYTE = 0x52;"
            ],
            [
                "TYPE_BYTE_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_BYTE_ARRAY = 0x53;"
            ],
            [
                "TYPE_SHORT",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_SHORT = 0x54;"
            ],
            [
                "TYPE_SHORT_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_SHORT_ARRAY = 0x55;"
            ],
            [
                "TYPE_INT",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_INT = 0x56;"
            ],
            [
                "TYPE_INT_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_INT_ARRAY = 0x57;"
            ],
            [
                "TYPE_LONG",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_LONG = 0x58;"
            ],
            [
                "TYPE_LONG_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_LONG_ARRAY = 0x59;"
            ],
            [
                "TYPE_FLOAT",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_FLOAT = 0x5a;"
            ],
            [
                "TYPE_FLOAT_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_FLOAT_ARRAY = 0x5b;"
            ],
            [
                "TYPE_DOUBLE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_DOUBLE = 0x5c;"
            ],
            [
                "TYPE_DOUBLE_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_DOUBLE_ARRAY = 0x5d;"
            ],
            [
                "TYPE_STRING",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_STRING = 0x5e;"
            ],
            [
                "TYPE_RAW",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_RAW = 0x5f;"
            ],
            [
                "TYPE_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static byte TYPE_ARRAY = 0x60;"
            ],
            [
                "TYPE_NULL",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_NULL = 0x61;"
            ],
            [
                "COMMAND",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int COMMAND = 0x70;"
            ],
            [
                "NO_OPTIONS",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public final static int NO_OPTIONS = 0;"
            ],
            [
                "ENCODE",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public final static int ENCODE = 1;"
            ],
            [
                "DECODE",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public final static int DECODE = 0;"
            ],
            [
                "GZIP",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public final static int GZIP = 2;"
            ],
            [
                "DONT_GUNZIP",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public final static int DONT_GUNZIP = 4;"
            ],
            [
                "DO_BREAK_LINES",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public final static int DO_BREAK_LINES = 8;"
            ],
            [
                "URL_SAFE",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public final static int URL_SAFE = 16;"
            ],
            [
                "ORDERED",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public final static int ORDERED = 32;"
            ],
            [
                "INITIAL_EDGE_CAPACITY",
                "org.graphstream.graph.implementations",
                "AdjacencyListNode",
                "protected static final int INITIAL_EDGE_CAPACITY;"
            ],
            [
                "GROWTH_FACTOR",
                "org.graphstream.graph.implementations",
                "AdjacencyListNode",
                "protected static final double GROWTH_FACTOR = 1.1;"
            ],
            [
                "I_EDGE",
                "org.graphstream.graph.implementations",
                "AdjacencyListNode",
                "protected static final char I_EDGE = 0;"
            ],
            [
                "IO_EDGE",
                "org.graphstream.graph.implementations",
                "AdjacencyListNode",
                "protected static final char IO_EDGE = 1;"
            ],
            [
                "O_EDGE",
                "org.graphstream.graph.implementations",
                "AdjacencyListNode",
                "protected static final char O_EDGE = 2;"
            ],
            [
                "GROW_FACTOR",
                "org.graphstream.graph.implementations",
                "AdjacencyListGraph",
                "public static final double GROW_FACTOR = 1.1;"
            ],
            [
                "DEFAULT_NODE_CAPACITY",
                "org.graphstream.graph.implementations",
                "AdjacencyListGraph",
                "public static final int DEFAULT_NODE_CAPACITY = 128;"
            ],
            [
                "DEFAULT_EDGE_CAPACITY",
                "org.graphstream.graph.implementations",
                "AdjacencyListGraph",
                "public static final int DEFAULT_EDGE_CAPACITY = 1024;"
            ]
        ],
        "tokensMethodJavadocValues": [],
        "tokensMethodArguments": [
            [
                "x",
                "",
                "double"
            ],
            [
                "y",
                "",
                "double"
            ]
        ],
        "tokensMethodVariablesNonPrivateNonStaticNonVoidMethods": [
            [
                "getMetrics",
                "org.graphstream.ui.view",
                "Camera",
                "GraphMetrics getMetrics()"
            ],
            [
                "getViewRotation",
                "org.graphstream.ui.view",
                "Camera",
                "double getViewRotation()"
            ],
            [
                "transformPxToGu",
                "org.graphstream.ui.view",
                "Camera",
                "Point3 transformPxToGu(double x, double y)"
            ],
            [
                "getViewCenter",
                "org.graphstream.ui.view",
                "Camera",
                "Point3 getViewCenter()"
            ],
            [
                "getGraphDimension",
                "org.graphstream.ui.view",
                "Camera",
                "double getGraphDimension()"
            ],
            [
                "transformGuToPx",
                "org.graphstream.ui.view",
                "Camera",
                "Point3 transformGuToPx(double x, double y, double z)"
            ],
            [
                "getViewPercent",
                "org.graphstream.ui.view",
                "Camera",
                "double getViewPercent()"
            ],
            [
                "isVisible",
                "org.graphstream.ui.view",
                "Camera",
                "boolean isVisible(GraphicElement element)"
            ],
            [
                "distance",
                "org.graphstream.ui.geom",
                "Point3",
                "public double distance(double arg0, double arg1, double arg2)"
            ],
            [
                "hashCode",
                "org.graphstream.ui.geom",
                "Point3",
                "public int hashCode()"
            ],
            [
                "isZero",
                "org.graphstream.ui.geom",
                "Point3",
                "public boolean isZero()"
            ],
            [
                "distance",
                "org.graphstream.ui.geom",
                "Point3",
                "public double distance(Point3 arg0)"
            ],
            [
                "toString",
                "org.graphstream.ui.geom",
                "Point3",
                "public String toString()"
            ],
            [
                "equals",
                "org.graphstream.ui.geom",
                "Point3",
                "public boolean equals(Object arg0)"
            ],
            [
                "interpolate",
                "org.graphstream.ui.geom",
                "Point3",
                "public Point3 interpolate(Point3 arg0, double arg1)"
            ],
            [
                "hashCode",
                "org.graphstream.ui.geom",
                "Point2",
                "public int hashCode()"
            ],
            [
                "isZero",
                "org.graphstream.ui.geom",
                "Point2",
                "public boolean isZero()"
            ],
            [
                "distance",
                "org.graphstream.ui.geom",
                "Point2",
                "public double distance(Point2 arg0)"
            ],
            [
                "toString",
                "org.graphstream.ui.geom",
                "Point2",
                "public String toString()"
            ],
            [
                "equals",
                "org.graphstream.ui.geom",
                "Point2",
                "public boolean equals(Object arg0)"
            ],
            [
                "interpolate",
                "org.graphstream.ui.geom",
                "Point2",
                "public Point2 interpolate(Point2 arg0, double arg1)"
            ],
            [
                "toString",
                "java.lang",
                "Object",
                "public String toString()"
            ],
            [
                "hashCode",
                "java.lang",
                "Object",
                "public native int hashCode()"
            ],
            [
                "clone",
                "java.lang",
                "Object",
                "protected native Object clone() throws CloneNotSupportedException"
            ],
            [
                "equals",
                "java.lang",
                "Object",
                "public boolean equals(Object arg0)"
            ],
            [
                "getClass",
                "java.lang",
                "Object",
                "public final native Class<? extends Object> getClass()"
            ]
        ],
        "tokensMethodVariablesNonPrivateNonStaticAttributes": [
            [
                "z",
                "org.graphstream.ui.geom",
                "Point3",
                "public double z;"
            ],
            [
                "x",
                "org.graphstream.ui.geom",
                "Point2",
                "public double x;"
            ],
            [
                "y",
                "org.graphstream.ui.geom",
                "Point2",
                "public double y;"
            ]
        ],
        "tokensOracleVariablesNonPrivateNonStaticNonVoidMethods": [],
        "tokensOracleVariablesNonPrivateNonStaticAttributes": []
    },
    {
        "id": 3042,
        "oracle": ";",
        "oracleType": "PRE",
        "projectName": "gs-core-1.3",
        "packageName": "org.graphstream.ui.graphicGraph.stylesheet",
        "className": "Style",
        "javadocTag": "@param property The style property the value is searched for.",
        "methodJavadoc": "    /**\n\t * Get the value of a given property.\n\t * \n\t * This code is the same for all \"getX\" methods so we explain it once here.\n\t * This is the implementation of style inheritance.\n\t * \n\t * First if some event is actually occurring, the alternative styles are\n\t * searched first. If these events have unset values for the property, their\n\t * parent are then searched.\n\t * \n\t * If the value for the property is not found in the alternative styles,\n\t * alternative styles parents, or if there is no event occurring actually,\n\t * this style is checked.\n\t * \n\t * If its value is unset, the parents of this style are checked.\n\t * \n\t * Classes are not checked here, they are processed in the\n\t * {@link org.graphstream.ui.graphicGraph.StyleGroup} class.\n\t * \n\t * @param property\n\t *            The style property the value is searched for.\n\t */",
        "methodSourceCode": "public Object getValue(String property, String... events){\n    if (// && alternates != null )\n    events != null && events.length > 0) {\n        Object o = null;\n        int i = events.length - 1;\n        do {\n            o = getValueForEvent(property, events[i]);\n            i--;\n        } while (o == null && i >= 0);\n        if (o != null)\n            return o;\n    }\n    Object value = values.get(property);\n    if (value == null) {\n        if (parent != null)\n            return parent.style.getValue(property, events);\n    }\n    return value;\n}",
        "classJavadoc": "/**\n * A style is a whole set of settings for a graphic element.\n * \n * <p>\n * Styles inherit each others. By default a style is all set to invalid values\n * meaning \"unset\". This means that the value is to be taken from the parent.\n * The getters are able to resolve this process by themselves and therefore must\n * be used instead of a direct access to fields.\n * </p>\n */",
        "classSourceCode": "/*\n * Copyright 2006 - 2015\n *     Stefan Balev     <stefan.balev@graphstream-project.org>\n *     Julien Baudry    <julien.baudry@graphstream-project.org>\n *     Antoine Dutot    <antoine.dutot@graphstream-project.org>\n *     Yoann Pign\u00e9      <yoann.pigne@graphstream-project.org>\n *     Guilhelm Savin   <guilhelm.savin@graphstream-project.org>\n * \n * This file is part of GraphStream <http://graphstream-project.org>.\n * \n * GraphStream is a library whose purpose is to handle static or dynamic\n * graph, create them from scratch, file or any source and display them.\n * \n * This program is free software distributed under the terms of two licenses, the\n * CeCILL-C license that fits European law, and the GNU Lesser General Public\n * License. You can  use, modify and/ or redistribute the software under the terms\n * of the CeCILL-C license as circulated by CEA, CNRS and INRIA at the following\n * URL <http://www.cecill.info> or under the terms of the GNU LGPL as published by\n * the Free Software Foundation, either version 3 of the License, or (at your\n * option) any later version.\n * \n * This program is distributed in the hope that it will be useful, but WITHOUT ANY\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A\n * PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more details.\n * \n * You should have received a copy of the GNU Lesser General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n * \n * The fact that you are presently reading this means that you have had\n * knowledge of the CeCILL-C and LGPL licenses and that you accept their terms.\n */\npackage org.graphstream.ui.graphicGraph.stylesheet;\n\nimport java.awt.Color;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.Iterator;\n\n/**\n * A style is a whole set of settings for a graphic element.\n * \n * <p>\n * Styles inherit each others. By default a style is all set to invalid values\n * meaning \"unset\". This means that the value is to be taken from the parent.\n * The getters are able to resolve this process by themselves and therefore must\n * be used instead of a direct access to fields.\n * </p>\n */\npublic class Style extends StyleConstants {\n\t// Attributes\n\n\t/**\n\t * The vertical part of the cascade.\n\t */\n\tprotected Rule parent = null;\n\n\t/**\n\t * The values of each style property.\n\t */\n\tprotected HashMap<String, Object> values = null;\n\n\t/**\n\t * The set of special styles that must override this style when some event\n\t * occurs.\n\t */\n\tprotected HashMap<String, Rule> alternates = null;\n\n\t// Constructors\n\n\t/**\n\t * New style with all settings to a special value meaning \"unset\". In this\n\t * modeField, all the settings are inherited from the parent (when set).\n\t */\n\tpublic Style() {\n\t\tthis(null);\n\t}\n\n\t/**\n\t * New style with all settings to a special value meaning \"unset\". In this\n\t * modeField, all the settings are inherited from the parent.\n\t * \n\t * @param parent\n\t *            The parent style.\n\t */\n\tpublic Style(Rule parent) {\n\t\tthis.parent = parent;\n\t\tthis.values = new HashMap<String, Object>();\n\t}\n\n\t// Access\n\n\t/**\n\t * The parent style.\n\t * \n\t * @return a style from which some settings are inherited.\n\t */\n\tpublic Rule getParent() {\n\t\treturn parent;\n\t}\n\n\t/**\n\t * Get the value of a given property.\n\t * \n\t * This code is the same for all \"getX\" methods so we explain it once here.\n\t * This is the implementation of style inheritance.\n\t * \n\t * First if some event is actually occurring, the alternative styles are\n\t * searched first. If these events have unset values for the property, their\n\t * parent are then searched.\n\t * \n\t * If the value for the property is not found in the alternative styles,\n\t * alternative styles parents, or if there is no event occurring actually,\n\t * this style is checked.\n\t * \n\t * If its value is unset, the parents of this style are checked.\n\t * \n\t * Classes are not checked here, they are processed in the\n\t * {@link org.graphstream.ui.graphicGraph.StyleGroup} class.\n\t * \n\t * @param property\n\t *            The style property the value is searched for.\n\t */\n\tpublic Object getValue(String property, String... events) {\n\t\tif (events != null && events.length > 0)// && alternates != null )\n\t\t{\n\t\t\tObject o = null;\n\t\t\tint i = events.length - 1;\n\n\t\t\tdo {\n\t\t\t\to = getValueForEvent(property, events[i]);\n\t\t\t\ti--;\n\t\t\t} while (o == null && i >= 0);\n\n\t\t\tif (o != null)\n\t\t\t\treturn o;\n\t\t}\n\n\t\tObject value = values.get(property);\n\n\t\tif (value == null) {\n\t\t\tif (parent != null)\n\t\t\t\treturn parent.style.getValue(property, events);\n\t\t}\n\n\t\treturn value;\n\t}\n\n\tprotected Object getValueForEvent(String property, String event) {\n\t\tif (alternates != null) {\n\t\t\tRule rule = alternates.get(event);\n\n\t\t\tif (rule != null) {\n\t\t\t\tObject o = rule.getStyle().values.get(property);\n\n\t\t\t\tif (o != null)\n\t\t\t\t\treturn o;\n\t\t\t}\n\t\t} else if (parent != null) {\n\t\t\treturn parent.style.getValueForEvent(property, event);\n\t\t}\n\n\t\treturn null;\n\t}\n\n\t/**\n\t * True if the given field exists in this style only (not the parents).\n\t * \n\t * @param field\n\t *            The field to test.\n\t * @return True if this style has a value for the given field.\n\t */\n\tpublic boolean hasValue(String field, String... events) {\n\t\tif (events != null && events.length > 0 && alternates != null) {\n\t\t\tfor (String event : events) {\n\t\t\t\tRule rule = alternates.get(event);\n\n\t\t\t\tif (rule != null) {\n\t\t\t\t\treturn rule.getStyle().hasValue(field);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn (values.get(field) != null);\n\t}\n\n\t// Individual style properties.\n\n\t/**\n\t * How to fill the content of an element.\n\t */\n\tpublic FillMode getFillMode() {\n\t\treturn (FillMode) getValue(\"fill-mode\");\n\t}\n\n\t/**\n\t * Which color(s) to use for fill modes that use it.\n\t */\n\tpublic Colors getFillColors() {\n\t\treturn (Colors) getValue(\"fill-color\");\n\t}\n\n\tpublic int getFillColorCount() {\n\t\tColors colors = (Colors) getValue(\"fill-color\");\n\n\t\tif (colors != null)\n\t\t\treturn colors.size();\n\n\t\treturn 0;\n\t}\n\n\tpublic Color getFillColor(int i) {\n\t\tColors colors = (Colors) getValue(\"fill-color\");\n\n\t\tif (colors != null)\n\t\t\treturn colors.get(i);\n\n\t\treturn null;\n\t}\n\n\t/**\n\t * Which image to use when filling the element contents with it.\n\t */\n\tpublic String getFillImage() {\n\t\treturn (String) getValue(\"fill-image\");\n\t}\n\n\t/**\n\t * How to draw the element contour.\n\t */\n\tpublic StrokeMode getStrokeMode() {\n\t\treturn (StrokeMode) getValue(\"stroke-mode\");\n\t}\n\n\t/**\n\t * How to color the element contour.\n\t */\n\tpublic Colors getStrokeColor() {\n\t\treturn (Colors) getValue(\"stroke-color\");\n\t}\n\n\tpublic int getStrokeColorCount() {\n\t\tColors colors = (Colors) getValue(\"stroke-color\");\n\n\t\tif (colors != null)\n\t\t\treturn colors.size();\n\n\t\treturn 0;\n\t}\n\n\tpublic Color getStrokeColor(int i) {\n\t\tColors colors = (Colors) getValue(\"stroke-color\");\n\n\t\tif (colors != null)\n\t\t\treturn colors.get(i);\n\n\t\treturn null;\n\t}\n\n\t/**\n\t * Width of the element contour.\n\t */\n\tpublic Value getStrokeWidth() {\n\t\treturn (Value) getValue(\"stroke-width\");\n\t}\n\n\t/**\n\t * How to draw the shadow of the element.\n\t */\n\tpublic ShadowMode getShadowMode() {\n\t\treturn (ShadowMode) getValue(\"shadow-mode\");\n\t}\n\n\t/**\n\t * Color(s) of the element shadow.\n\t */\n\tpublic Colors getShadowColors() {\n\t\treturn (Colors) getValue(\"shadow-color\");\n\t}\n\n\tpublic int getShadowColorCount() {\n\t\tColors colors = (Colors) getValue(\"shadow-color\");\n\n\t\tif (colors != null)\n\t\t\treturn colors.size();\n\n\t\treturn 0;\n\t}\n\n\tpublic Color getShadowColor(int i) {\n\t\tColors colors = (Colors) getValue(\"shadow-color\");\n\n\t\tif (colors != null)\n\t\t\treturn colors.get(i);\n\n\t\treturn null;\n\t}\n\n\t/**\n\t * Width of the element shadow.\n\t */\n\tpublic Value getShadowWidth() {\n\t\treturn (Value) getValue(\"shadow-width\");\n\t}\n\n\t/**\n\t * Offset of the element shadow centre according to the element centre.\n\t */\n\tpublic Values getShadowOffset() {\n\t\treturn (Values) getValue(\"shadow-offset\");\n\t}\n\n\t/**\n\t * Additional space to add inside the element between its contour and its\n\t * contents.\n\t */\n\tpublic Values getPadding() {\n\t\treturn (Values) getValue(\"padding\");\n\t}\n\n\t/**\n\t * How to draw the text of the element.\n\t */\n\tpublic TextMode getTextMode() {\n\t\treturn (TextMode) getValue(\"text-mode\");\n\t}\n\n\t/**\n\t * How and when to show the text of the element.\n\t */\n\tpublic TextVisibilityMode getTextVisibilityMode() {\n\t\treturn (TextVisibilityMode) getValue(\"text-visibility-mode\");\n\t}\n\n\t/**\n\t * Visibility values if the text visibility changes.\n\t */\n\tpublic Values getTextVisibility() {\n\t\treturn (Values) getValue(\"text-visibility\");\n\t}\n\n\t/**\n\t * The text color(s).\n\t */\n\tpublic Colors getTextColor() {\n\t\treturn (Colors) getValue(\"text-color\");\n\t}\n\n\tpublic int getTextColorCount() {\n\t\tColors colors = (Colors) getValue(\"text-color\");\n\n\t\tif (colors != null)\n\t\t\treturn colors.size();\n\n\t\treturn 0;\n\t}\n\n\tpublic Color getTextColor(int i) {\n\t\tColors colors = (Colors) getValue(\"text-color\");\n\n\t\tif (colors != null)\n\t\t\treturn colors.get(i);\n\n\t\treturn null;\n\t}\n\n\t/**\n\t * The text font style variation.\n\t */\n\tpublic TextStyle getTextStyle() {\n\t\treturn (TextStyle) getValue(\"text-style\");\n\t}\n\n\t/**\n\t * The text font.\n\t */\n\tpublic String getTextFont() {\n\t\treturn (String) getValue(\"text-font\");\n\t}\n\n\t/**\n\t * The text size in points.\n\t */\n\tpublic Value getTextSize() {\n\t\treturn (Value) getValue(\"text-size\");\n\t}\n\n\t/**\n\t * How to draw the icon around the text (or instead of the text).\n\t */\n\tpublic IconMode getIconMode() {\n\t\treturn (IconMode) getValue(\"icon-mode\");\n\t}\n\n\t/**\n\t * The icon image to use.\n\t */\n\tpublic String getIcon() {\n\t\treturn (String) getValue(\"icon\");\n\t}\n\n\t/**\n\t * How and when to show the element.\n\t */\n\tpublic VisibilityMode getVisibilityMode() {\n\t\treturn (VisibilityMode) getValue(\"visibility-mode\");\n\t}\n\n\t/**\n\t * The element visibility if it is variable.\n\t */\n\tpublic Values getVisibility() {\n\t\treturn (Values) getValue(\"visibility\");\n\t}\n\n\t/**\n\t * How to size the element.\n\t */\n\tpublic SizeMode getSizeMode() {\n\t\treturn (SizeMode) getValue(\"size-mode\");\n\t}\n\n\t/**\n\t * The element dimensions.\n\t */\n\tpublic Values getSize() {\n\t\treturn (Values) getValue(\"size\");\n\t}\n\n\t/**\n\t * The element polygonal shape.\n\t */\n\tpublic Values getShapePoints() {\n\t\treturn (Values) getValue(\"shape-points\");\n\t}\n\n\t/**\n\t * How to align the text according to the element centre.\n\t */\n\tpublic TextAlignment getTextAlignment() {\n\t\treturn (TextAlignment) getValue(\"text-alignment\");\n\t}\n\n\tpublic TextBackgroundMode getTextBackgroundMode() {\n\t\treturn (TextBackgroundMode) getValue(\"text-background-mode\");\n\t}\n\n\tpublic Colors getTextBackgroundColor() {\n\t\treturn (Colors) getValue(\"text-background-color\");\n\t}\n\n\tpublic Color getTextBackgroundColor(int i) {\n\t\tColors colors = (Colors) getValue(\"text-background-color\");\n\n\t\tif (colors != null)\n\t\t\treturn colors.get(i);\n\n\t\treturn null;\n\t}\n\t\n\t/**\n\t * Offset of the text from its computed position.\n\t */\n\tpublic Values getTextOffset() {\n\t\treturn (Values) getValue(\"text-offset\");\n\t}\n\n\t/**\n\t * Padding of the text inside its background, if any.\n\t */\n\tpublic Values getTextPadding() {\n\t\treturn (Values) getValue(\"text-padding\");\n\t}\n\n\t/**\n\t * The element shape.\n\t */\n\tpublic Shape getShape() {\n\t\treturn (Shape) getValue(\"shape\");\n\t}\n\n\t/**\n\t * The element JComponent type if available.\n\t */\n\tpublic JComponents getJComponent() {\n\t\treturn (JComponents) getValue(\"jcomponent\");\n\t}\n\n\t/**\n\t * How to orient a sprite according to its attachement.\n\t */\n\tpublic SpriteOrientation getSpriteOrientation() {\n\t\treturn (SpriteOrientation) getValue(\"sprite-orientation\");\n\t}\n\n\t/**\n\t * The shape of edges arrows.\n\t */\n\tpublic ArrowShape getArrowShape() {\n\t\treturn (ArrowShape) getValue(\"arrow-shape\");\n\t}\n\n\t/**\n\t * Image to use for the arrow.\n\t */\n\tpublic String getArrowImage() {\n\t\treturn (String) getValue(\"arrow-image\");\n\t}\n\n\t/**\n\t * Edge arrow dimensions.\n\t */\n\tpublic Values getArrowSize() {\n\t\treturn (Values) getValue(\"arrow-size\");\n\t}\n\n\t/**\n\t * Colour of all non-graph, non-edge, non-node, non-sprite things.\n\t */\n\tpublic Colors getCanvasColor() {\n\t\treturn (Colors) getValue(\"canvas-color\");\n\t}\n\n\tpublic int getCanvasColorCount() {\n\t\tColors colors = (Colors) getValue(\"canvas-color\");\n\n\t\tif (colors != null)\n\t\t\treturn colors.size();\n\n\t\treturn 0;\n\t}\n\n\tpublic Color getCanvasColor(int i) {\n\t\tColors colors = (Colors) getValue(\"canvas-color\");\n\n\t\tif (colors != null)\n\t\t\treturn colors.get(i);\n\n\t\treturn null;\n\t}\n\n\tpublic Integer getZIndex() {\n\t\treturn (Integer) getValue(\"z-index\");\n\t}\n\n\t// Commands\n\n\t/**\n\t * Set the default values for each setting.\n\t */\n\tpublic void setDefaults() {\n\t\tColors fillColor = new Colors();\n\t\tColors strokeColor = new Colors();\n\t\tColors shadowColor = new Colors();\n\t\tColors textColor = new Colors();\n\t\tColors canvasColor = new Colors();\n\t\tColors textBgColor = new Colors();\n\n\t\tfillColor.add(Color.BLACK);\n\t\tstrokeColor.add(Color.BLACK);\n\t\tshadowColor.add(Color.GRAY);\n\t\ttextColor.add(Color.BLACK);\n\t\tcanvasColor.add(Color.WHITE);\n\t\ttextBgColor.add(Color.WHITE);\n\n\t\tvalues.put(\"z-index\", new Integer(0));\n\n\t\tvalues.put(\"fill-mode\", FillMode.PLAIN);\n\t\tvalues.put(\"fill-color\", fillColor);\n\t\tvalues.put(\"fill-image\", null);\n\n\t\tvalues.put(\"stroke-mode\", StrokeMode.NONE);\n\t\tvalues.put(\"stroke-color\", strokeColor);\n\t\tvalues.put(\"stroke-width\", new Value(Units.PX, 1));\n\n\t\tvalues.put(\"shadow-mode\", ShadowMode.NONE);\n\t\tvalues.put(\"shadow-color\", shadowColor);\n\t\tvalues.put(\"shadow-width\", new Value(Units.PX, 3));\n\t\tvalues.put(\"shadow-offset\", new Values(Units.PX, 3, 3));\n\n\t\tvalues.put(\"padding\", new Values(Units.PX, 0, 0, 0));\n\n\t\tvalues.put(\"text-mode\", TextMode.NORMAL);\n\t\tvalues.put(\"text-visibility-mode\", TextVisibilityMode.NORMAL);\n\t\tvalues.put(\"text-visibility\", null);\n\t\tvalues.put(\"text-color\", textColor);\n\t\tvalues.put(\"text-style\", TextStyle.NORMAL);\n\t\tvalues.put(\"text-font\", \"default\");\n\t\tvalues.put(\"text-size\", new Value(Units.PX, 10));\n\t\tvalues.put(\"text-alignment\", TextAlignment.CENTER);\n\t\tvalues.put(\"text-background-mode\", TextBackgroundMode.NONE);\n\t\tvalues.put(\"text-background-color\", textBgColor);\n\t\tvalues.put(\"text-offset\", new Values(Units.PX, 0, 0));\n\t\tvalues.put(\"text-padding\", new Values(Units.PX, 0, 0));\n\n\t\tvalues.put(\"icon-mode\", IconMode.NONE);\n\t\tvalues.put(\"icon\", null);\n\n\t\tvalues.put(\"visibility-mode\", VisibilityMode.NORMAL);\n\t\tvalues.put(\"visibility\", null);\n\n\t\tvalues.put(\"size-mode\", SizeMode.NORMAL);\n\t\tvalues.put(\"size\", new Values(Units.PX, 10, 10, 10));\n\n\t\tvalues.put(\"shape\", Shape.CIRCLE);\n\t\tvalues.put(\"shape-points\", null);\n\t\tvalues.put(\"jcomponent\", null);\n\n\t\tvalues.put(\"sprite-orientation\", SpriteOrientation.NONE);\n\n\t\tvalues.put(\"arrow-shape\", ArrowShape.ARROW);\n\t\tvalues.put(\"arrow-size\", new Values(Units.PX, 8, 4));\n\t\tvalues.put(\"arrow-image\", null);\n\n\t\tvalues.put(\"canvas-color\", canvasColor);\n\n\t}\n\n\t/**\n\t * Copy all the settings of the other style that are set, excepted the\n\t * parent. Only the settings that have a value (different from \"unset\") are\n\t * copied. The parent field is never copied.\n\t * \n\t * @param other\n\t *            Another style.\n\t */\n\tpublic void augment(Style other) {\n\t\tif (other != this) {\n\t\t\taugmentField(\"z-index\", other);\n\t\t\taugmentField(\"fill-mode\", other);\n\t\t\taugmentField(\"fill-color\", other);\n\t\t\taugmentField(\"fill-image\", other);\n\n\t\t\taugmentField(\"stroke-mode\", other);\n\t\t\taugmentField(\"stroke-color\", other);\n\t\t\taugmentField(\"stroke-width\", other);\n\n\t\t\taugmentField(\"shadow-mode\", other);\n\t\t\taugmentField(\"shadow-color\", other);\n\t\t\taugmentField(\"shadow-width\", other);\n\t\t\taugmentField(\"shadow-offset\", other);\n\n\t\t\taugmentField(\"padding\", other);\n\n\t\t\taugmentField(\"text-mode\", other);\n\t\t\taugmentField(\"text-visibility-mode\", other);\n\t\t\taugmentField(\"text-visibility\", other);\n\t\t\taugmentField(\"text-color\", other);\n\t\t\taugmentField(\"text-style\", other);\n\t\t\taugmentField(\"text-font\", other);\n\t\t\taugmentField(\"text-size\", other);\n\t\t\taugmentField(\"text-alignment\", other);\n\t\t\taugmentField(\"text-background-mode\", other);\n\t\t\taugmentField(\"text-background-color\", other);\n\t\t\taugmentField(\"text-offset\", other);\n\t\t\taugmentField(\"text-padding\", other);\n\n\t\t\taugmentField(\"icon-mode\", other);\n\t\t\taugmentField(\"icon\", other);\n\n\t\t\taugmentField(\"visibility-mode\", other);\n\t\t\taugmentField(\"visibility\", other);\n\n\t\t\taugmentField(\"size-mode\", other);\n\t\t\taugmentField(\"size\", other);\n\n\t\t\taugmentField(\"shape\", other);\n\t\t\taugmentField(\"shape-points\", other);\n\t\t\taugmentField(\"jcomponent\", other);\n\n\t\t\taugmentField(\"sprite-orientation\", other);\n\n\t\t\taugmentField(\"arrow-shape\", other);\n\t\t\taugmentField(\"arrow-size\", other);\n\t\t\taugmentField(\"arrow-image\", other);\n\n\t\t\taugmentField(\"canvas-color\", other);\n\t\t}\n\t}\n\n\tprotected void augmentField(String field, Style other) {\n\t\tObject value = other.values.get(field);\n\n\t\tif (value != null) {\n\t\t\tif (value instanceof Value)\n\t\t\t\tsetValue(field, new Value((Value) value));\n\t\t\telse if (value instanceof Values)\n\t\t\t\tsetValue(field, new Values((Values) value));\n\t\t\telse if (value instanceof Colors)\n\t\t\t\tsetValue(field, new Colors((Colors) value));\n\t\t\telse\n\t\t\t\tsetValue(field, value);\n\t\t}\n\t}\n\n\t/**\n\t * Set or change the parent of the style.\n\t * \n\t * @param parent\n\t *            The new parent.\n\t */\n\tpublic void reparent(Rule parent) {\n\t\tthis.parent = parent;\n\t}\n\n\t/**\n\t * Add an alternative style for specific events.\n\t * \n\t * @param event\n\t *            The event that triggers the alternate style.\n\t * @param alternateStyle\n\t *            The alternative style.\n\t */\n\tpublic void addAlternateStyle(String event, Rule alternateStyle) {\n\t\tif (alternates == null)\n\t\t\talternates = new HashMap<String, Rule>();\n\n\t\talternates.put(event, alternateStyle);\n\t}\n\n\t// Commands -- Setters\n\n\tpublic void setValue(String field, Object value) {\n\t\tvalues.put(field, value);\n\t}\n\n\t// Utility\n\n\t@Override\n\tpublic String toString() {\n\t\treturn toString(-1);\n\t}\n\n\tpublic String toString(int level) {\n\t\tStringBuilder builder = new StringBuilder();\n\t\tString prefix = \"\";\n\t\tString sprefix = \"    \";\n\n\t\tif (level > 0) {\n\t\t\tfor (int i = 0; i < level; i++)\n\t\t\t\tprefix += \"    \";\n\t\t}\n\n\t\t// builder.append( String.format( \"%s%s%n\", prefix, super.toString() )\n\t\t// );\n\n\t\tif (parent != null) {\n\t\t\tRule p = parent;\n\n\t\t\twhile (!(p == null)) {\n\t\t\t\tbuilder.append(String.format(\" -> %s\", p.selector.toString()));\n\t\t\t\tp = p.getStyle().getParent();\n\t\t\t}\n\n\t\t}\n\n\t\tif (alternates != null && alternates.size() > 0) {\n\t\t\tbuilder.append(String.format(\" /\"));\n\t\t\tfor (Rule rule : alternates.values()) {\n\t\t\t\tbuilder.append(' ');\n\t\t\t\tbuilder.append(rule.selector.toString());\n\t\t\t}\n\t\t}\n\n\t\tbuilder.append(String.format(\"%n\"));\n\n\t\tIterator<String> i = values.keySet().iterator();\n\n\t\twhile (i.hasNext()) {\n\t\t\tString key = i.next();\n\t\t\tObject o = values.get(key);\n\n\t\t\tif (o instanceof ArrayList<?>) {\n\t\t\t\tArrayList<?> array = (ArrayList<?>) o;\n\n\t\t\t\tif (array.size() > 0) {\n\t\t\t\t\tbuilder.append(String.format(\"%s%s%s%s: \", prefix, sprefix,\n\t\t\t\t\t\t\tsprefix, key));\n\n\t\t\t\t\tfor (Object p : array)\n\t\t\t\t\t\tbuilder.append(String.format(\"%s \", p.toString()));\n\n\t\t\t\t\tbuilder.append(String.format(\"%n\"));\n\t\t\t\t} else {\n\t\t\t\t\tbuilder.append(String.format(\"%s%s%s%s: <empty>%n\", prefix,\n\t\t\t\t\t\t\tsprefix, sprefix, key));\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tbuilder.append(String.format(\"%s%s%s%s: %s%n\", prefix, sprefix,\n\t\t\t\t\t\tsprefix, key, o != null ? o.toString() : \"<null>\"));\n\t\t\t}\n\t\t}\n\n\t\t/*\n\t\t * if( level >= 0 ) { if( parent != null ) { String rec =\n\t\t * parent.style.toString( level + 1 );\n\t\t * \n\t\t * builder.append( rec ); } }\n\t\t */\n\t\tString res = builder.toString();\n\n\t\tif (res.length() == 0)\n\t\t\treturn String.format(\"%s%s<empty>%n\", prefix, prefix);\n\n\t\treturn res;\n\t}\n}",
        "tokensGeneralGrammar": [
            "null",
            "true",
            "false",
            ",",
            ".",
            ":",
            ";",
            "?",
            "(",
            ")",
            "jdVar",
            "stream",
            "Arrays",
            "allMatch",
            "noneMatch",
            "anyMatch",
            "~",
            ">>",
            "<<",
            ">>>",
            "|",
            "&",
            "^",
            "+",
            "-",
            "/",
            "*",
            "%",
            "&&",
            "||",
            ">=",
            "<=",
            ">",
            "<",
            "==",
            "!=",
            "instanceof",
            "class",
            "methodResultID",
            "this"
        ],
        "tokensGeneralValuesGlobalDictionary": [
            [
                "0",
                "int"
            ],
            [
                "1",
                "int"
            ],
            [
                "-1",
                "int"
            ],
            [
                "0.0",
                "double"
            ],
            [
                "1.0",
                "double"
            ],
            [
                "-1.0",
                "double"
            ],
            [
                "\"\"",
                "String"
            ],
            [
                "\" \"",
                "String"
            ]
        ],
        "tokensProjectClasses": [
            [
                "DefaultCamera",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "GradientFactory",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "GraphMetrics",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "Graphics2DOutput",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "ImageCache",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "StrokeFactory",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "FontCache",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "FontSlot",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "DefaultView",
                "org.graphstream.ui.swingViewer"
            ],
            [
                "SpriteRenderer",
                "org.graphstream.ui.swingViewer.basicRenderer"
            ],
            [
                "ElementRenderer",
                "org.graphstream.ui.swingViewer.basicRenderer"
            ],
            [
                "NodeRenderer",
                "org.graphstream.ui.swingViewer.basicRenderer"
            ],
            [
                "Arrow",
                "org.graphstream.ui.swingViewer.basicRenderer.shapes"
            ],
            [
                "Shape",
                "org.graphstream.ui.swingViewer.basicRenderer.shapes"
            ],
            [
                "EdgeRenderer",
                "org.graphstream.ui.swingViewer.basicRenderer"
            ],
            [
                "SwingBasicGraphRenderer",
                "org.graphstream.ui.swingViewer.basicRenderer"
            ],
            [
                "GraphRendererBase",
                "org.graphstream.ui.swingViewer"
            ],
            [
                "GraphRenderer",
                "org.graphstream.ui.swingViewer"
            ],
            [
                "LayerRenderer",
                "org.graphstream.ui.swingViewer"
            ],
            [
                "ViewPanel",
                "org.graphstream.ui.swingViewer"
            ],
            [
                "Layouts",
                "org.graphstream.ui.layout"
            ],
            [
                "Layout",
                "org.graphstream.ui.layout"
            ],
            [
                "LayoutRunner",
                "org.graphstream.ui.layout"
            ],
            [
                "NodeParticle",
                "org.graphstream.ui.layout.springbox"
            ],
            [
                "GraphCellData",
                "org.graphstream.ui.layout.springbox"
            ],
            [
                "EdgeSpring",
                "org.graphstream.ui.layout.springbox"
            ],
            [
                "Energies",
                "org.graphstream.ui.layout.springbox"
            ],
            [
                "BarnesHutLayout",
                "org.graphstream.ui.layout.springbox"
            ],
            [
                "LinLog",
                "org.graphstream.ui.layout.springbox.implementations"
            ],
            [
                "LinLogNodeParticle",
                "org.graphstream.ui.layout.springbox.implementations"
            ],
            [
                "SpringBoxNodeParticle",
                "org.graphstream.ui.layout.springbox.implementations"
            ],
            [
                "SpringBox",
                "org.graphstream.ui.layout.springbox.implementations"
            ],
            [
                "Point2",
                "org.graphstream.ui.geom"
            ],
            [
                "Vector2",
                "org.graphstream.ui.geom"
            ],
            [
                "Vector3",
                "org.graphstream.ui.geom"
            ],
            [
                "Point3",
                "org.graphstream.ui.geom"
            ],
            [
                "ViewerListener",
                "org.graphstream.ui.view"
            ],
            [
                "MouseManager",
                "org.graphstream.ui.view.util"
            ],
            [
                "ShortcutManager",
                "org.graphstream.ui.view.util"
            ],
            [
                "DefaultShortcutManager",
                "org.graphstream.ui.view.util"
            ],
            [
                "FpsCounter",
                "org.graphstream.ui.view.util"
            ],
            [
                "CubicCurve",
                "org.graphstream.ui.view.util"
            ],
            [
                "DefaultMouseManager",
                "org.graphstream.ui.view.util"
            ],
            [
                "Selection",
                "org.graphstream.ui.view"
            ],
            [
                "ViewerPipe",
                "org.graphstream.ui.view"
            ],
            [
                "Viewer",
                "org.graphstream.ui.view"
            ],
            [
                "View",
                "org.graphstream.ui.view"
            ],
            [
                "Camera",
                "org.graphstream.ui.view"
            ],
            [
                "Sprite",
                "org.graphstream.ui.spriteManager"
            ],
            [
                "InvalidSpriteIDException",
                "org.graphstream.ui.spriteManager"
            ],
            [
                "SpriteManager",
                "org.graphstream.ui.spriteManager"
            ],
            [
                "SpriteFactory",
                "org.graphstream.ui.spriteManager"
            ],
            [
                "StyleGroupListener",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "Colors",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "Values",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "StyleSheetListener",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "StyleSheetParserTokenManager",
                "org.graphstream.ui.graphicGraph.stylesheet.parser"
            ],
            [
                "StyleSheetParserConstants",
                "org.graphstream.ui.graphicGraph.stylesheet.parser"
            ],
            [
                "StyleSheetParser",
                "org.graphstream.ui.graphicGraph.stylesheet.parser"
            ],
            [
                "Style",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "StyleSheet",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "StyleConstants",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "Selector",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "Value",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "Rule",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "GraphicNode",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "StyleGroup",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphPosLengthUtils",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphicEdge",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphicElementChangeListener",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphicGraph",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "StyleGroupSet",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphicSprite",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphicElement",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "VerboseSink",
                "org.graphstream.util"
            ],
            [
                "GraphListeners",
                "org.graphstream.util"
            ],
            [
                "Environment",
                "org.graphstream.util"
            ],
            [
                "GraphDiff",
                "org.graphstream.util"
            ],
            [
                "Filters",
                "org.graphstream.util"
            ],
            [
                "FilteredEdgeIterator",
                "org.graphstream.util"
            ],
            [
                "Parser",
                "org.graphstream.util.parser"
            ],
            [
                "ParserFactory",
                "org.graphstream.util.parser"
            ],
            [
                "TokenMgrError",
                "org.graphstream.util.parser"
            ],
            [
                "ParseException",
                "org.graphstream.util.parser"
            ],
            [
                "SimpleCharStream",
                "org.graphstream.util.parser"
            ],
            [
                "Token",
                "org.graphstream.util.parser"
            ],
            [
                "ISODateIO",
                "org.graphstream.util.time"
            ],
            [
                "ISODateComponent",
                "org.graphstream.util.time"
            ],
            [
                "FilteredNodeIterator",
                "org.graphstream.util"
            ],
            [
                "FixedArrayList",
                "org.graphstream.util.set"
            ],
            [
                "StepCounter",
                "org.graphstream.util"
            ],
            [
                "GraphSpells",
                "org.graphstream.util.cumulative"
            ],
            [
                "CumulativeAttributes",
                "org.graphstream.util.cumulative"
            ],
            [
                "CumulativeSpells",
                "org.graphstream.util.cumulative"
            ],
            [
                "Filter",
                "org.graphstream.util"
            ],
            [
                "PipeAdapter",
                "org.graphstream.stream"
            ],
            [
                "GraphParseException",
                "org.graphstream.stream"
            ],
            [
                "ElementSink",
                "org.graphstream.stream"
            ],
            [
                "URLSource",
                "org.graphstream.stream.net"
            ],
            [
                "HTTPSource",
                "org.graphstream.stream.net"
            ],
            [
                "SourceAdapter",
                "org.graphstream.stream"
            ],
            [
                "AttributeSink",
                "org.graphstream.stream"
            ],
            [
                "GMLParserConstants",
                "org.graphstream.stream.file.gml"
            ],
            [
                "GMLParserTokenManager",
                "org.graphstream.stream.file.gml"
            ],
            [
                "GMLContext",
                "org.graphstream.stream.file.gml"
            ],
            [
                "Graphics",
                "org.graphstream.stream.file.gml"
            ],
            [
                "KeyValues",
                "org.graphstream.stream.file.gml"
            ],
            [
                "GMLParser",
                "org.graphstream.stream.file.gml"
            ],
            [
                "FileSinkGraphML",
                "org.graphstream.stream.file"
            ],
            [
                "TLPParserConstants",
                "org.graphstream.stream.file.tlp"
            ],
            [
                "TLPParser",
                "org.graphstream.stream.file.tlp"
            ],
            [
                "TLPParserTokenManager",
                "org.graphstream.stream.file.tlp"
            ],
            [
                "FileSinkFactory",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceEdge",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkBase",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkTikZ",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceGEXF",
                "org.graphstream.stream.file"
            ],
            [
                "DOTParser",
                "org.graphstream.stream.file.dot"
            ],
            [
                "DOTParserConstants",
                "org.graphstream.stream.file.dot"
            ],
            [
                "DOTParserTokenManager",
                "org.graphstream.stream.file.dot"
            ],
            [
                "FileSink",
                "org.graphstream.stream.file"
            ],
            [
                "PajekContext",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "Graphics",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "NodeGraphics",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "EdgeGraphics",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "EdgeMatrix",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "PajekParserTokenManager",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "PajekParserConstants",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "FileSourceXML",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkBaseFiltered",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkDOT",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceParser",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkDGSFiltered",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceDOT",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceDGS1And2",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceGraphML",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceFactory",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkImages",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkDynamicGML",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkSVG",
                "org.graphstream.stream.file"
            ],
            [
                "GEXFSpell",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "SmartXMLWriter",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFElement",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFEdges",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFAttValues",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFEdge",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFSpells",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFAttValue",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFNodes",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFNode",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFMeta",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFAttributes",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXF",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFGraph",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFAttribute",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "OldFileSourceDGS",
                "org.graphstream.stream.file.dgs"
            ],
            [
                "DGSParser",
                "org.graphstream.stream.file.dgs"
            ],
            [
                "FileSourceBase",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkGML",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceDGS",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkDGSUtility",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceTLP",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkSVG2",
                "org.graphstream.stream.file"
            ],
            [
                "FileSource",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceNCol",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourcePajek",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceGPX",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceLGL",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkGEXF2",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceGML",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkGEXF",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkDGS",
                "org.graphstream.stream.file"
            ],
            [
                "ProxyPipe",
                "org.graphstream.stream"
            ],
            [
                "Sink",
                "org.graphstream.stream"
            ],
            [
                "Timeline",
                "org.graphstream.stream"
            ],
            [
                "Pipe",
                "org.graphstream.stream"
            ],
            [
                "SinkAdapter",
                "org.graphstream.stream"
            ],
            [
                "Replayable",
                "org.graphstream.stream"
            ],
            [
                "Source",
                "org.graphstream.stream"
            ],
            [
                "AnnotatedSink",
                "org.graphstream.stream"
            ],
            [
                "GraphReplay",
                "org.graphstream.stream"
            ],
            [
                "AttributePipe",
                "org.graphstream.stream"
            ],
            [
                "SinkTime",
                "org.graphstream.stream.sync"
            ],
            [
                "SourceTime",
                "org.graphstream.stream.sync"
            ],
            [
                "PipeBase",
                "org.graphstream.stream"
            ],
            [
                "ThreadProxyPipe",
                "org.graphstream.stream.thread"
            ],
            [
                "ThreadProxyPipeOld",
                "org.graphstream.stream.thread"
            ],
            [
                "RMISource",
                "org.graphstream.stream.rmi"
            ],
            [
                "RMIAdapterOut",
                "org.graphstream.stream.rmi"
            ],
            [
                "RMISink",
                "org.graphstream.stream.rmi"
            ],
            [
                "RMIAdapterIn",
                "org.graphstream.stream.rmi"
            ],
            [
                "SourceBase",
                "org.graphstream.stream"
            ],
            [
                "NetStreamDecoder",
                "org.graphstream.stream.netstream"
            ],
            [
                "NetStreamReceiver",
                "org.graphstream.stream.netstream"
            ],
            [
                "NetStreamConstants",
                "org.graphstream.stream.netstream"
            ],
            [
                "NetStreamSender",
                "org.graphstream.stream.netstream"
            ],
            [
                "DefaultNetStreamDecoder",
                "org.graphstream.stream.netstream"
            ],
            [
                "Base64",
                "org.graphstream.stream.netstream.packing"
            ],
            [
                "NetStreamUnpacker",
                "org.graphstream.stream.netstream.packing"
            ],
            [
                "Base64Packer",
                "org.graphstream.stream.netstream.packing"
            ],
            [
                "Base64Unpacker",
                "org.graphstream.stream.netstream.packing"
            ],
            [
                "NetStreamPacker",
                "org.graphstream.stream.netstream.packing"
            ],
            [
                "AttributePredicate",
                "org.graphstream.stream"
            ],
            [
                "Element",
                "org.graphstream.graph"
            ],
            [
                "Node",
                "org.graphstream.graph"
            ],
            [
                "BreadthFirstIterator",
                "org.graphstream.graph"
            ],
            [
                "Graph",
                "org.graphstream.graph"
            ],
            [
                "EdgeRejectedException",
                "org.graphstream.graph"
            ],
            [
                "CompoundAttribute",
                "org.graphstream.graph"
            ],
            [
                "Structure",
                "org.graphstream.graph"
            ],
            [
                "DepthFirstIterator",
                "org.graphstream.graph"
            ],
            [
                "NullAttributeException",
                "org.graphstream.graph"
            ],
            [
                "IdAlreadyInUseException",
                "org.graphstream.graph"
            ],
            [
                "EdgeFactory",
                "org.graphstream.graph"
            ],
            [
                "ElementNotFoundException",
                "org.graphstream.graph"
            ],
            [
                "OneAttributeElement",
                "org.graphstream.graph.implementations"
            ],
            [
                "AdjacencyListNode",
                "org.graphstream.graph.implementations"
            ],
            [
                "SingleNode",
                "org.graphstream.graph.implementations"
            ],
            [
                "AbstractElement",
                "org.graphstream.graph.implementations"
            ],
            [
                "AdjacencyListGraph",
                "org.graphstream.graph.implementations"
            ],
            [
                "AbstractNode",
                "org.graphstream.graph.implementations"
            ],
            [
                "DefaultGraph",
                "org.graphstream.graph.implementations"
            ],
            [
                "MultiGraph",
                "org.graphstream.graph.implementations"
            ],
            [
                "Graphs",
                "org.graphstream.graph.implementations"
            ],
            [
                "SingleGraph",
                "org.graphstream.graph.implementations"
            ],
            [
                "MultiNode",
                "org.graphstream.graph.implementations"
            ],
            [
                "AbstractGraph",
                "org.graphstream.graph.implementations"
            ],
            [
                "AbstractEdge",
                "org.graphstream.graph.implementations"
            ],
            [
                "GraphFactory",
                "org.graphstream.graph"
            ],
            [
                "NodeFactory",
                "org.graphstream.graph"
            ],
            [
                "Edge",
                "org.graphstream.graph"
            ],
            [
                "Path",
                "org.graphstream.graph"
            ]
        ],
        "tokensProjectClassesNonPrivateStaticNonVoidMethods": [
            [
                "gradientInArea",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static Paint gradientInArea(int x0, int y0, int width, int height, Style style)"
            ],
            [
                "linearGradientFromStyle",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static Paint linearGradientFromStyle(float x0, float y0, float x1, float y1, Style style)"
            ],
            [
                "radialGradientFromStyle",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static Paint radialGradientFromStyle(float cx, float cy, float radius, Style style)"
            ],
            [
                "radialGradientFromStyle",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static Paint radialGradientFromStyle(float cx, float cy, float radius, float fx, float fy, Style style)"
            ],
            [
                "createFractions",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "protected static float[] createFractions(Style style)"
            ],
            [
                "createColors",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "protected static Color[] createColors(Style style)"
            ],
            [
                "defaultImageCache",
                "org.graphstream.ui.swingViewer.util",
                "ImageCache",
                "public static ImageCache defaultImageCache()"
            ],
            [
                "generateStroke",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "public static Stroke generateStroke(Style style, GraphMetrics metrics)"
            ],
            [
                "generatePlainStroke",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "protected static Stroke generatePlainStroke(Style style, GraphMetrics metrics)"
            ],
            [
                "generateDotsStroke",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "protected static Stroke generateDotsStroke(Style style, GraphMetrics metrics)"
            ],
            [
                "generateDashesStroke",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "protected static Stroke generateDashesStroke(Style style, GraphMetrics metrics)"
            ],
            [
                "defaultFontCache",
                "org.graphstream.ui.swingViewer.util",
                "FontCache",
                "public static FontCache defaultFontCache()"
            ],
            [
                "newLayoutAlgorithm",
                "org.graphstream.ui.layout",
                "Layouts",
                "public static Layout newLayoutAlgorithm()"
            ],
            [
                "eval",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "public static double eval(double x0, double x1, double x2, double x3, double t)"
            ],
            [
                "eval",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "public static Point2 eval(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t)"
            ],
            [
                "eval",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "public static Point2D.Double eval(Point2D.Double p0, Point2D.Double p1, Point2D.Double p2, Point2D.Double p3, double t)"
            ],
            [
                "eval",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "public static Point2 eval(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t, Point2 result)"
            ],
            [
                "derivative",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "public static double derivative(double x0, double x1, double x2, double x3, double t)"
            ],
            [
                "derivative",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "public static Point2 derivative(Point2 p0, Point2 p1, Point2 p2, Point3 p3, double t)"
            ],
            [
                "derivative",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "public static Point2 derivative(Point2 p0, Point2 p1, Point2 p2, Point3 p3, double t, Point2 result)"
            ],
            [
                "perpendicular",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "public static Vector2 perpendicular(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t)"
            ],
            [
                "perpendicular",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "public static Vector2 perpendicular(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t, Vector2 result)"
            ],
            [
                "perpendicular",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "public static Point2D.Double perpendicular(Point2D.Double p0, Point2D.Double p1, Point2D.Double p2, Point2D.Double p3, double t)"
            ],
            [
                "newGraphRenderer",
                "org.graphstream.ui.view",
                "Viewer",
                "public static GraphRenderer newGraphRenderer()"
            ],
            [
                "getPositionValue",
                "org.graphstream.ui.spriteManager",
                "SpriteManager",
                "protected static Values getPositionValue(Object value)"
            ],
            [
                "convertColor",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "public static Color convertColor(Object anyValue)"
            ],
            [
                "convertLabel",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "public static String convertLabel(Object value)"
            ],
            [
                "convertWidth",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "public static float convertWidth(Object value)"
            ],
            [
                "convertValue",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "public static Value convertValue(Object value)"
            ],
            [
                "convertUnit",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "protected static Units convertUnit(String unit)"
            ],
            [
                "nodePosition",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "public static double[] nodePosition(Graph graph, String id)"
            ],
            [
                "nodePointPosition",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "public static Point3 nodePointPosition(Graph graph, String id)"
            ],
            [
                "nodePosition",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "public static double[] nodePosition(Node node)"
            ],
            [
                "nodePointPosition",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "public static Point3 nodePointPosition(Node node)"
            ],
            [
                "edgeLength",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "public static double edgeLength(Graph graph, String id)"
            ],
            [
                "edgeLength",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "public static double edgeLength(Edge edge)"
            ],
            [
                "getGlobalEnvironment",
                "org.graphstream.util",
                "Environment",
                "public static Environment getGlobalEnvironment()"
            ],
            [
                "falseFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> falseFilter()"
            ],
            [
                "trueFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> trueFilter()"
            ],
            [
                "byAttributeFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> byAttributeFilter(String key, Object expectedValue)"
            ],
            [
                "separateNodeAndEdgeFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element, U extends Element> Filter<Element> separateNodeAndEdgeFilter(Filter<T> nodeFilter, Filter<U> edgeFilter)"
            ],
            [
                "byExtremitiesFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element, U extends Element> Filter<T> byExtremitiesFilter(Filter<U> f)"
            ],
            [
                "byIdFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> byIdFilter(String idPattern)"
            ],
            [
                "isContained",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> isContained(final Collection<? extends T> set)"
            ],
            [
                "isIdContained",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> isIdContained(final Collection<String> set)"
            ],
            [
                "and",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> and(Filter<T> f1, Filter<T> f2)"
            ],
            [
                "or",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> or(Filter<T> f1, Filter<T> f2)"
            ],
            [
                "xor",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> xor(Filter<T> f1, Filter<T> f2)"
            ],
            [
                "not",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> not(Filter<T> f)"
            ],
            [
                "addEscapes",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "protected static final String addEscapes(String str)"
            ],
            [
                "LexicalError",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "protected static String LexicalError(boolean EOFSeen, int lexState, int errorLine, int errorColumn, String errorAfter, char curChar)"
            ],
            [
                "add_escapes",
                "org.graphstream.util.parser",
                "ParseException",
                "static String add_escapes(String str)"
            ],
            [
                "newToken",
                "org.graphstream.util.parser",
                "Token",
                "public static Token newToken(int ofKind, String image)"
            ],
            [
                "newToken",
                "org.graphstream.util.parser",
                "Token",
                "public static Token newToken(int ofKind)"
            ],
            [
                "countStepInFile",
                "org.graphstream.util",
                "StepCounter",
                "public static int countStepInFile(String path) throws IOException"
            ],
            [
                "GET",
                "org.graphstream.stream.net",
                "HTTPSource",
                "protected static HashMap<String, Object> GET(HttpExchange ex)"
            ],
            [
                "sinkFor",
                "org.graphstream.stream.file",
                "FileSinkFactory",
                "public static FileSink sinkFor(String filename)"
            ],
            [
                "formatId",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "protected static String formatId(String id)"
            ],
            [
                "getInt",
                "org.graphstream.stream.file.pajek",
                "PajekContext",
                "protected static int getInt(Token nb) throws ParseException"
            ],
            [
                "getReal",
                "org.graphstream.stream.file.pajek",
                "PajekContext",
                "protected static double getReal(Token nb) throws ParseException"
            ],
            [
                "toColorValue",
                "org.graphstream.stream.file.pajek",
                "PajekContext",
                "public static String toColorValue(Token R, Token G, Token B) throws ParseException"
            ],
            [
                "sourceFor",
                "org.graphstream.stream.file",
                "FileSourceFactory",
                "public static FileSource sourceFor(String fileName) throws IOException"
            ],
            [
                "getXMLRootElement",
                "org.graphstream.stream.file",
                "FileSourceFactory",
                "public static String getXMLRootElement(String fileName) throws IOException"
            ],
            [
                "formatStringForQuoting",
                "org.graphstream.stream.file",
                "FileSinkDGSUtility",
                "protected static String formatStringForQuoting(String str)"
            ],
            [
                "attributeString",
                "org.graphstream.stream.file",
                "FileSinkDGSUtility",
                "protected static String attributeString(String key, Object value, boolean remove)"
            ],
            [
                "arrayString",
                "org.graphstream.stream.file",
                "FileSinkDGSUtility",
                "protected static String arrayString(Object value)"
            ],
            [
                "valueString",
                "org.graphstream.stream.file",
                "FileSinkDGSUtility",
                "protected static String valueString(Object value)"
            ],
            [
                "hashToString",
                "org.graphstream.stream.file",
                "FileSinkDGSUtility",
                "protected static String hashToString(HashMap<?, ?> hash)"
            ],
            [
                "encodeObject",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public static String encodeObject(java.io.Serializable serializableObject) throws java.io.IOException"
            ],
            [
                "encodeObject",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public static String encodeObject(java.io.Serializable serializableObject, int options) throws java.io.IOException"
            ],
            [
                "encodeBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public static String encodeBytes(byte[] source)"
            ],
            [
                "encodeBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public static String encodeBytes(byte[] source, int options) throws java.io.IOException"
            ],
            [
                "encodeBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public static String encodeBytes(byte[] source, int off, int len)"
            ],
            [
                "encodeBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public static String encodeBytes(byte[] source, int off, int len, int options) throws java.io.IOException"
            ],
            [
                "encodeBytesToBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public static byte[] encodeBytesToBytes(byte[] source)"
            ],
            [
                "encodeBytesToBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public static byte[] encodeBytesToBytes(byte[] source, int off, int len, int options) throws java.io.IOException"
            ],
            [
                "decode",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public static byte[] decode(byte[] source) throws java.io.IOException"
            ],
            [
                "decode",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public static byte[] decode(byte[] source, int off, int len, int options) throws java.io.IOException"
            ],
            [
                "decode",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public static byte[] decode(String s) throws java.io.IOException"
            ],
            [
                "decode",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public static byte[] decode(String s, int options) throws java.io.IOException"
            ],
            [
                "decodeToObject",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public static Object decodeToObject(String encodedObject) throws java.io.IOException, java.lang.ClassNotFoundException"
            ],
            [
                "decodeToObject",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public static Object decodeToObject(String encodedObject, int options, final ClassLoader loader) throws java.io.IOException, java.lang.ClassNotFoundException"
            ],
            [
                "decodeFromFile",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public static byte[] decodeFromFile(String filename) throws java.io.IOException"
            ],
            [
                "encodeFromFile",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public static String encodeFromFile(String filename) throws java.io.IOException"
            ],
            [
                "unmutableGraph",
                "org.graphstream.graph.implementations",
                "Graphs",
                "public static Graph unmutableGraph(Graph g)"
            ],
            [
                "synchronizedGraph",
                "org.graphstream.graph.implementations",
                "Graphs",
                "public static Graph synchronizedGraph(Graph g)"
            ],
            [
                "merge",
                "org.graphstream.graph.implementations",
                "Graphs",
                "public static Graph merge(Graph... graphs)"
            ],
            [
                "clone",
                "org.graphstream.graph.implementations",
                "Graphs",
                "public static Graph clone(Graph g)"
            ]
        ],
        "tokensProjectClassesNonPrivateStaticAttributes": [
            [
                "version16",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static boolean version16 = false;"
            ],
            [
                "predefFractions",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[][] predefFractions = new float[11][];"
            ],
            [
                "predefFractions2",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions2 = { 0f, 1f };"
            ],
            [
                "predefFractions3",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions3 = { 0f, 0.5f, 1f };"
            ],
            [
                "predefFractions4",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions4 = { 0f, 0.33f, 0.66f, 1f };"
            ],
            [
                "predefFractions5",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions5 = { 0f, 0.25f, 0.5f, 0.75f, 1f };"
            ],
            [
                "predefFractions6",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions6 = { 0f, 0.2f, 0.4f, 0.6f, 0.8f, 1f };"
            ],
            [
                "predefFractions7",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions7 = { 0f, 0.1666f, 0.3333f, 0.4999f, 0.6666f, 0.8333f, 1f };"
            ],
            [
                "predefFractions8",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions8 = { 0f, 0.1428f, 0.2856f, 0.4284f, 0.5712f, 0.7140f, 0.8568f, 1f };"
            ],
            [
                "predefFractions9",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions9 = { 0f, 0.125f, 0.25f, 0.375f, 0.5f, 0.625f, .75f, 0.875f, 1f };"
            ],
            [
                "predefFractions10",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions10 = { 0f, 0.1111f, 0.2222f, 0.3333f, 0.4444f, 0.5555f, 0.6666f, 0.7777f, 0.8888f, 1f };"
            ],
            [
                "defaultImageCache",
                "org.graphstream.ui.swingViewer.util",
                "ImageCache",
                "protected static ImageCache defaultImageCache;"
            ],
            [
                "dots",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "protected static float[] dots = { 1f, 1f };"
            ],
            [
                "dashes",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "protected static float[] dashes = { 3f, 3f };"
            ],
            [
                "defaultFontCache",
                "org.graphstream.ui.swingViewer.util",
                "FontCache",
                "public static FontCache defaultFontCache;"
            ],
            [
                "NULL_POINT2",
                "org.graphstream.ui.geom",
                "Point2",
                "public static final Point2 NULL_POINT2 = new Point2(0, 0);"
            ],
            [
                "NULL_POINT3",
                "org.graphstream.ui.geom",
                "Point3",
                "public static final Point3 NULL_POINT3 = new Point3(0, 0, 0);"
            ],
            [
                "DEFAULT_VIEW_ID",
                "org.graphstream.ui.view",
                "Viewer",
                "public static String DEFAULT_VIEW_ID = \"defaultView\";"
            ],
            [
                "jjbitVec0",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };"
            ],
            [
                "jjnextStates",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "static final int[] jjnextStates = { 48, 49, 52, 54, 55, 65, 69, 2, 4, 6, 10, 16, 23, 33, 50, 52, 54, 55, 57, 58, 60, 61, 66, 68, 70, 71 };"
            ],
            [
                "jjstrLiteralImages",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "public static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, \"\\56\", \"\\173\", \"\\175\", \"\\50\", \"\\51\", \"\\43\", \"\\72\", \"\\73\", \"\\54\", \"\\162\\147\\142\\141\", \"\\162\\147\\142\", null, null, null, \"\\165\\162\\154\", \"\\147\\162\\141\\160\\150\", \"\\145\\144\\147\\145\", \"\\156\\157\\144\\145\", \"\\163\\160\\162\\151\\164\\145\", \"\\146\\151\\154\\154\\55\\155\\157\\144\\145\", \"\\146\\151\\154\\154\\55\\143\\157\\154\\157\\162\", \"\\146\\151\\154\\154\\55\\151\\155\\141\\147\\145\", \"\\163\\164\\162\\157\\153\\145\\55\\155\\157\\144\\145\", \"\\163\\164\\162\\157\\153\\145\\55\\143\\157\\154\\157\\162\", \"\\163\\164\\162\\157\\153\\145\\55\\167\\151\\144\\164\\150\", \"\\163\\150\\141\\144\\157\\167\\55\\155\\157\\144\\145\", \"\\163\\150\\141\\144\\157\\167\\55\\143\\157\\154\\157\\162\", \"\\163\\150\\141\\144\\157\\167\\55\\167\\151\\144\\164\\150\", \"\\163\\150\\141\\144\\157\\167\\55\\157\\146\\146\\163\\145\\164\", \"\\164\\145\\170\\164\\55\\155\\157\\144\\145\", \"\\164\\145\\170\\164\\55\\143\\157\\154\\157\\162\", \"\\164\\145\\170\\164\\55\\163\\164\\171\\154\\145\", \"\\164\\145\\170\\164\\55\\146\\157\\156\\164\", \"\\164\\145\\170\\164\\55\\163\\151\\172\\145\", \"\\164\\145\\170\\164\\55\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\\55\\155\\157\\144\\145\", \"\\164\\145\\170\\164\\55\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\", \"\\164\\145\\170\\164\\55\\142\\141\\143\\153\\147\\162\\157\\165\\156\\144\\55\\155\\157\\144\\145\", \"\\164\\145\\170\\164\\55\\142\\141\\143\\153\\147\\162\\157\\165\\156\\144\\55\\143\\157\\154\\157\\162\", \"\\164\\145\\170\\164\\55\\157\\146\\146\\163\\145\\164\", \"\\164\\145\\170\\164\\55\\160\\141\\144\\144\\151\\156\\147\", \"\\151\\143\\157\\156\\55\\155\\157\\144\\145\", \"\\151\\143\\157\\156\", \"\\160\\141\\144\\144\\151\\156\\147\", \"\\172\\55\\151\\156\\144\\145\\170\", \"\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\\55\\155\\157\\144\\145\", \"\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\", \"\\163\\150\\141\\160\\145\", \"\\163\\151\\172\\145\", \"\\163\\151\\172\\145\\55\\155\\157\\144\\145\", \"\\163\\150\\141\\160\\145\\55\\160\\157\\151\\156\\164\\163\", \"\\164\\145\\170\\164\\55\\141\\154\\151\\147\\156\\155\\145\\156\\164\", \"\\152\\143\\157\\155\\160\\157\\156\\145\\156\\164\", \"\\141\\162\\162\\157\\167\\55\\151\\155\\141\\147\\145\", \"\\141\\162\\162\\157\\167\\55\\163\\151\\172\\145\", \"\\141\\162\\162\\157\\167\\55\\163\\150\\141\\160\\145\", \"\\163\\160\\162\\151\\164\\145\\55\\157\\162\\151\\145\\156\\164\\141\\164\\151\\157\\156\", \"\\143\\141\\156\\166\\141\\163\\55\\143\\157\\154\\157\\162\", \"\\160\\154\\141\\151\\156\", \"\\144\\171\\156\\55\\160\\154\\141\\151\\156\", \"\\144\\171\\156\\55\\163\\151\\172\\145\", \"\\144\\171\\156\\55\\151\\143\\157\\156\", \"\\144\\141\\163\\150\\145\\163\", \"\\144\\157\\164\\163\", \"\\144\\157\\165\\142\\154\\145\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\144\\151\\141\\147\\157\\156\\141\\154\\61\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\144\\151\\141\\147\\157\\156\\141\\154\\62\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\150\\157\\162\\151\\172\\157\\156\\164\\141\\154\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\162\\141\\144\\151\\141\\154\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\166\\145\\162\\164\\151\\143\\141\\154\", \"\\150\\151\\144\\144\\145\\156\", \"\\151\\155\\141\\147\\145\\55\\164\\151\\154\\145\\144\", \"\\151\\155\\141\\147\\145\\55\\163\\143\\141\\154\\145\\144\", \"\\151\\155\\141\\147\\145\\55\\163\\143\\141\\154\\145\\144\\55\\162\\141\\164\\151\\157\\55\\155\\141\\170\", \"\\151\\155\\141\\147\\145\\55\\163\\143\\141\\154\\145\\144\\55\\162\\141\\164\\151\\157\\55\\155\\151\\156\", \"\\156\\157\\156\\145\", \"\\156\\157\\162\\155\\141\\154\", \"\\164\\162\\165\\156\\143\\141\\164\\145\\144\", \"\\172\\157\\157\\155\\55\\162\\141\\156\\147\\145\", \"\\141\\164\\55\\172\\157\\157\\155\", \"\\165\\156\\144\\145\\162\\55\\172\\157\\157\\155\", \"\\157\\166\\145\\162\\55\\172\\157\\157\\155\", \"\\172\\157\\157\\155\\163\", \"\\146\\151\\164\", \"\\142\\157\\154\\144\", \"\\142\\157\\154\\144\\55\\151\\164\\141\\154\\151\\143\", \"\\151\\164\\141\\154\\151\\143\", \"\\141\\154\\157\\156\\147\", \"\\141\\164\\55\\154\\145\\146\\164\", \"\\141\\164\\55\\162\\151\\147\\150\\164\", \"\\143\\145\\156\\164\\145\\162\", \"\\154\\145\\146\\164\", \"\\162\\151\\147\\150\\164\", \"\\165\\156\\144\\145\\162\", \"\\141\\142\\157\\166\\145\", \"\\152\\165\\163\\164\\151\\146\\171\", \"\\143\\151\\162\\143\\154\\145\", \"\\164\\162\\151\\141\\156\\147\\154\\145\", \"\\146\\162\\145\\145\\160\\154\\141\\156\\145\", \"\\164\\145\\170\\164\\55\\142\\157\\170\", \"\\164\\145\\170\\164\\55\\162\\157\\165\\156\\144\\145\\144\\55\\142\\157\\170\", \"\\164\\145\\170\\164\\55\\143\\151\\162\\143\\154\\145\", \"\\164\\145\\170\\164\\55\\144\\151\\141\\155\\157\\156\\144\", \"\\164\\145\\170\\164\\55\\160\\141\\162\\141\\147\\162\\141\\160\\150\", \"\\142\\157\\170\", \"\\162\\157\\165\\156\\144\\145\\144\\55\\142\\157\\170\", \"\\143\\162\\157\\163\\163\", \"\\144\\151\\141\\155\\157\\156\\144\", \"\\160\\157\\154\\171\\147\\157\\156\", \"\\142\\165\\164\\164\\157\\156\", \"\\164\\145\\170\\164\\55\\146\\151\\145\\154\\144\", \"\\160\\141\\156\\145\\154\", \"\\154\\151\\156\\145\", \"\\160\\157\\154\\171\\154\\151\\156\\145\", \"\\160\\157\\154\\171\\154\\151\\156\\145\\55\\163\\143\\141\\154\\145\\144\", \"\\141\\156\\147\\154\\145\", \"\\143\\165\\142\\151\\143\\55\\143\\165\\162\\166\\145\", \"\\142\\154\\157\\142\", \"\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\114\\55\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\150\\157\\162\\151\\172\\157\\156\\164\\141\\154\\55\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\166\\145\\162\\164\\151\\143\\141\\154\\55\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\141\\162\\162\\157\\167\", \"\\146\\154\\157\\167\", \"\\160\\151\\145\\55\\143\\150\\141\\162\\164\", \"\\151\\155\\141\\147\\145\", \"\\151\\155\\141\\147\\145\\163\", \"\\146\\162\\157\\155\", \"\\156\\157\\144\\145\\60\", \"\\164\\157\", \"\\156\\157\\144\\145\\61\", \"\\160\\162\\157\\152\\145\\143\\164\\151\\157\\156\", \"\\143\\154\\151\\143\\153\\145\\144\", \"\\163\\145\\154\\145\\143\\164\\145\\144\", null, null };"
            ],
            [
                "lexStateNames",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "public static final String[] lexStateNames = { \"DEFAULT\" };"
            ],
            [
                "jjtoToken",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "static final long[] jjtoToken = { 0xfffffffffffffe01L, 0xffffffffffffffffL, 0xffffL };"
            ],
            [
                "jjtoSkip",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "static final long[] jjtoSkip = { 0x1eL, 0x0L, 0x0L };"
            ],
            [
                "colorMap",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "protected static HashMap<String,Color> colorMap;"
            ],
            [
                "sharpColor1",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "protected static Pattern sharpColor1;"
            ],
            [
                "sharpColor2",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "protected static Pattern sharpColor2;"
            ],
            [
                "cssColor",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "protected static Pattern cssColor;"
            ],
            [
                "cssColorA",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "protected static Pattern cssColorA;"
            ],
            [
                "awtColor",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "protected static Pattern awtColor;"
            ],
            [
                "hexaColor",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "protected static Pattern hexaColor;"
            ],
            [
                "numberUnit",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "protected static Pattern numberUnit;"
            ],
            [
                "number",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "protected static Pattern number;"
            ],
            [
                "acceptedAttribute",
                "org.graphstream.ui.graphicGraph",
                "GraphicElement",
                "protected static Pattern acceptedAttribute;"
            ],
            [
                "DEFAULT_AN_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_AN_FORMAT = \"%prefix%[%sourceId%:%timeId%] add node \\\"%nodeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_CNA_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CNA_FORMAT = \"%prefix%[%sourceId%:%timeId%] set node \\\"%nodeId%\\\" +\\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CNC_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CNC_FORMAT = \"%prefix%[%sourceId%:%timeId%] set node \\\"%nodeId%\\\" \\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CNR_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CNR_FORMAT = \"%prefix%[%sourceId%:%timeId%] set node \\\"%nodeId%\\\" -\\\"%attributeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_DN_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_DN_FORMAT = \"%prefix%[%sourceId%:%timeId%] remove node \\\"%nodeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_AE_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_AE_FORMAT = \"%prefix%[%sourceId%:%timeId%] add edge \\\"%edgeId%\\\" : \\\"%source%\\\" -- \\\"%target%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_CEA_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CEA_FORMAT = \"%prefix%[%sourceId%:%timeId%] set edge \\\"%edgeId%\\\" +\\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CEC_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CEC_FORMAT = \"%prefix%[%sourceId%:%timeId%] set edge \\\"%edgeId%\\\" \\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CER_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CER_FORMAT = \"%prefix%[%sourceId%:%timeId%] set edge \\\"%edgeId%\\\" -\\\"%attributeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_DE_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_DE_FORMAT = \"%prefix%[%sourceId%:%timeId%] remove edge \\\"%edgeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_CGA_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CGA_FORMAT = \"%prefix%[%sourceId%:%timeId%] set +\\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CGC_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CGC_FORMAT = \"%prefix%[%sourceId%:%timeId%] set \\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CGR_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CGR_FORMAT = \"%prefix%[%sourceId%:%timeId%] set -\\\"%attributeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_CL_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CL_FORMAT = \"%prefix%[%sourceId%:%timeId%] clear%suffix%\";"
            ],
            [
                "DEFAULT_ST_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_ST_FORMAT = \"%prefix%[%sourceId%:%timeId%] step %step% begins%suffix%\";"
            ],
            [
                "GLOBAL_ENV",
                "org.graphstream.util",
                "Environment",
                "public static Environment GLOBAL_ENV;"
            ],
            [
                "LEXICAL_ERROR",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "public static final int LEXICAL_ERROR = 0;"
            ],
            [
                "STATIC_LEXER_ERROR",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "public static final int STATIC_LEXER_ERROR = 1;"
            ],
            [
                "INVALID_LEXICAL_STATE",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "public static final int INVALID_LEXICAL_STATE = 2;"
            ],
            [
                "LOOP_DETECTED",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "public static final int LOOP_DETECTED = 3;"
            ],
            [
                "staticFlag",
                "org.graphstream.util.parser",
                "SimpleCharStream",
                "public static final boolean staticFlag = false;"
            ],
            [
                "ABBREVIATED_WEEKDAY_NAME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent ABBREVIATED_WEEKDAY_NAME = new NotImplementedComponent(\"%a\", \"\\\\w+[.]\");"
            ],
            [
                "FULL_WEEKDAY_NAME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent FULL_WEEKDAY_NAME = new NotImplementedComponent(\"%A\", \"\\\\w+\");"
            ],
            [
                "ABBREVIATED_MONTH_NAME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent ABBREVIATED_MONTH_NAME = new NotImplementedComponent(\"%b\", \"\\\\w+[.]\");"
            ],
            [
                "FULL_MONTH_NAME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent FULL_MONTH_NAME = new NotImplementedComponent(\"%B\", \"\\\\w+\");"
            ],
            [
                "LOCALE_DATE_AND_TIME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent LOCALE_DATE_AND_TIME = new NotImplementedComponent(\"%c\", null);"
            ],
            [
                "CENTURY",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent CENTURY = new NotImplementedComponent(\"%C\", \"\\\\d\\\\d\");"
            ],
            [
                "DAY_OF_MONTH_2_DIGITS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DAY_OF_MONTH_2_DIGITS = new FieldComponent(\"%d\", \"[012]\\\\d|3[01]\", Calendar.DAY_OF_MONTH, \"%02d\");"
            ],
            [
                "DATE",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DATE = new AliasComponent(\"%D\", \"%m/%d/%y\");"
            ],
            [
                "DAY_OF_MONTH",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DAY_OF_MONTH = new FieldComponent(\"%e\", \"\\\\d|[12]\\\\d|3[01]\", Calendar.DAY_OF_MONTH, \"%2d\");"
            ],
            [
                "DATE_ISO8601",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DATE_ISO8601 = new AliasComponent(\"%F\", \"%Y-%m-%d\");"
            ],
            [
                "WEEK_BASED_YEAR_2_DIGITS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent WEEK_BASED_YEAR_2_DIGITS = new FieldComponent(\"%g\", \"\\\\d\\\\d\", Calendar.YEAR, \"%02d\");"
            ],
            [
                "WEEK_BASED_YEAR_4_DIGITS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent WEEK_BASED_YEAR_4_DIGITS = new FieldComponent(\"%G\", \"\\\\d{4}\", Calendar.YEAR, \"%04d\");"
            ],
            [
                "ABBREVIATED_MONTH_NAME_ALIAS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent ABBREVIATED_MONTH_NAME_ALIAS = new AliasComponent(\"%h\", \"%b\");"
            ],
            [
                "HOUR_OF_DAY",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent HOUR_OF_DAY = new FieldComponent(\"%H\", \"[01]\\\\d|2[0123]\", Calendar.HOUR_OF_DAY, \"%02d\");"
            ],
            [
                "HOUR",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent HOUR = new FieldComponent(\"%I\", \"0\\\\d|1[012]\", Calendar.HOUR, \"%02d\");"
            ],
            [
                "DAY_OF_YEAR",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DAY_OF_YEAR = new FieldComponent(\"%j\", \"[012]\\\\d\\\\d|3[0-5]\\\\d|36[0-6]\", Calendar.DAY_OF_YEAR, \"%03d\");"
            ],
            [
                "MILLISECOND",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent MILLISECOND = new FieldComponent(\"%k\", \"\\\\d{3}\", Calendar.MILLISECOND, \"%03d\");"
            ],
            [
                "EPOCH",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent EPOCH = new EpochComponent();"
            ],
            [
                "MONTH",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent MONTH = new FieldComponent(\"%m\", \"0[1-9]|1[012]\", Calendar.MONTH, -1, \"%02d\");"
            ],
            [
                "MINUTE",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent MINUTE = new FieldComponent(\"%M\", \"[0-5]\\\\d\", Calendar.MINUTE, \"%02d\");"
            ],
            [
                "NEW_LINE",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent NEW_LINE = new AliasComponent(\"%n\", \"\\n\");"
            ],
            [
                "AM_PM",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent AM_PM = new AMPMComponent();"
            ],
            [
                "LOCALE_CLOCK_TIME_12_HOUR",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent LOCALE_CLOCK_TIME_12_HOUR = new NotImplementedComponent(\"%r\", \"\");"
            ],
            [
                "HOUR_AND_MINUTE",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent HOUR_AND_MINUTE = new AliasComponent(\"%R\", \"%H:%M\");"
            ],
            [
                "SECOND",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent SECOND = new FieldComponent(\"%S\", \"[0-5]\\\\d|60\", Calendar.SECOND, \"%02d\");"
            ],
            [
                "TABULATION",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent TABULATION = new AliasComponent(\"%t\", \"\\t\");"
            ],
            [
                "TIME_ISO8601",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent TIME_ISO8601 = new AliasComponent(\"%T\", \"%H:%M:%S\");"
            ],
            [
                "DAY_OF_WEEK_1_7",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DAY_OF_WEEK_1_7 = new FieldComponent(\"%u\", \"[1-7]\", Calendar.DAY_OF_WEEK, -1, \"%1d\");"
            ],
            [
                "WEEK_OF_YEAR_FROM_SUNDAY",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent WEEK_OF_YEAR_FROM_SUNDAY = new FieldComponent(\"%U\", \"[0-4]\\\\d|5[0123]\", Calendar.WEEK_OF_YEAR, 1, \"%2d\");"
            ],
            [
                "WEEK_NUMBER_ISO8601",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent WEEK_NUMBER_ISO8601 = new NotImplementedComponent(\"%V\", \"0[1-9]|[2-4]\\\\d|5[0123]\");"
            ],
            [
                "DAY_OF_WEEK_0_6",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DAY_OF_WEEK_0_6 = new FieldComponent(\"%w\", \"[0-6]\", Calendar.DAY_OF_WEEK, \"%01d\");"
            ],
            [
                "WEEK_OF_YEAR_FROM_MONDAY",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent WEEK_OF_YEAR_FROM_MONDAY = new FieldComponent(\"%W\", \"[0-4]\\\\d|5[0123]\", Calendar.WEEK_OF_YEAR, \"%02d\");"
            ],
            [
                "LOCALE_DATE_REPRESENTATION",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent LOCALE_DATE_REPRESENTATION = new NotImplementedComponent(\"%x\", \"\");"
            ],
            [
                "LOCALE_TIME_REPRESENTATION",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent LOCALE_TIME_REPRESENTATION = new NotImplementedComponent(\"%X\", \"\");"
            ],
            [
                "YEAR_2_DIGITS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent YEAR_2_DIGITS = new FieldComponent(\"%y\", \"\\\\d\\\\d\", Calendar.YEAR, \"%02d\");"
            ],
            [
                "YEAR_4_DIGITS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent YEAR_4_DIGITS = new FieldComponent(\"%Y\", \"\\\\d{4}\", Calendar.YEAR, \"%04d\");"
            ],
            [
                "UTC_OFFSET",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent UTC_OFFSET = new UTCOffsetComponent();"
            ],
            [
                "LOCALE_TIME_ZONE_NAME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent LOCALE_TIME_ZONE_NAME = new NotImplementedComponent(\"%Z\", \"\\\\w*\");"
            ],
            [
                "PERCENT",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent PERCENT = new AliasComponent(\"%%\", \"%\");"
            ],
            [
                "jjbitVec0",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };"
            ],
            [
                "jjnextStates",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "static final int[] jjnextStates = { 5, 6, 8, 9, 13, 14 };"
            ],
            [
                "jjstrLiteralImages",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "public static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, \"\\133\", \"\\135\", null, null, null, null, null, null };"
            ],
            [
                "lexStateNames",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "public static final String[] lexStateNames = { \"DEFAULT\" };"
            ],
            [
                "jjtoToken",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "static final long[] jjtoToken = { 0xff01L };"
            ],
            [
                "jjtoSkip",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "static final long[] jjtoSkip = { 0x1eL };"
            ],
            [
                "jjbitVec0",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };"
            ],
            [
                "jjnextStates",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "static final int[] jjnextStates = { 54, 11, 12, 15, 17, 18, 1, 2, 5, 47, 52, 8, 9, 20, 21 };"
            ],
            [
                "jjstrLiteralImages",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "public static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, null, \"\\50\", \"\\51\", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null };"
            ],
            [
                "lexStateNames",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "public static final String[] lexStateNames = { \"DEFAULT\" };"
            ],
            [
                "jjtoToken",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "static final long[] jjtoToken = { 0xffffc01L };"
            ],
            [
                "jjtoSkip",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "static final long[] jjtoSkip = { 0x7eL };"
            ],
            [
                "XYZ_ATTR",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "public static final String XYZ_ATTR = \"xyz\";"
            ],
            [
                "WIDTH_ATTR",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "public static final String WIDTH_ATTR = \"ui.tikz.width\";"
            ],
            [
                "HEIGHT_ATTR",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "public static final String HEIGHT_ATTR = \"ui.tikz.height\";"
            ],
            [
                "DEFAULT_WIDTH",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "public static final double DEFAULT_WIDTH = 10;"
            ],
            [
                "DEFAULT_HEIGHT",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "public static final double DEFAULT_HEIGHT = 10;"
            ],
            [
                "DISPLAY_MIN_SIZE_IN_MM",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "public static final double DISPLAY_MIN_SIZE_IN_MM = 2;"
            ],
            [
                "DISPLAY_MAX_SIZE_IN_MM",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "public static final double DISPLAY_MAX_SIZE_IN_MM = 10;"
            ],
            [
                "jjbitVec0",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };"
            ],
            [
                "jjnextStates",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "static final int[] jjnextStates = { 21, 27, 8, 10, 11, 18, 19, 22, 23, 26, 1, 2, 13, 14 };"
            ],
            [
                "jjstrLiteralImages",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "public static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, null, \"\\133\", \"\\135\", \"\\173\", \"\\175\", \"\\72\", \"\\54\", \"\\75\", null, null, null, null, null, null, null, null, null, null, \"\\73\", null, null, null, null, null, null, null, null, null, \"\\137\" };"
            ],
            [
                "lexStateNames",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "public static final String[] lexStateNames = { \"DEFAULT\" };"
            ],
            [
                "jjtoToken",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "static final long[] jjtoToken = { 0x3ffffffc01L };"
            ],
            [
                "jjtoSkip",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "static final long[] jjtoSkip = { 0x7eL };"
            ],
            [
                "jjbitVec0",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };"
            ],
            [
                "jjnextStates",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "static final int[] jjnextStates = { 21, 22, 23, 17, 19, 2, 3, 5, 6, 8, 9 };"
            ],
            [
                "jjstrLiteralImages",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "public static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null };"
            ],
            [
                "lexStateNames",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "public static final String[] lexStateNames = { \"DEFAULT\" };"
            ],
            [
                "jjtoToken",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "static final long[] jjtoToken = { 0x3fffffffffffc9L };"
            ],
            [
                "jjtoSkip",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "static final long[] jjtoSkip = { 0x6L };"
            ],
            [
                "XMLNS",
                "org.graphstream.stream.file.gexf",
                "GEXF",
                "public static final String XMLNS = \"http://www.gexf.net/1.2draft\";"
            ],
            [
                "XMLNS_XSI",
                "org.graphstream.stream.file.gexf",
                "GEXF",
                "public static final String XMLNS_XSI = \"http://www.w3.org/2001/XMLSchema-instance\";"
            ],
            [
                "XMLNS_SL",
                "org.graphstream.stream.file.gexf",
                "GEXF",
                "public static final String XMLNS_SL = \"http://www.gexf.net/1.2draft http://www.gexf.net/1.2draft/gexf.xsd\";"
            ],
            [
                "XMLNS_VIZ",
                "org.graphstream.stream.file.gexf",
                "GEXF",
                "public static final String XMLNS_VIZ = \"http://www.gexf.net/1.2draft/viz\";"
            ],
            [
                "VERSION",
                "org.graphstream.stream.file.gexf",
                "GEXF",
                "public static final String VERSION = \"1.2\";"
            ],
            [
                "BUFFER_SIZE",
                "org.graphstream.stream.file.dgs",
                "DGSParser",
                "protected static final int BUFFER_SIZE = 4096;"
            ],
            [
                "ARRAY_OPEN",
                "org.graphstream.stream.file.dgs",
                "DGSParser",
                "public static final int ARRAY_OPEN = '{';"
            ],
            [
                "ARRAY_CLOSE",
                "org.graphstream.stream.file.dgs",
                "DGSParser",
                "public static final int ARRAY_CLOSE = '}';"
            ],
            [
                "MAP_OPEN",
                "org.graphstream.stream.file.dgs",
                "DGSParser",
                "public static final int MAP_OPEN = '[';"
            ],
            [
                "MAP_CLOSE",
                "org.graphstream.stream.file.dgs",
                "DGSParser",
                "public static final int MAP_CLOSE = ']';"
            ],
            [
                "gradientId",
                "org.graphstream.stream.file",
                "FileSinkSVG2",
                "static int gradientId = 0;"
            ],
            [
                "gradientId",
                "org.graphstream.stream.file",
                "SVGStyle",
                "static int gradientId = 0;"
            ],
            [
                "TIME_PREFIX",
                "org.graphstream.stream",
                "Timeline",
                "public static final String TIME_PREFIX = \"time\";"
            ],
            [
                "SYNC_DISABLE_KEY",
                "org.graphstream.stream.sync",
                "SinkTime",
                "public static final String SYNC_DISABLE_KEY = \"org.graphstream.stream.sync.disable\";"
            ],
            [
                "disableSync",
                "org.graphstream.stream.sync",
                "SinkTime",
                "protected static final boolean disableSync;"
            ],
            [
                "LIGHT_YELLOW",
                "org.graphstream.stream.netstream",
                "NetStreamReceiver",
                "protected static final String LIGHT_YELLOW = \"\u001b[33;1m\";"
            ],
            [
                "RESET",
                "org.graphstream.stream.netstream",
                "NetStreamReceiver",
                "protected static final String RESET = \"\u001b[0m\";"
            ],
            [
                "BUFFER_INITIAL_SIZE",
                "org.graphstream.stream.netstream",
                "NetStreamReceiver",
                "protected static final int BUFFER_INITIAL_SIZE = 8192;"
            ],
            [
                "BUFFER_INITIAL_SIZE",
                "org.graphstream.stream.netstream",
                "IncomingBuffer",
                "protected static final int BUFFER_INITIAL_SIZE = 8192;"
            ],
            [
                "EVENT_GETVERSION",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_GETVERSION = 0x00;"
            ],
            [
                "EVENT_START",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_START = 0x01;"
            ],
            [
                "EVENT_END",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_END = 0x02;"
            ],
            [
                "EVENT_ADD_NODE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_ADD_NODE = 0x10;"
            ],
            [
                "EVENT_DEL_NODE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_DEL_NODE = 0x11;"
            ],
            [
                "EVENT_ADD_EDGE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_ADD_EDGE = 0x12;"
            ],
            [
                "EVENT_DEL_EDGE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_DEL_EDGE = 0x13;"
            ],
            [
                "EVENT_STEP",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_STEP = 0x14;"
            ],
            [
                "EVENT_CLEARED",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_CLEARED = 0x15;"
            ],
            [
                "EVENT_ADD_GRAPH_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_ADD_GRAPH_ATTR = 0x16;"
            ],
            [
                "EVENT_CHG_GRAPH_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_CHG_GRAPH_ATTR = 0x17;"
            ],
            [
                "EVENT_DEL_GRAPH_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_DEL_GRAPH_ATTR = 0x18;"
            ],
            [
                "EVENT_ADD_NODE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_ADD_NODE_ATTR = 0x19;"
            ],
            [
                "EVENT_CHG_NODE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_CHG_NODE_ATTR = 0x1a;"
            ],
            [
                "EVENT_DEL_NODE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_DEL_NODE_ATTR = 0x1b;"
            ],
            [
                "EVENT_ADD_EDGE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_ADD_EDGE_ATTR = 0x1c;"
            ],
            [
                "EVENT_CHG_EDGE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_CHG_EDGE_ATTR = 0x1d;"
            ],
            [
                "EVENT_DEL_EDGE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_DEL_EDGE_ATTR = 0x1e;"
            ],
            [
                "TYPE_UNKNOWN",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_UNKNOWN = 0x00;"
            ],
            [
                "TYPE_BOOLEAN",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_BOOLEAN = 0x50;"
            ],
            [
                "TYPE_BOOLEAN_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_BOOLEAN_ARRAY = 0x51;"
            ],
            [
                "TYPE_BYTE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_BYTE = 0x52;"
            ],
            [
                "TYPE_BYTE_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_BYTE_ARRAY = 0x53;"
            ],
            [
                "TYPE_SHORT",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_SHORT = 0x54;"
            ],
            [
                "TYPE_SHORT_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_SHORT_ARRAY = 0x55;"
            ],
            [
                "TYPE_INT",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_INT = 0x56;"
            ],
            [
                "TYPE_INT_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_INT_ARRAY = 0x57;"
            ],
            [
                "TYPE_LONG",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_LONG = 0x58;"
            ],
            [
                "TYPE_LONG_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_LONG_ARRAY = 0x59;"
            ],
            [
                "TYPE_FLOAT",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_FLOAT = 0x5a;"
            ],
            [
                "TYPE_FLOAT_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_FLOAT_ARRAY = 0x5b;"
            ],
            [
                "TYPE_DOUBLE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_DOUBLE = 0x5c;"
            ],
            [
                "TYPE_DOUBLE_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_DOUBLE_ARRAY = 0x5d;"
            ],
            [
                "TYPE_STRING",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_STRING = 0x5e;"
            ],
            [
                "TYPE_RAW",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_RAW = 0x5f;"
            ],
            [
                "TYPE_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static byte TYPE_ARRAY = 0x60;"
            ],
            [
                "TYPE_NULL",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_NULL = 0x61;"
            ],
            [
                "COMMAND",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int COMMAND = 0x70;"
            ],
            [
                "NO_OPTIONS",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public final static int NO_OPTIONS = 0;"
            ],
            [
                "ENCODE",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public final static int ENCODE = 1;"
            ],
            [
                "DECODE",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public final static int DECODE = 0;"
            ],
            [
                "GZIP",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public final static int GZIP = 2;"
            ],
            [
                "DONT_GUNZIP",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public final static int DONT_GUNZIP = 4;"
            ],
            [
                "DO_BREAK_LINES",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public final static int DO_BREAK_LINES = 8;"
            ],
            [
                "URL_SAFE",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public final static int URL_SAFE = 16;"
            ],
            [
                "ORDERED",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public final static int ORDERED = 32;"
            ],
            [
                "INITIAL_EDGE_CAPACITY",
                "org.graphstream.graph.implementations",
                "AdjacencyListNode",
                "protected static final int INITIAL_EDGE_CAPACITY;"
            ],
            [
                "GROWTH_FACTOR",
                "org.graphstream.graph.implementations",
                "AdjacencyListNode",
                "protected static final double GROWTH_FACTOR = 1.1;"
            ],
            [
                "I_EDGE",
                "org.graphstream.graph.implementations",
                "AdjacencyListNode",
                "protected static final char I_EDGE = 0;"
            ],
            [
                "IO_EDGE",
                "org.graphstream.graph.implementations",
                "AdjacencyListNode",
                "protected static final char IO_EDGE = 1;"
            ],
            [
                "O_EDGE",
                "org.graphstream.graph.implementations",
                "AdjacencyListNode",
                "protected static final char O_EDGE = 2;"
            ],
            [
                "GROW_FACTOR",
                "org.graphstream.graph.implementations",
                "AdjacencyListGraph",
                "public static final double GROW_FACTOR = 1.1;"
            ],
            [
                "DEFAULT_NODE_CAPACITY",
                "org.graphstream.graph.implementations",
                "AdjacencyListGraph",
                "public static final int DEFAULT_NODE_CAPACITY = 128;"
            ],
            [
                "DEFAULT_EDGE_CAPACITY",
                "org.graphstream.graph.implementations",
                "AdjacencyListGraph",
                "public static final int DEFAULT_EDGE_CAPACITY = 1024;"
            ]
        ],
        "tokensMethodJavadocValues": [
            [
                "\"getX\"",
                "String"
            ]
        ],
        "tokensMethodArguments": [
            [
                "property",
                "java.lang",
                "String"
            ],
            [
                "events",
                "java.lang",
                "String[]"
            ]
        ],
        "tokensMethodVariablesNonPrivateNonStaticNonVoidMethods": [
            [
                "getClass",
                "java.lang",
                "Object",
                "public final native Class<? extends Object> getClass()"
            ],
            [
                "getArrowSize",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "Style",
                "public Values getArrowSize()"
            ],
            [
                "getValueForEvent",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "Style",
                "protected Object getValueForEvent(String property, String event)"
            ],
            [
                "getTextOffset",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "Style",
                "public Values getTextOffset()"
            ],
            [
                "getCanvasColor",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "Style",
                "public Colors getCanvasColor()"
            ],
            [
                "getShadowColor",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "Style",
                "public Color getShadowColor(int i)"
            ],
            [
                "getIcon",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "Style",
                "public String getIcon()"
            ],
            [
                "getShadowColorCount",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "Style",
                "public int getShadowColorCount()"
            ],
            [
                "getShadowOffset",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "Style",
                "public Values getShadowOffset()"
            ],
            [
                "getTextFont",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "Style",
                "public String getTextFont()"
            ],
            [
                "getFillMode",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "Style",
                "public FillMode getFillMode()"
            ],
            [
                "getShape",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "Style",
                "public Shape getShape()"
            ],
            [
                "hasValue",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "Style",
                "public boolean hasValue(String field, String... events)"
            ],
            [
                "getFillColor",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "Style",
                "public Color getFillColor(int i)"
            ],
            [
                "getArrowShape",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "Style",
                "public ArrowShape getArrowShape()"
            ],
            [
                "getTextColor",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "Style",
                "public Colors getTextColor()"
            ],
            [
                "getTextPadding",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "Style",
                "public Values getTextPadding()"
            ],
            [
                "hashCode",
                "java.lang",
                "Object",
                "public native int hashCode()"
            ],
            [
                "getTextBackgroundColor",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "Style",
                "public Colors getTextBackgroundColor()"
            ],
            [
                "equals",
                "java.lang",
                "Object",
                "public boolean equals(Object arg0)"
            ],
            [
                "getTextVisibility",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "Style",
                "public Values getTextVisibility()"
            ],
            [
                "getPadding",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "Style",
                "public Values getPadding()"
            ],
            [
                "getShadowColors",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "Style",
                "public Colors getShadowColors()"
            ],
            [
                "getVisibility",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "Style",
                "public Values getVisibility()"
            ],
            [
                "getTextBackgroundMode",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "Style",
                "public TextBackgroundMode getTextBackgroundMode()"
            ],
            [
                "clone",
                "java.lang",
                "Object",
                "protected native Object clone() throws CloneNotSupportedException"
            ],
            [
                "getShapePoints",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "Style",
                "public Values getShapePoints()"
            ],
            [
                "toString",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "Style",
                "public String toString()"
            ],
            [
                "getIconMode",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "Style",
                "public IconMode getIconMode()"
            ],
            [
                "getTextSize",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "Style",
                "public Value getTextSize()"
            ],
            [
                "getStrokeColor",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "Style",
                "public Colors getStrokeColor()"
            ],
            [
                "getShadowWidth",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "Style",
                "public Value getShadowWidth()"
            ],
            [
                "getStrokeWidth",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "Style",
                "public Value getStrokeWidth()"
            ],
            [
                "getFillColorCount",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "Style",
                "public int getFillColorCount()"
            ],
            [
                "getTextColorCount",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "Style",
                "public int getTextColorCount()"
            ],
            [
                "getCanvasColor",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "Style",
                "public Color getCanvasColor(int i)"
            ],
            [
                "getCanvasColorCount",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "Style",
                "public int getCanvasColorCount()"
            ],
            [
                "getJComponent",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "Style",
                "public JComponents getJComponent()"
            ],
            [
                "getZIndex",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "Style",
                "public Integer getZIndex()"
            ],
            [
                "getStrokeColor",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "Style",
                "public Color getStrokeColor(int i)"
            ],
            [
                "getTextAlignment",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "Style",
                "public TextAlignment getTextAlignment()"
            ],
            [
                "getStrokeMode",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "Style",
                "public StrokeMode getStrokeMode()"
            ],
            [
                "getTextBackgroundColor",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "Style",
                "public Color getTextBackgroundColor(int i)"
            ],
            [
                "toString",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "Style",
                "public String toString(int level)"
            ],
            [
                "getStrokeColorCount",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "Style",
                "public int getStrokeColorCount()"
            ],
            [
                "getSize",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "Style",
                "public Values getSize()"
            ],
            [
                "getSpriteOrientation",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "Style",
                "public SpriteOrientation getSpriteOrientation()"
            ],
            [
                "getTextColor",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "Style",
                "public Color getTextColor(int i)"
            ],
            [
                "getParent",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "Style",
                "public Rule getParent()"
            ],
            [
                "getSizeMode",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "Style",
                "public SizeMode getSizeMode()"
            ],
            [
                "getFillImage",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "Style",
                "public String getFillImage()"
            ],
            [
                "getFillColors",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "Style",
                "public Colors getFillColors()"
            ],
            [
                "getTextStyle",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "Style",
                "public TextStyle getTextStyle()"
            ],
            [
                "getTextVisibilityMode",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "Style",
                "public TextVisibilityMode getTextVisibilityMode()"
            ],
            [
                "getValue",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "Style",
                "public Object getValue(String property, String... events)"
            ],
            [
                "getArrowImage",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "Style",
                "public String getArrowImage()"
            ],
            [
                "getTextMode",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "Style",
                "public TextMode getTextMode()"
            ],
            [
                "getShadowMode",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "Style",
                "public ShadowMode getShadowMode()"
            ],
            [
                "getVisibilityMode",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "Style",
                "public VisibilityMode getVisibilityMode()"
            ],
            [
                "value",
                "java.lang",
                "String",
                "byte[] value()"
            ],
            [
                "codePointCount",
                "java.lang",
                "String",
                "public int codePointCount(int arg0, int arg1)"
            ],
            [
                "coder",
                "java.lang",
                "String",
                "byte coder()"
            ],
            [
                "translateEscapes",
                "java.lang",
                "String",
                "public String translateEscapes()"
            ],
            [
                "formatted",
                "java.lang",
                "String",
                "public String formatted(Object[] arg0)"
            ],
            [
                "indexOf",
                "java.lang",
                "String",
                "public int indexOf(String arg0)"
            ],
            [
                "isBlank",
                "java.lang",
                "String",
                "public boolean isBlank()"
            ],
            [
                "lastIndexOf",
                "java.lang",
                "String",
                "public int lastIndexOf(int arg0, int arg1)"
            ],
            [
                "codePointBefore",
                "java.lang",
                "String",
                "public int codePointBefore(int arg0)"
            ],
            [
                "chars",
                "java.lang",
                "String",
                "public IntStream chars()"
            ],
            [
                "strip",
                "java.lang",
                "String",
                "public String strip()"
            ],
            [
                "getBytes",
                "java.lang",
                "String",
                "public byte[] getBytes(String arg0) throws UnsupportedEncodingException"
            ],
            [
                "replace",
                "java.lang",
                "String",
                "public String replace(CharSequence arg0, CharSequence arg1)"
            ],
            [
                "split",
                "java.lang",
                "String",
                "public String[] split(String arg0)"
            ],
            [
                "codePoints",
                "java.lang",
                "String",
                "public IntStream codePoints()"
            ],
            [
                "trim",
                "java.lang",
                "String",
                "public String trim()"
            ],
            [
                "replace",
                "java.lang",
                "String",
                "public String replace(char arg0, char arg1)"
            ],
            [
                "toUpperCase",
                "java.lang",
                "String",
                "public String toUpperCase()"
            ],
            [
                "hashCode",
                "java.lang",
                "String",
                "public int hashCode()"
            ],
            [
                "regionMatches",
                "java.lang",
                "String",
                "public boolean regionMatches(boolean arg0, int arg1, String arg2, int arg3, int arg4)"
            ],
            [
                "stripIndent",
                "java.lang",
                "String",
                "public String stripIndent()"
            ],
            [
                "transform",
                "java.lang",
                "String",
                "public <R> R transform(Function<? super String, ? extends R> arg0)"
            ],
            [
                "matches",
                "java.lang",
                "String",
                "public boolean matches(String arg0)"
            ],
            [
                "toLowerCase",
                "java.lang",
                "String",
                "public String toLowerCase()"
            ],
            [
                "concat",
                "java.lang",
                "String",
                "public String concat(String arg0)"
            ],
            [
                "getBytes",
                "java.lang",
                "String",
                "public byte[] getBytes(Charset arg0)"
            ],
            [
                "indexOf",
                "java.lang",
                "String",
                "public int indexOf(int arg0, int arg1)"
            ],
            [
                "replaceFirst",
                "java.lang",
                "String",
                "public String replaceFirst(String arg0, String arg1)"
            ],
            [
                "substring",
                "java.lang",
                "String",
                "public String substring(int arg0, int arg1)"
            ],
            [
                "startsWith",
                "java.lang",
                "String",
                "public boolean startsWith(String arg0)"
            ],
            [
                "resolveConstantDesc",
                "java.lang",
                "String",
                "public String resolveConstantDesc(MethodHandles.Lookup arg0)"
            ],
            [
                "substring",
                "java.lang",
                "String",
                "public String substring(int arg0)"
            ],
            [
                "offsetByCodePoints",
                "java.lang",
                "String",
                "public int offsetByCodePoints(int arg0, int arg1)"
            ],
            [
                "subSequence",
                "java.lang",
                "String",
                "public CharSequence subSequence(int arg0, int arg1)"
            ],
            [
                "toString",
                "java.lang",
                "String",
                "public String toString()"
            ],
            [
                "stripLeading",
                "java.lang",
                "String",
                "public String stripLeading()"
            ],
            [
                "toLowerCase",
                "java.lang",
                "String",
                "public String toLowerCase(Locale arg0)"
            ],
            [
                "regionMatches",
                "java.lang",
                "String",
                "public boolean regionMatches(int arg0, String arg1, int arg2, int arg3)"
            ],
            [
                "charAt",
                "java.lang",
                "String",
                "public char charAt(int arg0)"
            ],
            [
                "lines",
                "java.lang",
                "String",
                "public Stream<String> lines()"
            ],
            [
                "codePointAt",
                "java.lang",
                "String",
                "public int codePointAt(int arg0)"
            ],
            [
                "length",
                "java.lang",
                "String",
                "public int length()"
            ],
            [
                "equalsIgnoreCase",
                "java.lang",
                "String",
                "public boolean equalsIgnoreCase(String arg0)"
            ],
            [
                "indent",
                "java.lang",
                "String",
                "public String indent(int arg0)"
            ],
            [
                "isEmpty",
                "java.lang",
                "String",
                "public boolean isEmpty()"
            ],
            [
                "split",
                "java.lang",
                "String",
                "public String[] split(String arg0, int arg1)"
            ],
            [
                "lastIndexOf",
                "java.lang",
                "String",
                "public int lastIndexOf(String arg0)"
            ],
            [
                "stripTrailing",
                "java.lang",
                "String",
                "public String stripTrailing()"
            ],
            [
                "contentEquals",
                "java.lang",
                "String",
                "public boolean contentEquals(CharSequence arg0)"
            ],
            [
                "toUpperCase",
                "java.lang",
                "String",
                "public String toUpperCase(Locale arg0)"
            ],
            [
                "contentEquals",
                "java.lang",
                "String",
                "public boolean contentEquals(StringBuffer arg0)"
            ],
            [
                "startsWith",
                "java.lang",
                "String",
                "public boolean startsWith(String arg0, int arg1)"
            ],
            [
                "compareToIgnoreCase",
                "java.lang",
                "String",
                "public int compareToIgnoreCase(String arg0)"
            ],
            [
                "lastIndexOf",
                "java.lang",
                "String",
                "public int lastIndexOf(int arg0)"
            ],
            [
                "repeat",
                "java.lang",
                "String",
                "public String repeat(int arg0)"
            ],
            [
                "toCharArray",
                "java.lang",
                "String",
                "public char[] toCharArray()"
            ],
            [
                "indexOf",
                "java.lang",
                "String",
                "public int indexOf(int arg0)"
            ],
            [
                "replaceAll",
                "java.lang",
                "String",
                "public String replaceAll(String arg0, String arg1)"
            ],
            [
                "compareTo",
                "java.lang",
                "String",
                "public int compareTo(String arg0)"
            ],
            [
                "contains",
                "java.lang",
                "String",
                "public boolean contains(CharSequence arg0)"
            ],
            [
                "endsWith",
                "java.lang",
                "String",
                "public boolean endsWith(String arg0)"
            ],
            [
                "intern",
                "java.lang",
                "String",
                "public native String intern()"
            ],
            [
                "describeConstable",
                "java.lang",
                "String",
                "public Optional<String> describeConstable()"
            ],
            [
                "getBytes",
                "java.lang",
                "String",
                "public byte[] getBytes()"
            ],
            [
                "equals",
                "java.lang",
                "String",
                "public boolean equals(Object arg0)"
            ],
            [
                "indexOf",
                "java.lang",
                "String",
                "public int indexOf(String arg0, int arg1)"
            ],
            [
                "lastIndexOf",
                "java.lang",
                "String",
                "public int lastIndexOf(String arg0, int arg1)"
            ],
            [
                "isLatin1",
                "java.lang",
                "String",
                "boolean isLatin1()"
            ],
            [
                "toString",
                "java.lang",
                "Object",
                "public String toString()"
            ],
            [
                "compareTo",
                "java.lang",
                "Comparable",
                "public abstract int compareTo(T arg0)"
            ],
            [
                "subSequence",
                "java.lang",
                "CharSequence",
                "public abstract CharSequence subSequence(int arg0, int arg1)"
            ],
            [
                "charAt",
                "java.lang",
                "CharSequence",
                "public abstract char charAt(int arg0)"
            ],
            [
                "isEmpty",
                "java.lang",
                "CharSequence",
                "public default boolean isEmpty()"
            ],
            [
                "chars",
                "java.lang",
                "CharSequence",
                "public default IntStream chars()"
            ],
            [
                "length",
                "java.lang",
                "CharSequence",
                "public abstract int length()"
            ],
            [
                "toString",
                "java.lang",
                "CharSequence",
                "public abstract String toString()"
            ],
            [
                "codePoints",
                "java.lang",
                "CharSequence",
                "public default IntStream codePoints()"
            ],
            [
                "describeConstable",
                "java.lang.constant",
                "Constable",
                "public abstract Optional<? extends ConstantDesc> describeConstable()"
            ],
            [
                "resolveConstantDesc",
                "java.lang.constant",
                "ConstantDesc",
                "public abstract Object resolveConstantDesc(MethodHandles.Lookup arg0) throws ReflectiveOperationException"
            ]
        ],
        "tokensMethodVariablesNonPrivateNonStaticAttributes": [
            [
                "parent",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "Style",
                "protected Rule parent = null;"
            ],
            [
                "values",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "Style",
                "protected HashMap<String,Object> values = null;"
            ],
            [
                "alternates",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "Style",
                "protected HashMap<String,Rule> alternates = null;"
            ],
            [
                "length",
                "java.lang",
                "String[]",
                "public final int length;"
            ]
        ],
        "tokensOracleVariablesNonPrivateNonStaticNonVoidMethods": [],
        "tokensOracleVariablesNonPrivateNonStaticAttributes": []
    },
    {
        "id": 3070,
        "oracle": ";",
        "oracleType": "EXCEPT_POST",
        "projectName": "gs-core-1.3",
        "packageName": "org.graphstream.ui.graphicGraph.stylesheet",
        "className": "StyleSheet",
        "javadocTag": "@throws IOException For any kind of I/O error or parse error.",
        "methodJavadoc": "    /**\n\t * Parse a style sheet from a file. The style sheet will complete the\n\t * previously parsed style sheets.\n\t * \n\t * @param fileName\n\t *            Name of the file containing the style sheet.\n\t * @throws IOException\n\t *             For any kind of I/O error or parse error.\n\t */",
        "methodSourceCode": "public void parseFromFile(String fileName) throws IOException{\n    parse(new InputStreamReader(new BufferedInputStream(new FileInputStream(fileName))));\n}",
        "classJavadoc": "/**\n * Implementation of the style sheets that can be stored in the graphic graph.\n * \n * @author Antoine Dutot\n */",
        "classSourceCode": "/*\n * Copyright 2006 - 2015\n *     Stefan Balev     <stefan.balev@graphstream-project.org>\n *     Julien Baudry    <julien.baudry@graphstream-project.org>\n *     Antoine Dutot    <antoine.dutot@graphstream-project.org>\n *     Yoann Pign\u00e9      <yoann.pigne@graphstream-project.org>\n *     Guilhelm Savin   <guilhelm.savin@graphstream-project.org>\n * \n * This file is part of GraphStream <http://graphstream-project.org>.\n * \n * GraphStream is a library whose purpose is to handle static or dynamic\n * graph, create them from scratch, file or any source and display them.\n * \n * This program is free software distributed under the terms of two licenses, the\n * CeCILL-C license that fits European law, and the GNU Lesser General Public\n * License. You can  use, modify and/ or redistribute the software under the terms\n * of the CeCILL-C license as circulated by CEA, CNRS and INRIA at the following\n * URL <http://www.cecill.info> or under the terms of the GNU LGPL as published by\n * the Free Software Foundation, either version 3 of the License, or (at your\n * option) any later version.\n * \n * This program is distributed in the hope that it will be useful, but WITHOUT ANY\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A\n * PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more details.\n * \n * You should have received a copy of the GNU Lesser General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n * \n * The fact that you are presently reading this means that you have had\n * knowledge of the CeCILL-C and LGPL licenses and that you accept their terms.\n */\npackage org.graphstream.ui.graphicGraph.stylesheet;\n\nimport java.awt.Color;\nimport java.io.BufferedInputStream;\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.io.Reader;\nimport java.io.StringReader;\nimport java.net.URL;\nimport java.util.ArrayList;\nimport java.util.HashMap;\n\nimport org.graphstream.graph.Edge;\nimport org.graphstream.graph.Element;\nimport org.graphstream.graph.Graph;\nimport org.graphstream.graph.Node;\nimport org.graphstream.ui.graphicGraph.GraphicSprite;\nimport org.graphstream.ui.graphicGraph.stylesheet.StyleConstants.StrokeMode;\nimport org.graphstream.ui.graphicGraph.stylesheet.parser.StyleSheetParser;\nimport org.graphstream.util.parser.ParseException;\n\n/**\n * Implementation of the style sheets that can be stored in the graphic graph.\n * \n * @author Antoine Dutot\n */\npublic class StyleSheet {\n\t// Attributes\n\n\t/**\n\t * The top-level default rule.\n\t */\n\tpublic Rule defaultRule;\n\n\t/**\n\t * The default, id and class rules for graphs.\n\t */\n\tpublic NameSpace graphRules = new NameSpace(Selector.Type.GRAPH);\n\n\t/**\n\t * The default, id and class rules for nodes.\n\t */\n\tpublic NameSpace nodeRules = new NameSpace(Selector.Type.NODE);\n\n\t/**\n\t * The default, id and class rules for edges.\n\t */\n\tpublic NameSpace edgeRules = new NameSpace(Selector.Type.EDGE);\n\n\t/**\n\t * The default, id and class rules for sprites.\n\t */\n\tpublic NameSpace spriteRules = new NameSpace(Selector.Type.SPRITE);\n\n\t/**\n\t * Set of listeners.\n\t */\n\tpublic ArrayList<StyleSheetListener> listeners = new ArrayList<StyleSheetListener>();\n\n\t// Constructors\n\n\t/**\n\t * New style sheet initialised to defaults.\n\t */\n\tpublic StyleSheet() {\n\t\tinitRules();\n\t}\n\n\t// Access\n\n\t/**\n\t * The default rule for graphs.\n\t * \n\t * @return A rule.\n\t */\n\tpublic Rule getDefaultGraphRule() {\n\t\treturn graphRules.defaultRule;\n\t}\n\n\t/**\n\t * The default rule for nodes.\n\t * \n\t * @return A rule.\n\t */\n\tpublic Rule getDefaultNodeRule() {\n\t\treturn nodeRules.defaultRule;\n\t}\n\n\t/**\n\t * The default rule for edges.\n\t * \n\t * @return A rule.\n\t */\n\tpublic Rule getDefaultEdgeRule() {\n\t\treturn edgeRules.defaultRule;\n\t}\n\n\t/**\n\t * The default rule for sprites.\n\t * \n\t * @return A rule.\n\t */\n\tpublic Rule getDefaultSpriteRule() {\n\t\treturn spriteRules.defaultRule;\n\t}\n\n\t/**\n\t * The default style for graphs.\n\t * \n\t * @return A style.\n\t */\n\tpublic Style getDefaultGraphStyle() {\n\t\treturn getDefaultGraphRule().getStyle();\n\t}\n\n\t/**\n\t * The default style for nodes.\n\t * \n\t * @return A style.\n\t */\n\tpublic Style getDefaultNodeStyle() {\n\t\treturn getDefaultNodeRule().getStyle();\n\t}\n\n\t/**\n\t * The default style for edges.\n\t * \n\t * @return A style.\n\t */\n\tpublic Style getDefaultEdgeStyle() {\n\t\treturn getDefaultEdgeRule().getStyle();\n\t}\n\n\t/**\n\t * The default style for sprites.\n\t * \n\t * @return A style.\n\t */\n\tpublic Style getDefaultSpriteStyle() {\n\t\treturn getDefaultSpriteRule().getStyle();\n\t}\n\n\t/**\n\t * All the rules (default, specific and class) that apply to graphs.\n\t * \n\t * @return The set of rules for graphs.\n\t */\n\tpublic NameSpace getGraphStyleNameSpace() {\n\t\treturn graphRules;\n\t}\n\n\t/**\n\t * All the rules (default, specific and class) that apply to nodes.\n\t * \n\t * @return The set of rules for nodes.\n\t */\n\tpublic NameSpace getNodeStyleNameSpace() {\n\t\treturn nodeRules;\n\t}\n\n\t/**\n\t * All the rules (default, specific and class) that apply to edges.\n\t * \n\t * @return The set of rules for edges.\n\t */\n\tpublic NameSpace getEdgeStyleNameSpace() {\n\t\treturn edgeRules;\n\t}\n\n\t/**\n\t * All the rules (default, specific and class) that apply to sprites.\n\t * \n\t * @return The set of rules for sprites.\n\t */\n\tpublic NameSpace getSpriteStyleNameSpace() {\n\t\treturn spriteRules;\n\t}\n\n\t/**\n\t * Get the rules that match a given element.\n\t * \n\t * First a rule for the identifier of the element is looked for. It is\n\t * looked for in its name space (nodes for Node element, etc.) If it is not\n\t * found, the default rule for this kind of element is used. This rule is\n\t * pushed at start of the returned array of rules.\n\t * \n\t * After a rule for the element is found, then the various classes the\n\t * element pertains to are looked at and each class rule found is added in\n\t * order in the returned array.\n\t * \n\t * @param element\n\t *            The element a rules are searched for.\n\t * @return A set of rules matching the element, with the main rule at index\n\t *         0.\n\t */\n\tpublic ArrayList<Rule> getRulesFor(Element element) {\n\t\tArrayList<Rule> rules = null;\n\n\t\tif (element instanceof Graph) {\n\t\t\trules = graphRules.getRulesFor(element);\n\t\t} else if (element instanceof Node) {\n\t\t\trules = nodeRules.getRulesFor(element);\n\t\t} else if (element instanceof Edge) {\n\t\t\trules = edgeRules.getRulesFor(element);\n\t\t} else if (element instanceof GraphicSprite) {\n\t\t\trules = spriteRules.getRulesFor(element);\n\t\t} else {\n\t\t\trules = new ArrayList<Rule>();\n\t\t\trules.add(defaultRule);\n\t\t}\n\n\t\treturn rules;\n\t}\n\n\t/**\n\t * Compute the name of the style group and element will pertain to knowing\n\t * its styling rules.\n\t * \n\t * @param element\n\t *            The element.\n\t * @param rules\n\t *            The styling rules.\n\t * @return The unique identifier of the style group for the element.\n\t * @see #getRulesFor(Element)\n\t */\n\tpublic String getStyleGroupIdFor(Element element, ArrayList<Rule> rules) {\n\t\tStringBuilder builder = new StringBuilder();\n\n\t\tif (element instanceof Graph) {\n\t\t\tbuilder.append(\"g\");\n\t\t} else if (element instanceof Node) {\n\t\t\tbuilder.append(\"n\");\n\t\t} else if (element instanceof Edge) {\n\t\t\tbuilder.append(\"e\");\n\t\t} else if (element instanceof GraphicSprite) {\n\t\t\tbuilder.append(\"s\");\n\t\t} else {\n\t\t\tthrow new RuntimeException(\"What ?\");\n\t\t}\n\n\t\tif (rules.get(0).selector.getId() != null) {\n\t\t\tbuilder.append('_');\n\t\t\tbuilder.append(rules.get(0).selector.getId());\n\t\t}\n\n\t\tint n = rules.size();\n\n\t\tif (n > 1) {\n\t\t\tbuilder.append('(');\n\t\t\tbuilder.append(rules.get(1).selector.getClazz());\n\t\t\tfor (int i = 2; i < n; i++) {\n\t\t\t\tbuilder.append(',');\n\t\t\t\tbuilder.append(rules.get(i).selector.getClazz());\n\t\t\t}\n\t\t\tbuilder.append(')');\n\t\t}\n\n\t\treturn builder.toString();\n\t}\n\n\t// Commands\n\n\t/**\n\t * Create the default rules. This method is the place to set defaults for\n\t * specific element types. This is here that the edge width is reset to one,\n\t * since the default width is larger. The default z index that is different\n\t * for every class of element is also set here.\n\t */\n\tprotected void initRules() {\n\t\tdefaultRule = new Rule(new Selector(Selector.Type.ANY), null);\n\n\t\tdefaultRule.getStyle().setDefaults();\n\n\t\tgraphRules.defaultRule = new Rule(new Selector(Selector.Type.GRAPH),\n\t\t\t\tdefaultRule);\n\t\tnodeRules.defaultRule = new Rule(new Selector(Selector.Type.NODE),\n\t\t\t\tdefaultRule);\n\t\tedgeRules.defaultRule = new Rule(new Selector(Selector.Type.EDGE),\n\t\t\t\tdefaultRule);\n\t\tspriteRules.defaultRule = new Rule(new Selector(Selector.Type.SPRITE),\n\t\t\t\tdefaultRule);\n\n\t\tgraphRules.defaultRule.getStyle().setValue(\"padding\",\n\t\t\t\tnew Values(Style.Units.PX, 30));\n\t\tedgeRules.defaultRule.getStyle().setValue(\"shape\",\n\t\t\t\tStyleConstants.Shape.LINE);\n\t\tedgeRules.defaultRule.getStyle().setValue(\"size\",\n\t\t\t\tnew Values(Style.Units.PX, 1));\n\t\tedgeRules.defaultRule.getStyle().setValue(\"z-index\", new Integer(1));\n\t\tnodeRules.defaultRule.getStyle().setValue(\"z-index\", new Integer(2));\n\t\tspriteRules.defaultRule.getStyle().setValue(\"z-index\", new Integer(3));\n\n\t\tColors colors = new Colors();\n\t\tcolors.add(Color.WHITE);\n\n\t\tgraphRules.defaultRule.getStyle().setValue(\"fill-color\", colors);\n\t\tgraphRules.defaultRule.getStyle().setValue(\"stroke-mode\",\n\t\t\t\tStrokeMode.NONE);\n\n\t\tfor (StyleSheetListener listener : listeners) {\n\t\t\tlistener.styleAdded(defaultRule, defaultRule);\n\t\t\tlistener.styleAdded(graphRules.defaultRule, graphRules.defaultRule);\n\t\t\tlistener.styleAdded(nodeRules.defaultRule, nodeRules.defaultRule);\n\t\t\tlistener.styleAdded(edgeRules.defaultRule, edgeRules.defaultRule);\n\t\t\tlistener.styleAdded(spriteRules.defaultRule,\n\t\t\t\t\tspriteRules.defaultRule);\n\t\t}\n\n\t\t// for( StyleSheetListener listener: listeners )\n\t\t// listener.styleAdded( defaultRule, defaultRule );\n\t\t// for( StyleSheetListener listener: listeners )\n\t\t// listener.styleAdded( graphRules.defaultRule, graphRules.defaultRule\n\t\t// );\n\t\t// for( StyleSheetListener listener: listeners )\n\t\t// listener.styleAdded( nodeRules.defaultRule, nodeRules.defaultRule );\n\t\t// for( StyleSheetListener listener: listeners )\n\t\t// listener.styleAdded( edgeRules.defaultRule, edgeRules.defaultRule );\n\t\t// for( StyleSheetListener listener: listeners )\n\t\t// listener.styleAdded( spriteRules.defaultRule, spriteRules.defaultRule\n\t\t// );\n\t}\n\n\t/**\n\t * Add a listener for style events. You never receive events for default\n\t * rules and styles. You receive events only for the rules and styles that\n\t * are added after this listener is registered.\n\t * \n\t * @param listener\n\t *            The new listener.\n\t */\n\tpublic void addListener(StyleSheetListener listener) {\n\t\tlisteners.add(listener);\n\t}\n\n\t/**\n\t * Remove a previously registered listener.\n\t * \n\t * @param listener\n\t *            The listener to remove.\n\t */\n\tpublic void removeListener(StyleSheetListener listener) {\n\t\tint index = listeners.indexOf(listener);\n\n\t\tif (index >= 0)\n\t\t\tlisteners.remove(index);\n\t}\n\n\t/**\n\t * Clear all specific rules and initialise the default rules. The listeners\n\t * are not changed.\n\t */\n\tpublic void clear() {\n\t\tgraphRules.clear();\n\t\tnodeRules.clear();\n\t\tedgeRules.clear();\n\t\tspriteRules.clear();\n\t\tinitRules();\n\n\t\tfor (StyleSheetListener listener : listeners)\n\t\t\tlistener.styleSheetCleared();\n\t}\n\n\t/**\n\t * Parse a style sheet from a file. The style sheet will complete the\n\t * previously parsed style sheets.\n\t * \n\t * @param fileName\n\t *            Name of the file containing the style sheet.\n\t * @throws IOException\n\t *             For any kind of I/O error or parse error.\n\t */\n\tpublic void parseFromFile(String fileName) throws IOException {\n\t\tparse(new InputStreamReader(new BufferedInputStream(\n\t\t\t\tnew FileInputStream(fileName))));\n\t}\n\n\t/**\n\t * Parse a style sheet from an URL. The style sheet will complete the\n\t * previously parsed style sheets. First, this method will search the URL as\n\t * SystemRessource, then as a file and if there is no match, just try to\n\t * create an URL object giving the URL as constructor's parameter.\n\t * \n\t * @param url\n\t *            Name of the file containing the style sheet.\n\t * @throws IOException\n\t *             For any kind of I/O error or parse error.\n\t */\n\tpublic void parseFromURL(String url) throws IOException {\n\t\tURL u = StyleSheet.class.getClassLoader().getResource(url);\n\t\tif (u == null) {\n\t\t\tFile f = new File(url);\n\n\t\t\tif (f.exists())\n\t\t\t\tu = f.toURI().toURL();\n\t\t\telse\n\t\t\t\tu = new URL(url);\n\t\t}\n\n\t\tparse(new InputStreamReader(u.openStream()));\n\t}\n\n\t/**\n\t * Parse a style sheet from a string. The style sheet will complete the\n\t * previously parsed style sheets.\n\t * \n\t * @param styleSheet\n\t *            The string containing the whole style sheet.\n\t * @throws IOException\n\t *             For any kind of I/O error or parse error.\n\t */\n\tpublic void parseFromString(String styleSheet) throws IOException {\n\t\tparse(new StringReader(styleSheet));\n\t}\n\n\t/**\n\t * Parse only one style, create a rule with the given selector, and add this\n\t * rule.\n\t * \n\t * @param select\n\t *            The elements for which this style must apply.\n\t * @param styleString\n\t *            The style string to parse.\n\t */\n\tpublic void parseStyleFromString(Selector select, String styleString)\n\t\t\tthrows IOException {\n\t\tStyleSheetParser parser = new StyleSheetParser(this, new StringReader(\n\t\t\t\tstyleString));\n\n\t\tStyle style = new Style();\n\n\t\ttry {\n\t\t\tparser.stylesStart(style);\n\t\t} catch (ParseException e) {\n\t\t\tthrow new IOException(e.getMessage());\n\t\t}\n\n\t\tRule rule = new Rule(select);\n\n\t\trule.setStyle(style);\n\t\taddRule(rule);\n\t}\n\n\t/**\n\t * Load a style sheet from an attribute value, the value can either be the\n\t * contents of the whole style sheet, or begin by \"url\". If it starts with\n\t * \"url\", it must then contain between parenthesis the string of the URL to\n\t * load. For example:\n\t * \n\t * <pre>\n\t * \t\turl('file:///some/path/on/the/file/system')\n\t * </pre>\n\t * \n\t * Or\n\t * \n\t * <pre>\n\t * \t\turl('http://some/web/url')\n\t * </pre>\n\t * \n\t * The loaded style sheet will be merged with the styles already present in\n\t * the style sheet.\n\t * \n\t * @param styleSheetValue\n\t *            The style sheet name of content.\n\t * @throws IOException\n\t *             If the loading or parsing of the style sheet failed.\n\t */\n\tpublic void load(String styleSheetValue) throws IOException {\n\t\tif (styleSheetValue.startsWith(\"url\")) {\n\t\t\t// Extract the part between '(' and ')'.\n\n\t\t\tint beg = styleSheetValue.indexOf('(');\n\t\t\tint end = styleSheetValue.lastIndexOf(')');\n\n\t\t\tif (beg >= 0 && end > beg)\n\t\t\t\tstyleSheetValue = styleSheetValue.substring(beg + 1, end);\n\n\t\t\tstyleSheetValue = styleSheetValue.trim();\n\n\t\t\t// Remove the quotes (') or (\").\n\n\t\t\tif (styleSheetValue.startsWith(\"'\")) {\n\t\t\t\tbeg = 0;\n\t\t\t\tend = styleSheetValue.lastIndexOf('\\'');\n\n\t\t\t\tif (beg >= 0 && end > beg)\n\t\t\t\t\tstyleSheetValue = styleSheetValue.substring(beg + 1, end);\n\t\t\t}\n\n\t\t\tstyleSheetValue = styleSheetValue.trim();\n\n\t\t\tif (styleSheetValue.startsWith(\"\\\"\")) {\n\t\t\t\tbeg = 0;\n\t\t\t\tend = styleSheetValue.lastIndexOf('\"');\n\n\t\t\t\tif (beg >= 0 && end > beg)\n\t\t\t\t\tstyleSheetValue = styleSheetValue.substring(beg + 1, end);\n\t\t\t}\n\n\t\t\t// That's it.\n\n\t\t\tparseFromURL(styleSheetValue);\n\t\t} else // Parse from string, the value is considered to be the style\n\t\t\t\t// sheet contents.\n\t\t{\n\t\t\tparseFromString(styleSheetValue);\n\t\t}\n\t}\n\n\t/**\n\t * Parse the style sheet from the given reader.\n\t * \n\t * @param reader\n\t *            The reader pointing at the style sheet.\n\t * @throws IOException\n\t *             For any kind of I/O error or parse error.\n\t */\n\tprotected void parse(Reader reader) throws IOException {\n\t\tStyleSheetParser parser = new StyleSheetParser(this, reader);\n\n\t\ttry {\n\t\t\tparser.start();\n\t\t} catch (ParseException e) {\n\t\t\tthrow new IOException(e.getMessage());\n\t\t}\n\t}\n\n\t/**\n\t * Add a new rule with its style. If the rule selector is just GRAPH, NODE,\n\t * EDGE or SPRITE, the default corresponding rules make a copy (or\n\t * augmentation) of its style. Else if an id or class is specified the rules\n\t * are added (or changed/augmented if the id or class was already set) and\n\t * their parent is set to the default graph, node, edge or sprite rules. If\n\t * this is an event rule (or meta-class rule), its sibling rule (the same\n\t * rule without the meta-class) is searched and created if not found and the\n\t * event rule is added as an alternative to it.\n\t * \n\t * @param newRule\n\t *            The new rule.\n\t */\n\tpublic void addRule(Rule newRule) {\n\t\tRule oldRule = null;\n\n\t\tswitch (newRule.selector.getType()) {\n\t\tcase ANY:\n\t\t\tthrow new RuntimeException(\n\t\t\t\t\t\"The ANY selector should never be used, it is created automatically.\");\n\t\tcase GRAPH:\n\t\t\toldRule = graphRules.addRule(newRule);\n\t\t\tbreak;\n\t\tcase NODE:\n\t\t\toldRule = nodeRules.addRule(newRule);\n\t\t\tbreak;\n\t\tcase EDGE:\n\t\t\toldRule = edgeRules.addRule(newRule);\n\t\t\tbreak;\n\t\tcase SPRITE:\n\t\t\toldRule = spriteRules.addRule(newRule);\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tthrow new RuntimeException(\"Ho ho ho ?\");\n\t\t}\n\n\t\tfor (StyleSheetListener listener : listeners)\n\t\t\tlistener.styleAdded(oldRule, newRule);\n\t}\n\n\t@Override\n\tpublic String toString() {\n\t\tStringBuilder builder = new StringBuilder();\n\n\t\tbuilder.append(\"StyleSheet : {\\n\");\n\t\tbuilder.append(\"  default styles:\\n\");\n\t\tbuilder.append(defaultRule.toString(1));\n\t\tbuilder.append(graphRules.toString(1));\n\t\tbuilder.append(nodeRules.toString(1));\n\t\tbuilder.append(edgeRules.toString(1));\n\t\tbuilder.append(spriteRules.toString(1));\n\n\t\treturn builder.toString();\n\t}\n\n\t// Nested classes\n\n\t/**\n\t * A name space is a tuple (default rule, id rule set, class rule set).\n\t * \n\t * <p>\n\t * The name space defines a default rule for a kind of elements, a set of\n\t * rules for this kind of elements with a given identifier, and a set or\n\t * rules for this kind of elements with a given class.\n\t * </p>\n\t */\n\tpublic class NameSpace {\n\t\t// Attribute\n\n\t\t/**\n\t\t * The kind of elements in this name space.\n\t\t */\n\t\tpublic Selector.Type type;\n\n\t\t/**\n\t\t * The default rule for this kind of elements.\n\t\t */\n\t\tpublic Rule defaultRule;\n\n\t\t/**\n\t\t * The set of rules for this kind of elements with a given identifier.\n\t\t */\n\t\tpublic HashMap<String, Rule> byId = new HashMap<String, Rule>();\n\n\t\t/**\n\t\t * The set of rules for this kind of elements with a given class.\n\t\t */\n\t\tpublic HashMap<String, Rule> byClass = new HashMap<String, Rule>();\n\n\t\t// Constructor\n\n\t\tpublic NameSpace(Selector.Type type) {\n\t\t\tthis.type = type;\n\t\t}\n\n\t\t// Access\n\n\t\t/**\n\t\t * The kind of elements this name space applies rules to.\n\t\t * \n\t\t * @return A type of element (node, edge, sprite, graph).\n\t\t */\n\t\tpublic Selector.Type getGraphElementType() {\n\t\t\treturn type;\n\t\t}\n\n\t\t/**\n\t\t * Number of specific (id) rules.\n\t\t * \n\t\t * @return The number of rules that apply to elements by their\n\t\t *         identifiers.\n\t\t */\n\t\tpublic int getIdRulesCount() {\n\t\t\treturn byId.size();\n\t\t}\n\n\t\t/**\n\t\t * Number of specific (class) rules.\n\t\t * \n\t\t * @return The number of rules that apply to elements by their classes.\n\t\t */\n\t\tpublic int getClassRulesCount() {\n\t\t\treturn byClass.size();\n\t\t}\n\n\t\t/**\n\t\t * Get the rules that match a given element. The rules are returned in a\n\t\t * given order. The array always contain the \"main\" rule that matches\n\t\t * the element. This rule is either a default rule for the kind of\n\t\t * element given or the rule that matches its identifier if there is\n\t\t * one. Then class rules the element has can be appended to this array\n\t\t * in order.\n\t\t * \n\t\t * @return an array of rules that match the element, with the main rule\n\t\t *         at index 0.\n\t\t */\n\t\tprotected ArrayList<Rule> getRulesFor(Element element) {\n\t\t\tRule rule = byId.get(element.getId());\n\t\t\tArrayList<Rule> rules = new ArrayList<Rule>();\n\n\t\t\tif (rule != null)\n\t\t\t\trules.add(rule);\n\t\t\telse\n\t\t\t\trules.add(defaultRule);\n\n\t\t\tgetClassRules(element, rules);\n\n\t\t\tif (rules.isEmpty())\n\t\t\t\trules.add(defaultRule);\n\n\t\t\treturn rules;\n\t\t}\n\n\t\t/**\n\t\t * Search if the given element has classes attributes and fill the given\n\t\t * array with the set of rules that match these classes.\n\t\t * \n\t\t * @param element\n\t\t *            The element for which classes must be found.\n\t\t * @param rules\n\t\t *            The rule array to fill.\n\t\t */\n\t\tprotected void getClassRules(Element element, ArrayList<Rule> rules) {\n\t\t\tObject o = element.getAttribute(\"ui.class\");\n\n\t\t\tif (o != null) {\n\t\t\t\tif (o instanceof Object[]) {\n\t\t\t\t\tfor (Object s : (Object[]) o) {\n\t\t\t\t\t\tif (s instanceof CharSequence) {\n\t\t\t\t\t\t\tRule rule = byClass.get((CharSequence) s);\n\n\t\t\t\t\t\t\tif (rule != null)\n\t\t\t\t\t\t\t\trules.add(rule);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else if (o instanceof CharSequence) {\n\t\t\t\t\tString classList = ((CharSequence) o).toString().trim();\n\t\t\t\t\tString[] classes = classList.split(\"\\\\s*,\\\\s*\");\n\n\t\t\t\t\tfor (String c : classes) {\n\t\t\t\t\t\tRule rule = byClass.get(c);\n\n\t\t\t\t\t\tif (rule != null)\n\t\t\t\t\t\t\trules.add(rule);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tthrow new RuntimeException(\n\t\t\t\t\t\t\t\"Oups ! class attribute is of type \"\n\t\t\t\t\t\t\t\t\t+ o.getClass().getName());\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Command\n\n\t\t/**\n\t\t * Remove all styles.\n\t\t */\n\t\tprotected void clear() {\n\t\t\tdefaultRule = null;\n\t\t\tbyId.clear();\n\t\t\tbyClass.clear();\n\t\t}\n\n\t\t/**\n\t\t * Add a new rule.\n\t\t * \n\t\t * <p>\n\t\t * Several cases can occur :\n\t\t * </p>\n\t\t * \n\t\t * <ul>\n\t\t * <li>The rule to add has an ID or class and the rule does not yet\n\t\t * exists and is not an event rule : add it directly.</li>\n\t\t * <li>If the rule has an ID or class but the rule already exists,\n\t\t * augment to already existing rule.</li>\n\t\t * <li>If the rule has no ID or class and is not an event, augment the\n\t\t * default style.</li>\n\t\t * <li>If the rule is an event, the corresponding normal rule is\n\t\t * searched, if it does not exists, it is created then or else, the\n\t\t * event is added to the found rule.</li>\n\t\t * </ul>\n\t\t * \n\t\t * @param newRule\n\t\t *            The rule to add or copy.\n\t\t * @return It the rule added augments an existing rule, this existing\n\t\t *         rule is returned, else null is returned.\n\t\t */\n\t\tprotected Rule addRule(Rule newRule) {\n\t\t\tRule oldRule = null;\n\n\t\t\tif (newRule.selector.getPseudoClass() != null) {\n\t\t\t\toldRule = addEventRule(newRule);\n\t\t\t} else if (newRule.selector.getId() != null) {\n\t\t\t\toldRule = byId.get(newRule.selector.getId());\n\n\t\t\t\tif (oldRule != null) {\n\t\t\t\t\toldRule.getStyle().augment(newRule.getStyle());\n\t\t\t\t} else {\n\t\t\t\t\tbyId.put(newRule.selector.getId(), newRule);\n\t\t\t\t\tnewRule.getStyle().reparent(defaultRule);\n\t\t\t\t}\n\t\t\t} else if (newRule.selector.getClazz() != null) {\n\t\t\t\toldRule = byClass.get(newRule.selector.getClazz());\n\n\t\t\t\tif (oldRule != null) {\n\t\t\t\t\toldRule.getStyle().augment(newRule.getStyle());\n\t\t\t\t} else {\n\t\t\t\t\tbyClass.put(newRule.selector.getClazz(), newRule);\n\t\t\t\t\tnewRule.getStyle().reparent(defaultRule);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\toldRule = defaultRule;\n\t\t\t\tdefaultRule.getStyle().augment(newRule.getStyle());\n\t\t\t\tnewRule = defaultRule;\n\t\t\t}\n\n\t\t\t// That's it.\n\n\t\t\treturn oldRule;\n\t\t}\n\n\t\tprotected Rule addEventRule(Rule newRule) {\n\t\t\tRule parentRule = null;\n\n\t\t\tif (newRule.selector.getId() != null) {\n\t\t\t\tparentRule = byId.get(newRule.selector.getId());\n\n\t\t\t\tif (parentRule == null) {\n\t\t\t\t\tparentRule = addRule(new Rule(new Selector(\n\t\t\t\t\t\t\tnewRule.selector.getType(),\n\t\t\t\t\t\t\tnewRule.selector.getId(),\n\t\t\t\t\t\t\tnewRule.selector.getClazz())));\n\t\t\t\t}\n\t\t\t} else if (newRule.selector.getClazz() != null) {\n\t\t\t\tparentRule = byClass.get(newRule.selector.getClazz());\n\n\t\t\t\tif (parentRule == null) {\n\t\t\t\t\tparentRule = addRule(new Rule(new Selector(\n\t\t\t\t\t\t\tnewRule.selector.getType(),\n\t\t\t\t\t\t\tnewRule.selector.getId(),\n\t\t\t\t\t\t\tnewRule.selector.getClazz())));\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tparentRule = defaultRule;\n\t\t\t}\n\n\t\t\tnewRule.getStyle().reparent(parentRule);\n\t\t\tparentRule.getStyle().addAlternateStyle(\n\t\t\t\t\tnewRule.selector.getPseudoClass(), newRule);\n\n\t\t\treturn parentRule;\n\t\t}\n\n\t\t@Override\n\t\tpublic String toString() {\n\t\t\treturn toString(-1);\n\t\t}\n\n\t\tpublic String toString(int level) {\n\t\t\tString prefix = \"\";\n\n\t\t\tif (level > 0) {\n\t\t\t\tfor (int i = 0; i < level; i++)\n\t\t\t\t\tprefix += \"    \";\n\t\t\t}\n\n\t\t\tStringBuilder builder = new StringBuilder();\n\n\t\t\tbuilder.append(String\n\t\t\t\t\t.format(\"%s%s default style :%n\", prefix, type));\n\t\t\tbuilder.append(defaultRule.toString(level + 1));\n\t\t\ttoStringRules(level, builder, byId,\n\t\t\t\t\tString.format(\"%s%s id styles\", prefix, type));\n\t\t\ttoStringRules(level, builder, byClass,\n\t\t\t\t\tString.format(\"%s%s class styles\", prefix, type));\n\n\t\t\treturn builder.toString();\n\t\t}\n\n\t\tprotected void toStringRules(int level, StringBuilder builder,\n\t\t\t\tHashMap<String, Rule> rules, String title) {\n\t\t\tbuilder.append(title);\n\t\t\tbuilder.append(String.format(\" :%n\"));\n\n\t\t\tfor (Rule rule : rules.values())\n\t\t\t\tbuilder.append(rule.toString(level + 1));\n\t\t}\n\t}\n}",
        "tokensGeneralGrammar": [
            "null",
            "true",
            "false",
            ",",
            ".",
            ":",
            ";",
            "?",
            "(",
            ")",
            "jdVar",
            "stream",
            "Arrays",
            "allMatch",
            "noneMatch",
            "anyMatch",
            "~",
            ">>",
            "<<",
            ">>>",
            "|",
            "&",
            "^",
            "+",
            "-",
            "/",
            "*",
            "%",
            "&&",
            "||",
            ">=",
            "<=",
            ">",
            "<",
            "==",
            "!=",
            "instanceof",
            "class",
            "methodResultID",
            "this"
        ],
        "tokensGeneralValuesGlobalDictionary": [
            [
                "0",
                "int"
            ],
            [
                "1",
                "int"
            ],
            [
                "-1",
                "int"
            ],
            [
                "0.0",
                "double"
            ],
            [
                "1.0",
                "double"
            ],
            [
                "-1.0",
                "double"
            ],
            [
                "\"\"",
                "String"
            ],
            [
                "\" \"",
                "String"
            ]
        ],
        "tokensProjectClasses": [
            [
                "DefaultCamera",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "GradientFactory",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "GraphMetrics",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "Graphics2DOutput",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "ImageCache",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "StrokeFactory",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "FontCache",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "FontSlot",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "DefaultView",
                "org.graphstream.ui.swingViewer"
            ],
            [
                "SpriteRenderer",
                "org.graphstream.ui.swingViewer.basicRenderer"
            ],
            [
                "ElementRenderer",
                "org.graphstream.ui.swingViewer.basicRenderer"
            ],
            [
                "NodeRenderer",
                "org.graphstream.ui.swingViewer.basicRenderer"
            ],
            [
                "Arrow",
                "org.graphstream.ui.swingViewer.basicRenderer.shapes"
            ],
            [
                "Shape",
                "org.graphstream.ui.swingViewer.basicRenderer.shapes"
            ],
            [
                "EdgeRenderer",
                "org.graphstream.ui.swingViewer.basicRenderer"
            ],
            [
                "SwingBasicGraphRenderer",
                "org.graphstream.ui.swingViewer.basicRenderer"
            ],
            [
                "GraphRendererBase",
                "org.graphstream.ui.swingViewer"
            ],
            [
                "GraphRenderer",
                "org.graphstream.ui.swingViewer"
            ],
            [
                "LayerRenderer",
                "org.graphstream.ui.swingViewer"
            ],
            [
                "ViewPanel",
                "org.graphstream.ui.swingViewer"
            ],
            [
                "Layouts",
                "org.graphstream.ui.layout"
            ],
            [
                "Layout",
                "org.graphstream.ui.layout"
            ],
            [
                "LayoutRunner",
                "org.graphstream.ui.layout"
            ],
            [
                "NodeParticle",
                "org.graphstream.ui.layout.springbox"
            ],
            [
                "GraphCellData",
                "org.graphstream.ui.layout.springbox"
            ],
            [
                "EdgeSpring",
                "org.graphstream.ui.layout.springbox"
            ],
            [
                "Energies",
                "org.graphstream.ui.layout.springbox"
            ],
            [
                "BarnesHutLayout",
                "org.graphstream.ui.layout.springbox"
            ],
            [
                "LinLog",
                "org.graphstream.ui.layout.springbox.implementations"
            ],
            [
                "LinLogNodeParticle",
                "org.graphstream.ui.layout.springbox.implementations"
            ],
            [
                "SpringBoxNodeParticle",
                "org.graphstream.ui.layout.springbox.implementations"
            ],
            [
                "SpringBox",
                "org.graphstream.ui.layout.springbox.implementations"
            ],
            [
                "Point2",
                "org.graphstream.ui.geom"
            ],
            [
                "Vector2",
                "org.graphstream.ui.geom"
            ],
            [
                "Vector3",
                "org.graphstream.ui.geom"
            ],
            [
                "Point3",
                "org.graphstream.ui.geom"
            ],
            [
                "ViewerListener",
                "org.graphstream.ui.view"
            ],
            [
                "MouseManager",
                "org.graphstream.ui.view.util"
            ],
            [
                "ShortcutManager",
                "org.graphstream.ui.view.util"
            ],
            [
                "DefaultShortcutManager",
                "org.graphstream.ui.view.util"
            ],
            [
                "FpsCounter",
                "org.graphstream.ui.view.util"
            ],
            [
                "CubicCurve",
                "org.graphstream.ui.view.util"
            ],
            [
                "DefaultMouseManager",
                "org.graphstream.ui.view.util"
            ],
            [
                "Selection",
                "org.graphstream.ui.view"
            ],
            [
                "ViewerPipe",
                "org.graphstream.ui.view"
            ],
            [
                "Viewer",
                "org.graphstream.ui.view"
            ],
            [
                "View",
                "org.graphstream.ui.view"
            ],
            [
                "Camera",
                "org.graphstream.ui.view"
            ],
            [
                "Sprite",
                "org.graphstream.ui.spriteManager"
            ],
            [
                "InvalidSpriteIDException",
                "org.graphstream.ui.spriteManager"
            ],
            [
                "SpriteManager",
                "org.graphstream.ui.spriteManager"
            ],
            [
                "SpriteFactory",
                "org.graphstream.ui.spriteManager"
            ],
            [
                "StyleGroupListener",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "Colors",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "Values",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "StyleSheetListener",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "StyleSheetParserTokenManager",
                "org.graphstream.ui.graphicGraph.stylesheet.parser"
            ],
            [
                "StyleSheetParserConstants",
                "org.graphstream.ui.graphicGraph.stylesheet.parser"
            ],
            [
                "StyleSheetParser",
                "org.graphstream.ui.graphicGraph.stylesheet.parser"
            ],
            [
                "Style",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "StyleSheet",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "StyleConstants",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "Selector",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "Value",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "Rule",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "GraphicNode",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "StyleGroup",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphPosLengthUtils",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphicEdge",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphicElementChangeListener",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphicGraph",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "StyleGroupSet",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphicSprite",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphicElement",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "VerboseSink",
                "org.graphstream.util"
            ],
            [
                "GraphListeners",
                "org.graphstream.util"
            ],
            [
                "Environment",
                "org.graphstream.util"
            ],
            [
                "GraphDiff",
                "org.graphstream.util"
            ],
            [
                "Filters",
                "org.graphstream.util"
            ],
            [
                "FilteredEdgeIterator",
                "org.graphstream.util"
            ],
            [
                "Parser",
                "org.graphstream.util.parser"
            ],
            [
                "ParserFactory",
                "org.graphstream.util.parser"
            ],
            [
                "TokenMgrError",
                "org.graphstream.util.parser"
            ],
            [
                "ParseException",
                "org.graphstream.util.parser"
            ],
            [
                "SimpleCharStream",
                "org.graphstream.util.parser"
            ],
            [
                "Token",
                "org.graphstream.util.parser"
            ],
            [
                "ISODateIO",
                "org.graphstream.util.time"
            ],
            [
                "ISODateComponent",
                "org.graphstream.util.time"
            ],
            [
                "FilteredNodeIterator",
                "org.graphstream.util"
            ],
            [
                "FixedArrayList",
                "org.graphstream.util.set"
            ],
            [
                "StepCounter",
                "org.graphstream.util"
            ],
            [
                "GraphSpells",
                "org.graphstream.util.cumulative"
            ],
            [
                "CumulativeAttributes",
                "org.graphstream.util.cumulative"
            ],
            [
                "CumulativeSpells",
                "org.graphstream.util.cumulative"
            ],
            [
                "Filter",
                "org.graphstream.util"
            ],
            [
                "PipeAdapter",
                "org.graphstream.stream"
            ],
            [
                "GraphParseException",
                "org.graphstream.stream"
            ],
            [
                "ElementSink",
                "org.graphstream.stream"
            ],
            [
                "URLSource",
                "org.graphstream.stream.net"
            ],
            [
                "HTTPSource",
                "org.graphstream.stream.net"
            ],
            [
                "SourceAdapter",
                "org.graphstream.stream"
            ],
            [
                "AttributeSink",
                "org.graphstream.stream"
            ],
            [
                "GMLParserConstants",
                "org.graphstream.stream.file.gml"
            ],
            [
                "GMLParserTokenManager",
                "org.graphstream.stream.file.gml"
            ],
            [
                "GMLContext",
                "org.graphstream.stream.file.gml"
            ],
            [
                "Graphics",
                "org.graphstream.stream.file.gml"
            ],
            [
                "KeyValues",
                "org.graphstream.stream.file.gml"
            ],
            [
                "GMLParser",
                "org.graphstream.stream.file.gml"
            ],
            [
                "FileSinkGraphML",
                "org.graphstream.stream.file"
            ],
            [
                "TLPParserConstants",
                "org.graphstream.stream.file.tlp"
            ],
            [
                "TLPParser",
                "org.graphstream.stream.file.tlp"
            ],
            [
                "TLPParserTokenManager",
                "org.graphstream.stream.file.tlp"
            ],
            [
                "FileSinkFactory",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceEdge",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkBase",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkTikZ",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceGEXF",
                "org.graphstream.stream.file"
            ],
            [
                "DOTParser",
                "org.graphstream.stream.file.dot"
            ],
            [
                "DOTParserConstants",
                "org.graphstream.stream.file.dot"
            ],
            [
                "DOTParserTokenManager",
                "org.graphstream.stream.file.dot"
            ],
            [
                "FileSink",
                "org.graphstream.stream.file"
            ],
            [
                "PajekContext",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "Graphics",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "NodeGraphics",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "EdgeGraphics",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "EdgeMatrix",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "PajekParserTokenManager",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "PajekParserConstants",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "FileSourceXML",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkBaseFiltered",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkDOT",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceParser",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkDGSFiltered",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceDOT",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceDGS1And2",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceGraphML",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceFactory",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkImages",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkDynamicGML",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkSVG",
                "org.graphstream.stream.file"
            ],
            [
                "GEXFSpell",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "SmartXMLWriter",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFElement",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFEdges",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFAttValues",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFEdge",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFSpells",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFAttValue",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFNodes",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFNode",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFMeta",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFAttributes",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXF",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFGraph",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFAttribute",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "OldFileSourceDGS",
                "org.graphstream.stream.file.dgs"
            ],
            [
                "DGSParser",
                "org.graphstream.stream.file.dgs"
            ],
            [
                "FileSourceBase",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkGML",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceDGS",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkDGSUtility",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceTLP",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkSVG2",
                "org.graphstream.stream.file"
            ],
            [
                "FileSource",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceNCol",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourcePajek",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceGPX",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceLGL",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkGEXF2",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceGML",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkGEXF",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkDGS",
                "org.graphstream.stream.file"
            ],
            [
                "ProxyPipe",
                "org.graphstream.stream"
            ],
            [
                "Sink",
                "org.graphstream.stream"
            ],
            [
                "Timeline",
                "org.graphstream.stream"
            ],
            [
                "Pipe",
                "org.graphstream.stream"
            ],
            [
                "SinkAdapter",
                "org.graphstream.stream"
            ],
            [
                "Replayable",
                "org.graphstream.stream"
            ],
            [
                "Source",
                "org.graphstream.stream"
            ],
            [
                "AnnotatedSink",
                "org.graphstream.stream"
            ],
            [
                "GraphReplay",
                "org.graphstream.stream"
            ],
            [
                "AttributePipe",
                "org.graphstream.stream"
            ],
            [
                "SinkTime",
                "org.graphstream.stream.sync"
            ],
            [
                "SourceTime",
                "org.graphstream.stream.sync"
            ],
            [
                "PipeBase",
                "org.graphstream.stream"
            ],
            [
                "ThreadProxyPipe",
                "org.graphstream.stream.thread"
            ],
            [
                "ThreadProxyPipeOld",
                "org.graphstream.stream.thread"
            ],
            [
                "RMISource",
                "org.graphstream.stream.rmi"
            ],
            [
                "RMIAdapterOut",
                "org.graphstream.stream.rmi"
            ],
            [
                "RMISink",
                "org.graphstream.stream.rmi"
            ],
            [
                "RMIAdapterIn",
                "org.graphstream.stream.rmi"
            ],
            [
                "SourceBase",
                "org.graphstream.stream"
            ],
            [
                "NetStreamDecoder",
                "org.graphstream.stream.netstream"
            ],
            [
                "NetStreamReceiver",
                "org.graphstream.stream.netstream"
            ],
            [
                "NetStreamConstants",
                "org.graphstream.stream.netstream"
            ],
            [
                "NetStreamSender",
                "org.graphstream.stream.netstream"
            ],
            [
                "DefaultNetStreamDecoder",
                "org.graphstream.stream.netstream"
            ],
            [
                "Base64",
                "org.graphstream.stream.netstream.packing"
            ],
            [
                "NetStreamUnpacker",
                "org.graphstream.stream.netstream.packing"
            ],
            [
                "Base64Packer",
                "org.graphstream.stream.netstream.packing"
            ],
            [
                "Base64Unpacker",
                "org.graphstream.stream.netstream.packing"
            ],
            [
                "NetStreamPacker",
                "org.graphstream.stream.netstream.packing"
            ],
            [
                "AttributePredicate",
                "org.graphstream.stream"
            ],
            [
                "Element",
                "org.graphstream.graph"
            ],
            [
                "Node",
                "org.graphstream.graph"
            ],
            [
                "BreadthFirstIterator",
                "org.graphstream.graph"
            ],
            [
                "Graph",
                "org.graphstream.graph"
            ],
            [
                "EdgeRejectedException",
                "org.graphstream.graph"
            ],
            [
                "CompoundAttribute",
                "org.graphstream.graph"
            ],
            [
                "Structure",
                "org.graphstream.graph"
            ],
            [
                "DepthFirstIterator",
                "org.graphstream.graph"
            ],
            [
                "NullAttributeException",
                "org.graphstream.graph"
            ],
            [
                "IdAlreadyInUseException",
                "org.graphstream.graph"
            ],
            [
                "EdgeFactory",
                "org.graphstream.graph"
            ],
            [
                "ElementNotFoundException",
                "org.graphstream.graph"
            ],
            [
                "OneAttributeElement",
                "org.graphstream.graph.implementations"
            ],
            [
                "AdjacencyListNode",
                "org.graphstream.graph.implementations"
            ],
            [
                "SingleNode",
                "org.graphstream.graph.implementations"
            ],
            [
                "AbstractElement",
                "org.graphstream.graph.implementations"
            ],
            [
                "AdjacencyListGraph",
                "org.graphstream.graph.implementations"
            ],
            [
                "AbstractNode",
                "org.graphstream.graph.implementations"
            ],
            [
                "DefaultGraph",
                "org.graphstream.graph.implementations"
            ],
            [
                "MultiGraph",
                "org.graphstream.graph.implementations"
            ],
            [
                "Graphs",
                "org.graphstream.graph.implementations"
            ],
            [
                "SingleGraph",
                "org.graphstream.graph.implementations"
            ],
            [
                "MultiNode",
                "org.graphstream.graph.implementations"
            ],
            [
                "AbstractGraph",
                "org.graphstream.graph.implementations"
            ],
            [
                "AbstractEdge",
                "org.graphstream.graph.implementations"
            ],
            [
                "GraphFactory",
                "org.graphstream.graph"
            ],
            [
                "NodeFactory",
                "org.graphstream.graph"
            ],
            [
                "Edge",
                "org.graphstream.graph"
            ],
            [
                "Path",
                "org.graphstream.graph"
            ]
        ],
        "tokensProjectClassesNonPrivateStaticNonVoidMethods": [
            [
                "gradientInArea",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static Paint gradientInArea(int x0, int y0, int width, int height, Style style)"
            ],
            [
                "linearGradientFromStyle",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static Paint linearGradientFromStyle(float x0, float y0, float x1, float y1, Style style)"
            ],
            [
                "radialGradientFromStyle",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static Paint radialGradientFromStyle(float cx, float cy, float radius, Style style)"
            ],
            [
                "radialGradientFromStyle",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static Paint radialGradientFromStyle(float cx, float cy, float radius, float fx, float fy, Style style)"
            ],
            [
                "createFractions",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "protected static float[] createFractions(Style style)"
            ],
            [
                "createColors",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "protected static Color[] createColors(Style style)"
            ],
            [
                "defaultImageCache",
                "org.graphstream.ui.swingViewer.util",
                "ImageCache",
                "public static ImageCache defaultImageCache()"
            ],
            [
                "generateStroke",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "public static Stroke generateStroke(Style style, GraphMetrics metrics)"
            ],
            [
                "generatePlainStroke",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "protected static Stroke generatePlainStroke(Style style, GraphMetrics metrics)"
            ],
            [
                "generateDotsStroke",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "protected static Stroke generateDotsStroke(Style style, GraphMetrics metrics)"
            ],
            [
                "generateDashesStroke",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "protected static Stroke generateDashesStroke(Style style, GraphMetrics metrics)"
            ],
            [
                "defaultFontCache",
                "org.graphstream.ui.swingViewer.util",
                "FontCache",
                "public static FontCache defaultFontCache()"
            ],
            [
                "newLayoutAlgorithm",
                "org.graphstream.ui.layout",
                "Layouts",
                "public static Layout newLayoutAlgorithm()"
            ],
            [
                "eval",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "public static double eval(double x0, double x1, double x2, double x3, double t)"
            ],
            [
                "eval",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "public static Point2 eval(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t)"
            ],
            [
                "eval",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "public static Point2D.Double eval(Point2D.Double p0, Point2D.Double p1, Point2D.Double p2, Point2D.Double p3, double t)"
            ],
            [
                "eval",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "public static Point2 eval(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t, Point2 result)"
            ],
            [
                "derivative",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "public static double derivative(double x0, double x1, double x2, double x3, double t)"
            ],
            [
                "derivative",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "public static Point2 derivative(Point2 p0, Point2 p1, Point2 p2, Point3 p3, double t)"
            ],
            [
                "derivative",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "public static Point2 derivative(Point2 p0, Point2 p1, Point2 p2, Point3 p3, double t, Point2 result)"
            ],
            [
                "perpendicular",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "public static Vector2 perpendicular(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t)"
            ],
            [
                "perpendicular",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "public static Vector2 perpendicular(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t, Vector2 result)"
            ],
            [
                "perpendicular",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "public static Point2D.Double perpendicular(Point2D.Double p0, Point2D.Double p1, Point2D.Double p2, Point2D.Double p3, double t)"
            ],
            [
                "newGraphRenderer",
                "org.graphstream.ui.view",
                "Viewer",
                "public static GraphRenderer newGraphRenderer()"
            ],
            [
                "getPositionValue",
                "org.graphstream.ui.spriteManager",
                "SpriteManager",
                "protected static Values getPositionValue(Object value)"
            ],
            [
                "convertColor",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "public static Color convertColor(Object anyValue)"
            ],
            [
                "convertLabel",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "public static String convertLabel(Object value)"
            ],
            [
                "convertWidth",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "public static float convertWidth(Object value)"
            ],
            [
                "convertValue",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "public static Value convertValue(Object value)"
            ],
            [
                "convertUnit",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "protected static Units convertUnit(String unit)"
            ],
            [
                "nodePosition",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "public static double[] nodePosition(Graph graph, String id)"
            ],
            [
                "nodePointPosition",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "public static Point3 nodePointPosition(Graph graph, String id)"
            ],
            [
                "nodePosition",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "public static double[] nodePosition(Node node)"
            ],
            [
                "nodePointPosition",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "public static Point3 nodePointPosition(Node node)"
            ],
            [
                "edgeLength",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "public static double edgeLength(Graph graph, String id)"
            ],
            [
                "edgeLength",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "public static double edgeLength(Edge edge)"
            ],
            [
                "getGlobalEnvironment",
                "org.graphstream.util",
                "Environment",
                "public static Environment getGlobalEnvironment()"
            ],
            [
                "falseFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> falseFilter()"
            ],
            [
                "trueFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> trueFilter()"
            ],
            [
                "byAttributeFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> byAttributeFilter(String key, Object expectedValue)"
            ],
            [
                "separateNodeAndEdgeFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element, U extends Element> Filter<Element> separateNodeAndEdgeFilter(Filter<T> nodeFilter, Filter<U> edgeFilter)"
            ],
            [
                "byExtremitiesFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element, U extends Element> Filter<T> byExtremitiesFilter(Filter<U> f)"
            ],
            [
                "byIdFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> byIdFilter(String idPattern)"
            ],
            [
                "isContained",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> isContained(final Collection<? extends T> set)"
            ],
            [
                "isIdContained",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> isIdContained(final Collection<String> set)"
            ],
            [
                "and",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> and(Filter<T> f1, Filter<T> f2)"
            ],
            [
                "or",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> or(Filter<T> f1, Filter<T> f2)"
            ],
            [
                "xor",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> xor(Filter<T> f1, Filter<T> f2)"
            ],
            [
                "not",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> not(Filter<T> f)"
            ],
            [
                "addEscapes",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "protected static final String addEscapes(String str)"
            ],
            [
                "LexicalError",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "protected static String LexicalError(boolean EOFSeen, int lexState, int errorLine, int errorColumn, String errorAfter, char curChar)"
            ],
            [
                "add_escapes",
                "org.graphstream.util.parser",
                "ParseException",
                "static String add_escapes(String str)"
            ],
            [
                "newToken",
                "org.graphstream.util.parser",
                "Token",
                "public static Token newToken(int ofKind, String image)"
            ],
            [
                "newToken",
                "org.graphstream.util.parser",
                "Token",
                "public static Token newToken(int ofKind)"
            ],
            [
                "countStepInFile",
                "org.graphstream.util",
                "StepCounter",
                "public static int countStepInFile(String path) throws IOException"
            ],
            [
                "GET",
                "org.graphstream.stream.net",
                "HTTPSource",
                "protected static HashMap<String, Object> GET(HttpExchange ex)"
            ],
            [
                "sinkFor",
                "org.graphstream.stream.file",
                "FileSinkFactory",
                "public static FileSink sinkFor(String filename)"
            ],
            [
                "formatId",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "protected static String formatId(String id)"
            ],
            [
                "getInt",
                "org.graphstream.stream.file.pajek",
                "PajekContext",
                "protected static int getInt(Token nb) throws ParseException"
            ],
            [
                "getReal",
                "org.graphstream.stream.file.pajek",
                "PajekContext",
                "protected static double getReal(Token nb) throws ParseException"
            ],
            [
                "toColorValue",
                "org.graphstream.stream.file.pajek",
                "PajekContext",
                "public static String toColorValue(Token R, Token G, Token B) throws ParseException"
            ],
            [
                "sourceFor",
                "org.graphstream.stream.file",
                "FileSourceFactory",
                "public static FileSource sourceFor(String fileName) throws IOException"
            ],
            [
                "getXMLRootElement",
                "org.graphstream.stream.file",
                "FileSourceFactory",
                "public static String getXMLRootElement(String fileName) throws IOException"
            ],
            [
                "formatStringForQuoting",
                "org.graphstream.stream.file",
                "FileSinkDGSUtility",
                "protected static String formatStringForQuoting(String str)"
            ],
            [
                "attributeString",
                "org.graphstream.stream.file",
                "FileSinkDGSUtility",
                "protected static String attributeString(String key, Object value, boolean remove)"
            ],
            [
                "arrayString",
                "org.graphstream.stream.file",
                "FileSinkDGSUtility",
                "protected static String arrayString(Object value)"
            ],
            [
                "valueString",
                "org.graphstream.stream.file",
                "FileSinkDGSUtility",
                "protected static String valueString(Object value)"
            ],
            [
                "hashToString",
                "org.graphstream.stream.file",
                "FileSinkDGSUtility",
                "protected static String hashToString(HashMap<?, ?> hash)"
            ],
            [
                "encodeObject",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public static String encodeObject(java.io.Serializable serializableObject) throws java.io.IOException"
            ],
            [
                "encodeObject",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public static String encodeObject(java.io.Serializable serializableObject, int options) throws java.io.IOException"
            ],
            [
                "encodeBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public static String encodeBytes(byte[] source)"
            ],
            [
                "encodeBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public static String encodeBytes(byte[] source, int options) throws java.io.IOException"
            ],
            [
                "encodeBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public static String encodeBytes(byte[] source, int off, int len)"
            ],
            [
                "encodeBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public static String encodeBytes(byte[] source, int off, int len, int options) throws java.io.IOException"
            ],
            [
                "encodeBytesToBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public static byte[] encodeBytesToBytes(byte[] source)"
            ],
            [
                "encodeBytesToBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public static byte[] encodeBytesToBytes(byte[] source, int off, int len, int options) throws java.io.IOException"
            ],
            [
                "decode",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public static byte[] decode(byte[] source) throws java.io.IOException"
            ],
            [
                "decode",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public static byte[] decode(byte[] source, int off, int len, int options) throws java.io.IOException"
            ],
            [
                "decode",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public static byte[] decode(String s) throws java.io.IOException"
            ],
            [
                "decode",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public static byte[] decode(String s, int options) throws java.io.IOException"
            ],
            [
                "decodeToObject",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public static Object decodeToObject(String encodedObject) throws java.io.IOException, java.lang.ClassNotFoundException"
            ],
            [
                "decodeToObject",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public static Object decodeToObject(String encodedObject, int options, final ClassLoader loader) throws java.io.IOException, java.lang.ClassNotFoundException"
            ],
            [
                "decodeFromFile",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public static byte[] decodeFromFile(String filename) throws java.io.IOException"
            ],
            [
                "encodeFromFile",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public static String encodeFromFile(String filename) throws java.io.IOException"
            ],
            [
                "unmutableGraph",
                "org.graphstream.graph.implementations",
                "Graphs",
                "public static Graph unmutableGraph(Graph g)"
            ],
            [
                "synchronizedGraph",
                "org.graphstream.graph.implementations",
                "Graphs",
                "public static Graph synchronizedGraph(Graph g)"
            ],
            [
                "merge",
                "org.graphstream.graph.implementations",
                "Graphs",
                "public static Graph merge(Graph... graphs)"
            ],
            [
                "clone",
                "org.graphstream.graph.implementations",
                "Graphs",
                "public static Graph clone(Graph g)"
            ]
        ],
        "tokensProjectClassesNonPrivateStaticAttributes": [
            [
                "version16",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static boolean version16 = false;"
            ],
            [
                "predefFractions",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[][] predefFractions = new float[11][];"
            ],
            [
                "predefFractions2",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions2 = { 0f, 1f };"
            ],
            [
                "predefFractions3",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions3 = { 0f, 0.5f, 1f };"
            ],
            [
                "predefFractions4",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions4 = { 0f, 0.33f, 0.66f, 1f };"
            ],
            [
                "predefFractions5",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions5 = { 0f, 0.25f, 0.5f, 0.75f, 1f };"
            ],
            [
                "predefFractions6",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions6 = { 0f, 0.2f, 0.4f, 0.6f, 0.8f, 1f };"
            ],
            [
                "predefFractions7",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions7 = { 0f, 0.1666f, 0.3333f, 0.4999f, 0.6666f, 0.8333f, 1f };"
            ],
            [
                "predefFractions8",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions8 = { 0f, 0.1428f, 0.2856f, 0.4284f, 0.5712f, 0.7140f, 0.8568f, 1f };"
            ],
            [
                "predefFractions9",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions9 = { 0f, 0.125f, 0.25f, 0.375f, 0.5f, 0.625f, .75f, 0.875f, 1f };"
            ],
            [
                "predefFractions10",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions10 = { 0f, 0.1111f, 0.2222f, 0.3333f, 0.4444f, 0.5555f, 0.6666f, 0.7777f, 0.8888f, 1f };"
            ],
            [
                "defaultImageCache",
                "org.graphstream.ui.swingViewer.util",
                "ImageCache",
                "protected static ImageCache defaultImageCache;"
            ],
            [
                "dots",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "protected static float[] dots = { 1f, 1f };"
            ],
            [
                "dashes",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "protected static float[] dashes = { 3f, 3f };"
            ],
            [
                "defaultFontCache",
                "org.graphstream.ui.swingViewer.util",
                "FontCache",
                "public static FontCache defaultFontCache;"
            ],
            [
                "NULL_POINT2",
                "org.graphstream.ui.geom",
                "Point2",
                "public static final Point2 NULL_POINT2 = new Point2(0, 0);"
            ],
            [
                "NULL_POINT3",
                "org.graphstream.ui.geom",
                "Point3",
                "public static final Point3 NULL_POINT3 = new Point3(0, 0, 0);"
            ],
            [
                "DEFAULT_VIEW_ID",
                "org.graphstream.ui.view",
                "Viewer",
                "public static String DEFAULT_VIEW_ID = \"defaultView\";"
            ],
            [
                "jjbitVec0",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };"
            ],
            [
                "jjnextStates",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "static final int[] jjnextStates = { 48, 49, 52, 54, 55, 65, 69, 2, 4, 6, 10, 16, 23, 33, 50, 52, 54, 55, 57, 58, 60, 61, 66, 68, 70, 71 };"
            ],
            [
                "jjstrLiteralImages",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "public static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, \"\\56\", \"\\173\", \"\\175\", \"\\50\", \"\\51\", \"\\43\", \"\\72\", \"\\73\", \"\\54\", \"\\162\\147\\142\\141\", \"\\162\\147\\142\", null, null, null, \"\\165\\162\\154\", \"\\147\\162\\141\\160\\150\", \"\\145\\144\\147\\145\", \"\\156\\157\\144\\145\", \"\\163\\160\\162\\151\\164\\145\", \"\\146\\151\\154\\154\\55\\155\\157\\144\\145\", \"\\146\\151\\154\\154\\55\\143\\157\\154\\157\\162\", \"\\146\\151\\154\\154\\55\\151\\155\\141\\147\\145\", \"\\163\\164\\162\\157\\153\\145\\55\\155\\157\\144\\145\", \"\\163\\164\\162\\157\\153\\145\\55\\143\\157\\154\\157\\162\", \"\\163\\164\\162\\157\\153\\145\\55\\167\\151\\144\\164\\150\", \"\\163\\150\\141\\144\\157\\167\\55\\155\\157\\144\\145\", \"\\163\\150\\141\\144\\157\\167\\55\\143\\157\\154\\157\\162\", \"\\163\\150\\141\\144\\157\\167\\55\\167\\151\\144\\164\\150\", \"\\163\\150\\141\\144\\157\\167\\55\\157\\146\\146\\163\\145\\164\", \"\\164\\145\\170\\164\\55\\155\\157\\144\\145\", \"\\164\\145\\170\\164\\55\\143\\157\\154\\157\\162\", \"\\164\\145\\170\\164\\55\\163\\164\\171\\154\\145\", \"\\164\\145\\170\\164\\55\\146\\157\\156\\164\", \"\\164\\145\\170\\164\\55\\163\\151\\172\\145\", \"\\164\\145\\170\\164\\55\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\\55\\155\\157\\144\\145\", \"\\164\\145\\170\\164\\55\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\", \"\\164\\145\\170\\164\\55\\142\\141\\143\\153\\147\\162\\157\\165\\156\\144\\55\\155\\157\\144\\145\", \"\\164\\145\\170\\164\\55\\142\\141\\143\\153\\147\\162\\157\\165\\156\\144\\55\\143\\157\\154\\157\\162\", \"\\164\\145\\170\\164\\55\\157\\146\\146\\163\\145\\164\", \"\\164\\145\\170\\164\\55\\160\\141\\144\\144\\151\\156\\147\", \"\\151\\143\\157\\156\\55\\155\\157\\144\\145\", \"\\151\\143\\157\\156\", \"\\160\\141\\144\\144\\151\\156\\147\", \"\\172\\55\\151\\156\\144\\145\\170\", \"\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\\55\\155\\157\\144\\145\", \"\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\", \"\\163\\150\\141\\160\\145\", \"\\163\\151\\172\\145\", \"\\163\\151\\172\\145\\55\\155\\157\\144\\145\", \"\\163\\150\\141\\160\\145\\55\\160\\157\\151\\156\\164\\163\", \"\\164\\145\\170\\164\\55\\141\\154\\151\\147\\156\\155\\145\\156\\164\", \"\\152\\143\\157\\155\\160\\157\\156\\145\\156\\164\", \"\\141\\162\\162\\157\\167\\55\\151\\155\\141\\147\\145\", \"\\141\\162\\162\\157\\167\\55\\163\\151\\172\\145\", \"\\141\\162\\162\\157\\167\\55\\163\\150\\141\\160\\145\", \"\\163\\160\\162\\151\\164\\145\\55\\157\\162\\151\\145\\156\\164\\141\\164\\151\\157\\156\", \"\\143\\141\\156\\166\\141\\163\\55\\143\\157\\154\\157\\162\", \"\\160\\154\\141\\151\\156\", \"\\144\\171\\156\\55\\160\\154\\141\\151\\156\", \"\\144\\171\\156\\55\\163\\151\\172\\145\", \"\\144\\171\\156\\55\\151\\143\\157\\156\", \"\\144\\141\\163\\150\\145\\163\", \"\\144\\157\\164\\163\", \"\\144\\157\\165\\142\\154\\145\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\144\\151\\141\\147\\157\\156\\141\\154\\61\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\144\\151\\141\\147\\157\\156\\141\\154\\62\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\150\\157\\162\\151\\172\\157\\156\\164\\141\\154\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\162\\141\\144\\151\\141\\154\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\166\\145\\162\\164\\151\\143\\141\\154\", \"\\150\\151\\144\\144\\145\\156\", \"\\151\\155\\141\\147\\145\\55\\164\\151\\154\\145\\144\", \"\\151\\155\\141\\147\\145\\55\\163\\143\\141\\154\\145\\144\", \"\\151\\155\\141\\147\\145\\55\\163\\143\\141\\154\\145\\144\\55\\162\\141\\164\\151\\157\\55\\155\\141\\170\", \"\\151\\155\\141\\147\\145\\55\\163\\143\\141\\154\\145\\144\\55\\162\\141\\164\\151\\157\\55\\155\\151\\156\", \"\\156\\157\\156\\145\", \"\\156\\157\\162\\155\\141\\154\", \"\\164\\162\\165\\156\\143\\141\\164\\145\\144\", \"\\172\\157\\157\\155\\55\\162\\141\\156\\147\\145\", \"\\141\\164\\55\\172\\157\\157\\155\", \"\\165\\156\\144\\145\\162\\55\\172\\157\\157\\155\", \"\\157\\166\\145\\162\\55\\172\\157\\157\\155\", \"\\172\\157\\157\\155\\163\", \"\\146\\151\\164\", \"\\142\\157\\154\\144\", \"\\142\\157\\154\\144\\55\\151\\164\\141\\154\\151\\143\", \"\\151\\164\\141\\154\\151\\143\", \"\\141\\154\\157\\156\\147\", \"\\141\\164\\55\\154\\145\\146\\164\", \"\\141\\164\\55\\162\\151\\147\\150\\164\", \"\\143\\145\\156\\164\\145\\162\", \"\\154\\145\\146\\164\", \"\\162\\151\\147\\150\\164\", \"\\165\\156\\144\\145\\162\", \"\\141\\142\\157\\166\\145\", \"\\152\\165\\163\\164\\151\\146\\171\", \"\\143\\151\\162\\143\\154\\145\", \"\\164\\162\\151\\141\\156\\147\\154\\145\", \"\\146\\162\\145\\145\\160\\154\\141\\156\\145\", \"\\164\\145\\170\\164\\55\\142\\157\\170\", \"\\164\\145\\170\\164\\55\\162\\157\\165\\156\\144\\145\\144\\55\\142\\157\\170\", \"\\164\\145\\170\\164\\55\\143\\151\\162\\143\\154\\145\", \"\\164\\145\\170\\164\\55\\144\\151\\141\\155\\157\\156\\144\", \"\\164\\145\\170\\164\\55\\160\\141\\162\\141\\147\\162\\141\\160\\150\", \"\\142\\157\\170\", \"\\162\\157\\165\\156\\144\\145\\144\\55\\142\\157\\170\", \"\\143\\162\\157\\163\\163\", \"\\144\\151\\141\\155\\157\\156\\144\", \"\\160\\157\\154\\171\\147\\157\\156\", \"\\142\\165\\164\\164\\157\\156\", \"\\164\\145\\170\\164\\55\\146\\151\\145\\154\\144\", \"\\160\\141\\156\\145\\154\", \"\\154\\151\\156\\145\", \"\\160\\157\\154\\171\\154\\151\\156\\145\", \"\\160\\157\\154\\171\\154\\151\\156\\145\\55\\163\\143\\141\\154\\145\\144\", \"\\141\\156\\147\\154\\145\", \"\\143\\165\\142\\151\\143\\55\\143\\165\\162\\166\\145\", \"\\142\\154\\157\\142\", \"\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\114\\55\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\150\\157\\162\\151\\172\\157\\156\\164\\141\\154\\55\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\166\\145\\162\\164\\151\\143\\141\\154\\55\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\141\\162\\162\\157\\167\", \"\\146\\154\\157\\167\", \"\\160\\151\\145\\55\\143\\150\\141\\162\\164\", \"\\151\\155\\141\\147\\145\", \"\\151\\155\\141\\147\\145\\163\", \"\\146\\162\\157\\155\", \"\\156\\157\\144\\145\\60\", \"\\164\\157\", \"\\156\\157\\144\\145\\61\", \"\\160\\162\\157\\152\\145\\143\\164\\151\\157\\156\", \"\\143\\154\\151\\143\\153\\145\\144\", \"\\163\\145\\154\\145\\143\\164\\145\\144\", null, null };"
            ],
            [
                "lexStateNames",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "public static final String[] lexStateNames = { \"DEFAULT\" };"
            ],
            [
                "jjtoToken",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "static final long[] jjtoToken = { 0xfffffffffffffe01L, 0xffffffffffffffffL, 0xffffL };"
            ],
            [
                "jjtoSkip",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "static final long[] jjtoSkip = { 0x1eL, 0x0L, 0x0L };"
            ],
            [
                "colorMap",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "protected static HashMap<String,Color> colorMap;"
            ],
            [
                "sharpColor1",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "protected static Pattern sharpColor1;"
            ],
            [
                "sharpColor2",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "protected static Pattern sharpColor2;"
            ],
            [
                "cssColor",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "protected static Pattern cssColor;"
            ],
            [
                "cssColorA",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "protected static Pattern cssColorA;"
            ],
            [
                "awtColor",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "protected static Pattern awtColor;"
            ],
            [
                "hexaColor",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "protected static Pattern hexaColor;"
            ],
            [
                "numberUnit",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "protected static Pattern numberUnit;"
            ],
            [
                "number",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "protected static Pattern number;"
            ],
            [
                "acceptedAttribute",
                "org.graphstream.ui.graphicGraph",
                "GraphicElement",
                "protected static Pattern acceptedAttribute;"
            ],
            [
                "DEFAULT_AN_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_AN_FORMAT = \"%prefix%[%sourceId%:%timeId%] add node \\\"%nodeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_CNA_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CNA_FORMAT = \"%prefix%[%sourceId%:%timeId%] set node \\\"%nodeId%\\\" +\\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CNC_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CNC_FORMAT = \"%prefix%[%sourceId%:%timeId%] set node \\\"%nodeId%\\\" \\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CNR_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CNR_FORMAT = \"%prefix%[%sourceId%:%timeId%] set node \\\"%nodeId%\\\" -\\\"%attributeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_DN_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_DN_FORMAT = \"%prefix%[%sourceId%:%timeId%] remove node \\\"%nodeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_AE_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_AE_FORMAT = \"%prefix%[%sourceId%:%timeId%] add edge \\\"%edgeId%\\\" : \\\"%source%\\\" -- \\\"%target%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_CEA_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CEA_FORMAT = \"%prefix%[%sourceId%:%timeId%] set edge \\\"%edgeId%\\\" +\\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CEC_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CEC_FORMAT = \"%prefix%[%sourceId%:%timeId%] set edge \\\"%edgeId%\\\" \\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CER_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CER_FORMAT = \"%prefix%[%sourceId%:%timeId%] set edge \\\"%edgeId%\\\" -\\\"%attributeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_DE_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_DE_FORMAT = \"%prefix%[%sourceId%:%timeId%] remove edge \\\"%edgeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_CGA_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CGA_FORMAT = \"%prefix%[%sourceId%:%timeId%] set +\\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CGC_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CGC_FORMAT = \"%prefix%[%sourceId%:%timeId%] set \\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CGR_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CGR_FORMAT = \"%prefix%[%sourceId%:%timeId%] set -\\\"%attributeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_CL_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CL_FORMAT = \"%prefix%[%sourceId%:%timeId%] clear%suffix%\";"
            ],
            [
                "DEFAULT_ST_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_ST_FORMAT = \"%prefix%[%sourceId%:%timeId%] step %step% begins%suffix%\";"
            ],
            [
                "GLOBAL_ENV",
                "org.graphstream.util",
                "Environment",
                "public static Environment GLOBAL_ENV;"
            ],
            [
                "LEXICAL_ERROR",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "public static final int LEXICAL_ERROR = 0;"
            ],
            [
                "STATIC_LEXER_ERROR",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "public static final int STATIC_LEXER_ERROR = 1;"
            ],
            [
                "INVALID_LEXICAL_STATE",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "public static final int INVALID_LEXICAL_STATE = 2;"
            ],
            [
                "LOOP_DETECTED",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "public static final int LOOP_DETECTED = 3;"
            ],
            [
                "staticFlag",
                "org.graphstream.util.parser",
                "SimpleCharStream",
                "public static final boolean staticFlag = false;"
            ],
            [
                "ABBREVIATED_WEEKDAY_NAME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent ABBREVIATED_WEEKDAY_NAME = new NotImplementedComponent(\"%a\", \"\\\\w+[.]\");"
            ],
            [
                "FULL_WEEKDAY_NAME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent FULL_WEEKDAY_NAME = new NotImplementedComponent(\"%A\", \"\\\\w+\");"
            ],
            [
                "ABBREVIATED_MONTH_NAME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent ABBREVIATED_MONTH_NAME = new NotImplementedComponent(\"%b\", \"\\\\w+[.]\");"
            ],
            [
                "FULL_MONTH_NAME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent FULL_MONTH_NAME = new NotImplementedComponent(\"%B\", \"\\\\w+\");"
            ],
            [
                "LOCALE_DATE_AND_TIME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent LOCALE_DATE_AND_TIME = new NotImplementedComponent(\"%c\", null);"
            ],
            [
                "CENTURY",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent CENTURY = new NotImplementedComponent(\"%C\", \"\\\\d\\\\d\");"
            ],
            [
                "DAY_OF_MONTH_2_DIGITS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DAY_OF_MONTH_2_DIGITS = new FieldComponent(\"%d\", \"[012]\\\\d|3[01]\", Calendar.DAY_OF_MONTH, \"%02d\");"
            ],
            [
                "DATE",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DATE = new AliasComponent(\"%D\", \"%m/%d/%y\");"
            ],
            [
                "DAY_OF_MONTH",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DAY_OF_MONTH = new FieldComponent(\"%e\", \"\\\\d|[12]\\\\d|3[01]\", Calendar.DAY_OF_MONTH, \"%2d\");"
            ],
            [
                "DATE_ISO8601",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DATE_ISO8601 = new AliasComponent(\"%F\", \"%Y-%m-%d\");"
            ],
            [
                "WEEK_BASED_YEAR_2_DIGITS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent WEEK_BASED_YEAR_2_DIGITS = new FieldComponent(\"%g\", \"\\\\d\\\\d\", Calendar.YEAR, \"%02d\");"
            ],
            [
                "WEEK_BASED_YEAR_4_DIGITS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent WEEK_BASED_YEAR_4_DIGITS = new FieldComponent(\"%G\", \"\\\\d{4}\", Calendar.YEAR, \"%04d\");"
            ],
            [
                "ABBREVIATED_MONTH_NAME_ALIAS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent ABBREVIATED_MONTH_NAME_ALIAS = new AliasComponent(\"%h\", \"%b\");"
            ],
            [
                "HOUR_OF_DAY",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent HOUR_OF_DAY = new FieldComponent(\"%H\", \"[01]\\\\d|2[0123]\", Calendar.HOUR_OF_DAY, \"%02d\");"
            ],
            [
                "HOUR",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent HOUR = new FieldComponent(\"%I\", \"0\\\\d|1[012]\", Calendar.HOUR, \"%02d\");"
            ],
            [
                "DAY_OF_YEAR",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DAY_OF_YEAR = new FieldComponent(\"%j\", \"[012]\\\\d\\\\d|3[0-5]\\\\d|36[0-6]\", Calendar.DAY_OF_YEAR, \"%03d\");"
            ],
            [
                "MILLISECOND",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent MILLISECOND = new FieldComponent(\"%k\", \"\\\\d{3}\", Calendar.MILLISECOND, \"%03d\");"
            ],
            [
                "EPOCH",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent EPOCH = new EpochComponent();"
            ],
            [
                "MONTH",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent MONTH = new FieldComponent(\"%m\", \"0[1-9]|1[012]\", Calendar.MONTH, -1, \"%02d\");"
            ],
            [
                "MINUTE",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent MINUTE = new FieldComponent(\"%M\", \"[0-5]\\\\d\", Calendar.MINUTE, \"%02d\");"
            ],
            [
                "NEW_LINE",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent NEW_LINE = new AliasComponent(\"%n\", \"\\n\");"
            ],
            [
                "AM_PM",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent AM_PM = new AMPMComponent();"
            ],
            [
                "LOCALE_CLOCK_TIME_12_HOUR",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent LOCALE_CLOCK_TIME_12_HOUR = new NotImplementedComponent(\"%r\", \"\");"
            ],
            [
                "HOUR_AND_MINUTE",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent HOUR_AND_MINUTE = new AliasComponent(\"%R\", \"%H:%M\");"
            ],
            [
                "SECOND",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent SECOND = new FieldComponent(\"%S\", \"[0-5]\\\\d|60\", Calendar.SECOND, \"%02d\");"
            ],
            [
                "TABULATION",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent TABULATION = new AliasComponent(\"%t\", \"\\t\");"
            ],
            [
                "TIME_ISO8601",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent TIME_ISO8601 = new AliasComponent(\"%T\", \"%H:%M:%S\");"
            ],
            [
                "DAY_OF_WEEK_1_7",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DAY_OF_WEEK_1_7 = new FieldComponent(\"%u\", \"[1-7]\", Calendar.DAY_OF_WEEK, -1, \"%1d\");"
            ],
            [
                "WEEK_OF_YEAR_FROM_SUNDAY",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent WEEK_OF_YEAR_FROM_SUNDAY = new FieldComponent(\"%U\", \"[0-4]\\\\d|5[0123]\", Calendar.WEEK_OF_YEAR, 1, \"%2d\");"
            ],
            [
                "WEEK_NUMBER_ISO8601",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent WEEK_NUMBER_ISO8601 = new NotImplementedComponent(\"%V\", \"0[1-9]|[2-4]\\\\d|5[0123]\");"
            ],
            [
                "DAY_OF_WEEK_0_6",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DAY_OF_WEEK_0_6 = new FieldComponent(\"%w\", \"[0-6]\", Calendar.DAY_OF_WEEK, \"%01d\");"
            ],
            [
                "WEEK_OF_YEAR_FROM_MONDAY",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent WEEK_OF_YEAR_FROM_MONDAY = new FieldComponent(\"%W\", \"[0-4]\\\\d|5[0123]\", Calendar.WEEK_OF_YEAR, \"%02d\");"
            ],
            [
                "LOCALE_DATE_REPRESENTATION",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent LOCALE_DATE_REPRESENTATION = new NotImplementedComponent(\"%x\", \"\");"
            ],
            [
                "LOCALE_TIME_REPRESENTATION",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent LOCALE_TIME_REPRESENTATION = new NotImplementedComponent(\"%X\", \"\");"
            ],
            [
                "YEAR_2_DIGITS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent YEAR_2_DIGITS = new FieldComponent(\"%y\", \"\\\\d\\\\d\", Calendar.YEAR, \"%02d\");"
            ],
            [
                "YEAR_4_DIGITS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent YEAR_4_DIGITS = new FieldComponent(\"%Y\", \"\\\\d{4}\", Calendar.YEAR, \"%04d\");"
            ],
            [
                "UTC_OFFSET",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent UTC_OFFSET = new UTCOffsetComponent();"
            ],
            [
                "LOCALE_TIME_ZONE_NAME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent LOCALE_TIME_ZONE_NAME = new NotImplementedComponent(\"%Z\", \"\\\\w*\");"
            ],
            [
                "PERCENT",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent PERCENT = new AliasComponent(\"%%\", \"%\");"
            ],
            [
                "jjbitVec0",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };"
            ],
            [
                "jjnextStates",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "static final int[] jjnextStates = { 5, 6, 8, 9, 13, 14 };"
            ],
            [
                "jjstrLiteralImages",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "public static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, \"\\133\", \"\\135\", null, null, null, null, null, null };"
            ],
            [
                "lexStateNames",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "public static final String[] lexStateNames = { \"DEFAULT\" };"
            ],
            [
                "jjtoToken",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "static final long[] jjtoToken = { 0xff01L };"
            ],
            [
                "jjtoSkip",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "static final long[] jjtoSkip = { 0x1eL };"
            ],
            [
                "jjbitVec0",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };"
            ],
            [
                "jjnextStates",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "static final int[] jjnextStates = { 54, 11, 12, 15, 17, 18, 1, 2, 5, 47, 52, 8, 9, 20, 21 };"
            ],
            [
                "jjstrLiteralImages",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "public static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, null, \"\\50\", \"\\51\", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null };"
            ],
            [
                "lexStateNames",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "public static final String[] lexStateNames = { \"DEFAULT\" };"
            ],
            [
                "jjtoToken",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "static final long[] jjtoToken = { 0xffffc01L };"
            ],
            [
                "jjtoSkip",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "static final long[] jjtoSkip = { 0x7eL };"
            ],
            [
                "XYZ_ATTR",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "public static final String XYZ_ATTR = \"xyz\";"
            ],
            [
                "WIDTH_ATTR",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "public static final String WIDTH_ATTR = \"ui.tikz.width\";"
            ],
            [
                "HEIGHT_ATTR",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "public static final String HEIGHT_ATTR = \"ui.tikz.height\";"
            ],
            [
                "DEFAULT_WIDTH",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "public static final double DEFAULT_WIDTH = 10;"
            ],
            [
                "DEFAULT_HEIGHT",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "public static final double DEFAULT_HEIGHT = 10;"
            ],
            [
                "DISPLAY_MIN_SIZE_IN_MM",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "public static final double DISPLAY_MIN_SIZE_IN_MM = 2;"
            ],
            [
                "DISPLAY_MAX_SIZE_IN_MM",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "public static final double DISPLAY_MAX_SIZE_IN_MM = 10;"
            ],
            [
                "jjbitVec0",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };"
            ],
            [
                "jjnextStates",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "static final int[] jjnextStates = { 21, 27, 8, 10, 11, 18, 19, 22, 23, 26, 1, 2, 13, 14 };"
            ],
            [
                "jjstrLiteralImages",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "public static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, null, \"\\133\", \"\\135\", \"\\173\", \"\\175\", \"\\72\", \"\\54\", \"\\75\", null, null, null, null, null, null, null, null, null, null, \"\\73\", null, null, null, null, null, null, null, null, null, \"\\137\" };"
            ],
            [
                "lexStateNames",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "public static final String[] lexStateNames = { \"DEFAULT\" };"
            ],
            [
                "jjtoToken",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "static final long[] jjtoToken = { 0x3ffffffc01L };"
            ],
            [
                "jjtoSkip",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "static final long[] jjtoSkip = { 0x7eL };"
            ],
            [
                "jjbitVec0",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };"
            ],
            [
                "jjnextStates",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "static final int[] jjnextStates = { 21, 22, 23, 17, 19, 2, 3, 5, 6, 8, 9 };"
            ],
            [
                "jjstrLiteralImages",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "public static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null };"
            ],
            [
                "lexStateNames",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "public static final String[] lexStateNames = { \"DEFAULT\" };"
            ],
            [
                "jjtoToken",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "static final long[] jjtoToken = { 0x3fffffffffffc9L };"
            ],
            [
                "jjtoSkip",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "static final long[] jjtoSkip = { 0x6L };"
            ],
            [
                "XMLNS",
                "org.graphstream.stream.file.gexf",
                "GEXF",
                "public static final String XMLNS = \"http://www.gexf.net/1.2draft\";"
            ],
            [
                "XMLNS_XSI",
                "org.graphstream.stream.file.gexf",
                "GEXF",
                "public static final String XMLNS_XSI = \"http://www.w3.org/2001/XMLSchema-instance\";"
            ],
            [
                "XMLNS_SL",
                "org.graphstream.stream.file.gexf",
                "GEXF",
                "public static final String XMLNS_SL = \"http://www.gexf.net/1.2draft http://www.gexf.net/1.2draft/gexf.xsd\";"
            ],
            [
                "XMLNS_VIZ",
                "org.graphstream.stream.file.gexf",
                "GEXF",
                "public static final String XMLNS_VIZ = \"http://www.gexf.net/1.2draft/viz\";"
            ],
            [
                "VERSION",
                "org.graphstream.stream.file.gexf",
                "GEXF",
                "public static final String VERSION = \"1.2\";"
            ],
            [
                "BUFFER_SIZE",
                "org.graphstream.stream.file.dgs",
                "DGSParser",
                "protected static final int BUFFER_SIZE = 4096;"
            ],
            [
                "ARRAY_OPEN",
                "org.graphstream.stream.file.dgs",
                "DGSParser",
                "public static final int ARRAY_OPEN = '{';"
            ],
            [
                "ARRAY_CLOSE",
                "org.graphstream.stream.file.dgs",
                "DGSParser",
                "public static final int ARRAY_CLOSE = '}';"
            ],
            [
                "MAP_OPEN",
                "org.graphstream.stream.file.dgs",
                "DGSParser",
                "public static final int MAP_OPEN = '[';"
            ],
            [
                "MAP_CLOSE",
                "org.graphstream.stream.file.dgs",
                "DGSParser",
                "public static final int MAP_CLOSE = ']';"
            ],
            [
                "gradientId",
                "org.graphstream.stream.file",
                "FileSinkSVG2",
                "static int gradientId = 0;"
            ],
            [
                "gradientId",
                "org.graphstream.stream.file",
                "SVGStyle",
                "static int gradientId = 0;"
            ],
            [
                "TIME_PREFIX",
                "org.graphstream.stream",
                "Timeline",
                "public static final String TIME_PREFIX = \"time\";"
            ],
            [
                "SYNC_DISABLE_KEY",
                "org.graphstream.stream.sync",
                "SinkTime",
                "public static final String SYNC_DISABLE_KEY = \"org.graphstream.stream.sync.disable\";"
            ],
            [
                "disableSync",
                "org.graphstream.stream.sync",
                "SinkTime",
                "protected static final boolean disableSync;"
            ],
            [
                "LIGHT_YELLOW",
                "org.graphstream.stream.netstream",
                "NetStreamReceiver",
                "protected static final String LIGHT_YELLOW = \"\u001b[33;1m\";"
            ],
            [
                "RESET",
                "org.graphstream.stream.netstream",
                "NetStreamReceiver",
                "protected static final String RESET = \"\u001b[0m\";"
            ],
            [
                "BUFFER_INITIAL_SIZE",
                "org.graphstream.stream.netstream",
                "NetStreamReceiver",
                "protected static final int BUFFER_INITIAL_SIZE = 8192;"
            ],
            [
                "BUFFER_INITIAL_SIZE",
                "org.graphstream.stream.netstream",
                "IncomingBuffer",
                "protected static final int BUFFER_INITIAL_SIZE = 8192;"
            ],
            [
                "EVENT_GETVERSION",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_GETVERSION = 0x00;"
            ],
            [
                "EVENT_START",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_START = 0x01;"
            ],
            [
                "EVENT_END",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_END = 0x02;"
            ],
            [
                "EVENT_ADD_NODE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_ADD_NODE = 0x10;"
            ],
            [
                "EVENT_DEL_NODE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_DEL_NODE = 0x11;"
            ],
            [
                "EVENT_ADD_EDGE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_ADD_EDGE = 0x12;"
            ],
            [
                "EVENT_DEL_EDGE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_DEL_EDGE = 0x13;"
            ],
            [
                "EVENT_STEP",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_STEP = 0x14;"
            ],
            [
                "EVENT_CLEARED",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_CLEARED = 0x15;"
            ],
            [
                "EVENT_ADD_GRAPH_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_ADD_GRAPH_ATTR = 0x16;"
            ],
            [
                "EVENT_CHG_GRAPH_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_CHG_GRAPH_ATTR = 0x17;"
            ],
            [
                "EVENT_DEL_GRAPH_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_DEL_GRAPH_ATTR = 0x18;"
            ],
            [
                "EVENT_ADD_NODE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_ADD_NODE_ATTR = 0x19;"
            ],
            [
                "EVENT_CHG_NODE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_CHG_NODE_ATTR = 0x1a;"
            ],
            [
                "EVENT_DEL_NODE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_DEL_NODE_ATTR = 0x1b;"
            ],
            [
                "EVENT_ADD_EDGE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_ADD_EDGE_ATTR = 0x1c;"
            ],
            [
                "EVENT_CHG_EDGE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_CHG_EDGE_ATTR = 0x1d;"
            ],
            [
                "EVENT_DEL_EDGE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_DEL_EDGE_ATTR = 0x1e;"
            ],
            [
                "TYPE_UNKNOWN",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_UNKNOWN = 0x00;"
            ],
            [
                "TYPE_BOOLEAN",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_BOOLEAN = 0x50;"
            ],
            [
                "TYPE_BOOLEAN_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_BOOLEAN_ARRAY = 0x51;"
            ],
            [
                "TYPE_BYTE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_BYTE = 0x52;"
            ],
            [
                "TYPE_BYTE_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_BYTE_ARRAY = 0x53;"
            ],
            [
                "TYPE_SHORT",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_SHORT = 0x54;"
            ],
            [
                "TYPE_SHORT_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_SHORT_ARRAY = 0x55;"
            ],
            [
                "TYPE_INT",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_INT = 0x56;"
            ],
            [
                "TYPE_INT_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_INT_ARRAY = 0x57;"
            ],
            [
                "TYPE_LONG",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_LONG = 0x58;"
            ],
            [
                "TYPE_LONG_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_LONG_ARRAY = 0x59;"
            ],
            [
                "TYPE_FLOAT",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_FLOAT = 0x5a;"
            ],
            [
                "TYPE_FLOAT_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_FLOAT_ARRAY = 0x5b;"
            ],
            [
                "TYPE_DOUBLE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_DOUBLE = 0x5c;"
            ],
            [
                "TYPE_DOUBLE_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_DOUBLE_ARRAY = 0x5d;"
            ],
            [
                "TYPE_STRING",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_STRING = 0x5e;"
            ],
            [
                "TYPE_RAW",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_RAW = 0x5f;"
            ],
            [
                "TYPE_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static byte TYPE_ARRAY = 0x60;"
            ],
            [
                "TYPE_NULL",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_NULL = 0x61;"
            ],
            [
                "COMMAND",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int COMMAND = 0x70;"
            ],
            [
                "NO_OPTIONS",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public final static int NO_OPTIONS = 0;"
            ],
            [
                "ENCODE",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public final static int ENCODE = 1;"
            ],
            [
                "DECODE",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public final static int DECODE = 0;"
            ],
            [
                "GZIP",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public final static int GZIP = 2;"
            ],
            [
                "DONT_GUNZIP",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public final static int DONT_GUNZIP = 4;"
            ],
            [
                "DO_BREAK_LINES",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public final static int DO_BREAK_LINES = 8;"
            ],
            [
                "URL_SAFE",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public final static int URL_SAFE = 16;"
            ],
            [
                "ORDERED",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public final static int ORDERED = 32;"
            ],
            [
                "INITIAL_EDGE_CAPACITY",
                "org.graphstream.graph.implementations",
                "AdjacencyListNode",
                "protected static final int INITIAL_EDGE_CAPACITY;"
            ],
            [
                "GROWTH_FACTOR",
                "org.graphstream.graph.implementations",
                "AdjacencyListNode",
                "protected static final double GROWTH_FACTOR = 1.1;"
            ],
            [
                "I_EDGE",
                "org.graphstream.graph.implementations",
                "AdjacencyListNode",
                "protected static final char I_EDGE = 0;"
            ],
            [
                "IO_EDGE",
                "org.graphstream.graph.implementations",
                "AdjacencyListNode",
                "protected static final char IO_EDGE = 1;"
            ],
            [
                "O_EDGE",
                "org.graphstream.graph.implementations",
                "AdjacencyListNode",
                "protected static final char O_EDGE = 2;"
            ],
            [
                "GROW_FACTOR",
                "org.graphstream.graph.implementations",
                "AdjacencyListGraph",
                "public static final double GROW_FACTOR = 1.1;"
            ],
            [
                "DEFAULT_NODE_CAPACITY",
                "org.graphstream.graph.implementations",
                "AdjacencyListGraph",
                "public static final int DEFAULT_NODE_CAPACITY = 128;"
            ],
            [
                "DEFAULT_EDGE_CAPACITY",
                "org.graphstream.graph.implementations",
                "AdjacencyListGraph",
                "public static final int DEFAULT_EDGE_CAPACITY = 1024;"
            ]
        ],
        "tokensMethodJavadocValues": [],
        "tokensMethodArguments": [
            [
                "fileName",
                "java.lang",
                "String"
            ]
        ],
        "tokensMethodVariablesNonPrivateNonStaticNonVoidMethods": [
            [
                "equals",
                "java.lang",
                "Object",
                "public boolean equals(Object arg0)"
            ],
            [
                "getSpriteStyleNameSpace",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleSheet",
                "public NameSpace getSpriteStyleNameSpace()"
            ],
            [
                "getDefaultSpriteStyle",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleSheet",
                "public Style getDefaultSpriteStyle()"
            ],
            [
                "hashCode",
                "java.lang",
                "Object",
                "public native int hashCode()"
            ],
            [
                "getDefaultGraphStyle",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleSheet",
                "public Style getDefaultGraphStyle()"
            ],
            [
                "getStyleGroupIdFor",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleSheet",
                "public String getStyleGroupIdFor(Element element, ArrayList<Rule> rules)"
            ],
            [
                "getDefaultEdgeStyle",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleSheet",
                "public Style getDefaultEdgeStyle()"
            ],
            [
                "toString",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleSheet",
                "public String toString()"
            ],
            [
                "getRulesFor",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleSheet",
                "public ArrayList<Rule> getRulesFor(Element element)"
            ],
            [
                "getDefaultEdgeRule",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleSheet",
                "public Rule getDefaultEdgeRule()"
            ],
            [
                "getDefaultNodeRule",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleSheet",
                "public Rule getDefaultNodeRule()"
            ],
            [
                "getDefaultGraphRule",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleSheet",
                "public Rule getDefaultGraphRule()"
            ],
            [
                "getGraphStyleNameSpace",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleSheet",
                "public NameSpace getGraphStyleNameSpace()"
            ],
            [
                "getNodeStyleNameSpace",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleSheet",
                "public NameSpace getNodeStyleNameSpace()"
            ],
            [
                "getClass",
                "java.lang",
                "Object",
                "public final native Class<? extends Object> getClass()"
            ],
            [
                "getDefaultNodeStyle",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleSheet",
                "public Style getDefaultNodeStyle()"
            ],
            [
                "getDefaultSpriteRule",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleSheet",
                "public Rule getDefaultSpriteRule()"
            ],
            [
                "getEdgeStyleNameSpace",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleSheet",
                "public NameSpace getEdgeStyleNameSpace()"
            ],
            [
                "clone",
                "java.lang",
                "Object",
                "protected native Object clone() throws CloneNotSupportedException"
            ],
            [
                "equals",
                "java.lang",
                "String",
                "public boolean equals(Object arg0)"
            ],
            [
                "contentEquals",
                "java.lang",
                "String",
                "public boolean contentEquals(StringBuffer arg0)"
            ],
            [
                "value",
                "java.lang",
                "String",
                "byte[] value()"
            ],
            [
                "matches",
                "java.lang",
                "String",
                "public boolean matches(String arg0)"
            ],
            [
                "indexOf",
                "java.lang",
                "String",
                "public int indexOf(int arg0, int arg1)"
            ],
            [
                "transform",
                "java.lang",
                "String",
                "public <R> R transform(Function<? super String, ? extends R> arg0)"
            ],
            [
                "toString",
                "java.lang",
                "String",
                "public String toString()"
            ],
            [
                "contains",
                "java.lang",
                "String",
                "public boolean contains(CharSequence arg0)"
            ],
            [
                "formatted",
                "java.lang",
                "String",
                "public String formatted(Object[] arg0)"
            ],
            [
                "getBytes",
                "java.lang",
                "String",
                "public byte[] getBytes(Charset arg0)"
            ],
            [
                "codePointBefore",
                "java.lang",
                "String",
                "public int codePointBefore(int arg0)"
            ],
            [
                "getBytes",
                "java.lang",
                "String",
                "public byte[] getBytes(String arg0) throws UnsupportedEncodingException"
            ],
            [
                "endsWith",
                "java.lang",
                "String",
                "public boolean endsWith(String arg0)"
            ],
            [
                "indexOf",
                "java.lang",
                "String",
                "public int indexOf(String arg0, int arg1)"
            ],
            [
                "compareTo",
                "java.lang",
                "String",
                "public int compareTo(String arg0)"
            ],
            [
                "replace",
                "java.lang",
                "String",
                "public String replace(char arg0, char arg1)"
            ],
            [
                "resolveConstantDesc",
                "java.lang",
                "String",
                "public String resolveConstantDesc(MethodHandles.Lookup arg0)"
            ],
            [
                "regionMatches",
                "java.lang",
                "String",
                "public boolean regionMatches(boolean arg0, int arg1, String arg2, int arg3, int arg4)"
            ],
            [
                "lastIndexOf",
                "java.lang",
                "String",
                "public int lastIndexOf(String arg0, int arg1)"
            ],
            [
                "coder",
                "java.lang",
                "String",
                "byte coder()"
            ],
            [
                "describeConstable",
                "java.lang",
                "String",
                "public Optional<String> describeConstable()"
            ],
            [
                "isEmpty",
                "java.lang",
                "String",
                "public boolean isEmpty()"
            ],
            [
                "subSequence",
                "java.lang",
                "String",
                "public CharSequence subSequence(int arg0, int arg1)"
            ],
            [
                "toLowerCase",
                "java.lang",
                "String",
                "public String toLowerCase()"
            ],
            [
                "lastIndexOf",
                "java.lang",
                "String",
                "public int lastIndexOf(String arg0)"
            ],
            [
                "indexOf",
                "java.lang",
                "String",
                "public int indexOf(int arg0)"
            ],
            [
                "indexOf",
                "java.lang",
                "String",
                "public int indexOf(String arg0)"
            ],
            [
                "stripLeading",
                "java.lang",
                "String",
                "public String stripLeading()"
            ],
            [
                "hashCode",
                "java.lang",
                "String",
                "public int hashCode()"
            ],
            [
                "length",
                "java.lang",
                "String",
                "public int length()"
            ],
            [
                "getBytes",
                "java.lang",
                "String",
                "public byte[] getBytes()"
            ],
            [
                "replaceAll",
                "java.lang",
                "String",
                "public String replaceAll(String arg0, String arg1)"
            ],
            [
                "toUpperCase",
                "java.lang",
                "String",
                "public String toUpperCase()"
            ],
            [
                "repeat",
                "java.lang",
                "String",
                "public String repeat(int arg0)"
            ],
            [
                "stripTrailing",
                "java.lang",
                "String",
                "public String stripTrailing()"
            ],
            [
                "toLowerCase",
                "java.lang",
                "String",
                "public String toLowerCase(Locale arg0)"
            ],
            [
                "charAt",
                "java.lang",
                "String",
                "public char charAt(int arg0)"
            ],
            [
                "isBlank",
                "java.lang",
                "String",
                "public boolean isBlank()"
            ],
            [
                "indent",
                "java.lang",
                "String",
                "public String indent(int arg0)"
            ],
            [
                "codePointAt",
                "java.lang",
                "String",
                "public int codePointAt(int arg0)"
            ],
            [
                "startsWith",
                "java.lang",
                "String",
                "public boolean startsWith(String arg0, int arg1)"
            ],
            [
                "lines",
                "java.lang",
                "String",
                "public Stream<String> lines()"
            ],
            [
                "startsWith",
                "java.lang",
                "String",
                "public boolean startsWith(String arg0)"
            ],
            [
                "equalsIgnoreCase",
                "java.lang",
                "String",
                "public boolean equalsIgnoreCase(String arg0)"
            ],
            [
                "lastIndexOf",
                "java.lang",
                "String",
                "public int lastIndexOf(int arg0, int arg1)"
            ],
            [
                "stripIndent",
                "java.lang",
                "String",
                "public String stripIndent()"
            ],
            [
                "toUpperCase",
                "java.lang",
                "String",
                "public String toUpperCase(Locale arg0)"
            ],
            [
                "lastIndexOf",
                "java.lang",
                "String",
                "public int lastIndexOf(int arg0)"
            ],
            [
                "codePointCount",
                "java.lang",
                "String",
                "public int codePointCount(int arg0, int arg1)"
            ],
            [
                "trim",
                "java.lang",
                "String",
                "public String trim()"
            ],
            [
                "compareToIgnoreCase",
                "java.lang",
                "String",
                "public int compareToIgnoreCase(String arg0)"
            ],
            [
                "substring",
                "java.lang",
                "String",
                "public String substring(int arg0)"
            ],
            [
                "split",
                "java.lang",
                "String",
                "public String[] split(String arg0)"
            ],
            [
                "chars",
                "java.lang",
                "String",
                "public IntStream chars()"
            ],
            [
                "contentEquals",
                "java.lang",
                "String",
                "public boolean contentEquals(CharSequence arg0)"
            ],
            [
                "regionMatches",
                "java.lang",
                "String",
                "public boolean regionMatches(int arg0, String arg1, int arg2, int arg3)"
            ],
            [
                "translateEscapes",
                "java.lang",
                "String",
                "public String translateEscapes()"
            ],
            [
                "offsetByCodePoints",
                "java.lang",
                "String",
                "public int offsetByCodePoints(int arg0, int arg1)"
            ],
            [
                "intern",
                "java.lang",
                "String",
                "public native String intern()"
            ],
            [
                "isLatin1",
                "java.lang",
                "String",
                "boolean isLatin1()"
            ],
            [
                "codePoints",
                "java.lang",
                "String",
                "public IntStream codePoints()"
            ],
            [
                "split",
                "java.lang",
                "String",
                "public String[] split(String arg0, int arg1)"
            ],
            [
                "concat",
                "java.lang",
                "String",
                "public String concat(String arg0)"
            ],
            [
                "substring",
                "java.lang",
                "String",
                "public String substring(int arg0, int arg1)"
            ],
            [
                "replaceFirst",
                "java.lang",
                "String",
                "public String replaceFirst(String arg0, String arg1)"
            ],
            [
                "strip",
                "java.lang",
                "String",
                "public String strip()"
            ],
            [
                "replace",
                "java.lang",
                "String",
                "public String replace(CharSequence arg0, CharSequence arg1)"
            ],
            [
                "toCharArray",
                "java.lang",
                "String",
                "public char[] toCharArray()"
            ],
            [
                "toString",
                "java.lang",
                "Object",
                "public String toString()"
            ],
            [
                "compareTo",
                "java.lang",
                "Comparable",
                "public abstract int compareTo(T arg0)"
            ],
            [
                "chars",
                "java.lang",
                "CharSequence",
                "public default IntStream chars()"
            ],
            [
                "isEmpty",
                "java.lang",
                "CharSequence",
                "public default boolean isEmpty()"
            ],
            [
                "length",
                "java.lang",
                "CharSequence",
                "public abstract int length()"
            ],
            [
                "charAt",
                "java.lang",
                "CharSequence",
                "public abstract char charAt(int arg0)"
            ],
            [
                "codePoints",
                "java.lang",
                "CharSequence",
                "public default IntStream codePoints()"
            ],
            [
                "subSequence",
                "java.lang",
                "CharSequence",
                "public abstract CharSequence subSequence(int arg0, int arg1)"
            ],
            [
                "toString",
                "java.lang",
                "CharSequence",
                "public abstract String toString()"
            ],
            [
                "describeConstable",
                "java.lang.constant",
                "Constable",
                "public abstract Optional<? extends ConstantDesc> describeConstable()"
            ],
            [
                "resolveConstantDesc",
                "java.lang.constant",
                "ConstantDesc",
                "public abstract Object resolveConstantDesc(MethodHandles.Lookup arg0) throws ReflectiveOperationException"
            ]
        ],
        "tokensMethodVariablesNonPrivateNonStaticAttributes": [
            [
                "defaultRule",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleSheet",
                "public Rule defaultRule;"
            ],
            [
                "graphRules",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleSheet",
                "public NameSpace graphRules = new NameSpace(Selector.Type.GRAPH);"
            ],
            [
                "nodeRules",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleSheet",
                "public NameSpace nodeRules = new NameSpace(Selector.Type.NODE);"
            ],
            [
                "edgeRules",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleSheet",
                "public NameSpace edgeRules = new NameSpace(Selector.Type.EDGE);"
            ],
            [
                "spriteRules",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleSheet",
                "public NameSpace spriteRules = new NameSpace(Selector.Type.SPRITE);"
            ],
            [
                "listeners",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleSheet",
                "public ArrayList<StyleSheetListener> listeners = new ArrayList<StyleSheetListener>();"
            ]
        ],
        "tokensOracleVariablesNonPrivateNonStaticNonVoidMethods": [],
        "tokensOracleVariablesNonPrivateNonStaticAttributes": []
    },
    {
        "id": 3072,
        "oracle": ";",
        "oracleType": "EXCEPT_POST",
        "projectName": "gs-core-1.3",
        "packageName": "org.graphstream.ui.graphicGraph.stylesheet",
        "className": "StyleSheet",
        "javadocTag": "@throws IOException For any kind of I/O error or parse error.",
        "methodJavadoc": "    /**\n\t * Parse a style sheet from an URL. The style sheet will complete the\n\t * previously parsed style sheets. First, this method will search the URL as\n\t * SystemRessource, then as a file and if there is no match, just try to\n\t * create an URL object giving the URL as constructor's parameter.\n\t * \n\t * @param url\n\t *            Name of the file containing the style sheet.\n\t * @throws IOException\n\t *             For any kind of I/O error or parse error.\n\t */",
        "methodSourceCode": "public void parseFromURL(String url) throws IOException{\n    URL u = StyleSheet.class.getClassLoader().getResource(url);\n    if (u == null) {\n        File f = new File(url);\n        if (f.exists())\n            u = f.toURI().toURL();\n        else\n            u = new URL(url);\n    }\n    parse(new InputStreamReader(u.openStream()));\n}",
        "classJavadoc": "/**\n * Implementation of the style sheets that can be stored in the graphic graph.\n * \n * @author Antoine Dutot\n */",
        "classSourceCode": "/*\n * Copyright 2006 - 2015\n *     Stefan Balev     <stefan.balev@graphstream-project.org>\n *     Julien Baudry    <julien.baudry@graphstream-project.org>\n *     Antoine Dutot    <antoine.dutot@graphstream-project.org>\n *     Yoann Pign\u00e9      <yoann.pigne@graphstream-project.org>\n *     Guilhelm Savin   <guilhelm.savin@graphstream-project.org>\n * \n * This file is part of GraphStream <http://graphstream-project.org>.\n * \n * GraphStream is a library whose purpose is to handle static or dynamic\n * graph, create them from scratch, file or any source and display them.\n * \n * This program is free software distributed under the terms of two licenses, the\n * CeCILL-C license that fits European law, and the GNU Lesser General Public\n * License. You can  use, modify and/ or redistribute the software under the terms\n * of the CeCILL-C license as circulated by CEA, CNRS and INRIA at the following\n * URL <http://www.cecill.info> or under the terms of the GNU LGPL as published by\n * the Free Software Foundation, either version 3 of the License, or (at your\n * option) any later version.\n * \n * This program is distributed in the hope that it will be useful, but WITHOUT ANY\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A\n * PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more details.\n * \n * You should have received a copy of the GNU Lesser General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n * \n * The fact that you are presently reading this means that you have had\n * knowledge of the CeCILL-C and LGPL licenses and that you accept their terms.\n */\npackage org.graphstream.ui.graphicGraph.stylesheet;\n\nimport java.awt.Color;\nimport java.io.BufferedInputStream;\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.io.Reader;\nimport java.io.StringReader;\nimport java.net.URL;\nimport java.util.ArrayList;\nimport java.util.HashMap;\n\nimport org.graphstream.graph.Edge;\nimport org.graphstream.graph.Element;\nimport org.graphstream.graph.Graph;\nimport org.graphstream.graph.Node;\nimport org.graphstream.ui.graphicGraph.GraphicSprite;\nimport org.graphstream.ui.graphicGraph.stylesheet.StyleConstants.StrokeMode;\nimport org.graphstream.ui.graphicGraph.stylesheet.parser.StyleSheetParser;\nimport org.graphstream.util.parser.ParseException;\n\n/**\n * Implementation of the style sheets that can be stored in the graphic graph.\n * \n * @author Antoine Dutot\n */\npublic class StyleSheet {\n\t// Attributes\n\n\t/**\n\t * The top-level default rule.\n\t */\n\tpublic Rule defaultRule;\n\n\t/**\n\t * The default, id and class rules for graphs.\n\t */\n\tpublic NameSpace graphRules = new NameSpace(Selector.Type.GRAPH);\n\n\t/**\n\t * The default, id and class rules for nodes.\n\t */\n\tpublic NameSpace nodeRules = new NameSpace(Selector.Type.NODE);\n\n\t/**\n\t * The default, id and class rules for edges.\n\t */\n\tpublic NameSpace edgeRules = new NameSpace(Selector.Type.EDGE);\n\n\t/**\n\t * The default, id and class rules for sprites.\n\t */\n\tpublic NameSpace spriteRules = new NameSpace(Selector.Type.SPRITE);\n\n\t/**\n\t * Set of listeners.\n\t */\n\tpublic ArrayList<StyleSheetListener> listeners = new ArrayList<StyleSheetListener>();\n\n\t// Constructors\n\n\t/**\n\t * New style sheet initialised to defaults.\n\t */\n\tpublic StyleSheet() {\n\t\tinitRules();\n\t}\n\n\t// Access\n\n\t/**\n\t * The default rule for graphs.\n\t * \n\t * @return A rule.\n\t */\n\tpublic Rule getDefaultGraphRule() {\n\t\treturn graphRules.defaultRule;\n\t}\n\n\t/**\n\t * The default rule for nodes.\n\t * \n\t * @return A rule.\n\t */\n\tpublic Rule getDefaultNodeRule() {\n\t\treturn nodeRules.defaultRule;\n\t}\n\n\t/**\n\t * The default rule for edges.\n\t * \n\t * @return A rule.\n\t */\n\tpublic Rule getDefaultEdgeRule() {\n\t\treturn edgeRules.defaultRule;\n\t}\n\n\t/**\n\t * The default rule for sprites.\n\t * \n\t * @return A rule.\n\t */\n\tpublic Rule getDefaultSpriteRule() {\n\t\treturn spriteRules.defaultRule;\n\t}\n\n\t/**\n\t * The default style for graphs.\n\t * \n\t * @return A style.\n\t */\n\tpublic Style getDefaultGraphStyle() {\n\t\treturn getDefaultGraphRule().getStyle();\n\t}\n\n\t/**\n\t * The default style for nodes.\n\t * \n\t * @return A style.\n\t */\n\tpublic Style getDefaultNodeStyle() {\n\t\treturn getDefaultNodeRule().getStyle();\n\t}\n\n\t/**\n\t * The default style for edges.\n\t * \n\t * @return A style.\n\t */\n\tpublic Style getDefaultEdgeStyle() {\n\t\treturn getDefaultEdgeRule().getStyle();\n\t}\n\n\t/**\n\t * The default style for sprites.\n\t * \n\t * @return A style.\n\t */\n\tpublic Style getDefaultSpriteStyle() {\n\t\treturn getDefaultSpriteRule().getStyle();\n\t}\n\n\t/**\n\t * All the rules (default, specific and class) that apply to graphs.\n\t * \n\t * @return The set of rules for graphs.\n\t */\n\tpublic NameSpace getGraphStyleNameSpace() {\n\t\treturn graphRules;\n\t}\n\n\t/**\n\t * All the rules (default, specific and class) that apply to nodes.\n\t * \n\t * @return The set of rules for nodes.\n\t */\n\tpublic NameSpace getNodeStyleNameSpace() {\n\t\treturn nodeRules;\n\t}\n\n\t/**\n\t * All the rules (default, specific and class) that apply to edges.\n\t * \n\t * @return The set of rules for edges.\n\t */\n\tpublic NameSpace getEdgeStyleNameSpace() {\n\t\treturn edgeRules;\n\t}\n\n\t/**\n\t * All the rules (default, specific and class) that apply to sprites.\n\t * \n\t * @return The set of rules for sprites.\n\t */\n\tpublic NameSpace getSpriteStyleNameSpace() {\n\t\treturn spriteRules;\n\t}\n\n\t/**\n\t * Get the rules that match a given element.\n\t * \n\t * First a rule for the identifier of the element is looked for. It is\n\t * looked for in its name space (nodes for Node element, etc.) If it is not\n\t * found, the default rule for this kind of element is used. This rule is\n\t * pushed at start of the returned array of rules.\n\t * \n\t * After a rule for the element is found, then the various classes the\n\t * element pertains to are looked at and each class rule found is added in\n\t * order in the returned array.\n\t * \n\t * @param element\n\t *            The element a rules are searched for.\n\t * @return A set of rules matching the element, with the main rule at index\n\t *         0.\n\t */\n\tpublic ArrayList<Rule> getRulesFor(Element element) {\n\t\tArrayList<Rule> rules = null;\n\n\t\tif (element instanceof Graph) {\n\t\t\trules = graphRules.getRulesFor(element);\n\t\t} else if (element instanceof Node) {\n\t\t\trules = nodeRules.getRulesFor(element);\n\t\t} else if (element instanceof Edge) {\n\t\t\trules = edgeRules.getRulesFor(element);\n\t\t} else if (element instanceof GraphicSprite) {\n\t\t\trules = spriteRules.getRulesFor(element);\n\t\t} else {\n\t\t\trules = new ArrayList<Rule>();\n\t\t\trules.add(defaultRule);\n\t\t}\n\n\t\treturn rules;\n\t}\n\n\t/**\n\t * Compute the name of the style group and element will pertain to knowing\n\t * its styling rules.\n\t * \n\t * @param element\n\t *            The element.\n\t * @param rules\n\t *            The styling rules.\n\t * @return The unique identifier of the style group for the element.\n\t * @see #getRulesFor(Element)\n\t */\n\tpublic String getStyleGroupIdFor(Element element, ArrayList<Rule> rules) {\n\t\tStringBuilder builder = new StringBuilder();\n\n\t\tif (element instanceof Graph) {\n\t\t\tbuilder.append(\"g\");\n\t\t} else if (element instanceof Node) {\n\t\t\tbuilder.append(\"n\");\n\t\t} else if (element instanceof Edge) {\n\t\t\tbuilder.append(\"e\");\n\t\t} else if (element instanceof GraphicSprite) {\n\t\t\tbuilder.append(\"s\");\n\t\t} else {\n\t\t\tthrow new RuntimeException(\"What ?\");\n\t\t}\n\n\t\tif (rules.get(0).selector.getId() != null) {\n\t\t\tbuilder.append('_');\n\t\t\tbuilder.append(rules.get(0).selector.getId());\n\t\t}\n\n\t\tint n = rules.size();\n\n\t\tif (n > 1) {\n\t\t\tbuilder.append('(');\n\t\t\tbuilder.append(rules.get(1).selector.getClazz());\n\t\t\tfor (int i = 2; i < n; i++) {\n\t\t\t\tbuilder.append(',');\n\t\t\t\tbuilder.append(rules.get(i).selector.getClazz());\n\t\t\t}\n\t\t\tbuilder.append(')');\n\t\t}\n\n\t\treturn builder.toString();\n\t}\n\n\t// Commands\n\n\t/**\n\t * Create the default rules. This method is the place to set defaults for\n\t * specific element types. This is here that the edge width is reset to one,\n\t * since the default width is larger. The default z index that is different\n\t * for every class of element is also set here.\n\t */\n\tprotected void initRules() {\n\t\tdefaultRule = new Rule(new Selector(Selector.Type.ANY), null);\n\n\t\tdefaultRule.getStyle().setDefaults();\n\n\t\tgraphRules.defaultRule = new Rule(new Selector(Selector.Type.GRAPH),\n\t\t\t\tdefaultRule);\n\t\tnodeRules.defaultRule = new Rule(new Selector(Selector.Type.NODE),\n\t\t\t\tdefaultRule);\n\t\tedgeRules.defaultRule = new Rule(new Selector(Selector.Type.EDGE),\n\t\t\t\tdefaultRule);\n\t\tspriteRules.defaultRule = new Rule(new Selector(Selector.Type.SPRITE),\n\t\t\t\tdefaultRule);\n\n\t\tgraphRules.defaultRule.getStyle().setValue(\"padding\",\n\t\t\t\tnew Values(Style.Units.PX, 30));\n\t\tedgeRules.defaultRule.getStyle().setValue(\"shape\",\n\t\t\t\tStyleConstants.Shape.LINE);\n\t\tedgeRules.defaultRule.getStyle().setValue(\"size\",\n\t\t\t\tnew Values(Style.Units.PX, 1));\n\t\tedgeRules.defaultRule.getStyle().setValue(\"z-index\", new Integer(1));\n\t\tnodeRules.defaultRule.getStyle().setValue(\"z-index\", new Integer(2));\n\t\tspriteRules.defaultRule.getStyle().setValue(\"z-index\", new Integer(3));\n\n\t\tColors colors = new Colors();\n\t\tcolors.add(Color.WHITE);\n\n\t\tgraphRules.defaultRule.getStyle().setValue(\"fill-color\", colors);\n\t\tgraphRules.defaultRule.getStyle().setValue(\"stroke-mode\",\n\t\t\t\tStrokeMode.NONE);\n\n\t\tfor (StyleSheetListener listener : listeners) {\n\t\t\tlistener.styleAdded(defaultRule, defaultRule);\n\t\t\tlistener.styleAdded(graphRules.defaultRule, graphRules.defaultRule);\n\t\t\tlistener.styleAdded(nodeRules.defaultRule, nodeRules.defaultRule);\n\t\t\tlistener.styleAdded(edgeRules.defaultRule, edgeRules.defaultRule);\n\t\t\tlistener.styleAdded(spriteRules.defaultRule,\n\t\t\t\t\tspriteRules.defaultRule);\n\t\t}\n\n\t\t// for( StyleSheetListener listener: listeners )\n\t\t// listener.styleAdded( defaultRule, defaultRule );\n\t\t// for( StyleSheetListener listener: listeners )\n\t\t// listener.styleAdded( graphRules.defaultRule, graphRules.defaultRule\n\t\t// );\n\t\t// for( StyleSheetListener listener: listeners )\n\t\t// listener.styleAdded( nodeRules.defaultRule, nodeRules.defaultRule );\n\t\t// for( StyleSheetListener listener: listeners )\n\t\t// listener.styleAdded( edgeRules.defaultRule, edgeRules.defaultRule );\n\t\t// for( StyleSheetListener listener: listeners )\n\t\t// listener.styleAdded( spriteRules.defaultRule, spriteRules.defaultRule\n\t\t// );\n\t}\n\n\t/**\n\t * Add a listener for style events. You never receive events for default\n\t * rules and styles. You receive events only for the rules and styles that\n\t * are added after this listener is registered.\n\t * \n\t * @param listener\n\t *            The new listener.\n\t */\n\tpublic void addListener(StyleSheetListener listener) {\n\t\tlisteners.add(listener);\n\t}\n\n\t/**\n\t * Remove a previously registered listener.\n\t * \n\t * @param listener\n\t *            The listener to remove.\n\t */\n\tpublic void removeListener(StyleSheetListener listener) {\n\t\tint index = listeners.indexOf(listener);\n\n\t\tif (index >= 0)\n\t\t\tlisteners.remove(index);\n\t}\n\n\t/**\n\t * Clear all specific rules and initialise the default rules. The listeners\n\t * are not changed.\n\t */\n\tpublic void clear() {\n\t\tgraphRules.clear();\n\t\tnodeRules.clear();\n\t\tedgeRules.clear();\n\t\tspriteRules.clear();\n\t\tinitRules();\n\n\t\tfor (StyleSheetListener listener : listeners)\n\t\t\tlistener.styleSheetCleared();\n\t}\n\n\t/**\n\t * Parse a style sheet from a file. The style sheet will complete the\n\t * previously parsed style sheets.\n\t * \n\t * @param fileName\n\t *            Name of the file containing the style sheet.\n\t * @throws IOException\n\t *             For any kind of I/O error or parse error.\n\t */\n\tpublic void parseFromFile(String fileName) throws IOException {\n\t\tparse(new InputStreamReader(new BufferedInputStream(\n\t\t\t\tnew FileInputStream(fileName))));\n\t}\n\n\t/**\n\t * Parse a style sheet from an URL. The style sheet will complete the\n\t * previously parsed style sheets. First, this method will search the URL as\n\t * SystemRessource, then as a file and if there is no match, just try to\n\t * create an URL object giving the URL as constructor's parameter.\n\t * \n\t * @param url\n\t *            Name of the file containing the style sheet.\n\t * @throws IOException\n\t *             For any kind of I/O error or parse error.\n\t */\n\tpublic void parseFromURL(String url) throws IOException {\n\t\tURL u = StyleSheet.class.getClassLoader().getResource(url);\n\t\tif (u == null) {\n\t\t\tFile f = new File(url);\n\n\t\t\tif (f.exists())\n\t\t\t\tu = f.toURI().toURL();\n\t\t\telse\n\t\t\t\tu = new URL(url);\n\t\t}\n\n\t\tparse(new InputStreamReader(u.openStream()));\n\t}\n\n\t/**\n\t * Parse a style sheet from a string. The style sheet will complete the\n\t * previously parsed style sheets.\n\t * \n\t * @param styleSheet\n\t *            The string containing the whole style sheet.\n\t * @throws IOException\n\t *             For any kind of I/O error or parse error.\n\t */\n\tpublic void parseFromString(String styleSheet) throws IOException {\n\t\tparse(new StringReader(styleSheet));\n\t}\n\n\t/**\n\t * Parse only one style, create a rule with the given selector, and add this\n\t * rule.\n\t * \n\t * @param select\n\t *            The elements for which this style must apply.\n\t * @param styleString\n\t *            The style string to parse.\n\t */\n\tpublic void parseStyleFromString(Selector select, String styleString)\n\t\t\tthrows IOException {\n\t\tStyleSheetParser parser = new StyleSheetParser(this, new StringReader(\n\t\t\t\tstyleString));\n\n\t\tStyle style = new Style();\n\n\t\ttry {\n\t\t\tparser.stylesStart(style);\n\t\t} catch (ParseException e) {\n\t\t\tthrow new IOException(e.getMessage());\n\t\t}\n\n\t\tRule rule = new Rule(select);\n\n\t\trule.setStyle(style);\n\t\taddRule(rule);\n\t}\n\n\t/**\n\t * Load a style sheet from an attribute value, the value can either be the\n\t * contents of the whole style sheet, or begin by \"url\". If it starts with\n\t * \"url\", it must then contain between parenthesis the string of the URL to\n\t * load. For example:\n\t * \n\t * <pre>\n\t * \t\turl('file:///some/path/on/the/file/system')\n\t * </pre>\n\t * \n\t * Or\n\t * \n\t * <pre>\n\t * \t\turl('http://some/web/url')\n\t * </pre>\n\t * \n\t * The loaded style sheet will be merged with the styles already present in\n\t * the style sheet.\n\t * \n\t * @param styleSheetValue\n\t *            The style sheet name of content.\n\t * @throws IOException\n\t *             If the loading or parsing of the style sheet failed.\n\t */\n\tpublic void load(String styleSheetValue) throws IOException {\n\t\tif (styleSheetValue.startsWith(\"url\")) {\n\t\t\t// Extract the part between '(' and ')'.\n\n\t\t\tint beg = styleSheetValue.indexOf('(');\n\t\t\tint end = styleSheetValue.lastIndexOf(')');\n\n\t\t\tif (beg >= 0 && end > beg)\n\t\t\t\tstyleSheetValue = styleSheetValue.substring(beg + 1, end);\n\n\t\t\tstyleSheetValue = styleSheetValue.trim();\n\n\t\t\t// Remove the quotes (') or (\").\n\n\t\t\tif (styleSheetValue.startsWith(\"'\")) {\n\t\t\t\tbeg = 0;\n\t\t\t\tend = styleSheetValue.lastIndexOf('\\'');\n\n\t\t\t\tif (beg >= 0 && end > beg)\n\t\t\t\t\tstyleSheetValue = styleSheetValue.substring(beg + 1, end);\n\t\t\t}\n\n\t\t\tstyleSheetValue = styleSheetValue.trim();\n\n\t\t\tif (styleSheetValue.startsWith(\"\\\"\")) {\n\t\t\t\tbeg = 0;\n\t\t\t\tend = styleSheetValue.lastIndexOf('\"');\n\n\t\t\t\tif (beg >= 0 && end > beg)\n\t\t\t\t\tstyleSheetValue = styleSheetValue.substring(beg + 1, end);\n\t\t\t}\n\n\t\t\t// That's it.\n\n\t\t\tparseFromURL(styleSheetValue);\n\t\t} else // Parse from string, the value is considered to be the style\n\t\t\t\t// sheet contents.\n\t\t{\n\t\t\tparseFromString(styleSheetValue);\n\t\t}\n\t}\n\n\t/**\n\t * Parse the style sheet from the given reader.\n\t * \n\t * @param reader\n\t *            The reader pointing at the style sheet.\n\t * @throws IOException\n\t *             For any kind of I/O error or parse error.\n\t */\n\tprotected void parse(Reader reader) throws IOException {\n\t\tStyleSheetParser parser = new StyleSheetParser(this, reader);\n\n\t\ttry {\n\t\t\tparser.start();\n\t\t} catch (ParseException e) {\n\t\t\tthrow new IOException(e.getMessage());\n\t\t}\n\t}\n\n\t/**\n\t * Add a new rule with its style. If the rule selector is just GRAPH, NODE,\n\t * EDGE or SPRITE, the default corresponding rules make a copy (or\n\t * augmentation) of its style. Else if an id or class is specified the rules\n\t * are added (or changed/augmented if the id or class was already set) and\n\t * their parent is set to the default graph, node, edge or sprite rules. If\n\t * this is an event rule (or meta-class rule), its sibling rule (the same\n\t * rule without the meta-class) is searched and created if not found and the\n\t * event rule is added as an alternative to it.\n\t * \n\t * @param newRule\n\t *            The new rule.\n\t */\n\tpublic void addRule(Rule newRule) {\n\t\tRule oldRule = null;\n\n\t\tswitch (newRule.selector.getType()) {\n\t\tcase ANY:\n\t\t\tthrow new RuntimeException(\n\t\t\t\t\t\"The ANY selector should never be used, it is created automatically.\");\n\t\tcase GRAPH:\n\t\t\toldRule = graphRules.addRule(newRule);\n\t\t\tbreak;\n\t\tcase NODE:\n\t\t\toldRule = nodeRules.addRule(newRule);\n\t\t\tbreak;\n\t\tcase EDGE:\n\t\t\toldRule = edgeRules.addRule(newRule);\n\t\t\tbreak;\n\t\tcase SPRITE:\n\t\t\toldRule = spriteRules.addRule(newRule);\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tthrow new RuntimeException(\"Ho ho ho ?\");\n\t\t}\n\n\t\tfor (StyleSheetListener listener : listeners)\n\t\t\tlistener.styleAdded(oldRule, newRule);\n\t}\n\n\t@Override\n\tpublic String toString() {\n\t\tStringBuilder builder = new StringBuilder();\n\n\t\tbuilder.append(\"StyleSheet : {\\n\");\n\t\tbuilder.append(\"  default styles:\\n\");\n\t\tbuilder.append(defaultRule.toString(1));\n\t\tbuilder.append(graphRules.toString(1));\n\t\tbuilder.append(nodeRules.toString(1));\n\t\tbuilder.append(edgeRules.toString(1));\n\t\tbuilder.append(spriteRules.toString(1));\n\n\t\treturn builder.toString();\n\t}\n\n\t// Nested classes\n\n\t/**\n\t * A name space is a tuple (default rule, id rule set, class rule set).\n\t * \n\t * <p>\n\t * The name space defines a default rule for a kind of elements, a set of\n\t * rules for this kind of elements with a given identifier, and a set or\n\t * rules for this kind of elements with a given class.\n\t * </p>\n\t */\n\tpublic class NameSpace {\n\t\t// Attribute\n\n\t\t/**\n\t\t * The kind of elements in this name space.\n\t\t */\n\t\tpublic Selector.Type type;\n\n\t\t/**\n\t\t * The default rule for this kind of elements.\n\t\t */\n\t\tpublic Rule defaultRule;\n\n\t\t/**\n\t\t * The set of rules for this kind of elements with a given identifier.\n\t\t */\n\t\tpublic HashMap<String, Rule> byId = new HashMap<String, Rule>();\n\n\t\t/**\n\t\t * The set of rules for this kind of elements with a given class.\n\t\t */\n\t\tpublic HashMap<String, Rule> byClass = new HashMap<String, Rule>();\n\n\t\t// Constructor\n\n\t\tpublic NameSpace(Selector.Type type) {\n\t\t\tthis.type = type;\n\t\t}\n\n\t\t// Access\n\n\t\t/**\n\t\t * The kind of elements this name space applies rules to.\n\t\t * \n\t\t * @return A type of element (node, edge, sprite, graph).\n\t\t */\n\t\tpublic Selector.Type getGraphElementType() {\n\t\t\treturn type;\n\t\t}\n\n\t\t/**\n\t\t * Number of specific (id) rules.\n\t\t * \n\t\t * @return The number of rules that apply to elements by their\n\t\t *         identifiers.\n\t\t */\n\t\tpublic int getIdRulesCount() {\n\t\t\treturn byId.size();\n\t\t}\n\n\t\t/**\n\t\t * Number of specific (class) rules.\n\t\t * \n\t\t * @return The number of rules that apply to elements by their classes.\n\t\t */\n\t\tpublic int getClassRulesCount() {\n\t\t\treturn byClass.size();\n\t\t}\n\n\t\t/**\n\t\t * Get the rules that match a given element. The rules are returned in a\n\t\t * given order. The array always contain the \"main\" rule that matches\n\t\t * the element. This rule is either a default rule for the kind of\n\t\t * element given or the rule that matches its identifier if there is\n\t\t * one. Then class rules the element has can be appended to this array\n\t\t * in order.\n\t\t * \n\t\t * @return an array of rules that match the element, with the main rule\n\t\t *         at index 0.\n\t\t */\n\t\tprotected ArrayList<Rule> getRulesFor(Element element) {\n\t\t\tRule rule = byId.get(element.getId());\n\t\t\tArrayList<Rule> rules = new ArrayList<Rule>();\n\n\t\t\tif (rule != null)\n\t\t\t\trules.add(rule);\n\t\t\telse\n\t\t\t\trules.add(defaultRule);\n\n\t\t\tgetClassRules(element, rules);\n\n\t\t\tif (rules.isEmpty())\n\t\t\t\trules.add(defaultRule);\n\n\t\t\treturn rules;\n\t\t}\n\n\t\t/**\n\t\t * Search if the given element has classes attributes and fill the given\n\t\t * array with the set of rules that match these classes.\n\t\t * \n\t\t * @param element\n\t\t *            The element for which classes must be found.\n\t\t * @param rules\n\t\t *            The rule array to fill.\n\t\t */\n\t\tprotected void getClassRules(Element element, ArrayList<Rule> rules) {\n\t\t\tObject o = element.getAttribute(\"ui.class\");\n\n\t\t\tif (o != null) {\n\t\t\t\tif (o instanceof Object[]) {\n\t\t\t\t\tfor (Object s : (Object[]) o) {\n\t\t\t\t\t\tif (s instanceof CharSequence) {\n\t\t\t\t\t\t\tRule rule = byClass.get((CharSequence) s);\n\n\t\t\t\t\t\t\tif (rule != null)\n\t\t\t\t\t\t\t\trules.add(rule);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else if (o instanceof CharSequence) {\n\t\t\t\t\tString classList = ((CharSequence) o).toString().trim();\n\t\t\t\t\tString[] classes = classList.split(\"\\\\s*,\\\\s*\");\n\n\t\t\t\t\tfor (String c : classes) {\n\t\t\t\t\t\tRule rule = byClass.get(c);\n\n\t\t\t\t\t\tif (rule != null)\n\t\t\t\t\t\t\trules.add(rule);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tthrow new RuntimeException(\n\t\t\t\t\t\t\t\"Oups ! class attribute is of type \"\n\t\t\t\t\t\t\t\t\t+ o.getClass().getName());\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Command\n\n\t\t/**\n\t\t * Remove all styles.\n\t\t */\n\t\tprotected void clear() {\n\t\t\tdefaultRule = null;\n\t\t\tbyId.clear();\n\t\t\tbyClass.clear();\n\t\t}\n\n\t\t/**\n\t\t * Add a new rule.\n\t\t * \n\t\t * <p>\n\t\t * Several cases can occur :\n\t\t * </p>\n\t\t * \n\t\t * <ul>\n\t\t * <li>The rule to add has an ID or class and the rule does not yet\n\t\t * exists and is not an event rule : add it directly.</li>\n\t\t * <li>If the rule has an ID or class but the rule already exists,\n\t\t * augment to already existing rule.</li>\n\t\t * <li>If the rule has no ID or class and is not an event, augment the\n\t\t * default style.</li>\n\t\t * <li>If the rule is an event, the corresponding normal rule is\n\t\t * searched, if it does not exists, it is created then or else, the\n\t\t * event is added to the found rule.</li>\n\t\t * </ul>\n\t\t * \n\t\t * @param newRule\n\t\t *            The rule to add or copy.\n\t\t * @return It the rule added augments an existing rule, this existing\n\t\t *         rule is returned, else null is returned.\n\t\t */\n\t\tprotected Rule addRule(Rule newRule) {\n\t\t\tRule oldRule = null;\n\n\t\t\tif (newRule.selector.getPseudoClass() != null) {\n\t\t\t\toldRule = addEventRule(newRule);\n\t\t\t} else if (newRule.selector.getId() != null) {\n\t\t\t\toldRule = byId.get(newRule.selector.getId());\n\n\t\t\t\tif (oldRule != null) {\n\t\t\t\t\toldRule.getStyle().augment(newRule.getStyle());\n\t\t\t\t} else {\n\t\t\t\t\tbyId.put(newRule.selector.getId(), newRule);\n\t\t\t\t\tnewRule.getStyle().reparent(defaultRule);\n\t\t\t\t}\n\t\t\t} else if (newRule.selector.getClazz() != null) {\n\t\t\t\toldRule = byClass.get(newRule.selector.getClazz());\n\n\t\t\t\tif (oldRule != null) {\n\t\t\t\t\toldRule.getStyle().augment(newRule.getStyle());\n\t\t\t\t} else {\n\t\t\t\t\tbyClass.put(newRule.selector.getClazz(), newRule);\n\t\t\t\t\tnewRule.getStyle().reparent(defaultRule);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\toldRule = defaultRule;\n\t\t\t\tdefaultRule.getStyle().augment(newRule.getStyle());\n\t\t\t\tnewRule = defaultRule;\n\t\t\t}\n\n\t\t\t// That's it.\n\n\t\t\treturn oldRule;\n\t\t}\n\n\t\tprotected Rule addEventRule(Rule newRule) {\n\t\t\tRule parentRule = null;\n\n\t\t\tif (newRule.selector.getId() != null) {\n\t\t\t\tparentRule = byId.get(newRule.selector.getId());\n\n\t\t\t\tif (parentRule == null) {\n\t\t\t\t\tparentRule = addRule(new Rule(new Selector(\n\t\t\t\t\t\t\tnewRule.selector.getType(),\n\t\t\t\t\t\t\tnewRule.selector.getId(),\n\t\t\t\t\t\t\tnewRule.selector.getClazz())));\n\t\t\t\t}\n\t\t\t} else if (newRule.selector.getClazz() != null) {\n\t\t\t\tparentRule = byClass.get(newRule.selector.getClazz());\n\n\t\t\t\tif (parentRule == null) {\n\t\t\t\t\tparentRule = addRule(new Rule(new Selector(\n\t\t\t\t\t\t\tnewRule.selector.getType(),\n\t\t\t\t\t\t\tnewRule.selector.getId(),\n\t\t\t\t\t\t\tnewRule.selector.getClazz())));\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tparentRule = defaultRule;\n\t\t\t}\n\n\t\t\tnewRule.getStyle().reparent(parentRule);\n\t\t\tparentRule.getStyle().addAlternateStyle(\n\t\t\t\t\tnewRule.selector.getPseudoClass(), newRule);\n\n\t\t\treturn parentRule;\n\t\t}\n\n\t\t@Override\n\t\tpublic String toString() {\n\t\t\treturn toString(-1);\n\t\t}\n\n\t\tpublic String toString(int level) {\n\t\t\tString prefix = \"\";\n\n\t\t\tif (level > 0) {\n\t\t\t\tfor (int i = 0; i < level; i++)\n\t\t\t\t\tprefix += \"    \";\n\t\t\t}\n\n\t\t\tStringBuilder builder = new StringBuilder();\n\n\t\t\tbuilder.append(String\n\t\t\t\t\t.format(\"%s%s default style :%n\", prefix, type));\n\t\t\tbuilder.append(defaultRule.toString(level + 1));\n\t\t\ttoStringRules(level, builder, byId,\n\t\t\t\t\tString.format(\"%s%s id styles\", prefix, type));\n\t\t\ttoStringRules(level, builder, byClass,\n\t\t\t\t\tString.format(\"%s%s class styles\", prefix, type));\n\n\t\t\treturn builder.toString();\n\t\t}\n\n\t\tprotected void toStringRules(int level, StringBuilder builder,\n\t\t\t\tHashMap<String, Rule> rules, String title) {\n\t\t\tbuilder.append(title);\n\t\t\tbuilder.append(String.format(\" :%n\"));\n\n\t\t\tfor (Rule rule : rules.values())\n\t\t\t\tbuilder.append(rule.toString(level + 1));\n\t\t}\n\t}\n}",
        "tokensGeneralGrammar": [
            "null",
            "true",
            "false",
            ",",
            ".",
            ":",
            ";",
            "?",
            "(",
            ")",
            "jdVar",
            "stream",
            "Arrays",
            "allMatch",
            "noneMatch",
            "anyMatch",
            "~",
            ">>",
            "<<",
            ">>>",
            "|",
            "&",
            "^",
            "+",
            "-",
            "/",
            "*",
            "%",
            "&&",
            "||",
            ">=",
            "<=",
            ">",
            "<",
            "==",
            "!=",
            "instanceof",
            "class",
            "methodResultID",
            "this"
        ],
        "tokensGeneralValuesGlobalDictionary": [
            [
                "0",
                "int"
            ],
            [
                "1",
                "int"
            ],
            [
                "-1",
                "int"
            ],
            [
                "0.0",
                "double"
            ],
            [
                "1.0",
                "double"
            ],
            [
                "-1.0",
                "double"
            ],
            [
                "\"\"",
                "String"
            ],
            [
                "\" \"",
                "String"
            ]
        ],
        "tokensProjectClasses": [
            [
                "DefaultCamera",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "GradientFactory",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "GraphMetrics",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "Graphics2DOutput",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "ImageCache",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "StrokeFactory",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "FontCache",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "FontSlot",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "DefaultView",
                "org.graphstream.ui.swingViewer"
            ],
            [
                "SpriteRenderer",
                "org.graphstream.ui.swingViewer.basicRenderer"
            ],
            [
                "ElementRenderer",
                "org.graphstream.ui.swingViewer.basicRenderer"
            ],
            [
                "NodeRenderer",
                "org.graphstream.ui.swingViewer.basicRenderer"
            ],
            [
                "Arrow",
                "org.graphstream.ui.swingViewer.basicRenderer.shapes"
            ],
            [
                "Shape",
                "org.graphstream.ui.swingViewer.basicRenderer.shapes"
            ],
            [
                "EdgeRenderer",
                "org.graphstream.ui.swingViewer.basicRenderer"
            ],
            [
                "SwingBasicGraphRenderer",
                "org.graphstream.ui.swingViewer.basicRenderer"
            ],
            [
                "GraphRendererBase",
                "org.graphstream.ui.swingViewer"
            ],
            [
                "GraphRenderer",
                "org.graphstream.ui.swingViewer"
            ],
            [
                "LayerRenderer",
                "org.graphstream.ui.swingViewer"
            ],
            [
                "ViewPanel",
                "org.graphstream.ui.swingViewer"
            ],
            [
                "Layouts",
                "org.graphstream.ui.layout"
            ],
            [
                "Layout",
                "org.graphstream.ui.layout"
            ],
            [
                "LayoutRunner",
                "org.graphstream.ui.layout"
            ],
            [
                "NodeParticle",
                "org.graphstream.ui.layout.springbox"
            ],
            [
                "GraphCellData",
                "org.graphstream.ui.layout.springbox"
            ],
            [
                "EdgeSpring",
                "org.graphstream.ui.layout.springbox"
            ],
            [
                "Energies",
                "org.graphstream.ui.layout.springbox"
            ],
            [
                "BarnesHutLayout",
                "org.graphstream.ui.layout.springbox"
            ],
            [
                "LinLog",
                "org.graphstream.ui.layout.springbox.implementations"
            ],
            [
                "LinLogNodeParticle",
                "org.graphstream.ui.layout.springbox.implementations"
            ],
            [
                "SpringBoxNodeParticle",
                "org.graphstream.ui.layout.springbox.implementations"
            ],
            [
                "SpringBox",
                "org.graphstream.ui.layout.springbox.implementations"
            ],
            [
                "Point2",
                "org.graphstream.ui.geom"
            ],
            [
                "Vector2",
                "org.graphstream.ui.geom"
            ],
            [
                "Vector3",
                "org.graphstream.ui.geom"
            ],
            [
                "Point3",
                "org.graphstream.ui.geom"
            ],
            [
                "ViewerListener",
                "org.graphstream.ui.view"
            ],
            [
                "MouseManager",
                "org.graphstream.ui.view.util"
            ],
            [
                "ShortcutManager",
                "org.graphstream.ui.view.util"
            ],
            [
                "DefaultShortcutManager",
                "org.graphstream.ui.view.util"
            ],
            [
                "FpsCounter",
                "org.graphstream.ui.view.util"
            ],
            [
                "CubicCurve",
                "org.graphstream.ui.view.util"
            ],
            [
                "DefaultMouseManager",
                "org.graphstream.ui.view.util"
            ],
            [
                "Selection",
                "org.graphstream.ui.view"
            ],
            [
                "ViewerPipe",
                "org.graphstream.ui.view"
            ],
            [
                "Viewer",
                "org.graphstream.ui.view"
            ],
            [
                "View",
                "org.graphstream.ui.view"
            ],
            [
                "Camera",
                "org.graphstream.ui.view"
            ],
            [
                "Sprite",
                "org.graphstream.ui.spriteManager"
            ],
            [
                "InvalidSpriteIDException",
                "org.graphstream.ui.spriteManager"
            ],
            [
                "SpriteManager",
                "org.graphstream.ui.spriteManager"
            ],
            [
                "SpriteFactory",
                "org.graphstream.ui.spriteManager"
            ],
            [
                "StyleGroupListener",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "Colors",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "Values",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "StyleSheetListener",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "StyleSheetParserTokenManager",
                "org.graphstream.ui.graphicGraph.stylesheet.parser"
            ],
            [
                "StyleSheetParserConstants",
                "org.graphstream.ui.graphicGraph.stylesheet.parser"
            ],
            [
                "StyleSheetParser",
                "org.graphstream.ui.graphicGraph.stylesheet.parser"
            ],
            [
                "Style",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "StyleSheet",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "StyleConstants",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "Selector",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "Value",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "Rule",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "GraphicNode",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "StyleGroup",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphPosLengthUtils",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphicEdge",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphicElementChangeListener",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphicGraph",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "StyleGroupSet",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphicSprite",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphicElement",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "VerboseSink",
                "org.graphstream.util"
            ],
            [
                "GraphListeners",
                "org.graphstream.util"
            ],
            [
                "Environment",
                "org.graphstream.util"
            ],
            [
                "GraphDiff",
                "org.graphstream.util"
            ],
            [
                "Filters",
                "org.graphstream.util"
            ],
            [
                "FilteredEdgeIterator",
                "org.graphstream.util"
            ],
            [
                "Parser",
                "org.graphstream.util.parser"
            ],
            [
                "ParserFactory",
                "org.graphstream.util.parser"
            ],
            [
                "TokenMgrError",
                "org.graphstream.util.parser"
            ],
            [
                "ParseException",
                "org.graphstream.util.parser"
            ],
            [
                "SimpleCharStream",
                "org.graphstream.util.parser"
            ],
            [
                "Token",
                "org.graphstream.util.parser"
            ],
            [
                "ISODateIO",
                "org.graphstream.util.time"
            ],
            [
                "ISODateComponent",
                "org.graphstream.util.time"
            ],
            [
                "FilteredNodeIterator",
                "org.graphstream.util"
            ],
            [
                "FixedArrayList",
                "org.graphstream.util.set"
            ],
            [
                "StepCounter",
                "org.graphstream.util"
            ],
            [
                "GraphSpells",
                "org.graphstream.util.cumulative"
            ],
            [
                "CumulativeAttributes",
                "org.graphstream.util.cumulative"
            ],
            [
                "CumulativeSpells",
                "org.graphstream.util.cumulative"
            ],
            [
                "Filter",
                "org.graphstream.util"
            ],
            [
                "PipeAdapter",
                "org.graphstream.stream"
            ],
            [
                "GraphParseException",
                "org.graphstream.stream"
            ],
            [
                "ElementSink",
                "org.graphstream.stream"
            ],
            [
                "URLSource",
                "org.graphstream.stream.net"
            ],
            [
                "HTTPSource",
                "org.graphstream.stream.net"
            ],
            [
                "SourceAdapter",
                "org.graphstream.stream"
            ],
            [
                "AttributeSink",
                "org.graphstream.stream"
            ],
            [
                "GMLParserConstants",
                "org.graphstream.stream.file.gml"
            ],
            [
                "GMLParserTokenManager",
                "org.graphstream.stream.file.gml"
            ],
            [
                "GMLContext",
                "org.graphstream.stream.file.gml"
            ],
            [
                "Graphics",
                "org.graphstream.stream.file.gml"
            ],
            [
                "KeyValues",
                "org.graphstream.stream.file.gml"
            ],
            [
                "GMLParser",
                "org.graphstream.stream.file.gml"
            ],
            [
                "FileSinkGraphML",
                "org.graphstream.stream.file"
            ],
            [
                "TLPParserConstants",
                "org.graphstream.stream.file.tlp"
            ],
            [
                "TLPParser",
                "org.graphstream.stream.file.tlp"
            ],
            [
                "TLPParserTokenManager",
                "org.graphstream.stream.file.tlp"
            ],
            [
                "FileSinkFactory",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceEdge",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkBase",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkTikZ",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceGEXF",
                "org.graphstream.stream.file"
            ],
            [
                "DOTParser",
                "org.graphstream.stream.file.dot"
            ],
            [
                "DOTParserConstants",
                "org.graphstream.stream.file.dot"
            ],
            [
                "DOTParserTokenManager",
                "org.graphstream.stream.file.dot"
            ],
            [
                "FileSink",
                "org.graphstream.stream.file"
            ],
            [
                "PajekContext",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "Graphics",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "NodeGraphics",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "EdgeGraphics",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "EdgeMatrix",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "PajekParserTokenManager",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "PajekParserConstants",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "FileSourceXML",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkBaseFiltered",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkDOT",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceParser",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkDGSFiltered",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceDOT",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceDGS1And2",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceGraphML",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceFactory",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkImages",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkDynamicGML",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkSVG",
                "org.graphstream.stream.file"
            ],
            [
                "GEXFSpell",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "SmartXMLWriter",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFElement",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFEdges",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFAttValues",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFEdge",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFSpells",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFAttValue",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFNodes",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFNode",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFMeta",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFAttributes",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXF",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFGraph",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFAttribute",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "OldFileSourceDGS",
                "org.graphstream.stream.file.dgs"
            ],
            [
                "DGSParser",
                "org.graphstream.stream.file.dgs"
            ],
            [
                "FileSourceBase",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkGML",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceDGS",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkDGSUtility",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceTLP",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkSVG2",
                "org.graphstream.stream.file"
            ],
            [
                "FileSource",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceNCol",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourcePajek",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceGPX",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceLGL",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkGEXF2",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceGML",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkGEXF",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkDGS",
                "org.graphstream.stream.file"
            ],
            [
                "ProxyPipe",
                "org.graphstream.stream"
            ],
            [
                "Sink",
                "org.graphstream.stream"
            ],
            [
                "Timeline",
                "org.graphstream.stream"
            ],
            [
                "Pipe",
                "org.graphstream.stream"
            ],
            [
                "SinkAdapter",
                "org.graphstream.stream"
            ],
            [
                "Replayable",
                "org.graphstream.stream"
            ],
            [
                "Source",
                "org.graphstream.stream"
            ],
            [
                "AnnotatedSink",
                "org.graphstream.stream"
            ],
            [
                "GraphReplay",
                "org.graphstream.stream"
            ],
            [
                "AttributePipe",
                "org.graphstream.stream"
            ],
            [
                "SinkTime",
                "org.graphstream.stream.sync"
            ],
            [
                "SourceTime",
                "org.graphstream.stream.sync"
            ],
            [
                "PipeBase",
                "org.graphstream.stream"
            ],
            [
                "ThreadProxyPipe",
                "org.graphstream.stream.thread"
            ],
            [
                "ThreadProxyPipeOld",
                "org.graphstream.stream.thread"
            ],
            [
                "RMISource",
                "org.graphstream.stream.rmi"
            ],
            [
                "RMIAdapterOut",
                "org.graphstream.stream.rmi"
            ],
            [
                "RMISink",
                "org.graphstream.stream.rmi"
            ],
            [
                "RMIAdapterIn",
                "org.graphstream.stream.rmi"
            ],
            [
                "SourceBase",
                "org.graphstream.stream"
            ],
            [
                "NetStreamDecoder",
                "org.graphstream.stream.netstream"
            ],
            [
                "NetStreamReceiver",
                "org.graphstream.stream.netstream"
            ],
            [
                "NetStreamConstants",
                "org.graphstream.stream.netstream"
            ],
            [
                "NetStreamSender",
                "org.graphstream.stream.netstream"
            ],
            [
                "DefaultNetStreamDecoder",
                "org.graphstream.stream.netstream"
            ],
            [
                "Base64",
                "org.graphstream.stream.netstream.packing"
            ],
            [
                "NetStreamUnpacker",
                "org.graphstream.stream.netstream.packing"
            ],
            [
                "Base64Packer",
                "org.graphstream.stream.netstream.packing"
            ],
            [
                "Base64Unpacker",
                "org.graphstream.stream.netstream.packing"
            ],
            [
                "NetStreamPacker",
                "org.graphstream.stream.netstream.packing"
            ],
            [
                "AttributePredicate",
                "org.graphstream.stream"
            ],
            [
                "Element",
                "org.graphstream.graph"
            ],
            [
                "Node",
                "org.graphstream.graph"
            ],
            [
                "BreadthFirstIterator",
                "org.graphstream.graph"
            ],
            [
                "Graph",
                "org.graphstream.graph"
            ],
            [
                "EdgeRejectedException",
                "org.graphstream.graph"
            ],
            [
                "CompoundAttribute",
                "org.graphstream.graph"
            ],
            [
                "Structure",
                "org.graphstream.graph"
            ],
            [
                "DepthFirstIterator",
                "org.graphstream.graph"
            ],
            [
                "NullAttributeException",
                "org.graphstream.graph"
            ],
            [
                "IdAlreadyInUseException",
                "org.graphstream.graph"
            ],
            [
                "EdgeFactory",
                "org.graphstream.graph"
            ],
            [
                "ElementNotFoundException",
                "org.graphstream.graph"
            ],
            [
                "OneAttributeElement",
                "org.graphstream.graph.implementations"
            ],
            [
                "AdjacencyListNode",
                "org.graphstream.graph.implementations"
            ],
            [
                "SingleNode",
                "org.graphstream.graph.implementations"
            ],
            [
                "AbstractElement",
                "org.graphstream.graph.implementations"
            ],
            [
                "AdjacencyListGraph",
                "org.graphstream.graph.implementations"
            ],
            [
                "AbstractNode",
                "org.graphstream.graph.implementations"
            ],
            [
                "DefaultGraph",
                "org.graphstream.graph.implementations"
            ],
            [
                "MultiGraph",
                "org.graphstream.graph.implementations"
            ],
            [
                "Graphs",
                "org.graphstream.graph.implementations"
            ],
            [
                "SingleGraph",
                "org.graphstream.graph.implementations"
            ],
            [
                "MultiNode",
                "org.graphstream.graph.implementations"
            ],
            [
                "AbstractGraph",
                "org.graphstream.graph.implementations"
            ],
            [
                "AbstractEdge",
                "org.graphstream.graph.implementations"
            ],
            [
                "GraphFactory",
                "org.graphstream.graph"
            ],
            [
                "NodeFactory",
                "org.graphstream.graph"
            ],
            [
                "Edge",
                "org.graphstream.graph"
            ],
            [
                "Path",
                "org.graphstream.graph"
            ]
        ],
        "tokensProjectClassesNonPrivateStaticNonVoidMethods": [
            [
                "gradientInArea",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static Paint gradientInArea(int x0, int y0, int width, int height, Style style)"
            ],
            [
                "linearGradientFromStyle",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static Paint linearGradientFromStyle(float x0, float y0, float x1, float y1, Style style)"
            ],
            [
                "radialGradientFromStyle",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static Paint radialGradientFromStyle(float cx, float cy, float radius, Style style)"
            ],
            [
                "radialGradientFromStyle",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static Paint radialGradientFromStyle(float cx, float cy, float radius, float fx, float fy, Style style)"
            ],
            [
                "createFractions",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "protected static float[] createFractions(Style style)"
            ],
            [
                "createColors",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "protected static Color[] createColors(Style style)"
            ],
            [
                "defaultImageCache",
                "org.graphstream.ui.swingViewer.util",
                "ImageCache",
                "public static ImageCache defaultImageCache()"
            ],
            [
                "generateStroke",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "public static Stroke generateStroke(Style style, GraphMetrics metrics)"
            ],
            [
                "generatePlainStroke",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "protected static Stroke generatePlainStroke(Style style, GraphMetrics metrics)"
            ],
            [
                "generateDotsStroke",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "protected static Stroke generateDotsStroke(Style style, GraphMetrics metrics)"
            ],
            [
                "generateDashesStroke",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "protected static Stroke generateDashesStroke(Style style, GraphMetrics metrics)"
            ],
            [
                "defaultFontCache",
                "org.graphstream.ui.swingViewer.util",
                "FontCache",
                "public static FontCache defaultFontCache()"
            ],
            [
                "newLayoutAlgorithm",
                "org.graphstream.ui.layout",
                "Layouts",
                "public static Layout newLayoutAlgorithm()"
            ],
            [
                "eval",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "public static double eval(double x0, double x1, double x2, double x3, double t)"
            ],
            [
                "eval",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "public static Point2 eval(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t)"
            ],
            [
                "eval",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "public static Point2D.Double eval(Point2D.Double p0, Point2D.Double p1, Point2D.Double p2, Point2D.Double p3, double t)"
            ],
            [
                "eval",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "public static Point2 eval(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t, Point2 result)"
            ],
            [
                "derivative",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "public static double derivative(double x0, double x1, double x2, double x3, double t)"
            ],
            [
                "derivative",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "public static Point2 derivative(Point2 p0, Point2 p1, Point2 p2, Point3 p3, double t)"
            ],
            [
                "derivative",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "public static Point2 derivative(Point2 p0, Point2 p1, Point2 p2, Point3 p3, double t, Point2 result)"
            ],
            [
                "perpendicular",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "public static Vector2 perpendicular(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t)"
            ],
            [
                "perpendicular",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "public static Vector2 perpendicular(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t, Vector2 result)"
            ],
            [
                "perpendicular",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "public static Point2D.Double perpendicular(Point2D.Double p0, Point2D.Double p1, Point2D.Double p2, Point2D.Double p3, double t)"
            ],
            [
                "newGraphRenderer",
                "org.graphstream.ui.view",
                "Viewer",
                "public static GraphRenderer newGraphRenderer()"
            ],
            [
                "getPositionValue",
                "org.graphstream.ui.spriteManager",
                "SpriteManager",
                "protected static Values getPositionValue(Object value)"
            ],
            [
                "convertColor",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "public static Color convertColor(Object anyValue)"
            ],
            [
                "convertLabel",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "public static String convertLabel(Object value)"
            ],
            [
                "convertWidth",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "public static float convertWidth(Object value)"
            ],
            [
                "convertValue",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "public static Value convertValue(Object value)"
            ],
            [
                "convertUnit",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "protected static Units convertUnit(String unit)"
            ],
            [
                "nodePosition",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "public static double[] nodePosition(Graph graph, String id)"
            ],
            [
                "nodePointPosition",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "public static Point3 nodePointPosition(Graph graph, String id)"
            ],
            [
                "nodePosition",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "public static double[] nodePosition(Node node)"
            ],
            [
                "nodePointPosition",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "public static Point3 nodePointPosition(Node node)"
            ],
            [
                "edgeLength",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "public static double edgeLength(Graph graph, String id)"
            ],
            [
                "edgeLength",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "public static double edgeLength(Edge edge)"
            ],
            [
                "getGlobalEnvironment",
                "org.graphstream.util",
                "Environment",
                "public static Environment getGlobalEnvironment()"
            ],
            [
                "falseFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> falseFilter()"
            ],
            [
                "trueFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> trueFilter()"
            ],
            [
                "byAttributeFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> byAttributeFilter(String key, Object expectedValue)"
            ],
            [
                "separateNodeAndEdgeFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element, U extends Element> Filter<Element> separateNodeAndEdgeFilter(Filter<T> nodeFilter, Filter<U> edgeFilter)"
            ],
            [
                "byExtremitiesFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element, U extends Element> Filter<T> byExtremitiesFilter(Filter<U> f)"
            ],
            [
                "byIdFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> byIdFilter(String idPattern)"
            ],
            [
                "isContained",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> isContained(final Collection<? extends T> set)"
            ],
            [
                "isIdContained",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> isIdContained(final Collection<String> set)"
            ],
            [
                "and",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> and(Filter<T> f1, Filter<T> f2)"
            ],
            [
                "or",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> or(Filter<T> f1, Filter<T> f2)"
            ],
            [
                "xor",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> xor(Filter<T> f1, Filter<T> f2)"
            ],
            [
                "not",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> not(Filter<T> f)"
            ],
            [
                "addEscapes",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "protected static final String addEscapes(String str)"
            ],
            [
                "LexicalError",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "protected static String LexicalError(boolean EOFSeen, int lexState, int errorLine, int errorColumn, String errorAfter, char curChar)"
            ],
            [
                "add_escapes",
                "org.graphstream.util.parser",
                "ParseException",
                "static String add_escapes(String str)"
            ],
            [
                "newToken",
                "org.graphstream.util.parser",
                "Token",
                "public static Token newToken(int ofKind, String image)"
            ],
            [
                "newToken",
                "org.graphstream.util.parser",
                "Token",
                "public static Token newToken(int ofKind)"
            ],
            [
                "countStepInFile",
                "org.graphstream.util",
                "StepCounter",
                "public static int countStepInFile(String path) throws IOException"
            ],
            [
                "GET",
                "org.graphstream.stream.net",
                "HTTPSource",
                "protected static HashMap<String, Object> GET(HttpExchange ex)"
            ],
            [
                "sinkFor",
                "org.graphstream.stream.file",
                "FileSinkFactory",
                "public static FileSink sinkFor(String filename)"
            ],
            [
                "formatId",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "protected static String formatId(String id)"
            ],
            [
                "getInt",
                "org.graphstream.stream.file.pajek",
                "PajekContext",
                "protected static int getInt(Token nb) throws ParseException"
            ],
            [
                "getReal",
                "org.graphstream.stream.file.pajek",
                "PajekContext",
                "protected static double getReal(Token nb) throws ParseException"
            ],
            [
                "toColorValue",
                "org.graphstream.stream.file.pajek",
                "PajekContext",
                "public static String toColorValue(Token R, Token G, Token B) throws ParseException"
            ],
            [
                "sourceFor",
                "org.graphstream.stream.file",
                "FileSourceFactory",
                "public static FileSource sourceFor(String fileName) throws IOException"
            ],
            [
                "getXMLRootElement",
                "org.graphstream.stream.file",
                "FileSourceFactory",
                "public static String getXMLRootElement(String fileName) throws IOException"
            ],
            [
                "formatStringForQuoting",
                "org.graphstream.stream.file",
                "FileSinkDGSUtility",
                "protected static String formatStringForQuoting(String str)"
            ],
            [
                "attributeString",
                "org.graphstream.stream.file",
                "FileSinkDGSUtility",
                "protected static String attributeString(String key, Object value, boolean remove)"
            ],
            [
                "arrayString",
                "org.graphstream.stream.file",
                "FileSinkDGSUtility",
                "protected static String arrayString(Object value)"
            ],
            [
                "valueString",
                "org.graphstream.stream.file",
                "FileSinkDGSUtility",
                "protected static String valueString(Object value)"
            ],
            [
                "hashToString",
                "org.graphstream.stream.file",
                "FileSinkDGSUtility",
                "protected static String hashToString(HashMap<?, ?> hash)"
            ],
            [
                "encodeObject",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public static String encodeObject(java.io.Serializable serializableObject) throws java.io.IOException"
            ],
            [
                "encodeObject",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public static String encodeObject(java.io.Serializable serializableObject, int options) throws java.io.IOException"
            ],
            [
                "encodeBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public static String encodeBytes(byte[] source)"
            ],
            [
                "encodeBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public static String encodeBytes(byte[] source, int options) throws java.io.IOException"
            ],
            [
                "encodeBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public static String encodeBytes(byte[] source, int off, int len)"
            ],
            [
                "encodeBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public static String encodeBytes(byte[] source, int off, int len, int options) throws java.io.IOException"
            ],
            [
                "encodeBytesToBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public static byte[] encodeBytesToBytes(byte[] source)"
            ],
            [
                "encodeBytesToBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public static byte[] encodeBytesToBytes(byte[] source, int off, int len, int options) throws java.io.IOException"
            ],
            [
                "decode",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public static byte[] decode(byte[] source) throws java.io.IOException"
            ],
            [
                "decode",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public static byte[] decode(byte[] source, int off, int len, int options) throws java.io.IOException"
            ],
            [
                "decode",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public static byte[] decode(String s) throws java.io.IOException"
            ],
            [
                "decode",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public static byte[] decode(String s, int options) throws java.io.IOException"
            ],
            [
                "decodeToObject",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public static Object decodeToObject(String encodedObject) throws java.io.IOException, java.lang.ClassNotFoundException"
            ],
            [
                "decodeToObject",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public static Object decodeToObject(String encodedObject, int options, final ClassLoader loader) throws java.io.IOException, java.lang.ClassNotFoundException"
            ],
            [
                "decodeFromFile",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public static byte[] decodeFromFile(String filename) throws java.io.IOException"
            ],
            [
                "encodeFromFile",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public static String encodeFromFile(String filename) throws java.io.IOException"
            ],
            [
                "unmutableGraph",
                "org.graphstream.graph.implementations",
                "Graphs",
                "public static Graph unmutableGraph(Graph g)"
            ],
            [
                "synchronizedGraph",
                "org.graphstream.graph.implementations",
                "Graphs",
                "public static Graph synchronizedGraph(Graph g)"
            ],
            [
                "merge",
                "org.graphstream.graph.implementations",
                "Graphs",
                "public static Graph merge(Graph... graphs)"
            ],
            [
                "clone",
                "org.graphstream.graph.implementations",
                "Graphs",
                "public static Graph clone(Graph g)"
            ]
        ],
        "tokensProjectClassesNonPrivateStaticAttributes": [
            [
                "version16",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static boolean version16 = false;"
            ],
            [
                "predefFractions",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[][] predefFractions = new float[11][];"
            ],
            [
                "predefFractions2",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions2 = { 0f, 1f };"
            ],
            [
                "predefFractions3",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions3 = { 0f, 0.5f, 1f };"
            ],
            [
                "predefFractions4",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions4 = { 0f, 0.33f, 0.66f, 1f };"
            ],
            [
                "predefFractions5",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions5 = { 0f, 0.25f, 0.5f, 0.75f, 1f };"
            ],
            [
                "predefFractions6",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions6 = { 0f, 0.2f, 0.4f, 0.6f, 0.8f, 1f };"
            ],
            [
                "predefFractions7",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions7 = { 0f, 0.1666f, 0.3333f, 0.4999f, 0.6666f, 0.8333f, 1f };"
            ],
            [
                "predefFractions8",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions8 = { 0f, 0.1428f, 0.2856f, 0.4284f, 0.5712f, 0.7140f, 0.8568f, 1f };"
            ],
            [
                "predefFractions9",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions9 = { 0f, 0.125f, 0.25f, 0.375f, 0.5f, 0.625f, .75f, 0.875f, 1f };"
            ],
            [
                "predefFractions10",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions10 = { 0f, 0.1111f, 0.2222f, 0.3333f, 0.4444f, 0.5555f, 0.6666f, 0.7777f, 0.8888f, 1f };"
            ],
            [
                "defaultImageCache",
                "org.graphstream.ui.swingViewer.util",
                "ImageCache",
                "protected static ImageCache defaultImageCache;"
            ],
            [
                "dots",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "protected static float[] dots = { 1f, 1f };"
            ],
            [
                "dashes",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "protected static float[] dashes = { 3f, 3f };"
            ],
            [
                "defaultFontCache",
                "org.graphstream.ui.swingViewer.util",
                "FontCache",
                "public static FontCache defaultFontCache;"
            ],
            [
                "NULL_POINT2",
                "org.graphstream.ui.geom",
                "Point2",
                "public static final Point2 NULL_POINT2 = new Point2(0, 0);"
            ],
            [
                "NULL_POINT3",
                "org.graphstream.ui.geom",
                "Point3",
                "public static final Point3 NULL_POINT3 = new Point3(0, 0, 0);"
            ],
            [
                "DEFAULT_VIEW_ID",
                "org.graphstream.ui.view",
                "Viewer",
                "public static String DEFAULT_VIEW_ID = \"defaultView\";"
            ],
            [
                "jjbitVec0",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };"
            ],
            [
                "jjnextStates",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "static final int[] jjnextStates = { 48, 49, 52, 54, 55, 65, 69, 2, 4, 6, 10, 16, 23, 33, 50, 52, 54, 55, 57, 58, 60, 61, 66, 68, 70, 71 };"
            ],
            [
                "jjstrLiteralImages",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "public static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, \"\\56\", \"\\173\", \"\\175\", \"\\50\", \"\\51\", \"\\43\", \"\\72\", \"\\73\", \"\\54\", \"\\162\\147\\142\\141\", \"\\162\\147\\142\", null, null, null, \"\\165\\162\\154\", \"\\147\\162\\141\\160\\150\", \"\\145\\144\\147\\145\", \"\\156\\157\\144\\145\", \"\\163\\160\\162\\151\\164\\145\", \"\\146\\151\\154\\154\\55\\155\\157\\144\\145\", \"\\146\\151\\154\\154\\55\\143\\157\\154\\157\\162\", \"\\146\\151\\154\\154\\55\\151\\155\\141\\147\\145\", \"\\163\\164\\162\\157\\153\\145\\55\\155\\157\\144\\145\", \"\\163\\164\\162\\157\\153\\145\\55\\143\\157\\154\\157\\162\", \"\\163\\164\\162\\157\\153\\145\\55\\167\\151\\144\\164\\150\", \"\\163\\150\\141\\144\\157\\167\\55\\155\\157\\144\\145\", \"\\163\\150\\141\\144\\157\\167\\55\\143\\157\\154\\157\\162\", \"\\163\\150\\141\\144\\157\\167\\55\\167\\151\\144\\164\\150\", \"\\163\\150\\141\\144\\157\\167\\55\\157\\146\\146\\163\\145\\164\", \"\\164\\145\\170\\164\\55\\155\\157\\144\\145\", \"\\164\\145\\170\\164\\55\\143\\157\\154\\157\\162\", \"\\164\\145\\170\\164\\55\\163\\164\\171\\154\\145\", \"\\164\\145\\170\\164\\55\\146\\157\\156\\164\", \"\\164\\145\\170\\164\\55\\163\\151\\172\\145\", \"\\164\\145\\170\\164\\55\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\\55\\155\\157\\144\\145\", \"\\164\\145\\170\\164\\55\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\", \"\\164\\145\\170\\164\\55\\142\\141\\143\\153\\147\\162\\157\\165\\156\\144\\55\\155\\157\\144\\145\", \"\\164\\145\\170\\164\\55\\142\\141\\143\\153\\147\\162\\157\\165\\156\\144\\55\\143\\157\\154\\157\\162\", \"\\164\\145\\170\\164\\55\\157\\146\\146\\163\\145\\164\", \"\\164\\145\\170\\164\\55\\160\\141\\144\\144\\151\\156\\147\", \"\\151\\143\\157\\156\\55\\155\\157\\144\\145\", \"\\151\\143\\157\\156\", \"\\160\\141\\144\\144\\151\\156\\147\", \"\\172\\55\\151\\156\\144\\145\\170\", \"\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\\55\\155\\157\\144\\145\", \"\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\", \"\\163\\150\\141\\160\\145\", \"\\163\\151\\172\\145\", \"\\163\\151\\172\\145\\55\\155\\157\\144\\145\", \"\\163\\150\\141\\160\\145\\55\\160\\157\\151\\156\\164\\163\", \"\\164\\145\\170\\164\\55\\141\\154\\151\\147\\156\\155\\145\\156\\164\", \"\\152\\143\\157\\155\\160\\157\\156\\145\\156\\164\", \"\\141\\162\\162\\157\\167\\55\\151\\155\\141\\147\\145\", \"\\141\\162\\162\\157\\167\\55\\163\\151\\172\\145\", \"\\141\\162\\162\\157\\167\\55\\163\\150\\141\\160\\145\", \"\\163\\160\\162\\151\\164\\145\\55\\157\\162\\151\\145\\156\\164\\141\\164\\151\\157\\156\", \"\\143\\141\\156\\166\\141\\163\\55\\143\\157\\154\\157\\162\", \"\\160\\154\\141\\151\\156\", \"\\144\\171\\156\\55\\160\\154\\141\\151\\156\", \"\\144\\171\\156\\55\\163\\151\\172\\145\", \"\\144\\171\\156\\55\\151\\143\\157\\156\", \"\\144\\141\\163\\150\\145\\163\", \"\\144\\157\\164\\163\", \"\\144\\157\\165\\142\\154\\145\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\144\\151\\141\\147\\157\\156\\141\\154\\61\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\144\\151\\141\\147\\157\\156\\141\\154\\62\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\150\\157\\162\\151\\172\\157\\156\\164\\141\\154\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\162\\141\\144\\151\\141\\154\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\166\\145\\162\\164\\151\\143\\141\\154\", \"\\150\\151\\144\\144\\145\\156\", \"\\151\\155\\141\\147\\145\\55\\164\\151\\154\\145\\144\", \"\\151\\155\\141\\147\\145\\55\\163\\143\\141\\154\\145\\144\", \"\\151\\155\\141\\147\\145\\55\\163\\143\\141\\154\\145\\144\\55\\162\\141\\164\\151\\157\\55\\155\\141\\170\", \"\\151\\155\\141\\147\\145\\55\\163\\143\\141\\154\\145\\144\\55\\162\\141\\164\\151\\157\\55\\155\\151\\156\", \"\\156\\157\\156\\145\", \"\\156\\157\\162\\155\\141\\154\", \"\\164\\162\\165\\156\\143\\141\\164\\145\\144\", \"\\172\\157\\157\\155\\55\\162\\141\\156\\147\\145\", \"\\141\\164\\55\\172\\157\\157\\155\", \"\\165\\156\\144\\145\\162\\55\\172\\157\\157\\155\", \"\\157\\166\\145\\162\\55\\172\\157\\157\\155\", \"\\172\\157\\157\\155\\163\", \"\\146\\151\\164\", \"\\142\\157\\154\\144\", \"\\142\\157\\154\\144\\55\\151\\164\\141\\154\\151\\143\", \"\\151\\164\\141\\154\\151\\143\", \"\\141\\154\\157\\156\\147\", \"\\141\\164\\55\\154\\145\\146\\164\", \"\\141\\164\\55\\162\\151\\147\\150\\164\", \"\\143\\145\\156\\164\\145\\162\", \"\\154\\145\\146\\164\", \"\\162\\151\\147\\150\\164\", \"\\165\\156\\144\\145\\162\", \"\\141\\142\\157\\166\\145\", \"\\152\\165\\163\\164\\151\\146\\171\", \"\\143\\151\\162\\143\\154\\145\", \"\\164\\162\\151\\141\\156\\147\\154\\145\", \"\\146\\162\\145\\145\\160\\154\\141\\156\\145\", \"\\164\\145\\170\\164\\55\\142\\157\\170\", \"\\164\\145\\170\\164\\55\\162\\157\\165\\156\\144\\145\\144\\55\\142\\157\\170\", \"\\164\\145\\170\\164\\55\\143\\151\\162\\143\\154\\145\", \"\\164\\145\\170\\164\\55\\144\\151\\141\\155\\157\\156\\144\", \"\\164\\145\\170\\164\\55\\160\\141\\162\\141\\147\\162\\141\\160\\150\", \"\\142\\157\\170\", \"\\162\\157\\165\\156\\144\\145\\144\\55\\142\\157\\170\", \"\\143\\162\\157\\163\\163\", \"\\144\\151\\141\\155\\157\\156\\144\", \"\\160\\157\\154\\171\\147\\157\\156\", \"\\142\\165\\164\\164\\157\\156\", \"\\164\\145\\170\\164\\55\\146\\151\\145\\154\\144\", \"\\160\\141\\156\\145\\154\", \"\\154\\151\\156\\145\", \"\\160\\157\\154\\171\\154\\151\\156\\145\", \"\\160\\157\\154\\171\\154\\151\\156\\145\\55\\163\\143\\141\\154\\145\\144\", \"\\141\\156\\147\\154\\145\", \"\\143\\165\\142\\151\\143\\55\\143\\165\\162\\166\\145\", \"\\142\\154\\157\\142\", \"\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\114\\55\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\150\\157\\162\\151\\172\\157\\156\\164\\141\\154\\55\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\166\\145\\162\\164\\151\\143\\141\\154\\55\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\141\\162\\162\\157\\167\", \"\\146\\154\\157\\167\", \"\\160\\151\\145\\55\\143\\150\\141\\162\\164\", \"\\151\\155\\141\\147\\145\", \"\\151\\155\\141\\147\\145\\163\", \"\\146\\162\\157\\155\", \"\\156\\157\\144\\145\\60\", \"\\164\\157\", \"\\156\\157\\144\\145\\61\", \"\\160\\162\\157\\152\\145\\143\\164\\151\\157\\156\", \"\\143\\154\\151\\143\\153\\145\\144\", \"\\163\\145\\154\\145\\143\\164\\145\\144\", null, null };"
            ],
            [
                "lexStateNames",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "public static final String[] lexStateNames = { \"DEFAULT\" };"
            ],
            [
                "jjtoToken",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "static final long[] jjtoToken = { 0xfffffffffffffe01L, 0xffffffffffffffffL, 0xffffL };"
            ],
            [
                "jjtoSkip",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "static final long[] jjtoSkip = { 0x1eL, 0x0L, 0x0L };"
            ],
            [
                "colorMap",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "protected static HashMap<String,Color> colorMap;"
            ],
            [
                "sharpColor1",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "protected static Pattern sharpColor1;"
            ],
            [
                "sharpColor2",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "protected static Pattern sharpColor2;"
            ],
            [
                "cssColor",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "protected static Pattern cssColor;"
            ],
            [
                "cssColorA",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "protected static Pattern cssColorA;"
            ],
            [
                "awtColor",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "protected static Pattern awtColor;"
            ],
            [
                "hexaColor",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "protected static Pattern hexaColor;"
            ],
            [
                "numberUnit",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "protected static Pattern numberUnit;"
            ],
            [
                "number",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "protected static Pattern number;"
            ],
            [
                "acceptedAttribute",
                "org.graphstream.ui.graphicGraph",
                "GraphicElement",
                "protected static Pattern acceptedAttribute;"
            ],
            [
                "DEFAULT_AN_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_AN_FORMAT = \"%prefix%[%sourceId%:%timeId%] add node \\\"%nodeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_CNA_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CNA_FORMAT = \"%prefix%[%sourceId%:%timeId%] set node \\\"%nodeId%\\\" +\\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CNC_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CNC_FORMAT = \"%prefix%[%sourceId%:%timeId%] set node \\\"%nodeId%\\\" \\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CNR_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CNR_FORMAT = \"%prefix%[%sourceId%:%timeId%] set node \\\"%nodeId%\\\" -\\\"%attributeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_DN_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_DN_FORMAT = \"%prefix%[%sourceId%:%timeId%] remove node \\\"%nodeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_AE_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_AE_FORMAT = \"%prefix%[%sourceId%:%timeId%] add edge \\\"%edgeId%\\\" : \\\"%source%\\\" -- \\\"%target%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_CEA_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CEA_FORMAT = \"%prefix%[%sourceId%:%timeId%] set edge \\\"%edgeId%\\\" +\\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CEC_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CEC_FORMAT = \"%prefix%[%sourceId%:%timeId%] set edge \\\"%edgeId%\\\" \\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CER_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CER_FORMAT = \"%prefix%[%sourceId%:%timeId%] set edge \\\"%edgeId%\\\" -\\\"%attributeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_DE_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_DE_FORMAT = \"%prefix%[%sourceId%:%timeId%] remove edge \\\"%edgeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_CGA_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CGA_FORMAT = \"%prefix%[%sourceId%:%timeId%] set +\\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CGC_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CGC_FORMAT = \"%prefix%[%sourceId%:%timeId%] set \\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CGR_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CGR_FORMAT = \"%prefix%[%sourceId%:%timeId%] set -\\\"%attributeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_CL_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CL_FORMAT = \"%prefix%[%sourceId%:%timeId%] clear%suffix%\";"
            ],
            [
                "DEFAULT_ST_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_ST_FORMAT = \"%prefix%[%sourceId%:%timeId%] step %step% begins%suffix%\";"
            ],
            [
                "GLOBAL_ENV",
                "org.graphstream.util",
                "Environment",
                "public static Environment GLOBAL_ENV;"
            ],
            [
                "LEXICAL_ERROR",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "public static final int LEXICAL_ERROR = 0;"
            ],
            [
                "STATIC_LEXER_ERROR",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "public static final int STATIC_LEXER_ERROR = 1;"
            ],
            [
                "INVALID_LEXICAL_STATE",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "public static final int INVALID_LEXICAL_STATE = 2;"
            ],
            [
                "LOOP_DETECTED",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "public static final int LOOP_DETECTED = 3;"
            ],
            [
                "staticFlag",
                "org.graphstream.util.parser",
                "SimpleCharStream",
                "public static final boolean staticFlag = false;"
            ],
            [
                "ABBREVIATED_WEEKDAY_NAME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent ABBREVIATED_WEEKDAY_NAME = new NotImplementedComponent(\"%a\", \"\\\\w+[.]\");"
            ],
            [
                "FULL_WEEKDAY_NAME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent FULL_WEEKDAY_NAME = new NotImplementedComponent(\"%A\", \"\\\\w+\");"
            ],
            [
                "ABBREVIATED_MONTH_NAME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent ABBREVIATED_MONTH_NAME = new NotImplementedComponent(\"%b\", \"\\\\w+[.]\");"
            ],
            [
                "FULL_MONTH_NAME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent FULL_MONTH_NAME = new NotImplementedComponent(\"%B\", \"\\\\w+\");"
            ],
            [
                "LOCALE_DATE_AND_TIME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent LOCALE_DATE_AND_TIME = new NotImplementedComponent(\"%c\", null);"
            ],
            [
                "CENTURY",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent CENTURY = new NotImplementedComponent(\"%C\", \"\\\\d\\\\d\");"
            ],
            [
                "DAY_OF_MONTH_2_DIGITS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DAY_OF_MONTH_2_DIGITS = new FieldComponent(\"%d\", \"[012]\\\\d|3[01]\", Calendar.DAY_OF_MONTH, \"%02d\");"
            ],
            [
                "DATE",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DATE = new AliasComponent(\"%D\", \"%m/%d/%y\");"
            ],
            [
                "DAY_OF_MONTH",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DAY_OF_MONTH = new FieldComponent(\"%e\", \"\\\\d|[12]\\\\d|3[01]\", Calendar.DAY_OF_MONTH, \"%2d\");"
            ],
            [
                "DATE_ISO8601",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DATE_ISO8601 = new AliasComponent(\"%F\", \"%Y-%m-%d\");"
            ],
            [
                "WEEK_BASED_YEAR_2_DIGITS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent WEEK_BASED_YEAR_2_DIGITS = new FieldComponent(\"%g\", \"\\\\d\\\\d\", Calendar.YEAR, \"%02d\");"
            ],
            [
                "WEEK_BASED_YEAR_4_DIGITS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent WEEK_BASED_YEAR_4_DIGITS = new FieldComponent(\"%G\", \"\\\\d{4}\", Calendar.YEAR, \"%04d\");"
            ],
            [
                "ABBREVIATED_MONTH_NAME_ALIAS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent ABBREVIATED_MONTH_NAME_ALIAS = new AliasComponent(\"%h\", \"%b\");"
            ],
            [
                "HOUR_OF_DAY",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent HOUR_OF_DAY = new FieldComponent(\"%H\", \"[01]\\\\d|2[0123]\", Calendar.HOUR_OF_DAY, \"%02d\");"
            ],
            [
                "HOUR",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent HOUR = new FieldComponent(\"%I\", \"0\\\\d|1[012]\", Calendar.HOUR, \"%02d\");"
            ],
            [
                "DAY_OF_YEAR",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DAY_OF_YEAR = new FieldComponent(\"%j\", \"[012]\\\\d\\\\d|3[0-5]\\\\d|36[0-6]\", Calendar.DAY_OF_YEAR, \"%03d\");"
            ],
            [
                "MILLISECOND",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent MILLISECOND = new FieldComponent(\"%k\", \"\\\\d{3}\", Calendar.MILLISECOND, \"%03d\");"
            ],
            [
                "EPOCH",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent EPOCH = new EpochComponent();"
            ],
            [
                "MONTH",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent MONTH = new FieldComponent(\"%m\", \"0[1-9]|1[012]\", Calendar.MONTH, -1, \"%02d\");"
            ],
            [
                "MINUTE",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent MINUTE = new FieldComponent(\"%M\", \"[0-5]\\\\d\", Calendar.MINUTE, \"%02d\");"
            ],
            [
                "NEW_LINE",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent NEW_LINE = new AliasComponent(\"%n\", \"\\n\");"
            ],
            [
                "AM_PM",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent AM_PM = new AMPMComponent();"
            ],
            [
                "LOCALE_CLOCK_TIME_12_HOUR",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent LOCALE_CLOCK_TIME_12_HOUR = new NotImplementedComponent(\"%r\", \"\");"
            ],
            [
                "HOUR_AND_MINUTE",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent HOUR_AND_MINUTE = new AliasComponent(\"%R\", \"%H:%M\");"
            ],
            [
                "SECOND",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent SECOND = new FieldComponent(\"%S\", \"[0-5]\\\\d|60\", Calendar.SECOND, \"%02d\");"
            ],
            [
                "TABULATION",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent TABULATION = new AliasComponent(\"%t\", \"\\t\");"
            ],
            [
                "TIME_ISO8601",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent TIME_ISO8601 = new AliasComponent(\"%T\", \"%H:%M:%S\");"
            ],
            [
                "DAY_OF_WEEK_1_7",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DAY_OF_WEEK_1_7 = new FieldComponent(\"%u\", \"[1-7]\", Calendar.DAY_OF_WEEK, -1, \"%1d\");"
            ],
            [
                "WEEK_OF_YEAR_FROM_SUNDAY",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent WEEK_OF_YEAR_FROM_SUNDAY = new FieldComponent(\"%U\", \"[0-4]\\\\d|5[0123]\", Calendar.WEEK_OF_YEAR, 1, \"%2d\");"
            ],
            [
                "WEEK_NUMBER_ISO8601",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent WEEK_NUMBER_ISO8601 = new NotImplementedComponent(\"%V\", \"0[1-9]|[2-4]\\\\d|5[0123]\");"
            ],
            [
                "DAY_OF_WEEK_0_6",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DAY_OF_WEEK_0_6 = new FieldComponent(\"%w\", \"[0-6]\", Calendar.DAY_OF_WEEK, \"%01d\");"
            ],
            [
                "WEEK_OF_YEAR_FROM_MONDAY",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent WEEK_OF_YEAR_FROM_MONDAY = new FieldComponent(\"%W\", \"[0-4]\\\\d|5[0123]\", Calendar.WEEK_OF_YEAR, \"%02d\");"
            ],
            [
                "LOCALE_DATE_REPRESENTATION",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent LOCALE_DATE_REPRESENTATION = new NotImplementedComponent(\"%x\", \"\");"
            ],
            [
                "LOCALE_TIME_REPRESENTATION",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent LOCALE_TIME_REPRESENTATION = new NotImplementedComponent(\"%X\", \"\");"
            ],
            [
                "YEAR_2_DIGITS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent YEAR_2_DIGITS = new FieldComponent(\"%y\", \"\\\\d\\\\d\", Calendar.YEAR, \"%02d\");"
            ],
            [
                "YEAR_4_DIGITS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent YEAR_4_DIGITS = new FieldComponent(\"%Y\", \"\\\\d{4}\", Calendar.YEAR, \"%04d\");"
            ],
            [
                "UTC_OFFSET",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent UTC_OFFSET = new UTCOffsetComponent();"
            ],
            [
                "LOCALE_TIME_ZONE_NAME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent LOCALE_TIME_ZONE_NAME = new NotImplementedComponent(\"%Z\", \"\\\\w*\");"
            ],
            [
                "PERCENT",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent PERCENT = new AliasComponent(\"%%\", \"%\");"
            ],
            [
                "jjbitVec0",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };"
            ],
            [
                "jjnextStates",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "static final int[] jjnextStates = { 5, 6, 8, 9, 13, 14 };"
            ],
            [
                "jjstrLiteralImages",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "public static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, \"\\133\", \"\\135\", null, null, null, null, null, null };"
            ],
            [
                "lexStateNames",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "public static final String[] lexStateNames = { \"DEFAULT\" };"
            ],
            [
                "jjtoToken",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "static final long[] jjtoToken = { 0xff01L };"
            ],
            [
                "jjtoSkip",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "static final long[] jjtoSkip = { 0x1eL };"
            ],
            [
                "jjbitVec0",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };"
            ],
            [
                "jjnextStates",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "static final int[] jjnextStates = { 54, 11, 12, 15, 17, 18, 1, 2, 5, 47, 52, 8, 9, 20, 21 };"
            ],
            [
                "jjstrLiteralImages",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "public static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, null, \"\\50\", \"\\51\", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null };"
            ],
            [
                "lexStateNames",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "public static final String[] lexStateNames = { \"DEFAULT\" };"
            ],
            [
                "jjtoToken",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "static final long[] jjtoToken = { 0xffffc01L };"
            ],
            [
                "jjtoSkip",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "static final long[] jjtoSkip = { 0x7eL };"
            ],
            [
                "XYZ_ATTR",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "public static final String XYZ_ATTR = \"xyz\";"
            ],
            [
                "WIDTH_ATTR",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "public static final String WIDTH_ATTR = \"ui.tikz.width\";"
            ],
            [
                "HEIGHT_ATTR",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "public static final String HEIGHT_ATTR = \"ui.tikz.height\";"
            ],
            [
                "DEFAULT_WIDTH",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "public static final double DEFAULT_WIDTH = 10;"
            ],
            [
                "DEFAULT_HEIGHT",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "public static final double DEFAULT_HEIGHT = 10;"
            ],
            [
                "DISPLAY_MIN_SIZE_IN_MM",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "public static final double DISPLAY_MIN_SIZE_IN_MM = 2;"
            ],
            [
                "DISPLAY_MAX_SIZE_IN_MM",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "public static final double DISPLAY_MAX_SIZE_IN_MM = 10;"
            ],
            [
                "jjbitVec0",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };"
            ],
            [
                "jjnextStates",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "static final int[] jjnextStates = { 21, 27, 8, 10, 11, 18, 19, 22, 23, 26, 1, 2, 13, 14 };"
            ],
            [
                "jjstrLiteralImages",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "public static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, null, \"\\133\", \"\\135\", \"\\173\", \"\\175\", \"\\72\", \"\\54\", \"\\75\", null, null, null, null, null, null, null, null, null, null, \"\\73\", null, null, null, null, null, null, null, null, null, \"\\137\" };"
            ],
            [
                "lexStateNames",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "public static final String[] lexStateNames = { \"DEFAULT\" };"
            ],
            [
                "jjtoToken",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "static final long[] jjtoToken = { 0x3ffffffc01L };"
            ],
            [
                "jjtoSkip",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "static final long[] jjtoSkip = { 0x7eL };"
            ],
            [
                "jjbitVec0",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };"
            ],
            [
                "jjnextStates",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "static final int[] jjnextStates = { 21, 22, 23, 17, 19, 2, 3, 5, 6, 8, 9 };"
            ],
            [
                "jjstrLiteralImages",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "public static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null };"
            ],
            [
                "lexStateNames",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "public static final String[] lexStateNames = { \"DEFAULT\" };"
            ],
            [
                "jjtoToken",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "static final long[] jjtoToken = { 0x3fffffffffffc9L };"
            ],
            [
                "jjtoSkip",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "static final long[] jjtoSkip = { 0x6L };"
            ],
            [
                "XMLNS",
                "org.graphstream.stream.file.gexf",
                "GEXF",
                "public static final String XMLNS = \"http://www.gexf.net/1.2draft\";"
            ],
            [
                "XMLNS_XSI",
                "org.graphstream.stream.file.gexf",
                "GEXF",
                "public static final String XMLNS_XSI = \"http://www.w3.org/2001/XMLSchema-instance\";"
            ],
            [
                "XMLNS_SL",
                "org.graphstream.stream.file.gexf",
                "GEXF",
                "public static final String XMLNS_SL = \"http://www.gexf.net/1.2draft http://www.gexf.net/1.2draft/gexf.xsd\";"
            ],
            [
                "XMLNS_VIZ",
                "org.graphstream.stream.file.gexf",
                "GEXF",
                "public static final String XMLNS_VIZ = \"http://www.gexf.net/1.2draft/viz\";"
            ],
            [
                "VERSION",
                "org.graphstream.stream.file.gexf",
                "GEXF",
                "public static final String VERSION = \"1.2\";"
            ],
            [
                "BUFFER_SIZE",
                "org.graphstream.stream.file.dgs",
                "DGSParser",
                "protected static final int BUFFER_SIZE = 4096;"
            ],
            [
                "ARRAY_OPEN",
                "org.graphstream.stream.file.dgs",
                "DGSParser",
                "public static final int ARRAY_OPEN = '{';"
            ],
            [
                "ARRAY_CLOSE",
                "org.graphstream.stream.file.dgs",
                "DGSParser",
                "public static final int ARRAY_CLOSE = '}';"
            ],
            [
                "MAP_OPEN",
                "org.graphstream.stream.file.dgs",
                "DGSParser",
                "public static final int MAP_OPEN = '[';"
            ],
            [
                "MAP_CLOSE",
                "org.graphstream.stream.file.dgs",
                "DGSParser",
                "public static final int MAP_CLOSE = ']';"
            ],
            [
                "gradientId",
                "org.graphstream.stream.file",
                "FileSinkSVG2",
                "static int gradientId = 0;"
            ],
            [
                "gradientId",
                "org.graphstream.stream.file",
                "SVGStyle",
                "static int gradientId = 0;"
            ],
            [
                "TIME_PREFIX",
                "org.graphstream.stream",
                "Timeline",
                "public static final String TIME_PREFIX = \"time\";"
            ],
            [
                "SYNC_DISABLE_KEY",
                "org.graphstream.stream.sync",
                "SinkTime",
                "public static final String SYNC_DISABLE_KEY = \"org.graphstream.stream.sync.disable\";"
            ],
            [
                "disableSync",
                "org.graphstream.stream.sync",
                "SinkTime",
                "protected static final boolean disableSync;"
            ],
            [
                "LIGHT_YELLOW",
                "org.graphstream.stream.netstream",
                "NetStreamReceiver",
                "protected static final String LIGHT_YELLOW = \"\u001b[33;1m\";"
            ],
            [
                "RESET",
                "org.graphstream.stream.netstream",
                "NetStreamReceiver",
                "protected static final String RESET = \"\u001b[0m\";"
            ],
            [
                "BUFFER_INITIAL_SIZE",
                "org.graphstream.stream.netstream",
                "NetStreamReceiver",
                "protected static final int BUFFER_INITIAL_SIZE = 8192;"
            ],
            [
                "BUFFER_INITIAL_SIZE",
                "org.graphstream.stream.netstream",
                "IncomingBuffer",
                "protected static final int BUFFER_INITIAL_SIZE = 8192;"
            ],
            [
                "EVENT_GETVERSION",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_GETVERSION = 0x00;"
            ],
            [
                "EVENT_START",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_START = 0x01;"
            ],
            [
                "EVENT_END",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_END = 0x02;"
            ],
            [
                "EVENT_ADD_NODE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_ADD_NODE = 0x10;"
            ],
            [
                "EVENT_DEL_NODE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_DEL_NODE = 0x11;"
            ],
            [
                "EVENT_ADD_EDGE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_ADD_EDGE = 0x12;"
            ],
            [
                "EVENT_DEL_EDGE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_DEL_EDGE = 0x13;"
            ],
            [
                "EVENT_STEP",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_STEP = 0x14;"
            ],
            [
                "EVENT_CLEARED",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_CLEARED = 0x15;"
            ],
            [
                "EVENT_ADD_GRAPH_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_ADD_GRAPH_ATTR = 0x16;"
            ],
            [
                "EVENT_CHG_GRAPH_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_CHG_GRAPH_ATTR = 0x17;"
            ],
            [
                "EVENT_DEL_GRAPH_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_DEL_GRAPH_ATTR = 0x18;"
            ],
            [
                "EVENT_ADD_NODE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_ADD_NODE_ATTR = 0x19;"
            ],
            [
                "EVENT_CHG_NODE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_CHG_NODE_ATTR = 0x1a;"
            ],
            [
                "EVENT_DEL_NODE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_DEL_NODE_ATTR = 0x1b;"
            ],
            [
                "EVENT_ADD_EDGE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_ADD_EDGE_ATTR = 0x1c;"
            ],
            [
                "EVENT_CHG_EDGE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_CHG_EDGE_ATTR = 0x1d;"
            ],
            [
                "EVENT_DEL_EDGE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_DEL_EDGE_ATTR = 0x1e;"
            ],
            [
                "TYPE_UNKNOWN",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_UNKNOWN = 0x00;"
            ],
            [
                "TYPE_BOOLEAN",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_BOOLEAN = 0x50;"
            ],
            [
                "TYPE_BOOLEAN_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_BOOLEAN_ARRAY = 0x51;"
            ],
            [
                "TYPE_BYTE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_BYTE = 0x52;"
            ],
            [
                "TYPE_BYTE_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_BYTE_ARRAY = 0x53;"
            ],
            [
                "TYPE_SHORT",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_SHORT = 0x54;"
            ],
            [
                "TYPE_SHORT_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_SHORT_ARRAY = 0x55;"
            ],
            [
                "TYPE_INT",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_INT = 0x56;"
            ],
            [
                "TYPE_INT_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_INT_ARRAY = 0x57;"
            ],
            [
                "TYPE_LONG",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_LONG = 0x58;"
            ],
            [
                "TYPE_LONG_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_LONG_ARRAY = 0x59;"
            ],
            [
                "TYPE_FLOAT",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_FLOAT = 0x5a;"
            ],
            [
                "TYPE_FLOAT_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_FLOAT_ARRAY = 0x5b;"
            ],
            [
                "TYPE_DOUBLE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_DOUBLE = 0x5c;"
            ],
            [
                "TYPE_DOUBLE_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_DOUBLE_ARRAY = 0x5d;"
            ],
            [
                "TYPE_STRING",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_STRING = 0x5e;"
            ],
            [
                "TYPE_RAW",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_RAW = 0x5f;"
            ],
            [
                "TYPE_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static byte TYPE_ARRAY = 0x60;"
            ],
            [
                "TYPE_NULL",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_NULL = 0x61;"
            ],
            [
                "COMMAND",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int COMMAND = 0x70;"
            ],
            [
                "NO_OPTIONS",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public final static int NO_OPTIONS = 0;"
            ],
            [
                "ENCODE",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public final static int ENCODE = 1;"
            ],
            [
                "DECODE",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public final static int DECODE = 0;"
            ],
            [
                "GZIP",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public final static int GZIP = 2;"
            ],
            [
                "DONT_GUNZIP",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public final static int DONT_GUNZIP = 4;"
            ],
            [
                "DO_BREAK_LINES",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public final static int DO_BREAK_LINES = 8;"
            ],
            [
                "URL_SAFE",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public final static int URL_SAFE = 16;"
            ],
            [
                "ORDERED",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public final static int ORDERED = 32;"
            ],
            [
                "INITIAL_EDGE_CAPACITY",
                "org.graphstream.graph.implementations",
                "AdjacencyListNode",
                "protected static final int INITIAL_EDGE_CAPACITY;"
            ],
            [
                "GROWTH_FACTOR",
                "org.graphstream.graph.implementations",
                "AdjacencyListNode",
                "protected static final double GROWTH_FACTOR = 1.1;"
            ],
            [
                "I_EDGE",
                "org.graphstream.graph.implementations",
                "AdjacencyListNode",
                "protected static final char I_EDGE = 0;"
            ],
            [
                "IO_EDGE",
                "org.graphstream.graph.implementations",
                "AdjacencyListNode",
                "protected static final char IO_EDGE = 1;"
            ],
            [
                "O_EDGE",
                "org.graphstream.graph.implementations",
                "AdjacencyListNode",
                "protected static final char O_EDGE = 2;"
            ],
            [
                "GROW_FACTOR",
                "org.graphstream.graph.implementations",
                "AdjacencyListGraph",
                "public static final double GROW_FACTOR = 1.1;"
            ],
            [
                "DEFAULT_NODE_CAPACITY",
                "org.graphstream.graph.implementations",
                "AdjacencyListGraph",
                "public static final int DEFAULT_NODE_CAPACITY = 128;"
            ],
            [
                "DEFAULT_EDGE_CAPACITY",
                "org.graphstream.graph.implementations",
                "AdjacencyListGraph",
                "public static final int DEFAULT_EDGE_CAPACITY = 1024;"
            ]
        ],
        "tokensMethodJavadocValues": [],
        "tokensMethodArguments": [
            [
                "url",
                "java.lang",
                "String"
            ]
        ],
        "tokensMethodVariablesNonPrivateNonStaticNonVoidMethods": [
            [
                "clone",
                "java.lang",
                "Object",
                "protected native Object clone() throws CloneNotSupportedException"
            ],
            [
                "getDefaultEdgeRule",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleSheet",
                "public Rule getDefaultEdgeRule()"
            ],
            [
                "getDefaultGraphRule",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleSheet",
                "public Rule getDefaultGraphRule()"
            ],
            [
                "toString",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleSheet",
                "public String toString()"
            ],
            [
                "getSpriteStyleNameSpace",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleSheet",
                "public NameSpace getSpriteStyleNameSpace()"
            ],
            [
                "getStyleGroupIdFor",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleSheet",
                "public String getStyleGroupIdFor(Element element, ArrayList<Rule> rules)"
            ],
            [
                "getDefaultSpriteStyle",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleSheet",
                "public Style getDefaultSpriteStyle()"
            ],
            [
                "getDefaultNodeStyle",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleSheet",
                "public Style getDefaultNodeStyle()"
            ],
            [
                "getDefaultSpriteRule",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleSheet",
                "public Rule getDefaultSpriteRule()"
            ],
            [
                "getGraphStyleNameSpace",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleSheet",
                "public NameSpace getGraphStyleNameSpace()"
            ],
            [
                "getRulesFor",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleSheet",
                "public ArrayList<Rule> getRulesFor(Element element)"
            ],
            [
                "getDefaultNodeRule",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleSheet",
                "public Rule getDefaultNodeRule()"
            ],
            [
                "getNodeStyleNameSpace",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleSheet",
                "public NameSpace getNodeStyleNameSpace()"
            ],
            [
                "equals",
                "java.lang",
                "Object",
                "public boolean equals(Object arg0)"
            ],
            [
                "getDefaultGraphStyle",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleSheet",
                "public Style getDefaultGraphStyle()"
            ],
            [
                "getDefaultEdgeStyle",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleSheet",
                "public Style getDefaultEdgeStyle()"
            ],
            [
                "getEdgeStyleNameSpace",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleSheet",
                "public NameSpace getEdgeStyleNameSpace()"
            ],
            [
                "hashCode",
                "java.lang",
                "Object",
                "public native int hashCode()"
            ],
            [
                "getClass",
                "java.lang",
                "Object",
                "public final native Class<? extends Object> getClass()"
            ],
            [
                "getBytes",
                "java.lang",
                "String",
                "public byte[] getBytes()"
            ],
            [
                "chars",
                "java.lang",
                "String",
                "public IntStream chars()"
            ],
            [
                "subSequence",
                "java.lang",
                "String",
                "public CharSequence subSequence(int arg0, int arg1)"
            ],
            [
                "getBytes",
                "java.lang",
                "String",
                "public byte[] getBytes(Charset arg0)"
            ],
            [
                "toLowerCase",
                "java.lang",
                "String",
                "public String toLowerCase(Locale arg0)"
            ],
            [
                "transform",
                "java.lang",
                "String",
                "public <R> R transform(Function<? super String, ? extends R> arg0)"
            ],
            [
                "hashCode",
                "java.lang",
                "String",
                "public int hashCode()"
            ],
            [
                "toUpperCase",
                "java.lang",
                "String",
                "public String toUpperCase()"
            ],
            [
                "translateEscapes",
                "java.lang",
                "String",
                "public String translateEscapes()"
            ],
            [
                "equals",
                "java.lang",
                "String",
                "public boolean equals(Object arg0)"
            ],
            [
                "codePointAt",
                "java.lang",
                "String",
                "public int codePointAt(int arg0)"
            ],
            [
                "toUpperCase",
                "java.lang",
                "String",
                "public String toUpperCase(Locale arg0)"
            ],
            [
                "contentEquals",
                "java.lang",
                "String",
                "public boolean contentEquals(StringBuffer arg0)"
            ],
            [
                "split",
                "java.lang",
                "String",
                "public String[] split(String arg0, int arg1)"
            ],
            [
                "value",
                "java.lang",
                "String",
                "byte[] value()"
            ],
            [
                "lastIndexOf",
                "java.lang",
                "String",
                "public int lastIndexOf(String arg0, int arg1)"
            ],
            [
                "stripLeading",
                "java.lang",
                "String",
                "public String stripLeading()"
            ],
            [
                "coder",
                "java.lang",
                "String",
                "byte coder()"
            ],
            [
                "regionMatches",
                "java.lang",
                "String",
                "public boolean regionMatches(boolean arg0, int arg1, String arg2, int arg3, int arg4)"
            ],
            [
                "isBlank",
                "java.lang",
                "String",
                "public boolean isBlank()"
            ],
            [
                "getBytes",
                "java.lang",
                "String",
                "public byte[] getBytes(String arg0) throws UnsupportedEncodingException"
            ],
            [
                "lastIndexOf",
                "java.lang",
                "String",
                "public int lastIndexOf(int arg0, int arg1)"
            ],
            [
                "compareTo",
                "java.lang",
                "String",
                "public int compareTo(String arg0)"
            ],
            [
                "concat",
                "java.lang",
                "String",
                "public String concat(String arg0)"
            ],
            [
                "toString",
                "java.lang",
                "String",
                "public String toString()"
            ],
            [
                "substring",
                "java.lang",
                "String",
                "public String substring(int arg0)"
            ],
            [
                "indent",
                "java.lang",
                "String",
                "public String indent(int arg0)"
            ],
            [
                "toCharArray",
                "java.lang",
                "String",
                "public char[] toCharArray()"
            ],
            [
                "stripIndent",
                "java.lang",
                "String",
                "public String stripIndent()"
            ],
            [
                "charAt",
                "java.lang",
                "String",
                "public char charAt(int arg0)"
            ],
            [
                "contains",
                "java.lang",
                "String",
                "public boolean contains(CharSequence arg0)"
            ],
            [
                "resolveConstantDesc",
                "java.lang",
                "String",
                "public String resolveConstantDesc(MethodHandles.Lookup arg0)"
            ],
            [
                "codePoints",
                "java.lang",
                "String",
                "public IntStream codePoints()"
            ],
            [
                "offsetByCodePoints",
                "java.lang",
                "String",
                "public int offsetByCodePoints(int arg0, int arg1)"
            ],
            [
                "split",
                "java.lang",
                "String",
                "public String[] split(String arg0)"
            ],
            [
                "lastIndexOf",
                "java.lang",
                "String",
                "public int lastIndexOf(int arg0)"
            ],
            [
                "replaceAll",
                "java.lang",
                "String",
                "public String replaceAll(String arg0, String arg1)"
            ],
            [
                "toLowerCase",
                "java.lang",
                "String",
                "public String toLowerCase()"
            ],
            [
                "length",
                "java.lang",
                "String",
                "public int length()"
            ],
            [
                "replaceFirst",
                "java.lang",
                "String",
                "public String replaceFirst(String arg0, String arg1)"
            ],
            [
                "substring",
                "java.lang",
                "String",
                "public String substring(int arg0, int arg1)"
            ],
            [
                "codePointCount",
                "java.lang",
                "String",
                "public int codePointCount(int arg0, int arg1)"
            ],
            [
                "startsWith",
                "java.lang",
                "String",
                "public boolean startsWith(String arg0)"
            ],
            [
                "equalsIgnoreCase",
                "java.lang",
                "String",
                "public boolean equalsIgnoreCase(String arg0)"
            ],
            [
                "startsWith",
                "java.lang",
                "String",
                "public boolean startsWith(String arg0, int arg1)"
            ],
            [
                "isEmpty",
                "java.lang",
                "String",
                "public boolean isEmpty()"
            ],
            [
                "contentEquals",
                "java.lang",
                "String",
                "public boolean contentEquals(CharSequence arg0)"
            ],
            [
                "stripTrailing",
                "java.lang",
                "String",
                "public String stripTrailing()"
            ],
            [
                "matches",
                "java.lang",
                "String",
                "public boolean matches(String arg0)"
            ],
            [
                "describeConstable",
                "java.lang",
                "String",
                "public Optional<String> describeConstable()"
            ],
            [
                "intern",
                "java.lang",
                "String",
                "public native String intern()"
            ],
            [
                "codePointBefore",
                "java.lang",
                "String",
                "public int codePointBefore(int arg0)"
            ],
            [
                "indexOf",
                "java.lang",
                "String",
                "public int indexOf(int arg0)"
            ],
            [
                "replace",
                "java.lang",
                "String",
                "public String replace(char arg0, char arg1)"
            ],
            [
                "indexOf",
                "java.lang",
                "String",
                "public int indexOf(String arg0, int arg1)"
            ],
            [
                "trim",
                "java.lang",
                "String",
                "public String trim()"
            ],
            [
                "endsWith",
                "java.lang",
                "String",
                "public boolean endsWith(String arg0)"
            ],
            [
                "formatted",
                "java.lang",
                "String",
                "public String formatted(Object[] arg0)"
            ],
            [
                "compareToIgnoreCase",
                "java.lang",
                "String",
                "public int compareToIgnoreCase(String arg0)"
            ],
            [
                "regionMatches",
                "java.lang",
                "String",
                "public boolean regionMatches(int arg0, String arg1, int arg2, int arg3)"
            ],
            [
                "strip",
                "java.lang",
                "String",
                "public String strip()"
            ],
            [
                "isLatin1",
                "java.lang",
                "String",
                "boolean isLatin1()"
            ],
            [
                "indexOf",
                "java.lang",
                "String",
                "public int indexOf(int arg0, int arg1)"
            ],
            [
                "indexOf",
                "java.lang",
                "String",
                "public int indexOf(String arg0)"
            ],
            [
                "replace",
                "java.lang",
                "String",
                "public String replace(CharSequence arg0, CharSequence arg1)"
            ],
            [
                "lastIndexOf",
                "java.lang",
                "String",
                "public int lastIndexOf(String arg0)"
            ],
            [
                "repeat",
                "java.lang",
                "String",
                "public String repeat(int arg0)"
            ],
            [
                "lines",
                "java.lang",
                "String",
                "public Stream<String> lines()"
            ],
            [
                "toString",
                "java.lang",
                "Object",
                "public String toString()"
            ],
            [
                "compareTo",
                "java.lang",
                "Comparable",
                "public abstract int compareTo(T arg0)"
            ],
            [
                "charAt",
                "java.lang",
                "CharSequence",
                "public abstract char charAt(int arg0)"
            ],
            [
                "chars",
                "java.lang",
                "CharSequence",
                "public default IntStream chars()"
            ],
            [
                "codePoints",
                "java.lang",
                "CharSequence",
                "public default IntStream codePoints()"
            ],
            [
                "subSequence",
                "java.lang",
                "CharSequence",
                "public abstract CharSequence subSequence(int arg0, int arg1)"
            ],
            [
                "length",
                "java.lang",
                "CharSequence",
                "public abstract int length()"
            ],
            [
                "toString",
                "java.lang",
                "CharSequence",
                "public abstract String toString()"
            ],
            [
                "isEmpty",
                "java.lang",
                "CharSequence",
                "public default boolean isEmpty()"
            ],
            [
                "describeConstable",
                "java.lang.constant",
                "Constable",
                "public abstract Optional<? extends ConstantDesc> describeConstable()"
            ],
            [
                "resolveConstantDesc",
                "java.lang.constant",
                "ConstantDesc",
                "public abstract Object resolveConstantDesc(MethodHandles.Lookup arg0) throws ReflectiveOperationException"
            ]
        ],
        "tokensMethodVariablesNonPrivateNonStaticAttributes": [
            [
                "defaultRule",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleSheet",
                "public Rule defaultRule;"
            ],
            [
                "graphRules",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleSheet",
                "public NameSpace graphRules = new NameSpace(Selector.Type.GRAPH);"
            ],
            [
                "nodeRules",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleSheet",
                "public NameSpace nodeRules = new NameSpace(Selector.Type.NODE);"
            ],
            [
                "edgeRules",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleSheet",
                "public NameSpace edgeRules = new NameSpace(Selector.Type.EDGE);"
            ],
            [
                "spriteRules",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleSheet",
                "public NameSpace spriteRules = new NameSpace(Selector.Type.SPRITE);"
            ],
            [
                "listeners",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleSheet",
                "public ArrayList<StyleSheetListener> listeners = new ArrayList<StyleSheetListener>();"
            ]
        ],
        "tokensOracleVariablesNonPrivateNonStaticNonVoidMethods": [],
        "tokensOracleVariablesNonPrivateNonStaticAttributes": []
    },
    {
        "id": 3074,
        "oracle": ";",
        "oracleType": "EXCEPT_POST",
        "projectName": "gs-core-1.3",
        "packageName": "org.graphstream.ui.graphicGraph.stylesheet",
        "className": "StyleSheet",
        "javadocTag": "@throws IOException For any kind of I/O error or parse error.",
        "methodJavadoc": "    /**\n\t * Parse a style sheet from a string. The style sheet will complete the\n\t * previously parsed style sheets.\n\t * \n\t * @param styleSheet\n\t *            The string containing the whole style sheet.\n\t * @throws IOException\n\t *             For any kind of I/O error or parse error.\n\t */",
        "methodSourceCode": "public void parseFromString(String styleSheet) throws IOException{\n    parse(new StringReader(styleSheet));\n}",
        "classJavadoc": "/**\n * Implementation of the style sheets that can be stored in the graphic graph.\n * \n * @author Antoine Dutot\n */",
        "classSourceCode": "/*\n * Copyright 2006 - 2015\n *     Stefan Balev     <stefan.balev@graphstream-project.org>\n *     Julien Baudry    <julien.baudry@graphstream-project.org>\n *     Antoine Dutot    <antoine.dutot@graphstream-project.org>\n *     Yoann Pign\u00e9      <yoann.pigne@graphstream-project.org>\n *     Guilhelm Savin   <guilhelm.savin@graphstream-project.org>\n * \n * This file is part of GraphStream <http://graphstream-project.org>.\n * \n * GraphStream is a library whose purpose is to handle static or dynamic\n * graph, create them from scratch, file or any source and display them.\n * \n * This program is free software distributed under the terms of two licenses, the\n * CeCILL-C license that fits European law, and the GNU Lesser General Public\n * License. You can  use, modify and/ or redistribute the software under the terms\n * of the CeCILL-C license as circulated by CEA, CNRS and INRIA at the following\n * URL <http://www.cecill.info> or under the terms of the GNU LGPL as published by\n * the Free Software Foundation, either version 3 of the License, or (at your\n * option) any later version.\n * \n * This program is distributed in the hope that it will be useful, but WITHOUT ANY\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A\n * PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more details.\n * \n * You should have received a copy of the GNU Lesser General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n * \n * The fact that you are presently reading this means that you have had\n * knowledge of the CeCILL-C and LGPL licenses and that you accept their terms.\n */\npackage org.graphstream.ui.graphicGraph.stylesheet;\n\nimport java.awt.Color;\nimport java.io.BufferedInputStream;\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.io.Reader;\nimport java.io.StringReader;\nimport java.net.URL;\nimport java.util.ArrayList;\nimport java.util.HashMap;\n\nimport org.graphstream.graph.Edge;\nimport org.graphstream.graph.Element;\nimport org.graphstream.graph.Graph;\nimport org.graphstream.graph.Node;\nimport org.graphstream.ui.graphicGraph.GraphicSprite;\nimport org.graphstream.ui.graphicGraph.stylesheet.StyleConstants.StrokeMode;\nimport org.graphstream.ui.graphicGraph.stylesheet.parser.StyleSheetParser;\nimport org.graphstream.util.parser.ParseException;\n\n/**\n * Implementation of the style sheets that can be stored in the graphic graph.\n * \n * @author Antoine Dutot\n */\npublic class StyleSheet {\n\t// Attributes\n\n\t/**\n\t * The top-level default rule.\n\t */\n\tpublic Rule defaultRule;\n\n\t/**\n\t * The default, id and class rules for graphs.\n\t */\n\tpublic NameSpace graphRules = new NameSpace(Selector.Type.GRAPH);\n\n\t/**\n\t * The default, id and class rules for nodes.\n\t */\n\tpublic NameSpace nodeRules = new NameSpace(Selector.Type.NODE);\n\n\t/**\n\t * The default, id and class rules for edges.\n\t */\n\tpublic NameSpace edgeRules = new NameSpace(Selector.Type.EDGE);\n\n\t/**\n\t * The default, id and class rules for sprites.\n\t */\n\tpublic NameSpace spriteRules = new NameSpace(Selector.Type.SPRITE);\n\n\t/**\n\t * Set of listeners.\n\t */\n\tpublic ArrayList<StyleSheetListener> listeners = new ArrayList<StyleSheetListener>();\n\n\t// Constructors\n\n\t/**\n\t * New style sheet initialised to defaults.\n\t */\n\tpublic StyleSheet() {\n\t\tinitRules();\n\t}\n\n\t// Access\n\n\t/**\n\t * The default rule for graphs.\n\t * \n\t * @return A rule.\n\t */\n\tpublic Rule getDefaultGraphRule() {\n\t\treturn graphRules.defaultRule;\n\t}\n\n\t/**\n\t * The default rule for nodes.\n\t * \n\t * @return A rule.\n\t */\n\tpublic Rule getDefaultNodeRule() {\n\t\treturn nodeRules.defaultRule;\n\t}\n\n\t/**\n\t * The default rule for edges.\n\t * \n\t * @return A rule.\n\t */\n\tpublic Rule getDefaultEdgeRule() {\n\t\treturn edgeRules.defaultRule;\n\t}\n\n\t/**\n\t * The default rule for sprites.\n\t * \n\t * @return A rule.\n\t */\n\tpublic Rule getDefaultSpriteRule() {\n\t\treturn spriteRules.defaultRule;\n\t}\n\n\t/**\n\t * The default style for graphs.\n\t * \n\t * @return A style.\n\t */\n\tpublic Style getDefaultGraphStyle() {\n\t\treturn getDefaultGraphRule().getStyle();\n\t}\n\n\t/**\n\t * The default style for nodes.\n\t * \n\t * @return A style.\n\t */\n\tpublic Style getDefaultNodeStyle() {\n\t\treturn getDefaultNodeRule().getStyle();\n\t}\n\n\t/**\n\t * The default style for edges.\n\t * \n\t * @return A style.\n\t */\n\tpublic Style getDefaultEdgeStyle() {\n\t\treturn getDefaultEdgeRule().getStyle();\n\t}\n\n\t/**\n\t * The default style for sprites.\n\t * \n\t * @return A style.\n\t */\n\tpublic Style getDefaultSpriteStyle() {\n\t\treturn getDefaultSpriteRule().getStyle();\n\t}\n\n\t/**\n\t * All the rules (default, specific and class) that apply to graphs.\n\t * \n\t * @return The set of rules for graphs.\n\t */\n\tpublic NameSpace getGraphStyleNameSpace() {\n\t\treturn graphRules;\n\t}\n\n\t/**\n\t * All the rules (default, specific and class) that apply to nodes.\n\t * \n\t * @return The set of rules for nodes.\n\t */\n\tpublic NameSpace getNodeStyleNameSpace() {\n\t\treturn nodeRules;\n\t}\n\n\t/**\n\t * All the rules (default, specific and class) that apply to edges.\n\t * \n\t * @return The set of rules for edges.\n\t */\n\tpublic NameSpace getEdgeStyleNameSpace() {\n\t\treturn edgeRules;\n\t}\n\n\t/**\n\t * All the rules (default, specific and class) that apply to sprites.\n\t * \n\t * @return The set of rules for sprites.\n\t */\n\tpublic NameSpace getSpriteStyleNameSpace() {\n\t\treturn spriteRules;\n\t}\n\n\t/**\n\t * Get the rules that match a given element.\n\t * \n\t * First a rule for the identifier of the element is looked for. It is\n\t * looked for in its name space (nodes for Node element, etc.) If it is not\n\t * found, the default rule for this kind of element is used. This rule is\n\t * pushed at start of the returned array of rules.\n\t * \n\t * After a rule for the element is found, then the various classes the\n\t * element pertains to are looked at and each class rule found is added in\n\t * order in the returned array.\n\t * \n\t * @param element\n\t *            The element a rules are searched for.\n\t * @return A set of rules matching the element, with the main rule at index\n\t *         0.\n\t */\n\tpublic ArrayList<Rule> getRulesFor(Element element) {\n\t\tArrayList<Rule> rules = null;\n\n\t\tif (element instanceof Graph) {\n\t\t\trules = graphRules.getRulesFor(element);\n\t\t} else if (element instanceof Node) {\n\t\t\trules = nodeRules.getRulesFor(element);\n\t\t} else if (element instanceof Edge) {\n\t\t\trules = edgeRules.getRulesFor(element);\n\t\t} else if (element instanceof GraphicSprite) {\n\t\t\trules = spriteRules.getRulesFor(element);\n\t\t} else {\n\t\t\trules = new ArrayList<Rule>();\n\t\t\trules.add(defaultRule);\n\t\t}\n\n\t\treturn rules;\n\t}\n\n\t/**\n\t * Compute the name of the style group and element will pertain to knowing\n\t * its styling rules.\n\t * \n\t * @param element\n\t *            The element.\n\t * @param rules\n\t *            The styling rules.\n\t * @return The unique identifier of the style group for the element.\n\t * @see #getRulesFor(Element)\n\t */\n\tpublic String getStyleGroupIdFor(Element element, ArrayList<Rule> rules) {\n\t\tStringBuilder builder = new StringBuilder();\n\n\t\tif (element instanceof Graph) {\n\t\t\tbuilder.append(\"g\");\n\t\t} else if (element instanceof Node) {\n\t\t\tbuilder.append(\"n\");\n\t\t} else if (element instanceof Edge) {\n\t\t\tbuilder.append(\"e\");\n\t\t} else if (element instanceof GraphicSprite) {\n\t\t\tbuilder.append(\"s\");\n\t\t} else {\n\t\t\tthrow new RuntimeException(\"What ?\");\n\t\t}\n\n\t\tif (rules.get(0).selector.getId() != null) {\n\t\t\tbuilder.append('_');\n\t\t\tbuilder.append(rules.get(0).selector.getId());\n\t\t}\n\n\t\tint n = rules.size();\n\n\t\tif (n > 1) {\n\t\t\tbuilder.append('(');\n\t\t\tbuilder.append(rules.get(1).selector.getClazz());\n\t\t\tfor (int i = 2; i < n; i++) {\n\t\t\t\tbuilder.append(',');\n\t\t\t\tbuilder.append(rules.get(i).selector.getClazz());\n\t\t\t}\n\t\t\tbuilder.append(')');\n\t\t}\n\n\t\treturn builder.toString();\n\t}\n\n\t// Commands\n\n\t/**\n\t * Create the default rules. This method is the place to set defaults for\n\t * specific element types. This is here that the edge width is reset to one,\n\t * since the default width is larger. The default z index that is different\n\t * for every class of element is also set here.\n\t */\n\tprotected void initRules() {\n\t\tdefaultRule = new Rule(new Selector(Selector.Type.ANY), null);\n\n\t\tdefaultRule.getStyle().setDefaults();\n\n\t\tgraphRules.defaultRule = new Rule(new Selector(Selector.Type.GRAPH),\n\t\t\t\tdefaultRule);\n\t\tnodeRules.defaultRule = new Rule(new Selector(Selector.Type.NODE),\n\t\t\t\tdefaultRule);\n\t\tedgeRules.defaultRule = new Rule(new Selector(Selector.Type.EDGE),\n\t\t\t\tdefaultRule);\n\t\tspriteRules.defaultRule = new Rule(new Selector(Selector.Type.SPRITE),\n\t\t\t\tdefaultRule);\n\n\t\tgraphRules.defaultRule.getStyle().setValue(\"padding\",\n\t\t\t\tnew Values(Style.Units.PX, 30));\n\t\tedgeRules.defaultRule.getStyle().setValue(\"shape\",\n\t\t\t\tStyleConstants.Shape.LINE);\n\t\tedgeRules.defaultRule.getStyle().setValue(\"size\",\n\t\t\t\tnew Values(Style.Units.PX, 1));\n\t\tedgeRules.defaultRule.getStyle().setValue(\"z-index\", new Integer(1));\n\t\tnodeRules.defaultRule.getStyle().setValue(\"z-index\", new Integer(2));\n\t\tspriteRules.defaultRule.getStyle().setValue(\"z-index\", new Integer(3));\n\n\t\tColors colors = new Colors();\n\t\tcolors.add(Color.WHITE);\n\n\t\tgraphRules.defaultRule.getStyle().setValue(\"fill-color\", colors);\n\t\tgraphRules.defaultRule.getStyle().setValue(\"stroke-mode\",\n\t\t\t\tStrokeMode.NONE);\n\n\t\tfor (StyleSheetListener listener : listeners) {\n\t\t\tlistener.styleAdded(defaultRule, defaultRule);\n\t\t\tlistener.styleAdded(graphRules.defaultRule, graphRules.defaultRule);\n\t\t\tlistener.styleAdded(nodeRules.defaultRule, nodeRules.defaultRule);\n\t\t\tlistener.styleAdded(edgeRules.defaultRule, edgeRules.defaultRule);\n\t\t\tlistener.styleAdded(spriteRules.defaultRule,\n\t\t\t\t\tspriteRules.defaultRule);\n\t\t}\n\n\t\t// for( StyleSheetListener listener: listeners )\n\t\t// listener.styleAdded( defaultRule, defaultRule );\n\t\t// for( StyleSheetListener listener: listeners )\n\t\t// listener.styleAdded( graphRules.defaultRule, graphRules.defaultRule\n\t\t// );\n\t\t// for( StyleSheetListener listener: listeners )\n\t\t// listener.styleAdded( nodeRules.defaultRule, nodeRules.defaultRule );\n\t\t// for( StyleSheetListener listener: listeners )\n\t\t// listener.styleAdded( edgeRules.defaultRule, edgeRules.defaultRule );\n\t\t// for( StyleSheetListener listener: listeners )\n\t\t// listener.styleAdded( spriteRules.defaultRule, spriteRules.defaultRule\n\t\t// );\n\t}\n\n\t/**\n\t * Add a listener for style events. You never receive events for default\n\t * rules and styles. You receive events only for the rules and styles that\n\t * are added after this listener is registered.\n\t * \n\t * @param listener\n\t *            The new listener.\n\t */\n\tpublic void addListener(StyleSheetListener listener) {\n\t\tlisteners.add(listener);\n\t}\n\n\t/**\n\t * Remove a previously registered listener.\n\t * \n\t * @param listener\n\t *            The listener to remove.\n\t */\n\tpublic void removeListener(StyleSheetListener listener) {\n\t\tint index = listeners.indexOf(listener);\n\n\t\tif (index >= 0)\n\t\t\tlisteners.remove(index);\n\t}\n\n\t/**\n\t * Clear all specific rules and initialise the default rules. The listeners\n\t * are not changed.\n\t */\n\tpublic void clear() {\n\t\tgraphRules.clear();\n\t\tnodeRules.clear();\n\t\tedgeRules.clear();\n\t\tspriteRules.clear();\n\t\tinitRules();\n\n\t\tfor (StyleSheetListener listener : listeners)\n\t\t\tlistener.styleSheetCleared();\n\t}\n\n\t/**\n\t * Parse a style sheet from a file. The style sheet will complete the\n\t * previously parsed style sheets.\n\t * \n\t * @param fileName\n\t *            Name of the file containing the style sheet.\n\t * @throws IOException\n\t *             For any kind of I/O error or parse error.\n\t */\n\tpublic void parseFromFile(String fileName) throws IOException {\n\t\tparse(new InputStreamReader(new BufferedInputStream(\n\t\t\t\tnew FileInputStream(fileName))));\n\t}\n\n\t/**\n\t * Parse a style sheet from an URL. The style sheet will complete the\n\t * previously parsed style sheets. First, this method will search the URL as\n\t * SystemRessource, then as a file and if there is no match, just try to\n\t * create an URL object giving the URL as constructor's parameter.\n\t * \n\t * @param url\n\t *            Name of the file containing the style sheet.\n\t * @throws IOException\n\t *             For any kind of I/O error or parse error.\n\t */\n\tpublic void parseFromURL(String url) throws IOException {\n\t\tURL u = StyleSheet.class.getClassLoader().getResource(url);\n\t\tif (u == null) {\n\t\t\tFile f = new File(url);\n\n\t\t\tif (f.exists())\n\t\t\t\tu = f.toURI().toURL();\n\t\t\telse\n\t\t\t\tu = new URL(url);\n\t\t}\n\n\t\tparse(new InputStreamReader(u.openStream()));\n\t}\n\n\t/**\n\t * Parse a style sheet from a string. The style sheet will complete the\n\t * previously parsed style sheets.\n\t * \n\t * @param styleSheet\n\t *            The string containing the whole style sheet.\n\t * @throws IOException\n\t *             For any kind of I/O error or parse error.\n\t */\n\tpublic void parseFromString(String styleSheet) throws IOException {\n\t\tparse(new StringReader(styleSheet));\n\t}\n\n\t/**\n\t * Parse only one style, create a rule with the given selector, and add this\n\t * rule.\n\t * \n\t * @param select\n\t *            The elements for which this style must apply.\n\t * @param styleString\n\t *            The style string to parse.\n\t */\n\tpublic void parseStyleFromString(Selector select, String styleString)\n\t\t\tthrows IOException {\n\t\tStyleSheetParser parser = new StyleSheetParser(this, new StringReader(\n\t\t\t\tstyleString));\n\n\t\tStyle style = new Style();\n\n\t\ttry {\n\t\t\tparser.stylesStart(style);\n\t\t} catch (ParseException e) {\n\t\t\tthrow new IOException(e.getMessage());\n\t\t}\n\n\t\tRule rule = new Rule(select);\n\n\t\trule.setStyle(style);\n\t\taddRule(rule);\n\t}\n\n\t/**\n\t * Load a style sheet from an attribute value, the value can either be the\n\t * contents of the whole style sheet, or begin by \"url\". If it starts with\n\t * \"url\", it must then contain between parenthesis the string of the URL to\n\t * load. For example:\n\t * \n\t * <pre>\n\t * \t\turl('file:///some/path/on/the/file/system')\n\t * </pre>\n\t * \n\t * Or\n\t * \n\t * <pre>\n\t * \t\turl('http://some/web/url')\n\t * </pre>\n\t * \n\t * The loaded style sheet will be merged with the styles already present in\n\t * the style sheet.\n\t * \n\t * @param styleSheetValue\n\t *            The style sheet name of content.\n\t * @throws IOException\n\t *             If the loading or parsing of the style sheet failed.\n\t */\n\tpublic void load(String styleSheetValue) throws IOException {\n\t\tif (styleSheetValue.startsWith(\"url\")) {\n\t\t\t// Extract the part between '(' and ')'.\n\n\t\t\tint beg = styleSheetValue.indexOf('(');\n\t\t\tint end = styleSheetValue.lastIndexOf(')');\n\n\t\t\tif (beg >= 0 && end > beg)\n\t\t\t\tstyleSheetValue = styleSheetValue.substring(beg + 1, end);\n\n\t\t\tstyleSheetValue = styleSheetValue.trim();\n\n\t\t\t// Remove the quotes (') or (\").\n\n\t\t\tif (styleSheetValue.startsWith(\"'\")) {\n\t\t\t\tbeg = 0;\n\t\t\t\tend = styleSheetValue.lastIndexOf('\\'');\n\n\t\t\t\tif (beg >= 0 && end > beg)\n\t\t\t\t\tstyleSheetValue = styleSheetValue.substring(beg + 1, end);\n\t\t\t}\n\n\t\t\tstyleSheetValue = styleSheetValue.trim();\n\n\t\t\tif (styleSheetValue.startsWith(\"\\\"\")) {\n\t\t\t\tbeg = 0;\n\t\t\t\tend = styleSheetValue.lastIndexOf('\"');\n\n\t\t\t\tif (beg >= 0 && end > beg)\n\t\t\t\t\tstyleSheetValue = styleSheetValue.substring(beg + 1, end);\n\t\t\t}\n\n\t\t\t// That's it.\n\n\t\t\tparseFromURL(styleSheetValue);\n\t\t} else // Parse from string, the value is considered to be the style\n\t\t\t\t// sheet contents.\n\t\t{\n\t\t\tparseFromString(styleSheetValue);\n\t\t}\n\t}\n\n\t/**\n\t * Parse the style sheet from the given reader.\n\t * \n\t * @param reader\n\t *            The reader pointing at the style sheet.\n\t * @throws IOException\n\t *             For any kind of I/O error or parse error.\n\t */\n\tprotected void parse(Reader reader) throws IOException {\n\t\tStyleSheetParser parser = new StyleSheetParser(this, reader);\n\n\t\ttry {\n\t\t\tparser.start();\n\t\t} catch (ParseException e) {\n\t\t\tthrow new IOException(e.getMessage());\n\t\t}\n\t}\n\n\t/**\n\t * Add a new rule with its style. If the rule selector is just GRAPH, NODE,\n\t * EDGE or SPRITE, the default corresponding rules make a copy (or\n\t * augmentation) of its style. Else if an id or class is specified the rules\n\t * are added (or changed/augmented if the id or class was already set) and\n\t * their parent is set to the default graph, node, edge or sprite rules. If\n\t * this is an event rule (or meta-class rule), its sibling rule (the same\n\t * rule without the meta-class) is searched and created if not found and the\n\t * event rule is added as an alternative to it.\n\t * \n\t * @param newRule\n\t *            The new rule.\n\t */\n\tpublic void addRule(Rule newRule) {\n\t\tRule oldRule = null;\n\n\t\tswitch (newRule.selector.getType()) {\n\t\tcase ANY:\n\t\t\tthrow new RuntimeException(\n\t\t\t\t\t\"The ANY selector should never be used, it is created automatically.\");\n\t\tcase GRAPH:\n\t\t\toldRule = graphRules.addRule(newRule);\n\t\t\tbreak;\n\t\tcase NODE:\n\t\t\toldRule = nodeRules.addRule(newRule);\n\t\t\tbreak;\n\t\tcase EDGE:\n\t\t\toldRule = edgeRules.addRule(newRule);\n\t\t\tbreak;\n\t\tcase SPRITE:\n\t\t\toldRule = spriteRules.addRule(newRule);\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tthrow new RuntimeException(\"Ho ho ho ?\");\n\t\t}\n\n\t\tfor (StyleSheetListener listener : listeners)\n\t\t\tlistener.styleAdded(oldRule, newRule);\n\t}\n\n\t@Override\n\tpublic String toString() {\n\t\tStringBuilder builder = new StringBuilder();\n\n\t\tbuilder.append(\"StyleSheet : {\\n\");\n\t\tbuilder.append(\"  default styles:\\n\");\n\t\tbuilder.append(defaultRule.toString(1));\n\t\tbuilder.append(graphRules.toString(1));\n\t\tbuilder.append(nodeRules.toString(1));\n\t\tbuilder.append(edgeRules.toString(1));\n\t\tbuilder.append(spriteRules.toString(1));\n\n\t\treturn builder.toString();\n\t}\n\n\t// Nested classes\n\n\t/**\n\t * A name space is a tuple (default rule, id rule set, class rule set).\n\t * \n\t * <p>\n\t * The name space defines a default rule for a kind of elements, a set of\n\t * rules for this kind of elements with a given identifier, and a set or\n\t * rules for this kind of elements with a given class.\n\t * </p>\n\t */\n\tpublic class NameSpace {\n\t\t// Attribute\n\n\t\t/**\n\t\t * The kind of elements in this name space.\n\t\t */\n\t\tpublic Selector.Type type;\n\n\t\t/**\n\t\t * The default rule for this kind of elements.\n\t\t */\n\t\tpublic Rule defaultRule;\n\n\t\t/**\n\t\t * The set of rules for this kind of elements with a given identifier.\n\t\t */\n\t\tpublic HashMap<String, Rule> byId = new HashMap<String, Rule>();\n\n\t\t/**\n\t\t * The set of rules for this kind of elements with a given class.\n\t\t */\n\t\tpublic HashMap<String, Rule> byClass = new HashMap<String, Rule>();\n\n\t\t// Constructor\n\n\t\tpublic NameSpace(Selector.Type type) {\n\t\t\tthis.type = type;\n\t\t}\n\n\t\t// Access\n\n\t\t/**\n\t\t * The kind of elements this name space applies rules to.\n\t\t * \n\t\t * @return A type of element (node, edge, sprite, graph).\n\t\t */\n\t\tpublic Selector.Type getGraphElementType() {\n\t\t\treturn type;\n\t\t}\n\n\t\t/**\n\t\t * Number of specific (id) rules.\n\t\t * \n\t\t * @return The number of rules that apply to elements by their\n\t\t *         identifiers.\n\t\t */\n\t\tpublic int getIdRulesCount() {\n\t\t\treturn byId.size();\n\t\t}\n\n\t\t/**\n\t\t * Number of specific (class) rules.\n\t\t * \n\t\t * @return The number of rules that apply to elements by their classes.\n\t\t */\n\t\tpublic int getClassRulesCount() {\n\t\t\treturn byClass.size();\n\t\t}\n\n\t\t/**\n\t\t * Get the rules that match a given element. The rules are returned in a\n\t\t * given order. The array always contain the \"main\" rule that matches\n\t\t * the element. This rule is either a default rule for the kind of\n\t\t * element given or the rule that matches its identifier if there is\n\t\t * one. Then class rules the element has can be appended to this array\n\t\t * in order.\n\t\t * \n\t\t * @return an array of rules that match the element, with the main rule\n\t\t *         at index 0.\n\t\t */\n\t\tprotected ArrayList<Rule> getRulesFor(Element element) {\n\t\t\tRule rule = byId.get(element.getId());\n\t\t\tArrayList<Rule> rules = new ArrayList<Rule>();\n\n\t\t\tif (rule != null)\n\t\t\t\trules.add(rule);\n\t\t\telse\n\t\t\t\trules.add(defaultRule);\n\n\t\t\tgetClassRules(element, rules);\n\n\t\t\tif (rules.isEmpty())\n\t\t\t\trules.add(defaultRule);\n\n\t\t\treturn rules;\n\t\t}\n\n\t\t/**\n\t\t * Search if the given element has classes attributes and fill the given\n\t\t * array with the set of rules that match these classes.\n\t\t * \n\t\t * @param element\n\t\t *            The element for which classes must be found.\n\t\t * @param rules\n\t\t *            The rule array to fill.\n\t\t */\n\t\tprotected void getClassRules(Element element, ArrayList<Rule> rules) {\n\t\t\tObject o = element.getAttribute(\"ui.class\");\n\n\t\t\tif (o != null) {\n\t\t\t\tif (o instanceof Object[]) {\n\t\t\t\t\tfor (Object s : (Object[]) o) {\n\t\t\t\t\t\tif (s instanceof CharSequence) {\n\t\t\t\t\t\t\tRule rule = byClass.get((CharSequence) s);\n\n\t\t\t\t\t\t\tif (rule != null)\n\t\t\t\t\t\t\t\trules.add(rule);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else if (o instanceof CharSequence) {\n\t\t\t\t\tString classList = ((CharSequence) o).toString().trim();\n\t\t\t\t\tString[] classes = classList.split(\"\\\\s*,\\\\s*\");\n\n\t\t\t\t\tfor (String c : classes) {\n\t\t\t\t\t\tRule rule = byClass.get(c);\n\n\t\t\t\t\t\tif (rule != null)\n\t\t\t\t\t\t\trules.add(rule);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tthrow new RuntimeException(\n\t\t\t\t\t\t\t\"Oups ! class attribute is of type \"\n\t\t\t\t\t\t\t\t\t+ o.getClass().getName());\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Command\n\n\t\t/**\n\t\t * Remove all styles.\n\t\t */\n\t\tprotected void clear() {\n\t\t\tdefaultRule = null;\n\t\t\tbyId.clear();\n\t\t\tbyClass.clear();\n\t\t}\n\n\t\t/**\n\t\t * Add a new rule.\n\t\t * \n\t\t * <p>\n\t\t * Several cases can occur :\n\t\t * </p>\n\t\t * \n\t\t * <ul>\n\t\t * <li>The rule to add has an ID or class and the rule does not yet\n\t\t * exists and is not an event rule : add it directly.</li>\n\t\t * <li>If the rule has an ID or class but the rule already exists,\n\t\t * augment to already existing rule.</li>\n\t\t * <li>If the rule has no ID or class and is not an event, augment the\n\t\t * default style.</li>\n\t\t * <li>If the rule is an event, the corresponding normal rule is\n\t\t * searched, if it does not exists, it is created then or else, the\n\t\t * event is added to the found rule.</li>\n\t\t * </ul>\n\t\t * \n\t\t * @param newRule\n\t\t *            The rule to add or copy.\n\t\t * @return It the rule added augments an existing rule, this existing\n\t\t *         rule is returned, else null is returned.\n\t\t */\n\t\tprotected Rule addRule(Rule newRule) {\n\t\t\tRule oldRule = null;\n\n\t\t\tif (newRule.selector.getPseudoClass() != null) {\n\t\t\t\toldRule = addEventRule(newRule);\n\t\t\t} else if (newRule.selector.getId() != null) {\n\t\t\t\toldRule = byId.get(newRule.selector.getId());\n\n\t\t\t\tif (oldRule != null) {\n\t\t\t\t\toldRule.getStyle().augment(newRule.getStyle());\n\t\t\t\t} else {\n\t\t\t\t\tbyId.put(newRule.selector.getId(), newRule);\n\t\t\t\t\tnewRule.getStyle().reparent(defaultRule);\n\t\t\t\t}\n\t\t\t} else if (newRule.selector.getClazz() != null) {\n\t\t\t\toldRule = byClass.get(newRule.selector.getClazz());\n\n\t\t\t\tif (oldRule != null) {\n\t\t\t\t\toldRule.getStyle().augment(newRule.getStyle());\n\t\t\t\t} else {\n\t\t\t\t\tbyClass.put(newRule.selector.getClazz(), newRule);\n\t\t\t\t\tnewRule.getStyle().reparent(defaultRule);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\toldRule = defaultRule;\n\t\t\t\tdefaultRule.getStyle().augment(newRule.getStyle());\n\t\t\t\tnewRule = defaultRule;\n\t\t\t}\n\n\t\t\t// That's it.\n\n\t\t\treturn oldRule;\n\t\t}\n\n\t\tprotected Rule addEventRule(Rule newRule) {\n\t\t\tRule parentRule = null;\n\n\t\t\tif (newRule.selector.getId() != null) {\n\t\t\t\tparentRule = byId.get(newRule.selector.getId());\n\n\t\t\t\tif (parentRule == null) {\n\t\t\t\t\tparentRule = addRule(new Rule(new Selector(\n\t\t\t\t\t\t\tnewRule.selector.getType(),\n\t\t\t\t\t\t\tnewRule.selector.getId(),\n\t\t\t\t\t\t\tnewRule.selector.getClazz())));\n\t\t\t\t}\n\t\t\t} else if (newRule.selector.getClazz() != null) {\n\t\t\t\tparentRule = byClass.get(newRule.selector.getClazz());\n\n\t\t\t\tif (parentRule == null) {\n\t\t\t\t\tparentRule = addRule(new Rule(new Selector(\n\t\t\t\t\t\t\tnewRule.selector.getType(),\n\t\t\t\t\t\t\tnewRule.selector.getId(),\n\t\t\t\t\t\t\tnewRule.selector.getClazz())));\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tparentRule = defaultRule;\n\t\t\t}\n\n\t\t\tnewRule.getStyle().reparent(parentRule);\n\t\t\tparentRule.getStyle().addAlternateStyle(\n\t\t\t\t\tnewRule.selector.getPseudoClass(), newRule);\n\n\t\t\treturn parentRule;\n\t\t}\n\n\t\t@Override\n\t\tpublic String toString() {\n\t\t\treturn toString(-1);\n\t\t}\n\n\t\tpublic String toString(int level) {\n\t\t\tString prefix = \"\";\n\n\t\t\tif (level > 0) {\n\t\t\t\tfor (int i = 0; i < level; i++)\n\t\t\t\t\tprefix += \"    \";\n\t\t\t}\n\n\t\t\tStringBuilder builder = new StringBuilder();\n\n\t\t\tbuilder.append(String\n\t\t\t\t\t.format(\"%s%s default style :%n\", prefix, type));\n\t\t\tbuilder.append(defaultRule.toString(level + 1));\n\t\t\ttoStringRules(level, builder, byId,\n\t\t\t\t\tString.format(\"%s%s id styles\", prefix, type));\n\t\t\ttoStringRules(level, builder, byClass,\n\t\t\t\t\tString.format(\"%s%s class styles\", prefix, type));\n\n\t\t\treturn builder.toString();\n\t\t}\n\n\t\tprotected void toStringRules(int level, StringBuilder builder,\n\t\t\t\tHashMap<String, Rule> rules, String title) {\n\t\t\tbuilder.append(title);\n\t\t\tbuilder.append(String.format(\" :%n\"));\n\n\t\t\tfor (Rule rule : rules.values())\n\t\t\t\tbuilder.append(rule.toString(level + 1));\n\t\t}\n\t}\n}",
        "tokensGeneralGrammar": [
            "null",
            "true",
            "false",
            ",",
            ".",
            ":",
            ";",
            "?",
            "(",
            ")",
            "jdVar",
            "stream",
            "Arrays",
            "allMatch",
            "noneMatch",
            "anyMatch",
            "~",
            ">>",
            "<<",
            ">>>",
            "|",
            "&",
            "^",
            "+",
            "-",
            "/",
            "*",
            "%",
            "&&",
            "||",
            ">=",
            "<=",
            ">",
            "<",
            "==",
            "!=",
            "instanceof",
            "class",
            "methodResultID",
            "this"
        ],
        "tokensGeneralValuesGlobalDictionary": [
            [
                "0",
                "int"
            ],
            [
                "1",
                "int"
            ],
            [
                "-1",
                "int"
            ],
            [
                "0.0",
                "double"
            ],
            [
                "1.0",
                "double"
            ],
            [
                "-1.0",
                "double"
            ],
            [
                "\"\"",
                "String"
            ],
            [
                "\" \"",
                "String"
            ]
        ],
        "tokensProjectClasses": [
            [
                "DefaultCamera",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "GradientFactory",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "GraphMetrics",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "Graphics2DOutput",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "ImageCache",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "StrokeFactory",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "FontCache",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "FontSlot",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "DefaultView",
                "org.graphstream.ui.swingViewer"
            ],
            [
                "SpriteRenderer",
                "org.graphstream.ui.swingViewer.basicRenderer"
            ],
            [
                "ElementRenderer",
                "org.graphstream.ui.swingViewer.basicRenderer"
            ],
            [
                "NodeRenderer",
                "org.graphstream.ui.swingViewer.basicRenderer"
            ],
            [
                "Arrow",
                "org.graphstream.ui.swingViewer.basicRenderer.shapes"
            ],
            [
                "Shape",
                "org.graphstream.ui.swingViewer.basicRenderer.shapes"
            ],
            [
                "EdgeRenderer",
                "org.graphstream.ui.swingViewer.basicRenderer"
            ],
            [
                "SwingBasicGraphRenderer",
                "org.graphstream.ui.swingViewer.basicRenderer"
            ],
            [
                "GraphRendererBase",
                "org.graphstream.ui.swingViewer"
            ],
            [
                "GraphRenderer",
                "org.graphstream.ui.swingViewer"
            ],
            [
                "LayerRenderer",
                "org.graphstream.ui.swingViewer"
            ],
            [
                "ViewPanel",
                "org.graphstream.ui.swingViewer"
            ],
            [
                "Layouts",
                "org.graphstream.ui.layout"
            ],
            [
                "Layout",
                "org.graphstream.ui.layout"
            ],
            [
                "LayoutRunner",
                "org.graphstream.ui.layout"
            ],
            [
                "NodeParticle",
                "org.graphstream.ui.layout.springbox"
            ],
            [
                "GraphCellData",
                "org.graphstream.ui.layout.springbox"
            ],
            [
                "EdgeSpring",
                "org.graphstream.ui.layout.springbox"
            ],
            [
                "Energies",
                "org.graphstream.ui.layout.springbox"
            ],
            [
                "BarnesHutLayout",
                "org.graphstream.ui.layout.springbox"
            ],
            [
                "LinLog",
                "org.graphstream.ui.layout.springbox.implementations"
            ],
            [
                "LinLogNodeParticle",
                "org.graphstream.ui.layout.springbox.implementations"
            ],
            [
                "SpringBoxNodeParticle",
                "org.graphstream.ui.layout.springbox.implementations"
            ],
            [
                "SpringBox",
                "org.graphstream.ui.layout.springbox.implementations"
            ],
            [
                "Point2",
                "org.graphstream.ui.geom"
            ],
            [
                "Vector2",
                "org.graphstream.ui.geom"
            ],
            [
                "Vector3",
                "org.graphstream.ui.geom"
            ],
            [
                "Point3",
                "org.graphstream.ui.geom"
            ],
            [
                "ViewerListener",
                "org.graphstream.ui.view"
            ],
            [
                "MouseManager",
                "org.graphstream.ui.view.util"
            ],
            [
                "ShortcutManager",
                "org.graphstream.ui.view.util"
            ],
            [
                "DefaultShortcutManager",
                "org.graphstream.ui.view.util"
            ],
            [
                "FpsCounter",
                "org.graphstream.ui.view.util"
            ],
            [
                "CubicCurve",
                "org.graphstream.ui.view.util"
            ],
            [
                "DefaultMouseManager",
                "org.graphstream.ui.view.util"
            ],
            [
                "Selection",
                "org.graphstream.ui.view"
            ],
            [
                "ViewerPipe",
                "org.graphstream.ui.view"
            ],
            [
                "Viewer",
                "org.graphstream.ui.view"
            ],
            [
                "View",
                "org.graphstream.ui.view"
            ],
            [
                "Camera",
                "org.graphstream.ui.view"
            ],
            [
                "Sprite",
                "org.graphstream.ui.spriteManager"
            ],
            [
                "InvalidSpriteIDException",
                "org.graphstream.ui.spriteManager"
            ],
            [
                "SpriteManager",
                "org.graphstream.ui.spriteManager"
            ],
            [
                "SpriteFactory",
                "org.graphstream.ui.spriteManager"
            ],
            [
                "StyleGroupListener",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "Colors",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "Values",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "StyleSheetListener",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "StyleSheetParserTokenManager",
                "org.graphstream.ui.graphicGraph.stylesheet.parser"
            ],
            [
                "StyleSheetParserConstants",
                "org.graphstream.ui.graphicGraph.stylesheet.parser"
            ],
            [
                "StyleSheetParser",
                "org.graphstream.ui.graphicGraph.stylesheet.parser"
            ],
            [
                "Style",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "StyleSheet",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "StyleConstants",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "Selector",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "Value",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "Rule",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "GraphicNode",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "StyleGroup",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphPosLengthUtils",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphicEdge",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphicElementChangeListener",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphicGraph",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "StyleGroupSet",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphicSprite",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphicElement",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "VerboseSink",
                "org.graphstream.util"
            ],
            [
                "GraphListeners",
                "org.graphstream.util"
            ],
            [
                "Environment",
                "org.graphstream.util"
            ],
            [
                "GraphDiff",
                "org.graphstream.util"
            ],
            [
                "Filters",
                "org.graphstream.util"
            ],
            [
                "FilteredEdgeIterator",
                "org.graphstream.util"
            ],
            [
                "Parser",
                "org.graphstream.util.parser"
            ],
            [
                "ParserFactory",
                "org.graphstream.util.parser"
            ],
            [
                "TokenMgrError",
                "org.graphstream.util.parser"
            ],
            [
                "ParseException",
                "org.graphstream.util.parser"
            ],
            [
                "SimpleCharStream",
                "org.graphstream.util.parser"
            ],
            [
                "Token",
                "org.graphstream.util.parser"
            ],
            [
                "ISODateIO",
                "org.graphstream.util.time"
            ],
            [
                "ISODateComponent",
                "org.graphstream.util.time"
            ],
            [
                "FilteredNodeIterator",
                "org.graphstream.util"
            ],
            [
                "FixedArrayList",
                "org.graphstream.util.set"
            ],
            [
                "StepCounter",
                "org.graphstream.util"
            ],
            [
                "GraphSpells",
                "org.graphstream.util.cumulative"
            ],
            [
                "CumulativeAttributes",
                "org.graphstream.util.cumulative"
            ],
            [
                "CumulativeSpells",
                "org.graphstream.util.cumulative"
            ],
            [
                "Filter",
                "org.graphstream.util"
            ],
            [
                "PipeAdapter",
                "org.graphstream.stream"
            ],
            [
                "GraphParseException",
                "org.graphstream.stream"
            ],
            [
                "ElementSink",
                "org.graphstream.stream"
            ],
            [
                "URLSource",
                "org.graphstream.stream.net"
            ],
            [
                "HTTPSource",
                "org.graphstream.stream.net"
            ],
            [
                "SourceAdapter",
                "org.graphstream.stream"
            ],
            [
                "AttributeSink",
                "org.graphstream.stream"
            ],
            [
                "GMLParserConstants",
                "org.graphstream.stream.file.gml"
            ],
            [
                "GMLParserTokenManager",
                "org.graphstream.stream.file.gml"
            ],
            [
                "GMLContext",
                "org.graphstream.stream.file.gml"
            ],
            [
                "Graphics",
                "org.graphstream.stream.file.gml"
            ],
            [
                "KeyValues",
                "org.graphstream.stream.file.gml"
            ],
            [
                "GMLParser",
                "org.graphstream.stream.file.gml"
            ],
            [
                "FileSinkGraphML",
                "org.graphstream.stream.file"
            ],
            [
                "TLPParserConstants",
                "org.graphstream.stream.file.tlp"
            ],
            [
                "TLPParser",
                "org.graphstream.stream.file.tlp"
            ],
            [
                "TLPParserTokenManager",
                "org.graphstream.stream.file.tlp"
            ],
            [
                "FileSinkFactory",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceEdge",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkBase",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkTikZ",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceGEXF",
                "org.graphstream.stream.file"
            ],
            [
                "DOTParser",
                "org.graphstream.stream.file.dot"
            ],
            [
                "DOTParserConstants",
                "org.graphstream.stream.file.dot"
            ],
            [
                "DOTParserTokenManager",
                "org.graphstream.stream.file.dot"
            ],
            [
                "FileSink",
                "org.graphstream.stream.file"
            ],
            [
                "PajekContext",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "Graphics",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "NodeGraphics",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "EdgeGraphics",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "EdgeMatrix",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "PajekParserTokenManager",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "PajekParserConstants",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "FileSourceXML",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkBaseFiltered",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkDOT",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceParser",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkDGSFiltered",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceDOT",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceDGS1And2",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceGraphML",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceFactory",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkImages",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkDynamicGML",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkSVG",
                "org.graphstream.stream.file"
            ],
            [
                "GEXFSpell",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "SmartXMLWriter",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFElement",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFEdges",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFAttValues",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFEdge",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFSpells",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFAttValue",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFNodes",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFNode",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFMeta",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFAttributes",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXF",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFGraph",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFAttribute",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "OldFileSourceDGS",
                "org.graphstream.stream.file.dgs"
            ],
            [
                "DGSParser",
                "org.graphstream.stream.file.dgs"
            ],
            [
                "FileSourceBase",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkGML",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceDGS",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkDGSUtility",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceTLP",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkSVG2",
                "org.graphstream.stream.file"
            ],
            [
                "FileSource",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceNCol",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourcePajek",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceGPX",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceLGL",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkGEXF2",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceGML",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkGEXF",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkDGS",
                "org.graphstream.stream.file"
            ],
            [
                "ProxyPipe",
                "org.graphstream.stream"
            ],
            [
                "Sink",
                "org.graphstream.stream"
            ],
            [
                "Timeline",
                "org.graphstream.stream"
            ],
            [
                "Pipe",
                "org.graphstream.stream"
            ],
            [
                "SinkAdapter",
                "org.graphstream.stream"
            ],
            [
                "Replayable",
                "org.graphstream.stream"
            ],
            [
                "Source",
                "org.graphstream.stream"
            ],
            [
                "AnnotatedSink",
                "org.graphstream.stream"
            ],
            [
                "GraphReplay",
                "org.graphstream.stream"
            ],
            [
                "AttributePipe",
                "org.graphstream.stream"
            ],
            [
                "SinkTime",
                "org.graphstream.stream.sync"
            ],
            [
                "SourceTime",
                "org.graphstream.stream.sync"
            ],
            [
                "PipeBase",
                "org.graphstream.stream"
            ],
            [
                "ThreadProxyPipe",
                "org.graphstream.stream.thread"
            ],
            [
                "ThreadProxyPipeOld",
                "org.graphstream.stream.thread"
            ],
            [
                "RMISource",
                "org.graphstream.stream.rmi"
            ],
            [
                "RMIAdapterOut",
                "org.graphstream.stream.rmi"
            ],
            [
                "RMISink",
                "org.graphstream.stream.rmi"
            ],
            [
                "RMIAdapterIn",
                "org.graphstream.stream.rmi"
            ],
            [
                "SourceBase",
                "org.graphstream.stream"
            ],
            [
                "NetStreamDecoder",
                "org.graphstream.stream.netstream"
            ],
            [
                "NetStreamReceiver",
                "org.graphstream.stream.netstream"
            ],
            [
                "NetStreamConstants",
                "org.graphstream.stream.netstream"
            ],
            [
                "NetStreamSender",
                "org.graphstream.stream.netstream"
            ],
            [
                "DefaultNetStreamDecoder",
                "org.graphstream.stream.netstream"
            ],
            [
                "Base64",
                "org.graphstream.stream.netstream.packing"
            ],
            [
                "NetStreamUnpacker",
                "org.graphstream.stream.netstream.packing"
            ],
            [
                "Base64Packer",
                "org.graphstream.stream.netstream.packing"
            ],
            [
                "Base64Unpacker",
                "org.graphstream.stream.netstream.packing"
            ],
            [
                "NetStreamPacker",
                "org.graphstream.stream.netstream.packing"
            ],
            [
                "AttributePredicate",
                "org.graphstream.stream"
            ],
            [
                "Element",
                "org.graphstream.graph"
            ],
            [
                "Node",
                "org.graphstream.graph"
            ],
            [
                "BreadthFirstIterator",
                "org.graphstream.graph"
            ],
            [
                "Graph",
                "org.graphstream.graph"
            ],
            [
                "EdgeRejectedException",
                "org.graphstream.graph"
            ],
            [
                "CompoundAttribute",
                "org.graphstream.graph"
            ],
            [
                "Structure",
                "org.graphstream.graph"
            ],
            [
                "DepthFirstIterator",
                "org.graphstream.graph"
            ],
            [
                "NullAttributeException",
                "org.graphstream.graph"
            ],
            [
                "IdAlreadyInUseException",
                "org.graphstream.graph"
            ],
            [
                "EdgeFactory",
                "org.graphstream.graph"
            ],
            [
                "ElementNotFoundException",
                "org.graphstream.graph"
            ],
            [
                "OneAttributeElement",
                "org.graphstream.graph.implementations"
            ],
            [
                "AdjacencyListNode",
                "org.graphstream.graph.implementations"
            ],
            [
                "SingleNode",
                "org.graphstream.graph.implementations"
            ],
            [
                "AbstractElement",
                "org.graphstream.graph.implementations"
            ],
            [
                "AdjacencyListGraph",
                "org.graphstream.graph.implementations"
            ],
            [
                "AbstractNode",
                "org.graphstream.graph.implementations"
            ],
            [
                "DefaultGraph",
                "org.graphstream.graph.implementations"
            ],
            [
                "MultiGraph",
                "org.graphstream.graph.implementations"
            ],
            [
                "Graphs",
                "org.graphstream.graph.implementations"
            ],
            [
                "SingleGraph",
                "org.graphstream.graph.implementations"
            ],
            [
                "MultiNode",
                "org.graphstream.graph.implementations"
            ],
            [
                "AbstractGraph",
                "org.graphstream.graph.implementations"
            ],
            [
                "AbstractEdge",
                "org.graphstream.graph.implementations"
            ],
            [
                "GraphFactory",
                "org.graphstream.graph"
            ],
            [
                "NodeFactory",
                "org.graphstream.graph"
            ],
            [
                "Edge",
                "org.graphstream.graph"
            ],
            [
                "Path",
                "org.graphstream.graph"
            ]
        ],
        "tokensProjectClassesNonPrivateStaticNonVoidMethods": [
            [
                "gradientInArea",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static Paint gradientInArea(int x0, int y0, int width, int height, Style style)"
            ],
            [
                "linearGradientFromStyle",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static Paint linearGradientFromStyle(float x0, float y0, float x1, float y1, Style style)"
            ],
            [
                "radialGradientFromStyle",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static Paint radialGradientFromStyle(float cx, float cy, float radius, Style style)"
            ],
            [
                "radialGradientFromStyle",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static Paint radialGradientFromStyle(float cx, float cy, float radius, float fx, float fy, Style style)"
            ],
            [
                "createFractions",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "protected static float[] createFractions(Style style)"
            ],
            [
                "createColors",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "protected static Color[] createColors(Style style)"
            ],
            [
                "defaultImageCache",
                "org.graphstream.ui.swingViewer.util",
                "ImageCache",
                "public static ImageCache defaultImageCache()"
            ],
            [
                "generateStroke",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "public static Stroke generateStroke(Style style, GraphMetrics metrics)"
            ],
            [
                "generatePlainStroke",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "protected static Stroke generatePlainStroke(Style style, GraphMetrics metrics)"
            ],
            [
                "generateDotsStroke",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "protected static Stroke generateDotsStroke(Style style, GraphMetrics metrics)"
            ],
            [
                "generateDashesStroke",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "protected static Stroke generateDashesStroke(Style style, GraphMetrics metrics)"
            ],
            [
                "defaultFontCache",
                "org.graphstream.ui.swingViewer.util",
                "FontCache",
                "public static FontCache defaultFontCache()"
            ],
            [
                "newLayoutAlgorithm",
                "org.graphstream.ui.layout",
                "Layouts",
                "public static Layout newLayoutAlgorithm()"
            ],
            [
                "eval",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "public static double eval(double x0, double x1, double x2, double x3, double t)"
            ],
            [
                "eval",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "public static Point2 eval(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t)"
            ],
            [
                "eval",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "public static Point2D.Double eval(Point2D.Double p0, Point2D.Double p1, Point2D.Double p2, Point2D.Double p3, double t)"
            ],
            [
                "eval",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "public static Point2 eval(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t, Point2 result)"
            ],
            [
                "derivative",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "public static double derivative(double x0, double x1, double x2, double x3, double t)"
            ],
            [
                "derivative",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "public static Point2 derivative(Point2 p0, Point2 p1, Point2 p2, Point3 p3, double t)"
            ],
            [
                "derivative",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "public static Point2 derivative(Point2 p0, Point2 p1, Point2 p2, Point3 p3, double t, Point2 result)"
            ],
            [
                "perpendicular",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "public static Vector2 perpendicular(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t)"
            ],
            [
                "perpendicular",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "public static Vector2 perpendicular(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t, Vector2 result)"
            ],
            [
                "perpendicular",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "public static Point2D.Double perpendicular(Point2D.Double p0, Point2D.Double p1, Point2D.Double p2, Point2D.Double p3, double t)"
            ],
            [
                "newGraphRenderer",
                "org.graphstream.ui.view",
                "Viewer",
                "public static GraphRenderer newGraphRenderer()"
            ],
            [
                "getPositionValue",
                "org.graphstream.ui.spriteManager",
                "SpriteManager",
                "protected static Values getPositionValue(Object value)"
            ],
            [
                "convertColor",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "public static Color convertColor(Object anyValue)"
            ],
            [
                "convertLabel",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "public static String convertLabel(Object value)"
            ],
            [
                "convertWidth",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "public static float convertWidth(Object value)"
            ],
            [
                "convertValue",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "public static Value convertValue(Object value)"
            ],
            [
                "convertUnit",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "protected static Units convertUnit(String unit)"
            ],
            [
                "nodePosition",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "public static double[] nodePosition(Graph graph, String id)"
            ],
            [
                "nodePointPosition",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "public static Point3 nodePointPosition(Graph graph, String id)"
            ],
            [
                "nodePosition",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "public static double[] nodePosition(Node node)"
            ],
            [
                "nodePointPosition",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "public static Point3 nodePointPosition(Node node)"
            ],
            [
                "edgeLength",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "public static double edgeLength(Graph graph, String id)"
            ],
            [
                "edgeLength",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "public static double edgeLength(Edge edge)"
            ],
            [
                "getGlobalEnvironment",
                "org.graphstream.util",
                "Environment",
                "public static Environment getGlobalEnvironment()"
            ],
            [
                "falseFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> falseFilter()"
            ],
            [
                "trueFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> trueFilter()"
            ],
            [
                "byAttributeFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> byAttributeFilter(String key, Object expectedValue)"
            ],
            [
                "separateNodeAndEdgeFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element, U extends Element> Filter<Element> separateNodeAndEdgeFilter(Filter<T> nodeFilter, Filter<U> edgeFilter)"
            ],
            [
                "byExtremitiesFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element, U extends Element> Filter<T> byExtremitiesFilter(Filter<U> f)"
            ],
            [
                "byIdFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> byIdFilter(String idPattern)"
            ],
            [
                "isContained",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> isContained(final Collection<? extends T> set)"
            ],
            [
                "isIdContained",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> isIdContained(final Collection<String> set)"
            ],
            [
                "and",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> and(Filter<T> f1, Filter<T> f2)"
            ],
            [
                "or",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> or(Filter<T> f1, Filter<T> f2)"
            ],
            [
                "xor",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> xor(Filter<T> f1, Filter<T> f2)"
            ],
            [
                "not",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> not(Filter<T> f)"
            ],
            [
                "addEscapes",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "protected static final String addEscapes(String str)"
            ],
            [
                "LexicalError",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "protected static String LexicalError(boolean EOFSeen, int lexState, int errorLine, int errorColumn, String errorAfter, char curChar)"
            ],
            [
                "add_escapes",
                "org.graphstream.util.parser",
                "ParseException",
                "static String add_escapes(String str)"
            ],
            [
                "newToken",
                "org.graphstream.util.parser",
                "Token",
                "public static Token newToken(int ofKind, String image)"
            ],
            [
                "newToken",
                "org.graphstream.util.parser",
                "Token",
                "public static Token newToken(int ofKind)"
            ],
            [
                "countStepInFile",
                "org.graphstream.util",
                "StepCounter",
                "public static int countStepInFile(String path) throws IOException"
            ],
            [
                "GET",
                "org.graphstream.stream.net",
                "HTTPSource",
                "protected static HashMap<String, Object> GET(HttpExchange ex)"
            ],
            [
                "sinkFor",
                "org.graphstream.stream.file",
                "FileSinkFactory",
                "public static FileSink sinkFor(String filename)"
            ],
            [
                "formatId",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "protected static String formatId(String id)"
            ],
            [
                "getInt",
                "org.graphstream.stream.file.pajek",
                "PajekContext",
                "protected static int getInt(Token nb) throws ParseException"
            ],
            [
                "getReal",
                "org.graphstream.stream.file.pajek",
                "PajekContext",
                "protected static double getReal(Token nb) throws ParseException"
            ],
            [
                "toColorValue",
                "org.graphstream.stream.file.pajek",
                "PajekContext",
                "public static String toColorValue(Token R, Token G, Token B) throws ParseException"
            ],
            [
                "sourceFor",
                "org.graphstream.stream.file",
                "FileSourceFactory",
                "public static FileSource sourceFor(String fileName) throws IOException"
            ],
            [
                "getXMLRootElement",
                "org.graphstream.stream.file",
                "FileSourceFactory",
                "public static String getXMLRootElement(String fileName) throws IOException"
            ],
            [
                "formatStringForQuoting",
                "org.graphstream.stream.file",
                "FileSinkDGSUtility",
                "protected static String formatStringForQuoting(String str)"
            ],
            [
                "attributeString",
                "org.graphstream.stream.file",
                "FileSinkDGSUtility",
                "protected static String attributeString(String key, Object value, boolean remove)"
            ],
            [
                "arrayString",
                "org.graphstream.stream.file",
                "FileSinkDGSUtility",
                "protected static String arrayString(Object value)"
            ],
            [
                "valueString",
                "org.graphstream.stream.file",
                "FileSinkDGSUtility",
                "protected static String valueString(Object value)"
            ],
            [
                "hashToString",
                "org.graphstream.stream.file",
                "FileSinkDGSUtility",
                "protected static String hashToString(HashMap<?, ?> hash)"
            ],
            [
                "encodeObject",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public static String encodeObject(java.io.Serializable serializableObject) throws java.io.IOException"
            ],
            [
                "encodeObject",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public static String encodeObject(java.io.Serializable serializableObject, int options) throws java.io.IOException"
            ],
            [
                "encodeBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public static String encodeBytes(byte[] source)"
            ],
            [
                "encodeBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public static String encodeBytes(byte[] source, int options) throws java.io.IOException"
            ],
            [
                "encodeBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public static String encodeBytes(byte[] source, int off, int len)"
            ],
            [
                "encodeBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public static String encodeBytes(byte[] source, int off, int len, int options) throws java.io.IOException"
            ],
            [
                "encodeBytesToBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public static byte[] encodeBytesToBytes(byte[] source)"
            ],
            [
                "encodeBytesToBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public static byte[] encodeBytesToBytes(byte[] source, int off, int len, int options) throws java.io.IOException"
            ],
            [
                "decode",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public static byte[] decode(byte[] source) throws java.io.IOException"
            ],
            [
                "decode",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public static byte[] decode(byte[] source, int off, int len, int options) throws java.io.IOException"
            ],
            [
                "decode",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public static byte[] decode(String s) throws java.io.IOException"
            ],
            [
                "decode",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public static byte[] decode(String s, int options) throws java.io.IOException"
            ],
            [
                "decodeToObject",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public static Object decodeToObject(String encodedObject) throws java.io.IOException, java.lang.ClassNotFoundException"
            ],
            [
                "decodeToObject",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public static Object decodeToObject(String encodedObject, int options, final ClassLoader loader) throws java.io.IOException, java.lang.ClassNotFoundException"
            ],
            [
                "decodeFromFile",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public static byte[] decodeFromFile(String filename) throws java.io.IOException"
            ],
            [
                "encodeFromFile",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public static String encodeFromFile(String filename) throws java.io.IOException"
            ],
            [
                "unmutableGraph",
                "org.graphstream.graph.implementations",
                "Graphs",
                "public static Graph unmutableGraph(Graph g)"
            ],
            [
                "synchronizedGraph",
                "org.graphstream.graph.implementations",
                "Graphs",
                "public static Graph synchronizedGraph(Graph g)"
            ],
            [
                "merge",
                "org.graphstream.graph.implementations",
                "Graphs",
                "public static Graph merge(Graph... graphs)"
            ],
            [
                "clone",
                "org.graphstream.graph.implementations",
                "Graphs",
                "public static Graph clone(Graph g)"
            ]
        ],
        "tokensProjectClassesNonPrivateStaticAttributes": [
            [
                "version16",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static boolean version16 = false;"
            ],
            [
                "predefFractions",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[][] predefFractions = new float[11][];"
            ],
            [
                "predefFractions2",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions2 = { 0f, 1f };"
            ],
            [
                "predefFractions3",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions3 = { 0f, 0.5f, 1f };"
            ],
            [
                "predefFractions4",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions4 = { 0f, 0.33f, 0.66f, 1f };"
            ],
            [
                "predefFractions5",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions5 = { 0f, 0.25f, 0.5f, 0.75f, 1f };"
            ],
            [
                "predefFractions6",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions6 = { 0f, 0.2f, 0.4f, 0.6f, 0.8f, 1f };"
            ],
            [
                "predefFractions7",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions7 = { 0f, 0.1666f, 0.3333f, 0.4999f, 0.6666f, 0.8333f, 1f };"
            ],
            [
                "predefFractions8",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions8 = { 0f, 0.1428f, 0.2856f, 0.4284f, 0.5712f, 0.7140f, 0.8568f, 1f };"
            ],
            [
                "predefFractions9",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions9 = { 0f, 0.125f, 0.25f, 0.375f, 0.5f, 0.625f, .75f, 0.875f, 1f };"
            ],
            [
                "predefFractions10",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions10 = { 0f, 0.1111f, 0.2222f, 0.3333f, 0.4444f, 0.5555f, 0.6666f, 0.7777f, 0.8888f, 1f };"
            ],
            [
                "defaultImageCache",
                "org.graphstream.ui.swingViewer.util",
                "ImageCache",
                "protected static ImageCache defaultImageCache;"
            ],
            [
                "dots",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "protected static float[] dots = { 1f, 1f };"
            ],
            [
                "dashes",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "protected static float[] dashes = { 3f, 3f };"
            ],
            [
                "defaultFontCache",
                "org.graphstream.ui.swingViewer.util",
                "FontCache",
                "public static FontCache defaultFontCache;"
            ],
            [
                "NULL_POINT2",
                "org.graphstream.ui.geom",
                "Point2",
                "public static final Point2 NULL_POINT2 = new Point2(0, 0);"
            ],
            [
                "NULL_POINT3",
                "org.graphstream.ui.geom",
                "Point3",
                "public static final Point3 NULL_POINT3 = new Point3(0, 0, 0);"
            ],
            [
                "DEFAULT_VIEW_ID",
                "org.graphstream.ui.view",
                "Viewer",
                "public static String DEFAULT_VIEW_ID = \"defaultView\";"
            ],
            [
                "jjbitVec0",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };"
            ],
            [
                "jjnextStates",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "static final int[] jjnextStates = { 48, 49, 52, 54, 55, 65, 69, 2, 4, 6, 10, 16, 23, 33, 50, 52, 54, 55, 57, 58, 60, 61, 66, 68, 70, 71 };"
            ],
            [
                "jjstrLiteralImages",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "public static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, \"\\56\", \"\\173\", \"\\175\", \"\\50\", \"\\51\", \"\\43\", \"\\72\", \"\\73\", \"\\54\", \"\\162\\147\\142\\141\", \"\\162\\147\\142\", null, null, null, \"\\165\\162\\154\", \"\\147\\162\\141\\160\\150\", \"\\145\\144\\147\\145\", \"\\156\\157\\144\\145\", \"\\163\\160\\162\\151\\164\\145\", \"\\146\\151\\154\\154\\55\\155\\157\\144\\145\", \"\\146\\151\\154\\154\\55\\143\\157\\154\\157\\162\", \"\\146\\151\\154\\154\\55\\151\\155\\141\\147\\145\", \"\\163\\164\\162\\157\\153\\145\\55\\155\\157\\144\\145\", \"\\163\\164\\162\\157\\153\\145\\55\\143\\157\\154\\157\\162\", \"\\163\\164\\162\\157\\153\\145\\55\\167\\151\\144\\164\\150\", \"\\163\\150\\141\\144\\157\\167\\55\\155\\157\\144\\145\", \"\\163\\150\\141\\144\\157\\167\\55\\143\\157\\154\\157\\162\", \"\\163\\150\\141\\144\\157\\167\\55\\167\\151\\144\\164\\150\", \"\\163\\150\\141\\144\\157\\167\\55\\157\\146\\146\\163\\145\\164\", \"\\164\\145\\170\\164\\55\\155\\157\\144\\145\", \"\\164\\145\\170\\164\\55\\143\\157\\154\\157\\162\", \"\\164\\145\\170\\164\\55\\163\\164\\171\\154\\145\", \"\\164\\145\\170\\164\\55\\146\\157\\156\\164\", \"\\164\\145\\170\\164\\55\\163\\151\\172\\145\", \"\\164\\145\\170\\164\\55\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\\55\\155\\157\\144\\145\", \"\\164\\145\\170\\164\\55\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\", \"\\164\\145\\170\\164\\55\\142\\141\\143\\153\\147\\162\\157\\165\\156\\144\\55\\155\\157\\144\\145\", \"\\164\\145\\170\\164\\55\\142\\141\\143\\153\\147\\162\\157\\165\\156\\144\\55\\143\\157\\154\\157\\162\", \"\\164\\145\\170\\164\\55\\157\\146\\146\\163\\145\\164\", \"\\164\\145\\170\\164\\55\\160\\141\\144\\144\\151\\156\\147\", \"\\151\\143\\157\\156\\55\\155\\157\\144\\145\", \"\\151\\143\\157\\156\", \"\\160\\141\\144\\144\\151\\156\\147\", \"\\172\\55\\151\\156\\144\\145\\170\", \"\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\\55\\155\\157\\144\\145\", \"\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\", \"\\163\\150\\141\\160\\145\", \"\\163\\151\\172\\145\", \"\\163\\151\\172\\145\\55\\155\\157\\144\\145\", \"\\163\\150\\141\\160\\145\\55\\160\\157\\151\\156\\164\\163\", \"\\164\\145\\170\\164\\55\\141\\154\\151\\147\\156\\155\\145\\156\\164\", \"\\152\\143\\157\\155\\160\\157\\156\\145\\156\\164\", \"\\141\\162\\162\\157\\167\\55\\151\\155\\141\\147\\145\", \"\\141\\162\\162\\157\\167\\55\\163\\151\\172\\145\", \"\\141\\162\\162\\157\\167\\55\\163\\150\\141\\160\\145\", \"\\163\\160\\162\\151\\164\\145\\55\\157\\162\\151\\145\\156\\164\\141\\164\\151\\157\\156\", \"\\143\\141\\156\\166\\141\\163\\55\\143\\157\\154\\157\\162\", \"\\160\\154\\141\\151\\156\", \"\\144\\171\\156\\55\\160\\154\\141\\151\\156\", \"\\144\\171\\156\\55\\163\\151\\172\\145\", \"\\144\\171\\156\\55\\151\\143\\157\\156\", \"\\144\\141\\163\\150\\145\\163\", \"\\144\\157\\164\\163\", \"\\144\\157\\165\\142\\154\\145\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\144\\151\\141\\147\\157\\156\\141\\154\\61\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\144\\151\\141\\147\\157\\156\\141\\154\\62\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\150\\157\\162\\151\\172\\157\\156\\164\\141\\154\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\162\\141\\144\\151\\141\\154\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\166\\145\\162\\164\\151\\143\\141\\154\", \"\\150\\151\\144\\144\\145\\156\", \"\\151\\155\\141\\147\\145\\55\\164\\151\\154\\145\\144\", \"\\151\\155\\141\\147\\145\\55\\163\\143\\141\\154\\145\\144\", \"\\151\\155\\141\\147\\145\\55\\163\\143\\141\\154\\145\\144\\55\\162\\141\\164\\151\\157\\55\\155\\141\\170\", \"\\151\\155\\141\\147\\145\\55\\163\\143\\141\\154\\145\\144\\55\\162\\141\\164\\151\\157\\55\\155\\151\\156\", \"\\156\\157\\156\\145\", \"\\156\\157\\162\\155\\141\\154\", \"\\164\\162\\165\\156\\143\\141\\164\\145\\144\", \"\\172\\157\\157\\155\\55\\162\\141\\156\\147\\145\", \"\\141\\164\\55\\172\\157\\157\\155\", \"\\165\\156\\144\\145\\162\\55\\172\\157\\157\\155\", \"\\157\\166\\145\\162\\55\\172\\157\\157\\155\", \"\\172\\157\\157\\155\\163\", \"\\146\\151\\164\", \"\\142\\157\\154\\144\", \"\\142\\157\\154\\144\\55\\151\\164\\141\\154\\151\\143\", \"\\151\\164\\141\\154\\151\\143\", \"\\141\\154\\157\\156\\147\", \"\\141\\164\\55\\154\\145\\146\\164\", \"\\141\\164\\55\\162\\151\\147\\150\\164\", \"\\143\\145\\156\\164\\145\\162\", \"\\154\\145\\146\\164\", \"\\162\\151\\147\\150\\164\", \"\\165\\156\\144\\145\\162\", \"\\141\\142\\157\\166\\145\", \"\\152\\165\\163\\164\\151\\146\\171\", \"\\143\\151\\162\\143\\154\\145\", \"\\164\\162\\151\\141\\156\\147\\154\\145\", \"\\146\\162\\145\\145\\160\\154\\141\\156\\145\", \"\\164\\145\\170\\164\\55\\142\\157\\170\", \"\\164\\145\\170\\164\\55\\162\\157\\165\\156\\144\\145\\144\\55\\142\\157\\170\", \"\\164\\145\\170\\164\\55\\143\\151\\162\\143\\154\\145\", \"\\164\\145\\170\\164\\55\\144\\151\\141\\155\\157\\156\\144\", \"\\164\\145\\170\\164\\55\\160\\141\\162\\141\\147\\162\\141\\160\\150\", \"\\142\\157\\170\", \"\\162\\157\\165\\156\\144\\145\\144\\55\\142\\157\\170\", \"\\143\\162\\157\\163\\163\", \"\\144\\151\\141\\155\\157\\156\\144\", \"\\160\\157\\154\\171\\147\\157\\156\", \"\\142\\165\\164\\164\\157\\156\", \"\\164\\145\\170\\164\\55\\146\\151\\145\\154\\144\", \"\\160\\141\\156\\145\\154\", \"\\154\\151\\156\\145\", \"\\160\\157\\154\\171\\154\\151\\156\\145\", \"\\160\\157\\154\\171\\154\\151\\156\\145\\55\\163\\143\\141\\154\\145\\144\", \"\\141\\156\\147\\154\\145\", \"\\143\\165\\142\\151\\143\\55\\143\\165\\162\\166\\145\", \"\\142\\154\\157\\142\", \"\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\114\\55\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\150\\157\\162\\151\\172\\157\\156\\164\\141\\154\\55\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\166\\145\\162\\164\\151\\143\\141\\154\\55\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\141\\162\\162\\157\\167\", \"\\146\\154\\157\\167\", \"\\160\\151\\145\\55\\143\\150\\141\\162\\164\", \"\\151\\155\\141\\147\\145\", \"\\151\\155\\141\\147\\145\\163\", \"\\146\\162\\157\\155\", \"\\156\\157\\144\\145\\60\", \"\\164\\157\", \"\\156\\157\\144\\145\\61\", \"\\160\\162\\157\\152\\145\\143\\164\\151\\157\\156\", \"\\143\\154\\151\\143\\153\\145\\144\", \"\\163\\145\\154\\145\\143\\164\\145\\144\", null, null };"
            ],
            [
                "lexStateNames",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "public static final String[] lexStateNames = { \"DEFAULT\" };"
            ],
            [
                "jjtoToken",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "static final long[] jjtoToken = { 0xfffffffffffffe01L, 0xffffffffffffffffL, 0xffffL };"
            ],
            [
                "jjtoSkip",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "static final long[] jjtoSkip = { 0x1eL, 0x0L, 0x0L };"
            ],
            [
                "colorMap",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "protected static HashMap<String,Color> colorMap;"
            ],
            [
                "sharpColor1",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "protected static Pattern sharpColor1;"
            ],
            [
                "sharpColor2",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "protected static Pattern sharpColor2;"
            ],
            [
                "cssColor",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "protected static Pattern cssColor;"
            ],
            [
                "cssColorA",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "protected static Pattern cssColorA;"
            ],
            [
                "awtColor",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "protected static Pattern awtColor;"
            ],
            [
                "hexaColor",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "protected static Pattern hexaColor;"
            ],
            [
                "numberUnit",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "protected static Pattern numberUnit;"
            ],
            [
                "number",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "protected static Pattern number;"
            ],
            [
                "acceptedAttribute",
                "org.graphstream.ui.graphicGraph",
                "GraphicElement",
                "protected static Pattern acceptedAttribute;"
            ],
            [
                "DEFAULT_AN_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_AN_FORMAT = \"%prefix%[%sourceId%:%timeId%] add node \\\"%nodeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_CNA_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CNA_FORMAT = \"%prefix%[%sourceId%:%timeId%] set node \\\"%nodeId%\\\" +\\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CNC_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CNC_FORMAT = \"%prefix%[%sourceId%:%timeId%] set node \\\"%nodeId%\\\" \\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CNR_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CNR_FORMAT = \"%prefix%[%sourceId%:%timeId%] set node \\\"%nodeId%\\\" -\\\"%attributeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_DN_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_DN_FORMAT = \"%prefix%[%sourceId%:%timeId%] remove node \\\"%nodeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_AE_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_AE_FORMAT = \"%prefix%[%sourceId%:%timeId%] add edge \\\"%edgeId%\\\" : \\\"%source%\\\" -- \\\"%target%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_CEA_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CEA_FORMAT = \"%prefix%[%sourceId%:%timeId%] set edge \\\"%edgeId%\\\" +\\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CEC_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CEC_FORMAT = \"%prefix%[%sourceId%:%timeId%] set edge \\\"%edgeId%\\\" \\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CER_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CER_FORMAT = \"%prefix%[%sourceId%:%timeId%] set edge \\\"%edgeId%\\\" -\\\"%attributeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_DE_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_DE_FORMAT = \"%prefix%[%sourceId%:%timeId%] remove edge \\\"%edgeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_CGA_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CGA_FORMAT = \"%prefix%[%sourceId%:%timeId%] set +\\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CGC_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CGC_FORMAT = \"%prefix%[%sourceId%:%timeId%] set \\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CGR_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CGR_FORMAT = \"%prefix%[%sourceId%:%timeId%] set -\\\"%attributeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_CL_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CL_FORMAT = \"%prefix%[%sourceId%:%timeId%] clear%suffix%\";"
            ],
            [
                "DEFAULT_ST_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_ST_FORMAT = \"%prefix%[%sourceId%:%timeId%] step %step% begins%suffix%\";"
            ],
            [
                "GLOBAL_ENV",
                "org.graphstream.util",
                "Environment",
                "public static Environment GLOBAL_ENV;"
            ],
            [
                "LEXICAL_ERROR",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "public static final int LEXICAL_ERROR = 0;"
            ],
            [
                "STATIC_LEXER_ERROR",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "public static final int STATIC_LEXER_ERROR = 1;"
            ],
            [
                "INVALID_LEXICAL_STATE",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "public static final int INVALID_LEXICAL_STATE = 2;"
            ],
            [
                "LOOP_DETECTED",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "public static final int LOOP_DETECTED = 3;"
            ],
            [
                "staticFlag",
                "org.graphstream.util.parser",
                "SimpleCharStream",
                "public static final boolean staticFlag = false;"
            ],
            [
                "ABBREVIATED_WEEKDAY_NAME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent ABBREVIATED_WEEKDAY_NAME = new NotImplementedComponent(\"%a\", \"\\\\w+[.]\");"
            ],
            [
                "FULL_WEEKDAY_NAME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent FULL_WEEKDAY_NAME = new NotImplementedComponent(\"%A\", \"\\\\w+\");"
            ],
            [
                "ABBREVIATED_MONTH_NAME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent ABBREVIATED_MONTH_NAME = new NotImplementedComponent(\"%b\", \"\\\\w+[.]\");"
            ],
            [
                "FULL_MONTH_NAME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent FULL_MONTH_NAME = new NotImplementedComponent(\"%B\", \"\\\\w+\");"
            ],
            [
                "LOCALE_DATE_AND_TIME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent LOCALE_DATE_AND_TIME = new NotImplementedComponent(\"%c\", null);"
            ],
            [
                "CENTURY",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent CENTURY = new NotImplementedComponent(\"%C\", \"\\\\d\\\\d\");"
            ],
            [
                "DAY_OF_MONTH_2_DIGITS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DAY_OF_MONTH_2_DIGITS = new FieldComponent(\"%d\", \"[012]\\\\d|3[01]\", Calendar.DAY_OF_MONTH, \"%02d\");"
            ],
            [
                "DATE",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DATE = new AliasComponent(\"%D\", \"%m/%d/%y\");"
            ],
            [
                "DAY_OF_MONTH",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DAY_OF_MONTH = new FieldComponent(\"%e\", \"\\\\d|[12]\\\\d|3[01]\", Calendar.DAY_OF_MONTH, \"%2d\");"
            ],
            [
                "DATE_ISO8601",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DATE_ISO8601 = new AliasComponent(\"%F\", \"%Y-%m-%d\");"
            ],
            [
                "WEEK_BASED_YEAR_2_DIGITS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent WEEK_BASED_YEAR_2_DIGITS = new FieldComponent(\"%g\", \"\\\\d\\\\d\", Calendar.YEAR, \"%02d\");"
            ],
            [
                "WEEK_BASED_YEAR_4_DIGITS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent WEEK_BASED_YEAR_4_DIGITS = new FieldComponent(\"%G\", \"\\\\d{4}\", Calendar.YEAR, \"%04d\");"
            ],
            [
                "ABBREVIATED_MONTH_NAME_ALIAS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent ABBREVIATED_MONTH_NAME_ALIAS = new AliasComponent(\"%h\", \"%b\");"
            ],
            [
                "HOUR_OF_DAY",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent HOUR_OF_DAY = new FieldComponent(\"%H\", \"[01]\\\\d|2[0123]\", Calendar.HOUR_OF_DAY, \"%02d\");"
            ],
            [
                "HOUR",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent HOUR = new FieldComponent(\"%I\", \"0\\\\d|1[012]\", Calendar.HOUR, \"%02d\");"
            ],
            [
                "DAY_OF_YEAR",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DAY_OF_YEAR = new FieldComponent(\"%j\", \"[012]\\\\d\\\\d|3[0-5]\\\\d|36[0-6]\", Calendar.DAY_OF_YEAR, \"%03d\");"
            ],
            [
                "MILLISECOND",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent MILLISECOND = new FieldComponent(\"%k\", \"\\\\d{3}\", Calendar.MILLISECOND, \"%03d\");"
            ],
            [
                "EPOCH",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent EPOCH = new EpochComponent();"
            ],
            [
                "MONTH",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent MONTH = new FieldComponent(\"%m\", \"0[1-9]|1[012]\", Calendar.MONTH, -1, \"%02d\");"
            ],
            [
                "MINUTE",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent MINUTE = new FieldComponent(\"%M\", \"[0-5]\\\\d\", Calendar.MINUTE, \"%02d\");"
            ],
            [
                "NEW_LINE",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent NEW_LINE = new AliasComponent(\"%n\", \"\\n\");"
            ],
            [
                "AM_PM",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent AM_PM = new AMPMComponent();"
            ],
            [
                "LOCALE_CLOCK_TIME_12_HOUR",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent LOCALE_CLOCK_TIME_12_HOUR = new NotImplementedComponent(\"%r\", \"\");"
            ],
            [
                "HOUR_AND_MINUTE",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent HOUR_AND_MINUTE = new AliasComponent(\"%R\", \"%H:%M\");"
            ],
            [
                "SECOND",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent SECOND = new FieldComponent(\"%S\", \"[0-5]\\\\d|60\", Calendar.SECOND, \"%02d\");"
            ],
            [
                "TABULATION",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent TABULATION = new AliasComponent(\"%t\", \"\\t\");"
            ],
            [
                "TIME_ISO8601",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent TIME_ISO8601 = new AliasComponent(\"%T\", \"%H:%M:%S\");"
            ],
            [
                "DAY_OF_WEEK_1_7",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DAY_OF_WEEK_1_7 = new FieldComponent(\"%u\", \"[1-7]\", Calendar.DAY_OF_WEEK, -1, \"%1d\");"
            ],
            [
                "WEEK_OF_YEAR_FROM_SUNDAY",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent WEEK_OF_YEAR_FROM_SUNDAY = new FieldComponent(\"%U\", \"[0-4]\\\\d|5[0123]\", Calendar.WEEK_OF_YEAR, 1, \"%2d\");"
            ],
            [
                "WEEK_NUMBER_ISO8601",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent WEEK_NUMBER_ISO8601 = new NotImplementedComponent(\"%V\", \"0[1-9]|[2-4]\\\\d|5[0123]\");"
            ],
            [
                "DAY_OF_WEEK_0_6",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DAY_OF_WEEK_0_6 = new FieldComponent(\"%w\", \"[0-6]\", Calendar.DAY_OF_WEEK, \"%01d\");"
            ],
            [
                "WEEK_OF_YEAR_FROM_MONDAY",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent WEEK_OF_YEAR_FROM_MONDAY = new FieldComponent(\"%W\", \"[0-4]\\\\d|5[0123]\", Calendar.WEEK_OF_YEAR, \"%02d\");"
            ],
            [
                "LOCALE_DATE_REPRESENTATION",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent LOCALE_DATE_REPRESENTATION = new NotImplementedComponent(\"%x\", \"\");"
            ],
            [
                "LOCALE_TIME_REPRESENTATION",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent LOCALE_TIME_REPRESENTATION = new NotImplementedComponent(\"%X\", \"\");"
            ],
            [
                "YEAR_2_DIGITS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent YEAR_2_DIGITS = new FieldComponent(\"%y\", \"\\\\d\\\\d\", Calendar.YEAR, \"%02d\");"
            ],
            [
                "YEAR_4_DIGITS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent YEAR_4_DIGITS = new FieldComponent(\"%Y\", \"\\\\d{4}\", Calendar.YEAR, \"%04d\");"
            ],
            [
                "UTC_OFFSET",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent UTC_OFFSET = new UTCOffsetComponent();"
            ],
            [
                "LOCALE_TIME_ZONE_NAME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent LOCALE_TIME_ZONE_NAME = new NotImplementedComponent(\"%Z\", \"\\\\w*\");"
            ],
            [
                "PERCENT",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent PERCENT = new AliasComponent(\"%%\", \"%\");"
            ],
            [
                "jjbitVec0",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };"
            ],
            [
                "jjnextStates",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "static final int[] jjnextStates = { 5, 6, 8, 9, 13, 14 };"
            ],
            [
                "jjstrLiteralImages",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "public static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, \"\\133\", \"\\135\", null, null, null, null, null, null };"
            ],
            [
                "lexStateNames",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "public static final String[] lexStateNames = { \"DEFAULT\" };"
            ],
            [
                "jjtoToken",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "static final long[] jjtoToken = { 0xff01L };"
            ],
            [
                "jjtoSkip",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "static final long[] jjtoSkip = { 0x1eL };"
            ],
            [
                "jjbitVec0",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };"
            ],
            [
                "jjnextStates",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "static final int[] jjnextStates = { 54, 11, 12, 15, 17, 18, 1, 2, 5, 47, 52, 8, 9, 20, 21 };"
            ],
            [
                "jjstrLiteralImages",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "public static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, null, \"\\50\", \"\\51\", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null };"
            ],
            [
                "lexStateNames",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "public static final String[] lexStateNames = { \"DEFAULT\" };"
            ],
            [
                "jjtoToken",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "static final long[] jjtoToken = { 0xffffc01L };"
            ],
            [
                "jjtoSkip",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "static final long[] jjtoSkip = { 0x7eL };"
            ],
            [
                "XYZ_ATTR",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "public static final String XYZ_ATTR = \"xyz\";"
            ],
            [
                "WIDTH_ATTR",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "public static final String WIDTH_ATTR = \"ui.tikz.width\";"
            ],
            [
                "HEIGHT_ATTR",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "public static final String HEIGHT_ATTR = \"ui.tikz.height\";"
            ],
            [
                "DEFAULT_WIDTH",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "public static final double DEFAULT_WIDTH = 10;"
            ],
            [
                "DEFAULT_HEIGHT",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "public static final double DEFAULT_HEIGHT = 10;"
            ],
            [
                "DISPLAY_MIN_SIZE_IN_MM",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "public static final double DISPLAY_MIN_SIZE_IN_MM = 2;"
            ],
            [
                "DISPLAY_MAX_SIZE_IN_MM",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "public static final double DISPLAY_MAX_SIZE_IN_MM = 10;"
            ],
            [
                "jjbitVec0",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };"
            ],
            [
                "jjnextStates",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "static final int[] jjnextStates = { 21, 27, 8, 10, 11, 18, 19, 22, 23, 26, 1, 2, 13, 14 };"
            ],
            [
                "jjstrLiteralImages",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "public static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, null, \"\\133\", \"\\135\", \"\\173\", \"\\175\", \"\\72\", \"\\54\", \"\\75\", null, null, null, null, null, null, null, null, null, null, \"\\73\", null, null, null, null, null, null, null, null, null, \"\\137\" };"
            ],
            [
                "lexStateNames",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "public static final String[] lexStateNames = { \"DEFAULT\" };"
            ],
            [
                "jjtoToken",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "static final long[] jjtoToken = { 0x3ffffffc01L };"
            ],
            [
                "jjtoSkip",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "static final long[] jjtoSkip = { 0x7eL };"
            ],
            [
                "jjbitVec0",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };"
            ],
            [
                "jjnextStates",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "static final int[] jjnextStates = { 21, 22, 23, 17, 19, 2, 3, 5, 6, 8, 9 };"
            ],
            [
                "jjstrLiteralImages",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "public static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null };"
            ],
            [
                "lexStateNames",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "public static final String[] lexStateNames = { \"DEFAULT\" };"
            ],
            [
                "jjtoToken",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "static final long[] jjtoToken = { 0x3fffffffffffc9L };"
            ],
            [
                "jjtoSkip",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "static final long[] jjtoSkip = { 0x6L };"
            ],
            [
                "XMLNS",
                "org.graphstream.stream.file.gexf",
                "GEXF",
                "public static final String XMLNS = \"http://www.gexf.net/1.2draft\";"
            ],
            [
                "XMLNS_XSI",
                "org.graphstream.stream.file.gexf",
                "GEXF",
                "public static final String XMLNS_XSI = \"http://www.w3.org/2001/XMLSchema-instance\";"
            ],
            [
                "XMLNS_SL",
                "org.graphstream.stream.file.gexf",
                "GEXF",
                "public static final String XMLNS_SL = \"http://www.gexf.net/1.2draft http://www.gexf.net/1.2draft/gexf.xsd\";"
            ],
            [
                "XMLNS_VIZ",
                "org.graphstream.stream.file.gexf",
                "GEXF",
                "public static final String XMLNS_VIZ = \"http://www.gexf.net/1.2draft/viz\";"
            ],
            [
                "VERSION",
                "org.graphstream.stream.file.gexf",
                "GEXF",
                "public static final String VERSION = \"1.2\";"
            ],
            [
                "BUFFER_SIZE",
                "org.graphstream.stream.file.dgs",
                "DGSParser",
                "protected static final int BUFFER_SIZE = 4096;"
            ],
            [
                "ARRAY_OPEN",
                "org.graphstream.stream.file.dgs",
                "DGSParser",
                "public static final int ARRAY_OPEN = '{';"
            ],
            [
                "ARRAY_CLOSE",
                "org.graphstream.stream.file.dgs",
                "DGSParser",
                "public static final int ARRAY_CLOSE = '}';"
            ],
            [
                "MAP_OPEN",
                "org.graphstream.stream.file.dgs",
                "DGSParser",
                "public static final int MAP_OPEN = '[';"
            ],
            [
                "MAP_CLOSE",
                "org.graphstream.stream.file.dgs",
                "DGSParser",
                "public static final int MAP_CLOSE = ']';"
            ],
            [
                "gradientId",
                "org.graphstream.stream.file",
                "FileSinkSVG2",
                "static int gradientId = 0;"
            ],
            [
                "gradientId",
                "org.graphstream.stream.file",
                "SVGStyle",
                "static int gradientId = 0;"
            ],
            [
                "TIME_PREFIX",
                "org.graphstream.stream",
                "Timeline",
                "public static final String TIME_PREFIX = \"time\";"
            ],
            [
                "SYNC_DISABLE_KEY",
                "org.graphstream.stream.sync",
                "SinkTime",
                "public static final String SYNC_DISABLE_KEY = \"org.graphstream.stream.sync.disable\";"
            ],
            [
                "disableSync",
                "org.graphstream.stream.sync",
                "SinkTime",
                "protected static final boolean disableSync;"
            ],
            [
                "LIGHT_YELLOW",
                "org.graphstream.stream.netstream",
                "NetStreamReceiver",
                "protected static final String LIGHT_YELLOW = \"\u001b[33;1m\";"
            ],
            [
                "RESET",
                "org.graphstream.stream.netstream",
                "NetStreamReceiver",
                "protected static final String RESET = \"\u001b[0m\";"
            ],
            [
                "BUFFER_INITIAL_SIZE",
                "org.graphstream.stream.netstream",
                "NetStreamReceiver",
                "protected static final int BUFFER_INITIAL_SIZE = 8192;"
            ],
            [
                "BUFFER_INITIAL_SIZE",
                "org.graphstream.stream.netstream",
                "IncomingBuffer",
                "protected static final int BUFFER_INITIAL_SIZE = 8192;"
            ],
            [
                "EVENT_GETVERSION",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_GETVERSION = 0x00;"
            ],
            [
                "EVENT_START",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_START = 0x01;"
            ],
            [
                "EVENT_END",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_END = 0x02;"
            ],
            [
                "EVENT_ADD_NODE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_ADD_NODE = 0x10;"
            ],
            [
                "EVENT_DEL_NODE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_DEL_NODE = 0x11;"
            ],
            [
                "EVENT_ADD_EDGE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_ADD_EDGE = 0x12;"
            ],
            [
                "EVENT_DEL_EDGE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_DEL_EDGE = 0x13;"
            ],
            [
                "EVENT_STEP",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_STEP = 0x14;"
            ],
            [
                "EVENT_CLEARED",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_CLEARED = 0x15;"
            ],
            [
                "EVENT_ADD_GRAPH_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_ADD_GRAPH_ATTR = 0x16;"
            ],
            [
                "EVENT_CHG_GRAPH_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_CHG_GRAPH_ATTR = 0x17;"
            ],
            [
                "EVENT_DEL_GRAPH_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_DEL_GRAPH_ATTR = 0x18;"
            ],
            [
                "EVENT_ADD_NODE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_ADD_NODE_ATTR = 0x19;"
            ],
            [
                "EVENT_CHG_NODE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_CHG_NODE_ATTR = 0x1a;"
            ],
            [
                "EVENT_DEL_NODE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_DEL_NODE_ATTR = 0x1b;"
            ],
            [
                "EVENT_ADD_EDGE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_ADD_EDGE_ATTR = 0x1c;"
            ],
            [
                "EVENT_CHG_EDGE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_CHG_EDGE_ATTR = 0x1d;"
            ],
            [
                "EVENT_DEL_EDGE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_DEL_EDGE_ATTR = 0x1e;"
            ],
            [
                "TYPE_UNKNOWN",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_UNKNOWN = 0x00;"
            ],
            [
                "TYPE_BOOLEAN",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_BOOLEAN = 0x50;"
            ],
            [
                "TYPE_BOOLEAN_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_BOOLEAN_ARRAY = 0x51;"
            ],
            [
                "TYPE_BYTE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_BYTE = 0x52;"
            ],
            [
                "TYPE_BYTE_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_BYTE_ARRAY = 0x53;"
            ],
            [
                "TYPE_SHORT",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_SHORT = 0x54;"
            ],
            [
                "TYPE_SHORT_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_SHORT_ARRAY = 0x55;"
            ],
            [
                "TYPE_INT",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_INT = 0x56;"
            ],
            [
                "TYPE_INT_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_INT_ARRAY = 0x57;"
            ],
            [
                "TYPE_LONG",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_LONG = 0x58;"
            ],
            [
                "TYPE_LONG_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_LONG_ARRAY = 0x59;"
            ],
            [
                "TYPE_FLOAT",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_FLOAT = 0x5a;"
            ],
            [
                "TYPE_FLOAT_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_FLOAT_ARRAY = 0x5b;"
            ],
            [
                "TYPE_DOUBLE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_DOUBLE = 0x5c;"
            ],
            [
                "TYPE_DOUBLE_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_DOUBLE_ARRAY = 0x5d;"
            ],
            [
                "TYPE_STRING",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_STRING = 0x5e;"
            ],
            [
                "TYPE_RAW",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_RAW = 0x5f;"
            ],
            [
                "TYPE_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static byte TYPE_ARRAY = 0x60;"
            ],
            [
                "TYPE_NULL",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_NULL = 0x61;"
            ],
            [
                "COMMAND",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int COMMAND = 0x70;"
            ],
            [
                "NO_OPTIONS",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public final static int NO_OPTIONS = 0;"
            ],
            [
                "ENCODE",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public final static int ENCODE = 1;"
            ],
            [
                "DECODE",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public final static int DECODE = 0;"
            ],
            [
                "GZIP",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public final static int GZIP = 2;"
            ],
            [
                "DONT_GUNZIP",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public final static int DONT_GUNZIP = 4;"
            ],
            [
                "DO_BREAK_LINES",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public final static int DO_BREAK_LINES = 8;"
            ],
            [
                "URL_SAFE",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public final static int URL_SAFE = 16;"
            ],
            [
                "ORDERED",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public final static int ORDERED = 32;"
            ],
            [
                "INITIAL_EDGE_CAPACITY",
                "org.graphstream.graph.implementations",
                "AdjacencyListNode",
                "protected static final int INITIAL_EDGE_CAPACITY;"
            ],
            [
                "GROWTH_FACTOR",
                "org.graphstream.graph.implementations",
                "AdjacencyListNode",
                "protected static final double GROWTH_FACTOR = 1.1;"
            ],
            [
                "I_EDGE",
                "org.graphstream.graph.implementations",
                "AdjacencyListNode",
                "protected static final char I_EDGE = 0;"
            ],
            [
                "IO_EDGE",
                "org.graphstream.graph.implementations",
                "AdjacencyListNode",
                "protected static final char IO_EDGE = 1;"
            ],
            [
                "O_EDGE",
                "org.graphstream.graph.implementations",
                "AdjacencyListNode",
                "protected static final char O_EDGE = 2;"
            ],
            [
                "GROW_FACTOR",
                "org.graphstream.graph.implementations",
                "AdjacencyListGraph",
                "public static final double GROW_FACTOR = 1.1;"
            ],
            [
                "DEFAULT_NODE_CAPACITY",
                "org.graphstream.graph.implementations",
                "AdjacencyListGraph",
                "public static final int DEFAULT_NODE_CAPACITY = 128;"
            ],
            [
                "DEFAULT_EDGE_CAPACITY",
                "org.graphstream.graph.implementations",
                "AdjacencyListGraph",
                "public static final int DEFAULT_EDGE_CAPACITY = 1024;"
            ]
        ],
        "tokensMethodJavadocValues": [],
        "tokensMethodArguments": [
            [
                "styleSheet",
                "java.lang",
                "String"
            ]
        ],
        "tokensMethodVariablesNonPrivateNonStaticNonVoidMethods": [
            [
                "getDefaultSpriteRule",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleSheet",
                "public Rule getDefaultSpriteRule()"
            ],
            [
                "toString",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleSheet",
                "public String toString()"
            ],
            [
                "clone",
                "java.lang",
                "Object",
                "protected native Object clone() throws CloneNotSupportedException"
            ],
            [
                "getStyleGroupIdFor",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleSheet",
                "public String getStyleGroupIdFor(Element element, ArrayList<Rule> rules)"
            ],
            [
                "getEdgeStyleNameSpace",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleSheet",
                "public NameSpace getEdgeStyleNameSpace()"
            ],
            [
                "getSpriteStyleNameSpace",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleSheet",
                "public NameSpace getSpriteStyleNameSpace()"
            ],
            [
                "getDefaultEdgeRule",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleSheet",
                "public Rule getDefaultEdgeRule()"
            ],
            [
                "getNodeStyleNameSpace",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleSheet",
                "public NameSpace getNodeStyleNameSpace()"
            ],
            [
                "hashCode",
                "java.lang",
                "Object",
                "public native int hashCode()"
            ],
            [
                "equals",
                "java.lang",
                "Object",
                "public boolean equals(Object arg0)"
            ],
            [
                "getRulesFor",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleSheet",
                "public ArrayList<Rule> getRulesFor(Element element)"
            ],
            [
                "getDefaultNodeStyle",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleSheet",
                "public Style getDefaultNodeStyle()"
            ],
            [
                "getDefaultSpriteStyle",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleSheet",
                "public Style getDefaultSpriteStyle()"
            ],
            [
                "getDefaultEdgeStyle",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleSheet",
                "public Style getDefaultEdgeStyle()"
            ],
            [
                "getDefaultGraphStyle",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleSheet",
                "public Style getDefaultGraphStyle()"
            ],
            [
                "getClass",
                "java.lang",
                "Object",
                "public final native Class<? extends Object> getClass()"
            ],
            [
                "getDefaultGraphRule",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleSheet",
                "public Rule getDefaultGraphRule()"
            ],
            [
                "getDefaultNodeRule",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleSheet",
                "public Rule getDefaultNodeRule()"
            ],
            [
                "getGraphStyleNameSpace",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleSheet",
                "public NameSpace getGraphStyleNameSpace()"
            ],
            [
                "strip",
                "java.lang",
                "String",
                "public String strip()"
            ],
            [
                "regionMatches",
                "java.lang",
                "String",
                "public boolean regionMatches(int arg0, String arg1, int arg2, int arg3)"
            ],
            [
                "transform",
                "java.lang",
                "String",
                "public <R> R transform(Function<? super String, ? extends R> arg0)"
            ],
            [
                "getBytes",
                "java.lang",
                "String",
                "public byte[] getBytes()"
            ],
            [
                "toCharArray",
                "java.lang",
                "String",
                "public char[] toCharArray()"
            ],
            [
                "getBytes",
                "java.lang",
                "String",
                "public byte[] getBytes(String arg0) throws UnsupportedEncodingException"
            ],
            [
                "toLowerCase",
                "java.lang",
                "String",
                "public String toLowerCase(Locale arg0)"
            ],
            [
                "describeConstable",
                "java.lang",
                "String",
                "public Optional<String> describeConstable()"
            ],
            [
                "trim",
                "java.lang",
                "String",
                "public String trim()"
            ],
            [
                "equals",
                "java.lang",
                "String",
                "public boolean equals(Object arg0)"
            ],
            [
                "lastIndexOf",
                "java.lang",
                "String",
                "public int lastIndexOf(int arg0)"
            ],
            [
                "getBytes",
                "java.lang",
                "String",
                "public byte[] getBytes(Charset arg0)"
            ],
            [
                "intern",
                "java.lang",
                "String",
                "public native String intern()"
            ],
            [
                "subSequence",
                "java.lang",
                "String",
                "public CharSequence subSequence(int arg0, int arg1)"
            ],
            [
                "concat",
                "java.lang",
                "String",
                "public String concat(String arg0)"
            ],
            [
                "codePoints",
                "java.lang",
                "String",
                "public IntStream codePoints()"
            ],
            [
                "startsWith",
                "java.lang",
                "String",
                "public boolean startsWith(String arg0)"
            ],
            [
                "formatted",
                "java.lang",
                "String",
                "public String formatted(Object[] arg0)"
            ],
            [
                "toUpperCase",
                "java.lang",
                "String",
                "public String toUpperCase(Locale arg0)"
            ],
            [
                "isLatin1",
                "java.lang",
                "String",
                "boolean isLatin1()"
            ],
            [
                "coder",
                "java.lang",
                "String",
                "byte coder()"
            ],
            [
                "isBlank",
                "java.lang",
                "String",
                "public boolean isBlank()"
            ],
            [
                "toUpperCase",
                "java.lang",
                "String",
                "public String toUpperCase()"
            ],
            [
                "replaceFirst",
                "java.lang",
                "String",
                "public String replaceFirst(String arg0, String arg1)"
            ],
            [
                "toString",
                "java.lang",
                "String",
                "public String toString()"
            ],
            [
                "equalsIgnoreCase",
                "java.lang",
                "String",
                "public boolean equalsIgnoreCase(String arg0)"
            ],
            [
                "replace",
                "java.lang",
                "String",
                "public String replace(CharSequence arg0, CharSequence arg1)"
            ],
            [
                "value",
                "java.lang",
                "String",
                "byte[] value()"
            ],
            [
                "endsWith",
                "java.lang",
                "String",
                "public boolean endsWith(String arg0)"
            ],
            [
                "lastIndexOf",
                "java.lang",
                "String",
                "public int lastIndexOf(String arg0)"
            ],
            [
                "replaceAll",
                "java.lang",
                "String",
                "public String replaceAll(String arg0, String arg1)"
            ],
            [
                "resolveConstantDesc",
                "java.lang",
                "String",
                "public String resolveConstantDesc(MethodHandles.Lookup arg0)"
            ],
            [
                "charAt",
                "java.lang",
                "String",
                "public char charAt(int arg0)"
            ],
            [
                "codePointAt",
                "java.lang",
                "String",
                "public int codePointAt(int arg0)"
            ],
            [
                "contains",
                "java.lang",
                "String",
                "public boolean contains(CharSequence arg0)"
            ],
            [
                "startsWith",
                "java.lang",
                "String",
                "public boolean startsWith(String arg0, int arg1)"
            ],
            [
                "lastIndexOf",
                "java.lang",
                "String",
                "public int lastIndexOf(int arg0, int arg1)"
            ],
            [
                "matches",
                "java.lang",
                "String",
                "public boolean matches(String arg0)"
            ],
            [
                "replace",
                "java.lang",
                "String",
                "public String replace(char arg0, char arg1)"
            ],
            [
                "hashCode",
                "java.lang",
                "String",
                "public int hashCode()"
            ],
            [
                "isEmpty",
                "java.lang",
                "String",
                "public boolean isEmpty()"
            ],
            [
                "lines",
                "java.lang",
                "String",
                "public Stream<String> lines()"
            ],
            [
                "contentEquals",
                "java.lang",
                "String",
                "public boolean contentEquals(CharSequence arg0)"
            ],
            [
                "translateEscapes",
                "java.lang",
                "String",
                "public String translateEscapes()"
            ],
            [
                "compareTo",
                "java.lang",
                "String",
                "public int compareTo(String arg0)"
            ],
            [
                "stripTrailing",
                "java.lang",
                "String",
                "public String stripTrailing()"
            ],
            [
                "indexOf",
                "java.lang",
                "String",
                "public int indexOf(int arg0)"
            ],
            [
                "indexOf",
                "java.lang",
                "String",
                "public int indexOf(String arg0)"
            ],
            [
                "offsetByCodePoints",
                "java.lang",
                "String",
                "public int offsetByCodePoints(int arg0, int arg1)"
            ],
            [
                "stripLeading",
                "java.lang",
                "String",
                "public String stripLeading()"
            ],
            [
                "chars",
                "java.lang",
                "String",
                "public IntStream chars()"
            ],
            [
                "codePointCount",
                "java.lang",
                "String",
                "public int codePointCount(int arg0, int arg1)"
            ],
            [
                "stripIndent",
                "java.lang",
                "String",
                "public String stripIndent()"
            ],
            [
                "toLowerCase",
                "java.lang",
                "String",
                "public String toLowerCase()"
            ],
            [
                "length",
                "java.lang",
                "String",
                "public int length()"
            ],
            [
                "indent",
                "java.lang",
                "String",
                "public String indent(int arg0)"
            ],
            [
                "regionMatches",
                "java.lang",
                "String",
                "public boolean regionMatches(boolean arg0, int arg1, String arg2, int arg3, int arg4)"
            ],
            [
                "split",
                "java.lang",
                "String",
                "public String[] split(String arg0, int arg1)"
            ],
            [
                "lastIndexOf",
                "java.lang",
                "String",
                "public int lastIndexOf(String arg0, int arg1)"
            ],
            [
                "substring",
                "java.lang",
                "String",
                "public String substring(int arg0, int arg1)"
            ],
            [
                "contentEquals",
                "java.lang",
                "String",
                "public boolean contentEquals(StringBuffer arg0)"
            ],
            [
                "repeat",
                "java.lang",
                "String",
                "public String repeat(int arg0)"
            ],
            [
                "codePointBefore",
                "java.lang",
                "String",
                "public int codePointBefore(int arg0)"
            ],
            [
                "split",
                "java.lang",
                "String",
                "public String[] split(String arg0)"
            ],
            [
                "substring",
                "java.lang",
                "String",
                "public String substring(int arg0)"
            ],
            [
                "indexOf",
                "java.lang",
                "String",
                "public int indexOf(String arg0, int arg1)"
            ],
            [
                "indexOf",
                "java.lang",
                "String",
                "public int indexOf(int arg0, int arg1)"
            ],
            [
                "compareToIgnoreCase",
                "java.lang",
                "String",
                "public int compareToIgnoreCase(String arg0)"
            ],
            [
                "toString",
                "java.lang",
                "Object",
                "public String toString()"
            ],
            [
                "compareTo",
                "java.lang",
                "Comparable",
                "public abstract int compareTo(T arg0)"
            ],
            [
                "toString",
                "java.lang",
                "CharSequence",
                "public abstract String toString()"
            ],
            [
                "subSequence",
                "java.lang",
                "CharSequence",
                "public abstract CharSequence subSequence(int arg0, int arg1)"
            ],
            [
                "chars",
                "java.lang",
                "CharSequence",
                "public default IntStream chars()"
            ],
            [
                "length",
                "java.lang",
                "CharSequence",
                "public abstract int length()"
            ],
            [
                "charAt",
                "java.lang",
                "CharSequence",
                "public abstract char charAt(int arg0)"
            ],
            [
                "codePoints",
                "java.lang",
                "CharSequence",
                "public default IntStream codePoints()"
            ],
            [
                "isEmpty",
                "java.lang",
                "CharSequence",
                "public default boolean isEmpty()"
            ],
            [
                "describeConstable",
                "java.lang.constant",
                "Constable",
                "public abstract Optional<? extends ConstantDesc> describeConstable()"
            ],
            [
                "resolveConstantDesc",
                "java.lang.constant",
                "ConstantDesc",
                "public abstract Object resolveConstantDesc(MethodHandles.Lookup arg0) throws ReflectiveOperationException"
            ]
        ],
        "tokensMethodVariablesNonPrivateNonStaticAttributes": [
            [
                "defaultRule",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleSheet",
                "public Rule defaultRule;"
            ],
            [
                "graphRules",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleSheet",
                "public NameSpace graphRules = new NameSpace(Selector.Type.GRAPH);"
            ],
            [
                "nodeRules",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleSheet",
                "public NameSpace nodeRules = new NameSpace(Selector.Type.NODE);"
            ],
            [
                "edgeRules",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleSheet",
                "public NameSpace edgeRules = new NameSpace(Selector.Type.EDGE);"
            ],
            [
                "spriteRules",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleSheet",
                "public NameSpace spriteRules = new NameSpace(Selector.Type.SPRITE);"
            ],
            [
                "listeners",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleSheet",
                "public ArrayList<StyleSheetListener> listeners = new ArrayList<StyleSheetListener>();"
            ]
        ],
        "tokensOracleVariablesNonPrivateNonStaticNonVoidMethods": [],
        "tokensOracleVariablesNonPrivateNonStaticAttributes": []
    },
    {
        "id": 3075,
        "oracle": ";",
        "oracleType": "PRE",
        "projectName": "gs-core-1.3",
        "packageName": "org.graphstream.ui.graphicGraph.stylesheet",
        "className": "StyleSheet",
        "javadocTag": "@param select The elements for which this style must apply.",
        "methodJavadoc": "    /**\n\t * Parse only one style, create a rule with the given selector, and add this\n\t * rule.\n\t * \n\t * @param select\n\t *            The elements for which this style must apply.\n\t * @param styleString\n\t *            The style string to parse.\n\t */",
        "methodSourceCode": "public void parseStyleFromString(Selector select, String styleString) throws IOException{\n    StyleSheetParser parser = new StyleSheetParser(this, new StringReader(styleString));\n    Style style = new Style();\n    try {\n        parser.stylesStart(style);\n    } catch (ParseException e) {\n        throw new IOException(e.getMessage());\n    }\n    Rule rule = new Rule(select);\n    rule.setStyle(style);\n    addRule(rule);\n}",
        "classJavadoc": "/**\n * Implementation of the style sheets that can be stored in the graphic graph.\n * \n * @author Antoine Dutot\n */",
        "classSourceCode": "/*\n * Copyright 2006 - 2015\n *     Stefan Balev     <stefan.balev@graphstream-project.org>\n *     Julien Baudry    <julien.baudry@graphstream-project.org>\n *     Antoine Dutot    <antoine.dutot@graphstream-project.org>\n *     Yoann Pign\u00e9      <yoann.pigne@graphstream-project.org>\n *     Guilhelm Savin   <guilhelm.savin@graphstream-project.org>\n * \n * This file is part of GraphStream <http://graphstream-project.org>.\n * \n * GraphStream is a library whose purpose is to handle static or dynamic\n * graph, create them from scratch, file or any source and display them.\n * \n * This program is free software distributed under the terms of two licenses, the\n * CeCILL-C license that fits European law, and the GNU Lesser General Public\n * License. You can  use, modify and/ or redistribute the software under the terms\n * of the CeCILL-C license as circulated by CEA, CNRS and INRIA at the following\n * URL <http://www.cecill.info> or under the terms of the GNU LGPL as published by\n * the Free Software Foundation, either version 3 of the License, or (at your\n * option) any later version.\n * \n * This program is distributed in the hope that it will be useful, but WITHOUT ANY\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A\n * PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more details.\n * \n * You should have received a copy of the GNU Lesser General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n * \n * The fact that you are presently reading this means that you have had\n * knowledge of the CeCILL-C and LGPL licenses and that you accept their terms.\n */\npackage org.graphstream.ui.graphicGraph.stylesheet;\n\nimport java.awt.Color;\nimport java.io.BufferedInputStream;\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.io.Reader;\nimport java.io.StringReader;\nimport java.net.URL;\nimport java.util.ArrayList;\nimport java.util.HashMap;\n\nimport org.graphstream.graph.Edge;\nimport org.graphstream.graph.Element;\nimport org.graphstream.graph.Graph;\nimport org.graphstream.graph.Node;\nimport org.graphstream.ui.graphicGraph.GraphicSprite;\nimport org.graphstream.ui.graphicGraph.stylesheet.StyleConstants.StrokeMode;\nimport org.graphstream.ui.graphicGraph.stylesheet.parser.StyleSheetParser;\nimport org.graphstream.util.parser.ParseException;\n\n/**\n * Implementation of the style sheets that can be stored in the graphic graph.\n * \n * @author Antoine Dutot\n */\npublic class StyleSheet {\n\t// Attributes\n\n\t/**\n\t * The top-level default rule.\n\t */\n\tpublic Rule defaultRule;\n\n\t/**\n\t * The default, id and class rules for graphs.\n\t */\n\tpublic NameSpace graphRules = new NameSpace(Selector.Type.GRAPH);\n\n\t/**\n\t * The default, id and class rules for nodes.\n\t */\n\tpublic NameSpace nodeRules = new NameSpace(Selector.Type.NODE);\n\n\t/**\n\t * The default, id and class rules for edges.\n\t */\n\tpublic NameSpace edgeRules = new NameSpace(Selector.Type.EDGE);\n\n\t/**\n\t * The default, id and class rules for sprites.\n\t */\n\tpublic NameSpace spriteRules = new NameSpace(Selector.Type.SPRITE);\n\n\t/**\n\t * Set of listeners.\n\t */\n\tpublic ArrayList<StyleSheetListener> listeners = new ArrayList<StyleSheetListener>();\n\n\t// Constructors\n\n\t/**\n\t * New style sheet initialised to defaults.\n\t */\n\tpublic StyleSheet() {\n\t\tinitRules();\n\t}\n\n\t// Access\n\n\t/**\n\t * The default rule for graphs.\n\t * \n\t * @return A rule.\n\t */\n\tpublic Rule getDefaultGraphRule() {\n\t\treturn graphRules.defaultRule;\n\t}\n\n\t/**\n\t * The default rule for nodes.\n\t * \n\t * @return A rule.\n\t */\n\tpublic Rule getDefaultNodeRule() {\n\t\treturn nodeRules.defaultRule;\n\t}\n\n\t/**\n\t * The default rule for edges.\n\t * \n\t * @return A rule.\n\t */\n\tpublic Rule getDefaultEdgeRule() {\n\t\treturn edgeRules.defaultRule;\n\t}\n\n\t/**\n\t * The default rule for sprites.\n\t * \n\t * @return A rule.\n\t */\n\tpublic Rule getDefaultSpriteRule() {\n\t\treturn spriteRules.defaultRule;\n\t}\n\n\t/**\n\t * The default style for graphs.\n\t * \n\t * @return A style.\n\t */\n\tpublic Style getDefaultGraphStyle() {\n\t\treturn getDefaultGraphRule().getStyle();\n\t}\n\n\t/**\n\t * The default style for nodes.\n\t * \n\t * @return A style.\n\t */\n\tpublic Style getDefaultNodeStyle() {\n\t\treturn getDefaultNodeRule().getStyle();\n\t}\n\n\t/**\n\t * The default style for edges.\n\t * \n\t * @return A style.\n\t */\n\tpublic Style getDefaultEdgeStyle() {\n\t\treturn getDefaultEdgeRule().getStyle();\n\t}\n\n\t/**\n\t * The default style for sprites.\n\t * \n\t * @return A style.\n\t */\n\tpublic Style getDefaultSpriteStyle() {\n\t\treturn getDefaultSpriteRule().getStyle();\n\t}\n\n\t/**\n\t * All the rules (default, specific and class) that apply to graphs.\n\t * \n\t * @return The set of rules for graphs.\n\t */\n\tpublic NameSpace getGraphStyleNameSpace() {\n\t\treturn graphRules;\n\t}\n\n\t/**\n\t * All the rules (default, specific and class) that apply to nodes.\n\t * \n\t * @return The set of rules for nodes.\n\t */\n\tpublic NameSpace getNodeStyleNameSpace() {\n\t\treturn nodeRules;\n\t}\n\n\t/**\n\t * All the rules (default, specific and class) that apply to edges.\n\t * \n\t * @return The set of rules for edges.\n\t */\n\tpublic NameSpace getEdgeStyleNameSpace() {\n\t\treturn edgeRules;\n\t}\n\n\t/**\n\t * All the rules (default, specific and class) that apply to sprites.\n\t * \n\t * @return The set of rules for sprites.\n\t */\n\tpublic NameSpace getSpriteStyleNameSpace() {\n\t\treturn spriteRules;\n\t}\n\n\t/**\n\t * Get the rules that match a given element.\n\t * \n\t * First a rule for the identifier of the element is looked for. It is\n\t * looked for in its name space (nodes for Node element, etc.) If it is not\n\t * found, the default rule for this kind of element is used. This rule is\n\t * pushed at start of the returned array of rules.\n\t * \n\t * After a rule for the element is found, then the various classes the\n\t * element pertains to are looked at and each class rule found is added in\n\t * order in the returned array.\n\t * \n\t * @param element\n\t *            The element a rules are searched for.\n\t * @return A set of rules matching the element, with the main rule at index\n\t *         0.\n\t */\n\tpublic ArrayList<Rule> getRulesFor(Element element) {\n\t\tArrayList<Rule> rules = null;\n\n\t\tif (element instanceof Graph) {\n\t\t\trules = graphRules.getRulesFor(element);\n\t\t} else if (element instanceof Node) {\n\t\t\trules = nodeRules.getRulesFor(element);\n\t\t} else if (element instanceof Edge) {\n\t\t\trules = edgeRules.getRulesFor(element);\n\t\t} else if (element instanceof GraphicSprite) {\n\t\t\trules = spriteRules.getRulesFor(element);\n\t\t} else {\n\t\t\trules = new ArrayList<Rule>();\n\t\t\trules.add(defaultRule);\n\t\t}\n\n\t\treturn rules;\n\t}\n\n\t/**\n\t * Compute the name of the style group and element will pertain to knowing\n\t * its styling rules.\n\t * \n\t * @param element\n\t *            The element.\n\t * @param rules\n\t *            The styling rules.\n\t * @return The unique identifier of the style group for the element.\n\t * @see #getRulesFor(Element)\n\t */\n\tpublic String getStyleGroupIdFor(Element element, ArrayList<Rule> rules) {\n\t\tStringBuilder builder = new StringBuilder();\n\n\t\tif (element instanceof Graph) {\n\t\t\tbuilder.append(\"g\");\n\t\t} else if (element instanceof Node) {\n\t\t\tbuilder.append(\"n\");\n\t\t} else if (element instanceof Edge) {\n\t\t\tbuilder.append(\"e\");\n\t\t} else if (element instanceof GraphicSprite) {\n\t\t\tbuilder.append(\"s\");\n\t\t} else {\n\t\t\tthrow new RuntimeException(\"What ?\");\n\t\t}\n\n\t\tif (rules.get(0).selector.getId() != null) {\n\t\t\tbuilder.append('_');\n\t\t\tbuilder.append(rules.get(0).selector.getId());\n\t\t}\n\n\t\tint n = rules.size();\n\n\t\tif (n > 1) {\n\t\t\tbuilder.append('(');\n\t\t\tbuilder.append(rules.get(1).selector.getClazz());\n\t\t\tfor (int i = 2; i < n; i++) {\n\t\t\t\tbuilder.append(',');\n\t\t\t\tbuilder.append(rules.get(i).selector.getClazz());\n\t\t\t}\n\t\t\tbuilder.append(')');\n\t\t}\n\n\t\treturn builder.toString();\n\t}\n\n\t// Commands\n\n\t/**\n\t * Create the default rules. This method is the place to set defaults for\n\t * specific element types. This is here that the edge width is reset to one,\n\t * since the default width is larger. The default z index that is different\n\t * for every class of element is also set here.\n\t */\n\tprotected void initRules() {\n\t\tdefaultRule = new Rule(new Selector(Selector.Type.ANY), null);\n\n\t\tdefaultRule.getStyle().setDefaults();\n\n\t\tgraphRules.defaultRule = new Rule(new Selector(Selector.Type.GRAPH),\n\t\t\t\tdefaultRule);\n\t\tnodeRules.defaultRule = new Rule(new Selector(Selector.Type.NODE),\n\t\t\t\tdefaultRule);\n\t\tedgeRules.defaultRule = new Rule(new Selector(Selector.Type.EDGE),\n\t\t\t\tdefaultRule);\n\t\tspriteRules.defaultRule = new Rule(new Selector(Selector.Type.SPRITE),\n\t\t\t\tdefaultRule);\n\n\t\tgraphRules.defaultRule.getStyle().setValue(\"padding\",\n\t\t\t\tnew Values(Style.Units.PX, 30));\n\t\tedgeRules.defaultRule.getStyle().setValue(\"shape\",\n\t\t\t\tStyleConstants.Shape.LINE);\n\t\tedgeRules.defaultRule.getStyle().setValue(\"size\",\n\t\t\t\tnew Values(Style.Units.PX, 1));\n\t\tedgeRules.defaultRule.getStyle().setValue(\"z-index\", new Integer(1));\n\t\tnodeRules.defaultRule.getStyle().setValue(\"z-index\", new Integer(2));\n\t\tspriteRules.defaultRule.getStyle().setValue(\"z-index\", new Integer(3));\n\n\t\tColors colors = new Colors();\n\t\tcolors.add(Color.WHITE);\n\n\t\tgraphRules.defaultRule.getStyle().setValue(\"fill-color\", colors);\n\t\tgraphRules.defaultRule.getStyle().setValue(\"stroke-mode\",\n\t\t\t\tStrokeMode.NONE);\n\n\t\tfor (StyleSheetListener listener : listeners) {\n\t\t\tlistener.styleAdded(defaultRule, defaultRule);\n\t\t\tlistener.styleAdded(graphRules.defaultRule, graphRules.defaultRule);\n\t\t\tlistener.styleAdded(nodeRules.defaultRule, nodeRules.defaultRule);\n\t\t\tlistener.styleAdded(edgeRules.defaultRule, edgeRules.defaultRule);\n\t\t\tlistener.styleAdded(spriteRules.defaultRule,\n\t\t\t\t\tspriteRules.defaultRule);\n\t\t}\n\n\t\t// for( StyleSheetListener listener: listeners )\n\t\t// listener.styleAdded( defaultRule, defaultRule );\n\t\t// for( StyleSheetListener listener: listeners )\n\t\t// listener.styleAdded( graphRules.defaultRule, graphRules.defaultRule\n\t\t// );\n\t\t// for( StyleSheetListener listener: listeners )\n\t\t// listener.styleAdded( nodeRules.defaultRule, nodeRules.defaultRule );\n\t\t// for( StyleSheetListener listener: listeners )\n\t\t// listener.styleAdded( edgeRules.defaultRule, edgeRules.defaultRule );\n\t\t// for( StyleSheetListener listener: listeners )\n\t\t// listener.styleAdded( spriteRules.defaultRule, spriteRules.defaultRule\n\t\t// );\n\t}\n\n\t/**\n\t * Add a listener for style events. You never receive events for default\n\t * rules and styles. You receive events only for the rules and styles that\n\t * are added after this listener is registered.\n\t * \n\t * @param listener\n\t *            The new listener.\n\t */\n\tpublic void addListener(StyleSheetListener listener) {\n\t\tlisteners.add(listener);\n\t}\n\n\t/**\n\t * Remove a previously registered listener.\n\t * \n\t * @param listener\n\t *            The listener to remove.\n\t */\n\tpublic void removeListener(StyleSheetListener listener) {\n\t\tint index = listeners.indexOf(listener);\n\n\t\tif (index >= 0)\n\t\t\tlisteners.remove(index);\n\t}\n\n\t/**\n\t * Clear all specific rules and initialise the default rules. The listeners\n\t * are not changed.\n\t */\n\tpublic void clear() {\n\t\tgraphRules.clear();\n\t\tnodeRules.clear();\n\t\tedgeRules.clear();\n\t\tspriteRules.clear();\n\t\tinitRules();\n\n\t\tfor (StyleSheetListener listener : listeners)\n\t\t\tlistener.styleSheetCleared();\n\t}\n\n\t/**\n\t * Parse a style sheet from a file. The style sheet will complete the\n\t * previously parsed style sheets.\n\t * \n\t * @param fileName\n\t *            Name of the file containing the style sheet.\n\t * @throws IOException\n\t *             For any kind of I/O error or parse error.\n\t */\n\tpublic void parseFromFile(String fileName) throws IOException {\n\t\tparse(new InputStreamReader(new BufferedInputStream(\n\t\t\t\tnew FileInputStream(fileName))));\n\t}\n\n\t/**\n\t * Parse a style sheet from an URL. The style sheet will complete the\n\t * previously parsed style sheets. First, this method will search the URL as\n\t * SystemRessource, then as a file and if there is no match, just try to\n\t * create an URL object giving the URL as constructor's parameter.\n\t * \n\t * @param url\n\t *            Name of the file containing the style sheet.\n\t * @throws IOException\n\t *             For any kind of I/O error or parse error.\n\t */\n\tpublic void parseFromURL(String url) throws IOException {\n\t\tURL u = StyleSheet.class.getClassLoader().getResource(url);\n\t\tif (u == null) {\n\t\t\tFile f = new File(url);\n\n\t\t\tif (f.exists())\n\t\t\t\tu = f.toURI().toURL();\n\t\t\telse\n\t\t\t\tu = new URL(url);\n\t\t}\n\n\t\tparse(new InputStreamReader(u.openStream()));\n\t}\n\n\t/**\n\t * Parse a style sheet from a string. The style sheet will complete the\n\t * previously parsed style sheets.\n\t * \n\t * @param styleSheet\n\t *            The string containing the whole style sheet.\n\t * @throws IOException\n\t *             For any kind of I/O error or parse error.\n\t */\n\tpublic void parseFromString(String styleSheet) throws IOException {\n\t\tparse(new StringReader(styleSheet));\n\t}\n\n\t/**\n\t * Parse only one style, create a rule with the given selector, and add this\n\t * rule.\n\t * \n\t * @param select\n\t *            The elements for which this style must apply.\n\t * @param styleString\n\t *            The style string to parse.\n\t */\n\tpublic void parseStyleFromString(Selector select, String styleString)\n\t\t\tthrows IOException {\n\t\tStyleSheetParser parser = new StyleSheetParser(this, new StringReader(\n\t\t\t\tstyleString));\n\n\t\tStyle style = new Style();\n\n\t\ttry {\n\t\t\tparser.stylesStart(style);\n\t\t} catch (ParseException e) {\n\t\t\tthrow new IOException(e.getMessage());\n\t\t}\n\n\t\tRule rule = new Rule(select);\n\n\t\trule.setStyle(style);\n\t\taddRule(rule);\n\t}\n\n\t/**\n\t * Load a style sheet from an attribute value, the value can either be the\n\t * contents of the whole style sheet, or begin by \"url\". If it starts with\n\t * \"url\", it must then contain between parenthesis the string of the URL to\n\t * load. For example:\n\t * \n\t * <pre>\n\t * \t\turl('file:///some/path/on/the/file/system')\n\t * </pre>\n\t * \n\t * Or\n\t * \n\t * <pre>\n\t * \t\turl('http://some/web/url')\n\t * </pre>\n\t * \n\t * The loaded style sheet will be merged with the styles already present in\n\t * the style sheet.\n\t * \n\t * @param styleSheetValue\n\t *            The style sheet name of content.\n\t * @throws IOException\n\t *             If the loading or parsing of the style sheet failed.\n\t */\n\tpublic void load(String styleSheetValue) throws IOException {\n\t\tif (styleSheetValue.startsWith(\"url\")) {\n\t\t\t// Extract the part between '(' and ')'.\n\n\t\t\tint beg = styleSheetValue.indexOf('(');\n\t\t\tint end = styleSheetValue.lastIndexOf(')');\n\n\t\t\tif (beg >= 0 && end > beg)\n\t\t\t\tstyleSheetValue = styleSheetValue.substring(beg + 1, end);\n\n\t\t\tstyleSheetValue = styleSheetValue.trim();\n\n\t\t\t// Remove the quotes (') or (\").\n\n\t\t\tif (styleSheetValue.startsWith(\"'\")) {\n\t\t\t\tbeg = 0;\n\t\t\t\tend = styleSheetValue.lastIndexOf('\\'');\n\n\t\t\t\tif (beg >= 0 && end > beg)\n\t\t\t\t\tstyleSheetValue = styleSheetValue.substring(beg + 1, end);\n\t\t\t}\n\n\t\t\tstyleSheetValue = styleSheetValue.trim();\n\n\t\t\tif (styleSheetValue.startsWith(\"\\\"\")) {\n\t\t\t\tbeg = 0;\n\t\t\t\tend = styleSheetValue.lastIndexOf('\"');\n\n\t\t\t\tif (beg >= 0 && end > beg)\n\t\t\t\t\tstyleSheetValue = styleSheetValue.substring(beg + 1, end);\n\t\t\t}\n\n\t\t\t// That's it.\n\n\t\t\tparseFromURL(styleSheetValue);\n\t\t} else // Parse from string, the value is considered to be the style\n\t\t\t\t// sheet contents.\n\t\t{\n\t\t\tparseFromString(styleSheetValue);\n\t\t}\n\t}\n\n\t/**\n\t * Parse the style sheet from the given reader.\n\t * \n\t * @param reader\n\t *            The reader pointing at the style sheet.\n\t * @throws IOException\n\t *             For any kind of I/O error or parse error.\n\t */\n\tprotected void parse(Reader reader) throws IOException {\n\t\tStyleSheetParser parser = new StyleSheetParser(this, reader);\n\n\t\ttry {\n\t\t\tparser.start();\n\t\t} catch (ParseException e) {\n\t\t\tthrow new IOException(e.getMessage());\n\t\t}\n\t}\n\n\t/**\n\t * Add a new rule with its style. If the rule selector is just GRAPH, NODE,\n\t * EDGE or SPRITE, the default corresponding rules make a copy (or\n\t * augmentation) of its style. Else if an id or class is specified the rules\n\t * are added (or changed/augmented if the id or class was already set) and\n\t * their parent is set to the default graph, node, edge or sprite rules. If\n\t * this is an event rule (or meta-class rule), its sibling rule (the same\n\t * rule without the meta-class) is searched and created if not found and the\n\t * event rule is added as an alternative to it.\n\t * \n\t * @param newRule\n\t *            The new rule.\n\t */\n\tpublic void addRule(Rule newRule) {\n\t\tRule oldRule = null;\n\n\t\tswitch (newRule.selector.getType()) {\n\t\tcase ANY:\n\t\t\tthrow new RuntimeException(\n\t\t\t\t\t\"The ANY selector should never be used, it is created automatically.\");\n\t\tcase GRAPH:\n\t\t\toldRule = graphRules.addRule(newRule);\n\t\t\tbreak;\n\t\tcase NODE:\n\t\t\toldRule = nodeRules.addRule(newRule);\n\t\t\tbreak;\n\t\tcase EDGE:\n\t\t\toldRule = edgeRules.addRule(newRule);\n\t\t\tbreak;\n\t\tcase SPRITE:\n\t\t\toldRule = spriteRules.addRule(newRule);\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tthrow new RuntimeException(\"Ho ho ho ?\");\n\t\t}\n\n\t\tfor (StyleSheetListener listener : listeners)\n\t\t\tlistener.styleAdded(oldRule, newRule);\n\t}\n\n\t@Override\n\tpublic String toString() {\n\t\tStringBuilder builder = new StringBuilder();\n\n\t\tbuilder.append(\"StyleSheet : {\\n\");\n\t\tbuilder.append(\"  default styles:\\n\");\n\t\tbuilder.append(defaultRule.toString(1));\n\t\tbuilder.append(graphRules.toString(1));\n\t\tbuilder.append(nodeRules.toString(1));\n\t\tbuilder.append(edgeRules.toString(1));\n\t\tbuilder.append(spriteRules.toString(1));\n\n\t\treturn builder.toString();\n\t}\n\n\t// Nested classes\n\n\t/**\n\t * A name space is a tuple (default rule, id rule set, class rule set).\n\t * \n\t * <p>\n\t * The name space defines a default rule for a kind of elements, a set of\n\t * rules for this kind of elements with a given identifier, and a set or\n\t * rules for this kind of elements with a given class.\n\t * </p>\n\t */\n\tpublic class NameSpace {\n\t\t// Attribute\n\n\t\t/**\n\t\t * The kind of elements in this name space.\n\t\t */\n\t\tpublic Selector.Type type;\n\n\t\t/**\n\t\t * The default rule for this kind of elements.\n\t\t */\n\t\tpublic Rule defaultRule;\n\n\t\t/**\n\t\t * The set of rules for this kind of elements with a given identifier.\n\t\t */\n\t\tpublic HashMap<String, Rule> byId = new HashMap<String, Rule>();\n\n\t\t/**\n\t\t * The set of rules for this kind of elements with a given class.\n\t\t */\n\t\tpublic HashMap<String, Rule> byClass = new HashMap<String, Rule>();\n\n\t\t// Constructor\n\n\t\tpublic NameSpace(Selector.Type type) {\n\t\t\tthis.type = type;\n\t\t}\n\n\t\t// Access\n\n\t\t/**\n\t\t * The kind of elements this name space applies rules to.\n\t\t * \n\t\t * @return A type of element (node, edge, sprite, graph).\n\t\t */\n\t\tpublic Selector.Type getGraphElementType() {\n\t\t\treturn type;\n\t\t}\n\n\t\t/**\n\t\t * Number of specific (id) rules.\n\t\t * \n\t\t * @return The number of rules that apply to elements by their\n\t\t *         identifiers.\n\t\t */\n\t\tpublic int getIdRulesCount() {\n\t\t\treturn byId.size();\n\t\t}\n\n\t\t/**\n\t\t * Number of specific (class) rules.\n\t\t * \n\t\t * @return The number of rules that apply to elements by their classes.\n\t\t */\n\t\tpublic int getClassRulesCount() {\n\t\t\treturn byClass.size();\n\t\t}\n\n\t\t/**\n\t\t * Get the rules that match a given element. The rules are returned in a\n\t\t * given order. The array always contain the \"main\" rule that matches\n\t\t * the element. This rule is either a default rule for the kind of\n\t\t * element given or the rule that matches its identifier if there is\n\t\t * one. Then class rules the element has can be appended to this array\n\t\t * in order.\n\t\t * \n\t\t * @return an array of rules that match the element, with the main rule\n\t\t *         at index 0.\n\t\t */\n\t\tprotected ArrayList<Rule> getRulesFor(Element element) {\n\t\t\tRule rule = byId.get(element.getId());\n\t\t\tArrayList<Rule> rules = new ArrayList<Rule>();\n\n\t\t\tif (rule != null)\n\t\t\t\trules.add(rule);\n\t\t\telse\n\t\t\t\trules.add(defaultRule);\n\n\t\t\tgetClassRules(element, rules);\n\n\t\t\tif (rules.isEmpty())\n\t\t\t\trules.add(defaultRule);\n\n\t\t\treturn rules;\n\t\t}\n\n\t\t/**\n\t\t * Search if the given element has classes attributes and fill the given\n\t\t * array with the set of rules that match these classes.\n\t\t * \n\t\t * @param element\n\t\t *            The element for which classes must be found.\n\t\t * @param rules\n\t\t *            The rule array to fill.\n\t\t */\n\t\tprotected void getClassRules(Element element, ArrayList<Rule> rules) {\n\t\t\tObject o = element.getAttribute(\"ui.class\");\n\n\t\t\tif (o != null) {\n\t\t\t\tif (o instanceof Object[]) {\n\t\t\t\t\tfor (Object s : (Object[]) o) {\n\t\t\t\t\t\tif (s instanceof CharSequence) {\n\t\t\t\t\t\t\tRule rule = byClass.get((CharSequence) s);\n\n\t\t\t\t\t\t\tif (rule != null)\n\t\t\t\t\t\t\t\trules.add(rule);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else if (o instanceof CharSequence) {\n\t\t\t\t\tString classList = ((CharSequence) o).toString().trim();\n\t\t\t\t\tString[] classes = classList.split(\"\\\\s*,\\\\s*\");\n\n\t\t\t\t\tfor (String c : classes) {\n\t\t\t\t\t\tRule rule = byClass.get(c);\n\n\t\t\t\t\t\tif (rule != null)\n\t\t\t\t\t\t\trules.add(rule);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tthrow new RuntimeException(\n\t\t\t\t\t\t\t\"Oups ! class attribute is of type \"\n\t\t\t\t\t\t\t\t\t+ o.getClass().getName());\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Command\n\n\t\t/**\n\t\t * Remove all styles.\n\t\t */\n\t\tprotected void clear() {\n\t\t\tdefaultRule = null;\n\t\t\tbyId.clear();\n\t\t\tbyClass.clear();\n\t\t}\n\n\t\t/**\n\t\t * Add a new rule.\n\t\t * \n\t\t * <p>\n\t\t * Several cases can occur :\n\t\t * </p>\n\t\t * \n\t\t * <ul>\n\t\t * <li>The rule to add has an ID or class and the rule does not yet\n\t\t * exists and is not an event rule : add it directly.</li>\n\t\t * <li>If the rule has an ID or class but the rule already exists,\n\t\t * augment to already existing rule.</li>\n\t\t * <li>If the rule has no ID or class and is not an event, augment the\n\t\t * default style.</li>\n\t\t * <li>If the rule is an event, the corresponding normal rule is\n\t\t * searched, if it does not exists, it is created then or else, the\n\t\t * event is added to the found rule.</li>\n\t\t * </ul>\n\t\t * \n\t\t * @param newRule\n\t\t *            The rule to add or copy.\n\t\t * @return It the rule added augments an existing rule, this existing\n\t\t *         rule is returned, else null is returned.\n\t\t */\n\t\tprotected Rule addRule(Rule newRule) {\n\t\t\tRule oldRule = null;\n\n\t\t\tif (newRule.selector.getPseudoClass() != null) {\n\t\t\t\toldRule = addEventRule(newRule);\n\t\t\t} else if (newRule.selector.getId() != null) {\n\t\t\t\toldRule = byId.get(newRule.selector.getId());\n\n\t\t\t\tif (oldRule != null) {\n\t\t\t\t\toldRule.getStyle().augment(newRule.getStyle());\n\t\t\t\t} else {\n\t\t\t\t\tbyId.put(newRule.selector.getId(), newRule);\n\t\t\t\t\tnewRule.getStyle().reparent(defaultRule);\n\t\t\t\t}\n\t\t\t} else if (newRule.selector.getClazz() != null) {\n\t\t\t\toldRule = byClass.get(newRule.selector.getClazz());\n\n\t\t\t\tif (oldRule != null) {\n\t\t\t\t\toldRule.getStyle().augment(newRule.getStyle());\n\t\t\t\t} else {\n\t\t\t\t\tbyClass.put(newRule.selector.getClazz(), newRule);\n\t\t\t\t\tnewRule.getStyle().reparent(defaultRule);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\toldRule = defaultRule;\n\t\t\t\tdefaultRule.getStyle().augment(newRule.getStyle());\n\t\t\t\tnewRule = defaultRule;\n\t\t\t}\n\n\t\t\t// That's it.\n\n\t\t\treturn oldRule;\n\t\t}\n\n\t\tprotected Rule addEventRule(Rule newRule) {\n\t\t\tRule parentRule = null;\n\n\t\t\tif (newRule.selector.getId() != null) {\n\t\t\t\tparentRule = byId.get(newRule.selector.getId());\n\n\t\t\t\tif (parentRule == null) {\n\t\t\t\t\tparentRule = addRule(new Rule(new Selector(\n\t\t\t\t\t\t\tnewRule.selector.getType(),\n\t\t\t\t\t\t\tnewRule.selector.getId(),\n\t\t\t\t\t\t\tnewRule.selector.getClazz())));\n\t\t\t\t}\n\t\t\t} else if (newRule.selector.getClazz() != null) {\n\t\t\t\tparentRule = byClass.get(newRule.selector.getClazz());\n\n\t\t\t\tif (parentRule == null) {\n\t\t\t\t\tparentRule = addRule(new Rule(new Selector(\n\t\t\t\t\t\t\tnewRule.selector.getType(),\n\t\t\t\t\t\t\tnewRule.selector.getId(),\n\t\t\t\t\t\t\tnewRule.selector.getClazz())));\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tparentRule = defaultRule;\n\t\t\t}\n\n\t\t\tnewRule.getStyle().reparent(parentRule);\n\t\t\tparentRule.getStyle().addAlternateStyle(\n\t\t\t\t\tnewRule.selector.getPseudoClass(), newRule);\n\n\t\t\treturn parentRule;\n\t\t}\n\n\t\t@Override\n\t\tpublic String toString() {\n\t\t\treturn toString(-1);\n\t\t}\n\n\t\tpublic String toString(int level) {\n\t\t\tString prefix = \"\";\n\n\t\t\tif (level > 0) {\n\t\t\t\tfor (int i = 0; i < level; i++)\n\t\t\t\t\tprefix += \"    \";\n\t\t\t}\n\n\t\t\tStringBuilder builder = new StringBuilder();\n\n\t\t\tbuilder.append(String\n\t\t\t\t\t.format(\"%s%s default style :%n\", prefix, type));\n\t\t\tbuilder.append(defaultRule.toString(level + 1));\n\t\t\ttoStringRules(level, builder, byId,\n\t\t\t\t\tString.format(\"%s%s id styles\", prefix, type));\n\t\t\ttoStringRules(level, builder, byClass,\n\t\t\t\t\tString.format(\"%s%s class styles\", prefix, type));\n\n\t\t\treturn builder.toString();\n\t\t}\n\n\t\tprotected void toStringRules(int level, StringBuilder builder,\n\t\t\t\tHashMap<String, Rule> rules, String title) {\n\t\t\tbuilder.append(title);\n\t\t\tbuilder.append(String.format(\" :%n\"));\n\n\t\t\tfor (Rule rule : rules.values())\n\t\t\t\tbuilder.append(rule.toString(level + 1));\n\t\t}\n\t}\n}",
        "tokensGeneralGrammar": [
            "null",
            "true",
            "false",
            ",",
            ".",
            ":",
            ";",
            "?",
            "(",
            ")",
            "jdVar",
            "stream",
            "Arrays",
            "allMatch",
            "noneMatch",
            "anyMatch",
            "~",
            ">>",
            "<<",
            ">>>",
            "|",
            "&",
            "^",
            "+",
            "-",
            "/",
            "*",
            "%",
            "&&",
            "||",
            ">=",
            "<=",
            ">",
            "<",
            "==",
            "!=",
            "instanceof",
            "class",
            "methodResultID",
            "this"
        ],
        "tokensGeneralValuesGlobalDictionary": [
            [
                "0",
                "int"
            ],
            [
                "1",
                "int"
            ],
            [
                "-1",
                "int"
            ],
            [
                "0.0",
                "double"
            ],
            [
                "1.0",
                "double"
            ],
            [
                "-1.0",
                "double"
            ],
            [
                "\"\"",
                "String"
            ],
            [
                "\" \"",
                "String"
            ]
        ],
        "tokensProjectClasses": [
            [
                "DefaultCamera",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "GradientFactory",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "GraphMetrics",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "Graphics2DOutput",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "ImageCache",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "StrokeFactory",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "FontCache",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "FontSlot",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "DefaultView",
                "org.graphstream.ui.swingViewer"
            ],
            [
                "SpriteRenderer",
                "org.graphstream.ui.swingViewer.basicRenderer"
            ],
            [
                "ElementRenderer",
                "org.graphstream.ui.swingViewer.basicRenderer"
            ],
            [
                "NodeRenderer",
                "org.graphstream.ui.swingViewer.basicRenderer"
            ],
            [
                "Arrow",
                "org.graphstream.ui.swingViewer.basicRenderer.shapes"
            ],
            [
                "Shape",
                "org.graphstream.ui.swingViewer.basicRenderer.shapes"
            ],
            [
                "EdgeRenderer",
                "org.graphstream.ui.swingViewer.basicRenderer"
            ],
            [
                "SwingBasicGraphRenderer",
                "org.graphstream.ui.swingViewer.basicRenderer"
            ],
            [
                "GraphRendererBase",
                "org.graphstream.ui.swingViewer"
            ],
            [
                "GraphRenderer",
                "org.graphstream.ui.swingViewer"
            ],
            [
                "LayerRenderer",
                "org.graphstream.ui.swingViewer"
            ],
            [
                "ViewPanel",
                "org.graphstream.ui.swingViewer"
            ],
            [
                "Layouts",
                "org.graphstream.ui.layout"
            ],
            [
                "Layout",
                "org.graphstream.ui.layout"
            ],
            [
                "LayoutRunner",
                "org.graphstream.ui.layout"
            ],
            [
                "NodeParticle",
                "org.graphstream.ui.layout.springbox"
            ],
            [
                "GraphCellData",
                "org.graphstream.ui.layout.springbox"
            ],
            [
                "EdgeSpring",
                "org.graphstream.ui.layout.springbox"
            ],
            [
                "Energies",
                "org.graphstream.ui.layout.springbox"
            ],
            [
                "BarnesHutLayout",
                "org.graphstream.ui.layout.springbox"
            ],
            [
                "LinLog",
                "org.graphstream.ui.layout.springbox.implementations"
            ],
            [
                "LinLogNodeParticle",
                "org.graphstream.ui.layout.springbox.implementations"
            ],
            [
                "SpringBoxNodeParticle",
                "org.graphstream.ui.layout.springbox.implementations"
            ],
            [
                "SpringBox",
                "org.graphstream.ui.layout.springbox.implementations"
            ],
            [
                "Point2",
                "org.graphstream.ui.geom"
            ],
            [
                "Vector2",
                "org.graphstream.ui.geom"
            ],
            [
                "Vector3",
                "org.graphstream.ui.geom"
            ],
            [
                "Point3",
                "org.graphstream.ui.geom"
            ],
            [
                "ViewerListener",
                "org.graphstream.ui.view"
            ],
            [
                "MouseManager",
                "org.graphstream.ui.view.util"
            ],
            [
                "ShortcutManager",
                "org.graphstream.ui.view.util"
            ],
            [
                "DefaultShortcutManager",
                "org.graphstream.ui.view.util"
            ],
            [
                "FpsCounter",
                "org.graphstream.ui.view.util"
            ],
            [
                "CubicCurve",
                "org.graphstream.ui.view.util"
            ],
            [
                "DefaultMouseManager",
                "org.graphstream.ui.view.util"
            ],
            [
                "Selection",
                "org.graphstream.ui.view"
            ],
            [
                "ViewerPipe",
                "org.graphstream.ui.view"
            ],
            [
                "Viewer",
                "org.graphstream.ui.view"
            ],
            [
                "View",
                "org.graphstream.ui.view"
            ],
            [
                "Camera",
                "org.graphstream.ui.view"
            ],
            [
                "Sprite",
                "org.graphstream.ui.spriteManager"
            ],
            [
                "InvalidSpriteIDException",
                "org.graphstream.ui.spriteManager"
            ],
            [
                "SpriteManager",
                "org.graphstream.ui.spriteManager"
            ],
            [
                "SpriteFactory",
                "org.graphstream.ui.spriteManager"
            ],
            [
                "StyleGroupListener",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "Colors",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "Values",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "StyleSheetListener",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "StyleSheetParserTokenManager",
                "org.graphstream.ui.graphicGraph.stylesheet.parser"
            ],
            [
                "StyleSheetParserConstants",
                "org.graphstream.ui.graphicGraph.stylesheet.parser"
            ],
            [
                "StyleSheetParser",
                "org.graphstream.ui.graphicGraph.stylesheet.parser"
            ],
            [
                "Style",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "StyleSheet",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "StyleConstants",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "Selector",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "Value",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "Rule",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "GraphicNode",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "StyleGroup",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphPosLengthUtils",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphicEdge",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphicElementChangeListener",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphicGraph",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "StyleGroupSet",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphicSprite",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphicElement",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "VerboseSink",
                "org.graphstream.util"
            ],
            [
                "GraphListeners",
                "org.graphstream.util"
            ],
            [
                "Environment",
                "org.graphstream.util"
            ],
            [
                "GraphDiff",
                "org.graphstream.util"
            ],
            [
                "Filters",
                "org.graphstream.util"
            ],
            [
                "FilteredEdgeIterator",
                "org.graphstream.util"
            ],
            [
                "Parser",
                "org.graphstream.util.parser"
            ],
            [
                "ParserFactory",
                "org.graphstream.util.parser"
            ],
            [
                "TokenMgrError",
                "org.graphstream.util.parser"
            ],
            [
                "ParseException",
                "org.graphstream.util.parser"
            ],
            [
                "SimpleCharStream",
                "org.graphstream.util.parser"
            ],
            [
                "Token",
                "org.graphstream.util.parser"
            ],
            [
                "ISODateIO",
                "org.graphstream.util.time"
            ],
            [
                "ISODateComponent",
                "org.graphstream.util.time"
            ],
            [
                "FilteredNodeIterator",
                "org.graphstream.util"
            ],
            [
                "FixedArrayList",
                "org.graphstream.util.set"
            ],
            [
                "StepCounter",
                "org.graphstream.util"
            ],
            [
                "GraphSpells",
                "org.graphstream.util.cumulative"
            ],
            [
                "CumulativeAttributes",
                "org.graphstream.util.cumulative"
            ],
            [
                "CumulativeSpells",
                "org.graphstream.util.cumulative"
            ],
            [
                "Filter",
                "org.graphstream.util"
            ],
            [
                "PipeAdapter",
                "org.graphstream.stream"
            ],
            [
                "GraphParseException",
                "org.graphstream.stream"
            ],
            [
                "ElementSink",
                "org.graphstream.stream"
            ],
            [
                "URLSource",
                "org.graphstream.stream.net"
            ],
            [
                "HTTPSource",
                "org.graphstream.stream.net"
            ],
            [
                "SourceAdapter",
                "org.graphstream.stream"
            ],
            [
                "AttributeSink",
                "org.graphstream.stream"
            ],
            [
                "GMLParserConstants",
                "org.graphstream.stream.file.gml"
            ],
            [
                "GMLParserTokenManager",
                "org.graphstream.stream.file.gml"
            ],
            [
                "GMLContext",
                "org.graphstream.stream.file.gml"
            ],
            [
                "Graphics",
                "org.graphstream.stream.file.gml"
            ],
            [
                "KeyValues",
                "org.graphstream.stream.file.gml"
            ],
            [
                "GMLParser",
                "org.graphstream.stream.file.gml"
            ],
            [
                "FileSinkGraphML",
                "org.graphstream.stream.file"
            ],
            [
                "TLPParserConstants",
                "org.graphstream.stream.file.tlp"
            ],
            [
                "TLPParser",
                "org.graphstream.stream.file.tlp"
            ],
            [
                "TLPParserTokenManager",
                "org.graphstream.stream.file.tlp"
            ],
            [
                "FileSinkFactory",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceEdge",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkBase",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkTikZ",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceGEXF",
                "org.graphstream.stream.file"
            ],
            [
                "DOTParser",
                "org.graphstream.stream.file.dot"
            ],
            [
                "DOTParserConstants",
                "org.graphstream.stream.file.dot"
            ],
            [
                "DOTParserTokenManager",
                "org.graphstream.stream.file.dot"
            ],
            [
                "FileSink",
                "org.graphstream.stream.file"
            ],
            [
                "PajekContext",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "Graphics",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "NodeGraphics",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "EdgeGraphics",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "EdgeMatrix",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "PajekParserTokenManager",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "PajekParserConstants",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "FileSourceXML",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkBaseFiltered",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkDOT",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceParser",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkDGSFiltered",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceDOT",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceDGS1And2",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceGraphML",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceFactory",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkImages",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkDynamicGML",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkSVG",
                "org.graphstream.stream.file"
            ],
            [
                "GEXFSpell",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "SmartXMLWriter",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFElement",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFEdges",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFAttValues",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFEdge",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFSpells",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFAttValue",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFNodes",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFNode",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFMeta",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFAttributes",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXF",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFGraph",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFAttribute",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "OldFileSourceDGS",
                "org.graphstream.stream.file.dgs"
            ],
            [
                "DGSParser",
                "org.graphstream.stream.file.dgs"
            ],
            [
                "FileSourceBase",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkGML",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceDGS",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkDGSUtility",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceTLP",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkSVG2",
                "org.graphstream.stream.file"
            ],
            [
                "FileSource",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceNCol",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourcePajek",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceGPX",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceLGL",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkGEXF2",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceGML",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkGEXF",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkDGS",
                "org.graphstream.stream.file"
            ],
            [
                "ProxyPipe",
                "org.graphstream.stream"
            ],
            [
                "Sink",
                "org.graphstream.stream"
            ],
            [
                "Timeline",
                "org.graphstream.stream"
            ],
            [
                "Pipe",
                "org.graphstream.stream"
            ],
            [
                "SinkAdapter",
                "org.graphstream.stream"
            ],
            [
                "Replayable",
                "org.graphstream.stream"
            ],
            [
                "Source",
                "org.graphstream.stream"
            ],
            [
                "AnnotatedSink",
                "org.graphstream.stream"
            ],
            [
                "GraphReplay",
                "org.graphstream.stream"
            ],
            [
                "AttributePipe",
                "org.graphstream.stream"
            ],
            [
                "SinkTime",
                "org.graphstream.stream.sync"
            ],
            [
                "SourceTime",
                "org.graphstream.stream.sync"
            ],
            [
                "PipeBase",
                "org.graphstream.stream"
            ],
            [
                "ThreadProxyPipe",
                "org.graphstream.stream.thread"
            ],
            [
                "ThreadProxyPipeOld",
                "org.graphstream.stream.thread"
            ],
            [
                "RMISource",
                "org.graphstream.stream.rmi"
            ],
            [
                "RMIAdapterOut",
                "org.graphstream.stream.rmi"
            ],
            [
                "RMISink",
                "org.graphstream.stream.rmi"
            ],
            [
                "RMIAdapterIn",
                "org.graphstream.stream.rmi"
            ],
            [
                "SourceBase",
                "org.graphstream.stream"
            ],
            [
                "NetStreamDecoder",
                "org.graphstream.stream.netstream"
            ],
            [
                "NetStreamReceiver",
                "org.graphstream.stream.netstream"
            ],
            [
                "NetStreamConstants",
                "org.graphstream.stream.netstream"
            ],
            [
                "NetStreamSender",
                "org.graphstream.stream.netstream"
            ],
            [
                "DefaultNetStreamDecoder",
                "org.graphstream.stream.netstream"
            ],
            [
                "Base64",
                "org.graphstream.stream.netstream.packing"
            ],
            [
                "NetStreamUnpacker",
                "org.graphstream.stream.netstream.packing"
            ],
            [
                "Base64Packer",
                "org.graphstream.stream.netstream.packing"
            ],
            [
                "Base64Unpacker",
                "org.graphstream.stream.netstream.packing"
            ],
            [
                "NetStreamPacker",
                "org.graphstream.stream.netstream.packing"
            ],
            [
                "AttributePredicate",
                "org.graphstream.stream"
            ],
            [
                "Element",
                "org.graphstream.graph"
            ],
            [
                "Node",
                "org.graphstream.graph"
            ],
            [
                "BreadthFirstIterator",
                "org.graphstream.graph"
            ],
            [
                "Graph",
                "org.graphstream.graph"
            ],
            [
                "EdgeRejectedException",
                "org.graphstream.graph"
            ],
            [
                "CompoundAttribute",
                "org.graphstream.graph"
            ],
            [
                "Structure",
                "org.graphstream.graph"
            ],
            [
                "DepthFirstIterator",
                "org.graphstream.graph"
            ],
            [
                "NullAttributeException",
                "org.graphstream.graph"
            ],
            [
                "IdAlreadyInUseException",
                "org.graphstream.graph"
            ],
            [
                "EdgeFactory",
                "org.graphstream.graph"
            ],
            [
                "ElementNotFoundException",
                "org.graphstream.graph"
            ],
            [
                "OneAttributeElement",
                "org.graphstream.graph.implementations"
            ],
            [
                "AdjacencyListNode",
                "org.graphstream.graph.implementations"
            ],
            [
                "SingleNode",
                "org.graphstream.graph.implementations"
            ],
            [
                "AbstractElement",
                "org.graphstream.graph.implementations"
            ],
            [
                "AdjacencyListGraph",
                "org.graphstream.graph.implementations"
            ],
            [
                "AbstractNode",
                "org.graphstream.graph.implementations"
            ],
            [
                "DefaultGraph",
                "org.graphstream.graph.implementations"
            ],
            [
                "MultiGraph",
                "org.graphstream.graph.implementations"
            ],
            [
                "Graphs",
                "org.graphstream.graph.implementations"
            ],
            [
                "SingleGraph",
                "org.graphstream.graph.implementations"
            ],
            [
                "MultiNode",
                "org.graphstream.graph.implementations"
            ],
            [
                "AbstractGraph",
                "org.graphstream.graph.implementations"
            ],
            [
                "AbstractEdge",
                "org.graphstream.graph.implementations"
            ],
            [
                "GraphFactory",
                "org.graphstream.graph"
            ],
            [
                "NodeFactory",
                "org.graphstream.graph"
            ],
            [
                "Edge",
                "org.graphstream.graph"
            ],
            [
                "Path",
                "org.graphstream.graph"
            ]
        ],
        "tokensProjectClassesNonPrivateStaticNonVoidMethods": [
            [
                "gradientInArea",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static Paint gradientInArea(int x0, int y0, int width, int height, Style style)"
            ],
            [
                "linearGradientFromStyle",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static Paint linearGradientFromStyle(float x0, float y0, float x1, float y1, Style style)"
            ],
            [
                "radialGradientFromStyle",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static Paint radialGradientFromStyle(float cx, float cy, float radius, Style style)"
            ],
            [
                "radialGradientFromStyle",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static Paint radialGradientFromStyle(float cx, float cy, float radius, float fx, float fy, Style style)"
            ],
            [
                "createFractions",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "protected static float[] createFractions(Style style)"
            ],
            [
                "createColors",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "protected static Color[] createColors(Style style)"
            ],
            [
                "defaultImageCache",
                "org.graphstream.ui.swingViewer.util",
                "ImageCache",
                "public static ImageCache defaultImageCache()"
            ],
            [
                "generateStroke",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "public static Stroke generateStroke(Style style, GraphMetrics metrics)"
            ],
            [
                "generatePlainStroke",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "protected static Stroke generatePlainStroke(Style style, GraphMetrics metrics)"
            ],
            [
                "generateDotsStroke",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "protected static Stroke generateDotsStroke(Style style, GraphMetrics metrics)"
            ],
            [
                "generateDashesStroke",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "protected static Stroke generateDashesStroke(Style style, GraphMetrics metrics)"
            ],
            [
                "defaultFontCache",
                "org.graphstream.ui.swingViewer.util",
                "FontCache",
                "public static FontCache defaultFontCache()"
            ],
            [
                "newLayoutAlgorithm",
                "org.graphstream.ui.layout",
                "Layouts",
                "public static Layout newLayoutAlgorithm()"
            ],
            [
                "eval",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "public static double eval(double x0, double x1, double x2, double x3, double t)"
            ],
            [
                "eval",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "public static Point2 eval(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t)"
            ],
            [
                "eval",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "public static Point2D.Double eval(Point2D.Double p0, Point2D.Double p1, Point2D.Double p2, Point2D.Double p3, double t)"
            ],
            [
                "eval",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "public static Point2 eval(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t, Point2 result)"
            ],
            [
                "derivative",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "public static double derivative(double x0, double x1, double x2, double x3, double t)"
            ],
            [
                "derivative",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "public static Point2 derivative(Point2 p0, Point2 p1, Point2 p2, Point3 p3, double t)"
            ],
            [
                "derivative",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "public static Point2 derivative(Point2 p0, Point2 p1, Point2 p2, Point3 p3, double t, Point2 result)"
            ],
            [
                "perpendicular",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "public static Vector2 perpendicular(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t)"
            ],
            [
                "perpendicular",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "public static Vector2 perpendicular(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t, Vector2 result)"
            ],
            [
                "perpendicular",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "public static Point2D.Double perpendicular(Point2D.Double p0, Point2D.Double p1, Point2D.Double p2, Point2D.Double p3, double t)"
            ],
            [
                "newGraphRenderer",
                "org.graphstream.ui.view",
                "Viewer",
                "public static GraphRenderer newGraphRenderer()"
            ],
            [
                "getPositionValue",
                "org.graphstream.ui.spriteManager",
                "SpriteManager",
                "protected static Values getPositionValue(Object value)"
            ],
            [
                "convertColor",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "public static Color convertColor(Object anyValue)"
            ],
            [
                "convertLabel",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "public static String convertLabel(Object value)"
            ],
            [
                "convertWidth",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "public static float convertWidth(Object value)"
            ],
            [
                "convertValue",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "public static Value convertValue(Object value)"
            ],
            [
                "convertUnit",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "protected static Units convertUnit(String unit)"
            ],
            [
                "nodePosition",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "public static double[] nodePosition(Graph graph, String id)"
            ],
            [
                "nodePointPosition",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "public static Point3 nodePointPosition(Graph graph, String id)"
            ],
            [
                "nodePosition",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "public static double[] nodePosition(Node node)"
            ],
            [
                "nodePointPosition",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "public static Point3 nodePointPosition(Node node)"
            ],
            [
                "edgeLength",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "public static double edgeLength(Graph graph, String id)"
            ],
            [
                "edgeLength",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "public static double edgeLength(Edge edge)"
            ],
            [
                "getGlobalEnvironment",
                "org.graphstream.util",
                "Environment",
                "public static Environment getGlobalEnvironment()"
            ],
            [
                "falseFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> falseFilter()"
            ],
            [
                "trueFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> trueFilter()"
            ],
            [
                "byAttributeFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> byAttributeFilter(String key, Object expectedValue)"
            ],
            [
                "separateNodeAndEdgeFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element, U extends Element> Filter<Element> separateNodeAndEdgeFilter(Filter<T> nodeFilter, Filter<U> edgeFilter)"
            ],
            [
                "byExtremitiesFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element, U extends Element> Filter<T> byExtremitiesFilter(Filter<U> f)"
            ],
            [
                "byIdFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> byIdFilter(String idPattern)"
            ],
            [
                "isContained",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> isContained(final Collection<? extends T> set)"
            ],
            [
                "isIdContained",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> isIdContained(final Collection<String> set)"
            ],
            [
                "and",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> and(Filter<T> f1, Filter<T> f2)"
            ],
            [
                "or",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> or(Filter<T> f1, Filter<T> f2)"
            ],
            [
                "xor",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> xor(Filter<T> f1, Filter<T> f2)"
            ],
            [
                "not",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> not(Filter<T> f)"
            ],
            [
                "addEscapes",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "protected static final String addEscapes(String str)"
            ],
            [
                "LexicalError",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "protected static String LexicalError(boolean EOFSeen, int lexState, int errorLine, int errorColumn, String errorAfter, char curChar)"
            ],
            [
                "add_escapes",
                "org.graphstream.util.parser",
                "ParseException",
                "static String add_escapes(String str)"
            ],
            [
                "newToken",
                "org.graphstream.util.parser",
                "Token",
                "public static Token newToken(int ofKind, String image)"
            ],
            [
                "newToken",
                "org.graphstream.util.parser",
                "Token",
                "public static Token newToken(int ofKind)"
            ],
            [
                "countStepInFile",
                "org.graphstream.util",
                "StepCounter",
                "public static int countStepInFile(String path) throws IOException"
            ],
            [
                "GET",
                "org.graphstream.stream.net",
                "HTTPSource",
                "protected static HashMap<String, Object> GET(HttpExchange ex)"
            ],
            [
                "sinkFor",
                "org.graphstream.stream.file",
                "FileSinkFactory",
                "public static FileSink sinkFor(String filename)"
            ],
            [
                "formatId",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "protected static String formatId(String id)"
            ],
            [
                "getInt",
                "org.graphstream.stream.file.pajek",
                "PajekContext",
                "protected static int getInt(Token nb) throws ParseException"
            ],
            [
                "getReal",
                "org.graphstream.stream.file.pajek",
                "PajekContext",
                "protected static double getReal(Token nb) throws ParseException"
            ],
            [
                "toColorValue",
                "org.graphstream.stream.file.pajek",
                "PajekContext",
                "public static String toColorValue(Token R, Token G, Token B) throws ParseException"
            ],
            [
                "sourceFor",
                "org.graphstream.stream.file",
                "FileSourceFactory",
                "public static FileSource sourceFor(String fileName) throws IOException"
            ],
            [
                "getXMLRootElement",
                "org.graphstream.stream.file",
                "FileSourceFactory",
                "public static String getXMLRootElement(String fileName) throws IOException"
            ],
            [
                "formatStringForQuoting",
                "org.graphstream.stream.file",
                "FileSinkDGSUtility",
                "protected static String formatStringForQuoting(String str)"
            ],
            [
                "attributeString",
                "org.graphstream.stream.file",
                "FileSinkDGSUtility",
                "protected static String attributeString(String key, Object value, boolean remove)"
            ],
            [
                "arrayString",
                "org.graphstream.stream.file",
                "FileSinkDGSUtility",
                "protected static String arrayString(Object value)"
            ],
            [
                "valueString",
                "org.graphstream.stream.file",
                "FileSinkDGSUtility",
                "protected static String valueString(Object value)"
            ],
            [
                "hashToString",
                "org.graphstream.stream.file",
                "FileSinkDGSUtility",
                "protected static String hashToString(HashMap<?, ?> hash)"
            ],
            [
                "encodeObject",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public static String encodeObject(java.io.Serializable serializableObject) throws java.io.IOException"
            ],
            [
                "encodeObject",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public static String encodeObject(java.io.Serializable serializableObject, int options) throws java.io.IOException"
            ],
            [
                "encodeBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public static String encodeBytes(byte[] source)"
            ],
            [
                "encodeBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public static String encodeBytes(byte[] source, int options) throws java.io.IOException"
            ],
            [
                "encodeBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public static String encodeBytes(byte[] source, int off, int len)"
            ],
            [
                "encodeBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public static String encodeBytes(byte[] source, int off, int len, int options) throws java.io.IOException"
            ],
            [
                "encodeBytesToBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public static byte[] encodeBytesToBytes(byte[] source)"
            ],
            [
                "encodeBytesToBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public static byte[] encodeBytesToBytes(byte[] source, int off, int len, int options) throws java.io.IOException"
            ],
            [
                "decode",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public static byte[] decode(byte[] source) throws java.io.IOException"
            ],
            [
                "decode",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public static byte[] decode(byte[] source, int off, int len, int options) throws java.io.IOException"
            ],
            [
                "decode",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public static byte[] decode(String s) throws java.io.IOException"
            ],
            [
                "decode",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public static byte[] decode(String s, int options) throws java.io.IOException"
            ],
            [
                "decodeToObject",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public static Object decodeToObject(String encodedObject) throws java.io.IOException, java.lang.ClassNotFoundException"
            ],
            [
                "decodeToObject",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public static Object decodeToObject(String encodedObject, int options, final ClassLoader loader) throws java.io.IOException, java.lang.ClassNotFoundException"
            ],
            [
                "decodeFromFile",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public static byte[] decodeFromFile(String filename) throws java.io.IOException"
            ],
            [
                "encodeFromFile",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public static String encodeFromFile(String filename) throws java.io.IOException"
            ],
            [
                "unmutableGraph",
                "org.graphstream.graph.implementations",
                "Graphs",
                "public static Graph unmutableGraph(Graph g)"
            ],
            [
                "synchronizedGraph",
                "org.graphstream.graph.implementations",
                "Graphs",
                "public static Graph synchronizedGraph(Graph g)"
            ],
            [
                "merge",
                "org.graphstream.graph.implementations",
                "Graphs",
                "public static Graph merge(Graph... graphs)"
            ],
            [
                "clone",
                "org.graphstream.graph.implementations",
                "Graphs",
                "public static Graph clone(Graph g)"
            ]
        ],
        "tokensProjectClassesNonPrivateStaticAttributes": [
            [
                "version16",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static boolean version16 = false;"
            ],
            [
                "predefFractions",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[][] predefFractions = new float[11][];"
            ],
            [
                "predefFractions2",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions2 = { 0f, 1f };"
            ],
            [
                "predefFractions3",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions3 = { 0f, 0.5f, 1f };"
            ],
            [
                "predefFractions4",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions4 = { 0f, 0.33f, 0.66f, 1f };"
            ],
            [
                "predefFractions5",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions5 = { 0f, 0.25f, 0.5f, 0.75f, 1f };"
            ],
            [
                "predefFractions6",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions6 = { 0f, 0.2f, 0.4f, 0.6f, 0.8f, 1f };"
            ],
            [
                "predefFractions7",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions7 = { 0f, 0.1666f, 0.3333f, 0.4999f, 0.6666f, 0.8333f, 1f };"
            ],
            [
                "predefFractions8",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions8 = { 0f, 0.1428f, 0.2856f, 0.4284f, 0.5712f, 0.7140f, 0.8568f, 1f };"
            ],
            [
                "predefFractions9",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions9 = { 0f, 0.125f, 0.25f, 0.375f, 0.5f, 0.625f, .75f, 0.875f, 1f };"
            ],
            [
                "predefFractions10",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions10 = { 0f, 0.1111f, 0.2222f, 0.3333f, 0.4444f, 0.5555f, 0.6666f, 0.7777f, 0.8888f, 1f };"
            ],
            [
                "defaultImageCache",
                "org.graphstream.ui.swingViewer.util",
                "ImageCache",
                "protected static ImageCache defaultImageCache;"
            ],
            [
                "dots",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "protected static float[] dots = { 1f, 1f };"
            ],
            [
                "dashes",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "protected static float[] dashes = { 3f, 3f };"
            ],
            [
                "defaultFontCache",
                "org.graphstream.ui.swingViewer.util",
                "FontCache",
                "public static FontCache defaultFontCache;"
            ],
            [
                "NULL_POINT2",
                "org.graphstream.ui.geom",
                "Point2",
                "public static final Point2 NULL_POINT2 = new Point2(0, 0);"
            ],
            [
                "NULL_POINT3",
                "org.graphstream.ui.geom",
                "Point3",
                "public static final Point3 NULL_POINT3 = new Point3(0, 0, 0);"
            ],
            [
                "DEFAULT_VIEW_ID",
                "org.graphstream.ui.view",
                "Viewer",
                "public static String DEFAULT_VIEW_ID = \"defaultView\";"
            ],
            [
                "jjbitVec0",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };"
            ],
            [
                "jjnextStates",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "static final int[] jjnextStates = { 48, 49, 52, 54, 55, 65, 69, 2, 4, 6, 10, 16, 23, 33, 50, 52, 54, 55, 57, 58, 60, 61, 66, 68, 70, 71 };"
            ],
            [
                "jjstrLiteralImages",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "public static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, \"\\56\", \"\\173\", \"\\175\", \"\\50\", \"\\51\", \"\\43\", \"\\72\", \"\\73\", \"\\54\", \"\\162\\147\\142\\141\", \"\\162\\147\\142\", null, null, null, \"\\165\\162\\154\", \"\\147\\162\\141\\160\\150\", \"\\145\\144\\147\\145\", \"\\156\\157\\144\\145\", \"\\163\\160\\162\\151\\164\\145\", \"\\146\\151\\154\\154\\55\\155\\157\\144\\145\", \"\\146\\151\\154\\154\\55\\143\\157\\154\\157\\162\", \"\\146\\151\\154\\154\\55\\151\\155\\141\\147\\145\", \"\\163\\164\\162\\157\\153\\145\\55\\155\\157\\144\\145\", \"\\163\\164\\162\\157\\153\\145\\55\\143\\157\\154\\157\\162\", \"\\163\\164\\162\\157\\153\\145\\55\\167\\151\\144\\164\\150\", \"\\163\\150\\141\\144\\157\\167\\55\\155\\157\\144\\145\", \"\\163\\150\\141\\144\\157\\167\\55\\143\\157\\154\\157\\162\", \"\\163\\150\\141\\144\\157\\167\\55\\167\\151\\144\\164\\150\", \"\\163\\150\\141\\144\\157\\167\\55\\157\\146\\146\\163\\145\\164\", \"\\164\\145\\170\\164\\55\\155\\157\\144\\145\", \"\\164\\145\\170\\164\\55\\143\\157\\154\\157\\162\", \"\\164\\145\\170\\164\\55\\163\\164\\171\\154\\145\", \"\\164\\145\\170\\164\\55\\146\\157\\156\\164\", \"\\164\\145\\170\\164\\55\\163\\151\\172\\145\", \"\\164\\145\\170\\164\\55\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\\55\\155\\157\\144\\145\", \"\\164\\145\\170\\164\\55\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\", \"\\164\\145\\170\\164\\55\\142\\141\\143\\153\\147\\162\\157\\165\\156\\144\\55\\155\\157\\144\\145\", \"\\164\\145\\170\\164\\55\\142\\141\\143\\153\\147\\162\\157\\165\\156\\144\\55\\143\\157\\154\\157\\162\", \"\\164\\145\\170\\164\\55\\157\\146\\146\\163\\145\\164\", \"\\164\\145\\170\\164\\55\\160\\141\\144\\144\\151\\156\\147\", \"\\151\\143\\157\\156\\55\\155\\157\\144\\145\", \"\\151\\143\\157\\156\", \"\\160\\141\\144\\144\\151\\156\\147\", \"\\172\\55\\151\\156\\144\\145\\170\", \"\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\\55\\155\\157\\144\\145\", \"\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\", \"\\163\\150\\141\\160\\145\", \"\\163\\151\\172\\145\", \"\\163\\151\\172\\145\\55\\155\\157\\144\\145\", \"\\163\\150\\141\\160\\145\\55\\160\\157\\151\\156\\164\\163\", \"\\164\\145\\170\\164\\55\\141\\154\\151\\147\\156\\155\\145\\156\\164\", \"\\152\\143\\157\\155\\160\\157\\156\\145\\156\\164\", \"\\141\\162\\162\\157\\167\\55\\151\\155\\141\\147\\145\", \"\\141\\162\\162\\157\\167\\55\\163\\151\\172\\145\", \"\\141\\162\\162\\157\\167\\55\\163\\150\\141\\160\\145\", \"\\163\\160\\162\\151\\164\\145\\55\\157\\162\\151\\145\\156\\164\\141\\164\\151\\157\\156\", \"\\143\\141\\156\\166\\141\\163\\55\\143\\157\\154\\157\\162\", \"\\160\\154\\141\\151\\156\", \"\\144\\171\\156\\55\\160\\154\\141\\151\\156\", \"\\144\\171\\156\\55\\163\\151\\172\\145\", \"\\144\\171\\156\\55\\151\\143\\157\\156\", \"\\144\\141\\163\\150\\145\\163\", \"\\144\\157\\164\\163\", \"\\144\\157\\165\\142\\154\\145\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\144\\151\\141\\147\\157\\156\\141\\154\\61\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\144\\151\\141\\147\\157\\156\\141\\154\\62\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\150\\157\\162\\151\\172\\157\\156\\164\\141\\154\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\162\\141\\144\\151\\141\\154\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\166\\145\\162\\164\\151\\143\\141\\154\", \"\\150\\151\\144\\144\\145\\156\", \"\\151\\155\\141\\147\\145\\55\\164\\151\\154\\145\\144\", \"\\151\\155\\141\\147\\145\\55\\163\\143\\141\\154\\145\\144\", \"\\151\\155\\141\\147\\145\\55\\163\\143\\141\\154\\145\\144\\55\\162\\141\\164\\151\\157\\55\\155\\141\\170\", \"\\151\\155\\141\\147\\145\\55\\163\\143\\141\\154\\145\\144\\55\\162\\141\\164\\151\\157\\55\\155\\151\\156\", \"\\156\\157\\156\\145\", \"\\156\\157\\162\\155\\141\\154\", \"\\164\\162\\165\\156\\143\\141\\164\\145\\144\", \"\\172\\157\\157\\155\\55\\162\\141\\156\\147\\145\", \"\\141\\164\\55\\172\\157\\157\\155\", \"\\165\\156\\144\\145\\162\\55\\172\\157\\157\\155\", \"\\157\\166\\145\\162\\55\\172\\157\\157\\155\", \"\\172\\157\\157\\155\\163\", \"\\146\\151\\164\", \"\\142\\157\\154\\144\", \"\\142\\157\\154\\144\\55\\151\\164\\141\\154\\151\\143\", \"\\151\\164\\141\\154\\151\\143\", \"\\141\\154\\157\\156\\147\", \"\\141\\164\\55\\154\\145\\146\\164\", \"\\141\\164\\55\\162\\151\\147\\150\\164\", \"\\143\\145\\156\\164\\145\\162\", \"\\154\\145\\146\\164\", \"\\162\\151\\147\\150\\164\", \"\\165\\156\\144\\145\\162\", \"\\141\\142\\157\\166\\145\", \"\\152\\165\\163\\164\\151\\146\\171\", \"\\143\\151\\162\\143\\154\\145\", \"\\164\\162\\151\\141\\156\\147\\154\\145\", \"\\146\\162\\145\\145\\160\\154\\141\\156\\145\", \"\\164\\145\\170\\164\\55\\142\\157\\170\", \"\\164\\145\\170\\164\\55\\162\\157\\165\\156\\144\\145\\144\\55\\142\\157\\170\", \"\\164\\145\\170\\164\\55\\143\\151\\162\\143\\154\\145\", \"\\164\\145\\170\\164\\55\\144\\151\\141\\155\\157\\156\\144\", \"\\164\\145\\170\\164\\55\\160\\141\\162\\141\\147\\162\\141\\160\\150\", \"\\142\\157\\170\", \"\\162\\157\\165\\156\\144\\145\\144\\55\\142\\157\\170\", \"\\143\\162\\157\\163\\163\", \"\\144\\151\\141\\155\\157\\156\\144\", \"\\160\\157\\154\\171\\147\\157\\156\", \"\\142\\165\\164\\164\\157\\156\", \"\\164\\145\\170\\164\\55\\146\\151\\145\\154\\144\", \"\\160\\141\\156\\145\\154\", \"\\154\\151\\156\\145\", \"\\160\\157\\154\\171\\154\\151\\156\\145\", \"\\160\\157\\154\\171\\154\\151\\156\\145\\55\\163\\143\\141\\154\\145\\144\", \"\\141\\156\\147\\154\\145\", \"\\143\\165\\142\\151\\143\\55\\143\\165\\162\\166\\145\", \"\\142\\154\\157\\142\", \"\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\114\\55\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\150\\157\\162\\151\\172\\157\\156\\164\\141\\154\\55\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\166\\145\\162\\164\\151\\143\\141\\154\\55\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\141\\162\\162\\157\\167\", \"\\146\\154\\157\\167\", \"\\160\\151\\145\\55\\143\\150\\141\\162\\164\", \"\\151\\155\\141\\147\\145\", \"\\151\\155\\141\\147\\145\\163\", \"\\146\\162\\157\\155\", \"\\156\\157\\144\\145\\60\", \"\\164\\157\", \"\\156\\157\\144\\145\\61\", \"\\160\\162\\157\\152\\145\\143\\164\\151\\157\\156\", \"\\143\\154\\151\\143\\153\\145\\144\", \"\\163\\145\\154\\145\\143\\164\\145\\144\", null, null };"
            ],
            [
                "lexStateNames",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "public static final String[] lexStateNames = { \"DEFAULT\" };"
            ],
            [
                "jjtoToken",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "static final long[] jjtoToken = { 0xfffffffffffffe01L, 0xffffffffffffffffL, 0xffffL };"
            ],
            [
                "jjtoSkip",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "static final long[] jjtoSkip = { 0x1eL, 0x0L, 0x0L };"
            ],
            [
                "colorMap",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "protected static HashMap<String,Color> colorMap;"
            ],
            [
                "sharpColor1",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "protected static Pattern sharpColor1;"
            ],
            [
                "sharpColor2",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "protected static Pattern sharpColor2;"
            ],
            [
                "cssColor",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "protected static Pattern cssColor;"
            ],
            [
                "cssColorA",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "protected static Pattern cssColorA;"
            ],
            [
                "awtColor",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "protected static Pattern awtColor;"
            ],
            [
                "hexaColor",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "protected static Pattern hexaColor;"
            ],
            [
                "numberUnit",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "protected static Pattern numberUnit;"
            ],
            [
                "number",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "protected static Pattern number;"
            ],
            [
                "acceptedAttribute",
                "org.graphstream.ui.graphicGraph",
                "GraphicElement",
                "protected static Pattern acceptedAttribute;"
            ],
            [
                "DEFAULT_AN_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_AN_FORMAT = \"%prefix%[%sourceId%:%timeId%] add node \\\"%nodeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_CNA_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CNA_FORMAT = \"%prefix%[%sourceId%:%timeId%] set node \\\"%nodeId%\\\" +\\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CNC_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CNC_FORMAT = \"%prefix%[%sourceId%:%timeId%] set node \\\"%nodeId%\\\" \\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CNR_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CNR_FORMAT = \"%prefix%[%sourceId%:%timeId%] set node \\\"%nodeId%\\\" -\\\"%attributeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_DN_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_DN_FORMAT = \"%prefix%[%sourceId%:%timeId%] remove node \\\"%nodeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_AE_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_AE_FORMAT = \"%prefix%[%sourceId%:%timeId%] add edge \\\"%edgeId%\\\" : \\\"%source%\\\" -- \\\"%target%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_CEA_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CEA_FORMAT = \"%prefix%[%sourceId%:%timeId%] set edge \\\"%edgeId%\\\" +\\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CEC_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CEC_FORMAT = \"%prefix%[%sourceId%:%timeId%] set edge \\\"%edgeId%\\\" \\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CER_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CER_FORMAT = \"%prefix%[%sourceId%:%timeId%] set edge \\\"%edgeId%\\\" -\\\"%attributeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_DE_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_DE_FORMAT = \"%prefix%[%sourceId%:%timeId%] remove edge \\\"%edgeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_CGA_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CGA_FORMAT = \"%prefix%[%sourceId%:%timeId%] set +\\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CGC_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CGC_FORMAT = \"%prefix%[%sourceId%:%timeId%] set \\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CGR_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CGR_FORMAT = \"%prefix%[%sourceId%:%timeId%] set -\\\"%attributeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_CL_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CL_FORMAT = \"%prefix%[%sourceId%:%timeId%] clear%suffix%\";"
            ],
            [
                "DEFAULT_ST_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_ST_FORMAT = \"%prefix%[%sourceId%:%timeId%] step %step% begins%suffix%\";"
            ],
            [
                "GLOBAL_ENV",
                "org.graphstream.util",
                "Environment",
                "public static Environment GLOBAL_ENV;"
            ],
            [
                "LEXICAL_ERROR",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "public static final int LEXICAL_ERROR = 0;"
            ],
            [
                "STATIC_LEXER_ERROR",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "public static final int STATIC_LEXER_ERROR = 1;"
            ],
            [
                "INVALID_LEXICAL_STATE",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "public static final int INVALID_LEXICAL_STATE = 2;"
            ],
            [
                "LOOP_DETECTED",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "public static final int LOOP_DETECTED = 3;"
            ],
            [
                "staticFlag",
                "org.graphstream.util.parser",
                "SimpleCharStream",
                "public static final boolean staticFlag = false;"
            ],
            [
                "ABBREVIATED_WEEKDAY_NAME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent ABBREVIATED_WEEKDAY_NAME = new NotImplementedComponent(\"%a\", \"\\\\w+[.]\");"
            ],
            [
                "FULL_WEEKDAY_NAME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent FULL_WEEKDAY_NAME = new NotImplementedComponent(\"%A\", \"\\\\w+\");"
            ],
            [
                "ABBREVIATED_MONTH_NAME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent ABBREVIATED_MONTH_NAME = new NotImplementedComponent(\"%b\", \"\\\\w+[.]\");"
            ],
            [
                "FULL_MONTH_NAME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent FULL_MONTH_NAME = new NotImplementedComponent(\"%B\", \"\\\\w+\");"
            ],
            [
                "LOCALE_DATE_AND_TIME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent LOCALE_DATE_AND_TIME = new NotImplementedComponent(\"%c\", null);"
            ],
            [
                "CENTURY",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent CENTURY = new NotImplementedComponent(\"%C\", \"\\\\d\\\\d\");"
            ],
            [
                "DAY_OF_MONTH_2_DIGITS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DAY_OF_MONTH_2_DIGITS = new FieldComponent(\"%d\", \"[012]\\\\d|3[01]\", Calendar.DAY_OF_MONTH, \"%02d\");"
            ],
            [
                "DATE",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DATE = new AliasComponent(\"%D\", \"%m/%d/%y\");"
            ],
            [
                "DAY_OF_MONTH",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DAY_OF_MONTH = new FieldComponent(\"%e\", \"\\\\d|[12]\\\\d|3[01]\", Calendar.DAY_OF_MONTH, \"%2d\");"
            ],
            [
                "DATE_ISO8601",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DATE_ISO8601 = new AliasComponent(\"%F\", \"%Y-%m-%d\");"
            ],
            [
                "WEEK_BASED_YEAR_2_DIGITS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent WEEK_BASED_YEAR_2_DIGITS = new FieldComponent(\"%g\", \"\\\\d\\\\d\", Calendar.YEAR, \"%02d\");"
            ],
            [
                "WEEK_BASED_YEAR_4_DIGITS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent WEEK_BASED_YEAR_4_DIGITS = new FieldComponent(\"%G\", \"\\\\d{4}\", Calendar.YEAR, \"%04d\");"
            ],
            [
                "ABBREVIATED_MONTH_NAME_ALIAS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent ABBREVIATED_MONTH_NAME_ALIAS = new AliasComponent(\"%h\", \"%b\");"
            ],
            [
                "HOUR_OF_DAY",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent HOUR_OF_DAY = new FieldComponent(\"%H\", \"[01]\\\\d|2[0123]\", Calendar.HOUR_OF_DAY, \"%02d\");"
            ],
            [
                "HOUR",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent HOUR = new FieldComponent(\"%I\", \"0\\\\d|1[012]\", Calendar.HOUR, \"%02d\");"
            ],
            [
                "DAY_OF_YEAR",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DAY_OF_YEAR = new FieldComponent(\"%j\", \"[012]\\\\d\\\\d|3[0-5]\\\\d|36[0-6]\", Calendar.DAY_OF_YEAR, \"%03d\");"
            ],
            [
                "MILLISECOND",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent MILLISECOND = new FieldComponent(\"%k\", \"\\\\d{3}\", Calendar.MILLISECOND, \"%03d\");"
            ],
            [
                "EPOCH",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent EPOCH = new EpochComponent();"
            ],
            [
                "MONTH",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent MONTH = new FieldComponent(\"%m\", \"0[1-9]|1[012]\", Calendar.MONTH, -1, \"%02d\");"
            ],
            [
                "MINUTE",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent MINUTE = new FieldComponent(\"%M\", \"[0-5]\\\\d\", Calendar.MINUTE, \"%02d\");"
            ],
            [
                "NEW_LINE",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent NEW_LINE = new AliasComponent(\"%n\", \"\\n\");"
            ],
            [
                "AM_PM",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent AM_PM = new AMPMComponent();"
            ],
            [
                "LOCALE_CLOCK_TIME_12_HOUR",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent LOCALE_CLOCK_TIME_12_HOUR = new NotImplementedComponent(\"%r\", \"\");"
            ],
            [
                "HOUR_AND_MINUTE",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent HOUR_AND_MINUTE = new AliasComponent(\"%R\", \"%H:%M\");"
            ],
            [
                "SECOND",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent SECOND = new FieldComponent(\"%S\", \"[0-5]\\\\d|60\", Calendar.SECOND, \"%02d\");"
            ],
            [
                "TABULATION",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent TABULATION = new AliasComponent(\"%t\", \"\\t\");"
            ],
            [
                "TIME_ISO8601",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent TIME_ISO8601 = new AliasComponent(\"%T\", \"%H:%M:%S\");"
            ],
            [
                "DAY_OF_WEEK_1_7",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DAY_OF_WEEK_1_7 = new FieldComponent(\"%u\", \"[1-7]\", Calendar.DAY_OF_WEEK, -1, \"%1d\");"
            ],
            [
                "WEEK_OF_YEAR_FROM_SUNDAY",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent WEEK_OF_YEAR_FROM_SUNDAY = new FieldComponent(\"%U\", \"[0-4]\\\\d|5[0123]\", Calendar.WEEK_OF_YEAR, 1, \"%2d\");"
            ],
            [
                "WEEK_NUMBER_ISO8601",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent WEEK_NUMBER_ISO8601 = new NotImplementedComponent(\"%V\", \"0[1-9]|[2-4]\\\\d|5[0123]\");"
            ],
            [
                "DAY_OF_WEEK_0_6",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DAY_OF_WEEK_0_6 = new FieldComponent(\"%w\", \"[0-6]\", Calendar.DAY_OF_WEEK, \"%01d\");"
            ],
            [
                "WEEK_OF_YEAR_FROM_MONDAY",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent WEEK_OF_YEAR_FROM_MONDAY = new FieldComponent(\"%W\", \"[0-4]\\\\d|5[0123]\", Calendar.WEEK_OF_YEAR, \"%02d\");"
            ],
            [
                "LOCALE_DATE_REPRESENTATION",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent LOCALE_DATE_REPRESENTATION = new NotImplementedComponent(\"%x\", \"\");"
            ],
            [
                "LOCALE_TIME_REPRESENTATION",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent LOCALE_TIME_REPRESENTATION = new NotImplementedComponent(\"%X\", \"\");"
            ],
            [
                "YEAR_2_DIGITS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent YEAR_2_DIGITS = new FieldComponent(\"%y\", \"\\\\d\\\\d\", Calendar.YEAR, \"%02d\");"
            ],
            [
                "YEAR_4_DIGITS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent YEAR_4_DIGITS = new FieldComponent(\"%Y\", \"\\\\d{4}\", Calendar.YEAR, \"%04d\");"
            ],
            [
                "UTC_OFFSET",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent UTC_OFFSET = new UTCOffsetComponent();"
            ],
            [
                "LOCALE_TIME_ZONE_NAME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent LOCALE_TIME_ZONE_NAME = new NotImplementedComponent(\"%Z\", \"\\\\w*\");"
            ],
            [
                "PERCENT",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent PERCENT = new AliasComponent(\"%%\", \"%\");"
            ],
            [
                "jjbitVec0",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };"
            ],
            [
                "jjnextStates",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "static final int[] jjnextStates = { 5, 6, 8, 9, 13, 14 };"
            ],
            [
                "jjstrLiteralImages",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "public static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, \"\\133\", \"\\135\", null, null, null, null, null, null };"
            ],
            [
                "lexStateNames",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "public static final String[] lexStateNames = { \"DEFAULT\" };"
            ],
            [
                "jjtoToken",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "static final long[] jjtoToken = { 0xff01L };"
            ],
            [
                "jjtoSkip",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "static final long[] jjtoSkip = { 0x1eL };"
            ],
            [
                "jjbitVec0",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };"
            ],
            [
                "jjnextStates",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "static final int[] jjnextStates = { 54, 11, 12, 15, 17, 18, 1, 2, 5, 47, 52, 8, 9, 20, 21 };"
            ],
            [
                "jjstrLiteralImages",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "public static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, null, \"\\50\", \"\\51\", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null };"
            ],
            [
                "lexStateNames",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "public static final String[] lexStateNames = { \"DEFAULT\" };"
            ],
            [
                "jjtoToken",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "static final long[] jjtoToken = { 0xffffc01L };"
            ],
            [
                "jjtoSkip",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "static final long[] jjtoSkip = { 0x7eL };"
            ],
            [
                "XYZ_ATTR",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "public static final String XYZ_ATTR = \"xyz\";"
            ],
            [
                "WIDTH_ATTR",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "public static final String WIDTH_ATTR = \"ui.tikz.width\";"
            ],
            [
                "HEIGHT_ATTR",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "public static final String HEIGHT_ATTR = \"ui.tikz.height\";"
            ],
            [
                "DEFAULT_WIDTH",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "public static final double DEFAULT_WIDTH = 10;"
            ],
            [
                "DEFAULT_HEIGHT",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "public static final double DEFAULT_HEIGHT = 10;"
            ],
            [
                "DISPLAY_MIN_SIZE_IN_MM",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "public static final double DISPLAY_MIN_SIZE_IN_MM = 2;"
            ],
            [
                "DISPLAY_MAX_SIZE_IN_MM",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "public static final double DISPLAY_MAX_SIZE_IN_MM = 10;"
            ],
            [
                "jjbitVec0",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };"
            ],
            [
                "jjnextStates",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "static final int[] jjnextStates = { 21, 27, 8, 10, 11, 18, 19, 22, 23, 26, 1, 2, 13, 14 };"
            ],
            [
                "jjstrLiteralImages",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "public static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, null, \"\\133\", \"\\135\", \"\\173\", \"\\175\", \"\\72\", \"\\54\", \"\\75\", null, null, null, null, null, null, null, null, null, null, \"\\73\", null, null, null, null, null, null, null, null, null, \"\\137\" };"
            ],
            [
                "lexStateNames",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "public static final String[] lexStateNames = { \"DEFAULT\" };"
            ],
            [
                "jjtoToken",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "static final long[] jjtoToken = { 0x3ffffffc01L };"
            ],
            [
                "jjtoSkip",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "static final long[] jjtoSkip = { 0x7eL };"
            ],
            [
                "jjbitVec0",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };"
            ],
            [
                "jjnextStates",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "static final int[] jjnextStates = { 21, 22, 23, 17, 19, 2, 3, 5, 6, 8, 9 };"
            ],
            [
                "jjstrLiteralImages",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "public static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null };"
            ],
            [
                "lexStateNames",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "public static final String[] lexStateNames = { \"DEFAULT\" };"
            ],
            [
                "jjtoToken",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "static final long[] jjtoToken = { 0x3fffffffffffc9L };"
            ],
            [
                "jjtoSkip",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "static final long[] jjtoSkip = { 0x6L };"
            ],
            [
                "XMLNS",
                "org.graphstream.stream.file.gexf",
                "GEXF",
                "public static final String XMLNS = \"http://www.gexf.net/1.2draft\";"
            ],
            [
                "XMLNS_XSI",
                "org.graphstream.stream.file.gexf",
                "GEXF",
                "public static final String XMLNS_XSI = \"http://www.w3.org/2001/XMLSchema-instance\";"
            ],
            [
                "XMLNS_SL",
                "org.graphstream.stream.file.gexf",
                "GEXF",
                "public static final String XMLNS_SL = \"http://www.gexf.net/1.2draft http://www.gexf.net/1.2draft/gexf.xsd\";"
            ],
            [
                "XMLNS_VIZ",
                "org.graphstream.stream.file.gexf",
                "GEXF",
                "public static final String XMLNS_VIZ = \"http://www.gexf.net/1.2draft/viz\";"
            ],
            [
                "VERSION",
                "org.graphstream.stream.file.gexf",
                "GEXF",
                "public static final String VERSION = \"1.2\";"
            ],
            [
                "BUFFER_SIZE",
                "org.graphstream.stream.file.dgs",
                "DGSParser",
                "protected static final int BUFFER_SIZE = 4096;"
            ],
            [
                "ARRAY_OPEN",
                "org.graphstream.stream.file.dgs",
                "DGSParser",
                "public static final int ARRAY_OPEN = '{';"
            ],
            [
                "ARRAY_CLOSE",
                "org.graphstream.stream.file.dgs",
                "DGSParser",
                "public static final int ARRAY_CLOSE = '}';"
            ],
            [
                "MAP_OPEN",
                "org.graphstream.stream.file.dgs",
                "DGSParser",
                "public static final int MAP_OPEN = '[';"
            ],
            [
                "MAP_CLOSE",
                "org.graphstream.stream.file.dgs",
                "DGSParser",
                "public static final int MAP_CLOSE = ']';"
            ],
            [
                "gradientId",
                "org.graphstream.stream.file",
                "FileSinkSVG2",
                "static int gradientId = 0;"
            ],
            [
                "gradientId",
                "org.graphstream.stream.file",
                "SVGStyle",
                "static int gradientId = 0;"
            ],
            [
                "TIME_PREFIX",
                "org.graphstream.stream",
                "Timeline",
                "public static final String TIME_PREFIX = \"time\";"
            ],
            [
                "SYNC_DISABLE_KEY",
                "org.graphstream.stream.sync",
                "SinkTime",
                "public static final String SYNC_DISABLE_KEY = \"org.graphstream.stream.sync.disable\";"
            ],
            [
                "disableSync",
                "org.graphstream.stream.sync",
                "SinkTime",
                "protected static final boolean disableSync;"
            ],
            [
                "LIGHT_YELLOW",
                "org.graphstream.stream.netstream",
                "NetStreamReceiver",
                "protected static final String LIGHT_YELLOW = \"\u001b[33;1m\";"
            ],
            [
                "RESET",
                "org.graphstream.stream.netstream",
                "NetStreamReceiver",
                "protected static final String RESET = \"\u001b[0m\";"
            ],
            [
                "BUFFER_INITIAL_SIZE",
                "org.graphstream.stream.netstream",
                "NetStreamReceiver",
                "protected static final int BUFFER_INITIAL_SIZE = 8192;"
            ],
            [
                "BUFFER_INITIAL_SIZE",
                "org.graphstream.stream.netstream",
                "IncomingBuffer",
                "protected static final int BUFFER_INITIAL_SIZE = 8192;"
            ],
            [
                "EVENT_GETVERSION",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_GETVERSION = 0x00;"
            ],
            [
                "EVENT_START",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_START = 0x01;"
            ],
            [
                "EVENT_END",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_END = 0x02;"
            ],
            [
                "EVENT_ADD_NODE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_ADD_NODE = 0x10;"
            ],
            [
                "EVENT_DEL_NODE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_DEL_NODE = 0x11;"
            ],
            [
                "EVENT_ADD_EDGE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_ADD_EDGE = 0x12;"
            ],
            [
                "EVENT_DEL_EDGE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_DEL_EDGE = 0x13;"
            ],
            [
                "EVENT_STEP",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_STEP = 0x14;"
            ],
            [
                "EVENT_CLEARED",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_CLEARED = 0x15;"
            ],
            [
                "EVENT_ADD_GRAPH_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_ADD_GRAPH_ATTR = 0x16;"
            ],
            [
                "EVENT_CHG_GRAPH_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_CHG_GRAPH_ATTR = 0x17;"
            ],
            [
                "EVENT_DEL_GRAPH_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_DEL_GRAPH_ATTR = 0x18;"
            ],
            [
                "EVENT_ADD_NODE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_ADD_NODE_ATTR = 0x19;"
            ],
            [
                "EVENT_CHG_NODE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_CHG_NODE_ATTR = 0x1a;"
            ],
            [
                "EVENT_DEL_NODE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_DEL_NODE_ATTR = 0x1b;"
            ],
            [
                "EVENT_ADD_EDGE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_ADD_EDGE_ATTR = 0x1c;"
            ],
            [
                "EVENT_CHG_EDGE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_CHG_EDGE_ATTR = 0x1d;"
            ],
            [
                "EVENT_DEL_EDGE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_DEL_EDGE_ATTR = 0x1e;"
            ],
            [
                "TYPE_UNKNOWN",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_UNKNOWN = 0x00;"
            ],
            [
                "TYPE_BOOLEAN",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_BOOLEAN = 0x50;"
            ],
            [
                "TYPE_BOOLEAN_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_BOOLEAN_ARRAY = 0x51;"
            ],
            [
                "TYPE_BYTE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_BYTE = 0x52;"
            ],
            [
                "TYPE_BYTE_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_BYTE_ARRAY = 0x53;"
            ],
            [
                "TYPE_SHORT",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_SHORT = 0x54;"
            ],
            [
                "TYPE_SHORT_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_SHORT_ARRAY = 0x55;"
            ],
            [
                "TYPE_INT",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_INT = 0x56;"
            ],
            [
                "TYPE_INT_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_INT_ARRAY = 0x57;"
            ],
            [
                "TYPE_LONG",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_LONG = 0x58;"
            ],
            [
                "TYPE_LONG_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_LONG_ARRAY = 0x59;"
            ],
            [
                "TYPE_FLOAT",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_FLOAT = 0x5a;"
            ],
            [
                "TYPE_FLOAT_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_FLOAT_ARRAY = 0x5b;"
            ],
            [
                "TYPE_DOUBLE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_DOUBLE = 0x5c;"
            ],
            [
                "TYPE_DOUBLE_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_DOUBLE_ARRAY = 0x5d;"
            ],
            [
                "TYPE_STRING",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_STRING = 0x5e;"
            ],
            [
                "TYPE_RAW",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_RAW = 0x5f;"
            ],
            [
                "TYPE_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static byte TYPE_ARRAY = 0x60;"
            ],
            [
                "TYPE_NULL",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_NULL = 0x61;"
            ],
            [
                "COMMAND",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int COMMAND = 0x70;"
            ],
            [
                "NO_OPTIONS",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public final static int NO_OPTIONS = 0;"
            ],
            [
                "ENCODE",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public final static int ENCODE = 1;"
            ],
            [
                "DECODE",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public final static int DECODE = 0;"
            ],
            [
                "GZIP",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public final static int GZIP = 2;"
            ],
            [
                "DONT_GUNZIP",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public final static int DONT_GUNZIP = 4;"
            ],
            [
                "DO_BREAK_LINES",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public final static int DO_BREAK_LINES = 8;"
            ],
            [
                "URL_SAFE",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public final static int URL_SAFE = 16;"
            ],
            [
                "ORDERED",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public final static int ORDERED = 32;"
            ],
            [
                "INITIAL_EDGE_CAPACITY",
                "org.graphstream.graph.implementations",
                "AdjacencyListNode",
                "protected static final int INITIAL_EDGE_CAPACITY;"
            ],
            [
                "GROWTH_FACTOR",
                "org.graphstream.graph.implementations",
                "AdjacencyListNode",
                "protected static final double GROWTH_FACTOR = 1.1;"
            ],
            [
                "I_EDGE",
                "org.graphstream.graph.implementations",
                "AdjacencyListNode",
                "protected static final char I_EDGE = 0;"
            ],
            [
                "IO_EDGE",
                "org.graphstream.graph.implementations",
                "AdjacencyListNode",
                "protected static final char IO_EDGE = 1;"
            ],
            [
                "O_EDGE",
                "org.graphstream.graph.implementations",
                "AdjacencyListNode",
                "protected static final char O_EDGE = 2;"
            ],
            [
                "GROW_FACTOR",
                "org.graphstream.graph.implementations",
                "AdjacencyListGraph",
                "public static final double GROW_FACTOR = 1.1;"
            ],
            [
                "DEFAULT_NODE_CAPACITY",
                "org.graphstream.graph.implementations",
                "AdjacencyListGraph",
                "public static final int DEFAULT_NODE_CAPACITY = 128;"
            ],
            [
                "DEFAULT_EDGE_CAPACITY",
                "org.graphstream.graph.implementations",
                "AdjacencyListGraph",
                "public static final int DEFAULT_EDGE_CAPACITY = 1024;"
            ]
        ],
        "tokensMethodJavadocValues": [],
        "tokensMethodArguments": [
            [
                "select",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "Selector"
            ],
            [
                "styleString",
                "java.lang",
                "String"
            ]
        ],
        "tokensMethodVariablesNonPrivateNonStaticNonVoidMethods": [
            [
                "getRulesFor",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleSheet",
                "public ArrayList<Rule> getRulesFor(Element element)"
            ],
            [
                "getDefaultEdgeStyle",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleSheet",
                "public Style getDefaultEdgeStyle()"
            ],
            [
                "toString",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleSheet",
                "public String toString()"
            ],
            [
                "getDefaultSpriteRule",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleSheet",
                "public Rule getDefaultSpriteRule()"
            ],
            [
                "clone",
                "java.lang",
                "Object",
                "protected native Object clone() throws CloneNotSupportedException"
            ],
            [
                "getNodeStyleNameSpace",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleSheet",
                "public NameSpace getNodeStyleNameSpace()"
            ],
            [
                "getDefaultNodeStyle",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleSheet",
                "public Style getDefaultNodeStyle()"
            ],
            [
                "equals",
                "java.lang",
                "Object",
                "public boolean equals(Object arg0)"
            ],
            [
                "getEdgeStyleNameSpace",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleSheet",
                "public NameSpace getEdgeStyleNameSpace()"
            ],
            [
                "getGraphStyleNameSpace",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleSheet",
                "public NameSpace getGraphStyleNameSpace()"
            ],
            [
                "getDefaultNodeRule",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleSheet",
                "public Rule getDefaultNodeRule()"
            ],
            [
                "getDefaultGraphRule",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleSheet",
                "public Rule getDefaultGraphRule()"
            ],
            [
                "getSpriteStyleNameSpace",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleSheet",
                "public NameSpace getSpriteStyleNameSpace()"
            ],
            [
                "getStyleGroupIdFor",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleSheet",
                "public String getStyleGroupIdFor(Element element, ArrayList<Rule> rules)"
            ],
            [
                "getDefaultEdgeRule",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleSheet",
                "public Rule getDefaultEdgeRule()"
            ],
            [
                "hashCode",
                "java.lang",
                "Object",
                "public native int hashCode()"
            ],
            [
                "getDefaultSpriteStyle",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleSheet",
                "public Style getDefaultSpriteStyle()"
            ],
            [
                "getDefaultGraphStyle",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleSheet",
                "public Style getDefaultGraphStyle()"
            ],
            [
                "getClass",
                "java.lang",
                "Object",
                "public final native Class<? extends Object> getClass()"
            ],
            [
                "getType",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "Selector",
                "public Selector.Type getType()"
            ],
            [
                "getId",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "Selector",
                "public String getId()"
            ],
            [
                "getPseudoClass",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "Selector",
                "public String getPseudoClass()"
            ],
            [
                "toString",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "Selector",
                "public String toString()"
            ],
            [
                "getClazz",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "Selector",
                "public String getClazz()"
            ],
            [
                "toString",
                "java.lang",
                "Object",
                "public String toString()"
            ],
            [
                "offsetByCodePoints",
                "java.lang",
                "String",
                "public int offsetByCodePoints(int arg0, int arg1)"
            ],
            [
                "charAt",
                "java.lang",
                "String",
                "public char charAt(int arg0)"
            ],
            [
                "hashCode",
                "java.lang",
                "String",
                "public int hashCode()"
            ],
            [
                "getBytes",
                "java.lang",
                "String",
                "public byte[] getBytes()"
            ],
            [
                "chars",
                "java.lang",
                "String",
                "public IntStream chars()"
            ],
            [
                "toCharArray",
                "java.lang",
                "String",
                "public char[] toCharArray()"
            ],
            [
                "repeat",
                "java.lang",
                "String",
                "public String repeat(int arg0)"
            ],
            [
                "resolveConstantDesc",
                "java.lang",
                "String",
                "public String resolveConstantDesc(MethodHandles.Lookup arg0)"
            ],
            [
                "toString",
                "java.lang",
                "String",
                "public String toString()"
            ],
            [
                "indexOf",
                "java.lang",
                "String",
                "public int indexOf(String arg0)"
            ],
            [
                "formatted",
                "java.lang",
                "String",
                "public String formatted(Object[] arg0)"
            ],
            [
                "stripTrailing",
                "java.lang",
                "String",
                "public String stripTrailing()"
            ],
            [
                "lastIndexOf",
                "java.lang",
                "String",
                "public int lastIndexOf(String arg0, int arg1)"
            ],
            [
                "transform",
                "java.lang",
                "String",
                "public <R> R transform(Function<? super String, ? extends R> arg0)"
            ],
            [
                "compareTo",
                "java.lang",
                "String",
                "public int compareTo(String arg0)"
            ],
            [
                "split",
                "java.lang",
                "String",
                "public String[] split(String arg0, int arg1)"
            ],
            [
                "toLowerCase",
                "java.lang",
                "String",
                "public String toLowerCase(Locale arg0)"
            ],
            [
                "lastIndexOf",
                "java.lang",
                "String",
                "public int lastIndexOf(int arg0, int arg1)"
            ],
            [
                "lastIndexOf",
                "java.lang",
                "String",
                "public int lastIndexOf(int arg0)"
            ],
            [
                "isLatin1",
                "java.lang",
                "String",
                "boolean isLatin1()"
            ],
            [
                "translateEscapes",
                "java.lang",
                "String",
                "public String translateEscapes()"
            ],
            [
                "startsWith",
                "java.lang",
                "String",
                "public boolean startsWith(String arg0)"
            ],
            [
                "contentEquals",
                "java.lang",
                "String",
                "public boolean contentEquals(StringBuffer arg0)"
            ],
            [
                "indexOf",
                "java.lang",
                "String",
                "public int indexOf(int arg0, int arg1)"
            ],
            [
                "contains",
                "java.lang",
                "String",
                "public boolean contains(CharSequence arg0)"
            ],
            [
                "codePointAt",
                "java.lang",
                "String",
                "public int codePointAt(int arg0)"
            ],
            [
                "regionMatches",
                "java.lang",
                "String",
                "public boolean regionMatches(int arg0, String arg1, int arg2, int arg3)"
            ],
            [
                "strip",
                "java.lang",
                "String",
                "public String strip()"
            ],
            [
                "codePoints",
                "java.lang",
                "String",
                "public IntStream codePoints()"
            ],
            [
                "lines",
                "java.lang",
                "String",
                "public Stream<String> lines()"
            ],
            [
                "toUpperCase",
                "java.lang",
                "String",
                "public String toUpperCase()"
            ],
            [
                "getBytes",
                "java.lang",
                "String",
                "public byte[] getBytes(String arg0) throws UnsupportedEncodingException"
            ],
            [
                "contentEquals",
                "java.lang",
                "String",
                "public boolean contentEquals(CharSequence arg0)"
            ],
            [
                "subSequence",
                "java.lang",
                "String",
                "public CharSequence subSequence(int arg0, int arg1)"
            ],
            [
                "regionMatches",
                "java.lang",
                "String",
                "public boolean regionMatches(boolean arg0, int arg1, String arg2, int arg3, int arg4)"
            ],
            [
                "describeConstable",
                "java.lang",
                "String",
                "public Optional<String> describeConstable()"
            ],
            [
                "isBlank",
                "java.lang",
                "String",
                "public boolean isBlank()"
            ],
            [
                "indexOf",
                "java.lang",
                "String",
                "public int indexOf(int arg0)"
            ],
            [
                "substring",
                "java.lang",
                "String",
                "public String substring(int arg0)"
            ],
            [
                "isEmpty",
                "java.lang",
                "String",
                "public boolean isEmpty()"
            ],
            [
                "toUpperCase",
                "java.lang",
                "String",
                "public String toUpperCase(Locale arg0)"
            ],
            [
                "indexOf",
                "java.lang",
                "String",
                "public int indexOf(String arg0, int arg1)"
            ],
            [
                "replace",
                "java.lang",
                "String",
                "public String replace(char arg0, char arg1)"
            ],
            [
                "concat",
                "java.lang",
                "String",
                "public String concat(String arg0)"
            ],
            [
                "replaceFirst",
                "java.lang",
                "String",
                "public String replaceFirst(String arg0, String arg1)"
            ],
            [
                "equals",
                "java.lang",
                "String",
                "public boolean equals(Object arg0)"
            ],
            [
                "matches",
                "java.lang",
                "String",
                "public boolean matches(String arg0)"
            ],
            [
                "replace",
                "java.lang",
                "String",
                "public String replace(CharSequence arg0, CharSequence arg1)"
            ],
            [
                "indent",
                "java.lang",
                "String",
                "public String indent(int arg0)"
            ],
            [
                "getBytes",
                "java.lang",
                "String",
                "public byte[] getBytes(Charset arg0)"
            ],
            [
                "stripLeading",
                "java.lang",
                "String",
                "public String stripLeading()"
            ],
            [
                "trim",
                "java.lang",
                "String",
                "public String trim()"
            ],
            [
                "coder",
                "java.lang",
                "String",
                "byte coder()"
            ],
            [
                "endsWith",
                "java.lang",
                "String",
                "public boolean endsWith(String arg0)"
            ],
            [
                "toLowerCase",
                "java.lang",
                "String",
                "public String toLowerCase()"
            ],
            [
                "stripIndent",
                "java.lang",
                "String",
                "public String stripIndent()"
            ],
            [
                "lastIndexOf",
                "java.lang",
                "String",
                "public int lastIndexOf(String arg0)"
            ],
            [
                "equalsIgnoreCase",
                "java.lang",
                "String",
                "public boolean equalsIgnoreCase(String arg0)"
            ],
            [
                "value",
                "java.lang",
                "String",
                "byte[] value()"
            ],
            [
                "length",
                "java.lang",
                "String",
                "public int length()"
            ],
            [
                "substring",
                "java.lang",
                "String",
                "public String substring(int arg0, int arg1)"
            ],
            [
                "codePointCount",
                "java.lang",
                "String",
                "public int codePointCount(int arg0, int arg1)"
            ],
            [
                "compareToIgnoreCase",
                "java.lang",
                "String",
                "public int compareToIgnoreCase(String arg0)"
            ],
            [
                "intern",
                "java.lang",
                "String",
                "public native String intern()"
            ],
            [
                "startsWith",
                "java.lang",
                "String",
                "public boolean startsWith(String arg0, int arg1)"
            ],
            [
                "replaceAll",
                "java.lang",
                "String",
                "public String replaceAll(String arg0, String arg1)"
            ],
            [
                "codePointBefore",
                "java.lang",
                "String",
                "public int codePointBefore(int arg0)"
            ],
            [
                "split",
                "java.lang",
                "String",
                "public String[] split(String arg0)"
            ],
            [
                "compareTo",
                "java.lang",
                "Comparable",
                "public abstract int compareTo(T arg0)"
            ],
            [
                "length",
                "java.lang",
                "CharSequence",
                "public abstract int length()"
            ],
            [
                "codePoints",
                "java.lang",
                "CharSequence",
                "public default IntStream codePoints()"
            ],
            [
                "toString",
                "java.lang",
                "CharSequence",
                "public abstract String toString()"
            ],
            [
                "charAt",
                "java.lang",
                "CharSequence",
                "public abstract char charAt(int arg0)"
            ],
            [
                "subSequence",
                "java.lang",
                "CharSequence",
                "public abstract CharSequence subSequence(int arg0, int arg1)"
            ],
            [
                "isEmpty",
                "java.lang",
                "CharSequence",
                "public default boolean isEmpty()"
            ],
            [
                "chars",
                "java.lang",
                "CharSequence",
                "public default IntStream chars()"
            ],
            [
                "describeConstable",
                "java.lang.constant",
                "Constable",
                "public abstract Optional<? extends ConstantDesc> describeConstable()"
            ],
            [
                "resolveConstantDesc",
                "java.lang.constant",
                "ConstantDesc",
                "public abstract Object resolveConstantDesc(MethodHandles.Lookup arg0) throws ReflectiveOperationException"
            ]
        ],
        "tokensMethodVariablesNonPrivateNonStaticAttributes": [
            [
                "defaultRule",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleSheet",
                "public Rule defaultRule;"
            ],
            [
                "graphRules",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleSheet",
                "public NameSpace graphRules = new NameSpace(Selector.Type.GRAPH);"
            ],
            [
                "nodeRules",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleSheet",
                "public NameSpace nodeRules = new NameSpace(Selector.Type.NODE);"
            ],
            [
                "edgeRules",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleSheet",
                "public NameSpace edgeRules = new NameSpace(Selector.Type.EDGE);"
            ],
            [
                "spriteRules",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleSheet",
                "public NameSpace spriteRules = new NameSpace(Selector.Type.SPRITE);"
            ],
            [
                "listeners",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleSheet",
                "public ArrayList<StyleSheetListener> listeners = new ArrayList<StyleSheetListener>();"
            ],
            [
                "type",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "Selector",
                "public Selector.Type type;"
            ],
            [
                "id",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "Selector",
                "public String id;"
            ],
            [
                "clazz",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "Selector",
                "public String clazz;"
            ],
            [
                "pseudoClass",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "Selector",
                "public String pseudoClass;"
            ]
        ],
        "tokensOracleVariablesNonPrivateNonStaticNonVoidMethods": [],
        "tokensOracleVariablesNonPrivateNonStaticAttributes": []
    },
    {
        "id": 3081,
        "oracle": ";",
        "oracleType": "PRE",
        "projectName": "gs-core-1.3",
        "packageName": "org.graphstream.ui.graphicGraph.stylesheet",
        "className": "StyleSheet",
        "javadocTag": "@param newRule The new rule.",
        "methodJavadoc": "    /**\n\t * Add a new rule with its style. If the rule selector is just GRAPH, NODE,\n\t * EDGE or SPRITE, the default corresponding rules make a copy (or\n\t * augmentation) of its style. Else if an id or class is specified the rules\n\t * are added (or changed/augmented if the id or class was already set) and\n\t * their parent is set to the default graph, node, edge or sprite rules. If\n\t * this is an event rule (or meta-class rule), its sibling rule (the same\n\t * rule without the meta-class) is searched and created if not found and the\n\t * event rule is added as an alternative to it.\n\t * \n\t * @param newRule\n\t *            The new rule.\n\t */",
        "methodSourceCode": "public void addRule(Rule newRule){\n    Rule oldRule = null;\n    switch(newRule.selector.getType()) {\n        case ANY:\n            throw new RuntimeException(\"The ANY selector should never be used, it is created automatically.\");\n        case GRAPH:\n            oldRule = graphRules.addRule(newRule);\n            break;\n        case NODE:\n            oldRule = nodeRules.addRule(newRule);\n            break;\n        case EDGE:\n            oldRule = edgeRules.addRule(newRule);\n            break;\n        case SPRITE:\n            oldRule = spriteRules.addRule(newRule);\n            break;\n        default:\n            throw new RuntimeException(\"Ho ho ho ?\");\n    }\n    for (StyleSheetListener listener : listeners) listener.styleAdded(oldRule, newRule);\n}",
        "classJavadoc": "/**\n * Implementation of the style sheets that can be stored in the graphic graph.\n * \n * @author Antoine Dutot\n */",
        "classSourceCode": "/*\n * Copyright 2006 - 2015\n *     Stefan Balev     <stefan.balev@graphstream-project.org>\n *     Julien Baudry    <julien.baudry@graphstream-project.org>\n *     Antoine Dutot    <antoine.dutot@graphstream-project.org>\n *     Yoann Pign\u00e9      <yoann.pigne@graphstream-project.org>\n *     Guilhelm Savin   <guilhelm.savin@graphstream-project.org>\n * \n * This file is part of GraphStream <http://graphstream-project.org>.\n * \n * GraphStream is a library whose purpose is to handle static or dynamic\n * graph, create them from scratch, file or any source and display them.\n * \n * This program is free software distributed under the terms of two licenses, the\n * CeCILL-C license that fits European law, and the GNU Lesser General Public\n * License. You can  use, modify and/ or redistribute the software under the terms\n * of the CeCILL-C license as circulated by CEA, CNRS and INRIA at the following\n * URL <http://www.cecill.info> or under the terms of the GNU LGPL as published by\n * the Free Software Foundation, either version 3 of the License, or (at your\n * option) any later version.\n * \n * This program is distributed in the hope that it will be useful, but WITHOUT ANY\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A\n * PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more details.\n * \n * You should have received a copy of the GNU Lesser General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n * \n * The fact that you are presently reading this means that you have had\n * knowledge of the CeCILL-C and LGPL licenses and that you accept their terms.\n */\npackage org.graphstream.ui.graphicGraph.stylesheet;\n\nimport java.awt.Color;\nimport java.io.BufferedInputStream;\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.io.Reader;\nimport java.io.StringReader;\nimport java.net.URL;\nimport java.util.ArrayList;\nimport java.util.HashMap;\n\nimport org.graphstream.graph.Edge;\nimport org.graphstream.graph.Element;\nimport org.graphstream.graph.Graph;\nimport org.graphstream.graph.Node;\nimport org.graphstream.ui.graphicGraph.GraphicSprite;\nimport org.graphstream.ui.graphicGraph.stylesheet.StyleConstants.StrokeMode;\nimport org.graphstream.ui.graphicGraph.stylesheet.parser.StyleSheetParser;\nimport org.graphstream.util.parser.ParseException;\n\n/**\n * Implementation of the style sheets that can be stored in the graphic graph.\n * \n * @author Antoine Dutot\n */\npublic class StyleSheet {\n\t// Attributes\n\n\t/**\n\t * The top-level default rule.\n\t */\n\tpublic Rule defaultRule;\n\n\t/**\n\t * The default, id and class rules for graphs.\n\t */\n\tpublic NameSpace graphRules = new NameSpace(Selector.Type.GRAPH);\n\n\t/**\n\t * The default, id and class rules for nodes.\n\t */\n\tpublic NameSpace nodeRules = new NameSpace(Selector.Type.NODE);\n\n\t/**\n\t * The default, id and class rules for edges.\n\t */\n\tpublic NameSpace edgeRules = new NameSpace(Selector.Type.EDGE);\n\n\t/**\n\t * The default, id and class rules for sprites.\n\t */\n\tpublic NameSpace spriteRules = new NameSpace(Selector.Type.SPRITE);\n\n\t/**\n\t * Set of listeners.\n\t */\n\tpublic ArrayList<StyleSheetListener> listeners = new ArrayList<StyleSheetListener>();\n\n\t// Constructors\n\n\t/**\n\t * New style sheet initialised to defaults.\n\t */\n\tpublic StyleSheet() {\n\t\tinitRules();\n\t}\n\n\t// Access\n\n\t/**\n\t * The default rule for graphs.\n\t * \n\t * @return A rule.\n\t */\n\tpublic Rule getDefaultGraphRule() {\n\t\treturn graphRules.defaultRule;\n\t}\n\n\t/**\n\t * The default rule for nodes.\n\t * \n\t * @return A rule.\n\t */\n\tpublic Rule getDefaultNodeRule() {\n\t\treturn nodeRules.defaultRule;\n\t}\n\n\t/**\n\t * The default rule for edges.\n\t * \n\t * @return A rule.\n\t */\n\tpublic Rule getDefaultEdgeRule() {\n\t\treturn edgeRules.defaultRule;\n\t}\n\n\t/**\n\t * The default rule for sprites.\n\t * \n\t * @return A rule.\n\t */\n\tpublic Rule getDefaultSpriteRule() {\n\t\treturn spriteRules.defaultRule;\n\t}\n\n\t/**\n\t * The default style for graphs.\n\t * \n\t * @return A style.\n\t */\n\tpublic Style getDefaultGraphStyle() {\n\t\treturn getDefaultGraphRule().getStyle();\n\t}\n\n\t/**\n\t * The default style for nodes.\n\t * \n\t * @return A style.\n\t */\n\tpublic Style getDefaultNodeStyle() {\n\t\treturn getDefaultNodeRule().getStyle();\n\t}\n\n\t/**\n\t * The default style for edges.\n\t * \n\t * @return A style.\n\t */\n\tpublic Style getDefaultEdgeStyle() {\n\t\treturn getDefaultEdgeRule().getStyle();\n\t}\n\n\t/**\n\t * The default style for sprites.\n\t * \n\t * @return A style.\n\t */\n\tpublic Style getDefaultSpriteStyle() {\n\t\treturn getDefaultSpriteRule().getStyle();\n\t}\n\n\t/**\n\t * All the rules (default, specific and class) that apply to graphs.\n\t * \n\t * @return The set of rules for graphs.\n\t */\n\tpublic NameSpace getGraphStyleNameSpace() {\n\t\treturn graphRules;\n\t}\n\n\t/**\n\t * All the rules (default, specific and class) that apply to nodes.\n\t * \n\t * @return The set of rules for nodes.\n\t */\n\tpublic NameSpace getNodeStyleNameSpace() {\n\t\treturn nodeRules;\n\t}\n\n\t/**\n\t * All the rules (default, specific and class) that apply to edges.\n\t * \n\t * @return The set of rules for edges.\n\t */\n\tpublic NameSpace getEdgeStyleNameSpace() {\n\t\treturn edgeRules;\n\t}\n\n\t/**\n\t * All the rules (default, specific and class) that apply to sprites.\n\t * \n\t * @return The set of rules for sprites.\n\t */\n\tpublic NameSpace getSpriteStyleNameSpace() {\n\t\treturn spriteRules;\n\t}\n\n\t/**\n\t * Get the rules that match a given element.\n\t * \n\t * First a rule for the identifier of the element is looked for. It is\n\t * looked for in its name space (nodes for Node element, etc.) If it is not\n\t * found, the default rule for this kind of element is used. This rule is\n\t * pushed at start of the returned array of rules.\n\t * \n\t * After a rule for the element is found, then the various classes the\n\t * element pertains to are looked at and each class rule found is added in\n\t * order in the returned array.\n\t * \n\t * @param element\n\t *            The element a rules are searched for.\n\t * @return A set of rules matching the element, with the main rule at index\n\t *         0.\n\t */\n\tpublic ArrayList<Rule> getRulesFor(Element element) {\n\t\tArrayList<Rule> rules = null;\n\n\t\tif (element instanceof Graph) {\n\t\t\trules = graphRules.getRulesFor(element);\n\t\t} else if (element instanceof Node) {\n\t\t\trules = nodeRules.getRulesFor(element);\n\t\t} else if (element instanceof Edge) {\n\t\t\trules = edgeRules.getRulesFor(element);\n\t\t} else if (element instanceof GraphicSprite) {\n\t\t\trules = spriteRules.getRulesFor(element);\n\t\t} else {\n\t\t\trules = new ArrayList<Rule>();\n\t\t\trules.add(defaultRule);\n\t\t}\n\n\t\treturn rules;\n\t}\n\n\t/**\n\t * Compute the name of the style group and element will pertain to knowing\n\t * its styling rules.\n\t * \n\t * @param element\n\t *            The element.\n\t * @param rules\n\t *            The styling rules.\n\t * @return The unique identifier of the style group for the element.\n\t * @see #getRulesFor(Element)\n\t */\n\tpublic String getStyleGroupIdFor(Element element, ArrayList<Rule> rules) {\n\t\tStringBuilder builder = new StringBuilder();\n\n\t\tif (element instanceof Graph) {\n\t\t\tbuilder.append(\"g\");\n\t\t} else if (element instanceof Node) {\n\t\t\tbuilder.append(\"n\");\n\t\t} else if (element instanceof Edge) {\n\t\t\tbuilder.append(\"e\");\n\t\t} else if (element instanceof GraphicSprite) {\n\t\t\tbuilder.append(\"s\");\n\t\t} else {\n\t\t\tthrow new RuntimeException(\"What ?\");\n\t\t}\n\n\t\tif (rules.get(0).selector.getId() != null) {\n\t\t\tbuilder.append('_');\n\t\t\tbuilder.append(rules.get(0).selector.getId());\n\t\t}\n\n\t\tint n = rules.size();\n\n\t\tif (n > 1) {\n\t\t\tbuilder.append('(');\n\t\t\tbuilder.append(rules.get(1).selector.getClazz());\n\t\t\tfor (int i = 2; i < n; i++) {\n\t\t\t\tbuilder.append(',');\n\t\t\t\tbuilder.append(rules.get(i).selector.getClazz());\n\t\t\t}\n\t\t\tbuilder.append(')');\n\t\t}\n\n\t\treturn builder.toString();\n\t}\n\n\t// Commands\n\n\t/**\n\t * Create the default rules. This method is the place to set defaults for\n\t * specific element types. This is here that the edge width is reset to one,\n\t * since the default width is larger. The default z index that is different\n\t * for every class of element is also set here.\n\t */\n\tprotected void initRules() {\n\t\tdefaultRule = new Rule(new Selector(Selector.Type.ANY), null);\n\n\t\tdefaultRule.getStyle().setDefaults();\n\n\t\tgraphRules.defaultRule = new Rule(new Selector(Selector.Type.GRAPH),\n\t\t\t\tdefaultRule);\n\t\tnodeRules.defaultRule = new Rule(new Selector(Selector.Type.NODE),\n\t\t\t\tdefaultRule);\n\t\tedgeRules.defaultRule = new Rule(new Selector(Selector.Type.EDGE),\n\t\t\t\tdefaultRule);\n\t\tspriteRules.defaultRule = new Rule(new Selector(Selector.Type.SPRITE),\n\t\t\t\tdefaultRule);\n\n\t\tgraphRules.defaultRule.getStyle().setValue(\"padding\",\n\t\t\t\tnew Values(Style.Units.PX, 30));\n\t\tedgeRules.defaultRule.getStyle().setValue(\"shape\",\n\t\t\t\tStyleConstants.Shape.LINE);\n\t\tedgeRules.defaultRule.getStyle().setValue(\"size\",\n\t\t\t\tnew Values(Style.Units.PX, 1));\n\t\tedgeRules.defaultRule.getStyle().setValue(\"z-index\", new Integer(1));\n\t\tnodeRules.defaultRule.getStyle().setValue(\"z-index\", new Integer(2));\n\t\tspriteRules.defaultRule.getStyle().setValue(\"z-index\", new Integer(3));\n\n\t\tColors colors = new Colors();\n\t\tcolors.add(Color.WHITE);\n\n\t\tgraphRules.defaultRule.getStyle().setValue(\"fill-color\", colors);\n\t\tgraphRules.defaultRule.getStyle().setValue(\"stroke-mode\",\n\t\t\t\tStrokeMode.NONE);\n\n\t\tfor (StyleSheetListener listener : listeners) {\n\t\t\tlistener.styleAdded(defaultRule, defaultRule);\n\t\t\tlistener.styleAdded(graphRules.defaultRule, graphRules.defaultRule);\n\t\t\tlistener.styleAdded(nodeRules.defaultRule, nodeRules.defaultRule);\n\t\t\tlistener.styleAdded(edgeRules.defaultRule, edgeRules.defaultRule);\n\t\t\tlistener.styleAdded(spriteRules.defaultRule,\n\t\t\t\t\tspriteRules.defaultRule);\n\t\t}\n\n\t\t// for( StyleSheetListener listener: listeners )\n\t\t// listener.styleAdded( defaultRule, defaultRule );\n\t\t// for( StyleSheetListener listener: listeners )\n\t\t// listener.styleAdded( graphRules.defaultRule, graphRules.defaultRule\n\t\t// );\n\t\t// for( StyleSheetListener listener: listeners )\n\t\t// listener.styleAdded( nodeRules.defaultRule, nodeRules.defaultRule );\n\t\t// for( StyleSheetListener listener: listeners )\n\t\t// listener.styleAdded( edgeRules.defaultRule, edgeRules.defaultRule );\n\t\t// for( StyleSheetListener listener: listeners )\n\t\t// listener.styleAdded( spriteRules.defaultRule, spriteRules.defaultRule\n\t\t// );\n\t}\n\n\t/**\n\t * Add a listener for style events. You never receive events for default\n\t * rules and styles. You receive events only for the rules and styles that\n\t * are added after this listener is registered.\n\t * \n\t * @param listener\n\t *            The new listener.\n\t */\n\tpublic void addListener(StyleSheetListener listener) {\n\t\tlisteners.add(listener);\n\t}\n\n\t/**\n\t * Remove a previously registered listener.\n\t * \n\t * @param listener\n\t *            The listener to remove.\n\t */\n\tpublic void removeListener(StyleSheetListener listener) {\n\t\tint index = listeners.indexOf(listener);\n\n\t\tif (index >= 0)\n\t\t\tlisteners.remove(index);\n\t}\n\n\t/**\n\t * Clear all specific rules and initialise the default rules. The listeners\n\t * are not changed.\n\t */\n\tpublic void clear() {\n\t\tgraphRules.clear();\n\t\tnodeRules.clear();\n\t\tedgeRules.clear();\n\t\tspriteRules.clear();\n\t\tinitRules();\n\n\t\tfor (StyleSheetListener listener : listeners)\n\t\t\tlistener.styleSheetCleared();\n\t}\n\n\t/**\n\t * Parse a style sheet from a file. The style sheet will complete the\n\t * previously parsed style sheets.\n\t * \n\t * @param fileName\n\t *            Name of the file containing the style sheet.\n\t * @throws IOException\n\t *             For any kind of I/O error or parse error.\n\t */\n\tpublic void parseFromFile(String fileName) throws IOException {\n\t\tparse(new InputStreamReader(new BufferedInputStream(\n\t\t\t\tnew FileInputStream(fileName))));\n\t}\n\n\t/**\n\t * Parse a style sheet from an URL. The style sheet will complete the\n\t * previously parsed style sheets. First, this method will search the URL as\n\t * SystemRessource, then as a file and if there is no match, just try to\n\t * create an URL object giving the URL as constructor's parameter.\n\t * \n\t * @param url\n\t *            Name of the file containing the style sheet.\n\t * @throws IOException\n\t *             For any kind of I/O error or parse error.\n\t */\n\tpublic void parseFromURL(String url) throws IOException {\n\t\tURL u = StyleSheet.class.getClassLoader().getResource(url);\n\t\tif (u == null) {\n\t\t\tFile f = new File(url);\n\n\t\t\tif (f.exists())\n\t\t\t\tu = f.toURI().toURL();\n\t\t\telse\n\t\t\t\tu = new URL(url);\n\t\t}\n\n\t\tparse(new InputStreamReader(u.openStream()));\n\t}\n\n\t/**\n\t * Parse a style sheet from a string. The style sheet will complete the\n\t * previously parsed style sheets.\n\t * \n\t * @param styleSheet\n\t *            The string containing the whole style sheet.\n\t * @throws IOException\n\t *             For any kind of I/O error or parse error.\n\t */\n\tpublic void parseFromString(String styleSheet) throws IOException {\n\t\tparse(new StringReader(styleSheet));\n\t}\n\n\t/**\n\t * Parse only one style, create a rule with the given selector, and add this\n\t * rule.\n\t * \n\t * @param select\n\t *            The elements for which this style must apply.\n\t * @param styleString\n\t *            The style string to parse.\n\t */\n\tpublic void parseStyleFromString(Selector select, String styleString)\n\t\t\tthrows IOException {\n\t\tStyleSheetParser parser = new StyleSheetParser(this, new StringReader(\n\t\t\t\tstyleString));\n\n\t\tStyle style = new Style();\n\n\t\ttry {\n\t\t\tparser.stylesStart(style);\n\t\t} catch (ParseException e) {\n\t\t\tthrow new IOException(e.getMessage());\n\t\t}\n\n\t\tRule rule = new Rule(select);\n\n\t\trule.setStyle(style);\n\t\taddRule(rule);\n\t}\n\n\t/**\n\t * Load a style sheet from an attribute value, the value can either be the\n\t * contents of the whole style sheet, or begin by \"url\". If it starts with\n\t * \"url\", it must then contain between parenthesis the string of the URL to\n\t * load. For example:\n\t * \n\t * <pre>\n\t * \t\turl('file:///some/path/on/the/file/system')\n\t * </pre>\n\t * \n\t * Or\n\t * \n\t * <pre>\n\t * \t\turl('http://some/web/url')\n\t * </pre>\n\t * \n\t * The loaded style sheet will be merged with the styles already present in\n\t * the style sheet.\n\t * \n\t * @param styleSheetValue\n\t *            The style sheet name of content.\n\t * @throws IOException\n\t *             If the loading or parsing of the style sheet failed.\n\t */\n\tpublic void load(String styleSheetValue) throws IOException {\n\t\tif (styleSheetValue.startsWith(\"url\")) {\n\t\t\t// Extract the part between '(' and ')'.\n\n\t\t\tint beg = styleSheetValue.indexOf('(');\n\t\t\tint end = styleSheetValue.lastIndexOf(')');\n\n\t\t\tif (beg >= 0 && end > beg)\n\t\t\t\tstyleSheetValue = styleSheetValue.substring(beg + 1, end);\n\n\t\t\tstyleSheetValue = styleSheetValue.trim();\n\n\t\t\t// Remove the quotes (') or (\").\n\n\t\t\tif (styleSheetValue.startsWith(\"'\")) {\n\t\t\t\tbeg = 0;\n\t\t\t\tend = styleSheetValue.lastIndexOf('\\'');\n\n\t\t\t\tif (beg >= 0 && end > beg)\n\t\t\t\t\tstyleSheetValue = styleSheetValue.substring(beg + 1, end);\n\t\t\t}\n\n\t\t\tstyleSheetValue = styleSheetValue.trim();\n\n\t\t\tif (styleSheetValue.startsWith(\"\\\"\")) {\n\t\t\t\tbeg = 0;\n\t\t\t\tend = styleSheetValue.lastIndexOf('\"');\n\n\t\t\t\tif (beg >= 0 && end > beg)\n\t\t\t\t\tstyleSheetValue = styleSheetValue.substring(beg + 1, end);\n\t\t\t}\n\n\t\t\t// That's it.\n\n\t\t\tparseFromURL(styleSheetValue);\n\t\t} else // Parse from string, the value is considered to be the style\n\t\t\t\t// sheet contents.\n\t\t{\n\t\t\tparseFromString(styleSheetValue);\n\t\t}\n\t}\n\n\t/**\n\t * Parse the style sheet from the given reader.\n\t * \n\t * @param reader\n\t *            The reader pointing at the style sheet.\n\t * @throws IOException\n\t *             For any kind of I/O error or parse error.\n\t */\n\tprotected void parse(Reader reader) throws IOException {\n\t\tStyleSheetParser parser = new StyleSheetParser(this, reader);\n\n\t\ttry {\n\t\t\tparser.start();\n\t\t} catch (ParseException e) {\n\t\t\tthrow new IOException(e.getMessage());\n\t\t}\n\t}\n\n\t/**\n\t * Add a new rule with its style. If the rule selector is just GRAPH, NODE,\n\t * EDGE or SPRITE, the default corresponding rules make a copy (or\n\t * augmentation) of its style. Else if an id or class is specified the rules\n\t * are added (or changed/augmented if the id or class was already set) and\n\t * their parent is set to the default graph, node, edge or sprite rules. If\n\t * this is an event rule (or meta-class rule), its sibling rule (the same\n\t * rule without the meta-class) is searched and created if not found and the\n\t * event rule is added as an alternative to it.\n\t * \n\t * @param newRule\n\t *            The new rule.\n\t */\n\tpublic void addRule(Rule newRule) {\n\t\tRule oldRule = null;\n\n\t\tswitch (newRule.selector.getType()) {\n\t\tcase ANY:\n\t\t\tthrow new RuntimeException(\n\t\t\t\t\t\"The ANY selector should never be used, it is created automatically.\");\n\t\tcase GRAPH:\n\t\t\toldRule = graphRules.addRule(newRule);\n\t\t\tbreak;\n\t\tcase NODE:\n\t\t\toldRule = nodeRules.addRule(newRule);\n\t\t\tbreak;\n\t\tcase EDGE:\n\t\t\toldRule = edgeRules.addRule(newRule);\n\t\t\tbreak;\n\t\tcase SPRITE:\n\t\t\toldRule = spriteRules.addRule(newRule);\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tthrow new RuntimeException(\"Ho ho ho ?\");\n\t\t}\n\n\t\tfor (StyleSheetListener listener : listeners)\n\t\t\tlistener.styleAdded(oldRule, newRule);\n\t}\n\n\t@Override\n\tpublic String toString() {\n\t\tStringBuilder builder = new StringBuilder();\n\n\t\tbuilder.append(\"StyleSheet : {\\n\");\n\t\tbuilder.append(\"  default styles:\\n\");\n\t\tbuilder.append(defaultRule.toString(1));\n\t\tbuilder.append(graphRules.toString(1));\n\t\tbuilder.append(nodeRules.toString(1));\n\t\tbuilder.append(edgeRules.toString(1));\n\t\tbuilder.append(spriteRules.toString(1));\n\n\t\treturn builder.toString();\n\t}\n\n\t// Nested classes\n\n\t/**\n\t * A name space is a tuple (default rule, id rule set, class rule set).\n\t * \n\t * <p>\n\t * The name space defines a default rule for a kind of elements, a set of\n\t * rules for this kind of elements with a given identifier, and a set or\n\t * rules for this kind of elements with a given class.\n\t * </p>\n\t */\n\tpublic class NameSpace {\n\t\t// Attribute\n\n\t\t/**\n\t\t * The kind of elements in this name space.\n\t\t */\n\t\tpublic Selector.Type type;\n\n\t\t/**\n\t\t * The default rule for this kind of elements.\n\t\t */\n\t\tpublic Rule defaultRule;\n\n\t\t/**\n\t\t * The set of rules for this kind of elements with a given identifier.\n\t\t */\n\t\tpublic HashMap<String, Rule> byId = new HashMap<String, Rule>();\n\n\t\t/**\n\t\t * The set of rules for this kind of elements with a given class.\n\t\t */\n\t\tpublic HashMap<String, Rule> byClass = new HashMap<String, Rule>();\n\n\t\t// Constructor\n\n\t\tpublic NameSpace(Selector.Type type) {\n\t\t\tthis.type = type;\n\t\t}\n\n\t\t// Access\n\n\t\t/**\n\t\t * The kind of elements this name space applies rules to.\n\t\t * \n\t\t * @return A type of element (node, edge, sprite, graph).\n\t\t */\n\t\tpublic Selector.Type getGraphElementType() {\n\t\t\treturn type;\n\t\t}\n\n\t\t/**\n\t\t * Number of specific (id) rules.\n\t\t * \n\t\t * @return The number of rules that apply to elements by their\n\t\t *         identifiers.\n\t\t */\n\t\tpublic int getIdRulesCount() {\n\t\t\treturn byId.size();\n\t\t}\n\n\t\t/**\n\t\t * Number of specific (class) rules.\n\t\t * \n\t\t * @return The number of rules that apply to elements by their classes.\n\t\t */\n\t\tpublic int getClassRulesCount() {\n\t\t\treturn byClass.size();\n\t\t}\n\n\t\t/**\n\t\t * Get the rules that match a given element. The rules are returned in a\n\t\t * given order. The array always contain the \"main\" rule that matches\n\t\t * the element. This rule is either a default rule for the kind of\n\t\t * element given or the rule that matches its identifier if there is\n\t\t * one. Then class rules the element has can be appended to this array\n\t\t * in order.\n\t\t * \n\t\t * @return an array of rules that match the element, with the main rule\n\t\t *         at index 0.\n\t\t */\n\t\tprotected ArrayList<Rule> getRulesFor(Element element) {\n\t\t\tRule rule = byId.get(element.getId());\n\t\t\tArrayList<Rule> rules = new ArrayList<Rule>();\n\n\t\t\tif (rule != null)\n\t\t\t\trules.add(rule);\n\t\t\telse\n\t\t\t\trules.add(defaultRule);\n\n\t\t\tgetClassRules(element, rules);\n\n\t\t\tif (rules.isEmpty())\n\t\t\t\trules.add(defaultRule);\n\n\t\t\treturn rules;\n\t\t}\n\n\t\t/**\n\t\t * Search if the given element has classes attributes and fill the given\n\t\t * array with the set of rules that match these classes.\n\t\t * \n\t\t * @param element\n\t\t *            The element for which classes must be found.\n\t\t * @param rules\n\t\t *            The rule array to fill.\n\t\t */\n\t\tprotected void getClassRules(Element element, ArrayList<Rule> rules) {\n\t\t\tObject o = element.getAttribute(\"ui.class\");\n\n\t\t\tif (o != null) {\n\t\t\t\tif (o instanceof Object[]) {\n\t\t\t\t\tfor (Object s : (Object[]) o) {\n\t\t\t\t\t\tif (s instanceof CharSequence) {\n\t\t\t\t\t\t\tRule rule = byClass.get((CharSequence) s);\n\n\t\t\t\t\t\t\tif (rule != null)\n\t\t\t\t\t\t\t\trules.add(rule);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else if (o instanceof CharSequence) {\n\t\t\t\t\tString classList = ((CharSequence) o).toString().trim();\n\t\t\t\t\tString[] classes = classList.split(\"\\\\s*,\\\\s*\");\n\n\t\t\t\t\tfor (String c : classes) {\n\t\t\t\t\t\tRule rule = byClass.get(c);\n\n\t\t\t\t\t\tif (rule != null)\n\t\t\t\t\t\t\trules.add(rule);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tthrow new RuntimeException(\n\t\t\t\t\t\t\t\"Oups ! class attribute is of type \"\n\t\t\t\t\t\t\t\t\t+ o.getClass().getName());\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Command\n\n\t\t/**\n\t\t * Remove all styles.\n\t\t */\n\t\tprotected void clear() {\n\t\t\tdefaultRule = null;\n\t\t\tbyId.clear();\n\t\t\tbyClass.clear();\n\t\t}\n\n\t\t/**\n\t\t * Add a new rule.\n\t\t * \n\t\t * <p>\n\t\t * Several cases can occur :\n\t\t * </p>\n\t\t * \n\t\t * <ul>\n\t\t * <li>The rule to add has an ID or class and the rule does not yet\n\t\t * exists and is not an event rule : add it directly.</li>\n\t\t * <li>If the rule has an ID or class but the rule already exists,\n\t\t * augment to already existing rule.</li>\n\t\t * <li>If the rule has no ID or class and is not an event, augment the\n\t\t * default style.</li>\n\t\t * <li>If the rule is an event, the corresponding normal rule is\n\t\t * searched, if it does not exists, it is created then or else, the\n\t\t * event is added to the found rule.</li>\n\t\t * </ul>\n\t\t * \n\t\t * @param newRule\n\t\t *            The rule to add or copy.\n\t\t * @return It the rule added augments an existing rule, this existing\n\t\t *         rule is returned, else null is returned.\n\t\t */\n\t\tprotected Rule addRule(Rule newRule) {\n\t\t\tRule oldRule = null;\n\n\t\t\tif (newRule.selector.getPseudoClass() != null) {\n\t\t\t\toldRule = addEventRule(newRule);\n\t\t\t} else if (newRule.selector.getId() != null) {\n\t\t\t\toldRule = byId.get(newRule.selector.getId());\n\n\t\t\t\tif (oldRule != null) {\n\t\t\t\t\toldRule.getStyle().augment(newRule.getStyle());\n\t\t\t\t} else {\n\t\t\t\t\tbyId.put(newRule.selector.getId(), newRule);\n\t\t\t\t\tnewRule.getStyle().reparent(defaultRule);\n\t\t\t\t}\n\t\t\t} else if (newRule.selector.getClazz() != null) {\n\t\t\t\toldRule = byClass.get(newRule.selector.getClazz());\n\n\t\t\t\tif (oldRule != null) {\n\t\t\t\t\toldRule.getStyle().augment(newRule.getStyle());\n\t\t\t\t} else {\n\t\t\t\t\tbyClass.put(newRule.selector.getClazz(), newRule);\n\t\t\t\t\tnewRule.getStyle().reparent(defaultRule);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\toldRule = defaultRule;\n\t\t\t\tdefaultRule.getStyle().augment(newRule.getStyle());\n\t\t\t\tnewRule = defaultRule;\n\t\t\t}\n\n\t\t\t// That's it.\n\n\t\t\treturn oldRule;\n\t\t}\n\n\t\tprotected Rule addEventRule(Rule newRule) {\n\t\t\tRule parentRule = null;\n\n\t\t\tif (newRule.selector.getId() != null) {\n\t\t\t\tparentRule = byId.get(newRule.selector.getId());\n\n\t\t\t\tif (parentRule == null) {\n\t\t\t\t\tparentRule = addRule(new Rule(new Selector(\n\t\t\t\t\t\t\tnewRule.selector.getType(),\n\t\t\t\t\t\t\tnewRule.selector.getId(),\n\t\t\t\t\t\t\tnewRule.selector.getClazz())));\n\t\t\t\t}\n\t\t\t} else if (newRule.selector.getClazz() != null) {\n\t\t\t\tparentRule = byClass.get(newRule.selector.getClazz());\n\n\t\t\t\tif (parentRule == null) {\n\t\t\t\t\tparentRule = addRule(new Rule(new Selector(\n\t\t\t\t\t\t\tnewRule.selector.getType(),\n\t\t\t\t\t\t\tnewRule.selector.getId(),\n\t\t\t\t\t\t\tnewRule.selector.getClazz())));\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tparentRule = defaultRule;\n\t\t\t}\n\n\t\t\tnewRule.getStyle().reparent(parentRule);\n\t\t\tparentRule.getStyle().addAlternateStyle(\n\t\t\t\t\tnewRule.selector.getPseudoClass(), newRule);\n\n\t\t\treturn parentRule;\n\t\t}\n\n\t\t@Override\n\t\tpublic String toString() {\n\t\t\treturn toString(-1);\n\t\t}\n\n\t\tpublic String toString(int level) {\n\t\t\tString prefix = \"\";\n\n\t\t\tif (level > 0) {\n\t\t\t\tfor (int i = 0; i < level; i++)\n\t\t\t\t\tprefix += \"    \";\n\t\t\t}\n\n\t\t\tStringBuilder builder = new StringBuilder();\n\n\t\t\tbuilder.append(String\n\t\t\t\t\t.format(\"%s%s default style :%n\", prefix, type));\n\t\t\tbuilder.append(defaultRule.toString(level + 1));\n\t\t\ttoStringRules(level, builder, byId,\n\t\t\t\t\tString.format(\"%s%s id styles\", prefix, type));\n\t\t\ttoStringRules(level, builder, byClass,\n\t\t\t\t\tString.format(\"%s%s class styles\", prefix, type));\n\n\t\t\treturn builder.toString();\n\t\t}\n\n\t\tprotected void toStringRules(int level, StringBuilder builder,\n\t\t\t\tHashMap<String, Rule> rules, String title) {\n\t\t\tbuilder.append(title);\n\t\t\tbuilder.append(String.format(\" :%n\"));\n\n\t\t\tfor (Rule rule : rules.values())\n\t\t\t\tbuilder.append(rule.toString(level + 1));\n\t\t}\n\t}\n}",
        "tokensGeneralGrammar": [
            "null",
            "true",
            "false",
            ",",
            ".",
            ":",
            ";",
            "?",
            "(",
            ")",
            "jdVar",
            "stream",
            "Arrays",
            "allMatch",
            "noneMatch",
            "anyMatch",
            "~",
            ">>",
            "<<",
            ">>>",
            "|",
            "&",
            "^",
            "+",
            "-",
            "/",
            "*",
            "%",
            "&&",
            "||",
            ">=",
            "<=",
            ">",
            "<",
            "==",
            "!=",
            "instanceof",
            "class",
            "methodResultID",
            "this"
        ],
        "tokensGeneralValuesGlobalDictionary": [
            [
                "0",
                "int"
            ],
            [
                "1",
                "int"
            ],
            [
                "-1",
                "int"
            ],
            [
                "0.0",
                "double"
            ],
            [
                "1.0",
                "double"
            ],
            [
                "-1.0",
                "double"
            ],
            [
                "\"\"",
                "String"
            ],
            [
                "\" \"",
                "String"
            ]
        ],
        "tokensProjectClasses": [
            [
                "DefaultCamera",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "GradientFactory",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "GraphMetrics",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "Graphics2DOutput",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "ImageCache",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "StrokeFactory",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "FontCache",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "FontSlot",
                "org.graphstream.ui.swingViewer.util"
            ],
            [
                "DefaultView",
                "org.graphstream.ui.swingViewer"
            ],
            [
                "SpriteRenderer",
                "org.graphstream.ui.swingViewer.basicRenderer"
            ],
            [
                "ElementRenderer",
                "org.graphstream.ui.swingViewer.basicRenderer"
            ],
            [
                "NodeRenderer",
                "org.graphstream.ui.swingViewer.basicRenderer"
            ],
            [
                "Arrow",
                "org.graphstream.ui.swingViewer.basicRenderer.shapes"
            ],
            [
                "Shape",
                "org.graphstream.ui.swingViewer.basicRenderer.shapes"
            ],
            [
                "EdgeRenderer",
                "org.graphstream.ui.swingViewer.basicRenderer"
            ],
            [
                "SwingBasicGraphRenderer",
                "org.graphstream.ui.swingViewer.basicRenderer"
            ],
            [
                "GraphRendererBase",
                "org.graphstream.ui.swingViewer"
            ],
            [
                "GraphRenderer",
                "org.graphstream.ui.swingViewer"
            ],
            [
                "LayerRenderer",
                "org.graphstream.ui.swingViewer"
            ],
            [
                "ViewPanel",
                "org.graphstream.ui.swingViewer"
            ],
            [
                "Layouts",
                "org.graphstream.ui.layout"
            ],
            [
                "Layout",
                "org.graphstream.ui.layout"
            ],
            [
                "LayoutRunner",
                "org.graphstream.ui.layout"
            ],
            [
                "NodeParticle",
                "org.graphstream.ui.layout.springbox"
            ],
            [
                "GraphCellData",
                "org.graphstream.ui.layout.springbox"
            ],
            [
                "EdgeSpring",
                "org.graphstream.ui.layout.springbox"
            ],
            [
                "Energies",
                "org.graphstream.ui.layout.springbox"
            ],
            [
                "BarnesHutLayout",
                "org.graphstream.ui.layout.springbox"
            ],
            [
                "LinLog",
                "org.graphstream.ui.layout.springbox.implementations"
            ],
            [
                "LinLogNodeParticle",
                "org.graphstream.ui.layout.springbox.implementations"
            ],
            [
                "SpringBoxNodeParticle",
                "org.graphstream.ui.layout.springbox.implementations"
            ],
            [
                "SpringBox",
                "org.graphstream.ui.layout.springbox.implementations"
            ],
            [
                "Point2",
                "org.graphstream.ui.geom"
            ],
            [
                "Vector2",
                "org.graphstream.ui.geom"
            ],
            [
                "Vector3",
                "org.graphstream.ui.geom"
            ],
            [
                "Point3",
                "org.graphstream.ui.geom"
            ],
            [
                "ViewerListener",
                "org.graphstream.ui.view"
            ],
            [
                "MouseManager",
                "org.graphstream.ui.view.util"
            ],
            [
                "ShortcutManager",
                "org.graphstream.ui.view.util"
            ],
            [
                "DefaultShortcutManager",
                "org.graphstream.ui.view.util"
            ],
            [
                "FpsCounter",
                "org.graphstream.ui.view.util"
            ],
            [
                "CubicCurve",
                "org.graphstream.ui.view.util"
            ],
            [
                "DefaultMouseManager",
                "org.graphstream.ui.view.util"
            ],
            [
                "Selection",
                "org.graphstream.ui.view"
            ],
            [
                "ViewerPipe",
                "org.graphstream.ui.view"
            ],
            [
                "Viewer",
                "org.graphstream.ui.view"
            ],
            [
                "View",
                "org.graphstream.ui.view"
            ],
            [
                "Camera",
                "org.graphstream.ui.view"
            ],
            [
                "Sprite",
                "org.graphstream.ui.spriteManager"
            ],
            [
                "InvalidSpriteIDException",
                "org.graphstream.ui.spriteManager"
            ],
            [
                "SpriteManager",
                "org.graphstream.ui.spriteManager"
            ],
            [
                "SpriteFactory",
                "org.graphstream.ui.spriteManager"
            ],
            [
                "StyleGroupListener",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "Colors",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "Values",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "StyleSheetListener",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "StyleSheetParserTokenManager",
                "org.graphstream.ui.graphicGraph.stylesheet.parser"
            ],
            [
                "StyleSheetParserConstants",
                "org.graphstream.ui.graphicGraph.stylesheet.parser"
            ],
            [
                "StyleSheetParser",
                "org.graphstream.ui.graphicGraph.stylesheet.parser"
            ],
            [
                "Style",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "StyleSheet",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "StyleConstants",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "Selector",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "Value",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "Rule",
                "org.graphstream.ui.graphicGraph.stylesheet"
            ],
            [
                "GraphicNode",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "StyleGroup",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphPosLengthUtils",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphicEdge",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphicElementChangeListener",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphicGraph",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "StyleGroupSet",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphicSprite",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "GraphicElement",
                "org.graphstream.ui.graphicGraph"
            ],
            [
                "VerboseSink",
                "org.graphstream.util"
            ],
            [
                "GraphListeners",
                "org.graphstream.util"
            ],
            [
                "Environment",
                "org.graphstream.util"
            ],
            [
                "GraphDiff",
                "org.graphstream.util"
            ],
            [
                "Filters",
                "org.graphstream.util"
            ],
            [
                "FilteredEdgeIterator",
                "org.graphstream.util"
            ],
            [
                "Parser",
                "org.graphstream.util.parser"
            ],
            [
                "ParserFactory",
                "org.graphstream.util.parser"
            ],
            [
                "TokenMgrError",
                "org.graphstream.util.parser"
            ],
            [
                "ParseException",
                "org.graphstream.util.parser"
            ],
            [
                "SimpleCharStream",
                "org.graphstream.util.parser"
            ],
            [
                "Token",
                "org.graphstream.util.parser"
            ],
            [
                "ISODateIO",
                "org.graphstream.util.time"
            ],
            [
                "ISODateComponent",
                "org.graphstream.util.time"
            ],
            [
                "FilteredNodeIterator",
                "org.graphstream.util"
            ],
            [
                "FixedArrayList",
                "org.graphstream.util.set"
            ],
            [
                "StepCounter",
                "org.graphstream.util"
            ],
            [
                "GraphSpells",
                "org.graphstream.util.cumulative"
            ],
            [
                "CumulativeAttributes",
                "org.graphstream.util.cumulative"
            ],
            [
                "CumulativeSpells",
                "org.graphstream.util.cumulative"
            ],
            [
                "Filter",
                "org.graphstream.util"
            ],
            [
                "PipeAdapter",
                "org.graphstream.stream"
            ],
            [
                "GraphParseException",
                "org.graphstream.stream"
            ],
            [
                "ElementSink",
                "org.graphstream.stream"
            ],
            [
                "URLSource",
                "org.graphstream.stream.net"
            ],
            [
                "HTTPSource",
                "org.graphstream.stream.net"
            ],
            [
                "SourceAdapter",
                "org.graphstream.stream"
            ],
            [
                "AttributeSink",
                "org.graphstream.stream"
            ],
            [
                "GMLParserConstants",
                "org.graphstream.stream.file.gml"
            ],
            [
                "GMLParserTokenManager",
                "org.graphstream.stream.file.gml"
            ],
            [
                "GMLContext",
                "org.graphstream.stream.file.gml"
            ],
            [
                "Graphics",
                "org.graphstream.stream.file.gml"
            ],
            [
                "KeyValues",
                "org.graphstream.stream.file.gml"
            ],
            [
                "GMLParser",
                "org.graphstream.stream.file.gml"
            ],
            [
                "FileSinkGraphML",
                "org.graphstream.stream.file"
            ],
            [
                "TLPParserConstants",
                "org.graphstream.stream.file.tlp"
            ],
            [
                "TLPParser",
                "org.graphstream.stream.file.tlp"
            ],
            [
                "TLPParserTokenManager",
                "org.graphstream.stream.file.tlp"
            ],
            [
                "FileSinkFactory",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceEdge",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkBase",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkTikZ",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceGEXF",
                "org.graphstream.stream.file"
            ],
            [
                "DOTParser",
                "org.graphstream.stream.file.dot"
            ],
            [
                "DOTParserConstants",
                "org.graphstream.stream.file.dot"
            ],
            [
                "DOTParserTokenManager",
                "org.graphstream.stream.file.dot"
            ],
            [
                "FileSink",
                "org.graphstream.stream.file"
            ],
            [
                "PajekContext",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "Graphics",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "NodeGraphics",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "EdgeGraphics",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "EdgeMatrix",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "PajekParserTokenManager",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "PajekParserConstants",
                "org.graphstream.stream.file.pajek"
            ],
            [
                "FileSourceXML",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkBaseFiltered",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkDOT",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceParser",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkDGSFiltered",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceDOT",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceDGS1And2",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceGraphML",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceFactory",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkImages",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkDynamicGML",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkSVG",
                "org.graphstream.stream.file"
            ],
            [
                "GEXFSpell",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "SmartXMLWriter",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFElement",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFEdges",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFAttValues",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFEdge",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFSpells",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFAttValue",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFNodes",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFNode",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFMeta",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFAttributes",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXF",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFGraph",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "GEXFAttribute",
                "org.graphstream.stream.file.gexf"
            ],
            [
                "OldFileSourceDGS",
                "org.graphstream.stream.file.dgs"
            ],
            [
                "DGSParser",
                "org.graphstream.stream.file.dgs"
            ],
            [
                "FileSourceBase",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkGML",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceDGS",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkDGSUtility",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceTLP",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkSVG2",
                "org.graphstream.stream.file"
            ],
            [
                "FileSource",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceNCol",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourcePajek",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceGPX",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceLGL",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkGEXF2",
                "org.graphstream.stream.file"
            ],
            [
                "FileSourceGML",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkGEXF",
                "org.graphstream.stream.file"
            ],
            [
                "FileSinkDGS",
                "org.graphstream.stream.file"
            ],
            [
                "ProxyPipe",
                "org.graphstream.stream"
            ],
            [
                "Sink",
                "org.graphstream.stream"
            ],
            [
                "Timeline",
                "org.graphstream.stream"
            ],
            [
                "Pipe",
                "org.graphstream.stream"
            ],
            [
                "SinkAdapter",
                "org.graphstream.stream"
            ],
            [
                "Replayable",
                "org.graphstream.stream"
            ],
            [
                "Source",
                "org.graphstream.stream"
            ],
            [
                "AnnotatedSink",
                "org.graphstream.stream"
            ],
            [
                "GraphReplay",
                "org.graphstream.stream"
            ],
            [
                "AttributePipe",
                "org.graphstream.stream"
            ],
            [
                "SinkTime",
                "org.graphstream.stream.sync"
            ],
            [
                "SourceTime",
                "org.graphstream.stream.sync"
            ],
            [
                "PipeBase",
                "org.graphstream.stream"
            ],
            [
                "ThreadProxyPipe",
                "org.graphstream.stream.thread"
            ],
            [
                "ThreadProxyPipeOld",
                "org.graphstream.stream.thread"
            ],
            [
                "RMISource",
                "org.graphstream.stream.rmi"
            ],
            [
                "RMIAdapterOut",
                "org.graphstream.stream.rmi"
            ],
            [
                "RMISink",
                "org.graphstream.stream.rmi"
            ],
            [
                "RMIAdapterIn",
                "org.graphstream.stream.rmi"
            ],
            [
                "SourceBase",
                "org.graphstream.stream"
            ],
            [
                "NetStreamDecoder",
                "org.graphstream.stream.netstream"
            ],
            [
                "NetStreamReceiver",
                "org.graphstream.stream.netstream"
            ],
            [
                "NetStreamConstants",
                "org.graphstream.stream.netstream"
            ],
            [
                "NetStreamSender",
                "org.graphstream.stream.netstream"
            ],
            [
                "DefaultNetStreamDecoder",
                "org.graphstream.stream.netstream"
            ],
            [
                "Base64",
                "org.graphstream.stream.netstream.packing"
            ],
            [
                "NetStreamUnpacker",
                "org.graphstream.stream.netstream.packing"
            ],
            [
                "Base64Packer",
                "org.graphstream.stream.netstream.packing"
            ],
            [
                "Base64Unpacker",
                "org.graphstream.stream.netstream.packing"
            ],
            [
                "NetStreamPacker",
                "org.graphstream.stream.netstream.packing"
            ],
            [
                "AttributePredicate",
                "org.graphstream.stream"
            ],
            [
                "Element",
                "org.graphstream.graph"
            ],
            [
                "Node",
                "org.graphstream.graph"
            ],
            [
                "BreadthFirstIterator",
                "org.graphstream.graph"
            ],
            [
                "Graph",
                "org.graphstream.graph"
            ],
            [
                "EdgeRejectedException",
                "org.graphstream.graph"
            ],
            [
                "CompoundAttribute",
                "org.graphstream.graph"
            ],
            [
                "Structure",
                "org.graphstream.graph"
            ],
            [
                "DepthFirstIterator",
                "org.graphstream.graph"
            ],
            [
                "NullAttributeException",
                "org.graphstream.graph"
            ],
            [
                "IdAlreadyInUseException",
                "org.graphstream.graph"
            ],
            [
                "EdgeFactory",
                "org.graphstream.graph"
            ],
            [
                "ElementNotFoundException",
                "org.graphstream.graph"
            ],
            [
                "OneAttributeElement",
                "org.graphstream.graph.implementations"
            ],
            [
                "AdjacencyListNode",
                "org.graphstream.graph.implementations"
            ],
            [
                "SingleNode",
                "org.graphstream.graph.implementations"
            ],
            [
                "AbstractElement",
                "org.graphstream.graph.implementations"
            ],
            [
                "AdjacencyListGraph",
                "org.graphstream.graph.implementations"
            ],
            [
                "AbstractNode",
                "org.graphstream.graph.implementations"
            ],
            [
                "DefaultGraph",
                "org.graphstream.graph.implementations"
            ],
            [
                "MultiGraph",
                "org.graphstream.graph.implementations"
            ],
            [
                "Graphs",
                "org.graphstream.graph.implementations"
            ],
            [
                "SingleGraph",
                "org.graphstream.graph.implementations"
            ],
            [
                "MultiNode",
                "org.graphstream.graph.implementations"
            ],
            [
                "AbstractGraph",
                "org.graphstream.graph.implementations"
            ],
            [
                "AbstractEdge",
                "org.graphstream.graph.implementations"
            ],
            [
                "GraphFactory",
                "org.graphstream.graph"
            ],
            [
                "NodeFactory",
                "org.graphstream.graph"
            ],
            [
                "Edge",
                "org.graphstream.graph"
            ],
            [
                "Path",
                "org.graphstream.graph"
            ]
        ],
        "tokensProjectClassesNonPrivateStaticNonVoidMethods": [
            [
                "gradientInArea",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static Paint gradientInArea(int x0, int y0, int width, int height, Style style)"
            ],
            [
                "linearGradientFromStyle",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static Paint linearGradientFromStyle(float x0, float y0, float x1, float y1, Style style)"
            ],
            [
                "radialGradientFromStyle",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static Paint radialGradientFromStyle(float cx, float cy, float radius, Style style)"
            ],
            [
                "radialGradientFromStyle",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static Paint radialGradientFromStyle(float cx, float cy, float radius, float fx, float fy, Style style)"
            ],
            [
                "createFractions",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "protected static float[] createFractions(Style style)"
            ],
            [
                "createColors",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "protected static Color[] createColors(Style style)"
            ],
            [
                "defaultImageCache",
                "org.graphstream.ui.swingViewer.util",
                "ImageCache",
                "public static ImageCache defaultImageCache()"
            ],
            [
                "generateStroke",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "public static Stroke generateStroke(Style style, GraphMetrics metrics)"
            ],
            [
                "generatePlainStroke",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "protected static Stroke generatePlainStroke(Style style, GraphMetrics metrics)"
            ],
            [
                "generateDotsStroke",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "protected static Stroke generateDotsStroke(Style style, GraphMetrics metrics)"
            ],
            [
                "generateDashesStroke",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "protected static Stroke generateDashesStroke(Style style, GraphMetrics metrics)"
            ],
            [
                "defaultFontCache",
                "org.graphstream.ui.swingViewer.util",
                "FontCache",
                "public static FontCache defaultFontCache()"
            ],
            [
                "newLayoutAlgorithm",
                "org.graphstream.ui.layout",
                "Layouts",
                "public static Layout newLayoutAlgorithm()"
            ],
            [
                "eval",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "public static double eval(double x0, double x1, double x2, double x3, double t)"
            ],
            [
                "eval",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "public static Point2 eval(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t)"
            ],
            [
                "eval",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "public static Point2D.Double eval(Point2D.Double p0, Point2D.Double p1, Point2D.Double p2, Point2D.Double p3, double t)"
            ],
            [
                "eval",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "public static Point2 eval(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t, Point2 result)"
            ],
            [
                "derivative",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "public static double derivative(double x0, double x1, double x2, double x3, double t)"
            ],
            [
                "derivative",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "public static Point2 derivative(Point2 p0, Point2 p1, Point2 p2, Point3 p3, double t)"
            ],
            [
                "derivative",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "public static Point2 derivative(Point2 p0, Point2 p1, Point2 p2, Point3 p3, double t, Point2 result)"
            ],
            [
                "perpendicular",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "public static Vector2 perpendicular(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t)"
            ],
            [
                "perpendicular",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "public static Vector2 perpendicular(Point2 p0, Point2 p1, Point2 p2, Point2 p3, double t, Vector2 result)"
            ],
            [
                "perpendicular",
                "org.graphstream.ui.view.util",
                "CubicCurve",
                "public static Point2D.Double perpendicular(Point2D.Double p0, Point2D.Double p1, Point2D.Double p2, Point2D.Double p3, double t)"
            ],
            [
                "newGraphRenderer",
                "org.graphstream.ui.view",
                "Viewer",
                "public static GraphRenderer newGraphRenderer()"
            ],
            [
                "getPositionValue",
                "org.graphstream.ui.spriteManager",
                "SpriteManager",
                "protected static Values getPositionValue(Object value)"
            ],
            [
                "convertColor",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "public static Color convertColor(Object anyValue)"
            ],
            [
                "convertLabel",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "public static String convertLabel(Object value)"
            ],
            [
                "convertWidth",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "public static float convertWidth(Object value)"
            ],
            [
                "convertValue",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "public static Value convertValue(Object value)"
            ],
            [
                "convertUnit",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "protected static Units convertUnit(String unit)"
            ],
            [
                "nodePosition",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "public static double[] nodePosition(Graph graph, String id)"
            ],
            [
                "nodePointPosition",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "public static Point3 nodePointPosition(Graph graph, String id)"
            ],
            [
                "nodePosition",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "public static double[] nodePosition(Node node)"
            ],
            [
                "nodePointPosition",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "public static Point3 nodePointPosition(Node node)"
            ],
            [
                "edgeLength",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "public static double edgeLength(Graph graph, String id)"
            ],
            [
                "edgeLength",
                "org.graphstream.ui.graphicGraph",
                "GraphPosLengthUtils",
                "public static double edgeLength(Edge edge)"
            ],
            [
                "getGlobalEnvironment",
                "org.graphstream.util",
                "Environment",
                "public static Environment getGlobalEnvironment()"
            ],
            [
                "falseFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> falseFilter()"
            ],
            [
                "trueFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> trueFilter()"
            ],
            [
                "byAttributeFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> byAttributeFilter(String key, Object expectedValue)"
            ],
            [
                "separateNodeAndEdgeFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element, U extends Element> Filter<Element> separateNodeAndEdgeFilter(Filter<T> nodeFilter, Filter<U> edgeFilter)"
            ],
            [
                "byExtremitiesFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element, U extends Element> Filter<T> byExtremitiesFilter(Filter<U> f)"
            ],
            [
                "byIdFilter",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> byIdFilter(String idPattern)"
            ],
            [
                "isContained",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> isContained(final Collection<? extends T> set)"
            ],
            [
                "isIdContained",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> isIdContained(final Collection<String> set)"
            ],
            [
                "and",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> and(Filter<T> f1, Filter<T> f2)"
            ],
            [
                "or",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> or(Filter<T> f1, Filter<T> f2)"
            ],
            [
                "xor",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> xor(Filter<T> f1, Filter<T> f2)"
            ],
            [
                "not",
                "org.graphstream.util",
                "Filters",
                "public static <T extends Element> Filter<T> not(Filter<T> f)"
            ],
            [
                "addEscapes",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "protected static final String addEscapes(String str)"
            ],
            [
                "LexicalError",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "protected static String LexicalError(boolean EOFSeen, int lexState, int errorLine, int errorColumn, String errorAfter, char curChar)"
            ],
            [
                "add_escapes",
                "org.graphstream.util.parser",
                "ParseException",
                "static String add_escapes(String str)"
            ],
            [
                "newToken",
                "org.graphstream.util.parser",
                "Token",
                "public static Token newToken(int ofKind, String image)"
            ],
            [
                "newToken",
                "org.graphstream.util.parser",
                "Token",
                "public static Token newToken(int ofKind)"
            ],
            [
                "countStepInFile",
                "org.graphstream.util",
                "StepCounter",
                "public static int countStepInFile(String path) throws IOException"
            ],
            [
                "GET",
                "org.graphstream.stream.net",
                "HTTPSource",
                "protected static HashMap<String, Object> GET(HttpExchange ex)"
            ],
            [
                "sinkFor",
                "org.graphstream.stream.file",
                "FileSinkFactory",
                "public static FileSink sinkFor(String filename)"
            ],
            [
                "formatId",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "protected static String formatId(String id)"
            ],
            [
                "getInt",
                "org.graphstream.stream.file.pajek",
                "PajekContext",
                "protected static int getInt(Token nb) throws ParseException"
            ],
            [
                "getReal",
                "org.graphstream.stream.file.pajek",
                "PajekContext",
                "protected static double getReal(Token nb) throws ParseException"
            ],
            [
                "toColorValue",
                "org.graphstream.stream.file.pajek",
                "PajekContext",
                "public static String toColorValue(Token R, Token G, Token B) throws ParseException"
            ],
            [
                "sourceFor",
                "org.graphstream.stream.file",
                "FileSourceFactory",
                "public static FileSource sourceFor(String fileName) throws IOException"
            ],
            [
                "getXMLRootElement",
                "org.graphstream.stream.file",
                "FileSourceFactory",
                "public static String getXMLRootElement(String fileName) throws IOException"
            ],
            [
                "formatStringForQuoting",
                "org.graphstream.stream.file",
                "FileSinkDGSUtility",
                "protected static String formatStringForQuoting(String str)"
            ],
            [
                "attributeString",
                "org.graphstream.stream.file",
                "FileSinkDGSUtility",
                "protected static String attributeString(String key, Object value, boolean remove)"
            ],
            [
                "arrayString",
                "org.graphstream.stream.file",
                "FileSinkDGSUtility",
                "protected static String arrayString(Object value)"
            ],
            [
                "valueString",
                "org.graphstream.stream.file",
                "FileSinkDGSUtility",
                "protected static String valueString(Object value)"
            ],
            [
                "hashToString",
                "org.graphstream.stream.file",
                "FileSinkDGSUtility",
                "protected static String hashToString(HashMap<?, ?> hash)"
            ],
            [
                "encodeObject",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public static String encodeObject(java.io.Serializable serializableObject) throws java.io.IOException"
            ],
            [
                "encodeObject",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public static String encodeObject(java.io.Serializable serializableObject, int options) throws java.io.IOException"
            ],
            [
                "encodeBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public static String encodeBytes(byte[] source)"
            ],
            [
                "encodeBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public static String encodeBytes(byte[] source, int options) throws java.io.IOException"
            ],
            [
                "encodeBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public static String encodeBytes(byte[] source, int off, int len)"
            ],
            [
                "encodeBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public static String encodeBytes(byte[] source, int off, int len, int options) throws java.io.IOException"
            ],
            [
                "encodeBytesToBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public static byte[] encodeBytesToBytes(byte[] source)"
            ],
            [
                "encodeBytesToBytes",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public static byte[] encodeBytesToBytes(byte[] source, int off, int len, int options) throws java.io.IOException"
            ],
            [
                "decode",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public static byte[] decode(byte[] source) throws java.io.IOException"
            ],
            [
                "decode",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public static byte[] decode(byte[] source, int off, int len, int options) throws java.io.IOException"
            ],
            [
                "decode",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public static byte[] decode(String s) throws java.io.IOException"
            ],
            [
                "decode",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public static byte[] decode(String s, int options) throws java.io.IOException"
            ],
            [
                "decodeToObject",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public static Object decodeToObject(String encodedObject) throws java.io.IOException, java.lang.ClassNotFoundException"
            ],
            [
                "decodeToObject",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public static Object decodeToObject(String encodedObject, int options, final ClassLoader loader) throws java.io.IOException, java.lang.ClassNotFoundException"
            ],
            [
                "decodeFromFile",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public static byte[] decodeFromFile(String filename) throws java.io.IOException"
            ],
            [
                "encodeFromFile",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public static String encodeFromFile(String filename) throws java.io.IOException"
            ],
            [
                "unmutableGraph",
                "org.graphstream.graph.implementations",
                "Graphs",
                "public static Graph unmutableGraph(Graph g)"
            ],
            [
                "synchronizedGraph",
                "org.graphstream.graph.implementations",
                "Graphs",
                "public static Graph synchronizedGraph(Graph g)"
            ],
            [
                "merge",
                "org.graphstream.graph.implementations",
                "Graphs",
                "public static Graph merge(Graph... graphs)"
            ],
            [
                "clone",
                "org.graphstream.graph.implementations",
                "Graphs",
                "public static Graph clone(Graph g)"
            ]
        ],
        "tokensProjectClassesNonPrivateStaticAttributes": [
            [
                "version16",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static boolean version16 = false;"
            ],
            [
                "predefFractions",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[][] predefFractions = new float[11][];"
            ],
            [
                "predefFractions2",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions2 = { 0f, 1f };"
            ],
            [
                "predefFractions3",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions3 = { 0f, 0.5f, 1f };"
            ],
            [
                "predefFractions4",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions4 = { 0f, 0.33f, 0.66f, 1f };"
            ],
            [
                "predefFractions5",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions5 = { 0f, 0.25f, 0.5f, 0.75f, 1f };"
            ],
            [
                "predefFractions6",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions6 = { 0f, 0.2f, 0.4f, 0.6f, 0.8f, 1f };"
            ],
            [
                "predefFractions7",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions7 = { 0f, 0.1666f, 0.3333f, 0.4999f, 0.6666f, 0.8333f, 1f };"
            ],
            [
                "predefFractions8",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions8 = { 0f, 0.1428f, 0.2856f, 0.4284f, 0.5712f, 0.7140f, 0.8568f, 1f };"
            ],
            [
                "predefFractions9",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions9 = { 0f, 0.125f, 0.25f, 0.375f, 0.5f, 0.625f, .75f, 0.875f, 1f };"
            ],
            [
                "predefFractions10",
                "org.graphstream.ui.swingViewer.util",
                "GradientFactory",
                "public static float[] predefFractions10 = { 0f, 0.1111f, 0.2222f, 0.3333f, 0.4444f, 0.5555f, 0.6666f, 0.7777f, 0.8888f, 1f };"
            ],
            [
                "defaultImageCache",
                "org.graphstream.ui.swingViewer.util",
                "ImageCache",
                "protected static ImageCache defaultImageCache;"
            ],
            [
                "dots",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "protected static float[] dots = { 1f, 1f };"
            ],
            [
                "dashes",
                "org.graphstream.ui.swingViewer.util",
                "StrokeFactory",
                "protected static float[] dashes = { 3f, 3f };"
            ],
            [
                "defaultFontCache",
                "org.graphstream.ui.swingViewer.util",
                "FontCache",
                "public static FontCache defaultFontCache;"
            ],
            [
                "NULL_POINT2",
                "org.graphstream.ui.geom",
                "Point2",
                "public static final Point2 NULL_POINT2 = new Point2(0, 0);"
            ],
            [
                "NULL_POINT3",
                "org.graphstream.ui.geom",
                "Point3",
                "public static final Point3 NULL_POINT3 = new Point3(0, 0, 0);"
            ],
            [
                "DEFAULT_VIEW_ID",
                "org.graphstream.ui.view",
                "Viewer",
                "public static String DEFAULT_VIEW_ID = \"defaultView\";"
            ],
            [
                "jjbitVec0",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };"
            ],
            [
                "jjnextStates",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "static final int[] jjnextStates = { 48, 49, 52, 54, 55, 65, 69, 2, 4, 6, 10, 16, 23, 33, 50, 52, 54, 55, 57, 58, 60, 61, 66, 68, 70, 71 };"
            ],
            [
                "jjstrLiteralImages",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "public static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, \"\\56\", \"\\173\", \"\\175\", \"\\50\", \"\\51\", \"\\43\", \"\\72\", \"\\73\", \"\\54\", \"\\162\\147\\142\\141\", \"\\162\\147\\142\", null, null, null, \"\\165\\162\\154\", \"\\147\\162\\141\\160\\150\", \"\\145\\144\\147\\145\", \"\\156\\157\\144\\145\", \"\\163\\160\\162\\151\\164\\145\", \"\\146\\151\\154\\154\\55\\155\\157\\144\\145\", \"\\146\\151\\154\\154\\55\\143\\157\\154\\157\\162\", \"\\146\\151\\154\\154\\55\\151\\155\\141\\147\\145\", \"\\163\\164\\162\\157\\153\\145\\55\\155\\157\\144\\145\", \"\\163\\164\\162\\157\\153\\145\\55\\143\\157\\154\\157\\162\", \"\\163\\164\\162\\157\\153\\145\\55\\167\\151\\144\\164\\150\", \"\\163\\150\\141\\144\\157\\167\\55\\155\\157\\144\\145\", \"\\163\\150\\141\\144\\157\\167\\55\\143\\157\\154\\157\\162\", \"\\163\\150\\141\\144\\157\\167\\55\\167\\151\\144\\164\\150\", \"\\163\\150\\141\\144\\157\\167\\55\\157\\146\\146\\163\\145\\164\", \"\\164\\145\\170\\164\\55\\155\\157\\144\\145\", \"\\164\\145\\170\\164\\55\\143\\157\\154\\157\\162\", \"\\164\\145\\170\\164\\55\\163\\164\\171\\154\\145\", \"\\164\\145\\170\\164\\55\\146\\157\\156\\164\", \"\\164\\145\\170\\164\\55\\163\\151\\172\\145\", \"\\164\\145\\170\\164\\55\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\\55\\155\\157\\144\\145\", \"\\164\\145\\170\\164\\55\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\", \"\\164\\145\\170\\164\\55\\142\\141\\143\\153\\147\\162\\157\\165\\156\\144\\55\\155\\157\\144\\145\", \"\\164\\145\\170\\164\\55\\142\\141\\143\\153\\147\\162\\157\\165\\156\\144\\55\\143\\157\\154\\157\\162\", \"\\164\\145\\170\\164\\55\\157\\146\\146\\163\\145\\164\", \"\\164\\145\\170\\164\\55\\160\\141\\144\\144\\151\\156\\147\", \"\\151\\143\\157\\156\\55\\155\\157\\144\\145\", \"\\151\\143\\157\\156\", \"\\160\\141\\144\\144\\151\\156\\147\", \"\\172\\55\\151\\156\\144\\145\\170\", \"\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\\55\\155\\157\\144\\145\", \"\\166\\151\\163\\151\\142\\151\\154\\151\\164\\171\", \"\\163\\150\\141\\160\\145\", \"\\163\\151\\172\\145\", \"\\163\\151\\172\\145\\55\\155\\157\\144\\145\", \"\\163\\150\\141\\160\\145\\55\\160\\157\\151\\156\\164\\163\", \"\\164\\145\\170\\164\\55\\141\\154\\151\\147\\156\\155\\145\\156\\164\", \"\\152\\143\\157\\155\\160\\157\\156\\145\\156\\164\", \"\\141\\162\\162\\157\\167\\55\\151\\155\\141\\147\\145\", \"\\141\\162\\162\\157\\167\\55\\163\\151\\172\\145\", \"\\141\\162\\162\\157\\167\\55\\163\\150\\141\\160\\145\", \"\\163\\160\\162\\151\\164\\145\\55\\157\\162\\151\\145\\156\\164\\141\\164\\151\\157\\156\", \"\\143\\141\\156\\166\\141\\163\\55\\143\\157\\154\\157\\162\", \"\\160\\154\\141\\151\\156\", \"\\144\\171\\156\\55\\160\\154\\141\\151\\156\", \"\\144\\171\\156\\55\\163\\151\\172\\145\", \"\\144\\171\\156\\55\\151\\143\\157\\156\", \"\\144\\141\\163\\150\\145\\163\", \"\\144\\157\\164\\163\", \"\\144\\157\\165\\142\\154\\145\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\144\\151\\141\\147\\157\\156\\141\\154\\61\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\144\\151\\141\\147\\157\\156\\141\\154\\62\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\150\\157\\162\\151\\172\\157\\156\\164\\141\\154\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\162\\141\\144\\151\\141\\154\", \"\\147\\162\\141\\144\\151\\145\\156\\164\\55\\166\\145\\162\\164\\151\\143\\141\\154\", \"\\150\\151\\144\\144\\145\\156\", \"\\151\\155\\141\\147\\145\\55\\164\\151\\154\\145\\144\", \"\\151\\155\\141\\147\\145\\55\\163\\143\\141\\154\\145\\144\", \"\\151\\155\\141\\147\\145\\55\\163\\143\\141\\154\\145\\144\\55\\162\\141\\164\\151\\157\\55\\155\\141\\170\", \"\\151\\155\\141\\147\\145\\55\\163\\143\\141\\154\\145\\144\\55\\162\\141\\164\\151\\157\\55\\155\\151\\156\", \"\\156\\157\\156\\145\", \"\\156\\157\\162\\155\\141\\154\", \"\\164\\162\\165\\156\\143\\141\\164\\145\\144\", \"\\172\\157\\157\\155\\55\\162\\141\\156\\147\\145\", \"\\141\\164\\55\\172\\157\\157\\155\", \"\\165\\156\\144\\145\\162\\55\\172\\157\\157\\155\", \"\\157\\166\\145\\162\\55\\172\\157\\157\\155\", \"\\172\\157\\157\\155\\163\", \"\\146\\151\\164\", \"\\142\\157\\154\\144\", \"\\142\\157\\154\\144\\55\\151\\164\\141\\154\\151\\143\", \"\\151\\164\\141\\154\\151\\143\", \"\\141\\154\\157\\156\\147\", \"\\141\\164\\55\\154\\145\\146\\164\", \"\\141\\164\\55\\162\\151\\147\\150\\164\", \"\\143\\145\\156\\164\\145\\162\", \"\\154\\145\\146\\164\", \"\\162\\151\\147\\150\\164\", \"\\165\\156\\144\\145\\162\", \"\\141\\142\\157\\166\\145\", \"\\152\\165\\163\\164\\151\\146\\171\", \"\\143\\151\\162\\143\\154\\145\", \"\\164\\162\\151\\141\\156\\147\\154\\145\", \"\\146\\162\\145\\145\\160\\154\\141\\156\\145\", \"\\164\\145\\170\\164\\55\\142\\157\\170\", \"\\164\\145\\170\\164\\55\\162\\157\\165\\156\\144\\145\\144\\55\\142\\157\\170\", \"\\164\\145\\170\\164\\55\\143\\151\\162\\143\\154\\145\", \"\\164\\145\\170\\164\\55\\144\\151\\141\\155\\157\\156\\144\", \"\\164\\145\\170\\164\\55\\160\\141\\162\\141\\147\\162\\141\\160\\150\", \"\\142\\157\\170\", \"\\162\\157\\165\\156\\144\\145\\144\\55\\142\\157\\170\", \"\\143\\162\\157\\163\\163\", \"\\144\\151\\141\\155\\157\\156\\144\", \"\\160\\157\\154\\171\\147\\157\\156\", \"\\142\\165\\164\\164\\157\\156\", \"\\164\\145\\170\\164\\55\\146\\151\\145\\154\\144\", \"\\160\\141\\156\\145\\154\", \"\\154\\151\\156\\145\", \"\\160\\157\\154\\171\\154\\151\\156\\145\", \"\\160\\157\\154\\171\\154\\151\\156\\145\\55\\163\\143\\141\\154\\145\\144\", \"\\141\\156\\147\\154\\145\", \"\\143\\165\\142\\151\\143\\55\\143\\165\\162\\166\\145\", \"\\142\\154\\157\\142\", \"\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\114\\55\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\150\\157\\162\\151\\172\\157\\156\\164\\141\\154\\55\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\166\\145\\162\\164\\151\\143\\141\\154\\55\\163\\161\\165\\141\\162\\145\\55\\154\\151\\156\\145\", \"\\141\\162\\162\\157\\167\", \"\\146\\154\\157\\167\", \"\\160\\151\\145\\55\\143\\150\\141\\162\\164\", \"\\151\\155\\141\\147\\145\", \"\\151\\155\\141\\147\\145\\163\", \"\\146\\162\\157\\155\", \"\\156\\157\\144\\145\\60\", \"\\164\\157\", \"\\156\\157\\144\\145\\61\", \"\\160\\162\\157\\152\\145\\143\\164\\151\\157\\156\", \"\\143\\154\\151\\143\\153\\145\\144\", \"\\163\\145\\154\\145\\143\\164\\145\\144\", null, null };"
            ],
            [
                "lexStateNames",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "public static final String[] lexStateNames = { \"DEFAULT\" };"
            ],
            [
                "jjtoToken",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "static final long[] jjtoToken = { 0xfffffffffffffe01L, 0xffffffffffffffffL, 0xffffL };"
            ],
            [
                "jjtoSkip",
                "org.graphstream.ui.graphicGraph.stylesheet.parser",
                "StyleSheetParserTokenManager",
                "static final long[] jjtoSkip = { 0x1eL, 0x0L, 0x0L };"
            ],
            [
                "colorMap",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "protected static HashMap<String,Color> colorMap;"
            ],
            [
                "sharpColor1",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "protected static Pattern sharpColor1;"
            ],
            [
                "sharpColor2",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "protected static Pattern sharpColor2;"
            ],
            [
                "cssColor",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "protected static Pattern cssColor;"
            ],
            [
                "cssColorA",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "protected static Pattern cssColorA;"
            ],
            [
                "awtColor",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "protected static Pattern awtColor;"
            ],
            [
                "hexaColor",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "protected static Pattern hexaColor;"
            ],
            [
                "numberUnit",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "protected static Pattern numberUnit;"
            ],
            [
                "number",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleConstants",
                "protected static Pattern number;"
            ],
            [
                "acceptedAttribute",
                "org.graphstream.ui.graphicGraph",
                "GraphicElement",
                "protected static Pattern acceptedAttribute;"
            ],
            [
                "DEFAULT_AN_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_AN_FORMAT = \"%prefix%[%sourceId%:%timeId%] add node \\\"%nodeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_CNA_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CNA_FORMAT = \"%prefix%[%sourceId%:%timeId%] set node \\\"%nodeId%\\\" +\\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CNC_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CNC_FORMAT = \"%prefix%[%sourceId%:%timeId%] set node \\\"%nodeId%\\\" \\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CNR_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CNR_FORMAT = \"%prefix%[%sourceId%:%timeId%] set node \\\"%nodeId%\\\" -\\\"%attributeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_DN_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_DN_FORMAT = \"%prefix%[%sourceId%:%timeId%] remove node \\\"%nodeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_AE_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_AE_FORMAT = \"%prefix%[%sourceId%:%timeId%] add edge \\\"%edgeId%\\\" : \\\"%source%\\\" -- \\\"%target%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_CEA_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CEA_FORMAT = \"%prefix%[%sourceId%:%timeId%] set edge \\\"%edgeId%\\\" +\\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CEC_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CEC_FORMAT = \"%prefix%[%sourceId%:%timeId%] set edge \\\"%edgeId%\\\" \\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CER_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CER_FORMAT = \"%prefix%[%sourceId%:%timeId%] set edge \\\"%edgeId%\\\" -\\\"%attributeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_DE_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_DE_FORMAT = \"%prefix%[%sourceId%:%timeId%] remove edge \\\"%edgeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_CGA_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CGA_FORMAT = \"%prefix%[%sourceId%:%timeId%] set +\\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CGC_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CGC_FORMAT = \"%prefix%[%sourceId%:%timeId%] set \\\"%attributeId%\\\"=%value%%suffix%\";"
            ],
            [
                "DEFAULT_CGR_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CGR_FORMAT = \"%prefix%[%sourceId%:%timeId%] set -\\\"%attributeId%\\\"%suffix%\";"
            ],
            [
                "DEFAULT_CL_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_CL_FORMAT = \"%prefix%[%sourceId%:%timeId%] clear%suffix%\";"
            ],
            [
                "DEFAULT_ST_FORMAT",
                "org.graphstream.util",
                "VerboseSink",
                "public static final String DEFAULT_ST_FORMAT = \"%prefix%[%sourceId%:%timeId%] step %step% begins%suffix%\";"
            ],
            [
                "GLOBAL_ENV",
                "org.graphstream.util",
                "Environment",
                "public static Environment GLOBAL_ENV;"
            ],
            [
                "LEXICAL_ERROR",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "public static final int LEXICAL_ERROR = 0;"
            ],
            [
                "STATIC_LEXER_ERROR",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "public static final int STATIC_LEXER_ERROR = 1;"
            ],
            [
                "INVALID_LEXICAL_STATE",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "public static final int INVALID_LEXICAL_STATE = 2;"
            ],
            [
                "LOOP_DETECTED",
                "org.graphstream.util.parser",
                "TokenMgrError",
                "public static final int LOOP_DETECTED = 3;"
            ],
            [
                "staticFlag",
                "org.graphstream.util.parser",
                "SimpleCharStream",
                "public static final boolean staticFlag = false;"
            ],
            [
                "ABBREVIATED_WEEKDAY_NAME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent ABBREVIATED_WEEKDAY_NAME = new NotImplementedComponent(\"%a\", \"\\\\w+[.]\");"
            ],
            [
                "FULL_WEEKDAY_NAME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent FULL_WEEKDAY_NAME = new NotImplementedComponent(\"%A\", \"\\\\w+\");"
            ],
            [
                "ABBREVIATED_MONTH_NAME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent ABBREVIATED_MONTH_NAME = new NotImplementedComponent(\"%b\", \"\\\\w+[.]\");"
            ],
            [
                "FULL_MONTH_NAME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent FULL_MONTH_NAME = new NotImplementedComponent(\"%B\", \"\\\\w+\");"
            ],
            [
                "LOCALE_DATE_AND_TIME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent LOCALE_DATE_AND_TIME = new NotImplementedComponent(\"%c\", null);"
            ],
            [
                "CENTURY",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent CENTURY = new NotImplementedComponent(\"%C\", \"\\\\d\\\\d\");"
            ],
            [
                "DAY_OF_MONTH_2_DIGITS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DAY_OF_MONTH_2_DIGITS = new FieldComponent(\"%d\", \"[012]\\\\d|3[01]\", Calendar.DAY_OF_MONTH, \"%02d\");"
            ],
            [
                "DATE",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DATE = new AliasComponent(\"%D\", \"%m/%d/%y\");"
            ],
            [
                "DAY_OF_MONTH",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DAY_OF_MONTH = new FieldComponent(\"%e\", \"\\\\d|[12]\\\\d|3[01]\", Calendar.DAY_OF_MONTH, \"%2d\");"
            ],
            [
                "DATE_ISO8601",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DATE_ISO8601 = new AliasComponent(\"%F\", \"%Y-%m-%d\");"
            ],
            [
                "WEEK_BASED_YEAR_2_DIGITS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent WEEK_BASED_YEAR_2_DIGITS = new FieldComponent(\"%g\", \"\\\\d\\\\d\", Calendar.YEAR, \"%02d\");"
            ],
            [
                "WEEK_BASED_YEAR_4_DIGITS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent WEEK_BASED_YEAR_4_DIGITS = new FieldComponent(\"%G\", \"\\\\d{4}\", Calendar.YEAR, \"%04d\");"
            ],
            [
                "ABBREVIATED_MONTH_NAME_ALIAS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent ABBREVIATED_MONTH_NAME_ALIAS = new AliasComponent(\"%h\", \"%b\");"
            ],
            [
                "HOUR_OF_DAY",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent HOUR_OF_DAY = new FieldComponent(\"%H\", \"[01]\\\\d|2[0123]\", Calendar.HOUR_OF_DAY, \"%02d\");"
            ],
            [
                "HOUR",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent HOUR = new FieldComponent(\"%I\", \"0\\\\d|1[012]\", Calendar.HOUR, \"%02d\");"
            ],
            [
                "DAY_OF_YEAR",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DAY_OF_YEAR = new FieldComponent(\"%j\", \"[012]\\\\d\\\\d|3[0-5]\\\\d|36[0-6]\", Calendar.DAY_OF_YEAR, \"%03d\");"
            ],
            [
                "MILLISECOND",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent MILLISECOND = new FieldComponent(\"%k\", \"\\\\d{3}\", Calendar.MILLISECOND, \"%03d\");"
            ],
            [
                "EPOCH",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent EPOCH = new EpochComponent();"
            ],
            [
                "MONTH",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent MONTH = new FieldComponent(\"%m\", \"0[1-9]|1[012]\", Calendar.MONTH, -1, \"%02d\");"
            ],
            [
                "MINUTE",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent MINUTE = new FieldComponent(\"%M\", \"[0-5]\\\\d\", Calendar.MINUTE, \"%02d\");"
            ],
            [
                "NEW_LINE",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent NEW_LINE = new AliasComponent(\"%n\", \"\\n\");"
            ],
            [
                "AM_PM",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent AM_PM = new AMPMComponent();"
            ],
            [
                "LOCALE_CLOCK_TIME_12_HOUR",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent LOCALE_CLOCK_TIME_12_HOUR = new NotImplementedComponent(\"%r\", \"\");"
            ],
            [
                "HOUR_AND_MINUTE",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent HOUR_AND_MINUTE = new AliasComponent(\"%R\", \"%H:%M\");"
            ],
            [
                "SECOND",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent SECOND = new FieldComponent(\"%S\", \"[0-5]\\\\d|60\", Calendar.SECOND, \"%02d\");"
            ],
            [
                "TABULATION",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent TABULATION = new AliasComponent(\"%t\", \"\\t\");"
            ],
            [
                "TIME_ISO8601",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent TIME_ISO8601 = new AliasComponent(\"%T\", \"%H:%M:%S\");"
            ],
            [
                "DAY_OF_WEEK_1_7",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DAY_OF_WEEK_1_7 = new FieldComponent(\"%u\", \"[1-7]\", Calendar.DAY_OF_WEEK, -1, \"%1d\");"
            ],
            [
                "WEEK_OF_YEAR_FROM_SUNDAY",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent WEEK_OF_YEAR_FROM_SUNDAY = new FieldComponent(\"%U\", \"[0-4]\\\\d|5[0123]\", Calendar.WEEK_OF_YEAR, 1, \"%2d\");"
            ],
            [
                "WEEK_NUMBER_ISO8601",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent WEEK_NUMBER_ISO8601 = new NotImplementedComponent(\"%V\", \"0[1-9]|[2-4]\\\\d|5[0123]\");"
            ],
            [
                "DAY_OF_WEEK_0_6",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent DAY_OF_WEEK_0_6 = new FieldComponent(\"%w\", \"[0-6]\", Calendar.DAY_OF_WEEK, \"%01d\");"
            ],
            [
                "WEEK_OF_YEAR_FROM_MONDAY",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent WEEK_OF_YEAR_FROM_MONDAY = new FieldComponent(\"%W\", \"[0-4]\\\\d|5[0123]\", Calendar.WEEK_OF_YEAR, \"%02d\");"
            ],
            [
                "LOCALE_DATE_REPRESENTATION",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent LOCALE_DATE_REPRESENTATION = new NotImplementedComponent(\"%x\", \"\");"
            ],
            [
                "LOCALE_TIME_REPRESENTATION",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent LOCALE_TIME_REPRESENTATION = new NotImplementedComponent(\"%X\", \"\");"
            ],
            [
                "YEAR_2_DIGITS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent YEAR_2_DIGITS = new FieldComponent(\"%y\", \"\\\\d\\\\d\", Calendar.YEAR, \"%02d\");"
            ],
            [
                "YEAR_4_DIGITS",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent YEAR_4_DIGITS = new FieldComponent(\"%Y\", \"\\\\d{4}\", Calendar.YEAR, \"%04d\");"
            ],
            [
                "UTC_OFFSET",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent UTC_OFFSET = new UTCOffsetComponent();"
            ],
            [
                "LOCALE_TIME_ZONE_NAME",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent LOCALE_TIME_ZONE_NAME = new NotImplementedComponent(\"%Z\", \"\\\\w*\");"
            ],
            [
                "PERCENT",
                "org.graphstream.util.time",
                "ISODateComponent",
                "public static final ISODateComponent PERCENT = new AliasComponent(\"%%\", \"%\");"
            ],
            [
                "jjbitVec0",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };"
            ],
            [
                "jjnextStates",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "static final int[] jjnextStates = { 5, 6, 8, 9, 13, 14 };"
            ],
            [
                "jjstrLiteralImages",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "public static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, \"\\133\", \"\\135\", null, null, null, null, null, null };"
            ],
            [
                "lexStateNames",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "public static final String[] lexStateNames = { \"DEFAULT\" };"
            ],
            [
                "jjtoToken",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "static final long[] jjtoToken = { 0xff01L };"
            ],
            [
                "jjtoSkip",
                "org.graphstream.stream.file.gml",
                "GMLParserTokenManager",
                "static final long[] jjtoSkip = { 0x1eL };"
            ],
            [
                "jjbitVec0",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };"
            ],
            [
                "jjnextStates",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "static final int[] jjnextStates = { 54, 11, 12, 15, 17, 18, 1, 2, 5, 47, 52, 8, 9, 20, 21 };"
            ],
            [
                "jjstrLiteralImages",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "public static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, null, \"\\50\", \"\\51\", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null };"
            ],
            [
                "lexStateNames",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "public static final String[] lexStateNames = { \"DEFAULT\" };"
            ],
            [
                "jjtoToken",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "static final long[] jjtoToken = { 0xffffc01L };"
            ],
            [
                "jjtoSkip",
                "org.graphstream.stream.file.tlp",
                "TLPParserTokenManager",
                "static final long[] jjtoSkip = { 0x7eL };"
            ],
            [
                "XYZ_ATTR",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "public static final String XYZ_ATTR = \"xyz\";"
            ],
            [
                "WIDTH_ATTR",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "public static final String WIDTH_ATTR = \"ui.tikz.width\";"
            ],
            [
                "HEIGHT_ATTR",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "public static final String HEIGHT_ATTR = \"ui.tikz.height\";"
            ],
            [
                "DEFAULT_WIDTH",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "public static final double DEFAULT_WIDTH = 10;"
            ],
            [
                "DEFAULT_HEIGHT",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "public static final double DEFAULT_HEIGHT = 10;"
            ],
            [
                "DISPLAY_MIN_SIZE_IN_MM",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "public static final double DISPLAY_MIN_SIZE_IN_MM = 2;"
            ],
            [
                "DISPLAY_MAX_SIZE_IN_MM",
                "org.graphstream.stream.file",
                "FileSinkTikZ",
                "public static final double DISPLAY_MAX_SIZE_IN_MM = 10;"
            ],
            [
                "jjbitVec0",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };"
            ],
            [
                "jjnextStates",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "static final int[] jjnextStates = { 21, 27, 8, 10, 11, 18, 19, 22, 23, 26, 1, 2, 13, 14 };"
            ],
            [
                "jjstrLiteralImages",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "public static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, null, \"\\133\", \"\\135\", \"\\173\", \"\\175\", \"\\72\", \"\\54\", \"\\75\", null, null, null, null, null, null, null, null, null, null, \"\\73\", null, null, null, null, null, null, null, null, null, \"\\137\" };"
            ],
            [
                "lexStateNames",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "public static final String[] lexStateNames = { \"DEFAULT\" };"
            ],
            [
                "jjtoToken",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "static final long[] jjtoToken = { 0x3ffffffc01L };"
            ],
            [
                "jjtoSkip",
                "org.graphstream.stream.file.dot",
                "DOTParserTokenManager",
                "static final long[] jjtoSkip = { 0x7eL };"
            ],
            [
                "jjbitVec0",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };"
            ],
            [
                "jjnextStates",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "static final int[] jjnextStates = { 21, 22, 23, 17, 19, 2, 3, 5, 6, 8, 9 };"
            ],
            [
                "jjstrLiteralImages",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "public static final String[] jjstrLiteralImages = { \"\", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null };"
            ],
            [
                "lexStateNames",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "public static final String[] lexStateNames = { \"DEFAULT\" };"
            ],
            [
                "jjtoToken",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "static final long[] jjtoToken = { 0x3fffffffffffc9L };"
            ],
            [
                "jjtoSkip",
                "org.graphstream.stream.file.pajek",
                "PajekParserTokenManager",
                "static final long[] jjtoSkip = { 0x6L };"
            ],
            [
                "XMLNS",
                "org.graphstream.stream.file.gexf",
                "GEXF",
                "public static final String XMLNS = \"http://www.gexf.net/1.2draft\";"
            ],
            [
                "XMLNS_XSI",
                "org.graphstream.stream.file.gexf",
                "GEXF",
                "public static final String XMLNS_XSI = \"http://www.w3.org/2001/XMLSchema-instance\";"
            ],
            [
                "XMLNS_SL",
                "org.graphstream.stream.file.gexf",
                "GEXF",
                "public static final String XMLNS_SL = \"http://www.gexf.net/1.2draft http://www.gexf.net/1.2draft/gexf.xsd\";"
            ],
            [
                "XMLNS_VIZ",
                "org.graphstream.stream.file.gexf",
                "GEXF",
                "public static final String XMLNS_VIZ = \"http://www.gexf.net/1.2draft/viz\";"
            ],
            [
                "VERSION",
                "org.graphstream.stream.file.gexf",
                "GEXF",
                "public static final String VERSION = \"1.2\";"
            ],
            [
                "BUFFER_SIZE",
                "org.graphstream.stream.file.dgs",
                "DGSParser",
                "protected static final int BUFFER_SIZE = 4096;"
            ],
            [
                "ARRAY_OPEN",
                "org.graphstream.stream.file.dgs",
                "DGSParser",
                "public static final int ARRAY_OPEN = '{';"
            ],
            [
                "ARRAY_CLOSE",
                "org.graphstream.stream.file.dgs",
                "DGSParser",
                "public static final int ARRAY_CLOSE = '}';"
            ],
            [
                "MAP_OPEN",
                "org.graphstream.stream.file.dgs",
                "DGSParser",
                "public static final int MAP_OPEN = '[';"
            ],
            [
                "MAP_CLOSE",
                "org.graphstream.stream.file.dgs",
                "DGSParser",
                "public static final int MAP_CLOSE = ']';"
            ],
            [
                "gradientId",
                "org.graphstream.stream.file",
                "FileSinkSVG2",
                "static int gradientId = 0;"
            ],
            [
                "gradientId",
                "org.graphstream.stream.file",
                "SVGStyle",
                "static int gradientId = 0;"
            ],
            [
                "TIME_PREFIX",
                "org.graphstream.stream",
                "Timeline",
                "public static final String TIME_PREFIX = \"time\";"
            ],
            [
                "SYNC_DISABLE_KEY",
                "org.graphstream.stream.sync",
                "SinkTime",
                "public static final String SYNC_DISABLE_KEY = \"org.graphstream.stream.sync.disable\";"
            ],
            [
                "disableSync",
                "org.graphstream.stream.sync",
                "SinkTime",
                "protected static final boolean disableSync;"
            ],
            [
                "LIGHT_YELLOW",
                "org.graphstream.stream.netstream",
                "NetStreamReceiver",
                "protected static final String LIGHT_YELLOW = \"\u001b[33;1m\";"
            ],
            [
                "RESET",
                "org.graphstream.stream.netstream",
                "NetStreamReceiver",
                "protected static final String RESET = \"\u001b[0m\";"
            ],
            [
                "BUFFER_INITIAL_SIZE",
                "org.graphstream.stream.netstream",
                "NetStreamReceiver",
                "protected static final int BUFFER_INITIAL_SIZE = 8192;"
            ],
            [
                "BUFFER_INITIAL_SIZE",
                "org.graphstream.stream.netstream",
                "IncomingBuffer",
                "protected static final int BUFFER_INITIAL_SIZE = 8192;"
            ],
            [
                "EVENT_GETVERSION",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_GETVERSION = 0x00;"
            ],
            [
                "EVENT_START",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_START = 0x01;"
            ],
            [
                "EVENT_END",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_END = 0x02;"
            ],
            [
                "EVENT_ADD_NODE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_ADD_NODE = 0x10;"
            ],
            [
                "EVENT_DEL_NODE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_DEL_NODE = 0x11;"
            ],
            [
                "EVENT_ADD_EDGE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_ADD_EDGE = 0x12;"
            ],
            [
                "EVENT_DEL_EDGE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_DEL_EDGE = 0x13;"
            ],
            [
                "EVENT_STEP",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_STEP = 0x14;"
            ],
            [
                "EVENT_CLEARED",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_CLEARED = 0x15;"
            ],
            [
                "EVENT_ADD_GRAPH_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_ADD_GRAPH_ATTR = 0x16;"
            ],
            [
                "EVENT_CHG_GRAPH_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_CHG_GRAPH_ATTR = 0x17;"
            ],
            [
                "EVENT_DEL_GRAPH_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_DEL_GRAPH_ATTR = 0x18;"
            ],
            [
                "EVENT_ADD_NODE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_ADD_NODE_ATTR = 0x19;"
            ],
            [
                "EVENT_CHG_NODE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_CHG_NODE_ATTR = 0x1a;"
            ],
            [
                "EVENT_DEL_NODE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_DEL_NODE_ATTR = 0x1b;"
            ],
            [
                "EVENT_ADD_EDGE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_ADD_EDGE_ATTR = 0x1c;"
            ],
            [
                "EVENT_CHG_EDGE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_CHG_EDGE_ATTR = 0x1d;"
            ],
            [
                "EVENT_DEL_EDGE_ATTR",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int EVENT_DEL_EDGE_ATTR = 0x1e;"
            ],
            [
                "TYPE_UNKNOWN",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_UNKNOWN = 0x00;"
            ],
            [
                "TYPE_BOOLEAN",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_BOOLEAN = 0x50;"
            ],
            [
                "TYPE_BOOLEAN_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_BOOLEAN_ARRAY = 0x51;"
            ],
            [
                "TYPE_BYTE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_BYTE = 0x52;"
            ],
            [
                "TYPE_BYTE_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_BYTE_ARRAY = 0x53;"
            ],
            [
                "TYPE_SHORT",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_SHORT = 0x54;"
            ],
            [
                "TYPE_SHORT_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_SHORT_ARRAY = 0x55;"
            ],
            [
                "TYPE_INT",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_INT = 0x56;"
            ],
            [
                "TYPE_INT_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_INT_ARRAY = 0x57;"
            ],
            [
                "TYPE_LONG",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_LONG = 0x58;"
            ],
            [
                "TYPE_LONG_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_LONG_ARRAY = 0x59;"
            ],
            [
                "TYPE_FLOAT",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_FLOAT = 0x5a;"
            ],
            [
                "TYPE_FLOAT_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_FLOAT_ARRAY = 0x5b;"
            ],
            [
                "TYPE_DOUBLE",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_DOUBLE = 0x5c;"
            ],
            [
                "TYPE_DOUBLE_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_DOUBLE_ARRAY = 0x5d;"
            ],
            [
                "TYPE_STRING",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_STRING = 0x5e;"
            ],
            [
                "TYPE_RAW",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_RAW = 0x5f;"
            ],
            [
                "TYPE_ARRAY",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static byte TYPE_ARRAY = 0x60;"
            ],
            [
                "TYPE_NULL",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int TYPE_NULL = 0x61;"
            ],
            [
                "COMMAND",
                "org.graphstream.stream.netstream",
                "NetStreamConstants",
                "public static int COMMAND = 0x70;"
            ],
            [
                "NO_OPTIONS",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public final static int NO_OPTIONS = 0;"
            ],
            [
                "ENCODE",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public final static int ENCODE = 1;"
            ],
            [
                "DECODE",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public final static int DECODE = 0;"
            ],
            [
                "GZIP",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public final static int GZIP = 2;"
            ],
            [
                "DONT_GUNZIP",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public final static int DONT_GUNZIP = 4;"
            ],
            [
                "DO_BREAK_LINES",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public final static int DO_BREAK_LINES = 8;"
            ],
            [
                "URL_SAFE",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public final static int URL_SAFE = 16;"
            ],
            [
                "ORDERED",
                "org.graphstream.stream.netstream.packing",
                "Base64",
                "public final static int ORDERED = 32;"
            ],
            [
                "INITIAL_EDGE_CAPACITY",
                "org.graphstream.graph.implementations",
                "AdjacencyListNode",
                "protected static final int INITIAL_EDGE_CAPACITY;"
            ],
            [
                "GROWTH_FACTOR",
                "org.graphstream.graph.implementations",
                "AdjacencyListNode",
                "protected static final double GROWTH_FACTOR = 1.1;"
            ],
            [
                "I_EDGE",
                "org.graphstream.graph.implementations",
                "AdjacencyListNode",
                "protected static final char I_EDGE = 0;"
            ],
            [
                "IO_EDGE",
                "org.graphstream.graph.implementations",
                "AdjacencyListNode",
                "protected static final char IO_EDGE = 1;"
            ],
            [
                "O_EDGE",
                "org.graphstream.graph.implementations",
                "AdjacencyListNode",
                "protected static final char O_EDGE = 2;"
            ],
            [
                "GROW_FACTOR",
                "org.graphstream.graph.implementations",
                "AdjacencyListGraph",
                "public static final double GROW_FACTOR = 1.1;"
            ],
            [
                "DEFAULT_NODE_CAPACITY",
                "org.graphstream.graph.implementations",
                "AdjacencyListGraph",
                "public static final int DEFAULT_NODE_CAPACITY = 128;"
            ],
            [
                "DEFAULT_EDGE_CAPACITY",
                "org.graphstream.graph.implementations",
                "AdjacencyListGraph",
                "public static final int DEFAULT_EDGE_CAPACITY = 1024;"
            ]
        ],
        "tokensMethodJavadocValues": [],
        "tokensMethodArguments": [
            [
                "newRule",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "Rule"
            ]
        ],
        "tokensMethodVariablesNonPrivateNonStaticNonVoidMethods": [
            [
                "getDefaultNodeStyle",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleSheet",
                "public Style getDefaultNodeStyle()"
            ],
            [
                "getDefaultGraphRule",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleSheet",
                "public Rule getDefaultGraphRule()"
            ],
            [
                "getDefaultNodeRule",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleSheet",
                "public Rule getDefaultNodeRule()"
            ],
            [
                "getGraphStyleNameSpace",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleSheet",
                "public NameSpace getGraphStyleNameSpace()"
            ],
            [
                "getDefaultEdgeStyle",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleSheet",
                "public Style getDefaultEdgeStyle()"
            ],
            [
                "getStyleGroupIdFor",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleSheet",
                "public String getStyleGroupIdFor(Element element, ArrayList<Rule> rules)"
            ],
            [
                "equals",
                "java.lang",
                "Object",
                "public boolean equals(Object arg0)"
            ],
            [
                "getDefaultSpriteStyle",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleSheet",
                "public Style getDefaultSpriteStyle()"
            ],
            [
                "getDefaultSpriteRule",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleSheet",
                "public Rule getDefaultSpriteRule()"
            ],
            [
                "getSpriteStyleNameSpace",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleSheet",
                "public NameSpace getSpriteStyleNameSpace()"
            ],
            [
                "hashCode",
                "java.lang",
                "Object",
                "public native int hashCode()"
            ],
            [
                "getDefaultGraphStyle",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleSheet",
                "public Style getDefaultGraphStyle()"
            ],
            [
                "getClass",
                "java.lang",
                "Object",
                "public final native Class<? extends Object> getClass()"
            ],
            [
                "getEdgeStyleNameSpace",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleSheet",
                "public NameSpace getEdgeStyleNameSpace()"
            ],
            [
                "toString",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleSheet",
                "public String toString()"
            ],
            [
                "getRulesFor",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleSheet",
                "public ArrayList<Rule> getRulesFor(Element element)"
            ],
            [
                "getDefaultEdgeRule",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleSheet",
                "public Rule getDefaultEdgeRule()"
            ],
            [
                "getNodeStyleNameSpace",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleSheet",
                "public NameSpace getNodeStyleNameSpace()"
            ],
            [
                "clone",
                "java.lang",
                "Object",
                "protected native Object clone() throws CloneNotSupportedException"
            ],
            [
                "getGroups",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "Rule",
                "public HashSet<String> getGroups()"
            ],
            [
                "matchId",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "Rule",
                "public boolean matchId(String arg0)"
            ],
            [
                "getStyle",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "Rule",
                "public Style getStyle()"
            ],
            [
                "toString",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "Rule",
                "public String toString()"
            ],
            [
                "toString",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "Rule",
                "public String toString(int arg0)"
            ],
            [
                "toString",
                "java.lang",
                "Object",
                "public String toString()"
            ]
        ],
        "tokensMethodVariablesNonPrivateNonStaticAttributes": [
            [
                "defaultRule",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleSheet",
                "public Rule defaultRule;"
            ],
            [
                "graphRules",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleSheet",
                "public NameSpace graphRules = new NameSpace(Selector.Type.GRAPH);"
            ],
            [
                "nodeRules",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleSheet",
                "public NameSpace nodeRules = new NameSpace(Selector.Type.NODE);"
            ],
            [
                "edgeRules",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleSheet",
                "public NameSpace edgeRules = new NameSpace(Selector.Type.EDGE);"
            ],
            [
                "spriteRules",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleSheet",
                "public NameSpace spriteRules = new NameSpace(Selector.Type.SPRITE);"
            ],
            [
                "listeners",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "StyleSheet",
                "public ArrayList<StyleSheetListener> listeners = new ArrayList<StyleSheetListener>();"
            ],
            [
                "selector",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "Rule",
                "public Selector selector;"
            ],
            [
                "style",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "Rule",
                "public Style style;"
            ],
            [
                "groups",
                "org.graphstream.ui.graphicGraph.stylesheet",
                "Rule",
                "public HashSet<String> groups;"
            ]
        ],
        "tokensOracleVariablesNonPrivateNonStaticNonVoidMethods": [],
        "tokensOracleVariablesNonPrivateNonStaticAttributes": []
    }
]