[ {
  "id" : 26707,
  "oracle" : "inputs == null || inputs.size() == 0;",
  "oracleType" : "EXCEPT_POST",
  "projectName" : "Digital",
  "packageName" : "de.neemann.digital.core.wiring",
  "className" : "Break",
  "javadocTag" : "",
  "methodJavadoc" : "",
  "methodSourceCode" : "public void setInputs(ObservableValues inputs) throws NodeException{\n    input = inputs.get(0).checkBits(1, null);\n}",
  "classJavadoc" : "/**\n * The Break element\n */",
  "classSourceCode" : "/*\n * Copyright (c) 2016 Helmut Neemann\n * Use of this source code is governed by the GPL v3 license\n * that can be found in the LICENSE file.\n */\npackage de.neemann.digital.core.wiring;\n\nimport de.neemann.digital.core.Model;\nimport de.neemann.digital.core.NodeException;\nimport de.neemann.digital.core.ObservableValue;\nimport de.neemann.digital.core.ObservableValues;\nimport de.neemann.digital.core.element.Element;\nimport de.neemann.digital.core.element.ElementAttributes;\nimport de.neemann.digital.core.element.ElementTypeDescription;\nimport de.neemann.digital.core.element.Keys;\n\nimport static de.neemann.digital.core.element.PinInfo.input;\n\n/**\n * The Break element\n */\npublic class Break implements Element {\n\n    /**\n     * The Break description\n     */\n    public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Break.class, input(\"brk\"))\n            .addAttribute(Keys.ROTATE)\n            .addAttribute(Keys.LABEL)\n            .addAttribute(Keys.ENABLED)\n            .addAttribute(Keys.CYCLES);\n\n    private final int cycles;\n    private final String label;\n    private final boolean enabled;\n    private ObservableValue input;\n\n    /**\n     * Creates a new instance\n     *\n     * @param attributes the attributes\n     */\n    public Break(ElementAttributes attributes) {\n        cycles = attributes.get(Keys.CYCLES);\n        enabled = attributes.get(Keys.ENABLED);\n        label = attributes.getLabel();\n    }\n\n    @Override\n    public void setInputs(ObservableValues inputs) throws NodeException {\n        input = inputs.get(0).checkBits(1, null);\n    }\n\n    /**\n     * @return the break value\n     */\n    public ObservableValue getBreakInput() {\n        return input;\n    }\n\n    /**\n     * @return the timeout cycles\n     */\n    public int getCycles() {\n        return cycles;\n    }\n\n    @Override\n    public ObservableValues getOutputs() {\n        return ObservableValues.EMPTY_LIST;\n    }\n\n    @Override\n    public void registerNodes(Model model) {\n        model.addBreak(this);\n    }\n\n    /**\n     * @return the break label\n     */\n    public String getLabel() {\n        return label;\n    }\n\n    /**\n     * @return true if enabled\n     */\n    public boolean isEnabled() {\n        return enabled;\n    }\n}\n",
  "tokensGeneralGrammar" : [ "null", "true", "false", ",", ".", ":", ";", "?", "(", ")", "jdVar", "stream", "Arrays", "allMatch", "noneMatch", "anyMatch", "~", ">>", "<<", ">>>", "|", "&", "^", "+", "-", "/", "*", "%", "&&", "||", ">=", "<=", ">", "<", "==", "!=", "instanceof", "class", "methodResultID", "this" ],
  "tokensGeneralValuesGlobalDictionary" : [ [ "0", "int" ], [ "1", "int" ], [ "-1", "int" ], [ "0.0", "double" ], [ "1.0", "double" ], [ "-1.0", "double" ], [ "\"\"", "String" ], [ "\" \"", "String" ] ],
  "tokensProjectClasses" : [ [ "CLI", "de.neemann" ], [ "Mouse", "de.neemann.gui" ], [ "LineBreaker", "de.neemann.gui" ], [ "IconCreator", "de.neemann.gui" ], [ "ConfirmDialogBuilder", "de.neemann.gui" ], [ "Resources", "de.neemann.gui.language" ], [ "Bundle", "de.neemann.gui.language" ], [ "Language", "de.neemann.gui.language" ], [ "ToolTipAction", "de.neemann.gui" ], [ "MyFileChooser", "de.neemann.gui" ], [ "ClosingWindowListener", "de.neemann.gui" ], [ "ErrorMessage", "de.neemann.gui" ], [ "WindowSizeStorage", "de.neemann.gui" ], [ "Screen", "de.neemann.gui" ], [ "ToolTipProvider", "de.neemann.gui" ], [ "InfoDialog", "de.neemann.gui" ], [ "ValueFormatter", "de.neemann.digital.core" ], [ "ModelStateObserver", "de.neemann.digital.core" ], [ "PullDown", "de.neemann.digital.core.pld" ], [ "Diode", "de.neemann.digital.core.pld" ], [ "DiodeBackward", "de.neemann.digital.core.pld" ], [ "PullUp", "de.neemann.digital.core.pld" ], [ "DiodeForward", "de.neemann.digital.core.pld" ], [ "Node", "de.neemann.digital.core" ], [ "RAMSinglePort", "de.neemann.digital.core.memory" ], [ "ROMDualPort", "de.neemann.digital.core.memory" ], [ "RAMDualAccess", "de.neemann.digital.core.memory" ], [ "ByteArrayFromValueArray", "de.neemann.digital.core.memory.importer" ], [ "Importer", "de.neemann.digital.core.memory.importer" ], [ "LogisimReader", "de.neemann.digital.core.memory.importer" ], [ "DataFieldValueArray", "de.neemann.digital.core.memory.importer" ], [ "ByteArrayReader", "de.neemann.digital.core.memory.importer" ], [ "ValueArrayReader", "de.neemann.digital.core.memory.importer" ], [ "IntelHexReader", "de.neemann.digital.core.memory.importer" ], [ "ValueArray", "de.neemann.digital.core.memory.importer" ], [ "BinReader", "de.neemann.digital.core.memory.importer" ], [ "ByteArray", "de.neemann.digital.core.memory.importer" ], [ "MultiValueArray", "de.neemann.digital.core.memory.importer" ], [ "CounterPreset", "de.neemann.digital.core.memory" ], [ "RAMDualPort", "de.neemann.digital.core.memory" ], [ "Register", "de.neemann.digital.core.memory" ], [ "LookUpTable", "de.neemann.digital.core.memory" ], [ "BlockRAMDualPort", "de.neemann.digital.core.memory" ], [ "Counter", "de.neemann.digital.core.memory" ], [ "ROMMangerBase", "de.neemann.digital.core.memory.rom" ], [ "ROMManagerFile", "de.neemann.digital.core.memory.rom" ], [ "ROMManager", "de.neemann.digital.core.memory.rom" ], [ "ROMInterface", "de.neemann.digital.core.memory.rom" ], [ "EEPROM", "de.neemann.digital.core.memory" ], [ "ProgramCounter", "de.neemann.digital.core.memory" ], [ "RAMAsync", "de.neemann.digital.core.memory" ], [ "ROM", "de.neemann.digital.core.memory" ], [ "DataField", "de.neemann.digital.core.memory" ], [ "EEPROMDualPort", "de.neemann.digital.core.memory" ], [ "RAMInterface", "de.neemann.digital.core.memory" ], [ "DataFieldConverter", "de.neemann.digital.core.memory" ], [ "RAMSinglePortSel", "de.neemann.digital.core.memory" ], [ "ProgramMemory", "de.neemann.digital.core.memory" ], [ "RegisterFile", "de.neemann.digital.core.memory" ], [ "ModelStateObserverTyped", "de.neemann.digital.core" ], [ "Observable", "de.neemann.digital.core" ], [ "NodeWithoutDelay", "de.neemann.digital.core" ], [ "ExceptionWithOrigin", "de.neemann.digital.core" ], [ "ObservableValue", "de.neemann.digital.core" ], [ "SpeedTest", "de.neemann.digital.core" ], [ "BurnException", "de.neemann.digital.core" ], [ "GlobalValues", "de.neemann.digital.core" ], [ "MIDI", "de.neemann.digital.core.io" ], [ "RGBLED", "de.neemann.digital.core.io" ], [ "Out", "de.neemann.digital.core.io" ], [ "RotEncoder", "de.neemann.digital.core.io" ], [ "PinControl", "de.neemann.digital.core.io" ], [ "DipSwitch", "de.neemann.digital.core.io" ], [ "CommonConnectionType", "de.neemann.digital.core.io" ], [ "LightBulb", "de.neemann.digital.core.io" ], [ "Probe", "de.neemann.digital.core.io" ], [ "Button", "de.neemann.digital.core.io" ], [ "ButtonLED", "de.neemann.digital.core.io" ], [ "In", "de.neemann.digital.core.io" ], [ "StepperMotorUnipolar", "de.neemann.digital.core.io" ], [ "ProbeMode", "de.neemann.digital.core.io" ], [ "NotConnected", "de.neemann.digital.core.io" ], [ "MIDIHelper", "de.neemann.digital.core.io" ], [ "StepperMotorBipolar", "de.neemann.digital.core.io" ], [ "Const", "de.neemann.digital.core.io" ], [ "PowerSupply", "de.neemann.digital.core.io" ], [ "Ground", "de.neemann.digital.core.io" ], [ "InValue", "de.neemann.digital.core.io" ], [ "VDD", "de.neemann.digital.core.io" ], [ "ServerHolder", "de.neemann.digital.core.io.telnet" ], [ "Telnet", "de.neemann.digital.core.io.telnet" ], [ "ByteBuffer", "de.neemann.digital.core.io.telnet" ], [ "Server", "de.neemann.digital.core.io.telnet" ], [ "ElementAttributes", "de.neemann.digital.core.element" ], [ "Element", "de.neemann.digital.core.element" ], [ "ElementFactory", "de.neemann.digital.core.element" ], [ "PinInfo", "de.neemann.digital.core.element" ], [ "PinDescriptions", "de.neemann.digital.core.element" ], [ "PinDescription", "de.neemann.digital.core.element" ], [ "Keys", "de.neemann.digital.core.element" ], [ "Rotation", "de.neemann.digital.core.element" ], [ "AttributeListener", "de.neemann.digital.core.element" ], [ "Key", "de.neemann.digital.core.element" ], [ "ImmutableList", "de.neemann.digital.core.element" ], [ "ElementTypeDescription", "de.neemann.digital.core.element" ], [ "FanIn", "de.neemann.digital.core.basic" ], [ "NOr", "de.neemann.digital.core.basic" ], [ "And", "de.neemann.digital.core.basic" ], [ "XNOr", "de.neemann.digital.core.basic" ], [ "XOr", "de.neemann.digital.core.basic" ], [ "Not", "de.neemann.digital.core.basic" ], [ "NAnd", "de.neemann.digital.core.basic" ], [ "Function", "de.neemann.digital.core.basic" ], [ "Or", "de.neemann.digital.core.basic" ], [ "ExceptionWithOriginInterface", "de.neemann.digital.core" ], [ "ModelEvent", "de.neemann.digital.core" ], [ "BacktrackException", "de.neemann.digital.core" ], [ "PlainSwitch", "de.neemann.digital.core.switching" ], [ "FGPFET", "de.neemann.digital.core.switching" ], [ "NFET", "de.neemann.digital.core.switching" ], [ "FGNFET", "de.neemann.digital.core.switching" ], [ "PFET", "de.neemann.digital.core.switching" ], [ "PlainSwitchDT", "de.neemann.digital.core.switching" ], [ "TransGate", "de.neemann.digital.core.switching" ], [ "SwitchDT", "de.neemann.digital.core.switching" ], [ "Relay", "de.neemann.digital.core.switching" ], [ "RelayDT", "de.neemann.digital.core.switching" ], [ "Switch", "de.neemann.digital.core.switching" ], [ "Fuse", "de.neemann.digital.core.switching" ], [ "Reset", "de.neemann.digital.core.wiring" ], [ "Stop", "de.neemann.digital.core.wiring" ], [ "Decoder", "de.neemann.digital.core.wiring" ], [ "Delay", "de.neemann.digital.core.wiring" ], [ "Driver", "de.neemann.digital.core.wiring" ], [ "DataBus", "de.neemann.digital.core.wiring.bus" ], [ "SingleBusHandler", "de.neemann.digital.core.wiring.bus" ], [ "ConnectedBusHandler", "de.neemann.digital.core.wiring.bus" ], [ "AbstractBusHandler", "de.neemann.digital.core.wiring.bus" ], [ "BusModelStateObserver", "de.neemann.digital.core.wiring.bus" ], [ "CommonBusValue", "de.neemann.digital.core.wiring.bus" ], [ "DriverInvSel", "de.neemann.digital.core.wiring" ], [ "PriorityEncoder", "de.neemann.digital.core.wiring" ], [ "BusSplitter", "de.neemann.digital.core.wiring" ], [ "Splitter", "de.neemann.digital.core.wiring" ], [ "Multiplexer", "de.neemann.digital.core.wiring" ], [ "BitSelector", "de.neemann.digital.core.wiring" ], [ "Break", "de.neemann.digital.core.wiring" ], [ "Clock", "de.neemann.digital.core.wiring" ], [ "AsyncSeq", "de.neemann.digital.core.wiring" ], [ "Demultiplexer", "de.neemann.digital.core.wiring" ], [ "BitsException", "de.neemann.digital.core" ], [ "NodeInterface", "de.neemann.digital.core" ], [ "NodeException", "de.neemann.digital.core" ], [ "FlipflopDAsync", "de.neemann.digital.core.flipflops" ], [ "FlipflopD", "de.neemann.digital.core.flipflops" ], [ "FlipflopRSAsync", "de.neemann.digital.core.flipflops" ], [ "FlipflopT", "de.neemann.digital.core.flipflops" ], [ "FlipflopJKAsync", "de.neemann.digital.core.flipflops" ], [ "FlipflopJK", "de.neemann.digital.core.flipflops" ], [ "Monoflop", "de.neemann.digital.core.flipflops" ], [ "FlipflopRS", "de.neemann.digital.core.flipflops" ], [ "FlipflopBit", "de.neemann.digital.core.flipflops" ], [ "BarrelShifter", "de.neemann.digital.core.arithmetic" ], [ "Mul", "de.neemann.digital.core.arithmetic" ], [ "Neg", "de.neemann.digital.core.arithmetic" ], [ "BitExtender", "de.neemann.digital.core.arithmetic" ], [ "Add", "de.neemann.digital.core.arithmetic" ], [ "Div", "de.neemann.digital.core.arithmetic" ], [ "LeftRightFormat", "de.neemann.digital.core.arithmetic" ], [ "PRNG", "de.neemann.digital.core.arithmetic" ], [ "Sub", "de.neemann.digital.core.arithmetic" ], [ "BarrelShifterMode", "de.neemann.digital.core.arithmetic" ], [ "Comparator", "de.neemann.digital.core.arithmetic" ], [ "BitCount", "de.neemann.digital.core.arithmetic" ], [ "ObservableValues", "de.neemann.digital.core" ], [ "Value", "de.neemann.digital.core" ], [ "IntFormat", "de.neemann.digital.core" ], [ "SyncAccess", "de.neemann.digital.core" ], [ "Bits", "de.neemann.digital.core" ], [ "ProcessInterface", "de.neemann.digital.core.extern.handler" ], [ "StdIOInterface", "de.neemann.digital.core.extern.handler" ], [ "ApplicationVerilogStdIO", "de.neemann.digital.core.extern" ], [ "Application", "de.neemann.digital.core.extern" ], [ "External", "de.neemann.digital.core.extern" ], [ "Port", "de.neemann.digital.core.extern" ], [ "PortDefinition", "de.neemann.digital.core.extern" ], [ "ApplicationGHDL", "de.neemann.digital.core.extern" ], [ "ApplicationIVerilog", "de.neemann.digital.core.extern" ], [ "ApplicationVHDLStdIO", "de.neemann.digital.core.extern" ], [ "VHDLTokenizer", "de.neemann.digital.core.extern" ], [ "ApplicationGeneric", "de.neemann.digital.core.extern" ], [ "Options", "de.neemann.digital.core.extern" ], [ "VerilogTokenizer", "de.neemann.digital.core.extern" ], [ "ExternalFile", "de.neemann.digital.core.extern" ], [ "ProcessStarter", "de.neemann.digital.core.extern" ], [ "ModelEventType", "de.neemann.digital.core" ], [ "Observer", "de.neemann.digital.core" ], [ "ErrorDetector", "de.neemann.digital.core" ], [ "Statistics", "de.neemann.digital.core.stats" ], [ "Countable", "de.neemann.digital.core.stats" ], [ "Model", "de.neemann.digital.core" ], [ "Signal", "de.neemann.digital.core" ], [ "StringList", "de.neemann.digital" ], [ "XStreamValid", "de.neemann.digital" ], [ "StatsExport", "de.neemann.digital.cli" ], [ "SVGExport", "de.neemann.digital.cli" ], [ "CommandLineTester", "de.neemann.digital.cli" ], [ "CSVWriter", "de.neemann.digital.cli" ], [ "BasicCommand", "de.neemann.digital.cli.cli" ], [ "Argument", "de.neemann.digital.cli.cli" ], [ "CLIException", "de.neemann.digital.cli.cli" ], [ "Muxer", "de.neemann.digital.cli.cli" ], [ "ArgumentKey", "de.neemann.digital.cli.cli" ], [ "NamedCommand", "de.neemann.digital.cli.cli" ], [ "CLICommand", "de.neemann.digital.cli.cli" ], [ "ArgumentBase", "de.neemann.digital.cli.cli" ], [ "CircuitLoader", "de.neemann.digital.cli" ], [ "Main", "de.neemann.digital.cli" ], [ "Modification", "de.neemann.digital.undo" ], [ "Modifications", "de.neemann.digital.undo" ], [ "ModifyException", "de.neemann.digital.undo" ], [ "Copyable", "de.neemann.digital.undo" ], [ "UndoManager", "de.neemann.digital.undo" ], [ "ChangedListener", "de.neemann.digital.undo" ], [ "CircuitRepresentation", "de.neemann.digital.fsm" ], [ "Transition", "de.neemann.digital.fsm" ], [ "Movable", "de.neemann.digital.fsm" ], [ "MouseMovable", "de.neemann.digital.fsm" ], [ "Optimizer", "de.neemann.digital.fsm" ], [ "Permute", "de.neemann.digital.fsm" ], [ "FiniteStateMachineException", "de.neemann.digital.fsm" ], [ "TransitionTableCreator", "de.neemann.digital.fsm" ], [ "ValueParser", "de.neemann.digital.fsm" ], [ "WaitGroup", "de.neemann.digital.fsm" ], [ "FSMComponent", "de.neemann.digital.fsm.gui" ], [ "FSMFrame", "de.neemann.digital.fsm.gui" ], [ "OptimizerDialog", "de.neemann.digital.fsm.gui" ], [ "FSMDemos", "de.neemann.digital.fsm" ], [ "FSM", "de.neemann.digital.fsm" ], [ "State", "de.neemann.digital.fsm" ], [ "Lang", "de.neemann.digital.lang" ], [ "LineListenerResolveDontCare", "de.neemann.digital.testing" ], [ "TestingDataException", "de.neemann.digital.testing" ], [ "UnitTester", "de.neemann.digital.testing" ], [ "FolderTestRunner", "de.neemann.digital.testing" ], [ "TestExecutor", "de.neemann.digital.testing" ], [ "Transitions", "de.neemann.digital.testing" ], [ "TestCaseDescription", "de.neemann.digital.testing" ], [ "TestCaseElement", "de.neemann.digital.testing" ], [ "LineEmitterRepeat", "de.neemann.digital.testing.parser" ], [ "Parser", "de.neemann.digital.testing.parser" ], [ "ValueAppenderBits", "de.neemann.digital.testing.parser" ], [ "ParserException", "de.neemann.digital.testing.parser" ], [ "Context", "de.neemann.digital.testing.parser" ], [ "ModelInitializer", "de.neemann.digital.testing.parser" ], [ "Expression", "de.neemann.digital.testing.parser" ], [ "LineEmitterList", "de.neemann.digital.testing.parser" ], [ "TestRow", "de.neemann.digital.testing.parser" ], [ "LineEmitter", "de.neemann.digital.testing.parser" ], [ "LineEmitterWhile", "de.neemann.digital.testing.parser" ], [ "Tokenizer", "de.neemann.digital.testing.parser" ], [ "LineEmitterSimple", "de.neemann.digital.testing.parser" ], [ "Random", "de.neemann.digital.testing.parser.functions" ], [ "SignExtend", "de.neemann.digital.testing.parser.functions" ], [ "IfThenElse", "de.neemann.digital.testing.parser.functions" ], [ "Function", "de.neemann.digital.testing.parser.functions" ], [ "LineListener", "de.neemann.digital.testing.parser" ], [ "VirtualSignal", "de.neemann.digital.testing.parser" ], [ "ValueAppender", "de.neemann.digital.testing.parser" ], [ "OperatorPrecedence", "de.neemann.digital.testing.parser" ], [ "TestResultListener", "de.neemann.digital.testing" ], [ "MatchedValue", "de.neemann.digital.testing" ], [ "TestResult", "de.neemann.digital.testing" ], [ "MinimizerInterface", "de.neemann.digital.analyse" ], [ "LabelNumbering", "de.neemann.digital.analyse" ], [ "ModelAnalyser", "de.neemann.digital.analyse" ], [ "CSVImporter", "de.neemann.digital.analyse" ], [ "BoolTableExpanded", "de.neemann.digital.analyse" ], [ "TruthTableTableModel", "de.neemann.digital.analyse" ], [ "TableReducer", "de.neemann.digital.analyse.quinemc" ], [ "PrimeSelector", "de.neemann.digital.analyse.quinemc.primeselector" ], [ "BruteForce", "de.neemann.digital.analyse.quinemc.primeselector" ], [ "LargestFirst", "de.neemann.digital.analyse.quinemc.primeselector" ], [ "BruteForceGetAll", "de.neemann.digital.analyse.quinemc.primeselector" ], [ "PrimeSelectorDefault", "de.neemann.digital.analyse.quinemc.primeselector" ], [ "BoolTableByteArray", "de.neemann.digital.analyse.quinemc" ], [ "IndependentChecker", "de.neemann.digital.analyse.quinemc" ], [ "QuineMcCluskey", "de.neemann.digital.analyse.quinemc" ], [ "BoolTableExpression", "de.neemann.digital.analyse.quinemc" ], [ "BoolTableBoolArray", "de.neemann.digital.analyse.quinemc" ], [ "BoolTable", "de.neemann.digital.analyse.quinemc" ], [ "TableRows", "de.neemann.digital.analyse.quinemc" ], [ "ThreeStateValue", "de.neemann.digital.analyse.quinemc" ], [ "QuineMcCluskeyExam", "de.neemann.digital.analyse.quinemc" ], [ "TableRow", "de.neemann.digital.analyse.quinemc" ], [ "TruthTableConverter", "de.neemann.digital.analyse" ], [ "DetermineJKStateMachine", "de.neemann.digital.analyse" ], [ "Parser", "de.neemann.digital.analyse.parser" ], [ "ParseException", "de.neemann.digital.analyse.parser" ], [ "Tokenizer", "de.neemann.digital.analyse.parser" ], [ "ModelAnalyserInfo", "de.neemann.digital.analyse" ], [ "AnalyseException", "de.neemann.digital.analyse" ], [ "DependencyAnalyser", "de.neemann.digital.analyse" ], [ "SubstituteLibrary", "de.neemann.digital.analyse" ], [ "TruthTableFormatterHex", "de.neemann.digital.analyse.format" ], [ "TruthTableFormatter", "de.neemann.digital.analyse.format" ], [ "TruthTableFormatterTestCase", "de.neemann.digital.analyse.format" ], [ "TruthTableFormatterCSV", "de.neemann.digital.analyse.format" ], [ "TruthTableFormatterLaTeX", "de.neemann.digital.analyse.format" ], [ "MinimizerQuineMcCluskey", "de.neemann.digital.analyse" ], [ "ContextFiller", "de.neemann.digital.analyse.expression" ], [ "BitSetter", "de.neemann.digital.analyse.expression" ], [ "ExpressionVisitor", "de.neemann.digital.analyse.expression" ], [ "ContextMap", "de.neemann.digital.analyse.expression" ], [ "ComplexityVisitor", "de.neemann.digital.analyse.expression" ], [ "Operation", "de.neemann.digital.analyse.expression" ], [ "Context", "de.neemann.digital.analyse.expression" ], [ "NInputs", "de.neemann.digital.analyse.expression.modify" ], [ "NOr", "de.neemann.digital.analyse.expression.modify" ], [ "ExpressionModifier", "de.neemann.digital.analyse.expression.modify" ], [ "NAnd", "de.neemann.digital.analyse.expression.modify" ], [ "Constant", "de.neemann.digital.analyse.expression" ], [ "Expression", "de.neemann.digital.analyse.expression" ], [ "Variable", "de.neemann.digital.analyse.expression" ], [ "ExpressionException", "de.neemann.digital.analyse.expression" ], [ "ComplexityInclNotVisitor", "de.neemann.digital.analyse.expression" ], [ "Equals", "de.neemann.digital.analyse.expression" ], [ "FormatToExpression", "de.neemann.digital.analyse.expression.format" ], [ "FormatToTable", "de.neemann.digital.analyse.expression.format" ], [ "Formatter", "de.neemann.digital.analyse.expression.format" ], [ "FormatterException", "de.neemann.digital.analyse.expression.format" ], [ "FormatToTableLatex", "de.neemann.digital.analyse.expression.format" ], [ "Not", "de.neemann.digital.analyse.expression" ], [ "VariableVisitor", "de.neemann.digital.analyse.expression" ], [ "NamedExpression", "de.neemann.digital.analyse.expression" ], [ "MinimizerQuineMcCluskeyExam", "de.neemann.digital.analyse" ], [ "TruthTable", "de.neemann.digital.analyse" ], [ "SplitPinString", "de.neemann.digital.analyse" ], [ "CycleDetector", "de.neemann.digital.analyse" ], [ "DigitalRemoteInterface", "de.neemann.digital.gui" ], [ "TextSearchFilter", "de.neemann.digital.gui" ], [ "ExportZipAction", "de.neemann.digital.gui" ], [ "SettingsBase", "de.neemann.digital.gui" ], [ "DocumentationLocator", "de.neemann.digital.gui" ], [ "InitialTutorial", "de.neemann.digital.gui.tutorial" ], [ "InsertAction", "de.neemann.digital.gui" ], [ "StatusInterface", "de.neemann.digital.gui" ], [ "SearchTextField", "de.neemann.digital.gui" ], [ "SaveAsHelper", "de.neemann.digital.gui" ], [ "FileHistory", "de.neemann.digital.gui" ], [ "ReleaseInfo", "de.neemann.digital.gui.release" ], [ "CheckForNewRelease", "de.neemann.digital.gui.release" ], [ "StateInterface", "de.neemann.digital.gui.state" ], [ "StateManager", "de.neemann.digital.gui.state" ], [ "State", "de.neemann.digital.gui.state" ], [ "CircuitScrollPanel", "de.neemann.digital.gui.components" ], [ "ItemPicker", "de.neemann.digital.gui.components" ], [ "LibraryTreeModel", "de.neemann.digital.gui.components.tree" ], [ "SelectTree", "de.neemann.digital.gui.components.tree" ], [ "WindowPosManager", "de.neemann.digital.gui.components" ], [ "CustomShapeEditor", "de.neemann.digital.gui.components" ], [ "TransformHolder", "de.neemann.digital.gui.components" ], [ "EditorPanel", "de.neemann.digital.gui.components" ], [ "BehavioralFixtureCreator", "de.neemann.digital.gui.components" ], [ "EditorFactory", "de.neemann.digital.gui.components" ], [ "OrderMerger", "de.neemann.digital.gui.components" ], [ "ElementOrderer", "de.neemann.digital.gui.components" ], [ "ModifyMoveSelected", "de.neemann.digital.gui.components.modification" ], [ "ModifyMoveWire", "de.neemann.digital.gui.components.modification" ], [ "ModificationOfWire", "de.neemann.digital.gui.components.modification" ], [ "ModifyDeleteRect", "de.neemann.digital.gui.components.modification" ], [ "ModifyInsertWires", "de.neemann.digital.gui.components.modification" ], [ "ModifyInsertWire", "de.neemann.digital.gui.components.modification" ], [ "ModificationOfVisualElement", "de.neemann.digital.gui.components.modification" ], [ "ModifyCircuitAttributes", "de.neemann.digital.gui.components.modification" ], [ "ModifyDeleteWire", "de.neemann.digital.gui.components.modification" ], [ "ModifyMoveAndRotElement", "de.neemann.digital.gui.components.modification" ], [ "ModifyMeasurementOrdering", "de.neemann.digital.gui.components.modification" ], [ "ModifyDeleteElement", "de.neemann.digital.gui.components.modification" ], [ "ModifyAttribute", "de.neemann.digital.gui.components.modification" ], [ "ModifyAttributes", "de.neemann.digital.gui.components.modification" ], [ "ModifyInsertElement", "de.neemann.digital.gui.components.modification" ], [ "DataEditor", "de.neemann.digital.gui.components" ], [ "CircuitModifierPostClosed", "de.neemann.digital.gui.components" ], [ "CharDeleter", "de.neemann.digital.gui.components.terminal" ], [ "ConsoleTerminal", "de.neemann.digital.gui.components.terminal" ], [ "Terminal", "de.neemann.digital.gui.components.terminal" ], [ "TerminalDialog", "de.neemann.digital.gui.components.terminal" ], [ "TerminalInterface", "de.neemann.digital.gui.components.terminal" ], [ "Keyboard", "de.neemann.digital.gui.components.terminal" ], [ "KeyboardDialog", "de.neemann.digital.gui.components.terminal" ], [ "Editor", "de.neemann.digital.gui.components" ], [ "VarRectList", "de.neemann.digital.gui.components.karnaugh" ], [ "KarnaughMap", "de.neemann.digital.gui.components.karnaugh" ], [ "KarnaughMapComponent", "de.neemann.digital.gui.components.karnaugh" ], [ "KarnaughMapDialog", "de.neemann.digital.gui.components.karnaugh" ], [ "MapLayout", "de.neemann.digital.gui.components.karnaugh" ], [ "KarnaughException", "de.neemann.digital.gui.components.karnaugh" ], [ "CircuitTransferable", "de.neemann.digital.gui.components" ], [ "ElementHelpDialog", "de.neemann.digital.gui.components" ], [ "TestCaseDescriptionDialog", "de.neemann.digital.gui.components.testing" ], [ "ValueTableDialog", "de.neemann.digital.gui.components.testing" ], [ "TestCaseDescriptionEditor", "de.neemann.digital.gui.components.testing" ], [ "TestAllDialog", "de.neemann.digital.gui.components.testing" ], [ "ExpressionListenerOptimizeJK", "de.neemann.digital.gui.components.table" ], [ "LaTeXExpressionListener", "de.neemann.digital.gui.components.table" ], [ "HardwareDescriptionGenerator", "de.neemann.digital.gui.components.table.hardware" ], [ "GenerateFile", "de.neemann.digital.gui.components.table.hardware" ], [ "GenerateCUPL", "de.neemann.digital.gui.components.table.hardware" ], [ "ExpressionListener", "de.neemann.digital.gui.components.table" ], [ "ReorderOutputs", "de.neemann.digital.gui.components.table" ], [ "AllSolutionsDialog", "de.neemann.digital.gui.components.table" ], [ "ExpressionListenerJK", "de.neemann.digital.gui.components.table" ], [ "ExpressionListenerCSVCondensed", "de.neemann.digital.gui.components.table" ], [ "ExpressionCreator", "de.neemann.digital.gui.components.table" ], [ "TableDialog", "de.neemann.digital.gui.components.table" ], [ "BuilderExpressionCreator", "de.neemann.digital.gui.components.table" ], [ "ExpressionComponent", "de.neemann.digital.gui.components.table" ], [ "PlainTextExpressionListener", "de.neemann.digital.gui.components.table" ], [ "TableReorderManager", "de.neemann.digital.gui.components.table" ], [ "ShowStringDialog", "de.neemann.digital.gui.components.table" ], [ "ReorderInputs", "de.neemann.digital.gui.components.table" ], [ "ProgressDialog", "de.neemann.digital.gui.components.table" ], [ "CheckResultListener", "de.neemann.digital.gui.components.table" ], [ "ExpressionListenerStore", "de.neemann.digital.gui.components.table" ], [ "AttributeDialog", "de.neemann.digital.gui.components" ], [ "ProbeDialog", "de.neemann.digital.gui.components" ], [ "ColorSchemeEditor", "de.neemann.digital.gui.components" ], [ "ROMEditorDialog", "de.neemann.digital.gui.components" ], [ "LabelGenerator", "de.neemann.digital.gui.components" ], [ "SingleValueDialog", "de.neemann.digital.gui.components" ], [ "ExpressionDialog", "de.neemann.digital.gui.components.expression" ], [ "CircuitComponent", "de.neemann.digital.gui.components" ], [ "VGA", "de.neemann.digital.gui.components.graphics" ], [ "GraphicCard", "de.neemann.digital.gui.components.graphics" ], [ "LedMatrix", "de.neemann.digital.gui.components.graphics" ], [ "VGADialog", "de.neemann.digital.gui.components.graphics" ], [ "MoveFocusTo", "de.neemann.digital.gui.components.graphics" ], [ "LedMatrixComponent", "de.neemann.digital.gui.components.graphics" ], [ "GraphicDialog", "de.neemann.digital.gui.components.graphics" ], [ "GraphicComponent", "de.neemann.digital.gui.components.graphics" ], [ "LedMatrixDialog", "de.neemann.digital.gui.components.graphics" ], [ "ConstraintsBuilder", "de.neemann.digital.gui.components" ], [ "ScopeTrigger", "de.neemann.digital.gui.components.data" ], [ "GraphDialog", "de.neemann.digital.gui.components.data" ], [ "GraphComponent", "de.neemann.digital.gui.components.data" ], [ "DummyElement", "de.neemann.digital.gui.components.data" ], [ "ValueTableObserver", "de.neemann.digital.gui.components.data" ], [ "CircuitModifier", "de.neemann.digital.gui.components" ], [ "CopiedElementLabelRenamer", "de.neemann.digital.gui.components" ], [ "TextLineNumber", "de.neemann.digital.gui.components" ], [ "InsertHistory", "de.neemann.digital.gui" ], [ "ProgramMemoryLoader", "de.neemann.digital.gui" ], [ "Main", "de.neemann.digital.gui" ], [ "StatsDialog", "de.neemann.digital.gui" ], [ "WindowManager", "de.neemann.digital.gui" ], [ "Settings", "de.neemann.digital.gui" ], [ "LibrarySelector", "de.neemann.digital.gui" ], [ "DigitalUncaughtExceptionHandler", "de.neemann.digital.gui" ], [ "NumberingWizard", "de.neemann.digital.gui" ], [ "HandlerInterface", "de.neemann.digital.gui.remote" ], [ "RemoteSever", "de.neemann.digital.gui.remote" ], [ "RemoteException", "de.neemann.digital.gui.remote" ], [ "DigitalHandler", "de.neemann.digital.gui.remote" ], [ "ModelModifier", "de.neemann.digital.gui" ], [ "VerilogCreator", "de.neemann.digital.hdl.verilog2" ], [ "VerilogRenaming", "de.neemann.digital.hdl.verilog2" ], [ "VerilogGenerator", "de.neemann.digital.hdl.verilog2" ], [ "VerilogTestBenchCreator", "de.neemann.digital.hdl.verilog2" ], [ "VerilogElement", "de.neemann.digital.hdl.verilog2.lib" ], [ "VerilogTemplate", "de.neemann.digital.hdl.verilog2.lib" ], [ "VerilogLibrary", "de.neemann.digital.hdl.verilog2" ], [ "CodePrinter", "de.neemann.digital.hdl.printer" ], [ "CodePrinterStr", "de.neemann.digital.hdl.printer" ], [ "Statements", "de.neemann.digital.hdl.hgs" ], [ "Parser", "de.neemann.digital.hdl.hgs" ], [ "ParserException", "de.neemann.digital.hdl.hgs" ], [ "Statement", "de.neemann.digital.hdl.hgs" ], [ "Context", "de.neemann.digital.hdl.hgs" ], [ "FirstClassFunctionCall", "de.neemann.digital.hdl.hgs.function" ], [ "InnerFunction", "de.neemann.digital.hdl.hgs.function" ], [ "JavaClass", "de.neemann.digital.hdl.hgs.function" ], [ "FirstClassFunction", "de.neemann.digital.hdl.hgs.function" ], [ "Func", "de.neemann.digital.hdl.hgs.function" ], [ "Function", "de.neemann.digital.hdl.hgs.function" ], [ "Expression", "de.neemann.digital.hdl.hgs" ], [ "HGSEvalException", "de.neemann.digital.hdl.hgs" ], [ "Tokenizer", "de.neemann.digital.hdl.hgs" ], [ "ReferenceToFunc", "de.neemann.digital.hdl.hgs.refs" ], [ "ReferenceToStruct", "de.neemann.digital.hdl.hgs.refs" ], [ "ReferenceToArray", "de.neemann.digital.hdl.hgs.refs" ], [ "Reference", "de.neemann.digital.hdl.hgs.refs" ], [ "ReferenceToVar", "de.neemann.digital.hdl.hgs.refs" ], [ "Value", "de.neemann.digital.hdl.hgs" ], [ "HGSMap", "de.neemann.digital.hdl.hgs" ], [ "HGSArray", "de.neemann.digital.hdl.hgs" ], [ "Separator", "de.neemann.digital.hdl.vhdl2" ], [ "VHDLLibrary", "de.neemann.digital.hdl.vhdl2" ], [ "VHDLCreator", "de.neemann.digital.hdl.vhdl2" ], [ "VHDLRenaming", "de.neemann.digital.hdl.vhdl2" ], [ "VHDLGenerator", "de.neemann.digital.hdl.vhdl2" ], [ "VHDLEntity", "de.neemann.digital.hdl.vhdl2.entities" ], [ "VHDLTemplate", "de.neemann.digital.hdl.vhdl2.entities" ], [ "VHDLTemplateFunctions", "de.neemann.digital.hdl.vhdl2.entities" ], [ "VHDLTestBenchCreator", "de.neemann.digital.hdl.vhdl2" ], [ "HDLModel", "de.neemann.digital.hdl.model2" ], [ "HDLNode", "de.neemann.digital.hdl.model2" ], [ "HDLNet", "de.neemann.digital.hdl.model2" ], [ "Printable", "de.neemann.digital.hdl.model2" ], [ "HDLException", "de.neemann.digital.hdl.model2" ], [ "HDLPort", "de.neemann.digital.hdl.model2" ], [ "HasName", "de.neemann.digital.hdl.model2" ], [ "InlineManyToOne", "de.neemann.digital.hdl.model2.optimizations" ], [ "MergeAssignments", "de.neemann.digital.hdl.model2.optimizations" ], [ "Optimization", "de.neemann.digital.hdl.model2.optimizations" ], [ "MergeConstants", "de.neemann.digital.hdl.model2.optimizations" ], [ "ReplaceOneToMany", "de.neemann.digital.hdl.model2.optimizations" ], [ "NameConstantSignals", "de.neemann.digital.hdl.model2.optimizations" ], [ "OptimizeExpressions", "de.neemann.digital.hdl.model2.optimizations" ], [ "RemoveConstantSignals", "de.neemann.digital.hdl.model2.optimizations" ], [ "NodeSorterExpressionBased", "de.neemann.digital.hdl.model2.optimizations" ], [ "HDLNodeSplitterManyToOne", "de.neemann.digital.hdl.model2" ], [ "HDLNodeCustom", "de.neemann.digital.hdl.model2" ], [ "HDLNodeAssignment", "de.neemann.digital.hdl.model2" ], [ "HDLCircuit", "de.neemann.digital.hdl.model2" ], [ "ExprVar", "de.neemann.digital.hdl.model2.expression" ], [ "Visitor", "de.neemann.digital.hdl.model2.expression" ], [ "ExprVarRange", "de.neemann.digital.hdl.model2.expression" ], [ "Expression", "de.neemann.digital.hdl.model2.expression" ], [ "ExpressionOptimizer", "de.neemann.digital.hdl.model2.expression" ], [ "ExprNot", "de.neemann.digital.hdl.model2.expression" ], [ "ExprConstant", "de.neemann.digital.hdl.model2.expression" ], [ "ExprOperate", "de.neemann.digital.hdl.model2.expression" ], [ "ExprUsingNet", "de.neemann.digital.hdl.model2.expression" ], [ "HDLNodeBuildIn", "de.neemann.digital.hdl.model2" ], [ "HDLClockIntegrator", "de.neemann.digital.hdl.model2.clock" ], [ "ClockIntegratorGeneric", "de.neemann.digital.hdl.model2.clock" ], [ "ClockInfo", "de.neemann.digital.hdl.model2.clock" ], [ "HDLNodeSplitterOneToMany", "de.neemann.digital.hdl.model2" ], [ "FileLocator", "de.neemann.digital" ], [ "ValueTable", "de.neemann.digital.data" ], [ "ValueTableModel", "de.neemann.digital.data" ], [ "DataPlotter", "de.neemann.digital.data" ], [ "Value", "de.neemann.digital.data" ], [ "ExpressionExporter", "de.neemann.digital.builder" ], [ "ExpressionToFileExporter", "de.neemann.digital.builder" ], [ "RotationByteArrayOutputStream", "de.neemann.digital.builder.tt2" ], [ "TT2Exporter", "de.neemann.digital.builder.tt2" ], [ "StartATF150xFitter", "de.neemann.digital.builder.tt2" ], [ "OSExecute", "de.neemann.digital.builder.tt2" ], [ "CreateCHN", "de.neemann.digital.builder.ATF150x" ], [ "ATFDevice", "de.neemann.digital.builder.ATF150x" ], [ "ATFDialog", "de.neemann.digital.builder.ATF150x" ], [ "PL", "de.neemann.digital.builder.ATF150x" ], [ "ATF150xCuplExporter", "de.neemann.digital.builder.ATF150x" ], [ "PinMap", "de.neemann.digital.builder" ], [ "PinMapException", "de.neemann.digital.builder" ], [ "FragmentExpression", "de.neemann.digital.builder.circuit" ], [ "FragmentVisualElement", "de.neemann.digital.builder.circuit" ], [ "FragmentSameInValue", "de.neemann.digital.builder.circuit" ], [ "CircuitBuilder", "de.neemann.digital.builder.circuit" ], [ "FragmentVisitor", "de.neemann.digital.builder.circuit" ], [ "FragmentVariable", "de.neemann.digital.builder.circuit" ], [ "Fragment", "de.neemann.digital.builder.circuit" ], [ "Box", "de.neemann.digital.builder.circuit" ], [ "Gal16v8JEDECExporter", "de.neemann.digital.builder.Gal16v8" ], [ "CuplExporter", "de.neemann.digital.builder.Gal16v8" ], [ "BuilderCollectorGAL", "de.neemann.digital.builder.Gal16v8" ], [ "CleanNameBuilder", "de.neemann.digital.builder" ], [ "BuilderCollector", "de.neemann.digital.builder" ], [ "BuilderInterface", "de.neemann.digital.builder" ], [ "BuilderException", "de.neemann.digital.builder" ], [ "Gal22v10JEDECExporter", "de.neemann.digital.builder.Gal22v10" ], [ "Gal22v10CuplExporter", "de.neemann.digital.builder.Gal22v10" ], [ "FuseMap", "de.neemann.digital.builder.jedec" ], [ "FuseMapFillerException", "de.neemann.digital.builder.jedec" ], [ "FuseMapFiller", "de.neemann.digital.builder.jedec" ], [ "JedecWriter", "de.neemann.digital.builder.jedec" ], [ "GenericCode", "de.neemann.digital.draw.library" ], [ "ElementLibrary", "de.neemann.digital.draw.library" ], [ "GenericInitCode", "de.neemann.digital.draw.library" ], [ "Visitor", "de.neemann.digital.draw.library" ], [ "ComponentManager", "de.neemann.digital.draw.library" ], [ "LibraryListener", "de.neemann.digital.draw.library" ], [ "JarComponentManager", "de.neemann.digital.draw.library" ], [ "ElementLibraryFolder", "de.neemann.digital.draw.library" ], [ "CustomElement", "de.neemann.digital.draw.library" ], [ "ElementNotFoundNotification", "de.neemann.digital.draw.library" ], [ "ElementNotFoundException", "de.neemann.digital.draw.library" ], [ "ComponentSource", "de.neemann.digital.draw.library" ], [ "LibraryInterface", "de.neemann.digital.draw.library" ], [ "ResolveGenerics", "de.neemann.digital.draw.library" ], [ "LibraryNode", "de.neemann.digital.draw.library" ], [ "ElementTypeDescriptionCustom", "de.neemann.digital.draw.library" ], [ "InvalidNodeException", "de.neemann.digital.draw.library" ], [ "NumStringComparator", "de.neemann.digital.draw.library" ], [ "InputShape", "de.neemann.digital.draw.shapes" ], [ "Interactor", "de.neemann.digital.draw.shapes" ], [ "ButtonShape", "de.neemann.digital.draw.shapes" ], [ "GenericShape", "de.neemann.digital.draw.shapes" ], [ "Drawable", "de.neemann.digital.draw.shapes" ], [ "DelayShape", "de.neemann.digital.draw.shapes" ], [ "DiodeBackwardShape", "de.neemann.digital.draw.shapes" ], [ "FuseShape", "de.neemann.digital.draw.shapes" ], [ "FETShapeP", "de.neemann.digital.draw.shapes" ], [ "DILShape", "de.neemann.digital.draw.shapes" ], [ "DipSwitchShape", "de.neemann.digital.draw.shapes" ], [ "SwitchShape", "de.neemann.digital.draw.shapes" ], [ "LightBulbShape", "de.neemann.digital.draw.shapes" ], [ "LayoutShape", "de.neemann.digital.draw.shapes" ], [ "SplitterShape", "de.neemann.digital.draw.shapes" ], [ "PolarityAwareLEDShape", "de.neemann.digital.draw.shapes" ], [ "ButtonLEDShape", "de.neemann.digital.draw.shapes" ], [ "RelayShape", "de.neemann.digital.draw.shapes" ], [ "ConstShape", "de.neemann.digital.draw.shapes" ], [ "BreakShape", "de.neemann.digital.draw.shapes" ], [ "GenericCodeShape", "de.neemann.digital.draw.shapes" ], [ "TextShape", "de.neemann.digital.draw.shapes" ], [ "SevenSegHexShape", "de.neemann.digital.draw.shapes" ], [ "ProbeShape", "de.neemann.digital.draw.shapes" ], [ "NotConnectedShape", "de.neemann.digital.draw.shapes" ], [ "StepperMotorShape", "de.neemann.digital.draw.shapes" ], [ "FETShape", "de.neemann.digital.draw.shapes" ], [ "BitSelShape", "de.neemann.digital.draw.shapes" ], [ "SevenSegShape", "de.neemann.digital.draw.shapes" ], [ "GenericInitCodeShape", "de.neemann.digital.draw.shapes" ], [ "RelayDTShape", "de.neemann.digital.draw.shapes" ], [ "RectShape", "de.neemann.digital.draw.shapes" ], [ "VDDShape", "de.neemann.digital.draw.shapes" ], [ "RAMShape", "de.neemann.digital.draw.shapes" ], [ "ScopeShape", "de.neemann.digital.draw.shapes" ], [ "DemuxerShape", "de.neemann.digital.draw.shapes" ], [ "FETShapeN", "de.neemann.digital.draw.shapes" ], [ "BusSplitterShape", "de.neemann.digital.draw.shapes" ], [ "PullUpShape", "de.neemann.digital.draw.shapes" ], [ "TestCaseShape", "de.neemann.digital.draw.shapes" ], [ "TunnelShape", "de.neemann.digital.draw.shapes" ], [ "MuxerShape", "de.neemann.digital.draw.shapes" ], [ "SwitchDTShape", "de.neemann.digital.draw.shapes" ], [ "PinControlShape", "de.neemann.digital.draw.shapes" ], [ "FGFETShapeN", "de.neemann.digital.draw.shapes" ], [ "TransGateShape", "de.neemann.digital.draw.shapes" ], [ "DiodeShape", "de.neemann.digital.draw.shapes" ], [ "ResetShape", "de.neemann.digital.draw.shapes" ], [ "DiodeForewardShape", "de.neemann.digital.draw.shapes" ], [ "SixteenShape", "de.neemann.digital.draw.shapes" ], [ "CustomCircuitShapeType", "de.neemann.digital.draw.shapes" ], [ "InteractorInterface", "de.neemann.digital.draw.shapes" ], [ "ShapeSpecificMatch", "de.neemann.digital.draw.shapes" ], [ "LEDShape", "de.neemann.digital.draw.shapes" ], [ "ClockShape", "de.neemann.digital.draw.shapes" ], [ "RGBLEDShape", "de.neemann.digital.draw.shapes" ], [ "RotEncoderShape", "de.neemann.digital.draw.shapes" ], [ "IEEEGenericShape", "de.neemann.digital.draw.shapes.ieee" ], [ "IEEEOrShape", "de.neemann.digital.draw.shapes.ieee" ], [ "IEEENotShape", "de.neemann.digital.draw.shapes.ieee" ], [ "IEEEAndShape", "de.neemann.digital.draw.shapes.ieee" ], [ "IEEEXOrShape", "de.neemann.digital.draw.shapes.ieee" ], [ "ObservableValueReader", "de.neemann.digital.draw.shapes" ], [ "SvgTemplate", "de.neemann.digital.draw.shapes.custom.svg" ], [ "TransformParser", "de.neemann.digital.draw.shapes.custom.svg" ], [ "Context", "de.neemann.digital.draw.shapes.custom.svg" ], [ "SvgException", "de.neemann.digital.draw.shapes.custom.svg" ], [ "SvgImporter", "de.neemann.digital.draw.shapes.custom.svg" ], [ "CustomShapeDescription", "de.neemann.digital.draw.shapes.custom" ], [ "CustomShape", "de.neemann.digital.draw.shapes.custom" ], [ "FGFETShapeP", "de.neemann.digital.draw.shapes" ], [ "OutputShape", "de.neemann.digital.draw.shapes" ], [ "GroundShape", "de.neemann.digital.draw.shapes" ], [ "AsyncClockShape", "de.neemann.digital.draw.shapes" ], [ "Shape", "de.neemann.digital.draw.shapes" ], [ "MissingShape", "de.neemann.digital.draw.shapes" ], [ "ShapeFactory", "de.neemann.digital.draw.shapes" ], [ "PullDownShape", "de.neemann.digital.draw.shapes" ], [ "DriverShape", "de.neemann.digital.draw.shapes" ], [ "SevenShape", "de.neemann.digital.draw.shapes" ], [ "DataShape", "de.neemann.digital.draw.shapes" ], [ "DotCreator", "de.neemann.digital.draw.elements" ], [ "Wire", "de.neemann.digital.draw.elements" ], [ "Movable", "de.neemann.digital.draw.elements" ], [ "Pins", "de.neemann.digital.draw.elements" ], [ "Circuit", "de.neemann.digital.draw.elements" ], [ "Tunnel", "de.neemann.digital.draw.elements" ], [ "PinException", "de.neemann.digital.draw.elements" ], [ "ElementOrder", "de.neemann.digital.draw.elements" ], [ "VisualElement", "de.neemann.digital.draw.elements" ], [ "Pin", "de.neemann.digital.draw.elements" ], [ "IOState", "de.neemann.digital.draw.elements" ], [ "WireMerger", "de.neemann.digital.draw.elements" ], [ "WireConsistencyChecker", "de.neemann.digital.draw.elements" ], [ "AsyncSequentialClock", "de.neemann.digital.draw.model" ], [ "ModelEntry", "de.neemann.digital.draw.model" ], [ "Net", "de.neemann.digital.draw.model" ], [ "ModelCreator", "de.neemann.digital.draw.model" ], [ "InverterConfig", "de.neemann.digital.draw.model" ], [ "NetList", "de.neemann.digital.draw.model" ], [ "RealTimeClock", "de.neemann.digital.draw.model" ], [ "Polygon", "de.neemann.digital.draw.graphics" ], [ "Orientation", "de.neemann.digital.draw.graphics" ], [ "Vector", "de.neemann.digital.draw.graphics" ], [ "SVGSettings", "de.neemann.digital.draw.graphics" ], [ "Transform", "de.neemann.digital.draw.graphics" ], [ "ColorKey", "de.neemann.digital.draw.graphics" ], [ "ExportFactory", "de.neemann.digital.draw.graphics" ], [ "GraphicsImage", "de.neemann.digital.draw.graphics" ], [ "VectorInterface", "de.neemann.digital.draw.graphics" ], [ "TextFormatSVG", "de.neemann.digital.draw.graphics" ], [ "TransformMatrix", "de.neemann.digital.draw.graphics" ], [ "TextFormatLaTeX", "de.neemann.digital.draw.graphics" ], [ "GraphicMinMax", "de.neemann.digital.draw.graphics" ], [ "GraphicTransform", "de.neemann.digital.draw.graphics" ], [ "ColorScheme", "de.neemann.digital.draw.graphics" ], [ "Style", "de.neemann.digital.draw.graphics" ], [ "GraphicSkipLines", "de.neemann.digital.draw.graphics.linemerger" ], [ "GraphicLineCollector", "de.neemann.digital.draw.graphics.linemerger" ], [ "PolygonConverter", "de.neemann.digital.draw.graphics" ], [ "VectorFloat", "de.neemann.digital.draw.graphics" ], [ "TransformRotate", "de.neemann.digital.draw.graphics" ], [ "Graphic", "de.neemann.digital.draw.graphics" ], [ "ColorStyleHighContrast", "de.neemann.digital.draw.graphics" ], [ "Parser", "de.neemann.digital.draw.graphics.text" ], [ "ParseException", "de.neemann.digital.draw.graphics.text" ], [ "PlainTextFormatter", "de.neemann.digital.draw.graphics.text.formatter" ], [ "SVGFormatter", "de.neemann.digital.draw.graphics.text.formatter" ], [ "GraphicsFormatter", "de.neemann.digital.draw.graphics.text.formatter" ], [ "LaTeXFormatter", "de.neemann.digital.draw.graphics.text.formatter" ], [ "Decorate", "de.neemann.digital.draw.graphics.text.text" ], [ "Text", "de.neemann.digital.draw.graphics.text.text" ], [ "Index", "de.neemann.digital.draw.graphics.text.text" ], [ "Sentence", "de.neemann.digital.draw.graphics.text.text" ], [ "Blank", "de.neemann.digital.draw.graphics.text.text" ], [ "Character", "de.neemann.digital.draw.graphics.text.text" ], [ "ExpressionToText", "de.neemann.digital.draw.graphics.text.text" ], [ "Simple", "de.neemann.digital.draw.graphics.text.text" ], [ "Export", "de.neemann.digital.draw.graphics" ], [ "ColorStyleMonochrome", "de.neemann.digital.draw.graphics" ], [ "TransformTranslate", "de.neemann.digital.draw.graphics" ], [ "GraphicSVG", "de.neemann.digital.draw.graphics" ], [ "GraphicSwing", "de.neemann.digital.draw.graphics" ], [ "PolygonParser", "de.neemann.digital.draw.graphics" ], [ "SVGTokenizer", "de.neemann.digital.draw.graphics" ], [ "GifSequenceWriter", "de.neemann.digital.draw.gif" ], [ "GifExporter", "de.neemann.digital.draw.gif" ], [ "ConfigCache", "de.neemann.digital.toolchain" ], [ "Configuration", "de.neemann.digital.toolchain" ], [ "Command", "de.neemann.digital.toolchain" ], [ "FileToCreate", "de.neemann.digital.toolchain" ] ],
  "tokensProjectClassesNonPrivateStaticNonVoidMethods" : [ [ "getMouse", "de.neemann.gui", "Mouse", "static Mouse getMouse()" ], [ "create", "de.neemann.gui", "IconCreator", "public static Icon create(String name)" ], [ "createImage", "de.neemann.gui", "IconCreator", "public static Image createImage(String name)" ], [ "createImages", "de.neemann.gui", "IconCreator", "public static ArrayList<Image> createImages(String... names)" ], [ "getCTRLMask", "de.neemann.gui", "ToolTipAction", "public static int getCTRLMask()" ], [ "checkForSave", "de.neemann.gui", "ClosingWindowListener", "public static boolean checkForSave(JFrame parent, ConfirmSave confirmSave)" ], [ "getParentWindow", "de.neemann.gui", "ErrorMessage", "public static Window getParentWindow(Component parent)" ], [ "getInstance", "de.neemann.gui", "Screen", "public static Screen getInstance()" ], [ "getDefaultFontScaling", "de.neemann.gui", "Screen", "public static int getDefaultFontScaling()" ], [ "isLinux", "de.neemann.gui", "Screen", "public static boolean isLinux()" ], [ "isMac", "de.neemann.gui", "Screen", "public static boolean isMac()" ], [ "getInstance", "de.neemann.gui", "InfoDialog", "public static InfoDialog getInstance()" ], [ "read", "de.neemann.digital.core.memory.importer", "Importer", "public static DataField read(File hexFile, int dataBits, boolean bigEndian) throws IOException" ], [ "getOriginOf", "de.neemann.digital.core", "ExceptionWithOrigin", "public static String getOriginOf(Throwable e)" ], [ "zMaskString", "de.neemann.digital.core", "ObservableValue", "static String zMaskString(long value, long highZ, int bits)" ], [ "getInstance", "de.neemann.digital.core", "GlobalValues", "public static GlobalValues getInstance()" ], [ "getInstance", "de.neemann.digital.core.io", "MIDIHelper", "public static MIDIHelper getInstance()" ], [ "input", "de.neemann.digital.core.element", "PinInfo", "public static PinInfo input(String name)" ], [ "input", "de.neemann.digital.core.element", "PinInfo", "public static PinInfo input(String name, String description)" ], [ "output", "de.neemann.digital.core.element", "PinInfo", "public static PinInfo output(String name)" ], [ "isInOut", "de.neemann.digital.core.element", "PinDescription", "public static boolean isInOut(Direction a, Direction b)" ], [ "isInOut", "de.neemann.digital.core.element", "Direction", "public static boolean isInOut(Direction a, Direction b)" ], [ "getKeyByName", "de.neemann.digital.core.element", "Keys", "public static Key getKeyByName(String name)" ], [ "getKeys", "de.neemann.digital.core.element", "Keys", "public static Iterable<Key> getKeys()" ], [ "combine", "de.neemann.digital.core.element", "ImmutableList", "public static <T> ImmutableList<T> combine(ImmutableList<T> a, ImmutableList<T> b)" ], [ "createSwitchModel", "de.neemann.digital.core.switching", "PlainSwitch", "static SwitchModel createSwitchModel(ObservableValue input1, ObservableValue input2, ObservableValue output1, ObservableValue output2) throws NodeException" ], [ "createOneToN", "de.neemann.digital.core.wiring", "Splitter", "public static Splitter createOneToN(int bits)" ], [ "createNToOne", "de.neemann.digital.core.wiring", "Splitter", "public static Splitter createNToOne(int bits)" ], [ "ovs", "de.neemann.digital.core", "ObservableValues", "public static ObservableValues ovs(ObservableValue... items)" ], [ "toShortHex", "de.neemann.digital.core", "IntFormat", "public static String toShortHex(long value)" ], [ "up", "de.neemann.digital.core", "Bits", "public static long up(long val, int bits)" ], [ "down", "de.neemann.digital.core", "Bits", "public static long down(long val, int bits)" ], [ "mask", "de.neemann.digital.core", "Bits", "public static long mask(int bits)" ], [ "signedFlagMask", "de.neemann.digital.core", "Bits", "public static long signedFlagMask(int bits)" ], [ "isNegative", "de.neemann.digital.core", "Bits", "public static boolean isNegative(long value, int bits)" ], [ "signExtend", "de.neemann.digital.core", "Bits", "public static long signExtend(long value, int bits)" ], [ "binLn2", "de.neemann.digital.core", "Bits", "public static int binLn2(long b)" ], [ "removeBitFromValue", "de.neemann.digital.core", "Bits", "public static int removeBitFromValue(int value, int bit)" ], [ "decode", "de.neemann.digital.core", "Bits", "public static long decode(String str) throws NumberFormatException" ], [ "decode", "de.neemann.digital.core", "Bits", "public static long decode(String str, boolean parseFloats) throws NumberFormatException" ], [ "decode", "de.neemann.digital.core", "Bits", "public static long decode(String str, int p, int radix) throws NumberFormatException" ], [ "getCode", "de.neemann.digital.core.extern", "Application", "static String getCode(ElementAttributes attr, File root) throws IOException" ], [ "readCode", "de.neemann.digital.core.extern", "Application", "static String readCode(File file) throws IOException" ], [ "create", "de.neemann.digital.core.extern", "Application", "static Application create(Type type, ElementAttributes attr)" ], [ "start", "de.neemann.digital.core.extern", "ProcessStarter", "public static String start(File dir, String... args) throws IOException" ], [ "joinStrings", "de.neemann.digital.core.extern", "ProcessStarter", "public static String joinStrings(String... strings)" ], [ "fromString", "de.neemann.digital.cli.cli", "Argument", "public static Object fromString(String val, Object defValue) throws CLIException" ], [ "fac", "de.neemann.digital.fsm", "Optimizer", "public static long fac(int n)" ], [ "getTimeComplexity", "de.neemann.digital.fsm", "Optimizer", "public static long getTimeComplexity(FSM fsm)" ], [ "calcComplexity", "de.neemann.digital.fsm", "Optimizer", "static int calcComplexity(FSM fsm, boolean out) throws ExpressionException, FiniteStateMachineException, FormatterException" ], [ "blink", "de.neemann.digital.fsm", "FSMDemos", "public static FSM blink()" ], [ "rotDecoder", "de.neemann.digital.fsm", "FSMDemos", "public static FSM rotDecoder()" ], [ "counter", "de.neemann.digital.fsm", "FSMDemos", "public static FSM counter(int n)" ], [ "trafficLight", "de.neemann.digital.fsm", "FSMDemos", "public static FSM trafficLight()" ], [ "trafficLightMedwedew", "de.neemann.digital.fsm", "FSMDemos", "public static FSM trafficLightMedwedew()" ], [ "selCounter", "de.neemann.digital.fsm", "FSMDemos", "public static FSM selCounter()" ], [ "stepper", "de.neemann.digital.fsm", "FSMDemos", "public static FSM stepper()" ], [ "stepperMedwedew", "de.neemann.digital.fsm", "FSMDemos", "public static FSM stepperMedwedew()" ], [ "getxStream", "de.neemann.digital.fsm", "FSM", "public static XStream getxStream()" ], [ "loadFSM", "de.neemann.digital.fsm", "FSM", "public static FSM loadFSM(File filename) throws IOException" ], [ "loadFSM", "de.neemann.digital.fsm", "FSM", "public static FSM loadFSM(InputStream in) throws IOException" ], [ "get", "de.neemann.digital.lang", "Lang", "public static String get(String key, Object... params)" ], [ "getNull", "de.neemann.digital.lang", "Lang", "public static String getNull(String key, Object... params)" ], [ "getBundle", "de.neemann.digital.lang", "Lang", "public static Bundle getBundle()" ], [ "currentLanguage", "de.neemann.digital.lang", "Lang", "public static Language currentLanguage()" ], [ "evalMultilingualContent", "de.neemann.digital.lang", "Lang", "public static String evalMultilingualContent(String text)" ], [ "evalMultilingualContent", "de.neemann.digital.lang", "Lang", "static String evalMultilingualContent(String text, Language currentLanguage)" ], [ "lowest", "de.neemann.digital.testing.parser", "OperatorPrecedence", "public static OperatorPrecedence lowest()" ], [ "addOne", "de.neemann.digital.analyse", "ModelAnalyser", "public static String addOne(String name)" ], [ "readCSV", "de.neemann.digital.analyse", "CSVImporter", "public static TruthTable readCSV(File file) throws IOException" ], [ "readCSV", "de.neemann.digital.analyse", "CSVImporter", "public static TruthTable readCSV(String csv) throws IOException" ], [ "readCSV", "de.neemann.digital.analyse", "CSVImporter", "public static TruthTable readCSV(Reader csv) throws IOException" ], [ "createDoubledValues", "de.neemann.digital.analyse.quinemc", "BoolTableByteArray", "public static BoolTableByteArray createDoubledValues(BoolTable values)" ], [ "simplify", "de.neemann.digital.analyse.quinemc", "QuineMcCluskey", "public static Expression simplify(Expression expression) throws ExpressionException" ], [ "addAnd", "de.neemann.digital.analyse.quinemc", "QuineMcCluskey", "public static Expression addAnd(Expression e, Iterable<TableRow> rows, List<Variable> variables)" ], [ "value", "de.neemann.digital.analyse.quinemc", "ThreeStateValue", "public static ThreeStateValue value(boolean bool)" ], [ "value", "de.neemann.digital.analyse.quinemc", "ThreeStateValue", "public static ThreeStateValue value(int value)" ], [ "doImplicitTypeCasts", "de.neemann.digital.analyse", "SubstituteLibrary", "static Object doImplicitTypeCasts(Class<?> expectedClass, Object val)" ], [ "or", "de.neemann.digital.analyse.expression", "Operation", "public static Expression or(Iterable<Expression> exp)" ], [ "or", "de.neemann.digital.analyse.expression", "Operation", "public static Expression or(Expression... exp)" ], [ "xor", "de.neemann.digital.analyse.expression", "Operation", "public static Expression xor(Expression a, Expression b)" ], [ "orNoMerge", "de.neemann.digital.analyse.expression", "Operation", "public static Expression orNoMerge(Expression... exp)" ], [ "and", "de.neemann.digital.analyse.expression", "Operation", "public static Expression and(Iterable<Expression> exp)" ], [ "and", "de.neemann.digital.analyse.expression", "Operation", "public static Expression and(Expression... exp)" ], [ "andNoMerge", "de.neemann.digital.analyse.expression", "Operation", "public static Expression andNoMerge(Expression... exp)" ], [ "modifyExpression", "de.neemann.digital.analyse.expression.modify", "ExpressionModifier", "static Expression modifyExpression(Expression expression, ExpressionModifier modifier)" ], [ "modifyExpression", "de.neemann.digital.analyse.expression.modify", "ExpressionModifier", "static Expression modifyExpression(Expression expression, ExpressionModifier... modifiers)" ], [ "v", "de.neemann.digital.analyse.expression", "Variable", "public static Variable v(String name)" ], [ "vars", "de.neemann.digital.analyse.expression", "Variable", "public static ArrayList<Variable> vars(int n)" ], [ "vars", "de.neemann.digital.analyse.expression", "Variable", "public static ArrayList<Variable> vars(String... names)" ], [ "isVar", "de.neemann.digital.analyse.expression", "Variable", "public static boolean isVar(Expression e)" ], [ "isVarOrNotVar", "de.neemann.digital.analyse.expression", "Variable", "public static boolean isVarOrNotVar(Expression e)" ], [ "getDefaultFormat", "de.neemann.digital.analyse.expression.format", "FormatToExpression", "public static FormatToExpression getDefaultFormat()" ], [ "defaultFormat", "de.neemann.digital.analyse.expression.format", "FormatToExpression", "public static String defaultFormat(Expression exp)" ], [ "not", "de.neemann.digital.analyse.expression", "Not", "public static Expression not(Expression a)" ], [ "readFromFile", "de.neemann.digital.analyse", "TruthTable", "public static TruthTable readFromFile(File filename) throws IOException" ], [ "create", "de.neemann.digital.analyse", "SplitPinString", "public static SplitPinString create(Signal s)" ], [ "create", "de.neemann.digital.analyse", "SplitPinString", "public static SplitPinString create(String pinStr)" ], [ "checkSuffix", "de.neemann.digital.gui", "SaveAsHelper", "public static File checkSuffix(File filename, String suffix)" ], [ "addF1Traversal", "de.neemann.digital.gui.components", "EditorFactory", "public static <TC extends JTextComponent> TC addF1Traversal(TC text)" ], [ "createUndoManager", "de.neemann.digital.gui.components", "EditorFactory", "public static UndoManager createUndoManager(JTextComponent text)" ], [ "create", "de.neemann.digital.gui.components.modification", "ModifyInsertWires", "public static Modification<Circuit> create(List<Wire> newWires)" ], [ "getToolTipName", "de.neemann.digital.gui.components.modification", "ModificationOfVisualElement", "public static String getToolTipName(VisualElement ve)" ], [ "getTerminal", "de.neemann.digital.gui.components.terminal", "TerminalDialog", "static TerminalInterface getTerminal(Model model, ElementAttributes attr)" ], [ "createList", "de.neemann.digital.gui.components", "CircuitTransferable", "public static ArrayList<Movable> createList(Object data, ShapeFactory shapeFactory) throws IOException" ], [ "createURLStreamHandlerFactory", "de.neemann.digital.gui.components", "ElementHelpDialog", "public static URLStreamHandlerFactory createURLStreamHandlerFactory()" ], [ "getImage", "de.neemann.digital.gui.components", "ElementHelpDialog", "static BufferedImage getImage(String name)" ], [ "getImage", "de.neemann.digital.gui.components", "MyURLStreamHandlerFactory", "static BufferedImage getImage(String name)" ], [ "isSequentialVar", "de.neemann.digital.gui.components.table", "ExpressionListenerJK", "public static String isSequentialVar(String name)" ], [ "getAttrList", "de.neemann.digital.gui.components", "CircuitComponent", "public static ArrayList<Key> getAttrList()" ], [ "raster", "de.neemann.digital.gui.components", "CircuitComponent", "public static Vector raster(Vector pos)" ], [ "createLiveDialog", "de.neemann.digital.gui.components.data", "GraphDialog", "public static GraphDialog createLiveDialog(JFrame owner, Model model, boolean microStep, List<String> ordering, int sampleSize)" ], [ "createColumnsInfo", "de.neemann.digital.gui.components.data", "GraphDialog", "static ValueTable.ColumnInfo[] createColumnsInfo(ArrayList<Signal> signals)" ], [ "create", "de.neemann.digital.gui.components", "CopiedElementLabelRenamer", "static LabelInstance create(VisualElement ve)" ], [ "create", "de.neemann.digital.gui.components", "CopiedElementLabelRenamer", "static LabelInstance create(String elementName, String fullLabel)" ], [ "create", "de.neemann.digital.gui.components", "LabelInstance", "static LabelInstance create(VisualElement ve)" ], [ "create", "de.neemann.digital.gui.components", "LabelInstance", "static LabelInstance create(String elementName, String fullLabel)" ], [ "isExperimentalMode", "de.neemann.digital.gui", "Main", "public static boolean isExperimentalMode()" ], [ "getInstance", "de.neemann.digital.gui", "WindowManager", "public static WindowManager getInstance()" ], [ "getInstance", "de.neemann.digital.gui", "Settings", "public static Settings getInstance()" ], [ "getRange", "de.neemann.digital.hdl.verilog2", "VerilogCreator", "public static String getRange(int bits)" ], [ "getType", "de.neemann.digital.hdl.verilog2", "VerilogCreator", "public static String getType(HDLPort.Direction def, HDLPort.Direction dir, int bits)" ], [ "value", "de.neemann.digital.hdl.verilog2", "VerilogCreator", "public static String value(ExprConstant con)" ], [ "value", "de.neemann.digital.hdl.verilog2", "VerilogCreator", "public static String value(long val, int bits)" ], [ "neededFileName", "de.neemann.digital.hdl.verilog2.lib", "VerilogTemplate", "public static String neededFileName(String elementName)" ], [ "createFromJar", "de.neemann.digital.hdl.hgs", "Parser", "public static Statement createFromJar(String path, ClassLoader cl) throws IOException, ParserException" ], [ "createFromJarStatic", "de.neemann.digital.hdl.hgs", "Parser", "public static Statement createFromJarStatic(String path)" ], [ "isWhiteSpace", "de.neemann.digital.hdl.hgs", "Tokenizer", "public static boolean isWhiteSpace(int c)" ], [ "toLong", "de.neemann.digital.hdl.hgs", "Value", "public static long toLong(Object value) throws HGSEvalException" ], [ "toDouble", "de.neemann.digital.hdl.hgs", "Value", "public static double toDouble(Object value) throws HGSEvalException" ], [ "toInt", "de.neemann.digital.hdl.hgs", "Value", "public static int toInt(Object value) throws HGSEvalException" ], [ "toBool", "de.neemann.digital.hdl.hgs", "Value", "public static boolean toBool(Object value) throws HGSEvalException" ], [ "toString", "de.neemann.digital.hdl.hgs", "Value", "public static String toString(Object value) throws HGSEvalException" ], [ "toArray", "de.neemann.digital.hdl.hgs", "Value", "public static HGSArray toArray(Object value) throws HGSEvalException" ], [ "toMap", "de.neemann.digital.hdl.hgs", "Value", "public static HGSMap toMap(Object value) throws HGSEvalException" ], [ "equals", "de.neemann.digital.hdl.hgs", "Value", "public static boolean equals(Object a, Object b)" ], [ "add", "de.neemann.digital.hdl.hgs", "Value", "public static Object add(Object a, Object b) throws HGSEvalException" ], [ "sub", "de.neemann.digital.hdl.hgs", "Value", "public static Object sub(Object a, Object b) throws HGSEvalException" ], [ "mul", "de.neemann.digital.hdl.hgs", "Value", "public static Object mul(Object a, Object b) throws HGSEvalException" ], [ "div", "de.neemann.digital.hdl.hgs", "Value", "public static Object div(Object a, Object b) throws HGSEvalException" ], [ "or", "de.neemann.digital.hdl.hgs", "Value", "public static Object or(Object a, Object b) throws HGSEvalException" ], [ "xor", "de.neemann.digital.hdl.hgs", "Value", "public static Object xor(Object a, Object b) throws HGSEvalException" ], [ "and", "de.neemann.digital.hdl.hgs", "Value", "public static Object and(Object a, Object b) throws HGSEvalException" ], [ "not", "de.neemann.digital.hdl.hgs", "Value", "public static Object not(Object value) throws HGSEvalException" ], [ "neg", "de.neemann.digital.hdl.hgs", "Value", "public static Object neg(Object value) throws HGSEvalException" ], [ "less", "de.neemann.digital.hdl.hgs", "Value", "public static boolean less(Object a, Object b) throws HGSEvalException" ], [ "lessEqual", "de.neemann.digital.hdl.hgs", "Value", "public static boolean lessEqual(Object a, Object b) throws HGSEvalException" ], [ "trimRight", "de.neemann.digital.hdl.hgs", "Value", "public static String trimRight(String str)" ], [ "trimLeft", "de.neemann.digital.hdl.hgs", "Value", "public static String trimLeft(String str)" ], [ "getType", "de.neemann.digital.hdl.vhdl2", "VHDLCreator", "public static String getType(int bits)" ], [ "value", "de.neemann.digital.hdl.vhdl2", "VHDLCreator", "public static String value(ExprConstant con)" ], [ "value", "de.neemann.digital.hdl.vhdl2", "VHDLCreator", "public static String value(long val, int bits)" ], [ "isTemplate", "de.neemann.digital.hdl.vhdl2.entities", "VHDLTemplate", "public static boolean isTemplate(ElementTypeDescription etd)" ], [ "neededFileName", "de.neemann.digital.hdl.vhdl2.entities", "VHDLTemplate", "public static String neededFileName(String elementName)" ], [ "zero", "de.neemann.digital.hdl.vhdl2.entities", "VHDLTemplateFunctions", "public static String zero(long bits)" ], [ "value", "de.neemann.digital.hdl.vhdl2.entities", "VHDLTemplateFunctions", "public static String value(long val, long bits)" ], [ "genericType", "de.neemann.digital.hdl.vhdl2.entities", "VHDLTemplateFunctions", "public static String genericType(long n)" ], [ "type", "de.neemann.digital.hdl.vhdl2.entities", "VHDLTemplateFunctions", "public static String type(long n)" ], [ "isVar", "de.neemann.digital.hdl.model2.expression", "Expression", "static boolean isVar(Expression expr, HDLNet net)" ], [ "isConstant", "de.neemann.digital.hdl.model2.expression", "ExprConstant", "public static ExprConstant isConstant(HDLNode node)" ], [ "getHighZ", "de.neemann.digital.data", "Value", "public static Value getHighZ()" ], [ "calcBackOffset", "de.neemann.digital.builder.circuit", "FragmentExpression", "static int calcBackOffset(int size, int i)" ], [ "isXNor", "de.neemann.digital.builder.circuit", "CircuitBuilder", "static boolean isXNor(long[] data)" ], [ "isXor", "de.neemann.digital.builder.circuit", "CircuitBuilder", "static boolean isXor(long[] data)" ], [ "getLibPath", "de.neemann.digital.draw.library", "ElementLibrary", "public static File getLibPath()" ], [ "createCustomDescription", "de.neemann.digital.draw.library", "ElementLibrary", "public static ElementTypeDescriptionCustom createCustomDescription(File file, Circuit circuit, ElementLibrary library) throws PinException" ], [ "createDeclarationDefault", "de.neemann.digital.draw.library", "ElementTypeDescriptionCustom", "public static String createDeclarationDefault(Circuit circuit) throws NodeException" ], [ "getInstance", "de.neemann.digital.draw.library", "NumStringComparator", "public static NumStringComparator getInstance()" ], [ "compareStr", "de.neemann.digital.draw.library", "NumStringComparator", "public static int compareStr(String a, String b)" ], [ "createPins", "de.neemann.digital.draw.shapes", "GenericShape", "public static Pins createPins(PinDescriptions inputs, PinDescriptions outputs, boolean invert, InverterConfig ic, boolean wideShape)" ], [ "readStyle", "de.neemann.digital.draw.shapes.custom.svg", "Context", "static Context readStyle(Context context, String style) throws SvgException" ], [ "getOutSize", "de.neemann.digital.draw.shapes", "OutputShape", "public static int getOutSize(boolean small)" ], [ "getOutStyle", "de.neemann.digital.draw.shapes", "OutputShape", "public static Style getOutStyle(boolean small)" ], [ "getOutRad", "de.neemann.digital.draw.shapes", "OutputShape", "public static Vector getOutRad(boolean small)" ], [ "createTransform", "de.neemann.digital.draw.shapes", "SevenShape", "static Transform createTransform(int size)" ], [ "getxStream", "de.neemann.digital.draw.elements", "Circuit", "public static XStream getxStream()" ], [ "loadCircuit", "de.neemann.digital.draw.elements", "Circuit", "public static Circuit loadCircuit(File filename, ShapeFactory shapeFactory) throws IOException" ], [ "loadCircuit", "de.neemann.digital.draw.elements", "Circuit", "public static Circuit loadCircuit(InputStream in, ShapeFactory shapeFactory) throws IOException" ], [ "fixGenerics", "de.neemann.digital.draw.model", "ModelCreator", "public static Circuit fixGenerics(Circuit circuit, LibraryInterface library) throws NodeException, ElementNotFoundException" ], [ "createFromPath", "de.neemann.digital.draw.graphics", "Polygon", "public static Polygon createFromPath(String path)" ], [ "vec", "de.neemann.digital.draw.graphics", "Vector", "public static Vector vec(int x, int y)" ], [ "min", "de.neemann.digital.draw.graphics", "Vector", "public static Vector min(VectorInterface... p)" ], [ "max", "de.neemann.digital.draw.graphics", "Vector", "public static Vector max(VectorInterface... p)" ], [ "width", "de.neemann.digital.draw.graphics", "Vector", "public static Vector width(VectorInterface... p)" ], [ "add", "de.neemann.digital.draw.graphics", "Vector", "public static List<Vector> add(List<Vector> vectors, Vector offs)" ], [ "getInstance", "de.neemann.digital.draw.graphics", "SVGSettings", "public static SVGSettings getInstance()" ], [ "createKeyList", "de.neemann.digital.draw.graphics", "SVGSettings", "public static List<Key> createKeyList()" ], [ "mul", "de.neemann.digital.draw.graphics", "Transform", "static Transform mul(Transform t1, Transform t2)" ], [ "rotate", "de.neemann.digital.draw.graphics", "TransformMatrix", "public static TransformMatrix rotate(double w)" ], [ "scale", "de.neemann.digital.draw.graphics", "TransformMatrix", "public static TransformMatrix scale(float sx, float sy)" ], [ "getTextWidth", "de.neemann.digital.draw.graphics", "GraphicMinMax", "public static int getTextWidth(String text, Style style)" ], [ "getSelected", "de.neemann.digital.draw.graphics", "ColorScheme", "public static ColorScheme getSelected()" ], [ "getWireStyle", "de.neemann.digital.draw.graphics", "Style", "public static Style getWireStyle(Value value)" ], [ "format", "de.neemann.digital.draw.graphics.text.formatter", "PlainTextFormatter", "public static String format(Text text)" ], [ "format", "de.neemann.digital.draw.graphics.text.formatter", "PlainTextFormatter", "public static String format(Text text, FormatToExpression format)" ], [ "format", "de.neemann.digital.draw.graphics.text.formatter", "SVGFormatter", "public static String format(Text text)" ], [ "createFragment", "de.neemann.digital.draw.graphics.text.formatter", "GraphicsFormatter", "public static Fragment createFragment(Graphics2D gr, String text)" ], [ "createFragment", "de.neemann.digital.draw.graphics.text.formatter", "GraphicsFormatter", "public static Fragment createFragment(Graphics2D gr, Expression expression) throws FormatterException" ], [ "createFragment", "de.neemann.digital.draw.graphics.text.formatter", "GraphicsFormatter", "public static Fragment createFragment(FontSizer sizer, Font font, String text)" ], [ "format", "de.neemann.digital.draw.graphics.text.formatter", "LaTeXFormatter", "public static String format(Expression exp)" ], [ "format", "de.neemann.digital.draw.graphics.text.formatter", "LaTeXFormatter", "public static String format(Text text)" ], [ "math", "de.neemann.digital.draw.graphics.text.text", "Decorate", "public static Text math(Text t)" ], [ "escapeXML", "de.neemann.digital.draw.graphics", "GraphicSVG", "public static String escapeXML(String text)" ], [ "getMirrorYOrientation", "de.neemann.digital.draw.graphics", "GraphicSwing", "static int getMirrorYOrientation(Orientation orientation, VectorInterface p1, VectorInterface p2, VectorInterface p3)" ], [ "load", "de.neemann.digital.toolchain", "Configuration", "public static Configuration load(File file) throws IOException" ], [ "load", "de.neemann.digital.toolchain", "Configuration", "public static Configuration load(InputStream in) throws IOException" ] ],
  "tokensProjectClassesNonPrivateStaticAttributes" : [ [ "UNKNOWN", "de.neemann.gui", "InfoDialog", "public static final String UNKNOWN = \"unknown\";" ], [ "DESCRIPTION", "de.neemann.digital.core.pld", "PullDown", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"PullDown\", PullDown.class).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS);" ], [ "DESCRIPTION", "de.neemann.digital.core.pld", "Diode", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Diode.class).addAttribute(Keys.ROTATE).addAttribute(Keys.BLOWN);" ], [ "DESCRIPTION", "de.neemann.digital.core.pld", "DiodeBackward", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(DiodeBackward.class, input(\"in\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BLOWN);" ], [ "DESCRIPTION", "de.neemann.digital.core.pld", "PullUp", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"PullUp\", PullUp.class).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS);" ], [ "DESCRIPTION", "de.neemann.digital.core.pld", "DiodeForward", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(DiodeForward.class, input(\"in\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BLOWN);" ], [ "DESCRIPTION", "de.neemann.digital.core.memory", "RAMSinglePort", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(RAMSinglePort.class, input(\"A\"), input(\"str\"), input(\"C\").setClock(), input(\"ld\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.ADDR_BITS).addAttribute(Keys.INT_FORMAT).addAttribute(Keys.IS_PROGRAM_MEMORY).addAttribute(Keys.LABEL);" ], [ "DESCRIPTION", "de.neemann.digital.core.memory", "ROMDualPort", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(ROMDualPort.class, input(\"A1\"), input(\"s1\"), input(\"A2\"), input(\"s2\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.ADDR_BITS).addAttribute(Keys.LABEL).addAttribute(Keys.DATA).addAttribute(Keys.INT_FORMAT).addAttribute(Keys.IS_PROGRAM_MEMORY).addAttribute(Keys.AUTO_RELOAD_ROM).addAttribute(Keys.LAST_DATA_FILE).addAttribute(Keys.BIG_ENDIAN);" ], [ "DESCRIPTION", "de.neemann.digital.core.memory", "RAMDualAccess", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(RAMDualAccess.class, input(\"str\"), input(\"C\").setClock(), input(\"ld\"), input(\"1A\"), input(\"1Din\"), input(\"2A\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.ADDR_BITS).addAttribute(Keys.IS_PROGRAM_MEMORY).addAttribute(Keys.LABEL).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.memory", "CounterPreset", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(CounterPreset.class, input(\"en\"), input(\"C\").setClock(), input(\"dir\"), input(\"in\"), input(\"ld\"), input(\"clr\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.MAX_VALUE).addAttribute(Keys.INVERTER_CONFIG).addAttribute(Keys.LABEL).addAttribute(Keys.VALUE_IS_PROBE).addAttribute(Keys.IS_PROGRAM_COUNTER).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.memory", "RAMDualPort", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(RAMDualPort.class, input(\"A\"), input(\"Din\"), input(\"str\"), input(\"C\").setClock(), input(\"ld\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.ADDR_BITS).addAttribute(Keys.INT_FORMAT).addAttribute(Keys.IS_PROGRAM_MEMORY).addAttribute(Keys.LABEL).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.memory", "Register", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Register.class, input(\"D\"), input(\"C\").setClock(), input(\"en\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).addAttribute(Keys.INVERTER_CONFIG).addAttribute(Keys.IS_PROGRAM_COUNTER).addAttribute(Keys.VALUE_IS_PROBE).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.memory", "LookUpTable", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(LookUpTable.class) {\n\n    @Override\n    public PinDescriptions getInputDescription(ElementAttributes elementAttributes) {\n        int size = elementAttributes.get(Keys.INPUT_COUNT);\n        PinDescription[] names = new PinDescription[size];\n        for (int i = 0; i < size; i++) names[i] = input(Integer.toString(i), Lang.get(\"elem_LookUpTable_pin_in\", i));\n        return new PinDescriptions(names);\n    }\n}.addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.LUT_INPUT_COUNT).addAttribute(Keys.LABEL).addAttribute(Keys.DATA).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.memory", "BlockRAMDualPort", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(BlockRAMDualPort.class, input(\"A\"), input(\"Din\"), input(\"str\"), input(\"C\").setClock()).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.ADDR_BITS).addAttribute(Keys.IS_PROGRAM_MEMORY).addAttribute(Keys.LABEL).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.memory", "Counter", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Counter.class, input(\"en\"), input(\"C\").setClock(), input(\"clr\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.INVERTER_CONFIG).addAttribute(Keys.LABEL).addAttribute(Keys.VALUE_IS_PROBE).addAttribute(Keys.IS_PROGRAM_COUNTER).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.memory", "EEPROM", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(EEPROM.class, input(\"A\"), input(\"CS\"), input(\"WE\").setClock(), input(\"OE\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.ADDR_BITS).addAttribute(Keys.LABEL).addAttribute(Keys.INT_FORMAT).addAttribute(Keys.IS_PROGRAM_MEMORY).addAttribute(Keys.INVERTER_CONFIG).addAttribute(Keys.DATA);" ], [ "DESCRIPTION", "de.neemann.digital.core.memory", "RAMAsync", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(RAMAsync.class, input(\"A\"), input(\"D\"), input(\"we\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.ADDR_BITS).addAttribute(Keys.IS_PROGRAM_MEMORY).addAttribute(Keys.INVERTER_CONFIG).addAttribute(Keys.LABEL).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.memory", "ROM", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(ROM.class, input(\"A\"), input(\"sel\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.ADDR_BITS).addAttribute(Keys.LABEL).addAttribute(Keys.DATA).addAttribute(Keys.INT_FORMAT).addAttribute(Keys.IS_PROGRAM_MEMORY).addAttribute(Keys.AUTO_RELOAD_ROM).addAttribute(Keys.LAST_DATA_FILE).addAttribute(Keys.BIG_ENDIAN).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.memory", "EEPROMDualPort", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(EEPROMDualPort.class, input(\"A\"), input(\"Din\"), input(\"str\"), input(\"C\").setClock(), input(\"ld\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.ADDR_BITS).addAttribute(Keys.INT_FORMAT).addAttribute(Keys.IS_PROGRAM_MEMORY).addAttribute(Keys.LABEL).addAttribute(Keys.DATA);" ], [ "DESCRIPTION", "de.neemann.digital.core.memory", "RAMSinglePortSel", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(RAMSinglePortSel.class, input(\"A\"), input(\"CS\"), input(\"WE\"), input(\"OE\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.ADDR_BITS).addAttribute(Keys.LABEL).addAttribute(Keys.IS_PROGRAM_MEMORY).addAttribute(Keys.INVERTER_CONFIG);" ], [ "DESCRIPTION", "de.neemann.digital.core.memory", "RegisterFile", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(RegisterFile.class, input(\"Din\"), input(\"we\"), input(\"Rw\"), input(\"C\").setClock(), input(\"Ra\"), input(\"Rb\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.ADDR_BITS).addAttribute(Keys.LABEL).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.io", "MIDI", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(MIDI.class) {\n\n    public PinDescriptions getInputDescription(ElementAttributes elementAttributes) throws NodeException {\n        if (elementAttributes.get(Keys.MIDI_PROG_CHANGE))\n            return new PinDescriptions(input(\"N\"), input(\"V\"), input(\"OnOff\"), input(\"PC\"), input(\"en\"), input(\"C\").setClock()).setLangKey(getPinLangKey());\n        else\n            return new PinDescriptions(input(\"N\"), input(\"V\"), input(\"OnOff\"), input(\"en\"), input(\"C\").setClock()).setLangKey(getPinLangKey());\n    }\n}.addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.MIDI_CHANNEL).addAttribute(Keys.MIDI_INSTRUMENT).addAttribute(Keys.MIDI_PROG_CHANGE);" ], [ "DESCRIPTION", "de.neemann.digital.core.io", "RGBLED", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(RGBLED.class, input(\"R\"), input(\"G\"), input(\"B\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).addAttribute(Keys.LED_SIZE);" ], [ "DESCRIPTION", "de.neemann.digital.core.io", "Out", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"Out\", attributes -> new Out(attributes).enforceName(), input(\"in\")) {\n\n    @Override\n    public String getDescription(ElementAttributes elementAttributes) {\n        String d = Lang.evalMultilingualContent(elementAttributes.get(Keys.DESCRIPTION));\n        if (d.length() > 0)\n            return d;\n        else\n            return super.getDescription(elementAttributes);\n    }\n}.addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).addAttribute(Keys.DESCRIPTION).addAttribute(Keys.INT_FORMAT).addAttribute(Keys.PINNUMBER).addAttribute(Keys.ADD_VALUE_TO_GRAPH).addAttribute(Keys.IN_OUT_SMALL).supportsHDL();" ], [ "LEDDESCRIPTION", "de.neemann.digital.core.io", "Out", "public static final ElementTypeDescription LEDDESCRIPTION = new ElementTypeDescription(\"LED\", Out.class, input(\"in\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.LED_SIZE).addAttribute(Keys.COLOR);" ], [ "POLARITYAWARELEDDESCRIPTION", "de.neemann.digital.core.io", "Out", "public static final ElementTypeDescription POLARITYAWARELEDDESCRIPTION = new ElementTypeDescription(\"PolarityAwareLED\", attributes -> new Out(1, 1), input(\"A\"), input(\"C\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.COLOR);" ], [ "SEVENDESCRIPTION", "de.neemann.digital.core.io", "Out", "public static final ElementTypeDescription SEVENDESCRIPTION = new SevenSegTypeDescription();" ], [ "SEVENHEXDESCRIPTION", "de.neemann.digital.core.io", "Out", "public static final ElementTypeDescription SEVENHEXDESCRIPTION = new ElementTypeDescription(\"Seven-Seg-Hex\", attributes -> new Out(4, 1), input(\"d\"), input(\"dp\")).addAttribute(Keys.COLOR).addAttribute(Keys.SEVEN_SEG_SIZE);" ], [ "SIXTEENDESCRIPTION", "de.neemann.digital.core.io", "Out", "public static final ElementTypeDescription SIXTEENDESCRIPTION = new ElementTypeDescription(\"SixteenSeg\", attributes -> new Out(16, 1), input(\"led\"), input(\"dp\")).addAttribute(Keys.COLOR).addAttribute(Keys.SEVEN_SEG_SIZE);" ], [ "DESCRIPTION", "de.neemann.digital.core.io", "RotEncoder", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(RotEncoder.class).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL);" ], [ "DESCRIPTION", "de.neemann.digital.core.io", "PinControl", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(PinControl.class, input(\"wr\"), input(\"oe\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.MIRROR).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.io", "DipSwitch", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(DipSwitch.class) {\n\n    @Override\n    public String getDescription(ElementAttributes elementAttributes) {\n        String d = Lang.evalMultilingualContent(elementAttributes.get(Keys.DESCRIPTION));\n        if (d.length() > 0)\n            return d;\n        else\n            return super.getDescription(elementAttributes);\n    }\n}.addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.DIP_DEFAULT).addAttribute(Keys.DESCRIPTION);" ], [ "DESCRIPTION", "de.neemann.digital.core.io", "LightBulb", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(LightBulb.class, input(\"A\"), input(\"B\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.COLOR);" ], [ "DESCRIPTION", "de.neemann.digital.core.io", "Probe", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"Probe\", Probe.class, input(\"in\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.INT_FORMAT).addAttribute(Keys.PROBE_MODE).addAttribute(Keys.ADD_VALUE_TO_GRAPH);" ], [ "DESCRIPTION", "de.neemann.digital.core.io", "Button", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Button.class).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.ACTIVE_LOW).addAttribute(Keys.MAP_TO_KEY).addAttribute(Keys.ADD_VALUE_TO_GRAPH);" ], [ "DESCRIPTION", "de.neemann.digital.core.io", "ButtonLED", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(ButtonLED.class, input(\"in\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.ACTIVE_LOW).addAttribute(Keys.MAP_TO_KEY).addAttribute(Keys.COLOR);" ], [ "DESCRIPTION", "de.neemann.digital.core.io", "In", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(In.class) {\n\n    @Override\n    public String getDescription(ElementAttributes elementAttributes) {\n        String d = Lang.evalMultilingualContent(elementAttributes.get(Keys.DESCRIPTION));\n        if (d.length() > 0)\n            return d;\n        else\n            return super.getDescription(elementAttributes);\n    }\n}.addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).addAttribute(Keys.INPUT_DEFAULT).addAttribute(Keys.IS_HIGH_Z).addAttribute(Keys.AVOID_ACTIVE_LOW).addAttribute(Keys.DESCRIPTION).addAttribute(Keys.INT_FORMAT).addAttribute(Keys.PINNUMBER).addAttribute(Keys.ADD_VALUE_TO_GRAPH).addAttribute(Keys.IN_OUT_SMALL).supportsHDL();" ], [ "STEPS", "de.neemann.digital.core.io", "StepperMotorUnipolar", "public static final int STEPS = 72;" ], [ "DESCRIPTION", "de.neemann.digital.core.io", "StepperMotorUnipolar", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(StepperMotorUnipolar.class, input(\"P0\"), input(\"P1\"), input(\"P2\"), input(\"P3\"), input(\"com\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.INVERT_OUTPUT);" ], [ "DESCRIPTION", "de.neemann.digital.core.io", "NotConnected", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(NotConnected.class).addAttribute(Keys.BITS);" ], [ "DESCRIPTION", "de.neemann.digital.core.io", "StepperMotorBipolar", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(StepperMotorBipolar.class, input(\"A+\"), input(\"A-\"), input(\"B+\"), input(\"B-\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.INVERT_OUTPUT);" ], [ "DESCRIPTION", "de.neemann.digital.core.io", "Const", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Const.class).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.VALUE).addAttribute(Keys.INT_FORMAT).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.io", "PowerSupply", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(PowerSupply.class, input(\"VDD\"), input(\"GND\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL);" ], [ "DESCRIPTION", "de.neemann.digital.core.io", "Ground", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Ground.class).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.io", "VDD", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(VDD.class).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).supportsHDL();" ], [ "INSTANCE", "de.neemann.digital.core.io.telnet", "ServerHolder", "public static final ServerHolder INSTANCE = new ServerHolder();" ], [ "DESCRIPTION", "de.neemann.digital.core.io.telnet", "Telnet", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Telnet.class, input(\"in\"), input(\"C\").setClock(), input(\"wr\"), input(\"rd\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.TELNET_ESCAPE).addAttribute(Keys.PORT);" ], [ "BITS", "de.neemann.digital.core.element", "Keys", "public static final Key.KeyBits BITS = new Key.KeyBits(\"Bits\", 1);" ], [ "INPUT_BITS", "de.neemann.digital.core.element", "Keys", "public static final Key.KeyBits INPUT_BITS = new Key.KeyBits(\"inputBits\", 8);" ], [ "OUTPUT_BITS", "de.neemann.digital.core.element", "Keys", "public static final Key.KeyBits OUTPUT_BITS = new Key.KeyBits(\"outputBits\", 16);" ], [ "INPUT_COUNT", "de.neemann.digital.core.element", "Keys", "public static final Key.KeyInteger INPUT_COUNT = new Key.KeyInteger(\"Inputs\", 2).setComboBoxValues(2, 3, 4, 5).setMin(2);" ], [ "LUT_INPUT_COUNT", "de.neemann.digital.core.element", "Keys", "public static final Key.KeyInteger LUT_INPUT_COUNT = new Key.KeyInteger(\"Inputs\", 2).setComboBoxValues(2, 3, 4, 5, 6).setMax(20).setMin(2);" ], [ "MAX_VALUE", "de.neemann.digital.core.element", "Keys", "public static final Key.KeyInteger MAX_VALUE = new Key.KeyInteger(\"maxValue\", 0).setMin(0);" ], [ "DELAY_TIME", "de.neemann.digital.core.element", "Keys", "public static final Key.KeyInteger DELAY_TIME = new Key.KeyInteger(\"delayTime\", 1).setComboBoxValues(1, 2, 3, 4, 5).setMin(1).setMax(20);" ], [ "MONOFLOP_DELAY", "de.neemann.digital.core.element", "Keys", "public static final Key.KeyInteger MONOFLOP_DELAY = new Key.KeyInteger(\"timerDelay\", 1).setMin(1);" ], [ "LABEL", "de.neemann.digital.core.element", "Keys", "public static final Key<String> LABEL = new Key<>(\"Label\", \"\");" ], [ "FONT_SIZE", "de.neemann.digital.core.element", "Keys", "public static final Key<Integer> FONT_SIZE = new Key.KeyInteger(\"textFontSize\", Style.NORMAL.getFontSize()).setComboBoxValues(14, 17, 20, 24, 36, 48, 60).setMin(10).setMax(70);" ], [ "TEXT_ORIENTATION", "de.neemann.digital.core.element", "Keys", "public static final Key<Orientation> TEXT_ORIENTATION = new Key.KeyEnum<>(\"textOrientation\", Orientation.LEFTTOP, Orientation.values()).setSecondary();" ], [ "LED_SIZE", "de.neemann.digital.core.element", "Keys", "public static final Key<Integer> LED_SIZE = new Key.KeyInteger(\"Size\", 1).setComboBoxValues(0, 1, 2, 3, 4, 5).setMin(0).allowGroupEdit().setSecondary();" ], [ "SEVEN_SEG_SIZE", "de.neemann.digital.core.element", "Keys", "public static final Key<Integer> SEVEN_SEG_SIZE = new Key.KeyInteger(\"segSize\", 2).setComboBoxValues(0, 1, 2, 3, 4, 5).setMin(0).allowGroupEdit().useTranslationOf(LED_SIZE);" ], [ "VALUE", "de.neemann.digital.core.element", "Keys", "public static final Key<Long> VALUE = new Key<>(\"Value\", 1L).setAdaptiveIntFormat().allowGroupEdit();" ], [ "DEFAULT", "de.neemann.digital.core.element", "Keys", "public static final Key<Long> DEFAULT = new Key<>(\"Default\", 0L).allowGroupEdit().setSecondary();" ], [ "INPUT_DEFAULT", "de.neemann.digital.core.element", "Keys", "public static final Key<InValue> INPUT_DEFAULT = new Key<>(\"InDefault\", new InValue(0)).setAdaptiveIntFormat().allowGroupEdit().setSecondary();" ], [ "DIP_DEFAULT", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> DIP_DEFAULT = new Key<>(\"dipDefault\", false).allowGroupEdit().setSecondary();" ], [ "COLOR", "de.neemann.digital.core.element", "Keys", "public static final Key<java.awt.Color> COLOR = new Key<>(\"Color\", java.awt.Color.RED).allowGroupEdit();" ], [ "INPUT_SPLIT", "de.neemann.digital.core.element", "Keys", "public static final Key<String> INPUT_SPLIT = new Key<>(\"Input Splitting\", \"4,4\");" ], [ "OUTPUT_SPLIT", "de.neemann.digital.core.element", "Keys", "public static final Key<String> OUTPUT_SPLIT = new Key<>(\"Output Splitting\", \"8\");" ], [ "SPLITTER_SPREADING", "de.neemann.digital.core.element", "Keys", "public static final Key<Integer> SPLITTER_SPREADING = new Key.KeyInteger(\"splitterSpreading\", 1).setComboBoxValues(1, 2, 3, 4).setMin(1).setMax(20).setSecondary();" ], [ "IN_OUT_SMALL", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> IN_OUT_SMALL = new Key<>(\"small\", false).allowGroupEdit().setSecondary();" ], [ "RUN_AT_REAL_TIME", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> RUN_AT_REAL_TIME = new Key<>(\"runRealTime\", false);" ], [ "INVERT_OUTPUT", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> INVERT_OUTPUT = new Key<>(\"invertOutput\", true);" ], [ "FREQUENCY", "de.neemann.digital.core.element", "Keys", "public static final Key<Integer> FREQUENCY = new Key.KeyInteger(\"Frequency\", 1).setComboBoxValues(1, 2, 5, 10, 20, 50, 100, 200, 500, 5000, 50000, Integer.MAX_VALUE).setMin(1).setDependsOn(RUN_AT_REAL_TIME);" ], [ "SELECTOR_BITS", "de.neemann.digital.core.element", "Keys", "public static final Key<Integer> SELECTOR_BITS = new Key.KeyBits(\"Selector Bits\", 1).setMax(8);" ], [ "ADDR_BITS", "de.neemann.digital.core.element", "Keys", "public static final Key<Integer> ADDR_BITS = // needs to have the same default value as INPUT_COUNT!!!  see de.neemann.digital.gui.components.EditorFactory#DataFieldEditor\nnew Key.KeyBits(\"AddrBits\", 2).setMax(24);" ], [ "BLOWN", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> BLOWN = new Key<>(\"Blown\", false).allowGroupEdit();" ], [ "CLOSED", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> CLOSED = new Key<>(\"Closed\", false).allowGroupEdit();" ], [ "SIGNED", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> SIGNED = new Key<>(\"Signed\", false).allowGroupEdit();" ], [ "REMAINDER_POSITIVE", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> REMAINDER_POSITIVE = new Key<>(\"remainderPositive\", true).setDependsOn(SIGNED);" ], [ "DATA", "de.neemann.digital.core.element", "Keys", "public static final Key<DataField> DATA = new Key<>(\"Data\", DataField::new);" ], [ "FLIP_SEL_POSITON", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> FLIP_SEL_POSITON = new Key<>(\"flipSelPos\", false).allowGroupEdit();" ], [ "ROTATE", "de.neemann.digital.core.element", "Keys", "public static final Key<Rotation> ROTATE = new Key<>(\"rotation\", new Rotation(0)).allowGroupEdit().setSecondary();" ], [ "WIDTH", "de.neemann.digital.core.element", "Keys", "public static final Key.KeyInteger WIDTH = new Key.KeyInteger(\"Width\", 3).setMin(2);" ], [ "SHAPE_TYPE", "de.neemann.digital.core.element", "Keys", "public static final Key<CustomCircuitShapeType> SHAPE_TYPE = new Key.KeyEnum<>(\"shapeType\", CustomCircuitShapeType.DEFAULT, CustomCircuitShapeType.values()).setSecondary();" ], [ "LAYOUT_SHAPE_DELTA", "de.neemann.digital.core.element", "Keys", "public static final Key.KeyInteger LAYOUT_SHAPE_DELTA = new Key.KeyInteger(\"layoutShapeDelta\", 0).setMin(0);" ], [ "HEIGHT", "de.neemann.digital.core.element", "Keys", "public static final Key<Integer> HEIGHT = new Key.KeyInteger(\"Height\", 3).setMin(2).setSecondary().setDependsOn(SHAPE_TYPE, cst -> cst.equals(CustomCircuitShapeType.LAYOUT));" ], [ "TERM_WIDTH", "de.neemann.digital.core.element", "Keys", "public static final Key.KeyInteger TERM_WIDTH = new Key.KeyInteger(\"termWidth\", 50).setMin(10);" ], [ "TERM_HEIGHT", "de.neemann.digital.core.element", "Keys", "public static final Key.KeyInteger TERM_HEIGHT = new Key.KeyInteger(\"termHeight\", 25).setMin(5);" ], [ "CYCLES", "de.neemann.digital.core.element", "Keys", "public static final Key.KeyInteger CYCLES = new Key.KeyInteger(\"Cycles\", 100000).setComboBoxValues(1000, 10000, 100000, 1000000);" ], [ "ENABLED", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> ENABLED = new Key<>(\"enabled\", true).allowGroupEdit();" ], [ "VALUE_IS_PROBE", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> VALUE_IS_PROBE = new Key<>(\"valueIsProbe\", false).allowGroupEdit().setSecondary();" ], [ "IS_PROGRAM_MEMORY", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> IS_PROGRAM_MEMORY = new Key<>(\"isProgramMemory\", false).setSecondary();" ], [ "IS_PROGRAM_COUNTER", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> IS_PROGRAM_COUNTER = new Key<>(\"isProgramCounter\", false).setSecondary();" ], [ "AUTO_RELOAD_ROM", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> AUTO_RELOAD_ROM = new Key<>(\"autoReload\", false).setSecondary();" ], [ "LAST_DATA_FILE", "de.neemann.digital.core.element", "Keys", "public static final Key<File> LAST_DATA_FILE = new Key.KeyFile(\"lastDataFile\", new File(\"\")).setDependsOn(AUTO_RELOAD_ROM).setSecondary();" ], [ "SHOW_DATA_TABLE", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> SHOW_DATA_TABLE = new Key<>(\"showDataTable\", false).setSecondary();" ], [ "SHOW_DATA_GRAPH", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> SHOW_DATA_GRAPH = new Key<>(\"showDataGraph\", false).setSecondary();" ], [ "SHOW_DATA_GRAPH_MICRO", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> SHOW_DATA_GRAPH_MICRO = new Key<>(\"showDataGraphMicro\", false).setSecondary();" ], [ "ADD_VALUE_TO_GRAPH", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> ADD_VALUE_TO_GRAPH = new Key<>(\"addValueToGraph\", true).allowGroupEdit().setSecondary();" ], [ "MICRO_STEP", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> MICRO_STEP = new Key<>(\"microStep\", false);" ], [ "MAX_STEP_COUNT", "de.neemann.digital.core.element", "Keys", "public static final Key.KeyInteger MAX_STEP_COUNT = new Key.KeyInteger(\"maxStepCount\", 25).setMin(5);" ], [ "SETTINGS_MAX_STEP_COUNT", "de.neemann.digital.core.element", "Keys", "public static final Key<Integer> SETTINGS_MAX_STEP_COUNT = new Key.KeyInteger(\"settingsMaxStepCount\", 1000).setComboBoxValues(500, 1000, 5000, 10000).setMin(500).setSecondary().useTranslationOf(MAX_STEP_COUNT);" ], [ "IS_HIGH_Z", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> IS_HIGH_Z = new Key<>(\"isHighZ\", false).allowGroupEdit().setSecondary();" ], [ "AVOID_ACTIVE_LOW", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> AVOID_ACTIVE_LOW = new Key<>(\"avoidActiveLow\", false).setDependsOn(IS_HIGH_Z).allowGroupEdit().setSecondary();" ], [ "DESCRIPTION", "de.neemann.digital.core.element", "Keys", "public static final Key.LongString DESCRIPTION = new Key.LongString(\"Description\");" ], [ "NETNAME", "de.neemann.digital.core.element", "Keys", "public static final Key<String> NETNAME = new Key<>(\"NetName\", \"\");" ], [ "SETTINGS_IEEE_SHAPES", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> SETTINGS_IEEE_SHAPES = new Key<>(\"IEEEShapes\", !Locale.getDefault().getLanguage().equals(Locale.GERMAN.getLanguage())).setRequiresRestart();" ], [ "SETTINGS_LANGUAGE", "de.neemann.digital.core.element", "Keys", "public static final Key<Language> SETTINGS_LANGUAGE = new Key<>(\"Language\", new Language()).setRequiresRestart();" ], [ "SETTINGS_DEFAULT_TREESELECT", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> SETTINGS_DEFAULT_TREESELECT = new Key<>(\"defTreeSelect\", false);" ], [ "SETTINGS_EXPRESSION_FORMAT", "de.neemann.digital.core.element", "Keys", "public static final Key.KeyEnum<FormatToExpression> SETTINGS_EXPRESSION_FORMAT = new Key.KeyEnum<>(\"ExpressionFormat\", FormatToExpression.UNICODE, FormatToExpression.values(), true);" ], [ "SETTINGS_GRID", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> SETTINGS_GRID = new Key<>(\"grid\", true).setRequiresRepaint();" ], [ "SETTINGS_SHOW_WIRE_BITS", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> SETTINGS_SHOW_WIRE_BITS = new Key<>(\"showWireBits\", false);" ], [ "SETTINGS_MAC_MOUSE", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> SETTINGS_MAC_MOUSE = new Key<>(\"macMouse\", false).setRequiresRestart().setSecondary();" ], [ "SETTINGS_SHOW_TUNNEL_RENAME_DIALOG", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> SETTINGS_SHOW_TUNNEL_RENAME_DIALOG = new Key<>(\"tunnelRenameDialog\", true);" ], [ "SETTINGS_RENAME_LABELS", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> SETTINGS_RENAME_LABELS = new Key<>(\"renameLabels\", true);" ], [ "SETTINGS_OPEN_REMOTE_PORT", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> SETTINGS_OPEN_REMOTE_PORT = new Key<>(\"openRemotePort\", false).setSecondary().setRequiresRestart();" ], [ "SETTINGS_REMOTE_PORT", "de.neemann.digital.core.element", "Keys", "public static final Key<Integer> SETTINGS_REMOTE_PORT = new Key.KeyInteger(\"remotePort\", 41114).setMin(0).setMax(0xffff).setComboBoxValues(41114).setSecondary().setRequiresRestart().setDependsOn(SETTINGS_OPEN_REMOTE_PORT);" ], [ "OSCILLATION_DETECTION_COUNTER", "de.neemann.digital.core.element", "Keys", "public static final Key<Integer> OSCILLATION_DETECTION_COUNTER = new Key.KeyInteger(\"oscillationDetectionCounter\", 1000).setComboBoxValues(1000, 5000, 10000).setMin(1000).setMax(100000);" ], [ "INT_FORMAT", "de.neemann.digital.core.element", "Keys", "public static final Key<IntFormat> INT_FORMAT = new Key.KeyEnum<>(\"intFormat\", IntFormat.def, IntFormat.values()).setSecondary();" ], [ "PROBE_MODE", "de.neemann.digital.core.element", "Keys", "public static final Key<ProbeMode> PROBE_MODE = new Key.KeyEnum<>(\"probeMode\", ProbeMode.VALUE, ProbeMode.values());" ], [ "FIXED_POINT", "de.neemann.digital.core.element", "Keys", "public static final Key<Integer> FIXED_POINT = new Key.KeyInteger(\"fixedPoint\", 4).setMin(1).setMax(64).setDependsOn(INT_FORMAT, intFormat -> intFormat.equals(IntFormat.fixed) || intFormat.equals(IntFormat.fixedSigned)).allowGroupEdit().setSecondary();" ], [ "GRAPHIC_WIDTH", "de.neemann.digital.core.element", "Keys", "public static final Key.KeyInteger GRAPHIC_WIDTH = new Key.KeyInteger(\"graphicWidth\", 160).setMin(4);" ], [ "GRAPHIC_HEIGHT", "de.neemann.digital.core.element", "Keys", "public static final Key.KeyInteger GRAPHIC_HEIGHT = new Key.KeyInteger(\"graphicHeight\", 100).setMin(4);" ], [ "RELAY_NORMALLY_CLOSED", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> RELAY_NORMALLY_CLOSED = new Key<>(\"relayNormallyClosed\", false).allowGroupEdit();" ], [ "POLES", "de.neemann.digital.core.element", "Keys", "public static final Key<Integer> POLES = new Key.KeyInteger(\"poles\", 1).setComboBoxValues(1, 2, 3, 4).setMin(1).allowGroupEdit();" ], [ "BARREL_SHIFTER_MODE", "de.neemann.digital.core.element", "Keys", "public static final Key<BarrelShifterMode> BARREL_SHIFTER_MODE = new Key.KeyEnum<>(\"barrelShifterMode\", BarrelShifterMode.logical, BarrelShifterMode.values());" ], [ "DIRECTION", "de.neemann.digital.core.element", "Keys", "public static final Key<LeftRightFormat> DIRECTION = new Key.KeyEnum<>(\"direction\", LeftRightFormat.left, LeftRightFormat.values());" ], [ "BARREL_SIGNED", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> BARREL_SIGNED = new Key<>(\"barrelSigned\", false);" ], [ "COMMON_CONNECTION", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> COMMON_CONNECTION = new Key<>(\"commonCathode\", false).allowGroupEdit();" ], [ "COMMON_CONNECTION_TYPE", "de.neemann.digital.core.element", "Keys", "public static final Key<CommonConnectionType> COMMON_CONNECTION_TYPE = new Key.KeyEnum<>(\"commonConnectionType\", CommonConnectionType.cathode, CommonConnectionType.values()).setDependsOn(COMMON_CONNECTION).allowGroupEdit();" ], [ "LED_PERSISTENCE", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> LED_PERSISTENCE = new Key<>(\"ledPersistence\", false).allowGroupEdit().setDependsOn(COMMON_CONNECTION);" ], [ "LED_PERSIST_TIME", "de.neemann.digital.core.element", "Keys", "public static final Key<Integer> LED_PERSIST_TIME = new Key.KeyInteger(\"persistTime\", 0).setMin(0).allowGroupEdit();" ], [ "SETTINGS_ATF1502_FITTER", "de.neemann.digital.core.element", "Keys", "public static final Key<File> SETTINGS_ATF1502_FITTER = new Key.KeyFile(\"atf1502Fitter\", new File(\"c:/Wincupl/WinCupl/Fitters\")).setDirectoryOnly(true).setSecondary();" ], [ "SETTINGS_ATMISP", "de.neemann.digital.core.element", "Keys", "public static final Key<File> SETTINGS_ATMISP = new Key.KeyFile(\"ATMISP\", getATMISPPath()).setSecondary();" ], [ "ROW_DATA_BITS", "de.neemann.digital.core.element", "Keys", "public static final Key.KeyBits ROW_DATA_BITS = new Key.KeyBits(\"rowDataBits\", 8);" ], [ "COL_ADDR_BITS", "de.neemann.digital.core.element", "Keys", "public static final Key.KeyBits COL_ADDR_BITS = new Key.KeyBits(\"colAddrBits\", 3);" ], [ "LOCKED_MODE", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> LOCKED_MODE = new Key<>(\"lockedMode\", false);" ], [ "PINNUMBER", "de.neemann.digital.core.element", "Keys", "public static final Key<String> PINNUMBER = new Key<>(\"pinNumber\", \"\").setSecondary();" ], [ "PINCOUNT", "de.neemann.digital.core.element", "Keys", "public static final Key<Integer> PINCOUNT = new Key.KeyInteger(\"pinCount\", 0).setMin(0).setSecondary().setDependsOn(SHAPE_TYPE, st -> st.equals(CustomCircuitShapeType.DIL));" ], [ "INVERTER_CONFIG", "de.neemann.digital.core.element", "Keys", "public static final Key<InverterConfig> INVERTER_CONFIG = new Key<>(\"inverterConfig\", new InverterConfig.Builder().build());" ], [ "BACKGROUND_COLOR", "de.neemann.digital.core.element", "Keys", "public static final Key<java.awt.Color> BACKGROUND_COLOR = new Key<>(\"backgroundColor\", new Color(255, 255, 180, 200));" ], [ "SETTINGS_FONT_SCALING", "de.neemann.digital.core.element", "Keys", "public static final Key<Integer> SETTINGS_FONT_SCALING = new Key.KeyInteger(\"fontSize\", Screen.getDefaultFontScaling()).setComboBoxValues(100, 120, 150, 180, 200, 250, 300).setMin(50).setMax(400).setRequiresRestart().setSecondary();" ], [ "SETTINGS_USE_EQUALS_KEY", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> SETTINGS_USE_EQUALS_KEY;" ], [ "WITH_ENABLE", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> WITH_ENABLE = new Key<>(\"withEnable\", true);" ], [ "FET_UNIDIRECTIONAL", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> FET_UNIDIRECTIONAL = new Key<>(\"unidirectional\", false);" ], [ "ACTIVE_LOW", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> ACTIVE_LOW = new Key<>(\"activeLow\", false).allowGroupEdit();" ], [ "MAP_TO_KEY", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> MAP_TO_KEY = new Key<>(\"mapToKey\", false).allowGroupEdit();" ], [ "SETTINGS_LIBRARY_PATH", "de.neemann.digital.core.element", "Keys", "public static final Key<File> SETTINGS_LIBRARY_PATH = new Key.KeyFile(\"libraryPath\", ElementLibrary.getLibPath()).setDirectoryOnly(true).setSecondary();" ], [ "SETTINGS_JAR_PATH", "de.neemann.digital.core.element", "Keys", "public static final Key<File> SETTINGS_JAR_PATH = new Key.KeyFile(\"jarPath\", new File(\"\")).setSecondary().setRequiresRestart();" ], [ "ROMMANAGER", "de.neemann.digital.core.element", "Keys", "public static final Key<ROMManagerFile> ROMMANAGER = new Key<>(\"romContent\", ROMManagerFile::new).setSecondary();" ], [ "APPLICATION_TYPE", "de.neemann.digital.core.element", "Keys", "public static final Key.KeyEnum<Application.Type> APPLICATION_TYPE = new Key.KeyEnum<>(\"applicationType\", Application.Type.Generic, Application.Type.values());" ], [ "EXTERNAL_INPUTS", "de.neemann.digital.core.element", "Keys", "public static final Key<String> EXTERNAL_INPUTS = new Key<>(\"externalInputs\", \"in\");" ], [ "EXTERNAL_OUTPUTS", "de.neemann.digital.core.element", "Keys", "public static final Key<String> EXTERNAL_OUTPUTS = new Key<>(\"externalOutputs\", \"out\");" ], [ "EXTERNAL_CODE", "de.neemann.digital.core.element", "Keys", "public static final Key.LongString EXTERNAL_CODE = new Key.LongString(\"Code\").setRows(30).setColumns(80).setLineNumbers(true);" ], [ "EXTERNAL_CODE_FILE", "de.neemann.digital.core.element", "Keys", "public static final Key.KeyFile EXTERNAL_CODE_FILE = new Key.KeyFile(\"CodeFile\", new File(\"\"));" ], [ "SETTINGS_GHDL_PATH", "de.neemann.digital.core.element", "Keys", "public static final Key<File> SETTINGS_GHDL_PATH = new Key.KeyFile(\"ghdlPath\", new File(\"ghdl\")).setSecondary();" ], [ "GHDL_OPTIONS", "de.neemann.digital.core.element", "Keys", "public static final Key<String> GHDL_OPTIONS = new Key.LongString(\"ghdlOptions\", \"--std=08 --ieee=synopsys\").setRows(3).setColumns(30).setPanelId(\"Options\");" ], [ "IVERILOG_OPTIONS", "de.neemann.digital.core.element", "Keys", "public static final Key<String> IVERILOG_OPTIONS = new Key.LongString(\"iverilogOptions\", \"\").setRows(3).setColumns(30).setPanelId(\"Options\");" ], [ "SETTINGS_IVERILOG_PATH", "de.neemann.digital.core.element", "Keys", "public static final Key<File> SETTINGS_IVERILOG_PATH = new Key.KeyFile(\"iverilogPath\", new File(\"iverilog\")).setSecondary();" ], [ "CUSTOM_SHAPE", "de.neemann.digital.core.element", "Keys", "public static final Key<CustomShapeDescription> CUSTOM_SHAPE = new Key<>(\"customShape\", new CustomShapeDescription.Builder().build()).setSecondary().setDependsOn(SHAPE_TYPE, st -> st.equals(CustomCircuitShapeType.CUSTOM));" ], [ "PRELOAD_PROGRAM", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> PRELOAD_PROGRAM = new Key<>(\"preloadProgram\", false).setSecondary();" ], [ "BIG_ENDIAN", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> BIG_ENDIAN = new Key<>(\"bigEndian\", false).setSecondary().setDependsOn(AUTO_RELOAD_ROM);" ], [ "PROGRAM_TO_PRELOAD", "de.neemann.digital.core.element", "Keys", "public static final Key<File> PROGRAM_TO_PRELOAD = new Key.KeyFile(\"preloadProgramFile\", new File(\"\")).setSecondary().setDependsOn(PRELOAD_PROGRAM);" ], [ "BIG_ENDIAN_SETTING", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> BIG_ENDIAN_SETTING = new Key<>(\"bigEndianSetting\", false).setSecondary().useTranslationOf(BIG_ENDIAN).setDependsOn(PRELOAD_PROGRAM);" ], [ "WIDE_SHAPE", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> WIDE_SHAPE = new Key<>(\"wideShape\", false).setSecondary().allowGroupEdit();" ], [ "RECT_WIDTH", "de.neemann.digital.core.element", "Keys", "public static final Key.KeyInteger RECT_WIDTH = new Key.KeyInteger(\"RectWidth\", 3).setMin(2);" ], [ "RECT_HEIGHT", "de.neemann.digital.core.element", "Keys", "public static final Key.KeyInteger RECT_HEIGHT = new Key.KeyInteger(\"RectHeight\", 3).setMin(2);" ], [ "RECT_INSIDE", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> RECT_INSIDE = new Key<>(\"RectInside\", false).setSecondary();" ], [ "RECT_BOTTOM", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> RECT_BOTTOM = new Key<>(\"RectBottom\", false).setSecondary();" ], [ "RECT_RIGHT", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> RECT_RIGHT = new Key<>(\"RectRight\", false).setSecondary();" ], [ "MIDI_CHANNEL", "de.neemann.digital.core.element", "Keys", "public static final Key.KeyInteger MIDI_CHANNEL = new Key.KeyInteger(\"midiChannel\", 1).setMin(1).setMax(16);" ], [ "MIDI_INSTRUMENT", "de.neemann.digital.core.element", "Keys", "public static final Key<String> MIDI_INSTRUMENT = new Key<>(\"midiInstrument\", \"\");" ], [ "MIDI_PROG_CHANGE", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> MIDI_PROG_CHANGE = new Key<>(\"midiProgChange\", false);" ], [ "SETTINGS_TOOLCHAIN_CONFIG", "de.neemann.digital.core.element", "Keys", "public static final Key<File> SETTINGS_TOOLCHAIN_CONFIG = new Key.KeyFile(\"toolChainConfig\", new File(\"\")).setSecondary().setRequiresRestart();" ], [ "GENERIC", "de.neemann.digital.core.element", "Keys", "public static final Key<String> GENERIC = new Key.LongString(\"generic\").setLineNumbers(true).allowGroupEdit();" ], [ "GENERICLARGE", "de.neemann.digital.core.element", "Keys", "public static final Key<String> GENERICLARGE = new Key.LongString(\"generic\").setLineNumbers(true).setRows(20).allowGroupEdit();" ], [ "IS_GENERIC", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> IS_GENERIC = new Key<>(\"isGeneric\", false).setSecondary();" ], [ "SETTINGS_SHOW_TUTORIAL", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> SETTINGS_SHOW_TUTORIAL = new Key<>(\"showTutorial\", true).setSecondary();" ], [ "SETTINGS_WIRETOOLTIP", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> SETTINGS_WIRETOOLTIP = new Key<>(\"wireToolTips\", false);" ], [ "SWITCH_ACTS_AS_INPUT", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> SWITCH_ACTS_AS_INPUT = new Key<>(\"switchActsAsInput\", false).setSecondary();" ], [ "SNAP_TO_GRID", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> SNAP_TO_GRID = new Key<>(\"snapToGrid\", true).setSecondary();" ], [ "MIRROR", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> MIRROR = new Key<>(\"mirror\", false).allowGroupEdit().setSecondary();" ], [ "TESTDATA", "de.neemann.digital.core.element", "Keys", "public static final Key<TestCaseDescription> TESTDATA = new Key<>(\"Testdata\", TestCaseDescription::new);" ], [ "TRIGGER", "de.neemann.digital.core.element", "Keys", "public static final Key.KeyEnum<ScopeTrigger.Trigger> TRIGGER = new Key.KeyEnum<>(\"trigger\", ScopeTrigger.Trigger.both, ScopeTrigger.Trigger.values());" ], [ "PORT", "de.neemann.digital.core.element", "Keys", "public static final Key.KeyInteger PORT = new Key.KeyInteger(\"port\", 23).setMin(1).setMax((1 << 16) - 1);" ], [ "TELNET_ESCAPE", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> TELNET_ESCAPE = new Key<>(\"telnetEscape\", true).allowGroupEdit();" ], [ "SKIP_HDL", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> SKIP_HDL = new Key<>(\"skipHDL\", false).setSecondary();" ], [ "PREFIX", "de.neemann.digital.core.basic", "FanIn", "public static final String PREFIX = \"In_\";" ], [ "DESCRIPTION", "de.neemann.digital.core.basic", "NOr", "public static final ElementTypeDescription DESCRIPTION = new FanInDescription(NOr.class).addAttribute(Keys.WIDE_SHAPE);" ], [ "DESCRIPTION", "de.neemann.digital.core.basic", "And", "public static final ElementTypeDescription DESCRIPTION = new FanInDescription(And.class).addAttribute(Keys.WIDE_SHAPE);" ], [ "DESCRIPTION", "de.neemann.digital.core.basic", "XNOr", "public static final ElementTypeDescription DESCRIPTION = new FanInDescription(XNOr.class).addAttribute(Keys.WIDE_SHAPE);" ], [ "DESCRIPTION", "de.neemann.digital.core.basic", "XOr", "public static final ElementTypeDescription DESCRIPTION = new FanInDescription(XOr.class).addAttribute(Keys.WIDE_SHAPE);" ], [ "DESCRIPTION", "de.neemann.digital.core.basic", "Not", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Not.class, input(\"in\")).addAttribute(Keys.ROTATE).addAttribute(Keys.WIDE_SHAPE).addAttribute(Keys.BITS).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.basic", "NAnd", "public static final ElementTypeDescription DESCRIPTION = new FanInDescription(NAnd.class).addAttribute(Keys.WIDE_SHAPE);" ], [ "DESCRIPTION", "de.neemann.digital.core.basic", "Or", "public static final ElementTypeDescription DESCRIPTION = new FanInDescription(Or.class).addAttribute(Keys.WIDE_SHAPE);" ], [ "STARTED", "de.neemann.digital.core", "ModelEvent", "public static final ModelEvent STARTED = new ModelEvent(ModelEventType.STARTED);" ], [ "CLOSED", "de.neemann.digital.core", "ModelEvent", "public static final ModelEvent CLOSED = new ModelEvent(ModelEventType.CLOSED);" ], [ "POSTCLOSED", "de.neemann.digital.core", "ModelEvent", "public static final ModelEvent POSTCLOSED = new ModelEvent(ModelEventType.POSTCLOSED);" ], [ "STEP", "de.neemann.digital.core", "ModelEvent", "public static final ModelEvent STEP = new ModelEvent(ModelEventType.STEP);" ], [ "CHECKBURN", "de.neemann.digital.core", "ModelEvent", "public static final ModelEvent CHECKBURN = new ModelEvent(ModelEventType.CHECKBURN);" ], [ "MICROSTEP", "de.neemann.digital.core", "ModelEvent", "public static final ModelEvent MICROSTEP = new ModelEvent(ModelEventType.MICROSTEP);" ], [ "RUN_TO_BREAK", "de.neemann.digital.core", "ModelEvent", "public static final ModelEvent RUN_TO_BREAK = new ModelEvent(ModelEventType.RUN_TO_BREAK);" ], [ "RUN_TO_BREAK_TIMEOUT", "de.neemann.digital.core", "ModelEvent", "public static final ModelEvent RUN_TO_BREAK_TIMEOUT = new ModelEvent(ModelEventType.RUN_TO_BREAK_TIMEOUT);" ], [ "BREAK", "de.neemann.digital.core", "ModelEvent", "public static final ModelEvent BREAK = new ModelEvent(ModelEventType.BREAK);" ], [ "DESCRIPTION", "de.neemann.digital.core.switching", "FGPFET", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(FGPFET.class, input(\"G\")).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).addAttribute(Keys.BLOWN);" ], [ "DESCRIPTION", "de.neemann.digital.core.switching", "NFET", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(NFET.class, input(\"G\")).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.BITS).addAttribute(Keys.FET_UNIDIRECTIONAL).addAttribute(Keys.LABEL);" ], [ "DESCRIPTION", "de.neemann.digital.core.switching", "FGNFET", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(FGNFET.class, input(\"G\")).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).addAttribute(Keys.BLOWN);" ], [ "DESCRIPTION", "de.neemann.digital.core.switching", "PFET", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(PFET.class, input(\"G\")).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.BITS).addAttribute(Keys.FET_UNIDIRECTIONAL).addAttribute(Keys.LABEL);" ], [ "DESCRIPTION", "de.neemann.digital.core.switching", "TransGate", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(TransGate.class, input(\"S\"), input(\"~S\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS);" ], [ "DESCRIPTION", "de.neemann.digital.core.switching", "SwitchDT", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(SwitchDT.class).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).addAttribute(Keys.POLES);" ], [ "DESCRIPTION", "de.neemann.digital.core.switching", "Relay", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Relay.class, input(\"in1\"), input(\"in2\")).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).addAttribute(Keys.POLES).addAttribute(Keys.RELAY_NORMALLY_CLOSED);" ], [ "DESCRIPTION", "de.neemann.digital.core.switching", "RelayDT", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(RelayDT.class, input(\"in1\"), input(\"in2\")).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).addAttribute(Keys.POLES);" ], [ "DESCRIPTION", "de.neemann.digital.core.switching", "Switch", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Switch.class).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).addAttribute(Keys.POLES).addAttribute(Keys.CLOSED).addAttribute(Keys.SWITCH_ACTS_AS_INPUT);" ], [ "DESCRIPTION", "de.neemann.digital.core.switching", "Fuse", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Fuse.class).addAttribute(Keys.ROTATE).addAttribute(Keys.BLOWN);" ], [ "DESCRIPTION", "de.neemann.digital.core.wiring", "Reset", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"Reset\", Reset.class).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.INVERT_OUTPUT).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.wiring", "Stop", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Stop.class, input(\"stop\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.INVERTER_CONFIG);" ], [ "DESCRIPTION", "de.neemann.digital.core.wiring", "Decoder", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Decoder.class, input(\"sel\")).addAttribute(Keys.ROTATE).addAttribute(Keys.SELECTOR_BITS).addAttribute(Keys.FLIP_SEL_POSITON).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.wiring", "Delay", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Delay.class, input(\"in\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.DELAY_TIME);" ], [ "DESCRIPTION", "de.neemann.digital.core.wiring", "Driver", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Driver.class, input(\"in\"), input(\"sel\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.FLIP_SEL_POSITON).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.wiring", "DriverInvSel", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(DriverInvSel.class, input(\"in\"), input(\"sel\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.FLIP_SEL_POSITON).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.wiring", "PriorityEncoder", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(PriorityEncoder.class) {\n\n    @Override\n    public PinDescriptions getInputDescription(ElementAttributes elementAttributes) {\n        int inputs = 1 << elementAttributes.get(Keys.SELECTOR_BITS);\n        PinDescription[] names = new PinDescription[inputs];\n        for (int i = 0; i < inputs; i++) names[i] = input(\"in\" + i, Lang.get(\"elem_PriorityEncoder_input\", i));\n        return new PinDescriptions(names);\n    }\n}.addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.SELECTOR_BITS).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.wiring", "BusSplitter", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(BusSplitter.class, input(\"OE\")).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.BITS).addAttribute(Keys.SPLITTER_SPREADING);" ], [ "DESCRIPTION", "de.neemann.digital.core.wiring", "Splitter", "public static final ElementTypeDescription DESCRIPTION = new SplitterTypeDescription().addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.INPUT_SPLIT).addAttribute(Keys.OUTPUT_SPLIT).addAttribute(Keys.SPLITTER_SPREADING).setShortName(\"\").supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.wiring", "Multiplexer", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Multiplexer.class) {\n\n    @Override\n    public PinDescriptions getInputDescription(ElementAttributes elementAttributes) {\n        int size = 1 << elementAttributes.get(Keys.SELECTOR_BITS);\n        PinDescription[] names = new PinDescription[size + 1];\n        names[0] = input(\"sel\", Lang.get(\"elem_Multiplexer_pin_sel\"));\n        for (int i = 0; i < size; i++) names[i + 1] = input(\"in_\" + i, Lang.get(\"elem_Multiplexer_input\", i));\n        return new PinDescriptions(names);\n    }\n}.addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.SELECTOR_BITS).addAttribute(Keys.FLIP_SEL_POSITON).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.wiring", "BitSelector", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(BitSelector.class, input(\"in\"), input(\"sel\")).addAttribute(Keys.ROTATE).addAttribute(Keys.SELECTOR_BITS).addAttribute(Keys.FLIP_SEL_POSITON).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.wiring", "Break", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Break.class, input(\"brk\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.ENABLED).addAttribute(Keys.CYCLES);" ], [ "DESCRIPTION", "de.neemann.digital.core.wiring", "Clock", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"Clock\", Clock.class).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.RUN_AT_REAL_TIME).addAttribute(Keys.FREQUENCY).addAttribute(Keys.PINNUMBER).addAttribute(Keys.IN_OUT_SMALL).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.wiring", "AsyncSeq", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(AsyncSeq.class).addAttribute(Keys.RUN_AT_REAL_TIME).addAttribute(Keys.FREQUENCY);" ], [ "DESCRIPTION", "de.neemann.digital.core.wiring", "Demultiplexer", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Demultiplexer.class, input(\"sel\"), input(\"in\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.SELECTOR_BITS).addAttribute(Keys.FLIP_SEL_POSITON).addAttribute(Keys.DEFAULT).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.flipflops", "FlipflopDAsync", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"D_FF_AS\", FlipflopDAsync.class, input(\"Set\"), input(\"D\"), input(\"C\").setClock(), input(\"Clr\")).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).addAttribute(Keys.DEFAULT).addAttribute(Keys.INVERTER_CONFIG).addAttribute(Keys.VALUE_IS_PROBE).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.flipflops", "FlipflopD", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"D_FF\", FlipflopD.class, input(\"D\"), input(\"C\").setClock()).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).addAttribute(Keys.DEFAULT).addAttribute(Keys.INVERTER_CONFIG).addAttribute(Keys.VALUE_IS_PROBE).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.flipflops", "FlipflopRSAsync", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"RS_FF_AS\", FlipflopRSAsync.class, input(\"S\"), input(\"R\")).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.LABEL).addAttribute(Keys.DEFAULT).addAttribute(Keys.INVERTER_CONFIG).addAttribute(Keys.VALUE_IS_PROBE);" ], [ "DESCRIPTION", "de.neemann.digital.core.flipflops", "FlipflopT", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"T_FF\", FlipflopT.class) {\n\n    @Override\n    public PinDescriptions getInputDescription(ElementAttributes elementAttributes) throws NodeException {\n        if (elementAttributes.get(Keys.WITH_ENABLE))\n            return new PinDescriptions(input(\"T\"), input(\"C\").setClock()).setLangKey(getPinLangKey());\n        else\n            return new PinDescriptions(input(\"C\").setClock()).setLangKey(getPinLangKey());\n    }\n}.addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.LABEL).addAttribute(Keys.WITH_ENABLE).addAttribute(Keys.DEFAULT).addAttribute(Keys.INVERTER_CONFIG).addAttribute(Keys.VALUE_IS_PROBE);" ], [ "DESCRIPTION", "de.neemann.digital.core.flipflops", "FlipflopJKAsync", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"JK_FF_AS\", FlipflopJKAsync.class, input(\"Set\"), input(\"J\"), input(\"C\").setClock(), input(\"K\"), input(\"Clr\")).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.LABEL).addAttribute(Keys.DEFAULT).addAttribute(Keys.INVERTER_CONFIG).addAttribute(Keys.VALUE_IS_PROBE).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.flipflops", "FlipflopJK", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"JK_FF\", FlipflopJK.class, input(\"J\"), input(\"C\").setClock(), input(\"K\")).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.LABEL).addAttribute(Keys.DEFAULT).addAttribute(Keys.INVERTER_CONFIG).addAttribute(Keys.VALUE_IS_PROBE).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.flipflops", "Monoflop", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Monoflop.class, input(\"C\").setClock(), input(\"R\")).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.LABEL).addAttribute(Keys.DEFAULT).addAttribute(Keys.MONOFLOP_DELAY).addAttribute(Keys.INVERTER_CONFIG).addAttribute(Keys.VALUE_IS_PROBE);" ], [ "DESCRIPTION", "de.neemann.digital.core.flipflops", "FlipflopRS", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"RS_FF\", FlipflopRS.class, input(\"S\"), input(\"C\").setClock(), input(\"R\")).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.LABEL).addAttribute(Keys.DEFAULT).addAttribute(Keys.INVERTER_CONFIG).addAttribute(Keys.VALUE_IS_PROBE);" ], [ "DESCRIPTION", "de.neemann.digital.core.arithmetic", "BarrelShifter", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(BarrelShifter.class, input(\"in\"), input(\"shift\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.BITS).addAttribute(Keys.BARREL_SIGNED).addAttribute(Keys.DIRECTION).addAttribute(Keys.BARREL_SHIFTER_MODE);" ], [ "DESCRIPTION", "de.neemann.digital.core.arithmetic", "Mul", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Mul.class, input(\"a\"), input(\"b\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.SIGNED).addAttribute(Keys.BITS).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.arithmetic", "Neg", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Neg.class, input(\"in\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.arithmetic", "BitExtender", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(BitExtender.class, input(\"in\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.INPUT_BITS).addAttribute(Keys.OUTPUT_BITS).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.arithmetic", "Add", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Add.class, input(\"a\"), input(\"b\"), input(\"c_i\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.BITS).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.arithmetic", "Div", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Div.class, input(\"a\"), input(\"b\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.BITS).addAttribute(Keys.SIGNED).addAttribute(Keys.REMAINDER_POSITIVE);" ], [ "DESCRIPTION", "de.neemann.digital.core.arithmetic", "PRNG", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(PRNG.class, input(\"S\"), input(\"se\"), input(\"ne\"), input(\"C\").setClock()).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.LABEL);" ], [ "DESCRIPTION", "de.neemann.digital.core.arithmetic", "Sub", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Sub.class, input(\"a\"), input(\"b\"), input(\"c_i\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.BITS).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.arithmetic", "Comparator", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Comparator.class, input(\"a\"), input(\"b\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.BITS).addAttribute(Keys.SIGNED).setShortName(\"\").supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.arithmetic", "BitCount", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(BitCount.class, input(\"in\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS);" ], [ "EMPTY_LIST", "de.neemann.digital.core", "ObservableValues", "public static final ObservableValues EMPTY_LIST = new ObservableValues();" ], [ "DEFAULT_FORMATTER", "de.neemann.digital.core", "IntFormat", "public static final ValueFormatter DEFAULT_FORMATTER = ValueFormatterDefault.INSTANCE;" ], [ "HEX_FORMATTER", "de.neemann.digital.core", "IntFormat", "public static final ValueFormatter HEX_FORMATTER = ValueFormatterHex.INSTANCE;" ], [ "DESCRIPTION", "de.neemann.digital.core.extern", "External", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(External.class) {\n\n    @Override\n    public PinDescriptions getInputDescription(ElementAttributes elementAttributes) {\n        return new PortDefinition(elementAttributes.get(Keys.EXTERNAL_INPUTS)).getPinDescriptions(PinDescription.Direction.input);\n    }\n\n    @Override\n    public PinDescriptions getOutputDescriptions(ElementAttributes elementAttributes) {\n        return new PortDefinition(elementAttributes.get(Keys.EXTERNAL_OUTPUTS)).getPinDescriptions(PinDescription.Direction.output);\n    }\n}.addAttribute(Keys.LABEL).addAttribute(Keys.WIDTH).addAttribute(Keys.EXTERNAL_INPUTS).addAttribute(Keys.EXTERNAL_OUTPUTS).addAttribute(Keys.EXTERNAL_CODE).addAttribute(Keys.APPLICATION_TYPE).addAttribute(Keys.GHDL_OPTIONS).addAttribute(Keys.IVERILOG_OPTIONS).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.extern", "ExternalFile", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(ExternalFile.class) {\n\n    @Override\n    public PinDescriptions getInputDescription(ElementAttributes elementAttributes) {\n        return new PortDefinition(elementAttributes.get(Keys.EXTERNAL_INPUTS)).getPinDescriptions(PinDescription.Direction.input);\n    }\n\n    @Override\n    public PinDescriptions getOutputDescriptions(ElementAttributes elementAttributes) {\n        return new PortDefinition(elementAttributes.get(Keys.EXTERNAL_OUTPUTS)).getPinDescriptions(PinDescription.Direction.output);\n    }\n}.addAttribute(Keys.LABEL).addAttribute(Keys.WIDTH).addAttribute(Keys.EXTERNAL_INPUTS).addAttribute(Keys.EXTERNAL_OUTPUTS).addAttribute(Keys.EXTERNAL_CODE_FILE).addAttribute(Keys.APPLICATION_TYPE).addAttribute(Keys.GHDL_OPTIONS).addAttribute(Keys.IVERILOG_OPTIONS).supportsHDL();" ], [ "DEFAULT_RAD", "de.neemann.digital.fsm", "State", "static final int DEFAULT_RAD = 70;" ], [ "INSTANCE", "de.neemann.digital.lang", "Lang", "static final Lang INSTANCE = new Lang();" ], [ "INSTANCE", "de.neemann.digital.lang", "InstanceHolder", "static final Lang INSTANCE = new Lang();" ], [ "DESCRIPTION", "de.neemann.digital.testing", "TestCaseElement", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"Testcase\", TestCaseElement.class).addAttribute(Keys.LABEL).addAttribute(Keys.TESTDATA).addAttribute(Keys.ENABLED).supportsHDL();" ], [ "STATENAMES", "de.neemann.digital.analyse", "TruthTableTableModel", "public static final String[] STATENAMES = new String[] { \"0\", \"1\", \"x\" };" ], [ "ONE", "de.neemann.digital.analyse.expression", "Constant", "public static final Constant ONE = new Constant(true);" ], [ "ZERO", "de.neemann.digital.analyse.expression", "Constant", "public static final Constant ZERO = new Constant(false);" ], [ "PRIMARY", "de.neemann.digital.gui.components", "EditorPanel", "public static final String PRIMARY = \"primary\";" ], [ "SECONDARY", "de.neemann.digital.gui.components", "EditorPanel", "public static final String SECONDARY = \"secondary\";" ], [ "INSTANCE", "de.neemann.digital.gui.components", "EditorFactory", "static final EditorFactory INSTANCE = new EditorFactory();" ], [ "MAX_TERMINAL_STORED", "de.neemann.digital.gui.components.terminal", "ConsoleTerminal", "public static final int MAX_TERMINAL_STORED = 2048;" ], [ "DESCRIPTION", "de.neemann.digital.gui.components.terminal", "Terminal", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Terminal.class, input(\"D\"), input(\"C\").setClock(), input(\"en\")).addAttribute(Keys.TERM_WIDTH).addAttribute(Keys.TERM_HEIGHT).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL);" ], [ "DESCRIPTION", "de.neemann.digital.gui.components.terminal", "Keyboard", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Keyboard.class, input(\"C\").setClock(), input(\"en\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.INVERTER_CONFIG);" ], [ "FAILED_COLOR", "de.neemann.digital.gui.components.testing", "ValueTableDialog", "static final Color FAILED_COLOR = new Color(255, 200, 200);" ], [ "PASSED_COLOR", "de.neemann.digital.gui.components.testing", "ValueTableDialog", "static final Color PASSED_COLOR = new Color(200, 255, 200);" ], [ "ICON_DELETE", "de.neemann.digital.gui.components", "CircuitComponent", "public static final Icon ICON_DELETE = IconCreator.create(\"delete.png\");" ], [ "ICON_COPY", "de.neemann.digital.gui.components", "CircuitComponent", "public static final Icon ICON_COPY = IconCreator.create(\"edit-copy.png\");" ], [ "DESCRIPTION", "de.neemann.digital.gui.components.graphics", "VGA", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(VGA.class, input(\"R\"), input(\"G\"), input(\"B\"), input(\"H\"), input(\"V\"), input(\"C\").setClock()).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL);" ], [ "DESCRIPTION", "de.neemann.digital.gui.components.graphics", "GraphicCard", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(GraphicCard.class, input(\"A\"), input(\"str\"), input(\"C\").setClock(), input(\"ld\"), input(\"B\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).addAttribute(Keys.GRAPHIC_WIDTH).addAttribute(Keys.GRAPHIC_HEIGHT);" ], [ "DESCRIPTION", "de.neemann.digital.gui.components.graphics", "LedMatrix", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(LedMatrix.class, input(\"r-data\"), input(\"c-addr\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.ROW_DATA_BITS).addAttribute(Keys.COL_ADDR_BITS).addAttribute(Keys.COLOR).addAttribute(Keys.LED_PERSISTENCE);" ], [ "DESCRIPTION", "de.neemann.digital.gui.components.data", "ScopeTrigger", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(ScopeTrigger.class, input(\"T\").setClock()).addAttribute(Keys.LABEL).addAttribute(Keys.TRIGGER).addAttribute(Keys.MAX_STEP_COUNT);" ], [ "DATADESCRIPTION", "de.neemann.digital.gui.components.data", "DummyElement", "public static final ElementTypeDescription DATADESCRIPTION = new ElementTypeDescription(\"Data\", DummyElement.class).addAttribute(Keys.MICRO_STEP).addAttribute(Keys.MAX_STEP_COUNT).addAttribute(Keys.SNAP_TO_GRID);" ], [ "TEXTDESCRIPTION", "de.neemann.digital.gui.components.data", "DummyElement", "public static final ElementTypeDescription TEXTDESCRIPTION = new ElementTypeDescription(\"Text\", DummyElement.class).addAttribute(Keys.DESCRIPTION).addAttribute(Keys.ROTATE).addAttribute(Keys.TEXT_ORIENTATION).addAttribute(Keys.FONT_SIZE).addAttribute(Keys.SNAP_TO_GRID);" ], [ "RECTDESCRIPTION", "de.neemann.digital.gui.components.data", "DummyElement", "public static final ElementTypeDescription RECTDESCRIPTION = new ElementTypeDescription(\"Rectangle\", DummyElement.class).addAttribute(Keys.LABEL).addAttribute(Keys.RECT_WIDTH).addAttribute(Keys.RECT_HEIGHT).addAttribute(Keys.RECT_INSIDE).addAttribute(Keys.RECT_BOTTOM).addAttribute(Keys.RECT_RIGHT).addAttribute(Keys.FONT_SIZE).addAttribute(Keys.SNAP_TO_GRID);" ], [ "LEFT", "de.neemann.digital.gui.components", "TextLineNumber", "public final static float LEFT = 0.0f;" ], [ "CENTER", "de.neemann.digital.gui.components", "TextLineNumber", "public final static float CENTER = 0.5f;" ], [ "RIGHT", "de.neemann.digital.gui.components", "TextLineNumber", "public final static float RIGHT = 1.0f;" ], [ "INSTANCE", "de.neemann.digital.gui", "Settings", "static final Settings INSTANCE = new Settings();" ], [ "INSTANCE", "de.neemann.digital.gui", "SettingsHolder", "static final Settings INSTANCE = new Settings();" ], [ "BASE_FILE_KEY", "de.neemann.digital.hdl.hgs", "Context", "public static final String BASE_FILE_KEY = \"baseFile\";" ], [ "DESCRIPTION", "de.neemann.digital.draw.library", "GenericCode", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(GenericCode.class).addAttribute(Keys.GENERICLARGE).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.draw.library", "GenericInitCode", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(GenericInitCode.class).addAttribute(Keys.LABEL).addAttribute(Keys.ENABLED).addAttribute(Keys.GENERIC).supportsHDL();" ], [ "GEN_ARGS_KEY", "de.neemann.digital.draw.library", "ResolveGenerics", "public static final String GEN_ARGS_KEY = \"genArgs\";" ], [ "HEIGHT", "de.neemann.digital.draw.shapes", "ButtonShape", "protected static final int HEIGHT = OUT_SIZE / 2;" ], [ "SIZE2", "de.neemann.digital.draw.shapes", "GenericShape", "public static final int SIZE2 = 10;" ], [ "SIZE", "de.neemann.digital.draw.shapes", "GenericShape", "public static final int SIZE = SIZE2 * 2;" ], [ "CIRC", "de.neemann.digital.draw.shapes", "DILShape", "static final float CIRC = (float) (4 * (Math.sqrt(2) - 1) / 3);" ], [ "DOWNSHIFT", "de.neemann.digital.draw.shapes", "VDDShape", "static final int DOWNSHIFT = 4;" ], [ "CHARGED_GATE", "de.neemann.digital.draw.shapes", "FGFETShapeN", "static final Style CHARGED_GATE = Style.NORMAL.deriveStyle(6, false, Color.RED);" ], [ "OUT_SIZE", "de.neemann.digital.draw.shapes", "OutputShape", "public static final int OUT_SIZE = GenericShape.SIZE * 3 / 4;" ], [ "LATEX_RAD", "de.neemann.digital.draw.shapes", "OutputShape", "static final Vector LATEX_RAD = new Vector(Style.MAXLINETHICK, Style.MAXLINETHICK);" ], [ "WIDTH2", "de.neemann.digital.draw.shapes", "PullDownShape", "public static final int WIDTH2 = SIZE2 - 3;" ], [ "HEIGHT", "de.neemann.digital.draw.shapes", "PullDownShape", "public static final int HEIGHT = SIZE + SIZE / 3;" ], [ "HEIGHT", "de.neemann.digital.draw.shapes", "SevenShape", "static final int HEIGHT = 7;" ], [ "FRAME", "de.neemann.digital.draw.shapes", "SevenShape", "public static final Polygon FRAME = Polygon.createFromPath(\"m -10,1 L 70,1 70,139 -10,139 z\");" ], [ "DESCRIPTION", "de.neemann.digital.draw.elements", "Tunnel", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Tunnel.class, input(\"in\")).addAttribute(Keys.ROTATE).addAttribute(Keys.NETNAME).supportsHDL();" ], [ "HIGH_CONTRAST", "de.neemann.digital.draw.graphics", "SVGSettings", "static final Key<Boolean> HIGH_CONTRAST = new Key<>(\"SVG_highContrast\", false);" ], [ "MONOCHROME", "de.neemann.digital.draw.graphics", "SVGSettings", "static final Key<Boolean> MONOCHROME = new Key<>(\"SVG_monochrome\", false);" ], [ "SMALL_IO", "de.neemann.digital.draw.graphics", "SVGSettings", "static final Key<Boolean> SMALL_IO = new Key<>(\"SVG_smallIO\", false);" ], [ "NO_PIN_MARKER", "de.neemann.digital.draw.graphics", "SVGSettings", "static final Key<Boolean> NO_PIN_MARKER = new Key<>(\"SVG_noPinMarker\", false);" ], [ "THINNER_LINES", "de.neemann.digital.draw.graphics", "SVGSettings", "static final Key<Boolean> THINNER_LINES = new Key<>(\"SVG_thinnerLines\", false);" ], [ "HIDE_TEST", "de.neemann.digital.draw.graphics", "SVGSettings", "static final Key<Boolean> HIDE_TEST = new Key<>(\"SVG_hideTest\", false);" ], [ "NO_SHAPE_FILLING", "de.neemann.digital.draw.graphics", "SVGSettings", "static final Key<Boolean> NO_SHAPE_FILLING = new Key<>(\"SVG_noShapeFilling\", false);" ], [ "LATEX", "de.neemann.digital.draw.graphics", "SVGSettings", "static final Key<Boolean> LATEX = new Key<>(\"SVG_LaTeX\", false);" ], [ "PINS_IN_MATH_MODE", "de.neemann.digital.draw.graphics", "SVGSettings", "static final Key<Boolean> PINS_IN_MATH_MODE = new Key<>(\"SVG_pinsInMathMode\", false).setDependsOn(LATEX);" ], [ "INSTANCE", "de.neemann.digital.draw.graphics", "SVGSettings", "static final SVGSettings INSTANCE = new SVGSettings();" ], [ "INSTANCE", "de.neemann.digital.draw.graphics", "SettingsHolder", "static final SVGSettings INSTANCE = new SVGSettings();" ], [ "COLOR_SCHEME", "de.neemann.digital.draw.graphics", "ColorScheme", "public static final Key<ColorSchemes> COLOR_SCHEME = new Key.KeyEnum<>(\"colorScheme\", ColorSchemes.DEFAULT, ColorSchemes.values()).setRequiresRepaint();" ], [ "CUSTOM_COLOR_SCHEME", "de.neemann.digital.draw.graphics", "ColorScheme", "public static final Key<ColorScheme> CUSTOM_COLOR_SCHEME = new Key<>(\"customColorScheme\", DEFAULT_SCHEME).setDependsOn(COLOR_SCHEME, o -> o.equals(ColorSchemes.CUSTOM)).setRequiresRepaint();" ], [ "MAXLINETHICK", "de.neemann.digital.draw.graphics", "Style", "public static final int MAXLINETHICK = 4;" ], [ "NORMAL", "de.neemann.digital.draw.graphics", "Style", "public static final Style NORMAL = new Builder().build();" ], [ "DISABLED", "de.neemann.digital.draw.graphics", "Style", "public static final Style DISABLED = new Builder().setColor(ColorKey.DISABLED).build();" ], [ "INOUT", "de.neemann.digital.draw.graphics", "Style", "public static final Style INOUT = new Builder(NORMAL).setFontStyle(Font.ITALIC).build();" ], [ "FAILED", "de.neemann.digital.draw.graphics", "Style", "public static final Style FAILED = new Builder(NORMAL).setColor(ColorKey.ERROR).build();" ], [ "PASS", "de.neemann.digital.draw.graphics", "Style", "public static final Style PASS = new Builder(NORMAL).setColor(ColorKey.PASSED).build();" ], [ "NORMAL_TEXT", "de.neemann.digital.draw.graphics", "Style", "public static final Style NORMAL_TEXT = new Builder(NORMAL).setMattersForSize(true).build();" ], [ "THIN", "de.neemann.digital.draw.graphics", "Style", "public static final Style THIN = new Builder(NORMAL).setThickness(LINETHIN).build();" ], [ "THIN_FILLED", "de.neemann.digital.draw.graphics", "Style", "public static final Style THIN_FILLED = new Builder(NORMAL).setThickness(LINETHIN).setFilled(true).build();" ], [ "THICK", "de.neemann.digital.draw.graphics", "Style", "public static final Style THICK = new Builder(NORMAL).setThickness(LINETHICK + LINETHIN).build();" ], [ "WIRE", "de.neemann.digital.draw.graphics", "Style", "public static final Style WIRE = new Builder().setThickness(WIRETHICK).setFilled(true).setColor(ColorKey.WIRE).setEndCap(BasicStroke.CAP_ROUND).build();" ], [ "WIRE_LOW", "de.neemann.digital.draw.graphics", "Style", "public static final Style WIRE_LOW = new Builder(WIRE).setColor(ColorKey.WIRE_LOW).build();" ], [ "WIRE_HIGH", "de.neemann.digital.draw.graphics", "Style", "public static final Style WIRE_HIGH = new Builder(WIRE).setColor(ColorKey.WIRE_HIGH).build();" ], [ "WIRE_HIGHZ", "de.neemann.digital.draw.graphics", "Style", "public static final Style WIRE_HIGHZ = new Builder(WIRE).setColor(ColorKey.WIRE_Z).build();" ], [ "WIRE_OUT", "de.neemann.digital.draw.graphics", "Style", "public static final Style WIRE_OUT = new Builder(WIRE).setColor(ColorKey.WIRE_OUT).build();" ], [ "FILLED", "de.neemann.digital.draw.graphics", "Style", "public static final Style FILLED = new Builder().setFilled(true).build();" ], [ "DASH", "de.neemann.digital.draw.graphics", "Style", "public static final Style DASH = new Builder().setThickness(LINEDASH).setDash(new float[] { 4, 4 }).build();" ], [ "SHAPE_PIN", "de.neemann.digital.draw.graphics", "Style", "public static final Style SHAPE_PIN = new Builder().setThickness(LINETHIN).setColor(ColorKey.PINS).setFontSize(18).build();" ], [ "SHAPE_SPLITTER", "de.neemann.digital.draw.graphics", "Style", "public static final Style SHAPE_SPLITTER = new Builder(SHAPE_PIN).setFontSize(12).build();" ], [ "WIRE_VALUE", "de.neemann.digital.draw.graphics", "Style", "public static final Style WIRE_VALUE = new Builder(SHAPE_SPLITTER).setColor(ColorKey.WIRE_VALUE).build();" ], [ "WIRE_BITS", "de.neemann.digital.draw.graphics", "Style", "public static final Style WIRE_BITS = new Builder(SHAPE_SPLITTER).setColor(ColorKey.WIRE).build();" ], [ "HIGHLIGHT", "de.neemann.digital.draw.graphics", "Style", "public static final Style HIGHLIGHT = new Builder(NORMAL).setColor(ColorKey.HIGHLIGHT).setEndCap(BasicStroke.CAP_ROUND).build();" ], [ "ERROR", "de.neemann.digital.draw.graphics", "Style", "public static final Style ERROR = new Builder(NORMAL).setColor(ColorKey.ERROR).setEndCap(BasicStroke.CAP_ROUND).build();" ], [ "BLANK", "de.neemann.digital.draw.graphics.text.text", "Blank", "public static final Blank BLANK = new Blank();" ], [ "LOOK_AT_ALIAS", "de.neemann.digital.toolchain", "Configuration", "static final String LOOK_AT_ALIAS = \"lookAt\";" ], [ "REF_ALIAS", "de.neemann.digital.toolchain", "Configuration", "static final String REF_ALIAS = \"ref\";" ] ],
  "tokensMethodJavadocValues" : [ ],
  "tokensMethodArguments" : [ [ "inputs", "de.neemann.digital.core", "ObservableValues" ] ],
  "tokensMethodVariablesNonPrivateNonStaticNonVoidMethods" : [ [ "isEnabled", "de.neemann.digital.core.wiring", "Break", "public boolean isEnabled()" ], [ "hashCode", "java.lang", "Object", "public native int hashCode()" ], [ "getCycles", "de.neemann.digital.core.wiring", "Break", "public int getCycles()" ], [ "getLabel", "de.neemann.digital.core.wiring", "Break", "public String getLabel()" ], [ "equals", "java.lang", "Object", "public boolean equals(Object arg0)" ], [ "toString", "java.lang", "Object", "public String toString()" ], [ "getClass", "java.lang", "Object", "public final native Class<? extends Object> getClass()" ], [ "getOutputs", "de.neemann.digital.core.wiring", "Break", "public ObservableValues getOutputs()" ], [ "clone", "java.lang", "Object", "protected native Object clone() throws CloneNotSupportedException" ], [ "getBreakInput", "de.neemann.digital.core.wiring", "Break", "public ObservableValue getBreakInput()" ], [ "getNames", "de.neemann.digital.core", "ObservableValues", "public ArrayList<String> getNames()" ], [ "get", "de.neemann.digital.core", "ObservableValues", "public ObservableValue get(String arg0)" ], [ "contains", "de.neemann.digital.core.element", "ImmutableList", "public boolean contains(Object arg0)" ], [ "removeAll", "de.neemann.digital.core.element", "ImmutableList", "public boolean removeAll(Collection<?> arg0)" ], [ "add", "de.neemann.digital.core.element", "ImmutableList", "public boolean add(T arg0)" ], [ "addAll", "de.neemann.digital.core.element", "ImmutableList", "public boolean addAll(Collection<? extends T> arg0)" ], [ "get", "de.neemann.digital.core.element", "ImmutableList", "public T get(int arg0)" ], [ "set", "de.neemann.digital.core.element", "ImmutableList", "public T set(int arg0, T arg1)" ], [ "remove", "de.neemann.digital.core.element", "ImmutableList", "public T remove(int arg0)" ], [ "addAll", "de.neemann.digital.core.element", "ImmutableList", "public boolean addAll(int arg0, Collection<? extends T> arg1)" ], [ "indexOf", "de.neemann.digital.core.element", "ImmutableList", "public int indexOf(Object arg0)" ], [ "subList", "de.neemann.digital.core.element", "ImmutableList", "public List<T> subList(int arg0, int arg1)" ], [ "containsAll", "de.neemann.digital.core.element", "ImmutableList", "public boolean containsAll(Collection<?> arg0)" ], [ "size", "de.neemann.digital.core.element", "ImmutableList", "public int size()" ], [ "toArray", "de.neemann.digital.core.element", "ImmutableList", "public <T1> T1[] toArray(T1[] arg0)" ], [ "retainAll", "de.neemann.digital.core.element", "ImmutableList", "public boolean retainAll(Collection<?> arg0)" ], [ "listIterator", "de.neemann.digital.core.element", "ImmutableList", "public ListIterator<T> listIterator()" ], [ "listIterator", "de.neemann.digital.core.element", "ImmutableList", "public ListIterator<T> listIterator(int arg0)" ], [ "remove", "de.neemann.digital.core.element", "ImmutableList", "public boolean remove(Object arg0)" ], [ "lastIndexOf", "de.neemann.digital.core.element", "ImmutableList", "public int lastIndexOf(Object arg0)" ], [ "isEmpty", "de.neemann.digital.core.element", "ImmutableList", "public boolean isEmpty()" ], [ "iterator", "de.neemann.digital.core.element", "ImmutableList", "public Iterator<T> iterator()" ], [ "toArray", "de.neemann.digital.core.element", "ImmutableList", "public Object[] toArray()" ], [ "remove", "java.util", "List", "public abstract E remove(int arg0)" ], [ "addAll", "java.util", "List", "public abstract boolean addAll(Collection<? extends E> arg0)" ], [ "remove", "java.util", "List", "public abstract boolean remove(Object arg0)" ], [ "toArray", "java.util", "List", "public abstract <T> T[] toArray(T[] arg0)" ], [ "contains", "java.util", "List", "public abstract boolean contains(Object arg0)" ], [ "set", "java.util", "List", "public abstract E set(int arg0, E arg1)" ], [ "addAll", "java.util", "List", "public abstract boolean addAll(int arg0, Collection<? extends E> arg1)" ], [ "equals", "java.util", "List", "public abstract boolean equals(Object arg0)" ], [ "lastIndexOf", "java.util", "List", "public abstract int lastIndexOf(Object arg0)" ], [ "retainAll", "java.util", "List", "public abstract boolean retainAll(Collection<? extends Object> arg0)" ], [ "size", "java.util", "List", "public abstract int size()" ], [ "spliterator", "java.util", "List", "public default Spliterator<E> spliterator()" ], [ "subList", "java.util", "List", "public abstract List<E> subList(int arg0, int arg1)" ], [ "add", "java.util", "List", "public abstract boolean add(E arg0)" ], [ "indexOf", "java.util", "List", "public abstract int indexOf(Object arg0)" ], [ "listIterator", "java.util", "List", "public abstract ListIterator<E> listIterator(int arg0)" ], [ "listIterator", "java.util", "List", "public abstract ListIterator<E> listIterator()" ], [ "get", "java.util", "List", "public abstract E get(int arg0)" ], [ "isEmpty", "java.util", "List", "public abstract boolean isEmpty()" ], [ "toArray", "java.util", "List", "public abstract Object[] toArray()" ], [ "hashCode", "java.util", "List", "public abstract int hashCode()" ], [ "iterator", "java.util", "List", "public abstract Iterator<E> iterator()" ], [ "removeAll", "java.util", "List", "public abstract boolean removeAll(Collection<? extends Object> arg0)" ], [ "containsAll", "java.util", "List", "public abstract boolean containsAll(Collection<? extends Object> arg0)" ], [ "stream", "java.util", "Collection", "public default Stream<E> stream()" ], [ "spliterator", "java.util", "Collection", "public default Spliterator<E> spliterator()" ], [ "iterator", "java.util", "Collection", "public abstract Iterator<E> iterator()" ], [ "retainAll", "java.util", "Collection", "public abstract boolean retainAll(Collection<? extends Object> arg0)" ], [ "hashCode", "java.util", "Collection", "public abstract int hashCode()" ], [ "isEmpty", "java.util", "Collection", "public abstract boolean isEmpty()" ], [ "addAll", "java.util", "Collection", "public abstract boolean addAll(Collection<? extends E> arg0)" ], [ "removeIf", "java.util", "Collection", "public default boolean removeIf(Predicate<? super E> arg0)" ], [ "toArray", "java.util", "Collection", "public abstract <T> T[] toArray(T[] arg0)" ], [ "size", "java.util", "Collection", "public abstract int size()" ], [ "add", "java.util", "Collection", "public abstract boolean add(E arg0)" ], [ "removeAll", "java.util", "Collection", "public abstract boolean removeAll(Collection<? extends Object> arg0)" ], [ "containsAll", "java.util", "Collection", "public abstract boolean containsAll(Collection<? extends Object> arg0)" ], [ "contains", "java.util", "Collection", "public abstract boolean contains(Object arg0)" ], [ "toArray", "java.util", "Collection", "public abstract Object[] toArray()" ], [ "parallelStream", "java.util", "Collection", "public default Stream<E> parallelStream()" ], [ "toArray", "java.util", "Collection", "public default <T> T[] toArray(IntFunction<T[]> arg0)" ], [ "equals", "java.util", "Collection", "public abstract boolean equals(Object arg0)" ], [ "remove", "java.util", "Collection", "public abstract boolean remove(Object arg0)" ], [ "iterator", "java.lang", "Iterable", "public abstract Iterator<T> iterator()" ], [ "spliterator", "java.lang", "Iterable", "public default Spliterator<T> spliterator()" ] ],
  "tokensMethodVariablesNonPrivateNonStaticAttributes" : [ ],
  "tokensOracleVariablesNonPrivateNonStaticNonVoidMethods" : [ ],
  "tokensOracleVariablesNonPrivateNonStaticAttributes" : [ ]
}, {
  "id" : 26708,
  "oracle" : "inputs != null && inputs.size() > 0;",
  "oracleType" : "PRE",
  "projectName" : "Digital",
  "packageName" : "de.neemann.digital.core.wiring",
  "className" : "Break",
  "javadocTag" : "",
  "methodJavadoc" : "",
  "methodSourceCode" : "public void setInputs(ObservableValues inputs) throws NodeException{\n    input = inputs.get(0).checkBits(1, null);\n}",
  "classJavadoc" : "/**\n * The Break element\n */",
  "classSourceCode" : "/*\n * Copyright (c) 2016 Helmut Neemann\n * Use of this source code is governed by the GPL v3 license\n * that can be found in the LICENSE file.\n */\npackage de.neemann.digital.core.wiring;\n\nimport de.neemann.digital.core.Model;\nimport de.neemann.digital.core.NodeException;\nimport de.neemann.digital.core.ObservableValue;\nimport de.neemann.digital.core.ObservableValues;\nimport de.neemann.digital.core.element.Element;\nimport de.neemann.digital.core.element.ElementAttributes;\nimport de.neemann.digital.core.element.ElementTypeDescription;\nimport de.neemann.digital.core.element.Keys;\n\nimport static de.neemann.digital.core.element.PinInfo.input;\n\n/**\n * The Break element\n */\npublic class Break implements Element {\n\n    /**\n     * The Break description\n     */\n    public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Break.class, input(\"brk\"))\n            .addAttribute(Keys.ROTATE)\n            .addAttribute(Keys.LABEL)\n            .addAttribute(Keys.ENABLED)\n            .addAttribute(Keys.CYCLES);\n\n    private final int cycles;\n    private final String label;\n    private final boolean enabled;\n    private ObservableValue input;\n\n    /**\n     * Creates a new instance\n     *\n     * @param attributes the attributes\n     */\n    public Break(ElementAttributes attributes) {\n        cycles = attributes.get(Keys.CYCLES);\n        enabled = attributes.get(Keys.ENABLED);\n        label = attributes.getLabel();\n    }\n\n    @Override\n    public void setInputs(ObservableValues inputs) throws NodeException {\n        input = inputs.get(0).checkBits(1, null);\n    }\n\n    /**\n     * @return the break value\n     */\n    public ObservableValue getBreakInput() {\n        return input;\n    }\n\n    /**\n     * @return the timeout cycles\n     */\n    public int getCycles() {\n        return cycles;\n    }\n\n    @Override\n    public ObservableValues getOutputs() {\n        return ObservableValues.EMPTY_LIST;\n    }\n\n    @Override\n    public void registerNodes(Model model) {\n        model.addBreak(this);\n    }\n\n    /**\n     * @return the break label\n     */\n    public String getLabel() {\n        return label;\n    }\n\n    /**\n     * @return true if enabled\n     */\n    public boolean isEnabled() {\n        return enabled;\n    }\n}\n",
  "tokensGeneralGrammar" : [ "null", "true", "false", ",", ".", ":", ";", "?", "(", ")", "jdVar", "stream", "Arrays", "allMatch", "noneMatch", "anyMatch", "~", ">>", "<<", ">>>", "|", "&", "^", "+", "-", "/", "*", "%", "&&", "||", ">=", "<=", ">", "<", "==", "!=", "instanceof", "class", "methodResultID", "this" ],
  "tokensGeneralValuesGlobalDictionary" : [ [ "0", "int" ], [ "1", "int" ], [ "-1", "int" ], [ "0.0", "double" ], [ "1.0", "double" ], [ "-1.0", "double" ], [ "\"\"", "String" ], [ "\" \"", "String" ] ],
  "tokensProjectClasses" : [ [ "CLI", "de.neemann" ], [ "Mouse", "de.neemann.gui" ], [ "LineBreaker", "de.neemann.gui" ], [ "IconCreator", "de.neemann.gui" ], [ "ConfirmDialogBuilder", "de.neemann.gui" ], [ "Resources", "de.neemann.gui.language" ], [ "Bundle", "de.neemann.gui.language" ], [ "Language", "de.neemann.gui.language" ], [ "ToolTipAction", "de.neemann.gui" ], [ "MyFileChooser", "de.neemann.gui" ], [ "ClosingWindowListener", "de.neemann.gui" ], [ "ErrorMessage", "de.neemann.gui" ], [ "WindowSizeStorage", "de.neemann.gui" ], [ "Screen", "de.neemann.gui" ], [ "ToolTipProvider", "de.neemann.gui" ], [ "InfoDialog", "de.neemann.gui" ], [ "ValueFormatter", "de.neemann.digital.core" ], [ "ModelStateObserver", "de.neemann.digital.core" ], [ "PullDown", "de.neemann.digital.core.pld" ], [ "Diode", "de.neemann.digital.core.pld" ], [ "DiodeBackward", "de.neemann.digital.core.pld" ], [ "PullUp", "de.neemann.digital.core.pld" ], [ "DiodeForward", "de.neemann.digital.core.pld" ], [ "Node", "de.neemann.digital.core" ], [ "RAMSinglePort", "de.neemann.digital.core.memory" ], [ "ROMDualPort", "de.neemann.digital.core.memory" ], [ "RAMDualAccess", "de.neemann.digital.core.memory" ], [ "ByteArrayFromValueArray", "de.neemann.digital.core.memory.importer" ], [ "Importer", "de.neemann.digital.core.memory.importer" ], [ "LogisimReader", "de.neemann.digital.core.memory.importer" ], [ "DataFieldValueArray", "de.neemann.digital.core.memory.importer" ], [ "ByteArrayReader", "de.neemann.digital.core.memory.importer" ], [ "ValueArrayReader", "de.neemann.digital.core.memory.importer" ], [ "IntelHexReader", "de.neemann.digital.core.memory.importer" ], [ "ValueArray", "de.neemann.digital.core.memory.importer" ], [ "BinReader", "de.neemann.digital.core.memory.importer" ], [ "ByteArray", "de.neemann.digital.core.memory.importer" ], [ "MultiValueArray", "de.neemann.digital.core.memory.importer" ], [ "CounterPreset", "de.neemann.digital.core.memory" ], [ "RAMDualPort", "de.neemann.digital.core.memory" ], [ "Register", "de.neemann.digital.core.memory" ], [ "LookUpTable", "de.neemann.digital.core.memory" ], [ "BlockRAMDualPort", "de.neemann.digital.core.memory" ], [ "Counter", "de.neemann.digital.core.memory" ], [ "ROMMangerBase", "de.neemann.digital.core.memory.rom" ], [ "ROMManagerFile", "de.neemann.digital.core.memory.rom" ], [ "ROMManager", "de.neemann.digital.core.memory.rom" ], [ "ROMInterface", "de.neemann.digital.core.memory.rom" ], [ "EEPROM", "de.neemann.digital.core.memory" ], [ "ProgramCounter", "de.neemann.digital.core.memory" ], [ "RAMAsync", "de.neemann.digital.core.memory" ], [ "ROM", "de.neemann.digital.core.memory" ], [ "DataField", "de.neemann.digital.core.memory" ], [ "EEPROMDualPort", "de.neemann.digital.core.memory" ], [ "RAMInterface", "de.neemann.digital.core.memory" ], [ "DataFieldConverter", "de.neemann.digital.core.memory" ], [ "RAMSinglePortSel", "de.neemann.digital.core.memory" ], [ "ProgramMemory", "de.neemann.digital.core.memory" ], [ "RegisterFile", "de.neemann.digital.core.memory" ], [ "ModelStateObserverTyped", "de.neemann.digital.core" ], [ "Observable", "de.neemann.digital.core" ], [ "NodeWithoutDelay", "de.neemann.digital.core" ], [ "ExceptionWithOrigin", "de.neemann.digital.core" ], [ "ObservableValue", "de.neemann.digital.core" ], [ "SpeedTest", "de.neemann.digital.core" ], [ "BurnException", "de.neemann.digital.core" ], [ "GlobalValues", "de.neemann.digital.core" ], [ "MIDI", "de.neemann.digital.core.io" ], [ "RGBLED", "de.neemann.digital.core.io" ], [ "Out", "de.neemann.digital.core.io" ], [ "RotEncoder", "de.neemann.digital.core.io" ], [ "PinControl", "de.neemann.digital.core.io" ], [ "DipSwitch", "de.neemann.digital.core.io" ], [ "CommonConnectionType", "de.neemann.digital.core.io" ], [ "LightBulb", "de.neemann.digital.core.io" ], [ "Probe", "de.neemann.digital.core.io" ], [ "Button", "de.neemann.digital.core.io" ], [ "ButtonLED", "de.neemann.digital.core.io" ], [ "In", "de.neemann.digital.core.io" ], [ "StepperMotorUnipolar", "de.neemann.digital.core.io" ], [ "ProbeMode", "de.neemann.digital.core.io" ], [ "NotConnected", "de.neemann.digital.core.io" ], [ "MIDIHelper", "de.neemann.digital.core.io" ], [ "StepperMotorBipolar", "de.neemann.digital.core.io" ], [ "Const", "de.neemann.digital.core.io" ], [ "PowerSupply", "de.neemann.digital.core.io" ], [ "Ground", "de.neemann.digital.core.io" ], [ "InValue", "de.neemann.digital.core.io" ], [ "VDD", "de.neemann.digital.core.io" ], [ "ServerHolder", "de.neemann.digital.core.io.telnet" ], [ "Telnet", "de.neemann.digital.core.io.telnet" ], [ "ByteBuffer", "de.neemann.digital.core.io.telnet" ], [ "Server", "de.neemann.digital.core.io.telnet" ], [ "ElementAttributes", "de.neemann.digital.core.element" ], [ "Element", "de.neemann.digital.core.element" ], [ "ElementFactory", "de.neemann.digital.core.element" ], [ "PinInfo", "de.neemann.digital.core.element" ], [ "PinDescriptions", "de.neemann.digital.core.element" ], [ "PinDescription", "de.neemann.digital.core.element" ], [ "Keys", "de.neemann.digital.core.element" ], [ "Rotation", "de.neemann.digital.core.element" ], [ "AttributeListener", "de.neemann.digital.core.element" ], [ "Key", "de.neemann.digital.core.element" ], [ "ImmutableList", "de.neemann.digital.core.element" ], [ "ElementTypeDescription", "de.neemann.digital.core.element" ], [ "FanIn", "de.neemann.digital.core.basic" ], [ "NOr", "de.neemann.digital.core.basic" ], [ "And", "de.neemann.digital.core.basic" ], [ "XNOr", "de.neemann.digital.core.basic" ], [ "XOr", "de.neemann.digital.core.basic" ], [ "Not", "de.neemann.digital.core.basic" ], [ "NAnd", "de.neemann.digital.core.basic" ], [ "Function", "de.neemann.digital.core.basic" ], [ "Or", "de.neemann.digital.core.basic" ], [ "ExceptionWithOriginInterface", "de.neemann.digital.core" ], [ "ModelEvent", "de.neemann.digital.core" ], [ "BacktrackException", "de.neemann.digital.core" ], [ "PlainSwitch", "de.neemann.digital.core.switching" ], [ "FGPFET", "de.neemann.digital.core.switching" ], [ "NFET", "de.neemann.digital.core.switching" ], [ "FGNFET", "de.neemann.digital.core.switching" ], [ "PFET", "de.neemann.digital.core.switching" ], [ "PlainSwitchDT", "de.neemann.digital.core.switching" ], [ "TransGate", "de.neemann.digital.core.switching" ], [ "SwitchDT", "de.neemann.digital.core.switching" ], [ "Relay", "de.neemann.digital.core.switching" ], [ "RelayDT", "de.neemann.digital.core.switching" ], [ "Switch", "de.neemann.digital.core.switching" ], [ "Fuse", "de.neemann.digital.core.switching" ], [ "Reset", "de.neemann.digital.core.wiring" ], [ "Stop", "de.neemann.digital.core.wiring" ], [ "Decoder", "de.neemann.digital.core.wiring" ], [ "Delay", "de.neemann.digital.core.wiring" ], [ "Driver", "de.neemann.digital.core.wiring" ], [ "DataBus", "de.neemann.digital.core.wiring.bus" ], [ "SingleBusHandler", "de.neemann.digital.core.wiring.bus" ], [ "ConnectedBusHandler", "de.neemann.digital.core.wiring.bus" ], [ "AbstractBusHandler", "de.neemann.digital.core.wiring.bus" ], [ "BusModelStateObserver", "de.neemann.digital.core.wiring.bus" ], [ "CommonBusValue", "de.neemann.digital.core.wiring.bus" ], [ "DriverInvSel", "de.neemann.digital.core.wiring" ], [ "PriorityEncoder", "de.neemann.digital.core.wiring" ], [ "BusSplitter", "de.neemann.digital.core.wiring" ], [ "Splitter", "de.neemann.digital.core.wiring" ], [ "Multiplexer", "de.neemann.digital.core.wiring" ], [ "BitSelector", "de.neemann.digital.core.wiring" ], [ "Break", "de.neemann.digital.core.wiring" ], [ "Clock", "de.neemann.digital.core.wiring" ], [ "AsyncSeq", "de.neemann.digital.core.wiring" ], [ "Demultiplexer", "de.neemann.digital.core.wiring" ], [ "BitsException", "de.neemann.digital.core" ], [ "NodeInterface", "de.neemann.digital.core" ], [ "NodeException", "de.neemann.digital.core" ], [ "FlipflopDAsync", "de.neemann.digital.core.flipflops" ], [ "FlipflopD", "de.neemann.digital.core.flipflops" ], [ "FlipflopRSAsync", "de.neemann.digital.core.flipflops" ], [ "FlipflopT", "de.neemann.digital.core.flipflops" ], [ "FlipflopJKAsync", "de.neemann.digital.core.flipflops" ], [ "FlipflopJK", "de.neemann.digital.core.flipflops" ], [ "Monoflop", "de.neemann.digital.core.flipflops" ], [ "FlipflopRS", "de.neemann.digital.core.flipflops" ], [ "FlipflopBit", "de.neemann.digital.core.flipflops" ], [ "BarrelShifter", "de.neemann.digital.core.arithmetic" ], [ "Mul", "de.neemann.digital.core.arithmetic" ], [ "Neg", "de.neemann.digital.core.arithmetic" ], [ "BitExtender", "de.neemann.digital.core.arithmetic" ], [ "Add", "de.neemann.digital.core.arithmetic" ], [ "Div", "de.neemann.digital.core.arithmetic" ], [ "LeftRightFormat", "de.neemann.digital.core.arithmetic" ], [ "PRNG", "de.neemann.digital.core.arithmetic" ], [ "Sub", "de.neemann.digital.core.arithmetic" ], [ "BarrelShifterMode", "de.neemann.digital.core.arithmetic" ], [ "Comparator", "de.neemann.digital.core.arithmetic" ], [ "BitCount", "de.neemann.digital.core.arithmetic" ], [ "ObservableValues", "de.neemann.digital.core" ], [ "Value", "de.neemann.digital.core" ], [ "IntFormat", "de.neemann.digital.core" ], [ "SyncAccess", "de.neemann.digital.core" ], [ "Bits", "de.neemann.digital.core" ], [ "ProcessInterface", "de.neemann.digital.core.extern.handler" ], [ "StdIOInterface", "de.neemann.digital.core.extern.handler" ], [ "ApplicationVerilogStdIO", "de.neemann.digital.core.extern" ], [ "Application", "de.neemann.digital.core.extern" ], [ "External", "de.neemann.digital.core.extern" ], [ "Port", "de.neemann.digital.core.extern" ], [ "PortDefinition", "de.neemann.digital.core.extern" ], [ "ApplicationGHDL", "de.neemann.digital.core.extern" ], [ "ApplicationIVerilog", "de.neemann.digital.core.extern" ], [ "ApplicationVHDLStdIO", "de.neemann.digital.core.extern" ], [ "VHDLTokenizer", "de.neemann.digital.core.extern" ], [ "ApplicationGeneric", "de.neemann.digital.core.extern" ], [ "Options", "de.neemann.digital.core.extern" ], [ "VerilogTokenizer", "de.neemann.digital.core.extern" ], [ "ExternalFile", "de.neemann.digital.core.extern" ], [ "ProcessStarter", "de.neemann.digital.core.extern" ], [ "ModelEventType", "de.neemann.digital.core" ], [ "Observer", "de.neemann.digital.core" ], [ "ErrorDetector", "de.neemann.digital.core" ], [ "Statistics", "de.neemann.digital.core.stats" ], [ "Countable", "de.neemann.digital.core.stats" ], [ "Model", "de.neemann.digital.core" ], [ "Signal", "de.neemann.digital.core" ], [ "StringList", "de.neemann.digital" ], [ "XStreamValid", "de.neemann.digital" ], [ "StatsExport", "de.neemann.digital.cli" ], [ "SVGExport", "de.neemann.digital.cli" ], [ "CommandLineTester", "de.neemann.digital.cli" ], [ "CSVWriter", "de.neemann.digital.cli" ], [ "BasicCommand", "de.neemann.digital.cli.cli" ], [ "Argument", "de.neemann.digital.cli.cli" ], [ "CLIException", "de.neemann.digital.cli.cli" ], [ "Muxer", "de.neemann.digital.cli.cli" ], [ "ArgumentKey", "de.neemann.digital.cli.cli" ], [ "NamedCommand", "de.neemann.digital.cli.cli" ], [ "CLICommand", "de.neemann.digital.cli.cli" ], [ "ArgumentBase", "de.neemann.digital.cli.cli" ], [ "CircuitLoader", "de.neemann.digital.cli" ], [ "Main", "de.neemann.digital.cli" ], [ "Modification", "de.neemann.digital.undo" ], [ "Modifications", "de.neemann.digital.undo" ], [ "ModifyException", "de.neemann.digital.undo" ], [ "Copyable", "de.neemann.digital.undo" ], [ "UndoManager", "de.neemann.digital.undo" ], [ "ChangedListener", "de.neemann.digital.undo" ], [ "CircuitRepresentation", "de.neemann.digital.fsm" ], [ "Transition", "de.neemann.digital.fsm" ], [ "Movable", "de.neemann.digital.fsm" ], [ "MouseMovable", "de.neemann.digital.fsm" ], [ "Optimizer", "de.neemann.digital.fsm" ], [ "Permute", "de.neemann.digital.fsm" ], [ "FiniteStateMachineException", "de.neemann.digital.fsm" ], [ "TransitionTableCreator", "de.neemann.digital.fsm" ], [ "ValueParser", "de.neemann.digital.fsm" ], [ "WaitGroup", "de.neemann.digital.fsm" ], [ "FSMComponent", "de.neemann.digital.fsm.gui" ], [ "FSMFrame", "de.neemann.digital.fsm.gui" ], [ "OptimizerDialog", "de.neemann.digital.fsm.gui" ], [ "FSMDemos", "de.neemann.digital.fsm" ], [ "FSM", "de.neemann.digital.fsm" ], [ "State", "de.neemann.digital.fsm" ], [ "Lang", "de.neemann.digital.lang" ], [ "LineListenerResolveDontCare", "de.neemann.digital.testing" ], [ "TestingDataException", "de.neemann.digital.testing" ], [ "UnitTester", "de.neemann.digital.testing" ], [ "FolderTestRunner", "de.neemann.digital.testing" ], [ "TestExecutor", "de.neemann.digital.testing" ], [ "Transitions", "de.neemann.digital.testing" ], [ "TestCaseDescription", "de.neemann.digital.testing" ], [ "TestCaseElement", "de.neemann.digital.testing" ], [ "LineEmitterRepeat", "de.neemann.digital.testing.parser" ], [ "Parser", "de.neemann.digital.testing.parser" ], [ "ValueAppenderBits", "de.neemann.digital.testing.parser" ], [ "ParserException", "de.neemann.digital.testing.parser" ], [ "Context", "de.neemann.digital.testing.parser" ], [ "ModelInitializer", "de.neemann.digital.testing.parser" ], [ "Expression", "de.neemann.digital.testing.parser" ], [ "LineEmitterList", "de.neemann.digital.testing.parser" ], [ "TestRow", "de.neemann.digital.testing.parser" ], [ "LineEmitter", "de.neemann.digital.testing.parser" ], [ "LineEmitterWhile", "de.neemann.digital.testing.parser" ], [ "Tokenizer", "de.neemann.digital.testing.parser" ], [ "LineEmitterSimple", "de.neemann.digital.testing.parser" ], [ "Random", "de.neemann.digital.testing.parser.functions" ], [ "SignExtend", "de.neemann.digital.testing.parser.functions" ], [ "IfThenElse", "de.neemann.digital.testing.parser.functions" ], [ "Function", "de.neemann.digital.testing.parser.functions" ], [ "LineListener", "de.neemann.digital.testing.parser" ], [ "VirtualSignal", "de.neemann.digital.testing.parser" ], [ "ValueAppender", "de.neemann.digital.testing.parser" ], [ "OperatorPrecedence", "de.neemann.digital.testing.parser" ], [ "TestResultListener", "de.neemann.digital.testing" ], [ "MatchedValue", "de.neemann.digital.testing" ], [ "TestResult", "de.neemann.digital.testing" ], [ "MinimizerInterface", "de.neemann.digital.analyse" ], [ "LabelNumbering", "de.neemann.digital.analyse" ], [ "ModelAnalyser", "de.neemann.digital.analyse" ], [ "CSVImporter", "de.neemann.digital.analyse" ], [ "BoolTableExpanded", "de.neemann.digital.analyse" ], [ "TruthTableTableModel", "de.neemann.digital.analyse" ], [ "TableReducer", "de.neemann.digital.analyse.quinemc" ], [ "PrimeSelector", "de.neemann.digital.analyse.quinemc.primeselector" ], [ "BruteForce", "de.neemann.digital.analyse.quinemc.primeselector" ], [ "LargestFirst", "de.neemann.digital.analyse.quinemc.primeselector" ], [ "BruteForceGetAll", "de.neemann.digital.analyse.quinemc.primeselector" ], [ "PrimeSelectorDefault", "de.neemann.digital.analyse.quinemc.primeselector" ], [ "BoolTableByteArray", "de.neemann.digital.analyse.quinemc" ], [ "IndependentChecker", "de.neemann.digital.analyse.quinemc" ], [ "QuineMcCluskey", "de.neemann.digital.analyse.quinemc" ], [ "BoolTableExpression", "de.neemann.digital.analyse.quinemc" ], [ "BoolTableBoolArray", "de.neemann.digital.analyse.quinemc" ], [ "BoolTable", "de.neemann.digital.analyse.quinemc" ], [ "TableRows", "de.neemann.digital.analyse.quinemc" ], [ "ThreeStateValue", "de.neemann.digital.analyse.quinemc" ], [ "QuineMcCluskeyExam", "de.neemann.digital.analyse.quinemc" ], [ "TableRow", "de.neemann.digital.analyse.quinemc" ], [ "TruthTableConverter", "de.neemann.digital.analyse" ], [ "DetermineJKStateMachine", "de.neemann.digital.analyse" ], [ "Parser", "de.neemann.digital.analyse.parser" ], [ "ParseException", "de.neemann.digital.analyse.parser" ], [ "Tokenizer", "de.neemann.digital.analyse.parser" ], [ "ModelAnalyserInfo", "de.neemann.digital.analyse" ], [ "AnalyseException", "de.neemann.digital.analyse" ], [ "DependencyAnalyser", "de.neemann.digital.analyse" ], [ "SubstituteLibrary", "de.neemann.digital.analyse" ], [ "TruthTableFormatterHex", "de.neemann.digital.analyse.format" ], [ "TruthTableFormatter", "de.neemann.digital.analyse.format" ], [ "TruthTableFormatterTestCase", "de.neemann.digital.analyse.format" ], [ "TruthTableFormatterCSV", "de.neemann.digital.analyse.format" ], [ "TruthTableFormatterLaTeX", "de.neemann.digital.analyse.format" ], [ "MinimizerQuineMcCluskey", "de.neemann.digital.analyse" ], [ "ContextFiller", "de.neemann.digital.analyse.expression" ], [ "BitSetter", "de.neemann.digital.analyse.expression" ], [ "ExpressionVisitor", "de.neemann.digital.analyse.expression" ], [ "ContextMap", "de.neemann.digital.analyse.expression" ], [ "ComplexityVisitor", "de.neemann.digital.analyse.expression" ], [ "Operation", "de.neemann.digital.analyse.expression" ], [ "Context", "de.neemann.digital.analyse.expression" ], [ "NInputs", "de.neemann.digital.analyse.expression.modify" ], [ "NOr", "de.neemann.digital.analyse.expression.modify" ], [ "ExpressionModifier", "de.neemann.digital.analyse.expression.modify" ], [ "NAnd", "de.neemann.digital.analyse.expression.modify" ], [ "Constant", "de.neemann.digital.analyse.expression" ], [ "Expression", "de.neemann.digital.analyse.expression" ], [ "Variable", "de.neemann.digital.analyse.expression" ], [ "ExpressionException", "de.neemann.digital.analyse.expression" ], [ "ComplexityInclNotVisitor", "de.neemann.digital.analyse.expression" ], [ "Equals", "de.neemann.digital.analyse.expression" ], [ "FormatToExpression", "de.neemann.digital.analyse.expression.format" ], [ "FormatToTable", "de.neemann.digital.analyse.expression.format" ], [ "Formatter", "de.neemann.digital.analyse.expression.format" ], [ "FormatterException", "de.neemann.digital.analyse.expression.format" ], [ "FormatToTableLatex", "de.neemann.digital.analyse.expression.format" ], [ "Not", "de.neemann.digital.analyse.expression" ], [ "VariableVisitor", "de.neemann.digital.analyse.expression" ], [ "NamedExpression", "de.neemann.digital.analyse.expression" ], [ "MinimizerQuineMcCluskeyExam", "de.neemann.digital.analyse" ], [ "TruthTable", "de.neemann.digital.analyse" ], [ "SplitPinString", "de.neemann.digital.analyse" ], [ "CycleDetector", "de.neemann.digital.analyse" ], [ "DigitalRemoteInterface", "de.neemann.digital.gui" ], [ "TextSearchFilter", "de.neemann.digital.gui" ], [ "ExportZipAction", "de.neemann.digital.gui" ], [ "SettingsBase", "de.neemann.digital.gui" ], [ "DocumentationLocator", "de.neemann.digital.gui" ], [ "InitialTutorial", "de.neemann.digital.gui.tutorial" ], [ "InsertAction", "de.neemann.digital.gui" ], [ "StatusInterface", "de.neemann.digital.gui" ], [ "SearchTextField", "de.neemann.digital.gui" ], [ "SaveAsHelper", "de.neemann.digital.gui" ], [ "FileHistory", "de.neemann.digital.gui" ], [ "ReleaseInfo", "de.neemann.digital.gui.release" ], [ "CheckForNewRelease", "de.neemann.digital.gui.release" ], [ "StateInterface", "de.neemann.digital.gui.state" ], [ "StateManager", "de.neemann.digital.gui.state" ], [ "State", "de.neemann.digital.gui.state" ], [ "CircuitScrollPanel", "de.neemann.digital.gui.components" ], [ "ItemPicker", "de.neemann.digital.gui.components" ], [ "LibraryTreeModel", "de.neemann.digital.gui.components.tree" ], [ "SelectTree", "de.neemann.digital.gui.components.tree" ], [ "WindowPosManager", "de.neemann.digital.gui.components" ], [ "CustomShapeEditor", "de.neemann.digital.gui.components" ], [ "TransformHolder", "de.neemann.digital.gui.components" ], [ "EditorPanel", "de.neemann.digital.gui.components" ], [ "BehavioralFixtureCreator", "de.neemann.digital.gui.components" ], [ "EditorFactory", "de.neemann.digital.gui.components" ], [ "OrderMerger", "de.neemann.digital.gui.components" ], [ "ElementOrderer", "de.neemann.digital.gui.components" ], [ "ModifyMoveSelected", "de.neemann.digital.gui.components.modification" ], [ "ModifyMoveWire", "de.neemann.digital.gui.components.modification" ], [ "ModificationOfWire", "de.neemann.digital.gui.components.modification" ], [ "ModifyDeleteRect", "de.neemann.digital.gui.components.modification" ], [ "ModifyInsertWires", "de.neemann.digital.gui.components.modification" ], [ "ModifyInsertWire", "de.neemann.digital.gui.components.modification" ], [ "ModificationOfVisualElement", "de.neemann.digital.gui.components.modification" ], [ "ModifyCircuitAttributes", "de.neemann.digital.gui.components.modification" ], [ "ModifyDeleteWire", "de.neemann.digital.gui.components.modification" ], [ "ModifyMoveAndRotElement", "de.neemann.digital.gui.components.modification" ], [ "ModifyMeasurementOrdering", "de.neemann.digital.gui.components.modification" ], [ "ModifyDeleteElement", "de.neemann.digital.gui.components.modification" ], [ "ModifyAttribute", "de.neemann.digital.gui.components.modification" ], [ "ModifyAttributes", "de.neemann.digital.gui.components.modification" ], [ "ModifyInsertElement", "de.neemann.digital.gui.components.modification" ], [ "DataEditor", "de.neemann.digital.gui.components" ], [ "CircuitModifierPostClosed", "de.neemann.digital.gui.components" ], [ "CharDeleter", "de.neemann.digital.gui.components.terminal" ], [ "ConsoleTerminal", "de.neemann.digital.gui.components.terminal" ], [ "Terminal", "de.neemann.digital.gui.components.terminal" ], [ "TerminalDialog", "de.neemann.digital.gui.components.terminal" ], [ "TerminalInterface", "de.neemann.digital.gui.components.terminal" ], [ "Keyboard", "de.neemann.digital.gui.components.terminal" ], [ "KeyboardDialog", "de.neemann.digital.gui.components.terminal" ], [ "Editor", "de.neemann.digital.gui.components" ], [ "VarRectList", "de.neemann.digital.gui.components.karnaugh" ], [ "KarnaughMap", "de.neemann.digital.gui.components.karnaugh" ], [ "KarnaughMapComponent", "de.neemann.digital.gui.components.karnaugh" ], [ "KarnaughMapDialog", "de.neemann.digital.gui.components.karnaugh" ], [ "MapLayout", "de.neemann.digital.gui.components.karnaugh" ], [ "KarnaughException", "de.neemann.digital.gui.components.karnaugh" ], [ "CircuitTransferable", "de.neemann.digital.gui.components" ], [ "ElementHelpDialog", "de.neemann.digital.gui.components" ], [ "TestCaseDescriptionDialog", "de.neemann.digital.gui.components.testing" ], [ "ValueTableDialog", "de.neemann.digital.gui.components.testing" ], [ "TestCaseDescriptionEditor", "de.neemann.digital.gui.components.testing" ], [ "TestAllDialog", "de.neemann.digital.gui.components.testing" ], [ "ExpressionListenerOptimizeJK", "de.neemann.digital.gui.components.table" ], [ "LaTeXExpressionListener", "de.neemann.digital.gui.components.table" ], [ "HardwareDescriptionGenerator", "de.neemann.digital.gui.components.table.hardware" ], [ "GenerateFile", "de.neemann.digital.gui.components.table.hardware" ], [ "GenerateCUPL", "de.neemann.digital.gui.components.table.hardware" ], [ "ExpressionListener", "de.neemann.digital.gui.components.table" ], [ "ReorderOutputs", "de.neemann.digital.gui.components.table" ], [ "AllSolutionsDialog", "de.neemann.digital.gui.components.table" ], [ "ExpressionListenerJK", "de.neemann.digital.gui.components.table" ], [ "ExpressionListenerCSVCondensed", "de.neemann.digital.gui.components.table" ], [ "ExpressionCreator", "de.neemann.digital.gui.components.table" ], [ "TableDialog", "de.neemann.digital.gui.components.table" ], [ "BuilderExpressionCreator", "de.neemann.digital.gui.components.table" ], [ "ExpressionComponent", "de.neemann.digital.gui.components.table" ], [ "PlainTextExpressionListener", "de.neemann.digital.gui.components.table" ], [ "TableReorderManager", "de.neemann.digital.gui.components.table" ], [ "ShowStringDialog", "de.neemann.digital.gui.components.table" ], [ "ReorderInputs", "de.neemann.digital.gui.components.table" ], [ "ProgressDialog", "de.neemann.digital.gui.components.table" ], [ "CheckResultListener", "de.neemann.digital.gui.components.table" ], [ "ExpressionListenerStore", "de.neemann.digital.gui.components.table" ], [ "AttributeDialog", "de.neemann.digital.gui.components" ], [ "ProbeDialog", "de.neemann.digital.gui.components" ], [ "ColorSchemeEditor", "de.neemann.digital.gui.components" ], [ "ROMEditorDialog", "de.neemann.digital.gui.components" ], [ "LabelGenerator", "de.neemann.digital.gui.components" ], [ "SingleValueDialog", "de.neemann.digital.gui.components" ], [ "ExpressionDialog", "de.neemann.digital.gui.components.expression" ], [ "CircuitComponent", "de.neemann.digital.gui.components" ], [ "VGA", "de.neemann.digital.gui.components.graphics" ], [ "GraphicCard", "de.neemann.digital.gui.components.graphics" ], [ "LedMatrix", "de.neemann.digital.gui.components.graphics" ], [ "VGADialog", "de.neemann.digital.gui.components.graphics" ], [ "MoveFocusTo", "de.neemann.digital.gui.components.graphics" ], [ "LedMatrixComponent", "de.neemann.digital.gui.components.graphics" ], [ "GraphicDialog", "de.neemann.digital.gui.components.graphics" ], [ "GraphicComponent", "de.neemann.digital.gui.components.graphics" ], [ "LedMatrixDialog", "de.neemann.digital.gui.components.graphics" ], [ "ConstraintsBuilder", "de.neemann.digital.gui.components" ], [ "ScopeTrigger", "de.neemann.digital.gui.components.data" ], [ "GraphDialog", "de.neemann.digital.gui.components.data" ], [ "GraphComponent", "de.neemann.digital.gui.components.data" ], [ "DummyElement", "de.neemann.digital.gui.components.data" ], [ "ValueTableObserver", "de.neemann.digital.gui.components.data" ], [ "CircuitModifier", "de.neemann.digital.gui.components" ], [ "CopiedElementLabelRenamer", "de.neemann.digital.gui.components" ], [ "TextLineNumber", "de.neemann.digital.gui.components" ], [ "InsertHistory", "de.neemann.digital.gui" ], [ "ProgramMemoryLoader", "de.neemann.digital.gui" ], [ "Main", "de.neemann.digital.gui" ], [ "StatsDialog", "de.neemann.digital.gui" ], [ "WindowManager", "de.neemann.digital.gui" ], [ "Settings", "de.neemann.digital.gui" ], [ "LibrarySelector", "de.neemann.digital.gui" ], [ "DigitalUncaughtExceptionHandler", "de.neemann.digital.gui" ], [ "NumberingWizard", "de.neemann.digital.gui" ], [ "HandlerInterface", "de.neemann.digital.gui.remote" ], [ "RemoteSever", "de.neemann.digital.gui.remote" ], [ "RemoteException", "de.neemann.digital.gui.remote" ], [ "DigitalHandler", "de.neemann.digital.gui.remote" ], [ "ModelModifier", "de.neemann.digital.gui" ], [ "VerilogCreator", "de.neemann.digital.hdl.verilog2" ], [ "VerilogRenaming", "de.neemann.digital.hdl.verilog2" ], [ "VerilogGenerator", "de.neemann.digital.hdl.verilog2" ], [ "VerilogTestBenchCreator", "de.neemann.digital.hdl.verilog2" ], [ "VerilogElement", "de.neemann.digital.hdl.verilog2.lib" ], [ "VerilogTemplate", "de.neemann.digital.hdl.verilog2.lib" ], [ "VerilogLibrary", "de.neemann.digital.hdl.verilog2" ], [ "CodePrinter", "de.neemann.digital.hdl.printer" ], [ "CodePrinterStr", "de.neemann.digital.hdl.printer" ], [ "Statements", "de.neemann.digital.hdl.hgs" ], [ "Parser", "de.neemann.digital.hdl.hgs" ], [ "ParserException", "de.neemann.digital.hdl.hgs" ], [ "Statement", "de.neemann.digital.hdl.hgs" ], [ "Context", "de.neemann.digital.hdl.hgs" ], [ "FirstClassFunctionCall", "de.neemann.digital.hdl.hgs.function" ], [ "InnerFunction", "de.neemann.digital.hdl.hgs.function" ], [ "JavaClass", "de.neemann.digital.hdl.hgs.function" ], [ "FirstClassFunction", "de.neemann.digital.hdl.hgs.function" ], [ "Func", "de.neemann.digital.hdl.hgs.function" ], [ "Function", "de.neemann.digital.hdl.hgs.function" ], [ "Expression", "de.neemann.digital.hdl.hgs" ], [ "HGSEvalException", "de.neemann.digital.hdl.hgs" ], [ "Tokenizer", "de.neemann.digital.hdl.hgs" ], [ "ReferenceToFunc", "de.neemann.digital.hdl.hgs.refs" ], [ "ReferenceToStruct", "de.neemann.digital.hdl.hgs.refs" ], [ "ReferenceToArray", "de.neemann.digital.hdl.hgs.refs" ], [ "Reference", "de.neemann.digital.hdl.hgs.refs" ], [ "ReferenceToVar", "de.neemann.digital.hdl.hgs.refs" ], [ "Value", "de.neemann.digital.hdl.hgs" ], [ "HGSMap", "de.neemann.digital.hdl.hgs" ], [ "HGSArray", "de.neemann.digital.hdl.hgs" ], [ "Separator", "de.neemann.digital.hdl.vhdl2" ], [ "VHDLLibrary", "de.neemann.digital.hdl.vhdl2" ], [ "VHDLCreator", "de.neemann.digital.hdl.vhdl2" ], [ "VHDLRenaming", "de.neemann.digital.hdl.vhdl2" ], [ "VHDLGenerator", "de.neemann.digital.hdl.vhdl2" ], [ "VHDLEntity", "de.neemann.digital.hdl.vhdl2.entities" ], [ "VHDLTemplate", "de.neemann.digital.hdl.vhdl2.entities" ], [ "VHDLTemplateFunctions", "de.neemann.digital.hdl.vhdl2.entities" ], [ "VHDLTestBenchCreator", "de.neemann.digital.hdl.vhdl2" ], [ "HDLModel", "de.neemann.digital.hdl.model2" ], [ "HDLNode", "de.neemann.digital.hdl.model2" ], [ "HDLNet", "de.neemann.digital.hdl.model2" ], [ "Printable", "de.neemann.digital.hdl.model2" ], [ "HDLException", "de.neemann.digital.hdl.model2" ], [ "HDLPort", "de.neemann.digital.hdl.model2" ], [ "HasName", "de.neemann.digital.hdl.model2" ], [ "InlineManyToOne", "de.neemann.digital.hdl.model2.optimizations" ], [ "MergeAssignments", "de.neemann.digital.hdl.model2.optimizations" ], [ "Optimization", "de.neemann.digital.hdl.model2.optimizations" ], [ "MergeConstants", "de.neemann.digital.hdl.model2.optimizations" ], [ "ReplaceOneToMany", "de.neemann.digital.hdl.model2.optimizations" ], [ "NameConstantSignals", "de.neemann.digital.hdl.model2.optimizations" ], [ "OptimizeExpressions", "de.neemann.digital.hdl.model2.optimizations" ], [ "RemoveConstantSignals", "de.neemann.digital.hdl.model2.optimizations" ], [ "NodeSorterExpressionBased", "de.neemann.digital.hdl.model2.optimizations" ], [ "HDLNodeSplitterManyToOne", "de.neemann.digital.hdl.model2" ], [ "HDLNodeCustom", "de.neemann.digital.hdl.model2" ], [ "HDLNodeAssignment", "de.neemann.digital.hdl.model2" ], [ "HDLCircuit", "de.neemann.digital.hdl.model2" ], [ "ExprVar", "de.neemann.digital.hdl.model2.expression" ], [ "Visitor", "de.neemann.digital.hdl.model2.expression" ], [ "ExprVarRange", "de.neemann.digital.hdl.model2.expression" ], [ "Expression", "de.neemann.digital.hdl.model2.expression" ], [ "ExpressionOptimizer", "de.neemann.digital.hdl.model2.expression" ], [ "ExprNot", "de.neemann.digital.hdl.model2.expression" ], [ "ExprConstant", "de.neemann.digital.hdl.model2.expression" ], [ "ExprOperate", "de.neemann.digital.hdl.model2.expression" ], [ "ExprUsingNet", "de.neemann.digital.hdl.model2.expression" ], [ "HDLNodeBuildIn", "de.neemann.digital.hdl.model2" ], [ "HDLClockIntegrator", "de.neemann.digital.hdl.model2.clock" ], [ "ClockIntegratorGeneric", "de.neemann.digital.hdl.model2.clock" ], [ "ClockInfo", "de.neemann.digital.hdl.model2.clock" ], [ "HDLNodeSplitterOneToMany", "de.neemann.digital.hdl.model2" ], [ "FileLocator", "de.neemann.digital" ], [ "ValueTable", "de.neemann.digital.data" ], [ "ValueTableModel", "de.neemann.digital.data" ], [ "DataPlotter", "de.neemann.digital.data" ], [ "Value", "de.neemann.digital.data" ], [ "ExpressionExporter", "de.neemann.digital.builder" ], [ "ExpressionToFileExporter", "de.neemann.digital.builder" ], [ "RotationByteArrayOutputStream", "de.neemann.digital.builder.tt2" ], [ "TT2Exporter", "de.neemann.digital.builder.tt2" ], [ "StartATF150xFitter", "de.neemann.digital.builder.tt2" ], [ "OSExecute", "de.neemann.digital.builder.tt2" ], [ "CreateCHN", "de.neemann.digital.builder.ATF150x" ], [ "ATFDevice", "de.neemann.digital.builder.ATF150x" ], [ "ATFDialog", "de.neemann.digital.builder.ATF150x" ], [ "PL", "de.neemann.digital.builder.ATF150x" ], [ "ATF150xCuplExporter", "de.neemann.digital.builder.ATF150x" ], [ "PinMap", "de.neemann.digital.builder" ], [ "PinMapException", "de.neemann.digital.builder" ], [ "FragmentExpression", "de.neemann.digital.builder.circuit" ], [ "FragmentVisualElement", "de.neemann.digital.builder.circuit" ], [ "FragmentSameInValue", "de.neemann.digital.builder.circuit" ], [ "CircuitBuilder", "de.neemann.digital.builder.circuit" ], [ "FragmentVisitor", "de.neemann.digital.builder.circuit" ], [ "FragmentVariable", "de.neemann.digital.builder.circuit" ], [ "Fragment", "de.neemann.digital.builder.circuit" ], [ "Box", "de.neemann.digital.builder.circuit" ], [ "Gal16v8JEDECExporter", "de.neemann.digital.builder.Gal16v8" ], [ "CuplExporter", "de.neemann.digital.builder.Gal16v8" ], [ "BuilderCollectorGAL", "de.neemann.digital.builder.Gal16v8" ], [ "CleanNameBuilder", "de.neemann.digital.builder" ], [ "BuilderCollector", "de.neemann.digital.builder" ], [ "BuilderInterface", "de.neemann.digital.builder" ], [ "BuilderException", "de.neemann.digital.builder" ], [ "Gal22v10JEDECExporter", "de.neemann.digital.builder.Gal22v10" ], [ "Gal22v10CuplExporter", "de.neemann.digital.builder.Gal22v10" ], [ "FuseMap", "de.neemann.digital.builder.jedec" ], [ "FuseMapFillerException", "de.neemann.digital.builder.jedec" ], [ "FuseMapFiller", "de.neemann.digital.builder.jedec" ], [ "JedecWriter", "de.neemann.digital.builder.jedec" ], [ "GenericCode", "de.neemann.digital.draw.library" ], [ "ElementLibrary", "de.neemann.digital.draw.library" ], [ "GenericInitCode", "de.neemann.digital.draw.library" ], [ "Visitor", "de.neemann.digital.draw.library" ], [ "ComponentManager", "de.neemann.digital.draw.library" ], [ "LibraryListener", "de.neemann.digital.draw.library" ], [ "JarComponentManager", "de.neemann.digital.draw.library" ], [ "ElementLibraryFolder", "de.neemann.digital.draw.library" ], [ "CustomElement", "de.neemann.digital.draw.library" ], [ "ElementNotFoundNotification", "de.neemann.digital.draw.library" ], [ "ElementNotFoundException", "de.neemann.digital.draw.library" ], [ "ComponentSource", "de.neemann.digital.draw.library" ], [ "LibraryInterface", "de.neemann.digital.draw.library" ], [ "ResolveGenerics", "de.neemann.digital.draw.library" ], [ "LibraryNode", "de.neemann.digital.draw.library" ], [ "ElementTypeDescriptionCustom", "de.neemann.digital.draw.library" ], [ "InvalidNodeException", "de.neemann.digital.draw.library" ], [ "NumStringComparator", "de.neemann.digital.draw.library" ], [ "InputShape", "de.neemann.digital.draw.shapes" ], [ "Interactor", "de.neemann.digital.draw.shapes" ], [ "ButtonShape", "de.neemann.digital.draw.shapes" ], [ "GenericShape", "de.neemann.digital.draw.shapes" ], [ "Drawable", "de.neemann.digital.draw.shapes" ], [ "DelayShape", "de.neemann.digital.draw.shapes" ], [ "DiodeBackwardShape", "de.neemann.digital.draw.shapes" ], [ "FuseShape", "de.neemann.digital.draw.shapes" ], [ "FETShapeP", "de.neemann.digital.draw.shapes" ], [ "DILShape", "de.neemann.digital.draw.shapes" ], [ "DipSwitchShape", "de.neemann.digital.draw.shapes" ], [ "SwitchShape", "de.neemann.digital.draw.shapes" ], [ "LightBulbShape", "de.neemann.digital.draw.shapes" ], [ "LayoutShape", "de.neemann.digital.draw.shapes" ], [ "SplitterShape", "de.neemann.digital.draw.shapes" ], [ "PolarityAwareLEDShape", "de.neemann.digital.draw.shapes" ], [ "ButtonLEDShape", "de.neemann.digital.draw.shapes" ], [ "RelayShape", "de.neemann.digital.draw.shapes" ], [ "ConstShape", "de.neemann.digital.draw.shapes" ], [ "BreakShape", "de.neemann.digital.draw.shapes" ], [ "GenericCodeShape", "de.neemann.digital.draw.shapes" ], [ "TextShape", "de.neemann.digital.draw.shapes" ], [ "SevenSegHexShape", "de.neemann.digital.draw.shapes" ], [ "ProbeShape", "de.neemann.digital.draw.shapes" ], [ "NotConnectedShape", "de.neemann.digital.draw.shapes" ], [ "StepperMotorShape", "de.neemann.digital.draw.shapes" ], [ "FETShape", "de.neemann.digital.draw.shapes" ], [ "BitSelShape", "de.neemann.digital.draw.shapes" ], [ "SevenSegShape", "de.neemann.digital.draw.shapes" ], [ "GenericInitCodeShape", "de.neemann.digital.draw.shapes" ], [ "RelayDTShape", "de.neemann.digital.draw.shapes" ], [ "RectShape", "de.neemann.digital.draw.shapes" ], [ "VDDShape", "de.neemann.digital.draw.shapes" ], [ "RAMShape", "de.neemann.digital.draw.shapes" ], [ "ScopeShape", "de.neemann.digital.draw.shapes" ], [ "DemuxerShape", "de.neemann.digital.draw.shapes" ], [ "FETShapeN", "de.neemann.digital.draw.shapes" ], [ "BusSplitterShape", "de.neemann.digital.draw.shapes" ], [ "PullUpShape", "de.neemann.digital.draw.shapes" ], [ "TestCaseShape", "de.neemann.digital.draw.shapes" ], [ "TunnelShape", "de.neemann.digital.draw.shapes" ], [ "MuxerShape", "de.neemann.digital.draw.shapes" ], [ "SwitchDTShape", "de.neemann.digital.draw.shapes" ], [ "PinControlShape", "de.neemann.digital.draw.shapes" ], [ "FGFETShapeN", "de.neemann.digital.draw.shapes" ], [ "TransGateShape", "de.neemann.digital.draw.shapes" ], [ "DiodeShape", "de.neemann.digital.draw.shapes" ], [ "ResetShape", "de.neemann.digital.draw.shapes" ], [ "DiodeForewardShape", "de.neemann.digital.draw.shapes" ], [ "SixteenShape", "de.neemann.digital.draw.shapes" ], [ "CustomCircuitShapeType", "de.neemann.digital.draw.shapes" ], [ "InteractorInterface", "de.neemann.digital.draw.shapes" ], [ "ShapeSpecificMatch", "de.neemann.digital.draw.shapes" ], [ "LEDShape", "de.neemann.digital.draw.shapes" ], [ "ClockShape", "de.neemann.digital.draw.shapes" ], [ "RGBLEDShape", "de.neemann.digital.draw.shapes" ], [ "RotEncoderShape", "de.neemann.digital.draw.shapes" ], [ "IEEEGenericShape", "de.neemann.digital.draw.shapes.ieee" ], [ "IEEEOrShape", "de.neemann.digital.draw.shapes.ieee" ], [ "IEEENotShape", "de.neemann.digital.draw.shapes.ieee" ], [ "IEEEAndShape", "de.neemann.digital.draw.shapes.ieee" ], [ "IEEEXOrShape", "de.neemann.digital.draw.shapes.ieee" ], [ "ObservableValueReader", "de.neemann.digital.draw.shapes" ], [ "SvgTemplate", "de.neemann.digital.draw.shapes.custom.svg" ], [ "TransformParser", "de.neemann.digital.draw.shapes.custom.svg" ], [ "Context", "de.neemann.digital.draw.shapes.custom.svg" ], [ "SvgException", "de.neemann.digital.draw.shapes.custom.svg" ], [ "SvgImporter", "de.neemann.digital.draw.shapes.custom.svg" ], [ "CustomShapeDescription", "de.neemann.digital.draw.shapes.custom" ], [ "CustomShape", "de.neemann.digital.draw.shapes.custom" ], [ "FGFETShapeP", "de.neemann.digital.draw.shapes" ], [ "OutputShape", "de.neemann.digital.draw.shapes" ], [ "GroundShape", "de.neemann.digital.draw.shapes" ], [ "AsyncClockShape", "de.neemann.digital.draw.shapes" ], [ "Shape", "de.neemann.digital.draw.shapes" ], [ "MissingShape", "de.neemann.digital.draw.shapes" ], [ "ShapeFactory", "de.neemann.digital.draw.shapes" ], [ "PullDownShape", "de.neemann.digital.draw.shapes" ], [ "DriverShape", "de.neemann.digital.draw.shapes" ], [ "SevenShape", "de.neemann.digital.draw.shapes" ], [ "DataShape", "de.neemann.digital.draw.shapes" ], [ "DotCreator", "de.neemann.digital.draw.elements" ], [ "Wire", "de.neemann.digital.draw.elements" ], [ "Movable", "de.neemann.digital.draw.elements" ], [ "Pins", "de.neemann.digital.draw.elements" ], [ "Circuit", "de.neemann.digital.draw.elements" ], [ "Tunnel", "de.neemann.digital.draw.elements" ], [ "PinException", "de.neemann.digital.draw.elements" ], [ "ElementOrder", "de.neemann.digital.draw.elements" ], [ "VisualElement", "de.neemann.digital.draw.elements" ], [ "Pin", "de.neemann.digital.draw.elements" ], [ "IOState", "de.neemann.digital.draw.elements" ], [ "WireMerger", "de.neemann.digital.draw.elements" ], [ "WireConsistencyChecker", "de.neemann.digital.draw.elements" ], [ "AsyncSequentialClock", "de.neemann.digital.draw.model" ], [ "ModelEntry", "de.neemann.digital.draw.model" ], [ "Net", "de.neemann.digital.draw.model" ], [ "ModelCreator", "de.neemann.digital.draw.model" ], [ "InverterConfig", "de.neemann.digital.draw.model" ], [ "NetList", "de.neemann.digital.draw.model" ], [ "RealTimeClock", "de.neemann.digital.draw.model" ], [ "Polygon", "de.neemann.digital.draw.graphics" ], [ "Orientation", "de.neemann.digital.draw.graphics" ], [ "Vector", "de.neemann.digital.draw.graphics" ], [ "SVGSettings", "de.neemann.digital.draw.graphics" ], [ "Transform", "de.neemann.digital.draw.graphics" ], [ "ColorKey", "de.neemann.digital.draw.graphics" ], [ "ExportFactory", "de.neemann.digital.draw.graphics" ], [ "GraphicsImage", "de.neemann.digital.draw.graphics" ], [ "VectorInterface", "de.neemann.digital.draw.graphics" ], [ "TextFormatSVG", "de.neemann.digital.draw.graphics" ], [ "TransformMatrix", "de.neemann.digital.draw.graphics" ], [ "TextFormatLaTeX", "de.neemann.digital.draw.graphics" ], [ "GraphicMinMax", "de.neemann.digital.draw.graphics" ], [ "GraphicTransform", "de.neemann.digital.draw.graphics" ], [ "ColorScheme", "de.neemann.digital.draw.graphics" ], [ "Style", "de.neemann.digital.draw.graphics" ], [ "GraphicSkipLines", "de.neemann.digital.draw.graphics.linemerger" ], [ "GraphicLineCollector", "de.neemann.digital.draw.graphics.linemerger" ], [ "PolygonConverter", "de.neemann.digital.draw.graphics" ], [ "VectorFloat", "de.neemann.digital.draw.graphics" ], [ "TransformRotate", "de.neemann.digital.draw.graphics" ], [ "Graphic", "de.neemann.digital.draw.graphics" ], [ "ColorStyleHighContrast", "de.neemann.digital.draw.graphics" ], [ "Parser", "de.neemann.digital.draw.graphics.text" ], [ "ParseException", "de.neemann.digital.draw.graphics.text" ], [ "PlainTextFormatter", "de.neemann.digital.draw.graphics.text.formatter" ], [ "SVGFormatter", "de.neemann.digital.draw.graphics.text.formatter" ], [ "GraphicsFormatter", "de.neemann.digital.draw.graphics.text.formatter" ], [ "LaTeXFormatter", "de.neemann.digital.draw.graphics.text.formatter" ], [ "Decorate", "de.neemann.digital.draw.graphics.text.text" ], [ "Text", "de.neemann.digital.draw.graphics.text.text" ], [ "Index", "de.neemann.digital.draw.graphics.text.text" ], [ "Sentence", "de.neemann.digital.draw.graphics.text.text" ], [ "Blank", "de.neemann.digital.draw.graphics.text.text" ], [ "Character", "de.neemann.digital.draw.graphics.text.text" ], [ "ExpressionToText", "de.neemann.digital.draw.graphics.text.text" ], [ "Simple", "de.neemann.digital.draw.graphics.text.text" ], [ "Export", "de.neemann.digital.draw.graphics" ], [ "ColorStyleMonochrome", "de.neemann.digital.draw.graphics" ], [ "TransformTranslate", "de.neemann.digital.draw.graphics" ], [ "GraphicSVG", "de.neemann.digital.draw.graphics" ], [ "GraphicSwing", "de.neemann.digital.draw.graphics" ], [ "PolygonParser", "de.neemann.digital.draw.graphics" ], [ "SVGTokenizer", "de.neemann.digital.draw.graphics" ], [ "GifSequenceWriter", "de.neemann.digital.draw.gif" ], [ "GifExporter", "de.neemann.digital.draw.gif" ], [ "ConfigCache", "de.neemann.digital.toolchain" ], [ "Configuration", "de.neemann.digital.toolchain" ], [ "Command", "de.neemann.digital.toolchain" ], [ "FileToCreate", "de.neemann.digital.toolchain" ] ],
  "tokensProjectClassesNonPrivateStaticNonVoidMethods" : [ [ "getMouse", "de.neemann.gui", "Mouse", "static Mouse getMouse()" ], [ "create", "de.neemann.gui", "IconCreator", "public static Icon create(String name)" ], [ "createImage", "de.neemann.gui", "IconCreator", "public static Image createImage(String name)" ], [ "createImages", "de.neemann.gui", "IconCreator", "public static ArrayList<Image> createImages(String... names)" ], [ "getCTRLMask", "de.neemann.gui", "ToolTipAction", "public static int getCTRLMask()" ], [ "checkForSave", "de.neemann.gui", "ClosingWindowListener", "public static boolean checkForSave(JFrame parent, ConfirmSave confirmSave)" ], [ "getParentWindow", "de.neemann.gui", "ErrorMessage", "public static Window getParentWindow(Component parent)" ], [ "getInstance", "de.neemann.gui", "Screen", "public static Screen getInstance()" ], [ "getDefaultFontScaling", "de.neemann.gui", "Screen", "public static int getDefaultFontScaling()" ], [ "isLinux", "de.neemann.gui", "Screen", "public static boolean isLinux()" ], [ "isMac", "de.neemann.gui", "Screen", "public static boolean isMac()" ], [ "getInstance", "de.neemann.gui", "InfoDialog", "public static InfoDialog getInstance()" ], [ "read", "de.neemann.digital.core.memory.importer", "Importer", "public static DataField read(File hexFile, int dataBits, boolean bigEndian) throws IOException" ], [ "getOriginOf", "de.neemann.digital.core", "ExceptionWithOrigin", "public static String getOriginOf(Throwable e)" ], [ "zMaskString", "de.neemann.digital.core", "ObservableValue", "static String zMaskString(long value, long highZ, int bits)" ], [ "getInstance", "de.neemann.digital.core", "GlobalValues", "public static GlobalValues getInstance()" ], [ "getInstance", "de.neemann.digital.core.io", "MIDIHelper", "public static MIDIHelper getInstance()" ], [ "input", "de.neemann.digital.core.element", "PinInfo", "public static PinInfo input(String name)" ], [ "input", "de.neemann.digital.core.element", "PinInfo", "public static PinInfo input(String name, String description)" ], [ "output", "de.neemann.digital.core.element", "PinInfo", "public static PinInfo output(String name)" ], [ "isInOut", "de.neemann.digital.core.element", "PinDescription", "public static boolean isInOut(Direction a, Direction b)" ], [ "isInOut", "de.neemann.digital.core.element", "Direction", "public static boolean isInOut(Direction a, Direction b)" ], [ "getKeyByName", "de.neemann.digital.core.element", "Keys", "public static Key getKeyByName(String name)" ], [ "getKeys", "de.neemann.digital.core.element", "Keys", "public static Iterable<Key> getKeys()" ], [ "combine", "de.neemann.digital.core.element", "ImmutableList", "public static <T> ImmutableList<T> combine(ImmutableList<T> a, ImmutableList<T> b)" ], [ "createSwitchModel", "de.neemann.digital.core.switching", "PlainSwitch", "static SwitchModel createSwitchModel(ObservableValue input1, ObservableValue input2, ObservableValue output1, ObservableValue output2) throws NodeException" ], [ "createOneToN", "de.neemann.digital.core.wiring", "Splitter", "public static Splitter createOneToN(int bits)" ], [ "createNToOne", "de.neemann.digital.core.wiring", "Splitter", "public static Splitter createNToOne(int bits)" ], [ "ovs", "de.neemann.digital.core", "ObservableValues", "public static ObservableValues ovs(ObservableValue... items)" ], [ "toShortHex", "de.neemann.digital.core", "IntFormat", "public static String toShortHex(long value)" ], [ "up", "de.neemann.digital.core", "Bits", "public static long up(long val, int bits)" ], [ "down", "de.neemann.digital.core", "Bits", "public static long down(long val, int bits)" ], [ "mask", "de.neemann.digital.core", "Bits", "public static long mask(int bits)" ], [ "signedFlagMask", "de.neemann.digital.core", "Bits", "public static long signedFlagMask(int bits)" ], [ "isNegative", "de.neemann.digital.core", "Bits", "public static boolean isNegative(long value, int bits)" ], [ "signExtend", "de.neemann.digital.core", "Bits", "public static long signExtend(long value, int bits)" ], [ "binLn2", "de.neemann.digital.core", "Bits", "public static int binLn2(long b)" ], [ "removeBitFromValue", "de.neemann.digital.core", "Bits", "public static int removeBitFromValue(int value, int bit)" ], [ "decode", "de.neemann.digital.core", "Bits", "public static long decode(String str) throws NumberFormatException" ], [ "decode", "de.neemann.digital.core", "Bits", "public static long decode(String str, boolean parseFloats) throws NumberFormatException" ], [ "decode", "de.neemann.digital.core", "Bits", "public static long decode(String str, int p, int radix) throws NumberFormatException" ], [ "getCode", "de.neemann.digital.core.extern", "Application", "static String getCode(ElementAttributes attr, File root) throws IOException" ], [ "readCode", "de.neemann.digital.core.extern", "Application", "static String readCode(File file) throws IOException" ], [ "create", "de.neemann.digital.core.extern", "Application", "static Application create(Type type, ElementAttributes attr)" ], [ "start", "de.neemann.digital.core.extern", "ProcessStarter", "public static String start(File dir, String... args) throws IOException" ], [ "joinStrings", "de.neemann.digital.core.extern", "ProcessStarter", "public static String joinStrings(String... strings)" ], [ "fromString", "de.neemann.digital.cli.cli", "Argument", "public static Object fromString(String val, Object defValue) throws CLIException" ], [ "fac", "de.neemann.digital.fsm", "Optimizer", "public static long fac(int n)" ], [ "getTimeComplexity", "de.neemann.digital.fsm", "Optimizer", "public static long getTimeComplexity(FSM fsm)" ], [ "calcComplexity", "de.neemann.digital.fsm", "Optimizer", "static int calcComplexity(FSM fsm, boolean out) throws ExpressionException, FiniteStateMachineException, FormatterException" ], [ "blink", "de.neemann.digital.fsm", "FSMDemos", "public static FSM blink()" ], [ "rotDecoder", "de.neemann.digital.fsm", "FSMDemos", "public static FSM rotDecoder()" ], [ "counter", "de.neemann.digital.fsm", "FSMDemos", "public static FSM counter(int n)" ], [ "trafficLight", "de.neemann.digital.fsm", "FSMDemos", "public static FSM trafficLight()" ], [ "trafficLightMedwedew", "de.neemann.digital.fsm", "FSMDemos", "public static FSM trafficLightMedwedew()" ], [ "selCounter", "de.neemann.digital.fsm", "FSMDemos", "public static FSM selCounter()" ], [ "stepper", "de.neemann.digital.fsm", "FSMDemos", "public static FSM stepper()" ], [ "stepperMedwedew", "de.neemann.digital.fsm", "FSMDemos", "public static FSM stepperMedwedew()" ], [ "getxStream", "de.neemann.digital.fsm", "FSM", "public static XStream getxStream()" ], [ "loadFSM", "de.neemann.digital.fsm", "FSM", "public static FSM loadFSM(File filename) throws IOException" ], [ "loadFSM", "de.neemann.digital.fsm", "FSM", "public static FSM loadFSM(InputStream in) throws IOException" ], [ "get", "de.neemann.digital.lang", "Lang", "public static String get(String key, Object... params)" ], [ "getNull", "de.neemann.digital.lang", "Lang", "public static String getNull(String key, Object... params)" ], [ "getBundle", "de.neemann.digital.lang", "Lang", "public static Bundle getBundle()" ], [ "currentLanguage", "de.neemann.digital.lang", "Lang", "public static Language currentLanguage()" ], [ "evalMultilingualContent", "de.neemann.digital.lang", "Lang", "public static String evalMultilingualContent(String text)" ], [ "evalMultilingualContent", "de.neemann.digital.lang", "Lang", "static String evalMultilingualContent(String text, Language currentLanguage)" ], [ "lowest", "de.neemann.digital.testing.parser", "OperatorPrecedence", "public static OperatorPrecedence lowest()" ], [ "addOne", "de.neemann.digital.analyse", "ModelAnalyser", "public static String addOne(String name)" ], [ "readCSV", "de.neemann.digital.analyse", "CSVImporter", "public static TruthTable readCSV(File file) throws IOException" ], [ "readCSV", "de.neemann.digital.analyse", "CSVImporter", "public static TruthTable readCSV(String csv) throws IOException" ], [ "readCSV", "de.neemann.digital.analyse", "CSVImporter", "public static TruthTable readCSV(Reader csv) throws IOException" ], [ "createDoubledValues", "de.neemann.digital.analyse.quinemc", "BoolTableByteArray", "public static BoolTableByteArray createDoubledValues(BoolTable values)" ], [ "simplify", "de.neemann.digital.analyse.quinemc", "QuineMcCluskey", "public static Expression simplify(Expression expression) throws ExpressionException" ], [ "addAnd", "de.neemann.digital.analyse.quinemc", "QuineMcCluskey", "public static Expression addAnd(Expression e, Iterable<TableRow> rows, List<Variable> variables)" ], [ "value", "de.neemann.digital.analyse.quinemc", "ThreeStateValue", "public static ThreeStateValue value(boolean bool)" ], [ "value", "de.neemann.digital.analyse.quinemc", "ThreeStateValue", "public static ThreeStateValue value(int value)" ], [ "doImplicitTypeCasts", "de.neemann.digital.analyse", "SubstituteLibrary", "static Object doImplicitTypeCasts(Class<?> expectedClass, Object val)" ], [ "or", "de.neemann.digital.analyse.expression", "Operation", "public static Expression or(Iterable<Expression> exp)" ], [ "or", "de.neemann.digital.analyse.expression", "Operation", "public static Expression or(Expression... exp)" ], [ "xor", "de.neemann.digital.analyse.expression", "Operation", "public static Expression xor(Expression a, Expression b)" ], [ "orNoMerge", "de.neemann.digital.analyse.expression", "Operation", "public static Expression orNoMerge(Expression... exp)" ], [ "and", "de.neemann.digital.analyse.expression", "Operation", "public static Expression and(Iterable<Expression> exp)" ], [ "and", "de.neemann.digital.analyse.expression", "Operation", "public static Expression and(Expression... exp)" ], [ "andNoMerge", "de.neemann.digital.analyse.expression", "Operation", "public static Expression andNoMerge(Expression... exp)" ], [ "modifyExpression", "de.neemann.digital.analyse.expression.modify", "ExpressionModifier", "static Expression modifyExpression(Expression expression, ExpressionModifier modifier)" ], [ "modifyExpression", "de.neemann.digital.analyse.expression.modify", "ExpressionModifier", "static Expression modifyExpression(Expression expression, ExpressionModifier... modifiers)" ], [ "v", "de.neemann.digital.analyse.expression", "Variable", "public static Variable v(String name)" ], [ "vars", "de.neemann.digital.analyse.expression", "Variable", "public static ArrayList<Variable> vars(int n)" ], [ "vars", "de.neemann.digital.analyse.expression", "Variable", "public static ArrayList<Variable> vars(String... names)" ], [ "isVar", "de.neemann.digital.analyse.expression", "Variable", "public static boolean isVar(Expression e)" ], [ "isVarOrNotVar", "de.neemann.digital.analyse.expression", "Variable", "public static boolean isVarOrNotVar(Expression e)" ], [ "getDefaultFormat", "de.neemann.digital.analyse.expression.format", "FormatToExpression", "public static FormatToExpression getDefaultFormat()" ], [ "defaultFormat", "de.neemann.digital.analyse.expression.format", "FormatToExpression", "public static String defaultFormat(Expression exp)" ], [ "not", "de.neemann.digital.analyse.expression", "Not", "public static Expression not(Expression a)" ], [ "readFromFile", "de.neemann.digital.analyse", "TruthTable", "public static TruthTable readFromFile(File filename) throws IOException" ], [ "create", "de.neemann.digital.analyse", "SplitPinString", "public static SplitPinString create(Signal s)" ], [ "create", "de.neemann.digital.analyse", "SplitPinString", "public static SplitPinString create(String pinStr)" ], [ "checkSuffix", "de.neemann.digital.gui", "SaveAsHelper", "public static File checkSuffix(File filename, String suffix)" ], [ "addF1Traversal", "de.neemann.digital.gui.components", "EditorFactory", "public static <TC extends JTextComponent> TC addF1Traversal(TC text)" ], [ "createUndoManager", "de.neemann.digital.gui.components", "EditorFactory", "public static UndoManager createUndoManager(JTextComponent text)" ], [ "create", "de.neemann.digital.gui.components.modification", "ModifyInsertWires", "public static Modification<Circuit> create(List<Wire> newWires)" ], [ "getToolTipName", "de.neemann.digital.gui.components.modification", "ModificationOfVisualElement", "public static String getToolTipName(VisualElement ve)" ], [ "getTerminal", "de.neemann.digital.gui.components.terminal", "TerminalDialog", "static TerminalInterface getTerminal(Model model, ElementAttributes attr)" ], [ "createList", "de.neemann.digital.gui.components", "CircuitTransferable", "public static ArrayList<Movable> createList(Object data, ShapeFactory shapeFactory) throws IOException" ], [ "createURLStreamHandlerFactory", "de.neemann.digital.gui.components", "ElementHelpDialog", "public static URLStreamHandlerFactory createURLStreamHandlerFactory()" ], [ "getImage", "de.neemann.digital.gui.components", "ElementHelpDialog", "static BufferedImage getImage(String name)" ], [ "getImage", "de.neemann.digital.gui.components", "MyURLStreamHandlerFactory", "static BufferedImage getImage(String name)" ], [ "isSequentialVar", "de.neemann.digital.gui.components.table", "ExpressionListenerJK", "public static String isSequentialVar(String name)" ], [ "getAttrList", "de.neemann.digital.gui.components", "CircuitComponent", "public static ArrayList<Key> getAttrList()" ], [ "raster", "de.neemann.digital.gui.components", "CircuitComponent", "public static Vector raster(Vector pos)" ], [ "createLiveDialog", "de.neemann.digital.gui.components.data", "GraphDialog", "public static GraphDialog createLiveDialog(JFrame owner, Model model, boolean microStep, List<String> ordering, int sampleSize)" ], [ "createColumnsInfo", "de.neemann.digital.gui.components.data", "GraphDialog", "static ValueTable.ColumnInfo[] createColumnsInfo(ArrayList<Signal> signals)" ], [ "create", "de.neemann.digital.gui.components", "CopiedElementLabelRenamer", "static LabelInstance create(VisualElement ve)" ], [ "create", "de.neemann.digital.gui.components", "CopiedElementLabelRenamer", "static LabelInstance create(String elementName, String fullLabel)" ], [ "create", "de.neemann.digital.gui.components", "LabelInstance", "static LabelInstance create(VisualElement ve)" ], [ "create", "de.neemann.digital.gui.components", "LabelInstance", "static LabelInstance create(String elementName, String fullLabel)" ], [ "isExperimentalMode", "de.neemann.digital.gui", "Main", "public static boolean isExperimentalMode()" ], [ "getInstance", "de.neemann.digital.gui", "WindowManager", "public static WindowManager getInstance()" ], [ "getInstance", "de.neemann.digital.gui", "Settings", "public static Settings getInstance()" ], [ "getRange", "de.neemann.digital.hdl.verilog2", "VerilogCreator", "public static String getRange(int bits)" ], [ "getType", "de.neemann.digital.hdl.verilog2", "VerilogCreator", "public static String getType(HDLPort.Direction def, HDLPort.Direction dir, int bits)" ], [ "value", "de.neemann.digital.hdl.verilog2", "VerilogCreator", "public static String value(ExprConstant con)" ], [ "value", "de.neemann.digital.hdl.verilog2", "VerilogCreator", "public static String value(long val, int bits)" ], [ "neededFileName", "de.neemann.digital.hdl.verilog2.lib", "VerilogTemplate", "public static String neededFileName(String elementName)" ], [ "createFromJar", "de.neemann.digital.hdl.hgs", "Parser", "public static Statement createFromJar(String path, ClassLoader cl) throws IOException, ParserException" ], [ "createFromJarStatic", "de.neemann.digital.hdl.hgs", "Parser", "public static Statement createFromJarStatic(String path)" ], [ "isWhiteSpace", "de.neemann.digital.hdl.hgs", "Tokenizer", "public static boolean isWhiteSpace(int c)" ], [ "toLong", "de.neemann.digital.hdl.hgs", "Value", "public static long toLong(Object value) throws HGSEvalException" ], [ "toDouble", "de.neemann.digital.hdl.hgs", "Value", "public static double toDouble(Object value) throws HGSEvalException" ], [ "toInt", "de.neemann.digital.hdl.hgs", "Value", "public static int toInt(Object value) throws HGSEvalException" ], [ "toBool", "de.neemann.digital.hdl.hgs", "Value", "public static boolean toBool(Object value) throws HGSEvalException" ], [ "toString", "de.neemann.digital.hdl.hgs", "Value", "public static String toString(Object value) throws HGSEvalException" ], [ "toArray", "de.neemann.digital.hdl.hgs", "Value", "public static HGSArray toArray(Object value) throws HGSEvalException" ], [ "toMap", "de.neemann.digital.hdl.hgs", "Value", "public static HGSMap toMap(Object value) throws HGSEvalException" ], [ "equals", "de.neemann.digital.hdl.hgs", "Value", "public static boolean equals(Object a, Object b)" ], [ "add", "de.neemann.digital.hdl.hgs", "Value", "public static Object add(Object a, Object b) throws HGSEvalException" ], [ "sub", "de.neemann.digital.hdl.hgs", "Value", "public static Object sub(Object a, Object b) throws HGSEvalException" ], [ "mul", "de.neemann.digital.hdl.hgs", "Value", "public static Object mul(Object a, Object b) throws HGSEvalException" ], [ "div", "de.neemann.digital.hdl.hgs", "Value", "public static Object div(Object a, Object b) throws HGSEvalException" ], [ "or", "de.neemann.digital.hdl.hgs", "Value", "public static Object or(Object a, Object b) throws HGSEvalException" ], [ "xor", "de.neemann.digital.hdl.hgs", "Value", "public static Object xor(Object a, Object b) throws HGSEvalException" ], [ "and", "de.neemann.digital.hdl.hgs", "Value", "public static Object and(Object a, Object b) throws HGSEvalException" ], [ "not", "de.neemann.digital.hdl.hgs", "Value", "public static Object not(Object value) throws HGSEvalException" ], [ "neg", "de.neemann.digital.hdl.hgs", "Value", "public static Object neg(Object value) throws HGSEvalException" ], [ "less", "de.neemann.digital.hdl.hgs", "Value", "public static boolean less(Object a, Object b) throws HGSEvalException" ], [ "lessEqual", "de.neemann.digital.hdl.hgs", "Value", "public static boolean lessEqual(Object a, Object b) throws HGSEvalException" ], [ "trimRight", "de.neemann.digital.hdl.hgs", "Value", "public static String trimRight(String str)" ], [ "trimLeft", "de.neemann.digital.hdl.hgs", "Value", "public static String trimLeft(String str)" ], [ "getType", "de.neemann.digital.hdl.vhdl2", "VHDLCreator", "public static String getType(int bits)" ], [ "value", "de.neemann.digital.hdl.vhdl2", "VHDLCreator", "public static String value(ExprConstant con)" ], [ "value", "de.neemann.digital.hdl.vhdl2", "VHDLCreator", "public static String value(long val, int bits)" ], [ "isTemplate", "de.neemann.digital.hdl.vhdl2.entities", "VHDLTemplate", "public static boolean isTemplate(ElementTypeDescription etd)" ], [ "neededFileName", "de.neemann.digital.hdl.vhdl2.entities", "VHDLTemplate", "public static String neededFileName(String elementName)" ], [ "zero", "de.neemann.digital.hdl.vhdl2.entities", "VHDLTemplateFunctions", "public static String zero(long bits)" ], [ "value", "de.neemann.digital.hdl.vhdl2.entities", "VHDLTemplateFunctions", "public static String value(long val, long bits)" ], [ "genericType", "de.neemann.digital.hdl.vhdl2.entities", "VHDLTemplateFunctions", "public static String genericType(long n)" ], [ "type", "de.neemann.digital.hdl.vhdl2.entities", "VHDLTemplateFunctions", "public static String type(long n)" ], [ "isVar", "de.neemann.digital.hdl.model2.expression", "Expression", "static boolean isVar(Expression expr, HDLNet net)" ], [ "isConstant", "de.neemann.digital.hdl.model2.expression", "ExprConstant", "public static ExprConstant isConstant(HDLNode node)" ], [ "getHighZ", "de.neemann.digital.data", "Value", "public static Value getHighZ()" ], [ "calcBackOffset", "de.neemann.digital.builder.circuit", "FragmentExpression", "static int calcBackOffset(int size, int i)" ], [ "isXNor", "de.neemann.digital.builder.circuit", "CircuitBuilder", "static boolean isXNor(long[] data)" ], [ "isXor", "de.neemann.digital.builder.circuit", "CircuitBuilder", "static boolean isXor(long[] data)" ], [ "getLibPath", "de.neemann.digital.draw.library", "ElementLibrary", "public static File getLibPath()" ], [ "createCustomDescription", "de.neemann.digital.draw.library", "ElementLibrary", "public static ElementTypeDescriptionCustom createCustomDescription(File file, Circuit circuit, ElementLibrary library) throws PinException" ], [ "createDeclarationDefault", "de.neemann.digital.draw.library", "ElementTypeDescriptionCustom", "public static String createDeclarationDefault(Circuit circuit) throws NodeException" ], [ "getInstance", "de.neemann.digital.draw.library", "NumStringComparator", "public static NumStringComparator getInstance()" ], [ "compareStr", "de.neemann.digital.draw.library", "NumStringComparator", "public static int compareStr(String a, String b)" ], [ "createPins", "de.neemann.digital.draw.shapes", "GenericShape", "public static Pins createPins(PinDescriptions inputs, PinDescriptions outputs, boolean invert, InverterConfig ic, boolean wideShape)" ], [ "readStyle", "de.neemann.digital.draw.shapes.custom.svg", "Context", "static Context readStyle(Context context, String style) throws SvgException" ], [ "getOutSize", "de.neemann.digital.draw.shapes", "OutputShape", "public static int getOutSize(boolean small)" ], [ "getOutStyle", "de.neemann.digital.draw.shapes", "OutputShape", "public static Style getOutStyle(boolean small)" ], [ "getOutRad", "de.neemann.digital.draw.shapes", "OutputShape", "public static Vector getOutRad(boolean small)" ], [ "createTransform", "de.neemann.digital.draw.shapes", "SevenShape", "static Transform createTransform(int size)" ], [ "getxStream", "de.neemann.digital.draw.elements", "Circuit", "public static XStream getxStream()" ], [ "loadCircuit", "de.neemann.digital.draw.elements", "Circuit", "public static Circuit loadCircuit(File filename, ShapeFactory shapeFactory) throws IOException" ], [ "loadCircuit", "de.neemann.digital.draw.elements", "Circuit", "public static Circuit loadCircuit(InputStream in, ShapeFactory shapeFactory) throws IOException" ], [ "fixGenerics", "de.neemann.digital.draw.model", "ModelCreator", "public static Circuit fixGenerics(Circuit circuit, LibraryInterface library) throws NodeException, ElementNotFoundException" ], [ "createFromPath", "de.neemann.digital.draw.graphics", "Polygon", "public static Polygon createFromPath(String path)" ], [ "vec", "de.neemann.digital.draw.graphics", "Vector", "public static Vector vec(int x, int y)" ], [ "min", "de.neemann.digital.draw.graphics", "Vector", "public static Vector min(VectorInterface... p)" ], [ "max", "de.neemann.digital.draw.graphics", "Vector", "public static Vector max(VectorInterface... p)" ], [ "width", "de.neemann.digital.draw.graphics", "Vector", "public static Vector width(VectorInterface... p)" ], [ "add", "de.neemann.digital.draw.graphics", "Vector", "public static List<Vector> add(List<Vector> vectors, Vector offs)" ], [ "getInstance", "de.neemann.digital.draw.graphics", "SVGSettings", "public static SVGSettings getInstance()" ], [ "createKeyList", "de.neemann.digital.draw.graphics", "SVGSettings", "public static List<Key> createKeyList()" ], [ "mul", "de.neemann.digital.draw.graphics", "Transform", "static Transform mul(Transform t1, Transform t2)" ], [ "rotate", "de.neemann.digital.draw.graphics", "TransformMatrix", "public static TransformMatrix rotate(double w)" ], [ "scale", "de.neemann.digital.draw.graphics", "TransformMatrix", "public static TransformMatrix scale(float sx, float sy)" ], [ "getTextWidth", "de.neemann.digital.draw.graphics", "GraphicMinMax", "public static int getTextWidth(String text, Style style)" ], [ "getSelected", "de.neemann.digital.draw.graphics", "ColorScheme", "public static ColorScheme getSelected()" ], [ "getWireStyle", "de.neemann.digital.draw.graphics", "Style", "public static Style getWireStyle(Value value)" ], [ "format", "de.neemann.digital.draw.graphics.text.formatter", "PlainTextFormatter", "public static String format(Text text)" ], [ "format", "de.neemann.digital.draw.graphics.text.formatter", "PlainTextFormatter", "public static String format(Text text, FormatToExpression format)" ], [ "format", "de.neemann.digital.draw.graphics.text.formatter", "SVGFormatter", "public static String format(Text text)" ], [ "createFragment", "de.neemann.digital.draw.graphics.text.formatter", "GraphicsFormatter", "public static Fragment createFragment(Graphics2D gr, String text)" ], [ "createFragment", "de.neemann.digital.draw.graphics.text.formatter", "GraphicsFormatter", "public static Fragment createFragment(Graphics2D gr, Expression expression) throws FormatterException" ], [ "createFragment", "de.neemann.digital.draw.graphics.text.formatter", "GraphicsFormatter", "public static Fragment createFragment(FontSizer sizer, Font font, String text)" ], [ "format", "de.neemann.digital.draw.graphics.text.formatter", "LaTeXFormatter", "public static String format(Expression exp)" ], [ "format", "de.neemann.digital.draw.graphics.text.formatter", "LaTeXFormatter", "public static String format(Text text)" ], [ "math", "de.neemann.digital.draw.graphics.text.text", "Decorate", "public static Text math(Text t)" ], [ "escapeXML", "de.neemann.digital.draw.graphics", "GraphicSVG", "public static String escapeXML(String text)" ], [ "getMirrorYOrientation", "de.neemann.digital.draw.graphics", "GraphicSwing", "static int getMirrorYOrientation(Orientation orientation, VectorInterface p1, VectorInterface p2, VectorInterface p3)" ], [ "load", "de.neemann.digital.toolchain", "Configuration", "public static Configuration load(File file) throws IOException" ], [ "load", "de.neemann.digital.toolchain", "Configuration", "public static Configuration load(InputStream in) throws IOException" ] ],
  "tokensProjectClassesNonPrivateStaticAttributes" : [ [ "UNKNOWN", "de.neemann.gui", "InfoDialog", "public static final String UNKNOWN = \"unknown\";" ], [ "DESCRIPTION", "de.neemann.digital.core.pld", "PullDown", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"PullDown\", PullDown.class).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS);" ], [ "DESCRIPTION", "de.neemann.digital.core.pld", "Diode", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Diode.class).addAttribute(Keys.ROTATE).addAttribute(Keys.BLOWN);" ], [ "DESCRIPTION", "de.neemann.digital.core.pld", "DiodeBackward", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(DiodeBackward.class, input(\"in\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BLOWN);" ], [ "DESCRIPTION", "de.neemann.digital.core.pld", "PullUp", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"PullUp\", PullUp.class).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS);" ], [ "DESCRIPTION", "de.neemann.digital.core.pld", "DiodeForward", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(DiodeForward.class, input(\"in\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BLOWN);" ], [ "DESCRIPTION", "de.neemann.digital.core.memory", "RAMSinglePort", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(RAMSinglePort.class, input(\"A\"), input(\"str\"), input(\"C\").setClock(), input(\"ld\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.ADDR_BITS).addAttribute(Keys.INT_FORMAT).addAttribute(Keys.IS_PROGRAM_MEMORY).addAttribute(Keys.LABEL);" ], [ "DESCRIPTION", "de.neemann.digital.core.memory", "ROMDualPort", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(ROMDualPort.class, input(\"A1\"), input(\"s1\"), input(\"A2\"), input(\"s2\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.ADDR_BITS).addAttribute(Keys.LABEL).addAttribute(Keys.DATA).addAttribute(Keys.INT_FORMAT).addAttribute(Keys.IS_PROGRAM_MEMORY).addAttribute(Keys.AUTO_RELOAD_ROM).addAttribute(Keys.LAST_DATA_FILE).addAttribute(Keys.BIG_ENDIAN);" ], [ "DESCRIPTION", "de.neemann.digital.core.memory", "RAMDualAccess", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(RAMDualAccess.class, input(\"str\"), input(\"C\").setClock(), input(\"ld\"), input(\"1A\"), input(\"1Din\"), input(\"2A\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.ADDR_BITS).addAttribute(Keys.IS_PROGRAM_MEMORY).addAttribute(Keys.LABEL).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.memory", "CounterPreset", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(CounterPreset.class, input(\"en\"), input(\"C\").setClock(), input(\"dir\"), input(\"in\"), input(\"ld\"), input(\"clr\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.MAX_VALUE).addAttribute(Keys.INVERTER_CONFIG).addAttribute(Keys.LABEL).addAttribute(Keys.VALUE_IS_PROBE).addAttribute(Keys.IS_PROGRAM_COUNTER).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.memory", "RAMDualPort", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(RAMDualPort.class, input(\"A\"), input(\"Din\"), input(\"str\"), input(\"C\").setClock(), input(\"ld\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.ADDR_BITS).addAttribute(Keys.INT_FORMAT).addAttribute(Keys.IS_PROGRAM_MEMORY).addAttribute(Keys.LABEL).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.memory", "Register", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Register.class, input(\"D\"), input(\"C\").setClock(), input(\"en\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).addAttribute(Keys.INVERTER_CONFIG).addAttribute(Keys.IS_PROGRAM_COUNTER).addAttribute(Keys.VALUE_IS_PROBE).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.memory", "LookUpTable", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(LookUpTable.class) {\n\n    @Override\n    public PinDescriptions getInputDescription(ElementAttributes elementAttributes) {\n        int size = elementAttributes.get(Keys.INPUT_COUNT);\n        PinDescription[] names = new PinDescription[size];\n        for (int i = 0; i < size; i++) names[i] = input(Integer.toString(i), Lang.get(\"elem_LookUpTable_pin_in\", i));\n        return new PinDescriptions(names);\n    }\n}.addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.LUT_INPUT_COUNT).addAttribute(Keys.LABEL).addAttribute(Keys.DATA).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.memory", "BlockRAMDualPort", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(BlockRAMDualPort.class, input(\"A\"), input(\"Din\"), input(\"str\"), input(\"C\").setClock()).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.ADDR_BITS).addAttribute(Keys.IS_PROGRAM_MEMORY).addAttribute(Keys.LABEL).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.memory", "Counter", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Counter.class, input(\"en\"), input(\"C\").setClock(), input(\"clr\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.INVERTER_CONFIG).addAttribute(Keys.LABEL).addAttribute(Keys.VALUE_IS_PROBE).addAttribute(Keys.IS_PROGRAM_COUNTER).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.memory", "EEPROM", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(EEPROM.class, input(\"A\"), input(\"CS\"), input(\"WE\").setClock(), input(\"OE\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.ADDR_BITS).addAttribute(Keys.LABEL).addAttribute(Keys.INT_FORMAT).addAttribute(Keys.IS_PROGRAM_MEMORY).addAttribute(Keys.INVERTER_CONFIG).addAttribute(Keys.DATA);" ], [ "DESCRIPTION", "de.neemann.digital.core.memory", "RAMAsync", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(RAMAsync.class, input(\"A\"), input(\"D\"), input(\"we\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.ADDR_BITS).addAttribute(Keys.IS_PROGRAM_MEMORY).addAttribute(Keys.INVERTER_CONFIG).addAttribute(Keys.LABEL).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.memory", "ROM", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(ROM.class, input(\"A\"), input(\"sel\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.ADDR_BITS).addAttribute(Keys.LABEL).addAttribute(Keys.DATA).addAttribute(Keys.INT_FORMAT).addAttribute(Keys.IS_PROGRAM_MEMORY).addAttribute(Keys.AUTO_RELOAD_ROM).addAttribute(Keys.LAST_DATA_FILE).addAttribute(Keys.BIG_ENDIAN).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.memory", "EEPROMDualPort", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(EEPROMDualPort.class, input(\"A\"), input(\"Din\"), input(\"str\"), input(\"C\").setClock(), input(\"ld\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.ADDR_BITS).addAttribute(Keys.INT_FORMAT).addAttribute(Keys.IS_PROGRAM_MEMORY).addAttribute(Keys.LABEL).addAttribute(Keys.DATA);" ], [ "DESCRIPTION", "de.neemann.digital.core.memory", "RAMSinglePortSel", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(RAMSinglePortSel.class, input(\"A\"), input(\"CS\"), input(\"WE\"), input(\"OE\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.ADDR_BITS).addAttribute(Keys.LABEL).addAttribute(Keys.IS_PROGRAM_MEMORY).addAttribute(Keys.INVERTER_CONFIG);" ], [ "DESCRIPTION", "de.neemann.digital.core.memory", "RegisterFile", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(RegisterFile.class, input(\"Din\"), input(\"we\"), input(\"Rw\"), input(\"C\").setClock(), input(\"Ra\"), input(\"Rb\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.ADDR_BITS).addAttribute(Keys.LABEL).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.io", "MIDI", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(MIDI.class) {\n\n    public PinDescriptions getInputDescription(ElementAttributes elementAttributes) throws NodeException {\n        if (elementAttributes.get(Keys.MIDI_PROG_CHANGE))\n            return new PinDescriptions(input(\"N\"), input(\"V\"), input(\"OnOff\"), input(\"PC\"), input(\"en\"), input(\"C\").setClock()).setLangKey(getPinLangKey());\n        else\n            return new PinDescriptions(input(\"N\"), input(\"V\"), input(\"OnOff\"), input(\"en\"), input(\"C\").setClock()).setLangKey(getPinLangKey());\n    }\n}.addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.MIDI_CHANNEL).addAttribute(Keys.MIDI_INSTRUMENT).addAttribute(Keys.MIDI_PROG_CHANGE);" ], [ "DESCRIPTION", "de.neemann.digital.core.io", "RGBLED", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(RGBLED.class, input(\"R\"), input(\"G\"), input(\"B\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).addAttribute(Keys.LED_SIZE);" ], [ "DESCRIPTION", "de.neemann.digital.core.io", "Out", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"Out\", attributes -> new Out(attributes).enforceName(), input(\"in\")) {\n\n    @Override\n    public String getDescription(ElementAttributes elementAttributes) {\n        String d = Lang.evalMultilingualContent(elementAttributes.get(Keys.DESCRIPTION));\n        if (d.length() > 0)\n            return d;\n        else\n            return super.getDescription(elementAttributes);\n    }\n}.addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).addAttribute(Keys.DESCRIPTION).addAttribute(Keys.INT_FORMAT).addAttribute(Keys.PINNUMBER).addAttribute(Keys.ADD_VALUE_TO_GRAPH).addAttribute(Keys.IN_OUT_SMALL).supportsHDL();" ], [ "LEDDESCRIPTION", "de.neemann.digital.core.io", "Out", "public static final ElementTypeDescription LEDDESCRIPTION = new ElementTypeDescription(\"LED\", Out.class, input(\"in\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.LED_SIZE).addAttribute(Keys.COLOR);" ], [ "POLARITYAWARELEDDESCRIPTION", "de.neemann.digital.core.io", "Out", "public static final ElementTypeDescription POLARITYAWARELEDDESCRIPTION = new ElementTypeDescription(\"PolarityAwareLED\", attributes -> new Out(1, 1), input(\"A\"), input(\"C\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.COLOR);" ], [ "SEVENDESCRIPTION", "de.neemann.digital.core.io", "Out", "public static final ElementTypeDescription SEVENDESCRIPTION = new SevenSegTypeDescription();" ], [ "SEVENHEXDESCRIPTION", "de.neemann.digital.core.io", "Out", "public static final ElementTypeDescription SEVENHEXDESCRIPTION = new ElementTypeDescription(\"Seven-Seg-Hex\", attributes -> new Out(4, 1), input(\"d\"), input(\"dp\")).addAttribute(Keys.COLOR).addAttribute(Keys.SEVEN_SEG_SIZE);" ], [ "SIXTEENDESCRIPTION", "de.neemann.digital.core.io", "Out", "public static final ElementTypeDescription SIXTEENDESCRIPTION = new ElementTypeDescription(\"SixteenSeg\", attributes -> new Out(16, 1), input(\"led\"), input(\"dp\")).addAttribute(Keys.COLOR).addAttribute(Keys.SEVEN_SEG_SIZE);" ], [ "DESCRIPTION", "de.neemann.digital.core.io", "RotEncoder", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(RotEncoder.class).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL);" ], [ "DESCRIPTION", "de.neemann.digital.core.io", "PinControl", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(PinControl.class, input(\"wr\"), input(\"oe\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.MIRROR).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.io", "DipSwitch", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(DipSwitch.class) {\n\n    @Override\n    public String getDescription(ElementAttributes elementAttributes) {\n        String d = Lang.evalMultilingualContent(elementAttributes.get(Keys.DESCRIPTION));\n        if (d.length() > 0)\n            return d;\n        else\n            return super.getDescription(elementAttributes);\n    }\n}.addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.DIP_DEFAULT).addAttribute(Keys.DESCRIPTION);" ], [ "DESCRIPTION", "de.neemann.digital.core.io", "LightBulb", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(LightBulb.class, input(\"A\"), input(\"B\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.COLOR);" ], [ "DESCRIPTION", "de.neemann.digital.core.io", "Probe", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"Probe\", Probe.class, input(\"in\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.INT_FORMAT).addAttribute(Keys.PROBE_MODE).addAttribute(Keys.ADD_VALUE_TO_GRAPH);" ], [ "DESCRIPTION", "de.neemann.digital.core.io", "Button", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Button.class).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.ACTIVE_LOW).addAttribute(Keys.MAP_TO_KEY).addAttribute(Keys.ADD_VALUE_TO_GRAPH);" ], [ "DESCRIPTION", "de.neemann.digital.core.io", "ButtonLED", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(ButtonLED.class, input(\"in\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.ACTIVE_LOW).addAttribute(Keys.MAP_TO_KEY).addAttribute(Keys.COLOR);" ], [ "DESCRIPTION", "de.neemann.digital.core.io", "In", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(In.class) {\n\n    @Override\n    public String getDescription(ElementAttributes elementAttributes) {\n        String d = Lang.evalMultilingualContent(elementAttributes.get(Keys.DESCRIPTION));\n        if (d.length() > 0)\n            return d;\n        else\n            return super.getDescription(elementAttributes);\n    }\n}.addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).addAttribute(Keys.INPUT_DEFAULT).addAttribute(Keys.IS_HIGH_Z).addAttribute(Keys.AVOID_ACTIVE_LOW).addAttribute(Keys.DESCRIPTION).addAttribute(Keys.INT_FORMAT).addAttribute(Keys.PINNUMBER).addAttribute(Keys.ADD_VALUE_TO_GRAPH).addAttribute(Keys.IN_OUT_SMALL).supportsHDL();" ], [ "STEPS", "de.neemann.digital.core.io", "StepperMotorUnipolar", "public static final int STEPS = 72;" ], [ "DESCRIPTION", "de.neemann.digital.core.io", "StepperMotorUnipolar", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(StepperMotorUnipolar.class, input(\"P0\"), input(\"P1\"), input(\"P2\"), input(\"P3\"), input(\"com\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.INVERT_OUTPUT);" ], [ "DESCRIPTION", "de.neemann.digital.core.io", "NotConnected", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(NotConnected.class).addAttribute(Keys.BITS);" ], [ "DESCRIPTION", "de.neemann.digital.core.io", "StepperMotorBipolar", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(StepperMotorBipolar.class, input(\"A+\"), input(\"A-\"), input(\"B+\"), input(\"B-\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.INVERT_OUTPUT);" ], [ "DESCRIPTION", "de.neemann.digital.core.io", "Const", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Const.class).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.VALUE).addAttribute(Keys.INT_FORMAT).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.io", "PowerSupply", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(PowerSupply.class, input(\"VDD\"), input(\"GND\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL);" ], [ "DESCRIPTION", "de.neemann.digital.core.io", "Ground", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Ground.class).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.io", "VDD", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(VDD.class).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).supportsHDL();" ], [ "INSTANCE", "de.neemann.digital.core.io.telnet", "ServerHolder", "public static final ServerHolder INSTANCE = new ServerHolder();" ], [ "DESCRIPTION", "de.neemann.digital.core.io.telnet", "Telnet", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Telnet.class, input(\"in\"), input(\"C\").setClock(), input(\"wr\"), input(\"rd\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.TELNET_ESCAPE).addAttribute(Keys.PORT);" ], [ "BITS", "de.neemann.digital.core.element", "Keys", "public static final Key.KeyBits BITS = new Key.KeyBits(\"Bits\", 1);" ], [ "INPUT_BITS", "de.neemann.digital.core.element", "Keys", "public static final Key.KeyBits INPUT_BITS = new Key.KeyBits(\"inputBits\", 8);" ], [ "OUTPUT_BITS", "de.neemann.digital.core.element", "Keys", "public static final Key.KeyBits OUTPUT_BITS = new Key.KeyBits(\"outputBits\", 16);" ], [ "INPUT_COUNT", "de.neemann.digital.core.element", "Keys", "public static final Key.KeyInteger INPUT_COUNT = new Key.KeyInteger(\"Inputs\", 2).setComboBoxValues(2, 3, 4, 5).setMin(2);" ], [ "LUT_INPUT_COUNT", "de.neemann.digital.core.element", "Keys", "public static final Key.KeyInteger LUT_INPUT_COUNT = new Key.KeyInteger(\"Inputs\", 2).setComboBoxValues(2, 3, 4, 5, 6).setMax(20).setMin(2);" ], [ "MAX_VALUE", "de.neemann.digital.core.element", "Keys", "public static final Key.KeyInteger MAX_VALUE = new Key.KeyInteger(\"maxValue\", 0).setMin(0);" ], [ "DELAY_TIME", "de.neemann.digital.core.element", "Keys", "public static final Key.KeyInteger DELAY_TIME = new Key.KeyInteger(\"delayTime\", 1).setComboBoxValues(1, 2, 3, 4, 5).setMin(1).setMax(20);" ], [ "MONOFLOP_DELAY", "de.neemann.digital.core.element", "Keys", "public static final Key.KeyInteger MONOFLOP_DELAY = new Key.KeyInteger(\"timerDelay\", 1).setMin(1);" ], [ "LABEL", "de.neemann.digital.core.element", "Keys", "public static final Key<String> LABEL = new Key<>(\"Label\", \"\");" ], [ "FONT_SIZE", "de.neemann.digital.core.element", "Keys", "public static final Key<Integer> FONT_SIZE = new Key.KeyInteger(\"textFontSize\", Style.NORMAL.getFontSize()).setComboBoxValues(14, 17, 20, 24, 36, 48, 60).setMin(10).setMax(70);" ], [ "TEXT_ORIENTATION", "de.neemann.digital.core.element", "Keys", "public static final Key<Orientation> TEXT_ORIENTATION = new Key.KeyEnum<>(\"textOrientation\", Orientation.LEFTTOP, Orientation.values()).setSecondary();" ], [ "LED_SIZE", "de.neemann.digital.core.element", "Keys", "public static final Key<Integer> LED_SIZE = new Key.KeyInteger(\"Size\", 1).setComboBoxValues(0, 1, 2, 3, 4, 5).setMin(0).allowGroupEdit().setSecondary();" ], [ "SEVEN_SEG_SIZE", "de.neemann.digital.core.element", "Keys", "public static final Key<Integer> SEVEN_SEG_SIZE = new Key.KeyInteger(\"segSize\", 2).setComboBoxValues(0, 1, 2, 3, 4, 5).setMin(0).allowGroupEdit().useTranslationOf(LED_SIZE);" ], [ "VALUE", "de.neemann.digital.core.element", "Keys", "public static final Key<Long> VALUE = new Key<>(\"Value\", 1L).setAdaptiveIntFormat().allowGroupEdit();" ], [ "DEFAULT", "de.neemann.digital.core.element", "Keys", "public static final Key<Long> DEFAULT = new Key<>(\"Default\", 0L).allowGroupEdit().setSecondary();" ], [ "INPUT_DEFAULT", "de.neemann.digital.core.element", "Keys", "public static final Key<InValue> INPUT_DEFAULT = new Key<>(\"InDefault\", new InValue(0)).setAdaptiveIntFormat().allowGroupEdit().setSecondary();" ], [ "DIP_DEFAULT", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> DIP_DEFAULT = new Key<>(\"dipDefault\", false).allowGroupEdit().setSecondary();" ], [ "COLOR", "de.neemann.digital.core.element", "Keys", "public static final Key<java.awt.Color> COLOR = new Key<>(\"Color\", java.awt.Color.RED).allowGroupEdit();" ], [ "INPUT_SPLIT", "de.neemann.digital.core.element", "Keys", "public static final Key<String> INPUT_SPLIT = new Key<>(\"Input Splitting\", \"4,4\");" ], [ "OUTPUT_SPLIT", "de.neemann.digital.core.element", "Keys", "public static final Key<String> OUTPUT_SPLIT = new Key<>(\"Output Splitting\", \"8\");" ], [ "SPLITTER_SPREADING", "de.neemann.digital.core.element", "Keys", "public static final Key<Integer> SPLITTER_SPREADING = new Key.KeyInteger(\"splitterSpreading\", 1).setComboBoxValues(1, 2, 3, 4).setMin(1).setMax(20).setSecondary();" ], [ "IN_OUT_SMALL", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> IN_OUT_SMALL = new Key<>(\"small\", false).allowGroupEdit().setSecondary();" ], [ "RUN_AT_REAL_TIME", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> RUN_AT_REAL_TIME = new Key<>(\"runRealTime\", false);" ], [ "INVERT_OUTPUT", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> INVERT_OUTPUT = new Key<>(\"invertOutput\", true);" ], [ "FREQUENCY", "de.neemann.digital.core.element", "Keys", "public static final Key<Integer> FREQUENCY = new Key.KeyInteger(\"Frequency\", 1).setComboBoxValues(1, 2, 5, 10, 20, 50, 100, 200, 500, 5000, 50000, Integer.MAX_VALUE).setMin(1).setDependsOn(RUN_AT_REAL_TIME);" ], [ "SELECTOR_BITS", "de.neemann.digital.core.element", "Keys", "public static final Key<Integer> SELECTOR_BITS = new Key.KeyBits(\"Selector Bits\", 1).setMax(8);" ], [ "ADDR_BITS", "de.neemann.digital.core.element", "Keys", "public static final Key<Integer> ADDR_BITS = // needs to have the same default value as INPUT_COUNT!!!  see de.neemann.digital.gui.components.EditorFactory#DataFieldEditor\nnew Key.KeyBits(\"AddrBits\", 2).setMax(24);" ], [ "BLOWN", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> BLOWN = new Key<>(\"Blown\", false).allowGroupEdit();" ], [ "CLOSED", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> CLOSED = new Key<>(\"Closed\", false).allowGroupEdit();" ], [ "SIGNED", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> SIGNED = new Key<>(\"Signed\", false).allowGroupEdit();" ], [ "REMAINDER_POSITIVE", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> REMAINDER_POSITIVE = new Key<>(\"remainderPositive\", true).setDependsOn(SIGNED);" ], [ "DATA", "de.neemann.digital.core.element", "Keys", "public static final Key<DataField> DATA = new Key<>(\"Data\", DataField::new);" ], [ "FLIP_SEL_POSITON", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> FLIP_SEL_POSITON = new Key<>(\"flipSelPos\", false).allowGroupEdit();" ], [ "ROTATE", "de.neemann.digital.core.element", "Keys", "public static final Key<Rotation> ROTATE = new Key<>(\"rotation\", new Rotation(0)).allowGroupEdit().setSecondary();" ], [ "WIDTH", "de.neemann.digital.core.element", "Keys", "public static final Key.KeyInteger WIDTH = new Key.KeyInteger(\"Width\", 3).setMin(2);" ], [ "SHAPE_TYPE", "de.neemann.digital.core.element", "Keys", "public static final Key<CustomCircuitShapeType> SHAPE_TYPE = new Key.KeyEnum<>(\"shapeType\", CustomCircuitShapeType.DEFAULT, CustomCircuitShapeType.values()).setSecondary();" ], [ "LAYOUT_SHAPE_DELTA", "de.neemann.digital.core.element", "Keys", "public static final Key.KeyInteger LAYOUT_SHAPE_DELTA = new Key.KeyInteger(\"layoutShapeDelta\", 0).setMin(0);" ], [ "HEIGHT", "de.neemann.digital.core.element", "Keys", "public static final Key<Integer> HEIGHT = new Key.KeyInteger(\"Height\", 3).setMin(2).setSecondary().setDependsOn(SHAPE_TYPE, cst -> cst.equals(CustomCircuitShapeType.LAYOUT));" ], [ "TERM_WIDTH", "de.neemann.digital.core.element", "Keys", "public static final Key.KeyInteger TERM_WIDTH = new Key.KeyInteger(\"termWidth\", 50).setMin(10);" ], [ "TERM_HEIGHT", "de.neemann.digital.core.element", "Keys", "public static final Key.KeyInteger TERM_HEIGHT = new Key.KeyInteger(\"termHeight\", 25).setMin(5);" ], [ "CYCLES", "de.neemann.digital.core.element", "Keys", "public static final Key.KeyInteger CYCLES = new Key.KeyInteger(\"Cycles\", 100000).setComboBoxValues(1000, 10000, 100000, 1000000);" ], [ "ENABLED", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> ENABLED = new Key<>(\"enabled\", true).allowGroupEdit();" ], [ "VALUE_IS_PROBE", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> VALUE_IS_PROBE = new Key<>(\"valueIsProbe\", false).allowGroupEdit().setSecondary();" ], [ "IS_PROGRAM_MEMORY", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> IS_PROGRAM_MEMORY = new Key<>(\"isProgramMemory\", false).setSecondary();" ], [ "IS_PROGRAM_COUNTER", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> IS_PROGRAM_COUNTER = new Key<>(\"isProgramCounter\", false).setSecondary();" ], [ "AUTO_RELOAD_ROM", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> AUTO_RELOAD_ROM = new Key<>(\"autoReload\", false).setSecondary();" ], [ "LAST_DATA_FILE", "de.neemann.digital.core.element", "Keys", "public static final Key<File> LAST_DATA_FILE = new Key.KeyFile(\"lastDataFile\", new File(\"\")).setDependsOn(AUTO_RELOAD_ROM).setSecondary();" ], [ "SHOW_DATA_TABLE", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> SHOW_DATA_TABLE = new Key<>(\"showDataTable\", false).setSecondary();" ], [ "SHOW_DATA_GRAPH", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> SHOW_DATA_GRAPH = new Key<>(\"showDataGraph\", false).setSecondary();" ], [ "SHOW_DATA_GRAPH_MICRO", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> SHOW_DATA_GRAPH_MICRO = new Key<>(\"showDataGraphMicro\", false).setSecondary();" ], [ "ADD_VALUE_TO_GRAPH", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> ADD_VALUE_TO_GRAPH = new Key<>(\"addValueToGraph\", true).allowGroupEdit().setSecondary();" ], [ "MICRO_STEP", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> MICRO_STEP = new Key<>(\"microStep\", false);" ], [ "MAX_STEP_COUNT", "de.neemann.digital.core.element", "Keys", "public static final Key.KeyInteger MAX_STEP_COUNT = new Key.KeyInteger(\"maxStepCount\", 25).setMin(5);" ], [ "SETTINGS_MAX_STEP_COUNT", "de.neemann.digital.core.element", "Keys", "public static final Key<Integer> SETTINGS_MAX_STEP_COUNT = new Key.KeyInteger(\"settingsMaxStepCount\", 1000).setComboBoxValues(500, 1000, 5000, 10000).setMin(500).setSecondary().useTranslationOf(MAX_STEP_COUNT);" ], [ "IS_HIGH_Z", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> IS_HIGH_Z = new Key<>(\"isHighZ\", false).allowGroupEdit().setSecondary();" ], [ "AVOID_ACTIVE_LOW", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> AVOID_ACTIVE_LOW = new Key<>(\"avoidActiveLow\", false).setDependsOn(IS_HIGH_Z).allowGroupEdit().setSecondary();" ], [ "DESCRIPTION", "de.neemann.digital.core.element", "Keys", "public static final Key.LongString DESCRIPTION = new Key.LongString(\"Description\");" ], [ "NETNAME", "de.neemann.digital.core.element", "Keys", "public static final Key<String> NETNAME = new Key<>(\"NetName\", \"\");" ], [ "SETTINGS_IEEE_SHAPES", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> SETTINGS_IEEE_SHAPES = new Key<>(\"IEEEShapes\", !Locale.getDefault().getLanguage().equals(Locale.GERMAN.getLanguage())).setRequiresRestart();" ], [ "SETTINGS_LANGUAGE", "de.neemann.digital.core.element", "Keys", "public static final Key<Language> SETTINGS_LANGUAGE = new Key<>(\"Language\", new Language()).setRequiresRestart();" ], [ "SETTINGS_DEFAULT_TREESELECT", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> SETTINGS_DEFAULT_TREESELECT = new Key<>(\"defTreeSelect\", false);" ], [ "SETTINGS_EXPRESSION_FORMAT", "de.neemann.digital.core.element", "Keys", "public static final Key.KeyEnum<FormatToExpression> SETTINGS_EXPRESSION_FORMAT = new Key.KeyEnum<>(\"ExpressionFormat\", FormatToExpression.UNICODE, FormatToExpression.values(), true);" ], [ "SETTINGS_GRID", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> SETTINGS_GRID = new Key<>(\"grid\", true).setRequiresRepaint();" ], [ "SETTINGS_SHOW_WIRE_BITS", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> SETTINGS_SHOW_WIRE_BITS = new Key<>(\"showWireBits\", false);" ], [ "SETTINGS_MAC_MOUSE", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> SETTINGS_MAC_MOUSE = new Key<>(\"macMouse\", false).setRequiresRestart().setSecondary();" ], [ "SETTINGS_SHOW_TUNNEL_RENAME_DIALOG", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> SETTINGS_SHOW_TUNNEL_RENAME_DIALOG = new Key<>(\"tunnelRenameDialog\", true);" ], [ "SETTINGS_RENAME_LABELS", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> SETTINGS_RENAME_LABELS = new Key<>(\"renameLabels\", true);" ], [ "SETTINGS_OPEN_REMOTE_PORT", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> SETTINGS_OPEN_REMOTE_PORT = new Key<>(\"openRemotePort\", false).setSecondary().setRequiresRestart();" ], [ "SETTINGS_REMOTE_PORT", "de.neemann.digital.core.element", "Keys", "public static final Key<Integer> SETTINGS_REMOTE_PORT = new Key.KeyInteger(\"remotePort\", 41114).setMin(0).setMax(0xffff).setComboBoxValues(41114).setSecondary().setRequiresRestart().setDependsOn(SETTINGS_OPEN_REMOTE_PORT);" ], [ "OSCILLATION_DETECTION_COUNTER", "de.neemann.digital.core.element", "Keys", "public static final Key<Integer> OSCILLATION_DETECTION_COUNTER = new Key.KeyInteger(\"oscillationDetectionCounter\", 1000).setComboBoxValues(1000, 5000, 10000).setMin(1000).setMax(100000);" ], [ "INT_FORMAT", "de.neemann.digital.core.element", "Keys", "public static final Key<IntFormat> INT_FORMAT = new Key.KeyEnum<>(\"intFormat\", IntFormat.def, IntFormat.values()).setSecondary();" ], [ "PROBE_MODE", "de.neemann.digital.core.element", "Keys", "public static final Key<ProbeMode> PROBE_MODE = new Key.KeyEnum<>(\"probeMode\", ProbeMode.VALUE, ProbeMode.values());" ], [ "FIXED_POINT", "de.neemann.digital.core.element", "Keys", "public static final Key<Integer> FIXED_POINT = new Key.KeyInteger(\"fixedPoint\", 4).setMin(1).setMax(64).setDependsOn(INT_FORMAT, intFormat -> intFormat.equals(IntFormat.fixed) || intFormat.equals(IntFormat.fixedSigned)).allowGroupEdit().setSecondary();" ], [ "GRAPHIC_WIDTH", "de.neemann.digital.core.element", "Keys", "public static final Key.KeyInteger GRAPHIC_WIDTH = new Key.KeyInteger(\"graphicWidth\", 160).setMin(4);" ], [ "GRAPHIC_HEIGHT", "de.neemann.digital.core.element", "Keys", "public static final Key.KeyInteger GRAPHIC_HEIGHT = new Key.KeyInteger(\"graphicHeight\", 100).setMin(4);" ], [ "RELAY_NORMALLY_CLOSED", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> RELAY_NORMALLY_CLOSED = new Key<>(\"relayNormallyClosed\", false).allowGroupEdit();" ], [ "POLES", "de.neemann.digital.core.element", "Keys", "public static final Key<Integer> POLES = new Key.KeyInteger(\"poles\", 1).setComboBoxValues(1, 2, 3, 4).setMin(1).allowGroupEdit();" ], [ "BARREL_SHIFTER_MODE", "de.neemann.digital.core.element", "Keys", "public static final Key<BarrelShifterMode> BARREL_SHIFTER_MODE = new Key.KeyEnum<>(\"barrelShifterMode\", BarrelShifterMode.logical, BarrelShifterMode.values());" ], [ "DIRECTION", "de.neemann.digital.core.element", "Keys", "public static final Key<LeftRightFormat> DIRECTION = new Key.KeyEnum<>(\"direction\", LeftRightFormat.left, LeftRightFormat.values());" ], [ "BARREL_SIGNED", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> BARREL_SIGNED = new Key<>(\"barrelSigned\", false);" ], [ "COMMON_CONNECTION", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> COMMON_CONNECTION = new Key<>(\"commonCathode\", false).allowGroupEdit();" ], [ "COMMON_CONNECTION_TYPE", "de.neemann.digital.core.element", "Keys", "public static final Key<CommonConnectionType> COMMON_CONNECTION_TYPE = new Key.KeyEnum<>(\"commonConnectionType\", CommonConnectionType.cathode, CommonConnectionType.values()).setDependsOn(COMMON_CONNECTION).allowGroupEdit();" ], [ "LED_PERSISTENCE", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> LED_PERSISTENCE = new Key<>(\"ledPersistence\", false).allowGroupEdit().setDependsOn(COMMON_CONNECTION);" ], [ "LED_PERSIST_TIME", "de.neemann.digital.core.element", "Keys", "public static final Key<Integer> LED_PERSIST_TIME = new Key.KeyInteger(\"persistTime\", 0).setMin(0).allowGroupEdit();" ], [ "SETTINGS_ATF1502_FITTER", "de.neemann.digital.core.element", "Keys", "public static final Key<File> SETTINGS_ATF1502_FITTER = new Key.KeyFile(\"atf1502Fitter\", new File(\"c:/Wincupl/WinCupl/Fitters\")).setDirectoryOnly(true).setSecondary();" ], [ "SETTINGS_ATMISP", "de.neemann.digital.core.element", "Keys", "public static final Key<File> SETTINGS_ATMISP = new Key.KeyFile(\"ATMISP\", getATMISPPath()).setSecondary();" ], [ "ROW_DATA_BITS", "de.neemann.digital.core.element", "Keys", "public static final Key.KeyBits ROW_DATA_BITS = new Key.KeyBits(\"rowDataBits\", 8);" ], [ "COL_ADDR_BITS", "de.neemann.digital.core.element", "Keys", "public static final Key.KeyBits COL_ADDR_BITS = new Key.KeyBits(\"colAddrBits\", 3);" ], [ "LOCKED_MODE", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> LOCKED_MODE = new Key<>(\"lockedMode\", false);" ], [ "PINNUMBER", "de.neemann.digital.core.element", "Keys", "public static final Key<String> PINNUMBER = new Key<>(\"pinNumber\", \"\").setSecondary();" ], [ "PINCOUNT", "de.neemann.digital.core.element", "Keys", "public static final Key<Integer> PINCOUNT = new Key.KeyInteger(\"pinCount\", 0).setMin(0).setSecondary().setDependsOn(SHAPE_TYPE, st -> st.equals(CustomCircuitShapeType.DIL));" ], [ "INVERTER_CONFIG", "de.neemann.digital.core.element", "Keys", "public static final Key<InverterConfig> INVERTER_CONFIG = new Key<>(\"inverterConfig\", new InverterConfig.Builder().build());" ], [ "BACKGROUND_COLOR", "de.neemann.digital.core.element", "Keys", "public static final Key<java.awt.Color> BACKGROUND_COLOR = new Key<>(\"backgroundColor\", new Color(255, 255, 180, 200));" ], [ "SETTINGS_FONT_SCALING", "de.neemann.digital.core.element", "Keys", "public static final Key<Integer> SETTINGS_FONT_SCALING = new Key.KeyInteger(\"fontSize\", Screen.getDefaultFontScaling()).setComboBoxValues(100, 120, 150, 180, 200, 250, 300).setMin(50).setMax(400).setRequiresRestart().setSecondary();" ], [ "SETTINGS_USE_EQUALS_KEY", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> SETTINGS_USE_EQUALS_KEY;" ], [ "WITH_ENABLE", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> WITH_ENABLE = new Key<>(\"withEnable\", true);" ], [ "FET_UNIDIRECTIONAL", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> FET_UNIDIRECTIONAL = new Key<>(\"unidirectional\", false);" ], [ "ACTIVE_LOW", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> ACTIVE_LOW = new Key<>(\"activeLow\", false).allowGroupEdit();" ], [ "MAP_TO_KEY", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> MAP_TO_KEY = new Key<>(\"mapToKey\", false).allowGroupEdit();" ], [ "SETTINGS_LIBRARY_PATH", "de.neemann.digital.core.element", "Keys", "public static final Key<File> SETTINGS_LIBRARY_PATH = new Key.KeyFile(\"libraryPath\", ElementLibrary.getLibPath()).setDirectoryOnly(true).setSecondary();" ], [ "SETTINGS_JAR_PATH", "de.neemann.digital.core.element", "Keys", "public static final Key<File> SETTINGS_JAR_PATH = new Key.KeyFile(\"jarPath\", new File(\"\")).setSecondary().setRequiresRestart();" ], [ "ROMMANAGER", "de.neemann.digital.core.element", "Keys", "public static final Key<ROMManagerFile> ROMMANAGER = new Key<>(\"romContent\", ROMManagerFile::new).setSecondary();" ], [ "APPLICATION_TYPE", "de.neemann.digital.core.element", "Keys", "public static final Key.KeyEnum<Application.Type> APPLICATION_TYPE = new Key.KeyEnum<>(\"applicationType\", Application.Type.Generic, Application.Type.values());" ], [ "EXTERNAL_INPUTS", "de.neemann.digital.core.element", "Keys", "public static final Key<String> EXTERNAL_INPUTS = new Key<>(\"externalInputs\", \"in\");" ], [ "EXTERNAL_OUTPUTS", "de.neemann.digital.core.element", "Keys", "public static final Key<String> EXTERNAL_OUTPUTS = new Key<>(\"externalOutputs\", \"out\");" ], [ "EXTERNAL_CODE", "de.neemann.digital.core.element", "Keys", "public static final Key.LongString EXTERNAL_CODE = new Key.LongString(\"Code\").setRows(30).setColumns(80).setLineNumbers(true);" ], [ "EXTERNAL_CODE_FILE", "de.neemann.digital.core.element", "Keys", "public static final Key.KeyFile EXTERNAL_CODE_FILE = new Key.KeyFile(\"CodeFile\", new File(\"\"));" ], [ "SETTINGS_GHDL_PATH", "de.neemann.digital.core.element", "Keys", "public static final Key<File> SETTINGS_GHDL_PATH = new Key.KeyFile(\"ghdlPath\", new File(\"ghdl\")).setSecondary();" ], [ "GHDL_OPTIONS", "de.neemann.digital.core.element", "Keys", "public static final Key<String> GHDL_OPTIONS = new Key.LongString(\"ghdlOptions\", \"--std=08 --ieee=synopsys\").setRows(3).setColumns(30).setPanelId(\"Options\");" ], [ "IVERILOG_OPTIONS", "de.neemann.digital.core.element", "Keys", "public static final Key<String> IVERILOG_OPTIONS = new Key.LongString(\"iverilogOptions\", \"\").setRows(3).setColumns(30).setPanelId(\"Options\");" ], [ "SETTINGS_IVERILOG_PATH", "de.neemann.digital.core.element", "Keys", "public static final Key<File> SETTINGS_IVERILOG_PATH = new Key.KeyFile(\"iverilogPath\", new File(\"iverilog\")).setSecondary();" ], [ "CUSTOM_SHAPE", "de.neemann.digital.core.element", "Keys", "public static final Key<CustomShapeDescription> CUSTOM_SHAPE = new Key<>(\"customShape\", new CustomShapeDescription.Builder().build()).setSecondary().setDependsOn(SHAPE_TYPE, st -> st.equals(CustomCircuitShapeType.CUSTOM));" ], [ "PRELOAD_PROGRAM", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> PRELOAD_PROGRAM = new Key<>(\"preloadProgram\", false).setSecondary();" ], [ "BIG_ENDIAN", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> BIG_ENDIAN = new Key<>(\"bigEndian\", false).setSecondary().setDependsOn(AUTO_RELOAD_ROM);" ], [ "PROGRAM_TO_PRELOAD", "de.neemann.digital.core.element", "Keys", "public static final Key<File> PROGRAM_TO_PRELOAD = new Key.KeyFile(\"preloadProgramFile\", new File(\"\")).setSecondary().setDependsOn(PRELOAD_PROGRAM);" ], [ "BIG_ENDIAN_SETTING", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> BIG_ENDIAN_SETTING = new Key<>(\"bigEndianSetting\", false).setSecondary().useTranslationOf(BIG_ENDIAN).setDependsOn(PRELOAD_PROGRAM);" ], [ "WIDE_SHAPE", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> WIDE_SHAPE = new Key<>(\"wideShape\", false).setSecondary().allowGroupEdit();" ], [ "RECT_WIDTH", "de.neemann.digital.core.element", "Keys", "public static final Key.KeyInteger RECT_WIDTH = new Key.KeyInteger(\"RectWidth\", 3).setMin(2);" ], [ "RECT_HEIGHT", "de.neemann.digital.core.element", "Keys", "public static final Key.KeyInteger RECT_HEIGHT = new Key.KeyInteger(\"RectHeight\", 3).setMin(2);" ], [ "RECT_INSIDE", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> RECT_INSIDE = new Key<>(\"RectInside\", false).setSecondary();" ], [ "RECT_BOTTOM", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> RECT_BOTTOM = new Key<>(\"RectBottom\", false).setSecondary();" ], [ "RECT_RIGHT", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> RECT_RIGHT = new Key<>(\"RectRight\", false).setSecondary();" ], [ "MIDI_CHANNEL", "de.neemann.digital.core.element", "Keys", "public static final Key.KeyInteger MIDI_CHANNEL = new Key.KeyInteger(\"midiChannel\", 1).setMin(1).setMax(16);" ], [ "MIDI_INSTRUMENT", "de.neemann.digital.core.element", "Keys", "public static final Key<String> MIDI_INSTRUMENT = new Key<>(\"midiInstrument\", \"\");" ], [ "MIDI_PROG_CHANGE", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> MIDI_PROG_CHANGE = new Key<>(\"midiProgChange\", false);" ], [ "SETTINGS_TOOLCHAIN_CONFIG", "de.neemann.digital.core.element", "Keys", "public static final Key<File> SETTINGS_TOOLCHAIN_CONFIG = new Key.KeyFile(\"toolChainConfig\", new File(\"\")).setSecondary().setRequiresRestart();" ], [ "GENERIC", "de.neemann.digital.core.element", "Keys", "public static final Key<String> GENERIC = new Key.LongString(\"generic\").setLineNumbers(true).allowGroupEdit();" ], [ "GENERICLARGE", "de.neemann.digital.core.element", "Keys", "public static final Key<String> GENERICLARGE = new Key.LongString(\"generic\").setLineNumbers(true).setRows(20).allowGroupEdit();" ], [ "IS_GENERIC", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> IS_GENERIC = new Key<>(\"isGeneric\", false).setSecondary();" ], [ "SETTINGS_SHOW_TUTORIAL", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> SETTINGS_SHOW_TUTORIAL = new Key<>(\"showTutorial\", true).setSecondary();" ], [ "SETTINGS_WIRETOOLTIP", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> SETTINGS_WIRETOOLTIP = new Key<>(\"wireToolTips\", false);" ], [ "SWITCH_ACTS_AS_INPUT", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> SWITCH_ACTS_AS_INPUT = new Key<>(\"switchActsAsInput\", false).setSecondary();" ], [ "SNAP_TO_GRID", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> SNAP_TO_GRID = new Key<>(\"snapToGrid\", true).setSecondary();" ], [ "MIRROR", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> MIRROR = new Key<>(\"mirror\", false).allowGroupEdit().setSecondary();" ], [ "TESTDATA", "de.neemann.digital.core.element", "Keys", "public static final Key<TestCaseDescription> TESTDATA = new Key<>(\"Testdata\", TestCaseDescription::new);" ], [ "TRIGGER", "de.neemann.digital.core.element", "Keys", "public static final Key.KeyEnum<ScopeTrigger.Trigger> TRIGGER = new Key.KeyEnum<>(\"trigger\", ScopeTrigger.Trigger.both, ScopeTrigger.Trigger.values());" ], [ "PORT", "de.neemann.digital.core.element", "Keys", "public static final Key.KeyInteger PORT = new Key.KeyInteger(\"port\", 23).setMin(1).setMax((1 << 16) - 1);" ], [ "TELNET_ESCAPE", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> TELNET_ESCAPE = new Key<>(\"telnetEscape\", true).allowGroupEdit();" ], [ "SKIP_HDL", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> SKIP_HDL = new Key<>(\"skipHDL\", false).setSecondary();" ], [ "PREFIX", "de.neemann.digital.core.basic", "FanIn", "public static final String PREFIX = \"In_\";" ], [ "DESCRIPTION", "de.neemann.digital.core.basic", "NOr", "public static final ElementTypeDescription DESCRIPTION = new FanInDescription(NOr.class).addAttribute(Keys.WIDE_SHAPE);" ], [ "DESCRIPTION", "de.neemann.digital.core.basic", "And", "public static final ElementTypeDescription DESCRIPTION = new FanInDescription(And.class).addAttribute(Keys.WIDE_SHAPE);" ], [ "DESCRIPTION", "de.neemann.digital.core.basic", "XNOr", "public static final ElementTypeDescription DESCRIPTION = new FanInDescription(XNOr.class).addAttribute(Keys.WIDE_SHAPE);" ], [ "DESCRIPTION", "de.neemann.digital.core.basic", "XOr", "public static final ElementTypeDescription DESCRIPTION = new FanInDescription(XOr.class).addAttribute(Keys.WIDE_SHAPE);" ], [ "DESCRIPTION", "de.neemann.digital.core.basic", "Not", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Not.class, input(\"in\")).addAttribute(Keys.ROTATE).addAttribute(Keys.WIDE_SHAPE).addAttribute(Keys.BITS).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.basic", "NAnd", "public static final ElementTypeDescription DESCRIPTION = new FanInDescription(NAnd.class).addAttribute(Keys.WIDE_SHAPE);" ], [ "DESCRIPTION", "de.neemann.digital.core.basic", "Or", "public static final ElementTypeDescription DESCRIPTION = new FanInDescription(Or.class).addAttribute(Keys.WIDE_SHAPE);" ], [ "STARTED", "de.neemann.digital.core", "ModelEvent", "public static final ModelEvent STARTED = new ModelEvent(ModelEventType.STARTED);" ], [ "CLOSED", "de.neemann.digital.core", "ModelEvent", "public static final ModelEvent CLOSED = new ModelEvent(ModelEventType.CLOSED);" ], [ "POSTCLOSED", "de.neemann.digital.core", "ModelEvent", "public static final ModelEvent POSTCLOSED = new ModelEvent(ModelEventType.POSTCLOSED);" ], [ "STEP", "de.neemann.digital.core", "ModelEvent", "public static final ModelEvent STEP = new ModelEvent(ModelEventType.STEP);" ], [ "CHECKBURN", "de.neemann.digital.core", "ModelEvent", "public static final ModelEvent CHECKBURN = new ModelEvent(ModelEventType.CHECKBURN);" ], [ "MICROSTEP", "de.neemann.digital.core", "ModelEvent", "public static final ModelEvent MICROSTEP = new ModelEvent(ModelEventType.MICROSTEP);" ], [ "RUN_TO_BREAK", "de.neemann.digital.core", "ModelEvent", "public static final ModelEvent RUN_TO_BREAK = new ModelEvent(ModelEventType.RUN_TO_BREAK);" ], [ "RUN_TO_BREAK_TIMEOUT", "de.neemann.digital.core", "ModelEvent", "public static final ModelEvent RUN_TO_BREAK_TIMEOUT = new ModelEvent(ModelEventType.RUN_TO_BREAK_TIMEOUT);" ], [ "BREAK", "de.neemann.digital.core", "ModelEvent", "public static final ModelEvent BREAK = new ModelEvent(ModelEventType.BREAK);" ], [ "DESCRIPTION", "de.neemann.digital.core.switching", "FGPFET", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(FGPFET.class, input(\"G\")).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).addAttribute(Keys.BLOWN);" ], [ "DESCRIPTION", "de.neemann.digital.core.switching", "NFET", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(NFET.class, input(\"G\")).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.BITS).addAttribute(Keys.FET_UNIDIRECTIONAL).addAttribute(Keys.LABEL);" ], [ "DESCRIPTION", "de.neemann.digital.core.switching", "FGNFET", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(FGNFET.class, input(\"G\")).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).addAttribute(Keys.BLOWN);" ], [ "DESCRIPTION", "de.neemann.digital.core.switching", "PFET", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(PFET.class, input(\"G\")).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.BITS).addAttribute(Keys.FET_UNIDIRECTIONAL).addAttribute(Keys.LABEL);" ], [ "DESCRIPTION", "de.neemann.digital.core.switching", "TransGate", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(TransGate.class, input(\"S\"), input(\"~S\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS);" ], [ "DESCRIPTION", "de.neemann.digital.core.switching", "SwitchDT", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(SwitchDT.class).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).addAttribute(Keys.POLES);" ], [ "DESCRIPTION", "de.neemann.digital.core.switching", "Relay", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Relay.class, input(\"in1\"), input(\"in2\")).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).addAttribute(Keys.POLES).addAttribute(Keys.RELAY_NORMALLY_CLOSED);" ], [ "DESCRIPTION", "de.neemann.digital.core.switching", "RelayDT", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(RelayDT.class, input(\"in1\"), input(\"in2\")).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).addAttribute(Keys.POLES);" ], [ "DESCRIPTION", "de.neemann.digital.core.switching", "Switch", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Switch.class).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).addAttribute(Keys.POLES).addAttribute(Keys.CLOSED).addAttribute(Keys.SWITCH_ACTS_AS_INPUT);" ], [ "DESCRIPTION", "de.neemann.digital.core.switching", "Fuse", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Fuse.class).addAttribute(Keys.ROTATE).addAttribute(Keys.BLOWN);" ], [ "DESCRIPTION", "de.neemann.digital.core.wiring", "Reset", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"Reset\", Reset.class).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.INVERT_OUTPUT).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.wiring", "Stop", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Stop.class, input(\"stop\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.INVERTER_CONFIG);" ], [ "DESCRIPTION", "de.neemann.digital.core.wiring", "Decoder", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Decoder.class, input(\"sel\")).addAttribute(Keys.ROTATE).addAttribute(Keys.SELECTOR_BITS).addAttribute(Keys.FLIP_SEL_POSITON).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.wiring", "Delay", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Delay.class, input(\"in\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.DELAY_TIME);" ], [ "DESCRIPTION", "de.neemann.digital.core.wiring", "Driver", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Driver.class, input(\"in\"), input(\"sel\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.FLIP_SEL_POSITON).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.wiring", "DriverInvSel", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(DriverInvSel.class, input(\"in\"), input(\"sel\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.FLIP_SEL_POSITON).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.wiring", "PriorityEncoder", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(PriorityEncoder.class) {\n\n    @Override\n    public PinDescriptions getInputDescription(ElementAttributes elementAttributes) {\n        int inputs = 1 << elementAttributes.get(Keys.SELECTOR_BITS);\n        PinDescription[] names = new PinDescription[inputs];\n        for (int i = 0; i < inputs; i++) names[i] = input(\"in\" + i, Lang.get(\"elem_PriorityEncoder_input\", i));\n        return new PinDescriptions(names);\n    }\n}.addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.SELECTOR_BITS).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.wiring", "BusSplitter", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(BusSplitter.class, input(\"OE\")).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.BITS).addAttribute(Keys.SPLITTER_SPREADING);" ], [ "DESCRIPTION", "de.neemann.digital.core.wiring", "Splitter", "public static final ElementTypeDescription DESCRIPTION = new SplitterTypeDescription().addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.INPUT_SPLIT).addAttribute(Keys.OUTPUT_SPLIT).addAttribute(Keys.SPLITTER_SPREADING).setShortName(\"\").supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.wiring", "Multiplexer", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Multiplexer.class) {\n\n    @Override\n    public PinDescriptions getInputDescription(ElementAttributes elementAttributes) {\n        int size = 1 << elementAttributes.get(Keys.SELECTOR_BITS);\n        PinDescription[] names = new PinDescription[size + 1];\n        names[0] = input(\"sel\", Lang.get(\"elem_Multiplexer_pin_sel\"));\n        for (int i = 0; i < size; i++) names[i + 1] = input(\"in_\" + i, Lang.get(\"elem_Multiplexer_input\", i));\n        return new PinDescriptions(names);\n    }\n}.addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.SELECTOR_BITS).addAttribute(Keys.FLIP_SEL_POSITON).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.wiring", "BitSelector", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(BitSelector.class, input(\"in\"), input(\"sel\")).addAttribute(Keys.ROTATE).addAttribute(Keys.SELECTOR_BITS).addAttribute(Keys.FLIP_SEL_POSITON).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.wiring", "Break", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Break.class, input(\"brk\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.ENABLED).addAttribute(Keys.CYCLES);" ], [ "DESCRIPTION", "de.neemann.digital.core.wiring", "Clock", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"Clock\", Clock.class).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.RUN_AT_REAL_TIME).addAttribute(Keys.FREQUENCY).addAttribute(Keys.PINNUMBER).addAttribute(Keys.IN_OUT_SMALL).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.wiring", "AsyncSeq", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(AsyncSeq.class).addAttribute(Keys.RUN_AT_REAL_TIME).addAttribute(Keys.FREQUENCY);" ], [ "DESCRIPTION", "de.neemann.digital.core.wiring", "Demultiplexer", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Demultiplexer.class, input(\"sel\"), input(\"in\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.SELECTOR_BITS).addAttribute(Keys.FLIP_SEL_POSITON).addAttribute(Keys.DEFAULT).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.flipflops", "FlipflopDAsync", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"D_FF_AS\", FlipflopDAsync.class, input(\"Set\"), input(\"D\"), input(\"C\").setClock(), input(\"Clr\")).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).addAttribute(Keys.DEFAULT).addAttribute(Keys.INVERTER_CONFIG).addAttribute(Keys.VALUE_IS_PROBE).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.flipflops", "FlipflopD", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"D_FF\", FlipflopD.class, input(\"D\"), input(\"C\").setClock()).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).addAttribute(Keys.DEFAULT).addAttribute(Keys.INVERTER_CONFIG).addAttribute(Keys.VALUE_IS_PROBE).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.flipflops", "FlipflopRSAsync", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"RS_FF_AS\", FlipflopRSAsync.class, input(\"S\"), input(\"R\")).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.LABEL).addAttribute(Keys.DEFAULT).addAttribute(Keys.INVERTER_CONFIG).addAttribute(Keys.VALUE_IS_PROBE);" ], [ "DESCRIPTION", "de.neemann.digital.core.flipflops", "FlipflopT", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"T_FF\", FlipflopT.class) {\n\n    @Override\n    public PinDescriptions getInputDescription(ElementAttributes elementAttributes) throws NodeException {\n        if (elementAttributes.get(Keys.WITH_ENABLE))\n            return new PinDescriptions(input(\"T\"), input(\"C\").setClock()).setLangKey(getPinLangKey());\n        else\n            return new PinDescriptions(input(\"C\").setClock()).setLangKey(getPinLangKey());\n    }\n}.addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.LABEL).addAttribute(Keys.WITH_ENABLE).addAttribute(Keys.DEFAULT).addAttribute(Keys.INVERTER_CONFIG).addAttribute(Keys.VALUE_IS_PROBE);" ], [ "DESCRIPTION", "de.neemann.digital.core.flipflops", "FlipflopJKAsync", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"JK_FF_AS\", FlipflopJKAsync.class, input(\"Set\"), input(\"J\"), input(\"C\").setClock(), input(\"K\"), input(\"Clr\")).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.LABEL).addAttribute(Keys.DEFAULT).addAttribute(Keys.INVERTER_CONFIG).addAttribute(Keys.VALUE_IS_PROBE).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.flipflops", "FlipflopJK", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"JK_FF\", FlipflopJK.class, input(\"J\"), input(\"C\").setClock(), input(\"K\")).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.LABEL).addAttribute(Keys.DEFAULT).addAttribute(Keys.INVERTER_CONFIG).addAttribute(Keys.VALUE_IS_PROBE).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.flipflops", "Monoflop", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Monoflop.class, input(\"C\").setClock(), input(\"R\")).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.LABEL).addAttribute(Keys.DEFAULT).addAttribute(Keys.MONOFLOP_DELAY).addAttribute(Keys.INVERTER_CONFIG).addAttribute(Keys.VALUE_IS_PROBE);" ], [ "DESCRIPTION", "de.neemann.digital.core.flipflops", "FlipflopRS", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"RS_FF\", FlipflopRS.class, input(\"S\"), input(\"C\").setClock(), input(\"R\")).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.LABEL).addAttribute(Keys.DEFAULT).addAttribute(Keys.INVERTER_CONFIG).addAttribute(Keys.VALUE_IS_PROBE);" ], [ "DESCRIPTION", "de.neemann.digital.core.arithmetic", "BarrelShifter", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(BarrelShifter.class, input(\"in\"), input(\"shift\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.BITS).addAttribute(Keys.BARREL_SIGNED).addAttribute(Keys.DIRECTION).addAttribute(Keys.BARREL_SHIFTER_MODE);" ], [ "DESCRIPTION", "de.neemann.digital.core.arithmetic", "Mul", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Mul.class, input(\"a\"), input(\"b\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.SIGNED).addAttribute(Keys.BITS).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.arithmetic", "Neg", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Neg.class, input(\"in\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.arithmetic", "BitExtender", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(BitExtender.class, input(\"in\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.INPUT_BITS).addAttribute(Keys.OUTPUT_BITS).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.arithmetic", "Add", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Add.class, input(\"a\"), input(\"b\"), input(\"c_i\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.BITS).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.arithmetic", "Div", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Div.class, input(\"a\"), input(\"b\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.BITS).addAttribute(Keys.SIGNED).addAttribute(Keys.REMAINDER_POSITIVE);" ], [ "DESCRIPTION", "de.neemann.digital.core.arithmetic", "PRNG", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(PRNG.class, input(\"S\"), input(\"se\"), input(\"ne\"), input(\"C\").setClock()).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.LABEL);" ], [ "DESCRIPTION", "de.neemann.digital.core.arithmetic", "Sub", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Sub.class, input(\"a\"), input(\"b\"), input(\"c_i\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.BITS).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.arithmetic", "Comparator", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Comparator.class, input(\"a\"), input(\"b\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.BITS).addAttribute(Keys.SIGNED).setShortName(\"\").supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.arithmetic", "BitCount", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(BitCount.class, input(\"in\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS);" ], [ "EMPTY_LIST", "de.neemann.digital.core", "ObservableValues", "public static final ObservableValues EMPTY_LIST = new ObservableValues();" ], [ "DEFAULT_FORMATTER", "de.neemann.digital.core", "IntFormat", "public static final ValueFormatter DEFAULT_FORMATTER = ValueFormatterDefault.INSTANCE;" ], [ "HEX_FORMATTER", "de.neemann.digital.core", "IntFormat", "public static final ValueFormatter HEX_FORMATTER = ValueFormatterHex.INSTANCE;" ], [ "DESCRIPTION", "de.neemann.digital.core.extern", "External", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(External.class) {\n\n    @Override\n    public PinDescriptions getInputDescription(ElementAttributes elementAttributes) {\n        return new PortDefinition(elementAttributes.get(Keys.EXTERNAL_INPUTS)).getPinDescriptions(PinDescription.Direction.input);\n    }\n\n    @Override\n    public PinDescriptions getOutputDescriptions(ElementAttributes elementAttributes) {\n        return new PortDefinition(elementAttributes.get(Keys.EXTERNAL_OUTPUTS)).getPinDescriptions(PinDescription.Direction.output);\n    }\n}.addAttribute(Keys.LABEL).addAttribute(Keys.WIDTH).addAttribute(Keys.EXTERNAL_INPUTS).addAttribute(Keys.EXTERNAL_OUTPUTS).addAttribute(Keys.EXTERNAL_CODE).addAttribute(Keys.APPLICATION_TYPE).addAttribute(Keys.GHDL_OPTIONS).addAttribute(Keys.IVERILOG_OPTIONS).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.extern", "ExternalFile", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(ExternalFile.class) {\n\n    @Override\n    public PinDescriptions getInputDescription(ElementAttributes elementAttributes) {\n        return new PortDefinition(elementAttributes.get(Keys.EXTERNAL_INPUTS)).getPinDescriptions(PinDescription.Direction.input);\n    }\n\n    @Override\n    public PinDescriptions getOutputDescriptions(ElementAttributes elementAttributes) {\n        return new PortDefinition(elementAttributes.get(Keys.EXTERNAL_OUTPUTS)).getPinDescriptions(PinDescription.Direction.output);\n    }\n}.addAttribute(Keys.LABEL).addAttribute(Keys.WIDTH).addAttribute(Keys.EXTERNAL_INPUTS).addAttribute(Keys.EXTERNAL_OUTPUTS).addAttribute(Keys.EXTERNAL_CODE_FILE).addAttribute(Keys.APPLICATION_TYPE).addAttribute(Keys.GHDL_OPTIONS).addAttribute(Keys.IVERILOG_OPTIONS).supportsHDL();" ], [ "DEFAULT_RAD", "de.neemann.digital.fsm", "State", "static final int DEFAULT_RAD = 70;" ], [ "INSTANCE", "de.neemann.digital.lang", "Lang", "static final Lang INSTANCE = new Lang();" ], [ "INSTANCE", "de.neemann.digital.lang", "InstanceHolder", "static final Lang INSTANCE = new Lang();" ], [ "DESCRIPTION", "de.neemann.digital.testing", "TestCaseElement", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"Testcase\", TestCaseElement.class).addAttribute(Keys.LABEL).addAttribute(Keys.TESTDATA).addAttribute(Keys.ENABLED).supportsHDL();" ], [ "STATENAMES", "de.neemann.digital.analyse", "TruthTableTableModel", "public static final String[] STATENAMES = new String[] { \"0\", \"1\", \"x\" };" ], [ "ONE", "de.neemann.digital.analyse.expression", "Constant", "public static final Constant ONE = new Constant(true);" ], [ "ZERO", "de.neemann.digital.analyse.expression", "Constant", "public static final Constant ZERO = new Constant(false);" ], [ "PRIMARY", "de.neemann.digital.gui.components", "EditorPanel", "public static final String PRIMARY = \"primary\";" ], [ "SECONDARY", "de.neemann.digital.gui.components", "EditorPanel", "public static final String SECONDARY = \"secondary\";" ], [ "INSTANCE", "de.neemann.digital.gui.components", "EditorFactory", "static final EditorFactory INSTANCE = new EditorFactory();" ], [ "MAX_TERMINAL_STORED", "de.neemann.digital.gui.components.terminal", "ConsoleTerminal", "public static final int MAX_TERMINAL_STORED = 2048;" ], [ "DESCRIPTION", "de.neemann.digital.gui.components.terminal", "Terminal", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Terminal.class, input(\"D\"), input(\"C\").setClock(), input(\"en\")).addAttribute(Keys.TERM_WIDTH).addAttribute(Keys.TERM_HEIGHT).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL);" ], [ "DESCRIPTION", "de.neemann.digital.gui.components.terminal", "Keyboard", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Keyboard.class, input(\"C\").setClock(), input(\"en\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.INVERTER_CONFIG);" ], [ "FAILED_COLOR", "de.neemann.digital.gui.components.testing", "ValueTableDialog", "static final Color FAILED_COLOR = new Color(255, 200, 200);" ], [ "PASSED_COLOR", "de.neemann.digital.gui.components.testing", "ValueTableDialog", "static final Color PASSED_COLOR = new Color(200, 255, 200);" ], [ "ICON_DELETE", "de.neemann.digital.gui.components", "CircuitComponent", "public static final Icon ICON_DELETE = IconCreator.create(\"delete.png\");" ], [ "ICON_COPY", "de.neemann.digital.gui.components", "CircuitComponent", "public static final Icon ICON_COPY = IconCreator.create(\"edit-copy.png\");" ], [ "DESCRIPTION", "de.neemann.digital.gui.components.graphics", "VGA", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(VGA.class, input(\"R\"), input(\"G\"), input(\"B\"), input(\"H\"), input(\"V\"), input(\"C\").setClock()).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL);" ], [ "DESCRIPTION", "de.neemann.digital.gui.components.graphics", "GraphicCard", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(GraphicCard.class, input(\"A\"), input(\"str\"), input(\"C\").setClock(), input(\"ld\"), input(\"B\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).addAttribute(Keys.GRAPHIC_WIDTH).addAttribute(Keys.GRAPHIC_HEIGHT);" ], [ "DESCRIPTION", "de.neemann.digital.gui.components.graphics", "LedMatrix", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(LedMatrix.class, input(\"r-data\"), input(\"c-addr\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.ROW_DATA_BITS).addAttribute(Keys.COL_ADDR_BITS).addAttribute(Keys.COLOR).addAttribute(Keys.LED_PERSISTENCE);" ], [ "DESCRIPTION", "de.neemann.digital.gui.components.data", "ScopeTrigger", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(ScopeTrigger.class, input(\"T\").setClock()).addAttribute(Keys.LABEL).addAttribute(Keys.TRIGGER).addAttribute(Keys.MAX_STEP_COUNT);" ], [ "DATADESCRIPTION", "de.neemann.digital.gui.components.data", "DummyElement", "public static final ElementTypeDescription DATADESCRIPTION = new ElementTypeDescription(\"Data\", DummyElement.class).addAttribute(Keys.MICRO_STEP).addAttribute(Keys.MAX_STEP_COUNT).addAttribute(Keys.SNAP_TO_GRID);" ], [ "TEXTDESCRIPTION", "de.neemann.digital.gui.components.data", "DummyElement", "public static final ElementTypeDescription TEXTDESCRIPTION = new ElementTypeDescription(\"Text\", DummyElement.class).addAttribute(Keys.DESCRIPTION).addAttribute(Keys.ROTATE).addAttribute(Keys.TEXT_ORIENTATION).addAttribute(Keys.FONT_SIZE).addAttribute(Keys.SNAP_TO_GRID);" ], [ "RECTDESCRIPTION", "de.neemann.digital.gui.components.data", "DummyElement", "public static final ElementTypeDescription RECTDESCRIPTION = new ElementTypeDescription(\"Rectangle\", DummyElement.class).addAttribute(Keys.LABEL).addAttribute(Keys.RECT_WIDTH).addAttribute(Keys.RECT_HEIGHT).addAttribute(Keys.RECT_INSIDE).addAttribute(Keys.RECT_BOTTOM).addAttribute(Keys.RECT_RIGHT).addAttribute(Keys.FONT_SIZE).addAttribute(Keys.SNAP_TO_GRID);" ], [ "LEFT", "de.neemann.digital.gui.components", "TextLineNumber", "public final static float LEFT = 0.0f;" ], [ "CENTER", "de.neemann.digital.gui.components", "TextLineNumber", "public final static float CENTER = 0.5f;" ], [ "RIGHT", "de.neemann.digital.gui.components", "TextLineNumber", "public final static float RIGHT = 1.0f;" ], [ "INSTANCE", "de.neemann.digital.gui", "Settings", "static final Settings INSTANCE = new Settings();" ], [ "INSTANCE", "de.neemann.digital.gui", "SettingsHolder", "static final Settings INSTANCE = new Settings();" ], [ "BASE_FILE_KEY", "de.neemann.digital.hdl.hgs", "Context", "public static final String BASE_FILE_KEY = \"baseFile\";" ], [ "DESCRIPTION", "de.neemann.digital.draw.library", "GenericCode", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(GenericCode.class).addAttribute(Keys.GENERICLARGE).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.draw.library", "GenericInitCode", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(GenericInitCode.class).addAttribute(Keys.LABEL).addAttribute(Keys.ENABLED).addAttribute(Keys.GENERIC).supportsHDL();" ], [ "GEN_ARGS_KEY", "de.neemann.digital.draw.library", "ResolveGenerics", "public static final String GEN_ARGS_KEY = \"genArgs\";" ], [ "HEIGHT", "de.neemann.digital.draw.shapes", "ButtonShape", "protected static final int HEIGHT = OUT_SIZE / 2;" ], [ "SIZE2", "de.neemann.digital.draw.shapes", "GenericShape", "public static final int SIZE2 = 10;" ], [ "SIZE", "de.neemann.digital.draw.shapes", "GenericShape", "public static final int SIZE = SIZE2 * 2;" ], [ "CIRC", "de.neemann.digital.draw.shapes", "DILShape", "static final float CIRC = (float) (4 * (Math.sqrt(2) - 1) / 3);" ], [ "DOWNSHIFT", "de.neemann.digital.draw.shapes", "VDDShape", "static final int DOWNSHIFT = 4;" ], [ "CHARGED_GATE", "de.neemann.digital.draw.shapes", "FGFETShapeN", "static final Style CHARGED_GATE = Style.NORMAL.deriveStyle(6, false, Color.RED);" ], [ "OUT_SIZE", "de.neemann.digital.draw.shapes", "OutputShape", "public static final int OUT_SIZE = GenericShape.SIZE * 3 / 4;" ], [ "LATEX_RAD", "de.neemann.digital.draw.shapes", "OutputShape", "static final Vector LATEX_RAD = new Vector(Style.MAXLINETHICK, Style.MAXLINETHICK);" ], [ "WIDTH2", "de.neemann.digital.draw.shapes", "PullDownShape", "public static final int WIDTH2 = SIZE2 - 3;" ], [ "HEIGHT", "de.neemann.digital.draw.shapes", "PullDownShape", "public static final int HEIGHT = SIZE + SIZE / 3;" ], [ "HEIGHT", "de.neemann.digital.draw.shapes", "SevenShape", "static final int HEIGHT = 7;" ], [ "FRAME", "de.neemann.digital.draw.shapes", "SevenShape", "public static final Polygon FRAME = Polygon.createFromPath(\"m -10,1 L 70,1 70,139 -10,139 z\");" ], [ "DESCRIPTION", "de.neemann.digital.draw.elements", "Tunnel", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Tunnel.class, input(\"in\")).addAttribute(Keys.ROTATE).addAttribute(Keys.NETNAME).supportsHDL();" ], [ "HIGH_CONTRAST", "de.neemann.digital.draw.graphics", "SVGSettings", "static final Key<Boolean> HIGH_CONTRAST = new Key<>(\"SVG_highContrast\", false);" ], [ "MONOCHROME", "de.neemann.digital.draw.graphics", "SVGSettings", "static final Key<Boolean> MONOCHROME = new Key<>(\"SVG_monochrome\", false);" ], [ "SMALL_IO", "de.neemann.digital.draw.graphics", "SVGSettings", "static final Key<Boolean> SMALL_IO = new Key<>(\"SVG_smallIO\", false);" ], [ "NO_PIN_MARKER", "de.neemann.digital.draw.graphics", "SVGSettings", "static final Key<Boolean> NO_PIN_MARKER = new Key<>(\"SVG_noPinMarker\", false);" ], [ "THINNER_LINES", "de.neemann.digital.draw.graphics", "SVGSettings", "static final Key<Boolean> THINNER_LINES = new Key<>(\"SVG_thinnerLines\", false);" ], [ "HIDE_TEST", "de.neemann.digital.draw.graphics", "SVGSettings", "static final Key<Boolean> HIDE_TEST = new Key<>(\"SVG_hideTest\", false);" ], [ "NO_SHAPE_FILLING", "de.neemann.digital.draw.graphics", "SVGSettings", "static final Key<Boolean> NO_SHAPE_FILLING = new Key<>(\"SVG_noShapeFilling\", false);" ], [ "LATEX", "de.neemann.digital.draw.graphics", "SVGSettings", "static final Key<Boolean> LATEX = new Key<>(\"SVG_LaTeX\", false);" ], [ "PINS_IN_MATH_MODE", "de.neemann.digital.draw.graphics", "SVGSettings", "static final Key<Boolean> PINS_IN_MATH_MODE = new Key<>(\"SVG_pinsInMathMode\", false).setDependsOn(LATEX);" ], [ "INSTANCE", "de.neemann.digital.draw.graphics", "SVGSettings", "static final SVGSettings INSTANCE = new SVGSettings();" ], [ "INSTANCE", "de.neemann.digital.draw.graphics", "SettingsHolder", "static final SVGSettings INSTANCE = new SVGSettings();" ], [ "COLOR_SCHEME", "de.neemann.digital.draw.graphics", "ColorScheme", "public static final Key<ColorSchemes> COLOR_SCHEME = new Key.KeyEnum<>(\"colorScheme\", ColorSchemes.DEFAULT, ColorSchemes.values()).setRequiresRepaint();" ], [ "CUSTOM_COLOR_SCHEME", "de.neemann.digital.draw.graphics", "ColorScheme", "public static final Key<ColorScheme> CUSTOM_COLOR_SCHEME = new Key<>(\"customColorScheme\", DEFAULT_SCHEME).setDependsOn(COLOR_SCHEME, o -> o.equals(ColorSchemes.CUSTOM)).setRequiresRepaint();" ], [ "MAXLINETHICK", "de.neemann.digital.draw.graphics", "Style", "public static final int MAXLINETHICK = 4;" ], [ "NORMAL", "de.neemann.digital.draw.graphics", "Style", "public static final Style NORMAL = new Builder().build();" ], [ "DISABLED", "de.neemann.digital.draw.graphics", "Style", "public static final Style DISABLED = new Builder().setColor(ColorKey.DISABLED).build();" ], [ "INOUT", "de.neemann.digital.draw.graphics", "Style", "public static final Style INOUT = new Builder(NORMAL).setFontStyle(Font.ITALIC).build();" ], [ "FAILED", "de.neemann.digital.draw.graphics", "Style", "public static final Style FAILED = new Builder(NORMAL).setColor(ColorKey.ERROR).build();" ], [ "PASS", "de.neemann.digital.draw.graphics", "Style", "public static final Style PASS = new Builder(NORMAL).setColor(ColorKey.PASSED).build();" ], [ "NORMAL_TEXT", "de.neemann.digital.draw.graphics", "Style", "public static final Style NORMAL_TEXT = new Builder(NORMAL).setMattersForSize(true).build();" ], [ "THIN", "de.neemann.digital.draw.graphics", "Style", "public static final Style THIN = new Builder(NORMAL).setThickness(LINETHIN).build();" ], [ "THIN_FILLED", "de.neemann.digital.draw.graphics", "Style", "public static final Style THIN_FILLED = new Builder(NORMAL).setThickness(LINETHIN).setFilled(true).build();" ], [ "THICK", "de.neemann.digital.draw.graphics", "Style", "public static final Style THICK = new Builder(NORMAL).setThickness(LINETHICK + LINETHIN).build();" ], [ "WIRE", "de.neemann.digital.draw.graphics", "Style", "public static final Style WIRE = new Builder().setThickness(WIRETHICK).setFilled(true).setColor(ColorKey.WIRE).setEndCap(BasicStroke.CAP_ROUND).build();" ], [ "WIRE_LOW", "de.neemann.digital.draw.graphics", "Style", "public static final Style WIRE_LOW = new Builder(WIRE).setColor(ColorKey.WIRE_LOW).build();" ], [ "WIRE_HIGH", "de.neemann.digital.draw.graphics", "Style", "public static final Style WIRE_HIGH = new Builder(WIRE).setColor(ColorKey.WIRE_HIGH).build();" ], [ "WIRE_HIGHZ", "de.neemann.digital.draw.graphics", "Style", "public static final Style WIRE_HIGHZ = new Builder(WIRE).setColor(ColorKey.WIRE_Z).build();" ], [ "WIRE_OUT", "de.neemann.digital.draw.graphics", "Style", "public static final Style WIRE_OUT = new Builder(WIRE).setColor(ColorKey.WIRE_OUT).build();" ], [ "FILLED", "de.neemann.digital.draw.graphics", "Style", "public static final Style FILLED = new Builder().setFilled(true).build();" ], [ "DASH", "de.neemann.digital.draw.graphics", "Style", "public static final Style DASH = new Builder().setThickness(LINEDASH).setDash(new float[] { 4, 4 }).build();" ], [ "SHAPE_PIN", "de.neemann.digital.draw.graphics", "Style", "public static final Style SHAPE_PIN = new Builder().setThickness(LINETHIN).setColor(ColorKey.PINS).setFontSize(18).build();" ], [ "SHAPE_SPLITTER", "de.neemann.digital.draw.graphics", "Style", "public static final Style SHAPE_SPLITTER = new Builder(SHAPE_PIN).setFontSize(12).build();" ], [ "WIRE_VALUE", "de.neemann.digital.draw.graphics", "Style", "public static final Style WIRE_VALUE = new Builder(SHAPE_SPLITTER).setColor(ColorKey.WIRE_VALUE).build();" ], [ "WIRE_BITS", "de.neemann.digital.draw.graphics", "Style", "public static final Style WIRE_BITS = new Builder(SHAPE_SPLITTER).setColor(ColorKey.WIRE).build();" ], [ "HIGHLIGHT", "de.neemann.digital.draw.graphics", "Style", "public static final Style HIGHLIGHT = new Builder(NORMAL).setColor(ColorKey.HIGHLIGHT).setEndCap(BasicStroke.CAP_ROUND).build();" ], [ "ERROR", "de.neemann.digital.draw.graphics", "Style", "public static final Style ERROR = new Builder(NORMAL).setColor(ColorKey.ERROR).setEndCap(BasicStroke.CAP_ROUND).build();" ], [ "BLANK", "de.neemann.digital.draw.graphics.text.text", "Blank", "public static final Blank BLANK = new Blank();" ], [ "LOOK_AT_ALIAS", "de.neemann.digital.toolchain", "Configuration", "static final String LOOK_AT_ALIAS = \"lookAt\";" ], [ "REF_ALIAS", "de.neemann.digital.toolchain", "Configuration", "static final String REF_ALIAS = \"ref\";" ] ],
  "tokensMethodJavadocValues" : [ ],
  "tokensMethodArguments" : [ [ "inputs", "de.neemann.digital.core", "ObservableValues" ] ],
  "tokensMethodVariablesNonPrivateNonStaticNonVoidMethods" : [ [ "toString", "java.lang", "Object", "public String toString()" ], [ "equals", "java.lang", "Object", "public boolean equals(Object arg0)" ], [ "getCycles", "de.neemann.digital.core.wiring", "Break", "public int getCycles()" ], [ "getOutputs", "de.neemann.digital.core.wiring", "Break", "public ObservableValues getOutputs()" ], [ "isEnabled", "de.neemann.digital.core.wiring", "Break", "public boolean isEnabled()" ], [ "clone", "java.lang", "Object", "protected native Object clone() throws CloneNotSupportedException" ], [ "hashCode", "java.lang", "Object", "public native int hashCode()" ], [ "getClass", "java.lang", "Object", "public final native Class<? extends Object> getClass()" ], [ "getBreakInput", "de.neemann.digital.core.wiring", "Break", "public ObservableValue getBreakInput()" ], [ "getLabel", "de.neemann.digital.core.wiring", "Break", "public String getLabel()" ], [ "getNames", "de.neemann.digital.core", "ObservableValues", "public ArrayList<String> getNames()" ], [ "get", "de.neemann.digital.core", "ObservableValues", "public ObservableValue get(String arg0)" ], [ "retainAll", "de.neemann.digital.core.element", "ImmutableList", "public boolean retainAll(Collection<?> arg0)" ], [ "listIterator", "de.neemann.digital.core.element", "ImmutableList", "public ListIterator<T> listIterator(int arg0)" ], [ "add", "de.neemann.digital.core.element", "ImmutableList", "public boolean add(T arg0)" ], [ "subList", "de.neemann.digital.core.element", "ImmutableList", "public List<T> subList(int arg0, int arg1)" ], [ "size", "de.neemann.digital.core.element", "ImmutableList", "public int size()" ], [ "addAll", "de.neemann.digital.core.element", "ImmutableList", "public boolean addAll(Collection<? extends T> arg0)" ], [ "containsAll", "de.neemann.digital.core.element", "ImmutableList", "public boolean containsAll(Collection<?> arg0)" ], [ "indexOf", "de.neemann.digital.core.element", "ImmutableList", "public int indexOf(Object arg0)" ], [ "set", "de.neemann.digital.core.element", "ImmutableList", "public T set(int arg0, T arg1)" ], [ "remove", "de.neemann.digital.core.element", "ImmutableList", "public T remove(int arg0)" ], [ "listIterator", "de.neemann.digital.core.element", "ImmutableList", "public ListIterator<T> listIterator()" ], [ "addAll", "de.neemann.digital.core.element", "ImmutableList", "public boolean addAll(int arg0, Collection<? extends T> arg1)" ], [ "remove", "de.neemann.digital.core.element", "ImmutableList", "public boolean remove(Object arg0)" ], [ "get", "de.neemann.digital.core.element", "ImmutableList", "public T get(int arg0)" ], [ "lastIndexOf", "de.neemann.digital.core.element", "ImmutableList", "public int lastIndexOf(Object arg0)" ], [ "contains", "de.neemann.digital.core.element", "ImmutableList", "public boolean contains(Object arg0)" ], [ "toArray", "de.neemann.digital.core.element", "ImmutableList", "public <T1> T1[] toArray(T1[] arg0)" ], [ "toArray", "de.neemann.digital.core.element", "ImmutableList", "public Object[] toArray()" ], [ "removeAll", "de.neemann.digital.core.element", "ImmutableList", "public boolean removeAll(Collection<?> arg0)" ], [ "iterator", "de.neemann.digital.core.element", "ImmutableList", "public Iterator<T> iterator()" ], [ "isEmpty", "de.neemann.digital.core.element", "ImmutableList", "public boolean isEmpty()" ], [ "removeAll", "java.util", "List", "public abstract boolean removeAll(Collection<? extends Object> arg0)" ], [ "listIterator", "java.util", "List", "public abstract ListIterator<E> listIterator(int arg0)" ], [ "iterator", "java.util", "List", "public abstract Iterator<E> iterator()" ], [ "hashCode", "java.util", "List", "public abstract int hashCode()" ], [ "subList", "java.util", "List", "public abstract List<E> subList(int arg0, int arg1)" ], [ "equals", "java.util", "List", "public abstract boolean equals(Object arg0)" ], [ "spliterator", "java.util", "List", "public default Spliterator<E> spliterator()" ], [ "add", "java.util", "List", "public abstract boolean add(E arg0)" ], [ "listIterator", "java.util", "List", "public abstract ListIterator<E> listIterator()" ], [ "remove", "java.util", "List", "public abstract boolean remove(Object arg0)" ], [ "toArray", "java.util", "List", "public abstract Object[] toArray()" ], [ "remove", "java.util", "List", "public abstract E remove(int arg0)" ], [ "isEmpty", "java.util", "List", "public abstract boolean isEmpty()" ], [ "set", "java.util", "List", "public abstract E set(int arg0, E arg1)" ], [ "addAll", "java.util", "List", "public abstract boolean addAll(int arg0, Collection<? extends E> arg1)" ], [ "lastIndexOf", "java.util", "List", "public abstract int lastIndexOf(Object arg0)" ], [ "contains", "java.util", "List", "public abstract boolean contains(Object arg0)" ], [ "retainAll", "java.util", "List", "public abstract boolean retainAll(Collection<? extends Object> arg0)" ], [ "indexOf", "java.util", "List", "public abstract int indexOf(Object arg0)" ], [ "containsAll", "java.util", "List", "public abstract boolean containsAll(Collection<? extends Object> arg0)" ], [ "toArray", "java.util", "List", "public abstract <T> T[] toArray(T[] arg0)" ], [ "addAll", "java.util", "List", "public abstract boolean addAll(Collection<? extends E> arg0)" ], [ "size", "java.util", "List", "public abstract int size()" ], [ "get", "java.util", "List", "public abstract E get(int arg0)" ], [ "iterator", "java.util", "Collection", "public abstract Iterator<E> iterator()" ], [ "size", "java.util", "Collection", "public abstract int size()" ], [ "addAll", "java.util", "Collection", "public abstract boolean addAll(Collection<? extends E> arg0)" ], [ "hashCode", "java.util", "Collection", "public abstract int hashCode()" ], [ "containsAll", "java.util", "Collection", "public abstract boolean containsAll(Collection<? extends Object> arg0)" ], [ "parallelStream", "java.util", "Collection", "public default Stream<E> parallelStream()" ], [ "equals", "java.util", "Collection", "public abstract boolean equals(Object arg0)" ], [ "add", "java.util", "Collection", "public abstract boolean add(E arg0)" ], [ "toArray", "java.util", "Collection", "public abstract Object[] toArray()" ], [ "contains", "java.util", "Collection", "public abstract boolean contains(Object arg0)" ], [ "removeAll", "java.util", "Collection", "public abstract boolean removeAll(Collection<? extends Object> arg0)" ], [ "removeIf", "java.util", "Collection", "public default boolean removeIf(Predicate<? super E> arg0)" ], [ "retainAll", "java.util", "Collection", "public abstract boolean retainAll(Collection<? extends Object> arg0)" ], [ "spliterator", "java.util", "Collection", "public default Spliterator<E> spliterator()" ], [ "toArray", "java.util", "Collection", "public abstract <T> T[] toArray(T[] arg0)" ], [ "isEmpty", "java.util", "Collection", "public abstract boolean isEmpty()" ], [ "stream", "java.util", "Collection", "public default Stream<E> stream()" ], [ "remove", "java.util", "Collection", "public abstract boolean remove(Object arg0)" ], [ "toArray", "java.util", "Collection", "public default <T> T[] toArray(IntFunction<T[]> arg0)" ], [ "iterator", "java.lang", "Iterable", "public abstract Iterator<T> iterator()" ], [ "spliterator", "java.lang", "Iterable", "public default Spliterator<T> spliterator()" ] ],
  "tokensMethodVariablesNonPrivateNonStaticAttributes" : [ ],
  "tokensOracleVariablesNonPrivateNonStaticNonVoidMethods" : [ ],
  "tokensOracleVariablesNonPrivateNonStaticAttributes" : [ ]
}, {
  "id" : 26709,
  "oracle" : "pinMap != null;",
  "oracleType" : "PRE",
  "projectName" : "Digital",
  "packageName" : "de.neemann.digital.builder.Gal16v8",
  "className" : "BuilderCollectorGAL",
  "javadocTag" : "@param pinMap the used pinMap. Is required to handle aliases correctly",
  "methodJavadoc" : "    /**\n     * Creates a new instance\n     *\n     * @param pinMap the used pinMap. Is required to handle aliases correctly\n     */",
  "methodSourceCode" : "public BuilderCollectorGAL(PinMap pinMap){\n    this.pinMap = pinMap;\n    sequentialVars = new HashSet<>();\n}",
  "classJavadoc" : "/**\n * Used to avoid a double cell allocation if the output of a ff is used as a autput of the state machine.\n * This is the case if a Moore machine is build where the state equals the output.\n * Sometimes this kind of state machines is called a Medwedew machine.\n */",
  "classSourceCode" : "/*\n * Copyright (c) 2019 Helmut Neemann.\n * Use of this source code is governed by the GPL v3 license\n * that can be found in the LICENSE file.\n */\npackage de.neemann.digital.builder.Gal16v8;\n\nimport de.neemann.digital.analyse.expression.Expression;\nimport de.neemann.digital.builder.BuilderCollector;\nimport de.neemann.digital.builder.BuilderException;\nimport de.neemann.digital.builder.PinMap;\n\nimport java.util.ArrayList;\nimport java.util.HashSet;\nimport java.util.Map;\n\n/**\n * Used to avoid a double cell allocation if the output of a ff is used as a autput of the state machine.\n * This is the case if a Moore machine is build where the state equals the output.\n * Sometimes this kind of state machines is called a Medwedew machine.\n */\npublic class BuilderCollectorGAL extends BuilderCollector {\n    private final PinMap pinMap;\n    private HashSet<String> sequentialVars;\n    private boolean doubleCellUsageFixed = false;\n\n    /**\n     * Creates a new instance\n     *\n     * @param pinMap the used pinMap. Is required to handle aliases correctly\n     */\n    public BuilderCollectorGAL(PinMap pinMap) {\n        this.pinMap = pinMap;\n        sequentialVars = new HashSet<>();\n    }\n\n    @Override\n    public BuilderCollector addCombinatorial(String name, Expression expression) throws BuilderException {\n        checkOpen();\n        return super.addCombinatorial(name, expression);\n    }\n\n    @Override\n    public BuilderCollector addSequential(String name, Expression expression) throws BuilderException {\n        checkOpen();\n        sequentialVars.add(name);\n        return super.addSequential(name, expression);\n    }\n\n    private void checkOpen() {\n        if (doubleCellUsageFixed)\n            throw new RuntimeException(\"wrong BuilderCollectorGAL usage!\");\n    }\n\n    private void fixDoubleCellUsage() {\n        if (!doubleCellUsageFixed) {\n\n            super.getCombinatorial().entrySet().removeIf(c -> {\n                if (pinMap.isSimpleAlias(c.getKey(), c.getValue(), sequentialVars)) {\n                    removeOutput(c.getKey());\n                    return true;\n                }\n                return false;\n            });\n\n            doubleCellUsageFixed = true;\n        }\n    }\n\n    @Override\n    public ArrayList<String> getOutputs() {\n        fixDoubleCellUsage();\n        return super.getOutputs();\n    }\n\n    @Override\n    public ArrayList<String> getInputs() {\n        fixDoubleCellUsage();\n        return super.getInputs();\n    }\n\n    @Override\n    public Map<String, Expression> getCombinatorial() {\n        fixDoubleCellUsage();\n        return super.getCombinatorial();\n    }\n\n    @Override\n    public Map<String, Expression> getRegistered() {\n        fixDoubleCellUsage();\n        return super.getRegistered();\n    }\n}\n",
  "tokensGeneralGrammar" : [ "null", "true", "false", ",", ".", ":", ";", "?", "(", ")", "jdVar", "stream", "Arrays", "allMatch", "noneMatch", "anyMatch", "~", ">>", "<<", ">>>", "|", "&", "^", "+", "-", "/", "*", "%", "&&", "||", ">=", "<=", ">", "<", "==", "!=", "instanceof", "class", "methodResultID", "this" ],
  "tokensGeneralValuesGlobalDictionary" : [ [ "0", "int" ], [ "1", "int" ], [ "-1", "int" ], [ "0.0", "double" ], [ "1.0", "double" ], [ "-1.0", "double" ], [ "\"\"", "String" ], [ "\" \"", "String" ] ],
  "tokensProjectClasses" : [ [ "CLI", "de.neemann" ], [ "Mouse", "de.neemann.gui" ], [ "LineBreaker", "de.neemann.gui" ], [ "IconCreator", "de.neemann.gui" ], [ "ConfirmDialogBuilder", "de.neemann.gui" ], [ "Resources", "de.neemann.gui.language" ], [ "Bundle", "de.neemann.gui.language" ], [ "Language", "de.neemann.gui.language" ], [ "ToolTipAction", "de.neemann.gui" ], [ "MyFileChooser", "de.neemann.gui" ], [ "ClosingWindowListener", "de.neemann.gui" ], [ "ErrorMessage", "de.neemann.gui" ], [ "WindowSizeStorage", "de.neemann.gui" ], [ "Screen", "de.neemann.gui" ], [ "ToolTipProvider", "de.neemann.gui" ], [ "InfoDialog", "de.neemann.gui" ], [ "ValueFormatter", "de.neemann.digital.core" ], [ "ModelStateObserver", "de.neemann.digital.core" ], [ "PullDown", "de.neemann.digital.core.pld" ], [ "Diode", "de.neemann.digital.core.pld" ], [ "DiodeBackward", "de.neemann.digital.core.pld" ], [ "PullUp", "de.neemann.digital.core.pld" ], [ "DiodeForward", "de.neemann.digital.core.pld" ], [ "Node", "de.neemann.digital.core" ], [ "RAMSinglePort", "de.neemann.digital.core.memory" ], [ "ROMDualPort", "de.neemann.digital.core.memory" ], [ "RAMDualAccess", "de.neemann.digital.core.memory" ], [ "ByteArrayFromValueArray", "de.neemann.digital.core.memory.importer" ], [ "Importer", "de.neemann.digital.core.memory.importer" ], [ "LogisimReader", "de.neemann.digital.core.memory.importer" ], [ "DataFieldValueArray", "de.neemann.digital.core.memory.importer" ], [ "ByteArrayReader", "de.neemann.digital.core.memory.importer" ], [ "ValueArrayReader", "de.neemann.digital.core.memory.importer" ], [ "IntelHexReader", "de.neemann.digital.core.memory.importer" ], [ "ValueArray", "de.neemann.digital.core.memory.importer" ], [ "BinReader", "de.neemann.digital.core.memory.importer" ], [ "ByteArray", "de.neemann.digital.core.memory.importer" ], [ "MultiValueArray", "de.neemann.digital.core.memory.importer" ], [ "CounterPreset", "de.neemann.digital.core.memory" ], [ "RAMDualPort", "de.neemann.digital.core.memory" ], [ "Register", "de.neemann.digital.core.memory" ], [ "LookUpTable", "de.neemann.digital.core.memory" ], [ "BlockRAMDualPort", "de.neemann.digital.core.memory" ], [ "Counter", "de.neemann.digital.core.memory" ], [ "ROMMangerBase", "de.neemann.digital.core.memory.rom" ], [ "ROMManagerFile", "de.neemann.digital.core.memory.rom" ], [ "ROMManager", "de.neemann.digital.core.memory.rom" ], [ "ROMInterface", "de.neemann.digital.core.memory.rom" ], [ "EEPROM", "de.neemann.digital.core.memory" ], [ "ProgramCounter", "de.neemann.digital.core.memory" ], [ "RAMAsync", "de.neemann.digital.core.memory" ], [ "ROM", "de.neemann.digital.core.memory" ], [ "DataField", "de.neemann.digital.core.memory" ], [ "EEPROMDualPort", "de.neemann.digital.core.memory" ], [ "RAMInterface", "de.neemann.digital.core.memory" ], [ "DataFieldConverter", "de.neemann.digital.core.memory" ], [ "RAMSinglePortSel", "de.neemann.digital.core.memory" ], [ "ProgramMemory", "de.neemann.digital.core.memory" ], [ "RegisterFile", "de.neemann.digital.core.memory" ], [ "ModelStateObserverTyped", "de.neemann.digital.core" ], [ "Observable", "de.neemann.digital.core" ], [ "NodeWithoutDelay", "de.neemann.digital.core" ], [ "ExceptionWithOrigin", "de.neemann.digital.core" ], [ "ObservableValue", "de.neemann.digital.core" ], [ "SpeedTest", "de.neemann.digital.core" ], [ "BurnException", "de.neemann.digital.core" ], [ "GlobalValues", "de.neemann.digital.core" ], [ "MIDI", "de.neemann.digital.core.io" ], [ "RGBLED", "de.neemann.digital.core.io" ], [ "Out", "de.neemann.digital.core.io" ], [ "RotEncoder", "de.neemann.digital.core.io" ], [ "PinControl", "de.neemann.digital.core.io" ], [ "DipSwitch", "de.neemann.digital.core.io" ], [ "CommonConnectionType", "de.neemann.digital.core.io" ], [ "LightBulb", "de.neemann.digital.core.io" ], [ "Probe", "de.neemann.digital.core.io" ], [ "Button", "de.neemann.digital.core.io" ], [ "ButtonLED", "de.neemann.digital.core.io" ], [ "In", "de.neemann.digital.core.io" ], [ "StepperMotorUnipolar", "de.neemann.digital.core.io" ], [ "ProbeMode", "de.neemann.digital.core.io" ], [ "NotConnected", "de.neemann.digital.core.io" ], [ "MIDIHelper", "de.neemann.digital.core.io" ], [ "StepperMotorBipolar", "de.neemann.digital.core.io" ], [ "Const", "de.neemann.digital.core.io" ], [ "PowerSupply", "de.neemann.digital.core.io" ], [ "Ground", "de.neemann.digital.core.io" ], [ "InValue", "de.neemann.digital.core.io" ], [ "VDD", "de.neemann.digital.core.io" ], [ "ServerHolder", "de.neemann.digital.core.io.telnet" ], [ "Telnet", "de.neemann.digital.core.io.telnet" ], [ "ByteBuffer", "de.neemann.digital.core.io.telnet" ], [ "Server", "de.neemann.digital.core.io.telnet" ], [ "ElementAttributes", "de.neemann.digital.core.element" ], [ "Element", "de.neemann.digital.core.element" ], [ "ElementFactory", "de.neemann.digital.core.element" ], [ "PinInfo", "de.neemann.digital.core.element" ], [ "PinDescriptions", "de.neemann.digital.core.element" ], [ "PinDescription", "de.neemann.digital.core.element" ], [ "Keys", "de.neemann.digital.core.element" ], [ "Rotation", "de.neemann.digital.core.element" ], [ "AttributeListener", "de.neemann.digital.core.element" ], [ "Key", "de.neemann.digital.core.element" ], [ "ImmutableList", "de.neemann.digital.core.element" ], [ "ElementTypeDescription", "de.neemann.digital.core.element" ], [ "FanIn", "de.neemann.digital.core.basic" ], [ "NOr", "de.neemann.digital.core.basic" ], [ "And", "de.neemann.digital.core.basic" ], [ "XNOr", "de.neemann.digital.core.basic" ], [ "XOr", "de.neemann.digital.core.basic" ], [ "Not", "de.neemann.digital.core.basic" ], [ "NAnd", "de.neemann.digital.core.basic" ], [ "Function", "de.neemann.digital.core.basic" ], [ "Or", "de.neemann.digital.core.basic" ], [ "ExceptionWithOriginInterface", "de.neemann.digital.core" ], [ "ModelEvent", "de.neemann.digital.core" ], [ "BacktrackException", "de.neemann.digital.core" ], [ "PlainSwitch", "de.neemann.digital.core.switching" ], [ "FGPFET", "de.neemann.digital.core.switching" ], [ "NFET", "de.neemann.digital.core.switching" ], [ "FGNFET", "de.neemann.digital.core.switching" ], [ "PFET", "de.neemann.digital.core.switching" ], [ "PlainSwitchDT", "de.neemann.digital.core.switching" ], [ "TransGate", "de.neemann.digital.core.switching" ], [ "SwitchDT", "de.neemann.digital.core.switching" ], [ "Relay", "de.neemann.digital.core.switching" ], [ "RelayDT", "de.neemann.digital.core.switching" ], [ "Switch", "de.neemann.digital.core.switching" ], [ "Fuse", "de.neemann.digital.core.switching" ], [ "Reset", "de.neemann.digital.core.wiring" ], [ "Stop", "de.neemann.digital.core.wiring" ], [ "Decoder", "de.neemann.digital.core.wiring" ], [ "Delay", "de.neemann.digital.core.wiring" ], [ "Driver", "de.neemann.digital.core.wiring" ], [ "DataBus", "de.neemann.digital.core.wiring.bus" ], [ "SingleBusHandler", "de.neemann.digital.core.wiring.bus" ], [ "ConnectedBusHandler", "de.neemann.digital.core.wiring.bus" ], [ "AbstractBusHandler", "de.neemann.digital.core.wiring.bus" ], [ "BusModelStateObserver", "de.neemann.digital.core.wiring.bus" ], [ "CommonBusValue", "de.neemann.digital.core.wiring.bus" ], [ "DriverInvSel", "de.neemann.digital.core.wiring" ], [ "PriorityEncoder", "de.neemann.digital.core.wiring" ], [ "BusSplitter", "de.neemann.digital.core.wiring" ], [ "Splitter", "de.neemann.digital.core.wiring" ], [ "Multiplexer", "de.neemann.digital.core.wiring" ], [ "BitSelector", "de.neemann.digital.core.wiring" ], [ "Break", "de.neemann.digital.core.wiring" ], [ "Clock", "de.neemann.digital.core.wiring" ], [ "AsyncSeq", "de.neemann.digital.core.wiring" ], [ "Demultiplexer", "de.neemann.digital.core.wiring" ], [ "BitsException", "de.neemann.digital.core" ], [ "NodeInterface", "de.neemann.digital.core" ], [ "NodeException", "de.neemann.digital.core" ], [ "FlipflopDAsync", "de.neemann.digital.core.flipflops" ], [ "FlipflopD", "de.neemann.digital.core.flipflops" ], [ "FlipflopRSAsync", "de.neemann.digital.core.flipflops" ], [ "FlipflopT", "de.neemann.digital.core.flipflops" ], [ "FlipflopJKAsync", "de.neemann.digital.core.flipflops" ], [ "FlipflopJK", "de.neemann.digital.core.flipflops" ], [ "Monoflop", "de.neemann.digital.core.flipflops" ], [ "FlipflopRS", "de.neemann.digital.core.flipflops" ], [ "FlipflopBit", "de.neemann.digital.core.flipflops" ], [ "BarrelShifter", "de.neemann.digital.core.arithmetic" ], [ "Mul", "de.neemann.digital.core.arithmetic" ], [ "Neg", "de.neemann.digital.core.arithmetic" ], [ "BitExtender", "de.neemann.digital.core.arithmetic" ], [ "Add", "de.neemann.digital.core.arithmetic" ], [ "Div", "de.neemann.digital.core.arithmetic" ], [ "LeftRightFormat", "de.neemann.digital.core.arithmetic" ], [ "PRNG", "de.neemann.digital.core.arithmetic" ], [ "Sub", "de.neemann.digital.core.arithmetic" ], [ "BarrelShifterMode", "de.neemann.digital.core.arithmetic" ], [ "Comparator", "de.neemann.digital.core.arithmetic" ], [ "BitCount", "de.neemann.digital.core.arithmetic" ], [ "ObservableValues", "de.neemann.digital.core" ], [ "Value", "de.neemann.digital.core" ], [ "IntFormat", "de.neemann.digital.core" ], [ "SyncAccess", "de.neemann.digital.core" ], [ "Bits", "de.neemann.digital.core" ], [ "ProcessInterface", "de.neemann.digital.core.extern.handler" ], [ "StdIOInterface", "de.neemann.digital.core.extern.handler" ], [ "ApplicationVerilogStdIO", "de.neemann.digital.core.extern" ], [ "Application", "de.neemann.digital.core.extern" ], [ "External", "de.neemann.digital.core.extern" ], [ "Port", "de.neemann.digital.core.extern" ], [ "PortDefinition", "de.neemann.digital.core.extern" ], [ "ApplicationGHDL", "de.neemann.digital.core.extern" ], [ "ApplicationIVerilog", "de.neemann.digital.core.extern" ], [ "ApplicationVHDLStdIO", "de.neemann.digital.core.extern" ], [ "VHDLTokenizer", "de.neemann.digital.core.extern" ], [ "ApplicationGeneric", "de.neemann.digital.core.extern" ], [ "Options", "de.neemann.digital.core.extern" ], [ "VerilogTokenizer", "de.neemann.digital.core.extern" ], [ "ExternalFile", "de.neemann.digital.core.extern" ], [ "ProcessStarter", "de.neemann.digital.core.extern" ], [ "ModelEventType", "de.neemann.digital.core" ], [ "Observer", "de.neemann.digital.core" ], [ "ErrorDetector", "de.neemann.digital.core" ], [ "Statistics", "de.neemann.digital.core.stats" ], [ "Countable", "de.neemann.digital.core.stats" ], [ "Model", "de.neemann.digital.core" ], [ "Signal", "de.neemann.digital.core" ], [ "StringList", "de.neemann.digital" ], [ "XStreamValid", "de.neemann.digital" ], [ "StatsExport", "de.neemann.digital.cli" ], [ "SVGExport", "de.neemann.digital.cli" ], [ "CommandLineTester", "de.neemann.digital.cli" ], [ "CSVWriter", "de.neemann.digital.cli" ], [ "BasicCommand", "de.neemann.digital.cli.cli" ], [ "Argument", "de.neemann.digital.cli.cli" ], [ "CLIException", "de.neemann.digital.cli.cli" ], [ "Muxer", "de.neemann.digital.cli.cli" ], [ "ArgumentKey", "de.neemann.digital.cli.cli" ], [ "NamedCommand", "de.neemann.digital.cli.cli" ], [ "CLICommand", "de.neemann.digital.cli.cli" ], [ "ArgumentBase", "de.neemann.digital.cli.cli" ], [ "CircuitLoader", "de.neemann.digital.cli" ], [ "Main", "de.neemann.digital.cli" ], [ "Modification", "de.neemann.digital.undo" ], [ "Modifications", "de.neemann.digital.undo" ], [ "ModifyException", "de.neemann.digital.undo" ], [ "Copyable", "de.neemann.digital.undo" ], [ "UndoManager", "de.neemann.digital.undo" ], [ "ChangedListener", "de.neemann.digital.undo" ], [ "CircuitRepresentation", "de.neemann.digital.fsm" ], [ "Transition", "de.neemann.digital.fsm" ], [ "Movable", "de.neemann.digital.fsm" ], [ "MouseMovable", "de.neemann.digital.fsm" ], [ "Optimizer", "de.neemann.digital.fsm" ], [ "Permute", "de.neemann.digital.fsm" ], [ "FiniteStateMachineException", "de.neemann.digital.fsm" ], [ "TransitionTableCreator", "de.neemann.digital.fsm" ], [ "ValueParser", "de.neemann.digital.fsm" ], [ "WaitGroup", "de.neemann.digital.fsm" ], [ "FSMComponent", "de.neemann.digital.fsm.gui" ], [ "FSMFrame", "de.neemann.digital.fsm.gui" ], [ "OptimizerDialog", "de.neemann.digital.fsm.gui" ], [ "FSMDemos", "de.neemann.digital.fsm" ], [ "FSM", "de.neemann.digital.fsm" ], [ "State", "de.neemann.digital.fsm" ], [ "Lang", "de.neemann.digital.lang" ], [ "LineListenerResolveDontCare", "de.neemann.digital.testing" ], [ "TestingDataException", "de.neemann.digital.testing" ], [ "UnitTester", "de.neemann.digital.testing" ], [ "FolderTestRunner", "de.neemann.digital.testing" ], [ "TestExecutor", "de.neemann.digital.testing" ], [ "Transitions", "de.neemann.digital.testing" ], [ "TestCaseDescription", "de.neemann.digital.testing" ], [ "TestCaseElement", "de.neemann.digital.testing" ], [ "LineEmitterRepeat", "de.neemann.digital.testing.parser" ], [ "Parser", "de.neemann.digital.testing.parser" ], [ "ValueAppenderBits", "de.neemann.digital.testing.parser" ], [ "ParserException", "de.neemann.digital.testing.parser" ], [ "Context", "de.neemann.digital.testing.parser" ], [ "ModelInitializer", "de.neemann.digital.testing.parser" ], [ "Expression", "de.neemann.digital.testing.parser" ], [ "LineEmitterList", "de.neemann.digital.testing.parser" ], [ "TestRow", "de.neemann.digital.testing.parser" ], [ "LineEmitter", "de.neemann.digital.testing.parser" ], [ "LineEmitterWhile", "de.neemann.digital.testing.parser" ], [ "Tokenizer", "de.neemann.digital.testing.parser" ], [ "LineEmitterSimple", "de.neemann.digital.testing.parser" ], [ "Random", "de.neemann.digital.testing.parser.functions" ], [ "SignExtend", "de.neemann.digital.testing.parser.functions" ], [ "IfThenElse", "de.neemann.digital.testing.parser.functions" ], [ "Function", "de.neemann.digital.testing.parser.functions" ], [ "LineListener", "de.neemann.digital.testing.parser" ], [ "VirtualSignal", "de.neemann.digital.testing.parser" ], [ "ValueAppender", "de.neemann.digital.testing.parser" ], [ "OperatorPrecedence", "de.neemann.digital.testing.parser" ], [ "TestResultListener", "de.neemann.digital.testing" ], [ "MatchedValue", "de.neemann.digital.testing" ], [ "TestResult", "de.neemann.digital.testing" ], [ "MinimizerInterface", "de.neemann.digital.analyse" ], [ "LabelNumbering", "de.neemann.digital.analyse" ], [ "ModelAnalyser", "de.neemann.digital.analyse" ], [ "CSVImporter", "de.neemann.digital.analyse" ], [ "BoolTableExpanded", "de.neemann.digital.analyse" ], [ "TruthTableTableModel", "de.neemann.digital.analyse" ], [ "TableReducer", "de.neemann.digital.analyse.quinemc" ], [ "PrimeSelector", "de.neemann.digital.analyse.quinemc.primeselector" ], [ "BruteForce", "de.neemann.digital.analyse.quinemc.primeselector" ], [ "LargestFirst", "de.neemann.digital.analyse.quinemc.primeselector" ], [ "BruteForceGetAll", "de.neemann.digital.analyse.quinemc.primeselector" ], [ "PrimeSelectorDefault", "de.neemann.digital.analyse.quinemc.primeselector" ], [ "BoolTableByteArray", "de.neemann.digital.analyse.quinemc" ], [ "IndependentChecker", "de.neemann.digital.analyse.quinemc" ], [ "QuineMcCluskey", "de.neemann.digital.analyse.quinemc" ], [ "BoolTableExpression", "de.neemann.digital.analyse.quinemc" ], [ "BoolTableBoolArray", "de.neemann.digital.analyse.quinemc" ], [ "BoolTable", "de.neemann.digital.analyse.quinemc" ], [ "TableRows", "de.neemann.digital.analyse.quinemc" ], [ "ThreeStateValue", "de.neemann.digital.analyse.quinemc" ], [ "QuineMcCluskeyExam", "de.neemann.digital.analyse.quinemc" ], [ "TableRow", "de.neemann.digital.analyse.quinemc" ], [ "TruthTableConverter", "de.neemann.digital.analyse" ], [ "DetermineJKStateMachine", "de.neemann.digital.analyse" ], [ "Parser", "de.neemann.digital.analyse.parser" ], [ "ParseException", "de.neemann.digital.analyse.parser" ], [ "Tokenizer", "de.neemann.digital.analyse.parser" ], [ "ModelAnalyserInfo", "de.neemann.digital.analyse" ], [ "AnalyseException", "de.neemann.digital.analyse" ], [ "DependencyAnalyser", "de.neemann.digital.analyse" ], [ "SubstituteLibrary", "de.neemann.digital.analyse" ], [ "TruthTableFormatterHex", "de.neemann.digital.analyse.format" ], [ "TruthTableFormatter", "de.neemann.digital.analyse.format" ], [ "TruthTableFormatterTestCase", "de.neemann.digital.analyse.format" ], [ "TruthTableFormatterCSV", "de.neemann.digital.analyse.format" ], [ "TruthTableFormatterLaTeX", "de.neemann.digital.analyse.format" ], [ "MinimizerQuineMcCluskey", "de.neemann.digital.analyse" ], [ "ContextFiller", "de.neemann.digital.analyse.expression" ], [ "BitSetter", "de.neemann.digital.analyse.expression" ], [ "ExpressionVisitor", "de.neemann.digital.analyse.expression" ], [ "ContextMap", "de.neemann.digital.analyse.expression" ], [ "ComplexityVisitor", "de.neemann.digital.analyse.expression" ], [ "Operation", "de.neemann.digital.analyse.expression" ], [ "Context", "de.neemann.digital.analyse.expression" ], [ "NInputs", "de.neemann.digital.analyse.expression.modify" ], [ "NOr", "de.neemann.digital.analyse.expression.modify" ], [ "ExpressionModifier", "de.neemann.digital.analyse.expression.modify" ], [ "NAnd", "de.neemann.digital.analyse.expression.modify" ], [ "Constant", "de.neemann.digital.analyse.expression" ], [ "Expression", "de.neemann.digital.analyse.expression" ], [ "Variable", "de.neemann.digital.analyse.expression" ], [ "ExpressionException", "de.neemann.digital.analyse.expression" ], [ "ComplexityInclNotVisitor", "de.neemann.digital.analyse.expression" ], [ "Equals", "de.neemann.digital.analyse.expression" ], [ "FormatToExpression", "de.neemann.digital.analyse.expression.format" ], [ "FormatToTable", "de.neemann.digital.analyse.expression.format" ], [ "Formatter", "de.neemann.digital.analyse.expression.format" ], [ "FormatterException", "de.neemann.digital.analyse.expression.format" ], [ "FormatToTableLatex", "de.neemann.digital.analyse.expression.format" ], [ "Not", "de.neemann.digital.analyse.expression" ], [ "VariableVisitor", "de.neemann.digital.analyse.expression" ], [ "NamedExpression", "de.neemann.digital.analyse.expression" ], [ "MinimizerQuineMcCluskeyExam", "de.neemann.digital.analyse" ], [ "TruthTable", "de.neemann.digital.analyse" ], [ "SplitPinString", "de.neemann.digital.analyse" ], [ "CycleDetector", "de.neemann.digital.analyse" ], [ "DigitalRemoteInterface", "de.neemann.digital.gui" ], [ "TextSearchFilter", "de.neemann.digital.gui" ], [ "ExportZipAction", "de.neemann.digital.gui" ], [ "SettingsBase", "de.neemann.digital.gui" ], [ "DocumentationLocator", "de.neemann.digital.gui" ], [ "InitialTutorial", "de.neemann.digital.gui.tutorial" ], [ "InsertAction", "de.neemann.digital.gui" ], [ "StatusInterface", "de.neemann.digital.gui" ], [ "SearchTextField", "de.neemann.digital.gui" ], [ "SaveAsHelper", "de.neemann.digital.gui" ], [ "FileHistory", "de.neemann.digital.gui" ], [ "ReleaseInfo", "de.neemann.digital.gui.release" ], [ "CheckForNewRelease", "de.neemann.digital.gui.release" ], [ "StateInterface", "de.neemann.digital.gui.state" ], [ "StateManager", "de.neemann.digital.gui.state" ], [ "State", "de.neemann.digital.gui.state" ], [ "CircuitScrollPanel", "de.neemann.digital.gui.components" ], [ "ItemPicker", "de.neemann.digital.gui.components" ], [ "LibraryTreeModel", "de.neemann.digital.gui.components.tree" ], [ "SelectTree", "de.neemann.digital.gui.components.tree" ], [ "WindowPosManager", "de.neemann.digital.gui.components" ], [ "CustomShapeEditor", "de.neemann.digital.gui.components" ], [ "TransformHolder", "de.neemann.digital.gui.components" ], [ "EditorPanel", "de.neemann.digital.gui.components" ], [ "BehavioralFixtureCreator", "de.neemann.digital.gui.components" ], [ "EditorFactory", "de.neemann.digital.gui.components" ], [ "OrderMerger", "de.neemann.digital.gui.components" ], [ "ElementOrderer", "de.neemann.digital.gui.components" ], [ "ModifyMoveSelected", "de.neemann.digital.gui.components.modification" ], [ "ModifyMoveWire", "de.neemann.digital.gui.components.modification" ], [ "ModificationOfWire", "de.neemann.digital.gui.components.modification" ], [ "ModifyDeleteRect", "de.neemann.digital.gui.components.modification" ], [ "ModifyInsertWires", "de.neemann.digital.gui.components.modification" ], [ "ModifyInsertWire", "de.neemann.digital.gui.components.modification" ], [ "ModificationOfVisualElement", "de.neemann.digital.gui.components.modification" ], [ "ModifyCircuitAttributes", "de.neemann.digital.gui.components.modification" ], [ "ModifyDeleteWire", "de.neemann.digital.gui.components.modification" ], [ "ModifyMoveAndRotElement", "de.neemann.digital.gui.components.modification" ], [ "ModifyMeasurementOrdering", "de.neemann.digital.gui.components.modification" ], [ "ModifyDeleteElement", "de.neemann.digital.gui.components.modification" ], [ "ModifyAttribute", "de.neemann.digital.gui.components.modification" ], [ "ModifyAttributes", "de.neemann.digital.gui.components.modification" ], [ "ModifyInsertElement", "de.neemann.digital.gui.components.modification" ], [ "DataEditor", "de.neemann.digital.gui.components" ], [ "CircuitModifierPostClosed", "de.neemann.digital.gui.components" ], [ "CharDeleter", "de.neemann.digital.gui.components.terminal" ], [ "ConsoleTerminal", "de.neemann.digital.gui.components.terminal" ], [ "Terminal", "de.neemann.digital.gui.components.terminal" ], [ "TerminalDialog", "de.neemann.digital.gui.components.terminal" ], [ "TerminalInterface", "de.neemann.digital.gui.components.terminal" ], [ "Keyboard", "de.neemann.digital.gui.components.terminal" ], [ "KeyboardDialog", "de.neemann.digital.gui.components.terminal" ], [ "Editor", "de.neemann.digital.gui.components" ], [ "VarRectList", "de.neemann.digital.gui.components.karnaugh" ], [ "KarnaughMap", "de.neemann.digital.gui.components.karnaugh" ], [ "KarnaughMapComponent", "de.neemann.digital.gui.components.karnaugh" ], [ "KarnaughMapDialog", "de.neemann.digital.gui.components.karnaugh" ], [ "MapLayout", "de.neemann.digital.gui.components.karnaugh" ], [ "KarnaughException", "de.neemann.digital.gui.components.karnaugh" ], [ "CircuitTransferable", "de.neemann.digital.gui.components" ], [ "ElementHelpDialog", "de.neemann.digital.gui.components" ], [ "TestCaseDescriptionDialog", "de.neemann.digital.gui.components.testing" ], [ "ValueTableDialog", "de.neemann.digital.gui.components.testing" ], [ "TestCaseDescriptionEditor", "de.neemann.digital.gui.components.testing" ], [ "TestAllDialog", "de.neemann.digital.gui.components.testing" ], [ "ExpressionListenerOptimizeJK", "de.neemann.digital.gui.components.table" ], [ "LaTeXExpressionListener", "de.neemann.digital.gui.components.table" ], [ "HardwareDescriptionGenerator", "de.neemann.digital.gui.components.table.hardware" ], [ "GenerateFile", "de.neemann.digital.gui.components.table.hardware" ], [ "GenerateCUPL", "de.neemann.digital.gui.components.table.hardware" ], [ "ExpressionListener", "de.neemann.digital.gui.components.table" ], [ "ReorderOutputs", "de.neemann.digital.gui.components.table" ], [ "AllSolutionsDialog", "de.neemann.digital.gui.components.table" ], [ "ExpressionListenerJK", "de.neemann.digital.gui.components.table" ], [ "ExpressionListenerCSVCondensed", "de.neemann.digital.gui.components.table" ], [ "ExpressionCreator", "de.neemann.digital.gui.components.table" ], [ "TableDialog", "de.neemann.digital.gui.components.table" ], [ "BuilderExpressionCreator", "de.neemann.digital.gui.components.table" ], [ "ExpressionComponent", "de.neemann.digital.gui.components.table" ], [ "PlainTextExpressionListener", "de.neemann.digital.gui.components.table" ], [ "TableReorderManager", "de.neemann.digital.gui.components.table" ], [ "ShowStringDialog", "de.neemann.digital.gui.components.table" ], [ "ReorderInputs", "de.neemann.digital.gui.components.table" ], [ "ProgressDialog", "de.neemann.digital.gui.components.table" ], [ "CheckResultListener", "de.neemann.digital.gui.components.table" ], [ "ExpressionListenerStore", "de.neemann.digital.gui.components.table" ], [ "AttributeDialog", "de.neemann.digital.gui.components" ], [ "ProbeDialog", "de.neemann.digital.gui.components" ], [ "ColorSchemeEditor", "de.neemann.digital.gui.components" ], [ "ROMEditorDialog", "de.neemann.digital.gui.components" ], [ "LabelGenerator", "de.neemann.digital.gui.components" ], [ "SingleValueDialog", "de.neemann.digital.gui.components" ], [ "ExpressionDialog", "de.neemann.digital.gui.components.expression" ], [ "CircuitComponent", "de.neemann.digital.gui.components" ], [ "VGA", "de.neemann.digital.gui.components.graphics" ], [ "GraphicCard", "de.neemann.digital.gui.components.graphics" ], [ "LedMatrix", "de.neemann.digital.gui.components.graphics" ], [ "VGADialog", "de.neemann.digital.gui.components.graphics" ], [ "MoveFocusTo", "de.neemann.digital.gui.components.graphics" ], [ "LedMatrixComponent", "de.neemann.digital.gui.components.graphics" ], [ "GraphicDialog", "de.neemann.digital.gui.components.graphics" ], [ "GraphicComponent", "de.neemann.digital.gui.components.graphics" ], [ "LedMatrixDialog", "de.neemann.digital.gui.components.graphics" ], [ "ConstraintsBuilder", "de.neemann.digital.gui.components" ], [ "ScopeTrigger", "de.neemann.digital.gui.components.data" ], [ "GraphDialog", "de.neemann.digital.gui.components.data" ], [ "GraphComponent", "de.neemann.digital.gui.components.data" ], [ "DummyElement", "de.neemann.digital.gui.components.data" ], [ "ValueTableObserver", "de.neemann.digital.gui.components.data" ], [ "CircuitModifier", "de.neemann.digital.gui.components" ], [ "CopiedElementLabelRenamer", "de.neemann.digital.gui.components" ], [ "TextLineNumber", "de.neemann.digital.gui.components" ], [ "InsertHistory", "de.neemann.digital.gui" ], [ "ProgramMemoryLoader", "de.neemann.digital.gui" ], [ "Main", "de.neemann.digital.gui" ], [ "StatsDialog", "de.neemann.digital.gui" ], [ "WindowManager", "de.neemann.digital.gui" ], [ "Settings", "de.neemann.digital.gui" ], [ "LibrarySelector", "de.neemann.digital.gui" ], [ "DigitalUncaughtExceptionHandler", "de.neemann.digital.gui" ], [ "NumberingWizard", "de.neemann.digital.gui" ], [ "HandlerInterface", "de.neemann.digital.gui.remote" ], [ "RemoteSever", "de.neemann.digital.gui.remote" ], [ "RemoteException", "de.neemann.digital.gui.remote" ], [ "DigitalHandler", "de.neemann.digital.gui.remote" ], [ "ModelModifier", "de.neemann.digital.gui" ], [ "VerilogCreator", "de.neemann.digital.hdl.verilog2" ], [ "VerilogRenaming", "de.neemann.digital.hdl.verilog2" ], [ "VerilogGenerator", "de.neemann.digital.hdl.verilog2" ], [ "VerilogTestBenchCreator", "de.neemann.digital.hdl.verilog2" ], [ "VerilogElement", "de.neemann.digital.hdl.verilog2.lib" ], [ "VerilogTemplate", "de.neemann.digital.hdl.verilog2.lib" ], [ "VerilogLibrary", "de.neemann.digital.hdl.verilog2" ], [ "CodePrinter", "de.neemann.digital.hdl.printer" ], [ "CodePrinterStr", "de.neemann.digital.hdl.printer" ], [ "Statements", "de.neemann.digital.hdl.hgs" ], [ "Parser", "de.neemann.digital.hdl.hgs" ], [ "ParserException", "de.neemann.digital.hdl.hgs" ], [ "Statement", "de.neemann.digital.hdl.hgs" ], [ "Context", "de.neemann.digital.hdl.hgs" ], [ "FirstClassFunctionCall", "de.neemann.digital.hdl.hgs.function" ], [ "InnerFunction", "de.neemann.digital.hdl.hgs.function" ], [ "JavaClass", "de.neemann.digital.hdl.hgs.function" ], [ "FirstClassFunction", "de.neemann.digital.hdl.hgs.function" ], [ "Func", "de.neemann.digital.hdl.hgs.function" ], [ "Function", "de.neemann.digital.hdl.hgs.function" ], [ "Expression", "de.neemann.digital.hdl.hgs" ], [ "HGSEvalException", "de.neemann.digital.hdl.hgs" ], [ "Tokenizer", "de.neemann.digital.hdl.hgs" ], [ "ReferenceToFunc", "de.neemann.digital.hdl.hgs.refs" ], [ "ReferenceToStruct", "de.neemann.digital.hdl.hgs.refs" ], [ "ReferenceToArray", "de.neemann.digital.hdl.hgs.refs" ], [ "Reference", "de.neemann.digital.hdl.hgs.refs" ], [ "ReferenceToVar", "de.neemann.digital.hdl.hgs.refs" ], [ "Value", "de.neemann.digital.hdl.hgs" ], [ "HGSMap", "de.neemann.digital.hdl.hgs" ], [ "HGSArray", "de.neemann.digital.hdl.hgs" ], [ "Separator", "de.neemann.digital.hdl.vhdl2" ], [ "VHDLLibrary", "de.neemann.digital.hdl.vhdl2" ], [ "VHDLCreator", "de.neemann.digital.hdl.vhdl2" ], [ "VHDLRenaming", "de.neemann.digital.hdl.vhdl2" ], [ "VHDLGenerator", "de.neemann.digital.hdl.vhdl2" ], [ "VHDLEntity", "de.neemann.digital.hdl.vhdl2.entities" ], [ "VHDLTemplate", "de.neemann.digital.hdl.vhdl2.entities" ], [ "VHDLTemplateFunctions", "de.neemann.digital.hdl.vhdl2.entities" ], [ "VHDLTestBenchCreator", "de.neemann.digital.hdl.vhdl2" ], [ "HDLModel", "de.neemann.digital.hdl.model2" ], [ "HDLNode", "de.neemann.digital.hdl.model2" ], [ "HDLNet", "de.neemann.digital.hdl.model2" ], [ "Printable", "de.neemann.digital.hdl.model2" ], [ "HDLException", "de.neemann.digital.hdl.model2" ], [ "HDLPort", "de.neemann.digital.hdl.model2" ], [ "HasName", "de.neemann.digital.hdl.model2" ], [ "InlineManyToOne", "de.neemann.digital.hdl.model2.optimizations" ], [ "MergeAssignments", "de.neemann.digital.hdl.model2.optimizations" ], [ "Optimization", "de.neemann.digital.hdl.model2.optimizations" ], [ "MergeConstants", "de.neemann.digital.hdl.model2.optimizations" ], [ "ReplaceOneToMany", "de.neemann.digital.hdl.model2.optimizations" ], [ "NameConstantSignals", "de.neemann.digital.hdl.model2.optimizations" ], [ "OptimizeExpressions", "de.neemann.digital.hdl.model2.optimizations" ], [ "RemoveConstantSignals", "de.neemann.digital.hdl.model2.optimizations" ], [ "NodeSorterExpressionBased", "de.neemann.digital.hdl.model2.optimizations" ], [ "HDLNodeSplitterManyToOne", "de.neemann.digital.hdl.model2" ], [ "HDLNodeCustom", "de.neemann.digital.hdl.model2" ], [ "HDLNodeAssignment", "de.neemann.digital.hdl.model2" ], [ "HDLCircuit", "de.neemann.digital.hdl.model2" ], [ "ExprVar", "de.neemann.digital.hdl.model2.expression" ], [ "Visitor", "de.neemann.digital.hdl.model2.expression" ], [ "ExprVarRange", "de.neemann.digital.hdl.model2.expression" ], [ "Expression", "de.neemann.digital.hdl.model2.expression" ], [ "ExpressionOptimizer", "de.neemann.digital.hdl.model2.expression" ], [ "ExprNot", "de.neemann.digital.hdl.model2.expression" ], [ "ExprConstant", "de.neemann.digital.hdl.model2.expression" ], [ "ExprOperate", "de.neemann.digital.hdl.model2.expression" ], [ "ExprUsingNet", "de.neemann.digital.hdl.model2.expression" ], [ "HDLNodeBuildIn", "de.neemann.digital.hdl.model2" ], [ "HDLClockIntegrator", "de.neemann.digital.hdl.model2.clock" ], [ "ClockIntegratorGeneric", "de.neemann.digital.hdl.model2.clock" ], [ "ClockInfo", "de.neemann.digital.hdl.model2.clock" ], [ "HDLNodeSplitterOneToMany", "de.neemann.digital.hdl.model2" ], [ "FileLocator", "de.neemann.digital" ], [ "ValueTable", "de.neemann.digital.data" ], [ "ValueTableModel", "de.neemann.digital.data" ], [ "DataPlotter", "de.neemann.digital.data" ], [ "Value", "de.neemann.digital.data" ], [ "ExpressionExporter", "de.neemann.digital.builder" ], [ "ExpressionToFileExporter", "de.neemann.digital.builder" ], [ "RotationByteArrayOutputStream", "de.neemann.digital.builder.tt2" ], [ "TT2Exporter", "de.neemann.digital.builder.tt2" ], [ "StartATF150xFitter", "de.neemann.digital.builder.tt2" ], [ "OSExecute", "de.neemann.digital.builder.tt2" ], [ "CreateCHN", "de.neemann.digital.builder.ATF150x" ], [ "ATFDevice", "de.neemann.digital.builder.ATF150x" ], [ "ATFDialog", "de.neemann.digital.builder.ATF150x" ], [ "PL", "de.neemann.digital.builder.ATF150x" ], [ "ATF150xCuplExporter", "de.neemann.digital.builder.ATF150x" ], [ "PinMap", "de.neemann.digital.builder" ], [ "PinMapException", "de.neemann.digital.builder" ], [ "FragmentExpression", "de.neemann.digital.builder.circuit" ], [ "FragmentVisualElement", "de.neemann.digital.builder.circuit" ], [ "FragmentSameInValue", "de.neemann.digital.builder.circuit" ], [ "CircuitBuilder", "de.neemann.digital.builder.circuit" ], [ "FragmentVisitor", "de.neemann.digital.builder.circuit" ], [ "FragmentVariable", "de.neemann.digital.builder.circuit" ], [ "Fragment", "de.neemann.digital.builder.circuit" ], [ "Box", "de.neemann.digital.builder.circuit" ], [ "Gal16v8JEDECExporter", "de.neemann.digital.builder.Gal16v8" ], [ "CuplExporter", "de.neemann.digital.builder.Gal16v8" ], [ "BuilderCollectorGAL", "de.neemann.digital.builder.Gal16v8" ], [ "CleanNameBuilder", "de.neemann.digital.builder" ], [ "BuilderCollector", "de.neemann.digital.builder" ], [ "BuilderInterface", "de.neemann.digital.builder" ], [ "BuilderException", "de.neemann.digital.builder" ], [ "Gal22v10JEDECExporter", "de.neemann.digital.builder.Gal22v10" ], [ "Gal22v10CuplExporter", "de.neemann.digital.builder.Gal22v10" ], [ "FuseMap", "de.neemann.digital.builder.jedec" ], [ "FuseMapFillerException", "de.neemann.digital.builder.jedec" ], [ "FuseMapFiller", "de.neemann.digital.builder.jedec" ], [ "JedecWriter", "de.neemann.digital.builder.jedec" ], [ "GenericCode", "de.neemann.digital.draw.library" ], [ "ElementLibrary", "de.neemann.digital.draw.library" ], [ "GenericInitCode", "de.neemann.digital.draw.library" ], [ "Visitor", "de.neemann.digital.draw.library" ], [ "ComponentManager", "de.neemann.digital.draw.library" ], [ "LibraryListener", "de.neemann.digital.draw.library" ], [ "JarComponentManager", "de.neemann.digital.draw.library" ], [ "ElementLibraryFolder", "de.neemann.digital.draw.library" ], [ "CustomElement", "de.neemann.digital.draw.library" ], [ "ElementNotFoundNotification", "de.neemann.digital.draw.library" ], [ "ElementNotFoundException", "de.neemann.digital.draw.library" ], [ "ComponentSource", "de.neemann.digital.draw.library" ], [ "LibraryInterface", "de.neemann.digital.draw.library" ], [ "ResolveGenerics", "de.neemann.digital.draw.library" ], [ "LibraryNode", "de.neemann.digital.draw.library" ], [ "ElementTypeDescriptionCustom", "de.neemann.digital.draw.library" ], [ "InvalidNodeException", "de.neemann.digital.draw.library" ], [ "NumStringComparator", "de.neemann.digital.draw.library" ], [ "InputShape", "de.neemann.digital.draw.shapes" ], [ "Interactor", "de.neemann.digital.draw.shapes" ], [ "ButtonShape", "de.neemann.digital.draw.shapes" ], [ "GenericShape", "de.neemann.digital.draw.shapes" ], [ "Drawable", "de.neemann.digital.draw.shapes" ], [ "DelayShape", "de.neemann.digital.draw.shapes" ], [ "DiodeBackwardShape", "de.neemann.digital.draw.shapes" ], [ "FuseShape", "de.neemann.digital.draw.shapes" ], [ "FETShapeP", "de.neemann.digital.draw.shapes" ], [ "DILShape", "de.neemann.digital.draw.shapes" ], [ "DipSwitchShape", "de.neemann.digital.draw.shapes" ], [ "SwitchShape", "de.neemann.digital.draw.shapes" ], [ "LightBulbShape", "de.neemann.digital.draw.shapes" ], [ "LayoutShape", "de.neemann.digital.draw.shapes" ], [ "SplitterShape", "de.neemann.digital.draw.shapes" ], [ "PolarityAwareLEDShape", "de.neemann.digital.draw.shapes" ], [ "ButtonLEDShape", "de.neemann.digital.draw.shapes" ], [ "RelayShape", "de.neemann.digital.draw.shapes" ], [ "ConstShape", "de.neemann.digital.draw.shapes" ], [ "BreakShape", "de.neemann.digital.draw.shapes" ], [ "GenericCodeShape", "de.neemann.digital.draw.shapes" ], [ "TextShape", "de.neemann.digital.draw.shapes" ], [ "SevenSegHexShape", "de.neemann.digital.draw.shapes" ], [ "ProbeShape", "de.neemann.digital.draw.shapes" ], [ "NotConnectedShape", "de.neemann.digital.draw.shapes" ], [ "StepperMotorShape", "de.neemann.digital.draw.shapes" ], [ "FETShape", "de.neemann.digital.draw.shapes" ], [ "BitSelShape", "de.neemann.digital.draw.shapes" ], [ "SevenSegShape", "de.neemann.digital.draw.shapes" ], [ "GenericInitCodeShape", "de.neemann.digital.draw.shapes" ], [ "RelayDTShape", "de.neemann.digital.draw.shapes" ], [ "RectShape", "de.neemann.digital.draw.shapes" ], [ "VDDShape", "de.neemann.digital.draw.shapes" ], [ "RAMShape", "de.neemann.digital.draw.shapes" ], [ "ScopeShape", "de.neemann.digital.draw.shapes" ], [ "DemuxerShape", "de.neemann.digital.draw.shapes" ], [ "FETShapeN", "de.neemann.digital.draw.shapes" ], [ "BusSplitterShape", "de.neemann.digital.draw.shapes" ], [ "PullUpShape", "de.neemann.digital.draw.shapes" ], [ "TestCaseShape", "de.neemann.digital.draw.shapes" ], [ "TunnelShape", "de.neemann.digital.draw.shapes" ], [ "MuxerShape", "de.neemann.digital.draw.shapes" ], [ "SwitchDTShape", "de.neemann.digital.draw.shapes" ], [ "PinControlShape", "de.neemann.digital.draw.shapes" ], [ "FGFETShapeN", "de.neemann.digital.draw.shapes" ], [ "TransGateShape", "de.neemann.digital.draw.shapes" ], [ "DiodeShape", "de.neemann.digital.draw.shapes" ], [ "ResetShape", "de.neemann.digital.draw.shapes" ], [ "DiodeForewardShape", "de.neemann.digital.draw.shapes" ], [ "SixteenShape", "de.neemann.digital.draw.shapes" ], [ "CustomCircuitShapeType", "de.neemann.digital.draw.shapes" ], [ "InteractorInterface", "de.neemann.digital.draw.shapes" ], [ "ShapeSpecificMatch", "de.neemann.digital.draw.shapes" ], [ "LEDShape", "de.neemann.digital.draw.shapes" ], [ "ClockShape", "de.neemann.digital.draw.shapes" ], [ "RGBLEDShape", "de.neemann.digital.draw.shapes" ], [ "RotEncoderShape", "de.neemann.digital.draw.shapes" ], [ "IEEEGenericShape", "de.neemann.digital.draw.shapes.ieee" ], [ "IEEEOrShape", "de.neemann.digital.draw.shapes.ieee" ], [ "IEEENotShape", "de.neemann.digital.draw.shapes.ieee" ], [ "IEEEAndShape", "de.neemann.digital.draw.shapes.ieee" ], [ "IEEEXOrShape", "de.neemann.digital.draw.shapes.ieee" ], [ "ObservableValueReader", "de.neemann.digital.draw.shapes" ], [ "SvgTemplate", "de.neemann.digital.draw.shapes.custom.svg" ], [ "TransformParser", "de.neemann.digital.draw.shapes.custom.svg" ], [ "Context", "de.neemann.digital.draw.shapes.custom.svg" ], [ "SvgException", "de.neemann.digital.draw.shapes.custom.svg" ], [ "SvgImporter", "de.neemann.digital.draw.shapes.custom.svg" ], [ "CustomShapeDescription", "de.neemann.digital.draw.shapes.custom" ], [ "CustomShape", "de.neemann.digital.draw.shapes.custom" ], [ "FGFETShapeP", "de.neemann.digital.draw.shapes" ], [ "OutputShape", "de.neemann.digital.draw.shapes" ], [ "GroundShape", "de.neemann.digital.draw.shapes" ], [ "AsyncClockShape", "de.neemann.digital.draw.shapes" ], [ "Shape", "de.neemann.digital.draw.shapes" ], [ "MissingShape", "de.neemann.digital.draw.shapes" ], [ "ShapeFactory", "de.neemann.digital.draw.shapes" ], [ "PullDownShape", "de.neemann.digital.draw.shapes" ], [ "DriverShape", "de.neemann.digital.draw.shapes" ], [ "SevenShape", "de.neemann.digital.draw.shapes" ], [ "DataShape", "de.neemann.digital.draw.shapes" ], [ "DotCreator", "de.neemann.digital.draw.elements" ], [ "Wire", "de.neemann.digital.draw.elements" ], [ "Movable", "de.neemann.digital.draw.elements" ], [ "Pins", "de.neemann.digital.draw.elements" ], [ "Circuit", "de.neemann.digital.draw.elements" ], [ "Tunnel", "de.neemann.digital.draw.elements" ], [ "PinException", "de.neemann.digital.draw.elements" ], [ "ElementOrder", "de.neemann.digital.draw.elements" ], [ "VisualElement", "de.neemann.digital.draw.elements" ], [ "Pin", "de.neemann.digital.draw.elements" ], [ "IOState", "de.neemann.digital.draw.elements" ], [ "WireMerger", "de.neemann.digital.draw.elements" ], [ "WireConsistencyChecker", "de.neemann.digital.draw.elements" ], [ "AsyncSequentialClock", "de.neemann.digital.draw.model" ], [ "ModelEntry", "de.neemann.digital.draw.model" ], [ "Net", "de.neemann.digital.draw.model" ], [ "ModelCreator", "de.neemann.digital.draw.model" ], [ "InverterConfig", "de.neemann.digital.draw.model" ], [ "NetList", "de.neemann.digital.draw.model" ], [ "RealTimeClock", "de.neemann.digital.draw.model" ], [ "Polygon", "de.neemann.digital.draw.graphics" ], [ "Orientation", "de.neemann.digital.draw.graphics" ], [ "Vector", "de.neemann.digital.draw.graphics" ], [ "SVGSettings", "de.neemann.digital.draw.graphics" ], [ "Transform", "de.neemann.digital.draw.graphics" ], [ "ColorKey", "de.neemann.digital.draw.graphics" ], [ "ExportFactory", "de.neemann.digital.draw.graphics" ], [ "GraphicsImage", "de.neemann.digital.draw.graphics" ], [ "VectorInterface", "de.neemann.digital.draw.graphics" ], [ "TextFormatSVG", "de.neemann.digital.draw.graphics" ], [ "TransformMatrix", "de.neemann.digital.draw.graphics" ], [ "TextFormatLaTeX", "de.neemann.digital.draw.graphics" ], [ "GraphicMinMax", "de.neemann.digital.draw.graphics" ], [ "GraphicTransform", "de.neemann.digital.draw.graphics" ], [ "ColorScheme", "de.neemann.digital.draw.graphics" ], [ "Style", "de.neemann.digital.draw.graphics" ], [ "GraphicSkipLines", "de.neemann.digital.draw.graphics.linemerger" ], [ "GraphicLineCollector", "de.neemann.digital.draw.graphics.linemerger" ], [ "PolygonConverter", "de.neemann.digital.draw.graphics" ], [ "VectorFloat", "de.neemann.digital.draw.graphics" ], [ "TransformRotate", "de.neemann.digital.draw.graphics" ], [ "Graphic", "de.neemann.digital.draw.graphics" ], [ "ColorStyleHighContrast", "de.neemann.digital.draw.graphics" ], [ "Parser", "de.neemann.digital.draw.graphics.text" ], [ "ParseException", "de.neemann.digital.draw.graphics.text" ], [ "PlainTextFormatter", "de.neemann.digital.draw.graphics.text.formatter" ], [ "SVGFormatter", "de.neemann.digital.draw.graphics.text.formatter" ], [ "GraphicsFormatter", "de.neemann.digital.draw.graphics.text.formatter" ], [ "LaTeXFormatter", "de.neemann.digital.draw.graphics.text.formatter" ], [ "Decorate", "de.neemann.digital.draw.graphics.text.text" ], [ "Text", "de.neemann.digital.draw.graphics.text.text" ], [ "Index", "de.neemann.digital.draw.graphics.text.text" ], [ "Sentence", "de.neemann.digital.draw.graphics.text.text" ], [ "Blank", "de.neemann.digital.draw.graphics.text.text" ], [ "Character", "de.neemann.digital.draw.graphics.text.text" ], [ "ExpressionToText", "de.neemann.digital.draw.graphics.text.text" ], [ "Simple", "de.neemann.digital.draw.graphics.text.text" ], [ "Export", "de.neemann.digital.draw.graphics" ], [ "ColorStyleMonochrome", "de.neemann.digital.draw.graphics" ], [ "TransformTranslate", "de.neemann.digital.draw.graphics" ], [ "GraphicSVG", "de.neemann.digital.draw.graphics" ], [ "GraphicSwing", "de.neemann.digital.draw.graphics" ], [ "PolygonParser", "de.neemann.digital.draw.graphics" ], [ "SVGTokenizer", "de.neemann.digital.draw.graphics" ], [ "GifSequenceWriter", "de.neemann.digital.draw.gif" ], [ "GifExporter", "de.neemann.digital.draw.gif" ], [ "ConfigCache", "de.neemann.digital.toolchain" ], [ "Configuration", "de.neemann.digital.toolchain" ], [ "Command", "de.neemann.digital.toolchain" ], [ "FileToCreate", "de.neemann.digital.toolchain" ] ],
  "tokensProjectClassesNonPrivateStaticNonVoidMethods" : [ [ "getMouse", "de.neemann.gui", "Mouse", "static Mouse getMouse()" ], [ "create", "de.neemann.gui", "IconCreator", "public static Icon create(String name)" ], [ "createImage", "de.neemann.gui", "IconCreator", "public static Image createImage(String name)" ], [ "createImages", "de.neemann.gui", "IconCreator", "public static ArrayList<Image> createImages(String... names)" ], [ "getCTRLMask", "de.neemann.gui", "ToolTipAction", "public static int getCTRLMask()" ], [ "checkForSave", "de.neemann.gui", "ClosingWindowListener", "public static boolean checkForSave(JFrame parent, ConfirmSave confirmSave)" ], [ "getParentWindow", "de.neemann.gui", "ErrorMessage", "public static Window getParentWindow(Component parent)" ], [ "getInstance", "de.neemann.gui", "Screen", "public static Screen getInstance()" ], [ "getDefaultFontScaling", "de.neemann.gui", "Screen", "public static int getDefaultFontScaling()" ], [ "isLinux", "de.neemann.gui", "Screen", "public static boolean isLinux()" ], [ "isMac", "de.neemann.gui", "Screen", "public static boolean isMac()" ], [ "getInstance", "de.neemann.gui", "InfoDialog", "public static InfoDialog getInstance()" ], [ "read", "de.neemann.digital.core.memory.importer", "Importer", "public static DataField read(File hexFile, int dataBits, boolean bigEndian) throws IOException" ], [ "getOriginOf", "de.neemann.digital.core", "ExceptionWithOrigin", "public static String getOriginOf(Throwable e)" ], [ "zMaskString", "de.neemann.digital.core", "ObservableValue", "static String zMaskString(long value, long highZ, int bits)" ], [ "getInstance", "de.neemann.digital.core", "GlobalValues", "public static GlobalValues getInstance()" ], [ "getInstance", "de.neemann.digital.core.io", "MIDIHelper", "public static MIDIHelper getInstance()" ], [ "input", "de.neemann.digital.core.element", "PinInfo", "public static PinInfo input(String name)" ], [ "input", "de.neemann.digital.core.element", "PinInfo", "public static PinInfo input(String name, String description)" ], [ "output", "de.neemann.digital.core.element", "PinInfo", "public static PinInfo output(String name)" ], [ "isInOut", "de.neemann.digital.core.element", "PinDescription", "public static boolean isInOut(Direction a, Direction b)" ], [ "isInOut", "de.neemann.digital.core.element", "Direction", "public static boolean isInOut(Direction a, Direction b)" ], [ "getKeyByName", "de.neemann.digital.core.element", "Keys", "public static Key getKeyByName(String name)" ], [ "getKeys", "de.neemann.digital.core.element", "Keys", "public static Iterable<Key> getKeys()" ], [ "combine", "de.neemann.digital.core.element", "ImmutableList", "public static <T> ImmutableList<T> combine(ImmutableList<T> a, ImmutableList<T> b)" ], [ "createSwitchModel", "de.neemann.digital.core.switching", "PlainSwitch", "static SwitchModel createSwitchModel(ObservableValue input1, ObservableValue input2, ObservableValue output1, ObservableValue output2) throws NodeException" ], [ "createOneToN", "de.neemann.digital.core.wiring", "Splitter", "public static Splitter createOneToN(int bits)" ], [ "createNToOne", "de.neemann.digital.core.wiring", "Splitter", "public static Splitter createNToOne(int bits)" ], [ "ovs", "de.neemann.digital.core", "ObservableValues", "public static ObservableValues ovs(ObservableValue... items)" ], [ "toShortHex", "de.neemann.digital.core", "IntFormat", "public static String toShortHex(long value)" ], [ "up", "de.neemann.digital.core", "Bits", "public static long up(long val, int bits)" ], [ "down", "de.neemann.digital.core", "Bits", "public static long down(long val, int bits)" ], [ "mask", "de.neemann.digital.core", "Bits", "public static long mask(int bits)" ], [ "signedFlagMask", "de.neemann.digital.core", "Bits", "public static long signedFlagMask(int bits)" ], [ "isNegative", "de.neemann.digital.core", "Bits", "public static boolean isNegative(long value, int bits)" ], [ "signExtend", "de.neemann.digital.core", "Bits", "public static long signExtend(long value, int bits)" ], [ "binLn2", "de.neemann.digital.core", "Bits", "public static int binLn2(long b)" ], [ "removeBitFromValue", "de.neemann.digital.core", "Bits", "public static int removeBitFromValue(int value, int bit)" ], [ "decode", "de.neemann.digital.core", "Bits", "public static long decode(String str) throws NumberFormatException" ], [ "decode", "de.neemann.digital.core", "Bits", "public static long decode(String str, boolean parseFloats) throws NumberFormatException" ], [ "decode", "de.neemann.digital.core", "Bits", "public static long decode(String str, int p, int radix) throws NumberFormatException" ], [ "getCode", "de.neemann.digital.core.extern", "Application", "static String getCode(ElementAttributes attr, File root) throws IOException" ], [ "readCode", "de.neemann.digital.core.extern", "Application", "static String readCode(File file) throws IOException" ], [ "create", "de.neemann.digital.core.extern", "Application", "static Application create(Type type, ElementAttributes attr)" ], [ "start", "de.neemann.digital.core.extern", "ProcessStarter", "public static String start(File dir, String... args) throws IOException" ], [ "joinStrings", "de.neemann.digital.core.extern", "ProcessStarter", "public static String joinStrings(String... strings)" ], [ "fromString", "de.neemann.digital.cli.cli", "Argument", "public static Object fromString(String val, Object defValue) throws CLIException" ], [ "fac", "de.neemann.digital.fsm", "Optimizer", "public static long fac(int n)" ], [ "getTimeComplexity", "de.neemann.digital.fsm", "Optimizer", "public static long getTimeComplexity(FSM fsm)" ], [ "calcComplexity", "de.neemann.digital.fsm", "Optimizer", "static int calcComplexity(FSM fsm, boolean out) throws ExpressionException, FiniteStateMachineException, FormatterException" ], [ "blink", "de.neemann.digital.fsm", "FSMDemos", "public static FSM blink()" ], [ "rotDecoder", "de.neemann.digital.fsm", "FSMDemos", "public static FSM rotDecoder()" ], [ "counter", "de.neemann.digital.fsm", "FSMDemos", "public static FSM counter(int n)" ], [ "trafficLight", "de.neemann.digital.fsm", "FSMDemos", "public static FSM trafficLight()" ], [ "trafficLightMedwedew", "de.neemann.digital.fsm", "FSMDemos", "public static FSM trafficLightMedwedew()" ], [ "selCounter", "de.neemann.digital.fsm", "FSMDemos", "public static FSM selCounter()" ], [ "stepper", "de.neemann.digital.fsm", "FSMDemos", "public static FSM stepper()" ], [ "stepperMedwedew", "de.neemann.digital.fsm", "FSMDemos", "public static FSM stepperMedwedew()" ], [ "getxStream", "de.neemann.digital.fsm", "FSM", "public static XStream getxStream()" ], [ "loadFSM", "de.neemann.digital.fsm", "FSM", "public static FSM loadFSM(File filename) throws IOException" ], [ "loadFSM", "de.neemann.digital.fsm", "FSM", "public static FSM loadFSM(InputStream in) throws IOException" ], [ "get", "de.neemann.digital.lang", "Lang", "public static String get(String key, Object... params)" ], [ "getNull", "de.neemann.digital.lang", "Lang", "public static String getNull(String key, Object... params)" ], [ "getBundle", "de.neemann.digital.lang", "Lang", "public static Bundle getBundle()" ], [ "currentLanguage", "de.neemann.digital.lang", "Lang", "public static Language currentLanguage()" ], [ "evalMultilingualContent", "de.neemann.digital.lang", "Lang", "public static String evalMultilingualContent(String text)" ], [ "evalMultilingualContent", "de.neemann.digital.lang", "Lang", "static String evalMultilingualContent(String text, Language currentLanguage)" ], [ "lowest", "de.neemann.digital.testing.parser", "OperatorPrecedence", "public static OperatorPrecedence lowest()" ], [ "addOne", "de.neemann.digital.analyse", "ModelAnalyser", "public static String addOne(String name)" ], [ "readCSV", "de.neemann.digital.analyse", "CSVImporter", "public static TruthTable readCSV(File file) throws IOException" ], [ "readCSV", "de.neemann.digital.analyse", "CSVImporter", "public static TruthTable readCSV(String csv) throws IOException" ], [ "readCSV", "de.neemann.digital.analyse", "CSVImporter", "public static TruthTable readCSV(Reader csv) throws IOException" ], [ "createDoubledValues", "de.neemann.digital.analyse.quinemc", "BoolTableByteArray", "public static BoolTableByteArray createDoubledValues(BoolTable values)" ], [ "simplify", "de.neemann.digital.analyse.quinemc", "QuineMcCluskey", "public static Expression simplify(Expression expression) throws ExpressionException" ], [ "addAnd", "de.neemann.digital.analyse.quinemc", "QuineMcCluskey", "public static Expression addAnd(Expression e, Iterable<TableRow> rows, List<Variable> variables)" ], [ "value", "de.neemann.digital.analyse.quinemc", "ThreeStateValue", "public static ThreeStateValue value(boolean bool)" ], [ "value", "de.neemann.digital.analyse.quinemc", "ThreeStateValue", "public static ThreeStateValue value(int value)" ], [ "doImplicitTypeCasts", "de.neemann.digital.analyse", "SubstituteLibrary", "static Object doImplicitTypeCasts(Class<?> expectedClass, Object val)" ], [ "or", "de.neemann.digital.analyse.expression", "Operation", "public static Expression or(Iterable<Expression> exp)" ], [ "or", "de.neemann.digital.analyse.expression", "Operation", "public static Expression or(Expression... exp)" ], [ "xor", "de.neemann.digital.analyse.expression", "Operation", "public static Expression xor(Expression a, Expression b)" ], [ "orNoMerge", "de.neemann.digital.analyse.expression", "Operation", "public static Expression orNoMerge(Expression... exp)" ], [ "and", "de.neemann.digital.analyse.expression", "Operation", "public static Expression and(Iterable<Expression> exp)" ], [ "and", "de.neemann.digital.analyse.expression", "Operation", "public static Expression and(Expression... exp)" ], [ "andNoMerge", "de.neemann.digital.analyse.expression", "Operation", "public static Expression andNoMerge(Expression... exp)" ], [ "modifyExpression", "de.neemann.digital.analyse.expression.modify", "ExpressionModifier", "static Expression modifyExpression(Expression expression, ExpressionModifier modifier)" ], [ "modifyExpression", "de.neemann.digital.analyse.expression.modify", "ExpressionModifier", "static Expression modifyExpression(Expression expression, ExpressionModifier... modifiers)" ], [ "v", "de.neemann.digital.analyse.expression", "Variable", "public static Variable v(String name)" ], [ "vars", "de.neemann.digital.analyse.expression", "Variable", "public static ArrayList<Variable> vars(int n)" ], [ "vars", "de.neemann.digital.analyse.expression", "Variable", "public static ArrayList<Variable> vars(String... names)" ], [ "isVar", "de.neemann.digital.analyse.expression", "Variable", "public static boolean isVar(Expression e)" ], [ "isVarOrNotVar", "de.neemann.digital.analyse.expression", "Variable", "public static boolean isVarOrNotVar(Expression e)" ], [ "getDefaultFormat", "de.neemann.digital.analyse.expression.format", "FormatToExpression", "public static FormatToExpression getDefaultFormat()" ], [ "defaultFormat", "de.neemann.digital.analyse.expression.format", "FormatToExpression", "public static String defaultFormat(Expression exp)" ], [ "not", "de.neemann.digital.analyse.expression", "Not", "public static Expression not(Expression a)" ], [ "readFromFile", "de.neemann.digital.analyse", "TruthTable", "public static TruthTable readFromFile(File filename) throws IOException" ], [ "create", "de.neemann.digital.analyse", "SplitPinString", "public static SplitPinString create(Signal s)" ], [ "create", "de.neemann.digital.analyse", "SplitPinString", "public static SplitPinString create(String pinStr)" ], [ "checkSuffix", "de.neemann.digital.gui", "SaveAsHelper", "public static File checkSuffix(File filename, String suffix)" ], [ "addF1Traversal", "de.neemann.digital.gui.components", "EditorFactory", "public static <TC extends JTextComponent> TC addF1Traversal(TC text)" ], [ "createUndoManager", "de.neemann.digital.gui.components", "EditorFactory", "public static UndoManager createUndoManager(JTextComponent text)" ], [ "create", "de.neemann.digital.gui.components.modification", "ModifyInsertWires", "public static Modification<Circuit> create(List<Wire> newWires)" ], [ "getToolTipName", "de.neemann.digital.gui.components.modification", "ModificationOfVisualElement", "public static String getToolTipName(VisualElement ve)" ], [ "getTerminal", "de.neemann.digital.gui.components.terminal", "TerminalDialog", "static TerminalInterface getTerminal(Model model, ElementAttributes attr)" ], [ "createList", "de.neemann.digital.gui.components", "CircuitTransferable", "public static ArrayList<Movable> createList(Object data, ShapeFactory shapeFactory) throws IOException" ], [ "createURLStreamHandlerFactory", "de.neemann.digital.gui.components", "ElementHelpDialog", "public static URLStreamHandlerFactory createURLStreamHandlerFactory()" ], [ "getImage", "de.neemann.digital.gui.components", "ElementHelpDialog", "static BufferedImage getImage(String name)" ], [ "getImage", "de.neemann.digital.gui.components", "MyURLStreamHandlerFactory", "static BufferedImage getImage(String name)" ], [ "isSequentialVar", "de.neemann.digital.gui.components.table", "ExpressionListenerJK", "public static String isSequentialVar(String name)" ], [ "getAttrList", "de.neemann.digital.gui.components", "CircuitComponent", "public static ArrayList<Key> getAttrList()" ], [ "raster", "de.neemann.digital.gui.components", "CircuitComponent", "public static Vector raster(Vector pos)" ], [ "createLiveDialog", "de.neemann.digital.gui.components.data", "GraphDialog", "public static GraphDialog createLiveDialog(JFrame owner, Model model, boolean microStep, List<String> ordering, int sampleSize)" ], [ "createColumnsInfo", "de.neemann.digital.gui.components.data", "GraphDialog", "static ValueTable.ColumnInfo[] createColumnsInfo(ArrayList<Signal> signals)" ], [ "create", "de.neemann.digital.gui.components", "CopiedElementLabelRenamer", "static LabelInstance create(VisualElement ve)" ], [ "create", "de.neemann.digital.gui.components", "CopiedElementLabelRenamer", "static LabelInstance create(String elementName, String fullLabel)" ], [ "create", "de.neemann.digital.gui.components", "LabelInstance", "static LabelInstance create(VisualElement ve)" ], [ "create", "de.neemann.digital.gui.components", "LabelInstance", "static LabelInstance create(String elementName, String fullLabel)" ], [ "isExperimentalMode", "de.neemann.digital.gui", "Main", "public static boolean isExperimentalMode()" ], [ "getInstance", "de.neemann.digital.gui", "WindowManager", "public static WindowManager getInstance()" ], [ "getInstance", "de.neemann.digital.gui", "Settings", "public static Settings getInstance()" ], [ "getRange", "de.neemann.digital.hdl.verilog2", "VerilogCreator", "public static String getRange(int bits)" ], [ "getType", "de.neemann.digital.hdl.verilog2", "VerilogCreator", "public static String getType(HDLPort.Direction def, HDLPort.Direction dir, int bits)" ], [ "value", "de.neemann.digital.hdl.verilog2", "VerilogCreator", "public static String value(ExprConstant con)" ], [ "value", "de.neemann.digital.hdl.verilog2", "VerilogCreator", "public static String value(long val, int bits)" ], [ "neededFileName", "de.neemann.digital.hdl.verilog2.lib", "VerilogTemplate", "public static String neededFileName(String elementName)" ], [ "createFromJar", "de.neemann.digital.hdl.hgs", "Parser", "public static Statement createFromJar(String path, ClassLoader cl) throws IOException, ParserException" ], [ "createFromJarStatic", "de.neemann.digital.hdl.hgs", "Parser", "public static Statement createFromJarStatic(String path)" ], [ "isWhiteSpace", "de.neemann.digital.hdl.hgs", "Tokenizer", "public static boolean isWhiteSpace(int c)" ], [ "toLong", "de.neemann.digital.hdl.hgs", "Value", "public static long toLong(Object value) throws HGSEvalException" ], [ "toDouble", "de.neemann.digital.hdl.hgs", "Value", "public static double toDouble(Object value) throws HGSEvalException" ], [ "toInt", "de.neemann.digital.hdl.hgs", "Value", "public static int toInt(Object value) throws HGSEvalException" ], [ "toBool", "de.neemann.digital.hdl.hgs", "Value", "public static boolean toBool(Object value) throws HGSEvalException" ], [ "toString", "de.neemann.digital.hdl.hgs", "Value", "public static String toString(Object value) throws HGSEvalException" ], [ "toArray", "de.neemann.digital.hdl.hgs", "Value", "public static HGSArray toArray(Object value) throws HGSEvalException" ], [ "toMap", "de.neemann.digital.hdl.hgs", "Value", "public static HGSMap toMap(Object value) throws HGSEvalException" ], [ "equals", "de.neemann.digital.hdl.hgs", "Value", "public static boolean equals(Object a, Object b)" ], [ "add", "de.neemann.digital.hdl.hgs", "Value", "public static Object add(Object a, Object b) throws HGSEvalException" ], [ "sub", "de.neemann.digital.hdl.hgs", "Value", "public static Object sub(Object a, Object b) throws HGSEvalException" ], [ "mul", "de.neemann.digital.hdl.hgs", "Value", "public static Object mul(Object a, Object b) throws HGSEvalException" ], [ "div", "de.neemann.digital.hdl.hgs", "Value", "public static Object div(Object a, Object b) throws HGSEvalException" ], [ "or", "de.neemann.digital.hdl.hgs", "Value", "public static Object or(Object a, Object b) throws HGSEvalException" ], [ "xor", "de.neemann.digital.hdl.hgs", "Value", "public static Object xor(Object a, Object b) throws HGSEvalException" ], [ "and", "de.neemann.digital.hdl.hgs", "Value", "public static Object and(Object a, Object b) throws HGSEvalException" ], [ "not", "de.neemann.digital.hdl.hgs", "Value", "public static Object not(Object value) throws HGSEvalException" ], [ "neg", "de.neemann.digital.hdl.hgs", "Value", "public static Object neg(Object value) throws HGSEvalException" ], [ "less", "de.neemann.digital.hdl.hgs", "Value", "public static boolean less(Object a, Object b) throws HGSEvalException" ], [ "lessEqual", "de.neemann.digital.hdl.hgs", "Value", "public static boolean lessEqual(Object a, Object b) throws HGSEvalException" ], [ "trimRight", "de.neemann.digital.hdl.hgs", "Value", "public static String trimRight(String str)" ], [ "trimLeft", "de.neemann.digital.hdl.hgs", "Value", "public static String trimLeft(String str)" ], [ "getType", "de.neemann.digital.hdl.vhdl2", "VHDLCreator", "public static String getType(int bits)" ], [ "value", "de.neemann.digital.hdl.vhdl2", "VHDLCreator", "public static String value(ExprConstant con)" ], [ "value", "de.neemann.digital.hdl.vhdl2", "VHDLCreator", "public static String value(long val, int bits)" ], [ "isTemplate", "de.neemann.digital.hdl.vhdl2.entities", "VHDLTemplate", "public static boolean isTemplate(ElementTypeDescription etd)" ], [ "neededFileName", "de.neemann.digital.hdl.vhdl2.entities", "VHDLTemplate", "public static String neededFileName(String elementName)" ], [ "zero", "de.neemann.digital.hdl.vhdl2.entities", "VHDLTemplateFunctions", "public static String zero(long bits)" ], [ "value", "de.neemann.digital.hdl.vhdl2.entities", "VHDLTemplateFunctions", "public static String value(long val, long bits)" ], [ "genericType", "de.neemann.digital.hdl.vhdl2.entities", "VHDLTemplateFunctions", "public static String genericType(long n)" ], [ "type", "de.neemann.digital.hdl.vhdl2.entities", "VHDLTemplateFunctions", "public static String type(long n)" ], [ "isVar", "de.neemann.digital.hdl.model2.expression", "Expression", "static boolean isVar(Expression expr, HDLNet net)" ], [ "isConstant", "de.neemann.digital.hdl.model2.expression", "ExprConstant", "public static ExprConstant isConstant(HDLNode node)" ], [ "getHighZ", "de.neemann.digital.data", "Value", "public static Value getHighZ()" ], [ "calcBackOffset", "de.neemann.digital.builder.circuit", "FragmentExpression", "static int calcBackOffset(int size, int i)" ], [ "isXNor", "de.neemann.digital.builder.circuit", "CircuitBuilder", "static boolean isXNor(long[] data)" ], [ "isXor", "de.neemann.digital.builder.circuit", "CircuitBuilder", "static boolean isXor(long[] data)" ], [ "getLibPath", "de.neemann.digital.draw.library", "ElementLibrary", "public static File getLibPath()" ], [ "createCustomDescription", "de.neemann.digital.draw.library", "ElementLibrary", "public static ElementTypeDescriptionCustom createCustomDescription(File file, Circuit circuit, ElementLibrary library) throws PinException" ], [ "createDeclarationDefault", "de.neemann.digital.draw.library", "ElementTypeDescriptionCustom", "public static String createDeclarationDefault(Circuit circuit) throws NodeException" ], [ "getInstance", "de.neemann.digital.draw.library", "NumStringComparator", "public static NumStringComparator getInstance()" ], [ "compareStr", "de.neemann.digital.draw.library", "NumStringComparator", "public static int compareStr(String a, String b)" ], [ "createPins", "de.neemann.digital.draw.shapes", "GenericShape", "public static Pins createPins(PinDescriptions inputs, PinDescriptions outputs, boolean invert, InverterConfig ic, boolean wideShape)" ], [ "readStyle", "de.neemann.digital.draw.shapes.custom.svg", "Context", "static Context readStyle(Context context, String style) throws SvgException" ], [ "getOutSize", "de.neemann.digital.draw.shapes", "OutputShape", "public static int getOutSize(boolean small)" ], [ "getOutStyle", "de.neemann.digital.draw.shapes", "OutputShape", "public static Style getOutStyle(boolean small)" ], [ "getOutRad", "de.neemann.digital.draw.shapes", "OutputShape", "public static Vector getOutRad(boolean small)" ], [ "createTransform", "de.neemann.digital.draw.shapes", "SevenShape", "static Transform createTransform(int size)" ], [ "getxStream", "de.neemann.digital.draw.elements", "Circuit", "public static XStream getxStream()" ], [ "loadCircuit", "de.neemann.digital.draw.elements", "Circuit", "public static Circuit loadCircuit(File filename, ShapeFactory shapeFactory) throws IOException" ], [ "loadCircuit", "de.neemann.digital.draw.elements", "Circuit", "public static Circuit loadCircuit(InputStream in, ShapeFactory shapeFactory) throws IOException" ], [ "fixGenerics", "de.neemann.digital.draw.model", "ModelCreator", "public static Circuit fixGenerics(Circuit circuit, LibraryInterface library) throws NodeException, ElementNotFoundException" ], [ "createFromPath", "de.neemann.digital.draw.graphics", "Polygon", "public static Polygon createFromPath(String path)" ], [ "vec", "de.neemann.digital.draw.graphics", "Vector", "public static Vector vec(int x, int y)" ], [ "min", "de.neemann.digital.draw.graphics", "Vector", "public static Vector min(VectorInterface... p)" ], [ "max", "de.neemann.digital.draw.graphics", "Vector", "public static Vector max(VectorInterface... p)" ], [ "width", "de.neemann.digital.draw.graphics", "Vector", "public static Vector width(VectorInterface... p)" ], [ "add", "de.neemann.digital.draw.graphics", "Vector", "public static List<Vector> add(List<Vector> vectors, Vector offs)" ], [ "getInstance", "de.neemann.digital.draw.graphics", "SVGSettings", "public static SVGSettings getInstance()" ], [ "createKeyList", "de.neemann.digital.draw.graphics", "SVGSettings", "public static List<Key> createKeyList()" ], [ "mul", "de.neemann.digital.draw.graphics", "Transform", "static Transform mul(Transform t1, Transform t2)" ], [ "rotate", "de.neemann.digital.draw.graphics", "TransformMatrix", "public static TransformMatrix rotate(double w)" ], [ "scale", "de.neemann.digital.draw.graphics", "TransformMatrix", "public static TransformMatrix scale(float sx, float sy)" ], [ "getTextWidth", "de.neemann.digital.draw.graphics", "GraphicMinMax", "public static int getTextWidth(String text, Style style)" ], [ "getSelected", "de.neemann.digital.draw.graphics", "ColorScheme", "public static ColorScheme getSelected()" ], [ "getWireStyle", "de.neemann.digital.draw.graphics", "Style", "public static Style getWireStyle(Value value)" ], [ "format", "de.neemann.digital.draw.graphics.text.formatter", "PlainTextFormatter", "public static String format(Text text)" ], [ "format", "de.neemann.digital.draw.graphics.text.formatter", "PlainTextFormatter", "public static String format(Text text, FormatToExpression format)" ], [ "format", "de.neemann.digital.draw.graphics.text.formatter", "SVGFormatter", "public static String format(Text text)" ], [ "createFragment", "de.neemann.digital.draw.graphics.text.formatter", "GraphicsFormatter", "public static Fragment createFragment(Graphics2D gr, String text)" ], [ "createFragment", "de.neemann.digital.draw.graphics.text.formatter", "GraphicsFormatter", "public static Fragment createFragment(Graphics2D gr, Expression expression) throws FormatterException" ], [ "createFragment", "de.neemann.digital.draw.graphics.text.formatter", "GraphicsFormatter", "public static Fragment createFragment(FontSizer sizer, Font font, String text)" ], [ "format", "de.neemann.digital.draw.graphics.text.formatter", "LaTeXFormatter", "public static String format(Expression exp)" ], [ "format", "de.neemann.digital.draw.graphics.text.formatter", "LaTeXFormatter", "public static String format(Text text)" ], [ "math", "de.neemann.digital.draw.graphics.text.text", "Decorate", "public static Text math(Text t)" ], [ "escapeXML", "de.neemann.digital.draw.graphics", "GraphicSVG", "public static String escapeXML(String text)" ], [ "getMirrorYOrientation", "de.neemann.digital.draw.graphics", "GraphicSwing", "static int getMirrorYOrientation(Orientation orientation, VectorInterface p1, VectorInterface p2, VectorInterface p3)" ], [ "load", "de.neemann.digital.toolchain", "Configuration", "public static Configuration load(File file) throws IOException" ], [ "load", "de.neemann.digital.toolchain", "Configuration", "public static Configuration load(InputStream in) throws IOException" ] ],
  "tokensProjectClassesNonPrivateStaticAttributes" : [ [ "UNKNOWN", "de.neemann.gui", "InfoDialog", "public static final String UNKNOWN = \"unknown\";" ], [ "DESCRIPTION", "de.neemann.digital.core.pld", "PullDown", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"PullDown\", PullDown.class).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS);" ], [ "DESCRIPTION", "de.neemann.digital.core.pld", "Diode", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Diode.class).addAttribute(Keys.ROTATE).addAttribute(Keys.BLOWN);" ], [ "DESCRIPTION", "de.neemann.digital.core.pld", "DiodeBackward", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(DiodeBackward.class, input(\"in\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BLOWN);" ], [ "DESCRIPTION", "de.neemann.digital.core.pld", "PullUp", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"PullUp\", PullUp.class).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS);" ], [ "DESCRIPTION", "de.neemann.digital.core.pld", "DiodeForward", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(DiodeForward.class, input(\"in\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BLOWN);" ], [ "DESCRIPTION", "de.neemann.digital.core.memory", "RAMSinglePort", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(RAMSinglePort.class, input(\"A\"), input(\"str\"), input(\"C\").setClock(), input(\"ld\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.ADDR_BITS).addAttribute(Keys.INT_FORMAT).addAttribute(Keys.IS_PROGRAM_MEMORY).addAttribute(Keys.LABEL);" ], [ "DESCRIPTION", "de.neemann.digital.core.memory", "ROMDualPort", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(ROMDualPort.class, input(\"A1\"), input(\"s1\"), input(\"A2\"), input(\"s2\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.ADDR_BITS).addAttribute(Keys.LABEL).addAttribute(Keys.DATA).addAttribute(Keys.INT_FORMAT).addAttribute(Keys.IS_PROGRAM_MEMORY).addAttribute(Keys.AUTO_RELOAD_ROM).addAttribute(Keys.LAST_DATA_FILE).addAttribute(Keys.BIG_ENDIAN);" ], [ "DESCRIPTION", "de.neemann.digital.core.memory", "RAMDualAccess", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(RAMDualAccess.class, input(\"str\"), input(\"C\").setClock(), input(\"ld\"), input(\"1A\"), input(\"1Din\"), input(\"2A\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.ADDR_BITS).addAttribute(Keys.IS_PROGRAM_MEMORY).addAttribute(Keys.LABEL).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.memory", "CounterPreset", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(CounterPreset.class, input(\"en\"), input(\"C\").setClock(), input(\"dir\"), input(\"in\"), input(\"ld\"), input(\"clr\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.MAX_VALUE).addAttribute(Keys.INVERTER_CONFIG).addAttribute(Keys.LABEL).addAttribute(Keys.VALUE_IS_PROBE).addAttribute(Keys.IS_PROGRAM_COUNTER).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.memory", "RAMDualPort", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(RAMDualPort.class, input(\"A\"), input(\"Din\"), input(\"str\"), input(\"C\").setClock(), input(\"ld\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.ADDR_BITS).addAttribute(Keys.INT_FORMAT).addAttribute(Keys.IS_PROGRAM_MEMORY).addAttribute(Keys.LABEL).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.memory", "Register", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Register.class, input(\"D\"), input(\"C\").setClock(), input(\"en\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).addAttribute(Keys.INVERTER_CONFIG).addAttribute(Keys.IS_PROGRAM_COUNTER).addAttribute(Keys.VALUE_IS_PROBE).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.memory", "LookUpTable", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(LookUpTable.class) {\n\n    @Override\n    public PinDescriptions getInputDescription(ElementAttributes elementAttributes) {\n        int size = elementAttributes.get(Keys.INPUT_COUNT);\n        PinDescription[] names = new PinDescription[size];\n        for (int i = 0; i < size; i++) names[i] = input(Integer.toString(i), Lang.get(\"elem_LookUpTable_pin_in\", i));\n        return new PinDescriptions(names);\n    }\n}.addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.LUT_INPUT_COUNT).addAttribute(Keys.LABEL).addAttribute(Keys.DATA).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.memory", "BlockRAMDualPort", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(BlockRAMDualPort.class, input(\"A\"), input(\"Din\"), input(\"str\"), input(\"C\").setClock()).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.ADDR_BITS).addAttribute(Keys.IS_PROGRAM_MEMORY).addAttribute(Keys.LABEL).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.memory", "Counter", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Counter.class, input(\"en\"), input(\"C\").setClock(), input(\"clr\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.INVERTER_CONFIG).addAttribute(Keys.LABEL).addAttribute(Keys.VALUE_IS_PROBE).addAttribute(Keys.IS_PROGRAM_COUNTER).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.memory", "EEPROM", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(EEPROM.class, input(\"A\"), input(\"CS\"), input(\"WE\").setClock(), input(\"OE\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.ADDR_BITS).addAttribute(Keys.LABEL).addAttribute(Keys.INT_FORMAT).addAttribute(Keys.IS_PROGRAM_MEMORY).addAttribute(Keys.INVERTER_CONFIG).addAttribute(Keys.DATA);" ], [ "DESCRIPTION", "de.neemann.digital.core.memory", "RAMAsync", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(RAMAsync.class, input(\"A\"), input(\"D\"), input(\"we\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.ADDR_BITS).addAttribute(Keys.IS_PROGRAM_MEMORY).addAttribute(Keys.INVERTER_CONFIG).addAttribute(Keys.LABEL).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.memory", "ROM", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(ROM.class, input(\"A\"), input(\"sel\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.ADDR_BITS).addAttribute(Keys.LABEL).addAttribute(Keys.DATA).addAttribute(Keys.INT_FORMAT).addAttribute(Keys.IS_PROGRAM_MEMORY).addAttribute(Keys.AUTO_RELOAD_ROM).addAttribute(Keys.LAST_DATA_FILE).addAttribute(Keys.BIG_ENDIAN).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.memory", "EEPROMDualPort", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(EEPROMDualPort.class, input(\"A\"), input(\"Din\"), input(\"str\"), input(\"C\").setClock(), input(\"ld\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.ADDR_BITS).addAttribute(Keys.INT_FORMAT).addAttribute(Keys.IS_PROGRAM_MEMORY).addAttribute(Keys.LABEL).addAttribute(Keys.DATA);" ], [ "DESCRIPTION", "de.neemann.digital.core.memory", "RAMSinglePortSel", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(RAMSinglePortSel.class, input(\"A\"), input(\"CS\"), input(\"WE\"), input(\"OE\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.ADDR_BITS).addAttribute(Keys.LABEL).addAttribute(Keys.IS_PROGRAM_MEMORY).addAttribute(Keys.INVERTER_CONFIG);" ], [ "DESCRIPTION", "de.neemann.digital.core.memory", "RegisterFile", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(RegisterFile.class, input(\"Din\"), input(\"we\"), input(\"Rw\"), input(\"C\").setClock(), input(\"Ra\"), input(\"Rb\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.ADDR_BITS).addAttribute(Keys.LABEL).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.io", "MIDI", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(MIDI.class) {\n\n    public PinDescriptions getInputDescription(ElementAttributes elementAttributes) throws NodeException {\n        if (elementAttributes.get(Keys.MIDI_PROG_CHANGE))\n            return new PinDescriptions(input(\"N\"), input(\"V\"), input(\"OnOff\"), input(\"PC\"), input(\"en\"), input(\"C\").setClock()).setLangKey(getPinLangKey());\n        else\n            return new PinDescriptions(input(\"N\"), input(\"V\"), input(\"OnOff\"), input(\"en\"), input(\"C\").setClock()).setLangKey(getPinLangKey());\n    }\n}.addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.MIDI_CHANNEL).addAttribute(Keys.MIDI_INSTRUMENT).addAttribute(Keys.MIDI_PROG_CHANGE);" ], [ "DESCRIPTION", "de.neemann.digital.core.io", "RGBLED", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(RGBLED.class, input(\"R\"), input(\"G\"), input(\"B\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).addAttribute(Keys.LED_SIZE);" ], [ "DESCRIPTION", "de.neemann.digital.core.io", "Out", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"Out\", attributes -> new Out(attributes).enforceName(), input(\"in\")) {\n\n    @Override\n    public String getDescription(ElementAttributes elementAttributes) {\n        String d = Lang.evalMultilingualContent(elementAttributes.get(Keys.DESCRIPTION));\n        if (d.length() > 0)\n            return d;\n        else\n            return super.getDescription(elementAttributes);\n    }\n}.addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).addAttribute(Keys.DESCRIPTION).addAttribute(Keys.INT_FORMAT).addAttribute(Keys.PINNUMBER).addAttribute(Keys.ADD_VALUE_TO_GRAPH).addAttribute(Keys.IN_OUT_SMALL).supportsHDL();" ], [ "LEDDESCRIPTION", "de.neemann.digital.core.io", "Out", "public static final ElementTypeDescription LEDDESCRIPTION = new ElementTypeDescription(\"LED\", Out.class, input(\"in\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.LED_SIZE).addAttribute(Keys.COLOR);" ], [ "POLARITYAWARELEDDESCRIPTION", "de.neemann.digital.core.io", "Out", "public static final ElementTypeDescription POLARITYAWARELEDDESCRIPTION = new ElementTypeDescription(\"PolarityAwareLED\", attributes -> new Out(1, 1), input(\"A\"), input(\"C\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.COLOR);" ], [ "SEVENDESCRIPTION", "de.neemann.digital.core.io", "Out", "public static final ElementTypeDescription SEVENDESCRIPTION = new SevenSegTypeDescription();" ], [ "SEVENHEXDESCRIPTION", "de.neemann.digital.core.io", "Out", "public static final ElementTypeDescription SEVENHEXDESCRIPTION = new ElementTypeDescription(\"Seven-Seg-Hex\", attributes -> new Out(4, 1), input(\"d\"), input(\"dp\")).addAttribute(Keys.COLOR).addAttribute(Keys.SEVEN_SEG_SIZE);" ], [ "SIXTEENDESCRIPTION", "de.neemann.digital.core.io", "Out", "public static final ElementTypeDescription SIXTEENDESCRIPTION = new ElementTypeDescription(\"SixteenSeg\", attributes -> new Out(16, 1), input(\"led\"), input(\"dp\")).addAttribute(Keys.COLOR).addAttribute(Keys.SEVEN_SEG_SIZE);" ], [ "DESCRIPTION", "de.neemann.digital.core.io", "RotEncoder", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(RotEncoder.class).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL);" ], [ "DESCRIPTION", "de.neemann.digital.core.io", "PinControl", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(PinControl.class, input(\"wr\"), input(\"oe\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.MIRROR).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.io", "DipSwitch", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(DipSwitch.class) {\n\n    @Override\n    public String getDescription(ElementAttributes elementAttributes) {\n        String d = Lang.evalMultilingualContent(elementAttributes.get(Keys.DESCRIPTION));\n        if (d.length() > 0)\n            return d;\n        else\n            return super.getDescription(elementAttributes);\n    }\n}.addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.DIP_DEFAULT).addAttribute(Keys.DESCRIPTION);" ], [ "DESCRIPTION", "de.neemann.digital.core.io", "LightBulb", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(LightBulb.class, input(\"A\"), input(\"B\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.COLOR);" ], [ "DESCRIPTION", "de.neemann.digital.core.io", "Probe", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"Probe\", Probe.class, input(\"in\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.INT_FORMAT).addAttribute(Keys.PROBE_MODE).addAttribute(Keys.ADD_VALUE_TO_GRAPH);" ], [ "DESCRIPTION", "de.neemann.digital.core.io", "Button", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Button.class).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.ACTIVE_LOW).addAttribute(Keys.MAP_TO_KEY).addAttribute(Keys.ADD_VALUE_TO_GRAPH);" ], [ "DESCRIPTION", "de.neemann.digital.core.io", "ButtonLED", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(ButtonLED.class, input(\"in\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.ACTIVE_LOW).addAttribute(Keys.MAP_TO_KEY).addAttribute(Keys.COLOR);" ], [ "DESCRIPTION", "de.neemann.digital.core.io", "In", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(In.class) {\n\n    @Override\n    public String getDescription(ElementAttributes elementAttributes) {\n        String d = Lang.evalMultilingualContent(elementAttributes.get(Keys.DESCRIPTION));\n        if (d.length() > 0)\n            return d;\n        else\n            return super.getDescription(elementAttributes);\n    }\n}.addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).addAttribute(Keys.INPUT_DEFAULT).addAttribute(Keys.IS_HIGH_Z).addAttribute(Keys.AVOID_ACTIVE_LOW).addAttribute(Keys.DESCRIPTION).addAttribute(Keys.INT_FORMAT).addAttribute(Keys.PINNUMBER).addAttribute(Keys.ADD_VALUE_TO_GRAPH).addAttribute(Keys.IN_OUT_SMALL).supportsHDL();" ], [ "STEPS", "de.neemann.digital.core.io", "StepperMotorUnipolar", "public static final int STEPS = 72;" ], [ "DESCRIPTION", "de.neemann.digital.core.io", "StepperMotorUnipolar", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(StepperMotorUnipolar.class, input(\"P0\"), input(\"P1\"), input(\"P2\"), input(\"P3\"), input(\"com\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.INVERT_OUTPUT);" ], [ "DESCRIPTION", "de.neemann.digital.core.io", "NotConnected", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(NotConnected.class).addAttribute(Keys.BITS);" ], [ "DESCRIPTION", "de.neemann.digital.core.io", "StepperMotorBipolar", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(StepperMotorBipolar.class, input(\"A+\"), input(\"A-\"), input(\"B+\"), input(\"B-\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.INVERT_OUTPUT);" ], [ "DESCRIPTION", "de.neemann.digital.core.io", "Const", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Const.class).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.VALUE).addAttribute(Keys.INT_FORMAT).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.io", "PowerSupply", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(PowerSupply.class, input(\"VDD\"), input(\"GND\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL);" ], [ "DESCRIPTION", "de.neemann.digital.core.io", "Ground", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Ground.class).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.io", "VDD", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(VDD.class).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).supportsHDL();" ], [ "INSTANCE", "de.neemann.digital.core.io.telnet", "ServerHolder", "public static final ServerHolder INSTANCE = new ServerHolder();" ], [ "DESCRIPTION", "de.neemann.digital.core.io.telnet", "Telnet", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Telnet.class, input(\"in\"), input(\"C\").setClock(), input(\"wr\"), input(\"rd\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.TELNET_ESCAPE).addAttribute(Keys.PORT);" ], [ "BITS", "de.neemann.digital.core.element", "Keys", "public static final Key.KeyBits BITS = new Key.KeyBits(\"Bits\", 1);" ], [ "INPUT_BITS", "de.neemann.digital.core.element", "Keys", "public static final Key.KeyBits INPUT_BITS = new Key.KeyBits(\"inputBits\", 8);" ], [ "OUTPUT_BITS", "de.neemann.digital.core.element", "Keys", "public static final Key.KeyBits OUTPUT_BITS = new Key.KeyBits(\"outputBits\", 16);" ], [ "INPUT_COUNT", "de.neemann.digital.core.element", "Keys", "public static final Key.KeyInteger INPUT_COUNT = new Key.KeyInteger(\"Inputs\", 2).setComboBoxValues(2, 3, 4, 5).setMin(2);" ], [ "LUT_INPUT_COUNT", "de.neemann.digital.core.element", "Keys", "public static final Key.KeyInteger LUT_INPUT_COUNT = new Key.KeyInteger(\"Inputs\", 2).setComboBoxValues(2, 3, 4, 5, 6).setMax(20).setMin(2);" ], [ "MAX_VALUE", "de.neemann.digital.core.element", "Keys", "public static final Key.KeyInteger MAX_VALUE = new Key.KeyInteger(\"maxValue\", 0).setMin(0);" ], [ "DELAY_TIME", "de.neemann.digital.core.element", "Keys", "public static final Key.KeyInteger DELAY_TIME = new Key.KeyInteger(\"delayTime\", 1).setComboBoxValues(1, 2, 3, 4, 5).setMin(1).setMax(20);" ], [ "MONOFLOP_DELAY", "de.neemann.digital.core.element", "Keys", "public static final Key.KeyInteger MONOFLOP_DELAY = new Key.KeyInteger(\"timerDelay\", 1).setMin(1);" ], [ "LABEL", "de.neemann.digital.core.element", "Keys", "public static final Key<String> LABEL = new Key<>(\"Label\", \"\");" ], [ "FONT_SIZE", "de.neemann.digital.core.element", "Keys", "public static final Key<Integer> FONT_SIZE = new Key.KeyInteger(\"textFontSize\", Style.NORMAL.getFontSize()).setComboBoxValues(14, 17, 20, 24, 36, 48, 60).setMin(10).setMax(70);" ], [ "TEXT_ORIENTATION", "de.neemann.digital.core.element", "Keys", "public static final Key<Orientation> TEXT_ORIENTATION = new Key.KeyEnum<>(\"textOrientation\", Orientation.LEFTTOP, Orientation.values()).setSecondary();" ], [ "LED_SIZE", "de.neemann.digital.core.element", "Keys", "public static final Key<Integer> LED_SIZE = new Key.KeyInteger(\"Size\", 1).setComboBoxValues(0, 1, 2, 3, 4, 5).setMin(0).allowGroupEdit().setSecondary();" ], [ "SEVEN_SEG_SIZE", "de.neemann.digital.core.element", "Keys", "public static final Key<Integer> SEVEN_SEG_SIZE = new Key.KeyInteger(\"segSize\", 2).setComboBoxValues(0, 1, 2, 3, 4, 5).setMin(0).allowGroupEdit().useTranslationOf(LED_SIZE);" ], [ "VALUE", "de.neemann.digital.core.element", "Keys", "public static final Key<Long> VALUE = new Key<>(\"Value\", 1L).setAdaptiveIntFormat().allowGroupEdit();" ], [ "DEFAULT", "de.neemann.digital.core.element", "Keys", "public static final Key<Long> DEFAULT = new Key<>(\"Default\", 0L).allowGroupEdit().setSecondary();" ], [ "INPUT_DEFAULT", "de.neemann.digital.core.element", "Keys", "public static final Key<InValue> INPUT_DEFAULT = new Key<>(\"InDefault\", new InValue(0)).setAdaptiveIntFormat().allowGroupEdit().setSecondary();" ], [ "DIP_DEFAULT", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> DIP_DEFAULT = new Key<>(\"dipDefault\", false).allowGroupEdit().setSecondary();" ], [ "COLOR", "de.neemann.digital.core.element", "Keys", "public static final Key<java.awt.Color> COLOR = new Key<>(\"Color\", java.awt.Color.RED).allowGroupEdit();" ], [ "INPUT_SPLIT", "de.neemann.digital.core.element", "Keys", "public static final Key<String> INPUT_SPLIT = new Key<>(\"Input Splitting\", \"4,4\");" ], [ "OUTPUT_SPLIT", "de.neemann.digital.core.element", "Keys", "public static final Key<String> OUTPUT_SPLIT = new Key<>(\"Output Splitting\", \"8\");" ], [ "SPLITTER_SPREADING", "de.neemann.digital.core.element", "Keys", "public static final Key<Integer> SPLITTER_SPREADING = new Key.KeyInteger(\"splitterSpreading\", 1).setComboBoxValues(1, 2, 3, 4).setMin(1).setMax(20).setSecondary();" ], [ "IN_OUT_SMALL", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> IN_OUT_SMALL = new Key<>(\"small\", false).allowGroupEdit().setSecondary();" ], [ "RUN_AT_REAL_TIME", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> RUN_AT_REAL_TIME = new Key<>(\"runRealTime\", false);" ], [ "INVERT_OUTPUT", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> INVERT_OUTPUT = new Key<>(\"invertOutput\", true);" ], [ "FREQUENCY", "de.neemann.digital.core.element", "Keys", "public static final Key<Integer> FREQUENCY = new Key.KeyInteger(\"Frequency\", 1).setComboBoxValues(1, 2, 5, 10, 20, 50, 100, 200, 500, 5000, 50000, Integer.MAX_VALUE).setMin(1).setDependsOn(RUN_AT_REAL_TIME);" ], [ "SELECTOR_BITS", "de.neemann.digital.core.element", "Keys", "public static final Key<Integer> SELECTOR_BITS = new Key.KeyBits(\"Selector Bits\", 1).setMax(8);" ], [ "ADDR_BITS", "de.neemann.digital.core.element", "Keys", "public static final Key<Integer> ADDR_BITS = // needs to have the same default value as INPUT_COUNT!!!  see de.neemann.digital.gui.components.EditorFactory#DataFieldEditor\nnew Key.KeyBits(\"AddrBits\", 2).setMax(24);" ], [ "BLOWN", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> BLOWN = new Key<>(\"Blown\", false).allowGroupEdit();" ], [ "CLOSED", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> CLOSED = new Key<>(\"Closed\", false).allowGroupEdit();" ], [ "SIGNED", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> SIGNED = new Key<>(\"Signed\", false).allowGroupEdit();" ], [ "REMAINDER_POSITIVE", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> REMAINDER_POSITIVE = new Key<>(\"remainderPositive\", true).setDependsOn(SIGNED);" ], [ "DATA", "de.neemann.digital.core.element", "Keys", "public static final Key<DataField> DATA = new Key<>(\"Data\", DataField::new);" ], [ "FLIP_SEL_POSITON", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> FLIP_SEL_POSITON = new Key<>(\"flipSelPos\", false).allowGroupEdit();" ], [ "ROTATE", "de.neemann.digital.core.element", "Keys", "public static final Key<Rotation> ROTATE = new Key<>(\"rotation\", new Rotation(0)).allowGroupEdit().setSecondary();" ], [ "WIDTH", "de.neemann.digital.core.element", "Keys", "public static final Key.KeyInteger WIDTH = new Key.KeyInteger(\"Width\", 3).setMin(2);" ], [ "SHAPE_TYPE", "de.neemann.digital.core.element", "Keys", "public static final Key<CustomCircuitShapeType> SHAPE_TYPE = new Key.KeyEnum<>(\"shapeType\", CustomCircuitShapeType.DEFAULT, CustomCircuitShapeType.values()).setSecondary();" ], [ "LAYOUT_SHAPE_DELTA", "de.neemann.digital.core.element", "Keys", "public static final Key.KeyInteger LAYOUT_SHAPE_DELTA = new Key.KeyInteger(\"layoutShapeDelta\", 0).setMin(0);" ], [ "HEIGHT", "de.neemann.digital.core.element", "Keys", "public static final Key<Integer> HEIGHT = new Key.KeyInteger(\"Height\", 3).setMin(2).setSecondary().setDependsOn(SHAPE_TYPE, cst -> cst.equals(CustomCircuitShapeType.LAYOUT));" ], [ "TERM_WIDTH", "de.neemann.digital.core.element", "Keys", "public static final Key.KeyInteger TERM_WIDTH = new Key.KeyInteger(\"termWidth\", 50).setMin(10);" ], [ "TERM_HEIGHT", "de.neemann.digital.core.element", "Keys", "public static final Key.KeyInteger TERM_HEIGHT = new Key.KeyInteger(\"termHeight\", 25).setMin(5);" ], [ "CYCLES", "de.neemann.digital.core.element", "Keys", "public static final Key.KeyInteger CYCLES = new Key.KeyInteger(\"Cycles\", 100000).setComboBoxValues(1000, 10000, 100000, 1000000);" ], [ "ENABLED", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> ENABLED = new Key<>(\"enabled\", true).allowGroupEdit();" ], [ "VALUE_IS_PROBE", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> VALUE_IS_PROBE = new Key<>(\"valueIsProbe\", false).allowGroupEdit().setSecondary();" ], [ "IS_PROGRAM_MEMORY", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> IS_PROGRAM_MEMORY = new Key<>(\"isProgramMemory\", false).setSecondary();" ], [ "IS_PROGRAM_COUNTER", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> IS_PROGRAM_COUNTER = new Key<>(\"isProgramCounter\", false).setSecondary();" ], [ "AUTO_RELOAD_ROM", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> AUTO_RELOAD_ROM = new Key<>(\"autoReload\", false).setSecondary();" ], [ "LAST_DATA_FILE", "de.neemann.digital.core.element", "Keys", "public static final Key<File> LAST_DATA_FILE = new Key.KeyFile(\"lastDataFile\", new File(\"\")).setDependsOn(AUTO_RELOAD_ROM).setSecondary();" ], [ "SHOW_DATA_TABLE", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> SHOW_DATA_TABLE = new Key<>(\"showDataTable\", false).setSecondary();" ], [ "SHOW_DATA_GRAPH", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> SHOW_DATA_GRAPH = new Key<>(\"showDataGraph\", false).setSecondary();" ], [ "SHOW_DATA_GRAPH_MICRO", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> SHOW_DATA_GRAPH_MICRO = new Key<>(\"showDataGraphMicro\", false).setSecondary();" ], [ "ADD_VALUE_TO_GRAPH", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> ADD_VALUE_TO_GRAPH = new Key<>(\"addValueToGraph\", true).allowGroupEdit().setSecondary();" ], [ "MICRO_STEP", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> MICRO_STEP = new Key<>(\"microStep\", false);" ], [ "MAX_STEP_COUNT", "de.neemann.digital.core.element", "Keys", "public static final Key.KeyInteger MAX_STEP_COUNT = new Key.KeyInteger(\"maxStepCount\", 25).setMin(5);" ], [ "SETTINGS_MAX_STEP_COUNT", "de.neemann.digital.core.element", "Keys", "public static final Key<Integer> SETTINGS_MAX_STEP_COUNT = new Key.KeyInteger(\"settingsMaxStepCount\", 1000).setComboBoxValues(500, 1000, 5000, 10000).setMin(500).setSecondary().useTranslationOf(MAX_STEP_COUNT);" ], [ "IS_HIGH_Z", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> IS_HIGH_Z = new Key<>(\"isHighZ\", false).allowGroupEdit().setSecondary();" ], [ "AVOID_ACTIVE_LOW", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> AVOID_ACTIVE_LOW = new Key<>(\"avoidActiveLow\", false).setDependsOn(IS_HIGH_Z).allowGroupEdit().setSecondary();" ], [ "DESCRIPTION", "de.neemann.digital.core.element", "Keys", "public static final Key.LongString DESCRIPTION = new Key.LongString(\"Description\");" ], [ "NETNAME", "de.neemann.digital.core.element", "Keys", "public static final Key<String> NETNAME = new Key<>(\"NetName\", \"\");" ], [ "SETTINGS_IEEE_SHAPES", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> SETTINGS_IEEE_SHAPES = new Key<>(\"IEEEShapes\", !Locale.getDefault().getLanguage().equals(Locale.GERMAN.getLanguage())).setRequiresRestart();" ], [ "SETTINGS_LANGUAGE", "de.neemann.digital.core.element", "Keys", "public static final Key<Language> SETTINGS_LANGUAGE = new Key<>(\"Language\", new Language()).setRequiresRestart();" ], [ "SETTINGS_DEFAULT_TREESELECT", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> SETTINGS_DEFAULT_TREESELECT = new Key<>(\"defTreeSelect\", false);" ], [ "SETTINGS_EXPRESSION_FORMAT", "de.neemann.digital.core.element", "Keys", "public static final Key.KeyEnum<FormatToExpression> SETTINGS_EXPRESSION_FORMAT = new Key.KeyEnum<>(\"ExpressionFormat\", FormatToExpression.UNICODE, FormatToExpression.values(), true);" ], [ "SETTINGS_GRID", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> SETTINGS_GRID = new Key<>(\"grid\", true).setRequiresRepaint();" ], [ "SETTINGS_SHOW_WIRE_BITS", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> SETTINGS_SHOW_WIRE_BITS = new Key<>(\"showWireBits\", false);" ], [ "SETTINGS_MAC_MOUSE", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> SETTINGS_MAC_MOUSE = new Key<>(\"macMouse\", false).setRequiresRestart().setSecondary();" ], [ "SETTINGS_SHOW_TUNNEL_RENAME_DIALOG", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> SETTINGS_SHOW_TUNNEL_RENAME_DIALOG = new Key<>(\"tunnelRenameDialog\", true);" ], [ "SETTINGS_RENAME_LABELS", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> SETTINGS_RENAME_LABELS = new Key<>(\"renameLabels\", true);" ], [ "SETTINGS_OPEN_REMOTE_PORT", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> SETTINGS_OPEN_REMOTE_PORT = new Key<>(\"openRemotePort\", false).setSecondary().setRequiresRestart();" ], [ "SETTINGS_REMOTE_PORT", "de.neemann.digital.core.element", "Keys", "public static final Key<Integer> SETTINGS_REMOTE_PORT = new Key.KeyInteger(\"remotePort\", 41114).setMin(0).setMax(0xffff).setComboBoxValues(41114).setSecondary().setRequiresRestart().setDependsOn(SETTINGS_OPEN_REMOTE_PORT);" ], [ "OSCILLATION_DETECTION_COUNTER", "de.neemann.digital.core.element", "Keys", "public static final Key<Integer> OSCILLATION_DETECTION_COUNTER = new Key.KeyInteger(\"oscillationDetectionCounter\", 1000).setComboBoxValues(1000, 5000, 10000).setMin(1000).setMax(100000);" ], [ "INT_FORMAT", "de.neemann.digital.core.element", "Keys", "public static final Key<IntFormat> INT_FORMAT = new Key.KeyEnum<>(\"intFormat\", IntFormat.def, IntFormat.values()).setSecondary();" ], [ "PROBE_MODE", "de.neemann.digital.core.element", "Keys", "public static final Key<ProbeMode> PROBE_MODE = new Key.KeyEnum<>(\"probeMode\", ProbeMode.VALUE, ProbeMode.values());" ], [ "FIXED_POINT", "de.neemann.digital.core.element", "Keys", "public static final Key<Integer> FIXED_POINT = new Key.KeyInteger(\"fixedPoint\", 4).setMin(1).setMax(64).setDependsOn(INT_FORMAT, intFormat -> intFormat.equals(IntFormat.fixed) || intFormat.equals(IntFormat.fixedSigned)).allowGroupEdit().setSecondary();" ], [ "GRAPHIC_WIDTH", "de.neemann.digital.core.element", "Keys", "public static final Key.KeyInteger GRAPHIC_WIDTH = new Key.KeyInteger(\"graphicWidth\", 160).setMin(4);" ], [ "GRAPHIC_HEIGHT", "de.neemann.digital.core.element", "Keys", "public static final Key.KeyInteger GRAPHIC_HEIGHT = new Key.KeyInteger(\"graphicHeight\", 100).setMin(4);" ], [ "RELAY_NORMALLY_CLOSED", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> RELAY_NORMALLY_CLOSED = new Key<>(\"relayNormallyClosed\", false).allowGroupEdit();" ], [ "POLES", "de.neemann.digital.core.element", "Keys", "public static final Key<Integer> POLES = new Key.KeyInteger(\"poles\", 1).setComboBoxValues(1, 2, 3, 4).setMin(1).allowGroupEdit();" ], [ "BARREL_SHIFTER_MODE", "de.neemann.digital.core.element", "Keys", "public static final Key<BarrelShifterMode> BARREL_SHIFTER_MODE = new Key.KeyEnum<>(\"barrelShifterMode\", BarrelShifterMode.logical, BarrelShifterMode.values());" ], [ "DIRECTION", "de.neemann.digital.core.element", "Keys", "public static final Key<LeftRightFormat> DIRECTION = new Key.KeyEnum<>(\"direction\", LeftRightFormat.left, LeftRightFormat.values());" ], [ "BARREL_SIGNED", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> BARREL_SIGNED = new Key<>(\"barrelSigned\", false);" ], [ "COMMON_CONNECTION", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> COMMON_CONNECTION = new Key<>(\"commonCathode\", false).allowGroupEdit();" ], [ "COMMON_CONNECTION_TYPE", "de.neemann.digital.core.element", "Keys", "public static final Key<CommonConnectionType> COMMON_CONNECTION_TYPE = new Key.KeyEnum<>(\"commonConnectionType\", CommonConnectionType.cathode, CommonConnectionType.values()).setDependsOn(COMMON_CONNECTION).allowGroupEdit();" ], [ "LED_PERSISTENCE", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> LED_PERSISTENCE = new Key<>(\"ledPersistence\", false).allowGroupEdit().setDependsOn(COMMON_CONNECTION);" ], [ "LED_PERSIST_TIME", "de.neemann.digital.core.element", "Keys", "public static final Key<Integer> LED_PERSIST_TIME = new Key.KeyInteger(\"persistTime\", 0).setMin(0).allowGroupEdit();" ], [ "SETTINGS_ATF1502_FITTER", "de.neemann.digital.core.element", "Keys", "public static final Key<File> SETTINGS_ATF1502_FITTER = new Key.KeyFile(\"atf1502Fitter\", new File(\"c:/Wincupl/WinCupl/Fitters\")).setDirectoryOnly(true).setSecondary();" ], [ "SETTINGS_ATMISP", "de.neemann.digital.core.element", "Keys", "public static final Key<File> SETTINGS_ATMISP = new Key.KeyFile(\"ATMISP\", getATMISPPath()).setSecondary();" ], [ "ROW_DATA_BITS", "de.neemann.digital.core.element", "Keys", "public static final Key.KeyBits ROW_DATA_BITS = new Key.KeyBits(\"rowDataBits\", 8);" ], [ "COL_ADDR_BITS", "de.neemann.digital.core.element", "Keys", "public static final Key.KeyBits COL_ADDR_BITS = new Key.KeyBits(\"colAddrBits\", 3);" ], [ "LOCKED_MODE", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> LOCKED_MODE = new Key<>(\"lockedMode\", false);" ], [ "PINNUMBER", "de.neemann.digital.core.element", "Keys", "public static final Key<String> PINNUMBER = new Key<>(\"pinNumber\", \"\").setSecondary();" ], [ "PINCOUNT", "de.neemann.digital.core.element", "Keys", "public static final Key<Integer> PINCOUNT = new Key.KeyInteger(\"pinCount\", 0).setMin(0).setSecondary().setDependsOn(SHAPE_TYPE, st -> st.equals(CustomCircuitShapeType.DIL));" ], [ "INVERTER_CONFIG", "de.neemann.digital.core.element", "Keys", "public static final Key<InverterConfig> INVERTER_CONFIG = new Key<>(\"inverterConfig\", new InverterConfig.Builder().build());" ], [ "BACKGROUND_COLOR", "de.neemann.digital.core.element", "Keys", "public static final Key<java.awt.Color> BACKGROUND_COLOR = new Key<>(\"backgroundColor\", new Color(255, 255, 180, 200));" ], [ "SETTINGS_FONT_SCALING", "de.neemann.digital.core.element", "Keys", "public static final Key<Integer> SETTINGS_FONT_SCALING = new Key.KeyInteger(\"fontSize\", Screen.getDefaultFontScaling()).setComboBoxValues(100, 120, 150, 180, 200, 250, 300).setMin(50).setMax(400).setRequiresRestart().setSecondary();" ], [ "SETTINGS_USE_EQUALS_KEY", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> SETTINGS_USE_EQUALS_KEY;" ], [ "WITH_ENABLE", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> WITH_ENABLE = new Key<>(\"withEnable\", true);" ], [ "FET_UNIDIRECTIONAL", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> FET_UNIDIRECTIONAL = new Key<>(\"unidirectional\", false);" ], [ "ACTIVE_LOW", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> ACTIVE_LOW = new Key<>(\"activeLow\", false).allowGroupEdit();" ], [ "MAP_TO_KEY", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> MAP_TO_KEY = new Key<>(\"mapToKey\", false).allowGroupEdit();" ], [ "SETTINGS_LIBRARY_PATH", "de.neemann.digital.core.element", "Keys", "public static final Key<File> SETTINGS_LIBRARY_PATH = new Key.KeyFile(\"libraryPath\", ElementLibrary.getLibPath()).setDirectoryOnly(true).setSecondary();" ], [ "SETTINGS_JAR_PATH", "de.neemann.digital.core.element", "Keys", "public static final Key<File> SETTINGS_JAR_PATH = new Key.KeyFile(\"jarPath\", new File(\"\")).setSecondary().setRequiresRestart();" ], [ "ROMMANAGER", "de.neemann.digital.core.element", "Keys", "public static final Key<ROMManagerFile> ROMMANAGER = new Key<>(\"romContent\", ROMManagerFile::new).setSecondary();" ], [ "APPLICATION_TYPE", "de.neemann.digital.core.element", "Keys", "public static final Key.KeyEnum<Application.Type> APPLICATION_TYPE = new Key.KeyEnum<>(\"applicationType\", Application.Type.Generic, Application.Type.values());" ], [ "EXTERNAL_INPUTS", "de.neemann.digital.core.element", "Keys", "public static final Key<String> EXTERNAL_INPUTS = new Key<>(\"externalInputs\", \"in\");" ], [ "EXTERNAL_OUTPUTS", "de.neemann.digital.core.element", "Keys", "public static final Key<String> EXTERNAL_OUTPUTS = new Key<>(\"externalOutputs\", \"out\");" ], [ "EXTERNAL_CODE", "de.neemann.digital.core.element", "Keys", "public static final Key.LongString EXTERNAL_CODE = new Key.LongString(\"Code\").setRows(30).setColumns(80).setLineNumbers(true);" ], [ "EXTERNAL_CODE_FILE", "de.neemann.digital.core.element", "Keys", "public static final Key.KeyFile EXTERNAL_CODE_FILE = new Key.KeyFile(\"CodeFile\", new File(\"\"));" ], [ "SETTINGS_GHDL_PATH", "de.neemann.digital.core.element", "Keys", "public static final Key<File> SETTINGS_GHDL_PATH = new Key.KeyFile(\"ghdlPath\", new File(\"ghdl\")).setSecondary();" ], [ "GHDL_OPTIONS", "de.neemann.digital.core.element", "Keys", "public static final Key<String> GHDL_OPTIONS = new Key.LongString(\"ghdlOptions\", \"--std=08 --ieee=synopsys\").setRows(3).setColumns(30).setPanelId(\"Options\");" ], [ "IVERILOG_OPTIONS", "de.neemann.digital.core.element", "Keys", "public static final Key<String> IVERILOG_OPTIONS = new Key.LongString(\"iverilogOptions\", \"\").setRows(3).setColumns(30).setPanelId(\"Options\");" ], [ "SETTINGS_IVERILOG_PATH", "de.neemann.digital.core.element", "Keys", "public static final Key<File> SETTINGS_IVERILOG_PATH = new Key.KeyFile(\"iverilogPath\", new File(\"iverilog\")).setSecondary();" ], [ "CUSTOM_SHAPE", "de.neemann.digital.core.element", "Keys", "public static final Key<CustomShapeDescription> CUSTOM_SHAPE = new Key<>(\"customShape\", new CustomShapeDescription.Builder().build()).setSecondary().setDependsOn(SHAPE_TYPE, st -> st.equals(CustomCircuitShapeType.CUSTOM));" ], [ "PRELOAD_PROGRAM", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> PRELOAD_PROGRAM = new Key<>(\"preloadProgram\", false).setSecondary();" ], [ "BIG_ENDIAN", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> BIG_ENDIAN = new Key<>(\"bigEndian\", false).setSecondary().setDependsOn(AUTO_RELOAD_ROM);" ], [ "PROGRAM_TO_PRELOAD", "de.neemann.digital.core.element", "Keys", "public static final Key<File> PROGRAM_TO_PRELOAD = new Key.KeyFile(\"preloadProgramFile\", new File(\"\")).setSecondary().setDependsOn(PRELOAD_PROGRAM);" ], [ "BIG_ENDIAN_SETTING", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> BIG_ENDIAN_SETTING = new Key<>(\"bigEndianSetting\", false).setSecondary().useTranslationOf(BIG_ENDIAN).setDependsOn(PRELOAD_PROGRAM);" ], [ "WIDE_SHAPE", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> WIDE_SHAPE = new Key<>(\"wideShape\", false).setSecondary().allowGroupEdit();" ], [ "RECT_WIDTH", "de.neemann.digital.core.element", "Keys", "public static final Key.KeyInteger RECT_WIDTH = new Key.KeyInteger(\"RectWidth\", 3).setMin(2);" ], [ "RECT_HEIGHT", "de.neemann.digital.core.element", "Keys", "public static final Key.KeyInteger RECT_HEIGHT = new Key.KeyInteger(\"RectHeight\", 3).setMin(2);" ], [ "RECT_INSIDE", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> RECT_INSIDE = new Key<>(\"RectInside\", false).setSecondary();" ], [ "RECT_BOTTOM", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> RECT_BOTTOM = new Key<>(\"RectBottom\", false).setSecondary();" ], [ "RECT_RIGHT", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> RECT_RIGHT = new Key<>(\"RectRight\", false).setSecondary();" ], [ "MIDI_CHANNEL", "de.neemann.digital.core.element", "Keys", "public static final Key.KeyInteger MIDI_CHANNEL = new Key.KeyInteger(\"midiChannel\", 1).setMin(1).setMax(16);" ], [ "MIDI_INSTRUMENT", "de.neemann.digital.core.element", "Keys", "public static final Key<String> MIDI_INSTRUMENT = new Key<>(\"midiInstrument\", \"\");" ], [ "MIDI_PROG_CHANGE", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> MIDI_PROG_CHANGE = new Key<>(\"midiProgChange\", false);" ], [ "SETTINGS_TOOLCHAIN_CONFIG", "de.neemann.digital.core.element", "Keys", "public static final Key<File> SETTINGS_TOOLCHAIN_CONFIG = new Key.KeyFile(\"toolChainConfig\", new File(\"\")).setSecondary().setRequiresRestart();" ], [ "GENERIC", "de.neemann.digital.core.element", "Keys", "public static final Key<String> GENERIC = new Key.LongString(\"generic\").setLineNumbers(true).allowGroupEdit();" ], [ "GENERICLARGE", "de.neemann.digital.core.element", "Keys", "public static final Key<String> GENERICLARGE = new Key.LongString(\"generic\").setLineNumbers(true).setRows(20).allowGroupEdit();" ], [ "IS_GENERIC", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> IS_GENERIC = new Key<>(\"isGeneric\", false).setSecondary();" ], [ "SETTINGS_SHOW_TUTORIAL", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> SETTINGS_SHOW_TUTORIAL = new Key<>(\"showTutorial\", true).setSecondary();" ], [ "SETTINGS_WIRETOOLTIP", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> SETTINGS_WIRETOOLTIP = new Key<>(\"wireToolTips\", false);" ], [ "SWITCH_ACTS_AS_INPUT", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> SWITCH_ACTS_AS_INPUT = new Key<>(\"switchActsAsInput\", false).setSecondary();" ], [ "SNAP_TO_GRID", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> SNAP_TO_GRID = new Key<>(\"snapToGrid\", true).setSecondary();" ], [ "MIRROR", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> MIRROR = new Key<>(\"mirror\", false).allowGroupEdit().setSecondary();" ], [ "TESTDATA", "de.neemann.digital.core.element", "Keys", "public static final Key<TestCaseDescription> TESTDATA = new Key<>(\"Testdata\", TestCaseDescription::new);" ], [ "TRIGGER", "de.neemann.digital.core.element", "Keys", "public static final Key.KeyEnum<ScopeTrigger.Trigger> TRIGGER = new Key.KeyEnum<>(\"trigger\", ScopeTrigger.Trigger.both, ScopeTrigger.Trigger.values());" ], [ "PORT", "de.neemann.digital.core.element", "Keys", "public static final Key.KeyInteger PORT = new Key.KeyInteger(\"port\", 23).setMin(1).setMax((1 << 16) - 1);" ], [ "TELNET_ESCAPE", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> TELNET_ESCAPE = new Key<>(\"telnetEscape\", true).allowGroupEdit();" ], [ "SKIP_HDL", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> SKIP_HDL = new Key<>(\"skipHDL\", false).setSecondary();" ], [ "PREFIX", "de.neemann.digital.core.basic", "FanIn", "public static final String PREFIX = \"In_\";" ], [ "DESCRIPTION", "de.neemann.digital.core.basic", "NOr", "public static final ElementTypeDescription DESCRIPTION = new FanInDescription(NOr.class).addAttribute(Keys.WIDE_SHAPE);" ], [ "DESCRIPTION", "de.neemann.digital.core.basic", "And", "public static final ElementTypeDescription DESCRIPTION = new FanInDescription(And.class).addAttribute(Keys.WIDE_SHAPE);" ], [ "DESCRIPTION", "de.neemann.digital.core.basic", "XNOr", "public static final ElementTypeDescription DESCRIPTION = new FanInDescription(XNOr.class).addAttribute(Keys.WIDE_SHAPE);" ], [ "DESCRIPTION", "de.neemann.digital.core.basic", "XOr", "public static final ElementTypeDescription DESCRIPTION = new FanInDescription(XOr.class).addAttribute(Keys.WIDE_SHAPE);" ], [ "DESCRIPTION", "de.neemann.digital.core.basic", "Not", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Not.class, input(\"in\")).addAttribute(Keys.ROTATE).addAttribute(Keys.WIDE_SHAPE).addAttribute(Keys.BITS).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.basic", "NAnd", "public static final ElementTypeDescription DESCRIPTION = new FanInDescription(NAnd.class).addAttribute(Keys.WIDE_SHAPE);" ], [ "DESCRIPTION", "de.neemann.digital.core.basic", "Or", "public static final ElementTypeDescription DESCRIPTION = new FanInDescription(Or.class).addAttribute(Keys.WIDE_SHAPE);" ], [ "STARTED", "de.neemann.digital.core", "ModelEvent", "public static final ModelEvent STARTED = new ModelEvent(ModelEventType.STARTED);" ], [ "CLOSED", "de.neemann.digital.core", "ModelEvent", "public static final ModelEvent CLOSED = new ModelEvent(ModelEventType.CLOSED);" ], [ "POSTCLOSED", "de.neemann.digital.core", "ModelEvent", "public static final ModelEvent POSTCLOSED = new ModelEvent(ModelEventType.POSTCLOSED);" ], [ "STEP", "de.neemann.digital.core", "ModelEvent", "public static final ModelEvent STEP = new ModelEvent(ModelEventType.STEP);" ], [ "CHECKBURN", "de.neemann.digital.core", "ModelEvent", "public static final ModelEvent CHECKBURN = new ModelEvent(ModelEventType.CHECKBURN);" ], [ "MICROSTEP", "de.neemann.digital.core", "ModelEvent", "public static final ModelEvent MICROSTEP = new ModelEvent(ModelEventType.MICROSTEP);" ], [ "RUN_TO_BREAK", "de.neemann.digital.core", "ModelEvent", "public static final ModelEvent RUN_TO_BREAK = new ModelEvent(ModelEventType.RUN_TO_BREAK);" ], [ "RUN_TO_BREAK_TIMEOUT", "de.neemann.digital.core", "ModelEvent", "public static final ModelEvent RUN_TO_BREAK_TIMEOUT = new ModelEvent(ModelEventType.RUN_TO_BREAK_TIMEOUT);" ], [ "BREAK", "de.neemann.digital.core", "ModelEvent", "public static final ModelEvent BREAK = new ModelEvent(ModelEventType.BREAK);" ], [ "DESCRIPTION", "de.neemann.digital.core.switching", "FGPFET", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(FGPFET.class, input(\"G\")).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).addAttribute(Keys.BLOWN);" ], [ "DESCRIPTION", "de.neemann.digital.core.switching", "NFET", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(NFET.class, input(\"G\")).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.BITS).addAttribute(Keys.FET_UNIDIRECTIONAL).addAttribute(Keys.LABEL);" ], [ "DESCRIPTION", "de.neemann.digital.core.switching", "FGNFET", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(FGNFET.class, input(\"G\")).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).addAttribute(Keys.BLOWN);" ], [ "DESCRIPTION", "de.neemann.digital.core.switching", "PFET", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(PFET.class, input(\"G\")).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.BITS).addAttribute(Keys.FET_UNIDIRECTIONAL).addAttribute(Keys.LABEL);" ], [ "DESCRIPTION", "de.neemann.digital.core.switching", "TransGate", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(TransGate.class, input(\"S\"), input(\"~S\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS);" ], [ "DESCRIPTION", "de.neemann.digital.core.switching", "SwitchDT", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(SwitchDT.class).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).addAttribute(Keys.POLES);" ], [ "DESCRIPTION", "de.neemann.digital.core.switching", "Relay", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Relay.class, input(\"in1\"), input(\"in2\")).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).addAttribute(Keys.POLES).addAttribute(Keys.RELAY_NORMALLY_CLOSED);" ], [ "DESCRIPTION", "de.neemann.digital.core.switching", "RelayDT", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(RelayDT.class, input(\"in1\"), input(\"in2\")).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).addAttribute(Keys.POLES);" ], [ "DESCRIPTION", "de.neemann.digital.core.switching", "Switch", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Switch.class).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).addAttribute(Keys.POLES).addAttribute(Keys.CLOSED).addAttribute(Keys.SWITCH_ACTS_AS_INPUT);" ], [ "DESCRIPTION", "de.neemann.digital.core.switching", "Fuse", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Fuse.class).addAttribute(Keys.ROTATE).addAttribute(Keys.BLOWN);" ], [ "DESCRIPTION", "de.neemann.digital.core.wiring", "Reset", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"Reset\", Reset.class).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.INVERT_OUTPUT).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.wiring", "Stop", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Stop.class, input(\"stop\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.INVERTER_CONFIG);" ], [ "DESCRIPTION", "de.neemann.digital.core.wiring", "Decoder", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Decoder.class, input(\"sel\")).addAttribute(Keys.ROTATE).addAttribute(Keys.SELECTOR_BITS).addAttribute(Keys.FLIP_SEL_POSITON).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.wiring", "Delay", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Delay.class, input(\"in\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.DELAY_TIME);" ], [ "DESCRIPTION", "de.neemann.digital.core.wiring", "Driver", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Driver.class, input(\"in\"), input(\"sel\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.FLIP_SEL_POSITON).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.wiring", "DriverInvSel", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(DriverInvSel.class, input(\"in\"), input(\"sel\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.FLIP_SEL_POSITON).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.wiring", "PriorityEncoder", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(PriorityEncoder.class) {\n\n    @Override\n    public PinDescriptions getInputDescription(ElementAttributes elementAttributes) {\n        int inputs = 1 << elementAttributes.get(Keys.SELECTOR_BITS);\n        PinDescription[] names = new PinDescription[inputs];\n        for (int i = 0; i < inputs; i++) names[i] = input(\"in\" + i, Lang.get(\"elem_PriorityEncoder_input\", i));\n        return new PinDescriptions(names);\n    }\n}.addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.SELECTOR_BITS).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.wiring", "BusSplitter", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(BusSplitter.class, input(\"OE\")).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.BITS).addAttribute(Keys.SPLITTER_SPREADING);" ], [ "DESCRIPTION", "de.neemann.digital.core.wiring", "Splitter", "public static final ElementTypeDescription DESCRIPTION = new SplitterTypeDescription().addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.INPUT_SPLIT).addAttribute(Keys.OUTPUT_SPLIT).addAttribute(Keys.SPLITTER_SPREADING).setShortName(\"\").supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.wiring", "Multiplexer", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Multiplexer.class) {\n\n    @Override\n    public PinDescriptions getInputDescription(ElementAttributes elementAttributes) {\n        int size = 1 << elementAttributes.get(Keys.SELECTOR_BITS);\n        PinDescription[] names = new PinDescription[size + 1];\n        names[0] = input(\"sel\", Lang.get(\"elem_Multiplexer_pin_sel\"));\n        for (int i = 0; i < size; i++) names[i + 1] = input(\"in_\" + i, Lang.get(\"elem_Multiplexer_input\", i));\n        return new PinDescriptions(names);\n    }\n}.addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.SELECTOR_BITS).addAttribute(Keys.FLIP_SEL_POSITON).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.wiring", "BitSelector", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(BitSelector.class, input(\"in\"), input(\"sel\")).addAttribute(Keys.ROTATE).addAttribute(Keys.SELECTOR_BITS).addAttribute(Keys.FLIP_SEL_POSITON).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.wiring", "Break", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Break.class, input(\"brk\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.ENABLED).addAttribute(Keys.CYCLES);" ], [ "DESCRIPTION", "de.neemann.digital.core.wiring", "Clock", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"Clock\", Clock.class).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.RUN_AT_REAL_TIME).addAttribute(Keys.FREQUENCY).addAttribute(Keys.PINNUMBER).addAttribute(Keys.IN_OUT_SMALL).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.wiring", "AsyncSeq", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(AsyncSeq.class).addAttribute(Keys.RUN_AT_REAL_TIME).addAttribute(Keys.FREQUENCY);" ], [ "DESCRIPTION", "de.neemann.digital.core.wiring", "Demultiplexer", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Demultiplexer.class, input(\"sel\"), input(\"in\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.SELECTOR_BITS).addAttribute(Keys.FLIP_SEL_POSITON).addAttribute(Keys.DEFAULT).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.flipflops", "FlipflopDAsync", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"D_FF_AS\", FlipflopDAsync.class, input(\"Set\"), input(\"D\"), input(\"C\").setClock(), input(\"Clr\")).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).addAttribute(Keys.DEFAULT).addAttribute(Keys.INVERTER_CONFIG).addAttribute(Keys.VALUE_IS_PROBE).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.flipflops", "FlipflopD", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"D_FF\", FlipflopD.class, input(\"D\"), input(\"C\").setClock()).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).addAttribute(Keys.DEFAULT).addAttribute(Keys.INVERTER_CONFIG).addAttribute(Keys.VALUE_IS_PROBE).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.flipflops", "FlipflopRSAsync", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"RS_FF_AS\", FlipflopRSAsync.class, input(\"S\"), input(\"R\")).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.LABEL).addAttribute(Keys.DEFAULT).addAttribute(Keys.INVERTER_CONFIG).addAttribute(Keys.VALUE_IS_PROBE);" ], [ "DESCRIPTION", "de.neemann.digital.core.flipflops", "FlipflopT", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"T_FF\", FlipflopT.class) {\n\n    @Override\n    public PinDescriptions getInputDescription(ElementAttributes elementAttributes) throws NodeException {\n        if (elementAttributes.get(Keys.WITH_ENABLE))\n            return new PinDescriptions(input(\"T\"), input(\"C\").setClock()).setLangKey(getPinLangKey());\n        else\n            return new PinDescriptions(input(\"C\").setClock()).setLangKey(getPinLangKey());\n    }\n}.addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.LABEL).addAttribute(Keys.WITH_ENABLE).addAttribute(Keys.DEFAULT).addAttribute(Keys.INVERTER_CONFIG).addAttribute(Keys.VALUE_IS_PROBE);" ], [ "DESCRIPTION", "de.neemann.digital.core.flipflops", "FlipflopJKAsync", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"JK_FF_AS\", FlipflopJKAsync.class, input(\"Set\"), input(\"J\"), input(\"C\").setClock(), input(\"K\"), input(\"Clr\")).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.LABEL).addAttribute(Keys.DEFAULT).addAttribute(Keys.INVERTER_CONFIG).addAttribute(Keys.VALUE_IS_PROBE).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.flipflops", "FlipflopJK", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"JK_FF\", FlipflopJK.class, input(\"J\"), input(\"C\").setClock(), input(\"K\")).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.LABEL).addAttribute(Keys.DEFAULT).addAttribute(Keys.INVERTER_CONFIG).addAttribute(Keys.VALUE_IS_PROBE).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.flipflops", "Monoflop", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Monoflop.class, input(\"C\").setClock(), input(\"R\")).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.LABEL).addAttribute(Keys.DEFAULT).addAttribute(Keys.MONOFLOP_DELAY).addAttribute(Keys.INVERTER_CONFIG).addAttribute(Keys.VALUE_IS_PROBE);" ], [ "DESCRIPTION", "de.neemann.digital.core.flipflops", "FlipflopRS", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"RS_FF\", FlipflopRS.class, input(\"S\"), input(\"C\").setClock(), input(\"R\")).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.LABEL).addAttribute(Keys.DEFAULT).addAttribute(Keys.INVERTER_CONFIG).addAttribute(Keys.VALUE_IS_PROBE);" ], [ "DESCRIPTION", "de.neemann.digital.core.arithmetic", "BarrelShifter", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(BarrelShifter.class, input(\"in\"), input(\"shift\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.BITS).addAttribute(Keys.BARREL_SIGNED).addAttribute(Keys.DIRECTION).addAttribute(Keys.BARREL_SHIFTER_MODE);" ], [ "DESCRIPTION", "de.neemann.digital.core.arithmetic", "Mul", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Mul.class, input(\"a\"), input(\"b\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.SIGNED).addAttribute(Keys.BITS).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.arithmetic", "Neg", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Neg.class, input(\"in\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.arithmetic", "BitExtender", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(BitExtender.class, input(\"in\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.INPUT_BITS).addAttribute(Keys.OUTPUT_BITS).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.arithmetic", "Add", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Add.class, input(\"a\"), input(\"b\"), input(\"c_i\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.BITS).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.arithmetic", "Div", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Div.class, input(\"a\"), input(\"b\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.BITS).addAttribute(Keys.SIGNED).addAttribute(Keys.REMAINDER_POSITIVE);" ], [ "DESCRIPTION", "de.neemann.digital.core.arithmetic", "PRNG", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(PRNG.class, input(\"S\"), input(\"se\"), input(\"ne\"), input(\"C\").setClock()).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.LABEL);" ], [ "DESCRIPTION", "de.neemann.digital.core.arithmetic", "Sub", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Sub.class, input(\"a\"), input(\"b\"), input(\"c_i\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.BITS).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.arithmetic", "Comparator", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Comparator.class, input(\"a\"), input(\"b\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.BITS).addAttribute(Keys.SIGNED).setShortName(\"\").supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.arithmetic", "BitCount", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(BitCount.class, input(\"in\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS);" ], [ "EMPTY_LIST", "de.neemann.digital.core", "ObservableValues", "public static final ObservableValues EMPTY_LIST = new ObservableValues();" ], [ "DEFAULT_FORMATTER", "de.neemann.digital.core", "IntFormat", "public static final ValueFormatter DEFAULT_FORMATTER = ValueFormatterDefault.INSTANCE;" ], [ "HEX_FORMATTER", "de.neemann.digital.core", "IntFormat", "public static final ValueFormatter HEX_FORMATTER = ValueFormatterHex.INSTANCE;" ], [ "DESCRIPTION", "de.neemann.digital.core.extern", "External", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(External.class) {\n\n    @Override\n    public PinDescriptions getInputDescription(ElementAttributes elementAttributes) {\n        return new PortDefinition(elementAttributes.get(Keys.EXTERNAL_INPUTS)).getPinDescriptions(PinDescription.Direction.input);\n    }\n\n    @Override\n    public PinDescriptions getOutputDescriptions(ElementAttributes elementAttributes) {\n        return new PortDefinition(elementAttributes.get(Keys.EXTERNAL_OUTPUTS)).getPinDescriptions(PinDescription.Direction.output);\n    }\n}.addAttribute(Keys.LABEL).addAttribute(Keys.WIDTH).addAttribute(Keys.EXTERNAL_INPUTS).addAttribute(Keys.EXTERNAL_OUTPUTS).addAttribute(Keys.EXTERNAL_CODE).addAttribute(Keys.APPLICATION_TYPE).addAttribute(Keys.GHDL_OPTIONS).addAttribute(Keys.IVERILOG_OPTIONS).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.extern", "ExternalFile", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(ExternalFile.class) {\n\n    @Override\n    public PinDescriptions getInputDescription(ElementAttributes elementAttributes) {\n        return new PortDefinition(elementAttributes.get(Keys.EXTERNAL_INPUTS)).getPinDescriptions(PinDescription.Direction.input);\n    }\n\n    @Override\n    public PinDescriptions getOutputDescriptions(ElementAttributes elementAttributes) {\n        return new PortDefinition(elementAttributes.get(Keys.EXTERNAL_OUTPUTS)).getPinDescriptions(PinDescription.Direction.output);\n    }\n}.addAttribute(Keys.LABEL).addAttribute(Keys.WIDTH).addAttribute(Keys.EXTERNAL_INPUTS).addAttribute(Keys.EXTERNAL_OUTPUTS).addAttribute(Keys.EXTERNAL_CODE_FILE).addAttribute(Keys.APPLICATION_TYPE).addAttribute(Keys.GHDL_OPTIONS).addAttribute(Keys.IVERILOG_OPTIONS).supportsHDL();" ], [ "DEFAULT_RAD", "de.neemann.digital.fsm", "State", "static final int DEFAULT_RAD = 70;" ], [ "INSTANCE", "de.neemann.digital.lang", "Lang", "static final Lang INSTANCE = new Lang();" ], [ "INSTANCE", "de.neemann.digital.lang", "InstanceHolder", "static final Lang INSTANCE = new Lang();" ], [ "DESCRIPTION", "de.neemann.digital.testing", "TestCaseElement", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"Testcase\", TestCaseElement.class).addAttribute(Keys.LABEL).addAttribute(Keys.TESTDATA).addAttribute(Keys.ENABLED).supportsHDL();" ], [ "STATENAMES", "de.neemann.digital.analyse", "TruthTableTableModel", "public static final String[] STATENAMES = new String[] { \"0\", \"1\", \"x\" };" ], [ "ONE", "de.neemann.digital.analyse.expression", "Constant", "public static final Constant ONE = new Constant(true);" ], [ "ZERO", "de.neemann.digital.analyse.expression", "Constant", "public static final Constant ZERO = new Constant(false);" ], [ "PRIMARY", "de.neemann.digital.gui.components", "EditorPanel", "public static final String PRIMARY = \"primary\";" ], [ "SECONDARY", "de.neemann.digital.gui.components", "EditorPanel", "public static final String SECONDARY = \"secondary\";" ], [ "INSTANCE", "de.neemann.digital.gui.components", "EditorFactory", "static final EditorFactory INSTANCE = new EditorFactory();" ], [ "MAX_TERMINAL_STORED", "de.neemann.digital.gui.components.terminal", "ConsoleTerminal", "public static final int MAX_TERMINAL_STORED = 2048;" ], [ "DESCRIPTION", "de.neemann.digital.gui.components.terminal", "Terminal", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Terminal.class, input(\"D\"), input(\"C\").setClock(), input(\"en\")).addAttribute(Keys.TERM_WIDTH).addAttribute(Keys.TERM_HEIGHT).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL);" ], [ "DESCRIPTION", "de.neemann.digital.gui.components.terminal", "Keyboard", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Keyboard.class, input(\"C\").setClock(), input(\"en\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.INVERTER_CONFIG);" ], [ "FAILED_COLOR", "de.neemann.digital.gui.components.testing", "ValueTableDialog", "static final Color FAILED_COLOR = new Color(255, 200, 200);" ], [ "PASSED_COLOR", "de.neemann.digital.gui.components.testing", "ValueTableDialog", "static final Color PASSED_COLOR = new Color(200, 255, 200);" ], [ "ICON_DELETE", "de.neemann.digital.gui.components", "CircuitComponent", "public static final Icon ICON_DELETE = IconCreator.create(\"delete.png\");" ], [ "ICON_COPY", "de.neemann.digital.gui.components", "CircuitComponent", "public static final Icon ICON_COPY = IconCreator.create(\"edit-copy.png\");" ], [ "DESCRIPTION", "de.neemann.digital.gui.components.graphics", "VGA", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(VGA.class, input(\"R\"), input(\"G\"), input(\"B\"), input(\"H\"), input(\"V\"), input(\"C\").setClock()).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL);" ], [ "DESCRIPTION", "de.neemann.digital.gui.components.graphics", "GraphicCard", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(GraphicCard.class, input(\"A\"), input(\"str\"), input(\"C\").setClock(), input(\"ld\"), input(\"B\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).addAttribute(Keys.GRAPHIC_WIDTH).addAttribute(Keys.GRAPHIC_HEIGHT);" ], [ "DESCRIPTION", "de.neemann.digital.gui.components.graphics", "LedMatrix", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(LedMatrix.class, input(\"r-data\"), input(\"c-addr\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.ROW_DATA_BITS).addAttribute(Keys.COL_ADDR_BITS).addAttribute(Keys.COLOR).addAttribute(Keys.LED_PERSISTENCE);" ], [ "DESCRIPTION", "de.neemann.digital.gui.components.data", "ScopeTrigger", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(ScopeTrigger.class, input(\"T\").setClock()).addAttribute(Keys.LABEL).addAttribute(Keys.TRIGGER).addAttribute(Keys.MAX_STEP_COUNT);" ], [ "DATADESCRIPTION", "de.neemann.digital.gui.components.data", "DummyElement", "public static final ElementTypeDescription DATADESCRIPTION = new ElementTypeDescription(\"Data\", DummyElement.class).addAttribute(Keys.MICRO_STEP).addAttribute(Keys.MAX_STEP_COUNT).addAttribute(Keys.SNAP_TO_GRID);" ], [ "TEXTDESCRIPTION", "de.neemann.digital.gui.components.data", "DummyElement", "public static final ElementTypeDescription TEXTDESCRIPTION = new ElementTypeDescription(\"Text\", DummyElement.class).addAttribute(Keys.DESCRIPTION).addAttribute(Keys.ROTATE).addAttribute(Keys.TEXT_ORIENTATION).addAttribute(Keys.FONT_SIZE).addAttribute(Keys.SNAP_TO_GRID);" ], [ "RECTDESCRIPTION", "de.neemann.digital.gui.components.data", "DummyElement", "public static final ElementTypeDescription RECTDESCRIPTION = new ElementTypeDescription(\"Rectangle\", DummyElement.class).addAttribute(Keys.LABEL).addAttribute(Keys.RECT_WIDTH).addAttribute(Keys.RECT_HEIGHT).addAttribute(Keys.RECT_INSIDE).addAttribute(Keys.RECT_BOTTOM).addAttribute(Keys.RECT_RIGHT).addAttribute(Keys.FONT_SIZE).addAttribute(Keys.SNAP_TO_GRID);" ], [ "LEFT", "de.neemann.digital.gui.components", "TextLineNumber", "public final static float LEFT = 0.0f;" ], [ "CENTER", "de.neemann.digital.gui.components", "TextLineNumber", "public final static float CENTER = 0.5f;" ], [ "RIGHT", "de.neemann.digital.gui.components", "TextLineNumber", "public final static float RIGHT = 1.0f;" ], [ "INSTANCE", "de.neemann.digital.gui", "Settings", "static final Settings INSTANCE = new Settings();" ], [ "INSTANCE", "de.neemann.digital.gui", "SettingsHolder", "static final Settings INSTANCE = new Settings();" ], [ "BASE_FILE_KEY", "de.neemann.digital.hdl.hgs", "Context", "public static final String BASE_FILE_KEY = \"baseFile\";" ], [ "DESCRIPTION", "de.neemann.digital.draw.library", "GenericCode", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(GenericCode.class).addAttribute(Keys.GENERICLARGE).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.draw.library", "GenericInitCode", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(GenericInitCode.class).addAttribute(Keys.LABEL).addAttribute(Keys.ENABLED).addAttribute(Keys.GENERIC).supportsHDL();" ], [ "GEN_ARGS_KEY", "de.neemann.digital.draw.library", "ResolveGenerics", "public static final String GEN_ARGS_KEY = \"genArgs\";" ], [ "HEIGHT", "de.neemann.digital.draw.shapes", "ButtonShape", "protected static final int HEIGHT = OUT_SIZE / 2;" ], [ "SIZE2", "de.neemann.digital.draw.shapes", "GenericShape", "public static final int SIZE2 = 10;" ], [ "SIZE", "de.neemann.digital.draw.shapes", "GenericShape", "public static final int SIZE = SIZE2 * 2;" ], [ "CIRC", "de.neemann.digital.draw.shapes", "DILShape", "static final float CIRC = (float) (4 * (Math.sqrt(2) - 1) / 3);" ], [ "DOWNSHIFT", "de.neemann.digital.draw.shapes", "VDDShape", "static final int DOWNSHIFT = 4;" ], [ "CHARGED_GATE", "de.neemann.digital.draw.shapes", "FGFETShapeN", "static final Style CHARGED_GATE = Style.NORMAL.deriveStyle(6, false, Color.RED);" ], [ "OUT_SIZE", "de.neemann.digital.draw.shapes", "OutputShape", "public static final int OUT_SIZE = GenericShape.SIZE * 3 / 4;" ], [ "LATEX_RAD", "de.neemann.digital.draw.shapes", "OutputShape", "static final Vector LATEX_RAD = new Vector(Style.MAXLINETHICK, Style.MAXLINETHICK);" ], [ "WIDTH2", "de.neemann.digital.draw.shapes", "PullDownShape", "public static final int WIDTH2 = SIZE2 - 3;" ], [ "HEIGHT", "de.neemann.digital.draw.shapes", "PullDownShape", "public static final int HEIGHT = SIZE + SIZE / 3;" ], [ "HEIGHT", "de.neemann.digital.draw.shapes", "SevenShape", "static final int HEIGHT = 7;" ], [ "FRAME", "de.neemann.digital.draw.shapes", "SevenShape", "public static final Polygon FRAME = Polygon.createFromPath(\"m -10,1 L 70,1 70,139 -10,139 z\");" ], [ "DESCRIPTION", "de.neemann.digital.draw.elements", "Tunnel", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Tunnel.class, input(\"in\")).addAttribute(Keys.ROTATE).addAttribute(Keys.NETNAME).supportsHDL();" ], [ "HIGH_CONTRAST", "de.neemann.digital.draw.graphics", "SVGSettings", "static final Key<Boolean> HIGH_CONTRAST = new Key<>(\"SVG_highContrast\", false);" ], [ "MONOCHROME", "de.neemann.digital.draw.graphics", "SVGSettings", "static final Key<Boolean> MONOCHROME = new Key<>(\"SVG_monochrome\", false);" ], [ "SMALL_IO", "de.neemann.digital.draw.graphics", "SVGSettings", "static final Key<Boolean> SMALL_IO = new Key<>(\"SVG_smallIO\", false);" ], [ "NO_PIN_MARKER", "de.neemann.digital.draw.graphics", "SVGSettings", "static final Key<Boolean> NO_PIN_MARKER = new Key<>(\"SVG_noPinMarker\", false);" ], [ "THINNER_LINES", "de.neemann.digital.draw.graphics", "SVGSettings", "static final Key<Boolean> THINNER_LINES = new Key<>(\"SVG_thinnerLines\", false);" ], [ "HIDE_TEST", "de.neemann.digital.draw.graphics", "SVGSettings", "static final Key<Boolean> HIDE_TEST = new Key<>(\"SVG_hideTest\", false);" ], [ "NO_SHAPE_FILLING", "de.neemann.digital.draw.graphics", "SVGSettings", "static final Key<Boolean> NO_SHAPE_FILLING = new Key<>(\"SVG_noShapeFilling\", false);" ], [ "LATEX", "de.neemann.digital.draw.graphics", "SVGSettings", "static final Key<Boolean> LATEX = new Key<>(\"SVG_LaTeX\", false);" ], [ "PINS_IN_MATH_MODE", "de.neemann.digital.draw.graphics", "SVGSettings", "static final Key<Boolean> PINS_IN_MATH_MODE = new Key<>(\"SVG_pinsInMathMode\", false).setDependsOn(LATEX);" ], [ "INSTANCE", "de.neemann.digital.draw.graphics", "SVGSettings", "static final SVGSettings INSTANCE = new SVGSettings();" ], [ "INSTANCE", "de.neemann.digital.draw.graphics", "SettingsHolder", "static final SVGSettings INSTANCE = new SVGSettings();" ], [ "COLOR_SCHEME", "de.neemann.digital.draw.graphics", "ColorScheme", "public static final Key<ColorSchemes> COLOR_SCHEME = new Key.KeyEnum<>(\"colorScheme\", ColorSchemes.DEFAULT, ColorSchemes.values()).setRequiresRepaint();" ], [ "CUSTOM_COLOR_SCHEME", "de.neemann.digital.draw.graphics", "ColorScheme", "public static final Key<ColorScheme> CUSTOM_COLOR_SCHEME = new Key<>(\"customColorScheme\", DEFAULT_SCHEME).setDependsOn(COLOR_SCHEME, o -> o.equals(ColorSchemes.CUSTOM)).setRequiresRepaint();" ], [ "MAXLINETHICK", "de.neemann.digital.draw.graphics", "Style", "public static final int MAXLINETHICK = 4;" ], [ "NORMAL", "de.neemann.digital.draw.graphics", "Style", "public static final Style NORMAL = new Builder().build();" ], [ "DISABLED", "de.neemann.digital.draw.graphics", "Style", "public static final Style DISABLED = new Builder().setColor(ColorKey.DISABLED).build();" ], [ "INOUT", "de.neemann.digital.draw.graphics", "Style", "public static final Style INOUT = new Builder(NORMAL).setFontStyle(Font.ITALIC).build();" ], [ "FAILED", "de.neemann.digital.draw.graphics", "Style", "public static final Style FAILED = new Builder(NORMAL).setColor(ColorKey.ERROR).build();" ], [ "PASS", "de.neemann.digital.draw.graphics", "Style", "public static final Style PASS = new Builder(NORMAL).setColor(ColorKey.PASSED).build();" ], [ "NORMAL_TEXT", "de.neemann.digital.draw.graphics", "Style", "public static final Style NORMAL_TEXT = new Builder(NORMAL).setMattersForSize(true).build();" ], [ "THIN", "de.neemann.digital.draw.graphics", "Style", "public static final Style THIN = new Builder(NORMAL).setThickness(LINETHIN).build();" ], [ "THIN_FILLED", "de.neemann.digital.draw.graphics", "Style", "public static final Style THIN_FILLED = new Builder(NORMAL).setThickness(LINETHIN).setFilled(true).build();" ], [ "THICK", "de.neemann.digital.draw.graphics", "Style", "public static final Style THICK = new Builder(NORMAL).setThickness(LINETHICK + LINETHIN).build();" ], [ "WIRE", "de.neemann.digital.draw.graphics", "Style", "public static final Style WIRE = new Builder().setThickness(WIRETHICK).setFilled(true).setColor(ColorKey.WIRE).setEndCap(BasicStroke.CAP_ROUND).build();" ], [ "WIRE_LOW", "de.neemann.digital.draw.graphics", "Style", "public static final Style WIRE_LOW = new Builder(WIRE).setColor(ColorKey.WIRE_LOW).build();" ], [ "WIRE_HIGH", "de.neemann.digital.draw.graphics", "Style", "public static final Style WIRE_HIGH = new Builder(WIRE).setColor(ColorKey.WIRE_HIGH).build();" ], [ "WIRE_HIGHZ", "de.neemann.digital.draw.graphics", "Style", "public static final Style WIRE_HIGHZ = new Builder(WIRE).setColor(ColorKey.WIRE_Z).build();" ], [ "WIRE_OUT", "de.neemann.digital.draw.graphics", "Style", "public static final Style WIRE_OUT = new Builder(WIRE).setColor(ColorKey.WIRE_OUT).build();" ], [ "FILLED", "de.neemann.digital.draw.graphics", "Style", "public static final Style FILLED = new Builder().setFilled(true).build();" ], [ "DASH", "de.neemann.digital.draw.graphics", "Style", "public static final Style DASH = new Builder().setThickness(LINEDASH).setDash(new float[] { 4, 4 }).build();" ], [ "SHAPE_PIN", "de.neemann.digital.draw.graphics", "Style", "public static final Style SHAPE_PIN = new Builder().setThickness(LINETHIN).setColor(ColorKey.PINS).setFontSize(18).build();" ], [ "SHAPE_SPLITTER", "de.neemann.digital.draw.graphics", "Style", "public static final Style SHAPE_SPLITTER = new Builder(SHAPE_PIN).setFontSize(12).build();" ], [ "WIRE_VALUE", "de.neemann.digital.draw.graphics", "Style", "public static final Style WIRE_VALUE = new Builder(SHAPE_SPLITTER).setColor(ColorKey.WIRE_VALUE).build();" ], [ "WIRE_BITS", "de.neemann.digital.draw.graphics", "Style", "public static final Style WIRE_BITS = new Builder(SHAPE_SPLITTER).setColor(ColorKey.WIRE).build();" ], [ "HIGHLIGHT", "de.neemann.digital.draw.graphics", "Style", "public static final Style HIGHLIGHT = new Builder(NORMAL).setColor(ColorKey.HIGHLIGHT).setEndCap(BasicStroke.CAP_ROUND).build();" ], [ "ERROR", "de.neemann.digital.draw.graphics", "Style", "public static final Style ERROR = new Builder(NORMAL).setColor(ColorKey.ERROR).setEndCap(BasicStroke.CAP_ROUND).build();" ], [ "BLANK", "de.neemann.digital.draw.graphics.text.text", "Blank", "public static final Blank BLANK = new Blank();" ], [ "LOOK_AT_ALIAS", "de.neemann.digital.toolchain", "Configuration", "static final String LOOK_AT_ALIAS = \"lookAt\";" ], [ "REF_ALIAS", "de.neemann.digital.toolchain", "Configuration", "static final String REF_ALIAS = \"ref\";" ] ],
  "tokensMethodJavadocValues" : [ ],
  "tokensMethodArguments" : [ [ "pinMap", "de.neemann.digital.builder", "PinMap" ] ],
  "tokensMethodVariablesNonPrivateNonStaticNonVoidMethods" : [ [ "hashCode", "java.lang", "Object", "public native int hashCode()" ], [ "addCombinatorial", "de.neemann.digital.builder", "BuilderInterface", "public abstract T addCombinatorial(String arg0, Expression arg1) throws BuilderException" ], [ "addSequential", "de.neemann.digital.builder.Gal16v8", "BuilderCollectorGAL", "public BuilderCollector addSequential(String name, Expression expression) throws BuilderException" ], [ "getRegistered", "de.neemann.digital.builder.Gal16v8", "BuilderCollectorGAL", "public Map<String, Expression> getRegistered()" ], [ "addSequential", "de.neemann.digital.builder", "BuilderInterface", "public abstract T addSequential(String arg0, Expression arg1) throws BuilderException" ], [ "toString", "java.lang", "Object", "public String toString()" ], [ "getClass", "java.lang", "Object", "public final native Class<? extends Object> getClass()" ], [ "clone", "java.lang", "Object", "protected native Object clone() throws CloneNotSupportedException" ], [ "getInputs", "de.neemann.digital.builder.Gal16v8", "BuilderCollectorGAL", "public ArrayList<String> getInputs()" ], [ "getOutputs", "de.neemann.digital.builder.Gal16v8", "BuilderCollectorGAL", "public ArrayList<String> getOutputs()" ], [ "getCombinatorial", "de.neemann.digital.builder.Gal16v8", "BuilderCollectorGAL", "public Map<String, Expression> getCombinatorial()" ], [ "addCombinatorial", "de.neemann.digital.builder.Gal16v8", "BuilderCollectorGAL", "public BuilderCollector addCombinatorial(String name, Expression expression) throws BuilderException" ], [ "equals", "java.lang", "Object", "public boolean equals(Object arg0)" ], [ "setAvailInputs", "de.neemann.digital.builder", "PinMap", "public transient PinMap setAvailInputs(int[] arg0)" ], [ "getInputFor", "de.neemann.digital.builder", "PinMap", "public int getInputFor(String arg0) throws PinMapException" ], [ "setClockPin", "de.neemann.digital.builder", "PinMap", "public PinMap setClockPin(int arg0)" ], [ "setAvailOutputs", "de.neemann.digital.builder", "PinMap", "public transient PinMap setAvailOutputs(int[] arg0)" ], [ "parseString", "de.neemann.digital.builder", "PinMap", "public PinMap parseString(String arg0) throws PinMapException" ], [ "addAll", "de.neemann.digital.builder", "PinMap", "public PinMap addAll(Map<String, String> arg0) throws PinMapException" ], [ "toString", "de.neemann.digital.builder", "PinMap", "public String toString()" ], [ "assignPin", "de.neemann.digital.builder", "PinMap", "public PinMap assignPin(String arg0, int arg1) throws PinMapException" ], [ "getClockPin", "de.neemann.digital.builder", "PinMap", "public int getClockPin()" ], [ "setAvailBidirectional", "de.neemann.digital.builder", "PinMap", "public transient PinMap setAvailBidirectional(int[] arg0)" ], [ "getOutputFor", "de.neemann.digital.builder", "PinMap", "public int getOutputFor(String arg0) throws PinMapException" ], [ "isSimpleAlias", "de.neemann.digital.builder", "PinMap", "public boolean isSimpleAlias(String arg0, Expression arg1, HashSet<String> arg2)" ], [ "isOutputAssigned", "de.neemann.digital.builder", "PinMap", "public int isOutputAssigned(String arg0) throws PinMapException" ] ],
  "tokensMethodVariablesNonPrivateNonStaticAttributes" : [ ],
  "tokensOracleVariablesNonPrivateNonStaticNonVoidMethods" : [ ],
  "tokensOracleVariablesNonPrivateNonStaticAttributes" : [ ]
}, {
  "id" : 26710,
  "oracle" : "name == null;",
  "oracleType" : "EXCEPT_POST",
  "projectName" : "Digital",
  "packageName" : "de.neemann.digital.builder.Gal16v8",
  "className" : "BuilderCollectorGAL",
  "javadocTag" : "",
  "methodJavadoc" : "",
  "methodSourceCode" : "public BuilderCollector addCombinatorial(String name, Expression expression) throws BuilderException{\n    checkOpen();\n    return super.addCombinatorial(name, expression);\n}",
  "classJavadoc" : "/**\n * Used to avoid a double cell allocation if the output of a ff is used as a autput of the state machine.\n * This is the case if a Moore machine is build where the state equals the output.\n * Sometimes this kind of state machines is called a Medwedew machine.\n */",
  "classSourceCode" : "/*\n * Copyright (c) 2019 Helmut Neemann.\n * Use of this source code is governed by the GPL v3 license\n * that can be found in the LICENSE file.\n */\npackage de.neemann.digital.builder.Gal16v8;\n\nimport de.neemann.digital.analyse.expression.Expression;\nimport de.neemann.digital.builder.BuilderCollector;\nimport de.neemann.digital.builder.BuilderException;\nimport de.neemann.digital.builder.PinMap;\n\nimport java.util.ArrayList;\nimport java.util.HashSet;\nimport java.util.Map;\n\n/**\n * Used to avoid a double cell allocation if the output of a ff is used as a autput of the state machine.\n * This is the case if a Moore machine is build where the state equals the output.\n * Sometimes this kind of state machines is called a Medwedew machine.\n */\npublic class BuilderCollectorGAL extends BuilderCollector {\n    private final PinMap pinMap;\n    private HashSet<String> sequentialVars;\n    private boolean doubleCellUsageFixed = false;\n\n    /**\n     * Creates a new instance\n     *\n     * @param pinMap the used pinMap. Is required to handle aliases correctly\n     */\n    public BuilderCollectorGAL(PinMap pinMap) {\n        this.pinMap = pinMap;\n        sequentialVars = new HashSet<>();\n    }\n\n    @Override\n    public BuilderCollector addCombinatorial(String name, Expression expression) throws BuilderException {\n        checkOpen();\n        return super.addCombinatorial(name, expression);\n    }\n\n    @Override\n    public BuilderCollector addSequential(String name, Expression expression) throws BuilderException {\n        checkOpen();\n        sequentialVars.add(name);\n        return super.addSequential(name, expression);\n    }\n\n    private void checkOpen() {\n        if (doubleCellUsageFixed)\n            throw new RuntimeException(\"wrong BuilderCollectorGAL usage!\");\n    }\n\n    private void fixDoubleCellUsage() {\n        if (!doubleCellUsageFixed) {\n\n            super.getCombinatorial().entrySet().removeIf(c -> {\n                if (pinMap.isSimpleAlias(c.getKey(), c.getValue(), sequentialVars)) {\n                    removeOutput(c.getKey());\n                    return true;\n                }\n                return false;\n            });\n\n            doubleCellUsageFixed = true;\n        }\n    }\n\n    @Override\n    public ArrayList<String> getOutputs() {\n        fixDoubleCellUsage();\n        return super.getOutputs();\n    }\n\n    @Override\n    public ArrayList<String> getInputs() {\n        fixDoubleCellUsage();\n        return super.getInputs();\n    }\n\n    @Override\n    public Map<String, Expression> getCombinatorial() {\n        fixDoubleCellUsage();\n        return super.getCombinatorial();\n    }\n\n    @Override\n    public Map<String, Expression> getRegistered() {\n        fixDoubleCellUsage();\n        return super.getRegistered();\n    }\n}\n",
  "tokensGeneralGrammar" : [ "null", "true", "false", ",", ".", ":", ";", "?", "(", ")", "jdVar", "stream", "Arrays", "allMatch", "noneMatch", "anyMatch", "~", ">>", "<<", ">>>", "|", "&", "^", "+", "-", "/", "*", "%", "&&", "||", ">=", "<=", ">", "<", "==", "!=", "instanceof", "class", "methodResultID", "this" ],
  "tokensGeneralValuesGlobalDictionary" : [ [ "0", "int" ], [ "1", "int" ], [ "-1", "int" ], [ "0.0", "double" ], [ "1.0", "double" ], [ "-1.0", "double" ], [ "\"\"", "String" ], [ "\" \"", "String" ] ],
  "tokensProjectClasses" : [ [ "CLI", "de.neemann" ], [ "Mouse", "de.neemann.gui" ], [ "LineBreaker", "de.neemann.gui" ], [ "IconCreator", "de.neemann.gui" ], [ "ConfirmDialogBuilder", "de.neemann.gui" ], [ "Resources", "de.neemann.gui.language" ], [ "Bundle", "de.neemann.gui.language" ], [ "Language", "de.neemann.gui.language" ], [ "ToolTipAction", "de.neemann.gui" ], [ "MyFileChooser", "de.neemann.gui" ], [ "ClosingWindowListener", "de.neemann.gui" ], [ "ErrorMessage", "de.neemann.gui" ], [ "WindowSizeStorage", "de.neemann.gui" ], [ "Screen", "de.neemann.gui" ], [ "ToolTipProvider", "de.neemann.gui" ], [ "InfoDialog", "de.neemann.gui" ], [ "ValueFormatter", "de.neemann.digital.core" ], [ "ModelStateObserver", "de.neemann.digital.core" ], [ "PullDown", "de.neemann.digital.core.pld" ], [ "Diode", "de.neemann.digital.core.pld" ], [ "DiodeBackward", "de.neemann.digital.core.pld" ], [ "PullUp", "de.neemann.digital.core.pld" ], [ "DiodeForward", "de.neemann.digital.core.pld" ], [ "Node", "de.neemann.digital.core" ], [ "RAMSinglePort", "de.neemann.digital.core.memory" ], [ "ROMDualPort", "de.neemann.digital.core.memory" ], [ "RAMDualAccess", "de.neemann.digital.core.memory" ], [ "ByteArrayFromValueArray", "de.neemann.digital.core.memory.importer" ], [ "Importer", "de.neemann.digital.core.memory.importer" ], [ "LogisimReader", "de.neemann.digital.core.memory.importer" ], [ "DataFieldValueArray", "de.neemann.digital.core.memory.importer" ], [ "ByteArrayReader", "de.neemann.digital.core.memory.importer" ], [ "ValueArrayReader", "de.neemann.digital.core.memory.importer" ], [ "IntelHexReader", "de.neemann.digital.core.memory.importer" ], [ "ValueArray", "de.neemann.digital.core.memory.importer" ], [ "BinReader", "de.neemann.digital.core.memory.importer" ], [ "ByteArray", "de.neemann.digital.core.memory.importer" ], [ "MultiValueArray", "de.neemann.digital.core.memory.importer" ], [ "CounterPreset", "de.neemann.digital.core.memory" ], [ "RAMDualPort", "de.neemann.digital.core.memory" ], [ "Register", "de.neemann.digital.core.memory" ], [ "LookUpTable", "de.neemann.digital.core.memory" ], [ "BlockRAMDualPort", "de.neemann.digital.core.memory" ], [ "Counter", "de.neemann.digital.core.memory" ], [ "ROMMangerBase", "de.neemann.digital.core.memory.rom" ], [ "ROMManagerFile", "de.neemann.digital.core.memory.rom" ], [ "ROMManager", "de.neemann.digital.core.memory.rom" ], [ "ROMInterface", "de.neemann.digital.core.memory.rom" ], [ "EEPROM", "de.neemann.digital.core.memory" ], [ "ProgramCounter", "de.neemann.digital.core.memory" ], [ "RAMAsync", "de.neemann.digital.core.memory" ], [ "ROM", "de.neemann.digital.core.memory" ], [ "DataField", "de.neemann.digital.core.memory" ], [ "EEPROMDualPort", "de.neemann.digital.core.memory" ], [ "RAMInterface", "de.neemann.digital.core.memory" ], [ "DataFieldConverter", "de.neemann.digital.core.memory" ], [ "RAMSinglePortSel", "de.neemann.digital.core.memory" ], [ "ProgramMemory", "de.neemann.digital.core.memory" ], [ "RegisterFile", "de.neemann.digital.core.memory" ], [ "ModelStateObserverTyped", "de.neemann.digital.core" ], [ "Observable", "de.neemann.digital.core" ], [ "NodeWithoutDelay", "de.neemann.digital.core" ], [ "ExceptionWithOrigin", "de.neemann.digital.core" ], [ "ObservableValue", "de.neemann.digital.core" ], [ "SpeedTest", "de.neemann.digital.core" ], [ "BurnException", "de.neemann.digital.core" ], [ "GlobalValues", "de.neemann.digital.core" ], [ "MIDI", "de.neemann.digital.core.io" ], [ "RGBLED", "de.neemann.digital.core.io" ], [ "Out", "de.neemann.digital.core.io" ], [ "RotEncoder", "de.neemann.digital.core.io" ], [ "PinControl", "de.neemann.digital.core.io" ], [ "DipSwitch", "de.neemann.digital.core.io" ], [ "CommonConnectionType", "de.neemann.digital.core.io" ], [ "LightBulb", "de.neemann.digital.core.io" ], [ "Probe", "de.neemann.digital.core.io" ], [ "Button", "de.neemann.digital.core.io" ], [ "ButtonLED", "de.neemann.digital.core.io" ], [ "In", "de.neemann.digital.core.io" ], [ "StepperMotorUnipolar", "de.neemann.digital.core.io" ], [ "ProbeMode", "de.neemann.digital.core.io" ], [ "NotConnected", "de.neemann.digital.core.io" ], [ "MIDIHelper", "de.neemann.digital.core.io" ], [ "StepperMotorBipolar", "de.neemann.digital.core.io" ], [ "Const", "de.neemann.digital.core.io" ], [ "PowerSupply", "de.neemann.digital.core.io" ], [ "Ground", "de.neemann.digital.core.io" ], [ "InValue", "de.neemann.digital.core.io" ], [ "VDD", "de.neemann.digital.core.io" ], [ "ServerHolder", "de.neemann.digital.core.io.telnet" ], [ "Telnet", "de.neemann.digital.core.io.telnet" ], [ "ByteBuffer", "de.neemann.digital.core.io.telnet" ], [ "Server", "de.neemann.digital.core.io.telnet" ], [ "ElementAttributes", "de.neemann.digital.core.element" ], [ "Element", "de.neemann.digital.core.element" ], [ "ElementFactory", "de.neemann.digital.core.element" ], [ "PinInfo", "de.neemann.digital.core.element" ], [ "PinDescriptions", "de.neemann.digital.core.element" ], [ "PinDescription", "de.neemann.digital.core.element" ], [ "Keys", "de.neemann.digital.core.element" ], [ "Rotation", "de.neemann.digital.core.element" ], [ "AttributeListener", "de.neemann.digital.core.element" ], [ "Key", "de.neemann.digital.core.element" ], [ "ImmutableList", "de.neemann.digital.core.element" ], [ "ElementTypeDescription", "de.neemann.digital.core.element" ], [ "FanIn", "de.neemann.digital.core.basic" ], [ "NOr", "de.neemann.digital.core.basic" ], [ "And", "de.neemann.digital.core.basic" ], [ "XNOr", "de.neemann.digital.core.basic" ], [ "XOr", "de.neemann.digital.core.basic" ], [ "Not", "de.neemann.digital.core.basic" ], [ "NAnd", "de.neemann.digital.core.basic" ], [ "Function", "de.neemann.digital.core.basic" ], [ "Or", "de.neemann.digital.core.basic" ], [ "ExceptionWithOriginInterface", "de.neemann.digital.core" ], [ "ModelEvent", "de.neemann.digital.core" ], [ "BacktrackException", "de.neemann.digital.core" ], [ "PlainSwitch", "de.neemann.digital.core.switching" ], [ "FGPFET", "de.neemann.digital.core.switching" ], [ "NFET", "de.neemann.digital.core.switching" ], [ "FGNFET", "de.neemann.digital.core.switching" ], [ "PFET", "de.neemann.digital.core.switching" ], [ "PlainSwitchDT", "de.neemann.digital.core.switching" ], [ "TransGate", "de.neemann.digital.core.switching" ], [ "SwitchDT", "de.neemann.digital.core.switching" ], [ "Relay", "de.neemann.digital.core.switching" ], [ "RelayDT", "de.neemann.digital.core.switching" ], [ "Switch", "de.neemann.digital.core.switching" ], [ "Fuse", "de.neemann.digital.core.switching" ], [ "Reset", "de.neemann.digital.core.wiring" ], [ "Stop", "de.neemann.digital.core.wiring" ], [ "Decoder", "de.neemann.digital.core.wiring" ], [ "Delay", "de.neemann.digital.core.wiring" ], [ "Driver", "de.neemann.digital.core.wiring" ], [ "DataBus", "de.neemann.digital.core.wiring.bus" ], [ "SingleBusHandler", "de.neemann.digital.core.wiring.bus" ], [ "ConnectedBusHandler", "de.neemann.digital.core.wiring.bus" ], [ "AbstractBusHandler", "de.neemann.digital.core.wiring.bus" ], [ "BusModelStateObserver", "de.neemann.digital.core.wiring.bus" ], [ "CommonBusValue", "de.neemann.digital.core.wiring.bus" ], [ "DriverInvSel", "de.neemann.digital.core.wiring" ], [ "PriorityEncoder", "de.neemann.digital.core.wiring" ], [ "BusSplitter", "de.neemann.digital.core.wiring" ], [ "Splitter", "de.neemann.digital.core.wiring" ], [ "Multiplexer", "de.neemann.digital.core.wiring" ], [ "BitSelector", "de.neemann.digital.core.wiring" ], [ "Break", "de.neemann.digital.core.wiring" ], [ "Clock", "de.neemann.digital.core.wiring" ], [ "AsyncSeq", "de.neemann.digital.core.wiring" ], [ "Demultiplexer", "de.neemann.digital.core.wiring" ], [ "BitsException", "de.neemann.digital.core" ], [ "NodeInterface", "de.neemann.digital.core" ], [ "NodeException", "de.neemann.digital.core" ], [ "FlipflopDAsync", "de.neemann.digital.core.flipflops" ], [ "FlipflopD", "de.neemann.digital.core.flipflops" ], [ "FlipflopRSAsync", "de.neemann.digital.core.flipflops" ], [ "FlipflopT", "de.neemann.digital.core.flipflops" ], [ "FlipflopJKAsync", "de.neemann.digital.core.flipflops" ], [ "FlipflopJK", "de.neemann.digital.core.flipflops" ], [ "Monoflop", "de.neemann.digital.core.flipflops" ], [ "FlipflopRS", "de.neemann.digital.core.flipflops" ], [ "FlipflopBit", "de.neemann.digital.core.flipflops" ], [ "BarrelShifter", "de.neemann.digital.core.arithmetic" ], [ "Mul", "de.neemann.digital.core.arithmetic" ], [ "Neg", "de.neemann.digital.core.arithmetic" ], [ "BitExtender", "de.neemann.digital.core.arithmetic" ], [ "Add", "de.neemann.digital.core.arithmetic" ], [ "Div", "de.neemann.digital.core.arithmetic" ], [ "LeftRightFormat", "de.neemann.digital.core.arithmetic" ], [ "PRNG", "de.neemann.digital.core.arithmetic" ], [ "Sub", "de.neemann.digital.core.arithmetic" ], [ "BarrelShifterMode", "de.neemann.digital.core.arithmetic" ], [ "Comparator", "de.neemann.digital.core.arithmetic" ], [ "BitCount", "de.neemann.digital.core.arithmetic" ], [ "ObservableValues", "de.neemann.digital.core" ], [ "Value", "de.neemann.digital.core" ], [ "IntFormat", "de.neemann.digital.core" ], [ "SyncAccess", "de.neemann.digital.core" ], [ "Bits", "de.neemann.digital.core" ], [ "ProcessInterface", "de.neemann.digital.core.extern.handler" ], [ "StdIOInterface", "de.neemann.digital.core.extern.handler" ], [ "ApplicationVerilogStdIO", "de.neemann.digital.core.extern" ], [ "Application", "de.neemann.digital.core.extern" ], [ "External", "de.neemann.digital.core.extern" ], [ "Port", "de.neemann.digital.core.extern" ], [ "PortDefinition", "de.neemann.digital.core.extern" ], [ "ApplicationGHDL", "de.neemann.digital.core.extern" ], [ "ApplicationIVerilog", "de.neemann.digital.core.extern" ], [ "ApplicationVHDLStdIO", "de.neemann.digital.core.extern" ], [ "VHDLTokenizer", "de.neemann.digital.core.extern" ], [ "ApplicationGeneric", "de.neemann.digital.core.extern" ], [ "Options", "de.neemann.digital.core.extern" ], [ "VerilogTokenizer", "de.neemann.digital.core.extern" ], [ "ExternalFile", "de.neemann.digital.core.extern" ], [ "ProcessStarter", "de.neemann.digital.core.extern" ], [ "ModelEventType", "de.neemann.digital.core" ], [ "Observer", "de.neemann.digital.core" ], [ "ErrorDetector", "de.neemann.digital.core" ], [ "Statistics", "de.neemann.digital.core.stats" ], [ "Countable", "de.neemann.digital.core.stats" ], [ "Model", "de.neemann.digital.core" ], [ "Signal", "de.neemann.digital.core" ], [ "StringList", "de.neemann.digital" ], [ "XStreamValid", "de.neemann.digital" ], [ "StatsExport", "de.neemann.digital.cli" ], [ "SVGExport", "de.neemann.digital.cli" ], [ "CommandLineTester", "de.neemann.digital.cli" ], [ "CSVWriter", "de.neemann.digital.cli" ], [ "BasicCommand", "de.neemann.digital.cli.cli" ], [ "Argument", "de.neemann.digital.cli.cli" ], [ "CLIException", "de.neemann.digital.cli.cli" ], [ "Muxer", "de.neemann.digital.cli.cli" ], [ "ArgumentKey", "de.neemann.digital.cli.cli" ], [ "NamedCommand", "de.neemann.digital.cli.cli" ], [ "CLICommand", "de.neemann.digital.cli.cli" ], [ "ArgumentBase", "de.neemann.digital.cli.cli" ], [ "CircuitLoader", "de.neemann.digital.cli" ], [ "Main", "de.neemann.digital.cli" ], [ "Modification", "de.neemann.digital.undo" ], [ "Modifications", "de.neemann.digital.undo" ], [ "ModifyException", "de.neemann.digital.undo" ], [ "Copyable", "de.neemann.digital.undo" ], [ "UndoManager", "de.neemann.digital.undo" ], [ "ChangedListener", "de.neemann.digital.undo" ], [ "CircuitRepresentation", "de.neemann.digital.fsm" ], [ "Transition", "de.neemann.digital.fsm" ], [ "Movable", "de.neemann.digital.fsm" ], [ "MouseMovable", "de.neemann.digital.fsm" ], [ "Optimizer", "de.neemann.digital.fsm" ], [ "Permute", "de.neemann.digital.fsm" ], [ "FiniteStateMachineException", "de.neemann.digital.fsm" ], [ "TransitionTableCreator", "de.neemann.digital.fsm" ], [ "ValueParser", "de.neemann.digital.fsm" ], [ "WaitGroup", "de.neemann.digital.fsm" ], [ "FSMComponent", "de.neemann.digital.fsm.gui" ], [ "FSMFrame", "de.neemann.digital.fsm.gui" ], [ "OptimizerDialog", "de.neemann.digital.fsm.gui" ], [ "FSMDemos", "de.neemann.digital.fsm" ], [ "FSM", "de.neemann.digital.fsm" ], [ "State", "de.neemann.digital.fsm" ], [ "Lang", "de.neemann.digital.lang" ], [ "LineListenerResolveDontCare", "de.neemann.digital.testing" ], [ "TestingDataException", "de.neemann.digital.testing" ], [ "UnitTester", "de.neemann.digital.testing" ], [ "FolderTestRunner", "de.neemann.digital.testing" ], [ "TestExecutor", "de.neemann.digital.testing" ], [ "Transitions", "de.neemann.digital.testing" ], [ "TestCaseDescription", "de.neemann.digital.testing" ], [ "TestCaseElement", "de.neemann.digital.testing" ], [ "LineEmitterRepeat", "de.neemann.digital.testing.parser" ], [ "Parser", "de.neemann.digital.testing.parser" ], [ "ValueAppenderBits", "de.neemann.digital.testing.parser" ], [ "ParserException", "de.neemann.digital.testing.parser" ], [ "Context", "de.neemann.digital.testing.parser" ], [ "ModelInitializer", "de.neemann.digital.testing.parser" ], [ "Expression", "de.neemann.digital.testing.parser" ], [ "LineEmitterList", "de.neemann.digital.testing.parser" ], [ "TestRow", "de.neemann.digital.testing.parser" ], [ "LineEmitter", "de.neemann.digital.testing.parser" ], [ "LineEmitterWhile", "de.neemann.digital.testing.parser" ], [ "Tokenizer", "de.neemann.digital.testing.parser" ], [ "LineEmitterSimple", "de.neemann.digital.testing.parser" ], [ "Random", "de.neemann.digital.testing.parser.functions" ], [ "SignExtend", "de.neemann.digital.testing.parser.functions" ], [ "IfThenElse", "de.neemann.digital.testing.parser.functions" ], [ "Function", "de.neemann.digital.testing.parser.functions" ], [ "LineListener", "de.neemann.digital.testing.parser" ], [ "VirtualSignal", "de.neemann.digital.testing.parser" ], [ "ValueAppender", "de.neemann.digital.testing.parser" ], [ "OperatorPrecedence", "de.neemann.digital.testing.parser" ], [ "TestResultListener", "de.neemann.digital.testing" ], [ "MatchedValue", "de.neemann.digital.testing" ], [ "TestResult", "de.neemann.digital.testing" ], [ "MinimizerInterface", "de.neemann.digital.analyse" ], [ "LabelNumbering", "de.neemann.digital.analyse" ], [ "ModelAnalyser", "de.neemann.digital.analyse" ], [ "CSVImporter", "de.neemann.digital.analyse" ], [ "BoolTableExpanded", "de.neemann.digital.analyse" ], [ "TruthTableTableModel", "de.neemann.digital.analyse" ], [ "TableReducer", "de.neemann.digital.analyse.quinemc" ], [ "PrimeSelector", "de.neemann.digital.analyse.quinemc.primeselector" ], [ "BruteForce", "de.neemann.digital.analyse.quinemc.primeselector" ], [ "LargestFirst", "de.neemann.digital.analyse.quinemc.primeselector" ], [ "BruteForceGetAll", "de.neemann.digital.analyse.quinemc.primeselector" ], [ "PrimeSelectorDefault", "de.neemann.digital.analyse.quinemc.primeselector" ], [ "BoolTableByteArray", "de.neemann.digital.analyse.quinemc" ], [ "IndependentChecker", "de.neemann.digital.analyse.quinemc" ], [ "QuineMcCluskey", "de.neemann.digital.analyse.quinemc" ], [ "BoolTableExpression", "de.neemann.digital.analyse.quinemc" ], [ "BoolTableBoolArray", "de.neemann.digital.analyse.quinemc" ], [ "BoolTable", "de.neemann.digital.analyse.quinemc" ], [ "TableRows", "de.neemann.digital.analyse.quinemc" ], [ "ThreeStateValue", "de.neemann.digital.analyse.quinemc" ], [ "QuineMcCluskeyExam", "de.neemann.digital.analyse.quinemc" ], [ "TableRow", "de.neemann.digital.analyse.quinemc" ], [ "TruthTableConverter", "de.neemann.digital.analyse" ], [ "DetermineJKStateMachine", "de.neemann.digital.analyse" ], [ "Parser", "de.neemann.digital.analyse.parser" ], [ "ParseException", "de.neemann.digital.analyse.parser" ], [ "Tokenizer", "de.neemann.digital.analyse.parser" ], [ "ModelAnalyserInfo", "de.neemann.digital.analyse" ], [ "AnalyseException", "de.neemann.digital.analyse" ], [ "DependencyAnalyser", "de.neemann.digital.analyse" ], [ "SubstituteLibrary", "de.neemann.digital.analyse" ], [ "TruthTableFormatterHex", "de.neemann.digital.analyse.format" ], [ "TruthTableFormatter", "de.neemann.digital.analyse.format" ], [ "TruthTableFormatterTestCase", "de.neemann.digital.analyse.format" ], [ "TruthTableFormatterCSV", "de.neemann.digital.analyse.format" ], [ "TruthTableFormatterLaTeX", "de.neemann.digital.analyse.format" ], [ "MinimizerQuineMcCluskey", "de.neemann.digital.analyse" ], [ "ContextFiller", "de.neemann.digital.analyse.expression" ], [ "BitSetter", "de.neemann.digital.analyse.expression" ], [ "ExpressionVisitor", "de.neemann.digital.analyse.expression" ], [ "ContextMap", "de.neemann.digital.analyse.expression" ], [ "ComplexityVisitor", "de.neemann.digital.analyse.expression" ], [ "Operation", "de.neemann.digital.analyse.expression" ], [ "Context", "de.neemann.digital.analyse.expression" ], [ "NInputs", "de.neemann.digital.analyse.expression.modify" ], [ "NOr", "de.neemann.digital.analyse.expression.modify" ], [ "ExpressionModifier", "de.neemann.digital.analyse.expression.modify" ], [ "NAnd", "de.neemann.digital.analyse.expression.modify" ], [ "Constant", "de.neemann.digital.analyse.expression" ], [ "Expression", "de.neemann.digital.analyse.expression" ], [ "Variable", "de.neemann.digital.analyse.expression" ], [ "ExpressionException", "de.neemann.digital.analyse.expression" ], [ "ComplexityInclNotVisitor", "de.neemann.digital.analyse.expression" ], [ "Equals", "de.neemann.digital.analyse.expression" ], [ "FormatToExpression", "de.neemann.digital.analyse.expression.format" ], [ "FormatToTable", "de.neemann.digital.analyse.expression.format" ], [ "Formatter", "de.neemann.digital.analyse.expression.format" ], [ "FormatterException", "de.neemann.digital.analyse.expression.format" ], [ "FormatToTableLatex", "de.neemann.digital.analyse.expression.format" ], [ "Not", "de.neemann.digital.analyse.expression" ], [ "VariableVisitor", "de.neemann.digital.analyse.expression" ], [ "NamedExpression", "de.neemann.digital.analyse.expression" ], [ "MinimizerQuineMcCluskeyExam", "de.neemann.digital.analyse" ], [ "TruthTable", "de.neemann.digital.analyse" ], [ "SplitPinString", "de.neemann.digital.analyse" ], [ "CycleDetector", "de.neemann.digital.analyse" ], [ "DigitalRemoteInterface", "de.neemann.digital.gui" ], [ "TextSearchFilter", "de.neemann.digital.gui" ], [ "ExportZipAction", "de.neemann.digital.gui" ], [ "SettingsBase", "de.neemann.digital.gui" ], [ "DocumentationLocator", "de.neemann.digital.gui" ], [ "InitialTutorial", "de.neemann.digital.gui.tutorial" ], [ "InsertAction", "de.neemann.digital.gui" ], [ "StatusInterface", "de.neemann.digital.gui" ], [ "SearchTextField", "de.neemann.digital.gui" ], [ "SaveAsHelper", "de.neemann.digital.gui" ], [ "FileHistory", "de.neemann.digital.gui" ], [ "ReleaseInfo", "de.neemann.digital.gui.release" ], [ "CheckForNewRelease", "de.neemann.digital.gui.release" ], [ "StateInterface", "de.neemann.digital.gui.state" ], [ "StateManager", "de.neemann.digital.gui.state" ], [ "State", "de.neemann.digital.gui.state" ], [ "CircuitScrollPanel", "de.neemann.digital.gui.components" ], [ "ItemPicker", "de.neemann.digital.gui.components" ], [ "LibraryTreeModel", "de.neemann.digital.gui.components.tree" ], [ "SelectTree", "de.neemann.digital.gui.components.tree" ], [ "WindowPosManager", "de.neemann.digital.gui.components" ], [ "CustomShapeEditor", "de.neemann.digital.gui.components" ], [ "TransformHolder", "de.neemann.digital.gui.components" ], [ "EditorPanel", "de.neemann.digital.gui.components" ], [ "BehavioralFixtureCreator", "de.neemann.digital.gui.components" ], [ "EditorFactory", "de.neemann.digital.gui.components" ], [ "OrderMerger", "de.neemann.digital.gui.components" ], [ "ElementOrderer", "de.neemann.digital.gui.components" ], [ "ModifyMoveSelected", "de.neemann.digital.gui.components.modification" ], [ "ModifyMoveWire", "de.neemann.digital.gui.components.modification" ], [ "ModificationOfWire", "de.neemann.digital.gui.components.modification" ], [ "ModifyDeleteRect", "de.neemann.digital.gui.components.modification" ], [ "ModifyInsertWires", "de.neemann.digital.gui.components.modification" ], [ "ModifyInsertWire", "de.neemann.digital.gui.components.modification" ], [ "ModificationOfVisualElement", "de.neemann.digital.gui.components.modification" ], [ "ModifyCircuitAttributes", "de.neemann.digital.gui.components.modification" ], [ "ModifyDeleteWire", "de.neemann.digital.gui.components.modification" ], [ "ModifyMoveAndRotElement", "de.neemann.digital.gui.components.modification" ], [ "ModifyMeasurementOrdering", "de.neemann.digital.gui.components.modification" ], [ "ModifyDeleteElement", "de.neemann.digital.gui.components.modification" ], [ "ModifyAttribute", "de.neemann.digital.gui.components.modification" ], [ "ModifyAttributes", "de.neemann.digital.gui.components.modification" ], [ "ModifyInsertElement", "de.neemann.digital.gui.components.modification" ], [ "DataEditor", "de.neemann.digital.gui.components" ], [ "CircuitModifierPostClosed", "de.neemann.digital.gui.components" ], [ "CharDeleter", "de.neemann.digital.gui.components.terminal" ], [ "ConsoleTerminal", "de.neemann.digital.gui.components.terminal" ], [ "Terminal", "de.neemann.digital.gui.components.terminal" ], [ "TerminalDialog", "de.neemann.digital.gui.components.terminal" ], [ "TerminalInterface", "de.neemann.digital.gui.components.terminal" ], [ "Keyboard", "de.neemann.digital.gui.components.terminal" ], [ "KeyboardDialog", "de.neemann.digital.gui.components.terminal" ], [ "Editor", "de.neemann.digital.gui.components" ], [ "VarRectList", "de.neemann.digital.gui.components.karnaugh" ], [ "KarnaughMap", "de.neemann.digital.gui.components.karnaugh" ], [ "KarnaughMapComponent", "de.neemann.digital.gui.components.karnaugh" ], [ "KarnaughMapDialog", "de.neemann.digital.gui.components.karnaugh" ], [ "MapLayout", "de.neemann.digital.gui.components.karnaugh" ], [ "KarnaughException", "de.neemann.digital.gui.components.karnaugh" ], [ "CircuitTransferable", "de.neemann.digital.gui.components" ], [ "ElementHelpDialog", "de.neemann.digital.gui.components" ], [ "TestCaseDescriptionDialog", "de.neemann.digital.gui.components.testing" ], [ "ValueTableDialog", "de.neemann.digital.gui.components.testing" ], [ "TestCaseDescriptionEditor", "de.neemann.digital.gui.components.testing" ], [ "TestAllDialog", "de.neemann.digital.gui.components.testing" ], [ "ExpressionListenerOptimizeJK", "de.neemann.digital.gui.components.table" ], [ "LaTeXExpressionListener", "de.neemann.digital.gui.components.table" ], [ "HardwareDescriptionGenerator", "de.neemann.digital.gui.components.table.hardware" ], [ "GenerateFile", "de.neemann.digital.gui.components.table.hardware" ], [ "GenerateCUPL", "de.neemann.digital.gui.components.table.hardware" ], [ "ExpressionListener", "de.neemann.digital.gui.components.table" ], [ "ReorderOutputs", "de.neemann.digital.gui.components.table" ], [ "AllSolutionsDialog", "de.neemann.digital.gui.components.table" ], [ "ExpressionListenerJK", "de.neemann.digital.gui.components.table" ], [ "ExpressionListenerCSVCondensed", "de.neemann.digital.gui.components.table" ], [ "ExpressionCreator", "de.neemann.digital.gui.components.table" ], [ "TableDialog", "de.neemann.digital.gui.components.table" ], [ "BuilderExpressionCreator", "de.neemann.digital.gui.components.table" ], [ "ExpressionComponent", "de.neemann.digital.gui.components.table" ], [ "PlainTextExpressionListener", "de.neemann.digital.gui.components.table" ], [ "TableReorderManager", "de.neemann.digital.gui.components.table" ], [ "ShowStringDialog", "de.neemann.digital.gui.components.table" ], [ "ReorderInputs", "de.neemann.digital.gui.components.table" ], [ "ProgressDialog", "de.neemann.digital.gui.components.table" ], [ "CheckResultListener", "de.neemann.digital.gui.components.table" ], [ "ExpressionListenerStore", "de.neemann.digital.gui.components.table" ], [ "AttributeDialog", "de.neemann.digital.gui.components" ], [ "ProbeDialog", "de.neemann.digital.gui.components" ], [ "ColorSchemeEditor", "de.neemann.digital.gui.components" ], [ "ROMEditorDialog", "de.neemann.digital.gui.components" ], [ "LabelGenerator", "de.neemann.digital.gui.components" ], [ "SingleValueDialog", "de.neemann.digital.gui.components" ], [ "ExpressionDialog", "de.neemann.digital.gui.components.expression" ], [ "CircuitComponent", "de.neemann.digital.gui.components" ], [ "VGA", "de.neemann.digital.gui.components.graphics" ], [ "GraphicCard", "de.neemann.digital.gui.components.graphics" ], [ "LedMatrix", "de.neemann.digital.gui.components.graphics" ], [ "VGADialog", "de.neemann.digital.gui.components.graphics" ], [ "MoveFocusTo", "de.neemann.digital.gui.components.graphics" ], [ "LedMatrixComponent", "de.neemann.digital.gui.components.graphics" ], [ "GraphicDialog", "de.neemann.digital.gui.components.graphics" ], [ "GraphicComponent", "de.neemann.digital.gui.components.graphics" ], [ "LedMatrixDialog", "de.neemann.digital.gui.components.graphics" ], [ "ConstraintsBuilder", "de.neemann.digital.gui.components" ], [ "ScopeTrigger", "de.neemann.digital.gui.components.data" ], [ "GraphDialog", "de.neemann.digital.gui.components.data" ], [ "GraphComponent", "de.neemann.digital.gui.components.data" ], [ "DummyElement", "de.neemann.digital.gui.components.data" ], [ "ValueTableObserver", "de.neemann.digital.gui.components.data" ], [ "CircuitModifier", "de.neemann.digital.gui.components" ], [ "CopiedElementLabelRenamer", "de.neemann.digital.gui.components" ], [ "TextLineNumber", "de.neemann.digital.gui.components" ], [ "InsertHistory", "de.neemann.digital.gui" ], [ "ProgramMemoryLoader", "de.neemann.digital.gui" ], [ "Main", "de.neemann.digital.gui" ], [ "StatsDialog", "de.neemann.digital.gui" ], [ "WindowManager", "de.neemann.digital.gui" ], [ "Settings", "de.neemann.digital.gui" ], [ "LibrarySelector", "de.neemann.digital.gui" ], [ "DigitalUncaughtExceptionHandler", "de.neemann.digital.gui" ], [ "NumberingWizard", "de.neemann.digital.gui" ], [ "HandlerInterface", "de.neemann.digital.gui.remote" ], [ "RemoteSever", "de.neemann.digital.gui.remote" ], [ "RemoteException", "de.neemann.digital.gui.remote" ], [ "DigitalHandler", "de.neemann.digital.gui.remote" ], [ "ModelModifier", "de.neemann.digital.gui" ], [ "VerilogCreator", "de.neemann.digital.hdl.verilog2" ], [ "VerilogRenaming", "de.neemann.digital.hdl.verilog2" ], [ "VerilogGenerator", "de.neemann.digital.hdl.verilog2" ], [ "VerilogTestBenchCreator", "de.neemann.digital.hdl.verilog2" ], [ "VerilogElement", "de.neemann.digital.hdl.verilog2.lib" ], [ "VerilogTemplate", "de.neemann.digital.hdl.verilog2.lib" ], [ "VerilogLibrary", "de.neemann.digital.hdl.verilog2" ], [ "CodePrinter", "de.neemann.digital.hdl.printer" ], [ "CodePrinterStr", "de.neemann.digital.hdl.printer" ], [ "Statements", "de.neemann.digital.hdl.hgs" ], [ "Parser", "de.neemann.digital.hdl.hgs" ], [ "ParserException", "de.neemann.digital.hdl.hgs" ], [ "Statement", "de.neemann.digital.hdl.hgs" ], [ "Context", "de.neemann.digital.hdl.hgs" ], [ "FirstClassFunctionCall", "de.neemann.digital.hdl.hgs.function" ], [ "InnerFunction", "de.neemann.digital.hdl.hgs.function" ], [ "JavaClass", "de.neemann.digital.hdl.hgs.function" ], [ "FirstClassFunction", "de.neemann.digital.hdl.hgs.function" ], [ "Func", "de.neemann.digital.hdl.hgs.function" ], [ "Function", "de.neemann.digital.hdl.hgs.function" ], [ "Expression", "de.neemann.digital.hdl.hgs" ], [ "HGSEvalException", "de.neemann.digital.hdl.hgs" ], [ "Tokenizer", "de.neemann.digital.hdl.hgs" ], [ "ReferenceToFunc", "de.neemann.digital.hdl.hgs.refs" ], [ "ReferenceToStruct", "de.neemann.digital.hdl.hgs.refs" ], [ "ReferenceToArray", "de.neemann.digital.hdl.hgs.refs" ], [ "Reference", "de.neemann.digital.hdl.hgs.refs" ], [ "ReferenceToVar", "de.neemann.digital.hdl.hgs.refs" ], [ "Value", "de.neemann.digital.hdl.hgs" ], [ "HGSMap", "de.neemann.digital.hdl.hgs" ], [ "HGSArray", "de.neemann.digital.hdl.hgs" ], [ "Separator", "de.neemann.digital.hdl.vhdl2" ], [ "VHDLLibrary", "de.neemann.digital.hdl.vhdl2" ], [ "VHDLCreator", "de.neemann.digital.hdl.vhdl2" ], [ "VHDLRenaming", "de.neemann.digital.hdl.vhdl2" ], [ "VHDLGenerator", "de.neemann.digital.hdl.vhdl2" ], [ "VHDLEntity", "de.neemann.digital.hdl.vhdl2.entities" ], [ "VHDLTemplate", "de.neemann.digital.hdl.vhdl2.entities" ], [ "VHDLTemplateFunctions", "de.neemann.digital.hdl.vhdl2.entities" ], [ "VHDLTestBenchCreator", "de.neemann.digital.hdl.vhdl2" ], [ "HDLModel", "de.neemann.digital.hdl.model2" ], [ "HDLNode", "de.neemann.digital.hdl.model2" ], [ "HDLNet", "de.neemann.digital.hdl.model2" ], [ "Printable", "de.neemann.digital.hdl.model2" ], [ "HDLException", "de.neemann.digital.hdl.model2" ], [ "HDLPort", "de.neemann.digital.hdl.model2" ], [ "HasName", "de.neemann.digital.hdl.model2" ], [ "InlineManyToOne", "de.neemann.digital.hdl.model2.optimizations" ], [ "MergeAssignments", "de.neemann.digital.hdl.model2.optimizations" ], [ "Optimization", "de.neemann.digital.hdl.model2.optimizations" ], [ "MergeConstants", "de.neemann.digital.hdl.model2.optimizations" ], [ "ReplaceOneToMany", "de.neemann.digital.hdl.model2.optimizations" ], [ "NameConstantSignals", "de.neemann.digital.hdl.model2.optimizations" ], [ "OptimizeExpressions", "de.neemann.digital.hdl.model2.optimizations" ], [ "RemoveConstantSignals", "de.neemann.digital.hdl.model2.optimizations" ], [ "NodeSorterExpressionBased", "de.neemann.digital.hdl.model2.optimizations" ], [ "HDLNodeSplitterManyToOne", "de.neemann.digital.hdl.model2" ], [ "HDLNodeCustom", "de.neemann.digital.hdl.model2" ], [ "HDLNodeAssignment", "de.neemann.digital.hdl.model2" ], [ "HDLCircuit", "de.neemann.digital.hdl.model2" ], [ "ExprVar", "de.neemann.digital.hdl.model2.expression" ], [ "Visitor", "de.neemann.digital.hdl.model2.expression" ], [ "ExprVarRange", "de.neemann.digital.hdl.model2.expression" ], [ "Expression", "de.neemann.digital.hdl.model2.expression" ], [ "ExpressionOptimizer", "de.neemann.digital.hdl.model2.expression" ], [ "ExprNot", "de.neemann.digital.hdl.model2.expression" ], [ "ExprConstant", "de.neemann.digital.hdl.model2.expression" ], [ "ExprOperate", "de.neemann.digital.hdl.model2.expression" ], [ "ExprUsingNet", "de.neemann.digital.hdl.model2.expression" ], [ "HDLNodeBuildIn", "de.neemann.digital.hdl.model2" ], [ "HDLClockIntegrator", "de.neemann.digital.hdl.model2.clock" ], [ "ClockIntegratorGeneric", "de.neemann.digital.hdl.model2.clock" ], [ "ClockInfo", "de.neemann.digital.hdl.model2.clock" ], [ "HDLNodeSplitterOneToMany", "de.neemann.digital.hdl.model2" ], [ "FileLocator", "de.neemann.digital" ], [ "ValueTable", "de.neemann.digital.data" ], [ "ValueTableModel", "de.neemann.digital.data" ], [ "DataPlotter", "de.neemann.digital.data" ], [ "Value", "de.neemann.digital.data" ], [ "ExpressionExporter", "de.neemann.digital.builder" ], [ "ExpressionToFileExporter", "de.neemann.digital.builder" ], [ "RotationByteArrayOutputStream", "de.neemann.digital.builder.tt2" ], [ "TT2Exporter", "de.neemann.digital.builder.tt2" ], [ "StartATF150xFitter", "de.neemann.digital.builder.tt2" ], [ "OSExecute", "de.neemann.digital.builder.tt2" ], [ "CreateCHN", "de.neemann.digital.builder.ATF150x" ], [ "ATFDevice", "de.neemann.digital.builder.ATF150x" ], [ "ATFDialog", "de.neemann.digital.builder.ATF150x" ], [ "PL", "de.neemann.digital.builder.ATF150x" ], [ "ATF150xCuplExporter", "de.neemann.digital.builder.ATF150x" ], [ "PinMap", "de.neemann.digital.builder" ], [ "PinMapException", "de.neemann.digital.builder" ], [ "FragmentExpression", "de.neemann.digital.builder.circuit" ], [ "FragmentVisualElement", "de.neemann.digital.builder.circuit" ], [ "FragmentSameInValue", "de.neemann.digital.builder.circuit" ], [ "CircuitBuilder", "de.neemann.digital.builder.circuit" ], [ "FragmentVisitor", "de.neemann.digital.builder.circuit" ], [ "FragmentVariable", "de.neemann.digital.builder.circuit" ], [ "Fragment", "de.neemann.digital.builder.circuit" ], [ "Box", "de.neemann.digital.builder.circuit" ], [ "Gal16v8JEDECExporter", "de.neemann.digital.builder.Gal16v8" ], [ "CuplExporter", "de.neemann.digital.builder.Gal16v8" ], [ "BuilderCollectorGAL", "de.neemann.digital.builder.Gal16v8" ], [ "CleanNameBuilder", "de.neemann.digital.builder" ], [ "BuilderCollector", "de.neemann.digital.builder" ], [ "BuilderInterface", "de.neemann.digital.builder" ], [ "BuilderException", "de.neemann.digital.builder" ], [ "Gal22v10JEDECExporter", "de.neemann.digital.builder.Gal22v10" ], [ "Gal22v10CuplExporter", "de.neemann.digital.builder.Gal22v10" ], [ "FuseMap", "de.neemann.digital.builder.jedec" ], [ "FuseMapFillerException", "de.neemann.digital.builder.jedec" ], [ "FuseMapFiller", "de.neemann.digital.builder.jedec" ], [ "JedecWriter", "de.neemann.digital.builder.jedec" ], [ "GenericCode", "de.neemann.digital.draw.library" ], [ "ElementLibrary", "de.neemann.digital.draw.library" ], [ "GenericInitCode", "de.neemann.digital.draw.library" ], [ "Visitor", "de.neemann.digital.draw.library" ], [ "ComponentManager", "de.neemann.digital.draw.library" ], [ "LibraryListener", "de.neemann.digital.draw.library" ], [ "JarComponentManager", "de.neemann.digital.draw.library" ], [ "ElementLibraryFolder", "de.neemann.digital.draw.library" ], [ "CustomElement", "de.neemann.digital.draw.library" ], [ "ElementNotFoundNotification", "de.neemann.digital.draw.library" ], [ "ElementNotFoundException", "de.neemann.digital.draw.library" ], [ "ComponentSource", "de.neemann.digital.draw.library" ], [ "LibraryInterface", "de.neemann.digital.draw.library" ], [ "ResolveGenerics", "de.neemann.digital.draw.library" ], [ "LibraryNode", "de.neemann.digital.draw.library" ], [ "ElementTypeDescriptionCustom", "de.neemann.digital.draw.library" ], [ "InvalidNodeException", "de.neemann.digital.draw.library" ], [ "NumStringComparator", "de.neemann.digital.draw.library" ], [ "InputShape", "de.neemann.digital.draw.shapes" ], [ "Interactor", "de.neemann.digital.draw.shapes" ], [ "ButtonShape", "de.neemann.digital.draw.shapes" ], [ "GenericShape", "de.neemann.digital.draw.shapes" ], [ "Drawable", "de.neemann.digital.draw.shapes" ], [ "DelayShape", "de.neemann.digital.draw.shapes" ], [ "DiodeBackwardShape", "de.neemann.digital.draw.shapes" ], [ "FuseShape", "de.neemann.digital.draw.shapes" ], [ "FETShapeP", "de.neemann.digital.draw.shapes" ], [ "DILShape", "de.neemann.digital.draw.shapes" ], [ "DipSwitchShape", "de.neemann.digital.draw.shapes" ], [ "SwitchShape", "de.neemann.digital.draw.shapes" ], [ "LightBulbShape", "de.neemann.digital.draw.shapes" ], [ "LayoutShape", "de.neemann.digital.draw.shapes" ], [ "SplitterShape", "de.neemann.digital.draw.shapes" ], [ "PolarityAwareLEDShape", "de.neemann.digital.draw.shapes" ], [ "ButtonLEDShape", "de.neemann.digital.draw.shapes" ], [ "RelayShape", "de.neemann.digital.draw.shapes" ], [ "ConstShape", "de.neemann.digital.draw.shapes" ], [ "BreakShape", "de.neemann.digital.draw.shapes" ], [ "GenericCodeShape", "de.neemann.digital.draw.shapes" ], [ "TextShape", "de.neemann.digital.draw.shapes" ], [ "SevenSegHexShape", "de.neemann.digital.draw.shapes" ], [ "ProbeShape", "de.neemann.digital.draw.shapes" ], [ "NotConnectedShape", "de.neemann.digital.draw.shapes" ], [ "StepperMotorShape", "de.neemann.digital.draw.shapes" ], [ "FETShape", "de.neemann.digital.draw.shapes" ], [ "BitSelShape", "de.neemann.digital.draw.shapes" ], [ "SevenSegShape", "de.neemann.digital.draw.shapes" ], [ "GenericInitCodeShape", "de.neemann.digital.draw.shapes" ], [ "RelayDTShape", "de.neemann.digital.draw.shapes" ], [ "RectShape", "de.neemann.digital.draw.shapes" ], [ "VDDShape", "de.neemann.digital.draw.shapes" ], [ "RAMShape", "de.neemann.digital.draw.shapes" ], [ "ScopeShape", "de.neemann.digital.draw.shapes" ], [ "DemuxerShape", "de.neemann.digital.draw.shapes" ], [ "FETShapeN", "de.neemann.digital.draw.shapes" ], [ "BusSplitterShape", "de.neemann.digital.draw.shapes" ], [ "PullUpShape", "de.neemann.digital.draw.shapes" ], [ "TestCaseShape", "de.neemann.digital.draw.shapes" ], [ "TunnelShape", "de.neemann.digital.draw.shapes" ], [ "MuxerShape", "de.neemann.digital.draw.shapes" ], [ "SwitchDTShape", "de.neemann.digital.draw.shapes" ], [ "PinControlShape", "de.neemann.digital.draw.shapes" ], [ "FGFETShapeN", "de.neemann.digital.draw.shapes" ], [ "TransGateShape", "de.neemann.digital.draw.shapes" ], [ "DiodeShape", "de.neemann.digital.draw.shapes" ], [ "ResetShape", "de.neemann.digital.draw.shapes" ], [ "DiodeForewardShape", "de.neemann.digital.draw.shapes" ], [ "SixteenShape", "de.neemann.digital.draw.shapes" ], [ "CustomCircuitShapeType", "de.neemann.digital.draw.shapes" ], [ "InteractorInterface", "de.neemann.digital.draw.shapes" ], [ "ShapeSpecificMatch", "de.neemann.digital.draw.shapes" ], [ "LEDShape", "de.neemann.digital.draw.shapes" ], [ "ClockShape", "de.neemann.digital.draw.shapes" ], [ "RGBLEDShape", "de.neemann.digital.draw.shapes" ], [ "RotEncoderShape", "de.neemann.digital.draw.shapes" ], [ "IEEEGenericShape", "de.neemann.digital.draw.shapes.ieee" ], [ "IEEEOrShape", "de.neemann.digital.draw.shapes.ieee" ], [ "IEEENotShape", "de.neemann.digital.draw.shapes.ieee" ], [ "IEEEAndShape", "de.neemann.digital.draw.shapes.ieee" ], [ "IEEEXOrShape", "de.neemann.digital.draw.shapes.ieee" ], [ "ObservableValueReader", "de.neemann.digital.draw.shapes" ], [ "SvgTemplate", "de.neemann.digital.draw.shapes.custom.svg" ], [ "TransformParser", "de.neemann.digital.draw.shapes.custom.svg" ], [ "Context", "de.neemann.digital.draw.shapes.custom.svg" ], [ "SvgException", "de.neemann.digital.draw.shapes.custom.svg" ], [ "SvgImporter", "de.neemann.digital.draw.shapes.custom.svg" ], [ "CustomShapeDescription", "de.neemann.digital.draw.shapes.custom" ], [ "CustomShape", "de.neemann.digital.draw.shapes.custom" ], [ "FGFETShapeP", "de.neemann.digital.draw.shapes" ], [ "OutputShape", "de.neemann.digital.draw.shapes" ], [ "GroundShape", "de.neemann.digital.draw.shapes" ], [ "AsyncClockShape", "de.neemann.digital.draw.shapes" ], [ "Shape", "de.neemann.digital.draw.shapes" ], [ "MissingShape", "de.neemann.digital.draw.shapes" ], [ "ShapeFactory", "de.neemann.digital.draw.shapes" ], [ "PullDownShape", "de.neemann.digital.draw.shapes" ], [ "DriverShape", "de.neemann.digital.draw.shapes" ], [ "SevenShape", "de.neemann.digital.draw.shapes" ], [ "DataShape", "de.neemann.digital.draw.shapes" ], [ "DotCreator", "de.neemann.digital.draw.elements" ], [ "Wire", "de.neemann.digital.draw.elements" ], [ "Movable", "de.neemann.digital.draw.elements" ], [ "Pins", "de.neemann.digital.draw.elements" ], [ "Circuit", "de.neemann.digital.draw.elements" ], [ "Tunnel", "de.neemann.digital.draw.elements" ], [ "PinException", "de.neemann.digital.draw.elements" ], [ "ElementOrder", "de.neemann.digital.draw.elements" ], [ "VisualElement", "de.neemann.digital.draw.elements" ], [ "Pin", "de.neemann.digital.draw.elements" ], [ "IOState", "de.neemann.digital.draw.elements" ], [ "WireMerger", "de.neemann.digital.draw.elements" ], [ "WireConsistencyChecker", "de.neemann.digital.draw.elements" ], [ "AsyncSequentialClock", "de.neemann.digital.draw.model" ], [ "ModelEntry", "de.neemann.digital.draw.model" ], [ "Net", "de.neemann.digital.draw.model" ], [ "ModelCreator", "de.neemann.digital.draw.model" ], [ "InverterConfig", "de.neemann.digital.draw.model" ], [ "NetList", "de.neemann.digital.draw.model" ], [ "RealTimeClock", "de.neemann.digital.draw.model" ], [ "Polygon", "de.neemann.digital.draw.graphics" ], [ "Orientation", "de.neemann.digital.draw.graphics" ], [ "Vector", "de.neemann.digital.draw.graphics" ], [ "SVGSettings", "de.neemann.digital.draw.graphics" ], [ "Transform", "de.neemann.digital.draw.graphics" ], [ "ColorKey", "de.neemann.digital.draw.graphics" ], [ "ExportFactory", "de.neemann.digital.draw.graphics" ], [ "GraphicsImage", "de.neemann.digital.draw.graphics" ], [ "VectorInterface", "de.neemann.digital.draw.graphics" ], [ "TextFormatSVG", "de.neemann.digital.draw.graphics" ], [ "TransformMatrix", "de.neemann.digital.draw.graphics" ], [ "TextFormatLaTeX", "de.neemann.digital.draw.graphics" ], [ "GraphicMinMax", "de.neemann.digital.draw.graphics" ], [ "GraphicTransform", "de.neemann.digital.draw.graphics" ], [ "ColorScheme", "de.neemann.digital.draw.graphics" ], [ "Style", "de.neemann.digital.draw.graphics" ], [ "GraphicSkipLines", "de.neemann.digital.draw.graphics.linemerger" ], [ "GraphicLineCollector", "de.neemann.digital.draw.graphics.linemerger" ], [ "PolygonConverter", "de.neemann.digital.draw.graphics" ], [ "VectorFloat", "de.neemann.digital.draw.graphics" ], [ "TransformRotate", "de.neemann.digital.draw.graphics" ], [ "Graphic", "de.neemann.digital.draw.graphics" ], [ "ColorStyleHighContrast", "de.neemann.digital.draw.graphics" ], [ "Parser", "de.neemann.digital.draw.graphics.text" ], [ "ParseException", "de.neemann.digital.draw.graphics.text" ], [ "PlainTextFormatter", "de.neemann.digital.draw.graphics.text.formatter" ], [ "SVGFormatter", "de.neemann.digital.draw.graphics.text.formatter" ], [ "GraphicsFormatter", "de.neemann.digital.draw.graphics.text.formatter" ], [ "LaTeXFormatter", "de.neemann.digital.draw.graphics.text.formatter" ], [ "Decorate", "de.neemann.digital.draw.graphics.text.text" ], [ "Text", "de.neemann.digital.draw.graphics.text.text" ], [ "Index", "de.neemann.digital.draw.graphics.text.text" ], [ "Sentence", "de.neemann.digital.draw.graphics.text.text" ], [ "Blank", "de.neemann.digital.draw.graphics.text.text" ], [ "Character", "de.neemann.digital.draw.graphics.text.text" ], [ "ExpressionToText", "de.neemann.digital.draw.graphics.text.text" ], [ "Simple", "de.neemann.digital.draw.graphics.text.text" ], [ "Export", "de.neemann.digital.draw.graphics" ], [ "ColorStyleMonochrome", "de.neemann.digital.draw.graphics" ], [ "TransformTranslate", "de.neemann.digital.draw.graphics" ], [ "GraphicSVG", "de.neemann.digital.draw.graphics" ], [ "GraphicSwing", "de.neemann.digital.draw.graphics" ], [ "PolygonParser", "de.neemann.digital.draw.graphics" ], [ "SVGTokenizer", "de.neemann.digital.draw.graphics" ], [ "GifSequenceWriter", "de.neemann.digital.draw.gif" ], [ "GifExporter", "de.neemann.digital.draw.gif" ], [ "ConfigCache", "de.neemann.digital.toolchain" ], [ "Configuration", "de.neemann.digital.toolchain" ], [ "Command", "de.neemann.digital.toolchain" ], [ "FileToCreate", "de.neemann.digital.toolchain" ] ],
  "tokensProjectClassesNonPrivateStaticNonVoidMethods" : [ [ "getMouse", "de.neemann.gui", "Mouse", "static Mouse getMouse()" ], [ "create", "de.neemann.gui", "IconCreator", "public static Icon create(String name)" ], [ "createImage", "de.neemann.gui", "IconCreator", "public static Image createImage(String name)" ], [ "createImages", "de.neemann.gui", "IconCreator", "public static ArrayList<Image> createImages(String... names)" ], [ "getCTRLMask", "de.neemann.gui", "ToolTipAction", "public static int getCTRLMask()" ], [ "checkForSave", "de.neemann.gui", "ClosingWindowListener", "public static boolean checkForSave(JFrame parent, ConfirmSave confirmSave)" ], [ "getParentWindow", "de.neemann.gui", "ErrorMessage", "public static Window getParentWindow(Component parent)" ], [ "getInstance", "de.neemann.gui", "Screen", "public static Screen getInstance()" ], [ "getDefaultFontScaling", "de.neemann.gui", "Screen", "public static int getDefaultFontScaling()" ], [ "isLinux", "de.neemann.gui", "Screen", "public static boolean isLinux()" ], [ "isMac", "de.neemann.gui", "Screen", "public static boolean isMac()" ], [ "getInstance", "de.neemann.gui", "InfoDialog", "public static InfoDialog getInstance()" ], [ "read", "de.neemann.digital.core.memory.importer", "Importer", "public static DataField read(File hexFile, int dataBits, boolean bigEndian) throws IOException" ], [ "getOriginOf", "de.neemann.digital.core", "ExceptionWithOrigin", "public static String getOriginOf(Throwable e)" ], [ "zMaskString", "de.neemann.digital.core", "ObservableValue", "static String zMaskString(long value, long highZ, int bits)" ], [ "getInstance", "de.neemann.digital.core", "GlobalValues", "public static GlobalValues getInstance()" ], [ "getInstance", "de.neemann.digital.core.io", "MIDIHelper", "public static MIDIHelper getInstance()" ], [ "input", "de.neemann.digital.core.element", "PinInfo", "public static PinInfo input(String name)" ], [ "input", "de.neemann.digital.core.element", "PinInfo", "public static PinInfo input(String name, String description)" ], [ "output", "de.neemann.digital.core.element", "PinInfo", "public static PinInfo output(String name)" ], [ "isInOut", "de.neemann.digital.core.element", "PinDescription", "public static boolean isInOut(Direction a, Direction b)" ], [ "isInOut", "de.neemann.digital.core.element", "Direction", "public static boolean isInOut(Direction a, Direction b)" ], [ "getKeyByName", "de.neemann.digital.core.element", "Keys", "public static Key getKeyByName(String name)" ], [ "getKeys", "de.neemann.digital.core.element", "Keys", "public static Iterable<Key> getKeys()" ], [ "combine", "de.neemann.digital.core.element", "ImmutableList", "public static <T> ImmutableList<T> combine(ImmutableList<T> a, ImmutableList<T> b)" ], [ "createSwitchModel", "de.neemann.digital.core.switching", "PlainSwitch", "static SwitchModel createSwitchModel(ObservableValue input1, ObservableValue input2, ObservableValue output1, ObservableValue output2) throws NodeException" ], [ "createOneToN", "de.neemann.digital.core.wiring", "Splitter", "public static Splitter createOneToN(int bits)" ], [ "createNToOne", "de.neemann.digital.core.wiring", "Splitter", "public static Splitter createNToOne(int bits)" ], [ "ovs", "de.neemann.digital.core", "ObservableValues", "public static ObservableValues ovs(ObservableValue... items)" ], [ "toShortHex", "de.neemann.digital.core", "IntFormat", "public static String toShortHex(long value)" ], [ "up", "de.neemann.digital.core", "Bits", "public static long up(long val, int bits)" ], [ "down", "de.neemann.digital.core", "Bits", "public static long down(long val, int bits)" ], [ "mask", "de.neemann.digital.core", "Bits", "public static long mask(int bits)" ], [ "signedFlagMask", "de.neemann.digital.core", "Bits", "public static long signedFlagMask(int bits)" ], [ "isNegative", "de.neemann.digital.core", "Bits", "public static boolean isNegative(long value, int bits)" ], [ "signExtend", "de.neemann.digital.core", "Bits", "public static long signExtend(long value, int bits)" ], [ "binLn2", "de.neemann.digital.core", "Bits", "public static int binLn2(long b)" ], [ "removeBitFromValue", "de.neemann.digital.core", "Bits", "public static int removeBitFromValue(int value, int bit)" ], [ "decode", "de.neemann.digital.core", "Bits", "public static long decode(String str) throws NumberFormatException" ], [ "decode", "de.neemann.digital.core", "Bits", "public static long decode(String str, boolean parseFloats) throws NumberFormatException" ], [ "decode", "de.neemann.digital.core", "Bits", "public static long decode(String str, int p, int radix) throws NumberFormatException" ], [ "getCode", "de.neemann.digital.core.extern", "Application", "static String getCode(ElementAttributes attr, File root) throws IOException" ], [ "readCode", "de.neemann.digital.core.extern", "Application", "static String readCode(File file) throws IOException" ], [ "create", "de.neemann.digital.core.extern", "Application", "static Application create(Type type, ElementAttributes attr)" ], [ "start", "de.neemann.digital.core.extern", "ProcessStarter", "public static String start(File dir, String... args) throws IOException" ], [ "joinStrings", "de.neemann.digital.core.extern", "ProcessStarter", "public static String joinStrings(String... strings)" ], [ "fromString", "de.neemann.digital.cli.cli", "Argument", "public static Object fromString(String val, Object defValue) throws CLIException" ], [ "fac", "de.neemann.digital.fsm", "Optimizer", "public static long fac(int n)" ], [ "getTimeComplexity", "de.neemann.digital.fsm", "Optimizer", "public static long getTimeComplexity(FSM fsm)" ], [ "calcComplexity", "de.neemann.digital.fsm", "Optimizer", "static int calcComplexity(FSM fsm, boolean out) throws ExpressionException, FiniteStateMachineException, FormatterException" ], [ "blink", "de.neemann.digital.fsm", "FSMDemos", "public static FSM blink()" ], [ "rotDecoder", "de.neemann.digital.fsm", "FSMDemos", "public static FSM rotDecoder()" ], [ "counter", "de.neemann.digital.fsm", "FSMDemos", "public static FSM counter(int n)" ], [ "trafficLight", "de.neemann.digital.fsm", "FSMDemos", "public static FSM trafficLight()" ], [ "trafficLightMedwedew", "de.neemann.digital.fsm", "FSMDemos", "public static FSM trafficLightMedwedew()" ], [ "selCounter", "de.neemann.digital.fsm", "FSMDemos", "public static FSM selCounter()" ], [ "stepper", "de.neemann.digital.fsm", "FSMDemos", "public static FSM stepper()" ], [ "stepperMedwedew", "de.neemann.digital.fsm", "FSMDemos", "public static FSM stepperMedwedew()" ], [ "getxStream", "de.neemann.digital.fsm", "FSM", "public static XStream getxStream()" ], [ "loadFSM", "de.neemann.digital.fsm", "FSM", "public static FSM loadFSM(File filename) throws IOException" ], [ "loadFSM", "de.neemann.digital.fsm", "FSM", "public static FSM loadFSM(InputStream in) throws IOException" ], [ "get", "de.neemann.digital.lang", "Lang", "public static String get(String key, Object... params)" ], [ "getNull", "de.neemann.digital.lang", "Lang", "public static String getNull(String key, Object... params)" ], [ "getBundle", "de.neemann.digital.lang", "Lang", "public static Bundle getBundle()" ], [ "currentLanguage", "de.neemann.digital.lang", "Lang", "public static Language currentLanguage()" ], [ "evalMultilingualContent", "de.neemann.digital.lang", "Lang", "public static String evalMultilingualContent(String text)" ], [ "evalMultilingualContent", "de.neemann.digital.lang", "Lang", "static String evalMultilingualContent(String text, Language currentLanguage)" ], [ "lowest", "de.neemann.digital.testing.parser", "OperatorPrecedence", "public static OperatorPrecedence lowest()" ], [ "addOne", "de.neemann.digital.analyse", "ModelAnalyser", "public static String addOne(String name)" ], [ "readCSV", "de.neemann.digital.analyse", "CSVImporter", "public static TruthTable readCSV(File file) throws IOException" ], [ "readCSV", "de.neemann.digital.analyse", "CSVImporter", "public static TruthTable readCSV(String csv) throws IOException" ], [ "readCSV", "de.neemann.digital.analyse", "CSVImporter", "public static TruthTable readCSV(Reader csv) throws IOException" ], [ "createDoubledValues", "de.neemann.digital.analyse.quinemc", "BoolTableByteArray", "public static BoolTableByteArray createDoubledValues(BoolTable values)" ], [ "simplify", "de.neemann.digital.analyse.quinemc", "QuineMcCluskey", "public static Expression simplify(Expression expression) throws ExpressionException" ], [ "addAnd", "de.neemann.digital.analyse.quinemc", "QuineMcCluskey", "public static Expression addAnd(Expression e, Iterable<TableRow> rows, List<Variable> variables)" ], [ "value", "de.neemann.digital.analyse.quinemc", "ThreeStateValue", "public static ThreeStateValue value(boolean bool)" ], [ "value", "de.neemann.digital.analyse.quinemc", "ThreeStateValue", "public static ThreeStateValue value(int value)" ], [ "doImplicitTypeCasts", "de.neemann.digital.analyse", "SubstituteLibrary", "static Object doImplicitTypeCasts(Class<?> expectedClass, Object val)" ], [ "or", "de.neemann.digital.analyse.expression", "Operation", "public static Expression or(Iterable<Expression> exp)" ], [ "or", "de.neemann.digital.analyse.expression", "Operation", "public static Expression or(Expression... exp)" ], [ "xor", "de.neemann.digital.analyse.expression", "Operation", "public static Expression xor(Expression a, Expression b)" ], [ "orNoMerge", "de.neemann.digital.analyse.expression", "Operation", "public static Expression orNoMerge(Expression... exp)" ], [ "and", "de.neemann.digital.analyse.expression", "Operation", "public static Expression and(Iterable<Expression> exp)" ], [ "and", "de.neemann.digital.analyse.expression", "Operation", "public static Expression and(Expression... exp)" ], [ "andNoMerge", "de.neemann.digital.analyse.expression", "Operation", "public static Expression andNoMerge(Expression... exp)" ], [ "modifyExpression", "de.neemann.digital.analyse.expression.modify", "ExpressionModifier", "static Expression modifyExpression(Expression expression, ExpressionModifier modifier)" ], [ "modifyExpression", "de.neemann.digital.analyse.expression.modify", "ExpressionModifier", "static Expression modifyExpression(Expression expression, ExpressionModifier... modifiers)" ], [ "v", "de.neemann.digital.analyse.expression", "Variable", "public static Variable v(String name)" ], [ "vars", "de.neemann.digital.analyse.expression", "Variable", "public static ArrayList<Variable> vars(int n)" ], [ "vars", "de.neemann.digital.analyse.expression", "Variable", "public static ArrayList<Variable> vars(String... names)" ], [ "isVar", "de.neemann.digital.analyse.expression", "Variable", "public static boolean isVar(Expression e)" ], [ "isVarOrNotVar", "de.neemann.digital.analyse.expression", "Variable", "public static boolean isVarOrNotVar(Expression e)" ], [ "getDefaultFormat", "de.neemann.digital.analyse.expression.format", "FormatToExpression", "public static FormatToExpression getDefaultFormat()" ], [ "defaultFormat", "de.neemann.digital.analyse.expression.format", "FormatToExpression", "public static String defaultFormat(Expression exp)" ], [ "not", "de.neemann.digital.analyse.expression", "Not", "public static Expression not(Expression a)" ], [ "readFromFile", "de.neemann.digital.analyse", "TruthTable", "public static TruthTable readFromFile(File filename) throws IOException" ], [ "create", "de.neemann.digital.analyse", "SplitPinString", "public static SplitPinString create(Signal s)" ], [ "create", "de.neemann.digital.analyse", "SplitPinString", "public static SplitPinString create(String pinStr)" ], [ "checkSuffix", "de.neemann.digital.gui", "SaveAsHelper", "public static File checkSuffix(File filename, String suffix)" ], [ "addF1Traversal", "de.neemann.digital.gui.components", "EditorFactory", "public static <TC extends JTextComponent> TC addF1Traversal(TC text)" ], [ "createUndoManager", "de.neemann.digital.gui.components", "EditorFactory", "public static UndoManager createUndoManager(JTextComponent text)" ], [ "create", "de.neemann.digital.gui.components.modification", "ModifyInsertWires", "public static Modification<Circuit> create(List<Wire> newWires)" ], [ "getToolTipName", "de.neemann.digital.gui.components.modification", "ModificationOfVisualElement", "public static String getToolTipName(VisualElement ve)" ], [ "getTerminal", "de.neemann.digital.gui.components.terminal", "TerminalDialog", "static TerminalInterface getTerminal(Model model, ElementAttributes attr)" ], [ "createList", "de.neemann.digital.gui.components", "CircuitTransferable", "public static ArrayList<Movable> createList(Object data, ShapeFactory shapeFactory) throws IOException" ], [ "createURLStreamHandlerFactory", "de.neemann.digital.gui.components", "ElementHelpDialog", "public static URLStreamHandlerFactory createURLStreamHandlerFactory()" ], [ "getImage", "de.neemann.digital.gui.components", "ElementHelpDialog", "static BufferedImage getImage(String name)" ], [ "getImage", "de.neemann.digital.gui.components", "MyURLStreamHandlerFactory", "static BufferedImage getImage(String name)" ], [ "isSequentialVar", "de.neemann.digital.gui.components.table", "ExpressionListenerJK", "public static String isSequentialVar(String name)" ], [ "getAttrList", "de.neemann.digital.gui.components", "CircuitComponent", "public static ArrayList<Key> getAttrList()" ], [ "raster", "de.neemann.digital.gui.components", "CircuitComponent", "public static Vector raster(Vector pos)" ], [ "createLiveDialog", "de.neemann.digital.gui.components.data", "GraphDialog", "public static GraphDialog createLiveDialog(JFrame owner, Model model, boolean microStep, List<String> ordering, int sampleSize)" ], [ "createColumnsInfo", "de.neemann.digital.gui.components.data", "GraphDialog", "static ValueTable.ColumnInfo[] createColumnsInfo(ArrayList<Signal> signals)" ], [ "create", "de.neemann.digital.gui.components", "CopiedElementLabelRenamer", "static LabelInstance create(VisualElement ve)" ], [ "create", "de.neemann.digital.gui.components", "CopiedElementLabelRenamer", "static LabelInstance create(String elementName, String fullLabel)" ], [ "create", "de.neemann.digital.gui.components", "LabelInstance", "static LabelInstance create(VisualElement ve)" ], [ "create", "de.neemann.digital.gui.components", "LabelInstance", "static LabelInstance create(String elementName, String fullLabel)" ], [ "isExperimentalMode", "de.neemann.digital.gui", "Main", "public static boolean isExperimentalMode()" ], [ "getInstance", "de.neemann.digital.gui", "WindowManager", "public static WindowManager getInstance()" ], [ "getInstance", "de.neemann.digital.gui", "Settings", "public static Settings getInstance()" ], [ "getRange", "de.neemann.digital.hdl.verilog2", "VerilogCreator", "public static String getRange(int bits)" ], [ "getType", "de.neemann.digital.hdl.verilog2", "VerilogCreator", "public static String getType(HDLPort.Direction def, HDLPort.Direction dir, int bits)" ], [ "value", "de.neemann.digital.hdl.verilog2", "VerilogCreator", "public static String value(ExprConstant con)" ], [ "value", "de.neemann.digital.hdl.verilog2", "VerilogCreator", "public static String value(long val, int bits)" ], [ "neededFileName", "de.neemann.digital.hdl.verilog2.lib", "VerilogTemplate", "public static String neededFileName(String elementName)" ], [ "createFromJar", "de.neemann.digital.hdl.hgs", "Parser", "public static Statement createFromJar(String path, ClassLoader cl) throws IOException, ParserException" ], [ "createFromJarStatic", "de.neemann.digital.hdl.hgs", "Parser", "public static Statement createFromJarStatic(String path)" ], [ "isWhiteSpace", "de.neemann.digital.hdl.hgs", "Tokenizer", "public static boolean isWhiteSpace(int c)" ], [ "toLong", "de.neemann.digital.hdl.hgs", "Value", "public static long toLong(Object value) throws HGSEvalException" ], [ "toDouble", "de.neemann.digital.hdl.hgs", "Value", "public static double toDouble(Object value) throws HGSEvalException" ], [ "toInt", "de.neemann.digital.hdl.hgs", "Value", "public static int toInt(Object value) throws HGSEvalException" ], [ "toBool", "de.neemann.digital.hdl.hgs", "Value", "public static boolean toBool(Object value) throws HGSEvalException" ], [ "toString", "de.neemann.digital.hdl.hgs", "Value", "public static String toString(Object value) throws HGSEvalException" ], [ "toArray", "de.neemann.digital.hdl.hgs", "Value", "public static HGSArray toArray(Object value) throws HGSEvalException" ], [ "toMap", "de.neemann.digital.hdl.hgs", "Value", "public static HGSMap toMap(Object value) throws HGSEvalException" ], [ "equals", "de.neemann.digital.hdl.hgs", "Value", "public static boolean equals(Object a, Object b)" ], [ "add", "de.neemann.digital.hdl.hgs", "Value", "public static Object add(Object a, Object b) throws HGSEvalException" ], [ "sub", "de.neemann.digital.hdl.hgs", "Value", "public static Object sub(Object a, Object b) throws HGSEvalException" ], [ "mul", "de.neemann.digital.hdl.hgs", "Value", "public static Object mul(Object a, Object b) throws HGSEvalException" ], [ "div", "de.neemann.digital.hdl.hgs", "Value", "public static Object div(Object a, Object b) throws HGSEvalException" ], [ "or", "de.neemann.digital.hdl.hgs", "Value", "public static Object or(Object a, Object b) throws HGSEvalException" ], [ "xor", "de.neemann.digital.hdl.hgs", "Value", "public static Object xor(Object a, Object b) throws HGSEvalException" ], [ "and", "de.neemann.digital.hdl.hgs", "Value", "public static Object and(Object a, Object b) throws HGSEvalException" ], [ "not", "de.neemann.digital.hdl.hgs", "Value", "public static Object not(Object value) throws HGSEvalException" ], [ "neg", "de.neemann.digital.hdl.hgs", "Value", "public static Object neg(Object value) throws HGSEvalException" ], [ "less", "de.neemann.digital.hdl.hgs", "Value", "public static boolean less(Object a, Object b) throws HGSEvalException" ], [ "lessEqual", "de.neemann.digital.hdl.hgs", "Value", "public static boolean lessEqual(Object a, Object b) throws HGSEvalException" ], [ "trimRight", "de.neemann.digital.hdl.hgs", "Value", "public static String trimRight(String str)" ], [ "trimLeft", "de.neemann.digital.hdl.hgs", "Value", "public static String trimLeft(String str)" ], [ "getType", "de.neemann.digital.hdl.vhdl2", "VHDLCreator", "public static String getType(int bits)" ], [ "value", "de.neemann.digital.hdl.vhdl2", "VHDLCreator", "public static String value(ExprConstant con)" ], [ "value", "de.neemann.digital.hdl.vhdl2", "VHDLCreator", "public static String value(long val, int bits)" ], [ "isTemplate", "de.neemann.digital.hdl.vhdl2.entities", "VHDLTemplate", "public static boolean isTemplate(ElementTypeDescription etd)" ], [ "neededFileName", "de.neemann.digital.hdl.vhdl2.entities", "VHDLTemplate", "public static String neededFileName(String elementName)" ], [ "zero", "de.neemann.digital.hdl.vhdl2.entities", "VHDLTemplateFunctions", "public static String zero(long bits)" ], [ "value", "de.neemann.digital.hdl.vhdl2.entities", "VHDLTemplateFunctions", "public static String value(long val, long bits)" ], [ "genericType", "de.neemann.digital.hdl.vhdl2.entities", "VHDLTemplateFunctions", "public static String genericType(long n)" ], [ "type", "de.neemann.digital.hdl.vhdl2.entities", "VHDLTemplateFunctions", "public static String type(long n)" ], [ "isVar", "de.neemann.digital.hdl.model2.expression", "Expression", "static boolean isVar(Expression expr, HDLNet net)" ], [ "isConstant", "de.neemann.digital.hdl.model2.expression", "ExprConstant", "public static ExprConstant isConstant(HDLNode node)" ], [ "getHighZ", "de.neemann.digital.data", "Value", "public static Value getHighZ()" ], [ "calcBackOffset", "de.neemann.digital.builder.circuit", "FragmentExpression", "static int calcBackOffset(int size, int i)" ], [ "isXNor", "de.neemann.digital.builder.circuit", "CircuitBuilder", "static boolean isXNor(long[] data)" ], [ "isXor", "de.neemann.digital.builder.circuit", "CircuitBuilder", "static boolean isXor(long[] data)" ], [ "getLibPath", "de.neemann.digital.draw.library", "ElementLibrary", "public static File getLibPath()" ], [ "createCustomDescription", "de.neemann.digital.draw.library", "ElementLibrary", "public static ElementTypeDescriptionCustom createCustomDescription(File file, Circuit circuit, ElementLibrary library) throws PinException" ], [ "createDeclarationDefault", "de.neemann.digital.draw.library", "ElementTypeDescriptionCustom", "public static String createDeclarationDefault(Circuit circuit) throws NodeException" ], [ "getInstance", "de.neemann.digital.draw.library", "NumStringComparator", "public static NumStringComparator getInstance()" ], [ "compareStr", "de.neemann.digital.draw.library", "NumStringComparator", "public static int compareStr(String a, String b)" ], [ "createPins", "de.neemann.digital.draw.shapes", "GenericShape", "public static Pins createPins(PinDescriptions inputs, PinDescriptions outputs, boolean invert, InverterConfig ic, boolean wideShape)" ], [ "readStyle", "de.neemann.digital.draw.shapes.custom.svg", "Context", "static Context readStyle(Context context, String style) throws SvgException" ], [ "getOutSize", "de.neemann.digital.draw.shapes", "OutputShape", "public static int getOutSize(boolean small)" ], [ "getOutStyle", "de.neemann.digital.draw.shapes", "OutputShape", "public static Style getOutStyle(boolean small)" ], [ "getOutRad", "de.neemann.digital.draw.shapes", "OutputShape", "public static Vector getOutRad(boolean small)" ], [ "createTransform", "de.neemann.digital.draw.shapes", "SevenShape", "static Transform createTransform(int size)" ], [ "getxStream", "de.neemann.digital.draw.elements", "Circuit", "public static XStream getxStream()" ], [ "loadCircuit", "de.neemann.digital.draw.elements", "Circuit", "public static Circuit loadCircuit(File filename, ShapeFactory shapeFactory) throws IOException" ], [ "loadCircuit", "de.neemann.digital.draw.elements", "Circuit", "public static Circuit loadCircuit(InputStream in, ShapeFactory shapeFactory) throws IOException" ], [ "fixGenerics", "de.neemann.digital.draw.model", "ModelCreator", "public static Circuit fixGenerics(Circuit circuit, LibraryInterface library) throws NodeException, ElementNotFoundException" ], [ "createFromPath", "de.neemann.digital.draw.graphics", "Polygon", "public static Polygon createFromPath(String path)" ], [ "vec", "de.neemann.digital.draw.graphics", "Vector", "public static Vector vec(int x, int y)" ], [ "min", "de.neemann.digital.draw.graphics", "Vector", "public static Vector min(VectorInterface... p)" ], [ "max", "de.neemann.digital.draw.graphics", "Vector", "public static Vector max(VectorInterface... p)" ], [ "width", "de.neemann.digital.draw.graphics", "Vector", "public static Vector width(VectorInterface... p)" ], [ "add", "de.neemann.digital.draw.graphics", "Vector", "public static List<Vector> add(List<Vector> vectors, Vector offs)" ], [ "getInstance", "de.neemann.digital.draw.graphics", "SVGSettings", "public static SVGSettings getInstance()" ], [ "createKeyList", "de.neemann.digital.draw.graphics", "SVGSettings", "public static List<Key> createKeyList()" ], [ "mul", "de.neemann.digital.draw.graphics", "Transform", "static Transform mul(Transform t1, Transform t2)" ], [ "rotate", "de.neemann.digital.draw.graphics", "TransformMatrix", "public static TransformMatrix rotate(double w)" ], [ "scale", "de.neemann.digital.draw.graphics", "TransformMatrix", "public static TransformMatrix scale(float sx, float sy)" ], [ "getTextWidth", "de.neemann.digital.draw.graphics", "GraphicMinMax", "public static int getTextWidth(String text, Style style)" ], [ "getSelected", "de.neemann.digital.draw.graphics", "ColorScheme", "public static ColorScheme getSelected()" ], [ "getWireStyle", "de.neemann.digital.draw.graphics", "Style", "public static Style getWireStyle(Value value)" ], [ "format", "de.neemann.digital.draw.graphics.text.formatter", "PlainTextFormatter", "public static String format(Text text)" ], [ "format", "de.neemann.digital.draw.graphics.text.formatter", "PlainTextFormatter", "public static String format(Text text, FormatToExpression format)" ], [ "format", "de.neemann.digital.draw.graphics.text.formatter", "SVGFormatter", "public static String format(Text text)" ], [ "createFragment", "de.neemann.digital.draw.graphics.text.formatter", "GraphicsFormatter", "public static Fragment createFragment(Graphics2D gr, String text)" ], [ "createFragment", "de.neemann.digital.draw.graphics.text.formatter", "GraphicsFormatter", "public static Fragment createFragment(Graphics2D gr, Expression expression) throws FormatterException" ], [ "createFragment", "de.neemann.digital.draw.graphics.text.formatter", "GraphicsFormatter", "public static Fragment createFragment(FontSizer sizer, Font font, String text)" ], [ "format", "de.neemann.digital.draw.graphics.text.formatter", "LaTeXFormatter", "public static String format(Expression exp)" ], [ "format", "de.neemann.digital.draw.graphics.text.formatter", "LaTeXFormatter", "public static String format(Text text)" ], [ "math", "de.neemann.digital.draw.graphics.text.text", "Decorate", "public static Text math(Text t)" ], [ "escapeXML", "de.neemann.digital.draw.graphics", "GraphicSVG", "public static String escapeXML(String text)" ], [ "getMirrorYOrientation", "de.neemann.digital.draw.graphics", "GraphicSwing", "static int getMirrorYOrientation(Orientation orientation, VectorInterface p1, VectorInterface p2, VectorInterface p3)" ], [ "load", "de.neemann.digital.toolchain", "Configuration", "public static Configuration load(File file) throws IOException" ], [ "load", "de.neemann.digital.toolchain", "Configuration", "public static Configuration load(InputStream in) throws IOException" ] ],
  "tokensProjectClassesNonPrivateStaticAttributes" : [ [ "UNKNOWN", "de.neemann.gui", "InfoDialog", "public static final String UNKNOWN = \"unknown\";" ], [ "DESCRIPTION", "de.neemann.digital.core.pld", "PullDown", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"PullDown\", PullDown.class).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS);" ], [ "DESCRIPTION", "de.neemann.digital.core.pld", "Diode", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Diode.class).addAttribute(Keys.ROTATE).addAttribute(Keys.BLOWN);" ], [ "DESCRIPTION", "de.neemann.digital.core.pld", "DiodeBackward", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(DiodeBackward.class, input(\"in\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BLOWN);" ], [ "DESCRIPTION", "de.neemann.digital.core.pld", "PullUp", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"PullUp\", PullUp.class).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS);" ], [ "DESCRIPTION", "de.neemann.digital.core.pld", "DiodeForward", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(DiodeForward.class, input(\"in\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BLOWN);" ], [ "DESCRIPTION", "de.neemann.digital.core.memory", "RAMSinglePort", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(RAMSinglePort.class, input(\"A\"), input(\"str\"), input(\"C\").setClock(), input(\"ld\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.ADDR_BITS).addAttribute(Keys.INT_FORMAT).addAttribute(Keys.IS_PROGRAM_MEMORY).addAttribute(Keys.LABEL);" ], [ "DESCRIPTION", "de.neemann.digital.core.memory", "ROMDualPort", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(ROMDualPort.class, input(\"A1\"), input(\"s1\"), input(\"A2\"), input(\"s2\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.ADDR_BITS).addAttribute(Keys.LABEL).addAttribute(Keys.DATA).addAttribute(Keys.INT_FORMAT).addAttribute(Keys.IS_PROGRAM_MEMORY).addAttribute(Keys.AUTO_RELOAD_ROM).addAttribute(Keys.LAST_DATA_FILE).addAttribute(Keys.BIG_ENDIAN);" ], [ "DESCRIPTION", "de.neemann.digital.core.memory", "RAMDualAccess", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(RAMDualAccess.class, input(\"str\"), input(\"C\").setClock(), input(\"ld\"), input(\"1A\"), input(\"1Din\"), input(\"2A\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.ADDR_BITS).addAttribute(Keys.IS_PROGRAM_MEMORY).addAttribute(Keys.LABEL).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.memory", "CounterPreset", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(CounterPreset.class, input(\"en\"), input(\"C\").setClock(), input(\"dir\"), input(\"in\"), input(\"ld\"), input(\"clr\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.MAX_VALUE).addAttribute(Keys.INVERTER_CONFIG).addAttribute(Keys.LABEL).addAttribute(Keys.VALUE_IS_PROBE).addAttribute(Keys.IS_PROGRAM_COUNTER).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.memory", "RAMDualPort", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(RAMDualPort.class, input(\"A\"), input(\"Din\"), input(\"str\"), input(\"C\").setClock(), input(\"ld\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.ADDR_BITS).addAttribute(Keys.INT_FORMAT).addAttribute(Keys.IS_PROGRAM_MEMORY).addAttribute(Keys.LABEL).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.memory", "Register", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Register.class, input(\"D\"), input(\"C\").setClock(), input(\"en\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).addAttribute(Keys.INVERTER_CONFIG).addAttribute(Keys.IS_PROGRAM_COUNTER).addAttribute(Keys.VALUE_IS_PROBE).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.memory", "LookUpTable", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(LookUpTable.class) {\n\n    @Override\n    public PinDescriptions getInputDescription(ElementAttributes elementAttributes) {\n        int size = elementAttributes.get(Keys.INPUT_COUNT);\n        PinDescription[] names = new PinDescription[size];\n        for (int i = 0; i < size; i++) names[i] = input(Integer.toString(i), Lang.get(\"elem_LookUpTable_pin_in\", i));\n        return new PinDescriptions(names);\n    }\n}.addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.LUT_INPUT_COUNT).addAttribute(Keys.LABEL).addAttribute(Keys.DATA).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.memory", "BlockRAMDualPort", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(BlockRAMDualPort.class, input(\"A\"), input(\"Din\"), input(\"str\"), input(\"C\").setClock()).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.ADDR_BITS).addAttribute(Keys.IS_PROGRAM_MEMORY).addAttribute(Keys.LABEL).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.memory", "Counter", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Counter.class, input(\"en\"), input(\"C\").setClock(), input(\"clr\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.INVERTER_CONFIG).addAttribute(Keys.LABEL).addAttribute(Keys.VALUE_IS_PROBE).addAttribute(Keys.IS_PROGRAM_COUNTER).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.memory", "EEPROM", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(EEPROM.class, input(\"A\"), input(\"CS\"), input(\"WE\").setClock(), input(\"OE\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.ADDR_BITS).addAttribute(Keys.LABEL).addAttribute(Keys.INT_FORMAT).addAttribute(Keys.IS_PROGRAM_MEMORY).addAttribute(Keys.INVERTER_CONFIG).addAttribute(Keys.DATA);" ], [ "DESCRIPTION", "de.neemann.digital.core.memory", "RAMAsync", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(RAMAsync.class, input(\"A\"), input(\"D\"), input(\"we\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.ADDR_BITS).addAttribute(Keys.IS_PROGRAM_MEMORY).addAttribute(Keys.INVERTER_CONFIG).addAttribute(Keys.LABEL).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.memory", "ROM", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(ROM.class, input(\"A\"), input(\"sel\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.ADDR_BITS).addAttribute(Keys.LABEL).addAttribute(Keys.DATA).addAttribute(Keys.INT_FORMAT).addAttribute(Keys.IS_PROGRAM_MEMORY).addAttribute(Keys.AUTO_RELOAD_ROM).addAttribute(Keys.LAST_DATA_FILE).addAttribute(Keys.BIG_ENDIAN).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.memory", "EEPROMDualPort", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(EEPROMDualPort.class, input(\"A\"), input(\"Din\"), input(\"str\"), input(\"C\").setClock(), input(\"ld\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.ADDR_BITS).addAttribute(Keys.INT_FORMAT).addAttribute(Keys.IS_PROGRAM_MEMORY).addAttribute(Keys.LABEL).addAttribute(Keys.DATA);" ], [ "DESCRIPTION", "de.neemann.digital.core.memory", "RAMSinglePortSel", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(RAMSinglePortSel.class, input(\"A\"), input(\"CS\"), input(\"WE\"), input(\"OE\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.ADDR_BITS).addAttribute(Keys.LABEL).addAttribute(Keys.IS_PROGRAM_MEMORY).addAttribute(Keys.INVERTER_CONFIG);" ], [ "DESCRIPTION", "de.neemann.digital.core.memory", "RegisterFile", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(RegisterFile.class, input(\"Din\"), input(\"we\"), input(\"Rw\"), input(\"C\").setClock(), input(\"Ra\"), input(\"Rb\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.ADDR_BITS).addAttribute(Keys.LABEL).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.io", "MIDI", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(MIDI.class) {\n\n    public PinDescriptions getInputDescription(ElementAttributes elementAttributes) throws NodeException {\n        if (elementAttributes.get(Keys.MIDI_PROG_CHANGE))\n            return new PinDescriptions(input(\"N\"), input(\"V\"), input(\"OnOff\"), input(\"PC\"), input(\"en\"), input(\"C\").setClock()).setLangKey(getPinLangKey());\n        else\n            return new PinDescriptions(input(\"N\"), input(\"V\"), input(\"OnOff\"), input(\"en\"), input(\"C\").setClock()).setLangKey(getPinLangKey());\n    }\n}.addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.MIDI_CHANNEL).addAttribute(Keys.MIDI_INSTRUMENT).addAttribute(Keys.MIDI_PROG_CHANGE);" ], [ "DESCRIPTION", "de.neemann.digital.core.io", "RGBLED", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(RGBLED.class, input(\"R\"), input(\"G\"), input(\"B\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).addAttribute(Keys.LED_SIZE);" ], [ "DESCRIPTION", "de.neemann.digital.core.io", "Out", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"Out\", attributes -> new Out(attributes).enforceName(), input(\"in\")) {\n\n    @Override\n    public String getDescription(ElementAttributes elementAttributes) {\n        String d = Lang.evalMultilingualContent(elementAttributes.get(Keys.DESCRIPTION));\n        if (d.length() > 0)\n            return d;\n        else\n            return super.getDescription(elementAttributes);\n    }\n}.addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).addAttribute(Keys.DESCRIPTION).addAttribute(Keys.INT_FORMAT).addAttribute(Keys.PINNUMBER).addAttribute(Keys.ADD_VALUE_TO_GRAPH).addAttribute(Keys.IN_OUT_SMALL).supportsHDL();" ], [ "LEDDESCRIPTION", "de.neemann.digital.core.io", "Out", "public static final ElementTypeDescription LEDDESCRIPTION = new ElementTypeDescription(\"LED\", Out.class, input(\"in\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.LED_SIZE).addAttribute(Keys.COLOR);" ], [ "POLARITYAWARELEDDESCRIPTION", "de.neemann.digital.core.io", "Out", "public static final ElementTypeDescription POLARITYAWARELEDDESCRIPTION = new ElementTypeDescription(\"PolarityAwareLED\", attributes -> new Out(1, 1), input(\"A\"), input(\"C\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.COLOR);" ], [ "SEVENDESCRIPTION", "de.neemann.digital.core.io", "Out", "public static final ElementTypeDescription SEVENDESCRIPTION = new SevenSegTypeDescription();" ], [ "SEVENHEXDESCRIPTION", "de.neemann.digital.core.io", "Out", "public static final ElementTypeDescription SEVENHEXDESCRIPTION = new ElementTypeDescription(\"Seven-Seg-Hex\", attributes -> new Out(4, 1), input(\"d\"), input(\"dp\")).addAttribute(Keys.COLOR).addAttribute(Keys.SEVEN_SEG_SIZE);" ], [ "SIXTEENDESCRIPTION", "de.neemann.digital.core.io", "Out", "public static final ElementTypeDescription SIXTEENDESCRIPTION = new ElementTypeDescription(\"SixteenSeg\", attributes -> new Out(16, 1), input(\"led\"), input(\"dp\")).addAttribute(Keys.COLOR).addAttribute(Keys.SEVEN_SEG_SIZE);" ], [ "DESCRIPTION", "de.neemann.digital.core.io", "RotEncoder", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(RotEncoder.class).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL);" ], [ "DESCRIPTION", "de.neemann.digital.core.io", "PinControl", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(PinControl.class, input(\"wr\"), input(\"oe\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.MIRROR).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.io", "DipSwitch", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(DipSwitch.class) {\n\n    @Override\n    public String getDescription(ElementAttributes elementAttributes) {\n        String d = Lang.evalMultilingualContent(elementAttributes.get(Keys.DESCRIPTION));\n        if (d.length() > 0)\n            return d;\n        else\n            return super.getDescription(elementAttributes);\n    }\n}.addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.DIP_DEFAULT).addAttribute(Keys.DESCRIPTION);" ], [ "DESCRIPTION", "de.neemann.digital.core.io", "LightBulb", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(LightBulb.class, input(\"A\"), input(\"B\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.COLOR);" ], [ "DESCRIPTION", "de.neemann.digital.core.io", "Probe", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"Probe\", Probe.class, input(\"in\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.INT_FORMAT).addAttribute(Keys.PROBE_MODE).addAttribute(Keys.ADD_VALUE_TO_GRAPH);" ], [ "DESCRIPTION", "de.neemann.digital.core.io", "Button", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Button.class).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.ACTIVE_LOW).addAttribute(Keys.MAP_TO_KEY).addAttribute(Keys.ADD_VALUE_TO_GRAPH);" ], [ "DESCRIPTION", "de.neemann.digital.core.io", "ButtonLED", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(ButtonLED.class, input(\"in\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.ACTIVE_LOW).addAttribute(Keys.MAP_TO_KEY).addAttribute(Keys.COLOR);" ], [ "DESCRIPTION", "de.neemann.digital.core.io", "In", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(In.class) {\n\n    @Override\n    public String getDescription(ElementAttributes elementAttributes) {\n        String d = Lang.evalMultilingualContent(elementAttributes.get(Keys.DESCRIPTION));\n        if (d.length() > 0)\n            return d;\n        else\n            return super.getDescription(elementAttributes);\n    }\n}.addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).addAttribute(Keys.INPUT_DEFAULT).addAttribute(Keys.IS_HIGH_Z).addAttribute(Keys.AVOID_ACTIVE_LOW).addAttribute(Keys.DESCRIPTION).addAttribute(Keys.INT_FORMAT).addAttribute(Keys.PINNUMBER).addAttribute(Keys.ADD_VALUE_TO_GRAPH).addAttribute(Keys.IN_OUT_SMALL).supportsHDL();" ], [ "STEPS", "de.neemann.digital.core.io", "StepperMotorUnipolar", "public static final int STEPS = 72;" ], [ "DESCRIPTION", "de.neemann.digital.core.io", "StepperMotorUnipolar", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(StepperMotorUnipolar.class, input(\"P0\"), input(\"P1\"), input(\"P2\"), input(\"P3\"), input(\"com\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.INVERT_OUTPUT);" ], [ "DESCRIPTION", "de.neemann.digital.core.io", "NotConnected", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(NotConnected.class).addAttribute(Keys.BITS);" ], [ "DESCRIPTION", "de.neemann.digital.core.io", "StepperMotorBipolar", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(StepperMotorBipolar.class, input(\"A+\"), input(\"A-\"), input(\"B+\"), input(\"B-\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.INVERT_OUTPUT);" ], [ "DESCRIPTION", "de.neemann.digital.core.io", "Const", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Const.class).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.VALUE).addAttribute(Keys.INT_FORMAT).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.io", "PowerSupply", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(PowerSupply.class, input(\"VDD\"), input(\"GND\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL);" ], [ "DESCRIPTION", "de.neemann.digital.core.io", "Ground", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Ground.class).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.io", "VDD", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(VDD.class).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).supportsHDL();" ], [ "INSTANCE", "de.neemann.digital.core.io.telnet", "ServerHolder", "public static final ServerHolder INSTANCE = new ServerHolder();" ], [ "DESCRIPTION", "de.neemann.digital.core.io.telnet", "Telnet", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Telnet.class, input(\"in\"), input(\"C\").setClock(), input(\"wr\"), input(\"rd\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.TELNET_ESCAPE).addAttribute(Keys.PORT);" ], [ "BITS", "de.neemann.digital.core.element", "Keys", "public static final Key.KeyBits BITS = new Key.KeyBits(\"Bits\", 1);" ], [ "INPUT_BITS", "de.neemann.digital.core.element", "Keys", "public static final Key.KeyBits INPUT_BITS = new Key.KeyBits(\"inputBits\", 8);" ], [ "OUTPUT_BITS", "de.neemann.digital.core.element", "Keys", "public static final Key.KeyBits OUTPUT_BITS = new Key.KeyBits(\"outputBits\", 16);" ], [ "INPUT_COUNT", "de.neemann.digital.core.element", "Keys", "public static final Key.KeyInteger INPUT_COUNT = new Key.KeyInteger(\"Inputs\", 2).setComboBoxValues(2, 3, 4, 5).setMin(2);" ], [ "LUT_INPUT_COUNT", "de.neemann.digital.core.element", "Keys", "public static final Key.KeyInteger LUT_INPUT_COUNT = new Key.KeyInteger(\"Inputs\", 2).setComboBoxValues(2, 3, 4, 5, 6).setMax(20).setMin(2);" ], [ "MAX_VALUE", "de.neemann.digital.core.element", "Keys", "public static final Key.KeyInteger MAX_VALUE = new Key.KeyInteger(\"maxValue\", 0).setMin(0);" ], [ "DELAY_TIME", "de.neemann.digital.core.element", "Keys", "public static final Key.KeyInteger DELAY_TIME = new Key.KeyInteger(\"delayTime\", 1).setComboBoxValues(1, 2, 3, 4, 5).setMin(1).setMax(20);" ], [ "MONOFLOP_DELAY", "de.neemann.digital.core.element", "Keys", "public static final Key.KeyInteger MONOFLOP_DELAY = new Key.KeyInteger(\"timerDelay\", 1).setMin(1);" ], [ "LABEL", "de.neemann.digital.core.element", "Keys", "public static final Key<String> LABEL = new Key<>(\"Label\", \"\");" ], [ "FONT_SIZE", "de.neemann.digital.core.element", "Keys", "public static final Key<Integer> FONT_SIZE = new Key.KeyInteger(\"textFontSize\", Style.NORMAL.getFontSize()).setComboBoxValues(14, 17, 20, 24, 36, 48, 60).setMin(10).setMax(70);" ], [ "TEXT_ORIENTATION", "de.neemann.digital.core.element", "Keys", "public static final Key<Orientation> TEXT_ORIENTATION = new Key.KeyEnum<>(\"textOrientation\", Orientation.LEFTTOP, Orientation.values()).setSecondary();" ], [ "LED_SIZE", "de.neemann.digital.core.element", "Keys", "public static final Key<Integer> LED_SIZE = new Key.KeyInteger(\"Size\", 1).setComboBoxValues(0, 1, 2, 3, 4, 5).setMin(0).allowGroupEdit().setSecondary();" ], [ "SEVEN_SEG_SIZE", "de.neemann.digital.core.element", "Keys", "public static final Key<Integer> SEVEN_SEG_SIZE = new Key.KeyInteger(\"segSize\", 2).setComboBoxValues(0, 1, 2, 3, 4, 5).setMin(0).allowGroupEdit().useTranslationOf(LED_SIZE);" ], [ "VALUE", "de.neemann.digital.core.element", "Keys", "public static final Key<Long> VALUE = new Key<>(\"Value\", 1L).setAdaptiveIntFormat().allowGroupEdit();" ], [ "DEFAULT", "de.neemann.digital.core.element", "Keys", "public static final Key<Long> DEFAULT = new Key<>(\"Default\", 0L).allowGroupEdit().setSecondary();" ], [ "INPUT_DEFAULT", "de.neemann.digital.core.element", "Keys", "public static final Key<InValue> INPUT_DEFAULT = new Key<>(\"InDefault\", new InValue(0)).setAdaptiveIntFormat().allowGroupEdit().setSecondary();" ], [ "DIP_DEFAULT", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> DIP_DEFAULT = new Key<>(\"dipDefault\", false).allowGroupEdit().setSecondary();" ], [ "COLOR", "de.neemann.digital.core.element", "Keys", "public static final Key<java.awt.Color> COLOR = new Key<>(\"Color\", java.awt.Color.RED).allowGroupEdit();" ], [ "INPUT_SPLIT", "de.neemann.digital.core.element", "Keys", "public static final Key<String> INPUT_SPLIT = new Key<>(\"Input Splitting\", \"4,4\");" ], [ "OUTPUT_SPLIT", "de.neemann.digital.core.element", "Keys", "public static final Key<String> OUTPUT_SPLIT = new Key<>(\"Output Splitting\", \"8\");" ], [ "SPLITTER_SPREADING", "de.neemann.digital.core.element", "Keys", "public static final Key<Integer> SPLITTER_SPREADING = new Key.KeyInteger(\"splitterSpreading\", 1).setComboBoxValues(1, 2, 3, 4).setMin(1).setMax(20).setSecondary();" ], [ "IN_OUT_SMALL", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> IN_OUT_SMALL = new Key<>(\"small\", false).allowGroupEdit().setSecondary();" ], [ "RUN_AT_REAL_TIME", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> RUN_AT_REAL_TIME = new Key<>(\"runRealTime\", false);" ], [ "INVERT_OUTPUT", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> INVERT_OUTPUT = new Key<>(\"invertOutput\", true);" ], [ "FREQUENCY", "de.neemann.digital.core.element", "Keys", "public static final Key<Integer> FREQUENCY = new Key.KeyInteger(\"Frequency\", 1).setComboBoxValues(1, 2, 5, 10, 20, 50, 100, 200, 500, 5000, 50000, Integer.MAX_VALUE).setMin(1).setDependsOn(RUN_AT_REAL_TIME);" ], [ "SELECTOR_BITS", "de.neemann.digital.core.element", "Keys", "public static final Key<Integer> SELECTOR_BITS = new Key.KeyBits(\"Selector Bits\", 1).setMax(8);" ], [ "ADDR_BITS", "de.neemann.digital.core.element", "Keys", "public static final Key<Integer> ADDR_BITS = // needs to have the same default value as INPUT_COUNT!!!  see de.neemann.digital.gui.components.EditorFactory#DataFieldEditor\nnew Key.KeyBits(\"AddrBits\", 2).setMax(24);" ], [ "BLOWN", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> BLOWN = new Key<>(\"Blown\", false).allowGroupEdit();" ], [ "CLOSED", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> CLOSED = new Key<>(\"Closed\", false).allowGroupEdit();" ], [ "SIGNED", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> SIGNED = new Key<>(\"Signed\", false).allowGroupEdit();" ], [ "REMAINDER_POSITIVE", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> REMAINDER_POSITIVE = new Key<>(\"remainderPositive\", true).setDependsOn(SIGNED);" ], [ "DATA", "de.neemann.digital.core.element", "Keys", "public static final Key<DataField> DATA = new Key<>(\"Data\", DataField::new);" ], [ "FLIP_SEL_POSITON", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> FLIP_SEL_POSITON = new Key<>(\"flipSelPos\", false).allowGroupEdit();" ], [ "ROTATE", "de.neemann.digital.core.element", "Keys", "public static final Key<Rotation> ROTATE = new Key<>(\"rotation\", new Rotation(0)).allowGroupEdit().setSecondary();" ], [ "WIDTH", "de.neemann.digital.core.element", "Keys", "public static final Key.KeyInteger WIDTH = new Key.KeyInteger(\"Width\", 3).setMin(2);" ], [ "SHAPE_TYPE", "de.neemann.digital.core.element", "Keys", "public static final Key<CustomCircuitShapeType> SHAPE_TYPE = new Key.KeyEnum<>(\"shapeType\", CustomCircuitShapeType.DEFAULT, CustomCircuitShapeType.values()).setSecondary();" ], [ "LAYOUT_SHAPE_DELTA", "de.neemann.digital.core.element", "Keys", "public static final Key.KeyInteger LAYOUT_SHAPE_DELTA = new Key.KeyInteger(\"layoutShapeDelta\", 0).setMin(0);" ], [ "HEIGHT", "de.neemann.digital.core.element", "Keys", "public static final Key<Integer> HEIGHT = new Key.KeyInteger(\"Height\", 3).setMin(2).setSecondary().setDependsOn(SHAPE_TYPE, cst -> cst.equals(CustomCircuitShapeType.LAYOUT));" ], [ "TERM_WIDTH", "de.neemann.digital.core.element", "Keys", "public static final Key.KeyInteger TERM_WIDTH = new Key.KeyInteger(\"termWidth\", 50).setMin(10);" ], [ "TERM_HEIGHT", "de.neemann.digital.core.element", "Keys", "public static final Key.KeyInteger TERM_HEIGHT = new Key.KeyInteger(\"termHeight\", 25).setMin(5);" ], [ "CYCLES", "de.neemann.digital.core.element", "Keys", "public static final Key.KeyInteger CYCLES = new Key.KeyInteger(\"Cycles\", 100000).setComboBoxValues(1000, 10000, 100000, 1000000);" ], [ "ENABLED", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> ENABLED = new Key<>(\"enabled\", true).allowGroupEdit();" ], [ "VALUE_IS_PROBE", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> VALUE_IS_PROBE = new Key<>(\"valueIsProbe\", false).allowGroupEdit().setSecondary();" ], [ "IS_PROGRAM_MEMORY", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> IS_PROGRAM_MEMORY = new Key<>(\"isProgramMemory\", false).setSecondary();" ], [ "IS_PROGRAM_COUNTER", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> IS_PROGRAM_COUNTER = new Key<>(\"isProgramCounter\", false).setSecondary();" ], [ "AUTO_RELOAD_ROM", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> AUTO_RELOAD_ROM = new Key<>(\"autoReload\", false).setSecondary();" ], [ "LAST_DATA_FILE", "de.neemann.digital.core.element", "Keys", "public static final Key<File> LAST_DATA_FILE = new Key.KeyFile(\"lastDataFile\", new File(\"\")).setDependsOn(AUTO_RELOAD_ROM).setSecondary();" ], [ "SHOW_DATA_TABLE", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> SHOW_DATA_TABLE = new Key<>(\"showDataTable\", false).setSecondary();" ], [ "SHOW_DATA_GRAPH", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> SHOW_DATA_GRAPH = new Key<>(\"showDataGraph\", false).setSecondary();" ], [ "SHOW_DATA_GRAPH_MICRO", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> SHOW_DATA_GRAPH_MICRO = new Key<>(\"showDataGraphMicro\", false).setSecondary();" ], [ "ADD_VALUE_TO_GRAPH", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> ADD_VALUE_TO_GRAPH = new Key<>(\"addValueToGraph\", true).allowGroupEdit().setSecondary();" ], [ "MICRO_STEP", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> MICRO_STEP = new Key<>(\"microStep\", false);" ], [ "MAX_STEP_COUNT", "de.neemann.digital.core.element", "Keys", "public static final Key.KeyInteger MAX_STEP_COUNT = new Key.KeyInteger(\"maxStepCount\", 25).setMin(5);" ], [ "SETTINGS_MAX_STEP_COUNT", "de.neemann.digital.core.element", "Keys", "public static final Key<Integer> SETTINGS_MAX_STEP_COUNT = new Key.KeyInteger(\"settingsMaxStepCount\", 1000).setComboBoxValues(500, 1000, 5000, 10000).setMin(500).setSecondary().useTranslationOf(MAX_STEP_COUNT);" ], [ "IS_HIGH_Z", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> IS_HIGH_Z = new Key<>(\"isHighZ\", false).allowGroupEdit().setSecondary();" ], [ "AVOID_ACTIVE_LOW", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> AVOID_ACTIVE_LOW = new Key<>(\"avoidActiveLow\", false).setDependsOn(IS_HIGH_Z).allowGroupEdit().setSecondary();" ], [ "DESCRIPTION", "de.neemann.digital.core.element", "Keys", "public static final Key.LongString DESCRIPTION = new Key.LongString(\"Description\");" ], [ "NETNAME", "de.neemann.digital.core.element", "Keys", "public static final Key<String> NETNAME = new Key<>(\"NetName\", \"\");" ], [ "SETTINGS_IEEE_SHAPES", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> SETTINGS_IEEE_SHAPES = new Key<>(\"IEEEShapes\", !Locale.getDefault().getLanguage().equals(Locale.GERMAN.getLanguage())).setRequiresRestart();" ], [ "SETTINGS_LANGUAGE", "de.neemann.digital.core.element", "Keys", "public static final Key<Language> SETTINGS_LANGUAGE = new Key<>(\"Language\", new Language()).setRequiresRestart();" ], [ "SETTINGS_DEFAULT_TREESELECT", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> SETTINGS_DEFAULT_TREESELECT = new Key<>(\"defTreeSelect\", false);" ], [ "SETTINGS_EXPRESSION_FORMAT", "de.neemann.digital.core.element", "Keys", "public static final Key.KeyEnum<FormatToExpression> SETTINGS_EXPRESSION_FORMAT = new Key.KeyEnum<>(\"ExpressionFormat\", FormatToExpression.UNICODE, FormatToExpression.values(), true);" ], [ "SETTINGS_GRID", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> SETTINGS_GRID = new Key<>(\"grid\", true).setRequiresRepaint();" ], [ "SETTINGS_SHOW_WIRE_BITS", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> SETTINGS_SHOW_WIRE_BITS = new Key<>(\"showWireBits\", false);" ], [ "SETTINGS_MAC_MOUSE", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> SETTINGS_MAC_MOUSE = new Key<>(\"macMouse\", false).setRequiresRestart().setSecondary();" ], [ "SETTINGS_SHOW_TUNNEL_RENAME_DIALOG", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> SETTINGS_SHOW_TUNNEL_RENAME_DIALOG = new Key<>(\"tunnelRenameDialog\", true);" ], [ "SETTINGS_RENAME_LABELS", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> SETTINGS_RENAME_LABELS = new Key<>(\"renameLabels\", true);" ], [ "SETTINGS_OPEN_REMOTE_PORT", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> SETTINGS_OPEN_REMOTE_PORT = new Key<>(\"openRemotePort\", false).setSecondary().setRequiresRestart();" ], [ "SETTINGS_REMOTE_PORT", "de.neemann.digital.core.element", "Keys", "public static final Key<Integer> SETTINGS_REMOTE_PORT = new Key.KeyInteger(\"remotePort\", 41114).setMin(0).setMax(0xffff).setComboBoxValues(41114).setSecondary().setRequiresRestart().setDependsOn(SETTINGS_OPEN_REMOTE_PORT);" ], [ "OSCILLATION_DETECTION_COUNTER", "de.neemann.digital.core.element", "Keys", "public static final Key<Integer> OSCILLATION_DETECTION_COUNTER = new Key.KeyInteger(\"oscillationDetectionCounter\", 1000).setComboBoxValues(1000, 5000, 10000).setMin(1000).setMax(100000);" ], [ "INT_FORMAT", "de.neemann.digital.core.element", "Keys", "public static final Key<IntFormat> INT_FORMAT = new Key.KeyEnum<>(\"intFormat\", IntFormat.def, IntFormat.values()).setSecondary();" ], [ "PROBE_MODE", "de.neemann.digital.core.element", "Keys", "public static final Key<ProbeMode> PROBE_MODE = new Key.KeyEnum<>(\"probeMode\", ProbeMode.VALUE, ProbeMode.values());" ], [ "FIXED_POINT", "de.neemann.digital.core.element", "Keys", "public static final Key<Integer> FIXED_POINT = new Key.KeyInteger(\"fixedPoint\", 4).setMin(1).setMax(64).setDependsOn(INT_FORMAT, intFormat -> intFormat.equals(IntFormat.fixed) || intFormat.equals(IntFormat.fixedSigned)).allowGroupEdit().setSecondary();" ], [ "GRAPHIC_WIDTH", "de.neemann.digital.core.element", "Keys", "public static final Key.KeyInteger GRAPHIC_WIDTH = new Key.KeyInteger(\"graphicWidth\", 160).setMin(4);" ], [ "GRAPHIC_HEIGHT", "de.neemann.digital.core.element", "Keys", "public static final Key.KeyInteger GRAPHIC_HEIGHT = new Key.KeyInteger(\"graphicHeight\", 100).setMin(4);" ], [ "RELAY_NORMALLY_CLOSED", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> RELAY_NORMALLY_CLOSED = new Key<>(\"relayNormallyClosed\", false).allowGroupEdit();" ], [ "POLES", "de.neemann.digital.core.element", "Keys", "public static final Key<Integer> POLES = new Key.KeyInteger(\"poles\", 1).setComboBoxValues(1, 2, 3, 4).setMin(1).allowGroupEdit();" ], [ "BARREL_SHIFTER_MODE", "de.neemann.digital.core.element", "Keys", "public static final Key<BarrelShifterMode> BARREL_SHIFTER_MODE = new Key.KeyEnum<>(\"barrelShifterMode\", BarrelShifterMode.logical, BarrelShifterMode.values());" ], [ "DIRECTION", "de.neemann.digital.core.element", "Keys", "public static final Key<LeftRightFormat> DIRECTION = new Key.KeyEnum<>(\"direction\", LeftRightFormat.left, LeftRightFormat.values());" ], [ "BARREL_SIGNED", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> BARREL_SIGNED = new Key<>(\"barrelSigned\", false);" ], [ "COMMON_CONNECTION", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> COMMON_CONNECTION = new Key<>(\"commonCathode\", false).allowGroupEdit();" ], [ "COMMON_CONNECTION_TYPE", "de.neemann.digital.core.element", "Keys", "public static final Key<CommonConnectionType> COMMON_CONNECTION_TYPE = new Key.KeyEnum<>(\"commonConnectionType\", CommonConnectionType.cathode, CommonConnectionType.values()).setDependsOn(COMMON_CONNECTION).allowGroupEdit();" ], [ "LED_PERSISTENCE", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> LED_PERSISTENCE = new Key<>(\"ledPersistence\", false).allowGroupEdit().setDependsOn(COMMON_CONNECTION);" ], [ "LED_PERSIST_TIME", "de.neemann.digital.core.element", "Keys", "public static final Key<Integer> LED_PERSIST_TIME = new Key.KeyInteger(\"persistTime\", 0).setMin(0).allowGroupEdit();" ], [ "SETTINGS_ATF1502_FITTER", "de.neemann.digital.core.element", "Keys", "public static final Key<File> SETTINGS_ATF1502_FITTER = new Key.KeyFile(\"atf1502Fitter\", new File(\"c:/Wincupl/WinCupl/Fitters\")).setDirectoryOnly(true).setSecondary();" ], [ "SETTINGS_ATMISP", "de.neemann.digital.core.element", "Keys", "public static final Key<File> SETTINGS_ATMISP = new Key.KeyFile(\"ATMISP\", getATMISPPath()).setSecondary();" ], [ "ROW_DATA_BITS", "de.neemann.digital.core.element", "Keys", "public static final Key.KeyBits ROW_DATA_BITS = new Key.KeyBits(\"rowDataBits\", 8);" ], [ "COL_ADDR_BITS", "de.neemann.digital.core.element", "Keys", "public static final Key.KeyBits COL_ADDR_BITS = new Key.KeyBits(\"colAddrBits\", 3);" ], [ "LOCKED_MODE", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> LOCKED_MODE = new Key<>(\"lockedMode\", false);" ], [ "PINNUMBER", "de.neemann.digital.core.element", "Keys", "public static final Key<String> PINNUMBER = new Key<>(\"pinNumber\", \"\").setSecondary();" ], [ "PINCOUNT", "de.neemann.digital.core.element", "Keys", "public static final Key<Integer> PINCOUNT = new Key.KeyInteger(\"pinCount\", 0).setMin(0).setSecondary().setDependsOn(SHAPE_TYPE, st -> st.equals(CustomCircuitShapeType.DIL));" ], [ "INVERTER_CONFIG", "de.neemann.digital.core.element", "Keys", "public static final Key<InverterConfig> INVERTER_CONFIG = new Key<>(\"inverterConfig\", new InverterConfig.Builder().build());" ], [ "BACKGROUND_COLOR", "de.neemann.digital.core.element", "Keys", "public static final Key<java.awt.Color> BACKGROUND_COLOR = new Key<>(\"backgroundColor\", new Color(255, 255, 180, 200));" ], [ "SETTINGS_FONT_SCALING", "de.neemann.digital.core.element", "Keys", "public static final Key<Integer> SETTINGS_FONT_SCALING = new Key.KeyInteger(\"fontSize\", Screen.getDefaultFontScaling()).setComboBoxValues(100, 120, 150, 180, 200, 250, 300).setMin(50).setMax(400).setRequiresRestart().setSecondary();" ], [ "SETTINGS_USE_EQUALS_KEY", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> SETTINGS_USE_EQUALS_KEY;" ], [ "WITH_ENABLE", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> WITH_ENABLE = new Key<>(\"withEnable\", true);" ], [ "FET_UNIDIRECTIONAL", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> FET_UNIDIRECTIONAL = new Key<>(\"unidirectional\", false);" ], [ "ACTIVE_LOW", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> ACTIVE_LOW = new Key<>(\"activeLow\", false).allowGroupEdit();" ], [ "MAP_TO_KEY", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> MAP_TO_KEY = new Key<>(\"mapToKey\", false).allowGroupEdit();" ], [ "SETTINGS_LIBRARY_PATH", "de.neemann.digital.core.element", "Keys", "public static final Key<File> SETTINGS_LIBRARY_PATH = new Key.KeyFile(\"libraryPath\", ElementLibrary.getLibPath()).setDirectoryOnly(true).setSecondary();" ], [ "SETTINGS_JAR_PATH", "de.neemann.digital.core.element", "Keys", "public static final Key<File> SETTINGS_JAR_PATH = new Key.KeyFile(\"jarPath\", new File(\"\")).setSecondary().setRequiresRestart();" ], [ "ROMMANAGER", "de.neemann.digital.core.element", "Keys", "public static final Key<ROMManagerFile> ROMMANAGER = new Key<>(\"romContent\", ROMManagerFile::new).setSecondary();" ], [ "APPLICATION_TYPE", "de.neemann.digital.core.element", "Keys", "public static final Key.KeyEnum<Application.Type> APPLICATION_TYPE = new Key.KeyEnum<>(\"applicationType\", Application.Type.Generic, Application.Type.values());" ], [ "EXTERNAL_INPUTS", "de.neemann.digital.core.element", "Keys", "public static final Key<String> EXTERNAL_INPUTS = new Key<>(\"externalInputs\", \"in\");" ], [ "EXTERNAL_OUTPUTS", "de.neemann.digital.core.element", "Keys", "public static final Key<String> EXTERNAL_OUTPUTS = new Key<>(\"externalOutputs\", \"out\");" ], [ "EXTERNAL_CODE", "de.neemann.digital.core.element", "Keys", "public static final Key.LongString EXTERNAL_CODE = new Key.LongString(\"Code\").setRows(30).setColumns(80).setLineNumbers(true);" ], [ "EXTERNAL_CODE_FILE", "de.neemann.digital.core.element", "Keys", "public static final Key.KeyFile EXTERNAL_CODE_FILE = new Key.KeyFile(\"CodeFile\", new File(\"\"));" ], [ "SETTINGS_GHDL_PATH", "de.neemann.digital.core.element", "Keys", "public static final Key<File> SETTINGS_GHDL_PATH = new Key.KeyFile(\"ghdlPath\", new File(\"ghdl\")).setSecondary();" ], [ "GHDL_OPTIONS", "de.neemann.digital.core.element", "Keys", "public static final Key<String> GHDL_OPTIONS = new Key.LongString(\"ghdlOptions\", \"--std=08 --ieee=synopsys\").setRows(3).setColumns(30).setPanelId(\"Options\");" ], [ "IVERILOG_OPTIONS", "de.neemann.digital.core.element", "Keys", "public static final Key<String> IVERILOG_OPTIONS = new Key.LongString(\"iverilogOptions\", \"\").setRows(3).setColumns(30).setPanelId(\"Options\");" ], [ "SETTINGS_IVERILOG_PATH", "de.neemann.digital.core.element", "Keys", "public static final Key<File> SETTINGS_IVERILOG_PATH = new Key.KeyFile(\"iverilogPath\", new File(\"iverilog\")).setSecondary();" ], [ "CUSTOM_SHAPE", "de.neemann.digital.core.element", "Keys", "public static final Key<CustomShapeDescription> CUSTOM_SHAPE = new Key<>(\"customShape\", new CustomShapeDescription.Builder().build()).setSecondary().setDependsOn(SHAPE_TYPE, st -> st.equals(CustomCircuitShapeType.CUSTOM));" ], [ "PRELOAD_PROGRAM", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> PRELOAD_PROGRAM = new Key<>(\"preloadProgram\", false).setSecondary();" ], [ "BIG_ENDIAN", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> BIG_ENDIAN = new Key<>(\"bigEndian\", false).setSecondary().setDependsOn(AUTO_RELOAD_ROM);" ], [ "PROGRAM_TO_PRELOAD", "de.neemann.digital.core.element", "Keys", "public static final Key<File> PROGRAM_TO_PRELOAD = new Key.KeyFile(\"preloadProgramFile\", new File(\"\")).setSecondary().setDependsOn(PRELOAD_PROGRAM);" ], [ "BIG_ENDIAN_SETTING", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> BIG_ENDIAN_SETTING = new Key<>(\"bigEndianSetting\", false).setSecondary().useTranslationOf(BIG_ENDIAN).setDependsOn(PRELOAD_PROGRAM);" ], [ "WIDE_SHAPE", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> WIDE_SHAPE = new Key<>(\"wideShape\", false).setSecondary().allowGroupEdit();" ], [ "RECT_WIDTH", "de.neemann.digital.core.element", "Keys", "public static final Key.KeyInteger RECT_WIDTH = new Key.KeyInteger(\"RectWidth\", 3).setMin(2);" ], [ "RECT_HEIGHT", "de.neemann.digital.core.element", "Keys", "public static final Key.KeyInteger RECT_HEIGHT = new Key.KeyInteger(\"RectHeight\", 3).setMin(2);" ], [ "RECT_INSIDE", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> RECT_INSIDE = new Key<>(\"RectInside\", false).setSecondary();" ], [ "RECT_BOTTOM", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> RECT_BOTTOM = new Key<>(\"RectBottom\", false).setSecondary();" ], [ "RECT_RIGHT", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> RECT_RIGHT = new Key<>(\"RectRight\", false).setSecondary();" ], [ "MIDI_CHANNEL", "de.neemann.digital.core.element", "Keys", "public static final Key.KeyInteger MIDI_CHANNEL = new Key.KeyInteger(\"midiChannel\", 1).setMin(1).setMax(16);" ], [ "MIDI_INSTRUMENT", "de.neemann.digital.core.element", "Keys", "public static final Key<String> MIDI_INSTRUMENT = new Key<>(\"midiInstrument\", \"\");" ], [ "MIDI_PROG_CHANGE", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> MIDI_PROG_CHANGE = new Key<>(\"midiProgChange\", false);" ], [ "SETTINGS_TOOLCHAIN_CONFIG", "de.neemann.digital.core.element", "Keys", "public static final Key<File> SETTINGS_TOOLCHAIN_CONFIG = new Key.KeyFile(\"toolChainConfig\", new File(\"\")).setSecondary().setRequiresRestart();" ], [ "GENERIC", "de.neemann.digital.core.element", "Keys", "public static final Key<String> GENERIC = new Key.LongString(\"generic\").setLineNumbers(true).allowGroupEdit();" ], [ "GENERICLARGE", "de.neemann.digital.core.element", "Keys", "public static final Key<String> GENERICLARGE = new Key.LongString(\"generic\").setLineNumbers(true).setRows(20).allowGroupEdit();" ], [ "IS_GENERIC", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> IS_GENERIC = new Key<>(\"isGeneric\", false).setSecondary();" ], [ "SETTINGS_SHOW_TUTORIAL", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> SETTINGS_SHOW_TUTORIAL = new Key<>(\"showTutorial\", true).setSecondary();" ], [ "SETTINGS_WIRETOOLTIP", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> SETTINGS_WIRETOOLTIP = new Key<>(\"wireToolTips\", false);" ], [ "SWITCH_ACTS_AS_INPUT", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> SWITCH_ACTS_AS_INPUT = new Key<>(\"switchActsAsInput\", false).setSecondary();" ], [ "SNAP_TO_GRID", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> SNAP_TO_GRID = new Key<>(\"snapToGrid\", true).setSecondary();" ], [ "MIRROR", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> MIRROR = new Key<>(\"mirror\", false).allowGroupEdit().setSecondary();" ], [ "TESTDATA", "de.neemann.digital.core.element", "Keys", "public static final Key<TestCaseDescription> TESTDATA = new Key<>(\"Testdata\", TestCaseDescription::new);" ], [ "TRIGGER", "de.neemann.digital.core.element", "Keys", "public static final Key.KeyEnum<ScopeTrigger.Trigger> TRIGGER = new Key.KeyEnum<>(\"trigger\", ScopeTrigger.Trigger.both, ScopeTrigger.Trigger.values());" ], [ "PORT", "de.neemann.digital.core.element", "Keys", "public static final Key.KeyInteger PORT = new Key.KeyInteger(\"port\", 23).setMin(1).setMax((1 << 16) - 1);" ], [ "TELNET_ESCAPE", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> TELNET_ESCAPE = new Key<>(\"telnetEscape\", true).allowGroupEdit();" ], [ "SKIP_HDL", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> SKIP_HDL = new Key<>(\"skipHDL\", false).setSecondary();" ], [ "PREFIX", "de.neemann.digital.core.basic", "FanIn", "public static final String PREFIX = \"In_\";" ], [ "DESCRIPTION", "de.neemann.digital.core.basic", "NOr", "public static final ElementTypeDescription DESCRIPTION = new FanInDescription(NOr.class).addAttribute(Keys.WIDE_SHAPE);" ], [ "DESCRIPTION", "de.neemann.digital.core.basic", "And", "public static final ElementTypeDescription DESCRIPTION = new FanInDescription(And.class).addAttribute(Keys.WIDE_SHAPE);" ], [ "DESCRIPTION", "de.neemann.digital.core.basic", "XNOr", "public static final ElementTypeDescription DESCRIPTION = new FanInDescription(XNOr.class).addAttribute(Keys.WIDE_SHAPE);" ], [ "DESCRIPTION", "de.neemann.digital.core.basic", "XOr", "public static final ElementTypeDescription DESCRIPTION = new FanInDescription(XOr.class).addAttribute(Keys.WIDE_SHAPE);" ], [ "DESCRIPTION", "de.neemann.digital.core.basic", "Not", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Not.class, input(\"in\")).addAttribute(Keys.ROTATE).addAttribute(Keys.WIDE_SHAPE).addAttribute(Keys.BITS).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.basic", "NAnd", "public static final ElementTypeDescription DESCRIPTION = new FanInDescription(NAnd.class).addAttribute(Keys.WIDE_SHAPE);" ], [ "DESCRIPTION", "de.neemann.digital.core.basic", "Or", "public static final ElementTypeDescription DESCRIPTION = new FanInDescription(Or.class).addAttribute(Keys.WIDE_SHAPE);" ], [ "STARTED", "de.neemann.digital.core", "ModelEvent", "public static final ModelEvent STARTED = new ModelEvent(ModelEventType.STARTED);" ], [ "CLOSED", "de.neemann.digital.core", "ModelEvent", "public static final ModelEvent CLOSED = new ModelEvent(ModelEventType.CLOSED);" ], [ "POSTCLOSED", "de.neemann.digital.core", "ModelEvent", "public static final ModelEvent POSTCLOSED = new ModelEvent(ModelEventType.POSTCLOSED);" ], [ "STEP", "de.neemann.digital.core", "ModelEvent", "public static final ModelEvent STEP = new ModelEvent(ModelEventType.STEP);" ], [ "CHECKBURN", "de.neemann.digital.core", "ModelEvent", "public static final ModelEvent CHECKBURN = new ModelEvent(ModelEventType.CHECKBURN);" ], [ "MICROSTEP", "de.neemann.digital.core", "ModelEvent", "public static final ModelEvent MICROSTEP = new ModelEvent(ModelEventType.MICROSTEP);" ], [ "RUN_TO_BREAK", "de.neemann.digital.core", "ModelEvent", "public static final ModelEvent RUN_TO_BREAK = new ModelEvent(ModelEventType.RUN_TO_BREAK);" ], [ "RUN_TO_BREAK_TIMEOUT", "de.neemann.digital.core", "ModelEvent", "public static final ModelEvent RUN_TO_BREAK_TIMEOUT = new ModelEvent(ModelEventType.RUN_TO_BREAK_TIMEOUT);" ], [ "BREAK", "de.neemann.digital.core", "ModelEvent", "public static final ModelEvent BREAK = new ModelEvent(ModelEventType.BREAK);" ], [ "DESCRIPTION", "de.neemann.digital.core.switching", "FGPFET", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(FGPFET.class, input(\"G\")).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).addAttribute(Keys.BLOWN);" ], [ "DESCRIPTION", "de.neemann.digital.core.switching", "NFET", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(NFET.class, input(\"G\")).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.BITS).addAttribute(Keys.FET_UNIDIRECTIONAL).addAttribute(Keys.LABEL);" ], [ "DESCRIPTION", "de.neemann.digital.core.switching", "FGNFET", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(FGNFET.class, input(\"G\")).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).addAttribute(Keys.BLOWN);" ], [ "DESCRIPTION", "de.neemann.digital.core.switching", "PFET", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(PFET.class, input(\"G\")).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.BITS).addAttribute(Keys.FET_UNIDIRECTIONAL).addAttribute(Keys.LABEL);" ], [ "DESCRIPTION", "de.neemann.digital.core.switching", "TransGate", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(TransGate.class, input(\"S\"), input(\"~S\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS);" ], [ "DESCRIPTION", "de.neemann.digital.core.switching", "SwitchDT", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(SwitchDT.class).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).addAttribute(Keys.POLES);" ], [ "DESCRIPTION", "de.neemann.digital.core.switching", "Relay", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Relay.class, input(\"in1\"), input(\"in2\")).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).addAttribute(Keys.POLES).addAttribute(Keys.RELAY_NORMALLY_CLOSED);" ], [ "DESCRIPTION", "de.neemann.digital.core.switching", "RelayDT", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(RelayDT.class, input(\"in1\"), input(\"in2\")).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).addAttribute(Keys.POLES);" ], [ "DESCRIPTION", "de.neemann.digital.core.switching", "Switch", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Switch.class).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).addAttribute(Keys.POLES).addAttribute(Keys.CLOSED).addAttribute(Keys.SWITCH_ACTS_AS_INPUT);" ], [ "DESCRIPTION", "de.neemann.digital.core.switching", "Fuse", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Fuse.class).addAttribute(Keys.ROTATE).addAttribute(Keys.BLOWN);" ], [ "DESCRIPTION", "de.neemann.digital.core.wiring", "Reset", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"Reset\", Reset.class).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.INVERT_OUTPUT).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.wiring", "Stop", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Stop.class, input(\"stop\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.INVERTER_CONFIG);" ], [ "DESCRIPTION", "de.neemann.digital.core.wiring", "Decoder", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Decoder.class, input(\"sel\")).addAttribute(Keys.ROTATE).addAttribute(Keys.SELECTOR_BITS).addAttribute(Keys.FLIP_SEL_POSITON).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.wiring", "Delay", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Delay.class, input(\"in\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.DELAY_TIME);" ], [ "DESCRIPTION", "de.neemann.digital.core.wiring", "Driver", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Driver.class, input(\"in\"), input(\"sel\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.FLIP_SEL_POSITON).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.wiring", "DriverInvSel", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(DriverInvSel.class, input(\"in\"), input(\"sel\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.FLIP_SEL_POSITON).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.wiring", "PriorityEncoder", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(PriorityEncoder.class) {\n\n    @Override\n    public PinDescriptions getInputDescription(ElementAttributes elementAttributes) {\n        int inputs = 1 << elementAttributes.get(Keys.SELECTOR_BITS);\n        PinDescription[] names = new PinDescription[inputs];\n        for (int i = 0; i < inputs; i++) names[i] = input(\"in\" + i, Lang.get(\"elem_PriorityEncoder_input\", i));\n        return new PinDescriptions(names);\n    }\n}.addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.SELECTOR_BITS).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.wiring", "BusSplitter", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(BusSplitter.class, input(\"OE\")).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.BITS).addAttribute(Keys.SPLITTER_SPREADING);" ], [ "DESCRIPTION", "de.neemann.digital.core.wiring", "Splitter", "public static final ElementTypeDescription DESCRIPTION = new SplitterTypeDescription().addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.INPUT_SPLIT).addAttribute(Keys.OUTPUT_SPLIT).addAttribute(Keys.SPLITTER_SPREADING).setShortName(\"\").supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.wiring", "Multiplexer", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Multiplexer.class) {\n\n    @Override\n    public PinDescriptions getInputDescription(ElementAttributes elementAttributes) {\n        int size = 1 << elementAttributes.get(Keys.SELECTOR_BITS);\n        PinDescription[] names = new PinDescription[size + 1];\n        names[0] = input(\"sel\", Lang.get(\"elem_Multiplexer_pin_sel\"));\n        for (int i = 0; i < size; i++) names[i + 1] = input(\"in_\" + i, Lang.get(\"elem_Multiplexer_input\", i));\n        return new PinDescriptions(names);\n    }\n}.addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.SELECTOR_BITS).addAttribute(Keys.FLIP_SEL_POSITON).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.wiring", "BitSelector", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(BitSelector.class, input(\"in\"), input(\"sel\")).addAttribute(Keys.ROTATE).addAttribute(Keys.SELECTOR_BITS).addAttribute(Keys.FLIP_SEL_POSITON).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.wiring", "Break", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Break.class, input(\"brk\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.ENABLED).addAttribute(Keys.CYCLES);" ], [ "DESCRIPTION", "de.neemann.digital.core.wiring", "Clock", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"Clock\", Clock.class).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.RUN_AT_REAL_TIME).addAttribute(Keys.FREQUENCY).addAttribute(Keys.PINNUMBER).addAttribute(Keys.IN_OUT_SMALL).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.wiring", "AsyncSeq", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(AsyncSeq.class).addAttribute(Keys.RUN_AT_REAL_TIME).addAttribute(Keys.FREQUENCY);" ], [ "DESCRIPTION", "de.neemann.digital.core.wiring", "Demultiplexer", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Demultiplexer.class, input(\"sel\"), input(\"in\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.SELECTOR_BITS).addAttribute(Keys.FLIP_SEL_POSITON).addAttribute(Keys.DEFAULT).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.flipflops", "FlipflopDAsync", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"D_FF_AS\", FlipflopDAsync.class, input(\"Set\"), input(\"D\"), input(\"C\").setClock(), input(\"Clr\")).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).addAttribute(Keys.DEFAULT).addAttribute(Keys.INVERTER_CONFIG).addAttribute(Keys.VALUE_IS_PROBE).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.flipflops", "FlipflopD", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"D_FF\", FlipflopD.class, input(\"D\"), input(\"C\").setClock()).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).addAttribute(Keys.DEFAULT).addAttribute(Keys.INVERTER_CONFIG).addAttribute(Keys.VALUE_IS_PROBE).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.flipflops", "FlipflopRSAsync", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"RS_FF_AS\", FlipflopRSAsync.class, input(\"S\"), input(\"R\")).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.LABEL).addAttribute(Keys.DEFAULT).addAttribute(Keys.INVERTER_CONFIG).addAttribute(Keys.VALUE_IS_PROBE);" ], [ "DESCRIPTION", "de.neemann.digital.core.flipflops", "FlipflopT", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"T_FF\", FlipflopT.class) {\n\n    @Override\n    public PinDescriptions getInputDescription(ElementAttributes elementAttributes) throws NodeException {\n        if (elementAttributes.get(Keys.WITH_ENABLE))\n            return new PinDescriptions(input(\"T\"), input(\"C\").setClock()).setLangKey(getPinLangKey());\n        else\n            return new PinDescriptions(input(\"C\").setClock()).setLangKey(getPinLangKey());\n    }\n}.addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.LABEL).addAttribute(Keys.WITH_ENABLE).addAttribute(Keys.DEFAULT).addAttribute(Keys.INVERTER_CONFIG).addAttribute(Keys.VALUE_IS_PROBE);" ], [ "DESCRIPTION", "de.neemann.digital.core.flipflops", "FlipflopJKAsync", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"JK_FF_AS\", FlipflopJKAsync.class, input(\"Set\"), input(\"J\"), input(\"C\").setClock(), input(\"K\"), input(\"Clr\")).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.LABEL).addAttribute(Keys.DEFAULT).addAttribute(Keys.INVERTER_CONFIG).addAttribute(Keys.VALUE_IS_PROBE).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.flipflops", "FlipflopJK", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"JK_FF\", FlipflopJK.class, input(\"J\"), input(\"C\").setClock(), input(\"K\")).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.LABEL).addAttribute(Keys.DEFAULT).addAttribute(Keys.INVERTER_CONFIG).addAttribute(Keys.VALUE_IS_PROBE).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.flipflops", "Monoflop", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Monoflop.class, input(\"C\").setClock(), input(\"R\")).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.LABEL).addAttribute(Keys.DEFAULT).addAttribute(Keys.MONOFLOP_DELAY).addAttribute(Keys.INVERTER_CONFIG).addAttribute(Keys.VALUE_IS_PROBE);" ], [ "DESCRIPTION", "de.neemann.digital.core.flipflops", "FlipflopRS", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"RS_FF\", FlipflopRS.class, input(\"S\"), input(\"C\").setClock(), input(\"R\")).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.LABEL).addAttribute(Keys.DEFAULT).addAttribute(Keys.INVERTER_CONFIG).addAttribute(Keys.VALUE_IS_PROBE);" ], [ "DESCRIPTION", "de.neemann.digital.core.arithmetic", "BarrelShifter", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(BarrelShifter.class, input(\"in\"), input(\"shift\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.BITS).addAttribute(Keys.BARREL_SIGNED).addAttribute(Keys.DIRECTION).addAttribute(Keys.BARREL_SHIFTER_MODE);" ], [ "DESCRIPTION", "de.neemann.digital.core.arithmetic", "Mul", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Mul.class, input(\"a\"), input(\"b\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.SIGNED).addAttribute(Keys.BITS).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.arithmetic", "Neg", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Neg.class, input(\"in\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.arithmetic", "BitExtender", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(BitExtender.class, input(\"in\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.INPUT_BITS).addAttribute(Keys.OUTPUT_BITS).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.arithmetic", "Add", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Add.class, input(\"a\"), input(\"b\"), input(\"c_i\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.BITS).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.arithmetic", "Div", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Div.class, input(\"a\"), input(\"b\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.BITS).addAttribute(Keys.SIGNED).addAttribute(Keys.REMAINDER_POSITIVE);" ], [ "DESCRIPTION", "de.neemann.digital.core.arithmetic", "PRNG", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(PRNG.class, input(\"S\"), input(\"se\"), input(\"ne\"), input(\"C\").setClock()).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.LABEL);" ], [ "DESCRIPTION", "de.neemann.digital.core.arithmetic", "Sub", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Sub.class, input(\"a\"), input(\"b\"), input(\"c_i\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.BITS).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.arithmetic", "Comparator", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Comparator.class, input(\"a\"), input(\"b\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.BITS).addAttribute(Keys.SIGNED).setShortName(\"\").supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.arithmetic", "BitCount", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(BitCount.class, input(\"in\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS);" ], [ "EMPTY_LIST", "de.neemann.digital.core", "ObservableValues", "public static final ObservableValues EMPTY_LIST = new ObservableValues();" ], [ "DEFAULT_FORMATTER", "de.neemann.digital.core", "IntFormat", "public static final ValueFormatter DEFAULT_FORMATTER = ValueFormatterDefault.INSTANCE;" ], [ "HEX_FORMATTER", "de.neemann.digital.core", "IntFormat", "public static final ValueFormatter HEX_FORMATTER = ValueFormatterHex.INSTANCE;" ], [ "DESCRIPTION", "de.neemann.digital.core.extern", "External", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(External.class) {\n\n    @Override\n    public PinDescriptions getInputDescription(ElementAttributes elementAttributes) {\n        return new PortDefinition(elementAttributes.get(Keys.EXTERNAL_INPUTS)).getPinDescriptions(PinDescription.Direction.input);\n    }\n\n    @Override\n    public PinDescriptions getOutputDescriptions(ElementAttributes elementAttributes) {\n        return new PortDefinition(elementAttributes.get(Keys.EXTERNAL_OUTPUTS)).getPinDescriptions(PinDescription.Direction.output);\n    }\n}.addAttribute(Keys.LABEL).addAttribute(Keys.WIDTH).addAttribute(Keys.EXTERNAL_INPUTS).addAttribute(Keys.EXTERNAL_OUTPUTS).addAttribute(Keys.EXTERNAL_CODE).addAttribute(Keys.APPLICATION_TYPE).addAttribute(Keys.GHDL_OPTIONS).addAttribute(Keys.IVERILOG_OPTIONS).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.extern", "ExternalFile", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(ExternalFile.class) {\n\n    @Override\n    public PinDescriptions getInputDescription(ElementAttributes elementAttributes) {\n        return new PortDefinition(elementAttributes.get(Keys.EXTERNAL_INPUTS)).getPinDescriptions(PinDescription.Direction.input);\n    }\n\n    @Override\n    public PinDescriptions getOutputDescriptions(ElementAttributes elementAttributes) {\n        return new PortDefinition(elementAttributes.get(Keys.EXTERNAL_OUTPUTS)).getPinDescriptions(PinDescription.Direction.output);\n    }\n}.addAttribute(Keys.LABEL).addAttribute(Keys.WIDTH).addAttribute(Keys.EXTERNAL_INPUTS).addAttribute(Keys.EXTERNAL_OUTPUTS).addAttribute(Keys.EXTERNAL_CODE_FILE).addAttribute(Keys.APPLICATION_TYPE).addAttribute(Keys.GHDL_OPTIONS).addAttribute(Keys.IVERILOG_OPTIONS).supportsHDL();" ], [ "DEFAULT_RAD", "de.neemann.digital.fsm", "State", "static final int DEFAULT_RAD = 70;" ], [ "INSTANCE", "de.neemann.digital.lang", "Lang", "static final Lang INSTANCE = new Lang();" ], [ "INSTANCE", "de.neemann.digital.lang", "InstanceHolder", "static final Lang INSTANCE = new Lang();" ], [ "DESCRIPTION", "de.neemann.digital.testing", "TestCaseElement", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"Testcase\", TestCaseElement.class).addAttribute(Keys.LABEL).addAttribute(Keys.TESTDATA).addAttribute(Keys.ENABLED).supportsHDL();" ], [ "STATENAMES", "de.neemann.digital.analyse", "TruthTableTableModel", "public static final String[] STATENAMES = new String[] { \"0\", \"1\", \"x\" };" ], [ "ONE", "de.neemann.digital.analyse.expression", "Constant", "public static final Constant ONE = new Constant(true);" ], [ "ZERO", "de.neemann.digital.analyse.expression", "Constant", "public static final Constant ZERO = new Constant(false);" ], [ "PRIMARY", "de.neemann.digital.gui.components", "EditorPanel", "public static final String PRIMARY = \"primary\";" ], [ "SECONDARY", "de.neemann.digital.gui.components", "EditorPanel", "public static final String SECONDARY = \"secondary\";" ], [ "INSTANCE", "de.neemann.digital.gui.components", "EditorFactory", "static final EditorFactory INSTANCE = new EditorFactory();" ], [ "MAX_TERMINAL_STORED", "de.neemann.digital.gui.components.terminal", "ConsoleTerminal", "public static final int MAX_TERMINAL_STORED = 2048;" ], [ "DESCRIPTION", "de.neemann.digital.gui.components.terminal", "Terminal", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Terminal.class, input(\"D\"), input(\"C\").setClock(), input(\"en\")).addAttribute(Keys.TERM_WIDTH).addAttribute(Keys.TERM_HEIGHT).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL);" ], [ "DESCRIPTION", "de.neemann.digital.gui.components.terminal", "Keyboard", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Keyboard.class, input(\"C\").setClock(), input(\"en\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.INVERTER_CONFIG);" ], [ "FAILED_COLOR", "de.neemann.digital.gui.components.testing", "ValueTableDialog", "static final Color FAILED_COLOR = new Color(255, 200, 200);" ], [ "PASSED_COLOR", "de.neemann.digital.gui.components.testing", "ValueTableDialog", "static final Color PASSED_COLOR = new Color(200, 255, 200);" ], [ "ICON_DELETE", "de.neemann.digital.gui.components", "CircuitComponent", "public static final Icon ICON_DELETE = IconCreator.create(\"delete.png\");" ], [ "ICON_COPY", "de.neemann.digital.gui.components", "CircuitComponent", "public static final Icon ICON_COPY = IconCreator.create(\"edit-copy.png\");" ], [ "DESCRIPTION", "de.neemann.digital.gui.components.graphics", "VGA", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(VGA.class, input(\"R\"), input(\"G\"), input(\"B\"), input(\"H\"), input(\"V\"), input(\"C\").setClock()).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL);" ], [ "DESCRIPTION", "de.neemann.digital.gui.components.graphics", "GraphicCard", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(GraphicCard.class, input(\"A\"), input(\"str\"), input(\"C\").setClock(), input(\"ld\"), input(\"B\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).addAttribute(Keys.GRAPHIC_WIDTH).addAttribute(Keys.GRAPHIC_HEIGHT);" ], [ "DESCRIPTION", "de.neemann.digital.gui.components.graphics", "LedMatrix", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(LedMatrix.class, input(\"r-data\"), input(\"c-addr\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.ROW_DATA_BITS).addAttribute(Keys.COL_ADDR_BITS).addAttribute(Keys.COLOR).addAttribute(Keys.LED_PERSISTENCE);" ], [ "DESCRIPTION", "de.neemann.digital.gui.components.data", "ScopeTrigger", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(ScopeTrigger.class, input(\"T\").setClock()).addAttribute(Keys.LABEL).addAttribute(Keys.TRIGGER).addAttribute(Keys.MAX_STEP_COUNT);" ], [ "DATADESCRIPTION", "de.neemann.digital.gui.components.data", "DummyElement", "public static final ElementTypeDescription DATADESCRIPTION = new ElementTypeDescription(\"Data\", DummyElement.class).addAttribute(Keys.MICRO_STEP).addAttribute(Keys.MAX_STEP_COUNT).addAttribute(Keys.SNAP_TO_GRID);" ], [ "TEXTDESCRIPTION", "de.neemann.digital.gui.components.data", "DummyElement", "public static final ElementTypeDescription TEXTDESCRIPTION = new ElementTypeDescription(\"Text\", DummyElement.class).addAttribute(Keys.DESCRIPTION).addAttribute(Keys.ROTATE).addAttribute(Keys.TEXT_ORIENTATION).addAttribute(Keys.FONT_SIZE).addAttribute(Keys.SNAP_TO_GRID);" ], [ "RECTDESCRIPTION", "de.neemann.digital.gui.components.data", "DummyElement", "public static final ElementTypeDescription RECTDESCRIPTION = new ElementTypeDescription(\"Rectangle\", DummyElement.class).addAttribute(Keys.LABEL).addAttribute(Keys.RECT_WIDTH).addAttribute(Keys.RECT_HEIGHT).addAttribute(Keys.RECT_INSIDE).addAttribute(Keys.RECT_BOTTOM).addAttribute(Keys.RECT_RIGHT).addAttribute(Keys.FONT_SIZE).addAttribute(Keys.SNAP_TO_GRID);" ], [ "LEFT", "de.neemann.digital.gui.components", "TextLineNumber", "public final static float LEFT = 0.0f;" ], [ "CENTER", "de.neemann.digital.gui.components", "TextLineNumber", "public final static float CENTER = 0.5f;" ], [ "RIGHT", "de.neemann.digital.gui.components", "TextLineNumber", "public final static float RIGHT = 1.0f;" ], [ "INSTANCE", "de.neemann.digital.gui", "Settings", "static final Settings INSTANCE = new Settings();" ], [ "INSTANCE", "de.neemann.digital.gui", "SettingsHolder", "static final Settings INSTANCE = new Settings();" ], [ "BASE_FILE_KEY", "de.neemann.digital.hdl.hgs", "Context", "public static final String BASE_FILE_KEY = \"baseFile\";" ], [ "DESCRIPTION", "de.neemann.digital.draw.library", "GenericCode", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(GenericCode.class).addAttribute(Keys.GENERICLARGE).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.draw.library", "GenericInitCode", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(GenericInitCode.class).addAttribute(Keys.LABEL).addAttribute(Keys.ENABLED).addAttribute(Keys.GENERIC).supportsHDL();" ], [ "GEN_ARGS_KEY", "de.neemann.digital.draw.library", "ResolveGenerics", "public static final String GEN_ARGS_KEY = \"genArgs\";" ], [ "HEIGHT", "de.neemann.digital.draw.shapes", "ButtonShape", "protected static final int HEIGHT = OUT_SIZE / 2;" ], [ "SIZE2", "de.neemann.digital.draw.shapes", "GenericShape", "public static final int SIZE2 = 10;" ], [ "SIZE", "de.neemann.digital.draw.shapes", "GenericShape", "public static final int SIZE = SIZE2 * 2;" ], [ "CIRC", "de.neemann.digital.draw.shapes", "DILShape", "static final float CIRC = (float) (4 * (Math.sqrt(2) - 1) / 3);" ], [ "DOWNSHIFT", "de.neemann.digital.draw.shapes", "VDDShape", "static final int DOWNSHIFT = 4;" ], [ "CHARGED_GATE", "de.neemann.digital.draw.shapes", "FGFETShapeN", "static final Style CHARGED_GATE = Style.NORMAL.deriveStyle(6, false, Color.RED);" ], [ "OUT_SIZE", "de.neemann.digital.draw.shapes", "OutputShape", "public static final int OUT_SIZE = GenericShape.SIZE * 3 / 4;" ], [ "LATEX_RAD", "de.neemann.digital.draw.shapes", "OutputShape", "static final Vector LATEX_RAD = new Vector(Style.MAXLINETHICK, Style.MAXLINETHICK);" ], [ "WIDTH2", "de.neemann.digital.draw.shapes", "PullDownShape", "public static final int WIDTH2 = SIZE2 - 3;" ], [ "HEIGHT", "de.neemann.digital.draw.shapes", "PullDownShape", "public static final int HEIGHT = SIZE + SIZE / 3;" ], [ "HEIGHT", "de.neemann.digital.draw.shapes", "SevenShape", "static final int HEIGHT = 7;" ], [ "FRAME", "de.neemann.digital.draw.shapes", "SevenShape", "public static final Polygon FRAME = Polygon.createFromPath(\"m -10,1 L 70,1 70,139 -10,139 z\");" ], [ "DESCRIPTION", "de.neemann.digital.draw.elements", "Tunnel", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Tunnel.class, input(\"in\")).addAttribute(Keys.ROTATE).addAttribute(Keys.NETNAME).supportsHDL();" ], [ "HIGH_CONTRAST", "de.neemann.digital.draw.graphics", "SVGSettings", "static final Key<Boolean> HIGH_CONTRAST = new Key<>(\"SVG_highContrast\", false);" ], [ "MONOCHROME", "de.neemann.digital.draw.graphics", "SVGSettings", "static final Key<Boolean> MONOCHROME = new Key<>(\"SVG_monochrome\", false);" ], [ "SMALL_IO", "de.neemann.digital.draw.graphics", "SVGSettings", "static final Key<Boolean> SMALL_IO = new Key<>(\"SVG_smallIO\", false);" ], [ "NO_PIN_MARKER", "de.neemann.digital.draw.graphics", "SVGSettings", "static final Key<Boolean> NO_PIN_MARKER = new Key<>(\"SVG_noPinMarker\", false);" ], [ "THINNER_LINES", "de.neemann.digital.draw.graphics", "SVGSettings", "static final Key<Boolean> THINNER_LINES = new Key<>(\"SVG_thinnerLines\", false);" ], [ "HIDE_TEST", "de.neemann.digital.draw.graphics", "SVGSettings", "static final Key<Boolean> HIDE_TEST = new Key<>(\"SVG_hideTest\", false);" ], [ "NO_SHAPE_FILLING", "de.neemann.digital.draw.graphics", "SVGSettings", "static final Key<Boolean> NO_SHAPE_FILLING = new Key<>(\"SVG_noShapeFilling\", false);" ], [ "LATEX", "de.neemann.digital.draw.graphics", "SVGSettings", "static final Key<Boolean> LATEX = new Key<>(\"SVG_LaTeX\", false);" ], [ "PINS_IN_MATH_MODE", "de.neemann.digital.draw.graphics", "SVGSettings", "static final Key<Boolean> PINS_IN_MATH_MODE = new Key<>(\"SVG_pinsInMathMode\", false).setDependsOn(LATEX);" ], [ "INSTANCE", "de.neemann.digital.draw.graphics", "SVGSettings", "static final SVGSettings INSTANCE = new SVGSettings();" ], [ "INSTANCE", "de.neemann.digital.draw.graphics", "SettingsHolder", "static final SVGSettings INSTANCE = new SVGSettings();" ], [ "COLOR_SCHEME", "de.neemann.digital.draw.graphics", "ColorScheme", "public static final Key<ColorSchemes> COLOR_SCHEME = new Key.KeyEnum<>(\"colorScheme\", ColorSchemes.DEFAULT, ColorSchemes.values()).setRequiresRepaint();" ], [ "CUSTOM_COLOR_SCHEME", "de.neemann.digital.draw.graphics", "ColorScheme", "public static final Key<ColorScheme> CUSTOM_COLOR_SCHEME = new Key<>(\"customColorScheme\", DEFAULT_SCHEME).setDependsOn(COLOR_SCHEME, o -> o.equals(ColorSchemes.CUSTOM)).setRequiresRepaint();" ], [ "MAXLINETHICK", "de.neemann.digital.draw.graphics", "Style", "public static final int MAXLINETHICK = 4;" ], [ "NORMAL", "de.neemann.digital.draw.graphics", "Style", "public static final Style NORMAL = new Builder().build();" ], [ "DISABLED", "de.neemann.digital.draw.graphics", "Style", "public static final Style DISABLED = new Builder().setColor(ColorKey.DISABLED).build();" ], [ "INOUT", "de.neemann.digital.draw.graphics", "Style", "public static final Style INOUT = new Builder(NORMAL).setFontStyle(Font.ITALIC).build();" ], [ "FAILED", "de.neemann.digital.draw.graphics", "Style", "public static final Style FAILED = new Builder(NORMAL).setColor(ColorKey.ERROR).build();" ], [ "PASS", "de.neemann.digital.draw.graphics", "Style", "public static final Style PASS = new Builder(NORMAL).setColor(ColorKey.PASSED).build();" ], [ "NORMAL_TEXT", "de.neemann.digital.draw.graphics", "Style", "public static final Style NORMAL_TEXT = new Builder(NORMAL).setMattersForSize(true).build();" ], [ "THIN", "de.neemann.digital.draw.graphics", "Style", "public static final Style THIN = new Builder(NORMAL).setThickness(LINETHIN).build();" ], [ "THIN_FILLED", "de.neemann.digital.draw.graphics", "Style", "public static final Style THIN_FILLED = new Builder(NORMAL).setThickness(LINETHIN).setFilled(true).build();" ], [ "THICK", "de.neemann.digital.draw.graphics", "Style", "public static final Style THICK = new Builder(NORMAL).setThickness(LINETHICK + LINETHIN).build();" ], [ "WIRE", "de.neemann.digital.draw.graphics", "Style", "public static final Style WIRE = new Builder().setThickness(WIRETHICK).setFilled(true).setColor(ColorKey.WIRE).setEndCap(BasicStroke.CAP_ROUND).build();" ], [ "WIRE_LOW", "de.neemann.digital.draw.graphics", "Style", "public static final Style WIRE_LOW = new Builder(WIRE).setColor(ColorKey.WIRE_LOW).build();" ], [ "WIRE_HIGH", "de.neemann.digital.draw.graphics", "Style", "public static final Style WIRE_HIGH = new Builder(WIRE).setColor(ColorKey.WIRE_HIGH).build();" ], [ "WIRE_HIGHZ", "de.neemann.digital.draw.graphics", "Style", "public static final Style WIRE_HIGHZ = new Builder(WIRE).setColor(ColorKey.WIRE_Z).build();" ], [ "WIRE_OUT", "de.neemann.digital.draw.graphics", "Style", "public static final Style WIRE_OUT = new Builder(WIRE).setColor(ColorKey.WIRE_OUT).build();" ], [ "FILLED", "de.neemann.digital.draw.graphics", "Style", "public static final Style FILLED = new Builder().setFilled(true).build();" ], [ "DASH", "de.neemann.digital.draw.graphics", "Style", "public static final Style DASH = new Builder().setThickness(LINEDASH).setDash(new float[] { 4, 4 }).build();" ], [ "SHAPE_PIN", "de.neemann.digital.draw.graphics", "Style", "public static final Style SHAPE_PIN = new Builder().setThickness(LINETHIN).setColor(ColorKey.PINS).setFontSize(18).build();" ], [ "SHAPE_SPLITTER", "de.neemann.digital.draw.graphics", "Style", "public static final Style SHAPE_SPLITTER = new Builder(SHAPE_PIN).setFontSize(12).build();" ], [ "WIRE_VALUE", "de.neemann.digital.draw.graphics", "Style", "public static final Style WIRE_VALUE = new Builder(SHAPE_SPLITTER).setColor(ColorKey.WIRE_VALUE).build();" ], [ "WIRE_BITS", "de.neemann.digital.draw.graphics", "Style", "public static final Style WIRE_BITS = new Builder(SHAPE_SPLITTER).setColor(ColorKey.WIRE).build();" ], [ "HIGHLIGHT", "de.neemann.digital.draw.graphics", "Style", "public static final Style HIGHLIGHT = new Builder(NORMAL).setColor(ColorKey.HIGHLIGHT).setEndCap(BasicStroke.CAP_ROUND).build();" ], [ "ERROR", "de.neemann.digital.draw.graphics", "Style", "public static final Style ERROR = new Builder(NORMAL).setColor(ColorKey.ERROR).setEndCap(BasicStroke.CAP_ROUND).build();" ], [ "BLANK", "de.neemann.digital.draw.graphics.text.text", "Blank", "public static final Blank BLANK = new Blank();" ], [ "LOOK_AT_ALIAS", "de.neemann.digital.toolchain", "Configuration", "static final String LOOK_AT_ALIAS = \"lookAt\";" ], [ "REF_ALIAS", "de.neemann.digital.toolchain", "Configuration", "static final String REF_ALIAS = \"ref\";" ] ],
  "tokensMethodJavadocValues" : [ ],
  "tokensMethodArguments" : [ [ "name", "java.lang", "String" ], [ "expression", "de.neemann.digital.analyse.expression", "Expression" ] ],
  "tokensMethodVariablesNonPrivateNonStaticNonVoidMethods" : [ [ "getInputs", "de.neemann.digital.builder.Gal16v8", "BuilderCollectorGAL", "public ArrayList<String> getInputs()" ], [ "getCombinatorial", "de.neemann.digital.builder.Gal16v8", "BuilderCollectorGAL", "public Map<String, Expression> getCombinatorial()" ], [ "addCombinatorial", "de.neemann.digital.builder.Gal16v8", "BuilderCollectorGAL", "public BuilderCollector addCombinatorial(String name, Expression expression) throws BuilderException" ], [ "clone", "java.lang", "Object", "protected native Object clone() throws CloneNotSupportedException" ], [ "addSequential", "de.neemann.digital.builder.Gal16v8", "BuilderCollectorGAL", "public BuilderCollector addSequential(String name, Expression expression) throws BuilderException" ], [ "addCombinatorial", "de.neemann.digital.builder", "BuilderInterface", "public abstract T addCombinatorial(String arg0, Expression arg1) throws BuilderException" ], [ "addSequential", "de.neemann.digital.builder", "BuilderInterface", "public abstract T addSequential(String arg0, Expression arg1) throws BuilderException" ], [ "getOutputs", "de.neemann.digital.builder.Gal16v8", "BuilderCollectorGAL", "public ArrayList<String> getOutputs()" ], [ "getRegistered", "de.neemann.digital.builder.Gal16v8", "BuilderCollectorGAL", "public Map<String, Expression> getRegistered()" ], [ "equals", "java.lang", "Object", "public boolean equals(Object arg0)" ], [ "getClass", "java.lang", "Object", "public final native Class<? extends Object> getClass()" ], [ "hashCode", "java.lang", "Object", "public native int hashCode()" ], [ "toString", "java.lang", "Object", "public String toString()" ], [ "length", "java.lang", "String", "public int length()" ], [ "transform", "java.lang", "String", "public <R> R transform(Function<? super String, ? extends R> arg0)" ], [ "compareTo", "java.lang", "String", "public int compareTo(String arg0)" ], [ "split", "java.lang", "String", "public String[] split(String arg0, int arg1)" ], [ "equalsIgnoreCase", "java.lang", "String", "public boolean equalsIgnoreCase(String arg0)" ], [ "replaceAll", "java.lang", "String", "public String replaceAll(String arg0, String arg1)" ], [ "formatted", "java.lang", "String", "public String formatted(Object[] arg0)" ], [ "replace", "java.lang", "String", "public String replace(CharSequence arg0, CharSequence arg1)" ], [ "equals", "java.lang", "String", "public boolean equals(Object arg0)" ], [ "stripLeading", "java.lang", "String", "public String stripLeading()" ], [ "contentEquals", "java.lang", "String", "public boolean contentEquals(CharSequence arg0)" ], [ "stripTrailing", "java.lang", "String", "public String stripTrailing()" ], [ "toLowerCase", "java.lang", "String", "public String toLowerCase(Locale arg0)" ], [ "describeConstable", "java.lang", "String", "public Optional<String> describeConstable()" ], [ "toLowerCase", "java.lang", "String", "public String toLowerCase()" ], [ "offsetByCodePoints", "java.lang", "String", "public int offsetByCodePoints(int arg0, int arg1)" ], [ "isLatin1", "java.lang", "String", "boolean isLatin1()" ], [ "lastIndexOf", "java.lang", "String", "public int lastIndexOf(String arg0, int arg1)" ], [ "resolveConstantDesc", "java.lang", "String", "public String resolveConstantDesc(MethodHandles.Lookup arg0)" ], [ "lastIndexOf", "java.lang", "String", "public int lastIndexOf(int arg0, int arg1)" ], [ "indexOf", "java.lang", "String", "public int indexOf(int arg0, int arg1)" ], [ "indexOf", "java.lang", "String", "public int indexOf(String arg0, int arg1)" ], [ "codePointBefore", "java.lang", "String", "public int codePointBefore(int arg0)" ], [ "substring", "java.lang", "String", "public String substring(int arg0, int arg1)" ], [ "strip", "java.lang", "String", "public String strip()" ], [ "lastIndexOf", "java.lang", "String", "public int lastIndexOf(String arg0)" ], [ "isEmpty", "java.lang", "String", "public boolean isEmpty()" ], [ "repeat", "java.lang", "String", "public String repeat(int arg0)" ], [ "value", "java.lang", "String", "byte[] value()" ], [ "replace", "java.lang", "String", "public String replace(char arg0, char arg1)" ], [ "isBlank", "java.lang", "String", "public boolean isBlank()" ], [ "codePointAt", "java.lang", "String", "public int codePointAt(int arg0)" ], [ "startsWith", "java.lang", "String", "public boolean startsWith(String arg0)" ], [ "intern", "java.lang", "String", "public native String intern()" ], [ "coder", "java.lang", "String", "byte coder()" ], [ "replaceFirst", "java.lang", "String", "public String replaceFirst(String arg0, String arg1)" ], [ "charAt", "java.lang", "String", "public char charAt(int arg0)" ], [ "hashCode", "java.lang", "String", "public int hashCode()" ], [ "trim", "java.lang", "String", "public String trim()" ], [ "matches", "java.lang", "String", "public boolean matches(String arg0)" ], [ "toUpperCase", "java.lang", "String", "public String toUpperCase(Locale arg0)" ], [ "chars", "java.lang", "String", "public IntStream chars()" ], [ "subSequence", "java.lang", "String", "public CharSequence subSequence(int arg0, int arg1)" ], [ "toString", "java.lang", "String", "public String toString()" ], [ "codePointCount", "java.lang", "String", "public int codePointCount(int arg0, int arg1)" ], [ "indexOf", "java.lang", "String", "public int indexOf(String arg0)" ], [ "getBytes", "java.lang", "String", "public byte[] getBytes()" ], [ "regionMatches", "java.lang", "String", "public boolean regionMatches(boolean arg0, int arg1, String arg2, int arg3, int arg4)" ], [ "toCharArray", "java.lang", "String", "public char[] toCharArray()" ], [ "endsWith", "java.lang", "String", "public boolean endsWith(String arg0)" ], [ "contains", "java.lang", "String", "public boolean contains(CharSequence arg0)" ], [ "concat", "java.lang", "String", "public String concat(String arg0)" ], [ "lastIndexOf", "java.lang", "String", "public int lastIndexOf(int arg0)" ], [ "translateEscapes", "java.lang", "String", "public String translateEscapes()" ], [ "getBytes", "java.lang", "String", "public byte[] getBytes(String arg0) throws UnsupportedEncodingException" ], [ "split", "java.lang", "String", "public String[] split(String arg0)" ], [ "lines", "java.lang", "String", "public Stream<String> lines()" ], [ "compareToIgnoreCase", "java.lang", "String", "public int compareToIgnoreCase(String arg0)" ], [ "indexOf", "java.lang", "String", "public int indexOf(int arg0)" ], [ "getBytes", "java.lang", "String", "public byte[] getBytes(Charset arg0)" ], [ "startsWith", "java.lang", "String", "public boolean startsWith(String arg0, int arg1)" ], [ "contentEquals", "java.lang", "String", "public boolean contentEquals(StringBuffer arg0)" ], [ "regionMatches", "java.lang", "String", "public boolean regionMatches(int arg0, String arg1, int arg2, int arg3)" ], [ "substring", "java.lang", "String", "public String substring(int arg0)" ], [ "toUpperCase", "java.lang", "String", "public String toUpperCase()" ], [ "codePoints", "java.lang", "String", "public IntStream codePoints()" ], [ "indent", "java.lang", "String", "public String indent(int arg0)" ], [ "stripIndent", "java.lang", "String", "public String stripIndent()" ], [ "compareTo", "java.lang", "Comparable", "public abstract int compareTo(T arg0)" ], [ "length", "java.lang", "CharSequence", "public abstract int length()" ], [ "codePoints", "java.lang", "CharSequence", "public default IntStream codePoints()" ], [ "toString", "java.lang", "CharSequence", "public abstract String toString()" ], [ "subSequence", "java.lang", "CharSequence", "public abstract CharSequence subSequence(int arg0, int arg1)" ], [ "chars", "java.lang", "CharSequence", "public default IntStream chars()" ], [ "isEmpty", "java.lang", "CharSequence", "public default boolean isEmpty()" ], [ "charAt", "java.lang", "CharSequence", "public abstract char charAt(int arg0)" ], [ "describeConstable", "java.lang.constant", "Constable", "public abstract Optional<? extends ConstantDesc> describeConstable()" ], [ "resolveConstantDesc", "java.lang.constant", "ConstantDesc", "public abstract Object resolveConstantDesc(MethodHandles.Lookup arg0) throws ReflectiveOperationException" ], [ "getOrderString", "de.neemann.digital.analyse.expression", "Expression", "public abstract String getOrderString()" ], [ "copy", "de.neemann.digital.analyse.expression", "Expression", "public abstract Expression copy()" ], [ "calculate", "de.neemann.digital.analyse.expression", "Expression", "public abstract boolean calculate(Context arg0) throws ExpressionException" ], [ "traverse", "de.neemann.digital.analyse.expression", "Expression", "public abstract <V> V traverse(V arg0)" ], [ "getRegistered", "de.neemann.digital.builder", "BuilderCollector", "public Map<String, Expression> getRegistered()" ], [ "addCombinatorial", "de.neemann.digital.builder", "BuilderCollector", "public BuilderCollector addCombinatorial(String arg0, Expression arg1) throws BuilderException" ], [ "getOutputs", "de.neemann.digital.builder", "BuilderCollector", "public ArrayList<String> getOutputs()" ], [ "getCombinatorial", "de.neemann.digital.builder", "BuilderCollector", "public Map<String, Expression> getCombinatorial()" ], [ "addSequential", "de.neemann.digital.builder", "BuilderCollector", "public BuilderCollector addSequential(String arg0, Expression arg1) throws BuilderException" ], [ "getInputs", "de.neemann.digital.builder", "BuilderCollector", "public ArrayList<String> getInputs()" ] ],
  "tokensMethodVariablesNonPrivateNonStaticAttributes" : [ ],
  "tokensOracleVariablesNonPrivateNonStaticNonVoidMethods" : [ ],
  "tokensOracleVariablesNonPrivateNonStaticAttributes" : [ ]
}, {
  "id" : 26711,
  "oracle" : "expression == null;",
  "oracleType" : "EXCEPT_POST",
  "projectName" : "Digital",
  "packageName" : "de.neemann.digital.builder.Gal16v8",
  "className" : "BuilderCollectorGAL",
  "javadocTag" : "",
  "methodJavadoc" : "",
  "methodSourceCode" : "public BuilderCollector addCombinatorial(String name, Expression expression) throws BuilderException{\n    checkOpen();\n    return super.addCombinatorial(name, expression);\n}",
  "classJavadoc" : "/**\n * Used to avoid a double cell allocation if the output of a ff is used as a autput of the state machine.\n * This is the case if a Moore machine is build where the state equals the output.\n * Sometimes this kind of state machines is called a Medwedew machine.\n */",
  "classSourceCode" : "/*\n * Copyright (c) 2019 Helmut Neemann.\n * Use of this source code is governed by the GPL v3 license\n * that can be found in the LICENSE file.\n */\npackage de.neemann.digital.builder.Gal16v8;\n\nimport de.neemann.digital.analyse.expression.Expression;\nimport de.neemann.digital.builder.BuilderCollector;\nimport de.neemann.digital.builder.BuilderException;\nimport de.neemann.digital.builder.PinMap;\n\nimport java.util.ArrayList;\nimport java.util.HashSet;\nimport java.util.Map;\n\n/**\n * Used to avoid a double cell allocation if the output of a ff is used as a autput of the state machine.\n * This is the case if a Moore machine is build where the state equals the output.\n * Sometimes this kind of state machines is called a Medwedew machine.\n */\npublic class BuilderCollectorGAL extends BuilderCollector {\n    private final PinMap pinMap;\n    private HashSet<String> sequentialVars;\n    private boolean doubleCellUsageFixed = false;\n\n    /**\n     * Creates a new instance\n     *\n     * @param pinMap the used pinMap. Is required to handle aliases correctly\n     */\n    public BuilderCollectorGAL(PinMap pinMap) {\n        this.pinMap = pinMap;\n        sequentialVars = new HashSet<>();\n    }\n\n    @Override\n    public BuilderCollector addCombinatorial(String name, Expression expression) throws BuilderException {\n        checkOpen();\n        return super.addCombinatorial(name, expression);\n    }\n\n    @Override\n    public BuilderCollector addSequential(String name, Expression expression) throws BuilderException {\n        checkOpen();\n        sequentialVars.add(name);\n        return super.addSequential(name, expression);\n    }\n\n    private void checkOpen() {\n        if (doubleCellUsageFixed)\n            throw new RuntimeException(\"wrong BuilderCollectorGAL usage!\");\n    }\n\n    private void fixDoubleCellUsage() {\n        if (!doubleCellUsageFixed) {\n\n            super.getCombinatorial().entrySet().removeIf(c -> {\n                if (pinMap.isSimpleAlias(c.getKey(), c.getValue(), sequentialVars)) {\n                    removeOutput(c.getKey());\n                    return true;\n                }\n                return false;\n            });\n\n            doubleCellUsageFixed = true;\n        }\n    }\n\n    @Override\n    public ArrayList<String> getOutputs() {\n        fixDoubleCellUsage();\n        return super.getOutputs();\n    }\n\n    @Override\n    public ArrayList<String> getInputs() {\n        fixDoubleCellUsage();\n        return super.getInputs();\n    }\n\n    @Override\n    public Map<String, Expression> getCombinatorial() {\n        fixDoubleCellUsage();\n        return super.getCombinatorial();\n    }\n\n    @Override\n    public Map<String, Expression> getRegistered() {\n        fixDoubleCellUsage();\n        return super.getRegistered();\n    }\n}\n",
  "tokensGeneralGrammar" : [ "null", "true", "false", ",", ".", ":", ";", "?", "(", ")", "jdVar", "stream", "Arrays", "allMatch", "noneMatch", "anyMatch", "~", ">>", "<<", ">>>", "|", "&", "^", "+", "-", "/", "*", "%", "&&", "||", ">=", "<=", ">", "<", "==", "!=", "instanceof", "class", "methodResultID", "this" ],
  "tokensGeneralValuesGlobalDictionary" : [ [ "0", "int" ], [ "1", "int" ], [ "-1", "int" ], [ "0.0", "double" ], [ "1.0", "double" ], [ "-1.0", "double" ], [ "\"\"", "String" ], [ "\" \"", "String" ] ],
  "tokensProjectClasses" : [ [ "CLI", "de.neemann" ], [ "Mouse", "de.neemann.gui" ], [ "LineBreaker", "de.neemann.gui" ], [ "IconCreator", "de.neemann.gui" ], [ "ConfirmDialogBuilder", "de.neemann.gui" ], [ "Resources", "de.neemann.gui.language" ], [ "Bundle", "de.neemann.gui.language" ], [ "Language", "de.neemann.gui.language" ], [ "ToolTipAction", "de.neemann.gui" ], [ "MyFileChooser", "de.neemann.gui" ], [ "ClosingWindowListener", "de.neemann.gui" ], [ "ErrorMessage", "de.neemann.gui" ], [ "WindowSizeStorage", "de.neemann.gui" ], [ "Screen", "de.neemann.gui" ], [ "ToolTipProvider", "de.neemann.gui" ], [ "InfoDialog", "de.neemann.gui" ], [ "ValueFormatter", "de.neemann.digital.core" ], [ "ModelStateObserver", "de.neemann.digital.core" ], [ "PullDown", "de.neemann.digital.core.pld" ], [ "Diode", "de.neemann.digital.core.pld" ], [ "DiodeBackward", "de.neemann.digital.core.pld" ], [ "PullUp", "de.neemann.digital.core.pld" ], [ "DiodeForward", "de.neemann.digital.core.pld" ], [ "Node", "de.neemann.digital.core" ], [ "RAMSinglePort", "de.neemann.digital.core.memory" ], [ "ROMDualPort", "de.neemann.digital.core.memory" ], [ "RAMDualAccess", "de.neemann.digital.core.memory" ], [ "ByteArrayFromValueArray", "de.neemann.digital.core.memory.importer" ], [ "Importer", "de.neemann.digital.core.memory.importer" ], [ "LogisimReader", "de.neemann.digital.core.memory.importer" ], [ "DataFieldValueArray", "de.neemann.digital.core.memory.importer" ], [ "ByteArrayReader", "de.neemann.digital.core.memory.importer" ], [ "ValueArrayReader", "de.neemann.digital.core.memory.importer" ], [ "IntelHexReader", "de.neemann.digital.core.memory.importer" ], [ "ValueArray", "de.neemann.digital.core.memory.importer" ], [ "BinReader", "de.neemann.digital.core.memory.importer" ], [ "ByteArray", "de.neemann.digital.core.memory.importer" ], [ "MultiValueArray", "de.neemann.digital.core.memory.importer" ], [ "CounterPreset", "de.neemann.digital.core.memory" ], [ "RAMDualPort", "de.neemann.digital.core.memory" ], [ "Register", "de.neemann.digital.core.memory" ], [ "LookUpTable", "de.neemann.digital.core.memory" ], [ "BlockRAMDualPort", "de.neemann.digital.core.memory" ], [ "Counter", "de.neemann.digital.core.memory" ], [ "ROMMangerBase", "de.neemann.digital.core.memory.rom" ], [ "ROMManagerFile", "de.neemann.digital.core.memory.rom" ], [ "ROMManager", "de.neemann.digital.core.memory.rom" ], [ "ROMInterface", "de.neemann.digital.core.memory.rom" ], [ "EEPROM", "de.neemann.digital.core.memory" ], [ "ProgramCounter", "de.neemann.digital.core.memory" ], [ "RAMAsync", "de.neemann.digital.core.memory" ], [ "ROM", "de.neemann.digital.core.memory" ], [ "DataField", "de.neemann.digital.core.memory" ], [ "EEPROMDualPort", "de.neemann.digital.core.memory" ], [ "RAMInterface", "de.neemann.digital.core.memory" ], [ "DataFieldConverter", "de.neemann.digital.core.memory" ], [ "RAMSinglePortSel", "de.neemann.digital.core.memory" ], [ "ProgramMemory", "de.neemann.digital.core.memory" ], [ "RegisterFile", "de.neemann.digital.core.memory" ], [ "ModelStateObserverTyped", "de.neemann.digital.core" ], [ "Observable", "de.neemann.digital.core" ], [ "NodeWithoutDelay", "de.neemann.digital.core" ], [ "ExceptionWithOrigin", "de.neemann.digital.core" ], [ "ObservableValue", "de.neemann.digital.core" ], [ "SpeedTest", "de.neemann.digital.core" ], [ "BurnException", "de.neemann.digital.core" ], [ "GlobalValues", "de.neemann.digital.core" ], [ "MIDI", "de.neemann.digital.core.io" ], [ "RGBLED", "de.neemann.digital.core.io" ], [ "Out", "de.neemann.digital.core.io" ], [ "RotEncoder", "de.neemann.digital.core.io" ], [ "PinControl", "de.neemann.digital.core.io" ], [ "DipSwitch", "de.neemann.digital.core.io" ], [ "CommonConnectionType", "de.neemann.digital.core.io" ], [ "LightBulb", "de.neemann.digital.core.io" ], [ "Probe", "de.neemann.digital.core.io" ], [ "Button", "de.neemann.digital.core.io" ], [ "ButtonLED", "de.neemann.digital.core.io" ], [ "In", "de.neemann.digital.core.io" ], [ "StepperMotorUnipolar", "de.neemann.digital.core.io" ], [ "ProbeMode", "de.neemann.digital.core.io" ], [ "NotConnected", "de.neemann.digital.core.io" ], [ "MIDIHelper", "de.neemann.digital.core.io" ], [ "StepperMotorBipolar", "de.neemann.digital.core.io" ], [ "Const", "de.neemann.digital.core.io" ], [ "PowerSupply", "de.neemann.digital.core.io" ], [ "Ground", "de.neemann.digital.core.io" ], [ "InValue", "de.neemann.digital.core.io" ], [ "VDD", "de.neemann.digital.core.io" ], [ "ServerHolder", "de.neemann.digital.core.io.telnet" ], [ "Telnet", "de.neemann.digital.core.io.telnet" ], [ "ByteBuffer", "de.neemann.digital.core.io.telnet" ], [ "Server", "de.neemann.digital.core.io.telnet" ], [ "ElementAttributes", "de.neemann.digital.core.element" ], [ "Element", "de.neemann.digital.core.element" ], [ "ElementFactory", "de.neemann.digital.core.element" ], [ "PinInfo", "de.neemann.digital.core.element" ], [ "PinDescriptions", "de.neemann.digital.core.element" ], [ "PinDescription", "de.neemann.digital.core.element" ], [ "Keys", "de.neemann.digital.core.element" ], [ "Rotation", "de.neemann.digital.core.element" ], [ "AttributeListener", "de.neemann.digital.core.element" ], [ "Key", "de.neemann.digital.core.element" ], [ "ImmutableList", "de.neemann.digital.core.element" ], [ "ElementTypeDescription", "de.neemann.digital.core.element" ], [ "FanIn", "de.neemann.digital.core.basic" ], [ "NOr", "de.neemann.digital.core.basic" ], [ "And", "de.neemann.digital.core.basic" ], [ "XNOr", "de.neemann.digital.core.basic" ], [ "XOr", "de.neemann.digital.core.basic" ], [ "Not", "de.neemann.digital.core.basic" ], [ "NAnd", "de.neemann.digital.core.basic" ], [ "Function", "de.neemann.digital.core.basic" ], [ "Or", "de.neemann.digital.core.basic" ], [ "ExceptionWithOriginInterface", "de.neemann.digital.core" ], [ "ModelEvent", "de.neemann.digital.core" ], [ "BacktrackException", "de.neemann.digital.core" ], [ "PlainSwitch", "de.neemann.digital.core.switching" ], [ "FGPFET", "de.neemann.digital.core.switching" ], [ "NFET", "de.neemann.digital.core.switching" ], [ "FGNFET", "de.neemann.digital.core.switching" ], [ "PFET", "de.neemann.digital.core.switching" ], [ "PlainSwitchDT", "de.neemann.digital.core.switching" ], [ "TransGate", "de.neemann.digital.core.switching" ], [ "SwitchDT", "de.neemann.digital.core.switching" ], [ "Relay", "de.neemann.digital.core.switching" ], [ "RelayDT", "de.neemann.digital.core.switching" ], [ "Switch", "de.neemann.digital.core.switching" ], [ "Fuse", "de.neemann.digital.core.switching" ], [ "Reset", "de.neemann.digital.core.wiring" ], [ "Stop", "de.neemann.digital.core.wiring" ], [ "Decoder", "de.neemann.digital.core.wiring" ], [ "Delay", "de.neemann.digital.core.wiring" ], [ "Driver", "de.neemann.digital.core.wiring" ], [ "DataBus", "de.neemann.digital.core.wiring.bus" ], [ "SingleBusHandler", "de.neemann.digital.core.wiring.bus" ], [ "ConnectedBusHandler", "de.neemann.digital.core.wiring.bus" ], [ "AbstractBusHandler", "de.neemann.digital.core.wiring.bus" ], [ "BusModelStateObserver", "de.neemann.digital.core.wiring.bus" ], [ "CommonBusValue", "de.neemann.digital.core.wiring.bus" ], [ "DriverInvSel", "de.neemann.digital.core.wiring" ], [ "PriorityEncoder", "de.neemann.digital.core.wiring" ], [ "BusSplitter", "de.neemann.digital.core.wiring" ], [ "Splitter", "de.neemann.digital.core.wiring" ], [ "Multiplexer", "de.neemann.digital.core.wiring" ], [ "BitSelector", "de.neemann.digital.core.wiring" ], [ "Break", "de.neemann.digital.core.wiring" ], [ "Clock", "de.neemann.digital.core.wiring" ], [ "AsyncSeq", "de.neemann.digital.core.wiring" ], [ "Demultiplexer", "de.neemann.digital.core.wiring" ], [ "BitsException", "de.neemann.digital.core" ], [ "NodeInterface", "de.neemann.digital.core" ], [ "NodeException", "de.neemann.digital.core" ], [ "FlipflopDAsync", "de.neemann.digital.core.flipflops" ], [ "FlipflopD", "de.neemann.digital.core.flipflops" ], [ "FlipflopRSAsync", "de.neemann.digital.core.flipflops" ], [ "FlipflopT", "de.neemann.digital.core.flipflops" ], [ "FlipflopJKAsync", "de.neemann.digital.core.flipflops" ], [ "FlipflopJK", "de.neemann.digital.core.flipflops" ], [ "Monoflop", "de.neemann.digital.core.flipflops" ], [ "FlipflopRS", "de.neemann.digital.core.flipflops" ], [ "FlipflopBit", "de.neemann.digital.core.flipflops" ], [ "BarrelShifter", "de.neemann.digital.core.arithmetic" ], [ "Mul", "de.neemann.digital.core.arithmetic" ], [ "Neg", "de.neemann.digital.core.arithmetic" ], [ "BitExtender", "de.neemann.digital.core.arithmetic" ], [ "Add", "de.neemann.digital.core.arithmetic" ], [ "Div", "de.neemann.digital.core.arithmetic" ], [ "LeftRightFormat", "de.neemann.digital.core.arithmetic" ], [ "PRNG", "de.neemann.digital.core.arithmetic" ], [ "Sub", "de.neemann.digital.core.arithmetic" ], [ "BarrelShifterMode", "de.neemann.digital.core.arithmetic" ], [ "Comparator", "de.neemann.digital.core.arithmetic" ], [ "BitCount", "de.neemann.digital.core.arithmetic" ], [ "ObservableValues", "de.neemann.digital.core" ], [ "Value", "de.neemann.digital.core" ], [ "IntFormat", "de.neemann.digital.core" ], [ "SyncAccess", "de.neemann.digital.core" ], [ "Bits", "de.neemann.digital.core" ], [ "ProcessInterface", "de.neemann.digital.core.extern.handler" ], [ "StdIOInterface", "de.neemann.digital.core.extern.handler" ], [ "ApplicationVerilogStdIO", "de.neemann.digital.core.extern" ], [ "Application", "de.neemann.digital.core.extern" ], [ "External", "de.neemann.digital.core.extern" ], [ "Port", "de.neemann.digital.core.extern" ], [ "PortDefinition", "de.neemann.digital.core.extern" ], [ "ApplicationGHDL", "de.neemann.digital.core.extern" ], [ "ApplicationIVerilog", "de.neemann.digital.core.extern" ], [ "ApplicationVHDLStdIO", "de.neemann.digital.core.extern" ], [ "VHDLTokenizer", "de.neemann.digital.core.extern" ], [ "ApplicationGeneric", "de.neemann.digital.core.extern" ], [ "Options", "de.neemann.digital.core.extern" ], [ "VerilogTokenizer", "de.neemann.digital.core.extern" ], [ "ExternalFile", "de.neemann.digital.core.extern" ], [ "ProcessStarter", "de.neemann.digital.core.extern" ], [ "ModelEventType", "de.neemann.digital.core" ], [ "Observer", "de.neemann.digital.core" ], [ "ErrorDetector", "de.neemann.digital.core" ], [ "Statistics", "de.neemann.digital.core.stats" ], [ "Countable", "de.neemann.digital.core.stats" ], [ "Model", "de.neemann.digital.core" ], [ "Signal", "de.neemann.digital.core" ], [ "StringList", "de.neemann.digital" ], [ "XStreamValid", "de.neemann.digital" ], [ "StatsExport", "de.neemann.digital.cli" ], [ "SVGExport", "de.neemann.digital.cli" ], [ "CommandLineTester", "de.neemann.digital.cli" ], [ "CSVWriter", "de.neemann.digital.cli" ], [ "BasicCommand", "de.neemann.digital.cli.cli" ], [ "Argument", "de.neemann.digital.cli.cli" ], [ "CLIException", "de.neemann.digital.cli.cli" ], [ "Muxer", "de.neemann.digital.cli.cli" ], [ "ArgumentKey", "de.neemann.digital.cli.cli" ], [ "NamedCommand", "de.neemann.digital.cli.cli" ], [ "CLICommand", "de.neemann.digital.cli.cli" ], [ "ArgumentBase", "de.neemann.digital.cli.cli" ], [ "CircuitLoader", "de.neemann.digital.cli" ], [ "Main", "de.neemann.digital.cli" ], [ "Modification", "de.neemann.digital.undo" ], [ "Modifications", "de.neemann.digital.undo" ], [ "ModifyException", "de.neemann.digital.undo" ], [ "Copyable", "de.neemann.digital.undo" ], [ "UndoManager", "de.neemann.digital.undo" ], [ "ChangedListener", "de.neemann.digital.undo" ], [ "CircuitRepresentation", "de.neemann.digital.fsm" ], [ "Transition", "de.neemann.digital.fsm" ], [ "Movable", "de.neemann.digital.fsm" ], [ "MouseMovable", "de.neemann.digital.fsm" ], [ "Optimizer", "de.neemann.digital.fsm" ], [ "Permute", "de.neemann.digital.fsm" ], [ "FiniteStateMachineException", "de.neemann.digital.fsm" ], [ "TransitionTableCreator", "de.neemann.digital.fsm" ], [ "ValueParser", "de.neemann.digital.fsm" ], [ "WaitGroup", "de.neemann.digital.fsm" ], [ "FSMComponent", "de.neemann.digital.fsm.gui" ], [ "FSMFrame", "de.neemann.digital.fsm.gui" ], [ "OptimizerDialog", "de.neemann.digital.fsm.gui" ], [ "FSMDemos", "de.neemann.digital.fsm" ], [ "FSM", "de.neemann.digital.fsm" ], [ "State", "de.neemann.digital.fsm" ], [ "Lang", "de.neemann.digital.lang" ], [ "LineListenerResolveDontCare", "de.neemann.digital.testing" ], [ "TestingDataException", "de.neemann.digital.testing" ], [ "UnitTester", "de.neemann.digital.testing" ], [ "FolderTestRunner", "de.neemann.digital.testing" ], [ "TestExecutor", "de.neemann.digital.testing" ], [ "Transitions", "de.neemann.digital.testing" ], [ "TestCaseDescription", "de.neemann.digital.testing" ], [ "TestCaseElement", "de.neemann.digital.testing" ], [ "LineEmitterRepeat", "de.neemann.digital.testing.parser" ], [ "Parser", "de.neemann.digital.testing.parser" ], [ "ValueAppenderBits", "de.neemann.digital.testing.parser" ], [ "ParserException", "de.neemann.digital.testing.parser" ], [ "Context", "de.neemann.digital.testing.parser" ], [ "ModelInitializer", "de.neemann.digital.testing.parser" ], [ "Expression", "de.neemann.digital.testing.parser" ], [ "LineEmitterList", "de.neemann.digital.testing.parser" ], [ "TestRow", "de.neemann.digital.testing.parser" ], [ "LineEmitter", "de.neemann.digital.testing.parser" ], [ "LineEmitterWhile", "de.neemann.digital.testing.parser" ], [ "Tokenizer", "de.neemann.digital.testing.parser" ], [ "LineEmitterSimple", "de.neemann.digital.testing.parser" ], [ "Random", "de.neemann.digital.testing.parser.functions" ], [ "SignExtend", "de.neemann.digital.testing.parser.functions" ], [ "IfThenElse", "de.neemann.digital.testing.parser.functions" ], [ "Function", "de.neemann.digital.testing.parser.functions" ], [ "LineListener", "de.neemann.digital.testing.parser" ], [ "VirtualSignal", "de.neemann.digital.testing.parser" ], [ "ValueAppender", "de.neemann.digital.testing.parser" ], [ "OperatorPrecedence", "de.neemann.digital.testing.parser" ], [ "TestResultListener", "de.neemann.digital.testing" ], [ "MatchedValue", "de.neemann.digital.testing" ], [ "TestResult", "de.neemann.digital.testing" ], [ "MinimizerInterface", "de.neemann.digital.analyse" ], [ "LabelNumbering", "de.neemann.digital.analyse" ], [ "ModelAnalyser", "de.neemann.digital.analyse" ], [ "CSVImporter", "de.neemann.digital.analyse" ], [ "BoolTableExpanded", "de.neemann.digital.analyse" ], [ "TruthTableTableModel", "de.neemann.digital.analyse" ], [ "TableReducer", "de.neemann.digital.analyse.quinemc" ], [ "PrimeSelector", "de.neemann.digital.analyse.quinemc.primeselector" ], [ "BruteForce", "de.neemann.digital.analyse.quinemc.primeselector" ], [ "LargestFirst", "de.neemann.digital.analyse.quinemc.primeselector" ], [ "BruteForceGetAll", "de.neemann.digital.analyse.quinemc.primeselector" ], [ "PrimeSelectorDefault", "de.neemann.digital.analyse.quinemc.primeselector" ], [ "BoolTableByteArray", "de.neemann.digital.analyse.quinemc" ], [ "IndependentChecker", "de.neemann.digital.analyse.quinemc" ], [ "QuineMcCluskey", "de.neemann.digital.analyse.quinemc" ], [ "BoolTableExpression", "de.neemann.digital.analyse.quinemc" ], [ "BoolTableBoolArray", "de.neemann.digital.analyse.quinemc" ], [ "BoolTable", "de.neemann.digital.analyse.quinemc" ], [ "TableRows", "de.neemann.digital.analyse.quinemc" ], [ "ThreeStateValue", "de.neemann.digital.analyse.quinemc" ], [ "QuineMcCluskeyExam", "de.neemann.digital.analyse.quinemc" ], [ "TableRow", "de.neemann.digital.analyse.quinemc" ], [ "TruthTableConverter", "de.neemann.digital.analyse" ], [ "DetermineJKStateMachine", "de.neemann.digital.analyse" ], [ "Parser", "de.neemann.digital.analyse.parser" ], [ "ParseException", "de.neemann.digital.analyse.parser" ], [ "Tokenizer", "de.neemann.digital.analyse.parser" ], [ "ModelAnalyserInfo", "de.neemann.digital.analyse" ], [ "AnalyseException", "de.neemann.digital.analyse" ], [ "DependencyAnalyser", "de.neemann.digital.analyse" ], [ "SubstituteLibrary", "de.neemann.digital.analyse" ], [ "TruthTableFormatterHex", "de.neemann.digital.analyse.format" ], [ "TruthTableFormatter", "de.neemann.digital.analyse.format" ], [ "TruthTableFormatterTestCase", "de.neemann.digital.analyse.format" ], [ "TruthTableFormatterCSV", "de.neemann.digital.analyse.format" ], [ "TruthTableFormatterLaTeX", "de.neemann.digital.analyse.format" ], [ "MinimizerQuineMcCluskey", "de.neemann.digital.analyse" ], [ "ContextFiller", "de.neemann.digital.analyse.expression" ], [ "BitSetter", "de.neemann.digital.analyse.expression" ], [ "ExpressionVisitor", "de.neemann.digital.analyse.expression" ], [ "ContextMap", "de.neemann.digital.analyse.expression" ], [ "ComplexityVisitor", "de.neemann.digital.analyse.expression" ], [ "Operation", "de.neemann.digital.analyse.expression" ], [ "Context", "de.neemann.digital.analyse.expression" ], [ "NInputs", "de.neemann.digital.analyse.expression.modify" ], [ "NOr", "de.neemann.digital.analyse.expression.modify" ], [ "ExpressionModifier", "de.neemann.digital.analyse.expression.modify" ], [ "NAnd", "de.neemann.digital.analyse.expression.modify" ], [ "Constant", "de.neemann.digital.analyse.expression" ], [ "Expression", "de.neemann.digital.analyse.expression" ], [ "Variable", "de.neemann.digital.analyse.expression" ], [ "ExpressionException", "de.neemann.digital.analyse.expression" ], [ "ComplexityInclNotVisitor", "de.neemann.digital.analyse.expression" ], [ "Equals", "de.neemann.digital.analyse.expression" ], [ "FormatToExpression", "de.neemann.digital.analyse.expression.format" ], [ "FormatToTable", "de.neemann.digital.analyse.expression.format" ], [ "Formatter", "de.neemann.digital.analyse.expression.format" ], [ "FormatterException", "de.neemann.digital.analyse.expression.format" ], [ "FormatToTableLatex", "de.neemann.digital.analyse.expression.format" ], [ "Not", "de.neemann.digital.analyse.expression" ], [ "VariableVisitor", "de.neemann.digital.analyse.expression" ], [ "NamedExpression", "de.neemann.digital.analyse.expression" ], [ "MinimizerQuineMcCluskeyExam", "de.neemann.digital.analyse" ], [ "TruthTable", "de.neemann.digital.analyse" ], [ "SplitPinString", "de.neemann.digital.analyse" ], [ "CycleDetector", "de.neemann.digital.analyse" ], [ "DigitalRemoteInterface", "de.neemann.digital.gui" ], [ "TextSearchFilter", "de.neemann.digital.gui" ], [ "ExportZipAction", "de.neemann.digital.gui" ], [ "SettingsBase", "de.neemann.digital.gui" ], [ "DocumentationLocator", "de.neemann.digital.gui" ], [ "InitialTutorial", "de.neemann.digital.gui.tutorial" ], [ "InsertAction", "de.neemann.digital.gui" ], [ "StatusInterface", "de.neemann.digital.gui" ], [ "SearchTextField", "de.neemann.digital.gui" ], [ "SaveAsHelper", "de.neemann.digital.gui" ], [ "FileHistory", "de.neemann.digital.gui" ], [ "ReleaseInfo", "de.neemann.digital.gui.release" ], [ "CheckForNewRelease", "de.neemann.digital.gui.release" ], [ "StateInterface", "de.neemann.digital.gui.state" ], [ "StateManager", "de.neemann.digital.gui.state" ], [ "State", "de.neemann.digital.gui.state" ], [ "CircuitScrollPanel", "de.neemann.digital.gui.components" ], [ "ItemPicker", "de.neemann.digital.gui.components" ], [ "LibraryTreeModel", "de.neemann.digital.gui.components.tree" ], [ "SelectTree", "de.neemann.digital.gui.components.tree" ], [ "WindowPosManager", "de.neemann.digital.gui.components" ], [ "CustomShapeEditor", "de.neemann.digital.gui.components" ], [ "TransformHolder", "de.neemann.digital.gui.components" ], [ "EditorPanel", "de.neemann.digital.gui.components" ], [ "BehavioralFixtureCreator", "de.neemann.digital.gui.components" ], [ "EditorFactory", "de.neemann.digital.gui.components" ], [ "OrderMerger", "de.neemann.digital.gui.components" ], [ "ElementOrderer", "de.neemann.digital.gui.components" ], [ "ModifyMoveSelected", "de.neemann.digital.gui.components.modification" ], [ "ModifyMoveWire", "de.neemann.digital.gui.components.modification" ], [ "ModificationOfWire", "de.neemann.digital.gui.components.modification" ], [ "ModifyDeleteRect", "de.neemann.digital.gui.components.modification" ], [ "ModifyInsertWires", "de.neemann.digital.gui.components.modification" ], [ "ModifyInsertWire", "de.neemann.digital.gui.components.modification" ], [ "ModificationOfVisualElement", "de.neemann.digital.gui.components.modification" ], [ "ModifyCircuitAttributes", "de.neemann.digital.gui.components.modification" ], [ "ModifyDeleteWire", "de.neemann.digital.gui.components.modification" ], [ "ModifyMoveAndRotElement", "de.neemann.digital.gui.components.modification" ], [ "ModifyMeasurementOrdering", "de.neemann.digital.gui.components.modification" ], [ "ModifyDeleteElement", "de.neemann.digital.gui.components.modification" ], [ "ModifyAttribute", "de.neemann.digital.gui.components.modification" ], [ "ModifyAttributes", "de.neemann.digital.gui.components.modification" ], [ "ModifyInsertElement", "de.neemann.digital.gui.components.modification" ], [ "DataEditor", "de.neemann.digital.gui.components" ], [ "CircuitModifierPostClosed", "de.neemann.digital.gui.components" ], [ "CharDeleter", "de.neemann.digital.gui.components.terminal" ], [ "ConsoleTerminal", "de.neemann.digital.gui.components.terminal" ], [ "Terminal", "de.neemann.digital.gui.components.terminal" ], [ "TerminalDialog", "de.neemann.digital.gui.components.terminal" ], [ "TerminalInterface", "de.neemann.digital.gui.components.terminal" ], [ "Keyboard", "de.neemann.digital.gui.components.terminal" ], [ "KeyboardDialog", "de.neemann.digital.gui.components.terminal" ], [ "Editor", "de.neemann.digital.gui.components" ], [ "VarRectList", "de.neemann.digital.gui.components.karnaugh" ], [ "KarnaughMap", "de.neemann.digital.gui.components.karnaugh" ], [ "KarnaughMapComponent", "de.neemann.digital.gui.components.karnaugh" ], [ "KarnaughMapDialog", "de.neemann.digital.gui.components.karnaugh" ], [ "MapLayout", "de.neemann.digital.gui.components.karnaugh" ], [ "KarnaughException", "de.neemann.digital.gui.components.karnaugh" ], [ "CircuitTransferable", "de.neemann.digital.gui.components" ], [ "ElementHelpDialog", "de.neemann.digital.gui.components" ], [ "TestCaseDescriptionDialog", "de.neemann.digital.gui.components.testing" ], [ "ValueTableDialog", "de.neemann.digital.gui.components.testing" ], [ "TestCaseDescriptionEditor", "de.neemann.digital.gui.components.testing" ], [ "TestAllDialog", "de.neemann.digital.gui.components.testing" ], [ "ExpressionListenerOptimizeJK", "de.neemann.digital.gui.components.table" ], [ "LaTeXExpressionListener", "de.neemann.digital.gui.components.table" ], [ "HardwareDescriptionGenerator", "de.neemann.digital.gui.components.table.hardware" ], [ "GenerateFile", "de.neemann.digital.gui.components.table.hardware" ], [ "GenerateCUPL", "de.neemann.digital.gui.components.table.hardware" ], [ "ExpressionListener", "de.neemann.digital.gui.components.table" ], [ "ReorderOutputs", "de.neemann.digital.gui.components.table" ], [ "AllSolutionsDialog", "de.neemann.digital.gui.components.table" ], [ "ExpressionListenerJK", "de.neemann.digital.gui.components.table" ], [ "ExpressionListenerCSVCondensed", "de.neemann.digital.gui.components.table" ], [ "ExpressionCreator", "de.neemann.digital.gui.components.table" ], [ "TableDialog", "de.neemann.digital.gui.components.table" ], [ "BuilderExpressionCreator", "de.neemann.digital.gui.components.table" ], [ "ExpressionComponent", "de.neemann.digital.gui.components.table" ], [ "PlainTextExpressionListener", "de.neemann.digital.gui.components.table" ], [ "TableReorderManager", "de.neemann.digital.gui.components.table" ], [ "ShowStringDialog", "de.neemann.digital.gui.components.table" ], [ "ReorderInputs", "de.neemann.digital.gui.components.table" ], [ "ProgressDialog", "de.neemann.digital.gui.components.table" ], [ "CheckResultListener", "de.neemann.digital.gui.components.table" ], [ "ExpressionListenerStore", "de.neemann.digital.gui.components.table" ], [ "AttributeDialog", "de.neemann.digital.gui.components" ], [ "ProbeDialog", "de.neemann.digital.gui.components" ], [ "ColorSchemeEditor", "de.neemann.digital.gui.components" ], [ "ROMEditorDialog", "de.neemann.digital.gui.components" ], [ "LabelGenerator", "de.neemann.digital.gui.components" ], [ "SingleValueDialog", "de.neemann.digital.gui.components" ], [ "ExpressionDialog", "de.neemann.digital.gui.components.expression" ], [ "CircuitComponent", "de.neemann.digital.gui.components" ], [ "VGA", "de.neemann.digital.gui.components.graphics" ], [ "GraphicCard", "de.neemann.digital.gui.components.graphics" ], [ "LedMatrix", "de.neemann.digital.gui.components.graphics" ], [ "VGADialog", "de.neemann.digital.gui.components.graphics" ], [ "MoveFocusTo", "de.neemann.digital.gui.components.graphics" ], [ "LedMatrixComponent", "de.neemann.digital.gui.components.graphics" ], [ "GraphicDialog", "de.neemann.digital.gui.components.graphics" ], [ "GraphicComponent", "de.neemann.digital.gui.components.graphics" ], [ "LedMatrixDialog", "de.neemann.digital.gui.components.graphics" ], [ "ConstraintsBuilder", "de.neemann.digital.gui.components" ], [ "ScopeTrigger", "de.neemann.digital.gui.components.data" ], [ "GraphDialog", "de.neemann.digital.gui.components.data" ], [ "GraphComponent", "de.neemann.digital.gui.components.data" ], [ "DummyElement", "de.neemann.digital.gui.components.data" ], [ "ValueTableObserver", "de.neemann.digital.gui.components.data" ], [ "CircuitModifier", "de.neemann.digital.gui.components" ], [ "CopiedElementLabelRenamer", "de.neemann.digital.gui.components" ], [ "TextLineNumber", "de.neemann.digital.gui.components" ], [ "InsertHistory", "de.neemann.digital.gui" ], [ "ProgramMemoryLoader", "de.neemann.digital.gui" ], [ "Main", "de.neemann.digital.gui" ], [ "StatsDialog", "de.neemann.digital.gui" ], [ "WindowManager", "de.neemann.digital.gui" ], [ "Settings", "de.neemann.digital.gui" ], [ "LibrarySelector", "de.neemann.digital.gui" ], [ "DigitalUncaughtExceptionHandler", "de.neemann.digital.gui" ], [ "NumberingWizard", "de.neemann.digital.gui" ], [ "HandlerInterface", "de.neemann.digital.gui.remote" ], [ "RemoteSever", "de.neemann.digital.gui.remote" ], [ "RemoteException", "de.neemann.digital.gui.remote" ], [ "DigitalHandler", "de.neemann.digital.gui.remote" ], [ "ModelModifier", "de.neemann.digital.gui" ], [ "VerilogCreator", "de.neemann.digital.hdl.verilog2" ], [ "VerilogRenaming", "de.neemann.digital.hdl.verilog2" ], [ "VerilogGenerator", "de.neemann.digital.hdl.verilog2" ], [ "VerilogTestBenchCreator", "de.neemann.digital.hdl.verilog2" ], [ "VerilogElement", "de.neemann.digital.hdl.verilog2.lib" ], [ "VerilogTemplate", "de.neemann.digital.hdl.verilog2.lib" ], [ "VerilogLibrary", "de.neemann.digital.hdl.verilog2" ], [ "CodePrinter", "de.neemann.digital.hdl.printer" ], [ "CodePrinterStr", "de.neemann.digital.hdl.printer" ], [ "Statements", "de.neemann.digital.hdl.hgs" ], [ "Parser", "de.neemann.digital.hdl.hgs" ], [ "ParserException", "de.neemann.digital.hdl.hgs" ], [ "Statement", "de.neemann.digital.hdl.hgs" ], [ "Context", "de.neemann.digital.hdl.hgs" ], [ "FirstClassFunctionCall", "de.neemann.digital.hdl.hgs.function" ], [ "InnerFunction", "de.neemann.digital.hdl.hgs.function" ], [ "JavaClass", "de.neemann.digital.hdl.hgs.function" ], [ "FirstClassFunction", "de.neemann.digital.hdl.hgs.function" ], [ "Func", "de.neemann.digital.hdl.hgs.function" ], [ "Function", "de.neemann.digital.hdl.hgs.function" ], [ "Expression", "de.neemann.digital.hdl.hgs" ], [ "HGSEvalException", "de.neemann.digital.hdl.hgs" ], [ "Tokenizer", "de.neemann.digital.hdl.hgs" ], [ "ReferenceToFunc", "de.neemann.digital.hdl.hgs.refs" ], [ "ReferenceToStruct", "de.neemann.digital.hdl.hgs.refs" ], [ "ReferenceToArray", "de.neemann.digital.hdl.hgs.refs" ], [ "Reference", "de.neemann.digital.hdl.hgs.refs" ], [ "ReferenceToVar", "de.neemann.digital.hdl.hgs.refs" ], [ "Value", "de.neemann.digital.hdl.hgs" ], [ "HGSMap", "de.neemann.digital.hdl.hgs" ], [ "HGSArray", "de.neemann.digital.hdl.hgs" ], [ "Separator", "de.neemann.digital.hdl.vhdl2" ], [ "VHDLLibrary", "de.neemann.digital.hdl.vhdl2" ], [ "VHDLCreator", "de.neemann.digital.hdl.vhdl2" ], [ "VHDLRenaming", "de.neemann.digital.hdl.vhdl2" ], [ "VHDLGenerator", "de.neemann.digital.hdl.vhdl2" ], [ "VHDLEntity", "de.neemann.digital.hdl.vhdl2.entities" ], [ "VHDLTemplate", "de.neemann.digital.hdl.vhdl2.entities" ], [ "VHDLTemplateFunctions", "de.neemann.digital.hdl.vhdl2.entities" ], [ "VHDLTestBenchCreator", "de.neemann.digital.hdl.vhdl2" ], [ "HDLModel", "de.neemann.digital.hdl.model2" ], [ "HDLNode", "de.neemann.digital.hdl.model2" ], [ "HDLNet", "de.neemann.digital.hdl.model2" ], [ "Printable", "de.neemann.digital.hdl.model2" ], [ "HDLException", "de.neemann.digital.hdl.model2" ], [ "HDLPort", "de.neemann.digital.hdl.model2" ], [ "HasName", "de.neemann.digital.hdl.model2" ], [ "InlineManyToOne", "de.neemann.digital.hdl.model2.optimizations" ], [ "MergeAssignments", "de.neemann.digital.hdl.model2.optimizations" ], [ "Optimization", "de.neemann.digital.hdl.model2.optimizations" ], [ "MergeConstants", "de.neemann.digital.hdl.model2.optimizations" ], [ "ReplaceOneToMany", "de.neemann.digital.hdl.model2.optimizations" ], [ "NameConstantSignals", "de.neemann.digital.hdl.model2.optimizations" ], [ "OptimizeExpressions", "de.neemann.digital.hdl.model2.optimizations" ], [ "RemoveConstantSignals", "de.neemann.digital.hdl.model2.optimizations" ], [ "NodeSorterExpressionBased", "de.neemann.digital.hdl.model2.optimizations" ], [ "HDLNodeSplitterManyToOne", "de.neemann.digital.hdl.model2" ], [ "HDLNodeCustom", "de.neemann.digital.hdl.model2" ], [ "HDLNodeAssignment", "de.neemann.digital.hdl.model2" ], [ "HDLCircuit", "de.neemann.digital.hdl.model2" ], [ "ExprVar", "de.neemann.digital.hdl.model2.expression" ], [ "Visitor", "de.neemann.digital.hdl.model2.expression" ], [ "ExprVarRange", "de.neemann.digital.hdl.model2.expression" ], [ "Expression", "de.neemann.digital.hdl.model2.expression" ], [ "ExpressionOptimizer", "de.neemann.digital.hdl.model2.expression" ], [ "ExprNot", "de.neemann.digital.hdl.model2.expression" ], [ "ExprConstant", "de.neemann.digital.hdl.model2.expression" ], [ "ExprOperate", "de.neemann.digital.hdl.model2.expression" ], [ "ExprUsingNet", "de.neemann.digital.hdl.model2.expression" ], [ "HDLNodeBuildIn", "de.neemann.digital.hdl.model2" ], [ "HDLClockIntegrator", "de.neemann.digital.hdl.model2.clock" ], [ "ClockIntegratorGeneric", "de.neemann.digital.hdl.model2.clock" ], [ "ClockInfo", "de.neemann.digital.hdl.model2.clock" ], [ "HDLNodeSplitterOneToMany", "de.neemann.digital.hdl.model2" ], [ "FileLocator", "de.neemann.digital" ], [ "ValueTable", "de.neemann.digital.data" ], [ "ValueTableModel", "de.neemann.digital.data" ], [ "DataPlotter", "de.neemann.digital.data" ], [ "Value", "de.neemann.digital.data" ], [ "ExpressionExporter", "de.neemann.digital.builder" ], [ "ExpressionToFileExporter", "de.neemann.digital.builder" ], [ "RotationByteArrayOutputStream", "de.neemann.digital.builder.tt2" ], [ "TT2Exporter", "de.neemann.digital.builder.tt2" ], [ "StartATF150xFitter", "de.neemann.digital.builder.tt2" ], [ "OSExecute", "de.neemann.digital.builder.tt2" ], [ "CreateCHN", "de.neemann.digital.builder.ATF150x" ], [ "ATFDevice", "de.neemann.digital.builder.ATF150x" ], [ "ATFDialog", "de.neemann.digital.builder.ATF150x" ], [ "PL", "de.neemann.digital.builder.ATF150x" ], [ "ATF150xCuplExporter", "de.neemann.digital.builder.ATF150x" ], [ "PinMap", "de.neemann.digital.builder" ], [ "PinMapException", "de.neemann.digital.builder" ], [ "FragmentExpression", "de.neemann.digital.builder.circuit" ], [ "FragmentVisualElement", "de.neemann.digital.builder.circuit" ], [ "FragmentSameInValue", "de.neemann.digital.builder.circuit" ], [ "CircuitBuilder", "de.neemann.digital.builder.circuit" ], [ "FragmentVisitor", "de.neemann.digital.builder.circuit" ], [ "FragmentVariable", "de.neemann.digital.builder.circuit" ], [ "Fragment", "de.neemann.digital.builder.circuit" ], [ "Box", "de.neemann.digital.builder.circuit" ], [ "Gal16v8JEDECExporter", "de.neemann.digital.builder.Gal16v8" ], [ "CuplExporter", "de.neemann.digital.builder.Gal16v8" ], [ "BuilderCollectorGAL", "de.neemann.digital.builder.Gal16v8" ], [ "CleanNameBuilder", "de.neemann.digital.builder" ], [ "BuilderCollector", "de.neemann.digital.builder" ], [ "BuilderInterface", "de.neemann.digital.builder" ], [ "BuilderException", "de.neemann.digital.builder" ], [ "Gal22v10JEDECExporter", "de.neemann.digital.builder.Gal22v10" ], [ "Gal22v10CuplExporter", "de.neemann.digital.builder.Gal22v10" ], [ "FuseMap", "de.neemann.digital.builder.jedec" ], [ "FuseMapFillerException", "de.neemann.digital.builder.jedec" ], [ "FuseMapFiller", "de.neemann.digital.builder.jedec" ], [ "JedecWriter", "de.neemann.digital.builder.jedec" ], [ "GenericCode", "de.neemann.digital.draw.library" ], [ "ElementLibrary", "de.neemann.digital.draw.library" ], [ "GenericInitCode", "de.neemann.digital.draw.library" ], [ "Visitor", "de.neemann.digital.draw.library" ], [ "ComponentManager", "de.neemann.digital.draw.library" ], [ "LibraryListener", "de.neemann.digital.draw.library" ], [ "JarComponentManager", "de.neemann.digital.draw.library" ], [ "ElementLibraryFolder", "de.neemann.digital.draw.library" ], [ "CustomElement", "de.neemann.digital.draw.library" ], [ "ElementNotFoundNotification", "de.neemann.digital.draw.library" ], [ "ElementNotFoundException", "de.neemann.digital.draw.library" ], [ "ComponentSource", "de.neemann.digital.draw.library" ], [ "LibraryInterface", "de.neemann.digital.draw.library" ], [ "ResolveGenerics", "de.neemann.digital.draw.library" ], [ "LibraryNode", "de.neemann.digital.draw.library" ], [ "ElementTypeDescriptionCustom", "de.neemann.digital.draw.library" ], [ "InvalidNodeException", "de.neemann.digital.draw.library" ], [ "NumStringComparator", "de.neemann.digital.draw.library" ], [ "InputShape", "de.neemann.digital.draw.shapes" ], [ "Interactor", "de.neemann.digital.draw.shapes" ], [ "ButtonShape", "de.neemann.digital.draw.shapes" ], [ "GenericShape", "de.neemann.digital.draw.shapes" ], [ "Drawable", "de.neemann.digital.draw.shapes" ], [ "DelayShape", "de.neemann.digital.draw.shapes" ], [ "DiodeBackwardShape", "de.neemann.digital.draw.shapes" ], [ "FuseShape", "de.neemann.digital.draw.shapes" ], [ "FETShapeP", "de.neemann.digital.draw.shapes" ], [ "DILShape", "de.neemann.digital.draw.shapes" ], [ "DipSwitchShape", "de.neemann.digital.draw.shapes" ], [ "SwitchShape", "de.neemann.digital.draw.shapes" ], [ "LightBulbShape", "de.neemann.digital.draw.shapes" ], [ "LayoutShape", "de.neemann.digital.draw.shapes" ], [ "SplitterShape", "de.neemann.digital.draw.shapes" ], [ "PolarityAwareLEDShape", "de.neemann.digital.draw.shapes" ], [ "ButtonLEDShape", "de.neemann.digital.draw.shapes" ], [ "RelayShape", "de.neemann.digital.draw.shapes" ], [ "ConstShape", "de.neemann.digital.draw.shapes" ], [ "BreakShape", "de.neemann.digital.draw.shapes" ], [ "GenericCodeShape", "de.neemann.digital.draw.shapes" ], [ "TextShape", "de.neemann.digital.draw.shapes" ], [ "SevenSegHexShape", "de.neemann.digital.draw.shapes" ], [ "ProbeShape", "de.neemann.digital.draw.shapes" ], [ "NotConnectedShape", "de.neemann.digital.draw.shapes" ], [ "StepperMotorShape", "de.neemann.digital.draw.shapes" ], [ "FETShape", "de.neemann.digital.draw.shapes" ], [ "BitSelShape", "de.neemann.digital.draw.shapes" ], [ "SevenSegShape", "de.neemann.digital.draw.shapes" ], [ "GenericInitCodeShape", "de.neemann.digital.draw.shapes" ], [ "RelayDTShape", "de.neemann.digital.draw.shapes" ], [ "RectShape", "de.neemann.digital.draw.shapes" ], [ "VDDShape", "de.neemann.digital.draw.shapes" ], [ "RAMShape", "de.neemann.digital.draw.shapes" ], [ "ScopeShape", "de.neemann.digital.draw.shapes" ], [ "DemuxerShape", "de.neemann.digital.draw.shapes" ], [ "FETShapeN", "de.neemann.digital.draw.shapes" ], [ "BusSplitterShape", "de.neemann.digital.draw.shapes" ], [ "PullUpShape", "de.neemann.digital.draw.shapes" ], [ "TestCaseShape", "de.neemann.digital.draw.shapes" ], [ "TunnelShape", "de.neemann.digital.draw.shapes" ], [ "MuxerShape", "de.neemann.digital.draw.shapes" ], [ "SwitchDTShape", "de.neemann.digital.draw.shapes" ], [ "PinControlShape", "de.neemann.digital.draw.shapes" ], [ "FGFETShapeN", "de.neemann.digital.draw.shapes" ], [ "TransGateShape", "de.neemann.digital.draw.shapes" ], [ "DiodeShape", "de.neemann.digital.draw.shapes" ], [ "ResetShape", "de.neemann.digital.draw.shapes" ], [ "DiodeForewardShape", "de.neemann.digital.draw.shapes" ], [ "SixteenShape", "de.neemann.digital.draw.shapes" ], [ "CustomCircuitShapeType", "de.neemann.digital.draw.shapes" ], [ "InteractorInterface", "de.neemann.digital.draw.shapes" ], [ "ShapeSpecificMatch", "de.neemann.digital.draw.shapes" ], [ "LEDShape", "de.neemann.digital.draw.shapes" ], [ "ClockShape", "de.neemann.digital.draw.shapes" ], [ "RGBLEDShape", "de.neemann.digital.draw.shapes" ], [ "RotEncoderShape", "de.neemann.digital.draw.shapes" ], [ "IEEEGenericShape", "de.neemann.digital.draw.shapes.ieee" ], [ "IEEEOrShape", "de.neemann.digital.draw.shapes.ieee" ], [ "IEEENotShape", "de.neemann.digital.draw.shapes.ieee" ], [ "IEEEAndShape", "de.neemann.digital.draw.shapes.ieee" ], [ "IEEEXOrShape", "de.neemann.digital.draw.shapes.ieee" ], [ "ObservableValueReader", "de.neemann.digital.draw.shapes" ], [ "SvgTemplate", "de.neemann.digital.draw.shapes.custom.svg" ], [ "TransformParser", "de.neemann.digital.draw.shapes.custom.svg" ], [ "Context", "de.neemann.digital.draw.shapes.custom.svg" ], [ "SvgException", "de.neemann.digital.draw.shapes.custom.svg" ], [ "SvgImporter", "de.neemann.digital.draw.shapes.custom.svg" ], [ "CustomShapeDescription", "de.neemann.digital.draw.shapes.custom" ], [ "CustomShape", "de.neemann.digital.draw.shapes.custom" ], [ "FGFETShapeP", "de.neemann.digital.draw.shapes" ], [ "OutputShape", "de.neemann.digital.draw.shapes" ], [ "GroundShape", "de.neemann.digital.draw.shapes" ], [ "AsyncClockShape", "de.neemann.digital.draw.shapes" ], [ "Shape", "de.neemann.digital.draw.shapes" ], [ "MissingShape", "de.neemann.digital.draw.shapes" ], [ "ShapeFactory", "de.neemann.digital.draw.shapes" ], [ "PullDownShape", "de.neemann.digital.draw.shapes" ], [ "DriverShape", "de.neemann.digital.draw.shapes" ], [ "SevenShape", "de.neemann.digital.draw.shapes" ], [ "DataShape", "de.neemann.digital.draw.shapes" ], [ "DotCreator", "de.neemann.digital.draw.elements" ], [ "Wire", "de.neemann.digital.draw.elements" ], [ "Movable", "de.neemann.digital.draw.elements" ], [ "Pins", "de.neemann.digital.draw.elements" ], [ "Circuit", "de.neemann.digital.draw.elements" ], [ "Tunnel", "de.neemann.digital.draw.elements" ], [ "PinException", "de.neemann.digital.draw.elements" ], [ "ElementOrder", "de.neemann.digital.draw.elements" ], [ "VisualElement", "de.neemann.digital.draw.elements" ], [ "Pin", "de.neemann.digital.draw.elements" ], [ "IOState", "de.neemann.digital.draw.elements" ], [ "WireMerger", "de.neemann.digital.draw.elements" ], [ "WireConsistencyChecker", "de.neemann.digital.draw.elements" ], [ "AsyncSequentialClock", "de.neemann.digital.draw.model" ], [ "ModelEntry", "de.neemann.digital.draw.model" ], [ "Net", "de.neemann.digital.draw.model" ], [ "ModelCreator", "de.neemann.digital.draw.model" ], [ "InverterConfig", "de.neemann.digital.draw.model" ], [ "NetList", "de.neemann.digital.draw.model" ], [ "RealTimeClock", "de.neemann.digital.draw.model" ], [ "Polygon", "de.neemann.digital.draw.graphics" ], [ "Orientation", "de.neemann.digital.draw.graphics" ], [ "Vector", "de.neemann.digital.draw.graphics" ], [ "SVGSettings", "de.neemann.digital.draw.graphics" ], [ "Transform", "de.neemann.digital.draw.graphics" ], [ "ColorKey", "de.neemann.digital.draw.graphics" ], [ "ExportFactory", "de.neemann.digital.draw.graphics" ], [ "GraphicsImage", "de.neemann.digital.draw.graphics" ], [ "VectorInterface", "de.neemann.digital.draw.graphics" ], [ "TextFormatSVG", "de.neemann.digital.draw.graphics" ], [ "TransformMatrix", "de.neemann.digital.draw.graphics" ], [ "TextFormatLaTeX", "de.neemann.digital.draw.graphics" ], [ "GraphicMinMax", "de.neemann.digital.draw.graphics" ], [ "GraphicTransform", "de.neemann.digital.draw.graphics" ], [ "ColorScheme", "de.neemann.digital.draw.graphics" ], [ "Style", "de.neemann.digital.draw.graphics" ], [ "GraphicSkipLines", "de.neemann.digital.draw.graphics.linemerger" ], [ "GraphicLineCollector", "de.neemann.digital.draw.graphics.linemerger" ], [ "PolygonConverter", "de.neemann.digital.draw.graphics" ], [ "VectorFloat", "de.neemann.digital.draw.graphics" ], [ "TransformRotate", "de.neemann.digital.draw.graphics" ], [ "Graphic", "de.neemann.digital.draw.graphics" ], [ "ColorStyleHighContrast", "de.neemann.digital.draw.graphics" ], [ "Parser", "de.neemann.digital.draw.graphics.text" ], [ "ParseException", "de.neemann.digital.draw.graphics.text" ], [ "PlainTextFormatter", "de.neemann.digital.draw.graphics.text.formatter" ], [ "SVGFormatter", "de.neemann.digital.draw.graphics.text.formatter" ], [ "GraphicsFormatter", "de.neemann.digital.draw.graphics.text.formatter" ], [ "LaTeXFormatter", "de.neemann.digital.draw.graphics.text.formatter" ], [ "Decorate", "de.neemann.digital.draw.graphics.text.text" ], [ "Text", "de.neemann.digital.draw.graphics.text.text" ], [ "Index", "de.neemann.digital.draw.graphics.text.text" ], [ "Sentence", "de.neemann.digital.draw.graphics.text.text" ], [ "Blank", "de.neemann.digital.draw.graphics.text.text" ], [ "Character", "de.neemann.digital.draw.graphics.text.text" ], [ "ExpressionToText", "de.neemann.digital.draw.graphics.text.text" ], [ "Simple", "de.neemann.digital.draw.graphics.text.text" ], [ "Export", "de.neemann.digital.draw.graphics" ], [ "ColorStyleMonochrome", "de.neemann.digital.draw.graphics" ], [ "TransformTranslate", "de.neemann.digital.draw.graphics" ], [ "GraphicSVG", "de.neemann.digital.draw.graphics" ], [ "GraphicSwing", "de.neemann.digital.draw.graphics" ], [ "PolygonParser", "de.neemann.digital.draw.graphics" ], [ "SVGTokenizer", "de.neemann.digital.draw.graphics" ], [ "GifSequenceWriter", "de.neemann.digital.draw.gif" ], [ "GifExporter", "de.neemann.digital.draw.gif" ], [ "ConfigCache", "de.neemann.digital.toolchain" ], [ "Configuration", "de.neemann.digital.toolchain" ], [ "Command", "de.neemann.digital.toolchain" ], [ "FileToCreate", "de.neemann.digital.toolchain" ] ],
  "tokensProjectClassesNonPrivateStaticNonVoidMethods" : [ [ "getMouse", "de.neemann.gui", "Mouse", "static Mouse getMouse()" ], [ "create", "de.neemann.gui", "IconCreator", "public static Icon create(String name)" ], [ "createImage", "de.neemann.gui", "IconCreator", "public static Image createImage(String name)" ], [ "createImages", "de.neemann.gui", "IconCreator", "public static ArrayList<Image> createImages(String... names)" ], [ "getCTRLMask", "de.neemann.gui", "ToolTipAction", "public static int getCTRLMask()" ], [ "checkForSave", "de.neemann.gui", "ClosingWindowListener", "public static boolean checkForSave(JFrame parent, ConfirmSave confirmSave)" ], [ "getParentWindow", "de.neemann.gui", "ErrorMessage", "public static Window getParentWindow(Component parent)" ], [ "getInstance", "de.neemann.gui", "Screen", "public static Screen getInstance()" ], [ "getDefaultFontScaling", "de.neemann.gui", "Screen", "public static int getDefaultFontScaling()" ], [ "isLinux", "de.neemann.gui", "Screen", "public static boolean isLinux()" ], [ "isMac", "de.neemann.gui", "Screen", "public static boolean isMac()" ], [ "getInstance", "de.neemann.gui", "InfoDialog", "public static InfoDialog getInstance()" ], [ "read", "de.neemann.digital.core.memory.importer", "Importer", "public static DataField read(File hexFile, int dataBits, boolean bigEndian) throws IOException" ], [ "getOriginOf", "de.neemann.digital.core", "ExceptionWithOrigin", "public static String getOriginOf(Throwable e)" ], [ "zMaskString", "de.neemann.digital.core", "ObservableValue", "static String zMaskString(long value, long highZ, int bits)" ], [ "getInstance", "de.neemann.digital.core", "GlobalValues", "public static GlobalValues getInstance()" ], [ "getInstance", "de.neemann.digital.core.io", "MIDIHelper", "public static MIDIHelper getInstance()" ], [ "input", "de.neemann.digital.core.element", "PinInfo", "public static PinInfo input(String name)" ], [ "input", "de.neemann.digital.core.element", "PinInfo", "public static PinInfo input(String name, String description)" ], [ "output", "de.neemann.digital.core.element", "PinInfo", "public static PinInfo output(String name)" ], [ "isInOut", "de.neemann.digital.core.element", "PinDescription", "public static boolean isInOut(Direction a, Direction b)" ], [ "isInOut", "de.neemann.digital.core.element", "Direction", "public static boolean isInOut(Direction a, Direction b)" ], [ "getKeyByName", "de.neemann.digital.core.element", "Keys", "public static Key getKeyByName(String name)" ], [ "getKeys", "de.neemann.digital.core.element", "Keys", "public static Iterable<Key> getKeys()" ], [ "combine", "de.neemann.digital.core.element", "ImmutableList", "public static <T> ImmutableList<T> combine(ImmutableList<T> a, ImmutableList<T> b)" ], [ "createSwitchModel", "de.neemann.digital.core.switching", "PlainSwitch", "static SwitchModel createSwitchModel(ObservableValue input1, ObservableValue input2, ObservableValue output1, ObservableValue output2) throws NodeException" ], [ "createOneToN", "de.neemann.digital.core.wiring", "Splitter", "public static Splitter createOneToN(int bits)" ], [ "createNToOne", "de.neemann.digital.core.wiring", "Splitter", "public static Splitter createNToOne(int bits)" ], [ "ovs", "de.neemann.digital.core", "ObservableValues", "public static ObservableValues ovs(ObservableValue... items)" ], [ "toShortHex", "de.neemann.digital.core", "IntFormat", "public static String toShortHex(long value)" ], [ "up", "de.neemann.digital.core", "Bits", "public static long up(long val, int bits)" ], [ "down", "de.neemann.digital.core", "Bits", "public static long down(long val, int bits)" ], [ "mask", "de.neemann.digital.core", "Bits", "public static long mask(int bits)" ], [ "signedFlagMask", "de.neemann.digital.core", "Bits", "public static long signedFlagMask(int bits)" ], [ "isNegative", "de.neemann.digital.core", "Bits", "public static boolean isNegative(long value, int bits)" ], [ "signExtend", "de.neemann.digital.core", "Bits", "public static long signExtend(long value, int bits)" ], [ "binLn2", "de.neemann.digital.core", "Bits", "public static int binLn2(long b)" ], [ "removeBitFromValue", "de.neemann.digital.core", "Bits", "public static int removeBitFromValue(int value, int bit)" ], [ "decode", "de.neemann.digital.core", "Bits", "public static long decode(String str) throws NumberFormatException" ], [ "decode", "de.neemann.digital.core", "Bits", "public static long decode(String str, boolean parseFloats) throws NumberFormatException" ], [ "decode", "de.neemann.digital.core", "Bits", "public static long decode(String str, int p, int radix) throws NumberFormatException" ], [ "getCode", "de.neemann.digital.core.extern", "Application", "static String getCode(ElementAttributes attr, File root) throws IOException" ], [ "readCode", "de.neemann.digital.core.extern", "Application", "static String readCode(File file) throws IOException" ], [ "create", "de.neemann.digital.core.extern", "Application", "static Application create(Type type, ElementAttributes attr)" ], [ "start", "de.neemann.digital.core.extern", "ProcessStarter", "public static String start(File dir, String... args) throws IOException" ], [ "joinStrings", "de.neemann.digital.core.extern", "ProcessStarter", "public static String joinStrings(String... strings)" ], [ "fromString", "de.neemann.digital.cli.cli", "Argument", "public static Object fromString(String val, Object defValue) throws CLIException" ], [ "fac", "de.neemann.digital.fsm", "Optimizer", "public static long fac(int n)" ], [ "getTimeComplexity", "de.neemann.digital.fsm", "Optimizer", "public static long getTimeComplexity(FSM fsm)" ], [ "calcComplexity", "de.neemann.digital.fsm", "Optimizer", "static int calcComplexity(FSM fsm, boolean out) throws ExpressionException, FiniteStateMachineException, FormatterException" ], [ "blink", "de.neemann.digital.fsm", "FSMDemos", "public static FSM blink()" ], [ "rotDecoder", "de.neemann.digital.fsm", "FSMDemos", "public static FSM rotDecoder()" ], [ "counter", "de.neemann.digital.fsm", "FSMDemos", "public static FSM counter(int n)" ], [ "trafficLight", "de.neemann.digital.fsm", "FSMDemos", "public static FSM trafficLight()" ], [ "trafficLightMedwedew", "de.neemann.digital.fsm", "FSMDemos", "public static FSM trafficLightMedwedew()" ], [ "selCounter", "de.neemann.digital.fsm", "FSMDemos", "public static FSM selCounter()" ], [ "stepper", "de.neemann.digital.fsm", "FSMDemos", "public static FSM stepper()" ], [ "stepperMedwedew", "de.neemann.digital.fsm", "FSMDemos", "public static FSM stepperMedwedew()" ], [ "getxStream", "de.neemann.digital.fsm", "FSM", "public static XStream getxStream()" ], [ "loadFSM", "de.neemann.digital.fsm", "FSM", "public static FSM loadFSM(File filename) throws IOException" ], [ "loadFSM", "de.neemann.digital.fsm", "FSM", "public static FSM loadFSM(InputStream in) throws IOException" ], [ "get", "de.neemann.digital.lang", "Lang", "public static String get(String key, Object... params)" ], [ "getNull", "de.neemann.digital.lang", "Lang", "public static String getNull(String key, Object... params)" ], [ "getBundle", "de.neemann.digital.lang", "Lang", "public static Bundle getBundle()" ], [ "currentLanguage", "de.neemann.digital.lang", "Lang", "public static Language currentLanguage()" ], [ "evalMultilingualContent", "de.neemann.digital.lang", "Lang", "public static String evalMultilingualContent(String text)" ], [ "evalMultilingualContent", "de.neemann.digital.lang", "Lang", "static String evalMultilingualContent(String text, Language currentLanguage)" ], [ "lowest", "de.neemann.digital.testing.parser", "OperatorPrecedence", "public static OperatorPrecedence lowest()" ], [ "addOne", "de.neemann.digital.analyse", "ModelAnalyser", "public static String addOne(String name)" ], [ "readCSV", "de.neemann.digital.analyse", "CSVImporter", "public static TruthTable readCSV(File file) throws IOException" ], [ "readCSV", "de.neemann.digital.analyse", "CSVImporter", "public static TruthTable readCSV(String csv) throws IOException" ], [ "readCSV", "de.neemann.digital.analyse", "CSVImporter", "public static TruthTable readCSV(Reader csv) throws IOException" ], [ "createDoubledValues", "de.neemann.digital.analyse.quinemc", "BoolTableByteArray", "public static BoolTableByteArray createDoubledValues(BoolTable values)" ], [ "simplify", "de.neemann.digital.analyse.quinemc", "QuineMcCluskey", "public static Expression simplify(Expression expression) throws ExpressionException" ], [ "addAnd", "de.neemann.digital.analyse.quinemc", "QuineMcCluskey", "public static Expression addAnd(Expression e, Iterable<TableRow> rows, List<Variable> variables)" ], [ "value", "de.neemann.digital.analyse.quinemc", "ThreeStateValue", "public static ThreeStateValue value(boolean bool)" ], [ "value", "de.neemann.digital.analyse.quinemc", "ThreeStateValue", "public static ThreeStateValue value(int value)" ], [ "doImplicitTypeCasts", "de.neemann.digital.analyse", "SubstituteLibrary", "static Object doImplicitTypeCasts(Class<?> expectedClass, Object val)" ], [ "or", "de.neemann.digital.analyse.expression", "Operation", "public static Expression or(Iterable<Expression> exp)" ], [ "or", "de.neemann.digital.analyse.expression", "Operation", "public static Expression or(Expression... exp)" ], [ "xor", "de.neemann.digital.analyse.expression", "Operation", "public static Expression xor(Expression a, Expression b)" ], [ "orNoMerge", "de.neemann.digital.analyse.expression", "Operation", "public static Expression orNoMerge(Expression... exp)" ], [ "and", "de.neemann.digital.analyse.expression", "Operation", "public static Expression and(Iterable<Expression> exp)" ], [ "and", "de.neemann.digital.analyse.expression", "Operation", "public static Expression and(Expression... exp)" ], [ "andNoMerge", "de.neemann.digital.analyse.expression", "Operation", "public static Expression andNoMerge(Expression... exp)" ], [ "modifyExpression", "de.neemann.digital.analyse.expression.modify", "ExpressionModifier", "static Expression modifyExpression(Expression expression, ExpressionModifier modifier)" ], [ "modifyExpression", "de.neemann.digital.analyse.expression.modify", "ExpressionModifier", "static Expression modifyExpression(Expression expression, ExpressionModifier... modifiers)" ], [ "v", "de.neemann.digital.analyse.expression", "Variable", "public static Variable v(String name)" ], [ "vars", "de.neemann.digital.analyse.expression", "Variable", "public static ArrayList<Variable> vars(int n)" ], [ "vars", "de.neemann.digital.analyse.expression", "Variable", "public static ArrayList<Variable> vars(String... names)" ], [ "isVar", "de.neemann.digital.analyse.expression", "Variable", "public static boolean isVar(Expression e)" ], [ "isVarOrNotVar", "de.neemann.digital.analyse.expression", "Variable", "public static boolean isVarOrNotVar(Expression e)" ], [ "getDefaultFormat", "de.neemann.digital.analyse.expression.format", "FormatToExpression", "public static FormatToExpression getDefaultFormat()" ], [ "defaultFormat", "de.neemann.digital.analyse.expression.format", "FormatToExpression", "public static String defaultFormat(Expression exp)" ], [ "not", "de.neemann.digital.analyse.expression", "Not", "public static Expression not(Expression a)" ], [ "readFromFile", "de.neemann.digital.analyse", "TruthTable", "public static TruthTable readFromFile(File filename) throws IOException" ], [ "create", "de.neemann.digital.analyse", "SplitPinString", "public static SplitPinString create(Signal s)" ], [ "create", "de.neemann.digital.analyse", "SplitPinString", "public static SplitPinString create(String pinStr)" ], [ "checkSuffix", "de.neemann.digital.gui", "SaveAsHelper", "public static File checkSuffix(File filename, String suffix)" ], [ "addF1Traversal", "de.neemann.digital.gui.components", "EditorFactory", "public static <TC extends JTextComponent> TC addF1Traversal(TC text)" ], [ "createUndoManager", "de.neemann.digital.gui.components", "EditorFactory", "public static UndoManager createUndoManager(JTextComponent text)" ], [ "create", "de.neemann.digital.gui.components.modification", "ModifyInsertWires", "public static Modification<Circuit> create(List<Wire> newWires)" ], [ "getToolTipName", "de.neemann.digital.gui.components.modification", "ModificationOfVisualElement", "public static String getToolTipName(VisualElement ve)" ], [ "getTerminal", "de.neemann.digital.gui.components.terminal", "TerminalDialog", "static TerminalInterface getTerminal(Model model, ElementAttributes attr)" ], [ "createList", "de.neemann.digital.gui.components", "CircuitTransferable", "public static ArrayList<Movable> createList(Object data, ShapeFactory shapeFactory) throws IOException" ], [ "createURLStreamHandlerFactory", "de.neemann.digital.gui.components", "ElementHelpDialog", "public static URLStreamHandlerFactory createURLStreamHandlerFactory()" ], [ "getImage", "de.neemann.digital.gui.components", "ElementHelpDialog", "static BufferedImage getImage(String name)" ], [ "getImage", "de.neemann.digital.gui.components", "MyURLStreamHandlerFactory", "static BufferedImage getImage(String name)" ], [ "isSequentialVar", "de.neemann.digital.gui.components.table", "ExpressionListenerJK", "public static String isSequentialVar(String name)" ], [ "getAttrList", "de.neemann.digital.gui.components", "CircuitComponent", "public static ArrayList<Key> getAttrList()" ], [ "raster", "de.neemann.digital.gui.components", "CircuitComponent", "public static Vector raster(Vector pos)" ], [ "createLiveDialog", "de.neemann.digital.gui.components.data", "GraphDialog", "public static GraphDialog createLiveDialog(JFrame owner, Model model, boolean microStep, List<String> ordering, int sampleSize)" ], [ "createColumnsInfo", "de.neemann.digital.gui.components.data", "GraphDialog", "static ValueTable.ColumnInfo[] createColumnsInfo(ArrayList<Signal> signals)" ], [ "create", "de.neemann.digital.gui.components", "CopiedElementLabelRenamer", "static LabelInstance create(VisualElement ve)" ], [ "create", "de.neemann.digital.gui.components", "CopiedElementLabelRenamer", "static LabelInstance create(String elementName, String fullLabel)" ], [ "create", "de.neemann.digital.gui.components", "LabelInstance", "static LabelInstance create(VisualElement ve)" ], [ "create", "de.neemann.digital.gui.components", "LabelInstance", "static LabelInstance create(String elementName, String fullLabel)" ], [ "isExperimentalMode", "de.neemann.digital.gui", "Main", "public static boolean isExperimentalMode()" ], [ "getInstance", "de.neemann.digital.gui", "WindowManager", "public static WindowManager getInstance()" ], [ "getInstance", "de.neemann.digital.gui", "Settings", "public static Settings getInstance()" ], [ "getRange", "de.neemann.digital.hdl.verilog2", "VerilogCreator", "public static String getRange(int bits)" ], [ "getType", "de.neemann.digital.hdl.verilog2", "VerilogCreator", "public static String getType(HDLPort.Direction def, HDLPort.Direction dir, int bits)" ], [ "value", "de.neemann.digital.hdl.verilog2", "VerilogCreator", "public static String value(ExprConstant con)" ], [ "value", "de.neemann.digital.hdl.verilog2", "VerilogCreator", "public static String value(long val, int bits)" ], [ "neededFileName", "de.neemann.digital.hdl.verilog2.lib", "VerilogTemplate", "public static String neededFileName(String elementName)" ], [ "createFromJar", "de.neemann.digital.hdl.hgs", "Parser", "public static Statement createFromJar(String path, ClassLoader cl) throws IOException, ParserException" ], [ "createFromJarStatic", "de.neemann.digital.hdl.hgs", "Parser", "public static Statement createFromJarStatic(String path)" ], [ "isWhiteSpace", "de.neemann.digital.hdl.hgs", "Tokenizer", "public static boolean isWhiteSpace(int c)" ], [ "toLong", "de.neemann.digital.hdl.hgs", "Value", "public static long toLong(Object value) throws HGSEvalException" ], [ "toDouble", "de.neemann.digital.hdl.hgs", "Value", "public static double toDouble(Object value) throws HGSEvalException" ], [ "toInt", "de.neemann.digital.hdl.hgs", "Value", "public static int toInt(Object value) throws HGSEvalException" ], [ "toBool", "de.neemann.digital.hdl.hgs", "Value", "public static boolean toBool(Object value) throws HGSEvalException" ], [ "toString", "de.neemann.digital.hdl.hgs", "Value", "public static String toString(Object value) throws HGSEvalException" ], [ "toArray", "de.neemann.digital.hdl.hgs", "Value", "public static HGSArray toArray(Object value) throws HGSEvalException" ], [ "toMap", "de.neemann.digital.hdl.hgs", "Value", "public static HGSMap toMap(Object value) throws HGSEvalException" ], [ "equals", "de.neemann.digital.hdl.hgs", "Value", "public static boolean equals(Object a, Object b)" ], [ "add", "de.neemann.digital.hdl.hgs", "Value", "public static Object add(Object a, Object b) throws HGSEvalException" ], [ "sub", "de.neemann.digital.hdl.hgs", "Value", "public static Object sub(Object a, Object b) throws HGSEvalException" ], [ "mul", "de.neemann.digital.hdl.hgs", "Value", "public static Object mul(Object a, Object b) throws HGSEvalException" ], [ "div", "de.neemann.digital.hdl.hgs", "Value", "public static Object div(Object a, Object b) throws HGSEvalException" ], [ "or", "de.neemann.digital.hdl.hgs", "Value", "public static Object or(Object a, Object b) throws HGSEvalException" ], [ "xor", "de.neemann.digital.hdl.hgs", "Value", "public static Object xor(Object a, Object b) throws HGSEvalException" ], [ "and", "de.neemann.digital.hdl.hgs", "Value", "public static Object and(Object a, Object b) throws HGSEvalException" ], [ "not", "de.neemann.digital.hdl.hgs", "Value", "public static Object not(Object value) throws HGSEvalException" ], [ "neg", "de.neemann.digital.hdl.hgs", "Value", "public static Object neg(Object value) throws HGSEvalException" ], [ "less", "de.neemann.digital.hdl.hgs", "Value", "public static boolean less(Object a, Object b) throws HGSEvalException" ], [ "lessEqual", "de.neemann.digital.hdl.hgs", "Value", "public static boolean lessEqual(Object a, Object b) throws HGSEvalException" ], [ "trimRight", "de.neemann.digital.hdl.hgs", "Value", "public static String trimRight(String str)" ], [ "trimLeft", "de.neemann.digital.hdl.hgs", "Value", "public static String trimLeft(String str)" ], [ "getType", "de.neemann.digital.hdl.vhdl2", "VHDLCreator", "public static String getType(int bits)" ], [ "value", "de.neemann.digital.hdl.vhdl2", "VHDLCreator", "public static String value(ExprConstant con)" ], [ "value", "de.neemann.digital.hdl.vhdl2", "VHDLCreator", "public static String value(long val, int bits)" ], [ "isTemplate", "de.neemann.digital.hdl.vhdl2.entities", "VHDLTemplate", "public static boolean isTemplate(ElementTypeDescription etd)" ], [ "neededFileName", "de.neemann.digital.hdl.vhdl2.entities", "VHDLTemplate", "public static String neededFileName(String elementName)" ], [ "zero", "de.neemann.digital.hdl.vhdl2.entities", "VHDLTemplateFunctions", "public static String zero(long bits)" ], [ "value", "de.neemann.digital.hdl.vhdl2.entities", "VHDLTemplateFunctions", "public static String value(long val, long bits)" ], [ "genericType", "de.neemann.digital.hdl.vhdl2.entities", "VHDLTemplateFunctions", "public static String genericType(long n)" ], [ "type", "de.neemann.digital.hdl.vhdl2.entities", "VHDLTemplateFunctions", "public static String type(long n)" ], [ "isVar", "de.neemann.digital.hdl.model2.expression", "Expression", "static boolean isVar(Expression expr, HDLNet net)" ], [ "isConstant", "de.neemann.digital.hdl.model2.expression", "ExprConstant", "public static ExprConstant isConstant(HDLNode node)" ], [ "getHighZ", "de.neemann.digital.data", "Value", "public static Value getHighZ()" ], [ "calcBackOffset", "de.neemann.digital.builder.circuit", "FragmentExpression", "static int calcBackOffset(int size, int i)" ], [ "isXNor", "de.neemann.digital.builder.circuit", "CircuitBuilder", "static boolean isXNor(long[] data)" ], [ "isXor", "de.neemann.digital.builder.circuit", "CircuitBuilder", "static boolean isXor(long[] data)" ], [ "getLibPath", "de.neemann.digital.draw.library", "ElementLibrary", "public static File getLibPath()" ], [ "createCustomDescription", "de.neemann.digital.draw.library", "ElementLibrary", "public static ElementTypeDescriptionCustom createCustomDescription(File file, Circuit circuit, ElementLibrary library) throws PinException" ], [ "createDeclarationDefault", "de.neemann.digital.draw.library", "ElementTypeDescriptionCustom", "public static String createDeclarationDefault(Circuit circuit) throws NodeException" ], [ "getInstance", "de.neemann.digital.draw.library", "NumStringComparator", "public static NumStringComparator getInstance()" ], [ "compareStr", "de.neemann.digital.draw.library", "NumStringComparator", "public static int compareStr(String a, String b)" ], [ "createPins", "de.neemann.digital.draw.shapes", "GenericShape", "public static Pins createPins(PinDescriptions inputs, PinDescriptions outputs, boolean invert, InverterConfig ic, boolean wideShape)" ], [ "readStyle", "de.neemann.digital.draw.shapes.custom.svg", "Context", "static Context readStyle(Context context, String style) throws SvgException" ], [ "getOutSize", "de.neemann.digital.draw.shapes", "OutputShape", "public static int getOutSize(boolean small)" ], [ "getOutStyle", "de.neemann.digital.draw.shapes", "OutputShape", "public static Style getOutStyle(boolean small)" ], [ "getOutRad", "de.neemann.digital.draw.shapes", "OutputShape", "public static Vector getOutRad(boolean small)" ], [ "createTransform", "de.neemann.digital.draw.shapes", "SevenShape", "static Transform createTransform(int size)" ], [ "getxStream", "de.neemann.digital.draw.elements", "Circuit", "public static XStream getxStream()" ], [ "loadCircuit", "de.neemann.digital.draw.elements", "Circuit", "public static Circuit loadCircuit(File filename, ShapeFactory shapeFactory) throws IOException" ], [ "loadCircuit", "de.neemann.digital.draw.elements", "Circuit", "public static Circuit loadCircuit(InputStream in, ShapeFactory shapeFactory) throws IOException" ], [ "fixGenerics", "de.neemann.digital.draw.model", "ModelCreator", "public static Circuit fixGenerics(Circuit circuit, LibraryInterface library) throws NodeException, ElementNotFoundException" ], [ "createFromPath", "de.neemann.digital.draw.graphics", "Polygon", "public static Polygon createFromPath(String path)" ], [ "vec", "de.neemann.digital.draw.graphics", "Vector", "public static Vector vec(int x, int y)" ], [ "min", "de.neemann.digital.draw.graphics", "Vector", "public static Vector min(VectorInterface... p)" ], [ "max", "de.neemann.digital.draw.graphics", "Vector", "public static Vector max(VectorInterface... p)" ], [ "width", "de.neemann.digital.draw.graphics", "Vector", "public static Vector width(VectorInterface... p)" ], [ "add", "de.neemann.digital.draw.graphics", "Vector", "public static List<Vector> add(List<Vector> vectors, Vector offs)" ], [ "getInstance", "de.neemann.digital.draw.graphics", "SVGSettings", "public static SVGSettings getInstance()" ], [ "createKeyList", "de.neemann.digital.draw.graphics", "SVGSettings", "public static List<Key> createKeyList()" ], [ "mul", "de.neemann.digital.draw.graphics", "Transform", "static Transform mul(Transform t1, Transform t2)" ], [ "rotate", "de.neemann.digital.draw.graphics", "TransformMatrix", "public static TransformMatrix rotate(double w)" ], [ "scale", "de.neemann.digital.draw.graphics", "TransformMatrix", "public static TransformMatrix scale(float sx, float sy)" ], [ "getTextWidth", "de.neemann.digital.draw.graphics", "GraphicMinMax", "public static int getTextWidth(String text, Style style)" ], [ "getSelected", "de.neemann.digital.draw.graphics", "ColorScheme", "public static ColorScheme getSelected()" ], [ "getWireStyle", "de.neemann.digital.draw.graphics", "Style", "public static Style getWireStyle(Value value)" ], [ "format", "de.neemann.digital.draw.graphics.text.formatter", "PlainTextFormatter", "public static String format(Text text)" ], [ "format", "de.neemann.digital.draw.graphics.text.formatter", "PlainTextFormatter", "public static String format(Text text, FormatToExpression format)" ], [ "format", "de.neemann.digital.draw.graphics.text.formatter", "SVGFormatter", "public static String format(Text text)" ], [ "createFragment", "de.neemann.digital.draw.graphics.text.formatter", "GraphicsFormatter", "public static Fragment createFragment(Graphics2D gr, String text)" ], [ "createFragment", "de.neemann.digital.draw.graphics.text.formatter", "GraphicsFormatter", "public static Fragment createFragment(Graphics2D gr, Expression expression) throws FormatterException" ], [ "createFragment", "de.neemann.digital.draw.graphics.text.formatter", "GraphicsFormatter", "public static Fragment createFragment(FontSizer sizer, Font font, String text)" ], [ "format", "de.neemann.digital.draw.graphics.text.formatter", "LaTeXFormatter", "public static String format(Expression exp)" ], [ "format", "de.neemann.digital.draw.graphics.text.formatter", "LaTeXFormatter", "public static String format(Text text)" ], [ "math", "de.neemann.digital.draw.graphics.text.text", "Decorate", "public static Text math(Text t)" ], [ "escapeXML", "de.neemann.digital.draw.graphics", "GraphicSVG", "public static String escapeXML(String text)" ], [ "getMirrorYOrientation", "de.neemann.digital.draw.graphics", "GraphicSwing", "static int getMirrorYOrientation(Orientation orientation, VectorInterface p1, VectorInterface p2, VectorInterface p3)" ], [ "load", "de.neemann.digital.toolchain", "Configuration", "public static Configuration load(File file) throws IOException" ], [ "load", "de.neemann.digital.toolchain", "Configuration", "public static Configuration load(InputStream in) throws IOException" ] ],
  "tokensProjectClassesNonPrivateStaticAttributes" : [ [ "UNKNOWN", "de.neemann.gui", "InfoDialog", "public static final String UNKNOWN = \"unknown\";" ], [ "DESCRIPTION", "de.neemann.digital.core.pld", "PullDown", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"PullDown\", PullDown.class).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS);" ], [ "DESCRIPTION", "de.neemann.digital.core.pld", "Diode", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Diode.class).addAttribute(Keys.ROTATE).addAttribute(Keys.BLOWN);" ], [ "DESCRIPTION", "de.neemann.digital.core.pld", "DiodeBackward", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(DiodeBackward.class, input(\"in\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BLOWN);" ], [ "DESCRIPTION", "de.neemann.digital.core.pld", "PullUp", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"PullUp\", PullUp.class).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS);" ], [ "DESCRIPTION", "de.neemann.digital.core.pld", "DiodeForward", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(DiodeForward.class, input(\"in\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BLOWN);" ], [ "DESCRIPTION", "de.neemann.digital.core.memory", "RAMSinglePort", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(RAMSinglePort.class, input(\"A\"), input(\"str\"), input(\"C\").setClock(), input(\"ld\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.ADDR_BITS).addAttribute(Keys.INT_FORMAT).addAttribute(Keys.IS_PROGRAM_MEMORY).addAttribute(Keys.LABEL);" ], [ "DESCRIPTION", "de.neemann.digital.core.memory", "ROMDualPort", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(ROMDualPort.class, input(\"A1\"), input(\"s1\"), input(\"A2\"), input(\"s2\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.ADDR_BITS).addAttribute(Keys.LABEL).addAttribute(Keys.DATA).addAttribute(Keys.INT_FORMAT).addAttribute(Keys.IS_PROGRAM_MEMORY).addAttribute(Keys.AUTO_RELOAD_ROM).addAttribute(Keys.LAST_DATA_FILE).addAttribute(Keys.BIG_ENDIAN);" ], [ "DESCRIPTION", "de.neemann.digital.core.memory", "RAMDualAccess", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(RAMDualAccess.class, input(\"str\"), input(\"C\").setClock(), input(\"ld\"), input(\"1A\"), input(\"1Din\"), input(\"2A\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.ADDR_BITS).addAttribute(Keys.IS_PROGRAM_MEMORY).addAttribute(Keys.LABEL).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.memory", "CounterPreset", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(CounterPreset.class, input(\"en\"), input(\"C\").setClock(), input(\"dir\"), input(\"in\"), input(\"ld\"), input(\"clr\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.MAX_VALUE).addAttribute(Keys.INVERTER_CONFIG).addAttribute(Keys.LABEL).addAttribute(Keys.VALUE_IS_PROBE).addAttribute(Keys.IS_PROGRAM_COUNTER).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.memory", "RAMDualPort", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(RAMDualPort.class, input(\"A\"), input(\"Din\"), input(\"str\"), input(\"C\").setClock(), input(\"ld\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.ADDR_BITS).addAttribute(Keys.INT_FORMAT).addAttribute(Keys.IS_PROGRAM_MEMORY).addAttribute(Keys.LABEL).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.memory", "Register", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Register.class, input(\"D\"), input(\"C\").setClock(), input(\"en\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).addAttribute(Keys.INVERTER_CONFIG).addAttribute(Keys.IS_PROGRAM_COUNTER).addAttribute(Keys.VALUE_IS_PROBE).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.memory", "LookUpTable", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(LookUpTable.class) {\n\n    @Override\n    public PinDescriptions getInputDescription(ElementAttributes elementAttributes) {\n        int size = elementAttributes.get(Keys.INPUT_COUNT);\n        PinDescription[] names = new PinDescription[size];\n        for (int i = 0; i < size; i++) names[i] = input(Integer.toString(i), Lang.get(\"elem_LookUpTable_pin_in\", i));\n        return new PinDescriptions(names);\n    }\n}.addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.LUT_INPUT_COUNT).addAttribute(Keys.LABEL).addAttribute(Keys.DATA).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.memory", "BlockRAMDualPort", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(BlockRAMDualPort.class, input(\"A\"), input(\"Din\"), input(\"str\"), input(\"C\").setClock()).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.ADDR_BITS).addAttribute(Keys.IS_PROGRAM_MEMORY).addAttribute(Keys.LABEL).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.memory", "Counter", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Counter.class, input(\"en\"), input(\"C\").setClock(), input(\"clr\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.INVERTER_CONFIG).addAttribute(Keys.LABEL).addAttribute(Keys.VALUE_IS_PROBE).addAttribute(Keys.IS_PROGRAM_COUNTER).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.memory", "EEPROM", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(EEPROM.class, input(\"A\"), input(\"CS\"), input(\"WE\").setClock(), input(\"OE\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.ADDR_BITS).addAttribute(Keys.LABEL).addAttribute(Keys.INT_FORMAT).addAttribute(Keys.IS_PROGRAM_MEMORY).addAttribute(Keys.INVERTER_CONFIG).addAttribute(Keys.DATA);" ], [ "DESCRIPTION", "de.neemann.digital.core.memory", "RAMAsync", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(RAMAsync.class, input(\"A\"), input(\"D\"), input(\"we\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.ADDR_BITS).addAttribute(Keys.IS_PROGRAM_MEMORY).addAttribute(Keys.INVERTER_CONFIG).addAttribute(Keys.LABEL).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.memory", "ROM", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(ROM.class, input(\"A\"), input(\"sel\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.ADDR_BITS).addAttribute(Keys.LABEL).addAttribute(Keys.DATA).addAttribute(Keys.INT_FORMAT).addAttribute(Keys.IS_PROGRAM_MEMORY).addAttribute(Keys.AUTO_RELOAD_ROM).addAttribute(Keys.LAST_DATA_FILE).addAttribute(Keys.BIG_ENDIAN).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.memory", "EEPROMDualPort", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(EEPROMDualPort.class, input(\"A\"), input(\"Din\"), input(\"str\"), input(\"C\").setClock(), input(\"ld\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.ADDR_BITS).addAttribute(Keys.INT_FORMAT).addAttribute(Keys.IS_PROGRAM_MEMORY).addAttribute(Keys.LABEL).addAttribute(Keys.DATA);" ], [ "DESCRIPTION", "de.neemann.digital.core.memory", "RAMSinglePortSel", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(RAMSinglePortSel.class, input(\"A\"), input(\"CS\"), input(\"WE\"), input(\"OE\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.ADDR_BITS).addAttribute(Keys.LABEL).addAttribute(Keys.IS_PROGRAM_MEMORY).addAttribute(Keys.INVERTER_CONFIG);" ], [ "DESCRIPTION", "de.neemann.digital.core.memory", "RegisterFile", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(RegisterFile.class, input(\"Din\"), input(\"we\"), input(\"Rw\"), input(\"C\").setClock(), input(\"Ra\"), input(\"Rb\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.ADDR_BITS).addAttribute(Keys.LABEL).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.io", "MIDI", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(MIDI.class) {\n\n    public PinDescriptions getInputDescription(ElementAttributes elementAttributes) throws NodeException {\n        if (elementAttributes.get(Keys.MIDI_PROG_CHANGE))\n            return new PinDescriptions(input(\"N\"), input(\"V\"), input(\"OnOff\"), input(\"PC\"), input(\"en\"), input(\"C\").setClock()).setLangKey(getPinLangKey());\n        else\n            return new PinDescriptions(input(\"N\"), input(\"V\"), input(\"OnOff\"), input(\"en\"), input(\"C\").setClock()).setLangKey(getPinLangKey());\n    }\n}.addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.MIDI_CHANNEL).addAttribute(Keys.MIDI_INSTRUMENT).addAttribute(Keys.MIDI_PROG_CHANGE);" ], [ "DESCRIPTION", "de.neemann.digital.core.io", "RGBLED", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(RGBLED.class, input(\"R\"), input(\"G\"), input(\"B\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).addAttribute(Keys.LED_SIZE);" ], [ "DESCRIPTION", "de.neemann.digital.core.io", "Out", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"Out\", attributes -> new Out(attributes).enforceName(), input(\"in\")) {\n\n    @Override\n    public String getDescription(ElementAttributes elementAttributes) {\n        String d = Lang.evalMultilingualContent(elementAttributes.get(Keys.DESCRIPTION));\n        if (d.length() > 0)\n            return d;\n        else\n            return super.getDescription(elementAttributes);\n    }\n}.addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).addAttribute(Keys.DESCRIPTION).addAttribute(Keys.INT_FORMAT).addAttribute(Keys.PINNUMBER).addAttribute(Keys.ADD_VALUE_TO_GRAPH).addAttribute(Keys.IN_OUT_SMALL).supportsHDL();" ], [ "LEDDESCRIPTION", "de.neemann.digital.core.io", "Out", "public static final ElementTypeDescription LEDDESCRIPTION = new ElementTypeDescription(\"LED\", Out.class, input(\"in\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.LED_SIZE).addAttribute(Keys.COLOR);" ], [ "POLARITYAWARELEDDESCRIPTION", "de.neemann.digital.core.io", "Out", "public static final ElementTypeDescription POLARITYAWARELEDDESCRIPTION = new ElementTypeDescription(\"PolarityAwareLED\", attributes -> new Out(1, 1), input(\"A\"), input(\"C\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.COLOR);" ], [ "SEVENDESCRIPTION", "de.neemann.digital.core.io", "Out", "public static final ElementTypeDescription SEVENDESCRIPTION = new SevenSegTypeDescription();" ], [ "SEVENHEXDESCRIPTION", "de.neemann.digital.core.io", "Out", "public static final ElementTypeDescription SEVENHEXDESCRIPTION = new ElementTypeDescription(\"Seven-Seg-Hex\", attributes -> new Out(4, 1), input(\"d\"), input(\"dp\")).addAttribute(Keys.COLOR).addAttribute(Keys.SEVEN_SEG_SIZE);" ], [ "SIXTEENDESCRIPTION", "de.neemann.digital.core.io", "Out", "public static final ElementTypeDescription SIXTEENDESCRIPTION = new ElementTypeDescription(\"SixteenSeg\", attributes -> new Out(16, 1), input(\"led\"), input(\"dp\")).addAttribute(Keys.COLOR).addAttribute(Keys.SEVEN_SEG_SIZE);" ], [ "DESCRIPTION", "de.neemann.digital.core.io", "RotEncoder", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(RotEncoder.class).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL);" ], [ "DESCRIPTION", "de.neemann.digital.core.io", "PinControl", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(PinControl.class, input(\"wr\"), input(\"oe\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.MIRROR).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.io", "DipSwitch", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(DipSwitch.class) {\n\n    @Override\n    public String getDescription(ElementAttributes elementAttributes) {\n        String d = Lang.evalMultilingualContent(elementAttributes.get(Keys.DESCRIPTION));\n        if (d.length() > 0)\n            return d;\n        else\n            return super.getDescription(elementAttributes);\n    }\n}.addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.DIP_DEFAULT).addAttribute(Keys.DESCRIPTION);" ], [ "DESCRIPTION", "de.neemann.digital.core.io", "LightBulb", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(LightBulb.class, input(\"A\"), input(\"B\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.COLOR);" ], [ "DESCRIPTION", "de.neemann.digital.core.io", "Probe", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"Probe\", Probe.class, input(\"in\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.INT_FORMAT).addAttribute(Keys.PROBE_MODE).addAttribute(Keys.ADD_VALUE_TO_GRAPH);" ], [ "DESCRIPTION", "de.neemann.digital.core.io", "Button", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Button.class).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.ACTIVE_LOW).addAttribute(Keys.MAP_TO_KEY).addAttribute(Keys.ADD_VALUE_TO_GRAPH);" ], [ "DESCRIPTION", "de.neemann.digital.core.io", "ButtonLED", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(ButtonLED.class, input(\"in\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.ACTIVE_LOW).addAttribute(Keys.MAP_TO_KEY).addAttribute(Keys.COLOR);" ], [ "DESCRIPTION", "de.neemann.digital.core.io", "In", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(In.class) {\n\n    @Override\n    public String getDescription(ElementAttributes elementAttributes) {\n        String d = Lang.evalMultilingualContent(elementAttributes.get(Keys.DESCRIPTION));\n        if (d.length() > 0)\n            return d;\n        else\n            return super.getDescription(elementAttributes);\n    }\n}.addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).addAttribute(Keys.INPUT_DEFAULT).addAttribute(Keys.IS_HIGH_Z).addAttribute(Keys.AVOID_ACTIVE_LOW).addAttribute(Keys.DESCRIPTION).addAttribute(Keys.INT_FORMAT).addAttribute(Keys.PINNUMBER).addAttribute(Keys.ADD_VALUE_TO_GRAPH).addAttribute(Keys.IN_OUT_SMALL).supportsHDL();" ], [ "STEPS", "de.neemann.digital.core.io", "StepperMotorUnipolar", "public static final int STEPS = 72;" ], [ "DESCRIPTION", "de.neemann.digital.core.io", "StepperMotorUnipolar", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(StepperMotorUnipolar.class, input(\"P0\"), input(\"P1\"), input(\"P2\"), input(\"P3\"), input(\"com\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.INVERT_OUTPUT);" ], [ "DESCRIPTION", "de.neemann.digital.core.io", "NotConnected", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(NotConnected.class).addAttribute(Keys.BITS);" ], [ "DESCRIPTION", "de.neemann.digital.core.io", "StepperMotorBipolar", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(StepperMotorBipolar.class, input(\"A+\"), input(\"A-\"), input(\"B+\"), input(\"B-\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.INVERT_OUTPUT);" ], [ "DESCRIPTION", "de.neemann.digital.core.io", "Const", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Const.class).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.VALUE).addAttribute(Keys.INT_FORMAT).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.io", "PowerSupply", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(PowerSupply.class, input(\"VDD\"), input(\"GND\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL);" ], [ "DESCRIPTION", "de.neemann.digital.core.io", "Ground", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Ground.class).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.io", "VDD", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(VDD.class).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).supportsHDL();" ], [ "INSTANCE", "de.neemann.digital.core.io.telnet", "ServerHolder", "public static final ServerHolder INSTANCE = new ServerHolder();" ], [ "DESCRIPTION", "de.neemann.digital.core.io.telnet", "Telnet", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Telnet.class, input(\"in\"), input(\"C\").setClock(), input(\"wr\"), input(\"rd\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.TELNET_ESCAPE).addAttribute(Keys.PORT);" ], [ "BITS", "de.neemann.digital.core.element", "Keys", "public static final Key.KeyBits BITS = new Key.KeyBits(\"Bits\", 1);" ], [ "INPUT_BITS", "de.neemann.digital.core.element", "Keys", "public static final Key.KeyBits INPUT_BITS = new Key.KeyBits(\"inputBits\", 8);" ], [ "OUTPUT_BITS", "de.neemann.digital.core.element", "Keys", "public static final Key.KeyBits OUTPUT_BITS = new Key.KeyBits(\"outputBits\", 16);" ], [ "INPUT_COUNT", "de.neemann.digital.core.element", "Keys", "public static final Key.KeyInteger INPUT_COUNT = new Key.KeyInteger(\"Inputs\", 2).setComboBoxValues(2, 3, 4, 5).setMin(2);" ], [ "LUT_INPUT_COUNT", "de.neemann.digital.core.element", "Keys", "public static final Key.KeyInteger LUT_INPUT_COUNT = new Key.KeyInteger(\"Inputs\", 2).setComboBoxValues(2, 3, 4, 5, 6).setMax(20).setMin(2);" ], [ "MAX_VALUE", "de.neemann.digital.core.element", "Keys", "public static final Key.KeyInteger MAX_VALUE = new Key.KeyInteger(\"maxValue\", 0).setMin(0);" ], [ "DELAY_TIME", "de.neemann.digital.core.element", "Keys", "public static final Key.KeyInteger DELAY_TIME = new Key.KeyInteger(\"delayTime\", 1).setComboBoxValues(1, 2, 3, 4, 5).setMin(1).setMax(20);" ], [ "MONOFLOP_DELAY", "de.neemann.digital.core.element", "Keys", "public static final Key.KeyInteger MONOFLOP_DELAY = new Key.KeyInteger(\"timerDelay\", 1).setMin(1);" ], [ "LABEL", "de.neemann.digital.core.element", "Keys", "public static final Key<String> LABEL = new Key<>(\"Label\", \"\");" ], [ "FONT_SIZE", "de.neemann.digital.core.element", "Keys", "public static final Key<Integer> FONT_SIZE = new Key.KeyInteger(\"textFontSize\", Style.NORMAL.getFontSize()).setComboBoxValues(14, 17, 20, 24, 36, 48, 60).setMin(10).setMax(70);" ], [ "TEXT_ORIENTATION", "de.neemann.digital.core.element", "Keys", "public static final Key<Orientation> TEXT_ORIENTATION = new Key.KeyEnum<>(\"textOrientation\", Orientation.LEFTTOP, Orientation.values()).setSecondary();" ], [ "LED_SIZE", "de.neemann.digital.core.element", "Keys", "public static final Key<Integer> LED_SIZE = new Key.KeyInteger(\"Size\", 1).setComboBoxValues(0, 1, 2, 3, 4, 5).setMin(0).allowGroupEdit().setSecondary();" ], [ "SEVEN_SEG_SIZE", "de.neemann.digital.core.element", "Keys", "public static final Key<Integer> SEVEN_SEG_SIZE = new Key.KeyInteger(\"segSize\", 2).setComboBoxValues(0, 1, 2, 3, 4, 5).setMin(0).allowGroupEdit().useTranslationOf(LED_SIZE);" ], [ "VALUE", "de.neemann.digital.core.element", "Keys", "public static final Key<Long> VALUE = new Key<>(\"Value\", 1L).setAdaptiveIntFormat().allowGroupEdit();" ], [ "DEFAULT", "de.neemann.digital.core.element", "Keys", "public static final Key<Long> DEFAULT = new Key<>(\"Default\", 0L).allowGroupEdit().setSecondary();" ], [ "INPUT_DEFAULT", "de.neemann.digital.core.element", "Keys", "public static final Key<InValue> INPUT_DEFAULT = new Key<>(\"InDefault\", new InValue(0)).setAdaptiveIntFormat().allowGroupEdit().setSecondary();" ], [ "DIP_DEFAULT", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> DIP_DEFAULT = new Key<>(\"dipDefault\", false).allowGroupEdit().setSecondary();" ], [ "COLOR", "de.neemann.digital.core.element", "Keys", "public static final Key<java.awt.Color> COLOR = new Key<>(\"Color\", java.awt.Color.RED).allowGroupEdit();" ], [ "INPUT_SPLIT", "de.neemann.digital.core.element", "Keys", "public static final Key<String> INPUT_SPLIT = new Key<>(\"Input Splitting\", \"4,4\");" ], [ "OUTPUT_SPLIT", "de.neemann.digital.core.element", "Keys", "public static final Key<String> OUTPUT_SPLIT = new Key<>(\"Output Splitting\", \"8\");" ], [ "SPLITTER_SPREADING", "de.neemann.digital.core.element", "Keys", "public static final Key<Integer> SPLITTER_SPREADING = new Key.KeyInteger(\"splitterSpreading\", 1).setComboBoxValues(1, 2, 3, 4).setMin(1).setMax(20).setSecondary();" ], [ "IN_OUT_SMALL", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> IN_OUT_SMALL = new Key<>(\"small\", false).allowGroupEdit().setSecondary();" ], [ "RUN_AT_REAL_TIME", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> RUN_AT_REAL_TIME = new Key<>(\"runRealTime\", false);" ], [ "INVERT_OUTPUT", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> INVERT_OUTPUT = new Key<>(\"invertOutput\", true);" ], [ "FREQUENCY", "de.neemann.digital.core.element", "Keys", "public static final Key<Integer> FREQUENCY = new Key.KeyInteger(\"Frequency\", 1).setComboBoxValues(1, 2, 5, 10, 20, 50, 100, 200, 500, 5000, 50000, Integer.MAX_VALUE).setMin(1).setDependsOn(RUN_AT_REAL_TIME);" ], [ "SELECTOR_BITS", "de.neemann.digital.core.element", "Keys", "public static final Key<Integer> SELECTOR_BITS = new Key.KeyBits(\"Selector Bits\", 1).setMax(8);" ], [ "ADDR_BITS", "de.neemann.digital.core.element", "Keys", "public static final Key<Integer> ADDR_BITS = // needs to have the same default value as INPUT_COUNT!!!  see de.neemann.digital.gui.components.EditorFactory#DataFieldEditor\nnew Key.KeyBits(\"AddrBits\", 2).setMax(24);" ], [ "BLOWN", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> BLOWN = new Key<>(\"Blown\", false).allowGroupEdit();" ], [ "CLOSED", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> CLOSED = new Key<>(\"Closed\", false).allowGroupEdit();" ], [ "SIGNED", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> SIGNED = new Key<>(\"Signed\", false).allowGroupEdit();" ], [ "REMAINDER_POSITIVE", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> REMAINDER_POSITIVE = new Key<>(\"remainderPositive\", true).setDependsOn(SIGNED);" ], [ "DATA", "de.neemann.digital.core.element", "Keys", "public static final Key<DataField> DATA = new Key<>(\"Data\", DataField::new);" ], [ "FLIP_SEL_POSITON", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> FLIP_SEL_POSITON = new Key<>(\"flipSelPos\", false).allowGroupEdit();" ], [ "ROTATE", "de.neemann.digital.core.element", "Keys", "public static final Key<Rotation> ROTATE = new Key<>(\"rotation\", new Rotation(0)).allowGroupEdit().setSecondary();" ], [ "WIDTH", "de.neemann.digital.core.element", "Keys", "public static final Key.KeyInteger WIDTH = new Key.KeyInteger(\"Width\", 3).setMin(2);" ], [ "SHAPE_TYPE", "de.neemann.digital.core.element", "Keys", "public static final Key<CustomCircuitShapeType> SHAPE_TYPE = new Key.KeyEnum<>(\"shapeType\", CustomCircuitShapeType.DEFAULT, CustomCircuitShapeType.values()).setSecondary();" ], [ "LAYOUT_SHAPE_DELTA", "de.neemann.digital.core.element", "Keys", "public static final Key.KeyInteger LAYOUT_SHAPE_DELTA = new Key.KeyInteger(\"layoutShapeDelta\", 0).setMin(0);" ], [ "HEIGHT", "de.neemann.digital.core.element", "Keys", "public static final Key<Integer> HEIGHT = new Key.KeyInteger(\"Height\", 3).setMin(2).setSecondary().setDependsOn(SHAPE_TYPE, cst -> cst.equals(CustomCircuitShapeType.LAYOUT));" ], [ "TERM_WIDTH", "de.neemann.digital.core.element", "Keys", "public static final Key.KeyInteger TERM_WIDTH = new Key.KeyInteger(\"termWidth\", 50).setMin(10);" ], [ "TERM_HEIGHT", "de.neemann.digital.core.element", "Keys", "public static final Key.KeyInteger TERM_HEIGHT = new Key.KeyInteger(\"termHeight\", 25).setMin(5);" ], [ "CYCLES", "de.neemann.digital.core.element", "Keys", "public static final Key.KeyInteger CYCLES = new Key.KeyInteger(\"Cycles\", 100000).setComboBoxValues(1000, 10000, 100000, 1000000);" ], [ "ENABLED", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> ENABLED = new Key<>(\"enabled\", true).allowGroupEdit();" ], [ "VALUE_IS_PROBE", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> VALUE_IS_PROBE = new Key<>(\"valueIsProbe\", false).allowGroupEdit().setSecondary();" ], [ "IS_PROGRAM_MEMORY", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> IS_PROGRAM_MEMORY = new Key<>(\"isProgramMemory\", false).setSecondary();" ], [ "IS_PROGRAM_COUNTER", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> IS_PROGRAM_COUNTER = new Key<>(\"isProgramCounter\", false).setSecondary();" ], [ "AUTO_RELOAD_ROM", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> AUTO_RELOAD_ROM = new Key<>(\"autoReload\", false).setSecondary();" ], [ "LAST_DATA_FILE", "de.neemann.digital.core.element", "Keys", "public static final Key<File> LAST_DATA_FILE = new Key.KeyFile(\"lastDataFile\", new File(\"\")).setDependsOn(AUTO_RELOAD_ROM).setSecondary();" ], [ "SHOW_DATA_TABLE", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> SHOW_DATA_TABLE = new Key<>(\"showDataTable\", false).setSecondary();" ], [ "SHOW_DATA_GRAPH", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> SHOW_DATA_GRAPH = new Key<>(\"showDataGraph\", false).setSecondary();" ], [ "SHOW_DATA_GRAPH_MICRO", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> SHOW_DATA_GRAPH_MICRO = new Key<>(\"showDataGraphMicro\", false).setSecondary();" ], [ "ADD_VALUE_TO_GRAPH", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> ADD_VALUE_TO_GRAPH = new Key<>(\"addValueToGraph\", true).allowGroupEdit().setSecondary();" ], [ "MICRO_STEP", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> MICRO_STEP = new Key<>(\"microStep\", false);" ], [ "MAX_STEP_COUNT", "de.neemann.digital.core.element", "Keys", "public static final Key.KeyInteger MAX_STEP_COUNT = new Key.KeyInteger(\"maxStepCount\", 25).setMin(5);" ], [ "SETTINGS_MAX_STEP_COUNT", "de.neemann.digital.core.element", "Keys", "public static final Key<Integer> SETTINGS_MAX_STEP_COUNT = new Key.KeyInteger(\"settingsMaxStepCount\", 1000).setComboBoxValues(500, 1000, 5000, 10000).setMin(500).setSecondary().useTranslationOf(MAX_STEP_COUNT);" ], [ "IS_HIGH_Z", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> IS_HIGH_Z = new Key<>(\"isHighZ\", false).allowGroupEdit().setSecondary();" ], [ "AVOID_ACTIVE_LOW", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> AVOID_ACTIVE_LOW = new Key<>(\"avoidActiveLow\", false).setDependsOn(IS_HIGH_Z).allowGroupEdit().setSecondary();" ], [ "DESCRIPTION", "de.neemann.digital.core.element", "Keys", "public static final Key.LongString DESCRIPTION = new Key.LongString(\"Description\");" ], [ "NETNAME", "de.neemann.digital.core.element", "Keys", "public static final Key<String> NETNAME = new Key<>(\"NetName\", \"\");" ], [ "SETTINGS_IEEE_SHAPES", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> SETTINGS_IEEE_SHAPES = new Key<>(\"IEEEShapes\", !Locale.getDefault().getLanguage().equals(Locale.GERMAN.getLanguage())).setRequiresRestart();" ], [ "SETTINGS_LANGUAGE", "de.neemann.digital.core.element", "Keys", "public static final Key<Language> SETTINGS_LANGUAGE = new Key<>(\"Language\", new Language()).setRequiresRestart();" ], [ "SETTINGS_DEFAULT_TREESELECT", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> SETTINGS_DEFAULT_TREESELECT = new Key<>(\"defTreeSelect\", false);" ], [ "SETTINGS_EXPRESSION_FORMAT", "de.neemann.digital.core.element", "Keys", "public static final Key.KeyEnum<FormatToExpression> SETTINGS_EXPRESSION_FORMAT = new Key.KeyEnum<>(\"ExpressionFormat\", FormatToExpression.UNICODE, FormatToExpression.values(), true);" ], [ "SETTINGS_GRID", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> SETTINGS_GRID = new Key<>(\"grid\", true).setRequiresRepaint();" ], [ "SETTINGS_SHOW_WIRE_BITS", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> SETTINGS_SHOW_WIRE_BITS = new Key<>(\"showWireBits\", false);" ], [ "SETTINGS_MAC_MOUSE", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> SETTINGS_MAC_MOUSE = new Key<>(\"macMouse\", false).setRequiresRestart().setSecondary();" ], [ "SETTINGS_SHOW_TUNNEL_RENAME_DIALOG", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> SETTINGS_SHOW_TUNNEL_RENAME_DIALOG = new Key<>(\"tunnelRenameDialog\", true);" ], [ "SETTINGS_RENAME_LABELS", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> SETTINGS_RENAME_LABELS = new Key<>(\"renameLabels\", true);" ], [ "SETTINGS_OPEN_REMOTE_PORT", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> SETTINGS_OPEN_REMOTE_PORT = new Key<>(\"openRemotePort\", false).setSecondary().setRequiresRestart();" ], [ "SETTINGS_REMOTE_PORT", "de.neemann.digital.core.element", "Keys", "public static final Key<Integer> SETTINGS_REMOTE_PORT = new Key.KeyInteger(\"remotePort\", 41114).setMin(0).setMax(0xffff).setComboBoxValues(41114).setSecondary().setRequiresRestart().setDependsOn(SETTINGS_OPEN_REMOTE_PORT);" ], [ "OSCILLATION_DETECTION_COUNTER", "de.neemann.digital.core.element", "Keys", "public static final Key<Integer> OSCILLATION_DETECTION_COUNTER = new Key.KeyInteger(\"oscillationDetectionCounter\", 1000).setComboBoxValues(1000, 5000, 10000).setMin(1000).setMax(100000);" ], [ "INT_FORMAT", "de.neemann.digital.core.element", "Keys", "public static final Key<IntFormat> INT_FORMAT = new Key.KeyEnum<>(\"intFormat\", IntFormat.def, IntFormat.values()).setSecondary();" ], [ "PROBE_MODE", "de.neemann.digital.core.element", "Keys", "public static final Key<ProbeMode> PROBE_MODE = new Key.KeyEnum<>(\"probeMode\", ProbeMode.VALUE, ProbeMode.values());" ], [ "FIXED_POINT", "de.neemann.digital.core.element", "Keys", "public static final Key<Integer> FIXED_POINT = new Key.KeyInteger(\"fixedPoint\", 4).setMin(1).setMax(64).setDependsOn(INT_FORMAT, intFormat -> intFormat.equals(IntFormat.fixed) || intFormat.equals(IntFormat.fixedSigned)).allowGroupEdit().setSecondary();" ], [ "GRAPHIC_WIDTH", "de.neemann.digital.core.element", "Keys", "public static final Key.KeyInteger GRAPHIC_WIDTH = new Key.KeyInteger(\"graphicWidth\", 160).setMin(4);" ], [ "GRAPHIC_HEIGHT", "de.neemann.digital.core.element", "Keys", "public static final Key.KeyInteger GRAPHIC_HEIGHT = new Key.KeyInteger(\"graphicHeight\", 100).setMin(4);" ], [ "RELAY_NORMALLY_CLOSED", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> RELAY_NORMALLY_CLOSED = new Key<>(\"relayNormallyClosed\", false).allowGroupEdit();" ], [ "POLES", "de.neemann.digital.core.element", "Keys", "public static final Key<Integer> POLES = new Key.KeyInteger(\"poles\", 1).setComboBoxValues(1, 2, 3, 4).setMin(1).allowGroupEdit();" ], [ "BARREL_SHIFTER_MODE", "de.neemann.digital.core.element", "Keys", "public static final Key<BarrelShifterMode> BARREL_SHIFTER_MODE = new Key.KeyEnum<>(\"barrelShifterMode\", BarrelShifterMode.logical, BarrelShifterMode.values());" ], [ "DIRECTION", "de.neemann.digital.core.element", "Keys", "public static final Key<LeftRightFormat> DIRECTION = new Key.KeyEnum<>(\"direction\", LeftRightFormat.left, LeftRightFormat.values());" ], [ "BARREL_SIGNED", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> BARREL_SIGNED = new Key<>(\"barrelSigned\", false);" ], [ "COMMON_CONNECTION", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> COMMON_CONNECTION = new Key<>(\"commonCathode\", false).allowGroupEdit();" ], [ "COMMON_CONNECTION_TYPE", "de.neemann.digital.core.element", "Keys", "public static final Key<CommonConnectionType> COMMON_CONNECTION_TYPE = new Key.KeyEnum<>(\"commonConnectionType\", CommonConnectionType.cathode, CommonConnectionType.values()).setDependsOn(COMMON_CONNECTION).allowGroupEdit();" ], [ "LED_PERSISTENCE", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> LED_PERSISTENCE = new Key<>(\"ledPersistence\", false).allowGroupEdit().setDependsOn(COMMON_CONNECTION);" ], [ "LED_PERSIST_TIME", "de.neemann.digital.core.element", "Keys", "public static final Key<Integer> LED_PERSIST_TIME = new Key.KeyInteger(\"persistTime\", 0).setMin(0).allowGroupEdit();" ], [ "SETTINGS_ATF1502_FITTER", "de.neemann.digital.core.element", "Keys", "public static final Key<File> SETTINGS_ATF1502_FITTER = new Key.KeyFile(\"atf1502Fitter\", new File(\"c:/Wincupl/WinCupl/Fitters\")).setDirectoryOnly(true).setSecondary();" ], [ "SETTINGS_ATMISP", "de.neemann.digital.core.element", "Keys", "public static final Key<File> SETTINGS_ATMISP = new Key.KeyFile(\"ATMISP\", getATMISPPath()).setSecondary();" ], [ "ROW_DATA_BITS", "de.neemann.digital.core.element", "Keys", "public static final Key.KeyBits ROW_DATA_BITS = new Key.KeyBits(\"rowDataBits\", 8);" ], [ "COL_ADDR_BITS", "de.neemann.digital.core.element", "Keys", "public static final Key.KeyBits COL_ADDR_BITS = new Key.KeyBits(\"colAddrBits\", 3);" ], [ "LOCKED_MODE", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> LOCKED_MODE = new Key<>(\"lockedMode\", false);" ], [ "PINNUMBER", "de.neemann.digital.core.element", "Keys", "public static final Key<String> PINNUMBER = new Key<>(\"pinNumber\", \"\").setSecondary();" ], [ "PINCOUNT", "de.neemann.digital.core.element", "Keys", "public static final Key<Integer> PINCOUNT = new Key.KeyInteger(\"pinCount\", 0).setMin(0).setSecondary().setDependsOn(SHAPE_TYPE, st -> st.equals(CustomCircuitShapeType.DIL));" ], [ "INVERTER_CONFIG", "de.neemann.digital.core.element", "Keys", "public static final Key<InverterConfig> INVERTER_CONFIG = new Key<>(\"inverterConfig\", new InverterConfig.Builder().build());" ], [ "BACKGROUND_COLOR", "de.neemann.digital.core.element", "Keys", "public static final Key<java.awt.Color> BACKGROUND_COLOR = new Key<>(\"backgroundColor\", new Color(255, 255, 180, 200));" ], [ "SETTINGS_FONT_SCALING", "de.neemann.digital.core.element", "Keys", "public static final Key<Integer> SETTINGS_FONT_SCALING = new Key.KeyInteger(\"fontSize\", Screen.getDefaultFontScaling()).setComboBoxValues(100, 120, 150, 180, 200, 250, 300).setMin(50).setMax(400).setRequiresRestart().setSecondary();" ], [ "SETTINGS_USE_EQUALS_KEY", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> SETTINGS_USE_EQUALS_KEY;" ], [ "WITH_ENABLE", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> WITH_ENABLE = new Key<>(\"withEnable\", true);" ], [ "FET_UNIDIRECTIONAL", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> FET_UNIDIRECTIONAL = new Key<>(\"unidirectional\", false);" ], [ "ACTIVE_LOW", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> ACTIVE_LOW = new Key<>(\"activeLow\", false).allowGroupEdit();" ], [ "MAP_TO_KEY", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> MAP_TO_KEY = new Key<>(\"mapToKey\", false).allowGroupEdit();" ], [ "SETTINGS_LIBRARY_PATH", "de.neemann.digital.core.element", "Keys", "public static final Key<File> SETTINGS_LIBRARY_PATH = new Key.KeyFile(\"libraryPath\", ElementLibrary.getLibPath()).setDirectoryOnly(true).setSecondary();" ], [ "SETTINGS_JAR_PATH", "de.neemann.digital.core.element", "Keys", "public static final Key<File> SETTINGS_JAR_PATH = new Key.KeyFile(\"jarPath\", new File(\"\")).setSecondary().setRequiresRestart();" ], [ "ROMMANAGER", "de.neemann.digital.core.element", "Keys", "public static final Key<ROMManagerFile> ROMMANAGER = new Key<>(\"romContent\", ROMManagerFile::new).setSecondary();" ], [ "APPLICATION_TYPE", "de.neemann.digital.core.element", "Keys", "public static final Key.KeyEnum<Application.Type> APPLICATION_TYPE = new Key.KeyEnum<>(\"applicationType\", Application.Type.Generic, Application.Type.values());" ], [ "EXTERNAL_INPUTS", "de.neemann.digital.core.element", "Keys", "public static final Key<String> EXTERNAL_INPUTS = new Key<>(\"externalInputs\", \"in\");" ], [ "EXTERNAL_OUTPUTS", "de.neemann.digital.core.element", "Keys", "public static final Key<String> EXTERNAL_OUTPUTS = new Key<>(\"externalOutputs\", \"out\");" ], [ "EXTERNAL_CODE", "de.neemann.digital.core.element", "Keys", "public static final Key.LongString EXTERNAL_CODE = new Key.LongString(\"Code\").setRows(30).setColumns(80).setLineNumbers(true);" ], [ "EXTERNAL_CODE_FILE", "de.neemann.digital.core.element", "Keys", "public static final Key.KeyFile EXTERNAL_CODE_FILE = new Key.KeyFile(\"CodeFile\", new File(\"\"));" ], [ "SETTINGS_GHDL_PATH", "de.neemann.digital.core.element", "Keys", "public static final Key<File> SETTINGS_GHDL_PATH = new Key.KeyFile(\"ghdlPath\", new File(\"ghdl\")).setSecondary();" ], [ "GHDL_OPTIONS", "de.neemann.digital.core.element", "Keys", "public static final Key<String> GHDL_OPTIONS = new Key.LongString(\"ghdlOptions\", \"--std=08 --ieee=synopsys\").setRows(3).setColumns(30).setPanelId(\"Options\");" ], [ "IVERILOG_OPTIONS", "de.neemann.digital.core.element", "Keys", "public static final Key<String> IVERILOG_OPTIONS = new Key.LongString(\"iverilogOptions\", \"\").setRows(3).setColumns(30).setPanelId(\"Options\");" ], [ "SETTINGS_IVERILOG_PATH", "de.neemann.digital.core.element", "Keys", "public static final Key<File> SETTINGS_IVERILOG_PATH = new Key.KeyFile(\"iverilogPath\", new File(\"iverilog\")).setSecondary();" ], [ "CUSTOM_SHAPE", "de.neemann.digital.core.element", "Keys", "public static final Key<CustomShapeDescription> CUSTOM_SHAPE = new Key<>(\"customShape\", new CustomShapeDescription.Builder().build()).setSecondary().setDependsOn(SHAPE_TYPE, st -> st.equals(CustomCircuitShapeType.CUSTOM));" ], [ "PRELOAD_PROGRAM", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> PRELOAD_PROGRAM = new Key<>(\"preloadProgram\", false).setSecondary();" ], [ "BIG_ENDIAN", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> BIG_ENDIAN = new Key<>(\"bigEndian\", false).setSecondary().setDependsOn(AUTO_RELOAD_ROM);" ], [ "PROGRAM_TO_PRELOAD", "de.neemann.digital.core.element", "Keys", "public static final Key<File> PROGRAM_TO_PRELOAD = new Key.KeyFile(\"preloadProgramFile\", new File(\"\")).setSecondary().setDependsOn(PRELOAD_PROGRAM);" ], [ "BIG_ENDIAN_SETTING", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> BIG_ENDIAN_SETTING = new Key<>(\"bigEndianSetting\", false).setSecondary().useTranslationOf(BIG_ENDIAN).setDependsOn(PRELOAD_PROGRAM);" ], [ "WIDE_SHAPE", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> WIDE_SHAPE = new Key<>(\"wideShape\", false).setSecondary().allowGroupEdit();" ], [ "RECT_WIDTH", "de.neemann.digital.core.element", "Keys", "public static final Key.KeyInteger RECT_WIDTH = new Key.KeyInteger(\"RectWidth\", 3).setMin(2);" ], [ "RECT_HEIGHT", "de.neemann.digital.core.element", "Keys", "public static final Key.KeyInteger RECT_HEIGHT = new Key.KeyInteger(\"RectHeight\", 3).setMin(2);" ], [ "RECT_INSIDE", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> RECT_INSIDE = new Key<>(\"RectInside\", false).setSecondary();" ], [ "RECT_BOTTOM", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> RECT_BOTTOM = new Key<>(\"RectBottom\", false).setSecondary();" ], [ "RECT_RIGHT", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> RECT_RIGHT = new Key<>(\"RectRight\", false).setSecondary();" ], [ "MIDI_CHANNEL", "de.neemann.digital.core.element", "Keys", "public static final Key.KeyInteger MIDI_CHANNEL = new Key.KeyInteger(\"midiChannel\", 1).setMin(1).setMax(16);" ], [ "MIDI_INSTRUMENT", "de.neemann.digital.core.element", "Keys", "public static final Key<String> MIDI_INSTRUMENT = new Key<>(\"midiInstrument\", \"\");" ], [ "MIDI_PROG_CHANGE", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> MIDI_PROG_CHANGE = new Key<>(\"midiProgChange\", false);" ], [ "SETTINGS_TOOLCHAIN_CONFIG", "de.neemann.digital.core.element", "Keys", "public static final Key<File> SETTINGS_TOOLCHAIN_CONFIG = new Key.KeyFile(\"toolChainConfig\", new File(\"\")).setSecondary().setRequiresRestart();" ], [ "GENERIC", "de.neemann.digital.core.element", "Keys", "public static final Key<String> GENERIC = new Key.LongString(\"generic\").setLineNumbers(true).allowGroupEdit();" ], [ "GENERICLARGE", "de.neemann.digital.core.element", "Keys", "public static final Key<String> GENERICLARGE = new Key.LongString(\"generic\").setLineNumbers(true).setRows(20).allowGroupEdit();" ], [ "IS_GENERIC", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> IS_GENERIC = new Key<>(\"isGeneric\", false).setSecondary();" ], [ "SETTINGS_SHOW_TUTORIAL", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> SETTINGS_SHOW_TUTORIAL = new Key<>(\"showTutorial\", true).setSecondary();" ], [ "SETTINGS_WIRETOOLTIP", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> SETTINGS_WIRETOOLTIP = new Key<>(\"wireToolTips\", false);" ], [ "SWITCH_ACTS_AS_INPUT", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> SWITCH_ACTS_AS_INPUT = new Key<>(\"switchActsAsInput\", false).setSecondary();" ], [ "SNAP_TO_GRID", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> SNAP_TO_GRID = new Key<>(\"snapToGrid\", true).setSecondary();" ], [ "MIRROR", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> MIRROR = new Key<>(\"mirror\", false).allowGroupEdit().setSecondary();" ], [ "TESTDATA", "de.neemann.digital.core.element", "Keys", "public static final Key<TestCaseDescription> TESTDATA = new Key<>(\"Testdata\", TestCaseDescription::new);" ], [ "TRIGGER", "de.neemann.digital.core.element", "Keys", "public static final Key.KeyEnum<ScopeTrigger.Trigger> TRIGGER = new Key.KeyEnum<>(\"trigger\", ScopeTrigger.Trigger.both, ScopeTrigger.Trigger.values());" ], [ "PORT", "de.neemann.digital.core.element", "Keys", "public static final Key.KeyInteger PORT = new Key.KeyInteger(\"port\", 23).setMin(1).setMax((1 << 16) - 1);" ], [ "TELNET_ESCAPE", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> TELNET_ESCAPE = new Key<>(\"telnetEscape\", true).allowGroupEdit();" ], [ "SKIP_HDL", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> SKIP_HDL = new Key<>(\"skipHDL\", false).setSecondary();" ], [ "PREFIX", "de.neemann.digital.core.basic", "FanIn", "public static final String PREFIX = \"In_\";" ], [ "DESCRIPTION", "de.neemann.digital.core.basic", "NOr", "public static final ElementTypeDescription DESCRIPTION = new FanInDescription(NOr.class).addAttribute(Keys.WIDE_SHAPE);" ], [ "DESCRIPTION", "de.neemann.digital.core.basic", "And", "public static final ElementTypeDescription DESCRIPTION = new FanInDescription(And.class).addAttribute(Keys.WIDE_SHAPE);" ], [ "DESCRIPTION", "de.neemann.digital.core.basic", "XNOr", "public static final ElementTypeDescription DESCRIPTION = new FanInDescription(XNOr.class).addAttribute(Keys.WIDE_SHAPE);" ], [ "DESCRIPTION", "de.neemann.digital.core.basic", "XOr", "public static final ElementTypeDescription DESCRIPTION = new FanInDescription(XOr.class).addAttribute(Keys.WIDE_SHAPE);" ], [ "DESCRIPTION", "de.neemann.digital.core.basic", "Not", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Not.class, input(\"in\")).addAttribute(Keys.ROTATE).addAttribute(Keys.WIDE_SHAPE).addAttribute(Keys.BITS).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.basic", "NAnd", "public static final ElementTypeDescription DESCRIPTION = new FanInDescription(NAnd.class).addAttribute(Keys.WIDE_SHAPE);" ], [ "DESCRIPTION", "de.neemann.digital.core.basic", "Or", "public static final ElementTypeDescription DESCRIPTION = new FanInDescription(Or.class).addAttribute(Keys.WIDE_SHAPE);" ], [ "STARTED", "de.neemann.digital.core", "ModelEvent", "public static final ModelEvent STARTED = new ModelEvent(ModelEventType.STARTED);" ], [ "CLOSED", "de.neemann.digital.core", "ModelEvent", "public static final ModelEvent CLOSED = new ModelEvent(ModelEventType.CLOSED);" ], [ "POSTCLOSED", "de.neemann.digital.core", "ModelEvent", "public static final ModelEvent POSTCLOSED = new ModelEvent(ModelEventType.POSTCLOSED);" ], [ "STEP", "de.neemann.digital.core", "ModelEvent", "public static final ModelEvent STEP = new ModelEvent(ModelEventType.STEP);" ], [ "CHECKBURN", "de.neemann.digital.core", "ModelEvent", "public static final ModelEvent CHECKBURN = new ModelEvent(ModelEventType.CHECKBURN);" ], [ "MICROSTEP", "de.neemann.digital.core", "ModelEvent", "public static final ModelEvent MICROSTEP = new ModelEvent(ModelEventType.MICROSTEP);" ], [ "RUN_TO_BREAK", "de.neemann.digital.core", "ModelEvent", "public static final ModelEvent RUN_TO_BREAK = new ModelEvent(ModelEventType.RUN_TO_BREAK);" ], [ "RUN_TO_BREAK_TIMEOUT", "de.neemann.digital.core", "ModelEvent", "public static final ModelEvent RUN_TO_BREAK_TIMEOUT = new ModelEvent(ModelEventType.RUN_TO_BREAK_TIMEOUT);" ], [ "BREAK", "de.neemann.digital.core", "ModelEvent", "public static final ModelEvent BREAK = new ModelEvent(ModelEventType.BREAK);" ], [ "DESCRIPTION", "de.neemann.digital.core.switching", "FGPFET", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(FGPFET.class, input(\"G\")).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).addAttribute(Keys.BLOWN);" ], [ "DESCRIPTION", "de.neemann.digital.core.switching", "NFET", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(NFET.class, input(\"G\")).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.BITS).addAttribute(Keys.FET_UNIDIRECTIONAL).addAttribute(Keys.LABEL);" ], [ "DESCRIPTION", "de.neemann.digital.core.switching", "FGNFET", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(FGNFET.class, input(\"G\")).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).addAttribute(Keys.BLOWN);" ], [ "DESCRIPTION", "de.neemann.digital.core.switching", "PFET", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(PFET.class, input(\"G\")).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.BITS).addAttribute(Keys.FET_UNIDIRECTIONAL).addAttribute(Keys.LABEL);" ], [ "DESCRIPTION", "de.neemann.digital.core.switching", "TransGate", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(TransGate.class, input(\"S\"), input(\"~S\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS);" ], [ "DESCRIPTION", "de.neemann.digital.core.switching", "SwitchDT", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(SwitchDT.class).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).addAttribute(Keys.POLES);" ], [ "DESCRIPTION", "de.neemann.digital.core.switching", "Relay", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Relay.class, input(\"in1\"), input(\"in2\")).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).addAttribute(Keys.POLES).addAttribute(Keys.RELAY_NORMALLY_CLOSED);" ], [ "DESCRIPTION", "de.neemann.digital.core.switching", "RelayDT", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(RelayDT.class, input(\"in1\"), input(\"in2\")).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).addAttribute(Keys.POLES);" ], [ "DESCRIPTION", "de.neemann.digital.core.switching", "Switch", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Switch.class).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).addAttribute(Keys.POLES).addAttribute(Keys.CLOSED).addAttribute(Keys.SWITCH_ACTS_AS_INPUT);" ], [ "DESCRIPTION", "de.neemann.digital.core.switching", "Fuse", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Fuse.class).addAttribute(Keys.ROTATE).addAttribute(Keys.BLOWN);" ], [ "DESCRIPTION", "de.neemann.digital.core.wiring", "Reset", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"Reset\", Reset.class).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.INVERT_OUTPUT).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.wiring", "Stop", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Stop.class, input(\"stop\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.INVERTER_CONFIG);" ], [ "DESCRIPTION", "de.neemann.digital.core.wiring", "Decoder", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Decoder.class, input(\"sel\")).addAttribute(Keys.ROTATE).addAttribute(Keys.SELECTOR_BITS).addAttribute(Keys.FLIP_SEL_POSITON).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.wiring", "Delay", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Delay.class, input(\"in\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.DELAY_TIME);" ], [ "DESCRIPTION", "de.neemann.digital.core.wiring", "Driver", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Driver.class, input(\"in\"), input(\"sel\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.FLIP_SEL_POSITON).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.wiring", "DriverInvSel", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(DriverInvSel.class, input(\"in\"), input(\"sel\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.FLIP_SEL_POSITON).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.wiring", "PriorityEncoder", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(PriorityEncoder.class) {\n\n    @Override\n    public PinDescriptions getInputDescription(ElementAttributes elementAttributes) {\n        int inputs = 1 << elementAttributes.get(Keys.SELECTOR_BITS);\n        PinDescription[] names = new PinDescription[inputs];\n        for (int i = 0; i < inputs; i++) names[i] = input(\"in\" + i, Lang.get(\"elem_PriorityEncoder_input\", i));\n        return new PinDescriptions(names);\n    }\n}.addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.SELECTOR_BITS).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.wiring", "BusSplitter", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(BusSplitter.class, input(\"OE\")).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.BITS).addAttribute(Keys.SPLITTER_SPREADING);" ], [ "DESCRIPTION", "de.neemann.digital.core.wiring", "Splitter", "public static final ElementTypeDescription DESCRIPTION = new SplitterTypeDescription().addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.INPUT_SPLIT).addAttribute(Keys.OUTPUT_SPLIT).addAttribute(Keys.SPLITTER_SPREADING).setShortName(\"\").supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.wiring", "Multiplexer", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Multiplexer.class) {\n\n    @Override\n    public PinDescriptions getInputDescription(ElementAttributes elementAttributes) {\n        int size = 1 << elementAttributes.get(Keys.SELECTOR_BITS);\n        PinDescription[] names = new PinDescription[size + 1];\n        names[0] = input(\"sel\", Lang.get(\"elem_Multiplexer_pin_sel\"));\n        for (int i = 0; i < size; i++) names[i + 1] = input(\"in_\" + i, Lang.get(\"elem_Multiplexer_input\", i));\n        return new PinDescriptions(names);\n    }\n}.addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.SELECTOR_BITS).addAttribute(Keys.FLIP_SEL_POSITON).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.wiring", "BitSelector", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(BitSelector.class, input(\"in\"), input(\"sel\")).addAttribute(Keys.ROTATE).addAttribute(Keys.SELECTOR_BITS).addAttribute(Keys.FLIP_SEL_POSITON).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.wiring", "Break", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Break.class, input(\"brk\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.ENABLED).addAttribute(Keys.CYCLES);" ], [ "DESCRIPTION", "de.neemann.digital.core.wiring", "Clock", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"Clock\", Clock.class).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.RUN_AT_REAL_TIME).addAttribute(Keys.FREQUENCY).addAttribute(Keys.PINNUMBER).addAttribute(Keys.IN_OUT_SMALL).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.wiring", "AsyncSeq", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(AsyncSeq.class).addAttribute(Keys.RUN_AT_REAL_TIME).addAttribute(Keys.FREQUENCY);" ], [ "DESCRIPTION", "de.neemann.digital.core.wiring", "Demultiplexer", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Demultiplexer.class, input(\"sel\"), input(\"in\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.SELECTOR_BITS).addAttribute(Keys.FLIP_SEL_POSITON).addAttribute(Keys.DEFAULT).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.flipflops", "FlipflopDAsync", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"D_FF_AS\", FlipflopDAsync.class, input(\"Set\"), input(\"D\"), input(\"C\").setClock(), input(\"Clr\")).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).addAttribute(Keys.DEFAULT).addAttribute(Keys.INVERTER_CONFIG).addAttribute(Keys.VALUE_IS_PROBE).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.flipflops", "FlipflopD", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"D_FF\", FlipflopD.class, input(\"D\"), input(\"C\").setClock()).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).addAttribute(Keys.DEFAULT).addAttribute(Keys.INVERTER_CONFIG).addAttribute(Keys.VALUE_IS_PROBE).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.flipflops", "FlipflopRSAsync", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"RS_FF_AS\", FlipflopRSAsync.class, input(\"S\"), input(\"R\")).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.LABEL).addAttribute(Keys.DEFAULT).addAttribute(Keys.INVERTER_CONFIG).addAttribute(Keys.VALUE_IS_PROBE);" ], [ "DESCRIPTION", "de.neemann.digital.core.flipflops", "FlipflopT", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"T_FF\", FlipflopT.class) {\n\n    @Override\n    public PinDescriptions getInputDescription(ElementAttributes elementAttributes) throws NodeException {\n        if (elementAttributes.get(Keys.WITH_ENABLE))\n            return new PinDescriptions(input(\"T\"), input(\"C\").setClock()).setLangKey(getPinLangKey());\n        else\n            return new PinDescriptions(input(\"C\").setClock()).setLangKey(getPinLangKey());\n    }\n}.addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.LABEL).addAttribute(Keys.WITH_ENABLE).addAttribute(Keys.DEFAULT).addAttribute(Keys.INVERTER_CONFIG).addAttribute(Keys.VALUE_IS_PROBE);" ], [ "DESCRIPTION", "de.neemann.digital.core.flipflops", "FlipflopJKAsync", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"JK_FF_AS\", FlipflopJKAsync.class, input(\"Set\"), input(\"J\"), input(\"C\").setClock(), input(\"K\"), input(\"Clr\")).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.LABEL).addAttribute(Keys.DEFAULT).addAttribute(Keys.INVERTER_CONFIG).addAttribute(Keys.VALUE_IS_PROBE).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.flipflops", "FlipflopJK", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"JK_FF\", FlipflopJK.class, input(\"J\"), input(\"C\").setClock(), input(\"K\")).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.LABEL).addAttribute(Keys.DEFAULT).addAttribute(Keys.INVERTER_CONFIG).addAttribute(Keys.VALUE_IS_PROBE).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.flipflops", "Monoflop", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Monoflop.class, input(\"C\").setClock(), input(\"R\")).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.LABEL).addAttribute(Keys.DEFAULT).addAttribute(Keys.MONOFLOP_DELAY).addAttribute(Keys.INVERTER_CONFIG).addAttribute(Keys.VALUE_IS_PROBE);" ], [ "DESCRIPTION", "de.neemann.digital.core.flipflops", "FlipflopRS", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"RS_FF\", FlipflopRS.class, input(\"S\"), input(\"C\").setClock(), input(\"R\")).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.LABEL).addAttribute(Keys.DEFAULT).addAttribute(Keys.INVERTER_CONFIG).addAttribute(Keys.VALUE_IS_PROBE);" ], [ "DESCRIPTION", "de.neemann.digital.core.arithmetic", "BarrelShifter", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(BarrelShifter.class, input(\"in\"), input(\"shift\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.BITS).addAttribute(Keys.BARREL_SIGNED).addAttribute(Keys.DIRECTION).addAttribute(Keys.BARREL_SHIFTER_MODE);" ], [ "DESCRIPTION", "de.neemann.digital.core.arithmetic", "Mul", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Mul.class, input(\"a\"), input(\"b\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.SIGNED).addAttribute(Keys.BITS).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.arithmetic", "Neg", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Neg.class, input(\"in\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.arithmetic", "BitExtender", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(BitExtender.class, input(\"in\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.INPUT_BITS).addAttribute(Keys.OUTPUT_BITS).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.arithmetic", "Add", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Add.class, input(\"a\"), input(\"b\"), input(\"c_i\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.BITS).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.arithmetic", "Div", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Div.class, input(\"a\"), input(\"b\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.BITS).addAttribute(Keys.SIGNED).addAttribute(Keys.REMAINDER_POSITIVE);" ], [ "DESCRIPTION", "de.neemann.digital.core.arithmetic", "PRNG", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(PRNG.class, input(\"S\"), input(\"se\"), input(\"ne\"), input(\"C\").setClock()).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.LABEL);" ], [ "DESCRIPTION", "de.neemann.digital.core.arithmetic", "Sub", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Sub.class, input(\"a\"), input(\"b\"), input(\"c_i\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.BITS).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.arithmetic", "Comparator", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Comparator.class, input(\"a\"), input(\"b\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.BITS).addAttribute(Keys.SIGNED).setShortName(\"\").supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.arithmetic", "BitCount", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(BitCount.class, input(\"in\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS);" ], [ "EMPTY_LIST", "de.neemann.digital.core", "ObservableValues", "public static final ObservableValues EMPTY_LIST = new ObservableValues();" ], [ "DEFAULT_FORMATTER", "de.neemann.digital.core", "IntFormat", "public static final ValueFormatter DEFAULT_FORMATTER = ValueFormatterDefault.INSTANCE;" ], [ "HEX_FORMATTER", "de.neemann.digital.core", "IntFormat", "public static final ValueFormatter HEX_FORMATTER = ValueFormatterHex.INSTANCE;" ], [ "DESCRIPTION", "de.neemann.digital.core.extern", "External", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(External.class) {\n\n    @Override\n    public PinDescriptions getInputDescription(ElementAttributes elementAttributes) {\n        return new PortDefinition(elementAttributes.get(Keys.EXTERNAL_INPUTS)).getPinDescriptions(PinDescription.Direction.input);\n    }\n\n    @Override\n    public PinDescriptions getOutputDescriptions(ElementAttributes elementAttributes) {\n        return new PortDefinition(elementAttributes.get(Keys.EXTERNAL_OUTPUTS)).getPinDescriptions(PinDescription.Direction.output);\n    }\n}.addAttribute(Keys.LABEL).addAttribute(Keys.WIDTH).addAttribute(Keys.EXTERNAL_INPUTS).addAttribute(Keys.EXTERNAL_OUTPUTS).addAttribute(Keys.EXTERNAL_CODE).addAttribute(Keys.APPLICATION_TYPE).addAttribute(Keys.GHDL_OPTIONS).addAttribute(Keys.IVERILOG_OPTIONS).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.extern", "ExternalFile", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(ExternalFile.class) {\n\n    @Override\n    public PinDescriptions getInputDescription(ElementAttributes elementAttributes) {\n        return new PortDefinition(elementAttributes.get(Keys.EXTERNAL_INPUTS)).getPinDescriptions(PinDescription.Direction.input);\n    }\n\n    @Override\n    public PinDescriptions getOutputDescriptions(ElementAttributes elementAttributes) {\n        return new PortDefinition(elementAttributes.get(Keys.EXTERNAL_OUTPUTS)).getPinDescriptions(PinDescription.Direction.output);\n    }\n}.addAttribute(Keys.LABEL).addAttribute(Keys.WIDTH).addAttribute(Keys.EXTERNAL_INPUTS).addAttribute(Keys.EXTERNAL_OUTPUTS).addAttribute(Keys.EXTERNAL_CODE_FILE).addAttribute(Keys.APPLICATION_TYPE).addAttribute(Keys.GHDL_OPTIONS).addAttribute(Keys.IVERILOG_OPTIONS).supportsHDL();" ], [ "DEFAULT_RAD", "de.neemann.digital.fsm", "State", "static final int DEFAULT_RAD = 70;" ], [ "INSTANCE", "de.neemann.digital.lang", "Lang", "static final Lang INSTANCE = new Lang();" ], [ "INSTANCE", "de.neemann.digital.lang", "InstanceHolder", "static final Lang INSTANCE = new Lang();" ], [ "DESCRIPTION", "de.neemann.digital.testing", "TestCaseElement", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"Testcase\", TestCaseElement.class).addAttribute(Keys.LABEL).addAttribute(Keys.TESTDATA).addAttribute(Keys.ENABLED).supportsHDL();" ], [ "STATENAMES", "de.neemann.digital.analyse", "TruthTableTableModel", "public static final String[] STATENAMES = new String[] { \"0\", \"1\", \"x\" };" ], [ "ONE", "de.neemann.digital.analyse.expression", "Constant", "public static final Constant ONE = new Constant(true);" ], [ "ZERO", "de.neemann.digital.analyse.expression", "Constant", "public static final Constant ZERO = new Constant(false);" ], [ "PRIMARY", "de.neemann.digital.gui.components", "EditorPanel", "public static final String PRIMARY = \"primary\";" ], [ "SECONDARY", "de.neemann.digital.gui.components", "EditorPanel", "public static final String SECONDARY = \"secondary\";" ], [ "INSTANCE", "de.neemann.digital.gui.components", "EditorFactory", "static final EditorFactory INSTANCE = new EditorFactory();" ], [ "MAX_TERMINAL_STORED", "de.neemann.digital.gui.components.terminal", "ConsoleTerminal", "public static final int MAX_TERMINAL_STORED = 2048;" ], [ "DESCRIPTION", "de.neemann.digital.gui.components.terminal", "Terminal", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Terminal.class, input(\"D\"), input(\"C\").setClock(), input(\"en\")).addAttribute(Keys.TERM_WIDTH).addAttribute(Keys.TERM_HEIGHT).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL);" ], [ "DESCRIPTION", "de.neemann.digital.gui.components.terminal", "Keyboard", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Keyboard.class, input(\"C\").setClock(), input(\"en\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.INVERTER_CONFIG);" ], [ "FAILED_COLOR", "de.neemann.digital.gui.components.testing", "ValueTableDialog", "static final Color FAILED_COLOR = new Color(255, 200, 200);" ], [ "PASSED_COLOR", "de.neemann.digital.gui.components.testing", "ValueTableDialog", "static final Color PASSED_COLOR = new Color(200, 255, 200);" ], [ "ICON_DELETE", "de.neemann.digital.gui.components", "CircuitComponent", "public static final Icon ICON_DELETE = IconCreator.create(\"delete.png\");" ], [ "ICON_COPY", "de.neemann.digital.gui.components", "CircuitComponent", "public static final Icon ICON_COPY = IconCreator.create(\"edit-copy.png\");" ], [ "DESCRIPTION", "de.neemann.digital.gui.components.graphics", "VGA", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(VGA.class, input(\"R\"), input(\"G\"), input(\"B\"), input(\"H\"), input(\"V\"), input(\"C\").setClock()).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL);" ], [ "DESCRIPTION", "de.neemann.digital.gui.components.graphics", "GraphicCard", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(GraphicCard.class, input(\"A\"), input(\"str\"), input(\"C\").setClock(), input(\"ld\"), input(\"B\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).addAttribute(Keys.GRAPHIC_WIDTH).addAttribute(Keys.GRAPHIC_HEIGHT);" ], [ "DESCRIPTION", "de.neemann.digital.gui.components.graphics", "LedMatrix", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(LedMatrix.class, input(\"r-data\"), input(\"c-addr\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.ROW_DATA_BITS).addAttribute(Keys.COL_ADDR_BITS).addAttribute(Keys.COLOR).addAttribute(Keys.LED_PERSISTENCE);" ], [ "DESCRIPTION", "de.neemann.digital.gui.components.data", "ScopeTrigger", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(ScopeTrigger.class, input(\"T\").setClock()).addAttribute(Keys.LABEL).addAttribute(Keys.TRIGGER).addAttribute(Keys.MAX_STEP_COUNT);" ], [ "DATADESCRIPTION", "de.neemann.digital.gui.components.data", "DummyElement", "public static final ElementTypeDescription DATADESCRIPTION = new ElementTypeDescription(\"Data\", DummyElement.class).addAttribute(Keys.MICRO_STEP).addAttribute(Keys.MAX_STEP_COUNT).addAttribute(Keys.SNAP_TO_GRID);" ], [ "TEXTDESCRIPTION", "de.neemann.digital.gui.components.data", "DummyElement", "public static final ElementTypeDescription TEXTDESCRIPTION = new ElementTypeDescription(\"Text\", DummyElement.class).addAttribute(Keys.DESCRIPTION).addAttribute(Keys.ROTATE).addAttribute(Keys.TEXT_ORIENTATION).addAttribute(Keys.FONT_SIZE).addAttribute(Keys.SNAP_TO_GRID);" ], [ "RECTDESCRIPTION", "de.neemann.digital.gui.components.data", "DummyElement", "public static final ElementTypeDescription RECTDESCRIPTION = new ElementTypeDescription(\"Rectangle\", DummyElement.class).addAttribute(Keys.LABEL).addAttribute(Keys.RECT_WIDTH).addAttribute(Keys.RECT_HEIGHT).addAttribute(Keys.RECT_INSIDE).addAttribute(Keys.RECT_BOTTOM).addAttribute(Keys.RECT_RIGHT).addAttribute(Keys.FONT_SIZE).addAttribute(Keys.SNAP_TO_GRID);" ], [ "LEFT", "de.neemann.digital.gui.components", "TextLineNumber", "public final static float LEFT = 0.0f;" ], [ "CENTER", "de.neemann.digital.gui.components", "TextLineNumber", "public final static float CENTER = 0.5f;" ], [ "RIGHT", "de.neemann.digital.gui.components", "TextLineNumber", "public final static float RIGHT = 1.0f;" ], [ "INSTANCE", "de.neemann.digital.gui", "Settings", "static final Settings INSTANCE = new Settings();" ], [ "INSTANCE", "de.neemann.digital.gui", "SettingsHolder", "static final Settings INSTANCE = new Settings();" ], [ "BASE_FILE_KEY", "de.neemann.digital.hdl.hgs", "Context", "public static final String BASE_FILE_KEY = \"baseFile\";" ], [ "DESCRIPTION", "de.neemann.digital.draw.library", "GenericCode", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(GenericCode.class).addAttribute(Keys.GENERICLARGE).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.draw.library", "GenericInitCode", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(GenericInitCode.class).addAttribute(Keys.LABEL).addAttribute(Keys.ENABLED).addAttribute(Keys.GENERIC).supportsHDL();" ], [ "GEN_ARGS_KEY", "de.neemann.digital.draw.library", "ResolveGenerics", "public static final String GEN_ARGS_KEY = \"genArgs\";" ], [ "HEIGHT", "de.neemann.digital.draw.shapes", "ButtonShape", "protected static final int HEIGHT = OUT_SIZE / 2;" ], [ "SIZE2", "de.neemann.digital.draw.shapes", "GenericShape", "public static final int SIZE2 = 10;" ], [ "SIZE", "de.neemann.digital.draw.shapes", "GenericShape", "public static final int SIZE = SIZE2 * 2;" ], [ "CIRC", "de.neemann.digital.draw.shapes", "DILShape", "static final float CIRC = (float) (4 * (Math.sqrt(2) - 1) / 3);" ], [ "DOWNSHIFT", "de.neemann.digital.draw.shapes", "VDDShape", "static final int DOWNSHIFT = 4;" ], [ "CHARGED_GATE", "de.neemann.digital.draw.shapes", "FGFETShapeN", "static final Style CHARGED_GATE = Style.NORMAL.deriveStyle(6, false, Color.RED);" ], [ "OUT_SIZE", "de.neemann.digital.draw.shapes", "OutputShape", "public static final int OUT_SIZE = GenericShape.SIZE * 3 / 4;" ], [ "LATEX_RAD", "de.neemann.digital.draw.shapes", "OutputShape", "static final Vector LATEX_RAD = new Vector(Style.MAXLINETHICK, Style.MAXLINETHICK);" ], [ "WIDTH2", "de.neemann.digital.draw.shapes", "PullDownShape", "public static final int WIDTH2 = SIZE2 - 3;" ], [ "HEIGHT", "de.neemann.digital.draw.shapes", "PullDownShape", "public static final int HEIGHT = SIZE + SIZE / 3;" ], [ "HEIGHT", "de.neemann.digital.draw.shapes", "SevenShape", "static final int HEIGHT = 7;" ], [ "FRAME", "de.neemann.digital.draw.shapes", "SevenShape", "public static final Polygon FRAME = Polygon.createFromPath(\"m -10,1 L 70,1 70,139 -10,139 z\");" ], [ "DESCRIPTION", "de.neemann.digital.draw.elements", "Tunnel", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Tunnel.class, input(\"in\")).addAttribute(Keys.ROTATE).addAttribute(Keys.NETNAME).supportsHDL();" ], [ "HIGH_CONTRAST", "de.neemann.digital.draw.graphics", "SVGSettings", "static final Key<Boolean> HIGH_CONTRAST = new Key<>(\"SVG_highContrast\", false);" ], [ "MONOCHROME", "de.neemann.digital.draw.graphics", "SVGSettings", "static final Key<Boolean> MONOCHROME = new Key<>(\"SVG_monochrome\", false);" ], [ "SMALL_IO", "de.neemann.digital.draw.graphics", "SVGSettings", "static final Key<Boolean> SMALL_IO = new Key<>(\"SVG_smallIO\", false);" ], [ "NO_PIN_MARKER", "de.neemann.digital.draw.graphics", "SVGSettings", "static final Key<Boolean> NO_PIN_MARKER = new Key<>(\"SVG_noPinMarker\", false);" ], [ "THINNER_LINES", "de.neemann.digital.draw.graphics", "SVGSettings", "static final Key<Boolean> THINNER_LINES = new Key<>(\"SVG_thinnerLines\", false);" ], [ "HIDE_TEST", "de.neemann.digital.draw.graphics", "SVGSettings", "static final Key<Boolean> HIDE_TEST = new Key<>(\"SVG_hideTest\", false);" ], [ "NO_SHAPE_FILLING", "de.neemann.digital.draw.graphics", "SVGSettings", "static final Key<Boolean> NO_SHAPE_FILLING = new Key<>(\"SVG_noShapeFilling\", false);" ], [ "LATEX", "de.neemann.digital.draw.graphics", "SVGSettings", "static final Key<Boolean> LATEX = new Key<>(\"SVG_LaTeX\", false);" ], [ "PINS_IN_MATH_MODE", "de.neemann.digital.draw.graphics", "SVGSettings", "static final Key<Boolean> PINS_IN_MATH_MODE = new Key<>(\"SVG_pinsInMathMode\", false).setDependsOn(LATEX);" ], [ "INSTANCE", "de.neemann.digital.draw.graphics", "SVGSettings", "static final SVGSettings INSTANCE = new SVGSettings();" ], [ "INSTANCE", "de.neemann.digital.draw.graphics", "SettingsHolder", "static final SVGSettings INSTANCE = new SVGSettings();" ], [ "COLOR_SCHEME", "de.neemann.digital.draw.graphics", "ColorScheme", "public static final Key<ColorSchemes> COLOR_SCHEME = new Key.KeyEnum<>(\"colorScheme\", ColorSchemes.DEFAULT, ColorSchemes.values()).setRequiresRepaint();" ], [ "CUSTOM_COLOR_SCHEME", "de.neemann.digital.draw.graphics", "ColorScheme", "public static final Key<ColorScheme> CUSTOM_COLOR_SCHEME = new Key<>(\"customColorScheme\", DEFAULT_SCHEME).setDependsOn(COLOR_SCHEME, o -> o.equals(ColorSchemes.CUSTOM)).setRequiresRepaint();" ], [ "MAXLINETHICK", "de.neemann.digital.draw.graphics", "Style", "public static final int MAXLINETHICK = 4;" ], [ "NORMAL", "de.neemann.digital.draw.graphics", "Style", "public static final Style NORMAL = new Builder().build();" ], [ "DISABLED", "de.neemann.digital.draw.graphics", "Style", "public static final Style DISABLED = new Builder().setColor(ColorKey.DISABLED).build();" ], [ "INOUT", "de.neemann.digital.draw.graphics", "Style", "public static final Style INOUT = new Builder(NORMAL).setFontStyle(Font.ITALIC).build();" ], [ "FAILED", "de.neemann.digital.draw.graphics", "Style", "public static final Style FAILED = new Builder(NORMAL).setColor(ColorKey.ERROR).build();" ], [ "PASS", "de.neemann.digital.draw.graphics", "Style", "public static final Style PASS = new Builder(NORMAL).setColor(ColorKey.PASSED).build();" ], [ "NORMAL_TEXT", "de.neemann.digital.draw.graphics", "Style", "public static final Style NORMAL_TEXT = new Builder(NORMAL).setMattersForSize(true).build();" ], [ "THIN", "de.neemann.digital.draw.graphics", "Style", "public static final Style THIN = new Builder(NORMAL).setThickness(LINETHIN).build();" ], [ "THIN_FILLED", "de.neemann.digital.draw.graphics", "Style", "public static final Style THIN_FILLED = new Builder(NORMAL).setThickness(LINETHIN).setFilled(true).build();" ], [ "THICK", "de.neemann.digital.draw.graphics", "Style", "public static final Style THICK = new Builder(NORMAL).setThickness(LINETHICK + LINETHIN).build();" ], [ "WIRE", "de.neemann.digital.draw.graphics", "Style", "public static final Style WIRE = new Builder().setThickness(WIRETHICK).setFilled(true).setColor(ColorKey.WIRE).setEndCap(BasicStroke.CAP_ROUND).build();" ], [ "WIRE_LOW", "de.neemann.digital.draw.graphics", "Style", "public static final Style WIRE_LOW = new Builder(WIRE).setColor(ColorKey.WIRE_LOW).build();" ], [ "WIRE_HIGH", "de.neemann.digital.draw.graphics", "Style", "public static final Style WIRE_HIGH = new Builder(WIRE).setColor(ColorKey.WIRE_HIGH).build();" ], [ "WIRE_HIGHZ", "de.neemann.digital.draw.graphics", "Style", "public static final Style WIRE_HIGHZ = new Builder(WIRE).setColor(ColorKey.WIRE_Z).build();" ], [ "WIRE_OUT", "de.neemann.digital.draw.graphics", "Style", "public static final Style WIRE_OUT = new Builder(WIRE).setColor(ColorKey.WIRE_OUT).build();" ], [ "FILLED", "de.neemann.digital.draw.graphics", "Style", "public static final Style FILLED = new Builder().setFilled(true).build();" ], [ "DASH", "de.neemann.digital.draw.graphics", "Style", "public static final Style DASH = new Builder().setThickness(LINEDASH).setDash(new float[] { 4, 4 }).build();" ], [ "SHAPE_PIN", "de.neemann.digital.draw.graphics", "Style", "public static final Style SHAPE_PIN = new Builder().setThickness(LINETHIN).setColor(ColorKey.PINS).setFontSize(18).build();" ], [ "SHAPE_SPLITTER", "de.neemann.digital.draw.graphics", "Style", "public static final Style SHAPE_SPLITTER = new Builder(SHAPE_PIN).setFontSize(12).build();" ], [ "WIRE_VALUE", "de.neemann.digital.draw.graphics", "Style", "public static final Style WIRE_VALUE = new Builder(SHAPE_SPLITTER).setColor(ColorKey.WIRE_VALUE).build();" ], [ "WIRE_BITS", "de.neemann.digital.draw.graphics", "Style", "public static final Style WIRE_BITS = new Builder(SHAPE_SPLITTER).setColor(ColorKey.WIRE).build();" ], [ "HIGHLIGHT", "de.neemann.digital.draw.graphics", "Style", "public static final Style HIGHLIGHT = new Builder(NORMAL).setColor(ColorKey.HIGHLIGHT).setEndCap(BasicStroke.CAP_ROUND).build();" ], [ "ERROR", "de.neemann.digital.draw.graphics", "Style", "public static final Style ERROR = new Builder(NORMAL).setColor(ColorKey.ERROR).setEndCap(BasicStroke.CAP_ROUND).build();" ], [ "BLANK", "de.neemann.digital.draw.graphics.text.text", "Blank", "public static final Blank BLANK = new Blank();" ], [ "LOOK_AT_ALIAS", "de.neemann.digital.toolchain", "Configuration", "static final String LOOK_AT_ALIAS = \"lookAt\";" ], [ "REF_ALIAS", "de.neemann.digital.toolchain", "Configuration", "static final String REF_ALIAS = \"ref\";" ] ],
  "tokensMethodJavadocValues" : [ ],
  "tokensMethodArguments" : [ [ "name", "java.lang", "String" ], [ "expression", "de.neemann.digital.analyse.expression", "Expression" ] ],
  "tokensMethodVariablesNonPrivateNonStaticNonVoidMethods" : [ [ "getOutputs", "de.neemann.digital.builder.Gal16v8", "BuilderCollectorGAL", "public ArrayList<String> getOutputs()" ], [ "getClass", "java.lang", "Object", "public final native Class<? extends Object> getClass()" ], [ "getRegistered", "de.neemann.digital.builder.Gal16v8", "BuilderCollectorGAL", "public Map<String, Expression> getRegistered()" ], [ "addCombinatorial", "de.neemann.digital.builder.Gal16v8", "BuilderCollectorGAL", "public BuilderCollector addCombinatorial(String name, Expression expression) throws BuilderException" ], [ "equals", "java.lang", "Object", "public boolean equals(Object arg0)" ], [ "toString", "java.lang", "Object", "public String toString()" ], [ "getCombinatorial", "de.neemann.digital.builder.Gal16v8", "BuilderCollectorGAL", "public Map<String, Expression> getCombinatorial()" ], [ "hashCode", "java.lang", "Object", "public native int hashCode()" ], [ "getInputs", "de.neemann.digital.builder.Gal16v8", "BuilderCollectorGAL", "public ArrayList<String> getInputs()" ], [ "clone", "java.lang", "Object", "protected native Object clone() throws CloneNotSupportedException" ], [ "addSequential", "de.neemann.digital.builder.Gal16v8", "BuilderCollectorGAL", "public BuilderCollector addSequential(String name, Expression expression) throws BuilderException" ], [ "addCombinatorial", "de.neemann.digital.builder", "BuilderInterface", "public abstract T addCombinatorial(String arg0, Expression arg1) throws BuilderException" ], [ "addSequential", "de.neemann.digital.builder", "BuilderInterface", "public abstract T addSequential(String arg0, Expression arg1) throws BuilderException" ], [ "translateEscapes", "java.lang", "String", "public String translateEscapes()" ], [ "startsWith", "java.lang", "String", "public boolean startsWith(String arg0)" ], [ "indexOf", "java.lang", "String", "public int indexOf(int arg0, int arg1)" ], [ "toLowerCase", "java.lang", "String", "public String toLowerCase()" ], [ "getBytes", "java.lang", "String", "public byte[] getBytes(String arg0) throws UnsupportedEncodingException" ], [ "formatted", "java.lang", "String", "public String formatted(Object[] arg0)" ], [ "lastIndexOf", "java.lang", "String", "public int lastIndexOf(String arg0, int arg1)" ], [ "strip", "java.lang", "String", "public String strip()" ], [ "intern", "java.lang", "String", "public native String intern()" ], [ "describeConstable", "java.lang", "String", "public Optional<String> describeConstable()" ], [ "offsetByCodePoints", "java.lang", "String", "public int offsetByCodePoints(int arg0, int arg1)" ], [ "resolveConstantDesc", "java.lang", "String", "public String resolveConstantDesc(MethodHandles.Lookup arg0)" ], [ "matches", "java.lang", "String", "public boolean matches(String arg0)" ], [ "replace", "java.lang", "String", "public String replace(char arg0, char arg1)" ], [ "toUpperCase", "java.lang", "String", "public String toUpperCase(Locale arg0)" ], [ "codePoints", "java.lang", "String", "public IntStream codePoints()" ], [ "stripIndent", "java.lang", "String", "public String stripIndent()" ], [ "stripLeading", "java.lang", "String", "public String stripLeading()" ], [ "substring", "java.lang", "String", "public String substring(int arg0)" ], [ "indexOf", "java.lang", "String", "public int indexOf(int arg0)" ], [ "contains", "java.lang", "String", "public boolean contains(CharSequence arg0)" ], [ "equals", "java.lang", "String", "public boolean equals(Object arg0)" ], [ "lines", "java.lang", "String", "public Stream<String> lines()" ], [ "hashCode", "java.lang", "String", "public int hashCode()" ], [ "substring", "java.lang", "String", "public String substring(int arg0, int arg1)" ], [ "indent", "java.lang", "String", "public String indent(int arg0)" ], [ "replace", "java.lang", "String", "public String replace(CharSequence arg0, CharSequence arg1)" ], [ "regionMatches", "java.lang", "String", "public boolean regionMatches(int arg0, String arg1, int arg2, int arg3)" ], [ "lastIndexOf", "java.lang", "String", "public int lastIndexOf(int arg0)" ], [ "getBytes", "java.lang", "String", "public byte[] getBytes()" ], [ "transform", "java.lang", "String", "public <R> R transform(Function<? super String, ? extends R> arg0)" ], [ "value", "java.lang", "String", "byte[] value()" ], [ "coder", "java.lang", "String", "byte coder()" ], [ "toLowerCase", "java.lang", "String", "public String toLowerCase(Locale arg0)" ], [ "length", "java.lang", "String", "public int length()" ], [ "indexOf", "java.lang", "String", "public int indexOf(String arg0)" ], [ "compareToIgnoreCase", "java.lang", "String", "public int compareToIgnoreCase(String arg0)" ], [ "startsWith", "java.lang", "String", "public boolean startsWith(String arg0, int arg1)" ], [ "compareTo", "java.lang", "String", "public int compareTo(String arg0)" ], [ "subSequence", "java.lang", "String", "public CharSequence subSequence(int arg0, int arg1)" ], [ "isLatin1", "java.lang", "String", "boolean isLatin1()" ], [ "contentEquals", "java.lang", "String", "public boolean contentEquals(StringBuffer arg0)" ], [ "indexOf", "java.lang", "String", "public int indexOf(String arg0, int arg1)" ], [ "equalsIgnoreCase", "java.lang", "String", "public boolean equalsIgnoreCase(String arg0)" ], [ "repeat", "java.lang", "String", "public String repeat(int arg0)" ], [ "isEmpty", "java.lang", "String", "public boolean isEmpty()" ], [ "isBlank", "java.lang", "String", "public boolean isBlank()" ], [ "toString", "java.lang", "String", "public String toString()" ], [ "stripTrailing", "java.lang", "String", "public String stripTrailing()" ], [ "codePointBefore", "java.lang", "String", "public int codePointBefore(int arg0)" ], [ "getBytes", "java.lang", "String", "public byte[] getBytes(Charset arg0)" ], [ "endsWith", "java.lang", "String", "public boolean endsWith(String arg0)" ], [ "replaceFirst", "java.lang", "String", "public String replaceFirst(String arg0, String arg1)" ], [ "charAt", "java.lang", "String", "public char charAt(int arg0)" ], [ "lastIndexOf", "java.lang", "String", "public int lastIndexOf(int arg0, int arg1)" ], [ "toCharArray", "java.lang", "String", "public char[] toCharArray()" ], [ "codePointAt", "java.lang", "String", "public int codePointAt(int arg0)" ], [ "contentEquals", "java.lang", "String", "public boolean contentEquals(CharSequence arg0)" ], [ "replaceAll", "java.lang", "String", "public String replaceAll(String arg0, String arg1)" ], [ "codePointCount", "java.lang", "String", "public int codePointCount(int arg0, int arg1)" ], [ "chars", "java.lang", "String", "public IntStream chars()" ], [ "regionMatches", "java.lang", "String", "public boolean regionMatches(boolean arg0, int arg1, String arg2, int arg3, int arg4)" ], [ "split", "java.lang", "String", "public String[] split(String arg0, int arg1)" ], [ "split", "java.lang", "String", "public String[] split(String arg0)" ], [ "concat", "java.lang", "String", "public String concat(String arg0)" ], [ "lastIndexOf", "java.lang", "String", "public int lastIndexOf(String arg0)" ], [ "toUpperCase", "java.lang", "String", "public String toUpperCase()" ], [ "trim", "java.lang", "String", "public String trim()" ], [ "compareTo", "java.lang", "Comparable", "public abstract int compareTo(T arg0)" ], [ "toString", "java.lang", "CharSequence", "public abstract String toString()" ], [ "isEmpty", "java.lang", "CharSequence", "public default boolean isEmpty()" ], [ "codePoints", "java.lang", "CharSequence", "public default IntStream codePoints()" ], [ "charAt", "java.lang", "CharSequence", "public abstract char charAt(int arg0)" ], [ "subSequence", "java.lang", "CharSequence", "public abstract CharSequence subSequence(int arg0, int arg1)" ], [ "length", "java.lang", "CharSequence", "public abstract int length()" ], [ "chars", "java.lang", "CharSequence", "public default IntStream chars()" ], [ "describeConstable", "java.lang.constant", "Constable", "public abstract Optional<? extends ConstantDesc> describeConstable()" ], [ "resolveConstantDesc", "java.lang.constant", "ConstantDesc", "public abstract Object resolveConstantDesc(MethodHandles.Lookup arg0) throws ReflectiveOperationException" ], [ "traverse", "de.neemann.digital.analyse.expression", "Expression", "public abstract <V> V traverse(V arg0)" ], [ "copy", "de.neemann.digital.analyse.expression", "Expression", "public abstract Expression copy()" ], [ "calculate", "de.neemann.digital.analyse.expression", "Expression", "public abstract boolean calculate(Context arg0) throws ExpressionException" ], [ "getOrderString", "de.neemann.digital.analyse.expression", "Expression", "public abstract String getOrderString()" ], [ "getInputs", "de.neemann.digital.builder", "BuilderCollector", "public ArrayList<String> getInputs()" ], [ "getRegistered", "de.neemann.digital.builder", "BuilderCollector", "public Map<String, Expression> getRegistered()" ], [ "getCombinatorial", "de.neemann.digital.builder", "BuilderCollector", "public Map<String, Expression> getCombinatorial()" ], [ "addSequential", "de.neemann.digital.builder", "BuilderCollector", "public BuilderCollector addSequential(String arg0, Expression arg1) throws BuilderException" ], [ "addCombinatorial", "de.neemann.digital.builder", "BuilderCollector", "public BuilderCollector addCombinatorial(String arg0, Expression arg1) throws BuilderException" ], [ "getOutputs", "de.neemann.digital.builder", "BuilderCollector", "public ArrayList<String> getOutputs()" ] ],
  "tokensMethodVariablesNonPrivateNonStaticAttributes" : [ ],
  "tokensOracleVariablesNonPrivateNonStaticNonVoidMethods" : [ ],
  "tokensOracleVariablesNonPrivateNonStaticAttributes" : [ ]
}, {
  "id" : 26712,
  "oracle" : "expression != null;",
  "oracleType" : "PRE",
  "projectName" : "Digital",
  "packageName" : "de.neemann.digital.builder.Gal16v8",
  "className" : "BuilderCollectorGAL",
  "javadocTag" : "",
  "methodJavadoc" : "",
  "methodSourceCode" : "public BuilderCollector addCombinatorial(String name, Expression expression) throws BuilderException{\n    checkOpen();\n    return super.addCombinatorial(name, expression);\n}",
  "classJavadoc" : "/**\n * Used to avoid a double cell allocation if the output of a ff is used as a autput of the state machine.\n * This is the case if a Moore machine is build where the state equals the output.\n * Sometimes this kind of state machines is called a Medwedew machine.\n */",
  "classSourceCode" : "/*\n * Copyright (c) 2019 Helmut Neemann.\n * Use of this source code is governed by the GPL v3 license\n * that can be found in the LICENSE file.\n */\npackage de.neemann.digital.builder.Gal16v8;\n\nimport de.neemann.digital.analyse.expression.Expression;\nimport de.neemann.digital.builder.BuilderCollector;\nimport de.neemann.digital.builder.BuilderException;\nimport de.neemann.digital.builder.PinMap;\n\nimport java.util.ArrayList;\nimport java.util.HashSet;\nimport java.util.Map;\n\n/**\n * Used to avoid a double cell allocation if the output of a ff is used as a autput of the state machine.\n * This is the case if a Moore machine is build where the state equals the output.\n * Sometimes this kind of state machines is called a Medwedew machine.\n */\npublic class BuilderCollectorGAL extends BuilderCollector {\n    private final PinMap pinMap;\n    private HashSet<String> sequentialVars;\n    private boolean doubleCellUsageFixed = false;\n\n    /**\n     * Creates a new instance\n     *\n     * @param pinMap the used pinMap. Is required to handle aliases correctly\n     */\n    public BuilderCollectorGAL(PinMap pinMap) {\n        this.pinMap = pinMap;\n        sequentialVars = new HashSet<>();\n    }\n\n    @Override\n    public BuilderCollector addCombinatorial(String name, Expression expression) throws BuilderException {\n        checkOpen();\n        return super.addCombinatorial(name, expression);\n    }\n\n    @Override\n    public BuilderCollector addSequential(String name, Expression expression) throws BuilderException {\n        checkOpen();\n        sequentialVars.add(name);\n        return super.addSequential(name, expression);\n    }\n\n    private void checkOpen() {\n        if (doubleCellUsageFixed)\n            throw new RuntimeException(\"wrong BuilderCollectorGAL usage!\");\n    }\n\n    private void fixDoubleCellUsage() {\n        if (!doubleCellUsageFixed) {\n\n            super.getCombinatorial().entrySet().removeIf(c -> {\n                if (pinMap.isSimpleAlias(c.getKey(), c.getValue(), sequentialVars)) {\n                    removeOutput(c.getKey());\n                    return true;\n                }\n                return false;\n            });\n\n            doubleCellUsageFixed = true;\n        }\n    }\n\n    @Override\n    public ArrayList<String> getOutputs() {\n        fixDoubleCellUsage();\n        return super.getOutputs();\n    }\n\n    @Override\n    public ArrayList<String> getInputs() {\n        fixDoubleCellUsage();\n        return super.getInputs();\n    }\n\n    @Override\n    public Map<String, Expression> getCombinatorial() {\n        fixDoubleCellUsage();\n        return super.getCombinatorial();\n    }\n\n    @Override\n    public Map<String, Expression> getRegistered() {\n        fixDoubleCellUsage();\n        return super.getRegistered();\n    }\n}\n",
  "tokensGeneralGrammar" : [ "null", "true", "false", ",", ".", ":", ";", "?", "(", ")", "jdVar", "stream", "Arrays", "allMatch", "noneMatch", "anyMatch", "~", ">>", "<<", ">>>", "|", "&", "^", "+", "-", "/", "*", "%", "&&", "||", ">=", "<=", ">", "<", "==", "!=", "instanceof", "class", "methodResultID", "this" ],
  "tokensGeneralValuesGlobalDictionary" : [ [ "0", "int" ], [ "1", "int" ], [ "-1", "int" ], [ "0.0", "double" ], [ "1.0", "double" ], [ "-1.0", "double" ], [ "\"\"", "String" ], [ "\" \"", "String" ] ],
  "tokensProjectClasses" : [ [ "CLI", "de.neemann" ], [ "Mouse", "de.neemann.gui" ], [ "LineBreaker", "de.neemann.gui" ], [ "IconCreator", "de.neemann.gui" ], [ "ConfirmDialogBuilder", "de.neemann.gui" ], [ "Resources", "de.neemann.gui.language" ], [ "Bundle", "de.neemann.gui.language" ], [ "Language", "de.neemann.gui.language" ], [ "ToolTipAction", "de.neemann.gui" ], [ "MyFileChooser", "de.neemann.gui" ], [ "ClosingWindowListener", "de.neemann.gui" ], [ "ErrorMessage", "de.neemann.gui" ], [ "WindowSizeStorage", "de.neemann.gui" ], [ "Screen", "de.neemann.gui" ], [ "ToolTipProvider", "de.neemann.gui" ], [ "InfoDialog", "de.neemann.gui" ], [ "ValueFormatter", "de.neemann.digital.core" ], [ "ModelStateObserver", "de.neemann.digital.core" ], [ "PullDown", "de.neemann.digital.core.pld" ], [ "Diode", "de.neemann.digital.core.pld" ], [ "DiodeBackward", "de.neemann.digital.core.pld" ], [ "PullUp", "de.neemann.digital.core.pld" ], [ "DiodeForward", "de.neemann.digital.core.pld" ], [ "Node", "de.neemann.digital.core" ], [ "RAMSinglePort", "de.neemann.digital.core.memory" ], [ "ROMDualPort", "de.neemann.digital.core.memory" ], [ "RAMDualAccess", "de.neemann.digital.core.memory" ], [ "ByteArrayFromValueArray", "de.neemann.digital.core.memory.importer" ], [ "Importer", "de.neemann.digital.core.memory.importer" ], [ "LogisimReader", "de.neemann.digital.core.memory.importer" ], [ "DataFieldValueArray", "de.neemann.digital.core.memory.importer" ], [ "ByteArrayReader", "de.neemann.digital.core.memory.importer" ], [ "ValueArrayReader", "de.neemann.digital.core.memory.importer" ], [ "IntelHexReader", "de.neemann.digital.core.memory.importer" ], [ "ValueArray", "de.neemann.digital.core.memory.importer" ], [ "BinReader", "de.neemann.digital.core.memory.importer" ], [ "ByteArray", "de.neemann.digital.core.memory.importer" ], [ "MultiValueArray", "de.neemann.digital.core.memory.importer" ], [ "CounterPreset", "de.neemann.digital.core.memory" ], [ "RAMDualPort", "de.neemann.digital.core.memory" ], [ "Register", "de.neemann.digital.core.memory" ], [ "LookUpTable", "de.neemann.digital.core.memory" ], [ "BlockRAMDualPort", "de.neemann.digital.core.memory" ], [ "Counter", "de.neemann.digital.core.memory" ], [ "ROMMangerBase", "de.neemann.digital.core.memory.rom" ], [ "ROMManagerFile", "de.neemann.digital.core.memory.rom" ], [ "ROMManager", "de.neemann.digital.core.memory.rom" ], [ "ROMInterface", "de.neemann.digital.core.memory.rom" ], [ "EEPROM", "de.neemann.digital.core.memory" ], [ "ProgramCounter", "de.neemann.digital.core.memory" ], [ "RAMAsync", "de.neemann.digital.core.memory" ], [ "ROM", "de.neemann.digital.core.memory" ], [ "DataField", "de.neemann.digital.core.memory" ], [ "EEPROMDualPort", "de.neemann.digital.core.memory" ], [ "RAMInterface", "de.neemann.digital.core.memory" ], [ "DataFieldConverter", "de.neemann.digital.core.memory" ], [ "RAMSinglePortSel", "de.neemann.digital.core.memory" ], [ "ProgramMemory", "de.neemann.digital.core.memory" ], [ "RegisterFile", "de.neemann.digital.core.memory" ], [ "ModelStateObserverTyped", "de.neemann.digital.core" ], [ "Observable", "de.neemann.digital.core" ], [ "NodeWithoutDelay", "de.neemann.digital.core" ], [ "ExceptionWithOrigin", "de.neemann.digital.core" ], [ "ObservableValue", "de.neemann.digital.core" ], [ "SpeedTest", "de.neemann.digital.core" ], [ "BurnException", "de.neemann.digital.core" ], [ "GlobalValues", "de.neemann.digital.core" ], [ "MIDI", "de.neemann.digital.core.io" ], [ "RGBLED", "de.neemann.digital.core.io" ], [ "Out", "de.neemann.digital.core.io" ], [ "RotEncoder", "de.neemann.digital.core.io" ], [ "PinControl", "de.neemann.digital.core.io" ], [ "DipSwitch", "de.neemann.digital.core.io" ], [ "CommonConnectionType", "de.neemann.digital.core.io" ], [ "LightBulb", "de.neemann.digital.core.io" ], [ "Probe", "de.neemann.digital.core.io" ], [ "Button", "de.neemann.digital.core.io" ], [ "ButtonLED", "de.neemann.digital.core.io" ], [ "In", "de.neemann.digital.core.io" ], [ "StepperMotorUnipolar", "de.neemann.digital.core.io" ], [ "ProbeMode", "de.neemann.digital.core.io" ], [ "NotConnected", "de.neemann.digital.core.io" ], [ "MIDIHelper", "de.neemann.digital.core.io" ], [ "StepperMotorBipolar", "de.neemann.digital.core.io" ], [ "Const", "de.neemann.digital.core.io" ], [ "PowerSupply", "de.neemann.digital.core.io" ], [ "Ground", "de.neemann.digital.core.io" ], [ "InValue", "de.neemann.digital.core.io" ], [ "VDD", "de.neemann.digital.core.io" ], [ "ServerHolder", "de.neemann.digital.core.io.telnet" ], [ "Telnet", "de.neemann.digital.core.io.telnet" ], [ "ByteBuffer", "de.neemann.digital.core.io.telnet" ], [ "Server", "de.neemann.digital.core.io.telnet" ], [ "ElementAttributes", "de.neemann.digital.core.element" ], [ "Element", "de.neemann.digital.core.element" ], [ "ElementFactory", "de.neemann.digital.core.element" ], [ "PinInfo", "de.neemann.digital.core.element" ], [ "PinDescriptions", "de.neemann.digital.core.element" ], [ "PinDescription", "de.neemann.digital.core.element" ], [ "Keys", "de.neemann.digital.core.element" ], [ "Rotation", "de.neemann.digital.core.element" ], [ "AttributeListener", "de.neemann.digital.core.element" ], [ "Key", "de.neemann.digital.core.element" ], [ "ImmutableList", "de.neemann.digital.core.element" ], [ "ElementTypeDescription", "de.neemann.digital.core.element" ], [ "FanIn", "de.neemann.digital.core.basic" ], [ "NOr", "de.neemann.digital.core.basic" ], [ "And", "de.neemann.digital.core.basic" ], [ "XNOr", "de.neemann.digital.core.basic" ], [ "XOr", "de.neemann.digital.core.basic" ], [ "Not", "de.neemann.digital.core.basic" ], [ "NAnd", "de.neemann.digital.core.basic" ], [ "Function", "de.neemann.digital.core.basic" ], [ "Or", "de.neemann.digital.core.basic" ], [ "ExceptionWithOriginInterface", "de.neemann.digital.core" ], [ "ModelEvent", "de.neemann.digital.core" ], [ "BacktrackException", "de.neemann.digital.core" ], [ "PlainSwitch", "de.neemann.digital.core.switching" ], [ "FGPFET", "de.neemann.digital.core.switching" ], [ "NFET", "de.neemann.digital.core.switching" ], [ "FGNFET", "de.neemann.digital.core.switching" ], [ "PFET", "de.neemann.digital.core.switching" ], [ "PlainSwitchDT", "de.neemann.digital.core.switching" ], [ "TransGate", "de.neemann.digital.core.switching" ], [ "SwitchDT", "de.neemann.digital.core.switching" ], [ "Relay", "de.neemann.digital.core.switching" ], [ "RelayDT", "de.neemann.digital.core.switching" ], [ "Switch", "de.neemann.digital.core.switching" ], [ "Fuse", "de.neemann.digital.core.switching" ], [ "Reset", "de.neemann.digital.core.wiring" ], [ "Stop", "de.neemann.digital.core.wiring" ], [ "Decoder", "de.neemann.digital.core.wiring" ], [ "Delay", "de.neemann.digital.core.wiring" ], [ "Driver", "de.neemann.digital.core.wiring" ], [ "DataBus", "de.neemann.digital.core.wiring.bus" ], [ "SingleBusHandler", "de.neemann.digital.core.wiring.bus" ], [ "ConnectedBusHandler", "de.neemann.digital.core.wiring.bus" ], [ "AbstractBusHandler", "de.neemann.digital.core.wiring.bus" ], [ "BusModelStateObserver", "de.neemann.digital.core.wiring.bus" ], [ "CommonBusValue", "de.neemann.digital.core.wiring.bus" ], [ "DriverInvSel", "de.neemann.digital.core.wiring" ], [ "PriorityEncoder", "de.neemann.digital.core.wiring" ], [ "BusSplitter", "de.neemann.digital.core.wiring" ], [ "Splitter", "de.neemann.digital.core.wiring" ], [ "Multiplexer", "de.neemann.digital.core.wiring" ], [ "BitSelector", "de.neemann.digital.core.wiring" ], [ "Break", "de.neemann.digital.core.wiring" ], [ "Clock", "de.neemann.digital.core.wiring" ], [ "AsyncSeq", "de.neemann.digital.core.wiring" ], [ "Demultiplexer", "de.neemann.digital.core.wiring" ], [ "BitsException", "de.neemann.digital.core" ], [ "NodeInterface", "de.neemann.digital.core" ], [ "NodeException", "de.neemann.digital.core" ], [ "FlipflopDAsync", "de.neemann.digital.core.flipflops" ], [ "FlipflopD", "de.neemann.digital.core.flipflops" ], [ "FlipflopRSAsync", "de.neemann.digital.core.flipflops" ], [ "FlipflopT", "de.neemann.digital.core.flipflops" ], [ "FlipflopJKAsync", "de.neemann.digital.core.flipflops" ], [ "FlipflopJK", "de.neemann.digital.core.flipflops" ], [ "Monoflop", "de.neemann.digital.core.flipflops" ], [ "FlipflopRS", "de.neemann.digital.core.flipflops" ], [ "FlipflopBit", "de.neemann.digital.core.flipflops" ], [ "BarrelShifter", "de.neemann.digital.core.arithmetic" ], [ "Mul", "de.neemann.digital.core.arithmetic" ], [ "Neg", "de.neemann.digital.core.arithmetic" ], [ "BitExtender", "de.neemann.digital.core.arithmetic" ], [ "Add", "de.neemann.digital.core.arithmetic" ], [ "Div", "de.neemann.digital.core.arithmetic" ], [ "LeftRightFormat", "de.neemann.digital.core.arithmetic" ], [ "PRNG", "de.neemann.digital.core.arithmetic" ], [ "Sub", "de.neemann.digital.core.arithmetic" ], [ "BarrelShifterMode", "de.neemann.digital.core.arithmetic" ], [ "Comparator", "de.neemann.digital.core.arithmetic" ], [ "BitCount", "de.neemann.digital.core.arithmetic" ], [ "ObservableValues", "de.neemann.digital.core" ], [ "Value", "de.neemann.digital.core" ], [ "IntFormat", "de.neemann.digital.core" ], [ "SyncAccess", "de.neemann.digital.core" ], [ "Bits", "de.neemann.digital.core" ], [ "ProcessInterface", "de.neemann.digital.core.extern.handler" ], [ "StdIOInterface", "de.neemann.digital.core.extern.handler" ], [ "ApplicationVerilogStdIO", "de.neemann.digital.core.extern" ], [ "Application", "de.neemann.digital.core.extern" ], [ "External", "de.neemann.digital.core.extern" ], [ "Port", "de.neemann.digital.core.extern" ], [ "PortDefinition", "de.neemann.digital.core.extern" ], [ "ApplicationGHDL", "de.neemann.digital.core.extern" ], [ "ApplicationIVerilog", "de.neemann.digital.core.extern" ], [ "ApplicationVHDLStdIO", "de.neemann.digital.core.extern" ], [ "VHDLTokenizer", "de.neemann.digital.core.extern" ], [ "ApplicationGeneric", "de.neemann.digital.core.extern" ], [ "Options", "de.neemann.digital.core.extern" ], [ "VerilogTokenizer", "de.neemann.digital.core.extern" ], [ "ExternalFile", "de.neemann.digital.core.extern" ], [ "ProcessStarter", "de.neemann.digital.core.extern" ], [ "ModelEventType", "de.neemann.digital.core" ], [ "Observer", "de.neemann.digital.core" ], [ "ErrorDetector", "de.neemann.digital.core" ], [ "Statistics", "de.neemann.digital.core.stats" ], [ "Countable", "de.neemann.digital.core.stats" ], [ "Model", "de.neemann.digital.core" ], [ "Signal", "de.neemann.digital.core" ], [ "StringList", "de.neemann.digital" ], [ "XStreamValid", "de.neemann.digital" ], [ "StatsExport", "de.neemann.digital.cli" ], [ "SVGExport", "de.neemann.digital.cli" ], [ "CommandLineTester", "de.neemann.digital.cli" ], [ "CSVWriter", "de.neemann.digital.cli" ], [ "BasicCommand", "de.neemann.digital.cli.cli" ], [ "Argument", "de.neemann.digital.cli.cli" ], [ "CLIException", "de.neemann.digital.cli.cli" ], [ "Muxer", "de.neemann.digital.cli.cli" ], [ "ArgumentKey", "de.neemann.digital.cli.cli" ], [ "NamedCommand", "de.neemann.digital.cli.cli" ], [ "CLICommand", "de.neemann.digital.cli.cli" ], [ "ArgumentBase", "de.neemann.digital.cli.cli" ], [ "CircuitLoader", "de.neemann.digital.cli" ], [ "Main", "de.neemann.digital.cli" ], [ "Modification", "de.neemann.digital.undo" ], [ "Modifications", "de.neemann.digital.undo" ], [ "ModifyException", "de.neemann.digital.undo" ], [ "Copyable", "de.neemann.digital.undo" ], [ "UndoManager", "de.neemann.digital.undo" ], [ "ChangedListener", "de.neemann.digital.undo" ], [ "CircuitRepresentation", "de.neemann.digital.fsm" ], [ "Transition", "de.neemann.digital.fsm" ], [ "Movable", "de.neemann.digital.fsm" ], [ "MouseMovable", "de.neemann.digital.fsm" ], [ "Optimizer", "de.neemann.digital.fsm" ], [ "Permute", "de.neemann.digital.fsm" ], [ "FiniteStateMachineException", "de.neemann.digital.fsm" ], [ "TransitionTableCreator", "de.neemann.digital.fsm" ], [ "ValueParser", "de.neemann.digital.fsm" ], [ "WaitGroup", "de.neemann.digital.fsm" ], [ "FSMComponent", "de.neemann.digital.fsm.gui" ], [ "FSMFrame", "de.neemann.digital.fsm.gui" ], [ "OptimizerDialog", "de.neemann.digital.fsm.gui" ], [ "FSMDemos", "de.neemann.digital.fsm" ], [ "FSM", "de.neemann.digital.fsm" ], [ "State", "de.neemann.digital.fsm" ], [ "Lang", "de.neemann.digital.lang" ], [ "LineListenerResolveDontCare", "de.neemann.digital.testing" ], [ "TestingDataException", "de.neemann.digital.testing" ], [ "UnitTester", "de.neemann.digital.testing" ], [ "FolderTestRunner", "de.neemann.digital.testing" ], [ "TestExecutor", "de.neemann.digital.testing" ], [ "Transitions", "de.neemann.digital.testing" ], [ "TestCaseDescription", "de.neemann.digital.testing" ], [ "TestCaseElement", "de.neemann.digital.testing" ], [ "LineEmitterRepeat", "de.neemann.digital.testing.parser" ], [ "Parser", "de.neemann.digital.testing.parser" ], [ "ValueAppenderBits", "de.neemann.digital.testing.parser" ], [ "ParserException", "de.neemann.digital.testing.parser" ], [ "Context", "de.neemann.digital.testing.parser" ], [ "ModelInitializer", "de.neemann.digital.testing.parser" ], [ "Expression", "de.neemann.digital.testing.parser" ], [ "LineEmitterList", "de.neemann.digital.testing.parser" ], [ "TestRow", "de.neemann.digital.testing.parser" ], [ "LineEmitter", "de.neemann.digital.testing.parser" ], [ "LineEmitterWhile", "de.neemann.digital.testing.parser" ], [ "Tokenizer", "de.neemann.digital.testing.parser" ], [ "LineEmitterSimple", "de.neemann.digital.testing.parser" ], [ "Random", "de.neemann.digital.testing.parser.functions" ], [ "SignExtend", "de.neemann.digital.testing.parser.functions" ], [ "IfThenElse", "de.neemann.digital.testing.parser.functions" ], [ "Function", "de.neemann.digital.testing.parser.functions" ], [ "LineListener", "de.neemann.digital.testing.parser" ], [ "VirtualSignal", "de.neemann.digital.testing.parser" ], [ "ValueAppender", "de.neemann.digital.testing.parser" ], [ "OperatorPrecedence", "de.neemann.digital.testing.parser" ], [ "TestResultListener", "de.neemann.digital.testing" ], [ "MatchedValue", "de.neemann.digital.testing" ], [ "TestResult", "de.neemann.digital.testing" ], [ "MinimizerInterface", "de.neemann.digital.analyse" ], [ "LabelNumbering", "de.neemann.digital.analyse" ], [ "ModelAnalyser", "de.neemann.digital.analyse" ], [ "CSVImporter", "de.neemann.digital.analyse" ], [ "BoolTableExpanded", "de.neemann.digital.analyse" ], [ "TruthTableTableModel", "de.neemann.digital.analyse" ], [ "TableReducer", "de.neemann.digital.analyse.quinemc" ], [ "PrimeSelector", "de.neemann.digital.analyse.quinemc.primeselector" ], [ "BruteForce", "de.neemann.digital.analyse.quinemc.primeselector" ], [ "LargestFirst", "de.neemann.digital.analyse.quinemc.primeselector" ], [ "BruteForceGetAll", "de.neemann.digital.analyse.quinemc.primeselector" ], [ "PrimeSelectorDefault", "de.neemann.digital.analyse.quinemc.primeselector" ], [ "BoolTableByteArray", "de.neemann.digital.analyse.quinemc" ], [ "IndependentChecker", "de.neemann.digital.analyse.quinemc" ], [ "QuineMcCluskey", "de.neemann.digital.analyse.quinemc" ], [ "BoolTableExpression", "de.neemann.digital.analyse.quinemc" ], [ "BoolTableBoolArray", "de.neemann.digital.analyse.quinemc" ], [ "BoolTable", "de.neemann.digital.analyse.quinemc" ], [ "TableRows", "de.neemann.digital.analyse.quinemc" ], [ "ThreeStateValue", "de.neemann.digital.analyse.quinemc" ], [ "QuineMcCluskeyExam", "de.neemann.digital.analyse.quinemc" ], [ "TableRow", "de.neemann.digital.analyse.quinemc" ], [ "TruthTableConverter", "de.neemann.digital.analyse" ], [ "DetermineJKStateMachine", "de.neemann.digital.analyse" ], [ "Parser", "de.neemann.digital.analyse.parser" ], [ "ParseException", "de.neemann.digital.analyse.parser" ], [ "Tokenizer", "de.neemann.digital.analyse.parser" ], [ "ModelAnalyserInfo", "de.neemann.digital.analyse" ], [ "AnalyseException", "de.neemann.digital.analyse" ], [ "DependencyAnalyser", "de.neemann.digital.analyse" ], [ "SubstituteLibrary", "de.neemann.digital.analyse" ], [ "TruthTableFormatterHex", "de.neemann.digital.analyse.format" ], [ "TruthTableFormatter", "de.neemann.digital.analyse.format" ], [ "TruthTableFormatterTestCase", "de.neemann.digital.analyse.format" ], [ "TruthTableFormatterCSV", "de.neemann.digital.analyse.format" ], [ "TruthTableFormatterLaTeX", "de.neemann.digital.analyse.format" ], [ "MinimizerQuineMcCluskey", "de.neemann.digital.analyse" ], [ "ContextFiller", "de.neemann.digital.analyse.expression" ], [ "BitSetter", "de.neemann.digital.analyse.expression" ], [ "ExpressionVisitor", "de.neemann.digital.analyse.expression" ], [ "ContextMap", "de.neemann.digital.analyse.expression" ], [ "ComplexityVisitor", "de.neemann.digital.analyse.expression" ], [ "Operation", "de.neemann.digital.analyse.expression" ], [ "Context", "de.neemann.digital.analyse.expression" ], [ "NInputs", "de.neemann.digital.analyse.expression.modify" ], [ "NOr", "de.neemann.digital.analyse.expression.modify" ], [ "ExpressionModifier", "de.neemann.digital.analyse.expression.modify" ], [ "NAnd", "de.neemann.digital.analyse.expression.modify" ], [ "Constant", "de.neemann.digital.analyse.expression" ], [ "Expression", "de.neemann.digital.analyse.expression" ], [ "Variable", "de.neemann.digital.analyse.expression" ], [ "ExpressionException", "de.neemann.digital.analyse.expression" ], [ "ComplexityInclNotVisitor", "de.neemann.digital.analyse.expression" ], [ "Equals", "de.neemann.digital.analyse.expression" ], [ "FormatToExpression", "de.neemann.digital.analyse.expression.format" ], [ "FormatToTable", "de.neemann.digital.analyse.expression.format" ], [ "Formatter", "de.neemann.digital.analyse.expression.format" ], [ "FormatterException", "de.neemann.digital.analyse.expression.format" ], [ "FormatToTableLatex", "de.neemann.digital.analyse.expression.format" ], [ "Not", "de.neemann.digital.analyse.expression" ], [ "VariableVisitor", "de.neemann.digital.analyse.expression" ], [ "NamedExpression", "de.neemann.digital.analyse.expression" ], [ "MinimizerQuineMcCluskeyExam", "de.neemann.digital.analyse" ], [ "TruthTable", "de.neemann.digital.analyse" ], [ "SplitPinString", "de.neemann.digital.analyse" ], [ "CycleDetector", "de.neemann.digital.analyse" ], [ "DigitalRemoteInterface", "de.neemann.digital.gui" ], [ "TextSearchFilter", "de.neemann.digital.gui" ], [ "ExportZipAction", "de.neemann.digital.gui" ], [ "SettingsBase", "de.neemann.digital.gui" ], [ "DocumentationLocator", "de.neemann.digital.gui" ], [ "InitialTutorial", "de.neemann.digital.gui.tutorial" ], [ "InsertAction", "de.neemann.digital.gui" ], [ "StatusInterface", "de.neemann.digital.gui" ], [ "SearchTextField", "de.neemann.digital.gui" ], [ "SaveAsHelper", "de.neemann.digital.gui" ], [ "FileHistory", "de.neemann.digital.gui" ], [ "ReleaseInfo", "de.neemann.digital.gui.release" ], [ "CheckForNewRelease", "de.neemann.digital.gui.release" ], [ "StateInterface", "de.neemann.digital.gui.state" ], [ "StateManager", "de.neemann.digital.gui.state" ], [ "State", "de.neemann.digital.gui.state" ], [ "CircuitScrollPanel", "de.neemann.digital.gui.components" ], [ "ItemPicker", "de.neemann.digital.gui.components" ], [ "LibraryTreeModel", "de.neemann.digital.gui.components.tree" ], [ "SelectTree", "de.neemann.digital.gui.components.tree" ], [ "WindowPosManager", "de.neemann.digital.gui.components" ], [ "CustomShapeEditor", "de.neemann.digital.gui.components" ], [ "TransformHolder", "de.neemann.digital.gui.components" ], [ "EditorPanel", "de.neemann.digital.gui.components" ], [ "BehavioralFixtureCreator", "de.neemann.digital.gui.components" ], [ "EditorFactory", "de.neemann.digital.gui.components" ], [ "OrderMerger", "de.neemann.digital.gui.components" ], [ "ElementOrderer", "de.neemann.digital.gui.components" ], [ "ModifyMoveSelected", "de.neemann.digital.gui.components.modification" ], [ "ModifyMoveWire", "de.neemann.digital.gui.components.modification" ], [ "ModificationOfWire", "de.neemann.digital.gui.components.modification" ], [ "ModifyDeleteRect", "de.neemann.digital.gui.components.modification" ], [ "ModifyInsertWires", "de.neemann.digital.gui.components.modification" ], [ "ModifyInsertWire", "de.neemann.digital.gui.components.modification" ], [ "ModificationOfVisualElement", "de.neemann.digital.gui.components.modification" ], [ "ModifyCircuitAttributes", "de.neemann.digital.gui.components.modification" ], [ "ModifyDeleteWire", "de.neemann.digital.gui.components.modification" ], [ "ModifyMoveAndRotElement", "de.neemann.digital.gui.components.modification" ], [ "ModifyMeasurementOrdering", "de.neemann.digital.gui.components.modification" ], [ "ModifyDeleteElement", "de.neemann.digital.gui.components.modification" ], [ "ModifyAttribute", "de.neemann.digital.gui.components.modification" ], [ "ModifyAttributes", "de.neemann.digital.gui.components.modification" ], [ "ModifyInsertElement", "de.neemann.digital.gui.components.modification" ], [ "DataEditor", "de.neemann.digital.gui.components" ], [ "CircuitModifierPostClosed", "de.neemann.digital.gui.components" ], [ "CharDeleter", "de.neemann.digital.gui.components.terminal" ], [ "ConsoleTerminal", "de.neemann.digital.gui.components.terminal" ], [ "Terminal", "de.neemann.digital.gui.components.terminal" ], [ "TerminalDialog", "de.neemann.digital.gui.components.terminal" ], [ "TerminalInterface", "de.neemann.digital.gui.components.terminal" ], [ "Keyboard", "de.neemann.digital.gui.components.terminal" ], [ "KeyboardDialog", "de.neemann.digital.gui.components.terminal" ], [ "Editor", "de.neemann.digital.gui.components" ], [ "VarRectList", "de.neemann.digital.gui.components.karnaugh" ], [ "KarnaughMap", "de.neemann.digital.gui.components.karnaugh" ], [ "KarnaughMapComponent", "de.neemann.digital.gui.components.karnaugh" ], [ "KarnaughMapDialog", "de.neemann.digital.gui.components.karnaugh" ], [ "MapLayout", "de.neemann.digital.gui.components.karnaugh" ], [ "KarnaughException", "de.neemann.digital.gui.components.karnaugh" ], [ "CircuitTransferable", "de.neemann.digital.gui.components" ], [ "ElementHelpDialog", "de.neemann.digital.gui.components" ], [ "TestCaseDescriptionDialog", "de.neemann.digital.gui.components.testing" ], [ "ValueTableDialog", "de.neemann.digital.gui.components.testing" ], [ "TestCaseDescriptionEditor", "de.neemann.digital.gui.components.testing" ], [ "TestAllDialog", "de.neemann.digital.gui.components.testing" ], [ "ExpressionListenerOptimizeJK", "de.neemann.digital.gui.components.table" ], [ "LaTeXExpressionListener", "de.neemann.digital.gui.components.table" ], [ "HardwareDescriptionGenerator", "de.neemann.digital.gui.components.table.hardware" ], [ "GenerateFile", "de.neemann.digital.gui.components.table.hardware" ], [ "GenerateCUPL", "de.neemann.digital.gui.components.table.hardware" ], [ "ExpressionListener", "de.neemann.digital.gui.components.table" ], [ "ReorderOutputs", "de.neemann.digital.gui.components.table" ], [ "AllSolutionsDialog", "de.neemann.digital.gui.components.table" ], [ "ExpressionListenerJK", "de.neemann.digital.gui.components.table" ], [ "ExpressionListenerCSVCondensed", "de.neemann.digital.gui.components.table" ], [ "ExpressionCreator", "de.neemann.digital.gui.components.table" ], [ "TableDialog", "de.neemann.digital.gui.components.table" ], [ "BuilderExpressionCreator", "de.neemann.digital.gui.components.table" ], [ "ExpressionComponent", "de.neemann.digital.gui.components.table" ], [ "PlainTextExpressionListener", "de.neemann.digital.gui.components.table" ], [ "TableReorderManager", "de.neemann.digital.gui.components.table" ], [ "ShowStringDialog", "de.neemann.digital.gui.components.table" ], [ "ReorderInputs", "de.neemann.digital.gui.components.table" ], [ "ProgressDialog", "de.neemann.digital.gui.components.table" ], [ "CheckResultListener", "de.neemann.digital.gui.components.table" ], [ "ExpressionListenerStore", "de.neemann.digital.gui.components.table" ], [ "AttributeDialog", "de.neemann.digital.gui.components" ], [ "ProbeDialog", "de.neemann.digital.gui.components" ], [ "ColorSchemeEditor", "de.neemann.digital.gui.components" ], [ "ROMEditorDialog", "de.neemann.digital.gui.components" ], [ "LabelGenerator", "de.neemann.digital.gui.components" ], [ "SingleValueDialog", "de.neemann.digital.gui.components" ], [ "ExpressionDialog", "de.neemann.digital.gui.components.expression" ], [ "CircuitComponent", "de.neemann.digital.gui.components" ], [ "VGA", "de.neemann.digital.gui.components.graphics" ], [ "GraphicCard", "de.neemann.digital.gui.components.graphics" ], [ "LedMatrix", "de.neemann.digital.gui.components.graphics" ], [ "VGADialog", "de.neemann.digital.gui.components.graphics" ], [ "MoveFocusTo", "de.neemann.digital.gui.components.graphics" ], [ "LedMatrixComponent", "de.neemann.digital.gui.components.graphics" ], [ "GraphicDialog", "de.neemann.digital.gui.components.graphics" ], [ "GraphicComponent", "de.neemann.digital.gui.components.graphics" ], [ "LedMatrixDialog", "de.neemann.digital.gui.components.graphics" ], [ "ConstraintsBuilder", "de.neemann.digital.gui.components" ], [ "ScopeTrigger", "de.neemann.digital.gui.components.data" ], [ "GraphDialog", "de.neemann.digital.gui.components.data" ], [ "GraphComponent", "de.neemann.digital.gui.components.data" ], [ "DummyElement", "de.neemann.digital.gui.components.data" ], [ "ValueTableObserver", "de.neemann.digital.gui.components.data" ], [ "CircuitModifier", "de.neemann.digital.gui.components" ], [ "CopiedElementLabelRenamer", "de.neemann.digital.gui.components" ], [ "TextLineNumber", "de.neemann.digital.gui.components" ], [ "InsertHistory", "de.neemann.digital.gui" ], [ "ProgramMemoryLoader", "de.neemann.digital.gui" ], [ "Main", "de.neemann.digital.gui" ], [ "StatsDialog", "de.neemann.digital.gui" ], [ "WindowManager", "de.neemann.digital.gui" ], [ "Settings", "de.neemann.digital.gui" ], [ "LibrarySelector", "de.neemann.digital.gui" ], [ "DigitalUncaughtExceptionHandler", "de.neemann.digital.gui" ], [ "NumberingWizard", "de.neemann.digital.gui" ], [ "HandlerInterface", "de.neemann.digital.gui.remote" ], [ "RemoteSever", "de.neemann.digital.gui.remote" ], [ "RemoteException", "de.neemann.digital.gui.remote" ], [ "DigitalHandler", "de.neemann.digital.gui.remote" ], [ "ModelModifier", "de.neemann.digital.gui" ], [ "VerilogCreator", "de.neemann.digital.hdl.verilog2" ], [ "VerilogRenaming", "de.neemann.digital.hdl.verilog2" ], [ "VerilogGenerator", "de.neemann.digital.hdl.verilog2" ], [ "VerilogTestBenchCreator", "de.neemann.digital.hdl.verilog2" ], [ "VerilogElement", "de.neemann.digital.hdl.verilog2.lib" ], [ "VerilogTemplate", "de.neemann.digital.hdl.verilog2.lib" ], [ "VerilogLibrary", "de.neemann.digital.hdl.verilog2" ], [ "CodePrinter", "de.neemann.digital.hdl.printer" ], [ "CodePrinterStr", "de.neemann.digital.hdl.printer" ], [ "Statements", "de.neemann.digital.hdl.hgs" ], [ "Parser", "de.neemann.digital.hdl.hgs" ], [ "ParserException", "de.neemann.digital.hdl.hgs" ], [ "Statement", "de.neemann.digital.hdl.hgs" ], [ "Context", "de.neemann.digital.hdl.hgs" ], [ "FirstClassFunctionCall", "de.neemann.digital.hdl.hgs.function" ], [ "InnerFunction", "de.neemann.digital.hdl.hgs.function" ], [ "JavaClass", "de.neemann.digital.hdl.hgs.function" ], [ "FirstClassFunction", "de.neemann.digital.hdl.hgs.function" ], [ "Func", "de.neemann.digital.hdl.hgs.function" ], [ "Function", "de.neemann.digital.hdl.hgs.function" ], [ "Expression", "de.neemann.digital.hdl.hgs" ], [ "HGSEvalException", "de.neemann.digital.hdl.hgs" ], [ "Tokenizer", "de.neemann.digital.hdl.hgs" ], [ "ReferenceToFunc", "de.neemann.digital.hdl.hgs.refs" ], [ "ReferenceToStruct", "de.neemann.digital.hdl.hgs.refs" ], [ "ReferenceToArray", "de.neemann.digital.hdl.hgs.refs" ], [ "Reference", "de.neemann.digital.hdl.hgs.refs" ], [ "ReferenceToVar", "de.neemann.digital.hdl.hgs.refs" ], [ "Value", "de.neemann.digital.hdl.hgs" ], [ "HGSMap", "de.neemann.digital.hdl.hgs" ], [ "HGSArray", "de.neemann.digital.hdl.hgs" ], [ "Separator", "de.neemann.digital.hdl.vhdl2" ], [ "VHDLLibrary", "de.neemann.digital.hdl.vhdl2" ], [ "VHDLCreator", "de.neemann.digital.hdl.vhdl2" ], [ "VHDLRenaming", "de.neemann.digital.hdl.vhdl2" ], [ "VHDLGenerator", "de.neemann.digital.hdl.vhdl2" ], [ "VHDLEntity", "de.neemann.digital.hdl.vhdl2.entities" ], [ "VHDLTemplate", "de.neemann.digital.hdl.vhdl2.entities" ], [ "VHDLTemplateFunctions", "de.neemann.digital.hdl.vhdl2.entities" ], [ "VHDLTestBenchCreator", "de.neemann.digital.hdl.vhdl2" ], [ "HDLModel", "de.neemann.digital.hdl.model2" ], [ "HDLNode", "de.neemann.digital.hdl.model2" ], [ "HDLNet", "de.neemann.digital.hdl.model2" ], [ "Printable", "de.neemann.digital.hdl.model2" ], [ "HDLException", "de.neemann.digital.hdl.model2" ], [ "HDLPort", "de.neemann.digital.hdl.model2" ], [ "HasName", "de.neemann.digital.hdl.model2" ], [ "InlineManyToOne", "de.neemann.digital.hdl.model2.optimizations" ], [ "MergeAssignments", "de.neemann.digital.hdl.model2.optimizations" ], [ "Optimization", "de.neemann.digital.hdl.model2.optimizations" ], [ "MergeConstants", "de.neemann.digital.hdl.model2.optimizations" ], [ "ReplaceOneToMany", "de.neemann.digital.hdl.model2.optimizations" ], [ "NameConstantSignals", "de.neemann.digital.hdl.model2.optimizations" ], [ "OptimizeExpressions", "de.neemann.digital.hdl.model2.optimizations" ], [ "RemoveConstantSignals", "de.neemann.digital.hdl.model2.optimizations" ], [ "NodeSorterExpressionBased", "de.neemann.digital.hdl.model2.optimizations" ], [ "HDLNodeSplitterManyToOne", "de.neemann.digital.hdl.model2" ], [ "HDLNodeCustom", "de.neemann.digital.hdl.model2" ], [ "HDLNodeAssignment", "de.neemann.digital.hdl.model2" ], [ "HDLCircuit", "de.neemann.digital.hdl.model2" ], [ "ExprVar", "de.neemann.digital.hdl.model2.expression" ], [ "Visitor", "de.neemann.digital.hdl.model2.expression" ], [ "ExprVarRange", "de.neemann.digital.hdl.model2.expression" ], [ "Expression", "de.neemann.digital.hdl.model2.expression" ], [ "ExpressionOptimizer", "de.neemann.digital.hdl.model2.expression" ], [ "ExprNot", "de.neemann.digital.hdl.model2.expression" ], [ "ExprConstant", "de.neemann.digital.hdl.model2.expression" ], [ "ExprOperate", "de.neemann.digital.hdl.model2.expression" ], [ "ExprUsingNet", "de.neemann.digital.hdl.model2.expression" ], [ "HDLNodeBuildIn", "de.neemann.digital.hdl.model2" ], [ "HDLClockIntegrator", "de.neemann.digital.hdl.model2.clock" ], [ "ClockIntegratorGeneric", "de.neemann.digital.hdl.model2.clock" ], [ "ClockInfo", "de.neemann.digital.hdl.model2.clock" ], [ "HDLNodeSplitterOneToMany", "de.neemann.digital.hdl.model2" ], [ "FileLocator", "de.neemann.digital" ], [ "ValueTable", "de.neemann.digital.data" ], [ "ValueTableModel", "de.neemann.digital.data" ], [ "DataPlotter", "de.neemann.digital.data" ], [ "Value", "de.neemann.digital.data" ], [ "ExpressionExporter", "de.neemann.digital.builder" ], [ "ExpressionToFileExporter", "de.neemann.digital.builder" ], [ "RotationByteArrayOutputStream", "de.neemann.digital.builder.tt2" ], [ "TT2Exporter", "de.neemann.digital.builder.tt2" ], [ "StartATF150xFitter", "de.neemann.digital.builder.tt2" ], [ "OSExecute", "de.neemann.digital.builder.tt2" ], [ "CreateCHN", "de.neemann.digital.builder.ATF150x" ], [ "ATFDevice", "de.neemann.digital.builder.ATF150x" ], [ "ATFDialog", "de.neemann.digital.builder.ATF150x" ], [ "PL", "de.neemann.digital.builder.ATF150x" ], [ "ATF150xCuplExporter", "de.neemann.digital.builder.ATF150x" ], [ "PinMap", "de.neemann.digital.builder" ], [ "PinMapException", "de.neemann.digital.builder" ], [ "FragmentExpression", "de.neemann.digital.builder.circuit" ], [ "FragmentVisualElement", "de.neemann.digital.builder.circuit" ], [ "FragmentSameInValue", "de.neemann.digital.builder.circuit" ], [ "CircuitBuilder", "de.neemann.digital.builder.circuit" ], [ "FragmentVisitor", "de.neemann.digital.builder.circuit" ], [ "FragmentVariable", "de.neemann.digital.builder.circuit" ], [ "Fragment", "de.neemann.digital.builder.circuit" ], [ "Box", "de.neemann.digital.builder.circuit" ], [ "Gal16v8JEDECExporter", "de.neemann.digital.builder.Gal16v8" ], [ "CuplExporter", "de.neemann.digital.builder.Gal16v8" ], [ "BuilderCollectorGAL", "de.neemann.digital.builder.Gal16v8" ], [ "CleanNameBuilder", "de.neemann.digital.builder" ], [ "BuilderCollector", "de.neemann.digital.builder" ], [ "BuilderInterface", "de.neemann.digital.builder" ], [ "BuilderException", "de.neemann.digital.builder" ], [ "Gal22v10JEDECExporter", "de.neemann.digital.builder.Gal22v10" ], [ "Gal22v10CuplExporter", "de.neemann.digital.builder.Gal22v10" ], [ "FuseMap", "de.neemann.digital.builder.jedec" ], [ "FuseMapFillerException", "de.neemann.digital.builder.jedec" ], [ "FuseMapFiller", "de.neemann.digital.builder.jedec" ], [ "JedecWriter", "de.neemann.digital.builder.jedec" ], [ "GenericCode", "de.neemann.digital.draw.library" ], [ "ElementLibrary", "de.neemann.digital.draw.library" ], [ "GenericInitCode", "de.neemann.digital.draw.library" ], [ "Visitor", "de.neemann.digital.draw.library" ], [ "ComponentManager", "de.neemann.digital.draw.library" ], [ "LibraryListener", "de.neemann.digital.draw.library" ], [ "JarComponentManager", "de.neemann.digital.draw.library" ], [ "ElementLibraryFolder", "de.neemann.digital.draw.library" ], [ "CustomElement", "de.neemann.digital.draw.library" ], [ "ElementNotFoundNotification", "de.neemann.digital.draw.library" ], [ "ElementNotFoundException", "de.neemann.digital.draw.library" ], [ "ComponentSource", "de.neemann.digital.draw.library" ], [ "LibraryInterface", "de.neemann.digital.draw.library" ], [ "ResolveGenerics", "de.neemann.digital.draw.library" ], [ "LibraryNode", "de.neemann.digital.draw.library" ], [ "ElementTypeDescriptionCustom", "de.neemann.digital.draw.library" ], [ "InvalidNodeException", "de.neemann.digital.draw.library" ], [ "NumStringComparator", "de.neemann.digital.draw.library" ], [ "InputShape", "de.neemann.digital.draw.shapes" ], [ "Interactor", "de.neemann.digital.draw.shapes" ], [ "ButtonShape", "de.neemann.digital.draw.shapes" ], [ "GenericShape", "de.neemann.digital.draw.shapes" ], [ "Drawable", "de.neemann.digital.draw.shapes" ], [ "DelayShape", "de.neemann.digital.draw.shapes" ], [ "DiodeBackwardShape", "de.neemann.digital.draw.shapes" ], [ "FuseShape", "de.neemann.digital.draw.shapes" ], [ "FETShapeP", "de.neemann.digital.draw.shapes" ], [ "DILShape", "de.neemann.digital.draw.shapes" ], [ "DipSwitchShape", "de.neemann.digital.draw.shapes" ], [ "SwitchShape", "de.neemann.digital.draw.shapes" ], [ "LightBulbShape", "de.neemann.digital.draw.shapes" ], [ "LayoutShape", "de.neemann.digital.draw.shapes" ], [ "SplitterShape", "de.neemann.digital.draw.shapes" ], [ "PolarityAwareLEDShape", "de.neemann.digital.draw.shapes" ], [ "ButtonLEDShape", "de.neemann.digital.draw.shapes" ], [ "RelayShape", "de.neemann.digital.draw.shapes" ], [ "ConstShape", "de.neemann.digital.draw.shapes" ], [ "BreakShape", "de.neemann.digital.draw.shapes" ], [ "GenericCodeShape", "de.neemann.digital.draw.shapes" ], [ "TextShape", "de.neemann.digital.draw.shapes" ], [ "SevenSegHexShape", "de.neemann.digital.draw.shapes" ], [ "ProbeShape", "de.neemann.digital.draw.shapes" ], [ "NotConnectedShape", "de.neemann.digital.draw.shapes" ], [ "StepperMotorShape", "de.neemann.digital.draw.shapes" ], [ "FETShape", "de.neemann.digital.draw.shapes" ], [ "BitSelShape", "de.neemann.digital.draw.shapes" ], [ "SevenSegShape", "de.neemann.digital.draw.shapes" ], [ "GenericInitCodeShape", "de.neemann.digital.draw.shapes" ], [ "RelayDTShape", "de.neemann.digital.draw.shapes" ], [ "RectShape", "de.neemann.digital.draw.shapes" ], [ "VDDShape", "de.neemann.digital.draw.shapes" ], [ "RAMShape", "de.neemann.digital.draw.shapes" ], [ "ScopeShape", "de.neemann.digital.draw.shapes" ], [ "DemuxerShape", "de.neemann.digital.draw.shapes" ], [ "FETShapeN", "de.neemann.digital.draw.shapes" ], [ "BusSplitterShape", "de.neemann.digital.draw.shapes" ], [ "PullUpShape", "de.neemann.digital.draw.shapes" ], [ "TestCaseShape", "de.neemann.digital.draw.shapes" ], [ "TunnelShape", "de.neemann.digital.draw.shapes" ], [ "MuxerShape", "de.neemann.digital.draw.shapes" ], [ "SwitchDTShape", "de.neemann.digital.draw.shapes" ], [ "PinControlShape", "de.neemann.digital.draw.shapes" ], [ "FGFETShapeN", "de.neemann.digital.draw.shapes" ], [ "TransGateShape", "de.neemann.digital.draw.shapes" ], [ "DiodeShape", "de.neemann.digital.draw.shapes" ], [ "ResetShape", "de.neemann.digital.draw.shapes" ], [ "DiodeForewardShape", "de.neemann.digital.draw.shapes" ], [ "SixteenShape", "de.neemann.digital.draw.shapes" ], [ "CustomCircuitShapeType", "de.neemann.digital.draw.shapes" ], [ "InteractorInterface", "de.neemann.digital.draw.shapes" ], [ "ShapeSpecificMatch", "de.neemann.digital.draw.shapes" ], [ "LEDShape", "de.neemann.digital.draw.shapes" ], [ "ClockShape", "de.neemann.digital.draw.shapes" ], [ "RGBLEDShape", "de.neemann.digital.draw.shapes" ], [ "RotEncoderShape", "de.neemann.digital.draw.shapes" ], [ "IEEEGenericShape", "de.neemann.digital.draw.shapes.ieee" ], [ "IEEEOrShape", "de.neemann.digital.draw.shapes.ieee" ], [ "IEEENotShape", "de.neemann.digital.draw.shapes.ieee" ], [ "IEEEAndShape", "de.neemann.digital.draw.shapes.ieee" ], [ "IEEEXOrShape", "de.neemann.digital.draw.shapes.ieee" ], [ "ObservableValueReader", "de.neemann.digital.draw.shapes" ], [ "SvgTemplate", "de.neemann.digital.draw.shapes.custom.svg" ], [ "TransformParser", "de.neemann.digital.draw.shapes.custom.svg" ], [ "Context", "de.neemann.digital.draw.shapes.custom.svg" ], [ "SvgException", "de.neemann.digital.draw.shapes.custom.svg" ], [ "SvgImporter", "de.neemann.digital.draw.shapes.custom.svg" ], [ "CustomShapeDescription", "de.neemann.digital.draw.shapes.custom" ], [ "CustomShape", "de.neemann.digital.draw.shapes.custom" ], [ "FGFETShapeP", "de.neemann.digital.draw.shapes" ], [ "OutputShape", "de.neemann.digital.draw.shapes" ], [ "GroundShape", "de.neemann.digital.draw.shapes" ], [ "AsyncClockShape", "de.neemann.digital.draw.shapes" ], [ "Shape", "de.neemann.digital.draw.shapes" ], [ "MissingShape", "de.neemann.digital.draw.shapes" ], [ "ShapeFactory", "de.neemann.digital.draw.shapes" ], [ "PullDownShape", "de.neemann.digital.draw.shapes" ], [ "DriverShape", "de.neemann.digital.draw.shapes" ], [ "SevenShape", "de.neemann.digital.draw.shapes" ], [ "DataShape", "de.neemann.digital.draw.shapes" ], [ "DotCreator", "de.neemann.digital.draw.elements" ], [ "Wire", "de.neemann.digital.draw.elements" ], [ "Movable", "de.neemann.digital.draw.elements" ], [ "Pins", "de.neemann.digital.draw.elements" ], [ "Circuit", "de.neemann.digital.draw.elements" ], [ "Tunnel", "de.neemann.digital.draw.elements" ], [ "PinException", "de.neemann.digital.draw.elements" ], [ "ElementOrder", "de.neemann.digital.draw.elements" ], [ "VisualElement", "de.neemann.digital.draw.elements" ], [ "Pin", "de.neemann.digital.draw.elements" ], [ "IOState", "de.neemann.digital.draw.elements" ], [ "WireMerger", "de.neemann.digital.draw.elements" ], [ "WireConsistencyChecker", "de.neemann.digital.draw.elements" ], [ "AsyncSequentialClock", "de.neemann.digital.draw.model" ], [ "ModelEntry", "de.neemann.digital.draw.model" ], [ "Net", "de.neemann.digital.draw.model" ], [ "ModelCreator", "de.neemann.digital.draw.model" ], [ "InverterConfig", "de.neemann.digital.draw.model" ], [ "NetList", "de.neemann.digital.draw.model" ], [ "RealTimeClock", "de.neemann.digital.draw.model" ], [ "Polygon", "de.neemann.digital.draw.graphics" ], [ "Orientation", "de.neemann.digital.draw.graphics" ], [ "Vector", "de.neemann.digital.draw.graphics" ], [ "SVGSettings", "de.neemann.digital.draw.graphics" ], [ "Transform", "de.neemann.digital.draw.graphics" ], [ "ColorKey", "de.neemann.digital.draw.graphics" ], [ "ExportFactory", "de.neemann.digital.draw.graphics" ], [ "GraphicsImage", "de.neemann.digital.draw.graphics" ], [ "VectorInterface", "de.neemann.digital.draw.graphics" ], [ "TextFormatSVG", "de.neemann.digital.draw.graphics" ], [ "TransformMatrix", "de.neemann.digital.draw.graphics" ], [ "TextFormatLaTeX", "de.neemann.digital.draw.graphics" ], [ "GraphicMinMax", "de.neemann.digital.draw.graphics" ], [ "GraphicTransform", "de.neemann.digital.draw.graphics" ], [ "ColorScheme", "de.neemann.digital.draw.graphics" ], [ "Style", "de.neemann.digital.draw.graphics" ], [ "GraphicSkipLines", "de.neemann.digital.draw.graphics.linemerger" ], [ "GraphicLineCollector", "de.neemann.digital.draw.graphics.linemerger" ], [ "PolygonConverter", "de.neemann.digital.draw.graphics" ], [ "VectorFloat", "de.neemann.digital.draw.graphics" ], [ "TransformRotate", "de.neemann.digital.draw.graphics" ], [ "Graphic", "de.neemann.digital.draw.graphics" ], [ "ColorStyleHighContrast", "de.neemann.digital.draw.graphics" ], [ "Parser", "de.neemann.digital.draw.graphics.text" ], [ "ParseException", "de.neemann.digital.draw.graphics.text" ], [ "PlainTextFormatter", "de.neemann.digital.draw.graphics.text.formatter" ], [ "SVGFormatter", "de.neemann.digital.draw.graphics.text.formatter" ], [ "GraphicsFormatter", "de.neemann.digital.draw.graphics.text.formatter" ], [ "LaTeXFormatter", "de.neemann.digital.draw.graphics.text.formatter" ], [ "Decorate", "de.neemann.digital.draw.graphics.text.text" ], [ "Text", "de.neemann.digital.draw.graphics.text.text" ], [ "Index", "de.neemann.digital.draw.graphics.text.text" ], [ "Sentence", "de.neemann.digital.draw.graphics.text.text" ], [ "Blank", "de.neemann.digital.draw.graphics.text.text" ], [ "Character", "de.neemann.digital.draw.graphics.text.text" ], [ "ExpressionToText", "de.neemann.digital.draw.graphics.text.text" ], [ "Simple", "de.neemann.digital.draw.graphics.text.text" ], [ "Export", "de.neemann.digital.draw.graphics" ], [ "ColorStyleMonochrome", "de.neemann.digital.draw.graphics" ], [ "TransformTranslate", "de.neemann.digital.draw.graphics" ], [ "GraphicSVG", "de.neemann.digital.draw.graphics" ], [ "GraphicSwing", "de.neemann.digital.draw.graphics" ], [ "PolygonParser", "de.neemann.digital.draw.graphics" ], [ "SVGTokenizer", "de.neemann.digital.draw.graphics" ], [ "GifSequenceWriter", "de.neemann.digital.draw.gif" ], [ "GifExporter", "de.neemann.digital.draw.gif" ], [ "ConfigCache", "de.neemann.digital.toolchain" ], [ "Configuration", "de.neemann.digital.toolchain" ], [ "Command", "de.neemann.digital.toolchain" ], [ "FileToCreate", "de.neemann.digital.toolchain" ] ],
  "tokensProjectClassesNonPrivateStaticNonVoidMethods" : [ [ "getMouse", "de.neemann.gui", "Mouse", "static Mouse getMouse()" ], [ "create", "de.neemann.gui", "IconCreator", "public static Icon create(String name)" ], [ "createImage", "de.neemann.gui", "IconCreator", "public static Image createImage(String name)" ], [ "createImages", "de.neemann.gui", "IconCreator", "public static ArrayList<Image> createImages(String... names)" ], [ "getCTRLMask", "de.neemann.gui", "ToolTipAction", "public static int getCTRLMask()" ], [ "checkForSave", "de.neemann.gui", "ClosingWindowListener", "public static boolean checkForSave(JFrame parent, ConfirmSave confirmSave)" ], [ "getParentWindow", "de.neemann.gui", "ErrorMessage", "public static Window getParentWindow(Component parent)" ], [ "getInstance", "de.neemann.gui", "Screen", "public static Screen getInstance()" ], [ "getDefaultFontScaling", "de.neemann.gui", "Screen", "public static int getDefaultFontScaling()" ], [ "isLinux", "de.neemann.gui", "Screen", "public static boolean isLinux()" ], [ "isMac", "de.neemann.gui", "Screen", "public static boolean isMac()" ], [ "getInstance", "de.neemann.gui", "InfoDialog", "public static InfoDialog getInstance()" ], [ "read", "de.neemann.digital.core.memory.importer", "Importer", "public static DataField read(File hexFile, int dataBits, boolean bigEndian) throws IOException" ], [ "getOriginOf", "de.neemann.digital.core", "ExceptionWithOrigin", "public static String getOriginOf(Throwable e)" ], [ "zMaskString", "de.neemann.digital.core", "ObservableValue", "static String zMaskString(long value, long highZ, int bits)" ], [ "getInstance", "de.neemann.digital.core", "GlobalValues", "public static GlobalValues getInstance()" ], [ "getInstance", "de.neemann.digital.core.io", "MIDIHelper", "public static MIDIHelper getInstance()" ], [ "input", "de.neemann.digital.core.element", "PinInfo", "public static PinInfo input(String name)" ], [ "input", "de.neemann.digital.core.element", "PinInfo", "public static PinInfo input(String name, String description)" ], [ "output", "de.neemann.digital.core.element", "PinInfo", "public static PinInfo output(String name)" ], [ "isInOut", "de.neemann.digital.core.element", "PinDescription", "public static boolean isInOut(Direction a, Direction b)" ], [ "isInOut", "de.neemann.digital.core.element", "Direction", "public static boolean isInOut(Direction a, Direction b)" ], [ "getKeyByName", "de.neemann.digital.core.element", "Keys", "public static Key getKeyByName(String name)" ], [ "getKeys", "de.neemann.digital.core.element", "Keys", "public static Iterable<Key> getKeys()" ], [ "combine", "de.neemann.digital.core.element", "ImmutableList", "public static <T> ImmutableList<T> combine(ImmutableList<T> a, ImmutableList<T> b)" ], [ "createSwitchModel", "de.neemann.digital.core.switching", "PlainSwitch", "static SwitchModel createSwitchModel(ObservableValue input1, ObservableValue input2, ObservableValue output1, ObservableValue output2) throws NodeException" ], [ "createOneToN", "de.neemann.digital.core.wiring", "Splitter", "public static Splitter createOneToN(int bits)" ], [ "createNToOne", "de.neemann.digital.core.wiring", "Splitter", "public static Splitter createNToOne(int bits)" ], [ "ovs", "de.neemann.digital.core", "ObservableValues", "public static ObservableValues ovs(ObservableValue... items)" ], [ "toShortHex", "de.neemann.digital.core", "IntFormat", "public static String toShortHex(long value)" ], [ "up", "de.neemann.digital.core", "Bits", "public static long up(long val, int bits)" ], [ "down", "de.neemann.digital.core", "Bits", "public static long down(long val, int bits)" ], [ "mask", "de.neemann.digital.core", "Bits", "public static long mask(int bits)" ], [ "signedFlagMask", "de.neemann.digital.core", "Bits", "public static long signedFlagMask(int bits)" ], [ "isNegative", "de.neemann.digital.core", "Bits", "public static boolean isNegative(long value, int bits)" ], [ "signExtend", "de.neemann.digital.core", "Bits", "public static long signExtend(long value, int bits)" ], [ "binLn2", "de.neemann.digital.core", "Bits", "public static int binLn2(long b)" ], [ "removeBitFromValue", "de.neemann.digital.core", "Bits", "public static int removeBitFromValue(int value, int bit)" ], [ "decode", "de.neemann.digital.core", "Bits", "public static long decode(String str) throws NumberFormatException" ], [ "decode", "de.neemann.digital.core", "Bits", "public static long decode(String str, boolean parseFloats) throws NumberFormatException" ], [ "decode", "de.neemann.digital.core", "Bits", "public static long decode(String str, int p, int radix) throws NumberFormatException" ], [ "getCode", "de.neemann.digital.core.extern", "Application", "static String getCode(ElementAttributes attr, File root) throws IOException" ], [ "readCode", "de.neemann.digital.core.extern", "Application", "static String readCode(File file) throws IOException" ], [ "create", "de.neemann.digital.core.extern", "Application", "static Application create(Type type, ElementAttributes attr)" ], [ "start", "de.neemann.digital.core.extern", "ProcessStarter", "public static String start(File dir, String... args) throws IOException" ], [ "joinStrings", "de.neemann.digital.core.extern", "ProcessStarter", "public static String joinStrings(String... strings)" ], [ "fromString", "de.neemann.digital.cli.cli", "Argument", "public static Object fromString(String val, Object defValue) throws CLIException" ], [ "fac", "de.neemann.digital.fsm", "Optimizer", "public static long fac(int n)" ], [ "getTimeComplexity", "de.neemann.digital.fsm", "Optimizer", "public static long getTimeComplexity(FSM fsm)" ], [ "calcComplexity", "de.neemann.digital.fsm", "Optimizer", "static int calcComplexity(FSM fsm, boolean out) throws ExpressionException, FiniteStateMachineException, FormatterException" ], [ "blink", "de.neemann.digital.fsm", "FSMDemos", "public static FSM blink()" ], [ "rotDecoder", "de.neemann.digital.fsm", "FSMDemos", "public static FSM rotDecoder()" ], [ "counter", "de.neemann.digital.fsm", "FSMDemos", "public static FSM counter(int n)" ], [ "trafficLight", "de.neemann.digital.fsm", "FSMDemos", "public static FSM trafficLight()" ], [ "trafficLightMedwedew", "de.neemann.digital.fsm", "FSMDemos", "public static FSM trafficLightMedwedew()" ], [ "selCounter", "de.neemann.digital.fsm", "FSMDemos", "public static FSM selCounter()" ], [ "stepper", "de.neemann.digital.fsm", "FSMDemos", "public static FSM stepper()" ], [ "stepperMedwedew", "de.neemann.digital.fsm", "FSMDemos", "public static FSM stepperMedwedew()" ], [ "getxStream", "de.neemann.digital.fsm", "FSM", "public static XStream getxStream()" ], [ "loadFSM", "de.neemann.digital.fsm", "FSM", "public static FSM loadFSM(File filename) throws IOException" ], [ "loadFSM", "de.neemann.digital.fsm", "FSM", "public static FSM loadFSM(InputStream in) throws IOException" ], [ "get", "de.neemann.digital.lang", "Lang", "public static String get(String key, Object... params)" ], [ "getNull", "de.neemann.digital.lang", "Lang", "public static String getNull(String key, Object... params)" ], [ "getBundle", "de.neemann.digital.lang", "Lang", "public static Bundle getBundle()" ], [ "currentLanguage", "de.neemann.digital.lang", "Lang", "public static Language currentLanguage()" ], [ "evalMultilingualContent", "de.neemann.digital.lang", "Lang", "public static String evalMultilingualContent(String text)" ], [ "evalMultilingualContent", "de.neemann.digital.lang", "Lang", "static String evalMultilingualContent(String text, Language currentLanguage)" ], [ "lowest", "de.neemann.digital.testing.parser", "OperatorPrecedence", "public static OperatorPrecedence lowest()" ], [ "addOne", "de.neemann.digital.analyse", "ModelAnalyser", "public static String addOne(String name)" ], [ "readCSV", "de.neemann.digital.analyse", "CSVImporter", "public static TruthTable readCSV(File file) throws IOException" ], [ "readCSV", "de.neemann.digital.analyse", "CSVImporter", "public static TruthTable readCSV(String csv) throws IOException" ], [ "readCSV", "de.neemann.digital.analyse", "CSVImporter", "public static TruthTable readCSV(Reader csv) throws IOException" ], [ "createDoubledValues", "de.neemann.digital.analyse.quinemc", "BoolTableByteArray", "public static BoolTableByteArray createDoubledValues(BoolTable values)" ], [ "simplify", "de.neemann.digital.analyse.quinemc", "QuineMcCluskey", "public static Expression simplify(Expression expression) throws ExpressionException" ], [ "addAnd", "de.neemann.digital.analyse.quinemc", "QuineMcCluskey", "public static Expression addAnd(Expression e, Iterable<TableRow> rows, List<Variable> variables)" ], [ "value", "de.neemann.digital.analyse.quinemc", "ThreeStateValue", "public static ThreeStateValue value(boolean bool)" ], [ "value", "de.neemann.digital.analyse.quinemc", "ThreeStateValue", "public static ThreeStateValue value(int value)" ], [ "doImplicitTypeCasts", "de.neemann.digital.analyse", "SubstituteLibrary", "static Object doImplicitTypeCasts(Class<?> expectedClass, Object val)" ], [ "or", "de.neemann.digital.analyse.expression", "Operation", "public static Expression or(Iterable<Expression> exp)" ], [ "or", "de.neemann.digital.analyse.expression", "Operation", "public static Expression or(Expression... exp)" ], [ "xor", "de.neemann.digital.analyse.expression", "Operation", "public static Expression xor(Expression a, Expression b)" ], [ "orNoMerge", "de.neemann.digital.analyse.expression", "Operation", "public static Expression orNoMerge(Expression... exp)" ], [ "and", "de.neemann.digital.analyse.expression", "Operation", "public static Expression and(Iterable<Expression> exp)" ], [ "and", "de.neemann.digital.analyse.expression", "Operation", "public static Expression and(Expression... exp)" ], [ "andNoMerge", "de.neemann.digital.analyse.expression", "Operation", "public static Expression andNoMerge(Expression... exp)" ], [ "modifyExpression", "de.neemann.digital.analyse.expression.modify", "ExpressionModifier", "static Expression modifyExpression(Expression expression, ExpressionModifier modifier)" ], [ "modifyExpression", "de.neemann.digital.analyse.expression.modify", "ExpressionModifier", "static Expression modifyExpression(Expression expression, ExpressionModifier... modifiers)" ], [ "v", "de.neemann.digital.analyse.expression", "Variable", "public static Variable v(String name)" ], [ "vars", "de.neemann.digital.analyse.expression", "Variable", "public static ArrayList<Variable> vars(int n)" ], [ "vars", "de.neemann.digital.analyse.expression", "Variable", "public static ArrayList<Variable> vars(String... names)" ], [ "isVar", "de.neemann.digital.analyse.expression", "Variable", "public static boolean isVar(Expression e)" ], [ "isVarOrNotVar", "de.neemann.digital.analyse.expression", "Variable", "public static boolean isVarOrNotVar(Expression e)" ], [ "getDefaultFormat", "de.neemann.digital.analyse.expression.format", "FormatToExpression", "public static FormatToExpression getDefaultFormat()" ], [ "defaultFormat", "de.neemann.digital.analyse.expression.format", "FormatToExpression", "public static String defaultFormat(Expression exp)" ], [ "not", "de.neemann.digital.analyse.expression", "Not", "public static Expression not(Expression a)" ], [ "readFromFile", "de.neemann.digital.analyse", "TruthTable", "public static TruthTable readFromFile(File filename) throws IOException" ], [ "create", "de.neemann.digital.analyse", "SplitPinString", "public static SplitPinString create(Signal s)" ], [ "create", "de.neemann.digital.analyse", "SplitPinString", "public static SplitPinString create(String pinStr)" ], [ "checkSuffix", "de.neemann.digital.gui", "SaveAsHelper", "public static File checkSuffix(File filename, String suffix)" ], [ "addF1Traversal", "de.neemann.digital.gui.components", "EditorFactory", "public static <TC extends JTextComponent> TC addF1Traversal(TC text)" ], [ "createUndoManager", "de.neemann.digital.gui.components", "EditorFactory", "public static UndoManager createUndoManager(JTextComponent text)" ], [ "create", "de.neemann.digital.gui.components.modification", "ModifyInsertWires", "public static Modification<Circuit> create(List<Wire> newWires)" ], [ "getToolTipName", "de.neemann.digital.gui.components.modification", "ModificationOfVisualElement", "public static String getToolTipName(VisualElement ve)" ], [ "getTerminal", "de.neemann.digital.gui.components.terminal", "TerminalDialog", "static TerminalInterface getTerminal(Model model, ElementAttributes attr)" ], [ "createList", "de.neemann.digital.gui.components", "CircuitTransferable", "public static ArrayList<Movable> createList(Object data, ShapeFactory shapeFactory) throws IOException" ], [ "createURLStreamHandlerFactory", "de.neemann.digital.gui.components", "ElementHelpDialog", "public static URLStreamHandlerFactory createURLStreamHandlerFactory()" ], [ "getImage", "de.neemann.digital.gui.components", "ElementHelpDialog", "static BufferedImage getImage(String name)" ], [ "getImage", "de.neemann.digital.gui.components", "MyURLStreamHandlerFactory", "static BufferedImage getImage(String name)" ], [ "isSequentialVar", "de.neemann.digital.gui.components.table", "ExpressionListenerJK", "public static String isSequentialVar(String name)" ], [ "getAttrList", "de.neemann.digital.gui.components", "CircuitComponent", "public static ArrayList<Key> getAttrList()" ], [ "raster", "de.neemann.digital.gui.components", "CircuitComponent", "public static Vector raster(Vector pos)" ], [ "createLiveDialog", "de.neemann.digital.gui.components.data", "GraphDialog", "public static GraphDialog createLiveDialog(JFrame owner, Model model, boolean microStep, List<String> ordering, int sampleSize)" ], [ "createColumnsInfo", "de.neemann.digital.gui.components.data", "GraphDialog", "static ValueTable.ColumnInfo[] createColumnsInfo(ArrayList<Signal> signals)" ], [ "create", "de.neemann.digital.gui.components", "CopiedElementLabelRenamer", "static LabelInstance create(VisualElement ve)" ], [ "create", "de.neemann.digital.gui.components", "CopiedElementLabelRenamer", "static LabelInstance create(String elementName, String fullLabel)" ], [ "create", "de.neemann.digital.gui.components", "LabelInstance", "static LabelInstance create(VisualElement ve)" ], [ "create", "de.neemann.digital.gui.components", "LabelInstance", "static LabelInstance create(String elementName, String fullLabel)" ], [ "isExperimentalMode", "de.neemann.digital.gui", "Main", "public static boolean isExperimentalMode()" ], [ "getInstance", "de.neemann.digital.gui", "WindowManager", "public static WindowManager getInstance()" ], [ "getInstance", "de.neemann.digital.gui", "Settings", "public static Settings getInstance()" ], [ "getRange", "de.neemann.digital.hdl.verilog2", "VerilogCreator", "public static String getRange(int bits)" ], [ "getType", "de.neemann.digital.hdl.verilog2", "VerilogCreator", "public static String getType(HDLPort.Direction def, HDLPort.Direction dir, int bits)" ], [ "value", "de.neemann.digital.hdl.verilog2", "VerilogCreator", "public static String value(ExprConstant con)" ], [ "value", "de.neemann.digital.hdl.verilog2", "VerilogCreator", "public static String value(long val, int bits)" ], [ "neededFileName", "de.neemann.digital.hdl.verilog2.lib", "VerilogTemplate", "public static String neededFileName(String elementName)" ], [ "createFromJar", "de.neemann.digital.hdl.hgs", "Parser", "public static Statement createFromJar(String path, ClassLoader cl) throws IOException, ParserException" ], [ "createFromJarStatic", "de.neemann.digital.hdl.hgs", "Parser", "public static Statement createFromJarStatic(String path)" ], [ "isWhiteSpace", "de.neemann.digital.hdl.hgs", "Tokenizer", "public static boolean isWhiteSpace(int c)" ], [ "toLong", "de.neemann.digital.hdl.hgs", "Value", "public static long toLong(Object value) throws HGSEvalException" ], [ "toDouble", "de.neemann.digital.hdl.hgs", "Value", "public static double toDouble(Object value) throws HGSEvalException" ], [ "toInt", "de.neemann.digital.hdl.hgs", "Value", "public static int toInt(Object value) throws HGSEvalException" ], [ "toBool", "de.neemann.digital.hdl.hgs", "Value", "public static boolean toBool(Object value) throws HGSEvalException" ], [ "toString", "de.neemann.digital.hdl.hgs", "Value", "public static String toString(Object value) throws HGSEvalException" ], [ "toArray", "de.neemann.digital.hdl.hgs", "Value", "public static HGSArray toArray(Object value) throws HGSEvalException" ], [ "toMap", "de.neemann.digital.hdl.hgs", "Value", "public static HGSMap toMap(Object value) throws HGSEvalException" ], [ "equals", "de.neemann.digital.hdl.hgs", "Value", "public static boolean equals(Object a, Object b)" ], [ "add", "de.neemann.digital.hdl.hgs", "Value", "public static Object add(Object a, Object b) throws HGSEvalException" ], [ "sub", "de.neemann.digital.hdl.hgs", "Value", "public static Object sub(Object a, Object b) throws HGSEvalException" ], [ "mul", "de.neemann.digital.hdl.hgs", "Value", "public static Object mul(Object a, Object b) throws HGSEvalException" ], [ "div", "de.neemann.digital.hdl.hgs", "Value", "public static Object div(Object a, Object b) throws HGSEvalException" ], [ "or", "de.neemann.digital.hdl.hgs", "Value", "public static Object or(Object a, Object b) throws HGSEvalException" ], [ "xor", "de.neemann.digital.hdl.hgs", "Value", "public static Object xor(Object a, Object b) throws HGSEvalException" ], [ "and", "de.neemann.digital.hdl.hgs", "Value", "public static Object and(Object a, Object b) throws HGSEvalException" ], [ "not", "de.neemann.digital.hdl.hgs", "Value", "public static Object not(Object value) throws HGSEvalException" ], [ "neg", "de.neemann.digital.hdl.hgs", "Value", "public static Object neg(Object value) throws HGSEvalException" ], [ "less", "de.neemann.digital.hdl.hgs", "Value", "public static boolean less(Object a, Object b) throws HGSEvalException" ], [ "lessEqual", "de.neemann.digital.hdl.hgs", "Value", "public static boolean lessEqual(Object a, Object b) throws HGSEvalException" ], [ "trimRight", "de.neemann.digital.hdl.hgs", "Value", "public static String trimRight(String str)" ], [ "trimLeft", "de.neemann.digital.hdl.hgs", "Value", "public static String trimLeft(String str)" ], [ "getType", "de.neemann.digital.hdl.vhdl2", "VHDLCreator", "public static String getType(int bits)" ], [ "value", "de.neemann.digital.hdl.vhdl2", "VHDLCreator", "public static String value(ExprConstant con)" ], [ "value", "de.neemann.digital.hdl.vhdl2", "VHDLCreator", "public static String value(long val, int bits)" ], [ "isTemplate", "de.neemann.digital.hdl.vhdl2.entities", "VHDLTemplate", "public static boolean isTemplate(ElementTypeDescription etd)" ], [ "neededFileName", "de.neemann.digital.hdl.vhdl2.entities", "VHDLTemplate", "public static String neededFileName(String elementName)" ], [ "zero", "de.neemann.digital.hdl.vhdl2.entities", "VHDLTemplateFunctions", "public static String zero(long bits)" ], [ "value", "de.neemann.digital.hdl.vhdl2.entities", "VHDLTemplateFunctions", "public static String value(long val, long bits)" ], [ "genericType", "de.neemann.digital.hdl.vhdl2.entities", "VHDLTemplateFunctions", "public static String genericType(long n)" ], [ "type", "de.neemann.digital.hdl.vhdl2.entities", "VHDLTemplateFunctions", "public static String type(long n)" ], [ "isVar", "de.neemann.digital.hdl.model2.expression", "Expression", "static boolean isVar(Expression expr, HDLNet net)" ], [ "isConstant", "de.neemann.digital.hdl.model2.expression", "ExprConstant", "public static ExprConstant isConstant(HDLNode node)" ], [ "getHighZ", "de.neemann.digital.data", "Value", "public static Value getHighZ()" ], [ "calcBackOffset", "de.neemann.digital.builder.circuit", "FragmentExpression", "static int calcBackOffset(int size, int i)" ], [ "isXNor", "de.neemann.digital.builder.circuit", "CircuitBuilder", "static boolean isXNor(long[] data)" ], [ "isXor", "de.neemann.digital.builder.circuit", "CircuitBuilder", "static boolean isXor(long[] data)" ], [ "getLibPath", "de.neemann.digital.draw.library", "ElementLibrary", "public static File getLibPath()" ], [ "createCustomDescription", "de.neemann.digital.draw.library", "ElementLibrary", "public static ElementTypeDescriptionCustom createCustomDescription(File file, Circuit circuit, ElementLibrary library) throws PinException" ], [ "createDeclarationDefault", "de.neemann.digital.draw.library", "ElementTypeDescriptionCustom", "public static String createDeclarationDefault(Circuit circuit) throws NodeException" ], [ "getInstance", "de.neemann.digital.draw.library", "NumStringComparator", "public static NumStringComparator getInstance()" ], [ "compareStr", "de.neemann.digital.draw.library", "NumStringComparator", "public static int compareStr(String a, String b)" ], [ "createPins", "de.neemann.digital.draw.shapes", "GenericShape", "public static Pins createPins(PinDescriptions inputs, PinDescriptions outputs, boolean invert, InverterConfig ic, boolean wideShape)" ], [ "readStyle", "de.neemann.digital.draw.shapes.custom.svg", "Context", "static Context readStyle(Context context, String style) throws SvgException" ], [ "getOutSize", "de.neemann.digital.draw.shapes", "OutputShape", "public static int getOutSize(boolean small)" ], [ "getOutStyle", "de.neemann.digital.draw.shapes", "OutputShape", "public static Style getOutStyle(boolean small)" ], [ "getOutRad", "de.neemann.digital.draw.shapes", "OutputShape", "public static Vector getOutRad(boolean small)" ], [ "createTransform", "de.neemann.digital.draw.shapes", "SevenShape", "static Transform createTransform(int size)" ], [ "getxStream", "de.neemann.digital.draw.elements", "Circuit", "public static XStream getxStream()" ], [ "loadCircuit", "de.neemann.digital.draw.elements", "Circuit", "public static Circuit loadCircuit(File filename, ShapeFactory shapeFactory) throws IOException" ], [ "loadCircuit", "de.neemann.digital.draw.elements", "Circuit", "public static Circuit loadCircuit(InputStream in, ShapeFactory shapeFactory) throws IOException" ], [ "fixGenerics", "de.neemann.digital.draw.model", "ModelCreator", "public static Circuit fixGenerics(Circuit circuit, LibraryInterface library) throws NodeException, ElementNotFoundException" ], [ "createFromPath", "de.neemann.digital.draw.graphics", "Polygon", "public static Polygon createFromPath(String path)" ], [ "vec", "de.neemann.digital.draw.graphics", "Vector", "public static Vector vec(int x, int y)" ], [ "min", "de.neemann.digital.draw.graphics", "Vector", "public static Vector min(VectorInterface... p)" ], [ "max", "de.neemann.digital.draw.graphics", "Vector", "public static Vector max(VectorInterface... p)" ], [ "width", "de.neemann.digital.draw.graphics", "Vector", "public static Vector width(VectorInterface... p)" ], [ "add", "de.neemann.digital.draw.graphics", "Vector", "public static List<Vector> add(List<Vector> vectors, Vector offs)" ], [ "getInstance", "de.neemann.digital.draw.graphics", "SVGSettings", "public static SVGSettings getInstance()" ], [ "createKeyList", "de.neemann.digital.draw.graphics", "SVGSettings", "public static List<Key> createKeyList()" ], [ "mul", "de.neemann.digital.draw.graphics", "Transform", "static Transform mul(Transform t1, Transform t2)" ], [ "rotate", "de.neemann.digital.draw.graphics", "TransformMatrix", "public static TransformMatrix rotate(double w)" ], [ "scale", "de.neemann.digital.draw.graphics", "TransformMatrix", "public static TransformMatrix scale(float sx, float sy)" ], [ "getTextWidth", "de.neemann.digital.draw.graphics", "GraphicMinMax", "public static int getTextWidth(String text, Style style)" ], [ "getSelected", "de.neemann.digital.draw.graphics", "ColorScheme", "public static ColorScheme getSelected()" ], [ "getWireStyle", "de.neemann.digital.draw.graphics", "Style", "public static Style getWireStyle(Value value)" ], [ "format", "de.neemann.digital.draw.graphics.text.formatter", "PlainTextFormatter", "public static String format(Text text)" ], [ "format", "de.neemann.digital.draw.graphics.text.formatter", "PlainTextFormatter", "public static String format(Text text, FormatToExpression format)" ], [ "format", "de.neemann.digital.draw.graphics.text.formatter", "SVGFormatter", "public static String format(Text text)" ], [ "createFragment", "de.neemann.digital.draw.graphics.text.formatter", "GraphicsFormatter", "public static Fragment createFragment(Graphics2D gr, String text)" ], [ "createFragment", "de.neemann.digital.draw.graphics.text.formatter", "GraphicsFormatter", "public static Fragment createFragment(Graphics2D gr, Expression expression) throws FormatterException" ], [ "createFragment", "de.neemann.digital.draw.graphics.text.formatter", "GraphicsFormatter", "public static Fragment createFragment(FontSizer sizer, Font font, String text)" ], [ "format", "de.neemann.digital.draw.graphics.text.formatter", "LaTeXFormatter", "public static String format(Expression exp)" ], [ "format", "de.neemann.digital.draw.graphics.text.formatter", "LaTeXFormatter", "public static String format(Text text)" ], [ "math", "de.neemann.digital.draw.graphics.text.text", "Decorate", "public static Text math(Text t)" ], [ "escapeXML", "de.neemann.digital.draw.graphics", "GraphicSVG", "public static String escapeXML(String text)" ], [ "getMirrorYOrientation", "de.neemann.digital.draw.graphics", "GraphicSwing", "static int getMirrorYOrientation(Orientation orientation, VectorInterface p1, VectorInterface p2, VectorInterface p3)" ], [ "load", "de.neemann.digital.toolchain", "Configuration", "public static Configuration load(File file) throws IOException" ], [ "load", "de.neemann.digital.toolchain", "Configuration", "public static Configuration load(InputStream in) throws IOException" ] ],
  "tokensProjectClassesNonPrivateStaticAttributes" : [ [ "UNKNOWN", "de.neemann.gui", "InfoDialog", "public static final String UNKNOWN = \"unknown\";" ], [ "DESCRIPTION", "de.neemann.digital.core.pld", "PullDown", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"PullDown\", PullDown.class).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS);" ], [ "DESCRIPTION", "de.neemann.digital.core.pld", "Diode", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Diode.class).addAttribute(Keys.ROTATE).addAttribute(Keys.BLOWN);" ], [ "DESCRIPTION", "de.neemann.digital.core.pld", "DiodeBackward", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(DiodeBackward.class, input(\"in\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BLOWN);" ], [ "DESCRIPTION", "de.neemann.digital.core.pld", "PullUp", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"PullUp\", PullUp.class).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS);" ], [ "DESCRIPTION", "de.neemann.digital.core.pld", "DiodeForward", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(DiodeForward.class, input(\"in\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BLOWN);" ], [ "DESCRIPTION", "de.neemann.digital.core.memory", "RAMSinglePort", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(RAMSinglePort.class, input(\"A\"), input(\"str\"), input(\"C\").setClock(), input(\"ld\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.ADDR_BITS).addAttribute(Keys.INT_FORMAT).addAttribute(Keys.IS_PROGRAM_MEMORY).addAttribute(Keys.LABEL);" ], [ "DESCRIPTION", "de.neemann.digital.core.memory", "ROMDualPort", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(ROMDualPort.class, input(\"A1\"), input(\"s1\"), input(\"A2\"), input(\"s2\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.ADDR_BITS).addAttribute(Keys.LABEL).addAttribute(Keys.DATA).addAttribute(Keys.INT_FORMAT).addAttribute(Keys.IS_PROGRAM_MEMORY).addAttribute(Keys.AUTO_RELOAD_ROM).addAttribute(Keys.LAST_DATA_FILE).addAttribute(Keys.BIG_ENDIAN);" ], [ "DESCRIPTION", "de.neemann.digital.core.memory", "RAMDualAccess", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(RAMDualAccess.class, input(\"str\"), input(\"C\").setClock(), input(\"ld\"), input(\"1A\"), input(\"1Din\"), input(\"2A\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.ADDR_BITS).addAttribute(Keys.IS_PROGRAM_MEMORY).addAttribute(Keys.LABEL).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.memory", "CounterPreset", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(CounterPreset.class, input(\"en\"), input(\"C\").setClock(), input(\"dir\"), input(\"in\"), input(\"ld\"), input(\"clr\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.MAX_VALUE).addAttribute(Keys.INVERTER_CONFIG).addAttribute(Keys.LABEL).addAttribute(Keys.VALUE_IS_PROBE).addAttribute(Keys.IS_PROGRAM_COUNTER).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.memory", "RAMDualPort", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(RAMDualPort.class, input(\"A\"), input(\"Din\"), input(\"str\"), input(\"C\").setClock(), input(\"ld\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.ADDR_BITS).addAttribute(Keys.INT_FORMAT).addAttribute(Keys.IS_PROGRAM_MEMORY).addAttribute(Keys.LABEL).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.memory", "Register", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Register.class, input(\"D\"), input(\"C\").setClock(), input(\"en\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).addAttribute(Keys.INVERTER_CONFIG).addAttribute(Keys.IS_PROGRAM_COUNTER).addAttribute(Keys.VALUE_IS_PROBE).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.memory", "LookUpTable", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(LookUpTable.class) {\n\n    @Override\n    public PinDescriptions getInputDescription(ElementAttributes elementAttributes) {\n        int size = elementAttributes.get(Keys.INPUT_COUNT);\n        PinDescription[] names = new PinDescription[size];\n        for (int i = 0; i < size; i++) names[i] = input(Integer.toString(i), Lang.get(\"elem_LookUpTable_pin_in\", i));\n        return new PinDescriptions(names);\n    }\n}.addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.LUT_INPUT_COUNT).addAttribute(Keys.LABEL).addAttribute(Keys.DATA).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.memory", "BlockRAMDualPort", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(BlockRAMDualPort.class, input(\"A\"), input(\"Din\"), input(\"str\"), input(\"C\").setClock()).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.ADDR_BITS).addAttribute(Keys.IS_PROGRAM_MEMORY).addAttribute(Keys.LABEL).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.memory", "Counter", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Counter.class, input(\"en\"), input(\"C\").setClock(), input(\"clr\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.INVERTER_CONFIG).addAttribute(Keys.LABEL).addAttribute(Keys.VALUE_IS_PROBE).addAttribute(Keys.IS_PROGRAM_COUNTER).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.memory", "EEPROM", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(EEPROM.class, input(\"A\"), input(\"CS\"), input(\"WE\").setClock(), input(\"OE\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.ADDR_BITS).addAttribute(Keys.LABEL).addAttribute(Keys.INT_FORMAT).addAttribute(Keys.IS_PROGRAM_MEMORY).addAttribute(Keys.INVERTER_CONFIG).addAttribute(Keys.DATA);" ], [ "DESCRIPTION", "de.neemann.digital.core.memory", "RAMAsync", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(RAMAsync.class, input(\"A\"), input(\"D\"), input(\"we\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.ADDR_BITS).addAttribute(Keys.IS_PROGRAM_MEMORY).addAttribute(Keys.INVERTER_CONFIG).addAttribute(Keys.LABEL).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.memory", "ROM", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(ROM.class, input(\"A\"), input(\"sel\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.ADDR_BITS).addAttribute(Keys.LABEL).addAttribute(Keys.DATA).addAttribute(Keys.INT_FORMAT).addAttribute(Keys.IS_PROGRAM_MEMORY).addAttribute(Keys.AUTO_RELOAD_ROM).addAttribute(Keys.LAST_DATA_FILE).addAttribute(Keys.BIG_ENDIAN).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.memory", "EEPROMDualPort", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(EEPROMDualPort.class, input(\"A\"), input(\"Din\"), input(\"str\"), input(\"C\").setClock(), input(\"ld\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.ADDR_BITS).addAttribute(Keys.INT_FORMAT).addAttribute(Keys.IS_PROGRAM_MEMORY).addAttribute(Keys.LABEL).addAttribute(Keys.DATA);" ], [ "DESCRIPTION", "de.neemann.digital.core.memory", "RAMSinglePortSel", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(RAMSinglePortSel.class, input(\"A\"), input(\"CS\"), input(\"WE\"), input(\"OE\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.ADDR_BITS).addAttribute(Keys.LABEL).addAttribute(Keys.IS_PROGRAM_MEMORY).addAttribute(Keys.INVERTER_CONFIG);" ], [ "DESCRIPTION", "de.neemann.digital.core.memory", "RegisterFile", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(RegisterFile.class, input(\"Din\"), input(\"we\"), input(\"Rw\"), input(\"C\").setClock(), input(\"Ra\"), input(\"Rb\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.ADDR_BITS).addAttribute(Keys.LABEL).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.io", "MIDI", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(MIDI.class) {\n\n    public PinDescriptions getInputDescription(ElementAttributes elementAttributes) throws NodeException {\n        if (elementAttributes.get(Keys.MIDI_PROG_CHANGE))\n            return new PinDescriptions(input(\"N\"), input(\"V\"), input(\"OnOff\"), input(\"PC\"), input(\"en\"), input(\"C\").setClock()).setLangKey(getPinLangKey());\n        else\n            return new PinDescriptions(input(\"N\"), input(\"V\"), input(\"OnOff\"), input(\"en\"), input(\"C\").setClock()).setLangKey(getPinLangKey());\n    }\n}.addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.MIDI_CHANNEL).addAttribute(Keys.MIDI_INSTRUMENT).addAttribute(Keys.MIDI_PROG_CHANGE);" ], [ "DESCRIPTION", "de.neemann.digital.core.io", "RGBLED", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(RGBLED.class, input(\"R\"), input(\"G\"), input(\"B\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).addAttribute(Keys.LED_SIZE);" ], [ "DESCRIPTION", "de.neemann.digital.core.io", "Out", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"Out\", attributes -> new Out(attributes).enforceName(), input(\"in\")) {\n\n    @Override\n    public String getDescription(ElementAttributes elementAttributes) {\n        String d = Lang.evalMultilingualContent(elementAttributes.get(Keys.DESCRIPTION));\n        if (d.length() > 0)\n            return d;\n        else\n            return super.getDescription(elementAttributes);\n    }\n}.addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).addAttribute(Keys.DESCRIPTION).addAttribute(Keys.INT_FORMAT).addAttribute(Keys.PINNUMBER).addAttribute(Keys.ADD_VALUE_TO_GRAPH).addAttribute(Keys.IN_OUT_SMALL).supportsHDL();" ], [ "LEDDESCRIPTION", "de.neemann.digital.core.io", "Out", "public static final ElementTypeDescription LEDDESCRIPTION = new ElementTypeDescription(\"LED\", Out.class, input(\"in\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.LED_SIZE).addAttribute(Keys.COLOR);" ], [ "POLARITYAWARELEDDESCRIPTION", "de.neemann.digital.core.io", "Out", "public static final ElementTypeDescription POLARITYAWARELEDDESCRIPTION = new ElementTypeDescription(\"PolarityAwareLED\", attributes -> new Out(1, 1), input(\"A\"), input(\"C\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.COLOR);" ], [ "SEVENDESCRIPTION", "de.neemann.digital.core.io", "Out", "public static final ElementTypeDescription SEVENDESCRIPTION = new SevenSegTypeDescription();" ], [ "SEVENHEXDESCRIPTION", "de.neemann.digital.core.io", "Out", "public static final ElementTypeDescription SEVENHEXDESCRIPTION = new ElementTypeDescription(\"Seven-Seg-Hex\", attributes -> new Out(4, 1), input(\"d\"), input(\"dp\")).addAttribute(Keys.COLOR).addAttribute(Keys.SEVEN_SEG_SIZE);" ], [ "SIXTEENDESCRIPTION", "de.neemann.digital.core.io", "Out", "public static final ElementTypeDescription SIXTEENDESCRIPTION = new ElementTypeDescription(\"SixteenSeg\", attributes -> new Out(16, 1), input(\"led\"), input(\"dp\")).addAttribute(Keys.COLOR).addAttribute(Keys.SEVEN_SEG_SIZE);" ], [ "DESCRIPTION", "de.neemann.digital.core.io", "RotEncoder", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(RotEncoder.class).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL);" ], [ "DESCRIPTION", "de.neemann.digital.core.io", "PinControl", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(PinControl.class, input(\"wr\"), input(\"oe\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.MIRROR).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.io", "DipSwitch", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(DipSwitch.class) {\n\n    @Override\n    public String getDescription(ElementAttributes elementAttributes) {\n        String d = Lang.evalMultilingualContent(elementAttributes.get(Keys.DESCRIPTION));\n        if (d.length() > 0)\n            return d;\n        else\n            return super.getDescription(elementAttributes);\n    }\n}.addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.DIP_DEFAULT).addAttribute(Keys.DESCRIPTION);" ], [ "DESCRIPTION", "de.neemann.digital.core.io", "LightBulb", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(LightBulb.class, input(\"A\"), input(\"B\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.COLOR);" ], [ "DESCRIPTION", "de.neemann.digital.core.io", "Probe", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"Probe\", Probe.class, input(\"in\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.INT_FORMAT).addAttribute(Keys.PROBE_MODE).addAttribute(Keys.ADD_VALUE_TO_GRAPH);" ], [ "DESCRIPTION", "de.neemann.digital.core.io", "Button", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Button.class).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.ACTIVE_LOW).addAttribute(Keys.MAP_TO_KEY).addAttribute(Keys.ADD_VALUE_TO_GRAPH);" ], [ "DESCRIPTION", "de.neemann.digital.core.io", "ButtonLED", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(ButtonLED.class, input(\"in\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.ACTIVE_LOW).addAttribute(Keys.MAP_TO_KEY).addAttribute(Keys.COLOR);" ], [ "DESCRIPTION", "de.neemann.digital.core.io", "In", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(In.class) {\n\n    @Override\n    public String getDescription(ElementAttributes elementAttributes) {\n        String d = Lang.evalMultilingualContent(elementAttributes.get(Keys.DESCRIPTION));\n        if (d.length() > 0)\n            return d;\n        else\n            return super.getDescription(elementAttributes);\n    }\n}.addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).addAttribute(Keys.INPUT_DEFAULT).addAttribute(Keys.IS_HIGH_Z).addAttribute(Keys.AVOID_ACTIVE_LOW).addAttribute(Keys.DESCRIPTION).addAttribute(Keys.INT_FORMAT).addAttribute(Keys.PINNUMBER).addAttribute(Keys.ADD_VALUE_TO_GRAPH).addAttribute(Keys.IN_OUT_SMALL).supportsHDL();" ], [ "STEPS", "de.neemann.digital.core.io", "StepperMotorUnipolar", "public static final int STEPS = 72;" ], [ "DESCRIPTION", "de.neemann.digital.core.io", "StepperMotorUnipolar", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(StepperMotorUnipolar.class, input(\"P0\"), input(\"P1\"), input(\"P2\"), input(\"P3\"), input(\"com\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.INVERT_OUTPUT);" ], [ "DESCRIPTION", "de.neemann.digital.core.io", "NotConnected", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(NotConnected.class).addAttribute(Keys.BITS);" ], [ "DESCRIPTION", "de.neemann.digital.core.io", "StepperMotorBipolar", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(StepperMotorBipolar.class, input(\"A+\"), input(\"A-\"), input(\"B+\"), input(\"B-\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.INVERT_OUTPUT);" ], [ "DESCRIPTION", "de.neemann.digital.core.io", "Const", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Const.class).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.VALUE).addAttribute(Keys.INT_FORMAT).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.io", "PowerSupply", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(PowerSupply.class, input(\"VDD\"), input(\"GND\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL);" ], [ "DESCRIPTION", "de.neemann.digital.core.io", "Ground", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Ground.class).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.io", "VDD", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(VDD.class).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).supportsHDL();" ], [ "INSTANCE", "de.neemann.digital.core.io.telnet", "ServerHolder", "public static final ServerHolder INSTANCE = new ServerHolder();" ], [ "DESCRIPTION", "de.neemann.digital.core.io.telnet", "Telnet", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Telnet.class, input(\"in\"), input(\"C\").setClock(), input(\"wr\"), input(\"rd\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.TELNET_ESCAPE).addAttribute(Keys.PORT);" ], [ "BITS", "de.neemann.digital.core.element", "Keys", "public static final Key.KeyBits BITS = new Key.KeyBits(\"Bits\", 1);" ], [ "INPUT_BITS", "de.neemann.digital.core.element", "Keys", "public static final Key.KeyBits INPUT_BITS = new Key.KeyBits(\"inputBits\", 8);" ], [ "OUTPUT_BITS", "de.neemann.digital.core.element", "Keys", "public static final Key.KeyBits OUTPUT_BITS = new Key.KeyBits(\"outputBits\", 16);" ], [ "INPUT_COUNT", "de.neemann.digital.core.element", "Keys", "public static final Key.KeyInteger INPUT_COUNT = new Key.KeyInteger(\"Inputs\", 2).setComboBoxValues(2, 3, 4, 5).setMin(2);" ], [ "LUT_INPUT_COUNT", "de.neemann.digital.core.element", "Keys", "public static final Key.KeyInteger LUT_INPUT_COUNT = new Key.KeyInteger(\"Inputs\", 2).setComboBoxValues(2, 3, 4, 5, 6).setMax(20).setMin(2);" ], [ "MAX_VALUE", "de.neemann.digital.core.element", "Keys", "public static final Key.KeyInteger MAX_VALUE = new Key.KeyInteger(\"maxValue\", 0).setMin(0);" ], [ "DELAY_TIME", "de.neemann.digital.core.element", "Keys", "public static final Key.KeyInteger DELAY_TIME = new Key.KeyInteger(\"delayTime\", 1).setComboBoxValues(1, 2, 3, 4, 5).setMin(1).setMax(20);" ], [ "MONOFLOP_DELAY", "de.neemann.digital.core.element", "Keys", "public static final Key.KeyInteger MONOFLOP_DELAY = new Key.KeyInteger(\"timerDelay\", 1).setMin(1);" ], [ "LABEL", "de.neemann.digital.core.element", "Keys", "public static final Key<String> LABEL = new Key<>(\"Label\", \"\");" ], [ "FONT_SIZE", "de.neemann.digital.core.element", "Keys", "public static final Key<Integer> FONT_SIZE = new Key.KeyInteger(\"textFontSize\", Style.NORMAL.getFontSize()).setComboBoxValues(14, 17, 20, 24, 36, 48, 60).setMin(10).setMax(70);" ], [ "TEXT_ORIENTATION", "de.neemann.digital.core.element", "Keys", "public static final Key<Orientation> TEXT_ORIENTATION = new Key.KeyEnum<>(\"textOrientation\", Orientation.LEFTTOP, Orientation.values()).setSecondary();" ], [ "LED_SIZE", "de.neemann.digital.core.element", "Keys", "public static final Key<Integer> LED_SIZE = new Key.KeyInteger(\"Size\", 1).setComboBoxValues(0, 1, 2, 3, 4, 5).setMin(0).allowGroupEdit().setSecondary();" ], [ "SEVEN_SEG_SIZE", "de.neemann.digital.core.element", "Keys", "public static final Key<Integer> SEVEN_SEG_SIZE = new Key.KeyInteger(\"segSize\", 2).setComboBoxValues(0, 1, 2, 3, 4, 5).setMin(0).allowGroupEdit().useTranslationOf(LED_SIZE);" ], [ "VALUE", "de.neemann.digital.core.element", "Keys", "public static final Key<Long> VALUE = new Key<>(\"Value\", 1L).setAdaptiveIntFormat().allowGroupEdit();" ], [ "DEFAULT", "de.neemann.digital.core.element", "Keys", "public static final Key<Long> DEFAULT = new Key<>(\"Default\", 0L).allowGroupEdit().setSecondary();" ], [ "INPUT_DEFAULT", "de.neemann.digital.core.element", "Keys", "public static final Key<InValue> INPUT_DEFAULT = new Key<>(\"InDefault\", new InValue(0)).setAdaptiveIntFormat().allowGroupEdit().setSecondary();" ], [ "DIP_DEFAULT", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> DIP_DEFAULT = new Key<>(\"dipDefault\", false).allowGroupEdit().setSecondary();" ], [ "COLOR", "de.neemann.digital.core.element", "Keys", "public static final Key<java.awt.Color> COLOR = new Key<>(\"Color\", java.awt.Color.RED).allowGroupEdit();" ], [ "INPUT_SPLIT", "de.neemann.digital.core.element", "Keys", "public static final Key<String> INPUT_SPLIT = new Key<>(\"Input Splitting\", \"4,4\");" ], [ "OUTPUT_SPLIT", "de.neemann.digital.core.element", "Keys", "public static final Key<String> OUTPUT_SPLIT = new Key<>(\"Output Splitting\", \"8\");" ], [ "SPLITTER_SPREADING", "de.neemann.digital.core.element", "Keys", "public static final Key<Integer> SPLITTER_SPREADING = new Key.KeyInteger(\"splitterSpreading\", 1).setComboBoxValues(1, 2, 3, 4).setMin(1).setMax(20).setSecondary();" ], [ "IN_OUT_SMALL", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> IN_OUT_SMALL = new Key<>(\"small\", false).allowGroupEdit().setSecondary();" ], [ "RUN_AT_REAL_TIME", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> RUN_AT_REAL_TIME = new Key<>(\"runRealTime\", false);" ], [ "INVERT_OUTPUT", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> INVERT_OUTPUT = new Key<>(\"invertOutput\", true);" ], [ "FREQUENCY", "de.neemann.digital.core.element", "Keys", "public static final Key<Integer> FREQUENCY = new Key.KeyInteger(\"Frequency\", 1).setComboBoxValues(1, 2, 5, 10, 20, 50, 100, 200, 500, 5000, 50000, Integer.MAX_VALUE).setMin(1).setDependsOn(RUN_AT_REAL_TIME);" ], [ "SELECTOR_BITS", "de.neemann.digital.core.element", "Keys", "public static final Key<Integer> SELECTOR_BITS = new Key.KeyBits(\"Selector Bits\", 1).setMax(8);" ], [ "ADDR_BITS", "de.neemann.digital.core.element", "Keys", "public static final Key<Integer> ADDR_BITS = // needs to have the same default value as INPUT_COUNT!!!  see de.neemann.digital.gui.components.EditorFactory#DataFieldEditor\nnew Key.KeyBits(\"AddrBits\", 2).setMax(24);" ], [ "BLOWN", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> BLOWN = new Key<>(\"Blown\", false).allowGroupEdit();" ], [ "CLOSED", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> CLOSED = new Key<>(\"Closed\", false).allowGroupEdit();" ], [ "SIGNED", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> SIGNED = new Key<>(\"Signed\", false).allowGroupEdit();" ], [ "REMAINDER_POSITIVE", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> REMAINDER_POSITIVE = new Key<>(\"remainderPositive\", true).setDependsOn(SIGNED);" ], [ "DATA", "de.neemann.digital.core.element", "Keys", "public static final Key<DataField> DATA = new Key<>(\"Data\", DataField::new);" ], [ "FLIP_SEL_POSITON", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> FLIP_SEL_POSITON = new Key<>(\"flipSelPos\", false).allowGroupEdit();" ], [ "ROTATE", "de.neemann.digital.core.element", "Keys", "public static final Key<Rotation> ROTATE = new Key<>(\"rotation\", new Rotation(0)).allowGroupEdit().setSecondary();" ], [ "WIDTH", "de.neemann.digital.core.element", "Keys", "public static final Key.KeyInteger WIDTH = new Key.KeyInteger(\"Width\", 3).setMin(2);" ], [ "SHAPE_TYPE", "de.neemann.digital.core.element", "Keys", "public static final Key<CustomCircuitShapeType> SHAPE_TYPE = new Key.KeyEnum<>(\"shapeType\", CustomCircuitShapeType.DEFAULT, CustomCircuitShapeType.values()).setSecondary();" ], [ "LAYOUT_SHAPE_DELTA", "de.neemann.digital.core.element", "Keys", "public static final Key.KeyInteger LAYOUT_SHAPE_DELTA = new Key.KeyInteger(\"layoutShapeDelta\", 0).setMin(0);" ], [ "HEIGHT", "de.neemann.digital.core.element", "Keys", "public static final Key<Integer> HEIGHT = new Key.KeyInteger(\"Height\", 3).setMin(2).setSecondary().setDependsOn(SHAPE_TYPE, cst -> cst.equals(CustomCircuitShapeType.LAYOUT));" ], [ "TERM_WIDTH", "de.neemann.digital.core.element", "Keys", "public static final Key.KeyInteger TERM_WIDTH = new Key.KeyInteger(\"termWidth\", 50).setMin(10);" ], [ "TERM_HEIGHT", "de.neemann.digital.core.element", "Keys", "public static final Key.KeyInteger TERM_HEIGHT = new Key.KeyInteger(\"termHeight\", 25).setMin(5);" ], [ "CYCLES", "de.neemann.digital.core.element", "Keys", "public static final Key.KeyInteger CYCLES = new Key.KeyInteger(\"Cycles\", 100000).setComboBoxValues(1000, 10000, 100000, 1000000);" ], [ "ENABLED", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> ENABLED = new Key<>(\"enabled\", true).allowGroupEdit();" ], [ "VALUE_IS_PROBE", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> VALUE_IS_PROBE = new Key<>(\"valueIsProbe\", false).allowGroupEdit().setSecondary();" ], [ "IS_PROGRAM_MEMORY", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> IS_PROGRAM_MEMORY = new Key<>(\"isProgramMemory\", false).setSecondary();" ], [ "IS_PROGRAM_COUNTER", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> IS_PROGRAM_COUNTER = new Key<>(\"isProgramCounter\", false).setSecondary();" ], [ "AUTO_RELOAD_ROM", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> AUTO_RELOAD_ROM = new Key<>(\"autoReload\", false).setSecondary();" ], [ "LAST_DATA_FILE", "de.neemann.digital.core.element", "Keys", "public static final Key<File> LAST_DATA_FILE = new Key.KeyFile(\"lastDataFile\", new File(\"\")).setDependsOn(AUTO_RELOAD_ROM).setSecondary();" ], [ "SHOW_DATA_TABLE", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> SHOW_DATA_TABLE = new Key<>(\"showDataTable\", false).setSecondary();" ], [ "SHOW_DATA_GRAPH", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> SHOW_DATA_GRAPH = new Key<>(\"showDataGraph\", false).setSecondary();" ], [ "SHOW_DATA_GRAPH_MICRO", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> SHOW_DATA_GRAPH_MICRO = new Key<>(\"showDataGraphMicro\", false).setSecondary();" ], [ "ADD_VALUE_TO_GRAPH", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> ADD_VALUE_TO_GRAPH = new Key<>(\"addValueToGraph\", true).allowGroupEdit().setSecondary();" ], [ "MICRO_STEP", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> MICRO_STEP = new Key<>(\"microStep\", false);" ], [ "MAX_STEP_COUNT", "de.neemann.digital.core.element", "Keys", "public static final Key.KeyInteger MAX_STEP_COUNT = new Key.KeyInteger(\"maxStepCount\", 25).setMin(5);" ], [ "SETTINGS_MAX_STEP_COUNT", "de.neemann.digital.core.element", "Keys", "public static final Key<Integer> SETTINGS_MAX_STEP_COUNT = new Key.KeyInteger(\"settingsMaxStepCount\", 1000).setComboBoxValues(500, 1000, 5000, 10000).setMin(500).setSecondary().useTranslationOf(MAX_STEP_COUNT);" ], [ "IS_HIGH_Z", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> IS_HIGH_Z = new Key<>(\"isHighZ\", false).allowGroupEdit().setSecondary();" ], [ "AVOID_ACTIVE_LOW", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> AVOID_ACTIVE_LOW = new Key<>(\"avoidActiveLow\", false).setDependsOn(IS_HIGH_Z).allowGroupEdit().setSecondary();" ], [ "DESCRIPTION", "de.neemann.digital.core.element", "Keys", "public static final Key.LongString DESCRIPTION = new Key.LongString(\"Description\");" ], [ "NETNAME", "de.neemann.digital.core.element", "Keys", "public static final Key<String> NETNAME = new Key<>(\"NetName\", \"\");" ], [ "SETTINGS_IEEE_SHAPES", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> SETTINGS_IEEE_SHAPES = new Key<>(\"IEEEShapes\", !Locale.getDefault().getLanguage().equals(Locale.GERMAN.getLanguage())).setRequiresRestart();" ], [ "SETTINGS_LANGUAGE", "de.neemann.digital.core.element", "Keys", "public static final Key<Language> SETTINGS_LANGUAGE = new Key<>(\"Language\", new Language()).setRequiresRestart();" ], [ "SETTINGS_DEFAULT_TREESELECT", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> SETTINGS_DEFAULT_TREESELECT = new Key<>(\"defTreeSelect\", false);" ], [ "SETTINGS_EXPRESSION_FORMAT", "de.neemann.digital.core.element", "Keys", "public static final Key.KeyEnum<FormatToExpression> SETTINGS_EXPRESSION_FORMAT = new Key.KeyEnum<>(\"ExpressionFormat\", FormatToExpression.UNICODE, FormatToExpression.values(), true);" ], [ "SETTINGS_GRID", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> SETTINGS_GRID = new Key<>(\"grid\", true).setRequiresRepaint();" ], [ "SETTINGS_SHOW_WIRE_BITS", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> SETTINGS_SHOW_WIRE_BITS = new Key<>(\"showWireBits\", false);" ], [ "SETTINGS_MAC_MOUSE", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> SETTINGS_MAC_MOUSE = new Key<>(\"macMouse\", false).setRequiresRestart().setSecondary();" ], [ "SETTINGS_SHOW_TUNNEL_RENAME_DIALOG", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> SETTINGS_SHOW_TUNNEL_RENAME_DIALOG = new Key<>(\"tunnelRenameDialog\", true);" ], [ "SETTINGS_RENAME_LABELS", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> SETTINGS_RENAME_LABELS = new Key<>(\"renameLabels\", true);" ], [ "SETTINGS_OPEN_REMOTE_PORT", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> SETTINGS_OPEN_REMOTE_PORT = new Key<>(\"openRemotePort\", false).setSecondary().setRequiresRestart();" ], [ "SETTINGS_REMOTE_PORT", "de.neemann.digital.core.element", "Keys", "public static final Key<Integer> SETTINGS_REMOTE_PORT = new Key.KeyInteger(\"remotePort\", 41114).setMin(0).setMax(0xffff).setComboBoxValues(41114).setSecondary().setRequiresRestart().setDependsOn(SETTINGS_OPEN_REMOTE_PORT);" ], [ "OSCILLATION_DETECTION_COUNTER", "de.neemann.digital.core.element", "Keys", "public static final Key<Integer> OSCILLATION_DETECTION_COUNTER = new Key.KeyInteger(\"oscillationDetectionCounter\", 1000).setComboBoxValues(1000, 5000, 10000).setMin(1000).setMax(100000);" ], [ "INT_FORMAT", "de.neemann.digital.core.element", "Keys", "public static final Key<IntFormat> INT_FORMAT = new Key.KeyEnum<>(\"intFormat\", IntFormat.def, IntFormat.values()).setSecondary();" ], [ "PROBE_MODE", "de.neemann.digital.core.element", "Keys", "public static final Key<ProbeMode> PROBE_MODE = new Key.KeyEnum<>(\"probeMode\", ProbeMode.VALUE, ProbeMode.values());" ], [ "FIXED_POINT", "de.neemann.digital.core.element", "Keys", "public static final Key<Integer> FIXED_POINT = new Key.KeyInteger(\"fixedPoint\", 4).setMin(1).setMax(64).setDependsOn(INT_FORMAT, intFormat -> intFormat.equals(IntFormat.fixed) || intFormat.equals(IntFormat.fixedSigned)).allowGroupEdit().setSecondary();" ], [ "GRAPHIC_WIDTH", "de.neemann.digital.core.element", "Keys", "public static final Key.KeyInteger GRAPHIC_WIDTH = new Key.KeyInteger(\"graphicWidth\", 160).setMin(4);" ], [ "GRAPHIC_HEIGHT", "de.neemann.digital.core.element", "Keys", "public static final Key.KeyInteger GRAPHIC_HEIGHT = new Key.KeyInteger(\"graphicHeight\", 100).setMin(4);" ], [ "RELAY_NORMALLY_CLOSED", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> RELAY_NORMALLY_CLOSED = new Key<>(\"relayNormallyClosed\", false).allowGroupEdit();" ], [ "POLES", "de.neemann.digital.core.element", "Keys", "public static final Key<Integer> POLES = new Key.KeyInteger(\"poles\", 1).setComboBoxValues(1, 2, 3, 4).setMin(1).allowGroupEdit();" ], [ "BARREL_SHIFTER_MODE", "de.neemann.digital.core.element", "Keys", "public static final Key<BarrelShifterMode> BARREL_SHIFTER_MODE = new Key.KeyEnum<>(\"barrelShifterMode\", BarrelShifterMode.logical, BarrelShifterMode.values());" ], [ "DIRECTION", "de.neemann.digital.core.element", "Keys", "public static final Key<LeftRightFormat> DIRECTION = new Key.KeyEnum<>(\"direction\", LeftRightFormat.left, LeftRightFormat.values());" ], [ "BARREL_SIGNED", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> BARREL_SIGNED = new Key<>(\"barrelSigned\", false);" ], [ "COMMON_CONNECTION", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> COMMON_CONNECTION = new Key<>(\"commonCathode\", false).allowGroupEdit();" ], [ "COMMON_CONNECTION_TYPE", "de.neemann.digital.core.element", "Keys", "public static final Key<CommonConnectionType> COMMON_CONNECTION_TYPE = new Key.KeyEnum<>(\"commonConnectionType\", CommonConnectionType.cathode, CommonConnectionType.values()).setDependsOn(COMMON_CONNECTION).allowGroupEdit();" ], [ "LED_PERSISTENCE", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> LED_PERSISTENCE = new Key<>(\"ledPersistence\", false).allowGroupEdit().setDependsOn(COMMON_CONNECTION);" ], [ "LED_PERSIST_TIME", "de.neemann.digital.core.element", "Keys", "public static final Key<Integer> LED_PERSIST_TIME = new Key.KeyInteger(\"persistTime\", 0).setMin(0).allowGroupEdit();" ], [ "SETTINGS_ATF1502_FITTER", "de.neemann.digital.core.element", "Keys", "public static final Key<File> SETTINGS_ATF1502_FITTER = new Key.KeyFile(\"atf1502Fitter\", new File(\"c:/Wincupl/WinCupl/Fitters\")).setDirectoryOnly(true).setSecondary();" ], [ "SETTINGS_ATMISP", "de.neemann.digital.core.element", "Keys", "public static final Key<File> SETTINGS_ATMISP = new Key.KeyFile(\"ATMISP\", getATMISPPath()).setSecondary();" ], [ "ROW_DATA_BITS", "de.neemann.digital.core.element", "Keys", "public static final Key.KeyBits ROW_DATA_BITS = new Key.KeyBits(\"rowDataBits\", 8);" ], [ "COL_ADDR_BITS", "de.neemann.digital.core.element", "Keys", "public static final Key.KeyBits COL_ADDR_BITS = new Key.KeyBits(\"colAddrBits\", 3);" ], [ "LOCKED_MODE", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> LOCKED_MODE = new Key<>(\"lockedMode\", false);" ], [ "PINNUMBER", "de.neemann.digital.core.element", "Keys", "public static final Key<String> PINNUMBER = new Key<>(\"pinNumber\", \"\").setSecondary();" ], [ "PINCOUNT", "de.neemann.digital.core.element", "Keys", "public static final Key<Integer> PINCOUNT = new Key.KeyInteger(\"pinCount\", 0).setMin(0).setSecondary().setDependsOn(SHAPE_TYPE, st -> st.equals(CustomCircuitShapeType.DIL));" ], [ "INVERTER_CONFIG", "de.neemann.digital.core.element", "Keys", "public static final Key<InverterConfig> INVERTER_CONFIG = new Key<>(\"inverterConfig\", new InverterConfig.Builder().build());" ], [ "BACKGROUND_COLOR", "de.neemann.digital.core.element", "Keys", "public static final Key<java.awt.Color> BACKGROUND_COLOR = new Key<>(\"backgroundColor\", new Color(255, 255, 180, 200));" ], [ "SETTINGS_FONT_SCALING", "de.neemann.digital.core.element", "Keys", "public static final Key<Integer> SETTINGS_FONT_SCALING = new Key.KeyInteger(\"fontSize\", Screen.getDefaultFontScaling()).setComboBoxValues(100, 120, 150, 180, 200, 250, 300).setMin(50).setMax(400).setRequiresRestart().setSecondary();" ], [ "SETTINGS_USE_EQUALS_KEY", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> SETTINGS_USE_EQUALS_KEY;" ], [ "WITH_ENABLE", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> WITH_ENABLE = new Key<>(\"withEnable\", true);" ], [ "FET_UNIDIRECTIONAL", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> FET_UNIDIRECTIONAL = new Key<>(\"unidirectional\", false);" ], [ "ACTIVE_LOW", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> ACTIVE_LOW = new Key<>(\"activeLow\", false).allowGroupEdit();" ], [ "MAP_TO_KEY", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> MAP_TO_KEY = new Key<>(\"mapToKey\", false).allowGroupEdit();" ], [ "SETTINGS_LIBRARY_PATH", "de.neemann.digital.core.element", "Keys", "public static final Key<File> SETTINGS_LIBRARY_PATH = new Key.KeyFile(\"libraryPath\", ElementLibrary.getLibPath()).setDirectoryOnly(true).setSecondary();" ], [ "SETTINGS_JAR_PATH", "de.neemann.digital.core.element", "Keys", "public static final Key<File> SETTINGS_JAR_PATH = new Key.KeyFile(\"jarPath\", new File(\"\")).setSecondary().setRequiresRestart();" ], [ "ROMMANAGER", "de.neemann.digital.core.element", "Keys", "public static final Key<ROMManagerFile> ROMMANAGER = new Key<>(\"romContent\", ROMManagerFile::new).setSecondary();" ], [ "APPLICATION_TYPE", "de.neemann.digital.core.element", "Keys", "public static final Key.KeyEnum<Application.Type> APPLICATION_TYPE = new Key.KeyEnum<>(\"applicationType\", Application.Type.Generic, Application.Type.values());" ], [ "EXTERNAL_INPUTS", "de.neemann.digital.core.element", "Keys", "public static final Key<String> EXTERNAL_INPUTS = new Key<>(\"externalInputs\", \"in\");" ], [ "EXTERNAL_OUTPUTS", "de.neemann.digital.core.element", "Keys", "public static final Key<String> EXTERNAL_OUTPUTS = new Key<>(\"externalOutputs\", \"out\");" ], [ "EXTERNAL_CODE", "de.neemann.digital.core.element", "Keys", "public static final Key.LongString EXTERNAL_CODE = new Key.LongString(\"Code\").setRows(30).setColumns(80).setLineNumbers(true);" ], [ "EXTERNAL_CODE_FILE", "de.neemann.digital.core.element", "Keys", "public static final Key.KeyFile EXTERNAL_CODE_FILE = new Key.KeyFile(\"CodeFile\", new File(\"\"));" ], [ "SETTINGS_GHDL_PATH", "de.neemann.digital.core.element", "Keys", "public static final Key<File> SETTINGS_GHDL_PATH = new Key.KeyFile(\"ghdlPath\", new File(\"ghdl\")).setSecondary();" ], [ "GHDL_OPTIONS", "de.neemann.digital.core.element", "Keys", "public static final Key<String> GHDL_OPTIONS = new Key.LongString(\"ghdlOptions\", \"--std=08 --ieee=synopsys\").setRows(3).setColumns(30).setPanelId(\"Options\");" ], [ "IVERILOG_OPTIONS", "de.neemann.digital.core.element", "Keys", "public static final Key<String> IVERILOG_OPTIONS = new Key.LongString(\"iverilogOptions\", \"\").setRows(3).setColumns(30).setPanelId(\"Options\");" ], [ "SETTINGS_IVERILOG_PATH", "de.neemann.digital.core.element", "Keys", "public static final Key<File> SETTINGS_IVERILOG_PATH = new Key.KeyFile(\"iverilogPath\", new File(\"iverilog\")).setSecondary();" ], [ "CUSTOM_SHAPE", "de.neemann.digital.core.element", "Keys", "public static final Key<CustomShapeDescription> CUSTOM_SHAPE = new Key<>(\"customShape\", new CustomShapeDescription.Builder().build()).setSecondary().setDependsOn(SHAPE_TYPE, st -> st.equals(CustomCircuitShapeType.CUSTOM));" ], [ "PRELOAD_PROGRAM", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> PRELOAD_PROGRAM = new Key<>(\"preloadProgram\", false).setSecondary();" ], [ "BIG_ENDIAN", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> BIG_ENDIAN = new Key<>(\"bigEndian\", false).setSecondary().setDependsOn(AUTO_RELOAD_ROM);" ], [ "PROGRAM_TO_PRELOAD", "de.neemann.digital.core.element", "Keys", "public static final Key<File> PROGRAM_TO_PRELOAD = new Key.KeyFile(\"preloadProgramFile\", new File(\"\")).setSecondary().setDependsOn(PRELOAD_PROGRAM);" ], [ "BIG_ENDIAN_SETTING", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> BIG_ENDIAN_SETTING = new Key<>(\"bigEndianSetting\", false).setSecondary().useTranslationOf(BIG_ENDIAN).setDependsOn(PRELOAD_PROGRAM);" ], [ "WIDE_SHAPE", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> WIDE_SHAPE = new Key<>(\"wideShape\", false).setSecondary().allowGroupEdit();" ], [ "RECT_WIDTH", "de.neemann.digital.core.element", "Keys", "public static final Key.KeyInteger RECT_WIDTH = new Key.KeyInteger(\"RectWidth\", 3).setMin(2);" ], [ "RECT_HEIGHT", "de.neemann.digital.core.element", "Keys", "public static final Key.KeyInteger RECT_HEIGHT = new Key.KeyInteger(\"RectHeight\", 3).setMin(2);" ], [ "RECT_INSIDE", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> RECT_INSIDE = new Key<>(\"RectInside\", false).setSecondary();" ], [ "RECT_BOTTOM", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> RECT_BOTTOM = new Key<>(\"RectBottom\", false).setSecondary();" ], [ "RECT_RIGHT", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> RECT_RIGHT = new Key<>(\"RectRight\", false).setSecondary();" ], [ "MIDI_CHANNEL", "de.neemann.digital.core.element", "Keys", "public static final Key.KeyInteger MIDI_CHANNEL = new Key.KeyInteger(\"midiChannel\", 1).setMin(1).setMax(16);" ], [ "MIDI_INSTRUMENT", "de.neemann.digital.core.element", "Keys", "public static final Key<String> MIDI_INSTRUMENT = new Key<>(\"midiInstrument\", \"\");" ], [ "MIDI_PROG_CHANGE", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> MIDI_PROG_CHANGE = new Key<>(\"midiProgChange\", false);" ], [ "SETTINGS_TOOLCHAIN_CONFIG", "de.neemann.digital.core.element", "Keys", "public static final Key<File> SETTINGS_TOOLCHAIN_CONFIG = new Key.KeyFile(\"toolChainConfig\", new File(\"\")).setSecondary().setRequiresRestart();" ], [ "GENERIC", "de.neemann.digital.core.element", "Keys", "public static final Key<String> GENERIC = new Key.LongString(\"generic\").setLineNumbers(true).allowGroupEdit();" ], [ "GENERICLARGE", "de.neemann.digital.core.element", "Keys", "public static final Key<String> GENERICLARGE = new Key.LongString(\"generic\").setLineNumbers(true).setRows(20).allowGroupEdit();" ], [ "IS_GENERIC", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> IS_GENERIC = new Key<>(\"isGeneric\", false).setSecondary();" ], [ "SETTINGS_SHOW_TUTORIAL", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> SETTINGS_SHOW_TUTORIAL = new Key<>(\"showTutorial\", true).setSecondary();" ], [ "SETTINGS_WIRETOOLTIP", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> SETTINGS_WIRETOOLTIP = new Key<>(\"wireToolTips\", false);" ], [ "SWITCH_ACTS_AS_INPUT", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> SWITCH_ACTS_AS_INPUT = new Key<>(\"switchActsAsInput\", false).setSecondary();" ], [ "SNAP_TO_GRID", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> SNAP_TO_GRID = new Key<>(\"snapToGrid\", true).setSecondary();" ], [ "MIRROR", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> MIRROR = new Key<>(\"mirror\", false).allowGroupEdit().setSecondary();" ], [ "TESTDATA", "de.neemann.digital.core.element", "Keys", "public static final Key<TestCaseDescription> TESTDATA = new Key<>(\"Testdata\", TestCaseDescription::new);" ], [ "TRIGGER", "de.neemann.digital.core.element", "Keys", "public static final Key.KeyEnum<ScopeTrigger.Trigger> TRIGGER = new Key.KeyEnum<>(\"trigger\", ScopeTrigger.Trigger.both, ScopeTrigger.Trigger.values());" ], [ "PORT", "de.neemann.digital.core.element", "Keys", "public static final Key.KeyInteger PORT = new Key.KeyInteger(\"port\", 23).setMin(1).setMax((1 << 16) - 1);" ], [ "TELNET_ESCAPE", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> TELNET_ESCAPE = new Key<>(\"telnetEscape\", true).allowGroupEdit();" ], [ "SKIP_HDL", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> SKIP_HDL = new Key<>(\"skipHDL\", false).setSecondary();" ], [ "PREFIX", "de.neemann.digital.core.basic", "FanIn", "public static final String PREFIX = \"In_\";" ], [ "DESCRIPTION", "de.neemann.digital.core.basic", "NOr", "public static final ElementTypeDescription DESCRIPTION = new FanInDescription(NOr.class).addAttribute(Keys.WIDE_SHAPE);" ], [ "DESCRIPTION", "de.neemann.digital.core.basic", "And", "public static final ElementTypeDescription DESCRIPTION = new FanInDescription(And.class).addAttribute(Keys.WIDE_SHAPE);" ], [ "DESCRIPTION", "de.neemann.digital.core.basic", "XNOr", "public static final ElementTypeDescription DESCRIPTION = new FanInDescription(XNOr.class).addAttribute(Keys.WIDE_SHAPE);" ], [ "DESCRIPTION", "de.neemann.digital.core.basic", "XOr", "public static final ElementTypeDescription DESCRIPTION = new FanInDescription(XOr.class).addAttribute(Keys.WIDE_SHAPE);" ], [ "DESCRIPTION", "de.neemann.digital.core.basic", "Not", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Not.class, input(\"in\")).addAttribute(Keys.ROTATE).addAttribute(Keys.WIDE_SHAPE).addAttribute(Keys.BITS).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.basic", "NAnd", "public static final ElementTypeDescription DESCRIPTION = new FanInDescription(NAnd.class).addAttribute(Keys.WIDE_SHAPE);" ], [ "DESCRIPTION", "de.neemann.digital.core.basic", "Or", "public static final ElementTypeDescription DESCRIPTION = new FanInDescription(Or.class).addAttribute(Keys.WIDE_SHAPE);" ], [ "STARTED", "de.neemann.digital.core", "ModelEvent", "public static final ModelEvent STARTED = new ModelEvent(ModelEventType.STARTED);" ], [ "CLOSED", "de.neemann.digital.core", "ModelEvent", "public static final ModelEvent CLOSED = new ModelEvent(ModelEventType.CLOSED);" ], [ "POSTCLOSED", "de.neemann.digital.core", "ModelEvent", "public static final ModelEvent POSTCLOSED = new ModelEvent(ModelEventType.POSTCLOSED);" ], [ "STEP", "de.neemann.digital.core", "ModelEvent", "public static final ModelEvent STEP = new ModelEvent(ModelEventType.STEP);" ], [ "CHECKBURN", "de.neemann.digital.core", "ModelEvent", "public static final ModelEvent CHECKBURN = new ModelEvent(ModelEventType.CHECKBURN);" ], [ "MICROSTEP", "de.neemann.digital.core", "ModelEvent", "public static final ModelEvent MICROSTEP = new ModelEvent(ModelEventType.MICROSTEP);" ], [ "RUN_TO_BREAK", "de.neemann.digital.core", "ModelEvent", "public static final ModelEvent RUN_TO_BREAK = new ModelEvent(ModelEventType.RUN_TO_BREAK);" ], [ "RUN_TO_BREAK_TIMEOUT", "de.neemann.digital.core", "ModelEvent", "public static final ModelEvent RUN_TO_BREAK_TIMEOUT = new ModelEvent(ModelEventType.RUN_TO_BREAK_TIMEOUT);" ], [ "BREAK", "de.neemann.digital.core", "ModelEvent", "public static final ModelEvent BREAK = new ModelEvent(ModelEventType.BREAK);" ], [ "DESCRIPTION", "de.neemann.digital.core.switching", "FGPFET", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(FGPFET.class, input(\"G\")).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).addAttribute(Keys.BLOWN);" ], [ "DESCRIPTION", "de.neemann.digital.core.switching", "NFET", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(NFET.class, input(\"G\")).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.BITS).addAttribute(Keys.FET_UNIDIRECTIONAL).addAttribute(Keys.LABEL);" ], [ "DESCRIPTION", "de.neemann.digital.core.switching", "FGNFET", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(FGNFET.class, input(\"G\")).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).addAttribute(Keys.BLOWN);" ], [ "DESCRIPTION", "de.neemann.digital.core.switching", "PFET", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(PFET.class, input(\"G\")).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.BITS).addAttribute(Keys.FET_UNIDIRECTIONAL).addAttribute(Keys.LABEL);" ], [ "DESCRIPTION", "de.neemann.digital.core.switching", "TransGate", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(TransGate.class, input(\"S\"), input(\"~S\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS);" ], [ "DESCRIPTION", "de.neemann.digital.core.switching", "SwitchDT", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(SwitchDT.class).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).addAttribute(Keys.POLES);" ], [ "DESCRIPTION", "de.neemann.digital.core.switching", "Relay", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Relay.class, input(\"in1\"), input(\"in2\")).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).addAttribute(Keys.POLES).addAttribute(Keys.RELAY_NORMALLY_CLOSED);" ], [ "DESCRIPTION", "de.neemann.digital.core.switching", "RelayDT", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(RelayDT.class, input(\"in1\"), input(\"in2\")).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).addAttribute(Keys.POLES);" ], [ "DESCRIPTION", "de.neemann.digital.core.switching", "Switch", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Switch.class).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).addAttribute(Keys.POLES).addAttribute(Keys.CLOSED).addAttribute(Keys.SWITCH_ACTS_AS_INPUT);" ], [ "DESCRIPTION", "de.neemann.digital.core.switching", "Fuse", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Fuse.class).addAttribute(Keys.ROTATE).addAttribute(Keys.BLOWN);" ], [ "DESCRIPTION", "de.neemann.digital.core.wiring", "Reset", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"Reset\", Reset.class).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.INVERT_OUTPUT).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.wiring", "Stop", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Stop.class, input(\"stop\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.INVERTER_CONFIG);" ], [ "DESCRIPTION", "de.neemann.digital.core.wiring", "Decoder", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Decoder.class, input(\"sel\")).addAttribute(Keys.ROTATE).addAttribute(Keys.SELECTOR_BITS).addAttribute(Keys.FLIP_SEL_POSITON).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.wiring", "Delay", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Delay.class, input(\"in\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.DELAY_TIME);" ], [ "DESCRIPTION", "de.neemann.digital.core.wiring", "Driver", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Driver.class, input(\"in\"), input(\"sel\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.FLIP_SEL_POSITON).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.wiring", "DriverInvSel", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(DriverInvSel.class, input(\"in\"), input(\"sel\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.FLIP_SEL_POSITON).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.wiring", "PriorityEncoder", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(PriorityEncoder.class) {\n\n    @Override\n    public PinDescriptions getInputDescription(ElementAttributes elementAttributes) {\n        int inputs = 1 << elementAttributes.get(Keys.SELECTOR_BITS);\n        PinDescription[] names = new PinDescription[inputs];\n        for (int i = 0; i < inputs; i++) names[i] = input(\"in\" + i, Lang.get(\"elem_PriorityEncoder_input\", i));\n        return new PinDescriptions(names);\n    }\n}.addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.SELECTOR_BITS).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.wiring", "BusSplitter", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(BusSplitter.class, input(\"OE\")).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.BITS).addAttribute(Keys.SPLITTER_SPREADING);" ], [ "DESCRIPTION", "de.neemann.digital.core.wiring", "Splitter", "public static final ElementTypeDescription DESCRIPTION = new SplitterTypeDescription().addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.INPUT_SPLIT).addAttribute(Keys.OUTPUT_SPLIT).addAttribute(Keys.SPLITTER_SPREADING).setShortName(\"\").supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.wiring", "Multiplexer", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Multiplexer.class) {\n\n    @Override\n    public PinDescriptions getInputDescription(ElementAttributes elementAttributes) {\n        int size = 1 << elementAttributes.get(Keys.SELECTOR_BITS);\n        PinDescription[] names = new PinDescription[size + 1];\n        names[0] = input(\"sel\", Lang.get(\"elem_Multiplexer_pin_sel\"));\n        for (int i = 0; i < size; i++) names[i + 1] = input(\"in_\" + i, Lang.get(\"elem_Multiplexer_input\", i));\n        return new PinDescriptions(names);\n    }\n}.addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.SELECTOR_BITS).addAttribute(Keys.FLIP_SEL_POSITON).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.wiring", "BitSelector", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(BitSelector.class, input(\"in\"), input(\"sel\")).addAttribute(Keys.ROTATE).addAttribute(Keys.SELECTOR_BITS).addAttribute(Keys.FLIP_SEL_POSITON).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.wiring", "Break", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Break.class, input(\"brk\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.ENABLED).addAttribute(Keys.CYCLES);" ], [ "DESCRIPTION", "de.neemann.digital.core.wiring", "Clock", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"Clock\", Clock.class).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.RUN_AT_REAL_TIME).addAttribute(Keys.FREQUENCY).addAttribute(Keys.PINNUMBER).addAttribute(Keys.IN_OUT_SMALL).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.wiring", "AsyncSeq", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(AsyncSeq.class).addAttribute(Keys.RUN_AT_REAL_TIME).addAttribute(Keys.FREQUENCY);" ], [ "DESCRIPTION", "de.neemann.digital.core.wiring", "Demultiplexer", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Demultiplexer.class, input(\"sel\"), input(\"in\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.SELECTOR_BITS).addAttribute(Keys.FLIP_SEL_POSITON).addAttribute(Keys.DEFAULT).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.flipflops", "FlipflopDAsync", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"D_FF_AS\", FlipflopDAsync.class, input(\"Set\"), input(\"D\"), input(\"C\").setClock(), input(\"Clr\")).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).addAttribute(Keys.DEFAULT).addAttribute(Keys.INVERTER_CONFIG).addAttribute(Keys.VALUE_IS_PROBE).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.flipflops", "FlipflopD", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"D_FF\", FlipflopD.class, input(\"D\"), input(\"C\").setClock()).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).addAttribute(Keys.DEFAULT).addAttribute(Keys.INVERTER_CONFIG).addAttribute(Keys.VALUE_IS_PROBE).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.flipflops", "FlipflopRSAsync", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"RS_FF_AS\", FlipflopRSAsync.class, input(\"S\"), input(\"R\")).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.LABEL).addAttribute(Keys.DEFAULT).addAttribute(Keys.INVERTER_CONFIG).addAttribute(Keys.VALUE_IS_PROBE);" ], [ "DESCRIPTION", "de.neemann.digital.core.flipflops", "FlipflopT", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"T_FF\", FlipflopT.class) {\n\n    @Override\n    public PinDescriptions getInputDescription(ElementAttributes elementAttributes) throws NodeException {\n        if (elementAttributes.get(Keys.WITH_ENABLE))\n            return new PinDescriptions(input(\"T\"), input(\"C\").setClock()).setLangKey(getPinLangKey());\n        else\n            return new PinDescriptions(input(\"C\").setClock()).setLangKey(getPinLangKey());\n    }\n}.addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.LABEL).addAttribute(Keys.WITH_ENABLE).addAttribute(Keys.DEFAULT).addAttribute(Keys.INVERTER_CONFIG).addAttribute(Keys.VALUE_IS_PROBE);" ], [ "DESCRIPTION", "de.neemann.digital.core.flipflops", "FlipflopJKAsync", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"JK_FF_AS\", FlipflopJKAsync.class, input(\"Set\"), input(\"J\"), input(\"C\").setClock(), input(\"K\"), input(\"Clr\")).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.LABEL).addAttribute(Keys.DEFAULT).addAttribute(Keys.INVERTER_CONFIG).addAttribute(Keys.VALUE_IS_PROBE).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.flipflops", "FlipflopJK", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"JK_FF\", FlipflopJK.class, input(\"J\"), input(\"C\").setClock(), input(\"K\")).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.LABEL).addAttribute(Keys.DEFAULT).addAttribute(Keys.INVERTER_CONFIG).addAttribute(Keys.VALUE_IS_PROBE).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.flipflops", "Monoflop", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Monoflop.class, input(\"C\").setClock(), input(\"R\")).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.LABEL).addAttribute(Keys.DEFAULT).addAttribute(Keys.MONOFLOP_DELAY).addAttribute(Keys.INVERTER_CONFIG).addAttribute(Keys.VALUE_IS_PROBE);" ], [ "DESCRIPTION", "de.neemann.digital.core.flipflops", "FlipflopRS", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"RS_FF\", FlipflopRS.class, input(\"S\"), input(\"C\").setClock(), input(\"R\")).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.LABEL).addAttribute(Keys.DEFAULT).addAttribute(Keys.INVERTER_CONFIG).addAttribute(Keys.VALUE_IS_PROBE);" ], [ "DESCRIPTION", "de.neemann.digital.core.arithmetic", "BarrelShifter", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(BarrelShifter.class, input(\"in\"), input(\"shift\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.BITS).addAttribute(Keys.BARREL_SIGNED).addAttribute(Keys.DIRECTION).addAttribute(Keys.BARREL_SHIFTER_MODE);" ], [ "DESCRIPTION", "de.neemann.digital.core.arithmetic", "Mul", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Mul.class, input(\"a\"), input(\"b\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.SIGNED).addAttribute(Keys.BITS).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.arithmetic", "Neg", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Neg.class, input(\"in\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.arithmetic", "BitExtender", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(BitExtender.class, input(\"in\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.INPUT_BITS).addAttribute(Keys.OUTPUT_BITS).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.arithmetic", "Add", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Add.class, input(\"a\"), input(\"b\"), input(\"c_i\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.BITS).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.arithmetic", "Div", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Div.class, input(\"a\"), input(\"b\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.BITS).addAttribute(Keys.SIGNED).addAttribute(Keys.REMAINDER_POSITIVE);" ], [ "DESCRIPTION", "de.neemann.digital.core.arithmetic", "PRNG", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(PRNG.class, input(\"S\"), input(\"se\"), input(\"ne\"), input(\"C\").setClock()).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.LABEL);" ], [ "DESCRIPTION", "de.neemann.digital.core.arithmetic", "Sub", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Sub.class, input(\"a\"), input(\"b\"), input(\"c_i\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.BITS).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.arithmetic", "Comparator", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Comparator.class, input(\"a\"), input(\"b\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.BITS).addAttribute(Keys.SIGNED).setShortName(\"\").supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.arithmetic", "BitCount", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(BitCount.class, input(\"in\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS);" ], [ "EMPTY_LIST", "de.neemann.digital.core", "ObservableValues", "public static final ObservableValues EMPTY_LIST = new ObservableValues();" ], [ "DEFAULT_FORMATTER", "de.neemann.digital.core", "IntFormat", "public static final ValueFormatter DEFAULT_FORMATTER = ValueFormatterDefault.INSTANCE;" ], [ "HEX_FORMATTER", "de.neemann.digital.core", "IntFormat", "public static final ValueFormatter HEX_FORMATTER = ValueFormatterHex.INSTANCE;" ], [ "DESCRIPTION", "de.neemann.digital.core.extern", "External", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(External.class) {\n\n    @Override\n    public PinDescriptions getInputDescription(ElementAttributes elementAttributes) {\n        return new PortDefinition(elementAttributes.get(Keys.EXTERNAL_INPUTS)).getPinDescriptions(PinDescription.Direction.input);\n    }\n\n    @Override\n    public PinDescriptions getOutputDescriptions(ElementAttributes elementAttributes) {\n        return new PortDefinition(elementAttributes.get(Keys.EXTERNAL_OUTPUTS)).getPinDescriptions(PinDescription.Direction.output);\n    }\n}.addAttribute(Keys.LABEL).addAttribute(Keys.WIDTH).addAttribute(Keys.EXTERNAL_INPUTS).addAttribute(Keys.EXTERNAL_OUTPUTS).addAttribute(Keys.EXTERNAL_CODE).addAttribute(Keys.APPLICATION_TYPE).addAttribute(Keys.GHDL_OPTIONS).addAttribute(Keys.IVERILOG_OPTIONS).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.extern", "ExternalFile", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(ExternalFile.class) {\n\n    @Override\n    public PinDescriptions getInputDescription(ElementAttributes elementAttributes) {\n        return new PortDefinition(elementAttributes.get(Keys.EXTERNAL_INPUTS)).getPinDescriptions(PinDescription.Direction.input);\n    }\n\n    @Override\n    public PinDescriptions getOutputDescriptions(ElementAttributes elementAttributes) {\n        return new PortDefinition(elementAttributes.get(Keys.EXTERNAL_OUTPUTS)).getPinDescriptions(PinDescription.Direction.output);\n    }\n}.addAttribute(Keys.LABEL).addAttribute(Keys.WIDTH).addAttribute(Keys.EXTERNAL_INPUTS).addAttribute(Keys.EXTERNAL_OUTPUTS).addAttribute(Keys.EXTERNAL_CODE_FILE).addAttribute(Keys.APPLICATION_TYPE).addAttribute(Keys.GHDL_OPTIONS).addAttribute(Keys.IVERILOG_OPTIONS).supportsHDL();" ], [ "DEFAULT_RAD", "de.neemann.digital.fsm", "State", "static final int DEFAULT_RAD = 70;" ], [ "INSTANCE", "de.neemann.digital.lang", "Lang", "static final Lang INSTANCE = new Lang();" ], [ "INSTANCE", "de.neemann.digital.lang", "InstanceHolder", "static final Lang INSTANCE = new Lang();" ], [ "DESCRIPTION", "de.neemann.digital.testing", "TestCaseElement", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"Testcase\", TestCaseElement.class).addAttribute(Keys.LABEL).addAttribute(Keys.TESTDATA).addAttribute(Keys.ENABLED).supportsHDL();" ], [ "STATENAMES", "de.neemann.digital.analyse", "TruthTableTableModel", "public static final String[] STATENAMES = new String[] { \"0\", \"1\", \"x\" };" ], [ "ONE", "de.neemann.digital.analyse.expression", "Constant", "public static final Constant ONE = new Constant(true);" ], [ "ZERO", "de.neemann.digital.analyse.expression", "Constant", "public static final Constant ZERO = new Constant(false);" ], [ "PRIMARY", "de.neemann.digital.gui.components", "EditorPanel", "public static final String PRIMARY = \"primary\";" ], [ "SECONDARY", "de.neemann.digital.gui.components", "EditorPanel", "public static final String SECONDARY = \"secondary\";" ], [ "INSTANCE", "de.neemann.digital.gui.components", "EditorFactory", "static final EditorFactory INSTANCE = new EditorFactory();" ], [ "MAX_TERMINAL_STORED", "de.neemann.digital.gui.components.terminal", "ConsoleTerminal", "public static final int MAX_TERMINAL_STORED = 2048;" ], [ "DESCRIPTION", "de.neemann.digital.gui.components.terminal", "Terminal", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Terminal.class, input(\"D\"), input(\"C\").setClock(), input(\"en\")).addAttribute(Keys.TERM_WIDTH).addAttribute(Keys.TERM_HEIGHT).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL);" ], [ "DESCRIPTION", "de.neemann.digital.gui.components.terminal", "Keyboard", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Keyboard.class, input(\"C\").setClock(), input(\"en\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.INVERTER_CONFIG);" ], [ "FAILED_COLOR", "de.neemann.digital.gui.components.testing", "ValueTableDialog", "static final Color FAILED_COLOR = new Color(255, 200, 200);" ], [ "PASSED_COLOR", "de.neemann.digital.gui.components.testing", "ValueTableDialog", "static final Color PASSED_COLOR = new Color(200, 255, 200);" ], [ "ICON_DELETE", "de.neemann.digital.gui.components", "CircuitComponent", "public static final Icon ICON_DELETE = IconCreator.create(\"delete.png\");" ], [ "ICON_COPY", "de.neemann.digital.gui.components", "CircuitComponent", "public static final Icon ICON_COPY = IconCreator.create(\"edit-copy.png\");" ], [ "DESCRIPTION", "de.neemann.digital.gui.components.graphics", "VGA", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(VGA.class, input(\"R\"), input(\"G\"), input(\"B\"), input(\"H\"), input(\"V\"), input(\"C\").setClock()).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL);" ], [ "DESCRIPTION", "de.neemann.digital.gui.components.graphics", "GraphicCard", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(GraphicCard.class, input(\"A\"), input(\"str\"), input(\"C\").setClock(), input(\"ld\"), input(\"B\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).addAttribute(Keys.GRAPHIC_WIDTH).addAttribute(Keys.GRAPHIC_HEIGHT);" ], [ "DESCRIPTION", "de.neemann.digital.gui.components.graphics", "LedMatrix", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(LedMatrix.class, input(\"r-data\"), input(\"c-addr\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.ROW_DATA_BITS).addAttribute(Keys.COL_ADDR_BITS).addAttribute(Keys.COLOR).addAttribute(Keys.LED_PERSISTENCE);" ], [ "DESCRIPTION", "de.neemann.digital.gui.components.data", "ScopeTrigger", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(ScopeTrigger.class, input(\"T\").setClock()).addAttribute(Keys.LABEL).addAttribute(Keys.TRIGGER).addAttribute(Keys.MAX_STEP_COUNT);" ], [ "DATADESCRIPTION", "de.neemann.digital.gui.components.data", "DummyElement", "public static final ElementTypeDescription DATADESCRIPTION = new ElementTypeDescription(\"Data\", DummyElement.class).addAttribute(Keys.MICRO_STEP).addAttribute(Keys.MAX_STEP_COUNT).addAttribute(Keys.SNAP_TO_GRID);" ], [ "TEXTDESCRIPTION", "de.neemann.digital.gui.components.data", "DummyElement", "public static final ElementTypeDescription TEXTDESCRIPTION = new ElementTypeDescription(\"Text\", DummyElement.class).addAttribute(Keys.DESCRIPTION).addAttribute(Keys.ROTATE).addAttribute(Keys.TEXT_ORIENTATION).addAttribute(Keys.FONT_SIZE).addAttribute(Keys.SNAP_TO_GRID);" ], [ "RECTDESCRIPTION", "de.neemann.digital.gui.components.data", "DummyElement", "public static final ElementTypeDescription RECTDESCRIPTION = new ElementTypeDescription(\"Rectangle\", DummyElement.class).addAttribute(Keys.LABEL).addAttribute(Keys.RECT_WIDTH).addAttribute(Keys.RECT_HEIGHT).addAttribute(Keys.RECT_INSIDE).addAttribute(Keys.RECT_BOTTOM).addAttribute(Keys.RECT_RIGHT).addAttribute(Keys.FONT_SIZE).addAttribute(Keys.SNAP_TO_GRID);" ], [ "LEFT", "de.neemann.digital.gui.components", "TextLineNumber", "public final static float LEFT = 0.0f;" ], [ "CENTER", "de.neemann.digital.gui.components", "TextLineNumber", "public final static float CENTER = 0.5f;" ], [ "RIGHT", "de.neemann.digital.gui.components", "TextLineNumber", "public final static float RIGHT = 1.0f;" ], [ "INSTANCE", "de.neemann.digital.gui", "Settings", "static final Settings INSTANCE = new Settings();" ], [ "INSTANCE", "de.neemann.digital.gui", "SettingsHolder", "static final Settings INSTANCE = new Settings();" ], [ "BASE_FILE_KEY", "de.neemann.digital.hdl.hgs", "Context", "public static final String BASE_FILE_KEY = \"baseFile\";" ], [ "DESCRIPTION", "de.neemann.digital.draw.library", "GenericCode", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(GenericCode.class).addAttribute(Keys.GENERICLARGE).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.draw.library", "GenericInitCode", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(GenericInitCode.class).addAttribute(Keys.LABEL).addAttribute(Keys.ENABLED).addAttribute(Keys.GENERIC).supportsHDL();" ], [ "GEN_ARGS_KEY", "de.neemann.digital.draw.library", "ResolveGenerics", "public static final String GEN_ARGS_KEY = \"genArgs\";" ], [ "HEIGHT", "de.neemann.digital.draw.shapes", "ButtonShape", "protected static final int HEIGHT = OUT_SIZE / 2;" ], [ "SIZE2", "de.neemann.digital.draw.shapes", "GenericShape", "public static final int SIZE2 = 10;" ], [ "SIZE", "de.neemann.digital.draw.shapes", "GenericShape", "public static final int SIZE = SIZE2 * 2;" ], [ "CIRC", "de.neemann.digital.draw.shapes", "DILShape", "static final float CIRC = (float) (4 * (Math.sqrt(2) - 1) / 3);" ], [ "DOWNSHIFT", "de.neemann.digital.draw.shapes", "VDDShape", "static final int DOWNSHIFT = 4;" ], [ "CHARGED_GATE", "de.neemann.digital.draw.shapes", "FGFETShapeN", "static final Style CHARGED_GATE = Style.NORMAL.deriveStyle(6, false, Color.RED);" ], [ "OUT_SIZE", "de.neemann.digital.draw.shapes", "OutputShape", "public static final int OUT_SIZE = GenericShape.SIZE * 3 / 4;" ], [ "LATEX_RAD", "de.neemann.digital.draw.shapes", "OutputShape", "static final Vector LATEX_RAD = new Vector(Style.MAXLINETHICK, Style.MAXLINETHICK);" ], [ "WIDTH2", "de.neemann.digital.draw.shapes", "PullDownShape", "public static final int WIDTH2 = SIZE2 - 3;" ], [ "HEIGHT", "de.neemann.digital.draw.shapes", "PullDownShape", "public static final int HEIGHT = SIZE + SIZE / 3;" ], [ "HEIGHT", "de.neemann.digital.draw.shapes", "SevenShape", "static final int HEIGHT = 7;" ], [ "FRAME", "de.neemann.digital.draw.shapes", "SevenShape", "public static final Polygon FRAME = Polygon.createFromPath(\"m -10,1 L 70,1 70,139 -10,139 z\");" ], [ "DESCRIPTION", "de.neemann.digital.draw.elements", "Tunnel", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Tunnel.class, input(\"in\")).addAttribute(Keys.ROTATE).addAttribute(Keys.NETNAME).supportsHDL();" ], [ "HIGH_CONTRAST", "de.neemann.digital.draw.graphics", "SVGSettings", "static final Key<Boolean> HIGH_CONTRAST = new Key<>(\"SVG_highContrast\", false);" ], [ "MONOCHROME", "de.neemann.digital.draw.graphics", "SVGSettings", "static final Key<Boolean> MONOCHROME = new Key<>(\"SVG_monochrome\", false);" ], [ "SMALL_IO", "de.neemann.digital.draw.graphics", "SVGSettings", "static final Key<Boolean> SMALL_IO = new Key<>(\"SVG_smallIO\", false);" ], [ "NO_PIN_MARKER", "de.neemann.digital.draw.graphics", "SVGSettings", "static final Key<Boolean> NO_PIN_MARKER = new Key<>(\"SVG_noPinMarker\", false);" ], [ "THINNER_LINES", "de.neemann.digital.draw.graphics", "SVGSettings", "static final Key<Boolean> THINNER_LINES = new Key<>(\"SVG_thinnerLines\", false);" ], [ "HIDE_TEST", "de.neemann.digital.draw.graphics", "SVGSettings", "static final Key<Boolean> HIDE_TEST = new Key<>(\"SVG_hideTest\", false);" ], [ "NO_SHAPE_FILLING", "de.neemann.digital.draw.graphics", "SVGSettings", "static final Key<Boolean> NO_SHAPE_FILLING = new Key<>(\"SVG_noShapeFilling\", false);" ], [ "LATEX", "de.neemann.digital.draw.graphics", "SVGSettings", "static final Key<Boolean> LATEX = new Key<>(\"SVG_LaTeX\", false);" ], [ "PINS_IN_MATH_MODE", "de.neemann.digital.draw.graphics", "SVGSettings", "static final Key<Boolean> PINS_IN_MATH_MODE = new Key<>(\"SVG_pinsInMathMode\", false).setDependsOn(LATEX);" ], [ "INSTANCE", "de.neemann.digital.draw.graphics", "SVGSettings", "static final SVGSettings INSTANCE = new SVGSettings();" ], [ "INSTANCE", "de.neemann.digital.draw.graphics", "SettingsHolder", "static final SVGSettings INSTANCE = new SVGSettings();" ], [ "COLOR_SCHEME", "de.neemann.digital.draw.graphics", "ColorScheme", "public static final Key<ColorSchemes> COLOR_SCHEME = new Key.KeyEnum<>(\"colorScheme\", ColorSchemes.DEFAULT, ColorSchemes.values()).setRequiresRepaint();" ], [ "CUSTOM_COLOR_SCHEME", "de.neemann.digital.draw.graphics", "ColorScheme", "public static final Key<ColorScheme> CUSTOM_COLOR_SCHEME = new Key<>(\"customColorScheme\", DEFAULT_SCHEME).setDependsOn(COLOR_SCHEME, o -> o.equals(ColorSchemes.CUSTOM)).setRequiresRepaint();" ], [ "MAXLINETHICK", "de.neemann.digital.draw.graphics", "Style", "public static final int MAXLINETHICK = 4;" ], [ "NORMAL", "de.neemann.digital.draw.graphics", "Style", "public static final Style NORMAL = new Builder().build();" ], [ "DISABLED", "de.neemann.digital.draw.graphics", "Style", "public static final Style DISABLED = new Builder().setColor(ColorKey.DISABLED).build();" ], [ "INOUT", "de.neemann.digital.draw.graphics", "Style", "public static final Style INOUT = new Builder(NORMAL).setFontStyle(Font.ITALIC).build();" ], [ "FAILED", "de.neemann.digital.draw.graphics", "Style", "public static final Style FAILED = new Builder(NORMAL).setColor(ColorKey.ERROR).build();" ], [ "PASS", "de.neemann.digital.draw.graphics", "Style", "public static final Style PASS = new Builder(NORMAL).setColor(ColorKey.PASSED).build();" ], [ "NORMAL_TEXT", "de.neemann.digital.draw.graphics", "Style", "public static final Style NORMAL_TEXT = new Builder(NORMAL).setMattersForSize(true).build();" ], [ "THIN", "de.neemann.digital.draw.graphics", "Style", "public static final Style THIN = new Builder(NORMAL).setThickness(LINETHIN).build();" ], [ "THIN_FILLED", "de.neemann.digital.draw.graphics", "Style", "public static final Style THIN_FILLED = new Builder(NORMAL).setThickness(LINETHIN).setFilled(true).build();" ], [ "THICK", "de.neemann.digital.draw.graphics", "Style", "public static final Style THICK = new Builder(NORMAL).setThickness(LINETHICK + LINETHIN).build();" ], [ "WIRE", "de.neemann.digital.draw.graphics", "Style", "public static final Style WIRE = new Builder().setThickness(WIRETHICK).setFilled(true).setColor(ColorKey.WIRE).setEndCap(BasicStroke.CAP_ROUND).build();" ], [ "WIRE_LOW", "de.neemann.digital.draw.graphics", "Style", "public static final Style WIRE_LOW = new Builder(WIRE).setColor(ColorKey.WIRE_LOW).build();" ], [ "WIRE_HIGH", "de.neemann.digital.draw.graphics", "Style", "public static final Style WIRE_HIGH = new Builder(WIRE).setColor(ColorKey.WIRE_HIGH).build();" ], [ "WIRE_HIGHZ", "de.neemann.digital.draw.graphics", "Style", "public static final Style WIRE_HIGHZ = new Builder(WIRE).setColor(ColorKey.WIRE_Z).build();" ], [ "WIRE_OUT", "de.neemann.digital.draw.graphics", "Style", "public static final Style WIRE_OUT = new Builder(WIRE).setColor(ColorKey.WIRE_OUT).build();" ], [ "FILLED", "de.neemann.digital.draw.graphics", "Style", "public static final Style FILLED = new Builder().setFilled(true).build();" ], [ "DASH", "de.neemann.digital.draw.graphics", "Style", "public static final Style DASH = new Builder().setThickness(LINEDASH).setDash(new float[] { 4, 4 }).build();" ], [ "SHAPE_PIN", "de.neemann.digital.draw.graphics", "Style", "public static final Style SHAPE_PIN = new Builder().setThickness(LINETHIN).setColor(ColorKey.PINS).setFontSize(18).build();" ], [ "SHAPE_SPLITTER", "de.neemann.digital.draw.graphics", "Style", "public static final Style SHAPE_SPLITTER = new Builder(SHAPE_PIN).setFontSize(12).build();" ], [ "WIRE_VALUE", "de.neemann.digital.draw.graphics", "Style", "public static final Style WIRE_VALUE = new Builder(SHAPE_SPLITTER).setColor(ColorKey.WIRE_VALUE).build();" ], [ "WIRE_BITS", "de.neemann.digital.draw.graphics", "Style", "public static final Style WIRE_BITS = new Builder(SHAPE_SPLITTER).setColor(ColorKey.WIRE).build();" ], [ "HIGHLIGHT", "de.neemann.digital.draw.graphics", "Style", "public static final Style HIGHLIGHT = new Builder(NORMAL).setColor(ColorKey.HIGHLIGHT).setEndCap(BasicStroke.CAP_ROUND).build();" ], [ "ERROR", "de.neemann.digital.draw.graphics", "Style", "public static final Style ERROR = new Builder(NORMAL).setColor(ColorKey.ERROR).setEndCap(BasicStroke.CAP_ROUND).build();" ], [ "BLANK", "de.neemann.digital.draw.graphics.text.text", "Blank", "public static final Blank BLANK = new Blank();" ], [ "LOOK_AT_ALIAS", "de.neemann.digital.toolchain", "Configuration", "static final String LOOK_AT_ALIAS = \"lookAt\";" ], [ "REF_ALIAS", "de.neemann.digital.toolchain", "Configuration", "static final String REF_ALIAS = \"ref\";" ] ],
  "tokensMethodJavadocValues" : [ ],
  "tokensMethodArguments" : [ [ "name", "java.lang", "String" ], [ "expression", "de.neemann.digital.analyse.expression", "Expression" ] ],
  "tokensMethodVariablesNonPrivateNonStaticNonVoidMethods" : [ [ "getOutputs", "de.neemann.digital.builder.Gal16v8", "BuilderCollectorGAL", "public ArrayList<String> getOutputs()" ], [ "getClass", "java.lang", "Object", "public final native Class<? extends Object> getClass()" ], [ "equals", "java.lang", "Object", "public boolean equals(Object arg0)" ], [ "addCombinatorial", "de.neemann.digital.builder", "BuilderInterface", "public abstract T addCombinatorial(String arg0, Expression arg1) throws BuilderException" ], [ "addSequential", "de.neemann.digital.builder.Gal16v8", "BuilderCollectorGAL", "public BuilderCollector addSequential(String name, Expression expression) throws BuilderException" ], [ "addCombinatorial", "de.neemann.digital.builder.Gal16v8", "BuilderCollectorGAL", "public BuilderCollector addCombinatorial(String name, Expression expression) throws BuilderException" ], [ "hashCode", "java.lang", "Object", "public native int hashCode()" ], [ "clone", "java.lang", "Object", "protected native Object clone() throws CloneNotSupportedException" ], [ "getRegistered", "de.neemann.digital.builder.Gal16v8", "BuilderCollectorGAL", "public Map<String, Expression> getRegistered()" ], [ "addSequential", "de.neemann.digital.builder", "BuilderInterface", "public abstract T addSequential(String arg0, Expression arg1) throws BuilderException" ], [ "getCombinatorial", "de.neemann.digital.builder.Gal16v8", "BuilderCollectorGAL", "public Map<String, Expression> getCombinatorial()" ], [ "getInputs", "de.neemann.digital.builder.Gal16v8", "BuilderCollectorGAL", "public ArrayList<String> getInputs()" ], [ "toString", "java.lang", "Object", "public String toString()" ], [ "stripLeading", "java.lang", "String", "public String stripLeading()" ], [ "formatted", "java.lang", "String", "public String formatted(Object[] arg0)" ], [ "toCharArray", "java.lang", "String", "public char[] toCharArray()" ], [ "compareToIgnoreCase", "java.lang", "String", "public int compareToIgnoreCase(String arg0)" ], [ "indexOf", "java.lang", "String", "public int indexOf(int arg0, int arg1)" ], [ "strip", "java.lang", "String", "public String strip()" ], [ "substring", "java.lang", "String", "public String substring(int arg0)" ], [ "contains", "java.lang", "String", "public boolean contains(CharSequence arg0)" ], [ "toString", "java.lang", "String", "public String toString()" ], [ "replaceFirst", "java.lang", "String", "public String replaceFirst(String arg0, String arg1)" ], [ "replaceAll", "java.lang", "String", "public String replaceAll(String arg0, String arg1)" ], [ "split", "java.lang", "String", "public String[] split(String arg0)" ], [ "indexOf", "java.lang", "String", "public int indexOf(String arg0, int arg1)" ], [ "offsetByCodePoints", "java.lang", "String", "public int offsetByCodePoints(int arg0, int arg1)" ], [ "getBytes", "java.lang", "String", "public byte[] getBytes(String arg0) throws UnsupportedEncodingException" ], [ "concat", "java.lang", "String", "public String concat(String arg0)" ], [ "lastIndexOf", "java.lang", "String", "public int lastIndexOf(int arg0)" ], [ "indent", "java.lang", "String", "public String indent(int arg0)" ], [ "chars", "java.lang", "String", "public IntStream chars()" ], [ "length", "java.lang", "String", "public int length()" ], [ "regionMatches", "java.lang", "String", "public boolean regionMatches(int arg0, String arg1, int arg2, int arg3)" ], [ "codePointAt", "java.lang", "String", "public int codePointAt(int arg0)" ], [ "subSequence", "java.lang", "String", "public CharSequence subSequence(int arg0, int arg1)" ], [ "value", "java.lang", "String", "byte[] value()" ], [ "codePointCount", "java.lang", "String", "public int codePointCount(int arg0, int arg1)" ], [ "getBytes", "java.lang", "String", "public byte[] getBytes(Charset arg0)" ], [ "lastIndexOf", "java.lang", "String", "public int lastIndexOf(String arg0, int arg1)" ], [ "matches", "java.lang", "String", "public boolean matches(String arg0)" ], [ "intern", "java.lang", "String", "public native String intern()" ], [ "getBytes", "java.lang", "String", "public byte[] getBytes()" ], [ "toUpperCase", "java.lang", "String", "public String toUpperCase(Locale arg0)" ], [ "endsWith", "java.lang", "String", "public boolean endsWith(String arg0)" ], [ "hashCode", "java.lang", "String", "public int hashCode()" ], [ "stripTrailing", "java.lang", "String", "public String stripTrailing()" ], [ "transform", "java.lang", "String", "public <R> R transform(Function<? super String, ? extends R> arg0)" ], [ "coder", "java.lang", "String", "byte coder()" ], [ "split", "java.lang", "String", "public String[] split(String arg0, int arg1)" ], [ "toLowerCase", "java.lang", "String", "public String toLowerCase()" ], [ "lastIndexOf", "java.lang", "String", "public int lastIndexOf(String arg0)" ], [ "lines", "java.lang", "String", "public Stream<String> lines()" ], [ "substring", "java.lang", "String", "public String substring(int arg0, int arg1)" ], [ "compareTo", "java.lang", "String", "public int compareTo(String arg0)" ], [ "indexOf", "java.lang", "String", "public int indexOf(String arg0)" ], [ "contentEquals", "java.lang", "String", "public boolean contentEquals(CharSequence arg0)" ], [ "isBlank", "java.lang", "String", "public boolean isBlank()" ], [ "codePointBefore", "java.lang", "String", "public int codePointBefore(int arg0)" ], [ "regionMatches", "java.lang", "String", "public boolean regionMatches(boolean arg0, int arg1, String arg2, int arg3, int arg4)" ], [ "stripIndent", "java.lang", "String", "public String stripIndent()" ], [ "replace", "java.lang", "String", "public String replace(CharSequence arg0, CharSequence arg1)" ], [ "indexOf", "java.lang", "String", "public int indexOf(int arg0)" ], [ "contentEquals", "java.lang", "String", "public boolean contentEquals(StringBuffer arg0)" ], [ "toLowerCase", "java.lang", "String", "public String toLowerCase(Locale arg0)" ], [ "translateEscapes", "java.lang", "String", "public String translateEscapes()" ], [ "startsWith", "java.lang", "String", "public boolean startsWith(String arg0, int arg1)" ], [ "startsWith", "java.lang", "String", "public boolean startsWith(String arg0)" ], [ "charAt", "java.lang", "String", "public char charAt(int arg0)" ], [ "isLatin1", "java.lang", "String", "boolean isLatin1()" ], [ "isEmpty", "java.lang", "String", "public boolean isEmpty()" ], [ "trim", "java.lang", "String", "public String trim()" ], [ "describeConstable", "java.lang", "String", "public Optional<String> describeConstable()" ], [ "toUpperCase", "java.lang", "String", "public String toUpperCase()" ], [ "resolveConstantDesc", "java.lang", "String", "public String resolveConstantDesc(MethodHandles.Lookup arg0)" ], [ "equals", "java.lang", "String", "public boolean equals(Object arg0)" ], [ "equalsIgnoreCase", "java.lang", "String", "public boolean equalsIgnoreCase(String arg0)" ], [ "replace", "java.lang", "String", "public String replace(char arg0, char arg1)" ], [ "codePoints", "java.lang", "String", "public IntStream codePoints()" ], [ "lastIndexOf", "java.lang", "String", "public int lastIndexOf(int arg0, int arg1)" ], [ "repeat", "java.lang", "String", "public String repeat(int arg0)" ], [ "compareTo", "java.lang", "Comparable", "public abstract int compareTo(T arg0)" ], [ "charAt", "java.lang", "CharSequence", "public abstract char charAt(int arg0)" ], [ "subSequence", "java.lang", "CharSequence", "public abstract CharSequence subSequence(int arg0, int arg1)" ], [ "length", "java.lang", "CharSequence", "public abstract int length()" ], [ "isEmpty", "java.lang", "CharSequence", "public default boolean isEmpty()" ], [ "codePoints", "java.lang", "CharSequence", "public default IntStream codePoints()" ], [ "toString", "java.lang", "CharSequence", "public abstract String toString()" ], [ "chars", "java.lang", "CharSequence", "public default IntStream chars()" ], [ "describeConstable", "java.lang.constant", "Constable", "public abstract Optional<? extends ConstantDesc> describeConstable()" ], [ "resolveConstantDesc", "java.lang.constant", "ConstantDesc", "public abstract Object resolveConstantDesc(MethodHandles.Lookup arg0) throws ReflectiveOperationException" ], [ "traverse", "de.neemann.digital.analyse.expression", "Expression", "public abstract <V> V traverse(V arg0)" ], [ "getOrderString", "de.neemann.digital.analyse.expression", "Expression", "public abstract String getOrderString()" ], [ "calculate", "de.neemann.digital.analyse.expression", "Expression", "public abstract boolean calculate(Context arg0) throws ExpressionException" ], [ "copy", "de.neemann.digital.analyse.expression", "Expression", "public abstract Expression copy()" ], [ "addSequential", "de.neemann.digital.builder", "BuilderCollector", "public BuilderCollector addSequential(String arg0, Expression arg1) throws BuilderException" ], [ "getOutputs", "de.neemann.digital.builder", "BuilderCollector", "public ArrayList<String> getOutputs()" ], [ "getInputs", "de.neemann.digital.builder", "BuilderCollector", "public ArrayList<String> getInputs()" ], [ "addCombinatorial", "de.neemann.digital.builder", "BuilderCollector", "public BuilderCollector addCombinatorial(String arg0, Expression arg1) throws BuilderException" ], [ "getCombinatorial", "de.neemann.digital.builder", "BuilderCollector", "public Map<String, Expression> getCombinatorial()" ], [ "getRegistered", "de.neemann.digital.builder", "BuilderCollector", "public Map<String, Expression> getRegistered()" ] ],
  "tokensMethodVariablesNonPrivateNonStaticAttributes" : [ ],
  "tokensOracleVariablesNonPrivateNonStaticNonVoidMethods" : [ ],
  "tokensOracleVariablesNonPrivateNonStaticAttributes" : [ ]
}, {
  "id" : 26713,
  "oracle" : "name != null;",
  "oracleType" : "PRE",
  "projectName" : "Digital",
  "packageName" : "de.neemann.digital.builder.Gal16v8",
  "className" : "BuilderCollectorGAL",
  "javadocTag" : "",
  "methodJavadoc" : "",
  "methodSourceCode" : "public BuilderCollector addCombinatorial(String name, Expression expression) throws BuilderException{\n    checkOpen();\n    return super.addCombinatorial(name, expression);\n}",
  "classJavadoc" : "/**\n * Used to avoid a double cell allocation if the output of a ff is used as a autput of the state machine.\n * This is the case if a Moore machine is build where the state equals the output.\n * Sometimes this kind of state machines is called a Medwedew machine.\n */",
  "classSourceCode" : "/*\n * Copyright (c) 2019 Helmut Neemann.\n * Use of this source code is governed by the GPL v3 license\n * that can be found in the LICENSE file.\n */\npackage de.neemann.digital.builder.Gal16v8;\n\nimport de.neemann.digital.analyse.expression.Expression;\nimport de.neemann.digital.builder.BuilderCollector;\nimport de.neemann.digital.builder.BuilderException;\nimport de.neemann.digital.builder.PinMap;\n\nimport java.util.ArrayList;\nimport java.util.HashSet;\nimport java.util.Map;\n\n/**\n * Used to avoid a double cell allocation if the output of a ff is used as a autput of the state machine.\n * This is the case if a Moore machine is build where the state equals the output.\n * Sometimes this kind of state machines is called a Medwedew machine.\n */\npublic class BuilderCollectorGAL extends BuilderCollector {\n    private final PinMap pinMap;\n    private HashSet<String> sequentialVars;\n    private boolean doubleCellUsageFixed = false;\n\n    /**\n     * Creates a new instance\n     *\n     * @param pinMap the used pinMap. Is required to handle aliases correctly\n     */\n    public BuilderCollectorGAL(PinMap pinMap) {\n        this.pinMap = pinMap;\n        sequentialVars = new HashSet<>();\n    }\n\n    @Override\n    public BuilderCollector addCombinatorial(String name, Expression expression) throws BuilderException {\n        checkOpen();\n        return super.addCombinatorial(name, expression);\n    }\n\n    @Override\n    public BuilderCollector addSequential(String name, Expression expression) throws BuilderException {\n        checkOpen();\n        sequentialVars.add(name);\n        return super.addSequential(name, expression);\n    }\n\n    private void checkOpen() {\n        if (doubleCellUsageFixed)\n            throw new RuntimeException(\"wrong BuilderCollectorGAL usage!\");\n    }\n\n    private void fixDoubleCellUsage() {\n        if (!doubleCellUsageFixed) {\n\n            super.getCombinatorial().entrySet().removeIf(c -> {\n                if (pinMap.isSimpleAlias(c.getKey(), c.getValue(), sequentialVars)) {\n                    removeOutput(c.getKey());\n                    return true;\n                }\n                return false;\n            });\n\n            doubleCellUsageFixed = true;\n        }\n    }\n\n    @Override\n    public ArrayList<String> getOutputs() {\n        fixDoubleCellUsage();\n        return super.getOutputs();\n    }\n\n    @Override\n    public ArrayList<String> getInputs() {\n        fixDoubleCellUsage();\n        return super.getInputs();\n    }\n\n    @Override\n    public Map<String, Expression> getCombinatorial() {\n        fixDoubleCellUsage();\n        return super.getCombinatorial();\n    }\n\n    @Override\n    public Map<String, Expression> getRegistered() {\n        fixDoubleCellUsage();\n        return super.getRegistered();\n    }\n}\n",
  "tokensGeneralGrammar" : [ "null", "true", "false", ",", ".", ":", ";", "?", "(", ")", "jdVar", "stream", "Arrays", "allMatch", "noneMatch", "anyMatch", "~", ">>", "<<", ">>>", "|", "&", "^", "+", "-", "/", "*", "%", "&&", "||", ">=", "<=", ">", "<", "==", "!=", "instanceof", "class", "methodResultID", "this" ],
  "tokensGeneralValuesGlobalDictionary" : [ [ "0", "int" ], [ "1", "int" ], [ "-1", "int" ], [ "0.0", "double" ], [ "1.0", "double" ], [ "-1.0", "double" ], [ "\"\"", "String" ], [ "\" \"", "String" ] ],
  "tokensProjectClasses" : [ [ "CLI", "de.neemann" ], [ "Mouse", "de.neemann.gui" ], [ "LineBreaker", "de.neemann.gui" ], [ "IconCreator", "de.neemann.gui" ], [ "ConfirmDialogBuilder", "de.neemann.gui" ], [ "Resources", "de.neemann.gui.language" ], [ "Bundle", "de.neemann.gui.language" ], [ "Language", "de.neemann.gui.language" ], [ "ToolTipAction", "de.neemann.gui" ], [ "MyFileChooser", "de.neemann.gui" ], [ "ClosingWindowListener", "de.neemann.gui" ], [ "ErrorMessage", "de.neemann.gui" ], [ "WindowSizeStorage", "de.neemann.gui" ], [ "Screen", "de.neemann.gui" ], [ "ToolTipProvider", "de.neemann.gui" ], [ "InfoDialog", "de.neemann.gui" ], [ "ValueFormatter", "de.neemann.digital.core" ], [ "ModelStateObserver", "de.neemann.digital.core" ], [ "PullDown", "de.neemann.digital.core.pld" ], [ "Diode", "de.neemann.digital.core.pld" ], [ "DiodeBackward", "de.neemann.digital.core.pld" ], [ "PullUp", "de.neemann.digital.core.pld" ], [ "DiodeForward", "de.neemann.digital.core.pld" ], [ "Node", "de.neemann.digital.core" ], [ "RAMSinglePort", "de.neemann.digital.core.memory" ], [ "ROMDualPort", "de.neemann.digital.core.memory" ], [ "RAMDualAccess", "de.neemann.digital.core.memory" ], [ "ByteArrayFromValueArray", "de.neemann.digital.core.memory.importer" ], [ "Importer", "de.neemann.digital.core.memory.importer" ], [ "LogisimReader", "de.neemann.digital.core.memory.importer" ], [ "DataFieldValueArray", "de.neemann.digital.core.memory.importer" ], [ "ByteArrayReader", "de.neemann.digital.core.memory.importer" ], [ "ValueArrayReader", "de.neemann.digital.core.memory.importer" ], [ "IntelHexReader", "de.neemann.digital.core.memory.importer" ], [ "ValueArray", "de.neemann.digital.core.memory.importer" ], [ "BinReader", "de.neemann.digital.core.memory.importer" ], [ "ByteArray", "de.neemann.digital.core.memory.importer" ], [ "MultiValueArray", "de.neemann.digital.core.memory.importer" ], [ "CounterPreset", "de.neemann.digital.core.memory" ], [ "RAMDualPort", "de.neemann.digital.core.memory" ], [ "Register", "de.neemann.digital.core.memory" ], [ "LookUpTable", "de.neemann.digital.core.memory" ], [ "BlockRAMDualPort", "de.neemann.digital.core.memory" ], [ "Counter", "de.neemann.digital.core.memory" ], [ "ROMMangerBase", "de.neemann.digital.core.memory.rom" ], [ "ROMManagerFile", "de.neemann.digital.core.memory.rom" ], [ "ROMManager", "de.neemann.digital.core.memory.rom" ], [ "ROMInterface", "de.neemann.digital.core.memory.rom" ], [ "EEPROM", "de.neemann.digital.core.memory" ], [ "ProgramCounter", "de.neemann.digital.core.memory" ], [ "RAMAsync", "de.neemann.digital.core.memory" ], [ "ROM", "de.neemann.digital.core.memory" ], [ "DataField", "de.neemann.digital.core.memory" ], [ "EEPROMDualPort", "de.neemann.digital.core.memory" ], [ "RAMInterface", "de.neemann.digital.core.memory" ], [ "DataFieldConverter", "de.neemann.digital.core.memory" ], [ "RAMSinglePortSel", "de.neemann.digital.core.memory" ], [ "ProgramMemory", "de.neemann.digital.core.memory" ], [ "RegisterFile", "de.neemann.digital.core.memory" ], [ "ModelStateObserverTyped", "de.neemann.digital.core" ], [ "Observable", "de.neemann.digital.core" ], [ "NodeWithoutDelay", "de.neemann.digital.core" ], [ "ExceptionWithOrigin", "de.neemann.digital.core" ], [ "ObservableValue", "de.neemann.digital.core" ], [ "SpeedTest", "de.neemann.digital.core" ], [ "BurnException", "de.neemann.digital.core" ], [ "GlobalValues", "de.neemann.digital.core" ], [ "MIDI", "de.neemann.digital.core.io" ], [ "RGBLED", "de.neemann.digital.core.io" ], [ "Out", "de.neemann.digital.core.io" ], [ "RotEncoder", "de.neemann.digital.core.io" ], [ "PinControl", "de.neemann.digital.core.io" ], [ "DipSwitch", "de.neemann.digital.core.io" ], [ "CommonConnectionType", "de.neemann.digital.core.io" ], [ "LightBulb", "de.neemann.digital.core.io" ], [ "Probe", "de.neemann.digital.core.io" ], [ "Button", "de.neemann.digital.core.io" ], [ "ButtonLED", "de.neemann.digital.core.io" ], [ "In", "de.neemann.digital.core.io" ], [ "StepperMotorUnipolar", "de.neemann.digital.core.io" ], [ "ProbeMode", "de.neemann.digital.core.io" ], [ "NotConnected", "de.neemann.digital.core.io" ], [ "MIDIHelper", "de.neemann.digital.core.io" ], [ "StepperMotorBipolar", "de.neemann.digital.core.io" ], [ "Const", "de.neemann.digital.core.io" ], [ "PowerSupply", "de.neemann.digital.core.io" ], [ "Ground", "de.neemann.digital.core.io" ], [ "InValue", "de.neemann.digital.core.io" ], [ "VDD", "de.neemann.digital.core.io" ], [ "ServerHolder", "de.neemann.digital.core.io.telnet" ], [ "Telnet", "de.neemann.digital.core.io.telnet" ], [ "ByteBuffer", "de.neemann.digital.core.io.telnet" ], [ "Server", "de.neemann.digital.core.io.telnet" ], [ "ElementAttributes", "de.neemann.digital.core.element" ], [ "Element", "de.neemann.digital.core.element" ], [ "ElementFactory", "de.neemann.digital.core.element" ], [ "PinInfo", "de.neemann.digital.core.element" ], [ "PinDescriptions", "de.neemann.digital.core.element" ], [ "PinDescription", "de.neemann.digital.core.element" ], [ "Keys", "de.neemann.digital.core.element" ], [ "Rotation", "de.neemann.digital.core.element" ], [ "AttributeListener", "de.neemann.digital.core.element" ], [ "Key", "de.neemann.digital.core.element" ], [ "ImmutableList", "de.neemann.digital.core.element" ], [ "ElementTypeDescription", "de.neemann.digital.core.element" ], [ "FanIn", "de.neemann.digital.core.basic" ], [ "NOr", "de.neemann.digital.core.basic" ], [ "And", "de.neemann.digital.core.basic" ], [ "XNOr", "de.neemann.digital.core.basic" ], [ "XOr", "de.neemann.digital.core.basic" ], [ "Not", "de.neemann.digital.core.basic" ], [ "NAnd", "de.neemann.digital.core.basic" ], [ "Function", "de.neemann.digital.core.basic" ], [ "Or", "de.neemann.digital.core.basic" ], [ "ExceptionWithOriginInterface", "de.neemann.digital.core" ], [ "ModelEvent", "de.neemann.digital.core" ], [ "BacktrackException", "de.neemann.digital.core" ], [ "PlainSwitch", "de.neemann.digital.core.switching" ], [ "FGPFET", "de.neemann.digital.core.switching" ], [ "NFET", "de.neemann.digital.core.switching" ], [ "FGNFET", "de.neemann.digital.core.switching" ], [ "PFET", "de.neemann.digital.core.switching" ], [ "PlainSwitchDT", "de.neemann.digital.core.switching" ], [ "TransGate", "de.neemann.digital.core.switching" ], [ "SwitchDT", "de.neemann.digital.core.switching" ], [ "Relay", "de.neemann.digital.core.switching" ], [ "RelayDT", "de.neemann.digital.core.switching" ], [ "Switch", "de.neemann.digital.core.switching" ], [ "Fuse", "de.neemann.digital.core.switching" ], [ "Reset", "de.neemann.digital.core.wiring" ], [ "Stop", "de.neemann.digital.core.wiring" ], [ "Decoder", "de.neemann.digital.core.wiring" ], [ "Delay", "de.neemann.digital.core.wiring" ], [ "Driver", "de.neemann.digital.core.wiring" ], [ "DataBus", "de.neemann.digital.core.wiring.bus" ], [ "SingleBusHandler", "de.neemann.digital.core.wiring.bus" ], [ "ConnectedBusHandler", "de.neemann.digital.core.wiring.bus" ], [ "AbstractBusHandler", "de.neemann.digital.core.wiring.bus" ], [ "BusModelStateObserver", "de.neemann.digital.core.wiring.bus" ], [ "CommonBusValue", "de.neemann.digital.core.wiring.bus" ], [ "DriverInvSel", "de.neemann.digital.core.wiring" ], [ "PriorityEncoder", "de.neemann.digital.core.wiring" ], [ "BusSplitter", "de.neemann.digital.core.wiring" ], [ "Splitter", "de.neemann.digital.core.wiring" ], [ "Multiplexer", "de.neemann.digital.core.wiring" ], [ "BitSelector", "de.neemann.digital.core.wiring" ], [ "Break", "de.neemann.digital.core.wiring" ], [ "Clock", "de.neemann.digital.core.wiring" ], [ "AsyncSeq", "de.neemann.digital.core.wiring" ], [ "Demultiplexer", "de.neemann.digital.core.wiring" ], [ "BitsException", "de.neemann.digital.core" ], [ "NodeInterface", "de.neemann.digital.core" ], [ "NodeException", "de.neemann.digital.core" ], [ "FlipflopDAsync", "de.neemann.digital.core.flipflops" ], [ "FlipflopD", "de.neemann.digital.core.flipflops" ], [ "FlipflopRSAsync", "de.neemann.digital.core.flipflops" ], [ "FlipflopT", "de.neemann.digital.core.flipflops" ], [ "FlipflopJKAsync", "de.neemann.digital.core.flipflops" ], [ "FlipflopJK", "de.neemann.digital.core.flipflops" ], [ "Monoflop", "de.neemann.digital.core.flipflops" ], [ "FlipflopRS", "de.neemann.digital.core.flipflops" ], [ "FlipflopBit", "de.neemann.digital.core.flipflops" ], [ "BarrelShifter", "de.neemann.digital.core.arithmetic" ], [ "Mul", "de.neemann.digital.core.arithmetic" ], [ "Neg", "de.neemann.digital.core.arithmetic" ], [ "BitExtender", "de.neemann.digital.core.arithmetic" ], [ "Add", "de.neemann.digital.core.arithmetic" ], [ "Div", "de.neemann.digital.core.arithmetic" ], [ "LeftRightFormat", "de.neemann.digital.core.arithmetic" ], [ "PRNG", "de.neemann.digital.core.arithmetic" ], [ "Sub", "de.neemann.digital.core.arithmetic" ], [ "BarrelShifterMode", "de.neemann.digital.core.arithmetic" ], [ "Comparator", "de.neemann.digital.core.arithmetic" ], [ "BitCount", "de.neemann.digital.core.arithmetic" ], [ "ObservableValues", "de.neemann.digital.core" ], [ "Value", "de.neemann.digital.core" ], [ "IntFormat", "de.neemann.digital.core" ], [ "SyncAccess", "de.neemann.digital.core" ], [ "Bits", "de.neemann.digital.core" ], [ "ProcessInterface", "de.neemann.digital.core.extern.handler" ], [ "StdIOInterface", "de.neemann.digital.core.extern.handler" ], [ "ApplicationVerilogStdIO", "de.neemann.digital.core.extern" ], [ "Application", "de.neemann.digital.core.extern" ], [ "External", "de.neemann.digital.core.extern" ], [ "Port", "de.neemann.digital.core.extern" ], [ "PortDefinition", "de.neemann.digital.core.extern" ], [ "ApplicationGHDL", "de.neemann.digital.core.extern" ], [ "ApplicationIVerilog", "de.neemann.digital.core.extern" ], [ "ApplicationVHDLStdIO", "de.neemann.digital.core.extern" ], [ "VHDLTokenizer", "de.neemann.digital.core.extern" ], [ "ApplicationGeneric", "de.neemann.digital.core.extern" ], [ "Options", "de.neemann.digital.core.extern" ], [ "VerilogTokenizer", "de.neemann.digital.core.extern" ], [ "ExternalFile", "de.neemann.digital.core.extern" ], [ "ProcessStarter", "de.neemann.digital.core.extern" ], [ "ModelEventType", "de.neemann.digital.core" ], [ "Observer", "de.neemann.digital.core" ], [ "ErrorDetector", "de.neemann.digital.core" ], [ "Statistics", "de.neemann.digital.core.stats" ], [ "Countable", "de.neemann.digital.core.stats" ], [ "Model", "de.neemann.digital.core" ], [ "Signal", "de.neemann.digital.core" ], [ "StringList", "de.neemann.digital" ], [ "XStreamValid", "de.neemann.digital" ], [ "StatsExport", "de.neemann.digital.cli" ], [ "SVGExport", "de.neemann.digital.cli" ], [ "CommandLineTester", "de.neemann.digital.cli" ], [ "CSVWriter", "de.neemann.digital.cli" ], [ "BasicCommand", "de.neemann.digital.cli.cli" ], [ "Argument", "de.neemann.digital.cli.cli" ], [ "CLIException", "de.neemann.digital.cli.cli" ], [ "Muxer", "de.neemann.digital.cli.cli" ], [ "ArgumentKey", "de.neemann.digital.cli.cli" ], [ "NamedCommand", "de.neemann.digital.cli.cli" ], [ "CLICommand", "de.neemann.digital.cli.cli" ], [ "ArgumentBase", "de.neemann.digital.cli.cli" ], [ "CircuitLoader", "de.neemann.digital.cli" ], [ "Main", "de.neemann.digital.cli" ], [ "Modification", "de.neemann.digital.undo" ], [ "Modifications", "de.neemann.digital.undo" ], [ "ModifyException", "de.neemann.digital.undo" ], [ "Copyable", "de.neemann.digital.undo" ], [ "UndoManager", "de.neemann.digital.undo" ], [ "ChangedListener", "de.neemann.digital.undo" ], [ "CircuitRepresentation", "de.neemann.digital.fsm" ], [ "Transition", "de.neemann.digital.fsm" ], [ "Movable", "de.neemann.digital.fsm" ], [ "MouseMovable", "de.neemann.digital.fsm" ], [ "Optimizer", "de.neemann.digital.fsm" ], [ "Permute", "de.neemann.digital.fsm" ], [ "FiniteStateMachineException", "de.neemann.digital.fsm" ], [ "TransitionTableCreator", "de.neemann.digital.fsm" ], [ "ValueParser", "de.neemann.digital.fsm" ], [ "WaitGroup", "de.neemann.digital.fsm" ], [ "FSMComponent", "de.neemann.digital.fsm.gui" ], [ "FSMFrame", "de.neemann.digital.fsm.gui" ], [ "OptimizerDialog", "de.neemann.digital.fsm.gui" ], [ "FSMDemos", "de.neemann.digital.fsm" ], [ "FSM", "de.neemann.digital.fsm" ], [ "State", "de.neemann.digital.fsm" ], [ "Lang", "de.neemann.digital.lang" ], [ "LineListenerResolveDontCare", "de.neemann.digital.testing" ], [ "TestingDataException", "de.neemann.digital.testing" ], [ "UnitTester", "de.neemann.digital.testing" ], [ "FolderTestRunner", "de.neemann.digital.testing" ], [ "TestExecutor", "de.neemann.digital.testing" ], [ "Transitions", "de.neemann.digital.testing" ], [ "TestCaseDescription", "de.neemann.digital.testing" ], [ "TestCaseElement", "de.neemann.digital.testing" ], [ "LineEmitterRepeat", "de.neemann.digital.testing.parser" ], [ "Parser", "de.neemann.digital.testing.parser" ], [ "ValueAppenderBits", "de.neemann.digital.testing.parser" ], [ "ParserException", "de.neemann.digital.testing.parser" ], [ "Context", "de.neemann.digital.testing.parser" ], [ "ModelInitializer", "de.neemann.digital.testing.parser" ], [ "Expression", "de.neemann.digital.testing.parser" ], [ "LineEmitterList", "de.neemann.digital.testing.parser" ], [ "TestRow", "de.neemann.digital.testing.parser" ], [ "LineEmitter", "de.neemann.digital.testing.parser" ], [ "LineEmitterWhile", "de.neemann.digital.testing.parser" ], [ "Tokenizer", "de.neemann.digital.testing.parser" ], [ "LineEmitterSimple", "de.neemann.digital.testing.parser" ], [ "Random", "de.neemann.digital.testing.parser.functions" ], [ "SignExtend", "de.neemann.digital.testing.parser.functions" ], [ "IfThenElse", "de.neemann.digital.testing.parser.functions" ], [ "Function", "de.neemann.digital.testing.parser.functions" ], [ "LineListener", "de.neemann.digital.testing.parser" ], [ "VirtualSignal", "de.neemann.digital.testing.parser" ], [ "ValueAppender", "de.neemann.digital.testing.parser" ], [ "OperatorPrecedence", "de.neemann.digital.testing.parser" ], [ "TestResultListener", "de.neemann.digital.testing" ], [ "MatchedValue", "de.neemann.digital.testing" ], [ "TestResult", "de.neemann.digital.testing" ], [ "MinimizerInterface", "de.neemann.digital.analyse" ], [ "LabelNumbering", "de.neemann.digital.analyse" ], [ "ModelAnalyser", "de.neemann.digital.analyse" ], [ "CSVImporter", "de.neemann.digital.analyse" ], [ "BoolTableExpanded", "de.neemann.digital.analyse" ], [ "TruthTableTableModel", "de.neemann.digital.analyse" ], [ "TableReducer", "de.neemann.digital.analyse.quinemc" ], [ "PrimeSelector", "de.neemann.digital.analyse.quinemc.primeselector" ], [ "BruteForce", "de.neemann.digital.analyse.quinemc.primeselector" ], [ "LargestFirst", "de.neemann.digital.analyse.quinemc.primeselector" ], [ "BruteForceGetAll", "de.neemann.digital.analyse.quinemc.primeselector" ], [ "PrimeSelectorDefault", "de.neemann.digital.analyse.quinemc.primeselector" ], [ "BoolTableByteArray", "de.neemann.digital.analyse.quinemc" ], [ "IndependentChecker", "de.neemann.digital.analyse.quinemc" ], [ "QuineMcCluskey", "de.neemann.digital.analyse.quinemc" ], [ "BoolTableExpression", "de.neemann.digital.analyse.quinemc" ], [ "BoolTableBoolArray", "de.neemann.digital.analyse.quinemc" ], [ "BoolTable", "de.neemann.digital.analyse.quinemc" ], [ "TableRows", "de.neemann.digital.analyse.quinemc" ], [ "ThreeStateValue", "de.neemann.digital.analyse.quinemc" ], [ "QuineMcCluskeyExam", "de.neemann.digital.analyse.quinemc" ], [ "TableRow", "de.neemann.digital.analyse.quinemc" ], [ "TruthTableConverter", "de.neemann.digital.analyse" ], [ "DetermineJKStateMachine", "de.neemann.digital.analyse" ], [ "Parser", "de.neemann.digital.analyse.parser" ], [ "ParseException", "de.neemann.digital.analyse.parser" ], [ "Tokenizer", "de.neemann.digital.analyse.parser" ], [ "ModelAnalyserInfo", "de.neemann.digital.analyse" ], [ "AnalyseException", "de.neemann.digital.analyse" ], [ "DependencyAnalyser", "de.neemann.digital.analyse" ], [ "SubstituteLibrary", "de.neemann.digital.analyse" ], [ "TruthTableFormatterHex", "de.neemann.digital.analyse.format" ], [ "TruthTableFormatter", "de.neemann.digital.analyse.format" ], [ "TruthTableFormatterTestCase", "de.neemann.digital.analyse.format" ], [ "TruthTableFormatterCSV", "de.neemann.digital.analyse.format" ], [ "TruthTableFormatterLaTeX", "de.neemann.digital.analyse.format" ], [ "MinimizerQuineMcCluskey", "de.neemann.digital.analyse" ], [ "ContextFiller", "de.neemann.digital.analyse.expression" ], [ "BitSetter", "de.neemann.digital.analyse.expression" ], [ "ExpressionVisitor", "de.neemann.digital.analyse.expression" ], [ "ContextMap", "de.neemann.digital.analyse.expression" ], [ "ComplexityVisitor", "de.neemann.digital.analyse.expression" ], [ "Operation", "de.neemann.digital.analyse.expression" ], [ "Context", "de.neemann.digital.analyse.expression" ], [ "NInputs", "de.neemann.digital.analyse.expression.modify" ], [ "NOr", "de.neemann.digital.analyse.expression.modify" ], [ "ExpressionModifier", "de.neemann.digital.analyse.expression.modify" ], [ "NAnd", "de.neemann.digital.analyse.expression.modify" ], [ "Constant", "de.neemann.digital.analyse.expression" ], [ "Expression", "de.neemann.digital.analyse.expression" ], [ "Variable", "de.neemann.digital.analyse.expression" ], [ "ExpressionException", "de.neemann.digital.analyse.expression" ], [ "ComplexityInclNotVisitor", "de.neemann.digital.analyse.expression" ], [ "Equals", "de.neemann.digital.analyse.expression" ], [ "FormatToExpression", "de.neemann.digital.analyse.expression.format" ], [ "FormatToTable", "de.neemann.digital.analyse.expression.format" ], [ "Formatter", "de.neemann.digital.analyse.expression.format" ], [ "FormatterException", "de.neemann.digital.analyse.expression.format" ], [ "FormatToTableLatex", "de.neemann.digital.analyse.expression.format" ], [ "Not", "de.neemann.digital.analyse.expression" ], [ "VariableVisitor", "de.neemann.digital.analyse.expression" ], [ "NamedExpression", "de.neemann.digital.analyse.expression" ], [ "MinimizerQuineMcCluskeyExam", "de.neemann.digital.analyse" ], [ "TruthTable", "de.neemann.digital.analyse" ], [ "SplitPinString", "de.neemann.digital.analyse" ], [ "CycleDetector", "de.neemann.digital.analyse" ], [ "DigitalRemoteInterface", "de.neemann.digital.gui" ], [ "TextSearchFilter", "de.neemann.digital.gui" ], [ "ExportZipAction", "de.neemann.digital.gui" ], [ "SettingsBase", "de.neemann.digital.gui" ], [ "DocumentationLocator", "de.neemann.digital.gui" ], [ "InitialTutorial", "de.neemann.digital.gui.tutorial" ], [ "InsertAction", "de.neemann.digital.gui" ], [ "StatusInterface", "de.neemann.digital.gui" ], [ "SearchTextField", "de.neemann.digital.gui" ], [ "SaveAsHelper", "de.neemann.digital.gui" ], [ "FileHistory", "de.neemann.digital.gui" ], [ "ReleaseInfo", "de.neemann.digital.gui.release" ], [ "CheckForNewRelease", "de.neemann.digital.gui.release" ], [ "StateInterface", "de.neemann.digital.gui.state" ], [ "StateManager", "de.neemann.digital.gui.state" ], [ "State", "de.neemann.digital.gui.state" ], [ "CircuitScrollPanel", "de.neemann.digital.gui.components" ], [ "ItemPicker", "de.neemann.digital.gui.components" ], [ "LibraryTreeModel", "de.neemann.digital.gui.components.tree" ], [ "SelectTree", "de.neemann.digital.gui.components.tree" ], [ "WindowPosManager", "de.neemann.digital.gui.components" ], [ "CustomShapeEditor", "de.neemann.digital.gui.components" ], [ "TransformHolder", "de.neemann.digital.gui.components" ], [ "EditorPanel", "de.neemann.digital.gui.components" ], [ "BehavioralFixtureCreator", "de.neemann.digital.gui.components" ], [ "EditorFactory", "de.neemann.digital.gui.components" ], [ "OrderMerger", "de.neemann.digital.gui.components" ], [ "ElementOrderer", "de.neemann.digital.gui.components" ], [ "ModifyMoveSelected", "de.neemann.digital.gui.components.modification" ], [ "ModifyMoveWire", "de.neemann.digital.gui.components.modification" ], [ "ModificationOfWire", "de.neemann.digital.gui.components.modification" ], [ "ModifyDeleteRect", "de.neemann.digital.gui.components.modification" ], [ "ModifyInsertWires", "de.neemann.digital.gui.components.modification" ], [ "ModifyInsertWire", "de.neemann.digital.gui.components.modification" ], [ "ModificationOfVisualElement", "de.neemann.digital.gui.components.modification" ], [ "ModifyCircuitAttributes", "de.neemann.digital.gui.components.modification" ], [ "ModifyDeleteWire", "de.neemann.digital.gui.components.modification" ], [ "ModifyMoveAndRotElement", "de.neemann.digital.gui.components.modification" ], [ "ModifyMeasurementOrdering", "de.neemann.digital.gui.components.modification" ], [ "ModifyDeleteElement", "de.neemann.digital.gui.components.modification" ], [ "ModifyAttribute", "de.neemann.digital.gui.components.modification" ], [ "ModifyAttributes", "de.neemann.digital.gui.components.modification" ], [ "ModifyInsertElement", "de.neemann.digital.gui.components.modification" ], [ "DataEditor", "de.neemann.digital.gui.components" ], [ "CircuitModifierPostClosed", "de.neemann.digital.gui.components" ], [ "CharDeleter", "de.neemann.digital.gui.components.terminal" ], [ "ConsoleTerminal", "de.neemann.digital.gui.components.terminal" ], [ "Terminal", "de.neemann.digital.gui.components.terminal" ], [ "TerminalDialog", "de.neemann.digital.gui.components.terminal" ], [ "TerminalInterface", "de.neemann.digital.gui.components.terminal" ], [ "Keyboard", "de.neemann.digital.gui.components.terminal" ], [ "KeyboardDialog", "de.neemann.digital.gui.components.terminal" ], [ "Editor", "de.neemann.digital.gui.components" ], [ "VarRectList", "de.neemann.digital.gui.components.karnaugh" ], [ "KarnaughMap", "de.neemann.digital.gui.components.karnaugh" ], [ "KarnaughMapComponent", "de.neemann.digital.gui.components.karnaugh" ], [ "KarnaughMapDialog", "de.neemann.digital.gui.components.karnaugh" ], [ "MapLayout", "de.neemann.digital.gui.components.karnaugh" ], [ "KarnaughException", "de.neemann.digital.gui.components.karnaugh" ], [ "CircuitTransferable", "de.neemann.digital.gui.components" ], [ "ElementHelpDialog", "de.neemann.digital.gui.components" ], [ "TestCaseDescriptionDialog", "de.neemann.digital.gui.components.testing" ], [ "ValueTableDialog", "de.neemann.digital.gui.components.testing" ], [ "TestCaseDescriptionEditor", "de.neemann.digital.gui.components.testing" ], [ "TestAllDialog", "de.neemann.digital.gui.components.testing" ], [ "ExpressionListenerOptimizeJK", "de.neemann.digital.gui.components.table" ], [ "LaTeXExpressionListener", "de.neemann.digital.gui.components.table" ], [ "HardwareDescriptionGenerator", "de.neemann.digital.gui.components.table.hardware" ], [ "GenerateFile", "de.neemann.digital.gui.components.table.hardware" ], [ "GenerateCUPL", "de.neemann.digital.gui.components.table.hardware" ], [ "ExpressionListener", "de.neemann.digital.gui.components.table" ], [ "ReorderOutputs", "de.neemann.digital.gui.components.table" ], [ "AllSolutionsDialog", "de.neemann.digital.gui.components.table" ], [ "ExpressionListenerJK", "de.neemann.digital.gui.components.table" ], [ "ExpressionListenerCSVCondensed", "de.neemann.digital.gui.components.table" ], [ "ExpressionCreator", "de.neemann.digital.gui.components.table" ], [ "TableDialog", "de.neemann.digital.gui.components.table" ], [ "BuilderExpressionCreator", "de.neemann.digital.gui.components.table" ], [ "ExpressionComponent", "de.neemann.digital.gui.components.table" ], [ "PlainTextExpressionListener", "de.neemann.digital.gui.components.table" ], [ "TableReorderManager", "de.neemann.digital.gui.components.table" ], [ "ShowStringDialog", "de.neemann.digital.gui.components.table" ], [ "ReorderInputs", "de.neemann.digital.gui.components.table" ], [ "ProgressDialog", "de.neemann.digital.gui.components.table" ], [ "CheckResultListener", "de.neemann.digital.gui.components.table" ], [ "ExpressionListenerStore", "de.neemann.digital.gui.components.table" ], [ "AttributeDialog", "de.neemann.digital.gui.components" ], [ "ProbeDialog", "de.neemann.digital.gui.components" ], [ "ColorSchemeEditor", "de.neemann.digital.gui.components" ], [ "ROMEditorDialog", "de.neemann.digital.gui.components" ], [ "LabelGenerator", "de.neemann.digital.gui.components" ], [ "SingleValueDialog", "de.neemann.digital.gui.components" ], [ "ExpressionDialog", "de.neemann.digital.gui.components.expression" ], [ "CircuitComponent", "de.neemann.digital.gui.components" ], [ "VGA", "de.neemann.digital.gui.components.graphics" ], [ "GraphicCard", "de.neemann.digital.gui.components.graphics" ], [ "LedMatrix", "de.neemann.digital.gui.components.graphics" ], [ "VGADialog", "de.neemann.digital.gui.components.graphics" ], [ "MoveFocusTo", "de.neemann.digital.gui.components.graphics" ], [ "LedMatrixComponent", "de.neemann.digital.gui.components.graphics" ], [ "GraphicDialog", "de.neemann.digital.gui.components.graphics" ], [ "GraphicComponent", "de.neemann.digital.gui.components.graphics" ], [ "LedMatrixDialog", "de.neemann.digital.gui.components.graphics" ], [ "ConstraintsBuilder", "de.neemann.digital.gui.components" ], [ "ScopeTrigger", "de.neemann.digital.gui.components.data" ], [ "GraphDialog", "de.neemann.digital.gui.components.data" ], [ "GraphComponent", "de.neemann.digital.gui.components.data" ], [ "DummyElement", "de.neemann.digital.gui.components.data" ], [ "ValueTableObserver", "de.neemann.digital.gui.components.data" ], [ "CircuitModifier", "de.neemann.digital.gui.components" ], [ "CopiedElementLabelRenamer", "de.neemann.digital.gui.components" ], [ "TextLineNumber", "de.neemann.digital.gui.components" ], [ "InsertHistory", "de.neemann.digital.gui" ], [ "ProgramMemoryLoader", "de.neemann.digital.gui" ], [ "Main", "de.neemann.digital.gui" ], [ "StatsDialog", "de.neemann.digital.gui" ], [ "WindowManager", "de.neemann.digital.gui" ], [ "Settings", "de.neemann.digital.gui" ], [ "LibrarySelector", "de.neemann.digital.gui" ], [ "DigitalUncaughtExceptionHandler", "de.neemann.digital.gui" ], [ "NumberingWizard", "de.neemann.digital.gui" ], [ "HandlerInterface", "de.neemann.digital.gui.remote" ], [ "RemoteSever", "de.neemann.digital.gui.remote" ], [ "RemoteException", "de.neemann.digital.gui.remote" ], [ "DigitalHandler", "de.neemann.digital.gui.remote" ], [ "ModelModifier", "de.neemann.digital.gui" ], [ "VerilogCreator", "de.neemann.digital.hdl.verilog2" ], [ "VerilogRenaming", "de.neemann.digital.hdl.verilog2" ], [ "VerilogGenerator", "de.neemann.digital.hdl.verilog2" ], [ "VerilogTestBenchCreator", "de.neemann.digital.hdl.verilog2" ], [ "VerilogElement", "de.neemann.digital.hdl.verilog2.lib" ], [ "VerilogTemplate", "de.neemann.digital.hdl.verilog2.lib" ], [ "VerilogLibrary", "de.neemann.digital.hdl.verilog2" ], [ "CodePrinter", "de.neemann.digital.hdl.printer" ], [ "CodePrinterStr", "de.neemann.digital.hdl.printer" ], [ "Statements", "de.neemann.digital.hdl.hgs" ], [ "Parser", "de.neemann.digital.hdl.hgs" ], [ "ParserException", "de.neemann.digital.hdl.hgs" ], [ "Statement", "de.neemann.digital.hdl.hgs" ], [ "Context", "de.neemann.digital.hdl.hgs" ], [ "FirstClassFunctionCall", "de.neemann.digital.hdl.hgs.function" ], [ "InnerFunction", "de.neemann.digital.hdl.hgs.function" ], [ "JavaClass", "de.neemann.digital.hdl.hgs.function" ], [ "FirstClassFunction", "de.neemann.digital.hdl.hgs.function" ], [ "Func", "de.neemann.digital.hdl.hgs.function" ], [ "Function", "de.neemann.digital.hdl.hgs.function" ], [ "Expression", "de.neemann.digital.hdl.hgs" ], [ "HGSEvalException", "de.neemann.digital.hdl.hgs" ], [ "Tokenizer", "de.neemann.digital.hdl.hgs" ], [ "ReferenceToFunc", "de.neemann.digital.hdl.hgs.refs" ], [ "ReferenceToStruct", "de.neemann.digital.hdl.hgs.refs" ], [ "ReferenceToArray", "de.neemann.digital.hdl.hgs.refs" ], [ "Reference", "de.neemann.digital.hdl.hgs.refs" ], [ "ReferenceToVar", "de.neemann.digital.hdl.hgs.refs" ], [ "Value", "de.neemann.digital.hdl.hgs" ], [ "HGSMap", "de.neemann.digital.hdl.hgs" ], [ "HGSArray", "de.neemann.digital.hdl.hgs" ], [ "Separator", "de.neemann.digital.hdl.vhdl2" ], [ "VHDLLibrary", "de.neemann.digital.hdl.vhdl2" ], [ "VHDLCreator", "de.neemann.digital.hdl.vhdl2" ], [ "VHDLRenaming", "de.neemann.digital.hdl.vhdl2" ], [ "VHDLGenerator", "de.neemann.digital.hdl.vhdl2" ], [ "VHDLEntity", "de.neemann.digital.hdl.vhdl2.entities" ], [ "VHDLTemplate", "de.neemann.digital.hdl.vhdl2.entities" ], [ "VHDLTemplateFunctions", "de.neemann.digital.hdl.vhdl2.entities" ], [ "VHDLTestBenchCreator", "de.neemann.digital.hdl.vhdl2" ], [ "HDLModel", "de.neemann.digital.hdl.model2" ], [ "HDLNode", "de.neemann.digital.hdl.model2" ], [ "HDLNet", "de.neemann.digital.hdl.model2" ], [ "Printable", "de.neemann.digital.hdl.model2" ], [ "HDLException", "de.neemann.digital.hdl.model2" ], [ "HDLPort", "de.neemann.digital.hdl.model2" ], [ "HasName", "de.neemann.digital.hdl.model2" ], [ "InlineManyToOne", "de.neemann.digital.hdl.model2.optimizations" ], [ "MergeAssignments", "de.neemann.digital.hdl.model2.optimizations" ], [ "Optimization", "de.neemann.digital.hdl.model2.optimizations" ], [ "MergeConstants", "de.neemann.digital.hdl.model2.optimizations" ], [ "ReplaceOneToMany", "de.neemann.digital.hdl.model2.optimizations" ], [ "NameConstantSignals", "de.neemann.digital.hdl.model2.optimizations" ], [ "OptimizeExpressions", "de.neemann.digital.hdl.model2.optimizations" ], [ "RemoveConstantSignals", "de.neemann.digital.hdl.model2.optimizations" ], [ "NodeSorterExpressionBased", "de.neemann.digital.hdl.model2.optimizations" ], [ "HDLNodeSplitterManyToOne", "de.neemann.digital.hdl.model2" ], [ "HDLNodeCustom", "de.neemann.digital.hdl.model2" ], [ "HDLNodeAssignment", "de.neemann.digital.hdl.model2" ], [ "HDLCircuit", "de.neemann.digital.hdl.model2" ], [ "ExprVar", "de.neemann.digital.hdl.model2.expression" ], [ "Visitor", "de.neemann.digital.hdl.model2.expression" ], [ "ExprVarRange", "de.neemann.digital.hdl.model2.expression" ], [ "Expression", "de.neemann.digital.hdl.model2.expression" ], [ "ExpressionOptimizer", "de.neemann.digital.hdl.model2.expression" ], [ "ExprNot", "de.neemann.digital.hdl.model2.expression" ], [ "ExprConstant", "de.neemann.digital.hdl.model2.expression" ], [ "ExprOperate", "de.neemann.digital.hdl.model2.expression" ], [ "ExprUsingNet", "de.neemann.digital.hdl.model2.expression" ], [ "HDLNodeBuildIn", "de.neemann.digital.hdl.model2" ], [ "HDLClockIntegrator", "de.neemann.digital.hdl.model2.clock" ], [ "ClockIntegratorGeneric", "de.neemann.digital.hdl.model2.clock" ], [ "ClockInfo", "de.neemann.digital.hdl.model2.clock" ], [ "HDLNodeSplitterOneToMany", "de.neemann.digital.hdl.model2" ], [ "FileLocator", "de.neemann.digital" ], [ "ValueTable", "de.neemann.digital.data" ], [ "ValueTableModel", "de.neemann.digital.data" ], [ "DataPlotter", "de.neemann.digital.data" ], [ "Value", "de.neemann.digital.data" ], [ "ExpressionExporter", "de.neemann.digital.builder" ], [ "ExpressionToFileExporter", "de.neemann.digital.builder" ], [ "RotationByteArrayOutputStream", "de.neemann.digital.builder.tt2" ], [ "TT2Exporter", "de.neemann.digital.builder.tt2" ], [ "StartATF150xFitter", "de.neemann.digital.builder.tt2" ], [ "OSExecute", "de.neemann.digital.builder.tt2" ], [ "CreateCHN", "de.neemann.digital.builder.ATF150x" ], [ "ATFDevice", "de.neemann.digital.builder.ATF150x" ], [ "ATFDialog", "de.neemann.digital.builder.ATF150x" ], [ "PL", "de.neemann.digital.builder.ATF150x" ], [ "ATF150xCuplExporter", "de.neemann.digital.builder.ATF150x" ], [ "PinMap", "de.neemann.digital.builder" ], [ "PinMapException", "de.neemann.digital.builder" ], [ "FragmentExpression", "de.neemann.digital.builder.circuit" ], [ "FragmentVisualElement", "de.neemann.digital.builder.circuit" ], [ "FragmentSameInValue", "de.neemann.digital.builder.circuit" ], [ "CircuitBuilder", "de.neemann.digital.builder.circuit" ], [ "FragmentVisitor", "de.neemann.digital.builder.circuit" ], [ "FragmentVariable", "de.neemann.digital.builder.circuit" ], [ "Fragment", "de.neemann.digital.builder.circuit" ], [ "Box", "de.neemann.digital.builder.circuit" ], [ "Gal16v8JEDECExporter", "de.neemann.digital.builder.Gal16v8" ], [ "CuplExporter", "de.neemann.digital.builder.Gal16v8" ], [ "BuilderCollectorGAL", "de.neemann.digital.builder.Gal16v8" ], [ "CleanNameBuilder", "de.neemann.digital.builder" ], [ "BuilderCollector", "de.neemann.digital.builder" ], [ "BuilderInterface", "de.neemann.digital.builder" ], [ "BuilderException", "de.neemann.digital.builder" ], [ "Gal22v10JEDECExporter", "de.neemann.digital.builder.Gal22v10" ], [ "Gal22v10CuplExporter", "de.neemann.digital.builder.Gal22v10" ], [ "FuseMap", "de.neemann.digital.builder.jedec" ], [ "FuseMapFillerException", "de.neemann.digital.builder.jedec" ], [ "FuseMapFiller", "de.neemann.digital.builder.jedec" ], [ "JedecWriter", "de.neemann.digital.builder.jedec" ], [ "GenericCode", "de.neemann.digital.draw.library" ], [ "ElementLibrary", "de.neemann.digital.draw.library" ], [ "GenericInitCode", "de.neemann.digital.draw.library" ], [ "Visitor", "de.neemann.digital.draw.library" ], [ "ComponentManager", "de.neemann.digital.draw.library" ], [ "LibraryListener", "de.neemann.digital.draw.library" ], [ "JarComponentManager", "de.neemann.digital.draw.library" ], [ "ElementLibraryFolder", "de.neemann.digital.draw.library" ], [ "CustomElement", "de.neemann.digital.draw.library" ], [ "ElementNotFoundNotification", "de.neemann.digital.draw.library" ], [ "ElementNotFoundException", "de.neemann.digital.draw.library" ], [ "ComponentSource", "de.neemann.digital.draw.library" ], [ "LibraryInterface", "de.neemann.digital.draw.library" ], [ "ResolveGenerics", "de.neemann.digital.draw.library" ], [ "LibraryNode", "de.neemann.digital.draw.library" ], [ "ElementTypeDescriptionCustom", "de.neemann.digital.draw.library" ], [ "InvalidNodeException", "de.neemann.digital.draw.library" ], [ "NumStringComparator", "de.neemann.digital.draw.library" ], [ "InputShape", "de.neemann.digital.draw.shapes" ], [ "Interactor", "de.neemann.digital.draw.shapes" ], [ "ButtonShape", "de.neemann.digital.draw.shapes" ], [ "GenericShape", "de.neemann.digital.draw.shapes" ], [ "Drawable", "de.neemann.digital.draw.shapes" ], [ "DelayShape", "de.neemann.digital.draw.shapes" ], [ "DiodeBackwardShape", "de.neemann.digital.draw.shapes" ], [ "FuseShape", "de.neemann.digital.draw.shapes" ], [ "FETShapeP", "de.neemann.digital.draw.shapes" ], [ "DILShape", "de.neemann.digital.draw.shapes" ], [ "DipSwitchShape", "de.neemann.digital.draw.shapes" ], [ "SwitchShape", "de.neemann.digital.draw.shapes" ], [ "LightBulbShape", "de.neemann.digital.draw.shapes" ], [ "LayoutShape", "de.neemann.digital.draw.shapes" ], [ "SplitterShape", "de.neemann.digital.draw.shapes" ], [ "PolarityAwareLEDShape", "de.neemann.digital.draw.shapes" ], [ "ButtonLEDShape", "de.neemann.digital.draw.shapes" ], [ "RelayShape", "de.neemann.digital.draw.shapes" ], [ "ConstShape", "de.neemann.digital.draw.shapes" ], [ "BreakShape", "de.neemann.digital.draw.shapes" ], [ "GenericCodeShape", "de.neemann.digital.draw.shapes" ], [ "TextShape", "de.neemann.digital.draw.shapes" ], [ "SevenSegHexShape", "de.neemann.digital.draw.shapes" ], [ "ProbeShape", "de.neemann.digital.draw.shapes" ], [ "NotConnectedShape", "de.neemann.digital.draw.shapes" ], [ "StepperMotorShape", "de.neemann.digital.draw.shapes" ], [ "FETShape", "de.neemann.digital.draw.shapes" ], [ "BitSelShape", "de.neemann.digital.draw.shapes" ], [ "SevenSegShape", "de.neemann.digital.draw.shapes" ], [ "GenericInitCodeShape", "de.neemann.digital.draw.shapes" ], [ "RelayDTShape", "de.neemann.digital.draw.shapes" ], [ "RectShape", "de.neemann.digital.draw.shapes" ], [ "VDDShape", "de.neemann.digital.draw.shapes" ], [ "RAMShape", "de.neemann.digital.draw.shapes" ], [ "ScopeShape", "de.neemann.digital.draw.shapes" ], [ "DemuxerShape", "de.neemann.digital.draw.shapes" ], [ "FETShapeN", "de.neemann.digital.draw.shapes" ], [ "BusSplitterShape", "de.neemann.digital.draw.shapes" ], [ "PullUpShape", "de.neemann.digital.draw.shapes" ], [ "TestCaseShape", "de.neemann.digital.draw.shapes" ], [ "TunnelShape", "de.neemann.digital.draw.shapes" ], [ "MuxerShape", "de.neemann.digital.draw.shapes" ], [ "SwitchDTShape", "de.neemann.digital.draw.shapes" ], [ "PinControlShape", "de.neemann.digital.draw.shapes" ], [ "FGFETShapeN", "de.neemann.digital.draw.shapes" ], [ "TransGateShape", "de.neemann.digital.draw.shapes" ], [ "DiodeShape", "de.neemann.digital.draw.shapes" ], [ "ResetShape", "de.neemann.digital.draw.shapes" ], [ "DiodeForewardShape", "de.neemann.digital.draw.shapes" ], [ "SixteenShape", "de.neemann.digital.draw.shapes" ], [ "CustomCircuitShapeType", "de.neemann.digital.draw.shapes" ], [ "InteractorInterface", "de.neemann.digital.draw.shapes" ], [ "ShapeSpecificMatch", "de.neemann.digital.draw.shapes" ], [ "LEDShape", "de.neemann.digital.draw.shapes" ], [ "ClockShape", "de.neemann.digital.draw.shapes" ], [ "RGBLEDShape", "de.neemann.digital.draw.shapes" ], [ "RotEncoderShape", "de.neemann.digital.draw.shapes" ], [ "IEEEGenericShape", "de.neemann.digital.draw.shapes.ieee" ], [ "IEEEOrShape", "de.neemann.digital.draw.shapes.ieee" ], [ "IEEENotShape", "de.neemann.digital.draw.shapes.ieee" ], [ "IEEEAndShape", "de.neemann.digital.draw.shapes.ieee" ], [ "IEEEXOrShape", "de.neemann.digital.draw.shapes.ieee" ], [ "ObservableValueReader", "de.neemann.digital.draw.shapes" ], [ "SvgTemplate", "de.neemann.digital.draw.shapes.custom.svg" ], [ "TransformParser", "de.neemann.digital.draw.shapes.custom.svg" ], [ "Context", "de.neemann.digital.draw.shapes.custom.svg" ], [ "SvgException", "de.neemann.digital.draw.shapes.custom.svg" ], [ "SvgImporter", "de.neemann.digital.draw.shapes.custom.svg" ], [ "CustomShapeDescription", "de.neemann.digital.draw.shapes.custom" ], [ "CustomShape", "de.neemann.digital.draw.shapes.custom" ], [ "FGFETShapeP", "de.neemann.digital.draw.shapes" ], [ "OutputShape", "de.neemann.digital.draw.shapes" ], [ "GroundShape", "de.neemann.digital.draw.shapes" ], [ "AsyncClockShape", "de.neemann.digital.draw.shapes" ], [ "Shape", "de.neemann.digital.draw.shapes" ], [ "MissingShape", "de.neemann.digital.draw.shapes" ], [ "ShapeFactory", "de.neemann.digital.draw.shapes" ], [ "PullDownShape", "de.neemann.digital.draw.shapes" ], [ "DriverShape", "de.neemann.digital.draw.shapes" ], [ "SevenShape", "de.neemann.digital.draw.shapes" ], [ "DataShape", "de.neemann.digital.draw.shapes" ], [ "DotCreator", "de.neemann.digital.draw.elements" ], [ "Wire", "de.neemann.digital.draw.elements" ], [ "Movable", "de.neemann.digital.draw.elements" ], [ "Pins", "de.neemann.digital.draw.elements" ], [ "Circuit", "de.neemann.digital.draw.elements" ], [ "Tunnel", "de.neemann.digital.draw.elements" ], [ "PinException", "de.neemann.digital.draw.elements" ], [ "ElementOrder", "de.neemann.digital.draw.elements" ], [ "VisualElement", "de.neemann.digital.draw.elements" ], [ "Pin", "de.neemann.digital.draw.elements" ], [ "IOState", "de.neemann.digital.draw.elements" ], [ "WireMerger", "de.neemann.digital.draw.elements" ], [ "WireConsistencyChecker", "de.neemann.digital.draw.elements" ], [ "AsyncSequentialClock", "de.neemann.digital.draw.model" ], [ "ModelEntry", "de.neemann.digital.draw.model" ], [ "Net", "de.neemann.digital.draw.model" ], [ "ModelCreator", "de.neemann.digital.draw.model" ], [ "InverterConfig", "de.neemann.digital.draw.model" ], [ "NetList", "de.neemann.digital.draw.model" ], [ "RealTimeClock", "de.neemann.digital.draw.model" ], [ "Polygon", "de.neemann.digital.draw.graphics" ], [ "Orientation", "de.neemann.digital.draw.graphics" ], [ "Vector", "de.neemann.digital.draw.graphics" ], [ "SVGSettings", "de.neemann.digital.draw.graphics" ], [ "Transform", "de.neemann.digital.draw.graphics" ], [ "ColorKey", "de.neemann.digital.draw.graphics" ], [ "ExportFactory", "de.neemann.digital.draw.graphics" ], [ "GraphicsImage", "de.neemann.digital.draw.graphics" ], [ "VectorInterface", "de.neemann.digital.draw.graphics" ], [ "TextFormatSVG", "de.neemann.digital.draw.graphics" ], [ "TransformMatrix", "de.neemann.digital.draw.graphics" ], [ "TextFormatLaTeX", "de.neemann.digital.draw.graphics" ], [ "GraphicMinMax", "de.neemann.digital.draw.graphics" ], [ "GraphicTransform", "de.neemann.digital.draw.graphics" ], [ "ColorScheme", "de.neemann.digital.draw.graphics" ], [ "Style", "de.neemann.digital.draw.graphics" ], [ "GraphicSkipLines", "de.neemann.digital.draw.graphics.linemerger" ], [ "GraphicLineCollector", "de.neemann.digital.draw.graphics.linemerger" ], [ "PolygonConverter", "de.neemann.digital.draw.graphics" ], [ "VectorFloat", "de.neemann.digital.draw.graphics" ], [ "TransformRotate", "de.neemann.digital.draw.graphics" ], [ "Graphic", "de.neemann.digital.draw.graphics" ], [ "ColorStyleHighContrast", "de.neemann.digital.draw.graphics" ], [ "Parser", "de.neemann.digital.draw.graphics.text" ], [ "ParseException", "de.neemann.digital.draw.graphics.text" ], [ "PlainTextFormatter", "de.neemann.digital.draw.graphics.text.formatter" ], [ "SVGFormatter", "de.neemann.digital.draw.graphics.text.formatter" ], [ "GraphicsFormatter", "de.neemann.digital.draw.graphics.text.formatter" ], [ "LaTeXFormatter", "de.neemann.digital.draw.graphics.text.formatter" ], [ "Decorate", "de.neemann.digital.draw.graphics.text.text" ], [ "Text", "de.neemann.digital.draw.graphics.text.text" ], [ "Index", "de.neemann.digital.draw.graphics.text.text" ], [ "Sentence", "de.neemann.digital.draw.graphics.text.text" ], [ "Blank", "de.neemann.digital.draw.graphics.text.text" ], [ "Character", "de.neemann.digital.draw.graphics.text.text" ], [ "ExpressionToText", "de.neemann.digital.draw.graphics.text.text" ], [ "Simple", "de.neemann.digital.draw.graphics.text.text" ], [ "Export", "de.neemann.digital.draw.graphics" ], [ "ColorStyleMonochrome", "de.neemann.digital.draw.graphics" ], [ "TransformTranslate", "de.neemann.digital.draw.graphics" ], [ "GraphicSVG", "de.neemann.digital.draw.graphics" ], [ "GraphicSwing", "de.neemann.digital.draw.graphics" ], [ "PolygonParser", "de.neemann.digital.draw.graphics" ], [ "SVGTokenizer", "de.neemann.digital.draw.graphics" ], [ "GifSequenceWriter", "de.neemann.digital.draw.gif" ], [ "GifExporter", "de.neemann.digital.draw.gif" ], [ "ConfigCache", "de.neemann.digital.toolchain" ], [ "Configuration", "de.neemann.digital.toolchain" ], [ "Command", "de.neemann.digital.toolchain" ], [ "FileToCreate", "de.neemann.digital.toolchain" ] ],
  "tokensProjectClassesNonPrivateStaticNonVoidMethods" : [ [ "getMouse", "de.neemann.gui", "Mouse", "static Mouse getMouse()" ], [ "create", "de.neemann.gui", "IconCreator", "public static Icon create(String name)" ], [ "createImage", "de.neemann.gui", "IconCreator", "public static Image createImage(String name)" ], [ "createImages", "de.neemann.gui", "IconCreator", "public static ArrayList<Image> createImages(String... names)" ], [ "getCTRLMask", "de.neemann.gui", "ToolTipAction", "public static int getCTRLMask()" ], [ "checkForSave", "de.neemann.gui", "ClosingWindowListener", "public static boolean checkForSave(JFrame parent, ConfirmSave confirmSave)" ], [ "getParentWindow", "de.neemann.gui", "ErrorMessage", "public static Window getParentWindow(Component parent)" ], [ "getInstance", "de.neemann.gui", "Screen", "public static Screen getInstance()" ], [ "getDefaultFontScaling", "de.neemann.gui", "Screen", "public static int getDefaultFontScaling()" ], [ "isLinux", "de.neemann.gui", "Screen", "public static boolean isLinux()" ], [ "isMac", "de.neemann.gui", "Screen", "public static boolean isMac()" ], [ "getInstance", "de.neemann.gui", "InfoDialog", "public static InfoDialog getInstance()" ], [ "read", "de.neemann.digital.core.memory.importer", "Importer", "public static DataField read(File hexFile, int dataBits, boolean bigEndian) throws IOException" ], [ "getOriginOf", "de.neemann.digital.core", "ExceptionWithOrigin", "public static String getOriginOf(Throwable e)" ], [ "zMaskString", "de.neemann.digital.core", "ObservableValue", "static String zMaskString(long value, long highZ, int bits)" ], [ "getInstance", "de.neemann.digital.core", "GlobalValues", "public static GlobalValues getInstance()" ], [ "getInstance", "de.neemann.digital.core.io", "MIDIHelper", "public static MIDIHelper getInstance()" ], [ "input", "de.neemann.digital.core.element", "PinInfo", "public static PinInfo input(String name)" ], [ "input", "de.neemann.digital.core.element", "PinInfo", "public static PinInfo input(String name, String description)" ], [ "output", "de.neemann.digital.core.element", "PinInfo", "public static PinInfo output(String name)" ], [ "isInOut", "de.neemann.digital.core.element", "PinDescription", "public static boolean isInOut(Direction a, Direction b)" ], [ "isInOut", "de.neemann.digital.core.element", "Direction", "public static boolean isInOut(Direction a, Direction b)" ], [ "getKeyByName", "de.neemann.digital.core.element", "Keys", "public static Key getKeyByName(String name)" ], [ "getKeys", "de.neemann.digital.core.element", "Keys", "public static Iterable<Key> getKeys()" ], [ "combine", "de.neemann.digital.core.element", "ImmutableList", "public static <T> ImmutableList<T> combine(ImmutableList<T> a, ImmutableList<T> b)" ], [ "createSwitchModel", "de.neemann.digital.core.switching", "PlainSwitch", "static SwitchModel createSwitchModel(ObservableValue input1, ObservableValue input2, ObservableValue output1, ObservableValue output2) throws NodeException" ], [ "createOneToN", "de.neemann.digital.core.wiring", "Splitter", "public static Splitter createOneToN(int bits)" ], [ "createNToOne", "de.neemann.digital.core.wiring", "Splitter", "public static Splitter createNToOne(int bits)" ], [ "ovs", "de.neemann.digital.core", "ObservableValues", "public static ObservableValues ovs(ObservableValue... items)" ], [ "toShortHex", "de.neemann.digital.core", "IntFormat", "public static String toShortHex(long value)" ], [ "up", "de.neemann.digital.core", "Bits", "public static long up(long val, int bits)" ], [ "down", "de.neemann.digital.core", "Bits", "public static long down(long val, int bits)" ], [ "mask", "de.neemann.digital.core", "Bits", "public static long mask(int bits)" ], [ "signedFlagMask", "de.neemann.digital.core", "Bits", "public static long signedFlagMask(int bits)" ], [ "isNegative", "de.neemann.digital.core", "Bits", "public static boolean isNegative(long value, int bits)" ], [ "signExtend", "de.neemann.digital.core", "Bits", "public static long signExtend(long value, int bits)" ], [ "binLn2", "de.neemann.digital.core", "Bits", "public static int binLn2(long b)" ], [ "removeBitFromValue", "de.neemann.digital.core", "Bits", "public static int removeBitFromValue(int value, int bit)" ], [ "decode", "de.neemann.digital.core", "Bits", "public static long decode(String str) throws NumberFormatException" ], [ "decode", "de.neemann.digital.core", "Bits", "public static long decode(String str, boolean parseFloats) throws NumberFormatException" ], [ "decode", "de.neemann.digital.core", "Bits", "public static long decode(String str, int p, int radix) throws NumberFormatException" ], [ "getCode", "de.neemann.digital.core.extern", "Application", "static String getCode(ElementAttributes attr, File root) throws IOException" ], [ "readCode", "de.neemann.digital.core.extern", "Application", "static String readCode(File file) throws IOException" ], [ "create", "de.neemann.digital.core.extern", "Application", "static Application create(Type type, ElementAttributes attr)" ], [ "start", "de.neemann.digital.core.extern", "ProcessStarter", "public static String start(File dir, String... args) throws IOException" ], [ "joinStrings", "de.neemann.digital.core.extern", "ProcessStarter", "public static String joinStrings(String... strings)" ], [ "fromString", "de.neemann.digital.cli.cli", "Argument", "public static Object fromString(String val, Object defValue) throws CLIException" ], [ "fac", "de.neemann.digital.fsm", "Optimizer", "public static long fac(int n)" ], [ "getTimeComplexity", "de.neemann.digital.fsm", "Optimizer", "public static long getTimeComplexity(FSM fsm)" ], [ "calcComplexity", "de.neemann.digital.fsm", "Optimizer", "static int calcComplexity(FSM fsm, boolean out) throws ExpressionException, FiniteStateMachineException, FormatterException" ], [ "blink", "de.neemann.digital.fsm", "FSMDemos", "public static FSM blink()" ], [ "rotDecoder", "de.neemann.digital.fsm", "FSMDemos", "public static FSM rotDecoder()" ], [ "counter", "de.neemann.digital.fsm", "FSMDemos", "public static FSM counter(int n)" ], [ "trafficLight", "de.neemann.digital.fsm", "FSMDemos", "public static FSM trafficLight()" ], [ "trafficLightMedwedew", "de.neemann.digital.fsm", "FSMDemos", "public static FSM trafficLightMedwedew()" ], [ "selCounter", "de.neemann.digital.fsm", "FSMDemos", "public static FSM selCounter()" ], [ "stepper", "de.neemann.digital.fsm", "FSMDemos", "public static FSM stepper()" ], [ "stepperMedwedew", "de.neemann.digital.fsm", "FSMDemos", "public static FSM stepperMedwedew()" ], [ "getxStream", "de.neemann.digital.fsm", "FSM", "public static XStream getxStream()" ], [ "loadFSM", "de.neemann.digital.fsm", "FSM", "public static FSM loadFSM(File filename) throws IOException" ], [ "loadFSM", "de.neemann.digital.fsm", "FSM", "public static FSM loadFSM(InputStream in) throws IOException" ], [ "get", "de.neemann.digital.lang", "Lang", "public static String get(String key, Object... params)" ], [ "getNull", "de.neemann.digital.lang", "Lang", "public static String getNull(String key, Object... params)" ], [ "getBundle", "de.neemann.digital.lang", "Lang", "public static Bundle getBundle()" ], [ "currentLanguage", "de.neemann.digital.lang", "Lang", "public static Language currentLanguage()" ], [ "evalMultilingualContent", "de.neemann.digital.lang", "Lang", "public static String evalMultilingualContent(String text)" ], [ "evalMultilingualContent", "de.neemann.digital.lang", "Lang", "static String evalMultilingualContent(String text, Language currentLanguage)" ], [ "lowest", "de.neemann.digital.testing.parser", "OperatorPrecedence", "public static OperatorPrecedence lowest()" ], [ "addOne", "de.neemann.digital.analyse", "ModelAnalyser", "public static String addOne(String name)" ], [ "readCSV", "de.neemann.digital.analyse", "CSVImporter", "public static TruthTable readCSV(File file) throws IOException" ], [ "readCSV", "de.neemann.digital.analyse", "CSVImporter", "public static TruthTable readCSV(String csv) throws IOException" ], [ "readCSV", "de.neemann.digital.analyse", "CSVImporter", "public static TruthTable readCSV(Reader csv) throws IOException" ], [ "createDoubledValues", "de.neemann.digital.analyse.quinemc", "BoolTableByteArray", "public static BoolTableByteArray createDoubledValues(BoolTable values)" ], [ "simplify", "de.neemann.digital.analyse.quinemc", "QuineMcCluskey", "public static Expression simplify(Expression expression) throws ExpressionException" ], [ "addAnd", "de.neemann.digital.analyse.quinemc", "QuineMcCluskey", "public static Expression addAnd(Expression e, Iterable<TableRow> rows, List<Variable> variables)" ], [ "value", "de.neemann.digital.analyse.quinemc", "ThreeStateValue", "public static ThreeStateValue value(boolean bool)" ], [ "value", "de.neemann.digital.analyse.quinemc", "ThreeStateValue", "public static ThreeStateValue value(int value)" ], [ "doImplicitTypeCasts", "de.neemann.digital.analyse", "SubstituteLibrary", "static Object doImplicitTypeCasts(Class<?> expectedClass, Object val)" ], [ "or", "de.neemann.digital.analyse.expression", "Operation", "public static Expression or(Iterable<Expression> exp)" ], [ "or", "de.neemann.digital.analyse.expression", "Operation", "public static Expression or(Expression... exp)" ], [ "xor", "de.neemann.digital.analyse.expression", "Operation", "public static Expression xor(Expression a, Expression b)" ], [ "orNoMerge", "de.neemann.digital.analyse.expression", "Operation", "public static Expression orNoMerge(Expression... exp)" ], [ "and", "de.neemann.digital.analyse.expression", "Operation", "public static Expression and(Iterable<Expression> exp)" ], [ "and", "de.neemann.digital.analyse.expression", "Operation", "public static Expression and(Expression... exp)" ], [ "andNoMerge", "de.neemann.digital.analyse.expression", "Operation", "public static Expression andNoMerge(Expression... exp)" ], [ "modifyExpression", "de.neemann.digital.analyse.expression.modify", "ExpressionModifier", "static Expression modifyExpression(Expression expression, ExpressionModifier modifier)" ], [ "modifyExpression", "de.neemann.digital.analyse.expression.modify", "ExpressionModifier", "static Expression modifyExpression(Expression expression, ExpressionModifier... modifiers)" ], [ "v", "de.neemann.digital.analyse.expression", "Variable", "public static Variable v(String name)" ], [ "vars", "de.neemann.digital.analyse.expression", "Variable", "public static ArrayList<Variable> vars(int n)" ], [ "vars", "de.neemann.digital.analyse.expression", "Variable", "public static ArrayList<Variable> vars(String... names)" ], [ "isVar", "de.neemann.digital.analyse.expression", "Variable", "public static boolean isVar(Expression e)" ], [ "isVarOrNotVar", "de.neemann.digital.analyse.expression", "Variable", "public static boolean isVarOrNotVar(Expression e)" ], [ "getDefaultFormat", "de.neemann.digital.analyse.expression.format", "FormatToExpression", "public static FormatToExpression getDefaultFormat()" ], [ "defaultFormat", "de.neemann.digital.analyse.expression.format", "FormatToExpression", "public static String defaultFormat(Expression exp)" ], [ "not", "de.neemann.digital.analyse.expression", "Not", "public static Expression not(Expression a)" ], [ "readFromFile", "de.neemann.digital.analyse", "TruthTable", "public static TruthTable readFromFile(File filename) throws IOException" ], [ "create", "de.neemann.digital.analyse", "SplitPinString", "public static SplitPinString create(Signal s)" ], [ "create", "de.neemann.digital.analyse", "SplitPinString", "public static SplitPinString create(String pinStr)" ], [ "checkSuffix", "de.neemann.digital.gui", "SaveAsHelper", "public static File checkSuffix(File filename, String suffix)" ], [ "addF1Traversal", "de.neemann.digital.gui.components", "EditorFactory", "public static <TC extends JTextComponent> TC addF1Traversal(TC text)" ], [ "createUndoManager", "de.neemann.digital.gui.components", "EditorFactory", "public static UndoManager createUndoManager(JTextComponent text)" ], [ "create", "de.neemann.digital.gui.components.modification", "ModifyInsertWires", "public static Modification<Circuit> create(List<Wire> newWires)" ], [ "getToolTipName", "de.neemann.digital.gui.components.modification", "ModificationOfVisualElement", "public static String getToolTipName(VisualElement ve)" ], [ "getTerminal", "de.neemann.digital.gui.components.terminal", "TerminalDialog", "static TerminalInterface getTerminal(Model model, ElementAttributes attr)" ], [ "createList", "de.neemann.digital.gui.components", "CircuitTransferable", "public static ArrayList<Movable> createList(Object data, ShapeFactory shapeFactory) throws IOException" ], [ "createURLStreamHandlerFactory", "de.neemann.digital.gui.components", "ElementHelpDialog", "public static URLStreamHandlerFactory createURLStreamHandlerFactory()" ], [ "getImage", "de.neemann.digital.gui.components", "ElementHelpDialog", "static BufferedImage getImage(String name)" ], [ "getImage", "de.neemann.digital.gui.components", "MyURLStreamHandlerFactory", "static BufferedImage getImage(String name)" ], [ "isSequentialVar", "de.neemann.digital.gui.components.table", "ExpressionListenerJK", "public static String isSequentialVar(String name)" ], [ "getAttrList", "de.neemann.digital.gui.components", "CircuitComponent", "public static ArrayList<Key> getAttrList()" ], [ "raster", "de.neemann.digital.gui.components", "CircuitComponent", "public static Vector raster(Vector pos)" ], [ "createLiveDialog", "de.neemann.digital.gui.components.data", "GraphDialog", "public static GraphDialog createLiveDialog(JFrame owner, Model model, boolean microStep, List<String> ordering, int sampleSize)" ], [ "createColumnsInfo", "de.neemann.digital.gui.components.data", "GraphDialog", "static ValueTable.ColumnInfo[] createColumnsInfo(ArrayList<Signal> signals)" ], [ "create", "de.neemann.digital.gui.components", "CopiedElementLabelRenamer", "static LabelInstance create(VisualElement ve)" ], [ "create", "de.neemann.digital.gui.components", "CopiedElementLabelRenamer", "static LabelInstance create(String elementName, String fullLabel)" ], [ "create", "de.neemann.digital.gui.components", "LabelInstance", "static LabelInstance create(VisualElement ve)" ], [ "create", "de.neemann.digital.gui.components", "LabelInstance", "static LabelInstance create(String elementName, String fullLabel)" ], [ "isExperimentalMode", "de.neemann.digital.gui", "Main", "public static boolean isExperimentalMode()" ], [ "getInstance", "de.neemann.digital.gui", "WindowManager", "public static WindowManager getInstance()" ], [ "getInstance", "de.neemann.digital.gui", "Settings", "public static Settings getInstance()" ], [ "getRange", "de.neemann.digital.hdl.verilog2", "VerilogCreator", "public static String getRange(int bits)" ], [ "getType", "de.neemann.digital.hdl.verilog2", "VerilogCreator", "public static String getType(HDLPort.Direction def, HDLPort.Direction dir, int bits)" ], [ "value", "de.neemann.digital.hdl.verilog2", "VerilogCreator", "public static String value(ExprConstant con)" ], [ "value", "de.neemann.digital.hdl.verilog2", "VerilogCreator", "public static String value(long val, int bits)" ], [ "neededFileName", "de.neemann.digital.hdl.verilog2.lib", "VerilogTemplate", "public static String neededFileName(String elementName)" ], [ "createFromJar", "de.neemann.digital.hdl.hgs", "Parser", "public static Statement createFromJar(String path, ClassLoader cl) throws IOException, ParserException" ], [ "createFromJarStatic", "de.neemann.digital.hdl.hgs", "Parser", "public static Statement createFromJarStatic(String path)" ], [ "isWhiteSpace", "de.neemann.digital.hdl.hgs", "Tokenizer", "public static boolean isWhiteSpace(int c)" ], [ "toLong", "de.neemann.digital.hdl.hgs", "Value", "public static long toLong(Object value) throws HGSEvalException" ], [ "toDouble", "de.neemann.digital.hdl.hgs", "Value", "public static double toDouble(Object value) throws HGSEvalException" ], [ "toInt", "de.neemann.digital.hdl.hgs", "Value", "public static int toInt(Object value) throws HGSEvalException" ], [ "toBool", "de.neemann.digital.hdl.hgs", "Value", "public static boolean toBool(Object value) throws HGSEvalException" ], [ "toString", "de.neemann.digital.hdl.hgs", "Value", "public static String toString(Object value) throws HGSEvalException" ], [ "toArray", "de.neemann.digital.hdl.hgs", "Value", "public static HGSArray toArray(Object value) throws HGSEvalException" ], [ "toMap", "de.neemann.digital.hdl.hgs", "Value", "public static HGSMap toMap(Object value) throws HGSEvalException" ], [ "equals", "de.neemann.digital.hdl.hgs", "Value", "public static boolean equals(Object a, Object b)" ], [ "add", "de.neemann.digital.hdl.hgs", "Value", "public static Object add(Object a, Object b) throws HGSEvalException" ], [ "sub", "de.neemann.digital.hdl.hgs", "Value", "public static Object sub(Object a, Object b) throws HGSEvalException" ], [ "mul", "de.neemann.digital.hdl.hgs", "Value", "public static Object mul(Object a, Object b) throws HGSEvalException" ], [ "div", "de.neemann.digital.hdl.hgs", "Value", "public static Object div(Object a, Object b) throws HGSEvalException" ], [ "or", "de.neemann.digital.hdl.hgs", "Value", "public static Object or(Object a, Object b) throws HGSEvalException" ], [ "xor", "de.neemann.digital.hdl.hgs", "Value", "public static Object xor(Object a, Object b) throws HGSEvalException" ], [ "and", "de.neemann.digital.hdl.hgs", "Value", "public static Object and(Object a, Object b) throws HGSEvalException" ], [ "not", "de.neemann.digital.hdl.hgs", "Value", "public static Object not(Object value) throws HGSEvalException" ], [ "neg", "de.neemann.digital.hdl.hgs", "Value", "public static Object neg(Object value) throws HGSEvalException" ], [ "less", "de.neemann.digital.hdl.hgs", "Value", "public static boolean less(Object a, Object b) throws HGSEvalException" ], [ "lessEqual", "de.neemann.digital.hdl.hgs", "Value", "public static boolean lessEqual(Object a, Object b) throws HGSEvalException" ], [ "trimRight", "de.neemann.digital.hdl.hgs", "Value", "public static String trimRight(String str)" ], [ "trimLeft", "de.neemann.digital.hdl.hgs", "Value", "public static String trimLeft(String str)" ], [ "getType", "de.neemann.digital.hdl.vhdl2", "VHDLCreator", "public static String getType(int bits)" ], [ "value", "de.neemann.digital.hdl.vhdl2", "VHDLCreator", "public static String value(ExprConstant con)" ], [ "value", "de.neemann.digital.hdl.vhdl2", "VHDLCreator", "public static String value(long val, int bits)" ], [ "isTemplate", "de.neemann.digital.hdl.vhdl2.entities", "VHDLTemplate", "public static boolean isTemplate(ElementTypeDescription etd)" ], [ "neededFileName", "de.neemann.digital.hdl.vhdl2.entities", "VHDLTemplate", "public static String neededFileName(String elementName)" ], [ "zero", "de.neemann.digital.hdl.vhdl2.entities", "VHDLTemplateFunctions", "public static String zero(long bits)" ], [ "value", "de.neemann.digital.hdl.vhdl2.entities", "VHDLTemplateFunctions", "public static String value(long val, long bits)" ], [ "genericType", "de.neemann.digital.hdl.vhdl2.entities", "VHDLTemplateFunctions", "public static String genericType(long n)" ], [ "type", "de.neemann.digital.hdl.vhdl2.entities", "VHDLTemplateFunctions", "public static String type(long n)" ], [ "isVar", "de.neemann.digital.hdl.model2.expression", "Expression", "static boolean isVar(Expression expr, HDLNet net)" ], [ "isConstant", "de.neemann.digital.hdl.model2.expression", "ExprConstant", "public static ExprConstant isConstant(HDLNode node)" ], [ "getHighZ", "de.neemann.digital.data", "Value", "public static Value getHighZ()" ], [ "calcBackOffset", "de.neemann.digital.builder.circuit", "FragmentExpression", "static int calcBackOffset(int size, int i)" ], [ "isXNor", "de.neemann.digital.builder.circuit", "CircuitBuilder", "static boolean isXNor(long[] data)" ], [ "isXor", "de.neemann.digital.builder.circuit", "CircuitBuilder", "static boolean isXor(long[] data)" ], [ "getLibPath", "de.neemann.digital.draw.library", "ElementLibrary", "public static File getLibPath()" ], [ "createCustomDescription", "de.neemann.digital.draw.library", "ElementLibrary", "public static ElementTypeDescriptionCustom createCustomDescription(File file, Circuit circuit, ElementLibrary library) throws PinException" ], [ "createDeclarationDefault", "de.neemann.digital.draw.library", "ElementTypeDescriptionCustom", "public static String createDeclarationDefault(Circuit circuit) throws NodeException" ], [ "getInstance", "de.neemann.digital.draw.library", "NumStringComparator", "public static NumStringComparator getInstance()" ], [ "compareStr", "de.neemann.digital.draw.library", "NumStringComparator", "public static int compareStr(String a, String b)" ], [ "createPins", "de.neemann.digital.draw.shapes", "GenericShape", "public static Pins createPins(PinDescriptions inputs, PinDescriptions outputs, boolean invert, InverterConfig ic, boolean wideShape)" ], [ "readStyle", "de.neemann.digital.draw.shapes.custom.svg", "Context", "static Context readStyle(Context context, String style) throws SvgException" ], [ "getOutSize", "de.neemann.digital.draw.shapes", "OutputShape", "public static int getOutSize(boolean small)" ], [ "getOutStyle", "de.neemann.digital.draw.shapes", "OutputShape", "public static Style getOutStyle(boolean small)" ], [ "getOutRad", "de.neemann.digital.draw.shapes", "OutputShape", "public static Vector getOutRad(boolean small)" ], [ "createTransform", "de.neemann.digital.draw.shapes", "SevenShape", "static Transform createTransform(int size)" ], [ "getxStream", "de.neemann.digital.draw.elements", "Circuit", "public static XStream getxStream()" ], [ "loadCircuit", "de.neemann.digital.draw.elements", "Circuit", "public static Circuit loadCircuit(File filename, ShapeFactory shapeFactory) throws IOException" ], [ "loadCircuit", "de.neemann.digital.draw.elements", "Circuit", "public static Circuit loadCircuit(InputStream in, ShapeFactory shapeFactory) throws IOException" ], [ "fixGenerics", "de.neemann.digital.draw.model", "ModelCreator", "public static Circuit fixGenerics(Circuit circuit, LibraryInterface library) throws NodeException, ElementNotFoundException" ], [ "createFromPath", "de.neemann.digital.draw.graphics", "Polygon", "public static Polygon createFromPath(String path)" ], [ "vec", "de.neemann.digital.draw.graphics", "Vector", "public static Vector vec(int x, int y)" ], [ "min", "de.neemann.digital.draw.graphics", "Vector", "public static Vector min(VectorInterface... p)" ], [ "max", "de.neemann.digital.draw.graphics", "Vector", "public static Vector max(VectorInterface... p)" ], [ "width", "de.neemann.digital.draw.graphics", "Vector", "public static Vector width(VectorInterface... p)" ], [ "add", "de.neemann.digital.draw.graphics", "Vector", "public static List<Vector> add(List<Vector> vectors, Vector offs)" ], [ "getInstance", "de.neemann.digital.draw.graphics", "SVGSettings", "public static SVGSettings getInstance()" ], [ "createKeyList", "de.neemann.digital.draw.graphics", "SVGSettings", "public static List<Key> createKeyList()" ], [ "mul", "de.neemann.digital.draw.graphics", "Transform", "static Transform mul(Transform t1, Transform t2)" ], [ "rotate", "de.neemann.digital.draw.graphics", "TransformMatrix", "public static TransformMatrix rotate(double w)" ], [ "scale", "de.neemann.digital.draw.graphics", "TransformMatrix", "public static TransformMatrix scale(float sx, float sy)" ], [ "getTextWidth", "de.neemann.digital.draw.graphics", "GraphicMinMax", "public static int getTextWidth(String text, Style style)" ], [ "getSelected", "de.neemann.digital.draw.graphics", "ColorScheme", "public static ColorScheme getSelected()" ], [ "getWireStyle", "de.neemann.digital.draw.graphics", "Style", "public static Style getWireStyle(Value value)" ], [ "format", "de.neemann.digital.draw.graphics.text.formatter", "PlainTextFormatter", "public static String format(Text text)" ], [ "format", "de.neemann.digital.draw.graphics.text.formatter", "PlainTextFormatter", "public static String format(Text text, FormatToExpression format)" ], [ "format", "de.neemann.digital.draw.graphics.text.formatter", "SVGFormatter", "public static String format(Text text)" ], [ "createFragment", "de.neemann.digital.draw.graphics.text.formatter", "GraphicsFormatter", "public static Fragment createFragment(Graphics2D gr, String text)" ], [ "createFragment", "de.neemann.digital.draw.graphics.text.formatter", "GraphicsFormatter", "public static Fragment createFragment(Graphics2D gr, Expression expression) throws FormatterException" ], [ "createFragment", "de.neemann.digital.draw.graphics.text.formatter", "GraphicsFormatter", "public static Fragment createFragment(FontSizer sizer, Font font, String text)" ], [ "format", "de.neemann.digital.draw.graphics.text.formatter", "LaTeXFormatter", "public static String format(Expression exp)" ], [ "format", "de.neemann.digital.draw.graphics.text.formatter", "LaTeXFormatter", "public static String format(Text text)" ], [ "math", "de.neemann.digital.draw.graphics.text.text", "Decorate", "public static Text math(Text t)" ], [ "escapeXML", "de.neemann.digital.draw.graphics", "GraphicSVG", "public static String escapeXML(String text)" ], [ "getMirrorYOrientation", "de.neemann.digital.draw.graphics", "GraphicSwing", "static int getMirrorYOrientation(Orientation orientation, VectorInterface p1, VectorInterface p2, VectorInterface p3)" ], [ "load", "de.neemann.digital.toolchain", "Configuration", "public static Configuration load(File file) throws IOException" ], [ "load", "de.neemann.digital.toolchain", "Configuration", "public static Configuration load(InputStream in) throws IOException" ] ],
  "tokensProjectClassesNonPrivateStaticAttributes" : [ [ "UNKNOWN", "de.neemann.gui", "InfoDialog", "public static final String UNKNOWN = \"unknown\";" ], [ "DESCRIPTION", "de.neemann.digital.core.pld", "PullDown", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"PullDown\", PullDown.class).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS);" ], [ "DESCRIPTION", "de.neemann.digital.core.pld", "Diode", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Diode.class).addAttribute(Keys.ROTATE).addAttribute(Keys.BLOWN);" ], [ "DESCRIPTION", "de.neemann.digital.core.pld", "DiodeBackward", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(DiodeBackward.class, input(\"in\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BLOWN);" ], [ "DESCRIPTION", "de.neemann.digital.core.pld", "PullUp", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"PullUp\", PullUp.class).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS);" ], [ "DESCRIPTION", "de.neemann.digital.core.pld", "DiodeForward", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(DiodeForward.class, input(\"in\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BLOWN);" ], [ "DESCRIPTION", "de.neemann.digital.core.memory", "RAMSinglePort", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(RAMSinglePort.class, input(\"A\"), input(\"str\"), input(\"C\").setClock(), input(\"ld\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.ADDR_BITS).addAttribute(Keys.INT_FORMAT).addAttribute(Keys.IS_PROGRAM_MEMORY).addAttribute(Keys.LABEL);" ], [ "DESCRIPTION", "de.neemann.digital.core.memory", "ROMDualPort", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(ROMDualPort.class, input(\"A1\"), input(\"s1\"), input(\"A2\"), input(\"s2\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.ADDR_BITS).addAttribute(Keys.LABEL).addAttribute(Keys.DATA).addAttribute(Keys.INT_FORMAT).addAttribute(Keys.IS_PROGRAM_MEMORY).addAttribute(Keys.AUTO_RELOAD_ROM).addAttribute(Keys.LAST_DATA_FILE).addAttribute(Keys.BIG_ENDIAN);" ], [ "DESCRIPTION", "de.neemann.digital.core.memory", "RAMDualAccess", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(RAMDualAccess.class, input(\"str\"), input(\"C\").setClock(), input(\"ld\"), input(\"1A\"), input(\"1Din\"), input(\"2A\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.ADDR_BITS).addAttribute(Keys.IS_PROGRAM_MEMORY).addAttribute(Keys.LABEL).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.memory", "CounterPreset", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(CounterPreset.class, input(\"en\"), input(\"C\").setClock(), input(\"dir\"), input(\"in\"), input(\"ld\"), input(\"clr\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.MAX_VALUE).addAttribute(Keys.INVERTER_CONFIG).addAttribute(Keys.LABEL).addAttribute(Keys.VALUE_IS_PROBE).addAttribute(Keys.IS_PROGRAM_COUNTER).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.memory", "RAMDualPort", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(RAMDualPort.class, input(\"A\"), input(\"Din\"), input(\"str\"), input(\"C\").setClock(), input(\"ld\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.ADDR_BITS).addAttribute(Keys.INT_FORMAT).addAttribute(Keys.IS_PROGRAM_MEMORY).addAttribute(Keys.LABEL).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.memory", "Register", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Register.class, input(\"D\"), input(\"C\").setClock(), input(\"en\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).addAttribute(Keys.INVERTER_CONFIG).addAttribute(Keys.IS_PROGRAM_COUNTER).addAttribute(Keys.VALUE_IS_PROBE).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.memory", "LookUpTable", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(LookUpTable.class) {\n\n    @Override\n    public PinDescriptions getInputDescription(ElementAttributes elementAttributes) {\n        int size = elementAttributes.get(Keys.INPUT_COUNT);\n        PinDescription[] names = new PinDescription[size];\n        for (int i = 0; i < size; i++) names[i] = input(Integer.toString(i), Lang.get(\"elem_LookUpTable_pin_in\", i));\n        return new PinDescriptions(names);\n    }\n}.addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.LUT_INPUT_COUNT).addAttribute(Keys.LABEL).addAttribute(Keys.DATA).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.memory", "BlockRAMDualPort", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(BlockRAMDualPort.class, input(\"A\"), input(\"Din\"), input(\"str\"), input(\"C\").setClock()).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.ADDR_BITS).addAttribute(Keys.IS_PROGRAM_MEMORY).addAttribute(Keys.LABEL).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.memory", "Counter", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Counter.class, input(\"en\"), input(\"C\").setClock(), input(\"clr\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.INVERTER_CONFIG).addAttribute(Keys.LABEL).addAttribute(Keys.VALUE_IS_PROBE).addAttribute(Keys.IS_PROGRAM_COUNTER).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.memory", "EEPROM", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(EEPROM.class, input(\"A\"), input(\"CS\"), input(\"WE\").setClock(), input(\"OE\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.ADDR_BITS).addAttribute(Keys.LABEL).addAttribute(Keys.INT_FORMAT).addAttribute(Keys.IS_PROGRAM_MEMORY).addAttribute(Keys.INVERTER_CONFIG).addAttribute(Keys.DATA);" ], [ "DESCRIPTION", "de.neemann.digital.core.memory", "RAMAsync", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(RAMAsync.class, input(\"A\"), input(\"D\"), input(\"we\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.ADDR_BITS).addAttribute(Keys.IS_PROGRAM_MEMORY).addAttribute(Keys.INVERTER_CONFIG).addAttribute(Keys.LABEL).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.memory", "ROM", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(ROM.class, input(\"A\"), input(\"sel\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.ADDR_BITS).addAttribute(Keys.LABEL).addAttribute(Keys.DATA).addAttribute(Keys.INT_FORMAT).addAttribute(Keys.IS_PROGRAM_MEMORY).addAttribute(Keys.AUTO_RELOAD_ROM).addAttribute(Keys.LAST_DATA_FILE).addAttribute(Keys.BIG_ENDIAN).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.memory", "EEPROMDualPort", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(EEPROMDualPort.class, input(\"A\"), input(\"Din\"), input(\"str\"), input(\"C\").setClock(), input(\"ld\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.ADDR_BITS).addAttribute(Keys.INT_FORMAT).addAttribute(Keys.IS_PROGRAM_MEMORY).addAttribute(Keys.LABEL).addAttribute(Keys.DATA);" ], [ "DESCRIPTION", "de.neemann.digital.core.memory", "RAMSinglePortSel", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(RAMSinglePortSel.class, input(\"A\"), input(\"CS\"), input(\"WE\"), input(\"OE\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.ADDR_BITS).addAttribute(Keys.LABEL).addAttribute(Keys.IS_PROGRAM_MEMORY).addAttribute(Keys.INVERTER_CONFIG);" ], [ "DESCRIPTION", "de.neemann.digital.core.memory", "RegisterFile", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(RegisterFile.class, input(\"Din\"), input(\"we\"), input(\"Rw\"), input(\"C\").setClock(), input(\"Ra\"), input(\"Rb\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.ADDR_BITS).addAttribute(Keys.LABEL).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.io", "MIDI", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(MIDI.class) {\n\n    public PinDescriptions getInputDescription(ElementAttributes elementAttributes) throws NodeException {\n        if (elementAttributes.get(Keys.MIDI_PROG_CHANGE))\n            return new PinDescriptions(input(\"N\"), input(\"V\"), input(\"OnOff\"), input(\"PC\"), input(\"en\"), input(\"C\").setClock()).setLangKey(getPinLangKey());\n        else\n            return new PinDescriptions(input(\"N\"), input(\"V\"), input(\"OnOff\"), input(\"en\"), input(\"C\").setClock()).setLangKey(getPinLangKey());\n    }\n}.addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.MIDI_CHANNEL).addAttribute(Keys.MIDI_INSTRUMENT).addAttribute(Keys.MIDI_PROG_CHANGE);" ], [ "DESCRIPTION", "de.neemann.digital.core.io", "RGBLED", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(RGBLED.class, input(\"R\"), input(\"G\"), input(\"B\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).addAttribute(Keys.LED_SIZE);" ], [ "DESCRIPTION", "de.neemann.digital.core.io", "Out", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"Out\", attributes -> new Out(attributes).enforceName(), input(\"in\")) {\n\n    @Override\n    public String getDescription(ElementAttributes elementAttributes) {\n        String d = Lang.evalMultilingualContent(elementAttributes.get(Keys.DESCRIPTION));\n        if (d.length() > 0)\n            return d;\n        else\n            return super.getDescription(elementAttributes);\n    }\n}.addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).addAttribute(Keys.DESCRIPTION).addAttribute(Keys.INT_FORMAT).addAttribute(Keys.PINNUMBER).addAttribute(Keys.ADD_VALUE_TO_GRAPH).addAttribute(Keys.IN_OUT_SMALL).supportsHDL();" ], [ "LEDDESCRIPTION", "de.neemann.digital.core.io", "Out", "public static final ElementTypeDescription LEDDESCRIPTION = new ElementTypeDescription(\"LED\", Out.class, input(\"in\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.LED_SIZE).addAttribute(Keys.COLOR);" ], [ "POLARITYAWARELEDDESCRIPTION", "de.neemann.digital.core.io", "Out", "public static final ElementTypeDescription POLARITYAWARELEDDESCRIPTION = new ElementTypeDescription(\"PolarityAwareLED\", attributes -> new Out(1, 1), input(\"A\"), input(\"C\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.COLOR);" ], [ "SEVENDESCRIPTION", "de.neemann.digital.core.io", "Out", "public static final ElementTypeDescription SEVENDESCRIPTION = new SevenSegTypeDescription();" ], [ "SEVENHEXDESCRIPTION", "de.neemann.digital.core.io", "Out", "public static final ElementTypeDescription SEVENHEXDESCRIPTION = new ElementTypeDescription(\"Seven-Seg-Hex\", attributes -> new Out(4, 1), input(\"d\"), input(\"dp\")).addAttribute(Keys.COLOR).addAttribute(Keys.SEVEN_SEG_SIZE);" ], [ "SIXTEENDESCRIPTION", "de.neemann.digital.core.io", "Out", "public static final ElementTypeDescription SIXTEENDESCRIPTION = new ElementTypeDescription(\"SixteenSeg\", attributes -> new Out(16, 1), input(\"led\"), input(\"dp\")).addAttribute(Keys.COLOR).addAttribute(Keys.SEVEN_SEG_SIZE);" ], [ "DESCRIPTION", "de.neemann.digital.core.io", "RotEncoder", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(RotEncoder.class).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL);" ], [ "DESCRIPTION", "de.neemann.digital.core.io", "PinControl", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(PinControl.class, input(\"wr\"), input(\"oe\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.MIRROR).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.io", "DipSwitch", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(DipSwitch.class) {\n\n    @Override\n    public String getDescription(ElementAttributes elementAttributes) {\n        String d = Lang.evalMultilingualContent(elementAttributes.get(Keys.DESCRIPTION));\n        if (d.length() > 0)\n            return d;\n        else\n            return super.getDescription(elementAttributes);\n    }\n}.addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.DIP_DEFAULT).addAttribute(Keys.DESCRIPTION);" ], [ "DESCRIPTION", "de.neemann.digital.core.io", "LightBulb", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(LightBulb.class, input(\"A\"), input(\"B\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.COLOR);" ], [ "DESCRIPTION", "de.neemann.digital.core.io", "Probe", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"Probe\", Probe.class, input(\"in\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.INT_FORMAT).addAttribute(Keys.PROBE_MODE).addAttribute(Keys.ADD_VALUE_TO_GRAPH);" ], [ "DESCRIPTION", "de.neemann.digital.core.io", "Button", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Button.class).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.ACTIVE_LOW).addAttribute(Keys.MAP_TO_KEY).addAttribute(Keys.ADD_VALUE_TO_GRAPH);" ], [ "DESCRIPTION", "de.neemann.digital.core.io", "ButtonLED", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(ButtonLED.class, input(\"in\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.ACTIVE_LOW).addAttribute(Keys.MAP_TO_KEY).addAttribute(Keys.COLOR);" ], [ "DESCRIPTION", "de.neemann.digital.core.io", "In", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(In.class) {\n\n    @Override\n    public String getDescription(ElementAttributes elementAttributes) {\n        String d = Lang.evalMultilingualContent(elementAttributes.get(Keys.DESCRIPTION));\n        if (d.length() > 0)\n            return d;\n        else\n            return super.getDescription(elementAttributes);\n    }\n}.addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).addAttribute(Keys.INPUT_DEFAULT).addAttribute(Keys.IS_HIGH_Z).addAttribute(Keys.AVOID_ACTIVE_LOW).addAttribute(Keys.DESCRIPTION).addAttribute(Keys.INT_FORMAT).addAttribute(Keys.PINNUMBER).addAttribute(Keys.ADD_VALUE_TO_GRAPH).addAttribute(Keys.IN_OUT_SMALL).supportsHDL();" ], [ "STEPS", "de.neemann.digital.core.io", "StepperMotorUnipolar", "public static final int STEPS = 72;" ], [ "DESCRIPTION", "de.neemann.digital.core.io", "StepperMotorUnipolar", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(StepperMotorUnipolar.class, input(\"P0\"), input(\"P1\"), input(\"P2\"), input(\"P3\"), input(\"com\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.INVERT_OUTPUT);" ], [ "DESCRIPTION", "de.neemann.digital.core.io", "NotConnected", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(NotConnected.class).addAttribute(Keys.BITS);" ], [ "DESCRIPTION", "de.neemann.digital.core.io", "StepperMotorBipolar", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(StepperMotorBipolar.class, input(\"A+\"), input(\"A-\"), input(\"B+\"), input(\"B-\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.INVERT_OUTPUT);" ], [ "DESCRIPTION", "de.neemann.digital.core.io", "Const", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Const.class).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.VALUE).addAttribute(Keys.INT_FORMAT).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.io", "PowerSupply", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(PowerSupply.class, input(\"VDD\"), input(\"GND\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL);" ], [ "DESCRIPTION", "de.neemann.digital.core.io", "Ground", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Ground.class).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.io", "VDD", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(VDD.class).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).supportsHDL();" ], [ "INSTANCE", "de.neemann.digital.core.io.telnet", "ServerHolder", "public static final ServerHolder INSTANCE = new ServerHolder();" ], [ "DESCRIPTION", "de.neemann.digital.core.io.telnet", "Telnet", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Telnet.class, input(\"in\"), input(\"C\").setClock(), input(\"wr\"), input(\"rd\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.TELNET_ESCAPE).addAttribute(Keys.PORT);" ], [ "BITS", "de.neemann.digital.core.element", "Keys", "public static final Key.KeyBits BITS = new Key.KeyBits(\"Bits\", 1);" ], [ "INPUT_BITS", "de.neemann.digital.core.element", "Keys", "public static final Key.KeyBits INPUT_BITS = new Key.KeyBits(\"inputBits\", 8);" ], [ "OUTPUT_BITS", "de.neemann.digital.core.element", "Keys", "public static final Key.KeyBits OUTPUT_BITS = new Key.KeyBits(\"outputBits\", 16);" ], [ "INPUT_COUNT", "de.neemann.digital.core.element", "Keys", "public static final Key.KeyInteger INPUT_COUNT = new Key.KeyInteger(\"Inputs\", 2).setComboBoxValues(2, 3, 4, 5).setMin(2);" ], [ "LUT_INPUT_COUNT", "de.neemann.digital.core.element", "Keys", "public static final Key.KeyInteger LUT_INPUT_COUNT = new Key.KeyInteger(\"Inputs\", 2).setComboBoxValues(2, 3, 4, 5, 6).setMax(20).setMin(2);" ], [ "MAX_VALUE", "de.neemann.digital.core.element", "Keys", "public static final Key.KeyInteger MAX_VALUE = new Key.KeyInteger(\"maxValue\", 0).setMin(0);" ], [ "DELAY_TIME", "de.neemann.digital.core.element", "Keys", "public static final Key.KeyInteger DELAY_TIME = new Key.KeyInteger(\"delayTime\", 1).setComboBoxValues(1, 2, 3, 4, 5).setMin(1).setMax(20);" ], [ "MONOFLOP_DELAY", "de.neemann.digital.core.element", "Keys", "public static final Key.KeyInteger MONOFLOP_DELAY = new Key.KeyInteger(\"timerDelay\", 1).setMin(1);" ], [ "LABEL", "de.neemann.digital.core.element", "Keys", "public static final Key<String> LABEL = new Key<>(\"Label\", \"\");" ], [ "FONT_SIZE", "de.neemann.digital.core.element", "Keys", "public static final Key<Integer> FONT_SIZE = new Key.KeyInteger(\"textFontSize\", Style.NORMAL.getFontSize()).setComboBoxValues(14, 17, 20, 24, 36, 48, 60).setMin(10).setMax(70);" ], [ "TEXT_ORIENTATION", "de.neemann.digital.core.element", "Keys", "public static final Key<Orientation> TEXT_ORIENTATION = new Key.KeyEnum<>(\"textOrientation\", Orientation.LEFTTOP, Orientation.values()).setSecondary();" ], [ "LED_SIZE", "de.neemann.digital.core.element", "Keys", "public static final Key<Integer> LED_SIZE = new Key.KeyInteger(\"Size\", 1).setComboBoxValues(0, 1, 2, 3, 4, 5).setMin(0).allowGroupEdit().setSecondary();" ], [ "SEVEN_SEG_SIZE", "de.neemann.digital.core.element", "Keys", "public static final Key<Integer> SEVEN_SEG_SIZE = new Key.KeyInteger(\"segSize\", 2).setComboBoxValues(0, 1, 2, 3, 4, 5).setMin(0).allowGroupEdit().useTranslationOf(LED_SIZE);" ], [ "VALUE", "de.neemann.digital.core.element", "Keys", "public static final Key<Long> VALUE = new Key<>(\"Value\", 1L).setAdaptiveIntFormat().allowGroupEdit();" ], [ "DEFAULT", "de.neemann.digital.core.element", "Keys", "public static final Key<Long> DEFAULT = new Key<>(\"Default\", 0L).allowGroupEdit().setSecondary();" ], [ "INPUT_DEFAULT", "de.neemann.digital.core.element", "Keys", "public static final Key<InValue> INPUT_DEFAULT = new Key<>(\"InDefault\", new InValue(0)).setAdaptiveIntFormat().allowGroupEdit().setSecondary();" ], [ "DIP_DEFAULT", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> DIP_DEFAULT = new Key<>(\"dipDefault\", false).allowGroupEdit().setSecondary();" ], [ "COLOR", "de.neemann.digital.core.element", "Keys", "public static final Key<java.awt.Color> COLOR = new Key<>(\"Color\", java.awt.Color.RED).allowGroupEdit();" ], [ "INPUT_SPLIT", "de.neemann.digital.core.element", "Keys", "public static final Key<String> INPUT_SPLIT = new Key<>(\"Input Splitting\", \"4,4\");" ], [ "OUTPUT_SPLIT", "de.neemann.digital.core.element", "Keys", "public static final Key<String> OUTPUT_SPLIT = new Key<>(\"Output Splitting\", \"8\");" ], [ "SPLITTER_SPREADING", "de.neemann.digital.core.element", "Keys", "public static final Key<Integer> SPLITTER_SPREADING = new Key.KeyInteger(\"splitterSpreading\", 1).setComboBoxValues(1, 2, 3, 4).setMin(1).setMax(20).setSecondary();" ], [ "IN_OUT_SMALL", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> IN_OUT_SMALL = new Key<>(\"small\", false).allowGroupEdit().setSecondary();" ], [ "RUN_AT_REAL_TIME", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> RUN_AT_REAL_TIME = new Key<>(\"runRealTime\", false);" ], [ "INVERT_OUTPUT", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> INVERT_OUTPUT = new Key<>(\"invertOutput\", true);" ], [ "FREQUENCY", "de.neemann.digital.core.element", "Keys", "public static final Key<Integer> FREQUENCY = new Key.KeyInteger(\"Frequency\", 1).setComboBoxValues(1, 2, 5, 10, 20, 50, 100, 200, 500, 5000, 50000, Integer.MAX_VALUE).setMin(1).setDependsOn(RUN_AT_REAL_TIME);" ], [ "SELECTOR_BITS", "de.neemann.digital.core.element", "Keys", "public static final Key<Integer> SELECTOR_BITS = new Key.KeyBits(\"Selector Bits\", 1).setMax(8);" ], [ "ADDR_BITS", "de.neemann.digital.core.element", "Keys", "public static final Key<Integer> ADDR_BITS = // needs to have the same default value as INPUT_COUNT!!!  see de.neemann.digital.gui.components.EditorFactory#DataFieldEditor\nnew Key.KeyBits(\"AddrBits\", 2).setMax(24);" ], [ "BLOWN", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> BLOWN = new Key<>(\"Blown\", false).allowGroupEdit();" ], [ "CLOSED", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> CLOSED = new Key<>(\"Closed\", false).allowGroupEdit();" ], [ "SIGNED", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> SIGNED = new Key<>(\"Signed\", false).allowGroupEdit();" ], [ "REMAINDER_POSITIVE", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> REMAINDER_POSITIVE = new Key<>(\"remainderPositive\", true).setDependsOn(SIGNED);" ], [ "DATA", "de.neemann.digital.core.element", "Keys", "public static final Key<DataField> DATA = new Key<>(\"Data\", DataField::new);" ], [ "FLIP_SEL_POSITON", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> FLIP_SEL_POSITON = new Key<>(\"flipSelPos\", false).allowGroupEdit();" ], [ "ROTATE", "de.neemann.digital.core.element", "Keys", "public static final Key<Rotation> ROTATE = new Key<>(\"rotation\", new Rotation(0)).allowGroupEdit().setSecondary();" ], [ "WIDTH", "de.neemann.digital.core.element", "Keys", "public static final Key.KeyInteger WIDTH = new Key.KeyInteger(\"Width\", 3).setMin(2);" ], [ "SHAPE_TYPE", "de.neemann.digital.core.element", "Keys", "public static final Key<CustomCircuitShapeType> SHAPE_TYPE = new Key.KeyEnum<>(\"shapeType\", CustomCircuitShapeType.DEFAULT, CustomCircuitShapeType.values()).setSecondary();" ], [ "LAYOUT_SHAPE_DELTA", "de.neemann.digital.core.element", "Keys", "public static final Key.KeyInteger LAYOUT_SHAPE_DELTA = new Key.KeyInteger(\"layoutShapeDelta\", 0).setMin(0);" ], [ "HEIGHT", "de.neemann.digital.core.element", "Keys", "public static final Key<Integer> HEIGHT = new Key.KeyInteger(\"Height\", 3).setMin(2).setSecondary().setDependsOn(SHAPE_TYPE, cst -> cst.equals(CustomCircuitShapeType.LAYOUT));" ], [ "TERM_WIDTH", "de.neemann.digital.core.element", "Keys", "public static final Key.KeyInteger TERM_WIDTH = new Key.KeyInteger(\"termWidth\", 50).setMin(10);" ], [ "TERM_HEIGHT", "de.neemann.digital.core.element", "Keys", "public static final Key.KeyInteger TERM_HEIGHT = new Key.KeyInteger(\"termHeight\", 25).setMin(5);" ], [ "CYCLES", "de.neemann.digital.core.element", "Keys", "public static final Key.KeyInteger CYCLES = new Key.KeyInteger(\"Cycles\", 100000).setComboBoxValues(1000, 10000, 100000, 1000000);" ], [ "ENABLED", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> ENABLED = new Key<>(\"enabled\", true).allowGroupEdit();" ], [ "VALUE_IS_PROBE", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> VALUE_IS_PROBE = new Key<>(\"valueIsProbe\", false).allowGroupEdit().setSecondary();" ], [ "IS_PROGRAM_MEMORY", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> IS_PROGRAM_MEMORY = new Key<>(\"isProgramMemory\", false).setSecondary();" ], [ "IS_PROGRAM_COUNTER", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> IS_PROGRAM_COUNTER = new Key<>(\"isProgramCounter\", false).setSecondary();" ], [ "AUTO_RELOAD_ROM", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> AUTO_RELOAD_ROM = new Key<>(\"autoReload\", false).setSecondary();" ], [ "LAST_DATA_FILE", "de.neemann.digital.core.element", "Keys", "public static final Key<File> LAST_DATA_FILE = new Key.KeyFile(\"lastDataFile\", new File(\"\")).setDependsOn(AUTO_RELOAD_ROM).setSecondary();" ], [ "SHOW_DATA_TABLE", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> SHOW_DATA_TABLE = new Key<>(\"showDataTable\", false).setSecondary();" ], [ "SHOW_DATA_GRAPH", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> SHOW_DATA_GRAPH = new Key<>(\"showDataGraph\", false).setSecondary();" ], [ "SHOW_DATA_GRAPH_MICRO", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> SHOW_DATA_GRAPH_MICRO = new Key<>(\"showDataGraphMicro\", false).setSecondary();" ], [ "ADD_VALUE_TO_GRAPH", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> ADD_VALUE_TO_GRAPH = new Key<>(\"addValueToGraph\", true).allowGroupEdit().setSecondary();" ], [ "MICRO_STEP", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> MICRO_STEP = new Key<>(\"microStep\", false);" ], [ "MAX_STEP_COUNT", "de.neemann.digital.core.element", "Keys", "public static final Key.KeyInteger MAX_STEP_COUNT = new Key.KeyInteger(\"maxStepCount\", 25).setMin(5);" ], [ "SETTINGS_MAX_STEP_COUNT", "de.neemann.digital.core.element", "Keys", "public static final Key<Integer> SETTINGS_MAX_STEP_COUNT = new Key.KeyInteger(\"settingsMaxStepCount\", 1000).setComboBoxValues(500, 1000, 5000, 10000).setMin(500).setSecondary().useTranslationOf(MAX_STEP_COUNT);" ], [ "IS_HIGH_Z", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> IS_HIGH_Z = new Key<>(\"isHighZ\", false).allowGroupEdit().setSecondary();" ], [ "AVOID_ACTIVE_LOW", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> AVOID_ACTIVE_LOW = new Key<>(\"avoidActiveLow\", false).setDependsOn(IS_HIGH_Z).allowGroupEdit().setSecondary();" ], [ "DESCRIPTION", "de.neemann.digital.core.element", "Keys", "public static final Key.LongString DESCRIPTION = new Key.LongString(\"Description\");" ], [ "NETNAME", "de.neemann.digital.core.element", "Keys", "public static final Key<String> NETNAME = new Key<>(\"NetName\", \"\");" ], [ "SETTINGS_IEEE_SHAPES", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> SETTINGS_IEEE_SHAPES = new Key<>(\"IEEEShapes\", !Locale.getDefault().getLanguage().equals(Locale.GERMAN.getLanguage())).setRequiresRestart();" ], [ "SETTINGS_LANGUAGE", "de.neemann.digital.core.element", "Keys", "public static final Key<Language> SETTINGS_LANGUAGE = new Key<>(\"Language\", new Language()).setRequiresRestart();" ], [ "SETTINGS_DEFAULT_TREESELECT", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> SETTINGS_DEFAULT_TREESELECT = new Key<>(\"defTreeSelect\", false);" ], [ "SETTINGS_EXPRESSION_FORMAT", "de.neemann.digital.core.element", "Keys", "public static final Key.KeyEnum<FormatToExpression> SETTINGS_EXPRESSION_FORMAT = new Key.KeyEnum<>(\"ExpressionFormat\", FormatToExpression.UNICODE, FormatToExpression.values(), true);" ], [ "SETTINGS_GRID", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> SETTINGS_GRID = new Key<>(\"grid\", true).setRequiresRepaint();" ], [ "SETTINGS_SHOW_WIRE_BITS", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> SETTINGS_SHOW_WIRE_BITS = new Key<>(\"showWireBits\", false);" ], [ "SETTINGS_MAC_MOUSE", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> SETTINGS_MAC_MOUSE = new Key<>(\"macMouse\", false).setRequiresRestart().setSecondary();" ], [ "SETTINGS_SHOW_TUNNEL_RENAME_DIALOG", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> SETTINGS_SHOW_TUNNEL_RENAME_DIALOG = new Key<>(\"tunnelRenameDialog\", true);" ], [ "SETTINGS_RENAME_LABELS", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> SETTINGS_RENAME_LABELS = new Key<>(\"renameLabels\", true);" ], [ "SETTINGS_OPEN_REMOTE_PORT", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> SETTINGS_OPEN_REMOTE_PORT = new Key<>(\"openRemotePort\", false).setSecondary().setRequiresRestart();" ], [ "SETTINGS_REMOTE_PORT", "de.neemann.digital.core.element", "Keys", "public static final Key<Integer> SETTINGS_REMOTE_PORT = new Key.KeyInteger(\"remotePort\", 41114).setMin(0).setMax(0xffff).setComboBoxValues(41114).setSecondary().setRequiresRestart().setDependsOn(SETTINGS_OPEN_REMOTE_PORT);" ], [ "OSCILLATION_DETECTION_COUNTER", "de.neemann.digital.core.element", "Keys", "public static final Key<Integer> OSCILLATION_DETECTION_COUNTER = new Key.KeyInteger(\"oscillationDetectionCounter\", 1000).setComboBoxValues(1000, 5000, 10000).setMin(1000).setMax(100000);" ], [ "INT_FORMAT", "de.neemann.digital.core.element", "Keys", "public static final Key<IntFormat> INT_FORMAT = new Key.KeyEnum<>(\"intFormat\", IntFormat.def, IntFormat.values()).setSecondary();" ], [ "PROBE_MODE", "de.neemann.digital.core.element", "Keys", "public static final Key<ProbeMode> PROBE_MODE = new Key.KeyEnum<>(\"probeMode\", ProbeMode.VALUE, ProbeMode.values());" ], [ "FIXED_POINT", "de.neemann.digital.core.element", "Keys", "public static final Key<Integer> FIXED_POINT = new Key.KeyInteger(\"fixedPoint\", 4).setMin(1).setMax(64).setDependsOn(INT_FORMAT, intFormat -> intFormat.equals(IntFormat.fixed) || intFormat.equals(IntFormat.fixedSigned)).allowGroupEdit().setSecondary();" ], [ "GRAPHIC_WIDTH", "de.neemann.digital.core.element", "Keys", "public static final Key.KeyInteger GRAPHIC_WIDTH = new Key.KeyInteger(\"graphicWidth\", 160).setMin(4);" ], [ "GRAPHIC_HEIGHT", "de.neemann.digital.core.element", "Keys", "public static final Key.KeyInteger GRAPHIC_HEIGHT = new Key.KeyInteger(\"graphicHeight\", 100).setMin(4);" ], [ "RELAY_NORMALLY_CLOSED", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> RELAY_NORMALLY_CLOSED = new Key<>(\"relayNormallyClosed\", false).allowGroupEdit();" ], [ "POLES", "de.neemann.digital.core.element", "Keys", "public static final Key<Integer> POLES = new Key.KeyInteger(\"poles\", 1).setComboBoxValues(1, 2, 3, 4).setMin(1).allowGroupEdit();" ], [ "BARREL_SHIFTER_MODE", "de.neemann.digital.core.element", "Keys", "public static final Key<BarrelShifterMode> BARREL_SHIFTER_MODE = new Key.KeyEnum<>(\"barrelShifterMode\", BarrelShifterMode.logical, BarrelShifterMode.values());" ], [ "DIRECTION", "de.neemann.digital.core.element", "Keys", "public static final Key<LeftRightFormat> DIRECTION = new Key.KeyEnum<>(\"direction\", LeftRightFormat.left, LeftRightFormat.values());" ], [ "BARREL_SIGNED", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> BARREL_SIGNED = new Key<>(\"barrelSigned\", false);" ], [ "COMMON_CONNECTION", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> COMMON_CONNECTION = new Key<>(\"commonCathode\", false).allowGroupEdit();" ], [ "COMMON_CONNECTION_TYPE", "de.neemann.digital.core.element", "Keys", "public static final Key<CommonConnectionType> COMMON_CONNECTION_TYPE = new Key.KeyEnum<>(\"commonConnectionType\", CommonConnectionType.cathode, CommonConnectionType.values()).setDependsOn(COMMON_CONNECTION).allowGroupEdit();" ], [ "LED_PERSISTENCE", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> LED_PERSISTENCE = new Key<>(\"ledPersistence\", false).allowGroupEdit().setDependsOn(COMMON_CONNECTION);" ], [ "LED_PERSIST_TIME", "de.neemann.digital.core.element", "Keys", "public static final Key<Integer> LED_PERSIST_TIME = new Key.KeyInteger(\"persistTime\", 0).setMin(0).allowGroupEdit();" ], [ "SETTINGS_ATF1502_FITTER", "de.neemann.digital.core.element", "Keys", "public static final Key<File> SETTINGS_ATF1502_FITTER = new Key.KeyFile(\"atf1502Fitter\", new File(\"c:/Wincupl/WinCupl/Fitters\")).setDirectoryOnly(true).setSecondary();" ], [ "SETTINGS_ATMISP", "de.neemann.digital.core.element", "Keys", "public static final Key<File> SETTINGS_ATMISP = new Key.KeyFile(\"ATMISP\", getATMISPPath()).setSecondary();" ], [ "ROW_DATA_BITS", "de.neemann.digital.core.element", "Keys", "public static final Key.KeyBits ROW_DATA_BITS = new Key.KeyBits(\"rowDataBits\", 8);" ], [ "COL_ADDR_BITS", "de.neemann.digital.core.element", "Keys", "public static final Key.KeyBits COL_ADDR_BITS = new Key.KeyBits(\"colAddrBits\", 3);" ], [ "LOCKED_MODE", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> LOCKED_MODE = new Key<>(\"lockedMode\", false);" ], [ "PINNUMBER", "de.neemann.digital.core.element", "Keys", "public static final Key<String> PINNUMBER = new Key<>(\"pinNumber\", \"\").setSecondary();" ], [ "PINCOUNT", "de.neemann.digital.core.element", "Keys", "public static final Key<Integer> PINCOUNT = new Key.KeyInteger(\"pinCount\", 0).setMin(0).setSecondary().setDependsOn(SHAPE_TYPE, st -> st.equals(CustomCircuitShapeType.DIL));" ], [ "INVERTER_CONFIG", "de.neemann.digital.core.element", "Keys", "public static final Key<InverterConfig> INVERTER_CONFIG = new Key<>(\"inverterConfig\", new InverterConfig.Builder().build());" ], [ "BACKGROUND_COLOR", "de.neemann.digital.core.element", "Keys", "public static final Key<java.awt.Color> BACKGROUND_COLOR = new Key<>(\"backgroundColor\", new Color(255, 255, 180, 200));" ], [ "SETTINGS_FONT_SCALING", "de.neemann.digital.core.element", "Keys", "public static final Key<Integer> SETTINGS_FONT_SCALING = new Key.KeyInteger(\"fontSize\", Screen.getDefaultFontScaling()).setComboBoxValues(100, 120, 150, 180, 200, 250, 300).setMin(50).setMax(400).setRequiresRestart().setSecondary();" ], [ "SETTINGS_USE_EQUALS_KEY", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> SETTINGS_USE_EQUALS_KEY;" ], [ "WITH_ENABLE", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> WITH_ENABLE = new Key<>(\"withEnable\", true);" ], [ "FET_UNIDIRECTIONAL", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> FET_UNIDIRECTIONAL = new Key<>(\"unidirectional\", false);" ], [ "ACTIVE_LOW", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> ACTIVE_LOW = new Key<>(\"activeLow\", false).allowGroupEdit();" ], [ "MAP_TO_KEY", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> MAP_TO_KEY = new Key<>(\"mapToKey\", false).allowGroupEdit();" ], [ "SETTINGS_LIBRARY_PATH", "de.neemann.digital.core.element", "Keys", "public static final Key<File> SETTINGS_LIBRARY_PATH = new Key.KeyFile(\"libraryPath\", ElementLibrary.getLibPath()).setDirectoryOnly(true).setSecondary();" ], [ "SETTINGS_JAR_PATH", "de.neemann.digital.core.element", "Keys", "public static final Key<File> SETTINGS_JAR_PATH = new Key.KeyFile(\"jarPath\", new File(\"\")).setSecondary().setRequiresRestart();" ], [ "ROMMANAGER", "de.neemann.digital.core.element", "Keys", "public static final Key<ROMManagerFile> ROMMANAGER = new Key<>(\"romContent\", ROMManagerFile::new).setSecondary();" ], [ "APPLICATION_TYPE", "de.neemann.digital.core.element", "Keys", "public static final Key.KeyEnum<Application.Type> APPLICATION_TYPE = new Key.KeyEnum<>(\"applicationType\", Application.Type.Generic, Application.Type.values());" ], [ "EXTERNAL_INPUTS", "de.neemann.digital.core.element", "Keys", "public static final Key<String> EXTERNAL_INPUTS = new Key<>(\"externalInputs\", \"in\");" ], [ "EXTERNAL_OUTPUTS", "de.neemann.digital.core.element", "Keys", "public static final Key<String> EXTERNAL_OUTPUTS = new Key<>(\"externalOutputs\", \"out\");" ], [ "EXTERNAL_CODE", "de.neemann.digital.core.element", "Keys", "public static final Key.LongString EXTERNAL_CODE = new Key.LongString(\"Code\").setRows(30).setColumns(80).setLineNumbers(true);" ], [ "EXTERNAL_CODE_FILE", "de.neemann.digital.core.element", "Keys", "public static final Key.KeyFile EXTERNAL_CODE_FILE = new Key.KeyFile(\"CodeFile\", new File(\"\"));" ], [ "SETTINGS_GHDL_PATH", "de.neemann.digital.core.element", "Keys", "public static final Key<File> SETTINGS_GHDL_PATH = new Key.KeyFile(\"ghdlPath\", new File(\"ghdl\")).setSecondary();" ], [ "GHDL_OPTIONS", "de.neemann.digital.core.element", "Keys", "public static final Key<String> GHDL_OPTIONS = new Key.LongString(\"ghdlOptions\", \"--std=08 --ieee=synopsys\").setRows(3).setColumns(30).setPanelId(\"Options\");" ], [ "IVERILOG_OPTIONS", "de.neemann.digital.core.element", "Keys", "public static final Key<String> IVERILOG_OPTIONS = new Key.LongString(\"iverilogOptions\", \"\").setRows(3).setColumns(30).setPanelId(\"Options\");" ], [ "SETTINGS_IVERILOG_PATH", "de.neemann.digital.core.element", "Keys", "public static final Key<File> SETTINGS_IVERILOG_PATH = new Key.KeyFile(\"iverilogPath\", new File(\"iverilog\")).setSecondary();" ], [ "CUSTOM_SHAPE", "de.neemann.digital.core.element", "Keys", "public static final Key<CustomShapeDescription> CUSTOM_SHAPE = new Key<>(\"customShape\", new CustomShapeDescription.Builder().build()).setSecondary().setDependsOn(SHAPE_TYPE, st -> st.equals(CustomCircuitShapeType.CUSTOM));" ], [ "PRELOAD_PROGRAM", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> PRELOAD_PROGRAM = new Key<>(\"preloadProgram\", false).setSecondary();" ], [ "BIG_ENDIAN", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> BIG_ENDIAN = new Key<>(\"bigEndian\", false).setSecondary().setDependsOn(AUTO_RELOAD_ROM);" ], [ "PROGRAM_TO_PRELOAD", "de.neemann.digital.core.element", "Keys", "public static final Key<File> PROGRAM_TO_PRELOAD = new Key.KeyFile(\"preloadProgramFile\", new File(\"\")).setSecondary().setDependsOn(PRELOAD_PROGRAM);" ], [ "BIG_ENDIAN_SETTING", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> BIG_ENDIAN_SETTING = new Key<>(\"bigEndianSetting\", false).setSecondary().useTranslationOf(BIG_ENDIAN).setDependsOn(PRELOAD_PROGRAM);" ], [ "WIDE_SHAPE", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> WIDE_SHAPE = new Key<>(\"wideShape\", false).setSecondary().allowGroupEdit();" ], [ "RECT_WIDTH", "de.neemann.digital.core.element", "Keys", "public static final Key.KeyInteger RECT_WIDTH = new Key.KeyInteger(\"RectWidth\", 3).setMin(2);" ], [ "RECT_HEIGHT", "de.neemann.digital.core.element", "Keys", "public static final Key.KeyInteger RECT_HEIGHT = new Key.KeyInteger(\"RectHeight\", 3).setMin(2);" ], [ "RECT_INSIDE", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> RECT_INSIDE = new Key<>(\"RectInside\", false).setSecondary();" ], [ "RECT_BOTTOM", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> RECT_BOTTOM = new Key<>(\"RectBottom\", false).setSecondary();" ], [ "RECT_RIGHT", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> RECT_RIGHT = new Key<>(\"RectRight\", false).setSecondary();" ], [ "MIDI_CHANNEL", "de.neemann.digital.core.element", "Keys", "public static final Key.KeyInteger MIDI_CHANNEL = new Key.KeyInteger(\"midiChannel\", 1).setMin(1).setMax(16);" ], [ "MIDI_INSTRUMENT", "de.neemann.digital.core.element", "Keys", "public static final Key<String> MIDI_INSTRUMENT = new Key<>(\"midiInstrument\", \"\");" ], [ "MIDI_PROG_CHANGE", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> MIDI_PROG_CHANGE = new Key<>(\"midiProgChange\", false);" ], [ "SETTINGS_TOOLCHAIN_CONFIG", "de.neemann.digital.core.element", "Keys", "public static final Key<File> SETTINGS_TOOLCHAIN_CONFIG = new Key.KeyFile(\"toolChainConfig\", new File(\"\")).setSecondary().setRequiresRestart();" ], [ "GENERIC", "de.neemann.digital.core.element", "Keys", "public static final Key<String> GENERIC = new Key.LongString(\"generic\").setLineNumbers(true).allowGroupEdit();" ], [ "GENERICLARGE", "de.neemann.digital.core.element", "Keys", "public static final Key<String> GENERICLARGE = new Key.LongString(\"generic\").setLineNumbers(true).setRows(20).allowGroupEdit();" ], [ "IS_GENERIC", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> IS_GENERIC = new Key<>(\"isGeneric\", false).setSecondary();" ], [ "SETTINGS_SHOW_TUTORIAL", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> SETTINGS_SHOW_TUTORIAL = new Key<>(\"showTutorial\", true).setSecondary();" ], [ "SETTINGS_WIRETOOLTIP", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> SETTINGS_WIRETOOLTIP = new Key<>(\"wireToolTips\", false);" ], [ "SWITCH_ACTS_AS_INPUT", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> SWITCH_ACTS_AS_INPUT = new Key<>(\"switchActsAsInput\", false).setSecondary();" ], [ "SNAP_TO_GRID", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> SNAP_TO_GRID = new Key<>(\"snapToGrid\", true).setSecondary();" ], [ "MIRROR", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> MIRROR = new Key<>(\"mirror\", false).allowGroupEdit().setSecondary();" ], [ "TESTDATA", "de.neemann.digital.core.element", "Keys", "public static final Key<TestCaseDescription> TESTDATA = new Key<>(\"Testdata\", TestCaseDescription::new);" ], [ "TRIGGER", "de.neemann.digital.core.element", "Keys", "public static final Key.KeyEnum<ScopeTrigger.Trigger> TRIGGER = new Key.KeyEnum<>(\"trigger\", ScopeTrigger.Trigger.both, ScopeTrigger.Trigger.values());" ], [ "PORT", "de.neemann.digital.core.element", "Keys", "public static final Key.KeyInteger PORT = new Key.KeyInteger(\"port\", 23).setMin(1).setMax((1 << 16) - 1);" ], [ "TELNET_ESCAPE", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> TELNET_ESCAPE = new Key<>(\"telnetEscape\", true).allowGroupEdit();" ], [ "SKIP_HDL", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> SKIP_HDL = new Key<>(\"skipHDL\", false).setSecondary();" ], [ "PREFIX", "de.neemann.digital.core.basic", "FanIn", "public static final String PREFIX = \"In_\";" ], [ "DESCRIPTION", "de.neemann.digital.core.basic", "NOr", "public static final ElementTypeDescription DESCRIPTION = new FanInDescription(NOr.class).addAttribute(Keys.WIDE_SHAPE);" ], [ "DESCRIPTION", "de.neemann.digital.core.basic", "And", "public static final ElementTypeDescription DESCRIPTION = new FanInDescription(And.class).addAttribute(Keys.WIDE_SHAPE);" ], [ "DESCRIPTION", "de.neemann.digital.core.basic", "XNOr", "public static final ElementTypeDescription DESCRIPTION = new FanInDescription(XNOr.class).addAttribute(Keys.WIDE_SHAPE);" ], [ "DESCRIPTION", "de.neemann.digital.core.basic", "XOr", "public static final ElementTypeDescription DESCRIPTION = new FanInDescription(XOr.class).addAttribute(Keys.WIDE_SHAPE);" ], [ "DESCRIPTION", "de.neemann.digital.core.basic", "Not", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Not.class, input(\"in\")).addAttribute(Keys.ROTATE).addAttribute(Keys.WIDE_SHAPE).addAttribute(Keys.BITS).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.basic", "NAnd", "public static final ElementTypeDescription DESCRIPTION = new FanInDescription(NAnd.class).addAttribute(Keys.WIDE_SHAPE);" ], [ "DESCRIPTION", "de.neemann.digital.core.basic", "Or", "public static final ElementTypeDescription DESCRIPTION = new FanInDescription(Or.class).addAttribute(Keys.WIDE_SHAPE);" ], [ "STARTED", "de.neemann.digital.core", "ModelEvent", "public static final ModelEvent STARTED = new ModelEvent(ModelEventType.STARTED);" ], [ "CLOSED", "de.neemann.digital.core", "ModelEvent", "public static final ModelEvent CLOSED = new ModelEvent(ModelEventType.CLOSED);" ], [ "POSTCLOSED", "de.neemann.digital.core", "ModelEvent", "public static final ModelEvent POSTCLOSED = new ModelEvent(ModelEventType.POSTCLOSED);" ], [ "STEP", "de.neemann.digital.core", "ModelEvent", "public static final ModelEvent STEP = new ModelEvent(ModelEventType.STEP);" ], [ "CHECKBURN", "de.neemann.digital.core", "ModelEvent", "public static final ModelEvent CHECKBURN = new ModelEvent(ModelEventType.CHECKBURN);" ], [ "MICROSTEP", "de.neemann.digital.core", "ModelEvent", "public static final ModelEvent MICROSTEP = new ModelEvent(ModelEventType.MICROSTEP);" ], [ "RUN_TO_BREAK", "de.neemann.digital.core", "ModelEvent", "public static final ModelEvent RUN_TO_BREAK = new ModelEvent(ModelEventType.RUN_TO_BREAK);" ], [ "RUN_TO_BREAK_TIMEOUT", "de.neemann.digital.core", "ModelEvent", "public static final ModelEvent RUN_TO_BREAK_TIMEOUT = new ModelEvent(ModelEventType.RUN_TO_BREAK_TIMEOUT);" ], [ "BREAK", "de.neemann.digital.core", "ModelEvent", "public static final ModelEvent BREAK = new ModelEvent(ModelEventType.BREAK);" ], [ "DESCRIPTION", "de.neemann.digital.core.switching", "FGPFET", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(FGPFET.class, input(\"G\")).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).addAttribute(Keys.BLOWN);" ], [ "DESCRIPTION", "de.neemann.digital.core.switching", "NFET", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(NFET.class, input(\"G\")).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.BITS).addAttribute(Keys.FET_UNIDIRECTIONAL).addAttribute(Keys.LABEL);" ], [ "DESCRIPTION", "de.neemann.digital.core.switching", "FGNFET", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(FGNFET.class, input(\"G\")).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).addAttribute(Keys.BLOWN);" ], [ "DESCRIPTION", "de.neemann.digital.core.switching", "PFET", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(PFET.class, input(\"G\")).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.BITS).addAttribute(Keys.FET_UNIDIRECTIONAL).addAttribute(Keys.LABEL);" ], [ "DESCRIPTION", "de.neemann.digital.core.switching", "TransGate", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(TransGate.class, input(\"S\"), input(\"~S\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS);" ], [ "DESCRIPTION", "de.neemann.digital.core.switching", "SwitchDT", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(SwitchDT.class).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).addAttribute(Keys.POLES);" ], [ "DESCRIPTION", "de.neemann.digital.core.switching", "Relay", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Relay.class, input(\"in1\"), input(\"in2\")).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).addAttribute(Keys.POLES).addAttribute(Keys.RELAY_NORMALLY_CLOSED);" ], [ "DESCRIPTION", "de.neemann.digital.core.switching", "RelayDT", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(RelayDT.class, input(\"in1\"), input(\"in2\")).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).addAttribute(Keys.POLES);" ], [ "DESCRIPTION", "de.neemann.digital.core.switching", "Switch", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Switch.class).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).addAttribute(Keys.POLES).addAttribute(Keys.CLOSED).addAttribute(Keys.SWITCH_ACTS_AS_INPUT);" ], [ "DESCRIPTION", "de.neemann.digital.core.switching", "Fuse", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Fuse.class).addAttribute(Keys.ROTATE).addAttribute(Keys.BLOWN);" ], [ "DESCRIPTION", "de.neemann.digital.core.wiring", "Reset", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"Reset\", Reset.class).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.INVERT_OUTPUT).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.wiring", "Stop", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Stop.class, input(\"stop\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.INVERTER_CONFIG);" ], [ "DESCRIPTION", "de.neemann.digital.core.wiring", "Decoder", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Decoder.class, input(\"sel\")).addAttribute(Keys.ROTATE).addAttribute(Keys.SELECTOR_BITS).addAttribute(Keys.FLIP_SEL_POSITON).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.wiring", "Delay", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Delay.class, input(\"in\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.DELAY_TIME);" ], [ "DESCRIPTION", "de.neemann.digital.core.wiring", "Driver", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Driver.class, input(\"in\"), input(\"sel\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.FLIP_SEL_POSITON).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.wiring", "DriverInvSel", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(DriverInvSel.class, input(\"in\"), input(\"sel\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.FLIP_SEL_POSITON).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.wiring", "PriorityEncoder", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(PriorityEncoder.class) {\n\n    @Override\n    public PinDescriptions getInputDescription(ElementAttributes elementAttributes) {\n        int inputs = 1 << elementAttributes.get(Keys.SELECTOR_BITS);\n        PinDescription[] names = new PinDescription[inputs];\n        for (int i = 0; i < inputs; i++) names[i] = input(\"in\" + i, Lang.get(\"elem_PriorityEncoder_input\", i));\n        return new PinDescriptions(names);\n    }\n}.addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.SELECTOR_BITS).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.wiring", "BusSplitter", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(BusSplitter.class, input(\"OE\")).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.BITS).addAttribute(Keys.SPLITTER_SPREADING);" ], [ "DESCRIPTION", "de.neemann.digital.core.wiring", "Splitter", "public static final ElementTypeDescription DESCRIPTION = new SplitterTypeDescription().addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.INPUT_SPLIT).addAttribute(Keys.OUTPUT_SPLIT).addAttribute(Keys.SPLITTER_SPREADING).setShortName(\"\").supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.wiring", "Multiplexer", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Multiplexer.class) {\n\n    @Override\n    public PinDescriptions getInputDescription(ElementAttributes elementAttributes) {\n        int size = 1 << elementAttributes.get(Keys.SELECTOR_BITS);\n        PinDescription[] names = new PinDescription[size + 1];\n        names[0] = input(\"sel\", Lang.get(\"elem_Multiplexer_pin_sel\"));\n        for (int i = 0; i < size; i++) names[i + 1] = input(\"in_\" + i, Lang.get(\"elem_Multiplexer_input\", i));\n        return new PinDescriptions(names);\n    }\n}.addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.SELECTOR_BITS).addAttribute(Keys.FLIP_SEL_POSITON).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.wiring", "BitSelector", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(BitSelector.class, input(\"in\"), input(\"sel\")).addAttribute(Keys.ROTATE).addAttribute(Keys.SELECTOR_BITS).addAttribute(Keys.FLIP_SEL_POSITON).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.wiring", "Break", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Break.class, input(\"brk\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.ENABLED).addAttribute(Keys.CYCLES);" ], [ "DESCRIPTION", "de.neemann.digital.core.wiring", "Clock", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"Clock\", Clock.class).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.RUN_AT_REAL_TIME).addAttribute(Keys.FREQUENCY).addAttribute(Keys.PINNUMBER).addAttribute(Keys.IN_OUT_SMALL).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.wiring", "AsyncSeq", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(AsyncSeq.class).addAttribute(Keys.RUN_AT_REAL_TIME).addAttribute(Keys.FREQUENCY);" ], [ "DESCRIPTION", "de.neemann.digital.core.wiring", "Demultiplexer", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Demultiplexer.class, input(\"sel\"), input(\"in\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.SELECTOR_BITS).addAttribute(Keys.FLIP_SEL_POSITON).addAttribute(Keys.DEFAULT).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.flipflops", "FlipflopDAsync", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"D_FF_AS\", FlipflopDAsync.class, input(\"Set\"), input(\"D\"), input(\"C\").setClock(), input(\"Clr\")).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).addAttribute(Keys.DEFAULT).addAttribute(Keys.INVERTER_CONFIG).addAttribute(Keys.VALUE_IS_PROBE).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.flipflops", "FlipflopD", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"D_FF\", FlipflopD.class, input(\"D\"), input(\"C\").setClock()).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).addAttribute(Keys.DEFAULT).addAttribute(Keys.INVERTER_CONFIG).addAttribute(Keys.VALUE_IS_PROBE).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.flipflops", "FlipflopRSAsync", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"RS_FF_AS\", FlipflopRSAsync.class, input(\"S\"), input(\"R\")).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.LABEL).addAttribute(Keys.DEFAULT).addAttribute(Keys.INVERTER_CONFIG).addAttribute(Keys.VALUE_IS_PROBE);" ], [ "DESCRIPTION", "de.neemann.digital.core.flipflops", "FlipflopT", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"T_FF\", FlipflopT.class) {\n\n    @Override\n    public PinDescriptions getInputDescription(ElementAttributes elementAttributes) throws NodeException {\n        if (elementAttributes.get(Keys.WITH_ENABLE))\n            return new PinDescriptions(input(\"T\"), input(\"C\").setClock()).setLangKey(getPinLangKey());\n        else\n            return new PinDescriptions(input(\"C\").setClock()).setLangKey(getPinLangKey());\n    }\n}.addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.LABEL).addAttribute(Keys.WITH_ENABLE).addAttribute(Keys.DEFAULT).addAttribute(Keys.INVERTER_CONFIG).addAttribute(Keys.VALUE_IS_PROBE);" ], [ "DESCRIPTION", "de.neemann.digital.core.flipflops", "FlipflopJKAsync", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"JK_FF_AS\", FlipflopJKAsync.class, input(\"Set\"), input(\"J\"), input(\"C\").setClock(), input(\"K\"), input(\"Clr\")).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.LABEL).addAttribute(Keys.DEFAULT).addAttribute(Keys.INVERTER_CONFIG).addAttribute(Keys.VALUE_IS_PROBE).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.flipflops", "FlipflopJK", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"JK_FF\", FlipflopJK.class, input(\"J\"), input(\"C\").setClock(), input(\"K\")).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.LABEL).addAttribute(Keys.DEFAULT).addAttribute(Keys.INVERTER_CONFIG).addAttribute(Keys.VALUE_IS_PROBE).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.flipflops", "Monoflop", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Monoflop.class, input(\"C\").setClock(), input(\"R\")).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.LABEL).addAttribute(Keys.DEFAULT).addAttribute(Keys.MONOFLOP_DELAY).addAttribute(Keys.INVERTER_CONFIG).addAttribute(Keys.VALUE_IS_PROBE);" ], [ "DESCRIPTION", "de.neemann.digital.core.flipflops", "FlipflopRS", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"RS_FF\", FlipflopRS.class, input(\"S\"), input(\"C\").setClock(), input(\"R\")).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.LABEL).addAttribute(Keys.DEFAULT).addAttribute(Keys.INVERTER_CONFIG).addAttribute(Keys.VALUE_IS_PROBE);" ], [ "DESCRIPTION", "de.neemann.digital.core.arithmetic", "BarrelShifter", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(BarrelShifter.class, input(\"in\"), input(\"shift\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.BITS).addAttribute(Keys.BARREL_SIGNED).addAttribute(Keys.DIRECTION).addAttribute(Keys.BARREL_SHIFTER_MODE);" ], [ "DESCRIPTION", "de.neemann.digital.core.arithmetic", "Mul", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Mul.class, input(\"a\"), input(\"b\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.SIGNED).addAttribute(Keys.BITS).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.arithmetic", "Neg", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Neg.class, input(\"in\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.arithmetic", "BitExtender", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(BitExtender.class, input(\"in\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.INPUT_BITS).addAttribute(Keys.OUTPUT_BITS).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.arithmetic", "Add", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Add.class, input(\"a\"), input(\"b\"), input(\"c_i\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.BITS).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.arithmetic", "Div", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Div.class, input(\"a\"), input(\"b\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.BITS).addAttribute(Keys.SIGNED).addAttribute(Keys.REMAINDER_POSITIVE);" ], [ "DESCRIPTION", "de.neemann.digital.core.arithmetic", "PRNG", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(PRNG.class, input(\"S\"), input(\"se\"), input(\"ne\"), input(\"C\").setClock()).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.LABEL);" ], [ "DESCRIPTION", "de.neemann.digital.core.arithmetic", "Sub", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Sub.class, input(\"a\"), input(\"b\"), input(\"c_i\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.BITS).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.arithmetic", "Comparator", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Comparator.class, input(\"a\"), input(\"b\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.BITS).addAttribute(Keys.SIGNED).setShortName(\"\").supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.arithmetic", "BitCount", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(BitCount.class, input(\"in\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS);" ], [ "EMPTY_LIST", "de.neemann.digital.core", "ObservableValues", "public static final ObservableValues EMPTY_LIST = new ObservableValues();" ], [ "DEFAULT_FORMATTER", "de.neemann.digital.core", "IntFormat", "public static final ValueFormatter DEFAULT_FORMATTER = ValueFormatterDefault.INSTANCE;" ], [ "HEX_FORMATTER", "de.neemann.digital.core", "IntFormat", "public static final ValueFormatter HEX_FORMATTER = ValueFormatterHex.INSTANCE;" ], [ "DESCRIPTION", "de.neemann.digital.core.extern", "External", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(External.class) {\n\n    @Override\n    public PinDescriptions getInputDescription(ElementAttributes elementAttributes) {\n        return new PortDefinition(elementAttributes.get(Keys.EXTERNAL_INPUTS)).getPinDescriptions(PinDescription.Direction.input);\n    }\n\n    @Override\n    public PinDescriptions getOutputDescriptions(ElementAttributes elementAttributes) {\n        return new PortDefinition(elementAttributes.get(Keys.EXTERNAL_OUTPUTS)).getPinDescriptions(PinDescription.Direction.output);\n    }\n}.addAttribute(Keys.LABEL).addAttribute(Keys.WIDTH).addAttribute(Keys.EXTERNAL_INPUTS).addAttribute(Keys.EXTERNAL_OUTPUTS).addAttribute(Keys.EXTERNAL_CODE).addAttribute(Keys.APPLICATION_TYPE).addAttribute(Keys.GHDL_OPTIONS).addAttribute(Keys.IVERILOG_OPTIONS).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.extern", "ExternalFile", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(ExternalFile.class) {\n\n    @Override\n    public PinDescriptions getInputDescription(ElementAttributes elementAttributes) {\n        return new PortDefinition(elementAttributes.get(Keys.EXTERNAL_INPUTS)).getPinDescriptions(PinDescription.Direction.input);\n    }\n\n    @Override\n    public PinDescriptions getOutputDescriptions(ElementAttributes elementAttributes) {\n        return new PortDefinition(elementAttributes.get(Keys.EXTERNAL_OUTPUTS)).getPinDescriptions(PinDescription.Direction.output);\n    }\n}.addAttribute(Keys.LABEL).addAttribute(Keys.WIDTH).addAttribute(Keys.EXTERNAL_INPUTS).addAttribute(Keys.EXTERNAL_OUTPUTS).addAttribute(Keys.EXTERNAL_CODE_FILE).addAttribute(Keys.APPLICATION_TYPE).addAttribute(Keys.GHDL_OPTIONS).addAttribute(Keys.IVERILOG_OPTIONS).supportsHDL();" ], [ "DEFAULT_RAD", "de.neemann.digital.fsm", "State", "static final int DEFAULT_RAD = 70;" ], [ "INSTANCE", "de.neemann.digital.lang", "Lang", "static final Lang INSTANCE = new Lang();" ], [ "INSTANCE", "de.neemann.digital.lang", "InstanceHolder", "static final Lang INSTANCE = new Lang();" ], [ "DESCRIPTION", "de.neemann.digital.testing", "TestCaseElement", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"Testcase\", TestCaseElement.class).addAttribute(Keys.LABEL).addAttribute(Keys.TESTDATA).addAttribute(Keys.ENABLED).supportsHDL();" ], [ "STATENAMES", "de.neemann.digital.analyse", "TruthTableTableModel", "public static final String[] STATENAMES = new String[] { \"0\", \"1\", \"x\" };" ], [ "ONE", "de.neemann.digital.analyse.expression", "Constant", "public static final Constant ONE = new Constant(true);" ], [ "ZERO", "de.neemann.digital.analyse.expression", "Constant", "public static final Constant ZERO = new Constant(false);" ], [ "PRIMARY", "de.neemann.digital.gui.components", "EditorPanel", "public static final String PRIMARY = \"primary\";" ], [ "SECONDARY", "de.neemann.digital.gui.components", "EditorPanel", "public static final String SECONDARY = \"secondary\";" ], [ "INSTANCE", "de.neemann.digital.gui.components", "EditorFactory", "static final EditorFactory INSTANCE = new EditorFactory();" ], [ "MAX_TERMINAL_STORED", "de.neemann.digital.gui.components.terminal", "ConsoleTerminal", "public static final int MAX_TERMINAL_STORED = 2048;" ], [ "DESCRIPTION", "de.neemann.digital.gui.components.terminal", "Terminal", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Terminal.class, input(\"D\"), input(\"C\").setClock(), input(\"en\")).addAttribute(Keys.TERM_WIDTH).addAttribute(Keys.TERM_HEIGHT).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL);" ], [ "DESCRIPTION", "de.neemann.digital.gui.components.terminal", "Keyboard", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Keyboard.class, input(\"C\").setClock(), input(\"en\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.INVERTER_CONFIG);" ], [ "FAILED_COLOR", "de.neemann.digital.gui.components.testing", "ValueTableDialog", "static final Color FAILED_COLOR = new Color(255, 200, 200);" ], [ "PASSED_COLOR", "de.neemann.digital.gui.components.testing", "ValueTableDialog", "static final Color PASSED_COLOR = new Color(200, 255, 200);" ], [ "ICON_DELETE", "de.neemann.digital.gui.components", "CircuitComponent", "public static final Icon ICON_DELETE = IconCreator.create(\"delete.png\");" ], [ "ICON_COPY", "de.neemann.digital.gui.components", "CircuitComponent", "public static final Icon ICON_COPY = IconCreator.create(\"edit-copy.png\");" ], [ "DESCRIPTION", "de.neemann.digital.gui.components.graphics", "VGA", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(VGA.class, input(\"R\"), input(\"G\"), input(\"B\"), input(\"H\"), input(\"V\"), input(\"C\").setClock()).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL);" ], [ "DESCRIPTION", "de.neemann.digital.gui.components.graphics", "GraphicCard", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(GraphicCard.class, input(\"A\"), input(\"str\"), input(\"C\").setClock(), input(\"ld\"), input(\"B\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).addAttribute(Keys.GRAPHIC_WIDTH).addAttribute(Keys.GRAPHIC_HEIGHT);" ], [ "DESCRIPTION", "de.neemann.digital.gui.components.graphics", "LedMatrix", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(LedMatrix.class, input(\"r-data\"), input(\"c-addr\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.ROW_DATA_BITS).addAttribute(Keys.COL_ADDR_BITS).addAttribute(Keys.COLOR).addAttribute(Keys.LED_PERSISTENCE);" ], [ "DESCRIPTION", "de.neemann.digital.gui.components.data", "ScopeTrigger", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(ScopeTrigger.class, input(\"T\").setClock()).addAttribute(Keys.LABEL).addAttribute(Keys.TRIGGER).addAttribute(Keys.MAX_STEP_COUNT);" ], [ "DATADESCRIPTION", "de.neemann.digital.gui.components.data", "DummyElement", "public static final ElementTypeDescription DATADESCRIPTION = new ElementTypeDescription(\"Data\", DummyElement.class).addAttribute(Keys.MICRO_STEP).addAttribute(Keys.MAX_STEP_COUNT).addAttribute(Keys.SNAP_TO_GRID);" ], [ "TEXTDESCRIPTION", "de.neemann.digital.gui.components.data", "DummyElement", "public static final ElementTypeDescription TEXTDESCRIPTION = new ElementTypeDescription(\"Text\", DummyElement.class).addAttribute(Keys.DESCRIPTION).addAttribute(Keys.ROTATE).addAttribute(Keys.TEXT_ORIENTATION).addAttribute(Keys.FONT_SIZE).addAttribute(Keys.SNAP_TO_GRID);" ], [ "RECTDESCRIPTION", "de.neemann.digital.gui.components.data", "DummyElement", "public static final ElementTypeDescription RECTDESCRIPTION = new ElementTypeDescription(\"Rectangle\", DummyElement.class).addAttribute(Keys.LABEL).addAttribute(Keys.RECT_WIDTH).addAttribute(Keys.RECT_HEIGHT).addAttribute(Keys.RECT_INSIDE).addAttribute(Keys.RECT_BOTTOM).addAttribute(Keys.RECT_RIGHT).addAttribute(Keys.FONT_SIZE).addAttribute(Keys.SNAP_TO_GRID);" ], [ "LEFT", "de.neemann.digital.gui.components", "TextLineNumber", "public final static float LEFT = 0.0f;" ], [ "CENTER", "de.neemann.digital.gui.components", "TextLineNumber", "public final static float CENTER = 0.5f;" ], [ "RIGHT", "de.neemann.digital.gui.components", "TextLineNumber", "public final static float RIGHT = 1.0f;" ], [ "INSTANCE", "de.neemann.digital.gui", "Settings", "static final Settings INSTANCE = new Settings();" ], [ "INSTANCE", "de.neemann.digital.gui", "SettingsHolder", "static final Settings INSTANCE = new Settings();" ], [ "BASE_FILE_KEY", "de.neemann.digital.hdl.hgs", "Context", "public static final String BASE_FILE_KEY = \"baseFile\";" ], [ "DESCRIPTION", "de.neemann.digital.draw.library", "GenericCode", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(GenericCode.class).addAttribute(Keys.GENERICLARGE).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.draw.library", "GenericInitCode", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(GenericInitCode.class).addAttribute(Keys.LABEL).addAttribute(Keys.ENABLED).addAttribute(Keys.GENERIC).supportsHDL();" ], [ "GEN_ARGS_KEY", "de.neemann.digital.draw.library", "ResolveGenerics", "public static final String GEN_ARGS_KEY = \"genArgs\";" ], [ "HEIGHT", "de.neemann.digital.draw.shapes", "ButtonShape", "protected static final int HEIGHT = OUT_SIZE / 2;" ], [ "SIZE2", "de.neemann.digital.draw.shapes", "GenericShape", "public static final int SIZE2 = 10;" ], [ "SIZE", "de.neemann.digital.draw.shapes", "GenericShape", "public static final int SIZE = SIZE2 * 2;" ], [ "CIRC", "de.neemann.digital.draw.shapes", "DILShape", "static final float CIRC = (float) (4 * (Math.sqrt(2) - 1) / 3);" ], [ "DOWNSHIFT", "de.neemann.digital.draw.shapes", "VDDShape", "static final int DOWNSHIFT = 4;" ], [ "CHARGED_GATE", "de.neemann.digital.draw.shapes", "FGFETShapeN", "static final Style CHARGED_GATE = Style.NORMAL.deriveStyle(6, false, Color.RED);" ], [ "OUT_SIZE", "de.neemann.digital.draw.shapes", "OutputShape", "public static final int OUT_SIZE = GenericShape.SIZE * 3 / 4;" ], [ "LATEX_RAD", "de.neemann.digital.draw.shapes", "OutputShape", "static final Vector LATEX_RAD = new Vector(Style.MAXLINETHICK, Style.MAXLINETHICK);" ], [ "WIDTH2", "de.neemann.digital.draw.shapes", "PullDownShape", "public static final int WIDTH2 = SIZE2 - 3;" ], [ "HEIGHT", "de.neemann.digital.draw.shapes", "PullDownShape", "public static final int HEIGHT = SIZE + SIZE / 3;" ], [ "HEIGHT", "de.neemann.digital.draw.shapes", "SevenShape", "static final int HEIGHT = 7;" ], [ "FRAME", "de.neemann.digital.draw.shapes", "SevenShape", "public static final Polygon FRAME = Polygon.createFromPath(\"m -10,1 L 70,1 70,139 -10,139 z\");" ], [ "DESCRIPTION", "de.neemann.digital.draw.elements", "Tunnel", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Tunnel.class, input(\"in\")).addAttribute(Keys.ROTATE).addAttribute(Keys.NETNAME).supportsHDL();" ], [ "HIGH_CONTRAST", "de.neemann.digital.draw.graphics", "SVGSettings", "static final Key<Boolean> HIGH_CONTRAST = new Key<>(\"SVG_highContrast\", false);" ], [ "MONOCHROME", "de.neemann.digital.draw.graphics", "SVGSettings", "static final Key<Boolean> MONOCHROME = new Key<>(\"SVG_monochrome\", false);" ], [ "SMALL_IO", "de.neemann.digital.draw.graphics", "SVGSettings", "static final Key<Boolean> SMALL_IO = new Key<>(\"SVG_smallIO\", false);" ], [ "NO_PIN_MARKER", "de.neemann.digital.draw.graphics", "SVGSettings", "static final Key<Boolean> NO_PIN_MARKER = new Key<>(\"SVG_noPinMarker\", false);" ], [ "THINNER_LINES", "de.neemann.digital.draw.graphics", "SVGSettings", "static final Key<Boolean> THINNER_LINES = new Key<>(\"SVG_thinnerLines\", false);" ], [ "HIDE_TEST", "de.neemann.digital.draw.graphics", "SVGSettings", "static final Key<Boolean> HIDE_TEST = new Key<>(\"SVG_hideTest\", false);" ], [ "NO_SHAPE_FILLING", "de.neemann.digital.draw.graphics", "SVGSettings", "static final Key<Boolean> NO_SHAPE_FILLING = new Key<>(\"SVG_noShapeFilling\", false);" ], [ "LATEX", "de.neemann.digital.draw.graphics", "SVGSettings", "static final Key<Boolean> LATEX = new Key<>(\"SVG_LaTeX\", false);" ], [ "PINS_IN_MATH_MODE", "de.neemann.digital.draw.graphics", "SVGSettings", "static final Key<Boolean> PINS_IN_MATH_MODE = new Key<>(\"SVG_pinsInMathMode\", false).setDependsOn(LATEX);" ], [ "INSTANCE", "de.neemann.digital.draw.graphics", "SVGSettings", "static final SVGSettings INSTANCE = new SVGSettings();" ], [ "INSTANCE", "de.neemann.digital.draw.graphics", "SettingsHolder", "static final SVGSettings INSTANCE = new SVGSettings();" ], [ "COLOR_SCHEME", "de.neemann.digital.draw.graphics", "ColorScheme", "public static final Key<ColorSchemes> COLOR_SCHEME = new Key.KeyEnum<>(\"colorScheme\", ColorSchemes.DEFAULT, ColorSchemes.values()).setRequiresRepaint();" ], [ "CUSTOM_COLOR_SCHEME", "de.neemann.digital.draw.graphics", "ColorScheme", "public static final Key<ColorScheme> CUSTOM_COLOR_SCHEME = new Key<>(\"customColorScheme\", DEFAULT_SCHEME).setDependsOn(COLOR_SCHEME, o -> o.equals(ColorSchemes.CUSTOM)).setRequiresRepaint();" ], [ "MAXLINETHICK", "de.neemann.digital.draw.graphics", "Style", "public static final int MAXLINETHICK = 4;" ], [ "NORMAL", "de.neemann.digital.draw.graphics", "Style", "public static final Style NORMAL = new Builder().build();" ], [ "DISABLED", "de.neemann.digital.draw.graphics", "Style", "public static final Style DISABLED = new Builder().setColor(ColorKey.DISABLED).build();" ], [ "INOUT", "de.neemann.digital.draw.graphics", "Style", "public static final Style INOUT = new Builder(NORMAL).setFontStyle(Font.ITALIC).build();" ], [ "FAILED", "de.neemann.digital.draw.graphics", "Style", "public static final Style FAILED = new Builder(NORMAL).setColor(ColorKey.ERROR).build();" ], [ "PASS", "de.neemann.digital.draw.graphics", "Style", "public static final Style PASS = new Builder(NORMAL).setColor(ColorKey.PASSED).build();" ], [ "NORMAL_TEXT", "de.neemann.digital.draw.graphics", "Style", "public static final Style NORMAL_TEXT = new Builder(NORMAL).setMattersForSize(true).build();" ], [ "THIN", "de.neemann.digital.draw.graphics", "Style", "public static final Style THIN = new Builder(NORMAL).setThickness(LINETHIN).build();" ], [ "THIN_FILLED", "de.neemann.digital.draw.graphics", "Style", "public static final Style THIN_FILLED = new Builder(NORMAL).setThickness(LINETHIN).setFilled(true).build();" ], [ "THICK", "de.neemann.digital.draw.graphics", "Style", "public static final Style THICK = new Builder(NORMAL).setThickness(LINETHICK + LINETHIN).build();" ], [ "WIRE", "de.neemann.digital.draw.graphics", "Style", "public static final Style WIRE = new Builder().setThickness(WIRETHICK).setFilled(true).setColor(ColorKey.WIRE).setEndCap(BasicStroke.CAP_ROUND).build();" ], [ "WIRE_LOW", "de.neemann.digital.draw.graphics", "Style", "public static final Style WIRE_LOW = new Builder(WIRE).setColor(ColorKey.WIRE_LOW).build();" ], [ "WIRE_HIGH", "de.neemann.digital.draw.graphics", "Style", "public static final Style WIRE_HIGH = new Builder(WIRE).setColor(ColorKey.WIRE_HIGH).build();" ], [ "WIRE_HIGHZ", "de.neemann.digital.draw.graphics", "Style", "public static final Style WIRE_HIGHZ = new Builder(WIRE).setColor(ColorKey.WIRE_Z).build();" ], [ "WIRE_OUT", "de.neemann.digital.draw.graphics", "Style", "public static final Style WIRE_OUT = new Builder(WIRE).setColor(ColorKey.WIRE_OUT).build();" ], [ "FILLED", "de.neemann.digital.draw.graphics", "Style", "public static final Style FILLED = new Builder().setFilled(true).build();" ], [ "DASH", "de.neemann.digital.draw.graphics", "Style", "public static final Style DASH = new Builder().setThickness(LINEDASH).setDash(new float[] { 4, 4 }).build();" ], [ "SHAPE_PIN", "de.neemann.digital.draw.graphics", "Style", "public static final Style SHAPE_PIN = new Builder().setThickness(LINETHIN).setColor(ColorKey.PINS).setFontSize(18).build();" ], [ "SHAPE_SPLITTER", "de.neemann.digital.draw.graphics", "Style", "public static final Style SHAPE_SPLITTER = new Builder(SHAPE_PIN).setFontSize(12).build();" ], [ "WIRE_VALUE", "de.neemann.digital.draw.graphics", "Style", "public static final Style WIRE_VALUE = new Builder(SHAPE_SPLITTER).setColor(ColorKey.WIRE_VALUE).build();" ], [ "WIRE_BITS", "de.neemann.digital.draw.graphics", "Style", "public static final Style WIRE_BITS = new Builder(SHAPE_SPLITTER).setColor(ColorKey.WIRE).build();" ], [ "HIGHLIGHT", "de.neemann.digital.draw.graphics", "Style", "public static final Style HIGHLIGHT = new Builder(NORMAL).setColor(ColorKey.HIGHLIGHT).setEndCap(BasicStroke.CAP_ROUND).build();" ], [ "ERROR", "de.neemann.digital.draw.graphics", "Style", "public static final Style ERROR = new Builder(NORMAL).setColor(ColorKey.ERROR).setEndCap(BasicStroke.CAP_ROUND).build();" ], [ "BLANK", "de.neemann.digital.draw.graphics.text.text", "Blank", "public static final Blank BLANK = new Blank();" ], [ "LOOK_AT_ALIAS", "de.neemann.digital.toolchain", "Configuration", "static final String LOOK_AT_ALIAS = \"lookAt\";" ], [ "REF_ALIAS", "de.neemann.digital.toolchain", "Configuration", "static final String REF_ALIAS = \"ref\";" ] ],
  "tokensMethodJavadocValues" : [ ],
  "tokensMethodArguments" : [ [ "name", "java.lang", "String" ], [ "expression", "de.neemann.digital.analyse.expression", "Expression" ] ],
  "tokensMethodVariablesNonPrivateNonStaticNonVoidMethods" : [ [ "addCombinatorial", "de.neemann.digital.builder", "BuilderInterface", "public abstract T addCombinatorial(String arg0, Expression arg1) throws BuilderException" ], [ "hashCode", "java.lang", "Object", "public native int hashCode()" ], [ "getRegistered", "de.neemann.digital.builder.Gal16v8", "BuilderCollectorGAL", "public Map<String, Expression> getRegistered()" ], [ "addSequential", "de.neemann.digital.builder", "BuilderInterface", "public abstract T addSequential(String arg0, Expression arg1) throws BuilderException" ], [ "getOutputs", "de.neemann.digital.builder.Gal16v8", "BuilderCollectorGAL", "public ArrayList<String> getOutputs()" ], [ "getInputs", "de.neemann.digital.builder.Gal16v8", "BuilderCollectorGAL", "public ArrayList<String> getInputs()" ], [ "addSequential", "de.neemann.digital.builder.Gal16v8", "BuilderCollectorGAL", "public BuilderCollector addSequential(String name, Expression expression) throws BuilderException" ], [ "clone", "java.lang", "Object", "protected native Object clone() throws CloneNotSupportedException" ], [ "getClass", "java.lang", "Object", "public final native Class<? extends Object> getClass()" ], [ "equals", "java.lang", "Object", "public boolean equals(Object arg0)" ], [ "getCombinatorial", "de.neemann.digital.builder.Gal16v8", "BuilderCollectorGAL", "public Map<String, Expression> getCombinatorial()" ], [ "addCombinatorial", "de.neemann.digital.builder.Gal16v8", "BuilderCollectorGAL", "public BuilderCollector addCombinatorial(String name, Expression expression) throws BuilderException" ], [ "toString", "java.lang", "Object", "public String toString()" ], [ "indexOf", "java.lang", "String", "public int indexOf(int arg0, int arg1)" ], [ "split", "java.lang", "String", "public String[] split(String arg0)" ], [ "stripLeading", "java.lang", "String", "public String stripLeading()" ], [ "getBytes", "java.lang", "String", "public byte[] getBytes(Charset arg0)" ], [ "hashCode", "java.lang", "String", "public int hashCode()" ], [ "substring", "java.lang", "String", "public String substring(int arg0)" ], [ "coder", "java.lang", "String", "byte coder()" ], [ "toLowerCase", "java.lang", "String", "public String toLowerCase()" ], [ "contentEquals", "java.lang", "String", "public boolean contentEquals(CharSequence arg0)" ], [ "offsetByCodePoints", "java.lang", "String", "public int offsetByCodePoints(int arg0, int arg1)" ], [ "substring", "java.lang", "String", "public String substring(int arg0, int arg1)" ], [ "intern", "java.lang", "String", "public native String intern()" ], [ "getBytes", "java.lang", "String", "public byte[] getBytes(String arg0) throws UnsupportedEncodingException" ], [ "codePointAt", "java.lang", "String", "public int codePointAt(int arg0)" ], [ "indent", "java.lang", "String", "public String indent(int arg0)" ], [ "lastIndexOf", "java.lang", "String", "public int lastIndexOf(String arg0, int arg1)" ], [ "getBytes", "java.lang", "String", "public byte[] getBytes()" ], [ "lastIndexOf", "java.lang", "String", "public int lastIndexOf(int arg0, int arg1)" ], [ "length", "java.lang", "String", "public int length()" ], [ "lastIndexOf", "java.lang", "String", "public int lastIndexOf(String arg0)" ], [ "isBlank", "java.lang", "String", "public boolean isBlank()" ], [ "contains", "java.lang", "String", "public boolean contains(CharSequence arg0)" ], [ "replace", "java.lang", "String", "public String replace(char arg0, char arg1)" ], [ "toCharArray", "java.lang", "String", "public char[] toCharArray()" ], [ "split", "java.lang", "String", "public String[] split(String arg0, int arg1)" ], [ "codePointCount", "java.lang", "String", "public int codePointCount(int arg0, int arg1)" ], [ "replace", "java.lang", "String", "public String replace(CharSequence arg0, CharSequence arg1)" ], [ "chars", "java.lang", "String", "public IntStream chars()" ], [ "translateEscapes", "java.lang", "String", "public String translateEscapes()" ], [ "startsWith", "java.lang", "String", "public boolean startsWith(String arg0)" ], [ "toLowerCase", "java.lang", "String", "public String toLowerCase(Locale arg0)" ], [ "contentEquals", "java.lang", "String", "public boolean contentEquals(StringBuffer arg0)" ], [ "transform", "java.lang", "String", "public <R> R transform(Function<? super String, ? extends R> arg0)" ], [ "isEmpty", "java.lang", "String", "public boolean isEmpty()" ], [ "replaceFirst", "java.lang", "String", "public String replaceFirst(String arg0, String arg1)" ], [ "repeat", "java.lang", "String", "public String repeat(int arg0)" ], [ "endsWith", "java.lang", "String", "public boolean endsWith(String arg0)" ], [ "matches", "java.lang", "String", "public boolean matches(String arg0)" ], [ "lines", "java.lang", "String", "public Stream<String> lines()" ], [ "equals", "java.lang", "String", "public boolean equals(Object arg0)" ], [ "replaceAll", "java.lang", "String", "public String replaceAll(String arg0, String arg1)" ], [ "isLatin1", "java.lang", "String", "boolean isLatin1()" ], [ "indexOf", "java.lang", "String", "public int indexOf(String arg0)" ], [ "strip", "java.lang", "String", "public String strip()" ], [ "regionMatches", "java.lang", "String", "public boolean regionMatches(int arg0, String arg1, int arg2, int arg3)" ], [ "equalsIgnoreCase", "java.lang", "String", "public boolean equalsIgnoreCase(String arg0)" ], [ "charAt", "java.lang", "String", "public char charAt(int arg0)" ], [ "regionMatches", "java.lang", "String", "public boolean regionMatches(boolean arg0, int arg1, String arg2, int arg3, int arg4)" ], [ "formatted", "java.lang", "String", "public String formatted(Object[] arg0)" ], [ "toString", "java.lang", "String", "public String toString()" ], [ "codePoints", "java.lang", "String", "public IntStream codePoints()" ], [ "describeConstable", "java.lang", "String", "public Optional<String> describeConstable()" ], [ "codePointBefore", "java.lang", "String", "public int codePointBefore(int arg0)" ], [ "toUpperCase", "java.lang", "String", "public String toUpperCase()" ], [ "compareTo", "java.lang", "String", "public int compareTo(String arg0)" ], [ "indexOf", "java.lang", "String", "public int indexOf(String arg0, int arg1)" ], [ "lastIndexOf", "java.lang", "String", "public int lastIndexOf(int arg0)" ], [ "value", "java.lang", "String", "byte[] value()" ], [ "indexOf", "java.lang", "String", "public int indexOf(int arg0)" ], [ "concat", "java.lang", "String", "public String concat(String arg0)" ], [ "stripIndent", "java.lang", "String", "public String stripIndent()" ], [ "toUpperCase", "java.lang", "String", "public String toUpperCase(Locale arg0)" ], [ "startsWith", "java.lang", "String", "public boolean startsWith(String arg0, int arg1)" ], [ "resolveConstantDesc", "java.lang", "String", "public String resolveConstantDesc(MethodHandles.Lookup arg0)" ], [ "trim", "java.lang", "String", "public String trim()" ], [ "stripTrailing", "java.lang", "String", "public String stripTrailing()" ], [ "compareToIgnoreCase", "java.lang", "String", "public int compareToIgnoreCase(String arg0)" ], [ "subSequence", "java.lang", "String", "public CharSequence subSequence(int arg0, int arg1)" ], [ "compareTo", "java.lang", "Comparable", "public abstract int compareTo(T arg0)" ], [ "toString", "java.lang", "CharSequence", "public abstract String toString()" ], [ "chars", "java.lang", "CharSequence", "public default IntStream chars()" ], [ "codePoints", "java.lang", "CharSequence", "public default IntStream codePoints()" ], [ "subSequence", "java.lang", "CharSequence", "public abstract CharSequence subSequence(int arg0, int arg1)" ], [ "length", "java.lang", "CharSequence", "public abstract int length()" ], [ "charAt", "java.lang", "CharSequence", "public abstract char charAt(int arg0)" ], [ "isEmpty", "java.lang", "CharSequence", "public default boolean isEmpty()" ], [ "describeConstable", "java.lang.constant", "Constable", "public abstract Optional<? extends ConstantDesc> describeConstable()" ], [ "resolveConstantDesc", "java.lang.constant", "ConstantDesc", "public abstract Object resolveConstantDesc(MethodHandles.Lookup arg0) throws ReflectiveOperationException" ], [ "copy", "de.neemann.digital.analyse.expression", "Expression", "public abstract Expression copy()" ], [ "calculate", "de.neemann.digital.analyse.expression", "Expression", "public abstract boolean calculate(Context arg0) throws ExpressionException" ], [ "getOrderString", "de.neemann.digital.analyse.expression", "Expression", "public abstract String getOrderString()" ], [ "traverse", "de.neemann.digital.analyse.expression", "Expression", "public abstract <V> V traverse(V arg0)" ], [ "addSequential", "de.neemann.digital.builder", "BuilderCollector", "public BuilderCollector addSequential(String arg0, Expression arg1) throws BuilderException" ], [ "addCombinatorial", "de.neemann.digital.builder", "BuilderCollector", "public BuilderCollector addCombinatorial(String arg0, Expression arg1) throws BuilderException" ], [ "getInputs", "de.neemann.digital.builder", "BuilderCollector", "public ArrayList<String> getInputs()" ], [ "getRegistered", "de.neemann.digital.builder", "BuilderCollector", "public Map<String, Expression> getRegistered()" ], [ "getCombinatorial", "de.neemann.digital.builder", "BuilderCollector", "public Map<String, Expression> getCombinatorial()" ], [ "getOutputs", "de.neemann.digital.builder", "BuilderCollector", "public ArrayList<String> getOutputs()" ] ],
  "tokensMethodVariablesNonPrivateNonStaticAttributes" : [ ],
  "tokensOracleVariablesNonPrivateNonStaticNonVoidMethods" : [ ],
  "tokensOracleVariablesNonPrivateNonStaticAttributes" : [ ]
}, {
  "id" : 26714,
  "oracle" : "circuit != null;",
  "oracleType" : "PRE",
  "projectName" : "Digital",
  "packageName" : "de.neemann.digital.gui.components.modification",
  "className" : "ModifyMeasurementOrdering",
  "javadocTag" : "",
  "methodJavadoc" : "",
  "methodSourceCode" : "public void modify(Circuit circuit){\n    circuit.setMeasurementOrdering(names);\n}",
  "classJavadoc" : "/**\n * Modifies the measurement ordering\n */",
  "classSourceCode" : "/*\n * Copyright (c) 2017 Helmut Neemann\n * Use of this source code is governed by the GPL v3 license\n * that can be found in the LICENSE file.\n */\npackage de.neemann.digital.gui.components.modification;\n\nimport de.neemann.digital.draw.elements.Circuit;\nimport de.neemann.digital.lang.Lang;\nimport de.neemann.digital.undo.Modification;\n\nimport java.util.ArrayList;\n\n/**\n * Modifies the measurement ordering\n */\npublic class ModifyMeasurementOrdering implements Modification<Circuit> {\n    private final ArrayList<String> names;\n\n    /**\n     * Creates a new instance\n     *\n     * @param names the new ordering\n     */\n    public ModifyMeasurementOrdering(ArrayList<String> names) {\n        this.names = names;\n    }\n\n    @Override\n    public void modify(Circuit circuit) {\n        circuit.setMeasurementOrdering(names);\n    }\n\n    @Override\n    public String toString() {\n        return Lang.get(\"mod_modifiedMeasurementOrdering\");\n    }\n}\n",
  "tokensGeneralGrammar" : [ "null", "true", "false", ",", ".", ":", ";", "?", "(", ")", "jdVar", "stream", "Arrays", "allMatch", "noneMatch", "anyMatch", "~", ">>", "<<", ">>>", "|", "&", "^", "+", "-", "/", "*", "%", "&&", "||", ">=", "<=", ">", "<", "==", "!=", "instanceof", "class", "methodResultID", "this" ],
  "tokensGeneralValuesGlobalDictionary" : [ [ "0", "int" ], [ "1", "int" ], [ "-1", "int" ], [ "0.0", "double" ], [ "1.0", "double" ], [ "-1.0", "double" ], [ "\"\"", "String" ], [ "\" \"", "String" ] ],
  "tokensProjectClasses" : [ [ "CLI", "de.neemann" ], [ "Mouse", "de.neemann.gui" ], [ "LineBreaker", "de.neemann.gui" ], [ "IconCreator", "de.neemann.gui" ], [ "ConfirmDialogBuilder", "de.neemann.gui" ], [ "Resources", "de.neemann.gui.language" ], [ "Bundle", "de.neemann.gui.language" ], [ "Language", "de.neemann.gui.language" ], [ "ToolTipAction", "de.neemann.gui" ], [ "MyFileChooser", "de.neemann.gui" ], [ "ClosingWindowListener", "de.neemann.gui" ], [ "ErrorMessage", "de.neemann.gui" ], [ "WindowSizeStorage", "de.neemann.gui" ], [ "Screen", "de.neemann.gui" ], [ "ToolTipProvider", "de.neemann.gui" ], [ "InfoDialog", "de.neemann.gui" ], [ "ValueFormatter", "de.neemann.digital.core" ], [ "ModelStateObserver", "de.neemann.digital.core" ], [ "PullDown", "de.neemann.digital.core.pld" ], [ "Diode", "de.neemann.digital.core.pld" ], [ "DiodeBackward", "de.neemann.digital.core.pld" ], [ "PullUp", "de.neemann.digital.core.pld" ], [ "DiodeForward", "de.neemann.digital.core.pld" ], [ "Node", "de.neemann.digital.core" ], [ "RAMSinglePort", "de.neemann.digital.core.memory" ], [ "ROMDualPort", "de.neemann.digital.core.memory" ], [ "RAMDualAccess", "de.neemann.digital.core.memory" ], [ "ByteArrayFromValueArray", "de.neemann.digital.core.memory.importer" ], [ "Importer", "de.neemann.digital.core.memory.importer" ], [ "LogisimReader", "de.neemann.digital.core.memory.importer" ], [ "DataFieldValueArray", "de.neemann.digital.core.memory.importer" ], [ "ByteArrayReader", "de.neemann.digital.core.memory.importer" ], [ "ValueArrayReader", "de.neemann.digital.core.memory.importer" ], [ "IntelHexReader", "de.neemann.digital.core.memory.importer" ], [ "ValueArray", "de.neemann.digital.core.memory.importer" ], [ "BinReader", "de.neemann.digital.core.memory.importer" ], [ "ByteArray", "de.neemann.digital.core.memory.importer" ], [ "MultiValueArray", "de.neemann.digital.core.memory.importer" ], [ "CounterPreset", "de.neemann.digital.core.memory" ], [ "RAMDualPort", "de.neemann.digital.core.memory" ], [ "Register", "de.neemann.digital.core.memory" ], [ "LookUpTable", "de.neemann.digital.core.memory" ], [ "BlockRAMDualPort", "de.neemann.digital.core.memory" ], [ "Counter", "de.neemann.digital.core.memory" ], [ "ROMMangerBase", "de.neemann.digital.core.memory.rom" ], [ "ROMManagerFile", "de.neemann.digital.core.memory.rom" ], [ "ROMManager", "de.neemann.digital.core.memory.rom" ], [ "ROMInterface", "de.neemann.digital.core.memory.rom" ], [ "EEPROM", "de.neemann.digital.core.memory" ], [ "ProgramCounter", "de.neemann.digital.core.memory" ], [ "RAMAsync", "de.neemann.digital.core.memory" ], [ "ROM", "de.neemann.digital.core.memory" ], [ "DataField", "de.neemann.digital.core.memory" ], [ "EEPROMDualPort", "de.neemann.digital.core.memory" ], [ "RAMInterface", "de.neemann.digital.core.memory" ], [ "DataFieldConverter", "de.neemann.digital.core.memory" ], [ "RAMSinglePortSel", "de.neemann.digital.core.memory" ], [ "ProgramMemory", "de.neemann.digital.core.memory" ], [ "RegisterFile", "de.neemann.digital.core.memory" ], [ "ModelStateObserverTyped", "de.neemann.digital.core" ], [ "Observable", "de.neemann.digital.core" ], [ "NodeWithoutDelay", "de.neemann.digital.core" ], [ "ExceptionWithOrigin", "de.neemann.digital.core" ], [ "ObservableValue", "de.neemann.digital.core" ], [ "SpeedTest", "de.neemann.digital.core" ], [ "BurnException", "de.neemann.digital.core" ], [ "GlobalValues", "de.neemann.digital.core" ], [ "MIDI", "de.neemann.digital.core.io" ], [ "RGBLED", "de.neemann.digital.core.io" ], [ "Out", "de.neemann.digital.core.io" ], [ "RotEncoder", "de.neemann.digital.core.io" ], [ "PinControl", "de.neemann.digital.core.io" ], [ "DipSwitch", "de.neemann.digital.core.io" ], [ "CommonConnectionType", "de.neemann.digital.core.io" ], [ "LightBulb", "de.neemann.digital.core.io" ], [ "Probe", "de.neemann.digital.core.io" ], [ "Button", "de.neemann.digital.core.io" ], [ "ButtonLED", "de.neemann.digital.core.io" ], [ "In", "de.neemann.digital.core.io" ], [ "StepperMotorUnipolar", "de.neemann.digital.core.io" ], [ "ProbeMode", "de.neemann.digital.core.io" ], [ "NotConnected", "de.neemann.digital.core.io" ], [ "MIDIHelper", "de.neemann.digital.core.io" ], [ "StepperMotorBipolar", "de.neemann.digital.core.io" ], [ "Const", "de.neemann.digital.core.io" ], [ "PowerSupply", "de.neemann.digital.core.io" ], [ "Ground", "de.neemann.digital.core.io" ], [ "InValue", "de.neemann.digital.core.io" ], [ "VDD", "de.neemann.digital.core.io" ], [ "ServerHolder", "de.neemann.digital.core.io.telnet" ], [ "Telnet", "de.neemann.digital.core.io.telnet" ], [ "ByteBuffer", "de.neemann.digital.core.io.telnet" ], [ "Server", "de.neemann.digital.core.io.telnet" ], [ "ElementAttributes", "de.neemann.digital.core.element" ], [ "Element", "de.neemann.digital.core.element" ], [ "ElementFactory", "de.neemann.digital.core.element" ], [ "PinInfo", "de.neemann.digital.core.element" ], [ "PinDescriptions", "de.neemann.digital.core.element" ], [ "PinDescription", "de.neemann.digital.core.element" ], [ "Keys", "de.neemann.digital.core.element" ], [ "Rotation", "de.neemann.digital.core.element" ], [ "AttributeListener", "de.neemann.digital.core.element" ], [ "Key", "de.neemann.digital.core.element" ], [ "ImmutableList", "de.neemann.digital.core.element" ], [ "ElementTypeDescription", "de.neemann.digital.core.element" ], [ "FanIn", "de.neemann.digital.core.basic" ], [ "NOr", "de.neemann.digital.core.basic" ], [ "And", "de.neemann.digital.core.basic" ], [ "XNOr", "de.neemann.digital.core.basic" ], [ "XOr", "de.neemann.digital.core.basic" ], [ "Not", "de.neemann.digital.core.basic" ], [ "NAnd", "de.neemann.digital.core.basic" ], [ "Function", "de.neemann.digital.core.basic" ], [ "Or", "de.neemann.digital.core.basic" ], [ "ExceptionWithOriginInterface", "de.neemann.digital.core" ], [ "ModelEvent", "de.neemann.digital.core" ], [ "BacktrackException", "de.neemann.digital.core" ], [ "PlainSwitch", "de.neemann.digital.core.switching" ], [ "FGPFET", "de.neemann.digital.core.switching" ], [ "NFET", "de.neemann.digital.core.switching" ], [ "FGNFET", "de.neemann.digital.core.switching" ], [ "PFET", "de.neemann.digital.core.switching" ], [ "PlainSwitchDT", "de.neemann.digital.core.switching" ], [ "TransGate", "de.neemann.digital.core.switching" ], [ "SwitchDT", "de.neemann.digital.core.switching" ], [ "Relay", "de.neemann.digital.core.switching" ], [ "RelayDT", "de.neemann.digital.core.switching" ], [ "Switch", "de.neemann.digital.core.switching" ], [ "Fuse", "de.neemann.digital.core.switching" ], [ "Reset", "de.neemann.digital.core.wiring" ], [ "Stop", "de.neemann.digital.core.wiring" ], [ "Decoder", "de.neemann.digital.core.wiring" ], [ "Delay", "de.neemann.digital.core.wiring" ], [ "Driver", "de.neemann.digital.core.wiring" ], [ "DataBus", "de.neemann.digital.core.wiring.bus" ], [ "SingleBusHandler", "de.neemann.digital.core.wiring.bus" ], [ "ConnectedBusHandler", "de.neemann.digital.core.wiring.bus" ], [ "AbstractBusHandler", "de.neemann.digital.core.wiring.bus" ], [ "BusModelStateObserver", "de.neemann.digital.core.wiring.bus" ], [ "CommonBusValue", "de.neemann.digital.core.wiring.bus" ], [ "DriverInvSel", "de.neemann.digital.core.wiring" ], [ "PriorityEncoder", "de.neemann.digital.core.wiring" ], [ "BusSplitter", "de.neemann.digital.core.wiring" ], [ "Splitter", "de.neemann.digital.core.wiring" ], [ "Multiplexer", "de.neemann.digital.core.wiring" ], [ "BitSelector", "de.neemann.digital.core.wiring" ], [ "Break", "de.neemann.digital.core.wiring" ], [ "Clock", "de.neemann.digital.core.wiring" ], [ "AsyncSeq", "de.neemann.digital.core.wiring" ], [ "Demultiplexer", "de.neemann.digital.core.wiring" ], [ "BitsException", "de.neemann.digital.core" ], [ "NodeInterface", "de.neemann.digital.core" ], [ "NodeException", "de.neemann.digital.core" ], [ "FlipflopDAsync", "de.neemann.digital.core.flipflops" ], [ "FlipflopD", "de.neemann.digital.core.flipflops" ], [ "FlipflopRSAsync", "de.neemann.digital.core.flipflops" ], [ "FlipflopT", "de.neemann.digital.core.flipflops" ], [ "FlipflopJKAsync", "de.neemann.digital.core.flipflops" ], [ "FlipflopJK", "de.neemann.digital.core.flipflops" ], [ "Monoflop", "de.neemann.digital.core.flipflops" ], [ "FlipflopRS", "de.neemann.digital.core.flipflops" ], [ "FlipflopBit", "de.neemann.digital.core.flipflops" ], [ "BarrelShifter", "de.neemann.digital.core.arithmetic" ], [ "Mul", "de.neemann.digital.core.arithmetic" ], [ "Neg", "de.neemann.digital.core.arithmetic" ], [ "BitExtender", "de.neemann.digital.core.arithmetic" ], [ "Add", "de.neemann.digital.core.arithmetic" ], [ "Div", "de.neemann.digital.core.arithmetic" ], [ "LeftRightFormat", "de.neemann.digital.core.arithmetic" ], [ "PRNG", "de.neemann.digital.core.arithmetic" ], [ "Sub", "de.neemann.digital.core.arithmetic" ], [ "BarrelShifterMode", "de.neemann.digital.core.arithmetic" ], [ "Comparator", "de.neemann.digital.core.arithmetic" ], [ "BitCount", "de.neemann.digital.core.arithmetic" ], [ "ObservableValues", "de.neemann.digital.core" ], [ "Value", "de.neemann.digital.core" ], [ "IntFormat", "de.neemann.digital.core" ], [ "SyncAccess", "de.neemann.digital.core" ], [ "Bits", "de.neemann.digital.core" ], [ "ProcessInterface", "de.neemann.digital.core.extern.handler" ], [ "StdIOInterface", "de.neemann.digital.core.extern.handler" ], [ "ApplicationVerilogStdIO", "de.neemann.digital.core.extern" ], [ "Application", "de.neemann.digital.core.extern" ], [ "External", "de.neemann.digital.core.extern" ], [ "Port", "de.neemann.digital.core.extern" ], [ "PortDefinition", "de.neemann.digital.core.extern" ], [ "ApplicationGHDL", "de.neemann.digital.core.extern" ], [ "ApplicationIVerilog", "de.neemann.digital.core.extern" ], [ "ApplicationVHDLStdIO", "de.neemann.digital.core.extern" ], [ "VHDLTokenizer", "de.neemann.digital.core.extern" ], [ "ApplicationGeneric", "de.neemann.digital.core.extern" ], [ "Options", "de.neemann.digital.core.extern" ], [ "VerilogTokenizer", "de.neemann.digital.core.extern" ], [ "ExternalFile", "de.neemann.digital.core.extern" ], [ "ProcessStarter", "de.neemann.digital.core.extern" ], [ "ModelEventType", "de.neemann.digital.core" ], [ "Observer", "de.neemann.digital.core" ], [ "ErrorDetector", "de.neemann.digital.core" ], [ "Statistics", "de.neemann.digital.core.stats" ], [ "Countable", "de.neemann.digital.core.stats" ], [ "Model", "de.neemann.digital.core" ], [ "Signal", "de.neemann.digital.core" ], [ "StringList", "de.neemann.digital" ], [ "XStreamValid", "de.neemann.digital" ], [ "StatsExport", "de.neemann.digital.cli" ], [ "SVGExport", "de.neemann.digital.cli" ], [ "CommandLineTester", "de.neemann.digital.cli" ], [ "CSVWriter", "de.neemann.digital.cli" ], [ "BasicCommand", "de.neemann.digital.cli.cli" ], [ "Argument", "de.neemann.digital.cli.cli" ], [ "CLIException", "de.neemann.digital.cli.cli" ], [ "Muxer", "de.neemann.digital.cli.cli" ], [ "ArgumentKey", "de.neemann.digital.cli.cli" ], [ "NamedCommand", "de.neemann.digital.cli.cli" ], [ "CLICommand", "de.neemann.digital.cli.cli" ], [ "ArgumentBase", "de.neemann.digital.cli.cli" ], [ "CircuitLoader", "de.neemann.digital.cli" ], [ "Main", "de.neemann.digital.cli" ], [ "Modification", "de.neemann.digital.undo" ], [ "Modifications", "de.neemann.digital.undo" ], [ "ModifyException", "de.neemann.digital.undo" ], [ "Copyable", "de.neemann.digital.undo" ], [ "UndoManager", "de.neemann.digital.undo" ], [ "ChangedListener", "de.neemann.digital.undo" ], [ "CircuitRepresentation", "de.neemann.digital.fsm" ], [ "Transition", "de.neemann.digital.fsm" ], [ "Movable", "de.neemann.digital.fsm" ], [ "MouseMovable", "de.neemann.digital.fsm" ], [ "Optimizer", "de.neemann.digital.fsm" ], [ "Permute", "de.neemann.digital.fsm" ], [ "FiniteStateMachineException", "de.neemann.digital.fsm" ], [ "TransitionTableCreator", "de.neemann.digital.fsm" ], [ "ValueParser", "de.neemann.digital.fsm" ], [ "WaitGroup", "de.neemann.digital.fsm" ], [ "FSMComponent", "de.neemann.digital.fsm.gui" ], [ "FSMFrame", "de.neemann.digital.fsm.gui" ], [ "OptimizerDialog", "de.neemann.digital.fsm.gui" ], [ "FSMDemos", "de.neemann.digital.fsm" ], [ "FSM", "de.neemann.digital.fsm" ], [ "State", "de.neemann.digital.fsm" ], [ "Lang", "de.neemann.digital.lang" ], [ "LineListenerResolveDontCare", "de.neemann.digital.testing" ], [ "TestingDataException", "de.neemann.digital.testing" ], [ "UnitTester", "de.neemann.digital.testing" ], [ "FolderTestRunner", "de.neemann.digital.testing" ], [ "TestExecutor", "de.neemann.digital.testing" ], [ "Transitions", "de.neemann.digital.testing" ], [ "TestCaseDescription", "de.neemann.digital.testing" ], [ "TestCaseElement", "de.neemann.digital.testing" ], [ "LineEmitterRepeat", "de.neemann.digital.testing.parser" ], [ "Parser", "de.neemann.digital.testing.parser" ], [ "ValueAppenderBits", "de.neemann.digital.testing.parser" ], [ "ParserException", "de.neemann.digital.testing.parser" ], [ "Context", "de.neemann.digital.testing.parser" ], [ "ModelInitializer", "de.neemann.digital.testing.parser" ], [ "Expression", "de.neemann.digital.testing.parser" ], [ "LineEmitterList", "de.neemann.digital.testing.parser" ], [ "TestRow", "de.neemann.digital.testing.parser" ], [ "LineEmitter", "de.neemann.digital.testing.parser" ], [ "LineEmitterWhile", "de.neemann.digital.testing.parser" ], [ "Tokenizer", "de.neemann.digital.testing.parser" ], [ "LineEmitterSimple", "de.neemann.digital.testing.parser" ], [ "Random", "de.neemann.digital.testing.parser.functions" ], [ "SignExtend", "de.neemann.digital.testing.parser.functions" ], [ "IfThenElse", "de.neemann.digital.testing.parser.functions" ], [ "Function", "de.neemann.digital.testing.parser.functions" ], [ "LineListener", "de.neemann.digital.testing.parser" ], [ "VirtualSignal", "de.neemann.digital.testing.parser" ], [ "ValueAppender", "de.neemann.digital.testing.parser" ], [ "OperatorPrecedence", "de.neemann.digital.testing.parser" ], [ "TestResultListener", "de.neemann.digital.testing" ], [ "MatchedValue", "de.neemann.digital.testing" ], [ "TestResult", "de.neemann.digital.testing" ], [ "MinimizerInterface", "de.neemann.digital.analyse" ], [ "LabelNumbering", "de.neemann.digital.analyse" ], [ "ModelAnalyser", "de.neemann.digital.analyse" ], [ "CSVImporter", "de.neemann.digital.analyse" ], [ "BoolTableExpanded", "de.neemann.digital.analyse" ], [ "TruthTableTableModel", "de.neemann.digital.analyse" ], [ "TableReducer", "de.neemann.digital.analyse.quinemc" ], [ "PrimeSelector", "de.neemann.digital.analyse.quinemc.primeselector" ], [ "BruteForce", "de.neemann.digital.analyse.quinemc.primeselector" ], [ "LargestFirst", "de.neemann.digital.analyse.quinemc.primeselector" ], [ "BruteForceGetAll", "de.neemann.digital.analyse.quinemc.primeselector" ], [ "PrimeSelectorDefault", "de.neemann.digital.analyse.quinemc.primeselector" ], [ "BoolTableByteArray", "de.neemann.digital.analyse.quinemc" ], [ "IndependentChecker", "de.neemann.digital.analyse.quinemc" ], [ "QuineMcCluskey", "de.neemann.digital.analyse.quinemc" ], [ "BoolTableExpression", "de.neemann.digital.analyse.quinemc" ], [ "BoolTableBoolArray", "de.neemann.digital.analyse.quinemc" ], [ "BoolTable", "de.neemann.digital.analyse.quinemc" ], [ "TableRows", "de.neemann.digital.analyse.quinemc" ], [ "ThreeStateValue", "de.neemann.digital.analyse.quinemc" ], [ "QuineMcCluskeyExam", "de.neemann.digital.analyse.quinemc" ], [ "TableRow", "de.neemann.digital.analyse.quinemc" ], [ "TruthTableConverter", "de.neemann.digital.analyse" ], [ "DetermineJKStateMachine", "de.neemann.digital.analyse" ], [ "Parser", "de.neemann.digital.analyse.parser" ], [ "ParseException", "de.neemann.digital.analyse.parser" ], [ "Tokenizer", "de.neemann.digital.analyse.parser" ], [ "ModelAnalyserInfo", "de.neemann.digital.analyse" ], [ "AnalyseException", "de.neemann.digital.analyse" ], [ "DependencyAnalyser", "de.neemann.digital.analyse" ], [ "SubstituteLibrary", "de.neemann.digital.analyse" ], [ "TruthTableFormatterHex", "de.neemann.digital.analyse.format" ], [ "TruthTableFormatter", "de.neemann.digital.analyse.format" ], [ "TruthTableFormatterTestCase", "de.neemann.digital.analyse.format" ], [ "TruthTableFormatterCSV", "de.neemann.digital.analyse.format" ], [ "TruthTableFormatterLaTeX", "de.neemann.digital.analyse.format" ], [ "MinimizerQuineMcCluskey", "de.neemann.digital.analyse" ], [ "ContextFiller", "de.neemann.digital.analyse.expression" ], [ "BitSetter", "de.neemann.digital.analyse.expression" ], [ "ExpressionVisitor", "de.neemann.digital.analyse.expression" ], [ "ContextMap", "de.neemann.digital.analyse.expression" ], [ "ComplexityVisitor", "de.neemann.digital.analyse.expression" ], [ "Operation", "de.neemann.digital.analyse.expression" ], [ "Context", "de.neemann.digital.analyse.expression" ], [ "NInputs", "de.neemann.digital.analyse.expression.modify" ], [ "NOr", "de.neemann.digital.analyse.expression.modify" ], [ "ExpressionModifier", "de.neemann.digital.analyse.expression.modify" ], [ "NAnd", "de.neemann.digital.analyse.expression.modify" ], [ "Constant", "de.neemann.digital.analyse.expression" ], [ "Expression", "de.neemann.digital.analyse.expression" ], [ "Variable", "de.neemann.digital.analyse.expression" ], [ "ExpressionException", "de.neemann.digital.analyse.expression" ], [ "ComplexityInclNotVisitor", "de.neemann.digital.analyse.expression" ], [ "Equals", "de.neemann.digital.analyse.expression" ], [ "FormatToExpression", "de.neemann.digital.analyse.expression.format" ], [ "FormatToTable", "de.neemann.digital.analyse.expression.format" ], [ "Formatter", "de.neemann.digital.analyse.expression.format" ], [ "FormatterException", "de.neemann.digital.analyse.expression.format" ], [ "FormatToTableLatex", "de.neemann.digital.analyse.expression.format" ], [ "Not", "de.neemann.digital.analyse.expression" ], [ "VariableVisitor", "de.neemann.digital.analyse.expression" ], [ "NamedExpression", "de.neemann.digital.analyse.expression" ], [ "MinimizerQuineMcCluskeyExam", "de.neemann.digital.analyse" ], [ "TruthTable", "de.neemann.digital.analyse" ], [ "SplitPinString", "de.neemann.digital.analyse" ], [ "CycleDetector", "de.neemann.digital.analyse" ], [ "DigitalRemoteInterface", "de.neemann.digital.gui" ], [ "TextSearchFilter", "de.neemann.digital.gui" ], [ "ExportZipAction", "de.neemann.digital.gui" ], [ "SettingsBase", "de.neemann.digital.gui" ], [ "DocumentationLocator", "de.neemann.digital.gui" ], [ "InitialTutorial", "de.neemann.digital.gui.tutorial" ], [ "InsertAction", "de.neemann.digital.gui" ], [ "StatusInterface", "de.neemann.digital.gui" ], [ "SearchTextField", "de.neemann.digital.gui" ], [ "SaveAsHelper", "de.neemann.digital.gui" ], [ "FileHistory", "de.neemann.digital.gui" ], [ "ReleaseInfo", "de.neemann.digital.gui.release" ], [ "CheckForNewRelease", "de.neemann.digital.gui.release" ], [ "StateInterface", "de.neemann.digital.gui.state" ], [ "StateManager", "de.neemann.digital.gui.state" ], [ "State", "de.neemann.digital.gui.state" ], [ "CircuitScrollPanel", "de.neemann.digital.gui.components" ], [ "ItemPicker", "de.neemann.digital.gui.components" ], [ "LibraryTreeModel", "de.neemann.digital.gui.components.tree" ], [ "SelectTree", "de.neemann.digital.gui.components.tree" ], [ "WindowPosManager", "de.neemann.digital.gui.components" ], [ "CustomShapeEditor", "de.neemann.digital.gui.components" ], [ "TransformHolder", "de.neemann.digital.gui.components" ], [ "EditorPanel", "de.neemann.digital.gui.components" ], [ "BehavioralFixtureCreator", "de.neemann.digital.gui.components" ], [ "EditorFactory", "de.neemann.digital.gui.components" ], [ "OrderMerger", "de.neemann.digital.gui.components" ], [ "ElementOrderer", "de.neemann.digital.gui.components" ], [ "ModifyMoveSelected", "de.neemann.digital.gui.components.modification" ], [ "ModifyMoveWire", "de.neemann.digital.gui.components.modification" ], [ "ModificationOfWire", "de.neemann.digital.gui.components.modification" ], [ "ModifyDeleteRect", "de.neemann.digital.gui.components.modification" ], [ "ModifyInsertWires", "de.neemann.digital.gui.components.modification" ], [ "ModifyInsertWire", "de.neemann.digital.gui.components.modification" ], [ "ModificationOfVisualElement", "de.neemann.digital.gui.components.modification" ], [ "ModifyCircuitAttributes", "de.neemann.digital.gui.components.modification" ], [ "ModifyDeleteWire", "de.neemann.digital.gui.components.modification" ], [ "ModifyMoveAndRotElement", "de.neemann.digital.gui.components.modification" ], [ "ModifyMeasurementOrdering", "de.neemann.digital.gui.components.modification" ], [ "ModifyDeleteElement", "de.neemann.digital.gui.components.modification" ], [ "ModifyAttribute", "de.neemann.digital.gui.components.modification" ], [ "ModifyAttributes", "de.neemann.digital.gui.components.modification" ], [ "ModifyInsertElement", "de.neemann.digital.gui.components.modification" ], [ "DataEditor", "de.neemann.digital.gui.components" ], [ "CircuitModifierPostClosed", "de.neemann.digital.gui.components" ], [ "CharDeleter", "de.neemann.digital.gui.components.terminal" ], [ "ConsoleTerminal", "de.neemann.digital.gui.components.terminal" ], [ "Terminal", "de.neemann.digital.gui.components.terminal" ], [ "TerminalDialog", "de.neemann.digital.gui.components.terminal" ], [ "TerminalInterface", "de.neemann.digital.gui.components.terminal" ], [ "Keyboard", "de.neemann.digital.gui.components.terminal" ], [ "KeyboardDialog", "de.neemann.digital.gui.components.terminal" ], [ "Editor", "de.neemann.digital.gui.components" ], [ "VarRectList", "de.neemann.digital.gui.components.karnaugh" ], [ "KarnaughMap", "de.neemann.digital.gui.components.karnaugh" ], [ "KarnaughMapComponent", "de.neemann.digital.gui.components.karnaugh" ], [ "KarnaughMapDialog", "de.neemann.digital.gui.components.karnaugh" ], [ "MapLayout", "de.neemann.digital.gui.components.karnaugh" ], [ "KarnaughException", "de.neemann.digital.gui.components.karnaugh" ], [ "CircuitTransferable", "de.neemann.digital.gui.components" ], [ "ElementHelpDialog", "de.neemann.digital.gui.components" ], [ "TestCaseDescriptionDialog", "de.neemann.digital.gui.components.testing" ], [ "ValueTableDialog", "de.neemann.digital.gui.components.testing" ], [ "TestCaseDescriptionEditor", "de.neemann.digital.gui.components.testing" ], [ "TestAllDialog", "de.neemann.digital.gui.components.testing" ], [ "ExpressionListenerOptimizeJK", "de.neemann.digital.gui.components.table" ], [ "LaTeXExpressionListener", "de.neemann.digital.gui.components.table" ], [ "HardwareDescriptionGenerator", "de.neemann.digital.gui.components.table.hardware" ], [ "GenerateFile", "de.neemann.digital.gui.components.table.hardware" ], [ "GenerateCUPL", "de.neemann.digital.gui.components.table.hardware" ], [ "ExpressionListener", "de.neemann.digital.gui.components.table" ], [ "ReorderOutputs", "de.neemann.digital.gui.components.table" ], [ "AllSolutionsDialog", "de.neemann.digital.gui.components.table" ], [ "ExpressionListenerJK", "de.neemann.digital.gui.components.table" ], [ "ExpressionListenerCSVCondensed", "de.neemann.digital.gui.components.table" ], [ "ExpressionCreator", "de.neemann.digital.gui.components.table" ], [ "TableDialog", "de.neemann.digital.gui.components.table" ], [ "BuilderExpressionCreator", "de.neemann.digital.gui.components.table" ], [ "ExpressionComponent", "de.neemann.digital.gui.components.table" ], [ "PlainTextExpressionListener", "de.neemann.digital.gui.components.table" ], [ "TableReorderManager", "de.neemann.digital.gui.components.table" ], [ "ShowStringDialog", "de.neemann.digital.gui.components.table" ], [ "ReorderInputs", "de.neemann.digital.gui.components.table" ], [ "ProgressDialog", "de.neemann.digital.gui.components.table" ], [ "CheckResultListener", "de.neemann.digital.gui.components.table" ], [ "ExpressionListenerStore", "de.neemann.digital.gui.components.table" ], [ "AttributeDialog", "de.neemann.digital.gui.components" ], [ "ProbeDialog", "de.neemann.digital.gui.components" ], [ "ColorSchemeEditor", "de.neemann.digital.gui.components" ], [ "ROMEditorDialog", "de.neemann.digital.gui.components" ], [ "LabelGenerator", "de.neemann.digital.gui.components" ], [ "SingleValueDialog", "de.neemann.digital.gui.components" ], [ "ExpressionDialog", "de.neemann.digital.gui.components.expression" ], [ "CircuitComponent", "de.neemann.digital.gui.components" ], [ "VGA", "de.neemann.digital.gui.components.graphics" ], [ "GraphicCard", "de.neemann.digital.gui.components.graphics" ], [ "LedMatrix", "de.neemann.digital.gui.components.graphics" ], [ "VGADialog", "de.neemann.digital.gui.components.graphics" ], [ "MoveFocusTo", "de.neemann.digital.gui.components.graphics" ], [ "LedMatrixComponent", "de.neemann.digital.gui.components.graphics" ], [ "GraphicDialog", "de.neemann.digital.gui.components.graphics" ], [ "GraphicComponent", "de.neemann.digital.gui.components.graphics" ], [ "LedMatrixDialog", "de.neemann.digital.gui.components.graphics" ], [ "ConstraintsBuilder", "de.neemann.digital.gui.components" ], [ "ScopeTrigger", "de.neemann.digital.gui.components.data" ], [ "GraphDialog", "de.neemann.digital.gui.components.data" ], [ "GraphComponent", "de.neemann.digital.gui.components.data" ], [ "DummyElement", "de.neemann.digital.gui.components.data" ], [ "ValueTableObserver", "de.neemann.digital.gui.components.data" ], [ "CircuitModifier", "de.neemann.digital.gui.components" ], [ "CopiedElementLabelRenamer", "de.neemann.digital.gui.components" ], [ "TextLineNumber", "de.neemann.digital.gui.components" ], [ "InsertHistory", "de.neemann.digital.gui" ], [ "ProgramMemoryLoader", "de.neemann.digital.gui" ], [ "Main", "de.neemann.digital.gui" ], [ "StatsDialog", "de.neemann.digital.gui" ], [ "WindowManager", "de.neemann.digital.gui" ], [ "Settings", "de.neemann.digital.gui" ], [ "LibrarySelector", "de.neemann.digital.gui" ], [ "DigitalUncaughtExceptionHandler", "de.neemann.digital.gui" ], [ "NumberingWizard", "de.neemann.digital.gui" ], [ "HandlerInterface", "de.neemann.digital.gui.remote" ], [ "RemoteSever", "de.neemann.digital.gui.remote" ], [ "RemoteException", "de.neemann.digital.gui.remote" ], [ "DigitalHandler", "de.neemann.digital.gui.remote" ], [ "ModelModifier", "de.neemann.digital.gui" ], [ "VerilogCreator", "de.neemann.digital.hdl.verilog2" ], [ "VerilogRenaming", "de.neemann.digital.hdl.verilog2" ], [ "VerilogGenerator", "de.neemann.digital.hdl.verilog2" ], [ "VerilogTestBenchCreator", "de.neemann.digital.hdl.verilog2" ], [ "VerilogElement", "de.neemann.digital.hdl.verilog2.lib" ], [ "VerilogTemplate", "de.neemann.digital.hdl.verilog2.lib" ], [ "VerilogLibrary", "de.neemann.digital.hdl.verilog2" ], [ "CodePrinter", "de.neemann.digital.hdl.printer" ], [ "CodePrinterStr", "de.neemann.digital.hdl.printer" ], [ "Statements", "de.neemann.digital.hdl.hgs" ], [ "Parser", "de.neemann.digital.hdl.hgs" ], [ "ParserException", "de.neemann.digital.hdl.hgs" ], [ "Statement", "de.neemann.digital.hdl.hgs" ], [ "Context", "de.neemann.digital.hdl.hgs" ], [ "FirstClassFunctionCall", "de.neemann.digital.hdl.hgs.function" ], [ "InnerFunction", "de.neemann.digital.hdl.hgs.function" ], [ "JavaClass", "de.neemann.digital.hdl.hgs.function" ], [ "FirstClassFunction", "de.neemann.digital.hdl.hgs.function" ], [ "Func", "de.neemann.digital.hdl.hgs.function" ], [ "Function", "de.neemann.digital.hdl.hgs.function" ], [ "Expression", "de.neemann.digital.hdl.hgs" ], [ "HGSEvalException", "de.neemann.digital.hdl.hgs" ], [ "Tokenizer", "de.neemann.digital.hdl.hgs" ], [ "ReferenceToFunc", "de.neemann.digital.hdl.hgs.refs" ], [ "ReferenceToStruct", "de.neemann.digital.hdl.hgs.refs" ], [ "ReferenceToArray", "de.neemann.digital.hdl.hgs.refs" ], [ "Reference", "de.neemann.digital.hdl.hgs.refs" ], [ "ReferenceToVar", "de.neemann.digital.hdl.hgs.refs" ], [ "Value", "de.neemann.digital.hdl.hgs" ], [ "HGSMap", "de.neemann.digital.hdl.hgs" ], [ "HGSArray", "de.neemann.digital.hdl.hgs" ], [ "Separator", "de.neemann.digital.hdl.vhdl2" ], [ "VHDLLibrary", "de.neemann.digital.hdl.vhdl2" ], [ "VHDLCreator", "de.neemann.digital.hdl.vhdl2" ], [ "VHDLRenaming", "de.neemann.digital.hdl.vhdl2" ], [ "VHDLGenerator", "de.neemann.digital.hdl.vhdl2" ], [ "VHDLEntity", "de.neemann.digital.hdl.vhdl2.entities" ], [ "VHDLTemplate", "de.neemann.digital.hdl.vhdl2.entities" ], [ "VHDLTemplateFunctions", "de.neemann.digital.hdl.vhdl2.entities" ], [ "VHDLTestBenchCreator", "de.neemann.digital.hdl.vhdl2" ], [ "HDLModel", "de.neemann.digital.hdl.model2" ], [ "HDLNode", "de.neemann.digital.hdl.model2" ], [ "HDLNet", "de.neemann.digital.hdl.model2" ], [ "Printable", "de.neemann.digital.hdl.model2" ], [ "HDLException", "de.neemann.digital.hdl.model2" ], [ "HDLPort", "de.neemann.digital.hdl.model2" ], [ "HasName", "de.neemann.digital.hdl.model2" ], [ "InlineManyToOne", "de.neemann.digital.hdl.model2.optimizations" ], [ "MergeAssignments", "de.neemann.digital.hdl.model2.optimizations" ], [ "Optimization", "de.neemann.digital.hdl.model2.optimizations" ], [ "MergeConstants", "de.neemann.digital.hdl.model2.optimizations" ], [ "ReplaceOneToMany", "de.neemann.digital.hdl.model2.optimizations" ], [ "NameConstantSignals", "de.neemann.digital.hdl.model2.optimizations" ], [ "OptimizeExpressions", "de.neemann.digital.hdl.model2.optimizations" ], [ "RemoveConstantSignals", "de.neemann.digital.hdl.model2.optimizations" ], [ "NodeSorterExpressionBased", "de.neemann.digital.hdl.model2.optimizations" ], [ "HDLNodeSplitterManyToOne", "de.neemann.digital.hdl.model2" ], [ "HDLNodeCustom", "de.neemann.digital.hdl.model2" ], [ "HDLNodeAssignment", "de.neemann.digital.hdl.model2" ], [ "HDLCircuit", "de.neemann.digital.hdl.model2" ], [ "ExprVar", "de.neemann.digital.hdl.model2.expression" ], [ "Visitor", "de.neemann.digital.hdl.model2.expression" ], [ "ExprVarRange", "de.neemann.digital.hdl.model2.expression" ], [ "Expression", "de.neemann.digital.hdl.model2.expression" ], [ "ExpressionOptimizer", "de.neemann.digital.hdl.model2.expression" ], [ "ExprNot", "de.neemann.digital.hdl.model2.expression" ], [ "ExprConstant", "de.neemann.digital.hdl.model2.expression" ], [ "ExprOperate", "de.neemann.digital.hdl.model2.expression" ], [ "ExprUsingNet", "de.neemann.digital.hdl.model2.expression" ], [ "HDLNodeBuildIn", "de.neemann.digital.hdl.model2" ], [ "HDLClockIntegrator", "de.neemann.digital.hdl.model2.clock" ], [ "ClockIntegratorGeneric", "de.neemann.digital.hdl.model2.clock" ], [ "ClockInfo", "de.neemann.digital.hdl.model2.clock" ], [ "HDLNodeSplitterOneToMany", "de.neemann.digital.hdl.model2" ], [ "FileLocator", "de.neemann.digital" ], [ "ValueTable", "de.neemann.digital.data" ], [ "ValueTableModel", "de.neemann.digital.data" ], [ "DataPlotter", "de.neemann.digital.data" ], [ "Value", "de.neemann.digital.data" ], [ "ExpressionExporter", "de.neemann.digital.builder" ], [ "ExpressionToFileExporter", "de.neemann.digital.builder" ], [ "RotationByteArrayOutputStream", "de.neemann.digital.builder.tt2" ], [ "TT2Exporter", "de.neemann.digital.builder.tt2" ], [ "StartATF150xFitter", "de.neemann.digital.builder.tt2" ], [ "OSExecute", "de.neemann.digital.builder.tt2" ], [ "CreateCHN", "de.neemann.digital.builder.ATF150x" ], [ "ATFDevice", "de.neemann.digital.builder.ATF150x" ], [ "ATFDialog", "de.neemann.digital.builder.ATF150x" ], [ "PL", "de.neemann.digital.builder.ATF150x" ], [ "ATF150xCuplExporter", "de.neemann.digital.builder.ATF150x" ], [ "PinMap", "de.neemann.digital.builder" ], [ "PinMapException", "de.neemann.digital.builder" ], [ "FragmentExpression", "de.neemann.digital.builder.circuit" ], [ "FragmentVisualElement", "de.neemann.digital.builder.circuit" ], [ "FragmentSameInValue", "de.neemann.digital.builder.circuit" ], [ "CircuitBuilder", "de.neemann.digital.builder.circuit" ], [ "FragmentVisitor", "de.neemann.digital.builder.circuit" ], [ "FragmentVariable", "de.neemann.digital.builder.circuit" ], [ "Fragment", "de.neemann.digital.builder.circuit" ], [ "Box", "de.neemann.digital.builder.circuit" ], [ "Gal16v8JEDECExporter", "de.neemann.digital.builder.Gal16v8" ], [ "CuplExporter", "de.neemann.digital.builder.Gal16v8" ], [ "BuilderCollectorGAL", "de.neemann.digital.builder.Gal16v8" ], [ "CleanNameBuilder", "de.neemann.digital.builder" ], [ "BuilderCollector", "de.neemann.digital.builder" ], [ "BuilderInterface", "de.neemann.digital.builder" ], [ "BuilderException", "de.neemann.digital.builder" ], [ "Gal22v10JEDECExporter", "de.neemann.digital.builder.Gal22v10" ], [ "Gal22v10CuplExporter", "de.neemann.digital.builder.Gal22v10" ], [ "FuseMap", "de.neemann.digital.builder.jedec" ], [ "FuseMapFillerException", "de.neemann.digital.builder.jedec" ], [ "FuseMapFiller", "de.neemann.digital.builder.jedec" ], [ "JedecWriter", "de.neemann.digital.builder.jedec" ], [ "GenericCode", "de.neemann.digital.draw.library" ], [ "ElementLibrary", "de.neemann.digital.draw.library" ], [ "GenericInitCode", "de.neemann.digital.draw.library" ], [ "Visitor", "de.neemann.digital.draw.library" ], [ "ComponentManager", "de.neemann.digital.draw.library" ], [ "LibraryListener", "de.neemann.digital.draw.library" ], [ "JarComponentManager", "de.neemann.digital.draw.library" ], [ "ElementLibraryFolder", "de.neemann.digital.draw.library" ], [ "CustomElement", "de.neemann.digital.draw.library" ], [ "ElementNotFoundNotification", "de.neemann.digital.draw.library" ], [ "ElementNotFoundException", "de.neemann.digital.draw.library" ], [ "ComponentSource", "de.neemann.digital.draw.library" ], [ "LibraryInterface", "de.neemann.digital.draw.library" ], [ "ResolveGenerics", "de.neemann.digital.draw.library" ], [ "LibraryNode", "de.neemann.digital.draw.library" ], [ "ElementTypeDescriptionCustom", "de.neemann.digital.draw.library" ], [ "InvalidNodeException", "de.neemann.digital.draw.library" ], [ "NumStringComparator", "de.neemann.digital.draw.library" ], [ "InputShape", "de.neemann.digital.draw.shapes" ], [ "Interactor", "de.neemann.digital.draw.shapes" ], [ "ButtonShape", "de.neemann.digital.draw.shapes" ], [ "GenericShape", "de.neemann.digital.draw.shapes" ], [ "Drawable", "de.neemann.digital.draw.shapes" ], [ "DelayShape", "de.neemann.digital.draw.shapes" ], [ "DiodeBackwardShape", "de.neemann.digital.draw.shapes" ], [ "FuseShape", "de.neemann.digital.draw.shapes" ], [ "FETShapeP", "de.neemann.digital.draw.shapes" ], [ "DILShape", "de.neemann.digital.draw.shapes" ], [ "DipSwitchShape", "de.neemann.digital.draw.shapes" ], [ "SwitchShape", "de.neemann.digital.draw.shapes" ], [ "LightBulbShape", "de.neemann.digital.draw.shapes" ], [ "LayoutShape", "de.neemann.digital.draw.shapes" ], [ "SplitterShape", "de.neemann.digital.draw.shapes" ], [ "PolarityAwareLEDShape", "de.neemann.digital.draw.shapes" ], [ "ButtonLEDShape", "de.neemann.digital.draw.shapes" ], [ "RelayShape", "de.neemann.digital.draw.shapes" ], [ "ConstShape", "de.neemann.digital.draw.shapes" ], [ "BreakShape", "de.neemann.digital.draw.shapes" ], [ "GenericCodeShape", "de.neemann.digital.draw.shapes" ], [ "TextShape", "de.neemann.digital.draw.shapes" ], [ "SevenSegHexShape", "de.neemann.digital.draw.shapes" ], [ "ProbeShape", "de.neemann.digital.draw.shapes" ], [ "NotConnectedShape", "de.neemann.digital.draw.shapes" ], [ "StepperMotorShape", "de.neemann.digital.draw.shapes" ], [ "FETShape", "de.neemann.digital.draw.shapes" ], [ "BitSelShape", "de.neemann.digital.draw.shapes" ], [ "SevenSegShape", "de.neemann.digital.draw.shapes" ], [ "GenericInitCodeShape", "de.neemann.digital.draw.shapes" ], [ "RelayDTShape", "de.neemann.digital.draw.shapes" ], [ "RectShape", "de.neemann.digital.draw.shapes" ], [ "VDDShape", "de.neemann.digital.draw.shapes" ], [ "RAMShape", "de.neemann.digital.draw.shapes" ], [ "ScopeShape", "de.neemann.digital.draw.shapes" ], [ "DemuxerShape", "de.neemann.digital.draw.shapes" ], [ "FETShapeN", "de.neemann.digital.draw.shapes" ], [ "BusSplitterShape", "de.neemann.digital.draw.shapes" ], [ "PullUpShape", "de.neemann.digital.draw.shapes" ], [ "TestCaseShape", "de.neemann.digital.draw.shapes" ], [ "TunnelShape", "de.neemann.digital.draw.shapes" ], [ "MuxerShape", "de.neemann.digital.draw.shapes" ], [ "SwitchDTShape", "de.neemann.digital.draw.shapes" ], [ "PinControlShape", "de.neemann.digital.draw.shapes" ], [ "FGFETShapeN", "de.neemann.digital.draw.shapes" ], [ "TransGateShape", "de.neemann.digital.draw.shapes" ], [ "DiodeShape", "de.neemann.digital.draw.shapes" ], [ "ResetShape", "de.neemann.digital.draw.shapes" ], [ "DiodeForewardShape", "de.neemann.digital.draw.shapes" ], [ "SixteenShape", "de.neemann.digital.draw.shapes" ], [ "CustomCircuitShapeType", "de.neemann.digital.draw.shapes" ], [ "InteractorInterface", "de.neemann.digital.draw.shapes" ], [ "ShapeSpecificMatch", "de.neemann.digital.draw.shapes" ], [ "LEDShape", "de.neemann.digital.draw.shapes" ], [ "ClockShape", "de.neemann.digital.draw.shapes" ], [ "RGBLEDShape", "de.neemann.digital.draw.shapes" ], [ "RotEncoderShape", "de.neemann.digital.draw.shapes" ], [ "IEEEGenericShape", "de.neemann.digital.draw.shapes.ieee" ], [ "IEEEOrShape", "de.neemann.digital.draw.shapes.ieee" ], [ "IEEENotShape", "de.neemann.digital.draw.shapes.ieee" ], [ "IEEEAndShape", "de.neemann.digital.draw.shapes.ieee" ], [ "IEEEXOrShape", "de.neemann.digital.draw.shapes.ieee" ], [ "ObservableValueReader", "de.neemann.digital.draw.shapes" ], [ "SvgTemplate", "de.neemann.digital.draw.shapes.custom.svg" ], [ "TransformParser", "de.neemann.digital.draw.shapes.custom.svg" ], [ "Context", "de.neemann.digital.draw.shapes.custom.svg" ], [ "SvgException", "de.neemann.digital.draw.shapes.custom.svg" ], [ "SvgImporter", "de.neemann.digital.draw.shapes.custom.svg" ], [ "CustomShapeDescription", "de.neemann.digital.draw.shapes.custom" ], [ "CustomShape", "de.neemann.digital.draw.shapes.custom" ], [ "FGFETShapeP", "de.neemann.digital.draw.shapes" ], [ "OutputShape", "de.neemann.digital.draw.shapes" ], [ "GroundShape", "de.neemann.digital.draw.shapes" ], [ "AsyncClockShape", "de.neemann.digital.draw.shapes" ], [ "Shape", "de.neemann.digital.draw.shapes" ], [ "MissingShape", "de.neemann.digital.draw.shapes" ], [ "ShapeFactory", "de.neemann.digital.draw.shapes" ], [ "PullDownShape", "de.neemann.digital.draw.shapes" ], [ "DriverShape", "de.neemann.digital.draw.shapes" ], [ "SevenShape", "de.neemann.digital.draw.shapes" ], [ "DataShape", "de.neemann.digital.draw.shapes" ], [ "DotCreator", "de.neemann.digital.draw.elements" ], [ "Wire", "de.neemann.digital.draw.elements" ], [ "Movable", "de.neemann.digital.draw.elements" ], [ "Pins", "de.neemann.digital.draw.elements" ], [ "Circuit", "de.neemann.digital.draw.elements" ], [ "Tunnel", "de.neemann.digital.draw.elements" ], [ "PinException", "de.neemann.digital.draw.elements" ], [ "ElementOrder", "de.neemann.digital.draw.elements" ], [ "VisualElement", "de.neemann.digital.draw.elements" ], [ "Pin", "de.neemann.digital.draw.elements" ], [ "IOState", "de.neemann.digital.draw.elements" ], [ "WireMerger", "de.neemann.digital.draw.elements" ], [ "WireConsistencyChecker", "de.neemann.digital.draw.elements" ], [ "AsyncSequentialClock", "de.neemann.digital.draw.model" ], [ "ModelEntry", "de.neemann.digital.draw.model" ], [ "Net", "de.neemann.digital.draw.model" ], [ "ModelCreator", "de.neemann.digital.draw.model" ], [ "InverterConfig", "de.neemann.digital.draw.model" ], [ "NetList", "de.neemann.digital.draw.model" ], [ "RealTimeClock", "de.neemann.digital.draw.model" ], [ "Polygon", "de.neemann.digital.draw.graphics" ], [ "Orientation", "de.neemann.digital.draw.graphics" ], [ "Vector", "de.neemann.digital.draw.graphics" ], [ "SVGSettings", "de.neemann.digital.draw.graphics" ], [ "Transform", "de.neemann.digital.draw.graphics" ], [ "ColorKey", "de.neemann.digital.draw.graphics" ], [ "ExportFactory", "de.neemann.digital.draw.graphics" ], [ "GraphicsImage", "de.neemann.digital.draw.graphics" ], [ "VectorInterface", "de.neemann.digital.draw.graphics" ], [ "TextFormatSVG", "de.neemann.digital.draw.graphics" ], [ "TransformMatrix", "de.neemann.digital.draw.graphics" ], [ "TextFormatLaTeX", "de.neemann.digital.draw.graphics" ], [ "GraphicMinMax", "de.neemann.digital.draw.graphics" ], [ "GraphicTransform", "de.neemann.digital.draw.graphics" ], [ "ColorScheme", "de.neemann.digital.draw.graphics" ], [ "Style", "de.neemann.digital.draw.graphics" ], [ "GraphicSkipLines", "de.neemann.digital.draw.graphics.linemerger" ], [ "GraphicLineCollector", "de.neemann.digital.draw.graphics.linemerger" ], [ "PolygonConverter", "de.neemann.digital.draw.graphics" ], [ "VectorFloat", "de.neemann.digital.draw.graphics" ], [ "TransformRotate", "de.neemann.digital.draw.graphics" ], [ "Graphic", "de.neemann.digital.draw.graphics" ], [ "ColorStyleHighContrast", "de.neemann.digital.draw.graphics" ], [ "Parser", "de.neemann.digital.draw.graphics.text" ], [ "ParseException", "de.neemann.digital.draw.graphics.text" ], [ "PlainTextFormatter", "de.neemann.digital.draw.graphics.text.formatter" ], [ "SVGFormatter", "de.neemann.digital.draw.graphics.text.formatter" ], [ "GraphicsFormatter", "de.neemann.digital.draw.graphics.text.formatter" ], [ "LaTeXFormatter", "de.neemann.digital.draw.graphics.text.formatter" ], [ "Decorate", "de.neemann.digital.draw.graphics.text.text" ], [ "Text", "de.neemann.digital.draw.graphics.text.text" ], [ "Index", "de.neemann.digital.draw.graphics.text.text" ], [ "Sentence", "de.neemann.digital.draw.graphics.text.text" ], [ "Blank", "de.neemann.digital.draw.graphics.text.text" ], [ "Character", "de.neemann.digital.draw.graphics.text.text" ], [ "ExpressionToText", "de.neemann.digital.draw.graphics.text.text" ], [ "Simple", "de.neemann.digital.draw.graphics.text.text" ], [ "Export", "de.neemann.digital.draw.graphics" ], [ "ColorStyleMonochrome", "de.neemann.digital.draw.graphics" ], [ "TransformTranslate", "de.neemann.digital.draw.graphics" ], [ "GraphicSVG", "de.neemann.digital.draw.graphics" ], [ "GraphicSwing", "de.neemann.digital.draw.graphics" ], [ "PolygonParser", "de.neemann.digital.draw.graphics" ], [ "SVGTokenizer", "de.neemann.digital.draw.graphics" ], [ "GifSequenceWriter", "de.neemann.digital.draw.gif" ], [ "GifExporter", "de.neemann.digital.draw.gif" ], [ "ConfigCache", "de.neemann.digital.toolchain" ], [ "Configuration", "de.neemann.digital.toolchain" ], [ "Command", "de.neemann.digital.toolchain" ], [ "FileToCreate", "de.neemann.digital.toolchain" ] ],
  "tokensProjectClassesNonPrivateStaticNonVoidMethods" : [ [ "getMouse", "de.neemann.gui", "Mouse", "static Mouse getMouse()" ], [ "create", "de.neemann.gui", "IconCreator", "public static Icon create(String name)" ], [ "createImage", "de.neemann.gui", "IconCreator", "public static Image createImage(String name)" ], [ "createImages", "de.neemann.gui", "IconCreator", "public static ArrayList<Image> createImages(String... names)" ], [ "getCTRLMask", "de.neemann.gui", "ToolTipAction", "public static int getCTRLMask()" ], [ "checkForSave", "de.neemann.gui", "ClosingWindowListener", "public static boolean checkForSave(JFrame parent, ConfirmSave confirmSave)" ], [ "getParentWindow", "de.neemann.gui", "ErrorMessage", "public static Window getParentWindow(Component parent)" ], [ "getInstance", "de.neemann.gui", "Screen", "public static Screen getInstance()" ], [ "getDefaultFontScaling", "de.neemann.gui", "Screen", "public static int getDefaultFontScaling()" ], [ "isLinux", "de.neemann.gui", "Screen", "public static boolean isLinux()" ], [ "isMac", "de.neemann.gui", "Screen", "public static boolean isMac()" ], [ "getInstance", "de.neemann.gui", "InfoDialog", "public static InfoDialog getInstance()" ], [ "read", "de.neemann.digital.core.memory.importer", "Importer", "public static DataField read(File hexFile, int dataBits, boolean bigEndian) throws IOException" ], [ "getOriginOf", "de.neemann.digital.core", "ExceptionWithOrigin", "public static String getOriginOf(Throwable e)" ], [ "zMaskString", "de.neemann.digital.core", "ObservableValue", "static String zMaskString(long value, long highZ, int bits)" ], [ "getInstance", "de.neemann.digital.core", "GlobalValues", "public static GlobalValues getInstance()" ], [ "getInstance", "de.neemann.digital.core.io", "MIDIHelper", "public static MIDIHelper getInstance()" ], [ "input", "de.neemann.digital.core.element", "PinInfo", "public static PinInfo input(String name)" ], [ "input", "de.neemann.digital.core.element", "PinInfo", "public static PinInfo input(String name, String description)" ], [ "output", "de.neemann.digital.core.element", "PinInfo", "public static PinInfo output(String name)" ], [ "isInOut", "de.neemann.digital.core.element", "PinDescription", "public static boolean isInOut(Direction a, Direction b)" ], [ "isInOut", "de.neemann.digital.core.element", "Direction", "public static boolean isInOut(Direction a, Direction b)" ], [ "getKeyByName", "de.neemann.digital.core.element", "Keys", "public static Key getKeyByName(String name)" ], [ "getKeys", "de.neemann.digital.core.element", "Keys", "public static Iterable<Key> getKeys()" ], [ "combine", "de.neemann.digital.core.element", "ImmutableList", "public static <T> ImmutableList<T> combine(ImmutableList<T> a, ImmutableList<T> b)" ], [ "createSwitchModel", "de.neemann.digital.core.switching", "PlainSwitch", "static SwitchModel createSwitchModel(ObservableValue input1, ObservableValue input2, ObservableValue output1, ObservableValue output2) throws NodeException" ], [ "createOneToN", "de.neemann.digital.core.wiring", "Splitter", "public static Splitter createOneToN(int bits)" ], [ "createNToOne", "de.neemann.digital.core.wiring", "Splitter", "public static Splitter createNToOne(int bits)" ], [ "ovs", "de.neemann.digital.core", "ObservableValues", "public static ObservableValues ovs(ObservableValue... items)" ], [ "toShortHex", "de.neemann.digital.core", "IntFormat", "public static String toShortHex(long value)" ], [ "up", "de.neemann.digital.core", "Bits", "public static long up(long val, int bits)" ], [ "down", "de.neemann.digital.core", "Bits", "public static long down(long val, int bits)" ], [ "mask", "de.neemann.digital.core", "Bits", "public static long mask(int bits)" ], [ "signedFlagMask", "de.neemann.digital.core", "Bits", "public static long signedFlagMask(int bits)" ], [ "isNegative", "de.neemann.digital.core", "Bits", "public static boolean isNegative(long value, int bits)" ], [ "signExtend", "de.neemann.digital.core", "Bits", "public static long signExtend(long value, int bits)" ], [ "binLn2", "de.neemann.digital.core", "Bits", "public static int binLn2(long b)" ], [ "removeBitFromValue", "de.neemann.digital.core", "Bits", "public static int removeBitFromValue(int value, int bit)" ], [ "decode", "de.neemann.digital.core", "Bits", "public static long decode(String str) throws NumberFormatException" ], [ "decode", "de.neemann.digital.core", "Bits", "public static long decode(String str, boolean parseFloats) throws NumberFormatException" ], [ "decode", "de.neemann.digital.core", "Bits", "public static long decode(String str, int p, int radix) throws NumberFormatException" ], [ "getCode", "de.neemann.digital.core.extern", "Application", "static String getCode(ElementAttributes attr, File root) throws IOException" ], [ "readCode", "de.neemann.digital.core.extern", "Application", "static String readCode(File file) throws IOException" ], [ "create", "de.neemann.digital.core.extern", "Application", "static Application create(Type type, ElementAttributes attr)" ], [ "start", "de.neemann.digital.core.extern", "ProcessStarter", "public static String start(File dir, String... args) throws IOException" ], [ "joinStrings", "de.neemann.digital.core.extern", "ProcessStarter", "public static String joinStrings(String... strings)" ], [ "fromString", "de.neemann.digital.cli.cli", "Argument", "public static Object fromString(String val, Object defValue) throws CLIException" ], [ "fac", "de.neemann.digital.fsm", "Optimizer", "public static long fac(int n)" ], [ "getTimeComplexity", "de.neemann.digital.fsm", "Optimizer", "public static long getTimeComplexity(FSM fsm)" ], [ "calcComplexity", "de.neemann.digital.fsm", "Optimizer", "static int calcComplexity(FSM fsm, boolean out) throws ExpressionException, FiniteStateMachineException, FormatterException" ], [ "blink", "de.neemann.digital.fsm", "FSMDemos", "public static FSM blink()" ], [ "rotDecoder", "de.neemann.digital.fsm", "FSMDemos", "public static FSM rotDecoder()" ], [ "counter", "de.neemann.digital.fsm", "FSMDemos", "public static FSM counter(int n)" ], [ "trafficLight", "de.neemann.digital.fsm", "FSMDemos", "public static FSM trafficLight()" ], [ "trafficLightMedwedew", "de.neemann.digital.fsm", "FSMDemos", "public static FSM trafficLightMedwedew()" ], [ "selCounter", "de.neemann.digital.fsm", "FSMDemos", "public static FSM selCounter()" ], [ "stepper", "de.neemann.digital.fsm", "FSMDemos", "public static FSM stepper()" ], [ "stepperMedwedew", "de.neemann.digital.fsm", "FSMDemos", "public static FSM stepperMedwedew()" ], [ "getxStream", "de.neemann.digital.fsm", "FSM", "public static XStream getxStream()" ], [ "loadFSM", "de.neemann.digital.fsm", "FSM", "public static FSM loadFSM(File filename) throws IOException" ], [ "loadFSM", "de.neemann.digital.fsm", "FSM", "public static FSM loadFSM(InputStream in) throws IOException" ], [ "get", "de.neemann.digital.lang", "Lang", "public static String get(String key, Object... params)" ], [ "getNull", "de.neemann.digital.lang", "Lang", "public static String getNull(String key, Object... params)" ], [ "getBundle", "de.neemann.digital.lang", "Lang", "public static Bundle getBundle()" ], [ "currentLanguage", "de.neemann.digital.lang", "Lang", "public static Language currentLanguage()" ], [ "evalMultilingualContent", "de.neemann.digital.lang", "Lang", "public static String evalMultilingualContent(String text)" ], [ "evalMultilingualContent", "de.neemann.digital.lang", "Lang", "static String evalMultilingualContent(String text, Language currentLanguage)" ], [ "lowest", "de.neemann.digital.testing.parser", "OperatorPrecedence", "public static OperatorPrecedence lowest()" ], [ "addOne", "de.neemann.digital.analyse", "ModelAnalyser", "public static String addOne(String name)" ], [ "readCSV", "de.neemann.digital.analyse", "CSVImporter", "public static TruthTable readCSV(File file) throws IOException" ], [ "readCSV", "de.neemann.digital.analyse", "CSVImporter", "public static TruthTable readCSV(String csv) throws IOException" ], [ "readCSV", "de.neemann.digital.analyse", "CSVImporter", "public static TruthTable readCSV(Reader csv) throws IOException" ], [ "createDoubledValues", "de.neemann.digital.analyse.quinemc", "BoolTableByteArray", "public static BoolTableByteArray createDoubledValues(BoolTable values)" ], [ "simplify", "de.neemann.digital.analyse.quinemc", "QuineMcCluskey", "public static Expression simplify(Expression expression) throws ExpressionException" ], [ "addAnd", "de.neemann.digital.analyse.quinemc", "QuineMcCluskey", "public static Expression addAnd(Expression e, Iterable<TableRow> rows, List<Variable> variables)" ], [ "value", "de.neemann.digital.analyse.quinemc", "ThreeStateValue", "public static ThreeStateValue value(boolean bool)" ], [ "value", "de.neemann.digital.analyse.quinemc", "ThreeStateValue", "public static ThreeStateValue value(int value)" ], [ "doImplicitTypeCasts", "de.neemann.digital.analyse", "SubstituteLibrary", "static Object doImplicitTypeCasts(Class<?> expectedClass, Object val)" ], [ "or", "de.neemann.digital.analyse.expression", "Operation", "public static Expression or(Iterable<Expression> exp)" ], [ "or", "de.neemann.digital.analyse.expression", "Operation", "public static Expression or(Expression... exp)" ], [ "xor", "de.neemann.digital.analyse.expression", "Operation", "public static Expression xor(Expression a, Expression b)" ], [ "orNoMerge", "de.neemann.digital.analyse.expression", "Operation", "public static Expression orNoMerge(Expression... exp)" ], [ "and", "de.neemann.digital.analyse.expression", "Operation", "public static Expression and(Iterable<Expression> exp)" ], [ "and", "de.neemann.digital.analyse.expression", "Operation", "public static Expression and(Expression... exp)" ], [ "andNoMerge", "de.neemann.digital.analyse.expression", "Operation", "public static Expression andNoMerge(Expression... exp)" ], [ "modifyExpression", "de.neemann.digital.analyse.expression.modify", "ExpressionModifier", "static Expression modifyExpression(Expression expression, ExpressionModifier modifier)" ], [ "modifyExpression", "de.neemann.digital.analyse.expression.modify", "ExpressionModifier", "static Expression modifyExpression(Expression expression, ExpressionModifier... modifiers)" ], [ "v", "de.neemann.digital.analyse.expression", "Variable", "public static Variable v(String name)" ], [ "vars", "de.neemann.digital.analyse.expression", "Variable", "public static ArrayList<Variable> vars(int n)" ], [ "vars", "de.neemann.digital.analyse.expression", "Variable", "public static ArrayList<Variable> vars(String... names)" ], [ "isVar", "de.neemann.digital.analyse.expression", "Variable", "public static boolean isVar(Expression e)" ], [ "isVarOrNotVar", "de.neemann.digital.analyse.expression", "Variable", "public static boolean isVarOrNotVar(Expression e)" ], [ "getDefaultFormat", "de.neemann.digital.analyse.expression.format", "FormatToExpression", "public static FormatToExpression getDefaultFormat()" ], [ "defaultFormat", "de.neemann.digital.analyse.expression.format", "FormatToExpression", "public static String defaultFormat(Expression exp)" ], [ "not", "de.neemann.digital.analyse.expression", "Not", "public static Expression not(Expression a)" ], [ "readFromFile", "de.neemann.digital.analyse", "TruthTable", "public static TruthTable readFromFile(File filename) throws IOException" ], [ "create", "de.neemann.digital.analyse", "SplitPinString", "public static SplitPinString create(Signal s)" ], [ "create", "de.neemann.digital.analyse", "SplitPinString", "public static SplitPinString create(String pinStr)" ], [ "checkSuffix", "de.neemann.digital.gui", "SaveAsHelper", "public static File checkSuffix(File filename, String suffix)" ], [ "addF1Traversal", "de.neemann.digital.gui.components", "EditorFactory", "public static <TC extends JTextComponent> TC addF1Traversal(TC text)" ], [ "createUndoManager", "de.neemann.digital.gui.components", "EditorFactory", "public static UndoManager createUndoManager(JTextComponent text)" ], [ "create", "de.neemann.digital.gui.components.modification", "ModifyInsertWires", "public static Modification<Circuit> create(List<Wire> newWires)" ], [ "getToolTipName", "de.neemann.digital.gui.components.modification", "ModificationOfVisualElement", "public static String getToolTipName(VisualElement ve)" ], [ "getTerminal", "de.neemann.digital.gui.components.terminal", "TerminalDialog", "static TerminalInterface getTerminal(Model model, ElementAttributes attr)" ], [ "createList", "de.neemann.digital.gui.components", "CircuitTransferable", "public static ArrayList<Movable> createList(Object data, ShapeFactory shapeFactory) throws IOException" ], [ "createURLStreamHandlerFactory", "de.neemann.digital.gui.components", "ElementHelpDialog", "public static URLStreamHandlerFactory createURLStreamHandlerFactory()" ], [ "getImage", "de.neemann.digital.gui.components", "ElementHelpDialog", "static BufferedImage getImage(String name)" ], [ "getImage", "de.neemann.digital.gui.components", "MyURLStreamHandlerFactory", "static BufferedImage getImage(String name)" ], [ "isSequentialVar", "de.neemann.digital.gui.components.table", "ExpressionListenerJK", "public static String isSequentialVar(String name)" ], [ "getAttrList", "de.neemann.digital.gui.components", "CircuitComponent", "public static ArrayList<Key> getAttrList()" ], [ "raster", "de.neemann.digital.gui.components", "CircuitComponent", "public static Vector raster(Vector pos)" ], [ "createLiveDialog", "de.neemann.digital.gui.components.data", "GraphDialog", "public static GraphDialog createLiveDialog(JFrame owner, Model model, boolean microStep, List<String> ordering, int sampleSize)" ], [ "createColumnsInfo", "de.neemann.digital.gui.components.data", "GraphDialog", "static ValueTable.ColumnInfo[] createColumnsInfo(ArrayList<Signal> signals)" ], [ "create", "de.neemann.digital.gui.components", "CopiedElementLabelRenamer", "static LabelInstance create(VisualElement ve)" ], [ "create", "de.neemann.digital.gui.components", "CopiedElementLabelRenamer", "static LabelInstance create(String elementName, String fullLabel)" ], [ "create", "de.neemann.digital.gui.components", "LabelInstance", "static LabelInstance create(VisualElement ve)" ], [ "create", "de.neemann.digital.gui.components", "LabelInstance", "static LabelInstance create(String elementName, String fullLabel)" ], [ "isExperimentalMode", "de.neemann.digital.gui", "Main", "public static boolean isExperimentalMode()" ], [ "getInstance", "de.neemann.digital.gui", "WindowManager", "public static WindowManager getInstance()" ], [ "getInstance", "de.neemann.digital.gui", "Settings", "public static Settings getInstance()" ], [ "getRange", "de.neemann.digital.hdl.verilog2", "VerilogCreator", "public static String getRange(int bits)" ], [ "getType", "de.neemann.digital.hdl.verilog2", "VerilogCreator", "public static String getType(HDLPort.Direction def, HDLPort.Direction dir, int bits)" ], [ "value", "de.neemann.digital.hdl.verilog2", "VerilogCreator", "public static String value(ExprConstant con)" ], [ "value", "de.neemann.digital.hdl.verilog2", "VerilogCreator", "public static String value(long val, int bits)" ], [ "neededFileName", "de.neemann.digital.hdl.verilog2.lib", "VerilogTemplate", "public static String neededFileName(String elementName)" ], [ "createFromJar", "de.neemann.digital.hdl.hgs", "Parser", "public static Statement createFromJar(String path, ClassLoader cl) throws IOException, ParserException" ], [ "createFromJarStatic", "de.neemann.digital.hdl.hgs", "Parser", "public static Statement createFromJarStatic(String path)" ], [ "isWhiteSpace", "de.neemann.digital.hdl.hgs", "Tokenizer", "public static boolean isWhiteSpace(int c)" ], [ "toLong", "de.neemann.digital.hdl.hgs", "Value", "public static long toLong(Object value) throws HGSEvalException" ], [ "toDouble", "de.neemann.digital.hdl.hgs", "Value", "public static double toDouble(Object value) throws HGSEvalException" ], [ "toInt", "de.neemann.digital.hdl.hgs", "Value", "public static int toInt(Object value) throws HGSEvalException" ], [ "toBool", "de.neemann.digital.hdl.hgs", "Value", "public static boolean toBool(Object value) throws HGSEvalException" ], [ "toString", "de.neemann.digital.hdl.hgs", "Value", "public static String toString(Object value) throws HGSEvalException" ], [ "toArray", "de.neemann.digital.hdl.hgs", "Value", "public static HGSArray toArray(Object value) throws HGSEvalException" ], [ "toMap", "de.neemann.digital.hdl.hgs", "Value", "public static HGSMap toMap(Object value) throws HGSEvalException" ], [ "equals", "de.neemann.digital.hdl.hgs", "Value", "public static boolean equals(Object a, Object b)" ], [ "add", "de.neemann.digital.hdl.hgs", "Value", "public static Object add(Object a, Object b) throws HGSEvalException" ], [ "sub", "de.neemann.digital.hdl.hgs", "Value", "public static Object sub(Object a, Object b) throws HGSEvalException" ], [ "mul", "de.neemann.digital.hdl.hgs", "Value", "public static Object mul(Object a, Object b) throws HGSEvalException" ], [ "div", "de.neemann.digital.hdl.hgs", "Value", "public static Object div(Object a, Object b) throws HGSEvalException" ], [ "or", "de.neemann.digital.hdl.hgs", "Value", "public static Object or(Object a, Object b) throws HGSEvalException" ], [ "xor", "de.neemann.digital.hdl.hgs", "Value", "public static Object xor(Object a, Object b) throws HGSEvalException" ], [ "and", "de.neemann.digital.hdl.hgs", "Value", "public static Object and(Object a, Object b) throws HGSEvalException" ], [ "not", "de.neemann.digital.hdl.hgs", "Value", "public static Object not(Object value) throws HGSEvalException" ], [ "neg", "de.neemann.digital.hdl.hgs", "Value", "public static Object neg(Object value) throws HGSEvalException" ], [ "less", "de.neemann.digital.hdl.hgs", "Value", "public static boolean less(Object a, Object b) throws HGSEvalException" ], [ "lessEqual", "de.neemann.digital.hdl.hgs", "Value", "public static boolean lessEqual(Object a, Object b) throws HGSEvalException" ], [ "trimRight", "de.neemann.digital.hdl.hgs", "Value", "public static String trimRight(String str)" ], [ "trimLeft", "de.neemann.digital.hdl.hgs", "Value", "public static String trimLeft(String str)" ], [ "getType", "de.neemann.digital.hdl.vhdl2", "VHDLCreator", "public static String getType(int bits)" ], [ "value", "de.neemann.digital.hdl.vhdl2", "VHDLCreator", "public static String value(ExprConstant con)" ], [ "value", "de.neemann.digital.hdl.vhdl2", "VHDLCreator", "public static String value(long val, int bits)" ], [ "isTemplate", "de.neemann.digital.hdl.vhdl2.entities", "VHDLTemplate", "public static boolean isTemplate(ElementTypeDescription etd)" ], [ "neededFileName", "de.neemann.digital.hdl.vhdl2.entities", "VHDLTemplate", "public static String neededFileName(String elementName)" ], [ "zero", "de.neemann.digital.hdl.vhdl2.entities", "VHDLTemplateFunctions", "public static String zero(long bits)" ], [ "value", "de.neemann.digital.hdl.vhdl2.entities", "VHDLTemplateFunctions", "public static String value(long val, long bits)" ], [ "genericType", "de.neemann.digital.hdl.vhdl2.entities", "VHDLTemplateFunctions", "public static String genericType(long n)" ], [ "type", "de.neemann.digital.hdl.vhdl2.entities", "VHDLTemplateFunctions", "public static String type(long n)" ], [ "isVar", "de.neemann.digital.hdl.model2.expression", "Expression", "static boolean isVar(Expression expr, HDLNet net)" ], [ "isConstant", "de.neemann.digital.hdl.model2.expression", "ExprConstant", "public static ExprConstant isConstant(HDLNode node)" ], [ "getHighZ", "de.neemann.digital.data", "Value", "public static Value getHighZ()" ], [ "calcBackOffset", "de.neemann.digital.builder.circuit", "FragmentExpression", "static int calcBackOffset(int size, int i)" ], [ "isXNor", "de.neemann.digital.builder.circuit", "CircuitBuilder", "static boolean isXNor(long[] data)" ], [ "isXor", "de.neemann.digital.builder.circuit", "CircuitBuilder", "static boolean isXor(long[] data)" ], [ "getLibPath", "de.neemann.digital.draw.library", "ElementLibrary", "public static File getLibPath()" ], [ "createCustomDescription", "de.neemann.digital.draw.library", "ElementLibrary", "public static ElementTypeDescriptionCustom createCustomDescription(File file, Circuit circuit, ElementLibrary library) throws PinException" ], [ "createDeclarationDefault", "de.neemann.digital.draw.library", "ElementTypeDescriptionCustom", "public static String createDeclarationDefault(Circuit circuit) throws NodeException" ], [ "getInstance", "de.neemann.digital.draw.library", "NumStringComparator", "public static NumStringComparator getInstance()" ], [ "compareStr", "de.neemann.digital.draw.library", "NumStringComparator", "public static int compareStr(String a, String b)" ], [ "createPins", "de.neemann.digital.draw.shapes", "GenericShape", "public static Pins createPins(PinDescriptions inputs, PinDescriptions outputs, boolean invert, InverterConfig ic, boolean wideShape)" ], [ "readStyle", "de.neemann.digital.draw.shapes.custom.svg", "Context", "static Context readStyle(Context context, String style) throws SvgException" ], [ "getOutSize", "de.neemann.digital.draw.shapes", "OutputShape", "public static int getOutSize(boolean small)" ], [ "getOutStyle", "de.neemann.digital.draw.shapes", "OutputShape", "public static Style getOutStyle(boolean small)" ], [ "getOutRad", "de.neemann.digital.draw.shapes", "OutputShape", "public static Vector getOutRad(boolean small)" ], [ "createTransform", "de.neemann.digital.draw.shapes", "SevenShape", "static Transform createTransform(int size)" ], [ "getxStream", "de.neemann.digital.draw.elements", "Circuit", "public static XStream getxStream()" ], [ "loadCircuit", "de.neemann.digital.draw.elements", "Circuit", "public static Circuit loadCircuit(File filename, ShapeFactory shapeFactory) throws IOException" ], [ "loadCircuit", "de.neemann.digital.draw.elements", "Circuit", "public static Circuit loadCircuit(InputStream in, ShapeFactory shapeFactory) throws IOException" ], [ "fixGenerics", "de.neemann.digital.draw.model", "ModelCreator", "public static Circuit fixGenerics(Circuit circuit, LibraryInterface library) throws NodeException, ElementNotFoundException" ], [ "createFromPath", "de.neemann.digital.draw.graphics", "Polygon", "public static Polygon createFromPath(String path)" ], [ "vec", "de.neemann.digital.draw.graphics", "Vector", "public static Vector vec(int x, int y)" ], [ "min", "de.neemann.digital.draw.graphics", "Vector", "public static Vector min(VectorInterface... p)" ], [ "max", "de.neemann.digital.draw.graphics", "Vector", "public static Vector max(VectorInterface... p)" ], [ "width", "de.neemann.digital.draw.graphics", "Vector", "public static Vector width(VectorInterface... p)" ], [ "add", "de.neemann.digital.draw.graphics", "Vector", "public static List<Vector> add(List<Vector> vectors, Vector offs)" ], [ "getInstance", "de.neemann.digital.draw.graphics", "SVGSettings", "public static SVGSettings getInstance()" ], [ "createKeyList", "de.neemann.digital.draw.graphics", "SVGSettings", "public static List<Key> createKeyList()" ], [ "mul", "de.neemann.digital.draw.graphics", "Transform", "static Transform mul(Transform t1, Transform t2)" ], [ "rotate", "de.neemann.digital.draw.graphics", "TransformMatrix", "public static TransformMatrix rotate(double w)" ], [ "scale", "de.neemann.digital.draw.graphics", "TransformMatrix", "public static TransformMatrix scale(float sx, float sy)" ], [ "getTextWidth", "de.neemann.digital.draw.graphics", "GraphicMinMax", "public static int getTextWidth(String text, Style style)" ], [ "getSelected", "de.neemann.digital.draw.graphics", "ColorScheme", "public static ColorScheme getSelected()" ], [ "getWireStyle", "de.neemann.digital.draw.graphics", "Style", "public static Style getWireStyle(Value value)" ], [ "format", "de.neemann.digital.draw.graphics.text.formatter", "PlainTextFormatter", "public static String format(Text text)" ], [ "format", "de.neemann.digital.draw.graphics.text.formatter", "PlainTextFormatter", "public static String format(Text text, FormatToExpression format)" ], [ "format", "de.neemann.digital.draw.graphics.text.formatter", "SVGFormatter", "public static String format(Text text)" ], [ "createFragment", "de.neemann.digital.draw.graphics.text.formatter", "GraphicsFormatter", "public static Fragment createFragment(Graphics2D gr, String text)" ], [ "createFragment", "de.neemann.digital.draw.graphics.text.formatter", "GraphicsFormatter", "public static Fragment createFragment(Graphics2D gr, Expression expression) throws FormatterException" ], [ "createFragment", "de.neemann.digital.draw.graphics.text.formatter", "GraphicsFormatter", "public static Fragment createFragment(FontSizer sizer, Font font, String text)" ], [ "format", "de.neemann.digital.draw.graphics.text.formatter", "LaTeXFormatter", "public static String format(Expression exp)" ], [ "format", "de.neemann.digital.draw.graphics.text.formatter", "LaTeXFormatter", "public static String format(Text text)" ], [ "math", "de.neemann.digital.draw.graphics.text.text", "Decorate", "public static Text math(Text t)" ], [ "escapeXML", "de.neemann.digital.draw.graphics", "GraphicSVG", "public static String escapeXML(String text)" ], [ "getMirrorYOrientation", "de.neemann.digital.draw.graphics", "GraphicSwing", "static int getMirrorYOrientation(Orientation orientation, VectorInterface p1, VectorInterface p2, VectorInterface p3)" ], [ "load", "de.neemann.digital.toolchain", "Configuration", "public static Configuration load(File file) throws IOException" ], [ "load", "de.neemann.digital.toolchain", "Configuration", "public static Configuration load(InputStream in) throws IOException" ] ],
  "tokensProjectClassesNonPrivateStaticAttributes" : [ [ "UNKNOWN", "de.neemann.gui", "InfoDialog", "public static final String UNKNOWN = \"unknown\";" ], [ "DESCRIPTION", "de.neemann.digital.core.pld", "PullDown", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"PullDown\", PullDown.class).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS);" ], [ "DESCRIPTION", "de.neemann.digital.core.pld", "Diode", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Diode.class).addAttribute(Keys.ROTATE).addAttribute(Keys.BLOWN);" ], [ "DESCRIPTION", "de.neemann.digital.core.pld", "DiodeBackward", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(DiodeBackward.class, input(\"in\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BLOWN);" ], [ "DESCRIPTION", "de.neemann.digital.core.pld", "PullUp", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"PullUp\", PullUp.class).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS);" ], [ "DESCRIPTION", "de.neemann.digital.core.pld", "DiodeForward", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(DiodeForward.class, input(\"in\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BLOWN);" ], [ "DESCRIPTION", "de.neemann.digital.core.memory", "RAMSinglePort", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(RAMSinglePort.class, input(\"A\"), input(\"str\"), input(\"C\").setClock(), input(\"ld\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.ADDR_BITS).addAttribute(Keys.INT_FORMAT).addAttribute(Keys.IS_PROGRAM_MEMORY).addAttribute(Keys.LABEL);" ], [ "DESCRIPTION", "de.neemann.digital.core.memory", "ROMDualPort", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(ROMDualPort.class, input(\"A1\"), input(\"s1\"), input(\"A2\"), input(\"s2\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.ADDR_BITS).addAttribute(Keys.LABEL).addAttribute(Keys.DATA).addAttribute(Keys.INT_FORMAT).addAttribute(Keys.IS_PROGRAM_MEMORY).addAttribute(Keys.AUTO_RELOAD_ROM).addAttribute(Keys.LAST_DATA_FILE).addAttribute(Keys.BIG_ENDIAN);" ], [ "DESCRIPTION", "de.neemann.digital.core.memory", "RAMDualAccess", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(RAMDualAccess.class, input(\"str\"), input(\"C\").setClock(), input(\"ld\"), input(\"1A\"), input(\"1Din\"), input(\"2A\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.ADDR_BITS).addAttribute(Keys.IS_PROGRAM_MEMORY).addAttribute(Keys.LABEL).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.memory", "CounterPreset", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(CounterPreset.class, input(\"en\"), input(\"C\").setClock(), input(\"dir\"), input(\"in\"), input(\"ld\"), input(\"clr\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.MAX_VALUE).addAttribute(Keys.INVERTER_CONFIG).addAttribute(Keys.LABEL).addAttribute(Keys.VALUE_IS_PROBE).addAttribute(Keys.IS_PROGRAM_COUNTER).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.memory", "RAMDualPort", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(RAMDualPort.class, input(\"A\"), input(\"Din\"), input(\"str\"), input(\"C\").setClock(), input(\"ld\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.ADDR_BITS).addAttribute(Keys.INT_FORMAT).addAttribute(Keys.IS_PROGRAM_MEMORY).addAttribute(Keys.LABEL).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.memory", "Register", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Register.class, input(\"D\"), input(\"C\").setClock(), input(\"en\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).addAttribute(Keys.INVERTER_CONFIG).addAttribute(Keys.IS_PROGRAM_COUNTER).addAttribute(Keys.VALUE_IS_PROBE).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.memory", "LookUpTable", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(LookUpTable.class) {\n\n    @Override\n    public PinDescriptions getInputDescription(ElementAttributes elementAttributes) {\n        int size = elementAttributes.get(Keys.INPUT_COUNT);\n        PinDescription[] names = new PinDescription[size];\n        for (int i = 0; i < size; i++) names[i] = input(Integer.toString(i), Lang.get(\"elem_LookUpTable_pin_in\", i));\n        return new PinDescriptions(names);\n    }\n}.addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.LUT_INPUT_COUNT).addAttribute(Keys.LABEL).addAttribute(Keys.DATA).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.memory", "BlockRAMDualPort", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(BlockRAMDualPort.class, input(\"A\"), input(\"Din\"), input(\"str\"), input(\"C\").setClock()).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.ADDR_BITS).addAttribute(Keys.IS_PROGRAM_MEMORY).addAttribute(Keys.LABEL).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.memory", "Counter", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Counter.class, input(\"en\"), input(\"C\").setClock(), input(\"clr\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.INVERTER_CONFIG).addAttribute(Keys.LABEL).addAttribute(Keys.VALUE_IS_PROBE).addAttribute(Keys.IS_PROGRAM_COUNTER).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.memory", "EEPROM", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(EEPROM.class, input(\"A\"), input(\"CS\"), input(\"WE\").setClock(), input(\"OE\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.ADDR_BITS).addAttribute(Keys.LABEL).addAttribute(Keys.INT_FORMAT).addAttribute(Keys.IS_PROGRAM_MEMORY).addAttribute(Keys.INVERTER_CONFIG).addAttribute(Keys.DATA);" ], [ "DESCRIPTION", "de.neemann.digital.core.memory", "RAMAsync", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(RAMAsync.class, input(\"A\"), input(\"D\"), input(\"we\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.ADDR_BITS).addAttribute(Keys.IS_PROGRAM_MEMORY).addAttribute(Keys.INVERTER_CONFIG).addAttribute(Keys.LABEL).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.memory", "ROM", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(ROM.class, input(\"A\"), input(\"sel\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.ADDR_BITS).addAttribute(Keys.LABEL).addAttribute(Keys.DATA).addAttribute(Keys.INT_FORMAT).addAttribute(Keys.IS_PROGRAM_MEMORY).addAttribute(Keys.AUTO_RELOAD_ROM).addAttribute(Keys.LAST_DATA_FILE).addAttribute(Keys.BIG_ENDIAN).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.memory", "EEPROMDualPort", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(EEPROMDualPort.class, input(\"A\"), input(\"Din\"), input(\"str\"), input(\"C\").setClock(), input(\"ld\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.ADDR_BITS).addAttribute(Keys.INT_FORMAT).addAttribute(Keys.IS_PROGRAM_MEMORY).addAttribute(Keys.LABEL).addAttribute(Keys.DATA);" ], [ "DESCRIPTION", "de.neemann.digital.core.memory", "RAMSinglePortSel", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(RAMSinglePortSel.class, input(\"A\"), input(\"CS\"), input(\"WE\"), input(\"OE\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.ADDR_BITS).addAttribute(Keys.LABEL).addAttribute(Keys.IS_PROGRAM_MEMORY).addAttribute(Keys.INVERTER_CONFIG);" ], [ "DESCRIPTION", "de.neemann.digital.core.memory", "RegisterFile", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(RegisterFile.class, input(\"Din\"), input(\"we\"), input(\"Rw\"), input(\"C\").setClock(), input(\"Ra\"), input(\"Rb\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.ADDR_BITS).addAttribute(Keys.LABEL).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.io", "MIDI", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(MIDI.class) {\n\n    public PinDescriptions getInputDescription(ElementAttributes elementAttributes) throws NodeException {\n        if (elementAttributes.get(Keys.MIDI_PROG_CHANGE))\n            return new PinDescriptions(input(\"N\"), input(\"V\"), input(\"OnOff\"), input(\"PC\"), input(\"en\"), input(\"C\").setClock()).setLangKey(getPinLangKey());\n        else\n            return new PinDescriptions(input(\"N\"), input(\"V\"), input(\"OnOff\"), input(\"en\"), input(\"C\").setClock()).setLangKey(getPinLangKey());\n    }\n}.addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.MIDI_CHANNEL).addAttribute(Keys.MIDI_INSTRUMENT).addAttribute(Keys.MIDI_PROG_CHANGE);" ], [ "DESCRIPTION", "de.neemann.digital.core.io", "RGBLED", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(RGBLED.class, input(\"R\"), input(\"G\"), input(\"B\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).addAttribute(Keys.LED_SIZE);" ], [ "DESCRIPTION", "de.neemann.digital.core.io", "Out", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"Out\", attributes -> new Out(attributes).enforceName(), input(\"in\")) {\n\n    @Override\n    public String getDescription(ElementAttributes elementAttributes) {\n        String d = Lang.evalMultilingualContent(elementAttributes.get(Keys.DESCRIPTION));\n        if (d.length() > 0)\n            return d;\n        else\n            return super.getDescription(elementAttributes);\n    }\n}.addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).addAttribute(Keys.DESCRIPTION).addAttribute(Keys.INT_FORMAT).addAttribute(Keys.PINNUMBER).addAttribute(Keys.ADD_VALUE_TO_GRAPH).addAttribute(Keys.IN_OUT_SMALL).supportsHDL();" ], [ "LEDDESCRIPTION", "de.neemann.digital.core.io", "Out", "public static final ElementTypeDescription LEDDESCRIPTION = new ElementTypeDescription(\"LED\", Out.class, input(\"in\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.LED_SIZE).addAttribute(Keys.COLOR);" ], [ "POLARITYAWARELEDDESCRIPTION", "de.neemann.digital.core.io", "Out", "public static final ElementTypeDescription POLARITYAWARELEDDESCRIPTION = new ElementTypeDescription(\"PolarityAwareLED\", attributes -> new Out(1, 1), input(\"A\"), input(\"C\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.COLOR);" ], [ "SEVENDESCRIPTION", "de.neemann.digital.core.io", "Out", "public static final ElementTypeDescription SEVENDESCRIPTION = new SevenSegTypeDescription();" ], [ "SEVENHEXDESCRIPTION", "de.neemann.digital.core.io", "Out", "public static final ElementTypeDescription SEVENHEXDESCRIPTION = new ElementTypeDescription(\"Seven-Seg-Hex\", attributes -> new Out(4, 1), input(\"d\"), input(\"dp\")).addAttribute(Keys.COLOR).addAttribute(Keys.SEVEN_SEG_SIZE);" ], [ "SIXTEENDESCRIPTION", "de.neemann.digital.core.io", "Out", "public static final ElementTypeDescription SIXTEENDESCRIPTION = new ElementTypeDescription(\"SixteenSeg\", attributes -> new Out(16, 1), input(\"led\"), input(\"dp\")).addAttribute(Keys.COLOR).addAttribute(Keys.SEVEN_SEG_SIZE);" ], [ "DESCRIPTION", "de.neemann.digital.core.io", "RotEncoder", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(RotEncoder.class).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL);" ], [ "DESCRIPTION", "de.neemann.digital.core.io", "PinControl", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(PinControl.class, input(\"wr\"), input(\"oe\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.MIRROR).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.io", "DipSwitch", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(DipSwitch.class) {\n\n    @Override\n    public String getDescription(ElementAttributes elementAttributes) {\n        String d = Lang.evalMultilingualContent(elementAttributes.get(Keys.DESCRIPTION));\n        if (d.length() > 0)\n            return d;\n        else\n            return super.getDescription(elementAttributes);\n    }\n}.addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.DIP_DEFAULT).addAttribute(Keys.DESCRIPTION);" ], [ "DESCRIPTION", "de.neemann.digital.core.io", "LightBulb", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(LightBulb.class, input(\"A\"), input(\"B\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.COLOR);" ], [ "DESCRIPTION", "de.neemann.digital.core.io", "Probe", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"Probe\", Probe.class, input(\"in\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.INT_FORMAT).addAttribute(Keys.PROBE_MODE).addAttribute(Keys.ADD_VALUE_TO_GRAPH);" ], [ "DESCRIPTION", "de.neemann.digital.core.io", "Button", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Button.class).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.ACTIVE_LOW).addAttribute(Keys.MAP_TO_KEY).addAttribute(Keys.ADD_VALUE_TO_GRAPH);" ], [ "DESCRIPTION", "de.neemann.digital.core.io", "ButtonLED", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(ButtonLED.class, input(\"in\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.ACTIVE_LOW).addAttribute(Keys.MAP_TO_KEY).addAttribute(Keys.COLOR);" ], [ "DESCRIPTION", "de.neemann.digital.core.io", "In", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(In.class) {\n\n    @Override\n    public String getDescription(ElementAttributes elementAttributes) {\n        String d = Lang.evalMultilingualContent(elementAttributes.get(Keys.DESCRIPTION));\n        if (d.length() > 0)\n            return d;\n        else\n            return super.getDescription(elementAttributes);\n    }\n}.addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).addAttribute(Keys.INPUT_DEFAULT).addAttribute(Keys.IS_HIGH_Z).addAttribute(Keys.AVOID_ACTIVE_LOW).addAttribute(Keys.DESCRIPTION).addAttribute(Keys.INT_FORMAT).addAttribute(Keys.PINNUMBER).addAttribute(Keys.ADD_VALUE_TO_GRAPH).addAttribute(Keys.IN_OUT_SMALL).supportsHDL();" ], [ "STEPS", "de.neemann.digital.core.io", "StepperMotorUnipolar", "public static final int STEPS = 72;" ], [ "DESCRIPTION", "de.neemann.digital.core.io", "StepperMotorUnipolar", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(StepperMotorUnipolar.class, input(\"P0\"), input(\"P1\"), input(\"P2\"), input(\"P3\"), input(\"com\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.INVERT_OUTPUT);" ], [ "DESCRIPTION", "de.neemann.digital.core.io", "NotConnected", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(NotConnected.class).addAttribute(Keys.BITS);" ], [ "DESCRIPTION", "de.neemann.digital.core.io", "StepperMotorBipolar", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(StepperMotorBipolar.class, input(\"A+\"), input(\"A-\"), input(\"B+\"), input(\"B-\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.INVERT_OUTPUT);" ], [ "DESCRIPTION", "de.neemann.digital.core.io", "Const", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Const.class).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.VALUE).addAttribute(Keys.INT_FORMAT).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.io", "PowerSupply", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(PowerSupply.class, input(\"VDD\"), input(\"GND\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL);" ], [ "DESCRIPTION", "de.neemann.digital.core.io", "Ground", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Ground.class).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.io", "VDD", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(VDD.class).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).supportsHDL();" ], [ "INSTANCE", "de.neemann.digital.core.io.telnet", "ServerHolder", "public static final ServerHolder INSTANCE = new ServerHolder();" ], [ "DESCRIPTION", "de.neemann.digital.core.io.telnet", "Telnet", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Telnet.class, input(\"in\"), input(\"C\").setClock(), input(\"wr\"), input(\"rd\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.TELNET_ESCAPE).addAttribute(Keys.PORT);" ], [ "BITS", "de.neemann.digital.core.element", "Keys", "public static final Key.KeyBits BITS = new Key.KeyBits(\"Bits\", 1);" ], [ "INPUT_BITS", "de.neemann.digital.core.element", "Keys", "public static final Key.KeyBits INPUT_BITS = new Key.KeyBits(\"inputBits\", 8);" ], [ "OUTPUT_BITS", "de.neemann.digital.core.element", "Keys", "public static final Key.KeyBits OUTPUT_BITS = new Key.KeyBits(\"outputBits\", 16);" ], [ "INPUT_COUNT", "de.neemann.digital.core.element", "Keys", "public static final Key.KeyInteger INPUT_COUNT = new Key.KeyInteger(\"Inputs\", 2).setComboBoxValues(2, 3, 4, 5).setMin(2);" ], [ "LUT_INPUT_COUNT", "de.neemann.digital.core.element", "Keys", "public static final Key.KeyInteger LUT_INPUT_COUNT = new Key.KeyInteger(\"Inputs\", 2).setComboBoxValues(2, 3, 4, 5, 6).setMax(20).setMin(2);" ], [ "MAX_VALUE", "de.neemann.digital.core.element", "Keys", "public static final Key.KeyInteger MAX_VALUE = new Key.KeyInteger(\"maxValue\", 0).setMin(0);" ], [ "DELAY_TIME", "de.neemann.digital.core.element", "Keys", "public static final Key.KeyInteger DELAY_TIME = new Key.KeyInteger(\"delayTime\", 1).setComboBoxValues(1, 2, 3, 4, 5).setMin(1).setMax(20);" ], [ "MONOFLOP_DELAY", "de.neemann.digital.core.element", "Keys", "public static final Key.KeyInteger MONOFLOP_DELAY = new Key.KeyInteger(\"timerDelay\", 1).setMin(1);" ], [ "LABEL", "de.neemann.digital.core.element", "Keys", "public static final Key<String> LABEL = new Key<>(\"Label\", \"\");" ], [ "FONT_SIZE", "de.neemann.digital.core.element", "Keys", "public static final Key<Integer> FONT_SIZE = new Key.KeyInteger(\"textFontSize\", Style.NORMAL.getFontSize()).setComboBoxValues(14, 17, 20, 24, 36, 48, 60).setMin(10).setMax(70);" ], [ "TEXT_ORIENTATION", "de.neemann.digital.core.element", "Keys", "public static final Key<Orientation> TEXT_ORIENTATION = new Key.KeyEnum<>(\"textOrientation\", Orientation.LEFTTOP, Orientation.values()).setSecondary();" ], [ "LED_SIZE", "de.neemann.digital.core.element", "Keys", "public static final Key<Integer> LED_SIZE = new Key.KeyInteger(\"Size\", 1).setComboBoxValues(0, 1, 2, 3, 4, 5).setMin(0).allowGroupEdit().setSecondary();" ], [ "SEVEN_SEG_SIZE", "de.neemann.digital.core.element", "Keys", "public static final Key<Integer> SEVEN_SEG_SIZE = new Key.KeyInteger(\"segSize\", 2).setComboBoxValues(0, 1, 2, 3, 4, 5).setMin(0).allowGroupEdit().useTranslationOf(LED_SIZE);" ], [ "VALUE", "de.neemann.digital.core.element", "Keys", "public static final Key<Long> VALUE = new Key<>(\"Value\", 1L).setAdaptiveIntFormat().allowGroupEdit();" ], [ "DEFAULT", "de.neemann.digital.core.element", "Keys", "public static final Key<Long> DEFAULT = new Key<>(\"Default\", 0L).allowGroupEdit().setSecondary();" ], [ "INPUT_DEFAULT", "de.neemann.digital.core.element", "Keys", "public static final Key<InValue> INPUT_DEFAULT = new Key<>(\"InDefault\", new InValue(0)).setAdaptiveIntFormat().allowGroupEdit().setSecondary();" ], [ "DIP_DEFAULT", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> DIP_DEFAULT = new Key<>(\"dipDefault\", false).allowGroupEdit().setSecondary();" ], [ "COLOR", "de.neemann.digital.core.element", "Keys", "public static final Key<java.awt.Color> COLOR = new Key<>(\"Color\", java.awt.Color.RED).allowGroupEdit();" ], [ "INPUT_SPLIT", "de.neemann.digital.core.element", "Keys", "public static final Key<String> INPUT_SPLIT = new Key<>(\"Input Splitting\", \"4,4\");" ], [ "OUTPUT_SPLIT", "de.neemann.digital.core.element", "Keys", "public static final Key<String> OUTPUT_SPLIT = new Key<>(\"Output Splitting\", \"8\");" ], [ "SPLITTER_SPREADING", "de.neemann.digital.core.element", "Keys", "public static final Key<Integer> SPLITTER_SPREADING = new Key.KeyInteger(\"splitterSpreading\", 1).setComboBoxValues(1, 2, 3, 4).setMin(1).setMax(20).setSecondary();" ], [ "IN_OUT_SMALL", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> IN_OUT_SMALL = new Key<>(\"small\", false).allowGroupEdit().setSecondary();" ], [ "RUN_AT_REAL_TIME", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> RUN_AT_REAL_TIME = new Key<>(\"runRealTime\", false);" ], [ "INVERT_OUTPUT", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> INVERT_OUTPUT = new Key<>(\"invertOutput\", true);" ], [ "FREQUENCY", "de.neemann.digital.core.element", "Keys", "public static final Key<Integer> FREQUENCY = new Key.KeyInteger(\"Frequency\", 1).setComboBoxValues(1, 2, 5, 10, 20, 50, 100, 200, 500, 5000, 50000, Integer.MAX_VALUE).setMin(1).setDependsOn(RUN_AT_REAL_TIME);" ], [ "SELECTOR_BITS", "de.neemann.digital.core.element", "Keys", "public static final Key<Integer> SELECTOR_BITS = new Key.KeyBits(\"Selector Bits\", 1).setMax(8);" ], [ "ADDR_BITS", "de.neemann.digital.core.element", "Keys", "public static final Key<Integer> ADDR_BITS = // needs to have the same default value as INPUT_COUNT!!!  see de.neemann.digital.gui.components.EditorFactory#DataFieldEditor\nnew Key.KeyBits(\"AddrBits\", 2).setMax(24);" ], [ "BLOWN", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> BLOWN = new Key<>(\"Blown\", false).allowGroupEdit();" ], [ "CLOSED", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> CLOSED = new Key<>(\"Closed\", false).allowGroupEdit();" ], [ "SIGNED", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> SIGNED = new Key<>(\"Signed\", false).allowGroupEdit();" ], [ "REMAINDER_POSITIVE", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> REMAINDER_POSITIVE = new Key<>(\"remainderPositive\", true).setDependsOn(SIGNED);" ], [ "DATA", "de.neemann.digital.core.element", "Keys", "public static final Key<DataField> DATA = new Key<>(\"Data\", DataField::new);" ], [ "FLIP_SEL_POSITON", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> FLIP_SEL_POSITON = new Key<>(\"flipSelPos\", false).allowGroupEdit();" ], [ "ROTATE", "de.neemann.digital.core.element", "Keys", "public static final Key<Rotation> ROTATE = new Key<>(\"rotation\", new Rotation(0)).allowGroupEdit().setSecondary();" ], [ "WIDTH", "de.neemann.digital.core.element", "Keys", "public static final Key.KeyInteger WIDTH = new Key.KeyInteger(\"Width\", 3).setMin(2);" ], [ "SHAPE_TYPE", "de.neemann.digital.core.element", "Keys", "public static final Key<CustomCircuitShapeType> SHAPE_TYPE = new Key.KeyEnum<>(\"shapeType\", CustomCircuitShapeType.DEFAULT, CustomCircuitShapeType.values()).setSecondary();" ], [ "LAYOUT_SHAPE_DELTA", "de.neemann.digital.core.element", "Keys", "public static final Key.KeyInteger LAYOUT_SHAPE_DELTA = new Key.KeyInteger(\"layoutShapeDelta\", 0).setMin(0);" ], [ "HEIGHT", "de.neemann.digital.core.element", "Keys", "public static final Key<Integer> HEIGHT = new Key.KeyInteger(\"Height\", 3).setMin(2).setSecondary().setDependsOn(SHAPE_TYPE, cst -> cst.equals(CustomCircuitShapeType.LAYOUT));" ], [ "TERM_WIDTH", "de.neemann.digital.core.element", "Keys", "public static final Key.KeyInteger TERM_WIDTH = new Key.KeyInteger(\"termWidth\", 50).setMin(10);" ], [ "TERM_HEIGHT", "de.neemann.digital.core.element", "Keys", "public static final Key.KeyInteger TERM_HEIGHT = new Key.KeyInteger(\"termHeight\", 25).setMin(5);" ], [ "CYCLES", "de.neemann.digital.core.element", "Keys", "public static final Key.KeyInteger CYCLES = new Key.KeyInteger(\"Cycles\", 100000).setComboBoxValues(1000, 10000, 100000, 1000000);" ], [ "ENABLED", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> ENABLED = new Key<>(\"enabled\", true).allowGroupEdit();" ], [ "VALUE_IS_PROBE", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> VALUE_IS_PROBE = new Key<>(\"valueIsProbe\", false).allowGroupEdit().setSecondary();" ], [ "IS_PROGRAM_MEMORY", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> IS_PROGRAM_MEMORY = new Key<>(\"isProgramMemory\", false).setSecondary();" ], [ "IS_PROGRAM_COUNTER", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> IS_PROGRAM_COUNTER = new Key<>(\"isProgramCounter\", false).setSecondary();" ], [ "AUTO_RELOAD_ROM", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> AUTO_RELOAD_ROM = new Key<>(\"autoReload\", false).setSecondary();" ], [ "LAST_DATA_FILE", "de.neemann.digital.core.element", "Keys", "public static final Key<File> LAST_DATA_FILE = new Key.KeyFile(\"lastDataFile\", new File(\"\")).setDependsOn(AUTO_RELOAD_ROM).setSecondary();" ], [ "SHOW_DATA_TABLE", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> SHOW_DATA_TABLE = new Key<>(\"showDataTable\", false).setSecondary();" ], [ "SHOW_DATA_GRAPH", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> SHOW_DATA_GRAPH = new Key<>(\"showDataGraph\", false).setSecondary();" ], [ "SHOW_DATA_GRAPH_MICRO", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> SHOW_DATA_GRAPH_MICRO = new Key<>(\"showDataGraphMicro\", false).setSecondary();" ], [ "ADD_VALUE_TO_GRAPH", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> ADD_VALUE_TO_GRAPH = new Key<>(\"addValueToGraph\", true).allowGroupEdit().setSecondary();" ], [ "MICRO_STEP", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> MICRO_STEP = new Key<>(\"microStep\", false);" ], [ "MAX_STEP_COUNT", "de.neemann.digital.core.element", "Keys", "public static final Key.KeyInteger MAX_STEP_COUNT = new Key.KeyInteger(\"maxStepCount\", 25).setMin(5);" ], [ "SETTINGS_MAX_STEP_COUNT", "de.neemann.digital.core.element", "Keys", "public static final Key<Integer> SETTINGS_MAX_STEP_COUNT = new Key.KeyInteger(\"settingsMaxStepCount\", 1000).setComboBoxValues(500, 1000, 5000, 10000).setMin(500).setSecondary().useTranslationOf(MAX_STEP_COUNT);" ], [ "IS_HIGH_Z", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> IS_HIGH_Z = new Key<>(\"isHighZ\", false).allowGroupEdit().setSecondary();" ], [ "AVOID_ACTIVE_LOW", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> AVOID_ACTIVE_LOW = new Key<>(\"avoidActiveLow\", false).setDependsOn(IS_HIGH_Z).allowGroupEdit().setSecondary();" ], [ "DESCRIPTION", "de.neemann.digital.core.element", "Keys", "public static final Key.LongString DESCRIPTION = new Key.LongString(\"Description\");" ], [ "NETNAME", "de.neemann.digital.core.element", "Keys", "public static final Key<String> NETNAME = new Key<>(\"NetName\", \"\");" ], [ "SETTINGS_IEEE_SHAPES", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> SETTINGS_IEEE_SHAPES = new Key<>(\"IEEEShapes\", !Locale.getDefault().getLanguage().equals(Locale.GERMAN.getLanguage())).setRequiresRestart();" ], [ "SETTINGS_LANGUAGE", "de.neemann.digital.core.element", "Keys", "public static final Key<Language> SETTINGS_LANGUAGE = new Key<>(\"Language\", new Language()).setRequiresRestart();" ], [ "SETTINGS_DEFAULT_TREESELECT", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> SETTINGS_DEFAULT_TREESELECT = new Key<>(\"defTreeSelect\", false);" ], [ "SETTINGS_EXPRESSION_FORMAT", "de.neemann.digital.core.element", "Keys", "public static final Key.KeyEnum<FormatToExpression> SETTINGS_EXPRESSION_FORMAT = new Key.KeyEnum<>(\"ExpressionFormat\", FormatToExpression.UNICODE, FormatToExpression.values(), true);" ], [ "SETTINGS_GRID", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> SETTINGS_GRID = new Key<>(\"grid\", true).setRequiresRepaint();" ], [ "SETTINGS_SHOW_WIRE_BITS", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> SETTINGS_SHOW_WIRE_BITS = new Key<>(\"showWireBits\", false);" ], [ "SETTINGS_MAC_MOUSE", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> SETTINGS_MAC_MOUSE = new Key<>(\"macMouse\", false).setRequiresRestart().setSecondary();" ], [ "SETTINGS_SHOW_TUNNEL_RENAME_DIALOG", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> SETTINGS_SHOW_TUNNEL_RENAME_DIALOG = new Key<>(\"tunnelRenameDialog\", true);" ], [ "SETTINGS_RENAME_LABELS", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> SETTINGS_RENAME_LABELS = new Key<>(\"renameLabels\", true);" ], [ "SETTINGS_OPEN_REMOTE_PORT", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> SETTINGS_OPEN_REMOTE_PORT = new Key<>(\"openRemotePort\", false).setSecondary().setRequiresRestart();" ], [ "SETTINGS_REMOTE_PORT", "de.neemann.digital.core.element", "Keys", "public static final Key<Integer> SETTINGS_REMOTE_PORT = new Key.KeyInteger(\"remotePort\", 41114).setMin(0).setMax(0xffff).setComboBoxValues(41114).setSecondary().setRequiresRestart().setDependsOn(SETTINGS_OPEN_REMOTE_PORT);" ], [ "OSCILLATION_DETECTION_COUNTER", "de.neemann.digital.core.element", "Keys", "public static final Key<Integer> OSCILLATION_DETECTION_COUNTER = new Key.KeyInteger(\"oscillationDetectionCounter\", 1000).setComboBoxValues(1000, 5000, 10000).setMin(1000).setMax(100000);" ], [ "INT_FORMAT", "de.neemann.digital.core.element", "Keys", "public static final Key<IntFormat> INT_FORMAT = new Key.KeyEnum<>(\"intFormat\", IntFormat.def, IntFormat.values()).setSecondary();" ], [ "PROBE_MODE", "de.neemann.digital.core.element", "Keys", "public static final Key<ProbeMode> PROBE_MODE = new Key.KeyEnum<>(\"probeMode\", ProbeMode.VALUE, ProbeMode.values());" ], [ "FIXED_POINT", "de.neemann.digital.core.element", "Keys", "public static final Key<Integer> FIXED_POINT = new Key.KeyInteger(\"fixedPoint\", 4).setMin(1).setMax(64).setDependsOn(INT_FORMAT, intFormat -> intFormat.equals(IntFormat.fixed) || intFormat.equals(IntFormat.fixedSigned)).allowGroupEdit().setSecondary();" ], [ "GRAPHIC_WIDTH", "de.neemann.digital.core.element", "Keys", "public static final Key.KeyInteger GRAPHIC_WIDTH = new Key.KeyInteger(\"graphicWidth\", 160).setMin(4);" ], [ "GRAPHIC_HEIGHT", "de.neemann.digital.core.element", "Keys", "public static final Key.KeyInteger GRAPHIC_HEIGHT = new Key.KeyInteger(\"graphicHeight\", 100).setMin(4);" ], [ "RELAY_NORMALLY_CLOSED", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> RELAY_NORMALLY_CLOSED = new Key<>(\"relayNormallyClosed\", false).allowGroupEdit();" ], [ "POLES", "de.neemann.digital.core.element", "Keys", "public static final Key<Integer> POLES = new Key.KeyInteger(\"poles\", 1).setComboBoxValues(1, 2, 3, 4).setMin(1).allowGroupEdit();" ], [ "BARREL_SHIFTER_MODE", "de.neemann.digital.core.element", "Keys", "public static final Key<BarrelShifterMode> BARREL_SHIFTER_MODE = new Key.KeyEnum<>(\"barrelShifterMode\", BarrelShifterMode.logical, BarrelShifterMode.values());" ], [ "DIRECTION", "de.neemann.digital.core.element", "Keys", "public static final Key<LeftRightFormat> DIRECTION = new Key.KeyEnum<>(\"direction\", LeftRightFormat.left, LeftRightFormat.values());" ], [ "BARREL_SIGNED", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> BARREL_SIGNED = new Key<>(\"barrelSigned\", false);" ], [ "COMMON_CONNECTION", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> COMMON_CONNECTION = new Key<>(\"commonCathode\", false).allowGroupEdit();" ], [ "COMMON_CONNECTION_TYPE", "de.neemann.digital.core.element", "Keys", "public static final Key<CommonConnectionType> COMMON_CONNECTION_TYPE = new Key.KeyEnum<>(\"commonConnectionType\", CommonConnectionType.cathode, CommonConnectionType.values()).setDependsOn(COMMON_CONNECTION).allowGroupEdit();" ], [ "LED_PERSISTENCE", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> LED_PERSISTENCE = new Key<>(\"ledPersistence\", false).allowGroupEdit().setDependsOn(COMMON_CONNECTION);" ], [ "LED_PERSIST_TIME", "de.neemann.digital.core.element", "Keys", "public static final Key<Integer> LED_PERSIST_TIME = new Key.KeyInteger(\"persistTime\", 0).setMin(0).allowGroupEdit();" ], [ "SETTINGS_ATF1502_FITTER", "de.neemann.digital.core.element", "Keys", "public static final Key<File> SETTINGS_ATF1502_FITTER = new Key.KeyFile(\"atf1502Fitter\", new File(\"c:/Wincupl/WinCupl/Fitters\")).setDirectoryOnly(true).setSecondary();" ], [ "SETTINGS_ATMISP", "de.neemann.digital.core.element", "Keys", "public static final Key<File> SETTINGS_ATMISP = new Key.KeyFile(\"ATMISP\", getATMISPPath()).setSecondary();" ], [ "ROW_DATA_BITS", "de.neemann.digital.core.element", "Keys", "public static final Key.KeyBits ROW_DATA_BITS = new Key.KeyBits(\"rowDataBits\", 8);" ], [ "COL_ADDR_BITS", "de.neemann.digital.core.element", "Keys", "public static final Key.KeyBits COL_ADDR_BITS = new Key.KeyBits(\"colAddrBits\", 3);" ], [ "LOCKED_MODE", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> LOCKED_MODE = new Key<>(\"lockedMode\", false);" ], [ "PINNUMBER", "de.neemann.digital.core.element", "Keys", "public static final Key<String> PINNUMBER = new Key<>(\"pinNumber\", \"\").setSecondary();" ], [ "PINCOUNT", "de.neemann.digital.core.element", "Keys", "public static final Key<Integer> PINCOUNT = new Key.KeyInteger(\"pinCount\", 0).setMin(0).setSecondary().setDependsOn(SHAPE_TYPE, st -> st.equals(CustomCircuitShapeType.DIL));" ], [ "INVERTER_CONFIG", "de.neemann.digital.core.element", "Keys", "public static final Key<InverterConfig> INVERTER_CONFIG = new Key<>(\"inverterConfig\", new InverterConfig.Builder().build());" ], [ "BACKGROUND_COLOR", "de.neemann.digital.core.element", "Keys", "public static final Key<java.awt.Color> BACKGROUND_COLOR = new Key<>(\"backgroundColor\", new Color(255, 255, 180, 200));" ], [ "SETTINGS_FONT_SCALING", "de.neemann.digital.core.element", "Keys", "public static final Key<Integer> SETTINGS_FONT_SCALING = new Key.KeyInteger(\"fontSize\", Screen.getDefaultFontScaling()).setComboBoxValues(100, 120, 150, 180, 200, 250, 300).setMin(50).setMax(400).setRequiresRestart().setSecondary();" ], [ "SETTINGS_USE_EQUALS_KEY", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> SETTINGS_USE_EQUALS_KEY;" ], [ "WITH_ENABLE", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> WITH_ENABLE = new Key<>(\"withEnable\", true);" ], [ "FET_UNIDIRECTIONAL", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> FET_UNIDIRECTIONAL = new Key<>(\"unidirectional\", false);" ], [ "ACTIVE_LOW", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> ACTIVE_LOW = new Key<>(\"activeLow\", false).allowGroupEdit();" ], [ "MAP_TO_KEY", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> MAP_TO_KEY = new Key<>(\"mapToKey\", false).allowGroupEdit();" ], [ "SETTINGS_LIBRARY_PATH", "de.neemann.digital.core.element", "Keys", "public static final Key<File> SETTINGS_LIBRARY_PATH = new Key.KeyFile(\"libraryPath\", ElementLibrary.getLibPath()).setDirectoryOnly(true).setSecondary();" ], [ "SETTINGS_JAR_PATH", "de.neemann.digital.core.element", "Keys", "public static final Key<File> SETTINGS_JAR_PATH = new Key.KeyFile(\"jarPath\", new File(\"\")).setSecondary().setRequiresRestart();" ], [ "ROMMANAGER", "de.neemann.digital.core.element", "Keys", "public static final Key<ROMManagerFile> ROMMANAGER = new Key<>(\"romContent\", ROMManagerFile::new).setSecondary();" ], [ "APPLICATION_TYPE", "de.neemann.digital.core.element", "Keys", "public static final Key.KeyEnum<Application.Type> APPLICATION_TYPE = new Key.KeyEnum<>(\"applicationType\", Application.Type.Generic, Application.Type.values());" ], [ "EXTERNAL_INPUTS", "de.neemann.digital.core.element", "Keys", "public static final Key<String> EXTERNAL_INPUTS = new Key<>(\"externalInputs\", \"in\");" ], [ "EXTERNAL_OUTPUTS", "de.neemann.digital.core.element", "Keys", "public static final Key<String> EXTERNAL_OUTPUTS = new Key<>(\"externalOutputs\", \"out\");" ], [ "EXTERNAL_CODE", "de.neemann.digital.core.element", "Keys", "public static final Key.LongString EXTERNAL_CODE = new Key.LongString(\"Code\").setRows(30).setColumns(80).setLineNumbers(true);" ], [ "EXTERNAL_CODE_FILE", "de.neemann.digital.core.element", "Keys", "public static final Key.KeyFile EXTERNAL_CODE_FILE = new Key.KeyFile(\"CodeFile\", new File(\"\"));" ], [ "SETTINGS_GHDL_PATH", "de.neemann.digital.core.element", "Keys", "public static final Key<File> SETTINGS_GHDL_PATH = new Key.KeyFile(\"ghdlPath\", new File(\"ghdl\")).setSecondary();" ], [ "GHDL_OPTIONS", "de.neemann.digital.core.element", "Keys", "public static final Key<String> GHDL_OPTIONS = new Key.LongString(\"ghdlOptions\", \"--std=08 --ieee=synopsys\").setRows(3).setColumns(30).setPanelId(\"Options\");" ], [ "IVERILOG_OPTIONS", "de.neemann.digital.core.element", "Keys", "public static final Key<String> IVERILOG_OPTIONS = new Key.LongString(\"iverilogOptions\", \"\").setRows(3).setColumns(30).setPanelId(\"Options\");" ], [ "SETTINGS_IVERILOG_PATH", "de.neemann.digital.core.element", "Keys", "public static final Key<File> SETTINGS_IVERILOG_PATH = new Key.KeyFile(\"iverilogPath\", new File(\"iverilog\")).setSecondary();" ], [ "CUSTOM_SHAPE", "de.neemann.digital.core.element", "Keys", "public static final Key<CustomShapeDescription> CUSTOM_SHAPE = new Key<>(\"customShape\", new CustomShapeDescription.Builder().build()).setSecondary().setDependsOn(SHAPE_TYPE, st -> st.equals(CustomCircuitShapeType.CUSTOM));" ], [ "PRELOAD_PROGRAM", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> PRELOAD_PROGRAM = new Key<>(\"preloadProgram\", false).setSecondary();" ], [ "BIG_ENDIAN", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> BIG_ENDIAN = new Key<>(\"bigEndian\", false).setSecondary().setDependsOn(AUTO_RELOAD_ROM);" ], [ "PROGRAM_TO_PRELOAD", "de.neemann.digital.core.element", "Keys", "public static final Key<File> PROGRAM_TO_PRELOAD = new Key.KeyFile(\"preloadProgramFile\", new File(\"\")).setSecondary().setDependsOn(PRELOAD_PROGRAM);" ], [ "BIG_ENDIAN_SETTING", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> BIG_ENDIAN_SETTING = new Key<>(\"bigEndianSetting\", false).setSecondary().useTranslationOf(BIG_ENDIAN).setDependsOn(PRELOAD_PROGRAM);" ], [ "WIDE_SHAPE", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> WIDE_SHAPE = new Key<>(\"wideShape\", false).setSecondary().allowGroupEdit();" ], [ "RECT_WIDTH", "de.neemann.digital.core.element", "Keys", "public static final Key.KeyInteger RECT_WIDTH = new Key.KeyInteger(\"RectWidth\", 3).setMin(2);" ], [ "RECT_HEIGHT", "de.neemann.digital.core.element", "Keys", "public static final Key.KeyInteger RECT_HEIGHT = new Key.KeyInteger(\"RectHeight\", 3).setMin(2);" ], [ "RECT_INSIDE", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> RECT_INSIDE = new Key<>(\"RectInside\", false).setSecondary();" ], [ "RECT_BOTTOM", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> RECT_BOTTOM = new Key<>(\"RectBottom\", false).setSecondary();" ], [ "RECT_RIGHT", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> RECT_RIGHT = new Key<>(\"RectRight\", false).setSecondary();" ], [ "MIDI_CHANNEL", "de.neemann.digital.core.element", "Keys", "public static final Key.KeyInteger MIDI_CHANNEL = new Key.KeyInteger(\"midiChannel\", 1).setMin(1).setMax(16);" ], [ "MIDI_INSTRUMENT", "de.neemann.digital.core.element", "Keys", "public static final Key<String> MIDI_INSTRUMENT = new Key<>(\"midiInstrument\", \"\");" ], [ "MIDI_PROG_CHANGE", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> MIDI_PROG_CHANGE = new Key<>(\"midiProgChange\", false);" ], [ "SETTINGS_TOOLCHAIN_CONFIG", "de.neemann.digital.core.element", "Keys", "public static final Key<File> SETTINGS_TOOLCHAIN_CONFIG = new Key.KeyFile(\"toolChainConfig\", new File(\"\")).setSecondary().setRequiresRestart();" ], [ "GENERIC", "de.neemann.digital.core.element", "Keys", "public static final Key<String> GENERIC = new Key.LongString(\"generic\").setLineNumbers(true).allowGroupEdit();" ], [ "GENERICLARGE", "de.neemann.digital.core.element", "Keys", "public static final Key<String> GENERICLARGE = new Key.LongString(\"generic\").setLineNumbers(true).setRows(20).allowGroupEdit();" ], [ "IS_GENERIC", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> IS_GENERIC = new Key<>(\"isGeneric\", false).setSecondary();" ], [ "SETTINGS_SHOW_TUTORIAL", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> SETTINGS_SHOW_TUTORIAL = new Key<>(\"showTutorial\", true).setSecondary();" ], [ "SETTINGS_WIRETOOLTIP", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> SETTINGS_WIRETOOLTIP = new Key<>(\"wireToolTips\", false);" ], [ "SWITCH_ACTS_AS_INPUT", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> SWITCH_ACTS_AS_INPUT = new Key<>(\"switchActsAsInput\", false).setSecondary();" ], [ "SNAP_TO_GRID", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> SNAP_TO_GRID = new Key<>(\"snapToGrid\", true).setSecondary();" ], [ "MIRROR", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> MIRROR = new Key<>(\"mirror\", false).allowGroupEdit().setSecondary();" ], [ "TESTDATA", "de.neemann.digital.core.element", "Keys", "public static final Key<TestCaseDescription> TESTDATA = new Key<>(\"Testdata\", TestCaseDescription::new);" ], [ "TRIGGER", "de.neemann.digital.core.element", "Keys", "public static final Key.KeyEnum<ScopeTrigger.Trigger> TRIGGER = new Key.KeyEnum<>(\"trigger\", ScopeTrigger.Trigger.both, ScopeTrigger.Trigger.values());" ], [ "PORT", "de.neemann.digital.core.element", "Keys", "public static final Key.KeyInteger PORT = new Key.KeyInteger(\"port\", 23).setMin(1).setMax((1 << 16) - 1);" ], [ "TELNET_ESCAPE", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> TELNET_ESCAPE = new Key<>(\"telnetEscape\", true).allowGroupEdit();" ], [ "SKIP_HDL", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> SKIP_HDL = new Key<>(\"skipHDL\", false).setSecondary();" ], [ "PREFIX", "de.neemann.digital.core.basic", "FanIn", "public static final String PREFIX = \"In_\";" ], [ "DESCRIPTION", "de.neemann.digital.core.basic", "NOr", "public static final ElementTypeDescription DESCRIPTION = new FanInDescription(NOr.class).addAttribute(Keys.WIDE_SHAPE);" ], [ "DESCRIPTION", "de.neemann.digital.core.basic", "And", "public static final ElementTypeDescription DESCRIPTION = new FanInDescription(And.class).addAttribute(Keys.WIDE_SHAPE);" ], [ "DESCRIPTION", "de.neemann.digital.core.basic", "XNOr", "public static final ElementTypeDescription DESCRIPTION = new FanInDescription(XNOr.class).addAttribute(Keys.WIDE_SHAPE);" ], [ "DESCRIPTION", "de.neemann.digital.core.basic", "XOr", "public static final ElementTypeDescription DESCRIPTION = new FanInDescription(XOr.class).addAttribute(Keys.WIDE_SHAPE);" ], [ "DESCRIPTION", "de.neemann.digital.core.basic", "Not", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Not.class, input(\"in\")).addAttribute(Keys.ROTATE).addAttribute(Keys.WIDE_SHAPE).addAttribute(Keys.BITS).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.basic", "NAnd", "public static final ElementTypeDescription DESCRIPTION = new FanInDescription(NAnd.class).addAttribute(Keys.WIDE_SHAPE);" ], [ "DESCRIPTION", "de.neemann.digital.core.basic", "Or", "public static final ElementTypeDescription DESCRIPTION = new FanInDescription(Or.class).addAttribute(Keys.WIDE_SHAPE);" ], [ "STARTED", "de.neemann.digital.core", "ModelEvent", "public static final ModelEvent STARTED = new ModelEvent(ModelEventType.STARTED);" ], [ "CLOSED", "de.neemann.digital.core", "ModelEvent", "public static final ModelEvent CLOSED = new ModelEvent(ModelEventType.CLOSED);" ], [ "POSTCLOSED", "de.neemann.digital.core", "ModelEvent", "public static final ModelEvent POSTCLOSED = new ModelEvent(ModelEventType.POSTCLOSED);" ], [ "STEP", "de.neemann.digital.core", "ModelEvent", "public static final ModelEvent STEP = new ModelEvent(ModelEventType.STEP);" ], [ "CHECKBURN", "de.neemann.digital.core", "ModelEvent", "public static final ModelEvent CHECKBURN = new ModelEvent(ModelEventType.CHECKBURN);" ], [ "MICROSTEP", "de.neemann.digital.core", "ModelEvent", "public static final ModelEvent MICROSTEP = new ModelEvent(ModelEventType.MICROSTEP);" ], [ "RUN_TO_BREAK", "de.neemann.digital.core", "ModelEvent", "public static final ModelEvent RUN_TO_BREAK = new ModelEvent(ModelEventType.RUN_TO_BREAK);" ], [ "RUN_TO_BREAK_TIMEOUT", "de.neemann.digital.core", "ModelEvent", "public static final ModelEvent RUN_TO_BREAK_TIMEOUT = new ModelEvent(ModelEventType.RUN_TO_BREAK_TIMEOUT);" ], [ "BREAK", "de.neemann.digital.core", "ModelEvent", "public static final ModelEvent BREAK = new ModelEvent(ModelEventType.BREAK);" ], [ "DESCRIPTION", "de.neemann.digital.core.switching", "FGPFET", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(FGPFET.class, input(\"G\")).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).addAttribute(Keys.BLOWN);" ], [ "DESCRIPTION", "de.neemann.digital.core.switching", "NFET", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(NFET.class, input(\"G\")).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.BITS).addAttribute(Keys.FET_UNIDIRECTIONAL).addAttribute(Keys.LABEL);" ], [ "DESCRIPTION", "de.neemann.digital.core.switching", "FGNFET", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(FGNFET.class, input(\"G\")).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).addAttribute(Keys.BLOWN);" ], [ "DESCRIPTION", "de.neemann.digital.core.switching", "PFET", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(PFET.class, input(\"G\")).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.BITS).addAttribute(Keys.FET_UNIDIRECTIONAL).addAttribute(Keys.LABEL);" ], [ "DESCRIPTION", "de.neemann.digital.core.switching", "TransGate", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(TransGate.class, input(\"S\"), input(\"~S\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS);" ], [ "DESCRIPTION", "de.neemann.digital.core.switching", "SwitchDT", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(SwitchDT.class).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).addAttribute(Keys.POLES);" ], [ "DESCRIPTION", "de.neemann.digital.core.switching", "Relay", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Relay.class, input(\"in1\"), input(\"in2\")).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).addAttribute(Keys.POLES).addAttribute(Keys.RELAY_NORMALLY_CLOSED);" ], [ "DESCRIPTION", "de.neemann.digital.core.switching", "RelayDT", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(RelayDT.class, input(\"in1\"), input(\"in2\")).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).addAttribute(Keys.POLES);" ], [ "DESCRIPTION", "de.neemann.digital.core.switching", "Switch", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Switch.class).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).addAttribute(Keys.POLES).addAttribute(Keys.CLOSED).addAttribute(Keys.SWITCH_ACTS_AS_INPUT);" ], [ "DESCRIPTION", "de.neemann.digital.core.switching", "Fuse", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Fuse.class).addAttribute(Keys.ROTATE).addAttribute(Keys.BLOWN);" ], [ "DESCRIPTION", "de.neemann.digital.core.wiring", "Reset", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"Reset\", Reset.class).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.INVERT_OUTPUT).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.wiring", "Stop", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Stop.class, input(\"stop\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.INVERTER_CONFIG);" ], [ "DESCRIPTION", "de.neemann.digital.core.wiring", "Decoder", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Decoder.class, input(\"sel\")).addAttribute(Keys.ROTATE).addAttribute(Keys.SELECTOR_BITS).addAttribute(Keys.FLIP_SEL_POSITON).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.wiring", "Delay", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Delay.class, input(\"in\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.DELAY_TIME);" ], [ "DESCRIPTION", "de.neemann.digital.core.wiring", "Driver", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Driver.class, input(\"in\"), input(\"sel\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.FLIP_SEL_POSITON).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.wiring", "DriverInvSel", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(DriverInvSel.class, input(\"in\"), input(\"sel\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.FLIP_SEL_POSITON).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.wiring", "PriorityEncoder", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(PriorityEncoder.class) {\n\n    @Override\n    public PinDescriptions getInputDescription(ElementAttributes elementAttributes) {\n        int inputs = 1 << elementAttributes.get(Keys.SELECTOR_BITS);\n        PinDescription[] names = new PinDescription[inputs];\n        for (int i = 0; i < inputs; i++) names[i] = input(\"in\" + i, Lang.get(\"elem_PriorityEncoder_input\", i));\n        return new PinDescriptions(names);\n    }\n}.addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.SELECTOR_BITS).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.wiring", "BusSplitter", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(BusSplitter.class, input(\"OE\")).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.BITS).addAttribute(Keys.SPLITTER_SPREADING);" ], [ "DESCRIPTION", "de.neemann.digital.core.wiring", "Splitter", "public static final ElementTypeDescription DESCRIPTION = new SplitterTypeDescription().addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.INPUT_SPLIT).addAttribute(Keys.OUTPUT_SPLIT).addAttribute(Keys.SPLITTER_SPREADING).setShortName(\"\").supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.wiring", "Multiplexer", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Multiplexer.class) {\n\n    @Override\n    public PinDescriptions getInputDescription(ElementAttributes elementAttributes) {\n        int size = 1 << elementAttributes.get(Keys.SELECTOR_BITS);\n        PinDescription[] names = new PinDescription[size + 1];\n        names[0] = input(\"sel\", Lang.get(\"elem_Multiplexer_pin_sel\"));\n        for (int i = 0; i < size; i++) names[i + 1] = input(\"in_\" + i, Lang.get(\"elem_Multiplexer_input\", i));\n        return new PinDescriptions(names);\n    }\n}.addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.SELECTOR_BITS).addAttribute(Keys.FLIP_SEL_POSITON).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.wiring", "BitSelector", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(BitSelector.class, input(\"in\"), input(\"sel\")).addAttribute(Keys.ROTATE).addAttribute(Keys.SELECTOR_BITS).addAttribute(Keys.FLIP_SEL_POSITON).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.wiring", "Break", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Break.class, input(\"brk\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.ENABLED).addAttribute(Keys.CYCLES);" ], [ "DESCRIPTION", "de.neemann.digital.core.wiring", "Clock", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"Clock\", Clock.class).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.RUN_AT_REAL_TIME).addAttribute(Keys.FREQUENCY).addAttribute(Keys.PINNUMBER).addAttribute(Keys.IN_OUT_SMALL).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.wiring", "AsyncSeq", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(AsyncSeq.class).addAttribute(Keys.RUN_AT_REAL_TIME).addAttribute(Keys.FREQUENCY);" ], [ "DESCRIPTION", "de.neemann.digital.core.wiring", "Demultiplexer", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Demultiplexer.class, input(\"sel\"), input(\"in\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.SELECTOR_BITS).addAttribute(Keys.FLIP_SEL_POSITON).addAttribute(Keys.DEFAULT).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.flipflops", "FlipflopDAsync", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"D_FF_AS\", FlipflopDAsync.class, input(\"Set\"), input(\"D\"), input(\"C\").setClock(), input(\"Clr\")).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).addAttribute(Keys.DEFAULT).addAttribute(Keys.INVERTER_CONFIG).addAttribute(Keys.VALUE_IS_PROBE).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.flipflops", "FlipflopD", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"D_FF\", FlipflopD.class, input(\"D\"), input(\"C\").setClock()).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).addAttribute(Keys.DEFAULT).addAttribute(Keys.INVERTER_CONFIG).addAttribute(Keys.VALUE_IS_PROBE).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.flipflops", "FlipflopRSAsync", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"RS_FF_AS\", FlipflopRSAsync.class, input(\"S\"), input(\"R\")).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.LABEL).addAttribute(Keys.DEFAULT).addAttribute(Keys.INVERTER_CONFIG).addAttribute(Keys.VALUE_IS_PROBE);" ], [ "DESCRIPTION", "de.neemann.digital.core.flipflops", "FlipflopT", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"T_FF\", FlipflopT.class) {\n\n    @Override\n    public PinDescriptions getInputDescription(ElementAttributes elementAttributes) throws NodeException {\n        if (elementAttributes.get(Keys.WITH_ENABLE))\n            return new PinDescriptions(input(\"T\"), input(\"C\").setClock()).setLangKey(getPinLangKey());\n        else\n            return new PinDescriptions(input(\"C\").setClock()).setLangKey(getPinLangKey());\n    }\n}.addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.LABEL).addAttribute(Keys.WITH_ENABLE).addAttribute(Keys.DEFAULT).addAttribute(Keys.INVERTER_CONFIG).addAttribute(Keys.VALUE_IS_PROBE);" ], [ "DESCRIPTION", "de.neemann.digital.core.flipflops", "FlipflopJKAsync", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"JK_FF_AS\", FlipflopJKAsync.class, input(\"Set\"), input(\"J\"), input(\"C\").setClock(), input(\"K\"), input(\"Clr\")).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.LABEL).addAttribute(Keys.DEFAULT).addAttribute(Keys.INVERTER_CONFIG).addAttribute(Keys.VALUE_IS_PROBE).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.flipflops", "FlipflopJK", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"JK_FF\", FlipflopJK.class, input(\"J\"), input(\"C\").setClock(), input(\"K\")).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.LABEL).addAttribute(Keys.DEFAULT).addAttribute(Keys.INVERTER_CONFIG).addAttribute(Keys.VALUE_IS_PROBE).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.flipflops", "Monoflop", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Monoflop.class, input(\"C\").setClock(), input(\"R\")).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.LABEL).addAttribute(Keys.DEFAULT).addAttribute(Keys.MONOFLOP_DELAY).addAttribute(Keys.INVERTER_CONFIG).addAttribute(Keys.VALUE_IS_PROBE);" ], [ "DESCRIPTION", "de.neemann.digital.core.flipflops", "FlipflopRS", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"RS_FF\", FlipflopRS.class, input(\"S\"), input(\"C\").setClock(), input(\"R\")).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.LABEL).addAttribute(Keys.DEFAULT).addAttribute(Keys.INVERTER_CONFIG).addAttribute(Keys.VALUE_IS_PROBE);" ], [ "DESCRIPTION", "de.neemann.digital.core.arithmetic", "BarrelShifter", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(BarrelShifter.class, input(\"in\"), input(\"shift\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.BITS).addAttribute(Keys.BARREL_SIGNED).addAttribute(Keys.DIRECTION).addAttribute(Keys.BARREL_SHIFTER_MODE);" ], [ "DESCRIPTION", "de.neemann.digital.core.arithmetic", "Mul", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Mul.class, input(\"a\"), input(\"b\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.SIGNED).addAttribute(Keys.BITS).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.arithmetic", "Neg", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Neg.class, input(\"in\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.arithmetic", "BitExtender", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(BitExtender.class, input(\"in\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.INPUT_BITS).addAttribute(Keys.OUTPUT_BITS).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.arithmetic", "Add", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Add.class, input(\"a\"), input(\"b\"), input(\"c_i\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.BITS).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.arithmetic", "Div", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Div.class, input(\"a\"), input(\"b\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.BITS).addAttribute(Keys.SIGNED).addAttribute(Keys.REMAINDER_POSITIVE);" ], [ "DESCRIPTION", "de.neemann.digital.core.arithmetic", "PRNG", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(PRNG.class, input(\"S\"), input(\"se\"), input(\"ne\"), input(\"C\").setClock()).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.LABEL);" ], [ "DESCRIPTION", "de.neemann.digital.core.arithmetic", "Sub", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Sub.class, input(\"a\"), input(\"b\"), input(\"c_i\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.BITS).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.arithmetic", "Comparator", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Comparator.class, input(\"a\"), input(\"b\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.BITS).addAttribute(Keys.SIGNED).setShortName(\"\").supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.arithmetic", "BitCount", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(BitCount.class, input(\"in\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS);" ], [ "EMPTY_LIST", "de.neemann.digital.core", "ObservableValues", "public static final ObservableValues EMPTY_LIST = new ObservableValues();" ], [ "DEFAULT_FORMATTER", "de.neemann.digital.core", "IntFormat", "public static final ValueFormatter DEFAULT_FORMATTER = ValueFormatterDefault.INSTANCE;" ], [ "HEX_FORMATTER", "de.neemann.digital.core", "IntFormat", "public static final ValueFormatter HEX_FORMATTER = ValueFormatterHex.INSTANCE;" ], [ "DESCRIPTION", "de.neemann.digital.core.extern", "External", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(External.class) {\n\n    @Override\n    public PinDescriptions getInputDescription(ElementAttributes elementAttributes) {\n        return new PortDefinition(elementAttributes.get(Keys.EXTERNAL_INPUTS)).getPinDescriptions(PinDescription.Direction.input);\n    }\n\n    @Override\n    public PinDescriptions getOutputDescriptions(ElementAttributes elementAttributes) {\n        return new PortDefinition(elementAttributes.get(Keys.EXTERNAL_OUTPUTS)).getPinDescriptions(PinDescription.Direction.output);\n    }\n}.addAttribute(Keys.LABEL).addAttribute(Keys.WIDTH).addAttribute(Keys.EXTERNAL_INPUTS).addAttribute(Keys.EXTERNAL_OUTPUTS).addAttribute(Keys.EXTERNAL_CODE).addAttribute(Keys.APPLICATION_TYPE).addAttribute(Keys.GHDL_OPTIONS).addAttribute(Keys.IVERILOG_OPTIONS).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.extern", "ExternalFile", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(ExternalFile.class) {\n\n    @Override\n    public PinDescriptions getInputDescription(ElementAttributes elementAttributes) {\n        return new PortDefinition(elementAttributes.get(Keys.EXTERNAL_INPUTS)).getPinDescriptions(PinDescription.Direction.input);\n    }\n\n    @Override\n    public PinDescriptions getOutputDescriptions(ElementAttributes elementAttributes) {\n        return new PortDefinition(elementAttributes.get(Keys.EXTERNAL_OUTPUTS)).getPinDescriptions(PinDescription.Direction.output);\n    }\n}.addAttribute(Keys.LABEL).addAttribute(Keys.WIDTH).addAttribute(Keys.EXTERNAL_INPUTS).addAttribute(Keys.EXTERNAL_OUTPUTS).addAttribute(Keys.EXTERNAL_CODE_FILE).addAttribute(Keys.APPLICATION_TYPE).addAttribute(Keys.GHDL_OPTIONS).addAttribute(Keys.IVERILOG_OPTIONS).supportsHDL();" ], [ "DEFAULT_RAD", "de.neemann.digital.fsm", "State", "static final int DEFAULT_RAD = 70;" ], [ "INSTANCE", "de.neemann.digital.lang", "Lang", "static final Lang INSTANCE = new Lang();" ], [ "INSTANCE", "de.neemann.digital.lang", "InstanceHolder", "static final Lang INSTANCE = new Lang();" ], [ "DESCRIPTION", "de.neemann.digital.testing", "TestCaseElement", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"Testcase\", TestCaseElement.class).addAttribute(Keys.LABEL).addAttribute(Keys.TESTDATA).addAttribute(Keys.ENABLED).supportsHDL();" ], [ "STATENAMES", "de.neemann.digital.analyse", "TruthTableTableModel", "public static final String[] STATENAMES = new String[] { \"0\", \"1\", \"x\" };" ], [ "ONE", "de.neemann.digital.analyse.expression", "Constant", "public static final Constant ONE = new Constant(true);" ], [ "ZERO", "de.neemann.digital.analyse.expression", "Constant", "public static final Constant ZERO = new Constant(false);" ], [ "PRIMARY", "de.neemann.digital.gui.components", "EditorPanel", "public static final String PRIMARY = \"primary\";" ], [ "SECONDARY", "de.neemann.digital.gui.components", "EditorPanel", "public static final String SECONDARY = \"secondary\";" ], [ "INSTANCE", "de.neemann.digital.gui.components", "EditorFactory", "static final EditorFactory INSTANCE = new EditorFactory();" ], [ "MAX_TERMINAL_STORED", "de.neemann.digital.gui.components.terminal", "ConsoleTerminal", "public static final int MAX_TERMINAL_STORED = 2048;" ], [ "DESCRIPTION", "de.neemann.digital.gui.components.terminal", "Terminal", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Terminal.class, input(\"D\"), input(\"C\").setClock(), input(\"en\")).addAttribute(Keys.TERM_WIDTH).addAttribute(Keys.TERM_HEIGHT).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL);" ], [ "DESCRIPTION", "de.neemann.digital.gui.components.terminal", "Keyboard", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Keyboard.class, input(\"C\").setClock(), input(\"en\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.INVERTER_CONFIG);" ], [ "FAILED_COLOR", "de.neemann.digital.gui.components.testing", "ValueTableDialog", "static final Color FAILED_COLOR = new Color(255, 200, 200);" ], [ "PASSED_COLOR", "de.neemann.digital.gui.components.testing", "ValueTableDialog", "static final Color PASSED_COLOR = new Color(200, 255, 200);" ], [ "ICON_DELETE", "de.neemann.digital.gui.components", "CircuitComponent", "public static final Icon ICON_DELETE = IconCreator.create(\"delete.png\");" ], [ "ICON_COPY", "de.neemann.digital.gui.components", "CircuitComponent", "public static final Icon ICON_COPY = IconCreator.create(\"edit-copy.png\");" ], [ "DESCRIPTION", "de.neemann.digital.gui.components.graphics", "VGA", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(VGA.class, input(\"R\"), input(\"G\"), input(\"B\"), input(\"H\"), input(\"V\"), input(\"C\").setClock()).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL);" ], [ "DESCRIPTION", "de.neemann.digital.gui.components.graphics", "GraphicCard", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(GraphicCard.class, input(\"A\"), input(\"str\"), input(\"C\").setClock(), input(\"ld\"), input(\"B\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).addAttribute(Keys.GRAPHIC_WIDTH).addAttribute(Keys.GRAPHIC_HEIGHT);" ], [ "DESCRIPTION", "de.neemann.digital.gui.components.graphics", "LedMatrix", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(LedMatrix.class, input(\"r-data\"), input(\"c-addr\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.ROW_DATA_BITS).addAttribute(Keys.COL_ADDR_BITS).addAttribute(Keys.COLOR).addAttribute(Keys.LED_PERSISTENCE);" ], [ "DESCRIPTION", "de.neemann.digital.gui.components.data", "ScopeTrigger", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(ScopeTrigger.class, input(\"T\").setClock()).addAttribute(Keys.LABEL).addAttribute(Keys.TRIGGER).addAttribute(Keys.MAX_STEP_COUNT);" ], [ "DATADESCRIPTION", "de.neemann.digital.gui.components.data", "DummyElement", "public static final ElementTypeDescription DATADESCRIPTION = new ElementTypeDescription(\"Data\", DummyElement.class).addAttribute(Keys.MICRO_STEP).addAttribute(Keys.MAX_STEP_COUNT).addAttribute(Keys.SNAP_TO_GRID);" ], [ "TEXTDESCRIPTION", "de.neemann.digital.gui.components.data", "DummyElement", "public static final ElementTypeDescription TEXTDESCRIPTION = new ElementTypeDescription(\"Text\", DummyElement.class).addAttribute(Keys.DESCRIPTION).addAttribute(Keys.ROTATE).addAttribute(Keys.TEXT_ORIENTATION).addAttribute(Keys.FONT_SIZE).addAttribute(Keys.SNAP_TO_GRID);" ], [ "RECTDESCRIPTION", "de.neemann.digital.gui.components.data", "DummyElement", "public static final ElementTypeDescription RECTDESCRIPTION = new ElementTypeDescription(\"Rectangle\", DummyElement.class).addAttribute(Keys.LABEL).addAttribute(Keys.RECT_WIDTH).addAttribute(Keys.RECT_HEIGHT).addAttribute(Keys.RECT_INSIDE).addAttribute(Keys.RECT_BOTTOM).addAttribute(Keys.RECT_RIGHT).addAttribute(Keys.FONT_SIZE).addAttribute(Keys.SNAP_TO_GRID);" ], [ "LEFT", "de.neemann.digital.gui.components", "TextLineNumber", "public final static float LEFT = 0.0f;" ], [ "CENTER", "de.neemann.digital.gui.components", "TextLineNumber", "public final static float CENTER = 0.5f;" ], [ "RIGHT", "de.neemann.digital.gui.components", "TextLineNumber", "public final static float RIGHT = 1.0f;" ], [ "INSTANCE", "de.neemann.digital.gui", "Settings", "static final Settings INSTANCE = new Settings();" ], [ "INSTANCE", "de.neemann.digital.gui", "SettingsHolder", "static final Settings INSTANCE = new Settings();" ], [ "BASE_FILE_KEY", "de.neemann.digital.hdl.hgs", "Context", "public static final String BASE_FILE_KEY = \"baseFile\";" ], [ "DESCRIPTION", "de.neemann.digital.draw.library", "GenericCode", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(GenericCode.class).addAttribute(Keys.GENERICLARGE).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.draw.library", "GenericInitCode", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(GenericInitCode.class).addAttribute(Keys.LABEL).addAttribute(Keys.ENABLED).addAttribute(Keys.GENERIC).supportsHDL();" ], [ "GEN_ARGS_KEY", "de.neemann.digital.draw.library", "ResolveGenerics", "public static final String GEN_ARGS_KEY = \"genArgs\";" ], [ "HEIGHT", "de.neemann.digital.draw.shapes", "ButtonShape", "protected static final int HEIGHT = OUT_SIZE / 2;" ], [ "SIZE2", "de.neemann.digital.draw.shapes", "GenericShape", "public static final int SIZE2 = 10;" ], [ "SIZE", "de.neemann.digital.draw.shapes", "GenericShape", "public static final int SIZE = SIZE2 * 2;" ], [ "CIRC", "de.neemann.digital.draw.shapes", "DILShape", "static final float CIRC = (float) (4 * (Math.sqrt(2) - 1) / 3);" ], [ "DOWNSHIFT", "de.neemann.digital.draw.shapes", "VDDShape", "static final int DOWNSHIFT = 4;" ], [ "CHARGED_GATE", "de.neemann.digital.draw.shapes", "FGFETShapeN", "static final Style CHARGED_GATE = Style.NORMAL.deriveStyle(6, false, Color.RED);" ], [ "OUT_SIZE", "de.neemann.digital.draw.shapes", "OutputShape", "public static final int OUT_SIZE = GenericShape.SIZE * 3 / 4;" ], [ "LATEX_RAD", "de.neemann.digital.draw.shapes", "OutputShape", "static final Vector LATEX_RAD = new Vector(Style.MAXLINETHICK, Style.MAXLINETHICK);" ], [ "WIDTH2", "de.neemann.digital.draw.shapes", "PullDownShape", "public static final int WIDTH2 = SIZE2 - 3;" ], [ "HEIGHT", "de.neemann.digital.draw.shapes", "PullDownShape", "public static final int HEIGHT = SIZE + SIZE / 3;" ], [ "HEIGHT", "de.neemann.digital.draw.shapes", "SevenShape", "static final int HEIGHT = 7;" ], [ "FRAME", "de.neemann.digital.draw.shapes", "SevenShape", "public static final Polygon FRAME = Polygon.createFromPath(\"m -10,1 L 70,1 70,139 -10,139 z\");" ], [ "DESCRIPTION", "de.neemann.digital.draw.elements", "Tunnel", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Tunnel.class, input(\"in\")).addAttribute(Keys.ROTATE).addAttribute(Keys.NETNAME).supportsHDL();" ], [ "HIGH_CONTRAST", "de.neemann.digital.draw.graphics", "SVGSettings", "static final Key<Boolean> HIGH_CONTRAST = new Key<>(\"SVG_highContrast\", false);" ], [ "MONOCHROME", "de.neemann.digital.draw.graphics", "SVGSettings", "static final Key<Boolean> MONOCHROME = new Key<>(\"SVG_monochrome\", false);" ], [ "SMALL_IO", "de.neemann.digital.draw.graphics", "SVGSettings", "static final Key<Boolean> SMALL_IO = new Key<>(\"SVG_smallIO\", false);" ], [ "NO_PIN_MARKER", "de.neemann.digital.draw.graphics", "SVGSettings", "static final Key<Boolean> NO_PIN_MARKER = new Key<>(\"SVG_noPinMarker\", false);" ], [ "THINNER_LINES", "de.neemann.digital.draw.graphics", "SVGSettings", "static final Key<Boolean> THINNER_LINES = new Key<>(\"SVG_thinnerLines\", false);" ], [ "HIDE_TEST", "de.neemann.digital.draw.graphics", "SVGSettings", "static final Key<Boolean> HIDE_TEST = new Key<>(\"SVG_hideTest\", false);" ], [ "NO_SHAPE_FILLING", "de.neemann.digital.draw.graphics", "SVGSettings", "static final Key<Boolean> NO_SHAPE_FILLING = new Key<>(\"SVG_noShapeFilling\", false);" ], [ "LATEX", "de.neemann.digital.draw.graphics", "SVGSettings", "static final Key<Boolean> LATEX = new Key<>(\"SVG_LaTeX\", false);" ], [ "PINS_IN_MATH_MODE", "de.neemann.digital.draw.graphics", "SVGSettings", "static final Key<Boolean> PINS_IN_MATH_MODE = new Key<>(\"SVG_pinsInMathMode\", false).setDependsOn(LATEX);" ], [ "INSTANCE", "de.neemann.digital.draw.graphics", "SVGSettings", "static final SVGSettings INSTANCE = new SVGSettings();" ], [ "INSTANCE", "de.neemann.digital.draw.graphics", "SettingsHolder", "static final SVGSettings INSTANCE = new SVGSettings();" ], [ "COLOR_SCHEME", "de.neemann.digital.draw.graphics", "ColorScheme", "public static final Key<ColorSchemes> COLOR_SCHEME = new Key.KeyEnum<>(\"colorScheme\", ColorSchemes.DEFAULT, ColorSchemes.values()).setRequiresRepaint();" ], [ "CUSTOM_COLOR_SCHEME", "de.neemann.digital.draw.graphics", "ColorScheme", "public static final Key<ColorScheme> CUSTOM_COLOR_SCHEME = new Key<>(\"customColorScheme\", DEFAULT_SCHEME).setDependsOn(COLOR_SCHEME, o -> o.equals(ColorSchemes.CUSTOM)).setRequiresRepaint();" ], [ "MAXLINETHICK", "de.neemann.digital.draw.graphics", "Style", "public static final int MAXLINETHICK = 4;" ], [ "NORMAL", "de.neemann.digital.draw.graphics", "Style", "public static final Style NORMAL = new Builder().build();" ], [ "DISABLED", "de.neemann.digital.draw.graphics", "Style", "public static final Style DISABLED = new Builder().setColor(ColorKey.DISABLED).build();" ], [ "INOUT", "de.neemann.digital.draw.graphics", "Style", "public static final Style INOUT = new Builder(NORMAL).setFontStyle(Font.ITALIC).build();" ], [ "FAILED", "de.neemann.digital.draw.graphics", "Style", "public static final Style FAILED = new Builder(NORMAL).setColor(ColorKey.ERROR).build();" ], [ "PASS", "de.neemann.digital.draw.graphics", "Style", "public static final Style PASS = new Builder(NORMAL).setColor(ColorKey.PASSED).build();" ], [ "NORMAL_TEXT", "de.neemann.digital.draw.graphics", "Style", "public static final Style NORMAL_TEXT = new Builder(NORMAL).setMattersForSize(true).build();" ], [ "THIN", "de.neemann.digital.draw.graphics", "Style", "public static final Style THIN = new Builder(NORMAL).setThickness(LINETHIN).build();" ], [ "THIN_FILLED", "de.neemann.digital.draw.graphics", "Style", "public static final Style THIN_FILLED = new Builder(NORMAL).setThickness(LINETHIN).setFilled(true).build();" ], [ "THICK", "de.neemann.digital.draw.graphics", "Style", "public static final Style THICK = new Builder(NORMAL).setThickness(LINETHICK + LINETHIN).build();" ], [ "WIRE", "de.neemann.digital.draw.graphics", "Style", "public static final Style WIRE = new Builder().setThickness(WIRETHICK).setFilled(true).setColor(ColorKey.WIRE).setEndCap(BasicStroke.CAP_ROUND).build();" ], [ "WIRE_LOW", "de.neemann.digital.draw.graphics", "Style", "public static final Style WIRE_LOW = new Builder(WIRE).setColor(ColorKey.WIRE_LOW).build();" ], [ "WIRE_HIGH", "de.neemann.digital.draw.graphics", "Style", "public static final Style WIRE_HIGH = new Builder(WIRE).setColor(ColorKey.WIRE_HIGH).build();" ], [ "WIRE_HIGHZ", "de.neemann.digital.draw.graphics", "Style", "public static final Style WIRE_HIGHZ = new Builder(WIRE).setColor(ColorKey.WIRE_Z).build();" ], [ "WIRE_OUT", "de.neemann.digital.draw.graphics", "Style", "public static final Style WIRE_OUT = new Builder(WIRE).setColor(ColorKey.WIRE_OUT).build();" ], [ "FILLED", "de.neemann.digital.draw.graphics", "Style", "public static final Style FILLED = new Builder().setFilled(true).build();" ], [ "DASH", "de.neemann.digital.draw.graphics", "Style", "public static final Style DASH = new Builder().setThickness(LINEDASH).setDash(new float[] { 4, 4 }).build();" ], [ "SHAPE_PIN", "de.neemann.digital.draw.graphics", "Style", "public static final Style SHAPE_PIN = new Builder().setThickness(LINETHIN).setColor(ColorKey.PINS).setFontSize(18).build();" ], [ "SHAPE_SPLITTER", "de.neemann.digital.draw.graphics", "Style", "public static final Style SHAPE_SPLITTER = new Builder(SHAPE_PIN).setFontSize(12).build();" ], [ "WIRE_VALUE", "de.neemann.digital.draw.graphics", "Style", "public static final Style WIRE_VALUE = new Builder(SHAPE_SPLITTER).setColor(ColorKey.WIRE_VALUE).build();" ], [ "WIRE_BITS", "de.neemann.digital.draw.graphics", "Style", "public static final Style WIRE_BITS = new Builder(SHAPE_SPLITTER).setColor(ColorKey.WIRE).build();" ], [ "HIGHLIGHT", "de.neemann.digital.draw.graphics", "Style", "public static final Style HIGHLIGHT = new Builder(NORMAL).setColor(ColorKey.HIGHLIGHT).setEndCap(BasicStroke.CAP_ROUND).build();" ], [ "ERROR", "de.neemann.digital.draw.graphics", "Style", "public static final Style ERROR = new Builder(NORMAL).setColor(ColorKey.ERROR).setEndCap(BasicStroke.CAP_ROUND).build();" ], [ "BLANK", "de.neemann.digital.draw.graphics.text.text", "Blank", "public static final Blank BLANK = new Blank();" ], [ "LOOK_AT_ALIAS", "de.neemann.digital.toolchain", "Configuration", "static final String LOOK_AT_ALIAS = \"lookAt\";" ], [ "REF_ALIAS", "de.neemann.digital.toolchain", "Configuration", "static final String REF_ALIAS = \"ref\";" ] ],
  "tokensMethodJavadocValues" : [ ],
  "tokensMethodArguments" : [ [ "circuit", "de.neemann.digital.draw.elements", "Circuit" ] ],
  "tokensMethodVariablesNonPrivateNonStaticNonVoidMethods" : [ [ "clone", "java.lang", "Object", "protected native Object clone() throws CloneNotSupportedException" ], [ "hashCode", "java.lang", "Object", "public native int hashCode()" ], [ "toString", "de.neemann.digital.gui.components.modification", "ModifyMeasurementOrdering", "public String toString()" ], [ "getClass", "java.lang", "Object", "public final native Class<? extends Object> getClass()" ], [ "equals", "java.lang", "Object", "public boolean equals(Object arg0)" ], [ "getElementListAt", "de.neemann.digital.draw.elements", "Circuit", "public List<VisualElement> getElementListAt(Vector arg0, boolean arg1)" ], [ "getOutputNames", "de.neemann.digital.draw.elements", "Circuit", "public ObservableValues getOutputNames() throws PinException" ], [ "getElementAt", "de.neemann.digital.draw.elements", "Circuit", "public VisualElement getElementAt(Vector arg0)" ], [ "getMeasurementOrdering", "de.neemann.digital.draw.elements", "Circuit", "public List<String> getMeasurementOrdering()" ], [ "getElementsToHighlight", "de.neemann.digital.draw.elements", "Circuit", "public ArrayList<Drawable> getElementsToHighlight(Vector arg0, Vector arg1)" ], [ "getInputNames", "de.neemann.digital.draw.elements", "Circuit", "public PinDescription[] getInputNames() throws PinException" ], [ "isPinPos", "de.neemann.digital.draw.elements", "Circuit", "public boolean isPinPos(Vector arg0)" ], [ "add", "de.neemann.digital.draw.elements", "Circuit", "public Circuit add(VisualElement arg0)" ], [ "getElements", "de.neemann.digital.draw.elements", "Circuit", "public List<VisualElement> getElements(Circuit.ElementFilter arg0)" ], [ "copyElementsInRect", "de.neemann.digital.draw.elements", "Circuit", "public Circuit.RectContainer copyElementsInRect(Vector arg0, Vector arg1, ShapeFactory arg2)" ], [ "copyElementsToMove", "de.neemann.digital.draw.elements", "Circuit", "public ArrayList<Movable> copyElementsToMove(Vector arg0, Vector arg1, ShapeFactory arg2)" ], [ "getElementAt", "de.neemann.digital.draw.elements", "Circuit", "public VisualElement getElementAt(Vector arg0, boolean arg1)" ], [ "getAttributes", "de.neemann.digital.draw.elements", "Circuit", "public ElementAttributes getAttributes()" ], [ "getElements", "de.neemann.digital.draw.elements", "Circuit", "public ArrayList<VisualElement> getElements()" ], [ "isWireAt", "de.neemann.digital.draw.elements", "Circuit", "public boolean isWireAt(Vector arg0)" ], [ "getOrigin", "de.neemann.digital.draw.elements", "Circuit", "public File getOrigin()" ], [ "getTestCases", "de.neemann.digital.draw.elements", "Circuit", "public List<Circuit.TestCase> getTestCases()" ], [ "getElementsToMove", "de.neemann.digital.draw.elements", "Circuit", "public ArrayList<Movable> getElementsToMove(Vector arg0, Vector arg1)" ], [ "add", "de.neemann.digital.draw.elements", "Circuit", "public Circuit add(ArrayList<Wire> arg0)" ], [ "createDeepCopy", "de.neemann.digital.draw.elements", "Circuit", "public Circuit createDeepCopy()" ], [ "add", "de.neemann.digital.draw.elements", "Circuit", "public Circuit add(Wire arg0)" ], [ "getWireAt", "de.neemann.digital.draw.elements", "Circuit", "public Wire getWireAt(Vector arg0, int arg1)" ], [ "getWires", "de.neemann.digital.draw.elements", "Circuit", "public ArrayList<Wire> getWires()" ], [ "findElements", "de.neemann.digital.draw.elements", "Circuit", "public ArrayList<VisualElement> findElements(String arg0)" ], [ "createShallowCopy", "de.neemann.digital.draw.elements", "Circuit", "public Circuit createShallowCopy()" ], [ "toString", "java.lang", "Object", "public String toString()" ], [ "createDeepCopy", "de.neemann.digital.undo", "Copyable", "public abstract A createDeepCopy()" ] ],
  "tokensMethodVariablesNonPrivateNonStaticAttributes" : [ ],
  "tokensOracleVariablesNonPrivateNonStaticNonVoidMethods" : [ ],
  "tokensOracleVariablesNonPrivateNonStaticAttributes" : [ ]
}, {
  "id" : 26715,
  "oracle" : "v == null;",
  "oracleType" : "EXCEPT_POST",
  "projectName" : "Digital",
  "packageName" : "de.neemann.digital.draw.graphics",
  "className" : "TransformMatrix",
  "javadocTag" : "",
  "methodJavadoc" : "    /**\n     * Transforms a direction vector.\n     * Ignores the translation part of the transformation.\n     *\n     * @param v the vector to transform\n     * @return the transformed vector\n     */",
  "methodSourceCode" : "public VectorFloat transformDirection(VectorInterface v){\n    return new VectorFloat(v.getXFloat() * a + v.getYFloat() * b, v.getXFloat() * c + v.getYFloat() * d);\n}",
  "classJavadoc" : "/**\n * A Matrix transformation\n */",
  "classSourceCode" : "/*\n * Copyright (c) 2018 Helmut Neemann.\n * Use of this source code is governed by the GPL v3 license\n * that can be found in the LICENSE file.\n */\npackage de.neemann.digital.draw.graphics;\n\n/**\n * A Matrix transformation\n */\npublic class TransformMatrix implements Transform {\n\n\n    /**\n     * Creates a rotation.\n     * Rotates in mathematically positive direction. Takes into account that\n     * in Digital the y-axis goes downwards.\n     *\n     * @param w the angle in 360 grad units\n     * @return the transformation\n     */\n    public static TransformMatrix rotate(double w) {\n        final double phi = w / 180 * Math.PI;\n        float cos = (float) Math.cos(phi);\n        float sin = (float) Math.sin(phi);\n        return new TransformMatrix(cos, -sin, sin, cos, 0, 0);\n    }\n\n    /**\n     * Creates a scaling transformation\n     *\n     * @param sx scaling in x direction\n     * @param sy scaling in y direction\n     * @return the transformation\n     */\n    public static TransformMatrix scale(float sx, float sy) {\n        return new TransformMatrix(sx, 0, 0, sy, 0, 0);\n    }\n\n    final float a;\n    final float b;\n    final float c;\n    final float d;\n    final float x;\n    final float y;\n\n    /**\n     * Creates a new instance\n     *\n     * @param a A_00\n     * @param b A_10\n     * @param c A_01\n     * @param d A_11\n     * @param x x offset\n     * @param y y offset\n     */\n    public TransformMatrix(float a, float b, float c, float d, float x, float y) {\n        this.a = a;\n        this.b = b;\n        this.c = c;\n        this.d = d;\n        this.x = x;\n        this.y = y;\n    }\n\n    @Override\n    public Vector transform(Vector v) {\n        return new Vector(\n                (int) (v.getXFloat() * a + v.getYFloat() * b + x),\n                (int) (v.getXFloat() * c + v.getYFloat() * d + y));\n    }\n\n    @Override\n    public VectorFloat transform(VectorFloat v) {\n        return new VectorFloat(\n                v.getXFloat() * a + v.getYFloat() * b + x,\n                v.getXFloat() * c + v.getYFloat() * d + y);\n    }\n\n\n    /**\n     * Transforms a direction vector.\n     * Ignores the translation part of the transformation.\n     *\n     * @param v the vector to transform\n     * @return the transformed vector\n     */\n    public VectorFloat transformDirection(VectorInterface v) {\n        return new VectorFloat(\n                v.getXFloat() * a + v.getYFloat() * b,\n                v.getXFloat() * c + v.getYFloat() * d);\n    }\n\n    @Override\n    public TransformMatrix getMatrix() {\n        return this;\n    }\n\n    /**\n     * Returns the inverse transformation.\n     *\n     * @return the inverse transformation.\n     */\n    public TransformMatrix invert() {\n        float q = a * d - b * c;\n\n        return new TransformMatrix(d / q, -b / q, -c / q, a / q,\n                (b * y - d * x) / q, (c * x - a * y) / q);\n    }\n\n    /**\n     * @return true if this transformation does no asymmetric scaling.\n     */\n    public boolean isUniform() {\n        return equal(a, d) && equal(b, -c);\n    }\n\n    /**\n     * @return true if this transformation does no rotation\n     */\n    public boolean noRotation() {\n        return equal(b, 0) && equal(c, 0);\n    }\n\n    private static boolean equal(float a, float b) {\n        return Math.abs(a - b) < 1e-7;\n    }\n\n    /**\n     * @return the matrix values\n     */\n    public float[] getValues() {\n        return new float[]{a, b, c, d, x, y};\n    }\n\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
  "tokensGeneralGrammar" : [ "null", "true", "false", ",", ".", ":", ";", "?", "(", ")", "jdVar", "stream", "Arrays", "allMatch", "noneMatch", "anyMatch", "~", ">>", "<<", ">>>", "|", "&", "^", "+", "-", "/", "*", "%", "&&", "||", ">=", "<=", ">", "<", "==", "!=", "instanceof", "class", "methodResultID", "this" ],
  "tokensGeneralValuesGlobalDictionary" : [ [ "0", "int" ], [ "1", "int" ], [ "-1", "int" ], [ "0.0", "double" ], [ "1.0", "double" ], [ "-1.0", "double" ], [ "\"\"", "String" ], [ "\" \"", "String" ] ],
  "tokensProjectClasses" : [ [ "CLI", "de.neemann" ], [ "Mouse", "de.neemann.gui" ], [ "LineBreaker", "de.neemann.gui" ], [ "IconCreator", "de.neemann.gui" ], [ "ConfirmDialogBuilder", "de.neemann.gui" ], [ "Resources", "de.neemann.gui.language" ], [ "Bundle", "de.neemann.gui.language" ], [ "Language", "de.neemann.gui.language" ], [ "ToolTipAction", "de.neemann.gui" ], [ "MyFileChooser", "de.neemann.gui" ], [ "ClosingWindowListener", "de.neemann.gui" ], [ "ErrorMessage", "de.neemann.gui" ], [ "WindowSizeStorage", "de.neemann.gui" ], [ "Screen", "de.neemann.gui" ], [ "ToolTipProvider", "de.neemann.gui" ], [ "InfoDialog", "de.neemann.gui" ], [ "ValueFormatter", "de.neemann.digital.core" ], [ "ModelStateObserver", "de.neemann.digital.core" ], [ "PullDown", "de.neemann.digital.core.pld" ], [ "Diode", "de.neemann.digital.core.pld" ], [ "DiodeBackward", "de.neemann.digital.core.pld" ], [ "PullUp", "de.neemann.digital.core.pld" ], [ "DiodeForward", "de.neemann.digital.core.pld" ], [ "Node", "de.neemann.digital.core" ], [ "RAMSinglePort", "de.neemann.digital.core.memory" ], [ "ROMDualPort", "de.neemann.digital.core.memory" ], [ "RAMDualAccess", "de.neemann.digital.core.memory" ], [ "ByteArrayFromValueArray", "de.neemann.digital.core.memory.importer" ], [ "Importer", "de.neemann.digital.core.memory.importer" ], [ "LogisimReader", "de.neemann.digital.core.memory.importer" ], [ "DataFieldValueArray", "de.neemann.digital.core.memory.importer" ], [ "ByteArrayReader", "de.neemann.digital.core.memory.importer" ], [ "ValueArrayReader", "de.neemann.digital.core.memory.importer" ], [ "IntelHexReader", "de.neemann.digital.core.memory.importer" ], [ "ValueArray", "de.neemann.digital.core.memory.importer" ], [ "BinReader", "de.neemann.digital.core.memory.importer" ], [ "ByteArray", "de.neemann.digital.core.memory.importer" ], [ "MultiValueArray", "de.neemann.digital.core.memory.importer" ], [ "CounterPreset", "de.neemann.digital.core.memory" ], [ "RAMDualPort", "de.neemann.digital.core.memory" ], [ "Register", "de.neemann.digital.core.memory" ], [ "LookUpTable", "de.neemann.digital.core.memory" ], [ "BlockRAMDualPort", "de.neemann.digital.core.memory" ], [ "Counter", "de.neemann.digital.core.memory" ], [ "ROMMangerBase", "de.neemann.digital.core.memory.rom" ], [ "ROMManagerFile", "de.neemann.digital.core.memory.rom" ], [ "ROMManager", "de.neemann.digital.core.memory.rom" ], [ "ROMInterface", "de.neemann.digital.core.memory.rom" ], [ "EEPROM", "de.neemann.digital.core.memory" ], [ "ProgramCounter", "de.neemann.digital.core.memory" ], [ "RAMAsync", "de.neemann.digital.core.memory" ], [ "ROM", "de.neemann.digital.core.memory" ], [ "DataField", "de.neemann.digital.core.memory" ], [ "EEPROMDualPort", "de.neemann.digital.core.memory" ], [ "RAMInterface", "de.neemann.digital.core.memory" ], [ "DataFieldConverter", "de.neemann.digital.core.memory" ], [ "RAMSinglePortSel", "de.neemann.digital.core.memory" ], [ "ProgramMemory", "de.neemann.digital.core.memory" ], [ "RegisterFile", "de.neemann.digital.core.memory" ], [ "ModelStateObserverTyped", "de.neemann.digital.core" ], [ "Observable", "de.neemann.digital.core" ], [ "NodeWithoutDelay", "de.neemann.digital.core" ], [ "ExceptionWithOrigin", "de.neemann.digital.core" ], [ "ObservableValue", "de.neemann.digital.core" ], [ "SpeedTest", "de.neemann.digital.core" ], [ "BurnException", "de.neemann.digital.core" ], [ "GlobalValues", "de.neemann.digital.core" ], [ "MIDI", "de.neemann.digital.core.io" ], [ "RGBLED", "de.neemann.digital.core.io" ], [ "Out", "de.neemann.digital.core.io" ], [ "RotEncoder", "de.neemann.digital.core.io" ], [ "PinControl", "de.neemann.digital.core.io" ], [ "DipSwitch", "de.neemann.digital.core.io" ], [ "CommonConnectionType", "de.neemann.digital.core.io" ], [ "LightBulb", "de.neemann.digital.core.io" ], [ "Probe", "de.neemann.digital.core.io" ], [ "Button", "de.neemann.digital.core.io" ], [ "ButtonLED", "de.neemann.digital.core.io" ], [ "In", "de.neemann.digital.core.io" ], [ "StepperMotorUnipolar", "de.neemann.digital.core.io" ], [ "ProbeMode", "de.neemann.digital.core.io" ], [ "NotConnected", "de.neemann.digital.core.io" ], [ "MIDIHelper", "de.neemann.digital.core.io" ], [ "StepperMotorBipolar", "de.neemann.digital.core.io" ], [ "Const", "de.neemann.digital.core.io" ], [ "PowerSupply", "de.neemann.digital.core.io" ], [ "Ground", "de.neemann.digital.core.io" ], [ "InValue", "de.neemann.digital.core.io" ], [ "VDD", "de.neemann.digital.core.io" ], [ "ServerHolder", "de.neemann.digital.core.io.telnet" ], [ "Telnet", "de.neemann.digital.core.io.telnet" ], [ "ByteBuffer", "de.neemann.digital.core.io.telnet" ], [ "Server", "de.neemann.digital.core.io.telnet" ], [ "ElementAttributes", "de.neemann.digital.core.element" ], [ "Element", "de.neemann.digital.core.element" ], [ "ElementFactory", "de.neemann.digital.core.element" ], [ "PinInfo", "de.neemann.digital.core.element" ], [ "PinDescriptions", "de.neemann.digital.core.element" ], [ "PinDescription", "de.neemann.digital.core.element" ], [ "Keys", "de.neemann.digital.core.element" ], [ "Rotation", "de.neemann.digital.core.element" ], [ "AttributeListener", "de.neemann.digital.core.element" ], [ "Key", "de.neemann.digital.core.element" ], [ "ImmutableList", "de.neemann.digital.core.element" ], [ "ElementTypeDescription", "de.neemann.digital.core.element" ], [ "FanIn", "de.neemann.digital.core.basic" ], [ "NOr", "de.neemann.digital.core.basic" ], [ "And", "de.neemann.digital.core.basic" ], [ "XNOr", "de.neemann.digital.core.basic" ], [ "XOr", "de.neemann.digital.core.basic" ], [ "Not", "de.neemann.digital.core.basic" ], [ "NAnd", "de.neemann.digital.core.basic" ], [ "Function", "de.neemann.digital.core.basic" ], [ "Or", "de.neemann.digital.core.basic" ], [ "ExceptionWithOriginInterface", "de.neemann.digital.core" ], [ "ModelEvent", "de.neemann.digital.core" ], [ "BacktrackException", "de.neemann.digital.core" ], [ "PlainSwitch", "de.neemann.digital.core.switching" ], [ "FGPFET", "de.neemann.digital.core.switching" ], [ "NFET", "de.neemann.digital.core.switching" ], [ "FGNFET", "de.neemann.digital.core.switching" ], [ "PFET", "de.neemann.digital.core.switching" ], [ "PlainSwitchDT", "de.neemann.digital.core.switching" ], [ "TransGate", "de.neemann.digital.core.switching" ], [ "SwitchDT", "de.neemann.digital.core.switching" ], [ "Relay", "de.neemann.digital.core.switching" ], [ "RelayDT", "de.neemann.digital.core.switching" ], [ "Switch", "de.neemann.digital.core.switching" ], [ "Fuse", "de.neemann.digital.core.switching" ], [ "Reset", "de.neemann.digital.core.wiring" ], [ "Stop", "de.neemann.digital.core.wiring" ], [ "Decoder", "de.neemann.digital.core.wiring" ], [ "Delay", "de.neemann.digital.core.wiring" ], [ "Driver", "de.neemann.digital.core.wiring" ], [ "DataBus", "de.neemann.digital.core.wiring.bus" ], [ "SingleBusHandler", "de.neemann.digital.core.wiring.bus" ], [ "ConnectedBusHandler", "de.neemann.digital.core.wiring.bus" ], [ "AbstractBusHandler", "de.neemann.digital.core.wiring.bus" ], [ "BusModelStateObserver", "de.neemann.digital.core.wiring.bus" ], [ "CommonBusValue", "de.neemann.digital.core.wiring.bus" ], [ "DriverInvSel", "de.neemann.digital.core.wiring" ], [ "PriorityEncoder", "de.neemann.digital.core.wiring" ], [ "BusSplitter", "de.neemann.digital.core.wiring" ], [ "Splitter", "de.neemann.digital.core.wiring" ], [ "Multiplexer", "de.neemann.digital.core.wiring" ], [ "BitSelector", "de.neemann.digital.core.wiring" ], [ "Break", "de.neemann.digital.core.wiring" ], [ "Clock", "de.neemann.digital.core.wiring" ], [ "AsyncSeq", "de.neemann.digital.core.wiring" ], [ "Demultiplexer", "de.neemann.digital.core.wiring" ], [ "BitsException", "de.neemann.digital.core" ], [ "NodeInterface", "de.neemann.digital.core" ], [ "NodeException", "de.neemann.digital.core" ], [ "FlipflopDAsync", "de.neemann.digital.core.flipflops" ], [ "FlipflopD", "de.neemann.digital.core.flipflops" ], [ "FlipflopRSAsync", "de.neemann.digital.core.flipflops" ], [ "FlipflopT", "de.neemann.digital.core.flipflops" ], [ "FlipflopJKAsync", "de.neemann.digital.core.flipflops" ], [ "FlipflopJK", "de.neemann.digital.core.flipflops" ], [ "Monoflop", "de.neemann.digital.core.flipflops" ], [ "FlipflopRS", "de.neemann.digital.core.flipflops" ], [ "FlipflopBit", "de.neemann.digital.core.flipflops" ], [ "BarrelShifter", "de.neemann.digital.core.arithmetic" ], [ "Mul", "de.neemann.digital.core.arithmetic" ], [ "Neg", "de.neemann.digital.core.arithmetic" ], [ "BitExtender", "de.neemann.digital.core.arithmetic" ], [ "Add", "de.neemann.digital.core.arithmetic" ], [ "Div", "de.neemann.digital.core.arithmetic" ], [ "LeftRightFormat", "de.neemann.digital.core.arithmetic" ], [ "PRNG", "de.neemann.digital.core.arithmetic" ], [ "Sub", "de.neemann.digital.core.arithmetic" ], [ "BarrelShifterMode", "de.neemann.digital.core.arithmetic" ], [ "Comparator", "de.neemann.digital.core.arithmetic" ], [ "BitCount", "de.neemann.digital.core.arithmetic" ], [ "ObservableValues", "de.neemann.digital.core" ], [ "Value", "de.neemann.digital.core" ], [ "IntFormat", "de.neemann.digital.core" ], [ "SyncAccess", "de.neemann.digital.core" ], [ "Bits", "de.neemann.digital.core" ], [ "ProcessInterface", "de.neemann.digital.core.extern.handler" ], [ "StdIOInterface", "de.neemann.digital.core.extern.handler" ], [ "ApplicationVerilogStdIO", "de.neemann.digital.core.extern" ], [ "Application", "de.neemann.digital.core.extern" ], [ "External", "de.neemann.digital.core.extern" ], [ "Port", "de.neemann.digital.core.extern" ], [ "PortDefinition", "de.neemann.digital.core.extern" ], [ "ApplicationGHDL", "de.neemann.digital.core.extern" ], [ "ApplicationIVerilog", "de.neemann.digital.core.extern" ], [ "ApplicationVHDLStdIO", "de.neemann.digital.core.extern" ], [ "VHDLTokenizer", "de.neemann.digital.core.extern" ], [ "ApplicationGeneric", "de.neemann.digital.core.extern" ], [ "Options", "de.neemann.digital.core.extern" ], [ "VerilogTokenizer", "de.neemann.digital.core.extern" ], [ "ExternalFile", "de.neemann.digital.core.extern" ], [ "ProcessStarter", "de.neemann.digital.core.extern" ], [ "ModelEventType", "de.neemann.digital.core" ], [ "Observer", "de.neemann.digital.core" ], [ "ErrorDetector", "de.neemann.digital.core" ], [ "Statistics", "de.neemann.digital.core.stats" ], [ "Countable", "de.neemann.digital.core.stats" ], [ "Model", "de.neemann.digital.core" ], [ "Signal", "de.neemann.digital.core" ], [ "StringList", "de.neemann.digital" ], [ "XStreamValid", "de.neemann.digital" ], [ "StatsExport", "de.neemann.digital.cli" ], [ "SVGExport", "de.neemann.digital.cli" ], [ "CommandLineTester", "de.neemann.digital.cli" ], [ "CSVWriter", "de.neemann.digital.cli" ], [ "BasicCommand", "de.neemann.digital.cli.cli" ], [ "Argument", "de.neemann.digital.cli.cli" ], [ "CLIException", "de.neemann.digital.cli.cli" ], [ "Muxer", "de.neemann.digital.cli.cli" ], [ "ArgumentKey", "de.neemann.digital.cli.cli" ], [ "NamedCommand", "de.neemann.digital.cli.cli" ], [ "CLICommand", "de.neemann.digital.cli.cli" ], [ "ArgumentBase", "de.neemann.digital.cli.cli" ], [ "CircuitLoader", "de.neemann.digital.cli" ], [ "Main", "de.neemann.digital.cli" ], [ "Modification", "de.neemann.digital.undo" ], [ "Modifications", "de.neemann.digital.undo" ], [ "ModifyException", "de.neemann.digital.undo" ], [ "Copyable", "de.neemann.digital.undo" ], [ "UndoManager", "de.neemann.digital.undo" ], [ "ChangedListener", "de.neemann.digital.undo" ], [ "CircuitRepresentation", "de.neemann.digital.fsm" ], [ "Transition", "de.neemann.digital.fsm" ], [ "Movable", "de.neemann.digital.fsm" ], [ "MouseMovable", "de.neemann.digital.fsm" ], [ "Optimizer", "de.neemann.digital.fsm" ], [ "Permute", "de.neemann.digital.fsm" ], [ "FiniteStateMachineException", "de.neemann.digital.fsm" ], [ "TransitionTableCreator", "de.neemann.digital.fsm" ], [ "ValueParser", "de.neemann.digital.fsm" ], [ "WaitGroup", "de.neemann.digital.fsm" ], [ "FSMComponent", "de.neemann.digital.fsm.gui" ], [ "FSMFrame", "de.neemann.digital.fsm.gui" ], [ "OptimizerDialog", "de.neemann.digital.fsm.gui" ], [ "FSMDemos", "de.neemann.digital.fsm" ], [ "FSM", "de.neemann.digital.fsm" ], [ "State", "de.neemann.digital.fsm" ], [ "Lang", "de.neemann.digital.lang" ], [ "LineListenerResolveDontCare", "de.neemann.digital.testing" ], [ "TestingDataException", "de.neemann.digital.testing" ], [ "UnitTester", "de.neemann.digital.testing" ], [ "FolderTestRunner", "de.neemann.digital.testing" ], [ "TestExecutor", "de.neemann.digital.testing" ], [ "Transitions", "de.neemann.digital.testing" ], [ "TestCaseDescription", "de.neemann.digital.testing" ], [ "TestCaseElement", "de.neemann.digital.testing" ], [ "LineEmitterRepeat", "de.neemann.digital.testing.parser" ], [ "Parser", "de.neemann.digital.testing.parser" ], [ "ValueAppenderBits", "de.neemann.digital.testing.parser" ], [ "ParserException", "de.neemann.digital.testing.parser" ], [ "Context", "de.neemann.digital.testing.parser" ], [ "ModelInitializer", "de.neemann.digital.testing.parser" ], [ "Expression", "de.neemann.digital.testing.parser" ], [ "LineEmitterList", "de.neemann.digital.testing.parser" ], [ "TestRow", "de.neemann.digital.testing.parser" ], [ "LineEmitter", "de.neemann.digital.testing.parser" ], [ "LineEmitterWhile", "de.neemann.digital.testing.parser" ], [ "Tokenizer", "de.neemann.digital.testing.parser" ], [ "LineEmitterSimple", "de.neemann.digital.testing.parser" ], [ "Random", "de.neemann.digital.testing.parser.functions" ], [ "SignExtend", "de.neemann.digital.testing.parser.functions" ], [ "IfThenElse", "de.neemann.digital.testing.parser.functions" ], [ "Function", "de.neemann.digital.testing.parser.functions" ], [ "LineListener", "de.neemann.digital.testing.parser" ], [ "VirtualSignal", "de.neemann.digital.testing.parser" ], [ "ValueAppender", "de.neemann.digital.testing.parser" ], [ "OperatorPrecedence", "de.neemann.digital.testing.parser" ], [ "TestResultListener", "de.neemann.digital.testing" ], [ "MatchedValue", "de.neemann.digital.testing" ], [ "TestResult", "de.neemann.digital.testing" ], [ "MinimizerInterface", "de.neemann.digital.analyse" ], [ "LabelNumbering", "de.neemann.digital.analyse" ], [ "ModelAnalyser", "de.neemann.digital.analyse" ], [ "CSVImporter", "de.neemann.digital.analyse" ], [ "BoolTableExpanded", "de.neemann.digital.analyse" ], [ "TruthTableTableModel", "de.neemann.digital.analyse" ], [ "TableReducer", "de.neemann.digital.analyse.quinemc" ], [ "PrimeSelector", "de.neemann.digital.analyse.quinemc.primeselector" ], [ "BruteForce", "de.neemann.digital.analyse.quinemc.primeselector" ], [ "LargestFirst", "de.neemann.digital.analyse.quinemc.primeselector" ], [ "BruteForceGetAll", "de.neemann.digital.analyse.quinemc.primeselector" ], [ "PrimeSelectorDefault", "de.neemann.digital.analyse.quinemc.primeselector" ], [ "BoolTableByteArray", "de.neemann.digital.analyse.quinemc" ], [ "IndependentChecker", "de.neemann.digital.analyse.quinemc" ], [ "QuineMcCluskey", "de.neemann.digital.analyse.quinemc" ], [ "BoolTableExpression", "de.neemann.digital.analyse.quinemc" ], [ "BoolTableBoolArray", "de.neemann.digital.analyse.quinemc" ], [ "BoolTable", "de.neemann.digital.analyse.quinemc" ], [ "TableRows", "de.neemann.digital.analyse.quinemc" ], [ "ThreeStateValue", "de.neemann.digital.analyse.quinemc" ], [ "QuineMcCluskeyExam", "de.neemann.digital.analyse.quinemc" ], [ "TableRow", "de.neemann.digital.analyse.quinemc" ], [ "TruthTableConverter", "de.neemann.digital.analyse" ], [ "DetermineJKStateMachine", "de.neemann.digital.analyse" ], [ "Parser", "de.neemann.digital.analyse.parser" ], [ "ParseException", "de.neemann.digital.analyse.parser" ], [ "Tokenizer", "de.neemann.digital.analyse.parser" ], [ "ModelAnalyserInfo", "de.neemann.digital.analyse" ], [ "AnalyseException", "de.neemann.digital.analyse" ], [ "DependencyAnalyser", "de.neemann.digital.analyse" ], [ "SubstituteLibrary", "de.neemann.digital.analyse" ], [ "TruthTableFormatterHex", "de.neemann.digital.analyse.format" ], [ "TruthTableFormatter", "de.neemann.digital.analyse.format" ], [ "TruthTableFormatterTestCase", "de.neemann.digital.analyse.format" ], [ "TruthTableFormatterCSV", "de.neemann.digital.analyse.format" ], [ "TruthTableFormatterLaTeX", "de.neemann.digital.analyse.format" ], [ "MinimizerQuineMcCluskey", "de.neemann.digital.analyse" ], [ "ContextFiller", "de.neemann.digital.analyse.expression" ], [ "BitSetter", "de.neemann.digital.analyse.expression" ], [ "ExpressionVisitor", "de.neemann.digital.analyse.expression" ], [ "ContextMap", "de.neemann.digital.analyse.expression" ], [ "ComplexityVisitor", "de.neemann.digital.analyse.expression" ], [ "Operation", "de.neemann.digital.analyse.expression" ], [ "Context", "de.neemann.digital.analyse.expression" ], [ "NInputs", "de.neemann.digital.analyse.expression.modify" ], [ "NOr", "de.neemann.digital.analyse.expression.modify" ], [ "ExpressionModifier", "de.neemann.digital.analyse.expression.modify" ], [ "NAnd", "de.neemann.digital.analyse.expression.modify" ], [ "Constant", "de.neemann.digital.analyse.expression" ], [ "Expression", "de.neemann.digital.analyse.expression" ], [ "Variable", "de.neemann.digital.analyse.expression" ], [ "ExpressionException", "de.neemann.digital.analyse.expression" ], [ "ComplexityInclNotVisitor", "de.neemann.digital.analyse.expression" ], [ "Equals", "de.neemann.digital.analyse.expression" ], [ "FormatToExpression", "de.neemann.digital.analyse.expression.format" ], [ "FormatToTable", "de.neemann.digital.analyse.expression.format" ], [ "Formatter", "de.neemann.digital.analyse.expression.format" ], [ "FormatterException", "de.neemann.digital.analyse.expression.format" ], [ "FormatToTableLatex", "de.neemann.digital.analyse.expression.format" ], [ "Not", "de.neemann.digital.analyse.expression" ], [ "VariableVisitor", "de.neemann.digital.analyse.expression" ], [ "NamedExpression", "de.neemann.digital.analyse.expression" ], [ "MinimizerQuineMcCluskeyExam", "de.neemann.digital.analyse" ], [ "TruthTable", "de.neemann.digital.analyse" ], [ "SplitPinString", "de.neemann.digital.analyse" ], [ "CycleDetector", "de.neemann.digital.analyse" ], [ "DigitalRemoteInterface", "de.neemann.digital.gui" ], [ "TextSearchFilter", "de.neemann.digital.gui" ], [ "ExportZipAction", "de.neemann.digital.gui" ], [ "SettingsBase", "de.neemann.digital.gui" ], [ "DocumentationLocator", "de.neemann.digital.gui" ], [ "InitialTutorial", "de.neemann.digital.gui.tutorial" ], [ "InsertAction", "de.neemann.digital.gui" ], [ "StatusInterface", "de.neemann.digital.gui" ], [ "SearchTextField", "de.neemann.digital.gui" ], [ "SaveAsHelper", "de.neemann.digital.gui" ], [ "FileHistory", "de.neemann.digital.gui" ], [ "ReleaseInfo", "de.neemann.digital.gui.release" ], [ "CheckForNewRelease", "de.neemann.digital.gui.release" ], [ "StateInterface", "de.neemann.digital.gui.state" ], [ "StateManager", "de.neemann.digital.gui.state" ], [ "State", "de.neemann.digital.gui.state" ], [ "CircuitScrollPanel", "de.neemann.digital.gui.components" ], [ "ItemPicker", "de.neemann.digital.gui.components" ], [ "LibraryTreeModel", "de.neemann.digital.gui.components.tree" ], [ "SelectTree", "de.neemann.digital.gui.components.tree" ], [ "WindowPosManager", "de.neemann.digital.gui.components" ], [ "CustomShapeEditor", "de.neemann.digital.gui.components" ], [ "TransformHolder", "de.neemann.digital.gui.components" ], [ "EditorPanel", "de.neemann.digital.gui.components" ], [ "BehavioralFixtureCreator", "de.neemann.digital.gui.components" ], [ "EditorFactory", "de.neemann.digital.gui.components" ], [ "OrderMerger", "de.neemann.digital.gui.components" ], [ "ElementOrderer", "de.neemann.digital.gui.components" ], [ "ModifyMoveSelected", "de.neemann.digital.gui.components.modification" ], [ "ModifyMoveWire", "de.neemann.digital.gui.components.modification" ], [ "ModificationOfWire", "de.neemann.digital.gui.components.modification" ], [ "ModifyDeleteRect", "de.neemann.digital.gui.components.modification" ], [ "ModifyInsertWires", "de.neemann.digital.gui.components.modification" ], [ "ModifyInsertWire", "de.neemann.digital.gui.components.modification" ], [ "ModificationOfVisualElement", "de.neemann.digital.gui.components.modification" ], [ "ModifyCircuitAttributes", "de.neemann.digital.gui.components.modification" ], [ "ModifyDeleteWire", "de.neemann.digital.gui.components.modification" ], [ "ModifyMoveAndRotElement", "de.neemann.digital.gui.components.modification" ], [ "ModifyMeasurementOrdering", "de.neemann.digital.gui.components.modification" ], [ "ModifyDeleteElement", "de.neemann.digital.gui.components.modification" ], [ "ModifyAttribute", "de.neemann.digital.gui.components.modification" ], [ "ModifyAttributes", "de.neemann.digital.gui.components.modification" ], [ "ModifyInsertElement", "de.neemann.digital.gui.components.modification" ], [ "DataEditor", "de.neemann.digital.gui.components" ], [ "CircuitModifierPostClosed", "de.neemann.digital.gui.components" ], [ "CharDeleter", "de.neemann.digital.gui.components.terminal" ], [ "ConsoleTerminal", "de.neemann.digital.gui.components.terminal" ], [ "Terminal", "de.neemann.digital.gui.components.terminal" ], [ "TerminalDialog", "de.neemann.digital.gui.components.terminal" ], [ "TerminalInterface", "de.neemann.digital.gui.components.terminal" ], [ "Keyboard", "de.neemann.digital.gui.components.terminal" ], [ "KeyboardDialog", "de.neemann.digital.gui.components.terminal" ], [ "Editor", "de.neemann.digital.gui.components" ], [ "VarRectList", "de.neemann.digital.gui.components.karnaugh" ], [ "KarnaughMap", "de.neemann.digital.gui.components.karnaugh" ], [ "KarnaughMapComponent", "de.neemann.digital.gui.components.karnaugh" ], [ "KarnaughMapDialog", "de.neemann.digital.gui.components.karnaugh" ], [ "MapLayout", "de.neemann.digital.gui.components.karnaugh" ], [ "KarnaughException", "de.neemann.digital.gui.components.karnaugh" ], [ "CircuitTransferable", "de.neemann.digital.gui.components" ], [ "ElementHelpDialog", "de.neemann.digital.gui.components" ], [ "TestCaseDescriptionDialog", "de.neemann.digital.gui.components.testing" ], [ "ValueTableDialog", "de.neemann.digital.gui.components.testing" ], [ "TestCaseDescriptionEditor", "de.neemann.digital.gui.components.testing" ], [ "TestAllDialog", "de.neemann.digital.gui.components.testing" ], [ "ExpressionListenerOptimizeJK", "de.neemann.digital.gui.components.table" ], [ "LaTeXExpressionListener", "de.neemann.digital.gui.components.table" ], [ "HardwareDescriptionGenerator", "de.neemann.digital.gui.components.table.hardware" ], [ "GenerateFile", "de.neemann.digital.gui.components.table.hardware" ], [ "GenerateCUPL", "de.neemann.digital.gui.components.table.hardware" ], [ "ExpressionListener", "de.neemann.digital.gui.components.table" ], [ "ReorderOutputs", "de.neemann.digital.gui.components.table" ], [ "AllSolutionsDialog", "de.neemann.digital.gui.components.table" ], [ "ExpressionListenerJK", "de.neemann.digital.gui.components.table" ], [ "ExpressionListenerCSVCondensed", "de.neemann.digital.gui.components.table" ], [ "ExpressionCreator", "de.neemann.digital.gui.components.table" ], [ "TableDialog", "de.neemann.digital.gui.components.table" ], [ "BuilderExpressionCreator", "de.neemann.digital.gui.components.table" ], [ "ExpressionComponent", "de.neemann.digital.gui.components.table" ], [ "PlainTextExpressionListener", "de.neemann.digital.gui.components.table" ], [ "TableReorderManager", "de.neemann.digital.gui.components.table" ], [ "ShowStringDialog", "de.neemann.digital.gui.components.table" ], [ "ReorderInputs", "de.neemann.digital.gui.components.table" ], [ "ProgressDialog", "de.neemann.digital.gui.components.table" ], [ "CheckResultListener", "de.neemann.digital.gui.components.table" ], [ "ExpressionListenerStore", "de.neemann.digital.gui.components.table" ], [ "AttributeDialog", "de.neemann.digital.gui.components" ], [ "ProbeDialog", "de.neemann.digital.gui.components" ], [ "ColorSchemeEditor", "de.neemann.digital.gui.components" ], [ "ROMEditorDialog", "de.neemann.digital.gui.components" ], [ "LabelGenerator", "de.neemann.digital.gui.components" ], [ "SingleValueDialog", "de.neemann.digital.gui.components" ], [ "ExpressionDialog", "de.neemann.digital.gui.components.expression" ], [ "CircuitComponent", "de.neemann.digital.gui.components" ], [ "VGA", "de.neemann.digital.gui.components.graphics" ], [ "GraphicCard", "de.neemann.digital.gui.components.graphics" ], [ "LedMatrix", "de.neemann.digital.gui.components.graphics" ], [ "VGADialog", "de.neemann.digital.gui.components.graphics" ], [ "MoveFocusTo", "de.neemann.digital.gui.components.graphics" ], [ "LedMatrixComponent", "de.neemann.digital.gui.components.graphics" ], [ "GraphicDialog", "de.neemann.digital.gui.components.graphics" ], [ "GraphicComponent", "de.neemann.digital.gui.components.graphics" ], [ "LedMatrixDialog", "de.neemann.digital.gui.components.graphics" ], [ "ConstraintsBuilder", "de.neemann.digital.gui.components" ], [ "ScopeTrigger", "de.neemann.digital.gui.components.data" ], [ "GraphDialog", "de.neemann.digital.gui.components.data" ], [ "GraphComponent", "de.neemann.digital.gui.components.data" ], [ "DummyElement", "de.neemann.digital.gui.components.data" ], [ "ValueTableObserver", "de.neemann.digital.gui.components.data" ], [ "CircuitModifier", "de.neemann.digital.gui.components" ], [ "CopiedElementLabelRenamer", "de.neemann.digital.gui.components" ], [ "TextLineNumber", "de.neemann.digital.gui.components" ], [ "InsertHistory", "de.neemann.digital.gui" ], [ "ProgramMemoryLoader", "de.neemann.digital.gui" ], [ "Main", "de.neemann.digital.gui" ], [ "StatsDialog", "de.neemann.digital.gui" ], [ "WindowManager", "de.neemann.digital.gui" ], [ "Settings", "de.neemann.digital.gui" ], [ "LibrarySelector", "de.neemann.digital.gui" ], [ "DigitalUncaughtExceptionHandler", "de.neemann.digital.gui" ], [ "NumberingWizard", "de.neemann.digital.gui" ], [ "HandlerInterface", "de.neemann.digital.gui.remote" ], [ "RemoteSever", "de.neemann.digital.gui.remote" ], [ "RemoteException", "de.neemann.digital.gui.remote" ], [ "DigitalHandler", "de.neemann.digital.gui.remote" ], [ "ModelModifier", "de.neemann.digital.gui" ], [ "VerilogCreator", "de.neemann.digital.hdl.verilog2" ], [ "VerilogRenaming", "de.neemann.digital.hdl.verilog2" ], [ "VerilogGenerator", "de.neemann.digital.hdl.verilog2" ], [ "VerilogTestBenchCreator", "de.neemann.digital.hdl.verilog2" ], [ "VerilogElement", "de.neemann.digital.hdl.verilog2.lib" ], [ "VerilogTemplate", "de.neemann.digital.hdl.verilog2.lib" ], [ "VerilogLibrary", "de.neemann.digital.hdl.verilog2" ], [ "CodePrinter", "de.neemann.digital.hdl.printer" ], [ "CodePrinterStr", "de.neemann.digital.hdl.printer" ], [ "Statements", "de.neemann.digital.hdl.hgs" ], [ "Parser", "de.neemann.digital.hdl.hgs" ], [ "ParserException", "de.neemann.digital.hdl.hgs" ], [ "Statement", "de.neemann.digital.hdl.hgs" ], [ "Context", "de.neemann.digital.hdl.hgs" ], [ "FirstClassFunctionCall", "de.neemann.digital.hdl.hgs.function" ], [ "InnerFunction", "de.neemann.digital.hdl.hgs.function" ], [ "JavaClass", "de.neemann.digital.hdl.hgs.function" ], [ "FirstClassFunction", "de.neemann.digital.hdl.hgs.function" ], [ "Func", "de.neemann.digital.hdl.hgs.function" ], [ "Function", "de.neemann.digital.hdl.hgs.function" ], [ "Expression", "de.neemann.digital.hdl.hgs" ], [ "HGSEvalException", "de.neemann.digital.hdl.hgs" ], [ "Tokenizer", "de.neemann.digital.hdl.hgs" ], [ "ReferenceToFunc", "de.neemann.digital.hdl.hgs.refs" ], [ "ReferenceToStruct", "de.neemann.digital.hdl.hgs.refs" ], [ "ReferenceToArray", "de.neemann.digital.hdl.hgs.refs" ], [ "Reference", "de.neemann.digital.hdl.hgs.refs" ], [ "ReferenceToVar", "de.neemann.digital.hdl.hgs.refs" ], [ "Value", "de.neemann.digital.hdl.hgs" ], [ "HGSMap", "de.neemann.digital.hdl.hgs" ], [ "HGSArray", "de.neemann.digital.hdl.hgs" ], [ "Separator", "de.neemann.digital.hdl.vhdl2" ], [ "VHDLLibrary", "de.neemann.digital.hdl.vhdl2" ], [ "VHDLCreator", "de.neemann.digital.hdl.vhdl2" ], [ "VHDLRenaming", "de.neemann.digital.hdl.vhdl2" ], [ "VHDLGenerator", "de.neemann.digital.hdl.vhdl2" ], [ "VHDLEntity", "de.neemann.digital.hdl.vhdl2.entities" ], [ "VHDLTemplate", "de.neemann.digital.hdl.vhdl2.entities" ], [ "VHDLTemplateFunctions", "de.neemann.digital.hdl.vhdl2.entities" ], [ "VHDLTestBenchCreator", "de.neemann.digital.hdl.vhdl2" ], [ "HDLModel", "de.neemann.digital.hdl.model2" ], [ "HDLNode", "de.neemann.digital.hdl.model2" ], [ "HDLNet", "de.neemann.digital.hdl.model2" ], [ "Printable", "de.neemann.digital.hdl.model2" ], [ "HDLException", "de.neemann.digital.hdl.model2" ], [ "HDLPort", "de.neemann.digital.hdl.model2" ], [ "HasName", "de.neemann.digital.hdl.model2" ], [ "InlineManyToOne", "de.neemann.digital.hdl.model2.optimizations" ], [ "MergeAssignments", "de.neemann.digital.hdl.model2.optimizations" ], [ "Optimization", "de.neemann.digital.hdl.model2.optimizations" ], [ "MergeConstants", "de.neemann.digital.hdl.model2.optimizations" ], [ "ReplaceOneToMany", "de.neemann.digital.hdl.model2.optimizations" ], [ "NameConstantSignals", "de.neemann.digital.hdl.model2.optimizations" ], [ "OptimizeExpressions", "de.neemann.digital.hdl.model2.optimizations" ], [ "RemoveConstantSignals", "de.neemann.digital.hdl.model2.optimizations" ], [ "NodeSorterExpressionBased", "de.neemann.digital.hdl.model2.optimizations" ], [ "HDLNodeSplitterManyToOne", "de.neemann.digital.hdl.model2" ], [ "HDLNodeCustom", "de.neemann.digital.hdl.model2" ], [ "HDLNodeAssignment", "de.neemann.digital.hdl.model2" ], [ "HDLCircuit", "de.neemann.digital.hdl.model2" ], [ "ExprVar", "de.neemann.digital.hdl.model2.expression" ], [ "Visitor", "de.neemann.digital.hdl.model2.expression" ], [ "ExprVarRange", "de.neemann.digital.hdl.model2.expression" ], [ "Expression", "de.neemann.digital.hdl.model2.expression" ], [ "ExpressionOptimizer", "de.neemann.digital.hdl.model2.expression" ], [ "ExprNot", "de.neemann.digital.hdl.model2.expression" ], [ "ExprConstant", "de.neemann.digital.hdl.model2.expression" ], [ "ExprOperate", "de.neemann.digital.hdl.model2.expression" ], [ "ExprUsingNet", "de.neemann.digital.hdl.model2.expression" ], [ "HDLNodeBuildIn", "de.neemann.digital.hdl.model2" ], [ "HDLClockIntegrator", "de.neemann.digital.hdl.model2.clock" ], [ "ClockIntegratorGeneric", "de.neemann.digital.hdl.model2.clock" ], [ "ClockInfo", "de.neemann.digital.hdl.model2.clock" ], [ "HDLNodeSplitterOneToMany", "de.neemann.digital.hdl.model2" ], [ "FileLocator", "de.neemann.digital" ], [ "ValueTable", "de.neemann.digital.data" ], [ "ValueTableModel", "de.neemann.digital.data" ], [ "DataPlotter", "de.neemann.digital.data" ], [ "Value", "de.neemann.digital.data" ], [ "ExpressionExporter", "de.neemann.digital.builder" ], [ "ExpressionToFileExporter", "de.neemann.digital.builder" ], [ "RotationByteArrayOutputStream", "de.neemann.digital.builder.tt2" ], [ "TT2Exporter", "de.neemann.digital.builder.tt2" ], [ "StartATF150xFitter", "de.neemann.digital.builder.tt2" ], [ "OSExecute", "de.neemann.digital.builder.tt2" ], [ "CreateCHN", "de.neemann.digital.builder.ATF150x" ], [ "ATFDevice", "de.neemann.digital.builder.ATF150x" ], [ "ATFDialog", "de.neemann.digital.builder.ATF150x" ], [ "PL", "de.neemann.digital.builder.ATF150x" ], [ "ATF150xCuplExporter", "de.neemann.digital.builder.ATF150x" ], [ "PinMap", "de.neemann.digital.builder" ], [ "PinMapException", "de.neemann.digital.builder" ], [ "FragmentExpression", "de.neemann.digital.builder.circuit" ], [ "FragmentVisualElement", "de.neemann.digital.builder.circuit" ], [ "FragmentSameInValue", "de.neemann.digital.builder.circuit" ], [ "CircuitBuilder", "de.neemann.digital.builder.circuit" ], [ "FragmentVisitor", "de.neemann.digital.builder.circuit" ], [ "FragmentVariable", "de.neemann.digital.builder.circuit" ], [ "Fragment", "de.neemann.digital.builder.circuit" ], [ "Box", "de.neemann.digital.builder.circuit" ], [ "Gal16v8JEDECExporter", "de.neemann.digital.builder.Gal16v8" ], [ "CuplExporter", "de.neemann.digital.builder.Gal16v8" ], [ "BuilderCollectorGAL", "de.neemann.digital.builder.Gal16v8" ], [ "CleanNameBuilder", "de.neemann.digital.builder" ], [ "BuilderCollector", "de.neemann.digital.builder" ], [ "BuilderInterface", "de.neemann.digital.builder" ], [ "BuilderException", "de.neemann.digital.builder" ], [ "Gal22v10JEDECExporter", "de.neemann.digital.builder.Gal22v10" ], [ "Gal22v10CuplExporter", "de.neemann.digital.builder.Gal22v10" ], [ "FuseMap", "de.neemann.digital.builder.jedec" ], [ "FuseMapFillerException", "de.neemann.digital.builder.jedec" ], [ "FuseMapFiller", "de.neemann.digital.builder.jedec" ], [ "JedecWriter", "de.neemann.digital.builder.jedec" ], [ "GenericCode", "de.neemann.digital.draw.library" ], [ "ElementLibrary", "de.neemann.digital.draw.library" ], [ "GenericInitCode", "de.neemann.digital.draw.library" ], [ "Visitor", "de.neemann.digital.draw.library" ], [ "ComponentManager", "de.neemann.digital.draw.library" ], [ "LibraryListener", "de.neemann.digital.draw.library" ], [ "JarComponentManager", "de.neemann.digital.draw.library" ], [ "ElementLibraryFolder", "de.neemann.digital.draw.library" ], [ "CustomElement", "de.neemann.digital.draw.library" ], [ "ElementNotFoundNotification", "de.neemann.digital.draw.library" ], [ "ElementNotFoundException", "de.neemann.digital.draw.library" ], [ "ComponentSource", "de.neemann.digital.draw.library" ], [ "LibraryInterface", "de.neemann.digital.draw.library" ], [ "ResolveGenerics", "de.neemann.digital.draw.library" ], [ "LibraryNode", "de.neemann.digital.draw.library" ], [ "ElementTypeDescriptionCustom", "de.neemann.digital.draw.library" ], [ "InvalidNodeException", "de.neemann.digital.draw.library" ], [ "NumStringComparator", "de.neemann.digital.draw.library" ], [ "InputShape", "de.neemann.digital.draw.shapes" ], [ "Interactor", "de.neemann.digital.draw.shapes" ], [ "ButtonShape", "de.neemann.digital.draw.shapes" ], [ "GenericShape", "de.neemann.digital.draw.shapes" ], [ "Drawable", "de.neemann.digital.draw.shapes" ], [ "DelayShape", "de.neemann.digital.draw.shapes" ], [ "DiodeBackwardShape", "de.neemann.digital.draw.shapes" ], [ "FuseShape", "de.neemann.digital.draw.shapes" ], [ "FETShapeP", "de.neemann.digital.draw.shapes" ], [ "DILShape", "de.neemann.digital.draw.shapes" ], [ "DipSwitchShape", "de.neemann.digital.draw.shapes" ], [ "SwitchShape", "de.neemann.digital.draw.shapes" ], [ "LightBulbShape", "de.neemann.digital.draw.shapes" ], [ "LayoutShape", "de.neemann.digital.draw.shapes" ], [ "SplitterShape", "de.neemann.digital.draw.shapes" ], [ "PolarityAwareLEDShape", "de.neemann.digital.draw.shapes" ], [ "ButtonLEDShape", "de.neemann.digital.draw.shapes" ], [ "RelayShape", "de.neemann.digital.draw.shapes" ], [ "ConstShape", "de.neemann.digital.draw.shapes" ], [ "BreakShape", "de.neemann.digital.draw.shapes" ], [ "GenericCodeShape", "de.neemann.digital.draw.shapes" ], [ "TextShape", "de.neemann.digital.draw.shapes" ], [ "SevenSegHexShape", "de.neemann.digital.draw.shapes" ], [ "ProbeShape", "de.neemann.digital.draw.shapes" ], [ "NotConnectedShape", "de.neemann.digital.draw.shapes" ], [ "StepperMotorShape", "de.neemann.digital.draw.shapes" ], [ "FETShape", "de.neemann.digital.draw.shapes" ], [ "BitSelShape", "de.neemann.digital.draw.shapes" ], [ "SevenSegShape", "de.neemann.digital.draw.shapes" ], [ "GenericInitCodeShape", "de.neemann.digital.draw.shapes" ], [ "RelayDTShape", "de.neemann.digital.draw.shapes" ], [ "RectShape", "de.neemann.digital.draw.shapes" ], [ "VDDShape", "de.neemann.digital.draw.shapes" ], [ "RAMShape", "de.neemann.digital.draw.shapes" ], [ "ScopeShape", "de.neemann.digital.draw.shapes" ], [ "DemuxerShape", "de.neemann.digital.draw.shapes" ], [ "FETShapeN", "de.neemann.digital.draw.shapes" ], [ "BusSplitterShape", "de.neemann.digital.draw.shapes" ], [ "PullUpShape", "de.neemann.digital.draw.shapes" ], [ "TestCaseShape", "de.neemann.digital.draw.shapes" ], [ "TunnelShape", "de.neemann.digital.draw.shapes" ], [ "MuxerShape", "de.neemann.digital.draw.shapes" ], [ "SwitchDTShape", "de.neemann.digital.draw.shapes" ], [ "PinControlShape", "de.neemann.digital.draw.shapes" ], [ "FGFETShapeN", "de.neemann.digital.draw.shapes" ], [ "TransGateShape", "de.neemann.digital.draw.shapes" ], [ "DiodeShape", "de.neemann.digital.draw.shapes" ], [ "ResetShape", "de.neemann.digital.draw.shapes" ], [ "DiodeForewardShape", "de.neemann.digital.draw.shapes" ], [ "SixteenShape", "de.neemann.digital.draw.shapes" ], [ "CustomCircuitShapeType", "de.neemann.digital.draw.shapes" ], [ "InteractorInterface", "de.neemann.digital.draw.shapes" ], [ "ShapeSpecificMatch", "de.neemann.digital.draw.shapes" ], [ "LEDShape", "de.neemann.digital.draw.shapes" ], [ "ClockShape", "de.neemann.digital.draw.shapes" ], [ "RGBLEDShape", "de.neemann.digital.draw.shapes" ], [ "RotEncoderShape", "de.neemann.digital.draw.shapes" ], [ "IEEEGenericShape", "de.neemann.digital.draw.shapes.ieee" ], [ "IEEEOrShape", "de.neemann.digital.draw.shapes.ieee" ], [ "IEEENotShape", "de.neemann.digital.draw.shapes.ieee" ], [ "IEEEAndShape", "de.neemann.digital.draw.shapes.ieee" ], [ "IEEEXOrShape", "de.neemann.digital.draw.shapes.ieee" ], [ "ObservableValueReader", "de.neemann.digital.draw.shapes" ], [ "SvgTemplate", "de.neemann.digital.draw.shapes.custom.svg" ], [ "TransformParser", "de.neemann.digital.draw.shapes.custom.svg" ], [ "Context", "de.neemann.digital.draw.shapes.custom.svg" ], [ "SvgException", "de.neemann.digital.draw.shapes.custom.svg" ], [ "SvgImporter", "de.neemann.digital.draw.shapes.custom.svg" ], [ "CustomShapeDescription", "de.neemann.digital.draw.shapes.custom" ], [ "CustomShape", "de.neemann.digital.draw.shapes.custom" ], [ "FGFETShapeP", "de.neemann.digital.draw.shapes" ], [ "OutputShape", "de.neemann.digital.draw.shapes" ], [ "GroundShape", "de.neemann.digital.draw.shapes" ], [ "AsyncClockShape", "de.neemann.digital.draw.shapes" ], [ "Shape", "de.neemann.digital.draw.shapes" ], [ "MissingShape", "de.neemann.digital.draw.shapes" ], [ "ShapeFactory", "de.neemann.digital.draw.shapes" ], [ "PullDownShape", "de.neemann.digital.draw.shapes" ], [ "DriverShape", "de.neemann.digital.draw.shapes" ], [ "SevenShape", "de.neemann.digital.draw.shapes" ], [ "DataShape", "de.neemann.digital.draw.shapes" ], [ "DotCreator", "de.neemann.digital.draw.elements" ], [ "Wire", "de.neemann.digital.draw.elements" ], [ "Movable", "de.neemann.digital.draw.elements" ], [ "Pins", "de.neemann.digital.draw.elements" ], [ "Circuit", "de.neemann.digital.draw.elements" ], [ "Tunnel", "de.neemann.digital.draw.elements" ], [ "PinException", "de.neemann.digital.draw.elements" ], [ "ElementOrder", "de.neemann.digital.draw.elements" ], [ "VisualElement", "de.neemann.digital.draw.elements" ], [ "Pin", "de.neemann.digital.draw.elements" ], [ "IOState", "de.neemann.digital.draw.elements" ], [ "WireMerger", "de.neemann.digital.draw.elements" ], [ "WireConsistencyChecker", "de.neemann.digital.draw.elements" ], [ "AsyncSequentialClock", "de.neemann.digital.draw.model" ], [ "ModelEntry", "de.neemann.digital.draw.model" ], [ "Net", "de.neemann.digital.draw.model" ], [ "ModelCreator", "de.neemann.digital.draw.model" ], [ "InverterConfig", "de.neemann.digital.draw.model" ], [ "NetList", "de.neemann.digital.draw.model" ], [ "RealTimeClock", "de.neemann.digital.draw.model" ], [ "Polygon", "de.neemann.digital.draw.graphics" ], [ "Orientation", "de.neemann.digital.draw.graphics" ], [ "Vector", "de.neemann.digital.draw.graphics" ], [ "SVGSettings", "de.neemann.digital.draw.graphics" ], [ "Transform", "de.neemann.digital.draw.graphics" ], [ "ColorKey", "de.neemann.digital.draw.graphics" ], [ "ExportFactory", "de.neemann.digital.draw.graphics" ], [ "GraphicsImage", "de.neemann.digital.draw.graphics" ], [ "VectorInterface", "de.neemann.digital.draw.graphics" ], [ "TextFormatSVG", "de.neemann.digital.draw.graphics" ], [ "TransformMatrix", "de.neemann.digital.draw.graphics" ], [ "TextFormatLaTeX", "de.neemann.digital.draw.graphics" ], [ "GraphicMinMax", "de.neemann.digital.draw.graphics" ], [ "GraphicTransform", "de.neemann.digital.draw.graphics" ], [ "ColorScheme", "de.neemann.digital.draw.graphics" ], [ "Style", "de.neemann.digital.draw.graphics" ], [ "GraphicSkipLines", "de.neemann.digital.draw.graphics.linemerger" ], [ "GraphicLineCollector", "de.neemann.digital.draw.graphics.linemerger" ], [ "PolygonConverter", "de.neemann.digital.draw.graphics" ], [ "VectorFloat", "de.neemann.digital.draw.graphics" ], [ "TransformRotate", "de.neemann.digital.draw.graphics" ], [ "Graphic", "de.neemann.digital.draw.graphics" ], [ "ColorStyleHighContrast", "de.neemann.digital.draw.graphics" ], [ "Parser", "de.neemann.digital.draw.graphics.text" ], [ "ParseException", "de.neemann.digital.draw.graphics.text" ], [ "PlainTextFormatter", "de.neemann.digital.draw.graphics.text.formatter" ], [ "SVGFormatter", "de.neemann.digital.draw.graphics.text.formatter" ], [ "GraphicsFormatter", "de.neemann.digital.draw.graphics.text.formatter" ], [ "LaTeXFormatter", "de.neemann.digital.draw.graphics.text.formatter" ], [ "Decorate", "de.neemann.digital.draw.graphics.text.text" ], [ "Text", "de.neemann.digital.draw.graphics.text.text" ], [ "Index", "de.neemann.digital.draw.graphics.text.text" ], [ "Sentence", "de.neemann.digital.draw.graphics.text.text" ], [ "Blank", "de.neemann.digital.draw.graphics.text.text" ], [ "Character", "de.neemann.digital.draw.graphics.text.text" ], [ "ExpressionToText", "de.neemann.digital.draw.graphics.text.text" ], [ "Simple", "de.neemann.digital.draw.graphics.text.text" ], [ "Export", "de.neemann.digital.draw.graphics" ], [ "ColorStyleMonochrome", "de.neemann.digital.draw.graphics" ], [ "TransformTranslate", "de.neemann.digital.draw.graphics" ], [ "GraphicSVG", "de.neemann.digital.draw.graphics" ], [ "GraphicSwing", "de.neemann.digital.draw.graphics" ], [ "PolygonParser", "de.neemann.digital.draw.graphics" ], [ "SVGTokenizer", "de.neemann.digital.draw.graphics" ], [ "GifSequenceWriter", "de.neemann.digital.draw.gif" ], [ "GifExporter", "de.neemann.digital.draw.gif" ], [ "ConfigCache", "de.neemann.digital.toolchain" ], [ "Configuration", "de.neemann.digital.toolchain" ], [ "Command", "de.neemann.digital.toolchain" ], [ "FileToCreate", "de.neemann.digital.toolchain" ] ],
  "tokensProjectClassesNonPrivateStaticNonVoidMethods" : [ [ "getMouse", "de.neemann.gui", "Mouse", "static Mouse getMouse()" ], [ "create", "de.neemann.gui", "IconCreator", "public static Icon create(String name)" ], [ "createImage", "de.neemann.gui", "IconCreator", "public static Image createImage(String name)" ], [ "createImages", "de.neemann.gui", "IconCreator", "public static ArrayList<Image> createImages(String... names)" ], [ "getCTRLMask", "de.neemann.gui", "ToolTipAction", "public static int getCTRLMask()" ], [ "checkForSave", "de.neemann.gui", "ClosingWindowListener", "public static boolean checkForSave(JFrame parent, ConfirmSave confirmSave)" ], [ "getParentWindow", "de.neemann.gui", "ErrorMessage", "public static Window getParentWindow(Component parent)" ], [ "getInstance", "de.neemann.gui", "Screen", "public static Screen getInstance()" ], [ "getDefaultFontScaling", "de.neemann.gui", "Screen", "public static int getDefaultFontScaling()" ], [ "isLinux", "de.neemann.gui", "Screen", "public static boolean isLinux()" ], [ "isMac", "de.neemann.gui", "Screen", "public static boolean isMac()" ], [ "getInstance", "de.neemann.gui", "InfoDialog", "public static InfoDialog getInstance()" ], [ "read", "de.neemann.digital.core.memory.importer", "Importer", "public static DataField read(File hexFile, int dataBits, boolean bigEndian) throws IOException" ], [ "getOriginOf", "de.neemann.digital.core", "ExceptionWithOrigin", "public static String getOriginOf(Throwable e)" ], [ "zMaskString", "de.neemann.digital.core", "ObservableValue", "static String zMaskString(long value, long highZ, int bits)" ], [ "getInstance", "de.neemann.digital.core", "GlobalValues", "public static GlobalValues getInstance()" ], [ "getInstance", "de.neemann.digital.core.io", "MIDIHelper", "public static MIDIHelper getInstance()" ], [ "input", "de.neemann.digital.core.element", "PinInfo", "public static PinInfo input(String name)" ], [ "input", "de.neemann.digital.core.element", "PinInfo", "public static PinInfo input(String name, String description)" ], [ "output", "de.neemann.digital.core.element", "PinInfo", "public static PinInfo output(String name)" ], [ "isInOut", "de.neemann.digital.core.element", "PinDescription", "public static boolean isInOut(Direction a, Direction b)" ], [ "isInOut", "de.neemann.digital.core.element", "Direction", "public static boolean isInOut(Direction a, Direction b)" ], [ "getKeyByName", "de.neemann.digital.core.element", "Keys", "public static Key getKeyByName(String name)" ], [ "getKeys", "de.neemann.digital.core.element", "Keys", "public static Iterable<Key> getKeys()" ], [ "combine", "de.neemann.digital.core.element", "ImmutableList", "public static <T> ImmutableList<T> combine(ImmutableList<T> a, ImmutableList<T> b)" ], [ "createSwitchModel", "de.neemann.digital.core.switching", "PlainSwitch", "static SwitchModel createSwitchModel(ObservableValue input1, ObservableValue input2, ObservableValue output1, ObservableValue output2) throws NodeException" ], [ "createOneToN", "de.neemann.digital.core.wiring", "Splitter", "public static Splitter createOneToN(int bits)" ], [ "createNToOne", "de.neemann.digital.core.wiring", "Splitter", "public static Splitter createNToOne(int bits)" ], [ "ovs", "de.neemann.digital.core", "ObservableValues", "public static ObservableValues ovs(ObservableValue... items)" ], [ "toShortHex", "de.neemann.digital.core", "IntFormat", "public static String toShortHex(long value)" ], [ "up", "de.neemann.digital.core", "Bits", "public static long up(long val, int bits)" ], [ "down", "de.neemann.digital.core", "Bits", "public static long down(long val, int bits)" ], [ "mask", "de.neemann.digital.core", "Bits", "public static long mask(int bits)" ], [ "signedFlagMask", "de.neemann.digital.core", "Bits", "public static long signedFlagMask(int bits)" ], [ "isNegative", "de.neemann.digital.core", "Bits", "public static boolean isNegative(long value, int bits)" ], [ "signExtend", "de.neemann.digital.core", "Bits", "public static long signExtend(long value, int bits)" ], [ "binLn2", "de.neemann.digital.core", "Bits", "public static int binLn2(long b)" ], [ "removeBitFromValue", "de.neemann.digital.core", "Bits", "public static int removeBitFromValue(int value, int bit)" ], [ "decode", "de.neemann.digital.core", "Bits", "public static long decode(String str) throws NumberFormatException" ], [ "decode", "de.neemann.digital.core", "Bits", "public static long decode(String str, boolean parseFloats) throws NumberFormatException" ], [ "decode", "de.neemann.digital.core", "Bits", "public static long decode(String str, int p, int radix) throws NumberFormatException" ], [ "getCode", "de.neemann.digital.core.extern", "Application", "static String getCode(ElementAttributes attr, File root) throws IOException" ], [ "readCode", "de.neemann.digital.core.extern", "Application", "static String readCode(File file) throws IOException" ], [ "create", "de.neemann.digital.core.extern", "Application", "static Application create(Type type, ElementAttributes attr)" ], [ "start", "de.neemann.digital.core.extern", "ProcessStarter", "public static String start(File dir, String... args) throws IOException" ], [ "joinStrings", "de.neemann.digital.core.extern", "ProcessStarter", "public static String joinStrings(String... strings)" ], [ "fromString", "de.neemann.digital.cli.cli", "Argument", "public static Object fromString(String val, Object defValue) throws CLIException" ], [ "fac", "de.neemann.digital.fsm", "Optimizer", "public static long fac(int n)" ], [ "getTimeComplexity", "de.neemann.digital.fsm", "Optimizer", "public static long getTimeComplexity(FSM fsm)" ], [ "calcComplexity", "de.neemann.digital.fsm", "Optimizer", "static int calcComplexity(FSM fsm, boolean out) throws ExpressionException, FiniteStateMachineException, FormatterException" ], [ "blink", "de.neemann.digital.fsm", "FSMDemos", "public static FSM blink()" ], [ "rotDecoder", "de.neemann.digital.fsm", "FSMDemos", "public static FSM rotDecoder()" ], [ "counter", "de.neemann.digital.fsm", "FSMDemos", "public static FSM counter(int n)" ], [ "trafficLight", "de.neemann.digital.fsm", "FSMDemos", "public static FSM trafficLight()" ], [ "trafficLightMedwedew", "de.neemann.digital.fsm", "FSMDemos", "public static FSM trafficLightMedwedew()" ], [ "selCounter", "de.neemann.digital.fsm", "FSMDemos", "public static FSM selCounter()" ], [ "stepper", "de.neemann.digital.fsm", "FSMDemos", "public static FSM stepper()" ], [ "stepperMedwedew", "de.neemann.digital.fsm", "FSMDemos", "public static FSM stepperMedwedew()" ], [ "getxStream", "de.neemann.digital.fsm", "FSM", "public static XStream getxStream()" ], [ "loadFSM", "de.neemann.digital.fsm", "FSM", "public static FSM loadFSM(File filename) throws IOException" ], [ "loadFSM", "de.neemann.digital.fsm", "FSM", "public static FSM loadFSM(InputStream in) throws IOException" ], [ "get", "de.neemann.digital.lang", "Lang", "public static String get(String key, Object... params)" ], [ "getNull", "de.neemann.digital.lang", "Lang", "public static String getNull(String key, Object... params)" ], [ "getBundle", "de.neemann.digital.lang", "Lang", "public static Bundle getBundle()" ], [ "currentLanguage", "de.neemann.digital.lang", "Lang", "public static Language currentLanguage()" ], [ "evalMultilingualContent", "de.neemann.digital.lang", "Lang", "public static String evalMultilingualContent(String text)" ], [ "evalMultilingualContent", "de.neemann.digital.lang", "Lang", "static String evalMultilingualContent(String text, Language currentLanguage)" ], [ "lowest", "de.neemann.digital.testing.parser", "OperatorPrecedence", "public static OperatorPrecedence lowest()" ], [ "addOne", "de.neemann.digital.analyse", "ModelAnalyser", "public static String addOne(String name)" ], [ "readCSV", "de.neemann.digital.analyse", "CSVImporter", "public static TruthTable readCSV(File file) throws IOException" ], [ "readCSV", "de.neemann.digital.analyse", "CSVImporter", "public static TruthTable readCSV(String csv) throws IOException" ], [ "readCSV", "de.neemann.digital.analyse", "CSVImporter", "public static TruthTable readCSV(Reader csv) throws IOException" ], [ "createDoubledValues", "de.neemann.digital.analyse.quinemc", "BoolTableByteArray", "public static BoolTableByteArray createDoubledValues(BoolTable values)" ], [ "simplify", "de.neemann.digital.analyse.quinemc", "QuineMcCluskey", "public static Expression simplify(Expression expression) throws ExpressionException" ], [ "addAnd", "de.neemann.digital.analyse.quinemc", "QuineMcCluskey", "public static Expression addAnd(Expression e, Iterable<TableRow> rows, List<Variable> variables)" ], [ "value", "de.neemann.digital.analyse.quinemc", "ThreeStateValue", "public static ThreeStateValue value(boolean bool)" ], [ "value", "de.neemann.digital.analyse.quinemc", "ThreeStateValue", "public static ThreeStateValue value(int value)" ], [ "doImplicitTypeCasts", "de.neemann.digital.analyse", "SubstituteLibrary", "static Object doImplicitTypeCasts(Class<?> expectedClass, Object val)" ], [ "or", "de.neemann.digital.analyse.expression", "Operation", "public static Expression or(Iterable<Expression> exp)" ], [ "or", "de.neemann.digital.analyse.expression", "Operation", "public static Expression or(Expression... exp)" ], [ "xor", "de.neemann.digital.analyse.expression", "Operation", "public static Expression xor(Expression a, Expression b)" ], [ "orNoMerge", "de.neemann.digital.analyse.expression", "Operation", "public static Expression orNoMerge(Expression... exp)" ], [ "and", "de.neemann.digital.analyse.expression", "Operation", "public static Expression and(Iterable<Expression> exp)" ], [ "and", "de.neemann.digital.analyse.expression", "Operation", "public static Expression and(Expression... exp)" ], [ "andNoMerge", "de.neemann.digital.analyse.expression", "Operation", "public static Expression andNoMerge(Expression... exp)" ], [ "modifyExpression", "de.neemann.digital.analyse.expression.modify", "ExpressionModifier", "static Expression modifyExpression(Expression expression, ExpressionModifier modifier)" ], [ "modifyExpression", "de.neemann.digital.analyse.expression.modify", "ExpressionModifier", "static Expression modifyExpression(Expression expression, ExpressionModifier... modifiers)" ], [ "v", "de.neemann.digital.analyse.expression", "Variable", "public static Variable v(String name)" ], [ "vars", "de.neemann.digital.analyse.expression", "Variable", "public static ArrayList<Variable> vars(int n)" ], [ "vars", "de.neemann.digital.analyse.expression", "Variable", "public static ArrayList<Variable> vars(String... names)" ], [ "isVar", "de.neemann.digital.analyse.expression", "Variable", "public static boolean isVar(Expression e)" ], [ "isVarOrNotVar", "de.neemann.digital.analyse.expression", "Variable", "public static boolean isVarOrNotVar(Expression e)" ], [ "getDefaultFormat", "de.neemann.digital.analyse.expression.format", "FormatToExpression", "public static FormatToExpression getDefaultFormat()" ], [ "defaultFormat", "de.neemann.digital.analyse.expression.format", "FormatToExpression", "public static String defaultFormat(Expression exp)" ], [ "not", "de.neemann.digital.analyse.expression", "Not", "public static Expression not(Expression a)" ], [ "readFromFile", "de.neemann.digital.analyse", "TruthTable", "public static TruthTable readFromFile(File filename) throws IOException" ], [ "create", "de.neemann.digital.analyse", "SplitPinString", "public static SplitPinString create(Signal s)" ], [ "create", "de.neemann.digital.analyse", "SplitPinString", "public static SplitPinString create(String pinStr)" ], [ "checkSuffix", "de.neemann.digital.gui", "SaveAsHelper", "public static File checkSuffix(File filename, String suffix)" ], [ "addF1Traversal", "de.neemann.digital.gui.components", "EditorFactory", "public static <TC extends JTextComponent> TC addF1Traversal(TC text)" ], [ "createUndoManager", "de.neemann.digital.gui.components", "EditorFactory", "public static UndoManager createUndoManager(JTextComponent text)" ], [ "create", "de.neemann.digital.gui.components.modification", "ModifyInsertWires", "public static Modification<Circuit> create(List<Wire> newWires)" ], [ "getToolTipName", "de.neemann.digital.gui.components.modification", "ModificationOfVisualElement", "public static String getToolTipName(VisualElement ve)" ], [ "getTerminal", "de.neemann.digital.gui.components.terminal", "TerminalDialog", "static TerminalInterface getTerminal(Model model, ElementAttributes attr)" ], [ "createList", "de.neemann.digital.gui.components", "CircuitTransferable", "public static ArrayList<Movable> createList(Object data, ShapeFactory shapeFactory) throws IOException" ], [ "createURLStreamHandlerFactory", "de.neemann.digital.gui.components", "ElementHelpDialog", "public static URLStreamHandlerFactory createURLStreamHandlerFactory()" ], [ "getImage", "de.neemann.digital.gui.components", "ElementHelpDialog", "static BufferedImage getImage(String name)" ], [ "getImage", "de.neemann.digital.gui.components", "MyURLStreamHandlerFactory", "static BufferedImage getImage(String name)" ], [ "isSequentialVar", "de.neemann.digital.gui.components.table", "ExpressionListenerJK", "public static String isSequentialVar(String name)" ], [ "getAttrList", "de.neemann.digital.gui.components", "CircuitComponent", "public static ArrayList<Key> getAttrList()" ], [ "raster", "de.neemann.digital.gui.components", "CircuitComponent", "public static Vector raster(Vector pos)" ], [ "createLiveDialog", "de.neemann.digital.gui.components.data", "GraphDialog", "public static GraphDialog createLiveDialog(JFrame owner, Model model, boolean microStep, List<String> ordering, int sampleSize)" ], [ "createColumnsInfo", "de.neemann.digital.gui.components.data", "GraphDialog", "static ValueTable.ColumnInfo[] createColumnsInfo(ArrayList<Signal> signals)" ], [ "create", "de.neemann.digital.gui.components", "CopiedElementLabelRenamer", "static LabelInstance create(VisualElement ve)" ], [ "create", "de.neemann.digital.gui.components", "CopiedElementLabelRenamer", "static LabelInstance create(String elementName, String fullLabel)" ], [ "create", "de.neemann.digital.gui.components", "LabelInstance", "static LabelInstance create(VisualElement ve)" ], [ "create", "de.neemann.digital.gui.components", "LabelInstance", "static LabelInstance create(String elementName, String fullLabel)" ], [ "isExperimentalMode", "de.neemann.digital.gui", "Main", "public static boolean isExperimentalMode()" ], [ "getInstance", "de.neemann.digital.gui", "WindowManager", "public static WindowManager getInstance()" ], [ "getInstance", "de.neemann.digital.gui", "Settings", "public static Settings getInstance()" ], [ "getRange", "de.neemann.digital.hdl.verilog2", "VerilogCreator", "public static String getRange(int bits)" ], [ "getType", "de.neemann.digital.hdl.verilog2", "VerilogCreator", "public static String getType(HDLPort.Direction def, HDLPort.Direction dir, int bits)" ], [ "value", "de.neemann.digital.hdl.verilog2", "VerilogCreator", "public static String value(ExprConstant con)" ], [ "value", "de.neemann.digital.hdl.verilog2", "VerilogCreator", "public static String value(long val, int bits)" ], [ "neededFileName", "de.neemann.digital.hdl.verilog2.lib", "VerilogTemplate", "public static String neededFileName(String elementName)" ], [ "createFromJar", "de.neemann.digital.hdl.hgs", "Parser", "public static Statement createFromJar(String path, ClassLoader cl) throws IOException, ParserException" ], [ "createFromJarStatic", "de.neemann.digital.hdl.hgs", "Parser", "public static Statement createFromJarStatic(String path)" ], [ "isWhiteSpace", "de.neemann.digital.hdl.hgs", "Tokenizer", "public static boolean isWhiteSpace(int c)" ], [ "toLong", "de.neemann.digital.hdl.hgs", "Value", "public static long toLong(Object value) throws HGSEvalException" ], [ "toDouble", "de.neemann.digital.hdl.hgs", "Value", "public static double toDouble(Object value) throws HGSEvalException" ], [ "toInt", "de.neemann.digital.hdl.hgs", "Value", "public static int toInt(Object value) throws HGSEvalException" ], [ "toBool", "de.neemann.digital.hdl.hgs", "Value", "public static boolean toBool(Object value) throws HGSEvalException" ], [ "toString", "de.neemann.digital.hdl.hgs", "Value", "public static String toString(Object value) throws HGSEvalException" ], [ "toArray", "de.neemann.digital.hdl.hgs", "Value", "public static HGSArray toArray(Object value) throws HGSEvalException" ], [ "toMap", "de.neemann.digital.hdl.hgs", "Value", "public static HGSMap toMap(Object value) throws HGSEvalException" ], [ "equals", "de.neemann.digital.hdl.hgs", "Value", "public static boolean equals(Object a, Object b)" ], [ "add", "de.neemann.digital.hdl.hgs", "Value", "public static Object add(Object a, Object b) throws HGSEvalException" ], [ "sub", "de.neemann.digital.hdl.hgs", "Value", "public static Object sub(Object a, Object b) throws HGSEvalException" ], [ "mul", "de.neemann.digital.hdl.hgs", "Value", "public static Object mul(Object a, Object b) throws HGSEvalException" ], [ "div", "de.neemann.digital.hdl.hgs", "Value", "public static Object div(Object a, Object b) throws HGSEvalException" ], [ "or", "de.neemann.digital.hdl.hgs", "Value", "public static Object or(Object a, Object b) throws HGSEvalException" ], [ "xor", "de.neemann.digital.hdl.hgs", "Value", "public static Object xor(Object a, Object b) throws HGSEvalException" ], [ "and", "de.neemann.digital.hdl.hgs", "Value", "public static Object and(Object a, Object b) throws HGSEvalException" ], [ "not", "de.neemann.digital.hdl.hgs", "Value", "public static Object not(Object value) throws HGSEvalException" ], [ "neg", "de.neemann.digital.hdl.hgs", "Value", "public static Object neg(Object value) throws HGSEvalException" ], [ "less", "de.neemann.digital.hdl.hgs", "Value", "public static boolean less(Object a, Object b) throws HGSEvalException" ], [ "lessEqual", "de.neemann.digital.hdl.hgs", "Value", "public static boolean lessEqual(Object a, Object b) throws HGSEvalException" ], [ "trimRight", "de.neemann.digital.hdl.hgs", "Value", "public static String trimRight(String str)" ], [ "trimLeft", "de.neemann.digital.hdl.hgs", "Value", "public static String trimLeft(String str)" ], [ "getType", "de.neemann.digital.hdl.vhdl2", "VHDLCreator", "public static String getType(int bits)" ], [ "value", "de.neemann.digital.hdl.vhdl2", "VHDLCreator", "public static String value(ExprConstant con)" ], [ "value", "de.neemann.digital.hdl.vhdl2", "VHDLCreator", "public static String value(long val, int bits)" ], [ "isTemplate", "de.neemann.digital.hdl.vhdl2.entities", "VHDLTemplate", "public static boolean isTemplate(ElementTypeDescription etd)" ], [ "neededFileName", "de.neemann.digital.hdl.vhdl2.entities", "VHDLTemplate", "public static String neededFileName(String elementName)" ], [ "zero", "de.neemann.digital.hdl.vhdl2.entities", "VHDLTemplateFunctions", "public static String zero(long bits)" ], [ "value", "de.neemann.digital.hdl.vhdl2.entities", "VHDLTemplateFunctions", "public static String value(long val, long bits)" ], [ "genericType", "de.neemann.digital.hdl.vhdl2.entities", "VHDLTemplateFunctions", "public static String genericType(long n)" ], [ "type", "de.neemann.digital.hdl.vhdl2.entities", "VHDLTemplateFunctions", "public static String type(long n)" ], [ "isVar", "de.neemann.digital.hdl.model2.expression", "Expression", "static boolean isVar(Expression expr, HDLNet net)" ], [ "isConstant", "de.neemann.digital.hdl.model2.expression", "ExprConstant", "public static ExprConstant isConstant(HDLNode node)" ], [ "getHighZ", "de.neemann.digital.data", "Value", "public static Value getHighZ()" ], [ "calcBackOffset", "de.neemann.digital.builder.circuit", "FragmentExpression", "static int calcBackOffset(int size, int i)" ], [ "isXNor", "de.neemann.digital.builder.circuit", "CircuitBuilder", "static boolean isXNor(long[] data)" ], [ "isXor", "de.neemann.digital.builder.circuit", "CircuitBuilder", "static boolean isXor(long[] data)" ], [ "getLibPath", "de.neemann.digital.draw.library", "ElementLibrary", "public static File getLibPath()" ], [ "createCustomDescription", "de.neemann.digital.draw.library", "ElementLibrary", "public static ElementTypeDescriptionCustom createCustomDescription(File file, Circuit circuit, ElementLibrary library) throws PinException" ], [ "createDeclarationDefault", "de.neemann.digital.draw.library", "ElementTypeDescriptionCustom", "public static String createDeclarationDefault(Circuit circuit) throws NodeException" ], [ "getInstance", "de.neemann.digital.draw.library", "NumStringComparator", "public static NumStringComparator getInstance()" ], [ "compareStr", "de.neemann.digital.draw.library", "NumStringComparator", "public static int compareStr(String a, String b)" ], [ "createPins", "de.neemann.digital.draw.shapes", "GenericShape", "public static Pins createPins(PinDescriptions inputs, PinDescriptions outputs, boolean invert, InverterConfig ic, boolean wideShape)" ], [ "readStyle", "de.neemann.digital.draw.shapes.custom.svg", "Context", "static Context readStyle(Context context, String style) throws SvgException" ], [ "getOutSize", "de.neemann.digital.draw.shapes", "OutputShape", "public static int getOutSize(boolean small)" ], [ "getOutStyle", "de.neemann.digital.draw.shapes", "OutputShape", "public static Style getOutStyle(boolean small)" ], [ "getOutRad", "de.neemann.digital.draw.shapes", "OutputShape", "public static Vector getOutRad(boolean small)" ], [ "createTransform", "de.neemann.digital.draw.shapes", "SevenShape", "static Transform createTransform(int size)" ], [ "getxStream", "de.neemann.digital.draw.elements", "Circuit", "public static XStream getxStream()" ], [ "loadCircuit", "de.neemann.digital.draw.elements", "Circuit", "public static Circuit loadCircuit(File filename, ShapeFactory shapeFactory) throws IOException" ], [ "loadCircuit", "de.neemann.digital.draw.elements", "Circuit", "public static Circuit loadCircuit(InputStream in, ShapeFactory shapeFactory) throws IOException" ], [ "fixGenerics", "de.neemann.digital.draw.model", "ModelCreator", "public static Circuit fixGenerics(Circuit circuit, LibraryInterface library) throws NodeException, ElementNotFoundException" ], [ "createFromPath", "de.neemann.digital.draw.graphics", "Polygon", "public static Polygon createFromPath(String path)" ], [ "vec", "de.neemann.digital.draw.graphics", "Vector", "public static Vector vec(int x, int y)" ], [ "min", "de.neemann.digital.draw.graphics", "Vector", "public static Vector min(VectorInterface... p)" ], [ "max", "de.neemann.digital.draw.graphics", "Vector", "public static Vector max(VectorInterface... p)" ], [ "width", "de.neemann.digital.draw.graphics", "Vector", "public static Vector width(VectorInterface... p)" ], [ "add", "de.neemann.digital.draw.graphics", "Vector", "public static List<Vector> add(List<Vector> vectors, Vector offs)" ], [ "getInstance", "de.neemann.digital.draw.graphics", "SVGSettings", "public static SVGSettings getInstance()" ], [ "createKeyList", "de.neemann.digital.draw.graphics", "SVGSettings", "public static List<Key> createKeyList()" ], [ "mul", "de.neemann.digital.draw.graphics", "Transform", "static Transform mul(Transform t1, Transform t2)" ], [ "rotate", "de.neemann.digital.draw.graphics", "TransformMatrix", "public static TransformMatrix rotate(double w)" ], [ "scale", "de.neemann.digital.draw.graphics", "TransformMatrix", "public static TransformMatrix scale(float sx, float sy)" ], [ "getTextWidth", "de.neemann.digital.draw.graphics", "GraphicMinMax", "public static int getTextWidth(String text, Style style)" ], [ "getSelected", "de.neemann.digital.draw.graphics", "ColorScheme", "public static ColorScheme getSelected()" ], [ "getWireStyle", "de.neemann.digital.draw.graphics", "Style", "public static Style getWireStyle(Value value)" ], [ "format", "de.neemann.digital.draw.graphics.text.formatter", "PlainTextFormatter", "public static String format(Text text)" ], [ "format", "de.neemann.digital.draw.graphics.text.formatter", "PlainTextFormatter", "public static String format(Text text, FormatToExpression format)" ], [ "format", "de.neemann.digital.draw.graphics.text.formatter", "SVGFormatter", "public static String format(Text text)" ], [ "createFragment", "de.neemann.digital.draw.graphics.text.formatter", "GraphicsFormatter", "public static Fragment createFragment(Graphics2D gr, String text)" ], [ "createFragment", "de.neemann.digital.draw.graphics.text.formatter", "GraphicsFormatter", "public static Fragment createFragment(Graphics2D gr, Expression expression) throws FormatterException" ], [ "createFragment", "de.neemann.digital.draw.graphics.text.formatter", "GraphicsFormatter", "public static Fragment createFragment(FontSizer sizer, Font font, String text)" ], [ "format", "de.neemann.digital.draw.graphics.text.formatter", "LaTeXFormatter", "public static String format(Expression exp)" ], [ "format", "de.neemann.digital.draw.graphics.text.formatter", "LaTeXFormatter", "public static String format(Text text)" ], [ "math", "de.neemann.digital.draw.graphics.text.text", "Decorate", "public static Text math(Text t)" ], [ "escapeXML", "de.neemann.digital.draw.graphics", "GraphicSVG", "public static String escapeXML(String text)" ], [ "getMirrorYOrientation", "de.neemann.digital.draw.graphics", "GraphicSwing", "static int getMirrorYOrientation(Orientation orientation, VectorInterface p1, VectorInterface p2, VectorInterface p3)" ], [ "load", "de.neemann.digital.toolchain", "Configuration", "public static Configuration load(File file) throws IOException" ], [ "load", "de.neemann.digital.toolchain", "Configuration", "public static Configuration load(InputStream in) throws IOException" ] ],
  "tokensProjectClassesNonPrivateStaticAttributes" : [ [ "UNKNOWN", "de.neemann.gui", "InfoDialog", "public static final String UNKNOWN = \"unknown\";" ], [ "DESCRIPTION", "de.neemann.digital.core.pld", "PullDown", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"PullDown\", PullDown.class).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS);" ], [ "DESCRIPTION", "de.neemann.digital.core.pld", "Diode", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Diode.class).addAttribute(Keys.ROTATE).addAttribute(Keys.BLOWN);" ], [ "DESCRIPTION", "de.neemann.digital.core.pld", "DiodeBackward", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(DiodeBackward.class, input(\"in\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BLOWN);" ], [ "DESCRIPTION", "de.neemann.digital.core.pld", "PullUp", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"PullUp\", PullUp.class).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS);" ], [ "DESCRIPTION", "de.neemann.digital.core.pld", "DiodeForward", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(DiodeForward.class, input(\"in\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BLOWN);" ], [ "DESCRIPTION", "de.neemann.digital.core.memory", "RAMSinglePort", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(RAMSinglePort.class, input(\"A\"), input(\"str\"), input(\"C\").setClock(), input(\"ld\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.ADDR_BITS).addAttribute(Keys.INT_FORMAT).addAttribute(Keys.IS_PROGRAM_MEMORY).addAttribute(Keys.LABEL);" ], [ "DESCRIPTION", "de.neemann.digital.core.memory", "ROMDualPort", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(ROMDualPort.class, input(\"A1\"), input(\"s1\"), input(\"A2\"), input(\"s2\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.ADDR_BITS).addAttribute(Keys.LABEL).addAttribute(Keys.DATA).addAttribute(Keys.INT_FORMAT).addAttribute(Keys.IS_PROGRAM_MEMORY).addAttribute(Keys.AUTO_RELOAD_ROM).addAttribute(Keys.LAST_DATA_FILE).addAttribute(Keys.BIG_ENDIAN);" ], [ "DESCRIPTION", "de.neemann.digital.core.memory", "RAMDualAccess", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(RAMDualAccess.class, input(\"str\"), input(\"C\").setClock(), input(\"ld\"), input(\"1A\"), input(\"1Din\"), input(\"2A\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.ADDR_BITS).addAttribute(Keys.IS_PROGRAM_MEMORY).addAttribute(Keys.LABEL).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.memory", "CounterPreset", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(CounterPreset.class, input(\"en\"), input(\"C\").setClock(), input(\"dir\"), input(\"in\"), input(\"ld\"), input(\"clr\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.MAX_VALUE).addAttribute(Keys.INVERTER_CONFIG).addAttribute(Keys.LABEL).addAttribute(Keys.VALUE_IS_PROBE).addAttribute(Keys.IS_PROGRAM_COUNTER).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.memory", "RAMDualPort", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(RAMDualPort.class, input(\"A\"), input(\"Din\"), input(\"str\"), input(\"C\").setClock(), input(\"ld\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.ADDR_BITS).addAttribute(Keys.INT_FORMAT).addAttribute(Keys.IS_PROGRAM_MEMORY).addAttribute(Keys.LABEL).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.memory", "Register", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Register.class, input(\"D\"), input(\"C\").setClock(), input(\"en\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).addAttribute(Keys.INVERTER_CONFIG).addAttribute(Keys.IS_PROGRAM_COUNTER).addAttribute(Keys.VALUE_IS_PROBE).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.memory", "LookUpTable", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(LookUpTable.class) {\n\n    @Override\n    public PinDescriptions getInputDescription(ElementAttributes elementAttributes) {\n        int size = elementAttributes.get(Keys.INPUT_COUNT);\n        PinDescription[] names = new PinDescription[size];\n        for (int i = 0; i < size; i++) names[i] = input(Integer.toString(i), Lang.get(\"elem_LookUpTable_pin_in\", i));\n        return new PinDescriptions(names);\n    }\n}.addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.LUT_INPUT_COUNT).addAttribute(Keys.LABEL).addAttribute(Keys.DATA).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.memory", "BlockRAMDualPort", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(BlockRAMDualPort.class, input(\"A\"), input(\"Din\"), input(\"str\"), input(\"C\").setClock()).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.ADDR_BITS).addAttribute(Keys.IS_PROGRAM_MEMORY).addAttribute(Keys.LABEL).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.memory", "Counter", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Counter.class, input(\"en\"), input(\"C\").setClock(), input(\"clr\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.INVERTER_CONFIG).addAttribute(Keys.LABEL).addAttribute(Keys.VALUE_IS_PROBE).addAttribute(Keys.IS_PROGRAM_COUNTER).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.memory", "EEPROM", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(EEPROM.class, input(\"A\"), input(\"CS\"), input(\"WE\").setClock(), input(\"OE\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.ADDR_BITS).addAttribute(Keys.LABEL).addAttribute(Keys.INT_FORMAT).addAttribute(Keys.IS_PROGRAM_MEMORY).addAttribute(Keys.INVERTER_CONFIG).addAttribute(Keys.DATA);" ], [ "DESCRIPTION", "de.neemann.digital.core.memory", "RAMAsync", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(RAMAsync.class, input(\"A\"), input(\"D\"), input(\"we\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.ADDR_BITS).addAttribute(Keys.IS_PROGRAM_MEMORY).addAttribute(Keys.INVERTER_CONFIG).addAttribute(Keys.LABEL).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.memory", "ROM", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(ROM.class, input(\"A\"), input(\"sel\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.ADDR_BITS).addAttribute(Keys.LABEL).addAttribute(Keys.DATA).addAttribute(Keys.INT_FORMAT).addAttribute(Keys.IS_PROGRAM_MEMORY).addAttribute(Keys.AUTO_RELOAD_ROM).addAttribute(Keys.LAST_DATA_FILE).addAttribute(Keys.BIG_ENDIAN).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.memory", "EEPROMDualPort", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(EEPROMDualPort.class, input(\"A\"), input(\"Din\"), input(\"str\"), input(\"C\").setClock(), input(\"ld\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.ADDR_BITS).addAttribute(Keys.INT_FORMAT).addAttribute(Keys.IS_PROGRAM_MEMORY).addAttribute(Keys.LABEL).addAttribute(Keys.DATA);" ], [ "DESCRIPTION", "de.neemann.digital.core.memory", "RAMSinglePortSel", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(RAMSinglePortSel.class, input(\"A\"), input(\"CS\"), input(\"WE\"), input(\"OE\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.ADDR_BITS).addAttribute(Keys.LABEL).addAttribute(Keys.IS_PROGRAM_MEMORY).addAttribute(Keys.INVERTER_CONFIG);" ], [ "DESCRIPTION", "de.neemann.digital.core.memory", "RegisterFile", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(RegisterFile.class, input(\"Din\"), input(\"we\"), input(\"Rw\"), input(\"C\").setClock(), input(\"Ra\"), input(\"Rb\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.ADDR_BITS).addAttribute(Keys.LABEL).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.io", "MIDI", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(MIDI.class) {\n\n    public PinDescriptions getInputDescription(ElementAttributes elementAttributes) throws NodeException {\n        if (elementAttributes.get(Keys.MIDI_PROG_CHANGE))\n            return new PinDescriptions(input(\"N\"), input(\"V\"), input(\"OnOff\"), input(\"PC\"), input(\"en\"), input(\"C\").setClock()).setLangKey(getPinLangKey());\n        else\n            return new PinDescriptions(input(\"N\"), input(\"V\"), input(\"OnOff\"), input(\"en\"), input(\"C\").setClock()).setLangKey(getPinLangKey());\n    }\n}.addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.MIDI_CHANNEL).addAttribute(Keys.MIDI_INSTRUMENT).addAttribute(Keys.MIDI_PROG_CHANGE);" ], [ "DESCRIPTION", "de.neemann.digital.core.io", "RGBLED", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(RGBLED.class, input(\"R\"), input(\"G\"), input(\"B\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).addAttribute(Keys.LED_SIZE);" ], [ "DESCRIPTION", "de.neemann.digital.core.io", "Out", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"Out\", attributes -> new Out(attributes).enforceName(), input(\"in\")) {\n\n    @Override\n    public String getDescription(ElementAttributes elementAttributes) {\n        String d = Lang.evalMultilingualContent(elementAttributes.get(Keys.DESCRIPTION));\n        if (d.length() > 0)\n            return d;\n        else\n            return super.getDescription(elementAttributes);\n    }\n}.addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).addAttribute(Keys.DESCRIPTION).addAttribute(Keys.INT_FORMAT).addAttribute(Keys.PINNUMBER).addAttribute(Keys.ADD_VALUE_TO_GRAPH).addAttribute(Keys.IN_OUT_SMALL).supportsHDL();" ], [ "LEDDESCRIPTION", "de.neemann.digital.core.io", "Out", "public static final ElementTypeDescription LEDDESCRIPTION = new ElementTypeDescription(\"LED\", Out.class, input(\"in\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.LED_SIZE).addAttribute(Keys.COLOR);" ], [ "POLARITYAWARELEDDESCRIPTION", "de.neemann.digital.core.io", "Out", "public static final ElementTypeDescription POLARITYAWARELEDDESCRIPTION = new ElementTypeDescription(\"PolarityAwareLED\", attributes -> new Out(1, 1), input(\"A\"), input(\"C\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.COLOR);" ], [ "SEVENDESCRIPTION", "de.neemann.digital.core.io", "Out", "public static final ElementTypeDescription SEVENDESCRIPTION = new SevenSegTypeDescription();" ], [ "SEVENHEXDESCRIPTION", "de.neemann.digital.core.io", "Out", "public static final ElementTypeDescription SEVENHEXDESCRIPTION = new ElementTypeDescription(\"Seven-Seg-Hex\", attributes -> new Out(4, 1), input(\"d\"), input(\"dp\")).addAttribute(Keys.COLOR).addAttribute(Keys.SEVEN_SEG_SIZE);" ], [ "SIXTEENDESCRIPTION", "de.neemann.digital.core.io", "Out", "public static final ElementTypeDescription SIXTEENDESCRIPTION = new ElementTypeDescription(\"SixteenSeg\", attributes -> new Out(16, 1), input(\"led\"), input(\"dp\")).addAttribute(Keys.COLOR).addAttribute(Keys.SEVEN_SEG_SIZE);" ], [ "DESCRIPTION", "de.neemann.digital.core.io", "RotEncoder", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(RotEncoder.class).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL);" ], [ "DESCRIPTION", "de.neemann.digital.core.io", "PinControl", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(PinControl.class, input(\"wr\"), input(\"oe\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.MIRROR).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.io", "DipSwitch", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(DipSwitch.class) {\n\n    @Override\n    public String getDescription(ElementAttributes elementAttributes) {\n        String d = Lang.evalMultilingualContent(elementAttributes.get(Keys.DESCRIPTION));\n        if (d.length() > 0)\n            return d;\n        else\n            return super.getDescription(elementAttributes);\n    }\n}.addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.DIP_DEFAULT).addAttribute(Keys.DESCRIPTION);" ], [ "DESCRIPTION", "de.neemann.digital.core.io", "LightBulb", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(LightBulb.class, input(\"A\"), input(\"B\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.COLOR);" ], [ "DESCRIPTION", "de.neemann.digital.core.io", "Probe", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"Probe\", Probe.class, input(\"in\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.INT_FORMAT).addAttribute(Keys.PROBE_MODE).addAttribute(Keys.ADD_VALUE_TO_GRAPH);" ], [ "DESCRIPTION", "de.neemann.digital.core.io", "Button", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Button.class).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.ACTIVE_LOW).addAttribute(Keys.MAP_TO_KEY).addAttribute(Keys.ADD_VALUE_TO_GRAPH);" ], [ "DESCRIPTION", "de.neemann.digital.core.io", "ButtonLED", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(ButtonLED.class, input(\"in\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.ACTIVE_LOW).addAttribute(Keys.MAP_TO_KEY).addAttribute(Keys.COLOR);" ], [ "DESCRIPTION", "de.neemann.digital.core.io", "In", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(In.class) {\n\n    @Override\n    public String getDescription(ElementAttributes elementAttributes) {\n        String d = Lang.evalMultilingualContent(elementAttributes.get(Keys.DESCRIPTION));\n        if (d.length() > 0)\n            return d;\n        else\n            return super.getDescription(elementAttributes);\n    }\n}.addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).addAttribute(Keys.INPUT_DEFAULT).addAttribute(Keys.IS_HIGH_Z).addAttribute(Keys.AVOID_ACTIVE_LOW).addAttribute(Keys.DESCRIPTION).addAttribute(Keys.INT_FORMAT).addAttribute(Keys.PINNUMBER).addAttribute(Keys.ADD_VALUE_TO_GRAPH).addAttribute(Keys.IN_OUT_SMALL).supportsHDL();" ], [ "STEPS", "de.neemann.digital.core.io", "StepperMotorUnipolar", "public static final int STEPS = 72;" ], [ "DESCRIPTION", "de.neemann.digital.core.io", "StepperMotorUnipolar", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(StepperMotorUnipolar.class, input(\"P0\"), input(\"P1\"), input(\"P2\"), input(\"P3\"), input(\"com\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.INVERT_OUTPUT);" ], [ "DESCRIPTION", "de.neemann.digital.core.io", "NotConnected", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(NotConnected.class).addAttribute(Keys.BITS);" ], [ "DESCRIPTION", "de.neemann.digital.core.io", "StepperMotorBipolar", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(StepperMotorBipolar.class, input(\"A+\"), input(\"A-\"), input(\"B+\"), input(\"B-\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.INVERT_OUTPUT);" ], [ "DESCRIPTION", "de.neemann.digital.core.io", "Const", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Const.class).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.VALUE).addAttribute(Keys.INT_FORMAT).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.io", "PowerSupply", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(PowerSupply.class, input(\"VDD\"), input(\"GND\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL);" ], [ "DESCRIPTION", "de.neemann.digital.core.io", "Ground", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Ground.class).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.io", "VDD", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(VDD.class).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).supportsHDL();" ], [ "INSTANCE", "de.neemann.digital.core.io.telnet", "ServerHolder", "public static final ServerHolder INSTANCE = new ServerHolder();" ], [ "DESCRIPTION", "de.neemann.digital.core.io.telnet", "Telnet", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Telnet.class, input(\"in\"), input(\"C\").setClock(), input(\"wr\"), input(\"rd\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.TELNET_ESCAPE).addAttribute(Keys.PORT);" ], [ "BITS", "de.neemann.digital.core.element", "Keys", "public static final Key.KeyBits BITS = new Key.KeyBits(\"Bits\", 1);" ], [ "INPUT_BITS", "de.neemann.digital.core.element", "Keys", "public static final Key.KeyBits INPUT_BITS = new Key.KeyBits(\"inputBits\", 8);" ], [ "OUTPUT_BITS", "de.neemann.digital.core.element", "Keys", "public static final Key.KeyBits OUTPUT_BITS = new Key.KeyBits(\"outputBits\", 16);" ], [ "INPUT_COUNT", "de.neemann.digital.core.element", "Keys", "public static final Key.KeyInteger INPUT_COUNT = new Key.KeyInteger(\"Inputs\", 2).setComboBoxValues(2, 3, 4, 5).setMin(2);" ], [ "LUT_INPUT_COUNT", "de.neemann.digital.core.element", "Keys", "public static final Key.KeyInteger LUT_INPUT_COUNT = new Key.KeyInteger(\"Inputs\", 2).setComboBoxValues(2, 3, 4, 5, 6).setMax(20).setMin(2);" ], [ "MAX_VALUE", "de.neemann.digital.core.element", "Keys", "public static final Key.KeyInteger MAX_VALUE = new Key.KeyInteger(\"maxValue\", 0).setMin(0);" ], [ "DELAY_TIME", "de.neemann.digital.core.element", "Keys", "public static final Key.KeyInteger DELAY_TIME = new Key.KeyInteger(\"delayTime\", 1).setComboBoxValues(1, 2, 3, 4, 5).setMin(1).setMax(20);" ], [ "MONOFLOP_DELAY", "de.neemann.digital.core.element", "Keys", "public static final Key.KeyInteger MONOFLOP_DELAY = new Key.KeyInteger(\"timerDelay\", 1).setMin(1);" ], [ "LABEL", "de.neemann.digital.core.element", "Keys", "public static final Key<String> LABEL = new Key<>(\"Label\", \"\");" ], [ "FONT_SIZE", "de.neemann.digital.core.element", "Keys", "public static final Key<Integer> FONT_SIZE = new Key.KeyInteger(\"textFontSize\", Style.NORMAL.getFontSize()).setComboBoxValues(14, 17, 20, 24, 36, 48, 60).setMin(10).setMax(70);" ], [ "TEXT_ORIENTATION", "de.neemann.digital.core.element", "Keys", "public static final Key<Orientation> TEXT_ORIENTATION = new Key.KeyEnum<>(\"textOrientation\", Orientation.LEFTTOP, Orientation.values()).setSecondary();" ], [ "LED_SIZE", "de.neemann.digital.core.element", "Keys", "public static final Key<Integer> LED_SIZE = new Key.KeyInteger(\"Size\", 1).setComboBoxValues(0, 1, 2, 3, 4, 5).setMin(0).allowGroupEdit().setSecondary();" ], [ "SEVEN_SEG_SIZE", "de.neemann.digital.core.element", "Keys", "public static final Key<Integer> SEVEN_SEG_SIZE = new Key.KeyInteger(\"segSize\", 2).setComboBoxValues(0, 1, 2, 3, 4, 5).setMin(0).allowGroupEdit().useTranslationOf(LED_SIZE);" ], [ "VALUE", "de.neemann.digital.core.element", "Keys", "public static final Key<Long> VALUE = new Key<>(\"Value\", 1L).setAdaptiveIntFormat().allowGroupEdit();" ], [ "DEFAULT", "de.neemann.digital.core.element", "Keys", "public static final Key<Long> DEFAULT = new Key<>(\"Default\", 0L).allowGroupEdit().setSecondary();" ], [ "INPUT_DEFAULT", "de.neemann.digital.core.element", "Keys", "public static final Key<InValue> INPUT_DEFAULT = new Key<>(\"InDefault\", new InValue(0)).setAdaptiveIntFormat().allowGroupEdit().setSecondary();" ], [ "DIP_DEFAULT", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> DIP_DEFAULT = new Key<>(\"dipDefault\", false).allowGroupEdit().setSecondary();" ], [ "COLOR", "de.neemann.digital.core.element", "Keys", "public static final Key<java.awt.Color> COLOR = new Key<>(\"Color\", java.awt.Color.RED).allowGroupEdit();" ], [ "INPUT_SPLIT", "de.neemann.digital.core.element", "Keys", "public static final Key<String> INPUT_SPLIT = new Key<>(\"Input Splitting\", \"4,4\");" ], [ "OUTPUT_SPLIT", "de.neemann.digital.core.element", "Keys", "public static final Key<String> OUTPUT_SPLIT = new Key<>(\"Output Splitting\", \"8\");" ], [ "SPLITTER_SPREADING", "de.neemann.digital.core.element", "Keys", "public static final Key<Integer> SPLITTER_SPREADING = new Key.KeyInteger(\"splitterSpreading\", 1).setComboBoxValues(1, 2, 3, 4).setMin(1).setMax(20).setSecondary();" ], [ "IN_OUT_SMALL", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> IN_OUT_SMALL = new Key<>(\"small\", false).allowGroupEdit().setSecondary();" ], [ "RUN_AT_REAL_TIME", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> RUN_AT_REAL_TIME = new Key<>(\"runRealTime\", false);" ], [ "INVERT_OUTPUT", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> INVERT_OUTPUT = new Key<>(\"invertOutput\", true);" ], [ "FREQUENCY", "de.neemann.digital.core.element", "Keys", "public static final Key<Integer> FREQUENCY = new Key.KeyInteger(\"Frequency\", 1).setComboBoxValues(1, 2, 5, 10, 20, 50, 100, 200, 500, 5000, 50000, Integer.MAX_VALUE).setMin(1).setDependsOn(RUN_AT_REAL_TIME);" ], [ "SELECTOR_BITS", "de.neemann.digital.core.element", "Keys", "public static final Key<Integer> SELECTOR_BITS = new Key.KeyBits(\"Selector Bits\", 1).setMax(8);" ], [ "ADDR_BITS", "de.neemann.digital.core.element", "Keys", "public static final Key<Integer> ADDR_BITS = // needs to have the same default value as INPUT_COUNT!!!  see de.neemann.digital.gui.components.EditorFactory#DataFieldEditor\nnew Key.KeyBits(\"AddrBits\", 2).setMax(24);" ], [ "BLOWN", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> BLOWN = new Key<>(\"Blown\", false).allowGroupEdit();" ], [ "CLOSED", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> CLOSED = new Key<>(\"Closed\", false).allowGroupEdit();" ], [ "SIGNED", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> SIGNED = new Key<>(\"Signed\", false).allowGroupEdit();" ], [ "REMAINDER_POSITIVE", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> REMAINDER_POSITIVE = new Key<>(\"remainderPositive\", true).setDependsOn(SIGNED);" ], [ "DATA", "de.neemann.digital.core.element", "Keys", "public static final Key<DataField> DATA = new Key<>(\"Data\", DataField::new);" ], [ "FLIP_SEL_POSITON", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> FLIP_SEL_POSITON = new Key<>(\"flipSelPos\", false).allowGroupEdit();" ], [ "ROTATE", "de.neemann.digital.core.element", "Keys", "public static final Key<Rotation> ROTATE = new Key<>(\"rotation\", new Rotation(0)).allowGroupEdit().setSecondary();" ], [ "WIDTH", "de.neemann.digital.core.element", "Keys", "public static final Key.KeyInteger WIDTH = new Key.KeyInteger(\"Width\", 3).setMin(2);" ], [ "SHAPE_TYPE", "de.neemann.digital.core.element", "Keys", "public static final Key<CustomCircuitShapeType> SHAPE_TYPE = new Key.KeyEnum<>(\"shapeType\", CustomCircuitShapeType.DEFAULT, CustomCircuitShapeType.values()).setSecondary();" ], [ "LAYOUT_SHAPE_DELTA", "de.neemann.digital.core.element", "Keys", "public static final Key.KeyInteger LAYOUT_SHAPE_DELTA = new Key.KeyInteger(\"layoutShapeDelta\", 0).setMin(0);" ], [ "HEIGHT", "de.neemann.digital.core.element", "Keys", "public static final Key<Integer> HEIGHT = new Key.KeyInteger(\"Height\", 3).setMin(2).setSecondary().setDependsOn(SHAPE_TYPE, cst -> cst.equals(CustomCircuitShapeType.LAYOUT));" ], [ "TERM_WIDTH", "de.neemann.digital.core.element", "Keys", "public static final Key.KeyInteger TERM_WIDTH = new Key.KeyInteger(\"termWidth\", 50).setMin(10);" ], [ "TERM_HEIGHT", "de.neemann.digital.core.element", "Keys", "public static final Key.KeyInteger TERM_HEIGHT = new Key.KeyInteger(\"termHeight\", 25).setMin(5);" ], [ "CYCLES", "de.neemann.digital.core.element", "Keys", "public static final Key.KeyInteger CYCLES = new Key.KeyInteger(\"Cycles\", 100000).setComboBoxValues(1000, 10000, 100000, 1000000);" ], [ "ENABLED", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> ENABLED = new Key<>(\"enabled\", true).allowGroupEdit();" ], [ "VALUE_IS_PROBE", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> VALUE_IS_PROBE = new Key<>(\"valueIsProbe\", false).allowGroupEdit().setSecondary();" ], [ "IS_PROGRAM_MEMORY", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> IS_PROGRAM_MEMORY = new Key<>(\"isProgramMemory\", false).setSecondary();" ], [ "IS_PROGRAM_COUNTER", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> IS_PROGRAM_COUNTER = new Key<>(\"isProgramCounter\", false).setSecondary();" ], [ "AUTO_RELOAD_ROM", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> AUTO_RELOAD_ROM = new Key<>(\"autoReload\", false).setSecondary();" ], [ "LAST_DATA_FILE", "de.neemann.digital.core.element", "Keys", "public static final Key<File> LAST_DATA_FILE = new Key.KeyFile(\"lastDataFile\", new File(\"\")).setDependsOn(AUTO_RELOAD_ROM).setSecondary();" ], [ "SHOW_DATA_TABLE", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> SHOW_DATA_TABLE = new Key<>(\"showDataTable\", false).setSecondary();" ], [ "SHOW_DATA_GRAPH", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> SHOW_DATA_GRAPH = new Key<>(\"showDataGraph\", false).setSecondary();" ], [ "SHOW_DATA_GRAPH_MICRO", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> SHOW_DATA_GRAPH_MICRO = new Key<>(\"showDataGraphMicro\", false).setSecondary();" ], [ "ADD_VALUE_TO_GRAPH", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> ADD_VALUE_TO_GRAPH = new Key<>(\"addValueToGraph\", true).allowGroupEdit().setSecondary();" ], [ "MICRO_STEP", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> MICRO_STEP = new Key<>(\"microStep\", false);" ], [ "MAX_STEP_COUNT", "de.neemann.digital.core.element", "Keys", "public static final Key.KeyInteger MAX_STEP_COUNT = new Key.KeyInteger(\"maxStepCount\", 25).setMin(5);" ], [ "SETTINGS_MAX_STEP_COUNT", "de.neemann.digital.core.element", "Keys", "public static final Key<Integer> SETTINGS_MAX_STEP_COUNT = new Key.KeyInteger(\"settingsMaxStepCount\", 1000).setComboBoxValues(500, 1000, 5000, 10000).setMin(500).setSecondary().useTranslationOf(MAX_STEP_COUNT);" ], [ "IS_HIGH_Z", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> IS_HIGH_Z = new Key<>(\"isHighZ\", false).allowGroupEdit().setSecondary();" ], [ "AVOID_ACTIVE_LOW", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> AVOID_ACTIVE_LOW = new Key<>(\"avoidActiveLow\", false).setDependsOn(IS_HIGH_Z).allowGroupEdit().setSecondary();" ], [ "DESCRIPTION", "de.neemann.digital.core.element", "Keys", "public static final Key.LongString DESCRIPTION = new Key.LongString(\"Description\");" ], [ "NETNAME", "de.neemann.digital.core.element", "Keys", "public static final Key<String> NETNAME = new Key<>(\"NetName\", \"\");" ], [ "SETTINGS_IEEE_SHAPES", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> SETTINGS_IEEE_SHAPES = new Key<>(\"IEEEShapes\", !Locale.getDefault().getLanguage().equals(Locale.GERMAN.getLanguage())).setRequiresRestart();" ], [ "SETTINGS_LANGUAGE", "de.neemann.digital.core.element", "Keys", "public static final Key<Language> SETTINGS_LANGUAGE = new Key<>(\"Language\", new Language()).setRequiresRestart();" ], [ "SETTINGS_DEFAULT_TREESELECT", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> SETTINGS_DEFAULT_TREESELECT = new Key<>(\"defTreeSelect\", false);" ], [ "SETTINGS_EXPRESSION_FORMAT", "de.neemann.digital.core.element", "Keys", "public static final Key.KeyEnum<FormatToExpression> SETTINGS_EXPRESSION_FORMAT = new Key.KeyEnum<>(\"ExpressionFormat\", FormatToExpression.UNICODE, FormatToExpression.values(), true);" ], [ "SETTINGS_GRID", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> SETTINGS_GRID = new Key<>(\"grid\", true).setRequiresRepaint();" ], [ "SETTINGS_SHOW_WIRE_BITS", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> SETTINGS_SHOW_WIRE_BITS = new Key<>(\"showWireBits\", false);" ], [ "SETTINGS_MAC_MOUSE", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> SETTINGS_MAC_MOUSE = new Key<>(\"macMouse\", false).setRequiresRestart().setSecondary();" ], [ "SETTINGS_SHOW_TUNNEL_RENAME_DIALOG", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> SETTINGS_SHOW_TUNNEL_RENAME_DIALOG = new Key<>(\"tunnelRenameDialog\", true);" ], [ "SETTINGS_RENAME_LABELS", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> SETTINGS_RENAME_LABELS = new Key<>(\"renameLabels\", true);" ], [ "SETTINGS_OPEN_REMOTE_PORT", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> SETTINGS_OPEN_REMOTE_PORT = new Key<>(\"openRemotePort\", false).setSecondary().setRequiresRestart();" ], [ "SETTINGS_REMOTE_PORT", "de.neemann.digital.core.element", "Keys", "public static final Key<Integer> SETTINGS_REMOTE_PORT = new Key.KeyInteger(\"remotePort\", 41114).setMin(0).setMax(0xffff).setComboBoxValues(41114).setSecondary().setRequiresRestart().setDependsOn(SETTINGS_OPEN_REMOTE_PORT);" ], [ "OSCILLATION_DETECTION_COUNTER", "de.neemann.digital.core.element", "Keys", "public static final Key<Integer> OSCILLATION_DETECTION_COUNTER = new Key.KeyInteger(\"oscillationDetectionCounter\", 1000).setComboBoxValues(1000, 5000, 10000).setMin(1000).setMax(100000);" ], [ "INT_FORMAT", "de.neemann.digital.core.element", "Keys", "public static final Key<IntFormat> INT_FORMAT = new Key.KeyEnum<>(\"intFormat\", IntFormat.def, IntFormat.values()).setSecondary();" ], [ "PROBE_MODE", "de.neemann.digital.core.element", "Keys", "public static final Key<ProbeMode> PROBE_MODE = new Key.KeyEnum<>(\"probeMode\", ProbeMode.VALUE, ProbeMode.values());" ], [ "FIXED_POINT", "de.neemann.digital.core.element", "Keys", "public static final Key<Integer> FIXED_POINT = new Key.KeyInteger(\"fixedPoint\", 4).setMin(1).setMax(64).setDependsOn(INT_FORMAT, intFormat -> intFormat.equals(IntFormat.fixed) || intFormat.equals(IntFormat.fixedSigned)).allowGroupEdit().setSecondary();" ], [ "GRAPHIC_WIDTH", "de.neemann.digital.core.element", "Keys", "public static final Key.KeyInteger GRAPHIC_WIDTH = new Key.KeyInteger(\"graphicWidth\", 160).setMin(4);" ], [ "GRAPHIC_HEIGHT", "de.neemann.digital.core.element", "Keys", "public static final Key.KeyInteger GRAPHIC_HEIGHT = new Key.KeyInteger(\"graphicHeight\", 100).setMin(4);" ], [ "RELAY_NORMALLY_CLOSED", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> RELAY_NORMALLY_CLOSED = new Key<>(\"relayNormallyClosed\", false).allowGroupEdit();" ], [ "POLES", "de.neemann.digital.core.element", "Keys", "public static final Key<Integer> POLES = new Key.KeyInteger(\"poles\", 1).setComboBoxValues(1, 2, 3, 4).setMin(1).allowGroupEdit();" ], [ "BARREL_SHIFTER_MODE", "de.neemann.digital.core.element", "Keys", "public static final Key<BarrelShifterMode> BARREL_SHIFTER_MODE = new Key.KeyEnum<>(\"barrelShifterMode\", BarrelShifterMode.logical, BarrelShifterMode.values());" ], [ "DIRECTION", "de.neemann.digital.core.element", "Keys", "public static final Key<LeftRightFormat> DIRECTION = new Key.KeyEnum<>(\"direction\", LeftRightFormat.left, LeftRightFormat.values());" ], [ "BARREL_SIGNED", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> BARREL_SIGNED = new Key<>(\"barrelSigned\", false);" ], [ "COMMON_CONNECTION", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> COMMON_CONNECTION = new Key<>(\"commonCathode\", false).allowGroupEdit();" ], [ "COMMON_CONNECTION_TYPE", "de.neemann.digital.core.element", "Keys", "public static final Key<CommonConnectionType> COMMON_CONNECTION_TYPE = new Key.KeyEnum<>(\"commonConnectionType\", CommonConnectionType.cathode, CommonConnectionType.values()).setDependsOn(COMMON_CONNECTION).allowGroupEdit();" ], [ "LED_PERSISTENCE", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> LED_PERSISTENCE = new Key<>(\"ledPersistence\", false).allowGroupEdit().setDependsOn(COMMON_CONNECTION);" ], [ "LED_PERSIST_TIME", "de.neemann.digital.core.element", "Keys", "public static final Key<Integer> LED_PERSIST_TIME = new Key.KeyInteger(\"persistTime\", 0).setMin(0).allowGroupEdit();" ], [ "SETTINGS_ATF1502_FITTER", "de.neemann.digital.core.element", "Keys", "public static final Key<File> SETTINGS_ATF1502_FITTER = new Key.KeyFile(\"atf1502Fitter\", new File(\"c:/Wincupl/WinCupl/Fitters\")).setDirectoryOnly(true).setSecondary();" ], [ "SETTINGS_ATMISP", "de.neemann.digital.core.element", "Keys", "public static final Key<File> SETTINGS_ATMISP = new Key.KeyFile(\"ATMISP\", getATMISPPath()).setSecondary();" ], [ "ROW_DATA_BITS", "de.neemann.digital.core.element", "Keys", "public static final Key.KeyBits ROW_DATA_BITS = new Key.KeyBits(\"rowDataBits\", 8);" ], [ "COL_ADDR_BITS", "de.neemann.digital.core.element", "Keys", "public static final Key.KeyBits COL_ADDR_BITS = new Key.KeyBits(\"colAddrBits\", 3);" ], [ "LOCKED_MODE", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> LOCKED_MODE = new Key<>(\"lockedMode\", false);" ], [ "PINNUMBER", "de.neemann.digital.core.element", "Keys", "public static final Key<String> PINNUMBER = new Key<>(\"pinNumber\", \"\").setSecondary();" ], [ "PINCOUNT", "de.neemann.digital.core.element", "Keys", "public static final Key<Integer> PINCOUNT = new Key.KeyInteger(\"pinCount\", 0).setMin(0).setSecondary().setDependsOn(SHAPE_TYPE, st -> st.equals(CustomCircuitShapeType.DIL));" ], [ "INVERTER_CONFIG", "de.neemann.digital.core.element", "Keys", "public static final Key<InverterConfig> INVERTER_CONFIG = new Key<>(\"inverterConfig\", new InverterConfig.Builder().build());" ], [ "BACKGROUND_COLOR", "de.neemann.digital.core.element", "Keys", "public static final Key<java.awt.Color> BACKGROUND_COLOR = new Key<>(\"backgroundColor\", new Color(255, 255, 180, 200));" ], [ "SETTINGS_FONT_SCALING", "de.neemann.digital.core.element", "Keys", "public static final Key<Integer> SETTINGS_FONT_SCALING = new Key.KeyInteger(\"fontSize\", Screen.getDefaultFontScaling()).setComboBoxValues(100, 120, 150, 180, 200, 250, 300).setMin(50).setMax(400).setRequiresRestart().setSecondary();" ], [ "SETTINGS_USE_EQUALS_KEY", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> SETTINGS_USE_EQUALS_KEY;" ], [ "WITH_ENABLE", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> WITH_ENABLE = new Key<>(\"withEnable\", true);" ], [ "FET_UNIDIRECTIONAL", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> FET_UNIDIRECTIONAL = new Key<>(\"unidirectional\", false);" ], [ "ACTIVE_LOW", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> ACTIVE_LOW = new Key<>(\"activeLow\", false).allowGroupEdit();" ], [ "MAP_TO_KEY", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> MAP_TO_KEY = new Key<>(\"mapToKey\", false).allowGroupEdit();" ], [ "SETTINGS_LIBRARY_PATH", "de.neemann.digital.core.element", "Keys", "public static final Key<File> SETTINGS_LIBRARY_PATH = new Key.KeyFile(\"libraryPath\", ElementLibrary.getLibPath()).setDirectoryOnly(true).setSecondary();" ], [ "SETTINGS_JAR_PATH", "de.neemann.digital.core.element", "Keys", "public static final Key<File> SETTINGS_JAR_PATH = new Key.KeyFile(\"jarPath\", new File(\"\")).setSecondary().setRequiresRestart();" ], [ "ROMMANAGER", "de.neemann.digital.core.element", "Keys", "public static final Key<ROMManagerFile> ROMMANAGER = new Key<>(\"romContent\", ROMManagerFile::new).setSecondary();" ], [ "APPLICATION_TYPE", "de.neemann.digital.core.element", "Keys", "public static final Key.KeyEnum<Application.Type> APPLICATION_TYPE = new Key.KeyEnum<>(\"applicationType\", Application.Type.Generic, Application.Type.values());" ], [ "EXTERNAL_INPUTS", "de.neemann.digital.core.element", "Keys", "public static final Key<String> EXTERNAL_INPUTS = new Key<>(\"externalInputs\", \"in\");" ], [ "EXTERNAL_OUTPUTS", "de.neemann.digital.core.element", "Keys", "public static final Key<String> EXTERNAL_OUTPUTS = new Key<>(\"externalOutputs\", \"out\");" ], [ "EXTERNAL_CODE", "de.neemann.digital.core.element", "Keys", "public static final Key.LongString EXTERNAL_CODE = new Key.LongString(\"Code\").setRows(30).setColumns(80).setLineNumbers(true);" ], [ "EXTERNAL_CODE_FILE", "de.neemann.digital.core.element", "Keys", "public static final Key.KeyFile EXTERNAL_CODE_FILE = new Key.KeyFile(\"CodeFile\", new File(\"\"));" ], [ "SETTINGS_GHDL_PATH", "de.neemann.digital.core.element", "Keys", "public static final Key<File> SETTINGS_GHDL_PATH = new Key.KeyFile(\"ghdlPath\", new File(\"ghdl\")).setSecondary();" ], [ "GHDL_OPTIONS", "de.neemann.digital.core.element", "Keys", "public static final Key<String> GHDL_OPTIONS = new Key.LongString(\"ghdlOptions\", \"--std=08 --ieee=synopsys\").setRows(3).setColumns(30).setPanelId(\"Options\");" ], [ "IVERILOG_OPTIONS", "de.neemann.digital.core.element", "Keys", "public static final Key<String> IVERILOG_OPTIONS = new Key.LongString(\"iverilogOptions\", \"\").setRows(3).setColumns(30).setPanelId(\"Options\");" ], [ "SETTINGS_IVERILOG_PATH", "de.neemann.digital.core.element", "Keys", "public static final Key<File> SETTINGS_IVERILOG_PATH = new Key.KeyFile(\"iverilogPath\", new File(\"iverilog\")).setSecondary();" ], [ "CUSTOM_SHAPE", "de.neemann.digital.core.element", "Keys", "public static final Key<CustomShapeDescription> CUSTOM_SHAPE = new Key<>(\"customShape\", new CustomShapeDescription.Builder().build()).setSecondary().setDependsOn(SHAPE_TYPE, st -> st.equals(CustomCircuitShapeType.CUSTOM));" ], [ "PRELOAD_PROGRAM", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> PRELOAD_PROGRAM = new Key<>(\"preloadProgram\", false).setSecondary();" ], [ "BIG_ENDIAN", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> BIG_ENDIAN = new Key<>(\"bigEndian\", false).setSecondary().setDependsOn(AUTO_RELOAD_ROM);" ], [ "PROGRAM_TO_PRELOAD", "de.neemann.digital.core.element", "Keys", "public static final Key<File> PROGRAM_TO_PRELOAD = new Key.KeyFile(\"preloadProgramFile\", new File(\"\")).setSecondary().setDependsOn(PRELOAD_PROGRAM);" ], [ "BIG_ENDIAN_SETTING", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> BIG_ENDIAN_SETTING = new Key<>(\"bigEndianSetting\", false).setSecondary().useTranslationOf(BIG_ENDIAN).setDependsOn(PRELOAD_PROGRAM);" ], [ "WIDE_SHAPE", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> WIDE_SHAPE = new Key<>(\"wideShape\", false).setSecondary().allowGroupEdit();" ], [ "RECT_WIDTH", "de.neemann.digital.core.element", "Keys", "public static final Key.KeyInteger RECT_WIDTH = new Key.KeyInteger(\"RectWidth\", 3).setMin(2);" ], [ "RECT_HEIGHT", "de.neemann.digital.core.element", "Keys", "public static final Key.KeyInteger RECT_HEIGHT = new Key.KeyInteger(\"RectHeight\", 3).setMin(2);" ], [ "RECT_INSIDE", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> RECT_INSIDE = new Key<>(\"RectInside\", false).setSecondary();" ], [ "RECT_BOTTOM", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> RECT_BOTTOM = new Key<>(\"RectBottom\", false).setSecondary();" ], [ "RECT_RIGHT", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> RECT_RIGHT = new Key<>(\"RectRight\", false).setSecondary();" ], [ "MIDI_CHANNEL", "de.neemann.digital.core.element", "Keys", "public static final Key.KeyInteger MIDI_CHANNEL = new Key.KeyInteger(\"midiChannel\", 1).setMin(1).setMax(16);" ], [ "MIDI_INSTRUMENT", "de.neemann.digital.core.element", "Keys", "public static final Key<String> MIDI_INSTRUMENT = new Key<>(\"midiInstrument\", \"\");" ], [ "MIDI_PROG_CHANGE", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> MIDI_PROG_CHANGE = new Key<>(\"midiProgChange\", false);" ], [ "SETTINGS_TOOLCHAIN_CONFIG", "de.neemann.digital.core.element", "Keys", "public static final Key<File> SETTINGS_TOOLCHAIN_CONFIG = new Key.KeyFile(\"toolChainConfig\", new File(\"\")).setSecondary().setRequiresRestart();" ], [ "GENERIC", "de.neemann.digital.core.element", "Keys", "public static final Key<String> GENERIC = new Key.LongString(\"generic\").setLineNumbers(true).allowGroupEdit();" ], [ "GENERICLARGE", "de.neemann.digital.core.element", "Keys", "public static final Key<String> GENERICLARGE = new Key.LongString(\"generic\").setLineNumbers(true).setRows(20).allowGroupEdit();" ], [ "IS_GENERIC", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> IS_GENERIC = new Key<>(\"isGeneric\", false).setSecondary();" ], [ "SETTINGS_SHOW_TUTORIAL", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> SETTINGS_SHOW_TUTORIAL = new Key<>(\"showTutorial\", true).setSecondary();" ], [ "SETTINGS_WIRETOOLTIP", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> SETTINGS_WIRETOOLTIP = new Key<>(\"wireToolTips\", false);" ], [ "SWITCH_ACTS_AS_INPUT", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> SWITCH_ACTS_AS_INPUT = new Key<>(\"switchActsAsInput\", false).setSecondary();" ], [ "SNAP_TO_GRID", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> SNAP_TO_GRID = new Key<>(\"snapToGrid\", true).setSecondary();" ], [ "MIRROR", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> MIRROR = new Key<>(\"mirror\", false).allowGroupEdit().setSecondary();" ], [ "TESTDATA", "de.neemann.digital.core.element", "Keys", "public static final Key<TestCaseDescription> TESTDATA = new Key<>(\"Testdata\", TestCaseDescription::new);" ], [ "TRIGGER", "de.neemann.digital.core.element", "Keys", "public static final Key.KeyEnum<ScopeTrigger.Trigger> TRIGGER = new Key.KeyEnum<>(\"trigger\", ScopeTrigger.Trigger.both, ScopeTrigger.Trigger.values());" ], [ "PORT", "de.neemann.digital.core.element", "Keys", "public static final Key.KeyInteger PORT = new Key.KeyInteger(\"port\", 23).setMin(1).setMax((1 << 16) - 1);" ], [ "TELNET_ESCAPE", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> TELNET_ESCAPE = new Key<>(\"telnetEscape\", true).allowGroupEdit();" ], [ "SKIP_HDL", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> SKIP_HDL = new Key<>(\"skipHDL\", false).setSecondary();" ], [ "PREFIX", "de.neemann.digital.core.basic", "FanIn", "public static final String PREFIX = \"In_\";" ], [ "DESCRIPTION", "de.neemann.digital.core.basic", "NOr", "public static final ElementTypeDescription DESCRIPTION = new FanInDescription(NOr.class).addAttribute(Keys.WIDE_SHAPE);" ], [ "DESCRIPTION", "de.neemann.digital.core.basic", "And", "public static final ElementTypeDescription DESCRIPTION = new FanInDescription(And.class).addAttribute(Keys.WIDE_SHAPE);" ], [ "DESCRIPTION", "de.neemann.digital.core.basic", "XNOr", "public static final ElementTypeDescription DESCRIPTION = new FanInDescription(XNOr.class).addAttribute(Keys.WIDE_SHAPE);" ], [ "DESCRIPTION", "de.neemann.digital.core.basic", "XOr", "public static final ElementTypeDescription DESCRIPTION = new FanInDescription(XOr.class).addAttribute(Keys.WIDE_SHAPE);" ], [ "DESCRIPTION", "de.neemann.digital.core.basic", "Not", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Not.class, input(\"in\")).addAttribute(Keys.ROTATE).addAttribute(Keys.WIDE_SHAPE).addAttribute(Keys.BITS).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.basic", "NAnd", "public static final ElementTypeDescription DESCRIPTION = new FanInDescription(NAnd.class).addAttribute(Keys.WIDE_SHAPE);" ], [ "DESCRIPTION", "de.neemann.digital.core.basic", "Or", "public static final ElementTypeDescription DESCRIPTION = new FanInDescription(Or.class).addAttribute(Keys.WIDE_SHAPE);" ], [ "STARTED", "de.neemann.digital.core", "ModelEvent", "public static final ModelEvent STARTED = new ModelEvent(ModelEventType.STARTED);" ], [ "CLOSED", "de.neemann.digital.core", "ModelEvent", "public static final ModelEvent CLOSED = new ModelEvent(ModelEventType.CLOSED);" ], [ "POSTCLOSED", "de.neemann.digital.core", "ModelEvent", "public static final ModelEvent POSTCLOSED = new ModelEvent(ModelEventType.POSTCLOSED);" ], [ "STEP", "de.neemann.digital.core", "ModelEvent", "public static final ModelEvent STEP = new ModelEvent(ModelEventType.STEP);" ], [ "CHECKBURN", "de.neemann.digital.core", "ModelEvent", "public static final ModelEvent CHECKBURN = new ModelEvent(ModelEventType.CHECKBURN);" ], [ "MICROSTEP", "de.neemann.digital.core", "ModelEvent", "public static final ModelEvent MICROSTEP = new ModelEvent(ModelEventType.MICROSTEP);" ], [ "RUN_TO_BREAK", "de.neemann.digital.core", "ModelEvent", "public static final ModelEvent RUN_TO_BREAK = new ModelEvent(ModelEventType.RUN_TO_BREAK);" ], [ "RUN_TO_BREAK_TIMEOUT", "de.neemann.digital.core", "ModelEvent", "public static final ModelEvent RUN_TO_BREAK_TIMEOUT = new ModelEvent(ModelEventType.RUN_TO_BREAK_TIMEOUT);" ], [ "BREAK", "de.neemann.digital.core", "ModelEvent", "public static final ModelEvent BREAK = new ModelEvent(ModelEventType.BREAK);" ], [ "DESCRIPTION", "de.neemann.digital.core.switching", "FGPFET", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(FGPFET.class, input(\"G\")).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).addAttribute(Keys.BLOWN);" ], [ "DESCRIPTION", "de.neemann.digital.core.switching", "NFET", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(NFET.class, input(\"G\")).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.BITS).addAttribute(Keys.FET_UNIDIRECTIONAL).addAttribute(Keys.LABEL);" ], [ "DESCRIPTION", "de.neemann.digital.core.switching", "FGNFET", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(FGNFET.class, input(\"G\")).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).addAttribute(Keys.BLOWN);" ], [ "DESCRIPTION", "de.neemann.digital.core.switching", "PFET", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(PFET.class, input(\"G\")).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.BITS).addAttribute(Keys.FET_UNIDIRECTIONAL).addAttribute(Keys.LABEL);" ], [ "DESCRIPTION", "de.neemann.digital.core.switching", "TransGate", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(TransGate.class, input(\"S\"), input(\"~S\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS);" ], [ "DESCRIPTION", "de.neemann.digital.core.switching", "SwitchDT", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(SwitchDT.class).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).addAttribute(Keys.POLES);" ], [ "DESCRIPTION", "de.neemann.digital.core.switching", "Relay", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Relay.class, input(\"in1\"), input(\"in2\")).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).addAttribute(Keys.POLES).addAttribute(Keys.RELAY_NORMALLY_CLOSED);" ], [ "DESCRIPTION", "de.neemann.digital.core.switching", "RelayDT", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(RelayDT.class, input(\"in1\"), input(\"in2\")).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).addAttribute(Keys.POLES);" ], [ "DESCRIPTION", "de.neemann.digital.core.switching", "Switch", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Switch.class).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).addAttribute(Keys.POLES).addAttribute(Keys.CLOSED).addAttribute(Keys.SWITCH_ACTS_AS_INPUT);" ], [ "DESCRIPTION", "de.neemann.digital.core.switching", "Fuse", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Fuse.class).addAttribute(Keys.ROTATE).addAttribute(Keys.BLOWN);" ], [ "DESCRIPTION", "de.neemann.digital.core.wiring", "Reset", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"Reset\", Reset.class).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.INVERT_OUTPUT).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.wiring", "Stop", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Stop.class, input(\"stop\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.INVERTER_CONFIG);" ], [ "DESCRIPTION", "de.neemann.digital.core.wiring", "Decoder", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Decoder.class, input(\"sel\")).addAttribute(Keys.ROTATE).addAttribute(Keys.SELECTOR_BITS).addAttribute(Keys.FLIP_SEL_POSITON).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.wiring", "Delay", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Delay.class, input(\"in\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.DELAY_TIME);" ], [ "DESCRIPTION", "de.neemann.digital.core.wiring", "Driver", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Driver.class, input(\"in\"), input(\"sel\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.FLIP_SEL_POSITON).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.wiring", "DriverInvSel", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(DriverInvSel.class, input(\"in\"), input(\"sel\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.FLIP_SEL_POSITON).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.wiring", "PriorityEncoder", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(PriorityEncoder.class) {\n\n    @Override\n    public PinDescriptions getInputDescription(ElementAttributes elementAttributes) {\n        int inputs = 1 << elementAttributes.get(Keys.SELECTOR_BITS);\n        PinDescription[] names = new PinDescription[inputs];\n        for (int i = 0; i < inputs; i++) names[i] = input(\"in\" + i, Lang.get(\"elem_PriorityEncoder_input\", i));\n        return new PinDescriptions(names);\n    }\n}.addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.SELECTOR_BITS).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.wiring", "BusSplitter", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(BusSplitter.class, input(\"OE\")).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.BITS).addAttribute(Keys.SPLITTER_SPREADING);" ], [ "DESCRIPTION", "de.neemann.digital.core.wiring", "Splitter", "public static final ElementTypeDescription DESCRIPTION = new SplitterTypeDescription().addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.INPUT_SPLIT).addAttribute(Keys.OUTPUT_SPLIT).addAttribute(Keys.SPLITTER_SPREADING).setShortName(\"\").supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.wiring", "Multiplexer", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Multiplexer.class) {\n\n    @Override\n    public PinDescriptions getInputDescription(ElementAttributes elementAttributes) {\n        int size = 1 << elementAttributes.get(Keys.SELECTOR_BITS);\n        PinDescription[] names = new PinDescription[size + 1];\n        names[0] = input(\"sel\", Lang.get(\"elem_Multiplexer_pin_sel\"));\n        for (int i = 0; i < size; i++) names[i + 1] = input(\"in_\" + i, Lang.get(\"elem_Multiplexer_input\", i));\n        return new PinDescriptions(names);\n    }\n}.addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.SELECTOR_BITS).addAttribute(Keys.FLIP_SEL_POSITON).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.wiring", "BitSelector", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(BitSelector.class, input(\"in\"), input(\"sel\")).addAttribute(Keys.ROTATE).addAttribute(Keys.SELECTOR_BITS).addAttribute(Keys.FLIP_SEL_POSITON).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.wiring", "Break", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Break.class, input(\"brk\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.ENABLED).addAttribute(Keys.CYCLES);" ], [ "DESCRIPTION", "de.neemann.digital.core.wiring", "Clock", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"Clock\", Clock.class).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.RUN_AT_REAL_TIME).addAttribute(Keys.FREQUENCY).addAttribute(Keys.PINNUMBER).addAttribute(Keys.IN_OUT_SMALL).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.wiring", "AsyncSeq", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(AsyncSeq.class).addAttribute(Keys.RUN_AT_REAL_TIME).addAttribute(Keys.FREQUENCY);" ], [ "DESCRIPTION", "de.neemann.digital.core.wiring", "Demultiplexer", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Demultiplexer.class, input(\"sel\"), input(\"in\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.SELECTOR_BITS).addAttribute(Keys.FLIP_SEL_POSITON).addAttribute(Keys.DEFAULT).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.flipflops", "FlipflopDAsync", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"D_FF_AS\", FlipflopDAsync.class, input(\"Set\"), input(\"D\"), input(\"C\").setClock(), input(\"Clr\")).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).addAttribute(Keys.DEFAULT).addAttribute(Keys.INVERTER_CONFIG).addAttribute(Keys.VALUE_IS_PROBE).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.flipflops", "FlipflopD", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"D_FF\", FlipflopD.class, input(\"D\"), input(\"C\").setClock()).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).addAttribute(Keys.DEFAULT).addAttribute(Keys.INVERTER_CONFIG).addAttribute(Keys.VALUE_IS_PROBE).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.flipflops", "FlipflopRSAsync", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"RS_FF_AS\", FlipflopRSAsync.class, input(\"S\"), input(\"R\")).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.LABEL).addAttribute(Keys.DEFAULT).addAttribute(Keys.INVERTER_CONFIG).addAttribute(Keys.VALUE_IS_PROBE);" ], [ "DESCRIPTION", "de.neemann.digital.core.flipflops", "FlipflopT", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"T_FF\", FlipflopT.class) {\n\n    @Override\n    public PinDescriptions getInputDescription(ElementAttributes elementAttributes) throws NodeException {\n        if (elementAttributes.get(Keys.WITH_ENABLE))\n            return new PinDescriptions(input(\"T\"), input(\"C\").setClock()).setLangKey(getPinLangKey());\n        else\n            return new PinDescriptions(input(\"C\").setClock()).setLangKey(getPinLangKey());\n    }\n}.addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.LABEL).addAttribute(Keys.WITH_ENABLE).addAttribute(Keys.DEFAULT).addAttribute(Keys.INVERTER_CONFIG).addAttribute(Keys.VALUE_IS_PROBE);" ], [ "DESCRIPTION", "de.neemann.digital.core.flipflops", "FlipflopJKAsync", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"JK_FF_AS\", FlipflopJKAsync.class, input(\"Set\"), input(\"J\"), input(\"C\").setClock(), input(\"K\"), input(\"Clr\")).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.LABEL).addAttribute(Keys.DEFAULT).addAttribute(Keys.INVERTER_CONFIG).addAttribute(Keys.VALUE_IS_PROBE).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.flipflops", "FlipflopJK", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"JK_FF\", FlipflopJK.class, input(\"J\"), input(\"C\").setClock(), input(\"K\")).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.LABEL).addAttribute(Keys.DEFAULT).addAttribute(Keys.INVERTER_CONFIG).addAttribute(Keys.VALUE_IS_PROBE).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.flipflops", "Monoflop", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Monoflop.class, input(\"C\").setClock(), input(\"R\")).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.LABEL).addAttribute(Keys.DEFAULT).addAttribute(Keys.MONOFLOP_DELAY).addAttribute(Keys.INVERTER_CONFIG).addAttribute(Keys.VALUE_IS_PROBE);" ], [ "DESCRIPTION", "de.neemann.digital.core.flipflops", "FlipflopRS", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"RS_FF\", FlipflopRS.class, input(\"S\"), input(\"C\").setClock(), input(\"R\")).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.LABEL).addAttribute(Keys.DEFAULT).addAttribute(Keys.INVERTER_CONFIG).addAttribute(Keys.VALUE_IS_PROBE);" ], [ "DESCRIPTION", "de.neemann.digital.core.arithmetic", "BarrelShifter", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(BarrelShifter.class, input(\"in\"), input(\"shift\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.BITS).addAttribute(Keys.BARREL_SIGNED).addAttribute(Keys.DIRECTION).addAttribute(Keys.BARREL_SHIFTER_MODE);" ], [ "DESCRIPTION", "de.neemann.digital.core.arithmetic", "Mul", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Mul.class, input(\"a\"), input(\"b\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.SIGNED).addAttribute(Keys.BITS).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.arithmetic", "Neg", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Neg.class, input(\"in\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.arithmetic", "BitExtender", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(BitExtender.class, input(\"in\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.INPUT_BITS).addAttribute(Keys.OUTPUT_BITS).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.arithmetic", "Add", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Add.class, input(\"a\"), input(\"b\"), input(\"c_i\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.BITS).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.arithmetic", "Div", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Div.class, input(\"a\"), input(\"b\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.BITS).addAttribute(Keys.SIGNED).addAttribute(Keys.REMAINDER_POSITIVE);" ], [ "DESCRIPTION", "de.neemann.digital.core.arithmetic", "PRNG", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(PRNG.class, input(\"S\"), input(\"se\"), input(\"ne\"), input(\"C\").setClock()).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.LABEL);" ], [ "DESCRIPTION", "de.neemann.digital.core.arithmetic", "Sub", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Sub.class, input(\"a\"), input(\"b\"), input(\"c_i\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.BITS).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.arithmetic", "Comparator", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Comparator.class, input(\"a\"), input(\"b\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.BITS).addAttribute(Keys.SIGNED).setShortName(\"\").supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.arithmetic", "BitCount", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(BitCount.class, input(\"in\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS);" ], [ "EMPTY_LIST", "de.neemann.digital.core", "ObservableValues", "public static final ObservableValues EMPTY_LIST = new ObservableValues();" ], [ "DEFAULT_FORMATTER", "de.neemann.digital.core", "IntFormat", "public static final ValueFormatter DEFAULT_FORMATTER = ValueFormatterDefault.INSTANCE;" ], [ "HEX_FORMATTER", "de.neemann.digital.core", "IntFormat", "public static final ValueFormatter HEX_FORMATTER = ValueFormatterHex.INSTANCE;" ], [ "DESCRIPTION", "de.neemann.digital.core.extern", "External", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(External.class) {\n\n    @Override\n    public PinDescriptions getInputDescription(ElementAttributes elementAttributes) {\n        return new PortDefinition(elementAttributes.get(Keys.EXTERNAL_INPUTS)).getPinDescriptions(PinDescription.Direction.input);\n    }\n\n    @Override\n    public PinDescriptions getOutputDescriptions(ElementAttributes elementAttributes) {\n        return new PortDefinition(elementAttributes.get(Keys.EXTERNAL_OUTPUTS)).getPinDescriptions(PinDescription.Direction.output);\n    }\n}.addAttribute(Keys.LABEL).addAttribute(Keys.WIDTH).addAttribute(Keys.EXTERNAL_INPUTS).addAttribute(Keys.EXTERNAL_OUTPUTS).addAttribute(Keys.EXTERNAL_CODE).addAttribute(Keys.APPLICATION_TYPE).addAttribute(Keys.GHDL_OPTIONS).addAttribute(Keys.IVERILOG_OPTIONS).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.extern", "ExternalFile", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(ExternalFile.class) {\n\n    @Override\n    public PinDescriptions getInputDescription(ElementAttributes elementAttributes) {\n        return new PortDefinition(elementAttributes.get(Keys.EXTERNAL_INPUTS)).getPinDescriptions(PinDescription.Direction.input);\n    }\n\n    @Override\n    public PinDescriptions getOutputDescriptions(ElementAttributes elementAttributes) {\n        return new PortDefinition(elementAttributes.get(Keys.EXTERNAL_OUTPUTS)).getPinDescriptions(PinDescription.Direction.output);\n    }\n}.addAttribute(Keys.LABEL).addAttribute(Keys.WIDTH).addAttribute(Keys.EXTERNAL_INPUTS).addAttribute(Keys.EXTERNAL_OUTPUTS).addAttribute(Keys.EXTERNAL_CODE_FILE).addAttribute(Keys.APPLICATION_TYPE).addAttribute(Keys.GHDL_OPTIONS).addAttribute(Keys.IVERILOG_OPTIONS).supportsHDL();" ], [ "DEFAULT_RAD", "de.neemann.digital.fsm", "State", "static final int DEFAULT_RAD = 70;" ], [ "INSTANCE", "de.neemann.digital.lang", "Lang", "static final Lang INSTANCE = new Lang();" ], [ "INSTANCE", "de.neemann.digital.lang", "InstanceHolder", "static final Lang INSTANCE = new Lang();" ], [ "DESCRIPTION", "de.neemann.digital.testing", "TestCaseElement", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"Testcase\", TestCaseElement.class).addAttribute(Keys.LABEL).addAttribute(Keys.TESTDATA).addAttribute(Keys.ENABLED).supportsHDL();" ], [ "STATENAMES", "de.neemann.digital.analyse", "TruthTableTableModel", "public static final String[] STATENAMES = new String[] { \"0\", \"1\", \"x\" };" ], [ "ONE", "de.neemann.digital.analyse.expression", "Constant", "public static final Constant ONE = new Constant(true);" ], [ "ZERO", "de.neemann.digital.analyse.expression", "Constant", "public static final Constant ZERO = new Constant(false);" ], [ "PRIMARY", "de.neemann.digital.gui.components", "EditorPanel", "public static final String PRIMARY = \"primary\";" ], [ "SECONDARY", "de.neemann.digital.gui.components", "EditorPanel", "public static final String SECONDARY = \"secondary\";" ], [ "INSTANCE", "de.neemann.digital.gui.components", "EditorFactory", "static final EditorFactory INSTANCE = new EditorFactory();" ], [ "MAX_TERMINAL_STORED", "de.neemann.digital.gui.components.terminal", "ConsoleTerminal", "public static final int MAX_TERMINAL_STORED = 2048;" ], [ "DESCRIPTION", "de.neemann.digital.gui.components.terminal", "Terminal", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Terminal.class, input(\"D\"), input(\"C\").setClock(), input(\"en\")).addAttribute(Keys.TERM_WIDTH).addAttribute(Keys.TERM_HEIGHT).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL);" ], [ "DESCRIPTION", "de.neemann.digital.gui.components.terminal", "Keyboard", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Keyboard.class, input(\"C\").setClock(), input(\"en\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.INVERTER_CONFIG);" ], [ "FAILED_COLOR", "de.neemann.digital.gui.components.testing", "ValueTableDialog", "static final Color FAILED_COLOR = new Color(255, 200, 200);" ], [ "PASSED_COLOR", "de.neemann.digital.gui.components.testing", "ValueTableDialog", "static final Color PASSED_COLOR = new Color(200, 255, 200);" ], [ "ICON_DELETE", "de.neemann.digital.gui.components", "CircuitComponent", "public static final Icon ICON_DELETE = IconCreator.create(\"delete.png\");" ], [ "ICON_COPY", "de.neemann.digital.gui.components", "CircuitComponent", "public static final Icon ICON_COPY = IconCreator.create(\"edit-copy.png\");" ], [ "DESCRIPTION", "de.neemann.digital.gui.components.graphics", "VGA", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(VGA.class, input(\"R\"), input(\"G\"), input(\"B\"), input(\"H\"), input(\"V\"), input(\"C\").setClock()).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL);" ], [ "DESCRIPTION", "de.neemann.digital.gui.components.graphics", "GraphicCard", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(GraphicCard.class, input(\"A\"), input(\"str\"), input(\"C\").setClock(), input(\"ld\"), input(\"B\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).addAttribute(Keys.GRAPHIC_WIDTH).addAttribute(Keys.GRAPHIC_HEIGHT);" ], [ "DESCRIPTION", "de.neemann.digital.gui.components.graphics", "LedMatrix", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(LedMatrix.class, input(\"r-data\"), input(\"c-addr\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.ROW_DATA_BITS).addAttribute(Keys.COL_ADDR_BITS).addAttribute(Keys.COLOR).addAttribute(Keys.LED_PERSISTENCE);" ], [ "DESCRIPTION", "de.neemann.digital.gui.components.data", "ScopeTrigger", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(ScopeTrigger.class, input(\"T\").setClock()).addAttribute(Keys.LABEL).addAttribute(Keys.TRIGGER).addAttribute(Keys.MAX_STEP_COUNT);" ], [ "DATADESCRIPTION", "de.neemann.digital.gui.components.data", "DummyElement", "public static final ElementTypeDescription DATADESCRIPTION = new ElementTypeDescription(\"Data\", DummyElement.class).addAttribute(Keys.MICRO_STEP).addAttribute(Keys.MAX_STEP_COUNT).addAttribute(Keys.SNAP_TO_GRID);" ], [ "TEXTDESCRIPTION", "de.neemann.digital.gui.components.data", "DummyElement", "public static final ElementTypeDescription TEXTDESCRIPTION = new ElementTypeDescription(\"Text\", DummyElement.class).addAttribute(Keys.DESCRIPTION).addAttribute(Keys.ROTATE).addAttribute(Keys.TEXT_ORIENTATION).addAttribute(Keys.FONT_SIZE).addAttribute(Keys.SNAP_TO_GRID);" ], [ "RECTDESCRIPTION", "de.neemann.digital.gui.components.data", "DummyElement", "public static final ElementTypeDescription RECTDESCRIPTION = new ElementTypeDescription(\"Rectangle\", DummyElement.class).addAttribute(Keys.LABEL).addAttribute(Keys.RECT_WIDTH).addAttribute(Keys.RECT_HEIGHT).addAttribute(Keys.RECT_INSIDE).addAttribute(Keys.RECT_BOTTOM).addAttribute(Keys.RECT_RIGHT).addAttribute(Keys.FONT_SIZE).addAttribute(Keys.SNAP_TO_GRID);" ], [ "LEFT", "de.neemann.digital.gui.components", "TextLineNumber", "public final static float LEFT = 0.0f;" ], [ "CENTER", "de.neemann.digital.gui.components", "TextLineNumber", "public final static float CENTER = 0.5f;" ], [ "RIGHT", "de.neemann.digital.gui.components", "TextLineNumber", "public final static float RIGHT = 1.0f;" ], [ "INSTANCE", "de.neemann.digital.gui", "Settings", "static final Settings INSTANCE = new Settings();" ], [ "INSTANCE", "de.neemann.digital.gui", "SettingsHolder", "static final Settings INSTANCE = new Settings();" ], [ "BASE_FILE_KEY", "de.neemann.digital.hdl.hgs", "Context", "public static final String BASE_FILE_KEY = \"baseFile\";" ], [ "DESCRIPTION", "de.neemann.digital.draw.library", "GenericCode", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(GenericCode.class).addAttribute(Keys.GENERICLARGE).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.draw.library", "GenericInitCode", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(GenericInitCode.class).addAttribute(Keys.LABEL).addAttribute(Keys.ENABLED).addAttribute(Keys.GENERIC).supportsHDL();" ], [ "GEN_ARGS_KEY", "de.neemann.digital.draw.library", "ResolveGenerics", "public static final String GEN_ARGS_KEY = \"genArgs\";" ], [ "HEIGHT", "de.neemann.digital.draw.shapes", "ButtonShape", "protected static final int HEIGHT = OUT_SIZE / 2;" ], [ "SIZE2", "de.neemann.digital.draw.shapes", "GenericShape", "public static final int SIZE2 = 10;" ], [ "SIZE", "de.neemann.digital.draw.shapes", "GenericShape", "public static final int SIZE = SIZE2 * 2;" ], [ "CIRC", "de.neemann.digital.draw.shapes", "DILShape", "static final float CIRC = (float) (4 * (Math.sqrt(2) - 1) / 3);" ], [ "DOWNSHIFT", "de.neemann.digital.draw.shapes", "VDDShape", "static final int DOWNSHIFT = 4;" ], [ "CHARGED_GATE", "de.neemann.digital.draw.shapes", "FGFETShapeN", "static final Style CHARGED_GATE = Style.NORMAL.deriveStyle(6, false, Color.RED);" ], [ "OUT_SIZE", "de.neemann.digital.draw.shapes", "OutputShape", "public static final int OUT_SIZE = GenericShape.SIZE * 3 / 4;" ], [ "LATEX_RAD", "de.neemann.digital.draw.shapes", "OutputShape", "static final Vector LATEX_RAD = new Vector(Style.MAXLINETHICK, Style.MAXLINETHICK);" ], [ "WIDTH2", "de.neemann.digital.draw.shapes", "PullDownShape", "public static final int WIDTH2 = SIZE2 - 3;" ], [ "HEIGHT", "de.neemann.digital.draw.shapes", "PullDownShape", "public static final int HEIGHT = SIZE + SIZE / 3;" ], [ "HEIGHT", "de.neemann.digital.draw.shapes", "SevenShape", "static final int HEIGHT = 7;" ], [ "FRAME", "de.neemann.digital.draw.shapes", "SevenShape", "public static final Polygon FRAME = Polygon.createFromPath(\"m -10,1 L 70,1 70,139 -10,139 z\");" ], [ "DESCRIPTION", "de.neemann.digital.draw.elements", "Tunnel", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Tunnel.class, input(\"in\")).addAttribute(Keys.ROTATE).addAttribute(Keys.NETNAME).supportsHDL();" ], [ "HIGH_CONTRAST", "de.neemann.digital.draw.graphics", "SVGSettings", "static final Key<Boolean> HIGH_CONTRAST = new Key<>(\"SVG_highContrast\", false);" ], [ "MONOCHROME", "de.neemann.digital.draw.graphics", "SVGSettings", "static final Key<Boolean> MONOCHROME = new Key<>(\"SVG_monochrome\", false);" ], [ "SMALL_IO", "de.neemann.digital.draw.graphics", "SVGSettings", "static final Key<Boolean> SMALL_IO = new Key<>(\"SVG_smallIO\", false);" ], [ "NO_PIN_MARKER", "de.neemann.digital.draw.graphics", "SVGSettings", "static final Key<Boolean> NO_PIN_MARKER = new Key<>(\"SVG_noPinMarker\", false);" ], [ "THINNER_LINES", "de.neemann.digital.draw.graphics", "SVGSettings", "static final Key<Boolean> THINNER_LINES = new Key<>(\"SVG_thinnerLines\", false);" ], [ "HIDE_TEST", "de.neemann.digital.draw.graphics", "SVGSettings", "static final Key<Boolean> HIDE_TEST = new Key<>(\"SVG_hideTest\", false);" ], [ "NO_SHAPE_FILLING", "de.neemann.digital.draw.graphics", "SVGSettings", "static final Key<Boolean> NO_SHAPE_FILLING = new Key<>(\"SVG_noShapeFilling\", false);" ], [ "LATEX", "de.neemann.digital.draw.graphics", "SVGSettings", "static final Key<Boolean> LATEX = new Key<>(\"SVG_LaTeX\", false);" ], [ "PINS_IN_MATH_MODE", "de.neemann.digital.draw.graphics", "SVGSettings", "static final Key<Boolean> PINS_IN_MATH_MODE = new Key<>(\"SVG_pinsInMathMode\", false).setDependsOn(LATEX);" ], [ "INSTANCE", "de.neemann.digital.draw.graphics", "SVGSettings", "static final SVGSettings INSTANCE = new SVGSettings();" ], [ "INSTANCE", "de.neemann.digital.draw.graphics", "SettingsHolder", "static final SVGSettings INSTANCE = new SVGSettings();" ], [ "COLOR_SCHEME", "de.neemann.digital.draw.graphics", "ColorScheme", "public static final Key<ColorSchemes> COLOR_SCHEME = new Key.KeyEnum<>(\"colorScheme\", ColorSchemes.DEFAULT, ColorSchemes.values()).setRequiresRepaint();" ], [ "CUSTOM_COLOR_SCHEME", "de.neemann.digital.draw.graphics", "ColorScheme", "public static final Key<ColorScheme> CUSTOM_COLOR_SCHEME = new Key<>(\"customColorScheme\", DEFAULT_SCHEME).setDependsOn(COLOR_SCHEME, o -> o.equals(ColorSchemes.CUSTOM)).setRequiresRepaint();" ], [ "MAXLINETHICK", "de.neemann.digital.draw.graphics", "Style", "public static final int MAXLINETHICK = 4;" ], [ "NORMAL", "de.neemann.digital.draw.graphics", "Style", "public static final Style NORMAL = new Builder().build();" ], [ "DISABLED", "de.neemann.digital.draw.graphics", "Style", "public static final Style DISABLED = new Builder().setColor(ColorKey.DISABLED).build();" ], [ "INOUT", "de.neemann.digital.draw.graphics", "Style", "public static final Style INOUT = new Builder(NORMAL).setFontStyle(Font.ITALIC).build();" ], [ "FAILED", "de.neemann.digital.draw.graphics", "Style", "public static final Style FAILED = new Builder(NORMAL).setColor(ColorKey.ERROR).build();" ], [ "PASS", "de.neemann.digital.draw.graphics", "Style", "public static final Style PASS = new Builder(NORMAL).setColor(ColorKey.PASSED).build();" ], [ "NORMAL_TEXT", "de.neemann.digital.draw.graphics", "Style", "public static final Style NORMAL_TEXT = new Builder(NORMAL).setMattersForSize(true).build();" ], [ "THIN", "de.neemann.digital.draw.graphics", "Style", "public static final Style THIN = new Builder(NORMAL).setThickness(LINETHIN).build();" ], [ "THIN_FILLED", "de.neemann.digital.draw.graphics", "Style", "public static final Style THIN_FILLED = new Builder(NORMAL).setThickness(LINETHIN).setFilled(true).build();" ], [ "THICK", "de.neemann.digital.draw.graphics", "Style", "public static final Style THICK = new Builder(NORMAL).setThickness(LINETHICK + LINETHIN).build();" ], [ "WIRE", "de.neemann.digital.draw.graphics", "Style", "public static final Style WIRE = new Builder().setThickness(WIRETHICK).setFilled(true).setColor(ColorKey.WIRE).setEndCap(BasicStroke.CAP_ROUND).build();" ], [ "WIRE_LOW", "de.neemann.digital.draw.graphics", "Style", "public static final Style WIRE_LOW = new Builder(WIRE).setColor(ColorKey.WIRE_LOW).build();" ], [ "WIRE_HIGH", "de.neemann.digital.draw.graphics", "Style", "public static final Style WIRE_HIGH = new Builder(WIRE).setColor(ColorKey.WIRE_HIGH).build();" ], [ "WIRE_HIGHZ", "de.neemann.digital.draw.graphics", "Style", "public static final Style WIRE_HIGHZ = new Builder(WIRE).setColor(ColorKey.WIRE_Z).build();" ], [ "WIRE_OUT", "de.neemann.digital.draw.graphics", "Style", "public static final Style WIRE_OUT = new Builder(WIRE).setColor(ColorKey.WIRE_OUT).build();" ], [ "FILLED", "de.neemann.digital.draw.graphics", "Style", "public static final Style FILLED = new Builder().setFilled(true).build();" ], [ "DASH", "de.neemann.digital.draw.graphics", "Style", "public static final Style DASH = new Builder().setThickness(LINEDASH).setDash(new float[] { 4, 4 }).build();" ], [ "SHAPE_PIN", "de.neemann.digital.draw.graphics", "Style", "public static final Style SHAPE_PIN = new Builder().setThickness(LINETHIN).setColor(ColorKey.PINS).setFontSize(18).build();" ], [ "SHAPE_SPLITTER", "de.neemann.digital.draw.graphics", "Style", "public static final Style SHAPE_SPLITTER = new Builder(SHAPE_PIN).setFontSize(12).build();" ], [ "WIRE_VALUE", "de.neemann.digital.draw.graphics", "Style", "public static final Style WIRE_VALUE = new Builder(SHAPE_SPLITTER).setColor(ColorKey.WIRE_VALUE).build();" ], [ "WIRE_BITS", "de.neemann.digital.draw.graphics", "Style", "public static final Style WIRE_BITS = new Builder(SHAPE_SPLITTER).setColor(ColorKey.WIRE).build();" ], [ "HIGHLIGHT", "de.neemann.digital.draw.graphics", "Style", "public static final Style HIGHLIGHT = new Builder(NORMAL).setColor(ColorKey.HIGHLIGHT).setEndCap(BasicStroke.CAP_ROUND).build();" ], [ "ERROR", "de.neemann.digital.draw.graphics", "Style", "public static final Style ERROR = new Builder(NORMAL).setColor(ColorKey.ERROR).setEndCap(BasicStroke.CAP_ROUND).build();" ], [ "BLANK", "de.neemann.digital.draw.graphics.text.text", "Blank", "public static final Blank BLANK = new Blank();" ], [ "LOOK_AT_ALIAS", "de.neemann.digital.toolchain", "Configuration", "static final String LOOK_AT_ALIAS = \"lookAt\";" ], [ "REF_ALIAS", "de.neemann.digital.toolchain", "Configuration", "static final String REF_ALIAS = \"ref\";" ] ],
  "tokensMethodJavadocValues" : [ ],
  "tokensMethodArguments" : [ [ "v", "de.neemann.digital.draw.graphics", "VectorInterface" ] ],
  "tokensMethodVariablesNonPrivateNonStaticNonVoidMethods" : [ [ "equals", "java.lang", "Object", "public boolean equals(Object arg0)" ], [ "isUniform", "de.neemann.digital.draw.graphics", "TransformMatrix", "public boolean isUniform()" ], [ "transform", "de.neemann.digital.draw.graphics", "TransformMatrix", "public VectorFloat transform(VectorFloat v)" ], [ "toString", "java.lang", "Object", "public String toString()" ], [ "noRotation", "de.neemann.digital.draw.graphics", "TransformMatrix", "public boolean noRotation()" ], [ "transform", "de.neemann.digital.draw.graphics", "TransformMatrix", "public Vector transform(Vector v)" ], [ "clone", "java.lang", "Object", "protected native Object clone() throws CloneNotSupportedException" ], [ "invert", "de.neemann.digital.draw.graphics", "Transform", "public Transform invert()" ], [ "hashCode", "java.lang", "Object", "public native int hashCode()" ], [ "invert", "de.neemann.digital.draw.graphics", "TransformMatrix", "public TransformMatrix invert()" ], [ "getMatrix", "de.neemann.digital.draw.graphics", "TransformMatrix", "public TransformMatrix getMatrix()" ], [ "transformDirection", "de.neemann.digital.draw.graphics", "TransformMatrix", "public VectorFloat transformDirection(VectorInterface v)" ], [ "getValues", "de.neemann.digital.draw.graphics", "TransformMatrix", "public float[] getValues()" ], [ "getClass", "java.lang", "Object", "public final native Class<? extends Object> getClass()" ], [ "add", "de.neemann.digital.draw.graphics", "VectorInterface", "public abstract VectorInterface add(VectorInterface arg0)" ], [ "len", "de.neemann.digital.draw.graphics", "VectorInterface", "public abstract float len()" ], [ "div", "de.neemann.digital.draw.graphics", "VectorInterface", "public abstract VectorInterface div(int arg0)" ], [ "toFloat", "de.neemann.digital.draw.graphics", "VectorInterface", "public abstract VectorFloat toFloat()" ], [ "sub", "de.neemann.digital.draw.graphics", "VectorInterface", "public abstract VectorInterface sub(VectorInterface arg0)" ], [ "norm", "de.neemann.digital.draw.graphics", "VectorInterface", "public abstract VectorFloat norm()" ], [ "getY", "de.neemann.digital.draw.graphics", "VectorInterface", "public abstract int getY()" ], [ "getX", "de.neemann.digital.draw.graphics", "VectorInterface", "public abstract int getX()" ], [ "transform", "de.neemann.digital.draw.graphics", "VectorInterface", "public abstract VectorInterface transform(Transform arg0)" ], [ "getOrthogonal", "de.neemann.digital.draw.graphics", "VectorInterface", "public abstract VectorInterface getOrthogonal()" ], [ "getYFloat", "de.neemann.digital.draw.graphics", "VectorInterface", "public abstract float getYFloat()" ], [ "mul", "de.neemann.digital.draw.graphics", "VectorInterface", "public abstract VectorFloat mul(float arg0)" ], [ "scalar", "de.neemann.digital.draw.graphics", "VectorInterface", "public float scalar(VectorInterface arg0)" ], [ "getXFloat", "de.neemann.digital.draw.graphics", "VectorInterface", "public abstract float getXFloat()" ], [ "round", "de.neemann.digital.draw.graphics", "VectorInterface", "public abstract Vector round()" ], [ "add", "de.neemann.digital.draw.graphics", "VectorFloat", "public VectorFloat add(VectorInterface arg0)" ], [ "toFloat", "de.neemann.digital.draw.graphics", "VectorFloat", "public VectorFloat toFloat()" ], [ "getXFloat", "de.neemann.digital.draw.graphics", "VectorFloat", "public float getXFloat()" ], [ "equals", "de.neemann.digital.draw.graphics", "VectorFloat", "public boolean equals(Object arg0)" ], [ "hashCode", "de.neemann.digital.draw.graphics", "VectorFloat", "public int hashCode()" ], [ "getOrthogonal", "de.neemann.digital.draw.graphics", "VectorFloat", "public VectorFloat getOrthogonal()" ], [ "add", "de.neemann.digital.draw.graphics", "VectorFloat", "public VectorFloat add(float arg0, float arg1)" ], [ "round", "de.neemann.digital.draw.graphics", "VectorFloat", "public Vector round()" ], [ "sub", "de.neemann.digital.draw.graphics", "VectorFloat", "public VectorFloat sub(VectorInterface arg0)" ], [ "toString", "de.neemann.digital.draw.graphics", "VectorFloat", "public String toString()" ], [ "getY", "de.neemann.digital.draw.graphics", "VectorFloat", "public int getY()" ], [ "div", "de.neemann.digital.draw.graphics", "VectorFloat", "public VectorFloat div(int arg0)" ], [ "getYFloat", "de.neemann.digital.draw.graphics", "VectorFloat", "public float getYFloat()" ], [ "transform", "de.neemann.digital.draw.graphics", "VectorFloat", "public VectorInterface transform(Transform arg0)" ], [ "getX", "de.neemann.digital.draw.graphics", "VectorFloat", "public int getX()" ], [ "len", "de.neemann.digital.draw.graphics", "VectorFloat", "public float len()" ], [ "norm", "de.neemann.digital.draw.graphics", "VectorFloat", "public VectorFloat norm()" ], [ "mul", "de.neemann.digital.draw.graphics", "VectorFloat", "public VectorFloat mul(float arg0)" ], [ "mul", "de.neemann.digital.draw.graphics", "VectorFloat", "public float mul(VectorFloat arg0)" ] ],
  "tokensMethodVariablesNonPrivateNonStaticAttributes" : [ [ "a", "de.neemann.digital.draw.graphics", "TransformMatrix", "final float a;" ], [ "b", "de.neemann.digital.draw.graphics", "TransformMatrix", "final float b;" ], [ "c", "de.neemann.digital.draw.graphics", "TransformMatrix", "final float c;" ], [ "d", "de.neemann.digital.draw.graphics", "TransformMatrix", "final float d;" ], [ "x", "de.neemann.digital.draw.graphics", "TransformMatrix", "final float x;" ], [ "y", "de.neemann.digital.draw.graphics", "TransformMatrix", "final float y;" ] ],
  "tokensOracleVariablesNonPrivateNonStaticNonVoidMethods" : [ ],
  "tokensOracleVariablesNonPrivateNonStaticAttributes" : [ ]
}, {
  "id" : 26716,
  "oracle" : "v != null;",
  "oracleType" : "PRE",
  "projectName" : "Digital",
  "packageName" : "de.neemann.digital.draw.graphics",
  "className" : "TransformMatrix",
  "javadocTag" : "@param v the vector to transform",
  "methodJavadoc" : "    /**\n     * Transforms a direction vector.\n     * Ignores the translation part of the transformation.\n     *\n     * @param v the vector to transform\n     * @return the transformed vector\n     */",
  "methodSourceCode" : "public VectorFloat transformDirection(VectorInterface v){\n    return new VectorFloat(v.getXFloat() * a + v.getYFloat() * b, v.getXFloat() * c + v.getYFloat() * d);\n}",
  "classJavadoc" : "/**\n * A Matrix transformation\n */",
  "classSourceCode" : "/*\n * Copyright (c) 2018 Helmut Neemann.\n * Use of this source code is governed by the GPL v3 license\n * that can be found in the LICENSE file.\n */\npackage de.neemann.digital.draw.graphics;\n\n/**\n * A Matrix transformation\n */\npublic class TransformMatrix implements Transform {\n\n\n    /**\n     * Creates a rotation.\n     * Rotates in mathematically positive direction. Takes into account that\n     * in Digital the y-axis goes downwards.\n     *\n     * @param w the angle in 360 grad units\n     * @return the transformation\n     */\n    public static TransformMatrix rotate(double w) {\n        final double phi = w / 180 * Math.PI;\n        float cos = (float) Math.cos(phi);\n        float sin = (float) Math.sin(phi);\n        return new TransformMatrix(cos, -sin, sin, cos, 0, 0);\n    }\n\n    /**\n     * Creates a scaling transformation\n     *\n     * @param sx scaling in x direction\n     * @param sy scaling in y direction\n     * @return the transformation\n     */\n    public static TransformMatrix scale(float sx, float sy) {\n        return new TransformMatrix(sx, 0, 0, sy, 0, 0);\n    }\n\n    final float a;\n    final float b;\n    final float c;\n    final float d;\n    final float x;\n    final float y;\n\n    /**\n     * Creates a new instance\n     *\n     * @param a A_00\n     * @param b A_10\n     * @param c A_01\n     * @param d A_11\n     * @param x x offset\n     * @param y y offset\n     */\n    public TransformMatrix(float a, float b, float c, float d, float x, float y) {\n        this.a = a;\n        this.b = b;\n        this.c = c;\n        this.d = d;\n        this.x = x;\n        this.y = y;\n    }\n\n    @Override\n    public Vector transform(Vector v) {\n        return new Vector(\n                (int) (v.getXFloat() * a + v.getYFloat() * b + x),\n                (int) (v.getXFloat() * c + v.getYFloat() * d + y));\n    }\n\n    @Override\n    public VectorFloat transform(VectorFloat v) {\n        return new VectorFloat(\n                v.getXFloat() * a + v.getYFloat() * b + x,\n                v.getXFloat() * c + v.getYFloat() * d + y);\n    }\n\n\n    /**\n     * Transforms a direction vector.\n     * Ignores the translation part of the transformation.\n     *\n     * @param v the vector to transform\n     * @return the transformed vector\n     */\n    public VectorFloat transformDirection(VectorInterface v) {\n        return new VectorFloat(\n                v.getXFloat() * a + v.getYFloat() * b,\n                v.getXFloat() * c + v.getYFloat() * d);\n    }\n\n    @Override\n    public TransformMatrix getMatrix() {\n        return this;\n    }\n\n    /**\n     * Returns the inverse transformation.\n     *\n     * @return the inverse transformation.\n     */\n    public TransformMatrix invert() {\n        float q = a * d - b * c;\n\n        return new TransformMatrix(d / q, -b / q, -c / q, a / q,\n                (b * y - d * x) / q, (c * x - a * y) / q);\n    }\n\n    /**\n     * @return true if this transformation does no asymmetric scaling.\n     */\n    public boolean isUniform() {\n        return equal(a, d) && equal(b, -c);\n    }\n\n    /**\n     * @return true if this transformation does no rotation\n     */\n    public boolean noRotation() {\n        return equal(b, 0) && equal(c, 0);\n    }\n\n    private static boolean equal(float a, float b) {\n        return Math.abs(a - b) < 1e-7;\n    }\n\n    /**\n     * @return the matrix values\n     */\n    public float[] getValues() {\n        return new float[]{a, b, c, d, x, y};\n    }\n\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
  "tokensGeneralGrammar" : [ "null", "true", "false", ",", ".", ":", ";", "?", "(", ")", "jdVar", "stream", "Arrays", "allMatch", "noneMatch", "anyMatch", "~", ">>", "<<", ">>>", "|", "&", "^", "+", "-", "/", "*", "%", "&&", "||", ">=", "<=", ">", "<", "==", "!=", "instanceof", "class", "methodResultID", "this" ],
  "tokensGeneralValuesGlobalDictionary" : [ [ "0", "int" ], [ "1", "int" ], [ "-1", "int" ], [ "0.0", "double" ], [ "1.0", "double" ], [ "-1.0", "double" ], [ "\"\"", "String" ], [ "\" \"", "String" ] ],
  "tokensProjectClasses" : [ [ "CLI", "de.neemann" ], [ "Mouse", "de.neemann.gui" ], [ "LineBreaker", "de.neemann.gui" ], [ "IconCreator", "de.neemann.gui" ], [ "ConfirmDialogBuilder", "de.neemann.gui" ], [ "Resources", "de.neemann.gui.language" ], [ "Bundle", "de.neemann.gui.language" ], [ "Language", "de.neemann.gui.language" ], [ "ToolTipAction", "de.neemann.gui" ], [ "MyFileChooser", "de.neemann.gui" ], [ "ClosingWindowListener", "de.neemann.gui" ], [ "ErrorMessage", "de.neemann.gui" ], [ "WindowSizeStorage", "de.neemann.gui" ], [ "Screen", "de.neemann.gui" ], [ "ToolTipProvider", "de.neemann.gui" ], [ "InfoDialog", "de.neemann.gui" ], [ "ValueFormatter", "de.neemann.digital.core" ], [ "ModelStateObserver", "de.neemann.digital.core" ], [ "PullDown", "de.neemann.digital.core.pld" ], [ "Diode", "de.neemann.digital.core.pld" ], [ "DiodeBackward", "de.neemann.digital.core.pld" ], [ "PullUp", "de.neemann.digital.core.pld" ], [ "DiodeForward", "de.neemann.digital.core.pld" ], [ "Node", "de.neemann.digital.core" ], [ "RAMSinglePort", "de.neemann.digital.core.memory" ], [ "ROMDualPort", "de.neemann.digital.core.memory" ], [ "RAMDualAccess", "de.neemann.digital.core.memory" ], [ "ByteArrayFromValueArray", "de.neemann.digital.core.memory.importer" ], [ "Importer", "de.neemann.digital.core.memory.importer" ], [ "LogisimReader", "de.neemann.digital.core.memory.importer" ], [ "DataFieldValueArray", "de.neemann.digital.core.memory.importer" ], [ "ByteArrayReader", "de.neemann.digital.core.memory.importer" ], [ "ValueArrayReader", "de.neemann.digital.core.memory.importer" ], [ "IntelHexReader", "de.neemann.digital.core.memory.importer" ], [ "ValueArray", "de.neemann.digital.core.memory.importer" ], [ "BinReader", "de.neemann.digital.core.memory.importer" ], [ "ByteArray", "de.neemann.digital.core.memory.importer" ], [ "MultiValueArray", "de.neemann.digital.core.memory.importer" ], [ "CounterPreset", "de.neemann.digital.core.memory" ], [ "RAMDualPort", "de.neemann.digital.core.memory" ], [ "Register", "de.neemann.digital.core.memory" ], [ "LookUpTable", "de.neemann.digital.core.memory" ], [ "BlockRAMDualPort", "de.neemann.digital.core.memory" ], [ "Counter", "de.neemann.digital.core.memory" ], [ "ROMMangerBase", "de.neemann.digital.core.memory.rom" ], [ "ROMManagerFile", "de.neemann.digital.core.memory.rom" ], [ "ROMManager", "de.neemann.digital.core.memory.rom" ], [ "ROMInterface", "de.neemann.digital.core.memory.rom" ], [ "EEPROM", "de.neemann.digital.core.memory" ], [ "ProgramCounter", "de.neemann.digital.core.memory" ], [ "RAMAsync", "de.neemann.digital.core.memory" ], [ "ROM", "de.neemann.digital.core.memory" ], [ "DataField", "de.neemann.digital.core.memory" ], [ "EEPROMDualPort", "de.neemann.digital.core.memory" ], [ "RAMInterface", "de.neemann.digital.core.memory" ], [ "DataFieldConverter", "de.neemann.digital.core.memory" ], [ "RAMSinglePortSel", "de.neemann.digital.core.memory" ], [ "ProgramMemory", "de.neemann.digital.core.memory" ], [ "RegisterFile", "de.neemann.digital.core.memory" ], [ "ModelStateObserverTyped", "de.neemann.digital.core" ], [ "Observable", "de.neemann.digital.core" ], [ "NodeWithoutDelay", "de.neemann.digital.core" ], [ "ExceptionWithOrigin", "de.neemann.digital.core" ], [ "ObservableValue", "de.neemann.digital.core" ], [ "SpeedTest", "de.neemann.digital.core" ], [ "BurnException", "de.neemann.digital.core" ], [ "GlobalValues", "de.neemann.digital.core" ], [ "MIDI", "de.neemann.digital.core.io" ], [ "RGBLED", "de.neemann.digital.core.io" ], [ "Out", "de.neemann.digital.core.io" ], [ "RotEncoder", "de.neemann.digital.core.io" ], [ "PinControl", "de.neemann.digital.core.io" ], [ "DipSwitch", "de.neemann.digital.core.io" ], [ "CommonConnectionType", "de.neemann.digital.core.io" ], [ "LightBulb", "de.neemann.digital.core.io" ], [ "Probe", "de.neemann.digital.core.io" ], [ "Button", "de.neemann.digital.core.io" ], [ "ButtonLED", "de.neemann.digital.core.io" ], [ "In", "de.neemann.digital.core.io" ], [ "StepperMotorUnipolar", "de.neemann.digital.core.io" ], [ "ProbeMode", "de.neemann.digital.core.io" ], [ "NotConnected", "de.neemann.digital.core.io" ], [ "MIDIHelper", "de.neemann.digital.core.io" ], [ "StepperMotorBipolar", "de.neemann.digital.core.io" ], [ "Const", "de.neemann.digital.core.io" ], [ "PowerSupply", "de.neemann.digital.core.io" ], [ "Ground", "de.neemann.digital.core.io" ], [ "InValue", "de.neemann.digital.core.io" ], [ "VDD", "de.neemann.digital.core.io" ], [ "ServerHolder", "de.neemann.digital.core.io.telnet" ], [ "Telnet", "de.neemann.digital.core.io.telnet" ], [ "ByteBuffer", "de.neemann.digital.core.io.telnet" ], [ "Server", "de.neemann.digital.core.io.telnet" ], [ "ElementAttributes", "de.neemann.digital.core.element" ], [ "Element", "de.neemann.digital.core.element" ], [ "ElementFactory", "de.neemann.digital.core.element" ], [ "PinInfo", "de.neemann.digital.core.element" ], [ "PinDescriptions", "de.neemann.digital.core.element" ], [ "PinDescription", "de.neemann.digital.core.element" ], [ "Keys", "de.neemann.digital.core.element" ], [ "Rotation", "de.neemann.digital.core.element" ], [ "AttributeListener", "de.neemann.digital.core.element" ], [ "Key", "de.neemann.digital.core.element" ], [ "ImmutableList", "de.neemann.digital.core.element" ], [ "ElementTypeDescription", "de.neemann.digital.core.element" ], [ "FanIn", "de.neemann.digital.core.basic" ], [ "NOr", "de.neemann.digital.core.basic" ], [ "And", "de.neemann.digital.core.basic" ], [ "XNOr", "de.neemann.digital.core.basic" ], [ "XOr", "de.neemann.digital.core.basic" ], [ "Not", "de.neemann.digital.core.basic" ], [ "NAnd", "de.neemann.digital.core.basic" ], [ "Function", "de.neemann.digital.core.basic" ], [ "Or", "de.neemann.digital.core.basic" ], [ "ExceptionWithOriginInterface", "de.neemann.digital.core" ], [ "ModelEvent", "de.neemann.digital.core" ], [ "BacktrackException", "de.neemann.digital.core" ], [ "PlainSwitch", "de.neemann.digital.core.switching" ], [ "FGPFET", "de.neemann.digital.core.switching" ], [ "NFET", "de.neemann.digital.core.switching" ], [ "FGNFET", "de.neemann.digital.core.switching" ], [ "PFET", "de.neemann.digital.core.switching" ], [ "PlainSwitchDT", "de.neemann.digital.core.switching" ], [ "TransGate", "de.neemann.digital.core.switching" ], [ "SwitchDT", "de.neemann.digital.core.switching" ], [ "Relay", "de.neemann.digital.core.switching" ], [ "RelayDT", "de.neemann.digital.core.switching" ], [ "Switch", "de.neemann.digital.core.switching" ], [ "Fuse", "de.neemann.digital.core.switching" ], [ "Reset", "de.neemann.digital.core.wiring" ], [ "Stop", "de.neemann.digital.core.wiring" ], [ "Decoder", "de.neemann.digital.core.wiring" ], [ "Delay", "de.neemann.digital.core.wiring" ], [ "Driver", "de.neemann.digital.core.wiring" ], [ "DataBus", "de.neemann.digital.core.wiring.bus" ], [ "SingleBusHandler", "de.neemann.digital.core.wiring.bus" ], [ "ConnectedBusHandler", "de.neemann.digital.core.wiring.bus" ], [ "AbstractBusHandler", "de.neemann.digital.core.wiring.bus" ], [ "BusModelStateObserver", "de.neemann.digital.core.wiring.bus" ], [ "CommonBusValue", "de.neemann.digital.core.wiring.bus" ], [ "DriverInvSel", "de.neemann.digital.core.wiring" ], [ "PriorityEncoder", "de.neemann.digital.core.wiring" ], [ "BusSplitter", "de.neemann.digital.core.wiring" ], [ "Splitter", "de.neemann.digital.core.wiring" ], [ "Multiplexer", "de.neemann.digital.core.wiring" ], [ "BitSelector", "de.neemann.digital.core.wiring" ], [ "Break", "de.neemann.digital.core.wiring" ], [ "Clock", "de.neemann.digital.core.wiring" ], [ "AsyncSeq", "de.neemann.digital.core.wiring" ], [ "Demultiplexer", "de.neemann.digital.core.wiring" ], [ "BitsException", "de.neemann.digital.core" ], [ "NodeInterface", "de.neemann.digital.core" ], [ "NodeException", "de.neemann.digital.core" ], [ "FlipflopDAsync", "de.neemann.digital.core.flipflops" ], [ "FlipflopD", "de.neemann.digital.core.flipflops" ], [ "FlipflopRSAsync", "de.neemann.digital.core.flipflops" ], [ "FlipflopT", "de.neemann.digital.core.flipflops" ], [ "FlipflopJKAsync", "de.neemann.digital.core.flipflops" ], [ "FlipflopJK", "de.neemann.digital.core.flipflops" ], [ "Monoflop", "de.neemann.digital.core.flipflops" ], [ "FlipflopRS", "de.neemann.digital.core.flipflops" ], [ "FlipflopBit", "de.neemann.digital.core.flipflops" ], [ "BarrelShifter", "de.neemann.digital.core.arithmetic" ], [ "Mul", "de.neemann.digital.core.arithmetic" ], [ "Neg", "de.neemann.digital.core.arithmetic" ], [ "BitExtender", "de.neemann.digital.core.arithmetic" ], [ "Add", "de.neemann.digital.core.arithmetic" ], [ "Div", "de.neemann.digital.core.arithmetic" ], [ "LeftRightFormat", "de.neemann.digital.core.arithmetic" ], [ "PRNG", "de.neemann.digital.core.arithmetic" ], [ "Sub", "de.neemann.digital.core.arithmetic" ], [ "BarrelShifterMode", "de.neemann.digital.core.arithmetic" ], [ "Comparator", "de.neemann.digital.core.arithmetic" ], [ "BitCount", "de.neemann.digital.core.arithmetic" ], [ "ObservableValues", "de.neemann.digital.core" ], [ "Value", "de.neemann.digital.core" ], [ "IntFormat", "de.neemann.digital.core" ], [ "SyncAccess", "de.neemann.digital.core" ], [ "Bits", "de.neemann.digital.core" ], [ "ProcessInterface", "de.neemann.digital.core.extern.handler" ], [ "StdIOInterface", "de.neemann.digital.core.extern.handler" ], [ "ApplicationVerilogStdIO", "de.neemann.digital.core.extern" ], [ "Application", "de.neemann.digital.core.extern" ], [ "External", "de.neemann.digital.core.extern" ], [ "Port", "de.neemann.digital.core.extern" ], [ "PortDefinition", "de.neemann.digital.core.extern" ], [ "ApplicationGHDL", "de.neemann.digital.core.extern" ], [ "ApplicationIVerilog", "de.neemann.digital.core.extern" ], [ "ApplicationVHDLStdIO", "de.neemann.digital.core.extern" ], [ "VHDLTokenizer", "de.neemann.digital.core.extern" ], [ "ApplicationGeneric", "de.neemann.digital.core.extern" ], [ "Options", "de.neemann.digital.core.extern" ], [ "VerilogTokenizer", "de.neemann.digital.core.extern" ], [ "ExternalFile", "de.neemann.digital.core.extern" ], [ "ProcessStarter", "de.neemann.digital.core.extern" ], [ "ModelEventType", "de.neemann.digital.core" ], [ "Observer", "de.neemann.digital.core" ], [ "ErrorDetector", "de.neemann.digital.core" ], [ "Statistics", "de.neemann.digital.core.stats" ], [ "Countable", "de.neemann.digital.core.stats" ], [ "Model", "de.neemann.digital.core" ], [ "Signal", "de.neemann.digital.core" ], [ "StringList", "de.neemann.digital" ], [ "XStreamValid", "de.neemann.digital" ], [ "StatsExport", "de.neemann.digital.cli" ], [ "SVGExport", "de.neemann.digital.cli" ], [ "CommandLineTester", "de.neemann.digital.cli" ], [ "CSVWriter", "de.neemann.digital.cli" ], [ "BasicCommand", "de.neemann.digital.cli.cli" ], [ "Argument", "de.neemann.digital.cli.cli" ], [ "CLIException", "de.neemann.digital.cli.cli" ], [ "Muxer", "de.neemann.digital.cli.cli" ], [ "ArgumentKey", "de.neemann.digital.cli.cli" ], [ "NamedCommand", "de.neemann.digital.cli.cli" ], [ "CLICommand", "de.neemann.digital.cli.cli" ], [ "ArgumentBase", "de.neemann.digital.cli.cli" ], [ "CircuitLoader", "de.neemann.digital.cli" ], [ "Main", "de.neemann.digital.cli" ], [ "Modification", "de.neemann.digital.undo" ], [ "Modifications", "de.neemann.digital.undo" ], [ "ModifyException", "de.neemann.digital.undo" ], [ "Copyable", "de.neemann.digital.undo" ], [ "UndoManager", "de.neemann.digital.undo" ], [ "ChangedListener", "de.neemann.digital.undo" ], [ "CircuitRepresentation", "de.neemann.digital.fsm" ], [ "Transition", "de.neemann.digital.fsm" ], [ "Movable", "de.neemann.digital.fsm" ], [ "MouseMovable", "de.neemann.digital.fsm" ], [ "Optimizer", "de.neemann.digital.fsm" ], [ "Permute", "de.neemann.digital.fsm" ], [ "FiniteStateMachineException", "de.neemann.digital.fsm" ], [ "TransitionTableCreator", "de.neemann.digital.fsm" ], [ "ValueParser", "de.neemann.digital.fsm" ], [ "WaitGroup", "de.neemann.digital.fsm" ], [ "FSMComponent", "de.neemann.digital.fsm.gui" ], [ "FSMFrame", "de.neemann.digital.fsm.gui" ], [ "OptimizerDialog", "de.neemann.digital.fsm.gui" ], [ "FSMDemos", "de.neemann.digital.fsm" ], [ "FSM", "de.neemann.digital.fsm" ], [ "State", "de.neemann.digital.fsm" ], [ "Lang", "de.neemann.digital.lang" ], [ "LineListenerResolveDontCare", "de.neemann.digital.testing" ], [ "TestingDataException", "de.neemann.digital.testing" ], [ "UnitTester", "de.neemann.digital.testing" ], [ "FolderTestRunner", "de.neemann.digital.testing" ], [ "TestExecutor", "de.neemann.digital.testing" ], [ "Transitions", "de.neemann.digital.testing" ], [ "TestCaseDescription", "de.neemann.digital.testing" ], [ "TestCaseElement", "de.neemann.digital.testing" ], [ "LineEmitterRepeat", "de.neemann.digital.testing.parser" ], [ "Parser", "de.neemann.digital.testing.parser" ], [ "ValueAppenderBits", "de.neemann.digital.testing.parser" ], [ "ParserException", "de.neemann.digital.testing.parser" ], [ "Context", "de.neemann.digital.testing.parser" ], [ "ModelInitializer", "de.neemann.digital.testing.parser" ], [ "Expression", "de.neemann.digital.testing.parser" ], [ "LineEmitterList", "de.neemann.digital.testing.parser" ], [ "TestRow", "de.neemann.digital.testing.parser" ], [ "LineEmitter", "de.neemann.digital.testing.parser" ], [ "LineEmitterWhile", "de.neemann.digital.testing.parser" ], [ "Tokenizer", "de.neemann.digital.testing.parser" ], [ "LineEmitterSimple", "de.neemann.digital.testing.parser" ], [ "Random", "de.neemann.digital.testing.parser.functions" ], [ "SignExtend", "de.neemann.digital.testing.parser.functions" ], [ "IfThenElse", "de.neemann.digital.testing.parser.functions" ], [ "Function", "de.neemann.digital.testing.parser.functions" ], [ "LineListener", "de.neemann.digital.testing.parser" ], [ "VirtualSignal", "de.neemann.digital.testing.parser" ], [ "ValueAppender", "de.neemann.digital.testing.parser" ], [ "OperatorPrecedence", "de.neemann.digital.testing.parser" ], [ "TestResultListener", "de.neemann.digital.testing" ], [ "MatchedValue", "de.neemann.digital.testing" ], [ "TestResult", "de.neemann.digital.testing" ], [ "MinimizerInterface", "de.neemann.digital.analyse" ], [ "LabelNumbering", "de.neemann.digital.analyse" ], [ "ModelAnalyser", "de.neemann.digital.analyse" ], [ "CSVImporter", "de.neemann.digital.analyse" ], [ "BoolTableExpanded", "de.neemann.digital.analyse" ], [ "TruthTableTableModel", "de.neemann.digital.analyse" ], [ "TableReducer", "de.neemann.digital.analyse.quinemc" ], [ "PrimeSelector", "de.neemann.digital.analyse.quinemc.primeselector" ], [ "BruteForce", "de.neemann.digital.analyse.quinemc.primeselector" ], [ "LargestFirst", "de.neemann.digital.analyse.quinemc.primeselector" ], [ "BruteForceGetAll", "de.neemann.digital.analyse.quinemc.primeselector" ], [ "PrimeSelectorDefault", "de.neemann.digital.analyse.quinemc.primeselector" ], [ "BoolTableByteArray", "de.neemann.digital.analyse.quinemc" ], [ "IndependentChecker", "de.neemann.digital.analyse.quinemc" ], [ "QuineMcCluskey", "de.neemann.digital.analyse.quinemc" ], [ "BoolTableExpression", "de.neemann.digital.analyse.quinemc" ], [ "BoolTableBoolArray", "de.neemann.digital.analyse.quinemc" ], [ "BoolTable", "de.neemann.digital.analyse.quinemc" ], [ "TableRows", "de.neemann.digital.analyse.quinemc" ], [ "ThreeStateValue", "de.neemann.digital.analyse.quinemc" ], [ "QuineMcCluskeyExam", "de.neemann.digital.analyse.quinemc" ], [ "TableRow", "de.neemann.digital.analyse.quinemc" ], [ "TruthTableConverter", "de.neemann.digital.analyse" ], [ "DetermineJKStateMachine", "de.neemann.digital.analyse" ], [ "Parser", "de.neemann.digital.analyse.parser" ], [ "ParseException", "de.neemann.digital.analyse.parser" ], [ "Tokenizer", "de.neemann.digital.analyse.parser" ], [ "ModelAnalyserInfo", "de.neemann.digital.analyse" ], [ "AnalyseException", "de.neemann.digital.analyse" ], [ "DependencyAnalyser", "de.neemann.digital.analyse" ], [ "SubstituteLibrary", "de.neemann.digital.analyse" ], [ "TruthTableFormatterHex", "de.neemann.digital.analyse.format" ], [ "TruthTableFormatter", "de.neemann.digital.analyse.format" ], [ "TruthTableFormatterTestCase", "de.neemann.digital.analyse.format" ], [ "TruthTableFormatterCSV", "de.neemann.digital.analyse.format" ], [ "TruthTableFormatterLaTeX", "de.neemann.digital.analyse.format" ], [ "MinimizerQuineMcCluskey", "de.neemann.digital.analyse" ], [ "ContextFiller", "de.neemann.digital.analyse.expression" ], [ "BitSetter", "de.neemann.digital.analyse.expression" ], [ "ExpressionVisitor", "de.neemann.digital.analyse.expression" ], [ "ContextMap", "de.neemann.digital.analyse.expression" ], [ "ComplexityVisitor", "de.neemann.digital.analyse.expression" ], [ "Operation", "de.neemann.digital.analyse.expression" ], [ "Context", "de.neemann.digital.analyse.expression" ], [ "NInputs", "de.neemann.digital.analyse.expression.modify" ], [ "NOr", "de.neemann.digital.analyse.expression.modify" ], [ "ExpressionModifier", "de.neemann.digital.analyse.expression.modify" ], [ "NAnd", "de.neemann.digital.analyse.expression.modify" ], [ "Constant", "de.neemann.digital.analyse.expression" ], [ "Expression", "de.neemann.digital.analyse.expression" ], [ "Variable", "de.neemann.digital.analyse.expression" ], [ "ExpressionException", "de.neemann.digital.analyse.expression" ], [ "ComplexityInclNotVisitor", "de.neemann.digital.analyse.expression" ], [ "Equals", "de.neemann.digital.analyse.expression" ], [ "FormatToExpression", "de.neemann.digital.analyse.expression.format" ], [ "FormatToTable", "de.neemann.digital.analyse.expression.format" ], [ "Formatter", "de.neemann.digital.analyse.expression.format" ], [ "FormatterException", "de.neemann.digital.analyse.expression.format" ], [ "FormatToTableLatex", "de.neemann.digital.analyse.expression.format" ], [ "Not", "de.neemann.digital.analyse.expression" ], [ "VariableVisitor", "de.neemann.digital.analyse.expression" ], [ "NamedExpression", "de.neemann.digital.analyse.expression" ], [ "MinimizerQuineMcCluskeyExam", "de.neemann.digital.analyse" ], [ "TruthTable", "de.neemann.digital.analyse" ], [ "SplitPinString", "de.neemann.digital.analyse" ], [ "CycleDetector", "de.neemann.digital.analyse" ], [ "DigitalRemoteInterface", "de.neemann.digital.gui" ], [ "TextSearchFilter", "de.neemann.digital.gui" ], [ "ExportZipAction", "de.neemann.digital.gui" ], [ "SettingsBase", "de.neemann.digital.gui" ], [ "DocumentationLocator", "de.neemann.digital.gui" ], [ "InitialTutorial", "de.neemann.digital.gui.tutorial" ], [ "InsertAction", "de.neemann.digital.gui" ], [ "StatusInterface", "de.neemann.digital.gui" ], [ "SearchTextField", "de.neemann.digital.gui" ], [ "SaveAsHelper", "de.neemann.digital.gui" ], [ "FileHistory", "de.neemann.digital.gui" ], [ "ReleaseInfo", "de.neemann.digital.gui.release" ], [ "CheckForNewRelease", "de.neemann.digital.gui.release" ], [ "StateInterface", "de.neemann.digital.gui.state" ], [ "StateManager", "de.neemann.digital.gui.state" ], [ "State", "de.neemann.digital.gui.state" ], [ "CircuitScrollPanel", "de.neemann.digital.gui.components" ], [ "ItemPicker", "de.neemann.digital.gui.components" ], [ "LibraryTreeModel", "de.neemann.digital.gui.components.tree" ], [ "SelectTree", "de.neemann.digital.gui.components.tree" ], [ "WindowPosManager", "de.neemann.digital.gui.components" ], [ "CustomShapeEditor", "de.neemann.digital.gui.components" ], [ "TransformHolder", "de.neemann.digital.gui.components" ], [ "EditorPanel", "de.neemann.digital.gui.components" ], [ "BehavioralFixtureCreator", "de.neemann.digital.gui.components" ], [ "EditorFactory", "de.neemann.digital.gui.components" ], [ "OrderMerger", "de.neemann.digital.gui.components" ], [ "ElementOrderer", "de.neemann.digital.gui.components" ], [ "ModifyMoveSelected", "de.neemann.digital.gui.components.modification" ], [ "ModifyMoveWire", "de.neemann.digital.gui.components.modification" ], [ "ModificationOfWire", "de.neemann.digital.gui.components.modification" ], [ "ModifyDeleteRect", "de.neemann.digital.gui.components.modification" ], [ "ModifyInsertWires", "de.neemann.digital.gui.components.modification" ], [ "ModifyInsertWire", "de.neemann.digital.gui.components.modification" ], [ "ModificationOfVisualElement", "de.neemann.digital.gui.components.modification" ], [ "ModifyCircuitAttributes", "de.neemann.digital.gui.components.modification" ], [ "ModifyDeleteWire", "de.neemann.digital.gui.components.modification" ], [ "ModifyMoveAndRotElement", "de.neemann.digital.gui.components.modification" ], [ "ModifyMeasurementOrdering", "de.neemann.digital.gui.components.modification" ], [ "ModifyDeleteElement", "de.neemann.digital.gui.components.modification" ], [ "ModifyAttribute", "de.neemann.digital.gui.components.modification" ], [ "ModifyAttributes", "de.neemann.digital.gui.components.modification" ], [ "ModifyInsertElement", "de.neemann.digital.gui.components.modification" ], [ "DataEditor", "de.neemann.digital.gui.components" ], [ "CircuitModifierPostClosed", "de.neemann.digital.gui.components" ], [ "CharDeleter", "de.neemann.digital.gui.components.terminal" ], [ "ConsoleTerminal", "de.neemann.digital.gui.components.terminal" ], [ "Terminal", "de.neemann.digital.gui.components.terminal" ], [ "TerminalDialog", "de.neemann.digital.gui.components.terminal" ], [ "TerminalInterface", "de.neemann.digital.gui.components.terminal" ], [ "Keyboard", "de.neemann.digital.gui.components.terminal" ], [ "KeyboardDialog", "de.neemann.digital.gui.components.terminal" ], [ "Editor", "de.neemann.digital.gui.components" ], [ "VarRectList", "de.neemann.digital.gui.components.karnaugh" ], [ "KarnaughMap", "de.neemann.digital.gui.components.karnaugh" ], [ "KarnaughMapComponent", "de.neemann.digital.gui.components.karnaugh" ], [ "KarnaughMapDialog", "de.neemann.digital.gui.components.karnaugh" ], [ "MapLayout", "de.neemann.digital.gui.components.karnaugh" ], [ "KarnaughException", "de.neemann.digital.gui.components.karnaugh" ], [ "CircuitTransferable", "de.neemann.digital.gui.components" ], [ "ElementHelpDialog", "de.neemann.digital.gui.components" ], [ "TestCaseDescriptionDialog", "de.neemann.digital.gui.components.testing" ], [ "ValueTableDialog", "de.neemann.digital.gui.components.testing" ], [ "TestCaseDescriptionEditor", "de.neemann.digital.gui.components.testing" ], [ "TestAllDialog", "de.neemann.digital.gui.components.testing" ], [ "ExpressionListenerOptimizeJK", "de.neemann.digital.gui.components.table" ], [ "LaTeXExpressionListener", "de.neemann.digital.gui.components.table" ], [ "HardwareDescriptionGenerator", "de.neemann.digital.gui.components.table.hardware" ], [ "GenerateFile", "de.neemann.digital.gui.components.table.hardware" ], [ "GenerateCUPL", "de.neemann.digital.gui.components.table.hardware" ], [ "ExpressionListener", "de.neemann.digital.gui.components.table" ], [ "ReorderOutputs", "de.neemann.digital.gui.components.table" ], [ "AllSolutionsDialog", "de.neemann.digital.gui.components.table" ], [ "ExpressionListenerJK", "de.neemann.digital.gui.components.table" ], [ "ExpressionListenerCSVCondensed", "de.neemann.digital.gui.components.table" ], [ "ExpressionCreator", "de.neemann.digital.gui.components.table" ], [ "TableDialog", "de.neemann.digital.gui.components.table" ], [ "BuilderExpressionCreator", "de.neemann.digital.gui.components.table" ], [ "ExpressionComponent", "de.neemann.digital.gui.components.table" ], [ "PlainTextExpressionListener", "de.neemann.digital.gui.components.table" ], [ "TableReorderManager", "de.neemann.digital.gui.components.table" ], [ "ShowStringDialog", "de.neemann.digital.gui.components.table" ], [ "ReorderInputs", "de.neemann.digital.gui.components.table" ], [ "ProgressDialog", "de.neemann.digital.gui.components.table" ], [ "CheckResultListener", "de.neemann.digital.gui.components.table" ], [ "ExpressionListenerStore", "de.neemann.digital.gui.components.table" ], [ "AttributeDialog", "de.neemann.digital.gui.components" ], [ "ProbeDialog", "de.neemann.digital.gui.components" ], [ "ColorSchemeEditor", "de.neemann.digital.gui.components" ], [ "ROMEditorDialog", "de.neemann.digital.gui.components" ], [ "LabelGenerator", "de.neemann.digital.gui.components" ], [ "SingleValueDialog", "de.neemann.digital.gui.components" ], [ "ExpressionDialog", "de.neemann.digital.gui.components.expression" ], [ "CircuitComponent", "de.neemann.digital.gui.components" ], [ "VGA", "de.neemann.digital.gui.components.graphics" ], [ "GraphicCard", "de.neemann.digital.gui.components.graphics" ], [ "LedMatrix", "de.neemann.digital.gui.components.graphics" ], [ "VGADialog", "de.neemann.digital.gui.components.graphics" ], [ "MoveFocusTo", "de.neemann.digital.gui.components.graphics" ], [ "LedMatrixComponent", "de.neemann.digital.gui.components.graphics" ], [ "GraphicDialog", "de.neemann.digital.gui.components.graphics" ], [ "GraphicComponent", "de.neemann.digital.gui.components.graphics" ], [ "LedMatrixDialog", "de.neemann.digital.gui.components.graphics" ], [ "ConstraintsBuilder", "de.neemann.digital.gui.components" ], [ "ScopeTrigger", "de.neemann.digital.gui.components.data" ], [ "GraphDialog", "de.neemann.digital.gui.components.data" ], [ "GraphComponent", "de.neemann.digital.gui.components.data" ], [ "DummyElement", "de.neemann.digital.gui.components.data" ], [ "ValueTableObserver", "de.neemann.digital.gui.components.data" ], [ "CircuitModifier", "de.neemann.digital.gui.components" ], [ "CopiedElementLabelRenamer", "de.neemann.digital.gui.components" ], [ "TextLineNumber", "de.neemann.digital.gui.components" ], [ "InsertHistory", "de.neemann.digital.gui" ], [ "ProgramMemoryLoader", "de.neemann.digital.gui" ], [ "Main", "de.neemann.digital.gui" ], [ "StatsDialog", "de.neemann.digital.gui" ], [ "WindowManager", "de.neemann.digital.gui" ], [ "Settings", "de.neemann.digital.gui" ], [ "LibrarySelector", "de.neemann.digital.gui" ], [ "DigitalUncaughtExceptionHandler", "de.neemann.digital.gui" ], [ "NumberingWizard", "de.neemann.digital.gui" ], [ "HandlerInterface", "de.neemann.digital.gui.remote" ], [ "RemoteSever", "de.neemann.digital.gui.remote" ], [ "RemoteException", "de.neemann.digital.gui.remote" ], [ "DigitalHandler", "de.neemann.digital.gui.remote" ], [ "ModelModifier", "de.neemann.digital.gui" ], [ "VerilogCreator", "de.neemann.digital.hdl.verilog2" ], [ "VerilogRenaming", "de.neemann.digital.hdl.verilog2" ], [ "VerilogGenerator", "de.neemann.digital.hdl.verilog2" ], [ "VerilogTestBenchCreator", "de.neemann.digital.hdl.verilog2" ], [ "VerilogElement", "de.neemann.digital.hdl.verilog2.lib" ], [ "VerilogTemplate", "de.neemann.digital.hdl.verilog2.lib" ], [ "VerilogLibrary", "de.neemann.digital.hdl.verilog2" ], [ "CodePrinter", "de.neemann.digital.hdl.printer" ], [ "CodePrinterStr", "de.neemann.digital.hdl.printer" ], [ "Statements", "de.neemann.digital.hdl.hgs" ], [ "Parser", "de.neemann.digital.hdl.hgs" ], [ "ParserException", "de.neemann.digital.hdl.hgs" ], [ "Statement", "de.neemann.digital.hdl.hgs" ], [ "Context", "de.neemann.digital.hdl.hgs" ], [ "FirstClassFunctionCall", "de.neemann.digital.hdl.hgs.function" ], [ "InnerFunction", "de.neemann.digital.hdl.hgs.function" ], [ "JavaClass", "de.neemann.digital.hdl.hgs.function" ], [ "FirstClassFunction", "de.neemann.digital.hdl.hgs.function" ], [ "Func", "de.neemann.digital.hdl.hgs.function" ], [ "Function", "de.neemann.digital.hdl.hgs.function" ], [ "Expression", "de.neemann.digital.hdl.hgs" ], [ "HGSEvalException", "de.neemann.digital.hdl.hgs" ], [ "Tokenizer", "de.neemann.digital.hdl.hgs" ], [ "ReferenceToFunc", "de.neemann.digital.hdl.hgs.refs" ], [ "ReferenceToStruct", "de.neemann.digital.hdl.hgs.refs" ], [ "ReferenceToArray", "de.neemann.digital.hdl.hgs.refs" ], [ "Reference", "de.neemann.digital.hdl.hgs.refs" ], [ "ReferenceToVar", "de.neemann.digital.hdl.hgs.refs" ], [ "Value", "de.neemann.digital.hdl.hgs" ], [ "HGSMap", "de.neemann.digital.hdl.hgs" ], [ "HGSArray", "de.neemann.digital.hdl.hgs" ], [ "Separator", "de.neemann.digital.hdl.vhdl2" ], [ "VHDLLibrary", "de.neemann.digital.hdl.vhdl2" ], [ "VHDLCreator", "de.neemann.digital.hdl.vhdl2" ], [ "VHDLRenaming", "de.neemann.digital.hdl.vhdl2" ], [ "VHDLGenerator", "de.neemann.digital.hdl.vhdl2" ], [ "VHDLEntity", "de.neemann.digital.hdl.vhdl2.entities" ], [ "VHDLTemplate", "de.neemann.digital.hdl.vhdl2.entities" ], [ "VHDLTemplateFunctions", "de.neemann.digital.hdl.vhdl2.entities" ], [ "VHDLTestBenchCreator", "de.neemann.digital.hdl.vhdl2" ], [ "HDLModel", "de.neemann.digital.hdl.model2" ], [ "HDLNode", "de.neemann.digital.hdl.model2" ], [ "HDLNet", "de.neemann.digital.hdl.model2" ], [ "Printable", "de.neemann.digital.hdl.model2" ], [ "HDLException", "de.neemann.digital.hdl.model2" ], [ "HDLPort", "de.neemann.digital.hdl.model2" ], [ "HasName", "de.neemann.digital.hdl.model2" ], [ "InlineManyToOne", "de.neemann.digital.hdl.model2.optimizations" ], [ "MergeAssignments", "de.neemann.digital.hdl.model2.optimizations" ], [ "Optimization", "de.neemann.digital.hdl.model2.optimizations" ], [ "MergeConstants", "de.neemann.digital.hdl.model2.optimizations" ], [ "ReplaceOneToMany", "de.neemann.digital.hdl.model2.optimizations" ], [ "NameConstantSignals", "de.neemann.digital.hdl.model2.optimizations" ], [ "OptimizeExpressions", "de.neemann.digital.hdl.model2.optimizations" ], [ "RemoveConstantSignals", "de.neemann.digital.hdl.model2.optimizations" ], [ "NodeSorterExpressionBased", "de.neemann.digital.hdl.model2.optimizations" ], [ "HDLNodeSplitterManyToOne", "de.neemann.digital.hdl.model2" ], [ "HDLNodeCustom", "de.neemann.digital.hdl.model2" ], [ "HDLNodeAssignment", "de.neemann.digital.hdl.model2" ], [ "HDLCircuit", "de.neemann.digital.hdl.model2" ], [ "ExprVar", "de.neemann.digital.hdl.model2.expression" ], [ "Visitor", "de.neemann.digital.hdl.model2.expression" ], [ "ExprVarRange", "de.neemann.digital.hdl.model2.expression" ], [ "Expression", "de.neemann.digital.hdl.model2.expression" ], [ "ExpressionOptimizer", "de.neemann.digital.hdl.model2.expression" ], [ "ExprNot", "de.neemann.digital.hdl.model2.expression" ], [ "ExprConstant", "de.neemann.digital.hdl.model2.expression" ], [ "ExprOperate", "de.neemann.digital.hdl.model2.expression" ], [ "ExprUsingNet", "de.neemann.digital.hdl.model2.expression" ], [ "HDLNodeBuildIn", "de.neemann.digital.hdl.model2" ], [ "HDLClockIntegrator", "de.neemann.digital.hdl.model2.clock" ], [ "ClockIntegratorGeneric", "de.neemann.digital.hdl.model2.clock" ], [ "ClockInfo", "de.neemann.digital.hdl.model2.clock" ], [ "HDLNodeSplitterOneToMany", "de.neemann.digital.hdl.model2" ], [ "FileLocator", "de.neemann.digital" ], [ "ValueTable", "de.neemann.digital.data" ], [ "ValueTableModel", "de.neemann.digital.data" ], [ "DataPlotter", "de.neemann.digital.data" ], [ "Value", "de.neemann.digital.data" ], [ "ExpressionExporter", "de.neemann.digital.builder" ], [ "ExpressionToFileExporter", "de.neemann.digital.builder" ], [ "RotationByteArrayOutputStream", "de.neemann.digital.builder.tt2" ], [ "TT2Exporter", "de.neemann.digital.builder.tt2" ], [ "StartATF150xFitter", "de.neemann.digital.builder.tt2" ], [ "OSExecute", "de.neemann.digital.builder.tt2" ], [ "CreateCHN", "de.neemann.digital.builder.ATF150x" ], [ "ATFDevice", "de.neemann.digital.builder.ATF150x" ], [ "ATFDialog", "de.neemann.digital.builder.ATF150x" ], [ "PL", "de.neemann.digital.builder.ATF150x" ], [ "ATF150xCuplExporter", "de.neemann.digital.builder.ATF150x" ], [ "PinMap", "de.neemann.digital.builder" ], [ "PinMapException", "de.neemann.digital.builder" ], [ "FragmentExpression", "de.neemann.digital.builder.circuit" ], [ "FragmentVisualElement", "de.neemann.digital.builder.circuit" ], [ "FragmentSameInValue", "de.neemann.digital.builder.circuit" ], [ "CircuitBuilder", "de.neemann.digital.builder.circuit" ], [ "FragmentVisitor", "de.neemann.digital.builder.circuit" ], [ "FragmentVariable", "de.neemann.digital.builder.circuit" ], [ "Fragment", "de.neemann.digital.builder.circuit" ], [ "Box", "de.neemann.digital.builder.circuit" ], [ "Gal16v8JEDECExporter", "de.neemann.digital.builder.Gal16v8" ], [ "CuplExporter", "de.neemann.digital.builder.Gal16v8" ], [ "BuilderCollectorGAL", "de.neemann.digital.builder.Gal16v8" ], [ "CleanNameBuilder", "de.neemann.digital.builder" ], [ "BuilderCollector", "de.neemann.digital.builder" ], [ "BuilderInterface", "de.neemann.digital.builder" ], [ "BuilderException", "de.neemann.digital.builder" ], [ "Gal22v10JEDECExporter", "de.neemann.digital.builder.Gal22v10" ], [ "Gal22v10CuplExporter", "de.neemann.digital.builder.Gal22v10" ], [ "FuseMap", "de.neemann.digital.builder.jedec" ], [ "FuseMapFillerException", "de.neemann.digital.builder.jedec" ], [ "FuseMapFiller", "de.neemann.digital.builder.jedec" ], [ "JedecWriter", "de.neemann.digital.builder.jedec" ], [ "GenericCode", "de.neemann.digital.draw.library" ], [ "ElementLibrary", "de.neemann.digital.draw.library" ], [ "GenericInitCode", "de.neemann.digital.draw.library" ], [ "Visitor", "de.neemann.digital.draw.library" ], [ "ComponentManager", "de.neemann.digital.draw.library" ], [ "LibraryListener", "de.neemann.digital.draw.library" ], [ "JarComponentManager", "de.neemann.digital.draw.library" ], [ "ElementLibraryFolder", "de.neemann.digital.draw.library" ], [ "CustomElement", "de.neemann.digital.draw.library" ], [ "ElementNotFoundNotification", "de.neemann.digital.draw.library" ], [ "ElementNotFoundException", "de.neemann.digital.draw.library" ], [ "ComponentSource", "de.neemann.digital.draw.library" ], [ "LibraryInterface", "de.neemann.digital.draw.library" ], [ "ResolveGenerics", "de.neemann.digital.draw.library" ], [ "LibraryNode", "de.neemann.digital.draw.library" ], [ "ElementTypeDescriptionCustom", "de.neemann.digital.draw.library" ], [ "InvalidNodeException", "de.neemann.digital.draw.library" ], [ "NumStringComparator", "de.neemann.digital.draw.library" ], [ "InputShape", "de.neemann.digital.draw.shapes" ], [ "Interactor", "de.neemann.digital.draw.shapes" ], [ "ButtonShape", "de.neemann.digital.draw.shapes" ], [ "GenericShape", "de.neemann.digital.draw.shapes" ], [ "Drawable", "de.neemann.digital.draw.shapes" ], [ "DelayShape", "de.neemann.digital.draw.shapes" ], [ "DiodeBackwardShape", "de.neemann.digital.draw.shapes" ], [ "FuseShape", "de.neemann.digital.draw.shapes" ], [ "FETShapeP", "de.neemann.digital.draw.shapes" ], [ "DILShape", "de.neemann.digital.draw.shapes" ], [ "DipSwitchShape", "de.neemann.digital.draw.shapes" ], [ "SwitchShape", "de.neemann.digital.draw.shapes" ], [ "LightBulbShape", "de.neemann.digital.draw.shapes" ], [ "LayoutShape", "de.neemann.digital.draw.shapes" ], [ "SplitterShape", "de.neemann.digital.draw.shapes" ], [ "PolarityAwareLEDShape", "de.neemann.digital.draw.shapes" ], [ "ButtonLEDShape", "de.neemann.digital.draw.shapes" ], [ "RelayShape", "de.neemann.digital.draw.shapes" ], [ "ConstShape", "de.neemann.digital.draw.shapes" ], [ "BreakShape", "de.neemann.digital.draw.shapes" ], [ "GenericCodeShape", "de.neemann.digital.draw.shapes" ], [ "TextShape", "de.neemann.digital.draw.shapes" ], [ "SevenSegHexShape", "de.neemann.digital.draw.shapes" ], [ "ProbeShape", "de.neemann.digital.draw.shapes" ], [ "NotConnectedShape", "de.neemann.digital.draw.shapes" ], [ "StepperMotorShape", "de.neemann.digital.draw.shapes" ], [ "FETShape", "de.neemann.digital.draw.shapes" ], [ "BitSelShape", "de.neemann.digital.draw.shapes" ], [ "SevenSegShape", "de.neemann.digital.draw.shapes" ], [ "GenericInitCodeShape", "de.neemann.digital.draw.shapes" ], [ "RelayDTShape", "de.neemann.digital.draw.shapes" ], [ "RectShape", "de.neemann.digital.draw.shapes" ], [ "VDDShape", "de.neemann.digital.draw.shapes" ], [ "RAMShape", "de.neemann.digital.draw.shapes" ], [ "ScopeShape", "de.neemann.digital.draw.shapes" ], [ "DemuxerShape", "de.neemann.digital.draw.shapes" ], [ "FETShapeN", "de.neemann.digital.draw.shapes" ], [ "BusSplitterShape", "de.neemann.digital.draw.shapes" ], [ "PullUpShape", "de.neemann.digital.draw.shapes" ], [ "TestCaseShape", "de.neemann.digital.draw.shapes" ], [ "TunnelShape", "de.neemann.digital.draw.shapes" ], [ "MuxerShape", "de.neemann.digital.draw.shapes" ], [ "SwitchDTShape", "de.neemann.digital.draw.shapes" ], [ "PinControlShape", "de.neemann.digital.draw.shapes" ], [ "FGFETShapeN", "de.neemann.digital.draw.shapes" ], [ "TransGateShape", "de.neemann.digital.draw.shapes" ], [ "DiodeShape", "de.neemann.digital.draw.shapes" ], [ "ResetShape", "de.neemann.digital.draw.shapes" ], [ "DiodeForewardShape", "de.neemann.digital.draw.shapes" ], [ "SixteenShape", "de.neemann.digital.draw.shapes" ], [ "CustomCircuitShapeType", "de.neemann.digital.draw.shapes" ], [ "InteractorInterface", "de.neemann.digital.draw.shapes" ], [ "ShapeSpecificMatch", "de.neemann.digital.draw.shapes" ], [ "LEDShape", "de.neemann.digital.draw.shapes" ], [ "ClockShape", "de.neemann.digital.draw.shapes" ], [ "RGBLEDShape", "de.neemann.digital.draw.shapes" ], [ "RotEncoderShape", "de.neemann.digital.draw.shapes" ], [ "IEEEGenericShape", "de.neemann.digital.draw.shapes.ieee" ], [ "IEEEOrShape", "de.neemann.digital.draw.shapes.ieee" ], [ "IEEENotShape", "de.neemann.digital.draw.shapes.ieee" ], [ "IEEEAndShape", "de.neemann.digital.draw.shapes.ieee" ], [ "IEEEXOrShape", "de.neemann.digital.draw.shapes.ieee" ], [ "ObservableValueReader", "de.neemann.digital.draw.shapes" ], [ "SvgTemplate", "de.neemann.digital.draw.shapes.custom.svg" ], [ "TransformParser", "de.neemann.digital.draw.shapes.custom.svg" ], [ "Context", "de.neemann.digital.draw.shapes.custom.svg" ], [ "SvgException", "de.neemann.digital.draw.shapes.custom.svg" ], [ "SvgImporter", "de.neemann.digital.draw.shapes.custom.svg" ], [ "CustomShapeDescription", "de.neemann.digital.draw.shapes.custom" ], [ "CustomShape", "de.neemann.digital.draw.shapes.custom" ], [ "FGFETShapeP", "de.neemann.digital.draw.shapes" ], [ "OutputShape", "de.neemann.digital.draw.shapes" ], [ "GroundShape", "de.neemann.digital.draw.shapes" ], [ "AsyncClockShape", "de.neemann.digital.draw.shapes" ], [ "Shape", "de.neemann.digital.draw.shapes" ], [ "MissingShape", "de.neemann.digital.draw.shapes" ], [ "ShapeFactory", "de.neemann.digital.draw.shapes" ], [ "PullDownShape", "de.neemann.digital.draw.shapes" ], [ "DriverShape", "de.neemann.digital.draw.shapes" ], [ "SevenShape", "de.neemann.digital.draw.shapes" ], [ "DataShape", "de.neemann.digital.draw.shapes" ], [ "DotCreator", "de.neemann.digital.draw.elements" ], [ "Wire", "de.neemann.digital.draw.elements" ], [ "Movable", "de.neemann.digital.draw.elements" ], [ "Pins", "de.neemann.digital.draw.elements" ], [ "Circuit", "de.neemann.digital.draw.elements" ], [ "Tunnel", "de.neemann.digital.draw.elements" ], [ "PinException", "de.neemann.digital.draw.elements" ], [ "ElementOrder", "de.neemann.digital.draw.elements" ], [ "VisualElement", "de.neemann.digital.draw.elements" ], [ "Pin", "de.neemann.digital.draw.elements" ], [ "IOState", "de.neemann.digital.draw.elements" ], [ "WireMerger", "de.neemann.digital.draw.elements" ], [ "WireConsistencyChecker", "de.neemann.digital.draw.elements" ], [ "AsyncSequentialClock", "de.neemann.digital.draw.model" ], [ "ModelEntry", "de.neemann.digital.draw.model" ], [ "Net", "de.neemann.digital.draw.model" ], [ "ModelCreator", "de.neemann.digital.draw.model" ], [ "InverterConfig", "de.neemann.digital.draw.model" ], [ "NetList", "de.neemann.digital.draw.model" ], [ "RealTimeClock", "de.neemann.digital.draw.model" ], [ "Polygon", "de.neemann.digital.draw.graphics" ], [ "Orientation", "de.neemann.digital.draw.graphics" ], [ "Vector", "de.neemann.digital.draw.graphics" ], [ "SVGSettings", "de.neemann.digital.draw.graphics" ], [ "Transform", "de.neemann.digital.draw.graphics" ], [ "ColorKey", "de.neemann.digital.draw.graphics" ], [ "ExportFactory", "de.neemann.digital.draw.graphics" ], [ "GraphicsImage", "de.neemann.digital.draw.graphics" ], [ "VectorInterface", "de.neemann.digital.draw.graphics" ], [ "TextFormatSVG", "de.neemann.digital.draw.graphics" ], [ "TransformMatrix", "de.neemann.digital.draw.graphics" ], [ "TextFormatLaTeX", "de.neemann.digital.draw.graphics" ], [ "GraphicMinMax", "de.neemann.digital.draw.graphics" ], [ "GraphicTransform", "de.neemann.digital.draw.graphics" ], [ "ColorScheme", "de.neemann.digital.draw.graphics" ], [ "Style", "de.neemann.digital.draw.graphics" ], [ "GraphicSkipLines", "de.neemann.digital.draw.graphics.linemerger" ], [ "GraphicLineCollector", "de.neemann.digital.draw.graphics.linemerger" ], [ "PolygonConverter", "de.neemann.digital.draw.graphics" ], [ "VectorFloat", "de.neemann.digital.draw.graphics" ], [ "TransformRotate", "de.neemann.digital.draw.graphics" ], [ "Graphic", "de.neemann.digital.draw.graphics" ], [ "ColorStyleHighContrast", "de.neemann.digital.draw.graphics" ], [ "Parser", "de.neemann.digital.draw.graphics.text" ], [ "ParseException", "de.neemann.digital.draw.graphics.text" ], [ "PlainTextFormatter", "de.neemann.digital.draw.graphics.text.formatter" ], [ "SVGFormatter", "de.neemann.digital.draw.graphics.text.formatter" ], [ "GraphicsFormatter", "de.neemann.digital.draw.graphics.text.formatter" ], [ "LaTeXFormatter", "de.neemann.digital.draw.graphics.text.formatter" ], [ "Decorate", "de.neemann.digital.draw.graphics.text.text" ], [ "Text", "de.neemann.digital.draw.graphics.text.text" ], [ "Index", "de.neemann.digital.draw.graphics.text.text" ], [ "Sentence", "de.neemann.digital.draw.graphics.text.text" ], [ "Blank", "de.neemann.digital.draw.graphics.text.text" ], [ "Character", "de.neemann.digital.draw.graphics.text.text" ], [ "ExpressionToText", "de.neemann.digital.draw.graphics.text.text" ], [ "Simple", "de.neemann.digital.draw.graphics.text.text" ], [ "Export", "de.neemann.digital.draw.graphics" ], [ "ColorStyleMonochrome", "de.neemann.digital.draw.graphics" ], [ "TransformTranslate", "de.neemann.digital.draw.graphics" ], [ "GraphicSVG", "de.neemann.digital.draw.graphics" ], [ "GraphicSwing", "de.neemann.digital.draw.graphics" ], [ "PolygonParser", "de.neemann.digital.draw.graphics" ], [ "SVGTokenizer", "de.neemann.digital.draw.graphics" ], [ "GifSequenceWriter", "de.neemann.digital.draw.gif" ], [ "GifExporter", "de.neemann.digital.draw.gif" ], [ "ConfigCache", "de.neemann.digital.toolchain" ], [ "Configuration", "de.neemann.digital.toolchain" ], [ "Command", "de.neemann.digital.toolchain" ], [ "FileToCreate", "de.neemann.digital.toolchain" ] ],
  "tokensProjectClassesNonPrivateStaticNonVoidMethods" : [ [ "getMouse", "de.neemann.gui", "Mouse", "static Mouse getMouse()" ], [ "create", "de.neemann.gui", "IconCreator", "public static Icon create(String name)" ], [ "createImage", "de.neemann.gui", "IconCreator", "public static Image createImage(String name)" ], [ "createImages", "de.neemann.gui", "IconCreator", "public static ArrayList<Image> createImages(String... names)" ], [ "getCTRLMask", "de.neemann.gui", "ToolTipAction", "public static int getCTRLMask()" ], [ "checkForSave", "de.neemann.gui", "ClosingWindowListener", "public static boolean checkForSave(JFrame parent, ConfirmSave confirmSave)" ], [ "getParentWindow", "de.neemann.gui", "ErrorMessage", "public static Window getParentWindow(Component parent)" ], [ "getInstance", "de.neemann.gui", "Screen", "public static Screen getInstance()" ], [ "getDefaultFontScaling", "de.neemann.gui", "Screen", "public static int getDefaultFontScaling()" ], [ "isLinux", "de.neemann.gui", "Screen", "public static boolean isLinux()" ], [ "isMac", "de.neemann.gui", "Screen", "public static boolean isMac()" ], [ "getInstance", "de.neemann.gui", "InfoDialog", "public static InfoDialog getInstance()" ], [ "read", "de.neemann.digital.core.memory.importer", "Importer", "public static DataField read(File hexFile, int dataBits, boolean bigEndian) throws IOException" ], [ "getOriginOf", "de.neemann.digital.core", "ExceptionWithOrigin", "public static String getOriginOf(Throwable e)" ], [ "zMaskString", "de.neemann.digital.core", "ObservableValue", "static String zMaskString(long value, long highZ, int bits)" ], [ "getInstance", "de.neemann.digital.core", "GlobalValues", "public static GlobalValues getInstance()" ], [ "getInstance", "de.neemann.digital.core.io", "MIDIHelper", "public static MIDIHelper getInstance()" ], [ "input", "de.neemann.digital.core.element", "PinInfo", "public static PinInfo input(String name)" ], [ "input", "de.neemann.digital.core.element", "PinInfo", "public static PinInfo input(String name, String description)" ], [ "output", "de.neemann.digital.core.element", "PinInfo", "public static PinInfo output(String name)" ], [ "isInOut", "de.neemann.digital.core.element", "PinDescription", "public static boolean isInOut(Direction a, Direction b)" ], [ "isInOut", "de.neemann.digital.core.element", "Direction", "public static boolean isInOut(Direction a, Direction b)" ], [ "getKeyByName", "de.neemann.digital.core.element", "Keys", "public static Key getKeyByName(String name)" ], [ "getKeys", "de.neemann.digital.core.element", "Keys", "public static Iterable<Key> getKeys()" ], [ "combine", "de.neemann.digital.core.element", "ImmutableList", "public static <T> ImmutableList<T> combine(ImmutableList<T> a, ImmutableList<T> b)" ], [ "createSwitchModel", "de.neemann.digital.core.switching", "PlainSwitch", "static SwitchModel createSwitchModel(ObservableValue input1, ObservableValue input2, ObservableValue output1, ObservableValue output2) throws NodeException" ], [ "createOneToN", "de.neemann.digital.core.wiring", "Splitter", "public static Splitter createOneToN(int bits)" ], [ "createNToOne", "de.neemann.digital.core.wiring", "Splitter", "public static Splitter createNToOne(int bits)" ], [ "ovs", "de.neemann.digital.core", "ObservableValues", "public static ObservableValues ovs(ObservableValue... items)" ], [ "toShortHex", "de.neemann.digital.core", "IntFormat", "public static String toShortHex(long value)" ], [ "up", "de.neemann.digital.core", "Bits", "public static long up(long val, int bits)" ], [ "down", "de.neemann.digital.core", "Bits", "public static long down(long val, int bits)" ], [ "mask", "de.neemann.digital.core", "Bits", "public static long mask(int bits)" ], [ "signedFlagMask", "de.neemann.digital.core", "Bits", "public static long signedFlagMask(int bits)" ], [ "isNegative", "de.neemann.digital.core", "Bits", "public static boolean isNegative(long value, int bits)" ], [ "signExtend", "de.neemann.digital.core", "Bits", "public static long signExtend(long value, int bits)" ], [ "binLn2", "de.neemann.digital.core", "Bits", "public static int binLn2(long b)" ], [ "removeBitFromValue", "de.neemann.digital.core", "Bits", "public static int removeBitFromValue(int value, int bit)" ], [ "decode", "de.neemann.digital.core", "Bits", "public static long decode(String str) throws NumberFormatException" ], [ "decode", "de.neemann.digital.core", "Bits", "public static long decode(String str, boolean parseFloats) throws NumberFormatException" ], [ "decode", "de.neemann.digital.core", "Bits", "public static long decode(String str, int p, int radix) throws NumberFormatException" ], [ "getCode", "de.neemann.digital.core.extern", "Application", "static String getCode(ElementAttributes attr, File root) throws IOException" ], [ "readCode", "de.neemann.digital.core.extern", "Application", "static String readCode(File file) throws IOException" ], [ "create", "de.neemann.digital.core.extern", "Application", "static Application create(Type type, ElementAttributes attr)" ], [ "start", "de.neemann.digital.core.extern", "ProcessStarter", "public static String start(File dir, String... args) throws IOException" ], [ "joinStrings", "de.neemann.digital.core.extern", "ProcessStarter", "public static String joinStrings(String... strings)" ], [ "fromString", "de.neemann.digital.cli.cli", "Argument", "public static Object fromString(String val, Object defValue) throws CLIException" ], [ "fac", "de.neemann.digital.fsm", "Optimizer", "public static long fac(int n)" ], [ "getTimeComplexity", "de.neemann.digital.fsm", "Optimizer", "public static long getTimeComplexity(FSM fsm)" ], [ "calcComplexity", "de.neemann.digital.fsm", "Optimizer", "static int calcComplexity(FSM fsm, boolean out) throws ExpressionException, FiniteStateMachineException, FormatterException" ], [ "blink", "de.neemann.digital.fsm", "FSMDemos", "public static FSM blink()" ], [ "rotDecoder", "de.neemann.digital.fsm", "FSMDemos", "public static FSM rotDecoder()" ], [ "counter", "de.neemann.digital.fsm", "FSMDemos", "public static FSM counter(int n)" ], [ "trafficLight", "de.neemann.digital.fsm", "FSMDemos", "public static FSM trafficLight()" ], [ "trafficLightMedwedew", "de.neemann.digital.fsm", "FSMDemos", "public static FSM trafficLightMedwedew()" ], [ "selCounter", "de.neemann.digital.fsm", "FSMDemos", "public static FSM selCounter()" ], [ "stepper", "de.neemann.digital.fsm", "FSMDemos", "public static FSM stepper()" ], [ "stepperMedwedew", "de.neemann.digital.fsm", "FSMDemos", "public static FSM stepperMedwedew()" ], [ "getxStream", "de.neemann.digital.fsm", "FSM", "public static XStream getxStream()" ], [ "loadFSM", "de.neemann.digital.fsm", "FSM", "public static FSM loadFSM(File filename) throws IOException" ], [ "loadFSM", "de.neemann.digital.fsm", "FSM", "public static FSM loadFSM(InputStream in) throws IOException" ], [ "get", "de.neemann.digital.lang", "Lang", "public static String get(String key, Object... params)" ], [ "getNull", "de.neemann.digital.lang", "Lang", "public static String getNull(String key, Object... params)" ], [ "getBundle", "de.neemann.digital.lang", "Lang", "public static Bundle getBundle()" ], [ "currentLanguage", "de.neemann.digital.lang", "Lang", "public static Language currentLanguage()" ], [ "evalMultilingualContent", "de.neemann.digital.lang", "Lang", "public static String evalMultilingualContent(String text)" ], [ "evalMultilingualContent", "de.neemann.digital.lang", "Lang", "static String evalMultilingualContent(String text, Language currentLanguage)" ], [ "lowest", "de.neemann.digital.testing.parser", "OperatorPrecedence", "public static OperatorPrecedence lowest()" ], [ "addOne", "de.neemann.digital.analyse", "ModelAnalyser", "public static String addOne(String name)" ], [ "readCSV", "de.neemann.digital.analyse", "CSVImporter", "public static TruthTable readCSV(File file) throws IOException" ], [ "readCSV", "de.neemann.digital.analyse", "CSVImporter", "public static TruthTable readCSV(String csv) throws IOException" ], [ "readCSV", "de.neemann.digital.analyse", "CSVImporter", "public static TruthTable readCSV(Reader csv) throws IOException" ], [ "createDoubledValues", "de.neemann.digital.analyse.quinemc", "BoolTableByteArray", "public static BoolTableByteArray createDoubledValues(BoolTable values)" ], [ "simplify", "de.neemann.digital.analyse.quinemc", "QuineMcCluskey", "public static Expression simplify(Expression expression) throws ExpressionException" ], [ "addAnd", "de.neemann.digital.analyse.quinemc", "QuineMcCluskey", "public static Expression addAnd(Expression e, Iterable<TableRow> rows, List<Variable> variables)" ], [ "value", "de.neemann.digital.analyse.quinemc", "ThreeStateValue", "public static ThreeStateValue value(boolean bool)" ], [ "value", "de.neemann.digital.analyse.quinemc", "ThreeStateValue", "public static ThreeStateValue value(int value)" ], [ "doImplicitTypeCasts", "de.neemann.digital.analyse", "SubstituteLibrary", "static Object doImplicitTypeCasts(Class<?> expectedClass, Object val)" ], [ "or", "de.neemann.digital.analyse.expression", "Operation", "public static Expression or(Iterable<Expression> exp)" ], [ "or", "de.neemann.digital.analyse.expression", "Operation", "public static Expression or(Expression... exp)" ], [ "xor", "de.neemann.digital.analyse.expression", "Operation", "public static Expression xor(Expression a, Expression b)" ], [ "orNoMerge", "de.neemann.digital.analyse.expression", "Operation", "public static Expression orNoMerge(Expression... exp)" ], [ "and", "de.neemann.digital.analyse.expression", "Operation", "public static Expression and(Iterable<Expression> exp)" ], [ "and", "de.neemann.digital.analyse.expression", "Operation", "public static Expression and(Expression... exp)" ], [ "andNoMerge", "de.neemann.digital.analyse.expression", "Operation", "public static Expression andNoMerge(Expression... exp)" ], [ "modifyExpression", "de.neemann.digital.analyse.expression.modify", "ExpressionModifier", "static Expression modifyExpression(Expression expression, ExpressionModifier modifier)" ], [ "modifyExpression", "de.neemann.digital.analyse.expression.modify", "ExpressionModifier", "static Expression modifyExpression(Expression expression, ExpressionModifier... modifiers)" ], [ "v", "de.neemann.digital.analyse.expression", "Variable", "public static Variable v(String name)" ], [ "vars", "de.neemann.digital.analyse.expression", "Variable", "public static ArrayList<Variable> vars(int n)" ], [ "vars", "de.neemann.digital.analyse.expression", "Variable", "public static ArrayList<Variable> vars(String... names)" ], [ "isVar", "de.neemann.digital.analyse.expression", "Variable", "public static boolean isVar(Expression e)" ], [ "isVarOrNotVar", "de.neemann.digital.analyse.expression", "Variable", "public static boolean isVarOrNotVar(Expression e)" ], [ "getDefaultFormat", "de.neemann.digital.analyse.expression.format", "FormatToExpression", "public static FormatToExpression getDefaultFormat()" ], [ "defaultFormat", "de.neemann.digital.analyse.expression.format", "FormatToExpression", "public static String defaultFormat(Expression exp)" ], [ "not", "de.neemann.digital.analyse.expression", "Not", "public static Expression not(Expression a)" ], [ "readFromFile", "de.neemann.digital.analyse", "TruthTable", "public static TruthTable readFromFile(File filename) throws IOException" ], [ "create", "de.neemann.digital.analyse", "SplitPinString", "public static SplitPinString create(Signal s)" ], [ "create", "de.neemann.digital.analyse", "SplitPinString", "public static SplitPinString create(String pinStr)" ], [ "checkSuffix", "de.neemann.digital.gui", "SaveAsHelper", "public static File checkSuffix(File filename, String suffix)" ], [ "addF1Traversal", "de.neemann.digital.gui.components", "EditorFactory", "public static <TC extends JTextComponent> TC addF1Traversal(TC text)" ], [ "createUndoManager", "de.neemann.digital.gui.components", "EditorFactory", "public static UndoManager createUndoManager(JTextComponent text)" ], [ "create", "de.neemann.digital.gui.components.modification", "ModifyInsertWires", "public static Modification<Circuit> create(List<Wire> newWires)" ], [ "getToolTipName", "de.neemann.digital.gui.components.modification", "ModificationOfVisualElement", "public static String getToolTipName(VisualElement ve)" ], [ "getTerminal", "de.neemann.digital.gui.components.terminal", "TerminalDialog", "static TerminalInterface getTerminal(Model model, ElementAttributes attr)" ], [ "createList", "de.neemann.digital.gui.components", "CircuitTransferable", "public static ArrayList<Movable> createList(Object data, ShapeFactory shapeFactory) throws IOException" ], [ "createURLStreamHandlerFactory", "de.neemann.digital.gui.components", "ElementHelpDialog", "public static URLStreamHandlerFactory createURLStreamHandlerFactory()" ], [ "getImage", "de.neemann.digital.gui.components", "ElementHelpDialog", "static BufferedImage getImage(String name)" ], [ "getImage", "de.neemann.digital.gui.components", "MyURLStreamHandlerFactory", "static BufferedImage getImage(String name)" ], [ "isSequentialVar", "de.neemann.digital.gui.components.table", "ExpressionListenerJK", "public static String isSequentialVar(String name)" ], [ "getAttrList", "de.neemann.digital.gui.components", "CircuitComponent", "public static ArrayList<Key> getAttrList()" ], [ "raster", "de.neemann.digital.gui.components", "CircuitComponent", "public static Vector raster(Vector pos)" ], [ "createLiveDialog", "de.neemann.digital.gui.components.data", "GraphDialog", "public static GraphDialog createLiveDialog(JFrame owner, Model model, boolean microStep, List<String> ordering, int sampleSize)" ], [ "createColumnsInfo", "de.neemann.digital.gui.components.data", "GraphDialog", "static ValueTable.ColumnInfo[] createColumnsInfo(ArrayList<Signal> signals)" ], [ "create", "de.neemann.digital.gui.components", "CopiedElementLabelRenamer", "static LabelInstance create(VisualElement ve)" ], [ "create", "de.neemann.digital.gui.components", "CopiedElementLabelRenamer", "static LabelInstance create(String elementName, String fullLabel)" ], [ "create", "de.neemann.digital.gui.components", "LabelInstance", "static LabelInstance create(VisualElement ve)" ], [ "create", "de.neemann.digital.gui.components", "LabelInstance", "static LabelInstance create(String elementName, String fullLabel)" ], [ "isExperimentalMode", "de.neemann.digital.gui", "Main", "public static boolean isExperimentalMode()" ], [ "getInstance", "de.neemann.digital.gui", "WindowManager", "public static WindowManager getInstance()" ], [ "getInstance", "de.neemann.digital.gui", "Settings", "public static Settings getInstance()" ], [ "getRange", "de.neemann.digital.hdl.verilog2", "VerilogCreator", "public static String getRange(int bits)" ], [ "getType", "de.neemann.digital.hdl.verilog2", "VerilogCreator", "public static String getType(HDLPort.Direction def, HDLPort.Direction dir, int bits)" ], [ "value", "de.neemann.digital.hdl.verilog2", "VerilogCreator", "public static String value(ExprConstant con)" ], [ "value", "de.neemann.digital.hdl.verilog2", "VerilogCreator", "public static String value(long val, int bits)" ], [ "neededFileName", "de.neemann.digital.hdl.verilog2.lib", "VerilogTemplate", "public static String neededFileName(String elementName)" ], [ "createFromJar", "de.neemann.digital.hdl.hgs", "Parser", "public static Statement createFromJar(String path, ClassLoader cl) throws IOException, ParserException" ], [ "createFromJarStatic", "de.neemann.digital.hdl.hgs", "Parser", "public static Statement createFromJarStatic(String path)" ], [ "isWhiteSpace", "de.neemann.digital.hdl.hgs", "Tokenizer", "public static boolean isWhiteSpace(int c)" ], [ "toLong", "de.neemann.digital.hdl.hgs", "Value", "public static long toLong(Object value) throws HGSEvalException" ], [ "toDouble", "de.neemann.digital.hdl.hgs", "Value", "public static double toDouble(Object value) throws HGSEvalException" ], [ "toInt", "de.neemann.digital.hdl.hgs", "Value", "public static int toInt(Object value) throws HGSEvalException" ], [ "toBool", "de.neemann.digital.hdl.hgs", "Value", "public static boolean toBool(Object value) throws HGSEvalException" ], [ "toString", "de.neemann.digital.hdl.hgs", "Value", "public static String toString(Object value) throws HGSEvalException" ], [ "toArray", "de.neemann.digital.hdl.hgs", "Value", "public static HGSArray toArray(Object value) throws HGSEvalException" ], [ "toMap", "de.neemann.digital.hdl.hgs", "Value", "public static HGSMap toMap(Object value) throws HGSEvalException" ], [ "equals", "de.neemann.digital.hdl.hgs", "Value", "public static boolean equals(Object a, Object b)" ], [ "add", "de.neemann.digital.hdl.hgs", "Value", "public static Object add(Object a, Object b) throws HGSEvalException" ], [ "sub", "de.neemann.digital.hdl.hgs", "Value", "public static Object sub(Object a, Object b) throws HGSEvalException" ], [ "mul", "de.neemann.digital.hdl.hgs", "Value", "public static Object mul(Object a, Object b) throws HGSEvalException" ], [ "div", "de.neemann.digital.hdl.hgs", "Value", "public static Object div(Object a, Object b) throws HGSEvalException" ], [ "or", "de.neemann.digital.hdl.hgs", "Value", "public static Object or(Object a, Object b) throws HGSEvalException" ], [ "xor", "de.neemann.digital.hdl.hgs", "Value", "public static Object xor(Object a, Object b) throws HGSEvalException" ], [ "and", "de.neemann.digital.hdl.hgs", "Value", "public static Object and(Object a, Object b) throws HGSEvalException" ], [ "not", "de.neemann.digital.hdl.hgs", "Value", "public static Object not(Object value) throws HGSEvalException" ], [ "neg", "de.neemann.digital.hdl.hgs", "Value", "public static Object neg(Object value) throws HGSEvalException" ], [ "less", "de.neemann.digital.hdl.hgs", "Value", "public static boolean less(Object a, Object b) throws HGSEvalException" ], [ "lessEqual", "de.neemann.digital.hdl.hgs", "Value", "public static boolean lessEqual(Object a, Object b) throws HGSEvalException" ], [ "trimRight", "de.neemann.digital.hdl.hgs", "Value", "public static String trimRight(String str)" ], [ "trimLeft", "de.neemann.digital.hdl.hgs", "Value", "public static String trimLeft(String str)" ], [ "getType", "de.neemann.digital.hdl.vhdl2", "VHDLCreator", "public static String getType(int bits)" ], [ "value", "de.neemann.digital.hdl.vhdl2", "VHDLCreator", "public static String value(ExprConstant con)" ], [ "value", "de.neemann.digital.hdl.vhdl2", "VHDLCreator", "public static String value(long val, int bits)" ], [ "isTemplate", "de.neemann.digital.hdl.vhdl2.entities", "VHDLTemplate", "public static boolean isTemplate(ElementTypeDescription etd)" ], [ "neededFileName", "de.neemann.digital.hdl.vhdl2.entities", "VHDLTemplate", "public static String neededFileName(String elementName)" ], [ "zero", "de.neemann.digital.hdl.vhdl2.entities", "VHDLTemplateFunctions", "public static String zero(long bits)" ], [ "value", "de.neemann.digital.hdl.vhdl2.entities", "VHDLTemplateFunctions", "public static String value(long val, long bits)" ], [ "genericType", "de.neemann.digital.hdl.vhdl2.entities", "VHDLTemplateFunctions", "public static String genericType(long n)" ], [ "type", "de.neemann.digital.hdl.vhdl2.entities", "VHDLTemplateFunctions", "public static String type(long n)" ], [ "isVar", "de.neemann.digital.hdl.model2.expression", "Expression", "static boolean isVar(Expression expr, HDLNet net)" ], [ "isConstant", "de.neemann.digital.hdl.model2.expression", "ExprConstant", "public static ExprConstant isConstant(HDLNode node)" ], [ "getHighZ", "de.neemann.digital.data", "Value", "public static Value getHighZ()" ], [ "calcBackOffset", "de.neemann.digital.builder.circuit", "FragmentExpression", "static int calcBackOffset(int size, int i)" ], [ "isXNor", "de.neemann.digital.builder.circuit", "CircuitBuilder", "static boolean isXNor(long[] data)" ], [ "isXor", "de.neemann.digital.builder.circuit", "CircuitBuilder", "static boolean isXor(long[] data)" ], [ "getLibPath", "de.neemann.digital.draw.library", "ElementLibrary", "public static File getLibPath()" ], [ "createCustomDescription", "de.neemann.digital.draw.library", "ElementLibrary", "public static ElementTypeDescriptionCustom createCustomDescription(File file, Circuit circuit, ElementLibrary library) throws PinException" ], [ "createDeclarationDefault", "de.neemann.digital.draw.library", "ElementTypeDescriptionCustom", "public static String createDeclarationDefault(Circuit circuit) throws NodeException" ], [ "getInstance", "de.neemann.digital.draw.library", "NumStringComparator", "public static NumStringComparator getInstance()" ], [ "compareStr", "de.neemann.digital.draw.library", "NumStringComparator", "public static int compareStr(String a, String b)" ], [ "createPins", "de.neemann.digital.draw.shapes", "GenericShape", "public static Pins createPins(PinDescriptions inputs, PinDescriptions outputs, boolean invert, InverterConfig ic, boolean wideShape)" ], [ "readStyle", "de.neemann.digital.draw.shapes.custom.svg", "Context", "static Context readStyle(Context context, String style) throws SvgException" ], [ "getOutSize", "de.neemann.digital.draw.shapes", "OutputShape", "public static int getOutSize(boolean small)" ], [ "getOutStyle", "de.neemann.digital.draw.shapes", "OutputShape", "public static Style getOutStyle(boolean small)" ], [ "getOutRad", "de.neemann.digital.draw.shapes", "OutputShape", "public static Vector getOutRad(boolean small)" ], [ "createTransform", "de.neemann.digital.draw.shapes", "SevenShape", "static Transform createTransform(int size)" ], [ "getxStream", "de.neemann.digital.draw.elements", "Circuit", "public static XStream getxStream()" ], [ "loadCircuit", "de.neemann.digital.draw.elements", "Circuit", "public static Circuit loadCircuit(File filename, ShapeFactory shapeFactory) throws IOException" ], [ "loadCircuit", "de.neemann.digital.draw.elements", "Circuit", "public static Circuit loadCircuit(InputStream in, ShapeFactory shapeFactory) throws IOException" ], [ "fixGenerics", "de.neemann.digital.draw.model", "ModelCreator", "public static Circuit fixGenerics(Circuit circuit, LibraryInterface library) throws NodeException, ElementNotFoundException" ], [ "createFromPath", "de.neemann.digital.draw.graphics", "Polygon", "public static Polygon createFromPath(String path)" ], [ "vec", "de.neemann.digital.draw.graphics", "Vector", "public static Vector vec(int x, int y)" ], [ "min", "de.neemann.digital.draw.graphics", "Vector", "public static Vector min(VectorInterface... p)" ], [ "max", "de.neemann.digital.draw.graphics", "Vector", "public static Vector max(VectorInterface... p)" ], [ "width", "de.neemann.digital.draw.graphics", "Vector", "public static Vector width(VectorInterface... p)" ], [ "add", "de.neemann.digital.draw.graphics", "Vector", "public static List<Vector> add(List<Vector> vectors, Vector offs)" ], [ "getInstance", "de.neemann.digital.draw.graphics", "SVGSettings", "public static SVGSettings getInstance()" ], [ "createKeyList", "de.neemann.digital.draw.graphics", "SVGSettings", "public static List<Key> createKeyList()" ], [ "mul", "de.neemann.digital.draw.graphics", "Transform", "static Transform mul(Transform t1, Transform t2)" ], [ "rotate", "de.neemann.digital.draw.graphics", "TransformMatrix", "public static TransformMatrix rotate(double w)" ], [ "scale", "de.neemann.digital.draw.graphics", "TransformMatrix", "public static TransformMatrix scale(float sx, float sy)" ], [ "getTextWidth", "de.neemann.digital.draw.graphics", "GraphicMinMax", "public static int getTextWidth(String text, Style style)" ], [ "getSelected", "de.neemann.digital.draw.graphics", "ColorScheme", "public static ColorScheme getSelected()" ], [ "getWireStyle", "de.neemann.digital.draw.graphics", "Style", "public static Style getWireStyle(Value value)" ], [ "format", "de.neemann.digital.draw.graphics.text.formatter", "PlainTextFormatter", "public static String format(Text text)" ], [ "format", "de.neemann.digital.draw.graphics.text.formatter", "PlainTextFormatter", "public static String format(Text text, FormatToExpression format)" ], [ "format", "de.neemann.digital.draw.graphics.text.formatter", "SVGFormatter", "public static String format(Text text)" ], [ "createFragment", "de.neemann.digital.draw.graphics.text.formatter", "GraphicsFormatter", "public static Fragment createFragment(Graphics2D gr, String text)" ], [ "createFragment", "de.neemann.digital.draw.graphics.text.formatter", "GraphicsFormatter", "public static Fragment createFragment(Graphics2D gr, Expression expression) throws FormatterException" ], [ "createFragment", "de.neemann.digital.draw.graphics.text.formatter", "GraphicsFormatter", "public static Fragment createFragment(FontSizer sizer, Font font, String text)" ], [ "format", "de.neemann.digital.draw.graphics.text.formatter", "LaTeXFormatter", "public static String format(Expression exp)" ], [ "format", "de.neemann.digital.draw.graphics.text.formatter", "LaTeXFormatter", "public static String format(Text text)" ], [ "math", "de.neemann.digital.draw.graphics.text.text", "Decorate", "public static Text math(Text t)" ], [ "escapeXML", "de.neemann.digital.draw.graphics", "GraphicSVG", "public static String escapeXML(String text)" ], [ "getMirrorYOrientation", "de.neemann.digital.draw.graphics", "GraphicSwing", "static int getMirrorYOrientation(Orientation orientation, VectorInterface p1, VectorInterface p2, VectorInterface p3)" ], [ "load", "de.neemann.digital.toolchain", "Configuration", "public static Configuration load(File file) throws IOException" ], [ "load", "de.neemann.digital.toolchain", "Configuration", "public static Configuration load(InputStream in) throws IOException" ] ],
  "tokensProjectClassesNonPrivateStaticAttributes" : [ [ "UNKNOWN", "de.neemann.gui", "InfoDialog", "public static final String UNKNOWN = \"unknown\";" ], [ "DESCRIPTION", "de.neemann.digital.core.pld", "PullDown", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"PullDown\", PullDown.class).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS);" ], [ "DESCRIPTION", "de.neemann.digital.core.pld", "Diode", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Diode.class).addAttribute(Keys.ROTATE).addAttribute(Keys.BLOWN);" ], [ "DESCRIPTION", "de.neemann.digital.core.pld", "DiodeBackward", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(DiodeBackward.class, input(\"in\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BLOWN);" ], [ "DESCRIPTION", "de.neemann.digital.core.pld", "PullUp", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"PullUp\", PullUp.class).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS);" ], [ "DESCRIPTION", "de.neemann.digital.core.pld", "DiodeForward", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(DiodeForward.class, input(\"in\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BLOWN);" ], [ "DESCRIPTION", "de.neemann.digital.core.memory", "RAMSinglePort", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(RAMSinglePort.class, input(\"A\"), input(\"str\"), input(\"C\").setClock(), input(\"ld\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.ADDR_BITS).addAttribute(Keys.INT_FORMAT).addAttribute(Keys.IS_PROGRAM_MEMORY).addAttribute(Keys.LABEL);" ], [ "DESCRIPTION", "de.neemann.digital.core.memory", "ROMDualPort", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(ROMDualPort.class, input(\"A1\"), input(\"s1\"), input(\"A2\"), input(\"s2\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.ADDR_BITS).addAttribute(Keys.LABEL).addAttribute(Keys.DATA).addAttribute(Keys.INT_FORMAT).addAttribute(Keys.IS_PROGRAM_MEMORY).addAttribute(Keys.AUTO_RELOAD_ROM).addAttribute(Keys.LAST_DATA_FILE).addAttribute(Keys.BIG_ENDIAN);" ], [ "DESCRIPTION", "de.neemann.digital.core.memory", "RAMDualAccess", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(RAMDualAccess.class, input(\"str\"), input(\"C\").setClock(), input(\"ld\"), input(\"1A\"), input(\"1Din\"), input(\"2A\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.ADDR_BITS).addAttribute(Keys.IS_PROGRAM_MEMORY).addAttribute(Keys.LABEL).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.memory", "CounterPreset", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(CounterPreset.class, input(\"en\"), input(\"C\").setClock(), input(\"dir\"), input(\"in\"), input(\"ld\"), input(\"clr\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.MAX_VALUE).addAttribute(Keys.INVERTER_CONFIG).addAttribute(Keys.LABEL).addAttribute(Keys.VALUE_IS_PROBE).addAttribute(Keys.IS_PROGRAM_COUNTER).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.memory", "RAMDualPort", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(RAMDualPort.class, input(\"A\"), input(\"Din\"), input(\"str\"), input(\"C\").setClock(), input(\"ld\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.ADDR_BITS).addAttribute(Keys.INT_FORMAT).addAttribute(Keys.IS_PROGRAM_MEMORY).addAttribute(Keys.LABEL).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.memory", "Register", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Register.class, input(\"D\"), input(\"C\").setClock(), input(\"en\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).addAttribute(Keys.INVERTER_CONFIG).addAttribute(Keys.IS_PROGRAM_COUNTER).addAttribute(Keys.VALUE_IS_PROBE).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.memory", "LookUpTable", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(LookUpTable.class) {\n\n    @Override\n    public PinDescriptions getInputDescription(ElementAttributes elementAttributes) {\n        int size = elementAttributes.get(Keys.INPUT_COUNT);\n        PinDescription[] names = new PinDescription[size];\n        for (int i = 0; i < size; i++) names[i] = input(Integer.toString(i), Lang.get(\"elem_LookUpTable_pin_in\", i));\n        return new PinDescriptions(names);\n    }\n}.addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.LUT_INPUT_COUNT).addAttribute(Keys.LABEL).addAttribute(Keys.DATA).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.memory", "BlockRAMDualPort", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(BlockRAMDualPort.class, input(\"A\"), input(\"Din\"), input(\"str\"), input(\"C\").setClock()).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.ADDR_BITS).addAttribute(Keys.IS_PROGRAM_MEMORY).addAttribute(Keys.LABEL).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.memory", "Counter", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Counter.class, input(\"en\"), input(\"C\").setClock(), input(\"clr\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.INVERTER_CONFIG).addAttribute(Keys.LABEL).addAttribute(Keys.VALUE_IS_PROBE).addAttribute(Keys.IS_PROGRAM_COUNTER).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.memory", "EEPROM", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(EEPROM.class, input(\"A\"), input(\"CS\"), input(\"WE\").setClock(), input(\"OE\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.ADDR_BITS).addAttribute(Keys.LABEL).addAttribute(Keys.INT_FORMAT).addAttribute(Keys.IS_PROGRAM_MEMORY).addAttribute(Keys.INVERTER_CONFIG).addAttribute(Keys.DATA);" ], [ "DESCRIPTION", "de.neemann.digital.core.memory", "RAMAsync", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(RAMAsync.class, input(\"A\"), input(\"D\"), input(\"we\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.ADDR_BITS).addAttribute(Keys.IS_PROGRAM_MEMORY).addAttribute(Keys.INVERTER_CONFIG).addAttribute(Keys.LABEL).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.memory", "ROM", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(ROM.class, input(\"A\"), input(\"sel\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.ADDR_BITS).addAttribute(Keys.LABEL).addAttribute(Keys.DATA).addAttribute(Keys.INT_FORMAT).addAttribute(Keys.IS_PROGRAM_MEMORY).addAttribute(Keys.AUTO_RELOAD_ROM).addAttribute(Keys.LAST_DATA_FILE).addAttribute(Keys.BIG_ENDIAN).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.memory", "EEPROMDualPort", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(EEPROMDualPort.class, input(\"A\"), input(\"Din\"), input(\"str\"), input(\"C\").setClock(), input(\"ld\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.ADDR_BITS).addAttribute(Keys.INT_FORMAT).addAttribute(Keys.IS_PROGRAM_MEMORY).addAttribute(Keys.LABEL).addAttribute(Keys.DATA);" ], [ "DESCRIPTION", "de.neemann.digital.core.memory", "RAMSinglePortSel", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(RAMSinglePortSel.class, input(\"A\"), input(\"CS\"), input(\"WE\"), input(\"OE\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.ADDR_BITS).addAttribute(Keys.LABEL).addAttribute(Keys.IS_PROGRAM_MEMORY).addAttribute(Keys.INVERTER_CONFIG);" ], [ "DESCRIPTION", "de.neemann.digital.core.memory", "RegisterFile", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(RegisterFile.class, input(\"Din\"), input(\"we\"), input(\"Rw\"), input(\"C\").setClock(), input(\"Ra\"), input(\"Rb\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.ADDR_BITS).addAttribute(Keys.LABEL).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.io", "MIDI", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(MIDI.class) {\n\n    public PinDescriptions getInputDescription(ElementAttributes elementAttributes) throws NodeException {\n        if (elementAttributes.get(Keys.MIDI_PROG_CHANGE))\n            return new PinDescriptions(input(\"N\"), input(\"V\"), input(\"OnOff\"), input(\"PC\"), input(\"en\"), input(\"C\").setClock()).setLangKey(getPinLangKey());\n        else\n            return new PinDescriptions(input(\"N\"), input(\"V\"), input(\"OnOff\"), input(\"en\"), input(\"C\").setClock()).setLangKey(getPinLangKey());\n    }\n}.addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.MIDI_CHANNEL).addAttribute(Keys.MIDI_INSTRUMENT).addAttribute(Keys.MIDI_PROG_CHANGE);" ], [ "DESCRIPTION", "de.neemann.digital.core.io", "RGBLED", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(RGBLED.class, input(\"R\"), input(\"G\"), input(\"B\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).addAttribute(Keys.LED_SIZE);" ], [ "DESCRIPTION", "de.neemann.digital.core.io", "Out", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"Out\", attributes -> new Out(attributes).enforceName(), input(\"in\")) {\n\n    @Override\n    public String getDescription(ElementAttributes elementAttributes) {\n        String d = Lang.evalMultilingualContent(elementAttributes.get(Keys.DESCRIPTION));\n        if (d.length() > 0)\n            return d;\n        else\n            return super.getDescription(elementAttributes);\n    }\n}.addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).addAttribute(Keys.DESCRIPTION).addAttribute(Keys.INT_FORMAT).addAttribute(Keys.PINNUMBER).addAttribute(Keys.ADD_VALUE_TO_GRAPH).addAttribute(Keys.IN_OUT_SMALL).supportsHDL();" ], [ "LEDDESCRIPTION", "de.neemann.digital.core.io", "Out", "public static final ElementTypeDescription LEDDESCRIPTION = new ElementTypeDescription(\"LED\", Out.class, input(\"in\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.LED_SIZE).addAttribute(Keys.COLOR);" ], [ "POLARITYAWARELEDDESCRIPTION", "de.neemann.digital.core.io", "Out", "public static final ElementTypeDescription POLARITYAWARELEDDESCRIPTION = new ElementTypeDescription(\"PolarityAwareLED\", attributes -> new Out(1, 1), input(\"A\"), input(\"C\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.COLOR);" ], [ "SEVENDESCRIPTION", "de.neemann.digital.core.io", "Out", "public static final ElementTypeDescription SEVENDESCRIPTION = new SevenSegTypeDescription();" ], [ "SEVENHEXDESCRIPTION", "de.neemann.digital.core.io", "Out", "public static final ElementTypeDescription SEVENHEXDESCRIPTION = new ElementTypeDescription(\"Seven-Seg-Hex\", attributes -> new Out(4, 1), input(\"d\"), input(\"dp\")).addAttribute(Keys.COLOR).addAttribute(Keys.SEVEN_SEG_SIZE);" ], [ "SIXTEENDESCRIPTION", "de.neemann.digital.core.io", "Out", "public static final ElementTypeDescription SIXTEENDESCRIPTION = new ElementTypeDescription(\"SixteenSeg\", attributes -> new Out(16, 1), input(\"led\"), input(\"dp\")).addAttribute(Keys.COLOR).addAttribute(Keys.SEVEN_SEG_SIZE);" ], [ "DESCRIPTION", "de.neemann.digital.core.io", "RotEncoder", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(RotEncoder.class).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL);" ], [ "DESCRIPTION", "de.neemann.digital.core.io", "PinControl", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(PinControl.class, input(\"wr\"), input(\"oe\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.MIRROR).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.io", "DipSwitch", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(DipSwitch.class) {\n\n    @Override\n    public String getDescription(ElementAttributes elementAttributes) {\n        String d = Lang.evalMultilingualContent(elementAttributes.get(Keys.DESCRIPTION));\n        if (d.length() > 0)\n            return d;\n        else\n            return super.getDescription(elementAttributes);\n    }\n}.addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.DIP_DEFAULT).addAttribute(Keys.DESCRIPTION);" ], [ "DESCRIPTION", "de.neemann.digital.core.io", "LightBulb", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(LightBulb.class, input(\"A\"), input(\"B\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.COLOR);" ], [ "DESCRIPTION", "de.neemann.digital.core.io", "Probe", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"Probe\", Probe.class, input(\"in\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.INT_FORMAT).addAttribute(Keys.PROBE_MODE).addAttribute(Keys.ADD_VALUE_TO_GRAPH);" ], [ "DESCRIPTION", "de.neemann.digital.core.io", "Button", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Button.class).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.ACTIVE_LOW).addAttribute(Keys.MAP_TO_KEY).addAttribute(Keys.ADD_VALUE_TO_GRAPH);" ], [ "DESCRIPTION", "de.neemann.digital.core.io", "ButtonLED", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(ButtonLED.class, input(\"in\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.ACTIVE_LOW).addAttribute(Keys.MAP_TO_KEY).addAttribute(Keys.COLOR);" ], [ "DESCRIPTION", "de.neemann.digital.core.io", "In", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(In.class) {\n\n    @Override\n    public String getDescription(ElementAttributes elementAttributes) {\n        String d = Lang.evalMultilingualContent(elementAttributes.get(Keys.DESCRIPTION));\n        if (d.length() > 0)\n            return d;\n        else\n            return super.getDescription(elementAttributes);\n    }\n}.addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).addAttribute(Keys.INPUT_DEFAULT).addAttribute(Keys.IS_HIGH_Z).addAttribute(Keys.AVOID_ACTIVE_LOW).addAttribute(Keys.DESCRIPTION).addAttribute(Keys.INT_FORMAT).addAttribute(Keys.PINNUMBER).addAttribute(Keys.ADD_VALUE_TO_GRAPH).addAttribute(Keys.IN_OUT_SMALL).supportsHDL();" ], [ "STEPS", "de.neemann.digital.core.io", "StepperMotorUnipolar", "public static final int STEPS = 72;" ], [ "DESCRIPTION", "de.neemann.digital.core.io", "StepperMotorUnipolar", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(StepperMotorUnipolar.class, input(\"P0\"), input(\"P1\"), input(\"P2\"), input(\"P3\"), input(\"com\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.INVERT_OUTPUT);" ], [ "DESCRIPTION", "de.neemann.digital.core.io", "NotConnected", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(NotConnected.class).addAttribute(Keys.BITS);" ], [ "DESCRIPTION", "de.neemann.digital.core.io", "StepperMotorBipolar", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(StepperMotorBipolar.class, input(\"A+\"), input(\"A-\"), input(\"B+\"), input(\"B-\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.INVERT_OUTPUT);" ], [ "DESCRIPTION", "de.neemann.digital.core.io", "Const", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Const.class).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.VALUE).addAttribute(Keys.INT_FORMAT).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.io", "PowerSupply", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(PowerSupply.class, input(\"VDD\"), input(\"GND\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL);" ], [ "DESCRIPTION", "de.neemann.digital.core.io", "Ground", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Ground.class).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.io", "VDD", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(VDD.class).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).supportsHDL();" ], [ "INSTANCE", "de.neemann.digital.core.io.telnet", "ServerHolder", "public static final ServerHolder INSTANCE = new ServerHolder();" ], [ "DESCRIPTION", "de.neemann.digital.core.io.telnet", "Telnet", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Telnet.class, input(\"in\"), input(\"C\").setClock(), input(\"wr\"), input(\"rd\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.TELNET_ESCAPE).addAttribute(Keys.PORT);" ], [ "BITS", "de.neemann.digital.core.element", "Keys", "public static final Key.KeyBits BITS = new Key.KeyBits(\"Bits\", 1);" ], [ "INPUT_BITS", "de.neemann.digital.core.element", "Keys", "public static final Key.KeyBits INPUT_BITS = new Key.KeyBits(\"inputBits\", 8);" ], [ "OUTPUT_BITS", "de.neemann.digital.core.element", "Keys", "public static final Key.KeyBits OUTPUT_BITS = new Key.KeyBits(\"outputBits\", 16);" ], [ "INPUT_COUNT", "de.neemann.digital.core.element", "Keys", "public static final Key.KeyInteger INPUT_COUNT = new Key.KeyInteger(\"Inputs\", 2).setComboBoxValues(2, 3, 4, 5).setMin(2);" ], [ "LUT_INPUT_COUNT", "de.neemann.digital.core.element", "Keys", "public static final Key.KeyInteger LUT_INPUT_COUNT = new Key.KeyInteger(\"Inputs\", 2).setComboBoxValues(2, 3, 4, 5, 6).setMax(20).setMin(2);" ], [ "MAX_VALUE", "de.neemann.digital.core.element", "Keys", "public static final Key.KeyInteger MAX_VALUE = new Key.KeyInteger(\"maxValue\", 0).setMin(0);" ], [ "DELAY_TIME", "de.neemann.digital.core.element", "Keys", "public static final Key.KeyInteger DELAY_TIME = new Key.KeyInteger(\"delayTime\", 1).setComboBoxValues(1, 2, 3, 4, 5).setMin(1).setMax(20);" ], [ "MONOFLOP_DELAY", "de.neemann.digital.core.element", "Keys", "public static final Key.KeyInteger MONOFLOP_DELAY = new Key.KeyInteger(\"timerDelay\", 1).setMin(1);" ], [ "LABEL", "de.neemann.digital.core.element", "Keys", "public static final Key<String> LABEL = new Key<>(\"Label\", \"\");" ], [ "FONT_SIZE", "de.neemann.digital.core.element", "Keys", "public static final Key<Integer> FONT_SIZE = new Key.KeyInteger(\"textFontSize\", Style.NORMAL.getFontSize()).setComboBoxValues(14, 17, 20, 24, 36, 48, 60).setMin(10).setMax(70);" ], [ "TEXT_ORIENTATION", "de.neemann.digital.core.element", "Keys", "public static final Key<Orientation> TEXT_ORIENTATION = new Key.KeyEnum<>(\"textOrientation\", Orientation.LEFTTOP, Orientation.values()).setSecondary();" ], [ "LED_SIZE", "de.neemann.digital.core.element", "Keys", "public static final Key<Integer> LED_SIZE = new Key.KeyInteger(\"Size\", 1).setComboBoxValues(0, 1, 2, 3, 4, 5).setMin(0).allowGroupEdit().setSecondary();" ], [ "SEVEN_SEG_SIZE", "de.neemann.digital.core.element", "Keys", "public static final Key<Integer> SEVEN_SEG_SIZE = new Key.KeyInteger(\"segSize\", 2).setComboBoxValues(0, 1, 2, 3, 4, 5).setMin(0).allowGroupEdit().useTranslationOf(LED_SIZE);" ], [ "VALUE", "de.neemann.digital.core.element", "Keys", "public static final Key<Long> VALUE = new Key<>(\"Value\", 1L).setAdaptiveIntFormat().allowGroupEdit();" ], [ "DEFAULT", "de.neemann.digital.core.element", "Keys", "public static final Key<Long> DEFAULT = new Key<>(\"Default\", 0L).allowGroupEdit().setSecondary();" ], [ "INPUT_DEFAULT", "de.neemann.digital.core.element", "Keys", "public static final Key<InValue> INPUT_DEFAULT = new Key<>(\"InDefault\", new InValue(0)).setAdaptiveIntFormat().allowGroupEdit().setSecondary();" ], [ "DIP_DEFAULT", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> DIP_DEFAULT = new Key<>(\"dipDefault\", false).allowGroupEdit().setSecondary();" ], [ "COLOR", "de.neemann.digital.core.element", "Keys", "public static final Key<java.awt.Color> COLOR = new Key<>(\"Color\", java.awt.Color.RED).allowGroupEdit();" ], [ "INPUT_SPLIT", "de.neemann.digital.core.element", "Keys", "public static final Key<String> INPUT_SPLIT = new Key<>(\"Input Splitting\", \"4,4\");" ], [ "OUTPUT_SPLIT", "de.neemann.digital.core.element", "Keys", "public static final Key<String> OUTPUT_SPLIT = new Key<>(\"Output Splitting\", \"8\");" ], [ "SPLITTER_SPREADING", "de.neemann.digital.core.element", "Keys", "public static final Key<Integer> SPLITTER_SPREADING = new Key.KeyInteger(\"splitterSpreading\", 1).setComboBoxValues(1, 2, 3, 4).setMin(1).setMax(20).setSecondary();" ], [ "IN_OUT_SMALL", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> IN_OUT_SMALL = new Key<>(\"small\", false).allowGroupEdit().setSecondary();" ], [ "RUN_AT_REAL_TIME", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> RUN_AT_REAL_TIME = new Key<>(\"runRealTime\", false);" ], [ "INVERT_OUTPUT", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> INVERT_OUTPUT = new Key<>(\"invertOutput\", true);" ], [ "FREQUENCY", "de.neemann.digital.core.element", "Keys", "public static final Key<Integer> FREQUENCY = new Key.KeyInteger(\"Frequency\", 1).setComboBoxValues(1, 2, 5, 10, 20, 50, 100, 200, 500, 5000, 50000, Integer.MAX_VALUE).setMin(1).setDependsOn(RUN_AT_REAL_TIME);" ], [ "SELECTOR_BITS", "de.neemann.digital.core.element", "Keys", "public static final Key<Integer> SELECTOR_BITS = new Key.KeyBits(\"Selector Bits\", 1).setMax(8);" ], [ "ADDR_BITS", "de.neemann.digital.core.element", "Keys", "public static final Key<Integer> ADDR_BITS = // needs to have the same default value as INPUT_COUNT!!!  see de.neemann.digital.gui.components.EditorFactory#DataFieldEditor\nnew Key.KeyBits(\"AddrBits\", 2).setMax(24);" ], [ "BLOWN", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> BLOWN = new Key<>(\"Blown\", false).allowGroupEdit();" ], [ "CLOSED", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> CLOSED = new Key<>(\"Closed\", false).allowGroupEdit();" ], [ "SIGNED", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> SIGNED = new Key<>(\"Signed\", false).allowGroupEdit();" ], [ "REMAINDER_POSITIVE", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> REMAINDER_POSITIVE = new Key<>(\"remainderPositive\", true).setDependsOn(SIGNED);" ], [ "DATA", "de.neemann.digital.core.element", "Keys", "public static final Key<DataField> DATA = new Key<>(\"Data\", DataField::new);" ], [ "FLIP_SEL_POSITON", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> FLIP_SEL_POSITON = new Key<>(\"flipSelPos\", false).allowGroupEdit();" ], [ "ROTATE", "de.neemann.digital.core.element", "Keys", "public static final Key<Rotation> ROTATE = new Key<>(\"rotation\", new Rotation(0)).allowGroupEdit().setSecondary();" ], [ "WIDTH", "de.neemann.digital.core.element", "Keys", "public static final Key.KeyInteger WIDTH = new Key.KeyInteger(\"Width\", 3).setMin(2);" ], [ "SHAPE_TYPE", "de.neemann.digital.core.element", "Keys", "public static final Key<CustomCircuitShapeType> SHAPE_TYPE = new Key.KeyEnum<>(\"shapeType\", CustomCircuitShapeType.DEFAULT, CustomCircuitShapeType.values()).setSecondary();" ], [ "LAYOUT_SHAPE_DELTA", "de.neemann.digital.core.element", "Keys", "public static final Key.KeyInteger LAYOUT_SHAPE_DELTA = new Key.KeyInteger(\"layoutShapeDelta\", 0).setMin(0);" ], [ "HEIGHT", "de.neemann.digital.core.element", "Keys", "public static final Key<Integer> HEIGHT = new Key.KeyInteger(\"Height\", 3).setMin(2).setSecondary().setDependsOn(SHAPE_TYPE, cst -> cst.equals(CustomCircuitShapeType.LAYOUT));" ], [ "TERM_WIDTH", "de.neemann.digital.core.element", "Keys", "public static final Key.KeyInteger TERM_WIDTH = new Key.KeyInteger(\"termWidth\", 50).setMin(10);" ], [ "TERM_HEIGHT", "de.neemann.digital.core.element", "Keys", "public static final Key.KeyInteger TERM_HEIGHT = new Key.KeyInteger(\"termHeight\", 25).setMin(5);" ], [ "CYCLES", "de.neemann.digital.core.element", "Keys", "public static final Key.KeyInteger CYCLES = new Key.KeyInteger(\"Cycles\", 100000).setComboBoxValues(1000, 10000, 100000, 1000000);" ], [ "ENABLED", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> ENABLED = new Key<>(\"enabled\", true).allowGroupEdit();" ], [ "VALUE_IS_PROBE", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> VALUE_IS_PROBE = new Key<>(\"valueIsProbe\", false).allowGroupEdit().setSecondary();" ], [ "IS_PROGRAM_MEMORY", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> IS_PROGRAM_MEMORY = new Key<>(\"isProgramMemory\", false).setSecondary();" ], [ "IS_PROGRAM_COUNTER", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> IS_PROGRAM_COUNTER = new Key<>(\"isProgramCounter\", false).setSecondary();" ], [ "AUTO_RELOAD_ROM", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> AUTO_RELOAD_ROM = new Key<>(\"autoReload\", false).setSecondary();" ], [ "LAST_DATA_FILE", "de.neemann.digital.core.element", "Keys", "public static final Key<File> LAST_DATA_FILE = new Key.KeyFile(\"lastDataFile\", new File(\"\")).setDependsOn(AUTO_RELOAD_ROM).setSecondary();" ], [ "SHOW_DATA_TABLE", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> SHOW_DATA_TABLE = new Key<>(\"showDataTable\", false).setSecondary();" ], [ "SHOW_DATA_GRAPH", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> SHOW_DATA_GRAPH = new Key<>(\"showDataGraph\", false).setSecondary();" ], [ "SHOW_DATA_GRAPH_MICRO", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> SHOW_DATA_GRAPH_MICRO = new Key<>(\"showDataGraphMicro\", false).setSecondary();" ], [ "ADD_VALUE_TO_GRAPH", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> ADD_VALUE_TO_GRAPH = new Key<>(\"addValueToGraph\", true).allowGroupEdit().setSecondary();" ], [ "MICRO_STEP", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> MICRO_STEP = new Key<>(\"microStep\", false);" ], [ "MAX_STEP_COUNT", "de.neemann.digital.core.element", "Keys", "public static final Key.KeyInteger MAX_STEP_COUNT = new Key.KeyInteger(\"maxStepCount\", 25).setMin(5);" ], [ "SETTINGS_MAX_STEP_COUNT", "de.neemann.digital.core.element", "Keys", "public static final Key<Integer> SETTINGS_MAX_STEP_COUNT = new Key.KeyInteger(\"settingsMaxStepCount\", 1000).setComboBoxValues(500, 1000, 5000, 10000).setMin(500).setSecondary().useTranslationOf(MAX_STEP_COUNT);" ], [ "IS_HIGH_Z", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> IS_HIGH_Z = new Key<>(\"isHighZ\", false).allowGroupEdit().setSecondary();" ], [ "AVOID_ACTIVE_LOW", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> AVOID_ACTIVE_LOW = new Key<>(\"avoidActiveLow\", false).setDependsOn(IS_HIGH_Z).allowGroupEdit().setSecondary();" ], [ "DESCRIPTION", "de.neemann.digital.core.element", "Keys", "public static final Key.LongString DESCRIPTION = new Key.LongString(\"Description\");" ], [ "NETNAME", "de.neemann.digital.core.element", "Keys", "public static final Key<String> NETNAME = new Key<>(\"NetName\", \"\");" ], [ "SETTINGS_IEEE_SHAPES", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> SETTINGS_IEEE_SHAPES = new Key<>(\"IEEEShapes\", !Locale.getDefault().getLanguage().equals(Locale.GERMAN.getLanguage())).setRequiresRestart();" ], [ "SETTINGS_LANGUAGE", "de.neemann.digital.core.element", "Keys", "public static final Key<Language> SETTINGS_LANGUAGE = new Key<>(\"Language\", new Language()).setRequiresRestart();" ], [ "SETTINGS_DEFAULT_TREESELECT", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> SETTINGS_DEFAULT_TREESELECT = new Key<>(\"defTreeSelect\", false);" ], [ "SETTINGS_EXPRESSION_FORMAT", "de.neemann.digital.core.element", "Keys", "public static final Key.KeyEnum<FormatToExpression> SETTINGS_EXPRESSION_FORMAT = new Key.KeyEnum<>(\"ExpressionFormat\", FormatToExpression.UNICODE, FormatToExpression.values(), true);" ], [ "SETTINGS_GRID", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> SETTINGS_GRID = new Key<>(\"grid\", true).setRequiresRepaint();" ], [ "SETTINGS_SHOW_WIRE_BITS", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> SETTINGS_SHOW_WIRE_BITS = new Key<>(\"showWireBits\", false);" ], [ "SETTINGS_MAC_MOUSE", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> SETTINGS_MAC_MOUSE = new Key<>(\"macMouse\", false).setRequiresRestart().setSecondary();" ], [ "SETTINGS_SHOW_TUNNEL_RENAME_DIALOG", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> SETTINGS_SHOW_TUNNEL_RENAME_DIALOG = new Key<>(\"tunnelRenameDialog\", true);" ], [ "SETTINGS_RENAME_LABELS", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> SETTINGS_RENAME_LABELS = new Key<>(\"renameLabels\", true);" ], [ "SETTINGS_OPEN_REMOTE_PORT", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> SETTINGS_OPEN_REMOTE_PORT = new Key<>(\"openRemotePort\", false).setSecondary().setRequiresRestart();" ], [ "SETTINGS_REMOTE_PORT", "de.neemann.digital.core.element", "Keys", "public static final Key<Integer> SETTINGS_REMOTE_PORT = new Key.KeyInteger(\"remotePort\", 41114).setMin(0).setMax(0xffff).setComboBoxValues(41114).setSecondary().setRequiresRestart().setDependsOn(SETTINGS_OPEN_REMOTE_PORT);" ], [ "OSCILLATION_DETECTION_COUNTER", "de.neemann.digital.core.element", "Keys", "public static final Key<Integer> OSCILLATION_DETECTION_COUNTER = new Key.KeyInteger(\"oscillationDetectionCounter\", 1000).setComboBoxValues(1000, 5000, 10000).setMin(1000).setMax(100000);" ], [ "INT_FORMAT", "de.neemann.digital.core.element", "Keys", "public static final Key<IntFormat> INT_FORMAT = new Key.KeyEnum<>(\"intFormat\", IntFormat.def, IntFormat.values()).setSecondary();" ], [ "PROBE_MODE", "de.neemann.digital.core.element", "Keys", "public static final Key<ProbeMode> PROBE_MODE = new Key.KeyEnum<>(\"probeMode\", ProbeMode.VALUE, ProbeMode.values());" ], [ "FIXED_POINT", "de.neemann.digital.core.element", "Keys", "public static final Key<Integer> FIXED_POINT = new Key.KeyInteger(\"fixedPoint\", 4).setMin(1).setMax(64).setDependsOn(INT_FORMAT, intFormat -> intFormat.equals(IntFormat.fixed) || intFormat.equals(IntFormat.fixedSigned)).allowGroupEdit().setSecondary();" ], [ "GRAPHIC_WIDTH", "de.neemann.digital.core.element", "Keys", "public static final Key.KeyInteger GRAPHIC_WIDTH = new Key.KeyInteger(\"graphicWidth\", 160).setMin(4);" ], [ "GRAPHIC_HEIGHT", "de.neemann.digital.core.element", "Keys", "public static final Key.KeyInteger GRAPHIC_HEIGHT = new Key.KeyInteger(\"graphicHeight\", 100).setMin(4);" ], [ "RELAY_NORMALLY_CLOSED", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> RELAY_NORMALLY_CLOSED = new Key<>(\"relayNormallyClosed\", false).allowGroupEdit();" ], [ "POLES", "de.neemann.digital.core.element", "Keys", "public static final Key<Integer> POLES = new Key.KeyInteger(\"poles\", 1).setComboBoxValues(1, 2, 3, 4).setMin(1).allowGroupEdit();" ], [ "BARREL_SHIFTER_MODE", "de.neemann.digital.core.element", "Keys", "public static final Key<BarrelShifterMode> BARREL_SHIFTER_MODE = new Key.KeyEnum<>(\"barrelShifterMode\", BarrelShifterMode.logical, BarrelShifterMode.values());" ], [ "DIRECTION", "de.neemann.digital.core.element", "Keys", "public static final Key<LeftRightFormat> DIRECTION = new Key.KeyEnum<>(\"direction\", LeftRightFormat.left, LeftRightFormat.values());" ], [ "BARREL_SIGNED", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> BARREL_SIGNED = new Key<>(\"barrelSigned\", false);" ], [ "COMMON_CONNECTION", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> COMMON_CONNECTION = new Key<>(\"commonCathode\", false).allowGroupEdit();" ], [ "COMMON_CONNECTION_TYPE", "de.neemann.digital.core.element", "Keys", "public static final Key<CommonConnectionType> COMMON_CONNECTION_TYPE = new Key.KeyEnum<>(\"commonConnectionType\", CommonConnectionType.cathode, CommonConnectionType.values()).setDependsOn(COMMON_CONNECTION).allowGroupEdit();" ], [ "LED_PERSISTENCE", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> LED_PERSISTENCE = new Key<>(\"ledPersistence\", false).allowGroupEdit().setDependsOn(COMMON_CONNECTION);" ], [ "LED_PERSIST_TIME", "de.neemann.digital.core.element", "Keys", "public static final Key<Integer> LED_PERSIST_TIME = new Key.KeyInteger(\"persistTime\", 0).setMin(0).allowGroupEdit();" ], [ "SETTINGS_ATF1502_FITTER", "de.neemann.digital.core.element", "Keys", "public static final Key<File> SETTINGS_ATF1502_FITTER = new Key.KeyFile(\"atf1502Fitter\", new File(\"c:/Wincupl/WinCupl/Fitters\")).setDirectoryOnly(true).setSecondary();" ], [ "SETTINGS_ATMISP", "de.neemann.digital.core.element", "Keys", "public static final Key<File> SETTINGS_ATMISP = new Key.KeyFile(\"ATMISP\", getATMISPPath()).setSecondary();" ], [ "ROW_DATA_BITS", "de.neemann.digital.core.element", "Keys", "public static final Key.KeyBits ROW_DATA_BITS = new Key.KeyBits(\"rowDataBits\", 8);" ], [ "COL_ADDR_BITS", "de.neemann.digital.core.element", "Keys", "public static final Key.KeyBits COL_ADDR_BITS = new Key.KeyBits(\"colAddrBits\", 3);" ], [ "LOCKED_MODE", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> LOCKED_MODE = new Key<>(\"lockedMode\", false);" ], [ "PINNUMBER", "de.neemann.digital.core.element", "Keys", "public static final Key<String> PINNUMBER = new Key<>(\"pinNumber\", \"\").setSecondary();" ], [ "PINCOUNT", "de.neemann.digital.core.element", "Keys", "public static final Key<Integer> PINCOUNT = new Key.KeyInteger(\"pinCount\", 0).setMin(0).setSecondary().setDependsOn(SHAPE_TYPE, st -> st.equals(CustomCircuitShapeType.DIL));" ], [ "INVERTER_CONFIG", "de.neemann.digital.core.element", "Keys", "public static final Key<InverterConfig> INVERTER_CONFIG = new Key<>(\"inverterConfig\", new InverterConfig.Builder().build());" ], [ "BACKGROUND_COLOR", "de.neemann.digital.core.element", "Keys", "public static final Key<java.awt.Color> BACKGROUND_COLOR = new Key<>(\"backgroundColor\", new Color(255, 255, 180, 200));" ], [ "SETTINGS_FONT_SCALING", "de.neemann.digital.core.element", "Keys", "public static final Key<Integer> SETTINGS_FONT_SCALING = new Key.KeyInteger(\"fontSize\", Screen.getDefaultFontScaling()).setComboBoxValues(100, 120, 150, 180, 200, 250, 300).setMin(50).setMax(400).setRequiresRestart().setSecondary();" ], [ "SETTINGS_USE_EQUALS_KEY", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> SETTINGS_USE_EQUALS_KEY;" ], [ "WITH_ENABLE", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> WITH_ENABLE = new Key<>(\"withEnable\", true);" ], [ "FET_UNIDIRECTIONAL", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> FET_UNIDIRECTIONAL = new Key<>(\"unidirectional\", false);" ], [ "ACTIVE_LOW", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> ACTIVE_LOW = new Key<>(\"activeLow\", false).allowGroupEdit();" ], [ "MAP_TO_KEY", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> MAP_TO_KEY = new Key<>(\"mapToKey\", false).allowGroupEdit();" ], [ "SETTINGS_LIBRARY_PATH", "de.neemann.digital.core.element", "Keys", "public static final Key<File> SETTINGS_LIBRARY_PATH = new Key.KeyFile(\"libraryPath\", ElementLibrary.getLibPath()).setDirectoryOnly(true).setSecondary();" ], [ "SETTINGS_JAR_PATH", "de.neemann.digital.core.element", "Keys", "public static final Key<File> SETTINGS_JAR_PATH = new Key.KeyFile(\"jarPath\", new File(\"\")).setSecondary().setRequiresRestart();" ], [ "ROMMANAGER", "de.neemann.digital.core.element", "Keys", "public static final Key<ROMManagerFile> ROMMANAGER = new Key<>(\"romContent\", ROMManagerFile::new).setSecondary();" ], [ "APPLICATION_TYPE", "de.neemann.digital.core.element", "Keys", "public static final Key.KeyEnum<Application.Type> APPLICATION_TYPE = new Key.KeyEnum<>(\"applicationType\", Application.Type.Generic, Application.Type.values());" ], [ "EXTERNAL_INPUTS", "de.neemann.digital.core.element", "Keys", "public static final Key<String> EXTERNAL_INPUTS = new Key<>(\"externalInputs\", \"in\");" ], [ "EXTERNAL_OUTPUTS", "de.neemann.digital.core.element", "Keys", "public static final Key<String> EXTERNAL_OUTPUTS = new Key<>(\"externalOutputs\", \"out\");" ], [ "EXTERNAL_CODE", "de.neemann.digital.core.element", "Keys", "public static final Key.LongString EXTERNAL_CODE = new Key.LongString(\"Code\").setRows(30).setColumns(80).setLineNumbers(true);" ], [ "EXTERNAL_CODE_FILE", "de.neemann.digital.core.element", "Keys", "public static final Key.KeyFile EXTERNAL_CODE_FILE = new Key.KeyFile(\"CodeFile\", new File(\"\"));" ], [ "SETTINGS_GHDL_PATH", "de.neemann.digital.core.element", "Keys", "public static final Key<File> SETTINGS_GHDL_PATH = new Key.KeyFile(\"ghdlPath\", new File(\"ghdl\")).setSecondary();" ], [ "GHDL_OPTIONS", "de.neemann.digital.core.element", "Keys", "public static final Key<String> GHDL_OPTIONS = new Key.LongString(\"ghdlOptions\", \"--std=08 --ieee=synopsys\").setRows(3).setColumns(30).setPanelId(\"Options\");" ], [ "IVERILOG_OPTIONS", "de.neemann.digital.core.element", "Keys", "public static final Key<String> IVERILOG_OPTIONS = new Key.LongString(\"iverilogOptions\", \"\").setRows(3).setColumns(30).setPanelId(\"Options\");" ], [ "SETTINGS_IVERILOG_PATH", "de.neemann.digital.core.element", "Keys", "public static final Key<File> SETTINGS_IVERILOG_PATH = new Key.KeyFile(\"iverilogPath\", new File(\"iverilog\")).setSecondary();" ], [ "CUSTOM_SHAPE", "de.neemann.digital.core.element", "Keys", "public static final Key<CustomShapeDescription> CUSTOM_SHAPE = new Key<>(\"customShape\", new CustomShapeDescription.Builder().build()).setSecondary().setDependsOn(SHAPE_TYPE, st -> st.equals(CustomCircuitShapeType.CUSTOM));" ], [ "PRELOAD_PROGRAM", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> PRELOAD_PROGRAM = new Key<>(\"preloadProgram\", false).setSecondary();" ], [ "BIG_ENDIAN", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> BIG_ENDIAN = new Key<>(\"bigEndian\", false).setSecondary().setDependsOn(AUTO_RELOAD_ROM);" ], [ "PROGRAM_TO_PRELOAD", "de.neemann.digital.core.element", "Keys", "public static final Key<File> PROGRAM_TO_PRELOAD = new Key.KeyFile(\"preloadProgramFile\", new File(\"\")).setSecondary().setDependsOn(PRELOAD_PROGRAM);" ], [ "BIG_ENDIAN_SETTING", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> BIG_ENDIAN_SETTING = new Key<>(\"bigEndianSetting\", false).setSecondary().useTranslationOf(BIG_ENDIAN).setDependsOn(PRELOAD_PROGRAM);" ], [ "WIDE_SHAPE", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> WIDE_SHAPE = new Key<>(\"wideShape\", false).setSecondary().allowGroupEdit();" ], [ "RECT_WIDTH", "de.neemann.digital.core.element", "Keys", "public static final Key.KeyInteger RECT_WIDTH = new Key.KeyInteger(\"RectWidth\", 3).setMin(2);" ], [ "RECT_HEIGHT", "de.neemann.digital.core.element", "Keys", "public static final Key.KeyInteger RECT_HEIGHT = new Key.KeyInteger(\"RectHeight\", 3).setMin(2);" ], [ "RECT_INSIDE", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> RECT_INSIDE = new Key<>(\"RectInside\", false).setSecondary();" ], [ "RECT_BOTTOM", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> RECT_BOTTOM = new Key<>(\"RectBottom\", false).setSecondary();" ], [ "RECT_RIGHT", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> RECT_RIGHT = new Key<>(\"RectRight\", false).setSecondary();" ], [ "MIDI_CHANNEL", "de.neemann.digital.core.element", "Keys", "public static final Key.KeyInteger MIDI_CHANNEL = new Key.KeyInteger(\"midiChannel\", 1).setMin(1).setMax(16);" ], [ "MIDI_INSTRUMENT", "de.neemann.digital.core.element", "Keys", "public static final Key<String> MIDI_INSTRUMENT = new Key<>(\"midiInstrument\", \"\");" ], [ "MIDI_PROG_CHANGE", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> MIDI_PROG_CHANGE = new Key<>(\"midiProgChange\", false);" ], [ "SETTINGS_TOOLCHAIN_CONFIG", "de.neemann.digital.core.element", "Keys", "public static final Key<File> SETTINGS_TOOLCHAIN_CONFIG = new Key.KeyFile(\"toolChainConfig\", new File(\"\")).setSecondary().setRequiresRestart();" ], [ "GENERIC", "de.neemann.digital.core.element", "Keys", "public static final Key<String> GENERIC = new Key.LongString(\"generic\").setLineNumbers(true).allowGroupEdit();" ], [ "GENERICLARGE", "de.neemann.digital.core.element", "Keys", "public static final Key<String> GENERICLARGE = new Key.LongString(\"generic\").setLineNumbers(true).setRows(20).allowGroupEdit();" ], [ "IS_GENERIC", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> IS_GENERIC = new Key<>(\"isGeneric\", false).setSecondary();" ], [ "SETTINGS_SHOW_TUTORIAL", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> SETTINGS_SHOW_TUTORIAL = new Key<>(\"showTutorial\", true).setSecondary();" ], [ "SETTINGS_WIRETOOLTIP", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> SETTINGS_WIRETOOLTIP = new Key<>(\"wireToolTips\", false);" ], [ "SWITCH_ACTS_AS_INPUT", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> SWITCH_ACTS_AS_INPUT = new Key<>(\"switchActsAsInput\", false).setSecondary();" ], [ "SNAP_TO_GRID", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> SNAP_TO_GRID = new Key<>(\"snapToGrid\", true).setSecondary();" ], [ "MIRROR", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> MIRROR = new Key<>(\"mirror\", false).allowGroupEdit().setSecondary();" ], [ "TESTDATA", "de.neemann.digital.core.element", "Keys", "public static final Key<TestCaseDescription> TESTDATA = new Key<>(\"Testdata\", TestCaseDescription::new);" ], [ "TRIGGER", "de.neemann.digital.core.element", "Keys", "public static final Key.KeyEnum<ScopeTrigger.Trigger> TRIGGER = new Key.KeyEnum<>(\"trigger\", ScopeTrigger.Trigger.both, ScopeTrigger.Trigger.values());" ], [ "PORT", "de.neemann.digital.core.element", "Keys", "public static final Key.KeyInteger PORT = new Key.KeyInteger(\"port\", 23).setMin(1).setMax((1 << 16) - 1);" ], [ "TELNET_ESCAPE", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> TELNET_ESCAPE = new Key<>(\"telnetEscape\", true).allowGroupEdit();" ], [ "SKIP_HDL", "de.neemann.digital.core.element", "Keys", "public static final Key<Boolean> SKIP_HDL = new Key<>(\"skipHDL\", false).setSecondary();" ], [ "PREFIX", "de.neemann.digital.core.basic", "FanIn", "public static final String PREFIX = \"In_\";" ], [ "DESCRIPTION", "de.neemann.digital.core.basic", "NOr", "public static final ElementTypeDescription DESCRIPTION = new FanInDescription(NOr.class).addAttribute(Keys.WIDE_SHAPE);" ], [ "DESCRIPTION", "de.neemann.digital.core.basic", "And", "public static final ElementTypeDescription DESCRIPTION = new FanInDescription(And.class).addAttribute(Keys.WIDE_SHAPE);" ], [ "DESCRIPTION", "de.neemann.digital.core.basic", "XNOr", "public static final ElementTypeDescription DESCRIPTION = new FanInDescription(XNOr.class).addAttribute(Keys.WIDE_SHAPE);" ], [ "DESCRIPTION", "de.neemann.digital.core.basic", "XOr", "public static final ElementTypeDescription DESCRIPTION = new FanInDescription(XOr.class).addAttribute(Keys.WIDE_SHAPE);" ], [ "DESCRIPTION", "de.neemann.digital.core.basic", "Not", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Not.class, input(\"in\")).addAttribute(Keys.ROTATE).addAttribute(Keys.WIDE_SHAPE).addAttribute(Keys.BITS).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.basic", "NAnd", "public static final ElementTypeDescription DESCRIPTION = new FanInDescription(NAnd.class).addAttribute(Keys.WIDE_SHAPE);" ], [ "DESCRIPTION", "de.neemann.digital.core.basic", "Or", "public static final ElementTypeDescription DESCRIPTION = new FanInDescription(Or.class).addAttribute(Keys.WIDE_SHAPE);" ], [ "STARTED", "de.neemann.digital.core", "ModelEvent", "public static final ModelEvent STARTED = new ModelEvent(ModelEventType.STARTED);" ], [ "CLOSED", "de.neemann.digital.core", "ModelEvent", "public static final ModelEvent CLOSED = new ModelEvent(ModelEventType.CLOSED);" ], [ "POSTCLOSED", "de.neemann.digital.core", "ModelEvent", "public static final ModelEvent POSTCLOSED = new ModelEvent(ModelEventType.POSTCLOSED);" ], [ "STEP", "de.neemann.digital.core", "ModelEvent", "public static final ModelEvent STEP = new ModelEvent(ModelEventType.STEP);" ], [ "CHECKBURN", "de.neemann.digital.core", "ModelEvent", "public static final ModelEvent CHECKBURN = new ModelEvent(ModelEventType.CHECKBURN);" ], [ "MICROSTEP", "de.neemann.digital.core", "ModelEvent", "public static final ModelEvent MICROSTEP = new ModelEvent(ModelEventType.MICROSTEP);" ], [ "RUN_TO_BREAK", "de.neemann.digital.core", "ModelEvent", "public static final ModelEvent RUN_TO_BREAK = new ModelEvent(ModelEventType.RUN_TO_BREAK);" ], [ "RUN_TO_BREAK_TIMEOUT", "de.neemann.digital.core", "ModelEvent", "public static final ModelEvent RUN_TO_BREAK_TIMEOUT = new ModelEvent(ModelEventType.RUN_TO_BREAK_TIMEOUT);" ], [ "BREAK", "de.neemann.digital.core", "ModelEvent", "public static final ModelEvent BREAK = new ModelEvent(ModelEventType.BREAK);" ], [ "DESCRIPTION", "de.neemann.digital.core.switching", "FGPFET", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(FGPFET.class, input(\"G\")).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).addAttribute(Keys.BLOWN);" ], [ "DESCRIPTION", "de.neemann.digital.core.switching", "NFET", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(NFET.class, input(\"G\")).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.BITS).addAttribute(Keys.FET_UNIDIRECTIONAL).addAttribute(Keys.LABEL);" ], [ "DESCRIPTION", "de.neemann.digital.core.switching", "FGNFET", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(FGNFET.class, input(\"G\")).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).addAttribute(Keys.BLOWN);" ], [ "DESCRIPTION", "de.neemann.digital.core.switching", "PFET", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(PFET.class, input(\"G\")).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.BITS).addAttribute(Keys.FET_UNIDIRECTIONAL).addAttribute(Keys.LABEL);" ], [ "DESCRIPTION", "de.neemann.digital.core.switching", "TransGate", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(TransGate.class, input(\"S\"), input(\"~S\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS);" ], [ "DESCRIPTION", "de.neemann.digital.core.switching", "SwitchDT", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(SwitchDT.class).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).addAttribute(Keys.POLES);" ], [ "DESCRIPTION", "de.neemann.digital.core.switching", "Relay", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Relay.class, input(\"in1\"), input(\"in2\")).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).addAttribute(Keys.POLES).addAttribute(Keys.RELAY_NORMALLY_CLOSED);" ], [ "DESCRIPTION", "de.neemann.digital.core.switching", "RelayDT", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(RelayDT.class, input(\"in1\"), input(\"in2\")).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).addAttribute(Keys.POLES);" ], [ "DESCRIPTION", "de.neemann.digital.core.switching", "Switch", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Switch.class).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).addAttribute(Keys.POLES).addAttribute(Keys.CLOSED).addAttribute(Keys.SWITCH_ACTS_AS_INPUT);" ], [ "DESCRIPTION", "de.neemann.digital.core.switching", "Fuse", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Fuse.class).addAttribute(Keys.ROTATE).addAttribute(Keys.BLOWN);" ], [ "DESCRIPTION", "de.neemann.digital.core.wiring", "Reset", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"Reset\", Reset.class).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.INVERT_OUTPUT).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.wiring", "Stop", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Stop.class, input(\"stop\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.INVERTER_CONFIG);" ], [ "DESCRIPTION", "de.neemann.digital.core.wiring", "Decoder", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Decoder.class, input(\"sel\")).addAttribute(Keys.ROTATE).addAttribute(Keys.SELECTOR_BITS).addAttribute(Keys.FLIP_SEL_POSITON).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.wiring", "Delay", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Delay.class, input(\"in\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.DELAY_TIME);" ], [ "DESCRIPTION", "de.neemann.digital.core.wiring", "Driver", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Driver.class, input(\"in\"), input(\"sel\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.FLIP_SEL_POSITON).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.wiring", "DriverInvSel", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(DriverInvSel.class, input(\"in\"), input(\"sel\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.FLIP_SEL_POSITON).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.wiring", "PriorityEncoder", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(PriorityEncoder.class) {\n\n    @Override\n    public PinDescriptions getInputDescription(ElementAttributes elementAttributes) {\n        int inputs = 1 << elementAttributes.get(Keys.SELECTOR_BITS);\n        PinDescription[] names = new PinDescription[inputs];\n        for (int i = 0; i < inputs; i++) names[i] = input(\"in\" + i, Lang.get(\"elem_PriorityEncoder_input\", i));\n        return new PinDescriptions(names);\n    }\n}.addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.SELECTOR_BITS).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.wiring", "BusSplitter", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(BusSplitter.class, input(\"OE\")).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.BITS).addAttribute(Keys.SPLITTER_SPREADING);" ], [ "DESCRIPTION", "de.neemann.digital.core.wiring", "Splitter", "public static final ElementTypeDescription DESCRIPTION = new SplitterTypeDescription().addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.INPUT_SPLIT).addAttribute(Keys.OUTPUT_SPLIT).addAttribute(Keys.SPLITTER_SPREADING).setShortName(\"\").supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.wiring", "Multiplexer", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Multiplexer.class) {\n\n    @Override\n    public PinDescriptions getInputDescription(ElementAttributes elementAttributes) {\n        int size = 1 << elementAttributes.get(Keys.SELECTOR_BITS);\n        PinDescription[] names = new PinDescription[size + 1];\n        names[0] = input(\"sel\", Lang.get(\"elem_Multiplexer_pin_sel\"));\n        for (int i = 0; i < size; i++) names[i + 1] = input(\"in_\" + i, Lang.get(\"elem_Multiplexer_input\", i));\n        return new PinDescriptions(names);\n    }\n}.addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.SELECTOR_BITS).addAttribute(Keys.FLIP_SEL_POSITON).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.wiring", "BitSelector", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(BitSelector.class, input(\"in\"), input(\"sel\")).addAttribute(Keys.ROTATE).addAttribute(Keys.SELECTOR_BITS).addAttribute(Keys.FLIP_SEL_POSITON).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.wiring", "Break", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Break.class, input(\"brk\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.ENABLED).addAttribute(Keys.CYCLES);" ], [ "DESCRIPTION", "de.neemann.digital.core.wiring", "Clock", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"Clock\", Clock.class).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.RUN_AT_REAL_TIME).addAttribute(Keys.FREQUENCY).addAttribute(Keys.PINNUMBER).addAttribute(Keys.IN_OUT_SMALL).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.wiring", "AsyncSeq", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(AsyncSeq.class).addAttribute(Keys.RUN_AT_REAL_TIME).addAttribute(Keys.FREQUENCY);" ], [ "DESCRIPTION", "de.neemann.digital.core.wiring", "Demultiplexer", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Demultiplexer.class, input(\"sel\"), input(\"in\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.SELECTOR_BITS).addAttribute(Keys.FLIP_SEL_POSITON).addAttribute(Keys.DEFAULT).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.flipflops", "FlipflopDAsync", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"D_FF_AS\", FlipflopDAsync.class, input(\"Set\"), input(\"D\"), input(\"C\").setClock(), input(\"Clr\")).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).addAttribute(Keys.DEFAULT).addAttribute(Keys.INVERTER_CONFIG).addAttribute(Keys.VALUE_IS_PROBE).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.flipflops", "FlipflopD", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"D_FF\", FlipflopD.class, input(\"D\"), input(\"C\").setClock()).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).addAttribute(Keys.DEFAULT).addAttribute(Keys.INVERTER_CONFIG).addAttribute(Keys.VALUE_IS_PROBE).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.flipflops", "FlipflopRSAsync", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"RS_FF_AS\", FlipflopRSAsync.class, input(\"S\"), input(\"R\")).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.LABEL).addAttribute(Keys.DEFAULT).addAttribute(Keys.INVERTER_CONFIG).addAttribute(Keys.VALUE_IS_PROBE);" ], [ "DESCRIPTION", "de.neemann.digital.core.flipflops", "FlipflopT", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"T_FF\", FlipflopT.class) {\n\n    @Override\n    public PinDescriptions getInputDescription(ElementAttributes elementAttributes) throws NodeException {\n        if (elementAttributes.get(Keys.WITH_ENABLE))\n            return new PinDescriptions(input(\"T\"), input(\"C\").setClock()).setLangKey(getPinLangKey());\n        else\n            return new PinDescriptions(input(\"C\").setClock()).setLangKey(getPinLangKey());\n    }\n}.addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.LABEL).addAttribute(Keys.WITH_ENABLE).addAttribute(Keys.DEFAULT).addAttribute(Keys.INVERTER_CONFIG).addAttribute(Keys.VALUE_IS_PROBE);" ], [ "DESCRIPTION", "de.neemann.digital.core.flipflops", "FlipflopJKAsync", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"JK_FF_AS\", FlipflopJKAsync.class, input(\"Set\"), input(\"J\"), input(\"C\").setClock(), input(\"K\"), input(\"Clr\")).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.LABEL).addAttribute(Keys.DEFAULT).addAttribute(Keys.INVERTER_CONFIG).addAttribute(Keys.VALUE_IS_PROBE).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.flipflops", "FlipflopJK", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"JK_FF\", FlipflopJK.class, input(\"J\"), input(\"C\").setClock(), input(\"K\")).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.LABEL).addAttribute(Keys.DEFAULT).addAttribute(Keys.INVERTER_CONFIG).addAttribute(Keys.VALUE_IS_PROBE).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.flipflops", "Monoflop", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Monoflop.class, input(\"C\").setClock(), input(\"R\")).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.LABEL).addAttribute(Keys.DEFAULT).addAttribute(Keys.MONOFLOP_DELAY).addAttribute(Keys.INVERTER_CONFIG).addAttribute(Keys.VALUE_IS_PROBE);" ], [ "DESCRIPTION", "de.neemann.digital.core.flipflops", "FlipflopRS", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"RS_FF\", FlipflopRS.class, input(\"S\"), input(\"C\").setClock(), input(\"R\")).addAttribute(Keys.ROTATE).addAttribute(Keys.MIRROR).addAttribute(Keys.LABEL).addAttribute(Keys.DEFAULT).addAttribute(Keys.INVERTER_CONFIG).addAttribute(Keys.VALUE_IS_PROBE);" ], [ "DESCRIPTION", "de.neemann.digital.core.arithmetic", "BarrelShifter", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(BarrelShifter.class, input(\"in\"), input(\"shift\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.BITS).addAttribute(Keys.BARREL_SIGNED).addAttribute(Keys.DIRECTION).addAttribute(Keys.BARREL_SHIFTER_MODE);" ], [ "DESCRIPTION", "de.neemann.digital.core.arithmetic", "Mul", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Mul.class, input(\"a\"), input(\"b\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.SIGNED).addAttribute(Keys.BITS).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.arithmetic", "Neg", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Neg.class, input(\"in\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.arithmetic", "BitExtender", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(BitExtender.class, input(\"in\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.INPUT_BITS).addAttribute(Keys.OUTPUT_BITS).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.arithmetic", "Add", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Add.class, input(\"a\"), input(\"b\"), input(\"c_i\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.BITS).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.arithmetic", "Div", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Div.class, input(\"a\"), input(\"b\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.BITS).addAttribute(Keys.SIGNED).addAttribute(Keys.REMAINDER_POSITIVE);" ], [ "DESCRIPTION", "de.neemann.digital.core.arithmetic", "PRNG", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(PRNG.class, input(\"S\"), input(\"se\"), input(\"ne\"), input(\"C\").setClock()).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.LABEL);" ], [ "DESCRIPTION", "de.neemann.digital.core.arithmetic", "Sub", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Sub.class, input(\"a\"), input(\"b\"), input(\"c_i\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.BITS).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.arithmetic", "Comparator", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Comparator.class, input(\"a\"), input(\"b\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.BITS).addAttribute(Keys.SIGNED).setShortName(\"\").supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.arithmetic", "BitCount", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(BitCount.class, input(\"in\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS);" ], [ "EMPTY_LIST", "de.neemann.digital.core", "ObservableValues", "public static final ObservableValues EMPTY_LIST = new ObservableValues();" ], [ "DEFAULT_FORMATTER", "de.neemann.digital.core", "IntFormat", "public static final ValueFormatter DEFAULT_FORMATTER = ValueFormatterDefault.INSTANCE;" ], [ "HEX_FORMATTER", "de.neemann.digital.core", "IntFormat", "public static final ValueFormatter HEX_FORMATTER = ValueFormatterHex.INSTANCE;" ], [ "DESCRIPTION", "de.neemann.digital.core.extern", "External", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(External.class) {\n\n    @Override\n    public PinDescriptions getInputDescription(ElementAttributes elementAttributes) {\n        return new PortDefinition(elementAttributes.get(Keys.EXTERNAL_INPUTS)).getPinDescriptions(PinDescription.Direction.input);\n    }\n\n    @Override\n    public PinDescriptions getOutputDescriptions(ElementAttributes elementAttributes) {\n        return new PortDefinition(elementAttributes.get(Keys.EXTERNAL_OUTPUTS)).getPinDescriptions(PinDescription.Direction.output);\n    }\n}.addAttribute(Keys.LABEL).addAttribute(Keys.WIDTH).addAttribute(Keys.EXTERNAL_INPUTS).addAttribute(Keys.EXTERNAL_OUTPUTS).addAttribute(Keys.EXTERNAL_CODE).addAttribute(Keys.APPLICATION_TYPE).addAttribute(Keys.GHDL_OPTIONS).addAttribute(Keys.IVERILOG_OPTIONS).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.core.extern", "ExternalFile", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(ExternalFile.class) {\n\n    @Override\n    public PinDescriptions getInputDescription(ElementAttributes elementAttributes) {\n        return new PortDefinition(elementAttributes.get(Keys.EXTERNAL_INPUTS)).getPinDescriptions(PinDescription.Direction.input);\n    }\n\n    @Override\n    public PinDescriptions getOutputDescriptions(ElementAttributes elementAttributes) {\n        return new PortDefinition(elementAttributes.get(Keys.EXTERNAL_OUTPUTS)).getPinDescriptions(PinDescription.Direction.output);\n    }\n}.addAttribute(Keys.LABEL).addAttribute(Keys.WIDTH).addAttribute(Keys.EXTERNAL_INPUTS).addAttribute(Keys.EXTERNAL_OUTPUTS).addAttribute(Keys.EXTERNAL_CODE_FILE).addAttribute(Keys.APPLICATION_TYPE).addAttribute(Keys.GHDL_OPTIONS).addAttribute(Keys.IVERILOG_OPTIONS).supportsHDL();" ], [ "DEFAULT_RAD", "de.neemann.digital.fsm", "State", "static final int DEFAULT_RAD = 70;" ], [ "INSTANCE", "de.neemann.digital.lang", "Lang", "static final Lang INSTANCE = new Lang();" ], [ "INSTANCE", "de.neemann.digital.lang", "InstanceHolder", "static final Lang INSTANCE = new Lang();" ], [ "DESCRIPTION", "de.neemann.digital.testing", "TestCaseElement", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(\"Testcase\", TestCaseElement.class).addAttribute(Keys.LABEL).addAttribute(Keys.TESTDATA).addAttribute(Keys.ENABLED).supportsHDL();" ], [ "STATENAMES", "de.neemann.digital.analyse", "TruthTableTableModel", "public static final String[] STATENAMES = new String[] { \"0\", \"1\", \"x\" };" ], [ "ONE", "de.neemann.digital.analyse.expression", "Constant", "public static final Constant ONE = new Constant(true);" ], [ "ZERO", "de.neemann.digital.analyse.expression", "Constant", "public static final Constant ZERO = new Constant(false);" ], [ "PRIMARY", "de.neemann.digital.gui.components", "EditorPanel", "public static final String PRIMARY = \"primary\";" ], [ "SECONDARY", "de.neemann.digital.gui.components", "EditorPanel", "public static final String SECONDARY = \"secondary\";" ], [ "INSTANCE", "de.neemann.digital.gui.components", "EditorFactory", "static final EditorFactory INSTANCE = new EditorFactory();" ], [ "MAX_TERMINAL_STORED", "de.neemann.digital.gui.components.terminal", "ConsoleTerminal", "public static final int MAX_TERMINAL_STORED = 2048;" ], [ "DESCRIPTION", "de.neemann.digital.gui.components.terminal", "Terminal", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Terminal.class, input(\"D\"), input(\"C\").setClock(), input(\"en\")).addAttribute(Keys.TERM_WIDTH).addAttribute(Keys.TERM_HEIGHT).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL);" ], [ "DESCRIPTION", "de.neemann.digital.gui.components.terminal", "Keyboard", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Keyboard.class, input(\"C\").setClock(), input(\"en\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.INVERTER_CONFIG);" ], [ "FAILED_COLOR", "de.neemann.digital.gui.components.testing", "ValueTableDialog", "static final Color FAILED_COLOR = new Color(255, 200, 200);" ], [ "PASSED_COLOR", "de.neemann.digital.gui.components.testing", "ValueTableDialog", "static final Color PASSED_COLOR = new Color(200, 255, 200);" ], [ "ICON_DELETE", "de.neemann.digital.gui.components", "CircuitComponent", "public static final Icon ICON_DELETE = IconCreator.create(\"delete.png\");" ], [ "ICON_COPY", "de.neemann.digital.gui.components", "CircuitComponent", "public static final Icon ICON_COPY = IconCreator.create(\"edit-copy.png\");" ], [ "DESCRIPTION", "de.neemann.digital.gui.components.graphics", "VGA", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(VGA.class, input(\"R\"), input(\"G\"), input(\"B\"), input(\"H\"), input(\"V\"), input(\"C\").setClock()).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL);" ], [ "DESCRIPTION", "de.neemann.digital.gui.components.graphics", "GraphicCard", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(GraphicCard.class, input(\"A\"), input(\"str\"), input(\"C\").setClock(), input(\"ld\"), input(\"B\")).addAttribute(Keys.ROTATE).addAttribute(Keys.BITS).addAttribute(Keys.LABEL).addAttribute(Keys.GRAPHIC_WIDTH).addAttribute(Keys.GRAPHIC_HEIGHT);" ], [ "DESCRIPTION", "de.neemann.digital.gui.components.graphics", "LedMatrix", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(LedMatrix.class, input(\"r-data\"), input(\"c-addr\")).addAttribute(Keys.ROTATE).addAttribute(Keys.LABEL).addAttribute(Keys.ROW_DATA_BITS).addAttribute(Keys.COL_ADDR_BITS).addAttribute(Keys.COLOR).addAttribute(Keys.LED_PERSISTENCE);" ], [ "DESCRIPTION", "de.neemann.digital.gui.components.data", "ScopeTrigger", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(ScopeTrigger.class, input(\"T\").setClock()).addAttribute(Keys.LABEL).addAttribute(Keys.TRIGGER).addAttribute(Keys.MAX_STEP_COUNT);" ], [ "DATADESCRIPTION", "de.neemann.digital.gui.components.data", "DummyElement", "public static final ElementTypeDescription DATADESCRIPTION = new ElementTypeDescription(\"Data\", DummyElement.class).addAttribute(Keys.MICRO_STEP).addAttribute(Keys.MAX_STEP_COUNT).addAttribute(Keys.SNAP_TO_GRID);" ], [ "TEXTDESCRIPTION", "de.neemann.digital.gui.components.data", "DummyElement", "public static final ElementTypeDescription TEXTDESCRIPTION = new ElementTypeDescription(\"Text\", DummyElement.class).addAttribute(Keys.DESCRIPTION).addAttribute(Keys.ROTATE).addAttribute(Keys.TEXT_ORIENTATION).addAttribute(Keys.FONT_SIZE).addAttribute(Keys.SNAP_TO_GRID);" ], [ "RECTDESCRIPTION", "de.neemann.digital.gui.components.data", "DummyElement", "public static final ElementTypeDescription RECTDESCRIPTION = new ElementTypeDescription(\"Rectangle\", DummyElement.class).addAttribute(Keys.LABEL).addAttribute(Keys.RECT_WIDTH).addAttribute(Keys.RECT_HEIGHT).addAttribute(Keys.RECT_INSIDE).addAttribute(Keys.RECT_BOTTOM).addAttribute(Keys.RECT_RIGHT).addAttribute(Keys.FONT_SIZE).addAttribute(Keys.SNAP_TO_GRID);" ], [ "LEFT", "de.neemann.digital.gui.components", "TextLineNumber", "public final static float LEFT = 0.0f;" ], [ "CENTER", "de.neemann.digital.gui.components", "TextLineNumber", "public final static float CENTER = 0.5f;" ], [ "RIGHT", "de.neemann.digital.gui.components", "TextLineNumber", "public final static float RIGHT = 1.0f;" ], [ "INSTANCE", "de.neemann.digital.gui", "Settings", "static final Settings INSTANCE = new Settings();" ], [ "INSTANCE", "de.neemann.digital.gui", "SettingsHolder", "static final Settings INSTANCE = new Settings();" ], [ "BASE_FILE_KEY", "de.neemann.digital.hdl.hgs", "Context", "public static final String BASE_FILE_KEY = \"baseFile\";" ], [ "DESCRIPTION", "de.neemann.digital.draw.library", "GenericCode", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(GenericCode.class).addAttribute(Keys.GENERICLARGE).supportsHDL();" ], [ "DESCRIPTION", "de.neemann.digital.draw.library", "GenericInitCode", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(GenericInitCode.class).addAttribute(Keys.LABEL).addAttribute(Keys.ENABLED).addAttribute(Keys.GENERIC).supportsHDL();" ], [ "GEN_ARGS_KEY", "de.neemann.digital.draw.library", "ResolveGenerics", "public static final String GEN_ARGS_KEY = \"genArgs\";" ], [ "HEIGHT", "de.neemann.digital.draw.shapes", "ButtonShape", "protected static final int HEIGHT = OUT_SIZE / 2;" ], [ "SIZE2", "de.neemann.digital.draw.shapes", "GenericShape", "public static final int SIZE2 = 10;" ], [ "SIZE", "de.neemann.digital.draw.shapes", "GenericShape", "public static final int SIZE = SIZE2 * 2;" ], [ "CIRC", "de.neemann.digital.draw.shapes", "DILShape", "static final float CIRC = (float) (4 * (Math.sqrt(2) - 1) / 3);" ], [ "DOWNSHIFT", "de.neemann.digital.draw.shapes", "VDDShape", "static final int DOWNSHIFT = 4;" ], [ "CHARGED_GATE", "de.neemann.digital.draw.shapes", "FGFETShapeN", "static final Style CHARGED_GATE = Style.NORMAL.deriveStyle(6, false, Color.RED);" ], [ "OUT_SIZE", "de.neemann.digital.draw.shapes", "OutputShape", "public static final int OUT_SIZE = GenericShape.SIZE * 3 / 4;" ], [ "LATEX_RAD", "de.neemann.digital.draw.shapes", "OutputShape", "static final Vector LATEX_RAD = new Vector(Style.MAXLINETHICK, Style.MAXLINETHICK);" ], [ "WIDTH2", "de.neemann.digital.draw.shapes", "PullDownShape", "public static final int WIDTH2 = SIZE2 - 3;" ], [ "HEIGHT", "de.neemann.digital.draw.shapes", "PullDownShape", "public static final int HEIGHT = SIZE + SIZE / 3;" ], [ "HEIGHT", "de.neemann.digital.draw.shapes", "SevenShape", "static final int HEIGHT = 7;" ], [ "FRAME", "de.neemann.digital.draw.shapes", "SevenShape", "public static final Polygon FRAME = Polygon.createFromPath(\"m -10,1 L 70,1 70,139 -10,139 z\");" ], [ "DESCRIPTION", "de.neemann.digital.draw.elements", "Tunnel", "public static final ElementTypeDescription DESCRIPTION = new ElementTypeDescription(Tunnel.class, input(\"in\")).addAttribute(Keys.ROTATE).addAttribute(Keys.NETNAME).supportsHDL();" ], [ "HIGH_CONTRAST", "de.neemann.digital.draw.graphics", "SVGSettings", "static final Key<Boolean> HIGH_CONTRAST = new Key<>(\"SVG_highContrast\", false);" ], [ "MONOCHROME", "de.neemann.digital.draw.graphics", "SVGSettings", "static final Key<Boolean> MONOCHROME = new Key<>(\"SVG_monochrome\", false);" ], [ "SMALL_IO", "de.neemann.digital.draw.graphics", "SVGSettings", "static final Key<Boolean> SMALL_IO = new Key<>(\"SVG_smallIO\", false);" ], [ "NO_PIN_MARKER", "de.neemann.digital.draw.graphics", "SVGSettings", "static final Key<Boolean> NO_PIN_MARKER = new Key<>(\"SVG_noPinMarker\", false);" ], [ "THINNER_LINES", "de.neemann.digital.draw.graphics", "SVGSettings", "static final Key<Boolean> THINNER_LINES = new Key<>(\"SVG_thinnerLines\", false);" ], [ "HIDE_TEST", "de.neemann.digital.draw.graphics", "SVGSettings", "static final Key<Boolean> HIDE_TEST = new Key<>(\"SVG_hideTest\", false);" ], [ "NO_SHAPE_FILLING", "de.neemann.digital.draw.graphics", "SVGSettings", "static final Key<Boolean> NO_SHAPE_FILLING = new Key<>(\"SVG_noShapeFilling\", false);" ], [ "LATEX", "de.neemann.digital.draw.graphics", "SVGSettings", "static final Key<Boolean> LATEX = new Key<>(\"SVG_LaTeX\", false);" ], [ "PINS_IN_MATH_MODE", "de.neemann.digital.draw.graphics", "SVGSettings", "static final Key<Boolean> PINS_IN_MATH_MODE = new Key<>(\"SVG_pinsInMathMode\", false).setDependsOn(LATEX);" ], [ "INSTANCE", "de.neemann.digital.draw.graphics", "SVGSettings", "static final SVGSettings INSTANCE = new SVGSettings();" ], [ "INSTANCE", "de.neemann.digital.draw.graphics", "SettingsHolder", "static final SVGSettings INSTANCE = new SVGSettings();" ], [ "COLOR_SCHEME", "de.neemann.digital.draw.graphics", "ColorScheme", "public static final Key<ColorSchemes> COLOR_SCHEME = new Key.KeyEnum<>(\"colorScheme\", ColorSchemes.DEFAULT, ColorSchemes.values()).setRequiresRepaint();" ], [ "CUSTOM_COLOR_SCHEME", "de.neemann.digital.draw.graphics", "ColorScheme", "public static final Key<ColorScheme> CUSTOM_COLOR_SCHEME = new Key<>(\"customColorScheme\", DEFAULT_SCHEME).setDependsOn(COLOR_SCHEME, o -> o.equals(ColorSchemes.CUSTOM)).setRequiresRepaint();" ], [ "MAXLINETHICK", "de.neemann.digital.draw.graphics", "Style", "public static final int MAXLINETHICK = 4;" ], [ "NORMAL", "de.neemann.digital.draw.graphics", "Style", "public static final Style NORMAL = new Builder().build();" ], [ "DISABLED", "de.neemann.digital.draw.graphics", "Style", "public static final Style DISABLED = new Builder().setColor(ColorKey.DISABLED).build();" ], [ "INOUT", "de.neemann.digital.draw.graphics", "Style", "public static final Style INOUT = new Builder(NORMAL).setFontStyle(Font.ITALIC).build();" ], [ "FAILED", "de.neemann.digital.draw.graphics", "Style", "public static final Style FAILED = new Builder(NORMAL).setColor(ColorKey.ERROR).build();" ], [ "PASS", "de.neemann.digital.draw.graphics", "Style", "public static final Style PASS = new Builder(NORMAL).setColor(ColorKey.PASSED).build();" ], [ "NORMAL_TEXT", "de.neemann.digital.draw.graphics", "Style", "public static final Style NORMAL_TEXT = new Builder(NORMAL).setMattersForSize(true).build();" ], [ "THIN", "de.neemann.digital.draw.graphics", "Style", "public static final Style THIN = new Builder(NORMAL).setThickness(LINETHIN).build();" ], [ "THIN_FILLED", "de.neemann.digital.draw.graphics", "Style", "public static final Style THIN_FILLED = new Builder(NORMAL).setThickness(LINETHIN).setFilled(true).build();" ], [ "THICK", "de.neemann.digital.draw.graphics", "Style", "public static final Style THICK = new Builder(NORMAL).setThickness(LINETHICK + LINETHIN).build();" ], [ "WIRE", "de.neemann.digital.draw.graphics", "Style", "public static final Style WIRE = new Builder().setThickness(WIRETHICK).setFilled(true).setColor(ColorKey.WIRE).setEndCap(BasicStroke.CAP_ROUND).build();" ], [ "WIRE_LOW", "de.neemann.digital.draw.graphics", "Style", "public static final Style WIRE_LOW = new Builder(WIRE).setColor(ColorKey.WIRE_LOW).build();" ], [ "WIRE_HIGH", "de.neemann.digital.draw.graphics", "Style", "public static final Style WIRE_HIGH = new Builder(WIRE).setColor(ColorKey.WIRE_HIGH).build();" ], [ "WIRE_HIGHZ", "de.neemann.digital.draw.graphics", "Style", "public static final Style WIRE_HIGHZ = new Builder(WIRE).setColor(ColorKey.WIRE_Z).build();" ], [ "WIRE_OUT", "de.neemann.digital.draw.graphics", "Style", "public static final Style WIRE_OUT = new Builder(WIRE).setColor(ColorKey.WIRE_OUT).build();" ], [ "FILLED", "de.neemann.digital.draw.graphics", "Style", "public static final Style FILLED = new Builder().setFilled(true).build();" ], [ "DASH", "de.neemann.digital.draw.graphics", "Style", "public static final Style DASH = new Builder().setThickness(LINEDASH).setDash(new float[] { 4, 4 }).build();" ], [ "SHAPE_PIN", "de.neemann.digital.draw.graphics", "Style", "public static final Style SHAPE_PIN = new Builder().setThickness(LINETHIN).setColor(ColorKey.PINS).setFontSize(18).build();" ], [ "SHAPE_SPLITTER", "de.neemann.digital.draw.graphics", "Style", "public static final Style SHAPE_SPLITTER = new Builder(SHAPE_PIN).setFontSize(12).build();" ], [ "WIRE_VALUE", "de.neemann.digital.draw.graphics", "Style", "public static final Style WIRE_VALUE = new Builder(SHAPE_SPLITTER).setColor(ColorKey.WIRE_VALUE).build();" ], [ "WIRE_BITS", "de.neemann.digital.draw.graphics", "Style", "public static final Style WIRE_BITS = new Builder(SHAPE_SPLITTER).setColor(ColorKey.WIRE).build();" ], [ "HIGHLIGHT", "de.neemann.digital.draw.graphics", "Style", "public static final Style HIGHLIGHT = new Builder(NORMAL).setColor(ColorKey.HIGHLIGHT).setEndCap(BasicStroke.CAP_ROUND).build();" ], [ "ERROR", "de.neemann.digital.draw.graphics", "Style", "public static final Style ERROR = new Builder(NORMAL).setColor(ColorKey.ERROR).setEndCap(BasicStroke.CAP_ROUND).build();" ], [ "BLANK", "de.neemann.digital.draw.graphics.text.text", "Blank", "public static final Blank BLANK = new Blank();" ], [ "LOOK_AT_ALIAS", "de.neemann.digital.toolchain", "Configuration", "static final String LOOK_AT_ALIAS = \"lookAt\";" ], [ "REF_ALIAS", "de.neemann.digital.toolchain", "Configuration", "static final String REF_ALIAS = \"ref\";" ] ],
  "tokensMethodJavadocValues" : [ ],
  "tokensMethodArguments" : [ [ "v", "de.neemann.digital.draw.graphics", "VectorInterface" ] ],
  "tokensMethodVariablesNonPrivateNonStaticNonVoidMethods" : [ [ "transform", "de.neemann.digital.draw.graphics", "TransformMatrix", "public Vector transform(Vector v)" ], [ "isUniform", "de.neemann.digital.draw.graphics", "TransformMatrix", "public boolean isUniform()" ], [ "transformDirection", "de.neemann.digital.draw.graphics", "TransformMatrix", "public VectorFloat transformDirection(VectorInterface v)" ], [ "invert", "de.neemann.digital.draw.graphics", "TransformMatrix", "public TransformMatrix invert()" ], [ "getClass", "java.lang", "Object", "public final native Class<? extends Object> getClass()" ], [ "getValues", "de.neemann.digital.draw.graphics", "TransformMatrix", "public float[] getValues()" ], [ "getMatrix", "de.neemann.digital.draw.graphics", "TransformMatrix", "public TransformMatrix getMatrix()" ], [ "toString", "java.lang", "Object", "public String toString()" ], [ "clone", "java.lang", "Object", "protected native Object clone() throws CloneNotSupportedException" ], [ "invert", "de.neemann.digital.draw.graphics", "Transform", "public Transform invert()" ], [ "equals", "java.lang", "Object", "public boolean equals(Object arg0)" ], [ "transform", "de.neemann.digital.draw.graphics", "TransformMatrix", "public VectorFloat transform(VectorFloat v)" ], [ "hashCode", "java.lang", "Object", "public native int hashCode()" ], [ "noRotation", "de.neemann.digital.draw.graphics", "TransformMatrix", "public boolean noRotation()" ], [ "getYFloat", "de.neemann.digital.draw.graphics", "VectorInterface", "public abstract float getYFloat()" ], [ "sub", "de.neemann.digital.draw.graphics", "VectorInterface", "public abstract VectorInterface sub(VectorInterface arg0)" ], [ "round", "de.neemann.digital.draw.graphics", "VectorInterface", "public abstract Vector round()" ], [ "len", "de.neemann.digital.draw.graphics", "VectorInterface", "public abstract float len()" ], [ "mul", "de.neemann.digital.draw.graphics", "VectorInterface", "public abstract VectorFloat mul(float arg0)" ], [ "transform", "de.neemann.digital.draw.graphics", "VectorInterface", "public abstract VectorInterface transform(Transform arg0)" ], [ "add", "de.neemann.digital.draw.graphics", "VectorInterface", "public abstract VectorInterface add(VectorInterface arg0)" ], [ "getXFloat", "de.neemann.digital.draw.graphics", "VectorInterface", "public abstract float getXFloat()" ], [ "norm", "de.neemann.digital.draw.graphics", "VectorInterface", "public abstract VectorFloat norm()" ], [ "scalar", "de.neemann.digital.draw.graphics", "VectorInterface", "public float scalar(VectorInterface arg0)" ], [ "getX", "de.neemann.digital.draw.graphics", "VectorInterface", "public abstract int getX()" ], [ "getY", "de.neemann.digital.draw.graphics", "VectorInterface", "public abstract int getY()" ], [ "div", "de.neemann.digital.draw.graphics", "VectorInterface", "public abstract VectorInterface div(int arg0)" ], [ "toFloat", "de.neemann.digital.draw.graphics", "VectorInterface", "public abstract VectorFloat toFloat()" ], [ "getOrthogonal", "de.neemann.digital.draw.graphics", "VectorInterface", "public abstract VectorInterface getOrthogonal()" ], [ "getYFloat", "de.neemann.digital.draw.graphics", "VectorFloat", "public float getYFloat()" ], [ "div", "de.neemann.digital.draw.graphics", "VectorFloat", "public VectorFloat div(int arg0)" ], [ "getY", "de.neemann.digital.draw.graphics", "VectorFloat", "public int getY()" ], [ "norm", "de.neemann.digital.draw.graphics", "VectorFloat", "public VectorFloat norm()" ], [ "mul", "de.neemann.digital.draw.graphics", "VectorFloat", "public float mul(VectorFloat arg0)" ], [ "getOrthogonal", "de.neemann.digital.draw.graphics", "VectorFloat", "public VectorFloat getOrthogonal()" ], [ "toFloat", "de.neemann.digital.draw.graphics", "VectorFloat", "public VectorFloat toFloat()" ], [ "toString", "de.neemann.digital.draw.graphics", "VectorFloat", "public String toString()" ], [ "transform", "de.neemann.digital.draw.graphics", "VectorFloat", "public VectorInterface transform(Transform arg0)" ], [ "mul", "de.neemann.digital.draw.graphics", "VectorFloat", "public VectorFloat mul(float arg0)" ], [ "add", "de.neemann.digital.draw.graphics", "VectorFloat", "public VectorFloat add(float arg0, float arg1)" ], [ "hashCode", "de.neemann.digital.draw.graphics", "VectorFloat", "public int hashCode()" ], [ "equals", "de.neemann.digital.draw.graphics", "VectorFloat", "public boolean equals(Object arg0)" ], [ "len", "de.neemann.digital.draw.graphics", "VectorFloat", "public float len()" ], [ "getX", "de.neemann.digital.draw.graphics", "VectorFloat", "public int getX()" ], [ "add", "de.neemann.digital.draw.graphics", "VectorFloat", "public VectorFloat add(VectorInterface arg0)" ], [ "getXFloat", "de.neemann.digital.draw.graphics", "VectorFloat", "public float getXFloat()" ], [ "sub", "de.neemann.digital.draw.graphics", "VectorFloat", "public VectorFloat sub(VectorInterface arg0)" ], [ "round", "de.neemann.digital.draw.graphics", "VectorFloat", "public Vector round()" ] ],
  "tokensMethodVariablesNonPrivateNonStaticAttributes" : [ [ "a", "de.neemann.digital.draw.graphics", "TransformMatrix", "final float a;" ], [ "b", "de.neemann.digital.draw.graphics", "TransformMatrix", "final float b;" ], [ "c", "de.neemann.digital.draw.graphics", "TransformMatrix", "final float c;" ], [ "d", "de.neemann.digital.draw.graphics", "TransformMatrix", "final float d;" ], [ "x", "de.neemann.digital.draw.graphics", "TransformMatrix", "final float x;" ], [ "y", "de.neemann.digital.draw.graphics", "TransformMatrix", "final float y;" ] ],
  "tokensOracleVariablesNonPrivateNonStaticNonVoidMethods" : [ ],
  "tokensOracleVariablesNonPrivateNonStaticAttributes" : [ ]
} ]